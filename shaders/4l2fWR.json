{
    "Shader": {
        "info": {
            "date": "1515795601",
            "description": "Another shaping exercise practice. These are really fun. Those are ancient greek patterns. I am really unhappy with the wave pattern, but I couldnt figure a way out. ",
            "flags": 0,
            "hasliked": 0,
            "id": "4l2fWR",
            "likes": 27,
            "name": "Greek Patterns - Shaping exercis",
            "published": 3,
            "tags": [
                "patterns",
                "shaders",
                "exercise",
                "ancient",
                "greek",
                "shaping",
                "frieze"
            ],
            "usePreview": 0,
            "username": "ircss",
            "viewed": 1188
        },
        "renderpass": [
            {
                "code": "#define TWO_PI 6.28318530718\n#define e  2.71828\n\n\nfloat DrawRectangle(in vec2 pos, in vec2 dimensions , in vec2 coord){\n    vec2 d = abs(coord - pos) - dimensions;\n    return float(max(d.x,d.y)<0.);\n    \n}\n\n\nvec4 PalletToRGB(vec3 col01, vec3 col02, vec3 col03, vec3 col04, vec3 colorToConvert){\n \t\n    vec3 toReturn = col04;\n    toReturn = mix(toReturn, col01, colorToConvert.x);\n    toReturn = mix(toReturn, col02, colorToConvert.y);\n    toReturn = mix(toReturn, col03, colorToConvert.z);\n    \n    return vec4(toReturn, 1.0);\n}\n\n\n// PATTERNS FUNCTIONS \n\nvoid Patter01(inout vec3 color, in vec3 PatternColor01, in vec3 PatternColor02, in float yPos, in vec2 coord, in float size){\n    \n    float lineWidthUnit = size/ (7.0);\n    vec3 colorToAdd = PatternColor01;\n    float lineWidthUnitXStretched = lineWidthUnit / (lineWidthUnit *12.0);\n    \n    float distanceToCenter= abs( coord.y - yPos) / (size/2.0);\n   \n    \n    \n    float repeatingXCoordinat01 = fract(coord.x / (lineWidthUnit *6.0) );\n    \n    float facingUp = DrawRectangle( vec2(0.25, yPos  - lineWidthUnit), \n                      vec2(lineWidthUnitXStretched, lineWidthUnit*2.5), vec2(repeatingXCoordinat01, coord.y)) + \n        DrawRectangle( vec2(0.25, yPos  + lineWidthUnit), \n                      vec2(lineWidthUnitXStretched*3.5, lineWidthUnit*0.5), vec2(repeatingXCoordinat01, coord.y)); \n    \n    float facingDowm = DrawRectangle( vec2(0.75, yPos  + lineWidthUnit), \n                      vec2(lineWidthUnitXStretched, lineWidthUnit*2.5), vec2(repeatingXCoordinat01, coord.y)) + \n        DrawRectangle( vec2(0.75, yPos  - lineWidthUnit), \n                      vec2(lineWidthUnitXStretched*3.5, lineWidthUnit*0.5), vec2(repeatingXCoordinat01, coord.y));\n    \n    float borders = DrawRectangle( vec2(0.5, yPos  - 3.0 * lineWidthUnit), \n                      vec2(lineWidthUnitXStretched*8.0, lineWidthUnit * 0.5), vec2(repeatingXCoordinat01, coord.y))\n        +  DrawRectangle( vec2(0.5, yPos  + 3.0 * lineWidthUnit), \n                      vec2(lineWidthUnitXStretched*8.0, lineWidthUnit * 0.5), vec2(repeatingXCoordinat01, coord.y));\n    \n    \n     float repeatingPattern =   facingUp + facingDowm + borders;\n    repeatingPattern = clamp(repeatingPattern, 0.0, 1.0);\n    \n    colorToAdd = mix(PatternColor02, colorToAdd, 1.0 - repeatingPattern);\n    \n    \n    float upDownEdges = (1.0 - step( lineWidthUnit * 3.5 + yPos, coord.y) )*\n        (step( -lineWidthUnit * 3.5 + yPos, coord.y));\n    \n    \n    colorToAdd = mix(colorToAdd, colorToAdd * 0.6, pow( distanceToCenter, 1.4) /1.0);\n    \n    color = mix(colorToAdd, color, 1.0 - upDownEdges);\n    \n    \n}\n\nvoid Patter02(inout vec3 color, in vec3 PatternColor01, in vec3 PatternColor02, in float yPos, in vec2 coord, in float size){\n    \n    float lineWidthUnit = size/ (7.0);\n    vec3 colorToAdd = PatternColor01;\n    float lineWidthUnitXStretched = lineWidthUnit / (lineWidthUnit *12.0);\n   float distanceToCenter= abs( coord.y - yPos) / (size/2.0);\n    \n    \n    float repeatingXCoordinat01 = fract(coord.x / (lineWidthUnit *6.0) );\n    \n    float facingUp = DrawRectangle( vec2(0.25, yPos  - lineWidthUnit), \n                      vec2(lineWidthUnitXStretched, lineWidthUnit*2.5), vec2(repeatingXCoordinat01, coord.y)) + \n        DrawRectangle( vec2(0.4167, yPos  + lineWidthUnit), \n                      vec2(lineWidthUnitXStretched*3.0, lineWidthUnit*0.5), vec2(repeatingXCoordinat01, coord.y)); \n    \n    float facingDowm = DrawRectangle( vec2(0.9167, yPos  + lineWidthUnit), \n                      vec2(lineWidthUnitXStretched, lineWidthUnit*2.5), vec2(repeatingXCoordinat01, coord.y)) + \n        DrawRectangle( vec2(0.75, yPos  - lineWidthUnit), \n                      vec2(lineWidthUnitXStretched*3.5, lineWidthUnit*0.5), vec2(repeatingXCoordinat01, coord.y));\n    \n    float borders = DrawRectangle( vec2(0.5, yPos  - 3.0 * lineWidthUnit), \n                      vec2(lineWidthUnitXStretched*8.0, lineWidthUnit * 0.5), vec2(repeatingXCoordinat01, coord.y))\n        +  DrawRectangle( vec2(0.5, yPos  + 3.0 * lineWidthUnit), \n                      vec2(lineWidthUnitXStretched*8.0, lineWidthUnit * 0.5), vec2(repeatingXCoordinat01, coord.y));\n    \n    \n     float repeatingPattern =   facingUp + facingDowm + borders;\n    repeatingPattern = clamp(repeatingPattern, 0.0, 1.0);\n    \n    colorToAdd = mix(PatternColor02, colorToAdd, 1.0 - repeatingPattern);\n    \n    \n    float upDownEdges = (1.0 - step( lineWidthUnit * 3.5 + yPos, coord.y) )*\n        (step( -lineWidthUnit * 3.5 + yPos, coord.y));\n    colorToAdd = mix(colorToAdd, colorToAdd * 0.7, pow( distanceToCenter, 1.4) /1.0);\n    \n    color = mix(colorToAdd, color, 1.0 - upDownEdges);\n    \n    \n    \n}\n\n\nvoid Patter03(inout vec3 color, in vec3 PatternColor01, in vec3 PatternColor02, in float yPos, in vec2 coord, in float size){\n    \n    float lineWidthUnit = size/ (9.0);\n    vec3 colorToAdd = PatternColor01;\n    float lineWidthUnitXStretched = lineWidthUnit / (lineWidthUnit *8.0);\n    float xUnit = 1.0/8.0;\n   float distanceToCenter= abs( coord.y - yPos) / (size/2.0);\n    \n    \n    float repeatingXCoordinat01 = fract(coord.x / (lineWidthUnit *8.0) );\n    \n    float facingUp = DrawRectangle( vec2(xUnit * 1.5, yPos  - lineWidthUnit * 0.5), \n                      vec2(lineWidthUnitXStretched *0.5, lineWidthUnit*3.0), vec2(repeatingXCoordinat01, coord.y)) + \n        DrawRectangle( vec2(3.5*xUnit, yPos  + lineWidthUnit * 2.0), \n                      vec2(lineWidthUnitXStretched*2.5, lineWidthUnit*0.5), vec2(repeatingXCoordinat01, coord.y)) + \n        DrawRectangle( vec2(3.5*xUnit, yPos  - lineWidthUnit ), \n                      vec2(lineWidthUnitXStretched*0.5, lineWidthUnit*1.5), vec2(repeatingXCoordinat01, coord.y)) ; \n    \n    float facingDowm = DrawRectangle( vec2(1.0 - xUnit*0.5, yPos  + lineWidthUnit * 0.5), \n                      vec2(lineWidthUnitXStretched * 0.5, lineWidthUnit * 3.0), vec2(repeatingXCoordinat01, coord.y)) + \n        DrawRectangle( vec2(5.5 * xUnit, yPos  - lineWidthUnit  * 2.0), \n                      vec2(lineWidthUnitXStretched*2.5, lineWidthUnit*0.5), vec2(repeatingXCoordinat01, coord.y)) + \n        DrawRectangle( vec2(5.5*xUnit, yPos  + lineWidthUnit ), \n                      vec2(lineWidthUnitXStretched*0.5, lineWidthUnit*1.5), vec2(repeatingXCoordinat01, coord.y));\n    \n    float borders = DrawRectangle( vec2(0.5, yPos  - 4.0 * lineWidthUnit), \n                      vec2(lineWidthUnitXStretched*8.0, lineWidthUnit * 0.5), vec2(repeatingXCoordinat01, coord.y))\n        +  DrawRectangle( vec2(0.5, yPos  + 4.0 * lineWidthUnit), \n                      vec2(lineWidthUnitXStretched*8.0, lineWidthUnit * 0.5), vec2(repeatingXCoordinat01, coord.y));\n    \n    \n     float repeatingPattern =   facingUp + facingDowm + borders;\n    repeatingPattern = clamp(repeatingPattern, 0.0, 1.0);\n    \n    colorToAdd = mix(PatternColor02, colorToAdd, 1.0 - repeatingPattern);\n    \n    \n    float upDownEdges = (1.0 - step( lineWidthUnit * 4.5 + yPos, coord.y) )*\n        (step( -lineWidthUnit * 4.5 + yPos, coord.y));\n    colorToAdd = mix(colorToAdd, colorToAdd * 0.7, pow( distanceToCenter, 1.4) /1.0);\n    color = mix(colorToAdd, color, 1.0 - upDownEdges);\n    \n    \n}\n\nvoid Patter04(inout vec3 color, in vec3 PatternColor01, in vec3 PatternColor02, in float yPos, in vec2 coord, in float size){\n    \n    float lineWidthUnit = size/ (8.0);\n    vec3 colorToAdd = PatternColor01;\n    float lineWidthUnitXStretched = lineWidthUnit / (lineWidthUnit *8.0);\n    float xUnit = 1.0/8.0;\n   float distanceToCenter= abs( coord.y - yPos) / (size/2.0);\n    vec2 spiralCenter = vec2( 0.66, yPos - lineWidthUnit * 0.5 );\n    \n    vec2 spiralCenterPrevieus = vec2( -0.44, yPos - lineWidthUnit * 0.5 );\n     float repeatingXCoordinat01 = fract(coord.x / (lineWidthUnit *8.0) );\n    \n    // Map to 0 to 1 \n    \n    vec2 pixelToCenter = vec2(repeatingXCoordinat01, coord.y) - spiralCenter;\n     vec2 pixelToCenterTwo = vec2(repeatingXCoordinat01, coord.y) - spiralCenterPrevieus;\n    \n    \n    \n\tfloat angle = atan(pixelToCenter.y , (pixelToCenter.x/8.0)) ;\n    float angle2 = atan(- pixelToCenter.y , -(pixelToCenter.x/ 8.0)) ;\n    float angle3 = atan(- pixelToCenterTwo.y , -(pixelToCenterTwo.x/ 8.0)) ;\n    \n    float firstSpiralAlpha = (((angle ) /TWO_PI)+0.5);\n    float secondSpiralAlpha =  (((-angle ) /TWO_PI)+0.5);\n   \tfloat thirdSpiralAngel = (((angle2 ) /TWO_PI)+0.5);\n    float forthSpiralAngel = (((-angle3 ) /TWO_PI)+0.5);\n    \n    float distanceToThePixelFromCenterSpiral01 = length(vec2(pixelToCenter.x*0.6, pixelToCenter.y * 4.0));\n    \n    float a = 0.28 * size;\n    float b = 38.2 * size;\n    \n    float spiralOne= (step( (a * 1.5  * pow(e, firstSpiralAlpha* atan(b ) )) , (distanceToThePixelFromCenterSpiral01)) );\n    float spiralTwo =  step( (a *1.0* pow(e, secondSpiralAlpha* atan(b /1.0) )) , (distanceToThePixelFromCenterSpiral01)); \n    float spiralThree =  step( (a *0.135* pow(e, thirdSpiralAngel* 3.0 *atan(b /1.8) )) , (distanceToThePixelFromCenterSpiral01)); \n    float cutOutEdge = (1.0 - step(0.078, repeatingXCoordinat01))  * (1.0 - step( (repeatingXCoordinat01 * 0.55 ) -0.047+ yPos, coord.y));\n    \n    float blendingFactor = (step(0.078, repeatingXCoordinat01) * (((1.0 -spiralOne) * spiralTwo) +( spiralThree  * step(0.5, thirdSpiralAngel)))) + cutOutEdge;\n   \n    \n    colorToAdd = mix(PatternColor02, PatternColor01,clamp( 1.0 - blendingFactor, 0.0, 1.0));\n    \n    \n    float upDownEdges = (1.0 - step( lineWidthUnit * 4.5 + yPos, coord.y) )*\n        (step( -lineWidthUnit * 4.5 + yPos, coord.y));\n    colorToAdd = mix(colorToAdd, colorToAdd * 0.7, pow( distanceToCenter, 1.4) /1.0);\n    color = mix(colorToAdd, color, 1.0 - upDownEdges);\n    \n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Settomg up the UV coordinates\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    vec3 backGround = vec3(0.0,0.0,0.1);\n    vec3 color01 = vec3(0.758 + sin(iTime * 0.8) / 4.0, + cos((iTime + TWO_PI /2.0) * 0.8), 0.031);\n    vec3 color02 = vec3(1.0, 0.6 + cos(iTime * 0.8), 0.1);\n    vec3 color03 = vec3(1.0, 0.9, 0.9);\n    \n    float highlightRunning = 1.0 - smoothstep(0.01, 0.5, abs(\n        (fract(iTime / 4.0  ) * iResolution.x * 2.0/ iResolution.y) -0.5 - uv.x ));\n    vec3 colorToReturn = vec3(0.4, 0.8, 0.4);\n    \n    float distanceToCenter = distance(uv, vec2(((iResolution.x/  iResolution.y))/2.0 ,0.5));\n \n    \n    Patter01(colorToReturn, vec3(0.99, 0.0141, 0.2), vec3(0.1, 0.9, uv.x/5.0),0.9, vec2(uv.x + iTime * 0.2, uv.y), 0.2);\n    Patter02(colorToReturn, vec3(abs(2.0 * fract(iTime / 5.0) - 1.0 ) , abs(2.0 * fract(iTime / 5.0) - 1.0 )*1.2, 0.0312 ),vec3(0.7-  abs(2.0 * fract(iTime / 5.0) - 1.0 )*0.5, 0.16, uv.x/5.0), 0.68,vec2(uv.x - iTime * 0.2, uv.y), 0.2);\n    Patter03(colorToReturn, vec3(0.91325 , 0.3213 + highlightRunning, 0.1  ), vec3( highlightRunning, 0.321, uv.x/7.0), 0.40, vec2(uv.x + iTime * 0.3, uv.y), 0.31);\n    \n    Patter04(colorToReturn, vec3(0.11325 , 0.9213 + highlightRunning, 0.1  ), vec3(0.1, 0.121, uv.x/7.0), 0.1, vec2(uv.x - iTime * 0.1, uv.y), 0.2);\n    \n    \n\tfragColor =  PalletToRGB(color01, color02, color03, backGround, colorToReturn);\n    \n    fragColor *= (1.0 -smoothstep(0.3, 1.2, distanceToCenter));\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}