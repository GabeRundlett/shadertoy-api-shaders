{
    "Shader": {
        "info": {
            "date": "1693475331",
            "description": "Explore the amazingly beautiful mandelbox (updated, see the source)",
            "flags": 32,
            "hasliked": 0,
            "id": "cllfD2",
            "likes": 33,
            "name": "Compleat Mandelbox 2",
            "published": 3,
            "tags": [
                "fractal",
                "interactive"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "// \"Compleat Mandelbox 2\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n/*\n  Detailed exploration of periodic mandelbox (narrow tunnel drilled through\n  solid regions).\n\n  Updates include changed path for improved coverage of interior.\n\n  Control panel appears when ring (or a hidden control) clicked; panel fades\n  automatically; use mouse to look around.\n\n  Sliders:\n   red: forward speed (stop anywhere)\n   green: zoom\n   blue: fractal scale factor (2.5--3.5)\n\n  Button: color scheme (several fixed and varying)\n\n  No. 9 in \"Mandelbox\" series\n    \"Mandelbox Tunnel\"            (MlfSWX)\n    \"Mandelmaze\"                  (MtXXDl)\n    \"Mandelmaze in Daylight\"      (MdVGRc)\n    \"Endless Mandelbox Tunnel\"    (XdjfRz)\n    \"Palladio's Detector\"         (Ms3fWB)\n    \"Compleat Mandelbox\"          (ld3fDl)\n    \"Mandalay Fractal\"            (wstXD8)\n    \"Fractal Tomography\"          (3dlfDH)\n*/\n\n#define AA  1   // (= 0/1) optional antialiasing\n\nfloat PrTorusDf (vec3 p, float ri, float rc);\nvec3 HsvToRgb (vec3 c);\nfloat Maxv2 (vec2 p);\nfloat Minv2 (vec2 p);\nfloat Maxv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec4 Loadv4 (int idVar);\n\nvec3 ltPos[2], ltAx, pathMid;\nfloat tCur, dstFar, mScale, chCol, pathRad;\nint nFrame, isPer;\nconst float pi = 3.1415927;\nconst float itMax = 12.;\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat ObjDf (vec3 p)\n{\n  vec4 q4, q4o;\n  vec3 q;\n  float d;\n  q = p;\n  q4o = (isPer > 0) ? vec4 (6. * (fract (q / 6. + 0.5) - 0.5), 1.) : vec4 (q, 1.);\n  q4 = q4o;\n  for (float j = 0.; j < itMax; j ++) {\n    q4.xyz = 2. * clamp (q4.xyz, -1., 1.) - q4.xyz;\n    q4 = mScale * q4 / clamp (dot (q4.xyz, q4.xyz), 0.25, 1.) + q4o;\n  }\n  d = length (q4.xyz) / q4.w;\n  q = p;\n  d = max (d, - PrTorusDf ((q - pathMid).xzy, 0.02, pathRad));\n  return d;\n}\n\nvec4 ObjCol (vec3 p)\n{\n  vec4 col4;\n  vec3 q, q3, col;\n  float qq, qqMin, cn, cr;\n  q = (isPer > 0) ? 6. * (fract (p / 6. + 0.5) - 0.5) : p;;\n  q3 = q;\n  cn = 0.;\n  cr = 0.;\n  qqMin = 1.;\n  for (float j = 0.; j < itMax; j ++) {\n    if (any (greaterThan (q3, vec3 (1.)))) ++ cr;\n    q3 = 2. * clamp (q3, -1., 1.) - q3;\n    qq = dot (q3, q3);\n    if (qq < qqMin) {\n      cn = j;\n      qqMin = qq;\n    }\n    if (abs (qq - 0.625) > 0.375) ++ cr;\n    q3 = mScale * q3 / clamp (qq, 0.25, 1.) + q;\n  }\n  if      (chCol == 0.) col4 = vec4 (0.03 * cr, mix (0.15, 0.05, mod (cn, 2.)), 1., 0.3);\n  else if (chCol == 1.) col4 = vec4 (0.04 * tCur + 0.06 * cn, 0.8, 1., 0.4);\n  else if (chCol == 2.) col4 = vec4 (0.3 + 0.2 * cn, 0.7, 1., 0.3);\n  else if (chCol == 3.) col4 = vec4 (0.13 + 0.004 * cn, 0.8, 1., 0.4);\n  else if (chCol == 4.) col4 = vec4 (0.1 * cn, 0.8, 1., 0.2);\n  col4.r = fract (col4.r);\n  col4.rgb = HsvToRgb (col4.rgb);\n  return col4;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, h, s, sLo, sHi, eps;\n  eps = 0.0005;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    h = ObjDf (ro + s * rd);\n    if (h < eps || s > dstFar) {\n      sHi = s;\n      break;\n    }\n    sLo = s;\n    s += h;\n  }\n  if (h < eps) {\n    for (int j = VAR_ZERO; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      if (ObjDf (ro + s * rd) > eps) sLo = s;\n      else sHi = s;\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = 1e-4 * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (3. * h, 0.04, 0.3);\n    if (sh < 0.05 || d > dMax) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (float j = 1. + float (VAR_ZERO); j < 4.; j ++) {\n    d = 0.02 * j;\n    ao += max (0., d - ObjDf (ro + d * rd));\n  }\n  return 0.5 + 0.5 * clamp (1. - 5. * ao, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, ltDir;\n  vec2 q;\n  float dstObj, ltDist, atten, dfSum, spSum, nDotL, sh;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    dfSum = 0.;\n    spSum = 0.;\n    for (int k = 0; k < 2; k ++) {\n      ltDir = ltPos[k] - ro;\n      ltDist = length (ltDir);\n      ltDir /= ltDist;\n      atten = smoothstep (0.3, 0.5, dot (ltAx, - ltDir)) / (1. + 0.01 * ltDist * ltDist);\n      nDotL = max (dot (vn, ltDir), 0.);\n      dfSum += atten * nDotL * sqrt (nDotL);\n      spSum += atten * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    }\n    ltDir = normalize (0.5 * (ltPos[0] + ltPos[1]) - ro);\n    sh = ObjSShadow (ro + 0.01 * ltDir, ltDir, max (dstObj - 0.2, 0.));\n    col4 = ObjCol (ro);\n    col = col4.rgb * (0.3 + 0.4 * sh * dfSum) + vec3 (1., 1., 0.5) * step (0.95, sh) *\n       col4.a * 0.5 * spSum;\n    col *= ObjAO (ro, vn);\n    col += vec3 (0.2, 0.2, 0.) * max (dot (- rd, vn), 0.) *\n       (1. - smoothstep (0., 0.03, abs (dstObj - 0.5 * mod (tCur, 6.))));\n    col *= mix (1., smoothstep (0., 1., Maxv3 (col)), 0.5);\n  } else col = vec3 (0.1, 0.1, 0.15);\n  return col;\n}\n\nvec4 ShowWg (vec2 uv, vec2 canvas, vec3 parmV)\n{\n  vec4 wgBx[4];\n  vec3 cc[4], col;\n  vec2 ut, ust;\n  float asp;\n  cc[0] = vec3 (0.9, 0.5, 0.5);\n  cc[1] = cc[0].grb;\n  cc[2] = cc[0].bgr;\n  cc[3] = cc[0].rrg;\n  asp = canvas.x / canvas.y;\n  for (int k = 0; k <= 2; k ++)\n     wgBx[k] = vec4 ((0.38 + 0.04 * float (k)) * asp, -0.21, 0.014 * asp, 0.18);\n  wgBx[3] = vec4 (0.42 * asp, -0.44, 0.018, 0.018);\n  col = vec3 (0.);\n  for (int k = 0; k <= 2; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (Maxv2 (ust) < 0.) {\n      col = cc[k];\n      if (Minv2 (abs (ust)) * canvas.y < 2.) col *= 0.3;\n      else col *= (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.1) *\n         canvas.y < 6.) ? 0.3 : 0.6;\n    }\n    ut.y -= (parmV[k] - 0.5) * 2. * wgBx[k].w;\n    ut = abs (ut) * vec2 (1., 1.4);\n    if (Maxv2 (abs (ut)) < 0.02 && Maxv2 (ut) > 0.013) col = cc[k];\n  }\n  for (int k = 3; k <= 3; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw;\n    if (Maxv2 (ust) < 0.) {\n      col = cc[k] * (1. - 0.4 * step (2., Minv2 (abs (ust)) * canvas.y));\n    }\n  }\n  return vec4 (col, step (0.001, length (col)));\n}\n\nvec3 TrkPath (float t)\n{\n  return pathMid + vec3 (Rot2D (vec2 (0., pathRad), 2. * pi * t / pathRad), 0.).xzy;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat, mPtr, wgBxC, c4;\n  vec3 ro, rd, col, vd, parmV;\n  vec2 canvas, uv, uvv;\n  float el, az, sr, zmFac, asp, tCurM, vuTr;\n  int wgSel, noInt;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  isPer = 1;\n  stDat = Loadv4 (0);\n  parmV = stDat.xyz;\n  zmFac = mix (1.2, 12., parmV.y);\n  mScale = mix (2.5, 3.5, parmV.z);\n  stDat = Loadv4 (1);\n  mPtr = vec4 (stDat.xyz, 0.);\n  wgSel = int (stDat.w);\n  stDat = Loadv4 (2);\n  el = stDat.x;\n  az = stDat.y;\n  tCurM = stDat.w;\n  stDat = Loadv4 (3);\n  vuTr = stDat.x;\n  chCol = stDat.y;\n  noInt = int (stDat.z);\n  pathRad = mix (1.5, 2.5, 0.5 + 0.5 * sin (0.03 * pi * vuTr));\n  pathMid = vec3 (0., 0.7 * sin (0.05 * pi * vuTr), 0.);\n  ro = TrkPath (vuTr);\n  vd = normalize (TrkPath (vuTr + 0.1) - ro);\n  az += atan (vd.z, - vd.x) - 0.5 * pi;\n  vuMat = StdVuMat (el, az);\n  ltPos[0] = ro + vuMat * vec3 (-0.3, 0.2, -0.02);\n  ltPos[1] = ro + vuMat * vec3 (0.3, 0.2, -0.02);\n  ltAx = vuMat * vec3 (0., 0., 1.);\n  dstFar = 80.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi);\n    rd = normalize (vec3 (uvv, zmFac));\n    rd.xy = Rot2D (rd.xy, 0.5 * pi * vuTr);\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (tCur - tCurM < 10. || noInt > 0) {\n    c4 = ShowWg (uv, canvas, parmV);\n    c4 = vec4 (mix (col, c4.rgb, c4.a),\n       ((noInt > 0) ? 0. : 0.2 + 0.8 * smoothstep (9., 10., tCur - tCurM)));\n  } else {\n    wgBxC = vec4 (0.48 * asp, -0.46, 0.022, 0.);\n    c4 = vec4 (0., 0.7, 0.7, 0.3 + 0.7 * smoothstep (1., 2.,\n       abs (length (0.5 * uv - wgBxC.xy) - wgBxC.z) * canvas.y));\n  }\n  col = mix (c4.rgb, col, c4.a);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Compleat Mandelbox 2\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\nfloat Maxv2 (vec2 p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nint nFrame;\nconst float txRow = 32.;\nconst float pi = 3.1415927;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[5], mPtr, mPtrP, stDat;\n  vec3 parmV;\n  vec2 iFrag, canvas, mt;\n  float tCur, tCurM, tCurP, asp, el, az, spd, vuTr, chCol;\n  int pxId, wgSel, wgReg, noInt;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  nFrame = iFrame;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  asp = canvas.x / canvas.y;\n  wgSel = -1;\n  wgReg = -2;\n  noInt = 1;\n  if (nFrame <= 1) {\n    parmV = vec3 (0.2, 0.3, 0.3);\n    mPtrP = mPtr;\n    el = 0.;\n    az = 0.;\n    tCurM = tCur;\n    tCurP = tCur;\n    vuTr = 0.;\n    chCol = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    parmV = stDat.xyz;\n    stDat = Loadv4 (1);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (2);\n    el = stDat.x;\n    az = stDat.y;\n    tCurP = stDat.z;\n    tCurM = stDat.w;\n    stDat = Loadv4 (3);\n    vuTr = stDat.x;\n    chCol = stDat.y;\n    noInt = int (stDat.z);\n  }\n  if (mPtr.z > 0.) {\n    for (int k = 0; k <= 2; k ++)\n       wgBx[k] = vec4 ((0.38 + 0.04 * float (k)) * asp, -0.21, 0.014 * asp, 0.18);\n    wgBx[3] = vec4 (0.42 * asp, -0.44, 0.018, 0.018);\n    wgBx[4] = vec4 (0.48 * asp, -0.46, 0.022, 0.);\n    mt = mPtr.xy * vec2 (asp, 1.);\n    for (int k = 0; k <= 4; k ++) {\n      if (Maxv2 (abs (mt - wgBx[k].xy) - wgBx[k].zw) < 0.) wgReg = k;\n    }\n    if (length (mt - wgBx[4].xy) < wgBx[4].z) wgReg = 4;\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n    if (wgSel >= 0) tCurM = tCur;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      az = 2. * pi * clamp (1.1 * mPtr.x, -0.5, 0.5);\n      el = pi * clamp (1.1 * mPtr.y, -0.5, 0.5);\n    } else {\n      az *= 0.992;\n      el *= 0.992;\n    }\n  } else {\n    if (wgSel < 3) {\n      parmV[wgSel] = clamp (0.5 + 0.5 * (mPtr.y - wgBx[wgSel].y) / wgBx[wgSel].w, 0., 0.999);\n    } else if (mPtrP.z <= 0.) {\n      if (wgSel == 3) chCol = mod (++ chCol, 5.);\n    }\n    noInt = 0;\n  }\n  spd = 0.2 * parmV.x;\n  vuTr += spd * (tCur - tCurP);\n  if      (pxId == 0) stDat = vec4 (parmV, 0.);\n  else if (pxId == 1) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 2) stDat = vec4 (el, az, tCur, tCurM);\n  else if (pxId == 3) stDat = vec4 (vuTr, chCol, float (noInt), 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}