{
    "Shader": {
        "info": {
            "date": "1654198566",
            "description": "Looks best in fullscreen (press space to reset) on high-resolution displays (> 1080p)\n\nControls:\n     [W, A, S, D, mouse drag] - camera move\n     [UP, DOWN, top-right screen corner] - camera zoom \n     [SPACE, botom-right screen reset] - reset",
            "flags": 48,
            "hasliked": 0,
            "id": "NdtyW4",
            "likes": 5,
            "name": "Game of Life Computes Pi",
            "published": 3,
            "tags": [
                "2d",
                "zoom",
                "camera",
                "compression",
                "gameoflife",
                "mobile"
            ],
            "usePreview": 0,
            "username": "BlackSquare",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "/* \n    Title:  Game of Life Computes Pi\n    Author: Dmitrii Shesterkin\n\n    Description:\n        Demonstrates Conway’s Game of Life with a pattern that geometrically \n        computes a value related to Pi.\n\n        \"An arrangement of four breeders that produce Gosper glider guns that \n        fire at each other so as to invert each others’ streams\"\n\n        Looks best in fullscreen (press space to reset) on high-resolution \n        displays (> 1080p)\n\n    Controls:\n        [W, A, S, D, mouse drag] - camera move\n        [UP, DOWN, top-right screen corner] - camera zoom\n        [SPACE, botom-right screen corner] - reset\n\n    Features:\n        * Initialized with an interesting Game Of Life pattern\n        * Mobile-friendly: 60FPS on 2016's Android phone (Mali-G71 MP8)\n        * Implements data compression to overcome constant values limit \n          (it is especially low on mobiles)\n        * Relatively efficient branchless code\n        * SDF rendering of the cells\n        \n    History and tools:\n        https://github.com/black-square/GameOfLife\n\n    The pattern source:\n        \"FIGURE 6.43: LIFE COMPUTES PI\" \"A pattern with population in \n        generation t equal to approximately (pi-2)t^2/720\"\n        from \"Nathaniel Johnston and Dave Greene - \"Conway’s Game of Life: \n        Mathematics and Construction\" \n\n        https://conwaylife.com/book/periodic_circuitry\n*/\n\nvec3 colorize(in vec2 uv )\n{   \n    //Time varying pixel color from the default shadertoy shader \n    return 0.8 + 0.2 * cos(iTime + uv.xyx + vec3(0,2,4) );\n}\n\nfloat drawCircle( in vec2 pos, in vec2 center, in float radius, in float eps )\n{\n    //Efficient circle rendering without sqrt\n    vec2 delta = pos - center;\n    float distSquared = dot(delta, delta);\n\t \n    vec2 border = vec2( radius - eps, radius + eps );\n    \n    border *= border;\n    \n    return 1.0 - smoothstep(border.x, border.y, distSquared);\n}\n\nfloat DrawRing( in vec2 pos, in vec2 center, in float radius, in float aspectRatio, in float eps )\n{\n    float res = 1.0;\n    \n    //We use negative values to simplify alignment to the right or the bottom border\n    center = wrap( center, vec2(1.0, aspectRatio) );\n    \n    res *= drawCircle(pos, center, radius, eps);\n    res *= 1.0 - drawCircle(pos, center, radius * 0.75, eps);\n    \n    return res;\n}\n\nfloat drawUi( in vec2 uiPos, in float eps, in float aspectRatio )\n{\n    float res = 1.0;\n    \n    // A OR B = 1 - (1 - A) * (1 - B)\n    res *= 1.0 - DrawRing(uiPos, btnZoomInPos, btnRadius, aspectRatio, eps);\n    res *= 1.0 - DrawRing(uiPos, btnZoomOutPos, btnRadius, aspectRatio, eps);\n    res *= 1.0 - DrawRing(uiPos, btnResetPos, btnRadius, aspectRatio, eps);\n    \n    return 1.0 - res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    //Inverse of Y axis\n    fragCoord.y = iResolution.y - fragCoord.y;\n    \n    //Following multiplications could be faster than division\n    vec2 invRes = 1.0 / iResolution.xy;\n    \n    //Read camera info. It's the same for all texels \n    vec4 buff0 = texture(iChannel0, fragColor.xy * invRes);\n    float camZoom = buff0.w;\n    vec2 camPan = buff0.yz;\n    \n    //Camera formula. solve([xy / camZoom + camPan = screenPos], [xy])\n    vec2 uv = (fragCoord.xy - camPan) * camZoom;\n    \n    //Texture lookup by the cell center eliminates borders \n    //artifacts at the very close zoom\n    vec2 cellCenter = floor(uv) + vec2(0.5);\n    float val = texture(iChannel0, cellCenter * invRes).x;\n   \n    //The SDF border smoothness in screen pixels\n    float eps = 1.0;\n    \n    //Render the cell as a circle in the world's (grid) space   \n    val *= drawCircle( uv, cellCenter, 0.5, eps * camZoom);\n    \n    //Render UI in the screen space\n    vec2 uiPos = fragCoord * invRes.x;\n    float epsScreen = eps * invRes.x;\n    float uiVal = drawUi(uiPos, epsScreen, invRes.x * iResolution.y);\n    \n    vec3 res = mix( colorize(fragCoord * invRes) * val, vec3(1.0), 0.5 * uiVal );\n    \n    fragColor = vec4(res, 1.0); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 wrap( in vec2 uv, in vec2 resolution )\n{\n    return mod(uv, resolution);\n}\n\nivec2 wrap( in ivec2 uv, in vec2 resolution )\n{\n    return ivec2( wrap(vec2(uv), resolution) );\n}\n\n//UI Elements\nconst float btnRadius = 0.025;\nconst vec2 btnZoomInPos = vec2(-btnRadius, btnRadius);\nconst vec2 btnZoomOutPos = vec2(-btnRadius, 3.0 * btnRadius);\nconst vec2 btnResetPos = vec2(-btnRadius, -btnRadius);\n\n\n#define COMPRESSED_BITMAP_NODES \\\n0x00000000u, 0x00400100u, 0x00000020u, 0x03800E00u, 0x00000080u, 0x1A086800u, 0x7071C000u, 0xC1630000u, 0x20000000u, \\\n0x80000000u, 0x00000383u, 0x00000904u, 0x00002090u, 0x00008380u, 0x00010000u, 0x00000100u, 0x00000E00u, 0x00002C00u, \\\n0x00007000u, 0x00000400u, 0x00018000u, 0x00003800u, 0x0000B082u, 0x0001C71Cu, 0x00063458u, 0x30000000u, 0x0000E0E0u, \\\n0x02018301u, 0x0C000001u, 0x08010000u, 0x200E0000u, 0x00441800u, 0x0110C000u, 0x00E00000u, 0x00008038u, 0x02400000u, \\\n0x00000090u, 0x00000040u, 0x08000000u, 0x00000207u, 0x80000824u, 0x40000200u, 0x00001088u, 0x00000002u, 0x70000000u, \\\n0x00001C00u, 0x000001E0u, 0x00000008u, 0x60000000u, 0x00005841u, 0x0000E383u, 0x0003190Cu, 0x00006C00u, 0x00000380u, \\\n0x00013800u, 0x00000B00u, 0x0002C000u, 0x00020000u, 0x00006000u, 0x1C880000u, 0x91400000u, 0x18000000u, 0x00002000u, \\\n0x42000000u, 0x0001C000u, 0x00000001u, 0x000D0000u, 0x00010408u, 0x00380000u, 0x000E3800u, 0x00E00E07u, 0x0068B000u, \\\n0x01802422u, 0x01C1C000u, 0x00008104u, 0x03060000u, 0x00020200u, 0x00040780u, 0x40000000u, 0x02000003u, 0x1C00000Eu, \\\n0x00300000u, 0x88000018u, 0x00A0001Cu, 0x0180304Au, 0x00014101u, 0x00000036u, 0x00060404u, 0x20018000u, 0x00000AA0u, \\\n0xC0050000u, 0x0000E001u, 0x00048005u, 0x00001004u, 0x00000004u, 0x00020E0Eu, 0x0000E060u, 0x00000030u, 0x10000000u, \\\n0x00083038u, 0x0406C0C0u, 0xC0000000u, 0x002000E0u, 0x301B0000u, 0x00800302u, 0x80280000u, 0x04000000u, 0x00400000u, \\\n0x00000800u, 0x00014000u, 0xA0000000u, 0x70E00000u, 0x44800000u, 0x00000003u, 0x02000000u, 0x0000000Eu, 0x00000018u, \\\n0x00004000u, 0x00008000u, 0x00220000u, 0x1C000000u, 0x0078003Cu, 0x90000000u, 0x00000110u, 0x00000200u, 0x03000000u, \\\n0x0C020000u, 0x00000A00u, 0x30040000u, 0x00001804u, 0x58100000u, 0x00000038u, 0xF0C00000u, 0x00000181u, 0x84000000u, \\\n0x00400063u, 0x05000000u, 0x00900000u, 0x0C000000u, 0x00000183u, 0x00001B11u, 0x80000020u, 0xF8007804u, 0x00000281u, \\\n0x2000C020u, 0x00000608u, 0x40000003u, 0x1E000000u, 0x80000076u, 0x88000000u, 0x000F01F0u, 0x0000000Bu, 0x007E0380u, \\\n0x0000001Cu, 0x00001FC9u, 0x01EC0000u, 0x00000060u, 0x00009D80u, 0x00600000u, 0x0001FC90u, 0x00002020u, 0x00000880u, \\\n0x00001E00u, 0xD8000000u, 0xC00000C0u, 0x0000000Fu, 0x00000780u, 0x0000001Eu, 0x0000183Cu, 0x03600000u, 0x0F000000u, \\\n0x2000C000u, 0x4006C000u, 0x30000004u, 0x00090000u, 0x60000011u, 0x00240000u, 0x00000044u, 0x000000A3u, 0x00000104u, \\\n0x00002200u, 0x10018000u, 0x28008001u, 0xC00F0000u, 0xC0010003u, 0x00360000u, 0x00440000u, 0x00300018u, 0x00F00000u, \\\n0x000001B0u, 0x00000C00u, 0x0000000Au, 0x00000088u, 0x00006020u, 0x00C40000u, 0x0003C900u, 0x0E180000u, 0x00118000u, \\\n0x48300000u, 0x00050000u, 0x003C9000u, 0x01800000u, 0x000C0001u, 0x00602018u, 0x00200006u, 0x000883B0u, 0x001E0F80u, \\\n0x000C0000u, 0x00780040u, 0x01B00081u, 0xC180221Bu, 0x80007878u\n\n#define COMPRESSED_BITMAP_INDEX \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x02010000u, 0x03000000u, 0x00000004u, 0x00000005u, 0x00000600u, 0x00070000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00080000u, 0x09000000u, 0x0000000Au, 0x00000B00u, 0x000C0000u, \\\n0x0D000000u, 0x00000000u, 0x0000000Eu, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x0000000Fu, 0x00001000u, \\\n0x00110000u, 0x12000000u, 0x00000013u, 0x00001514u, 0x00160000u, 0x17000000u, 0x00000000u, 0x00000018u, 0x00001A19u, \\\n0x001B0900u, 0x1C000000u, 0x00000000u, 0x0000001Du, 0x00001E00u, 0x001F0000u, 0x20000000u, 0x21000000u, 0x00000022u, \\\n0x00252423u, 0x0F272600u, 0x28080000u, 0x29260013u, 0x2C002B2Au, 0x002F2E2Du, 0x000F3130u, 0x00320900u, 0x33000000u, \\\n0x00000025u, 0x00003534u, 0x00373600u, 0x2D380000u, 0x39000000u, 0x0000003Au, 0x0000003Bu, 0x3E3D3C00u, 0x083F0000u, \\\n0x00000040u, 0x00004241u, 0x00444300u, 0x46450000u, 0x47000000u, 0x00000048u, 0x00004A49u, 0x004C4B26u, 0x4D002C00u, \\\n0x4F4E0000u, 0x00000000u, 0x00510050u, 0x532C5200u, 0x4E000000u, 0x00000054u, 0x00005500u, 0x0057563Eu, 0x59025800u, \\\n0x5B5A0000u, 0x09000000u, 0x005E5D5Cu, 0x61605F00u, 0x64636200u, 0x66650004u, 0x09000067u, 0x00006968u, 0x006B6A00u, \\\n0x00000000u, 0x6C000000u, 0x00000000u, 0x0000003Au, 0x00006D00u, 0x00000000u, 0x00000000u, 0x00000000u, 0x0000006Au, \\\n0x00001900u, 0x006E0000u, 0x00000000u, 0x00000000u, 0x00002600u, 0x006F0000u, 0x70000000u, 0x00000071u, 0x00007372u, \\\n0x00742600u, 0x004E0000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00007500u, 0x00760000u, 0x77000000u, \\\n0x00000078u, 0x00007A79u, 0x004E7B00u, 0x00250000u, 0x7C000041u, 0x00005E00u, 0x00020000u, 0x00047D00u, 0x7F7E0000u, \\\n0x80000000u, 0x00000081u, 0x00008382u, 0x00858400u, 0x87860000u, 0x65000044u, 0x00008988u, 0x00728A00u, 0x26000000u, \\\n0x8B650000u, 0x00000008u, 0x00008D8Cu, 0x418F8E00u, 0x91900000u, 0x09000000u, 0x00000000u, 0x00005E00u, 0x92000000u, \\\n0x00930000u, 0x95007194u, 0x00979600u, 0x99980208u, 0x9B9A0000u, 0x9D00009Cu, 0x0000009Eu, 0x0000009Fu, 0x0000A000u, \\\n0x00A10000u, 0xA2000000u, 0x00000000u, 0x00000000u, 0x00008A00u, 0x71A30000u, 0xA4080000u, 0x4E0000A5u, 0x0000A7A6u, \\\n0x00518C00u, 0xA9A80000u, 0x00000000u, 0x000000AAu, 0x00003D00u, 0x00006200u, 0x41AB0000u, 0xAC000000u, 0x000000ADu, \\\n0x0071AFAEu, 0xA5B1B000u, 0xB29E0000u, 0x00000074u, 0x00A600B3u, 0xB4000000u, 0x00007200u, 0x006A006Cu, 0xB5007500u, \\\n0x000000B6u, 0x0000B8B7u, 0x41BAB900u, 0xBCBB0000u, 0xBD000000u, 0x00000000u, 0x000000A6u, 0xA7BFBE00u, 0x74000000u, \\\n0x000000C0u, 0x0000C125u, 0x00C300C2u, 0xC500C400u, 0xC7C60000u, 0xC90000C8u, 0x0000CBCAu, 0x00CDCC00u, 0xCE000000u, \\\n0xCF000000u, 0x0000002Du, 0x000000D0u, 0x0000D109u, 0x00D20000u, 0xD3000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u\n\n#define BITMAP \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00400100u, 0x00000020u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x03800E00u, 0x00000080u, 0x00000000u, 0x00000000u, 0x00000000u, 0x1A086800u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x7071C000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0xC1630000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x20000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x80000000u, 0x00000383u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000904u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00002090u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00008380u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00010000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000100u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000E00u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00002C00u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00007000u, 0x00000400u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00018000u, 0x00003800u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x0000B082u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x0001C71Cu, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00063458u, 0x00000000u, 0x00000000u, 0x00000000u, 0x30000000u, 0x0000E0E0u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x80000000u, 0x02018301u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x0C000001u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x08010000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x200E0000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00441800u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x0110C000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00E00000u, 0x00008038u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x02400000u, 0x00000090u, 0x00000040u, 0x00000000u, 0x00000000u, 0x08000000u, 0x00000207u, 0x00000100u, 0x00000000u, \\\n0x00000000u, 0x20000000u, 0x80000824u, 0x00000400u, 0x00000000u, 0x08000000u, 0x40000200u, 0x00001088u, 0x00000002u, \\\n0x00000000u, 0x70000000u, 0x00001C00u, 0x000001E0u, 0x00000008u, 0x00000000u, 0x60000000u, 0x00005841u, 0x00000100u, \\\n0x00000000u, 0x00000000u, 0x80000000u, 0x0000E383u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x0003190Cu, \\\n0x00000040u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00006C00u, 0x00000380u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00013800u, 0x00000B00u, 0x00000000u, 0x00000000u, 0x00000000u, 0x0002C000u, 0x00001C00u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00020000u, 0x00006000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x1C880000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x91400000u, 0x18000000u, 0x00002000u, 0x00000000u, 0x00000000u, 0x42000000u, 0x20000000u, \\\n0x0001C000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000001u, 0x000D0000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00010408u, 0x00380000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x000E3800u, 0x00E00E07u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x0068B000u, 0x01802422u, 0x00000000u, 0x00000000u, 0x00000000u, 0x01C1C000u, 0x00008104u, 0x00000000u, \\\n0x00000000u, 0x08000000u, 0x03060000u, 0x00020200u, 0x00000000u, 0x00000000u, 0x70000000u, 0x00000000u, 0x00040780u, \\\n0x00000000u, 0x00000000u, 0x40000000u, 0x02000003u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x1C00000Eu, \\\n0x00000000u, 0x00300000u, 0x00000000u, 0x00000000u, 0x88000018u, 0x70000000u, 0x00A0001Cu, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x40000000u, 0x0180304Au, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00014101u, 0x00000000u, \\\n0x00000000u, 0x00002000u, 0x00000036u, 0x00060404u, 0x00000000u, 0x00000000u, 0x20018000u, 0x00000020u, 0x00000AA0u, \\\n0x00000000u, 0x00000000u, 0xC0050000u, 0x0000E001u, 0x00000000u, 0x00000000u, 0x00000000u, 0x80000000u, 0x00048005u, \\\n0x00001004u, 0x00000004u, 0x00000000u, 0x00000000u, 0x00020E0Eu, 0x0000E060u, 0x00000030u, 0x00000000u, 0x10000000u, \\\n0x00083038u, 0x0406C0C0u, 0x00000080u, 0x00000000u, 0xC0000000u, 0x002000E0u, 0x301B0000u, 0x00000000u, 0x00000000u, \\\n0x80000000u, 0x00800302u, 0x80280000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x04000000u, 0x00400000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000800u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00006000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00014000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x04000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x30000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0xA0000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x08000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x70E00000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x44800000u, 0x00000003u, 0x00000000u, 0x00000000u, 0x00000000u, 0x02000000u, 0x0000000Eu, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x08000000u, 0x00000018u, 0x00000000u, 0x00000000u, 0x00000000u, 0x40000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00004000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00008000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00220000u, \\\n0x1C000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x0078003Cu, 0x90000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000110u, 0x40000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000040u, 0x00000000u, 0x00000001u, 0x00000000u, \\\n0x00000000u, 0x00000200u, 0x00000000u, 0x00000004u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000020u, \\\n0x00000000u, 0x00000000u, 0x03000000u, 0x00000080u, 0x00000000u, 0x00000000u, 0x00000000u, 0x0C020000u, 0x00000A00u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x30040000u, 0x00001804u, 0x00000000u, 0x00000000u, 0x00000000u, 0x58100000u, \\\n0x00000038u, 0x00000000u, 0x00000000u, 0x00000000u, 0xF0C00000u, 0x00000181u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x84000000u, 0x00400063u, 0x00380000u, 0x00000000u, 0x00000000u, 0xC0000000u, 0x05000000u, 0x00900000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x0C000000u, 0x02000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x08000000u, \\\n0x00000000u, 0x00000000u, 0xC0000000u, 0x00000183u, 0x20000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00001B11u, \\\n0x80000020u, 0x00000000u, 0x00000000u, 0x00000000u, 0xF8007804u, 0x00000281u, 0x00000001u, 0x00000000u, 0x00000000u, \\\n0x2000C020u, 0x00000608u, 0x00000000u, 0x00000000u, 0x00000000u, 0x80000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000004u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x40000003u, \\\n0x00000000u, 0x00000000u, 0x1E000000u, 0x00000000u, 0x80000076u, 0x00000003u, 0x00000000u, 0x88000000u, 0x00000000u, \\\n0x000F01F0u, 0x0000000Bu, 0x00000000u, 0x20000000u, 0x00000020u, 0x007E0380u, 0x0000001Cu, 0x00000000u, 0x00000000u, \\\n0x00001FC9u, 0x01EC0000u, 0x00000060u, 0x00000000u, 0x00000000u, 0x00009D80u, 0x00600000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x0001FC90u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00002020u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000880u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00001E00u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x0C000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0xD8000000u, 0x00000003u, 0x00000000u, 0x00000000u, 0x20000000u, \\\n0xC00000C0u, 0x0000000Fu, 0x00000000u, 0x00000000u, 0x40000000u, 0x00000780u, 0x0000001Eu, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00001B11u, 0x00300000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x0000183Cu, 0x03600000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x0F000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x18000000u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x10000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x2000C000u, \\\n0x00000001u, 0x00000000u, 0x00000000u, 0x00000000u, 0x4006C000u, 0x30000004u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00090000u, 0x60000011u, 0x00000003u, 0x00000000u, 0x00000000u, 0x00240000u, 0x00000044u, 0x0000000Fu, 0x00000000u, \\\n0x00000000u, 0x00600000u, 0x000000A3u, 0x00000018u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000104u, 0x00000000u, \\\n0x00000780u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00002200u, 0x00000000u, 0x02000000u, 0x00000000u, \\\n0x00000000u, 0x00000800u, 0x00000000u, 0x04000000u, 0x00000000u, 0x00000000u, 0x00004000u, 0x00000000u, 0x10018000u, \\\n0x28008001u, 0x00000000u, 0x00000000u, 0x00000000u, 0xC00F0000u, 0xC0010003u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00360000u, 0x00440000u, 0x00000001u, 0x00000000u, 0x00000000u, 0x00300018u, 0x00F00000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x000001B0u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000780u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00000C00u, 0x0000000Au, 0x0000001Eu, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000018u, \\\n0x00000088u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000040u, 0x00006020u, 0x00000000u, 0x00000000u, 0x00C40000u, \\\n0x00000000u, 0x0003C900u, 0x00000000u, 0x00000000u, 0x0E180000u, 0x00000000u, 0x00118000u, 0x00000000u, 0x00000000u, \\\n0x48300000u, 0x00050000u, 0x003C9000u, 0x00000000u, 0x00000000u, 0x01800000u, 0x000C0001u, 0x00602018u, 0x00000000u, \\\n0x00000000u, 0x00000000u, 0x00200006u, 0x000883B0u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x001E0F80u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x000C0000u, 0x00001C00u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00780040u, \\\n0x00000000u, 0x00000000u, 0x00000000u, 0x80000000u, 0x01B00081u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0xC180221Bu, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x80007878u, 0x00000000u, 0x00000000u, 0x00000000u, \\\n0x00000000u, 0x00000000u\n\n\n\n#define ACTIVE_CELLS0 \\\nivec2(132,  2), ivec2(146,  2), ivec2(161,  2), ivec2(131,  3), ivec2(132,  3), ivec2(133,  3), ivec2(145,  3), \\\nivec2(146,  3), ivec2(147,  3), ivec2(161,  3), ivec2(131,  4), ivec2(133,  4), ivec2(134,  4), ivec2(139,  4), \\\nivec2(145,  4), ivec2(147,  4), ivec2(148,  4), ivec2(132,  5), ivec2(133,  5), ivec2(134,  5), ivec2(138,  5), \\\nivec2(139,  5), ivec2(140,  5), ivec2(146,  5), ivec2(147,  5), ivec2(148,  5), ivec2(132,  6), ivec2(133,  6), \\\nivec2(137,  6), ivec2(138,  6), ivec2(140,  6), ivec2(146,  6), ivec2(147,  6), ivec2(137, 10), ivec2(137, 11), \\\nivec2(138, 11), ivec2(139, 11), ivec2(145, 11), ivec2(146, 11), ivec2(147, 11), ivec2(138, 12), ivec2(144, 12), \\\nivec2(147, 12), ivec2(138, 13), ivec2(141, 13), ivec2(147, 13), ivec2(139, 14), ivec2(140, 14), ivec2(141, 14), \\\nivec2(147, 14), ivec2(146, 15), ivec2(130, 19), ivec2(129, 20), ivec2(130, 20), ivec2(131, 20), ivec2(128, 21), \\\nivec2(129, 21), ivec2(131, 21), ivec2(128, 22), ivec2(129, 22), ivec2(130, 22), ivec2(158, 22), ivec2(129, 23), \\\nivec2(130, 23), ivec2(157, 23), ivec2(158, 23), ivec2(159, 23), ivec2(145, 24), ivec2(151, 24), ivec2(156, 24), \\\nivec2(157, 24), ivec2(159, 24), ivec2(144, 25), ivec2(145, 25), ivec2(146, 25), ivec2(150, 25), ivec2(151, 25), \\\nivec2(152, 25), ivec2(156, 25), ivec2(157, 25), ivec2(158, 25), ivec2(143, 26), ivec2(144, 26), ivec2(146, 26), \\\nivec2(150, 26), ivec2(152, 26), ivec2(153, 26), ivec2(157, 26), ivec2(158, 26), ivec2(134, 27), ivec2(135, 27), \\\nivec2(143, 27), ivec2(144, 27), ivec2(145, 27), ivec2(151, 27), ivec2(152, 27), ivec2(153, 27), ivec2(135, 28), \\\nivec2(136, 28), ivec2(144, 28), ivec2(145, 28), ivec2(151, 28), ivec2(152, 28), ivec2(161, 28), ivec2(134, 29), \\\nivec2(160, 29), ivec2(161, 29), ivec2(148, 30), ivec2(159, 30), ivec2(147, 31), ivec2(148, 31), ivec2(149, 31), \\\nivec2(159, 31), ivec2(139, 32), ivec2(140, 32), ivec2(146, 32), ivec2(150, 32), ivec2(140, 33), ivec2(141, 33), \\\nivec2(146, 33), ivec2(150, 33), ivec2(113, 34), ivec2(114, 34), ivec2(115, 34), ivec2(127, 34), ivec2(128, 34), \\\nivec2(129, 34), ivec2(139, 34), ivec2(112, 35), ivec2(115, 35), ivec2(126, 35), ivec2(129, 35), ivec2(160, 35), \\\nivec2(115, 36), ivec2(120, 36), ivec2(121, 36), ivec2(122, 36), ivec2(129, 36), ivec2(160, 36), ivec2(115, 37), \\\nivec2(120, 37), ivec2(123, 37), ivec2(129, 37), ivec2(149, 37), ivec2(160, 37), ivec2( 79, 38), ivec2( 93, 38), \\\nivec2(114, 38), ivec2(119, 38), ivec2(123, 38), ivec2(128, 38), ivec2(149, 38), ivec2( 78, 39), ivec2( 79, 39), \\\nivec2( 80, 39), ivec2( 92, 39), ivec2( 93, 39), ivec2( 94, 39), ivec2(119, 39), ivec2(120, 39), ivec2(121, 39), \\\nivec2(122, 39), ivec2(149, 39), ivec2( 77, 40), ivec2( 78, 40), ivec2( 80, 40), ivec2( 86, 40), ivec2( 91, 40), \\\nivec2( 92, 40), ivec2( 94, 40), ivec2(120, 40), ivec2( 77, 41), ivec2( 78, 41), ivec2( 79, 41), ivec2( 85, 41), \\\nivec2( 86, 41), ivec2( 87, 41), ivec2( 91, 41), ivec2( 92, 41), ivec2( 93, 41), ivec2( 78, 42), ivec2( 79, 42), \\\nivec2( 84, 42), ivec2( 87, 42), ivec2( 88, 42), ivec2( 92, 42), ivec2( 93, 42), ivec2(114, 42), ivec2( 84, 43), \\\nivec2( 85, 43), ivec2( 87, 43), ivec2( 88, 43), ivec2(113, 43), ivec2(114, 43), ivec2(115, 43), ivec2( 83, 44), \\\nivec2( 84, 44), ivec2( 85, 44), ivec2( 88, 44), ivec2(112, 44), ivec2(113, 44), ivec2(115, 44), ivec2( 84, 45), \\\nivec2( 85, 45), ivec2( 87, 45), ivec2(112, 45), ivec2(113, 45), ivec2(114, 45), ivec2( 85, 46), ivec2(113, 46), \\\nivec2(114, 46), ivec2( 85, 47), ivec2( 89, 47), ivec2( 92, 47), ivec2( 93, 47), ivec2( 94, 47), ivec2( 86, 48), \\\nivec2( 88, 48), ivec2( 92, 48), ivec2( 95, 48), ivec2(123, 48), ivec2(124, 48), ivec2(141, 48), ivec2( 87, 49), \\\nivec2( 92, 49), ivec2(123, 49), ivec2(140, 49), ivec2(141, 49), ivec2(142, 49), ivec2( 92, 50), ivec2(140, 50), \\\nivec2(142, 50), ivec2(143, 50), ivec2( 93, 51), ivec2(100, 51), ivec2(106, 51), ivec2(141, 51), ivec2(142, 51), \\\nivec2(143, 51), ivec2( 99, 52), ivec2(100, 52), ivec2(101, 52), ivec2(105, 52), ivec2(106, 52), ivec2(107, 52), \\\nivec2(120, 52), ivec2(121, 52), ivec2(122, 52), ivec2(129, 52), ivec2(130, 52), ivec2(131, 52), ivec2(141, 52), \\\nivec2(142, 52), ivec2(143, 52), ivec2( 98, 53), ivec2( 99, 53), ivec2(101, 53), ivec2(105, 53), ivec2(107, 53), \\\nivec2(108, 53), ivec2(119, 53), ivec2(123, 53), ivec2(128, 53), ivec2(131, 53), ivec2(141, 53), ivec2(142, 53), \\\nivec2( 98, 54), ivec2( 99, 54), ivec2(100, 54), ivec2(106, 54), ivec2(107, 54), ivec2(108, 54), ivec2(118, 54), \\\nivec2(124, 54), ivec2(131, 54), ivec2( 77, 55), ivec2( 99, 55), ivec2(100, 55), ivec2(106, 55), ivec2(107, 55), \\\nivec2(123, 55), ivec2(131, 55), ivec2( 76, 56), ivec2( 77, 56), ivec2( 78, 56), ivec2(119, 56), ivec2(120, 56), \\\nivec2(121, 56), ivec2(122, 56), ivec2(130, 56), ivec2( 76, 57), ivec2( 78, 57), ivec2( 79, 57), ivec2(103, 57), \\\nivec2( 77, 58), ivec2( 78, 58), ivec2( 79, 58), ivec2(102, 58), ivec2(103, 58), ivec2(104, 58), ivec2(160, 58), \\\nivec2(161, 58), ivec2( 77, 59), ivec2( 78, 59), ivec2(101, 59), ivec2(105, 59), ivec2(134, 59), ivec2(135, 59), \\\nivec2(136, 59), ivec2(140, 59), ivec2(141, 59), ivec2(142, 59), ivec2(159, 59), ivec2(161, 59), ivec2(134, 60), \\\nivec2(137, 60), ivec2(139, 60), ivec2(142, 60), ivec2(148, 60), ivec2(149, 60), ivec2(159, 60), ivec2(160, 60), \\\nivec2(134, 61), ivec2(142, 61), ivec2(148, 61), ivec2(150, 61), ivec2( 81, 62), ivec2(101, 62), ivec2(102, 62), \\\nivec2(104, 62), ivec2(105, 62), ivec2(134, 62), ivec2(142, 62), ivec2(149, 62), ivec2(150, 62), ivec2( 81, 63), \\\nivec2( 82, 63), ivec2( 95, 63), ivec2(103, 63), ivec2(135, 63), ivec2(137, 63), ivec2(139, 63), ivec2(141, 63), \\\nivec2( 80, 64), ivec2( 82, 64), ivec2( 94, 64), ivec2( 95, 64), ivec2( 96, 64), ivec2(109, 64), ivec2(110, 64), \\\nivec2(111, 64), ivec2( 93, 65), ivec2( 94, 65), ivec2( 96, 65), ivec2(109, 65), ivec2(112, 65), ivec2(128, 65), \\\nivec2(138, 65), ivec2(160, 65), ivec2( 93, 66), ivec2( 94, 66), ivec2( 95, 66), ivec2(101, 66), ivec2(102, 66), \\\nivec2(103, 66), ivec2(109, 66), ivec2(129, 66), ivec2(130, 66), ivec2(137, 66), ivec2(138, 66), ivec2(139, 66), \\\nivec2(160, 66), ivec2(161, 66), ivec2( 86, 67), ivec2( 93, 67), ivec2( 94, 67), ivec2( 95, 67), ivec2(102, 67), \\\nivec2(103, 67), ivec2(109, 67), ivec2(128, 67), ivec2(129, 67), ivec2(136, 67), ivec2(137, 67), ivec2(139, 67), \\\nivec2(140, 67), ivec2(148, 67), ivec2(161, 67), ivec2( 86, 68), ivec2( 87, 68), ivec2( 93, 68), ivec2( 94, 68), \\\nivec2( 95, 68), ivec2(109, 68), ivec2(136, 68), ivec2(137, 68), ivec2(139, 68), ivec2(140, 68), ivec2(148, 68), \\\nivec2(149, 68), ivec2( 85, 69), ivec2( 87, 69), ivec2( 94, 69), ivec2( 95, 69), ivec2(109, 69), ivec2(137, 69), \\\nivec2(139, 69), ivec2(149, 69), ivec2(110, 70), ivec2(138, 70), ivec2( 91, 72), ivec2( 91, 73), ivec2( 92, 73), \\\nivec2( 90, 74), ivec2( 92, 74), ivec2( 96, 77), ivec2( 96, 78), ivec2( 97, 78), ivec2( 95, 79), ivec2( 97, 79), \\\nivec2(121, 81), ivec2(113, 82), ivec2(114, 82), ivec2(115, 82), ivec2(120, 82), ivec2(121, 82), ivec2(122, 82), \\\nivec2(113, 83), ivec2(116, 83), ivec2(120, 83), ivec2(122, 83), ivec2(123, 83), ivec2(113, 84), ivec2(121, 84), \\\nivec2(122, 84), ivec2(123, 84), ivec2(113, 85), ivec2(121, 85), ivec2(122, 85), ivec2(114, 86), ivec2( 58, 90), \\\nivec2( 57, 91), ivec2( 57, 92), ivec2( 61, 92), ivec2( 98, 92), ivec2( 99, 92), ivec2(100, 92), ivec2( 40, 93), \\\nivec2( 41, 93), ivec2( 42, 93), ivec2( 43, 93), ivec2( 57, 93), ivec2( 58, 93), ivec2( 59, 93), ivec2( 60, 93), \\\nivec2( 98, 93), ivec2(101, 93), ivec2( 40, 94), ivec2( 44, 94), ivec2( 98, 94), ivec2( 40, 95), ivec2( 98, 95), \\\nivec2( 41, 96), ivec2( 98, 96), ivec2( 99, 97), ivec2( 52, 98), ivec2( 53, 98), ivec2( 67, 98), ivec2( 43, 99), \\\nivec2( 52, 99), ivec2( 53, 99), ivec2( 67, 99), ivec2( 69, 99), ivec2( 42,100), ivec2( 52,100), ivec2( 53,100), \\\nivec2( 58,100), ivec2( 67,100), ivec2( 68,100), ivec2( 42,101), ivec2( 49,101), ivec2( 50,101), ivec2( 52,101), \\\nivec2( 57,101), ivec2( 58,101), ivec2( 59,101), ivec2( 42,102), ivec2( 43,102), ivec2( 48,102), ivec2( 49,102), \\\nivec2( 50,102), ivec2( 51,102), ivec2( 52,102), ivec2( 59,102), ivec2( 60,102), ivec2( 44,103), ivec2( 49,103), \\\nivec2( 50,103), ivec2( 51,103), ivec2( 55,103), ivec2( 56,103), ivec2( 72,103), ivec2(101,103), ivec2(102,103), \\\nivec2(103,103), ivec2( 46,104), ivec2( 47,104), ivec2( 72,104), ivec2( 74,104), ivec2(100,104), ivec2(103,104), \\\nivec2( 72,105), ivec2( 73,105), ivec2(103,105), ivec2(103,106), ivec2( 40,107), ivec2( 41,107), ivec2( 42,107), \\\nivec2( 43,107), ivec2( 49,107), ivec2( 50,107), ivec2(103,107), ivec2( 40,108), ivec2( 44,108), ivec2( 48,108), \\\nivec2( 49,108), ivec2( 51,108), ivec2( 52,108), ivec2( 77,108), ivec2(103,108), ivec2( 40,109), ivec2( 49,109), \\\nivec2( 50,109), ivec2( 51,109), ivec2( 52,109), ivec2( 65,109), ivec2( 66,109), ivec2( 67,109), ivec2( 68,109), \\\nivec2( 69,109), ivec2( 70,109), ivec2( 77,109), ivec2( 79,109), ivec2(102,109), ivec2( 41,110), ivec2( 50,110), \\\nivec2( 51,110), ivec2( 65,110), ivec2( 71,110), ivec2( 77,110), ivec2( 78,110), ivec2( 65,111), ivec2( 66,112), \\\nivec2( 94,113), ivec2( 95,113), ivec2(124,113), ivec2( 53,114), ivec2( 54,114), ivec2( 55,114), ivec2( 56,114), \\\nivec2( 93,114), ivec2( 94,114), ivec2( 96,114), ivec2( 97,114), ivec2( 98,114), ivec2(123,114), ivec2(124,114), \\\nivec2(125,114), ivec2( 53,115), ivec2( 57,115), ivec2( 94,115), ivec2( 95,115), ivec2( 96,115), ivec2( 97,115), \\\nivec2( 98,115), ivec2(106,115), ivec2(107,115), ivec2(108,115), ivec2(109,115), ivec2(122,115), ivec2(123,115), \\\nivec2(125,115), ivec2( 53,116), ivec2( 61,116), ivec2( 95,116), ivec2( 96,116), ivec2( 97,116), ivec2(105,116), \\\nivec2(106,116), ivec2(107,116), ivec2(108,116), ivec2(109,116), ivec2(110,116), ivec2(122,116), ivec2(123,116), \\\nivec2(124,116), ivec2( 54,117), ivec2( 57,117), ivec2( 60,117), ivec2( 61,117), ivec2( 62,117), ivec2( 63,117), \\\nivec2( 64,117), ivec2( 65,117), ivec2( 66,117), ivec2(104,117), ivec2(105,117), ivec2(107,117), ivec2(108,117), \\\nivec2(109,117), ivec2(110,117), ivec2(123,117), ivec2(124,117), ivec2( 59,118), ivec2( 60,118), ivec2( 62,118), \\\nivec2( 63,118), ivec2( 64,118), ivec2( 67,118), ivec2(105,118), ivec2(106,118), ivec2( 54,119), ivec2( 57,119), \\\nivec2( 60,119), ivec2( 61,119), ivec2( 62,119), ivec2( 63,119), ivec2( 64,119), ivec2( 65,119), ivec2( 66,119), \\\nivec2( 53,120), ivec2( 61,120), ivec2( 53,121), ivec2( 57,121), ivec2( 53,122), ivec2( 54,122), ivec2( 55,122), \\\nivec2( 56,122), ivec2( 66,124), ivec2( 67,124), ivec2( 65,125), ivec2( 66,125), ivec2( 68,125), ivec2( 69,125), \\\nivec2( 70,125), ivec2( 71,125), ivec2( 33,126), ivec2( 42,126), ivec2( 43,126), ivec2( 66,126), ivec2( 67,126), \\\nivec2( 68,126), ivec2( 69,126), ivec2( 70,126), ivec2( 71,126), ivec2( 32,127), ivec2( 41,127), ivec2( 42,127), \\\nivec2( 43,127), ivec2( 44,127), ivec2( 67,127), ivec2( 68,127), ivec2( 69,127), ivec2( 70,127), ivec2( 32,128), \\\nivec2( 36,128), ivec2( 40,128), ivec2( 41,128), ivec2( 43,128), ivec2( 44,128), ivec2( 84,128), ivec2( 85,128), \\\nivec2( 32,129), ivec2( 33,129), ivec2( 34,129), ivec2( 35,129), ivec2( 41,129), ivec2( 42,129), ivec2( 83,129), \\\nivec2( 84,129), ivec2( 86,129), ivec2( 87,129), ivec2( 84,130), ivec2( 85,130), ivec2( 86,130), ivec2( 87,130), \\\nivec2( 85,131), ivec2( 86,131), ivec2( 52,132), ivec2( 36,133), ivec2( 37,133), ivec2( 51,133), ivec2( 54,133), \\\nivec2( 34,134), ivec2( 35,134), ivec2( 37,134), ivec2( 38,134), ivec2( 50,134), ivec2( 54,134), ivec2( 80,134), \\\nivec2( 81,134), ivec2( 34,135), ivec2( 37,135), ivec2( 50,135), ivec2( 54,135), ivec2( 79,135), ivec2( 80,135), \\\nivec2( 82,135), ivec2( 83,135), ivec2( 34,136), ivec2( 37,136), ivec2( 50,136), ivec2( 54,136), ivec2( 80,136), \\\nivec2( 81,136), ivec2( 82,136), ivec2( 83,136), ivec2( 35,137), ivec2( 36,137), ivec2( 46,137), ivec2( 47,137), \\\nivec2( 51,137), ivec2( 53,137), ivec2( 81,137), ivec2( 82,137), ivec2( 46,138), ivec2( 52,138), ivec2(115,138), \\\nivec2(116,138), ivec2(117,138), ivec2(118,138), ivec2(115,139), ivec2(119,139), ivec2( 33,140), ivec2(115,140), \\\nivec2( 32,141), ivec2(116,141), ivec2( 19,142), ivec2( 20,142), ivec2( 32,142), ivec2( 36,142), ivec2( 51,142), \\\nivec2( 63,142), ivec2( 65,142), ivec2( 18,143), ivec2( 19,143), ivec2( 20,143), ivec2( 21,143), ivec2( 32,143), \\\nivec2( 33,143), ivec2( 34,143), ivec2( 35,143), ivec2( 50,143), ivec2( 64,143), ivec2( 65,143), ivec2( 17,144), \\\nivec2( 18,144), ivec2( 20,144), ivec2( 21,144), ivec2( 50,144), ivec2( 54,144), ivec2( 64,144), ivec2(  1,145), \\\nivec2(  2,145), ivec2( 18,145), ivec2( 19,145), ivec2( 50,145), ivec2( 51,145), ivec2( 52,145), ivec2( 53,145), \\\nivec2(  0,146), ivec2(  1,146), ivec2(  3,146), ivec2(  4,146), ivec2(  1,147), ivec2(  2,147), ivec2(  3,147), \\\nivec2(  4,147), ivec2(  2,148), ivec2(  3,148), ivec2( 25,148), ivec2( 27,148), ivec2( 57,148), ivec2( 58,148), \\\nivec2( 59,148), ivec2( 60,148), ivec2( 25,149), ivec2( 26,149), ivec2( 57,149), ivec2( 61,149), ivec2( 26,150), \\\nivec2( 57,150), ivec2( 65,150), ivec2( 66,150), ivec2(  4,151), ivec2(  8,151), ivec2(  9,151), ivec2( 58,151), \\\nivec2( 61,151), ivec2( 64,151), ivec2( 65,151), ivec2( 66,151), ivec2( 67,151), ivec2(  3,152), ivec2(  4,152), \\\nivec2(  9,152), ivec2( 10,152), ivec2( 11,152), ivec2( 63,152), ivec2( 64,152), ivec2( 68,152), ivec2(  2,153), \\\nivec2(  3,153), ivec2(  9,153), ivec2( 12,153), ivec2( 30,153), ivec2( 32,153), ivec2( 58,153), ivec2( 61,153), \\\nivec2( 64,153), ivec2( 65,153), ivec2( 66,153), ivec2( 67,153), ivec2(  3,154), ivec2(  4,154), ivec2( 12,154), \\\nivec2( 30,154), ivec2( 31,154), ivec2( 47,154), ivec2( 48,154), ivec2( 57,154), ivec2( 65,154), ivec2( 66,154), \\\nivec2( 11,155), ivec2( 12,155), ivec2( 31,155), ivec2( 46,155), ivec2( 47,155), ivec2( 49,155), ivec2( 50,155), \\\nivec2( 51,155), ivec2( 57,155), ivec2( 61,155), ivec2( 47,156), ivec2( 48,156), ivec2( 49,156), ivec2( 50,156), \\\nivec2( 51,156), ivec2( 57,156), ivec2( 58,156), ivec2( 59,156), ivec2( 60,156), ivec2( 24,157), ivec2( 25,157), \\\nivec2( 48,157), ivec2( 49,157), ivec2( 50,157), ivec2( 10,158), ivec2( 23,158), ivec2( 24,158), ivec2( 25,158), \\\nivec2( 26,158), ivec2(  1,159), ivec2(  2,159), ivec2(  9,159), ivec2( 22,159), ivec2( 23,159), ivec2( 25,159), \\\nivec2( 26,159), ivec2(  0,160), ivec2(  1,160), ivec2(  3,160), ivec2(  4,160), ivec2(  9,160), ivec2( 13,160), \\\nivec2( 23,160), ivec2( 24,160), ivec2( 30,160), ivec2( 31,160), ivec2(  1,161), ivec2(  2,161), ivec2(  3,161), \\\nivec2(  4,161), ivec2(  9,161), ivec2( 10,161), ivec2( 11,161), ivec2( 12,161), ivec2( 29,161)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//Simple init with several Gosper glider guns\nfloat initFromArray(in ivec2 uv)\n{\n    const ivec2[] initState = ivec2[] (\n        ivec2(50,180), ivec2(51,180), ivec2(50,181), ivec2(51,181), ivec2(60,180), \n        ivec2(60,179), ivec2(60,181), ivec2(61,178), ivec2(62,177), ivec2(63,177), \n        ivec2(61,182), ivec2(62,183), ivec2(63,183), ivec2(65,182), ivec2(66,181), \n        ivec2(66,180), ivec2(66,179), ivec2(65,178), ivec2(64,180), ivec2(67,180), \n        ivec2(70,181), ivec2(70,182), ivec2(70,183), ivec2(71,181), ivec2(71,182), \n        ivec2(71,183), ivec2(72,180), ivec2(72,184), ivec2(74,180), ivec2(74,179), \n        ivec2(74,184), ivec2(74,185), ivec2(84,182), ivec2(84,183), ivec2(85,182), \n        ivec2(85,183)\n    );\n\n    const int repeat = 200;\n    ivec2 uv2 = (uv + ivec2(40, 100));\n\n    //Let's introduce some variability\n    ivec2 shift = uv2 / repeat;\n    shift = ivec2(shift.x * shift.y, shift.x * shift.y);\n    uv2 = uv2 % repeat + shift;\n\n    for(int i=0; i != initState.length(); ++i)\n        if( uv2 == initState[i] )\n            return 1.0;\n\n    return 0.0;\n}\n\n//Init form the list of active cells\nconst ivec2[] initState = ivec2[](ACTIVE_CELLS0);\n\nfloat initFromArray2(in ivec2 uv)\n{   \n    for(int i=0; i != initState.length(); ++i)\n        if( uv == initState[i] )\n            return 1.0;\n\n    return 0.0;\n}\n\n//Init form the BITMAP without compression\nconst ivec2 bitmapSize = ivec2(162, 162);\nconst uint[] bitmap = uint[] (BITMAP);\n\nfloat initFromBitmap(in ivec2 uv)\n{\n    if( uint(uv.x) >= uint(bitmapSize.x) || uint(uv.y) >= uint(bitmapSize.y) )\n        return 0.0;\n        \n    int pos = uv.y * bitmapSize.x + uv.x;    \n    float val = float( (bitmap[pos / 32] >> (pos % 32)) & 0x1u );\n    \n    return val;\n}\n\n//Init form the BITMAP with compression\nconst uint[] compBitmapNodes = uint[] (COMPRESSED_BITMAP_NODES);\nconst uint[] compBitmapIndex = uint[] (COMPRESSED_BITMAP_INDEX);\n\nfloat initFromCompressedBitmap(in ivec2 uv)\n{\n    //Each `compBitmapIndex` contains 4 indexes in the list of unique \n    //combinations of 32 active cells `compBitmapNodes`\n    if( uint(uv.x) >= uint(bitmapSize.x) || uint(uv.y) >= uint(bitmapSize.y) )\n        return 0.0;\n        \n    int pos = uv.y * bitmapSize.x + uv.x;\n    int wordIdx = pos / 32;\n    uint idxNode = (compBitmapIndex[wordIdx / 4] >> (wordIdx % 4) * 8) & 0xFFu;\n    float val = float( (compBitmapNodes[idxNode] >> (pos % 32)) & 0x1u );\n    \n    return val;\n}\n\n// Rotate 90 deg in 2d\nivec2 rot90(in ivec2 v, in int size)\n{\n    return ivec2(v.y, size - v.x);\n}\n\n#if 0\n    #define IMPL_SYMMETRICAL(uv) initFromArray2(uv)\n#elif 0\n    #define IMPL_SYMMETRICAL(uv) initFromBitmap(uv)\n#else\n    #define IMPL_SYMMETRICAL(uv) initFromCompressedBitmap(uv)\n#endif    \n\n//Init by applying `IMPL_SYMMETRICAL` 4 times with 90 degrees rotation\nfloat initFromSymmetrical(in ivec2 uv)\n{\n    const int w = bitmapSize.x;\n\n    ivec2 centerShift = ivec2(iChannelResolution[0]) / 2 - bitmapSize;\n    \n    if( uv.x < centerShift.x || uv.y < centerShift.y )\n        return 0.0;\n        \n    uv -= centerShift;\n\n    if( uv.x < w && uv.y < w )  \n        return IMPL_SYMMETRICAL(uv);\n    else if( uv.y < w )\n        return IMPL_SYMMETRICAL(rot90(ivec2(uv.x - (w-1), uv.y), w));\n    else if( uv.x < w )\n        return IMPL_SYMMETRICAL(rot90(rot90( rot90(ivec2(uv.x, uv.y - (w-1)), w), w), w));\n    else\n        return IMPL_SYMMETRICAL(rot90( rot90(ivec2(uv.x - (w-1), uv.y - (w-1)), w), w));\n}\n\n//Read the state of field of the previous generation\nvec4 readState( in ivec2 uv )\n{\n    #if 0\n        uv = wrap(uv, iChannelResolution[0].xy);\n    #endif\n\n    return texelFetch( iChannel0, uv, 0);\n}\n\nfloat keyHit( in int key )\n{\n    return texelFetch( iChannel1, ivec2(key, 1), 0 ).x;\n}\n\nfloat keyDown( in int key )\n{\n    return texelFetch( iChannel1, ivec2(key, 0), 0 ).x;\n}\n\n//Returns 1.0 if the distance between `a` and `b` less than 0.5\nfloat roundEqual( float a, float b )\n{\n    return step( abs(a - b), 0.5 );\n}\n\nfloat calcCellState(in ivec2 uv, out vec4 buff )\n{\n    //Rules: https://conwaylife.com/wiki/Conway%27s_Game_of_Life \n    \n    buff = readState( uv );\n    \n    //Makes sure we won't lose precision\n    float curState = floor(buff.x + 0.5);\n    float totalAliveAround = 0.0;\n    \n    totalAliveAround += readState( uv + ivec2(-1, -1) ).x;\n    totalAliveAround += readState( uv + ivec2( 0, -1) ).x;\n    totalAliveAround += readState( uv + ivec2( 1, -1) ).x;\n    totalAliveAround += readState( uv + ivec2(-1,  0) ).x;\n    totalAliveAround += readState( uv + ivec2( 1,  0) ).x;\n    totalAliveAround += readState( uv + ivec2(-1,  1) ).x;\n    totalAliveAround += readState( uv + ivec2( 0,  1) ).x;\n    totalAliveAround += readState( uv + ivec2( 1,  1) ).x;\n     \n    //The rules of Conway's Game of Life distilled to the branchless form\n    return roundEqual(totalAliveAround, 2.0) * curState + roundEqual(totalAliveAround, 3.0);  \n}\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_SPACE = 32;\nconst int KEY_W = 87;\nconst int KEY_A = 65;\nconst int KEY_S = 83;\nconst int KEY_D = 68;\n\nfloat isBtnClicked( in vec2 center, in float radius )\n{\n    vec2 pos = abs(iMouse.zw);\n    pos = vec2(iMouse.x, iResolution.y - iMouse.y);\n    \n    pos = pos / iResolution.x;\n    \n    center = wrap( center, vec2(1.0, iResolution.y / iResolution.x ) );\n    \n    vec2 delta = pos - center;\n    float distSquared = dot(delta, delta);\n   \n    //Mobiles support button clicks only\n    return step(distSquared, radius * radius) * float(iMouse.w > 0.0 || iMouse.z > 0.0);\n}\n\nvoid calcCamera( inout vec2 pan, inout float zoom)\n{\n    //All values are in the world space\n    const float zoomDelta = 0.05;\n    float panDelta = 0.025 * iResolution.x;\n    vec2 screenPos = vec2(0.5) * iResolution.xy;\n    \n    float prevZoom = zoom;\n    \n    zoom *= 1.0 - zoomDelta * (keyDown(KEY_UP) - keyDown(KEY_DOWN));\n    zoom *= 1.0 - zoomDelta * (isBtnClicked(btnZoomInPos, btnRadius) - isBtnClicked(btnZoomOutPos, btnRadius));\n    \n    //We always zoom around the center of the screen\n    //XCas: solve( [x / prevZoom + prevPan = screenPos, x / zoom + pan = screenPos], [pan, x] );\n    pan = screenPos + (pan - screenPos) * prevZoom / zoom;\n\n    pan.x += (keyDown(KEY_A) - keyDown(KEY_D)) * panDelta;\n    pan.y += (keyDown(KEY_W) - keyDown(KEY_S)) * panDelta;\n    \n    pan += (iMouse.xy - abs(iMouse.zw)) * float(iMouse.z > 0.0) * vec2(1, -1) * panDelta / iResolution.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n        \n    if(iFrame == 0 || keyHit(KEY_SPACE) > 0.0 || isBtnClicked(btnResetPos, btnRadius) > 0.0 )\n    {\n        float val = 0.0;\n        //val = initFromArray(uv);\n        //val = initFromArray2(uv);\n        //val = initFromBitmap(uv);\n        //val = initFromCompressedBitmap(uv);\n        val = initFromSymmetrical(uv);\n        fragColor = vec4( val, 0.0, 0.0, 1.0 );\n   \n        return;\n    }\n    \n    vec4 buff;\n    \n    float newState = calcCellState(uv, buff);\n    \n    vec2 camPan = buff.yz;\n    float camZoom = buff.w;\n\n    calcCamera( camPan, camZoom );\n    \n    fragColor = vec4(newState, camPan, camZoom );  \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}