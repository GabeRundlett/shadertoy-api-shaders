{
    "Shader": {
        "info": {
            "date": "1672514754",
            "description": "CC0: Swetugg for Windows Terminal\nPorting the Swetugg logo to windows terminal\nLots of random hacking to make the colors pop a bit.\n\nhttps://mrange.github.io/windows-terminal-shader-gallery/",
            "flags": 0,
            "hasliked": 0,
            "id": "Dlf3Df",
            "likes": 13,
            "name": "Swetugg for Windows Terminal",
            "published": 3,
            "tags": [
                "2d",
                "swetugg"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 352
        },
        "renderpass": [
            {
                "code": "// CC0: Swetugg for Windows Terminal\n//  Porting the Swetugg logo to windows terminal\n//  Lots of random hacking to make the colors pop a bit.\n\n// https://mrange.github.io/windows-terminal-shader-gallery/\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat triangle(vec2 p, vec2 p0, vec2 p1, vec2 p2) {\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat polygon5(vec2 p, vec2[5] v) {\n  float d = dot(p-v[0],p-v[0]);\n  float s = 1.0;\n  for( int i=0, j=5-1; i<5; j=i, i++ ) {\n    vec2 e = v[j] - v[i];\n    vec2 w =    p - v[i];\n    vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n    d = min( d, dot(b,b) );\n    bvec3 c = bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);\n    if( all(c) || all(not(c)) ) s*=-1.0;  \n  }\n  return s*sqrt(d);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat polygon8(vec2 p, vec2[8] v) {\n  float d = dot(p-v[0],p-v[0]);\n  float s = 1.0;\n  for( int i=0, j=8-1; i<8; j=i, i++ ) {\n    vec2 e = v[j] - v[i];\n    vec2 w =    p - v[i];\n    vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n    d = min( d, dot(b,b) );\n    bvec3 c = bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);\n    if( all(c) || all(not(c)) ) s*=-1.0;  \n  }\n  return s*sqrt(d);\n}\n\nvec3 swetugg(vec2 p) {\n  const vec2[8] p2 = vec2[8](\n    vec2(0.98, 0.965)-0.98*vec2(1.0, 0.67)\n  , vec2(0.98, 0.965)\n  , vec2(1.245, 0.935)\n  , vec2(1.13, 0.165)\n  , vec2(1.18, -0.09)\n  , vec2(0.91, -0.625)\n  , vec2(0.405, -0.97)\n  , vec2(0.00, 0.08)\n  ); \n\n  const vec2[5] p3 = vec2[5](\n    vec2(-0.1, -0.8)\n  , vec2(0.082, -0.42)\n  , vec2(0.045, 0.18)\n  , vec2(0.1, 0.38)\n  , vec2(-0.1, 0.4)\n  );\n  \n  p.x = abs(p.x);\n  float d3 = polygon5(p, p3);\n\n  p.x *= mix(0.95, 1.05, (0.5+0.5*sin(TAU*TIME*5.0))*smoothstep(0.9, 1.0, sin(TAU*TIME/10.0)));\n  float d0 = triangle(p, vec2(0.055, -0.07), vec2(0.405, -0.97), vec2(0.91, -0.625));\n  float d1 = triangle(p, vec2(1.13, 0.165)-1.18*vec2(1.0, 0.0375), vec2(1.245, 0.935), vec2(1.13, 0.165));\n  float d2 = polygon8(p, p2);\n\n  float dx = d0;\n  dx = min(dx, d1);\n  float dy = d2;\n  float dz = d3;\n  \n  return vec3(dx, dy, dz);\n}\n\nvec3 df(vec2 p) {\n  const float z = 0.5;\n  const mat2 rot = ROT(radians(7.0));\n  p /= z;\n  p.xy *= rot;\n  return swetugg(p)*z;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float aa = 2.0/RESOLUTION.y;\n  vec3 dd = df(p);\n  float dt = min(min(dd.x, dd.y), dd.z);\n\n  const vec3 col0 = vec3(104.0, 0.0, 19.0)/255.0;\n  const vec3 col1 = vec3(166.0, 0.0, 31.0)/255.0;\n  const vec3 col2 = vec3(16.0, 16.0, 17.0)/255.0;\n\n  vec3 col  = 0.1*sqrt(col0);\n  col += col1*exp(-20.0*dd.z*dd.z);\n  col = mix(col, col1*2.0, smoothstep(aa, -aa, abs(dt)-0.005));\n  col = mix(col, col1*mix(0.5, 1.0, 40.0*dd.y*dd.y), smoothstep(aa, -aa, dd.y));\n  col = mix(col, col0*mix(0.5, 1.0, 30.0*-dd.x), smoothstep(aa, -aa, dd.x));\n  col = mix(col, col2*20.0*-dd.z, smoothstep(aa, -aa, dd.z));\n  \n  col *= 1.5*smoothstep(1.25, 0.0, length(pp));\n  col = sqrt(col);\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  vec3 col = effect(p, pp);\n \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}