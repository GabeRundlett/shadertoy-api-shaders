{
    "Shader": {
        "info": {
            "date": "1521970715",
            "description": "Perlin noise type is controlled by MOD: auto-change between unsigned, signed, abs(), 1.-abs\nTry uncomment one of the intensity scheme",
            "flags": 0,
            "hasliked": 0,
            "id": "XsyyDD",
            "likes": 35,
            "name": "rainbow noise 2",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "rainbow",
                "hue"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 3592
        },
        "renderpass": [
            {
                "code": "// inspired from \"rainbow noise\" by violetforest. https://shadertoy.com/view/4dyyDW\n\n#define MOD int(mod(iTime/3.,4.))\n\n#define hash(p) fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123)\n\nfloat noise (vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p); f = f*f*(3.-2.*f); // smoothstep\n\n    float v= mix( mix( mix(hash(i+vec3(0,0,0)),hash(i+vec3(1,0,0)),f.x),\n                       mix(hash(i+vec3(0,1,0)),hash(i+vec3(1,1,0)),f.x), f.y), \n                  mix( mix(hash(i+vec3(0,0,1)),hash(i+vec3(1,0,1)),f.x),\n                       mix(hash(i+vec3(0,1,1)),hash(i+vec3(1,1,1)),f.x), f.y), f.z);\n\treturn   MOD==0 ? v\n\t       : MOD==1 ? 2.*v-1.\n           : MOD==2 ? abs(2.*v-1.)\n                    : 1.-abs(2.*v-1.);\n}\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat fbm (vec3 p) {\n    float v = 0.,  a = .5;\n    mat2 R = rot(.37 + iTime/1e4);\n\n    for (int i = 0; i < 9; i++, p*=2.,a/=2.) \n        p.xy *= R, p.yz *= R,\n        v += a * noise(p);\n\n    return v;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= iResolution.y;\n    O = .5+ .55* cos( 9.*fbm(vec3(U,iTime/3.))+ vec4(0,23,21,0)); // hue\n  //O *= abs(fract(3.*fbm(vec3(U,iTime/3.)+.5))*2.-1.);           // intensity\n  //O *= abs(fract(3.*fbm(vec3(U,iTime/3.)))*2.-1.);              // intensity\n  //O *= .5+fbm(vec3(U,iTime/3.)+.5);                             // intensity\n    if ( length(U*4.-vec2(.1,.2*float(MOD+1)))<.1 ) O--;          // MOD\n    \n  //O = sqrt(O);                                                  // sRGB\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}