{
    "Shader": {
        "info": {
            "date": "1622353134",
            "description": "Something something a port of the python script that renders this room",
            "flags": 0,
            "hasliked": 0,
            "id": "sts3RS",
            "likes": 5,
            "name": "Checkerboard room (raymarch)",
            "published": 3,
            "tags": [
                "raymarching",
                "pianomiles",
                "trigophers"
            ],
            "usePreview": 0,
            "username": "A_KouZ1",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 resolution;\nuniform float time;\n\n\nfloat box(vec3 p,vec3 r){return max(abs(p.x)-r.x,max(abs(p.y)-r.y,abs(p.z)-r.z));}\n\nfloat sdf(vec3 p){return min(\n    -box(p-vec3(0,0,-3),vec3(6,2,6)),min(\n        box(p-vec3(2.5,0,2),vec3(1,4,1)),min(\n            box(p-vec3(-2.5,0,0),vec3(1,4,1)),\n            box(p-vec3(2.5,0,-2),vec3(1,4,1))\n            )\n        )\n    );}\n\nvec3 nrm(vec3 p){ vec3 a = vec3(1e-4,0,0);\n    return normalize(vec3(sdf(p+a.xyz),sdf(p+a.yxz),sdf(p+a.yzx)));\n}\n\nfloat ray(vec3 p,vec3 v){float d=0.;\n    for(int i=0; i<64; i++)d+=sdf(p+v*d);\n    return d;\n}\n\nfloat lit(vec3 p,vec3 q){\n    vec3 v = normalize(q-p);\n    float  d = distance(p,q);\n    float  n = dot(nrm(q),-v);\n    float  r = ray(p,v);\n    float  w = distance(p+r*v,q);\n    return n*min(1.,(1./64.)/w/w)/(d*d+1.);\n}\n\nvec3 rot_xy(vec3 v,float r){\nreturn vec3(v.x*cos(r)-v.y*sin(r),v.x*sin(r)+v.y*cos(r),v.z);}\n\nvec3 rot_xz(vec3 v,float r){\nreturn rot_xy(v.xzy,r).xzy;}\n\nvec3 rot_yz(vec3 v,float r){\nreturn rot_xy(v.yzx,r).zyx;}\n\nvec3 ren(vec2 uv){\n    vec3 p = vec3(0,0,-4);\n    vec3 q = normalize(vec3(uv,1));\n    \n    p = p + vec3(0,0,3.*(1.-cos(iTime)));\n    q = rot_xz(q,iTime/2.);\n    \n    \n    float  d = ray(p,q);\n    vec3 r = p+q*d;\n    \n    vec3 f = floor((.5+r-2.*floor(r/2.+.25))+0.001)-0.5;\n    float  g = f.x+f.y+f.z;\n    float  t = 1.-.7*floor(g-2.*floor(g/2.));\n    float B = 4.*t*(lit(vec3(-3,0,-2),r)+0.01);\n    float A = 4.*t*(lit(vec3(-3,0, 2),r)+0.01);\n    return vec3(2.*A+B/12.,4.*A/3.+B/3.,A/24.+B);//1/d*t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 ra = vec2(iResolution.x/iResolution.y,1);\n    vec2 uv = 2.*fragCoord/iResolution.xy*ra-vec2(ra.x,1);\n    fragColor = vec4(sqrt(ren(1.5*uv)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}