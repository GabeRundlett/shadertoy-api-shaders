{
    "Shader": {
        "info": {
            "date": "1624530950",
            "description": "This is a small experiment in rendering isolines. After posting a first hacky version, I've stumbled upon https://www.shadertoy.com/view/Ms2XWc (posted by iapafoto the same day :)) referencing IQ's article on the topic of smooth isoline rendering.",
            "flags": 0,
            "hasliked": 0,
            "id": "7t2GRt",
            "likes": 9,
            "name": "Level map exploration",
            "published": 3,
            "tags": [
                "2d",
                "lines",
                "map",
                "isolines",
                "level"
            ],
            "usePreview": 0,
            "username": "kosua20",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "\n#define HAS_DERIV\n\n#define BACKGROUND_INTENSITY 0.0\n#define THEME_COLOR vec3(0.670,0.513,0.007 )\n\n// Perlin\nfloat cnoise(vec3 P);\n\n// Wrapper (not really needed)\nfloat delta(float v, float fallback){\n#ifndef HAS_DERIV\n    return fallback;\n#else\n    return 2.0 * length(vec2(dFdx(v), dFdy(v)));\n#endif\n}\n\n// https://iquilezles.org/articles/distance\nfloat smoothLine(float val, float scale, float thickness, float fallback){\n    // Compute gradient using continuous val.\n    float deltaVal = delta(val, fallback);\n    // Line frequency.\n    float scaledVal = mod(val, scale);\n    float finalVal = abs(scaledVal) / max(deltaVal, 0.001) - thickness;\n    return 1.0 - smoothstep(0.1, 0.9, finalVal);\n}\n\nvec3 evaluate(vec2 ndc, float time, float ratio){\n    // Colors.\n    vec3 themeColor = THEME_COLOR;\n    vec3 backgroundColor = vec3(BACKGROUND_INTENSITY);\n    vec3 foregroundColor = vec3(1.0 - BACKGROUND_INTENSITY);\n\n    // Scaled UVs.\n    vec2 rawUV = 0.5 * ndc + 0.5;\n    vec2 ratioUV = 0.5 * vec2(ratio, 1.0) * ndc + 0.5;\n    vec2 gridUV = ratioUV + 0.5;\n\n    // Isolines landscape.\n    float noise = cnoise(vec3(3.0 * ratioUV, 0.000025 * time));\n    float mainLevelLine = smoothLine(noise, 0.4, 0.8, 0.015);\n    float secondLevelLine = smoothLine(noise, 0.1, 0.1, 0.01);\n    float intensityLines = max(mainLevelLine, secondLevelLine);\n\n    // Add a regular grid.\n    float gridXLine = smoothLine(gridUV.x, 0.35, 0.5, 0.005);\n    float gridYLine = smoothLine(gridUV.y, 0.35, 0.5, 0.005);\n    float intensityGrid = max(gridYLine, gridXLine);\n\n    // Extra point at random location.\n    // (could use proper disk SDF instead of a thick line circle)\n    float motionTime = 0.0001 * time;\n    float nx = cnoise(-vec3(8.2, 9.4, motionTime));\n    float ny = cnoise(-vec3(87.8, 13.1, motionTime));\n    vec2 position = 0.5 * 1.75 * vec2(nx, ny) + 0.5;\n    float dist = length(ratioUV - position);\n    float intensityPoint = smoothLine(dist, 10000.0 /* cheat, no repetition needed */, 4.0, 0.005);\n\n    // Combine everything.\n    float themeColorIntensity = max(intensityLines, intensityGrid);\n    float foregroundColorIntensity = intensityPoint;\n\n    vec3 color = mix(backgroundColor, themeColor, themeColorIntensity);\n    color = mix(color, foregroundColor, foregroundColorIntensity);\n\n    // Vignetting.\n    float attenuation = smoothstep(0.6, 1.0, length(rawUV - 0.5)*2.0);\n    return mix(color, backgroundColor, attenuation);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Convert shadertoy inputs to my framework inputs.\n    vec2 ndc = 2.0 * fragCoord/iResolution.xy - 1.0;\n    float time = iTime * 1000.0f;\n    float ratio = iResolution.x/iResolution.y;\n   \n    fragColor.rgb = evaluate(ndc, time, ratio);\n    fragColor.a = 1.0;\n}\n\n// Perlin noise: Copyright (C) 2011-2016 by Stefan Gustavson \n// Licence: https://github.com/stegu/webgl-noise/blob/master/LICENSE\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x){ return mod289(((x*34.0)+1.0)*x); }\n\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n\nvec3 fade(vec3 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\n\nfloat cnoise(vec3 P);\n// Classic Perlin noise\nfloat cnoise(vec3 P) {\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n    return 2.2 * n_xyz;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}