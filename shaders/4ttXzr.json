{
    "Shader": {
        "info": {
            "date": "1477796950",
            "description": "Abstract Plane Cloudy Beauty",
            "flags": 0,
            "hasliked": 0,
            "id": "4ttXzr",
            "likes": 31,
            "name": "Abstract Plane Cloudy Beauty",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "cloud",
                "fog",
                "cloudy"
            ],
            "usePreview": 1,
            "username": "aiekick",
            "viewed": 1298
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n/* \n\tthis shader is a mix of :\n\n \tShader Cloudy spikeball from duke : https://www.shadertoy.com/view/MljXDw\n\tShader Cloudy MegaWave from me : https://www.shadertoy.com/view/MljSRy\n\tShader Abstract Plane Beauty from me : https://www.shadertoy.com/view/MlcSzn\n*/\n\nconst vec3 lightDir = vec3(0.,1., 0.5);\nconst float mPi = 3.14159;\nconst float m2Pi = 6.28318;\n\nfloat t = 0.;\n\n/////////////////////////\n// FROM Shader Cloudy spikeball from duke : https://www.shadertoy.com/view/MljXDw\nfloat pn( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture(iChannel0, (uv+ 0.5)/256.0, -100.0 ).yx;\n\trg = vec2(rg.x + rg.y)/2.;\n\treturn -1.0+2.4*mix( rg.x, rg.y, f.z );\n}\n\nfloat fpn(vec3 p) \n{\n\treturn pn(p*.06125)*.5 + pn(p*.125)*.25 + pn(p*.25)*.125;\n}\n/////////////////////////\n\nmat3 RotZ(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nvec3 path(vec3 p)\n{\n    p.xy += cos(iTime * 0.2);\n\tp *= RotZ(p.z * 0.1);\n    p += sin(p.zxy * 0.5) * 0.5;\n\tp *= RotZ(p.z * 0.2);\n    p = sin(p.zxy * 0.2) * 2.;\n    return p;\n}\n\nfloat disp(vec3 p)\n{\n    p *= 50.;\n   \treturn fpn(p) * .6;\n}\n\n\nfloat dfBase(vec3 p)\n{\n\tp += path(p);\n\tp *= RotZ(p.z * 0.045);\n    return 1. - cos(p.z*1.5) * 0.1 - abs(p.y);\n}\n\nfloat df(vec3 p)\n{\n\treturn dfBase(p) + disp(p);\n}\n\nvec3 nor( vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n\t    dfBase(pos+eps.xyy) - dfBase(pos-eps.xyy),\n\t    dfBase(pos+eps.yxy) - dfBase(pos-eps.yxy),\n\t    dfBase(pos+eps.yyx) - dfBase(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// get density of the df at surfPoint\n// ratio between constant step and df value\nfloat SubDensity(vec3 surfPoint, float prec, float ms) \n{\n\tvec3 n;\n\tfloat s = 0.;\n    const int iter = 10;\n\tfor (int i=0;i<iter;i++)\n\t{\n\t\tn = nor(surfPoint,prec); \n\t\tsurfPoint = surfPoint - n * ms; \n\t\ts += dfBase(surfPoint);\n\t}\n\t\n\treturn 1.-s/(ms*float(iter)); // s < 0. => inside df\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = nor(p,s); \t\t\t\t\t\t\t// precise normale at surf point\n\treturn dfBase(p - n * s);\t\t\t\t\t\t// ratio between df step and constant step\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (g+g-si)/si.y;\n\tvec3 ro = vec3(0,0, iTime * 6.); ro -= path(ro);\n    vec3 cv = ro + vec3(0,0,4); cv -= path(cv);\n\tvec3 cu = normalize(vec3(0,1,0));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y = cross(z,x);\n    float fov = .9;\n  \tvec3 rd = normalize(fov * (uv.x * x + uv.y * y) + z);\n\t\n\tfloat s = 1.;\n\tfloat d = 0.;\n\tvec3 p = ro + rd * d;\n\t\n    float dMax = 50.;\n\tfloat sMin = 0.0001;\n\t\n    /////////////////////////\n\t// FROM Shader Cloudy spikeball from duke : https://www.shadertoy.com/view/MljXDw\n\tfloat ld, td= 0.; // ld, td: local, total density \n\tfloat w; // w: weighting factor\n\tvec3 tc = vec3(.25); // total color\n   \n\tfloat h=.05;\n    const float stepf = 1./250.;\n\t/////////////////////////\n    \n\tfor (float i=0.; (i<1.); i+=stepf) \n\t{\n        // FROM Shader Cloudy spikeball from duke : https://www.shadertoy.com/view/MljXDw\n\t\tif(!((i<1.) && (s>sMin) && (d < dMax)&& (td < .95))) break;\n\t\t\n        s = df(p);\n\t\ts *= (s>0.001?0.15:.2) ;\n        \n        /////////////////////////\n\t\t// FROM Shader Cloudy spikeball from duke : https://www.shadertoy.com/view/MljXDw\n\t\tld = (h - s) * step(s, h);\n\t\tw = (1. - td) * ld;   \n\t\ttc += w; \n      \ttd += w + .005;\n      \ts = max(s, 0.02);\n        /////////////////////////\n      \t\n        d += s;\n\t  \tp = ro + rd * d;\n    }\n\t\n    // classic RM from Abstract Plane Beauty : https://www.shadertoy.com/view/MlcSzn\n    s = 1., d = 0.;\n\tfor (int i=0; i<30; i++) // 30 iterations yeah :)\n\t{\n\t\tif (log(d/1e6)>0.) break; // due to this special break condition\n\t\td += dfBase(ro+rd*d);\n\t}\n\t\n\tp = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t// surface point\n\tvec3 lid = normalize(ro-p); \t\t\t\t\t\t\t\t\t\t// light dir\n\tvec3 n = nor(p, 0.001);\t\t\t\t\t\t\t\t\t\t\t// normal at surface point\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t// reflected ray dir at surf point \n\tfloat diff = clamp( dot( n, lid ), 0.0, 1.0 ); \t\t\t\t\t// diffuse\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \t\t\t// fresnel\n\tfloat spe = pow(clamp( dot( refl, lid ), 0.0, 1.0 ),16.);\t\t// specular\n\tvec3 col = vec3(.8,.5,.2);\n    \n    // here the magix happen\n\tfloat sss = dfBase(p - n*0.001)/0.01;\t\t\t\t\t\t\t\t// quick sss 0.001 of subsurface\n\t\n\tfloat sb = SubDensity(p, 0.01, 0.1);\t\t\t\t\t\t\t// deep subdensity from 0.01 to 0.1 (10 iterations)\n\tvec3 bb = blackbody(200. * sb);\t\t\t\t\t\t\t\t\t// blackbody color\n\tfloat sss2 = 0.8 - SubDensity(p, 3.); \t\t\t\t\t\t\t// one step sub density of df of 3 of subsurface\n\t\n\tvec3 a = (diff + fre + bb * sss2 * .8 + col * sss * .2) * 0.25 + spe; // near\n    vec3 b = col * sss * .5;\n    \n    // mix\n    fragColor.rgb = mix( tc, mix(b,a,1.-exp(-0.015*d*d)), 1.-exp(-0.01*d*d) );\n\n\t// vigneting from iq Shader Mike : https://www.shadertoy.com/view/MsXGWr\n    vec2 q = g/si;\n    fragColor.rgb *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.55 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}