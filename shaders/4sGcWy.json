{
    "Shader": {
        "info": {
            "date": "1526139826",
            "description": " ",
            "flags": 0,
            "hasliked": 0,
            "id": "4sGcWy",
            "likes": 18,
            "name": "Tunnel_0",
            "published": 3,
            "tags": [
                "raymarching",
                "tunnel"
            ],
            "usePreview": 0,
            "username": "balkhan",
            "viewed": 1064
        },
        "renderpass": [
            {
                "code": "/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\n#define I_MAX\t150\n#define E\t\t0.00001\n\nfloat\tsdTorus( vec3 p, vec2 t );\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec2\trot(vec2 p, vec2 ang);\nfloat\tmylength(vec3 p);\nfloat\tmylength(vec2 p);\nvoid\trotate(inout vec2 v, float angle);\n\nfloat\tt;\nvec3\th;\nfloat\tmind;\nfloat\tlit;\nfloat\ttest;\nvec3\t_color_one, _color_two;\n\nvoid mainImage(out vec4 o, in vec2 f )\n{\n    h = vec3(0.);\n    t = iTime;\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n    \n    _color_two = vec3(\n\t\tsin(.25*iTime*.25+2.08)\n        ,\n        sin(.25*iTime*.5+2.57)\n        ,\n        sin(.25*iTime*.75+3.00)\n    );\n    \n\tvec3\tdir = camera(uv);\n    vec4\tcol = vec4(0.0);\n    vec3 pos = vec3(.01, .01, 5.0);\n\n    vec2\tinter = (march(pos, dir));\n    col.xyz = 1.*blackbody((inter.y*.06125)*100.);\n   \tcol.xyz += h;\n    col.xyz += vec3(.2, .2, .2) * inter.x * .0125 * max(.01, 70./max(inter.y, .001) );\n    col.xyz += (1.-_color_one) * min(inter.y, 70.) * .003;\n    o.xyz = col.xyz;\n}\n\nfloat\tscene(vec3 p)\n{\n    mind = 1e5;\n    lit  = 1e5;\n    p.z-= -30.;\n    p.z -= iTime*5.;\n\tvec3\tap = p;\n    \n    \n    p.xy += vec2(cos(p.z*.25), sin(p.z*.25 ) );\n    p.xy += vec2(cos(-p.z*.125), sin(-p.z*.125 ) );\n    p.xy += vec2(cos(p.z*.0625), sin(p.z*.0625 ) );\n    p.xy += vec2(cos(-p.z*.03), sin(-p.z*.03 ) );\n    \n    p.xy += \n        .175\n        *\n        vec2(\n            cos(iTime*5.+50.*(atan(ap.x, ap.y)*1.-iTime*-.05+p.z*.0251*1.0) )\n            ,\n            sin(iTime*5.+50.*(atan(ap.x, ap.y)*1.+iTime*-.05+p.z*.0251*1.0) )\n        );\n    \n    float ata = atan(p.x,p.y);\n    _color_one = vec3(\n    \tsin(cos(3.*ata+(p.z*2.)/4.)+7.7+0.00)\n        ,\n        sin(cos(3.*ata+(p.z*2.)/8.)+7.7-.57)\n        ,\n        sin(cos(3.*ata+(p.z*2.)/16.)+7.7-1.04)\n    );\n    \n    mind = min(mind\n               ,\n               max( (length(p.xy)-10.), -(length(p.xy)-9.) )\n               );\n    \n    lit = min(lit, length( (p.xy))-10.);\n    lit = max(lit, -(length(p.xy)-9.125) );\n    \n    lit = max(lit, (length(-1.+1.*cos(p.zz*5.+iTime*.5) )-.2) );\n    h += 1.*_color_two*1./max(lit*lit*10000.1+.0+test*.1251, .1);\n\n    mind = max(mind, -(length(-1.+1.*cos(p.zz*5.+iTime*.5) )-.2) );\n\tfloat tmp = mind;\n    \n    mind = min(mind, lit);\n    \n    h += _color_one * 1./max(tmp*tmp*100. + 50. + test, .01);\n\n    return(mind);\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec2\ts = vec2(0.0);\n\tvec3\tdirr;\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n        dirr = dir;\n        rotate(dirr.xz, +dist.y*.000+.25*sin(t*.25+dist.y*.005) );\n    \tp = pos + dirr * dist.y;\n        test = dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E)\n        {\n           break;\n\t    }\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nfloat\tmylength(vec2 p)\n{\n\treturn max(abs(p.x), abs(p.y));\n}\n\nfloat\tmylength(vec3 p)\n{\n\treturn max(max(abs(p.x), abs(p.y)), abs(p.z));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.xy)-t.x,p.z);\n\n    return length(q)-t.y;\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}