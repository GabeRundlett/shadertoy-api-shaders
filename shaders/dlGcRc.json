{
    "Shader": {
        "info": {
            "date": "1700528302",
            "description": "I just wanted to see Xor's beautiful shader run fullscreen at 60fps, but my GPU couldn't even do 800x450...\n\nHere's a compromise, figured it might be useful for someone else as the zoom method should work for pretty much any shader",
            "flags": 32,
            "hasliked": 0,
            "id": "dlGcRc",
            "likes": 10,
            "name": "Remedy for a crap GPU",
            "published": 3,
            "tags": [
                "3d",
                "zoom",
                "optimization",
                "maze",
                "scale",
                "scaling"
            ],
            "usePreview": 0,
            "username": "misol101",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "/*\n    \"Passage\" by @XorDev\n    \n    X: X.com/XorDev/status/1726396476866044130\n    Twigl: twigl.app?ol=true&ss=-Nje8mOER98sqMpHsal-\n    \n    <512 chars playlist: https://www.shadertoy.com/playlist/N3SyzR\n*/\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //setMaxResXScale();\n\tif (I.x > iResolution.x / SCALE) { O=vec4(0.); return; }\n\tif (I.y > iResolution.y / SCALE) { discard; }\n\tvec3 IR = iResolution / SCALE;    \n\n    //Clear fragcolor\n    O *= 0.;\n    \n    //Raymarch loop:\n    //iterator, step-size, raymarch distance, Tau\n    //Raymarchs 100 times adding brightness when close to a surface\n    for(float i,s,d,z,T=acos(-1.)*2.; i++<50.; O+=0.0000105/(.0004-s))\n    {\n        //Rotation matrix\n        mat2 R = mat2(8,6,-6,8)*.1;\n        //Resolution for scaling\n        vec3 r = IR,\n        //Project sample with roll rotation and distance\n        p = vec3((I+I-r.xy)/r.x*d*R, d-9.)*.7;\n        //Rotate pitch\n        p.yz *= R;\n        z = p.z;\n        //Step forward (negative for code golfing reasons)\n        d -= s = min(z, cos(dot(\n            //Compute subcell coordinates\n            modf(fract((\n            //Using polar-log coordinates\n            vec3(atan(p.y,p.x),log(s=length(p.xy)),0)/T-iTime/2e1)*\n            //Rotate 45 degrees and scale repetition\n            mat3(1,1,0,1,-1,0,p-p))*15., p),\n        //Randomly flip cells and correct for scaling\n        sign(cos(p+p.y)))*T)*s/4e1);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Method to display centered 1px buffer, and fill the rest with zoomed-in version of the same buffer\n// Used for performance reasons / running fullscreen\n// by misol101\n\n#define TX(xpp,ypp,sc) texelFetch(iChannel0, ivec2(fragCoord.x/ sc + xpp, fragCoord.y/ sc + ypp), 0)\n\n#define BORDER_SIZE 0.004\n#define BORDER_COLOR vec4(0.)\n#define ZOOM_SAMPLES 4\n#define BG_COL vec4(1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //setMaxResXScale();\n\n    //fragColor = texelFetch(iChannel0, ivec2(fragCoord/ SCALE), 0); return; // simplest scale\n\n    float xsz = iResolution.x * (1./SCALE) * 0.5;\n    float ysz = iResolution.y * (1./SCALE) * 0.5;\n    float mx = max(0., iMouse.z) * 1e6;\n    float xsta = iResolution.x * 0.5 - xsz + mx, xsto = iResolution.x * 0.5 + xsz + mx;\n    float ysta = iResolution.y * 0.5 - ysz, ysto = iResolution.y * 0.5 + ysz;\n    float border = iResolution.x * BORDER_SIZE;\n\n    if (fragCoord.x > xsta && fragCoord.x < xsto && fragCoord.y > ysta && fragCoord.y < ysto) {\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord.x - xsta, fragCoord.y-ysta), 0); \n        return;\n    } else if (fragCoord.x > xsta - border && fragCoord.x < xsto + border  && fragCoord.y > ysta -border && fragCoord.y < ysto+border) {\n        fragColor = BORDER_COLOR; \n        return;\n    }\n\n    float sc = SCALE + (SCALE+1.)/(iResolution.y*(1./SCALE)) * SCALE;\n    vec4 col = TX(0.,0.,sc);\n    switch (ZOOM_SAMPLES) {\n        case 2: col += TX(SCALE, 0., sc); break;\n        case 3: col += TX(SCALE, 0., sc) + TX(0., SCALE, sc); break;\n        case 4: col += TX(SCALE, 0., sc) + TX(0., SCALE, sc) + TX(SCALE, SCALE, sc); break;\n    }\n    fragColor = (col / (float(ZOOM_SAMPLES)) ) * BG_COL;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float SCALE = 2.0;\n\nconst float MAX_X_RES = 1000.;\n#define setMaxResXScale() SCALE = max(1.0, iResolution.x / MAX_X_RES)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}