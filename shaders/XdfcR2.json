{
    "Shader": {
        "info": {
            "date": "1488902323",
            "description": "Buffer, random, bounce, particles\n\nRainbow code:\n[url]https://www.shadertoy.com/view/MdSBWV[/url]\n\n",
            "flags": 96,
            "hasliked": 0,
            "id": "XdfcR2",
            "likes": 4,
            "name": "Buffering ",
            "published": 3,
            "tags": [
                "random",
                "particles",
                "bounce",
                "buffer"
            ],
            "usePreview": 0,
            "username": "pthextract",
            "viewed": 1215
        },
        "renderpass": [
            {
                "code": "// Visualisation\n//Created by pthextract in 2017-Mar-7\n\n\n\n#define get(x,y) texture(iChannel0,(vec2(x,y)+.5)/ir)\n\nfloat hash(int x,int y)\n{\n    return fract(412.1*sin(387.*float(x*x+y*(y+734))));\n}\n\nvoid mainImage( out vec4 o,  vec2 i )\n{\n   \n    vec2 ir=iResolution.xy;\n     i/=ir;\n  \n      //o = .7* texture(iChannel1,i).ggrr;\n    \n    //o-=vec4(0,.5,0,1);\n    //o+=vec4(0,0,.2,1);\n   \to-=o;\n     \n    for (int y=1;y<15;y++)\n    for (int x=1;x<10;x++)\n    {\n     float le=(length(get(x,y).xy-i));\n        if (le\n            <.05*float(x*y))\n        {\n            o.r+=hash(x*3,y*7)/(le/=.004);\n            o.g+=hash(x*8,y*1)/le;\n            o.b+=hash(x*7,y*2)/le;\n            //o+=.001;\n              //o.g+=hash(x*8,y*1);\n            \n            };\n            \n    \n    } \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 11807,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/fred-durst-to-last/double-dragon-neon-mission-10-neon-fortress"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Data & control buffer\nfloat hash(float x)\n{\n    return fract(412.1*sin(387.*float(x*x)));\n}\nfloat hash(int x,int y)\n{\n    return fract(412.1*sin(387.*float(x*x+y*(y+734))));\n}\n\nvoid mainImage( out vec4 o,  vec2 i )\n{\n   float ig=iTime;\n    int x=int(i.x);int y=int(i.y);\n    vec2 ir=iResolution.xy;\n\to =  texture(iChannel0,i/ir);\n      if (ig<.1)\n        {o-=o;\n         o.x+=hash(x,y);o.y+=hash(x-100,y-10);\n            // o.z=0.;o.a=0.;\n        ;}\n   \n  \n            o.x+=.01*(hash(ig+float(x*3+y*2))-.5);\n            o.y+=.004*ig*(hash(ig+float(x+y*7))-.5);\n            o.y+=o.a;o.a-=1e-3;\n            if (o.y<.0)o.a=-o.a*.99;\n            //if (abs(iTime-10.2)<.01)o.z-=.02;\n       \n    \n}\n\n //if (x==25 && y==0)o.r++;//set value;\n    //if (x==27) o=texture(iChannel0,(vec2(25,0)+.5)/ir);//get and set;    \n    // if (x<300 && y<300)",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}