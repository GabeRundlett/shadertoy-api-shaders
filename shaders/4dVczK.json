{
    "Shader": {
        "info": {
            "date": "1542239954",
            "description": "This implements a basic cellular automata. Click on the image to adjust the rule from 0 to 255. Hold 'space bar' to reset. Hold 'h' to hide the bitfield. Drag mouse off canvas to keep value.",
            "flags": 48,
            "hasliked": 0,
            "id": "4dVczK",
            "likes": 2,
            "name": "Cellular Automata Rule 30",
            "published": 3,
            "tags": [
                "automata",
                "cellular"
            ],
            "usePreview": 0,
            "username": "microwerx",
            "viewed": 544
        },
        "renderpass": [
            {
                "code": "void bitfield(out vec3 color, in vec2 uv) {\n    int t = int(float(iMouse.x) / float(iResolution.x) * 255.99);\n    float bits = float(t);\n    float bit1 = mod(bits,   2.0); bits -= bit1; bit1 = bit1 > 0.0 ? 1.0 : 0.0;\n    float bit2 = mod(bits,   4.0); bits -= bit2; bit2 = bit2 > 0.0 ? 1.0 : 0.0;\n    float bit3 = mod(bits,   8.0); bits -= bit3; bit3 = bit3 > 0.0 ? 1.0 : 0.0;\n    float bit4 = mod(bits,  16.0); bits -= bit4; bit4 = bit4 > 0.0 ? 1.0 : 0.0;\n    float bit5 = mod(bits,  32.0); bits -= bit5; bit5 = bit5 > 0.0 ? 1.0 : 0.0;\n    float bit6 = mod(bits,  64.0); bits -= bit6; bit6 = bit6 > 0.0 ? 1.0 : 0.0;\n    float bit7 = mod(bits, 128.0); bits -= bit7; bit7 = bit7 > 0.0 ? 1.0 : 0.0;\n    float bit8 = mod(bits, 256.0); bits -= bit8; bit8 = bit8 > 0.0 ? 1.0 : 0.0;\n    \n    int test = t;\n\n    int index1 = int(uv.x);\n    int index2 = int(uv.y);\n\n    // Show counter on bottom right\n    if (index2 == 0) {\n        const vec3 BLK = vec3(0.0, 0.0, 0.0);\n        const vec3 RED = vec3(0.5, 0.0, 0.0);\n        const vec3 GRN = vec3(0.0, 1.0, 0.0);\n        const vec3 BLU = vec3(0.0, 0.0, 1.0);\n        const vec3 WHT = vec3(1.0, 0.0, 0.0);\n        if (index1 == 15 && (test & 1)   != 0) color = WHT;\n        else if (index1 == 14 && (test & 2)   != 0) color = WHT;\n        else if (index1 == 13 && (test & 4)   != 0) color = WHT;\n        else if (index1 == 12 && (test & 8)   != 0) color = WHT;\n        else if (index1 == 11 && (test & 16)  != 0) color = WHT;\n        else if (index1 == 10 && (test & 32)  != 0) color = WHT;\n        else if (index1 ==  9 && (test & 64)  != 0) color = WHT;\n        else if (index1 ==  8 && (test & 128) != 0) color = WHT;\n        else if (index1 >= 8) color = RED;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    col = texture(iChannel0, uv).rgb;\n    \n    const float AKEY = float(65);\n    float keyPressed = texture(iChannel3, vec2(AKEY/255.0, 0.0), 0.0).x;\n    if (keyPressed > 0.5 || iMouse.z > 0.0) {\n\t    bitfield(col, vec2(16.0) * fragCoord/iResolution.xy);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec3 Black = vec3(0.0);\nconst vec3 White = vec3(1.0);\n\nint rule30(int test) {\n    int ca = 0;    \n    if (test == 0) ca = 0;\n    else if (test == 1) ca = 0;\n    else if (test == 2) ca = 0;\n    else if (test == 3) ca = 1;\n    else if (test == 4) ca = 1;\n    else if (test == 5) ca = 1;\n    else if (test == 6) ca = 1;\n    else if (test == 7) ca = 0;\n    else ca = 0;\n    return ca;\n}\n\nint ruleN(int test, int pattern) {\n    int ca = 0;    \n    if (test > 7) ca = 0;\n    else if (test == 0) ca = ((pattern >> 7) & 1);\n    else if (test == 1) ca = ((pattern >> 6) & 1);\n    else if (test == 2) ca = ((pattern >> 5) & 1);\n    else if (test == 3) ca = ((pattern >> 4) & 1);\n    else if (test == 4) ca = ((pattern >> 3) & 1);\n    else if (test == 5) ca = ((pattern >> 2) & 1);\n    else if (test == 6) ca = ((pattern >> 1) & 1);\n    else if (test == 7) ca = ((pattern >> 0) & 1);\n    else ca = 0;\n    return ca;    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float du = 1.0 / iResolution.x;\n    float dv = 1.0 / iResolution.y;\n\n    // Scroll after five seconds\n    //if (iTime > 5.0) dv = 0.0;\n    \n    vec3 va = White;\n    vec3 vb = White;\n    vec3 vc = White;\n    \n    vec3 original = texture(iChannel0, uv).rgb;\n    /*\n\tva = texture(iChannel0, uv + vec2(-du, -dv)).rgb;\n    vb = texture(iChannel0, uv + vec2(0.0, -dv)).rgb;\n    vc = texture(iChannel0, uv + vec2(+du, -dv)).rgb;\n\t*/\n    ivec2 iuv = ivec2(fragCoord);\n    ivec2 iwh = ivec2(iChannelResolution[0].xy);\n    if (iuv.x > 0 && iuv.x < iwh.x - 1) {\n        va = texelFetch(iChannel0, iuv + ivec2(-1, +1), 0).rgb;\n        vb = texelFetch(iChannel0, iuv + ivec2( 0, +1), 0).rgb;\n        vc = texelFetch(iChannel0, iuv + ivec2( 1, +1), 0).rgb;\n    }\n    \n    int a = (va.r > 0.5) ? 1 : 0;\n    int b = (vb.r > 0.5) ? 1 : 0;\n    int c = (vc.r > 0.5) ? 1 : 0;\n    \n    // Construct bitfield with left, center, and right\n    int test = 0;    \n    if (a == 1) test += 4;\n    if (b == 1) test += 2;\n    if (c == 1) test += 1;\n    \n    int rule = 30;\n    if (iMouse.z > 0.0) {\n        rule = int(255.0 * iMouse.x / iResolution.x);\n    }\n    vec3 color = (ruleN(test, rule) == 1) ? Black : White;\n\n\tif (iuv.y == iwh.y - 1) {\n        fragColor = vec4(original, 1.0);\n    } else {\n        fragColor = vec4(color, 1.0);\n    }\n\n    const float KEY_SPACE = 32.0;\n    float spacePressed = texture(iChannel3, vec2(KEY_SPACE/255.0, 0.0), 0.0).x;\n    if (spacePressed > 0.5 || iTime < 0.25)\n    {\n        if ((iuv.y == iwh.y - 1) && iuv.x == (iwh.x >> 1)) {\n            fragColor = vec4(Black, 1.0);\n        } else {\n        \tfragColor = vec4(White, 1.0);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}