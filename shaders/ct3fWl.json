{
    "Shader": {
        "info": {
            "date": "1703944850",
            "description": "Animated reproductin of this image: https://www.posterlounge.fr/p/711186.html#paid=19198 by Jazzberry Blue, check his other graphical work here: https://www.jazzberryblue.com/",
            "flags": 0,
            "hasliked": 0,
            "id": "ct3fWl",
            "likes": 3,
            "name": "Geometric semicircles",
            "published": 3,
            "tags": [
                "color",
                "moving",
                "reproduction",
                "semicircle"
            ],
            "usePreview": 0,
            "username": "Saimon",
            "viewed": 143
        },
        "renderpass": [
            {
                "code": "/* \"Geometric semi circles\"\n * I wanted to practice GLSL and the primitives describe in https://thebookofshaders.com/07/\n * so I started looking for art images to try to reproduce.\n * This one is part of my practice serie, it is based on this image: \n * https://www.posterlounge.fr/p/711186.html#paid=19198\n * It was made by Jazzberry Blue, check his other graphical work here: https://www.jazzberryblue.com/\n * (November 2023)(started with 3005 char - Updated 09/01/24 with massive help from FabriceNeyret2)\n */\n\n\nfloat HALF_PI = 1.57,  PI = 3.14;\n#define R       iResolution.xy\n// Clamp the color to make sure it's between [0;1]\n#define clampColor(C) clamp(C,0.,1.)\n//https://www.shadertoy.com/view/XlsyWX\n#define rot(a)  mat2(cos(a+vec4(0,33,11,0)))\n#define W .8/R.y\n#define sstep(t) smoothstep(-W,W,t)\n#define tweenEaseInOutExpo(t) easeInOutExpo(min(t, 1. -t))\n\nfloat sdBox(vec2 p, vec2 b){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat semiCircle(vec2 p, float r, float angle){\n  p *= -rot(angle);\n  float d1 = length(p) - r, //signed distance of circle\n        d2 = sdBox(p+vec2(r,0.), vec2(r));\n  return max(d1,d2);\n}\n\nfloat border(float sd, vec2 p, float s){\n  float d2 = abs(sd) - s;\n  return smoothstep(-W,W, max(sd, d2));\n}\n\n// Simplify version of code: https://thebookofshaders.com/edit.php?log=160909065147\n// and http://www.kynd.info\nfloat easeInOutExpo(float t) {\n  t = exp2(40.*t-10.);\n  return t < 1.\n      ?      .5 * t\n      : 1. - .5 / t;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ){\n  vec2 st = (fragCoord*2. -R.xy) / R.y - vec2(0.1,-0.32);\n  float t = fract((iTime)/3.);\n\n  vec3 YELLOW = vec3(0.902,0.549,0.102),\n       ORANGE = vec3(0.984,0.416,0.09),\n       BEIGE = vec3(0.941,0.671,0.455);\n\n  float rotAngle = tweenEaseInOutExpo(t) * HALF_PI,\n        r = 0.243,\n        s = 0.005;\n\n  st /= 1.8; //Increase the size of the figure\n\n  float c1 = border(semiCircle(st - vec2(0.062,0.185), r, -rotAngle), st, s),\n        c2 = border(semiCircle(st - vec2(-0.179,0.428),r, rotAngle + HALF_PI), st, s),\n        c3 = border(semiCircle(st - vec2(-0.186,-0.0585),r,-rotAngle - HALF_PI), st, s),\n        c4 = sstep(semiCircle(st - vec2(0.062,0.428),r, rotAngle +HALF_PI)),\n        c5 = sstep(semiCircle(st - vec2(0.059,-0.0585),r,-rotAngle-HALF_PI)),\n        c6 = sstep(semiCircle(st - vec2(-0.182,0.185) + vec2(tweenEaseInOutExpo(t)/6.380,0.),r,PI));\n\n  fragColor.rgb =  c1\n                   * c2\n                   * c3\n                   * clampColor(c4 + ORANGE )\n                   * clampColor(c5 + BEIGE  )\n                   * clampColor(c6 + YELLOW );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}