{
    "Shader": {
        "info": {
            "date": "1617144214",
            "description": "Cubic bezier in 1D segments.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nd2Gzw",
            "likes": 4,
            "name": "Cubic Bezier to \"y=\"",
            "published": 3,
            "tags": [
                "bezier",
                "de",
                "y",
                "cubic",
                "parametric"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\n// Custom struct\nstruct Custom {\n    vec2 p1;\n    vec2 p2;\n    bool tf;\n};\n\nstruct DualRoots3 {\n    int nroots;\n    vec2[3] roots;\n};\n\n// Automatic differentiation utilities\nvec2 fMul(in vec2 a, in vec2 b) { return vec2(a.x * b.x, a.x * b.y + a.y * b.x); }\nvec2 fDiv(in vec2 a, in vec2 b) { return vec2(a.x / b.x, (b.x * a.y - a.x * b.y) / (b.x * b.x)); }\nvec2 fSquare(in vec2 z) { return vec2(z.x * z.x, 2.0 * z.x * z.y); }\nvec2 fCube(in vec2 z) { float q = z.x * z.x; return vec2(q * z.x, 3.0 * z.y * q); }\nvec2 fSqrt(in vec2 z) { float q = sqrt(z.x); return vec2(q, 0.5 * z.y / q); }\nvec2 fCos(in vec2 z) { return vec2(cos(z.x), -sin(z.x) * z.y); }\nvec2 fAcos(in vec2 z) { return vec2(acos(z.x), -z.y / sqrt(1.0 - z.x * z.x)); }\nvec2 fSinh(in vec2 z) { return vec2(sinh(z.x), cosh(z.x) * z.y); }\nvec2 fCosh(in vec2 z) { return vec2(cosh(z.x), sinh(z.x) * z.y); }\nvec2 fAsinh(in vec2 z) { return vec2(asinh(z.x), z.y / sqrt(z.x * z.x + 1.0)); }\nvec2 fAcosh(in vec2 z) { return vec2(acosh(z.x), z.y / sqrt(z.x * z.x - 1.0)); }\nvec2 fAbs(in vec2 z) { return vec2(abs(z.x), z.y * sign(z.x)); }\nvec2 fSign(in vec2 z) { return vec2(sign(z.x), 0.0); }\n\n//////////////////////////////////////////////////////////////////////////////////////\n\nDualRoots3 solveCubic(in vec2 a, in vec2 b, in vec2 c, in vec2 d) {\n    vec2 aa = fSquare(a), bb = fSquare(b);\n\n    vec2 denom = 3.0 * aa;\n    vec2 inflect = fDiv(b, 3.0 * a);\n\n    vec2 p = fDiv(c, a) - fDiv(bb, denom);\n    vec2 q = fDiv(fMul(bb, b), 13.5 * fMul(aa, a)) - fDiv(fMul(b, c), denom) + fDiv(d, a);\n    vec2 ppp = fCube(p), qq = fSquare(q);\n\n    vec2 p2 = fAbs(p);\n    vec2 v1 = fMul(fDiv(vec2(1.5, 0.0), p), q);\n\n    DualRoots3 roots = DualRoots3(1, vec2[3](vec2(0.0), vec2(0.0), vec2(0.0)));\n    if (qq.x * 0.25 + ppp.x / 27.0 > 0.0) {\n        vec2 v2 = fMul(v1, fSqrt(fDiv(vec2(3.0, 0.0), p2)));\n        if (p.x < 0.0) roots.roots[0] = fMul(fSign(q), fCosh(fAcosh(fMul(v2, -fSign(q))) / 3.0));\n        else roots.roots[0] = fSinh(fAsinh(v2) / 3.0);\n        roots.roots[0] = -2.0 * fMul(fSqrt(p2 / 3.0), roots.roots[0]) - inflect;\n    }\n\n    else {\n        vec2 ac = fAcos(fMul(v1, fSqrt(fDiv(vec2(-3.0, 0.0), p)))) / 3.0, m = 2.0 * fSqrt(-p / 3.0);\n        roots.roots[0] = fMul(m, fCos(ac                           )) - inflect;\n        roots.roots[1] = fMul(m, fCos(ac - vec2(2.09439510239, 0.0))) - inflect;\n        roots.roots[2] = fMul(m, fCos(ac - vec2(4.18879020479, 0.0))) - inflect;\n        roots.nroots = 3;\n    }\n\n    return roots;\n}\n\n// Invert x to get t and plug it into y\nDualRoots3 yBezier(in vec2 x, in vec2 a, in vec2 b, in vec2 c, in vec2 d) {\n    vec2 coeff1 = vec2(3.0 * b.x - 3.0 * c.x - a.x + d.x, 0.0);\n    vec2 coeff2 = vec2(3.0 * a.x + 3.0 * c.x - 6.0 * b.x, 0.0);\n    vec2 coeff3 = vec2(3.0 * b.x - 3.0 * a.x, 0.0);\n    vec2 coeff4 = vec2(a.x, 0.0) - x;\n\n    DualRoots3 t = solveCubic(coeff1, coeff2, coeff3, coeff4);\n    DualRoots3 y = DualRoots3(t.nroots, vec2[3](vec2(0.0), vec2(0.0), vec2(0.0)));\n    for (int n=0; n < t.nroots; n++) {\n        vec2 tInv = vec2(1.0, 0.0) - t.roots[n];\n        y.roots[n] = a.y * fMul(tInv, fSquare(tInv)) + 3.0 * b.y * fMul(t.roots[n], fSquare(tInv)) +\n                     3.0 * c.y * fMul(tInv, fSquare(t.roots[n])) + d.y * fMul(t.roots[n], fSquare(t.roots[n]));\n    }\n\n    return y;\n}\n\n// Points where the x derivative is zero and the DE breaks down\nCustom xMaxBezier(in vec2 a, in vec2 b, in vec2 c, in vec2 d) {\n    float coeff1 = 9.0 * b.x - 3.0 * a.x - 9.0 * c.x + 3.0 * d.x;\n    float coeff2 = 6.0 * a.x - 12.0 * b.x + 6.0 * c.x;\n    float coeff3 = 3.0 * b.x - 3.0 * a.x;\n\n    float discr = coeff2 * coeff2 - 4.0 * coeff1 * coeff3;\n    if (discr > 0.0) {\n        float root = sqrt(discr);\n        float denom = 2.0 * coeff1;\n\n        float t1 =  (root - coeff2) / denom, t1Inv = 1.0 - t1;\n        float t2 = -(root + coeff2) / denom, t2Inv = 1.0 - t2;\n\n        vec2 p1 = a * t1Inv * t1Inv * t1Inv + 3.0 * b * t1 * t1Inv * t1Inv +\n                  3.0 * c * t1Inv * t1 * t1 + d * t1 * t1 * t1;\n\n        vec2 p2 = a * t2Inv * t2Inv * t2Inv + 3.0 * b * t2 * t2Inv * t2Inv +\n                  3.0 * c * t2Inv * t2 * t2 + d * t2 * t2 * t2;\n\n        return Custom(p1, p2, true);\n    }\n\n    return Custom(vec2(0.0), vec2(0.0), false);\n}\n\n//////////////////////////////////////////////////////////////////////////////////////\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    vec3 color = vec3(0.25);\n\n    float t1 = iTime * 0.5, t2 = iTime, t3 = iTime * 1.25;\n\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec2 a = vec2(c2, s3) * 0.5;\n    vec2 b = vec2(s1, s2) * 0.5;\n    vec2 c = vec2(c3, c1) * 0.5;\n    vec2 d = vec2(c2, s1) * 0.5;\n\n    DualRoots3 y = yBezier(vec2(uv.x, 1.0), a, b, c, d);\n    for (int n=0; n < y.nroots; n++) {\n        float de = abs(uv.y - y.roots[n][0]) / sqrt(1.0 + y.roots[n][1] * y.roots[n][1]);\n        if (n == 0) draw(de - 0.01, vec3(1.0, 0.5, 0.0));\n        if (n == 1) draw(de - 0.01, vec3(1.0, 0.0, 0.0));\n        if (n == 2) draw(de - 0.01, vec3(0.0, 0.0, 1.0));\n    }\n\n    Custom xMax = xMaxBezier(a, b, c, d);\n    if (xMax.tf) {\n        draw((length(uv - xMax.p1) - 0.02), vec3(1.0));\n        draw((length(uv - xMax.p2) - 0.02), vec3(1.0));\n    }\n\n    draw(sdLine(uv, a, b), vec3(1.0));\n    draw(sdLine(uv, b, c), vec3(1.0));\n    draw(sdLine(uv, c, d), vec3(1.0));\n\n    draw(length(uv - a) - 0.01, vec3(1.0, 1.0, 0.0));\n    draw(length(uv - b) - 0.01, vec3(1.0, 1.0, 0.0));\n    draw(length(uv - c) - 0.01, vec3(1.0, 1.0, 0.0));\n    draw(length(uv - d) - 0.01, vec3(1.0, 1.0, 0.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}