{
    "Shader": {
        "info": {
            "date": "1680874832",
            "description": "CC0: Max Drekker sphere\n/Inspired by this tweet: https://twitter.com/MaxDrekker/status/1644282440448450562?s=20\nCreated during a bus trip so the shading of the sphere isn't complete but\ngood enough for my standards\n",
            "flags": 0,
            "hasliked": 0,
            "id": "cdKXzw",
            "likes": 20,
            "name": "Max Drekker sphere",
            "published": 3,
            "tags": [
                "sphere"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "// CC0: Max Drekker sphere\n//  Inspired by this tweet: https://twitter.com/MaxDrekker/status/1644282440448450562?s=20\n//  Created during a bus trip so the shading of the sphere isn't complete but\n//  good enough for my standards\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)s\n\nconst vec2  BoxDim    = vec2(2.0/3.0);\nconst float SphereDim = 0.5;\nconst vec3  BoxCol    = vec3(0.033);\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvec3 sphere(vec3 col, vec2 p) {\n  float r = SphereDim;\n\n  float aa = 2.0/RESOLUTION.y;\n  float z2 = (r*r-dot(p, p));\n  if (z2 > 0.0) {\n    float z   = sqrt(z2);\n    vec3 cp   = vec3(p, z);\n    vec3 rd   = normalize(-vec3(p, 0.75));\n    vec3 cn   = normalize(cp);\n    vec3 cr   = reflect(rd, cn);\n    float fre = 1.0+dot(rd, cn);\n    fre = mix(0.125, 1.0, fre);\n\n    const vec3 lightDir0 = normalize(vec3(2.0, 2.5, 1.5));\n    const vec3 dcol0 = HSV2RGB(vec3(0.5, 0.5, 0.5));\n    const vec3 scol0 = HSV2RGB(vec3(0.66, 0.65, 8.0));\n    float cd0 = max(dot(lightDir0, cn), 0.0);\n    cd0 *= cd0;\n    cd0 *= cd0;\n    float cs0 = max(dot(lightDir0, cr), 0.0);\n\n    const vec3 lightDir1 = normalize(vec3(-2.0, 2.0, .75));\n    const vec3 dcol1 = HSV2RGB(vec3(0.8, 0.666, 0.5));\n    const vec3 scol1 = HSV2RGB(vec3(0.9, 0.75, 6.0));\n    float cd1 = max(dot(lightDir1, cn), 0.0);\n    cd1 *= cd1;\n    cd1 *= cd1;\n    float cs1 = max(dot(lightDir1, cr), 0.0);\n\n    const vec3 lightDir2 = normalize(vec3(1.0, -2.0, -3.));\n    const vec3 dcol2 = HSV2RGB(vec3(0.06, 0.95, 0.95));\n    const vec3 scol2 = HSV2RGB(vec3(0.06, 0.75, 8.0));\n    float cd2 = max(dot(lightDir2, cn), 0.0);\n    cd2 *= cd2;\n    cd2 *= cd2;\n    float cs2 = max(dot(lightDir2, cr), 0.0);\n\n    vec3 ccol = vec3(0.0);\n    ccol += mix(0.0, 1.0, cd0)*(dcol0+0.5*cn);\n    ccol += scol0*pow(cs0, 20.0)*fre;\n\n    ccol += mix(0.05, 1.0, cd1)*(dcol1+0.125*cn);\n    ccol += scol1*pow(cs1, 8.0)*fre;\n\n    ccol += mix(0.0, 1.0, cd2)*dcol2;\n    ccol += scol2*pow(cs2, 20.0)*fre;\n\n    ccol *= tanh(10.0*z);\n\n    float d = length(p)-r;\n    col = mix(col, ccol, smoothstep(aa, -aa, d+0.0));\n  }\n\n  return col;\n}\n\nvec3 bkg(vec3 col, vec2 p) {\n  return vec3(1.0);\n}\n\nvec3 pillar(vec3 col, vec2 p) {\n  vec2 n = normalize(vec2(1.0));\n  float d0 = dot(n, p);\n  float d1 = d0-dot(n, vec2(BoxDim));\n  float d2 = d0-dot(n, vec2(-BoxDim));\n  float d3 = dot(vec2(n.y, -n.x), p);\n  float du = max(max(d1, -d2), -d3);\n  float db = max(max(d0, -d2), -d3);\n  float aa = 2.0/RESOLUTION.y;\n  const float fo = 1.75;\n  vec3 bcol = mix(BoxCol, HSV2RGB(vec3(0.55, 0.0, 1.0)), clamp(-fo*(p.y+BoxDim.y), 0.0, 1.0));;\n  vec3 ucol = mix(BoxCol, HSV2RGB(vec3(0.6, 0.6, 0.5)), clamp(0.667*fo*(p.x-BoxDim.x), 0.0, 1.0));;\n  col = mix(col, ucol, smoothstep(aa, -aa, du));\n  col = mix(col, bcol, smoothstep(aa, -aa, db));\n\n  return col;\n}\n\nvec3 box(vec3 col, vec2 p) {\n  float aa = 2.0/RESOLUTION.y;\n  float d = box(p, BoxDim);\n  col = mix(col, BoxCol, smoothstep(aa, -aa, d));\n  return col;\n}\nvec3 effect(vec2 p, vec2 pp) {\n  vec3 col = vec3(0.0);\n\n  col = bkg(col, p);\n  col = pillar(col, p);\n  col = box(col, p);\n  col = sphere(col, p);\n//  col *= smoothstep(1.75, 0.5, length(pp));\n  col = aces_approx(col);\n  col = sRGB(col);\n  return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}