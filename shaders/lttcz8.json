{
    "Shader": {
        "info": {
            "date": "1531602359",
            "description": "First iteration of doing something 3D with an animated voronoi-pattern. I have to sleep over this a bit, before I know where I want to take this. Try out \"USE_SUBTLE_PATTERN = false\" (in \"Image\").",
            "flags": 32,
            "hasliked": 0,
            "id": "lttcz8",
            "likes": 9,
            "name": "wiggly voronoi floor-tiles",
            "published": 3,
            "tags": [
                "3d",
                "voronoi",
                "spheretracing",
                "pbr"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 819
        },
        "renderpass": [
            {
                "code": "// here all the 3D-things happen (sphere-tracing, normals, lighting, materials)\n\nconst bool USE_SUBTLE_PATTERN = true;\nconst float EPSILON = .0001;\nconst int MAX_ITER = 64;\nconst float STEP_BIAS = .35;\nconst float PI = 3.14159265359;\n\nconst vec3 col1 = vec3 (6./255., 23./255., 102./255.);\nconst vec3 col3 = vec3 (76./255., 12./255., 130./255.);\nconst vec3 col5 = vec3 (194./255., 1./255., 101./255.);\nconst vec3 col7 = vec3 (217./255., 59./255., 10./255.);\nconst vec3 col9 = vec3 (255./255., 156./255., .0/255.);\nconst vec3 col2 = mix (col1, col3, .5);\nconst vec3 col4 = mix (col3, col5, .5);\nconst vec3 col6 = mix (col5, col7, .5);\nconst vec3 col8 = mix (col7, col9, .5);\nconst vec3 colA = mix (col9, col1, .5);\n\nvec3 gradient (float v) {\n    float steps = 10.;\n    float step = 1. / steps;\n    vec3 col = vec3 (.4);\n\n    if (v >= .0 && v < step) {\n        col = mix (col1, col2, v * steps);\n    } else if (v >= step && v < 2.0 * step) {\n        col = mix (col2, col3, (v - step) * steps);\n    } else if (v >= 2.0 * step && v < 3.0 * step) {\n        col = mix (col3, col4, (v - 2.0 * step) * steps);\n    } else if (v >= 3.0 * step && v < 4.0 * step) {\n        col = mix (col4, col5, (v - 3.0 * step) * steps);\n    } else if (v >= 4.0 * step && v < 5.0 * step) {\n        col = mix (col5, col6, (v - 4.0 * step) * steps);\n    } else if (v >= 5.0 * step && v < 6.0 * step) {\n        col = mix (col6, col7, (v - 5.0 * step) * steps);\n    } else if (v >= 6.0 * step && v < 7.0 * step) {\n        col = mix (col7, col8, (v - 6.0 * step) * steps);\n    } else if (v >= 7.0 * step && v < 8.0 * step) {\n        col = mix (col8, col9, (v - 7.0 * step) * steps);\n    } else if (v >= 8.0 * step && v < 9.0 * step) {\n        col = mix (col9, colA, (v - 8.0 * step) * steps);\n    }\n\n    return col;\n}\n\nvec2 noise2d (in vec2 p)\n{\n\tvec3 v = fract (p.xyx*vec3(123.34, 234.34, 345.65));\n\tv += dot (v, v + 34.45);\n\treturn fract (vec2 (v.x*v.y, v.y*v.z));\n}\n\nmat2 r2d (in float degree)\n{\n\tfloat rad = radians (degree);\n    float c = cos (rad);\n    float s = sin (rad);\n    return mat2 (c, s, -s, c);\n}\n\nfloat sdPlaneBufferA (in vec3 p, in float h)\n{\n    vec3 offset = vec3 (1.75, .0, 1.25);\n    float scale = .3;\n    float strength = .4;\n\n    float aspect = iChannelResolution[0].x/iChannelResolution[0].y;\n    p.x *= 1./aspect;\n    p += offset;\n\n    float d = strength*texture (iChannel0, scale*p.xz).r;\n\treturn length (p.y) - (h+d);\n}\n\nfloat sdPlaneBufferB (in vec3 p, in float h)\n{\n    vec3 offset = vec3 (1.75, .0, 1.25);\n    float scale = .3;\n    float strength = .3;\n\n    float aspect = iChannelResolution[1].x/iChannelResolution[1].y;\n    p.x *= 1./aspect;\n    p += offset;\n\n    float d = strength*texture (iChannel1, scale*p.xz).r;\n\treturn length (p.y) - (h+d);\n}\n\nfloat scene (in vec3 p)\n{\n    float ground = .0;\n\n    if (USE_SUBTLE_PATTERN) {\n\t    ground = sdPlaneBufferA (p, .0);\n    } else{\n\t\tground = sdPlaneBufferB (p, .0);\n    }\n\n\treturn ground;\n}\n\nfloat trace (in vec3 ro, in vec3 rd)\n{\n    float d = .0;\n    float t = .0;\n    for (int i = 0; i < MAX_ITER; ++i) {\n\t    vec3 p = ro + t*rd;\n        d = scene (p);\n        if (d < EPSILON) return t;\n        t += d*STEP_BIAS;\n    }\n\n    return t;\n}\n\nvec3 normal (in vec3 p, in float epsilon)\n{\n    vec2 e = vec2 (epsilon, .0);\n    float d = scene (p);\n\treturn normalize (vec3 (scene (p + e.xyy),\n                            scene (p + e.yxy),\n                            scene (p + e.yyx)) - d);\n}\n\nfloat shadow (in vec3 p, in vec3 n, in vec3 lPos) {\n    float lDist = distance (p, lPos);\n    vec3 lDir = normalize (lPos - p);\n    float dist = trace (p + .01*n, lDir);\n    return dist < lDist ? .1 : 1.;\n}\n\nfloat distriGGX (in vec3 N, in vec3 H, in float roughness)\n{\n    float a2     = roughness * roughness;\n    float NdotH  = max (dot (N, H), .0);\n    float NdotH2 = NdotH * NdotH;\n\n    float nom    = a2;\n    float denom  = (NdotH2 * (a2 - 1.) + 1.);\n    denom        = PI * denom * denom;\n\n    return nom / denom;\n}\n\nfloat geomSchlickGGX (in float NdotV, in float roughness)\n{\n    float nom   = NdotV;\n    float denom = NdotV * (1. - roughness) + roughness;\n\n    return nom / denom;\n}\n\nfloat geomSmith (in vec3 N, in vec3 V, in vec3 L, in float roughness)\n{\n    float NdotV = max (dot (N, V), .0);\n    float NdotL = max (dot (N, L), .0);\n    float ggx1 = geomSchlickGGX (NdotV, roughness);\n    float ggx2 = geomSchlickGGX (NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n\nvec3 fresnelSchlick (in float cosTheta, in vec3 F0, float roughness)\n{\n\treturn F0 + (max (F0, vec3(1. - roughness)) - F0) * pow (1. - cosTheta, 5.);\n}\n\nvec3 shade (in vec3 ro, in vec3 rd, in float d, in int dummy)\n{\n    vec3 p = ro + d * rd;\n    vec3 nor = normal (p, d*EPSILON);\n\n    // \"material\" hard-coded for the moment\n    vec3 albedo = vec3 (.9, .8, .7);\n\n    // this is a huge hack for the time being\n    vec2 uv = p.xz;\n    vec2 offset = vec2 (1.75, 1.25);\n    float scale = .3;\n    float aspect = iChannelResolution[0].x/iChannelResolution[0].y;\n    uv.x *= 1./aspect;\n    uv += offset;\n    float index = texture(iChannel0, scale*uv).a - 1.;\n    albedo *= gradient (index);\n    float metallic = .5 * (index / 10.);\n    float roughness = .25 * (index / 10.);\n\n    // lights hard-coded as well atm\n    vec3 lightColors[2];\n    lightColors[0] = 7.*vec3 (.5, .2, .1);\n    lightColors[1] = 5.*vec3 (.1, .3, .5);;\n\n    // two moving light-sources\n    vec3 lightPositions[2];\n    float c = cos (iTime);\n    float s = sin (iTime);\n    lightPositions[0] = vec3 (-.75*c, 1., -.1*s);\n    lightPositions[1] = vec3 (.75*c, .75, 1.*s);\n\n\tvec3 N = normalize (nor);\n    vec3 V = normalize (ro - p);\n\n    vec3 F0 = vec3 (.04);\n    F0 = mix (F0, albedo, metallic);\n    vec3 kD = vec3 (.0);\n\t           \n    // reflectance equation\n    vec3 Lo = vec3 (.0);\n    for (int i = 0; i < 2; ++i) \n    {\n        // calculate per-light radiance\n        vec3 L = normalize (lightPositions[i] - p);\n        vec3 H = normalize (V + L);\n        float dist = distance (p, lightPositions[i]);\n        float attenuation = 1./(dist*dist);\n        vec3 radiance = lightColors[i]*attenuation;\n        \n        // cook-torrance brdf\n        float aDirect = pow (roughness + 1., 2.);\n        float aIBL =  roughness * roughness;\n        float NDF = distriGGX (N, H, roughness);\n        float G = geomSmith (N, V, L, roughness);\n        vec3 F = fresnelSchlick (max (dot (H, V), .0), F0, roughness);\n\n        vec3 kS = F;\n        kD = vec3 (1.) - kS;\n        kD *= 1. - metallic;\n        \n        vec3 nominator = NDF * G * F;\n        float denominator = 4. * max (dot (N, V), .0) * max (dot (N, L), .0);\n        vec3 specular = nominator / max (denominator, .001);  \n\n        // add to outgoing radiance Lo\n        float NdotL = max (dot (N, L), .0);                \n        Lo += (kD*albedo/PI + specular)*radiance*NdotL;\n    }\n\n    vec3 ambient = kD * albedo;\n\n    return ambient + Lo;\n}\n\nvec3 camera (in vec2 uv, in vec3 ro, in vec3 aim, in float zoom)\n{\n    vec3 camForward = normalize (vec3 (aim - ro));\n    vec3 worldUp = vec3 (.0, 1., .0);\n    vec3 camRight = normalize (cross (camForward, worldUp));\n    vec3 camUp = normalize (cross (camRight, camForward));\n    vec3 camCenter = normalize (ro + camForward * zoom);\n\n    return normalize ((camCenter + uv.x*camRight + uv.y*camUp) - ro);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy*2. - 1.;\n\tfloat aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n\n    vec3 ro = vec3 (.0, 2.5, -1.5);\n    vec3 aim = vec3 (.0);\n    float zoom = 2.;\n    vec3 rd = camera (uv, ro, aim, zoom);\n\n    float d = trace (ro, rd);\n    vec3 p = ro + d*rd;\n    vec3 color = shade (ro, rd, d, 2);\n\n    color = color / (1. + color);\n    color = pow (color, vec3 (1./2.2));\n    fragColor = vec4 (color, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// here the subtle animated voronoi-pattern is created\n\nvec2 noise2d (in vec2 p)\n{\n\tvec3 v = fract (p.xyx*vec3(123.34, 234.34, 345.65));\n\tv += dot (v, v + 34.45);\n\treturn fract (vec2 (v.x*v.y, v.y*v.z));\n}\n\nmat2 r2d (in float degree)\n{\n\tfloat rad = radians (degree);\n    float c = cos (rad);\n    float s = sin (rad);\n    return mat2 (c, s, -s, c);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat time = iTime + 5.;\n\n    // normalize and aspect-correct UVs\n    vec2 uv = fragCoord/iResolution.xy*2. - 1.;\n    vec2 uvRaw = uv;\n\tfloat aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n\n    // rotate and move the canvas\n    uv *= r2d (12.*time);\n    uv += vec2 (.1*cos (time), .2*sin(time));\n\n    // cause the canvas to 'zoom'\n    float scale = 6. + 2.*(.5 + .5*cos(time));\n    uv *= scale;\n    float rowSize = scale *.5;\n\n    // split canvas up\n    vec2 gv = fract (uv) - .5;\n    vec2 id = floor (uv);\n\n    float cellIndex = .0; \n    float minDist = 2.;\n\n    // check only the adjacent grid-cells\n    for (float y = -1.; y <= 1.; ++y) {\n        for (float x = -1.; x <= 1.; ++x) {\n            vec2 offset = vec2 (x, y); \n            vec2 n = noise2d (id + offset);\n            vec2 p = offset + .5*vec2 (cos (1.*sin(.00125*time)*n.x*(time + 22.75)), sin (2.*cos(.002*time)*n.y*(time + 22.75)));\n            float d = dot (gv - p, gv - p);\n            if (d < minDist) {\n                minDist = d;\n                cellIndex = (id.y + y) * rowSize + (id.x + x); \n            }\n        }\n    }   \n\n    // 'color' cells in different styles\n    float brightColor = (1. - minDist)*(1. - minDist);\n    float darkColor = minDist*minDist;\n    float flatColor = abs (cellIndex) / (scale*scale);\n    float invertedFlatColor = 1. - flatColor;\n\n    // blend between the four different style-variations\n    float colorOne = mix (brightColor, darkColor, .25);\n    vec3 colorTwo = mix (vec3 (flatColor), vec3 (invertedFlatColor), .035);\n    vec3 colorFinal = mix (vec3 (colorOne), vec3 (colorTwo), .9);\n\n    // gamma-correct\n    colorFinal = pow (colorFinal, vec3 (1./2.2));\n\n    fragColor = vec4 (colorFinal, 1. + abs(cellIndex));\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// here the more busy animated voronoi-pattern is created\n\nvec2 noise2d (in vec2 p)\n{\n\tvec3 v = fract (p.xyx*vec3(123.34, 234.34, 345.65));\n\tv += dot (v, v + 34.45);\n\treturn fract (vec2 (v.x*v.y, v.y*v.z));\n}\n\nmat2 r2d (in float degree)\n{\n\tfloat rad = radians (degree);\n    float c = cos (rad);\n    float s = sin (rad);\n    return mat2 (c, s, -s, c);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat time = iTime + 3.;\n\n    // normalize and aspect-correct UVs\n    vec2 uv = fragCoord/iResolution.xy*2. - 1.;\n\tfloat aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n\n    // rotate and move the canvas\n    uv *= r2d (24.*time);\n    uv += vec2 (.2*cos (time), .3*sin(time));\n\n    // cause the canvas to 'zoom'\n    float scale = 3. + 3.*(.5 + .5*cos(time));\n    uv *= scale;\n    float rowSize = scale *.5;\n\n    // split canvas up\n    vec2 gv = fract (uv) - .5;\n    vec2 id = floor (uv);\n\n    float cellIndex = .0; \n    float minDist = 2.;\n\n    // check only the adjacent grid-cells\n    for (float y = -1.; y <= 1.; ++y) {\n        for (float x = -1.; x <= 1.; ++x) {\n            vec2 offset = vec2 (x, y); \n            vec2 n = noise2d (id + offset);\n            vec2 p = offset + .5*sin (n*(time + 22.75));\n            float d = dot (gv - p, gv - p);\n            if (d < minDist) {\n                minDist = d;\n                cellIndex = (id.y + y) * rowSize + (id.x + x); \n            }\n        }\n    }   \n\n    // 'color' cells in different styles\n    float brightColor = (1. - minDist)*(1. - minDist);\n    float darkColor = minDist*minDist;\n    float flatColor = abs (cellIndex) / (scale*scale);\n    float invertedFlatColor = 1. - flatColor;\n\n    // blend between the four different style-variations\n    float colorOne = mix (brightColor, darkColor, (.5 + .5*cos(1.75*time)));\n    float colorTwo = mix (flatColor, invertedFlatColor, (.5 + .5*cos(1.75*time)));\n    vec3 colorFinal = vec3 (mix (colorOne, colorTwo, .5 + .5*cos(.35*time)));\n\n    // tone-map, gamma-correct\n    //colorFinal = colorFinal / (1. + colorFinal);\n    colorFinal = pow (colorFinal, vec3 (1./2.2));\n\n    fragColor = vec4 (colorFinal, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}