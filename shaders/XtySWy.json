{
    "Shader": {
        "info": {
            "date": "1485563502",
            "description": "A rope consisting of two ropes (defined recursively) twisted in a spiral.\n\nUse mouse to stop and move around.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtySWy",
            "likes": 40,
            "name": "Spirals all the way down",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "spiral"
            ],
            "usePreview": 0,
            "username": "al13n",
            "viewed": 1208
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535897932384626433832795\n#define R .3\n#define S .2\n#define its 5\n\nvec3 color;\n\nfloat DE(vec3 p) {\n    float which0;\n    for (int i = 0; i < its; ++i) {\n        float r = length(p.xy)-1.;\n        float a = atan(p.y, p.x)/PI + fract((sqrt(float(i)+1.)-1.)*iTime/3.)*2.;\n        float t = p.z/(R*2.)-a+.5;\n        float z = floor(t)+a;\n        p = vec3(r,p.z-z*R*2., z)/S;\n        float which = step(.5, fract(t*.5));\n        if (i == 0) {\n            which0 = which;\n            color += vec3(1, 1, 1) * step(.95, fract(p.z/100.+which*.5-iTime/6.));\n        } else if (i == 1) {\n            color -= vec3(0,.5,.5)*which;\n            color.y = step(.5, fract(p.z/1.+iTime)) * (1.-which0);\n        } else if (i == 2) {\n            color -= vec3(.5,0,.5)*which*(1.-which0);\n        } else if (i == 3) {\n            color -= vec3(1,1,0)*which;\n        } else if (i == 4) {\n           color *= 1.+.5*which;\n        }\n    }\n    if (which0 > .5)\n        color = color.yzx;\n    return (length(p.xy)-1.)*pow(S,float(its));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord.xy - iResolution.xy*.5) / iResolution.y;\n    vec3 origin;\n    if (iMouse.z <= 0.)\n        origin = vec3(vec2(cos(iTime*1.1),sin(iTime*1.7)) * .4, fract(iTime/60.)*60.*2.);\n    else\n        origin = vec3((iMouse.xy-iMouse.zw) / iResolution.xy * 2., 0.);\n    float unit_pixsize = 1./(iResolution.x+iResolution.y);\n\n    vec3 direction = normalize(vec3(uv, 1));\n    \n    const float diameter = 1000.;\n    const int maxit = 50;\n    \n    vec3 p = origin;\n    int it = maxit;\n    for (int i = 1; i <= maxit; ++i) {\n        if (length(p - origin) > diameter) {\n            color = vec3(1,1,1);\n            it = i;\n            break;\n        }\n        color = vec3(1,1,1);\n        float d = DE(p);\n        float pixsize = unit_pixsize * distance(p, origin);\n        if (d < pixsize*.1) {\n            it = i;\n            break;\n        }\n        p += direction * d;\n    }\n\n    float t = 1. - float(it) / float(maxit);\n    fragColor = vec4(color*t,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}