{
    "Shader": {
        "info": {
            "date": "1694980539",
            "description": "forked from an earlier shader, and minimally modified mostly for my own amusement.\n\nOriginal shader illustrated what a bagel looked like after being sliced by two mobius strips.\n\nEnvironment map chosen to make the setting more holy.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Dd3cDH",
            "likes": 2,
            "name": "holy mobius donut",
            "published": 3,
            "tags": [
                "mobius",
                "slice",
                "bagel"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "const float max_dist = 10.0;\n\n\nfloat to_toroid_sdf(in vec3 pt) {\n  float to_toroid_spine = length(pt.xz) - 0.75;\n  float to_toroid = length(vec2(to_toroid_spine, pt.y)) - 0.25;\n  return to_toroid;\n}\n\nfloat sdf(in vec3 pt) {\n  float to_toroid_spine = length(pt.xz) - 0.75;\n  float to_toroid = length(vec2(to_toroid_spine, pt.y)) - 0.25;\n  float angle = atan(pt.x, pt.z);\n  vec2 p1 = vec2(sin(0.5 * angle), cos(0.5 *angle));\n  vec2 p2 = vec2(cos(0.5 * angle), -sin(0.5 *angle));\n  float d1 = dot(vec2(to_toroid_spine, pt.y), p1);\n  float d2 = dot(vec2(to_toroid_spine, pt.y), p2);\n  float max_angle_dist = min(max(d1, d2), max(-d1, -d2));\n  return max(to_toroid, max_angle_dist);\n}\n\nfloat sdf_other_side(in vec3 pt) {\n  float to_toroid_spine = length(pt.xz) - 0.75;\n  float to_toroid = length(vec2(to_toroid_spine, pt.y)) - 0.25;\n  float angle = atan(pt.x, pt.z);\n  vec2 p1 = vec2(sin(0.5 * angle), cos(0.5 *angle));\n  vec2 p2 = vec2(cos(0.5 * angle), -sin(0.5 *angle));\n  float d1 = dot(vec2(to_toroid_spine, pt.y), p1);\n  float d2 = dot(vec2(to_toroid_spine, pt.y), p2);\n  float max_angle_dist = min(max(-d1, d2), max(d1, -d2));\n  return max(to_toroid, max_angle_dist);\n}\n\nfloat rough_raycast(in vec3 orig, in vec3 dir) {\n  float accum = 0.0;\n  float d = to_toroid_sdf(orig);\n  for (int i = 0; i < 256; ++i) {\n    accum = accum + 0.9 * d;\n    vec3 pt = orig + accum * dir;\n    d = to_toroid_sdf(pt);\n    if (abs(d) < 1.0e-2) {\n      return accum;\n    }\n    if (d > max_dist) {\n      return max_dist + 1.0;\n    }\n  }\n  return accum;\n}\n\n\nfloat raycast(in vec3 orig, in vec3 dir, float start_guess) {\n  float accum = start_guess;\n  if (accum > max_dist) {\n    return accum;\n  }\n  float d = sdf(orig + accum * dir);\n  for (int i = 0; i < 256; ++i) {\n    accum = accum + 0.7 * d;\n    vec3 pt = orig + accum * dir;\n    d = sdf(pt);\n    if (abs(d) < 1.0e-6) {\n      return accum;\n    }\n    if (accum > max_dist) {\n      return max_dist + 1.0;\n    }\n  }\n  return accum;\n}\n\nfloat raycast_other_side(in vec3 orig, in vec3 dir, float start_guess) {\n  float accum = start_guess;\n  if (accum > max_dist) {\n    return accum;\n  }\n  float d = sdf_other_side(orig + dir * accum);\n  for (int i = 0; i < 256; ++i) {\n    accum = accum + 0.7 * d;\n    vec3 pt = orig + accum * dir;\n    d = sdf_other_side(pt);\n    if (d < 1.0e-6) {\n      return accum;\n    }\n    if (d > max_dist) {\n      return max_dist + 1.0;\n    }\n  }\n  return accum;\n}\n\n\nvec3 get_norm(in vec3 pt) {\n  float f = sdf(pt);\n  const float h = 1.0e-3;\n  return normalize(vec3(sdf(pt + vec3(h, 0.0, 0.0)) - f,\n                        sdf(pt + vec3(0.0, h, 0.0)) - f,\n                        sdf(pt + vec3(0.0, 0.0, h)) - f));\n}\n\nvec3 get_norm_other_side(in vec3 pt) {\n  float f = sdf_other_side(pt);\n  const float h = 1.0e-3;\n  return normalize(vec3(sdf_other_side(pt + vec3(h, 0.0, 0.0)) - f,\n                        sdf_other_side(pt + vec3(0.0, h, 0.0)) - f,\n                        sdf_other_side(pt + vec3(0.0, 0.0, h)) - f));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float uv_scale = min(iResolution.x, iResolution.y);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / uv_scale;\n    \n    vec3 orig = vec3(0.0, 0.0, -1.5);\n    vec3 ray = normalize(2.0 * vec3(uv, 0) - orig);\n    \n    float theta_tilt = 2.0 * iMouse.y / iResolution.y - 1.0;\n    theta_tilt *= 3.141592654 * 0.5;\n    float ct = cos(theta_tilt);\n    float st = sin(theta_tilt);\n    mat3 tilt = mat3(1.0, 0.0, 0.0,\n                       0.0, ct, -st,\n                       0.0, st, ct);\n    \n    float phi_yaw = 3.0 * 3.141592654 * (2.0 * iMouse.x / iResolution.x - 1.0);\n    float cp = cos(phi_yaw);\n    float sp = sin(phi_yaw);\n    mat3 yaw = mat3(cp, 0.0, -sp,\n                    0.0, 1.0, 0.0,\n                    sp, 0.0, cp);\n    orig = yaw * tilt * orig;\n    ray = yaw * tilt * ray;\n    \n    float bright = 0.95;\n    \n    vec3 overlay = vec3(0.5);\n    \n    vec3 col = vec3(0.0);\n    \n    float start_guess = rough_raycast(orig, ray);\n\n    float dist = raycast(orig, ray, start_guess);\n    if (dist < max_dist) {\n      overlay = vec3(0.0);\n      vec3 n = get_norm(orig + dist * ray);\n      // pixel color\n      vec3 bounce = normalize(reflect(ray, n));\n      col = smoothstep(vec3(0.0), vec3(1.0), texture(iChannel1, bounce).rgb) + 0.2 * bounce;\n      bright = 1.0;\n    } else {\n      col = texture(iChannel0, normalize(ray)).rgb;\n      bright = 0.5;\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(bright * col + overlay,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}