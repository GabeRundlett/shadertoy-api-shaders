{
    "Shader": {
        "info": {
            "date": "1666368396",
            "description": "    not so dumb feedback shader..idea from @spalmer for time, and using a bayer texture\n    for dithering @Fabrice",
            "flags": 32,
            "hasliked": 0,
            "id": "dslGzS",
            "likes": 17,
            "name": "Not So Dumb Feedback Shader",
            "published": 3,
            "tags": [
                "notsodumbfeedbackshader"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 292
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    not so dumb feedback shader.. now with new idea from @spalmer for using time, and \n    from @Fabrice using a bayer texture for dithering.\n    \n    10/21/22 @byt3_m3chanic \n*/\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\nfloat box( in vec2 p, in vec2 b ){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nvoid mainImage( out vec4 O, in vec2 F )\n{\n\n    vec3 C = vec3(0);\n    vec2 uv = F.xy/R.xy;\n    \n    vec2 cuv = (2.* F.xy-R.xy)/max(R.x,R.y);\n    C = texture(iChannel0,uv).rgb; \n    float px = 2./R.x;\n    \n\n    float d= max(box(cuv,vec2(.95,.51)),-box(cuv,vec2(.93,.49)));\n    d=smoothstep(px,-px,d);\n    \n    C = mix(C,vec3(1),d);\n    \n    C = pow(C, vec3(.4545));\n    O = vec4(C,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    not so dumb feedback shader.. now with new idea from @spalmer for using time, and \n    from @Fabrice using a bayer texture for dithering.\n    \n    10/21/22 @byt3_m3chanic \n*/\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI2 6.28318530718\n#define PI  3.14159265359\n\nfloat time;\nconst float scale = 3.;\n\nmat2 rot(float g) {return mat2(cos(g), sin(g),-sin(g), cos(g));}\nfloat hash21( vec2 p ) {return fract(sin(dot(p,vec2(23.43,84.21)))*4832.3234);}\n\nvec3 hue(float t){ \n    const vec3 c = vec3(0.902,0.878,0.820);\n    return .4 + .4*cos(PI2*t*(c+vec3(0.000,0.475,0.839))); \n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n\n    //@Fabrice\n    time =  texture(iChannel1,F/8.).r * iTimeDelta;\n    \n    vec2 uv = (2.* F.xy-R.xy)/max(R.x,R.y);\n    vec2 vuv = uv;\n    \n    // comment out for alt version\n    uv*=rot(-T*.07);\n    \n    //@spalmer\n    vec3 C = texture(iChannel0,(F.xy/R.xy)).rgb*exp2(-2.*time);\n    \n    uv.y-=1.25+1.*sin(T*.075);\n    uv.x-=.25*cos((T*.5)+1.*sin(T*.05));\n    \n    float px = scale/R.x;\n\n    vec2 id= floor(uv*scale);\n    vec2 p = fract(uv*scale)-.5;\n    \n    \n    float hf = hash21(id);\n    float sc = 1.;\n    float xk = .02;\n    if(hf>.5){\n        id= floor(p+id*2.);\n        p = fract(p*2.)-.5;\n        hf = hash21(id);\n        px = scale*2./R.x;\n        xk = .03;\n        sc *= hf;\n        if(hf>.375){\n            id= floor(p+id*2.);\n            p = fract(p*2.)-.5;\n            hf = hash21(id);\n            px = scale*4./R.x;\n            xk = .04;\n            sc = hf;\n            if(hf>.75){\n                id= floor(p+id*2.);\n                p = fract(p*2.)-.5;\n                hf = hash21(id);\n                px = scale*8./R.x;\n                xk = .05;\n                sc = hf;\n            }\n        }\n    }\n\n    float xf = .22+.1*sin((T*hf)*1.5);\n    float d1 = length(p)-(sc*(xf-xk));\n    d1=smoothstep(px,-px,abs(d1)-xk);\n\n    float ff = vuv.y*.075;\n    vec3 clr=mix(hue((ff*PI)+T*.05),hue(((1.-ff)*PI)+T*.025),ff);\n    C = mix(C,hf>.6?clr:hf>.45?vec3(.1):vec3(.03),d1);\n\n    O = vec4(C,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}