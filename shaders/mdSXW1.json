{
    "Shader": {
        "info": {
            "date": "1686718126",
            "description": "Experimenting with beats.",
            "flags": 8,
            "hasliked": 0,
            "id": "mdSXW1",
            "likes": 9,
            "name": "Sound Experiment #7",
            "published": 3,
            "tags": [
                "sound",
                "beat",
                "experiment"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 493
        },
        "renderpass": [
            {
                "code": "// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 uv, in vec2 pos, in vec2 size, in int char) {\n    uv = (uv - pos) / size + 0.5;\n    vec2 charUv = uv / 16.0;\n    vec2 dfdx = dFdx(charUv);\n    vec2 dfdy = dFdy(charUv);\n    if (all(lessThan(abs(uv - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel0, charUv + fract(vec2(char, 15 - char / 16) / 16.0), dfdx, dfdy).r;\n        color = mix(color, charColor, val);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Default shader\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0));\n\n    // Aspect correct, centered UVs and 2 pixel AA width for soft edges\n    uv = fragCoord / iResolution.y - vec2(0.0, 0.5);\n    float unit = 2.0 / iResolution.y;\n\n    // Graph sound wave (MUCH slower than actual speed)\n    float x = mod(0.02 * (uv.x + 2.0 * iTime), 11.0);\n    float graphDist = abs(uv.y - 0.5 * makeNoise(x));\n    float slope = 0.02 * (makeNoise(x + 0.0001) - makeNoise(x - 0.0001)) / 0.0002;\n    graphDist /= sqrt(slope * slope + 1.0);\n    graphDist += 0.0025;\n\n    color = mix(color, vec3(0.0), smoothstep(unit, 0.0, graphDist));\n\n    fragColor = vec4(color, 1.0);\n\n    // Uncenter\n    uv += vec2(0.0, 0.5);\n\n    // \"Sound In\" notification\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.3, 0.3), vec2(0.1), 83); // S\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.4, 0.3), vec2(0.1), 79); // O\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.5, 0.3), vec2(0.1), 85); // U\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.6, 0.3), vec2(0.1), 78); // N\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.7, 0.3), vec2(0.1), 68); // D\n\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.9, 0.3), vec2(0.1), 73); // I\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(1.0, 0.3), vec2(0.1), 78); // N\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TAU 6.2831853072\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float p) {\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat sine(in float t) {\n    return sin(TAU * t);\n}\n\nfloat triangle(in float t) {\n    return abs(mod(4.0 * t - 1.0, 4.0) - 2.0) - 1.0;\n}\n\nfloat square(in float t) {\n    return 1.0 - 2.0 * mod(floor(2.0 * t), 2.0);\n}\n\nfloat makeNoise(in float time) {\n    float sound = 0.0;\n\n    time = mod(4.5 * time, 2.0);\n    if (time < 1.0) {\n        vec2 atk = vec2(0.06, 1.0);\n        vec2 dec = vec2(0.03, 0.5);\n        vec2 sus = vec2(0.15, 0.5);\n        vec2 rel = vec2(0.09, 0.0); \n\n        float envelope = 0.0;\n        float t1 = time;\n        float t2 = t1 - atk.x;\n        float t3 = t2 - dec.x;\n        float t4 = t3 - sus.x;\n        float t5 = t4 - rel.x;\n        if (t1 < atk.x) envelope = t1 / atk.x * atk.y;\n        else if (t2 < dec.x) envelope = t2 / dec.x * (dec.y - atk.y) + atk.y;\n        else if (t3 < sus.x) envelope = t3 / sus.x * (sus.y - dec.y) + dec.y;\n        else if (t4 < rel.x) envelope = t4 / rel.x * (rel.y - sus.y) + sus.y;\n\n        float waveform = sine(11.0 * time);\n        sound += waveform * envelope;\n    }\n\n    else if (time < 2.0) {\n        time -= 1.0;\n\n        vec2 atk = vec2(0.04, 1.0);\n        vec2 dec = vec2(0.02, 0.5);\n        vec2 sus = vec2(0.1, 0.5);\n        vec2 rel = vec2(0.06, 0.0); \n\n        float envelope = 0.0;\n        float t1 = mod(time, 0.45);\n        float t2 = t1 - atk.x;\n        float t3 = t2 - dec.x;\n        float t4 = t3 - sus.x;\n        float t5 = t4 - rel.x;\n        if (t1 < atk.x) envelope = t1 / atk.x * atk.y;\n        else if (t2 < dec.x) envelope = t2 / dec.x * (dec.y - atk.y) + atk.y;\n        else if (t3 < sus.x) envelope = t3 / sus.x * (sus.y - dec.y) + dec.y;\n        else if (t4 < rel.x) envelope = t4 / rel.x * (rel.y - sus.y) + sus.y;\n\n        float waveform = triangle(11.0 * time);\n        sound += waveform * envelope;\n    }\n\n    return sound;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound(in int samp, in float time) {\n    return vec2(makeNoise(float(samp % (12 * int(iSampleRate))) / iSampleRate));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}