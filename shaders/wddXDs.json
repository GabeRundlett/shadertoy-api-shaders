{
    "Shader": {
        "info": {
            "date": "1573175134",
            "description": "Forked from lesleylai on 2019-11-07\nhttps://www.shadertoy.com/view/tscXDX\n\nForked ray marching code from https://www.shadertoy.com/view/4tcGDr\n\nTry to render image space profile edges with only:\n//* Depth info\n* Deferred rendering info",
            "flags": 32,
            "hasliked": 0,
            "id": "wddXDs",
            "likes": 2,
            "name": "Copy of Profile Edge Experiment",
            "published": 3,
            "tags": [
                "experiment",
                "learning"
            ],
            "usePreview": 0,
            "username": "Gunbara",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "// Algorithms from https://www.cs.princeton.edu/courses/archive/fall00/cs597b/papers/saito90.pdf\n\n/*float Scale = 3.;\nvec4 OutlineColor = vec4(0., 1., 0., 1.);\n\n\n#define INDEX(x, y) ((x) * 5 + (y))\n\nfloat sobel(float depth[25], int centerI, int CenterJ) {\n    float A = depth[INDEX(centerI - 1, CenterJ - 1)];\n    float B = depth[INDEX(centerI - 1, CenterJ)];\n    float C = depth[INDEX(centerI - 1, CenterJ + 1)];\n    float D = depth[INDEX(centerI, CenterJ - 1)];\n    float x = depth[INDEX(centerI, CenterJ)];\n    float E = depth[INDEX(centerI, CenterJ + 1)];\n    float F = depth[INDEX(centerI + 1, CenterJ - 1)];\n    float G = depth[INDEX(centerI + 1,CenterJ)];\n    float H = depth[INDEX(centerI + 1, CenterJ + 1)];\n    \n    // Discontinuity of the first order using Sobel\n    float gx = -A + C - 2.0 * D + 2.0 * E - F + H;\n    float gy = A + 2.0 * B + C - F - 2.0 * G - H;\n    return sqrt(pow(gx, 2.) + pow(gy, 2.));\n}\n\nfloat minElem(float array[9]) {\n    float ret = array[0];\n    for (int i = 1; i < 9; ++i) {\n        ret = min(ret, array[1]);\n    }\n    return ret;\n}\n\nfloat maxElem(float array[9]) {\n    float ret = array[0];\n    for (int i = 1; i < 9; ++i) {\n        ret = max(ret, array[1]);\n    }\n    return ret;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // A 5x5 matrix for depth information of this fragment and nearby fragments\n    // (depth[Index(2, 2)]) is the current pixel\n    // Note: In a \"real\" shader: need to account for the none-linearity and projection of depth\n    float depth[25];\n    for (int i = 0; i < 5; ++i) {\n        for (int j = 0; j < 5; ++j) {\n            depth[INDEX(i, j)] = logDepth(fragCoord + vec2(i-2, j-2)*Scale/2.0);\n        }\n    }\n\n    float gs[9];\n    for (int i = 0; i < 3; ++i) {\n        for (int j = 0; j < 3; ++j) {\n        \tgs[j + 3 * i] = sobel(depth, i + 1, j + 1);\n    \t}\n    }\n    float gMin = minElem(gs);\n    float gMax = maxElem(gs);\n    float g = gs[4];\n    \n    const float kG = 0.05;\n    const float firstOrderDepthThreshold = 0.5;\n\n    float p;\n    if (gMax - gMin > kG) {\n        p = (g - gMin) / (gMax - gMin);\n    } else {\n        p = (g - gMin) / kG;\n    }\n\n\tfloat edge = (p > firstOrderDepthThreshold) || (g > 0.1) ? 1. : 0.;\n    vec4 edgeColor = vec4(OutlineColor.rgb, OutlineColor.a * edge);\n\n    // Output to screen\n    //fragColor = vec4(mix(color(fragCoord), edgeColor.rgb, edgeColor.a), 1.0);\n    fragColor.g = edgeColor.a;  // profileness\n} // */\n\n\n////////////////////\n\nfloat depth(vec2 fragCoord) {\n    return pow(MAX_DIST, logDepth(fragCoord));\n}\n\n// Sadly, the XOR operator (^) doesn't exist here:\n//\t'^' : wrong operand types - no operation '^' exists that takes a left-hand operand of type 'in bool' and a right operand of type 'in bool' (or there is no acceptable conversion)\nbool logicalXOR(bool a, bool b) {\n    return (a && !b) || (!a && b);\n}\nbool logicalXOR(bool a, bool b, bool c) {\n    return logicalXOR(a, logicalXOR(b,c));\n}\nbool logicalXOR(bool a, bool b, bool c, bool d) {\n    return logicalXOR(a, logicalXOR(b,c,d));\n}\n\nfloat profileness(vec2 fragCoord) {\n    vec3 eyePos = getEyePos(iTime);\n    \n    //float p1Depth = depth(fragCoord);\n    vec3 p1Norm = surfNorm(fragCoord);\n    vec3 p1Pos = worldPos(fragCoord);\n\t/*vec3 p1ViewDir = normalize(p1Pos - p1Pos);\n    float p1CosAngleViewToSurface = dot(p1Norm, -p1ViewDir);  // both vectors are already normalized\n    if (p1CosAngleViewToSurface < cos(radians(80.0))) {\n        // consider it steep enough to just be an edge\n        return 1.0;\n    } // */\n    \n    // Distance along normal from origin to the plane containing each position\n    // Technically each of these needs to be divided by the length of the normal but that's already 1\n    //float p1Norm_distToP1     = dot(p1Norm, p1Pos);\n    //float p1Norm_distToEyePos = dot(p1Norm, eyePos);\n    \n\t// Distance along normal from the plane containing p1Pos to each other position\n    // Technically each of these needs to be divided by the length of the normal but that's already 1\n    float p1Plane_distToEyePos = dot(p1Norm, eyePos-p1Pos);\n    \n\tconst int s = 1;  // search size\n    for (int y = -s; y < s; ++y) { for (int x = -s; x < s; ++x) {\n        if (x == 0 && y == 0) {continue;}\n        vec2 neighborCoord = fragCoord + vec2(x,y);\n        \n        //float p2Depth = depth(neighborCoord);\n        vec3 p2Norm = surfNorm(neighborCoord);\n        vec3 p2Pos = worldPos(neighborCoord);\n    \n        // Distance along normal from origin to the plane containing each position\n        // Technically each of these needs to be divided by the length of the normal but that's already 1\n        //float p1Norm_distToP2     = dot(p1Norm, p2Pos);\n        //float p2Norm_distToP1     = dot(p2Norm, p1Pos);\n        //float p2Norm_distToP2     = dot(p2Norm, p2Pos);\n        //float p2Norm_distToEyePos = dot(p2Norm, eyePos);\n        \n        // Distance along normal from the plane containing p2Pos to each other position\n    \t// Technically each of these needs to be divided by the length of the normal but that's already 1\n        float p1Plane_distToP2     = dot(p1Norm, p2Pos-p1Pos);\n        float p2Plane_distToP1     = dot(p2Norm, p1Pos-p2Pos);\n    \tfloat p2Plane_distToEyePos = dot(p2Norm, eyePos-p2Pos);\n        \n        // General idea:\n        //   If the intersection of the planes at each point happens\n        //   between pixels as viewed from the eye point, then assume that\n        //   they are probably part of a continous (possibly curved) surface\n        //   between them.\n        //   Otherwise, assume they are discontinous and are therefore are\n        //   part of a profile edge.  It's possible that there is actually\n        //   a single surface with a very steep and short \"S\" between them\n        //   but if that's the case, then it's probably steep enough to call\n        //   it an edge anyways.\n        //\n        //   We can check if the plane intersection happens between the 2\n        //   pixels by checking which side of each plane the eye position\n        //   and opposite point are on.\n        //   In fact, the intersection is at:\n        //       p1Norm... TODO\n        //\n        //   Given:\n        //       p1P = <is point 2 above plane 1>\n        //       p1E = <is the eye point above plane 1>\n        //       p2P = <is point 1 above plane 2>\n        //       p2E = <is the eye point above plane 2>\n        //   If  p1P &  p1E &  p2P &  p2E: planes crossing, convex towards user\n        //   If !p1P & !p1E & !p2P & !p2E: planes crossing, convex towards user\n        //   If ...\n        //   In short, <isProfileEdge> = p1P^p1E^p2P^p2E\n\n        // Filter false positives due to numerical & marching precision errors\n        if (false\n            || (abs(p1Plane_distToP2 - p2Plane_distToP1) < EPSILON/2.0)\n            || (abs(p1Plane_distToP2 + p2Plane_distToP1) < EPSILON/2.0)\n        //    || (abs(p2Plane_distToP1 - p2Plane_distToEyePos) < EPSILON/2.0)\n        //    || (abs(p1Plane_distToP2 - p1Plane_distToEyePos) < EPSILON/2.0)\n            || (abs(length(eyePos-p1Pos) * p2Plane_distToP1 / (p2Plane_distToP1 - p2Plane_distToEyePos)) < EPSILON/0.5)\n            || (abs(length(eyePos-p2Pos) * p1Plane_distToP2 / (p1Plane_distToP2 - p1Plane_distToEyePos)) < EPSILON/0.5)\n            //(1.0 - dot(p1Norm,p2Norm) >\n        ) {\n            // There probably isn't enough numerical precision to be accurate\n            // Likely because both normals are fairly parallel\n            // The ray marching/SDF process itself also adds precision artifacts\n        //return 1.0;\n            continue;\n        } // */\n\n        //   Sort of a hack: use signed multiplication for the XOR\n        //   Unfortunately, numerical precision seems to be too big of an issue to use this\n/*        float aboveBelowXOR = p1Plane_distToEyePos * p1Plane_distToP2\n            * p2Plane_distToEyePos * p2Plane_distToP1;\n        if (aboveBelowXOR > 0.0 + 2.0*EPSILON) {\n            return 1.0;\n        } // */\n        // Numerical precision seems better with this but this alone still has a bunch of artifacts\n        if (logicalXOR(\n            (p1Plane_distToEyePos > 0.0),\n            (p1Plane_distToP2 > 0.0),\n            (p2Plane_distToEyePos > 0.0),\n            (p2Plane_distToP1 > 0.0)\n        )) {\n            return 1.0;\n            \n            // The sign here is kinda arbitrary - it depends on which order the neighboring pixels are processed in the loop\n            if (depth(fragCoord) > depth(neighborCoord)) {\n                return 1.0;\n            } else {\n                return 0.0;\n            }\n        } // */\n    }}\n    return 0.5;\n}\n\n\n////////////////////\n\nfloat avgDepthDelta(vec2 fragCoord) {\n    return depth(fragCoord) - (0.0\n        + depth(fragCoord+vec2(-1,-1))\n        + depth(fragCoord+vec2( 0,-1))\n        + depth(fragCoord+vec2( 1,-1))\n        + depth(fragCoord+vec2( 1, 0))\n        + depth(fragCoord+vec2( 1, 1))\n        + depth(fragCoord+vec2( 0, 1))\n        + depth(fragCoord+vec2(-1, 1))\n        + depth(fragCoord+vec2(-1, 0))\n    )/8.0;\n}\n\n\n////////////////////\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    //fragColor.rb = vec2((logDepth(fragCoord)-0.47) / 0.11);  // semi-arbitrary depth scaling to be easier to see (MIN_DIST = 0.0, MAX_DIST = 100.0)\n    //fragColor.rb = vec2((logDepth(fragCoord)-0.65) / 0.22);  // semi-arbitrary depth scaling to be easier to see (MIN_DIST = 0.0, MAX_DIST = 20.0)\n/*    fragColor.rb = vec2((depth(fragCoord)-7.5) / 6.00);  // semi-arbitrary depth scaling to be easier to see (MIN_DIST = 0.0, MAX_DIST = 20.0)\n    fragColor.g = profileness(fragCoord);\n    if (depth(fragCoord) >= MAX_DIST-EPSILON) {\n        fragColor.rb = vec2(0.0);\n    } // */\n    \n    fragColor.rgb = color(fragCoord) / 2.0;\n    //fragColor.rgb += vec3(profileness(fragCoord)) / 2.0;\n    if      (profileness(fragCoord) <= 0.0) {fragColor = vec4(1.0, 0.0, 1.0, 0.0);}\n    else if (profileness(fragCoord) >= 1.0) {fragColor = vec4(0.0, 1.0, 0.0, 0.0);} // */\n    \n    \t// sanity check: does the depth match the distance between the eye point and the fragment's point?\n    \t//fragColor.rgb = vec3(0.5 + 32768.0*(depth(fragCoord) - length(getEyePos(iTime) - worldPos(fragCoord))));\n\n    \t//fragColor.rgb = vec3(0.5) + worldPos(fragCoord) / (2.7*2.0);  // scaled to be easier to see the shape (2.7 is the exact max distance away from the origin in any direction)\n    \t//fragColor.rgb = vec3(0.5) + surfNorm(fragCoord)/2.0;\n    \t//fragColor.rgb = color(fragCoord);\n    \t\t//fragColor.rg=vec2(0.0);\n\n    \t//fragColor = vec4(0.5 + avgDepthDelta(fragCoord) / 0.1);  // scaled to be easier to see very fine gradients\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int MAX_MARCHING_STEPS = 255;\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection, iTime);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec3 viewDir = rayDirection(45.0+15.0, iResolution.xy, fragCoord);\n    vec3 eye = getEyePos(iTime);\n    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = viewToWorld * viewDir;  // Note that this is already normalized\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    float logDepthVal = log(dist) / log(MAX_DIST);\n    \n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 worldspaceSurfacePos = eye + dist * worldDir;\n    \n    fragColor = vec4(worldspaceSurfacePos, logDepthVal);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\n * Part 6 Challenges:\n * - Make a scene of your own! Try to use the rotation transforms, the CSG primitives,\n *   and the geometric primitives. Remember you can use vector subtraction for translation,\n *   and component-wise vector multiplication for scaling.\n */\n\n#define D_channelVal(D_channel, D_pos) texture(D_channel, (D_pos)/iResolution.xy)\n//#define D_channelVal(D_channel, D_pos) texture(D_channel, (floor(D_pos/8.0)) / (iResolution.xy/8.0))\n#define worldPos(D_pos) D_channelVal(iChannel0, D_pos).rgb\n#define logDepth(D_pos) D_channelVal(iChannel0, D_pos).a\n#define surfNorm(D_pos) D_channelVal(iChannel1, D_pos).rgb\n#define color(D_pos)    D_channelVal(iChannel2, D_pos).rgb\n\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 20.0;\nconst float EPSILON = 1.0e-4; //0.0001;\n\n/**\n * Rotation matrix around the X axis.\n */\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n/**\n * Rotation matrix around the Z axis.\n */\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n/**\n * Constructive solid geometry intersection operation on SDF-calculated distances.\n */\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\n/**\n * Constructive solid geometry union operation on SDF-calculated distances.\n */\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\n/**\n * Constructive solid geometry difference operation (A-B) on SDF-calculated distances.\n */\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n/**\n * Signed distance function for a cube centered at the origin\n * with dimensions specified by size (size is like diameter not radius).\n */\nfloat boxSDF(vec3 p, vec3 size) {\n    vec3 d = abs(p) - (size / 2.0);\n    \n    // Assuming p is inside the cube, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n    \n    // Assuming p is outside the cube, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(d, 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\n/**\n * Signed distance function for a sphere centered at the origin with radius r.\n */\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\n/**\n * Signed distance function for a Z aligned cylinder centered at the origin with\n * height h and radius r.\n * (h is like diameter not radius)\n */\nfloat cylinderSDF(vec3 p, float h, float r) {\n    // How far inside or outside the cylinder the point is, radially\n    float inOutRadius = length(p.xy) - r;\n    \n    // How far inside or outside the cylinder is, axially aligned with the cylinder\n    float inOutHeight = abs(p.z) - h/2.0;\n    \n    // Assuming p is inside the cylinder, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(inOutRadius, inOutHeight), 0.0);\n\n    // Assuming p is outside the cylinder, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(vec2(inOutRadius, inOutHeight), 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\nfloat sceneSDF(vec3 samplePoint\n    , float iTime  // Why oh why doesn't ShaderToy just make this global var accessible to common like it does for everything else?\n) {\n    // Slowly spin the whole scene\n    samplePoint = rotateY(iTime / 12.0) * samplePoint;\n    \n    float totalDistVal;  // total signed distance value\n    \n    // CSG Nut (See https://en.wikipedia.org/wiki/Constructive_solid_geometry)\n    {\n        float cylinderRadius = 0.4 + (1.0 - 0.4) * (1.0 + sin(1.7 * iTime)) / 2.0;\n        float cylinder1 = cylinderSDF(                         samplePoint, 2.0, cylinderRadius);\n        float cylinder2 = cylinderSDF(rotateX(radians(90.0)) * samplePoint, 2.0, cylinderRadius);\n        float cylinder3 = cylinderSDF(rotateY(radians(90.0)) * samplePoint, 2.0, cylinderRadius);\n    \n        float cube = boxSDF(samplePoint, vec3(1.8, 1.8, 1.8));\n    \n        float sphere = sphereSDF(samplePoint, 1.2);\n    \n    \tfloat csgNut = differenceSDF(\n            intersectSDF(cube, sphere),  // cube & sphere are the outer extents of the main shape\n            unionSDF(cylinder1, unionSDF(cylinder2, cylinder3))  // cut out the cylinder shapes\n        );\n        \n        totalDistVal = csgNut;\n    }\n\n\t// floaty balls\n    {\n        float ballOffset = 0.4 + 1.0 + sin(1.7 * iTime);\n        float ballRadius = 0.3;\n        float balls =           sphereSDF(samplePoint - vec3(ballOffset, 0.0, 0.0), ballRadius);\n        balls = unionSDF(balls, sphereSDF(samplePoint + vec3(ballOffset, 0.0, 0.0), ballRadius));\n        balls = unionSDF(balls, sphereSDF(samplePoint - vec3(0.0, ballOffset, 0.0), ballRadius));\n        balls = unionSDF(balls, sphereSDF(samplePoint + vec3(0.0, ballOffset, 0.0), ballRadius));\n        balls = unionSDF(balls, sphereSDF(samplePoint - vec3(0.0, 0.0, ballOffset), ballRadius));\n        balls = unionSDF(balls, sphereSDF(samplePoint + vec3(0.0, 0.0, ballOffset), ballRadius));\n        \n        totalDistVal = unionSDF(totalDistVal, balls);\n    }\n    \n    // Add an outer sphere to try to find the final extents\n/*    totalDistVal = unionSDF(\n        totalDistVal,\n        sphereSDF(samplePoint, (0.4+1.0+1.0+0.3)*0.99 + 0.0*0.9)\n    ); // */\n/*    totalDistVal = unionSDF(\n        totalDistVal,\n        sphereSDF(samplePoint, 2.0)\n    ); // */\n    \n    // Add some thin axis aligned cylinders\n    {\n        float cylinderRadius = 0.1;\n        float cylinderLength = 2.0 * ((0.4+1.0+1.0+0.3)*0.99 + 0.0*0.9);\n        totalDistVal = unionSDF(totalDistVal\n            , cylinderSDF(                         samplePoint, cylinderLength, cylinderRadius)\n        );\n\t\ttotalDistVal = unionSDF(totalDistVal\n            , cylinderSDF(rotateX(radians(45.0)) * samplePoint, cylinderLength, cylinderRadius)\n        );\n\t\ttotalDistVal = unionSDF(totalDistVal\n            , cylinderSDF(rotateX(radians(90.0)) * samplePoint, cylinderLength, cylinderRadius)\n        );\n\t\ttotalDistVal = unionSDF(totalDistVal\n            , cylinderSDF(rotateX(radians(135.0)) * samplePoint, cylinderLength, cylinderRadius)\n        );\n\t\ttotalDistVal = unionSDF(totalDistVal\n            , cylinderSDF(rotateY(radians(45.0)) * samplePoint, cylinderLength, cylinderRadius)\n        );\n\t\ttotalDistVal = unionSDF(totalDistVal\n            , cylinderSDF(rotateY(radians(90.0)) * samplePoint, cylinderLength, cylinderRadius)\n        );\n\t\ttotalDistVal = unionSDF(totalDistVal\n            , cylinderSDF(rotateY(radians(135.0)) * samplePoint, cylinderLength, cylinderRadius)\n        );\n\t\ttotalDistVal = unionSDF(totalDistVal\n            , cylinderSDF(rotateX(radians(90.0)) * rotateZ(radians(45.0)) * samplePoint, cylinderLength, cylinderRadius)\n        );\n\t\ttotalDistVal = unionSDF(totalDistVal\n            , cylinderSDF(rotateX(radians(90.0)) * rotateZ(radians(135.0)) * samplePoint, cylinderLength, cylinderRadius)\n        );\n    }\n\n\treturn totalDistVal;\n}\n\n\nvec3 getEyePos(\n    float iTime  // Why oh why doesn't ShaderToy just make this global var accessible to common like it does for everything else?\n) {\n    return vec3(8.0, 5.0 * sin(0.2 * iTime), 7.0);\n    //return vec3(0.0, 5.0 * sin(0.2 * iTime), 10.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z), iTime) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z), iTime),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z), iTime) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z), iTime),\n        sceneSDF(vec3(p.x, p.y, p.z + EPSILON), iTime) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON), iTime)\n    ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(\n        estimateNormal(worldPos(fragCoord)),\n        0.0  // unused val\n    );\n    if (logDepth(fragCoord) >= 1.0-EPSILON) {\n        fragColor = vec4(\n            //1.0, 0.0, 0.0,\n            -normalize(worldPos(fragCoord) - getEyePos(iTime)),  // point directly at the eye\n            0.0  // unused val\n        );\n    } // */\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * shininess: Shininess coefficient\n * p: position of point being lit\n * normal: normal vector of the point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(\n    vec3 k_d, vec3 k_s, float shininess,\n    vec3 p, vec3 normal, vec3 eye,\n    vec3 lightPos, vec3 lightIntensity\n) {\n    vec3 N = normal;\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, shininess));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * shininess: Shininess coefficient\n * p: position of point being lit\n * normal: normal vector of the point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(\n    vec3 k_a, vec3 k_d, vec3 k_s, float shininess,\n    vec3 p, vec3 normal, vec3 eye\n) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    color += phongContribForLight(k_d, k_s, shininess, p, normal, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    color += phongContribForLight(k_d, k_s, shininess, p, normal, eye,\n                                  light2Pos,\n                                  light2Intensity);\n    \n    vec3 light3Pos = vec3(0);\n    vec3 light3Intensity = vec3(0.4, 0.4, 0.4);\n    color += phongContribForLight(k_d, k_s, shininess, p, normal, eye,\n                                  light3Pos,\n                                  light3Intensity);\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 eye = getEyePos(iTime);\n    \n    // Use the surface normal as the ambient color of the material\n    vec3 k_a = (surfNorm(fragCoord) + vec3(1.0)) / 2.0;  // material's ambient color\n    vec3 k_d = k_a;  // material's diffuse color\n    vec3 k_s = vec3(1.0, 1.0, 1.0);  // material's specular color\n    float shininess = 10.0;  // material's shininess\n    if (logDepth(fragCoord) >= 1.0-EPSILON) {\n        // grey if part of the background\n        k_a = vec3(0.0);\n        k_d = vec3(0.0);\n        k_s = vec3(0.0);\n    } // */\n    \n    vec3 color = phongIllumination(\n        k_a, k_d, k_s, shininess,\n        worldPos(fragCoord), surfNorm(fragCoord), eye\n    );\n    \n    fragColor = vec4(\n        color,\n        0.0  // unused val\n    );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}