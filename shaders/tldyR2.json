{
    "Shader": {
        "info": {
            "date": "1609544165",
            "description": "It's raining Cage",
            "flags": 96,
            "hasliked": 0,
            "id": "tldyR2",
            "likes": 17,
            "name": "Nicolas rain",
            "published": 3,
            "tags": [
                "bitmap",
                "rain",
                "pixelart",
                "meme",
                "nicolascage"
            ],
            "usePreview": 0,
            "username": "levonchic",
            "viewed": 745
        },
        "renderpass": [
            {
                "code": "// MIT License (c) bitrate16\n#define LAYERS 16            // Cage layers count\n#define LAYER_SPEED 0.25      // Layer speed increment\n#define LAYER_SPEED_DEF 25.0 // Layer0 speed\n#define LAYER_SCALE 0.25      // Layer scale increment\n#define DENS_LIMIT 0.5       // Noise density limit\n\n// Ref: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(vec2 c){\n\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p, float density){\n\tvec2 ij = floor(p/density);\n\tvec2 xy = mod(p,density)/density;\n\t//xy = 3.*xy*xy-2.*xy*xy*xy;\n\txy = .5*(1.-cos(3.1415*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\n// Composite paste layer A into layer B\nvec4 composite(in vec4 a, in vec4 b) {\n    return a * a.a + b * (1.0 - a.a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Rotate cage\n    float s = sin(0.1);\n    float c = cos(0.1);\n    mat2 rot = mat2(c, -s, s, c);\n    fragCoord *= rot * 0.9;\n    fragCoord += iResolution.xy * 0.1;\n    \n    for (float i = float(LAYERS); i > 0.0; i -= 1.0) {\n        // Calculate grid cell coords\n        vec2 grid = (\n                     fragCoord.xy \n                      + // Change speed for each layer\n                      iTime * LAYER_SPEED_DEF * (i * LAYER_SPEED + 1.0) \n                      + // Change noise frag coords\n                      vec2(i * 9131.7, i * 12371.3)) \n                     / \n                     (\n                      vec2(float(WIDTH), float(HEIGHT)) \n                       * // Scale the image (grid cell)\n                       (i * LAYER_SCALE + 1.0) \n                    ); \n        \n        // Get noise sample value\n        // Round grid coords to get noise frag coords\n        // > floor(grid)\n        float n = noise(floor(grid), 1.);\n\n        // Calculate texture mapping coords relative to grid coords\n        // > fract(grid) * vec2(WIDTH, HEIGHT)\n        if (n > DENS_LIMIT)\n            fragColor = composite(texelFetch(iChannel0, ivec2(fract(grid) * vec2(WIDTH, HEIGHT)), 0), fragColor);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 25173,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/parismusicmusic/its-raining-men-originally-1"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// MIT License (c) bitrate16\n// Texture unpack, no buffering\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 frag = ivec2(fragCoord);\n    \n    if (frag.x >= WIDTH || frag.y >= HEIGHT)\n        return;\n    else {           \n\n        int px = frag.y * WIDTH + frag.x;\n        int pind = px / POINTS4INT;\n        int bind = px % POINTS4INT;\n\n        fragColor = palette[(matrix[pind] >> (bind * COLORBITS)) & COLORMASK];\n        fragColor *= fragColor.a;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// MIT License (c) bitrate16\n// Contains raw image\n\n#define WIDTH 40\n#define HEIGHT 52\n#define COLORS 16\n#define COLORBITS 4\n#define COLORMASK 15\n#define POINTS4INT 8\n#define INTPERFRAME 260\n#define FRAMES 1\n\nvec4[16] palette = vec4[16] (\n\tvec4(0.9098039215686274, 0.592156862745098, 0.4, 1.0),\n\tvec4(0.6039215686274509, 0.32941176470588235, 0.17254901960784313, 1.0),\n\tvec4(0.3764705882352941, 0.17254901960784313, 0.043137254901960784, 1.0),\n\tvec4(0.996078431372549, 0.807843137254902, 0.5803921568627451, 1.0),\n\tvec4(0.18823529411764706, 0.08627450980392157, 0.00784313725490196, 1.0),\n\tvec4(0.8, 0.4588235294117647, 0.28627450980392155, 1.0),\n\tvec4(0.4117647058823529, 0.2901960784313726, 0.1450980392156863, 1.0),\n\tvec4(0.6745098039215687, 0.44313725490196076, 0.2823529411764706, 1.0),\n\tvec4(0.9607843137254902, 0.7215686274509804, 0.5215686274509804, 1.0),\n\tvec4(0.5294117647058824, 0.19215686274509805, 0.06274509803921569, 1.0),\n\tvec4(0.7176470588235294, 0.5450980392156862, 0.36470588235294116, 1.0),\n\tvec4(0.7803921568627451, 0.3686274509803922, 0.22745098039215686, 1.0),\n\tvec4(0.403921568627451, 0.3686274509803922, 0.25882352941176473, 1.0),\n\tvec4(1.0, 1.0, 0.9294117647058824, 1.0),\n\tvec4(1.0, 1.0, 0.0, 0.0),\n\tvec4(0.027450980392156862, 0.0, 0.0, 1.0)\n);\n\nint[260] matrix = int[260] (\n\n\n// Frame 0\n\t0x266eeeee,\n\t0xeeeeee42,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x17116eee,\n\t0xeee24266,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x75a776ee,\n\t0xe2442661,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x55000ace,\n\t0x22226617,\n\t0xeeeeeee2,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x5000007e,\n\t0x22661777,\n\t0xeeeee222,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0xe,\n\t0x22611500,\n\t0xeeee2226,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0xae,\n\t0x21771000,\n\t0xeee22612,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x50000ae,\n\t0x6a770000,\n\t0xe2226162,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x705000ae,\n\t0x77507115,\n\t0x22621666,\n\t0xeeeeeee2,\n\t0xeeeeeeee,\n\t0x500000ae,\n\t0x1115b,\n\t0x22211617,\n\t0xee21e422,\n\t0xeeeeeeee,\n\t0xb00000a6,\n\t0x11991b,\n\t0x22211610,\n\t0xe9112422,\n\t0xeeeeeeee,\n\t0x915b080c,\n\t0x51f2111,\n\t0x22111118,\n\t0x92992222,\n\t0xeeeeeee2,\n\t0x91210806,\n\t0x741a222,\n\t0x26611151,\n\t0x29112222,\n\t0xeeeeeee2,\n\t0xd7f10007,\n\t0x7122a003,\n\t0x22111557,\n\t0x49911222,\n\t0xeeeeee92,\n\t0x33325807,\n\t0x71119108,\n\t0x62117001,\n\t0x29112222,\n\t0xeeeeee99,\n\t0x5039000a,\n\t0x71175555,\n\t0x61115001,\n\t0x22112222,\n\t0xeeeeef91,\n\t0x512100a,\n\t0x7115000,\n\t0x11150000,\n\t0x11162222,\n\t0xeeeeef99,\n\t0x7170a,\n\t0x5177700,\n\t0x11550000,\n\t0x912f2211,\n\t0xeeeef221,\n\t0x500a,\n\t0x99122170,\n\t0x11000083,\n\t0x24ff9211,\n\t0xeeeff211,\n\t0x55000200,\n\t0x22924221,\n\t0x15008330,\n\t0xfff21111,\n\t0xeeefffff,\n\t0x55000100,\n\t0x79157290,\n\t0x7b000300,\n\t0xfff21211,\n\t0xeeffffff,\n\t0x2009500,\n\t0x9b51150,\n\t0x15500030,\n\t0xfff21111,\n\t0xeeffffff,\n\t0x550000,\n\t0x11111b03,\n\t0x10000000,\n\t0xff411111,\n\t0xefffffff,\n\t0x333303,\n\t0x511b500,\n\t0x11115000,\n\t0xff211111,\n\t0xefffffff,\n\t0x833330e,\n\t0x1115000,\n\t0x22115100,\n\t0xf4211111,\n\t0xefffffff,\n\t0x3333338e,\n\t0x71110800,\n\t0x21172007,\n\t0xf2211111,\n\t0xefffffff,\n\t0x3388308e,\n\t0x11158003,\n\t0x2286f210,\n\t0xf4212211,\n\t0xffffffff,\n\t0x308880ee,\n\t0x11108003,\n\t0x1273ad17,\n\t0xf2212211,\n\t0xffffffff,\n\t0x38ee,\n\t0x11580000,\n\t0x1221111,\n\t0xf221262b,\n\t0xffffffff,\n\t0x50000eee,\n\t0x15830111,\n\t0x50522171,\n\t0xf22121f2,\n\t0xffffffff,\n\t0x60008eee,\n\t0x300134,\n\t0xf2777770,\n\t0x2221112f,\n\t0xfffffff4,\n\t0x63106eee,\n\t0x300136,\n\t0x4fff4217,\n\t0x22111172,\n\t0xffffff42,\n\t0x86106eee,\n\t0x800128,\n\t0x7644610,\n\t0x21111710,\n\t0xfffffff4,\n\t0x1102eeee,\n\t0x33317011,\n\t0x800303,\n\t0x21115550,\n\t0xff4ff422,\n\t0x82eeee,\n\t0x33301200,\n\t0x883333,\n\t0x21111550,\n\t0xfff4ff42,\n\t0xa66eeee,\n\t0x33381490,\n\t0x3333,\n\t0x21115550,\n\t0xfff44ff2,\n\t0x6446eeee,\n\t0x33338644,\n\t0x3333,\n\t0x21111500,\n\t0xef444ff4,\n\t0x284aeeee,\n\t0x3333306f,\n\t0x833333,\n\t0x21111500,\n\t0xef442fff,\n\t0x876eeeee,\n\t0x33333330,\n\t0x383333,\n\t0x42211550,\n\t0xeef42f4f,\n\t0x866eeeee,\n\t0x33333300,\n\t0x833333,\n\t0x42221150,\n\t0xeee424ff,\n\t0x74eeeeee,\n\t0x33333800,\n\t0x33333,\n\t0xfff44210,\n\t0xeeee444f,\n\t0x46eeeeee,\n\t0x33333888,\n\t0x833333,\n\t0xff4ff421,\n\t0xeeeeef4f,\n\t0x6eeeeeee,\n\t0x38308886,\n\t0x15083338,\n\t0xfff4f442,\n\t0xeeeeeeff,\n\t0xeeeeeeee,\n\t0x83a64,\n\t0x42100000,\n\t0xff4f4ff4,\n\t0xeeeeee44,\n\t0xeeeeeeee,\n\t0x7aa72646,\n\t0xf4222111,\n\t0xfffff4f4,\n\t0xeeeeeeef,\n\t0xeeeeeeee,\n\t0x2666624e,\n\t0xf4f44222,\n\t0x4f4f22ff,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x244664ee,\n\t0x4444fff4,\n\t0xeef444ff,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x22444eee,\n\t0x444f2f4f,\n\t0xee4f444f,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x24644eee,\n\t0xf4444f24,\n\t0xeeee4fff,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x4644eeee,\n\t0xf4422442,\n\t0xeeeee4ff,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x4cfeeeee,\n\t0xff44f24f,\n\t0xeeeeeeff,\n\t0xeeeeeeee,\n\t0xeeeeeeee,\n\t0x4eeeeeee,\n\t0xeeee4444,\n\t0xeeeeeeee,\n\t0xeeeeeeee\n);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}