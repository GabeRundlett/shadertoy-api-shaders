{
    "Shader": {
        "info": {
            "date": "1668979977",
            "description": "CC0: F# Weekly Windows Terminal Shader\nA shader background for Windows Terminal featuring the F# weekly logo\n",
            "flags": 0,
            "hasliked": 0,
            "id": "cdfXW7",
            "likes": 12,
            "name": "F# Weekly Windows Terminal",
            "published": 3,
            "tags": [
                "windowsterminal",
                "fsharp"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "// CC0: F# Weekly Windows Terminal Shader\n//  A shader background for Windows Terminal featuring the F# weekly logo\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define SCA(a)      vec2(sin(a), cos(a))\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst vec3 skyCol   = HSV2RGB(vec3(0.58, 0.86, 1.0));\nconst vec3 speCol1  = HSV2RGB(vec3(0.55, 0.9, 1.0));\nconst vec3 speCol2  = HSV2RGB(vec3(0.8 , 0.6, 1.0));\nconst vec3 speCol3  = HSV2RGB(vec3(0.9, 0.86, 4.0));\nconst vec3 matCol   = HSV2RGB(vec3(0.8,0.50, 0.5)); \nconst vec3 diffCol1 = HSV2RGB(vec3(0.60,0.90, 2.0)); \nconst vec3 diffCol2 = HSV2RGB(vec3(0.85,0.90, 2.0));\nconst vec3 sunDir1  = normalize(vec3(0.9, -0.4, 1.0));\nconst vec3 sunDir2  = normalize(vec3(-0.9 , 0.0, 1.0));\n\n\nconst float outerZoom = 1.5;\nconst float innerZoom = 1.0-0.4;\nconst float height = -0.065*outerZoom;\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nvec2 hash2(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return fract(sin(p)*43758.5453123);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat roundedX(vec2 p, float w, float r) {\n  p = abs(p);\n  return length(p-min(p.x+p.y,w)*0.5) - r;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p-a, ba = b-a;\n  float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h );\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat equilateralTriangle(vec2 p) {\n  const float k = sqrt(3.0);\n  p.x = abs(p.x) - 1.0;\n  p.y = p.y + 1.0/k;\n  if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n  p.x -= clamp( p.x, -2.0, 0.0 );\n  return -length(p)*sign(p.y);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/intersectors/intersectors.htm\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nvec2 pmin(vec2 a, vec2 b, float k) {\n  vec2 h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nvec2 pabs(vec2 a, float k) {\n  return -pmin(-a, a, k);\n}\n\nfloat ref(inout vec2 p, vec2 r) {\n  float d = dot(p, r);\n  p -= r*min(0.0, d)*2.0;\n  return d < 0.0 ? 0.0 : 1.0;\n}\n\nvec2 dfsharp(vec2 p) {\n  vec2 p0 = p;\n  vec2 p1 = p;\n  vec2 p3 = p;\n  const float sm = 0.03;\n  p0 = pabs(p0, sm);\n  const vec2 n = normalize(vec2(1.0));\n  float d0 = abs(dot(n, p0)-0.38)-0.12;\n  float d1 = abs(p1.x)-0.025;\n  float d2 = dot(n, p0)-0.19;\n  float d3 = -p3.x-0.025;\n  d2 = pmax(d2, -d3, sm);\n  float d = d0;\n\n  d = pmax(d, -d1, sm);\n  d = min(d,  d2);\n  return vec2(d, p.x > 0.0 ? 1.0 : 0.0);\n}\n\nvec2 dfsharpWeekly(vec2 p, vec2 off) {\n  const mat2 rot45 = ROT(PI/4.0);\n  const vec2 refN = SCA(-PI/4.0);\n  const float r = 0.125;\n  const float rr = 2.0*r*sqrt(2.0);\n  vec2 p0 = p;\n  vec2 p1 = p-off;\n  p0 = abs(p0);\n  ref(p0, refN);\n  p0.y -= rr;\n  float d0 = roundedX(p0, rr, r);\n  float d1 = segment(p1, rr*vec2(-1.0, 0.0), rr*vec2(0.0, 1.0))-r;\n  float d2 = segment(p1, rr*vec2(0.5, -0.5), rr*vec2(0.0, -1.0))-r;\n  float d3 = segment(p1, rr*vec2(-1.0, 0.0), rr*vec2(0.5, -1.5))-r;\n  float d = d0;\n  float dd = d1;\n  dd = min(dd, d2);\n  dd = min(dd, d3);\n  \n  return vec2(d, dd);\n}\n\nvec2 df(vec2 p) {\n  const mat2 rot45 = ROT(PI/4.0);\n  p *= transpose(rot45);\n  vec2 cp = (p-0.5);\n  vec2 cn = round(cp);\n  cp -= cn;\n  cp *= rot45;\n  \n  return dfsharp(cp/innerZoom)*innerZoom;\n}\n\nfloat hf(vec2 p) {\n  const float a = .05;\n  p += 0.125*sin(vec2(1.0, sqrt(0.5))*TIME*a)/a;\n  const float aa = 0.06;\n  p /= outerZoom;\n  vec2 d2 = df(p);\n  float h = smoothstep(aa, -0.5*aa, (d2.x-0.0125));\n  h *= height;\n  return h;\n}\n\nvec3 normal(vec2 p) {\n  vec2 eps = vec2(4.0/RESOLUTION.y, 0.0);\n\n  vec3 n;\n\n  n.x = hf(p + eps.xy) - hf(p - eps.xy);\n  n.y = 2.0*eps.x;\n  n.z = hf(p + eps.yx) - hf(p - eps.yx);\n\n  return normalize(n);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  col = 0.025*skyCol;\n//  col += speCol3*0.25E-3/max(abs(rd.y-0.35), 0.0001);\n  col += speCol1*0.25E-2/pow((1.0001+((dot(sunDir1, rd)))), 2.0);\n  col += speCol2*0.25E-2/pow((1.0001+((dot(sunDir2, rd)))), 2.0);\n\n  float tp0  = rayPlane(ro, rd, vec4(vec3(0.0, 1.0, 0.0), 4.0));\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), 6.0));\n  float tp = tp1;\n  tp = max(tp0,tp1);\n\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += vec3(4.0)*skyCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += vec3(0.8)*skyCol*exp(-0.5*max(db, 0.0));\n  }\n\n  return clamp(col, 0.0, 10.0);\n}\n\nvec3 fsharpEffect(vec2 p) {\n  float s = 1.5;\n  vec3 lp1 = sunDir1;\n  vec3 lp2 = sunDir2;\n  float h  = hf(p);\n  vec3 n   = normal(p);\n  vec3 ro  = vec3(0.0, 10.0, 0.0);\n  vec3 pp  = vec3(p.x, h, p.y);\n  vec3 rd  = normalize(pp-ro);\n  vec3 ref = reflect(rd, n);\n  vec3 ld1 = normalize(lp1 - pp);\n  vec3 ld2 = normalize(lp2 - pp);\n\n  const mat2 rot = ROT(-PI/2.0+0.4); \n  ref.zy *= rot;\n\n  const float dm = 1.0;\n  float diff1 = pow(max(dot(ld1, n), 0.0), dm);\n  float diff2 = pow(max(dot(ld2, n), 0.0), dm);\n  vec3 rsky   = skyColor(pp, ref);\n\n  vec3 col = vec3(0.0);\n\n  float hh = smoothstep(0.00, height, h);\n  col += (matCol*diffCol1)*diff1*mix(0.2, 1.0, hh);\n  col += (matCol*diffCol2)*diff2*mix(0.2, 1.0, hh);\n  col += rsky*mix(1.0, 0.5, hh);\n  col -= 0.05*vec3(2.0, 2.0, 1.0);\n\n  return col;\n}\n\nvec3 stars(vec2 sp, float hh) {\n  const vec3 scol0 = HSV2RGB(vec3(0.85, 0.8, 1.0));\n  const vec3 scol1 = HSV2RGB(vec3(0.65, 0.5, 1.0));\n  vec3 col = vec3(0.0);\n  \n  const float m = 4.0;\n\n  for (float i = 0.0; i < m; ++i) {\n    vec2 pp = sp+0.5*i;\n    float s = i/(m-1.0);\n    vec2 dim  = vec2(mix(0.05, 0.003, s)*PI);\n    vec2 np = mod2(pp, dim);\n    vec2 h = hash2(np+127.0+i);\n    vec2 o = -1.0+2.0*h;\n    pp += o*dim*0.5;\n    float l = length(pp);\n  \n    float h1 = fract(h.x*1667.0);\n    float h2 = fract(h.x*1887.0);\n    float h3 = fract(h.x*2997.0);\n\n    vec3 scol = mix(8.0*h2, 0.25*h2*h2, s)*mix(scol0, scol1, h1*h1);\n\n    vec3 ccol = col + exp(-0.5*(mix(6000.0, 2000.0, hh)/mix(2.0, 0.25, s))*max(l-0.001, 0.0))*scol;\n    ccol *= mix(0.125, 1.0, smoothstep(1.0, 0.99, sin(0.25*TIME+TAU*h.y)));\n    col = ccol;\n  }\n  \n  return col;\n}\n\nvec3 triEffect(vec3 col, vec2 p) {\n  vec2 op = p;\n  const vec2 n = SCA(-PI/3.0);\n  float hoff = 0.15*dot(n, p);\n  vec3 gcol = hsv2rgb(vec3(clamp(0.7+hoff, 0.6, 0.8), 0.90, 0.02));\n  vec2 pt = p;\n  pt.y -= 0.3;\n  pt.y = -pt.y;\n  const float zt = 1.0;\n  float dt = equilateralTriangle(pt/zt)*zt;\n  col = dt < 0.0 ? col : stars(op, 0.8);\n  col += 2.0*gcol;\n  col = dt < 0.0 ? fsharpEffect(p) : col;\n  col += gcol/abs(dt);\n  return col;  \n}\n\nvec3 fsharpWeeklyEffect(vec3 col, float aa, vec2 p) {\n  const vec2 n = SCA(-PI/4.0);\n\n  vec2 pf = p;\n  pf.y -= -0.32;\n  float hoff = 0.15*dot(n, pf);\n  vec3 gcol = hsv2rgb(vec3(0.625+hoff, 0.85, 1.0));\n  \n  vec2 df2 = dfsharpWeekly(pf, vec2(0.0));\n\n  col = mix(col, col*sqrt(gcol), smoothstep(aa, -aa, df2.x));\n  col += 0.005*gcol/abs(df2.x);\n\n  float fy = pf.y+0.18;\n  vec3 skyCol = hsv2rgb(vec3(0.7+0.125*fy, 0.95, 0.3*(1.0+.0*abs(fy))));\n  vec3 fcol = vec3(0.0);\n  fcol += clamp(skyCol/pow(abs(fy), 0.65), 0.0, 10.0);\n  col = mix(col, fcol, smoothstep(aa, -aa, df2.y));\n  col = mix(col, vec3(2.0), smoothstep(aa, -aa, abs(df2.y)-0.003));\n\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float aa = 2.0/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n\n  col = triEffect(col, p);\n  col = fsharpWeeklyEffect(col, aa, p);\n  \n  col *= smoothstep(1.5, 0.25, length(pp));\n  col *= mix(vec3(0.5), vec3(1.0),smoothstep(-0.9, 0.9, sin(0.25*TAU*p.y/aa+TAU*vec3(0.0, 1., 2.0)/3.0)));\n\n  col = aces_approx(col);\n  col = sRGB(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}