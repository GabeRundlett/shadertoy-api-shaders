{
    "Shader": {
        "info": {
            "date": "1684719228",
            "description": "2D Light using raymarching",
            "flags": 32,
            "hasliked": 0,
            "id": "dlK3DK",
            "likes": 7,
            "name": "2D Lights",
            "published": 3,
            "tags": [
                "raymarching",
                "2dlight",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "franco1234811",
            "viewed": 1684
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 tex = texture(iChannel0, uv);\n    \n    fragColor = tex / tex.w;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_ITERATIONS 10\n#define MIN_DISTANCE 0.01f\n#define PI 3.14159265358979f\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\n\n\nstruct Material\n{\n    vec3 emission;\n    float intensity;\n};\n\nstruct NearestData\n{\n    float dist;\n    Material material;\n};\n\nfloat union_sdf(float d1, float d2)\n{\n    return min(d1, d2);\n}\n\nfloat subtract_sdf(float d1, float d2)\n{\n    return max(d1, -d2);\n}\n\nfloat sunion_sdf(float d1, float d2, float k)\n{\n\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat circle_sdf(vec2 point, vec2 pos, float radius)\n{\n    return length(point - pos) - radius;\n}\n\nfloat box_sdf(vec2 point, vec2 center, vec2 size) {\n    center = point - center;\n\tvec2 r = abs(center) - size;\n    return min(max(r.x, r.y),0.) + length(max(r,vec2(0,0)));\n}\n\nfloat segment_sdf(vec2 pos, vec2 a, vec2 b)\n{\n    vec2 v = pos - a;\n    vec2 u = b - a;\n    float t = max(min(dot(v, u) / dot(u, u), 1.0f), 0.0f);\n    vec2 d = v - u * t;\n    return length(d);\n}\n\n\nvoid test_sample(inout NearestData nearest, Material material, float sample_distance)\n{\n    if (sample_distance < nearest.dist)\n    {\n        nearest.dist = sample_distance;\n        nearest.material = material;\n    }\n}\n\nvoid sample_sdf(vec2 point, out NearestData nearest)\n{\n    // Material definitions\n    Material black_material;\n    Material white_material;\n    white_material.emission = vec3(1.0f);\n    white_material.intensity = 1.5f;\n    \n    Material green_material;\n    green_material.emission = normalize(vec3(0.4, 0.6, 0.2));\n    green_material.intensity = 1.20f;\n    \n    Material purple_material;\n    purple_material.emission = normalize(vec3(.6, 0.4, 0.8));\n    purple_material.intensity = 1.0f;\n    \n    \n    // SDF\n    \n    // Triangle\n    vec2 a = vec2(1.2, -0.75);\n    vec2 b = vec2(1.3, -0.5);\n    vec2 c = vec2(1.4, -0.7);\n    test_sample(nearest, white_material, segment_sdf(point, a, b));\n    test_sample(nearest, white_material, segment_sdf(point, b, c));\n    test_sample(nearest, white_material, segment_sdf(point, c, a));\n    \n    //test_sample(nearest, white_material, segment_sdf(point, vec2(0.75, -0.75), vec2(1.3, -0.5)));\n    \n    test_sample(nearest, purple_material, box_sdf(point, vec2(1.4, 0.3), vec2(0.10f)));\n    test_sample(nearest, black_material, box_sdf(point, vec2(1.2, 0.3), vec2(0.050f)));\n    \n    \n    for (float i = 0.0f; i < 3.0f; i++)\n    {\n        test_sample(nearest, white_material, box_sdf(point, vec2(0, -i * 0.1f), vec2(0.0050f)));\n    }\n    \n    \n    test_sample(nearest, green_material, circle_sdf(point, vec2(-0.3, -0.3), 0.2f));\n    \n    test_sample(nearest, black_material, circle_sdf(point, vec2(-1, 0.6), 0.6f));\n    test_sample(nearest, black_material,  box_sdf(point, vec2(0.75, 0), vec2(0.5, 0.01)));\n    \n    vec2 moon_pos = vec2(-0.8, -0.6);\n    float moon_radius = 0.3f;\n    float moon_distance = subtract_sdf(circle_sdf(point, moon_pos, moon_radius), circle_sdf(point, moon_pos + vec2(moon_radius * 0.5, 0), moon_radius));\n    test_sample(nearest, green_material, moon_distance);\n    \n    // Subtraction box\n    vec2 box_pos = vec2(0.8, 0.3);\n    float box_size = 0.2;\n    float cut_size = 0.35f;\n    float main_cube_sd = box_sdf(point, box_pos, vec2(box_size));\n    float cut_horizontal_sd = box_sdf(point, box_pos - vec2(box_size * 0.5, 0), vec2(box_size * 2.0f, box_size * cut_size));\n    float cut_vertical_sd = box_sdf(point, box_pos - vec2(0.0f, box_size * 0.5), vec2(box_size * cut_size, box_size * 2.0f));\n    float cut_sphere_sd = circle_sdf(point, box_pos, 0.2f);\n    \n    float k = .015f;\n    float cut_sd = sunion_sdf(cut_horizontal_sd, sunion_sdf(cut_vertical_sd, cut_sphere_sd, k), k);\n    \n    float subtraction_box_sd = subtract_sdf(main_cube_sd, cut_sd);\n    \n\n    test_sample(nearest, purple_material, subtraction_box_sd);\n   \n}\n\nvoid ray_march(vec2 pos, vec2 direction, out vec3 color)\n{\n    \n    color = vec3(0);\n\n    for (int i = 0; i < MAX_ITERATIONS; i++)\n    {\n        NearestData nearest;\n        nearest.dist = 10e2;\n        sample_sdf(pos, nearest);\n                \n        if (nearest.dist < MIN_DISTANCE)\n        {\n            color = nearest.material.emission * nearest.material.intensity;\n            return;\n        }\n        pos += direction * nearest.dist;\n    }\n    \n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pos = 2.0f * (uv - 0.5f); // range [-1, 1]\n    pos.x *= iResolution.x / iResolution.y; // fix aspect ratio\n   \n    \n    // Random sampling -------------------------------------------------------------------------------------\n    float pixel_size = 1.0f / iResolution.x; // Size of a single pixel\n    float pixels_offset = 2.0f; // Amount of pixels to randomly offset, this could be the blur\n    float random_value = rand(iTime + pos.x * pos.y);\n    float random_angle = 2.0f * PI * rand(random_value);\n    vec2 offset = random_value * pixels_offset * pixel_size * vec2(cos(random_angle), sin(random_angle));\n    pos += offset;\n    \n    // Multisampled direction raymarch ---------------------------------------------------------------------\n    vec3 accumulated_color = vec3(0);\n    float samples = 4.0f;\n    \n    for (float i = 0.0f; i < samples; i++)\n    {\n        float angle = 2.0f * PI * (i + rand(pos.x * pos.y + iTime + i)) / samples;\n        vec2 direction = vec2(cos(angle), sin(angle));\n        \n        vec3 sample_color;\n        ray_march(pos, direction, sample_color);\n        \n        accumulated_color += sample_color;\n    }\n    \n    vec3 color = accumulated_color / samples;\n      \n    fragColor = vec4(color, 1.0) + texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}