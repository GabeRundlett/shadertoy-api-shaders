{
    "Shader": {
        "info": {
            "date": "1714684836",
            "description": "it has been a while.\nhow is everyone doing ?",
            "flags": 0,
            "hasliked": 0,
            "id": "4fySzz",
            "likes": 6,
            "name": "Curved arrow",
            "published": 3,
            "tags": [
                "2d",
                "sdf"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 134
        },
        "renderpass": [
            {
                "code": "const float TAU = 6.28318;\n\n // From https://iquilezles.org/articles/distfunctions2d/  \nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\nfloat sdf(vec2 uv, float radius, float arrowRadius)\n{\n    float headDelta = radius * 4.;\n    vec2 arrowPoint = vec2(arrowRadius, 0.);\n    \n    // eyeballing a delta for the arrow head that looks okay\n    float head = min(\n        udSegment(uv, arrowPoint, arrowPoint - vec2(headDelta, -headDelta)),\n        udSegment(uv, arrowPoint, arrowPoint - vec2(-headDelta * .8, -headDelta * 1.2))) \n        - radius;\n    \n    // Going to polar coordinate\n    float angle = (atan(uv.y, uv.x));\n    float len = length(uv);\n    // distoring space\n    angle = angle - clamp(angle, 0., TAU / 4.);\n    // Going back to cartesian\n    uv = vec2(cos(angle), sin(angle)) * len;\n    // a point along the 0 y axis will now be streched into an arc\n    float body = length(uv - vec2(arrowRadius, 0.)) - radius;\n    \n    return min(body, head);\n}\n\n// Main visualizer from https://www.shadertoy.com/view/3ltSW2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    if (iMouse.x < 2. || iMouse.y < 2.) \n    {\n        m = vec2(.5);\n    }\n    \n    float time = iTime * .125;\n    float a = time * TAU;\n    float ca = cos(a);float sa = sin(a);\n    p *= mat2(ca,-sa,sa,ca);\n\n    float radius = m.x / 20.;\n\n\tfloat d = sdf(p, radius, m.y);\n    \n\t// coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if(sin(time / 2. * TAU) > 0.)\n    {\n        col = vec3(1. - smoothstep(-.005,.005, d));\n    }\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}