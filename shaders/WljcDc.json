{
    "Shader": {
        "info": {
            "date": "1595579728",
            "description": " Dynamic generalization of the Necker Cube (mouse restores sanity)",
            "flags": 0,
            "hasliked": 0,
            "id": "WljcDc",
            "likes": 12,
            "name": "Necker Cube",
            "published": 3,
            "tags": [
                "illusion",
                "projection",
                "paradox"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 349
        },
        "renderpass": [
            {
                "code": "// \"Necker Cube\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Dynamic generalization of the Necker Cube (mouse restores sanity)\n\n// (Appears in Escher's Belvedere - the original, not the shader)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat Minv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\n\nvec4 sLen;\nvec3 qHit, ltDir, vuDir;\nfloat tCur, dstFar, eWid;\nint idObj;\nbool isBg, doFg;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  if (isBg) {\n    q = abs (p);\n    q = abs (p) - sLen.wyz;\n    d = PrBoxDf (q, sLen.xww + eWid);\n    DMINQ (1);\n    q = abs (p) - sLen.xwz;\n    d = PrBoxDf (q, sLen.wyw + eWid);\n    DMINQ (2);\n    q = abs (p) - sLen.xyw;\n    d = PrBoxDf (q, sLen.wwz + eWid);\n    DMINQ (3);\n    q = p;\n    q.y -= - sLen.y - eWid - 0.03;\n    d = q.y;\n    DMINQ (6);\n  } else {\n    q = p - (sLen.xwz - 10. * vuDir);\n    d = PrBoxDf (q, sLen.wyw + eWid * vec3 (1., -1., 1.));\n    DMINQ (4);\n    q = p - (sLen.xyw * vec3 (1., -1., 1.) - 10. * vuDir);\n    d = PrBoxDf (q, sLen.wwz + eWid * vec3 (1., 1., -1.));\n    DMINQ (5);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0002 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0001, -0.0001);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 roo, col, vn;\n  vec2 s;\n  float dstObj, dstObjF, c;\n  sLen = vec4 (vec3 (3., 2., 4.), 0.);\n  eWid = 0.2;\n  isBg = true;\n  roo = ro;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    c = 99.;\n    if (idObj <= 3) {\n      col4 = (Minv3 (max (abs (ro) - sLen.xyz + eWid, 0.)) > 0.) ?\n         vec4 (1., 1., 0.7, 0.3) : vec4 (0.9, 0.6, 0., 0.);\n      if (idObj == 1 && abs (qHit.x) < sLen.x - eWid) c = (abs (vn.z) > 0.5) ? qHit.y : qHit.z;\n      else if (idObj == 2 && abs (qHit.y) < sLen.y - eWid) c = (abs (vn.x) > 0.5) ? qHit.z : qHit.x;\n      else if (idObj == 3 && abs (qHit.z) < sLen.z - eWid) c = (abs (vn.y) > 0.5) ? qHit.x : qHit.y;\n    } else {\n      col4 = vec4 (0.6, 0.6, 0.65, 0.);\n      s = abs (qHit.xz) - sLen.xz;\n      col4 *= 0.7 + 0.3 * smoothstep (-0.1, 0., max (length (max (s - eWid - 0.1, 0.)) - 0.05,\n         - length (max (s + eWid + 0.1, 0.))));\n    }\n    if (doFg) {\n      isBg = false;\n      ro = roo;\n      dstObjF = ObjRay (ro, rd);\n      if (dstObjF < dstObj) {\n        ro += dstObjF * rd;\n        vn = ObjNf (ro);\n        col4 = vec4 (0.9, 0.6, 0., 0.);\n        if (idObj == 4 && abs (qHit.y) < sLen.y - eWid) c = (abs (vn.x) > 0.5) ? qHit.z : qHit.x;\n        else if (idObj == 5 && abs (qHit.z) < sLen.z - eWid) c = (abs (vn.y) > 0.5) ? qHit.x : qHit.y;\n      }\n    }\n    if (c != 99.) col4 *= 0.9 + 0.1 * cos (12. * pi * c);\n  }\n  col = col4.rgb * (0.3 + 0.7 * max (dot (vn, ltDir), 0.)) +\n     col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  vec3 ro, col, vx, vy;\n  vec2 canvas, uv, uvv, mSize, fgLim;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  az = 0.3 * pi + 0.05 * pi * sin (0.1 * pi * tCur);\n  el = -0.07 * pi + 0.02 * pi * cos (0.1 * pi * tCur);\n  ro = vec3 (0., 0., -12.);\n  ro.yz = Rot2D (ro.yz, - el);\n  ro.xz = Rot2D (ro.xz, - az);\n  vuDir = normalize (- ro);\n  mSize = vec2 (0.7, 0.5);\n  fgLim = abs (uv) - mSize;\n  doFg = (max (fgLim.x, fgLim.y) < 0.);\n  if (mPtr.z > 0.) doFg = false;\n  vx = normalize (vec3 (vuDir.z, 0., - vuDir.x));\n  vy = vec3 (0., 1., 0.) - vuDir.y * vuDir;\n  zmFac = 0.22;\n  dstFar = 100.;\n  ltDir = normalize (vec3 (-1., 3., -0.3));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi);\n    col += (1. / naa) * ShowScene (ro + vec3 (uvv.x * vx + uvv.y * vy) / zmFac, vuDir);\n  }\n  uv *= vec2 (canvas.y / canvas.x, 1.);\n  uv *= uv;\n  uv *= uv;\n  col *= 1. - 0.3 * smoothstep (0.5, 1., dot (uv, uv));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}