{
    "Shader": {
        "info": {
            "date": "1616937392",
            "description": "dots emit tetraequivalued fields, figured as R,G,B,Y resulting in a quadripolar field.\nParticle tetrasign checkered along grid.\n\nmouse click: signed values  otherwise in [0,1]   ( null potential = half-grey )",
            "flags": 0,
            "hasliked": 0,
            "id": "7sBGR1",
            "likes": 13,
            "name": "field of quadripoles",
            "published": 3,
            "tags": [
                "dipole",
                "tripole",
                "quarks",
                "chromodynamics",
                "quadripole"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 474
        },
        "renderpass": [
            {
                "code": "// variant of quadripole https://shadertoy.com/view/7sBGzh\n\n\n#define F(P)     1./dot(P-U,P-U)       // point field\n#define CS(a)    vec2(cos(a),sin(a))\n#define hash2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define rot(a)   mat2(cos(a + vec4(0,11,33,0)))\n\nint n =17;  // neighborhod. big since 1/d² don't decrease fast enough.\n            //              should approx F with narrower support\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 4.* ( 2.*u - R ) / R.y,\n         I = floor(U), P,I1,\n         A = CS(1.9111),  // 109.5° : tetraedron vertical angle\n         j = CS(2.0944);  // 2pi/3 \n    mat4x3 J = mat4x3( vec3(0,0,1) ,vec3(1,0,1)*A.yyx, vec3(j,1)*A.yyx, vec3(j.x,-j.y,1)*A.yyx );\n    vec3 F = vec3(0);\n\n    float f, f0;\n    for (int k=0; k<n*n; k++) {    // --- sum influences from neighbor particlse \n        I1 = I + vec2(k%n -n/2,k/n -n/2);         // neighbor cell\n        P = I1 + (hash2(I1)-.5) *rot(iTime*8.*(hash(I1)-.5)) +.5; // random dot in the current neighbor cell\n        float f =  F(P);\n        F += J[int(mod(I1.x+2.*I1.y,4.))] * F(P); // particle potential ( checkered tetrasign )\n        f0 = max( f0, f );\n    }   \n    O =  F * J; \n    O += O.w *vec4(1,1,0,0);       // remap O.w as yellow\n    \n    if (iMouse.z<=0.) O = .5+.5*O; // not click: [0,1] values, otherwise signed\n    O = max( O, f0/R.y );          // display white dot at particle location\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}