{
    "Shader": {
        "info": {
            "date": "1435473315",
            "description": "It's a lens which magnifies and removes blurriness. Click and drag the mouse to move the lens around.",
            "flags": 0,
            "hasliked": 0,
            "id": "XlsSz4",
            "likes": 10,
            "name": "A Magnifying Lens",
            "published": 3,
            "tags": [
                "2d",
                "blur"
            ],
            "usePreview": 1,
            "username": "codywatts",
            "viewed": 1908
        },
        "renderpass": [
            {
                "code": "float normalDistribution(in float mean, in float deviation, in float x)\n{\n    // 2.50662827463 = sqrt(2 * pi)\n    return (1.0 / (2.50662827463 * deviation)) * exp((-1.0 * pow(x - mean, 2.0))/(2.0 * pow(deviation, 2.0)));\n}\n\nvec4 sampleTexture(in sampler2D sampler, in vec2 fragCoord, in vec2 uvOffsets)\n{\n\tconst float textureEdgeOffset = 0.005;\n\t\n\tvec2 textureCoordinates = (fragCoord + uvOffsets) / iResolution.xy;\n\ttextureCoordinates.y = 1.0 - textureCoordinates.y;\n\ttextureCoordinates = clamp(textureCoordinates, 0.0 + textureEdgeOffset, 1.0 - textureEdgeOffset);\n\treturn texture(iChannel0, textureCoordinates);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float textureSamplesCount = 8.0;\n    const float mean = 0.0;\n    \n\tvec2 mouseCoords = iMouse.xy;\n    // This causes the lens to animate in a figure-eight pattern if the user hasn't clicked anything.\n    if (mouseCoords == vec2(0.0))\n\t{\n        mouseCoords = (vec2(sin(iTime), sin(iTime) * cos(iTime)) * 0.35 + vec2(0.5)) * iResolution.xy;\n\t}\n    \n    float distanceFromLensCenter = distance(fragCoord, mouseCoords);\n    float distanceFactor = -1.0 * pow(0.04 * 640.0 / iResolution.x * distanceFromLensCenter, 5.0) + iResolution.x;\n    distanceFactor = max(1.0, distanceFactor);\n    \n    vec2 textureDisplacement = vec2(0.0, 0.0);\n    if (distanceFactor > 1.0)\n    {\n        float displacementFactor = distanceFromLensCenter / 2.0;\n        textureDisplacement = normalize(mouseCoords - fragCoord) * displacementFactor;\n    }\n    \n\tfloat standardDeviation = 40.0/distanceFactor;    \n\n    float divisor = (normalDistribution(mean, standardDeviation, 0.0) + 1.0) * distanceFactor;\n\tvec4 accumulator = sampleTexture(iChannel0, fragCoord, textureDisplacement) * divisor;\n    \n    vec2 polarityArray[4];\n    polarityArray[0] = vec2(1.0, 1.0);\n    polarityArray[1] = vec2(-1.0, 1.0);\n    polarityArray[2] = vec2(1.0, -1.0);\n    polarityArray[3] = vec2(-1.0, -1.0);\n\n\tfor (float y = 1.0; y < textureSamplesCount; ++y)\n\t{\n        for (float x = 1.0; x < textureSamplesCount; ++x)\n        {\n            float multiplier = normalDistribution(mean, standardDeviation, distance(vec2(0.0), vec2(x, y))) + 1.0;\n\n            for (int p = 0; p < 4; ++p)\n            {\n                vec2 offset = vec2(x, y) * polarityArray[p];\n                accumulator += sampleTexture(iChannel0, fragCoord, offset) * multiplier;\n                divisor += (multiplier);\n            }\n        }\n\t}\n    \n    fragColor = accumulator / divisor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}