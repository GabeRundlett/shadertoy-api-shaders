{
    "Shader": {
        "info": {
            "date": "1714415440",
            "description": "haha raymarcher go brrrrrrrrr",
            "flags": 0,
            "hasliked": 0,
            "id": "XftXDB",
            "likes": 3,
            "name": "super epic raymarcher",
            "published": 3,
            "tags": [
                "raymarcher"
            ],
            "usePreview": 0,
            "username": "derpygamer2142",
            "viewed": 107
        },
        "renderpass": [
            {
                "code": "#define epsilon 0.1\n#define maxDist 500.0\n#define fov 90.0\n\nfloat sphere (vec3 p, vec4 s) {\n        return length(s.xyz - p) - s.w;\n}\n   \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 balls[] = vec4[1] (vec4(0.0, 0.0, 25.0, 5.0)); // haha balls\n    //vec2 uv = fragCoord/iResolution.xy;\n    vec2 coords = fragCoord;\n   \n    float focalLength = iResolution.x / tan(radians(fov/2.0)); // this thingy used focal length but fov is cooler\n    \n    coords.x -= iResolution.x/2.0;\n    coords.y -= iResolution.y/2.0;\n    \n    float heldDist = 9999.99; // big number go brrrrr\n    float raylen = 0.0;\n    vec4 last = vec4 (0.0,0.0,5555555.3,5.0);\n    \n    \n    vec3 rp = vec3 (0.0, 0.0, 0.0);\n    vec3 rv = normalize(vec3 (coords.xy, focalLength)); // directiony thingy\n    float ypos = sin(iTime * 2.0) * 5.0;\n    while ((raylen < maxDist) && (heldDist > epsilon)) {\n        for (int i = 0; i < balls.length(); i++) {\n            float checkDist = sphere(rp, balls[i]); // how far away is the thing\n            balls[i].y = ypos;\n            if (checkDist < heldDist) {\n                heldDist = checkDist;\n                last = balls[i];\n            }\n            //heldDist = min(checkDist, heldDist); // update distance\n        }\n        \n        // zooooom\n        raylen += heldDist;\n        rp += rv*heldDist;\n    }\n    \n   \n    if (raylen > maxDist) {\n    // no bonk\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n    else {\n        // bonk\n        // https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_reflection_model\n        // this is most likely wrong\n        vec3 lightvec = vec3(1.0,1.0,-1.0);\n        vec3 normal = normalize(rp - last.xyz);\n        vec3 halfa = normalize(lightvec + rv);\n        float spec = pow(max(dot(halfa, normal),0.0),16.0);\n        float l = clamp(dot(normal, normalize(lightvec)),0.0,1.0);\n        fragColor = vec4(l+spec,l+spec,l+spec,1.0);\n    }\n    \n    //fragColor = vec4(uv.x,1.0-uv.y,0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}