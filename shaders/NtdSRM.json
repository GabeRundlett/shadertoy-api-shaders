{
    "Shader": {
        "info": {
            "date": "1638863730",
            "description": "Game of life, but with your camera as input.\nCamera -> adaptive threshold -> Game of Life -> some coloring.",
            "flags": 50,
            "hasliked": 0,
            "id": "NtdSRM",
            "likes": 2,
            "name": "Camera Driven Game of Life",
            "published": 3,
            "tags": [
                "feedback",
                "buffer",
                "conway",
                "gameoflife",
                "conways",
                "gol"
            ],
            "usePreview": 0,
            "username": "soofgo",
            "viewed": 370
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tfragColor = texture(iChannel0,fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define brushSize 20.0\n\n#define T(i,j) texture(iChannel0, (uv + vec2(i,j)*vec2(1.0/R) )).r \n#define N(i,j)  + float( T(i,j) > 0.)\n\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\nvec3 HueShift (in vec3 Color, in float Shift)\n{\n    vec3 P = vec3(0.55735)*dot(vec3(0.55735),Color);\n    \n    vec3 U = Color-P;\n    \n    vec3 V = cross(vec3(0.55735),U);    \n\n    Color = U*cos(Shift*6.2832) + V*sin(Shift*6.2832) + P;\n    \n    return vec3(Color);\n}\n//noise see https://www.shadertoy.com/view/ltB3zD\nfloat snoise(in vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// set value for r key to reset with\nconst int Key_R = 82;\n\n// process keyboard input\nbool ReadKey( int key )//, bool toggle )\n{\n\tbool toggle = false;\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\n\nvoid mainImage( out vec4 O, in vec2 c )\n{\n\tvec2 R = iResolution.xy;\n    \n    // retrieve the texture coordinate\n    vec2 uv = c.xy / R;\n    \n    // get the current pixel\n    float v = texture(iChannel0, uv).r;\n    \n    // check to seee if we are at the start of the timeline or if the R key is pressed.\n    if(iFrame > 4 && !ReadKey(Key_R))\n    {\n        // draw a circle if the mouse is clicked\n        if(distance(iMouse.xy, c) < brushSize && iMouse.z > .0)\n        {\n        \tO = vec4(1.0);\n        }\n        else\n        {\n            float n =   N(-1,-1) + N(-1, 0) + N(-1, 1)\n                      + N( 0,-1)            + N( 0, 1)\n                      + N( 1,-1) + N( 1, 0) + N( 1, 1);\n\n\n            // resurect if we are not live, and have 3 live neighrbours\n            v += (1.0-float(v > 0.0)) * float(n == 3.0);\n\n            // kill if we do not have either 3 or 2 neighbours\n            v *= float(n == 2.0 || n == 3.0);\n\n            // fade the current pixel as it ages\n            v -= float(v > 0.4)*0.05;\n\n            // write out the pixel\n            \n            vec3 val = HueShift(hsl2rgb(vec3(v)),float(iTime));\n            float pi = 3.141;\n            float F = 0.5 * pi *(uv.x - uv.y + 1.);\n            float F2 = 0.5 * pi *(uv.x + uv.y);\n            O = abs(vec4(sin(val.r * F),sin(val.g* F2), sin(val.b * 0.7), 1.0));\n        }\n    }\n    //Generate some noise to get things going\n    else\n    {\n        O = vec4(snoise(c) > 0.8 ? 1.0 : 0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// 16x acceleration of https://www.shadertoy.com/view/4tSyzy\n// by applying gaussian at intermediate MIPmap level.\n\nconst int samples = 35,\n          LOD = 2,         // gaussian done on MIPmap at scale LOD\n          sLOD = 1 << LOD; // tile size = 2^LOD\nconst float sigma = float(samples) * .25;\n\nfloat gaussian(vec2 i) {\n    return exp( -.5* dot(i/=sigma,i) ) / ( 6.28 * sigma*sigma );\n}\n\nvec4 blur(sampler2D sp, vec2 U, vec2 scale) {\n    vec4 O = vec4(0);  \n    int s = samples/sLOD;\n    \n    for ( int i = 0; i < s*s; i++ ) {\n        vec2 d = vec2(i%s, i/s)*float(sLOD) - float(samples)/2.;\n        O += gaussian(d) * textureLod( sp, U + scale * d , float(LOD) );\n    }\n    \n    return O / O.a;\n}\n\nvec4 threshold(in vec4 tx){\n    const float Soft = 0.001;\n    const float Threshold = 0.02;\n    float f = Soft/5.0;\n\tfloat a = Threshold - f;\n\tfloat b = Threshold + f;\n    float l = (tx.x + tx.y + tx.z) / 3.0;\n\t\n\tfloat v = smoothstep(a, b, l);\n\t\n\treturn vec4(v);\n\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    vec4 blurred = blur( iChannel0, U/iResolution.xy, 1./iChannelResolution[0].xy);\n    vec4 subbed = texture(iChannel0, U/iResolution.xy) - blurred;\n    O = threshold(subbed);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//thanks to Fabrice Neyret for algorhitm https://www.shadertoy.com/view/llySRh\n//and thanks to otaviogood for font texture\n#define C(c) \n#define countdown 5.0\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel2, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if (int(iTime / countdown) % 3 != 0) {\n        // From Game of Life\n        fragColor = texture(iChannel1, fragCoord/iResolution.xy);\n        return;\n    }\n        \n    // From Sobel\n    vec4 s = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    // Draw text\n    vec2 uv = fragCoord / iResolution.y;\n    vec2 position = vec2(0, 0);\n    float FontSize = 15.;\n    vec2 U = ( uv - position)*64.0/FontSize;\n    int sec = int(countdown) - int(mod(iTime, countdown));\n    fragColor = char(U, 48+sec);\n    fragColor = vec4(fragColor.x,fragColor.x,0.0,1.0);\n    fragColor += texture(iChannel0, fragCoord/iResolution.xy);\n    \n\n}\n\n\n//line 12 -> x,y coordinates of text, counted from left down corner\n//line 13 -> higher value = greater font size\n//line 15 -> Every argument is another char",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//thanks to Fabrice Neyret for algorhitm https://www.shadertoy.com/view/llySRh\n//and thanks to otaviogood for font texture\n#define C(c) U.x-=.5; O+= char(U,48+c)\n\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O = vec4(0.0);\n    uv /= iResolution.y;\n    vec2 position = vec2(.5);\n    float FontSize = 8.;\n    vec2 U = ( uv - position)*64.0/FontSize;\n    C(5 - int(mod(iTime, 5.0)));\n    O = O.xxxx;\n}\n\n\n//line 12 -> x,y coordinates of text, counted from left down corner\n//line 13 -> higher value = greater font size\n//line 15 -> Every argument is another char",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}