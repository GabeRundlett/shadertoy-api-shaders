{
    "Shader": {
        "info": {
            "date": "1673559662",
            "description": "Testing something out",
            "flags": 0,
            "hasliked": 0,
            "id": "mtj3zK",
            "likes": 5,
            "name": "depth of field focus study 34",
            "published": 3,
            "tags": [
                "chromaticaberration",
                "study",
                "depthoffield",
                "focus"
            ],
            "usePreview": 0,
            "username": "morisil",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "// Fork of \"depth of field focus study 32\" by morisil. https://shadertoy.com/view/NlKXzz\n// 2023-01-12 21:37:33\n\n// Fork of \"depth of field focus study 2\" by morisil. https://shadertoy.com/view/flc3zX\n// 2021-12-21 13:06:50\n\n// Fork of \"depth of field focus study\" by morisil. https://shadertoy.com/view/sld3zB\n// 2021-11-08 19:52:49\n\nconst float SHAPE_SIZE = .6;\nconst float CHROMATIC_ABBERATION = .01;\nconst float ITERATIONS = 7.;\nconst float INITIAL_LUMA = .5;\n\nfloat getColorComponent(in vec2 st, in float modScale, in float blur) {\n    vec2 modSt = mod(st, 1. / modScale) * modScale * 2. - 1.;\n    float dist = length(modSt);\n    float angle = atan(modSt.x, modSt.y);\n    float shapeMap = smoothstep(SHAPE_SIZE + blur, SHAPE_SIZE - blur, dist);\n    return shapeMap;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st =\n        (2.* fragCoord - iResolution.xy)\n        / min(iResolution.x, iResolution.y);\n\n    st = vec2((cos(st.x * 3.) * .5 + .5),  (cos(st.y * 3.) * .5 + .5));\n    st *= cos(iTime * .005) * 2.0;\n    float modScale = 1.;\n\n    vec3 color = vec3(0);\n    float luma = INITIAL_LUMA;\n    float blur = .2;\n    for (float i = 0.; i < ITERATIONS; i++) {\n        vec2 center = st + vec2(sin(iTime * .05), cos(iTime * .03));\n        //center += pow(length(center), 1.);\n        vec3 shapeColor = vec3(\n            getColorComponent(center - st * CHROMATIC_ABBERATION, modScale, blur),\n            getColorComponent(center, modScale, blur),\n            getColorComponent(center + st * CHROMATIC_ABBERATION, modScale, blur)        \n        ) * luma;\n        st *= 1.3 + getColorComponent(center, modScale, blur) * .5;\n        color += shapeColor;\n        color = clamp(color, 0., 1.);\n        if (color == vec3(1)) break;\n        luma *= .63;\n        blur *= .63;\n    }\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}