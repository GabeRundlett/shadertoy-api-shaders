{
    "Shader": {
        "info": {
            "date": "1640177272",
            "description": "simple combination of these 2 shaders:\nhttps://www.shadertoy.com/view/sdcSDX  (Egg Yolks)\nhttps://www.shadertoy.com/view/NlcSDs  ",
            "flags": 0,
            "hasliked": 0,
            "id": "NtVXzh",
            "likes": 8,
            "name": "Lava Grid",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat h21 (vec2 p, float sc) {\n    p.x = mod(p.x, sc); p.y = mod(p.y, sc);\n    return fract(sin(dot(p.xy, vec2(12.9898, 78.233)))*43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\n// this isnt adding much + quite expensive\nfloat selength(vec2 uv, float n) {\n    return pow(pow(abs(uv.x), n) + pow(abs(uv.y), n), 1./n);\n}\n\nvec2 movingTiles(vec2 uv, float sc, float speed){\n    float time = speed * iTime;\n    \n    // Change me for different patterns\n    float val = 2. * abs(uv.x) + 2. * abs(uv.y) + 1. * time;\n    float ft = fract(val);\n   \n    uv *= sc;\n    \n    float s = step(0.5, ft);\n    float a = 0.5;\n    \n    uv.x +=      s * sign(fract(uv.y * a) - a) * ft * 2.;\n    uv.y += (1.-s) * sign(fract(uv.x * a) - a) * ft * 2.;\n\t\n    return fract(uv * 1.);\n}\n\nfloat rand(vec2 ipos, vec2 fpos, float sc) {\n    float val = 6. * length(fpos-0.5) + h21(ipos, sc) - iTime;\n    //float val = h21(ipos, sc) + iTime;\n    \n    float a = 2. * pi * h21(ipos, sc);\n    float c = cos(a); \n    float s = sin(a);\n    \n    float v1 = h21(vec2(c * floor(val), s * floor(val)) + 0.01 * ipos, sc);\n    float v2 = h21(vec2(c * (floor(val) + 1.), s * (floor(val) + 1.)) + 0.01 * ipos, sc);  \n    \n    float m = fract(val);\n    m = m * m * (3. - 2. * m);\n   \n    return mix(v1, v2, m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/ iResolution.y; \n    uv += 0.02 * iTime;\n    \n    float c = 30.;\n    float sc = 17.;\n    \n    // Cut into grid\n    vec2 ipos = floor(sc * uv) + 0.5;  \n    vec2 fpos = fract(sc * uv) - 0.;\n    \n    // Corner positions\n    vec2 lp  = ipos + vec2(1,0);\n    vec2 tp  = ipos + vec2(0,1);\n    vec2 tlp = ipos + vec2(1,1);  \n    vec2 idp = ipos + vec2(0,0);\n\n    // Generate values for each corner of uv\n    float sc2 = c * sc;\n    float l  = rand(lp,  fpos, sc2);\n    float t  = rand(tp,  fpos, sc2);\n    float tl = rand(tlp, fpos, sc2);\n    float id = rand(idp, fpos, sc2);\n\n    // Smooth fpos so boundaries meet smoothly\n    vec2 sfpos = fpos * fpos * (3. - 2. * fpos);\n\n    // Box lerp between the corner values\n    float v = l  * sfpos.x      * (1.-sfpos.y)\n     \t    + t  * (1.-sfpos.x) * sfpos.y\n     \t    + tl * sfpos.x      * sfpos.y\n      \t    + id * (1.-sfpos.x) * (1.-sfpos.y);\n        \n    // Do the tile pattern (maybe this should be fpos?)\n    uv = movingTiles(uv, sc, 0.2 + 0.0003 * cos(10. * v + iTime));\n\n    // Draw stuff\n    float n = 4.;\n    vec3 e = vec3(1.);\n    vec3 col = v * pal(0.025 - 0.05 * h21(uv) + selength(uv-0.5, n), \n                       e, e, e, 0.5 * v  + 2.6 * vec3(0.,0.33,0.66));\n    /*\n    float k = 1.;\n    float s = smoothstep(-k, k, -0.5 - 0.5 * cos(10. * v) + v);\n    vec3 col =  s * v * pal(0.025 - 0.05 * h21(uv) + selength(uv-0.5, n), \n                       e, e, e, 0.5 * v  + 2.6 * vec3(0.,0.33,0.66));\n    col += (1. - s) * v;\n    */\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}