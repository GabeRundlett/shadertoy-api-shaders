{
    "Shader": {
        "info": {
            "date": "1703108975",
            "description": "Orb Audio Lines",
            "flags": 0,
            "hasliked": 0,
            "id": "4fX3D7",
            "likes": 4,
            "name": "Orb Audio Lines",
            "published": 3,
            "tags": [
                "lines",
                "colorful",
                "audio",
                "glow",
                "orb"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 221
        },
        "renderpass": [
            {
                "code": "const float TAU = 6.2831;\n\nfloat hash21(vec2 p) {\n    p = fract(p * vec2(123.34, 456.21));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\nvec2 rand(vec2 p)\n{\n\tp = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n\treturn 2.0*fract(sin(p)*43758.5453123) - 1.0;\n}\n\nfloat noise(vec2 p)\n{\n\tvec2 i = floor(p + (p.x+p.y)*0.366025404);\n    vec2 a = p - i + (i.x+i.y)*0.211324865;\n    float m = step(a.y,a.x); \n    vec2 o = vec2(m,1.0-m);\n    vec2 b = a - o + 0.211324865;\n\tvec2 c = a - 1.0 + 2.0*0.211324865;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0);\n\tvec3 n = h*h*h*h*vec3( dot(a,rand(i+0.0)), dot(b,rand(i+o)), dot(c,rand(i+1.0)));\n    return dot(n, vec3(70))*.5+.5;\n}\n\nvec2 rot2D(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvec4 orb(vec2 uv, float t, float min_res) {\n    float l = dot(uv, uv);\n    l *= l * l * l;\n    vec3 n = normalize(vec3(uv, sqrt(abs(1.0 - l))));\n    float f = 48.0 / min_res;\n    float mask = smoothstep(1.0, 1.0 - f, l);\n    float alpha = pow(l, 0.2) * mask;\n    vec4 col = vec4(mix(vec3(0.1, 0.0, 0.5), vec3(0.4, 0, 0.5), min(1.0, dot(n, vec3(.5, .5, -.1)) + l)), alpha);\n    col.rgb += smoothstep(0., 1., noise(rot2D(n.xy, -t * 0.5) / (1.0 + n.z * n.z * n.z) + t)) * vec3(.4, .2, .7);\n    col.rgb += smoothstep(.2, .9, noise(rot2D(n.xy, t) * 2. / (1.0 + n.z * n.z * n.z) - t)) * smoothstep(0.2, 0.0, l) * vec3(.2, .1, .5);\n    float fresnel = mask * (luma(col.rgb) + 0.5) * pow(l, 4.0);\n    col.rgb += fresnel;\n    col.a += col.a * fresnel;\n    float s = smoothstep(1., -1.0, noise(vec2(-t) + n.z * 3. + noise(noise(n.xy) * 4. + \n        normalize(rot2D(n.xy, t)) * (0.9 + length(n.xy) * 1.5) * 4. + t) * .2));\n    col = vec4(mix(col.rgb - vec3(0.2, .3, .6) * s, col.rgb, s), col.a / (1.0 + 1. * s));\n    float d = 1.0 / (0.1 + pow(length(uv) - 1.0, 2.));\n    col.a += (1.0 - mask) * d * 0.1;\n    return col;\n}\n\nvec4 lines(vec2 uv, float t) {\n    t *= 0.6;\n    vec4 col = vec4(0);\n    vec2 nv = normalize(uv);\n    float d = 1.0 + noise(nv + t) * .2;\n    \n    float mask = smoothstep(0.05, 0.0, distance(nv * d, uv));\n    col.rgb = mix(col.rgb, vec3(0.3, 1, 0.5) + vec3(smoothstep(0.96, 1.05, mask)), mask);\n    col.a += mask;\n\n    d = 1.0 + noise(nv + t + 85.161) * .2;\n    mask = smoothstep(0.05, 0.0, distance(nv * d, uv));\n    col.rgb = mix(col.rgb, vec3(0.2, 0.7, 1) + vec3(smoothstep(0.96, 1.05, mask)), mask);\n    col.a += mask;\n\n    d = 1.0 + noise(nv + t - 85.161) * .2;\n    mask = smoothstep(0.05, 0.0, distance(nv * d, uv));\n    col.rgb = mix(col.rgb, vec3(1, 0.2, 0.4) + vec3(smoothstep(0.94, 1.05, mask)), mask);\n    col.a += mask;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float min_res = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min_res * 1.6;\n    float t = iTime * 0.5;\n    fragColor.a = 0.0;\n\n    vec3 col = vec3(0);\n    vec4 orb = orb(uv, t, min_res);    \n    col.rgb += orb.rgb * orb.a;\n    fragColor.a += orb.a;\n\n    vec4 li = lines(uv, t);\n    col.rgb = orb.rgb * orb.a;\n    col.rgb = mix(col.rgb, li.rgb, li.a);\n    fragColor.a += li.a;\n\n    fragColor.rgb = col * fragColor.a;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}