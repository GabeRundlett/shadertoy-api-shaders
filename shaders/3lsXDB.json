{
    "Shader": {
        "info": {
            "date": "1564161759",
            "description": "paint with strokes (thickness=speed).\nSPACE to toggle edit mode.  \n   -> then : \n            pick stroke to move it \n            pick+DEL to delete\n            pick + S to scale\n            pick + R to rotate\n            pick + C to clone\n",
            "flags": 48,
            "hasliked": 0,
            "id": "3lsXDB",
            "likes": 11,
            "name": "mouse recorder / vector paint",
            "published": 3,
            "tags": [
                "paint",
                "util",
                "edit",
                "vectorpaint",
                "illustrator",
                "inkscape"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 931
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    U /= R.y;\n    vec4 P = T(pos(1.)), P_;\n    float d = 1e9, s, l,w, ii, N = T(0).x,\n        r, _r = r = length(T(pos(2.))-P), r_;\n    \n    for(float i=2.; i < N; i++) {         // --- redraw recorded mouse pos\n        P_ = T(pos(i));\n        r_ = P_.z>0. ? length(T(pos(i+1.)).xy-P_.xy) : r;\n        if ( P.z > 0. && P_.z > 0.) {     // node value = segment average\n            l = line (U, P.xy, P_.xy, s);\n            w = .1* min(.3,(r+mix(_r,r_,s))/2.); // width = interp node values\n            if ( l-w < d ) d = l-w, ii=i;\n            //d = min(d, l - .1*length(P.xy-P_.xy));\n        } \n        _r = r, r = r_;                   // *r* = segment length\n        P = P_;\n    }\n    O = vec4( smoothstep(blur*1.5/R.y,0.,d) );  \n    \n    if keyToggle(32) {                    // --- edit mode\n        O.r += .2; O.gb *= .8; \n      //if (index(floor(U*R.y)) < N) { O.g++; return; }\n        float i, str = T(0).y-1.; \n        if ( str<0. || ii < str ) return;\n\n        for( i=str; i < N && T(pos(i)).z>0.; i++); // check if on current stroke\n        if ( ii <= i ) O.gb *= 0.;        // cur stroke in red\n\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if (iFrame==0) { O-=O; return; }\n\n    U -= .5;\n    O = T(U);                           // previous state\n    vec2 M = iMouse.xy / R.y;\n\n    if keyToggle(32) {                  // === edit mode\n        if (U==vec2(0)) O.y *= float( iMouse.z > 0.) ;\n        if ( iMouse.z > 0. ) {\n            if ( U==vec2(0)) {                    // --- picking a stroke\n                if (T(0).y == 0.) {\n                    vec4 P = T(pos(1.)), P_;\n                    float d = 1e9, s, l, im = -1., str = 1., strm = -1., stri = 1., strmi = -1.;\n\n                    for(float i=2.; i < T(0).x; i++) { // parse recorded mouse pos\n                        P_ = T(pos(i));\n                        if ( P.z > 0. && P_.z > 0.) {\n                            l = line (M, P.xy, P_.xy, s);\n                            if ( l < d ) d = l, im = i, strm = str, strmi=stri;\n                        } \n                        P = P_;\n                        if ( P.z < 0. ) str++, stri = i+1.;// cur stroke\n                    }\n                    O.y = d <.02 ? strmi+ 1.: 0.; // picked stroke start                  \n                }\n                O.zw = M;                         // cur mouse pos\n            }\n          // else // commented because of 'C'\n            {                         // --- action on current stroke\n                float str = T(0).y-1., N = T(0).x,\n                        p = index(U), i; \n                if (str < 0.) return; // || index(U) < str) return;\n\n                vec2 G = vec2(0);\n                for(i=str; i < N && T(pos(i)).z > 0.; i++) // parse cur stroke\n                    G += T(pos(i)).xy;\n                \n                if keyDown(64+3) {                // 'C'\n                    i++;\n                    if ( p > N && p <= N+i-str )\n                        O = T(pos(str+p-N-1.));   // clone\n                    if (U==vec2(0)) O.x += i-str;\n                    return;\n                }\n                if (U==vec2(0)) return; // why not included below ?\n                if (p < str || i < p ) return; \n                G /= i-str;                       // barycenter\n                \n                vec2 M0 = T(0).zw;                // we are on cur stroke\n                if ( keyClick(8) || keyClick(46) )// 'DEL'\n                     O.xy = vec2(-1);             // delete\n                else if keyClick(64+19)           // 'S'\n                    O.xy  = (O.xy-G) * (M-G)/(M0-G) + G; // scale\n                else if keyClick(64+18)           // 'R'\n                { M-=G; M0-=G; \n                  float a = atan(M.y,M.x) - atan(M0.y,M0.x);\n                  O.xy  = (O.xy-G) * rot(a) + G;  // rotate\n                }\n                else\n                    O.xy += M-M0;                 // move\n            }\n        }}\n\n    else {    // === store all mouse events when click + 1st non-click\n        if (U==vec2(0)) O.y = float(iMouse.z > 0.);\n        if (iMouse.z > 0. || T(0).y > 0. ) {\n            float t = T(0).x+1.;                  // current index\n            if (U==vec2(0)) O.x = t; //, O.y = float(iMouse.z > 0.);\n            if (index(U) == t) O = iMouse/R.y;    // store mouse\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// (0,0) stores ( # mouse event, mouse-click * (1+cur_stroke), prev_mouse_pos )\n// then list of mouse events M.xyzw, + first non-click ( M.z < 0 ).\n// TODO: recycle mem at least if deletion at end of heap.\n//       optimize splating by encoding a z-curve + bbox. or bbox list ?\n\n#define blur  2.                               // strokes blurriness\n\n#define T(U)     texelFetch(iChannel0, ivec2(U), 0)\n#define R        iResolution\n#define index(U) U.x+R.x*U.y\n#define pos(i)   vec2( mod(i,R.x), floor((i)/R.x) )\n\n// draw line. from https://www.shadertoy.com/view/4dcfW8\nfloat line(vec2 p, vec2 a,vec2 b, out float s) {\n    p -= a, b -= a;\n    s = clamp(dot(p, b) / dot(b, b), 0., 1.);  // proj coord on line\n    p -= b * s;                                // s = ordinate on segment;\n    return length(p);                          // dist to segment\n}\n\n#define keyToggle(ascii)  ( texelFetch(iChannel3,ivec2(ascii,2),0).x > 0.)\n#define keyDown(ascii)    ( texelFetch(iChannel3,ivec2(ascii,1),0).x > 0.)\n#define keyClick(ascii)   ( texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.)\n\n#define rot(a) mat2( cos(a), -sin(a), sin(a), cos(a) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}