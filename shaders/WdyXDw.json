{
    "Shader": {
        "info": {
            "date": "1574137587",
            "description": "3D VR version of my kaleidozoom shader",
            "flags": 0,
            "hasliked": 0,
            "id": "WdyXDw",
            "likes": 11,
            "name": "Kaleidozoom VR",
            "published": 3,
            "tags": [
                "psychedelic",
                "kaleidoscope",
                "trippy",
                "trig",
                "geometric"
            ],
            "usePreview": 0,
            "username": "shadeThrower",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    float tme = iTime*.2;\n    float scale = 0.125;\n   \n    float posMod;\n    float posModGradA;\n    float posModGradB;\n    posMod = (cos(tme/2.+3.1416)*.95 + .05)/2.+.5;\n    posModGradA = (cos(tme*1.1)*.9 + .1)/2.+.5;\n    posModGradB = (cos(tme*.9)*.9 + .1)/2.+.5;\n    \n    vec2 adjVec = vec2((sin(tme)*.5), (cos(tme)*.5));\n    \n    vec2 uv = fragCoord/iResolution.xy* vec2(2.,2.);\n    if(fragCoord.x/iResolution.x > 0.5){\n        uv.x -= 1.;\n    }\n    else{\n        uv.x = 1. - uv.x;\n    }\n    uv.x = pow(uv.x*1., 1.+uv.x*posModGradB*.7)*(1.+pow(abs(1.-uv.y)*posModGradA*.7, 2.));\n  \tuv.y -= .5;\n    \n    //Diagonal Moving\n    //uv.x = sin((fract(tme)+uv.x)*3.14)/2.+.5;\n    //uv.y = cos((fract(tme)+uv.y)*3.14)/2.+.5;\n    \n    //Mouse Movement Multiple\n    /*if(fragCoord.x/iResolution.x > 0.5){\n    \tuv.x = sin((1.-iMouse.x/iResolution.y*10.+uv.x)*3.14)/2.+.5;\n    } else {\n        uv.x = sin((1.+iMouse.x/iResolution.y*10.+uv.x)*3.14)/2.+.5;\n    }\n    uv.y = cos((1.-iMouse.y/iResolution.x*16.+uv.y)*3.14)/2.+.5;*/\n\n    //Auto Move Circular\n    //uv.x = sin((1.-(sin(tme/2.)/2.+1.)*5.+uv.x)*3.14)/2.+.5;\n    //uv.y = cos((1.-(cos(tme/2.)/2.+1.)*8.+uv.y)*3.14)/2.+.5;\n    \n    // Move and Zoom\n\t//uv.x = sin((1.-.5*5.+uv.x)*6.28*(sin(tme)+2.))/2.+.5;\n    //uv.y = sin((1.-.5*8.+uv.y)*6.28*(sin(tme)+2.))/2.+.5;\n    \n    \n    //Rotation (in progress)\n    /*vec2 uvTmp = uv;\n    uvTmp.x += sin(length(uv-vec2(.5,.5)))*(sin(tme)/2.+.5);\n    uvTmp.y += cos(length(uv-vec2(.5,.5)))*(sin(tme)/2.+.5);\n    uv = uvTmp;*/\n    \n    vec2 uvM;\n    //uv = vec2(pow((uv.x-.5)*length(normalize(uv-0.5))*5., -.05)*posMod, pow((uv.y-.5)*length(normalize(uv-0.5))*5., -.05)*posMod);\n    //uv = vec2(pow((uv.x-.5)*length(uv-0.5)*5., -.07)*posMod*2., pow((uv.y-.5)*length(uv-0.5)*5., -.07)*posMod*2.);\n    \n    \n    //Autozoom\n    /*uv = vec2(pow(abs(uv.x-.5)+length(uv-.5), -.07)*posMod*3., pow(abs(uv.y-.5)+length(uv-.5), -.07)*posMod*3.);\n    uvM = mod(uv, scale);*/\n    \n    \n    //Forward Travel\n    //INTERACTIVE: Mouse X controls flight speed, Mouse Y controls depth\n    float normX;\n    float normY;\n    if(iMouse.y>0. || iMouse.x>0.){\n    \tnormX = ((iMouse.x)-1.)/iResolution.x;\n    \tnormY = ((iMouse.y)-1.)/iResolution.y;\n    }\n    else{\n        normX = 0.3;\n        normY = 0.3;\n    }\n    normX = .4;\n    normY = .6;\n    float zoomMult = pow(max(normY,0.001)*5., .5);\n    uv = vec2(pow(abs(uv.x-.5)+length(uv-.5), -.07)*zoomMult*2., pow(abs(uv.y-.5)+length(uv-.5), -.07)*zoomMult*2.);\n    uvM = mod(uv+fract((tme)*normX)*5.*(normY*.75+.25), scale);\n\t//End interactive\n    \n    \n    uv = normalize(uvM-vec2(scale/2.))*(adjVec+vec2(.5));\n\n    if(mod(floor((uv.x)/scale),2.) == 0.)\n            uvM.x = scale - uvM.x;\n    if(mod(floor((uv.y)/scale),2.) == 0.)\n            uvM.y = scale - uvM.y;\n\n    uvM += adjVec*length(uvM + adjVec - vec2(0.5));\n\n    // With uvM and uv gradients\n    vec3 col = vec3(0.5 + 0.5*tan((cos(tme)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(((cos(length(uv*posModGradA*100.))*.4+.6)+(cos(length(uvM*posModGradB*100.))*.4+.6))/2.),\n                    0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(((cos(length(uv*posModGradA*100.))*.4+.6)+(cos(length(uvM*posModGradB*100.))*.4+.6))/2.),\n                    0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*(uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))))*(((cos(length(uv*posModGradA*100.))*.4+.6)+(cos(length(uvM*posModGradB*100.))*.4+.6))/2.);\n    \n    // With uv gradients\n    /*vec3 col = vec3(0.5 + 0.5*tan((cos(tme)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(cos(length(uv*posModGrad*100.))*.4+.6),\n                    0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(cos(length(uv*posModGrad*100.))*.4+.6),\n                    0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*(uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))))*(cos(length(uv*posModGrad*100.))*.4+.6);*/\n    \n    // True to fragCoord (in progress)\n    /*vec3 col = vec3(0.5 + 0.5*tan((cos(tme)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(cos(length(((fragCoord/iResolution.xy-.5)*posMod))*100.)/2.+.5),\n                    0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(cos(length(((fragCoord/iResolution.xy-.5)*posMod))*100.)/2.+.5),\n                    0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*(uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))))*(cos(length(((fragCoord/iResolution.xy-.5)*posMod))*100.)/2.+.5);*/\n    \n    // Without gradients\n    /*vec3 col = vec3(0.5 + 0.5*tan((cos(tme)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.)))),\n                    0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.)))),\n                    0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*(uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))));*/\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}