{
    "Shader": {
        "info": {
            "date": "1723778234",
            "description": "Dithering vibe",
            "flags": 0,
            "hasliked": 0,
            "id": "MflfR7",
            "likes": 1,
            "name": "Sinister Pixel Balls",
            "published": 3,
            "tags": [
                "sdf",
                "dithering"
            ],
            "usePreview": 0,
            "username": "ShadeWhizz",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265358979323846264;\nconst int MAX_PRIMARY_RAY_STEPS = 256; //decrease this number if it runs slow on your computer\nfloat iters = 0.0;\n\nfloat sdPyramid( in vec3 p, in float h )\n{\n    float m2 = h*h + 0.25;\n    \n    // symmetry\n    p.xz = abs(p.xz);\n    p.xz = (p.z>p.x) ? p.zx : p.xz;\n    p.xz -= 0.5;\n\t\n    // project into face plane (2D)\n    vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n   \n    float s = max(-q.x,0.0);\n    float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n    \n    float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n\tfloat b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n    float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n    // recover 3D and scale, and add sign\n    return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));;\n}\n\nfloat distanceField(vec3 p) {\n\t//return sdPyramid(p, 0.7);\n    return length(mod(p, 4.0) - 2.0) - 1.0;\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        distanceField(p + e.xyy) - distanceField(p - e.xyy),\n        distanceField(p + e.yxy) - distanceField(p - e.yxy),\n        distanceField(p + e.yyx) - distanceField(p - e.yyx)\n    ));\n}\n\nvec3 castRay(vec3 pos, vec3 dir, float threshold) {\n\tfor (int i = 0; i < MAX_PRIMARY_RAY_STEPS; i++) {\n\t\t\tfloat dist = distanceField(pos);\n\t\t\tif (abs(dist) < threshold) break;\n\t\t\tpos += dist * dir * 0.9;\n            iters = float(i);\n\t}\n\treturn pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 wh = vec2(320.0, 180.0)/2.;\n    uv = floor(uv*wh)/wh;\n    float angle = iTime * 0.25;\n    float radius = 1.6;\n    vec3 target = vec3(0.0, 0.35, 0.0);\n    vec3 ro = vec3(sin(angle) * radius, 0.3, cos(angle) * radius);\n    vec3 forward = normalize(target - ro);\n    vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));\n    vec3 up = cross(forward, right);\n    vec3 rd = normalize(uv.x * right + uv.y * up + 2.0 * forward);\n\tvec3 planeU = vec3(1.0, 0.0, 0.0) * 0.8;\n\tvec3 planeV = vec3(0.0, iResolution.y / iResolution.x * 1.0, 0.0);\n\tvec3 rayPos = castRay(ro, rd, 0.0001);\n    //float ao = 1.0 - (iters / 64.0);\n    float ao = exp(-0.02725*iters);\n    vec3 normal = calcNormal(rayPos);\n    vec3 sun_dir = normalize(vec3(0.1, 0.8, 0.6));\n    float d = (max(dot(sun_dir, normal), 0.0)+0.5)/1.5;\n    //d *= ao;\n    //d = pow(d, 0.99);\n    d *= ao;\n    \n    float bayer = texture(iChannel0, uv*wh/8.0).x;\n    vec3 col = vec3(1.0);\n    float gl = 8.0;\n    float cquant = floor(d*gl)/gl;\n    float res = d-cquant;\n    col = vec3(cquant);\n    if (res*gl > bayer) {\n        col += 1.0/gl;\n    }\n    //col *= d*bayer;\n    //col *= bayer;\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}