{
    "Shader": {
        "info": {
            "date": "1618595197",
            "description": "Creating fire using noise sampling",
            "flags": 0,
            "hasliked": 0,
            "id": "wtGyzw",
            "likes": 1,
            "name": "Fire Iteration",
            "published": 3,
            "tags": [
                "fire"
            ],
            "usePreview": 0,
            "username": "abhinavneelam",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat texture0(vec2 uv)\n{\n    return texture(iChannel0, uv).x;\n}\n\nfloat rangestep(float px, float py, float x)\n{\n    float f3 = abs(px-py);\n    \n    float f4 = 2.0/f3;\n    \n    return -clamp(floor(abs((f4* (x-f3/2.0 - px)))),0.0,1.0)+1.0;\n}\n\nvec3 back(vec2 uv)\n{\n    float a = (noise(30.0*uv)*.5+.5);\n    \n    float or= 3.0;\n    \n    uv -= vec2(0.02,0.2);\n    uv*=vec2((0.75-0.70) * (.5*sin(or*iTime)+.5) + 0.7\n                    ,(0.55-0.48) * (.5*sin(or*iTime)+.5) + 0.48);\n    uv += vec2(0.13,0.0);\n    \n    float ss = 0.7*(1.0-smoothstep(.7,1.2, 2.2*distance(vec2(0.5,0.0),1.1*uv)));\n    \n    float w1 = 2.0 * noise(vec2(iTime,iTime))*.5+.5;\n    \n    float w2 = (1.0/8.0)*max(floor(6.0*w1),0.0);\n\n    vec3 col = 0.4*ss*vec3(1.0,0.0,0.0) * vec3(w2+noise(9.0*uv)*.5+.5);\n    \n    return col;\n}\n\nvec3 rgb(vec3 c)\n{\n    return c/255.0f;\n}\n\nvec2 rotatePoint(float angle, vec2 p)\n{\n    float si = sin(angle);\n    float co = cos(angle);\n    \n    return mat2( co, -si, si, co) * p;\n}\n\nvec3 particles(vec2 uv)\n{\n    float POINTS = 8.0;\n    \n    vec3 c = vec3(0.0);\n    float t = iTime;\n    \n    for(float i = 0.0;i<POINTS;i++)\n    {\n        float radius = 0.12;\n        radius = 0.2;\n        \n        float adif = 3.;\n        adif=10.;\n        \n        float rot;\n        //rot = (-PI/adif - PI/adif)*(.5*sin(t)+.5) + PI/adif;\n        \n        vec2 rand;\n        rand.x = texture0(vec2(i,i) / vec2(POINTS));\n        rand.y = texture0(vec2(rand.x));\n        \n        rand.y = mod(rand.y+t*8.5, 1.0);\n        \n        radius = (0.25-0.12) * (rand.y) + 0.12;\n        \n        float rx = rand.x = (0.9-0.1) * rand.x + 0.1;\n        float ry = rand.y = 60.0 * (1.0-0.0) * rand.y + 0.0;\n        \n        float rc = 9.0 * texture0(vec2(rand.x, rand.y));\n        \n        rot = (-PI/adif - PI/adif) * rand.x + PI/adif;\n        \n        vec2 p = rotatePoint(rot, rand-uv);\n        float pl = length(p);\n        \n        float cl = length(cross(vec3(0.0,1.0,0.), vec3(p,0.)));\n        \n        float clthres = 0.001;\n        \n        vec3 color = mix(rgb(vec3(255,40,0)),rgb(vec3(255,140,0)), rc);\n        \n        if(pl < radius && cl < clthres)\n            c += color * smoothstep(0.1 + radius, 0.1, (1./radius)*distance(uv,rand));\n    }\n    //rot, color, pos, \n\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = back(uv);\n    \n    float time = iTime;\n    //time=1.0;\n    \n    float iuv = 0.9*uv.y;\n    float box = rangestep(.3,.7,uv.x) * rangestep(.0,.9,uv.y);\n    //box=1.0;\n    \n    float b1 = 0.3 * sin(time) + 0.7;\n    float turby = 0.5 * uv.y * sin(5.0*time) + 1.0;\n    \n    float bad = 0.2*b1*noise(vec2(5.0*uv.x, uv.y)) + 0.4*turby*noise(vec2(0.8*uv.x+time,uv.y));\n    float turbx = uv.x + bad;\n    \n    float tempdist = distance(vec2(0.5,0.0),vec2(uv));\n    tempdist = 0.7*(1.0-smoothstep(vec2(0.0, 0.1).y, vec2(0.5,1.11).y,0.5* tempdist));\n    \n    vec3 orange = vec3(247.f, 103.f, 7.f) / 255.f;\n    vec3 col2 = tempdist*8.9 * orange * vec3((noise(25.0*vec2(turbx,0.15*uv.y - 0.3 * time)) * .5 + .5));\n    \n    vec2 p = uv + vec2(-0.5,-0.5+0.4);\n    p.x *= iResolution.x/iResolution.y;\n    \n    float v = smoothstep(-1.0, 1.2, 1.1*1.5*length(p) - 0.3);\n    //v=0.f;\n    col = mix(col2, col, v);\n    \n    //col = particles(uv);\n    //col += particles(uv)-col;\n    \n    col+=particles(uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}