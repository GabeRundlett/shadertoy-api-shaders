{
    "Shader": {
        "info": {
            "date": "1642752055",
            "description": "Base Grid",
            "flags": 0,
            "hasliked": 0,
            "id": "7dlyW2",
            "likes": 3,
            "name": "Base Grid Shader",
            "published": 3,
            "tags": [
                "grid",
                "basic"
            ],
            "usePreview": 0,
            "username": "cambalamas",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "#define GRID_VIEW 0\n#define TRUCHET   1\n#define DYNAMIC   1\n#define UV_SCALE  15.0\n\n\n//===================\n\n#define ARROW_STEM_THICKNESS 0.02\n#define ARROW_STEM_ANTIALIAS 5.0\n#define ARROW_HEAD_WIDTH     0.1\n#define ARROW_HEAD_HEIGHT    0.2\n#define ARROW_HEAD_ANTIALIAS 25.0\n#define SCALE 1.25\n\nfloat vector_projection_scalar(vec2 vec_a, vec2 vec_b){\n    return dot(vec_a, vec_b) / dot(vec_b, vec_b);\n}\nfloat df_line_segment(vec2 vec_p, vec2 vec_a, vec2 vec_b){\n    vec2 dvec_ap = vec_p - vec_a;  // Displacement vector from vec_a to vec_p\n    vec2 dvec_ab = vec_b - vec_a;  // Displacement vector from vec_a to vec_b\n    vec2 vproj_ap_ab = dvec_ab * clamp(vector_projection_scalar(dvec_ap, dvec_ab), .0, 1.);  // Vector projection from ap to ab\n    return distance(dvec_ap, vproj_ap_ab) - ARROW_STEM_THICKNESS;  // Distance field! This is IT!\n}\nfloat sdf_triangle(vec2 vec_p, vec2 vec_a, vec2 vec_b, vec2 vec_c){\n    vec2 dvec_ab = vec_b - vec_a;  // Displacement-vector\n    vec2 dvec_ac = vec_c - vec_a;  // Displacement-vector\n    vec2 dvec_ap = vec_p - vec_a;  // Displacement-vector\n    float det_dvec_ab_dvec_ac = dvec_ab.x * dvec_ac.y - dvec_ac.x * dvec_ab.y;  // Determinant of the 2 x 2 matrix made of row vectors dvec_ab and dvec_ac\n\tfloat det_dvec_ap_dvec_ac = dvec_ap.x * dvec_ac.y - dvec_ac.x * dvec_ap.y;  // Determinant of the 2 x 2 matrix made of row vectors dvec_ap and dvec_ac\n    float det_dvec_ab_dvec_ap = dvec_ab.x * dvec_ap.y - dvec_ap.x * dvec_ab.y;  // Determinant of the 2 x 2 matrix made of row vectors dvec_ab and dvec_ap\n    float inv_det_dvec_ab_dvec_ac = 1. / det_dvec_ab_dvec_ac;  // Multiplicative-inverse of a determinant\n    float bary_x = det_dvec_ap_dvec_ac * inv_det_dvec_ab_dvec_ac;  // Why does this work?\n    float bary_y = det_dvec_ab_dvec_ap * inv_det_dvec_ab_dvec_ac;  // Why does this work?\n    float bary_z = 1. - bary_x - bary_y;  // The last barycentric coordinate is easy!\n    return min(min(bary_x, bary_y), bary_z);\n}\nstruct Arrow\n{\n    vec2  base;  // Position vector!\n    float dir;   // Angle!\n    float norm;  // Positive number!\n};\nfloat draw_arrow(vec2 uv, Arrow arrow){\n\tvec2  base = arrow.base;\n    float dir  = arrow.dir;\n    float norm = arrow.norm;\n    uv = mat2(cos(dir), -sin(dir), sin(dir), cos(dir)) * uv;  // Rotate local coordinates by complex left-multiplication\n    float stem_len = max(.0, norm - ARROW_HEAD_HEIGHT);\n    float stem = df_line_segment(uv, base, base + vec2(stem_len, .0));\n    vec2  head_a = base + vec2(norm, .0);\n    vec2  head_b = base + vec2(stem_len, .0 + ARROW_HEAD_WIDTH);\n    vec2  head_c = base + vec2(stem_len, .0 - ARROW_HEAD_WIDTH);\n    float head   = sdf_triangle(uv, head_a, head_b, head_c);\n    stem = smoothstep(ARROW_STEM_ANTIALIAS / iResolution.y, .0, stem);\n    head = smoothstep(0., ARROW_HEAD_ANTIALIAS / iResolution.y, head);\n    return max(stem, head);\n}\n\n//===================\n\n\nfloat Hash21(in vec2 p)\n{\n    p = fract(p*vec2(134.34, 435.345));\n    p += dot(p,p+64.23);\n    return fract(p.x*p.y);\n}\n\nvoid genArrow(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = SCALE * (2. * fragCoord - iResolution.xy) / iResolution.y;  // The Fabrice map!\n    vec2 mouse_uv = (2. * iMouse.xy - iResolution.xy) / iResolution.y;\n\n    Arrow arrow;\n    arrow.base = vec2(0,0);\n    arrow.dir  = -2.15;\n    arrow.norm = (.5 * sin(iTime)) + .85;\n    float arrow_df = draw_arrow(uv, arrow);\n\n    fragColor.rgb = vec3(arrow_df);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\n\n    // UVs\n    vec2 uv = UV_SCALE * (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    // Time\n    float tScl = .00000003;\n    \n    // Grid Generation\n    vec2 gv = fract(uv) - .5;\n    vec2 id = floor(uv);\n\n    // Animation\n#if DYNAMIC\n    float n = Hash21(id + iTime*tScl);\n#else\n    float n = Hash21(id);\n#endif\n\n    // Color\n    vec3 col = vec3(n);\n    \n    // Truchet\n#if TRUCHET\n    if (n<.5) gv.x *= -1.;\n    float d = abs( abs(gv.x + gv.y) - .5 );\n    float halfThickness = .2;\n    float mask = smoothstep(.01, -.01, d-halfThickness);\n    //col = vec3(0) + ( mask==1. ? vec3(.6,.8,.9) : vec3(.3,.6,.8) ); // Cold\n    col = vec3(0) + ( mask==1. ? vec3(.9,.6,.4) : vec3(.8,.4,.3) ); // Warm\n#endif\n    \n    // Grid Visualization\n#if GRID_VIEW\n    float bound = .46;\n    if (UV_SCALE<=20. && (abs(gv.x)>bound || abs(gv.y)>bound)) col += vec3(.2);\n#endif\n    \n    // Output Color\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}