{
    "Shader": {
        "info": {
            "date": "1714714219",
            "description": "Attempting to smoothly connect functions after getting egged on by a video that popped up in my youtube feed. Started out with e^(-1/x), domain transformed it to get a bump function, then integrated it to get this.",
            "flags": 0,
            "hasliked": 0,
            "id": "4cVXRR",
            "likes": 24,
            "name": "Smooth Smoothstep",
            "published": 3,
            "tags": [
                "math",
                "smoothstep",
                "smoothness",
                "cinf"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 218
        },
        "renderpass": [
            {
                "code": "/*float ssmoothslope(in float x) {\n    const float dx = 0.001;\n    if (x < dx || x > 1.0 - dx) return 0.0;\n    return exp(1.0 / (x * (x - 1.0))) * 142.250375777;\n}\n\n// Normalized integral of ssmoothslope\nfloat ssmoothstep(in float x) {\n    const float dx = 0.001;\n    if (x < dx) return 0.0;\n    if (x > 1.0 - dx) return 1.0;\n    float sum = 0.0;\n    for (float t = dx; t < x; t += dx) sum += exp(1.0 / (t * (t - 1.0))) * dx;\n    return sum * 142.250375777;\n}*/\n\n// Integralless version from https://math.stackexchange.com/questions/846743/example-of-a-smooth-step-function-that-is-constant-below-0-and-constant-above\nfloat ssmoothslope(in float x) {\n    if (x < 0.01 || x > 0.99) return 0.0;\n    float u = 1.0 - 2.0 * x;\n    float v = x * (1.0 - x);\n    float p = exp(u / v);\n    float q = v * (1.0 + p);\n    return (2.0 * v + u * u) * p / (q * q);\n}\n\nfloat ssmoothstep(in float x) {\n    if (x < 0.01) return 0.0;\n    if (x > 0.99) return 1.0;\n    return 1.0 / (1.0 + exp((1.0 - 2.0 * x) / (x * (1.0 - x))));\n}\n\n#define paint(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 5.0 - vec2(0.0, 1.0);\n    float unit = 10.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    // Draw grid\n    paint(abs(fract(uv.x + 0.5) - 0.5), vec3(0.25));\n    paint(abs(fract(uv.y + 0.5) - 0.5), vec3(0.25));\n\n    // Draw smooth smoothstep function\n    float ss = ssmoothstep(uv.x * 0.25 + 0.5) * 2.0 - 2.0;\n    float ssp = ssmoothslope(uv.x * 0.25 + 0.5) * 0.5;\n    paint(abs(uv.y - ss) / sqrt(ssp * ssp + 1.0), vec3(1.0));\n\n    // Draw exponential and cosine wave\n    float left = -2.5 - 2.0 * sin(iTime);\n    float right = 2.05 + cos(iTime);\n    float gap = right - left;\n    float f = -exp(uv.x) - 2.0, fp = -exp(uv.x);\n    float g = cos(uv.x), gp = -sin(uv.x);\n    if (uv.x < left || mod(uv.x, 0.25) < 0.125) paint(abs(uv.y - f) / sqrt(fp * fp + 1.0), vec3(1.0, 0.0, 0.0));\n    if (uv.x > right || mod(uv.x, 0.25) < 0.125) paint(abs(uv.y - g) / sqrt(gp * gp + 1.0), vec3(0.0, 1.0, 0.0));\n\n    // Draw smooth connection\n    float u = (uv.x - left) / gap;\n    float s = ssmoothstep(u), sp = ssmoothslope(u) / gap;\n    float fg = mix(f, g, ssmoothstep(u));\n    float fgp = mix(fp, gp, s) + (g - f) * sp;\n    if (uv.x > left && uv.x < right) paint(abs(uv.y - fg) / sqrt(fgp * fgp + 1.0), vec3(1.0, 0.8, 0.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}