{
    "Shader": {
        "info": {
            "date": "1586344462",
            "description": "You have been warned...",
            "flags": 32,
            "hasliked": 0,
            "id": "Wd2yzm",
            "likes": 10,
            "name": "Big Momavirus",
            "published": 3,
            "tags": [
                "voronoi",
                "tunnel",
                "texture",
                "heightmap",
                "virus"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "// \"Big Momavirus\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// You have been warned...\n\n// See \"Scrolling Texture Heightmap\" for tunnel construction.\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorus4Df (vec3 p, float ri, float rc);\nvec3 SphFib (vec3 v, float n);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv3 (vec3 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (vec2 vId);\nvec4 LoadTx (vec2 uv);\n\nvec3 ltDir, vbalPos;\nvec2 trkFx, trkFy, trkAx, trkAy, trkFw, trkAw;\nfloat dstFar, tCur, tunRad, lmpSep, txOrg, txAsp, vbalSpn, vbalDir;\nint idObj;\nconst int idWal = 1, idFlr = 2, idLmp = 3, idArch = 4, idRail = 5, idTie = 6,\n   idVbal = 7, idVspk = 8, idVcap = 9;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nvec3 TrackPos (float z)\n{\n  return vec3 (dot (trkAx, sin (trkFx * z)), dot (trkAy, sin (trkFy * z)), z);\n}\n\nvec3 TrackVel (float z)\n{\n  return normalize (vec3 (dot (trkAx, trkFx * cos (trkFx * z)),\n     dot (trkAy, trkFy * cos (trkFy * z)), 1.));\n}\n\nfloat TSurfHt (vec2 tc)\n{\n  return LoadTx (tc * txAsp).x;\n}\n\nfloat RdTun (vec3 p)\n{\n  float a, rh;\n  a = 0.5 * (atan (- p.x, p.y) / pi + 1.);\n  rh = TSurfHt (vec2 ((p.z - txOrg) / (2. * pi * tunRad), a));\n  return tunRad + dot (trkAw, sin (trkFw * p.z)) -\n     rh * (1. - 0.5 * smoothstep (0.5, 1., p.y / tunRad));\n}\n\nfloat TunDf (vec3 p)\n{\n  vec3 q;\n  vec2 rt;\n  float dMin, d;\n  dMin = dstFar;\n  p.xy -= TrackPos (p.z).xy;\n  d = RdTun (p) - length (p.xy);\n  DMIN (idWal);\n  d = (0.82 - 0.02 * p.x * p.x) * tunRad + p.y;\n  DMIN (idFlr);\n  return 0.5 * dMin;\n}\n\nfloat TunRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = TunDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 TunNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = TunDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat VbalDf (vec3 p, float dMin)\n{\n  vec3 q, qn, uf;\n  float d, rad, len, h, sbFac;\n  sbFac = 1.7;\n  dMin /= 0.6 * sbFac;\n  q = p / sbFac;\n  rad = 1.;\n  qn = normalize (q);\n  uf = SphFib (qn, 120.);\n  d = PrSphDf (q, rad * (1. - 0.05 * smoothstep (0.1, 0.2, length (qn - uf))));\n  DMIN (idVbal);\n  q = RotToDir (uf, vec3 (0., 0., 1.), q - uf);\n  h = Hashfv3 (41. * uf);\n  len = 0.3 * (1. - 0.2 * h);\n  q.z -= len;\n  d = PrCylDf (q, 0.04 * (1. - 0.1 * q.z / len), len);\n  DMIN (idVspk);\n  q.z -= len + 0.05;\n  q.xy = Rot2D (q.xy, pi * h / 3.);\n  q.xy = Rot2D (q.xy, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n  q.x += 0.08;\n  d = PrSphDf (q * vec3 (1., 1., 1.3), 0.1);\n  DMIN (idVcap);\n  return 0.6 * sbFac * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d;\n  dMin = dstFar;\n  qq = p;\n  qq.xy -= TrackPos (qq.z).xy;\n  q = qq;\n  d = length (max (abs (vec2 (abs (q.x) - 0.8, q.y + 0.82 * tunRad)) -\n      vec2 (0.06, 0.25), 0.));\n  DMIN (idRail);\n  q.y -= -0.82 * tunRad - 0.05;\n  q.z = mod (q.z + 1., 2.) - 1.;\n  d = PrBoxDf (q, vec3 (1., 0.2, 0.1));\n  DMIN (idTie);\n  q = qq;\n  q.z = mod (q.z + lmpSep, 2. * lmpSep) - lmpSep;\n  d = PrTorus4Df (q, 0.16, tunRad - 0.16) - 0.15 *\n     (0.7 + 0.3 * sqrt (abs (sin (31. * atan (q.y, q.x)))));\n  DMIN (idArch);\n  q.y -= tunRad - 0.5;\n  d = PrSphDf (q, 0.3);\n  DMIN (idLmp);\n  q = p - vbalPos;\n  d = PrSphDf (q, tunRad - 0.9);\n  if (d < 0.1) {\n    q.yz = Rot2D (q.yz, vbalSpn);\n    q.xz = Rot2D (q.xz, vbalDir);\n    dMin = VbalDf (q, dMin);\n  } else dMin = min (dMin, d);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat RippleHt (vec2 p)\n{\n  vec2 q;\n  float s1, s2;\n  q = Rot2D (p, -0.02 * pi);\n  s1 = abs (sin (4. * pi * abs (q.y + 1.5 * Fbm2 (0.7 * q))));\n  s1 = (1. - s1) * (s1 + sqrt (1. - s1 * s1));\n  q = Rot2D (p, 0.01 * pi);\n  s2 = abs (sin (3.1 * pi * abs (q.y + 1.9 * Fbm2 (0.5 * q))));\n  s2 = (1. - s2) * (s2 + sqrt (1. - s2 * s2));\n  return mix (s1, s2, 0.1 + 0.8 * smoothstep (0.3, 0.7, Fbm2 (2. * p)));\n}\n\nvec3 RippleNorm (vec2 p, vec3 vn, float f)\n{\n  vec2 e;\n  float h;\n  e = vec2 (0.002, 0.);\n  h = RippleHt (p);\n  vn.xy = Rot2D (vn.xy, f * (RippleHt (p + e) - h));\n  vn.zy = Rot2D (vn.zy, f * (RippleHt (p + e.yx) - h));\n  return vn;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col, q;\n  vec2 vf;\n  float dstObj, dstTun, dFac, s, att;\n  dstTun = TunRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (min (dstTun, dstObj) < dstFar) {\n    if (dstTun < dstObj) {\n      ro += dstTun * rd;\n      vn = TunNf (ro);\n      dFac = (1. - smoothstep (0.2, 0.5, dstTun / dstFar));\n      q.xy = TrackPos (ro.z).xy;\n      ro.xy -= q.xy;\n      if (idObj == idWal) {\n        vn = VaryNf (8. * ro, vn, 8. * dFac * dFac * (1. - 0.5 * smoothstep (0.7, 1., - vn.y)));\n        s = Fbm3 (32. * ro);\n        col4 = vec4 (mix (vec3 (0.4, 0.4, 0.45), vec3 (0.45, 0.4, 0.3), smoothstep (0.4, 0.5, s)), 0.05);\n      } else if (idObj == idFlr) {\n        s = dFac * (1. - smoothstep (-0.2, -0.1, dot (rd, vn)));\n        vn = RippleNorm (ro.zx, vn, 4. * s);\n        vn = VaryNf (16. * ro, vn, s);\n        col4 = vec4 (vec3 (0.5, 0.35, 0.2) * (1. - 0.2 * smoothstep (0.4, 0.85,\n           length (vec2 (ro.x, mod (ro.z + lmpSep, 2. * lmpSep) - lmpSep)) / tunRad)), 0.);\n      }\n      ro.xy += q.xy;\n    } else {\n      ro += dstObj * rd;\n      q = ro - vbalPos;\n      vn = ObjNf (ro);\n      if (idObj >= idVbal) {\n        q.yz = Rot2D (q.yz, vbalSpn);\n        q.xz = Rot2D (q.xz, vbalDir);\n      }\n      if (idObj == idLmp) {\n        col4 = vec4 (vec3 (1., 1., 0.7) * 0.5 * (1. - vn.y), -1.);\n      } else if (idObj == idRail) {\n        col4 = vec4 (0.5, 0.5, 0.55, 0.3);\n      } else if (idObj == idTie) {\n        col4 = vec4 (0.25, 0.15, 0., 0.);\n      } else if (idObj == idArch) {\n        col4 = vec4 (0.3, 0.3, 0.25, 0.05);\n        vn = VaryNf (32. * ro, vn, 2.);\n      } else if (idObj == idVbal) {\n        col4 = vec4 (0.5, 0.3, 0.1, 0.1);\n        vf = vec2 (8., 8.);\n      } else if (idObj == idVspk) {\n        col4 = vec4 (0.5, 0.6, 0.5, 0.4);\n        vf = vec2 (64., 0.1);\n      } else if (idObj == idVcap) {\n        col4 = vec4 (0.9, 0., 0., 0.3);\n        vf = vec2 (64., 2.);\n      }\n      if (idObj == idVbal || idObj == idVspk || idObj == idVcap) {\n        if (idObj == idVbal) col4.rgb = mix (col4.rgb, 1.5 * vec3 (0.2, 0.2, 1.), \n           SmoothBump (0.45, 0.55, 0.005, mod (0.7 * tCur, 1.)));\n        else if (idObj == idVspk || idObj == idVcap) col4.rgb = mix (col4.rgb, 1.5 * vec3 (1., 1., 0.9),\n           SmoothBump (0.49, 0.51, 0.005, mod (0.5 * length (q) - 0.7 * tCur, 1.)));\n        vn.yz = Rot2D (vn.yz, vbalSpn);\n        vn.xz = Rot2D (vn.xz, vbalDir);\n        vn = VaryNf (vf.x * q, vn, vf.y);\n        vn.xz = Rot2D (vn.xz, - vbalDir);\n        vn.yz = Rot2D (vn.yz, - vbalSpn);\n      }\n      if (col4.a >= 0.) col4.rgb *= (1. - 0.4 * smoothstep (0.4, 0.85,\n         abs (mod (ro.z + lmpSep, 2. * lmpSep) - lmpSep) / tunRad));\n      else col = col4.rgb;\n    }\n    if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.1 * max (vn.y, 0.) + 0.8 * max (dot (vn, ltDir), 0.) +\n       col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.));\n    if (idObj == idFlr || idObj == idRail || idObj == idTie)\n       col *= 0.9 + 0.1 * smoothstep (0., 0.5, length (ro.xz - vbalPos.xz) - 2.);\n    s = min (dstTun, dstObj);\n    att = SmoothMin (350. / pow (s, 2.), 1., 0.5) * (1. - smoothstep (60., 70., s));\n    col *= att;\n  } else col = vec3 (0.);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, vd;\n  vec2 uv;\n  float el, az, tunPos, zmFac, t;\n  uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n  uv.x *= iResolution.x / iResolution.y;\n  stDat = Loadv4 (vec2 (0., 0.));\n  tunPos = stDat.y;\n  txOrg = stDat.z;\n  txAsp = stDat.w;\n  stDat = Loadv4 (vec2 (1., 0.));\n  tunRad = stDat.y;\n  az = stDat.z;\n  el = stDat.w;\n  stDat = Loadv4 (vec2 (2., 0.));\n  tCur = stDat.y;\n  trkFx = 2. * pi * vec2 (0.005, 0.0087);\n  trkAx = tunRad * vec2 (2.2, 1.7);\n  trkFy = 2. * pi * vec2 (0.017, 0.0227);\n  trkAy = tunRad * vec2 (0.13, 0.07);\n  trkFw = 2. * pi * vec2 (0.05, 0.028);\n  trkAw = tunRad * vec2 (0.07, 0.04);\n  vd = TrackVel (tunPos);\n  az += 0.5 * pi + atan (- vd.z, vd.x);\n  el += asin (vd.y) - 0.02 * pi;\n  zmFac = 3.5 - 0.5 * SmoothBump (0.3, 0.7, 0.1, abs (az) / pi);\n  t = tunPos + tunRad * sign (0.5 * pi - abs (az)) * (4. + clamp (6. * (Fbm1 (0.02 * tCur) - 0.5), -2.5, 2.5));\n  vbalPos = TrackPos (t);\n  vd = TrackVel (t);\n  vbalDir = -0.5 * pi - atan (vd.z, - vd.x);\n  vbalSpn = -0.5 * pi * tCur;\n  vuMat = StdVuMat (el, az);\n  ro = TrackPos (tunPos) + vuMat * vec3 (0., 0.15, - 0.5) * tunRad;\n  dstFar = 100.;\n  lmpSep = 10.;\n  ltDir = vuMat * normalize (vec3 (0., 0.5, -1.));\n  rd = vuMat * normalize (vec3 (uv , zmFac));\n  rd.zx = Rot2D (rd.zx, 0.1 * atan (ro.x));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorus4Df (vec3 p, float ri, float rc)\n{\n  vec2 q;\n  q = vec2 (length (p.xy) - rc, p.z);\n  q *= q;\n  return sqrt (sqrt (dot (q * q, vec2 (1.)))) - ri;\n}\n\nvec3 SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, z, ni;\n  const float phi = 1.618034;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n    }\n  }\n  return vfMin;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p)\n{\n  vec3 n;\n  float c;\n  n = normalize (cross (v1, v2));\n  c = dot (v1, v2);\n  return c * p + sqrt (1. - c * c) * cross (n, p) + (1. - c) * dot (n, p) * n;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 LoadTx (vec2 uv)\n{\n  return texture (txBuf, uv);\n}\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Big Momavirus\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothMin (float a, float b, float r);\nvoid HexVorInit ();\nvec4 HexVor (vec2 p);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst float pi = 3.14159;\n\nfloat TSurfHt (vec2 tc)\n{\n  vec4 vc;\n  vc = HexVor (tc);\n  return max (0.3 * SmoothMin (0.4, 0.3 * vc.x, 0.1) * (1. - 0.3 * dot (vc.yz, vc.yz)) *\n     (1. + 2.5 * vc.w), 0.);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, stDat, dateCur;\n  vec2 canvas, pxIv;\n  float tCur, tBgn, az, el, tunRad, tunPos, s, si, txOrg, txAsp;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  pxIv = floor (fragCoord);\n  txAsp = 3./8.;\n  if (pxIv.x >= txSize.x || pxIv.y >= txAsp * txSize.x) discard;\n  if (iFrame <= 5) tBgn = mod (floor (337. * dateCur.w), 3600.);\n  else tBgn = Loadv4 (vec2 (2., 0.)).z;\n  tCur = mod (tCur, 3600.) + tBgn;\n  az = pi;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    el = clamp (el + 0.5 * pi * mPtr.y, -0.1 * pi, 0.1 * pi);\n    az = mod (az + pi + 2. * pi * mPtr.x, 2. * pi) - pi;\n  }\n  tunRad = 4.;\n  tunPos = 6. * tCur;\n  HexVorInit ();\n  txOrg = tunPos;\n  s = 2. * pi * tunRad / txAsp;\n  if (abs (az) > 0.6 * pi) txOrg -= s - tunRad;\n  else if (abs (az) > 0.4 * pi) txOrg -= 0.5 * s;\n  else txOrg -= tunRad;\n  si = txSize.x / (2. * s);\n  txOrg = floor (txOrg * si) / si;\n  stDat = vec4 (TSurfHt (2. * ((s * pxIv / txSize + vec2 (txOrg, 0.)))), 0., 0., 0.);\n  if (pxIv.y == 0.) {\n    if (pxIv.x == 0.) stDat.yzw = vec3 (tunPos, txOrg, txAsp);\n    else if (pxIv.x == 1.) stDat.yzw = vec3 (tunRad, az, el);\n    else if (pxIv.x == 2.) stDat.yz = vec2 (tCur, tBgn);\n  }\n  Savev4 (pxIv, stDat, fragColor, fragCoord);\n}\n\nvec2 gVec[7], hVec[7];\nconst float sqrt3 = 1.73205;\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.8;\n  p = p.yx;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}