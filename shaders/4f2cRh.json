{
    "Shader": {
        "info": {
            "date": "1721911224",
            "description": "lveb",
            "flags": 0,
            "hasliked": 0,
            "id": "4f2cRh",
            "likes": 0,
            "name": "LVEB - Classic",
            "published": 3,
            "tags": [
                "lveb"
            ],
            "usePreview": 0,
            "username": "julienledortz",
            "viewed": 66
        },
        "renderpass": [
            {
                "code": "// Return normalised float 0->1\nfloat rand(vec2 o){\n    return fract(sin(dot(o, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Return float from two inputs to one output\nfloat noise(vec2 p) {\n    // These numbers just need to be completely random\n    float amp = 1000.0;\n    return fract(sin(p.x * 10.0 + p.y * 1234.5) * amp);\n}\n\n// Return smooth noise \nfloat smoothNoise(vec2 uv) {\n    // Create 1D random value\n    vec2 index = uv;\n    vec2 localUV = fract(index); // we split the canvas into 10x10 cells, frac component\n    vec2 cellID = floor(index); // <- ID of current cell we are in, integer component\n    \n    localUV = localUV*localUV*(3.0 - 2.0 * localUV); // Hermite Curve, basically smoothstep.\n    \n    // Get noise values for corners of each cell (bottom/top right + left, then mix it)\n    float bl = noise(cellID);\n    float br = noise(cellID + vec2(1, 0));\n    float b = mix(bl, br, localUV.x);\n    float tl = noise(cellID + vec2(0, 1));\n    float tr = noise(cellID + vec2(1, 1));\n    float t = mix(tl, tr, localUV.x);\n    float noiseCol = mix(b, t, localUV.y);\n        \n    return noiseCol;\n}\n\n// Fractal Brownian Motion\nfloat fbm(in vec2 uv, int iterations) {\n    // Generate noise with initial variables\n    float value = 0.0;\n    float amp = 0.5;\n    float freq = 0.0;\n    vec2 shift = vec2(10.0);\n    \n    // Generate layers using a loop instead\n    float c = smoothNoise(uv);\n    for (int i=0;i<iterations;i++) {\n        value += amp * abs(smoothNoise(uv));\n        uv = uv * 1.0 + shift;\n        amp *= 0.5;\n    }\n    \n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Grab uv coord\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    // Create a temp\n    vec2 xx = vec2(0.0);\n    vec2 yy = vec2(0.0);\n    xx.x = fbm(uv, 4);\n    xx.y = fbm(uv + vec2(1.0), 4);\n    yy.x = fbm(uv + xx + 0.1 * iTime, 4);\n    yy.y = fbm(uv + xx + 0.15 * iTime, 4);\n    \n    // Vis\n    col = mix(vec3(0.82,0.494,0.5), vec3(0.553,0.216,0.231), length(xx));\n    col = mix(col, vec3(0.4, 0.2, 0.2), length(yy));\n    col += fbm(xx * yy * 16.0, 3);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}