{
    "Shader": {
        "info": {
            "date": "1665806620",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "DdX3zM",
            "likes": 4,
            "name": "Fractal mosaic 21 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\nvec2 triangle_wave(vec2 a){\n    //a += floor(a/2.);\n    vec2 a2 = //change this constant to get other interesting patterns\n        //vec2(1.,0.5)\n        //vec2(sign(a.y-a.x)+sign(a.x)/2.,sign(a.x-a.y)+sign(a.y)/2.)\n        -vec2(1.,2.5)\n        \n        //vec2(-2.,.5+mod(floor(a.x),2.))\n    ,\n    \n    \n    a1 = a2+a;\n    //a1 -= floor(a1/2.)/2.;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 16.*4.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    bool t3 = true;\n    for(int k = 0; k < 6; k++){\n        t3 = uv.x > uv.y;\n        float t4 = floor(uv.x-uv.y);\n        uv =\n            abs(.5+uv)\n            //max(abs(uv+t2),abs(.5+uv+t2))\n            //abs(.5+uv+t2)*fract(uv/4.) //another interesting pattern\n        ;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*3.)-.5)/3.;\n        //uv += (distance(floor(uv),round(uv+.5)));\n\n        //if(uv.y>uv.x) uv = uv.yx; else uv *= sign(uv-uv.yx);\n        t2 =\n            -triangle_wave(uv-.5)\n            //-triangle_wave(uv-.5-t4)\n        ;\n        //t2 -= float(!t3)/2.;\n        uv =\n            t2-triangle_wave(uv.yx)\n            //t2-triangle_wave(uv.yx-floor(uv.x+uv.y))\n            //t2-triangle_wave(uv.yx-floor(t2.x-t2.y))\n        ;\n        //uv = fract(uv);\n        //uv = fract(uv)*fract(uv/2.)*fract(uv/4.);\n\n        float c1 =\n            (uv.x-uv.y)\n            //(uv.x*uv.y)\n            //abs(uv.x-uv.y)\n        ;\n        col = col.yzx;\n        vec3 col1 = col;\n        if(!(t4==0.) || uv.y < uv.x) col1 = abs(col.yzx-vec3(col.yz,c1));\n        if((t4==0.) || uv.y > uv.x) col1 = abs(col1-max(col,vec3(col.yz,c1)));\n        col = col1;\n        //col *= col+.5;\n        //if(t3 && uv.y < uv.x) col = vec3(col.yz,c1);\n\n    }\n    fragColor = vec4(min(col*2.,vec3(1.)),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod2(float a, float b){\n    return mod(floor(a/b),b)*b;\n}\n\nfloat fmod(float a, float b){\n    //a += fmod2(a*2.,8.);\n    /*\n    for(float a2 = 16.; a2 < 128.; a2 *= 2.){\n        a2 *= 2.;\n        a += mod(floor(a/a2),2.);\n    }\n    */\n    //divide by powers of 2 to get interesting rhythms\n    float a1 = a;\n    //a /= 1. + mod(floor(a1/8.),2.);\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //mod(mod(floor(a/2.+2.),b*2.),b)\n        //mod(floor(a/b*2.),b)\n        //mod(floor(a)*floor(a*4./b),b)\n        //mod(floor(a)*mod(floor(-a*sign(.5-mod(floor(a/b/4.),3.))),b),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n//#define fmod(a, b) mod(mod(floor((a)),floor(1.+(a)/2.)),b)\n#define fmax(x,y,z) max(fmod(x,z),fmod(y,z))\n#define fmod1(x,y) mod(floor(x)-mod(floor((x)/2.)/2.,y)*2.,y)\n#define fmod2(x,y) mod(mod(floor(x),y*1.5),y)\n#define smod(x,y) mod(floor(x)*floor(x),y)\n#define powmod(x,y) mod(floor(pow(y,mod(floor(x)/y,y))),y)\nvec2 mainSound(int samp, float time){\n  \n  float tempo = 1.;\n  time /= tempo;\n  \n  //float d1 = floor(time*8.+floor(time/8.));\n  //time += d1/8.;\n  \n  //time -= pow(2.,fmod(time*8.,5.))*pow(2.,fmod(time,7.));\n  \n  //time = time*(1. + fmod(time*8.,2.))/2.;\n\n  \n  float s1 =\n      8.,\n      //5./(1.+fmod(time/2.,2.)), //varying tempo\n  m4 =\n      fmod(time/s1+floor(time*s1),2.)\n      //fmax(time/s1+floor(time*s1),time/s1,2.)\n  ,\n  s2 =\n      //8./(1.+m4)\n      8.\n  ,\n  \n  t= //varying tempo\n      //time\n      time*(1.+m4)/2.\n      //time/(1.+fmod(time*s1,2.))\n      //time/(1.+fmod(time/s1+floor(time*s1),2.))\n      //time/(1.+fmod(time*s1+floor(time),2.))\n      //time*(1.+fmod(time*s1,2.))/2.\n  ;\n  //t += mod(floor(t*8.),8.)*8.;\n  float m1 =\n      fmod(t*s2,s2)\n      //fmod(t/s1+floor(t*s1),s2)\n      //fmod(t*s1+floor(t/s1),s2)\n  ,\n  //m4 = fmod(t*s1,s1),\n  m3 =\n      fmod(t/(m1+.5),s2);\n      //fmod(t*(s1+m4)/(m1+.5),s2);\n      //fmod((t+m1)*s1/(m4+.5),s2);\n      //fmod(t*s1/abs(2.5-m1),s2);\n  \n  //m1 = fmod(t/s1,s2),\n  \n  //t += m3/2.;\n  t *= s1*s1;\n  float c1 = (t/s1+floor(t/s1))/2.;\n  t /=  //varying tempo\n      (1.+fmod(c1,2.))\n      //(1.+fmod(t/s1+floor(t*s1),2.))\n  ;\n  \n  \n    float m2 =\n      1. + fmod(t/s1,s1)\n      //1. + fmod(t/s1,8./(1.+fmod(t/s1,2.)))\n      //1. + fmod(t/s1,s1/2.)*fmod(t/s1/2.,s1/2.)\n      //1. + min(fmod(time,s1),t)\n  ;\n  //t /= max(m2,m1+m3+1.);\n  \n  //m3 = mod(floor(t/s1),s2-m3);\n  //m2 = mod(floor(t/s1),1.+s1-m2);\n  \n  float a=\n      //sqrt((1.-sqrt(fract(t/s1))))*.2\n      //pow(1.-sqrt(fract(t/s1)/2.),2.)\n      //pow(log(1./16./2.+fract(t/s1)/8.),2.)\n      64.*pow(sqrt(fract(-t/s1)/2.)/1.25,2.)\n  ,\n  \n\n  \n  nb =\n      time*tempo*pow(2.,(m3+m2)/5.+5.5)\n      //pow(2.,1.-m4+(m3+m2)/5.+6.5)\n  ;\n\n  return\n      abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}