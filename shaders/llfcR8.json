{
    "Shader": {
        "info": {
            "date": "1503343340",
            "description": "3D simplex noise using random number generated by philox4x32.\nIt also calculate gradient and partial differential of the gradient.",
            "flags": 0,
            "hasliked": 0,
            "id": "llfcR8",
            "likes": 4,
            "name": "3D Simplex Noise with Philox4x32",
            "published": 3,
            "tags": [
                "2d",
                "simplexnoise",
                "philox"
            ],
            "usePreview": 0,
            "username": "tomohiro",
            "viewed": 767
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926;\n\n/*\nCounter based pseudorandom number generator Philox\n\nIt is introduced in this paper:\nParallel Random Numbers: As Easy as 1, 2, 3\nby John K. Salmon, Mark A. Moraes, Ron O. Dror, and David E. Shaw\n\nPhilox is a modification of Threefish.\nIt is explained in 2.2 and 3.3 in this paper:\nThe Skein Hash Function Family\nby Niels Ferguson, Stefan Lucks, Bruce Schneier, Doug Whiting, Mihir Bellare, Tadayoshi Kohno, Jon Callas, Jesse Walker\n\nYou can download original Random123 source code from here:\nhttp://www.thesalmons.org/john/random123/\n\nHow to use:\nuvec4 counter;\nuvec2 key;\nuintToFloat(philox4x32_7(counter, key))\nreturns pseudorandom float4 value where each components are [0, 1).\n*/\n\n//umulExtended is not available in\n//umulExtended was added GLSL ES 3.1\n//This function is based on _mulhilo_c99_tpl macro in Random123-1.09/include/Random123/philox.h in Random123 source code.\nvoid umulExtended_(uint a, uint b, out uint hi, out uint lo) {\n    const uint WHALF = 16u;\n    const uint LOMASK = (1u<<WHALF)-1u;\n    lo = a*b;               /* full low multiply */\n    uint ahi = a>>WHALF;\n    uint alo = a& LOMASK;\n    uint bhi = b>>WHALF;\n    uint blo = b& LOMASK;\n\n    uint ahbl = ahi*blo;\n    uint albh = alo*bhi;\n\n    uint ahbl_albh = ((ahbl&LOMASK) + (albh&LOMASK));\n    hi = ahi*bhi + (ahbl>>WHALF) +  (albh>>WHALF);\n    hi += ahbl_albh >> WHALF; /* carry from the sum of lo(ahbl) + lo(albh) ) */\n    /* carry from the sum with alo*blo */\n    hi += ((lo >> WHALF) < (ahbl_albh&LOMASK)) ? 1u : 0u;\n}\n\nuvec2 philox4x32Bumpkey(uvec2 key) {\n    uvec2 ret = key;\n    ret.x += 0x9E3779B9u;\n    ret.y += 0xBB67AE85u;\n    return ret;\n}\n\nuvec4 philox4x32Round(uvec4 state, uvec2 key) {\n    const uint M0 = 0xD2511F53u, M1 = 0xCD9E8D57u;\n    uint hi0, lo0, hi1, lo1;\n//    umulExtended(M0, state.x, hi0, lo0);\n//    umulExtended(M1, state.z, hi1, lo1);\n    umulExtended_(M0, state.x, hi0, lo0);\n    umulExtended_(M1, state.z, hi1, lo1);\n\n    return uvec4(\n        hi1^state.y^key.x, lo1,\n        hi0^state.w^key.y, lo0);\n}\n\nuvec4 philox4x32_7(uvec4 plain, uvec2 key) {\n    uvec4 state = plain;\n    uvec2 round_key = key;\n\n    for(int i=0; i<7; ++i) {\n        state = philox4x32Round(state, round_key);\n        round_key = philox4x32Bumpkey(round_key);\n    }\n\n    return state;\n}\n\nfloat uintToFloat(uint src) {\n    return uintBitsToFloat(0x3f800000u | (src & 0x7fffffu))-1.0;\n}\n\nvec4 uintToFloat(uvec4 src) {\n    return vec4(uintToFloat(src.x), uintToFloat(src.y), uintToFloat(src.z), uintToFloat(src.w));\n}\n\n\nfloat skewF(float n)\n{\n/*\nn∈N\nX∈R^n\nX'∈R^n\nA∈R^n ∧ |A| = 1\ns∈R\nf is a non-uniform scaling along direction A and s is the scaling factor.\nf:R^n → R^n\nX' = f(X)\n   = X・A*s*A - X・A*A + X\n   = X・A*(s-1)*A + X\n\n∀B(B∈R^n ∧ B・A = 0 ⇒ f(X)・B = X・B)\n\nX' = f^-1(X)\n   = X・A*(1/s-1)*A + X\n\nf^-1(f(X)) = X\nX' = X・A*(s-1)*A + X\nX = X'・A*(1/s-1)*A + X'\n  = (X・A*(s-1)*A + X)・A*(1/s-1)*A + X・A*(s-1)*A + X\n  = X・A*(s-1)*(A・A)*(1/s-1)*A + X・A*(1/s-1)*A + X・A*(s-1)*A + X\n  = X・A*(1-s-1/s+1)*A          + X・A*(1/s-1)*A + X・A*(s-1)*A + X\n  = -X・A*(s-1)*A - X・A*(1/s-1)*A + X・A*(1/s-1)*A + X・A*(s-1)*A + X\n  = X\n\nWhen creating simplex noise, A is a unit vector parallel to a unit hypercube's longest diagonal.\nA = (1/√(n), 1/√(n), ...)\n  = 1/√(n)(1, 1, ...)\n\nX' = f(X) = (s-1)/n*X・(1, 1, ...)*(1, 1, ...) + X\n\nIn skewed coordinate system, basis is not orthogonal.\nAny points P in skewed coordinate system such that P∈Z^n become a vertex of a simplex.\nIn the Cartesian coordinate, all edge of a simplex should have a same length.\nBut it is not possible in 3D and higher dimension.\nEquilateral triangle alone can fill space, but regular tetrahedra alone do not.\nFind 's' such that |f^-1((1, 0, 0, ...))| = |f^-1((1, 1, 1, ...))|\n|(1/s-1)/n*(1, 0, 0, ...)・(1, 1, ...)*(1, 1, ...) + (1, 0, 0, ...)| = |(1/s-1)/n*(1, 1, ...)・(1, 1, ...)*(1, 1, ...) + (1, 1, 1)|\n|(1/s-1)/n*(1, 1, ...) + (1, 0, 0, ...)| = |(1/s-1)*(1, 1, ...) + (1, 1, 1)|\n((1/s-1)/n+1)^2 + (((1/s-1)/n)^2)*(n-1) = ((1/s)^2)*n\n(1/s-1)*(1/s-1)/(n*n)+ 2*(1/s-1)/n + 1 + (1/s-1)*(1/s-1)*(n-1)/(n*n) = n/(s*s)\n2*(1/s-1)/n + 1 + (1/s-1)*(1/s-1)*n/(n*n) = n/(s*s)\n2*(1/s-1)/n + 1 + (1/s-1)*(1/s-1)/n = n/(s*s)\n(1/s-1)/n*(2 + (1/s-1)) + 1 = n/(s*s)\n(1/s-1)/n*(1 + 1/s) + 1 = n/(s*s)\n(1-s)/n*(s + 1) + s*s = n\n(1-s)*(s + 1) + s*s*n = n*n\n(n-1)*s*s + 1 = n*n\ns*s = (n*n - 1)/(n-1) = (n+1)(n-1)/(n-1) = n+1\ns = sqrt(n+1)\n\nX' = f(X) = (√(n+1)-1)/n*X・(1, 1, ...)*(1, 1, ...) + X\nf^-1(X) = (1/√(n+1)-1)/n*X・(1, 1, ...)*(1, 1, ...) + X\n\nLength of edge of a simplex in Cartesian coordinate system:\n f^-1((1, 0, 0, ...))  = (1/√(n+1)-1)/n*(1, 0, 0, ...)・(1, 1, ...)*(1, 1, ...) + (1, 0, 0, ...)\n                       = (1/√(n+1)-1)/n*(1, 1, ...) + (1, 0, 0, ...)\n|f^-1((1, 0, 0, ...))| = √( ((1/√(n+1)-1)/n+1)^2 + (((1/√(n+1)-1)/n)^2)*(n-1) )\n                       = √( ((1/√(n+1)-1)/n)^2 + 2*(1/√(n+1)-1)/n + 1 + (((1/√(n+1)-1)/n)^2)*(n-1) )\n                       = √( (((1/√(n+1)-1)/n)^2)*n + 2*(1/√(n+1)-1)/n + 1 )\n                       = √( (1/√(n+1)-1)/n*(1/√(n+1)-1 + 2) + 1 )\n                       = √( (1/(n+1) - 1)/n + 1 )\n                       = √( -n/(n+1)/n + 1 )\n                       = √( -1/(n+1) + 1 )\n                       = √( n/(n+1) )\nhttps://www.wolframalpha.com/input/?i=sqrt(+((1%2Fsqrt(n%2B1)-1)%2Fn%2B1)^2+%2B+(((1%2Fsqrt(n%2B1)-1)%2Fn)^2)*(n-1)+)\n\nLength of edges of a simplex in Cartesian coordinate system in 3 or higher dimension are not equal.\nY∈{0,1}^n\nm = Y・(1, 1, ...)\nf^-1(Y) = m*(1/√(n+1)-1)/n*(1, 1, ...) + Y\n|f^-1(Y)| = √( ((m*(1/√(n+1)-1)/n+1)^2)*m + ((m*(1/√(n+1)-1)/n)^2)*(n-m) )\n          = √( ((m*(1/√(n+1)-1)/n)^2)*m + 2*m*m*(1/√(n+1)-1)/n + m + ((m*(1/√(n+1)-1)/n)^2)*(n-m) )\n          = √( ((m*(1/√(n+1)-1)/n)^2)*n + 2*m*m*(1/√(n+1)-1)/n + m )\n          = √( (m*(1/√(n+1)-1)/n)*( (m*(1/√(n+1)-1)) + 2*m ) + m )\n          = √( (m*(1/√(n+1)-1)/n)*m*( 1/√(n+1)+1 ) + m )\n          = √( m*m*(1/(n+1)-1)/n + m )\n          = √( m*m*(-n)/(n+1)/n + m )\n          = √( -m*m/(n+1) + m )\nd/dm(|f^-1(Y)|) = 0.5*(1 - 2*m/(n+1))/√( -m*m/(n+1) + m )\nd/dm(|f^-1(Y)|) = 0 when m = 0.5*(n+1)\nd/dm(|f^-1(Y)|) = 0.5*(1 - 2/(n+1))/√( n/(n+1) )\n                = 0.5*(n-1)/√( n*(n+1) ) > 0 when m = 1\nd/dm(|f^-1(Y)|) = 0.5*(1 - 2*n/(n+1))/√( n/(n+1) )\n                = 0.5*(1-n)/√( n*(n+1) ) < 0 when m = n\n\nSo length of edge is shortest when m = 1 or m = n and other edge is longer than them.\n\nShortest distance between a vertex on simplex and the opposite edge:\nL = √( n/(n+1) )*√(3)/2\n\nReferences:\nhttps://en.wikipedia.org/wiki/Simplex_noise\nhttp://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n*/\n    return (sqrt(n + 1.0) - 1.0)/n;\n}\n\nfloat unskewG(float n)\n{\n    return (1.0/sqrt(n + 1.0) - 1.0)/n;\n}\n\nvoid randThetaPhi(vec3 id[4], uvec2 randKey, out vec2 tp[4])\n{\n    for(int i=0; i<4; ++i)\n    {\n        //According to 5.4.1 Conversion and Scalar Constructors in The OpenGL Shading Language Version 4.5, \n        //it is undefined to convert a negative floating-point value to an uint.\n        //The constructor uint(int) preserves the bit pattern in the argument, which will change its value if it is negative.\n        vec4 rand = uintToFloat(philox4x32_7(uvec4(ivec3(id[i]), 0), randKey));\n\n        //Spherical coordinate of a point which is uniformly distributed on sphere.\n        //http://mathworld.wolfram.com/SpherePointPicking.html\n        tp[i] = vec2(\n            2.0*PI*rand.x,\n            acos(2.0*rand.y - 1.0)\n        );\n    }\n}\n\nvec3 smplxNoise3DDeriv(vec3 x, float m, vec3 g)\n{\n    vec3 dmdxy = max(vec3(0.5) - dot(x, x), 0.0);\n    dmdxy = -8.0*x*dmdxy*dmdxy*dmdxy;\n    return dmdxy*dot(x, g) + m*g;\n}\n\nvec3 smplxNoise3DDeriv2xxyyzz(vec3 x, vec3 g)\n{\n    float m = max(0.5 - dot(x, x), 0.0);\n    return 48.0*m*m*dot(x, g)*x*x - 8.0*m*m*m*(2.0*g*x + vec3(dot(x, g)));\n}\n\nvec3 smplxNoise3DDeriv2xyxzyz(vec3 x, vec3 g)\n{\n    float m = max(0.5 - dot(x, x), 0.0);\n    return 48.0*m*m*dot(x, g)*x.yzz*x.xxy - 8.0*m*m*m*(x.xxy*g.yzz + x.yzz*g.xxy);\n}\n\n//f(x)=simplexNoise3D(x)\n//deriv is vec3(∂f/∂x, ∂f/∂y, ∂f/∂z)\n//ddxxyyzz is vec3(∂∂f/∂x∂x, ∂∂f/∂y∂y, ∂∂f/∂z∂z)\n//ddxyxzyz is vec3(∂∂f/∂x∂y, ∂∂f/∂x∂z, ∂∂f/∂y∂z)\n//∂∂f/∂x∂y == ∂∂f/∂y∂x, ∂∂f/∂x∂z == ∂∂f/∂z∂x, ∂∂f/∂y∂z == ∂∂f/∂z∂y\nfloat smplxNoise3D(vec3 p, out vec3 deriv, out vec3 ddxxyyzz, out vec3 ddxyxzyz, uvec2 randKey)\n{\n    vec3 id[4];\n    id[0] = floor(p + vec3( (p.x + p.y + p.z)*skewF(3.0) ));\n    float unskew = unskewG(3.0);\n    vec3 x[4];\n    x[0] = p - (id[0] + vec3( (id[0].x + id[0].y + id[0].z)*unskew ));\n\n    vec3 cmp1 = step(vec3(0.0), x[0] - x[0].zxy);\n    vec3 cmp2 = vec3(1.0) - cmp1.yzx; //= step(vec3(0.0), x[0] - x[0].yzx);\n    vec3 ii1 = cmp1*cmp2;    //Largest component is 1.0, others are 0.0.\n    vec3 ii2 = min(cmp1 + cmp2, 1.0);    //Smallest component is 0.0, others are 1.0.\n    vec3 ii3 = vec3(1.0);\n\n//  vec3 id[1] = id[0] + ii1;\n//  x[1] = p - (id[1] + vec3(id[1].x + id[1].y + id[1].z)*unskew);\n//       = p - (id[0] + ii1 + vec3(id[0].x + id[0].y + id[0].z + 1.0)*unskew);\n//       = p - (id[0] + vec3(id[0].x + id[0].y + id[0].z)*unskew) - ii1 - vec3(1.0)*unskew);\n    x[1] = x[0] - ii1 - vec3(unskew);\n    x[2] = x[0] - ii2 - vec3(2.0*unskew);\n    x[3] = x[0] - ii3 - vec3(3.0*unskew);\n\n    float m[4];\n    for(int i=0; i<4; ++i)\n    {\n        m[i] = max(0.5 - dot(x[i], x[i]), 0.0);\n        m[i] = m[i]*m[i];\n        m[i] = m[i]*m[i];\n    }\n\n    id[1] = id[0]+ii1;\n    id[2] = id[0]+ii2;\n    id[3] = id[0]+ii3;\n\n    vec2 tp[4];\n    randThetaPhi(id, randKey, tp);\n\n    //Gradients;\n    vec3 g[4];\n    for(int i=0; i<4; ++i)\n    {\n        float r = sin(tp[i].y);\n        g[i] = vec3(r*cos(tp[i].x), r*sin(tp[i].x), cos(tp[i].y));\n    }\n\n    float ret = 0.0;\n    deriv = vec3(0.0);\n    ddxxyyzz = vec3(0.0);\n    ddxyxzyz = vec3(0.0);\n    for(int i=0; i<4; ++i)\n    {\n        ret += m[i] * dot(x[i], g[i]);\n        deriv += smplxNoise3DDeriv(x[i], m[i], g[i]);\n        ddxxyyzz += smplxNoise3DDeriv2xxyyzz(x[i], g[i]);\n        ddxyxzyz += smplxNoise3DDeriv2xyxzyz(x[i], g[i]);\n    }\n\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy*2.0 - iResolution.xy) / iResolution.y;\n    vec2 mouse = (iMouse.xy*2.0 - iResolution.xy) / iResolution.y;\n\n    vec3 deriv, ddxxyyzz, ddxyxzyz;\n    float c = smplxNoise3D(vec3(uv*2., iTime), deriv, ddxxyyzz, ddxyxzyz, uvec2(0xfeedbeefu, 0xacebeefu));\n\tfragColor = vec4(c*54.0 + 0.5);\n    fragColor = distance(uv, mouse) > 0.4 ? vec4(c*54.0 + 0.5) : vec4(ddxxyyzz*2., 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}