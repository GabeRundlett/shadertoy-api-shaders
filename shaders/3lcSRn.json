{
    "Shader": {
        "info": {
            "date": "1580237856",
            "description": "shader i made for class",
            "flags": 0,
            "hasliked": 0,
            "id": "3lcSRn",
            "likes": 5,
            "name": "moving bars",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 0,
            "username": "bandaloo",
            "viewed": 14536
        },
        "renderpass": [
            {
                "code": "const float pi = 3.14159265;\n\nvec3 blurry_rectangle(vec2 p, float xEdgeWidth, float yEdgeWidth, float xBlurriness, float yBlurriness, float xOffset, float yOffset) {\n  // the blurry rectangle mask\n  p -= vec2(xOffset, yOffset);\n  float smoothFrequency = 1.0;\n  vec2 innerEdge = vec2(xEdgeWidth, yEdgeWidth) - vec2(xBlurriness, yBlurriness);\n  vec2 outerEdge = vec2(xEdgeWidth, yEdgeWidth) + vec2(xBlurriness, yBlurriness);\n  vec2 bl = smoothstep(innerEdge, outerEdge, p); // bottom-left\n  vec2 tr = smoothstep(innerEdge, outerEdge, 1.0 - p); // top-right\n  return vec3(bl.x * bl.y * tr.x * tr.y);\n}\n\nvec3 waves(vec2 p, float xWiggleRate, float yWiggleRate, float xFrequency, float yFrequency, float xWiggle, float yWiggle) {\n  xFrequency += sin(iTime * xWiggleRate);\n  yFrequency += sin(iTime * yWiggleRate);\n  return vec3(cos(xFrequency * (p.x + xWiggle * sin(p.y))) * cos(yFrequency * (p.y + yWiggle * cos(p.y))));\n}\n\nfloat glow(vec2 p) {\n  vec2 pn = p * 2.0 - 1.0;\n  \n  float glowScalar = 2.0;\n  float glowAdder = 0.0;\n  \n  float fadeFrequency = 1.0;\n  float glowColor = glowAdder + (1.0 - length(pn)) * glowScalar - (0.5 * sin(fadeFrequency * iTime) + 0.5);\n  return clamp(glowColor, 0.0, 1.0);\n}\n\nfloat sinSpeeding(float position, float offset) {\n  float speed = 100.0 * smoothstep(3.0, 100.0, position);\n  return sin(0.01 * position * speed + offset);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // position on screen\n  vec2 p = fragCoord.xy / iResolution.xy;\n  \n  // rectangle masks\n  vec3 mask1 = blurry_rectangle(p, 0.4, 0.125, 0.02, 0.02, 0.3 * sinSpeeding(iTime, 0.0), 0.0);\n  vec3 mask2 = blurry_rectangle(p, 0.4, 0.125, 0.02, 0.02, 0.3 * sinSpeeding(iTime, 2.0 * pi / 3.0), 0.0);\n  vec3 mask3 = blurry_rectangle(p, 0.4, 0.125, 0.02, 0.02, 0.3 * sinSpeeding(iTime, 4.0 * pi / 3.0), 0.0);\n  \n  // inside the blurry rectangle\n  vec3 color1 = waves(p, 0.2, 0.2, 10.0, 10.0, 5.0, 5.0);\n  vec3 color2 = waves(p, 0.1, 0.1, 2.0, 1.0, 100.0, 5.0);\n  vec3 color3 = waves(p, 0.1, 0.1, 2.0, 5.0, 1.0, 5.0);\n  \n  float glowVal = glow(p);\n  fragColor = vec4(mask1 * color1 + mask2 * color2 + mask3 * color3, 1.0) * vec4(0.8 * glowVal, 0.2 * glowVal, 1.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}