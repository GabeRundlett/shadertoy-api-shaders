{
    "Shader": {
        "info": {
            "date": "1717793094",
            "description": "The 3d textures provided by the Shadertoy API have a 20-byte header. That header contains the texture's dimensions and channel count. I found this out when trying to figure out why the RGBA texture was shifted 5 pixels right. Now you have this comment!.",
            "flags": 32,
            "hasliked": 0,
            "id": "MXy3RG",
            "likes": 0,
            "name": "Volumes (API Test)",
            "published": 3,
            "tags": [
                "apitesting"
            ],
            "usePreview": 0,
            "username": "brisingre",
            "viewed": 92
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2.0;\n    \n    \n    float fade = max(sin(iTime), 0.0);\n    \n    vec4 color;\n    \n    if(uv.x < 1.0)\n    {\n        if(uv.y < 1.0)\n        {\n            color = texture(iChannel2, fract(uv));\n        }\n        else\n        {\n            color = texture(iChannel0, fract(uv));\n        \n        }\n    }\n    else\n    {\n        if(uv.y < 1.0)\n        {\n\n                color = texture(iChannel3, fract(uv)).aaaa;\n        }\n        else\n        {\n            \n                color = texture(iChannel1, fract(uv));\n        \n        }\n    }\n    \n    \n    fragColor = color;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PHI = sqrt(5.0)*0.5 + 0.5;\n\nconst vec3 gdfVecs[19] = vec3[](\n    normalize(vec3(1,0,0)),\n    normalize(vec3(0,1,0)),\n    normalize(vec3(0,0,1)),\n    \n    normalize(vec3(1, 1, 1)),\n    normalize(vec3(-1, 1, 1)),\n    normalize(vec3(1, -1 , 1)),\n    normalize(vec3(1, 1, -1)),\n    \n    normalize(vec3(0, 1, PHI+1.0)),\n    normalize(vec3(0, -1, PHI + 1.0)),\n    normalize(vec3(PHI + 1.0, 0, 1)),\n    normalize(vec3(-PHI-1.0,0, 1)),\n    normalize(vec3(1, PHI+1.0, 0)),\n    normalize(vec3(-1, PHI+1.0, 0)),\n    \n    normalize(vec3(0, PHI, 1)),\n    normalize(vec3(0, -PHI, 1)),\n    normalize(vec3(1, 0, PHI)),\n    normalize(vec3(-1, 0, PHI)),\n    normalize(vec3(PHI, 1, 0)),\n    normalize(vec3(-PHI, 1, 0))\n    );\n\n\nfloat generalizedDF(vec3 point, float radius, int start, int end)\n{\n    float retval = 0.0;\n    for(int i = start; i <= end; i++)\n    {\n        retval = max(retval, abs(dot(point, gdfVecs[i])));\n    }\n    return retval - radius;\n}\n\nfloat generalizedDFExp(vec3 point, float radius, float exponent, int start, int end)\n{ \n    float retval = 0.0;\n    for(int i = start; i <= end; i++)\n    {\n        retval += pow(abs(dot(point, gdfVecs[i])), exponent);\n    }\n    return pow(retval, 1.0/exponent) - radius;\n    \n}\n\n\n\n//THIS IS WHERE YOU MESS AROUND WITH SHAPES\nfloat sceneSDF(vec3 point)\n{\n    float b = generalizedDFExp(point.zyx, 1.0, 40.0, 0, 2);\n    return b;\n}\n\n\n\n//Raymarching stuff\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\nconst float STEP_SCALE =1.0;\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 direction, float start, float end)\n{\n  float depth = start;\n    for(int i = 0; i < MAX_MARCHING_STEPS; i++)\n    {\n        float dist = sceneSDF(eye + depth * direction);\n        if(dist < EPSILON)\n        {\n            return depth;\n        }\n        depth += dist * STEP_SCALE;\n        if (depth >= end)\n        {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord){\n    vec2 xy = fragCoord - size/2.0;\n    float z = size.y/tan(radians(fieldOfView)/2.0);\n    return normalize(vec3(xy,-z));\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up)\n{\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    \n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1.0)\n        );\n        \n        \n        \n}\n\nvec3 estimateNormal(vec3 p)\n{\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z-EPSILON))\n        ));\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Fork of \"Cubemaps (API Test)\" by brisingre. https://shadertoy.com/view/4XV3RR\n// 2024-06-07 19:26:13\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    fragColor = vec4(fragCoord, 0, 1);\n\t\n    \n    vec3 viewDir = rayDirection(60.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(4.0 * sin(iTime * 0.5), 1.5 * sin(iTime), 4.0 * cos(iTime * 0.5));\n    \n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n  \n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n      \n    if(dist > MAX_DIST - EPSILON)\n    {\n        fragColor = texture(iChannel0, worldDir);\n    }\n    else\n    {\n        \n        //THIS IS WHERE YOU MESS AROUND WITH COLOR\n        vec3 point = eye + dist * worldDir;\n        \n        vec3 surfaceNormal = estimateNormal(point);\n        \n        \n        fragColor = texture(iChannel1, point);\n    }\n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fork of \"Cubemaps (API Test)\" by brisingre. https://shadertoy.com/view/4XV3RR\n// 2024-06-07 19:26:13\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    fragColor = vec4(fragCoord, 0, 1);\n\t\n    \n    vec3 viewDir = rayDirection(60.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(4.0 * sin(iTime * 0.5), 1.5 * sin(iTime), 4.0 * cos(iTime * 0.5));\n    \n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n  \n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n      \n    if(dist > MAX_DIST - EPSILON)\n    {\n        fragColor = texture(iChannel0, worldDir, mod(iTime, 10.0));\n    }\n    else\n    {\n        \n        //THIS IS WHERE YOU MESS AROUND WITH COLOR\n        vec3 point = eye + dist * worldDir;\n        \n        vec3 surfaceNormal = estimateNormal(point);\n        \n        \n        fragColor = texture(iChannel1, point, mod(iTime, 5.0));\n    }\n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 tex = texture(iChannel0, vec3(uv, 0.1));\n    fragColor = vec4(uv * tex.r, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}