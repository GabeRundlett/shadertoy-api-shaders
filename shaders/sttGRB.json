{
    "Shader": {
        "info": {
            "date": "1636317736",
            "description": "Since log polar transforms are trending, here's a nice zoom into a randomized hexagon grid pattern.\n\n'x' show untransformed pattern.\n's' for 'Shane' colouring\nmouse x coord sets hash seed",
            "flags": 16,
            "hasliked": 0,
            "id": "sttGRB",
            "likes": 10,
            "name": "Log Polar Zoom",
            "published": 3,
            "tags": [
                "logpolar",
                "complexlog"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 349
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Log polar zoom\n// \n// Matthew Arcus, mla, 2021\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// M maps a square grid to a grid of equilateral triangles\nconst mat2 M = mat2(1,0,0.5,0.5*sqrt(3.0));\nconst mat2 Minv = inverse(M);\n\nint N = 8; // Number of logpolar subdivisions\n\nvec2 hash(ivec2 index) {\n  int x = 2*index.x+index.y;\n  int y = (index.y+N)%(2*N);\n  uint h = uint(x+2048*y);\n  h ^= uint(iMouse.x);\n  h = ihash(h);\n  vec2 res = vec2(h>>16,h&0xffffU);\n  return res/pow(2.0,16.0);\n}\n\nvec3 draw(vec3 col, vec2 z, vec4 p, float px) {\n  z -= p.zw;\n  float h = p.x;\n  float h2 = p.y;\n  //if (h < clamp(0.0,1.0,0.4+0.6*cos(0.25*iTime))) return col;\n  float r = 0.5;\n  r *= h2;\n  vec2 centre = vec2(r,0);\n  //centre = rotate(centre,iMouse.y/iResolution.y*2.0*PI);\n  centre = rotate(centre,h);\n  z -= centre;\n  float k = sqrt(3.0)/2.0-r;\n  float d = length(z)-k;\n  // IQ's palette - idea from Shane\n  vec3 hue = 0.5+0.5*cos(6.2831*h2 + vec3(0, 2, 2));\n  hue = sqrt(hue);\n  if (key(CHAR_S)) {\n    // Shane's colour suggestion\n    hue *= 1. - .6*smoothstep(0., k, dot(z, z));\n    // Subtle, fake AO.\n    col = mix(col, vec3(0), (1. - smoothstep(-px*15., px*15., d))*.5);\n    // Stroke.\n    col = mix(hue/16., col, smoothstep(-px, px, d));\n    // Color overlay.\n    col = mix(hue,col,smoothstep(-px, px, d + px*3.*iResolution.y/450.));\n    return col;\n  } else {\n   //hue = h2rgb(h2);\n   hue *= 1.0-0.8*smoothstep(0.0,k,length(z));\n   col = mix(hue,col,smoothstep(-px,px,d));\n   return col;\n  }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  fragColor = vec4(0);\n  // Get normalized screen coordinate\n  vec2 z = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  //if (!key(CHAR_X)) z = vec2(log(length(z)),atan(z.y,z.x));\n  //if (!key(CHAR_X)) z = 2.0*(3.0*catanh(z) - 2.0*catanh(cmul(vec2(cos(0.1*iTime),sin(0.1*iTime)), z)));\n  if (!key(CHAR_X)) z = clog(z)/PI; //z = 2.0*catanh(z);\n  else {\n    z *= 1.1;\n    if (abs(z.y) > 1.0) return;\n  }\n  //z.y = mod(z.y,2.0);\n  z.x -= 0.2*iTime;\n\n  z *= 0.5*sqrt(3.0);\n  z *= float(N);\n\n  vec2 z1 = Minv*z; // Convert to square grid\n\n  // Find corner vertices of containing triangle\n  vec2 index0 = floor(z1); // Remember cell in grid\n  vec2 index1 = index0+vec2(1,0);\n  vec2 index2 = index0+vec2(0,1);\n  z1 -= index0;\n  if (dot(z1,vec2(1,1)) > 1.0) index0 += vec2(1,1);\n\n  // Hash corner vertices\n  vec2 h0 = hash(ivec2(index0));\n  vec2 h1 = hash(ivec2(index1));\n  vec2 h2 = hash(ivec2(index2));\n\n  // Combine with real coordinates of vertices\n  vec4 p0 = vec4(h0,M*index0);\n  vec4 p1 = vec4(h1,M*index1);\n  vec4 p2 = vec4(h2,M*index2);\n\n  // And sort by hash\n  if (p0.x < p1.x) { vec4 t = p0; p0 = p1; p1 = t; }\n  if (p1.x < p2.x) { vec4 t = p1; p1 = p2; p2 = t; }\n  if (p0.x < p1.x) { vec4 t = p0; p0 = p1; p1 = t; }\n\n  // Get pixel width, z.y is discontinuous, so don't use that\n  float px = 0.5*fwidth(z.x);\n  vec3 col = vec3(0);\n  // Finally, combine drawing from each vertex\n  col = draw(col,z,p0,px);\n  col = draw(col,z,p1,px);\n  col = draw(col,z,p2,px);\n\n  col = pow(col,vec3(0.4545));\n  if (alert) col.x = 1.0;\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float PI = 3.14159;\n\nbool alert = false;\nvoid assert(bool x) {\n  if (!x) alert = true;\n}\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(t) + vec2(p.y, -p.x) * sin(t);\n}\n\nint idiv(int a,int b) {\n  int d;\n  // eg.\n  // -1/3 => -((1+2)/3) = -1\n  // -3/3 => -((3+2)/3) = -1\n  // -4/3 => -((4+2)/3) = -2\n  if (a < 0) d = -((-a+b-1)/b); // Careful with bracket here!\n  else d = a/b;\n  //assert(a-d*b >= 0);\n  //assert(a-d*b < b);\n  return d;\n}\n\nint imod(int a, int b) {\n  int d = idiv(a,b);\n  return a-d*b;\n}\n\n// Macros for use in \"common\" blocks.\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_F = 70;\nconst int CHAR_I = 73;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n  return sqrt(rgb);\n}\n\n// Complex functions\nvec2 cmul(vec2 z, vec2 w) {\n  //return vec2 (z.x*w.x-z.y*w.y, z.x*w.y+z.y*w.x);\n  return mat2(z,-z.y,z.x)*w;\n}\n\nvec2 cinv(vec2 z) {\n  float t = dot(z,z);\n  return vec2(z.x,-z.y)/t;\n}\n\nvec2 cdiv(vec2 z, vec2 w) {\n  return cmul(z,cinv(w));\n}\n\nvec2 clog(vec2 z) {\n  float r = length(z);\n  return vec2(log(r),atan(z.y,z.x));\n}\n\n// Inverse hyperbolic tangent \nvec2 catanh(vec2 z) {\n  return 0.5*clog(cdiv(vec2(1,0)+z,vec2(1,0)-z));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}