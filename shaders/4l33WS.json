{
    "Shader": {
        "info": {
            "date": "1471098045",
            "description": "//for Scottish Tartan Pattern challenge http://thebookofshaders.com/09/",
            "flags": 0,
            "hasliked": 0,
            "id": "4l33WS",
            "likes": 6,
            "name": "Blackwatch Modern Tartan",
            "published": 3,
            "tags": [
                "procedural",
                "patterns",
                "tiling"
            ],
            "usePreview": 0,
            "username": "flowb",
            "viewed": 720
        },
        "renderpass": [
            {
                "code": "//\"BLACKWATCH MODERN\" TARTAN PATTERN by florian mosleh (flowb)\n//reference: http://www.scotclans.com/scottish-clans/tartan-pattern-book/b/\n//for Scottish Tartan Pattern challenge http://thebookofshaders.com/09/\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.1415926536\n\n//colors\n\nvec3 tGreen = vec3(4./255.,88./255.,56./255.);\nvec3 tPurpl = vec3(44./255.,44./255.,129./255.);\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st) * smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    //uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvec2 tile(vec2 _st, float scale){\n\treturn fract(_st*scale);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    mat2 spinny = rotate2d(-PI+sin(iTime/20.));\n\tfloat scale=1.+sin(iTime/10.)/30.;\n    vec2 st = (fragCoord.xy/iResolution.xy);\n    st.x *= iResolution.x/iResolution.y;\n\n    vec3 colorV = vec3(0.);\n    vec3 colorH = vec3(0.);\n    vec3 color = vec3(0.);\n    \n    vec2 stD = st;\n    st = st-0.5;\n    st = st * spinny;\n    st = tile(st+0.5,scale);\n\t\n    //green\n    vec2 stG = fract(st*2.+vec2(.5));\n    \n    colorV = tGreen*(box(stG-vec2(.092,0.),vec2(1./6.,2.),0.)+box(stG+vec2(.092,0.),vec2(1./6.,2.),0.));\n    colorH = tGreen*(box(stG-vec2(0.,.092),vec2(2.,1./6.),0.)+box(stG+vec2(0.,.092),vec2(2.,1./6.),0.));\n    \n    //purpl\n    vec2 stP = fract(st*1.);\n    \n    colorV += tPurpl * ( box(stP-vec2(.25,0.),vec2(1./10.,2.),0.) + \n    \t\t\t\t\tbox(stP-vec2(.3125,0.),vec2(1./128.,2.),0.) +\n    \t\t\t\t\tbox(stP-vec2(.329,0.),vec2(1./128.,2.),0.) +\n    \t\t\t\t\tbox(stP-vec2(.1875,0.),vec2(1./128.,2.),0.) +\n    \t\t\t\t\tbox(stP-vec2(.171,0.),vec2(1./128.,2.),0.) +\n\n    \t\t\t\t\tbox(stP+vec2(.2975,0.),vec2(1./16.,2.),0.) + \n    \t\t\t\t\tbox(stP+vec2(.2025,0.),vec2(1./16.,2.),0.) +\n    \t\t\t\t\tbox(stP+vec2(.25,0.),vec2(1./64.,2.),0.) );\t\n\n    colorH += tPurpl * ( box(stP+vec2(.0,.25),vec2(2.,1./10.),0.) +\n    \t\t\t\t\tbox(stP+vec2(0.,.3125),vec2(2.,1./128.),0.) +\n    \t\t\t\t\tbox(stP+vec2(0.,.329),vec2(2.,1./128.),0.) +\n    \t\t\t\t\tbox(stP+vec2(0.,.1875),vec2(2.,1./128.),0.) +\n    \t\t\t\t\tbox(stP+vec2(0.,.171),vec2(2.,1./128.),0.) +\n\n    \t\t\t\t\tbox(stP-vec2(0.,.2975),vec2(2.,1./16.),0.) + \n    \t\t\t\t\tbox(stP-vec2(0.,.2025),vec2(2.,1./16.),0.) +\n    \t\t\t\t\tbox(stP-vec2(0.,.25),vec2(2.,1./64.),0.) );\n    \n    //diags\n    stD = stD-0.5;\n    stD = stD * rotate2d(-PI/4.) * spinny;\n    stD = tile(stD+0.5,96.);\n    float diags = box(stD,vec2(2.,.75),0.5);\n    \n    color = mix(colorV,colorH,diags);\n    fragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}