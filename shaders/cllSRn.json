{
    "Shader": {
        "info": {
            "date": "1674202982",
            "description": "2D version of my 1D binary search shader (shadertoy.com/view/cljGDt), probably equivalent to a quadtree.\nUse mouse to move target :)",
            "flags": 0,
            "hasliked": 0,
            "id": "cllSRn",
            "likes": 17,
            "name": "2D Binary Search",
            "published": 3,
            "tags": [
                "2d",
                "binary",
                "animation",
                "1d",
                "sort",
                "quad",
                "quad",
                "squares",
                "quadtree",
                "search",
                "find"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "// UV distortion for fun\nvec2 distort(vec2 uv) {\n    return uv * (1.0 - length(uv * 0.1));\n}\n\n// Function to converge towards, use mouse to move target\nbvec2 check(vec2 guess) {\n    vec2 target = iMouse.z > 0.0 ?\n        distort((iMouse.xy - 0.5 * iResolution.xy) / iResolution.y)\n        : vec2(sin(iTime * 2.0) * 0.5, cos(iTime * 2.0) * 0.5);\n    return greaterThan(guess, target);\n}\n\n// From https://iquilezles.org/articles/distfunctions2d\nfloat line(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\n// Modified from https://www.shadertoy.com/view/lsS3Wc\nvec3 hue2rgb(float hue) {\n    return clamp(abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = distort((fragCoord - 0.5 * iResolution.xy) / iResolution.y);\n    fragColor.rgb = vec3(0.0);\n    \n    // Draw grid\n    vec2 grid = fract(uv * 16.0);\n    fragColor.rgb += vec3(step(0.9, max(grid.x, grid.y))) * 0.05;\n    \n    // Binary search\n    int steps = 6;\n    vec2 current = vec2(0.0);\n\tvec2 move = vec2(0.25);\n    \n\tfor (int i = 0; i < steps; i++, move *= 0.5) {\n        // Store previous for line\n        vec2 last = current;\n        \n        // Move another half towards the target\n        bvec2 result = check(current);\n\t\tcurrent.x += result.x ? -move.x : move.x;\n        current.y += result.y ? -move.y : move.y;\n        \n        // Draw line\n        float dist = line(uv, last, current);\n        float percent = float(i) / float(steps);\n        vec3 hue = hue2rgb(percent);\n        fragColor.rgb += hue * (0.005 + percent * 0.005) / dist;\n\t}\n    \n    // Draw vignette\n    fragColor.rgb += smoothstep(0.5, 2.0, length(uv));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}