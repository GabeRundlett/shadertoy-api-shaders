{
    "Shader": {
        "info": {
            "date": "1605580174",
            "description": "My first attempt at ray-tracing a cube with a point light source. If anybody could tell me why the shadow flickers when a face transitions between facing towards and away the light source, I would greatly appreciate it.",
            "flags": 0,
            "hasliked": 0,
            "id": "WstBR2",
            "likes": 1,
            "name": "raytraced cube",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "been_jamming",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "#define FOV_CONST 0.15\n#define RENDER_DISTANCE 50.0\n\nvec4 orientation;\n\nvec3 get_camera_ray(vec2 pixel){\n    float least_side;\n    \n    pixel -= vec2(0.5);\n    least_side = min(iResolution.x, iResolution.y);\n    return vec3(0.15*pixel.x*iResolution.x/least_side, 0.15*pixel.y*iResolution.y/least_side, FOV_CONST);\n}\n\nbool lit(vec3 p, vec3 light){\n    vec3 ray;\n    float d;\n    int i;\n    vec3 pos;\n    vec3 normal;\n    triangle tri;\n    \n    p = p + (light - p)*0.001;//We don't want the ray to collide with the original triangle\n    for(i = 0; i < 12; i++){\n        tri = triangles[i];\n        tri = translate_triangle(tri, -p);\n        d = ray_triangle_intersect(light - p, rotate_triangle(tri, vec3(0, 0, 4) - p, orientation), pos, normal);\n        if(d > 0.0)\n            return false;\n    }\n    \n    return true;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tint i;\n    vec3 camera_ray;\n    vec3 pos;\n    vec3 intersect_pos;\n    vec3 intersect_normal;\n    vec3 normal;\n    float d;\n    float p;\n    float least_distance = RENDER_DISTANCE + 1.0;\n    vec4 current_color = vec4(0.0, 0.0, 0.0, 1.0);\n    vec3 light_pos = vec3(10.0, 15.0, 0.0);\n    \n    orientation = create_orientation(vec3(sin(iTime/20.0), cos(iTime/17.0), -cos(iTime/3.0)), iTime/10.0);\n\n    camera_ray = get_camera_ray(vec2(fragCoord.x/iResolution.x, fragCoord.y/iResolution.y));\n    //Loop through 12 triangles and determine if camera ray intersects them\n    for(i = 0; i < 12; i++){\n        d = ray_triangle_intersect(camera_ray, rotate_triangle(triangles[i], vec3(0, 0, 4), orientation), pos, normal);\n        if(d > 0.0 && d < least_distance){\n            least_distance = d;\n            current_color = colors[i];\n            intersect_pos = pos;\n            intersect_normal = normal;\n        }\n    }\n    \n    if(least_distance < RENDER_DISTANCE){\n        if(lit(intersect_pos, light_pos)){\n            p = abs(dot(normalize(intersect_normal), normalize(intersect_pos - light_pos)));\n            fragColor = current_color*(p*3.0 + 1.0)/4.0;\n            fragColor.w = 1.0;\n        } else {\n            current_color *= 0.25;\n            current_color.w = 1.0;\n            fragColor = current_color;\n        }\n    } else {\n    \tfragColor = vec4(0.0, 0.0, 0.0, 1);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Verticies of cube triangle\n\nstruct triangle{\n    vec3 vertex0;\n    vec3 vertex1;\n    vec3 vertex2;\n};\n\ntriangle triangles[12] = triangle[12](triangle(vec3(1.0, 1.0, 3.0), vec3(1.0, -1.0, 3.0), vec3(-1.0, -1.0, 3.0)),\n                                      triangle(vec3(1.0, 1.0, 3.0), vec3(-1.0, 1.0, 3.0), vec3(-1.0, -1.0, 3.0)),\n                                      triangle(vec3(-1.0, 1.0, 5.0), vec3(-1.0, 1.0, 3.0), vec3(1.0, 1.0, 3.0)),\n                                      triangle(vec3(1.0, 1.0, 5.0), vec3(-1.0, 1.0, 5.0), vec3(1.0, 1.0, 3.0)),\n                                      triangle(vec3(-1.0, -1.0, 5.0), vec3(-1.0, -1.0, 3.0), vec3(-1.0, 1.0, 5.0)),\n                                      triangle(vec3(-1.0, 1.0, 3.0), vec3(-1.0, 1.0, 5.0), vec3(-1.0, -1.0, 3.0)),\n                                      triangle(vec3(-1.0, -1.0, 3.0), vec3(1.0, -1.0, 3.0), vec3(-1.0, -1.0, 5.0)),\n                                      triangle(vec3(1.0, -1.0, 3.0), vec3(1.0, -1.0, 5.0), vec3(-1.0, -1.0, 5.0)),\n                                      triangle(vec3(1.0, 1.0, 3.0), vec3(1.0, -1.0, 3.0), vec3(1.0, -1.0, 5.0)),\n                                      triangle(vec3(1.0, 1.0, 3.0), vec3(1.0, 1.0, 5.0), vec3(1.0, -1.0, 5.0)),\n                                      triangle(vec3(-1.0, 1.0, 5.0), vec3(-1.0, -1.0, 5.0), vec3(1.0, -1.0, 5.0)),\n                                      triangle(vec3(-1.0, 1.0, 5.0), vec3(1.0, 1.0, 5.0), vec3(1.0, -1.0, 5.0)));\n\n//Colors of the triangles\nvec4 colors[12] = vec4[12](vec4(0.0, 0.0, 1.0, 1.0),\n                           vec4(0.0, 0.0, 1.0, 1.0),\n                           vec4(0.0, 0.5, 1.0, 1.0),\n                           vec4(0.0, 0.5, 1.0, 1.0),\n                           vec4(0.5, 0.0, 1.0, 1.0),\n                           vec4(0.5, 0.0, 1.0, 1.0),\n                           vec4(0.5, 0.5, 1.0, 1.0),\n                           vec4(0.5, 0.5, 1.0, 1.0),\n                           vec4(0.0, 0.5, 0.0, 1.0),\n                           vec4(0.0, 0.5, 0.0, 1.0),\n                           vec4(1.0, 0.0, 1.0, 1.0),\n                           vec4(1.0, 0.0, 1.0, 1.0));\n\nbool same_side(vec3 p1, vec3 p2, vec3 a, vec3 b){\n    vec3 cp1;\n    vec3 cp2;\n    \n    cp1 = cross(b - a, p1 - a);\n    cp2 = cross(b - a, p2 - a);\n    if(dot(cp1, cp2) > 0.0){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nbool inside_triangle(vec3 p, triangle tri){\n\tif(same_side(p, tri.vertex0, tri.vertex1, tri.vertex2) &&\n       same_side(p, tri.vertex1, tri.vertex0, tri.vertex2) &&\n       same_side(p, tri.vertex2, tri.vertex0, tri.vertex1))\n        return true;\n    else\n        return false;\n}\n\ntriangle translate_triangle(triangle tri, vec3 v){\n    return triangle(tri.vertex0 + v, tri.vertex1 + v, tri.vertex2 + v);\n}\n\n//Return distance of intersection if there is an intersection, otherwise return -1.0\nfloat ray_triangle_intersect(vec3 ray, triangle tri, out vec3 pos, out vec3 normal){\n    float t;\n    vec3 ABC;\n    vec3 i;\n    float K;\n    \n    //Get the plane\n    ABC = cross(tri.vertex2 - tri.vertex0, tri.vertex1 - tri.vertex0);\n    normal = ABC;\n    K = dot(ABC, tri.vertex0);\n    \n    //Get the point of intersection, if it exists\n    t = K/dot(ABC, ray);\n    if(t < 0.0){\n        return -1.0;\n    }\n    i = t*ray;\n    pos = i;\n    \n    //Determine if this point is on the triangle\n   \tif(inside_triangle(i, tri))\n       return i.x*i.x + i.y*i.y + i.z*i.z;\n    else\n       return -1.0;\n}\n\nvec4 create_orientation(vec3 axis, float angle){\n    float len;\n    vec4 outvec;\n    \n    len = length(axis);\n    axis *= sin(angle)/len;\n    outvec.yzw = axis;\n    outvec.x = cos(angle);\n    \n    return outvec;\n}\n\nvec4 inverse_orientation(vec4 orientation){\n    float len;\n    \n    len = length(orientation);\n    orientation /= len;\n    orientation.yzw = -orientation.yzw;\n    \n    return orientation;\n}\n\nvec4 compose_orientation(vec4 a, vec4 b){\n    vec4 outvec;\n    \n    outvec.x = a.x*b.x - a.y*b.y - a.z*b.z - a.w*b.w;\n    outvec.y = a.x*b.y + a.y*b.x + a.z*b.w - a.w*b.z;\n    outvec.z = a.x*b.z - a.y*b.w + a.z*b.x + a.w*b.y;\n    outvec.w = a.x*b.w + a.y*b.z - a.z*b.y + a.w*b.x;\n    \n    return outvec;\n}\n\nvec3 apply_orientation(vec3 p, vec4 o){\n    vec4 v;\n    \n    v.x = 0.0;\n    v.yzw = p.xyz;\n    return compose_orientation(compose_orientation(o, v), inverse_orientation(o)).yzw;\n}\n\ntriangle rotate_triangle(triangle tri, vec3 center, vec4 o){\n    tri = triangle(apply_orientation(tri.vertex0 - center, o), apply_orientation(tri.vertex1 - center, o), apply_orientation(tri.vertex2 - center, o));\n\ttri = triangle(tri.vertex0 + center, tri.vertex1 + center, tri.vertex2 + center);\n    return tri;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}