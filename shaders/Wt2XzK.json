{
    "Shader": {
        "info": {
            "date": "1568362246",
            "description": "Velocity",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt2XzK",
            "likes": 11,
            "name": "Velocity",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1020
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// This shader shows how to control the velocity of an\n// object that is being animated with a sin() function.\n//\n// When animating something like angle=sin(v*t), with t being\n// the time (iTime for example), w is only the (angular) \n// velocity of the object if v is a constant.  Hence, doing \n// v(t) = smoothstep(0,1,t) for exampe will  result in an\n// acceleration and a deceleration, which is probably not\n// intenteded.\n//\n// To get the desired behaviour you need to define your v(t),\n// integrate it to get w(t), then plug it into the sin:\n//\n// v(t) = smoothste(0,1,t)      if t<1\n// v(t) = 1                     if t>=1\n//\n// Then you integrate that to get\n//\n// w(t) = t*t*t*(1.0 - t/2.0)   if t<1\n// w(t) = t-0.5                 if t>=1\n// \n// Try using the incorrect method below and restarting the\n// shader in order to see the difference:\n\n\n// 0: incorrect method: sin(v(t)*t)\n// 1:   correct method: sin(w(t))\n#define METHOD 1\n\n\n\n// https://iquilezles.org/articles/boxfunctions\nvec4 iBox( in vec3 ro, in vec3 rd, in mat4 tx, in vec3 rad ) \n{\n\tvec3 rdd = (tx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (tx*vec4(ro,1.0)).xyz;\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return vec4(-1.0);\n\tvec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\treturn vec4( tN, nor );\n}\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n\n\tvec3 ro = vec3( 0.0, 0.0, 2.2 );\n    vec3 rd = normalize( vec3(p.xy,-1.8) );\n    \n    \n    #if METHOD==0\n        // WRONG\n    \tfloat animation = smoothstep(0.0,1.0,iTime)*iTime;\n    #else\n        // CORRECT\n        float animation = (iTime<1.0) ?\n    \t    iTime*iTime*iTime*(1.0 - iTime/2.0)\n            :\n            iTime-0.5;\n    #endif\n    \n\tmat4 txi = rotationAxisAngle( normalize(vec3(1.0,1.0,0.0)), 0.5*animation-1.0 );\n\n\tvec3 col = vec3(0.1);\n\t\t\n\tconst vec3 box = vec3(0.4,0.6,0.8) ;\n\tvec4 res = iBox( ro, rd, txi, box);\n\tif( res.x>0.0 )\n\t{\n\t\tvec3 onor = res.yzw;\n\t\tvec3 wpos = ro + res.x*rd;\n\t\t\n\t    mat4 txx = inverse( txi );\n        vec3 opos = (txi*vec4(wpos,1.0)).xyz;\n        vec3 wnor = (txx*vec4(onor,0.0)).xyz;\n\n        col = vec3(1.0,0.5,0.1)*(0.5 + 0.5*wnor.y);\n        col *= 1.0 - (1.0-abs(onor.x))*smoothstep( box.x-0.04, box.x-0.02, abs(opos.x) );\n        col *= 1.0 - (1.0-abs(onor.y))*smoothstep( box.y-0.04, box.y-0.02, abs(opos.y) );\n        col *= 1.0 - (1.0-abs(onor.z))*smoothstep( box.z-0.04, box.z-0.02, abs(opos.z) );\n\t}\n\t\n\tcol = sqrt( col );\n\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}