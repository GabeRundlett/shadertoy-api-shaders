{
    "Shader": {
        "info": {
            "date": "1632721514",
            "description": "i tried to rebuild the technique that creates the ambience sounds in my game project. it's based on additive synthesis. go ahead and \"listen\" to various textures :)",
            "flags": 8,
            "hasliked": 0,
            "id": "4s3yR2",
            "likes": 4,
            "name": "3D abstract volume cube sound",
            "published": 3,
            "tags": [
                "sound",
                "additive",
                "synthesis",
                "creepy"
            ],
            "usePreview": 0,
            "username": "MacroMachines",
            "viewed": 409
        },
        "renderpass": [
            {
                "code": "// Fork of \"sound - digital ambience\" by srtuss. https://shadertoy.com/view/MdXXW2\n// 2018-02-24 13:41:48\n\n// srtuss 2014\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\n#define ITS 6\n\nvec2 circuit(vec3 p)\n{\n\tp = mod(p, 2.0) - 1.0;\n\tfloat w = 1e38;\n\tvec3 cut = vec3(1.0, 0.0, 0.0);\n\tvec3 e1 = vec3(-1.0);\n\tvec3 e2 = vec3(1.0);\n\tfloat rnd = 0.23;\n\tfloat pos, plane, cur;\n\tfloat fact = 0.9;\n\tfloat j = 0.0;\n\tfor(int i = 0; i < ITS; i ++)\n\t{\n\t\tpos = mix(dot(e1, cut), dot(e2, cut), (rnd - 0.5) * fact + 0.5);\n\t\tplane = dot(p, cut) - pos;\n\t\tif(plane > 0.0)\n\t\t{\n\t\t\te1 = mix(e1, vec3(pos), cut);\n\t\t\trnd = fract(rnd * 9827.5719);\n\t\t\tcut = cut.yzx;\n\t\t}\n\t\telse\n\t\t{\n\t\t\te2 = mix(e2, vec3(pos), cut);\n\t\t\trnd = fract(rnd * 15827.5719);\n\t\t\tcut = cut.zxy;\n\t\t}\n\t\tj += step(rnd, 0.2);\n\t\tw = min(w, abs(plane));\n\t}\n\treturn vec2(j / float(ITS - 1), w);\n}\n\nfloat scene(vec3 p)\n{\n\tvec2 cir = circuit(p);\n\treturn exp(-100.0 * cir.y) + pow(cir.x * 1.8 * (sin(p.z * 10.0 + iTime * -5.0 + cir.x * 10.0) * 0.5 + 0.5), 8.0);\n}\n\nfloat nse(float x)\n{\n    return fract(sin(x * 297.9712) * 90872.2961);\n}\n\nfloat nseI(float x)\n{\n    float fl = floor(x);\n    return mix(nse(fl), nse(fl + 1.0), smoothstep(0.0, 1.0, fract(x)));\n}\n\nfloat fbm(float x)\n{\n    return nseI(x) * 0.5 + nseI(x * 2.0) * 0.25 + nseI(x * 4.0) * 0.125;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 suv = uv;\n\tuv = 2.0 * uv - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\tvec3 ro = vec3(0.0, iTime * 0.92, 0.51);\n\tvec3 rd = normalize(vec3(uv, 0.39));\n\tro.xz = rotate(ro.xz, iTime * 0.91);\n\tro.xy = rotate(ro.xy, 0.02);\n\trd.xz = rotate(rd.xz, iTime * 0.2);\n\trd.xy = rotate(rd.xy, 0.92);\n\tfloat acc = 0.0;\n\tvec3 r = ro + rd * 0.95;\n\tfor(int i = 0; i < 10; i ++)\n\t{\n\t\tacc += scene(r + nse(r.x) * 0.053);\n\t\tr += rd * 0.05;\n\t}\n\tvec3 col = pow(vec3(acc * 0.04), vec3(0.2, 0.6, 0.10) * 8.0) * 2.0;\n\t//col -= exp(length(suv - 0.5) * -2.5 - 0.2);\n    col = clamp(col, vec3(0.0), vec3(1.0));\n    col *= fbm(iTime * 6.0) * 2.0;\n\tcol = pow(col, vec3(1.0 / 2.2));\n\t//col = clamp(col, vec3(0.0), vec3(1.0));\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "#define NSPC 32\n#define pi2 6.283185307179586476925286766559\n\nvec2 synth(float t)\n{\n\tvec2 v = vec2(0.0);\n\tfloat base = 100.0 ;//+ sin(t * 0.1) * 60.0;\n\tfloat flt = cos(t * 0.50) * 6.0 + 10.0;\n\tfloat fmd = smoothstep(-0.1, 0.1, sin(t * 10.0)) * 8.0;\n\tfor(int i = 0; i < NSPC; i ++)\n\t{\n\t\tfloat h = float(i + 7);\n\t\tfloat inten = 1.0 / h;\n\t\tinten *= sin((pow(h, sin(t) * 0.5 + 0.5) + t * 0.5) * pi2) * 0.59 + 0.1;\n\t\tvec2 ti = texture(iChannel0, vec2(h / 256.0, t * 0.1)).xy;\n\t\tfloat f = ti.y * fmd;\n\t\tinten *= pow(ti.x, 14.0);\n\t\tinten *= exp(-max(8.0 - h * 4.0, 0.0));\n\t\tinten *= mod(h, 1.050);\n\t\tv.x += inten * sin(h + pi2 * (t * base * h) + f);\n\t\tv.y += inten * sin(pi2 * (t * base * h) + f);\n\t}\n\treturn v;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n\tvec2 m;\n\tm = synth(time);\n\tfloat ec = 0.5, fb = 0.18, et = 0.93, tm = 0.3;\n\tm += synth(time - et) * ec * vec2(1.0, 0.2); ec *= fb; et += tm;\n\tm += synth(time - et).yx * ec * vec2(0.2, 1.0); ec *= fb; et += tm;\n\t//m += synth(time - et) * ec * vec2(1.0, 0.2); ec *= fb; et += tm;\n\t//m += synth(time - et).yx * ec * vec2(0.2, 1.0); ec *= fb; et += tm;\n\tm *= 8.8;\n\treturn m;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}