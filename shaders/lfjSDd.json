{
    "Shader": {
        "info": {
            "date": "1707078214",
            "description": "fbm swirly tango",
            "flags": 0,
            "hasliked": 0,
            "id": "lfjSDd",
            "likes": 10,
            "name": "colorfog",
            "published": 3,
            "tags": [
                "fbm",
                "rgb"
            ],
            "usePreview": 0,
            "username": "pb",
            "viewed": 243
        },
        "renderpass": [
            {
                "code": "//philip.bertani@gmail.com\n\nfloat numOct  = 4. ;  //number of fbm octaves\nfloat focus = 0.;\nfloat focus2 = 0.;\n#define pi  3.14159265\n\nfloat random(vec2 p) {\n    //a random modification of the one and only random() func\n    return fract( sin( dot( p, vec2(12., 90.)))* 5e5 );\n}\n\nmat2 rot2(float an){float cc=cos(an),ss=sin(an); return mat2(cc,-ss,ss,cc);}\n\n//this is the noise func everyone uses...\nfloat noise(vec3 p) {\n    vec2 i = floor(p.yz);\n    vec2 f = fract(p.yz);\n    float a = random(i + vec2(0.,0.));\n    float b = random(i + vec2(1.,0.));\n    float c = random(i + vec2(0.,1.));\n    float d = random(i + vec2(1.,1.));\n    vec2 u = f*f*(3.-2.*f); \n    \n    return mix( mix(a,b,u.x), mix(c,d,u.x), u.y);\n}\n\nfloat fbm3d(vec3 p) {\n    float v = 0.;\n    float a = .35;\n\n    for (float i=0.; i<numOct; i++) {\n        v += a * noise(p);\n        a *= .25*(1.2+focus+focus2);\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y * 2.5;\n\n    float aspectRatio = iResolution.x / iResolution.y;\n\n    vec3 rd = normalize( vec3(uv, -1.2) );  \n    vec3 ro = vec3(0); \n    \n    float delta = iTime / 1.5 ; \n        \n    rd.yz *= rot2(-delta/2. );\n    rd.xz *= rot2(delta*3.);\n    vec3 p = ro + rd;\n\n    float bass = 1.5 +  .5*max(0.,2.*sin(iTime*3.));\n    \n    vec2 nudge = vec2( aspectRatio*cos(iTime*1.5), sin(iTime*1.5));\n\n    focus = length(uv + nudge);\n    focus = 2./(1.+focus) * bass;\n\n    focus2 = length(uv - nudge);\n    focus2 = 4./(1.+focus2*focus2) / bass;\n\n    vec3 q = vec3( fbm3d(p), fbm3d(p.yzx), fbm3d(p.zxy) ) ;\n\n    float f = fbm3d(p + q);\n    \n    vec3 cc = q;\n    cc *= 20.*f;   \n\n    cc.r += 5.*focus; cc.g+= 3.5*focus; \n    cc.b += 7.*focus2; cc.r-= 3.5*focus2;    \n    cc /= 25.;\n\n    fragColor = vec4( cc,1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}