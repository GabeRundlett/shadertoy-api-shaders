{
    "Shader": {
        "info": {
            "date": "1674849582",
            "description": "Unity Logo\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dlfSDM",
            "likes": 5,
            "name": "Logo Unity Animated",
            "published": 3,
            "tags": [
                "logo",
                "unity"
            ],
            "usePreview": 0,
            "username": "Karp",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Parameter\n    float time = mod(iTime,3. * PI);\n    float size = 1. + Clamp01((time * .5) -2.) *sin(time) * .2;\n    float rounding = 0.1;\n    float blurLvl = 250.0;\n\n    //Color\n    vec3 background = Color255(250,250,250);\n    vec3 shadow = Color255(0,0,0);\n    vec3 highlight = Color255(140,140,140);\n    vec3 midtone = Color255(76,76,76);\n    vec3[] colors = vec3[](highlight, midtone, shadow);\n    \n    //Start\n    vec2 uv = AspectRatioUV(fragCoord, iResolution.xy);\n    vec3 pixel = background;\n    float voidmask,square, line;\n    \n    //Cube\n    pixel = mix(Clamp01(time -0.33)*Cube(uv * (1./size), 0.,colors,blurLvl), pixel, CubeMask(uv, Clamp01(time) * size, blurLvl));\n    \n    for(float i = 0.; i < 3.; i++)\n    {\n        //Rounded Square\n        square = sdRhombus(RotateUV(uv, i *120.) + Clamp01(time -1.-(i * .33)) * vec2(0.0,-0.25 * size),Clamp01(time -1.-(i * .33)) * vec2(.22* size,.22* size / 1.75));\n        voidmask += mix(1., 0., Clamp01((square-.01)*blurLvl));\n        //Line\n        line = sdBox(RotateUV(uv, i *120.)+ Clamp01(time -2.-(i * .33)) *vec2(0.0,-1.* size), Clamp01(time -2.-(i * .33)) *vec2(0.025* size,0.8* size));\n        voidmask += mix(1., 0., Clamp01((line-.01)*blurLvl));\n    }\n\n    pixel = mix(pixel, background, Clamp01(time -1.66) *Clamp01(voidmask));\n\tfragColor = vec4(pixel, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265359\n//UV\nvec2 AspectRatioUV(vec2 fragCoord, vec2 resolution)\n{\t\n    vec2 uv = vec2( fragCoord.xy - 0.5*resolution.xy );\n    // [0, iResolution.x] -> [-0.5*iResolution.x, 0.5*iResolution.x]\n\t// [0, iResolution.y] -> [-0.5*iResolution.y, 0.5*iResolution.y]\n\tuv = 2.0 * uv.xy / resolution.y;\n    // AspectRatio = 1920 / 1080 = 1.778\n    // [-0.5*iResolution.x, 0.5*iResolution.x] ->[-1.778, 1.778]\n\t// [-0.5*iResolution.y, 0.5*iResolution.y] ->[-1, 1]\n    \n    return uv;\n}\nvec2 RotateUV(inout vec2 uv, float angle)\n{\t\n\tangle = angle * PI / 180.0;\n    return uv * mat2(cos(angle),sin(angle),-sin(angle),cos(angle));\n}\n\n//Color \nvec3 Color255(int R, int G, int B)\n{\n    return vec3(float(R)/255.0, float(G)/255.0, float(B)/255.0);\n}\nfloat Clamp01( in float value)\n{\n    return clamp(value,0.0,1.0);\n}\n\n//Regular Hexagon - exact from https://iquilezles.org/articles/distfunctions2d\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n// Rhombus - exact from IQ (https://www.shadertoy.com/view/XdXcRB)\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\nfloat sdBox( in vec2 pos, in vec2 box )\n{\n    vec2 dist = abs(pos)-box;\n    return length(max(dist,0.0)) + min(max(dist.x,dist.y),0.0);\n}\nvec3 Cube(vec2 uv,float size, vec3[3] colors, float blurLvl)\n{\n    vec3 result = vec3(0.0);\n    //Sqrt(3) = 1.732\n    float top   = sdRhombus(RotateUV(uv, 000.0) + vec2(0.0,-.6/ 1.732), vec2(.6,.6 / 1.732));\n    float left  = sdRhombus(RotateUV(uv, 120.0) + vec2(0.0,-.6/ 1.732), vec2(.6,.6 / 1.732));\n    float right = sdRhombus(RotateUV(uv,-120.0) + vec2(0.0,-.6/ 1.732), vec2(.6,.6 / 1.732));\n\n    result = mix(colors[0], result, Clamp01((top)*blurLvl));\n    result = mix(colors[1], result, Clamp01((left)*blurLvl));\n    result = mix(colors[2], result, Clamp01((right)*blurLvl));\n\n    return result;\n}\n\nfloat CubeMask(vec2 uv,float size, float blurLvl)\n{\n    return Clamp01((sdHexagon(RotateUV(uv, 30.0), size *0.5))*blurLvl);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}