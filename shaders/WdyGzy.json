{
    "Shader": {
        "info": {
            "date": "1570410707",
            "description": "It's really cool that you can represent a fluid as just up down left right energy",
            "flags": 32,
            "hasliked": 0,
            "id": "WdyGzy",
            "likes": 276,
            "name": "Lattice Boltzmann ",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 1,
            "username": "wyatt",
            "viewed": 14313
        },
        "renderpass": [
            {
                "code": "// LENS FLAIR EFFECT\n#define R iResolution.xy\n#define T(U) texture(iChannel0,(U)/R)\nvec4 F (vec2 U,vec2 r) {\n\tvec4 t = T(U+r);\n    return exp(-.01*dot(r,r))*(exp(2.*t)-1.);\n}\nvoid mainImage( out vec4 Q, vec2 U )\n{\n   \n   Q = vec4(0);\n    for (float i = 0.; i < 7.; i+=1.1) {\n    \tQ += F(U,+vec2(-i,i));\n    \tQ += F(U,+vec2(i,i));\n    \tQ += F(U,-vec2(-i,i));\n    \tQ += F(U,-vec2(i,i));\n    }\n    Q = T(U)*0.15+ 1e-5*Q;\n    Q = atan(Q);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// FLUID EVOLUTION\n#define R iResolution.xy\n#define T(U) texture(iChannel0,(U)/R)\n#define D(U) texture(iChannel1,(U)/R)\n#define B(U) texture(iChannel2,(U)/R)\n// Velocity\nvec2 v (vec4 b) {\n\treturn vec2(b.x-b.y,b.z-b.w);\n}\n// Pressure\nfloat p (vec4 b) {\n\treturn 0.25*(b.x+b.y+b.z+b.w);\n}\n// TRANSLATE COORD BY Velocity THEN LOOKUP STATE\nvec4 A(vec2 U) {\n    U-=.5*v(T(U));\n    U-=.5*v(T(U));\n\treturn T(U);\n}\nvoid mainImage( out vec4 Q, in vec2  U)\n{\n    // THIS PIXEL\n    Q = A(U);\n    // NEIGHBORHOOD\n    vec4 \n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0));\n    // GRADIENT of PRESSURE\n    float px = 0.25*(p(e)-p(w));\n    float py = 0.25*(p(n)-p(s)); \n    \n    \t\t// boundary Energy exchange in :   \n    Q += 0.25*(n.w + e.y + s.z + w.x)\n        \t// boundary Energy exchange out :\n        \t-p(Q)\n        \t// dV/dt = dP/dx,  dEnergy In dTime = dEnergy in dSpace\n        \t-vec4(px,-px,py,-py);\n    \n    // get value from picture buffer\n    float z = .8-length(B(U).xyz);\n    // some kind of viscolsity thing \n    Q = mix(mix(Q,0.25*(n+e+s+w),.01),vec4(p(Q)),.01*(1.-z));\n    // gravity polarizes energy! pretty cool imo\n    Q.zw -= 0.001*z*vec2(1,-1);\n    // Init with no velocity and some pressure\n    if (iFrame < 1||(iMouse.z>0.&&length(U-iMouse.xy)<R.y/5.)) Q = vec4(.2);\n    // At boundarys turn all kinetic energy into potential energy\n    if(U.x<3.||R.x-U.x<3.||U.y<3.||R.y-U.y<3.)Q = vec4(p(Q));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// TRANSLATE LOCATION FIELD WITH v(A(coord)), INIT WITH FragCoord\n#define R iResolution.xy\n#define A(U) texture(iChannel0,(U)/R)\n#define d(U) texture(iChannel1,(U)/R)\n#define C(U) texture(iChannel2,(U)/R)\nvec2 v (vec4 b) {\n\treturn vec2(b.x-b.y,b.z-b.w);\n}\nvec4 D(vec2 U) {\n    U-=.5*v(A(U));\n    U-=.5*v(A(U));\n\treturn d(U);\n}\nvoid mainImage( out vec4 Q, in vec2  U)\n{\n    Q = D(U);\n    \n    vec4 \n        q = A(U),\n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0)),\n        N = D(U+vec2(0,1)),\n        E = D(U+vec2(1,0)),\n        S = D(U-vec2(0,1)),\n        W = D(U-vec2(1,0));\n    Q += 0.25*((n.w-q.z)*(N-Q) + (e.y-q.x)*(E-Q) + (s.z-q.w)*(S-Q) + (w.x-q.y)*(W-Q));\n    \n    if (iFrame < 1||(iMouse.z>0.&&length(U-iMouse.xy)<R.y/5.)) Q = vec4(U,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// LOOK UP PICTURE IN LOCATION FROM BUFFER D\n#define R iResolution.xy\n#define T(U) texture(iChannel0,(U)/R)\n#define D(U) texture(iChannel1,(U)/R)\nvoid mainImage( out vec4 Q, vec2 U )\n{\n    Q = texture(iChannel2,D(U).xy/R);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Lighting on Buffer B\n#define R iResolution.xy\n#define T(U) texture(iChannel0,(U)/R)\n\nvoid mainImage( out vec4 Q, vec2 U )\n{\n   Q =  1.2-2.2*T(U);\n    Q.xyz = Q.xyz+.5*normalize(Q.xyz);\n   float\n       n = length(T(U+vec2(0,1))),\n       e = length(T(U+vec2(1,0))),\n       s = length(T(U-vec2(0,1))),\n       w = length(T(U-vec2(1,0)));\n    vec3 no = normalize(vec3(e-w,n-s,1));\n    float d = dot(reflect(no,vec3(0,0,1)),normalize(vec3(1)));\n    Q *= 8.*exp(-3.*d*d);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}