{
    "Shader": {
        "info": {
            "date": "1395091778",
            "description": "original version. ",
            "flags": 0,
            "hasliked": 0,
            "id": "ldS3Wd",
            "likes": 1,
            "name": "perforations",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "ahihi",
            "viewed": 334
        },
        "renderpass": [
            {
                "code": "// TAU = 2*PI\n#define TAU 6.283185307179586\n\nvec2 rotate(float theta, vec2 p) {\n\tvec2 polar = vec2(atan(p.y, p.x), length(p));\n\tpolar.x += theta;\n\treturn vec2(polar.y * cos(polar.x), polar.y * sin(polar.x));\n}\n\nvec2 shear(float theta, vec2 p) {\n\treturn vec2(p.x - p.y / tan(theta), p.y / sin(theta));\n}\n\nvec2 unshear(float theta, vec2 p) {\n\tfloat y = p.y * sin(theta);\n\tfloat x = p.x + y / tan(theta);\n\treturn vec2(x, y);\t\n}\n\nvec2 target(float theta, float delta, vec2 p) {\n\treturn unshear(theta, floor(shear(theta, p) + delta) - delta + 0.5);\n}\n\nbool perforations(float theta, float rot, float scale, float r, vec2 p0) {\n\tvec2 p1 = scale * rotate(rot, p0);\n\treturn distance(p1, target(theta, 0.5, p1)) < r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // relative coordinates: -1 ≤ p0.x ≤ 1\n\tvec2 p0 = 2.0*(fragCoord.xy - 0.5 * iResolution.xy) / iResolution.xx;\n\n    // come up with some magic numbers...\n    \n    // try 4, 2, 1.9999\n\tfloat theta = TAU / 6.0;\n\t\n\tfloat rot1 = 0.01 * TAU * iTime;\n\tfloat rot2 = rot1 + TAU / 12.0 + TAU / 18.0 * sin(0.6 * iTime);\n\t\n\tfloat scale1 = 16.0;\n\tfloat scale2 = 16.0;\n\t\n    // try 0.3\n\tfloat r1 = 0.4;\n\tfloat r2 = 0.4;\n\t\n    // compute mask\n\tbool i1 = perforations(theta, rot1, scale1, r1, p0);\n\tbool i2 = perforations(theta, rot2, scale2, r2, p0);\n\tbool mask = i1 && i2;\n    \n    // choose color depending on mask\n\tvec3 color = mask\n        ? vec3(1.0, 0.0, 1.0 - length(p0))\n        : vec3(0.0, 0.0, 0.0);\n\t\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}