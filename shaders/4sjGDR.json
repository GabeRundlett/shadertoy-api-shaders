{
    "Shader": {
        "info": {
            "date": "1386149026",
            "description": "stromgren sphere with density noise\nKey Space : integral(dist^2*density) noise vs density noise\nKey A : animate ionizing photon rate (star type)\nKey D : debug display : density ->red and integral(dist^2*density)  -> green",
            "flags": 16,
            "hasliked": 0,
            "id": "4sjGDR",
            "likes": 7,
            "name": "HII region",
            "published": 3,
            "tags": [
                "noise",
                "sphere",
                "stromgren"
            ],
            "usePreview": 0,
            "username": "Mikael",
            "viewed": 558
        },
        "renderpass": [
            {
                "code": "// Mikael Lemercier, December, 2013\n\n#define PI 3.14159\n#define CAMERA_DIST 4.\n\n// --- noise functions from https://www.shadertoy.com/view/XslGRr\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define FULL_PROCEDURAL\n#ifdef FULL_PROCEDURAL\n\n// hash based 3d value noise\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n}\n#else\n\n// LUT based 3d value noise\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n#endif\n\n#define mynoise(q) (1.-abs(2.*noise(q)-1.))\n\nfloat fbm( in vec3 q )\n{\n\tfloat f;\n    f  = 0.5000*mynoise( q ); q = q*2.02;\n    f += 0.2500*mynoise( q ); q = q*2.03;\n    f += 0.1250*mynoise( q ); q = q*2.01;\n    f += 0.0625*mynoise( q );\n\treturn f;\n}\n// --- End of: Created by inigo quilez --------------------\n\nbool key_toggle(float ascii) { \n\treturn (texture(iChannel1,vec2((ascii+.5)/256.,0.75)).x > 0.); \n}\n\n// shape\nvec4 map( in vec3 p )\n{\n\t\n\tfloat l = length(p);\n\t\n\t// profile: \n\t//    dens max on sphere shell l = 1\n\t//    density slope stiffer inside (shockwave)\n\t//float d = 1. - l;\n    //if (d>0.) d = -3.*d;\n\t// d = -sqrt(-d);\n\t//float d = 3.*l;\n\t\n\t// add noise to profile.\n\t// noise = supercondensed \"fire\" fbm\n\tfloat n = pow(fbm(p),4.);//0.17;//\n\t//d += 1.5;//+0.5 * n;\n\n\t//n = exp(-(p.x-2.0)*(p.x-2.0)) ;//+ 0.5*exp(-(p.x-8.0)*(p.x-8.0));\n\t\t\n\t// volume cut, for debug\n\t//if (key_toggle(32.))  if (p.x>0.) d = 0.;\n\t\n\tfloat d =  pow(1.5*l+n,3.0)/60.0;\n\t//d = n;//1.*1.*l*l*l/3.;\n\t\n\tvec4 res;\n\tres.w = d;// (density+1.5*l)^3\n\tres.x = n;// density\n\tres.y = l;// length\n\t\n\t//res.xyz = vec3(1.,1.,1.);\n\t// color: orange on the shell then darkening red\n\t//res.xyz = clamp(vec3(1./pow(l*1.,1.),.6/pow(l,3.),0.),0.,1.); \n\t// transparent blue inside\n\t//if (!key_toggle(66.)) \n\t//\tif ((l<1.) && (res.w==0.)) res += vec4(0.,0.,1.,.1);\n\t\n\treturn res;\n}\n\n\nfloat computeIntdist2Noise(vec3 pos, float posDist )\n{\t\n\tfloat intdist2Noise = 0.;\n\tconst int stepCount = 30;\n\tvec3 stp3d = pos/float(stepCount);\n\tfor (int i = 0; i < stepCount; ++i)\n\t{\n\t\tvec2 localNoiseLength = map( stp3d*float(i) ).xy;\n\t\t\n\t\tintdist2Noise += localNoiseLength.x*localNoiseLength.y*localNoiseLength.y;\n\t}\n\treturn intdist2Noise*posDist/float(stepCount);\n\t\n}\n\nvec4 raymarch( in vec3 ro, in vec3 rd )\n{\n\tvec4 sum = vec4(0, 0, 0, 0);\n\n\tfloat stromgrenSphereRecombinationValue = pow(mod(iTime,10.)/10.,3.);\n\tif (key_toggle(65.))//animate ionizing photon rate (star type)\n\t{\n\t\tstromgrenSphereRecombinationValue = 0.3;\n\t}\n\t\n\tfloat t = 3.0;\n\tconst int stepCount = 64;\n\tfloat rayLength = (CAMERA_DIST-t)*2.;\n\tfloat stepSize = rayLength/float(stepCount);\n\tfor(int i=0; i<stepCount; i++)\n\t{\n\t\tfloat pixelSizeAtStep = t/1.5*2.0/ iResolution.y; \n\t\tfloat pixelSurfaceAtStep = pixelSizeAtStep*pixelSizeAtStep;\n\t\tfloat sampledVolume = stepSize*pixelSurfaceAtStep;//pc^3\n\t\t\n\t\t//if( sum.a > 0.99 ) continue;\n\n\t\tvec3 pos = ro + t*rd;\n\t\tvec4 col = map( pos ); // .w = density\n\t\t\n\t/*if (key_toggle(79.))  // Ombrage\n\t{\n\t\tvec3 sundir = -normalize(pos); // vec3(-1.0,0.0,0.0);\n#define EPS .3\t\n\t\tfloat dif = (col.w - map(pos+EPS*sundir).w)/EPS; // grad(dens).L\n\n\t\tcol.xyz *= .5+.5*clamp(.5*dif, 0.,1.);\n\t}*/\n\t\t\n\t\t//col.a *= 0.35;\n\t\t//col.rgb *= col.a;\n\t\t\n\t\tfloat currentRecombinationValue =0.;\n\t\tfloat density = 0.2;\n\t\tif (key_toggle(32.))//density noise\n\t\t{\n\t\t\tcurrentRecombinationValue = computeIntdist2Noise(pos,length(pos));\n\t\t\t//density = col.x;\n\t\t}\n\t\telse//integral(dist^2*density) noise\n\t\t{\n\t\t\tcurrentRecombinationValue = col.w;\n\t\t\tfloat EPS = 0.00001;\n\t\t\tfloat posDist = length(pos);\n\t\t\tvec3 posDir = pos/posDist;\n\t\t\t//density = (col.w - map(pos-EPS*posDir).w)/EPS/(posDist*posDist);\n\t\t}\n\t\tsum = sum + sampledVolume*1.e5*density*density*(step(currentRecombinationValue,stromgrenSphereRecombinationValue)*vec4(0.0,0.7,0.0,1.0) \n\t\t\t\t   + step(currentRecombinationValue,stromgrenSphereRecombinationValue*0.8)*vec4(0.0,0.0,1.0,1.0)\n\t\t\t\t   + step(currentRecombinationValue,stromgrenSphereRecombinationValue*1.1)*step(stromgrenSphereRecombinationValue*0.9,currentRecombinationValue)*vec4(1.0,0.0,0.0,1.0));\n\t\t/*if ( col.a < 1.0)\n\t\t{\n\t\t\tsum = sum + col;//*(1.0 - sum.a);\n\t\t}*/\n\t\t\n\t\t/*float l = length(pos);\n\t\tif ( l < 1.0)\n\t\t{\n\t\t\tsum = sum + vec4(0.0,1.,1.,1.);\n\t\t}*/\n\t\t\n\t\tt += stepSize;//max(0.1,0.025*t);\n\t}\n\n\t//sum.xyz /= (0.001+sum.w);\n\n\treturn clamp( sum, 0.0, 1.0 );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n\t//camera\n\tfloat theta = (iMouse.x / iResolution.x *2. - 1.)*PI;\n    float phi = (iMouse.y / iResolution.y - .5)*PI;\n\tvec3 cameraPos = CAMERA_DIST*vec3(sin(theta)*cos(phi),sin(phi),cos(theta)*cos(phi));\n    //vec3 cameraPos = vec3(0.0,0.0,4.0);      \n    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 ww = normalize( cameraPos - cameraTarget );\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n    vec3 cameraDir = normalize( p.x*uu + p.y*vv - 1.5*ww );\n\t\n\tif (key_toggle(68.))//debug display : density ->red and integral(dist^2*density)  -> green\n\t{\n\t\tvec3 posDir = normalize(vec3(1.,0.,0.));\n\t\tfloat posDist = q.x*10.0;\n\t\tvec3 pos = posDist*posDir;\n\t\tfloat noise = 1.0-step(map( pos ).x,q.y*2.0/(iResolution.x/ iResolution.y));//noise\n\t\tfloat intdist2NoiseRatio = 1.0-step(computeIntdist2Noise(pos,posDist),q.y*80.0/(iResolution.x/ iResolution.y)); //int(dist^2*noise)\n\t\tfloat noisePlusDistCube = 1.0-step(map( pos ).w,q.y*80.0/(iResolution.x/ iResolution.y));//(noise + dist)^3\n\t\tfloat EPS = 0.00001;\n\t\tfloat diffnoisePlusDistCube =  1.0-step((map(pos).w - map(pos-EPS*posDir).w)/EPS/(posDist*posDist),q.y*2.0/(iResolution.x/ iResolution.y));\n\t\n\t\tif (key_toggle(32.))//density noise\n\t\t{\n\t\t\tfragColor = vec4(noise,intdist2NoiseRatio,0.,1.0);\n\t\t}\n\t\telse//integral(dist^2*density) noise\n\t\t{\n\t\t\tfragColor = vec4(diffnoisePlusDistCube,noisePlusDistCube,0.,1.0);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvec4 col = raymarch( cameraPos, cameraDir );\n\t\tfragColor = col;\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}