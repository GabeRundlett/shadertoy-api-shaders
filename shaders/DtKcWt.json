{
    "Shader": {
        "info": {
            "date": "1700799511",
            "description": "combining the text renderer with some older code",
            "flags": 0,
            "hasliked": 0,
            "id": "DtKcWt",
            "likes": 2,
            "name": "Curl Noise ( Text )",
            "published": 3,
            "tags": [
                "text",
                "font",
                "lut"
            ],
            "usePreview": 0,
            "username": "0xBAMA",
            "viewed": 240
        },
        "renderpass": [
            {
                "code": "const uint loremIpsum[ 500 ] = uint[]( 76u, 111u, 114u, 101u, 109u, 32u, 105u, 112u, 115u, 117u, 109u,\n 32u, 100u, 111u, 108u, 111u, 114u, 32u, 115u, 105u, 116u, 32u, 97u, 109u, 101u, 116u, 44u, 32u, 99u,\n 111u, 110u, 115u, 101u, 99u, 116u, 101u, 116u, 117u, 114u, 32u, 97u, 100u, 105u, 112u, 105u, 115u, 99u,\n 105u, 110u, 103u, 32u, 101u, 108u, 105u, 116u, 46u, 32u, 80u, 104u, 97u, 115u, 101u, 108u, 108u, 117u,\n 115u, 32u, 112u, 104u, 97u, 114u, 101u, 116u, 114u, 97u, 32u, 102u, 114u, 105u, 110u, 103u, 105u, 108u,\n 108u, 97u, 32u, 114u, 105u, 115u, 117u, 115u, 44u, 32u, 115u, 105u, 116u, 32u, 97u, 109u, 101u, 116u,\n 32u, 100u, 105u, 103u, 110u, 105u, 115u, 115u, 105u, 109u, 32u, 114u, 105u, 115u, 117u, 115u, 32u, 100u,\n 105u, 99u, 116u, 117u, 109u, 32u, 101u, 103u, 101u, 116u, 46u, 32u, 78u, 117u, 108u, 108u, 97u, 109u,\n 32u, 114u, 117u, 116u, 114u, 117u, 109u, 32u, 118u, 117u, 108u, 112u, 117u, 116u, 97u, 116u, 101u, 32u,\n 109u, 97u, 115u, 115u, 97u, 32u, 101u, 103u, 101u, 116u, 32u, 112u, 117u, 108u, 118u, 105u, 110u, 97u,\n 114u, 46u, 32u, 73u, 110u, 32u, 101u, 103u, 101u, 116u, 32u, 100u, 105u, 99u, 116u, 117u, 109u, 32u,\n 97u, 110u, 116u, 101u, 46u, 32u, 78u, 117u, 110u, 99u, 32u, 97u, 108u, 105u, 113u, 117u, 97u, 109u,\n 32u, 113u, 117u, 105u, 115u, 32u, 97u, 117u, 103u, 117u, 101u, 32u, 97u, 99u, 32u, 111u, 114u, 110u,\n 97u, 114u, 101u, 46u, 32u, 80u, 101u, 108u, 108u, 101u, 110u, 116u, 101u, 115u, 113u, 117u, 101u, 32u,\n 108u, 117u, 99u, 116u, 117u, 115u, 32u, 112u, 114u, 101u, 116u, 105u, 117u, 109u, 32u, 108u, 105u, 98u,\n 101u, 114u, 111u, 32u, 117u, 116u, 32u, 99u, 111u, 110u, 115u, 101u, 99u, 116u, 101u, 116u, 117u, 114u,\n 46u, 32u, 78u, 117u, 108u, 108u, 97u, 32u, 97u, 32u, 111u, 100u, 105u, 111u, 32u, 97u, 99u, 32u, 111u,\n 114u, 99u, 105u, 32u, 109u, 111u, 108u, 101u, 115u, 116u, 105u, 101u, 32u, 105u, 109u, 112u, 101u, \n 114u, 100u, 105u, 101u, 116u, 32u, 97u, 32u, 105u, 110u, 32u, 108u, 101u, 111u, 46u, 32u, 83u, 101u,\n 100u, 32u, 101u, 117u, 32u, 105u, 110u, 116u, 101u, 114u, 100u, 117u, 109u, 32u, 108u, 101u, 111u,\n 46u, 32u, 67u, 117u, 114u, 97u, 98u, 105u, 116u, 117u, 114u, 32u, 102u, 114u, 105u, 110u, 103u, 105u,\n 108u, 108u, 97u, 32u, 101u, 103u, 101u, 116u, 32u, 106u, 117u, 115u, 116u, 111u, 32u, 101u, 103u, 101u,\n 116u, 32u, 116u, 105u, 110u, 99u, 105u, 100u, 117u, 110u, 116u, 46u, 32u, 77u, 111u, 114u, 98u, 105u,\n 32u, 112u, 111u, 115u, 117u, 101u, 114u, 101u, 32u, 115u, 105u, 116u, 32u, 97u, 109u, 101u, 116u, 32u,\n 100u, 117u, 105u, 32u, 105u, 110u, 32u, 118u, 117u, 108u, 112u, 117u, 116u, 97u, 116u, 101u, 46u, 32u,\n 80u, 104u, 97u, 115u, 101u, 108u, 108u, 117u, 115u, 32u, 105u, 109u, 112u, 101u, 114u, 100u, 105u, 101u,\n 116u, 32u, 113u, 117u, 97u, 109u, 32u, 97u, 116u, 32u, 114u, 105u, 115u, 117u, 115u, 32u, 108u, 97u,\n 99u, 105u, 110u, 105u, 97u, 32u, 97u, 99u, 99u, 117u, 109u, 115u, 97u, 110u, 46u, 32u, 86u, 101u, 115u,\n 116u, 105u, 98u );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float scale = 0.8f;\n    float timeScale = 0.01f;\n    fragCoord.xy = scale * fragCoord.xy;\n    ivec2 bin = ivec2( floor( fragCoord.xy / vec2( 8, 16 ) ) );\n    ivec2 offset = ( bin * ivec2( 8, 16 ) - ivec2( floor( fragCoord.xy ) ) ) % ivec2( 8, 16 );\n\n    vec3 curlNoise = curlResult( vec3( vec2( bin ) / vec2( 200.0f, 130.0f ), iTime * timeScale ) + vec3( iTime * timeScale, 0.0f, 0.0f ) );\n\n    int onGlyph = fontRef( loremIpsum[ int( sin( curlNoise.r ) * 10.0f ) ], offset );\n    vec3 col = vec3( 0.0f );\n    switch ( onGlyph ) {\n        case -1: col = vec3( 0.1618f ); break; // out of bounds\n        case  0: col = vec3( 0.0f );    break; // \"off\" pixel\n        case  1: col = curlNoise;  break; // \"on\" pixel\n    }\n\n    // Output to screen\n    fragColor = vec4( col, 1.0f );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Hash by David_Hoskins\n#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n#define UIF (1.0 / float(0xffffffffU))\n\nvec3 hash33( vec3 p ) {\n\tuvec3 q = uvec3( ivec3( p ) ) * UI3;\n\tq = ( q.x ^ q.y ^ q.z )*UI3;\n\treturn -1.0 + 2.0 * vec3( q ) * UIF;\n}\n\n// Gradient noise by iq (modified to be tileable)\nfloat gradientNoise( vec3 x, float freq ) {\n    // grid\n    vec3 p = floor( x );\n    vec3 w = fract( x );\n    \n    // quintic interpolant\n    vec3 u = w * w * w * ( w * ( w * 6.0 - 15.0 ) + 10.0 );\n\n    // gradients\n    vec3 ga = hash33( mod( p + vec3( 0.0, 0.0, 0.0 ), freq ) );\n    vec3 gb = hash33( mod( p + vec3( 1.0, 0.0, 0.0 ), freq ) );\n    vec3 gc = hash33( mod( p + vec3( 0.0, 1.0, 0.0 ), freq ) );\n    vec3 gd = hash33( mod( p + vec3( 1.0, 1.0, 0.0 ), freq ) );\n    vec3 ge = hash33( mod( p + vec3( 0.0, 0.0, 1.0 ), freq ) );\n    vec3 gf = hash33( mod( p + vec3( 1.0, 0.0, 1.0 ), freq ) );\n    vec3 gg = hash33( mod( p + vec3( 0.0, 1.0, 1.0 ), freq ) );\n    vec3 gh = hash33( mod( p + vec3( 1.0, 1.0, 1.0 ), freq ) );\n    \n    // projections\n    float va = dot( ga, w - vec3( 0.0, 0.0, 0.0 ) );\n    float vb = dot( gb, w - vec3( 1.0, 0.0, 0.0 ) );\n    float vc = dot( gc, w - vec3( 0.0, 1.0, 0.0 ) );\n    float vd = dot( gd, w - vec3( 1.0, 1.0, 0.0 ) );\n    float ve = dot( ge, w - vec3( 0.0, 0.0, 1.0 ) );\n    float vf = dot( gf, w - vec3( 1.0, 0.0, 1.0 ) );\n    float vg = dot( gg, w - vec3( 0.0, 1.0, 1.0 ) );\n    float vh = dot( gh, w - vec3( 1.0, 1.0, 1.0 ) );\n\t\n    // interpolation\n    return va + \n           u.x * ( vb - va ) + \n           u.y * ( vc - va ) + \n           u.z * ( ve - va ) + \n           u.x * u.y * ( va - vb - vc + vd ) + \n           u.y * u.z * ( va - vc - ve + vg ) + \n           u.z * u.x * ( va - vb - ve + vf ) + \n           u.x * u.y * u.z * ( -va + vb + vc - vd + ve - vf - vg + vh );\n}\n\nfloat perlinfbm( vec3 p, float freq, int octaves ) {\n    float G = exp2( -0.85 );\n    float amp = 1.0;\n    float noise = 0.0;\n    for ( int i = 0; i < octaves; ++i ) {\n        noise += amp * gradientNoise( p * freq, freq );\n        freq *= 2.0;\n        amp *= G;\n    }\n    return noise;\n}\n\nfloat freq = 19.0;\nconst int octaves = 2;\nfloat noise( vec3 p ) {\n    return perlinfbm( p, freq, octaves );\n}\n\nvec3 curlResult( vec3 uv ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec3 uv = vec3( vec2( ( ( fragCoord + 3. ) / 4. ) / iResolution.y ) * 1.0, iTime / 100.0 );\n    vec3 col;\n    \n    // general structure from: https://al-ro.github.io/projects/embers/\n    float n1, n2, a, b;\n    vec2 epsilon = vec2( 0.1, 0.0 );\n    n1 = noise( uv + epsilon.yxy );\n    n2 = noise( uv - epsilon.yxy );\n    a = ( n1 - n2 ) / ( 2.0 * epsilon.x );\n    n1 = noise( uv + epsilon.yyx );\n    n2 = noise( uv - epsilon.yyx );\n    b = ( n1 - n2 ) / ( 2.0 * epsilon.x );\n    col.x = a - b;\n    \n    n1 = noise( uv + epsilon.yyx );\n    n2 = noise( uv - epsilon.yyx );\n    a = ( n1 - n2 ) / ( 2.0 * epsilon.x );\n    n1 = noise( uv + epsilon.xyy );\n    n2 = noise( uv - epsilon.xyy );\n    b = ( n1 - n2 ) / ( 2.0 * epsilon.x );\n    col.y = b - a;\n\n    n1 = noise( uv + epsilon.xyy );\n    n2 = noise( uv - epsilon.xyy );\n    a = ( n1 - n2 ) / ( 2.0 * epsilon.x );\n    n1 = noise( uv + epsilon.yxy );\n    n2 = noise( uv - epsilon.yxy );\n    b = ( n1 - n2 ) / ( 2.0 * epsilon.x );\n    col.z = a - b;\n\n    // Output to screen\n    return normalize( col );\n}\n\n// referencing a pixel, for an extended ASCII character in Code Page 37\n//    expected ranges of char are 0-255\n//    expected ranges of offset are within the 8x16 neighborhood\n//    inverting on either axis will let you orient as desired\nconst uint data[ 1024 ] = uint[ 1024 ]( 0u, 0u, 4278255360u, 0u, 0u, 0u, 4278255360u, 0u, 0u, 0u,\n4278255360u, 0u, 8289792u, 1579008u, 4278255390u, 1010794240u, 8519532u, 272382976u, 4278255374u,\n1714643736u, 10869758u, 943488512u, 4282172186u, 1715437336u, 8519678u, 2095578904u, 3882260786u,\n1714447323u, 8519678u, 4276617020u, 3275931000u, 1714447164u, 12436478u, 2095545916u, 3275931084u,\n1009804263u, 10086268u, 941103128u, 3882260940u, 405824316u, 8519480u, 270014464u, 4282172364u,\n2121295835u, 8519440u, 3947520u, 4278255564u, 418440984u, 8289792u, 0u, 4278255480u, 417392152u,\n0u, 0u, 4278255360u, 49152u, 0u, 0u, 4278255360u, 0u, 0u, 0u, 4278255360u, 0u, 0u, 0u, 0u, 0u, 0u,\n0u, 0u, 0u, 2147614720u, 8126464u, 0u, 0u, 3221624934u, 2143682584u, 404226048u, 0u, 3759029350u,\n3680501820u, 1008205824u, 0u, 4028530278u, 3677880446u, 2115502080u, 4350u, 4164819046u, 3681288216u,\n404232240u, 2636030u, 4278065254u, 2076573720u, 404229216u, 3228317820u, 4164819046u, 465960984u,\n404291326u, 3237903484u, 4028530278u, 460127870u, 404229216u, 3228335160u, 3759029248u, 456719932u,\n410916912u, 4264099384u, 3221624934u, 453836312u, 406585344u, 65040u, 2147614822u, 466026110u,\n404226048u, 0u, 0u, 8126464u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 402653184u,\n0u, 0u, 26112u, 402653232u, 0u, 0u, 1598976u, 2080389168u, 204472320u, 0u, 3958380u, 3321916464u,\n404226048u, 0u, 3941484u, 3267521632u, 806092800u, 2u, 3932414u, 3234215936u, 806118936u, 6u, 1572972u,\n2081191424u, 806108184u, 12u, 1572972u, 102292480u, 806158206u, 16646168u, 1572972u, 103861248u,\n806108184u, 48u, 254u, 2254490624u, 806118936u, 402653280u, 1572972u, 3334917120u, 404226048u, \n402659520u, 1572972u, 2089186816u, 204472320u, 402659456u, 0u, 402653184u, 0u, 805306368u, 0u,\n402653184u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 941128828u, \n217987326u, 2088501248u, 124u, 1815660230u, 482369734u, 3334864896u, 100688070u, 3329754630u, \n1019265030u, 3334871064u, 201339078u, 3323464710u, 1824571398u, 3334871064u, 410916876u, 3591903292u, \n3439131660u, 2088632320u, 805309464u, 3591909382u, 4261856792u, 3322281984u, 1610614296u, 3323486214u, \n201770544u, 3322281984u, 813567000u, 3323510790u, 201770544u, 3322288152u, 402659328u, 1813563078u, \n214353456u, 3322681368u, 201338904u, 947846780u, 511474736u, 2088239152u, 100687896u, 0u, 0u, 0u, 0u, \n0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1113148u, 4177460796u, \n3325828838u, 4039558780u, 2084071014u, 1818650214u, 3323464806u, 1626269382u, 3328992962u, 1717723842u,\n3323464806u, 1627322054u, 3334891200u, 1718118592u, 3323464812u, 1627324102u, 3737550016u, 1719171264u,\n4262988920u, 1624694470u, 3741214400u, 1718118622u, 3323464824u, 1623641798u, 3737544384u, 1717592262u,\n3323513964u, 1623639750u, 3703989954u, 1717723334u, 3323513958u, 1657194182u, 3234227814u, 1818648678u,\n3323513958u, 1724303046u, 2093415484u, 4177457210u, 3325851878u, 4274439804u, 0u, 0u, 0u, 0u, 0u, 0u, \n0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 4096u, 0u, 0u, 0u, 14336u, 4236049532u, 2126956230u,\n3328638524u, 3959808u, 1724278470u, 2126956230u, 3328624176u, 2148320768u, 1724278470u, 1522976454u, \n1818658352u, 3222011904u, 1724278368u, 415680198u, 2087062576u, 3758882816u, 2093382712u, 415680214u,\n943462448u, 1879834624u, 1623616524u, 415680214u, 941109296u, 940310528u, 1623614982u, 415680214u,\n2081972272u, 470548480u, 1624663750u, 415657214u, 1813561904u, 235667456u, 1625188038u, 415643886u,\n3323512368u, 101449728u, 4034717308u, 1014763628u, 3325886012u, 37486592u, 786432u, 0u, 0u, 0u, 917504u,\n0u, 0u, 255u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 805306368u, 0u, 0u, 0u, 805306368u, 0u, 0u, 0u, 402710528u,\n469776384u, 3759671008u, 939524096u, 24576u, 201354240u, 1612187232u, 402653184u, 24576u, 201352192u,\n1610612832u, 402653184u, 7895164u, 1014784118u, 1815613030u, 418176124u, 814278u, 1824977100u,\n1981285996u, 419325638u, 8152768u, 3439222988u, 1712850552u, 416704198u, 13395648u, 3435159756u,\n1712850552u, 416704198u, 13395648u, 3435159756u, 1712850540u, 416704198u, 13395654u, 3435552972u,\n1712850534u, 416704198u, 7765116u, 1987899516u, 3862693606u, 1019635324u, 0u, 12u, 26112u, 0u, 0u, 204u,\n26112u, 0u, 0u, 120u, 15360u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 268435456u, 7u, \n205011712u, 0u, 805306368u, 12u, 202141184u, 0u, 805306368u, 12u, 202113032u, 3698777212u, 4234556259u,\n1667464972u, 202113052u, 1724675782u, 812004195u, 912483896u, 458806u, 1724671584u, 812004203u, \n476253196u, 202113123u, 1724670008u, 812004203u, 476256268u, 202113123u, 1724669964u, 812004203u, \n476262412u, 202113123u, 1724670150u, 912662143u, 912483084u, 202113151u, 2088562812u, 473631798u, \n1665105671u, 204996608u, 1611399168u, 0u, 196608u, 0u, 1611399168u, 0u, 393216u, 0u, 4028497920u, 0u, \n8126464u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 56u, 3088u, 6305792u, 268460032u, 408995436u, 1020008504u, \n3425725440u, 952512614u, 1009778744u, 1711288428u, 1587200u, 1811945472u, 1712852992u, 3254779904u, 60u,\n0u, 14392u, 3234626680u, 2021161062u, 2088533048u, 943221868u, 3234645516u, 202116192u, 3334915608u,\n404276934u, 3234659964u, 2088533088u, 4278124056u, 404276934u, 3268198604u, 3435973734u, 3233857560u, \n404291326u, 1724694732u, 3435973692u, 3233857560u, 404276934u, 1020053196u, 3435973644u, 3334915608u,\n404276934u, 209091702u, 1987474950u, 2088533052u, 1010616006u, 100663296u, 60u, 0u, 0u, 2080374784u, \n0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 402653184u, 0u, 0u, 0u, 805306384u, 6303840u, 13026840u,\n939587598u, 1610628664u, 3325065264u, 3321888792u, 1818676251u, 27756u, 1625112u, 8177212u, 1684458520u,\n4261465088u, 0u, 13026918u, 1614608408u, 1724697724u, 2088553676u, 3334915680u, 4028154904u, 1618411206u,\n3334917324u, 3334915680u, 1618922622u, 2083966150u, 3334917324u, 3334915680u, 1612242456u, 1618922694u,\n3334917324u, 3334915686u, 1618922520u, 1624820934u, 3334917324u, 3334915644u, 1612237848u, 1725484230u,\n3334917324u, 3334915608u, 3860384792u, 4268674684u, 2088531574u, 2122087448u, 4229482008u, 0u, 0u,\n100663296u, 216u, 0u, 0u, 201326592u, 112u, 0u, 0u, 2013265920u, 0u, 0u, 0u, 0u, 0u, 0u, 7733248u,\n0u, 0u, 403445784u, 14433336u, 192u, 3221225472u, 806891568u, 1979739244u, 805306560u, 3222798336u,\n1613783136u, 3703991404u, 805306562u, 3256352768u, 0u, 15089208u, 198u, 3321888768u, 2016967884u,\n3707109376u, 805306572u, 3424138968u, 202950348u, 1727954556u, 822017560u, 404253804u, 2081998540u,\n1725825024u, 1623197232u, 806934582u, 3424175820u, 1724776448u, 3233810016u, 1715235948u, 3424175820u,\n1724252160u, 3334473436u, 3460052696u, 3424175820u, 1724252160u, 3334473350u, 2654732288u, 1983675510u,\n1724252160u, 2080374796u, 1041760256u, 0u, 0u, 24u, 100663296u, 0u, 0u, 62u, 100663296u, 0u, 0u, 0u,\n0u, 290839832u, 404239872u, 3552768u, 909514752u, 1152022296u, 404239872u, 3552768u, 909514752u,\n290839832u, 404239872u, 3552768u, 909514752u, 1152022296u, 404239872u, 3552768u, 909514752u,\n290839832u, 404239872u, 3552768u, 909514752u, 1152022296u, 418919936u, 4176885502u, 4130797568u,\n290839832u, 404239872u, 403060230u, 104208384u, 1152022296u, 4177065726u, 4176885494u, 4278122744u,\n290839832u, 404239926u, 406206006u, 24u, 1152022296u, 404239926u, 406206006u, 24u, 290839832u,\n404239926u, 406206006u, 24u, 1152022296u, 404239926u, 406206006u, 24u, 290839832u, 404239926u,\n406206006u, 24u, 1152022296u, 404239926u, 406206006u, 24u, 290839832u, 404239926u, 406206006u,\n24u, 1152022296u, 404239926u, 406206006u, 24u, 404226072u, 1579062u, 905983488u, 905983512u,\n404226072u, 1579062u, 905983488u, 905983512u, 404226072u, 1579062u, 905983488u, 905983512u,\n404226072u, 1579062u, 905983488u, 905983512u, 404226072u, 1579062u, 905983488u, 905983512u, 404226072u,\n1580854u, 926939135u, 939522047u, 404226072u, 1579062u, 808452096u, 805306368u, 536870687u, 4294909751u,\n1060634615u, 939522047u, 6168u, 1579062u, 3538998u, 905983488u, 6168u, 1579062u, 3538998u, 905983488u,\n6168u, 1579062u, 3538998u, 905983488u, 6168u, 1579062u, 3538998u, 905983488u, 6168u, 1579062u, 3538998u,\n905983488u, 6168u, 1579062u, 3538998u, 905983488u, 6168u, 1579062u, 3538998u, 905983488u, 6168u,\n1579062u, 3538998u, 905983488u, 905969718u, 402653238u, 404226303u, 15732735u, 905969718u, 402653238u,\n404226303u, 15732735u, 905969718u, 402653238u, 404226303u, 15732735u, 905969718u, 402653238u,\n404226303u, 15732735u, 905969718u, 402653238u, 404226303u, 15732735u, 922681398u, 522125366u,\n4279763199u, 15732735u, 905969718u, 404226102u, 404226303u, 15732735u, 4294967103u, 522141695u,\n4294451199u, 4293922560u, 1586688u, 1586742u, 402659583u, 4293922560u, 1586688u, 1586742u, 402659583u,\n4293922560u, 1586688u, 1586742u, 402659583u, 4293922560u, 1586688u, 1586742u, 402659583u, 4293922560u,\n1586688u, 1586742u, 402659583u, 4293922560u, 1586688u, 1586742u, 402659583u, 4293922560u, 1586688u,\n1586742u, 402659583u, 4293922560u, 1586688u, 1586742u, 402659583u, 4293922560u, 0u, 0u, 0u, 0u, 0u, 0u,\n0u, 0u, 0u, 0u, 0u, 0u, 7929344u, 0u, 14366u, 7168u, 13420032u, 4261412864u, 2117626928u, 209020u, \n13420286u, 3321914998u, 409781784u, 417990u, 1993130092u, 1618896604u, 1019659788u, 2122211526u, \n3705192556u, 819488280u, 1724302910u, 3688594630u, 3637297260u, 416835096u, 1727949926u, 3688587462u, \n3636904044u, 819488280u, 1724279910u, 3690160326u, 3636904044u, 1624800280u, 1019636838u, 2122211526u,\n3704012908u, 3336069144u, 409758822u, 6303942u, 1993130092u, 4268777496u, 2117660220u, 12590278u, 0u,\n49152u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 1572864u, 0u, 0u, 0u, 1572864u, 0u, 0u, 0u,\n1572864u, 939524111u, 3631218688u, 0u, 236453888u, 1811939340u, 1826095104u, 12300u, 454557696u,\n1811939340u, 1815085056u, 4262991896u, 454563840u, 939524108u, 1818262528u, 1575984u, 404232310u,\n12u, 1825078272u, 8259168u, 404226268u, 12u, 1828224000u, 4262988848u, 404258304u, 1573100u, 31744u,\n1579032u, 416809078u, 1579116u, 31744u, 12300u, 416815324u, 108u, 31744u, 4261412864u, 416815104u,\n60u, 31744u, 16744062u, 409993216u, 28u, 0u, 0u, 402653184u, 0u, 0u, 0u, 402653184u, 0u, 0u, 0u,\n402653184u, 0u, 0u );\n\n\nint fontRef( in uint ch, in ivec2 offset, in bvec2 invert ) {\n    if ( invert.x ) {\n        offset.x = 7 - offset.x;\n    }\n    if ( invert.y ) {\n        offset.y = 15 - offset.y;\n    }\n    bool offsetOOB = any( lessThan(         offset, ivec2( 0,  0 ) ) ) ||\n                     any( greaterThanEqual( offset, ivec2( 8, 16 ) ) );\n    bool charOOB = bool( clamp( ch, 0u, 255u ) != ch );\n    if ( offsetOOB || charOOB ) {\n        return -1; // oob\n    }\n    uvec2 sampleLoc = uvec2( ch % 16u, ch / 16u ) * uvec2( 8u, 16u ) + uvec2( offset );\n    uint idx = ( sampleLoc.x + sampleLoc.y * 128u ) / 32u;\n    uint packedData = data[ idx ];\n    uint bitMask = 1u << ( 31u - sampleLoc.x % 32u );\n    return int( ( packedData & bitMask ) != 0u );\n}\n\nint fontRef( in uint ch, ivec2 offset ) {\n    return fontRef( ch, offset, bvec2( true, false ) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}