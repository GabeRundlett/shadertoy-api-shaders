{
    "Shader": {
        "info": {
            "date": "1569490782",
            "description": "quick quality reference implementation of trilinear filtering just cause",
            "flags": 0,
            "hasliked": 0,
            "id": "3stGDl",
            "likes": 4,
            "name": "trilinear filtering sketch",
            "published": 3,
            "tags": [
                "texture",
                "filtering",
                "reference",
                "trilinear"
            ],
            "usePreview": 0,
            "username": "cerebral_m",
            "viewed": 660
        },
        "renderpass": [
            {
                "code": "\n\n\n\n\n\n\n\n//click and drag to change gradient angle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#define SCALE 10.0\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.0 - vec2(1.0,1.0);\n    vec2 mouse = iMouse.xy/iResolution.xy*2.0 - vec2(1.0,1.0);\n\n    \n    float m = dot(uv, mouse) *4.0 / pow(length(mouse),2.0);\n    float n = floor(m);\n    float o = m-n;\n    \n    \n    \n    \n    \n    \n    uv.x += iTime/2.0;\n    uv.y += iTime/2.0;\n    \n    float scale = SCALE * pow(2.0, n);\n\n    \n    vec2 bl = vec2(floor(uv.x*scale), floor(uv.y*scale));\n    vec2 br = vec2(     bl.x+1.0     ,      bl.y        )/scale;\n    vec2 tl = vec2(     bl.x         ,      bl.y+1.0    )/scale;\n    vec2 tr = vec2(     bl.x+1.0     ,      bl.y+1.0    )/scale; \n    bl /= scale;\n    \n    \n        \n    float distx = (uv.x - bl.x)*scale;\n    float disty = (uv.y - bl.y)*scale;\n    \n    \n    \n    vec3 col = vec3(.0,.0,.0);\n    col += texture(iChannel0, bl).xyz * (1.0-distx) * (1.0-disty);\n    col += texture(iChannel0, br).xyz * (    distx) * (1.0-disty);\n    col += texture(iChannel0, tl).xyz * (1.0-distx) * (    disty);\n    col += texture(iChannel0, tr).xyz * (    distx) * (    disty);\n    \n    col *= 1.0-o;\n    \n    \n    \n    \n    \n    \n    scale *= 2.0;\n    \n    \n    bl = vec2(floor(uv.x*scale), floor(uv.y*scale));\n    br = vec2(     bl.x+1.0     ,      bl.y        )/scale;\n    tl = vec2(     bl.x         ,      bl.y+1.0    )/scale;\n    tr = vec2(     bl.x+1.0     ,      bl.y+1.0    )/scale; \n    bl /= scale;\n    \n    \n        \n    distx = (uv.x - bl.x)*scale;\n    disty = (uv.y - bl.y)*scale;\n    \n    \n    col += texture(iChannel0, bl).xyz * (1.0-distx) * (1.0-disty) * o;\n    col += texture(iChannel0, br).xyz * (    distx) * (1.0-disty) * o;\n    col += texture(iChannel0, tl).xyz * (1.0-distx) * (    disty) * o;\n    col += texture(iChannel0, tr).xyz * (    distx) * (    disty) * o;\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}