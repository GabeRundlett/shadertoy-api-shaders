{
    "Shader": {
        "info": {
            "date": "1635823289",
            "description": "Shader inspired by Kusama's infinity rooms",
            "flags": 0,
            "hasliked": 0,
            "id": "Nlf3z8",
            "likes": 1,
            "name": "Kusama",
            "published": 3,
            "tags": [
                "3d",
                "infinity",
                "room",
                "kusama"
            ],
            "usePreview": 0,
            "username": "kstyler",
            "viewed": 255
        },
        "renderpass": [
            {
                "code": "int matID = 0;\nint scene = 1;\n\nmat2 rotate(float a){\n\treturn mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nfloat sdfLP(vec3 p, float norm, float size){\n    float px = pow(abs(p.x),norm);\n    float py = pow(abs(p.y),norm);\n    float pz = pow(abs(p.z),norm);\n    return pow(px+py+pz,1./norm)-size;\n}\n\nfloat sdfBox( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(vec3 p,int id){\n    float subject = 999.;\n    if(scene ==0){\n        vec3 q = p;\n        q.x+=sin(q.y+iTime)*.5;\n        vec3 center = floor(q*.2)+.5;\n        subject = sdfLP(q-center,(sin(iTime)*2.)+2.9,.4);\n    }else if(scene ==1){\n        vec3 q = p;\n        subject = sdfLP(q,(sin(iTime)*2.)+2.9,.9);\n    }else if(scene ==2){\n        vec3 q = p;\n        q.y-=.5;\n        q.x+=sin(q.y*10.+iTime*1.)*.2;\n        vec3 center = vec3(floor(q.xz)+.5,0.);\n        subject = sdfLP(q-center.xzy,1.,.3);\n    } \n    \n    float plane = p.y+1.5;\n    float cil = 1.5-p.y;\n    float box = -sdfBox(p+vec3(0.,0.,0.),vec3(4.,4.,4.));\n    float best = min(cil,min(box,min(subject,plane)));\n    if(id != 0){\n        if(best == subject){matID = 2;}\n        if(best == plane){matID=3;}\n      \n        if(best == box){matID=4;}\n        if(best ==cil)matID=5;\n    }\n    return best;\n}\nvec3 normal(vec3 p){\n    vec2 e= vec2(0,0.001);\n\treturn normalize(vec3(map(p+e.yxx,0)-map(p-e.yxx,0),\n                          map(p+e.xyx,0)-map(p-e.xyx,0),\n                          map(p+e.xxy,0)-map(p-e.xxy,0)));\n}\nvec3 march(vec3 ro, vec3 rd){\n    float total = 0.;\n    float dist = 0.;\n    for(int i = 0; i<500; i++){\n        dist = map(ro+rd*total,1)*.5;\n        total+=dist;\n        if(dist < 0.001 || total>500.){\n        \tbreak;\n        }\n    }\n    if(dist>0.01){\n    \tmatID = 1;\n    }\n   \n    return (ro+rd*total);\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\tvec3 ro = vec3(0.);\n    vec3 rd = normalize(vec3(uv,1.));\n    scene = int(mod(iTime*.1,3.));\n    if(scene == 0){\n        ro = vec3(0,0.3,-3.5);\n        ro.zy*=rotate(.4);\n        rd.zy*=rotate(.4);\n        ro.xz*= rotate(iTime*.1);\n        rd.xz*= rotate(iTime*.1);\n    }else if(scene ==1){\n        ro = vec3(0,0.8,-2.5);\n        rd.zy*=rotate(-.3);\n        ro.xz*= rotate(iTime*.1);\n        rd.xz*= rotate(iTime*.1);\n    \n    }else if(scene ==2){\n        ro = vec3(0,.3,-0.3);\n        rd.zy*=rotate(.1);\n        rd.zy*=rotate(.1);\n        ro.xz*= rotate(iTime*.1);\n        rd.xz*= rotate(iTime*.1);\n    \n    }\n    \n    vec3 accum = vec3(1);\n    for(int i = 0; i <9; i++){\n        vec3 col =(march(ro,rd));\n        vec3 n = normal(col);\n        if(matID ==1){\n    \t\taccum *= vec3(1);\n   \t\t}\t\n        if(matID ==2){\n            accum *= vec3(.9);\n        \tro = col*2.;\n            rd=normalize(reflect(rd,n));\n        }\n        if(matID ==3){\n            accum *= vec3(0.8);\n        }\n        if(matID ==4){\n            accum *= vec3(0.99,.996,0.99);\n            float fresnel = pow(1.-dot(- rd,n),0.03);\n            accum*=fresnel;  \n            ro = col*.999;\n            rd=normalize(reflect(rd,n));\n        }\n        if(matID ==5){\n            accum *= vec3(.999);\n        }\n    }\n    fragColor = vec4(accum,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}