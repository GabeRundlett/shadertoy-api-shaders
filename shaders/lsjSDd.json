{
    "Shader": {
        "info": {
            "date": "1417505818",
            "description": "Simple mapping of light dots over a cylinder.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsjSDd",
            "likes": 12,
            "name": "Light dot cylinder",
            "published": 3,
            "tags": [
                "light",
                "cylinder",
                "dot"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 1005
        },
        "renderpass": [
            {
                "code": "// Parameters\n#define CAMERA_FOCAL_LENGTH\t1.2\n#define DOT_COUNT\t\t\t100.0\n#define SOUND\n#define MOUSE\n#define HSV2RGB_FAST\n\n// Constants\n#define PI\t3.14159265359\n\n// PRNG\nfloat rand (in vec2 seed) {\n\treturn fract (sin (dot (seed, vec2 (12.9898, 78.233))) * 137.5453);\n}\n\n// HSV to RGB\nvec3 hsv2rgb (in vec3 hsv) {\n\t#ifdef HSV2RGB_SAFE\n\thsv.yz = clamp (hsv.yz, 0.0, 1.0);\n\t#endif\n\t#ifdef HSV2RGB_FAST\n\treturn hsv.z * (1.0 + 0.5 * hsv.y * (cos (2.0 * PI * (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0))) - 1.0));\n\t#else\n\treturn hsv.z * (1.0 + hsv.y * clamp (abs (fract (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) - 2.0, -1.0, 0.0));\n\t#endif\n}\n\n// Main function\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Define the ray corresponding to this fragment\n\tvec3 ray = vec3 ((2.0 * fragCoord.xy - iResolution.xy) / iResolution.y, CAMERA_FOCAL_LENGTH);\n\n\t// Get the music info\n\t#ifdef SOUND\n\tfloat soundBass = texture (iChannel0, vec2 (0.0)).x;\n\tfloat soundTreble = texture (iChannel0, vec2 (0.9, 0.0)).x;\n\t#else\n\tfloat soundBass = 0.6 + 0.4 * cos (iTime * 0.2);\n\tfloat soundTreble = 0.5 + 0.5 * cos (iTime * 1.2);\n\t#endif\n\n\t// Define the number of rows\n\tfloat dotRowCount = floor (20.0 + 60.0 * soundTreble * soundBass) * 2.0;\n\n\t// Compute the orientation of the camera\n\tfloat yawAngle = cos (iTime * 2.0);\n\tfloat pitchAngle = 2.0 * PI * cos (iTime * 0.2 + soundTreble * 0.4);\n\t#ifdef MOUSE\n\tyawAngle += 2.0 * PI * iMouse.x / iResolution.x;\n\tpitchAngle += PI * (1.0 - iMouse.y / iResolution.y);\n\t#endif\n\n\tfloat cosYaw = cos (yawAngle);\n\tfloat sinYaw = sin (yawAngle);\n\tfloat cosPitch = cos (pitchAngle);\n\tfloat sinPitch = sin (pitchAngle);\n\n\tmat3 cameraOrientation;\n\tcameraOrientation [0] = vec3 (cosYaw, 0.0, -sinYaw);\n\tcameraOrientation [1] = vec3 (sinYaw * sinPitch, cosPitch, cosYaw * sinPitch);\n\tcameraOrientation [2] = vec3 (sinYaw * cosPitch, -sinPitch, cosYaw * cosPitch);\n\n\tray = cameraOrientation * ray;\n\n\t// Compute the position of the camera\n\tfloat cameraDist = -2.0 * (cos (iTime) * cos (iTime * 3.5) + soundBass);\n\tvec3 cameraPosition = cameraOrientation [2] * cameraDist;\n\n\t// Compute the intersection point (ray / cylinder)\n\tfloat a = dot (ray.xz, ray.xz);\n\tfloat b = dot (cameraPosition.xz, ray.xz);\n\tfloat c = b * b - a * (dot (cameraPosition.xz, cameraPosition.xz) - 1.0);\n\tfloat ok = step (0.0, c);\n\tc = sqrt (c);\n\tvec3 hit;\n\tif (b < -c) {\n\t\thit = cameraPosition - ray * (b + c) / a;\n\t\tif (abs (hit.y * DOT_COUNT / PI + 1.0) > dotRowCount) {\n\t\t\thit = cameraPosition - ray * (b - c) / a;\n\t\t}\n\t} else {\n\t\thit = cameraPosition - ray * (b - c) / a;\n\t}\n\tvec2 frag = vec2 ((atan (hit.z, hit.x) + PI) * DOT_COUNT, hit.y * DOT_COUNT + PI) / (2.0 * PI);\n\n\t// Compute the fragment color\n\tvec2 id = floor (frag);\n\tfloat random = rand (id);\n\tvec3 color = hsv2rgb (vec3 (iTime * 0.05 + id.y * 0.005, 1.0, 1.0));\n\tcolor += 0.5 * cos (random * vec3 (1.0, 2.0, 3.0));\n\tcolor *= smoothstep (0.5, 0.1, length (fract (frag) - 0.5));\n\tcolor *= 0.5 + 1.5 * step (0.9, cos (random * iTime * 5.0));\n\tcolor *= 0.5 + 0.5 * cos (random * iTime + PI * 0.5 * soundTreble);\n\tcolor *= smoothstep (dotRowCount, 0.0, (abs (id.y + 0.5) - 1.0) * 2.0);\n\tfragColor = vec4 (color * ok, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 20,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}