{
    "Shader": {
        "info": {
            "date": "1672939187",
            "description": "As before, but with some simplifications, and now with UV calculations for each tile. 'x' shows tile distance field.",
            "flags": 16,
            "hasliked": 0,
            "id": "mlS3zD",
            "likes": 20,
            "name": "Irregular  Rectangle Tiling II",
            "published": 3,
            "tags": [
                "rectangle",
                "tiling",
                "irregular"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "/////////////////////////////////////////////////////////////////\n//\n// Irregular Rectangle Tiling, mla, 2023\n//\n// Inspired by:\n// https://www.shadertoy.com/view/Dt2GRz (@jt)\n// https://www.shadertoy.com/view/Ws3GRs (@Shane)\n// https://www.shadertoy.com/view/7tKGRc (@Gelami)\n//\n// This one works out the actual tile dimensions eg. for texturing \n// or for a proper tile SDF.\n//\n// 'b': don't show tile border\n// 'c': show underlying grid.\n// 'x': show tile SDF\n// 'y': tile offset style\n// 'z': zoom out\n//\n/////////////////////////////////////////////////////////////////\n\n// An SDF for the region to be filled - this must have a boundary\n// (ie. distance == 0) on integer gridlines\nfloat regiondist(vec2 p) {\n  vec2 repeat = vec2(8,5);\n  p += repeat; p = mod(p,2.0*repeat); p -= repeat;\n  p = abs(p);\n  float d0 = max(p.x-5.0,p.y-3.0);\n  float d1 = p.x-2.0;\n  return min(-d0,d1);\n}\n\nfloat offset(vec2 p, bool flip, bool xoffset) {\n  // Find the two grid points that share this offset\n  vec2 delta = xoffset ? vec2(0,1) : vec2(1,0);\n  vec2 q0 = p-delta;\n  vec2 q1 = p+delta;\n  if (flip) { p = p.yx; q0 = q0.yx; q1 = q1.yx; }\n  // NB: grid points _on_ the boundary have offset 0, but only if one or both\n  // of the adjacent points is also on the boundary.\n  if (regiondist(p) > 0.0) return 0.0;\n  if (regiondist(p) == 0.0 && (regiondist(q0) == 0.0 || regiondist(q1) == 0.0)) return 0.0;\n  if (!key(CHAR_Y)) return 0.48*(sin(p.x+0.5*iTime)*sin(p.y+0.382*iTime));\n  float t = rand(ivec2(p)^int(iTime));\n  return 0.95*(t-0.5);\n}\n\n// (Interior) distance to rectangle, corners (x0,y0), (x1,y1)\nfloat rect(vec2 p, float x0, float y0, float x1, float y1) {\n  return min(min(abs(p.x-x0),abs(p.x-x1)),\n             min(abs(p.y-y0),abs(p.y-y1)));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  float lwidth = 0.01;\n  float scale = 6.0;\n  if (key(CHAR_Z)) scale *= 2.0;\n  vec2 p = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n  vec2 m = (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n  if (iMouse.x > 0.0) p -= m;\n  p *= scale;\n  //p += 0.02*sin(p.x+p.y); // Perturb coordinates (idea by Shane)\n  vec3 col = vec3(0.1);\n  float px = fwidth(p.x);\n  float rdist = regiondist(p);\n  if (rdist > 0.0) {\n    // Just show region border\n    if (!key(CHAR_B)) col *= smoothstep(0.0,px,rdist-lwidth);\n  } else {\n    vec2 ix = round(p);\n    p -= ix; // Rebase at nearest grid point\n    bool flip = mod(ix.x+ix.y,2.0) != 0.0;\n    if (flip) { p = p.yx; ix = ix.yx; } // Fix orientation\n    float x0 = offset(ix,flip,true); // Offset of vertical line\n    float d = p.x-x0;\n    int xdelta = d < 0.0 ? -1 : 1; // x direction of other tile corner\n    float y0 = offset(ix+vec2(xdelta,0),flip,false); // Offset of horizontal line\n    float d1 = p.y-y0;\n    int ydelta = d1 < 0.0 ? -1 : 1; // y direction of other tile corner\n    // Work out tile uv from coordinates of other corner\n    float x1 = float(xdelta)+offset(ix+vec2(xdelta,ydelta),flip,true);\n    float y1 = float(ydelta)+offset(ix+vec2(0,ydelta),flip,false);\n    sort(x0,x1); sort(y0,y1);\n    vec2 uv = (p-vec2(x0,y0))/(vec2(x1,y1)-vec2(x0,y0));\n    if (flip) uv = uv.yx;\n    // Work out tile id from coordinates of left bottom corner\n    if (d < 0.0) ix.x--;\n    if (d1 < 0.0) ix.y--;\n    if (flip) ix = ix.yx; // ix is now the tile id\n    col = 0.25+0.75*h2rgb(rand(ivec2(ix)));\n    col *= length(texture(iChannel0,uv).rgb);\n    if (key(CHAR_C) && flip) col *= 0.5;\n    if (key(CHAR_X)) col *= 0.8-0.2*cos(0.6*PI/px*rect(p,x0,y0,x1,y1));\n    d = min(abs(d),abs(d1));\n    if (!key(CHAR_B)) col *= smoothstep(0.0,px,d-lwidth);\n  }\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\nconst float PI = 3.14159;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n\nvoid swap (inout float x, inout float y) {\n  float t = x; x = y; y = t;\n}\n\nvoid sort (inout float x, inout float y) {\n  if (x > y) swap(x,y);\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n  x += 0x12345678u;\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat rand(ivec2 p) {\n  uint h = ihash(uint(p.x)^ihash(uint(p.y)));\n  return float(h)/exp2(32.0);\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}