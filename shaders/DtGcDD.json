{
    "Shader": {
        "info": {
            "date": "1700223547",
            "description": "This is a simulation of the screen wipe transition effect found in the original DOOM.",
            "flags": 32,
            "hasliked": 0,
            "id": "DtGcDD",
            "likes": 1,
            "name": "Doomed Melt",
            "published": 3,
            "tags": [
                "retro",
                "doom",
                "transition",
                "wipe"
            ],
            "usePreview": 0,
            "username": "wilkie",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "// This is an implementation that simulates the original DOOM screen\n// melt transition effect.\n\n// Just press 'Reset' to see the wipe in action since it relies on\n// iFrame being 0 to freeze the image in the buffer. You can also\n// just freeze the video yourself.\n\n// License: MIT\n\n// DOOM's random number table\nconst int rndtable[256] = int[256](\n    0,   8, 109, 220, 222, 241, 149, 107,  75, 248, 254, 140,  16,  66 ,\n    74,  21, 211,  47,  80, 242, 154,  27, 205, 128, 161,  89,  77,  36 ,\n    95, 110,  85,  48, 212, 140, 211, 249,  22,  79, 200,  50,  28, 188 ,\n    52, 140, 202, 120,  68, 145,  62,  70, 184, 190,  91, 197, 152, 224 ,\n    149, 104,  25, 178, 252, 182, 202, 182, 141, 197,   4,  81, 181, 242 ,\n    145,  42,  39, 227, 156, 198, 225, 193, 219,  93, 122, 175, 249,   0 ,\n    175, 143,  70, 239,  46, 246, 163,  53, 163, 109, 168, 135,   2, 235 ,\n    25,  92,  20, 145, 138,  77,  69, 166,  78, 176, 173, 212, 166, 113 ,\n    94, 161,  41,  50, 239,  49, 111, 164,  70,  60,   2,  37, 171,  75 ,\n    136, 156,  11,  56,  42, 146, 138, 229,  73, 146,  77,  61,  98, 196 ,\n    135, 106,  63, 197, 195,  86,  96, 203, 113, 101, 170, 247, 181, 113 ,\n    80, 250, 108,   7, 255, 237, 129, 226,  79, 107, 112, 166, 103, 241 ,\n    24, 223, 239, 120, 198,  58,  60,  82, 128,   3, 184,  66, 143, 224 ,\n    145, 224,  81, 206, 163,  45,  63,  90, 168, 114,  59,  33, 159,  95 ,\n    28, 139, 123,  98, 125, 196,  15,  70, 194, 253,  54,  14, 109, 226 ,\n    71,  17, 161,  93, 186,  87, 244, 138,  20,  52, 123, 251,  26,  36 ,\n    17,  46,  52, 231, 232,  76,  31, 221,  84,  37, 216, 165, 212, 106 ,\n    197, 242,  98,  43,  39, 175, 254, 145, 190,  84, 118, 222, 187, 136 ,\n    120, 163, 236, 249\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float time = mod(iTime, 5.0);\n    \n    // Pull destination color\n    fragColor = texture(iChannel0, uv);\n    \n    // Pick a random starting offset\n    vec4 randColor = texture(iChannel1, vec2(0.0, 0.0));\n    float rand = (randColor.r + randColor.g + randColor.b) / 3.0;\n    randColor = texture(iChannel1, vec2(rand, rand));\n    rand = (randColor.r + randColor.g + randColor.b) / 3.0;\n    \n    // We want a pixel set offset\n    int ridx = int(float(rand * 256.0));\n    int offsety = -(rndtable[(ridx++) % 256] % 16);\n    \n    // We want the relative offset, too\n    int x = int(floor(fragCoord.x / iResolution.x * 160.0));\n    for (int i = 1; i < x; i++) {\n        int delta = (rndtable[(ridx++) % 256] % 3) - 1;\n        offsety = clamp(offsety + delta, -15, 0);\n    }\n    \n    // Vanilla DOOM treats the vertical offsets in terms of 8 pixels.\n    // So, what is the velocity of the melt? (in units of percent per second)\n    // Vanilla DOOM moved 8 pixels per tic (1/35 sec) for an image 200 pixels tall.\n    int tics = int(floor(time / (1.0 / 35.0)));\n    int pixels_per_tic = 8;\n    \n    // Melt\n    offsety = max((offsety * pixels_per_tic) + (tics * pixels_per_tic), 0);\n    \n    // Convert the offsety value, which is the amount the pixel values are shifted down,\n    // into our texture coordinate space.\n    uv.y += min(float(offsety) / 200.0 * (iResolution.x / iResolution.y), 1.0);\n    \n    if (uv.y < 1.0) {    \n        // Pull the frozen frame\n        fragColor = texture(iChannel1, uv);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (iFrame % 150 == 0) {\n        fragColor = texture(iChannel0, uv);\n    }\n    else {\n\t\tfragColor = texture(iChannel1, uv);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}