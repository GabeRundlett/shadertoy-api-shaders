{
    "Shader": {
        "info": {
            "date": "1634864402",
            "description": "blends similarly colored pixels",
            "flags": 2,
            "hasliked": 0,
            "id": "NdKGzh",
            "likes": 1,
            "name": "threshold blurr",
            "published": 3,
            "tags": [
                "blurr"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 437
        },
        "renderpass": [
            {
                "code": "const int sampleRadius = 20; //the radius of the square to sample from (bascially blurriness)\nconst float threshold = 0.05; //the max delta for it to blend\n\nfloat avgCol(vec3 col){\n    return (col.x + col.y + col.z)/3.0;\n}\n\nvec3 fetch(ivec2 coord){\n    return texelFetch(iChannel0, coord, 0).xyz;\n}\n\n//returns color put in if the delta of the current pixel's color and the color to test is below a threshold\nvoid checkCol(in vec3 testingCol, in vec3 col, inout vec3 toAvg, inout vec3 successCount){\n    vec3 delta = vec3(abs(col.x-testingCol.x),abs(col.y-testingCol.y),abs(col.z-testingCol.z));\n    if (delta.x<threshold && delta.y<threshold && delta.z<threshold){\n        toAvg += testingCol;\n        successCount ++;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 iCoord = ivec2(fragCoord*2.0);\n    vec3 col = fetch(iCoord);\n    col = col;\n    vec3 toAvg;\n    vec3 successCount;\n    vec3 testingCol;\n    \n    for (int x = sampleRadius/2; x > -sampleRadius/2; x--){\n        for (int y = sampleRadius/2; y > -sampleRadius/2; y--){\n            if (x == 0 && y == 0){continue;}\n            testingCol = fetch(ivec2(iCoord.x+x, iCoord.y+y));\n            checkCol(testingCol,col,toAvg, successCount);\n        }\n    }\n    \n    if (successCount.x != 0.0 && successCount.y != 0.0 && successCount.z != 0.0){ \n        toAvg /= successCount; \n        col = toAvg;\n    }\n\n    fragColor = vec4(col,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}