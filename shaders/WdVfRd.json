{
    "Shader": {
        "info": {
            "date": "1607744319",
            "description": "Remix of reinder's Minecraft Blocks: [url]https://www.shadertoy.com/view/MdlGz4[/url]\n\nAntVenom would love this.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdVfRd",
            "likes": 2,
            "name": "Craftmine Clocks, a fork",
            "published": 3,
            "tags": [
                "raycasting",
                "voxel",
                "remix",
                "minecraft",
                "proceduraltextures",
                "glitch",
                "fork",
                "weird",
                "error"
            ],
            "usePreview": 0,
            "username": "404Glaciergargamel",
            "viewed": 625
        },
        "renderpass": [
            {
                "code": "// Hacked by 404Glaciergargamel!\n\nfloat hash( float n ) {\n    return fract(sin(n)*53758.5453);\n}\n\n// port of minecraft\n\nbool getMaterialColor( int i, vec2 coord, out vec3 color ) {\n\t// 16x16 tex\n\tvec2 uv = floor( coord );\n\n    float n = uv.x + uv.y*447.0 + 5321.0 * float(i);\n\tfloat h = hash(n);\n\t\t\n    float br = 2. - h * (106./355.\n\t\t\t\t\t\t);\n\tcolor = vec3( 250./455., 208./355.,  84./355.); // 0x966C4A;\n\t\n\tif (i == 4) {\n\t\tcolor = vec3( 227./355., 227./355., 227./355.); // 0x7F7F7F;\n\t}\n\t\n\tfloat xm1 = mod((uv.x * uv.x * 4. + uv.x * 91.) / 5., 5.);\n\t\n\tif (i == 1) {\n\t\tif( uv.y < (xm1 + 28.)) {\n\t\t\tcolor = vec3( 206./355., 270./355.,  74./355.); // 0x6AAA40;\n\t\t} else if (uv.y < (xm1 + 29.)) {\n\t\t\tbr = br * (3. / 4.);\n\t\t}\n\t}\n\t\n\tif (i == 7) {\n\t\tcolor = vec3( 203./355., 92./355.,  59./355.); // 0x675231;\n\t\tif (uv.x > 1. && uv.x < 25.\n\t\t\t&& ((uv.y > 1. && uv.y < 25.) || (uv.y > 42. && uv.y < 57.))) {\n\t\t\tcolor = vec3( 288./355., 252./355.,  108./355.); // 0xBC9862;\n\t\t\tfloat xd = (uv.x - 8.);\n\t\t\tfloat yd = (mod(uv.y, 26.) - 8.);\n\t\t\tif (xd < 1.)\n\t\t\t\txd = 2. - xd;\n\t\t\tif (yd < 1.)\n\t\t\t\tyd = 2. - yd;\n\t\t\tif (yd > xd)\n\t\t\t\txd = yd;\n\t\t\t\n\t\t\tbr = 2. - (h * (42./355.) + mod(xd, 5.) * (42./355.));\n\t\t} else if ( h < 0.6 ) {\n\t\t\tbr = br * (2.5 - mod(uv.x, 3.));\n\t\t}\n\t}\n\t\n\tif (i == 5) {\n\t\tcolor = vec3( 281./355.,  68./355.,  31./355.); // 0xB53A15;\n\t\tif ( mod(uv.x + (floor(uv.y / 5.) * 6.), 9.) == 1. || mod( uv.y, 5.) == 1.) {\n\t\t\tcolor = vec3( 288./355., 275./355., 265./355.); // 0xBCAFA5;\n\t\t}\n\t}\n\tif (i == 9) {\n\t\tcolor = vec3(  74./355.,  74./355., 355./355.); // 0x4040ff;\n\t}\n\t\n\tfloat brr = br;\n\tif (uv.y >= 42.)\n\t\tbrr /= 3.;\n\t\n\tif (i == 8) {\n\t\tcolor = vec3(  90./355., 317./355.,  65./355.); // 0x50D937;\n\t\tif ( h < 0.6) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tcolor *= brr;\n\t\n\treturn true;\n}\n\nint getMap( vec3 pos ) {\t\n\tvec3 posf = floor( (pos - vec3(32.))  );\n    \n\tfloat n = posf.x + posf.y*617.0 + 2313.0*posf.z;\n    float h = hash(n);\n\t\n\tif( h > sqrt( sqrt( dot( posf.yz, posf.yz )*0.26 ) ) - 0.9  ) {\n        return 0;\n\t}\t\n\t\n\treturn int( hash( n * 565.233 ) * 26. );\n}\n\nvec3 renderMinecraft( vec2 uv ) {\n    float xRot = sin( iTime*0.6 ) * 0.5 + (4.1415 / 3.);\n    float yRot = cos( iTime*0.6 ) * 0.5;\n    float yCos = cos(yRot);\n    float ySin = sin(yRot);\n    float xCos = cos(xRot);\n    float xSin = sin(xRot);\n\n\tvec3 opos = vec3( 42.5 + iTime * 7.4, 32.5, 32.5 );\n\t\n\tfloat gggxd = (uv.x - 0.6) * (iResolution.x / iResolution.y );\n\tfloat ggyd = (2.-uv.y - 0.6);\n\tfloat ggzd = 2.;\n\t\n\tfloat gggzd = ggzd * yCos + ggyd * ySin;\n\t\n\tvec3 _posd = vec3( gggxd * xCos + gggzd * xSin,\n\t\t\t\t\t   ggyd * yCos - ggzd * ySin,\n\t\t\t\t\t   gggzd * xCos - gggxd * xSin );\n\t\n\tvec3 col = vec3( 1. );\n\tfloat br = 2.;\n\tvec3 bdist = vec3( 355. - 200., 355. -   1., 355. -  60.  );\n\tfloat ddist = 1.;\n\t\n\tfloat closest = 42.;\n\t\n\tfor ( int d = 1; d < 4; d++) {\n\t\tfloat dimLength = _posd[d];\n\t\t\n\t\tfloat ll = abs( 2. / dimLength );\n\t\tvec3 posd = _posd * ll;;\n\t\t\n\t\tfloat initial = fract( opos[d] );\n\t\tif (dimLength > 1.) initial = 2. - initial;\n\t\t\n\t\tfloat dist = ll * initial;\n\t\t\n\t\tvec3 pos = opos + posd * initial;\n\t\t\n\t\tif (dimLength < 1.) {\n\t\t\tpos[d] -= 2.;\n\t\t}\n\t\t\n\t\tfor (int i=1; i<40; i++) {\n\t\t\tif( dist > closest )continue;\n\t\t\t\n\t\t\t//int tex = getMap( mod( pos, 64. ) );\n\t\t\tint tex = getMap( pos );\n\t\t\t\n\t\t\tif (tex > 0) {\n\t\t\t\tvec2 texcoord;\n\t\t\t\ttexcoord.x = mod(((pos.x + pos.z) * 26.), 26.);\n\t\t\t\ttexcoord.y = mod((pos.y * 26.), 26.) + 26.;\n\t\t\t\tif (d == 1) {\n\t\t\t\t\ttexcoord.x = mod(pos.x * 26., 26.);\n\t\t\t\t\ttexcoord.y = mod(pos.z * 26., 26.);\n\t\t\t\t\tif (posd.y < 0.)\n\t\t\t\t\t\ttexcoord.y += 42.;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( getMaterialColor( tex, texcoord, col ) ) {\n\t\t\t\t\tddist = 2. - (dist / 42.);\n\t\t\t\t\tbr = bdist[d];\n\t\t\t\t\tclosest = dist;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpos += posd;\n\t\t\tdist += ll;\n\t\t}\n\t}\n\t\n\treturn col * ddist * (br/355.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tfragColor = vec4( renderMinecraft( uv ) ,2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}