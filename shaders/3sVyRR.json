{
    "Shader": {
        "info": {
            "date": "1602118840",
            "description": "Visualizes music from SoundCloud.\n\nWorks with any song on SoundCloud!\n\nPolar Coordinate code source: https://gist.github.com/KeyMaster-/70c13961a6ed65b6677d\n",
            "flags": 64,
            "hasliked": 0,
            "id": "3sVyRR",
            "likes": 0,
            "name": "Music Visualizer by PotatMun",
            "published": 3,
            "tags": [
                "visualization",
                "audio",
                "polarcoordinates"
            ],
            "usePreview": 0,
            "username": "PotatMun",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "//Better performance\n//SONG_LIMIT defines how active the visualization of each note can become\n//#define SONG_LIMIT 1.\n\n//More activity in visuals\n#define SONG_LIMIT mod(1. + sin(iTime), 1.)\n#define BACKGROUND_SEED iTime\n\n//More activity, and can either affect performance more or less than\n// using the above definition for BACKGROUND_SEED.\n//#define BACKGROUND_SEED SONG_LIMIT\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cart = fragCoord.xy - (iResolution.xy / 2.); // get the cartesian coordinates of the window\n    vec2 polar;                                       // and transform them to polar coordinates \n    // (x, y) becomes (theta, r)\n    \n    // equation for converting cartesian y to polar r\n    polar.y = sqrt(pow(cart.x, 2.) + pow(cart.y, 2.)) / (iResolution.x / 2.); \n\n    polar.x = atan(cart.y, (cart.x));\n    polar.x -= 1.57079632679;                   // avoid asymptote at x = pi/2\n    if(polar.x < 0.0) polar.x += 6.28318530718; // make x non-negative\n    polar.x /= 6.28318530718;                   // make x < 1.0\n    \n    polar.y = 1.0 - polar.y;\n    polar.x = 1.0 - polar.x;\n    \n    //notes are represented as an RGB value. But they need to be transformed so that they can be rendered.\n    vec4 c = texture(iChannel0, vec2(polar.x, 0.));\n    // separate the screeen into 2 shells: 1 with the RGB values, and 1 without\n    if (polar.y > c.r) { \n        //Better performance\n        c.r = 0.;\n        \n        //The changing background color is controlled by these 3 lines\n        c.rgb = vec3(mod(BACKGROUND_SEED, 1.));\n        c.rg += abs(sin(iTime) - 0.1);\n        c.gb += abs(cos(iTime) - 0.1);\n    } \n    else if (c.r < 1./SONG_LIMIT) {\n        // add some green if the volume of a note is great enough\n        if (c.r > 0.35/SONG_LIMIT) c.g = 1. - c.r;\n        // else the color can be red, a shade of purple, or blue\n        c.b = 1. - c.r - c.g; // as notes get louder, their color has less and less blue\n    }\n    // if the note isnt loud enough, keep its color blue\n\tfragColor = vec4(c);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 29700,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/bootlegfool/wii-shop-channel-original-music"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}