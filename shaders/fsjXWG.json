{
    "Shader": {
        "info": {
            "date": "1620922231",
            "description": "Chenonceau, with updated visuals",
            "flags": 0,
            "hasliked": 0,
            "id": "fsjXWG",
            "likes": 20,
            "name": "Chateaux... v2",
            "published": 3,
            "tags": [
                "forest",
                "architecture",
                "scenery"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "// \"Chateaux... v2\"  by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Chenonceau, with updated visuals and without the book format.\n  Seasons change.\n  Mouse down in subwindows for day or night views, traveling or rotating viewer.\n*/\n\n#define AA  0  // = 0/1 - optional antialiasing (slow)\n\n#define LOOP_REFL 0    // = 0/1 - faster compile & slower execute (for some) ??\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCaps2Df (vec2 p, float r, float h);\nfloat PrConeDf (vec3 p, vec3 b);\nfloat SmootherStep (float a, float b, float x);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvec4 snowCol;\nvec3 qHit, sunDir, trkA, trkF, bldSize;\nvec2 gId, trOff, trkA2, trkF2;\nfloat dstFar, tCur, hgSize, trSzFac, trSym, grHt, trRot, snowFac, zRep, bldSzFac;\nint idObj, vuMode;\nbool isSh, isNt, isFlsh;\nconst int idBrdg = 1, idWal = 2, idBatt = 3, idTwr = 4, idFlr = 5, idWin = 6, idRf = 7,\n   idRmp = 8, idPil = 9, idRod = 10, idFlag = 11, idTrnk = 21, idLv = 22, idRk = 23;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define VAR_ZERO min (iFrame, 0)\n\nvec2 TrackPathS (float t)\n{\n  return vec2 (dot (trkA, cos (2. * pi * trkF * t)), t);\n}\n\nvec2 TrackPath (float t)\n{\n  return TrackPathS (t) + vec2 (dot (trkA2, cos (2. * pi * trkF2 * t)), 0.);\n}\n\nfloat GrndHt (vec2 p)\n{\n  float h, w;\n  h = 0.5 + 0.17 * (sin (dot (p, vec2 (1., 1.4))) + sin (dot (p, vec2 (-1.2, 0.8)))) *\n     smoothstep (1., 2., abs (mod (p.y + zRep, 2. * zRep) - zRep));\n  w = abs (p.x - TrackPath (p.y).x) * (1.1 + 0.3 * sin (0.5 * p.y));\n  h = h * SmootherStep (4.35, 5., w) - 0.05 * (1. - w * w / (4.3 * 4.3)) * step (w, 4.3);\n  return h;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.05, 0.5 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy),\n     GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\nfloat ObjGdf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, ht;\n  dMin = dstFar;\n  p.xz -= HexToPix (gId) * hgSize + trOff;\n  if (trSzFac > 0.) {\n    dMin /= trSzFac;\n    p.xz = Rot2D (p.xz, trRot);\n    p.y -= grHt - 0.1;\n    p /= trSzFac;\n    ht = 2.2;\n    q = p;\n    q.y -= ht;\n    d = PrCylDf (q.xzy, 0.12 - 0.03 * q.y / ht, ht);\n    qq = p;\n    qq.xz = Rot2D (qq.xz, 2. * pi * (floor (trSym * atan (qq.z, - qq.x) / (2. * pi) +\n       0.5) / trSym));\n    q = qq;\n    q.xy = Rot2D (q.xy - vec2 (-0.2, 0.3), -0.3 * pi);\n    d = SmoothMin (d, PrCylDf (q.yzx, 0.09 + 0.02 * q.x / 0.6, 0.6), 0.2);\n    q = qq;\n    q.xy = Rot2D (q.xy - vec2 (-0.2, 1.2 * ht), 0.3 * pi);\n    d = SmoothMin (d, PrCylDf (q.yzx, 0.05 + 0.02 * q.x / 0.5, 0.5), 0.1);\n    DMIN (idTrnk);\n    q = p;\n    q.y -= 2. * ht;\n    d = SmoothMin (min (PrSphDf (q + vec3 (0, -1., 0.), 0.6),\n       PrSphDf (vec3 (qq.x + 0.4, q.y + 1., qq.z), 0.6)), PrSphDf (q, 1.), 0.5);\n    DMIN (idLv);\n    dMin *= trSzFac;\n  } else  if (trSzFac < 0.) {\n    q = p;\n    d = PrSphDf (q, - trSzFac * 0.3);\n    DMIN (idRk);\n  }\n  return dMin;\n}\n\nvoid SetTrParms ()\n{\n  vec2 g, w, v;\n  float s;\n  w = Hashv2v2 (17. * gId);\n  trSzFac = 0.3 + 0.4 * w.x;\n  trSym = floor (3. + 2.9 * w.y);\n  w = Hashv2v2 (33. * gId);\n  g = HexToPix (gId) * hgSize;\n  s = abs (g.x - TrackPath (g.y).x);\n  if (length (vec2 (max (s, 10.), mod (g.y + zRep, 2. * zRep) - zRep)) < 10.5) {\n    trSzFac = 0.;\n  } else {\n    v = w.x * sin (2. * pi * w.y + vec2 (0.5 * pi, 0.));\n    if (s < 1.5) {\n      trOff = hgSize * 0.5 * sqrt3 * v;\n      trSzFac *= -1.;\n    } else if (s < 6.5) {\n      trSzFac = 0.;\n    } else {\n      trOff = max (0., hgSize * 0.5 * sqrt3 - trSzFac) * v;\n      trRot = 0.6 * pi * (Hashfv2 (23. * gId + 99.) - 0.5);\n      grHt = GrndHt (g + trOff);\n    }\n  }\n}\n\nfloat ObjGRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetTrParms ();\n    }\n    d = ObjGdf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjGNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0005, -0.0005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjGdf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjGSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-999.);\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetTrParms ();\n    }\n    h = ObjGdf (p);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += clamp (h, 0.05, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat BldDf (vec3 p)\n{\n  vec3 q;\n  vec2 vb, vc;\n  float dMin, d, dw;\n  dMin = dstFar / bldSzFac;\n  p /= bldSzFac;\n  q = p;\n  q.y -= 2. + bldSize.y;\n  if (! isSh) d = PrBoxDf (q, bldSize + vec3 (6., 2., 1.));\n  if (isSh || d < 0.1) {\n    q = p;\n    q.x = abs (q.x) - bldSize.x - 3.;\n    q.y -= 1.6;\n    q.y = dot (q.yx, sin (0.06 * pi + vec2 (0.5 * pi, 0.)));\n    d = max (abs (q.x) - 2.65, max (PrBox2Df (q.yz, vec2 (0.3, 0.7)),\n       - PrBox2Df (q.yz - vec2 (0.2, 0.), vec2 (0.3, 0.6))));\n    DMINQ (idRmp);\n    q = p;\n    q.x = abs (q.x) - bldSize.x - 3.;\n    q.y -= 2.15 - step (0., q.x);\n    d = PrCapsDf (vec3 (abs (q.xz) - vec2 (2.7, 0.65), q.y), 0.08, 0.3);\n    DMINQ (idPil);\n    q = p;\n    d = max (PrBox2Df (q.xz, bldSize.xz + vec2 (0.4, 0.3)),\n       - PrCaps2Df (vec2 (mod (q.x, 2.) - 1., q.y), 0.6, 1.));\n    d = SmoothMax (min (d, max (PrCaps2Df (vec2 (mod (q.x + 1., 2.) - 1., q.z), 0.4, bldSize.z + 0.3),\n       abs (q.x) - 5.)), q.y - 2., 0.05);\n    DMINQ (idBrdg);\n    q = p;\n    vb = mod (q.xz + 0.5, 1.) - 0.5;\n    vc = abs (q.xz) - bldSize.xz + 0.15;\n    q.y -= 2. + bldSize.y;\n    d = max (max (abs (PrBox2Df (q.xz, bldSize.xz - 0.07)) - 0.07, abs (q.y) - bldSize.y),\n       - min (max (PrBox2Df (vec2 (vb.x, abs (q.y) - 0.7), vec2 (0.2, 0.45)), vc.x),\n       max (PrBox2Df (vec2 (vb.y, abs (q.y) - 0.7), vec2 (0.2, 0.45)), vc.y)));\n    dw = PrBox2Df (vec2 (q.y + 0.85, q.z), vec2 (0.6, 0.35));\n    d = max (d, - dw);\n    DMINQ (idWal);\n    q = p;\n    q.y -= 2. * bldSize.y + 2.15;\n    d = max (max (PrBoxDf (q, vec3 (bldSize.xz, 0.15).xzy), - PrBox2Df (q.xz, bldSize.xz - 0.1)),\n       -0.125 + Maxv2 (abs (mod (q.xz + 0.25, 0.5) - 0.25)));\n    DMINQ (idBatt);\n    q = p;\n    q.y -= 2.;\n    d = abs (q.y - bldSize.y) - bldSize.y;\n    q.y = mod (q.y + 0.5 * (bldSize.y - 0.05), (bldSize.y - 0.05)) - 0.5 * (bldSize.y - 0.05);\n    d = max (PrBoxDf (q, vec3 (bldSize.xz - 0.07, 0.03).xzy), d);\n    DMINQ (idFlr);\n    q = p;\n    q.xz = abs (q.xz);\n    q -= vec3 (bldSize.xz - 0.05, 2. + bldSize.y).xzy;\n    d = min (PrCylDf (vec3 (p.x, abs (q.y - 0.1) - 0.7, q.z).yzx, 0.025, bldSize.x),\n       max (PrCylDf (vec3 (vb.x, q.yz).xzy, 0.025, bldSize.y), vc.x));\n    DMINQ (idWin);\n    d = min (max (PrCylDf (vec3 (q.x, abs (q.y - 0.1) - 0.7, p.z), 0.025, bldSize.z), - dw),\n       max (PrCylDf (vec3 (q.xy, vb.y).xzy, 0.025, bldSize.y), vc.y));\n    DMINQ (idWin);\n    q = p;\n    q.y -= 2. * bldSize.y + 3.15;\n    d = max (max (dot (vec2 (abs (q.x) - 2.3, q.y), sin (0.3 * pi + vec2 (0.5 * pi, 0.))),\n       dot (vec2 (abs (q.z) - 0.3, q.y), sin (0.3 * pi + vec2 (0.5 * pi, 0.)))), - q.y - 1.2);\n    DMINQ (idRf);\n    q = vec3 (vc - 0.15, p.y - (2.2 + bldSize.y)).xzy;\n    d = PrCylDf (q.xzy, 0.3, bldSize.y + 0.2);\n    DMINQ (idTwr);\n    q.y -= 1.4 + bldSize.y;\n    d = PrConeDf (q.xzy, vec3 (sin (0.07 * pi + vec2 (0.5 * pi, 0.)), 1.2));\n    DMINQ (idRf);\n    q.y -= 0.15;\n    d = PrCylDf (q.xzy, 0.03, 0.3);\n    DMINQ (idRod);\n    q.xy -= vec2 (0.2 * sign (p.x), 0.15);\n    d = PrBoxDf (q, vec3 (0.2, 0.1, 0.005));\n    DMINQ (idFlag);\n  } else dMin = d;\n  return bldSzFac * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  return BldDf (vec3 (p.x - TrackPath (0.).x, p.y, mod (p.z + zRep, 2. * zRep) - zRep));\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  p = vec3 (p.x - TrackPath (0.).x, p.y, mod (p.z + zRep, 2. * zRep) - zRep);\n  p /= bldSzFac;\n  p.y -= 2. + bldSize.y;\n  return bldSzFac * PrBoxDf (p, bldSize - 0.07);\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.05, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec4 BldCol (float zColr, vec3 vn, out vec2 vf)\n{\n  vec4 col4, bldCol, hzCol;\n  vec2 u;\n  float sy;\n  bldCol = vec4 (HsvToRgb (vec3 (0.05 + 0.06 * zColr / 3., 0.7, 1.)), 0.1);\n  hzCol = mix (bldCol, vec4 (0.4, 0.4, 0.4, 0.1), 0.8);\n  sy = 0.9 + 0.1 * SmoothBump (0.1, 0.9, 0.02, mod (10. * qHit.y + 0.5, 1.));\n  if (idObj == idWal) {\n    col4 = bldCol;\n    if (abs (mod (qHit.y + 0.5 * (bldSize.y - 0.05), (bldSize.y - 0.05)) -\n       0.5 * (bldSize.y - 0.05)) < 0.03) col4 *= 0.8;\n    u.xy = abs (mod (qHit.xz + 0.5, 1.) - 0.5) - 0.25;\n    if (abs (qHit.y + 0.85) < 0.68 && abs (qHit.z) < 0.42) col4 *= 1.1;\n    else if (abs (abs (qHit.y) - 0.7) < 0.5 && (u.x < 0. && abs (qHit.z) > bldSize.z - 0.2 ||\n       u.y < 0. && abs (qHit.x) > bldSize.x - 0.2)) col4 *= 0.8;\n    else if (Maxv2 (abs (qHit.xz) - bldSize.xz) > - 0.01) col4 *= sy;\n  } else if (idObj == idBrdg) {\n    if (vn.y < 0.99) {\n      col4 = 0.7 * bldCol;\n      if (qHit.y < 0.4) col4 *= 0.8 * sy;\n      if (qHit.y < 1.6 && abs (qHit.z) < bldSize.z) col4 *= (0.8 +\n         0.2 * SmoothBump (0.08, 0.92, 0.02, mod (4. * qHit.z, 1.)));\n    } else col4 = hzCol;\n  } else if (idObj == idBatt || idObj == idTwr || idObj == idPil) col4 = bldCol * sy;\n  else if (idObj == idRf) col4 = vec4 (0.55, 0.6, 0.55, 0.1) * sy;\n  else if (idObj == idRmp) col4 = (abs (vn.z) > 0.99) ? bldCol * sy : hzCol;\n  else if (idObj == idFlr) col4 = 0.7 * bldCol;\n  else if (idObj == idWin) col4 = vec4 (0.4, 0.4, 0.3, 0.1);\n  else if (idObj == idRod) col4 = vec4 (0.9, 0.9, 0.9, 0.1);\n  else if (idObj == idFlag) col4 = vec4 (mix (HsvToRgb (vec3 (zColr / 4., 1., 1.)), \n     vec3 (1.2), step (qHit.y, 0.)), 0.1);\n  if (idObj == idRod || idObj == idFlag) vf = vec2 (0.);\n  else if (idObj == idBrdg && vn.y < 0.99) vf = vec2 (32., 0.5);\n  else vf = vec2 (32., 0.2);\n  if (! (idObj == idWal && qHit.y < bldSize.y - 0.01 || idObj == idFlr)) {\n    col4 = mix (col4, snowCol, snowFac * smoothstep (0.3, 0.8, vn.y));\n    if (snowFac > 0.5) vf = vec2 (32., 2. * smoothstep (0.5, 0.7, snowFac)) *\n       smoothstep (0.3, 0.8, vn.y);\n  }\n  return col4;\n}\n\nvec4 TreeRkCol (vec3 p, vec3 vn, out vec2 vf)\n{\n  vec4 col4, snCol;\n  vec2 g;\n  col4 = vec4 (0.);\n  vf = vec2 (0.);\n  g = Hashv2v2 (27. * gId);\n  if (idObj == idTrnk) {\n    col4 = vec4 (HsvToRgb (vec3 (0.1 * g.x, 0.5, 0.4 - 0.2 * g.y)), 0.);\n    snCol = mix (snowCol, mix (col4, snowCol, smoothstep (-0.05, 0.2, vn.y)),\n       smoothstep (0.1 * trSzFac, 0.3 * trSzFac, p.y - GrndHt (HexToPix (gId) * hgSize)));\n    vf = vec2 (32., 2.);\n  } else if (idObj == idLv) {\n    col4 = vec4 (HsvToRgb (vec3 (0.2 + 0.2 * g.x, 0.7, 0.8 - 0.4 * g.y)) *\n       (1. - 0.2 * Noisefv3 (64. * p)), 0.05);\n    snCol = mix (0.6 * col4, snowCol, 0.2 + 0.8 * smoothstep (-0.8, -0.6, vn.y));\n    vf = vec2 (16., mix (2., 8., 1. - snowFac));\n  } else if (idObj == idRk) {\n    col4 = vec4 (mix (vec3 (0.4, 0.3, 0.3), vec3 (0.3, 0.4, 0.5), Fbm2 (16. * p.xz)), 0.1);\n    snCol = mix (col4, snowCol, 0.2 + 0.8 * smoothstep (0., 0.2, vn.y));\n    vf = vec2 (8., 8.);\n  }\n  col4 = mix (col4, snCol, snowFac);\n  return col4;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y < 0.01 * Fbm1 (256. * (atan (rd.x, rd.z) / (2. * pi) + 0.5))) {\n    col = 0.9 * vec3 (0.4, 0.5, 0.8);\n  } else {\n    q = 0.02 * (ro.xz + 0.5 * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    skCol = vec3 (0.4, 0.5, 0.8);\n    if (! isNt) {\n      sd = max (dot (rd, sunDir), 0.);\n      skCol = mix (skCol, vec3 (1., 1., 0.8), step (0.1, sd) *\n         0.2 * pow (sd, 128.) + 0.8 * pow (sd, 2048.));\n    }\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, c1, c2, cSky, vn, vnw, rog, roo, rdo;\n  vec2 vf;\n  float dstObjG, dstObjB, dstObj, dstTrObj, dstGrnd, dstWat, sh, htScn;\n  int idObjG;\n  bool isWat, isSky;\n  hgSize = 1.5;\n  bldSize = vec3 (4., 1.5, 2.);\n  bldSzFac = 0.5;\n  htScn = 5.;\n  isWat = false;\n  isSky = false;\n  isSh = false;\n  snowCol = vec4 (0.9, 0.9, 0.95, 0.1);\n  roo = ro;\n  rdo = rd;\n  dstTrObj = TrObjRay (ro, rd);\n#if LOOP_REFL\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    dstObjG = (ro.y < htScn || rd.y < 0.) ? ObjGRay (ro, rd) : dstFar;\n    idObjG = idObj;\n    dstObjB = ObjRay (ro, rd);\n    dstObj = min (dstObjB, dstObjG);\n    dstGrnd = GrndRay (ro, rd);\n    if (k == 0) {\n      rog = ro + dstGrnd * rd;\n      dstWat = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n    }\n    if (k == 0 && dstWat < min (min (dstGrnd, dstObj), dstFar)) {\n      ro += dstWat * rd;\n      vnw = VaryNf (ro + vec3 (0., 0., 0.2 * tCur), vec3 (0., 1., 0.),\n         0.2 - 0.18 * smoothstep (0.1, 0.15, dstWat / dstFar));\n      rd = reflect (rd, vnw);\n      ro += 0.01 * rd;\n      isWat = true;\n    }\n  }\n#else\n  dstObjG = (ro.y < htScn || rd.y < 0.) ? ObjGRay (ro, rd) : dstFar;\n  idObjG = idObj;\n  dstObjB = ObjRay (ro, rd);\n  dstObj = min (dstObjB, dstObjG);\n  dstGrnd = GrndRay (ro, rd);\n  dstWat = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  rog = ro + dstGrnd * rd;\n  if (dstWat < min (min (dstGrnd, dstObj), dstFar)) {\n    ro += dstWat * rd;\n    vnw = VaryNf (ro + vec3 (0., 0., 0.2 * tCur), vec3 (0., 1., 0.),\n       0.2 - 0.18 * smoothstep (0.1, 0.15, dstWat / dstFar));\n    rd = reflect (rd, vnw);\n    ro += 0.01 * rd;\n    dstObjG = (ro.y < htScn || rd.y < 0.) ? ObjGRay (ro, rd) : dstFar;\n    idObjG = idObj;\n    dstObjB = ObjRay (ro, rd);\n    dstObj = min (dstObjB, dstObjG);\n    dstGrnd = GrndRay (ro, rd);\n    isWat = true;\n  }\n#endif\n  vf = vec2 (0.);\n  if (min (dstGrnd, dstObj) < dstFar) {\n    if (dstObj < dstGrnd) {\n      if (dstObjB < dstObjG) {\n        ro += dstObjB * rd;\n        vn = ObjNf (ro);\n        col4 = BldCol (mod (floor (ro.z / (2. * zRep) + 0.5), 4.), vn, vf);\n      } else {\n        ro += dstObjG * rd;\n        vn = ObjGNf (ro);\n        idObj = idObjG;\n        col4 = TreeRkCol (ro, vn, vf);\n      }\n      vf.y *= 1. - smoothstep (0.01, 0.25, dstObj / dstFar);\n      col4 *= 1. - 0.2 * smoothstep (0.4, 0.8, dstObj / dstFar);\n    } else if (dstGrnd < dstFar) {\n      ro += dstGrnd * rd;\n      gId = PixToHex (ro.xz / hgSize);\n      SetTrParms ();\n      vn = GrndNf (ro);\n      vf = vec2 (8., 4. * (1. - smoothstep (0.07, 0.5, dstGrnd / dstFar)));\n      if (snowFac < 1.) {\n        c1 = mix (vec3 (0.15, 0.25, 0.15), vec3 (0.2, 0.4, 0.2),\n           smoothstep (0.3, 0.5, Fbm2 (4. * ro.xz)));\n        if (trSzFac > 0.) c1 *= 0.6 + 0.4 * smoothstep (0.4 * trSzFac, 0.7 * trSzFac,\n           length (ro.xz - HexToPix (gId) * hgSize - trOff));\n        c1 *= (1. - 0.2 * Noisefv2 (128. * ro.xz));\n        c2 = vec3 (0.3, 0.3, 0.35) * (1. - 0.2 * Noisefv2 (256. * ro.zy));\n        col4 = vec4 (mix (c2, mix (c2, c1, smoothstep (0.4, 0.7, vn.y)),\n           smoothstep (0., 0.005 * Noisefv2 (128. * ro.xz), ro.y)), 0.);\n      } else col4 = vec4 (0.);\n      col4 = mix (col4, snowCol, snowFac);\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    isSh = true;\n    sh = (! isNt) ? min (ObjGSShadow (ro, sunDir), ObjSShadow (ro, sunDir)) : 1.;\n    col = col4.rgb * (0.2 + 0.2 * max (dot (normalize (- sunDir.xz), vn.xz), 0.) +\n       0.1 * max (vn.y, 0.) + 0.8 * sh * max (dot (vn, sunDir), 0.));\n    if (! isNt) col += step (0.95, sh) * col4.a * pow (max (dot (sunDir, reflect (rd, vn)), 0.), 32.);\n  } else {\n    if (! isWat) {\n      ro = roo;\n      rd = rdo;\n    }\n    isSky = true;\n  }\n  cSky = SkyBgCol (ro, rd);\n  if (isSky) col = cSky;\n  if (isWat) col = mix (mix (vec3 (0., 0.1, 0.), vec3 (0.08, 0.08, 0.1),\n     smoothstep (0.45, 0.55, Noisefv2 (128. * rog.xz))), 0.9 * col,\n     1. - 0.9 * pow (dot (- rdo, vnw), 2.));\n  if (! isSky) col = mix (col, cSky, smoothstep (0.8, 1.,\n     (min (dstGrnd, dstObj) + (isWat ? dstWat : 0.)) / dstFar));\n  if (isNt) col = mix (col, 0.6 * vec3 (pow (Maxv3 (col), 1.5)), 0.9) *\n     (isFlsh ? 1.5 * vec3 (1., 1., 0.8) : vec3 (0.4));\n  if (! isWat && dstTrObj < min (min (dstObj, dstGrnd), dstFar)) {\n    ro = roo + dstTrObj * rdo;\n    rd = reflect (rdo, TrObjNf (ro));\n    if (rd.y > 0.01 * Fbm1 (512. * (atan (rd.x, rd.z) / (2. * pi) + 0.5)))\n       col = mix (col, (isNt ? 0.2 : 0.8) * SkyBgCol (ro, rd), 0.7);\n    else col *= 0.5;\n    if (isNt) col = mix (col, vec3 (0.5, 0.5, 0.2), 0.3);\n  }\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, vd, mMid[4], ut[4], mSize, msw;\n  float el, az, asp, zmFac, t, vel, f, vuId, regId, sr;\n  const int nsWin = 4;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mSize = (1./7.) * vec2 (asp, 1.);\n  for (int k = 0; k < nsWin; k ++) mMid[k] = vec2 (asp, 1.) * (1. - mSize.y);\n  mMid[0] = mMid[0] * vec2 (-1., -1.);\n  mMid[1] = mMid[1] * vec2 (-1., -1.) + vec2 (2. * mSize.x, 0.);\n  mMid[2] = mMid[2] * vec2 (1., -1.)  + vec2 (- 2. * mSize.x, 0.);\n  mMid[3] = mMid[3] * vec2 (1., -1.);\n  for (int k = 0; k < nsWin; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  regId = -1.;\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < nsWin; k ++) {\n      msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n      if (Maxv2 (abs (msw)) < mSize.y) {\n        regId = 1. + float (k);\n        msw /= 2. * mSize.y;\n        break;\n      }\n    }\n    if (regId == -1.) msw = mPtr.xy;\n  }\n  vuId = 0.;\n  for (int k = 0; k < nsWin; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuId = float (k + 1);\n      break;\n    }\n  }\n  if (regId > 0. && vuId == 0.) vuId = regId;\n  vuMode = (vuId == 0. || vuId == 1. || vuId == 3.) ? 0 : 1;\n  isNt = (vuId == 3. || vuId == 4.);\n  isFlsh = (Fbm1 (10. * tCur) > 0.7);\n  snowFac = SmoothBump (0.4, 0.9, 0.03, mod (tCur / 120., 1.));\n  zRep = 64.;\n  trkF = vec3 (1., 2., 3.) / zRep;\n  trkA = vec3 (1.5, -1.2, 0.8);\n  trkF2 = vec2 (1., 2.) * 16. / zRep;\n  trkA2 = vec2 (-0.1, 0.05);\n  if (vuMode == 0) {\n    vel = 1.5;\n    t = vel * tCur + 0.3 * zRep;\n    ro.xz = TrackPathS (t);\n    vd = TrackPathS (t + zRep / 32.) - ro.xz;\n    t = ro.z / (2. * zRep);\n    f = SmoothBump (0.15, 0.85, 0.07, mod (t, 1.));\n    ro.x += 0.5 * (1. - f) * (2. * mod (floor (t + 0.5), 2.) - 1.);\n    ro.y = 0.6 + 7.4 * (1. + 0.5 * mod (floor (t), 2.)) * f;\n    az = 0.;\n    el = 0.;\n    if (vuId == 0.) {\n      az = pi * SmoothBump (0.15, 0.55, 0.15, mod (t, 1.)) * (mod (floor (t), 3.) - 1.);\n      el = -0.07 * pi * (1. + 0.5 * mod (floor (t), 2.)) * f;\n    }\n    az += 0.5 * atan (vd.x, vd.y);\n    zmFac = 3.;\n  } else {\n    ro = vec3 (0., 1.5, -15.);\n    az = 0.03 * pi * tCur;\n    el = -0.023 * pi * (5. - cos (2. * az));\n    zmFac = 4.;\n  }\n  if ((vuId == 0. || vuId == regId) && mPtr.z > 0.) {\n    f = (vuMode == 0) ? 1. : -1.;\n    az += 2. * f * pi * msw.x;\n    el += f * pi * msw.y;\n  }\n  if (vuMode == 0) el = clamp (el, -0.3 * pi, 0.3 * pi);\n  else el = clamp (el, -0.3 * pi, -0.01 * pi);\n  dstFar = 200.;\n  sunDir = normalize (vec3 (1., 1.5, 0.3));\n  vuMat = StdVuMat (el, az);\n  if (vuMode > 0) ro = vuMat * ro;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  for (int k = 0; k < nsWin; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 4.) col = vec3 (0.7, 0.7, 0.2);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (p - vec2 (0., clamp (p.y, - h, h))) - r;\n}\n\nfloat PrConeDf (vec3 p, vec3 b)\n{\n  return max (dot (vec2 (length (p.xy), p.z), b.xy), abs (p.z) - b.z);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat SmootherStep (float a, float b, float x)\n{\n  x = clamp ((x - a) / (b - a), 0., 1.); \n  return ((6. * x - 15.) * x + 10.) * x * x * x;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  }\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}