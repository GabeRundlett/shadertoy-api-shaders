{
    "Shader": {
        "info": {
            "date": "1379986451",
            "description": "A cubic Julia set f(z) = z^3 + c, in quaternion space. I used the regular Hubbard-Douady potential based distance estimator d(z) = 0.5·log|z|·|z|/|dz| for the marcher, orbit traps for coloring, and a compact way to rise a quaterion to the cube power.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsl3W2",
            "likes": 87,
            "name": "Julia - Quaternion 2",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "julia",
                "distance",
                "quaternion",
                "cubic"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 9341
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n// A cubic Julia set f(z) = z^3 + c, in quaternion space. I used the\n// regular Hubbard-Douady potential based distance estimator \n// d(z) = 0.5·log|z|·|z|/|dz| for the marcher, orbit traps for\n// coloring, and a compact way to rise a quaterion to the cube power.\n// \n// More info:\n//   https://iquilezles.org/articles/juliasets3d\n//\n// Related shaders:\n//  Julia - Quaternion 1 : https://www.shadertoy.com/view/MsfGRr\n//  Julia - Quaternion 2 : https://www.shadertoy.com/view/lsl3W2\n//  Julia - Quaternion 3 : https://www.shadertoy.com/view/3tsyzl\n\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\n//--------------------------------------------------------------------------------\n// quaternion manipulation\n//--------------------------------------------------------------------------------\n\nvec4 qSquare( vec4 a )\n{\n    return vec4( a.x*a.x - dot(a.yzw,a.yzw), 2.0*a.x*(a.yzw) );\n}\n\nvec4 qCube( vec4 a )\n{\n\treturn a * ( 4.0*a.x*a.x - dot(a,a)*vec4(3.0,1.0,1.0,1.0) );\n}\n\n//--------------------------------------------------------------------------------\n\nfloat lengthSquared( vec4 z ) { return dot(z,z); }\n\n// animation\n\nvec3 map( vec3 p, vec4 c )\n{\n    vec4 z = vec4( p, 0.2 );\n\t\n\tfloat m2 = 0.0;\n\tvec2  t = vec2( 1e10 );\n\n\tfloat dz2 = 1.0;\n\tfor( int i=0; i<10; i++ ) \n\t{\n        // |dz|² = |3z²|²\n\t\tdz2 *= 9.0*lengthSquared(qSquare(z));\n        \n\t\t// z = z^3 + c\t\t\n\t\tz = qCube( z ) + c;\n\t\t\n        // stop under divergence\t\t\n        m2 = dot(z, z);\t\t\n        if( m2>10000.0 ) break;\t\t\t\t \n\n        // orbit trapping ( |z|² and z_x  )\n\t\tt = min( t, vec2( m2, abs(z.x)) );\n\n\t}\n\n\t// distance estimator: d(z) = 0.5·log|z|·|z|/|dz|   (see https://iquilezles.org/articles/distancefractals)\n\tfloat d = 0.25 * log(m2) * sqrt(m2/dz2 );\n\n\treturn vec3( d, t );\n}\n\nvec3 raycast( in vec3 ro, in vec3 rd, in vec4 c )\n{\n\tfloat maxd = 8.0;\n\tfloat precis = 0.002;\n    float h = 1.0;\n    float t = 0.0;\n\tfloat d = 0.0;\n    float m = 1.0;\n    for( int i=0; i<150; i++ )\n\t{\n        if( h<precis||t>maxd ) break;\n        t += h;\n\t    vec3 res = map( ro+rd*t, c );\n        h = res.x;\n\t\td = res.y;\n\t\tm = res.z;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec3( t, d, m );\n}\n\nvec3 calcNormal( in vec3 pos, float e, in vec4 c )\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy,c).x - map(pos-eps.xyy,c).x,\n           map(pos+eps.yxy,c).x - map(pos-eps.yxy,c).x,\n           map(pos+eps.yyx,c).x - map(pos-eps.yyx,c).x ) );\n}\n\nvec3 calcPixel( in vec2 pi, in float time )\n{\n    vec4 c = vec4(-0.1,0.6,0.9,-0.3) + 0.1*sin( vec4(3.0,0.0,1.0,2.0) + 0.5*vec4(1.0,1.3,1.7,2.1)*iTime);\n\n\tvec2 q = pi / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n    // camera\n\tfloat an = -2.4 + 0.2*time - 6.2*m.x;\n    vec3 ro = 4.0*vec3(sin(an),0.25,cos(an));\n    vec3 ta = vec3( 0.0, 0.08, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.1*ww );\n\n\t// raymarch\n    vec3 tmat = raycast(ro,rd,c);\n\t\n\t// shade\n    vec3 col = vec3(0.0);\n    if( tmat.z>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos, 0.001,c);\n        vec3 sor = calcNormal(pos, 0.01,c);\n\n        // material\t\t\n\t\tvec3 mate = 0.5 + 0.5*sin( tmat.z*4.0 + 4.0 + vec3(3.0,1.5,2.0)  + nor*0.2 ).xzy;\n\t\t\n        // lighting\t\t\n\t\tfloat occ = clamp( tmat.y*0.5 + 0.5*(tmat.y*tmat.y), 0.0, 1.0 ) * (1.0 + 0.1*nor.y);\n\t\t\n        // diffuse\t\t\n\t\tcol = vec3(0.0);\n\t\tfor( int i=0; i<32; i++ )\n\t\t{\n\t\t\tvec3 rr = normalize(-1.0 + 2.0*hash3(float(i)*123.5463));\n\t\t\trr = normalize( nor + 8.0*rr );\n\t\t\trr = rr * sign(dot(nor,rr));\t\t\t\t\t\t\t  \n            col += pow( texture( iChannel0, rr ).xyz, vec3(2.2) ) * dot(rr,nor);\n\t\t}\n        col = 5.0 * occ * (col/32.0);\n\n        // rim\t\t\n\t\tcol *= 1.0 + 1.0*pow(clamp(1.0+dot(rd,sor),0.0,1.0),1.0)*vec3(1.0);\n\n        // specular\t\t \n\t\tfloat fre = pow( clamp(1.0+dot(rd,sor),0.0,1.0), 5.0 );\n\t\tvec3  ref = reflect( rd, nor );\n\t\tcol *= 1.0 - 0.5*fre; \n\t\tcol += 1.5 * (0.5 + 0.5*fre) * pow( texture( iChannel0, ref ).xyz, vec3(2.0) ) * occ;\n\n        col *= mate;\n    }\n\telse\n\t{\n        // background\t\t\n\t\tcol = pow( texture( iChannel0, rd ).xyz, vec3(2.2) );\n\t}\n\n\t// gamma\n\tcol = pow( clamp( col, 0.0, 1.0 ), vec3(0.45) );\n\t\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t#if 1\n    const int samples = 4;\n\tvec3 col = vec3(0.0);\n\tfor( int i=0; i<samples; i++ )\n\t{\n\t\tfloat r = texture( iChannel1, fragCoord.xy/iChannelResolution[1].xy ).x;\n\t\tvec3  h = hash3( r + float(i) + iTime );\n        vec2  p = fragCoord.xy + h.xy;\n\t\tfloat t = iTime + 0.5*h.z/24.0;\n        col += calcPixel( p, t );\n\t}\n    fragColor = vec4( col/float(samples), 1.0 );\n\t#else\n\t\n    fragColor = vec4( calcPixel( fragCoord.xy, iTime ), 1.0 );\n\t\n\t#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}