{
    "Shader": {
        "info": {
            "date": "1707324378",
            "description": "-tmm just added some mouse input to play with the radiation source positions and see the interference patterns.\nFork of \"Radiation II\" by @itishappy. https://shadertoy.com/view/43l3RM\nradiation",
            "flags": 0,
            "hasliked": 0,
            "id": "X3f3Dr",
            "likes": 6,
            "name": "Mousable Radiation II",
            "published": 3,
            "tags": [
                "interference",
                "beam",
                "radiation"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "// Fork of \"Radiation II\" by itishappy. https://shadertoy.com/view/43l3RM\n// 2024-02-07 16:32:54\n\nconst float V  = 0.15,             // velocity\n            WL = 0.06;             // wavelength\n#ifdef ORIG_CONSTANT_POSITIONS\nconst vec2  S1 = vec2(-0.0, 0.2),  // source position 1\n            S2 = vec2(-0.2, 0.1),  // source position 2\n            S3 = vec2(.2, 0.0),  // source position 3\n            S4 = vec2(-0.5, -0.1), // source position 4\n            S5 = vec2(0.3, -0.2); // source position 5\n#endif\n\n// from \"Random Function\" by anastadunbar. https://shadertoy.com/view/Xt23Ry\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\n\n\nvoid mainImage(out vec4 o, in vec2 uv) {\n    // square and center coordinates\n    vec2   res = iResolution.xy,\n           pos = (2.0 * uv - res) / res.y;\n\n vec2 m = (iMouse.xy == vec2(0.)) ? vec2(0.5,0.5) : (iMouse.xy - .5*iResolution.xy)/iResolution.y;\n if(m.x==0.0) {\n   m.x = rand(iMouse.xy);\n }\n if (m.y==0.0) {\n   m.y = rand(iMouse.yx);\n }\n \n float f =m.x/m.y;    \n float g =m.y/m.x;\n vec2  S1 = vec2(m.x-f*0.3, m.y+g*0.5),  // source position 1\n            S2 = vec2(m.x-f*0.53, m.y+f*0.12),  // source position 2\n            S3 = vec2(m.x+f*.15, m.y-g*0.27),  // source position 3\n            S4 = vec2(m.x-g*0.1, m.y-f*0.3), // source position 4\n            S5 = vec2(m.x+f*0.3, m.y-g*0.52); // sour\n\n    // distances and amplitudes\n    float  d1  = length(S1 - pos),\n           d2  = length(S2 - pos),\n           d3  = length(S3 - pos),\n           d4  = length(S4 - pos),\n           d5  = length(S5 - pos),\n           a1  = sin(3.1415 * (d1 - iTime * V) / WL) / d1,\n           a2  = sin(3.1415 * (d2 - iTime * V) / WL) / d2,\n           a3  = sin(3.1415 * (d3 - iTime * V) / WL) / d3,\n           a4  = sin(3.1415 * (d4 - iTime * V) / WL) / d4,\n           a5  = sin(3.1415 * (d5 - iTime * V) / WL) / d5,\n           a0  = a1 + a2 + a3 + a4 + a5;\n\n    // default shader, lol\n    vec3   col = 0.5 + 0.5 * cos(pos.xyx + vec3(0, 2, 4) - iTime);\n\n    // square the amplitude\n    o = a0 * a0 * vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}