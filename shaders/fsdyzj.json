{
    "Shader": {
        "info": {
            "date": "1653766261",
            "description": "WIP.\ntrying to directly ray-trace a torus by solving the P4 polynomial.  (blue)\nred / green where solutions l_1,2 / l_3,4 are defined.  → why the dots, why the arc bug ?\nmouse controls camera",
            "flags": 0,
            "hasliked": 0,
            "id": "fsdyzj",
            "likes": 13,
            "name": "ray-tracing torus (where's bug?)",
            "published": 3,
            "tags": [
                "raytracing",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 433
        },
        "renderpass": [
            {
                "code": "float r1 = 10., r2 = 5.;                 // large & small torus radii\nconst vec3 A = normalize(vec3(0,0,1)),   // torus axis\n          Ay = normalize(cross(vec3(1,0,0),A)), Ax = cross(A,Ay); // torus frame\n\n//#define rot(a)       mat2(cos(a+vec4(0,11,33,0)))         // rotation   \n  #define rot(a)       mat2(cos(a), -sin(a), sin(a), cos(a) )   \n\n#if 0\n     #define draw(p) 1.\n#else\nvec4 draw( vec3 p) { // p += l*D;       // ---- pattern upon the torus\n     //v = asin( (oa + l*da)/r2 );\n     //v = acos( ( dot(p,p) - (r1*r1 + r2*r2) ) * .5/r1/r2 );     \n     float v = atan( dot(p,A),  ( dot(p,p) - (r1*r1 + r2*r2) ) * .5/r1 );\n\n     p -= dot(p,A) *A; \n     float u = atan(dot(p,Ax), dot(p,Ay) );\n     vec2 U = vec2( sin(2.*r1*u), sin(2.*r2*v) );\n  // return vec4( clamp(.5-.5*U/fwidth(U),0.,1.) , 0, 1);\n     U = clamp(.5-.5*abs(U)/fwidth(U),0.,1.);\n     return vec4( vec2( max(U.x,U.y) ), 1,1);\n}\n#endif\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -3.5*R.y) - R),         // ray direction\n          P = 60./R,                                      // camera position \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(25,10,0)/1e2*cos(iTime+vec3(0,11,0)); // auto thumbnail\n     \n    \n    P.yz *= rot(-6.*M.y),                                 // rotations\n    P.xz *= rot(-6.*M.x);\n    D.yz *= rot(-6.*M.y),                           \n    D.xz *= rot(-6.*M.x);\n    // P = O + lD ,   P.A = r.sinv ,   |P-(P.A)A| = R+r.cosv \n    // → P²-r²sinv² = (R+r.cosv)² → P² = r²+R²+2rR.cosv \n    // → r.cosv = ( P²-r²-R² ) / 2R\n    // → r² = (P.A)² + ( \" )² = degree4 polynomial in l\n    // solution: https://en.wikipedia.org/wiki/Quartic_function#Solution\n    \n    float da = dot(D,A), oa = dot(P,A),\n          a0 = .5/r1,         //  ( P²-r²-R² ) / 2R = P2[l]\n          b0 =  dot(P,D)/r1,\n          c0 = ( dot(P,P) - r1*r1 - r2*r2 ) *.5/r1,\n    // --- (P.A)²[l] --- ((P²-r²-R²)/2R)²[l]  ----\n          a =              a0*a0,                       // l⁴\n          b =              2.*a0*b0,                    // l³\n          c =  da*da    +  b0*b0 + 2.*a0*c0,            // l²\n          d = 2.*oa*da  +  2.*b0*c0,                    // l¹\n          e = oa*oa     +  c0*c0              - r2*r2,  // l⁰\n\n          d0 = c*c - 3.*b*d + 12.*a*e,\n          d1 = 2.*c*c*c - 9.*b*c*d +27.*b*b*e +27.*a*d*d -72.*a*c*e,\n          p = ( 8.*a*c - 3.*b*b ) / ( 8.*a*a ),\n          q = ( b*b*b - 4.*a*b*c + 8.*a*a*d )  / ( 8.*a*a*a ),\n          dd  = d1*d1-4.*d0*d0*d0,\n          Q   = pow( ( d1 + sqrt(dd) )/2., 1./3. ), \n          phi = acos(d1*.5/sqrt(d0*d0*d0)),\n          S = dd > 0. \n                ? .5* sqrt( -2./3.*p+ (Q+d0/Q)/(3.*a) )\n                : .5* sqrt( -2./3.*p+ 2./(3.*a)*sqrt(d0)*cos(phi/3.) ),\n          d2 = .5*sqrt(-4.*S*S - 2.*p +q/S),\n          l0 = -b/(4.*a),\n          l,u,v;\n#if 0     \n     O = vec4(d1*d1-4.*d0*d0*d0<0., \n              d1 + sqrt(d1*d1-4.*d0*d0*d0) <0.,\n              0,0); return;\n#endif\n     O-=O;\n     l = l0 -S -d2;  if (!isnan(l)) O += draw(P+l*D) *vec4( 1,0,.1,0);\n     l = l0 -S +d2;  if (!isnan(l)) O += draw(P+l*D) *vec4(.3,0,.1,0);\n     d2 = .5*sqrt(-4.*S*S - 2.*p -q/S);\n     l = l0 +S -d2;  if (!isnan(l)) O += draw(P+l*D) *vec4(0, 1,.1,0);\n     l = l0 +S +d2;  if (!isnan(l)) O += draw(P+l*D) *vec4(0,.3,.1,0);\n     \n     O = sqrt(O);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}