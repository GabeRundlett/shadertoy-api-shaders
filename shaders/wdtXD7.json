{
    "Shader": {
        "info": {
            "date": "1572208215",
            "description": "Flyover of an LED field showing Conway's game of life.",
            "flags": 32,
            "hasliked": 0,
            "id": "wdtXD7",
            "likes": 14,
            "name": "Shadertober 26 Conway -jaburns",
            "published": 3,
            "tags": [
                "raymarch",
                "life",
                "conway"
            ],
            "usePreview": 0,
            "username": "jaburns",
            "viewed": 498
        },
        "renderpass": [
            {
                "code": "#define EPS 0.005\n#define MAX_DIST 300.\n#define ITERATIONS 100\n#define PI 3.14159\n\nmat2 rot( float theta )\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2( c, s, -s, c );\n}\n\n//https://iquilezles.org/articles/distfunctions\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 minMat( vec2 a, vec2 b )\n{\n    return a.x < b.x ? a : b;\n}\n\nvec2 map( vec3 p )\n{\n    float c = 1.5;\n    p.xz = mod( p.xz + c, 2.*c ) - c;\n    \n    return minMat(\n        vec2( sdBox( p, vec3(1,.26,1) ), 0.0 ),\n        vec2( p.y + .25, 1.0 )\n    );\n}\n\nfloat calculateAO(vec3 p, vec3 n)\n{\n   const float AO_SAMPLES = 5.0;\n   float r = 0.0;\n   float w = 1.0;\n   for (float i=1.0; i<=AO_SAMPLES; i++)\n   {\n      float d0 = i * ( 1.0 / AO_SAMPLES );\n      r += w * (d0 - map(p + n * d0).x);\n      w *= 0.5;\n   }\n   return 1.0-clamp(r,0.0,1.0);\n}\n\nstruct March\n{\n    vec3 pos;\n    vec3 normal;\n    float dist;\n    float material;\n};\n    \nMarch marchWorld( vec3 ro, vec3 rd )\n{\n    vec2 dist;\n    float totalDist = 0.0;\n    vec3 p = ro;\n    int i;\n    for( i = 0; i < ITERATIONS; ++i )\n    {\n        dist = map( p );\n        totalDist += dist.x;\n        if( dist.x < EPS || totalDist > MAX_DIST ) break;\n        p += rd * dist.x;        \n    }\n    \n    vec3 normal;\n    \n    if( dist.x < EPS )\n    {\n        vec2 e = vec2( EPS, 0 );\n        normal = normalize( vec3(\n            map( p + e.xyy ).x - map( p - e.xyy ).x,\n            map( p + e.yxy ).x - map( p - e.yxy ).x,\n            map( p + e.yyx ).x - map( p - e.yyx ).x));\n    }\n    else\n    {\n        totalDist = -1.0;\n    }\n    \n    return March( p, normal, totalDist, dist.y );\n}\n\nvec3 lightTexture( vec2 uv )\n{\n    float l =  texture( iChannel1,    uv ).r\n        + .50 *texture( iChannel1, 2.*uv ).r\n        + .25 *texture( iChannel1, 4.*uv ).r\n        + .125*texture( iChannel1, 8.*uv ).r;\n        \n    return vec3(.3 + l*.25);\n}\n\nvec2 getLight( vec3 p, vec2 offset )\n{\n    ivec2 coord = ivec2( floor( p.xz / 3. - 1.5 ) + offset );\n    vec2 localP = mod( p.xz + 1.5, 3. ) - 1.5;\n    localP -= 3. * offset;\n    \n    coord += 512;\n    \n    bool on = texelFetch(  iChannel2, coord % 256, 0 ).r > .5;\n    \n    float distToLight = sdBox(vec3( localP, 0 ), vec3( 1, 1, 1 ));    \n    \n    if( on ) {\n    \tfloat x = 1.1 + distToLight;\n    \treturn vec2( 1, clamp( 1. / x / x, 0., 1. ));\n    }\n    return vec2( 0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy - vec2(.5 * iResolution.x / iResolution.y, .5);\n    \n    vec3 ro = vec3( 5. * iTime, 30. + cos(.2*iTime), -10. * iTime );\n    vec3 rd = normalize( vec3( uv, -1 ));\n    \n    mat2 pitch = rot( .5 + .1 * sin(.3*iTime) );\n    mat2 yaw = rot( -.2 + PI / 8. * -sin(.1*iTime) );\n\n    rd.yz *= pitch;\n    rd.xz *= yaw;\n    \n    fragColor = vec4(0);\n    \n    March m = marchWorld( ro, rd );\n    \n    if( m.dist >= 0.0 )\n    {\n        vec3 albedo;\n        \n        vec3 texU = normalize( cross( m.normal, vec3( .01, .01, 1 )));\n        vec3 texV = normalize( cross( texU, m.normal ));\n        vec2 texCoord = vec2(dot( m.pos, texU ), dot( m.pos, texV ));\n        \n        float ao = calculateAO( m.pos, m.normal );\n        ao = .3+.7*ao;\n        \n        vec2 localLight = getLight( m.pos, vec2( 0, 0 ));\n        float lightAmount = localLight.y;\n        \n        lightAmount += getLight( m.pos, vec2( -1, -1 )).y;\n        lightAmount += getLight( m.pos, vec2( -1,  0 )).y;\n        lightAmount += getLight( m.pos, vec2( -1,  1 )).y;\n        lightAmount += getLight( m.pos, vec2(  0, -1 )).y;\n        lightAmount += getLight( m.pos, vec2(  0,  1 )).y;\n        lightAmount += getLight( m.pos, vec2(  1, -1 )).y;\n        lightAmount += getLight( m.pos, vec2(  1,  0 )).y;\n        lightAmount += getLight( m.pos, vec2(  1,  1 )).y;\n        \n        if( m.material == 1.0 ) {\n            albedo = texture( iChannel0, texCoord ).rgb;\n        } else {\n            albedo = lightTexture( texCoord );\n            if (localLight.x > 0.5) {\n                albedo += vec3(1,0,0);\n            }\n        }\n        \n\t\tif (localLight.x > 0.5) {\n            ao = max(ao, lightAmount);\n        }\n\n        albedo += vec3(1,0,0) * lightAmount;        \n        fragColor += vec4( albedo, 0 ) * exp( -.015 * m.dist ) * ao;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iTime < .1 || iFrame % 2400 == 0 ) {\n        fragColor = vec4( texture( iChannel1, fragCoord / iResolution.xy ).r > .5 ? 1. : 0. );        \n        return;\n    }\n    \n    if (fragCoord.x > 255.5 || fragCoord.y > 255.5) {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    if (iFrame % 4 != 0) {\n        fragColor = texelFetch( iChannel0, ivec2( fragCoord ), 0 );\n        return;\n    }\n    \n    float thisCell;\n    \n    int neighbors = 0;\n    for( int i = -1; i <= 1; ++i )\n    for( int j = -1; j <= 1; ++j )\n    {\n        ivec2 lookup = ivec2( fragCoord ) + ivec2( i, j );\n        lookup = lookup % 256;\n        \n        float cell = texelFetch( iChannel0, lookup, 0 ).r;\n        \n        if( i == 0 && j == 0 ) \n            thisCell = cell;\n        else if( cell > .9 )\n            neighbors++;\n    }\n    \n    bool thisCellOn = thisCell > .9;\n    \n    if( thisCellOn && (neighbors < 2 || neighbors > 3) ) thisCellOn = false;\n    else if( !thisCellOn && neighbors == 3 ) thisCellOn = true;\n        \n    fragColor = vec4( thisCellOn ? 1. : 0. );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}