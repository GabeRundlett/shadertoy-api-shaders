{
    "Shader": {
        "info": {
            "date": "1713041527",
            "description": "Overlaying a series of spiral grids that decrease in size with each iteration. Lots of detail.\nMouse controls: x-axis controls severity, y-axis controls zoom.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xcy3zc",
            "likes": 6,
            "name": "Detailed spiral grid warp",
            "published": 3,
            "tags": [
                "grid",
                "swirl",
                "spiral",
                "warp",
                "iteration",
                "twist",
                "detailed"
            ],
            "usePreview": 1,
            "username": "milkfat",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "#define iR iResolution\n#define vR vec3(800,450,1)\n#define iM iMouse\n\n#define AA 2\n#define TIME iTime*25.\n#define INITIAL_SCALE 3.0\n#define SCALE_MULTIPLIER .35\n#define INITIAL_TWIST .1\n#define TWIST_MULTIPLIER -1.22\n#define ROTATE_GRID 4.0\n#define ITERATIONS 12\n//#define DEBUG_ITERATION 5\n\nfloat mix(int p)\n{\n    uint b = uint(p);\n\tb += 0x9e3779b9u;\n\tb ^= b >> 15;\n\tb *= 0x85ebca6bu;\n\tb ^= b >> 13;\n\tb *= 0xc2b2ae3du;\n\tb ^= b >> 16;\n\treturn fract(abs(float(b)/1000000.0));\n}\n\nfloat mix(float p)\n{\n    return mix(int(p));\n}\n\nvec2 rotate(vec2 coord, float a)\n{\n    return vec2(sin(a)*coord.y+cos(a)*coord.x,cos(a)*coord.y-sin(a)*coord.x);\n}\n\n\nvec2 swirl (vec2 coord, float spacing, float area, float amount)\n{\n    vec2 offset = vec2(0);\n    //float TIME = (1.0-iM.y/iR.y)*24.0+1.0;\n    //TIME*=iTime;\n    offset.x += TIME*(mix(amount*1000.0)-.5);\n    offset.y += TIME*(mix(amount*100000.0)-.5);\n    offset = offset/spacing;\n    offset = fract(offset);\n    offset *= spacing;\n    offset.y += 900.0;\n    offset.x += 900.0;\n    vec2 scoord = vec2(ivec2((coord+offset)/spacing))*spacing + spacing*.5;\n    coord += offset;\n    float l = length(coord-scoord);\n    if(l < area)\n    {\n    \n        float a = l/area;\n        a = 1.0 - a;\n        a *= a;\n    \n        float mx = iM.x;\n        if (iM.x < iResolution.x*.02) mx = iR.x/2.0 + iR.x*.2;\n        float m = mx/iR.x - .5;\n        m *= 100.0;\n    \n        coord -= scoord;\n        coord = rotate(coord, a*m*amount);\n        coord += scoord;    \n    } \n    \n    coord -= offset;  \n    return coord;\n    \n}\n\n\nvec4 get_color(vec2 coord)\n{\n    float scale = max(vR.x,vR.y)*INITIAL_SCALE;   \n    float amount = INITIAL_TWIST; \n    \n    for(float i = 0.0; i < float(ITERATIONS); i++)\n    {\n#ifdef DEBUG_ITERATION\n        if (i == float(DEBUG_ITERATION-1))\n#endif\n        coord = swirl(coord, scale, scale*.5, amount);\n        coord = rotate(coord, ROTATE_GRID);\n        scale *= SCALE_MULTIPLIER;\n        amount *= TWIST_MULTIPLIER;\n    }\n    \n    vec2 uv = coord/vR.xy;\n    return texture(iChannel0,uv*1.0,-2.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    float zoom = .25;\n    zoom=1.0-1.0/(.25+(iM.y/iR.y)*.75);\n    if (iM.x < iResolution.x*.02) zoom = 1.0;\n    vec2 c = fragCoord * zoom;\n    c += (iR.xy - zoom*iR.xy)*.5;\n    float cnt = 0.0;\n    for(int x = 0; x < AA; x++)\n    {\n        for(int y = 0; y < AA; y++)\n        {\n            vec2 coord = (c+vec2(float(x)*zoom/float(AA),float(y)*zoom/float(AA)))*(vR.xy/iR.xy);\n            fragColor += get_color(coord);\n            cnt++;\n        }\n    }\n    fragColor /= cnt;\n    if (iM.z > 0.0 && fragCoord.x < iR.x*.02) fragColor = fragColor*.75 + vec4(.25);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}