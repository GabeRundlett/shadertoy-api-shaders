{
    "Shader": {
        "info": {
            "date": "1523658938",
            "description": "This is the walking animation of the main character in my new Video:\n\n\"2 Minutes and 36 Pixels in the life of a graphic programmer\"\nwww.youtube.com/watch?v=BgF8_HwbNjA\n\nenjoy coding :)",
            "flags": 0,
            "hasliked": 0,
            "id": "4dGcWd",
            "likes": 7,
            "name": "hungry Caterpillar",
            "published": 3,
            "tags": [
                "2d",
                "simple",
                "bug",
                "caterpillar"
            ],
            "usePreview": 0,
            "username": "vapoi",
            "viewed": 543
        },
        "renderpass": [
            {
                "code": "const float fPi = 3.14159;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 pMid = vec2(-1.0, -2.0) + uv * vec2(6.0, 4.0);\n    \n    float fTime = iTime + 25.0;\n    \n\tvec2 pPixel = pMid * 100.0;\n\tvec2 pPixelRaw = pPixel;\n\t\n\tpPixel.y *= 1.0;\n\tvec2 dotPos;\n\tfloat fNearestDot = 100.0;\n    \n    float animCycle = fract(fTime * 0.333);\n    float animCycles = floor(fTime * 0.333);\n    animCycles -= floor(animCycles / 21.0) * 21.0;\n    animCycles -= 5.0;\n    \n\tfloat moveStep01 = 0.5 * (1.0 + cos(fPi + fPi * smoothstep(0.3, 1.0, animCycle)));\n\tfloat moveStep = 0.85 * max(0.0, sin(fPi * moveStep01));\n    pPixel.x -= moveStep01 * 39.0 + animCycles * 39.0;\n    \n\t// Standard-Bend + idle-Animation + extra value while walking (=more dynamic walking animation)\n\tfloat fBreath = 0.25 + 0.065 * sin(fTime * 1.0 + 2.5 * sign(moveStep01));\n\t\n\tfloat fDot01 = 0.0;\n\t\n\tfloat fHair = 0.0;\n\tfloat fAllHairs = 0.0;\n\tfloat sinStep = 0.0;\n\t\n\tfloat hairBend = 0.0;\n\t\n\tfloat rotateAlpha = 0.6;\n\tfloat weightedAlpha = 0.0;\n\t\n\tvec2 dotPixel;\n\tvec2 v2Step;\n\t\n\t\n\tfor (int i = 0; i < 8; i++)\n\t{\n\n\t\tfDot01 = float(i) / 7.0;\n\t\t\n\t\t\n\t\tdotPos = vec2(-80.0 + float(i) * 20.0, 0.0);\n\t\t\n\t\t\n\t\t// MoveStep Main Curve\n\t\t//sinStep = 60.0 * (fBreath + moveStep) * cos(-fPi * 0.5 + (i - 0.24) * 0.45) \n\t\t//\t\t + 9.0 * (fBreath * 1.5 + moveStep) * cos(i * 0.5 + moveStep * 1.3);\n\t\tsinStep = 60.0 * (fBreath + moveStep) * cos(-fPi * 0.5 + (fDot01 - 0.03) * fPi) \n\t\t\t\t + 9.0 * (fBreath * 1.5 + moveStep) * cos(fDot01 * 3.5 + moveStep * 1.3);\n\t\tv2Step = vec2(0.0, sinStep);\n\t\t// MoveStep delayed front-up\n\t\tv2Step += vec2(7.0, 14.0) * sin(fPi * smoothstep(0.4, 1.0, moveStep01)) * sin(max(0.0, 0.5 * fPi - (1.0 - fDot01) * 5.0));\n\t\tv2Step += vec2(6.0, 15.0) * sin(fPi * smoothstep(0.4, 1.0, 1.0 - moveStep01)) * sin(max(0.0, 0.5 * fPi - fDot01 * 4.0));\n\t\t// MoveStep, Contraction\n\t\tdotPos += v2Step;\n\t\tdotPos.x *= 1.0 - 0.3 * moveStep;\n\t\t\n\t\tdotPixel = pPixel - dotPos;\n\t\t\n\t\t\n\t\t\n\t\t// Haare\n\t\thairBend = moveStep * 1.30 * (-fDot01 + 0.5);\n\t\tfHair = 1.0 * (max(0.0, -abs(dotPixel.x + hairBend * dotPixel.y) + 5.0) / 4.5) *\n\t\t\t\t(max(0.0, -abs(dotPixel.y - 16.0) + 13.0) / 10.0);\n\t\t\t\t//(clamp((50.0 - max(-10.0, dotPixel.y)) * 0.05, 0.0, 1.0) ) * sign(max(0.0, dotPixel.y));\n\t\t\t\t\n\t\tfAllHairs = max(fAllHairs, min(1.0, fHair));\n\t\t\n\t\t// Leg\n\t\tdotPixel += vec2(0.0, max(0.0, -abs(dotPixel.x) + 6.5) * ( clamp(-dotPixel.y - 6.0, 1.00, 4.0)) * 0.250);\n\t\t\n\t\tfNearestDot = min(fNearestDot, length(dotPixel));\n\t}\n\t\n\tfloat fSkin = smoothstep(-25.0, -7.0, -fNearestDot);\n\tfloat fInnen = smoothstep(-13.0, -2.0, -fNearestDot);\n\t\n\tvec3 colSkin = vec3(0.25, 0.6, 0.1);\n\tvec3 colInnen = vec3(1.0);\n\tvec3 colHair = vec3(0.6, 0.2, 0.05);\n\tvec3 colFin = mix(colSkin - vec3(0.5) * smoothstep(-4.5, 0.20, -fNearestDot), colHair, fAllHairs) + colInnen * 0.3 * fInnen;\n\t\n\tfloat fValue = max(fAllHairs, fSkin);\n    \n    vec3 colLine = vec3(0.5) * smoothstep(-0.05, 0.0, -abs(pMid.y + 0.25));\n\tfragColor = vec4(colLine + colFin * fValue, 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}