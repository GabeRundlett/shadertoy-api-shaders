{
    "Shader": {
        "info": {
            "date": "1448279818",
            "description": "sea",
            "flags": 0,
            "hasliked": 0,
            "id": "4sc3RN",
            "likes": 1,
            "name": "Sea01",
            "published": 3,
            "tags": [
                "sea"
            ],
            "usePreview": 0,
            "username": "H3LLbot",
            "viewed": 689
        },
        "renderpass": [
            {
                "code": "float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat distanceTo(float x, float y, float centerX, float centerY) {\n\tfloat deltaX = x - centerX;\n    float deltaY = y - centerY;\n    return sqrt(deltaX * deltaX + deltaY * deltaY);\n}\n\nvoid mainImage( out vec4 color, in vec2 pixCoords )\n{\n    float zoom = (iResolution.x / 10.0);// * (1.0 + 0.2 * cos(2.0 * iTime));\n    float cameraX = 5.0;  // + 4.0 * cos(iTime);\n    float cameraY = 2.0; // + 4.0 * sin(iTime * 1.1);\n    \n    float x = (pixCoords.x / zoom) - cameraX;\n    float y = (pixCoords.y / zoom) - cameraY;\n\n\n    \n    float PI = 3.1415;\n    float hauteurMoyenne = cos(iTime)+0.5;\n    float amplitude = .2;\n    float phase = iTime * 1.5;\n    float periode = cos(iTime)+7.0;\n    \n    \n    float fx = hauteurMoyenne + cos(x * 2.0 * PI/ periode + phase) * amplitude;\n    \n    if (y < fx) {\n        color = vec4(0.0, 0.0, 1.0, 1.0);\n        return;\n    }\n    \n    float fx2 = (hauteurMoyenne*1.2) + cos(0.5 * (x + iTime)) * 0.3;\n    \n    if (y < fx2) {\n        color = vec4(0.6, 0.6, 1.0, 1.0);\n        return;\n    }\n\t\n\n    color = vec4(0.0,0.0,0.3,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}