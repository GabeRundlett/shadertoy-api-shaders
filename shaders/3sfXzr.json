{
    "Shader": {
        "info": {
            "date": "1551237062",
            "description": "A sword in a stone. Fake volumetric lighting implemented using a technique found in this shader: https://www.shadertoy.com/view/MdG3RD",
            "flags": 96,
            "hasliked": 0,
            "id": "3sfXzr",
            "likes": 1,
            "name": "Sword in the Stone",
            "published": 3,
            "tags": [
                "raymarching",
                "sword"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "#define DECAY .986\n#define EXPOSURE .1\n#define DENSITY .926\n#define WEIGHT .9\n#define SAMPLES 128\n\nvoid mainImage(out vec4 f, vec2 g)\n{\n    \n    vec2 uv = g.xy/iResolution.xy;\n    \n    vec4 f1=texture(iChannel0,uv);\n    vec4 f2=texture(iChannel1,uv);\n    \n    float rh = sin(iTime*.5)/2.+.5;\n    vec3 lightPos = vec3(-.3-sin(iTime*.1)*.12,-.5+sin(iTime*.1)*-.1,1);//,cos(iTime*.9)*1.);\n    vec3 triPos = vec3(clamp(uv.x-.5,-.01,.01),.01,0)*rh;//0.03,0.01);\n    \n    vec2 tc = uv;\n    vec2 bc = uv;\n    vec2 deltatc = tc;\n    vec2 deltabc;\n    \n    deltatc = lightPos.xy;\n    deltatc *=1.0/float(SAMPLES)*DENSITY;\n    \n    deltabc= triPos.xy;\n    deltabc *= 1.0/float(SAMPLES)*DENSITY;\n    \n    float illumdecay = 1.0;\n    vec4 c = texture(iChannel0,tc)*.3;\n    vec4 cb = texture(iChannel1,bc);\n    \n    tc+=deltatc*fract(sin(dot(uv.xy+fract(iTime),vec2(23.31,832.123)))*123.31245);\n    bc+=deltabc*fract(sin(dot(uv.xy+fract(iTime),vec2(23.31,832.123)))*123.31245);\n    \n    for(int i=0;i<SAMPLES;i++){\n        tc-=deltatc;\n        bc-=deltabc;\n        \n        vec4 smp = texture(iChannel0,tc)*.3;\n        vec4 smp2 = texture(iChannel1,bc);\n        \n        smp*=illumdecay*WEIGHT;\n        smp2*=illumdecay*WEIGHT;\n        \n        c+=smp*1.2;\n        cb+=smp2*1.2;\n        illumdecay*=DECAY;\n    }\n    f=f1*1.5+(cb*EXPOSURE)*(.05)*rh+(c*EXPOSURE)*(uv.y-.06);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 17987,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/astronauthusband/zeldas-lullaby"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SURF_DIST 0.0001\n#define MAX_STEPS 128\n#define AA 2\n\nint mat;\n\nvec2 rotate(vec2 a, float d){\n    float s  = sin(d);\n    float c = cos(d);\n    \n    return vec2(\n        a.x*c-a.y*s,\n        a.x*s+a.y*c);\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\nfloat stmin (float a, float b, float k , float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b), 0.5 * (u+a+abs(mod(u-a+st, 2.*st)-st)));\n}\n\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sdSphere(vec3 p, float r){\n    return length(p)-r;\n}\n\nfloat sdBox(vec3 p, vec3 b){\n    \n    vec3 d = abs(p)-b;\n    \n    return max(max(d.x,d.y),d.z);\n    \n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n\nfloat sdOctahedron( in vec3 p, in float s)\n{\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdSword(vec3 p){\n       \n    float d = 1e10;\n    float point = clamp(2.-abs(p.x*3.2),0.,1.);\n    float guard = sdBox(p,vec3(.5,.075*point,.075*point));\n    \n    d = min(d,guard);\n    \n    vec3 handleP = vec3(.07,.5,.09);\n    float handle = sdVerticalCapsule(p+vec3(0,-handleP.y/5.,0),handleP.y,handleP.x);\n    \n    d=min(d,handle);\n    \n    float hd = sdOctahedron(p-vec3(0,.7,0.),.24+sin(p.y*0.2*90.)*.06);\n    \n    d=min(d,hd);\n    \n    vec3 bp = p+vec3(0,.9,-.01);\n    bp.zy = rotate(bp.zy,1.57);\n    bp.xy = rotate(bp.xy,3.25);\n    float blade = sdTriPrism(vec3(bp.x/6.,bp.yz),vec2(.03,.9));\n\n    d=min(d,blade);\n    \n    if(d==blade)\n        mat=2;\n    else if(d==handle||d==guard)\n        mat=3;\n    else if(d==hd)\n        mat=3;\n    \n    return d;\n    \n}\n\nvec3 lightPos;\nvec3 np;\n\nfloat map(vec3 p){\n    float d = 1e10;\n   \n    lightPos = p-vec3(6.+1.*sin(iTime*.1),3.5,3.5);\n    \n    float sword = sdSword(p);\n\n    d=min(d,sword);\n    \n    \n    \n    vec3 bp = p+vec3(0,1.5,0);\n    bp.zy = rotate(bp.zy,1.56);\n    \n    float mount = sdBox(p+vec3(0,1.25,0),vec3(0.5,0.2,0.25));\n    float base = sdHexPrism(bp,vec2(2.,.2));\n    float b2 = sdHexPrism(bp,vec2(1.8,.19));\n    \n    d=min(d,b2);\n                          \n    \n    float stone=stmin(base,mount,.2,3.);\n    \n    vec3 tp=p+vec3(0,1.23,1);\n    vec3 tp2 = p+vec3(.173,1.23,1.3);\n    vec3 tp3 = p+vec3(-0.173,1.23,1.3);\n    tp3.zy=rotate(tp3.zy,1.57);\n    tp2.zy=rotate(tp2.zy,1.57);\n    tp.zy=rotate(tp.zy,1.57);\n    \n    float tri=sdTriPrism(tp,vec2(.2,.1));\n    float tri2 = sdTriPrism(tp2,vec2(.2,.1));\n    float tri3 = sdTriPrism(tp3,vec2(.2,.1));\n    \n    float tris = min(tri,min(tri2,tri3));\n    \n    stone=max(stone,-tris);\n    \n    d=min(d,stone);\n    \n    \n  \n    //assigning our material based on our distance value\n    if(d==stone){\n        \n     \tmat=1;   \n    }if(d==b2)mat=4;\n    \n    return d;\n}\n\n\nvec3 calcNormal(vec3 p){\n    \n    vec2 e =vec2(.01,0.);\n    \n    return normalize(vec3(map(p+e.xyy)-map(p-e.xyy),\n                          map(p+e.yxy)-map(p-e.yxy),\n                          map(p+e.yyx)-map(p-e.yyx)));\n    \n}\n\nvec4 trace(in vec3 ro, in vec3 rd){\n    float t = 0.;\n    vec3 col = vec3(clamp(rd.y+.5,.2,.8));\n    float k = 0.;\n    \n    for(int i=0;i<MAX_STEPS;++i){\n        k=map(ro+rd*t);\n        t+=k*.5;\n        if(k<SURF_DIST){\n            vec3 normal = calcNormal(ro+rd*t);\n            float light = dot(normal,normalize(vec3(5.+1.*sin(iTime*.1),3.5,3)));\n            \n            if(mat==1)\n                col = vec3(0.9);\n            else if(mat==2)\n                col=vec3(1.);\n            else if(mat==3)\n                col=vec3(0.5);\n            else if(mat==4)\n                col=mix(vec3(.6),vec3(1.,1.,0.7)*2.,(sin(iTime*.5)/2.+.5));\n\n                \n\t\t\t\n            if(mat!=4)\n            \tcol*=light;//calcAO(ro+rd*t,normal);\n                \n\t\t\tbreak;\n        }\n    }\n    \n    \n    return vec4(t,col);\n    \n}\n\nvec3 aCol;\n\nfloat traceShad(in vec3 ro, in vec3 rd, float tmax){\n    float t = 0.;\n    float res = 1.0;\n    float k = 0.;\n    float ph = 1e10;\n    aCol=vec3(0.);\n    \n    for(int i=0;i<64;++i){\n        k=map(ro+rd*t);\n        \n       \tfloat td = min(.25,k);\n\n        float y = k*k/(2.0*ph);\n        float d = sqrt(k*k-y*y);\n        res = min( res, 10.0*d/max(0.0,t-y) );\n        ph = k;\n        t+=td*.25;\n        if(res<0.001||t>tmax){\n           \t\n\t\t\tbreak;\n        }\n    }\n    return clamp( t, 0.0, 1.0 );    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    for(int ii=0;ii<AA;ii++){\n        for(int jj=0;jj<AA;jj++){\n            vec2 offs = vec2(float(ii),float(jj))/float(AA);\n            vec2 uv = ((fragCoord+offs)-.5*iResolution.xy)/iResolution.y;\n\n            vec3 cam = vec3(0,.5,-5);\n            vec3 dir = normalize(vec3(uv,.9));\n\n            float t = iTime*.1;\n\n            cam.xz = rotate(cam.xz,sin(t)*.5);\n            dir.xz = rotate(dir.xz, sin(t)*.5);\n            dir.zy = rotate(dir.zy,-.1);\n\n\n            vec4 d =trace(cam,dir);\n\n            vec3 p = cam+dir*d.x;\n\n            vec3 n =calcNormal(p);\n\n            vec3 col = vec3(0.);\n\n            vec3 ld = p-lightPos;\n            float sC = traceShad(p,ld,6.);\n            \n            \n            float len = length(ld);\n            ld/=len;\n            \n            float atten=min(1.0/(.25*len*len),1.0);\n            \n            vec3 ref = reflect(-ld,n);\n            \n            float specPow=16.;\n            float spec = max(0.0,dot(ref,normalize(cam-p)));\n            spec=pow(spec,specPow);\n            \n            \n            col=sC/2.*d.yzw+spec*2.*atten;;\n                             \n\t\t\ttot+=col;\n        }\n    }\n    tot/=float(AA*AA);\n    \n    fragColor = vec4(tot,lightPos.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SURF_DIST 0.001\n#define MAX_STEPS 64\n\nint mat;\n\nvec2 rotate(vec2 a, float d){\n    float s  = sin(d);\n    float c = cos(d);\n    \n    return vec2(\n        a.x*c-a.y*s,\n        a.x*s+a.y*c);\n}\n\n\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec3 lightPos;\nvec3 np;\n\nfloat map(vec3 p){\n    float d = 1e10;\n   \n    lightPos = p-vec3(6.+1.*sin(iTime*.1),3.5,3.5);\n    \n\n    vec3 bp = p+vec3(0,1.5,0);\n    bp.zy = rotate(bp.zy,1.56);\n    \n    float stone = sdHexPrism(bp,vec2(2.,.2));\n\n    vec3 tp=p+vec3(0,1.23,1);\n    vec3 tp2 = p+vec3(.173,1.23,1.3);\n    vec3 tp3 = p+vec3(-0.173,1.23,1.3);\n    tp3.zy=rotate(tp3.zy,1.57);\n    tp2.zy=rotate(tp2.zy,1.57);\n    tp.zy=rotate(tp.zy,1.57);\n    \n    float tri=sdTriPrism(tp,vec2(.2,.1));\n    float tri2 = sdTriPrism(tp2,vec2(.2,.1));\n    float tri3 = sdTriPrism(tp3,vec2(.2,.1));\n    \n    float tris = min(tri,min(tri2,tri3));\n    \n    stone=max(stone,tris);\n    \n    d=min(d,stone);\n    \n    \n  \tmat=4;\n    \n    return d;\n}\n\n\nvec3 calcNormal(vec3 p){\n    \n    vec2 e =vec2(.01,0.);\n    \n    return normalize(vec3(map(p+e.xyy)-map(p-e.xyy),\n                          map(p+e.yxy)-map(p-e.yxy),\n                          map(p+e.yyx)-map(p-e.yyx)));\n    \n}\n\nvec3 triMat;\nfloat mixAmt;\nvec4 trace(in vec3 ro, in vec3 rd){\n    float t = 0.;\n    vec3 col = vec3(0.);//clamp(rd.y+.5,.2,.8));\n    float k = 0.;\n    \n    for(int i=0;i<MAX_STEPS;++i){\n        k=map(ro+rd*t);\n        t+=k*.5;\n        if(k<SURF_DIST){\n            vec3 normal = calcNormal(ro+rd*t);\n            float light = dot(normal,normalize(vec3(5.+1.*sin(iTime*.1),3.5,3)));\n            mixAmt=(sin(iTime*.5)/2.+.5);\n            triMat=mix(vec3(.6),vec3(1.,1.,0.7)*2.,mixAmt);\n            \n            if(mat==1)\n                col = vec3(0.9);\n            else if(mat==2)\n                col=vec3(1.);\n            else if(mat==3)\n                col=vec3(0.5);\n            else if(mat==4)\n                col=triMat;\n\n                \n\t\t\t\n            if(mat!=4)\n            \tcol*=light;//calcAO(ro+rd*t,normal);\n                \n\t\t\tbreak;\n        }\n    }\n    \n    \n    return vec4(t,col);\n    \n}\n\nfloat traceShad(in vec3 ro, in vec3 rd, float tmax){\n    float t = 0.;\n    float res = 1.0;\n    float k = 0.;\n    float ph = 1e10;\n    \n    for(int i=0;i<64;++i){\n        k=map(ro+rd*t);\n        \n       \tfloat td = min(.25,k);\n\n        float y = k*k/(2.0*ph);\n        float d = sqrt(k*k-y*y);\n        res = min( res, 10.0*d/max(0.0,t-y) );\n        ph = k;\n        t+=td*.25;\n        if(res<0.001||t>tmax){\n           \t\n\t\t\tbreak;\n        }\n    }\n    return clamp( t, 0.0, 1.0 );    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 cam = vec3(0,.5,-5);\n    vec3 dir = normalize(vec3(uv,.9));\n\n    float t = iTime*.1;\n\n    cam.xz = rotate(cam.xz,sin(t)*.5);\n    dir.xz = rotate(dir.xz, sin(t)*.5);\n    dir.zy = rotate(dir.zy,-.1);\n\n\n    vec4 d =trace(cam,dir);\n\n    vec3 p = cam+dir*d.x;\n\n    vec3 n =calcNormal(p);\n\n    vec3 col = vec3(0.);\n\n    float sC = traceShad(p,-lightPos,6.);\n\n    col=sC/2.*d.yzw;\n\n\n\n    fragColor = vec4(col,mixAmt);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}