{
    "Shader": {
        "info": {
            "date": "1726074389",
            "description": "This GLSL shader implements a zoom effect that focuses on a specific region of a texture based on user interaction. The shape of the zoom area can be configured to be a sphere, rectangle, or ellipse.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4XfcDH",
            "likes": 0,
            "name": "Scope Zoom Effect",
            "published": 3,
            "tags": [
                "zoomscopeeffect"
            ],
            "usePreview": 0,
            "username": "anthonyliot",
            "viewed": 78
        },
        "renderpass": [
            {
                "code": "\n#define SPHERE 0\n#define RECTANGLE 1\n#define ELLIPSE 2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    int zoomShape = ELLIPSE;\n    float zoomFactor = 2.0f;\n    float smoothness = 0.5;\n    vec2 radius = vec2(0.2, 0.15);\n    \n    vec2 center = iMouse.xy / iResolution.xy;      \n               \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Get the aspect ratio of the image (width / height)\n    float aspectRatio = iResolution.x / iResolution.y;\n\n    // Correct for aspect ratio in distance calculation (to preserve circular shape)\n    vec2 aspectCorrectedCenter = vec2(center.x, center.y / aspectRatio);\n    vec2 aspectCorrectedUV = vec2(uv.x, uv.y / aspectRatio);\n\n    float dist;\n\n    // Distance calculation based on shape\n    if (zoomShape == SPHERE) {\n        float averageRadius = (radius.x + radius.y) / 2.0;\n        dist = distance(aspectCorrectedUV, aspectCorrectedCenter) / averageRadius;\n    } else if (zoomShape == RECTANGLE) {\n        vec2 aspectCorrectedRadius = vec2(radius.x, radius.y * aspectRatio);\n        vec2 delta = abs(uv - center) / aspectCorrectedRadius;\n        dist = max(delta.x, delta.y); \n    } else if (zoomShape == ELLIPSE) {\n        vec2 delta = (uv - center) / radius;\n        dist = length(delta); \n    }\n\n    \n    float interpolation;\n\n    // Handle abrupt or smooth transition based on smoothness\n    if (smoothness > 0.0) {\n        // Compute interpolation with smooth transition\n        interpolation = smoothstep(1.0, 1.0 - smoothness, dist);\n    } else {\n        // Abrupt transition: apply zoom fully within the area where dist <= 1.0\n        interpolation = (dist <= 1.0) ? 1.0 : 0.0;\n    }\n\n    // Calculate zoomed texture coordinates\n    // If dist > 1, we are outside the zoom area, so no zoom\n    vec2 zoomedCoords = (dist > 1.0) ? uv : center + (uv - center) * mix(1.0, 1.0 / zoomFactor, interpolation);\n\n    // Sample the texture with zoomed coordinates\n    vec3 color = texture(iChannel0, zoomedCoords).rgb;\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}