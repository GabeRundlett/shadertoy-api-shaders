{
    "Shader": {
        "info": {
            "date": "1616822591",
            "description": "Ray-Marching in 4D projected onto a virtual Volumetric Display.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sSGzz",
            "likes": 4,
            "name": "4-Dimensional Ray-Marching",
            "published": 3,
            "tags": [
                "raymarching",
                "raymarch",
                "raymarched",
                "volumetric",
                "raymarcher",
                "4d",
                "4dimensional"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 405
        },
        "renderpass": [
            {
                "code": "// ####### 4-Dimensional Ray-Marching #######\n// Made by Jacob Bingham (Zi7ar21) on March 26th, 2021\n// Last Updated: March 26th, 2021 at 23:30 Mountain Standard Time\n\n// If you found this anywhere except Shadertoy, the\n// original (and possibly updated version) can be found at:\n// https://www.shadertoy.com/view/7sSGzz\n\n// ##### CONSTANTS #####\n// Octuple Precision, even though Shadertoy is Full Precision (32-Bit Floating Point)\n#define pi 3.1415926535897932384626433832795028841971693993751058209749445923078164\n#define twopi pi*2.0\n\n// ##### PARAMETERS #####\n#define mousesensitivity 4.0\n#define gamma 2.2\n\n// 3D Parameters\n#define camfov 1.0\n#define maxmarches 32\n#define maxdist 4.0\n#define stepsize 0.125\n\n// 4D Parameters\n#define camfov4D 1.0\n#define campos4D vec4(0.0, 0.0, 0.0, (sin(iTime*pi*(1.0/3.0)))-1.0)\n#define maxmarches4D 32\n#define maxdist4D 4.0\n#define collisiondist 0.125\n\n// ##### RNG #####\n// RNG Utilities from Michael0884: https://www.shadertoy.com/user/michael0884\n// https://www.shadertoy.com/view/wltcRS\nuint ns;\n#define INIT_RNG ns = 185730U*uint(iFrame)+uint(fragCoord.x+fragCoord.y*iResolution.x);\nvoid pcg(){\n    uint state = ns*747796405U+2891336453U;\n    uint word = ((state>>((state>>28U)+4U))^state)*277803737U;\n    ns = (word>>22U)^word;\n}\n\nfloat rand(){pcg(); return float(ns)/float(0xffffffffU);}\nvec2 rand2(){return vec2(rand(), rand());}\nvec3 rand3(){return vec3(rand(), rand(), rand());}\nvec4 rand4(){return vec4(rand(), rand(), rand(), rand());}\n\n// Normalized Random: https://www.shadertoy.com/view/WttyWX\nvec2 nrand2(float sigma, vec2 mean){vec2 Z = rand2(); return mean+sigma*sqrt(-2.0*log(Z.x   ))*vec2(cos(twopi*Z.y), sin(twopi*Z.y));}\n//vec3 nrand3(float sigma, vec3 mean){vec4 Z = rand4(); return mean+sigma*sqrt(-2.0*log(Z.xxy ))*vec3(cos(twopi*Z.z), sin(twopi*Z.z), cos(twopi*Z.w));}\n//vec4 nrand4(float sigma, vec4 mean){vec4 Z = rand4(); return mean+sigma*sqrt(-2.0*log(Z.xxyy))*vec4(cos(twopi*Z.z), sin(twopi*Z.z), cos(twopi*Z.w), sin(twopi*Z.w));}\n\n// Hash from Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nvec4 hash41(float p){\n\tvec4 p4 = fract(vec4(p)*vec4(0.1031, 0.1030, 0.0973, 0.1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n// ##### 4D DISTANCE ESTIMATORS #####\n// Hypersphere Distance Estimator\nfloat hypersphere(vec4 raypos, vec4 sphpos, float sphrad){\n    return length(raypos-sphpos)-sphrad;\n}\n\n// Multiple Hyperspheres Distance Estimator\nfloat hyperspheres(vec4 raypos){\n    // Set-Up Variables\n    float sphere, minimum;\n\n    // Main Distance Estimator Loop\n    for(int i = 0; i < 8; i++){\n        // Compute the distance to a random hypersphere\n        sphere = hypersphere(raypos, normalize(hash41(float(i))-0.5), 0.125);\n\n        // The first sphere is the minimum of the first iteration\n        if(i == 0){minimum = sphere;}\n\n        // Find the closest sphere\n        minimum = min(sphere, minimum);\n    }\n    \n    // Return the distance to the closest sphere\n    return minimum;\n}\n\n// ##### ROTATION MATRICIES #####\n// The 4D Rotation Matrix was also made by Michael0884\n// aOb Plane Rotation\nmat4 rotplane(int a, int b, float angle){\n    mat4 rot = mat4(1.0);\n    float s = sin(angle), c = cos(angle);\n    rot[a][a] = c; rot[a][b] =-s;\n    rot[b][a] = s; rot[b][b] = c;\n    return rot;\n}\n\n// Rotation Matrix\nmat4 rotmat4D(vec4 rotation){\n    return rotplane(0, 1, rotation.x)*rotplane(1, 2, rotation.y)*rotplane(2, 3, rotation.z)*rotplane(3, 0, rotation.w);\n}\n\n// Rotation Matrix from LoicVDB\nmat3 rotmat(vec3 rotation){\n    // Precalculate the Trig Functions\n    vec3 s = sin(rotation), c = cos(rotation);\n\n    // X Rotation\n    mat3 rx = mat3(\n    1.0, 0.0, 0.0,\n    0.0, c.x,-s.x,\n    0.0, s.x, c.x);\n\n    // Y Rotation\n    mat3 ry = mat3(\n    c.y, 0.0,-s.y,\n    0.0, 1.0, 0.0,\n    s.y, 0.0, c.y);\n\n    // Z Rotation\n    mat3 rz = mat3(\n    c.z,-s.z, 0.0,\n    s.z, c.z, 0.0,\n    0.0, 0.0, 1.0);\n\n    // Output the Final Matrix\n    return rx*ry*rz;\n}\n\n// ##### RENDERING #####\n// 4D Ray-Marching\nvec3 raymarch4D(vec4 raydir, vec4 rayori){\n    // Put our Ray at the Camera Position\n    vec4 raypos = rayori;\n\n    // Initialize our Distance Estimator Variable\n    float distest;\n\n    // The Main Ray-Marching Loop\n    for(int i = 0; i < maxmarches4D; i++){\n        // Check if our Ray escaped the scene\n        if(length(raypos-rayori) > maxdist4D){break;}\n\n        // Find the distance from our Ray to our scene\n        distest = hyperspheres(raypos);\n\n        // Check if our Ray collided with the scene\n        if(distest < collisiondist){return vec3(1.0);}\n\n        // March our Ray\n        raypos += raydir*distest;\n    }\n\n    // If our Ray hit nothing, retuurn the Background Color\n    return vec3(0.0);\n}\n\n// 3D Screen Output Image\nvec3 mainImage4D(vec3 uv){\n    // Calculate the Direction of the Ray\n    mat4 rotmat = rotmat4D(vec4(0.0, 0.0, 0.0, 0.0));\n\n    // Render the Image\n    vec4 raydir = normalize(camfov4D*(uv.x*rotmat[0]+uv.y*rotmat[1]+uv.z*rotmat[2])+rotmat[3]);\n\n    // Output the Image to the Volumetric Display\n    vec3 color = raymarch4D(raydir, campos4D);\n    return color;\n}\n\n// 3D Raymarching\nvec3 raymarch(vec3 raydir, vec3 rayori){\n    // Put our Ray at the Camera Position\n    vec3 raypos = rayori+(raydir*rand()*stepsize);\n\n    // Initialize our Density Variable\n    vec3 density = vec3(0.0);\n\n    // The Main Ray-Marching Loop\n    for(int i = 0; i < maxmarches; i++){\n        // Check if our Ray escaped the scene\n        if(length(raypos-rayori) > maxdist){break;}\n\n        // Find the Volumetric Display's Color\n        density += mainImage4D(raypos);\n\n        // March our Ray\n        raypos  += raydir*stepsize;\n    }\n\n    // Return the total density\n    return density*0.125;\n}\n\n// Render the Image\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Initialize RNG\n    INIT_RNG;\n\n    // Set up Screen UV Coordinates\n    vec2 uv = 2.0*(nrand2(0.5, fragCoord.xy)-0.5*iResolution.xy)/max(iResolution.x, iResolution.y);\n\n    // Mouse Controls\n    vec2 mouse = vec2(iTime*pi*0.25, 0.0);\n    //vec2 mouse = vec2(0.0, 0.0);\n    #ifdef mousesensitivity\n    if(iMouse.z > 0.0){mouse = mousesensitivity*(iMouse.xy-0.5*iResolution.xy)/max(iResolution.x, iResolution.y);}\n    #endif\n\n    // Calculate the Direction of the Ray\n    mat3 rotmatrix = rotmat(vec3(0.0, mouse.x, 0.0));\n    vec3 raydir = normalize(camfov*(uv.x*rotmatrix[0]+uv.y*rotmatrix[1])+rotmatrix[2]);\n\n    // Render the Image\n    vec3 color = raymarch(raydir, vec3(-sin(mouse.x)*2.0, 0.0, -cos(mouse.x)*2.0));\n\n    // Tonemap HDR\n    color = pow(color/(1.0+color), vec3(1.0/gamma));\n\n    // Output the Image to the Screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}