{
    "Shader": {
        "info": {
            "date": "1720952355",
            "description": "[Space] Drawing\n[C] Clear\nAnd try [ShowAllFrame] or [Debugsteptime=30]",
            "flags": 48,
            "hasliked": 0,
            "id": "lcfcR7",
            "likes": 4,
            "name": "SDF,Drawing",
            "published": 3,
            "tags": [
                "sdf",
                "drawing"
            ],
            "usePreview": 0,
            "username": "vec2",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "\nfloat sdmap( in vec2 p) \n{\n#if ShowAllFrame\nfloat D = sqrt(texelFetch(iChannel1,ivec2(p),0).z);\n#else\nfloat D = (texelFetch(iChannel1,ivec2(p),0).w);\n#endif\n    return D==0.0?-0.0:D;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 iMouse=iMouse;\n    if (iMouse.xy == vec2(0.0)) \n    {\n        float t = iTime * 0.2;\n        iMouse.xy = vec2(\n            cos(3.14159 * t) + sin(0.72834 * t + 0.3),\n            sin(2.781374 * t + 3.47912) + cos(t)\n        ) * 0.25 + 0.5;\n        iMouse.xy *= iResolution.xy;\n        iMouse.z =1.0;\n    }\n\n    const float S=0.005;\n\tvec2 p = (2.0*fragCoord-iResolution.xy)*S;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)*S;\n\n\tfloat d =sdmap(fragCoord)*S;\n    \n\t// coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( texelFetch(iChannel2,ivec2(32,0),0).x<0.5&&texelFetch(iChannel2,ivec2(67,0),0).x<0.5)\n    {\n    d =sdmap(iMouse.xy)*2.0*S;\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid Draw(out vec4 C,const vec2 D,vec4 Mouse,vec4 Color,float size)\n{\n    \n    if(length(Mouse.xy-D.xy)<size&&Mouse.z>0.0)\n    {      \n        C=Color;\n    }\n\n\n}\n\nvoid mainImage( out vec4 C, in vec2 D )\n{\nC=texelFetch(iChannel0,ivec2(D),0);\n    vec4 Mouse=iMouse;\nvec4 Color;\nfloat size=DrawingSize;\n\n        if(texelFetch(iChannel1,ivec2(32,0),0).x>0.5)Color = vec4(1.0,0.0,0.0,0.0);//space\n        //if(texelFetch(iChannel1,ivec2(82,0),0).x>0.5)Color = vec4(1.0,0.0,0.0,0.0);//r\n        //else if(texelFetch(iChannel1,ivec2(71,0),0).x>0.5)Color = vec4(0.0,1.0,0.0,0.0);//g\n        //else if(texelFetch(iChannel1,ivec2(66,0),0).x>0.5)Color = vec4(0.0,0.0,1.0,0.0);//b\n        //else if(texelFetch(iChannel1,ivec2(65,0),0).x>0.5)Color = vec4(0.0,0.0,0.0,1.0);//a\n        else if(texelFetch(iChannel1,ivec2(67,0),0).x>0.5){Color = vec4(0.0,0.0,0.0,0.0);size*=2.0;}//c\n        else Mouse.z=-1.0;\n\n\n    if (iMouse.xy == vec2(0.0)) \n    {\n        float t = iTime * 3.0;\n        Mouse.xy = vec2(\n            cos(3.14159 * t) + sin(0.72834 * t + 0.3),\n            sin(2.781374 * t + 3.47912) + cos(t)\n        ) * 0.25 + 0.5;\n        Mouse.xy *= iResolution.xy;\n        Mouse.z =1.0;\n        Color=vec4(float( int(iTime*5.0)&1) );\n        size=(cos(iTime*0.1)+2.0)*30.0/(Color.x+1.0);\n        \n        C=texture(iChannel2,(D)/iResolution.xy);\n        return;\n    }\n    \n    Draw(C,D,Mouse,Color,size);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nconst ivec2 offsets[] = ivec2[](\n    ivec2(-1,0), ivec2(1,0), ivec2(0,-1), ivec2(0,1),\n    ivec2(-1,1), ivec2(1,-1), ivec2(-1,-1), ivec2(1,1)\n);\n\nbool isOccupied(const ivec2 pos) {\n    return texelFetch(iChannel0, pos, 0).x > 0.5;\n}\n\nvoid mainImage(out vec4 color, in vec2 uv) {\n    if(iFrame%Debugsteptime!=0){color=texelFetch(iChannel1, ivec2(uv), 0);return;}\n    int iFrame=iFrame/Debugsteptime;\n\n    vec4 nearest = texelFetch(iChannel1, ivec2(uv), 0);\n    if (iFrame % lod ==0) {\n    color.w = sqrt(nearest.z);       \n    }else color.w =nearest.w;\n    \n    if (isOccupied(ivec2(uv)) && (iFrame%lod==0 || ShowAllFrame==1)) \n    {\n        color.xyz = vec3(uv, 0.0);\n        return;\n    }\n\n    if (iFrame == 0) \n    {\n        color.xyz = vec3(-1.0);\n        return;\n    }\n\n    \n    for (int i = 0; i < 8; ++i) {\n#ifdef UsePow2 \n        int step = 1 << (lod - 1 - (iFrame) % lod);\n#else\n        int step = int(pow(3.0,float(lod - 1 -(iFrame) % lod)));\n#endif\n        ivec2 pos = ivec2(uv) + offsets[i] * step;\n        if (!(pos.x >= 0 && pos.y >= 0 && pos.x < int(iResolution.x) && pos.y < int(iResolution.y))) continue;\n\n        vec4 candidate = texelFetch(iChannel1, pos, 0);\n        candidate.z = dot(candidate.xy - uv, candidate.xy - uv);\n        if (texelFetch(iChannel1,ivec2(candidate.xy),0).xy==candidate.xy&& (candidate.z < nearest.z || nearest.z < 0.0)) {\n            nearest = candidate;\n        }\n    }\n\n    if (!isOccupied(ivec2(nearest.xy))&& (iFrame%lod==0 || ShowAllFrame==1)) {\n        color.xyz = vec3(-1.0);\n        return;\n    }\n    color.xyz = nearest.xyz;\n \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float DrawingSize=12.;\n\n#define ShowAllFrame 0\n\nconst int Debugsteptime=1;//30;\n\n// use pow 2 or pow 3\n// {{if want pow 3 just del it}}\n#define UsePow2\nconst int lod = 11;//2^10=1024\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}