{
    "Shader": {
        "info": {
            "date": "1642933581",
            "description": "Lightning in clouds. Boom, crackle, rumble.",
            "flags": 0,
            "hasliked": 0,
            "id": "NdscDs",
            "likes": 11,
            "name": "Lightning strikes",
            "published": 3,
            "tags": [
                "lightning",
                "storm"
            ],
            "usePreview": 0,
            "username": "pancakespeople",
            "viewed": 510
        },
        "renderpass": [
            {
                "code": "\nvec2 random2(vec2 st) {\n\tst = vec2(dot(st, vec2(127.1, 311.7)),\n\t\tdot(st, vec2(269.5, 183.3)));\n\treturn -1.0 + 2.0 * fract(sin(st) * 43758.5453123 * 0.7897);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n\tvec2 i = floor(st);\n\tvec2 f = fract(st);\n\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\n\treturn mix(mix(dot(random2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0)),\n\t\tdot(random2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0)), u.x),\n\t\tmix(dot(random2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0)),\n\t\t\tdot(random2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0)), u.x), u.y);\n}\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n\tmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < 5; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat random(float x) {\n    return fract(sin(28572.0*x+56847.0));\n}\n\nfloat strike(float cycleTime, float strikeTime) {\n    return abs(1.0 / (cycleTime - strikeTime)) - 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    vec2 np = vec2(uv.x, uv.y);\n    float numStrikes = 5.0;\n    float cycle = floor(iTime / 10.0);\n    \n    vec3 col = vec3(0.0);\n    \n    for (float i = 0.0; i < numStrikes; i++) {\n        float radius = length(uv) * fbm(np+(100.0*i)+(100.0*cycle*i)) * 20.0;\n        float strikeTime = random(i+cycle)*8.0+1.0;\n        col += max(abs(0.1 / (radius - 0.25)) * vec3(0.7, 0.8, 1.0) * strike(mod(iTime, 10.0), strikeTime), 0.0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}