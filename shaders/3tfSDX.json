{
    "Shader": {
        "info": {
            "date": "1564425089",
            "description": "Dithering, now with spheres! And bad palettes!\n\nUPDATE: Now with (u)necessary complete CGA option.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tfSDX",
            "likes": 17,
            "name": "Sphere in the CGA",
            "published": 3,
            "tags": [
                "raymarching",
                "dithering",
                "cga"
            ],
            "usePreview": 0,
            "username": "ShaderPrankster",
            "viewed": 1143
        },
        "renderpass": [
            {
                "code": "//Based off https://www.shadertoy.com/view/MtjGRd by Flyguy\n#define RGB(r,g,b) (vec3(r,g,b) / 255.0)\n\n//Uncomment for unecessary full CGA!!!\n//#define CGACOMPLETE\n#ifdef CGACOMPLETE\n#define PAL_SIZE 16.0\nvec3 CGACompletePal[16] = vec3[](RGB(0, 0, 0),\n                                 RGB(85, 85, 85),\n                                 RGB(0, 0, 170),\n                                 RGB(0, 170, 0),\n                                 RGB(170, 0, 0),\n                                 RGB(170, 85, 0),\n                                 RGB(0, 170, 170),\n                                 RGB(170, 0, 170),\n                                 RGB(170, 170, 170),\n                                 RGB(85, 85, 255),\n                                 RGB(85, 255, 85),\n                                 RGB(255, 85, 85),\n                                 RGB(85,255, 255), \n                                 RGB(255, 85, 255), \n                                 RGB(255, 255, 85),\n                                 RGB(255, 255, 255));\n#else\n#define PAL_SIZE 4.0\nvec3 CGAPal[4] = vec3[](RGB(0, 0, 0), \n                        RGB(255, 85, 255), \n                        RGB(85,255, 255), \n                        RGB(255, 255, 255));\n#endif\n\nvec3 dither8x8(vec2 position, float brightness) {  \n  float idx = clamp(brightness,0.0,1.0)* (PAL_SIZE - 1.0);\n    \n  #ifdef CGACOMPLETE\n  vec3 c1 = CGACompletePal[int(idx)];\n  vec3 c2 = CGACompletePal[int(idx) + 1];\n  #else  \n  vec3 c1 = CGAPal[int(idx)];\n  vec3 c2 = CGAPal[int(idx) + 1];\n  #endif\n    \n  float limit = texture(iChannel0, position / iChannelResolution[0].xy).r;\n  float mixAmt = float(fract(idx) > limit);\n\n  return mix(c1,c2,mixAmt);\n}\n// Sphere SDF from https://iquilezles.org/articles/distfunctions\nfloat sdSphere( vec3 p, float s ){\n  return length(p)-s;\n}\n\nfloat intersect(vec3 point){\n\treturn min(sdSphere(vec3(cos(iTime), 1.0, 5.0 + sin(iTime)) - point, 1.0), point.y + 0.1);\n}\n\nfloat march(vec3 rayOrigin, vec3 rayDirection){\n\tfloat minimumHit = 0.0;\n    \n    for(int i = 0; i < 100; i++){\n    \tvec3 hit = rayOrigin + rayDirection * minimumHit;\n        float dist = intersect(hit);\n        minimumHit += dist;\n        if(dist > 100.0 || dist < 0.01) break;\n    }\n    return minimumHit;\n}\n\nvec3 getNormal(vec3 point){\n\tfloat distPoint = intersect(point);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 norm = distPoint - vec3(intersect(point - e.xyy), intersect(point - e.yxy), \n                            \t intersect(point - e.yyx));\n    return normalize(norm);\n}\n\nfloat lightCalculate(vec3 lightPos, vec3 point){\n\tvec3 lightDirection = normalize(lightPos - point);\n    vec3 normal = getNormal(point);\n    float brightness = clamp(dot(normal, lightDirection), 0.0, 1.0);\n    \n    float shadowCatch = march(point + normal * 0.10, lightDirection);\n    if(shadowCatch < length(lightPos - point)) brightness *= 0.1;\n      \n    return brightness;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col;\n    \n    vec3 rayOrigin = vec3(0.0, 1.5, -0.5);\n    vec3 rayDirection = normalize( vec3(uv,1) );\n    \n    vec3 lightPos = vec3(1, 5, 1);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n    \n    float hitDist = march(rayOrigin, rayDirection);\n    vec3 hitPoint = rayOrigin + rayDirection * hitDist;\n    \n    col = dither8x8(fragCoord, lightCalculate(lightPos,hitPoint));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}