{
    "Shader": {
        "info": {
            "date": "1682629275",
            "description": "sdEllipse-bimbo",
            "flags": 0,
            "hasliked": 0,
            "id": "ctd3RS",
            "likes": 11,
            "name": "sdEllipse-bimbo",
            "published": 3,
            "tags": [
                "sdellipsebimbo"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 186
        },
        "renderpass": [
            {
                "code": "//--------Por Jorge.F.P.----jorge2017a1\n//----27-abril-2023-\n//sdEllipse-bimbo\n//-----No optimo codigo :)\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(1.0),b,d)\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\ncolOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\nreturn colOut;\n}\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nfloat sdCircle( vec2 p, float r )\n{return length(p) - r; }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\n\nvec3 OrejaDer(vec2 uv ,vec3 col )\n{\nfloat d1 ,d2,d3,d4,d5 ;\nfloat df;\n\nvec2 p1 ,p2,p3,p4,p5,p6,p7;\nfloat r1,r2, r3, r4, r5 ;\n\np1 = vec2(2.57, 3.48); r1 = 0.25;\np2 = vec2(2.35, 3.31); r2 = 0.25;\np3 = vec2(2.56, 3.7); r3 = 0.2;\np4 = vec2(2.795, 3.895); r4 = 0.125;\np5 = vec2(2.65, 3.86); r5 = 0.2;\n\nd1 = sdCircle(uv- p1, r1);\nd2 = sdCircle(uv- p2, r2);\nd3 = sdCircle(uv- p3, r3);\nd4 = sdCircle(uv- p4, r4);\nd5 = sdCircle(uv- p5, r5);\ndf = unionSDF(d1, d2);\ndf = unionSDF(df, d3);\ndf = unionSDF(df, d4);\ndf = unionSDF(df, d5);\ncol = DrawFigBorde(vec3(0., 0., 0.), col, df);\nreturn col;\n\n}\n\n\nvec3  Boca(vec2 uv,vec3 colOut)\n{\nfloat d1 ,d2,d3,d4;\nfloat df;\nvec2 p1 ,p2,p3,p4;\nfloat a1 ,b1 , a2 ,b2,a3,b3,a4,b4;\nvec3 col;\ncol=colOut;\n\np1 = vec2(1.66, 2.255); a1 = 0.76; b1 = 0.445;\np2 = vec2(1.665, 2.37); a2 = 0.785; b2 = 0.47;\n\nd1 = sdEllipse(uv- p1, vec2(a1, b1));\nd2 = sdEllipse(uv- p2, vec2(a2, b2));\ndf = differenceSDF(d1, d2);\n    col = DrawFigBorde(vec3(0., 0., 0.), col, df);\nreturn col;\n\n}\n\n\nvec3 OrejaIzq(vec2 uv,vec3 col )\n{\nfloat d1 ,d2,d3,d4,d5;\nfloat df;\n\nvec2 p1 ,p2,p3,p4,p5,p6,p7;\nfloat r1,r2, r3, r4, r5 ;\n\np1 = vec2(0.72, 3.37); r1 = 0.25;\np2 = vec2(0.88, 3.32); r2 = 0.25;\np3 = vec2(0.72, 3.65); r3 = 0.2;\np4 = vec2(0.475, 3.885); r4 = 0.175;\np5 = vec2(0.64, 3.93); r5 = 0.2;\nd1 = sdCircle(uv- p1, r1);\nd2 = sdCircle(uv- p2, r2);\nd3 = sdCircle(uv- p3, r3);\nd4 = sdCircle(uv- p4, r4);\nd5 = sdCircle(uv- p5, r5);\ndf = unionSDF(d1, d2);\ndf = unionSDF(df, d3);\ndf = unionSDF(df, d4);\ndf = unionSDF(df, d5);\ncol = DrawFigBorde(vec3(0., 0., 0.), col, df);\nreturn col;\n}\n\nvec3 LineaNariz(vec2 p, vec3 colOut)\n{\n    float  d1=sdBox(p-vec2(1.7,1.9), vec2(0.025,0.1) );\n    vec3 col = DrawFigBorde(vec3(0., 0., 0.), colOut, d1);\n    return col;\n}\n\nvec3 Cabeza(vec2 uv,vec3 col) \n{\nfloat d1 ,d2,d3,d4,d5 ,d6 ,d7 ,d8_,d9 ,d10;\nfloat d11,d12,d13,d14,d15,d16;\nfloat df;\n\nvec2 p1 ,p2,p3,p4,p5,p6,p7;\nvec2 p8 ,p9 ,p10, p11,p12, p13;\nvec2 p14, p15, p16 ,p17 , p18 ;\n\nfloat r1,r2, r3, r4, r5 ;\n\nfloat a1 ,b1 , a2 ,b2,a3,b3,a4,b4;\nfloat a5,b5,a6 ,b6,a7,b7,a8 ,b8;\n\nfloat a9,b9,a10,b10,a11,b11,a12,b12;\nfloat a13,b13,a14,b14,a15,b15, a16,b16;\nfloat a17 ,b17;\n\np1 = vec2(1.635, 2.215); a1 = 0.935;b1 = 0.445;\np2 = vec2(1.665, 2.125); a2 = 0.535; b2 = 0.445;\np3 = vec2(1.395, 2.735); a3 = 0.385; b3 = 0.395;\np4 = vec2(2.055, 2.735); a4 = 0.335; b4 = 0.395;\np5 = vec2(1.665, 2.585); a5 = 0.685; b5 = 0.395;\np6 = vec2(1.375, 2.685); a6 = 0.315; b6 = 0.385;\np7 = vec2(2.05, 2.695); a7 = 0.3; b7 = 0.385;\n//cornea izq\np8 = vec2(1.41, 2.83); a8 = 0.16; b8 = 0.22;\n//cornea der\np9 = vec2(2.025, 2.845); a9 = 0.135; b9 = 0.195;\n\n//nariz puntos\np10 = vec2(1.705, 2.175); a10 = 0.235; b10 = 0.145;\np11 = vec2(1.71, 2.185); a11 = 0.11; b11 = 0.045;\n\n/////base negro rostro //antes de blanco\np12 = vec2(1.64, 2.185); a12 = 1.06; b12 = 0.445;\np13 = vec2(1.635, 2.065); a13 = 0.585; b13 = 0.445;\n\n\n////------base2 negro rostro\n////union 3 puntos\np14 = vec2(1.635, 2.83); a14 = 1.035; b14 = 0.72;\np15 = vec2(1.62, 3.18); a15 = 0.71; b15 = 0.47;\np16 = vec2(1.025, 2.73); a16 = 0.435; b16 = 0.47;\n\nd1 = sdEllipse(uv- p1, vec2(a1, b1));\nd2 = sdEllipse(uv- p2, vec2(a2, b2));\nd3 = sdEllipse(uv- p3, vec2(a3, b3));\nd4 = sdEllipse(uv- p4, vec2(a4, b4));\n////frente ojo\nd5 = sdEllipse(uv-p5, vec2(a5, b5));\n////ojos otro color\nd6 = sdEllipse(uv- p6, vec2(a6, b6));\nd7 = sdEllipse(uv- p7, vec2(a7, b7));\nd8_ = sdEllipse(uv- p8, vec2(a8, b8));\nd9 = sdEllipse(uv- p9, vec2(a9, b9));\n//nariz\nd10 = sdEllipse(uv- p10, vec2(a10, b10));\nd11 = sdEllipse(uv- p11, vec2(a11, b11));\nd12 = sdEllipse(uv- p12, vec2(a12, b12));\nd13 = sdEllipse(uv- p13, vec2(a13, b13));\n//base rostro sup\nd14 = sdEllipse(uv- p14, vec2(a14, b14));\nd15 = sdEllipse(uv- p15, vec2(a15, b15));\nd16 = sdEllipse(uv- p16, vec2(a16, b16));\ndf = d1;\ndf = unionSDF(df, d2);\ndf = unionSDF(df, d3);\ndf = unionSDF(df, d4);\ndf = unionSDF(df, d5);\n\n//base rostro\ncol = DrawFigBorde(vec3(0.), col, d12);\ncol = DrawFigBorde(vec3(0.), col, d13);\n//base rostro sup\ncol = DrawFigBorde(vec3(0.), col, d14);\ncol = DrawFigBorde(vec3(0.), col, d15);\ncol = DrawFigBorde(vec3(0.), col, d16);\n//boca-blanco\ncol = DrawFigBorde(vec3(1.), col, df);\n//ojo base\ncol = DrawFigBorde(vec3(1.), col, d6);\ncol = DrawFigBorde(vec3(1.), col, d7);\n////cornea\ncol = DrawFigBorde(vec3(0.), col, d8_);\ncol = DrawFigBorde(vec3(0.), col, d9);\n//nariz\ncol = DrawFigBorde(vec3(0.), col, d10);\ncol = DrawFigBorde(vec3(1.), col, d11);\n\ncol = OrejaIzq(uv, col);\ncol = OrejaDer(uv, col);\ncol = Boca(uv, col);\ncol=LineaNariz(uv,col);\nreturn col;\n\n}\n\n// zoom --- Mini Droste Zoom...https://www.shadertoy.com/view/Ml33R7\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    vec2 uv0=uv*2.0-vec2(0.0,-1.0);\n    uv*=8.0;\n    \n    vec2 z=uv;float t=iTime;\n     z = vec2(log(length(z)),atan(z.y,z.x));\n     z = exp(z.x-mod(t*0.8,10.0)) * vec2( cos(z.y), sin(z.y));\n     \n    vec2 c = abs(z);\n    uv=.5+z*exp2(ceil(-log2(max(c.y,c.x))-0.015));\n    \n    vec3 col =0.5 + 0.5*cos(t+uv.xyx+vec3(0,2,4));\n    \n    col= Cabeza(uv-vec2(-1.5,-1.0),col);\n    if( sin(t*2.0)>0.0)\n    col= Cabeza(uv0-vec2(-1.5,-1.0),col);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//---2D primitives---IQ\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}