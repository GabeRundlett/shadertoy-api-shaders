{
    "Shader": {
        "info": {
            "date": "1618144708",
            "description": "A shader for generating moire patterns",
            "flags": 0,
            "hasliked": 0,
            "id": "fd23Dd",
            "likes": 4,
            "name": "Freaky Dots",
            "published": 3,
            "tags": [
                "moire",
                "pattern"
            ],
            "usePreview": 0,
            "username": "kaihagseth",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "\n// Author: Kai Hagseth\n// Title: Freaky Dot Patterns\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n#define PI 3.14159265359\n#define NDOTS 35.0\n#define DOTRADIUS 0.1\n\n/* \n * Inspired by the great Tadashi Tokieda\n * https://youtu.be/QAja2jp1VjE\n*/\n\n\nvec3 circle(in vec2 _st, in float _radius, vec3 color){\n    vec2 dist = _st - vec2(0.5);\n\tfloat o = 1.-smoothstep(\n                         _radius-(_radius * 0.3),\n                         _radius+(_radius * 0.3),\n                         dot(dist, dist * 4.0));\n    return color * o;\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n// Rotate rgb around green axis\nmat3 rotate3d(float _angle){\n\n    return mat3( cos(_angle), 0.0, sin(_angle),\n                 0.0          , 1.0, 0.0,\n                -sin(_angle), 0.0, cos(_angle));\n}\n\nvec2 rotate(in vec2 inp)\n{\n    inp *= 1.0 + (0.1 * sin(0.1 * (iTime * 0.618)));           //scale\n    inp *= rotate2d(0.1 * sin(0.1 * iTime)); //rotate\n    return inp;\n}\n\nvec3 dotPattern(vec2 st, vec3 color, float nDots, float dotRadius)\n{\n    st += iResolution.xy;\n    st *= nDots;      // Scale up the space by \n    st = fract(st);   // Wrap around 1.0\n\treturn vec3(circle(st, dotRadius, color));\n}\n\nvec3 color(in vec2 st, float t)\n{\n  vec3 c = vec3(0.7, 0.2, 0.4) + (vec3(0.5, 0., 0.) * rotate3d(iTime + st.x));\n  return vec3(c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = ( fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    st += vec2(1.0); // Offset origo\n    vec3 color = color(st, iTime);\n    \n    vec2 st1 = rotate(st);\n    vec3 dots1 = dotPattern(st1, color, NDOTS ,DOTRADIUS);\n    \n    vec2 st2 = rotate(st1);\n    vec3 dots2 = dotPattern(st2, color, NDOTS, DOTRADIUS);\n    \n    vec3 bg = vec3(0.0, 0.0, 0.2);\n    vec3 dots = dots1 + dots2 + bg;\n\t//dots = 1.0-(dots*1.0); //inverse B/W\n    fragColor = vec4(dots,1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}