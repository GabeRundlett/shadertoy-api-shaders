{
    "Shader": {
        "info": {
            "date": "1516312257",
            "description": "A quick bit of maths I like using for sky gradients:\nexp2(-ray.y/vec3(.1,.3,.6))",
            "flags": 0,
            "hasliked": 0,
            "id": "4ljBRy",
            "likes": 20,
            "name": "Sky Gradient",
            "published": 3,
            "tags": [
                "gradient"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 1321
        },
        "renderpass": [
            {
                "code": "// Sky Gradient by Hazel Quantock\n#define sphere false\n#define ground false\n\n\n// quick and pretty sky colour\nvec3 SkyColour( vec3 ray )\n{\n    return exp2(-ray.y/vec3(.1,.3,.6)); // blue\n//    return exp2(-ray.y/vec3(.18,.2,.28))*vec3(1,.95,.8); // overcast\n//    return exp2(-ray.y/vec3(.1,.2,.8))*vec3(1,.75,.5); // dusk\n//    return exp2(-ray.y/vec3(.03,.2,.9)); // tropical blue\n//    return exp2(-ray.y/vec3(.4,.06,.01)); // orange-red\n//    return exp2(-ray.y/vec3(.1,.2,.01)); // green\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 ray;\n    ray.xy = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    ray.z = .7;\n\tray.z -= dot(ray.xy,ray.xy)*.5; // fisheye lens\n    ray = normalize(ray);\n    \n    // tilt upwards\n    vec3 k = normalize(vec3(0,sphere?-.5:.8,1));\n    vec3 i = normalize(cross(vec3(0,1,0),k));\n    vec3 j = cross(k,i);\n    ray = ray.x*i+ray.y*j+ray.z*k;\n    \n    if ( sphere )\n    {\n        // reflect ray off sphere\n        vec3 c = k*1.8;\n        float t = dot(c,ray);\n        float t2 = sqrt(dot(c,c)-t*t);\n        if ( t2 < 1. )\n        {\n            t -= sqrt(1.-t2*t2);\n            vec3 n = ray*t-c;\n            ray = reflect(ray,n);\n        }\n    }\n    \n    vec3 tint = vec3(1);\n    if ( ground && ray.y < .0 )\n    {\n        ray.y = -ray.y;\n    \ttint = mix( vec3(.2), tint, pow(1.-ray.y,10.) );\n    }\n\n    fragColor.rgb = SkyColour( ray )*tint;\n\n\t// signature\n\t#define L(m,n,u,v,l,f) min(f,max(abs(dot(fragCoord-vec2(m,n),vec2(u,v)))-l,abs(dot(fragCoord-vec2(m,n),vec2(-v,u)))-1.))\n\tfloat sig=L(3,7,0,1,3.5,L(7,7,0,1,3.5,L(5,7,1,0,2.,L(14.5,5,.7071,-.7071,2.5,abs(length(fragCoord-vec2(12.7,7))-3.)-1.))));\n    fragColor.rgb = .6+(clamp(fragColor.rgb,0.,1.)-.6)*sig/(.1+abs(sig));\n    \n    fragColor.rgb = pow(fragColor.rgb,vec3(1./2.2));\n    fragColor.a = 1.;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}