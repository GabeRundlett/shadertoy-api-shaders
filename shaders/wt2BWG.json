{
    "Shader": {
        "info": {
            "date": "1653331679",
            "description": "bending feedback",
            "flags": 32,
            "hasliked": 0,
            "id": "wt2BWG",
            "likes": 3,
            "name": "Bend Feedback ",
            "published": 3,
            "tags": [
                "postprocessing",
                "feedback",
                "bend"
            ],
            "usePreview": 0,
            "username": "Jaromir",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "float hash21(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx * 123.456) * .1031) ;\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    vec4 col = texture(iChannel0,uv );\n\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rot(float a){\nreturn mat2(\n  cos(a), sin(a),\n  -sin(a), cos(a)\n  );\n}\n\nfloat hash(vec3 p) {\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x ){\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n\nfloat fbm(vec3 p){\n\n  float amp = 1.;\n  float n = 0.;\n  for(int i = 0; i < 8; i++){\n    p*=2.;\n    amp*=0.5;\n    n+=noise(p)*amp;\n  }\n    \n  return n*n;\n}\n\nvec3 warp(vec3 p){\n  float t = iTime*0.01; \n    \n  vec3 q = vec3(\n      fbm(p + vec3(t,0.0,0.0)),\n      fbm(p + vec3(1.1,t*1.1,2.5)),\n      fbm(p + vec3(3.7,2.2,t*1.23))\n      );\n\n  \n  vec3 r = vec3(\n      fbm(q + vec3(0.0,0.0,t*1.123)),\n      fbm(q + vec3(1.1,t*1.321,2.5)),\n      fbm(q + vec3(t*1.65,2.2,1.5))\n      );\n\n  float n = fbm(p+r*4.);  \n  n*=5.;\n  n-=1.6;\n  n= max(0.,n);\n  \n  q*=2.;\n  r*=2.;\n  vec3 col = mix(vec3(0.),vec3(1.,0.,0.),vec3(q.x))*2.;\n  \t   col+= mix(vec3(0.),vec3(.9,.7,0.),vec3(q.x-r.y));\n  \t   col+= mix(vec3(0.),vec3(0.,0.,1.),vec3(q.x-r.x));\n    \n  return vec3(n*n);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 oUv = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n    \n    float scale = 1.;\n    \n    vec3 p = vec3(uv*scale,iTime*0.05);\n            \n    vec4 toBendFx = vec4(warp(p),1.);\n    //vec4 toBendFx = texture(iChannel1,oUv); //britney\n\n    float ang = atan(uv.y,uv.x);\n    float line = uv.y;\n    vec2 bend = vec2(cos(ang),line);\n\tbend*=-1.;\n    \n    vec2 texPos = oUv;\n    vec2 push = vec2(1.)/iResolution.xy;\n    push*=vec2(2.5,5.);\n    \n    texPos+=bend*push;\n    \n    vec4 tIn = texture(iChannel0,texPos)-toBendFx;   \n\n    float fb = 0.95;\n    vec4 cOut = toBendFx + ((tIn*fb));\n        \n    fragColor = cOut - vec4(0.001);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}