{
    "Shader": {
        "info": {
            "date": "1642673031",
            "description": "trying out some falling sand simulation",
            "flags": 32,
            "hasliked": 0,
            "id": "NdXyWj",
            "likes": 4,
            "name": "Falling sand test",
            "published": 3,
            "tags": [
                "simulation",
                "sand"
            ],
            "usePreview": 0,
            "username": "pancakespeople",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SAND vec3(1.0, 1.0, 0.0)\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nbool isFilled(vec2 coord) {    \n    return texture(iChannel0, coord / iResolution.xy).r == 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    bool currentFilled = isFilled(fragCoord);\n    \n    if (iFrame == 0) {\n        if (random2(uv).x > 0.99) {\n            col = SAND;\n        }\n    }\n    else {\n        vec2 above = vec2(fragCoord.x, fragCoord.y + 1.0);\n        vec2 below = vec2(fragCoord.x, fragCoord.y - 1.0);\n\n        if (above.y < iResolution.y) {\n            if (isFilled(above) && !currentFilled) {\n                col = SAND;\n            }\n            \n            if (currentFilled && isFilled(below)) {\n                col = SAND;\n            }\n        }\n    }\n\n    if (iMouse.z > 0.0) {\n        if (distance(mouse, uv) < 0.01) {\n            col = vec3(1.0);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}