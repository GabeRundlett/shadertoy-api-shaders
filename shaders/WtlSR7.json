{
    "Shader": {
        "info": {
            "date": "1564136974",
            "description": "Trying out an erosion idea - tweaking the parameters at the top of Buffer A can get some \"interesting\" results.\nUse the mouse to choose some new terrain to erode.",
            "flags": 48,
            "hasliked": 0,
            "id": "WtlSR7",
            "likes": 81,
            "name": "Erosion Idea",
            "published": 3,
            "tags": [
                "heightfield",
                "erosion"
            ],
            "usePreview": 1,
            "username": "TekF",
            "viewed": 2635
        },
        "renderpass": [
            {
                "code": "// Terrain Rendering\n\nconst float heightScale = .25;\nconst int numSlices = 300;\n#define WRAP 1\n#define PERSPECTIVE 1\n#define DRAW_EVERY_N_FRAMES 1\nconst float cameraOrbitSpeed = .03; // radians per second\nconst float cameraOrbitStart = .4;\nconst float cameraPitch = .4;\nconst float cameraDistance = 2.2;\nconst vec3 cameraVelocity = vec3(-.1,0,.03); // this really helps hide aliasing problems\nconst float zoom = 1.5;\n/*\nconst float cameraPitch = .3;\nconst float cameraDistance = .7;\nconst float zoom = .8;\n*/\n\nconst vec3 lightDirection = vec3(-3,1,2);\nconst vec3 lightTint = vec3(1);\nconst vec3 shadeTint = vec3(.06,.08,.13)*1.5;\n\n\n// desert\nconst vec3 baseColour = vec3(.5,.367,.3);\nconst vec3 grassColour = vec3(.7,.5,.4);\nconst vec3 sandColour = vec3(.6,.2,.0);\nconst vec3 snowColour = vec3(1);\n/*\n// alpine - looks interesting but adds a lot of visual noise and confusion\nconst vec3 baseColour = vec3(.6,.533,.5);\nconst vec3 grassColour = vec3(0,.3,.05);\nconst vec3 sandColour = vec3(.3,.2,.1);\nconst vec3 snowColour = vec3(1);\n*/\n#define DEBUG_COLOURS 0\n\nconst vec3 slowWaterColour = vec3(.0,.15,.35);\nconst vec3 fastWaterColour = vec3(.6,.9,.8);\nconst float fastWaterSpeed = .13;\nconst float waterOpacityScale = .03; // looks really cool with lower values here\n\n// could add grassy colours where there's a little water, snow where there's flat high altitude dry bits...\n\nvec4 WrappedTap( ivec2 uv)\n{\n\tivec2 ires = ivec2(iResolution.xy);\n    \n    uv = (uv+ires*10)%ires; // mod goes wrong on negative numbers, 10 should be enough to hide this\n    if ( uv.x == 0 && uv.y == 0 ) uv.x = 1; // don't read the data texel!\n\treturn texelFetch(iChannel0, uv, 0);\n}\n\nvec4 Sample( vec2 uv )\n{\n     uv = uv*vec2(iResolution.y/iResolution.x,1)+.5;\n#if WRAP\n    vec2 duvdx = dFdx(uv), duvdy = dFdy(uv);\n    uv = fract(uv);\n    if ( max(abs(uv.x)*iResolution.x,abs(uv.y)*iResolution.y) < 1.5 ) uv.x = 1.5/iResolution.x; // avoid reading the data pixel\n    vec4 tap = textureGrad(iChannel0,uv,duvdx,duvdy); // tile with corrected filtering\n//^ this gets an artefact at the edge - probably because of clamping not lerping the wrap pixel\n// BUT it's a lot faster!  \n        \n/*    // instead, bilinearly filter manually with a wrap\n    uv *= iResolution.xy;\n    ivec2 iuv = ivec2(floor(uv));\n    uv -= vec2(iuv);\n    \n\tivec2 ires = ivec2(iResolution.xy);\n    ivec2 d = ivec2(0,1);\n    vec4 tap =\n        mix(\n            mix(\n                WrappedTap( (iuv+d.xx+ires*10)%ires ),\n                WrappedTap( (iuv+d.yx+ires*10)%ires ),\n                uv.x),\n            mix(\n                WrappedTap( (iuv+d.xy+ires*10)%ires ),\n                WrappedTap( (iuv+d.yy+ires*10)%ires ),\n                uv.x),\n           uv.y );*/\n#else\n    vec4 tap = texture(iChannel0,uv);\n    if ( min(uv.x,uv.y) < 0. || max(uv.x,uv.y) > 1. ) tap.w = -1.;\n#endif\n\treturn tap;\n}\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCooord )\n{\n    if ( iFrame%DRAW_EVERY_N_FRAMES > 0 ) discard;\n    \n    float camTime = length(vec2(10,max(0.,iTime-10.)))-10.;\n    float cameraOrbitTime = camTime*cameraOrbitSpeed - cameraOrbitStart;\n    vec3 cameraTarget = vec3(0,-heightScale*.3,0) + camTime*cameraVelocity;\n    vec3 cameraPosition = cameraTarget\n       \t\t\t\t+ (vec3(cos(cameraOrbitTime),0,sin(cameraOrbitTime))*cos(cameraPitch)\n                       + vec3(0,sin(cameraPitch),0)\n                      )*cameraDistance;\n    \n    vec2 screenPosition = (fragCooord-iResolution.xy*.5)/iResolution.x;\n    #if (PERSPECTIVE)\n    \t// perspective\n    \tvec3 ray = vec3(screenPosition,1.2*zoom);\n    #endif\n    \n    vec3 cameraK = normalize(cameraTarget-cameraPosition);\n    vec3 cameraI = normalize(cross(vec3(0,1,0),cameraK));\n    vec3 cameraJ = cross(cameraK,cameraI);\n\n    #if (!PERSPECTIVE)\n    \t// orthographic\n    \tvec3 ray = vec3(0,0,1);\n    \tcameraPosition += (cameraI*screenPosition.x + cameraJ*screenPosition.y) * .8*cameraDistance/zoom;\n    #endif\n\n    ray = ray.x*cameraI + ray.y*cameraJ + ray.z*cameraK;\n    ray = normalize(ray);\n\n    fragColour = vec4(.5);\n    \n    for ( int i=0; i < numSlices; i++ )\n    {\n        float f = numSlices > 1 ? float(i)/float(numSlices-1) : 0.5;\n        f = 1. - f; // from top to bottom!\n        \n        // intersect ray with horizontal plane at top of height field\n        float t = ((f-.5)*heightScale-cameraPosition.y)/ray.y;\n        vec3 position = cameraPosition + ray*t;\n\n        vec2 uv = position.xz;\n\n\t\tvec4 tap = Sample(uv);\n        \n//tap.w += tap.x; // show water level\n//tap.w += tap.y; // include sediment to prevent holes when water settles\n        \n        if ( tap.w > f )\n        {\n            // estimate dot product with surface normal\n            float sampleDistance = .7/iResolution.y;\n            vec3 lightDir = normalize(lightDirection);\n            \n            vec2 sampleOffset = vec2(0,sampleDistance);\n            vec2 positionX = position.xz + sampleOffset.yx;\n            vec2 positionZ = position.xz + sampleOffset.xy;\n            vec2 uvX = positionX;\n            float heightX = Sample(uvX).w;\n            vec2 uvZ = positionZ;\n            float heightZ = Sample(uvZ).w;\n            \n            float height = tap.w * heightScale;\n            heightX *= heightScale;\n            heightZ *= heightScale;\n            \n            // construct a 3D normal, I think ^ that 2D trick doesn't work\n            vec3 n = normalize(\n                \tcross( vec3(positionZ,heightZ).xzy - vec3(position.xz,height).xzy,\n                \t\t   vec3(positionX,heightX).xzy - vec3(position.xz,height).xzy )\n                );\n            \n            float light = max(0.,dot(n,lightDir));\n\n            vec3 shade = shadeTint*mix(.3,1.,n.y)*pow(fragColour.a,.25); // add some definition to shadows\n\n            float waterSlowness = 1./(tap.z/fastWaterSpeed+1.);\n            vec3 water = mix( fastWaterColour, slowWaterColour, waterSlowness );\n            \n            float ior = 1.33;\n            float schlick = (ior-1.)/(ior+1.);\n            vec3 reflection = vec3(10)*waterSlowness*smoothstep(.1,.3,reflect(ray,n).y);\n            reflection += pow(max(0.,dot(n,normalize(lightDir-ray))),500.)*20.; // specular\n            water = mix( water, reflection, mix( schlick*schlick, 1., pow(1.+dot(n,ray),5.) ) );\n            \n            vec3 ground = baseColour;\n            \n            // grass on shallow slopes with enough water\n            ground = mix( ground, grassColour, smoothstep(.0,.8,smoothstep(0.,2.,tap.x)*smoothstep(.8,1.,n.y)) );\n\n            // sand/gravel on shallow slopes with too much water\n            ground = mix( ground, sandColour, smoothstep(.0,.8,smoothstep(8.,12.,tap.x)*smoothstep(.5,.8,n.y)) );\n\n            // snow on peaks\n            ground = mix( ground, snowColour, smoothstep(.0,.1,smoothstep(2.5,0.,tap.x)*smoothstep(.3,1.,tap.w)*smoothstep(.8,1.,n.y)) );\n\n            fragColour.rgb = mix( ground, water, clamp(tap.x*waterOpacityScale,0.,1.) );\n\t\t\tfragColour.rgb *= vec3(pow(tap.a,.5))*.8+.6; // darken deeper areas\n\t\t    fragColour.rgb = pow(fragColour.rgb,vec3(2.2));\n\n            fragColour.rgb *= mix( shade, lightTint, light );\n            \n            // ground fog\n            // I found this code in an old email to myself - I think I wrote it but not 100% sure!\n            const float a = .12;\n            const float b = 8.;\n\t\t\tfloat o = cameraPosition.y;\n\t\t    float k = ray.y;\n    \t\tk = sign(k)*max(abs(k),.001); // avoid division by 0, and huge numbers near that\n            vec3 fogColour = vec3(.5,.73,1);\n            vec3 visibility = exp( (a/(b*k))*( exp(-b*(o+k*t)) - exp(-b*o) ) * fogColour );\n            fragColour.rgb = mix( vec3(1), fragColour.rgb, visibility );\n            \n            // colour correct to bring back some contrat lost in the fog\n            // (most aerial photos do this, so it tends to look wrong without this)\n            fragColour.rgb -= fogColour*.03;\n            \n            #if DEBUG_COLOURS\n            \tfragColour.rgb = tap.xyw;\n            #endif\n            \n            break;\n        }\n    }\n    \n    fragColour.rgb = pow(fragColour.rgb,vec3(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Terrain Generation & Erosion\n\nconst float flowRate = .3;\n\nconst float evaporation = .01;\nconst float rain = .04;\n\nconst float drainage = 1.;\nconst float maxWater = 100.;\n\nconst float sedimentToHeight = .0003; // higher values have a faster but less realistic effect\nconst float sedimentPickUp = .1; // 1.0 => pick up as much sediment as possible at every step when flow is fast, .1 => have to flow 10 pixels to pick up that much\nconst float waterAsHeight = 0.;//.1; // this idea didn't really work\n\n// prevent waterfalls causing infinitely powerful erosion\n// this gives really nice control over how slopey (big values) or cliffy (small values) the terrain is\nconst float maxWaterSpeed = 3.; \n\nconst vec2 initialImagePosition = vec2(.4,.4); // hit rewind when you change this\n// you can also change this by clicking the mouse!\n\n// vary erosion rate at different heights, and initialise with something with steps in it\n// it's fun to change this while it's running\n// so the initial state has no terraces but they appear due to different erosion rates\nconst float terraces = 3.5; //8.5\nconst float terraceHardness = 8.; // -log2 of erosion rate of the hard layers: 0 = all terrain erodes at same rate, 1 = hard layers erode half as fast, 2 = one quarter as fast, etc\n\nbool IsPaused()\n{\n    const int Key_P = 80;\n\treturn texelFetch( iChannel3, ivec2(Key_P,2), 0 ).x > .5f;\n}\n\n\nconst float diagonalDist = 1./sqrt(2.); // don't change this\n\nvoid TestOutFlow( inout float lowestSlope, inout int lowestIndex, in int indexMe, in int indexNeighbour, in float dist, in vec4 samples[25] )\n{\n    float slope = dot(vec2(waterAsHeight,1),samples[indexNeighbour].xw - samples[indexMe].xw) * dist;\n\n    if ( slope < lowestSlope )\n    {\n        lowestSlope = slope;\n        lowestIndex = indexNeighbour;\n    }\n}\n\n\nvoid ProcessNeighbour\n    (\n        inout float outSlope,\n        inout float inSlope,\n        inout vec2 inFlow,\n        in ivec2 index,\n        in float dist,\n        in vec4 samples[25]\n    )\n{\n    int idx = index.y*5+index.x;\n    int meIdx = 2*5+2;\n    \n    vec4 me = samples[meIdx];\n    vec4 neighbour = samples[idx];\n    \n//    float slope = (neighbour.w-me.w) * dist; // can handle this if in caller\n// MEASURE SLOPE INCLUDING WATER!!! HAHAHA! PREVENT SPIKES!\n    float slope = dot(vec2(waterAsHeight,1),neighbour.xw-me.xw) * dist; // can handle this if in caller\n    \n    outSlope = min( outSlope, slope );\n    \n    float neighbourOutSlope = 0.;\n    int neighbourOutSlopeTarget = -1;\n\n\tTestOutFlow( neighbourOutSlope, neighbourOutSlopeTarget, idx, idx-5-1, diagonalDist, samples );\n\tTestOutFlow( neighbourOutSlope, neighbourOutSlopeTarget, idx, idx-5+1, diagonalDist, samples );\n\tTestOutFlow( neighbourOutSlope, neighbourOutSlopeTarget, idx, idx+5-1, diagonalDist, samples );\n\tTestOutFlow( neighbourOutSlope, neighbourOutSlopeTarget, idx, idx+5+1, diagonalDist, samples );\n\tTestOutFlow( neighbourOutSlope, neighbourOutSlopeTarget, idx, idx-5, 1., samples );\n\tTestOutFlow( neighbourOutSlope, neighbourOutSlopeTarget, idx, idx+5, 1., samples );\n\tTestOutFlow( neighbourOutSlope, neighbourOutSlopeTarget, idx, idx-1, 1., samples );\n\tTestOutFlow( neighbourOutSlope, neighbourOutSlopeTarget, idx, idx+1, 1., samples );\n    \n    if ( neighbourOutSlopeTarget == meIdx )\n    {\n\t\tinSlope += max(slope,0.); // do I want to count this for ones flowing away from me?\n    \tinFlow += neighbour.xy;\n    }\n}\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n    fragColour = texelFetch(iChannel0,uv,0);\n    \n    if ( !IsPaused() )\n    {\n        /* erosion data:\n        w = height\n\n        x = amount of water\n        y = amount of sediment\n\n        z = flow speed (for rendering)\n        */\n\n        /*\n        for each neighbour:\n        check if I'm its lowest neighbour\n        if I am, take all its water and sediment\n        if I have any lower neighbour, dump all my previous water and sediment\n\n        then evaporate (subtract const amount of water, down to 0)\n        drop/pickup sediment as height (if sediment > water*slope, where slope = sum of incoming height deltas and outgoing height delta\n        add rain (add const amount of water, even if 0)\n\n        These have to be separate passes so outward slope reads new heights\n        */\n\n        // sample a 5x5 grid around the pixel\n        vec4 samples[25];\n\n        ivec2 ires = ivec2(iResolution.xy); // so I can wrap the texture\n        for ( int j=0; j < 5; j++ )\n        {\n            for ( int i=0; i < 5; i++ )\n            {\n                ivec2 tapUV = (uv+ivec2(i,j)-2+ires)%ires;\n                if ( tapUV.x == 0 && tapUV.y == 0 ) tapUV.x = 1; // don't read the data texel!\n                samples[j*5+i] = texelFetch(iChannel0,tapUV,0);\n            }\n        }\n\n        float outSlope = 1.; // height difference to lowest neighbour (negative)\n        float inSlope = 0.; // sum of height differences to higher neighbours (positive)\n        vec2 inFlow = vec2(0); // sum of (water, sediment) from higher neighbours\n        ProcessNeighbour( outSlope, inSlope, inFlow, ivec2(1,1), diagonalDist, samples );\n        ProcessNeighbour( outSlope, inSlope, inFlow, ivec2(1,3), diagonalDist, samples );\n        ProcessNeighbour( outSlope, inSlope, inFlow, ivec2(3,1), diagonalDist, samples );\n        ProcessNeighbour( outSlope, inSlope, inFlow, ivec2(3,3), diagonalDist, samples );\n        ProcessNeighbour( outSlope, inSlope, inFlow, ivec2(1,2), 1., samples );\n        ProcessNeighbour( outSlope, inSlope, inFlow, ivec2(2,1), 1., samples );\n        ProcessNeighbour( outSlope, inSlope, inFlow, ivec2(2,3), 1., samples );\n        ProcessNeighbour( outSlope, inSlope, inFlow, ivec2(3,2), 1., samples );\n\n        // modify water & sediment values\n        if ( outSlope < 0. )\n        {\n            // zero my water and sediment - they'll be passed to a neighbour\n            fragColour.xy *= 1.-flowRate;\n        }\n\n        fragColour.xy += inFlow*flowRate;\n\n        // evaporate\n        fragColour.x -= evaporation;\n        fragColour.x = min(fragColour.x,maxWater);\n\n\n        // compute speed\n        const float slopeToSpeed = 1./.01; // denominator is height difference between input and output points at which we get a waterfall\n        float speed = clamp( -outSlope * slopeToSpeed, 0., maxWaterSpeed ); // USE ONLY OUT - so water in dips is static! oops!\n\n        // delete standing water? - no, that will drop a lot of sediment\n        // but evaporate faster - as if soaking into water table\n        if ( speed == 0. ) fragColour.x -= drainage;\n\n        fragColour.z = speed;\n\n        fragColour.x = max(fragColour.x,0.);\n\n        // deposit/pick up sediment\n        float maxSediment = fragColour.x * speed;\n\n        if ( fragColour.y > maxSediment )\n        {\n            float deposit = fragColour.y-maxSediment;\n            fragColour.w += deposit*sedimentToHeight; // deposit (perhaps clamp to inslope, or apply slowly)\n            fragColour.y -= deposit;\n        }\n        else\n        {\n            float pickupRate = sedimentPickUp;\n            \n            if ( terraces != 0.0 )\n            {\n                // I think a log curve makes sense here, though I can't articulate why\n//            \tpickupRate *= exp2(-terraceHardness*(.5+.5*cos(fragColour.w*6.283185*terraces)));\n            \tpickupRate *= mix( 1., exp2(-terraceHardness), .5+.5*cos(fragColour.w*6.283185*terraces) );\n            }\n                               \n            float pickup = min(min( maxSediment-fragColour.y, fragColour.w/sedimentToHeight ), pickupRate );\n            fragColour.w -= pickup*sedimentToHeight;\n            fragColour.y += pickup;\n        }\n\n\n        // rain\n        fragColour.x += rain;\n    }\n    \n    \n    vec4 initData = vec4(iResolution.xy,iMouse.xy);\n    vec4 oldInitData = texelFetch(iChannel0,ivec2(0),0);\n    if ( iFrame == 0 || length(initData-oldInitData) > 0. )\n    {\n        fragColour.rgb = vec3(0,0,0);\n        \n        vec4 detail = texture(iChannel1,fragCoord*15./iResolution.x); // break up the low-res details\n\n        detail.xy = smoothstep(vec2(0),vec2(.3,.6),detail.xy); // stretch it to fill the range\n        \n        // read inital texture, with a bilinear blend to make it wrap\n        vec3 wrapStep = vec3(iResolution.xy,0);\n        vec2 imagePosition = initialImagePosition + iMouse.xy/iResolution.xy;\n        vec2 wrapBlend = smoothstep(0.,iResolution.y*.2,fragCoord);\n        float imageScale = .17;\n\t\tfragColour.a =\n            mix(\n                mix(\n                    texture(iChannel1, ((fragCoord+wrapStep.xy)*imageScale + detail.xy)/iResolution.x + imagePosition ).y,\n                    texture(iChannel1, ((fragCoord+wrapStep.zy)*imageScale + detail.xy)/iResolution.x + imagePosition ).y,\n                    wrapBlend.x\n                ),\n                mix(\n                    texture(iChannel1, ((fragCoord+wrapStep.xz)*imageScale + detail.xy)/iResolution.x + imagePosition ).y,\n                    texture(iChannel1, ((fragCoord+wrapStep.zz)*imageScale + detail.xy)/iResolution.x + imagePosition ).y,\n                    wrapBlend.x\n                ),\n                wrapBlend.y\n            );\n\n\t\tif ( terraces != 0.0 )\n        {\n            fragColour.a *= 6.283185*terraces;\n            fragColour.a = fragColour.a-sin(fragColour.a);        \n            fragColour.a /= 6.283185*terraces;\n        }\n        \n        // hide the resolution\n        fragColour.a = mix( fragColour.a, detail.z, .02 );\n        \n        //if ( (uv.x&3) == 0 && (uv.y&3) == 0 ) fragColour.xyz = vec3(.2,0,0); // grid of drops\n    }\n    \n    // store resolution in top-left pixel so I can reset on resolution changes\n    if ( uv.x == 0 && uv.y == 0 )\n    {\n        // detect if the texture's not loaded and force next frame to reset\n        if ( iChannelResolution[1].x <= 0. )\n            fragColour = vec4(0);\n        else\n        \tfragColour = initData;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}