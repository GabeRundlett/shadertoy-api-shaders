{
    "Shader": {
        "info": {
            "date": "1624782438",
            "description": "Yeah !",
            "flags": 96,
            "hasliked": 0,
            "id": "7l2GWV",
            "likes": 6,
            "name": "livecode.demozoo release party",
            "published": 3,
            "tags": [
                "dnb",
                "demozoo"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).xyz,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define sat(a) clamp(a, 0.,1.)\nmat2 r2d(float a) { float c= cos(a), s = sin(a); return mat2(c,-s,s,c);}\n\nfloat _cir(vec2 p, float r)\n{\n  return length(p)-r;\n}\n\nfloat _sph(vec3 p, float r)\n{\n  return length(p)-r;\n}\n\nvec3 getCam(vec2 uv, vec3 rd)\n{\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 u = normalize(cross(rd, r));\n  return normalize(rd+(r*uv.x+u*uv.y)*5.*(.8+.5*sin(iTime)));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n  if (a.x < b.x)\n    return a;\n  return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n  vec3 l = abs(p)-s;\n  //l = abs(l)-s*.25;\n return max(l.x, max(l.y, l.z)); \n}\n#define FFT(a) sat(texture(iChannel0, vec2(a, 0.)).x+.5)\n\nvec2 map(vec3 p)\n{\n  vec2 acc= vec2(1000.,-1.);\n  \n  float a = atan(p.y,p.x)+iTime;\n  acc = _min(acc,vec2(_sph(p, .5+.01*sin(a*5.)), 0.)); \n  p.xy *= r2d(.5);\n  for (int i = 0; i < 15; ++i)\n  {\n    float r = 2.5;\n    float fi = float(i);\n    float orbit = fi+iTime*.5;\n    vec3 pos = p + vec3(sin(orbit),0.,cos(orbit))*mix(1.5,2.5,sat(sin(fi*5.)*.5+.5));\n    pos.xy *= r2d(fi+iTime);\n    pos.xz *= r2d(fi+iTime*(1.+fi*.1));\n    vec2 cube = vec2(_cube(pos, vec3(mix(0.025,0.1, sat(sin(fi*10.)*.5+.5)))),1.);\n    acc = _min(acc, cube);\n  }\n  \n  vec3 p2 = p;\n  vec3 rep = vec3(2.);\n  vec3 idx = floor(p2+rep*.5)/rep;\n  p2 = mod(p2+rep*.5, rep)-rep*.5;\n  p2.x += sin(idx.y*10.+iTime);\n  float beat = .3;\n  acc = _min(acc, vec2(_sph(p2, .1*mod(iTime, beat)/beat),2.));\n  \n  return acc;\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n  vec3 p = ro;\n  for (int i = 0; i < steps; ++i)\n  {\n    vec2 res = map(p);\n    if (res.x < 0.01)\n      return vec3(res.x, distance(ro, p), res.y);\n    \n    vec3 rgb = mix(vec3(1.,.5,.25).zyx, vec3(1.,.5,.25), sat(sin(length(p)*5.+iTime)));\n    rgb *= 1.-sat(_sph(p, 15.)*100.);\n    \n    accCol += 0.1*rgb*(1.-sat(res.x/1.15));\n    p+= rd*res.x;\n  }\n  return vec3(-1.);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col = vec3(.1,.15,.3);\n  col += vec3(.5,.3,.2)*(1.-sat(_cir((uv+vec2(.25))*3., .2))); \n  col += vec3(.5,.3,.2)*(1.-sat(_cir((uv+vec2(.25,-.25))*3., .2))); \n  col += vec3(.5,.3,.2).zxy*(1.-sat(_cir((uv+vec2(-.25,-.25))*2., .3)));\n  \n  col *= sat(length(uv*2.)+.5);\n  float rad = 5.0+sin(iTime*16.)*sat(sin(iTime*.1)*20.);\n  float t = iTime*.25;\n  vec3 ro = vec3(sin(t)*rad,-2.,cos(t)*rad);\n  vec3 ta = vec3(0.,0.,5.*sin(iTime*.25));\n  vec3 rd = normalize(ta-ro);\n  ro.xz *= r2d(sin(iTime));\n  \n  rd = getCam(uv, rd);\n  \n  rd.xz *= r2d(sin(iTime));\n  accCol = vec3(0.);\n  vec3 res = trace(ro, rd, 64);\n  if (res.y > 0.)\n  {\n      vec3 p = ro+rd*res.y;\n      vec3 n = getNorm(p, res.x);\n      col = n*.5+.5;\n      vec3 lpos = vec3(5.,-5.,1.);\n      vec3 ldir = lpos-p;\n      vec3 h = normalize(rd+ldir);\n      col = vec3(.1,.15,.3);\n\n      float stp = 0.1;\n    float dt = dot(h, n);\n    dt = floor(dt/stp)*stp;\n      col += vec3(.5,.3,.2)*pow(sat(dt),1.);\n  }\n    col += accCol;\n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n  vec3 col = rdr(uv);\n  col = pow(col, vec3(2.45));\n  col = mix(col, texture(iChannel1, fragCoord.xy/iResolution.xy).xyz,.85*sat(sin(uv.y*40.+iTime)+.75));\n  col = mix(col, col.zxy, sat(sin(uv.x*10.+iTime)));\n\n  col = mix(col, col.xxx, 1.-sat((sin(uv.y*10.+iTime)+.75)*400.));\n  col *= pow(FFT(.2),.15);\n\tfragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 27696,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/1985music1985/alix-perez-slink"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}