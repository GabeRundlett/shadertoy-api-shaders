{
    "Shader": {
        "info": {
            "date": "1639308310",
            "description": "TDF2021",
            "flags": 0,
            "hasliked": 0,
            "id": "st3XRS",
            "likes": 6,
            "name": "[TDF21]Footwear concept demo",
            "published": 3,
            "tags": [
                "tdf2021"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define Slice(p,a) dot(p,vec2(cos(a),sin(a)))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define MATERIAL_UPPER 0\n#define MATERIAL_OUTSOLE 1\n#define MATERIAL_EFFECT 2\n#define SCENE0 3.0\n#define SCENE1 10.0\n#define SCENE2 20.0\n#define SCENE3 30.0\n#define SCENE_LENGTH 38.0\n\nfloat getSceneTime(){\n    return mod(iTime,SCENE_LENGTH);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n// IQ's 3D noise function. It's faster than the FBM and enough for me to design.\n// The compile is also faster.\nfloat noise3d( vec3 p )\n{\n    const vec3 s = vec3(27, 111, 57);\n    vec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p); \n    //p *= p*p*(p*(p*6. - 15.) + 10.); // option\n    h = mix(fract(sin(h) * 43758.545), fract(sin(h + s.x) * 43758.545), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); \n}\n\nvec2 combine(vec2 val1, vec2 val2  ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\nvec2 smoothCombine(vec2 val1, vec2 val2, float k ){\n    if(val1.x < val2.x){\n        val1.x = opSmoothUnion(val1.x,val2.x,k);\n        return val1;\n    }\n    val2.x = opSmoothUnion(val1.x,val2.x,k);\n    return val2;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.yz),p.x)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdSimpleCylinder(vec3 p, float r, float h){\n    float d = length(p.xz)-r;\n    d = max(abs(p.y)-h,d);\n    return d;\n}\n\n// =========== 3D Model ===========\n\nfloat baseOutsole(vec3 p, float h){\n    vec3 prevP = p;\n    \n    p.xz*=Rot(radians(17.0));\n    p.z*=0.4;\n    p.x*=0.57;\n    p.x+=0.03;\n    p.z-=0.07;\n    \n    float d =sdSimpleCylinder(p,0.1,h);\n    \n    p = prevP;\n    p.xy*=Rot(radians(90.0));\n    p.y*=1.5;\n    p.z*=1.2;\n    float d2 = sdCappedCylinder(p-vec3(0.0,0.0,-0.25),h,0.2);\n    d = opSmoothUnion(d, d2,0.13);\n    \n    p = prevP;\n    d = max(abs(p.y)-h,d);\n    \n    return (d)*0.6;\n}\n\nfloat outsole(vec3 p){\n    p.z*=0.9;\n    vec3 prevP = p;\n    \n    float d = baseOutsole(p-vec3(0.0,0.02,0.),0.06);\n    \n    // wave traction pattern\n    float scene = getSceneTime();\n    if(scene<SCENE0){\n        p.z+=scene*0.1;\n    }\n    p.z+=sin(p.x*80.0)*0.01;\n    p.z = mod(p.z,0.09)-0.045;\n    float d2 = sdBox(p,vec3(0.2,0.03,0.03));\n    \n\n    d = max(d,d2);\n    p = prevP;\n    d2 = baseOutsole(p-vec3(0.0,0.025,0.0),0.035);\n    d = min(d,d2);\n    \n    p = prevP;\n    float a  = radians(4.0);\n    p.y-=0.06;\n    float mask = dot(p.yz,vec2(cos(a),sin(a)));\n    d = max(mask,d);\n    \n    p = prevP;\n    a  = radians(-8.0);\n    p.y+=0.07;\n    mask = dot(p.yz,vec2(cos(a),sin(a)));\n    d = max(-mask,d);\n    \n    p = prevP;\n    a  = radians(10.0);\n    p.y+=0.08;\n    mask = dot(p.yz,vec2(cos(a),sin(a)));\n    d = max(-mask,d);\n    \n    p = prevP;\n    p.xz*=0.95;\n    p.y+=sin(p.x*50.0)*0.01;\n    d2 = baseOutsole(p-vec3(0.0,0.017,0.),0.002);\n    d = min(d,d2);\n\n    return d;\n}\n\nfloat upperBase(vec3 p){\n    p.z*=0.9;\n    vec3 prevP2 = p;\n    p.z+=sin(p.x*300.0)*0.005;\n    p.x+=cos(p.y*70.0)*0.005;\n    vec3 prevP = p;\n\n    //p.x*=1.;\n    p.z*=0.8;\n    \n    float d =sdCappedCone(p-vec3(0.0,0.18,-0.15),0.13,0.15,0.06);\n    \n    p = prevP;\n    p.xz*=Rot(radians(15.0));\n    p.yz*=Rot(radians(-6.0));\n    p.x*=1.2;\n    p.z*=0.8;\n    \n    float d2 = sdEllipsoid(p-vec3(-0.05,0.1,0.14),vec3(0.2,0.08,0.2));\n    d = opSmoothUnion(d,d2,0.1);//0.1\n    \n    p = prevP;\n    p.xz*=Rot(radians(0.0));\n    p.x*=1.1;\n    p.z*=0.8;\n    p.yz*=Rot(radians(-35.0));\n\n    d2 = sdEllipsoid(p-vec3(0.0,0.21,-0.1),vec3(0.1,0.04,0.15));\n\n    d = opSmoothUnion(d,d2,0.17);//0.15\n    \n    p = prevP2;\n    p.xy*=Rot(radians(90.0));\n    p.xz*=Rot(radians(18.0));\n    p.y*=1.5;\n    p.z*=1.0;\n    d2 = sdCappedCylinder(p-vec3(-0.1,0.0,-0.2),0.001,0.2);\n    d = opSmoothUnion(d, d2,0.07);\n    \n    p = prevP2;\n    p.xy*=Rot(radians(90.0));\n    p.xz*=Rot(radians(15.0));\n    p.y*=1.3;\n    p.z*=0.99;\n    d2 = sdCappedCylinder(p-vec3(-0.04,0.0,-0.22),0.001,0.2);\n    d = opSmoothUnion(d, d2,0.07);\n    \n    return d;\n}\n\nfloat upper(vec3 p){\n    vec3 prevP = p;\n    float d = upperBase(p);\n    p.x*=1.5;\n    p.y*=1.1;\n    p.z*=1.12;\n    \n    float d2 = upperBase(p-vec3(0.0,0.02,0.0));\n    d = max(-d2,d);\n    \n    p = prevP;\n    \n    p.x*=1.6;\n    p.z*=0.7;\n    \n    d2 =sdCappedCone(p-vec3(-0.01,0.25,-0.1),0.14,0.14,0.09);\n    d = max(-d2,d);\n    \n    p = prevP;\n    float a  = radians(8.0);\n    p.y-=0.31;\n    float mask = dot(p.yz,vec2(cos(a),sin(a)));\n    d = max(mask,d);\n    \n    p = prevP;\n    p.yz*=Rot(radians(-15.0));\n    p.x*=1.2;\n    p.y*=1.1;\n    p.z*=0.65;\n    d2 = sdTorus(p-vec3(-0.005,0.31,-0.145),vec2(0.1,0.02));\n    \n    d = opSmoothUnion(d,d2,0.05);\n    \n    p = prevP;\n    p.x*=1.4;\n    p.z*=0.75;\n    d2 =sdSimpleCylinder(p-vec3(-0.005,0.35,-0.115),0.1,0.2);\n    d = max(-d2,d);\n    \n    return d*0.8;\n}\n\nvec2 GetDist(vec3 p) {\n    //p+=noise3d(p*600.0)*0.0002;\n    vec3 prevP = p;\n    \n    p.y+=0.125;\n   \n    float d = outsole(p);\n    float d2 = upper(p-vec3(0.0,0.0,0.0));\n    \n    vec2 model = vec2(d2,MATERIAL_UPPER);\n    vec2 model2 = vec2(d,MATERIAL_OUTSOLE);\n    \n    float scene = getSceneTime();\n    if(scene>=SCENE3){\n        p.xz*=Rot(radians(iTime*50.0));\n        d = sdTorus(p,vec2(0.45,0.005));\n        d = max(-(abs(p.x)-0.455),d);\n\n        p = prevP;\n        p.y+=0.125;\n        p.xy*=Rot(radians((iTime*-50.0)));\n        p.yz*=Rot(radians(90.0));\n        d2 = sdTorus(p,vec2(0.45,0.005));\n        d2 = max(-(abs(p.x)-0.455),d2);\n\n        vec2 model3 = vec2(min(d,d2),MATERIAL_EFFECT);\n        return combine(smoothCombine(model,model2,0.03),model3);\n    }\n    return smoothCombine(model,model2,0.03);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<3; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,2,-2));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.1)*diff*occ;\n    diffCol += col*vec3(1.0,0.95,1.0)*skyDiff*occ;\n    diffCol += col*vec3(1.0,0.9,0.85)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 20.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 evaTex(vec2 uv, vec3 col){\n    uv.y+=iTime*0.1;\n    vec2 prevUV = uv;\n    uv*=30.0;\n    \n    vec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);\n    \n    float n = Hash21(id);\n    gv.y*=n;\n    \n    gv.x+=cos(uv.y*5.0)*0.2+sin(uv.y*2.0)*0.05;\n    float d = length(gv)-0.5*abs(n);\n    if(n<0.5){\n        col = mix(col,vec3(1.3),S(d,0.0));\n    }\n    \n    return col;\n}\n\nvec3 upperTex(vec2 uv, vec3 col){\n    vec2 prevUV = uv;\n    uv.y*=0.3;\n    uv.x*=1.5;\n    uv.x+=cos(uv.y*100.0)*0.01+sin(uv.y*80.0)*0.02;\n    float d = -uv.x+0.13;\n    col = mix(col,vec3(1.5,1.4,1.4),S(d,0.0));\n\n    return col;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    if(mat == MATERIAL_UPPER){\n        col = diffuseMaterial(n,rd,p,vec3(0.7,0.6,0.6)*evaTex(p.xz+p.yy,col)*upperTex(p.yz,col));\n    }\n     if(mat == MATERIAL_OUTSOLE){\n        col = diffuseMaterial(n,rd,p,vec3(0.9));\n    }\n    if(mat == MATERIAL_EFFECT){\n        col = diffuseMaterial(n,rd,p,vec3(1.2,1.2,1.2));\n    }\n    return col;\n}\n\n// =========== UI part ===========\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdPie( in vec2 p, in vec2 c, in float r )\n{\n    p.x = abs(p.x);\n    float l = length(p) - r;\n    float m = length(p-c*clamp(dot(p,c),0.0,r)); // c=sin/cos of aperture\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\nfloat dTri(vec2 p, vec2 s){\n    p*=-1.0;\n    return Tri(p,s,radians(30.0));\n}\n\nfloat animationMask(vec2 p, float speed){\n    float t = mod(iTime*speed,360.0);\n    float rad = radians(t);\n    float d = sdPie(p,vec2(sin(rad),cos(rad)),0.15);\n    return d;\n}\n\nfloat charT(vec2 p, int animate, float speed) {\n    vec2 prevP = p;\n    float w = 0.03;\n    float size = 0.1;\n    float d = sdBox(p,vec2(size));\n    \n    float mask = sdBox(p-vec2(0.031,-0.031),vec2(0.071));\n    d = max(-mask,d);\n    \n    p*=Rot(radians(45.0));\n    p.x+=0.075;\n    d = max(-p.x,d);\n    \n    p = prevP;\n    p*=Rot(radians(45.0));\n    d = max(p.x,d);\n    \n    p = prevP;\n    if(animate == 1){\n        mask = animationMask(p,speed);\n        d = max(-mask,d);\n    }\n    return d;\n}\n\nfloat charD(vec2 p, int animate, float speed) {\n    vec2 prevP = p;\n    float w = 0.03;\n    float size = 0.1;\n    float d = sdRoundedBox(p,vec2(size),vec4(0.05,0.05,0,0));\n    float d2 = sdRoundedBox(p,vec2(0.04,0.04),vec4(0.025,0.025,0,0));\n    d = max(-d2,d);\n    p*=Rot(radians(45.0));\n    p.x+=0.04;\n    d = max(-p.x,d);\n    \n    p = prevP;\n    \n    if(animate == 1){\n        float mask = animationMask(p,speed);\n        d = max(-mask,d);\n    }\n    \n    return d;\n}\n\nfloat charF(vec2 p, int animate, float speed) {\n    vec2 prevP = p;\n    float size = 0.1;\n    float d = sdBox(p,vec2(size));\n    p*=Rot(radians(45.0));\n    d = max(p.x,d);\n    p = prevP;\n    float mask = sdBox(p-vec2(0.06,0.025),vec2(0.1,0.015));\n    d = max(-mask,d);\n    \n    if(animate == 1){\n        mask = animationMask(p,speed);\n        d = max(-mask,d);\n    }\n    return d;\n}\n\nfloat drawTDFLogo(vec2 p, int animate, float speed){\n    float d = charT(p-vec2(-0.13,0.0),animate,speed);\n    float d2 = charD(p-vec2(-0.05,0.0),animate,speed);\n    d = min(d,d2);\n    d2 = charF(p-vec2(0.17,0.0),animate,speed);\n    \n    return min(d,d2);\n}\n\nfloat drawTDFLogoPararell(vec2 p, int animate, float speed){\n    float d = charT(p-vec2(-0.13,0.0),animate,speed);\n    float d2 = charD(p-vec2(-0.05,0.0),animate,speed*0.5);\n    d = min(d,d2);\n    d2 = charF(p-vec2(0.17,0.0),animate,speed*0.75);\n    \n    return min(d,d2);\n}\n\nvec3 drawHUD(vec2 p, vec3 col){\n    vec2 prevP = p;\n    \n    p*=Rot(radians(-iTime*10.0));\n    p = DF(p,16.0);\n    p = abs(p);\n    p -= vec2(0.215);\n    p*=Rot(radians(45.0));\n    float d = B(p,vec2(0.001,0.005));\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    p = prevP;\n    p*=Rot(radians(-iTime*10.0));\n    p = DF(p,4.0);\n    p = abs(p);\n    p -= vec2(0.21);\n    p*=Rot(radians(45.0));    \n    d = B(p,vec2(0.001,0.015));\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    p = prevP;\n    p*=Rot(radians(iTime*20.0));\n    d = abs(length(p)-0.32)-0.005;\n    d = max(-B(p,vec2(1.0,0.2)),d);\n\n    p = mod(p,0.005)-0.0025;\n    d = max(-B(p,vec2(0.003)),d);\n\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    p = prevP;\n    p*=Rot(radians(sin(iTime*1.0)*45.0));\n    p = DF(p,1.0);\n    p = abs(p);\n    p -= vec2(0.24);\n    p*=Rot(radians(45.0));   \n    d = dTri(p,vec2(0.015));\n    col = mix(col,vec3(1.0),S(d,0.0));\n    \n    return col;\n}\n\nvec3 drawUI(vec2 p, vec3 col){\n    vec2 prevP = p;\n    \n    p*=3.5;\n    p = abs(p);\n    p.x -=2.7;\n    p.y -=1.3;\n    p*=Rot(radians(-90.0));\n    \n    float d = drawTDFLogo(p,1,0.0);\n    col = mix(col,vec3(1.0),S(d,0.0));\n    p = prevP;\n    p*=0.8;\n    \n    float scene = getSceneTime();\n    if((scene>=SCENE0 && scene<SCENE1)||(scene>=SCENE2 && scene<SCENE3)){\n        col = drawHUD(p,col);\n    }\n    return col;\n}\n\nvec3 startSceneBg(vec2 p, vec3 col){\n    p = mod(p,0.2)-0.1;\n    float d = B(p,vec2(0.00001,0.01));\n    float d2 = B(p,vec2(0.01,0.00001));\n    d = min(d,d2);\n    col = mix(col,vec3(0.9,0.9,0.1)*0.5,S(d,0.0));\n    \n    return col;\n}\n\nvec3 endSceneBg(vec2 p, vec3 col){\n    vec2 gv = fract(p)-0.5;\n    vec2 id = floor(p);\n    \n    float n = Hash21(id);\n\n    gv*=0.3;\n    float d = charT(gv,1,100.0);    \n    if(n>=0.4 && n<0.7){\n        d = charD(gv,1,120.0*n);\n    } else if(n>=0.7){\n        d = charF(gv,1,140.0*n);\n    }\n    \n    col = mix(col,vec3(0.9,0.9,0.1),S(d,0.0));\n    \n    return col;\n}\n\nvec3 postEffect(vec2 p, vec3 col){\n    p*=8.0;\n\n    float y = fract(p.y)-0.5;\n    vec2 gv = fract(p)-0.5;\n    vec2 id = floor(p);\n    float n = Hash21(id);\n    \n    p.y = y;\n    \n    float d = B(p,vec2(cos(iTime*n*20.0)*100.0*n*n,sin(iTime*n*20.0)*100.0*n*n));\n    col = mix(col,vec3(0.9,0.9,0.1)*0.75,S(d,0.0));\n    return col;\n}\n\nvec3 logoAnimationBg(vec2 p, vec3 col){\n    float brightness = 0.2;\n    vec2 prevP = p;\n    p.x+=iTime*0.1;\n    p.x = mod(p.x,0.54)-0.27;\n    p.y = mod(p.y,0.45)-0.225;\n    float d = drawTDFLogoPararell(p,1,100.0);\n    col = mix(col,vec3(0.9,0.9,0.1)*brightness,S(d,0.0));\n    p = prevP;\n    p.x-=iTime*0.1;\n    p.y+=0.225;\n    p.x = mod(p.x,0.54)-0.27;\n    p.y = mod(p.y,0.45)-0.225;\n    d = drawTDFLogoPararell(p,1,120.0);\n    col = mix(col,vec3(0.9,0.9,0.1)*brightness,S(d,0.0));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    \n    float scene = getSceneTime();\n    \n    if(scene>=SCENE1 && scene<SCENE2){\n        uv.y+=scene*0.1;\n        uv*=2.4;\n        uv = fract(uv)-0.5;\n    } else if(scene>=SCENE3){\n        uv.y+=scene*0.1;\n        uv*=1.4;\n        uv.y = fract(uv.y)-0.5;\n    }\n    \n    vec2 m = iMouse.xy/iResolution.xy -.3;\n    \n    float cz = 0.85;\n    if(scene>=SCENE0 && scene<=SCENE1){\n        cz = 1.;\n    }  else if(scene>=SCENE1 && scene<=SCENE2){\n        cz = 1.2;\n    } else if(scene>=SCENE2){\n        cz = 1.0;\n    }\n    \n    vec3 ro = vec3(0, 0, cz);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    if(scene<SCENE0){\n        ro.yz *= Rot(radians(90.0));\n        ro.xz *= Rot(radians(-90.0));\n    } else {\n        if(scene>=SCENE1 && scene<SCENE2){\n            ro.yz *= Rot(radians(-35.0));\n            ro.xz *= Rot(radians(-5.0+scene*20.0));\n        } else if(scene>=SCENE2 && scene<SCENE3){\n            ro.yz *= Rot(radians(30.0));\n            ro.xz *= Rot(radians(-5.0+scene*20.0));\n        } else if(scene>=SCENE3){\n           \n            ro.xz *= Rot(radians(-25.0+scene*20.0));\n            ro.yz *= Rot(radians(85.0));\n           \n        } else {\n            ro.xz *= Rot(radians(-5.0+scene*20.0));\n        }\n       \n    }\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n        //col *= exp( -0.038*d.x*d.x*d.x );//fog\n    } else {\n        //col = upperTex(uv,col);\n        uv = prevUV;\n        \n        col = vec3(0.0);\n        \n        uv.y+=scene*0.1;\n        uv*=0.5;\n        \n        if(scene<SCENE0){\n            uv = prevUV;\n            uv.y+=scene*0.1;\n            col = startSceneBg(uv,col);\n        }\n\n        if(scene>=SCENE0 && scene<SCENE1){\n            uv.y = mod(uv.y,0.4)-0.2;\n            float ld = drawTDFLogo(uv-vec2(0.0,0.08),0,0.0);\n            col = mix(col,vec3(0.9,0.9,0.1)*0.25,S(ld,0.0));\n            ld = drawTDFLogo(uv,0,0.0);\n            col = mix(col,vec3(0.9,0.9,0.1)*0.5,S(ld,0.0));\n            ld = drawTDFLogo(uv-vec2(0.0,-0.08),0,0.0);\n            col = mix(col,vec3(0.9,0.9,0.1),S(ld,0.0));\n        }\n        \n        uv = prevUV;\n        if(scene>=SCENE2 && scene<SCENE3){\n                uv.xy *= Rot(radians(sin(scene*.3)*20.0));\n                float d2 = abs(uv.y);\n                float k = 0.5 / d2;\n                uv = uv * k + vec2(0, k);\n                uv-=iTime*0.5;\n                col = endSceneBg(uv,col);\n                col*=d2*2.0;\n        }\n\n        if(scene>=SCENE3){\n            col = logoAnimationBg(uv,col);\n        }\n    }\n    \n    // UI\n    //float ld = drawTDFLogo(uv,1,60.0);\n    if(scene<SCENE0){\n        uv = prevUV;\n        float ld = drawTDFLogo(uv,0,0.0);\n        col = mix(col,vec3(0.9,0.9,0.1),S(ld,0.0));\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n    \n    uv = prevUV;\n    col = drawUI(uv,col);\n    \n    if(scene>=SCENE0-0.2 && scene<SCENE0+0.1){\n        col = postEffect(uv,col);\n    } else if(scene>=SCENE1-0.2 && scene<SCENE1+0.1){\n        col = postEffect(uv,col);\n    } else if(scene>=SCENE2-0.2 && scene<SCENE2+0.1){\n        col = postEffect(uv,col);\n    } else if(scene>=SCENE3-0.1 && scene<SCENE3+0.1){\n        col = postEffect(uv,col);\n    } else if(scene>SCENE_LENGTH-0.2 || scene<0.1){\n        col = postEffect(uv,col);\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}