{
    "Shader": {
        "info": {
            "date": "1597162197",
            "description": " ",
            "flags": 32,
            "hasliked": 0,
            "id": "wtffzj",
            "likes": 7,
            "name": "Lazy circles",
            "published": 3,
            "tags": [
                "2d",
                "aberration"
            ],
            "usePreview": 0,
            "username": "kostik1337",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x /= iResolution.y / iResolution.x;\n    fragColor = vec4(\n        texture(iChannel0, fragCoord/iResolution.xy).r,\n        texture(iChannel0, fragCoord/iResolution.xy - uv*0.005).g,\n        texture(iChannel0, fragCoord/iResolution.xy - uv*0.01).b,\n        1.0\n    );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define t iTime\n#define PI 3.14159265\n#define STEPS 30.0\n\nfloat hash(float x) {return fract(sin(x)*3145.23);}\n\nvec2 frag_to_uv(vec2 frag) {\n  vec2 uv = frag / iResolution.xy - 0.5;\n  uv.x /= iResolution.y / iResolution.x;\n  return uv;\n}\n\nfloat abs_circle_inv(vec2 p) {\n    float circle = abs(length(p) - 0.1);\n    return 1./circle;\n}\n\nfloat map(vec2 p) {\n  float f = 0.;\n  float I = 4.;\n  for (float i=0.;i<I;++i) {\n    f += abs_circle_inv(p + vec2(0.4 * hash(2.*i) * sin(t*hash(i)),\n                                 0.3 * hash(2.*i+.5) * cos(t*1.4*hash(i+.5))));\n  }\n    \n  f += abs_circle_inv(p - frag_to_uv(iMouse.xy));\n  return I/f;\n}\n\nfloat pixel(vec2 uv) {\n  float c = 0.;\n  float I = STEPS;\n  for(float i=0.; i<I; ++i) {\n    float div = 5.;\n    vec2 uv2 = uv;\n    uv2 -= uv * 0.1 * i / I;\n    float m = map(uv2);\n    m = abs(mod(m, 0.05));\n    float x = 0.037;\n    c += smoothstep(x, x+2./iResolution.y, m);\n  }\n  return 2.*c / I;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = frag_to_uv(fragCoord);\n  fragColor = vec4(vec3(sqrt(pixel(uv))),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}