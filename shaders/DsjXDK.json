{
    "Shader": {
        "info": {
            "date": "1670915354",
            "description": "-",
            "flags": 0,
            "hasliked": 0,
            "id": "DsjXDK",
            "likes": 17,
            "name": "Triangular pattern",
            "published": 3,
            "tags": [
                "pattern"
            ],
            "usePreview": 0,
            "username": "python273",
            "viewed": 441
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n\nvec3 sp(vec2 uv) {\n    float l = length(uv) / length(vec2(.5));\n\n    float a = (1. + atan(uv.y, uv.x) / PI) / 2.;\n\n    //a = fract(a + cos(l) / 5.0 + iTime / 60.0);\n    a = fract(a + l / 1. - iTime / 30.);\n    \n    float r = smoothstep(1., sin(a * PI * 6. + 0.0) / PI, l * 1.4);\n    float g = smoothstep(1., sin(a * PI * 6. + 1.1) / PI, l * 1.5);\n    float b = smoothstep(1., sin(a * PI * 6. + 2.2) / PI, l * 1.5);\n\n    return vec3(r, g, b);\n}\n\n#define S 0.04\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord - .5*iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec2 gv = vec2(\n        mod(uv.x + floor(uv.y / S) * S/2., S),\n        mod(uv.y, S)\n    );\n    vec2 sc = uv - gv;  // center of triangle kinda\n    gv /= S;\n\n    if ((gv.y <= gv.x * 2.) && (gv.y <= (gv.x * -2. + 2.))) {  // center triangle\n         sc += vec2(S/2., S/3.);\n         sc += ((gv-vec2(0.5, 1./3.))*S)/1.2;\n    } else {  // left and right halfs\n        sc += vec2(round(gv.x)*S, S-(S/3.));\n        sc += vec2(0.01);\n    }\n\n    fragColor = vec4(sp(sc), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}