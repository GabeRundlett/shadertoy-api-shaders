{
    "Shader": {
        "info": {
            "date": "1590361932",
            "description": "walls to build mall grab remix\nA sunday night inspiration, while listening this cool song.",
            "flags": 64,
            "hasliked": 0,
            "id": "tsSfRK",
            "likes": 1,
            "name": "WallsToBuild",
            "published": 3,
            "tags": [
                "2d",
                "abstract",
                "worm",
                "vidjing"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 281
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nmat2 r2d(float a) {float cosa = cos(a);float sina = sin(a);return mat2(cosa, sina, -sina, cosa);}\n\nfloat lenny(vec2 p)\n{\n    return abs(p.x)+abs(p.y);\n}\n\nfloat sat(float a)\n{\n    return clamp(a,0.,1.);\n}\n\nfloat sdCir(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat cir(vec2 p, float r)\n{\n    float sharp = abs(p.y)*400.;\n    \n    return sat(sat(-sdCir(p,r) / r) * sharp);\n}\n\nfloat loz(vec2 p, float r)\n{\n\tfloat sharp = abs(p.y)*400.;\n    \n    return sat(sat(-(lenny(p)-r) / r) * sharp);\n}\n\nvec4 cirRdr(vec2 p, float sz, float borderTh)\n{\n    float mixF = sin(iTime * 0.7+p.y*5.)*.6+.4;\n    float outerCir = mix(cir(p, sz), loz(p, sz), mixF);\n    float innerCir = mix(cir(p, sz - borderTh), loz(p, sz - borderTh), mixF);\n    \n    float mask = outerCir;\n    vec3 col = mix(vec3(abs(sin(p.y+iTime))*3., sz*10.,.5)*.35,vec3(0.), sat(innerCir));\n    return vec4(col*sat(mask), sat(mask));\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 color = abs(sin(iTime*0.1))*2.*vec3(0.05,0.01,0.17)*sat(1.-length(uv))+vec3(1.)*pow(sat(1.-length(uv)),3.);\n    \n    \n    float sharp = 20.;\n    float szFlare = 1.;\n    color += .1*vec3(.5,.4,.2) * sat(sat(-(lenny(uv) - szFlare) / szFlare)*sharp) * (.5+abs(sin(iTime+uv.x+uv.y)));\n    \n    int i = 0;\n    int horizSteps = 5;\n    while (i < horizSteps)\n    {\n        float fi = float(i)-(float(horizSteps)*.5);\n        int j = 0;\n        int vertSteps = 50;\n        while (j < vertSteps)\n        {\n            float fj = float(j)-(float(vertSteps)*.5);\n            vec2 p = uv - vec2(fi*.5+sin(0.1*fj+iTime)*0.05, fj*.05*sin(-iTime*0.2+fi) + 0.03*sin(iTime + fj*.5));\n            float radSnd = .05*texelFetch(iChannel0, ivec2(int(abs(fj)*1.), 0), 0).x;\n            vec4 cirColMask = cirRdr(p, radSnd+0.15+0.005*sin(2.0*fj-iTime), 0.003+0.005*fj/float(vertSteps));\n    \t\tcolor = mix(color, cirColMask.xyz* 2.*sat(pow(sat(5.*(abs(fi)+2.*sin(iTime+fi*10.))/float(vertSteps)), 1.2)+.01), cirColMask.w);\n            ++j;\n        }\n        ++i;\n    }\n    \n\tfloat szFlarePost = 1.5;\n    color += 5.*vec3(.5,.4,.2)*(mod(iTime, 0.5)*.2+0.3)*pow(sat(sat((szFlarePost-lenny(uv*vec2(1.,3.)*.3)) / szFlarePost)),10.);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xx;\n    uv -= vec2(.5)*iResolution.xy/iResolution.xx;\n    uv *= 2.+2.*(sin(iTime*.25)*.5+.5);\n    //uv = uv*r2d(2.*length(uv)+.2*sin(iTime-length(uv)));\n    vec3 col = rdr(uv);\n    col *= vec3(.0)+1.*pow(sat(iTime*.5), 5.);\n\tcol = pow(col, vec3(1./2.2));\n    col = vec3(sat(col.x), sat(col.y), sat(col.z));\n    fragColor = vec4(col.zyx,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 22910,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/vapenation/kenny-needs-to-sleep"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}