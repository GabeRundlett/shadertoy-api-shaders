{
    "Shader": {
        "info": {
            "date": "1586769509",
            "description": "Showing the distance field for my \"Projective Easter Egg\": [url]https://www.shadertoy.com/view/ws2yWz[/url], which combines raymarching with a projective transformation (a 4x4 matrix applied to homogenous coordinates).\n",
            "flags": 16,
            "hasliked": 0,
            "id": "wsjcWW",
            "likes": 2,
            "name": "Projective Transformation + SDF",
            "published": 3,
            "tags": [
                "sdf",
                "projective"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Projective Easter Egg, Distance Field\n// Matthew Arcus, mla, 2020.\n//\n// Shows a slice through the distance field. Note the prominent \"plane\n// at infinity\" (type 'i' to disable infinity handling).\n//\n// Mouse changes direction of slice.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nbool handleinfinity = true;\n\nfloat PI = 3.14159;\n\nvec3 lightdir = vec3(0,2,1);\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nfloat segment(vec3 p, vec3 q, vec3 r) {\n  // Rebase to origin at q  \n  p -= q; r -= q;\n  // t*r is orthogonal projection of p onto qr.\n  float t = clamp(dot(p,r)/dot(r,r), 0.0, 1.0);\n  return distance(p,t*r);\n}\n\nfloat scene(vec3 p, out int type) {\n  p = abs(p);\n  if (p.x < p.y) p.xy = p.yx;\n  if (p.y < p.z) p.yz = p.zy;\n  if (p.x < p.y) p.xy = p.yx;\n  float d = 1e8,d1;\n  d1 = length(p)-1.0;\n  if (d1 < d) { d = d1; type = 0; }\n  d1 = segment(p,vec3(1,1,1),vec3(1,1,-1))-0.1;\n  if (d1 < d) { d = d1; type = 1; }\n  d1 = distance(p,vec3(1,1,1))-0.2;\n  if (d1 < d) { d = d1; type = 2; }\n  return d;\n}\n\nfloat de(vec4 p) {\n  p /= p.w;\n  float t = length(p.xyz);\n  // This gets rid of \"plane at infinity\", which otherwise shrinks\n  // all distances to 0.\n  if (handleinfinity && t > 100.0) p.xyz *= 100.0/t;\n  int type;\n  return scene(p.xyz,type);\n}\n\nvec4 grad(vec4 p) {\n  // 4 dimensional gradient of distance field\n  // First order seems to be OK for our purposes -\n  // just want to scale the distance field.\n  float eps = 1.0/256.0;\n  vec2 e = vec2(eps, 0.0);\n  float t = de(p);\n  return vec4(de(p + e.xyyy) - t,\n              de(p + e.yxyy) - t,\n              de(p + e.yyxy) - t,\n              de(p + e.yyyx) - t)/eps;\n}\n\nmat4 A = mat4(0.8,0,0,0,\n              0,1,0,0,\n              0,0,1,0,\n              0,0,0,1);\n\nfloat eyesign = 1.0; // Sign of distance field at eye.\n\nfloat eval(vec4 p) {\n  p = A*p;\n  float d = de(p);\n  vec3 g = transpose(mat3x4(A))*grad(p);\n  d /= length(g);\n  return eyesign*d;\n}\n\nfloat eval(vec3 p) {\n  return eval(vec4(p,1));\n}\n\nvec3 hsv2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid init() {\n  float time = 0.5*iTime;\n  A *= mat4(cos(time),0,0,sin(time),\n            0,1,0,0,\n            0,0,1,0,\n            -sin(time),0,0,cos(time));\n  A *= mat4(1,0,0,0,\n            0,cos(time),sin(time),0,\n            0,-sin(time),cos(time),0,\n            0,0,0,1);\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 rotateframe(vec3 p) {\n  if (iMouse.x > 0.0) {\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  {\n    float t = 0.0; // iTime;\n    p.yz = rotate(p.yz,0.5+t*0.125);\n    p.zx = rotate(p.zx,0.5+t*0.1);\n  }\n  return p;\n}\n\nconst int CHAR_I = 73;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nbool key(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n  handleinfinity = handleinfinity != key(CHAR_I);\n  init();\n  vec2 z = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 x = vec3(0,0,1);\n  vec3 y = vec3(1,0,0);\n  x = rotateframe(x);\n  y = rotateframe(y);\n  float d = eval(10.0*(z.x*x + z.y*y));\n  vec3 col = hsv2rgb(vec3(2.0*atan(0.1*d)/PI,1,1));\n  col *= 0.5+0.5*sin(10.0*d);\n  if (d < 0.01) col = vec3(1);\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}