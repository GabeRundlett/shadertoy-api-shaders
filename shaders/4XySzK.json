{
    "Shader": {
        "info": {
            "date": "1720141348",
            "description": "i did random stuff and fine tuned it to produce this fractal (use mouse to offset camera)",
            "flags": 0,
            "hasliked": 0,
            "id": "4XySzK",
            "likes": 1,
            "name": "the seeds of chaos(bugged sdf)",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal"
            ],
            "usePreview": 0,
            "username": "CuleGamer",
            "viewed": 95
        },
        "renderpass": [
            {
                "code": "const uint stepsRaymarch = 128u;\nconst uint stepsSdf = 32u;\nconst float threshold = 0.01;\nfloat sdf(vec3 pos)\n{\n    float val;\n    vec3 vec = pos;\n    for(uint i; i < stepsSdf; i++)\n    {\n        vec = sin(vec) + pos;\n        vec *= mat3(1., 0.1 * pos, 1., -0.1 * pos, 1.);\n    }\n    val = length(vec) - iTime;\n    return val;\n}\nvoid mainImage(out vec4 O, in vec2 I)\n{\n    vec2 uv = (2. * I - iResolution.xy)/iResolution.y;\n    vec2 uvMouse = (2. * iMouse.xy - iResolution.xy)/iResolution.y;\n    vec3 camVec = normalize(vec3(uv, 0.5));\n    vec3 camPos = vec3(16. * uvMouse, -iTime);\n    vec3 ray = camPos;\n    float dist;\n    uint i;\n    for(i; i < stepsRaymarch; i++)\n    {\n        dist = sdf(ray);\n        if(dist < threshold)\n        {\n            break;\n        }\n        ray += camVec * dist;\n    }\n    float fresnel = float(i) / float(stepsRaymarch);\n    vec3 col = vec3(100. * fresnel / distance(ray, camPos));\n    O = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}