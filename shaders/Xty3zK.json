{
    "Shader": {
        "info": {
            "date": "1475416582",
            "description": "xD",
            "flags": 0,
            "hasliked": 0,
            "id": "Xty3zK",
            "likes": 1,
            "name": "Something But A Sea",
            "published": 3,
            "tags": [
                "sea"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 530
        },
        "renderpass": [
            {
                "code": "\nconst float bluramount  = 20.0;\nconst float center      = 1.1;\nconst float stepSize    = 0.004;\nconst float steps       = 37.0;\n\nconst float minOffs     = (float(steps-1.0)) / -2.0;\nconst float maxOffs     = (float(steps-1.0)) / +2.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 tcoord = fragCoord.xy;\n\n    float amount;\n    vec4 blurred;\n        \n        //Work out how much to blur based on the mid point \n    amount = pow((tcoord.y * center) * 2.0 - 1.0, 2.0) * bluramount+iTime*1024.;\n        \n        //This is the accumulation of color from the surrounding pixels in the texture\n    blurred = vec4(0.0, 0.0, 0.0, 1.0);\n        \n        //From minimum offset to maximum offset\n    for (float offsX = minOffs; offsX <= maxOffs; ++offsX) {\n        for (float offsY = minOffs; offsY <= maxOffs; ++offsY) {\n\n                //copy the coord so we can mess with it\n            vec2 temp_tcoord = tcoord.xy;\n\n                //work out which uv we want to sample now\n            temp_tcoord.x += offsX * amount * stepSize;\n            temp_tcoord.y += offsY * amount * stepSize;\n\n                //accumulate the sample \n            blurred += texture(iChannel0, temp_tcoord*2046.);\n        \n        } //for y\n    } //for x \n        \n        //because we are doing an average, we divide by the amount (x AND y, hence steps * steps)\n    blurred /= float(steps * steps+iTime);\n\n        //return the final blurred color\n    fragColor = blurred+vec4(-0.025, 0.025, 0.6, 1.0);\n\n} //main \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}