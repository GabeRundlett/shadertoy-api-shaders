{
    "Shader": {
        "info": {
            "date": "1698772454",
            "description": "Purple = Original; Pink = Pre-compensated; Black = Final",
            "flags": 0,
            "hasliked": 0,
            "id": "csdfWS",
            "likes": 0,
            "name": "Draft tests",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "tristanantonsen",
            "viewed": 152
        },
        "renderpass": [
            {
                "code": "float circle(vec2 p, vec2 c, float r) {\n    return length(p-c) - r;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdRoundedBox( vec2 p, vec2 b, vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n    \nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\n\n// straight\nfloat ramp(float t, float inMin, float inMax, float outMin, float outMax) {\n\n    return clamp(mix(outMin, outMax, t), inMin, inMax);\n\n}\n\nfloat map(vec2 p) {\n\n    float l = 0.001;\n    \n    float b1 = sdRoundedBox(p+vec2(0.2, 0.), vec2(.15,.25), vec4(0., 0., 0.1, 0.));\n    float b2 = sdRoundedBox(p-vec2(0.2, 0.), vec2(.15,.25), vec4(0.025, 0., 0., 0.));\n    float b3 = sdRoundedBox(p-vec2(0., 0.), vec2(.3,.1), vec4(0.));\n    \n    float res = opSmoothUnion(b1, b2, 0.);\n    res = opSmoothUnion(res, b3, 0.);\n    \n    return res;\n    \n}\n\nvec2 Gradient(vec2 p) {\n\n    float epsilon = 0.0001;\n    vec2 dx = vec2(epsilon, 0.);\n    vec2 dy = vec2(0., epsilon);\n\n    float ddx = map(p + dx) - map(p - dx);\n    float ddy = map(p + dy) - map(p - dy);\n    \n    return vec2(ddx, ddy);\n\n}\n\nvec2 unitGradient(vec2 p) {\n\n    float epsilon = 0.0001;\n    vec2 dx = vec2(epsilon, 0.);\n    vec2 dy = vec2(0., epsilon);\n\n    float ddx = map(p + dx) - map(p - dx);\n    float ddy = map(p + dy) - map(p - dy);\n    \n    return normalize(vec2(ddx, ddy));\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution .xy)/iResolution.y;\n    vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y / 2.0;\n    \n    \n    vec3 col1 = vec3(255., 255.,255.) / 255.;\n    vec3 col2 = vec3(180.) / 255.;\n    \n    float d = map(uv);\n    vec2 g0 = unitGradient(uv);\n    \n    // pre-compensation\n    vec2 pRComp = vec2(uv.x, uv.y - 0.03 * sign(g0.y));\n    float dComp = map(pRComp);\n    \n    // gradient\n    vec2 g = Gradient(pRComp);\n    vec2 ug = normalize(g); // unit gradient of pre-compensated shape\n    vec3 gradColor = vec3(ug.x, ug.y, 1.0);\n\n    // modifying field\n    \n    float dMax = 0.1;\n    float mag = ramp(abs(uv.y), 0., 1., 0., dMax);\n    \n    // applying draft\n    vec2 pRemap = vec2(uv.x + mag * ug.x, uv.y);\n    float final = map(pRemap);\n    \n    \n    vec4 solidColor = vec4(vec3(0.15), 1.0);\n    \n    float f = 1.5;\n    final *= 255.;\n    float ripple = 0.5 * sin(f * final - 0.5 * iTime) + 0.49;\n    \n    \n    // background\n    vec4 backgroundColor;\n    backgroundColor = vec4(mix(col1, col2, smoothstep(0.9, 1., ripple)), 1.0);        \n    \n    // Show gradient\n    //backgroundColor = vec4(mix(gradColor, col2, smoothstep(0.9, 1., ripple)), 1.0);        \n    \n    // translucent original shape\n    backgroundColor = mix(backgroundColor, backgroundColor * vec4(0.55, 1., 0.8, 1.), smoothstep(1.0,0.0,d * 255.));\n    \n    // translucent compensated shape\n    backgroundColor = mix(backgroundColor, backgroundColor * vec4(1., 0.5, 0.8, 1.), smoothstep(1.0,0.0,dComp * 255.));\n    \n    // solid final shape\n    fragColor = mix(solidColor, backgroundColor, smoothstep(0.0,1.0,final * 255.) );\n    \n    // line @ y = 0\n    fragColor = mix(solidColor, fragColor, smoothstep(0.0,1.,1000. * (abs(uv.y)-0.001)) );\n    \n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}