{
    "Shader": {
        "info": {
            "date": "1593670360",
            "description": "Rotation , angle vector , hue , iso-triangle tilings (coords, id)...",
            "flags": 0,
            "hasliked": 0,
            "id": "3lSyz1",
            "likes": 19,
            "name": "utils: golfed transforms",
            "published": 3,
            "tags": [
                "glsl",
                "rotation",
                "hls",
                "golfing",
                "shortest",
                "hexatiling"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 533
        },
        "renderpass": [
            {
                "code": "#define rot(a)   mat2( cos( a + vec4(0,33,11,0)) )      // https://www.shadertoy.com/view/XlsyWX \n#define CS(a)    cos( a + vec2(0,11) )                  // https://www.shadertoy.com/view/XlsyWX \n#define hue(h)   .6 + .6 * cos( h + vec4(0,23,21,0)  )  // h = [0,2Pi]  https://www.shadertoy.com/view/ll2cDc\n#define hGrid(U) vec4( U *= mat2(6, 0, 3, 5) , U-U.y )  // https://www.shadertoy.com/view/Wl2yRz\n                        // normalized: mat()/6.\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 2.*u/R.y, I = floor(U); U -= I+.5;              // subwindow coords\n    int  i = int(I+3.*I.y);                                  // subwindow Id\n    float t = iTime;\n   \n    O =  i < 2 ? U-=.2*t, O = fract( hGrid(U) ),             // isoTriangle grid\n          i==0 ? O                                           // local coords\n               :( O.xxxx - O.y ) / .1                        // tiling\n        : i==2 ? vec4( length(  U*rot(t) - .2* U/U ) / .1 )  // point rotation\n        : i==3 ? vec4( dot( U, CS(t) ) / .1 )                // direction rotation\n        : i==4 ? hue( 6.3*length(U) - t )                    // concentric hue\n        : i==5 ? hue( atan(U.y,U.x) - t )                    // radial hue\n        :        hue( dot( ceil(hGrid(U)), vec4(1,7,9,0) ) -t ); // isoTriangle Ids\n}                                // 'uniq' id:  1,10,100 or dot(xy,(1,10)) *2 + z%2",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}