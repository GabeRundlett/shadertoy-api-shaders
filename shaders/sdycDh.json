{
    "Shader": {
        "info": {
            "date": "1654760144",
            "description": "After finding out that I can warp the coordinate system using matrices, I successfully did hexagons. Took long because I forgot how to properly invert a matrix.\n\nThis is inspired by https://thebookofshaders.com/09/geometricpatters.png",
            "flags": 0,
            "hasliked": 0,
            "id": "sdycDh",
            "likes": 2,
            "name": "Hexagonal Lattice",
            "published": 3,
            "tags": [
                "hexagon",
                "shapes",
                "lattice"
            ],
            "usePreview": 0,
            "username": "AShaderBeginner",
            "viewed": 324
        },
        "renderpass": [
            {
                "code": "#define HALF_SQRT3 0.66025403\n#define INV_SQRT3 0.5773502691\n#define SIDELEN (iResolution.y / (iTime * 5.0))\n\nvec2 getHexagonCenter(in vec2 pos){\n    // Label\n    int x = int(mod(floor(pos.x) - floor(pos.y), 3.0));\n    \n    switch(x){\n        case 0:\n            return vec2(ceil(pos.x), floor(pos.y));\n        case 2:\n            return vec2(floor(pos.x), ceil(pos.y));\n        case 1:\n            if(fract(pos.x) + fract(pos.y) < 1.0){\n                return vec2(floor(pos.x), floor(pos.y));\n            } else {\n                return vec2(ceil(pos.x), ceil(pos.y));\n            }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat2 toHexagons = mat2(HALF_SQRT3, HALF_SQRT3,\n                           -0.5      , 0.5      );\n    mat2 fromHexagons = mat2(INV_SQRT3, INV_SQRT3,\n                             -1.0     , 1.0);\n    vec2 center = fromHexagons * fragCoord / SIDELEN;\n    center = getHexagonCenter(center);\n    center = toHexagons * center * SIDELEN;\n    \n    // normalize\n    center /= iResolution.xy;\n    \n    float invcol = distance(center, vec2(-0.5, 0.5));\n    fragColor.r = 1.0 - invcol;\n    fragColor.g = 1.0 - 2.0 * invcol;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}