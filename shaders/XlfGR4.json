{
    "Shader": {
        "info": {
            "date": "1418827414",
            "description": "Rework of [url=https://www.shadertoy.com/view/XtlGRr]Voxel land[/url] to be faster on mobile devices (no reflection) and propose different colors...",
            "flags": 0,
            "hasliked": 0,
            "id": "XlfGR4",
            "likes": 35,
            "name": "Voxel land 2",
            "published": 3,
            "tags": [
                "voxel"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 2270
        },
        "renderpass": [
            {
                "code": "// Parameters\n#define CAMERA_FOCAL_LENGTH\t1.5\n#define VOXEL_STEP\t\t\t50.0\n#define SOUND\n#define MOUSE\n#define HSV2RGB_FAST\n\n// Constants\n#define PI\t\t3.14159265359\n#define SQRT2\t1.41421356237\n\n// PRNG\n// From https://www.shadertoy.com/view/4djSRW\nfloat rand (in vec2 seed) {\n\tseed = fract (seed * vec2 (5.3983, 5.4427));\n\tseed += dot (seed.yx, seed.xy + vec2 (21.5351, 14.3137));\n\treturn fract (seed.x * seed.y * 95.4337);\n}\n\n// HSV to RGB\nvec3 hsv2rgb (in vec3 hsv) {\n\t#ifdef HSV2RGB_SAFE\n\thsv.yz = clamp (hsv.yz, 0.0, 1.0);\n\t#endif\n\t#ifdef HSV2RGB_FAST\n\treturn hsv.z * (1.0 + 0.5 * hsv.y * (cos (2.0 * PI * (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0))) - 1.0));\n\t#else\n\treturn hsv.z * (1.0 + hsv.y * clamp (abs (fract (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) - 2.0, -1.0, 0.0));\n\t#endif\n}\n\n// Main function\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Define the ray corresponding to this fragment\n\tvec3 ray = normalize (vec3 ((2.0 * fragCoord.xy - iResolution.xy) / iResolution.y, CAMERA_FOCAL_LENGTH));\n\n\t// Get the music info\n\t#ifdef SOUND\n\tfloat soundBass = texture (iChannel0, vec2 (0.0)).x;\n\tfloat soundTreble = texture (iChannel0, vec2 (0.9, 0.0)).x;\n\t#else\n\tfloat soundBass = 0.6 + 0.4 * cos (iTime * 0.2);\n\tfloat soundTreble = 0.5 + 0.5 * cos (iTime * 1.2);\n\t#endif\n\n\t// Set the camera\n\tvec3 origin = vec3 (0.0, 6.0 - 3.0 * cos (iTime * 0.3), iTime * 2.0 + 700.0 * (0.5 + 0.5 * sin (iTime * 0.1)));\n\tfloat cameraAngle = iTime * 0.1;\n\t#ifdef MOUSE\n\tcameraAngle += 2.0 * PI * iMouse.x / iResolution.x;\n\t#endif\n\tvec3 cameraForward = vec3 (cos (cameraAngle), cos (iTime * 0.3) - 1.5, sin (cameraAngle));\n\tvec3 cameraUp = vec3 (0.2 * cos (iTime * 0.7), 1.0, 0.0);\n\tmat3 cameraRotation;\n\tcameraRotation [2] = normalize (cameraForward);\n\tcameraRotation [0] = normalize (cross (cameraUp, cameraForward));\n\tcameraRotation [1] = cross (cameraRotation [2], cameraRotation [0]);\n\tray = cameraRotation * ray;\n\n\t// Voxel\n\tvec3 color = vec3 (0.0);\n\n    vec2 voxelSign = sign (ray.xz);\n\tvec2 voxelIncrement = voxelSign / ray.xz;\n\tfloat voxelTimeCurrent = 0.0;\n\tvec2 voxelTimeNext = (0.5 + voxelSign * (0.5 - fract (origin.xz + 0.5))) * voxelIncrement;\n\tvec2 voxelPosition = floor (origin.xz + 0.5);\n\tfloat voxelHeight = 0.0;\n\tbool voxelDone = false;\n\tvec3 voxelNormal = vec3 (0.0);\n\tfor (float voxelStep = 1.0; voxelStep <= VOXEL_STEP; ++voxelStep) {\n\n\t\t// Compute the height of this column\n\t\tvoxelHeight = 2.0 * rand (voxelPosition) * smoothstep (0.2, 0.5, soundBass) * sin (soundBass * 8.0 + voxelPosition.x * voxelPosition.y) - 5.0 * (0.5 + 0.5 * cos (voxelPosition.y * 0.15));\n\n\t\t// Check whether we hit the side of the column\n\t\tif (voxelDone = voxelHeight > origin.y + voxelTimeCurrent * ray.y) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Check whether we hit the top of the column\n\t\tfloat timeNext = min (voxelTimeNext.x, voxelTimeNext.y);\n\t\tfloat timeIntersect = (voxelHeight - origin.y) / ray.y;\n\t\tif (voxelDone = timeIntersect > voxelTimeCurrent && timeIntersect < timeNext) {\n\t\t\tvoxelTimeCurrent = timeIntersect;\n\t\t\tvoxelNormal = vec3 (0.0, 1.0, 0.0);\n\t\t\tbreak;\n\t\t}\n\n\t\t// Next voxel...\n\t\tvoxelTimeCurrent = timeNext;\n\t\tvoxelNormal.xz = step (voxelTimeNext.xy, voxelTimeNext.yx);\n\t\tvoxelTimeNext += voxelNormal.xz * voxelIncrement;\n\t\tvoxelPosition += voxelNormal.xz * voxelSign;\n\t}\n\tif (voxelDone) {\n\t\torigin += voxelTimeCurrent * ray;\n\n\t\t// Compute the local color\n\t\tvec3 mapping = origin;\n\t\tmapping.y -= voxelHeight + 0.5;\n\t\tmapping *= 1.0 - voxelNormal;\n\t\tmapping += 0.5;\n\t\tfloat id = rand (voxelPosition);\n\t\tcolor = hsv2rgb (vec3 ((iTime + floor (mapping.y)) * 0.05 + voxelPosition.x * 0.01, smoothstep (0.2, 0.4, soundBass), 0.7 + 0.3 * cos (id * iTime + PI * soundTreble)));\n\t\tcolor *= smoothstep (0.8 - 0.6 * cos (soundBass * PI), 0.1, length (fract (mapping) - 0.5));\n\t\tcolor *= 0.5 + smoothstep (0.90, 0.95, cos (id * 100.0 + soundTreble * PI * 0.5 + iTime * 0.5));\n\t\tcolor *= 1.0 - voxelTimeCurrent / VOXEL_STEP * SQRT2;\n\t}\n\n\t// Set the fragment color\n\tfragColor = vec4 (color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 20,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}