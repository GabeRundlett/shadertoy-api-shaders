{
    "Shader": {
        "info": {
            "date": "1651004934",
            "description": "This is just one really fast point of light moving around.\nE to toggle waveform\nQ to toggle point cache texture (blue is free memory, if there is no free left then you might see artifacting in the oscilloscope, overrides waveform view)",
            "flags": 56,
            "hasliked": 0,
            "id": "ftXfRS",
            "likes": 19,
            "name": "XY Oscilloscope Music - Springs",
            "published": 3,
            "tags": [
                "oscilloscope",
                "music",
                "xy"
            ],
            "usePreview": 0,
            "username": "shyshokayu",
            "viewed": 560
        },
        "renderpass": [
            {
                "code": "/*\n    MIT License\n\n    Copyright (c) 2022 shyshokayu\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the Software), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, andor sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\n/*\n    Feel free to make your own music/art with this shader,\n    but don't forget to provide credit to me for making this framework.\n*/\n\n/*\n    ---| Go to Common tab to play with sound |---\n*/\n\n#define VISUAL_LINE_COLOR vec3(0.45, 1.0, 0.4)\n#define VISUAL_LINE_BLUR 2.0\n#define VISUAL_LINE_BRIGHTNESS 1000.0\n\nfloat sliderPointLine(in vec2 a, in vec2 b, in vec2 p) {\n    vec2 ab = b - a;\n    return dot(p - a, ab) / dot(ab, ab);\n}\n\nvec2 closestPointLine(in vec2 a, in vec2 b, in float d) {\n    return mix(a, b, saturate(d));\n}\n\nvec2 closestPointLine(in vec2 a, in vec2 b, in vec2 p) {\n    return closestPointLine(a, b, sliderPointLine(a, b, p));\n}\n\nfloat distToLineSqr(in vec2 a, in vec2 b, in vec2 p, in float k) {\n    vec2 d = p - closestPointLine(a, b, k);\n    return dot(d, d);\n}\n\nfloat distToLineSqr(in vec2 a, in vec2 b, in vec2 p) {\n    vec2 d = p - closestPointLine(a, b, p);\n    return dot(d, d);\n}\n\nfloat distToLine(in vec2 a, in vec2 b, in vec2 p) {\n    return sqrt(distToLineSqr(a, b, p));\n}\n\nvec2 pointTex(in float t) {\n    // Estimate location based on texture coordinate\n    t *= float(VISUAL_ITERATIONS);\n    \n    // Convert to int for texelFetch and for more reliable arithmetic\n    int i = int(t);\n    int j = i + 1;\n    \n    // Interpolation between two sampled points\n    ivec2 ip1 = ivec2(i % int(iChannelResolution[0].x), i / int(iChannelResolution[0].x));\n    ivec2 ip2 = ivec2(j % int(iChannelResolution[0].x), j / int(iChannelResolution[0].x));\n    vec2 p1 = texelFetch(iChannel0, ip1, 0).xy;\n    vec2 p2 = texelFetch(iChannel0, ip2, 0).xy;\n    \n    vec2 p = mix(p1, p2, fract(t));\n\n    return p;\n}\n\nvec2 pointTexi(in int i) {\n    int r = int(iChannelResolution[0].x);\n    return texelFetch(iChannel0, ivec2(i % r, i / r), 0).xy;\n}\n\nfloat imageVectorScopeLine(in vec2 a, in vec2 b, in vec2 p) {\n    float d = 0.01 + distanceSqr(a - b); // Emit less light if line is longer\n    float s = saturate(sliderPointLine(a.xy, b.xy, p));\n    float ld = distToLineSqr(a.xy, b.xy, p, s);\n    return min((0.00000004 / ((ld + (VISUAL_LINE_BLUR * 0.00001)) * d)), 0.2) * VISUAL_LINE_BRIGHTNESS;\n}\n\nfloat imageVectorScopeLines(in vec2 uv) {\n    float v = 0.0; // Total value\n    float lv = 0.0; // Last value\n    float cv = 0.0; // Current value\n    \n    vec2 cp;\n    vec2 lp = pointTexi(0);\n    \n    float fv = 1.0 / float(VISUAL_ITERATIONS);\n    float k;\n    \n    for(int i = 1; i < VISUAL_ITERATIONS; i++) {\n        cp = pointTexi(i); // Get the point\n        k = float(i) * fv;\n        cv = imageVectorScopeLine(lp, cp, uv) * (1.0 - k); // Set current value and multiply by time\n        v += max(lv, cv); // Eliminate circles between the lines\n        lv = cv; // Set last value to current value\n        lp = cp; // Set last point to current point\n    }\n    \n    return v * fv;\n}\n\nvec3 imageVectorScope(in vec2 uv) {\n    vec3 col = vec3(0.0);\n\n    // Lines\n    float v = imageVectorScopeLines(uv);\n    vec3 emitCol = pow(v * 0.5, 0.5) * VISUAL_LINE_COLOR;\n\n    // Grid\n    vec3 surfaceCol = vec3(1.0);\n    float gridV =  0.25 * (max(max(step(fract(uv.x * 4.0), 0.01), step(1.0 - 0.01, fract(uv.x * 4.0))), max(step(fract(uv.y * 4.0), 0.01), step(1.0 - 0.01, fract(uv.y * 4.0)))));\n    surfaceCol = mix(surfaceCol, vec3(2.0), gridV);\n\n    // Ambient light                                                           Inner display tube light absorption?\n    vec3 lightCol = vec3(0.045) * max(0.0, dot(uv + 0.5, vec2(0.12, 0.15) * 4.0)) * linearstep(-0.5, 3.0, length(uv));\n\n    // Color compositing\n    col = surfaceCol * lightCol;\n    col += emitCol * (1.0 - gridV);\n\n    // Cut out to make a square view\n    col *= step(abs(uv.x), 1.0) * step(abs(uv.y), 1.0);\n\n    return col;\n}\n\nfloat imageOscilloscopeLine(in vec2 a, in vec2 b, in vec2 p) {\n    const float ta = 0.0;\n    const float tb = 0.004;\n    const float dta = ta * ta;\n    const float dtb = tb * tb;\n    float s = saturate(sliderPointLine(a.xy, b.xy, p));\n    float ld = distToLineSqr(a.xy, b.xy, p, s);\n    return linearstep(dtb, dta, ld);\n}\n\nvec3 oscilloscopePoint(float x) {\n    return vec3(x, pointTex(1.0 - ((x * 0.5) + 0.5)));\n}\n\nvec3 imageOscilloscope(in vec2 uv) {\n    float un = 1.0 / min(iResolution.x, iResolution.y);\n    \n    float scale = 2.0;\n    un *= scale;\n    \n    const float segments = 250.0;\n    const float thickness = 1.0 / segments;\n    const float gridThickness = 0.001;\n    const float gridInterval = 2.0;\n    float ip = round(uv.x * segments);\n    float unit = 1.0 / segments;\n\n    vec3 p0 = oscilloscopePoint((ip - 2.0) * unit),\n         p1 = oscilloscopePoint((ip - 1.0) * unit),\n         p2 = oscilloscopePoint((ip) * unit),\n         p3 = oscilloscopePoint((ip + 1.0) * unit),\n         p4 = oscilloscopePoint((ip + 2.0) * unit);\n\n    float dist1 = min(min(distToLine(p0.xy, p1.xy, uv), distToLine(p1.xy, p2.xy, uv)),\n                      min(distToLine(p2.xy, p3.xy, uv), distToLine(p3.xy, p4.xy, uv))) - thickness;\n    \n    float dist2 = min(min(distToLine(p0.xz, p1.xz, uv), distToLine(p1.xz, p2.xz, uv)),\n                      min(distToLine(p2.xz, p3.xz, uv), distToLine(p3.xz, p4.xz, uv))) - thickness;\n    \n    vec3 col = vec3(0.0);\n    \n    col += vec3(0.8, 0.2, 0.2) * smoothstep(un, -un, dist1);\n    col += vec3(0.2, 0.2, 0.8) * smoothstep(un, -un, dist2);\n\n    // Cut out to make a square view\n    col *= step(abs(uv.x), 1.0) * step(abs(uv.y), 1.0);\n    \n    return col;\n}\n\nvoid mainImage(out vec4 o, in vec2 u) {\n    vec2 uv = (u - (0.5 * iResolution.xy)) / min(iResolution.x, iResolution.y);\n    uv *= 2.0;\n    \n    vec3 col = mix(\n        mix(\n            imageVectorScope(uv),\n            imageOscilloscope(uv),\n            texelFetch(iChannel3, ivec2(69, 2), 0).x // nice\n        ),\n        ((texture(iChannel0, (u / iResolution.xy)).xyz * 0.5) + 0.5), // Show cached points visually\n        texelFetch(iChannel3, ivec2(81, 2), 0).x\n    );\n\n    col = pow(col, vec3(1.0 / 1.3));\n\n    // Full depth dithering, a way to make your images less bandy in low color ranges.\n    // Since we're using floats here, we can use that as an opportunity to dither that to the common color format, 32bit rgba.\n    float depth = 256.0;\n    vec3 cd = col * depth;\n    vec3 di = floor(cd);\n    vec3 df = cd - di;\n    vec3 ditheredCol = (step(texture(iChannel2, u * 0.125).x + 0.00001, df) + di) / depth;\n    \n    o = vec4(ditheredCol, 1.0);\n\n    // Just uncomment this line and see how much of a difference this dithering makes in the dark areas.\n    //o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n    MIT License\n\n    Copyright (c) 2022 shyshokayu\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the Software), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, andor sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\n/*\n    Feel free to make your own music/art with this shader,\n    but don't forget to provide credit to me for making this framework.\n*/\n\n#define VISUAL_ITERATIONS 300\n#define VISUAL_DURATION 0.02\n\n#define PI 3.1415926535897932384626433832795\n#define TAU (PI * 2.0)\n\n#define map(a, b, x) (((x) - (a)) / ((b) - (a)))\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define linearstep(a, b, x) saturate(map(a, b, x))\n#define cmix(a, b, x) mix(a, b, saturate(x))\n\n#define steprange(a, b, t) (step(a, t) * step(t, b))\n\n#define distanceSqr(v) dot(v, v)\n\nmat2 rot(float r) {\n    float s = sin(r), c = cos(r);\n    return mat2(c, -s, s, c);\n}\n\n#define rote(r) rot(r * PI)\n\nfloat easeIn(float x) {\n    return x * x;\n}\n\nfloat easeOut(float x) {\n    return 1.0 - easeIn(1.0 - x);\n}\n\nfloat easeInOut(float x) {\n    return mix(easeIn(x), easeOut(x), x);\n}\n\nfloat easeIn(float a, float b, float x) {\n    return easeIn(linearstep(a, b, x));\n}\n\nfloat easeOut(float a, float b, float x) {\n    return easeOut(linearstep(a, b, x));\n}\n\nfloat easeInOut(float a, float b, float x) {\n    return easeInOut(linearstep(a, b, x));\n}\n\nfloat randomnoise11(float p) {\n    return fract(sin(p * 12.9898) * 43758.5453123);\n}\n\nvec2 randomnoise12(float p) {\n    float x = randomnoise11(p);\n    return vec2(x, randomnoise11(p + x));\n}\n\n#define pitch(x) (pow(1.059460646483, x) * 440.0)\n\n#define sine(x) sin((x) * PI)\n#define cosine(x) cos((x) * PI)\n#define square(x) ((fract((x) * 0.5) > 0.5) ? -1.0 : 1.0)\n#define cosquare(x) ((fract(((x) + 0.5) * 0.5) > 0.5) ? -1.0 : 1.0)\n#define saw(x) ((fract((x) * 0.5) * 2.0) - 1.0)\n#define cosaw(x) ((fract(((x) + 0.5) * 0.5) * 2.0) - 1.0)\n#define cotriangle(x) (-(abs(fract((x) * 0.5) - 0.5) * 4.0) + 1.0)\n#define triangle(x) cotriangle((x) + 0.5)\n\nvec3 box(float t) {\n    const vec3[] points = vec3[](\n        vec3(-1.0, -1.0, -1.0),\n        vec3(-1.0, -1.0, 1.0),\n        vec3(-1.0, -1.0, 1.0),\n        vec3(-1.0, 1.0, 1.0),\n        vec3(-1.0, 1.0, 1.0),\n        vec3(-1.0, 1.0, -1.0),\n        vec3(-1.0, 1.0, -1.0),\n        vec3(-1.0, -1.0, -1.0),\n        \n        vec3(1.0, -1.0, -1.0),\n        vec3(1.0, -1.0, 1.0),\n        vec3(1.0, -1.0, 1.0),\n        vec3(1.0, 1.0, 1.0),\n        vec3(1.0, 1.0, 1.0),\n        vec3(1.0, 1.0, -1.0),\n        vec3(1.0, 1.0, -1.0),\n        vec3(1.0, -1.0, -1.0),\n        \n        vec3(-1.0, -1.0, -1.0),\n        vec3(1.0, -1.0, -1.0),\n        vec3(1.0, -1.0, 1.0),\n        vec3(-1.0, -1.0, 1.0),\n        vec3(-1.0, 1.0, 1.0),\n        vec3(1.0, 1.0, 1.0),\n        vec3(1.0, 1.0, -1.0),\n        vec3(-1.0, 1.0, -1.0)\n    );\n    \n    int i = (int(t) * 2) % (points.length());\n    return mix(points[i], points[i + 1], fract(t));\n}\n\nvec3 hihats(float t) {\n    vec3 p = vec3(0.0);\n\n    p.xy = ((randomnoise12(t) * 2.0) - 1.0) * 0.5 * fract(-t + 0.25);\n    \n    p.xy *= step(fract(t * 2.0), 0.125) * step(fract(t * 0.5), 0.85);\n    \n    return p;\n}\n\nvec3 kick(float t) {\n    float tf = (t * 300.0) - (20.0 * (fract(-t * 0.5) * easeOut(0.0, 0.1, fract(t * 3.0))));\n    vec3 p = vec3(sine(tf), cosine(tf), 0.0);\n    p *= 3.0 * fract(-t * 3.0);\n    p *= smoothstep(0.0625, 0.0, t);\n    p *= step(0.0, t);\n    return p;\n}\n\nvec3 kicks(float t) {\n    vec3 p;\n    \n    float t2 = fract(t * 0.125) * 8.0;\n    \n    p += kick(t2);\n    p += kick(t2 - 0.5);\n    p += kick(t2 - 1.75);\n    p += kick(t2 - 2.5);\n    \n    p += kick(t2 - 4.0);\n    p += kick(t2 - 4.5);\n    p += kick(t2 - 5.75);\n    p += kick(t2 - 6.5);\n    p += kick(t2 - 7.5);\n    \n    return p;\n}\n\nvec3 snare(float t) {\n    float tf = (t * 400.0) - (20.0 * (fract(-t * 0.5) * easeOut(-0.015, 0.04, fract(t * 3.0))));\n    vec3 p = vec3(sine(tf), cosine(tf), 0.0);\n    p.xy += ((randomnoise12(t) * 2.0) - 1.0) * 2.0 * fract(t * 3.0);\n    p *= 3.0 * fract(-t * 4.0);\n    p *= smoothstep(0.0625 * 4.0, 0.0, t);\n    p *= step(0.0, t);\n    return p;\n}\n\nvec3 snare2(float t) {\n    float tf = (t * 1200.0) - (20.0 * (fract(-t * 0.5) * easeOut(-0.015, 0.04, fract(t * 3.0))));\n    vec3 p = vec3(sine(tf), cosine(tf), 0.0);\n    p.xy += ((randomnoise12(t) * 2.0) - 1.0) * 2.0 * fract(t * 3.0);\n    p *= 3.0 * fract(-t * 4.0);\n    p *= smoothstep(0.0625 * 3.0 * 0.25, 0.0, t);\n    p *= step(0.0, t);\n    return p;\n}\n\nvec3 snares(float t) {\n    vec3 p;\n    \n    float t2 = fract((t * 0.25) + 0.25) * 4.0;\n    \n    p += snare(t2);\n    p += snare(t2 - 2.0);\n    \n    return p;\n}\n\nvec3 drums(float t) {\n    vec3 p;\n    \n    p += kicks(t);\n    p += snares(t);\n    \n    return p;\n}\n\nfloat freqArpeggiator1(float t) {\n    float i = (fract(floor(t * 8.0) * 0.25) * 16.0);\n    i += (fract(floor(t * 1.0) * 0.25) * 12.0);\n    i += 2.0;\n    \n    return pitch(i);\n}\n\nfloat freqArpeggiator2(float t) {\n    float s = (triangle(floor(t * 8.0) * 0.25) * 0.5) + 0.5;\n    s += ((triangle(floor(t) * 0.5) * 0.5) + 0.5) * 2.0;\n    s += 1.0;\n    \n    return s * 300.0;\n}\n\nfloat freqArpeggiator3(float t) {\n    return ((fract(floor(t * 8.0) * 0.25) * 2.0) + (fract(floor(t) * 0.25) * 2.0) + 1.0) * 440.0;\n}\n\nvec3 spiralSpeedup(float t) {\n    vec3 p;\n    \n    t -= easeOut(0.0, 8.0, t) * 4.0;\n    \n    float freq = freqArpeggiator1(t);\n    float tf = t * freq;\n    \n    p = vec3(sine(tf), cosine(tf), 0.0);\n    p.xy *= 2.0;\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p *= fract((tf * 0.125) + (t * 0.25));\n    \n    p *= (fract(-t) * 0.5) + 0.5;\n    \n    float pan = sine(t * 0.5);\n    p.xy *= vec2((pan * 0.25) + 0.75, (-pan * 0.25) + 0.75);\n    p.xy *= vec2((pan * 0.25) + 0.75, (-pan * 0.25) + 0.75);\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec3 spiralWithHihat(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator1(t);\n    float tf = t * freq;\n    \n    p = vec3(sine(tf), cosine(tf), 0.0);\n    p.xy *= 2.0;\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p *= fract((tf * 0.125) + (t * 0.25));\n    \n    p *= (fract(-t) * 0.5) + 0.5;\n    \n    float pan = sine(t * 0.5);\n    p.xy *= vec2((pan * 0.25) + 0.75, (-pan * 0.25) + 0.75);\n    p.xy *= vec2((pan * 0.25) + 0.75, (-pan * 0.25) + 0.75);\n    \n    p *= easeOut(8.0, 7.75, t);\n    \n    p += hihats(t);\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec3 spiralWithHihatAndDrums(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator1(t);\n    float tf = t * freq;\n    \n    p = vec3(sine(tf), cosine(tf), 0.0);\n    p.xy *= 2.0;\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p *= mix(fract((tf * 0.125) + (t * 0.25)), 1.0, (1.0 - fract(-t)) * easeOut(0.0, 8.0, t));\n    \n    p *= (fract(-t) * 0.5) + 0.5;\n    \n    vec2 p2 = p.xy;\n    float pan = sine(t * 0.5);\n    p2 *= vec2((pan * 0.25) + 0.75, (-pan * 0.25) + 0.75);\n    p2 *= vec2((pan * 0.25) + 0.75, (-pan * 0.25) + 0.75);\n    \n    p.xy = mix(p.xy, p2, linearstep(16.0, 8.0, t));\n    \n    p += kicks(t);\n    p += hihats(t);\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec3 transitionToRegularSpring(float t) {\n    vec3 p;\n    \n    float t2 = t + 16.0;\n    \n    float freq = freqArpeggiator1(t2);\n    float tf = t2 * freq;\n    \n    p = vec3(sin(tf * 3.1415), 0.0, cos(tf * 3.1415));\n    \n    tf += freq * 0.0625 * 0.0625 * 0.125;\n    \n    p.y = mix(\n        (easeIn(fract(tf * 0.25)) * 2.0) - 1.0,\n        (easeOut(fract(tf * 0.25)) * 2.0) - 1.0,\n        (sine(t * 8.0) * 0.5) + 0.5\n    );\n    \n    p.yz *= rot(((easeIn(0.5, 0.0, t) * -0.5) * PI));\n    \n    p += drums(t);\n    p += hihats(t);\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy = mix(p.xy * 0.5 * ((fract(-t) * 0.5) + 0.5), p.xy / p.z, easeOut(0.0, 0.5, t));\n    \n    return p;\n}\n\nvec3 regularSpring(float t) {\n    vec3 p;\n    \n    float t2 = t + 16.0;\n    \n    float freq = freqArpeggiator1(t2);\n    float tf = t2 * freq;\n    \n    // A little different than normal but it sounds better this way imo (slight PI imperfection to desync spring cycle)\n    p = vec3(sin(tf * 3.1415), 0.0, cos(tf * 3.1415));\n    \n    p.y = mix(\n        (easeIn(fract(tf * 0.25)) * 2.0) - 1.0,\n        (easeOut(fract(tf * 0.25)) * 2.0) - 1.0,\n        (sine(t * 8.0) * 0.5) + 0.5\n    );\n    \n    p += drums(t);\n    p += hihats(t);\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec3 regularSpringRotating(float t) {\n    vec3 p;\n    \n    float t2 = t + 16.0;\n    \n    float freq = freqArpeggiator1(t2);\n    float tf = t2 * freq;\n    \n    p = vec3(sin(tf * 3.1415), 0.0, cos(tf * 3.1415));\n    \n    p.y = mix(\n        (easeIn(fract(tf * 0.25)) * 2.0) - 1.0,\n        (easeOut(fract(tf * 0.25)) * 2.0) - 1.0,\n        (sine(t * 8.0) * 0.5) + 0.5\n    );\n    \n    p.yz *= rot(t * 0.5 * PI);\n    p.xz *= rot(t * 0.5 * PI);\n    p.xy *= rot(t * 0.5 * PI);\n    \n    p += drums(t);\n    p += hihats(t);\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec3 sphericalSpring(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator1(t);\n    float tf = t * freq;\n    \n    t = fract(t * 0.125) * 8.0;\n    p = vec3(sine(tf), 0.0, cosine(tf));\n    \n    p.y = (((fract((tf * 0.125) + (t * 0.5))) * 2.0) - 1.0);\n    \n    p.xz *= abs(sine((t * freq * 0.125) + (t * 0.5)));\n    \n    p.xy *= rot(t * 0.5 * PI);\n    \n    p *= 1.25;\n    \n    p += drums(t);\n    p += hihats(t);\n    \n    p *= 0.75 + 0.25 * fract(-t * 8.0);\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec3 sphericalSpringRotating(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator1(t);\n    float tf = t * freq;\n    \n    t = fract(t * 0.125) * 8.0;\n    p = vec3(sine(tf), 0.0, cosine(tf));\n    \n    p.y = (((fract((tf * 0.125) + (t * 0.5))) * 2.0) - 1.0);\n    \n    p.xz *= abs(sine((t * freq * 0.125) + (t * 0.5)));\n    \n    p.xy *= rot(t * 0.5 * PI);\n    p.yz *= rot(t * 0.5 * PI);\n    \n    p *= 1.25;\n    \n    p += drums(t);\n    p += hihats(t);\n    \n    p *= 0.75 + 0.25 * fract(-t * 8.0);\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec3 springTunnel(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator1(t);\n    float tf = t * freq;\n    \n    tf += t;\n    p = vec3(sine(tf), cosine(tf), 0.0);\n    p.xy *= 3.7;\n    \n    p *= pow(fract((tf * 0.125) + (t - pow(fract(-t * 2.0), 2.0)) * 0.5), 2.0);\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p.xy = clamp(p.xy, vec2(-1.5), vec2(1.5));\n    \n    // Clamping fun\n    /*vec2 clbl = vec2(-((sine(t * 0.5) * 0.25) + 1.0), -((sine(t * 0.5) * 0.25) + 1.0));\n    vec2 clbr = vec2(((sine(t * 0.5 + 0.5) * 0.25) + 1.0), -((sine(t * 0.5 + 0.5) * 0.25) + 1.0));\n    vec2 cltl = vec2(-((sine(t * 0.5 + 1.5) * 0.25) + 1.0), ((sine(t * 0.5 + 1.5) * 0.25) + 1.0));\n    vec2 cltr = vec2(((sine(t * 0.5 + 1.0) * 0.25) + 1.0), ((sine(t * 0.5 + 1.0) * 0.25) + 1.0));\n    \n    float cll = mix(clbl.x, cltl.x, linearstep(clbl.y, cltl.y, p.y));\n    float clb = mix(clbl.y, clbr.y, linearstep(clbl.x, clbr.x, p.x));\n    float clr = mix(clbr.x, cltr.x, linearstep(clbr.y, cltr.y, p.y));\n    float clt = mix(cltl.y, cltr.y, linearstep(cltl.x, cltr.x, p.x));\n    \n    p.xy = clamp(p.xy, vec2(cll, clb), vec2(clr, clt));*/\n    \n    p.xy = clamp(p.xy, vec2(-1.25), vec2(1.25));\n\n    p += drums(t);\n    p += hihats(t);\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec3 springTunnel2(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator1(t);\n    float tf = t * freq;\n    \n    tf += t;\n    p = vec3(sine(tf), cosine(tf), saw(tf * 0.25 - t * 0.25) + 1.0);\n    \n    p += drums(t);\n    p += hihats(t);\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p -= vec3(0.0, 0.0, -0.5);\n    p.xy /= p.z * 2.0;\n    \n    return p;\n}\n\nvec3 springTunnelEnd(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator1(t);\n    float tf = t * freq;\n    \n    tf += t;\n    p = vec3(sine(tf), cosine(tf), 0.0);\n    p.xy *= 3.7;\n    \n    p *= mix(pow(fract((tf * 0.125) + (t + pow(fract(-t * 2.0), 2.0)) * 0.5), 2.0), 0.7, (1.0 - fract(-t * 0.5)));\n    \n    p.xy = clamp(p.xy, vec2(-1.25), vec2(1.25));\n    \n    p += drums(t);\n    p += hihats(t);\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec3 springTunnelEndFadeToCircle(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator1(t);\n    float tf = t * freq;\n    \n    float kd = easeOut(12.0, 16.0, t);\n    \n    tf += t;\n    p = vec3(sine(tf), cosine(tf), 0.0);\n    p.xy *= mix(3.7, 1.25, kd);\n    \n    p *= mix(mix(pow(fract((tf * 0.125) + (t + pow(fract(-t * 2.0), 2.0)) * 0.5), 2.0), 0.7, (1.0 - fract(-t * 0.5))), 1.0, kd);\n    \n    p.xy = clamp(p.xy, vec2(-1.25), vec2(1.25));\n    \n    p += drums(t);\n    p += hihats(t);\n    \n    p *= 1.0 - (easeOut(7.75, 8.0, fract(t * 0.125) * 8.0) * fract(floor(t * 16.0) * 0.5));\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec3 spinningDonut(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator1(t);\n    float tf = t * freq;\n    \n    p = vec3(0.0, 0.0, 0.0);\n    \n    p.x -= 0.5 * fract(-t * 4.0);\n    p.xz *= rote(tf * (((fract(floor(t * 2.0) * 0.25) * 8.0) + 3.0)));\n    \n    p.x -= 1.0;\n    p.xy *= rote(tf);\n    \n    p.yz *= rote(t * 0.25);\n    p.xz *= rote(t * 1.0);\n    p.xy *= rote(t * 0.5);\n    \n    p += drums(t);\n    p += hihats(t);\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\n// Unused for now\nvec3 fractalDonut(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator1(t) * 0.25;\n    float tf = t * freq;\n    \n    p = vec3(0.0, 0.0, 0.0);\n    \n    float st = 8.0;\n    \n    p.x -= 0.0625 * 0.25;\n    p.xy *= rote(tf * 512.0);\n    \n    p.x -= 0.0625;\n    p.xy *= rote(tf * 64.0);\n    \n    p.x -= 0.25;\n    p.xz *= rote(tf * 8.0);\n    \n    p.x -= 1.0;\n    p.xy *= rote(tf);\n    \n    p += vec3(0.0, 0.0, 0.0);\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    p.xy *= step(0.0, p.z);\n    \n    return p;\n}\n\n// Unrelated, might remove later but it sounds cool\nvec3 spikyBeam(float t) {\n    vec3 p;\n    \n    float freq = freqArpeggiator2(t);\n    float tf = t * freq;\n    \n    float k = sine(tf) + sine(tf * 0.5) + sine(tf * 0.25);\n    p = vec3(k, k, 0.0);\n    \n    p.xy *= rote(t);\n    \n    p *= (fract(-t * 8.0) * 0.5) + 0.5;\n    \n    p += drums(t);\n    p += hihats(t);\n    \n    p -= vec3(0.0, 0.0, -2.0);\n    p.xy /= p.z;\n    \n    return p;\n}\n\nvec2 point(float t) {\n    vec3 p = vec3(0.0);\n    \n    t -= 2.0;\n    t = max(t, -2.0);\n    \n    float t2 = t;\n    \n    p += steprange(0.0, 8.0, t2) * spiralSpeedup(t2);\n    t2 -= 8.0;\n    \n    p += steprange(0.0, 8.0, t2) * spiralWithHihat(t2);\n    t2 -= 8.0;\n    \n    p += steprange(0.0, 8.0, t2) * spiralWithHihatAndDrums(t2);\n    t2 -= 8.0;\n    \n    p += steprange(0.0, 0.5, t2) * transitionToRegularSpring(t2);\n    p += steprange(0.5, 8.0, t2) * regularSpring(t2);\n    t2 -= 8.0;\n    \n    p += steprange(0.0, 8.0, t2) * regularSpringRotating(t2);\n    t2 -= 8.0;\n    \n    p += steprange(0.0, 8.0, t2) * sphericalSpring(t2);\n    t2 -= 8.0;\n    \n    p += steprange(0.0, 8.0, t2) * sphericalSpringRotating(t2);\n    t2 -= 8.0;\n    \n    p += steprange(0.0, 16.0, t2) * springTunnel(t2);\n    t2 -= 16.0;\n    \n    p += steprange(0.0, 12.0, t2) * springTunnelEnd(t2);\n    p += steprange(12.0, 16.0, t2) * springTunnelEndFadeToCircle(t2);\n    t2 -= 16.0;\n    \n    p += steprange(0.0, 16.0, t2) * spinningDonut(t2);\n    p *= smoothstep(16.0, 15.75, t2);\n    t2 -= 16.0;\n    \n    //p = springTunnel2(t);\n    \n    //p = spikyBeam(t);\n    \n    //p = round(p * 32.0) / 32.0;\n    \n    return clamp(p.xy, vec2(-1.0), vec2(1.0));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Samples coordinates every frame instead of sampling every iteration for every pixel for every frame\nvoid mainImage(out vec4 o, in vec2 u) {\n    // Estimate time based on pixel and calculate point\n    u.y -= 0.5; // For some reason this fixes the error where t > VISUAL_ITERATIONS is wrong\n    float t = u.x + (u.y * iResolution.x);\n    \n    // Skip samples if outside used region\n    if(t > float(VISUAL_ITERATIONS)) { // Not perfect but saves a bit of performance (not sure because of SIMD)\n        o = vec4(0.0, 0.0, 0.5, 1.0);\n        return;\n    }\n    \n    t /= float(VISUAL_ITERATIONS);\n    t *= VISUAL_DURATION;\n    \n    // Output point result\n    o.xy = point((iTime - t) + iTimeDelta);\n    o.zw = vec2(0.0, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 mainSound(int s, float t) {\n    vec2 v = point(t);\n\n    // Some background noise (optional)\n    v += (((texture(iChannel0, vec2(t * 1.4236, t * 1.2267)).xy * 2.0) - 1.0) * 0.0625 * 0.25);\n\n    return v * 0.25; // User convenience, we don't want to destroy any ears\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}