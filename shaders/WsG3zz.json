{
    "Shader": {
        "info": {
            "date": "1569608231",
            "description": "Simulator for Life-like and Generations rules: http://www.conwaylife.com/wiki/Generations\nCurrently set to simulate Brian's Brain (B2/S/3)",
            "flags": 32,
            "hasliked": 0,
            "id": "WsG3zz",
            "likes": 9,
            "name": "Generations CA",
            "published": 3,
            "tags": [
                "cellular",
                "gameoflife",
                "ca",
                "automaton",
                "cellularautomaton",
                "conwaysgameoflife",
                "briansbrain",
                "generations"
            ],
            "usePreview": 0,
            "username": "id523",
            "viewed": 524
        },
        "renderpass": [
            {
                "code": "// See Common for settings\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int state = int(texelFetch(iChannel0, ivec2(fragCoord), 0).x);\n    fragColor = state == 0 ? deadColor : mix(liveColor, fadeColor, float(state - 1) / (float(stateCount) - 1.99));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// hash13 from https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nint st(ivec2 pos, int dx, int dy) {\n    return int(texelFetch(iChannel0, (pos + ivec2(dx, dy) + ivec2(iResolution.xy)) % ivec2(iResolution.xy), 0).x);\n}\n\nint stv(ivec2 pos, int dx, int dy) {\n    return int(st(pos,dx,dy) == 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pos = ivec2(fragCoord);\n    int state = st(pos, 0, 0);\n    if (iFrame == 0) {\n        state = int(hash13(vec3(fragCoord, fragCoord.x + iDate.w)) + initDensity);\n        state *= int(length(fragCoord - iResolution.xy * .5) < initRadius * iResolution.x);\n    } else {\n        int neighborTotal =\n            stv(pos,-1,-1) +\n            stv(pos,-1,0) +\n            stv(pos,-1,1) +\n            stv(pos,0,-1) +\n            stv(pos,0,1) +\n            stv(pos,1,-1) +\n            stv(pos,1,0) +\n            stv(pos,1,1);\n        int transition = stateTransitions[9 * min(state, 1) + neighborTotal];\n        if (state == 0) {\n            state = transition;\n        } else if (state == 1) {\n            state = 2 - transition;\n        } else {\n            state = state + 1;\n        }\n        state = state % stateCount;\n    }\n    fragColor = vec4(state);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Current rule: B2/S/3\n\nconst int stateTransitions[18] = int[18](\n//  0 1 2 3 4 5 6 7 8\n    0,0,1,0,0,0,0,0,0, // B\n    0,0,0,0,0,0,0,0,0  // S\n);\nconst int stateCount = 3;\n\nconst vec4 deadColor = vec4(0.0, 0.0, 0.0, 1.0);\nconst vec4 liveColor = vec4(1.0, 1.0, 0.0, 1.0);\nconst vec4 fadeColor = vec4(1.0, 0.0, 0.0, 1.0);\n    \nconst float initDensity = 0.1;\nconst float initRadius = 0.1;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}