{
    "Shader": {
        "info": {
            "date": "1586766755",
            "description": "Truchet tubing +...",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd2yWw",
            "likes": 18,
            "name": "Divine Light",
            "published": 3,
            "tags": [
                "sunbeam",
                "truchet"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 661
        },
        "renderpass": [
            {
                "code": "// \"Divine Light\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat Minv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv3 (vec3 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm1 (float p);\n\nvec3 ltPos, ltAx;\nvec2 trkAx, trkAy, trkFx, trkFy;\nfloat dstFar, tCur;\nconst float pi = 3.14159;\n\nvec3 TrackPath (float t)\n{\n  return vec3 (dot (trkAx, sin (trkFx * t)), dot (trkAy, sin (trkFy * t)), t);\n}\n\nvec3 TrackVel (float t)\n{\n  return vec3 (dot (trkAx * trkFx, cos (trkFx * t)), dot (trkAy * trkFy, cos (trkFy * t)), 1);\n}\n\nfloat TubeDist (vec3 p)\n{\n  vec2 s, t;\n  float w, a;\n  t = p.xy;\n  t *= t;\n  s = vec2 (sqrt (sqrt (dot (t, t))), p.z) - 0.5;\n  t = cos (64. * pi * s);\n  w = 0.03 * (1. + 0.1 * t.x * t.y);\n  a = 2. * pi * (floor (16. * (atan (p.y, - p.x) / (2. * pi)) + 0.5) / 16.);\n  return min (SmoothMax (PrRoundBox2Df (s, vec2 (w), 0.03),\n     0.04 - abs (dot (p.yx, sin (a + vec2 (0.5 * pi, 0.)))), 0.01),\n     PrRoundBox2Df (s, vec2 (0.5 * w), 0.03));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, db;\n  float r;\n  q = p;\n  q.xy -= TrackPath (q.z).xy;\n  r = floor (8. * Hashfv3 (floor (q)));\n  q = fract (q);\n  if (r >= 4.) q = q.yxz;\n  r = mod (r, 4.);\n  if (mod (r, 2.) == 0.) q.x = 1. - q.x;\n  if (abs (r - 1.5) == 0.5) q.y = 1. - q.y;\n  db = vec3 (TubeDist (q), TubeDist (vec3 (q.z, 1. - q.x, q.y)), TubeDist (vec3 (1. - q.yz, q.x)));\n  return 0.7 * Minv3 (db);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0005, -0.0005);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float t, gd, b;\n  t = 4. * tCur;\n  b = dot (vec2 (atan (rd.x, rd.y), 0.5 * pi - acos (rd.z)), vec2 (2., sin (rd.x)));\n  gd = clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.);\n  return mix (vec3 (0.8, 0.5, 0.), vec3 (0.9, 0.4, 0.2), 0.5 + 0.5 * rd.z) *\n     (0.12 + 0.22 * (rd.z + 1.) * (rd.z + 1.)) * (2. + 0.3 * gd);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn, ltVec, ltDir;\n  float dstObj, nDotL, ltDist, atten;\n  dstObj = ObjRay (ro, rd);\n  bgCol = BgCol (rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = vec4 (mix (vec3 (0.75, 0.7, 0.7), vec3 (0.8, 0.7, 0.7),\n       smoothstep (0.45, 0.55, Noisefv3 (32. * ro))), 0.1);\n    ltVec = ltPos - ro;\n    ltDist = length (ltVec);\n    ltDir = ltVec / ltDist;\n    atten = min (1., 0.2 + smoothstep (0.7, 0.95, dot (ltAx, - ltDir))) / (1. + 0.2 * ltDist * ltDist);\n    nDotL = max (dot (vn, ltDir), 0.);\n    col = atten * (col4.rgb * (0.2 + 0.8 * nDotL * nDotL) +\n       col4.a * pow (max (dot (reflect (rd, vn), ltDir), 0.), 32.));\n    col = mix (col, bgCol, 0.1 + 0.9 * smoothstep (0., 0.85, dstObj / dstFar));\n  } else col = bgCol;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv;\n  float az, el, zmFac, fSpd, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  }\n  trkAx = 0.07 * vec2 (2., 0.9);\n  trkAy = 0.07 * vec2 (1.3, 0.66);\n  trkFx = vec2 (0.2, 0.23);\n  trkFy = vec2 (0.17, 0.24);\n  fSpd = 1.;\n  t = fSpd * tCur;\n  ro = TrackPath (t);\n  ro.xy += 0.05 * sin (0.05 * pi * tCur);\n  vd = normalize (TrackVel (t));\n  vuMat = StdVuMat (el + sin (vd.y), az + atan (vd.x, vd.z));\n  zmFac = 2.5;\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  rd.xy = Rot2D (rd.xy, 0.07 * pi * (Fbm1 (0.2 * tCur) - 0.5));\n  ltPos = ro + vuMat * vec3 (0.1, 0.1, 0.);\n  ltAx = vuMat * vec3 (0., 0., 1.);\n  dstFar = 50.;\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xyz)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}