{
    "Shader": {
        "info": {
            "date": "1721908978",
            "description": "https://www.shadertoy.com/view/ssc3Wr",
            "flags": 0,
            "hasliked": 0,
            "id": "4f2yzh",
            "likes": 1,
            "name": "colored beads",
            "published": 3,
            "tags": [
                "color",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "\n\n\n#define centralSun      1\n#define glow\t\t( 1./160. )\n#define move\t\t1\n#define col             vec3( 1., 1.5, 6. )\n#define rotationSpeed\t( 1./3. )\n\n//                      --=> move mouse x for number of balls \n\n// gfx options\n#define AA\t\t1.\n#define resolution iResolution.xy\n// code \n#define tau 6.28318530718\n#define POS gl_FragCoord\n#define OUT gl_FragColor\n#define res resolution\n#define rot( a ) mat2( cos( a*tau ), -sin( a*tau ), sin( a*tau ), cos( a*tau ) )\n#define flip( x ) ( 1. - ( x ) )\nprecision highp float;\n#define time iTime\n\n\nvec2 p, p0;\nvec3 c, c0;\nvec3 hsv2rgb(vec3 c) { vec4 K = vec4( 1., 2./3., 1./3., 3. ); vec3 p = abs( fract( c.xxx + K.xyz ) * 6. - K.www ); return c.z * mix( K.xxx, clamp( p - K.xxx, 0., 1. ), c.y ); }\nfloat rectangle( vec2 p, vec4 rect ) { vec2 hv = step( rect.xy+cos(iTime), p )*step( p, rect.zw ); return hv.x*hv.y; }\nfloat sdTetrahedron( vec3 p ) { return ( max( abs( p.x + p.y ) - p.z, abs( p.x - p.y ) + p.z ) - 1. )/( 1.7320508075 ); }  // 1.73205.. = sqrt( 3. )\n\n\n\nfloat nSpheres( vec3 p, float r, float num )  // by ändrom3da\n\t#define size ( 1./3. )\n\t{ float theta = atan( p.x, p.y ) + tau/2.;\n\tfloat nt = num/tau; float pn  = ( floor( theta*nt ) + .5 )/nt;\n\tvec3 circleCenter = vec3( -sin( pn ), -cos( pn ), 0. )*r;\n\tfloat circleRadius = r*sin( .5/nt );\n\treturn distance( p, circleCenter ) - circleRadius*( sin( theta + 4.*time )*.5 + .7 )*0.66; }\nvec3 palette2( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat map( vec3 p )\n\t{ vec3 trans = vec3( 0 );\n\tfloat numSuns = 10.;\np.yz *= rot( time*tau*rotationSpeed/43. );\n\tp.xz *= rot( time*tau*rotationSpeed/15. );\n\tp.xy *= rot( time*tau*rotationSpeed/4. );\n\tfloat d = nSpheres( p+cos(iTime), 9.+cos(iTime), numSuns );\n\t#if ( centralSun == 1 )\n\tfloat tetra1 = sdTetrahedron( p/1.5 );\n\tp.xy *= rot ( .25 );\n\tfloat tetra2 = sdTetrahedron( p/1.5 );\n\tfloat tetra = min( tetra1, tetra2 );\n\td = min( tetra, d );\n\t#endif\n\treturn d; }\n\nvoid mainImage3( vec2 p )\n\t{ vec3 camPos = vec3( 0., 0., -21.5 );\n\tvec3 rayDir = normalize( vec3( p, 1. ) );\n\tfloat depth = 0.;\n\tfor ( int i = 0; i < 26; i++ )\n\t\t{ vec3 rayPos = camPos + rayDir * depth;\n\t\tfloat dist = map( rayPos );\n\t\tc += vec3( glow +cos(iTime))/( dist );\n\t\tif ( dist < 0.201 ) { c = vec3( 4. ); break; }\n\t\tdepth += dist; }\n\t\n\n\t }\n#define PI (3.14159265358979)\n\n// gives pure saturated color from input [0, 6) for phase\nvec3 hue(float x) {\n    x = mod(x, 6.);\n    return clamp(vec3(\n        abs(x - 3.) - 1.,\n        -abs(x - 2.) + 2.,\n        -abs(x - 4.) + 2.\n    ), 0., 1.);\n}\n\n// does pseudo overexposure filter\nvec3 deepfry(vec3 rgb, float x) {\n    rgb *= x;\n    return rgb + vec3(\n      max(0., rgb.g - 1.) + max(0., rgb.b - 1.),\n      max(0., rgb.b - 1.) + max(0., rgb.r - 1.),\n      max(0., rgb.r - 1.) + max(0., rgb.g - 1.)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\t{ \n       vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    p0 = POS.xy/res; \n    \n    float time = mod(iTime, 6.);\n    // Scales coords so that the diagonals are all dist 1 from center\n    float scale = length(iResolution.xy);\n \n\n    \n    // for wormhole or perspective effect\n    float r = ((uv.x*uv.x+uv.y*uv.y)  * -1.6) * (1.0 + 0.4 );\n    float theta = atan(uv.y, uv.x);\n    \n    \n    // if you want the angle in range [0, 1) and not (-π, π]\n    // divide angle by 2pi and mod1 it\n    // float theta = fract(atan(uv.y, uv.x) / 6.2831853071795);\n\n    // Time varying pixel color\n    vec3 col2 = deepfry(\n        hue(r * -3. + theta * 6. / PI + time * 3.),\n        1. + 0.5 * sin(r * 1.8 + theta * 1.0 + time * -2. * PI)\n    );\n     vec2 p=(gl_FragCoord.xy*2.0-resolution)/min(resolution.x,resolution.y);\n  float t=8./abs(0.4-0.6*length(p)+0.01);\n\n \tfor ( float kk = 0.; kk < AA; kk++ ) for ( float kkk = 0.; kkk < AA; kkk++ ) // nested AA loop\n    \t\t{ vec2 k = ( vec2( kk, kkk ) - .5 )/vec2( AA ); c = vec3( 0. );\n\t\n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col3 = palette2(length(uv) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col3 * d;\n    }\n\t\t                        p = ( POS.xy - k - res/2. )/res.y;  \n\t\tmainImage3( p );\n\t\tc0 += c; } // acc the color    \n\n\t fragColor= vec4( c0*col2, 1. ); \n      \n    \n    }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}