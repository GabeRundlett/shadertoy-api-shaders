{
    "Shader": {
        "info": {
            "date": "1564424301",
            "description": "A story about the struggle of putting something broken back together.\n\nMusic by [url=https://www.youtube.com/watch?v=P-vBzyzt9hc]Kim√©ra[/url]\n\n~ 5' 37\" long - best viewed in full screen (if you have the patience and the computing power :D )",
            "flags": 96,
            "hasliked": 0,
            "id": "3llSWj",
            "likes": 14,
            "name": "Long Ago",
            "published": 3,
            "tags": [
                "raymarching",
                "edgedetection",
                "abstract",
                "musicvideo",
                "musicclip"
            ],
            "usePreview": 0,
            "username": "s23b",
            "viewed": 707
        },
        "renderpass": [
            {
                "code": "// post processing step //\n\n// simple hash function\nfloat hash(vec2 uv) {\n    float f = fract(sin(sin(dot(uv, vec2(.00912398, .00231233))) * 1e6) * 1e4);\n    return f;\n}\n\n// 2d noise function (linear interpolation between hash of integer bounds)\nfloat noise(vec2 uv) {\n    vec2 fuv = floor(uv);\n    vec4 cell0 = vec4(\n        hash(fuv + vec2(0, 0)),\n        hash(fuv + vec2(0, 1)),\n        hash(fuv + vec2(1, 0)),\n        hash(fuv + vec2(1, 1))\n    );\n    vec2 axis0 = mix(cell0.xz, cell0.yw, smoothstep(0., 1., fract(uv.y)));\n    float val0 = mix(axis0.x, axis0.y, smoothstep(0., 1., fract(uv.x)));\n    return val0;\n}\n\n// fractional brownian motion\nfloat fbm(vec2 uv) {\n    float f = 0.;\n    float r = 1.;\n    for (int i = 0; i < 4; ++i) {\n        uv.x += iTime;\n        f += noise((uv + 10.) * r) / (r *= 2.);\n    }\n    return f / (1. - 1. / r);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    // get low, mid and high frequency values\n    vec3 freq = vec3(texture(iChannel2, vec2(.1, .25)).x,\n                 texture(iChannel2, vec2(.3, .25)).x,\n                 texture(iChannel2, vec2(.8, .25)).x);\n    \n    // add glitches at specific moments during the song based on frequency intensity\n    float glitchiness = smoothstep(20., 0., abs(iTime - 10.) - 5.) * 1. * freq.x;\n    glitchiness += smoothstep(10., 0., abs(iTime - 55.)) * 1. * freq.z;\n    glitchiness += smoothstep(40., 0., abs(iTime - 195.) - 30.) * 1. * freq.z;\n    glitchiness += smoothstep(14., 0., abs(iTime - 335.)) * 2. * freq.z;\n    glitchiness = smoothstep(.4, .7, glitchiness);\n    \n    // calculate coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cell = floor(uv * 20. * iResolution.x / iResolution.y);\n    \n    // calculate displacemet glitches\n    float glitch1 = step(fbm(cell * vec2(.02, .2)), .6);\n    vec2 glitch2 = vec2(fbm(vec2(iTime * 200.)), fbm(vec2(200. + iTime * 200.)));\n\tvec2 glitches = (glitch2 - .5) * .1 + vec2(glitch1, 0) * .02;\n    vec4 tex = texture(iChannel0, uv + glitches * glitchiness);\n    \n    // calculate noise glitces\n    float glitchHash = step(fbm(cell.yx * vec2(.01, .7)), .4) * glitchiness;\n    \n    // add everything up\n    fragColor = tex + hash(uv * 100. + iTime) * .2 * glitchHash;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 19177,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/user-6114752/long-ago"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// raymarching step //\n\n// a bunch of constants to set up the place and directon of the cuts\nconst vec3 OFF_TOP_M_RIGHT = vec3(0, -.21,0);\nconst vec3 DIR_TOP_M_RIGHT = normalize(vec3(.2, -.14, -.1));\nconst vec3 OFF_TOP_M_LEFT = vec3(-.09, 0, 0);\nconst vec3 DIR_TOP_M_LEFT = normalize(vec3(.2, .075, 0));\nconst vec3 OFF_TOP_K = vec3(-.57, 0, 0);\nconst vec3 DIR_TOP_K = normalize(vec3(.1, -.2, -.1));\nconst vec3 OFF_BOT_K = vec3(-.57, 0, 0);\nconst vec3 DIR_BOT_K = normalize(vec3(-.1, -.2, .1));\nconst vec3 OFF_BOT_R = vec3(0, 0, -.17);\nconst vec3 DIR_BOT_R = normalize(vec3(.1, .18, .1));\n// no, they aren't random\nconst vec3 OFF_A = vec3(.4, 0,0);\nconst vec3 DIR_A = normalize(vec3(.12, -.1, .1));\nconst vec3 OFF_I = vec3(.3, 0, 0);\nconst vec3 DIR_I = normalize(vec3(.1, 0, -.2));\nconst vec3 OFF_M_LEFT = vec3(-.169, 0, 0);\nconst vec3 DIR_M_LEFT = normalize(vec3(.1, 0, 0));\nconst vec3 OFF_R_RIGHT = vec3(0, 0, .21);\nconst vec3 DIR_R_RIGHT = normalize(vec3(.1, .18, .1));\nconst vec3 OFF_R_LEFT = vec3(0, 0, -.165);\nconst vec3 DIR_R_LEFT = normalize(vec3(.1, 0, .1));\n// they're actually made to resemble the logo of the band\n\n// the displacement amount\nfloat _amount;\n\n// rotate 2d space with given angle\nvoid tRotate(inout vec2 p, float angel) {\n    float s = sin(angel), c = cos(angel);\n\tp *= mat2(c, -s, s, c);\n}\n\n// union\nfloat opU(float a, float b) {\n    return min(a, b);\n}\n\n// intersection\nfloat opI(float a, float b) {\n    return max(a, b);\n}\n\n// substraction\nfloat opS(float a, float b) {\n    return max(a, -b);\n}\n\n// split down space along a plane with normal 'amount' a the point 'offset' and pull apart in two directions\n// returns the signed distance to the split\nfloat tStretch(inout vec3 p, vec3 offset, vec3 direction, float amount) {\n    float s = dot(p -= offset, direction);\n    p -= direction * clamp(s, -amount, amount) - offset;\n    return abs(s) - amount;\n}\n\n// signed distance to a prism\nfloat sdPrism(vec3 p) {\n    float d = abs(p.y) - .1;\n    d = opS(d, -p.z);\n    d = opS(d, .4 + (p.z - abs(p.x)) * SQ1_2);\n    return d;\n}\n\n// distance to the bottom prism\nfloat sdTopPrism(vec3 p, float amount) {\n    p -= clamp(amount, 0., .02) * vec3(0,1, 4);\n    float cut = tStretch(p, OFF_TOP_M_RIGHT, DIR_TOP_M_RIGHT, amount);                      // M right\n    cut = opU(cut, tStretch(p, OFF_TOP_M_LEFT, DIR_TOP_M_LEFT, amount));                    // M left\n    cut = opU(cut, tStretch(p, OFF_TOP_K * (1.+amount * 3.), DIR_TOP_K, amount));           // K\n    float d = sdPrism(p - vec3(0, .1 + amount, 0));\n    return opS(d, cut);\n}\n\n// distance to the bottom prism\nfloat sdBottomPrism(vec3 p, float amount) {\n    float cut = tStretch(p, OFF_BOT_K * (1.+amount * 3.), DIR_BOT_K, amount);              // K\n    cut = opU(cut, tStretch(p, OFF_BOT_R, DIR_BOT_R, amount));                             // R right\n    float d = sdPrism(p + vec3(0, .1 + amount, 0));\n    return opS(d, cut);\n}\n\n// distance estimation of everything together\nfloat map(vec3 p) {\n    p.z -= .2;\n    float cut = tStretch(p, OFF_A, DIR_A, _amount);                                        // A\n    cut = opU(cut, tStretch(p, OFF_I, DIR_I, _amount));                                    // I\n    cut = opU(cut, tStretch(p, OFF_M_LEFT * (1. + _amount * 15.), DIR_M_LEFT, _amount));   // M\n    cut = opU(cut, tStretch(p, OFF_R_RIGHT, DIR_R_RIGHT, _amount));                        // R right\n    cut = opU(cut, tStretch(p, OFF_R_LEFT * (1. + _amount * 10.), DIR_R_LEFT, _amount));   // R left\n    float d = opU(sdTopPrism(p, _amount), sdBottomPrism(p, _amount));\n    return opS(d, cut);\n}\n\n// trace the scene from ro (origin) to rd (direction, normalized)\n// until hit or reached maxDist, outputs distance traveled and the number of steps\nfloat trace(vec3 ro, vec3 rd, float maxDist, out float steps) {\n    float total = 0.;\n    steps = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; ++i) {\n        ++steps;\n        float d = map(ro + rd * total);\n        total += d;\n        if (d < EPS || maxDist < total) break;\n    }\n    \n    return total;\n}\n\n// calculate the normal vector\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(.0001, 0);\n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n\t));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // transform screen coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // transform mouse coordinates\n\tvec2 mouse = iMouse.xy / iResolution.xy * 2. - 1.;\n    mouse.x *= iResolution.x / iResolution.y;\n    mouse *= 2.;\n    \n    // set up camera position\n    vec3 ro =  vec3(0, 0, -3);\n    vec3 rd = normalize(vec3(uv, FOV));\n    \n    // calculate animation progress\n    float progress = smoothstep(TOTAL_TIME, -TOTAL_TIME * .3, iTime);\n    _amount = .003 + progress * .3;\n    \n    // rotate the camera around the center\n    vec2 rot = vec2(-progress * 8., .3 - progress * 2.);\n    tRotate(rd.yz, rot.y);\n    tRotate(rd.xz, rot.x);\n    tRotate(ro.yz, rot.y);\n    tRotate(ro.xz, rot.x);\n    \n    // march\n    float steps, dist = trace(ro, rd, RENDER_DIST, steps); \n    \n    // calculate hit point coordinates\n    vec3 p = ro + rd * dist;\n    \n    // calculate normal\n    vec3 normal = getNormal(p);\n    \n    // output of this buffer is the normal and the distance marched\n    fragColor = vec4(normal, dist);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// edge detection step //\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 tex = texture(iChannel0, uv);\n    vec4 b = texture(iChannel1, uv);\n    \n    // radius to check around current point\n    vec2 o = vec2(1, iResolution.x / iResolution.y) * .001;\n\t\n    fragColor = vec4(0);\n    \n    // walk in a circle around the current pixel and check the neighborhood\n    for (float t = 0.; t < 2. * PI; t += .125 * PI) {\n        vec4 s = texture(iChannel0, uv + vec2(cos(t),sin(t)) * o);\n        if (tex.w < RENDER_DIST) {\n            if (abs(tex.w - s.w) > .04 || acos(dot(tex.xyz, s.xyz)) > .2) {\n                // we're at the edge of a shape\n                fragColor += vec4(.15);\n            }\n        } else {\n            if (s.w < RENDER_DIST) {\n                // we're at the edge of the geometry\n                fragColor += vec4(.15);\n            }\n        }\n    }\n    \n    // mix with previous frame, different color channels have\n    // different weights for that sweet chromatic aberation feel\n    fragColor = mix(fragColor, b, vec4(.96, .97, .98, 1.)); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159265359\n#define SQ1_2 0.70710678118\n\n#define FOV 7.\n\n#define MAX_STEPS 100\n#define EPS .0001\n#define RENDER_DIST 5.\n\n#define TOTAL_TIME 360.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}