{
    "Shader": {
        "info": {
            "date": "1466198928",
            "description": "Simple 2d scrolling cellular noise lattices",
            "flags": 0,
            "hasliked": 0,
            "id": "4sGSDy",
            "likes": 13,
            "name": "Lattices",
            "published": 3,
            "tags": [
                "voronoi",
                "noise"
            ],
            "usePreview": 0,
            "username": "jaburns",
            "viewed": 542
        },
        "renderpass": [
            {
                "code": "// Forked from \"Voronoi - distances\" https://www.shadertoy.com/view/ldl3W8\n// https://iquilezles.org/articles/voronoilines\n\n// JS color parser:\n//function f(a) { var y=[parseInt(a.substr(0,2),16)/0xff, parseInt(a.substr(2,2),16)/0xff, parseInt(a.substr(4,2),16)/0xff]; return JSON.stringify(y).replace(\"[\",\"vec3(\").replace(\"]\",\");\"); }\n\nconst vec3 COLOR_0 = vec3(0.11372549019607843,0.16862745098039217,0.3254901960784314);\nconst vec3 COLOR_1 = vec3(0.49411764705882355,0.1450980392156863,0.3254901960784314);\nconst vec3 COLOR_2 = vec3(1,0,0.30196078431372547);\n\nvec2 hash2( vec2 p )\n{\n\t// texture based white noise\n\t//return texture( iChannel0, (p+0.5)/256.0, -100.0 ).xy;\n\t\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec3 voronoi( in vec2 x, in float t )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        o = 0.3+0.3*sin( t + 6.2831*o );\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        o = 0.3+0.3*sin( t + 6.2831*o );\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( md, mr );\n}\n\nfloat layer1( in vec2 p, in float t )\n{\n    vec3 c = voronoi( 8.0*p, t );\n    return mix( 1.0, 0.0, smoothstep( 0.12, 0.14, c.x ) ); \n}\n\nfloat layer2( in vec2 p, in float t )\n{\n    vec3 c = voronoi( 12.0*p, t );\n    return mix( 1.0, 0.0, smoothstep( 0.09, 0.11, c.x ) ); \n}\n\nvoid mainImage( out vec4 O, in vec2 p )\n{\n    // Thanks Fabrice :)\n    p /= iResolution.x;\n    O -= O;\n    float t = iTime;\n    for (float z = 120.; z > 20.; z -= 20.)      \n        O = mix( vec4(1,.15,.3,0)*(1.2-.8*z/120.),  O, \n                smoothstep( -.01, .01, voronoi( z*.1*p+vec2(30.*t/z, 0), t ).x - 4./z ) );\n    \n//  vec2 p = fragCoord.xy/iResolution.xx;\n//  float v2 = layer2(p+vec2(iTime/30.0, 0), 123.456+iTime / 2.0);\n//  vec3 color = mix(COLOR_0, COLOR_1, v2);\n//  float v1 = layer1(p+vec2(iTime/20.0, 0), iTime / 4.0);\n//  color = mix(color, COLOR_2, v1);\n//  fragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}