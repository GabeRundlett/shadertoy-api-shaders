{
    "Shader": {
        "info": {
            "date": "1494327258",
            "description": "this is the  less repetitive array version of its parent\nhttps://www.shadertoy.com/view/4ts3DB\n",
            "flags": 0,
            "hasliked": 0,
            "id": "MsScDt",
            "likes": 11,
            "name": "PN Continuous spline Array ",
            "published": 3,
            "tags": [
                "2d",
                "spline",
                "array",
                "cubic",
                "contour",
                "subdivision",
                "tesselation",
                "isoline",
                "pntriangles"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 857
        },
        "renderpass": [
            {
                "code": "//parent= https://www.shadertoy.com/view/4ts3DB\n//self  = https://www.shadertoy.com/view/MsScDt\n\n// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Subdividing a piecewise linear shape into a cubic shape with continuity, ala PN-Triangles,\n// but in 2D (or in other words, with bezier curves)\n\n// I have implemented two different version of the distance to the cubic. One is cheap and only\n// works for concave shapes. It fails at short distances, but is good enough in the distance. The\n// other one is a brute force one, for comparison.\n\n// Linear segments in red, cheap approximation in green, brute force in blue\n\n// Every other cycle derivatives are shown to judge the quality of the field.\n\n#define offset -.01\n//sin(iTime) \n//makes less sense here as it is a unsigned distance field.\n\n//iterations per line segment\n#define SegmentSteps 40\n\n//attempts to make pointcount less static are hard.\n#define PointCount 8\n\n//this is likely the cause for a lot of errors\nint modi(int a){a+=1;int b=PointCount; //return a%b;}\n return a-(a/b)*b;}\n //return int(mod(float(a+1),float(b)));}\n\n//return squared length of a\n#define dd(a) dot(a,a)\n#define c01(a) clamp(a,0.,1.)\n#define c01d(a,b) c01(dot(a,b)/dd(b))\n\n//return distance to line segments\nfloat sdLine2( vec2 p,vec2 a,vec2 b){vec2 c=p-a,d=b-a;\n float h=c01d(c,d);return dd(c-d*h );}\nvec2 cubic(in vec2 a, in vec2 b, in vec2 c, in vec2 d, float v1 ){\n float u1=1.-v1,u2 = u1*u1,v2 = v1*v1,u3 = u2*u1,v3=v2*v1;\n return a*u3+d*v3+b*3.*u2*v1+c*3.*u1*v2;}\nfloat sdSegment_Cheap( vec2 p,vec2 a,vec2 b,vec2 c,vec2 d){\n vec2 r=p-a,k1=a+c*dot(c,((a*2.+b)/3.)-a)/dd(c),\n      s=b-a,k2=b+d*dot(d,((b*2.+a)/3.)-b)/dd(d);\n float h=c01d(r,s);\n return sqrt(sdLine2(p,cubic(a,k1,k2,b,c01(h-.1)), \n                       cubic(a,k1,k2,b,c01(h+.1))));}\nfloat sdSegment_Expensive(vec2 p,vec2 a,vec2 b,vec2 na,vec2 nb){\n vec2 o=a,// secondary points\n c=(a*2.0+b)/3.0,d=(b*2.0+a)/3.0;c=a+na*dot(na,c-a)/dot(na,na);\n d=b+nb*dot(nb,d-b)/dot(nb,nb);const int ma=SegmentSteps;\n float m=float(ma-1),r=dd(p-a);\n for(int i=1;i<ma;i++){vec2 v=cubic(a,c,d,b,float(i+0)/m );\n  float j=sdLine2(p,v,o);o=v;r=min(j,r);}return sqrt(r);}\n//return smallest float of type float[8]\nfloat min8(in float[8]i){return min(min(min(i[0],i[1]),min(i[2],i[3])),\n min(min(i[4],i[5]),min(i[6],i[7])));}\n// distance to linear segments\nfloat cDistance(in vec2 v,in vec2 p[PointCount]){\n float d[8];for(int i=0;i<PointCount;i++){int e=modi(i);\n  d[i]=sdLine2(v,p[i],p[e]);}return min8(d);}\n#define indli in vec2 v,in vec2 p[PointCount],in vec2 n[PointCount],in vec2 t[PointCount]){float d[8];for(int i=0;i<PointCount;i++){int e=modi(i);d[i]\n#define vppte v,p[i],p[e],t[i],t[e]);}return min8(d);}\n// distance to cubic segment\nfloat dDistance_Cheap(indli=sdSegment_Cheap(vppte\n// distance to cubic segment\nfloat dDistance_Expensive(indli=sdSegment_Expensive(vppte\n\nvec3 profile(vec3 x){x=mod(x,12.);return c01(x)-c01(x-4.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n float m = min(iResolution.x,iResolution.y);\n vec2 q=(-iResolution.xy+2.0*fragCoord.xy)/m,\n p[PointCount];\n p[0]=vec2(.6,.1)*1.3;\n p[1]=vec2(.4,.3)*1.3;\n p[2]=vec2(-.2,.5)*1.3;\n p[3]=vec2(-.5,.5)*1.3;\n p[4]=vec2(-.8,.1)*1.3;\n p[5]=vec2(-.7,-.1)*1.3;\n p[6]=vec2(.0,-.2)*1.3;\n p[7]=vec2(.5,-.1)*1.3;\n //sabove is list of points that sets a closed curve.\n #define ppcc PointCount];for(int i=0;i<PointCount;i++)\n vec2 n[ppcc{int e=modi(i  );n[i]=p[e]-p[i];}\n vec2 t[ppcc{int e=modi(i-2);t[i]=n[e]+n[i];}\n //above 2 lines are loops that make points for higher degree curves.\n float c=cDistance(q,p)+offset,\n d=dDistance_Cheap(q,p,n,t)+offset,\n e=dDistance_Expensive(q,p,n,t)+offset,\n time=iTime+4.,\n a=smoothstep(5.,6.,mod(time,12.));\n vec3 w=profile(2.*time+12.-vec3(0,4,8));\n float f=c*w.x + d*w.y + e*w.z;\n vec3 r=vec3(1,1,1)*c01(.75*f)+.02*smoothstep(.8,.9,sin(100.*f));\n r=mix(r,(.5+.25*m*vec3(dFdx(f),dFdy(f),0.0))*exp(-f), a );\n r=mix(r,(.25+.75*w)*(1.-a),1.-smoothstep(.0,.01,f));\n for(int i=0;i<PointCount;i++){\n  r=mix(r,vec3(1,1,0)*(1.-a),1.-smoothstep(.017,.02,length(q-p[i])) );\n }fragColor = vec4(r,1 );}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}