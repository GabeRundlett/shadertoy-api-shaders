{
    "Shader": {
        "info": {
            "date": "1546320724",
            "description": "A GLSL port of the reverse-engineered Doom PSX fire, described here: http://fabiensanglard.net/doom_fire_psx/",
            "flags": 32,
            "hasliked": 0,
            "id": "3sX3W4",
            "likes": 8,
            "name": "Console Doom Fire",
            "published": 3,
            "tags": [
                "fire"
            ],
            "usePreview": 0,
            "username": "halfspiral",
            "viewed": 970
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scaling = 36.0 / iResolution.y * 4.0;\n    vec2 uv = fragCoord/iResolution.xy * scaling;\n    int idx;\n    if (mod(float(iFrame), 2.0) == 0.0) {\n        idx = int(texture(iChannel0, uv).r);\n    } else {\n        idx = int(texture(iChannel1, uv).r);\n    }\n    fragColor = vec4(PALETTE[idx], 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = fireColor(iFrame, iChannel0, iChannelResolution[0].xy, fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3[] PALETTE = vec3[](\n\tvec3(0.02745, 0.02745, 0.02745),\n    vec3(0.12157, 0.02745, 0.02745),\n    vec3(0.18431, 0.05882, 0.02745),\n    vec3(0.27843, 0.05882, 0.02745),\n    vec3(0.34118, 0.09020, 0.02745),\n    vec3(0.40392, 0.12157, 0.02745),\n    vec3(0.46667, 0.12157, 0.02745),\n    vec3(0.56078, 0.15294, 0.02745),\n    vec3(0.62353, 0.18431, 0.02745),\n    vec3(0.68627, 0.24706, 0.02745),\n    vec3(0.74902, 0.27843, 0.02745),\n    vec3(0.78039, 0.27843, 0.02745),\n    vec3(0.87451, 0.30980, 0.02745),\n    vec3(0.87451, 0.34118, 0.02745),\n    vec3(0.87451, 0.34118, 0.02745),\n    vec3(0.84314, 0.37255, 0.02745),\n    vec3(0.84314, 0.37255, 0.02745),\n    vec3(0.84314, 0.40392, 0.05882),\n    vec3(0.81176, 0.43529, 0.05882),\n    vec3(0.81176, 0.46667, 0.05882),\n    vec3(0.81176, 0.49804, 0.05882),\n    vec3(0.81176, 0.52941, 0.09020),\n    vec3(0.78039, 0.52941, 0.09020),\n    vec3(0.78039, 0.56078, 0.09020),\n    vec3(0.78039, 0.59216, 0.12157),\n    vec3(0.74902, 0.62353, 0.12157),\n    vec3(0.74902, 0.62353, 0.12157),\n    vec3(0.74902, 0.65490, 0.15294),\n    vec3(0.74902, 0.65490, 0.15294),\n    vec3(0.74902, 0.68627, 0.18431),\n    vec3(0.71765, 0.68627, 0.18431),\n    vec3(0.71765, 0.71765, 0.18431),\n    vec3(0.71765, 0.71765, 0.21569),\n    vec3(0.81176, 0.81176, 0.43529),\n    vec3(0.87451, 0.87451, 0.62353),\n    vec3(0.93725, 0.93725, 0.78039),\n    vec3(1.00000, 1.00000, 1.00000)\n);\n\nint getIndex(in sampler2D channel, in vec2 resolution, in vec2 coord) {\n\treturn int(texture(channel, coord/resolution).r);   \n}\n\nfloat whitenoise(in vec4 p) {\n    return mod((sin(12.9898 * p.x + 78.233 * p.y + 17.3392 * p.z + 47.743 * p.w) * 43758.5453), 1.0);\n}\n\n\n/* adapted from https://github.com/fabiensanglard/DoomFirePSX */\n\nvec4 fireColor(in int frame, in sampler2D channel, in vec2 resolution, in vec2 fragCoord)\n{\n    int col;\n    if (frame == 0) {\n        if (fragCoord.y < 1.0) {\n            col = 35;\n        } else {\n            col = 0;   \n        }\n    } else {\n        col = getIndex(channel, resolution, fragCoord);\n        if (fragCoord.y >= 1.0) {\n            for (int xo = -1; xo <= 2; xo++) {\n                vec2 src = fragCoord + vec2(xo, -1.0);\n                int idx = getIndex(channel, resolution, src);\n                float randIdx = mod(round(whitenoise(vec4(src, mod(float(frame), 60.0*60.0), 0.0)) * 3.0), 4.0);\n                vec2 dst = src - vec2(randIdx - 1.0, -1.0);\n                if (dst == fragCoord) {\n                    col = max(0, idx - int(mod(randIdx, 2.0)));\n                }\n            }\n        }\n    }\n    float fc = float(col);\n    return vec4(fc, fc, fc, fc == 0.0 ? 0.0 : 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = fireColor(iFrame, iChannel0, iChannelResolution[0].xy, fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}