{
    "Shader": {
        "info": {
            "date": "1589856720",
            "description": "This shader is running on a breadboard.",
            "flags": 0,
            "hasliked": 0,
            "id": "wl3XR8",
            "likes": 15,
            "name": "Jumper Wires",
            "published": 3,
            "tags": [
                "3d",
                "mouse",
                "raymarch",
                "breadboard"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 449
        },
        "renderpass": [
            {
                "code": "// Plento\n// \"Jumper Wires\"\n\n// Raymarched breadboard model with some literal jumping wires\n\n\n#define ShowWires\n\nvec2 R;\nconst float pi = 3.14159;\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\n#define FAR 100.\n#define ss(a, b, t) smoothstep(a, b, t)\n\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat box( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat torus( vec3 p, vec2 t ){\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n// https://iquilezles.org/articles/distfunctions\nfloat smoothsub( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\nfloat map(vec3 rp){\n    float d = 999.;\n    \n    rp.xz*=rot(iTime*.5 -1.);\n    \n    vec3 rp2 = rp;\n    \n    rp.x = -abs(rp.x);\n    \n    float board = box(rp-vec3(0., -.98, 0.), vec3(1., .05, 2.5)) - .05;\n    \n    d = min(d, board);\n    d = smoothsub(box(rp-vec3(0., -.84, 0.), vec3(.03, .05, 3.)),d, .06);\n    \n    vec3 b = vec3(.07, .2, .07);\n    vec3 rrp = rp - vec3(.09, 0., .07);\n    rrp = mod(rrp, b)-b*.5;\n    \n    float rep = max(box(rrp, vec3(.013, .4, .013)),\n        box(rp-vec3(-.36, -1., 0.), vec3(.22, .15, 2.5))\n    );    \n    \n    d = smoothsub(rep, d, .03);\n    \n    float rep2 = max(box(rrp, vec3(.013, .04, .013)),\n        box(rp-vec3(-.89, -1., 0.), vec3(.05, .15, 2.36))\n    );  \n    \n    d = smoothsub(rep2, d, .03);\n    \n    vec3 p = rp2-vec3(0., -1.0, 1.);\n    p = mod(p, vec3(0., 0., 0.4))-vec3(0., 0., 0.4)*0.5;\n    \n    p.yz *= rot(pi/2.);\n    \n    vec3 irp = rp2-vec3(iTime+1.2,-0.5,0.);\n    irp = mod(irp, vec3(4.5,0.,0.))-vec3(4.5,0.,0.)*0.5;\n    irp.xz*=rot(pi/4.);\n    \n    #ifdef ShowWires\n    d = min(d, max(torus(p, vec2(0.5, 0.02)), box(irp, vec3(0.8, 0.5, 2.4))));\n    #endif\n    \n    return d;\n}\n\n\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\nfloat march(vec3 rd, vec3 ro){\n \tfloat t = 0., d = 0.;   \n    \n    for(int i = 0; i < 80; i++){\n    \td = map(ro + rd*t); \t   \n        if(abs(d) < .0015 || t > 60.) break;\n        \n        t += d * .75;\n    }\n    return t;\n}\n\n\nvec3 color(vec3 p, vec3 rd, vec3 n, float t){\n    vec3 lp = vec3(6., 9.0, -5.0);\n    vec3 ld = normalize(lp-p);\n   \tvec3 ref = reflect( rd, n );\n    \n    float faloff = 1.-exp(-(4. / length(lp - p)));\n    \n    float spec = pow(max(dot(normalize(reflect(ld, n)), rd), 0.), 12.);\n    float dif = max(dot(n, ld), .05);\n    \n    p.xz*=rot(iTime*.5-1.);\n    p.x = abs(p.x);\n    \n    vec3 col = vec3(0);\n    float mat = step(0.865, abs(p.y));\n    \n    float id = floor(p.z/ 0.4 - 0.5);\n    vec3 wire = hash31(id*346.24);\n    \n    vec3 board = vec3(.95, .7, .4);\n    float bnd = ss(2.382, 2.383, abs(p.z));\n    board = mix(vec3(.6, 0., 0.), board, ss(0.01, 0.015, abs(p.x-.99)+bnd));\n    board = mix(vec3(0., .1, .6), board, ss(0.01, 0.015, abs(p.x-.78)+bnd));\n    \n    col = mix(wire, board, mat);\n    \n    col *= 2.*dif*vec3(1., 1., 1.) * faloff;\n    col += vec3(0.8, 0.8, 0.8) * spec * .25;\n    \n    col = mix(vec3(0), col, 1.-step(50., t));\n     \n\treturn col;   \n}\n\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    \n    float zm = max(5.- (iTime * 7.), 0.8);\n    vec3 rd = normalize(vec3(uv, zm));\n    //vec3 ro = vec3(0., m.y*10., m.x*10. - 3.);\n    vec3 ro = vec3(0., 0.5, -2.9);\n    \n    if(iMouse.z>0.) ro.zy += m*3.; \n    \n    rd.yz*=rot(0.65);\n    \n    float t = march(rd, ro);\n    \n    vec3 n = normal(ro + rd*t);\n    vec3 col = color(ro + rd*t, rd, n, t);\n    \n    f = vec4(sqrt(clamp(col, .0, 1.)), 1.);\n    \n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}