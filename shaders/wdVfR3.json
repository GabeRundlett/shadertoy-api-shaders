{
    "Shader": {
        "info": {
            "date": "1607642714",
            "description": "messing around with new rendering techniques. I dont really know what is on the screen but it looks pretty cool. kind of reminds me of hotline miami 2. ",
            "flags": 32,
            "hasliked": 0,
            "id": "wdVfR3",
            "likes": 3,
            "name": "Trippy Abstraction",
            "published": 3,
            "tags": [
                "fractal",
                "sdf",
                "abstract",
                "trippy"
            ],
            "usePreview": 0,
            "username": "lambmeow",
            "viewed": 478
        },
        "renderpass": [
            {
                "code": "\n//uncomment this for more trippyness\n#define CHROMATIC_ABERRATION\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n#ifdef CHROMATIC_ABERRATION\n    fragColor = vec4(texture(iChannel0, uv + vec2(0.02, .05 * sin(iTime)) ).r, \n                     texture(iChannel0, uv + vec2(-.02, -.05) * cos(iTime) ).g,\n                     texture(iChannel0, uv + vec2(0.03, .02) * -cos(iTime)).b,\n                     1.);\n#else\n    fragColor = texture(iChannel0, uv);\n#endif\n                     \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n//Abstraction\n//Made by lopea.\n//12/10/2020\n\n#define EPSILON 0.0001\n#define time iTime\n#define resolution iResolution\n\nfloat s = 1.5;\nmat3 rotate(float angle)\n{\n    float sc = sin(angle);\n    float c = cos(angle);\n    return mat3 (1.0, 0.0, 0.0, 0.0, c, sc, 0.0, -sc, c);\n}\n\n//geometry of the sdf function\nfloat map(vec3 p)\n{\n   for( int i = 0; i < 12; i ++)\n   {\n     p= abs(p) - abs(vec3((sin(time + float(i)) + cos (float(i) + p.x+ s +time))* 0.15)) - .1;\n     s += .1 ;\n   }\n   return dot(p ,normalize(vec3(2.,10., 3.))); \n}\n\n\n//coolest way to calculate a normal that i've ever seen\n//source: https://www.shadertoy.com/view/3dyBzc\n//thanks gaz\nvec3 calcnorm(vec3 value)\n{\n    vec3 n = vec3(0);\n    for(int i = 0; i < 4; i++)\n    {\n        vec3 eps = 0.001 * (vec3(9 >> i&1, i >> 1 & 1, i & 1) * 2. - 1.);\n        n += eps * map(value + eps);\n    }\n    return normalize(n);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 texCoords)\n{\n\n// ----------- setup -----------\n    //correct texture coordinates to the right aspect ratio\n    \n    vec2 uv = (2. * texCoords - resolution.xy) / resolution.y;\n    \n    //get current direction\n    vec3 dir = normalize(vec3(uv, 2));\n    \n    //get camera position\n    vec3 camPos = vec3(0, 0, -10);\n    \n// ----------- raymarching ----------- \n    float dist = 0.;\n    vec3 pos = vec3(0);\n    for(int i = 0; i < 255; i ++)\n    {\n        //rotate current entire world before calculating position\n        pos = (camPos + dir * dist) * rotate(time + s);\n        float curr = map(pos);\n        if(curr < EPSILON)\n        {\n           \n            break;\n        }\n        \n        if(dist > 100.)\n        {\n            dist = 0.;\n            break;\n        }\n        dist+= curr;\n    }\n    \n// ----------- colors / rendering -----------\n    //calculate background value\n    float backValue = dot(normalize(vec3(sin(time + uv.x),(sin(time)),cos(time)) ),dir);\n    vec3 color = vec3 (0, .4, 1. ) * backValue+ vec3(1,.1,.4) * (1.-backValue); \n                \n    //if we hit something\n    if(dist > 0. )\n    {\n        //set color based on background  value\n        color = vec3(dot(calcnorm(pos), normalize(vec3(10., 10., 14.))))* (1.-color);\n    }\n    \n    //render to screen            / gives that 'trippy' effect when rendering\n    fragColor = vec4(color , 1) + texture(iChannel0, texCoords/resolution.xy) * 0.75; //+ texture(prevFrame, inData.v_texcoord)* 0.8;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}