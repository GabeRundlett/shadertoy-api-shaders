{
    "Shader": {
        "info": {
            "date": "1526570309",
            "description": "use mouse for rotate the df",
            "flags": 32,
            "hasliked": 0,
            "id": "Ms3Bzs",
            "likes": 6,
            "name": "MatCap",
            "published": 3,
            "tags": [
                "matcap"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2021 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// new tex each 2.0 secs\n#define time_step 2.0 \n\nfloat df(vec3 p)\n{\n\tp += sin(p.zxy*3.36) * 0.44; // iq tech in  shader Sculpture III\n\tp += 0.5 * sin(p.zxy*3.36) * 0.44;\n\treturn length(p) - 1.;\n}\n\nvec3 nor( vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n\t    df(pos+eps.xyy) - df(pos-eps.xyy),\n\t    df(pos+eps.yxy) - df(pos-eps.yxy),\n\t    df(pos+eps.yyx) - df(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\nvec4 getMatCap(sampler2D sam, vec3 rd, vec3 n)\n{\n\tvec3 r = reflect( rd, n );\n    r.z = 1.0 - r.z;\n\tfloat m = 2. * length(r);\n\tvec2 tN = r.xy / m + .5;\n    return texture(sam, tN);\n}\n    \nvec4 getMatCap(vec3 rd, vec3 n)\n{\n    float rt = mod(iTime / time_step, 4.0);\n    if (rt > 3.0)\n        return getMatCap(iChannel2, rd, n);\n    else if (rt > 2.0)\n        return getMatCap(iChannel1, rd, n);\n    else if (rt > 1.0)\n        return getMatCap(iChannel0, rd, n);\n    return getMatCap(iChannel3, rd, n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // vars\n\tvec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\tvec2 mo = iMouse.xy;\n\tfloat time = iTime;\n\t\n\tvec3 col = vec3(0);\n\t\n\t// cam control\n\tfloat camd = 3.5;\n\tfloat cama = time*0.3;\n\tfloat came = 3.14159;\n\t\n    cama = 10. * mo.x/si.x;\n    came = 3.14159 * mo.y/si.y - 1.5;\n            \n\tvec3 ro = vec3(cos(cama), sin(came), sin(cama)) * camd; // cam point\n\t\n\tvec3 lp = vec3(cos(-time), sin(came), sin(-time)) * camd; // light point\n\t\n\tvec3 cv = vec3(0); // view center\n\tvec3 cu = normalize(vec3(0,1,0)); // cam up\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y = cross(z,x);\n    \n    float fov = 0.5;\n    \n  \tvec2 uv = (g+g-si)/si.y;\n   \tvec3 rd = normalize(z + uv.x*x*fov + uv.y*y*fov); // cam dir view\n\n\tfloat md = 10.; // max distance\n\n\tconst float iter = 250.;\n\t\n\t// shape\n\tfloat s = 1., d = 0.;\n\tfor (float i=0.; i<iter; i++)\n\t{\n\t\tif (d*d/s>1e5 || d > md) break;\n\t\ts = df(ro+rd*d);\n\t\td += s * 0.4;\n\t}\n\t\n\tif ( d < md)\n\t{\n\t\tvec3 p = ro+rd*d; // surf point\n\t\tvec3 n = nor(p, 0.01);\n        col.rgb = getMatCap(rd, n).rgb;\n\t}\n\n    fragColor = vec4(col, 1.0);\n    \n    float thumbailSize = iResolution.y / 4.;\n    \n    // thumbail buffer D\n    if (g.x < thumbailSize && g.y < thumbailSize * 4. && g.y >= thumbailSize * 3.)\n    \tfragColor = texture(iChannel3, (g.xy - vec2(0,thumbailSize * 3.))/vec2(thumbailSize));\n    // thumbail buffer C\n    if (g.x < thumbailSize && g.y < thumbailSize * 3. && g.y >= thumbailSize * 2.)\n    \tfragColor = texture(iChannel2, (g.xy - vec2(0,thumbailSize * 2.))/vec2(thumbailSize));\n    // thumbail buffer B\n    if (g.x < thumbailSize && g.y < thumbailSize * 2. && g.y >= thumbailSize)\n    \tfragColor = texture(iChannel1, (g.xy - vec2(0,thumbailSize))/vec2(thumbailSize));\n    // thumbail buffer A\n    if (g.x < thumbailSize && g.y < thumbailSize)\n    \tfragColor = texture(iChannel0, g.xy/vec2(thumbailSize));\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///////////////////////////////////////////////////////////////////////////////////////\n// https://www.shadertoy.com/view/ldfyW2\nvoid subImage( out vec4 f, vec2 g )\n{\n    g = g /iResolution.xy * 2.-1.;\n\t\n    float d = pow( max(.3 - dot(g*=0.55,g), 0.), .2);\n\t\n   \tf = d * vec4(g*=g+=d,d,1);\n}\n///////////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\t\n    if (iFrame < 240)\n    {\n    \tsubImage(fragColor, g);\n    }\n    else\n    {\n        vec2 v = fragCoord / iResolution.xy;\n    \tfragColor = texture(iChannel0, v);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "///////////////////////////////////////////////////////////////////////////////////////\n//https://www.shadertoy.com/view/4sjfWz\n\n#define E (n=n.zxy, d(p+n)-d(p-n))\n//#define d(p) (length(p) - 2. + texture(iChannel2, (p+iTime/5.).xy).x*.01)\n\n// other with better shape for 276c :\n#define d(p) (length(p) - 2. + textureLod(iChannel2, (p).xy/5.+iTime/15.,1.).x*.1)\n\nvoid subImage( out vec4 f, vec2 g )\n{\n    vec3 \n        n = iResolution,\t\t\t\t\t// screensize, normal variable\n    \tr = normalize(vec3(g+g-n.xy,n.y)),\t// ray direction\n    \tp = n -= n;\t\t\t\t\t\t\t// ray origin at zero, normal reset to zero\n    \n    r.x *= 0.55;\n    p.z -= 2.85;\t\t\t\t\t\t\t\t// ray origin at -3 along z axis\n    \n    //for (int i=99;i-->0;p+=r*d(p));\t\t// webgl2 form of for loop with included sphere tracing iteration\n    for(int i=99;i>0;i--)\n    \tp+=r*d(p);\n    \n    n.z=.01;\t\t\t\t\t\t\t\t// normal precision\n    \n    f = texture(iChannel1,vec3(E,E,E));\t\t// cubemap lookup with calculated normal\n}\n///////////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\t\n    if (iFrame < 240)\n    {\n    \tsubImage(fragColor, g);\n    }\n    else\n    {\n        vec2 v = fragCoord / iResolution.xy;\n    \tfragColor = texture(iChannel0, v);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "///////////////////////////////////////////////////////////////////////////////////////\n// https://www.shadertoy.com/view/ldfyW2\nvoid subImage( out vec4 f, vec2 g )\n{\n    vec2 v = g/iResolution.xy * 2.-1.;\n\n    vec3 col;\n    col.r = 1.0 / dot(v,v);\n\tcol.g = 0.5 / dot(v,v);\n    col.b = 1.5 / dot(v,v);\n    col *= (col*0.2);\n    \n    f = vec4(col,1.0);\n}\n///////////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\t\n    if (iFrame < 240)\n    {\n    \tsubImage(fragColor, g);\n    }\n    else\n    {\n        vec2 v = fragCoord / iResolution.xy;\n    \tfragColor = texture(iChannel0, v);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "///////////////////////////////////////////////////////////////////////////////////////\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 561e5 * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 1e2 * log(Temp) - 623.;\n   \tif (Temp > 6500.) col.y = 352e5 * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194. * log(Temp) - 1448.;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1e3) col *= Temp/1e3;\n   \treturn col;\n}\n\nvoid subImage( out vec4 f, vec2 g )\n{\n     vec2 v = g/iResolution.xy * 2.-1.;\n\n    vec3 col = vec3(0);\n    col = blackbody(length(v) * (atan(abs(v.x),-v.y*abs(v.x))*3.14159) * 1500.);\n    //col /= sqrt(col * col * 0.5);\n    \n    f = vec4(col,1.0);\n}\n///////////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\t\n    //if (iFrame < 240)\n    {\n    \tsubImage(fragColor, g);\n    }\n    /*else\n    {\n        vec2 v = fragCoord / iResolution.xy;\n    \tfragColor = texture(iChannel0, v);\n    }*/\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}