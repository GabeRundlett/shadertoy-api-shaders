{
    "Shader": {
        "info": {
            "date": "1572121324",
            "description": "Raymarched jack o lantern.",
            "flags": 0,
            "hasliked": 0,
            "id": "wd3SD7",
            "likes": 7,
            "name": "Shadertober 25 Lantern -jaburns",
            "published": 3,
            "tags": [
                "raymarch",
                "halloween",
                "pumpkin"
            ],
            "usePreview": 0,
            "username": "jaburns",
            "viewed": 649
        },
        "renderpass": [
            {
                "code": "#define EPS         0.008\n#define MAX_DIST   50.0\n#define ITERATIONS 75\n\n#define TIME iTime\n\n// ===== https://iquilezles.org/articles/distfunctions =====\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdVesica(vec3 p1, float r, float d1, float h)\n{\n    \n    vec2 p = p1.xy;\n    p = abs(p);\n    float b = sqrt(r*r-d1*d1);\n    float d = ((p.y-b)*d1>p.x*b) ? length(p-vec2(0.0,b))\n                             : length(p-vec2(-d1,0.0))-r;\n    \n    vec2 w = vec2( d, abs(p1.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\n// ===================================================================================\n\nmat2 rot( float theta )\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2( c, s, -s, c );\n}\n\nfloat eyeHole( vec3 p, float theta )\n{    \n    p.yz *= rot(-.2);\n    p.xz *= rot(theta);\n    p.xy *= rot(.1*sign(theta));\n    return sdTriPrism( p - vec3(0, 0, 2.5), vec2(.5,.5) );\n}\n\nfloat tooth( vec3 p, float a, float b, float c )\n{\n    p.yz *= rot(a);\n    p.xz *= rot(b);\n    p.xy *= rot(c);\n    return sdTriPrism( p - vec3(0, 0, 2.5), vec2(.25,.5) );\n}\n\nfloat noseHole( vec3 p )\n{\n\treturn sdTriPrism( p - vec3(0, 0, 2.5), vec2(.25,.5) );   \n}\n\nfloat mouthHole( vec3 p )\n{\n    p.y -= .4*p.x*p.x;\n    \n    p.yz *= rot(.27);\n    p.xy = p.yx;\n    return sdVesica( p - vec3(0, 0, 2.5), 3.1, 2.8, .7 );\n}\n\nfloat hollow( vec3 p )\n{\n    vec2 q = vec2( length( p.xz ) - 1.1, p.y );\n    float d = length( q ) - 1.1;\n    return d;\n}\n\nfloat centerSphereHole( vec3 p )\n{\n    return length( p ) - .5;\n}\n\nfloat gourd( vec3 p )\n{\n    vec2 q = vec2( length( p.xz ) - 1.1, p.y );\n    float d = length( q ) - 1.5;\n    \n    float theta = atan( p.z, p.x );   \n    d -= .05*abs(sin( 12.* theta ));\n    \n    d += .02*texture( iChannel1, p ).r;\n    d += .1*texture( iChannel1, p*.1 ).r;\n    \n    return d;\n}\n\nfloat map( vec3 p )\n{\n    float holes = min( eyeHole( p, 0.3 ), eyeHole( p, -0.3 ) );\n    holes = min( holes, noseHole( p ));\n    holes = min( holes, mouthHole( p ) );\n    holes = max( holes, -tooth( p, .16, .15, 1. ) );\n    holes = max( holes, -tooth( p, .31, -.2, .4 ) );\n    holes = min( holes, centerSphereHole( p ) );\n    \n    return\n        max(\n            max( gourd( p ), -holes ),\n            -hollow( p )\n        );\n}\n\nfloat flicker()\n{\n    return texture( iChannel1, vec3( .15*TIME, 0, 0 )).r;\n}\n\nstruct March\n{\n    vec3 pos;\n    float dist;\n    float ao;\n};\n    \nMarch march( vec3 ro, vec3 rd )\n{\n    float dist, totalDist = 0.0;\n    \n    int i;\n    for( i = 0; i < ITERATIONS; ++i )\n    {\n        dist = map( ro );\n        totalDist += dist;\n        if( dist < EPS || totalDist > MAX_DIST ) break;\n        ro += rd * dist;        \n    }\n    \n    return March( ro, dist < EPS ? totalDist : -1.0, float(i) / 100. );\n}\n\nconst vec3 SHELL_COLOR = vec3(252, 138, 21) / 255.;\nconst vec3 INNER_COLOR = vec3(253, 180, 75) / 255.;\nconst vec3 GLOW_COLOR  = vec3(253, 180, 75) / 255.;\n\nvec3 colorize( vec3 pos, float dist, float ao, int material, float insideLevel )\n{\n    float fog = exp(-1. * (dist - 3.));\n    float glow = 0.;\n    float bright = .2 + .6*flicker();\n    \n    vec3 color;\n    \n    if (material == 0) {\n        fog = mix( fog, 1.0, insideLevel );\n        glow = insideLevel * 2.*bright;\n        color = mix( SHELL_COLOR, INNER_COLOR, smoothstep( .05, .2, insideLevel ) );\n    }\n    else if (material == 1) {\n\t\tcolor = 2.*texture( iChannel0, pos.xz/ 10. ).rgb * (mix(1.5*GLOW_COLOR,vec3(1),.5) * (.5+.5*bright));\n    }\n    \n    color = color * fog + GLOW_COLOR*glow - ao;\n    \n    if (material == 0) {\n        float l = length( pos.xz );\n    \tcolor += .2 * bright * max(0., -pos.y - 1.);\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy - vec2(.5 * iResolution.x / iResolution.y, .5);\n    \n    vec3 ro = vec3( 0, 0, 6 );\n    vec3 rd = normalize( vec3( uv, -1 ));\n    \n    float st = sin(TIME*.5);\n    float ct = cos(TIME*.4);\n    mat2 pitch = rot( .2 * st*st );\n    mat2 yaw = rot( .3 * ct );\n\n    ro.xz *= yaw;\n    rd.xz *= yaw;\n    ro.yz *= pitch;\n    rd.yz *= pitch;\n    \n    March m = march( ro, rd );\n    float planeDist = (-1.5 - ro.y) / rd.y;\n    \n    vec3 pos;\n    float dist;\n    float ao;\n    int material;\n    float insideLevel;\n    \n    if( m.dist >= 0.0 && (planeDist <= 0.0 || m.dist < planeDist) )\n    {\n        const float MAX_DEPTH = -.5;\n        float gourdDepth = gourd( m.pos );\n        \n        pos = m.pos;\n        dist = m.dist;\n        material = 0;\n        insideLevel = clamp( 1.0 - (gourdDepth - MAX_DEPTH) / (-0.1 - MAX_DEPTH), 0., 1. );\n        \n        float belowZero = step( pos.y, 0.0 );\n        float outsideGourd = 1.0 - step( gourdDepth, -.05 );\n        float withFloor = .5*max( 0.,  1. - pow(.45*length(pos.xz), .3));\n        float insideCracks = m.ao;\n        \n        ao = outsideGourd * belowZero * withFloor + .3*insideCracks;        \n    }\n    else if( planeDist > 0.0 )\n    {\n        pos = ro + planeDist*rd;\n        dist = planeDist;\n        float l = length( pos );\n        ao = dot(-pos, vec3(0,1,0)) / l/l;\n        material = 1;\n        insideLevel = 0.0;\n        \n        ao = max( 0.,  1. - pow(.45*length(pos.xz), .3));\n    }\n    else\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    fragColor = vec4( colorize( pos, dist, ao, material, insideLevel ), 1 );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}