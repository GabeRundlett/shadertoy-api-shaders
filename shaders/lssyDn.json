{
    "Shader": {
        "info": {
            "date": "1487768428",
            "description": "reflections",
            "flags": 0,
            "hasliked": 0,
            "id": "lssyDn",
            "likes": 1,
            "name": "Reflections_",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "hexointed",
            "viewed": 559
        },
        "renderpass": [
            {
                "code": "const float epsilon = 0.0001;\nconst float speed = 10.0;\nvec3 light;\n\nfloat scene(vec3, inout int);\nbool march (out vec3, in vec3, in vec3, inout int);\nvec3 calc_gradient(in vec3);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    light = vec3(2.0 * sin(iTime/12.0 * speed), 2.0 * cos(iTime/12.0 * speed), 0.0)/1.5;\n\n    vec3 cameraPosition = vec3(0.0, 0.0, -3.0);\n    vec3 cameraFocalPoint = cameraPosition - vec3(0.0, 0.0, 0.3);\n    cameraPosition.xy += (fragCoord.xy - iResolution.xy/2.0) / iResolution.xx;\n\t\n    vec3 norm = cameraPosition - cameraFocalPoint;\n    vec3 hitPosition = cameraPosition;\n    int id = 1;\n    \n    for(int i = 0; i < 5; i++) {\n    \tcameraPosition = hitPosition;\n        \n        bool hit = march(hitPosition, hitPosition + 2.0*norm*epsilon, norm, id);\n        \n        norm = calc_gradient(hitPosition);\n        vec3 lm = normalize(cameraPosition - hitPosition);\n        norm = normalize(2.0 * dot(lm, norm) * norm - lm);\n\n        if(!hit) {\n            fragColor*=0.0;\n            return;\n        }\n\n\n        if(id == 0){\n            fragColor = vec4 (1.0, 1.0, 1.0, 1.0);\n            return;\n        }\n        if(id == 1){ \n            fragColor = vec4 (1.0, 0.0, 0.0, 1.0);\n            break;\n        }\n        if(id == 2){\n            fragColor = vec4 (1.0, 1.0, 1.0, 1.0);\n            continue;\n        }\n        if(id == 3){ \n            fragColor = vec4 (0.0, 1.0, 1.0, 1.0);\n            break;\n        }\n        if(id == 4){\n            fragColor = vec4 (0.0, 0.0, 1.0, 1.0);\n            continue;\n        }\n        if(id == 5){\n        \tfragColor = vec4 (0.0, 1.0, 0.0, 1.0);\n            break;\n        }\n    }\n\n    \n    vec3 normal = calc_gradient(hitPosition);\n    vec3 lm = normalize(light - hitPosition);\n    vec3 rm = normalize(2.0 * dot(lm, normal) * normal - lm);\n    vec3 v = normalize(cameraPosition - hitPosition);\n    \n    vec3 lightEnd;\n    int occId;\n    \n    march(lightEnd, hitPosition + 2.0*lm*epsilon + 2.0*normal*epsilon, lm, occId);\n    \n    vec3 lightcoefficient = vec3(0.2, 0.2, 0.2);\n    \n    if(length(lightEnd-light) < 0.1) {\n\t\tlightcoefficient += \n            0.35 * dot(lm, normal) + \n            0.4 * pow(clamp(dot(rm, v),0.0,1.0), 4.0);\n    }\n    \n    fragColor.xyz *= lightcoefficient;\n}\n\nfloat max3(float a, float b, float c) {\n    return max(a, max(b, c));\n}\n\nvec3 calc_gradient(vec3 p) {\n    vec3 delta = vec3(epsilon, 0.0, 0.0);\n    int id;\n    float t = scene(p,id);\n \treturn normalize(vec3 (\n        (scene(p + delta.xyz,id) - t), \n        (scene(p + delta.yxz,id) - t), \n        (scene(p + delta.zyx,id) - t)\n   \t));\n    \n}\n\nbool march(out vec3 endPosition, in vec3 startPosition, in vec3 direction, inout int id) {\n    \n    vec3 mdir = normalize(direction);\n    endPosition = startPosition;\n    \n    for(int i = 0; i < 400; i++) {\n        float distance = scene(endPosition,id);\n        \n        if(distance < epsilon)\n            return true;\n        \n        if(distance > 1000.0)\n            return false;\n        \n        endPosition += distance * mdir;\n    }\n    \n    return false;\n    \n}\n\nfloat scene (vec3 p, inout int id) {\n\tfloat s1 = length(p) - 0.5;\n    float s2 = length(p - vec3(1.0 * sin(-iTime*0.025 * speed), 2.0*cos(iTime*0.025 * speed), 0.0)) - 0.4;\n    float l = length(p-light)-0.05;\n    float b = max(abs(p.x - 2.0), max(abs(p.y),abs(p.z))) - 0.5;\n    float c = max3(\n    \tabs(p.x + 2.0) - 0.4,\n    \tabs(p.y - 0.0) - 3.0,\n    \tabs(p.z - 0.0) - 4.0\n    );\n    float d = max3(\n    \tabs(p.x + 0.0) - 8.0,\n    \tabs(p.y + 4.5) - 2.0,\n    \tabs(p.z - 0.0) - 4.0\n    );\n    \n    if (l < s1 && l < s2 && l < b && l < c && l < d) id = 0;\n    else if(s1 < s2 && s1 < b && s1 < c && s1 < d) id = 1;\n    else if(s2 < b && s2 < c && s2 < d) id = 2;\n    else if(b < c && b < d) id = 3;\n    else if(c < d) id = 4;\n    else id = 5;\n    \n    return min(s1,min(s2,min(l,min(b,min(c,d)))));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}