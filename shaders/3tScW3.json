{
    "Shader": {
        "info": {
            "date": "1595452433",
            "description": "Golfing Fabrice's beautiful Kaleidoscope 2 shader.\nThe Mouse enabled version is in my original golfed version.\nI like this animated version the best.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tScW3",
            "likes": 8,
            "name": "Golfing Kaleidoscope 136 chars",
            "published": 3,
            "tags": [
                "2d",
                "short",
                "onetweet",
                "golf"
            ],
            "usePreview": 1,
            "username": "GregRostami",
            "viewed": 558
        },
        "renderpass": [
            {
                "code": "// Fork of \"Kaleidoscope 2 ( 151 chars ) \" by FabriceNeyret2. https://shadertoy.com/view/3ds3RH\n// 2020-07-22 21:06:19\n\n// 136 chars - Subtracted 2 more chars by using the o.xy=iResolution.xy trick.\nvoid mainImage(out vec4 o, vec2 u){\n    u = abs(u - .5*(o.xy = iResolution.xy))/o.y;\n    o = texture(iChannel0, (u.x>u.y ? u : u.yx) + sin( iTime*vec2(.02,.03) )  );\n}\n\n/*\n// Fabrice shaved 9 chars from the animation code.\n// 138 chars:\nvoid mainImage(out vec4 O, vec2 u)\n{\n    vec2 R = iResolution.xy,\n         U = abs(u - .5*R)/R.y;\n    O = texture(iChannel0, (U.x>U.y ? U : U.yx) + sin(iTime*vec2(.02,.03))  );\n}\n\n\n\n// My favorite version with animation ...\n// 131 chars:\n#define mainImage( O, u )                \\\n    vec2 R = iResolution.xy,             \\\n         U = abs(u - .5*R)/R.y;          \\\n    O = texture(iChannel0, (U.x>U.y ? U : U.yx) + sin(vec2(O.a=iTime*.1, O.a*.17) ) )\n\n\n// Golfing Fabrice's original shader\n// 114 chars\n\n#define mainImage( O, u )                \\\n    vec2 R = iResolution.xy,             \\\n         U = abs(u - .5*R)/R.y - .5;     \\\n    O = texture(iChannel0, (U.x>U.y ? U : U.yx) + iMouse.xy/R )\n\n\n// Fabrice's original shader\n// 151 chars:\n\n#define mainImage( O, u )                                   \\\n    vec2 R = iResolution.xy, U = u+u - R ;                  \\\n    O = texture(iChannel0, .5                               \\\n             // - vec2(.2*iTime,0)                          \\\n                - iMouse.xy/R.y                             \\\n                +.55 * length( U / R.y )  // 3/pi: .477: 4/2pi: .637  \\\n                     * cos( abs( fract( atan(U.y,U.x)*.637 - .5 ) - .5 )/.637 +vec2(0,11)) )\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}