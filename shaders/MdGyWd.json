{
    "Shader": {
        "info": {
            "date": "1523712513",
            "description": "Idea is from previous experiment comments. I just tried to make look like \"SEGA TURBO\" game.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdGyWd",
            "likes": 4,
            "name": "1981 SEGA TURBO demo",
            "published": 3,
            "tags": [
                "demo",
                "raytrace",
                "oldgame"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 592
        },
        "renderpass": [
            {
                "code": "#define SPEED 5.0\nfloat c_0 = 31599.0;\nfloat c_1 = 9362.0;\nfloat c_2 = 29671.0;\nfloat c_3 = 29391.0;\nfloat c_4 = 23497.0;\nfloat c_5 = 31183.0;\nfloat c_6 = 31215.0;\nfloat c_7 = 29257.0;\nfloat c_8 = 31727.0;\nfloat c_9 = 31695.0;\n\n// this code is from GLSL sandbox\n//returns 0/1 based on the state of the given bit in the given number\nfloat getBit(float num,float bit)\n{\n    num = floor(num);\n    bit = floor(bit);\n\n    return float(mod(floor(num/pow(2.,bit)),2.) == 1.0);\n}\n\nfloat Sprite3x5(float sprite,vec2 p)\n{\n    float bounds = float(all(lessThan(p,vec2(3,5))) && all(greaterThanEqual(p,vec2(0,0))));\n\n    return getBit(sprite,(2.0 - p.x) + 3.0 * p.y) * bounds;\n}\n\nfloat Digit(float num,vec2 p)\n{\n    num = mod(floor(num),10.0);\n\n    if(num == 0.0) return Sprite3x5(c_0,p);\n    if(num == 1.0) return Sprite3x5(c_1,p);\n    if(num == 2.0) return Sprite3x5(c_2,p);\n    if(num == 3.0) return Sprite3x5(c_3,p);\n    if(num == 4.0) return Sprite3x5(c_4,p);\n    if(num == 5.0) return Sprite3x5(c_5,p);\n    if(num == 6.0) return Sprite3x5(c_6,p);\n    if(num == 7.0) return Sprite3x5(c_7,p);\n    if(num == 8.0) return Sprite3x5(c_8,p);\n    if(num == 9.0) return Sprite3x5(c_9,p);\n\n    return 0.0;\n}\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    if ( val1.w < val2.w ) return val1;\n    return val2;\n}\n\n\nfloat dBox2d(vec2 p, vec2 b) {\n\treturn max(abs(p.x) - b.x, abs(p.y) - b.y);\n}\n\nvec4 drawGuage(vec2 p) {\n\tp *= 6.0;\n\t\n    float startX = 3.5;\n    float ypos = -5.0;\n    vec2 size = vec2(0.3,0.6);\n    float padX = 0.8;\n \n    vec3 cb0 = vec3(1.0,0.0,0.0);\n    vec3 cb1 = vec3(1.0,0.0,0.0);\n    vec3 cb2 = vec3(1.0,0.0,0.0);\n    vec3 cb3 = vec3(1.0,0.0,0.0);\n    vec3 cb4 = vec3(1.0,0.0,0.0);\n    vec3 cb5 = vec3(1.0,0.0,0.0);\n    vec3 cb6 = vec3(1.0,0.0,0.0);\n    vec3 cb7 = vec3(1.0,0.0,0.0);\n    vec3 cb8 = vec3(1.0,0.0,0.0);\n    vec3 cb9 = vec3(1.0,0.0,0.0);\n    \n    float t = mod(iTime,10.0);\n    if(t<1.0){\n        cb0 = vec3(0.0,1.0,0.0);\n    } else if(t>=1.0 && t<2.0){\n        cb0 = vec3(0.0,1.0,0.0);\n    \tcb1 = vec3(0.0,1.0,0.0);\n\t} else if(t>=2.0 && t<3.0){\n        cb0 = vec3(0.0,1.0,0.0);\n    \tcb1 = vec3(0.0,1.0,0.0);\n        cb2 = vec3(0.0,1.0,0.0);\n\t} else if(t>=3.0 && t<4.0){\n        cb0 = vec3(0.0,1.0,0.0);\n    \tcb1 = vec3(0.0,1.0,0.0);\n        cb2 = vec3(0.0,1.0,0.0);\n        cb3 = vec3(0.0,1.0,0.0);\n\t} else if(t>=4.0 && t<5.0){\n\t\tcb0 = vec3(0.0,1.0,0.0);\n    \tcb1 = vec3(0.0,1.0,0.0);\n        cb2 = vec3(0.0,1.0,0.0);\n        cb3 = vec3(0.0,1.0,0.0);\n    \tcb4 = vec3(0.0,1.0,0.0);\n\t} else if(t>=5.0 && t<6.0){\n\t\tcb0 = vec3(0.0,1.0,0.0);\n    \tcb1 = vec3(0.0,1.0,0.0);\n        cb2 = vec3(0.0,1.0,0.0);\n        cb3 = vec3(0.0,1.0,0.0);\n    \tcb4 = vec3(0.0,1.0,0.0);\n    \tcb5 = vec3(0.0,1.0,0.0);\n\t} else if(t>=6.0 && t<7.0){\n\t\tcb0 = vec3(0.0,1.0,0.0);\n    \tcb1 = vec3(0.0,1.0,0.0);\n        cb2 = vec3(0.0,1.0,0.0);\n        cb3 = vec3(0.0,1.0,0.0);\n    \tcb4 = vec3(0.0,1.0,0.0);\n    \tcb5 = vec3(0.0,1.0,0.0);\n    \tcb6 = vec3(0.0,1.0,0.0);\n\t} else if(t>=7.0 && t<8.0){\n\t\tcb0 = vec3(0.0,1.0,0.0);\n    \tcb1 = vec3(0.0,1.0,0.0);\n        cb2 = vec3(0.0,1.0,0.0);\n        cb3 = vec3(0.0,1.0,0.0);\n    \tcb4 = vec3(0.0,1.0,0.0);\n    \tcb5 = vec3(0.0,1.0,0.0);\n    \tcb6 = vec3(0.0,1.0,0.0);\n    \tcb7 = vec3(0.0,1.0,0.0);\n\t} else if(t>=8.0 && t<9.0){\n\t\tcb0 = vec3(0.0,1.0,0.0);\n    \tcb1 = vec3(0.0,1.0,0.0);\n        cb2 = vec3(0.0,1.0,0.0);\n        cb3 = vec3(0.0,1.0,0.0);\n    \tcb4 = vec3(0.0,1.0,0.0);\n    \tcb5 = vec3(0.0,1.0,0.0);\n    \tcb6 = vec3(0.0,1.0,0.0);\n    \tcb7 = vec3(0.0,1.0,0.0);\n    \tcb8 = vec3(0.0,1.0,0.0);\n\t} else if(t>=9.0 && t<10.0){\n\t\tcb0 = vec3(0.0,1.0,0.0);\n    \tcb1 = vec3(0.0,1.0,0.0);\n        cb2 = vec3(0.0,1.0,0.0);\n        cb3 = vec3(0.0,1.0,0.0);\n    \tcb4 = vec3(0.0,1.0,0.0);\n    \tcb5 = vec3(0.0,1.0,0.0);\n    \tcb6 = vec3(0.0,1.0,0.0);\n    \tcb7 = vec3(0.0,1.0,0.0);\n    \tcb8 = vec3(0.0,1.0,0.0);\n        cb9 = vec3(0.0,1.0,0.0);\n    }\n    \n\tvec4 b0 = vec4(cb0, dBox2d(p+vec2(startX,ypos),size));\n\tvec4 b1 = vec4(cb1, dBox2d(p+vec2(startX-padX,ypos),size));\n\tvec4 b2 = vec4(cb2, dBox2d(p+vec2(startX-(padX*2.0),ypos),size));\n\tvec4 b3 = vec4(cb3, dBox2d(p+vec2(startX-(padX*3.0),ypos),size));\n\tvec4 b4 = vec4(cb4, dBox2d(p+vec2(startX-(padX*4.0),ypos),size));\n\tvec4 b5 = vec4(cb5, dBox2d(p+vec2(startX-(padX*5.0),ypos),size));\n\tvec4 b6 = vec4(cb6, dBox2d(p+vec2(startX-(padX*6.0),ypos),size));\n\tvec4 b7 = vec4(cb7, dBox2d(p+vec2(startX-(padX*7.0),ypos),size));\n    vec4 b8 = vec4(cb8, dBox2d(p+vec2(startX-(padX*8.0),ypos),size));\n    vec4 b9 = vec4(cb9, dBox2d(p+vec2(startX-(padX*9.0),ypos),size));\n\t\n\tvec4 res1 = combine(b0, b1);\n\tvec4 res2 = combine(b2, b3);\n\tvec4 res3= combine(b4, b5);\n\tvec4 res4= combine(b6, b7);\n    vec4 res5= combine(b8, b9);\n\tvec4 res6 = combine(res1, res2);\n\tvec4 res7 = combine(res3, res4);\n\tvec4 res8 = combine(res5, res6);\n    vec4 res9 = combine(res7, res8);\n\t\n\treturn res9;\n}\n\nfloat box(vec2 st, float size)\n{\n    size = 0.5 + size * 0.5;\n    st = step(st, vec2(size)) * step(vec2(1.0 - st.x,1.0 - st.y),  vec2(size));\n    return st.x * st.y;\n}\n\nvec3 buildingTex(vec2 uv)\n{\n    float n = 10.0;\n    vec2 st = fract(uv * n);\n    return vec3(box(st, 0.5));\n}\n\nfloat noise(float x) {\n    return fract(sin(dot(vec2(x), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// Tunnel pattern studied from shane & shau\n// i.e. https://www.shadertoy.com/view/4tKXzV\nvec2 path(float t) {\n    float a = sin(t*.2 + 1.5), b = sin(t*.2);\n    return vec2(a*2., a*b);\n}\n\nvec3 camera(vec3 ro, vec2 uv, vec3 ta) {\n    vec3 fwd = normalize(ta - ro);\n    vec3 left = cross(vec3(0, 1, 0), fwd);\n    vec3 up = cross(fwd, left);\n    return normalize(fwd + uv.x*left + up*uv.y);\n}\n\nfloat sdSphere (vec3 p, float r) {\n    return length(p)-r; \n}\n\nvec4 map(vec3 p, vec3 p2) {\n    vec3 lTex = buildingTex(p.xy);\n    \n    p.xy -= path(p.z)*0.1;\n    float t = 100.0;\n    float w = 0.0;\n\n    float n = floor(p.z/0.5);\n\n    vec3 oldp = p;\n    p.z = mod(p.z, 1.0)-0.5;\n\n    w = sdBox(p-vec3(0.4,-1.2,0.0),vec3(0.02, 0.01, 0.3));\n    t = min(t, w);\n\n    w = 0.1 + dot(oldp, vec3(0, 0.0, 0.0));\n    t = min(t, w);\n\n\n    vec4 temp1 = vec4(0.0,0.0,0.0, t);\n    vec4 temp2 = vec4(0.0,0.0,0.0, sdBox(p-vec3(-0.4,-1.2,0.0),vec3(0.02, 0.01, 0.3)));\n    vec4 temp3 = vec4(0.8,0.8,0.1, sdBox(p-vec3(0.0,-1.21,0.0),vec3(0.4, 0.01, 1.0)));\n    \n    p.y += noise(n)*1.0+sin(2.0)*0.1;\n    p.x += noise(n)*0.3-0.15;\n    \n   \n    vec4 temp4 = vec4(lTex, sdBox(p+vec3(0.8,0.0,0.0),vec3(0.2, 1.0, 0.3)));\n    vec4 temp5 = vec4(lTex, sdBox(p+vec3(-0.8,0.0,0.0),vec3(0.2, 1.0, 0.3)));\n    \n    vec4 carbody = vec4(0.8,0.4,0.4, sdBox(p2-vec3(0.0,-1.0,0.8),vec3(0.05, 0.05, 0.1)));\n    vec4 frontTire = vec4(0.2,0.1,0.1, sdBox(p2-vec3(0.0,-1.0,0.88),vec3(0.08, 0.03, 0.01)));\n    vec4 backTire = vec4(0.2,0.1,0.1, sdBox(p2-vec3(0.0,-1.0,0.72),vec3(0.08, 0.03, 0.01)));\n    \n    float xCarPos = sin(iTime)*0.12;\n    float zCarPos = 0.6;\n    vec4 carbody2 = vec4(0.4,0.4,0.8, sdBox(p2-vec3(xCarPos,-1.0,0.8+zCarPos),vec3(0.05, 0.05, 0.1)));\n    vec4 frontTire2 = vec4(0.1,0.1,0.2, sdBox(p2-vec3(xCarPos,-1.0,0.88+zCarPos),vec3(0.08, 0.03, 0.01)));\n    vec4 backTire2 = vec4(0.1,0.1,0.2, sdBox(p2-vec3(xCarPos,-1.0,0.72+zCarPos),vec3(0.08, 0.03, 0.01)));\n    \n    \n    vec4 res1 = combine(temp1,temp2);\n    vec4 res2 = combine(temp3,temp4);\n    vec4 res3 = combine(temp5,carbody);\n    vec4 res4 = combine(frontTire,backTire);\n    vec4 res5 = combine(carbody2,frontTire2);\n    vec4 res6 = combine(backTire2,res1);\n    \n    vec4 res7 = combine(res2,res3);\n    vec4 res8 = combine(res4,res5);\n    vec4 res9 = combine(res6,res7);\n    vec4 res10 = combine(res8,res9);\n    \n    return res10;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = ( fragCoord.xy / iResolution.xy ) * 2.0 - 1.0;\n    vec3  dir;\n\n    vec3 pos = vec3(0.0, 0.0, iTime*SPEED);\n\n    float dt = iTime * 6.;\n    vec3 ro = vec3(0, 0, -4. + dt);\n    vec3 ta = vec3(0, -2, dt);\n    vec3 rd;\n\n    ro.xy += path(ro.z);\n    ta.xy += path(ta.z);\n\n    dir = camera(ro, uv, ta);\n\n    float t = 0.0;\n    vec3 modelCl;\n    for(int i = 0 ; i < 50; i++) {\n        vec4 temp = map(t * dir + pos, t * dir);\n        modelCl = temp.xyz;\n        if(temp.w < 0.01) break;\n        t += temp.w * 1.0;\n    }\n\n    vec3 ip = pos + dir * t;\n    vec4 cl = vec4(t * 0.01) * map(ip - 0.02, ip - 0.02) + t * 0.3;\n\n    // UI\n    uv = ( fragCoord.xy /iResolution.xy ) * vec2(80,40);\n    \n    vec2 cpos = vec2(37,28);\n    float dc = Digit(mod(iTime,60.0),floor(uv-cpos));\n    cpos.x += 3.5;\n    dc += Digit(mod(iTime*10.0,10.0),floor(uv-cpos));\n\n    vec3 cl2 = vec3(dc)*vec3(1,1,1);\n    \n    uv = ( fragCoord.xy * 2.0 - iResolution.xy ) / min( iResolution.x, iResolution.y );\n    vec4 res = drawGuage(uv);\n\tvec3 resColor = res.xyz;\n\n    if(res.w>0.0){\n        fragColor = (cl+vec4(modelCl,1.0))-vec4(cl2,1.0);\n    } else {\n        fragColor = vec4( vec3(resColor), 1.0 );\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}