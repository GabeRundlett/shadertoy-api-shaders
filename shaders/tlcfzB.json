{
    "Shader": {
        "info": {
            "date": "1612966948",
            "description": "potate",
            "flags": 32,
            "hasliked": 0,
            "id": "tlcfzB",
            "likes": 10,
            "name": "Bubblebum tiles",
            "published": 3,
            "tags": [
                "4d",
                "slice",
                "tiling",
                "bubblegum",
                "tiles"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 412
        },
        "renderpass": [
            {
                "code": "// slices of a 4d hyperlattice, as learned from blackle! \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord -= 0.5*iResolution.xy;\n    //fragCoord *= 0.99;\n    fragCoord += 0.5*iResolution.xy;\n    \n    float n1d = texelFetch(iChannel1,ivec2(mod(fragCoord + vec2(float(iFrame),0.),256.)),0).x;\n    vec3 n  = texelFetch(iChannel1,ivec2(mod(fragCoord  + n1d*200. ,256.)),0).xyz;\n    \n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    fragColor.xyz =texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    //fragColor.xyz = floor(fragColor.xyz*50.)/50.;\n    \n    fragColor.xyz = pow(fragColor.xyz, vec3(1.,1.2,1.));\n    \n    //fragColor.xyz = 1. - fragColor.xyz;\n    \n    \n    //fragColor.xyz *= 1. - dot(uv,uv)*0.8;\n    fragColor.xyz = pow(fragColor.xyz, vec3(0.7545 + n*0.));\n    \n    //fragColor = texture(iChannel2,fragCoord/iResolution.xy);\n    \n    //fragColor.xyz += smoothstep(1.,0.,length(fragColor))*n*0.;\n    \n    //fragColor.xyz -= smoothstep(0.,1.,length(fragColor))*n*0.05;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + (e)))\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n\nfloat cnt = 0.;\nvoid get(vec3 p, inout vec3 col, vec2 uv){\n    \n    \n    float df = fwidth(p.x);\n    float md = 0.3;\n    \n    vec3 id = floor(p/md + 0.5);\n    \n    \n    p = pmod(p,md);\n    \n    vec3 triCol = pal(0.5,0.5*vec3(1.,0.2,0.5),vec3(1,5. + 20.*id.y + iTime + uv.x,3),2.,id.x*5. + uv.x*1. + iTime);\n    \n    p = abs(p);\n    //triCol = mix(triCol,vec3(1),smoothstep(0.,4.,cnt));\n    \n    \n    {    \n        //col = mix(col,vec3(0.9),smoothstep(df,0.,abs(max(p.x,max(p.y,p.z)) - md*0.45) - md*0.01 ));\n    }\n    float env = pow(sin(fract(sin(id.x*20. + id.y*id.z*20.)*40.)*20. + id.y*10. + iTime*0.8*sin(id.x*20. + sin(id.z*20.)*20.)),5.);\n    p -= max(md*0.5*env,0.);\n    \n    if(sin(id.x + fract(sin(id.z)*10.)*200.) < 1.){\n        float d = max(p.x,max(p.y,p.z));\n        //d = abs(d);\n        col = mix(col,triCol,smoothstep(df,0.,d));\n        //col = mix(col,triCol,smoothstep(df,0.,abs((p).x)));\n\n    }\n    cnt ++;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    uv -= 0.5;\n    vec3 col = vec3(1,1.4,1.);\n    uv *= rot(0.5);\n    uv.y += iTime*0.1;\n    \n    vec3 p = vec3(uv,1);\nfloat vn = valueNoise(iTime*0.25,5.);\n    \n    p.yz *= rot(0.8);\n    p.yx *= rot(0.7  );\n    p.zx *= rot(-0.2 - iTime*0.);\n    \n    \n    //get(p*17.*2., col, uv);\n    get(p*16., col, uv);\n    get(p*8., col, uv);\n    \n    get(p*4., col, uv);\n    \n    get(p*0.5, col, uv);\n    \n    //get(p*1., col, uv);\n    \n    \n    col = pow(col,vec3(0.45));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float sc = 0. + valueNoise(iTime*14.,2.)*0. ;\n    \n    fragColor.x =texture(iChannel0,(fragCoord + sc*vec2(0,8))/iResolution.xy).x;\n    \n    fragColor.y =texture(iChannel0,(fragCoord + sc*vec2(0,-1))/iResolution.xy).y;\n    \n    fragColor.z =texture(iChannel0,(fragCoord + sc*vec2(0,-4))/iResolution.xy).z;\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define pi acos(-1.)\n\n\n#define sint(a) (asin(sin(a))*2. - 1.)\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define pmod(p,d) mod(p - (d)*0., (d)) - 0.5*(d)\n\n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + (e)))\n\nfloat r11(float i){ return fract(sin(i*15.126)*115.6);}\n\nvec2 r12(float i){float r=r11(i );  return vec2(r,r11(i + r + 2.));}\n\n#define xor(a,b,c) min(max((a),-(b)), max((b),-(a) - c)) \n\nfloat ss( float c, float power, float bias){\n    c = clamp(c,-0.,1.);\n    //c = smoothstep(0.,1.,c);\n    \n    c = pow(c,1. + bias);\n    \n    float a = pow( abs(c), power);\n    float b = 1.-pow( abs(c - 1.), power);\n    \n    return mix(a,b,c);\n}\nfloat valueNoise(float i, float p){ return mix(r11(floor(i)),r11(floor(i) + 1.), ss(fract(i), p,0.6));}\n\nfloat valueNoiseStepped(float i, float p, float steps){ return mix(  floor(r11(floor(i))*steps)/steps, floor(r11(floor(i) + 1.)*steps)/steps, ss(fract(i), p,0.6));}\n\n\n#define dmin(a,b,c) (max(a.x,-b) < b ? a : vec2(b,c))\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}