{
    "Shader": {
        "info": {
            "date": "1542752976",
            "description": "Just Messing around with some shader. Trying stuff. Getting inspired by some of the snes game mother background effect during fight... I haven't played this game in years thought.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtyfDm",
            "likes": 3,
            "name": "Mother Fighting Background ish",
            "published": 3,
            "tags": [
                "snes",
                "pixelated",
                "scrolling",
                "mother"
            ],
            "usePreview": 0,
            "username": "Aramir",
            "viewed": 560
        },
        "renderpass": [
            {
                "code": "// Emulated output resolution\n#define EMU_RESOLUTION_WIDTH 48.0\n#define EMU_RESOLUTION_HEIGHT 27.0\n\nvec3 getVaporWaveColor( float offset )\n{   \n    /********************\n     * Color variations *\n\t * R    G     B     * \n     * 80   70   220    *\n     * ->\t=   <-      *\n     * 120  70\t190     *\n     * => 40 & 30 p sec *\n     * intervals        *\n     ********************/\n    \n    float intPartTimeFloat;\n    float fracTimeVar = modf(iTime/2.0+offset, intPartTimeFloat)*2.0 - 1.0; // [-1;1] per second\n    int intPartTime = int(intPartTimeFloat);\n    bool evolIntPart = (intPartTime%2 == 0);\n    float rVar, bVar;\n    if(evolIntPart)\n    {\n        rVar = 40.0*fracTimeVar / 255.0; // ( [0;40] -> [40;0] ) / 255 (over 2 sec) \n        bVar = 30.0*fracTimeVar / 255.0; // ( [0;3] -> [30;0] ) / 255 (over 2 sec) \n    }\n    else\n    {\n        rVar = (1.0 - 40.0*fracTimeVar) / 255.0;\n        bVar = (1.0 - 30.0*fracTimeVar) / 255.0;\n    }\n    \n    // Time varying pixel color\n    return vec3(0.39+rVar, 0.27, 0.8+bVar);\n}\n\nfloat ScaleFromTo(const float inF, const float a, const float b, const float c, const float d)\n{\n    // in : input\n    // [a, b] : input bounds\n    // [c, d] : output bounds\n    return (((d-c)*(inF-a))/(b-a))+c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Emulated Resolution Scaler\n\tvec2 normalizedFrag = fragCoord / iResolution.xy;\n    \n    // Tiling / pixelating effect\n    vec2 emuFragCoord = vec2(\n      \tScaleFromTo(fragCoord.x, 0.5, iResolution.x-0.5,\n                    iTime, EMU_RESOLUTION_WIDTH+iTime),\n      \tScaleFromTo(fragCoord.y, 0.5, iResolution.y-0.5,\n                    0.0, EMU_RESOLUTION_HEIGHT)\n        );\n    \n    vec2 uv = emuFragCoord;\n    \n    // Waving effect \n    uv.y += 4.0*sin(iTime);\n    uv.x += 3.0*cos(iTime);\n    \n    // ColorMapping\n    uv = vec2(int(uv.x), int(uv.y));\n    uv.x += uv.x*0.2*uv.y;\n    vec3 color = getVaporWaveColor(uv.x+uv.y);\n    \n    // Output to screen    \n    fragColor = vec4(color,1);\n    \n    // DEBUG ZONE\n    //fragColor = vec4(getVaporWaveColor(normalizedFrag.x + normalizedFrag.y), 1);\n    //fragColor = vec4(emuFragCoord, 1, 1);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}