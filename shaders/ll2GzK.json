{
    "Shader": {
        "info": {
            "date": "1469270085",
            "description": "Some experimental fractal experimenting. Enjoy. You are allowed to look around with mouse :)",
            "flags": 0,
            "hasliked": 0,
            "id": "ll2GzK",
            "likes": 6,
            "name": "Menger Something",
            "published": 3,
            "tags": [
                "3dfractal"
            ],
            "usePreview": 0,
            "username": "mu6k",
            "viewed": 500
        },
        "renderpass": [
            {
                "code": "/*by musk License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.*/\n\n#define time (iTime*.2)\n\nvoid angularRepeat(const float a, inout vec2 v)\n{\n    float an = atan(v.y,v.x);\n    float len = length(v);\n    an = mod(an+a*.5,a)-a*.5;\n    v = vec2(cos(an),sin(an))*len;\n}\n\nfloat mBox(vec3 p, vec3 b)\n{\n\treturn max(max(abs(p.x)-b.x,abs(p.y)-b.y),abs(p.z)-b.z);\n}\n\nfloat mBox(vec2 p, vec2 b)\n{\n    return max(abs(p.x)-b.x, abs(p.y)-b.y);\n}\n\nfloat mBox(vec3 p , float b) { return mBox(p,vec3(b)); }\nfloat mBox(vec2 p , float b) { return mBox(p,vec2(b)); }\n\nfloat mSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\n\nfloat mSphere(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\n#define rtime1 ((time-fract(time))*.012)\n#define rtime2 ((time-fract(time))*.027)\n#define rtime3 ((time-fract(time))*.013)\n#define rot (mat3(cos(rtime1),0,sin(rtime1),0,1,0,-sin(rtime1),0,cos(rtime1))*mat3(cos(rtime2),sin(rtime2),.0,-sin(rtime2),cos(rtime2),.0,0,0,1)*mat3(1,0,0,0,cos(rtime3),sin(rtime3),0,-sin(rtime3),cos(rtime3)))\n\nfloat dfa(vec3 p){\n    float e=.4;\n    float d = mSphere(p,1996.00);\n    \n    float s = 1.0;\n    float is = 1.0/s;\n    float rs = is*3.0;\n    \n    for (int i=0; i<1; i++)\n    {\n    \tp = (abs(abs(p)-rs)-rs);\n        d = max(d,-mSphere(p.xy,is)*is);\n        d = max(d,-mBox(p.yz,is)*is);\n        d = max(d,-mSphere(p.zx,is)*is);\n        p*=rot;\n        s*=3.0;\n        is*=1.0/3.0;\n        rs*=1.0/3.0;\n    }\n    \n  \treturn d;\n}\n\nfloat dfb(vec3 p){\n    float e=.4;\n    float d = mSphere(p,1996.00);\n    \n    float s = 1.0;\n    float is = 1.0/s;\n    float rs = is*3.0;\n    \n    for (int i=0; i<6; i++)\n    {\n    \tp = (abs(abs(p)-rs)-rs);\n        d = max(d,-mSphere(p.xy,is)*is);\n        d = max(d,-mBox(p.yz,is)*is);\n        d = max(d,-mSphere(p.zx,is)*is);\n        p*=rot;\n        s*=3.0;\n        is*=1.0/3.0;\n        rs*=1.0/3.0;\n    }\n    \n  \treturn d;\n}\n\nfloat df(vec3 p)\n{\n    return dfb(p);\n}\n\nvec3 nf(vec3 p)\n{\n    vec2 e = vec2(0,0.001);\n    float c =df(p);\n    return normalize(vec3(c-df(p+e.yxx),c-df(p+e.xyx),c-df(p+e.xxy)));\n}\n\nvoid rotate(const float a, inout vec2 v)\n{\n    float cs = cos(a), ss = sin(a);\n    vec2 u = v;\n    v.x = u.x*cs + u.y*ss;\n    v.y = u.x*-ss+ u.y*cs;\n}\n\nvec3 shading(vec3 pos, vec3 dir, out float rou)\n{\n    vec3 light = normalize(vec3(1,2,3));\n    float value = \n        df(pos+light)+\n        df(pos+light*.5)*2.0+\n        df(pos+light*.25)*4.0+\n        df(pos+light*.125)*8.0+\n        df(pos+light*.6125)*16.0;\n    value=value*.1+.04;\n    vec3 ref = reflect(dir,nf(pos));\n    float ro = min(max(min(min(df(pos+ref),df(pos+ref*0.25)*4.0), df(pos+ref*.5)*2.0)*.5,.0),1.0);\n    float r = 0.0;\n        \n    if (dfa(pos)<dfb(pos)){\n        r+=0.5;\n    }\n    r+=texture(iChannel2,(pos.xy+pos.xz)*0.5).r;\n    r+=texture(iChannel2,(pos.yz+pos.yx)*0.2).r;\n    rou=r;\n    vec3 tex = mix(texture(iChannel0,ref).xyz, texture(iChannel1,ref).xyz, r);\n    float fres = (dot(dir,nf(pos))*.5+.5)*9.0;\n    \n    vec3 color = value*vec3(dot(nf(pos),light)*.5+.5)*.5 + fres*tex*ro;\n    color*=10.0/pow(length(pos),2.0);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-iResolution.xy*.5) / iResolution.yy;\n    vec2 mouse = (iMouse.xy-iResolution.xy*.5) / iResolution.yy;\n    \n    vec3 pos = vec3(0,0,0);\n    vec3 dir = normalize(vec3(uv,1.0-pow(length(uv),2.0)*.6));\n    \n    float rx = (time-fract(time)*0.997)*67.4;\n    float ry = (time-fract(time)*0.99)*3.0;\n    float rz = (time-fract(time)*0.99)*6.37;\n    \n    if (iMouse.z>.5){\n    \trx = mouse.x*4.0;\n    \try = mouse.y*4.0;\n        rz=.0;\n    }\n    \n    rotate(rx,pos.xz);\n    rotate(rx,dir.xz);    \n    rotate(ry,pos.yx);\n    rotate(ry,dir.yx);   \n    rotate(rz,dir.yz);\n    \n    pos.x+=(sin(time*.1)+sin(time*0.13))*4.0;\n    pos.y+=sin(time*0.7)*0.4;\n    pos.z+=sin(time*0.3-fract(time))*0.5;\n    vec3 cam=pos;\n    float itf=0.0;\n    for (int i=0; i<80; i++)\n    {\n     \tfloat dist = df(pos);\n       \tpos += dist*dir;\n        itf+=0.1;\n        if (dist<0.00001||dist>10.0)break;\n    }\n    \n    float ro;\n    vec3 color = shading(pos, dir,ro);\n    \n    vec3 pos2 = pos;\n    vec3 dir2 = reflect(dir, nf(pos));\n    dir2=normalize(dir2+(texture(iChannel3,pos2.xy+pos2.zy*0.3+fragCoord/64.0+vec2(iTime*412.123),-4.0).xyz-vec3(0.5))*mix(0.0,0.05,ro*ro*ro));\n    pos2 += dir2*0.0001;\n    for (int i=0; i<40; i++){\n     \tfloat dist = df(pos2);\n       \tpos2 += dist*dir2;\n        if (dist<0.000001||dist>10.0)break;\n    }\n    \n    float fres = 1.0-(dot(dir,nf(pos)));\n    float ro2;\n    color += (shading(pos2, dir2,ro2)+distance(pos,pos2)*vec3(0.02,0.03,0.04)*0.05)*fres;\n    color+=distance(cam,pos)*vec3(0.02,0.03,0.04)*0.05;\n    \n    //color-=vec3(0.1);\n    color *= 1.0-pow(length(uv),2.0)*.5;\n    color = mix(color,vec3(length(color)),length(color)*.5);\n    color = sqrt(color);\n    color = vec3(1.2, 1.1, 1.14)*color / (vec3(1)+color);\n    \n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}