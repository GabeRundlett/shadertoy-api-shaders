{
    "Shader": {
        "info": {
            "date": "1654368215",
            "description": "Done during FieldFx demoparty shaderjam with evvvvil and mrsoleil. \nReally underperforming result, sorry for that, I will improve.\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "fdGyz1",
            "likes": 9,
            "name": "[FieldFX Shader Jam] 大龙猫 - Meh",
            "published": 3,
            "tags": [
                "fieldfx"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "\nvec3 erot(vec3 p,vec3 ax,float t){\n    return mix(dot(ax,p)*ax,p,cos(t))+cross(ax,p)*sin(t);\n}\n     \nfloat box2(vec2 p, vec2 b){\n    vec2 q = abs(p)-b;\n    return length(max(vec2(0.),q))+min(0.,max(q.x,q.y));  \n}\n\nfloat box3(vec3 p,vec3 b){\n    vec3 q = abs(p)-b;\n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n}\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l,th)*0.5;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\nfloat diam(vec3 p,float s){\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*inversesqrt(3.);\n}\n\nvec2 sdf(vec3 p){  \n \n    vec3 tp=p,hp=p;\n    hp.y -=abs(asin(sin(iTime)));  \n  float gy = dot(sin(p),cos(p.zxy*7.));  \n    \nhp = erot(hp,normalize(vec3(1.,2.,3)),iTime);\n    vec2 h;\n    h.x = length(hp)-1.;\n    h.x = .7*mix(diam(hp,1.),box3(hp,vec3(1.)),sin(iTime+gy*.2)*.5-0.2)*.9;\n   \n     \n    \n  \n    h.y = 1.;\n  \n    vec2 t;\n     tp.y +=1.;\n      tp.x +=iTime;\n     tp.xz = asin(sin(tp.xz));\n  \n   float sc=1.;\n    for(float i=0.;i<4.;i++){\n          tp.x = .5-abs(tp.x);\n         tp*=2.5;\n         sc*=2.5;\n          \n      tp = erot(tp,vec3(0,1,0),.785);\n      }\n     float dd,c=10./3.141592;\n     \n     tp.xz = vec2(log(dd=length(tp.xz)),atan(tp.x,tp.z))*c;\n     tp.y /=dd/=c;\n    \n    tp.x +=iTime;\n    tp.xz = asin(sin(tp.xz));\n  \n    tp.y = abs(tp.y)-0.5-abs(gy)*.1;\n \n    gy = dot(sin(tp),cos(tp.zxy*7.)); \n    t.x=  dd*.8*min(box2(tp.yz,vec2(.01)), box2(tp.xy,vec2(.01)))/sc;\n    t.y = 2.;\n    h = t.x < h.x ? t:h;\n      \n      \n      \n    return h;\n}\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(.0,.3,.7)));}\n#define q(s) s*sdf(p+s).x\nvec3 norm(vec3 p,float ee){vec2 e=vec2(-ee,ee);return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n  vec3 col = vec3(.1,.2,.7)*max(0.,1.+uv.y*7.);\n\tvec3 ro = vec3(0.,1.+sin(iTime),-5.);\n   \n  if(mod(iTime,20.) > 10. ) ro = erot(ro,normalize(vec3(0.,1.,0.)),iTime*.5);\n \n  vec3 rt = vec3(0.);\n  vec3 z = normalize(rt-ro);\n  vec3 x = normalize(cross(z,vec3(0.,-1.,0.)));\n  vec3 y = normalize(cross(z,x));\n  vec3 rd = mat3(x,y,z)*normalize(vec3(uv,1.-sin(floor(iTime*.5)*55.)*.8*sqrt(length(uv))));\n  vec3 rp = ro;\n  vec3 light = vec3(1.,2.,-3);\n  float dd = 0.;\n  vec3 acc = vec3(0.);\n  \n\n  for(float i=0.;i<128.;i++){\n      vec2 d = sdf(rp);\n      if(d.y == 2.){\n        acc += vec3(1.,1.,0.)*.25*exp(i*-abs(d.x))/(60.+sin(iTime*10.+rp.y*10.)*50.);\n        d.x = max(.001,abs(d.x));\n      }\n      rp+=rd*d.x;\n      \n      dd+=d.x;\n      if(dd>50.) break;\n      if(d.x < .0001){\n          vec3 n = norm(rp,.001);\n         vec3 n2 = norm(rp,.02+cos(rp.z*10.)*.01);\n          float dif = max(0.5,dot(normalize(light-rp),n));\n          float spc = pow(max(0.,dot(rd,reflect(normalize(light),n))),32.);\n          float fres = pow(1. - dot(-rd, n), 5.);\n         float ol = step(.1,.3*length(n-n2));\n         if(ol ==0.){\n             rd = reflect(rd,n);\n             rp+=rd*.1;\n           continue;\n           }\n          col = pal(fres*2.-iTime*.5+dif)*ol+spc+fres;\n          break;\n      }\n\n  }  \n  \n\n    // Output to screen\n    fragColor = vec4(col+acc,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}