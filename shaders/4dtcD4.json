{
    "Shader": {
        "info": {
            "date": "1518919888",
            "description": "w,a,s and d or arrow keys to walk, e or spacebar to shoot holes and mouse to look around. you can change keyboard controls in buf a.\n[url=https://www.shadertoy.com/view/Mddczf]testing here[/url]",
            "flags": 48,
            "hasliked": 0,
            "id": "4dtcD4",
            "likes": 14,
            "name": "destroy the forest",
            "published": 3,
            "tags": [
                "3d",
                "game",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 964
        },
        "renderpass": [
            {
                "code": "vec4 getbuffer(ivec2 coord)\n{\n    return texelFetch(iChannel0,coord,0);\n}\n\nvec4 getbuffer(int x, int y)\n{\n    return texelFetch(iChannel0,ivec2(x,y),0);\n}\n\nvec4 getkey(int x, int y)\n{\n    return texelFetch(iChannel1,ivec2(x,y),0);\n}\n\n//distance field, rendering and collision detection\nfloat map(vec3 p)\n{\n    vec2 p2 = mod(p.xz,16.0)-8.0;\n    \n    float plane = p.y;\n    \n    float tree = length(p2);\n    tree = length(max(vec2(tree-1.0,p.y-10.0),0.0));\n    \n    float top = length(vec3(p2,p.y-10.0))-4.0;\n    \n    float len = min(min(plane,tree),top);\n    \n    float len2 = 1e6;\n    \n    for (int i = INDEX_HOLE_A; i < INDEX_HOLE_B; i++) {\n        len2 = min(len2,dot2(p-getbuffer(i,0).xyz));\n    }\n    \n    return max(len,2.0-sqrt(len2));\n}\n\nint mapid(vec3 p)\n{\n    vec2 p2 = mod(p.xz,16.0)-8.0;\n    \n    float plane = p.y;\n    \n    float trunk = length(p2);\n    trunk = length(max(vec2(trunk-1.0,p.y-10.0),0.0));\n    \n    float top = length(vec3(p2,p.y-10.0))-4.0;\n    \n    return (plane < 0.01) ? 1 : ((trunk < 0.01) ? 2 : ((top < 0.01) ? 3 : 0));\n}\n\nvec3 rotatecam(vec3 dir)\n{\n    \n    vec4 rotation = getbuffer(INDEX_ROT,0);\n    \n    //dir.xy *= rot(rotation.y);\n    dir.yz *= rot(rotation.y);\n    dir.xz *= rot(rotation.x);\n    \n    return dir;\n}\n\nfloat castray(vec3 pos, vec3 dir)\n{\n    \n    float dist = 0.0;\n    float len;\n    \n    for (int i = 0; i < 500; i++)\n    {\n        len = map(pos);\n        dist += len;\n        pos += dir*len;\n        if (dist > 100.0 || len < 0.01) break;\n    }\n    if (dist > 100.0) return 10000.0;\n    return dist;\n}\n\nvec3 calcnormal(vec3 p)\n{\n    vec2 eps = vec2(0.01, 0.0);\n    \n    vec3 normal = normalize(vec3(map(p+eps.xyy)-map(p-eps.xyy),\n                                 map(p+eps.yxy)-map(p-eps.yxy),\n                                 map(p+eps.yyx)-map(p-eps.yyx)));\n    return normal;\n}\n\nfloat castraycharacter(vec3 pos, vec3 dir, vec3 head)\n{\n    \n    float dist = 0.0;\n    float len;\n    \n    for (int i = 0; i < 100; i++)\n    {\n        vec3 pos2 = pos-(head+BODY_FEET*vec3(1,0.5,1));\n        len = length(vec3(pos2.xz,\n                          pos2.y \n                   -clamp(pos2.y ,-1.0,1.0)))-0.5;\n        dist += len;\n        pos += dir*len;\n        if (dist > 50.0 || len < 0.01) break;\n    }\n    if (dist > 50.0) return 10000.0;\n    return dist;\n}\n\nfloat castshadowcharacter( in vec3 ro, in vec3 rd, vec3 head, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t < maxt; )\n    {\n        \n        vec3 pos2 = ro + rd*t - (head+BODY_FEET*vec3(1,0.5,1));\n        float h = length(vec3(pos2.xz,\n                              pos2.y \n                       -clamp(pos2.y ,-1.0,1.0)))-0.5;\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\nvec4 setvariables(int index)\n{\n    vec4 imouse = iMouse;\n    if (imouse.z > 0.0) imouse.w = abs(imouse.w);\n    \n    bool bufferloaded = all(equal(getbuffer(INDEX_LOADED,0),vec4(1.0)));\n    vec4 fragColor;\n    if (index == INDEX_HEAD)\n    {\n        if (!bufferloaded)\n        {\n            fragColor = vec4(0.0,10.0,0.0,1.0);\n            return fragColor;\n        }\n        fragColor = getbuffer(0,0);\n\n        vec3 head = fragColor.xyz;\n\n        head.y -= clamp(map(head+BODY_FEET)-0.5,-iTimeDelta*10.0,10.0);\n        \n        vec2 movement = vec2(getkey(MOVE_RIGHT1,0).x-getkey(MOVE_LEFT1,0).x,\n                        \t getkey(MOVE_FORW1 ,0).x-getkey(MOVE_BACK1,0).x);\n             movement+= vec2(getkey(MOVE_RIGHT2,0).x-getkey(MOVE_LEFT2,0).x,\n                        \t getkey(MOVE_FORW2 ,0).x-getkey(MOVE_BACK2,0).x);\n        movement *= iTimeDelta*MOVE_SPEED/max(length(movement),1.0);\n        \n    \tvec4 rotation = getbuffer(INDEX_ROT,0);\n        mat2 dir2 = rot(rotation.x);\n        \n        movement *= dir2;\n        \n        vec3 collider = vec3(movement,0.0).xzy;\n        \n        float collision = map(head+collider);\n        \n        if (collision<0.5)\n        {\n            vec2 eps = vec2(0.01,0.0);\n            vec2 normal = vec2(map(head+collider+eps.xyy),\n                          map(head+collider+eps.yyx))\n                         -collision;\n            \n            if (normal != vec2(0))\n            {\n            \tnormal = normalize(normal)*iTimeDelta*MOVE_SPEED;\n            \n            \thead.xz += normal;\n            }\n        }\n        head.xz += movement;\n        \n        fragColor.xyz = head;\n        return fragColor;\n    }\n    \n    if (index == INDEX_MOUSE)\n    {\n        fragColor = imouse/iResolution.xyxy;\n        return fragColor;\n    }\n    \n    if (index == INDEX_ROT)\n    {\n        if (!bufferloaded)\n        {\n            fragColor = vec4(0);\n            return fragColor;\n        }\n        fragColor = getbuffer(INDEX_ROT,0);\n        \n    \tvec4 lastiMouse = getbuffer(INDEX_MOUSE,0)*iResolution.xyxy;\n        vec4 mousedelta = vec4(0.0);\n        \n        if (all(greaterThan(min(lastiMouse,imouse),vec4(0.0)))) {\n            mousedelta = imouse-lastiMouse;\n        }\n        fragColor.x += mousedelta.x*SENSITIVITY_X;\n        fragColor.y = clamp(fragColor.y+mousedelta.y*SENSITIVITY_Y,-HALF_PI,HALF_PI);\n        return fragColor;\n    }\n    \n    if (index == INDEX_LOADED)\n    {\n        fragColor = vec4(1.0);\n        return fragColor;\n    }\n    if (index == INDEX_CAM)\n    {\n        if (!bufferloaded)\n        {\n            fragColor = vec4(1,0,0,0);\n            return fragColor;\n        }\n        float lastdist = getbuffer(INDEX_CAM,0).r;\n        vec3 pos = getbuffer(INDEX_HEAD,0).xyz;\n        vec3 camdir = vec3(0,1,0)-rotatecam(vec3(0.0,0.0,1.0))*DIST_THIRDPERSON;\n        \n        float dist = castray(pos,normalize(camdir));\n        \n        fragColor.r = min(min(dist/length(camdir)-0.1,lastdist+iTimeDelta),1.0);\n        return fragColor;\n    }\n    if (index == INDEX_HOLE_INDEX)\n    {\n        if (!bufferloaded)\n        {\n            fragColor = vec4(INDEX_HOLE_A,0,0,0);\n            return fragColor;\n        }\n        vec4 decalindex = getbuffer(INDEX_HOLE_INDEX,0);\n        fragColor.y = max(getkey(SHOOT1,0).x,getkey(SHOOT2,0).x);\n        if (fragColor.y > 0.5 && decalindex.y < 0.5)\n        {\n            fragColor.z = 1.0;\n            fragColor.x = float((int(decalindex.x)-INDEX_HOLE_A+1)%(INDEX_HOLE_B-INDEX_HOLE_A)+INDEX_HOLE_A);\n        }\n        else\n        {\n        \tfragColor.x = decalindex.x;\n        }\n        return fragColor;\n    }\n    \n    if (index >= INDEX_HOLE_A && index < INDEX_HOLE_B)\n    {\n        if (!bufferloaded)\n        {\n            fragColor = vec4(-1000000.0);\n            return fragColor;\n        }\n        \n        vec4 decalindex = getbuffer(INDEX_HOLE_INDEX,0);\n        \n        if (index == int(decalindex.x) && decalindex.z > 0.5)\n        {\n            vec3 dir = rotatecam(vec3(0.0,0.0,1.0));\n            vec3 camdir = vec3(0.0,1.0,0.0)-dir*DIST_THIRDPERSON;\n            vec3 pos = getbuffer(INDEX_HEAD,0).xyz+camdir*getbuffer(INDEX_CAM,0).x;\n\n            float dist = castray(pos,dir);\n            \n            pos += dir*dist;\n            \n            fragColor.xyz = pos;\n            \n            return fragColor;\n            \n        }\n        else\n        {\n            fragColor = getbuffer(index,0);\n            return fragColor;\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    bool bufferloaded = all(equal(getbuffer(6,0),vec4(1.0)));\n    \n    if (fragCoord.y < 1.0)\n    {\n        fragColor = setvariables(int(fragCoord.x));\n    }\n    else\n    {\n        vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n\n\n        vec3 dir = normalize(vec3(uv,1.0));\n        //dir *= matrix;\n    \tdir = rotatecam(dir);\n        \n        vec3 pos2 = getbuffer(INDEX_HEAD,0).xyz;\n        \n        vec3 camdir = vec3(0,1,0)-rotatecam(vec3(0.0,0.0,1.0))*DIST_THIRDPERSON;\n        \n        float thirdpers = getbuffer(INDEX_CAM,0).r;\n        \n        vec3 pos = pos2 + camdir*thirdpers;\n        float dist1 = castraycharacter(pos, dir, pos2);\n        float dist2 = castray(pos,dir);\n        float dist = min(dist1,dist2);\n        \n        vec3 ldir = normalize(vec3(-1,-1,-1));\n        \n        float opacity = 1.0;\n        float opacity2 = clamp(1.5-thirdpers*2.0,0.0,1.0);\n        if (dist1 < dist2)\n        {\n            opacity = opacity2;\n        \tvec3 pos3 = pos+dir*dist1;\n            vec3 normal = pos3-pos2+vec3(0,1,0);\n            normal = normalize(normal-vec3(0,clamp(normal.y,-1.0,1.0),0));\n            fragColor = vec4(normal*0.5+0.5,1.0);\n            \n            float diffusion = dot(normal,-ldir);\n            float ambient = 0.1;\n            \n            fragColor *= clamp(diffusion,ambient,1.0);\n        }\n        \n        vec4 col = vec4(0);\n        if (dist2 < 1000.0)\n        {\n        \tvec3 pos3 = pos+dir*dist2;\n            vec3 normal = calcnormal(pos3);\n            \n            int id = mapid(pos3);\n            \n            if (id == 1)\n            {\n                col = texture(iChannel2,pos3*0.2).r*vec4(0.5,0.3,0.1,1);\n                col *= col;\n            }\n            else if (id == 2)\n            {\n                col = vec4(0.5,0.3,0.1,1);\n            }\n            else if (id == 3)\n            {\n                float noise = textureLod(iChannel2,pos3*0.4,0.0).r;\n                col = mix(vec4(0.2,1,0.1,1),vec4(0.3,0.4,0.2,1),noise);\n            }\n            \n            float shadow = 1.0-(1.0-castshadowcharacter(pos3,-ldir,pos2,0.0,100.0,5.0))*(1.0-opacity2);\n            \n            float diffusion = clamp(dot(normal,-ldir),0.0,1.0);\n            float ambient = 0.1;\n            \n            col *= clamp(diffusion*shadow,ambient,1.0);\n        }\n        else\n        {\n            col = texture(iChannel3,dir);\n            col *= col;\n        }\n        \n        fragColor = mix(fragColor,col,opacity);\n        fragColor = sqrt(fragColor);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 getbuffer(ivec2 coord) {\n    return texelFetch(iChannel0,coord,0);\n}\n\nvec4 getbuffer(int x, int y) {\n    return texelFetch(iChannel0,ivec2(x,y),0);\n}\n\n//distance field, rendering and collision detection\nfloat map(vec3 p)\n{\n    vec2 p2 = mod(p.xz,16.0)-8.0;\n    \n    float plane = p.y;\n    \n    float tree = length(p2);\n    tree = length(max(vec2(tree-1.0,p.y-10.0),0.0));\n    \n    float top = length(vec3(p2,p.y-10.0))-4.0;\n    \n    float len = min(min(plane,tree),top);\n    \n    float len2 = 1e6;\n    \n    for (int i = INDEX_HOLE_A; i < INDEX_HOLE_B; i++) {\n        len2 = min(len2,dot2(p-getbuffer(i,0).xyz));\n    }\n    \n    return max(len,2.0-sqrt(len2));\n}\n\nint mapid(vec3 p)\n{\n    vec2 p2 = mod(p.xz,16.0)-8.0;\n    \n    float plane = p.y;\n    \n    float trunk = length(p2);\n    trunk = length(max(vec2(trunk-1.0,p.y-10.0),0.0));\n    \n    float top = length(vec3(p2,p.y-10.0))-4.0;\n    \n    return (plane < 0.01) ? 1 : ((trunk < 0.01) ? 2 : ((top < 0.01) ? 3 : 0));\n}\n\nvec3 rotatecam(vec3 dir)\n{\n    \n    vec4 rotation = getbuffer(INDEX_ROT,0);\n    \n    //dir.xy *= rot(rotation.y);\n    dir.yz *= rot(rotation.y);\n    dir.xz *= rot(rotation.x);\n    \n    return dir;\n}\n\nfloat castray(vec3 pos, vec3 dir)\n{\n    \n    float dist = 0.0;\n    float len;\n    \n    for (int i = 0; i < 500; i++)\n    {\n        len = map(pos);\n        dist += len;\n        pos += dir*len;\n        if (dist > 100.0 || len < 0.01) break;\n    }\n    if (dist > 100.0) return 10000.0;\n    return dist;\n}\n\nvec3 calcnormal(vec3 p)\n{\n    vec2 eps = vec2(0.01, 0.0);\n    \n    vec3 normal = normalize(vec3(map(p+eps.xyy)-map(p-eps.xyy),\n                                 map(p+eps.yxy)-map(p-eps.yxy),\n                                 map(p+eps.yyx)-map(p-eps.yyx)));\n    return normal;\n}\n\nfloat castraycharacter(vec3 pos, vec3 dir, vec3 head)\n{\n    \n    float dist = 0.0;\n    float len;\n    \n    for (int i = 0; i < 100; i++)\n    {\n        vec3 pos2 = pos-(head+BODY_FEET*vec3(1,0.5,1));\n        len = length(vec3(pos2.xz,\n                          pos2.y \n                   -clamp(pos2.y ,-1.0,1.0)))-0.5;\n        dist += len;\n        pos += dir*len;\n        if (dist > 50.0 || len < 0.01) break;\n    }\n    if (dist > 50.0) return 10000.0;\n    return dist;\n}\n\nfloat castshadowcharacter( in vec3 ro, in vec3 rd, vec3 head, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t < maxt; )\n    {\n        \n        vec3 pos2 = ro + rd*t - (head+BODY_FEET*vec3(1,0.5,1));\n        float h = length(vec3(pos2.xz,\n                              pos2.y \n                       -clamp(pos2.y ,-1.0,1.0)))-0.5;\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n\n\n    vec3 dir = normalize(vec3(uv,1.0));\n    //dir *= matrix;\n    dir = rotatecam(dir);\n\n    vec3 pos2 = getbuffer(INDEX_HEAD,0).xyz;\n\n    vec3 camdir = vec3(0,1,0)-rotatecam(vec3(0.0,0.0,1.0))*DIST_THIRDPERSON;\n\n    float thirdpers = getbuffer(INDEX_CAM,0).r;\n\n    vec3 pos = pos2 + camdir*thirdpers;\n    float dist1 = castraycharacter(pos, dir, pos2);\n    float dist2 = castray(pos,dir);\n    float dist = min(dist1,dist2);\n\n    vec3 ldir = normalize(vec3(-1,-1,-1));\n\n    float opacity = 1.0;\n    float opacity2 = clamp(1.5-thirdpers*2.0,0.0,1.0);\n    if (dist1 < dist2)\n    {\n        opacity = opacity2;\n        vec3 pos3 = pos+dir*dist1;\n        vec3 normal = pos3-pos2+vec3(0,1,0);\n        normal = normalize(normal-vec3(0,clamp(normal.y,-1.0,1.0),0));\n        fragColor = vec4(normal*0.5+0.5,1.0);\n\n        float diffusion = dot(normal,-ldir);\n        float ambient = 0.1;\n\n        fragColor *= clamp(diffusion,ambient,1.0);\n    }\n\n    vec4 col = vec4(0);\n    if (dist2 < 1000.0)\n    {\n        vec3 pos3 = pos+dir*dist2;\n        vec3 normal = calcnormal(pos3);\n\n        int id = mapid(pos3);\n\n        if (id == 1)\n        {\n            col = texture(iChannel2,pos3*0.2).r*vec4(0.5,0.3,0.1,1);\n            col *= col;\n        }\n        else if (id == 2)\n        {\n            col = vec4(0.5,0.3,0.1,1);\n        }\n        else if (id == 3)\n        {\n            float noise = textureLod(iChannel2,pos3*0.4,0.0).r;\n            col = mix(vec4(0.2,1,0.1,1),vec4(0.3,0.4,0.2,1),noise);\n        }\n\n        float shadow = 1.0-(1.0-castshadowcharacter(pos3,-ldir,pos2,0.0,100.0,5.0))*(1.0-opacity2);\n\n        float diffusion = clamp(dot(normal,-ldir),0.0,1.0);\n        float ambient = 0.1;\n\n        col *= clamp(diffusion*shadow,ambient,1.0);\n    }\n    else\n    {\n        col = texture(iChannel3,dir);\n        col *= col;\n    }\n\n    fragColor = mix(fragColor,col,opacity);\n    fragColor = sqrt(fragColor);\n    \n    vec2 temp = abs(fragCoord-iResolution.xy*0.5);\n    vec2 crosshair = vec2(min(temp.x,temp.y)-2.0,abs(max(temp.x,temp.y)-16.0)-6.0);\n    \n    if (crosshair.x <= 0.0 && crosshair.y <= 0.0) {\n        fragColor = vec4(crosshair.x <= -1.0 && crosshair.y <= -1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n#define dot2(p) dot(p,p)\n\n//keyboard keys\n#define KEY_UP    38\n#define KEY_DOWN  40\n#define KEY_RIGHT 39\n#define KEY_LEFT  37\n#define KEY_E     69\n#define KEY_W     87\n#define KEY_A     65\n#define KEY_S     83\n#define KEY_D     68\n#define KEY_SPACE 32\n\n//movement keys\n#define MOVE_FORW1  KEY_W\n#define MOVE_LEFT1  KEY_A\n#define MOVE_RIGHT1 KEY_D\n#define MOVE_BACK1  KEY_S\n#define SHOOT1      KEY_E\n\n#define MOVE_FORW2  KEY_UP\n#define MOVE_LEFT2  KEY_LEFT\n#define MOVE_RIGHT2 KEY_RIGHT\n#define MOVE_BACK2  KEY_DOWN\n#define SHOOT2      KEY_SPACE\n\n//bottom pixels indexes\n#define INDEX_HEAD       0\n#define INDEX_MOUSE      1\n#define INDEX_ROT        2\n#define INDEX_LOADED     3\n#define INDEX_CAM        4\n#define INDEX_HOLE_INDEX 5\n//this occupies all pixels on the bottom line from A to B\n#define INDEX_HOLE_A 6\n#define INDEX_HOLE_B 26\n\n//other numbers\n#define HALF_PI 1.5\n#define DIST_THIRDPERSON 4.0\n#define MOVE_SPEED 5.0\n#define SENSITIVITY_Y 0.01\n#define SENSITIVITY_X 0.02\n\n//body part position relative to head\n#define BODY_FEET vec3(0.0,-2.0,0.0)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}