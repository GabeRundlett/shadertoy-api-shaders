{
    "Shader": {
        "info": {
            "date": "1618567483",
            "description": "sphere",
            "flags": 32,
            "hasliked": 0,
            "id": "sd2GDG",
            "likes": 2,
            "name": "sphere_sphere",
            "published": 3,
            "tags": [
                "sphere"
            ],
            "usePreview": 0,
            "username": "dark_dashas",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) / float(iFrame + 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.14159265359;\n\nfloat MARCH_SIZE = 0.1;\nint MAX_STEPS = 100;\nfloat ABSORPTION = 0.5;\n\nconst float INF = 1e10;\nconst float EPS = 1e-3;\n\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\n\nconst int EMISSION = 0;   // излучение, светимость\nconst int DIFFUSE = 1;    // рассеивание\nconst int REFLECTION = 2; // отражение\nconst int REFRACTION = 3; // преломление\n\nstruct Sphere {\n    vec3 pos;\n    vec3 color;\n    float rad;\n    float intensity;\n    int material;\n};\nstruct Plane {\n    float pos;\n    int material;\n};\nstruct Cylinder {\n    float pos;\n    float rad;\n    int material;\n};\nstruct Intersection {\n    float dist;\n    vec3 normal;\n    vec3 color;\n    int material;\n};\n\nconst uint LIGHTS_COUNT = 3u;\nSphere LIGHTS[LIGHTS_COUNT];\n\nSphere SPHERE;\nCylinder CYL;\nPlane PLANE;\n\nconst vec3 CAMERA_POS = vec3(0, 1.2, -6);\n\nfloat rand(float frame) {\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n/////////////////////////INTERSECTION_FUNC////////////////////////////\n\nfloat tracePlane(vec3 pos, vec3 dir, float planePos, out vec3 normal)  {\n\n    normal = vec3(0.0, 1.0, 0.0);\n    \n    float t = (planePos - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 60.0) {\n        return INF;\n    }\n    \n    return t;\n}\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n     \n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    \n    if (D < 0.0) {\n        return INF;\n    }\n    \n    float t = (-b - sqrt(D));\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    \n    t = (-b + sqrt(D));\n    if (t < 0.0) {\n        return INF;\n    }\n    \n    normal = normalize(pos + t * dir);\n    return t;\n}\nfloat traceCylinder(vec3 pos, vec3 dir, float cylPos, float r, out vec3 normal) {\n\n    float t = (cylPos - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < r * r) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - r * r;\n    \n    float D = b * b - a * c;\n    \n    if (D < 0.0) {\n        return INF;\n    }\n    \n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= cylPos) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    \n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\n////////////////////////////OCCLUSION///////////////////////////////\n\nbool isOccluded(vec3 pos, vec3 target) {\n\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir = dir / dist;\n    \n    vec3 normal = vec3(0, 0, 0);\n    \n    float t = traceSphere(pos - SPHERE.pos, dir, SPHERE.rad, normal);\n    if (dist >= t) {\n        return true;\n    }\n    \n    vec3 cylNormal = normal;\n    t = traceCylinder(pos, dir, CYL.pos, CYL.rad, cylNormal);\n    return (t > 0.0 && dist >= t);\n}\n\n////////////////////////////REFRACTION//////////////////////////////\n\nvec3 refraction(vec3 dir, vec3 normal, float n1, float n2) {\n\n    if (dot(dir, normal) < 0.0) {\n        normal = -normal;\n    }\n    \n    float cosA = dot(dir, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    \n    vec3 tang = normalize(dir - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    \n    if (sinB > 1.0) {\n        return reflect(dir, normal);\n    }\n    \n    float cosB = sqrt(1.0 - sinB * sinB);\n    \n    return sinB * tang + cosB * normal;\n}\n\n////////////////////////////MINECRAFT///////////////////////////////\n\nfloat ABSORBTION = 10.0;\nvec3 minecraft (in vec2 w) {\n\n    vec3 d = vec3(w, 1) / iResolution - 0.5;\n    vec3 p, c, f;\n    vec3 g = d; \n    vec3 o = vec3(0.2, 0.0, 8.0);\n    o.y = 3.0 * cos(o.x * o.z);\n    vec3 y = vec3(1, 2, 0);\n\n    for (float i = 0.0; i < 9.0; i += 0.01) {\n        o += d * i * 0.01;\n        c = o;\n        f = fract(c);\n        p = floor(c) * 0.3;\n        if (cos(p.z) + sin(p.x) > ++p.y) {\n\t    \tg = (f.y - 0.04 * cos((c.x + c.z) * 40.0) > 0.8 ? y : f.y * y.yxz) / i;\n            break;\n        }\n    }\n    \n    return g.rgb;\n}\nfloat pow2(float x) {\n    return x * x;\n}\nfloat fogSdf(vec3 pos) {\n    return length(pos) - 0.75;\n}\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled) {\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\nvec3 rgb2hsv(vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 sampleFog(vec3 pos, vec3 dir, in vec2 w) {\n\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(ABSORBTION * (\n            2.5 * texture(iChannel3, curPos * 0.3 + vec3(1, 1, 0)).x\n            + 1.5 * texture(iChannel3, curPos * 0.1 + vec3(1, 1, 0)).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    \n    vec3 color = minecraft(w);\n    vec3 tmp = rgb2hsv(color);\n    tmp.x /= 1.2;\n    tmp.z *= 3.0;\n    color = hsv2rgb(tmp);\n    color *= 1.2;\n    \n    return vec4(color * totalAbs, 1.0 - opacity);\n}\n\n////////////////////////////LIGHTING////////////////////////////////\n\nvec3 randVals;\nvec3 randDir;\n\nvec3 computeLighting(vec3 pos, vec3 color, vec3 normal, vec3 viewVec) {\n    vec4 lighting = textureLod(iChannel0, viewVec, 10.0) * 0.3;\n\n    vec3 lightPos = LIGHTS[0].pos + randDir * LIGHTS[0].rad;\n    vec3 toLight = lightPos - pos;\n    float sq = dot(toLight, toLight);\n    bool occl = isOccluded(pos + normalize(toLight) * EPS, lightPos);\n    float lightAtten = LIGHTS[0].intensity / sq * (occl ? 0.0 : 1.0);\n    lighting += max(0.0f, dot(normal, normalize(toLight))) * vec4(LIGHTS[0].color, 1.0) * lightAtten;\n\n    lightPos = LIGHTS[1].pos + randDir * LIGHTS[1].rad;\n    toLight = lightPos - pos;\n    sq = dot(toLight, toLight);\n    occl = isOccluded(pos + normalize(toLight) * EPS, lightPos);\n    lightAtten = LIGHTS[1].intensity / sq * (occl ? 0.0 : 1.0);\n    lighting += max(0.0f, dot(normal, normalize(toLight))) * vec4(LIGHTS[1].color, 1.0) * lightAtten;\n\n    lightPos = LIGHTS[2].pos + randDir * LIGHTS[2].rad;\n    toLight = lightPos - pos;\n    sq = dot(toLight, toLight);\n    occl = isOccluded(pos + normalize(toLight) * EPS, lightPos);\n    lightAtten = LIGHTS[2].intensity / sq * (occl ? 0.0 : 1.0);\n    lighting += max(0.0f, dot(normal, normalize(toLight))) * vec4(LIGHTS[2].color, 1.0) * lightAtten;\n\n    return color * lighting.rgb;\n}\n\n//////////////////////////////MAIN//////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    LIGHTS[0].pos =  vec3(-2, 0.5, 2.5);\n    LIGHTS[0].color = vec3(0x3d, 0x96, 0x90)/255.0;\n    LIGHTS[0].rad = 0.5;\n    LIGHTS[0].intensity = 10.0;\n    LIGHTS[0].material = EMISSION;\n    \n    LIGHTS[1].pos =  vec3(1.4, 0.2, 4);\n    LIGHTS[1].color = vec3(0.8, 0.8, 0);\n    LIGHTS[1].rad = 0.15;\n    LIGHTS[1].intensity = 5.0;\n    LIGHTS[1].material = EMISSION;\n    \n    LIGHTS[2].pos =  vec3(2, 1.5, 0);\n    LIGHTS[2].color = vec3(0x6e, 0x9a, 0x44)/255.0;\n    LIGHTS[2].rad = 0.2;\n    LIGHTS[2].intensity = 10.0;\n    LIGHTS[2].material = EMISSION;\n    \n    SPHERE.pos = vec3(0, 0, 0);\n    SPHERE.color = vec3(1, 1, 1);\n    SPHERE.rad = 1.0;\n    \n    PLANE.pos = -1.25;\n    PLANE.material = DIFFUSE;\n    \n    CYL.pos = -1.0;\n    CYL.rad = 0.65;\n    CYL.material = DIFFUSE;\n    \n    vec2 screenUV = fragCoord/iResolution.xy;\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals * 2.0 - 1.0);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x;\n\n    vec3 forward = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(forward, up));\n    up = normalize(cross(right, forward));\n    vec3 viewVec = normalize(forward + uv.x * right + uv.y * up);\n\n    float curN = 1.0;\n    float nextN = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float GLASS_T = 1.0 - GLASS_R;\n\n    vec3 currentPos = CAMERA_POS;\n\n    vec3 color;\n    float mult = 1.0;\n\n    for (int i = 0; i < 7; ++i) {\n\n        Intersection INTERSECT;\n        INTERSECT.dist = INF;\n        vec3 normal;\n\n        for (uint i = 0u; i < LIGHTS_COUNT; ++i) {\n             float lightT = traceSphere(currentPos - LIGHTS[i].pos, \n                                         viewVec, LIGHTS[i].rad, normal);\n             if (lightT < INTERSECT.dist) {\n                 INTERSECT.dist = lightT;\n                 INTERSECT.normal = normal;\n                 INTERSECT.material = LIGHTS[i].material;\n                 INTERSECT.color = LIGHTS[i].color;\n             }\n        }        \n        \n        float sphT = traceSphere(currentPos - SPHERE.pos, viewVec, SPHERE.rad, normal);\n        if (sphT <  INTERSECT.dist) {\n             INTERSECT.dist = sphT;\n             INTERSECT.normal = normal;\n             \n             if (randVals.x * 0.5 < GLASS_R * 2.0){\n                INTERSECT.material = REFLECTION;\n             }\n             else {\n                 INTERSECT.material = REFRACTION;\n             }\n         }\n\n        float cylT = traceCylinder(currentPos, viewVec, CYL.pos, CYL.rad, normal);\n        if (cylT < INTERSECT.dist) {\n            INTERSECT.dist = cylT;\n            INTERSECT.normal = normal;\n            INTERSECT.material = CYL.material;\n            vec3 worldPos = currentPos + INTERSECT.dist * viewVec;\n            INTERSECT.color = texture(iChannel1, worldPos.xz * worldPos.y ).rgb;\n        }\n        \n        float planeT = tracePlane(currentPos, viewVec, PLANE.pos, normal);\n        if (planeT < INTERSECT.dist && length(currentPos + planeT * viewVec) < 10.0f) {\n            INTERSECT.dist = planeT;\n            INTERSECT.normal = normal;\n            INTERSECT.material = PLANE.material;\n            vec3 worldPos = currentPos + INTERSECT.dist * viewVec;\n            INTERSECT.color = texture(iChannel2, worldPos.xz * 0.1).rgb;\n            \n            \n            if (randVals.x < 0.2) {\n                INTERSECT.material = REFLECTION;\n            }\n            \n        }\n\n        if (INTERSECT.dist != INF) {\n        \n            vec3 worldPos = currentPos + INTERSECT.dist * viewVec;\n            \n            if (INTERSECT.material == EMISSION) {\n                fragColor.rgb = INTERSECT.color;\n                break;\n            }\n            else if (INTERSECT.material == DIFFUSE) {\n                fragColor.rgb  += mult * computeLighting(worldPos, INTERSECT.color, INTERSECT.normal, viewVec);\n                break;\n            }\n            else if (INTERSECT.material == REFLECTION) {\n                viewVec = reflect(viewVec, INTERSECT.normal);\n                currentPos = worldPos + viewVec * EPS;\n            }\n            else if (INTERSECT.material == REFRACTION) {\n                viewVec = refraction(viewVec, INTERSECT.normal, curN, nextN);\n                currentPos = worldPos + viewVec * EPS;\n                \n                float tmp = curN;\n                curN = nextN;\n                nextN = tmp;\n                \n                vec4 fog = sampleFog(currentPos, viewVec, fragCoord);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            }\n         }\n         else {\n            fragColor += mult * texture(iChannel0, viewVec) * 0.8;\n            break;\n         }\n\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) + texture(iChannel1, screenUV);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}