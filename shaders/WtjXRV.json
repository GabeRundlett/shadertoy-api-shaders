{
    "Shader": {
        "info": {
            "date": "1566450737",
            "description": "Sinusoid function in ray marching.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtjXRV",
            "likes": 3,
            "name": "Infinite Test",
            "published": 3,
            "tags": [
                "raymarching",
                "sinusoid"
            ],
            "usePreview": 0,
            "username": "zxxuan1001",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define EPSILON 0.001\nconst int MAX_STEPS = 200;\nconst float MAX_DISTANCE = 250.0;\nconst float AMP = 25.0;\nconst float FREQ_X = 0.5;\n\nfloat noise( in vec2 x) {\n    vec2 f = fract(x);\n\treturn -1.0 + 2.0*textureLod( iChannel0, ((floor(x) + f.xy*f.xy*(3.0-2.0*f.xy))+0.5)/256.0, -100.0 ).x;\n}\n\nfloat map(vec3 p) {\n    p.z -= iTime*10.0;\n    p.xy += noise(p.xx * p.yy + sin(iTime));\n    float h = length(p.xy - vec2(AMP*1.5*sin(p.z*FREQ_X), AMP*cos(p.z*FREQ_X)));\n    h -= 15.0;\n    return h ;\n}\n\nfloat marching( in vec3 ro, in vec3 rd, in float tmin, in float tmax )\n{\n    float t = tmin;\n\tfor( int i=0; i<MAX_STEPS; i++ )\n\t{\n        vec3 pos = ro + t * rd;\n\t\tfloat h = map( pos);\n\t\tif( h < EPSILON || t > MAX_DISTANCE ) break;\n\t\tt += 0.1 * h;\n\t}\n\n\treturn t;\n}\n\nmat3 getCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr), 0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3 (sin(mouse.x * PI), 0.0, cos(mouse.x * PI));\n    vec3 ta = vec3 (0.0, 0.0, 0.0);\n    mat3 cam = getCamera(ro, ta, 0.0);\n\n    vec3 rd = normalize(cam * vec3(uv, 1.0));\n    \n    vec3 color = vec3(0.0);\n   \tfloat tmin = 0.01;\n    float tmax = MAX_DISTANCE;\n    float t = marching(ro, rd, tmin, tmax); \n    vec3 background = vec3(0.7, 0.7, 0.6);\n    if (t < tmax) {\n    \tvec3 p = ro + rd * t;\n        color = mix(vec3(1.0, 0.7, 0.6), vec3(0.0, 0.6, 0.6), pow(5.0, -t*2.0/tmax));\n    } else\n    {\n        color = background;\n    }\n    \n    fragColor = vec4(color, 1.0);\n\t\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}