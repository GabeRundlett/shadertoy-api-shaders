{
    "Shader": {
        "info": {
            "date": "1469250576",
            "description": "This A Shader That Has Aurora And A (rain. bow) (mount. ain) --> (RainMount)!\nIt Looks Nice To Me, How About You?",
            "flags": 32,
            "hasliked": 0,
            "id": "lt3GDN",
            "likes": 0,
            "name": "RainMount v.0.0.1",
            "published": 3,
            "tags": [
                "raymarching",
                "phong",
                "aurorabackground"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 801
        },
        "renderpass": [
            {
                "code": "//RainMount shaders by Imsure1200q_1UWE130.\n//Verification if you know my info:\n//<Put My Team Password Here When You Are Sharing, Otherwise Your Share Is Not Real.>\n\n/*\n\n\n Rules:\n 1. Do Not Tweak Without Permit.\n     â€¢ No Changing Code!\n     â€¢ No Copying!\n     â€¢ Don't Use This Even If You Are Gonna Test/Experiment This With Other Examples!\n \n 2. Do Not Use Without Verification.\n     â€¢ Please Type Verification Password If Wandered In Mind..\n     â€¢ You Can't Hack The Verification Password! It Is In My Brain, Dummies.\n     â€¢ Other Players Can Read This, So If You (Don't Have The Correct / Have No) Verification, I'll\n         Comment In Your Shader-site And Tell All People: \"Not Correct V-P!\" Because Your V-P is fake.\n     â€¢ You Should Be Aware Of Seeing Shaders Like This Without Verification, It's Not Allowed!\n         Remember: Copyright 2016!!!\n\n 3. Don't ( Do Racism / Say Negative Words / Bully / Provoke ) Not Only My Shaders But Other People's Shaders!\n     â€¢ Don't Do Racism Because Other People Will Feel Bad Especially The Creator's Friends.\n     â€¢ Not Only My Shaders, ÂµTorrent Is Weird, But Use Ur Leggings If You Make Fun!\n     â€¢ If You Dont Know What \" Ï€ \" Is And You Bully, Ur A Noob!\n\n\n*/\n//Shader Is Here\n//======|=======\n//      |\n//      |\n//      |\n//      |\n//    \\ | /\n//     \\|/\n//      v\n\n\n//Epsilon And Distance\nvec2 EPSILON_DIST = vec2(1e+1);\n//Map The Background\nfloat map( vec3 p )\n{\n    vec3 q = fract(p) * 2.0 - 1.0;\n    return length(q) - 0.25;\n}\n//Trace The Background\nfloat trace( vec3 ro, vec3 rd )\n{\n    float t = 0.0;\n    \n    for(int i = 0; i < 24; i++)\n    {\n        \n        vec3 p = ro+t*rd;\n        float d = map(p);\n        t += d * 0.5;\n        \n    }\n    \n    return t;\n}\n//Get A Phong-Centered Light TO FORM Aurora!\nvec3 phong( vec3 color, vec3 shadow, vec2 eye )\n{\n    // different phong. just regular.\n    vec3 p = normalize(vec3(eye, 1.0));\n    vec3 light = p * shadow;\n    if(p.xy == eye - EPSILON_DIST)\n    {\n        return light + p;\n    }\n    else\n    {\n        return light - p;\n    }\n}\n//Main Scene\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //Canvas 3d: If IT Is vec2, It WIll Not Be 3d!\n\tvec3 uv = vec3(fragCoord.xy, 1.0).xyz / iResolution.xyz;\n    uv = uv * 2.0 - 1.0;\n    uv *= length(uv);\n    uv.xy *= length(uv.xy)/vec2(normalize(vec2(iResolution.yyx)));\n    \n    //Our Face             ========\\\n    vec3 ro = normalize(uv); //     Âµ\n    //                              Î£----- Of The Background;\n    //Our Radius           ========/\n    vec3 rd = vec3(0.0, iTime, -100.0);\n    \n    //Traced Scene Ready\n    //      --=--\n    //ÏƒÏ„ÏƒÏ„ÏƒÏ„ÏƒÏ„ÏƒÏ„ÏƒÏ„ÏƒÏ„ÏƒÏ„ÏƒÏ„\n    \n    float t = trace(rd, ro);\n    \n    //Add fog to \"t\" To Make It LOOK REALISTIC!!! â™¥\n    float fog = 1.0 / (1.0 + t * t * 0.1);\n    \n    //Make Background Color\n    vec3 fc = vec3(atan(fog)/tan(float(iResolution)));\n    \n    //A Color.\n    vec3 h = vec3(uv.xy, sin(iTime));\n    \n    //Make A Direction Of Light To The Background.\n    vec2 dir = vec2((rd.zz*vec2(clamp(sin(iTime),0.2, 1.0))*vec2(step(0.1,iTime))));\n    //If The Canvas Area:\"Sky / Background\" Is On Top Of The Object\n    if(uv.y > 0.5)\n        //The Color Should Be The Background Color!\n\tfragColor = vec4(phong(mix(fc,h,2.0),normalize(vec3(uv.xy, 0.0)),dir.xy),2.0);\n    //Otherwise If The Area Is The \"Object Or Land\":\n    else if(uv.y <= 0.5)\n        //Render \"Buffer A\" With A 3D effect Using \"normalize\"\n        fragColor = vec4(mix(texture(iChannel0, uv.xy),normalize(vec4(ro, 1.2)), 2.0));\n}\n//More Code Constructions Will Come In This Area Soon!\n\n//Please Like For More Shaders.\n//Can We Reach 20 likes?! Or even 50?! Or even 100?! Or even 200?!\n//Or even 500?! Or even 1,000?!, Or Even 2,000?!, Or Even 5,000?!\n//Or even 10,000?! Or even 20,000?! Or even 50,000?! Or Even 100,000?!\n//Or even 200,000?! Or even 500,000?! OR EVEN 1,000,000?!\n//OOORRR EEEVVVEEENNN INFINITY??!!!",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Like On The Image, There Was A \"normalize\" To Make A 3D effect.\n//Now We Add Addons To The Buffer!\n\n//Map The Object Just Like Earlier,\nfloat map( vec3 p )\n{\n    return length(p) - 1.0;\n}\n//Also Trace The Object.\nfloat trace( vec3 ro, vec3 rd )\n{\n    float t = 0.0;\n    for(int i = 0; i < 24; i++)\n    {\n        vec3 p = ro + t*rd;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    return t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //I Had TO Make This vec2 So The Object Won't Look Scrambly!\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    \n    //Add radius? kinda of..\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    //Add Some Time FOr Light To Buffer\n    float the = iTime * 2.0;\n    \n    //Face\n    vec3 ro = vec3(0.0, sin(tan(sin(iTime))), 0.0);\n    \n    //Trace The Color\n    float t = trace(ro, rd);\n    \n    //Add Fog Again..\n    float fog = 1.0 / ( 1.0 + t * t * 0.1 );\n    \n    //Add Fragment Color For Object\n    vec3 fc = vec3(fog);\n    \n    //Add A Mix From Rainbow And Light ( vec3(0.3) ) And By The Power Of 2.0;\n    //Who 2.0? Because 3.0 is too light and 1.0 looks boringly effective.\n    fragColor = vec4(mix(fc,vec3(0.3), 2.0), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}