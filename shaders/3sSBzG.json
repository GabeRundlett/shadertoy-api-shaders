{
    "Shader": {
        "info": {
            "date": "1590233510",
            "description": "Scene with infinity figures.",
            "flags": 0,
            "hasliked": 0,
            "id": "3sSBzG",
            "likes": 1,
            "name": "Infinity cubes scene",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "kotfind",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.1415926\n\n// SETTINGS\nconst float zFar = 200.;\nconst float zNear = 1.;\n\nconst vec3 background_color = vec3(0.2);\nconst float collision_distance = 0.00001;\nconst int marching_iterations = 100;\n\nconst float normal_partial_derivative_epsilon = 0.00001;\n\n// COLORS\nconst vec3 red   = vec3(1., 0., 0.);\nconst vec3 green = vec3(0., 1., 0.);\nconst vec3 blue  = vec3(0., 0., 1.);\n\nfloat sq(in float n) {\n    return n * n;\n}\n\n// Transformations\nmat4 worldMatrix = mat4(1., 0., 0., 0.,   0., 1., 0., 0.,   0., 0., 1., 0.,   0., 0., 0., 1.);\n\nvoid identity() {\n    worldMatrix = mat4(1., 0., 0., 0.,   0., 1., 0., 0.,   0., 0., 1., 0.,   0., 0., 0., 1.);\n}\n\nvoid scale(in float a, in float b, in float c) {\n    worldMatrix *= mat4(a , 0., 0., 0.,\n                        0., b , 0., 0.,\n                        0., 0., c , 0.,\n                        0., 0., 0., 1.);\n}\n\nvoid trans(in vec3 v) {\n    worldMatrix *= mat4(1., 0., 0., v.x,\n                        0., 1., 0., v.y,\n                        0., 0., 1., v.z,\n                        0., 0., 0., 1.);\n}\n\nvoid rotx(in float a) {\n    float sina = sin(a);\n    float cosa = cos(a);\n    worldMatrix *= mat4(1.,   0.,    0., 0.,\n                        0., cosa, -sina, 0.,\n                        0., sina,  cosa, 0.,\n                        0.,   0.,    0., 1.);\n}\n\nvoid roty(in float a) {\n    float sina = sin(a);\n    float cosa = cos(a);\n    worldMatrix *= mat4( cosa, 0., sina, 0.,\n                           0., 1.,   0., 0.,\n                        -sina, 0., cosa, 0.,\n                           0., 0.,   0., 1.);\n}\n\nvoid rotz(in float a) {\n    float sina = sin(a);\n    float cosa = cos(a);\n    worldMatrix *= mat4(cosa, -sina, 0., 0.,\n                        sina,  cosa, 0., 0.,\n                          0., 0., 1., 0.,\n                          0., 0., 0., 1.);\n}\n\n// All object functions (like sphere), scene function and functions inter,\n// union and diff returns vec4, where .rgb is color and .a is distance.\n\nvec4 inter(in vec4 a, in vec4 b) {\n    if (a.a > b.a) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nvec4 union_(in vec4 a, in vec4 b) {\n    if (a.a < b.a) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nvec4 diff(in vec4 a, in vec4 b) {\n    if (a.a > -b.a) {\n        return a;\n    } else {\n        return vec4(b.rgb, -b.a);\n    }\n}\n\nvec4 sphere(in vec3 pos, in vec3 color, in vec3 center, in float radius) {\n    return vec4(color, distance(pos, center) - radius);\n}\n\nvec4 plane(in vec3 pos, in vec3 color, in float height) {\n    return vec4(color, height - pos.y);\n}\n\nvec4 cube(in vec3 pos, in vec3 color, in vec3 coords, in vec3 size) {\n    return vec4(color, sqrt(sq(max(0., abs(pos.x - coords.x) - size.x)) +\n                            sq(max(0., abs(pos.y - coords.y) - size.y)) +\n                            sq(max(0., abs(pos.z - coords.z) - size.z))));\n}\n\nvec4 xcylinder(in vec3 pos, in vec3 color, in vec3 coords, in float radius) {\n    return vec4(color, distance(pos.yz, coords.yz) - radius);\n}\n\nvec4 ycylinder(in vec3 pos, in vec3 color, in vec3 coords, in float radius) {\n    return vec4(color, distance(pos.xz, coords.xz) - radius);\n}\n\nvec4 zcylinder(in vec3 pos, in vec3 color, in vec3 coords, in float radius) {\n    return vec4(color, distance(pos.xy, coords.xy) - radius);\n}\n\nvec4 scene(vec3 pos) {\n    pos = (vec4(pos, 1.) * worldMatrix).xyz;\n    pos = mod(pos + 5., 10.) - 5.;\n    return diff(inter(cube(pos, red, vec3(0., 0., 0.), vec3(0.9)),\n                      sphere(pos, blue, vec3(0., 0., 0.), 1.25)),\n                union_(union_(xcylinder(pos, green, vec3(0., 0., 0.), 0.8 * abs(sin(iTime / 2.))),\n                              ycylinder(pos, green, vec3(0., 0., 0.), 0.8 * abs(sin(iTime / 2.)))),\n                       zcylinder(pos, green, vec3(0., 0., 0.), 0.8 * abs(sin(iTime / 2.)))));\n}\n\nvec3 getNormal(in vec3 pos) {\n    float x, y, z;\n    float E = normal_partial_derivative_epsilon;\n    x = scene(pos + vec3(E, 0., 0.)).a - scene(pos - vec3(E, 0., 0.)).a;\n    y = scene(pos + vec3(0., E, 0.)).a - scene(pos - vec3(0., E, 0.)).a;\n    z = scene(pos + vec3(0., 0., E)).a - scene(pos - vec3(0., 0., E)).a;\n    return normalize(vec3(x, y, z));\n}\n\nvec3 ray_marching(vec3 pos, vec3 dir) {\n    dir = normalize(dir);\n    float len = 0.;\n    float mindist;\n    vec3 color;\n    vec3 norm;\n\n    for (int i = 0; i < marching_iterations; ++i) {\n        vec4 tmp = scene(pos);\n        color = tmp.rgb;\n        mindist = tmp.a;\n        norm = getNormal(pos);\n\n        if (mindist < collision_distance) return color * max(0.4, dot(normalize(vec3(0.) - pos), norm));\n        if (len > zFar) return background_color;\n\n        len += mindist;\n        pos += dir * mindist;\n    }\n    return background_color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / vec2(min(iResolution.x, iResolution.y));\n    uv -= (iResolution.xy / min(iResolution.x, iResolution.y) - vec2(1.)) / 2.;\n    uv.y = 1. - uv.y;\n\n    identity();\n    trans(vec3(0., 0., abs(sin(iTime / 2. + M_PI / 2.)) * -5.));\n    rotx(iTime + 2.);\n    rotz(iTime + 2.);\n    roty(iTime + 2.);\n    vec3 color = ray_marching(vec3(0.), vec3(uv - vec2(0.5), zNear));\n\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}