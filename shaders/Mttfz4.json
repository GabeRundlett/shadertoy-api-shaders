{
    "Shader": {
        "info": {
            "date": "1538881538",
            "description": "A House with three different layers, the house, the chimney, and the window. ",
            "flags": 0,
            "hasliked": 0,
            "id": "Mttfz4",
            "likes": 0,
            "name": "Layered House Shader Will Gordon",
            "published": 3,
            "tags": [
                "layers",
                "house"
            ],
            "usePreview": 0,
            "username": "WillGordon",
            "viewed": 421
        },
        "renderpass": [
            {
                "code": "// To-Do\n// Make sure there are three layers\n// Layer 1: House body rectangle\n// Layer 2: Chimney\n// Layer 3: All windows\n// Should be able to turn layers \"off\" and \"on\" like photoshop\n// Be sure to not use if statements\n\nvec2 housePos = vec2(0.3, 0.3);\nvec2 chimneyPos = vec2(0.3, 0.3);\nvec2 window1Pos = vec2(0.55, 0.4);\nvec2 window2Pos = vec2(0.55, 0.55);\nvec2 window3Pos = vec2(0.4, 0.55);\n\nfloat houseWidth = 0.4;\nfloat houseHeight = 0.4;\n\nfloat chimneyWidth = 0.07;\nfloat chimneyHeight = 0.5;\n\nfloat windowWidth = 0.1;\nfloat windowHeight = 0.1;\n\n//Base House layer\nvec4 Layer1 = vec4(0.0, 0.0, 1.0, 0.5);\n    \n//Chimney Layer\nvec4 Layer2 = vec4(0.7, 0.7, 0.0, 0.5);\n    \n//Windows layer\nvec4 Layer3 = vec4(2.0, 2.0, 2.0, 0.5);\n\n//The switches for turning \"on\" and \"off\"\nfloat houseSwitch = 1.0;\nfloat chimneySwitch = 1.0;\nfloat windowSwitch = 1.0;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.y / iResolution.x; //Not really sure how to use it\n    \n    //Process the interps for house\n    float interp1X = step(housePos.x + houseWidth, uv.x) - step(housePos.x, uv.x);\n    float interp1Y = step(housePos.y + houseHeight, uv.y) - step(housePos.y, uv.y);\n    \n    //Process the interps for chimney\n    float interp2X = step(chimneyPos.x + chimneyWidth, uv.x) - step(chimneyPos.x, uv.x);\n    float interp2Y = step(chimneyPos.y + chimneyHeight, uv.y) - step(chimneyPos.y, uv.y);\n    \n    //Process the interps for windows\n    float interp3X = step(window1Pos.x + windowWidth, uv.x) - step(window1Pos.x, uv.x);\n    float interp3Y = step(window1Pos.y + windowHeight, uv.y) - step(window1Pos.y, uv.y);\n    \n    //Adding more windows to the same layer\n    float interp4X = step(window2Pos.x + windowWidth, uv.x) - step(window2Pos.x, uv.x);\n    float interp4Y = step(window2Pos.y + windowHeight, uv.y) - step(window2Pos.y, uv.y);\n    \n    float interp5X = step(window3Pos.x + windowWidth, uv.x) - step(window3Pos.x, uv.x);\n    float interp5Y = step(window3Pos.y + windowHeight, uv.y) - step(window3Pos.y, uv.y);\n    \n    //pass the interp values onto the layers\n    Layer1 *= interp1X * interp1Y * houseSwitch;\n    \n    Layer2 *= interp2X * interp2Y * chimneySwitch;\n    \n    Layer3 *= (interp3X * interp3Y + interp4X * interp4Y + interp5X * interp5Y) * windowSwitch;\n    \n    //A basic background - might be useful\n    vec4 back = vec4(1.0, 1.0, 1.0, 1.0);\n    \n    vec4 result = mix(back, Layer1, Layer1.a);\n    result = mix(result, Layer2, Layer2.a);\n    result = mix(result, Layer3, Layer3.a);\n    \n    //Output to screen\n    fragColor = result;\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}