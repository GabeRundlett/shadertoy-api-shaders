{
    "Shader": {
        "info": {
            "date": "1583941278",
            "description": "Couldn't resist colourizing this one too - also use the continued fraction algorithm for finding an approximation ('x' key to compare with original).\n\nAlso show line at x,y=1 and points with y = 1/1,1/2,1/3..2/3,2/5,3/5,4/5.. etc.",
            "flags": 16,
            "hasliked": 0,
            "id": "Wsfyzn",
            "likes": 6,
            "name": "Rational Approximation in Colour",
            "published": 3,
            "tags": [
                "approximation",
                "rational"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "// Original by FabriceNeyret2:\n// https://www.shadertoy.com/view/3tKXDt\n\n// Modified by Matthew Arcus, mla, 11/3/2020\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return v * mix( vec3(1.0), rgb, s);\n}\n\n// Original function by Fabrice\nivec2 rationalize0(float k, float eps) {\n  float m = 1e8;\n  int a,_n;\n  for(int n_, n=1; n < 1000; n++) {\n    a = int(0.5+k*float(n));          // a/n ~ k\n    float d = abs(1.0-float(a)/float(n)/k); // relative error\n    if (d<m) m=d, _n=n;          // closer\n    if (m <= eps ) break;           // stop at 1% rel err\n  }\n  return ivec2(a,_n);\n}\n\n// Find continued fraction convergent\nivec2 rationalize1(float k, float eps) {\n  float k0 = k;\n  int x=1, y=0, z=0, w=1;\n  for (int i = 0; i < 10; i++) {\n    int q = int(floor(k));\n    k = 1.0/fract(k);\n    int x1=z, y1=w, z1=x+q*z, w1=y+q*w;\n    x=x1; y=y1; z=z1; w=w1;\n    if (abs(1.0-float(w)/float(z)/k0) < eps) break;\n  }\n  return ivec2(w,z);\n}\n\nint gcd(int i, int j) {\n while(j != 0) {\n   int i1 = j, j1 = i%j;\n   i = i1; j = j1;\n }\n return i;\n}\n\nvoid mainImage(out vec4 outColor, vec2 fragCoord) {\n  vec2 p = 2.0*fragCoord/iResolution.y;\n  vec2 m = 2.0*iMouse.xy/iResolution.y;\n  float eps = 5e-3, A = 20.0, B = 0.03;\n  if (iMouse.z > 0.0) {\n    eps = 1e-3, A = 40.0, B = 0.01;\n    p -= m; p /= 10.0; p += m;\n  }\n  float x = p.y/p.x;\n  ivec2 r = key(CHAR_X) ? rationalize0(x,eps) : rationalize1(x,eps);\n  //ivec2 r = rationalize1(x,eps);\n  float t = 0.1*iTime;\n  vec3 col = hsv2rgb(t+float(r.y)/A,1.0,exp(-B*(float(r.y)-1.0)));\n  float ds = fwidth(p.x);\n  float lwidth = 0.002;\n  float cwidth = 0.002;\n  float cdia = 0.02;\n  vec3 linecol = vec3(0.9);\n  col = mix(linecol,col,smoothstep(lwidth,lwidth+ds,abs(p.y-1.0)));\n  col = mix(linecol,col,smoothstep(lwidth,lwidth+ds,abs(p.x-1.0)));\n  for (int i = 1; i <= 6; i++) {\n    for (int j = 1; j <= 6; j++) {\n      if (gcd(i,j) != 1) continue;\n      col = mix(linecol,col,smoothstep(cwidth,cwidth+ds,abs(length(p-vec2(1,float(j)/float(i)))-cdia)));\n      col = mix(linecol,col,smoothstep(cwidth,cwidth+ds,abs(length(p-vec2(float(j)/float(i),1))-cdia)));\n    }\n  }\n  if (alert) col.r = 1.0;\n  outColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n  \n// const int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\n// const int KEY_UP = 38;\n// const int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\n// const int CHAR_A = 65;\n// const int CHAR_B = 66;\n// const int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\n// const int CHAR_F = 70;\n// const int CHAR_G = 71;\n// const int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\n// const int CHAR_R = 82;\n// const int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\n// const int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}