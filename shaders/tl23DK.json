{
    "Shader": {
        "info": {
            "date": "1561325916",
            "description": "...ok, i had to do it on a sphere\nalso check out geometry versions on turtletoy and shaderoo [url]https://turtletoy.net/turtle/aa1a54180d[/url] [url]https://www.shaderoo.org/?shader=jefvQB[/url]\non linux or osx disable WINDOWS_FALLBACK to see full quality",
            "flags": 0,
            "hasliked": 0,
            "id": "tl23DK",
            "likes": 17,
            "name": "tri truch ballala",
            "published": 3,
            "tags": [
                "sphere",
                "truchet",
                "pattern",
                "medusa"
            ],
            "usePreview": 1,
            "username": "flockaroo",
            "viewed": 1042
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// tri truch ball\n\n// sphere version of https://www.shadertoy.com/view/WlS3WV (originally insprired by some truchet doodles of Shane and BigWings)\n\n// maybe there's better ways to find the closest icosahedron triangle (getIcosaTri)\n// and/or finding distance to a cubic bezier spline (distSpline).  ...anyone?\n\n//#define DOF\n\n// windows seems to be really bad at webgl\n// so if youre using linux or osx comment the line below to see the full plot\n#define WINDOWS_FALLBACK\n\n// golden ratio - used for icosahedron\n#define G (.5+sqrt(5./4.))\n#define PI 3.141592653\n#define PI2 6.28318531\n\n#define XCHGV3(a,b) { vec3 d=a; a=b; b=d; }\n\n#define Res0 vec2(textureSize(iChannel0,0))\n\nvoid sortXYZ(inout vec3 p1, inout vec3 p2, inout vec3 p3)\n{\n    #define W(p) (p.x+p.y*.01+p.z*.0001)\n    if(W(p3)>W(p2)) XCHGV3(p3,p2);\n    if(W(p2)>W(p1)) XCHGV3(p2,p1);\n    if(W(p3)>W(p2)) XCHGV3(p3,p2);\n    if(W(p2)>W(p1)) XCHGV3(p2,p1);\n}\n\n// get closest icosahedron triangle by geometric categorizion\n// using icosa symmetry, so dont have to check for every icosa point\nvoid getIcosaTri(vec3 pos, out vec3 p1, out vec3 p2, out vec3 p3)\n{\n    mat2 rot=mat2(0.809016994374947, 0.587785252292473, -0.587785252292473, 0.809016994374947);\n    \n    float ph = atan(pos.y,pos.x);  ph=(ph<0.)?PI2+ph:ph;\n    \n    float dang=PI2/5.;\n    float seg=ph/dang;\n    float fseg=floor(seg);\n    \n    // 3 topmost points of segment + lower point of seg (p4t)\n    vec3 p1t=vec3(0,0,1.);\n    vec3 p2t=vec3(cos(fseg*dang-vec2(0,PI2/4.))*.894427190999916,.447213595499958);\n    vec3 p4t=vec3(rot*p2t.xy,-p2t.z);\n    vec3 p3t=vec3(rot*p4t.xy, p2t.z);\n\n    if (dot(pos,cross(p2t,p4t))<0. || dot(pos,cross(p4t,p3t))<0.) {\n        // xchg p2 and p3 (because bottom is mirrored in z)\n        p1t=vec3(0,0,-1.);\n        p3t=vec3((seg-fseg<.5)?p2t.xy*rot:rot*p2t.xy,-p2t.z);\n        p4t=vec3(rot*p3t.xy,-p3t.z);\n        p2t=vec3(rot*p4t.xy, p3t.z);\n    }\n\n    // mix top or below\n    bool top=(dot(pos,cross(p2t,p3t))>0.);\n    p1=top?p1t:p4t; \n    p2=top?p2t:p3t; \n    p3=top?p3t:p2t;\n}\n\n// get closest icosahedron triangle\nvoid getIcosaTri2(vec3 pos, out vec3 p1, out vec3 p2, out vec3 p3)\n{\n    float dot1 = -1000.0;\n    float dot2 = -1000.0;\n    float dot3 = -1000.0;\n    for(int s1=0;s1<2;s1++)\n    {\n    \tfor(int s2=0;s2<2;s2++)\n        {\n    \t\tfor(int perm=0;perm<3;perm++)\n            {\n                vec3 p0 = normalize(vec3(G,1,0))*vec3(s1*2-1,s2*2-1,0);\n                if     (perm>1) p0 = p0.yzx;\n                else if(perm>0) p0 = p0.zxy;\n                float dot0 = dot(pos,p0);\n                if(dot0>dot1){\n                    dot3=dot2; p3=p2;\n                    dot2=dot1; p2=p1; \n                    dot1=dot0; p1=p0;\n                }\n                else if(dot0>dot2){\n                    dot3=dot2; p3=p2;\n                    dot2=dot0; p2=p0; \n                }\n                else if(dot0>dot3){\n                    dot3=dot0; p3=p0;\n                }\n            }\n        }\n    }\n}\n\n// check if pos hits triangle\nbool thruTriangle(vec3 pos, vec3 v1, vec3 v2, vec3 v3)\n{\n    vec3 n = cross(v2-v1,v3-v1);\n    // calc where pos hits triangle plane\n    pos = pos*dot(v1,n)/dot(pos,n);\n    v1-=pos; v2-=pos; v3-=pos;\n \tvec3 c1=cross(v1,v2);\n    vec3 c2=cross(v2,v3);\n    vec3 c3=cross(v3,v1);\n    // check if the cross products of all the pos-edge-vectors show into the same direction\n    return dot(c1,c2)>0. && dot(c2,c3)>0. && dot(c3,c1)>0. ;\n}\n\n// subdivide 1 triangle into 4 triangles and give back closest triangle\nvoid getTriSubDiv(vec3 pos, inout vec3 p1, inout vec3 p2, inout vec3 p3)\n{\n    vec3 p4 = normalize(p1+p2);\n    vec3 p5 = normalize(p2+p3);\n    vec3 p6 = normalize(p3+p1);\n\n    if     (thruTriangle(pos,p1,p4,p6)) { p1=p1; p2=p4; p3=p6; }\n    else if(thruTriangle(pos,p6,p5,p3)) { p1=p6; p2=p5; p3=p3; }\n    else if(thruTriangle(pos,p6,p4,p5)) { p1=p6; p2=p4; p3=p5; }\n    else if(thruTriangle(pos,p4,p2,p5)) { p1=p4; p2=p2; p3=p5; }\n}\n\nfloat tri01(float x)\n{\n    return abs(fract(x)-.5)*2.;\n}\n\n\n// get some 3d rand values by multiplying 2d rand in xy, yz, zx plane\nvec4 getRand(vec3 pos)\n{\n    vec4 r = vec4(1.0);\n    r*=textureLod(iChannel0,pos.xy,0.)*2.-1.;\n    r*=textureLod(iChannel0,pos.xz,0.)*2.-1.;\n    r*=textureLod(iChannel0,pos.zy,0.)*2.-1.;\n    return r;\n}\n\nvec4 getRand01Sph(vec3 pos)\n{\n    vec2 res = vec2(textureSize(iChannel0,0));\n    vec2 texc=((pos.xy*123.+pos.z)*res+.5)/res;\n    return textureLod(iChannel0,texc+.1,0.); // add some number (.1) to tex coord here so some special 0-angles wont jump between texels\n}\n\nfloat distSphere(vec3 pos, float r)\n{\n\treturn length(pos)-r;\n}\n\nfloat calcAngle(vec3 v1, vec3 v2)\n{\n    return acos(dot(v1,v2)/length(v1)/length(v2));\n}\n\n#define mixSq(a,b,f) mix(a,b,cos(f*PI)*.5+.5)\n\n// iq's line distance\nfloat lineDist( vec3 p, vec3 a, vec3 b )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec3 bezierCurvePos2(vec3 p[4], float t)\n{\n    // combination of 2 quadric beziers\n    vec3 q[3]; for(int i=0;i<3;i++) q[i] = mix(p[i],p[i+1],t);\n    vec3 r[2]; for(int i=0;i<2;i++) r[i] = mix(q[i],q[i+1],t);\n    return mix(r[0],r[1],t);\n} \n\n// cubic bezier curve in 2 dimensions\nvec3 bezierCurvePos(vec3 p[4], float t)\n{ \n    float ti=1.-t;\n    return p[0] * ti * ti * ti \n         + p[1] * t  * ti * ti * 3. \n         + p[2] * t  * t  * ti * 3.\n         + p[3] * t  * t  * t ;\n}\n\n\n// not sure if theres an analytic way of getting the distance to a bezier curve...\nfloat distSpline(vec3 pos, vec3 p1, vec3 p2, vec3 p3, vec3 p4)\n{\n    //return lineDist(pos,p1,p4);\n    float d=10000.;\n    #ifdef WINDOWS_FALLBACK\n    vec3 v1=bezierCurvePos(vec3[](p1,p2,p3,p4),0./4.);\n    vec3 v2=bezierCurvePos(vec3[](p1,p2,p3,p4),1./4.);\n    vec3 v3=bezierCurvePos(vec3[](p1,p2,p3,p4),2./4.);\n    vec3 v4=bezierCurvePos(vec3[](p1,p2,p3,p4),3./4.);\n    vec3 v5=bezierCurvePos(vec3[](p1,p2,p3,p4),4./4.);\n    d=min(d,lineDist(pos,v1,v2));\n    d=min(d,lineDist(pos,v2,v3));\n    d=min(d,lineDist(pos,v3,v4));\n    d=min(d,lineDist(pos,v4,v5));\n    #else\n    for(float t=0.;t<1.;t+=.125)\n    {\n        d=min(d,lineDist(pos,bezierCurvePos(vec3[](p1,p2,p3,p4),t),bezierCurvePos(vec3[](p1,p2,p3,p4),t+.125)));\n    }\n    #endif\n    return d;\n}\n\nfloat distTanCurve(vec3 pos, vec3 p1, vec3 p2, vec3 t1, vec3 t2)\n{\n    float l=length(p2-p1);\n    float d1=abs(dot(t1,p2-p1));\n    float d2=abs(dot(t2,p2-p1));\n    return distSpline(pos, p1,p1+t1*l*mix(.7,.25,d1/l),p2-t2*l*mix(.7,.25,d2/l),p2);\n}\n\n// distance to 3 bezier splines in triangle\nfloat distTruchet(vec3 pos, vec3 p1, vec3 p2, vec3 p3, float dz)\n{\n    float d = 10000.0;\n    float rnd =getRand01Sph(p1+p2+p3).x;\n    float rnd2=getRand01Sph(p1+p2+p3).y;\n    // random rotation of torus-start-edges\n    if      (rnd>.75) { vec3 d=p1; p1=p2; p2=d; }\n    else if (rnd>.50) { vec3 d=p1; p1=p3; p3=d; }\n    else if (rnd>.25) { vec3 d=p2; p2=p3; p3=d; }\n\n    if(dot(cross(p2-p1,p3-p1),p1)>0.0) { vec3 dummy; dummy=p2; p2=p3; p3=dummy; }\n    \n    vec3 pos1, pos2, tan1, tan2;\n    float R0 = .23;\n    \n    pos1=mix(p1,p2,R0); pos2=mix(p1,p3,R0);\n    tan1=-normalize(cross(pos1,p2-p1)+pos1*.25); tan2=-normalize(cross(pos2,p3-p1)+pos2*.25); \n\td=min(d,distTanCurve(pos,pos1,pos2,tan1,tan2));\n    \n    pos1=mix(p1,p2,1.-R0); pos2=mix(p1,p3,1.-R0); \n    tan1=-normalize(cross(pos1,p2-p1)-pos1*.25); tan2=-normalize(cross(pos2,p3-p1)-pos2*.25); \n\td=min(d,distTanCurve(pos,pos1,pos2,tan1,tan2));\n    \n    pos1=mix(p2,p3,R0); pos2=mix(p3,p2,R0); \n    tan1=-normalize(cross(pos1,p3-p2)+pos1*.25); tan2=-normalize(cross(pos2,p2-p3)+pos2*.25); \n\td=min(d,distTanCurve(pos,pos1,pos2,tan1,tan2));\n    \n    return d;\n}\n\n// final distance funtion\nfloat dist(vec3 pos)\n{\n    pos+=.00015*getRand(pos*1.3).xyz*4.;\n    pos+=.00006*getRand(pos*3.).xyz*4.;\n    pos+=.00040*getRand(pos*.5).xyz*4.;\n    vec3 p1,p2,p3;\n    float d = 10000.;\n    \n    // sphere in the middle\n\t//d=min(d,distSphere(pos,.79));\n    \n    // start with an icosahedron subdivided once\n    getIcosaTri(pos, p1, p2, p3);\n    getTriSubDiv(pos, p1, p2, p3);\n    // always sort by X, then Y, then Z - to get a unique order of the edges\n    //sortXYZ(p1,p2,p3);\n    d=min(d,distTruchet(pos, p1,p2,p3,.08)-.03);\n    \n    float sc = 1.;\n    // subdivide again for another detail\n    getTriSubDiv(pos,p1,p2,p3);\n    //sortXYZ(p1,p2,p3);\n\tsc = 1./.93;\n    d=min(d,distTruchet(pos*sc, p1,p2,p3,.04)/sc-.01);\n    \n    // subdivide again for another detail\n\t//getTriSubDiv(pos,p1,p2,p3);\n    //sortXYZ(p1,p2,p3);\n    //sc = 1./.93;\n    //d=min(d,distTruchet(pos*sc, p1,p2,p3,.02)/sc-.007);\n    \n    return d;\n}\n\nvec3 getGrad(vec3 pos, float eps)\n{\n    vec2 d=vec2(eps,0);\n    float d0=dist(pos);\n    return vec3(dist(pos+d.xyy)-d0,\n                dist(pos+d.yxy)-d0,\n                dist(pos+d.yyx)-d0)/eps;\n                \n}\n\n// march it...\nvec4 march(inout vec3 pos, vec3 dir)\n{\n    // cull the sphere\n    if(length(pos-dir*dot(dir,pos))>1.05) \n    \treturn vec4(0,0,0,1);\n    \n    float eps=0.003;\n    float bg=1.0;\n    float d=10000., dp;\n    for(int cnt=0;cnt<40;cnt++)\n    {\n        dp=d;\n        d = dist(pos);\n        pos+=d*dir;\n        if(d<eps) break;\n    }\n    bg = (d<dp)?0.0:1.0;\n    vec3 n = getGrad(pos,.001);\n    return vec4(n,bg); // .w=1 => background\n}\n\nmat3 rotX(float ang)\n{\n    float c=cos(ang), s=sin(ang);\n    return mat3(1,0,0, 0,c,s, 0,-s,c);\n}\n\nmat3 rotZ(float ang)\n{\n    float c=cos(ang), s=sin(ang);\n    return mat3(c,s,0, -s,c,0, 0,0,1);\n}\n\nvec4 getMRand(vec2 coord)\n{\n    vec4 c=vec4(0);\n    c+=texture(iChannel0,coord+.003*iTime);\n    c+=texture(iChannel0,coord/2.+.003*iTime)*2.;\n    c+=texture(iChannel0,coord/4.+.003*iTime)*4.;\n    c+=texture(iChannel0,coord/8.+.003*iTime)*8.;\n    return c/(1.+2.+4.+8.);\n}\n\nvec4 myenv(vec3 pos, vec3 dir, float period)\n{\n    #ifndef SHADEROO\n    return texture(iChannel1,dir.xzy);\n    #else\n    dir=normalize(dir);\n    float azim = atan(dir.y,dir.x);\n    float thr  = .5*.5*(.7*sin(2.*azim*5.)+.3*sin(2.*azim*7.));\n    float thr2 = .5*.125*(.7*sin(2.*azim*13.)+.3*sin(2.*azim*27.));\n    float thr3 = .5*.05*(.7*sin(2.*azim*32.)+.3*sin(2.*azim*47.));\n    float br  = smoothstep(thr-.2, thr+.2, dir.z+.25);\n    float br2 = smoothstep(thr2-.2,thr2+.2,dir.z+.15);\n    float br3 = smoothstep(thr3-.2,thr3+.2,dir.z);\n    vec4 r1 = .5*(texture(iChannel0,dir.xy*.01)-texture(iChannel0,dir.xy*.017+.33));\n    vec3 skyCol=vec3(.9,1,1.1)+.5*(r1.xxx*.5+r1.xyz*.5);\n    //skyCol*=2.5;\n    vec4 r2 = .5*(texture(iChannel0,dir.xy*.1)-texture(iChannel0,dir.xy*.07-.33));\n    vec3 floorCol = vec3(.9,1.1,1.)*.8+.5*(r2.xxx*.7+r2.xyz*.3);\n    vec3 col=mix(floorCol.zyx,skyCol,br3);\n    col=mix(floorCol.yzx*.7,col,br2);\n    col=mix(floorCol.xyz*.7*.7,col,br);\n    vec3 r=texture(iChannel0,vec2(azim/PI2*.125,.5)).xyz;\n    col*= 1.-clamp(((r.xxx*.7+r.xzz*.3)*2.-1.)*clamp(1.-abs(dir.z*1.6),0.,1.),0.,1.);\n    return vec4(pow(col,vec3(1.6))*.8*vec3(1.1,1,.9)/**clamp(1.+dir.x*.3,.9,1.2)*/,1);\n    #endif\n}\n\nfloat zoomFunc(float t)\n{\n    float x=3.*clamp(3.*cos(t*.3),-1.,1.);\n    return 2./(1.+exp(-x))+exp(-x*x)*3.*x-1.;\n    //atan()\n    //if (t<dt1) return ;\n    //return t*10.\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // screen coord -1..1\n    vec2 sc = (fragCoord.xy/iResolution.xy)*2.-1.;\n    // viewer position\n    vec3 pos = vec3(0,-3.5,0);\n    #ifdef SHADEROO\n    pos.y*=1.-iMouseData.z/1000.;\n    #endif\n    if(iMouse.x<1.) pos.y*=(1.-.5*(.5-.5*cos(iTime*.1)));\n    // pixel view direction\n    vec3 dir = normalize(2.*normalize(-pos)+vec3(sc.x,0,sc.y*iResolution.y/iResolution.x));\n    #ifdef DOF\n    vec2 poff=(texture(iChannel0,(fragCoord+vec2(iFrame*13,iFrame*7))/Res0).xy-.5)*.02;\n    pos.xz+=poff;\n    dir.xz-=poff*dir.y/(-pos.y-zoomFunc(iTime));\n    #endif\n    // rotate view around x,z\n    float phi = iMouse.x/iResolution.x*7.;\n    float th  = iMouse.y/iResolution.y*7.;\n    if (iMouse.x==0.) { phi=iTime*.3; th=.27*.3*iTime; }\n    mat3 rx = rotX(th);\n    mat3 rz = rotZ(phi);\n    pos = rz*(rx*pos);\n    dir = rz*(rx*dir);\n    vec3 pos0 = pos;\n    \n    // march it...\n   \tvec4 n=march(pos,dir);\n    float bg=n.w;\n        \n    // calc some ambient occlusion\n    float ao=1.;\n    #if 0\n    // calc simple ao by stepping along radius\n    ao*=dist(pos*1.02)/.02;\n    ao*=dist(pos*1.05)/.05;\n    ao*=dist(pos*1.1)/.1;\n    #else\n    // calc ao by stepping along normal\n    ao*=dist(pos+n.xyz*.02)/.02;\n    ao*=dist(pos+n.xyz*.05)/.05;\n    ao*=dist(pos+n.xyz*.10)/.10;\n    #endif\n    ao=clamp(ao,0.,1.);\n    // adjust contrast of ao\n    ao=pow(ao,.4);\n    \n    // reflection dir\n    vec3 R = (pos-pos0)-2.0*dot((pos-pos0),n.xyz)*n.xyz;\n    R = ((R*rz)*rx);\n    \n    vec3 c = vec3(.5);\n    // simply add some parts of the normal to the color\n    // gives impression of 3 lights from different dir with different color temperature\n    c += n.xyz*.05;\n        ;\n    // slight green tint\n    //c+=vec3(0,.15,0);\n\n    //  reflection of cubemap (slightly tilt reflection map to floor - rotX(-.8))\n    c *= myenv(pos,rotX(-.8)*R,1.).xyz*1.2+.4;\n    \n    // apply ambient occlusion\n    c*=.6*ao+.4;\n    \n    vec3 bgCol = mix(vec3(1.05,1.05,.95),vec3(.9,.95,1.),1.-length(sc));\n    bgCol=vec3(1);\n    //bgCol=myenv(vec3(0),dir,1.).xyz;\n    \n    // apply background (medusa poison green)\n    float aspect=iResolution.y/iResolution.x;\n    phi=atan(sc.y*aspect,sc.x);\n    float r = length(vec2(sc.y*aspect,sc.x));\n    if(bg>=.5) c=bgCol;\n    \n    // add some depth fog\n\tc=mix(c,bgCol,clamp(dot(dir,pos)*.4,0.,1.));\n\t\n    // vignetting\n    vec2 sc2=(fragCoord-.5*iResolution.xy)/iResolution.x;\n    float vign = 1.1-1.*dot(sc2,sc2);\n    //vign-=dot(exp(-sin(fragCoord/iResolution.xy*3.14)*vec2(20,10)),vec2(1,1));\n    vign*=1.-.5*exp(-sin(fragCoord.x/iResolution.x*3.1416)*20.);\n    vign*=1.-.5*exp(-sin(fragCoord.y/iResolution.y*3.1416)*10.);\n\n    \n\tfragColor = vec4(c*vign,1);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}