{
    "Shader": {
        "info": {
            "date": "1612727533",
            "description": ":)",
            "flags": 32,
            "hasliked": 0,
            "id": "3lcBWr",
            "likes": 4,
            "name": "Retrowave landscape",
            "published": 3,
            "tags": [
                "2d",
                "retrowave"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "vec3 postFX(vec2 uv, float blur)\n{\n    vec3 col;\n    int cnt = 20;\n    float fcnt = float(cnt);\n    for (int i = 0;i <cnt;++i)\n    {\n        float fi = float(i);\n        float coef = fi/fcnt;\n        float sz = 1.+pow(coef,2.)*blur;\n        float samplePerTurn = 2.;\n        float an = (fi/(fcnt/samplePerTurn))*PI;\n        vec2 p = uv - vec2(sin(an), cos(an))*an*blur*.1;\n    \tcol += texture(iChannel0, p).xyz;\n    }\n    \n    return col/float(cnt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    vec3 col = postFX(uv,.005);\n    \n\tcol += pow(postFX(uv,.015), vec3(.45));\n       col *= 2.;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define sat(a) clamp(a, 0., 1.)\n\nvec3 rdrr(vec2 uv)\n{\n    vec2 ouv= uv;\n    vec3 col = vec3(.05);\n\n    // Grid\n    vec2 rep = vec2(1., 0.1);\n    uv.x = ((uv.x) / uv.y)-iTime;\n    uv.y = pow(abs(uv.y)*4., .25);\n    vec2 gridUv = mod(uv+.5*rep, rep)-.5*rep;\n    float sz = 0.01;\n    float fv = abs(gridUv.x)-sz;\n    float fh = abs(gridUv.y)-sz*.1;\n    \n    col = mix(col, vec3(1.), 1.-sat(fv*iResolution.x*abs(uv.y)*0.05));\n    col = mix(col, vec3(1.), 1.-sat(fh*iResolution.x*.5));\n    col *= sat(-ouv.y);\n    col *= vec3(1.000,0.01,0.01);\n    col = sat(col*15.);\n\n    float t = iTime * .1;\n    float back = ouv.y-.05+.2*(sin(t+ouv.x*35.)*.1+sin(t+ouv.x*43.)*.05+sin(t+ouv.x*100.)*.02);\n    back = abs(back)-0.001;\n    \n    col = mix(col, vec3(0.,1.,0.), 0.02+1.-sat(back*iResolution.x));\n    \n    ouv = myPixel(ouv+5., 0.003)-5.;\n        \tcol *= sat(rand(ouv*sin(iTime)));\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    uv *= pow(1.+length(uv),.5);\n    vec3 col;\n    vec2 dir = vec2(1.);\n    float strength = 0.003+0.003*length(uv*2.);\n    col.r = rdrr(uv+dir*strength).r;\n    col.g = rdrr(uv).g;\n    col.b = rdrr(uv-dir*strength).b;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    \n    vec3 col = rdr(uv);\n    vec2 cuv = uv*vec2(2.,3.);\n    col *= pow(1.-sat(mix(lenny(cuv), length(cuv), .8)), 2.);\n    col = pow(col, vec3(.85));\n    col *= 2.;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.141492653\n\n// Stolen on stackoverflow\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nvec2 myPixel(vec2 uv, float sz)\n{\n    vec2 uv2 = uv/sz;\n    \n    return  vec2(float(int(uv2.x)), float(int(uv2.y)))*sz;\n}\n\nfloat lenny(vec2 uv)\n{\n    return abs(uv.x)+abs(uv.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}