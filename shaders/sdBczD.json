{
    "Shader": {
        "info": {
            "date": "1643164963",
            "description": "My first time using raymarching in a shader, it's probably wildly inefficient but whatever.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdBczD",
            "likes": 5,
            "name": "Raymarched planet on a plane",
            "published": 3,
            "tags": [
                "raymarching",
                "planet"
            ],
            "usePreview": 0,
            "username": "pancakespeople",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "vec2 random2(vec2 st) {\n\tst = vec2(dot(st, vec2(127.1, 311.7)),\n\t\tdot(st, vec2(269.5, 183.3)));\n\treturn -1.0 + 2.0 * fract(sin(st) * 43758.5453123 * 0.7897);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n\tvec2 i = floor(st);\n\tvec2 f = fract(st);\n\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\n\treturn mix(mix(dot(random2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0)),\n\t\tdot(random2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0)), u.x),\n\t\tmix(dot(random2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0)),\n\t\t\tdot(random2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0)), u.x), u.y);\n}\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n\tmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < 5; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat getSphereRadius(vec3 point) {\n    return 0.25*fbm(point.xy*5.0)+0.5;\n}\n\nfloat getAtmosRadius(vec3 point) {\n    point.x += iTime/6.0;\n    return 0.25*fbm(point.xy*5.0)+0.5;\n}\n\nfloat sphereAndPlane(vec3 point) {\n    vec3 spherePos = vec3(0.0, 1.0, -2.0);\n    float sphereRadius = getSphereRadius(point);//+(0.5*fbm(point.xy/3.0));\n    //float sphereRadius = 0.1*fbm(point.xy*10.0)+0.5;\n    \n    float sphereDist = length(point-spherePos)-sphereRadius;\n    float planeDist = length(point.y-0.5);\n    \n    return min(sphereDist, planeDist);\n}\n\nfloat atmosphere(vec3 point) {\n    vec3 spherePos = vec3(0.0, 1.0, -2.0);\n    float sphereRadius = getAtmosRadius(point)+0.1;\n    float sphereDist = length(point-spherePos)-sphereRadius;\n    return sphereDist;\n}\n\nfloat rayMarch(vec3 rayPoint, vec3 rayDir) {\n    float distMarched = 0.0;\n    \n    for (int i = 0; i < 100; i++) {\n        float dist = sphereAndPlane(rayPoint);\n        rayPoint += dist * rayDir;\n        distMarched += dist;\n        \n        if (dist < 0.01 || dist > 100.0) {\n            break;\n        }\n    }\n    return distMarched;\n}\n\nfloat rayMarchAtmosphere(vec3 rayPoint, vec3 rayDir) {\n    float distMarched = 0.0;\n    \n    for (int i = 0; i < 100; i++) {\n        float dist = atmosphere(rayPoint);\n        rayPoint += dist * rayDir;\n        distMarched += dist;\n        \n        if (dist < 0.01 || dist > 100.0) {\n            break;\n        }\n    }\n    return distMarched;\n}\n\nvec3 getNormal(vec3 point) {\n    float dist = sphereAndPlane(point);\n    vec3 norm = dist - vec3(\n        sphereAndPlane(point - vec3(0.01, 0.0, 0.0)),\n        sphereAndPlane(point - vec3(0.0, 0.01, 0.0)),\n        sphereAndPlane(point - vec3(0.0, 0.0, 0.01))\n    );\n    return normalize(norm);\n}\n\nvec3 getAtmosNormal(vec3 point) {\n    float dist = atmosphere(point);\n    vec3 norm = dist - vec3(\n        atmosphere(point = vec3(0.01, 0.0, 0.0)),\n        atmosphere(point - vec3(0.0, 0.01, 0.0)),\n        atmosphere(point - vec3(0.0, 0.0, 0.01))\n    );\n    return normalize(norm);\n}\n\nvec3 getColor(vec3 point) {\n    float radius = length(vec3(0.0, 1.0, -2.0)-point);\n    float polarity = point.y-1.0;\n    if (radius > 0.5) {\n        if (radius > 0.515) {\n            return vec3(1.0);\n        }\n        else {\n            return vec3(0.0, 1.0, 0.0) + smoothstep(0.15, 0.2, abs(polarity)) * vec3(1.0, 0.0, 1.0);\n        }\n    }\n    else {\n        return vec3(0.0, 0.0, 1.0) + smoothstep(0.1, 0.5, abs(polarity)) * vec3(1.0, 1.0, 0.0);\n    }\n}\n\nfloat getSpecularity(vec3 point) {\n    float radius = length(vec3(0.0, 1.0, -2.0)-point);\n    if (radius < 0.5) {\n        return 2.0;\n    }\n    else {\n        return 1.0;\n    }\n}\n\nfloat getSpecular(vec3 point, vec3 lightPos, vec3 cameraPos) {\n    vec3 viewDir = normalize(cameraPos-point);\n    vec3 lightDir = normalize(lightPos-point);\n    vec3 reflectDir = reflect(-lightDir, getNormal(point));\n    return pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n\n    vec3 cameraPos = vec3(0.0, 1.0, -4.0);\n    vec3 cameraDir = vec3(0.0);\n    vec3 rayDir = vec3(uv.x, uv.y, 1.0);\n    \n    vec3 lightPos = vec3(cos(iTime/4.0)*2.0, 1.0, sin(iTime/4.0)*5.0);\n    \n    float dist = rayMarch(cameraPos, rayDir + cameraDir);\n    vec3 hit = rayDir * dist + cameraPos;\n    \n    vec3 normal = getNormal(hit);\n    vec3 lightDir = normalize(lightPos-hit);\n    \n    vec3 col = vec3(0.0);\n    \n    float light = clamp(dot(lightDir, normal), 0.0, 1.0);\n\n    float shadow = rayMarch(hit+normal*0.1, lightDir);\n\n    if (shadow < length(lightPos-hit)) {\n        light *= 0.1;\n    }\n    \n    col = vec3(light) * (getColor(hit) + getSpecular(hit, lightPos, cameraPos) * getSpecularity(hit));\n    \n    float atmosDist = rayMarchAtmosphere(cameraPos, rayDir + cameraDir);\n    vec3 atmosPoint = rayDir * atmosDist + cameraPos;\n    float surfAtmosDist = rayMarch(atmosPoint, normalize(vec3(0.0, 1.0, -2.0)-atmosPoint));\n    \n    if (surfAtmosDist < 1.0) {\n        vec3 atmosNormal = getAtmosNormal(atmosPoint);\n        vec3 atmosLightDir = normalize(lightPos-atmosPoint);\n        float atmosLight = dot(atmosLightDir, atmosNormal);\n        col += smoothstep(0.1, 0.2, surfAtmosDist) * atmosLight;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}