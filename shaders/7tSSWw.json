{
    "Shader": {
        "info": {
            "date": "1627776186",
            "description": "color please",
            "flags": 0,
            "hasliked": 0,
            "id": "7tSSWw",
            "likes": 4,
            "name": "SpaceEYE",
            "published": 3,
            "tags": [
                "fbm"
            ],
            "usePreview": 0,
            "username": "jj99",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "float hash( float n )\n{\n    return fract(sin(n)*758.5453)*2.;\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x); \n    //f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + p.z*800.0;\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x), mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n            mix(mix( hash(n+800.0), hash(n+801.0),f.x), mix( hash(n+857.0), hash(n+858.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm(vec3 p)\n{\n    float f = 0.0;\n    f += 0.50000*noise( p ); p = p*2.02+0.15;\n    f -= 0.25000*noise( p ); p = p*2.03+0.15;\n    f += 0.12500*noise( p ); p = p*2.01+0.15;\n    f += 0.06250*noise( p ); p = p*2.04+0.15;\n    f -= 0.03125*noise( p );\n    //return f/0.984375;\n    return f;\n}\n\nfloat cloud(vec3 p)\n{\n    p-=fbm(vec3(p.x,p.y,0.0)*0.5)*0.7;\n    \n    float a =0.0;\n    a-=fbm(p*3.0)*2.2-1.1;\n    if (a<0.0) a=0.0;\n    a=a*a;\n    return a;\n}\n\nmat2 rot( float th ){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n\n\nvec3 hash33(vec3 p)\n{\n    const float UIF = (1.0/ float(0xffffffffU));\n    const uvec3 UI3 = uvec3(1597334673U, 3812015801U, 2798796415U);\n    uvec3 q = uvec3(ivec3(p)) * UI3;\n\tq = (q.x ^ q.y ^ q.z)*UI3;\n\treturn vec3(q) * UIF;\n}\n\n\n// 3D Voronoi- (IQ)\nfloat voronoi(vec3 p){\n\n\tvec3 b, r, g = floor(p);\n\tp = fract(p);\n\tfloat d = 1.; \n\tfor(int j = -1; j <= 1; j++)\n    {\n\t    for(int i = -1; i <= 1; i++)\n        {\n\t\t    b = vec3(i, j, -1);\n\t\t    r = b - p + hash33(g+b);\n\t\t    d = min(d, dot(r,r));\n\t\t    b.z = 0.0;\n\t\t    r = b - p + hash33(g+b);\n\t\t    d = min(d, dot(r,r));\n\t\t    b.z = 1.;\n\t\t    r = b - p + hash33(g+b);\n\t\t    d = min(d, dot(r,r));\n\t    }\n\t}\n\treturn d;\n}\n\n// fbm layer\nfloat noiseLayers(in vec3 p) {\n\n    vec3 pp = vec3(0., 0., p.z + iTime*.09);\n    float t = 0.;\n    float s = 0.;\n    float amp = 1.;\n    for (int i = 0; i < 5; i++)\n    {\n        t += voronoi(p + pp) * amp;\n        p *= 2.;\n        pp *= 1.5;\n        s += amp;\n        amp *= .5;\n    }\n    return t/s;\n}\n\nvec3 n2 (vec2 fragCoord)\n{\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n        float dd = length(uv*uv)*.025;\n    \n\tvec3 rd = vec3(uv.x, uv.y, 1.0);\n    \n    float rip = 0.5+sin(length(uv)*20.0+iTime)*0.5;\n    rip = pow(rip*.38,4.15);\n    rd.z=1.0+rip*1.15;// apply a subtle ripple\n    rd = normalize(rd);\n    rd.xy *= rot(dd+iTime*.0125);\n    rd*=2.0;\n\t\n\tfloat c = noiseLayers(rd*1.85);\n    float oc = c;\n    c = max(c + dot(hash33(rd)*2. - 1., vec3(.006)), 0.);\n    c = pow(c*1.55,2.5);    \n    vec3 col =  vec3(.55,0.85,.25);\n    vec3 col2 =  vec3(1.4,1.4,1.4)*5.0;\n    float pulse2 = voronoi(vec3((rd.xy*1.5),iTime*.255));\n    float pulse = pow(oc*1.35,4.0);\n    col = mix(col,col2,pulse*pulse2)*c;\n    return col;\n\n}\n#define PI 3.14159\n\n\nfloat vDrop(vec2 uv,float t)\n{\nuv.y *= 0.25;\n    uv.x = uv.x*128.0;\t\t\t\t\t\t// H-Count\n    float dx = fract(uv.x);\n    uv.x = floor(uv.x);\n    uv.y *= 0.05;\t\t\t\t\t\t\t// stretch\n    float o=sin(uv.x*215.4);\t\t\t\t// offset\n    float s=cos(uv.x*33.1)*.3 +.7;\t\t\t// speed\n    float trail = mix(95.0,35.0,s);\t\t\t// trail length\n    float yv = fract(uv.y + t*s + o) * trail;\n    yv = 1.0/yv;\n    yv = smoothstep(0.0,1.0,yv*yv);\n    yv = sin(yv*PI)*(s*5.0);\n    float d2 = sin(dx*PI);\n    return yv*(d2*d2);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    \n\tvec2 position = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n\tfloat ss = sin(length(position*3.0)+time*0.1)*2.5;\n\tss+=8.0;\n   \tvec2 coord = ss*position;\n    coord*=rot(ss*0.04+time*0.037);\n    coord*=0.25;\n    coord+=fbm(sin(vec3(coord*8.0,time*0.001)))*0.05;\n    coord+=time*0.0171;\n    float q = cloud((vec3(coord*1.0,0.222)));\n    coord+=time*0.0171;\n    q += cloud((vec3(coord*0.6,0.722)));\n    coord+=time*0.0171;\n    q += cloud(vec3(coord*0.3,.722));\n    coord+=time*0.1171;\n    q += cloud((vec3(coord*0.1,0.722)));\n    \n    \n\tfloat vv1 = sin(time+ss+coord.x)*0.3;\n\tfloat vv2 = sin(time*0.9+ss+coord.y)*0.2;\n\n    vec3 col = vec3(1.7-vv2,1.7,1.7+vv1) + vec3(q*vec3(0.7+vv1,0.5,0.3+vv2*1.15));\n\tcol = pow(col,vec3(2.2))*0.08;\n\t\n\tfloat dd = length(col*.48)+vv1;\n\t\n\tfloat nn = 0.5+sin(ss*2.7+position.x*2.41+time*0.9)*0.5;\n\t\n    vec3 col2 = n2(fragCoord)*0.9;\n    \n    vec2 p = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    float d = length(p);\n\tp = vec2(atan(p.x, p.y) / PI, 2.5 / d);\n    float t = -time*0.014;\n    float drop = vDrop(p,t);\n    drop += vDrop(p,t+0.5);\n    drop*=d;\n    \n        col2+=(col*.565);\n    \n\tcol = mix(col,col2,nn);\n    col = mix(col,col*1.075,drop);\n    \n    col+=col*((d+dd)*0.28);\n    col *= d;\n    \n\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}