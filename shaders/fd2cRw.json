{
    "Shader": {
        "info": {
            "date": "1643255721",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "fd2cRw",
            "likes": 24,
            "name": "Gradient Scan",
            "published": 3,
            "tags": [
                "gradient",
                "scan"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "const float TAU = 6.28318530718;\n\n// Minimal required 2D autodiff\nvec3 sub(in vec3 f, in float g) { f.x -= g; return f; }\nvec3 mul(in vec3 f, in vec3 g) { return vec3(f.x * g.x, dot(f.xy, g.yx), dot(f.xz, g.zx)); }\nvec3 square(in vec3 f) { return vec3(f.x * f.x, 2.0 * f.x * f.yz); }\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvec3 f(in vec2 p) {\n    vec3 x = vec3(p.x, 1.0, 0.0), y = vec3(p.y, 0.0, 1.0);\n\n    vec3 res = vec3(1.0, 0.0, 0.0);\n    float n = 5.0;//mod(floor(0.5 * iTime), 6.0) + 1.0;\n    for (float k=0.0; k < n; k++) {\n        float an = TAU * k / n;\n        res = mul(res, square(sub(x, cos(an))) + square(sub(y, sin(an))));\n    }\n\n    return sub(res, 1.0);\n}\n\n#define drawSDF(dist, col) color = mix(color, col.rgb, smoothstep(unit, 0.0, dist) * col.a)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec3 res = f(uv);\n    color.rg = normalize(res.yz);\n    drawSDF(res.x / length(res.yz), vec4(0.0, 0.0, 1.0, 0.5));\n\n    uv.y -= iTime;\n    float h = floor(uv.y) + 0.5;\n    //vec2 prev = vec2(-1.95, h) + 0.25 * normalize(f(vec2(-2.0, h + iTime)).yz);\n    for (float x=-2.0; x < 2.0; x += 0.05) {\n        //vec2 cur = vec2(x, h) + 0.25 * normalize(f(vec2(x, h + iTime)).yz);\n        vec2 p = vec2(x, h);\n        vec3 res = f(vec2(x, h + iTime));\n        drawSDF(sdLine(uv, vec2(x, h), vec2(x, h) + 0.5 * normalize(res.yz)), vec4(1.0));\n        //drawSDF(sdLine(uv, prev, cur), vec4(1.0));\n        //prev = cur;\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}