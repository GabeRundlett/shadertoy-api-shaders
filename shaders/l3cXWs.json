{
    "Shader": {
        "info": {
            "date": "1719771371",
            "description": "originals  https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/mtyGWy https://glslsandbox.com/e#51003.0",
            "flags": 0,
            "hasliked": 0,
            "id": "l3cXWs",
            "likes": 4,
            "name": "eating cosmos",
            "published": 3,
            "tags": [
                "fractal",
                "color",
                "stars",
                "neon",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define time iTime\n\nfloat sphere(vec2 p, float r) {\n\treturn length(p) - r;\n}\n\nfloat box(vec2 p, vec2 s) {\n\tp = abs(p) - s;\n\treturn length(max(p, 0.0)) + min(max(p.x, p.y), 0.0);\n}\n\nvec2 translate(vec2 p, vec2 o) {\n\treturn p - o;\n}\n\nmat2 rotate(float r) {\n\tfloat c = cos(r);\n\tfloat s = sin(r);\n\treturn mat2(c, s, -s, c);\n}\n\nvec2 foldX(vec2 p) {\n\tp.x = abs(p.x);\n\treturn p;\n}\n\nvec2 foldY(vec2 p) {\n\tp.y = abs(p.y);\n\treturn p;\n}\n\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    \n  \n\tuv.y*=iResolution.y/iResolution.x;\n    vec3 dir=vec3(uv*zoom,1.);\n    vec3 from=vec3(1.,.5,0.5);\n    float s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*= rotate(0.1 * time);// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n    \tvec4 fragColor2 = vec4(v*.03,1.);\t\n    vec3 finalColor = vec3(0.0);\n    vec2 p = uv;\n\t\n\tfloat d = 9999.0;\n\tfloat size = 0.1;\n\t\n\tfor (int i = 0; i < 17; i++) { \n\t\tp *= rotate(0.1 * time);\n\t\tp = foldX(p);\n\t\tp = foldY(p);\n\t\tp = translate(p, vec2(0.2, 0.2));\n\t\td = min(d, box(p * rotate(3.1 * time * float(i)), vec2(size)));\n\t\tsize *= 0.75;\n\t}\n\t\n\t\n\n\n\tvec3 c = vec3(1.0) * smoothstep(0.0, 0.01, abs(d));\n  \n    for (float i = 0.0; i < 4.0; i++) {\n      uv*= rotate(0.5 * time);\n      uv*= translate(p, uv*c.xy);\n        uv = fract(uv+p * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d*c*fragColor2.xyz;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}