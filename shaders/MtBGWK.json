{
    "Shader": {
        "info": {
            "date": "1432378260",
            "description": "Some tests I made to understand the Menger Sponge, I tried to visualize the holes, and found it nice.\n\nObviously from IQ raymarching samples...",
            "flags": 0,
            "hasliked": 0,
            "id": "MtBGWK",
            "likes": 15,
            "name": "Anti Menger Sphere Sponge",
            "published": 3,
            "tags": [
                "raymarching",
                "sphere",
                "menger",
                "sponge"
            ],
            "usePreview": 0,
            "username": "ManuManu",
            "viewed": 1853
        },
        "renderpass": [
            {
                "code": "\n//---------------------------------------------------------\n//\n// source header from IQ, for sure...\n//\n//\n// Modified by ManuManu to create the Monge effect\n//\n//\n\n// Shader:   RayMarchingPrimitivesV2.glsl\n// original: https://www.shadertoy.com/view/Xds3zN   colored\n//           http://glslsandbox.com/e#20839          gray scaled\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// A list of usefull distance function to simple primitives (animated), and an example \n// on how to / do some interesting boolean operations, repetition and displacement.\n// More info here: https://iquilezles.org/articles/distfunctions\n//---------------------------------------------------------\n\n\n//---------------------------------------------------------\n\n#define ANIMATE true\n#define ROTATE true\n#define flag true\n\nfloat aTime = 0.0;\nfloat sinTime = 0.0;\n//---------------------------------------------------------\n//  primitives\n//---------------------------------------------------------\nfloat sdPlane( vec3 p )\n{\n  return p.y;\n}\n\n\n//----------------------------------------------------------------------\n// distance operations\n//----------------------------------------------------------------------\n\n\n// Union: d1 +d2\nvec2 opU( vec2 d1, vec2 d2 )\n{\n  return (d1.x < d2.x) ? d1 : d2;\n}\n\n//----------------------------------------------------------------------\n// animated fractal Anti sphere sponge\nfloat AntiSphereSponge(vec3 w)\n{\n  const int ITER = 10;\n  float sphereHoles = 8.0 + 5.*sin(0.4123*aTime);\n  float sphereScale = 1.5 + 0.2*sin(0.345*aTime);\n  float scale =1.5;\n  float k = scale*.5;\n  float d = 10000.0;\n  float r, d1;\n  float sph=length(w * vec3(0.8, 0.8, 0.5)) - 0.6 ;\n  \n  if ( sph < .1)\n  for (int i = 0; i < ITER; i++) \n  {\n    vec3 zz = mod(w * k, sphereHoles) - vec3(0.5 * sphereHoles);\n    r = length(zz);\n    d1 = -(sphereScale - r) / k;\n    k *= scale;\n    d = min(d, d1);\n  }\n\telse d = 0.;\n  d = max(d,sph);\n  return d;\n}\n//----------------------------------------------------------------------\nvec2 map( in vec3 pos )\n{\n  vec3 r1, r2;\n  vec2 res = vec2( sdPlane( pos), 1.0 );\n  float color = 46.9 + 40.0 * cos(0.2 * iTime);\n  res = opU(res,vec2(AntiSphereSponge(pos - vec3(0.0, 0.7, 0.0)), color));\n  return res;\n}\n//----------------------------------------------------------------------\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n  float tmin = 1.0;\n  float tmax = 20.0;\n\n  float precis = 0.002;\n  float t = tmin;\n  float m = -1.0;\n  for ( int i=0; i<100; i++ )\n  {\n    vec2 res = map( ro+rd*t );\n    if ( res.x<precis || t>tmax ) break;\n    t += res.x;\n    m = res.y;\n  }\n\n  if ( t>tmax ) m=-1.0;\n  return vec2( t, m );\n}\n\n//----------------------------------------------------------------------\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n  float res = 1.0;\n  float t = mint;\n  for ( int i=0; i<14; i++ )\n  {\n    float h = map( ro + rd*t ).x;\n    res = min( res, 8.0*h/t );\n    t += clamp( h, 0.02, 0.10 );\n    if ( h<0.001 || t>tmax ) break;\n  }\n  return clamp( res, 0.0, 1.0 );\n}\n\n//----------------------------------------------------------------------\nvec3 calcNormal( in vec3 pos )\n{\n  vec3 eps = vec3( 0.001, 0.0, 0.0 );\n  vec3 nor = vec3(\n  map(pos+eps.xyy).x - map(pos-eps.xyy).x, \n  map(pos+eps.yxy).x - map(pos-eps.yxy).x, \n  map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n  return normalize(nor);\n}\n\n//----------------------------------------------------------------------\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n  float occ = 0.0;\n  float sca = 1.0;\n  for ( int i=0; i<5; i++ )\n  {\n    float hr = 0.01 + 0.12*float(i) / 4.0;\n    vec3 aopos =  nor * hr + pos;\n    float dd = map( aopos ).x;\n    occ += -(dd-hr)*sca;\n    sca *= 0.95;\n  }\n  return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n//---------------------------------------------------------\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n  aTime = ANIMATE ? iTime : 0.0;\n  sinTime = sin(aTime);\n  vec3 col = vec3(0.8, 0.9, 1.0);\n  vec2 res = castRay(ro, rd);\n  float t = res.x;\n  float m = res.y;\n  if ( m > -0.5 )\n  {\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos );\n    vec3 ref = reflect( rd, nor );\n\n    // material        \n    col = 0.45 + 0.3*sin( vec3(0.05, 0.08, 0.10)*(m-1.0) );\n\n    if ( m<1.5 )\n    {\n      float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n      col = 0.4 + 0.1*f*vec3(1.0);\n    }\n\n    // lighting        \n    float occ = calcAO( pos, nor );\n    vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n    float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float bac = clamp( dot( nor, normalize(vec3(-lig.x, 0.0, -lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y, 0.0, 1.0);\n    float dom = smoothstep( -0.1, 0.1, ref.y );\n    float fre = pow( clamp(1.0+dot(nor, rd), 0.0, 1.0), 2.0 );\n    float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0);\n\n    dif *= softshadow( pos, lig, 0.02, 2.5 );\n    dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n    vec3 brdf = vec3(0.0);\n    brdf += 1.20*dif*vec3(1.00, 0.90, 0.60);\n    brdf += 1.20*spe*vec3(1.00, 0.90, 0.60)*dif;\n    brdf += 0.30*amb*vec3(0.50, 0.70, 1.00)*occ;\n    brdf += 0.40*dom*vec3(0.50, 0.70, 1.00)*occ;\n    brdf += 0.30*bac*vec3(0.25, 0.25, 0.25)*occ;\n    brdf += 0.40*fre*vec3(1.00, 1.00, 1.00)*occ;\n    brdf += 0.02;\n    col = col*brdf;\n    col = mix( col, vec3(0.8, 0.9, 1.0), 1.0-exp( -0.005*t*t ) );\n  }\n  return vec3( clamp(col, 0.0, 1.0) ); \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = 2.0*(fragCoord.xy / iResolution.xy) - 1.0;\n  p.x *= iResolution.x / iResolution.y;\n\n  // camera  \n  float angle = ROTATE ? 0.02*iTime : 0.0;\n  float rx = 0.5 + 3.0*cos(angle + 6.0*iMouse.x);\n  float rz = 0.5 + 3.0*sin(angle + 6.0*iMouse.x);\n  vec3 ro = vec3( rx, 1.0 + 1.0*iMouse.y, rz );\n  vec3 ta = vec3( 0.0, 0.5, 0.0 );\n\n  // camera tx\n  vec3 cw = normalize( ta-ro );\n  vec3 cp = vec3( 0.0, 1.0, 0.0 );\n  vec3 cu = normalize( cross(cw, cp) );\n  vec3 cv = normalize( cross(cu, cw) );\n  vec3 rd = normalize( p.x*cu + p.y*cv + 3.0*cw );\n\n  // pixel color\n  vec3 col = render( ro, rd );\n  col = pow( col, vec3(0.4545) );\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}