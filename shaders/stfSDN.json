{
    "Shader": {
        "info": {
            "date": "1625710164",
            "description": "Testing with lots of lights. Doing a 10x10 loop does not seem smart!\nWell anyway it has a nice warm look to it like I intended :)\nMove around with the arrow keys and mouse.",
            "flags": 48,
            "hasliked": 0,
            "id": "stfSDN",
            "likes": 12,
            "name": "Reactive Light Garden",
            "published": 3,
            "tags": [
                "3d",
                "light",
                "volumetric",
                "audioreactive",
                "integration",
                "lightfied"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "// https://www.shadertoy.com/view/4djSRW\nvec2 Hash22(in vec2 p) {\n\tvec3 p3 = fract(p.xyx * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec3 Hash33(in vec3 p) {\n\tp = fract(p * vec3(0.1031, 0.103, 0.0973));\n    p += dot(p, p.yxz + 33.33);\n    return fract((p.xxy + p.yxx) * p.zyx);\n}\n\n// https://www.shadertoy.com/view/slXXD4\n// Simplified to assume the ray is normalized\nfloat integrateLightFullView(in vec3 ro, in vec3 rd, in float k, in float d) {\n    float b = dot(ro, rd);\n    float c = dot(ro, ro) + d * d;\n    float h = sqrt(c - b * b);\n    return d * d * k * (RHO - atan(b / h)) / h;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    float time = iTime * 2.0;\n    fragColor = vec4(0.0);\n\n    // Camera ray\n    vec2 viewDir = ivec2(iMouse.xy) == ivec2(0) ? vec2(0.0, -0.6) : (iMouse.xy - center) / iResolution.y * PI;\n    mat3 cam = getCamera(viewDir);\n\n    vec3 ro = getPosition();\n    vec3 rd = normalize(cam * vec3(uv, 1.0));\n\n    // Lights\n    for (float x=-50.0; x < 51.0; x += 10.0) {\n        for (float y=-50.0; y < 51.0; y += 10.0) {\n            vec2 horiPos = vec2(x, y);\n            horiPos += 8.0 * Hash22(horiPos) - 4.0;\n            float height = texture(iChannel1, vec2(length(horiPos) / 70.0, 0.0)).x * 30.0;\n            vec3 colorLast = normalize(Hash33(vec3(horiPos, floor(time))));\n            vec3 colorNext = normalize(Hash33(vec3(horiPos, ceil(time))));\n            fragColor.rgb += integrateLightFullView(ro - vec3(horiPos, height).xzy, rd, 2.0, 0.25) * mix(colorLast, colorNext, fract(time));\n        }\n    }\n\n    fragColor.rgb *= vec3(1.0, 0.8, 0.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Constants\n#define PI 3.14159265359\n#define RHO 1.57079632679\n\n// State loading\n#define getPosition() texelFetch(iChannel0, ivec2(0), 0).xyz\n#define keyUpPressed() bool(texelFetch(iChannel1, ivec2(38, 0), 0).x)\n#define keyDownPressed() bool(texelFetch(iChannel1, ivec2(40, 0), 0).x)\n#define keyRightPressed() bool(texelFetch(iChannel1, ivec2(39, 0), 0).x)\n#define keyLeftPressed() bool(texelFetch(iChannel1, ivec2(37, 0), 0).x)\n\n// Camera matrix\nmat3 getCamera(in vec2 viewDir) {\n    vec2 c = cos(viewDir); vec2 s = sin(viewDir);\n    return mat3(       c.x, 0.0,         s.x,  // Right\n                s.x * -s.y, c.y, -c.x * -s.y,  // Up\n                s.x *  c.y, s.y, -c.x *  c.y); // Forward\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Camera position buffer\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 50.0, 50.0, 0.0);\n    if (iFrame > 0) {\n        ivec2 addr = ivec2(fragCoord);\n        if (addr == ivec2(0)) {\n            fragColor = vec4(getPosition(), 0.0);\n\n            vec2 viewDir = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * PI;\n            mat3 cam = getCamera(viewDir);\n\n            if (keyUpPressed()) fragColor.xyz += cam[2] * 0.5;\n            if (keyDownPressed()) fragColor.xyz -= cam[2] * 0.5;\n            if (keyRightPressed()) fragColor.xyz += cam[0] * 0.5;\n            if (keyLeftPressed()) fragColor.xyz -= cam[0] * 0.5;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}