{
    "Shader": {
        "info": {
            "date": "1635331868",
            "description": "[url]https://inktober.com/[/url]\n#inktober2021 themes: [img]https://i.imgur.com/QjhAdpd.png[/img]\n\ninspiration: see below",
            "flags": 40,
            "hasliked": 0,
            "id": "NsVXDV",
            "likes": 51,
            "name": "Fab27 #inktober2021 \"spark\"",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "noise",
                "perlin",
                "gradient",
                "lightning",
                "short",
                "inktober2021"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 2158
        },
        "renderpass": [
            {
                "code": "//reusing https://shadertoy.com/view/WdGXWG\n\nvoid mainImage( out vec4 O, vec2 U ) { O = T(U); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//reusing https://shadertoy.com/view/WdGXWG\n\n#define hash(p) ( 2.* fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123) - 1. )\n\nfloat noise( vec2 p )                                // Perlin base noise ( grandient noise )\n{\n    vec2 i = floor( p ),\n         f = fract( p ),\n\t     u = f*f*(3.-2.*f);\n\n#define P(x,y) dot( hash( i + vec2(x,y) ), f - vec2(x,y) )\n    return mix( mix( P(0,0), P(1,0), u.x),\n                mix( P(0,1), P(1,1), u.x), u.y);\n}\n\nfloat perlin( vec2 p )                               // Perlin noise ( fractal noise )\n{\t\n    float v  = 0.,s = 1.;\n    for( int i=0; i++ < 7; s /= 2., p*=2. )\n        v += s* noise( p );\n    return v;\n}\n\n// -----------------------------------------------\n#define rot(a) mat2(cos(a + vec4(0,11,33,0) ) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 2.* ( u+u -R ) / R.y;\n         \n    O = T(u) * vec4(.87,.8,.9,1);                    // reprint violet-fading prev frame.\n\n    U *= rot( 6.28*hash(vec2(floor(iTime*4.))).x );  // change direction every 1/4th second\n    \n    //      glow             noise changing more often with distance to center.\n    O += .01 / (abs( U.y - perlin(vec2(U.x, iFrame*int(1.+abs(U.x))/4)) * (.5+.3*U.x) ))\n             * smoothstep(-.1,0.,U.x);               // draw only one side\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound( int samp, float time )\n{\n    return vec2( min(.0,tan(6.28 *30.*time)) );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}