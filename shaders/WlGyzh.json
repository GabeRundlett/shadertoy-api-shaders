{
    "Shader": {
        "info": {
            "date": "1610411027",
            "description": "Much more interesting version of my old triangle rasterizer shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlGyzh",
            "likes": 4,
            "name": "Triangle Interp. - Barycentric",
            "published": 3,
            "tags": [
                "triangle",
                "barycentric",
                "interpolation",
                "barycoords"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "struct Vertex {\n    vec2 pos;\n    vec3 col;\n    vec2 uv;\n};\n\nvec3 barycoords(in vec2 p, in vec2 a, in vec2 b, in vec2 c) {\n    vec2 pa = p - a, pb = p - b, pc = p - c;\n    vec2 ba = b - a, cb = c - b, ac = a - c;\n\n    float abc = abs(ba.y * ac.x - ba.x * ac.y);\n    float abp = abs(ba.x * pa.y - ba.y * pa.x);\n    float bcp = abs(cb.x * pb.y - cb.y * pb.x);\n    float cap = abs(ac.x * pc.y - ac.y * pc.x);\n\n    return vec3(bcp, cap, abp) / abc;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 5.0 / iResolution.y;\n\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    float t1 = iTime * 0.5, t2 = iTime, t3 = iTime * 1.5;\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec2 aspMult = vec2(iResolution.x / iResolution.y, 1.0) * 0.5;\n    Vertex a = Vertex(vec2(s1, c2) * aspMult, vec3(1.0, 0.0, 0.0), vec2(0.0, 0.0));\n    Vertex b = Vertex(vec2(c2, s3) * aspMult, vec3(0.0, 1.0, 0.0), vec2(0.5, 1.0));\n    Vertex c = Vertex(vec2(c3, s1) * aspMult, vec3(0.0, 0.0, 1.0), vec2(1.0, 0.0));\n\n    vec3 uvw = barycoords(uv, a.pos, b.pos, c.pos);\n    fragColor.rgb += texture(iChannel0, a.uv * uvw.x + b.uv * uvw.y + c.uv * uvw.z).rgb;\n    fragColor.rgb *= a.col * uvw.x + b.col * uvw.y + c.col * uvw.z;\n    fragColor.rgb *= smoothstep(1.0 + unit, 1.0 - unit, uvw.x + uvw.y + uvw.z) * 2.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}