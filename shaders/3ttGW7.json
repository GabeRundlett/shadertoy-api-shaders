{
    "Shader": {
        "info": {
            "date": "1576587659",
            "description": "Testing sdJoint3D [url]https://www.shadertoy.com/view/3ld3DM[/url] . Similar to [url]https://www.shadertoy.com/view/wlj3zV[/url] but with full UVW coords, for 2D and 3D texturing. Triggered by dr2's test [url]https://www.shadertoy.com/view/3l3GD7[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "3ttGW7",
            "likes": 74,
            "name": "Joints test",
            "published": 3,
            "tags": [
                "3d",
                "animation",
                "joint",
                "run",
                "body"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3370
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A test for sdJoint3D (https://www.shadertoy.com/view/3ld3DM), which\n// was inspired by dr2's https://www.shadertoy.com/view/3l3GD7 but\n// I think simpler. It's an evolution of my \"Torus Pipes\" shader\n// (https://www.shadertoy.com/view/wlj3zV) but with full UVW texture\n// coordinates. This allows for consistent 2D or 3D texture mapping\n// and displacement that sticks to the surface, which is very convenient.\n//\n// The shader shows 2D texturing (the checkerboard), 3D solid\n// texturing (the sine wave pattern) and displacement.\n\n\n#define AA 1\n\n\n// https://iquilezles.org/articles/smin\nvec4 smin( vec4 a, vec4 b, float k )\n{\n    float h = clamp( 0.5+0.5*(b.x-a.x)/k, 0.0, 1.0 );\n    return vec4(mix(b.x,a.x,h)-k*h*(1.0-h), (b.x<a.x)?b.yzw:a.yzw);\n}\n\nvec4 dmin( in vec4 a, in vec4 b )\n{\n    return (a.x<b.x) ? a : b;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdEllipsoid( in vec3 p, in vec3 r ) \n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n// https://www.shadertoy.com/view/3ld3DM\nfloat dot2( in vec2 v ) { return dot(v,v); }\nvec2 sdJoint3D( in vec3 p, in float l, in float a, \n                out vec3 uvw, out vec3 qos, inout float ioV)\n{\n    qos = p;\n    \n    // if perfectly straight\n    if( abs(a)<0.001 )\n    {\n        float v = p.y;\n        p.y -= clamp(p.y,0.0,l);\n        qos.y -= l;\n        uvw = vec3(p.x,v,p.z) + vec3(0,ioV,0);\n        ioV += l;\n\t\treturn vec2(length(p),clamp(v/l,0.0,1.0));\n    }\n    \n    // parameters\n    vec2  sc = vec2(sin(a),cos(a));\n    float ra = 0.5*l/a;\n    \n    // recenter\n    p.x -= ra;\n    \n    // reflect\n    vec2 q = p.xy - 2.0*sc*max(0.0,dot(sc,p.xy));\n\n\t// distance\n    float u = abs(ra)-length(q);\n    float d2 = (q.y<0.0) ? dot2( q+vec2(ra,0.0) ) : u*u;\n\n    // parametrization\n    float s = sign(a);\n#if 0\n    float v = ra*atan(s*p.y,-s*p.x);\n    u = u*s;\n    if( v<0.0 ) { if( s*p.x>0.0 ) { v = abs(ra)*6.283185 + v; } else { v = p.y; u = q.x + ra; } }\n#else\n    float v = (p.y>0.0) ? atan(s*p.y,-s*p.x)*ra : (s*p.x<0.0)?p.y:l-p.y;\n          u = (p.y>0.0) ? s*u : sign(-s*p.x)*(q.x+ra);\n#endif    \n    uvw = vec3(u,v,p.z) + vec3(0,ioV,0);\n    ioV += l;\n    \n    // out coordinate system\n    vec2 scb = vec2(sc.y*sc.y-sc.x*sc.x,2.0*sc.x*sc.y);\n\tqos.x -= ra;    \n    qos.xy = mat2(scb.x,scb.y,-scb.y,scb.x)*qos.xy;\n    qos.x += ra;\n    \n\t// distance    \n    return vec2(sqrt(d2+p.z*p.z), clamp(v/l,0.0,1.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nvec2 sdLine( vec3 p, in float l, \n             out vec3 uvw, out vec3 qos, inout float ioV )\n{\n    qos = p + vec3(0,-l,0);\n\tuvw = p + vec3(0,ioV,0);\n    ioV += l;\n    float h = clamp( p.y/l, 0.0, 1.0 );\n\tp.y -= h*l;\n    return vec2( length( p ), h );\n}\n\n//-------------------------------------------------------------------\n\nvec4 leg( in vec3 pos, in float time )\n{\n    // basic/stupid/test leg animation\n    float tempo = 0.5 + 0.5*sin(time);\n    tempo = 0.5*tempo + 0.5*tempo*tempo*(3.0-2.0*tempo);\n    float an0 = mix(0.25,-0.75,tempo*tempo*0.5+0.5*tempo);\n    float an1 = mix(0.80, 0.80,1.0-(1.0-tempo)*(1.0-tempo));\n    an1 -= 0.8*4.0*tempo*(1.0-tempo)*tempo;\n    float an2 = -0.65 - 0.2*4.0*tempo*(1.0-tempo);\n\n    //---------------\n    \n    vec4  res;\n    vec3  qos = vec3(0.0);\n    float h = 0.0;\n    \n    // join\n    {\n        vec3 uvw;\n        vec2 d2 = sdJoint3D(pos, 0.4, -an0, uvw, qos, h );\n        float d = d2.x - mix(0.26,0.24,smoothstep(0.0,1.0,d2.y) );\n        res = vec4(d,uvw);\n    }\n    \n    // segment\n    {\n        vec3 uvw;\n        vec2 d2 = sdLine( qos, 0.4, uvw, qos, h );\n        float ra = mix(0.24,0.19,smoothstep(0.0,1.0,d2.y));\n        float d = d2.x - ra;\n        if( d<res.x ) res = vec4(d,uvw);\n    }\n    \n    // join\n    {\n        vec3 uvw;\n        vec2 d2 = sdJoint3D(qos, 0.3, -an1, uvw, qos, h );\n        float d = d2.x - mix(0.19, 0.17, smoothstep(0.0,1.0,d2.y));; \n        if( d<res.x ) res = vec4(d,uvw);\n    }\n\n\t// segment\n    {\n        vec3 uvw;\n    \tvec2 d2 = sdLine( qos, 0.9, uvw, qos, h );\n        float ra = 0.17;\n        ra = mix(ra,0.19,smoothstep(0.0,0.3,d2.y));\n        ra = mix(ra,0.11,smoothstep(0.3,1.0,d2.y));\n        ra -= 1.4*sin(atan(uvw.x,uvw.z))*smoothstep(0.0,1.0,d2.y)*(1.0-smoothstep(0.9,1.0,d2.y))*exp2(-d2.y*8.0);\n        float d = d2.x - ra;\n        \n    \tif( d<res.x ) res = vec4(d,uvw );\n    }\n    \n    // join\n    {\n        vec3 uvw;\n        vec2 d2 = sdJoint3D(qos, 0.2, -an2, uvw, qos, h );\n        float d = d2.x - mix(0.11,0.08,smoothstep(0.0,1.0,d2.y) );\n        if( d<res.x ) res = vec4(d,uvw);\n    }\n\n\t// segment\n    {\n        vec3 uvw;\n    \tvec2 d2 = sdLine( qos-vec3(0.0,-0.15,0.0), 0.3, uvw, qos, h );\n        uvw.y-=0.15;\n        float d = d2.x - 0.08;\n    \tif( d<res.x ) res = vec4(d,uvw );\n    }\n\n    return res;\n}\n\nfloat waves( in vec3 p )\n{\n    return 0.5+0.5*sin(p.x*80.0)*sin(p.y*80.0)*sin(p.z*80.0);\n}\n\nfloat disp(in vec3 p, in float s )\n{\n    vec3 q = p;\n    p *=0.4;\n    p.xz *= 0.2;\n\n    float f = 0.0;\n    f += 0.6*waves(p*1.0);    \n    f += 0.4*waves(p*2.0+1.0);\n    f += 0.03*sin(atan(q.x,q.z-s*0.27)*90.0);\n\n    return f;\n}\n\n#define ZERO min(iFrame,0)\n\nvec4 map( in vec3 pos, in float time, float doDisplace )\n{\n    time = time*3.0;\n\n    // body\n\tvec3 bpos = pos;\n    bpos.y -= 0.3*sqrt(0.5-0.5*cos(time*2.0+1.0));\n    bpos.x -= 0.1;\n    bpos.y += 0.35;\n    bpos.x -= 0.2*pow(0.5+0.5*cos(time*2.0+0.5),2.0);\n    vec3 tpos = bpos - vec3(-0.1,0.45,0.0);\n    bpos.xy = -bpos.xy;\n    vec4 res2 = vec4(sdEllipsoid(tpos,vec3(0.3,0.7,0.45)),bpos);\n    \n\t// legs\n#if 0\n    vec4 l1 = leg( bpos-vec3(0.0,0.0, 0.27), 3.1416+time );\n    vec4 l2 = leg( bpos-vec3(0.0,0.0,-0.27), time );\n    vec4 res = dmin(l1,l2);\n    res.w += 0.27*sign(l2.x-l1.x);\n#else\n    // trick to prevent inlining - compiles faster\n    vec4 dl[2];\n    for( int i=ZERO; i<2; i++ )\n       dl[i] = leg( bpos-vec3(0.0,0.0,((i==0)?1.0:-1.0)*0.27), ((i==0)?3.1416:0.0)+time );\n    vec4 res = dmin(dl[0],dl[1]);\n    res.w += 0.27*sign(dl[1].x-dl[0].x);\n#endif    \n        \n    res = smin( res, res2, 0.08 );\n\n\t// displacement\n    float di = disp(res.yzw, sign(pos.z));\n\tfloat tempo = 0.5 + 0.5*sin(time);\n    tempo = 0.5*tempo + 0.5*tempo*tempo*(3.0-2.0*tempo);\n    float an0 = mix(1.0,0.0,tempo);\n    di *= 0.8 + 1.7*an0*(smoothstep(-0.6,0.40,res.z)-smoothstep(0.8,1.4,res.z));\n\tdi *= 1.0-smoothstep(1.9,1.91,res.z);\n    res.x += (0.015-0.03*di)*doDisplace;\n    res.x *= 0.85;\n\n    return res;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos, in float time, in float doDisplace )\n{\n    const float eps = 0.0005;\n#if 0    \n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*eps,time,doDisplace ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps,time,doDisplace ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps,time,doDisplace ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps,time,doDisplace ).x );\n#else\n    // trick by klems, to prevent the compiler from inlining map() 4 times\n    vec4 n = vec4(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec4 s = vec4(pos, 0.0);\n        s[i] += eps;\n        n[i] = map(s.xyz, time, doDisplace).x;\n    }\n    return normalize(n.xyz-n.w);\n#endif   \n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, in float time, in float doDisplace )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<25; i++ )\n    {\n\t\tfloat h = map( ro + rd*t, time, doDisplace ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.025, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor, in float time, in float doDisplace )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<5; i++ )\n    {\n        float hr = 0.01 + 0.5*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos, time, doDisplace ).x;\n        occ += (hr-dd)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - occ*0.5, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // render\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        float d = 0.5*sin(fragCoord.x*147.0)*sin(fragCoord.y*131.0);\n        float time = iTime - 0.5*(1.0/24.0)*(float(m*AA+n)+d)/float(AA*AA-1);\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        float time = iTime;\n        #endif\n\n        // animation\n        float displace = smoothstep(-0.4,0.4,sin(0.5*time));\n\n        // camera movement\t\n        float an = -0.6 + 0.2*sin(time*0.2) + 9.0*iMouse.x/iResolution.x;\n        vec3 ro = vec3( 2.3*sin(an), -0.3, 2.3*cos(an) );\n        vec3 ta = vec3( 0.0, -0.8, 0.0 );\n\n        // camera matrix\n        vec3 ww = normalize( ta - ro );\n        vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n        vec3 vv =          ( cross(uu,ww));\n\n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.7*ww );\n        \n        // raymarch\n        const float tmax = 4.0;\n        float t = 0.0;\n        vec3 uvw = vec3(0.0);\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            \n            vec4 h = map(pos,time,displace);\n            if( abs(h.x)<0.0001 || t>tmax )\n            {\n                uvw = h.yzw;\n                break;\n            }\n            t += h.x;\n        }\n    \n        // shading/lighting\t\n        vec3 col = vec3(0.02);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos, time, displace);\n            float fre = clamp(1.0+dot(nor,rd),0.0,1.0);\n            vec3 lig = normalize(vec3(0.5,0.4,0.51));\n            vec3 hal = normalize(lig-rd);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            dif *= calcSoftshadow( pos, lig, 0.001, 2.0, time, displace );\n            float spe = pow(clamp(dot(nor,hal),0.0,1.0),16.0)*dif*(0.04+0.96*pow(clamp(1.0-dot(hal,-rd),0.0,1.0),5.0));\n            float amb = 0.55 + 0.45*dot(nor,vec3(0.0,1.0,0.0));\n            float occ = calcOcclusion( pos, nor, time, displace );\n            amb *= occ;\n            \n            // basic ligthing\n            vec3 lin = vec3(0.0);\n            lin += vec3(0.3,0.35,0.4)*amb;\n            lin += vec3(1.1,0.9,0.7)*dif;\n            \n            // material\n            col = mix(vec3(0.8),vec3(0.5,0.1,0),smoothstep(-0.1,0.1,(sin( 50.0*uvw.x )+sin( 50.0*uvw.y )+sin( 50.0*uvw.z ))/3.0));\n            col = mix(col,vec3(0.4,0.25,0.2), displace*smoothstep(1.9,1.91,uvw.y) );\n\n            col = lin*col + spe + fre*fre*fre*0.1*occ;\n        }\n\n        // gamma        \n        col = pow( col, vec3(0.4545) );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}