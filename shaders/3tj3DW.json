{
    "Shader": {
        "info": {
            "date": "1559604516",
            "description": "Analytic intersection of a sphere f(x,y,z)=x^4+y^4+z^4-r^4=0. Specialized the generic quartic equation solver for the only geometrically valid cases, reduced all canceling complex arithmetic, and optimized coefficients. It involves 5 sqrt/pow functions.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tj3DW",
            "likes": 22,
            "name": "Sphere4 - intersection",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "intersection",
                "analytical",
                "sphere4"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2708
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Analytic intersection of a ray and f(x,y,z) = x⁴+y⁴+z⁴-r⁴ = 0. \n// I specialized the general quartic equation to only geometrically\n// relevant cases (two real roots), and also simplified all\n// canceling operations and coefficients.\n\n// List of ray-surface intersectors at\n//    https://www.shadertoy.com/playlist/l3dXRf\n// and\n//    https://iquilezles.org/articles/intersectors\n\n\n// f(x,y,z) = x⁴ + y⁴ + z⁴ - ra⁴\nfloat iSphere4( in vec3 ro, in vec3 rd, in float ra )\n{\n    // -----------------------------\n    // solve quartic equation\n    // -----------------------------\n    \n    float r2 = ra*ra;\n    \n    vec3 d2 = rd*rd; vec3 d3 = d2*rd;\n    vec3 o2 = ro*ro; vec3 o3 = o2*ro;\n\n    float ka = 1.0/dot(d2,d2);\n\n    float k3 = ka* dot(ro,d3);\n    float k2 = ka* dot(o2,d2);\n    float k1 = ka* dot(o3,rd);\n    float k0 = ka*(dot(o2,o2) - r2*r2);\n\n    // -----------------------------\n    // solve cubic\n    // -----------------------------\n\n    float c2 = k2 - k3*k3;\n    float c1 = k1 + 2.0*k3*k3*k3 - 3.0*k3*k2;\n    float c0 = k0 - 3.0*k3*k3*k3*k3 + 6.0*k3*k3*k2 - 4.0*k3*k1;\n\n    float p = c2*c2 + c0/3.0;\n    float q = c2*c2*c2 - c2*c0 + c1*c1;\n    \n    float h = q*q - p*p*p;\n\n    // -----------------------------\n    // skip the case of three real solutions for the cubic, which involves four\n    // complex solutions for the quartic, since we know this objcet is convex\n    // -----------------------------\n    if( h<0.0 ) return -1.0;\n    \n    // one real solution, two complex (conjugated)\n    float sh = sqrt(h);\n\n    float s = sign(q+sh)*pow(abs(q+sh),1.0/3.0); // cuberoot\n    float t = sign(q-sh)*pow(abs(q-sh),1.0/3.0); // cuberoot\n    vec2  w = vec2( s+t,s-t );\n\n    // -----------------------------\n    // the quartic will have two real solutions and two complex solutions.\n    // we only want the real ones\n    // -----------------------------\n\n#if 1\n    vec2  v = vec2( w.x+c2*4.0, w.y*sqrt(3.0) )*0.5;\n    float r = length(v);\n    return -abs(v.y)/sqrt(r+v.x) - c1/r - k3;\n#else\n    float r = sqrt( c2*c2 + w.x*w.x + 2.0*w.x*c2 - c0 );\n    return -sqrt( 3.0*w.y*w.y/(4.0*r+w.x*2.0+c2*8.0)) - c1/r - k3;\n#endif    \n}\n\n// normal of the sphere4\n//    ∇f(x,y,z) = 4·(x³, y³, z³)\nvec3 nSphere4( in vec3 pos )\n{\n    return normalize( pos*pos*pos );\n}\n\n#define AA 2\n\n#define ZERO min(iFrame,0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 3.1*cos(an), 1.4, 3.1*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n\t    vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n        // raytrace\n\t    float t = iSphere4( ro, rd, 1.0 );\n\n        // shading/lighting\t\n\t    vec3 col = vec3(0.08)*(1.0-0.3*length(p)) + 0.02*rd.y;\n\t    if( t>0.0 && t<100.0 )\n\t    {\n            vec3 pos = ro + t*rd;\n\t\t    vec3 nor = nSphere4( pos );\n            vec3 lig = normalize(vec3(0.7,0.6,0.3));\n            vec3 hal = normalize(-rd+lig);\n\t\t    float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n\t\t    float amb = clamp( 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0)), 0.0, 1.0 );\n#if 0\n            col = vec3(0.8);\n#else\n            const float fr = 3.14159*7.5;\n            vec3 uvw = pow(abs(nor),vec3(1.0/3.0));\n            //vec3 uvw = pos;\n            col = vec3(0.5);\n            float w = pow(1.0+dot(nor,rd),3.0);\n            col += 0.4*smoothstep(-0.01,0.01,cos(uvw.x*fr*0.5)*cos(uvw.y*fr*0.5)*cos(uvw.z*fr*0.5)); \n            col *= 1.0*smoothstep(-1.0,-0.98+0.2*w,cos(uvw.x*fr))\n                      *smoothstep(-1.0,-0.98+0.2*w,cos(uvw.y*fr))\n                      *smoothstep(-1.0,-0.98+0.2*w,cos(uvw.z*fr));\n#endif      \n\t\t    col *= vec3(0.2,0.3,0.4)*amb + vec3(1.0,0.9,0.7)*dif;\n            \n            col += 0.4*pow(clamp(dot(hal,nor),0.0,1.0),12.0)*dif;\n\t    }\n\t\n        // gamma\n        col = sqrt( col );\n\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // dither to remove banding in the background\n    tot += fract(sin(fragCoord.x*vec3(13,1,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n    \n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}