{
    "Shader": {
        "info": {
            "date": "1653082816",
            "description": "Read the top of code, for steps on how to set up custom audio.",
            "flags": 16,
            "hasliked": 0,
            "id": "NsdyR4",
            "likes": 7,
            "name": "XY Oscilloscope - Custom Audio",
            "published": 3,
            "tags": [
                "oscilloscope",
                "framework",
                "music",
                "optimized",
                "xy",
                "xyoscilloscope"
            ],
            "usePreview": 0,
            "username": "shyshokayu",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "/* \n    I n s t r u c t i o n s :\n\n    Since Shadertoy doesn't have support for stereo audio waveform format,\n    you need to get the chrome extension called \"Shadertoy Custom Textures\" (sorry non-chrome users...),\n    after that, reload this page to make sure the extension works,\n    split the single audio file that you want to play into two,\n    one for the left and another for the right audio channel,\n    drag the left channel audio to iChannel0, and right channel audio to iChannel1,\n    then, finally, rewind the playback for both audio channels to sync.\n*/\n\n/*\n    MIT License\n\n    Copyright (c) 2022 shyshokayu\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the Software), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, andor sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\n/*\n    Feel free to make your own music/art with this shader,\n    but don't forget to provide credit to me for making this framework.\n*/\n\n/*\n    ---| Go to Common tab to play with sound |---\n*/\n\n#define VISUAL_LINE_COLOR vec3(0.4, 1.0, 0.4)\n#define VISUAL_LINE_BLUR 2.0\n#define VISUAL_LINE_BRIGHTNESS 2000.0\n\n// The shadertoy audio waveform texture format is fixed to 512, so don't touch this. (As of 2022)\n#define VISUAL_ITERATIONS 512 // Number of iterations to draw the whole line for the current frame\n\n#define map(a, b, x) (((x) - (a)) / ((b) - (a)))\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define linearstep(a, b, x) saturate(map(a, b, x))\n#define cmix(a, b, x) mix(a, b, saturate(x))\n\n#define steprange(a, b, t) (step(a, t) * step(t, b))\n\n#define lengthSqr(v) dot(v, v)\n\nfloat sliderPointLine(in vec2 a, in vec2 b, in vec2 p) {\n    vec2 ab = b - a;\n    return dot(p - a, ab) / dot(ab, ab);\n}\n\nvec2 closestPointLine(in vec2 a, in vec2 b, in float d) {\n    return mix(a, b, saturate(d));\n}\n\nvec2 closestPointLine(in vec2 a, in vec2 b, in vec2 p) {\n    return closestPointLine(a, b, sliderPointLine(a, b, p));\n}\n\nfloat distToLineSqr(in vec2 a, in vec2 b, in vec2 p, in float k) {\n    vec2 d = p - closestPointLine(a, b, k);\n    return dot(d, d);\n}\n\nfloat distToLineSqr(in vec2 a, in vec2 b, in vec2 p) {\n    vec2 d = p - closestPointLine(a, b, p);\n    return dot(d, d);\n}\n\nfloat distToLine(in vec2 a, in vec2 b, in vec2 p) {\n    return sqrt(distToLineSqr(a, b, p));\n}\n\nvec2 pointTex(in float t) {\n    vec2 p = vec2(texture(iChannel0, vec2(t, 1.0)).x, texture(iChannel1, vec2(t, 1.0)).x);\n    p.x = mix(p.x, 0.5, step(p.x, 0.001));\n    p.y = mix(p.y, 0.5, step(p.y, 0.001));\n    p = (p * 4.0) - 2.0;\n    return p;\n}\n\nfloat imageVectorScopeLine(in vec2 a, in vec2 b, in vec2 p) {\n    float d = 0.01 + lengthSqr(a - b); // Emit less light if line is longer\n    float s = saturate(sliderPointLine(a.xy, b.xy, p));\n    float ld = distToLineSqr(a.xy, b.xy, p, s);\n    return min((0.00000004 / ((ld + (VISUAL_LINE_BLUR * 0.00001)) * d)), 0.2) * VISUAL_LINE_BRIGHTNESS;\n}\n\nfloat imageVectorScopeLines(in vec2 uv) {\n    float v = 0.0; // Total value\n    float lv = 0.0; // Last value\n    float cv = 0.0; // Current value\n    \n    vec2 lp = pointTex(0.0);\n    vec2 cp;\n    \n    float fv = 1.0 / float(VISUAL_ITERATIONS);\n    float k;\n    \n    for(int i = 0; i < VISUAL_ITERATIONS; ++i) {\n        k = float(i) * fv;\n        cp = pointTex(k); // Get the point\n        cv = imageVectorScopeLine(lp.xy, cp.xy, uv) * (1.0 - k);\n        v += max(cv, lv);\n        lv = cv;\n        lp = cp;\n    }\n    \n    return v * fv;\n}\n\nvec3 imageVectorScope(in vec2 uv, in float un) {\n    vec3 col = vec3(0.0);\n\n    // Lines\n    float v = imageVectorScopeLines(uv);\n    vec3 emitCol = pow(v * 0.5, 0.5) * VISUAL_LINE_COLOR;\n\n    // Grid\n    vec3 surfaceCol = vec3(1.0);\n    float gridLineSize = 0.015;\n    float gridSize = 4.0;\n    float gridV =  0.1 * (max(max(smoothstep(gridLineSize + un, gridLineSize, fract(uv.x * gridSize)), smoothstep((1.0 - gridLineSize) - un, 1.0 - gridLineSize, fract(uv.x * gridSize))), max(smoothstep(gridLineSize + un, gridLineSize, fract(uv.y * gridSize)), smoothstep((1.0 - gridLineSize) - un, 1.0 - gridLineSize, fract(uv.y * gridSize)))));\n    surfaceCol = mix(surfaceCol, vec3(2.0), gridV);\n\n    // Ambient light                                                           Inner display tube light absorption?\n    vec3 lightCol = vec3(0.045) * max(0.0, dot(uv + 0.5, vec2(0.12, 0.15) * 4.0)) * linearstep(-0.5, 3.0, length(uv));\n\n    // Color compositing\n    col = surfaceCol * lightCol;\n    col += emitCol * (1.0 - gridV);\n\n    // Cut out to make a square view\n    col *= step(abs(uv.x), 1.0) * step(abs(uv.y), 1.0);\n\n    return col;\n}\n\nfloat imageOscilloscopeLine(in vec2 a, in vec2 b, in vec2 p) {\n    const float ta = 0.0;\n    const float tb = 0.004;\n    const float dta = ta * ta;\n    const float dtb = tb * tb;\n    float s = saturate(sliderPointLine(a.xy, b.xy, p));\n    float ld = distToLineSqr(a.xy, b.xy, p, s);\n    return linearstep(dtb, dta, ld);\n}\n\nvec3 oscilloscopePoint(float x) {\n    return vec3(x, pointTex(1.0 - ((x * 0.5) + 0.5)));\n}\n\nvec3 imageOscilloscope(in vec2 uv, in float un) {\n    const float segments = 250.0;\n    const float thickness = 1.0 / segments;\n    const float gridThickness = 0.001;\n    const float gridInterval = 2.0;\n    float ip = round(uv.x * segments);\n    float unit = 1.0 / segments;\n\n    vec3 p0 = oscilloscopePoint((ip - 2.0) * unit),\n         p1 = oscilloscopePoint((ip - 1.0) * unit),\n         p2 = oscilloscopePoint((ip) * unit),\n         p3 = oscilloscopePoint((ip + 1.0) * unit),\n         p4 = oscilloscopePoint((ip + 2.0) * unit);\n\n    float dist1 = min(min(distToLine(p0.xy, p1.xy, uv), distToLine(p1.xy, p2.xy, uv)),\n                      min(distToLine(p2.xy, p3.xy, uv), distToLine(p3.xy, p4.xy, uv))) - thickness;\n    \n    float dist2 = min(min(distToLine(p0.xz, p1.xz, uv), distToLine(p1.xz, p2.xz, uv)),\n                      min(distToLine(p2.xz, p3.xz, uv), distToLine(p3.xz, p4.xz, uv))) - thickness;\n    \n    vec3 col = vec3(0.0);\n    \n    col += vec3(0.8, 0.2, 0.2) * smoothstep(un, -un, dist1);\n    col += vec3(0.2, 0.2, 0.8) * smoothstep(un, -un, dist2);\n\n    // Cut out to make a square view\n    col *= step(abs(uv.x), 1.0) * step(abs(uv.y), 1.0);\n    \n    return col;\n}\n\nvec3 aces(vec3 x) {\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 o, in vec2 u) {\n    float un = 1.0 / min(iResolution.x, iResolution.y);\n    un *= 2.0;\n    \n    vec2 uv = (u - (0.5 * iResolution.xy)) * un;\n    \n    vec3 col = mix(\n        imageVectorScope(uv, un),\n        imageOscilloscope(uv, un),\n        texelFetch(iChannel3, ivec2(69, 2), 0).x // nice\n    );\n\n    col = pow(col, vec3(1.0 / 1.2));\n\n    col = aces(col);\n\n    // Full depth dithering, a way to make your images less bandy in low color ranges.\n    // Since we're using floats here, we can use that as an opportunity to dither that to the common color format, 32bit rgba.\n    // Essentially for free.\n    float depth = 256.0;\n    vec3 cd = col * depth;\n    vec3 di = floor(cd);\n    vec3 df = cd - di;\n    vec3 ditheredCol = (step(texture(iChannel2, u * 0.125).x + 0.00001, df) + di) / depth;\n    \n    o = vec4(ditheredCol, 1.0);\n\n    // Just uncomment this line and see how much of a difference this dithering makes in the dark areas.\n    //o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}