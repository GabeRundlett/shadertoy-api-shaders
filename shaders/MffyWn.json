{
    "Shader": {
        "info": {
            "date": "1721002344",
            "description": "Inspired by Chris Foss colors and patterns.",
            "flags": 32,
            "hasliked": 0,
            "id": "MffyWn",
            "likes": 50,
            "name": "Spaceship Generator",
            "published": 3,
            "tags": [
                "space",
                "scifi",
                "spaceship"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 356
        },
        "renderpass": [
            {
                "code": "\n// Spaceship Generator\n// 2024-07-15 Leon Denise\n\n// edited 2024-07-15: added reprojection TAA\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nmat2 rot (float a) { float c=cos(a),s=sin(a);return mat2(c,-s,s,c); }\n\nmat3 look(vec3 z)\n{\n    vec3 x = normalize(cross(z, vec3(0,1,0)));\n    vec3 y = normalize(cross(x, z));\n    return mat3(x,y,z);\n}\n\nfloat gyroid (vec3 p) { return dot(cos(p),sin(p.yzx)); }\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n// Inigo Quilez https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n// Spaceship Generator\n// 2024-07-15 Leon Denise\n\n// space ship seed\nconst float seed = 196.;\n#define animate\n\n// globals\nvec3 coord, dither;\nfloat disp, glitch;\nfloat mat;\n\n// noise\nfloat fbm(vec3 p) {\n    float result = 0., a = .5;\n    for (float i = 0.; i < 5.; ++i) {\n        p += result*.1;\n        result += abs(atan(gyroid(p/a))*a);\n        a /= 2.;\n    }\n    return result;\n}\n\n// sky\nvec3 get_sky(vec3 p) {\n\n    // cosmic dust\n    vec2 e = vec2(0.5,0)+.1*dither.y;\n    #define T(u) fbm(p+u)\n    vec3 normal = normalize(T(0.)-vec3(T(e.xyy),T(e.xyx),T(e.xxy)));\n    vec3 color = .5 + .5 * cos(vec3(1,2,3)*5.5+normal.x*.7+4.);\n    color *= smoothstep(-2.0,2.0,-abs(normal.z)+.5+dither.x);\n    normal.yz *= rot(.5);\n    color += (normal.y)*.2;\n    \n    // stars\n    for (float i = 1.; i < 8.; ++i) {\n        vec3 q = p*10.*i;\n        vec3 rng = hash33(floor(q)+196.);\n        float dist = length(fract(q)-.5)*2.;\n        float threshold = step(.95,rng.x);\n        float light = (1.-sqrt(dist))*.1/dist;\n        color += vec3(threshold*clamp(light,0.,1.)/2.);\n    }\n    \n    return color;\n}\n\n// spaceship sdf\nfloat map (vec3 p)\n{\n    float dist = 100.;\n    vec3 pos = p;\n    \n    // animate seed\n    float t = seed;\n    #ifdef animate\n    t += floor(iTime/5.+glitch*.1)*32.;\n    #endif\n    \n    // pattern details\n    vec3 q = p;\n    q.xy *= rot(.9);\n    q.xz *= rot(.5);\n    q = (abs(fract(q*2.)-.5))*2.;\n    float s = max(q.x,max(q.y,q.z));\n    \n    // kaleidoscopic space folding\n    float a = 1.;\n    vec3 e = vec3(.5,.1,.1);\n    for (float i = 0.; i < 4.; ++i)\n    {\n        p = p-clamp(p,-e*a,e*a);\n        p.xz = abs(p.xz)-.5*a;\n        p.xz *= rot(t*a);\n        p.yz *= rot(t*a);\n        a /= 1.8;\n    }\n    \n    // spaceship\n    dist = sdBox(p,vec3(.065));\n    \n    // details displace\n    dist += abs(fract(abs(s)*10.)-.5)*.01;\n    \n    // joints\n    dist = min(dist, length(p.xz)-.005);\n    dist = min(dist, length(p.yz)-.005);\n    dist = min(dist, length(p.yx)-.005);\n    \n    coord = p;\n    disp = s;\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0.25);\n    \n    // coordinages\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 cam = vec3(0,1,-3.);\n    vec3 ray = normalize(vec3(p,1.));\n    \n    // blue noise scroll https://www.shadertoy.com/view/tlySzR\n    ivec2 pp = ivec2(fragCoord);\n    pp = (pp+(int(iFrame))*ivec2(113,127)) & 1023;\n    dither = texelFetch(iChannel1,pp,0).xyz;\n    \n    // glitch\n    vec4 rng = hash41(floor(iTime*10.));\n    glitch = hash33(vec3(floor(uv*40.*rng.xy*vec2(1.,3.)), 0.)).x;\n    \n    if (iMouse.z > 0.)\n    {\n        // mouse control\n        vec2 mouse = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n        cam.yz *= rot(-mouse.y);\n        cam.xz *= rot(mouse.x);\n    }\n    else\n    {\n        // turn table animation\n        cam.xz *= rot(iTime/16.);\n        cam.y += sin(iTime/10.)*.5;\n    }\n    \n    \n    // camera rotation\n    ray = look(normalize(-cam)) * ray;\n    vec3 pos = cam + ray * dither.z * .1;\n    \n    // raymarch\n    float ratio = 1.;\n    float total = 0.;\n    for (ratio = 1.; ratio > 0.; ratio -= 1./200.)\n    {\n        float dist = map(pos);\n        if (dist < 0.001 * total || total > 10.) break;\n        dist *= 0.9 + 0.1 * dither.z;\n        pos += ray * dist;\n        total += dist;\n    }\n    \n    if (total < 10.)\n    {\n        vec3 c = coord;\n        float d = disp;\n        float m = mat;\n        \n        // lighting \n        vec2 e = vec2(.001,0);\n        vec3 normal = normalize(map(pos)-vec3(map(pos+e.xyy),map(pos+e.yxy),map(pos+e.yyx)));\n        vec3 rf = reflect(ray, normal);\n        float light = clamp(dot(rf, normalize(vec3(0,.1,-1)))*.5+.5,0.,1.);\n        \n        // patterns\n        vec3 q = (abs(fract(c*20.)-.5))*2.;\n        float s = max(q.x,max(q.y,q.z));\n        vec3 tint = .5+.5*cos(vec3(1,2,3)*5.+floor(s*8.)/3.+5.);\n        float pattern = smoothstep(.01,.0,abs(fract(abs(d)*2.)-.5)-.2);\n\n        // coloring\n        color = tint*pattern;\n        color += pow(light, 4.);\n        color += get_sky(rf)*(1.-pattern);\n        color *= ratio;\n    }\n    else\n    {\n        // background\n        color = get_sky(ray);\n    }\n    \n    if (fragCoord.y < 1.)\n    {\n        if (fragCoord.x < 1.) color = cam;\n    }\n    else if (fragCoord.y < 2.)\n    {\n        if (fragCoord.x < 1.) color = texelFetch(iChannel0, ivec2(0,0), 0).xyz;\n    }\n    \n    fragColor = vec4(color, total);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// Minimal Temporal Anti Aliasing\n// https://www.elopezr.com/temporal-aa-and-the-quest-for-the-holy-trail/\n\n// from P_Malin https://www.shadertoy.com/view/4dlyWX\nvec2 world_to_uv(vec3 world, vec3 cam_pos, vec3 cam_target, vec2 aspect)\n{\n    vec3 z = world - cam_pos;\n    vec3 cam = z * look(normalize(cam_target-cam_pos));\n    vec2 screen = cam.xy / cam.z;\n    return (screen/aspect)*.5+.5;\n}\n\nvec2 reproject_uv(vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1);\n    vec4 frame = texture(iChannel0, uv);\n    \n    // camera positions between frames\n    vec3 cam_pos_now = texelFetch(iChannel0, ivec2(0,0), 0).xyz;\n    vec3 cam_pos_prev = texelFetch(iChannel0, ivec2(0,1), 0).xyz;\n    \n    // camera constants\n    vec3 cam_target = vec3(0);\n    vec3 cam_ray_now = normalize(vec3(p,1.));\n    cam_ray_now = look(normalize(-cam_pos_now)) * cam_ray_now;\n    \n    // reproject depth to get world pos\n    vec3 world_now = cam_pos_now + cam_ray_now * frame.a;\n    \n    // world pos to previous camera screen space\n    return world_to_uv(world_now, cam_pos_prev, cam_target, aspect);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // blue noise scroll https://www.shadertoy.com/view/tlySzR\n    ivec2 pp = ivec2(fragCoord);\n    pp = (pp+(int(iFrame))*ivec2(113,127)) & 1023;\n    vec3 dither = texelFetch(iChannel2,pp,0).xyz;\n    uv += 1.*(dither.xy-.5)/iResolution.xy;\n    \n    // reprojected previous frame\n    vec2 uv_prev = reproject_uv(fragCoord.xy);\n    vec3 temporal = texture(iChannel1, uv_prev).rgb;\n    \n    vec3 color = texture(iChannel0, uv).rgb;\n    vec3 minColor = vec3(9999.), maxColor = vec3(-9999.);\n    for(int x = -1; x <= 1; ++x){\n        for(int y = -1; y <= 1; ++y){\n            vec3 c = texture(iChannel0, uv + vec2(x, y) / iResolution.xy).rgb;\n            minColor = min(minColor, c);\n            maxColor = max(maxColor, c);\n        }\n    }\n    temporal = clamp(temporal, minColor, maxColor);\n    fragColor.rgb = mix(color, temporal, 0.9);\n    fragColor.a = 1.0;\n    \n    //fragColor = vec4(screen, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}