{
    "Shader": {
        "info": {
            "date": "1707364369",
            "description": "transition",
            "flags": 0,
            "hasliked": 0,
            "id": "M3sGWn",
            "likes": 2,
            "name": "Ornate transition",
            "published": 3,
            "tags": [
                "transition"
            ],
            "usePreview": 0,
            "username": "zadkielmodeler",
            "viewed": 123
        },
        "renderpass": [
            {
                "code": "\n\nvec2 tile (vec2 uv) {\n    // Scale UV to [0,2] range instead of [0,1] to cover 4 tiles\n    uv *= 2.0;\n    \n    // Determine which quadrant the current fragment is in\n    bool isRight = uv.x > 1.0;\n    bool isTop = uv.y > 1.0;\n    \n    // Flip UV coordinates based on quadrant\n    if (isRight) {\n        uv.x = 2.0 - uv.x; // Flip X for right quadrants (2 and 4)\n    }\n    if (isTop) {\n        uv.y = 2.0 - uv.y; // Flip Y for top quadrants (3 and 4)\n    }\n    \n    // Adjust UV to [0,1] range for each quadrant\n    uv = fract(uv);\n    \n    return uv;\n}\n\nvec3 normalizeColor(in float r, in float g, in float b)\n{\n    return vec3(r/255.0, g/255.0, b/255.0);\n}\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\n\nvec3 decreaseSaturation(vec3 color, float saturationAmount) {\n    // Calculate the luminance of the color\n    float luminance = dot(color, vec3(0.299, 0.587, 0.114));\n    \n    // Create the grayscale version of the color\n    vec3 grayscale = vec3(luminance); // RGB all have the same value, resulting in a shade of gray\n    \n    // Blend the original color with its grayscale version\n    // Lower saturationAmount values will result in less saturation (closer to grayscale)\n    vec3 desaturatedColor = mix(color, grayscale, saturationAmount);\n    \n    return desaturatedColor;\n}\n\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvec3 sparkle(vec2 uv, vec2 uv0)\n{\n   float time = iTime/4.;\n   uv0 = tile(uv0);\n   uv = tile(uv);\n   vec3 color2 = vec3(0.0);\n   for( float i = 0.0; i < 4.0; i++)\n   {\n       uv = fract(uv * 1.5) - 0.5;\n\n       float d = length(uv); ///distance to center of local circle\n       d = d*exp(-length(uv0));\n\n       float ringThickness = 6.0;\n       float frequency = 12.;\n       d = sin(d * frequency + time) / ringThickness;\n       d = abs(d);\n\n       //Invert the color\n       d = 0.004/ d;\n       \n       d = pow(d,1.2);\n\n\n        //sharpen the ring\n     //  d = smoothstep(0.0,0.1,d);\n\n\n        vec3 color = palette(length(uv0) - time*.4 - i*.4);\n\n        color2 += color * d;\n    }\n    vec3 gold = normalizeColor(255. ,215. ,0.);\n    color2 = mix(color2,gold,0.2);\n    return color2;\n}\n\nvec3 sparkle2(vec2 uv, vec2 uv0)\n{\n   float time = iTime/3.;\n   vec3 color2 = vec3(0.0);\n   for( float i = 0.0; i < 4.0; i++)\n   {\n       uv = fract(uv * 1.5) - 0.5;\n\n       float d = length(uv); ///distance to center of local circle\n       d = d*exp(-length(uv0));\n\n       float ringThickness = 6.0;\n       float frequency = 12.;\n       d = sin(d * frequency + time) / ringThickness;\n       d = abs(d);\n\n       //Invert the color\n       d = 0.002/ d;\n       \n       d = pow(d,1.2);\n\n\n        //sharpen the ring\n     //  d = smoothstep(0.0,0.1,d);\n\n\n        vec3 color = palette(length(uv0) - time*.4 - i*.4);\n\n        color2 += color * d;\n    }\n    vec3 gold = normalizeColor(255. ,215. ,0.);\n    color2 = mix(color2,gold,0.2);\n    return color2;\n}\n\n\n\nvec3 sparkleTiles(vec2 uv, vec2 uv0, float fractamount, float loops)\n{\n   float time = iTime/1.5;\n   uv0 = fract(uv0 * fractamount);\n   uv = fract(uv0*fractamount);\n   vec3 color2 = vec3(0.0);\n   for( float i = 0.0; i < loops; i++)\n   {\n       uv = fract(uv * 1.5) - 0.5;\n       vec2 uv2 = fract(uv * 1.) - 0.5;\n       uv = mix(uv,uv2,0.5);\n\n       float d = length(uv); ///distance to center of local circle\n       d = d*exp(-length(uv0));\n\n       float ringThickness = 6.0;\n       float frequency = 12.;\n       d = sin(d * frequency + time) / ringThickness;\n       d = abs(d);\n\n       //Invert the color\n       d = 0.007/ d;\n       \n       d = pow(d,1.2);\n\n\n        //sharpen the ring\n       float x = smoothstep(0.0,0.5,d);\n       d = mix(d,x,0.1);\n\n\n        vec3 color = palette(length(uv0) - time*.4 - i*.4);\n\n        color2 += color * d;\n        time += 0.2;\n    }\n    vec3 gold = normalizeColor(255. ,215. ,0.);\n    color2 = mix(color2,gold,0.3);\n    return color2;\n}\n\n\nvec3 sparkleTilesColor(vec2 uv, vec2 uv0)\n{\n   vec3 finalColor = sparkleTiles(uv, uv0,2.,4.);\n   //vec3 color2 = sparkleTiles(uv,uv0,2.,4.);\n   \n   //finalColor = mix(finalColor, color2, 0.5);\n   \n\n   vec3 desat = decreaseSaturation(finalColor,0.25);\n   \n   return desat;\n}\n\n\nvec3 sparkleBG (vec2 uv, vec2 uv0)\n{\n\n   \n   vec3 finalColor = sparkle(uv, uv0);\n   vec3 other = sparkle2(uv,uv0);\n   \n   //finalColor = mix(finalColor,other, 0.5);\n   //finalColor = other;\n   \n   return finalColor;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n   //uv = tile(uv);\n   vec2 uv0 = uv; //global distance to center of canvas\n   \n\n    vec3 sparklyTiles = sparkleTilesColor(uv,uv0);\n    vec3 sparklyBG = sparkleBG(uv,uv0);\n    \n    //vec3 finalColor = mix(sparklyTiles,sparklyBG,0.5);\n    vec3 finalColor = sparklyTiles;\n    \n    finalColor.r = finalColor.r * finalColor.b; \n    finalColor.g = finalColor.b * finalColor.g; \n    finalColor.b = finalColor.g * finalColor.r; \n\n    // Output to screen\n    fragColor = vec4(finalColor,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}