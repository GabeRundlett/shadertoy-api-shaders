{
    "Shader": {
        "info": {
            "date": "1716918590",
            "description": "A grid made out of 2 sets of parallel lines, works by finding the centre of the quadrilateral that u is contained in. Hopefully the comments make some sense\n\nI think floor(d1/k) and floor(d2/k) could be used for IDs\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XX33DS",
            "likes": 13,
            "name": "Quadrilateral Grid",
            "published": 3,
            "tags": [
                "grid",
                "math",
                "linearalgebra"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "// Simple version:\n// https://www.shadertoy.com/view/43c3WB\n\n#define pi 3.14159\n#define dir(a) vec2(cos(a),sin(a))\n#define normal(v) vec2(-v.y, v.x)\n\nvoid mainImage( out vec4 o, vec2 u )\n{\n    vec2 R = iResolution.xy;\n    u = (u+u-R)/R.y; \n    \n    // Space between parallel lines\n    float k = .4;\n    \n    // Line coefficients: L1 = a1 + t * b1, \n    //                    L2 = a2 + s * b2\n    // (b1, b2 are unit vectors)\n    vec2 a1 = vec2(0), b1 = dir(.6*cos(iTime)), \n         a2 = vec2(0), b2 = dir(.1 * iTime);\n            \n    // Unit normals\n    vec2 n1 = normal(b1),\n         n2 = normal(b2);\n    \n    // Signed distances from u to lines L1, L2\n    float d1 = dot(n1, u - a1),\n          d2 = dot(n2, u - a2);\n          \n    // Offset the lines L1, L2 in the normal direction\n    //  e.g. u lies between L3 = L1 + floor(d1/k) * k * n1\n    //                  and L4 = L1 +  ceil(d1/k) * k * n1\n    //  we pick the centre line C1 = (L3 + L4) / 2,\n    //  do the same for L2 to find a centre line C2\n    //  then find the centre of the quadrilateral by\n    //  intersecting C1 and C2\n    a1 += (floor(d1 / k)+.5) * k * n1,\n    a2 += (floor(d2 / k)+.5) * k * n2;\n         \n    // Centre of region bounded by 4 closest lines\n    //  i.e. intersect lines C1 = a1 + t * b1 + offset1 * n1\n    //                   and C2 = a2 + s * b2 + offset2 * n2\n    vec2 centre = a1 + dot(a2-a1,n2) / dot(b1,n2) * b1;\n    \n    float d = length(u - centre);\n    o = 0.*o + cos(160.*d) * exp(-8.*d*d);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}