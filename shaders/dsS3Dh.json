{
    "Shader": {
        "info": {
            "date": "1667586942",
            "description": "Move the mouse to see the perspective better",
            "flags": 0,
            "hasliked": 0,
            "id": "dsS3Dh",
            "likes": 16,
            "name": "Cloudy moonlight",
            "published": 3,
            "tags": [
                "volume",
                "clouds",
                "fbm",
                "sky",
                "volumetric",
                "moon",
                "night"
            ],
            "usePreview": 1,
            "username": "kishimisu",
            "viewed": 1384
        },
        "renderpass": [
            {
                "code": "/* I got the idea to create this shader after observing the moon \n   on a cloudy night a few days ago, and also because I really \n   like to explore volume rendering right now.\n   \n   I started by calculating and marching real light samples \n   but this decreased the performances a lot and I wanted it \n   to be accessible, so I replaced it with a fake light which\n   intensity is mapped to the distance from the camera.\n   \n   You can move the camera with the mouse to better see the perspective.\n   To see the entire \"scene\", set BEHIND_THE_SCENE to 1 =)\n   \n   Also I tried to add stars in the background (line 123) but I got\n   heavy flickering when moving the camera. Does someone know a proper \n   way to add stars without having this visual artefact ?   \n*/\n\n#define CLOUDS_SMOOTHNESS 1.5\n#define LIGHT_INTENSITY   20.\n#define ABSORPTION        5.5\n#define VOLUME_STEPS      40.\n\n#define BEHIND_THE_SCENE  0\n\n#define PI 3.141592\n#define hash33(p) fract(sin( (p) * mat3( 127.1,311.7,74.7 , 269.5,183.3,246.1 , 113.5,271.9,124.6) ) * 43758.5453123)\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// noise and fbm are from https://www.shadertoy.com/view/XtS3DD\nfloat noise(in vec3 p) {\n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n\tfp = fp*fp*(3.0-2.0*fp);\n\tvec2 tap = (ip.xy+vec2(37.0,17.0)*ip.z) + fp.xy;\n\tvec2 rz = textureLod(iChannel0, (tap+0.5)/256.0, 0.0).yx;\n\treturn mix(rz.x, rz.y, fp.z);\n}\n\nfloat fbm(in vec3 x) {   \n    float rz = 0.;\n    float a = .35;\n    for (int i = 0; i<4; i++) {\n        rz += noise(x)*a;\n        a*=.35;\n        x*= 4.;\n    }\n    return rz - .25;\n}\n\nvec2 boxIntersection(in vec3 ro, in vec3 rd) {\n    vec3 rad = vec3(6., 6., 2.);\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(-1.0); // no intersection   \n    return vec2( tN, tF );\n}\n\nvoid marchVolume(vec3 ro, vec3 rd, float near, float far, inout vec3 color) {    \n    vec3 vColor = vec3(0.);\n    float visibility = 1.;\n    \n    float inside = far - near + hash33(ro).x*.01;\n    float stepSize = inside / VOLUME_STEPS;\n    float i = 0.;\n    \n    for (float t = near; t <= far; t += stepSize) {\n        vec3 p = ro + t*rd;\n        \n        float s = CLOUDS_SMOOTHNESS*.01;\n        float dens = smoothstep(-s, s, fbm(p + vec3(iTime*.055, iTime*.065, 1.+iTime*.02)))*.1;\n        \n        float prev = visibility;\n        visibility *= exp(-stepSize*dens*ABSORPTION);\n        \n        float absorption = prev - visibility;\n        float light = smoothstep(2.5, 6.5, p.z); // fake light\n        vColor += absorption * dens * light * LIGHT_INTENSITY;\n        \n        if (i++ > VOLUME_STEPS) break;\n    }\n    \n    color = min(vColor, 1.) + color * visibility;\n}\n\nvoid initCamera(vec2 fragCoord, inout vec3 ro, inout vec3 rd) {\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    vec2 m = iMouse.z == 0. ? vec2(.5) : iMouse.xy/iResolution.xy;\n    \n    ro = vec3(m.x-.5, m.y-.5, .01)*.8;\n\n    #if BEHIND_THE_SCENE\n    ro.x += 8.; ro.z -= 8.;\n    #endif\n    \n    vec3 f = normalize(vec3(0., 0., 1.) - ro*.05),\n         r = normalize(cross(vec3(0,1,0), f)),\n         u = cross(f,r),\n         c = ro+f,\n         i = c + uv.x*r + uv.y*u;    \n    rd = normalize(i-ro); // camera direction\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 ro, rd;   \n    initCamera(fragCoord, ro, rd);\n    \n    // moon\n    float moon = dot(rd, vec3(0., 0., 1.));\n    vec3 color = (.7-fbm(rd*10.)*3.) * vec3(smoothstep(.995, .9955, moon));\n    color += (1.25-color)*pow(moon+.1, 6.)*.25;\n    \n    // stars (removed due to flickering)\n    vec3 h = hash33(vec3(floor(rd.xy*80.), 0.));\n    float stars = length(fract(rd.xy*80. + h.xy*.75)-.5);\n    // color += .006/stars * h.z;\n    \n    // clouds\n    vec2 hit = boxIntersection(ro - vec3(0., 0., 4.), rd);\n    marchVolume(ro, rd, hit.x, hit.y, color);\n        \n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}