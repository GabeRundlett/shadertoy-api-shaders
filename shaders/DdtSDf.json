{
    "Shader": {
        "info": {
            "date": "1680554172",
            "description": "Gradient orb",
            "flags": 0,
            "hasliked": 0,
            "id": "DdtSDf",
            "likes": 7,
            "name": "Gradient orb",
            "published": 3,
            "tags": [
                "gradient",
                "orb"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "const uint MAX_RAY_MARCH_STEPS = 32u;\nconst float MAX_DISTANCE = 1.0;\nconst float SURFACE_DISTANCE = 0.01;\nconst float HALF_PI = 1.57079632679;\n\nstruct Ray\n{\n    vec3 pos;\n    vec3 dir;\n};\n\nstruct Camera\n{\n    Ray ray;\n    float fov;\n};\nCamera camera;\n\nstruct Hit\n{\n    float dist;\n    float min_dist;\n    vec3 point;\n    vec3 normal;\n};\n    \nfloat specularBlinnPhong(vec3 light_dir, vec3 ray_dir, vec3 normal)\n{\n    return max(0.0, dot(normal, normalize(light_dir + ray_dir)));\n}\n\nvec4 perm(vec4 x) { x = ((x * 34.0) + 1.0) * x; return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat noise(vec3 p)\n{\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat fbm(vec3 p)\n{\n    return (noise(p * 1.4) + noise(p * 2.25 + 16.791) * 0.6 + noise(p * 3.375 - 31.613) * .35) * 0.6;\n}\n\nfloat SDF(vec3 point, float seed)\n{\n    return (dot(point, point) - 0.16 - fbm(vec3(point.xy, iTime * 0.25 + point.z) + seed) * 0.25) * 0.7;\n}\n\nHit raymarch(Ray ray, float seed)\n{\n    Hit hit;\n    hit.dist = 0.0;\n    hit.min_dist = MAX_DISTANCE;\n    hit.normal = vec3(0);\n    for (uint i = 0u; i < MAX_RAY_MARCH_STEPS; ++i)\n    {\n        hit.point = ray.pos + ray.dir * hit.dist; \n        float sdf = SDF(hit.point, seed);\n        hit.min_dist = min(hit.min_dist, sdf);\n        hit.dist += sdf;\n        if (hit.dist >= MAX_DISTANCE)\n            return hit;\n        if (abs(sdf) <= SURFACE_DISTANCE)\n        {\n            vec2 e = vec2(0.002, 0.0);\n            hit.normal = normalize(sdf - vec3(SDF(hit.point - e.xyy, seed), SDF(hit.point - e.yxy, seed), SDF(hit.point - e.yyx, seed)));\n            return hit;\n        }\n    }\n    \n    return hit;\n}\n\nvec4 getColor(Ray ray, vec3 color, float seed)\n{\n    vec3 col = vec3(0);\n    Hit hit = raymarch(ray, seed);\n    if (hit.normal != vec3(0))\n    {\n        vec3 n = abs(hit.normal + vec3(0, 0, 0.5));\n        col = normalize(color + n * n);\n        col += pow(specularBlinnPhong(normalize(vec3(100, 100, -100) - hit.point), normalize(camera.ray.pos - hit.point), hit.normal), 32.0) * 0.5;\n    }\n    else\n    {\n        col = vec3(pow(max(0.0, 1.0 - hit.min_dist), 16.0)) * color;\n        hit.dist = MAX_DISTANCE + 1.0 - max(0.0, 1.0 - hit.min_dist);\n    }\n    return vec4(col, hit.dist);\n}\n\n#define CMPSWAP(a, b) if (c[a].w > c[b].w) { vec4 temp = c[a]; c[a] = c[b]; c[b] = temp; }\n#define BLEND(a) if (c[a].w < MAX_DISTANCE) fragColor.rgb = mix(fragColor.rgb, c[a].rgb, 0.5);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;    \n    camera.fov = 90.0;\n    camera.ray.pos = vec3(0, 0, -1);\n    camera.ray.dir = vec3(0, 0, 1);\n    float fov = tan(HALF_PI - radians(camera.fov) * 0.5);\n    camera.ray.dir = normalize(vec3(uv, fov));\n    \n    vec4 c[] = vec4[](\n    getColor(camera.ray, vec3(1, 0.35, 1), 0.0)\n    ,getColor(camera.ray, vec3(0.1, 0.5, 1.0), 1000.612)\n    );\n    \n    CMPSWAP(0, 1)\n    \n    if (c[0].w >= MAX_DISTANCE)\n    {\n        fragColor = vec4(mix(c[0].rgb, c[1].rgb, 0.5), 1);\n        return;\n    }\n    \n    fragColor.rgb = c[0].rgb;\n    BLEND(1)\n    fragColor.rgb = sqrt(fragColor.rgb * 1.1 - .1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}