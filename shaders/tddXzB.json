{
    "Shader": {
        "info": {
            "date": "1572302654",
            "description": "Click on screen to get Shirley style sky background or unclicked as (Metzgar) Sky Dawn background",
            "flags": 0,
            "hasliked": 0,
            "id": "tddXzB",
            "likes": 2,
            "name": "Ray Tracer Week 1 Miss Shaders",
            "published": 3,
            "tags": [
                "raytracer",
                "sunfish"
            ],
            "usePreview": 0,
            "username": "microwerx",
            "viewed": 426
        },
        "renderpass": [
            {
                "code": "//////////////////////////////////////////////////////////////////////\n// S U N F I S H   R A Y   T R A C E R ///////////////////////////////\n//////////////////////////////////////////////////////////////////////\n// Copyright (C) 2018 Jonathan Metzgar                              //\n//////////////////////////////////////////////////////////////////////\n\nconst float FX_DEGREES_TO_RADIANS = 0.01745329;\nconst float FX_RADIANS_TO_DEGREES = 57.2957795;\n\n//////////////////////////////////////////////////////////////////////\n// C O L O R S ///////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////\n\n\nconst vec3 Black = vec3(0.0, 0.0, 0.0);\nconst vec3 White = vec3(1.0, 1.0, 1.0);\nconst vec3 Red = vec3(1.0, 0.0, 0.0);\nconst vec3 Orange = vec3(1.0, 0.5, 0.0);\nconst vec3 Yellow = vec3(1.0, 1.0, 0.0);\nconst vec3 YellowGreen = vec3(0.5, 1.0, 0.0);\nconst vec3 Green = vec3(0.0, 1.0, 0.0);\nconst vec3 GreenBlue = vec3(0.0, 1.0, 0.5);\nconst vec3 Cyan = vec3(0.0, 1.0, 1.0);\nconst vec3 BlueGreen = vec3(0.0, 0.5, 1.0);\nconst vec3 Blue = vec3(0.0, 0.0, 1.0);\nconst vec3 Purple = vec3(0.5, 0.0, 1.0);\nconst vec3 Magenta = vec3(1.0, 0.0, 1.0);\nconst vec3 Rose = vec3(1.0, 0.0, 0.5);\nconst vec3 ArneBlack = vec3(0.0, 0.0, 0.0);\nconst vec3 ArneGray = vec3(0.616, 0.616, 0.616);\nconst vec3 ArneWhite = vec3(1.0, 1.0, 1.0);\nconst vec3 ArneRed = vec3(0.745, 0.149, 0.2);\nconst vec3 ArneMeat = vec3(0.878, 0.435, 0.545);\nconst vec3 ArneDarkBrown = vec3(0.286, 0.235, 0.169);\nconst vec3 ArneBrown = vec3(0.643, 0.392, 0.133);\nconst vec3 ArneOrange = vec3(0.922, 0.537, 0.192);\nconst vec3 ArneYellow = vec3(0.969, 0.886, 0.42);\nconst vec3 ArneDarkGreen = vec3(0.184, 0.282, 0.306);\nconst vec3 ArneGreen = vec3(0.267, 0.537, 0.102);\nconst vec3 ArneSlimeGreen = vec3(0.639, 0.808, 0.153);\nconst vec3 ArneNightBlue = vec3(0.106, 0.149, 0.196);\nconst vec3 ArneSeaBlue = vec3(0, 0.341, 0.518);\nconst vec3 ArneSkyBlue = vec3(0.192, 0.635, 0.949);\nconst vec3 ArneCloudBlue = vec3(0.698, 0.863, 0.937);\nconst vec3 ArneDarkBlue = vec3(0.204, 0.165, 0.592);\nconst vec3 ArneDarkGray = vec3(0.396, 0.427, 0.443);\nconst vec3 ArneLightGray = vec3(0.8, 0.8, 0.8);\nconst vec3 ArneDarkRed = vec3(0.451, 0.161, 0.188);\nconst vec3 ArneRose = vec3(0.796, 0.263, 0.655);\nconst vec3 ArneTaupe = vec3(0.322, 0.31, 0.251);\nconst vec3 ArneGold = vec3(0.678, 0.616, 0.2);\nconst vec3 ArneTangerine = vec3(0.925, 0.278, 0);\nconst vec3 ArneHoney = vec3(0.98, 0.706, 0.043);\nconst vec3 ArneMossyGreen = vec3(0.067, 0.369, 0.2);\nconst vec3 ArneDarkCyan = vec3(0.078, 0.502, 0.494);\nconst vec3 ArneCyan = vec3(0.082, 0.761, 0.647);\nconst vec3 ArneBlue = vec3(0.133, 0.353, 0.965);\nconst vec3 ArneIndigo = vec3(0.6, 0.392, 0.976);\nconst vec3 ArnePink = vec3(0.969, 0.557, 0.839);\nconst vec3 ArneSkin = vec3(0.957, 0.725, 0.565);\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Payload {\n    vec3 N;\n};\n    \nPayload payload;\n\nRay sfCreateRay(vec3 origin, vec3 dir)\n{\n    Ray r;\n    r.origin = origin;\n    r.direction = normalize(dir);\n    return r;\n}\n\nRay sfCreateCameraRay(vec2 uv) {\n    vec3 eye = vec3(0.0, 0.0, 5.0);\n    vec3 center = vec3(0.0, 0.0, 0.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    float aspectRatio = iResolution.x / iResolution.y;\n    float fovy = 45.0;\n    \n    float theta = fovy * FX_DEGREES_TO_RADIANS;\n    float halfHeight = tan(theta / 2.0);\n    float halfWidth = aspectRatio * halfHeight;\n    float distanceToFocus = length(eye - center);\n    vec3 w = normalize(eye - center);\n    vec3 u = cross(up, w);\n    vec3 v = cross(w, u);\n    vec3 horizontal = 2.0 * distanceToFocus * halfWidth * u;\n    vec3 vertical = 2.0 * distanceToFocus * halfHeight * v;\n    vec3 lowerLeftCorner = eye\n        - (distanceToFocus*halfWidth) * u\n        - (distanceToFocus*halfHeight) * v\n        - distanceToFocus * w;\n    vec3 window = uv.s * horizontal + uv.t * vertical;\n    return sfCreateRay(eye, lowerLeftCorner + window - eye);\n}\n\nvec3 sfShadeSkyShirley(Ray r)\n{\n\tfloat t = 0.5 * (r.direction.y + 1.0);\n\treturn (1.0 - t) * ArneWhite + t * ArneSkyBlue;\n}\n\n\nvec3 sfShadeSkyDawn(Ray r)\n{\n\tfloat t = 0.5 * (r.direction.y + 1.0);\n\treturn (1.0 - t) * Orange + t * ArneSkyBlue;\n}\n\nvec3 sfMissShader(Ray r) {\n    if (iMouse.z > 0.1) return sfShadeSkyShirley(r);\n    return sfShadeSkyDawn(r);\n}\n\nvec3 sfRayTrace(vec2 uv) {\n    Ray r = sfCreateCameraRay(uv);\n    return sfMissShader(r);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = vec4(sfRayTrace(uv),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}