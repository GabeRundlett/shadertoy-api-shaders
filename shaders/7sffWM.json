{
    "Shader": {
        "info": {
            "date": "1644929517",
            "description": "Far away parts are very buggy (hence the dark fade), stilll some artifacts but you lose the feeling of being surrounded if you fade any more \n\n(messy code)",
            "flags": 0,
            "hasliked": 0,
            "id": "7sffWM",
            "likes": 15,
            "name": "Squiggle Ribbon",
            "published": 3,
            "tags": [
                "raymarching",
                "template",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 423
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 20.\n#define SURF_DIST .001\n\n//nabbed from blacklemori\nvec3 erot(vec3 p, vec3 ax, float rot) {\n  return mix(dot(ax, p)*ax, p, cos(rot)) + cross(ax,p)*sin(rot);\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 distort(vec3 p) {\n    float time = 3. * length(p) + 1.*iTime;//0. * length(p);\n    \n    float spd = 0.01;\n    float c = cos(time);\n    float c2 = cos(time + 2. * pi /3.);\n    float c3 = cos(time - 2. * pi / 3.);\n    //float s = thc(spd, pi/2. + time);\n    vec3 q = erot(vec3(c,c2,c3), normalize(vec3(c2,c3,c)), 0.5 * iTime + 3. * length(p));\n    return cross(p, q);\n}\n\nfloat GetDist(vec3 p) {\n   \n    \n    float sd = length(p - vec3(0, 3., -3.5)) - 1.2;\n    \n    //p = mix(sabs(p) - 0., sabs(p) - 1., 0.5 + 0.5 * thc(4., iTime));\n    \n    p = distort(p);\n    p.xz *= Rot(4. * p.y + iTime);\n    p = sabs(p) - 0.25;\n    float d = length(p) - 0.3;\n    d *= 0.05; //smaller than I'd ike it to be\n    d = -smin(-d, sd); \n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = z * GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3.5);\n   // ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.5;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        //vec3 r = reflect(rd, n);\n\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        vec3 pIn = p - 3. * SURF_DIST * n;\n        float dIn = RayMarch(pIn, rdIn, -1.);\n\n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = GetNormal(pExit);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        float fresnel = pow(1.+dot(rd, n), 1.);\n        col = 1. * vec3(fresnel);\n        \n       // vec3 q = distort(p);\n        col *= 2. + 1.8 * thc(10., 60. * length(p) - 1. * iTime);\n        col = clamp(col, 0., 1.);\n       // col *= 1.-exp(-0.5 - 0.5 * p.y);\n       // col *= 0.5 + 0.5 * n;\n        vec3 e = vec3(1.);\n        col *= pal(length(p) * 3. - 0.05 * iTime, e, e, e, 0.5 * vec3(0,1,2)/3.);\n        col = clamp(col, 0., 1.);\n        col *= exp(-1.2 * length(p));\n        col *= 3.;\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\n// (SdSmoothMin) stolen from here: https://www.shadertoy.com/view/MsfBzB\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}