{
    "Shader": {
        "info": {
            "date": "1682500639",
            "description": "I didn't find it in shadertoy, then tried to imitate and made one.  ( i just copy the function from unity )",
            "flags": 0,
            "hasliked": 0,
            "id": "cl3GW7",
            "likes": 2,
            "name": "Electric Current Mask ",
            "published": 3,
            "tags": [
                "electric",
                "current"
            ],
            "usePreview": 0,
            "username": "Ridah",
            "viewed": 180
        },
        "renderpass": [
            {
                "code": "float SimpleNoise_RandomValue_float (vec2 uv)\n{\n    float angle = dot(uv, vec2(12.9898, 78.233));\n    #if defined(SHADER_API_MOBILE) && (defined(SHADER_API_GLES) || defined(SHADER_API_GLES3) || defined(SHADER_API_VULKAN))\n        // 'sin()' has bad precision on Mali GPUs for inputs > 10000\n        angle = fmod(angle, TWO_PI); // Avoid large inputs to sin()\n    #endif\n    return fract(sin(angle)*43758.5453);\n}\nfloat SimpleNnoise_Interpolate_float (float a, float b, float t)\n{\n    return (1.0-t)*a + (t*b);\n}\nfloat SimpleNoise_ValueNoise_float (vec2 uv)\n{\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    f = f * f * (3.0 - 2.0 * f);\n\n    uv = abs(fract(uv) - 0.5);\n    vec2 c0 = i + vec2(0.0, 0.0);\n    vec2 c1 = i + vec2(1.0, 0.0);\n    vec2 c2 = i + vec2(0.0, 1.0);\n    vec2 c3 = i + vec2(1.0, 1.0);\n    float r0 = SimpleNoise_RandomValue_float(c0);\n    float r1 = SimpleNoise_RandomValue_float(c1);\n    float r2 = SimpleNoise_RandomValue_float(c2);\n    float r3 = SimpleNoise_RandomValue_float(c3);\n\n    float bottomOfGrid = SimpleNnoise_Interpolate_float(r0, r1, f.x);\n    float topOfGrid = SimpleNnoise_Interpolate_float(r2, r3, f.x);\n    float t = SimpleNnoise_Interpolate_float(bottomOfGrid, topOfGrid, f.y);\n    return t;\n}\nvoid SimpleNoise_float(vec2 UV, float Scale, out float Out)\n{\n    float t = 0.0;\n\n    float freq = pow(2.0, float(0));\n    float amp = pow(0.5, float(3-0));\n    t += SimpleNoise_ValueNoise_float(vec2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;\n\n    freq = pow(2.0, float(1));\n    amp = pow(0.5, float(3-1));\n    t += SimpleNoise_ValueNoise_float(vec2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;\n\n    freq = pow(2.0, float(2));\n    amp = pow(0.5, float(3-2));\n    t += SimpleNoise_ValueNoise_float(vec2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;\n\n    Out = t;\n}\nvoid Remap(vec4 In, vec2 InMinMax, vec2 OutMinMax, out vec4 Out)\n{\n    Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);\n}\nvoid Rectangle(vec2 UV, float Width, float Height, out float Out)\n{\n    vec2 d = abs(UV * 2. - 1.) - vec2(Width, Height);\n    d = 1. - d / fwidth(d);\n    Out = clamp(min(d.x, d.y),0.,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    //offset\n    float up = 0., down =0.;\n    SimpleNoise_float(uv+vec2(-0.5*iTime,iTime),10.,down);\n    SimpleNoise_float(uv+vec2(0.5*iTime,-1.*iTime),12.,up);\n    float noise = pow(up+down,2.);\n    Remap(vec4(noise),vec2(0.,1.),vec2(-10.,10.),fragColor);\n    Rectangle(fragColor.xy,1.,0.,noise);\n    fragColor = vec4(noise);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}