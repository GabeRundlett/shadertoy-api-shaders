{
    "Shader": {
        "info": {
            "date": "1707431359",
            "description": "Dosent Work that good on this image!!!",
            "flags": 0,
            "hasliked": 0,
            "id": "4XlGz8",
            "likes": 1,
            "name": "soft Light on images",
            "published": 3,
            "tags": [
                "light",
                "shadows"
            ],
            "usePreview": 1,
            "username": "SamKriki",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "//Pls use a diffrent image it doesnt look good on this on because a Light ray would make \n//no sense here. Try:\n//gShaderToy.SetTexture(0, {mSrc:'https://images.pexels.com/photos/162389/lost-places-old-decay-ruin-162389.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n\nconst float r = 0.11;   // How strong the white must be for the light \n\nfloat glow(vec2 dir, float steps, vec2 p,vec2 q){\n    float high = 0.0;\n    float ang = atan(abs(q.x),-q.y);\n    float stepsize = (1.0-p.y)/cos(ang)/steps;\n    float t = 0.;\n    for(float i = 0.0;i<steps;i++){\n        t = i * stepsize;\n        vec2 newp = p + dir * t;\n        vec4 tex = texture(iChannel0, newp);\n        high = max(high,(tex.x+tex.y,tex.z)/3.00);\n    }\n    \n    return smoothstep(0.31-r,0.31,high);\n    \n}\n\nfloat GetSoft(float steps,float size,float stepsize,vec2 dirq,vec2 dir,vec2 q,vec2 p){\n    \n    stepsize /= steps; \n    float Low = glow(dirq,size,p,q);\n    for(float i = 0.0;i<steps;i++){\n        vec2 newp = p + dir * stepsize * i - dir * stepsize * steps*0.5;\n        Low +=glow(dirq,size,newp,q);\n    \n    }\n    Low /= steps;\n    return Low;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    \n    vec2 q = p - vec2(0.5 + sin(iTime*0.5) *0.1,1.1);\n    \n  \n    vec4 col = texture(iChannel0, p);\n    \n    float steps = 500.;\n    vec2 dir = normalize(-q);\n    \n    \n    float ang = atan(abs(q.x),-q.y);\n    \n    vec2 newq = vec2((1.-p.y)*tan(ang),1.-p.y);\n    \n    \n    float ds = 0.01; //Größe der Schritte von Soft Schadow an der normale entlang\n    \n    float Amulti = 5.;\n    \n    \n    float a=atan(-q.x,-q.y) - iTime * 0.1 / Amulti;\n    float add = max(0.1/pow(length(p)*10., 1./20.), .0) + abs(cos(a*5.1 * Amulti + sin(a*2.*3.14159 * Amulti)))*0.2 * abs(cos(a*8.*Amulti));\n    \n    add *= glow(dir,steps,p,q);\n    add *= GetSoft(20.0,40.,ds,dir,normalize(q),q,p);\n    add *= smoothstep(0.,1.0,1.0 - (length(newq) + abs(sin(iTime*0.5 + ang * 10.)) * 0.25));\n    add *= 1. + sin(length(newq)*100. - iTime*1.0)*.4;\n    col += add;\n    \n    fragColor = vec4(col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}