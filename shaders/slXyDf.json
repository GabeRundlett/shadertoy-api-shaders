{
    "Shader": {
        "info": {
            "date": "1648798841",
            "description": "Simple Cartoon Style made with blur and blending techniques",
            "flags": 34,
            "hasliked": 0,
            "id": "slXyDf",
            "likes": 1,
            "name": "Quick Drawing Style Filter",
            "published": 3,
            "tags": [
                "cartoon",
                "line",
                "filter",
                "edgedetection",
                "drawing",
                "art",
                "comic",
                "lineart"
            ],
            "usePreview": 0,
            "username": "NakedBowman",
            "viewed": 609
        },
        "renderpass": [
            {
                "code": "float bw(vec3 color){\n    return (color.r+color.g+color.b)/ 3.;\n\n}\n\nvec3 post(vec3 color){\n    return floor(color*3.+0.5)/4.;\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 og = texture(iChannel0, uv).rgb;\n    \n    vec3 inv = vec3(1.) - texture(iChannel1, uv*1.0).rgb;\n\n    float ogBW = (vec3(bw(og))).r;\n    float inBW = (vec3(bw(inv))).r;\n    \n    vec3 doge =  vec3(min(1., inBW /  (1.0 - ogBW)));\n    vec3 linear = vec3(1. - min(1., (1. - doge.r) / ogBW));\n  \n    //add colour\n    vec3 final = mix(vec3(0.5,0.2,0.3), vec3(0.6,0.8,0.9), bw(linear));\n\n    // Output to screen\n    fragColor = vec4(vec3(final),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float kernelSize = 7.;\n    vec3 col = vec3(0.);\n    for(float i = 0.; i < kernelSize; i++){\n        float pointer = i - floor(kernelSize * 0.5);\n        col += texture(iChannel0, uv + vec2(i,0.0)/iResolution.xy ).rgb;\n    }\n    col/= kernelSize;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float kernelSize = 7.;\n    vec3 col = vec3(0.);\n    for(float i = 0.; i < kernelSize; i++){\n        float pointer = i - floor(kernelSize * 0.5);\n        col += texture(iChannel0, uv + vec2(0.0,i)/iResolution.xy ).rgb;\n    }\n    col/= kernelSize;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}