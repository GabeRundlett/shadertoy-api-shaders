{
    "Shader": {
        "info": {
            "date": "1693846182",
            "description": "Quick technique to be able to encode a 3D texture in a 2D Buffer, then to read it back\nWith raymarching exemples\n",
            "flags": 32,
            "hasliked": 0,
            "id": "mtjfzW",
            "likes": 2,
            "name": "3D Noise Buffer",
            "published": 3,
            "tags": [
                "raymarching",
                "clouds",
                "worleynoise",
                "3dtexture",
                "3dbuffer"
            ],
            "usePreview": 0,
            "username": "dominionxvii",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "vec4 ViewAsSlice(vec3 uv3, vec3 bufferSize)\n{\n    float x = Convert3DTo1D(uv3,  bufferSize);\n    vec2 uv3D = Convert1DTo2D(x, iResolution.xy) / iResolution.xy;\n    return vec4(texture(iChannel0, uv3D));\n}\n\nvec4 ViewAsRayMarching(vec2 uv, vec3 bufferSize, float density, int fbmCount, float dir)\n{\n    //view ray marching\n    int stepCount = 64;\n    float stepSize = 0.05;\n\n    vec3 ro = vec3(0, 0, dir * iTime * 1.5);   \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));;\n\n    vec4 colorSum = vec4(0);\n    for(int i = 0; i < stepCount; i++)\n    {\n        vec3 pos = ro + rd * float(i) * stepSize;\n\n        float noiseSize = 32.;\n        \n        float freq = 1.;\n        float amp = 1.;\n        \n        for(int j = 0; j < fbmCount; j++)\n        {\n            float x = Convert3DTo1D(pos * noiseSize * freq,  bufferSize);\n            vec2 channelResolution = iChannelResolution[0].xy;\n            vec2 uv3D = Convert1DTo2D(x, channelResolution.xy) / channelResolution.xy; //must match buffer A resolution\n            \n            vec4 sampleColor = vec4(texture(iChannel0, uv3D));\n            colorSum += sampleColor * stepSize * density * amp;\n            \n            freq *= 2.0;\n            amp *= 0.5;\n        }\n    }\n    \n    return colorSum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{     \n    vec3 bufferSize = vec3(64.); //must match Buffer A size's value\n\n    if(fragCoord.x < iResolution.x / 2.0)\n    {   \n        //view a slice\n        vec3 uv3 = vec3(fragCoord / 4., iTime * 16.);\n        fragColor = ViewAsSlice(uv3, bufferSize);\n    }\n    else \n    {       \n        vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n        bool upperHalf = (fragCoord.y > iResolution.y / 2.0);\n        int fbmCount = upperHalf ? 1 : 3;\n        float density = upperHalf ? 0.5 : 0.25;\n        float dir = upperHalf ? -1. : 1.;\n        fragColor = ViewAsRayMarching(uv, bufferSize, density, fbmCount, dir);     \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 size = vec3(64.);\n    float zoom = 1.0 / 16.;\n    \n    float i = Convert2DTo1D(fragCoord, iResolution.xy);\n    vec3 pos = Convert1DTo3D(i, size.xyz);\n    \n    float noise = PeriodicalCellularNoise(pos, zoom, size);\n    fragColor = vec4(1. - noise, 0, 0 ,0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float Repeat(float t, float len)\n{\n    return clamp(t - floor(t / len) * len, 0., len);\n}\nvec2 Repeat(vec2 t, vec2 size)\n{\n    return vec2(Repeat(t.x, size.x), Repeat(t.y, size.y));\n}\n\nvec3 Repeat(vec3 t, vec3 size)\n{\n    return vec3(\n        Repeat(t.x, size.x),\n        Repeat(t.y, size.y),\n        Repeat(t.z, size.z)\n    );\n}\n\n// RNG\nuint WangHash(uint n)\n{\n    // https://gist.github.com/badboy/6267743#hash-function-construction-principles\n    // Wang hash: this has the property that none of the outputs will\n    // collide with each other, which is important for the purposes of\n    // seeding a random number generator.  This was verified empirically\n    // by checking all 2^32 uints.\n    n = (n ^ 61u) ^ (n >> 16);\n    n *= 9u;\n    n = n ^ (n >> 4);\n    n *= 0x27d4eb2du;\n    n = n ^ (n >> 15);\n\n    return n;\n}\n\nuint NextState(uint state)\n{\n    state ^= state << 13;\n    state ^= state >> 17;\n    state ^= state << 5;\n    return state;\n}\n\nfloat NextFloat(inout uint state)\n{\n    state = NextState(state);\n    int n = int(state % 1000u);\n    float t = float(n) / 1000.;   \n    return t;\n}\n\nvec3 NextVec3(inout uint state)\n{\n    float x = NextFloat(state);\n    float y = NextFloat(state);\n    float z = NextFloat(state);\n\n    return vec3(x, y, z);\n}\n\n\n//Convert functions based on https://www.shadertoy.com/view/XddXW7\n\nfloat Convert2DTo1D(vec2 p, vec2 s) \n{\n    //p = Repeat(p, s);\n    p = mod(p, s);\n    return floor(p.y) * s.x + p.x;\n}\n\nvec2 Convert1DTo2D(float p, vec2 size)\n{\n    float x = mod(p, size.x);\n    float y = (p - x) / size.x + 0.5;\n    return vec2(x, y);\n}\n\nfloat Convert3DTo1D(vec3 p, vec3 size)\n{\n    //p = Repeat(p, size);\n    p = mod(p, size);\n    return floor(p.z) * size.x * size.y + floor(p.y) * size.x + p.x;\n}\n\nvec3 Convert1DTo3D(float p, vec3 size)\n{\n    float x = mod(p, size.x);\n    float y = mod((p - x) / size.x, size.y);\n    float z = (p - x - floor(y) * size.x) / (size.x * size.y);\n    return vec3(x, y + 0.5, z + 0.5);\n}\n\n\n//\nfloat PeriodicalCellularNoise(vec3 p, float scale, vec3 size)\n{\n    p *= scale;\n    vec3 mainCell = floor(p);\n\n    float minDist = 999999.;\n\n    for (int x = -1; x <= 1; x++)\n    for (int y = -1; y <= 1; y++)\n    for (int z = -1; z <= 1; z++)\n    {\n        vec3 cellIndex = mainCell + vec3(x, y, z);\n        \n        vec3 repeatCellIndex = Repeat(cellIndex, size * scale);\n        uint seed = uint(137. + repeatCellIndex.x * 11. + repeatCellIndex.y * 17. + repeatCellIndex.z * 13.);\n        uint state = WangHash(seed);\n        \n        vec3 cellPoint = cellIndex + NextVec3(state);\n        float dist = distance(p, cellPoint);\n        minDist = min(minDist, dist);\n    }\n\n    return minDist;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}