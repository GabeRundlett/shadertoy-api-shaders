{
    "Shader": {
        "info": {
            "date": "1516625385",
            "description": "This is a simple startup for shadertoy learning with 4 example ( the last example is a circle).",
            "flags": 0,
            "hasliked": 0,
            "id": "XlSBz3",
            "likes": 11,
            "name": "examples and circle tutorial",
            "published": 3,
            "tags": [
                "circle",
                "tutorials",
                "examples"
            ],
            "usePreview": 0,
            "username": "catafest",
            "viewed": 3343
        },
        "renderpass": [
            {
                "code": "// Created by Cătălin George Feștilă - http://free-tutorials.org\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // default start main function to set uv (https://en.wikipedia.org/wiki/UV_mapping) \n    // this with viewport resolution (in pixels) if you use iResolution.xy\n    // fragColor is the output to screen = uv (if you use WebGL / OpenGL then you need to use \n    // because shadertoy uses technique called rendering to texture).\n    \n    //\n    // -- ex1: random colors \n    // vec2 uv = fragCoord.xy ;\n    // vec4 for fragColor and use operators and math functions(ex: +* and sin)\n    // fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    // will show random colors by fragment shader xy \n    \n    //\n    // -- ex2: random colors with viewport resolution\n    // same effect with the next row \n    // this will show random colors by iResolution (see: Shader Inputs uniform )\n    // uniforms is like constants \n    // vec2 uv = iResolution.xy ;\n    // and\n    // fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    //\n    // -- ex3: one color\n    // set yout uv to display \n    // vec2 uv = fragCoord.xy / iResolution.xy; or just fragCoord.xy\n    // vec2 uv = fragCoord.xy;\n    // create a vec3 color \n    // vec3 col = vec3(0, 110,110);\n    // show the color \n\t// fragColor = vec4( col,0.0 );\n    \n    //\n    // -- ex4: circle with 30% from iResolution\n    vec2 uv = fragCoord.xy;\n    // set center for circle\n\tvec2 center = iResolution.xy * 0.5;\n    // set radius of circle\n\tfloat radius = 0.30 * iResolution.y;\n    // create circle with delta and theta function\n    // make delta \n    float d = length(center - uv) - radius;\n    // make theta with color transparency to 0.4 and set 1 for clamp\n    // the clamp is a returned value computed as min(max( x , minVal ), maxVal ).\n\tfloat t = clamp(d, 0.4, 1.0);\n\tfragColor = vec4( t, center, (120,230,0));\n}\n    \n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}