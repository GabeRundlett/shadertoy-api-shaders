{
    "Shader": {
        "info": {
            "date": "1719008185",
            "description": "just transparent spheres at the vertices of repeated dodecahedrons",
            "flags": 0,
            "hasliked": 0,
            "id": "MXtXWH",
            "likes": 6,
            "name": "dodecahedral",
            "published": 3,
            "tags": [
                "raymarch",
                "volumetric"
            ],
            "usePreview": 0,
            "username": "pb",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "float random(vec2 p) {\n    return fract( sin( dot( p, vec2(12., 90.)))* 5e5 );\n}\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))\n\nvec4 color;\n\nfloat de(vec3 p) {\n\n\n    float dd=2.4;\n    p = mod(p-dd,2.*dd)-dd;\n    \n    p.xz *=  rot(iTime/2.);\n    p.yz *=  rot(iTime/3.);\n\n    int vertex=0;\n    float dist, minDist=1e6;\n    for (int i=0; i<20; i++) {\n    \n        dist = length(p-d12[i]);\n        if (dist < minDist) { vertex=i; minDist=dist; }\n    }\n    \n    float fv = float(vertex);\n    vec3  cc = cos(d12[vertex]+fv*fv);\n    \n    cc.xz *= rot(iTime/6.);\n    \n    cc *= cc;\n    cc  = 1. - exp( -cc*cc );\n    color = vec4( cc, 0.); \n    \n    return minDist;\n\n}\n\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    U = (2.*U - iResolution.xy)/iResolution.y;\n    \n    vec3 p=vec3(.1,.5,-9.5+iTime), rd=normalize(vec3(U,2));\n    \n    rd.yz *= rot(.4);\n    rd.xz *= rot(.3);\n    \n    float i=0.,t=0.,d;\n    \n    O = vec4(0);\n    \n    for (;i<100.;i++) {\n            \n        d = de(p+t*rd);        \n        t += .3*d;\n        O += exp( -d*d*15.)*exp(-t*t/30.) * color; \n      \n    }\n    \n    O = (sqrt(O));\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//hard coding the vertices for a dodecahedron\nconst float gmh=(sqrt(5.)+1.)/2.;\nconst float gmi=1./gmh;\n\nvec3[] d12 = vec3[]  (\nvec3(1.,1.,1.),\nvec3(1.,1.,-1.),\nvec3(1.,-1,1.),\nvec3(1.,-1,-1.),\nvec3(-1,1.,1.),\nvec3(-1.,1.,-1),\nvec3(-1.,-1.,1.),\nvec3(-1.,-1.,-1.),\nvec3(0.,gmh,gmi),\nvec3(0.,gmh,-gmi),\nvec3(0.,-gmh,gmi),\nvec3(0.,-gmh,-gmi),\nvec3(gmi,0.,gmh),\nvec3(gmi,0.,-gmh),\nvec3(-gmi,0.,gmh),\nvec3(-gmi,0.,-gmh),\nvec3(gmh,gmi,0.),\nvec3(gmh,-gmi,0.),\nvec3(-gmh,gmi,0.),\nvec3(-gmh,-gmi,0.)\n);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}