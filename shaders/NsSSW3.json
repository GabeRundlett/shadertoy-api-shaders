{
    "Shader": {
        "info": {
            "date": "1626273665",
            "description": "Description",
            "flags": 36,
            "hasliked": 0,
            "id": "NsSSW3",
            "likes": 13,
            "name": "Juno's position",
            "published": 3,
            "tags": [
                "triangles",
                "electro",
                "dnb"
            ],
            "usePreview": 1,
            "username": "z0rg",
            "viewed": 707
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat sdf_zicon(vec2 uv)\n{\n  float th = 0.02*2.;\n  float sz = 0.1;\n  float acc = 1000.;\n\n  acc = abs(cir(uv-vec2(.3), sz))-th;\n  acc = min(acc,abs(cir(uv-vec2(-.3), sz))-th);\n  acc = min(acc,abs(cir(uv-vec2(-.3,.3), sz*.7))-th);\n  acc = min(acc,abs(cir(uv-vec2(.3,-.35), sz*1.3))-th);\n\n  acc = min(acc, sqr(uv-vec2(-0.015,.3), vec2(.21,th)));\n  acc = min(acc, sqr((uv-vec2(-0.0,.0))*r2d(-PI/4.), vec2(.32,th)));\n  acc = min(acc, sqr((uv-vec2(-0.015,-.3))*r2d(0.1), vec2(.19,th)));\n\n    return acc;\n}\n\nvec3 doBloom(vec2 uv, float blur, float threshold)\n{\n    vec3 col;\n    int cnt = 50;\n    float fcnt = float(cnt);\n    for (int i = 0;i <cnt;++i)\n    {\n        float fi = float(i);\n        float coef = (fi/fcnt);\n        float sz = 1.+pow(coef,2.)*blur;\n        float samplePerTurn = 5.;\n        float an = (fi/(fcnt/samplePerTurn))*PI;\n        vec2 p = uv - vec2(sin(an), cos(an))*(fi/fcnt)*blur;\n        vec3 smple = texture(iChannel0, p).xyz;\n        if (length(smple) > threshold)\n            col += smple;\n    }\n    \n    return col/float(cnt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    float bloomIntensity = 624./640.;  \n    vec3 bloomSample = doBloom(uv, 30./360., 217./ 640.);\n    bloomSample = pow(bloomSample, vec3(0.5));\n    \n    col = col + (bloomSample*bloomIntensity);\n    \n    col = mix(col, col.zyx, pow(sat(length(cuv*2.)),4.));\n    \n    col = mix(col, 1.-col.yzx, 1.-sat(sdf_zicon((cuv-vec2(.45, -.225))*15.)*40.));\n    \n    col = pow(col, vec3(1.75));\n\n    col *= sat(iTime-1.);\n    fragColor = vec4(col.yxz, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define FFT(a) texture(iChannel1, vec2(a, 0.)).x\n\nfloat _tri(vec2 p, float r)\n{\n    float a = atan(p.y, p.x);\n    /*\n    //p = vec2(length(\n    float s = 3.;\n    float stp = float(int((a)/s))*s;\n    vec2 uv = p*r2d(stp);*/\n    float s = 3.;\n    float as = PI*2.0/s;\n    \n    float ra = mod(a+.5*as, as)-.5*as;\n    \n    vec2 uv = length(p)*vec2(sin(ra),cos(ra)); \n    \n    return uv.y-r;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = mix(vec3(.1), vec3(0.690,0.188,0.439), 1.-sat(length(uv*2.)));\n    \n    for (int i = 0; i < int(FFT(iTime*.1)*10.)+20; ++i)\n    {\n        float fi = 10.-float(i);\n\n        float sz = .3*pow(FFT(fi*.1),.5)+(sin(fi+iTime)*.2+1.)/(fi+1.);\n        float th = 0.1*fi/(fi+1.);\n        float t = abs(_tri(uv*r2d(fi*.1+iTime*(fi+1.)*.05), sz))-th;\n        vec3 rgb = vec3(0.);\n        if (mod(float(i), 2.) < 0.1)\n            rgb = vec3(0.969,0.212,0.478)*4.;\n        if (mod(fi, 3.) < 0.1)\n            rgb = rgb.zyx;\n        col = mix(col, rgb, (1.-sat(t*400.)));\n    }\n\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    uv *= 2.;\n    vec3 col = rdr(uv*2.*(sin(iTime*.5)+1.5))*.5;\n    \n    float stp = 0.01;\n    uv = floor(uv/stp)*stp;\n    col += rdr(uv*2.*(sin(iTime*.2)+1.5)).zxy*.5;\n    \n    fragColor = vec4(col/2.,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.141592653\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nfloat cir(vec2 uv, float r)\n{\n    return length(uv)-r;\n}\n\nfloat sqr(vec2 uv, vec2 s)\n{\n    vec2 l = abs(uv)-s;\n    return max(l.x, l.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 rdrWaterDroplets(vec2 ouv, vec2 cuv)\n{\n    vec3 col = texture(iChannel0, ouv).xyz;\n    float mapA = -.5+(texture(iChannel1, cuv*.3+vec2(0., iTime*.005)).x*texture(iChannel1, cuv*.2).x);\n    mapA = pow(mapA, .5);\n    col = mapA*vec3(1.);\n    \n    vec2 off = vec2(dFdx(mapA), dFdy(mapA))*5.;\n    \n    col = mix(texture(iChannel0, ouv).xyz, texture(iChannel0, ouv-off).yzx, sat((length(cuv)-.25)*10.)*(1.-sat(length(off*2.))));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    vec3 col = rdrWaterDroplets(uv, cuv);\n    \n    { // Not so cheap antialiasing SSAA x4\n        //col = vec3(1.,0.,0.); // debug\n        vec2 off = vec2(1., -1.)/(iResolution.x*1.);\n        vec3 acc = col;\n        // To avoid too regular pattern yielding aliasing artifacts\n        mat2 rot = r2d(uv.y*5.); // a bit of value tweaking, appears to be working well\n        acc += rdrWaterDroplets(uv, cuv-off.xx);\n        acc += rdrWaterDroplets(uv, cuv-off.xy);\n        acc += rdrWaterDroplets(uv, cuv-off.yy);\n        acc += rdrWaterDroplets(uv, cuv-off.yx);\n        col = acc/5.;\n    }\n    //col += texture(iChannel0, uv).xyz;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}