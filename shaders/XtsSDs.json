{
    "Shader": {
        "info": {
            "date": "1440681615",
            "description": "Move mouse to change light direction.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtsSDs",
            "likes": 2,
            "name": "Test ray marched scene",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "test"
            ],
            "usePreview": 0,
            "username": "piotrekli",
            "viewed": 489
        },
        "renderpass": [
            {
                "code": "precision mediump float;\n\n#define MAXITER 160\n#define EPSILON 0.001\n#define LIGHT vec3((iMouse.xy/iResolution.xy-0.5)*2.0, -1.0)\n\nvec4 add(vec4 a, vec4 b)\n{\n\tif (a.w < b.w) return a;\n\treturn b;\n}\n\n vec4 mul(vec4 a, vec4 b)\n{\n\tif (a.w > b.w) return a;\n\treturn b;\n}\n\nfloat halfspace(vec3 dir, vec3 pos)\n{\n\treturn dot(dir, pos);\n}\n\nfloat ball(float r, vec3 pos)\n{\n\treturn sqrt(dot(pos, pos))-r;\n}\n\nfloat blob2(float r, vec3 pos1, vec3 pos2, vec3 translate)\n{\n\t/* from http://www.pouet.net/topic.php?which=7931&page=4#c373814 */\n\tfloat f = 0.0;\n\tf += 1.0/(ball(r, pos1+translate)+r+EPSILON);\n\tf += 1.0/(ball(r, pos2+translate)+r+EPSILON);\n\treturn 1.0/f-r*0.5;\n}\n\nvec4 scene(vec3 pos)\n{\n    float time = iTime;\n\tvec4 a =\n\t    add(vec4(1.0, 0.5, 0.0, ball(1.0+cos(time*0.3)*0.3, pos-vec3(0.0+sin(time*2.1234), 1.0+cos(time), 7.0+sin(time)))),\n\t        vec4(0.3, 0.4+sin(time-length(cos(pos*8.0))*20.0)*0.25, 0.9, ball(1.25, pos-vec3(-0.5, 1.75, 7.5))));\n\ta = add(a,\n\t        vec4(0.7, 1.0, 0.5,\n\t             max(ball(0.8, pos-vec3(1.0, 0.8, 6.0)),\n\t                 ball(0.8, pos-vec3(1.5, 0.7, 6.1)))));\n\ta = add(a,\n\t\tvec4(1.0, 1.0, 0.8,\n\t             halfspace(normalize(vec3(1.0, 1.0, -0.5)), pos-vec3(-4.0, -1.0, 0.0))));\n\ta = add(a,\n\t\tvec4(1.0, 0.0, 0.4,\n\t             blob2(0.6+cos(time*(cos(time*0.03)+2.0)*0.25)*0.05, vec3(0.1, -1.0, 5.0), vec3(1.0, -0.6, 4.8), -pos)));\n\t\n\treturn a;\n}\n\nvec3 normal(vec3 pos)\n{\n\tvec3 n = vec3(0.0);\n\tfor (float xx=-1.0; xx<=1.0; xx+=2.0)\n\t\tfor (float yy=-1.0; yy<=1.0; yy+=2.0)\n\t\t\tfor (float zz=-1.0; zz<=1.0; zz+=2.0)\n\t\t\t{\n\t\t\t\tvec3 d = vec3(xx, yy, zz);\n\t\t\t\tn += scene(d*EPSILON+pos).w*d;\n\t\t\t}\n\treturn normalize(n);\n}\n\nvec3 raymarch(vec3 ray_dir, inout vec3 ray_pos)\n{\n\tvec3 col = vec3(-1.0);\n\tfor (int i=0; i<MAXITER; ++i)\n\t{\n\t\tvec4 sc = scene(ray_pos);\n\t\tfloat r = sc.w + EPSILON;\n\t\tray_pos += r * ray_dir;\n\t\tif (r <= EPSILON)\n\t\t{\n\t\t\tcol = sc.xyz;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn col;\n}\n\nfloat light(vec3 pos)\n{\n\tfloat l = length(pos-LIGHT);\n\tl = (dot(normalize(LIGHT), normal(pos))*0.5+1.0) / (l*l);\n\treturn l;\n}\n\nfloat shadow(vec3 pos)\n{\n\tfloat d = 0.2;\n\treturn clamp(1.0-scene(pos+normal(pos)*d).w/d, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord-iResolution.xy*0.5) / min(iResolution.x, iResolution.y); \n\tvec3 ray_dir = normalize(vec3(uv, 1.0));\n\tvec3 ray_pos = vec3(0.0);\n\tvec3 col = raymarch(ray_dir, ray_pos);\n\tbool found = col.x >= 0.0;\n\tif (found)\n\t{\n\t\tfloat l = light(ray_pos) - shadow(ray_pos)*0.01;\n\t\tfragColor = vec4( l*20.9*col, 1.0 );\n\t}\n\telse fragColor = vec4( vec3(0.0), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}