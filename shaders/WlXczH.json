{
    "Shader": {
        "info": {
            "date": "1591376455",
            "description": "Different sphere uniform distribution algorithms",
            "flags": 0,
            "hasliked": 0,
            "id": "WlXczH",
            "likes": 12,
            "name": "sphere uniform point",
            "published": 3,
            "tags": [
                "sphere",
                "distribution"
            ],
            "usePreview": 0,
            "username": "Danielhu",
            "viewed": 944
        },
        "renderpass": [
            {
                "code": "float sphere(vec3 p, vec3 c, float r) {\n    return length(p - c) - r;\n}\n\nmat3 rotate() {\n    float theta = iTime * 0.3;\n    float phi = iTime * 0.3;\n    \n    float cx = cos(theta);\n    float cy = cos(phi);\n    float sx = sin(theta);\n    float sy = sin(phi);\n    return mat3(\n        cy, -sy * -sx, -sy * cx,\n        0, cx, sx,\n        sy, cy * -sx, cy * cx\n    );\n}\n\nbool drawSphere(vec2 coor, vec3 c, float r, out vec3 hit, out vec3 col) {\n    vec3 p = vec3(coor, -1.0);\n    vec3 dir = vec3(0, 0, 1);\n    for (int i = 0; i < 32; ++i) {\n        float sdf = sphere(p, c, r);\n        if (sdf < 0.0001) {\n            hit = p;\n            col = 0.3  + 0.4 * vec3(dot(normalize(hit - c), vec3(0, 0, -1))) * (sin(iTime) * 0.5 + 0.5);\n            return true;\n        }\n        p += sdf * 0.5 * dir;\n    }\n    return false;\n}\n\n#define axis_num 12.0\n#define PI acos(-1.0)\n\nvec3 snapEachAxis(vec3 p, vec3 c, float r) {\n    vec3 col = vec3(0);\n    vec3 rp = (p - c) * rotate();\n    vec3 d = round(rp * axis_num ) / axis_num ;\n    d = normalize(d) * r;\n    col += step(length(rp - d), 0.004);\n    col += (d * 173.0 - round(d * 173.0)) * (1.0 - (sin(iTime) * 0.5 + 0.5)); \n    return col;\n}\n\nvec3 snapSpherical(vec3 p, vec3 c, float r) {\n    vec3 col = vec3(0);\n    vec3 rp = (p - c) * rotate();\n    vec3 d;\n    float phi = asin(rp.z / r);\n    d.z = sin(round(phi / PI * axis_num) / axis_num * PI) * r;\n    float theta = atan(rp.y, rp.x);\n    \n    float xyMag = sqrt(r * r - d.z * d.z);\n    float roundedTheta = round(theta / PI * round(xyMag / r * axis_num) ) * PI / round(xyMag / r * axis_num);\n    \n    d.x = cos(roundedTheta) * xyMag;\n    d.y = sin(roundedTheta) * xyMag;\n    \n   \n    col += step(length(rp - d), 0.005);\n    col += (d * 173.0 - round(d * 173.0)) * (1.0 - (sin(iTime) * 0.5 + 0.5)); \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coor = (fragCoord - iResolution.xy / 2.0) / iResolution.y;\n    vec3 hit;\n    \n    vec3 col; \n    \n    fragColor = vec4(0, 0, 0, 1);\n    \n    if(drawSphere(coor, vec3(-0.45, 0.0, 0), 0.4, hit, col))\n       fragColor.xyz += col + snapEachAxis(hit, vec3(-0.45, 0.0, 0), 0.4);\n    \n    if(drawSphere(coor, vec3(0.45, 0.0, 0), 0.4, hit, col))\n       fragColor.xyz += col + snapSpherical(hit, vec3(0.45, 0.0, 0), 0.4);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}