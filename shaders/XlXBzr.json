{
    "Shader": {
        "info": {
            "date": "1510721983",
            "description": "Warpy Lattice but with differerent style.",
            "flags": 0,
            "hasliked": 0,
            "id": "XlXBzr",
            "likes": 0,
            "name": "Warpy Lattice (Vanilla & Choco)",
            "published": 3,
            "tags": [
                "2d",
                "pattern",
                "rotation",
                "repeating"
            ],
            "usePreview": 0,
            "username": "0x4d4147",
            "viewed": 529
        },
        "renderpass": [
            {
                "code": "// THE PIECES\n\n// Create matrix to rotate by 'a' angle.\n#define rotate(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n// Return 1 if even, 0 if odd.\nfloat is_even(float n)\n{\n    return mod(floor(n), 2.);\n}\n\n// Tile space, repeats 0->1 for number of times (per square unit space).\nvec4 tile_space(vec2 uv, float times)\n{\n    vec2 scaledUV = uv * times;\n    return vec4(fract(scaledUV), floor(scaledUV));\n}\n\n// From pixel spirit deck.\n// With improvement by FabriceNeyret2.\nfloat rectSDF(vec2 uv, vec2 size)\n{\n\tuv = abs(uv * 2. - 1.) / size;\n\treturn max(uv.x, uv.y);\n}\n\n// Adapted from pixel spirit deck.\nfloat crossSDF(vec2 uv, float s, float thick)\n{\n\treturn min(\n\t\trectSDF(uv, vec2(s, thick)),\n\t\trectSDF(uv, vec2(thick, s))\n\t);\n}\n\n// From pixel spirit deck.\nfloat fill(float x, float size)\n{\n\treturn 1.0 - step(size, x);\n}\n\n\n// THE CONSTRUCTION\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.y;\n    \n    // More parameters.\n    vec4 strokeCol = vec4(1.0, 0.9, 0.8, 1.);\n    vec4 bgCol = vec4(.3, 0.2, 0.2, 1.);\n    const float tileAmt = 4.0;\n    const float crossSize = 4.;\n    float crossThickness = .9;\n    \n    // Build on these.\n    float sdf = 0.;\n    vec4 col;\n    \n    // Tile the space.\n    vec4 tiledSpace = tile_space(uv, tileAmt);\n    uv = tiledSpace.xy;\n    \n    // Make checkerboard mask to flip rotations for the effect.\n    float xor = is_even(tiledSpace.w) + is_even(tiledSpace.z);\n    xor = (1.0 - step(1.5, xor)) * xor;\n    \n    // Rotate the space (works per tile).\n    uv -= vec2(.5);\n    uv = rotate(mix(1., -1., xor)*iTime*0.5f) * uv;\n    uv += vec2(.5);\n    \n    // Shape the SDF with a cross.\n    sdf = crossSDF(uv, crossSize, crossThickness);\n    \n    // Mix the colors for the final result.\n    col = mix(bgCol, strokeCol, fill(sdf, 0.5));\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}