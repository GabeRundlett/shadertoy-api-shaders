{
    "Shader": {
        "info": {
            "date": "1692469704",
            "description": "Drag to explore the complex universe!\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DljyDG",
            "likes": 6,
            "name": "Breathing Fractal",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "beans_please",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "vec2 screen_to_uv(vec2 coord)\n{\n    return 2.4 * (coord - .5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\n// Returns a value in [0, 1] which will be fed to the color map\nfloat fractal(vec2 coord)\n{\n    vec2 uv = screen_to_uv(coord);\n    \n    // Number of iterations\n    const int max_iters = 120;\n    int iters;\n    \n    // Starting complex number\n    vec2 a = uv;\n    \n    // Constant to add in each iteration\n    vec2 c;\n    if (iMouse.z > .5)\n    {\n        vec2 m = .5 * screen_to_uv(iMouse.xy);\n        m /= sqrt(length(m));\n        c = m;\n    }\n    else\n    {\n        c = vec2(-0.756924804733 + .008 * cos(1.2 * iTime), 0.210445461405);\n    }\n    \n    while (iters++ < max_iters)\n    {\n        // a = a^2\n        a = vec2(a.x * a.x - a.y * a.y, 2. * a.x * a.y);\n        \n        // Add constant\n        a += c;\n        \n        // Break if a is too large\n        if (dot(a, a) > pow(1.25 + .25 * cos(iTime * 1.2), 2.))\n            break;\n    }\n    \n    // Return a value based on the number of iterations \n    // done before becoming too large.\n    return remap(\n        exp(-float(iters) / float(max_iters)),\n        1., exp(-1.),\n        0., 1.15\n    );\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    // Super sampling\n    float v = 0.;\n    {\n        const ivec2 ssaa_res = ivec2(4);\n        for (int y = 1; y <= ssaa_res.x; y++)\n        {\n            for (int x = 1; x <= ssaa_res.y; x++)\n            {\n                vec2 offs = vec2(float(x) / float(ssaa_res.x + 1), float(y) / float(ssaa_res.y + 1)) - .5;\n                v += fractal(frag_coord + offs);\n            }\n        }\n        v /= float(ssaa_res.x * ssaa_res.y);\n    }\n    \n    // Colormap\n    vec3 col = colormap(v);\n    col = mix(vec3(dot(col, vec3(1. / 3.))), col, 1.1);\n\n    // Output\n    col = pow(col, vec3(1. / 2.2));\n    frag_col = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float remap(float inp, float inp_start, float inp_end, float out_start, float out_end)\n{\n    return out_start + ((out_end - out_start) / (inp_end - inp_start)) * (inp - inp_start);\n}\n\nfloat remap_clamp(float inp, float inp_start, float inp_end, float out_start, float out_end)\n{\n    float t = clamp((inp - inp_start) / (inp_end - inp_start), 0.0, 1.0);\n    return out_start + t * (out_end - out_start);\n}\n\nvec3 colormap(float x)\n{\n    vec3 c = vec3(1.0);\n    c = mix(c, 1.2 * vec3(0.3, 0.5, 0.8), remap_clamp(x, -1.0, -0.6, 0.0, 1.0));\n    c = mix(c, 1.2 * vec3(0.1, 0.02, 0.4), remap_clamp(x, -0.6, -0.25, 0.0, 1.0));\n    c = mix(c, vec3(0.0), remap_clamp(x, -0.25, 0.0, 0.0, 1.0));\n    c = mix(c, 1.2 * vec3(0.4, 0.1, 0.02), remap_clamp(x, 0.0, 0.25, 0.0, 1.0));\n    c = mix(c, 1.2 * vec3(0.8, 0.5, 0.3), remap_clamp(x, 0.25, 0.6, 0.0, 1.0));\n    c = mix(c, vec3(1.0), remap_clamp(x, 0.6, 1.0, 0.0, 1.0));\n    \n    c = pow(c, vec3(1.8));\n    c += vec3(0.03, 0.0, 0.02);\n    \n    return c;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}