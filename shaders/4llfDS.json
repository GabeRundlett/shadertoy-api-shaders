{
    "Shader": {
        "info": {
            "date": "1513164439",
            "description": "Another sky i made with jodie's tonemap. Hope you like it!",
            "flags": 0,
            "hasliked": 0,
            "id": "4llfDS",
            "likes": 23,
            "name": "Another atmosphere i made",
            "published": 3,
            "tags": [
                "scattering",
                "rayleigh",
                "tonemap",
                "scatter",
                "robobo1221",
                "jodie"
            ],
            "usePreview": 0,
            "username": "robobo1221",
            "viewed": 2849
        },
        "renderpass": [
            {
                "code": "const vec3 rayleighCoeff = 1.0 / pow(vec3(670.0, 540.0, 470.0), vec3(4.0));\n\n#define pi 3.14159265359\n#define d0(x) abs(x) + 1e-8\n\nvec3 totalCoeff = rayleighCoeff;\n\nvec3 scatter(vec3 coeff, float depth){\n\treturn coeff * depth;\n}\n\nvec3 absorb(vec3 coeff, float depth){\n\treturn exp2(scatter(coeff, -depth));\n}\n\nfloat calcParticleThickness(float depth){\n   \t\n    depth = depth * 2.0 - 0.1;\n    depth = max(depth + 0.01, 0.01);\n    depth = depth * depth * (3.0 - 2.0 * depth);\n    depth = 1.0 / depth;\n    \n\treturn 5000000000.0 * depth;   \n}\n\nfloat rayleighPhase(vec2 p, vec2 lp){\n\treturn 0.375 * (1.0 + pow(1.0 - distance(p, lp), 2.0));\n}\n\nvec3 calcAtmosphericScatter(vec2 p, vec2 lp){\n    const float ln2 = log(2.0);\n    \n\tfloat opticalDepth = calcParticleThickness(p.y);\n    float opticalDepthLight = calcParticleThickness(lp.y);\n    \n    vec3 scatterView = scatter(totalCoeff, opticalDepth);\n    vec3 absorbView = absorb(totalCoeff, opticalDepth);\n    \n    vec3 scatterLight = scatter(totalCoeff, opticalDepthLight);\n    vec3 absorbLight = absorb(totalCoeff, opticalDepthLight);\n    \n    vec3 absorbSun = abs(absorbLight - absorbView) / d0((scatterLight - scatterView) * ln2);\n    vec3 scatterSun = scatterView * rayleighPhase(p, lp);\n    \n    vec3 sunSpot = smoothstep(0.01, 0.009, distance(p, lp)) * absorbView * pi;\n    \n    return (scatterSun * absorbSun + sunSpot) * pi;\n}\n\nvec3 jodieReinhardTonemap(vec3 c){\n    float l = dot(c, vec3(0.2126, 0.7152, 0.0722));\n    vec3 tc = c / (c + 1.0);\n\n    return mix(c / (l + 1.0), tc, tc);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / max(iResolution.x, iResolution.y);\n    vec2 lp = iMouse.xy / max(iResolution.x, iResolution.y);\n         lp = lp.x == 0.0 ? vec2(0.5, 0.12) : lp;\n    \n    vec3 color = vec3(0.0);\n    color = calcAtmosphericScatter(uv, lp);\n    color = jodieReinhardTonemap(color);\n    \n\tfragColor = vec4(pow(color, vec3(0.4545)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}