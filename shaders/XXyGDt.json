{
    "Shader": {
        "info": {
            "date": "1718475230",
            "description": "yes and no",
            "flags": 0,
            "hasliked": 0,
            "id": "XXyGDt",
            "likes": 2,
            "name": "yesandno",
            "published": 3,
            "tags": [
                "wurstgulasch"
            ],
            "usePreview": 0,
            "username": "AlreadyTaken",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "//https://iquilezles.org/articles/distfunctions2d/\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\n//pendulum between 0 and 1\nfloat normsinTime(float damping){\nreturn (sin(iTime*damping)*0.5)+0.5;\n}\n\n//https://iquilezles.org/articles/distfunctions2d/\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n//https://iquilezles.org/articles/distfunctions2d/\nfloat sdRoundedX( in vec2 p)\n{\n    float w = 0.5;\n    float r = 0.108;\n    p = abs(p);\n    return length(p-min(p.x+p.y,w)*0.5) - r;\n}\n//simple 2D rotation\nvec2 rot2d(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\n\n//https://iquilezles.org/articles/sdfrepetition/\nfloat sdf(in vec2 p, in float whatever) {\n whatever = normsinTime(0.35);\nreturn mix(sdHeart(p),sdRoundedX(p),whatever);\n\n}\n\n//https://iquilezles.org/articles/sdfrepetition/\nfloat repetition_rotational( vec2 p, int n )\n{\n    float sp = 6.283185/float(n);\n    float an = atan(p.y,p.x);\n    float id = floor(an/sp);\n    float a1 = sp*(id+0.0);\n    float a2 = sp*(id+1.0);\n    vec2 r1 = mat2(cos(a1),-sin(a1),sin(a1),cos(a1))*p;\n    vec2 r2 = mat2(cos(a2),-sin(a2),sin(a2),cos(a2))*p;\n\n    return min( sdf(r1,id+0.0), sdf(r2,id+1.0) );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvs = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord*2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec2 uvh = vec2(uv.x,uv.y);\n    //float bla = 10.*((cos(iTime*0.25)*2.)-1.);\n    uvh=rot2d(uvh,iTime*0.95);\n    uvh=fract(uvh*34.);\n    uvh*=2.;\n    uvh.xy -= 1.;\n    uvh=rot2d(uvh,iTime*-0.75);\n    float dh = repetition_rotational(uvh, 3 );\n    dh = sin(dh*7.+iTime)/7.;\n    dh=abs(dh);\n    dh=smoothstep(0.01,0.2, dh);\n    float dh0 = dh;\n    dh = 0.05 /dh;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv0.xyx+vec3(0,2,4));\n    uv0.y += 0.25;\n    uv0 *= 0.25;\n    uv0 *= 2.5*((sin(iTime)+2.)*2.);\n    float heart = sdHeart(uv0);\n    uv0.y -= 0.5;\n    float dh2 = mix(heart,sdRoundedX(uv0),normsinTime(1.));\n    dh2 = 0.05 /dh2;\n    dh2 = abs(dh2);\n    dh = min(dh,dh2);    \n\n    // Output to screen\n    fragColor = vec4(col*dh,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}