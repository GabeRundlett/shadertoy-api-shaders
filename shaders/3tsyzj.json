{
    "Shader": {
        "info": {
            "date": "1592497387",
            "description": "Great lecture on Newton's method - https://www.youtube.com/watch?v=j6ikEASjbWE\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3tsyzj",
            "likes": 9,
            "name": "Bisection method [Day 181]",
            "published": 3,
            "tags": [
                "tutorial",
                "bisection",
                "maths",
                "root"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "// Also check out Newton's method demonstration - https://shadertoy.com/view/wtsyRS\n\n// Bisection root finding method\n// Great video on the subject - https://www.youtube.com/watch?v=MlP_W-obuNg\n\n// function smoothing thanks to iq and mla\n\n#define pal(a,b,c,d,e) ((a) + (b)*sin((c)*(d) + (e)))\n\n#define offs \t\t(iTime/1.5)\n\n#define fn(j) \t\t(cos(j+offs)+sin( (j+offs)*2. ))\n\n\n#define RANGE 1.\n\n#define ITERATIONS 6.\n\n\n// Plotting width\nconst float W = 0.025;\n\n\nconst float eps = 0.01;\nvec3 graph(float y, float fn0, float fn1, vec3 col, float width){\n  return smoothstep(W*width*1.,W*width*0.5, \n                    abs(fn0-y)/length(vec2((fn1-fn0)/eps,1.)))*col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y*5.;\n\n    vec3 col = vec3(0);\n    \n    // function\n\tcol += graph( uv.y, fn(uv.x),\t  fn(uv.x+eps),     vec3(0.8,.75,0.8), 1. );\n    \n    \n    // plotlines\n    \n    col += graph(abs(uv.y),0.,dFdx(uv.x),vec3(1,1,1),0.5);\n    \n    \n    float offA = 0.;\n    float offB = RANGE;\n    float offMid = 0.; \n    \n    \n    for(float i = 0.; i <= ITERATIONS; i++){\n        offMid = offA + (offB - offA)/2.;\n        \n        float fA = fn(offA);\n        float fB = fn(offB);\n        float fMid = fn(offMid);\n    \t\n        vec2 fnAuv = uv - vec2(offA,fA);\n        vec2 fnBuv = uv - vec2(offB,fB);\n        vec2 fnMiduv = uv - vec2(offMid,fMid);\n        \n        \n        vec3 c1 = pal(0.5,0.5,vec3(0.9,0.4,0.1),1.,i*1. + 1.);\n        vec3 c2 = pal(0.5,0.5,vec3(0.9,0.4,0.1),1.,i*1. + 5.);\n        \n        // function values\n        col = mix(col,c1,smoothstep(W*3.,W*2.,length(fnAuv) ));\n        \n        col = mix(col,c1,smoothstep(W*3.,W*2.,length(fnBuv)  ));\n        \n        col = mix(col,c2,smoothstep(W*3.,W*2.,length(fnMiduv)  ));\n        \n        \n        if(sign(fMid) != sign(fA)){\n        \toffB = offMid;\n        } else {\n        \toffA = offMid;\n        }\n        \n    }\n    \n    \n    \n    col = smoothstep(0.,1.,col);\n    \n    // gamma correction\n    \n    col = pow(col,vec3(0.454545));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}