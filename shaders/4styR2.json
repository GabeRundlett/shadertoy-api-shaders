{
    "Shader": {
        "info": {
            "date": "1519585267",
            "description": "Fill with red and blue pawns so that constraints ( = numbers ) see the right amount of blue horizontally + vertically around (sigh is stopped with red pawns).\nref: [url]http://0hn0.com/[/url]\ncheat key: SPACE to verify error vs correct constrains.",
            "flags": 48,
            "hasliked": 0,
            "id": "4styR2",
            "likes": 8,
            "name": "0h n0",
            "published": 3,
            "tags": [
                "game"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 846
        },
        "renderpass": [
            {
                "code": "// --- access to the image of ascii code c. from https://www.shadertoy.com/view/llySRh\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel2, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) );\n}\n#define num(p,c) char( vec2( (p).x, 1.-(p).y ) , c+48 )\n\n#define keyClick(ascii)   ( texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.)\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    //O = abs(texelFetch(iChannel0,ivec2(U/16.), 0)); return; // debug\n    R = iResolution.xy; \n    N = cell(0).r;\n    U = map(U);\n    \n    // --- display margin + win state\n    if ( U.x < 1. || U.x > N+1.) { \n        O = cell(ivec2(0)).z == 1.                  // 1: win -1: err \n            ? col(4.*iTime )                        // win ! \n            : vec4(1); \n        return; \n    }\n    \n    // --- display board\n    bool help = keyClick(32);\n    float v = cell(U).x;                            // display cell color\n    O =   abs(v) == 1. ? vec4(0,.8,.9,1) \n        : abs(v) == 2. ? vec4(1,0,0,1)\n        : vec4(.9);\n    if (v==-1.)                                     // display numbers\n        for (int i=0; i < 20; i++) {\n            vec4 P = pawn(i);\n            vec2 X = U-P.yz;\n            if (floor(X)==vec2(0)) {\n                if (help) O += .2* P.w;             // player wants help \n                O += (1.-O)* num((U-P.yz)*1.5-.25, int(P.x)).x;\n            }\n        }\n                                                    // clamp to disks\n    O = mix(O, vec4(1), smoothstep( 12./R.y,0.,.47 - length(fract(U)-.5) ));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === data structure:\n// (0,0)-(19,0): constraints. xyzw = value, pos, state (O: unfinished 1: ok 2: wrong )\n// (1,1)+(i,j):   board.      x = 0:empty 1:blue 2:red -1:constrained blue -2:constrained red\n// (1,1):         state.      x = board size y = prev mouseclick z = (0:ongoing 1:win -1:err) w: win timer\n// (2,1):         state.      x = game number\n\n// --- set board size\n#define setN(n)     N = n; if (U==vec2(1)  ) O.r = n;\n// --- add value cell\n#define addV(v,x,y) if ( U == vec2(iV++,0) ) O = vec4(v,x,y,0); \\\n                    if ( U == vec2(x,y)+1. ) O.r = -1.;\n// --- add brick cell\n#define addB(x,y)   if ( U == vec2(x,y)+1. ) O.r = -2.;\n\nvoid mainImage( out vec4 O, vec2 U )\n{   U -= .5;\n    vec4 C = cell(ivec2(0));\n    if ( iFrame==0 || ( C.z==1. && float(iFrame)-C.w > 220. ) ) { // --- init game\n        float g = cell(ivec2(1,0)).w;      // game number\n        if ( C.z == 1. ) g = mod(g+1.,3.); // just win: new game\n        O -= O; \n        if ( U == vec2(2,1) ) O.w = g;\n        \n        int iV = 0;\n        if ( g == 0. ) {\n            setN(4.); \n            addV(2, 2,1);\n            addV(4, 3,2);\n            addV(3, 3,3); addV(3, 4,3);\n            addV(1, 1,4); addV(2, 3,4);\n            addB(1,2);\n        }\n        else if ( g == 1. ) {\n            setN(6.); \n            addV(5, 2,1); addV(1, 6,1);\n            addV(6, 4,2); addV(6, 5,2);\n            addV(4, 1,3); addV(4, 5,3);\n            addV(3, 1,5); addV(3, 4,5); addV(2, 6,5);\n            addV(3, 6,6);\n            addB(6,2);\n            addB(3,4);\n            addB(3,5);\n            addB(2,6); addB(3,6); addB(4,6);\n        }\n        else if ( g == 2. ) {\n            setN(8.);\n            addV(2, 1,1); addV(2, 2,1); addV(7, 4,1); addV(6, 6,1); addV(5, 8,1);\n            addV(6, 3,2); addV(4, 6,2); addV(4, 7,2);\n            addV(6, 7,3);\n            addV(6, 4,4); addV(4, 8,4);\n            addV(6, 1,5); addV(5, 2,5);\n            addV(6, 4,6); addV(7, 6,6); addV(5, 7,6);\n            addV(4, 2,7); addV(5, 6,7);\n            addV(7, 5,8);\n            addB(6,4);\n            addB(3,8);       \n        }\n        if ( (U.y==1.|| U.y==N+2.) && U.x>1. && U.x<N+2. ) O.r = -2.; // safe borders\n        if ( (U.x==1.|| U.x==N+2.) && U.y>1. && U.y<N+2. ) O.r = -2.;\n        return;\n    }\n    \n    //if (U.x > 20. || U.y > N+2.) return;\n    O = texelFetch(iChannel0, ivec2(U), 0);\n    R = iResolution.xy; \n    N = cell(ivec2(0)).r;\n        \n    if ( U == vec2(1) ) O.y = iMouse.z;           // positive if clicked\n    \n    // --- player acts\n    if ( iMouse.z > 0. && cell(ivec2(0)).y <= 0.) { // click\n        vec2 M = map(iMouse.xy);\n        if ( U == 1.+floor(M) && O.x >= 0. )      // swap cell if allowed\n            O.x = mod (O.x+1., 3.);   \n    }\n    \n    // --- verify constrains\n    if ( U.y == 0. && U.x < 20. ) {\n        vec4 P = pawn(U.x);\n        float v = P.x; // pawn value;\n        if ( v > 0. ) {\n            vec2 X; int n=0; bool full=true;\n#define check(D) for( X=P.yz+D; abs(cell(X).x)==1.; X += D ) n++;  \\\n                 full = full && ( abs(cell(X).x) == 2. );\n            check( vec2( 1, 0) );\n            check( vec2(-1, 0) );\n            check( vec2( 0, 1) );\n            check( vec2( 0,-1) );\n            if (full) O.w = n==int(v) ? 1. : -1.; // 0: unfinished 1: ok -1: wrong\n            else      O.w = n<=int(v) ? 0. : -1.; // unfinished but overflow\n        }\n    }\n    \n    // --- test end & errors\n    if ( U == vec2(1) ) {\n        bool win = true, err = false;\n        for (int i=0; i < 20; i++) {\n            vec4 P = pawn(i);\n            if (P.x > 0.) { win = win && (P.w== 1.);\n                            err = err || (P.w==-1.);\n                          }\n        }\n        O.z = win ? 1. : err ? -1. : 0.;          // win state\n        if (win && O.w==0.) O.w = float(iFrame);  // delay before next game\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float N; // size of board\nvec2  R;\n\n// --- convert screen to row/col coordinates\nvec2 map(vec2 U) {\n    vec2 V = N*U/R.y; \n    return vec2 ( V.x -  N/2.*(R.x/R.y-1.) +1., N+1. - V.y );\n}\n\n#define pawn(i) texelFetch(iChannel0,ivec2(i,0),0)        // to access pawns\n#define cell(U) texelFetch(iChannel0,1+ivec2(U),0)        // to access cells\n\n#define col(v)   ( .5 + .5 * cos( v + vec4(0,23,21,0) ) ) // rainbow(hue)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}