{
    "Shader": {
        "info": {
            "date": "1714843011",
            "description": "Original: [url=https://www.shadertoy.com/view/WdK3Dz]NEON LOVE[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4fGSzW",
            "likes": 10,
            "name": "Neon Love Heartbeat",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "bezier",
                "heart",
                "glow",
                "curve",
                "neon"
            ],
            "usePreview": 0,
            "username": "nide",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.14159265359\n#define TWO_PI 2. * PI\n#define POINT_COUNT 32\n\nvec2 points[POINT_COUNT];\n\nconst float bpm = 128.0;\nconst float speed = 1.0 / (60.0 / bpm * 4.);\nconst float eps = 1e-8;\nfloat intensity = 1.25;\nconst float INIT_HEARTSCALE = 0.025;\nfloat heartscale = INIT_HEARTSCALE;\nfloat radius = INIT_HEARTSCALE * 0.15;\nfloat thickness = INIT_HEARTSCALE * 0.02;\nint quantize = 0;\n\n//https://www.shadertoy.com/view/MlKcDD\n//Signed distance to a quadratic bezier\nfloat sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C){    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    \n    if(h >= 0.0){ \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = uv.x + uv.y - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 1 root\n        vec2 qos = d + (c + b*t)*t;\n        res = length(qos);\n    }else{\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 3 roots\n        vec2 qos = d + (c + b*t.x)*t.x;\n        float dis = dot(qos,qos);\n        \n        res = dis;\n\n        qos = d + (c + b*t.y)*t.y;\n        dis = dot(qos,qos);\n        res = min(res,dis);\n\n        qos = d + (c + b*t.z)*t.z;\n        dis = dot(qos,qos);\n        res = min(res,dis);\n\n        res = sqrt( res );\n    }\n    \n    return res;\n}\n\n//http://mathworld.wolfram.com/HeartCurve.html\nvec2 getHeartPosition(float x){\n    x *= TWO_PI;\n    x*=0.5;\n    return vec2(16.0 * sin(x) * sin(x) * sin(x),\n                (13.0 * cos(x) - 5.0 * cos(2.0*x)\n                - 2.0 * cos(3.0*x) - cos(4.0*x))) * heartscale;\n}\n\nvec2 func(float x){\n    return vec2(x, sin(x * iTime * TWO_PI));\n}\n\n//https://www.shadertoy.com/view/3s3GDn\nfloat getGlow(float dist, float radius, float intensity){\n    return pow(radius*dist, intensity);\n}\n\nfloat getLooped(float t, vec2 pos){\n\tfor(int i = 0; i < POINT_COUNT; i++){\n        float ff = float(i);\n        float x = ff/float(POINT_COUNT-1);\n        x = -1.0 + 2.0 * x;\n        points[i] = getHeartPosition(x);\n    }\n\tfloat light = 0.;\n    for(int i = -1; i < POINT_COUNT-1; i++){\n        //https://tinyurl.com/y2htbwkm\n        int idx = i < 0 ? POINT_COUNT + i : i;\n        int idxPrev = idx == 0 ? POINT_COUNT-1 : idx-1;\n        int idxNext = idx == POINT_COUNT-1 ? 0 : idx+1;\n        vec2 c_prev = (points[idxPrev] + points[idx]) / 2.0;\n        vec2 c = (points[idx] + points[idxNext]) / 2.0;\n        // Distance from bezier segment\n        float d = sdBezier(pos, c_prev, points[idx], c);\n        // Distance from endpoint (except from first point)\n        float e = distance(pos, c_prev);\n        // Convert the distance to light and accumulate\n        light += ( 1. / max(d - thickness, eps));\n        // Convert the endpoint as well and subtract\n        light -= 1. / max(e - thickness, eps);\n    }\n    return max(0.0, light);\n}\nfloat getSegment(float t, vec2 pos, float offset, float len){\n\tfor(int i = 0; i < POINT_COUNT; i++){\n        float ff = float(i);\n        float x = ff/float(POINT_COUNT-1);\n        x *= len;\n        x += offset;\n        x = fract(x); \n        x = -1.0 + 2.0 * x;\n        points[i] = getHeartPosition(x);\n    }\n    vec2 c = (points[0] + points[1]) / 2.0;\n    vec2 c_prev;\n\tfloat light = 0.;\n    \n    for(int i = 0; i < POINT_COUNT-1; i++){\n        //https://tinyurl.com/y2htbwkm\n        c_prev = c;\n        c = (points[i] + points[i+1]) / 2.0;\n        // Distance from bezier segment\n        float d = sdBezier(pos, c_prev, points[i], c);\n        // Distance from endpoint (except from first point)\n        float e = i > 0 ? distance(pos, c_prev) : 1000.;\n        // Convert the distance to light and accumulate\n        light += 1. / max(d - thickness, eps);\n        // Convert the endpoint as well and subtract\n        light -= 1. / max(e - thickness, eps);\n    }\n    return max(0.0, light);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nfloat tri(float x){\n    return 1.0 - abs(1.0 - 2.0 * fract(x));\n}\nfloat sawRampUp(float x){\n    return 1.0 * fract(x);\n}\nfloat sawRampDown(float x){\n    return 1.0 - fract(x);\n}\nfloat pulse(float x, float pw){\n    // pulse is a square wave with a duty cycle of pw\n    float ph = mod(x, 1.0);\n    return float(ph < pw);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    float widthHeightRatio = iResolution.x/iResolution.y;\n    vec2 centre = vec2(0.5, 0.5);\n    vec2 pos = uv - centre;\n    pos.y /= widthHeightRatio;\n    pos *= 2.0;\n    //Shift upwards to centre heart\n    pos.y -= 0.06;\n\t\n    float t = iTime * speed;\n    \n    float phaseColor = sin(t * 0.66) * 0.5 + 0.5;\n    vec3 pinkish = vec3(1.0, 0.05, 0.3);\n    vec3 palCol = pal( phaseColor*1.0, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n    // linearize\n    pinkish = pow(palCol, vec3(1./2.2));\n    vec3 blueish = vec3(0.1, 0.2, 1.0);\n    vec3 colA = mix(pinkish, blueish, phaseColor);\n    vec3 colB = mix(blueish, pinkish, phaseColor);\n    \n    float srd = sawRampDown(t * 8.0);\n    srd = pow(srd, 4.0);\n    float pul = pulse(t * 1.0/8.0, 0.125);\n    float pluck = max(0.0, pul * srd);\n    radius += pluck * 0.01;\n    heartscale *=  1.0 + pluck * 0.02 * sawRampDown(t * 1.0);\n    vec2 offset = vec2(sin(t*1.0*TWO_PI), cos(t*1.0*TWO_PI)) * 1.0;\n    float sOffset, sLen;\n    float tempoBit = 1.0/8.0;\n    float tBit = mod(fract(t*tempoBit) * 2.0  + tempoBit * 2.0, 2.0);\n    if (tBit < tempoBit) {\n        float tq = fract((tBit / tempoBit) * 1.0);\n        quantize = int((1.0 - pow(tq, 2.0)*0.5) * 10.0);\n        float upscale = smoothstep(0.0, 1.0, 1.0-pow(1.0-tq, 4.0));\n        heartscale *= 1.0 + upscale * 0.1;\n        // radius += smoothstep(0.0, 1.0, pow(tq, 4.0)) * 0.05;\n    } else if (tBit < tempoBit * 2.0) {\n        float tq = (tBit - tempoBit) / (tempoBit);\n        sLen = tq;\n        tq = 1.0 - tq;\n        sOffset = -(sLen*0.5);\n        radius += smoothstep(0.0, 1.0, tq) * 0.1;\n        heartscale *= 1.0 + smoothstep(0.0, 1.0, tq) * 0.1;\n        intensity *= 1.0 - smoothstep(0.0, 1.0, tq) * 0.15;\n    } else if (tBit < tempoBit * 3.0) {\n        float tq = (tBit - tempoBit * 2.0) / (tempoBit);\n        tq = 1.0 - tq;\n        sLen = tq;\n        sOffset = -(sLen*0.5);\n        intensity *= 1.0 + smoothstep(0.0, 1.0, tq) * 0.5;\n    } else {\n        float tq = (tBit - tempoBit * 3.0) / (2.0 - tempoBit * 3.0);\n        sLen = smoothstep(0.0, 1.0, tq);\n        tq = tri(fract(tq));\t\n        tq = 1.0-pow(1.0-tq, 4.0);\n        sLen *= 1.0 + tq*64.0;\n        intensity *= 1.0 + smoothstep(0.0, 1.0, tq) * 0.15;\n    }\n    if (quantize != 0) {\n        float fsteps = float(int(1) << quantize);\n        vec2 posQuantized = (floor(pos * fsteps)+vec2(0.5)) / fsteps;\n        pos = posQuantized;\n    }\n    \n    int numLoops = pluck > 0.0 ? 3 : 1;\n    vec3 col = vec3(0.0);\n    for (int n = 0; n < numLoops; n++){\n        float lightWhole = getLooped(t, pos);\n        float lightSegment = getSegment(t, pos, \n                                        sOffset, \n                                        sLen\n                                        );\n        float glowWhole = getGlow(lightWhole, radius, intensity * 1.25);\n        float glowSegment = getGlow(lightSegment, radius, intensity * 0.75);\n\n        vec3 col1 = vec3(glowWhole);\n        col1 += vec3(smoothstep(0., 1.0, glowWhole)) * max(0.0, sin(t * 2.0)) * 0.5;\n        col1 *= colA;\n\n        vec3 col2 = vec3(glowSegment);\n        col2 += vec3(smoothstep(0., 1.0, glowSegment)) * max(0.0, sin(t * 2.0)) * 0.5;\n        col2 *= colB;\n\n        col += col1;\n        if (n == 0)\n            col += col2;\n        pos += offset*heartscale * pluck;\n    }\n\n    //Tone mapping\n    col = 1.0 - exp(-col);\n    \n    //Gamma\n    col = pow(col, vec3(0.4545));\n\n    //Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}