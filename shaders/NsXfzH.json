{
    "Shader": {
        "info": {
            "date": "1644971374",
            "description": "Oops! all circles",
            "flags": 0,
            "hasliked": 0,
            "id": "NsXfzH",
            "likes": 17,
            "name": "Oh Hi!",
            "published": 3,
            "tags": [
                "2d",
                "cute",
                "circles"
            ],
            "usePreview": 0,
            "username": "ChrisK",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "#define PI                 3.14159\n\n#define BREATHE_SPEED      1.0\n#define SACCADE_FREQUENCY  1.2\n#define SACCADE_SPEED      7.0\n#define BLINK_PERIOD       5.0\n#define BLINK_SPEED        3.0\n\n#define SCALE_FACTOR       1.0\n#define STROKE_WEIGHT      0.01\n#define EYE_SPACE          0.5\n\n\nfloat distancetocoverage( float d ) {\n    return clamp(d/SCALE_FACTOR*iResolution.y+0.5, 0.0, 1.0);\n}\n\n\nfloat circle( vec2 uv, vec2 p, float r ) {\n    float d = r - distance(uv,p);\n    return distancetocoverage(d);\n}\n\n\nfloat circlestroke( vec2 uv, vec2 p, float r, float t ) {\n    float d = r - distance(uv,p);\n    d = t - abs(d);\n    return distancetocoverage(d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy/iResolution.xy*2.0 - 1.0;\t// camera-space position (-1 => 1)\n    uv.y *= iResolution.y/iResolution.x;\n    \n    //breathing\n    float breathe = sin(iTime*BREATHE_SPEED);\n    \n    //saccades\n    float sn = floor(iTime*SACCADE_FREQUENCY);\n    vec2 saccade = (1.0-abs(cos(sn*67.0))) * vec2(cos(sn*PI*1.618),sin(sn*PI*1.618));\n    sn++;\n    vec2 nextsaccade = (1.0-abs(cos(sn*67.0))) * vec2(cos(sn*PI*1.618),sin(sn*PI*1.618));\n    float st = max( (fract(iTime*SACCADE_FREQUENCY)-1.0)*SACCADE_SPEED+1.0, 0.0);\n    saccade = mix( saccade, nextsaccade, st*st*(3.0-(2.0*st)) );\n    saccade.x *= sign(uv.x);   //flip one eye so that it moves in the same direction after mirroring\n    \n    //blinking\n    float bt = max( mod(iTime,BLINK_PERIOD)-BLINK_PERIOD+1.0, 0.0 );\n    float b = max( (fract(bt)-1.0)*BLINK_SPEED+1.0, 0.0 ) ;\n    float blink = 9.5212*b*(b-0.8)*(b-1.0); // animating with a cubic function for a nice little 'bounce' at the end\n    \n    uv.y += 0.05-0.005*breathe;\n    uv *= SCALE_FACTOR;\n    uv.x = -abs(uv.x) + EYE_SPACE;                                       // mirror\n    float r = (0.15+blink*0.02)*PI;\n    vec2 ruv = vec2( uv.x*cos(r)-uv.y*sin(r), uv.x*sin(r)+uv.y*cos(r) ); // rotated space for outer eye\n    vec2 buv = vec2( ruv.x, ruv.y/(1.0-blink) );                         // squashed space for blinking eyes\n    \n    float aperture = circle( buv, vec2(0.0), 0.25-STROKE_WEIGHT );       // eyelid coverage\n    \n    float eyelids = 0.0;\n    eyelids += circle( buv,vec2(-0.04,0.0),0.3 ) * distancetocoverage(ruv.y);                       // upper lashes\n    eyelids += circle( buv,vec2(-0.04,0.0),0.25 ) * distancetocoverage(-max(ruv.x,ruv.y));          // lower lashes\n    eyelids += circle( buv, vec2(0.25,0.0), 0.04 );                                                 // lacrimal caruncle\n    eyelids += circlestroke( ruv,vec2(0.0),0.325,STROKE_WEIGHT) * circle(ruv,vec2(0.0,0.4),0.375 ); // eye socket upper arch\n    eyelids *= 1.0-aperture;\n\n    float eyeball = 0.0;\n    vec2 ip = vec2(0.03-blink*0.01, -blink*0.05) + saccade*0.01;\n    eyeball += circlestroke( uv, ip, 0.18, STROKE_WEIGHT );                         // limbal ring\n    eyeball += circle( uv, ip, 0.18 ) * (1.0-circle( uv, ip-vec2(0.0,0.5), 0.5 ));  // shadow on upper iris\n    eyeball += circle( uv, ip, 0.13+blink*0.02 );                                   // pupil\n    float glint = circle( uv, ip, 0.025+blink*0.005 );                              // highlight\n    eyeball *= 1.0-glint;\n    float iriscoverage = circle( uv, ip, 0.18+STROKE_WEIGHT ) * (1.0-glint);\n    eyeball *= aperture;\n    \n    float eyebrows = circle(uv,vec2(0.125,-0.05-blink*0.005),0.6) * (1.0-circle(uv,vec2(0.0),0.4)) * circle(uv,vec2(-0.3+blink*0.01,1.2),1.0);\n    \n    float nose = 0.0;\n    float nh = -0.2+blink*0.002;\n    nose += circlestroke( uv, vec2(EYE_SPACE,nh), 0.125, STROKE_WEIGHT ) * circle(uv,vec2(EYE_SPACE,nh+0.4),0.4); //nose\n    nose += circle( uv, vec2(EYE_SPACE-0.05,nh+0.02), STROKE_WEIGHT*2.0+0.001*breathe );                          //nostril\n    \n    float mouth = 0.0;\n    float mh = -0.2;\n    mouth += circlestroke( uv, vec2(EYE_SPACE,mh+0.05), 0.25, STROKE_WEIGHT ) * distancetocoverage(mh-uv.y);                             //smile curve\n    mouth += circle( uv, vec2(EYE_SPACE-0.245,mh), STROKE_WEIGHT*(2.0+blink*0.1) );                                                      //mouth corners\n    //mouth += circlestroke( uv, vec2(EYE_SPACE,-0.9+blink*0.002), 0.625, STROKE_WEIGHT*1.0 ) * circle( uv, vec2(EYE_SPACE,-0.15), 0.25 ); //upper lip\n    //aperture += circle( uv, vec2(EYE_SPACE,-0.9+blink*0.002), 0.625 ) * circle( uv, vec2(EYE_SPACE,-0.15), 0.25 );\n    \n    float face = 0.0;\n    face += eyelids;\n    face += eyeball;\n    face += eyebrows;\n    face += nose;\n    face += mouth;\n    face = clamp( face, 0.0, 1.0 );\n    \n    vec3 col = vec3(1.0,0.6,0.4);\n    col -= vec3(0.0,0.35,0.3) * clamp(1.0-distance(uv*vec2(1.0,2.5),vec2(EYE_SPACE,-0.3)),0.0,1.0);  //blush\n    col = mix(col, mix(vec3(1.0), vec3(0.1,0.7,1.0), iriscoverage), aperture);  //eye colours\n    //col *= circle( uv*vec2(1.0,1.5+blink*0.02), vec2(EYE_SPACE,0.15), 1.0 );\n    col *= 1.0-face;\n    col = pow( col, vec3(0.45) );\t\t\t\t//gamma adjustment\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}