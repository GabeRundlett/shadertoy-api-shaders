{
    "Shader": {
        "info": {
            "date": "1526272544",
            "description": " ",
            "flags": 0,
            "hasliked": 0,
            "id": "4ddfz4",
            "likes": 12,
            "name": "Pierced_torus",
            "published": 3,
            "tags": [
                "raymarching",
                "torus"
            ],
            "usePreview": 0,
            "username": "balkhan",
            "viewed": 578
        },
        "renderpass": [
            {
                "code": "/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\n#define I_MAX\t150\n#define E\t\t0.00001\n\nfloat\tsdTorus( vec3 p, vec2 t );\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec2\trot(vec2 p, vec2 ang);\nfloat\tmylength(vec3 p);\nfloat\tmylength(vec2 p);\nvoid\trotate(inout vec2 v, float angle);\n\nfloat\tt;\nvec3\th;\nfloat\tmind;\n\nvoid mainImage(out vec4 o, in vec2 f )\n{\n    h = vec3(0.);\n    t = iTime;\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec4\tcol = vec4(0.0);\n    vec3\tpos = vec3(.0, .0, 5.0);\n\n    vec2\tinter = (march(pos, dir));\n\n    col.xyz += h;\n    o.xyz = col.xyz;\n}\n\nfloat\tscene(vec3 p)\n{\n    mind = 1e5;\n    p.z-= -30.;\n    rotate(p.zy, iTime*.25);\n\tvec3\tap = p;\n    \n    vec2 q = vec2(length(p.xy)-25., p.z);\n    float at = atan(ap.x, ap.y);\n\n    float to = cos(at*40.);\n    to = cos(iTime*3.+ ( atan(q.x, q.y)*8.) +at*20.);\n    \n    mind = length(q)-14.-to*.025;\n    mind = max(mind, to);\n    mind = max(mind, -(length(q)-13.998) );\n    h += .00125*vec3(.8, .62, 1.1)*1./max(mind*mind*.1+0.071, .00001);\n    return(mind);\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec2\ts = vec2(0.0);\n\tvec3\tdirr;\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n        dirr = dir;\n        #ifdef WOBBLY\n        rotate(dirr.xz, sin(t*2.+dist.y*.07)*.07);\n        rotate(dirr.zy, sin(t*3.+dist.y*.07)*.07);\n        #endif\n        //rotate(dirr.xz, +dist.y*.000+.25*sin(t*.25+dist.y*.005) );\n    \tp = pos + dirr * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E || dist.y > 500.)\n        {\n           break;\n\t    }\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.xy)-t.x,p.z);\n\n    return length(q)-t.y;\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nfloat\tmylength(vec2 p)\n{\n\treturn max(abs(p.x), abs(p.y));\n}\n\nfloat\tmylength(vec3 p)\n{\n\treturn max(max(abs(p.x), abs(p.y)), abs(p.z));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}