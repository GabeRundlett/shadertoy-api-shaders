{
    "Shader": {
        "info": {
            "date": "1723612718",
            "description": "original fractal 62 from gaz",
            "flags": 0,
            "hasliked": 0,
            "id": "4clfDn",
            "likes": 1,
            "name": "fractalic space 3",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 67
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define resolution iResolution\n\n\n#define pi acos(-1.0)\n#define pi2 2.0 * pi\n\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n\n\n#define repeat(p,w) mod(p, w) - (w * 0.5)\n\n\nfloat sd(vec3 p, float r)\n{\np.yz *= rot(pi * 0.25*iTime);\n  return length(p) - r;\n}\n\n// cube distance\nfloat cd(vec3 p, vec3 s)\n{\np.xz *= rot(pi * 0.25*iTime);\n  return length(max(vec3(0.0), abs(p) - s));\n}\n\nfloat sdBox(vec3 p, vec3 s)\n{\np.xz *= rot(pi * 3.25*iTime);\n  p = abs(p) - s;\n\n  return max(p.x, max(p.y, p.z));\n}\n\n// 回転Fold\nvec2 pmod(vec2 p, float s)\n{\n  // sは分割数(segment)\n  float n = pi2 / s;\np.xy *= rot(pi * 0.25*iTime);\n  // 分割角度の半分をオフセットとして渡す\n  float a = atan(p.x, p.y) + n * 0.5;\n\n  a = floor(a / n) * n;\n\n  return p * rot(-a);\n}\n\nfloat map(vec3 p)\n{\n \n  vec3 z = p;\n  float scale = 2.0;\n  float sum = scale;\n  float d = 10000.;\n z.xz *= rot(pi * 0.25*iTime);\n  for(float i = 0.0; i < 10.0; i++)\n  {\n    float td = sdBox(z, vec3(0.5)) / sum;\n\n    z = abs(z) - vec3(0.0, 2.0, 0.0);\nz.z+=cos(iTime);\n    // 回転\n    // ここではループのたびに45度ずつ回転している\n    z.xy *= rot(pi * 0.25*iTime);\nz.yz *= rot(pi * 0.25*iTime);\n   \n    z *= scale;\n z.xz *= rot(pi * 0.25*iTime);\n   \n    sum *= scale;\n\n    d = min(td, d);\n  }\n\n  return d;\n}\n\nvec3 gn(vec3 p)\n{\n p.xz *= rot(pi * 0.25*iTime);\n  vec2 e = vec2(0.001, 0.0);\n\n  return normalize(vec3(\n      map(p + e.xyy) - map(p - e.xyy),\n      map(p + e.yxy) - map(p - e.yxy),\n      map(p + e.yyx) - map(p - e.yyx)\n    ));\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(10.,23,21))*.5+.5)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 st = (fragCoord.xy * 2.0 - resolution.xy) / min(resolution.x, resolution.y);\n  st.xy *= rot(iTime);\n  vec3 col = vec3(0.0);\n\n  float screenZ = 2.5;\n\n  vec3 ro = vec3(0.0, 0.0, -10.0);\n  vec3 rd = normalize(vec3(st, screenZ));\n  \n  \n   float depth = 0.0;\n  for(int i = 0; i < 64; i++)\n  {\n   \n    float d= map(ro + rd * depth);\n\n    if(d < 0.001){\n      vec3 n = gn(ro + rd * depth);\n\n      col = vec3(n * 0.5 + 0.5);\n      break;\n    }\n\n    depth += d;\n  }\nvec4 O =fragColor;\n vec2 C= fragCoord;\n  O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(1),H(g*.1),.8)*1./e/8e3\n    )\n    {\n        p=g*d;\n        p.xz+=pmod(p.xz,iTime);\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=2.4;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.4+sin(10.)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+sin(iTime*.3+.5*sin(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 )*col;\n         }\n         g+=e=length(p.yz)/s;\n    }\n \n\n  fragColor = vec4(O);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}