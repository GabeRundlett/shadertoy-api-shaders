{
    "Shader": {
        "info": {
            "date": "1631058676",
            "description": "[url=https://www.youtube.com/watch?v=gjtTcyWL0NA]https://www.youtube.com/watch?v=gjtTcyWL0NA[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "NdVGRh",
            "likes": 21,
            "name": "Area of a Squircle",
            "published": 3,
            "tags": [
                "math",
                "area",
                "squircle"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "// Desmos graph: https://www.desmos.com/calculator/627ebn1ycs\n#define drawSDF(dist, col) color = mix(color, col.rgb, smoothstep(unit, 0.0, dist) * col.a)\n\n// https://www.shadertoy.com/view/3lfGD7\nfloat Gamma(in float x) {\n    const float pi = 3.14159265359;\n    float xx = x > 1.0 ? x : 1.0 - x;\n    float sum = 2.506628275635 + 225.525584619175 / (xx + 1.0) - 268.295973841305 / (xx + 2.0) + 80.9030806934622 / (xx + 3.0) - 5.007578639705 / (xx + 4.0) + 0.0114684895435 / (xx + 5.0);\n    float xh = xx + 5.65;\n    float y = exp((xx + 0.5) * log(xh) - xh) * sum / xx;\n    return x > 1.0 ? y : pi / (y * sin(pi * x));\n}\n\n// For general r, multiply by r^2\nfloat squircleArea(in float n) {\n    float a = Gamma(1.0 + 1.0 / n);\n    return 4.0 * a * a / Gamma(1.0 + 2.0 / n);\n}\n\nfloat dfSquircle(in vec2 p, in float r, in float n) {\n    return pow(pow(abs(p.x), n) + pow(abs(p.y), n), 1.0 / n) - r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(0.0, 0.169, 0.212);\n\n    // Shift the graph down and to the left side of the screen\n    vec2 shift = vec2(4.0 * iResolution.x / iResolution.y, 4.0);\n    uv += shift;\n\n    // Grid\n    drawSDF(abs(fract(uv.x + 0.5) - 0.5) + 0.25 * unit, vec4(0.0, 0.25, 0.5, 1.0));\n    drawSDF(abs(fract(uv.y + 0.5) - 0.5) + 0.25 * unit, vec4(0.0, 0.25, 0.5, 1.0));\n\n    // Draw the function\n    vec2 y = vec2(squircleArea(uv.x), 0.0);\n    y.y = (squircleArea(uv.x + 0.001) - y.x) / 0.001;\n    drawSDF(abs(uv.y - y.x) / sqrt(1.0 + y.y * y.y) - 0.01, vec4(1.0, 0.0, 0.8, 1.0));\n\n    uv -= shift;\n\n    float n = mix(0.5, 10.0, 0.5 + 0.5 * sin(0.5 * iTime));\n    float r = 2.0;\n\n    float eps = 0.001;\n    float squircle = dfSquircle(uv, r, n);\n    squircle /= length((vec2(dfSquircle(uv + vec2(eps, 0.0), r, n), dfSquircle(uv + vec2(0.0, eps), r, n)) - squircle)) / eps;\n\n    uv += shift;\n    drawSDF(abs(uv.x - n), vec4(1.0, 0.0, 0.0, 1.0));\n    drawSDF(length(uv - vec2(n, squircleArea(n))) - 0.1, vec4(1.0, 0.8, 0.0, 1.0));\n\n    drawSDF(squircle, vec4(0.0, 1.0, 0.0, 0.25));\n    drawSDF(abs(squircle), vec4(0.0, 1.0, 0.0, 1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}