{
    "Shader": {
        "info": {
            "date": "1692188122",
            "description": "Second round of the shader battle for Demodulation2023 won the 2nd place\nConverted using https://github.com/TheNuSan/BonzomaticToShadertoy",
            "flags": 32,
            "hasliked": 0,
            "id": "DtjcRd",
            "likes": 10,
            "name": "Demodulation2023 round 2",
            "published": 3,
            "tags": [
                "shadershowdown",
                "demodulation"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n// Converted using NuSan's converter\n// https://github.com/TheNuSan/BonzomaticToShadertoy\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texture(iChannel0, fragCoord.xy/iResolution.xy).xyz;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n// Converted using NuSan's converter\n// https://github.com/TheNuSan/BonzomaticToShadertoy\n\nfloat _seed = 0.0;\n\nfloat hash11(float seed)\n{\n    return fract(sin(seed * 123.456) * 123.456);\n}\n\nfloat rand()\n{\n    float _52 = _seed;\n    _seed = _52 + 1.0;\n    float param = _52;\n    return hash11(param);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.0, 1.0, 0.0)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize((rd + (r * uv.x)) + (u * uv.y));\n}\n\nmat2 r2d(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(vec2(c, -s), vec2(s, c));\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p) - s;\n    return max(l.x, max(l.y, l.z));\n}\n\nfloat map(inout vec3 p)\n{\n    vec3 rep = vec3(7.0);\n    vec3 id = floor((p + (rep * 0.5)) / rep);\n    p = mod(p + (rep * 0.5), rep) - (rep * 0.5);\n    float param = iTime * sin(id.x);\n    vec3 _149 = p;\n    vec2 _151 = _149.xy * r2d(param);\n    p.x = _151.x;\n    p.y = _151.y;\n    float param_1 = (iTime * 1.73) * sin(id.y * 0.78);\n    vec3 _167 = p;\n    vec2 _169 = _167.yz * r2d(param_1);\n    p.y = _169.x;\n    p.z = _169.y;\n    vec3 param_2 = p;\n    vec3 param_3 = vec3(1.5);\n    float shape = _cube(param_2, param_3);\n    shape = max(shape, -(length(p.xy) - 1.0));\n    shape = max(shape, -(length(p.xz) - 1.0));\n    shape = max(shape, -(length(p.yz) - 1.0));\n    return shape;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.0);\n    float _208 = rand();\n    float _209 = rand();\n    vec2 off = ((vec2(_208, _209) - vec2(0.5)) * 0.1) * 0.0;\n    vec3 ro = vec3(sin(iTime * 0.33) * 5.0, 5.0, -5.0);\n    vec3 _227 = ro;\n    vec2 _229 = _227.xy + (off * 1.5);\n    ro.x = _229.x;\n    ro.y = _229.y;\n    float param = floor(iTime);\n    float param_1 = floor(-iTime);\n    vec3 ta = vec3(5.0 * (hash11(param) - 0.5), 5.0 * (hash11(param_1) - 0.5), 0.0);\n    vec3 rd = normalize(ta - ro);\n    vec3 _257 = rd;\n    vec2 _259 = _257.xy - (off * 0.05);\n    rd.x = _259.x;\n    rd.y = _259.y;\n    vec3 param_2 = rd;\n    vec2 param_3 = uv;\n    rd = getCam(param_2, param_3);\n    vec3 p = ro;\n    for (int i = 0; i < 128; i++)\n    {\n        vec3 param_4 = p;\n        float _287 = map(param_4);\n        float res = _287;\n        if (res < 0.01)\n        {\n            col = vec3(0.1);\n            vec3 rgb = vec3((sin(iTime + abs(uv.x * 5.0)) * 0.5) + 0.5, 0.5, (cos(iTime * 0.3) * 0.3) + 0.7);\n            col = (rgb * clamp(sin((length(p) * 100.0) + (iTime * 30.0)), 0.0, 1.0)) * 3.0;\n        }\n        p += (rd * res);\n    }\n    float d = distance(p, ro);\n    col = mix(col, vec3(0.5, 0.2, 0.9) * (1.0 - (abs(uv.y) * 3.0)), vec3(1.0 - exp((-d) * 0.05)));\n    return col;\n}\n\nvoid mainImage( out vec4 out_color, in vec2 fragCoord )\n{\n    vec2 ouv = fragCoord.xy / iResolution.xy;\n    vec2 uv = vec2(fragCoord.x / iResolution.xy.x, fragCoord.y / iResolution.xy.y);\n    uv -= vec2(0.5);\n    uv /= vec2(iResolution.xy.y / iResolution.xy.x, 1.0);\n    float pix = mix(0.001, 0.02, length(uv));\n    _seed = texture(iChannel2, uv).x + iTime;\n    vec2 m = vec2(0.0);\n    m.x = atan(uv.x / uv.y) / 3.14;\n    m.y = (1.0 / length(uv)) * 0.2;\n    float d = m.y;\n    float f = texture(iChannel0, vec2(abs(uv.x) - abs(uv.y), 0.)).x * 5.0;\n    vec3 col = (vec3((sin(iTime + abs(uv.x * 5.0)) * 0.5) + 0.5, 0.5, (cos(iTime * 0.3) * 0.3) + 0.7) * f) * clamp(length(uv) - 0.35, 0.0, 1.0);\n    vec2 param = uv;\n    vec3 _468 = rdr(param);\n    col += _468;\n    float _472 = rand();\n    float _473 = rand();\n    vec2 param_1 = uv + ((vec2(_472, _473) - vec2(0.5)) * 0.05);\n    vec3 _480 = rdr(param_1);\n    col += (pow(_480, vec3(4.0)) * 0.1);\n    // Commented the logo bit :p\n    //vec3 col2 = texture(texLogo, (vec2(1.0, -1.0) * uv) - vec2(0.5)).xyz;\n    //col2 += (col.yzx * 0.5);\n    //float ring = sin(length(uv) - (iTime * 2.0));\n    //col = mix(col, col2, vec3(clamp(ring * 100.0, 0.0, 1.0)));\n    col = mix(col, texture(iChannel1, ouv).xyz, vec3(0.5));\n    out_color = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}