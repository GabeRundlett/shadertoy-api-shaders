{
    "Shader": {
        "info": {
            "date": "1627080368",
            "description": "aaaaaaaaa code messy, fun event. big thanks to Monsieur Soleil for organizing, I'll update with vod when available. \n\nthe fft on shadertoy is a bit messed up, sorry.",
            "flags": 64,
            "hasliked": 0,
            "id": "NtjXzh",
            "likes": 5,
            "name": "Gyroidal Confusion [livecode]",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "gyroid",
                "soundcloud",
                "twitch",
                "livecode",
                "shaderjam"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 359
        },
        "renderpass": [
            {
                "code": "\n#define STEPS 164.0\n#define MDIST 200.0\n#define time iTime\n#define pmod(p,x) (mod(p,x)-(x)*0.5)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pi 3.1415926535\nfloat g1 = 0.0;\nfloat anim(){\n  return fract(time*0.15);\n}\nfloat smin(float a, float b, float k){\n  float h = max(0.0,k-abs(a-b));\n  return min(a,b)-h*h*0.25/k;\n}\n\nfloat smax(float a, float b, float k){\n  float h = max(0.0,k-abs(a-b));\n  return max(a,b)-h*h*0.25/k;\n}\n\nfloat gy(vec3 p){\n  return dot(sin(p.xyz),cos(p.yzx));\n}\nfloat box( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nvec2 map(vec3 p){\n  vec3 po = p;\n  float streamfft = 0.02;\n  float t = mod(time,300.0);\n  vec2 a = vec2(0);\n  vec2 b = vec2(1);\n  //bottom plane gyroid\n  \n  b.x = gy(p*2.0+(t*2.0+5.0*texelFetch( iChannel0, ivec2(64,0), 0 ).x*vec3(1,-1,0)));\n  b.x*=0.55;\n  //bottom plane\n  a.x = p.y+1.0-sin(p.x*2.5+t)*0.15-sin(p.z*2.5+t)*0.05;\n  \n  a.x = max(b.x,a.x);\n  \n  float voff = texelFetch( iChannel0, ivec2(16.0,0), 0 ).x*streamfft*1.5;\n  //voff=clamp(voff,0.0,12.0/800.0);\n  //ball gyriod\n  float ballsize = 2.5;\n  if(anim()>0.5){\n    //p.xz = pmod(p.xz,30.0);\n    ballsize = 3.0+voff*500.0;\n    \n  }\n  ballsize = clamp(ballsize,1.5,15.0);\n  b.x = abs(abs(gy(-p*3.0+t+8.0*streamfft*texelFetch( iChannel0, ivec2(64,0), 0 ).x))-0.6)-0.2;\n  b.x*=0.4;\n  //ball\n  \n  //p.y = pmod(p.y+sin(t)*3.0,10.0);\n  p.xz*=rot(t);\n  //p.yz*=rot(t);\n  float ballcut = box(p-vec3(0,1.0+voff*125.0,0),vec3(ballsize));\n  p = po;\n  ballcut = mix(ballcut, length(p-vec3(0,voff*125.0,0))-ballsize,sin(time*2.0)*0.5+0.5);\n  b.x = smax(b.x,ballcut,0.2);\n  p = po;\n  \n  a = (a.x<b.x)?a:b;\n  t*=0.5;\n  float tt = pow(fract(t),3.0)+floor(t);\n  \n  tt*=pi/2.0;\n  \n  b.y = 2.0;\n  p.xy*=rot(tt);\n  \n  float moddist = 20.0+voff*500.0;\n  p.xz = pmod(p.xz,moddist);\n  b.x = length(p.xz)-1.5-clamp(sin(p.y*1.5),0.0,0.2);\n  a = (a.x<b.x)?a:b;\n  p = po;\n  \n  p.xy*=rot(tt);\n  p.xy = pmod(p.xy,moddist);\n  b.x = length(p.xy)-1.5-clamp(sin(p.z*1.5),0.0,0.2);\n  a = (a.x<b.x)?a:b;\n  \n  p = po;\n  \n  p.xy*=rot(tt);\n  p.yz = pmod(p.yz,moddist);\n  b.x = length(p.yz)-1.5-clamp(sin(p.x*1.5),0.0,0.2);\n  a = (a.x<b.x)?a:b;\n  p = po;\n  t = iTime;\n  \n  p-=vec3(0,t*5.0,0);\n  p=pmod(p,23.0);\n  \n  b.x = length(p)-2.0;\n  g1+=0.01/(0.01+b.x*b.x);\n  a = (a.x<b.x)?a:b;\n  \n  \n  return a;\n}\nvec3 norm(vec3 p){\n  vec2 e = vec2(0.01,0.0);\n  return normalize(map(p).x - vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n  vec3 col= vec3(0.0);\n  float t = time;\n  vec3 ro = vec3(0,3,-17);\n  vec3 rd = normalize(vec3(uv,1.0));\n  if(anim()>0.5){\n    ro = vec3(0,100,0);\n    uv.xy*=rot(time);\n    rd = normalize(vec3(uv,1.0));\n    rd.yz*=rot(-pi/2.0);\n    \n  }\nelse{\n  rd.yz*=rot(-0.25);\n   ro.xz*=rot(t*0.4);\n  rd.xz*=rot(t*0.4);\n}\n\n  \n  \n \n  float shad,dO;\n  vec2 d;\n  vec3 p = ro;\n  bool hit = false;\n  for(float i = 0.0; i <STEPS; i++){\n    \n    p = ro+rd*dO;\n    d = map(p);\n    d.x = max(-(length(p-vec3(ro))-5.0),d.x);\n    dO+=d.x*.9;\n    \n    if(abs(d.x)<0.01){\n      shad = i/STEPS;\n      hit = true;\n      break;\n    }\n    if(dO>MDIST){\n      break;\n    }\n    if(i == STEPS-1.0){\n      hit = true;\n    }\n  }\n  vec3 al = vec3(0);\n  vec3 n = norm(p);\n  vec3 ld = normalize(vec3(1));\n  vec3 h = normalize(ld-rd);\n  float spec = pow(max(dot(n,h),0.0),20.0);\n  \n  \n  if(hit){\n    if(d.y == 0.0){\n      al = vec3(0.1,0.3,0.9);\n      col+=spec*0.2;\n      shad = 0.8-shad*4.0;\n    }\n    if(d.y == 1.0){\n      al = vec3(0.9,0.1,0.1);\n      col+=spec*0.3;\n      shad = 0.7-shad*4.0;\n    }\n    if(d.y == 2.0){\n      al = vec3(0.7,0.7,0.9)*0.6;\n      shad = 1.0-shad;\n     \n    }\n    \n  col += vec3(1.0-shad)*al;\n  \n  col = pow(col,vec3(0.8));\n     }\n  col+=g1*vec3(0.3,0.3,0.8)*0.3;\n  col = mix(clamp(col,0.0,1.0),vec3(0.4,0.0,0.0),(dO/MDIST));\n  //uv = vec2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y);\n  \n  //col+=texture(texPreviousFrame,uv*0.5+0.5).rgb*0.3;\n\tfragColor = vec4(col,0.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 27856,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/surrealrecordings/jkuch-innocence"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}