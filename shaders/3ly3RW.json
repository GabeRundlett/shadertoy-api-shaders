{
    "Shader": {
        "info": {
            "date": "1578423686",
            "description": "txaa + sharpener\n\nlooks pretty stable on the shaking video :P",
            "flags": 32,
            "hasliked": 0,
            "id": "3ly3RW",
            "likes": 3,
            "name": "txaa + sharpener",
            "published": 3,
            "tags": [
                "temporal",
                "txaa",
                "sharpener"
            ],
            "usePreview": 0,
            "username": "SigSegOwl",
            "viewed": 603
        },
        "renderpass": [
            {
                "code": "//left right comparison\n//left just unprocessed buffer A\n//right txaa + sharpening\n//move mouse up or down wile holding to adjust sharpness\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;                    \n\tvec2 uvMouse = iMouse.xy/iResolution.xy;               \n\tif(uv.x > uvMouse.x){\n\t\tfragColor = texture(iChannel0, uv);             \n\t}else{\n\t\tfragColor = texture(iChannel1, uv);  \n    }\n    if(uv.x > uvMouse.x - 0.002 && uv.x < uvMouse.x + 0.002){\n    \tfragColor = vec4(1.0,1.0,1.0,1.0);\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//just filling buffer A for easier testing...\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;  \n    \n    fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Used and adapted txaa from https://www.shadertoy.com/view/4tcXD2\n// thx btw :)\n\n// Temporal AA based on Epic Games' implementation:\n// https://de45xmedrsdbp.cloudfront.net/Resources/files/TemporalAA_small-59732822.pdf\n// \n// Originally written by yvt for https://www.shadertoy.com/view/4tcXD2\n// Feel free to use this in your shader!\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 lastColor = texture(iChannel1, uv);\n    \n    vec3 antialiased = lastColor.xyz;\n    float mixRate = clamp(lastColor.w, 0.01, 0.5);\n    \n    vec2 off = 1.0 / iResolution.xy;\n    vec3 in0 = texture(iChannel0, uv).xyz;\n    \n    antialiased = mix(antialiased * antialiased, in0 * in0, mixRate);\n    antialiased = sqrt(antialiased);\n    \n    vec3 in1 = texture(iChannel0, uv + vec2(+off.x, 0.0)).xyz;\n    vec3 in2 = texture(iChannel0, uv + vec2(-off.x, 0.0)).xyz;\n    vec3 in3 = texture(iChannel0, uv + vec2(0.0, +off.y)).xyz;\n    vec3 in4 = texture(iChannel0, uv + vec2(0.0, -off.y)).xyz;\n        \n    vec3 minColor = min(min(min(in0, in1), min(in2, in3)), in4);\n    vec3 maxColor = max(max(max(in0, in1), max(in2, in3)), in4);\n\n   \tvec3 preclamping = antialiased;\n    antialiased = clamp(antialiased, minColor, maxColor);\n    \n    mixRate = 1.0 / (1.0 / mixRate + 1.0);\n    \n    vec3 diff = antialiased - preclamping;\n    float clampAmount = dot(diff, diff);\n    \n    mixRate += clampAmount * 4.0;\n\n    fragColor = vec4(antialiased, mixRate);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// sharpening filter\n\nvec3 texSample(const int x, const int y, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n\treturn texture(iChannel0, uv).xyz;       \n}                                         \nvec3 sharpenFilter(in vec2 fragCoord, float strength){\n\tvec3 f =\n\ttexSample(-1,-1, fragCoord) *  -1. +                     \n\t//texSample( 0,-1, fragCoord) *  -1. +                    \n\ttexSample( 1,-1, fragCoord) *  -1. +                      \n\t//texSample(-1, 0, fragCoord) *  -1. +                    \n\ttexSample( 0, 0, fragCoord) *   5. +                     \n\t//texSample( 1, 0, fragCoord) *  -1. +                      \n\ttexSample(-1, 1, fragCoord) *  -1. +                     \n\t//texSample( 0, 1, fragCoord) *  -1. +                     \n\ttexSample( 1, 1, fragCoord) *  -1.\n\t;                                              \n\treturn mix(texSample( 0, 0, fragCoord), f , strength);    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){    \n\tvec2 uv = fragCoord/iResolution.xy;                    \n\tvec2 uvMouse = iMouse.xy/iResolution.xy;               \n\tif(uv.x > uvMouse.x){\n\t\tfragColor = vec4(sharpenFilter(fragCoord, uvMouse.y * 0.5),1.0);             \n\t}else{\n\t\tfragColor = vec4(texSample( 0, 0, fragCoord),1.0);\n    }\n    if(uv.x > uvMouse.x - 0.002 && uv.x < uvMouse.x + 0.002){\n    \tfragColor = vec4(1.0,1.0,1.0,1.0);\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}