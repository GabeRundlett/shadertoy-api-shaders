{
    "Shader": {
        "info": {
            "date": "1665154310",
            "description": "analyze sound using textures as memory",
            "flags": 32,
            "hasliked": 0,
            "id": "stVfzV",
            "likes": 1,
            "name": "SoundMemory",
            "published": 3,
            "tags": [
                "sound"
            ],
            "usePreview": 0,
            "username": "ilia87",
            "viewed": 109
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //float c0 = texelFetch(iChannel0,ivec2(fragCoord),0).x;\n    //float c1 = texelFetch(iChannel1,ivec2(fragCoord),0).x;\n    //float c2 = texelFetch(iChannel2,ivec2(fragCoord),0).x;\n    //fragColor = vec4(c0,c1,c2,1.);\n    \n    //fragColor = texelFetch(iChannel2,ivec2(fragCoord),0)*10.;\n    //fragColor.x=0.;\n    //fragColor.z=0.;\n    //fragColor.w=1.0;\n    //fragColor *= fragColor;\n    \n    vec4 peakFinder = texelFetch(iChannel3,ivec2(0,fragCoord.y),0);\n    vec2 origTimeFrame = texelFetch(iChannel3,ivec2(1,fragCoord.y),0).xy;\n    fragColor = vec4(0,0,0,1);\n    if (uv.x < 0.2 )\n    {\n        fragColor.y = texelFetch(iChannel1,ivec2(fragCoord),0).x*10.;\n    }\n    else if (uv.x < 0.4)\n    {\n        fragColor.x = texelFetch(iChannel0,ivec2(fragCoord),0).x;\n    }\n    else if (uv.x < 0.5)\n    {\n        fragColor.x = peakFinder.x*10.;\n    }\n    else if (uv.x <0.6)\n    {\n        fragColor.y = peakFinder.y*3.;\n    }\n    else if (uv.x < 0.7)\n    {\n        fragColor.z = mod(peakFinder.z,3.0)/3.0;\n    }\n    else if (uv.x < 0.8)\n    {\n        fragColor.xyz = vec3(3.*peakFinder.y * ThresholdDecay(origTimeFrame.x - peakFinder.z));\n    }\n    else\n    {\n        int ycoord = iFrame % int(iResolution.y);\n        float accumulated = texelFetch(iChannel3,ivec2(0,ycoord),0).w;\n        float circleCenter = fract(accumulated);\n        if ( length(uv - vec2(0.9,circleCenter)) < 0.05)\n        {\n            fragColor.xyz = hsv2rgb(vec3(accumulated,1.,1.));\n        }\n        else\n        {\n            fragColor.xyz = vec3(0.);\n        }\n    }\n    \n    //fragColor.x = texelFetch(iChannel0,ivec2(fragCoord),0).z;\n    //fragColor.x *= fragColor.x;\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define windowWidth 8\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n\n    int soundBuffLen = textureSize(iChannel1,0).x;\n    \n    float soundBuffTime = float(soundBuffLen) / iSampleRate;\n    int ycoord = iFrame % int(iResolution.y);\n    if (ycoord != int(fragCoord.y))\n        return;\n    if (int(fragCoord.x) >= soundBuffLen )\n        return;\n    int pixelX = int(fragCoord.x);\n    float s  = texelFetch(iChannel1,ivec2(pixelX,0),0).x;\n    float sums = s;\n    float maxs = s;\n    for ( int i=1;i<windowWidth;++i)\n    {\n        float s  = texelFetch(iChannel1,ivec2(pixelX + i, 0),0).x;\n        sums += s;\n        maxs = max(maxs,s);\n    }\n    sums /= float(windowWidth);\n    //vec2 s  = texelFetch(iChannel1,ivec2(int(uv.x * float(soundBuffLen)),1),0).xy;\n    fragColor.x = s;\n    fragColor.y = sums;\n    fragColor.z = maxs;\n    fragColor.w = 1.0;    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define soundBuffLen 512\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);    \n    int ycoord = iFrame % int(iResolution.y);\n    if (ycoord != int(fragCoord.y))\n        return;\n    //vec2 uv = fragCoord / iResolution.xy;\n    \n    if (int(fragCoord.x) >= soundBuffLen )\n        return;\n    vec4 xn  = texelFetch(iChannel1,ivec2(int(fragCoord.x), ycoord),0);\n    int prevYCoord = ycoord - 1;\n    if (prevYCoord < 0)\n        prevYCoord += int(iResolution.y);\n    vec4 xnm1  = texelFetch(iChannel1,ivec2(int(fragCoord.x), prevYCoord),0);\n    vec4 ynm1 = texelFetch(iChannel0,ivec2(int(fragCoord.x), prevYCoord),0);\n    float alpha = 0.5;\n    //vec4 yn = alpha*(ynm1 + xn - xnm1);\n    vec4 yn = xn-xnm1;\n    \n    fragColor = yn;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define soundBuffLen 512\n#define windowWidth 512\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);    \n    int ycoord = iFrame % int(iResolution.y);\n    if (ycoord != int(fragCoord.y))\n        return;\n\n    if (int(fragCoord.x) >= soundBuffLen )\n        return;\n    vec4 maxs = vec4(0.);\n    for ( int i=0;i<windowWidth;++i)\n    {\n        vec4 s  = texelFetch(iChannel1,ivec2(int(fragCoord.x) + i, ycoord),0);\n        maxs = max(maxs,s);\n    }\n    //vec2 s  = texelFetch(iChannel1,ivec2(int(uv.x * float(soundBuffLen)),1),0).xy;\n    //float newValue = sums/float(windowWidth);\n    //ivec2 prevCoord = ivec2(fragCoord);\n    //prevCoord.y -= 1;\n    //prevCoord.y = prevCoord.y % int(iResolution.y);\n    //float prevValue = texelFetch(iChannel0,prevCoord,0).x;\n    //fragColor = vec4(newValue * 20./*-prevValue*/,0.,0.,1.);\n    fragColor = maxs;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define windowStart 0\n#define windowEnd 16\n#define COMPONENT x\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n    if ( int(fragCoord.x) > 1)\n        return;\n    int ycoord = iFrame % int(iResolution.y);\n    if (ycoord != int(fragCoord.y))\n        return;\n    if (int(fragCoord.x) == 1)\n    {\n        fragColor.x = iTime;\n        fragColor.y = float(iFrame);\n        return;\n    }\n    float mx = 0.;\n    for ( int i=windowStart;i<windowEnd ; ++i)\n    {\n        mx = max(mx,texelFetch(iChannel1,ivec2(i, ycoord),0).COMPONENT);\n    }\n    fragColor.x = mx;\n    int prevYCoord = ycoord - 1;\n    if (prevYCoord < 0)\n        prevYCoord += int(iResolution.y);\n    vec4 prevPixel = texelFetch(iChannel0,ivec2(0,prevYCoord),0);\n    float prevPeak = prevPixel.y;\n    float prevPeakTime = prevPixel.z;\n    float threshold = prevPeak * ThresholdDecay(iTime - prevPeakTime);\n    //float t = iTime - prevPeakTime;\n    //t/=2.0;\n    //t *= t*t;\n    //float threshold = prevPeak * (1.-smoothstep(0.,1.0,t));\n    float newPeak = prevPeak;\n    float newPeakTime = prevPeakTime;\n    if (mx > threshold || iFrame<5)\n    {\n        //New peak\n        newPeak = mx;\n        newPeakTime = iTime;\n    }\n    fragColor.y = newPeak;\n    fragColor.z = newPeakTime;    \n    if ( iFrame < 5)\n    {\n        fragColor.w = 0.0;\n    }\n    else\n    {\n        float prevAccumulated = prevPixel.w;\n        float speed = pow(0.1,iTime - prevPeakTime);\n        float peakNormalized = smoothstep(0.,0.05,newPeak);\n        speed *= pow(peakNormalized,4.0);\n        speed += 0.1*pow(peakNormalized,0.5);\n        speed = smoothstep(0.,1.,speed);\n        //intensity *= intensity;\n        fragColor.w = prevAccumulated + iTimeDelta * speed;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float ThresholdDecay( float t )\n{\n    return pow(0.8,t);\n}\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}