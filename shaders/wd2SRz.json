{
    "Shader": {
        "info": {
            "date": "1552779605",
            "description": "Look at the wind go. Just a quick experiment with using noise for color movement.",
            "flags": 32,
            "hasliked": 0,
            "id": "wd2SRz",
            "likes": 12,
            "name": "My Carpet On a Windy Day",
            "published": 3,
            "tags": [
                "noise",
                "buffer",
                "movement",
                "carpet",
                "wind"
            ],
            "usePreview": 0,
            "username": "mathmasterzach",
            "viewed": 739
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=texture(iChannel0,fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//from https://www.shadertoy.com/view/4djSRW\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//palette from here https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 colorFromCoord(vec2 p){\n    float t=hash12(p);\n    return pal(t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    //return pal(t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n}\n\n//noise functions from https://www.shadertoy.com/view/Msf3WH\nvec2 hash( vec2 p ){\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p ){\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n\t\n}\n\nfloat fNoise(vec2 p){\n    p+=.1*vec2(sin(2.1*iTime),cos(3.6*iTime));\n    p+=.5*vec2(sin(iTime/5.),cos(iTime/3.2));\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    float f=0.;\n    float str=.5;\n    for(int i=0;i<4;i++){\n        f += str*noise(p);\n    \tstr/=2.;\n        p = m*p;\n    }\n\treturn 0.5 + 0.5*f;\n}\n\nvec2 grad(vec2 p){\n    vec2 eps=vec2(.001,0);\n\treturn normalize(vec2(fNoise(p+eps.xy)-fNoise(p-eps.xy),\n                \t\t  fNoise(p+eps.yx)-fNoise(p-eps.yx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 c=colorFromCoord(fragCoord);\n    if(iFrame>0){\n        vec2 g=grad(fragCoord/iResolution.xy);\n        //g+=vec2(-.5-.4*sin(iTime),0.);\n    \tc+=9.*texture(iChannel0,(fragCoord+g)/iResolution.xy).rgb;\n        c/=10.;\n    }\n    fragColor=vec4(c,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}