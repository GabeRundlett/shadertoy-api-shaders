{
    "Shader": {
        "info": {
            "date": "1686753487",
            "description": "Not yet correct when seen from the side. Left end should always be below, right one always above the centre segment.\nBut I do not know how to do it. Help appreciated.\n\nSo far, good enough for my website at https://www.motionmountain.net/research.html#pt",
            "flags": 0,
            "hasliked": 0,
            "id": "csfcWH",
            "likes": 3,
            "name": "Photon - based on Fabrice Neyret",
            "published": 3,
            "tags": [
                "photon"
            ],
            "usePreview": 0,
            "username": "MotionMountain",
            "viewed": 2704
        },
        "renderpass": [
            {
                "code": "// Variant of https://shadertoy.com/view/DdcXRj by Fabrice Neyert\n// Fork of https://www.shadertoy.com/view/DstXRs by Fabrice Neyert\n\n// CS sees the following two shortcomings in this animation file, that he modified himself, and that he wants to be corrected:\n//\n//       Please click and draw the animation to watch it from the side!\n//       \n//       (1) If you look at one tether, you can see that it passes alternativeley to one side of teh green axis and then to the other.\n//       I do NOT want this.\n//\n//       The motion should be simplified: in the deafult view, the rotating segment should always be at MIDDLE height \n//       (thus in the paper plane),\n//       one tether, say the left one, should ALWAYS be BELOW the paper plane (thus below the green axis), and the other tether,  \n//       the right one, should ALWAYS be above the paper plane, thus above the green axis (in the default view).\n//       But the code is too cryptic for me: I do no to understand it and cannot improve it.\n//       And Fabrice Neyret has no time to do it.\n//\n//       (2) Also a \"nicer\", more rounded shape during rotation would be welcome, but is not necessary.\n//\n//       Changes should be commented and put in a separate shadertoy file that is made public. Accounts at shadertoy are free.\n//\n//       The result will be made public on https://www.motionmountain.net/research.html#et and on the top of that same page.\n//\n//       A second, separate upworks job will be uploaded soon, for improving this animation:  https://www.shadertoy.com/view/cld3zX\n//\n//       There will be more such jobs in future - at least a dozen.\n\n#define N true                                               // display the triangle normal ( green ) // CS: \"false\" switches green axis off\n#define rot(a)        mat2(cos(a+vec4(0,11,33,0)))                         // 2D rotation // CS: number change has strange effects\n#define rot3(P,A,a)  ( mix( A*dot(P,A), P, cos(a) ) + sin(a)*cross(P,A) )  // 3D rot around an arbitrary axis\n  \n#define L(q) length(q.xy) -.2                                // changed by CS to have only one strand\n\n#define d(q)  (   min( r= L((q).yzx), N ? g= max(length(q)-1.5,length(q-dot(q,vec3(1./3.))))-.1 : 1e2 )            )   //\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9., w=0., r=w,b=w,g=w;                      // CS: t=9., w=0. is original, no changes for different numbers\n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -12.*R.y) - R),                          // ray direction - CS: size of triangle, orig is -12.*R.y\n          p = vec3(0,0,90), q,a,                                           // marching point along ray - CS: observer position\n          M = iMouse.z > 0. ? 6.*iMouse.xyz/R -3.\n                            : vec3(-.8,0,0); // vec3(0,1.,0) // vec3(.5,-.5,0)   // CS: original was -.8,0,0 perp view with -12,0,0\n        p.yz *= rot(-M.y),                                                 // camera rotations - CS: and orientation\n        p.xz *= rot(-M.x), \n        D.yz *= rot(-M.y),\n        D.xz *= rot(-M.x); \n\n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.005 )                        // march scene - CS: original is O-=.005, makes shading\n        q = p,\n#if 1                                                                      // set 0 for no antitwister - CS: 1 makes things rotate\n\n        a = vec3(sin(iTime),0,cos(iTime)),                                 // CS: original is  vec3(sin(iTime),0,cos(iTime))\n                                                                           // CS: adding phase has no effect\n        \n        a = rot3( a, vec3(-.71,0,.71), 3.14/2. ),                          // variant - CS: comment out to get different rotation axis\n                                                                           // CS: original is rot3( a, vec3(.71,0,-.71), 3.14/2. )\n                                                                           // CS: sign of vec3 yields different rotation direction\n                                                                           // different sin & cos make green axis tumble\n                                                                           \n        q = rot3( p,a, \n               // 3.14 *smoothstep(8., 0., length(p)) ),                   // the magic is there\n                 3.14 *smoothstep(.05, .6, 1./length(p)) ),                // CS: (.05, .6. 1./length(p)) is original ; 2./ changes surr.\n                //3.14 ),                                                  // test: rot with no antitwister\n#endif\n\n        q = rot3( q,vec3(.71,0,-.71), .6 ),                                // make triangle vertical - CS: other sin & cos have no effect           \n     // q = rot3( q,vec3(.71,0,-.71), .955 ), // acos(1/sqrt(3))                                      \n     // J = inverse( mat3( D(p+e) -q, D(p+e.yxy) -q, D(p+e.yyx) -q ) / e.x ), // Jacobian\n        t = d(q),                                                          \n        p += .2*t*D;                                                       // step forward = dist to obj - CS: number changes blackness\n\n    O *= O*O*2.;                                                           // color scheme - CS: white is more white with *6.\n    O *= vec4( t==b, t==g, t==r, 1)*vec4(2,1,2,1) + float(t==w);\n    if (O.a < 0.) O += .9;                                                 // white background - CS: also works in grey with .+= .777\n} \n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}