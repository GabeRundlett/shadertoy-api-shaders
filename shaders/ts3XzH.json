{
    "Shader": {
        "info": {
            "date": "1571415567",
            "description": "Quick raymarching sketch.",
            "flags": 0,
            "hasliked": 0,
            "id": "ts3XzH",
            "likes": 6,
            "name": "Shadertober 18 Pistons -jaburns",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "practice"
            ],
            "usePreview": 0,
            "username": "jaburns",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "#define EPS 0.02\n#define SHORTEST_STEP 0.02\n#define tt (iTime*1.)\n\nconst float GAPX = 5.;\nconst float GAPY = 2.7;\n\nvec2 rot(vec2 p, float theta) {\n\tfloat s = sin(theta);\n    float c = cos(theta);\n    return mat2(c, s, -s, c) * p;\n}\n\nvec2 dePlane(vec3 p) {\n\treturn vec2(p.y, 0);\n}\n\nvec2 sdHexPrism( vec3 p, float off, float subz )\n{\n    vec2 loc = vec2(\n        (p.z - subz) / GAPY + .535*GAPY,\n        p.x / GAPX + .5*GAPX\n    );\n    vec2 flr = floor(loc);\n    vec2 flr1 = flr + 1.;\n    vec2 fra = fract(loc);\n    \n    vec2 hexCoord = mix(flr, flr1, clamp(10.*fra - 9., 0.,1.));\n    vec2 h = vec2(1,.6+.5*sin(hexCoord.y+tt+off)*sin(hexCoord.x+tt));\n    \n    \n    p.x = mod(p.x + .5*GAPX, GAPX) - .5*GAPX;\n    p.z = mod(p.z + .5*GAPY, GAPY) - .5*GAPY;\n    \n    p.xyz = p.xzy;\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n    return vec2(\n        min(max(d.x,d.y),0.0) + length(max(d,0.0)) - .05,\n        hexCoord.x + 100.\n    );\n}\n\nvec2 deBall(vec3 p) {\n    p.y -= 1.;\n\treturn vec2(length(p) - 1., 0);\n}\n\nvec2 join(vec2 da, vec2 db) {\n\treturn da.x < db.x ? da : db;\n}\n\nvec2 DE(vec3 p) {\n    float hexCoord = floor(p.x);\n    vec2 hexProps = vec2(1,.5+.5*sin(hexCoord));\n    \n    vec2 a = dePlane(p);\n    vec2 b = sdHexPrism(p,0.,0.);\n    vec2 c = sdHexPrism(p + vec3(GAPX*.5,0,1), .1, 0.);\n\n    return join(a, join(b, c));\n    \n}\n\nvec4 resolveMaterial(float material, float dist, vec3 pos, vec3 camPos, vec3 normal) {\n    float l = -dot(normalize(pos - camPos), normal);\n    vec4 col = vec4(1.7*l);\n    \n    if (material > .5) {\n        col *= vec4(0,.7+.3*cos(material),.7+.3*sin(material),0);\n    } else {\n        col *= vec4(.7,.8,1.,0);\n    }\n    \n    \n    col /= exp(0.06*dist);\n    \n\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 sp = -vec2(.5*iResolution.x / iResolution.y, .5) + fragCoord/iResolution.yy;\n\n    vec3 ro = vec3(20,7.+2.*sin(tt*.7),tt);\n    vec3 rd = normalize(vec3(sp,-1));\n    \n    rd.yz = rot(rd.yz, -0.4 - .1*sin(tt*.7));\n    rd.xz = rot(rd.xz, tt*.1);\n\n    vec3 camPos = ro;\n    \n    float totalDist = 0.;\n    vec2 dist = vec2(0);\n    float i = 0.;\n    for (; i < 50.; ++i) {\n        dist = DE(ro);\n        if (dist.x < EPS || totalDist > 50.) break;\n        dist.x = max(SHORTEST_STEP, dist.x);\n        totalDist += dist.x * .5;\n        ro += rd * dist.x * .5;\n    }\n    \n    if (dist.x < EPS) {\n        vec2 e = vec2(EPS, 0);\n        vec3 normal = normalize(vec3(\n            DE(ro + e.xyy).x - DE(ro - e.xyy).x,\n            DE(ro + e.yxy).x - DE(ro - e.yxy).x,\n            DE(ro + e.yyx).x - DE(ro - e.yyx).x));\n        \n        float ao = (1.-clamp(i/75.,0.,100.));\n        \n        fragColor = ao* resolveMaterial(dist.y, totalDist, ro, camPos, normal);\n        return;\n    }\n\n    fragColor = vec4(0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}