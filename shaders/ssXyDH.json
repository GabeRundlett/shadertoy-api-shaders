{
    "Shader": {
        "info": {
            "date": "1642620277",
            "description": "Basic raymarching with hard shadows, but keeps track of light travel time.  The light speed is set to be not *too* fast relative to the motion of the object.\n\nCurious to see what refraction/caustics would look like, but that's another exercise... ",
            "flags": 0,
            "hasliked": 0,
            "id": "ssXyDH",
            "likes": 8,
            "name": "Slow light",
            "published": 3,
            "tags": [
                "raymarching",
                "finitelightspeed"
            ],
            "usePreview": 0,
            "username": "bgold",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "const float LIGHTSPEED = 4.0;\n\nconst vec3 CAMPOS = vec3(0);\n\nconst float WALLPOS = 10.0;\nconst float FLOORPOS = -0.5;\nconst vec3 LIGHTPOS = vec3(2.0, -5.0, 1.0);\n\nconst vec3 OBJCEN = vec3(0, 5.0, 0);\nconst float OBJRAD = 0.3;\n\nconst float EPS = 1e-2;\n\nconst vec3 OBJCOLOR = vec3(0.929,0.831,0.000);\nconst vec3 FLOORCOLOR = vec3(0.9);\nconst vec3 WALLCOLOR = vec3(0.447,1,1);\n\nvec3 objpos(in float t) {\n    return OBJCEN + 1.3 * vec3(cos(t), sin(t), 0);}\n\nconst float R1 = 2.1;\nconst float R2 = 0.5;\n\n\nvec3 rotxy(in vec3 x, in float a) {\n    return mat3(cos(a),-sin(a), 0., sin(a), cos(a), 0., 0.,0.,1.) * x;}\n\nvec3 rotxz(in vec3 x, in float a) {\n    return mat3(cos(a),0.,-sin(a), 0.,1.,0., sin(a),0.,cos(a)) * x;}\n\n/*\n// sphere\nfloat sdf(in vec3 r, in float t) {\n    float d  = distance(r, objpos(t)) - OBJRAD;\n    return d;\n}\n*/\n\n// rotating cube\nfloat sdf(in vec3 r, in float t) {\n    vec3 dr = rotxy(r-objpos(t), R1*t);\n    dr = rotxz(dr, R2*t);\n    dr = abs(dr) - OBJRAD;\n    float d = max(dr.x,dr.y);\n    d = max(d,dr.z);\n    return d;\n}\n\nvec3 grad(in vec3 r, in float t) {\n    vec3 n;\n    vec3 dr = rotxy(r-objpos(t), R1*t);\n    dr = rotxz(dr, R2*t);\n    if (abs(dr.x) > abs(dr.y) && abs(dr.x) > abs(dr.z)) {\n        n = vec3(sign(dr.x),0.0,0.0);\n    } else if (abs(dr.y) > abs(dr.x) && abs(dr.y) > abs(dr.z)) {\n        n = vec3(0.0,sign(dr.y),0.0);\n    } else {\n        n = vec3(0.0,0.0,sign(dr.z));\n    }\n    n = rotxz(n, -R2*t);\n    n = rotxy(n, -R1*t);\n    return n;\n}\n\n\nfloat objhit(in vec3 p, in vec3 v, in float t0) {\n    float d;\n    float t = iTime-t0;\n    float dt;\n    for (int i=0; i<100; i++) {\n        d = 0.7*sdf(p, t);\n        d = min(d, WALLPOS-p.y);\n        // many rays are nearly parallel to the floor so the next line speeds things up near the floor\n        d = min(d, (p.z-FLOORPOS)/max(abs(normalize(v).z), EPS));\n        if (d < 0.0) break;\n        dt = d / length(v);\n        p += v * dt;\n        t -= dt;\n        if (p.y < -1.0) return 0.0;\n    }\n    return (iTime-t0)-t;\n}\n     \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from -1 to 1 in y)\n    vec2 uv = (fragCoord - iResolution.xy*0.5 ) / iResolution.y * 2.0;\n    // about 20deg vertical FOV\n    vec3 rayvel = LIGHTSPEED * normalize(vec3(uv.x,0.0,uv.y) - vec3(0,-5.0,0));\n    vec3 raypos = vec3(0);\n    \n    float cht = objhit(raypos, rayvel, 0.0);\n    \n    vec3 bouncepos = raypos + cht * rayvel;\n    vec3 bouncevel;\n    \n    vec3 col;\n    \n    float intensity = clamp(pow(distance(LIGHTPOS, bouncepos)/WALLPOS*1.2, -2.0), 0.0, 1.0);\n    \n    if (bouncepos.y > WALLPOS-EPS || bouncepos.z < FLOORPOS+EPS) {\n        col = FLOORCOLOR;\n        if (bouncepos.y > WALLPOS-EPS) col = WALLCOLOR;\n        bouncepos = vec3(bouncepos.x, min(WALLPOS-EPS,bouncepos.y), max(FLOORPOS+EPS,bouncepos.z));\n        bouncevel = LIGHTSPEED * normalize(LIGHTPOS - bouncepos);\n        \n        float sht = objhit(bouncepos, bouncevel, cht);\n        if (sht > 0.0) {col *= 0.2;}\n    } else {\n        //float dd = dot(normalize(bouncepos-objpos(iTime-cht)), normalize(LIGHTPOS-bouncepos));\n        float dd = abs(dot(grad(bouncepos,iTime-cht), normalize(LIGHTPOS-bouncepos)));\n        col = OBJCOLOR * clamp(dd,0.2,1.0);\n    }\n    \n    fragColor = vec4(col*intensity, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}