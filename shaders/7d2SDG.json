{
    "Shader": {
        "info": {
            "date": "1620960327",
            "description": "rehiletes 2d-",
            "flags": 0,
            "hasliked": 0,
            "id": "7d2SDG",
            "likes": 4,
            "name": "rehiletes 2d-",
            "published": 3,
            "tags": [
                "2d",
                "draw",
                "polygons",
                "poly",
                "rehiletes2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1 ----jorgeFloresP---13/may/2021\n//rehiletes 2d-\n// referencia \n////-------------------\n/// IQ funciones....librerias\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n    \nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r; }\n\nvec3 ponerBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S(abs( distObj),0.0));\n  return colOut;\n}\n\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\nvec2 RotarPuntoPivote(vec2 p,vec2 pXrYr, float theta)\n{\n     vec2 pp=p;\n     vec2 pos=pXrYr;\n     pp=pp-pos;\n     pp.xy = rotatev2(pp.xy, theta);\n     pp=pp+pos;   \n     return pp;\n}   \n\n\nfloat opU(float d1, float d2) {return min(d1, d2); }\nconst vec3 col1=vec3(0.54,0.49,0.39);\nconst vec3 col2=vec3(0.06,0.07,1.0);\nconst vec3 col3=vec3(0.06,0.07,0.8);\nconst vec3 col4=vec3(0.60,0.17,0.17); \nconst vec3 col5=vec3(0.73,0.60,0.55);\nconst vec3 colDorado=vec3(0.925,0.67,0.0);\n\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\n\nfloat sdPoly5 POLY(5)\nvec2 pt5[ 5]=vec2[](  \nvec2(.28,.72),vec2(.71,.72),vec2(.71,.28),vec2(.28,.28),vec2(.28,.72) );\n\n\nfloat sdPoly4 POLY(4)\nvec2 pt4[ 4]=vec2[](  \nvec2(.29,.72),vec2(.07,.50),vec2(.50,.51),vec2(.29,.72) );\n\nfloat sdPoly4b POLY(4)\nvec2 pt4b[ 4]=vec2[](  \nvec2(.50,.93),vec2(.72,.71),vec2(.50,.51),vec2(.50,.93) );\n\nfloat sdPoly4c POLY(4)\nvec2 pt4c[ 4]=vec2[](  \nvec2(.50,.50),vec2(.93,.50),vec2(.71,.28),vec2(.50,.50) );\n\nfloat sdPoly4d POLY(4)\nvec2 pt4d[ 4]=vec2[](  \nvec2(.50,.50),vec2(.50,.07),vec2(.28,.28),vec2(.50,.50) );\n\n\n///------------*******-------------------\nvec3 Rehilete(in vec2 pp, vec3 col) \n{\n    vec2 p=pp;  \n    float sd5 = sdPoly5(p, pt5);\n    float sd4 = sdPoly4(p, pt4);\n    float sd4b = sdPoly4b(p, pt4b);\n    float sd4c = sdPoly4(p, pt4c);\n    float sd4d = sdPoly4(p, pt4d);\n    col=ponerBorde(col1,col,sd5 );\n    col=ponerBorde(col2,col,sd4 );\n    col=ponerBorde(col3,col,sd4b );\n    col=ponerBorde(col4,col,sd4c );\n    col=ponerBorde(col5,col,sd4d );\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    float t=5.0*sin(iTime*0.5+cos(iTime*0.5))+sin(iTime+0.5);\n    vec2 p=uv*0.5-vec2(-0.5,-0.5);\n    vec2 p2=uv*0.25-vec2(-0.5,-0.5);\n    vec2 p3=uv*0.125-vec2(-0.5,-0.5);\n    \n    vec3 col=vec3(0.15,0.6,0.3); //vec3(0.25);\n    vec2 pXrYr1=vec2(0.5,0.5);\n    vec2 pr1=RotarPuntoPivote( p, pXrYr1, t);\n    vec2 pr2=RotarPuntoPivote( p, pXrYr1, 10.0+t);\n    vec2 pr3=RotarPuntoPivote( p, pXrYr1, 20.0+t);\n    col=Rehilete(pr3, col);\n    col=Rehilete(pr2, col);\n    col=Rehilete(pr1, col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}