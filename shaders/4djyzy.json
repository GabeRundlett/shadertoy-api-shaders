{
    "Shader": {
        "info": {
            "date": "1492606019",
            "description": " infinite zoom  + Fourier-based transform (e.g. kernel convolution)  (see code header for reused URLs)\n'c': apply Cmap\nmouse.y tunes bands density (reset: BL corner)\nbufC: Fourier op. e.g: F= #4 or 5\n",
            "flags": 48,
            "hasliked": 0,
            "id": "4djyzy",
            "likes": 28,
            "name": "infinite zoom + Fourier op",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "noise",
                "zoom",
                "artifacts"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1175
        },
        "renderpass": [
            {
                "code": "// Basic infinite zoom https://www.shadertoy.com/view/4sfcD8\n// + Fourier-based transform (e.g. kernel convolution) using https://www.shadertoy.com/view/4s3GDs\n\n// set your module and phase in Buf A\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n\n// adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS#\n// see also https://www.shadertoy.com/view/4dGGz1 to play with spectrum.\n\n\n//Display modes\n#define MAGNITUDE 0.\n#define PHASE 1.\n#define COMPONENT 2.\n\nfloat DISPLAY_MODE = MAGNITUDE;\n\n//Scaling\n#define LOG 0\n#define LINEAR 1\n\n#define MAG_SCALE LOG\n\nvec4 rainbow(float x)  { return .5 + .5 * cos(6.2832*(x - vec4(0,1,2,0)/3.)); }\nvec4 rainbow(vec2 C)   { return rainbow(atan(C.y,C.x)/3.1416 + .5); }\n\nvec4 paintDFT(vec2 F) {\n  if (DISPLAY_MODE == MAGNITUDE)\n     #if MAG_SCALE == LOG\n        return vec4( log(length(F)) / log(SIZE*SIZE) );\n     #elif MAG_SCALE == LINEAR\n        return vec4( length(F) / SIZE );\n     #endif\n\n    else if ( DISPLAY_MODE == PHASE )     return rainbow(F);        \n    else /* if ( DISPLAY_MODE == COMPONENT ) */ return vec4(.5 + .5*F/SIZE, 0,0);        \n}\n\nfloat message(vec2 p) {  // the alert function to add to your shader\n    int x = int(p.x+1.)-1, y=int(p.y)-10,  i;\n    if (x<1||x>32||y<0||y>2) return -1.; \n    i = ( y==2? i=  757737252: y==1? i= 1869043565: y==0? 623593060: 0 )/ int(exp2(float(32-x)));\n \treturn i==2*(i/2) ? 1. : 0.;\n}\n\n\nvoid mainImage( out vec4 O,  vec2 uv )\n{\n    vec2 R = iResolution.xy, U=uv;\n    //O = texture(iChannel0,uv/R); return;\n    //if (iResolution.y<200.) // alert for the icon\n    //    {   float c=message(uv/8.); if(c>=0.){ O=vec4(c,0,0,0);return; } }\n        \n    vec2 pixel = ( uv - iResolution.xy/2.) / SIZE  + vec2(2,1)/2.,\n         tile  = floor(pixel),\n         stile = floor(mod(2.*pixel,2.));\n         uv = fract(pixel) * SIZE / R ;\n\n    O-=O;\n    \n    DISPLAY_MODE = floor(texture(iChannel3, .5/R).w); // persistant key flag.\n    if (tile.y==-1. && abs(tile.x-.5)<1.) {   // buttons displaying current flags value\n        for (float i=0.; i<3.; i++) \n            O += smoothstep(.005,.0,abs(length(uv*R/SIZE-vec2(.2+i/7.,.97))-.025));\n        float v = DISPLAY_MODE;\n        O.b += smoothstep(.03,.02,length(uv*R/SIZE-vec2(.2+v/7.,.97)));\n    }\n    \n    if(tile == vec2(0,0))  //Input + DFT (Left)\n        if (stile == vec2(0) )\n             O += paintDFT(texture(iChannel1, 2.*uv).xy);      // initial spectrum\n        else O += texture(iChannel0, uv).x;                    // initial texture\n      //else O += length(texture(iChannel0, uv).rgb);\n\n    if(tile == vec2(1,0))  // Output +DFT (Right)\n        if (stile == vec2(0) )\n             O += paintDFT(texture(iChannel3, 2.*uv).xy);      // initial Fourier\n        else { O += .5+.5*texture(iChannel2, uv).x;            // final texture\n       //else { O += length(texture(iChannel2, uv).xy); \n               if (texture(iChannel3,vec2(1.5,.5)/R).w>0.) O *= vec4(3,1.5,1,0); // 'c': apply Cmap\n             }\n        \n    if(tile.y>0.) O += texture(iChannel0, U/iResolution.xy).x; // displayed values in top margin   \n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// source: infinite zoom from https://www.shadertoy.com/view/4sfcD8\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n\n// === numbers and fonts from https://www.shadertoy.com/view/llySRh ==============\n\n // --- access to the image of ascii code c\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n    //if (p.x<.25|| p.x>.75 || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5); // strange bug\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) );\n  //float l = log2(length(fwidth(p/16.*iResolution.xy)));\n  //return textureLod( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), l);\n                   // manual MIPmap to avoid border artifact. Should be textureLod, but don't available everywhere\n}\n\n// --- display int4\nvec4 pInt(vec2 p, float n) {\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(p - vec2(-.5,0), 45 ),\n        n = -n;\n\n    for (float i = 3.; i>=0.; i--) \n        n /= 10.,\n        v += char(p - vec2(.5*i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// --- display float4.4\nvec4 pFloat(vec2 p, float n) {\n    vec4 v = pInt(p,floor(n));  p.x -= 2.;\n        v += char(p, 46);      p.x -= .5;\n        v += pInt(p,fract(n)*1e4);\n    return v;\n}\n\n\n// === infinite zoom from https://www.shadertoy.com/view/4sfcD8\n\n#define t (iTime*0.5) // Animation speed\n#define hmin .05            // Minimum scaling step\n//#define h max(.01,abs(hmin+M.y))\n                            // Scale step between layers\n#define H (2.)              // Largest scale possible\n#define s (2.*(H / (2.*4.29193))*(H / (2.*4.29193)))\n                            // Amplitude modulation function 2*sigma^2\n#define mu (.5)             // Mean of input white noise\n#define mu2 (mu*mu)         // Squared mean of input white noise\n#define sigma_f2 (1./12.)   // Variance of input white noise\n\n// Choose between default and exponential *distribution* of\n// scaling coefficients. Default method introduces sliding.\n//#define ai_fun ai_fun_def\n#define ai_fun ai_fun_exp\n\n// Default to standard position mapping. Introduces correlation\n// Only fully random shows no correlation.\n//#define pos_fun pos_fun_def\n//#define pos_fun pos_fun_lin\n#define pos_fun pos_fun_rnd\n\n// Function to compute ai coefficients depending on the scaling.\nfloat ai_fun_def(float sf) {\n\treturn mod(sf - t, H);\n}\n\n// Exponential version of ai coefficient computation\nfloat ai_fun_exp(float sf) {\n\treturn H * exp(-mod(t - sf, H));\n}\n\n// The default position mapping function\nvec2 pos_fun_def(vec2 uv, float ai, float sf) {\n\treturn ai * uv;\n}\n\n// 2nd version: offset the layers by an amount\n// depending on the layer number\nvec2 pos_fun_lin(vec2 uv, float ai, float sf) {\n    return ai * uv + sf;\n}\n\n// The position mapping function with random offset\nvec2 pos_fun_rnd(vec2 uv, float ai, float sf) {\n\treturn ai * uv + iResolution.x*fract(4567.89*sin(765.43*sf*vec2(1,-13.17)+1.));\n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{    \n    vec2 M = iMouse.xy/iResolution.xy; if (length(M)<.01) M = vec2(.25);\n\n    O -= O;\n    if (U.y>SIZE) { O = pFloat((U/iResolution.y-vec2(.1,.9))*16., M.y);  return; } // bug: return ignored... but if O-=O above !\n    vec2 U0=U;\n    \n    U *= iResolution.xy/SIZE;\n\n    // screen-centered coordinates\n\tvec2 uv = (U.xy / iResolution.xy - .5);\n\n\t// Initial acc\n\t//O = vec4(0.);\n\n\tfloat a = 0., h = max(.01,abs(hmin+M.y));\n\t// Add up gaussian-intensity modulated samples of noise\n\tfor (float sf = 0.; sf < H; sf += h)\n\t{\n\t\tfloat k = ai_fun(sf),\n\t\t\t  e = k - 1.,\n\t\t\t  C = exp(-(e*e) / s); // Intensity scaling gaussian\n\n\t\tvec2 P = pos_fun(uv, k, sf);\n\t\tO += C * texture(iChannel0, P).rrrr;\n\t\ta += C;\n\t}\n\tO /= a;\n    //O *= 1.2; // contrast\n    \n    // --- display mouse.y value in top margin\n    if (U0.y>SIZE) { O = pFloat((U0/iResolution.y-vec2(.1,.9))*16., M.y).xxxx; } // bug: return ignored\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fourier transform of the input\n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n//#define tex(ch,x,y) texture(ch, vec2(x,y)/iResolution.xy )\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n// #define ang(a)  vec2(cos(a), sin(a))\n// vec2 cmul (vec2 a,float t) { vec2 b=ang(t); return mat2(b,-b.y,b.x)*a; } \n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n        \n    for(float n = 0.; n < SIZE; n++)  {\n        vec2 xn = tex(iChannel0, n+.5, uv.y).xy,\n             yn = tex(iChannel1, uv.x, n+.5).zw,\n             a = - 6.2831853 * (uv-.5 -SIZE/2.) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// do your operation in spectral domain here\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\nbool keyPress(int ascii) { return (texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.); }\nbool keyToggle(int ascii) {return (texture(iChannel2,vec2((.5+float(ascii))/256.,0.75)).x > 0.); }\nfloat rand(vec2 uv) { return fract(1e5*sin(dot(uv,vec2(17.4,123.7)))); }\nfloat gauss(float x) { return exp(-.5*x*x); }\n#define ang(a)  vec2(cos(a), sin(a))\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 T = texture(iChannel0, U / iResolution.xy).xy;\n    U -= .5;\n    vec2 X = 2.*U/SIZE - 1.;\n    float l = length(X), s = sign(-X.x), y = iMouse.y/iResolution.y;\n    \n# if 1        \n    // --- your custom Fourier-space filter here --------------------\n    float  \n       // F = 1.;                                  // 1: neutral\n       // F = l*10.;                               // 2: derivative\n       // F = .01/(.01+l);                         // 3: integral\n       // F = gauss(l/.125)*30.;                   // 4: gaussian blur   <---\n       // F = smoothstep(.15,.0, abs(l-.3)) * 20.; // 5.1: ring filter   <---\n          F = smoothstep(.2,.0, abs(l-.4)) * 20.;  // 5.2: ring filter   <---\n       // F = smoothstep(-.1,.1,l-y) * 20.;        // 6: kill LF (mouse tuning)\n       // F = float(fract(U.x/2.)*fract(U.y/2.)>0.);   // odd  freq only\n       // F = float(fract(U.x/2.)+fract(U.y/2.)==0.);  // even freq only\n    \n    T *= F;\n\tif (l==0.) T*=0.;                    // cancels DC\n    O = vec4(T,F,F);\n    \n# else\n    // --- or, your custom Fourier-space function here ------------\n    //            see also https://www.shadertoy.com/view/4dGGz1\n       T = ang(6.2832*rand(U));                // 10: white noise\n    // T *= gauss(l/.05)*10.;                  // 11: modulus profile : gauss\n       T *= gauss(abs(l-.12)/.005)*10.;        // 12: modulus profile : ring (blue noise)\n       T = cmul(T,iTime*s);              // 13: phase shift with time\n    \n    T *= SIZE;\n             \n    O = vec4(T,T);\n    \n#endif\n    \n    if ( U==vec2(0)) {\n        O.w = texture(iChannel1,U/iResolution.xy).w;\n        if ( keyPress(32) ) O.w = mod(O.w+.1, 3.) ;  // persistant key flag\n    }\n    if ( U==vec2(1,0)) O.w = float(keyToggle(64+3)); // key C state\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// invFourier transform \n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. //Size must be changed in each tab.\n\n//#define tex(ch,x,y) texture(ch, vec2(x,y)/iResolution.xy )\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x)*vec2(cos(b), sin(b)); } \n#define W(uv)   mod(uv+SIZE/2.,SIZE)                    // wrap [-1/2,1/2] to [0,1]\n\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n\n    for(float n = 0.; n < SIZE; n++)  {\n        float m = W(n);       // W to warp 0,0 to mid-window.\n        vec2 xn = tex(iChannel0, m+.5, uv.y).xy,\n             yn = tex(iChannel1, uv.x, m+.5).zw,\n             a =  6.2831853 *  (uv-.5) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n    O /= SIZE;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}