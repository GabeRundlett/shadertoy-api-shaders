{
    "Shader": {
        "info": {
            "date": "1689311318",
            "description": "original creation clip design source download for free\nhttp://benchart.cn/whirl_1170x2532@x2_60fps.mp4",
            "flags": 0,
            "hasliked": 0,
            "id": "dssBDs",
            "likes": 3,
            "name": "shine rot_2",
            "published": 3,
            "tags": [
                "raymarching",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "chenxianming",
            "viewed": 1088
        },
        "renderpass": [
            {
                "code": "float m(float a) { return fract(iTime * a) * 3.141593 * 4.; }\nint n = 0;\nmat2 j(float a) {\n  float b = sin(a), c = cos(a);\n  return mat2(c, b, -b, c);\n}\nvec4 v = vec4(0), e = vec4(0);\nfloat g(vec3 a) {\n  float b = 5.;\n  a.y -= .1, a.yz *= j(.282743), a.xy *= j(m(-.025)), a.xy *= j(a.z * -.8),\n      a.z += fract(-iTime * .25),\n      a = mod(a, vec3(.5, .5, .5)) - vec3(.25, .25, .25),\n      b = max(length(a.xy) - .05, abs(a.z) - .251), n == 1 ? v.a = b : e.a = b;\n  return b;\n}\nvec3 o(in vec3 b) {\n  vec2 a = vec2(1, -1) * .5773;\n  return normalize(a.xyy * g(b + a.xyy * 5e-4) + a.yyx * g(b + a.yyx * 5e-4) +\n                   a.yxy * g(b + a.yxy * 5e-4) + a.xxx * g(b + a.xxx * 5e-4));\n}\nvec3 l(vec2 a) {\n  vec2 b = a.xy - .5, c = b.xy * b.xy +\n                          sin(a.x * 18.) / 25. * sin(a.y * 7. + 1.5) +\n                          a.x * sin(0.) / 16. + a.y * sin(1.2) / 16. + a;\n  float d = sqrt(abs(c.x + c.y * .5) * 25.) * 5.;\n  return vec3(sin(d * 1.25 + 2.), abs(sin(d * 1. - 1.) - sin(d)),\n              abs(sin(d) * 1.));\n}\nfloat p(inout vec3 a, inout float b, inout float c, vec3 h, inout vec3 i,\n        int k) {\n  float d = 0.;\n  for (int f = 0; f < 130; f++) {\n    a = h + i * b, c = g(a);\n    if (b > 1000.)\n      break;\n    b += c * .32222, d += c * (1. - (a.z / 2. + .5));\n  }\n  return d;\n}\nvoid w(vec3 q, vec3 b) {\n  n++;\n  float r = 0., h = 0.;\n  vec3 i = normalize(vec3(.57703));\n  i.xy *= j(m(.25));\n  vec3 s = normalize(i - b), c = vec3(0);\n  float d = p(c, r, h, q, b, 0);\n  if (h < 1e-3) {\n    vec3 a = o(c);\n    float z = dot(a, vec3(0, -.3, 0)),\n          f = clamp(dot(a, vec3(2.1, -1, -5)), 0., 1.),\n          t = clamp(dot(a, vec3(0, -.5, .3)), 0., 1.),\n          x = clamp(dot(a, vec3(.5, -1.1, -5.1)), 0., 1.),\n          u = pow(clamp(dot(a, s), .52, 2.), 50.);\n    u *= f + t;\n    vec3 k = reflect(a, b * .1);\n    float y = exp(-.0121 * d * d);\n    e.rgb = f * l(k.xy) + t * l(k.xy) * .2 + x * l(k.xy) * .15, e.rgb *= .3,\n    e.rgb += sign(e.rgb) * .6, e.rgb *= f,\n    e.rgb += vec3(u * vec3(.5)) +\n             (.5 + .35 * cos(f + b.xyx * 2. + vec3(0, 2, 4))) * .4,\n    e.rgb *= y;\n  }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 a = fragCoord.xy / iResolution.xy;\n  a = (a - .5) * 2., a.x *= iResolution.x / iResolution.y;\n  vec3 b = vec3(1), c = vec3(0, 0, -3), d = vec3(a, 1);\n  w(c, d);\n  b = e.rgb;\n  fragColor = vec4(b, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}