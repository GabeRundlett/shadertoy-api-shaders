{
    "Shader": {
        "info": {
            "date": "1671257810",
            "description": "-",
            "flags": 0,
            "hasliked": 0,
            "id": "clfGRH",
            "likes": 11,
            "name": "Pencil sphere",
            "published": 3,
            "tags": [
                "sphere",
                "pencil"
            ],
            "usePreview": 0,
            "username": "python273",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n#define S .05\n\nvec2 rotate(vec2 v, float a) {\n\treturn mat2(cos(a), -sin(a), sin(a), cos(a)) * v;\n}\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nvec2 rand2(vec2 c) {\n    return vec2(rand(c), rand(c*13.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord - .5*iResolution.xy) / min(iResolution.x, iResolution.y);\n    uv *= 2.1;\n\n    vec2 c = floor(uv/S);  // current Voronoi cell \"index\"\n    vec2 b = uv - mod(uv, S);  // current cell coord\n\n    vec2 closest = vec2(0.);\n    float d = 999.;  // distance to closest point\n\n    for(float x = -1.; x <= 1.; x += 1.) {\n        for(float y = -1.; y <= 1.; y += 1.) {\n            vec2 i = vec2(x, y);\n            vec2 ic = b + i*S;\n            float idist = distance(\n                uv + (rand2(uv)-.5)*0.01,  // blend edges\n                ic + rand2(c + i)*S\n            );\n            if (idist < d) {\n                d = idist;\n                closest = ic;\n            }\n        }\n    }\n\n    vec2 cuv = length(uv) <= 1. ? closest : uv;\n\n    float l = length(cuv);\n    vec3 normal = vec3(cuv, sqrt(1.-l*l));\n    float na = dot(normal, normalize(vec3(1.)));\n    na = l <= 1. ? na : 0.;  // fix bg\n\n    float a = dot(normal, normalize(vec3(.7, .7, 1.)));\n\n    if (l <= 1.) {\n        a *= 1. + smoothstep(0.986, 1.015, a)*8.;\n    }\n\n    //vec2 suv = rotate(uv, rand(closest)*PI);  // cool too\n    vec2 suv = rotate(fragCoord/vec2(720.)*2.1, na * PI);  // stroke uv\n\n    float brightness = sin(\n        ((suv.x + suv.y) * (1.+na/1.8) + rand(uv)*.005) * 220.\n    ) /2.+.5;\n    /*\n    suv = rotate(suv, PI/3.);\n    brightness += sin(\n        ((suv.x + suv.y) * (1.+na/1.8) + rand(uv)*.005) * 220.\n    ) /2.+.5;\n    */\n    brightness *= max(0.08, a);\n    fragColor = vec4(vec3(brightness), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}