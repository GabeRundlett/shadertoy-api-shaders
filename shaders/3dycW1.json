{
    "Shader": {
        "info": {
            "date": "1602835809",
            "description": "This is a simple shader to address a simple message to my American friends.\nMake yourself and the world a favor, go vote, fight authoritarianism and bigotry, claim your country back.\nhttps://www.usa.gov/how-to-vote",
            "flags": 0,
            "hasliked": 0,
            "id": "3dycW1",
            "likes": 11,
            "name": "VOTE",
            "published": 3,
            "tags": [
                "flag",
                "ballot",
                "vote",
                "usa"
            ],
            "usePreview": 0,
            "username": "PixelPhil",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "//\n// üó≥Ô∏è VOTE üá∫üá∏ by Philippe Desgranges\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n\n// This is a simple shader to address a simple message to my American friends.\n// Make yourself and the world a favor, go vote, fight authoritarianism, claim your country back.\n// https://www.usa.gov/how-to-vote\n\n\n#define S(a, b, t) smoothstep(a, b, t)\n#define sat(a) clamp(a, 0.0, 1.0)\n\nfloat star(vec2 uv)\n{\n    float aa = iResolution.x * 0.03;\n    \n    uv.x = -abs(uv.x);\n    \n    vec2 n  = normalize(vec2(1.0, -0.35));\n    vec2 n2 = normalize(vec2(-0.7, 1.0));\n    \n    float dot1 = sat(dot(uv - vec2(0.0, 1.0), n) * aa);\n    \n    float dot2 = sat(dot(uv + vec2(0.0, 0.351), n2) * aa);\n    \n    \n    float star1 = dot1 * dot2 ;\n    \n    float dot3 = sat((0.32 - uv.y) * aa);\n    \n    uv.x = -uv.x;\n\tfloat dot4 = sat(dot(uv  + vec2(0.0, 0.351), n2) * aa);\n    \n    \n    float star2 = dot3 * dot4 ;\n    \n    return sat(star1 + star2);\n}\n\n\nvec3 flag(vec2 uv)\n{\n    float stripe;\n    \n    float aa = 10.0 / iResolution.x;\n    \n    stripe = S(0.25 -aa, 0.25 + aa, abs(fract(uv.y * 6.5 + 0.25) - 0.5));\n    \n    vec2 boxUV = vec2(uv.x * 2.2, (1.0 - uv.y) * (13.0 / 7.0));\n    \n    float aa2 = aa * 0.2;\n    float square = S(1.0 + aa2, 1.0 - aa2, boxUV.x);\n    square *= S(1.0 + aa2, 1.0 - aa2, boxUV.y);\n    \n    vec2 starsTile =  boxUV * vec2(6.0, 5.0);\n    \n    vec2 starsUv = (fract(starsTile) - vec2(0.5)) * vec2(4.0, 3.0);\n    \n    starsUv.y = -starsUv.y;\n    \n    float stars = star(starsUv);\n    \n    \n    starsTile -= vec2(0.5);\n    starsTile.x = clamp(starsTile.x, 0.0, 5.0);\n    starsTile.y = clamp(starsTile.y, 0.0, 4.0);\n    \n    vec2 starsUv2 = (fract(starsTile) - vec2(0.5)) * vec2(4.0, 3.0);\n    starsUv2.y = -starsUv2.y;\n    \n    stars += star(starsUv2);\n    \n    vec3 starsCol = mix(vec3(0.2, 0.1, 0.6), vec3(1.0), stars);\n    \n    vec3 col = mix(vec3(0.8, 0.1, 0.2), vec3(1.0), stripe);\n    col = mix(col, starsCol, square);\n    \n    return vec3(col);\n}\n\n\n\nfloat sdCapsule( vec2 p, vec2 a, vec2 b, float r )\n{\n  vec2 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\nfloat voteDst(vec2 uv)\n{\n\n    \n    float r = 0.5;\n    float dst = sdCapsule(uv, vec2(0.0,3.0), vec2(1.5,0.0), r);\n    dst = min(dst, sdCapsule(uv, vec2(3.0,3.0), vec2(1.5,0.0), r));\n    \n    \n    dst = min(dst, sdCapsule(uv, vec2(8.0,3.0), vec2(11.0,3.0), r));\n    dst = min(dst, sdCapsule(uv, vec2(9.5,3.0), vec2(9.5,0.0), r));\n    \n    dst = min(dst, sdCapsule(uv, vec2(12.5,0.0), vec2(12.5,3.0), r));\n    \n    dst = min(dst, sdCapsule(uv, vec2(12.5,3.0), vec2(14.5,3.0), r));\n    dst = min(dst, sdCapsule(uv, vec2(12.5,0.0), vec2(14.5,0.0), r));\n    dst = min(dst, sdCapsule(uv, vec2(12.5,1.5), vec2(13.5,1.5), r));\n    \n    dst = min(dst, abs(length(uv - vec2(5.5, 1.5)) - 1.5) - 0.5);\n              \n    return dst;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    \n    float yUv = uv.y + 0.5;\n    \n    \n    vec2 flagsUv = uv * vec2(0.3, 0.5) * 1.3 + vec2(0.5);\n    \n    float t = iTime * 0.3;\n    vec2 wave = vec2(sin(uv.y * 1.3 + t * 0.5) * 0.5, sin(uv.x * 4.0 + t * 4.0));\n    \n    wave += vec2(sin(uv.y * 4.3 + t * 3.6) * 0.25, sin(uv.x * 3.2 + t * 6.2)* 0.5);\n    \n    //wave = vec2(sin(uv.y + iTime), sin(uv.x + iTime)) * 0.1;\n    \n    \n    float fakeShading = mix(0.6, 1.3, S(1.0, -1.0, dot(wave, vec2(-0.7, 0.5))));\n    \n    \n    flagsUv += wave * 0.02;\n    \n    vec2 flagMaskXY = (vec2(0.5) - abs(flagsUv - vec2(0.5))) * 200.0;\n\n    float flagMask = sat(flagMaskXY.x) * sat(flagMaskXY.y);\n    \n    vec3 flagCol = flag(flagsUv) * fakeShading * vec3(0.9, 0.9, 1.1);\n    \n    vec3 bg = mix(vec3(0.3, 0.4, 1.0),  vec3(0.0, 0.0, 1.0),  yUv);\n    \n    bg.rgb += (uv.y * uv.y + uv.x * 0.1) * 0.6;\n    \n    bg.rgb *= S(2.5, 1.0, length(uv * vec2(1.0, 1.5))) * 0.6 + 0.4;\n    \n\n    \n    // Time varying pixel color\n    //vec3 col = vec3(star(uv.xy));\n    \n    //vec3 col = vec3(flag(uv.xy));\n    \n    vec3 col = mix(bg, flagCol, flagMask);\n    \n    float vote = voteDst(uv * 5.0 + vec2(7.25, 1.5));\n    \n\n    col = mix(vec3(0.0), col, S(-1.2, 1.0, vote));\n    \n    \n    float aa = 15.0 / iResolution.x;\n    \n    float outline = 0.2;\n    col = mix(vec3(0.0), col, S(outline -aa, outline +aa, vote));\n    col = mix(vec3(1.0), col, S(-aa, aa, vote));\n    \n\n    col.rgb = pow(col.rgb, vec3(0.7));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    //fragColor.rgb = vec3(vote(uv));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}