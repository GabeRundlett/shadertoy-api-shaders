{
    "Shader": {
        "info": {
            "date": "1580355575",
            "description": "life",
            "flags": 0,
            "hasliked": 0,
            "id": "tlcSR8",
            "likes": 1,
            "name": "de_ko_bo_ko",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 0,
            "username": "zephyran",
            "viewed": 13127
        },
        "renderpass": [
            {
                "code": "float Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uv2 = uv;\n    \n    uv2 *= 16.;\n    \n    vec2 gv = fract(uv2);\n    vec2 id = floor(uv2);\n    \n    float r = Hash21(id);\n    \n    // Calculate the to center distance\n    float d = length(uv - 0.5) * 2.0;\n    \n    // Calculate the ripple time\n    float t = d * d * 25.0 - iTime * 4.0;\n    \n    // Calculate the ripple thickness\n    d = (cos(t) * 0.5 + 0.5) * (1.0 - d);\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos(t / 20.0 + uv.xyx + vec3(0.0,2.0,4.0));\n\n    // Set the output color to rgb channels and the thickness to alpha channel\n    // AO is automatically calculated\n    fragColor = vec4(col, r+(sin(iTime*r)*.5));\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"dekoboko\",\n\t\"description\": \"life\",\n\t\"model\": \"person\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}