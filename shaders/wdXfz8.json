{
    "Shader": {
        "info": {
            "date": "1587667643",
            "description": "Found bunch of examples of quasicrystals on shadertoy and combined them with FBM. I liked the result so decided to share it.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdXfz8",
            "likes": 6,
            "name": "QuasiCrystals - Dragon Eye",
            "published": 3,
            "tags": [
                "2d",
                "quasicrystals"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 509
        },
        "renderpass": [
            {
                "code": "#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define LAYERS      6\n#define FBM         3\n#define LIGHTNING   3\n#define DISTORT     1.4\n#define TIME        iTime\n#define TTIME       (TAU*TIME)\n\nfloat wave(float theta, vec2 p) {\n  return (cos(dot(p,vec2(cos(theta),sin(theta)))));\n}\n\nfloat noise(vec2 p, float time) {\n  float sum = 0.;\n  float a = 1.0;\n  for(int i = 0; i < LAYERS; ++i)  {\n    float theta = float(i)*PI/float(LAYERS);\n    sum += wave(theta, p)*a;\n    a*=DISTORT;\n  }\n\n  return abs(tanh(sum+1.0+0.75*cos(time)));\n}\n\nfloat fbm(vec2 p, float time) {\n  float sum = 0.;\n  float a = 1.0;\n  float f = 1.0;\n  for(int i = 0; i < FBM; ++i)  {\n    sum += a*noise(p*f, time);\n    a *= 2.0/3.0;\n    f *= 2.31;\n  }\n\n  return 0.45*(sum);\n}\n\nvec3 lightning(vec2 pos, float offset) {\n  vec3 col = vec3(0.0);\n  vec2 f = vec2(0);\n         \n  const float w=0.15;\n          \n  for (int i = 0; i < LIGHTNING; i++) {\n    float time = TIME + 0.5*float(i);   \n    float d1 = abs(offset * w / (0.0 + offset - fbm((pos + f) * 3.0, time)));\n    float d2 = abs(offset * w / (0.0 + offset - fbm((pos + f) * 2.0, 0.9 * time + 10.0)));\n    col += vec3(clamp(d1, 0.0, 1.0) * vec3(0.1, 0.5, 0.8));\n    col += vec3(clamp(d2, 0.0, 1.0) * vec3(0.7, 0.5, 0.3));\n  }\n          \n  return (col);\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col=pow(clamp(col,0.0,1.0),vec3(0.75)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(p.x*c + p.y*s, -p.x*s + p.y*c);\n}\n\nvec3 normal(vec2 p, float time) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(0.00001, 0);\n  \n  vec3 n;\n  n.x = fbm(p + e.xy, time) - fbm(p - e.xy, time);\n  n.y = 2.0*e.x;\n  n.z = fbm(p + e.yx, time) - fbm(p - e.yx, time);\n  \n  return normalize(n);\n}\n\nvec3 dragonEye(vec2 p) {\n  vec2 pp = 10.0*p;\n\n  rot(p, -0.75); \n  p *= vec2(1.1/tanh(1.0 + length(p)), 1.0);\n  float l = length(p);\n  \n  float dd = 0.2 + 0.65*(-0.5 + 1.75*(0.5 + 0.5*cos(3.0*l-TTIME/12.0)))*tanh(1.0/((pow(l, 4.0) + 2.0)));\n  dd *= smoothstep(9.0, 12.0, TIME-l*2.0);\n  vec3 col = vec3(0.0);\n  float f = fbm(pp, TIME*0.1);\n  vec3 ld = normalize(vec3(p.x, 0.5, p.y));\n  vec3 n = normal(pp, TIME*0.1);\n  float diff = max(dot(ld, n), 0.0);\n  col += vec3(0.5, 1.0, 0.8)*pow(diff, 20.0)/(0.5+dot(p, p));\n  col += lightning(pp, dd);\n  col *= pow(vec3(f), vec3(1.5, 5.0, 5.0));\n//  col += -0.1+0.3*vec3(0.7, 0.2, 0.4)*vec3(tanh((pow(0.6/f, 10))));\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord.xy/iResolution.xy;    \n  vec2 p = -1.0 + 2.0*q;\n\n  p.x *= iResolution.x/iResolution.y;    \n  \n  vec3 col = dragonEye(p);\n  \n  col = postProcess(col, q);\n\n  col *= smoothstep(0.0, 4.0, TIME);\n  \n  fragColor = vec4(col, 1.0);  \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}