{
    "Shader": {
        "info": {
            "date": "1601098496",
            "description": "Drawing a vector field in buf b based on mouse movement and sampling buf A using buf B as offset. Also using the average of neighbors to let the colors mix. ",
            "flags": 32,
            "hasliked": 0,
            "id": "WsccRS",
            "likes": 13,
            "name": "Vector field swirling",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "texture",
                "fluid",
                "vectorfield"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 541
        },
        "renderpass": [
            {
                "code": "// Use the mouse to draw a vector field that the colors will follow.\n// Looks pretty fluid like but is defiantly missing something big\n\n#define ShowField\n\nfloat grid(vec2 uv, float sc){\n    vec2 rv = fract(uv*sc)-.5;\n    vec2 dir = Bt((floor(uv*sc) / sc) + .5*(1. / sc)).xy;\n    float x = abs(dot(rv.yx*vec2(-1.,1.), normalize(dir)));\n    return exp(-300.*x*x);\n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n  \tf = texture(iChannel0, u/R);\n    \n    #ifdef ShowField\n    f += grid(u/R, 40.) * .3;\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Sample bufA using the vector field in bufB as texture offset and add new color\n\n#define og(u) A(0.5*(u-R*.5) + vec2(textureSize(iChannel0, 0))*.5)\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = u / R;\n   \n    vec4 bA = B(u);\n    \n    vec4 N = B(u+vec2(0., 2.));\n\tvec4 S = B(u+vec2(0., -2.));\n\tvec4 E = B(u+vec2(2., 0.));\n\tvec4 W = B(u+vec2(-2., 0.));\n    vec4 avg = (N+S+E+W)/4.;\n    \n    vec4 bB = D(u);\n    vec4 new = B(u - bB.xy*4.);\n    bA = (new+avg)*.5;\n   \n    \n    if(iMouse.z > 0.){\n        if(bA.w > 5.){\n        \tfloat dec = ss(3., .0, line(u, m, C(u).xy)-20.);\n            bA.xyz = mix(bA.xyz, .5+.5*vec3(cos(vec3(0.2, 0.5, 1.5)*iTime*8.)),dec);\n        }\n        bA.w++;\n    }\n    else{\n     \tbA.w = 0.;   \n    }\n        \n    \n    if(iFrame < 5){\n        bA = vec4(0);\n    }\n    f = bA;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Makes a vector field based on mouse movement direction\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec4 bB = A(u);\n   \n    if(iMouse.z > 0.){\n    \tvec2 mdx = clamp((B(u).xy - m), -60., 60.);\n    \tfloat dec = exp(-length(m - u)*.07)*0.0055;\n    \tbB.xy -= (mdx)*dec *100.;\n    }\n    \n    bB.xy=clamp(bB.xy, -1., 1.);\n    f = vec4(bB.xy, bB.zw);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Used as mouse last position\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor = vec4(iMouse.xy, 0.,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R iResolution.xy\n#define m iMouse.xy\n\n#define A(p) texelFetch(iChannel0,  ivec2(p), 0)\n#define B(p) texelFetch(iChannel1,  ivec2(p), 0)\n#define C(p) texelFetch(iChannel2,  ivec2(p), 0)\n#define D(p) texelFetch(iChannel3,  ivec2(p), 0)\n\n#define Bt(p) texture(iChannel1, p)\n\n#define ss(a, b, t) smoothstep(a, b, t)\n\n\nfloat line( in vec2 p, in vec2 a, in vec2 b ){\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}