{
    "Shader": {
        "info": {
            "date": "1635650776",
            "description": "A porcelain glaze pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "ft3Gz8",
            "likes": 2,
            "name": "Porcelain",
            "published": 3,
            "tags": [
                "fractal",
                "porcelain"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 218
        },
        "renderpass": [
            {
                "code": "\n//change these constants to get different patterns!\n#define c2 0.0\n\n#define c1 vec4(3.0+c2,2.5+c2,-1.5,0)\n//#define c1 vec4(2.0+c2,1.5+c2,1.4,0)\n//#define c1 vec4(1.0,1.5,1.4,0)\n//#define c1 vec4(7.0,5.0,1.4,0)\n//#define c1 vec4(7.0,9.0,1.4,0)\n//#define c1 vec4(5.0,5.5,1.4,0)\n\n//to do: drag and drop using https://www.shadertoy.com/view/WdGGWh\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   //from David Hoskins' \"Hash without sine\"\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+c1.xy)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    \n\n    \n    vec3 col;  \n    float t1 = 4.5*3./2.;\n\n    vec2 uv = (fragCoord-iResolution.xy)/iResolution.y/t1/4.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/16.0;\n    //vec3 random1 = hash31(floor((iTime)/10.0+uv.x))*10.*.0;\n    float t2 = floor((iTime+4.)/20.0+uv.x);\n    //vec3 random2 = hash31(1.+t2);\n    \n    \n    float offset = -.1;\n    \n    for(int c=0;c<3;c++){\n        float scale = c1.z;\n        float t3 = float(c)+t2;\n\n        for(int i=0;i<3;i++)\n        {\n            vec3 col_prev = col;\n            float factor = 1.1;\n            \n            uv = triangle_wave(uv.yx+c1.z,scale)+triangle_wave(uv,scale);\n            for(int j = 0; j < 2;j++){\n                uv = triangle_wave((uv*(1.+offset)),scale);\n            }\n            scale /= 1.+col.x;\n            uv.x /= -.9;\n            \n            if(i>0) col = abs(col.yzx*col.x + col_prev*col.y)/(col.x-col.y);\n            \n            col[c] = fract((uv.x*(1.+col.x/8.))-(uv.y*(col.y/8.+1.)));\n            \n\n        }\n        \n\n            //random3 = (hash31(2.+t3)-vec3(.5))/4.;\n            //random4 = (hash31(3.+t3)-vec3(.5))/4.;\n\t}\n    \n    fragColor = vec4(vec3(col),1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}