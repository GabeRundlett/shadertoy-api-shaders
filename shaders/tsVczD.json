{
    "Shader": {
        "info": {
            "date": "1602390899",
            "description": "Experimenting.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsVczD",
            "likes": 8,
            "name": "Space Gum",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "thepheer",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "struct RM { vec3 p; float t; float d; };\n\nfloat map(vec3 p) {\n    float d = 0.0, da = 0.05, df = 10.0;\n    for (int i = 0; i < 3; i++, da *= 0.5, df *= 2.0)\n        d += da*prod3(sin(df*p));\n    \n    vec3 r = vec3(0.6);\n    mat4 tr = rotation(vec3(0.3, 0.5, 0.7)*0.1*iTime);\n    mat4 tt = translation(mod(vec3(0.0, 0.0, 0.1)*iTime, r));\n    vec3 tp = mod(transform(tr*tt, p), r) - 0.5*r;\n\treturn 0.9*(sdSphere(tp, 0.1) + d);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p) {\n    const vec3 k = vec3(1.0, -1.0, 1e-5);\n    return normalize(\n        k.xyy*map(p + k.xyy*k.z) +\n        k.yyx*map(p + k.yyx*k.z) +\n        k.yxy*map(p + k.yxy*k.z) +\n        k.xxx*map(p + k.xxx*k.z)\n    );\n}\n\nbool raymarch(vec3 rc, vec3 ro, vec3 rd, out RM rm) {\n\t// rayconfig rc: threshold, near, far\n    for (rm.t = rc.y; rm.t < rc.z; rm.t += rm.d)\n        if (abs(rm.d = map(rm.p = ro + rm.t*rd)) < rc.x)\n            return true;\n    return false;\n}\n\nvec3 render(vec2 uv) {\n    vec3 material = vec3(2.0, 0.2, 0.1);\n    vec3 ambient = 0.1*vec3(0.1, 0.2, 0.3);\n    vec3 light = 1.5*vec3(1.0);\n    vec3 fog = ambient;\n    \n    vec3 rc = vec3(1e-3, 0.0, 10.0);\n    vec3 rt = vec3(1.0*uv, 2.0);\n    vec3 ro = vec3(0.0*uv, 0.0);\n    vec3 rd = normalize(rt - ro);\n    RM rm;\n\n    if (!raymarch(rc, ro, rd, rm))\n        return fog;\n\t\n    //if (rm.d < 0.0)\n    //    return vec3(1.0, 0.0, 0.0);\n    \n    vec3 n = normal(rm.p);\n    vec3 lp = vec3(0.0, 0.25, 0.0) - rm.p;\n    vec3 ld = normalize(lp);\n    float ll = length(lp);\n    \n    float diffuse = 1.0*max(0.0, dot(n, ld));\n    float specular = 2.0*pow(max(0.0, dot(rd, reflect(ld, n))), 200.0);\n    vec3 color = ambient + (material*diffuse + specular)*light/(ll*ll);\n    return mix(color, fog, rm.t/rc.z);\n}\n\nvoid mainImage(out vec4 rgba, vec2 xy) {\n    vec2 r = vec2(iResolution.x/iResolution.y, 1.0);\n    vec2 uv = 2.0*xy/iResolution.xy - 1.0;\n    rgba = vec4(srgb(aces(render(r*uv))), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://iquilezles.org/articles/distfunctions\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\n// https://www.shadertoy.com/view/WdGcD1\nvec3 aces(vec3 color) {\t\n    mat3 x = mat3(+0.59719, +0.07600, +0.02840, +0.35458, +0.90834, +0.13383, +0.04823, +0.01566, +0.83777);\n    mat3 y = mat3(+1.60475, -0.10208, -0.00327, -0.53108, +1.10813, -0.07276, -0.07367, -0.00605, +1.07602);\n    vec3 v = x*color;    \n    vec3 a = v*(v + 0.0245786) - 0.000090537;\n    vec3 b = v*(0.983729*v + 0.4329510) + 0.238081;\n    return y*(a/b);\t\n}\n\nvec3 srgb(vec3 c) {\n    vec3 a = 1.055*pow(c, vec3(1.0/2.4)) - 0.055;\n    vec3 b = 12.92*c;\n    return mix(a, b, lessThanEqual(c, vec3(0.0031308)));\n}\n\nfloat prod3(vec3 v) {\n\treturn v.x*v.y*v.z;\n}\n\nvec3 transform(mat4 m, vec3 v) {\n\treturn (vec4(v, 1.0) * m).xyz;\n}\n\nmat4 rotation(vec3 a) {\n    vec3 s = sin(a);\n    vec3 c = cos(a);    \n    return mat4(\n    \tc.y*c.z, c.y*s.z, -s.y, 0.0,\n        s.x*s.y*c.z-c.x*s.z, s.x*s.y*s.z+c.x*c.z, s.x*c.y, 0.0,\n        c.x*s.y*c.z+s.x*s.z, c.x*s.y*s.z-s.x*c.z, c.x*c.y, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nmat4 translation(vec3 p) {\n    return mat4(\n        1.0, 0.0, 0.0, p.x,\n        0.0, 1.0, 0.0, p.y,\n        0.0, 0.0, 1.0, p.z,\n        0.0, 0.0, 0.0, 1.0\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}