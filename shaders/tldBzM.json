{
    "Shader": {
        "info": {
            "date": "1612452746",
            "description": "It's 3 balls light by 3 differents colors",
            "flags": 0,
            "hasliked": 0,
            "id": "tldBzM",
            "likes": 1,
            "name": "3 balls, 3 colors",
            "published": 3,
            "tags": [
                "ballscolors"
            ],
            "usePreview": 0,
            "username": "Wazass",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "vec4 getIntersection(vec3 origin, vec3 ray, vec4 sphere) {\n\n    float h = length(sphere.xyz - origin);\n    float a = dot(sphere.xyz - origin, ray);\n    float sq_o = h*h - a*a; \n    \n    // Check if there is an intersection\n    float sq_d = sphere.w*sphere.w - sq_o;\n    if (sq_d > 0.) {\n        float d = sqrt(sq_d);\n        vec3 intersection = origin + (a - d)*ray;        \n        return vec4(intersection, 1.0);\n    }\n    else\n    {\n        return vec4(0.);\n    } \n    \n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    vec3 posOeil = vec3(iResolution.xy/2., 1000.0);\n    vec3 posEcran = vec3(fragCoord, 0.0);\n    \n    vec3 ray = normalize(posEcran - posOeil);\n    \n    // notre sphere\n    // rayon 1\n    // en position au milieu de l'Ã©cran, assez loin\n    \n    vec4 sphere = vec4(iResolution.xy/1.25, -200., 100.); \n    vec4 sphere2 = vec4(iResolution.xy/2., -200., 100.);\n    vec4 sphere3 = vec4(iResolution.xy/5., -200., 100.);\n    \n    vec3 light_pos = vec3(iMouse.xy, 0.0);\n\n\n\n    vec3 col = vec3(0.);\n    \n    vec4 intersection = getIntersection(posOeil, ray, sphere);\n    if (intersection.w > 0.) {\n        vec3 normal = normalize(intersection.xyz - sphere.xyz);\n        vec3 surface_pos = intersection.xyz;\n                \n        vec3 incidence = light_pos - surface_pos;\n        vec3 incidence2 = light_pos - surface_pos;\n        float intensite = length(incidence);\n        float intensite2 = length(incidence2);\n        \n        incidence = normalize(incidence);\n        intensite = 10000. / (intensite*intensite);\n        incidence2 = normalize(incidence2);\n        intensite2 = 3000. / (intensite2*intensite2);\n    \n        //Lambert\n        col = (dot(incidence, normal) * vec3(1., 0., 1.) * intensite)+(dot(incidence2, normal) * vec3(0.6,1.,1.) * intensite2);\n    }\n    \n    vec4 intersection2 = getIntersection(posOeil, ray, sphere2);\n    if (intersection2.w > 0.) {\n        vec3 normal2 = normalize(intersection2.xyz - sphere2.xyz);\n        vec3 surface_pos = intersection2.xyz;\n    \n        vec3 incidence = light_pos - surface_pos;\n        vec3 incidence2 = light_pos - surface_pos;\n        float intensite = length(incidence);\n        float intensite2 = length(incidence2);\n    \n        incidence = normalize(incidence);\n        intensite = 10000. / (intensite*intensite);\n        incidence2 = normalize(incidence2);\n        intensite2 = 3000. / (intensite2*intensite2);    \n    \n        //Lambert\n        col = max(col, (dot(incidence, normal2) * vec3(1.,1.,0.) * intensite)+(dot(incidence2, normal2) * vec3(0.6,1.,1.) * intensite2));\n    }\n    \n    vec4 intersection3 = getIntersection(posOeil, ray, sphere3);\n    if (intersection3.w > 0.) {\n        vec3 normal3 = normalize(intersection3.xyz - sphere3.xyz);\n        vec3 surface_pos = intersection3.xyz;\n    \n        vec3 incidence = light_pos - surface_pos;\n        vec3 incidence2 = light_pos - surface_pos;\n        float intensite = length(incidence);\n        float intensite2 = length(incidence2);\n    \n        incidence = normalize(incidence);\n        intensite = 10000. / (intensite*intensite);\n        incidence2 = normalize(incidence2);\n        intensite2 = 3000. / (intensite2*intensite2);     \n    \n        //Lambert\n        col = max(col, (dot(incidence, normal3) * vec3(0.,1.,1.) * intensite)+(dot(incidence2, normal3) * vec3(0.6,1.,1.) * intensite2));\n    }\n\n    //vec4 sphere2 = vec4(iMouse.xy, -100., 100.);\n    //mask = max(mask, (intersects(posOeil, ray, sphere2)) ? 0. : 1.);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}