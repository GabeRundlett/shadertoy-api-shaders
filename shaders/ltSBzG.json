{
    "Shader": {
        "info": {
            "date": "1516210869",
            "description": " Lots of trains on the Yukon line out of Skagway; note that trains travel in both directions\n on a single track without difficulty (mouse: horizontal position overrides automatic\n view selection).\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ltSBzG",
            "likes": 11,
            "name": "White Pass Route",
            "published": 3,
            "tags": [
                "tunnel",
                "smoke",
                "train",
                "bridge"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 897
        },
        "renderpass": [
            {
                "code": "// \"White Pass Route\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrEVCapsDf (vec3 p, vec4 u, float r);\nfloat PrCapsAnDf (vec3 p, float r, float w, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Hashff (float p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2s (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define MAX_CAR 8\n\nvec4 carStat[MAX_CAR], vTie;\nvec3 qHit, vnSmk, sunDir;\nfloat dstFar, tCur, trCyc, trMov, szFac, trkWid, trkRad, rlWid, rlHt, tunRad, tunUp, vuMode, tunWl,\n   trVel, trDir, idCyc;\nint idObj, nCar;\nconst float pi = 3.14159;\nconst int idRail = 1, idRbase = 2, idSlp = 3, idVia = 4, idTie = 5, idTun = 6, idGrnd = 7,\n   idEng = 11, idAxle = 12, idCar = 13, idWheel = 14, idCrod = 15, idFun = 16, idCpl = 17, idLamp = 18;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GroundDf (vec3 p, float r, float dMin)\n{\n  vec3 q;\n  float d, dt, s;\n  q = p;  q.y -= tunUp;\n  dt = length (vec2 (r - trkRad, q.y)) - tunRad;\n  q = p;\n  s = 0.5 * Fbm2s (0.75 * q.xz);\n  q.y -= -1.7 + 0.4 * q.z;\n  d = max (r - 1.6 * trkRad, max (q.y - 0.1 - s, - q.y - 0.1));\n  q = p;  q.yz -= vec2 (7., -0.7 * trkRad);\n  d = SmoothMin (d, PrCapsAnDf (q.xzy, 1.7 * trkRad + 0.5 * q.y - s, 0.1 + s, 4.), 3.);\n  if (vuMode <= 0.) d = max (d, - 0.5 * trkRad - q.z);\n  d = max (max (0.7 * d, - dt), q.y - 30.);\n  DMIN (idGrnd);\n  return dMin;\n}\n\nfloat EngDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float wRad, d, aw, sx, tw;\n  p /= szFac;\n  tw = trkWid / szFac;\n  wRad = 0.8;\n  q = p;\n  d = min (max (max (PrBoxDf (q - vec3 (0., 0., -1.75), vec3 (1., 1.4, 0.6)),\n     - PrBoxDf (q - vec3 (0., 0., -1.95), vec3 (0.95, 1.3, 0.65))),\n     - PrBox2Df (q.yz - vec2 (0.7, -1.75), vec2 (0.5, 0.4))),\n     max (PrCylDf (q - vec3 (0., -2.4, -1.75), 4., 0.65), - (q.y - 1.35)));\n  d = min (d, max (PrCapsDf (q - vec3 (0., -0.2, 0.5), 1., 2.), - (q.z + 1.2)));\n  d = min (min (min (min (d, PrBoxDf (q - vec3 (0., -0.5, -3.15), vec3 (1., 0.7, 0.3))),\n     PrBoxDf (q - vec3 (0., -1.3, -0.25), vec3 (1., 0.1, 3.2))),\n     PrBoxDf (q - vec3 (0., -1.4, 3.), vec3 (1.1, 0.2, 0.07))),\n     PrCylDf (vec3 (abs (q.x) - 0.6, q.y + 1.4, q.z - 3.1), 0.2, 0.1));\n  DMINQ (idEng);\n  d = PrCylDf ((q - vec3 (0., -1.4, -3.5)).xzy, 0.4, 0.03);\n  DMIN (idCpl);\n  d = min (PrCylDf ((q - vec3 (0., 1.1, 2.1)).xzy, 0.3, 0.5),\n     PrCylDf ((q - vec3 (0., 1.5, 2.1)).xzy, 0.4, 0.15));\n  d = min (d, PrCapsDf ((q - vec3 (0., 0.8, 0.5)).xzy, 0.3, 0.2));\n  DMINQ (idFun);\n  d = PrCylDf (q - vec3 (0., -0.2, 3.5), 0.2, 0.2);\n  DMIN (idLamp);\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (tw - 0.12, -1.4, 1.1);\n  d = min (max (min (PrCylDf (q.zyx, wRad, 0.1),\n     PrCylDf (q.zyx - vec3 (0.,0., -0.07), wRad + 0.05, 0.03)),\n     - PrCylDf (q.zyx, wRad - 0.1, 0.12)), PrCylDf (q.zyx, 0.15, 0.10));\n  q = p;  q.x = abs (q.x);  q -= vec3 (tw - 0.17, -1.4, 1.1 * sign (q.z));\n  aw = - trkRad * trVel * tCur / (wRad * szFac);\n  q.yz = Rot2D (q.yz, aw);  \n  q.yz = Rot2D (q.yz, 2. * pi * floor ((atan (q.y, q.z) + pi) * 8. /\n     (2. * pi) + 0.5) / 8.);\n  q.z += 0.5 * wRad;\n  d = min (d, PrCylDf (q, 0.05, 0.5 * wRad));\n  DMIN (idWheel);\n  q = p;\n  sx = sign (q.x);\n  q.x = abs (q.x);  q -= vec3 (tw + 0.08, -1.4, 0.);\n  aw -= 0.5 * pi * sx; \n  q.yz -= 0.3 * vec2 (cos (aw), - sin (aw));\n  d = PrCylDf (q, 0.04, 1.2);\n  q.z = abs (q.z);  q -= vec3 (-0.1, 0., 1.1);\n  d = min (d, PrCylDf (q.zyx, 0.06, 0.15));\n  DMIN (idCrod);\n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.4, 1.1);\n  d = PrCylDf (q.zyx, 0.1, tw - 0.1);\n  DMIN (idAxle);\n  return dMin;\n}\n\nfloat CarDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float wRad, d, tw;\n  wRad = 0.35;\n  p /= szFac;\n  tw = trkWid / szFac;\n  q = p;\n  d = min (min (PrBoxDf (q, vec3 (1.3, 1.4, 2.8)),\n     max (PrCylDf (q - vec3 (0., -2.35, 0.), 4., 2.8), - (q.y - 1.4))),\n     PrBoxDf (q - vec3 (0., -1.6, 0.), vec3 (0.8, 0.3, 2.)));\n  DMINQ (idCar);\n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.4, 2.9);\n  d = PrCylDf (q.xzy, 0.4, 0.03);\n  DMIN (idCpl);\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (tw - 0.1, -1.85, 1.1);\n  d = min (min (PrCylDf (q.zyx, wRad, 0.1),\n     PrCylDf (q.zyx - vec3 (0.,0., -0.07), wRad + 0.05, 0.03)),\n     PrCylDf (q.zyx, 0.15, 0.10));\n  q.x -= 0.1;\n  d = max (d, - PrCylDf (q.zyx, 0.2, 0.05));\n  DMIN (idWheel);\n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.85, 1.1);\n  d = PrCylDf (q.zyx, 0.1, tw - 0.15);\n  DMIN (idAxle);\n  return dMin;\n}\n\nfloat TrackDf (vec3 p, float r, float dMin)\n{\n  vec3 q;\n  float d, a;\n  a = (r > 0.) ? atan (p.z, - p.x) / (2. * pi) : 0.;\n  q = p;  q.xz = Rot2D (q.xz, 2. * pi * (floor (128. * a + 0.5) / 128.));\n  q.y -= -5. - 0.6 * rlHt;\n  r -= trkRad;\n  d = max (max (abs (r) - 1.7 * trkWid, abs (q.y) - 5.),\n     - min (max (max (max (abs (r) - 1.7 * trkWid + 0.08, abs (q.y + 0.2) - 4.8),\n     - PrBox2Df (vec2 (abs (mod (q.y + 0.7, 1.) - 0.5), abs (q.z) - 0.5), vec2 (0.07))), abs (q.y + 0.2) - 5.),\n     max (PrBox2Df (vec2 (mod (q.y + 0.2, 1.) - 0.5, q.z), vec2 (0.43)), abs (q.y + 0.2) - 5.)));\n  DMIN (idVia);\n  d = PrEVCapsDf (abs (vec3 (r, mod (q.y + 0.2, 1.) - 0.5, q.z)), vTie, 0.015);\n  d = max (d, abs (q.y + 0.2) - 5.);\n  DMIN (idTie);\n  dMin = max (dMin, - p.y + 0.4 * p.z - 2.5);\n  q = p;  q.y -= tunUp;\n  d = max (abs (length (vec2 (r, q.y)) - tunRad) - 0.2 * trkWid, - (p.z - 0.3 * p.y - 2.));\n  DMIN (idTun);\n  q = p;  q.xz = Rot2D (q.xz, 2. * pi * (floor (128. * a + 0.5) / 128.));\n  q.xy -= vec2 (- trkRad, -0.2 * rlHt);\n  d = PrBoxDf (q, vec3 (1.3 * trkWid, 0.5 * rlHt, 0.3 * trkWid));\n  DMIN (idSlp);\n  q = vec3 (r, p.yz);  q.y -= -0.4 * rlHt;\n  d = PrBox2Df (q.xy, vec2 (1.5 * trkWid, 0.2 * rlHt));\n  DMIN (idRbase);\n  q = vec3 (abs (r) - trkWid, p.yz);  q.y -= 0.7 * rlHt;\n  d = PrRoundBox2Df (q.xy, vec2 (rlWid, rlHt), 0.8 * rlWid);\n  DMIN (idRail);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, r, d;\n  dMin = dstFar;\n  r = length (p.xz);\n  dMin = GroundDf (p, r, dMin);\n  dMin = TrackDf (p, r, dMin);\n  dMin /= szFac;\n  for (int k = 0; k < MAX_CAR; k ++) {\n    if (k == nCar) break;\n    q = p - carStat[k].xyz;\n    d = PrCylDf (q.xzy, 3.4 * szFac, 2.2 * szFac);\n    if (d < 0.2) {\n      q.xz = Rot2D (q.xz, carStat[k].w);\n      dMin = (k == 0) ? EngDf (q, dMin) : CarDf (q, dMin);\n    } else dMin = min (dMin, d);\n  }\n  dMin *= szFac;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  if (rd.y < 0.02 * Fbm1 (256. * atan (rd.z, rd.x) / pi))\n     col = vec3 (0.4, 0.4, 0.45) * (1. - 0.3 * Fbm2 (256. * vec2 (atan (rd.x, - rd.z), rd.y)));\n  else {\n    rd.y = abs (rd.y);\n    sd = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.05, 0.1, 0.25) + 0.2 * pow (1. - rd.y, 8.) +\n       0.2 * pow (sd, 8.) + 0.4 * min (pow (sd, 256.), 0.3);\n    f = 2. * Fbm2 (0.05 * (ro + rd * (100. - ro.y) / rd.y).xz);\n    col = mix (col, vec3 (1.), clamp (0.1 + 0.8 * f * rd.y, 0., 1.));\n  }\n  return col;\n}\n\nvec4 GrndCol (vec3 ro, vec3 vn)\n{\n  vec4 objCol;\n  objCol = mix (vec4 (0.7, 0.72, 0.7, 0.05), vec4 (0.9, 0.9, 0.95, 0.1), smoothstep (0.4, 0.6, vn.y));\n  objCol *= (1. - 0.1 * Fbm2 (4. * ro.xz));\n  return objCol;\n}\n\nvec4 SceneCol (vec3 ro)\n{\n  vec4 objCol, carCol, carCol2;\n  float a, r, h;\n  r = length (ro.xz);\n  a = (r > 0.) ? atan (ro.z, - ro.x) / (2. * pi) : 0.;\n  if (idObj == idEng || idObj == idCar || idObj == idFun) {\n    h = Hashff (5. * idCyc + 17.1);\n    carCol = vec4 (HsvToRgb (vec3 (mod (h, 1.), 0.8, 0.9)), 0.2);\n    carCol2 = vec4 (HsvToRgb (vec3 (mod (h + 0.5, 1.), 0.8, 0.9)), 0.3);\n    if (idObj == idEng) {\n      objCol = (abs (qHit.y + 0.2) < 0.05 || qHit.y > 1.35) ? carCol2 : carCol;\n      if (qHit.y < -1.15) objCol *= 0.5;\n      if (abs (abs (qHit.x) - 0.5) < 0.4 && abs (qHit.y - 1.1) < 0.2) objCol *= 0.7;\n      else if (abs (abs (qHit.z - 1.) - 1.5) < 0.1 && qHit.y > -1.1) objCol *= 0.7;\n      if (qHit.z > 3.1 && qHit.y < -1.) objCol = carCol;\n      if (qHit.z < - 2.8 && qHit.y > 0.1) objCol = vec4 (vec3 (0.01), 0.);\n    } else if (idObj == idCar) {\n      objCol = (abs (qHit.y + 0.2) < 0.05 || qHit.y > 1.4) ? carCol2 : carCol;\n      if (qHit.y < -1.15) objCol *= 0.5;\n      if (abs (qHit.y - 0.6) < 0.6 && (abs (qHit.x) < 0.5 || abs (abs (qHit.z) - 1.2) < 1.1))\n         objCol *= 0.7;\n    } else if (idObj == idFun) {\n      objCol = (qHit.y > 1.35) ? carCol : carCol2;\n    }\n  } else if (idObj == idTun) {\n    if (tunWl == 0.) {\n      if (abs (r - trkRad) < 0.2 * trkWid && abs (mod (32. * a, 1.) - 0.125) < 0.04)\n         objCol = vec4 (0.8, 0.8, 0.4, -1.);\n      else if (length (vec2 (abs (ro.y - tunUp + 0.5 * tunRad),\n         2. * (mod (16. * a + 0.5, 1.) - 0.5))) < 0.02) objCol = vec4 (0., 0.3, 0., -1.);\n      else objCol = vec4 (0.2, 0.2, 0.22, 0.) * (0.7 + 0.3 * SmoothBump (0.02, 0.98, 0.005,\n         mod (128. * a, 1.)));\n    } else {\n      if (max (abs (r - trkRad), abs (ro.y - tunUp - tunRad)) < 0.1 * trkWid)\n         objCol = (trDir * ro.x > 0.) ? vec4 (0., 1., 0., -1.) : vec4 (1., 0., 0., -1.);\n      else objCol = mix (vec4 (0.4, 0.4, 0.44, 0.1), vec4 (0.8, 0.8, 0.85, 0.1),\n         step (2.05, ro.z - 0.3 * ro.y) * smoothstep (0., 0.1, ro.y - tunUp -\n         0.3 * tunRad * Fbm1 (8. * ro.z)));\n    }\n  } else if (idObj == idVia) {\n    objCol = vec4 (0.7, 0.6, 0.4, 0.1);\n    if (ro.y > -0.03) objCol.rgb *= 1. - 0.2 * smoothstep (0.4, 0.6, Fbm2 (128. * vec2 (a, r)));\n  } else if (idObj == idTie) objCol = vec4 (0.4, 0.4, 0.45, 0.1);\n  else if (idObj == idRail) objCol = vec4 (0.7, 0.7, 0.75, 0.5);\n  else if (idObj == idRbase) objCol = vec4 (0.5, 0.4, 0.3, 0.) *\n     (1. - 0.07 * floor (8. * Noisefv2 (64. * ro.xz)));\n  else if (idObj == idSlp) objCol = vec4 (0.5, 0.3, 0.1, 0.) * (1. -\n     0.7 * step (abs (abs (r - trkRad) - trkWid), 2.5 * rlWid) *\n     step (abs (mod (256. * a + 0.5, 1.) - 0.5), 0.03));\n  else if (idObj == idAxle) objCol = vec4 (0.4, 0.4, 0.5, 0.3);\n  else if (idObj == idWheel) objCol = vec4 (0.5, 0.5, 0.6, 0.3);\n  else if (idObj == idCrod) objCol = vec4 (0.7, 0.7, 0.1, 0.3);\n  else if (idObj == idLamp) objCol = (mod (tCur, 2.) < 1.) ? vec4 (1., 1., 0.7, -1.) :\n     vec4 (0.8, 0.8, 0.4, -1.);\n  return objCol;\n}\n\nvec2 TrackPath (float t)\n{\n  return trkRad * vec2 (sin (t), - cos (t));\n}\n\nfloat SmkBallHit (vec3 ro, vec3 rd)\n{\n  vec3 p, u;\n  float b, d, w, dMin, rad, a, da, nb;\n  dMin = dstFar;\n  const float nsBall = 300., nsShow = 20.;\n  da = 0.075 * pi - trDir * (trMov - 0.068 * pi);\n  nb = 0.;\n  for (float n = 0.; n < nsBall; n ++) {\n    a = 2. * pi * n / nsBall + pi;\n    if (mod (a + da, 2. * pi) < 0.15 * pi) {\n      if (abs (mod (a, 2. * pi) - pi) > 0.45 * pi) {\n        p.xz = TrackPath (a);\n        p.y = 1.04;\n        u = ro - p.xyz;\n        rad = 0.09 - (0.085 / nsShow) * ((trDir > 0.) ? nsShow - 1. - nb: nb);\n        if (rad > 0.) {\n          b = dot (rd, u);\n          w = b * b - dot (u, u) + rad * rad;\n          if (w >= 0.) {\n            d = - b - sqrt (w);\n            if (d > 0. && d < dMin) {\n              dMin = d;\n              vnSmk = (u + d * rd) / rad;\n            }\n          }\n        } else break;\n      }\n      ++ nb;\n    }\n  }\n  return dMin;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn, ltVec;\n  vec2 rq;\n  float dstObj, dstSmk, d, reflFac, f;\n  dstSmk = SmkBallHit (ro, rd);\n  if (dstSmk < dstFar) vnSmk = VaryNf (32. * (ro + dstSmk * rd), vnSmk, 2.);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    tunWl = (idObj == idTun) ? step (tunRad - 0.1 * trkWid,\n       length (vec2 (length (ro.xz) - trkRad, ro.y - tunUp))) : 0.;\n    if (idObj == idGrnd) objCol = GrndCol (ro, vn);\n    else objCol = SceneCol (ro);\n    if (idObj == idGrnd) vn = VaryNf (vec3 (4., 2., 4.) * ro, vn, 1.);\n    else if (idObj == idRbase || idObj == idSlp || idObj == idVia) vn = VaryNf (64. * ro, vn, 1.);\n    else if (idObj == idTun) vn = VaryNf (16. * ro, vn, 2.);\n    col = objCol.rgb;\n    if (objCol.a >= 0.) {\n      if (ro.z - 0.3 * ro.y > 2.2 && tunWl == 0. && idObj != idGrnd && idObj != idVia) {\n        if (idObj == idEng || idObj == idCar) {\n          col *= 0.2 + (0.07 + 0.13 * max (vn.y, 0.)) * (1. - smoothstep (4., 6., dstObj));\n          if (idObj == idEng && qHit.y > -1. && vn.y > 0.2 || idObj == idCar && qHit.y > -1.) {\n            rq = ro.xz + (tunRad - 0.1 * trkWid - ro.y) * reflect (rd, vn).xz;\n            if (abs (length (rq) - trkRad) < 0.2 * trkWid && abs (mod (32. *\n               atan (rq.y, rq.x) / (2. * pi), 1.) - 0.125) < 0.04) col = mix (col, vec3 (0.8, 0.8, 0.4), 0.2);\n          }\n        } else {\n          if (idObj != idTun) col *= 0.4 + 0.3 * max (vn.y, 0.);\n          ltVec = vec3 (TrackPath (trDir * (trMov + 12. * szFac / trkRad)), 0.5 * szFac).xzy - ro;\n          f = length (ltVec);\n          col *= 0.3 + (0.7 + 0.5 * max (dot (vn, ltVec), 0.) / f) / (1. + 0.8 * pow (f, 1.5));\n        }\n      } else {\n        col = col * (0.3 + 0.7 * max (dot (vn, sunDir), 0.)) +\n           objCol.a * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.);\n        if (abs (length (ro.xz) - trkRad) < 1.2 * trkWid && (idObj == idRbase || idObj == idSlp ||\n           idObj == idRail)) {\n          for (int k = 0; k < MAX_CAR; k ++) {\n            if (k == nCar) break;\n            if ((pi - abs (mod (atan (- ro.x, ro.z) + pi - trDir * (trMov - (float (k) * 6.4 +\n               ((k > 0) ? 0.3 : 0.)) * szFac / trkRad), 2. * pi) - pi)) * trkRad < 0.615) {\n              col *= 0.7;\n              break;\n            }\n          }\n        }\n        reflFac = 0.;\n        if (idObj == idEng && abs (abs (qHit.x) - 0.5) < 0.37 && abs (qHit.y - 1.1) < 0.17 ||\n           idObj == idCar && (abs (qHit.y - 0.6) < 0.55 && (abs (qHit.x) < 0.45 ||\n           abs (abs (qHit.z) - 1.2) < 1.))) reflFac = 0.8;\n        else if (idObj == idEng || idObj == idFun || idObj == idCar || idObj == idRail) reflFac = 0.1;\n        if (reflFac > 0.) col = mix (col, 0.7 * BgCol (ro, reflect (rd, vn)), reflFac);\n        if (idObj == idGrnd) col +=\n          256. * pow (clamp (0.5 + 0.5 * dot (sunDir, reflect (rd, vn)), 0., 1.), 16.) *\n           pow (1. - 0.6 * abs (dot (normalize (sunDir - rd), VaryNf (1024. * ro, vn, 2.))), 8.);\n      }\n    }\n  } else col = BgCol (ro, rd);\n  if (dstSmk < min (dstObj, dstFar))  col = mix (col, vec3 (0.8, 0.8, 0.75) *\n     (0.5 + 0.5 * max (dot (vnSmk, sunDir), 0.)), 0.85);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, col, vd;\n  vec2 mMid[4], ut[4], mSize, canvas, uv, p1, p2, ori, ca, sa;\n  float el, az, zmFac, t1, t2, r, vuCorn, tCyc;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  el = 0.;\n  az = 0.;\n  mSize = 0.2 * vec2 (canvas.x / canvas.y, 1.);\n  mMid[0] = (1. / mSize.y - 1.) * mSize;\n  mMid[1] = mMid[0] * vec2 (1., -1.);\n  mMid[2] = mMid[0] * vec2 (-1., -1.);\n  mMid[3] = mMid[0] * vec2 (-1., 1.);\n  for (int k = 0; k < 4; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  vuCorn = 0.;\n  for (int k = 0; k < 4; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuCorn = float (k + 1);\n      break;\n    }\n  }\n  dstFar = 100.;\n  szFac = 0.22;\n  trkRad = 20.;\n  trkWid = 0.31;\n  tunRad = 2.3 * trkWid;\n  tunUp = 1.7 * trkWid;\n  rlWid = 0.012;\n  rlHt = 0.025;\n  vTie.xyz = vec3 (1.6 * trkWid, 0.5, 0.5);\n  vTie = vec4 (normalize (vTie.xyz), length (vTie.xyz));\n  trVel = 0.25;\n  tCyc = 2. * pi / trVel;\n  tCur += 0.5 * tCyc;\n  vuMode = mod (vuCorn + floor (5. * mod (0.8 * tCur / tCyc, 1.)), 5.);\n  tCur += floor (900. * floor (dateCur.w / 900.) / tCyc) * tCyc;\n  if (mPtr.z > 0.) vuMode = mod (vuCorn + floor (5. * clamp (mPtr.x + 0.5, 0., 0.99)), 5.);\n  idCyc = floor (tCur / tCyc);\n  trDir = 2. * floor (2. * Hashff (99. * idCyc + 1.1)) - 1.;\n  trMov = trVel * mod (tCur, tCyc) + pi;\n  nCar = 3 + int (float (MAX_CAR - 3) * Hashff (17. * idCyc + 1.1));\n  for (int k = 0; k < MAX_CAR; k ++) {\n    if (k == nCar) break;\n    p1 = TrackPath (trDir * (trMov - ((float (k) * 6.4 + ((k > 0) ? 0.3 : 0.)) - 1.1) * szFac / trkRad));\n    p2 = TrackPath (trDir * (trMov - ((float (k) * 6.4 + ((k > 0) ? 0.3 : 0.)) + 1.1) * szFac / trkRad));\n    carStat[k].xz = 0.5 * (p1 + p2);\n    carStat[k].y = 2.7 * rlHt + 2.15 * szFac;\n    p1 -= p2;\n    carStat[k].w = atan (p1.x, p1.y);\n  }\n  if (vuMode == 0.) {\n    el += 0.05 * pi;\n    zmFac = 4.2;\n  } else if (vuMode == 1. || vuMode == 2. || vuMode == 3.) {\n     if (vuMode == 1.) {\n      t1 = trMov + 2.5 * szFac / trkRad;\n      t2 = t1 + 6.4 * szFac / trkRad;\n    } else if (vuMode == 2.) {\n      t1 = trMov + 16. * szFac / trkRad;\n      t2 = t1 - 8.3 * szFac / trkRad;\n    } else if (vuMode == 3.) {\n      t1 = trMov - (float (nCar - 1) + 3.) * 6.4 * szFac / trkRad;\n      t2 = t1 + 8.3 * szFac / trkRad;\n    }\n    r = 1.;\n    if (vuMode == 2. || vuMode == 3.) r += (1. + 0.6 * sin (0.15 * pi * tCur)) * trkWid / trkRad;\n    ro.xz = r * TrackPath (trDir * t1);\n    ro.y = 0.8;\n    el += 0.02 * pi;\n    vd.xz = TrackPath (trDir * t2) - ro.xz;\n    az -= atan (vd.x, vd.z);\n    zmFac = 3.5;\n  }\n  if (vuMode == 4.) {\n    ro = vec3 (0., 2., -30.);\n    vd = carStat[2].xyz - ro;\n    r = length (vd);\n    vd = normalize (vd);\n    vd.xz = Rot2D (vd.xz, az);\n    vd.yz = Rot2D (vd.yz, el);\n    vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n       vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd);\n    zmFac = 1. + 0.2 * min (r, 30.);\n  } else {\n    ori = vec2 (el, az);\n    ca = cos (ori);\n    sa = sin (ori);\n    vuMat = mat3 (ca.y, 0., sa.y, 0., 1., 0., - sa.y, 0., ca.y) *\n            mat3 (1., 0., 0., 0., ca.x, sa.x, 0., - sa.x, ca.x);\n    if (vuMode == 0.) ro = vuMat * vec3 (0., 0., -60.);\n  }\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (1., 3., -1.));\n  col = ShowScene (ro, rd);\n  for (int k = 0; k < 4; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0. && min (abs (ut[k].x), abs (ut[k].y)) * canvas.y < 2.)\n       col = vec3 (0.8, 0.8, 0.1);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrEVCapsDf (vec3 p, vec4 u, float r)\n{\n  return length (p - clamp (dot (p, u.xyz), 0., u.w) * u.xyz) - r;\n}\n\nfloat PrCapsAnDf (vec3 p, float r, float w, float h)\n{\n  p.z = abs (p.z) - h;\n  return max (length (vec3 (p.xy, max (0., p.z - w))) - r,\n     - length (vec3 (p.xy, max (0., p.z + w))) + r) - w;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2s (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.75);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}