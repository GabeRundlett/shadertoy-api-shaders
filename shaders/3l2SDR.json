{
    "Shader": {
        "info": {
            "date": "1565615527",
            "description": "See description in shader code\n\nmouse x to the left side => show you the EquiRectangular texture\nmouse x to the right side => show you the Core true CubeMap texture",
            "flags": 32,
            "hasliked": 0,
            "id": "3l2SDR",
            "likes": 37,
            "name": "CubeMap to EquiRect to CubeMap",
            "published": 3,
            "tags": [
                "cubemap",
                "equirectangular"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 2953
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// i needed a way for use an EquiRectangular picture for generate \n// the CubeMap in NoodlesPlate, this was the goal of this shader\n\n// it Show the Cubemap converted from an EquiRectangular texture\n// himself generated in buf A from the core true CubeMap\n// based on https://stackoverflow.com/questions/29678510/convert-21-equirectangular-panorama-to-cube-map\n// and adapted for shadertoy\n\n// you can use mouse to compare with the core cubemap\n\n// mouse x to the left side => show you the EquiRectangular texture\n// generated from my shader https://www.shadertoy.com/view/MdtfzX\n\n// mouse x to the right side => show you the Core CubeMap texture\n// displayed with the debug shader of SaschaWillems : https://www.shadertoy.com/view/tdjXDt\n\n// define this for have face size equal for extract \n// the face pictures by example (my goal :))\n// else uncomment\n#define FACE_QUAD_SIZE\n#define FACE_QUAD_SIZE_WITH_CENTERING\n\n// faceIdx is face number 0:back, 1:left 2:front 3:right 4:top 5:bottom\nvec3 getFaceUVW(vec2 uv, float faceIdx, vec2 faceSize)\n{\n    float a = 2.0*uv.x/faceSize.x;\n    float b = 2.0*uv.y/faceSize.y;\n    \t if (faceIdx<0.5) return vec3(-1., \t1.-a, 3.-b);// back\n    else if (faceIdx<1.5) return vec3(a-3., -1.,  3.-b);// left\n    else if (faceIdx<2.5) return vec3(1., \ta-5., 3.-b);// front\n    else if (faceIdx<3.5) return vec3(7.-a, 1.,   3.-b);// right\n    else if (faceIdx<4.5) return vec3(b-1., a-5., 1.  );// top\n    \t\t\t\t\t  return vec3(5.-b, a-5., -1. );// bottom\n}\n        \nvec2 EquiRectToCubeMap(vec2 uv)\n{\n    vec2 gridSize = vec2(4,3); // 4 faces on x, and 3 on y\n\tvec2 faceSize = 1.0 / gridSize; // 1.0 because normalized coords\n    vec2 faceIdXY = floor(uv * gridSize); // face id XY x:0->2 y:0->3\n    \n    // define the y limit for draw faces\n    vec2 limY = vec2(0, uv.y);\n    if (faceIdXY.x > 1.5 && faceIdXY.x < 2.5) // top & bottom faces\n    \tlimY = vec2(0,faceSize.y*3.);\n    else // all others\n        limY = vec2(faceSize.y,faceSize.y*2.);\n\n    // limit display inside the cube faces\n    if ( uv.y >= limY.x && uv.y <= limY.y\n#ifdef FACE_QUAD_SIZE\n        && uv.x <= 1.0 \n\t#ifdef FACE_QUAD_SIZE_WITH_CENTERING\n        && uv.x >= 0.0         \n\t#endif    \n#endif\n)\n\t{\n        // get face id\n        float faceId = 0.;\n        if (faceIdXY.y<0.5) \tfaceId = 4.;\t\t // top\n        else if(faceIdXY.y>1.5) faceId = 5.;\t\t // bottom\n        else \t\t\t\t    faceId = faceIdXY.x; // all others\n\n        // face coord uvw\n        vec3 p = getFaceUVW(uv,faceId,faceSize);\n        \n        // spheric to surface\n        float theta = atan(p.y,p.x);\n        float r = length(p);\n        \n        // correct spheric distortion for top and bottom faces\n        // instead of just atan(p.z,r)\n        float phi =  asin(p.z/r);\n        \n        return 0.5 + vec2(theta / _2pi, -phi / _pi);\n    }\n    return vec2(0); // outside faces => uv(0,0)\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 v = fragCoord / iResolution.xy;\n    \n#ifdef FACE_QUAD_SIZE\n// it work if x > y else chnage axis\n    \tv.x *= 4.0/3.0;\n    #ifdef FACE_QUAD_SIZE_WITH_CENTERING\n    \tv.x -= 0.5/3.0;\n    #endif\n#endif\n\n    vec2 m = iMouse.xy / iResolution.xy;\n    \n    fragColor = texture(iChannel0, EquiRectToCubeMap(v));\n    \n    if (iMouse.z > 0. && m.x < 0.5)\n    {\n        // Equirectangular texture generated from the core CubeMap\n        fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    }\n    else if (iMouse.z > 0. && m.x > 0.5)\n    {\n        float a = v.x * _2pi - _dpi + iTime;\n        float b = v.y * _pi; \n        vec3 ct = vec3(-sin(b)*cos(a),cos(b),-sin(b)*sin(a)); // surf to spheric       \n        vec2 po = 0.5 + vec2(atan(ct.z,ct.x)/_2pi,-asin(ct.y)/_pi);\n        fragColor = texture(iChannel1, getCubeMap(po));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//https://www.shadertoy.com/view/MdtfzX\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 v = fragCoord / iResolution.xy;\n\n\tfloat a = v.x * _2pi - _dpi + iTime;\n\tfloat b = v.y * _pi; \n        \n\t// sphere\n    vec3 rd = vec3(\n        sin(b) * cos(a),\n    \tcos(b),\n    \t-sin(b) * sin(a));\n                \n    fragColor = texture(iChannel0, -rd);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float _pi = radians(180.0);\nconst float _2pi = radians(360.0);\nconst float _dpi = radians(90.0);\n\n//from SaschaWillems : https://www.shadertoy.com/view/tdjXDt\nvec3 getCubeMap(vec2 inUV)\n{\n\tvec3 samplePos = vec3(0.0f);\n\t\n\t// Crude statement to visualize different cube map faces based on UV coordinates\n\tint x = int(floor(inUV.x / 0.25f));\n\tint y = int(floor(inUV.y / (1.0 / 3.0))); \n\tif (y == 1) {\n\t\tvec2 uv = vec2(inUV.x * 4.0f, (inUV.y - 1.0/3.0) * 3.0);\n\t\tuv = 2.0 * vec2(uv.x - float(x) * 1.0, uv.y) - 1.0;\n\t\tswitch (x) {\n\t\t\tcase 0:\t// NEGATIVE_X\n\t\t\t\tsamplePos = vec3(-1.0f, uv.y, uv.x);\n\t\t\t\tbreak;\n\t\t\tcase 1: // POSITIVE_Z\t\t\t\t\n\t\t\t\tsamplePos = vec3(uv.x, uv.y, 1.0f);\n\t\t\t\tbreak;\n\t\t\tcase 2: // POSITIVE_X\n\t\t\t\tsamplePos = vec3(1.0, uv.y, -uv.x);\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tcase 3: // NEGATIVE_Z\n\t\t\t\tsamplePos = vec3(-uv.x, uv.y, -1.0f);\n\t\t\t\tbreak;\n\t\t}\n\t} else {\n\t\tif (x == 1) { \n\t\t\tvec2 uv = vec2((inUV.x - 0.25) * 4.0, (inUV.y - float(y) / 3.0) * 3.0);\n\t\t\tuv = 2.0 * uv - 1.0;\n\t\t\tswitch (y) {\n\t\t\t\tcase 0: // NEGATIVE_Y\n\t\t\t\t\tsamplePos = vec3(uv.x, -1.0f, uv.y);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2: // POSITIVE_Y\n\t\t\t\t\tsamplePos = vec3(uv.x, 1.0f, -uv.y);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn samplePos;  \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}