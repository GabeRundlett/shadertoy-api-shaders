{
    "Shader": {
        "info": {
            "date": "1468514406",
            "description": "This one stores the height field and the general ground colour and shadows in buffers. Buffer B and C make sure it wraps OK. Buffer D also holds the 3D camera spline positions. Rendered with DOF.",
            "flags": 32,
            "hasliked": 0,
            "id": "ltd3RN",
            "likes": 51,
            "name": "[SH16B] Flight",
            "published": 3,
            "tags": [
                "flight",
                "sh16b"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 8823
        },
        "renderpass": [
            {
                "code": "// [SH16B] Flight - By David Hoskins for July comp week two 2016.\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// *NB -  If you resize the window or go full screen, you must left-click it to reset the buffers.\n\n//#define SHOW_MAP \n\nvec3 sunLight  = normalize( vec3(  -0.35, 0.2,  0.3 ) );\nconst vec3 sunColour = vec3(1.0, .95, .85);\nvec2 coord;\nfloat specular = .2;\n\n\n//--------------------------------------------------------------------------\n\n#define SCALE  .00005\n#define HEIGHT 1400.0\nfloat pixelY;\n\nvec2 fracSkip(vec2 p)\n{\n    p = fract(p);\n    if (p.y < pixelY) p.y = pixelY;\n    return p;\n}\n    \nfloat terrain( in vec2 p)\n{\n\tp *= SCALE;\n\n\treturn textureLod( iChannel0, fracSkip(p), 0.0).w*HEIGHT;\n}\n\n//--------------------------------------------------------------------------\nvec3 terColour( in vec2 p)\n{\n\tp *= SCALE;\n\n\tvec3 n = textureLod( iChannel0, fracSkip(p), 0.0).xyz;\n    return n;\n}\n\n//--------------------------------------------------------------------------\nfloat terrainD( in vec2 p, float r)\n{\n\tp *= SCALE;\n    r = r * r*.01;\n    \n\tfloat n = textureLod( iChannel0, fracSkip(p), 0.0).w;\n    if (n > 0.0)\n    {\n    \tn += smoothstep(.0, 1.,textureLod( iChannel1, fract(p*20.0), r).x)*.01;\n        n += smoothstep(.0, 1.,textureLod( iChannel2, fract(p*2.0), r).x)*.1;\n    }\n    else\n    {\n    \tn -= textureLod( iChannel2, fract(p*13.0)+iTime*.05, r*.25).x*.002-\n             textureLod( iChannel1, fract(p*30.0)-+iTime*.05, r*.25).x*.001;\n    }\n    return n * HEIGHT;\n}\n\n//--------------------------------------------------------------------------\nfloat Map(in vec3 p)\n{\n\tfloat h = terrain(p.xz); \n    return p.y - h;\n}\n\n//--------------------------------------------------------------------------\nvec3 getSky(in vec3 rd, bool obs)\n{\n\tfloat sunAmount = max( dot( rd, sunLight), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),4.);\n\tvec3  sky = mix(vec3(.07, 0.14,.2), vec3(.4, .4, .4), v);\n\tsky = sky + sunColour * sunAmount * sunAmount * .15;\n\tif (!obs)sky = sky + sunColour * min(pow(sunAmount, 500.0), .6);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\n//--------------------------------------------------------------------------\nfloat sphereRadius(float t)\n{\n\tt = abs(t);\n\tt *= 0.001;\n\treturn clamp(t*t, 1000.0/iResolution.y, 3000.0);\n}\n\n//--------------------------------------------------------------------------\nvec3 getNormal(vec3 p, float sphereR)\n{\n\tvec2 j = vec2(sphereR, 0.0);\n\tvec3 nor  \t= vec3(0.0,\t\tterrainD(p.xz, sphereR), 0.0);\n\tvec3 v2\t\t= nor-vec3(j.x,\tterrainD(p.xz+j, sphereR), 0.0);\n\tvec3 v3\t\t= nor-vec3(0.0,\tterrainD(p.xz-j.yx, sphereR), -j.x);\n\tnor = cross(v2, v3);\n\treturn normalize(nor);\n}\n\n//--------------------------------------------------------------------------\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel3, (uv+ 0.5)/256.0, 0.0).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n//--------------------------------------------------------------------------\nfloat FBM( vec3 p )\n{\n    p.y *= 3.;\n    float f;\n\tf  = 0.5000\t * noise(p); p = p * 2.6; //p.y -= gTime*.2;\n\tf += 0.2500\t * noise(p); p = p * 2.5; //p.y += gTime*.06;\n\tf += 0.1250\t * noise(p); p = p * 2.4;\n    f += 0.0625\t * noise(p); p = p * 2.7;\n    f += 0.03125 * noise(p);\n    return f;\n}\n//--------------------------------------------------------------------------\nfloat mapClouds(vec3 p)\n{\n    float h = FBM(p*.0001);\n\treturn clamp(h-.64, 0.0, 1.0) * smoothstep(40000.0, 2500.0,p.y) * smoothstep(250.0, 2500.0,p.y);\n}\n//--------------------------------------------------------------------------\nfloat FBM(in vec2 xy)\n{\n\tfloat w = .5;\n\tfloat f = 0.0;\n    xy*= vec2(.0003,.0002) ;\n\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += textureLod(iChannel3, xy, 0.0).z * w;\n\t\tw = w*0.5;\n\t\txy = 2.3 * xy;\n\t}\n\treturn pow(max(f-.35, 0.0), 2.0)*3.;\n}\nvec3 getCirrusClouds(in vec3 camPos, in vec3 sky, in vec3 rd)\n{\n    rd.y = max(rd.y,0.0);\n\t// Uses the ray's y component for horizon fade of fixed colour clouds...\n\tfloat v = (40000.0-camPos.y)/rd.y;\n\trd.xz = (rd.xz * v + camPos.xz+vec2(300.0,-3830.0)) * 0.002;\n\tfloat f = (FBM(rd.xz));\n\tvec3 cloud = mix(sunColour, vec3(1.), min(f*2.2, 1.0));\n\tsky = mix(sky, cloud, clamp(f*rd.y*rd.y, 0.0, .4));\n\treturn sky;\n}\nvec4 scene(in float rand, in vec3 rO, in vec3 rD, out vec3 colour, out float dis, out vec2 cloud)\n{\n\tfloat t = Map(rO)*.5*rand;\n    dis = 0.0;\n\tfloat alpha;\n    colour = vec3(0);\n\tvec4 normal = vec4(0.0);\n\tvec3 p = vec3(0.0);\n     vec2 shade = cloud = vec2(0.0, 0.0);\n\tfor( int j=0; j < 200; j++ )\n\t{\n\t\tif (normal.w > 1.) break;\n\t\tp = rO + t*rD;\n\t\tfloat sphereR = sphereRadius(t);\n\t\tfloat h = Map(p);\n        \n\t\tif( h <= sphereR)\n\t\t{\n\t\t\t// Accumulate...\n\t\t\tvec3 nor = getNormal(p, sphereR);\n\t\t\talpha = (1.0 - normal.w) * ((sphereR-h) / sphereR);\n\t\t\tnormal += vec4(nor * alpha, alpha);\n            colour += terColour(p.xz)*alpha;\n            if (dis == 0.0)dis = t;\n\t\t}\n\t\tt +=  h*.4 + t * .003;\n\t}\n    \n\tnormal.xyz = normalize(normal.xyz);\n\t// Scale the alpha up to 1.0...\n\tnormal.w = clamp(normal.w, 0.0, 1.0);\n    \n    if (p.y <= sphereRadius(t)) specular += .5;\n    \n    float t2 =.0;\n    for(int j=0; j < 120; j++)\n\t{\n        if (t2 > t ||cloud.y >= 1.0) break;\n        p = rO + t2*rD;\n   \t\tshade.y = mapClouds(p)*.2;\n\t\tshade.x = mapClouds(p) - mapClouds(p+sunLight*300.);\n        cloud += shade * (1. - cloud.y);\n        t2 += 220.0 + t2*.004;\n    }\n    cloud.x += .5;\n    cloud *= .85;\n    \n\treturn normal;\n}\n\n//--------------------------------------------------------------------------\nvec3 post(vec3 rgb, vec2 xy)\n{\n\t// Gamma first...\n\trgb = pow(rgb, vec3(0.45));\n\n\t// Then...\n\t#define CONTRAST 1.9\n\t#define SATURATION 1.8\n\t#define BRIGHTNESS 1.04\n\trgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb*BRIGHTNESS)), rgb*BRIGHTNESS, SATURATION), CONTRAST);\n\t// Noise...\n\t// rgb = clamp(rgb+Hash(xy*iTime)*.1, 0.0, 1.0);\n\t// Vignette...\n\trgb *= .5+0.5*pow(20.0*xy.x*xy.y*(1.0-xy.x)*(1.0-xy.y), 0.2 );\t\n\n\treturn rgb;\n}\n\n//--------------------------------------------------------------------------\nvec3 doLighting(in vec3 mat, in vec3 normal, in vec3 eyeDir)\n{\n\tfloat h = dot(sunLight,normal);\n\tmat = mat * sunColour*(max(h, 0.0));\n    mat += vec3(.05, .07,.07) * max(normal.y*.5, 0.0);\n\n    vec3 ref = reflect(eyeDir, normal);\n    mat += specular * pow(max(dot(ref, sunLight),0.0), 10.0)*.7;\n\treturn mat;\n}\n\n//--------------------------------------------------------------------------\n\nvec3 spline(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t){\n\n    return ((-p0 + p1*3. - p2*3. + p3)*t*t*t +\n            (p0*2. - p1*5. + p2*4. - p3)*t*t +\n            (-p0 + p2)*t + p1*2.)*.5;\n}\n\n//--------------------------------------------------------------------------\nvec3 getCamTex(float t)\n{\n    t = mod(t, iChannelResolution[0].x);\n    vec3 r = texelFetch(iChannel0, ivec2(t, 0), 0).xyz;\n    r *= 1000.0;\n\treturn r;\n}\n\n//--------------------------------------------------------------------------\nvec3 getCameraPos(float ti)  \n{\n    float t = floor(ti);\n    float f = fract(ti);\n\tvec3 cam = spline(getCamTex(t), getCamTex(t+1.0), getCamTex(t+2.0), getCamTex(t+3.0), f);\n    \n    return cam;\n}\n\n//--------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time =iTime-55.;\n    float speed  = cos(time*.1)*4.;\n\tfloat gTime = (iTime*.5)+speed;\n    speed = (min(cos(time*.1+.2), 0.0)-speed) * .3;\n    vec2 xy = fragCoord.xy / iResolution.xy;\n\n\t// Show map for testing...\n    #ifdef SHOW_MAP\n    fragColor = fract(texture(iChannel0, xy));return;\n    #endif\n\n\tvec2 uv = (-1.0 + 2.0 * xy) * vec2(iResolution.x/iResolution.y,1.0);\n    coord = fragCoord / iChannelResolution[0].xy;\n \n\tvec3 cameraPos = getCameraPos(gTime);\n    vec3 camTarget = getCameraPos(gTime+.02);\n    float t = mod(iTime+12., 40.0);\n    float f = (smoothstep(.0, 3., t) * smoothstep(10.0, 7., t))*100.;\n    camTarget.y -= f;\n    f = (smoothstep(25.0, 30., t) * smoothstep(35.0, 30., t))*2300.;\n    camTarget.z += f;\n\n    \n\tfloat roll = .4*sin(gTime*.3);\n\tvec3 cw = normalize(camTarget-cameraPos);\n\tvec3 cp = vec3(sin(roll), cos(roll),0.0);\n\tvec3 cu = cross(cw,cp);\n\tvec3 cv = cross(cu,cw);\n    vec3 dir = normalize(uv.x*cu + uv.y*cv + (1.5-speed+-dot(xy-.5, xy-.5))*cw);\n\tmat3 camMat = mat3(cu, cv, cw);\n    pixelY = 1.5/iChannelResolution[0].y;\n\n\tvec3 col;\n\tfloat dist;\n\tvec4 normal;\n    vec2 clouds;\n    bool obscureSun = true;\n\tnormal = scene(textureLod(iChannel3,(xy*iTime), 0.0).x,cameraPos, dir, col, dist, clouds);\n\tcol = doLighting(col, normal.xyz, dir);\n    \n    \n\tt = dot(dir, sunLight);\n    if (normal.w < .3) obscureSun = false;\n    vec3 sky = getSky(dir, obscureSun);\n    col = mix(sky, col, exp(-dist*.00003));\n\tcol = mix(sky, col, normal.w);\n    \n    if (normal.w < .2)col = getCirrusClouds(cameraPos, col, dir);\n\n   \tfloat bri = max(dot(cw, sunLight)*.7, 0.);\n    \n    col = mix(col, vec3(clouds.x)*sunColour+bri*.4, clouds.y);\n\n\tif (bri > 0.0)\n\t{\n\t\tvec2 sunPos = vec2( dot( sunLight, cu ), dot( sunLight, cv ) );\n\t\tvec2 uvT = uv-sunPos*.5;\n\t\tuvT = uvT*(length(uvT));\n\t\tbri = pow(bri, 6.0)*.4;\n\n\t\tfloat glare1 = max(dot(normalize(vec3(dir.x, dir.y+.3, dir.z)),sunLight),0.0)*1.4;\n\t\tfloat glare2 = max(1.0-length(uvT*2.5+sunPos*2. )*.6, 0.0);\n\t\tuvT = mix (uvT, uv, -4.3);\n\t\tfloat glare3 = max(1.0-length(uvT*.5+sunPos*3.0)*.8, 0.0);\n\n\t\tcol += bri * vec3(1., 0.5, .2)  * pow(glare1, 12.5)*.1;\n\t\tcol += bri * vec3(1.0, .2, 0.) * pow(glare2, 6.8)*20.;\n\t\tcol += bri * sunColour * pow(glare3, 4.0)*15.0;\n\t}\n\tcol = post(col, xy);\t\n\t\n\t\n\tfragColor=vec4(col,1.0) * smoothstep(0.0, 3., iTime);\n}\n\n//--------------------------------------------------------------------------",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define HASHSCALE1 .1031\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nconst mat2 rotate2D = mat2(1.5623, 1.7531, -1.8131, 1.8623);\nconst vec2 add = vec2(1.0, 0.0);\n\nfloat noise(vec2 xz)\n{\n\tvec2 f = fract(xz);\n\txz = floor(xz);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn\tmix(mix(hash12(xz), hash12(xz + add.xy), u.x),\n\tmix(hash12(xz + vec2(0.0, 1.0)), hash12(xz + add.xx), u.x), u.y);\n}\n// Thanks again to iq for this derivative noise stuff..\nvec3 noiseD( in vec2 x )\n{\n\tx+=4.2;\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    vec2 u = f*f*(1.5-f)*2.0;;\n    \n    float a = hash12(p);\n    float b = hash12(p + add.xy);\n    float c = hash12(p + add.yx);\n    float d = hash12(p + add.xx);\n\treturn vec3(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,\n\t\t\t\t6.0*f*(f-1.0)*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));\n}\nfloat FBM(vec2 p)\n{\n    p*= 1.5;\n    float a = 6.;\n    float o = -.1;\n    vec2 d = vec2(0);\n\n    for (int i = 0; i < 8; i++)\n    {\n        \n        vec3 nD = noiseD(p);\n\n        d += nD.yz;\n        float v = nD.x/(1.+dot(d,d));\n            \n        v = pow(1.0-abs(v-.5)*2., 1.5);\n        o += v * a;\n        \n       \tv = noise(p*.1);\n        o-= v*a*.3;\n        \n        a *= -.43;\n        p = rotate2D*p;\n        \n    }\n    return o;\n}\n//=============================================================\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    if (iFrame > 120 && iMouse.w <.4) discard;\n    vec2 xy = fragCoord.xy / iResolution.xy;\n\tvec3 col;\n\tfloat f = FBM(xy-4300.);\n\n\n    fragColour = vec4(0.0, 0.0, 0.0, f);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// .0 - .5\n#define MERGE_START .1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  if (iFrame > 120 && iMouse.w <.4) discard;\n\tvec2 xy = fragCoord.xy / iResolution.xy;\n    \n\tfragColor = mix(texture(iChannel0, xy),\n                    texture(iChannel0, vec2(1.-xy.x, xy.y)),\n                  \tsmoothstep(MERGE_START, .5, abs(xy.x-.5))*.5);        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// .0 - .5\n#define MERGE_START .1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     if (iFrame > 120 && iMouse.w <.4) discard;\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    \n    fragColor = mix(texture(iChannel0, xy),\n                    texture(iChannel0, vec2(xy.x,1.-xy.y)),\n                    smoothstep(MERGE_START, .5, abs(xy.y-.5))*.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Colour the landscape...\n\n#define HASHSCALE1 .1031\nvec3 sunLight  = normalize( vec3(  -0.1, .2,  0.3 ) );\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise(vec2 xz)\n{\n\tvec2 f = fract(xz);\n\txz = floor(xz);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn\tmix(mix(hash12(xz), hash12(xz + vec2(1.0, 0.0)), u.x),\n\tmix(hash12(xz + vec2(0.0, 1.0)), hash12(xz + vec2(1.0, 1.0)), u.x), u.y);\n}\n\n#define SCALE  .00005\n#define HEIGHT 1400.0\nfloat terrain( in vec2 p)\n{\n\tp *= SCALE;\n\treturn textureLod( iChannel0, fract(p) ,0.0).w*HEIGHT;\n}\nfloat softShadow(in vec3 ro, in vec3 rd )\n{\n    // real shadows\t\n    float res = 1.0;\n    float t = 0.001;\n\tfor( int i=0; i<80; i++ )\n\t{\n\t    vec3  p = ro + t*rd;\n        float h = p.y - textureLod( iChannel0, fract(p.xz), 0.0).w*.15;\n\t\tres = min( res, 20.*h/t );\n\t\tt += h;\n\t\tif( res<0.001) break;\n\t}\n\treturn clamp( res, 0.1, 1.0 );\n}\n\nvec3 getNormal(vec2 p)\n{\n\tvec3 j = vec3(1.0/iChannelResolution[0].xy, 0.0);\n\tvec3 nor  \t= vec3(0.0,\t\ttextureLod(iChannel0,fract(p), 0.0).w, 0.0);\n\tvec3 v2\t\t= nor-vec3(j.x,\ttextureLod(iChannel0,fract(p+j.xz), 0.0).w, 0.0);\n\tvec3 v3\t\t= nor-vec3(0.0,\ttextureLod(iChannel0,fract(p-j.zy), 0.0).w, -j.y);\n\tnor = cross(v2, v3);\n\treturn normalize(nor);\n}\n//--------------------------------------------------------------------------\nvec3 cameraPath( float t )\n{\n\n    vec3 p = vec3(-36000.0 * sin(5.4*3.141*t), 250.0, -36000.0 * cos(4.*3.141*t) );\n\n    \n\treturn p;\n} \n\nvoid mainImage( out vec4 col, in vec2 fragCoord )\n{\n    if (iFrame > 120 && iMouse.w <.4){\n        discard;\n        return;}\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec3 nor = getNormal(xy);\n    col = textureLod(iChannel0, xy, 0.);\n  \n    // Store the camera positions in the first line of texture.\n    // Not forgetting to skip over the tops of mountains...\n    if (fragCoord.y <= .5)\n    {\n        float t = fragCoord.x*.05;\n        col.xyz = cameraPath(t);\n    \n        //col.y *= 8.0;\n        \n        // Check if inside ground...\n        for (float i = -.1; i < .1; i+=.001)\n        {\n        \tvec3 test = cameraPath(t+i);\n            float y = terrain(test.xz)+250.0;\n            if (y > col.y) col.y = y;\n        }\n        col /= 1000.0;\n        return;\n    }else\n    {\n\t\tif (col.w <= 0.0)\n        {\n            col = vec4(0.0, .05 , .07, 0.0);\n        }else\n    \tif (col.w <= .07)\n\t    {\n            col = vec4(.2, .23, .3, 0.0);\n        }else\n\n        if (col.w < 0.15)\n        {\n\t\t\tcol.xyz = vec3(.6, .6, .5);\n        }else\n        {\n            vec3 lan = mix(texture( iChannel1, fract(xy*1.3), -100.0).xyz*.7,\n                           texture( iChannel2, fract(xy*1.7), -100.0).xyz,\n                           noise(xy*20.));\n            //lan = lan*lan*2.5;\n         \n            col.xyz = mix(lan, \n                          vec3(0.1, .4, 0.0),\n                          smoothstep(.1, .6, (smoothstep(.5, .4, col.w))*nor.y));\n\n            col.xyz = pow(col.xyz, vec3(1.7))*2.5;\n        }\n    }\n    col.xyz *= softShadow(vec3(xy.x, col.w*.15+0.015, xy.y),sunLight); \n\t\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}