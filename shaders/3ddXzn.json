{
    "Shader": {
        "info": {
            "date": "1571358518",
            "description": "The Crystal of Truth",
            "flags": 0,
            "hasliked": 0,
            "id": "3ddXzn",
            "likes": 10,
            "name": "Shadertober 15 - Legend",
            "published": 3,
            "tags": [
                "legend",
                "crystal",
                "inktober",
                "shadertober",
                "backwardscaptain"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 500
        },
        "renderpass": [
            {
                "code": "//set to 1 to rotate with mouse\n#define MOUSEMOVE 0\n\nfloat cb(vec3 p)\n{\n\tfloat a = oct(p/vec3(1.5,6,1.5), 1.7);\n    float b = box(p-vec3(0,10,0),vec3(5,10,5));\n    return max(a,-b);\n}\n\nfloat g;\nfloat res;\nvec2 map(vec3 p)\n{\n    vec3 cp = p-vec3(0,.5+cos(iTime/1.5)/3.5,0);\n    res = 0.1;\n    float m = 0.;\n    float o = oct(cp/vec3(1.5,1.5,1.5), 1.7);\n\tfloat a = cb(cp);\n    vec3 rp = cp;\n    rp.xz*=rot(3.1415927/4.);\n    float o2 = oct(rp/vec3(1.5,1.5,1.5),1.7);\n    float b = cb(rp);\n    a=smin(a,b,1.);\n    o = smin(o,o2,1.);\n    float flh = smoothstep(1.,-3.,length(p.xz)-1.);\n    float fl = p.y+10.+flh*10.;\n    float fl2 = p.y+13.;\n    float r = min(o,a);\n    g=0.01/(0.004*r*r);\n    r=min(r,fl);\n    r=min(r,fl2);\n    if(r==fl2)m=1.;\n    if(r==fl)m=2.;\n    if(m==0.){\n        // inspiration from https://www.shadertoy.com/view/MtX3Ws for the inner-crystal effects\n        vec3 c = cp;\n        for (int i = 0; i < 9; ++i) {\n            cp =.85*abs(cp)/dot(cp,cp)-.75;\n            cp.yz= vec2(cp.y*cp.y-cp.x*cp.x,cp.x*cp.y*2.);\n            cp=cp.xzy;\n            res += exp(-6. * abs(dot(cp,c)));\n\n        }\n    }\n    return vec2(r,m);\n}\n\n\n\nvec2 ray(vec3 ro, vec3 rd, out vec3 col)\n{\n    float t = 0., m=0.;\n    float dst = 0.01;\n    g=0.;\n    float c = 0.;\n    for(int i=0;i<128;i++)\n    {\n        vec3 p = ro+rd*t;\n        vec2 s = map(p);\n        m=s.y;\n        vec3 cp = p+vec3(0,3.+cos(iTime/3.)*2.5,0);\n        if(s.x<.1){\n            col+=vec3(.1)*(ro.y+1.)/(dot(cp,cp)-res*.5)/4.;\n            \n            t+=dst*exp(.5*res);\n            \n        }\n        t+=s.x/3.;\n    }\n    \n    \n    return vec2(t,m);\n}\n\n\nvoid mainImage( out vec4 c, in vec2 f )\n{\n    vec2 p = (2.*f-iResolution.xy)/iResolution.y;\n\tp.y-=.775;\n    vec3 col = vec3(0);\n    \n    float mx = iTime/3.;\n    if(MOUSEMOVE==1)mx=iMouse.x/100.;\n    float d = 10.;\n    vec3 ro = vec3(cos(mx)*d,1,sin(mx)*d);\n    vec3 ta = vec3(0.,2.,0.);\n    vec3 cf = normalize(ta-ro);\n    vec3 cu = normalize(cross(cf,vec3(0,1,0)));\n    vec3 cr = normalize(cross(cu,cf));\n    vec3 rd = vec3(p.x*cu+p.y*cr+1.*cf);\n\n    vec2 r = ray(ro,rd, col);\n    vec3 pos = ro+r.x*rd;\n\tcol*=vec3(0.8,0.2,1.)+vec3(cos(iTime)/2.+.7,.5,1.);\n    col =  .8*(log(1.+col));\n    col = clamp(col,0.,1.);\n    vec3 fi = vec3(1.5,1,0);\n    if(r.y==1.){col*=fi;\n    col*=g;\n               }\n    else if(r.y==0.)col*=res/2.+1.;\n        else{\n            col+=(g/200.*fi*(3.-p.y));}\n    col+=res/20.;\n    c.rgb =col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_DIST 30.\n\nmat2 rot(float x)\n{\n    float s = sin(x);\n    float c = cos(x);\n    return mat2(c,-s,s,c);\n}\n\n//thanks to iq\nfloat oct(vec3 p, float s)\n{\n    p=abs(p);\n    return(p.x+p.y+p.z-s)*.57735027;\n}\n\nfloat box(vec3 p, vec3 b)\n{\n    vec3 s = abs(p)-b;\n    return min(max(s.x,max(s.y,s.z)),0.0)+length(max(s,0.0));\n}\n\nfloat smin(float d1, float d2, float k)\n{\n    float h = clamp(0.5+0.5*(d2-d1)/k,0.0,1.0);\n    return mix(d2,d1,h)-k*h*(1.0-h);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}