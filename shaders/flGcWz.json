{
    "Shader": {
        "info": {
            "date": "1661212171",
            "description": "Better Function SDF than https://www.shadertoy.com/view/7lSyDV\nUsing derivatives instead of iteration, I don't know how I didn't think of this first.",
            "flags": 0,
            "hasliked": 0,
            "id": "flGcWz",
            "likes": 6,
            "name": "Better Function SDF",
            "published": 3,
            "tags": [
                "sdf",
                "derivative",
                "function"
            ],
            "usePreview": 0,
            "username": "Spi3lot",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "const float thickness = 0.1;  // 0.1\n\n\nfloat f(float x)\n{\n    return sin(x * 2.0) + sin(1.1 * (x + 3.14159 * 0.5));\n}\n\nfloat dfdx(float x)\n{\n    return 1000.0 * (f(x + 0.001) - f(x));\n}\n\nfloat sdf(vec2 co)\n{\n    float y = f(co.x);\n    float yPrime = dfdx(co.x);\n    return abs(y - co.y) - max(abs(yPrime), 1.0) * thickness;\n    //return abs(y - co.y) - (abs(yPrime) + 1.0) * thickness;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    uv *= vec2(iTime, 3.0);\n    \n    float v = sdf(uv);\n    float c = smoothstep(1.5, 0.0, v / fwidth(v));\n    fragColor = vec4(c);\n\n    // Squishing and tearing only happens because only uv.x is multiplied by iTime\n    //fragColor = vec4(sdf(uv));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}