{
    "Shader": {
        "info": {
            "date": "1641351109",
            "description": "first try paint with the buffer & trying to import from glslsandbox  > https://glslsandbox.com/e#78298.7",
            "flags": 32,
            "hasliked": 0,
            "id": "7lGXDV",
            "likes": 6,
            "name": "BUFFER_PAINTER",
            "published": 3,
            "tags": [
                "paint",
                "buffer"
            ],
            "usePreview": 0,
            "username": "SimonOakey",
            "viewed": 422
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     \n    \n   // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec2 rot(vec2 _uv, float _a){\n\n\tfloat s = sin(_a);\n\tfloat c = cos(_a);\n\treturn _uv*mat2(c,-s,s,c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n     \n     vec2 uv = ( fragCoord.xy / iResolution.xy );\n      \n       \n    vec2 pos = fragCoord.xy/iResolution.xy;\n    \n    \n    // change wobble freqency over time\n\tfloat freq_one = sin(iTime*1.5 + uv.x*3.)*5.+6.;\n\tfloat freq_two = sin(iTime*.75 + uv.y*3.)*5.+15.;\n\t\n\t// wobble here\n\t uv.x += sin(uv.y*freq_one+ iTime*3.1) *.001;\n\t uv.y += sin(uv.x*freq_two+ iTime*4.1) *.001;\n    \n    uv.y += sin(iTime*.4)*.001;\n     uv.x += sin(iTime*.4)*.001;\n    \n        \n    vec2 rmp = iMouse.xy;\n     rmp.x /= iResolution.x;\n     rmp.y /= iResolution.y;\n\t//rmp.x *= iResolution.x/iResolution.y;\n\tfloat lmp = length(rmp-uv)/.4;\n\n\t// Distort away from mouse\n\tfloat mdStrength = 0.13 * pow((1.0 - length(rmp)), 3.0);\n\tfloat mdAngle = atan(iMouse.y, iMouse.x);\n\t  // uv.x += mdStrength * cos(mdAngle);\n\t // uv.y += mdStrength * sin(mdAngle);\n    \n    // --------------------------------------------\n\t\t\n\t// this is a forked piece of code to \"rectify\" the pixels a bit\n\tfloat jitter = 0.125;\n\tuv.x += (fract(sin(uv.x*345.3 + uv.y*423.3 + iTime*426.4) * 345.3)- 0.5) / iResolution.x * jitter;\n\tuv.y += (fract(sin(uv.x*234.8 + uv.y*264.8 + iTime*521.3) * 634.7)- 0.5) / iResolution.y * jitter;\n    \n    \n\tvec3 col = vec3(.5);\n\t \n\tfragColor = vec4(col.rgb ,1.0);\n\t\n\t\n     // still the crappier buffer read out, but it looks nice :)\n\tcol = texture(iChannel0,uv).xyz ;\n\t fragColor = vec4(col.rgb ,1.0);\n\t \n\t// change the brush over time\n\tfloat color_change_freq = ( sin(iTime*.1)*.9+1. )*2.1;\n\tfloat brush_color_freq = ( sin(iTime*.3)*.9+1. )*13. ;\n\t \n\t// oscillate thriough colors along the dist\n\t col.x  =  (sin(iTime* .32 * color_change_freq + lmp*brush_color_freq));\n\t col.y  =  (sin(iTime*.13 * color_change_freq + lmp*brush_color_freq));\n\t col.z  =  (sin(iTime*.62 * color_change_freq + lmp*brush_color_freq));\n\t\n\t// overpaint the buffer with some new input\n\t if (lmp < .4 ) {\n\t \t fragColor += vec4( col, 1. )*5. * (.4-lmp) ;\n\t }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}