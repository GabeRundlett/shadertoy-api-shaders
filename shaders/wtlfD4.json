{
    "Shader": {
        "info": {
            "date": "1596814550",
            "description": "source tutorial : https://www.youtube.com/watch?v=GgGBR4z8C9o\nsimple onet : https://play.google.com/store/apps/details?id=com.BigBUFF.OnetIconConnect\n\nI did It !",
            "flags": 0,
            "hasliked": 0,
            "id": "wtlfD4",
            "likes": 0,
            "name": "4. Rectangle Destortion",
            "published": 3,
            "tags": [
                "rectangledestortion"
            ],
            "usePreview": 0,
            "username": "altera0",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "\nfloat Circle( vec2 uv , vec2 pos , float radius , float blur ) {\n    \n    float d = length( uv - pos );\n    float c = smoothstep( radius , radius - blur , d );\n    return c;\n}\n\n// 웃기 함수\nfloat Smily( vec2 uv , vec2 pos , float radius ) {\n    \n    float blur = 0.01f;\n    \n    // face\n    float c= Circle( uv , pos , radius , blur );\n\t\n    // eye\n    float eyeLeft = Circle ( uv , pos + vec2(-0.15f, 0.2f) , 0.1f , 0.005f );\n    float eyeRight = Circle ( uv , pos + vec2(0.15f, 0.2f) , 0.1f , 0.005f );\n    \n    // mouse\n    float mouse = Circle ( uv , pos + vec2(0.0f, 0.0f) , radius * 0.8f , blur );\n    mouse -= Circle  ( uv , pos + vec2(0.0f, 0.05f) , radius * 0.8f , blur );\n    mouse = clamp( 0. , 1., mouse );\n    \n    // 합성.\n    c -= eyeLeft;\n    c -= eyeRight;\n    c -= mouse;\n\n    return c;\n}\n\n// 밴드\nfloat Band( float t , float start , float end ,  float blur ) {\n    float c;\n    c = smoothstep(  start - blur , start + blur , t ); \n\n    // 반드시 곱셈이어야 한다.\n    c *= smoothstep ( end + blur , end - blur , t );\t// 이거 중요함. 스텝함수의 사용법 볼것\n\t\n    return c;\n}\n\n\n// 사각형\nfloat Rectangle( vec2 uv , vec2 center , float width , float height, float blur ) {\n\n    float c;\n    c = Band(  uv.x , center.x - width / 2.0f  , center.x + width / 2.0f , blur );\n    // 반드시 곱셈이어야 한다.\n    c *= Band( uv.y , center.y - height / 2.0f , center.y + height / 2.0f , blur );    \n    return c;\n}\n\nfloat remap01( float a, float b , float valueBetweenAtoB ) {\n\treturn (valueBetweenAtoB - a ) / ( b - a );   \n}\n\nfloat remap( float a , float b , float c , float d , float valueBetweenAtoB ) {\n\treturn remap01( a , b , valueBetweenAtoB ) * ( d - c ) + c;   \n}\n\n// 메인\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    uv -= 0.5f;\n    uv.x *= iResolution.x / iResolution.y;\t\t// compensate\n    \n    float radius = 0.4f;\n    vec2 pos = vec2(0.4f , 0.0f);\n    \n    float c;\n    vec3 col;\n    float blur;\n    \n    uv *= 1.0f;\n\n    float x = uv.x;\n    float m = -( x - 0.5f ) * ( x + 0.5f );\n\tm = m * m * 4.0f;\n    \n    float y;\n    //float y = uv.y - m;\n    //y = uv.y * sin( m + x + iTime * 2.0f);\n    y = uv.y - 0.1f * sin ( x*8.0f + iTime );\n\n    \n    //c = Smily( uv , -pos + vec2(0.0, 0.2f) , 0.4f );\n    //c += Rectangle( uv + uv.y , pos, 0.4f , 0.4f );\n    \n    blur = mix( 0.0001f , 1.0f , 0.1f );\n    blur = remap( -0.75f / 2.0f , 0.75f/2.0f , 0.0001f, 0.25f , x );\n    c = Rectangle( vec2(x , y ) , vec2(0.0f , 0.0f ) , 0.75f ,0.5f, blur );\n    \n    \n    col = vec3( 1.0f, 1.0f , 0.0f ) * c ;\n    fragColor = vec4(vec3(col),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}