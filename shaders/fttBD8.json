{
    "Shader": {
        "info": {
            "date": "1663062851",
            "description": "sine qua none painting",
            "flags": 32,
            "hasliked": 0,
            "id": "fttBD8",
            "likes": 53,
            "name": "Sinusoidal Painting",
            "published": 3,
            "tags": [
                "curve",
                "paint",
                "brush",
                "graffiti"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 843
        },
        "renderpass": [
            {
                "code": "\n// Sinusoidal Painting\n// when you let sine paint\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0, 0, 0, 1);\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 data = texture(iChannel0, uv);\n    float mask = data.r;\n    \n    if (mask > .001)\n    {\n        // lighting\n        vec3 normal = texture(iChannel1, uv).rgb;\n        vec3 light = normalize(vec3(0,1,1));\n        float timestamp = data.b;\n        float shade = dot(normal, light)*.5+.5;\n        vec3 palette = .5+.5*cos(vec3(1,2,3)*5.+timestamp*3.);\n        color.rgb = palette * shade;\n        color += pow(shade,  50.);\n\n    }\n    else\n    {\n        // background\n        color.rgb = vec3(1) * smoothstep(2., -2., length(uv-.5));\n\n        // shadow\n        float sdf = data.g;\n        color *= smoothstep(-.3, .2,  sdf);\n    }\n    \n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// move brush\nvec2 move(float t)\n{\n    vec2 pos = vec2(0);\n    \n    // random targets\n    float jitter = .5;\n    float time = t*3.;\n    float index = floor(time);\n    float anim = fract(time);\n    vec2 rng = mix(hash21(index), hash21(index+1.), anim);\n    pos += (rng*2.-1.)*jitter;\n    \n    // translate to right\n    pos.x += .5;\n    \n    // twist it\n    float angle = t;\n    float radius = .1;\n    pos += vec2(cos(angle),sin(angle))*radius;\n    \n    // fbm gyroid noise\n    angle = fbm(vec3(pos,t))*6.28;\n    radius = .2;\n    pos += vec2(cos(angle),sin(angle))*radius;\n    return pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = fragCoord/R.xy;\n    vec2 p = 1.5*(fragCoord-R.xy/2.)/R.y;\n    \n    // scroll\n    uv.x += 1./R.x;\n    \n    // framebuffer\n    vec4 frame = texture(iChannel0, uv);\n    float mask = frame.r;\n    float sdf = frame.g;\n    \n    // interaction\n    if (iMouse.z > 0.)\n    {\n        vec2 mouse = iMouse.xy;\n        vec4 prev = texture(iChannel0, vec2(0));\n        vec3 dither = hash(uvec3(fragCoord, iFrame)); \n        mouse = prev.z > 0. ? mix(mouse, prev.xy, dither.x) : mouse;\n        mouse = 1.5*(mouse-R.xy/2.)/R.y;\n        float thin = .04+.03*sin(iTime*20.);\n        float dist = length(p-mouse);\n        float msk = smoothstep(thin,.0,dist);\n        if (msk > .001) frame.b = iTime;\n        sdf = sdf < .001 ? dist : min(sdf, dist);\n        mask += msk;\n    }\n    else\n    {\n        // accumulate noisy results\n        for (float frames = 20.; frames > 0.; --frames)\n        {\n            // cursor timeline with noise offset\n            float f = float(iFrame) + frames * 200.;\n            vec3 rng = hash(uvec3(fragCoord, f));\n            float cursor = rng.x*.03+iTime;\n\n            // brush\n            float thin = .04+.03*sin(cursor*20.);\n            float dist = length(p-move(cursor));\n            float msk = smoothstep(thin,.0,dist);\n\n            // timestamp\n            if (msk > .001) frame.b = iTime;\n\n            // distance\n            sdf = sdf < .001 ? dist : min(sdf, dist);\n\n            // accumulate\n            mask += msk;\n        }\n    }\n\n    // save data\n    frame.r = mask;\n    frame.g = sdf;\n    fragColor = frame;\n    \n    // avoid glitch after disabling fullscreen\n    if (fragCoord.x > R.x-1.) fragColor = vec4(0,0,0,1);\n    \n    if (fragCoord.x < 1. && fragCoord.y < 1.)\n    {\n        fragColor = iMouse;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define R iResolution\n#define T(uv) texture(iChannel0, uv).r\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\nfloat fbm (vec3 seed) {\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 3; ++i) {\n        result += gyroid(seed/a)*a;\n        a /= 3.;\n    }\n    return result;\n}\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n// Victor Shepardson + Inigo Quilez \n// https://www.shadertoy.com/view/XlXcW4\nconst uint k = 1103515245U;  // GLIB C\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    return vec3(x)*(1.0/float(0xffffffffU));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // compute normal\n    vec4 color = texture(iChannel0, uv);\n    vec3 unit = vec3(1./iResolution.xy, 0);\n    vec3 normal = normalize(vec3(\n                            T(uv+unit.xz)-T(uv-unit.xz),\n                            T(uv-unit.zy)-T(uv+unit.zy),\n                            color.r));\n                            \n    fragColor = vec4(normal, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}