{
    "Shader": {
        "info": {
            "date": "1611066012",
            "description": "hello",
            "flags": 0,
            "hasliked": 0,
            "id": "3lKcDD",
            "likes": 0,
            "name": "the_weird_rectange",
            "published": 3,
            "tags": [
                "pulse"
            ],
            "usePreview": 0,
            "username": "aliser",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "bool isWithinRange(vec2 coord, vec2 from, vec2 to) {\n    vec2 fromBased = coord - from;\n    bool isFromWithin = fromBased.x >= 0.0 && fromBased.y >= 0.0;\n    vec2 toBased = to - coord;\n    bool isToWithin = toBased.x >= 0.0 && toBased.y >= 0.0;\n    return isFromWithin && isToWithin;\n}\n\nbool isWithinRange(float value, float from, float to) {\n    return value >= from && value <= to;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tolerance = 1.0;\n    float timeModifier = 2.0;\n    float[2] distanceBetweenRange = float[2](tolerance * 8.0, tolerance * 16.0);\n    float[2] centerAmplitudeRange = float[2](10.0, 100.0);\n\n    float distanceBetweenRangeDifference = distanceBetweenRange[1] - distanceBetweenRange[0];\n    float timeCosNormalized = (cos(iTime * timeModifier * 2.0) + 1.0) / 2.0;\n    float stepSize = distanceBetweenRange[0] + timeCosNormalized * distanceBetweenRange[1];\n\n    vec2 center = vec2(0.5, 0.5) * iResolution.xy;\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    float screenMaxResolution = max(iResolution.x, iResolution.y);\n    float timeSinNormalized = (sin(iTime * timeModifier * 2.0) + 1.0) / 2.0;\n    \n    for(int i = 0; i < int(screenMaxResolution); i++) {\n        float iF = float(i);\n        float t = (iF / screenMaxResolution - 1.0);\n        float offset = iF * stepSize;\n        float targetDistance = centerAmplitudeRange[0] + timeSinNormalized * centerAmplitudeRange[1] + offset;\n        \n        float horizontalLowerBound[2] = float[2](\n            center.y - targetDistance - tolerance,\n            center.y - targetDistance + tolerance\n        );\n        float horizontalUpperBound[2] = float[2](\n            center.y + targetDistance - tolerance,\n            center.y + targetDistance + tolerance\n        );\n        \n        float verticalLeftBound[2] = float[2](\n            center.x - targetDistance - tolerance,\n            center.x - targetDistance + tolerance\n        );\n        float verticalRightBound[2] = float[2](\n            center.x + targetDistance - tolerance,\n            center.x + targetDistance + tolerance\n        );\n\n\n        bool isWithinUpperMiddlePart = isWithinRange(\n            fragCoord, \n            vec2(verticalLeftBound[1], horizontalUpperBound[0]), \n            vec2(verticalRightBound[0], horizontalUpperBound[1])\n        );\n        bool isWithinLowerMiddlePart = isWithinRange(\n            fragCoord, \n            vec2(verticalLeftBound[1], horizontalLowerBound[0]), \n            vec2(verticalRightBound[0], horizontalLowerBound[1])\n        );\n\n        bool isWithinLeftMiddlePart = isWithinRange(\n            fragCoord, \n            vec2(verticalLeftBound[0], horizontalLowerBound[1]), \n            vec2(verticalLeftBound[1], horizontalUpperBound[0])\n        );\n        bool isWithinRightMiddlePart = isWithinRange(\n            fragCoord, \n            vec2(verticalRightBound[0], horizontalLowerBound[1]), \n            vec2(verticalRightBound[1], horizontalUpperBound[0])\n        );\n\n        bool someMiddlePartDrawApplicable = isWithinUpperMiddlePart || \n                                            isWithinLowerMiddlePart ||\n                                            isWithinLeftMiddlePart ||\n                                            isWithinRightMiddlePart;\n        if(someMiddlePartDrawApplicable) {\n            // Normalized pixel coordinates (from 0 to 1)\n            vec2 uv = fragCoord/iResolution.xy;\n\n            // Time varying pixel color\n            col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n        }\n    }\n    \n    fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}