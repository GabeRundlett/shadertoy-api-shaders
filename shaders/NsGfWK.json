{
    "Shader": {
        "info": {
            "date": "1658840074",
            "description": "CC0: Simple duo scale truchet\nRead a bit about Wave Function Collapse algorithm to generate truchet like patterns \nStarted implementing it and was immedietly bored by it as I didn't write a shader.\nSo I wrote a shader instead.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsGfWK",
            "likes": 10,
            "name": "Simple duo scale truchet",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 1,
            "username": "mrange",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "// CC0: Simple duo scale truchet\n// Read a bit about Wave Function Collapse algorithm to generate truchet like patterns \n// Started implementing it and was immedietly bored by it as I didn't write a shader.\n// So instead I revisited the idea of multiscale truchet patterns.\n// Created a quick little duo scale truchet.\n// Much more fun\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat df0(vec2 p, float linew) {\n  vec2 cp = p - 0.5;\n  vec2 cn = round(cp);\n  cp -= cn;\n\n  float h0 = hash(cn);\n  cp = h0 > 0.5 ? cp : vec2(cp.y, -cp.x);\n  float d0 = length(cp-0.5)-0.5;\n  float d1 = length(cp+0.5)-0.5;\n  \n  float d = d0;\n  d = min(d, d1);\n  \n  d = abs(d) - linew*3.0;\n  return d;\n}\n\nfloat df1(vec2 p, float linew) {\n  vec2 cp = p - 0.5;\n  vec2 cn = round(cp);\n  cp -= cn;\n\n  float h0 = hash(cn);\n  float h1 = hash(cn+123.4);\n  \n  if (h1 > 0.66) {\n    return df0(p*3.0, linew)/3.0;\n  }\n  \n  vec2 cp2 = cp;\n  cp2 = abs(cp2);\n  cp = h0 > 0.5 ? cp : vec2(cp.y, -cp.x);\n  float d0 = length(cp-0.5)-0.5;\n  float d1 = length(cp+0.5)-0.5;\n  float d2 = length(cp2-0.5)-1.0/6.0;\n  \n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - linew;\n  d = min(d, abs(d2)-linew);\n  \n  return d;\n}\n\nfloat df(vec2 p, float f) {\n  float linew = mix(0.0, 0.05, f);\n  return df1(p, linew);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n  const float z = 0.25;\n  vec2 dp = p;\n  const float spd = 0.5;\n  const float r = 10.0;\n  dp += r*sin(vec2(sqrt(0.5), 1.0)*TIME*spd/r);\n  dp /= z;\n  float f = mix(0.01, 0.05, texture(iChannel0, 0.00125*dp).x);\n  f *= 30.0;\n  f = tanh(f);\n  float d = df(dp, f)*z;\n  vec3 col = vec3(0.01);\n  col = mix(col, vec3(0.5*f), smoothstep(aa, -aa, d));\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}