{
    "Shader": {
        "info": {
            "date": "1498498933",
            "description": "many metaballs moving in a pattern, experimenting with shading.",
            "flags": 0,
            "hasliked": 0,
            "id": "XslBWX",
            "likes": 10,
            "name": "metaballs phong",
            "published": 3,
            "tags": [
                "raymarching",
                "metaball"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 869
        },
        "renderpass": [
            {
                "code": "#define time iTime\n\nfloat dot2(vec3 p) {\n    return dot(p,p);\n}\n\nfloat map(vec3 p) {\n    float len = 0.0;\n    \n    for(float i = 1.0; i < 20.0; i++) {\n        vec3 sphere = vec3(sin(time*i*0.1),cos(time*i*0.12),0.0)*10.0;\n        len += 1.0/dot2(p-sphere);\n    }\n    \n    return (inversesqrt(len)-1.0)*3.0;\n}\n\nvec3 findcolor(vec3 p) {\n    float len = 10000.0;\n    vec3 color = vec3(0.0);\n    for(float i = 1.0; i < 20.0; i++) {\n        float len2 = (dot2(p-vec3(sin(time*i*0.1),cos(time*i*0.12),0.0)*10.0));\n        \n        //random colors\n        color = mix(vec3(sin(i*9.11)*0.5+0.5,fract(1.0/fract(i*3.14)),fract(i*3.14)),\n                    color, clamp((len2-len)*0.1+0.5,0.0,1.0));\n        \n        len = mix(len2,len,clamp((len2-len)*0.1+0.5,0.0,1.0));\n    }\n    return color;\n}\n\nvec3 findnormal(vec3 p) {\n    vec2 eps = vec2(0.01,0.0);\n    \n    return normalize(vec3(\n        map(p+eps.xyy)-map(p-eps.xyy),\n        map(p+eps.yxy)-map(p-eps.yxy),\n        map(p+eps.yyx)-map(p-eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n\tvec2 uv = (fragCoord.xy*2.0-iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0.0,0.0,-15.0);\n    vec3 rd = normalize(vec3(uv,1));\n    float len = 0.0;\n    float dist = 0.0;\n    \n    for (int i = 0; i < 50; i++) {\n        len = map(ro);\n        dist += len;\n        ro += rd * len;\n        if (dist > 30.0 || len < 0.01) {\n            break;\n        }\n    }\n    \n    if (dist < 30.0 && len < 0.01) {\n        vec3 sun = normalize(vec3(-1.0));\n        vec3 objnorm = findnormal(ro);\n        vec3 reflectnorm = reflect(rd,objnorm);\n        vec3 color = findcolor(ro);\n        fragColor = vec4(color*max(0.2,0.8*dot(objnorm,sun)),1.0);\n        fragColor = max(fragColor,(dot(reflectnorm,sun)-0.9)*12.0);\n    }\n    fragColor = sqrt(fragColor);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}