{
    "Shader": {
        "info": {
            "date": "1605977653",
            "description": "this shader is a simulation between two chemicals\nyou can add element with the mouse\n\nhave fun ;)",
            "flags": 32,
            "hasliked": 0,
            "id": "3dcBD2",
            "likes": 4,
            "name": "Reaction-Diffusion algorithm",
            "published": 3,
            "tags": [
                "simulation",
                "chaos"
            ],
            "usePreview": 0,
            "username": "mdb",
            "viewed": 510
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 v = vec3(1.,0.2,0.4);\n    float B = pow(texture(iChannel0,uv).y,2.);\n    vec4 col = vec4(B * v * 8.0,1.0);\n    \n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//reaction diffusion algorithm \n//https://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    if(iFrame==0){\n        col = vec3(1.0,0.0,0.0);\n    }else{\n        vec2 r = 1.0/iResolution.xy;\n        vec2 laplacian = -texture(iChannel0,uv).xy\n            \t\t     +0.2*texture(iChannel0,uv + vec2(1.0,0.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(-1.0,0.0)*r).xy\n                         +0.2*texture(iChannel0,uv + vec2(0.0,1.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(0.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(1.0,1.0)*r).xy\n            \t         +0.05*texture(iChannel0,uv + vec2(1.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,-1.0)*r).xy;\n\n        vec2 last = texture(iChannel0,uv).xy;\n        float A = last.x;float B = last.y;\n        //make the elements react\n        A = A + (Da*laplacian.x - A*B*B + f*(1.0 - A))*t;\n        B = B + (Db*laplacian.y + A*B*B - (k + f)*B)*t;\n        \n        col = vec3(A, B, 0.0);\n    }\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//reaction diffusion algorithm \n//https://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    if(iFrame==0){\n        col = vec3(1.0,0.0,0.0);\n    }else{\n        vec2 r = 1.0/iResolution.xy;\n        vec2 laplacian = -texture(iChannel0,uv).xy\n            \t\t     +0.2*texture(iChannel0,uv + vec2(1.0,0.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(-1.0,0.0)*r).xy\n                         +0.2*texture(iChannel0,uv + vec2(0.0,1.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(0.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(1.0,1.0)*r).xy\n            \t         +0.05*texture(iChannel0,uv + vec2(1.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,-1.0)*r).xy;\n\n        vec2 last = texture(iChannel0,uv).xy;\n        float A = last.x;float B = last.y;\n        //make the elements react\n        A = A + (Da*laplacian.x - A*B*B + f*(1.0 - A))*t;\n        B = B + (Db*laplacian.y + A*B*B - (k + f)*B)*t;\n        \n        col = vec3(A, B, 0.0);\n    }\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//reaction diffusion algorithm \n//https://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    if(iFrame==0){\n        col = vec3(1.0,0.0,0.0);\n    }else{\n        vec2 r = 1.0/iResolution.xy;\n        vec2 laplacian = -texture(iChannel0,uv).xy\n            \t\t     +0.2*texture(iChannel0,uv + vec2(1.0,0.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(-1.0,0.0)*r).xy\n                         +0.2*texture(iChannel0,uv + vec2(0.0,1.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(0.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(1.0,1.0)*r).xy\n            \t         +0.05*texture(iChannel0,uv + vec2(1.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,-1.0)*r).xy;\n\n        vec2 last = texture(iChannel0,uv).xy;\n        float A = last.x;float B = last.y;\n        //make the elements react\n        A = A + (Da*laplacian.x - A*B*B + f*(1.0 - A))*t;\n        B = B + (Db*laplacian.y + A*B*B - (k + f)*B)*t;\n        \n        col = vec3(A, B, 0.0);\n    }\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//reaction diffusion algorithm \n//https://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    if(iFrame==0){\n        col = vec3(1.0,0.0,0.0);\n        //random element at the start\n        for(int i = 0; i<100; i++){\n            float x = fract(sin(float(i)*34.98)*456.23);\n            float y = fract(sin(float(i)*98.24)*9223.57);\n            if(distance(uv,vec2(x,y))<0.03)col.y = 1.;\n\n        }\n    }else{\n        vec2 r = 1.0/iResolution.xy;\n        vec2 laplacian = -texture(iChannel0,uv).xy\n            \t\t     +0.2*texture(iChannel0,uv + vec2(1.0,0.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(-1.0,0.0)*r).xy\n                         +0.2*texture(iChannel0,uv + vec2(0.0,1.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(0.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(1.0,1.0)*r).xy\n            \t         +0.05*texture(iChannel0,uv + vec2(1.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,-1.0)*r).xy;\n\n        vec2 last = texture(iChannel0,uv).xy;\n        float A = last.x;float B = last.y;\n        //make the elements react\n        A = A + (Da*laplacian.x - A*B*B + f*(1.0 - A))*t;\n        B = B + (Db*laplacian.y + A*B*B - (k + f)*B)*t;\n        \n        col = vec3(A, B, 0.0);\n    }\n    if(distance(uv,iMouse.xy/iResolution.xy)<0.02 && iMouse.z>0.)col.y = 1.;\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//reaction diffusion algorithm \n//https://www.karlsims.com/rd.html\n\n//settings\nfloat Da = 1.0;\nfloat Db = 0.5;\nfloat f = 0.055;\nfloat k = 0.062;\nfloat t = 0.8;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}