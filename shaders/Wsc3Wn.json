{
    "Shader": {
        "info": {
            "date": "1578507508",
            "description": "a thing i made a while ago that im making public",
            "flags": 0,
            "hasliked": 0,
            "id": "Wsc3Wn",
            "likes": 9,
            "name": "additive fractal",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "unnick",
            "viewed": 354
        },
        "renderpass": [
            {
                "code": "/* it basically works by making scaled copies of a repeating pattern,\n * summing those copies together, and then using a pallete to turn the sum\n * into a color.\n */\n\n#define SIZE 5.\n#define STRIDE 5\nconst float pattern[] = float[](\n    2.,1. , 0.,1. , 2.,\n    1.,1.5, 1.,1.5, 1.,\n    0.,1. ,-2.,1. , 0.,\n    1.,1.5, 1.,1.5, 1.,\n    2.,1. , 0.,1. , 2.\n);\n\n/*\n#define SIZE 3.\n#define STRIDE 3\nconst float pattern[] = float[](\n    -1., 0.,-1.,\n     0., 1., 0.,\n    -1., 0.,-1.\n);\n*/\n\nmat2 rotmat(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = exp(sin(iTime * 1.5) * .7);\n    \n    vec2 pos = (fragCoord*2. - iResolution.xy) / iResolution.y;\n    pos *= rotmat(iTime * .5);\n    pos *= zoom;\n    pos += vec2(1., 1.5) * iTime;\n    {\n        float tmp = pow(3., SIZE);\n        pos /= tmp; zoom /= tmp;\n    }\n    \n    float detail = (log(iResolution.y / zoom)) / log(SIZE) - 1.3;\n    \n    float sum = detail * -1.;\n    for(int i = 0; i < 16; i++) {\n        pos = fract(pos);\n        pos *= SIZE;\n        if(i >= int(detail)) break;\n        sum += pattern[int(pos.x) + int(pos.y) * STRIDE];\n    };\n    sum += pattern[int(pos.x) + int(pos.y) * STRIDE] * fract(detail);\n    \n    fragColor = sin(sum + vec3(0.,.5,1.) + iTime * 3.).xyzz * .5 + .5;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}