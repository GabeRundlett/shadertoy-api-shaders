{
    "Shader": {
        "info": {
            "date": "1635209768",
            "description": "trippin",
            "flags": 32,
            "hasliked": 0,
            "id": "7syXDy",
            "likes": 51,
            "name": "Taste of Noise 11",
            "published": 3,
            "tags": [
                "weird"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 1278
        },
        "renderpass": [
            {
                "code": "// taste of noise 11 by leon denise 2021/10/26\n// thanks to Inigo Quilez, David Hoskins, NuSan, Fabrice Neyret and many others\n// licensed under hippie love conspiracy\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, gl_FragCoord.xy/iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n// Inigo Quilez\n// https://iquilezles.org/articles/distfunctions\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n// rotation matrix\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// taste of noise 11 by leon denise 2021/10/26\n// thanks to Inigo Quilez, David Hoskins, NuSan, Fabrice Neyret and many others\n// licensed under hippie love conspiracy\n\n// global variable\nvec3 rng;\n\n// geometry\nfloat map (vec3 p)\n{\n    float t = iTime * 0.05;\n    \n    // parameters\n    vec3 angle = vec3(1,2,3)+rng.x*.1+sin(length(p))+p*.1-t;\n    float size = 0.01*sin(rng.x*3.14)*rng.y;\n    float range = .6;\n    \n    // geometric iteration\n    const float count = 12.0;\n    float a = 1.0;\n    float scene = 1000.;\n    for (float index = 0.0; index < count; ++index)\n    {        \n        // rotate\n        p.yx *= rot(angle.z/a);\n        p.xz *= rot(angle.y/a);\n        p.yz *= rot(angle.x/a);\n        \n        // fold\n        vec3 ppp = p;\n        p.x = abs(p.x)-range*a;\n        \n        // add sdf object\n        scene = smin(scene, length(p)-size, 0.5*a);\n        \n        // falloff\n        a /= 1.4;\n    }\n        \n    return scene;\n}\n\n// Inigo Quilez (https://www.shadertoy.com/view/Xds3zN)\nfloat getAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.1*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );// * (0.5+0.5*nor.y);\n}\n\nvec3 color (vec3 pos, vec3 ray, vec3 normal)\n{    \n    // lighting\n    vec3 rf = reflect(ray, normal);\n    float ld = dot(rf, vec3(0,0,1))*0.5+0.5;\n    vec3 ld2 = vec3(0.875,0.722,1.000) * sqrt(ld);\n    ld = dot(rf, normalize(vec3(0,1,0)))*0.5+0.5;\n    vec3 light = vec3(0.580,0.918,1.000) * pow(ld,10.);\n\n    // color palette by Inigo Quilez (https://iquilezles.org/articles/palettes)\n    vec3 tint = .5+.5*cos(vec3(0, .3, .6)*4.+length(pos)*3.-1.);\n    \n    // ambient occlusion by Inigo Quilez (https://www.shadertoy.com/view/Xds3zN)\n    float ao = mix(1., getAO(pos, normal), .9);\n\n    // compositing\n    return (tint + ld2 + light) * ao * .5;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // reset color\n    fragColor = vec4(0,0,0,1);\n    \n    // white noise\n    vec3 seed = vec3(gl_FragCoord.xy, iTime);\n    rng = hash33(seed);\n    \n    // pixel coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    \n    // blur edges\n    vec3 rng3 = hash33(seed+78.);\n    vec2 dof = vec2(cos(rng3.x*6.28),sin(rng3.x*6.28))*rng3.y;\n    uv += dof*pow(length(uv), 8.0)*.5;\n    \n    // camera coordinates\n    vec3 eye = vec3(0,0,-3);\n    vec3 ray = normalize(vec3(uv, 2));\n    vec3 pos = eye + ray * 1.;\n    \n    // raymarching\n    const float count = 25.;\n    bool hit = false;\n    float index;\n    for (index = 0.; index < count; ++index)\n    {\n        float dist = map(pos);\n        if (dist < 0.001)\n        {\n            hit = true;\n            break;\n        }\n        dist *= 0.9 + 0.1 * rng.z;\n        pos += ray * dist;\n    }\n    \n    if (hit)\n    {\n        // compute normal by NuSan (https://www.shadertoy.com/view/3sBGzV)\n        vec2 off=vec2(0.001,0);\n        vec3 normal = normalize(map(pos)-vec3(map(pos-off.xyy), map(pos-off.yxy), map(pos-off.yyx)));\n\n        // coloring\n        float shade = 1.-index/count;\n        fragColor.rgb = color(pos, ray, normal) * shade;\n    }\n    \n    // feedback with fade out\n    vec4 frame = texture(iChannel0, gl_FragCoord.xy/iResolution.xy);\n    fragColor.rgb = max(fragColor.rgb, frame.rgb - 0.002);\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}