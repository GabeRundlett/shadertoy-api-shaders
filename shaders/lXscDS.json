{
    "Shader": {
        "info": {
            "date": "1726848107",
            "description": "first two were an epic fail\nissues with this one: there's only color, no light",
            "flags": 48,
            "hasliked": 0,
            "id": "lXscDS",
            "likes": 0,
            "name": "rat racer 2.5: the second part",
            "published": 3,
            "tags": [
                "raytracer",
                "rat",
                "racer"
            ],
            "usePreview": 0,
            "username": "derpygamer2142",
            "viewed": 53
        },
        "renderpass": [
            {
                "code": "const float focalLength = 350.0/tan(radians(90.0/2.0));\nconst float renderDist = 750.0;\nconst float maxBounces = 4.0;\nconst vec3 light = normalize(vec3(1.0,1.0,-1.0));//normalize(vec3(1.0,1.0,-1.0));\nstruct obj {\n    vec3 pos;\n    float dist;\n    vec3 normal;\n    float reflectiveness; // that seems wrong word but it go fine\n    // me am much english\n    bool hit;\n    vec3 color;\n};\n\n\n\n\n// https://iquilezles.org/articles/intersectors/\n\nvec2 boxIntersection( in vec3 ro, in vec3 rd, vec3 boxSize, out vec3 outNormal ) \n{\n    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(-1.0); // no intersection\n    outNormal = (tN>0.0) ? step(vec3(tN),t1) : // ro ouside the box\n                           step(t2,vec3(tF));  // ro inside the box\n    outNormal *= -sign(rd);\n    return vec2( tN, tF );\n}\n\n\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra )\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\nfloat plaIntersect( in vec3 ro, in vec3 rd, in vec4 p )\n{\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nvec3 triIntersect( in vec3 ro, in vec3 rd, in vec3 v0, in vec3 v1, in vec3 v2 )\n{\n    vec3 v1v0 = v1 - v0;\n    vec3 v2v0 = v2 - v0;\n    vec3 rov0 = ro - v0;\n    vec3  n = cross( v1v0, v2v0 );\n    vec3  q = cross( rov0, rd );\n    float d = 1.0/dot( rd, n );\n    float u = d*dot( -q, v2v0 );\n    float v = d*dot(  q, v1v0 );\n    float t = d*dot( -n, rov0 );\n    if( u<0.0 || v<0.0 || (u+v)>1.0 ) t = -1.0;\n    return vec3( t, u, v );\n}\n\nobj intersect(vec3 ro, vec3 rd) {\n    obj hit = obj(vec3(0.0),99999.9,vec3(0.0),0.0,false, vec3(0.0));\n    \n    {\n        vec3 sp = vec3(0.0,sin(iTime*2.0)*15.0,75.0);\n        vec2 t = sphIntersect(ro, rd, sp, 15.0);\n        if (t.y >= 0.0) {\n            float d = 0.0;\n            d = t.x < 0.0 ? t.y : t.x;\n            if (d < hit.dist && d < renderDist) {\n                hit.dist = d;\n                hit.pos = ro + (rd*d);\n                hit.normal = normalize(hit.pos-sp);\n                hit.reflectiveness = 0.3;\n                hit.hit = true;\n                hit.color = vec3(255.0);\n                \n            }\n        }\n        \n    }\n    \n    {\n        vec3 sp = vec3(0.0,35.0,0.0);\n        vec2 t = sphIntersect(ro, rd, sp, 15.0);\n        if (t.y >= 0.0) {\n            float d = 0.0;\n            d = t.x < 0.0 ? t.y : t.x;\n            if (d < hit.dist && d < renderDist) {\n                hit.dist = d;\n                hit.pos = ro + (rd*d);\n                hit.normal = light;\n                hit.reflectiveness = 0.0;\n                hit.hit = true;\n                hit.color = vec3(1000.0);\n                \n            }\n        }\n        \n    }\n    \n    {\n        vec3 n = normalize(vec3(0.0,1.0,0.0));\n        float t = plaIntersect(ro, rd, vec4(n,15.0));\n        if (t < hit.dist && t < renderDist && t > 0.0) {\n            hit.dist = t;\n            hit.pos = ro + (rd*t);\n            hit.normal = n;\n            hit.reflectiveness = 0.1;\n            hit.hit = true;\n            hit.color = vec3(255.0);\n        }\n    \n    }\n    \n    { // https://www.youtube.com/watch?v=eeRXZGrm8lQ\n        vec3 n = vec3(0.0);\n        vec2 t = boxIntersection(ro - vec3(0.0, 0.0, 25.0), rd, vec3(5.0, 5.0, 5.0), n); \n        if (t.x > 0.0 && t.y > 0.0) {\n            if (t.x < hit.dist && t.x < renderDist) {\n                hit.dist = t.x;\n                hit.pos = ro + (rd*t.x);\n                hit.normal = n;\n                hit.reflectiveness = 0.3;\n                hit.hit = true;\n                hit.color = vec3(45.0,45.0,45.0);\n            }\n        }\n    }\n    \n    { // front\n        vec3 n = vec3(0.0);\n        vec2 t = boxIntersection(ro - vec3(0.0, 0.0, 100.0), rd, vec3(100.0, 100.0, 5.0), n);\n        if (t.x > 0.0 && t.y > 0.0) {\n            if (t.x < hit.dist && t.x < renderDist) {\n                hit.dist = t.x;\n                hit.pos = ro + (rd*t.x);\n                hit.normal = n;\n                hit.reflectiveness = 0.05;\n                hit.hit = true;\n                hit.color = vec3(255.0);\n            }\n        }\n    }\n    \n    { // back\n        vec3 n = vec3(0.0);\n        vec2 t = boxIntersection(ro - vec3(0.0, 0.0, -100.0), rd, vec3(100.0, 100.0, 5.0), n);\n        if (t.x > 0.0 && t.y > 0.0) {\n            if (t.x < hit.dist && t.x < renderDist) {\n                hit.dist = t.x;\n                hit.pos = ro + (rd*t.x);\n                hit.normal = n;\n                hit.reflectiveness = 0.01;\n                hit.hit = true;\n                hit.color = vec3(255.0);\n            }\n        }\n    }\n    \n    { // left\n        vec3 n = vec3(0.0);\n        vec2 t = boxIntersection(ro - vec3(-100.0, 0.0, 0.0), rd, vec3(5.0, 100.0, 100.0), n);\n        if (t.x > 0.0 && t.y > 0.0) {\n            if (t.x < hit.dist && t.x < renderDist) {\n                hit.dist = t.x;\n                hit.pos = ro + (rd*t.x);\n                hit.normal = n;\n                hit.reflectiveness = 0.085;\n                hit.hit = true;\n                hit.color = vec3(255.0,0.0,0.0);\n            }\n        }\n    }\n    \n    { // right\n        vec3 n = vec3(0.0);\n        vec2 t = boxIntersection(ro - vec3(100.0, 0.0, 0.0), rd, vec3(5.0, 100.0, 100.0), n);\n        if (t.x > 0.0 && t.y > 0.0) {\n            if (t.x < hit.dist && t.x < renderDist) {\n                hit.dist = t.x;\n                hit.pos = ro + (rd*t.x);\n                hit.normal = n;\n                    hit.reflectiveness = 0.085;\n                hit.hit = true;\n                hit.color = vec3(0.0,255.0,0.0);\n            }\n        }\n    }\n    \n    return hit;\n}\n\nfloat shadow(vec3 ro, vec3 rd) {\n    obj i = intersect(ro, rd);\n    if (i.hit && i.dist < renderDist) {\n        return 0.2;\n    }\n    else {\n        return 1.0;\n    }\n}\n\nvec3 tpara(vec3 n, vec3 i, float r1, float r2) {\n    return (r1/r2)*floor(i+(dot(i,n)*n));\n}\n\n\n\nvec3 tperp(vec3 tpara, vec3 n) {\n    return -sqrt(\n        1.0 - \n        pow(length(tpara),2.0)*n\n    );\n}\n\nvec3 t(vec3 n, vec3 i, float r1, float r2) {\n    /*vec3 tp = tpara(n,i,r1,r2);\n    return tp + tperp(tp, n);*/\n    return (r1/r2)*i + (\n    (r1/r2)*dot(i,n) - \n        sqrt(\n            1.0-\n            pow(\n                pow(r1/r2,2.0) * (1.0-pow(dot(i,n),2.0)),\n                2.0\n            )\n        )\n    )*n;\n}\n\nfloat rperp(vec3 n, vec3 i, float r1, float r2) {\n    float ctt = sqrt(\n        1.0 - /*pow(\n            sin(t(n, i, r1, r2)),\n            2.0\n        )*/\n        pow(r1/r2,2.0)*(1.0-pow(dot(i,n),2.0))\n    );\n    return pow(((r1*dot(i,n)) - (r2*ctt))/\n           ((r1*dot(i,n)) + (r2*ctt)),2.0);\n}\n\nfloat rpara(vec3 n, vec3 i, float r1, float r2) {\n    float ctt = sqrt(\n        1.0 - /*pow(\n            sin(t(n, i, r1, r2)),\n            2.0\n        )*/\n        pow(r1/r2,2.0)*(1.0-pow(dot(i,n),2.0))\n    );\n    return pow(((r2*dot(i,n)) - (r1*ctt))/\n           ((r2*dot(i,n)) + (r1*ctt)),2.0);\n}\n\nfloat reflectance(vec3 n, vec3 i, float r1, float r2) {\n    //float stt = pow(r1/r2,2.0)*(1.0-pow(dot(i,n),2.0)); // sine theta(t) ^2\n    if (r1 <= r2) { // TIR\n        return (rperp(n,i,r1,r2)+rpara(n,i,r1,r2))/2.0;\n    }\n    return 1.0;\n}\n\n\n// https://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf\nfloat schlick(vec3 n, vec3 i, float r1, float r2) {\n    float r0 = ((r1-r2)/(r1+r2));\n    return (r0*r0)+(1.0-(r0*r0))*pow((1.0-dot(i,n)),5.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0.0);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 screenCoord = (fragCoord/iResolution.xy - 0.5) * vec2(800.0,450.0);\n    vec4 r = texelFetch(iChannel0,ivec2(0),0);\n    vec3 ro = r.xyz;//vec3(0.0);\n    vec3 rd = rotPoint(normalize(vec3(screenCoord,focalLength)), texelFetch(iChannel0,ivec2(1,0),0).xyz);\n    \n    float bounces = 0.0;\n    float mult = 1.0;\n    float d = 1.0;\n    float lastDist = 0.0;\n    while (bounces < maxBounces && mult > 0.001) {\n        obj hit = intersect(ro,rd);\n        if (hit.hit) {\n            float s = (schlick(hit.normal,rd,1.0,0.01));\n            fragColor.xyz +=\n                vec3(\n                    (hit.color/255.0) * \n                    ((\n                    dot(\n                    hit.normal, \n                    light\n                    )\n                    +1.0)/2.0)\n                    //* shadow(ro + (rd*hit.dist*0.99), light)\n                ) * mult;// * s;\n            //fragColor.xyz += vec3(2.0 - schlick(hit.normal,rd,1.0,0.01))*mult;\n                \n            mult *= hit.reflectiveness * s;\n            bounces += 1.0;\n            lastDist += hit.dist;\n            \n            ro = ro + (rd*hit.dist*0.99);\n            rd = reflect(rd, hit.normal);\n            \n            if (bounces == 1.0) {\n                if (hit.dist > renderDist*0.4) {\n                    fragColor.xyz *=  1.0 - (((hit.dist - (renderDist*0.4)) / renderDist*0.6) * 5.0);\n                }\n            }\n        }\n        else {\n            mult = 0.0;\n            bounces += 1.0;\n        }\n    }\n    fragColor.xyz /= bounces;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define W ivec2(87,0)\n#define A ivec2(65,0)\n#define S ivec2(83,0)\n#define D ivec2(68,0)\n#define E ivec2(69,0)\n#define Q ivec2(81,0)\n\nconst float speed = 60.0;\n\n// keyboard stuff\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    /*if (iFrame > 0) {\n        if (fragCoord.xy == vec2(0.0)) {\n           vec2 movement = vec2(\n               texelFetch(iChannel0, W, 0).r - texelFetch(iChannel0, S, 0).r,\n               texelFetch(iChannel0, D, 0).r - texelFetch(iChannel0, A, 0).r\n           );\n           \n           if (movement.x != 0.0 && movement.y != 0.0) {\n               //movement = normalize(movement);\n               fragColor = texelFetch(iChannel1,ivec2(0),0);\n               //fragColor.xy += movement*5.0;\n           }\n           else {\n               fragColor = vec4(0.0);//texelFetch(iChannel1,ivec2(0),0);\n           }\n           \n        }\n    }\n    else {\n        fragColor = vec4(0.0);\n    }\n    fragColor.z = 1.0;*/\n    switch (int(fragCoord.x)) {\n        case 0: {\n            fragColor = texelFetch(iChannel1,ivec2(0),0);\n            vec2 movement = vec2(\n                   texelFetch(iChannel0, W, 0).r - texelFetch(iChannel0, S, 0).r,\n                   texelFetch(iChannel0, D, 0).r - texelFetch(iChannel0, A, 0).r\n            );\n            movement *= iTimeDelta*speed;\n            movement = rotPoint(vec3(movement.x, 0.0, movement.y),-vec3(texelFetch(iChannel1,ivec2(1,0),0).x,0.0,0.0)).xz; // this could be a mat2 but who cares\n            fragColor += vec4(movement.y, \n                (texelFetch(iChannel0, E, 0).r - texelFetch(iChannel0, Q, 0).r)*iTimeDelta*speed,\n                movement.x,\n                0.0\n            );\n            break;\n        }\n        \n        case 1: {\n           fragColor = texelFetch(iChannel1,ivec2(1,0),0);\n           if (iMouse.z > 0.0) {\n               fragColor += vec3(radians(((iMouse.x-iResolution.x/2.0)/(iResolution.x/2.0))),(iMouse.y-(iResolution.y/2.0))/(-iResolution.y*15.0),0.0).xyzx * iTimeDelta*speed;\n               break;\n           }\n            \n        }\n        \n        \n        \n    }\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 rotPoint(vec3 point, vec3 rot) {\n    rot = rot.yxz;\n    float sx = sin(rot.x);\n    float sy = sin(rot.y);\n    float sz = sin(rot.z);\n    \n    float cx = cos(rot.x);\n    float cy = cos(rot.y);\n    float cz = cos(rot.z);\n    /*mat3 rotmat = mat3(\n       (cx * cz) - (sx * sy * sz),\n       (sy * sx * cz) + (cx * sz),\n       0.0 - (sx * cy),\n       0.0 - (sz * cy),\n       cy * cz,\n       sy,\n       (sy * cx * sz) + (sx * cz),\n       (sx * sz) - (sy * cx * cz),\n        cy * cx\n    );\n        \n        (cx * cz) - (sx * sy * sz),\n        0.0 - (sz * cy),\n        (sy * cx * sz) + (sx * cz),\n        (sy * sx * cz) + (cx * sz),\n        cy * cz,\n        (sx * sz) - (sy * cx * cz),\n        0.0 - (sx * cy),\n        sy,\n        cy * cx\n        \n    return rotmat*point;*/\n    mat3 roll = mat3(\n        1,\n        0,\n        0,\n        0,\n        cx,\n        -sx,\n        0,\n        sx,\n        cx\n    );\n    /*\n    1,\n    0,\n    0,\n    0,\n    cx,\n    sx,\n    0,\n    -sx,\n    cx\n    \n    */\n    \n    mat3 pitch = mat3(\n        cy,\n        0,\n        sy,\n        0,\n        1,\n        0,\n        -sy,\n        0,\n        cy\n    );\n    \n    /*\n    cy,\n    0,\n    -sy,\n    0,\n    1,\n    0,\n    sy,\n    0,\n    cy\n    */\n    \n    mat3 yaw = mat3(\n        cz,\n        -sz,\n        0,\n        sz,\n        cz,\n        0,\n        0,\n        0,\n        1\n    );\n    /*\n    cz,\n    sz,\n    0,\n    -sz,\n    cz,\n    0,\n    0,\n    0,\n    1\n    */\n        \n    mat3 rotmat = roll*pitch*yaw;\n    \n    return point*rotmat;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}