{
    "Shader": {
        "info": {
            "date": "1669398943",
            "description": "playing with glow and other things. recalculating the ray direction is kind of weird",
            "flags": 34,
            "hasliked": 0,
            "id": "cdsXzl",
            "likes": 0,
            "name": "CamGlowyPe2",
            "published": 3,
            "tags": [
                "glow"
            ],
            "usePreview": 0,
            "username": "Sergeindamix",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "float rectangle(vec2 position, vec2 scale)\n{\n    scale = vec2(0.5) - scale * 0.5;\n    vec2 shape = vec2(step(scale.x, position.x), step(scale.y, position.y));\n    shape *= vec2(step(scale.x, 1.0 - position.x), step(scale.y, 1.0 - position.y));\n    \n    return shape.x * shape.y;\n\n}\nvec2 remap2(vec2 p)\n\t\t\t{\n\t\t\t\tp.xy *= .5 + .5;\n\t\t\t\treturn p;\n\t\t\t}\n\t\t\tvec2 remap3(vec2 p)\n\t\t\t{\n                float s=.5;\n                p-=s/2.;\n\t\t\t\tp = remap2(p)/s;\n\t\t\t\t\n\t\t\t\treturn p;\n\t\t\t}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv = fragCoord/iResolution.xy;\n    uv/=2.0;\n    uv+=.25;\n    float mask = rectangle(uv, vec2(0.19, 0.5));\n    vec3 col = texture(iChannel0, remap3(uv)).rgb;\n    col = texture(iChannel2, remap3(uv)).rgb;\n    //col = texture(iChannel3, remap3(uv)).rgb;\n    col = mix(col, texture(iChannel1, remap3(uv)).rgb,mask);\n   \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// From iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//STARNEST\n#define iterations 12\n#define formuparam 0.44\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoomS   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\n//CLOUDS\n#define SAMPLE_COUNT 32\n#define DIST_MAX 32.\n#define MOUSEY (3.*iMouse.y/iResolution.y)\n#define SAMPLES_ADAPTIVITY 0.02\n\n// mouse toggle\nbool useNewApproach = true;\n\n// cam moving in a straight line\nvec3 lookDir = vec3(-1.,0.,0.5);\nvec3 camVel = vec3(-1.,0.,0.);\nfloat zoom = 1.8; // 1.5;\n\n// cam spin around on spot\nfloat samplesCurvature = 0.; // can mix between fixed z and fixed radius sampling\n\nvec3 sundir = normalize(vec3(-1.0,0.0,-1.));\n\n// LUT based 3d value noise\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n    vec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n    return mix( rg.x, rg.y, f.z );\n}\n\nvec4 stars(in vec2 fragCoord){\n//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoomS,1.);\n\tfloat time=iTime*speed+.25;\n\n\t//mouse rotation\n\tfloat a1=.5+iMouse.x/iResolution.x*2.;\n\tfloat a2=.8+iMouse.y/iResolution.y*2.;\n\tmat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n\tmat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n\tdir.xz*=rot1;\n\tdir.xy*=rot2;\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\tfrom.xz*=rot1;\n\tfrom.xy*=rot2;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\treturn vec4(v*.01,1.);\t\n}\n\n\nvec4 map( in vec3 p )\n{\n\tfloat d = 0.1 + .8 * sin(0.6*p.z)*sin(0.5*p.x) - p.y;\n\n    vec3 q = p;\n    float f;\n    \n    f  = 0.5000*noise( q ); q = q*2.02;\n    f += 0.2500*noise( q ); q = q*2.03;\n    f += 0.1250*noise( q ); q = q*2.01;\n    f += 0.0625*noise( q );\n    d += 2.75 * f;\n\n    d = clamp( d, 0.0, 1.0 );\n    \n    vec4 res = vec4( d );\n    \n    vec3 col = 1.15 * vec3(1.0,0.95,0.8);\n    col += vec3(1.,0.,0.) * exp2(res.x*10.-10.);\n    res.xyz = mix( col, vec3(0.7,0.7,0.7), res.x );\n    \n    return res;\n}\n\n// compute desired spacing between samples, modelled as a 1/z curve\nfloat spacing(float t )\n{\n    // restrict to domain\n    t = max(t,0.);\n    \n    // unnorm pdf - plot this in graphtoy to see shape\n    float pdf = 1. / (SAMPLES_ADAPTIVITY*t + 1.);\n\t// integral of pdf over dist\n\tfloat norm = (1. / SAMPLES_ADAPTIVITY)*log(1. + SAMPLES_ADAPTIVITY*DIST_MAX);\n    // norm pdf\n    pdf /= norm;\n    \n    // sample spacing for our sample count\n    return 1. / (float(SAMPLE_COUNT) * pdf);\n}\n\n// mod but moves the boundaries to keep them stationary with the camera\nfloat mov_mod( float x, float y )\n{\n    return mod(x + (useNewApproach ? dot(camVel*iTime,lookDir) : 0.), y) ;\n}\n\nbool on_boundary( float x, float y )\n{\n    // the +0.25 solves numerical issues without changing the result\n    float numericalFixOffset = y*0.25;\n    return mov_mod( x + numericalFixOffset, y ) < y*0.5;\n}\n\n// put t on an appropriate sample location and initialise sampling data\nvoid firstT( out float t, out float dt, out float wt, out bool even )\n{\n    dt = exp2(floor(log2(spacing(0.))));\n    t = dt - mov_mod(t,dt);\n    even = on_boundary(t,2.*dt);\n    wt = 1.;\n}\n\n// advance t to next sample location\nvoid nextT( inout float t, inout float dt, inout float wt, inout bool even )\n{\n    float s = spacing(t); // get desired sample spacing\n    if( s < dt ) { dt /= 2.; even = true; } // can immediately move to higher density\n    else if( even && s > 2.*dt ) { dt *= 2.; wt = 1.; even = on_boundary(t,2.*dt); } // move to lower density if a sample is there\n\n    if( even ) wt = clamp( 2. - s/dt,0.,1.); // update wt for next odd sample - based on how far this even sample is into its band\n    \n    // next sample\n    t += dt;\n    even = !even;\n}\n\n// wt for blending in/out samples without pops\nfloat sampleWt( float wt, bool even )\n{\n    return even ? (2.-wt) : wt;\n}\n\nvec4 raymarch( in vec3 ro, in vec3 rd )\n{\n    vec4 sum = vec4(0, 0, 0, 0);\n    \n    // setup sampling\n    float t, dt, wt; bool even;\n    firstT( t, dt, wt, even );\n    \n    for(int i=0; i<SAMPLE_COUNT; i++)\n    {\n        if( sum.a > 0.99 ) continue;\n\n        vec3 pos = ro + t*rd;\n        vec4 col = map( pos );\n        \n        // iqs goodness\n        float dif = clamp((col.w - map(pos+0.6*sundir).w)/0.6, 0.0, 1.0 );\n        vec3 lin = vec3(0.51, 0.53, 0.63)*1.35 + 0.55*vec3(0.85, 0.57, 0.3)*dif;\n        col.xyz *= lin;\n        \n        col.xyz *= col.xyz;\n        \n        col.a *= 0.35;\n        col.rgb *= col.a;\n\n        // fade samples at far field\n        float fadeout = 1.-clamp((t/(DIST_MAX*.3)-.85)/.15,0.,1.); // .3 is an ugly fudge factor due to oversampling\n            \n        // integrate\n        float thisDt = dt * sampleWt( wt, even); // blend in dts\n        thisDt = sqrt(thisDt/5. )*5.; // hack to soften and brighten\n        sum += thisDt * col * (1.0 - sum.a) * fadeout;\n\n        // next sample\n        nextT( t, dt, wt, even );\n    }\n\n    sum.xyz /= (0.001+sum.w);\n\n    return clamp( sum, 0.0, 1.0 );\n}\n\nvec3 sky( vec3 rd )\n{\n    vec3 col = vec3(0.);\n    \n    float hort = 1. - clamp(abs(rd.y), 0., 1.);\n    col += 0.5*vec3(.99,.5,.0)*exp2(hort*8.-8.);\n    col += 0.1*vec3(.5,.9,1.)*exp2(hort*3.-3.);\n    col += 0.55*vec3(.6,.6,.9);\n    \n    float sun = clamp( dot(sundir,rd), 0.0, 1.0 );\n    col += .2*vec3(1.0,0.3,0.2)*pow( sun, 2.0 );\n    col += .5*vec3(1.,.9,.9)*exp2(sun*650.-650.);\n    col += .1*vec3(1.,1.,0.1)*exp2(sun*100.-100.);\n    col += .3*vec3(1.,.7,0.)*exp2(sun*50.-50.);\n    col += .5*vec3(1.,0.3,0.05)*exp2(sun*10.-10.); \n    \n    float ax = atan(rd.y,length(rd.xz))/1.;\n    float ay = atan(rd.z,rd.x)/2.;\n    float st = texture( iChannel0, vec2(ax,ay) ).x;\n    float st2 = texture( iChannel0, .25*vec2(ax,ay) ).x;\n    st *= st2;\n    st = smoothstep(0.65,.9,st);\n    col = mix(col,col+1.8*st,clamp(1.-1.1*length(col),0.,1.));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n    vec2 mo = -1.0 + 2.0*iMouse.xy / iResolution.xy;\n   \n    // camera\n    vec3 ro = vec3(0.,1.9,0.) + iTime*camVel;\n    vec3 ta = ro + lookDir; //vec3(ro.x, ro.y, ro.z-1.);\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + 1.2*p.y*vv + 1.5*ww );\n    \n    // sky\n    vec3 col = vec3(0.0,0.0,0.0);// sky(rd);\n    \n    // divide by forward component to get fixed z layout instead of fixed dist layout\n    vec3 rd_layout = rd/mix(dot(rd,ww),1.0,samplesCurvature);\n    vec4 clouds = raymarch( ro, rd_layout );\n    \n    col = mix( col, clouds.xyz, clouds.w );\n    \n\tcol = clamp(col, 0., 1.);\n    col = smoothstep(0.,1.,col);\n\tcol *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.12 ); //Vign\n    vec4 black = vec4(0.0,0.0,0.0,1.0);\n    fragColor = vec4( col, 1.0 );\n    if(fragColor.r <= 0.2 && fragColor.g <= 0.2 && fragColor.b <= 0.2 )\n    {fragColor = stars(fragCoord);}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R(p,a,t) mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a)\n#define R2(p,t) p*cos(t)+vec2(p.y,-p.x)*sin(t)\n#define H(h) (cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    vec3 p,q,r=iResolution,c=vec3(0),\n    d=normalize(vec3((C-.5*r.xy)/r.y,1.));\n    float i=0.,e,g=0.,t=iTime;\n\tfor(;i++<90.;)\n    {\n        p=R(g*d,normalize(H(t*.03)*2.-1.),g*.02);\n        q=p;\n        p.z+=t*3.;\n        p=abs(fract(p)-.5);\n        e=length(p)-.15;\n        p=p.x<p.z?p.zyx:p;\n        p=p.x>p.y?p.yxz:p;\n        p.xy=R2(p.xy,.98-sin(length(q.xy)));\n        g+=e=max(-e,length(p.xz))*.6;\n\t    c+=mix(vec3(1),H(q.z*.05+.4),.7)*.4/exp(30.*e)/g;\n\t}\n    O=vec4(c,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define ZERO (min(iFrame,0))\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xy)-t.x,p.z);\n    return length(q)-t.y;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\n// tweaked as the center aligned horizontal capsule. \nfloat sdHorizontalCapsule( vec3 p, float w, float r )\n{\n  p.x-= clamp( p.x, -w*0.5, w*0.5 );\n  return length( p ) - r;\n}\n\nfloat speaker(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.45,0.95,0.34))-0.03;\n    float d2 = length(p-vec3(0.,-0.2,-0.53))-0.38;\n    \n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.,-0.2,-0.36),vec2(0.36,0.03));\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.,-0.2,-0.32),vec2(0.32,0.025));\n    d = min(d,d2);\n    d2 = length(p-vec3(0.,-0.25,-0.08))-0.12;\n    d = min(d,d2);\n    \n    d2 = sdHorizontalCapsule(p-vec3(0.,-0.75,-0.36),0.6,0.06);\n    d = max(-d2,d);\n    \n    d2 = length(p-vec3(0.,0.55,-0.36))-0.2;\n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.,0.55,-0.36),vec2(0.2,0.03));\n    d = min(d,d2);\n    \n    p.z-=-0.36;\n    p.x = abs(p.x)-0.4;\n    p.y = abs(p.y)-0.9;\n    d2 = length(p)-0.03;\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat speaker2(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.95,0.45,0.34))-0.03;\n    float d2 = sdBox(p-vec3(0.,0.,-0.35), vec3(0.9,0.4,0.01))-0.03;\n    d = max(-d2,d);\n    \n    p.x = abs(p.x);\n    d2 = length(p-vec3(0.4,0.,-0.5))-0.36;\n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.4,0.,-0.3),vec2(0.34,0.03));\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.4,0.,-0.29),vec2(0.3,0.025));\n    d = min(d,d2);\n    d2 = length(p-vec3(0.45,0.,-0.08))-0.1;\n    d = min(d,d2);\n    \n    p.z-=-0.3;\n    p.x = abs(p.x)-0.86;\n    p.y = abs(p.y)-0.36;\n    d2 = length(p)-0.03;\n    d = min(d,d2);    \n    \n    return d;\n}\n\nfloat speaker3(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.95,0.95,0.34))-0.03;\n    \n    float d2 = length(p-vec3(0.0,0.,-0.68))-0.66;\n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.35),vec2(0.64,0.05));\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.33),vec2(0.6,0.045));\n    d = min(d,d2);\n    \n    d2 = length(p-vec3(0.0,0.,0.1))-0.2;\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.3),vec2(0.56,0.035));\n    d = min(d,d2);    \n    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.24),vec2(0.52,0.035));\n    d = min(d,d2);        \n        \n    d2 = sdTorus(p-vec3(0.0,0.,-0.19),vec2(0.47,0.035));\n    d = min(d,d2);  \n    \n    d2 = abs(length(p.xy)-0.73)-0.07;\n    d = min(d,max((abs(p.z)-0.38),d2));\n    \n    p.z-=-0.37;\n    p.x = abs(p.x)-0.86;\n    p.y = abs(p.y)-0.86;\n    d2 = length(p)-0.03;\n    d = min(d,d2);    \n    \n    p = prevP;\n    p.z-=-0.37;\n    p.xy = DF(p.xy,3.0);\n    p.xy -= vec2(0.52);\n    d2 = length(p)-0.03;\n    d = min(d,d2); \n    \n    p = prevP;\n    p.xy*=Rot(radians(sin(iTime)*120.));\n    p.z-=-0.37;\n    p.y=abs(p.y)-0.93;\n    d2 = Tri(p.xy,vec2(0.08),radians(45.));\n    d = min(d,max((abs(p.z)-0.02),d2));    \n    \n    p = prevP;\n    p.xy*=Rot(radians(90.+sin(iTime)*120.));\n    p.z-=-0.37;\n    p.y=abs(p.y)-0.93;\n    d2 = Tri(p.xy,vec2(0.08),radians(45.));\n    d = min(d,max((abs(p.z)-0.02),d2));      \n    \n    return d;\n}\n\nfloat changeSpeakers(vec3 p, float start, float speed){\n    vec3 prevP = p;\n    float endTime = 3.;\n    float t = iTime*speed;\n    float scenes[3] = float[](0.,1.,2.);\n    for(int i = 0; i<scenes.length(); i++){\n        scenes[i] = mod(scenes[i]+start,endTime);\n    }\n    \n    float scene = scenes[int(mod(t,endTime))];\n    \n    float d = 10.;\n    if(scene<1.) {\n        p.x=abs(p.x)-0.5;\n        d = speaker(p);\n    } else if (scene >= 1. && scene<2.){\n        p.y=abs(p.y)-0.5;\n        d = speaker2(p);\n    } else {\n        d = speaker3(p);\n    }\n    \n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    p.y -=iTime*0.5;\n    vec2 id = floor(p.xy*0.5);\n    p.z-=3.;\n    p.xy = mod(p.xy,2.0)-1.0;\n\n    id*=.5;\n    float rand = Hash21(id);\n    \n    float d = 10.;\n    p.z-=rand*0.3;\n    if(rand<0.3) {\n        d = changeSpeakers(p,1.,0.5+rand);\n    } else if(rand>=0.3 && rand<0.7) {\n        d = speaker3(p);\n    } else {\n        p.x=abs(p.x)-0.5;\n        d = speaker(p);\n    }\n    \n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    col = diffuseMaterial(n,rd,p,vec3(1.3));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.5);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        float scene = mod(iTime,15.);\n        float rotY = -10.;\n        float rotX = 0.;\n        if(scene>=5. && scene<10.){\n            rotY = 0.;\n            rotX = -30.;\n        } else if(scene>=10.){\n            rotY = 0.;\n            rotX = 30.;\n        }\n        \n        ro.yz *= Rot(radians(rotY));\n        ro.xz *= Rot(radians(rotX));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}