{
    "Shader": {
        "info": {
            "date": "1506496420",
            "description": "Image Super-Resolution Using Deep Convolutional Networks\nShader implementation of SRCNN described in [url]https://arxiv.org/pdf/1501.00092.pdf[/url]\n(filter visualization: [url]http://img11.hostingpics.net/pics/7575024900model.png[/url])",
            "flags": 32,
            "hasliked": 0,
            "id": "ltsczl",
            "likes": 47,
            "name": "superResolution",
            "published": 3,
            "tags": [
                "filter",
                "convolution",
                "image",
                "cnn",
                "upscale",
                "deeplearning",
                "srcnn",
                "restoration"
            ],
            "usePreview": 1,
            "username": "and",
            "viewed": 5438
        },
        "renderpass": [
            {
                "code": "// superResolution - Image\n//\n// Main image composition.\n// From left to right: result of 2x bicubic upsampling of input image,\n// neural network upsampled result and original, ground truth image.\n//\n// This is just a toy project. Playing with Convolutional Neural Networks\n// and their deployment on low end systems that only support shaders and OpenGL.\n//\n// In this case we have 3 layer network that takes input luminance\n// and performs 2x upscaling. The key difference between this configuration and\n// what was presented in the original paper is the use of pooling layer\n// between conv1 and conv2 by doing bilinear upsampling so that we can\n// utilize texture units in the shader to do that for \"free\".\n//\n// Using such pooling allows for larger sensing areas, however 2x2 conv2\n// is required to achieve best quiality. In many of my tests using such\n// configuration resulted in much better convergence, better quality\n// and faster runtime performance.\n//\n// Training was performed with Lasagne/Theano/Python/cuDNN framework\n// on a single GeForce GTX Titan GPU and took 21 hours to achieve given quality.\n// In addition to 91 training images from the paper a few extra one were\n// prepared based on street photos of London's Piccadilly Circus.\n//\n// All final filter value were quantized in order to get constant reusage needed\n// to fit into 224 vec4 constant limitation on some hardware. Such operation\n// does not affect the final quality.\n//\n// Using other GPU APIs it is possible to achieve much higher runtime performance,\n// while using more filters increases reconstruction quality.\n//\n// Image Super-Resolution Using Deep Convolutional Networks.\n// Shadertoy implementation of SRCNN described in https://arxiv.org/pdf/1501.00092.pdf\n//\n// Created by Dmitry Andreev - and'2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define SRCNN_SHARPEN   1\n#define BICUBIC_SHARPEN 0\n\n//\n\nvec4 loadA(int x, int y)\n{\n    return texture(iChannel3, (vec2(x, y) + 0.5) / iChannelResolution[3].xy, 0.0);\n}\n\nvec4 loadD(int x, int y)\n{\n    return texture(iChannel2, (vec2(x, y) + 0.5) / iChannelResolution[2].xy, 0.0);\n}\n\nvec4 putChar(vec4 r, vec2 ouv, const int cx, const int cy)\n{\n    r = all(greaterThan(ouv, r.zw)) && all(lessThan(ouv, r.zw + vec2(1.0 / 34.0, 1.0 / 16.0)))\n        ? vec4(ouv - r.zw + vec2(cx, cy) / 16.0 + vec2(1.0 / 60.0, 0.0), r.z, r.w) : r;\n\n    r.z += 1.0 / 34.0;\n\n    return r;\n}\n\nvec3 drawHud(vec3 clr, vec2 fragCoord)\n{\n    float s = iResolution.x / iResolution.y;\n    vec2  uv = fragCoord.xy / iResolution.yy;\n    vec2  ouv = uv;\n    vec4  r = vec4(0);\n\n    #define C(x, y) r = putChar(r, ouv, x, y);\n\n    // Bicubic\n    r.zw = vec2(0.108 * s, 0.93);\n    C(2,11)C(9,9)C(3,9)C(5,8)C(2,9)C(9,9)C(3,9)\n\n    // SRCNN\n    r.zw = vec2(0.458 * s, 0.93);\n    C(3,10)C(2,10)C(3,11)C(14,11)C(14,11)\n\n    // Original\n    r.zw = vec2(0.767 * s, 0.93);\n    C(15,11)C(2,8)C(9,9)C(7,9)C(9,9)C(14,9)C(1,9)C(12,9)\n\n    uv = r.xy;\n\n    // textureGrad is not supported in some browsers. Use mips bias instead.\n    // float d = textureGrad(iChannel1, uv, dFdx(ouv) * 0.5, dFdy(ouv) * 0.5).w;\n    float d = texture(iChannel1, uv, -10.0).w;\n\n    float q = fwidth(ouv.y) * 10.0;\n    float text = smoothstep(-q, q, 0.49 - d);\n    float shadow = smoothstep(-q * 2.0, q * 2.0, 0.52 - d);\n\n    // Header bar.\n    if (ouv.y > 0.92)\n        clr *= 0.3;\n\n    // Separation lines.\n    if (floor(fragCoord.x) == floor(iResolution.x / 3.0) || floor(fragCoord.x) == floor(iResolution.x * 2.0 / 3.0))\n        clr = vec3(0.0);\n\n    clr = mix(mix(clr, clr * 0.18, shadow), vec3(1.0), text);\n\n    return clr;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2  ms   = loadA(0, 0).xy;\n    vec2  fms  = ms - 3.0 * floor(ms / 3.0);\n    vec2  fms3 = ms - 6.0 * floor(ms / 6.0);\n\n    float view_size = floor(iResolution.x / 3.0);\n    vec2  padding = vec2(34.5);\n    vec2  stc = floor(fragCoord.xy) + padding;\n    \n    if (floor(fragCoord.x) < view_size)\n    {\n        // Bicubic\n\n        vec2 res = 3.0 * iChannelResolution[2].xy;\n        \n        fragColor = texture(iChannel2, (stc - fms3) / res, 0.0);\n\n        #if BICUBIC_SHARPEN\n            vec3 l = texture(iChannel2, (stc - fms3 + vec2( 3, 0)) / res, 0.0).rgb;\n            vec3 r = texture(iChannel2, (stc - fms3 + vec2(-3, 0)) / res, 0.0).rgb;\n            vec3 t = texture(iChannel2, (stc - fms3 + vec2( 0, 3)) / res, 0.0).rgb;\n            vec3 b = texture(iChannel2, (stc - fms3 + vec2( 0,-3)) / res, 0.0).rgb;\n        \n            fragColor.rgb = (fragColor.rgb * 5.0 - l - r - t - b) / 1.0;\n        #endif\n    }\n    else if (floor(fragCoord.x) > floor(iResolution.x * 2.0 / 3.0))\n    {\n        // Original\n\n        fragColor = texture(iChannel3, ((stc - floor(vec2(iResolution.x * 2.0 / 3.0, 0.0))\n             + 3.0 * floor(vec2(iResolution.x * 0.75, 0.0))) - fms) / (3.0 * iChannelResolution[3].xy), 0.0);\n    }   \n    else\n    {\n        // SRCNN\n\n        vec2  res = 3.0 * iChannelResolution[2].xy;\n        vec4  c = texture(iChannel2, (stc - vec2(view_size, 0.0) - fms3) / res, 0.0);\n\n        float bicubic_luma = dot(c.rgb, vec3(0.299, 0.587, 0.114));\n        vec3  bicubic_chroma = c.rgb - vec3(bicubic_luma);\n\n        #if SRCNN_SHARPEN\n        {\n            float l = texture(iChannel2, (stc - vec2(view_size, 0.0) - fms3 + vec2( 3, 0)) / res, 0.0).a;\n            float r = texture(iChannel2, (stc - vec2(view_size, 0.0) - fms3 + vec2(-3, 0)) / res, 0.0).a;\n            float t = texture(iChannel2, (stc - vec2(view_size, 0.0) - fms3 + vec2( 0, 3)) / res, 0.0).a;\n            float b = texture(iChannel2, (stc - vec2(view_size, 0.0) - fms3 + vec2( 0,-3)) / res, 0.0).a;\n\n            fragColor.rgb = bicubic_chroma + (c.a * 12.0 - l - r - t - b) * 0.125;\n        }\n        #else\n        {\n            fragColor.rgb = bicubic_chroma + c.a;\n        }\n        #endif\n    }\n\n    fragColor.rgb = drawHud(fragColor.rgb, fragCoord);\n    fragColor.a = 1.0;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// superResolution - Buf A\n//\n// Initial processing and mouse navigation.\n//\n// Image Super-Resolution Using Deep Convolutional Networks.\n// Shadertoy implementation of SRCNN described in https://arxiv.org/pdf/1501.00092.pdf\n//\n// Created by Dmitry Andreev - and'2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define DO_TEST_UPSCALE 0\n\n//\n\nvec4 loadSelf(int x, int y)\n{\n    return texture(iChannel1, (vec2(x, y) + 0.5) / iChannelResolution[1].xy, 0.0);\n}\n\nvec2 mirror_uv(vec2 uv)\n{\n    #if DO_TEST_UPSCALE\n        uv *= 0.5;\n    #endif\n\n    return 2.0 - (abs(fract(uv / 2.0) - 0.5) + 0.5) * 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 stc = floor(fragCoord);\n\n    // Mouse control.\n\n    vec4 self = loadSelf(0, 0);\n    vec4 new_self = self;\n\n    if (iMouse.z >= 0.0 && iMouse.w >= 0.0)\n        new_self.xy = floor(self.zw + (iMouse.xy - iMouse.zw));\n    else\n        new_self.zw = self.xy;\n\n    if (iMouse.x == iMouse.z && iMouse.y == iMouse.w)\n        new_self.xyzw = self.xyxy;\n\n    if (stc.x == 0.0 && stc.y == 0.0)\n        fragColor = new_self;\n\n    // Start with some nice image framing.\n\n    if (iFrame == 0)\n    {\n        new_self = -vec2(625, 405).xyxy;\n        fragColor = new_self;\n    }\n\n    // Downsample original input with pre-filtering.\n\n    if (!(stc.x == 0.0 && stc.y == 0.0))\n    {\n        vec2 mpos  = new_self.xy;\n        vec2 offs  = 0.5 - floor(floor(mpos / 3.0) / 2.0) * 2.0;\n        vec2 tsize = iChannelResolution[0].xy;\n\n        float bias = -1.0;\n        vec3 tl = texture(iChannel0, mirror_uv((stc.xy * 2.0 + vec2(-0.25,-1  ) + offs) / tsize), bias).rgb;\n        vec3 tr = texture(iChannel0, mirror_uv((stc.xy * 2.0 + vec2( 1.25,-1  ) + offs) / tsize), bias).rgb;\n        vec3 bl = texture(iChannel0, mirror_uv((stc.xy * 2.0 + vec2(-0.25, 2  ) + offs) / tsize), bias).rgb;\n        vec3 br = texture(iChannel0, mirror_uv((stc.xy * 2.0 + vec2( 1.25, 2  ) + offs) / tsize), bias).rgb;\n        vec3 cl = texture(iChannel0, mirror_uv((stc.xy * 2.0 + vec2(   -1, 0.5) + offs) / tsize), bias).rgb;\n        vec3 cr = texture(iChannel0, mirror_uv((stc.xy * 2.0 + vec2(    2, 0.5) + offs) / tsize), bias).rgb;\n        vec3 cc = texture(iChannel0, mirror_uv((stc.xy * 2.0 + vec2(  0.5, 0.5) + offs) / tsize), bias).rgb;\n\n        // fragColor.rgb = cc;\n\n        // Before doing bilinear downsampling, input data has to be pre-filtered to minimize aliasing.\n        // This effect happens naturally in optical systems when taking pictures.\n\n        fragColor.rgb = (2.0 * (tl + tr + bl + br) + 3.0 * (cl + cr) + 18.0 * cc) / 32.0;\n\n        // Put luminance into alpha channel.\n        fragColor.a = dot(fragColor.rgb, vec3(0.299, 0.587, 0.114));\n\n        if (floor(fragCoord.x) > iResolution.x * 0.75)\n        {\n            // Store original image on the right side of Buf A\n            // so we have a single place where input gets specified in Shadertoy.\n\n            vec2 uv = (stc - floor(vec2(iResolution.x * 0.75, 0.0)) + 0.5 - floor(mpos / 3.0)) / iChannelResolution[0].xy;\n            fragColor = texture(iChannel0, mirror_uv(uv), 0.0);\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// superResolution - Buf B\n//\n// Conv 1 - 6x6x24\n//\n// Image Super-Resolution Using Deep Convolutional Networks.\n// Shadertoy implementation of SRCNN described in https://arxiv.org/pdf/1501.00092.pdf\n//\n// Created by Dmitry Andreev - and'2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat fetch(const vec2 stc, const int y, const int x)\n{\n    vec2 local_size = floor(iResolution.xy / vec2(3, 2));\n    vec2 local_stc = stc - local_size * floor(stc / local_size);\n\n    return texture(iChannel0, (local_stc + 0.5 + vec2(x - 2, 3 - y)) / iChannelResolution[0].xy, 0.0 ).a;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float c;\n    vec4  val = vec4(0.0);\n    vec2  stc = floor(fragCoord.xy);\n\n    // Patch extraction and representation with 24 6x6 filters over a single luminance channel.\n\n    float index = 4.0 * (floor(3.0 * stc.x / iChannelResolution[0].x) + 3.0 * floor(2.0 * stc.y / iChannelResolution[0].y));\n\n    #define C(y, x) c = fetch(stc, y, x);\n    #define F(idx, f0, f1, f2, f3) val = index == float(idx) ? vec4(f0, f1, f2, f3) * c + val : val;\n\n    C(0, 0)\n    F(0,0.239,0.6935,3.865,-0.08295)F(4,-0.104,0.371,0.09275,-0.0707)F(8,0.289,-0.661,0.113,0.102)\n    F(12,-0.6675,-0.7145,0.388,-0.03925)F(16,-0.359,-0.0602,-0.5745,0.1175)F(20,0.02165,0.9385,1.005,-0.3435)\n    C(1, 0)\n    F(0,0.262,-1.935,-8.85,-0.262)F(4,0.04395,-0.3665,-0.298,-0.2215)F(8,0.872,0.16,0.108,-1.325)\n    F(12,-0.628,2.765,-0.005395,-0.47)F(16,-0.195,0.2615,0.785,-0.458)F(20,-0.159,-1.0,0.2795,0.5205)\n    C(2, 0)\n    F(0,-3.155,-0.185,4.075,0.03605)F(4,-0.276,0.7825,-0.2795,0.658)F(8,0.953,0.462,0.568,3.38)\n    F(12,2.545,-8.195,-1.575,1.25)F(16,-0.09255,-0.6235,-1.89,0.9155)F(20,0.549,-2.265,0.2305,-0.04635)\n    C(3, 0)\n    F(0,1.345,1.9,4.57,0.0564)F(4,0.854,-0.9375,0.2915,1.51)F(8,-1.765,0.371,-1.61,-2.085)\n    F(12,-0.532,3.54,2.08,-1.595)F(16,-0.221,0.2585,2.055,-0.1125)F(20,-0.2065,0.9395,0.245,-0.705)\n    C(4, 0)\n    F(0,-0.964,-0.008765,-8.36,-0.227)F(4,-0.2355,-0.5955,0.606,0.0465)F(8,0.7455,-0.7235,0.433,0.847)\n    F(12,-1.485,-1.435,-1.41,0.5555)F(16,0.3155,-0.117,-0.413,-0.5285)F(20,0.11,0.3645,-1.405,-0.11)\n    C(5, 0)\n    F(0,0.03025,-0.38,3.475,0.07)F(4,-0.03765,0.819,-0.4605,-0.545)F(8,0.1255,0.248,0.05895,-0.007515)\n    F(12,0.6685,0.0143,0.54,0.253)F(16,-0.405,0.02415,-0.1055,-0.327)F(20,-0.02675,-0.0298,0.468,0.0358)\n    C(0, 1)\n    F(0,0.2405,-0.471,-4.625,0.2795)F(4,0.0234,-0.656,-0.1105,-0.525)F(8,-0.6885,0.07,-0.4355,-0.5785)\n    F(12,0.137,0.2845,-0.3965,0.131)F(16,0.5485,0.11,0.705,0.679)F(20,-0.11,-1.825,-0.9835,0.4565)\n    C(1, 1)\n    F(0,-0.8235,3.02,8.56,0.0836)F(4,-0.3445,-1.515,0.6355,2.255)F(8,-3.16,1.055,0.0337,2.015)\n    F(12,2.285,-1.39,-0.966,-1.56)F(16,0.87,-0.3225,-1.115,1.915)F(20,0.275,1.72,-5.93,-0.7415)\n    C(2, 1)\n    F(0,7.545,0.9865,-3.55,0.6855)F(4,0.2485,1.52,0.7065,-3.515)F(8,0.6695,-1.2,-0.4185,-6.645)\n    F(12,-6.96,10.45,5.735,-1.52)F(16,-2.665,1.595,5.555,-7.255)F(20,-1.47,5.005,4.615,-0.218)\n    C(3, 1)\n    F(0,-3.325,-3.31,-7.2,-0.3395)F(4,-0.2835,3.235,-1.86,-5.355)F(8,2.85,-0.43,4.095,3.905)\n    F(12,1.235,-1.57,-3.36,6.365)F(16,1.475,-0.246,-4.53,3.08)F(20,0.27,-0.518,1.005,1.985)\n    C(4, 1)\n    F(0,1.72,-0.4375,9.425,0.1455)F(4,0.6455,0.08655,0.217,0.306)F(8,-0.4915,0.594,-0.7445,-0.963)\n    F(12,3.345,-0.644,0.378,-0.89)F(16,-0.8755,0.1695,0.189,1.165)F(20,-0.186,-0.67,0.8165,-0.4215)\n    C(5, 1)\n    F(0,-0.02685,-0.04485,-4.235,0.00362)F(4,-0.2815,-0.8945,0.4365,0.3325)F(8,0.563,-0.634,-0.0908,0.01485)\n    F(12,-1.455,0.598,0.00776,-0.537)F(16,0.664,0.05345,0.115,0.34)F(20,-0.0151,-0.14,0.4065,0.1035)\n    C(0, 2)\n    F(0,-1.58,-0.247,7.13,-0.119)F(4,-0.1985,2.42,-0.613,1.525)F(8,-1.255,-0.621,0.8835,2.625)\n    F(12,-0.224,0.1205,-3.155,3.725)F(16,-0.8575,-0.715,-0.986,-1.925)F(20,0.6135,1.545,-1.725,0.5515)\n    C(1, 2)\n    F(0,3.815,-3.32,-12.55,0.6715)F(4,1.76,-2.45,0.1605,-6.24)F(8,4.09,-0.1385,-0.92,-7.645)\n    F(12,0.3715,1.13,7.215,-5.46)F(16,-2.07,3.28,2.2,5.83)F(20,-2.765,-0.7365,7.525,0.3965)\n    C(2, 2)\n    F(0,-14.4,-4.805,5.005,-2.605)F(4,-15.75,-1.16,-1.33,6.65)F(8,9.54,0.1945,1.03,16.55)\n    F(12,7.14,-5.915,-7.965,6.155)F(16,-3.21,-8.015,-19.6,3.005)F(20,6.855,-11.2,8.13,2.165)\n    C(3, 2)\n    F(0,6.69,8.66,8.555,-0.0325)F(4,5.155,-1.54,3.225,7.085)F(8,-9.985,1.495,-21.65,-9.065)\n    F(12,-3.61,2.05,7.34,-3.915)F(16,-2.8,1.16,20.55,-7.85)F(20,-0.988,2.525,-9.73,-4.6)\n    C(4, 2)\n    F(0,-3.625,-1.075,-12.15,-0.0408)F(4,-1.585,-0.751,0.397,-1.165)F(8,2.975,-0.9275,4.58,3.26)\n    F(12,-2.405,0.607,-4.445,-3.825)F(16,1.075,-0.2405,-4.325,1.95)F(20,0.224,1.435,0.9775,1.56)\n    C(5, 2)\n    F(0,1.35,1.315,5.83,0.5355)F(4,0.539,1.05,-0.2405,-1.19)F(8,-2.305,1.315,-1.235,-1.33)\n    F(12,1.84,0.289,2.085,1.69)F(16,-0.6,0.04795,0.796,-0.177)F(20,-0.04,-0.487,-2.025,-0.789)\n    C(0, 3)\n    F(0,-1.87,-0.171,-5.755,0.4545)F(4,0.576,-0.5035,1.335,0.9975)F(8,-1.935,1.405,-0.937,0.707)\n    F(12,-2.345,0.3195,3.26,-0.783)F(16,0.7675,1.265,0.171,-1.575)F(20,-1.075,-0.619,-1.655,-1.385)\n    C(1, 3)\n    F(0,8.265,2.24,9.775,-3.055)F(4,-0.6945,2.08,-2.92,-2.415)F(8,7.545,-3.31,0.4725,-3.58)\n    F(12,3.015,-1.5,-7.945,-1.86)F(16,-5.44,-8.34,0.554,-4.97)F(20,7.08,3.11,9.505,2.505)\n    C(2, 3)\n    F(0,-8.78,15.85,-4.15,17.3)F(4,5.04,-0.7095,6.05,1.83)F(8,-13.95,20.35,0.351,7.485)\n    F(12,3.055,0.2615,9.27,2.71)F(16,26.6,26.3,-0.2835,7.82)F(20,-22.9,-6.275,-16.7,-7.695)\n    C(3, 3)\n    F(0,-3.195,-19.5,-8.555,-0.505)F(4,-2.455,3.33,-17.85,1.015)F(8,2.34,-20.6,19.15,1.635)\n    F(12,-0.1185,-2.285,-7.865,-6.135)F(16,-4.435,-5.0,-0.665,0.4325)F(20,4.265,2.57,-0.5885,20.45)\n    C(4, 3)\n    F(0,3.04,3.25,10.8,-0.001425)F(4,1.075,-4.715,12.85,-0.6035)F(8,0.3195,2.31,-3.82,-0.545)\n    F(12,-5.52,-0.2415,6.02,6.1)F(16,-0.336,0.534,1.19,-3.51)F(20,-0.365,-1.855,2.31,-11.8)\n    C(5, 3)\n    F(0,0.794,-1.025,-5.415,-0.594)F(4,-0.2285,0.7605,-3.075,0.7775)F(8,1.565,-1.415,1.085,-0.787)\n    F(12,0.8025,0.1235,-2.57,-1.53)F(16,0.8345,-0.105,-1.39,0.6615)F(20,-0.009535,0.1675,0.9985,2.035)\n    C(0, 4)\n    F(0,2.095,0.208,7.12,-0.794)F(4,-0.5795,-1.665,-0.3505,0.319)F(8,2.815,-0.8495,0.736,-1.285)\n    F(12,1.205,-0.473,0.137,-3.165)F(16,0.1805,-0.139,0.308,1.46)F(20,0.1565,-1.34,2.845,0.04155)\n    C(1, 4)\n    F(0,-6.365,-0.933,-13.65,4.875)F(4,0.1285,2.05,0.938,0.239)F(8,-3.55,-0.5455,-0.0577,3.53)\n    F(12,-1.545,0.6925,2.345,5.085)F(16,-1.645,0.3635,-0.7385,0.717)F(20,-0.335,-0.673,-6.47,0.3175)\n    C(2, 4)\n    F(0,8.68,2.63,6.965,-19.75)F(4,-1.78,-4.005,-1.54,-0.3185)F(8,3.495,-2.65,-0.7335,-8.56)\n    F(12,-2.11,0.9405,-7.25,-2.88)F(16,-6.38,-2.11,0.4255,-4.38)F(20,1.98,3.415,3.26,1.815)\n    C(3, 4)\n    F(0,5.83,-3.94,8.43,-0.009515)F(4,1.01,2.25,5.735,0.4605)F(8,2.355,4.6,-2.185,-3.51)\n    F(12,-0.353,0.841,2.78,3.995)F(16,-1.58,-0.385,0.7785,1.975)F(20,0.3265,-0.3185,5.48,-7.835)\n    C(4, 4)\n    F(0,-3.9,0.9575,-13.45,0.5855)F(4,-0.6155,4.83,-2.63,-0.8115)F(8,-1.85,-0.8275,0.3475,1.805)\n    F(12,3.165,-0.2255,-0.762,1.69)F(16,0.916,-0.01235,-0.7325,1.12)F(20,0.04355,-0.6765,-2.545,2.555)\n    C(5, 4)\n    F(0,0.285,-0.7535,6.74,0.1685)F(4,0.2125,-2.39,1.39,0.4085)F(8,0.7685,0.8125,-0.08405,0.0475)\n    F(12,0.2435,-0.367,0.2745,-2.63)F(16,-0.9345,-0.03255,0.99550003,-0.4855)F(20,0.0519,0.52,0.2655,-1.185)\n    C(0, 5)\n    F(0,0.01705,0.1045,-3.935,0.1625)F(4,-0.123,-0.362,0.2,-0.06115)F(8,-0.5875,-0.2015,-0.219,-0.1025)\n    F(12,-0.8,0.709,0.2925,0.2515)F(16,-0.331,0.104,-0.04465,-0.649)F(20,-0.0979,0.5265,-1.07,0.03)\n    C(1, 5)\n    F(0,0.5535,-0.4855,7.215,-1.995)F(4,0.6565,1.345,-0.316,-0.1885)F(8,0.813,0.93,0.2315,0.03305)\n    F(12,1.03,-1.26,-1.395,1.315)F(16,0.385,-0.8335,-0.3925,-0.334)F(20,0.688,-0.119,2.11,-0.1155)\n    C(2, 5)\n    F(0,-0.3975,0.0952,-4.205,4.595)F(4,0.2985,0.835,0.2395,-0.4455)F(8,-2.635,0.348,-0.442,0.3895)\n    F(12,0.175,0.985,2.105,-1.095)F(16,0.7625,1.975,0.8125,2.34)F(20,-1.65,0.5,-1.665,-0.1195)\n    C(3, 5)\n    F(0,-2.605,1.31,-5.29,0.0116)F(4,0.2445,-3.4,-2.33,0.1485)F(8,-0.8135,-0.871,1.705,1.775)\n    F(12,0.0264,-1.425,-1.6,-2.195)F(16,0.8245,-0.837,-1.31,-1.405)F(20,0.708,-0.47,-2.26,2.86)\n    C(4, 5)\n    F(0,1.04,-0.04305,7.3,-0.2925)F(4,0.0354,0.2075,0.547,0.05775)F(8,0.8905,0.0461,-0.791,-0.4595)\n    F(12,-1.58,0.932,0.8315,-0.1515)F(16,-0.8625,0.4245,1.185,0.205)F(20,-0.3855,1.135,1.38,-0.724)\n    C(5, 5)\n    F(0,0.165,-0.3915,-3.675,-0.2545)F(4,-0.1605,0.5515,0.03535,-0.188)F(8,-0.383,-0.2325,0.1345,-0.3085)\n    F(12,0.02065,-0.125,-0.257,0.9465)F(16,0.353,-0.07955,-0.5315,0.05955)F(20,0.05765,-0.528,-0.0805,0.147)\n\n    // Biases\n\n    c = 1.0;\n    F(0,-0.09481341,-0.09043419,-1.1155417,0.11924907)\n    F(4,0.66757464,-0.03277064,0.48133063,-0.18172741)\n    F(8,0.02,0.08191,0.099364,-0.00337064)\n    F(12,-0.03180428,-0.00662322,-0.04247172,-0.05498895)\n    F(16,-0.22072962,-0.82982278,0.04772876,-0.2557807)\n    F(20,0.72482061,4.48396969,-0.19349065,-0.20253918)\n\n    // ReLU\n    val = max(vec4(0.0), val);\n\n    fragColor = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// superResolution - Buf C\n//\n// Conv 2 - 2x2x12\n//\n// Image Super-Resolution Using Deep Convolutional Networks.\n// Shadertoy implementation of SRCNN described in https://arxiv.org/pdf/1501.00092.pdf\n//\n// Created by Dmitry Andreev - and'2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec4 fetch(const vec2 stc, const int ch, const int y, const int x)\n{\n    vec2 local_size = floor(iResolution.xy / vec2(3, 1));\n    vec2 local_stc = stc - local_size * floor(stc / local_size);\n\n    vec2 ch_size = floor(iResolution.xy / vec2(3, 2));\n    vec2 ch_stc;\n\n    ch_stc.x = (float(ch / 4) - 3.0 * floor(float(ch / 4) / 3.0)) * ch_size.x;\n    ch_stc.y = floor(float(ch / 4) / 3.0) * ch_size.y;\n\n    // There is a bilinear upsampling operation in the original network\n    // to perform pooling. We do the same here relying on hardware sampling.\n    const float pooling_factor = 0.5;\n\n    ch_stc += local_stc * pooling_factor;\n\n    return texture(iChannel0, (ch_stc - 1.25 + pooling_factor * vec2(x-1, 1-y)) / iChannelResolution[0].xy, 0.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c;\n    vec4 val = vec4(0.0);\n    vec2 stc = floor(fragCoord.xy);\n\n    // Non-linear mapping between 24 input and 12 output channels with 2x2 kernel.\n\n    float index = 4.0 * floor(3.0 * stc.x / iChannelResolution[0].x);\n\n    #define C(ch, y, x) c = fetch(stc, ch, y, x);\n    #define F0(idx, f0, f1, f2, f3) val = index == float(idx) ? vec4(f0, f1, f2, f3) * c.x + val : val;\n    #define F1(idx, f0, f1, f2, f3) val = index == float(idx) ? vec4(f0, f1, f2, f3) * c.y + val : val;\n    #define F2(idx, f0, f1, f2, f3) val = index == float(idx) ? vec4(f0, f1, f2, f3) * c.z + val : val;\n    #define F3(idx, f0, f1, f2, f3) val = index == float(idx) ? vec4(f0, f1, f2, f3) * c.w + val : val;\n\n    C(0, 0, 0)\n    F0(0,-0.235,-0.5725,-0.1175,-1.55)F0(4,0.018,-0.0083875,0.55,-0.99375)F0(8,0.2,-0.215,-0.34625,-0.33375)\n    F1(0,0.006825,-0.5025,0.1625,3.4)F1(4,0.028625,-0.005425,-0.63375,0.20125)F1(8,0.38625,-0.515,-0.55375,-0.41125)\n    F2(0,-1.4375,1.65,-1.1625,0.17375)F2(4,-0.44,0.23,-0.2625,1.3625)F2(8,0.76625,-0.58625,0.16125,-1.1375)\n    F3(0,-0.0735,-0.2725,-0.0615,0.95375)F3(4,0.02875,-0.0092875,0.19875,-0.37625)F3(8,-0.48125,-0.09625,0.34375,0.355)\n    C(4, 0, 0)\n    F0(0,0.23125,-1.725,-0.08275,-1.475)F0(4,-0.035125,0.01875,-0.041125,0.68125)F0(8,-0.23375,0.77125,-0.062125,-0.089875)\n    F1(0,0.3025,-0.16125,0.235,0.5575)F1(4,-0.069625,-0.0082375,-1.25,0.64125)F1(8,0.14,0.195,-0.34875,-0.31125)\n    F2(0,-0.30625,-0.5225,-0.6275,0.5275)F2(4,0.039,-0.0135,-0.76875,0.1125)F2(8,0.41,0.6775,0.69375,0.5725)\n    F3(0,0.3175,0.45875,0.088875,0.19375)F3(4,-0.01525,-0.013625,0.15875,-0.58625)F3(8,0.84875,-0.35375,0.615,0.1075)\n    C(8, 0, 0)\n    F0(0,-0.15875,-0.089375,-0.095,-2.0125)F0(4,-0.061375,0.071,-0.76625,-0.8025)F0(8,0.69625,0.41,-0.2025,-0.34125)\n    F1(0,0.2075,-0.49125,-0.083375,-1.6)F1(4,0.07925,-0.0235,-0.385,0.082)F1(8,-0.10375,0.54375,0.1175,-0.13375)\n    F2(0,1.325,0.33875,1.3,-0.59375)F2(4,0.079625,-0.042125,0.64875,0.54)F2(8,0.5325,0.545,-0.5225,-0.43625)\n    F3(0,0.2875,0.60125,0.048,-0.945)F3(4,0.01525,-0.03825,-0.63375,1.325)F3(8,-0.45375,0.33625,0.18375,0.19125)\n    C(12, 0, 0)\n    F0(0,-0.20625,0.52125,-0.18625,0.1675)F0(4,-0.029375,0.03625,-0.2625,-1.0375)F0(8,-0.8675,-0.8275,0.1025,-0.01625)\n    F1(0,0.2425,0.2,0.10375,-0.8525)F1(4,0.0001075,-0.022625,-0.050625,0.5)F1(8,-0.04575,0.40875,-0.19625,-0.19125)\n    F2(0,0.057375,0.2025,-0.025625,-0.875)F2(4,-0.00034125,-0.03575,0.16,-0.82625)F2(8,-0.83375,-0.62125,0.2475,0.04925)\n    F3(0,-0.58,-0.235,-0.5025,-1.55)F3(4,0.031625,-0.009075,-0.1575,-1.2125)F3(8,-0.87875,-0.145,-0.35,-0.37)\n    C(16, 0, 0)\n    F0(0,-0.18375,0.10375,-0.030875,-1.05)F0(4,-0.05225,0.0575,0.2675,0.03575)F0(8,0.6025,0.0795,0.1,0.11125)\n    F1(0,0.1475,-1.0375,-0.31375,-0.50625)F1(4,-0.265,0.25125,1.1125,0.455)F1(8,-0.094125,0.10875,0.07925,0.09125)\n    F2(0,-0.19125,-1.1,-0.077625,-1.4)F2(4,0.03,-0.013875,-0.53125,0.48875)F2(8,0.56375,0.58,-0.10375,0.0115)\n    F3(0,0.31375,0.10375,0.08575,-0.009325)F3(4,-0.029625,-0.022875,0.0013875,-0.080375)F3(8,0.31625,-0.245,-0.28625,-0.13)\n    C(20, 0, 0)\n    F0(0,0.53875,1.525,0.59625,-0.41875)F0(4,0.17375,-0.25125,-2.625,0.30375)F0(8,1.45,-0.5475,0.047625,0.12625)\n    F1(0,0.0038,0.59125,0.25375,0.29625)F1(4,-0.021375,0.017,-0.3125,-0.06425)F1(8,0.058875,0.1225,-0.086875,-0.07975)\n    F2(0,-0.021625,-0.15,-0.1125,1.325)F2(4,0.085,-0.0605,-0.079625,0.2)F2(8,-1.275,-0.26,-0.0215,0.12625)\n    F3(0,-0.4025,-0.74875,-0.40625,0.96875)F3(4,-0.05825,0.049375,-0.595,-0.33875)F3(8,-0.22375,-1.1,0.31375,0.4525)\n    C(0, 1, 0)\n    F0(0,-0.22375,0.96125,-0.13625,0.2125)F0(4,-0.098625,0.04775,-0.7075,1.0625)F0(8,-0.1625,0.305,0.13625,0.34)\n    F1(0,0.8725,0.1675,0.7075,-1.4)F1(4,-0.016375,0.008925,0.31125,-0.16375)F1(8,-0.66875,0.49375,-0.20375,-0.22875)\n    F2(0,1.8625,-1.4375,0.755,0.72375)F2(4,0.34125,-0.19125,0.8625,0.4125)F2(8,-0.4025,-0.45125,-0.13875,0.31875)\n    F3(0,0.29375,0.77375,0.30625,-1.5875)F3(4,0.028875,-0.020875,0.2625,0.69875)F3(8,0.7125,0.46375,-0.23875,-0.2825)\n    C(4, 1, 0)\n    F0(0,0.4175,2.075,0.58,1.6375)F0(4,-0.1,0.047375,0.3775,0.685)F0(8,-0.26625,-0.60125,0.1675,0.7975)\n    F1(0,-0.0305,-0.86125,0.028,-0.8375)F1(4,0.078,-0.011625,-0.5475,0.053375)F1(8,0.13,-0.3425,-0.2925,-0.32)\n    F2(0,0.10125,-0.56125,-0.063875,-0.555)F2(4,-0.035625,0.00048125,0.84,0.13625)F2(8,-0.81875,-0.785,-0.20625,-0.12)\n    F3(0,0.1075,-0.6975,0.36375,-1.575)F3(4,0.049375,-0.0078875,0.3,0.235)F3(8,-0.60375,0.41,-0.465,-0.2525)\n    C(8, 1, 0)\n    F0(0,0.36625,0.08,0.4975,1.0)F0(4,0.094625,-0.06775,0.6075,-0.09575)F0(8,0.545,0.2675,-0.18,0.049375)\n    F1(0,0.37625,0.76875,0.535,0.01075)F1(4,-0.08375,0.0072125,1.3875,0.67)F1(8,0.82,0.33625,-0.40625,-0.23125)\n    F2(0,0.31375,0.1825,0.36625,0.26125)F2(4,-0.076375,0.073375,0.0205,-0.445)F2(8,-0.2525,0.11625,-0.09725,-0.12125)\n    F3(0,-0.17125,-0.97375,-0.087875,0.125)F3(4,0.0675,-0.039875,0.59,-1.3625)F3(8,0.59125,-0.8025,0.3075,0.0745)\n    C(12, 1, 0)\n    F0(0,-0.065625,-0.8825,-0.018125,0.92875)F0(4,0.014125,-0.00705,-0.4675,0.2825)F0(8,0.12875,0.34125,0.01775,0.28875)\n    F1(0,0.51375,-0.28375,0.5625,0.24875)F1(4,-0.03175,0.077125,-0.10375,-0.32125)F1(8,-0.3575,0.145,-0.33,-0.17875)\n    F2(0,-0.2125,-0.755,-0.14625,1.025)F2(4,0.010625,0.0245,-0.34125,0.44625)F2(8,0.265,-0.38875,0.145,0.17125)\n    F3(0,0.089625,0.4925,0.050125,0.42375)F3(4,-0.0055625,0.000565,0.56375,0.43875)F3(8,0.265,0.435,0.195,0.23625)\n    C(16, 1, 0)\n    F0(0,-0.90375,-0.3025,-0.89375,0.75625)F0(4,-0.016125,-0.0415,-0.9675,-0.5725)F0(8,-1.025,-0.89875,0.30875,0.31)\n    F1(0,-0.7925,0.21125,0.67625,-0.15)F1(4,-0.3375,0.29375,-0.84125,-0.525)F1(8,0.1275,0.59125,-0.67625,0.75)\n    F2(0,0.71125,0.62125,0.55625,0.44375)F2(4,0.006025,0.0088625,0.28,-0.5675)F2(8,-0.70625,0.04075,-0.2,-0.20375)\n    F3(0,0.15,-0.765,0.2525,-1.5875)F3(4,0.05625,0.035375,0.0003975,0.2975)F3(8,0.4625,0.13625,-0.083375,-0.30875)\n    C(20, 1, 0)\n    F0(0,-0.1875,-1.1375,-1.375,-0.91875)F0(4,0.7375,-0.3725,0.44625,-0.42625)F0(8,-2.15,-0.5275,0.38625,-0.9575)\n    F1(0,-0.30875,-0.5175,-0.415,-0.95125)F1(4,-0.0045625,-0.04175,0.5625,0.09475)F1(8,0.32875,-0.21,0.8575,0.85125)\n    F2(0,0.18125,0.2825,0.10375,-1.8375)F2(4,-0.1025,0.06925,0.30375,0.215)F2(8,0.44375,-0.0092,0.21875,0.07775)\n    F3(0,0.1075,0.9725,0.3875,-0.5725)F3(4,0.076,-0.088625,-0.36375,-0.295)F3(8,0.56125,0.3475,-0.054,-0.085875)\n    C(0, 0, 1)\n    F0(0,-0.43375,-0.17375,-0.34375,0.9525)F0(4,-0.01975,0.0465,-0.83625,-0.037875)F0(8,0.4325,-0.25875,0.96625,0.83)\n    F1(0,-0.11375,0.2875,-0.245,-1.8375)F1(4,0.00735,0.014,0.24875,-0.3075)F1(8,-0.53875,0.3975,-0.23875,-0.14)\n    F2(0,0.205,-0.75125,1.25,-0.65625)F2(4,0.63,-0.4625,-0.4,-1.5625)F2(8,-0.75875,-0.17375,-0.47125,1.3)\n    F3(0,-0.3675,0.22125,-0.265,-0.9475)F3(4,-0.01625,0.039375,0.064875,-0.29625)F3(8,0.155,-0.15125,0.215,0.2725)\n    C(4, 0, 1)\n    F0(0,-0.059875,1.3375,1.075,1.7)F0(4,0.080625,-0.00865,-0.0535,-0.53375)F0(8,1.0125,-0.64625,0.24625,0.64375)\n    F1(0,-0.50125,-0.86875,-0.3925,-0.89125)F1(4,0.068125,0.01575,0.24,-0.042125)F1(8,0.065125,-0.02375,0.395,0.16625)\n    F2(0,0.12,-0.031625,0.41625,-1.4625)F2(4,-0.155,0.097375,0.8225,-0.57)F2(8,0.08975,0.25875,-0.4575,-0.4775)\n    F3(0,-0.99000001,-1.1125,-0.93375,-0.375)F3(4,0.02275,0.04675,-0.3525,0.1575)F3(8,-1.3625,-0.63875,-0.24375,0.185)\n    C(8, 0, 1)\n    F0(0,-0.44875,-0.072125,-0.46375,0.66)F0(4,0.045,-0.0815,0.7575,1.35)F0(8,-1.575,0.10375,0.12125,0.32)\n    F1(0,-0.295,0.555,-0.12625,-1.0125)F1(4,-0.097,0.04425,0.81375,0.059625)F1(8,-0.054125,0.0405,1.025,1.05)\n    F2(0,0.043625,-0.14875,-0.13125,0.3575)F2(4,-0.078375,0.02775,-0.02,0.245)F2(8,-0.045125,0.022,0.535,0.53125)\n    F3(0,0.295,0.11625,0.15625,0.7825)F3(4,-0.0445,-0.0071125,0.5825,0.2775)F3(8,-0.36625,0.18125,-0.7625,-0.805)\n    C(12, 0, 1)\n    F0(0,-0.32375,-0.6375,-0.31875,0.6)F0(4,-0.002025,-0.01075,-0.8375,0.3975)F0(8,0.61375,-0.26125,-0.60875,-0.3425)\n    F1(0,-0.17375,-0.68,-0.18375,0.83)F1(4,0.053375,-0.031125,0.14875,-0.315)F1(8,0.22125,0.031,-0.52375,-0.38625)\n    F2(0,0.355,-0.11,0.305,1.925)F2(4,0.011875,0.04825,-0.19375,0.655)F2(8,1.1,0.23,-0.2375,0.01375)\n    F3(0,-0.03775,0.086,-0.061,1.2625)F3(4,-0.014125,0.02525,-0.2425,0.33)F3(8,0.0087875,-0.1375,0.2875,0.32875)\n    C(16, 0, 1)\n    F0(0,0.11125,0.11125,0.0265,-0.32875)F0(4,0.054125,-0.06875,0.010125,0.26375)F0(8,-0.1775,0.345,-0.17125,-0.19)\n    F1(0,-0.033875,0.35375,0.01,0.5925)F1(4,0.35,-0.3375,-0.6375,-0.19375)F1(8,0.054,-0.155,-0.2225,-0.24125)\n    F2(0,-0.003325,0.94875,-0.1325,0.26625)F2(4,0.015875,-0.029375,1.175,0.10625)F2(8,-0.039875,0.013625,0.25125,0.022)\n    F3(0,-0.1025,-0.24,0.41625,-1.6125)F3(4,0.056625,-0.010375,0.1875,0.57125)F3(8,0.0705,0.445,0.815,0.6875)\n    C(20, 0, 1)\n    F0(0,-0.07525,0.2475,0.16375,-0.78)F0(4,-0.3175,0.25625,1.6,-0.3625)F0(8,-1.175,-0.076125,0.071875,0.18375)\n    F1(0,0.31625,-0.21,0.10625,-1.175)F1(4,0.045,-0.073125,1.0625,0.68)F1(8,-0.0017875,0.3525,0.09025,0.00064125)\n    F2(0,0.017125,0.1325,0.1225,-3.1875)F2(4,-0.08975,0.05975,0.053375,-0.86375)F2(8,1.775,0.046,-0.10375,-0.21)\n    F3(0,-0.04775,1.0,-0.07875,-0.945)F3(4,0.0985,-0.091375,0.0555,0.5725)F3(8,-0.4775,0.20625,-0.66,-0.66375)\n    C(0, 1, 1)\n    F0(0,-0.225,-0.57,-0.235,-1.2125)F0(4,0.0945,-0.0695,0.7125,-1.125)F0(8,-0.05175,-0.12375,-0.11125,-0.1)\n    F1(0,-0.1325,-0.2125,0.015,0.52625)F1(4,-0.027,-0.01725,-0.2375,0.265)F1(8,0.55,-0.32625,0.09425,0.00029625)\n    F2(0,-1.0625,1.025,-1.3,0.48625)F2(4,-0.455,0.3175,0.14625,0.060875)F2(8,0.7575,0.22375,0.14875,-0.5275)\n    F3(0,-0.33375,-0.225,-0.28875,0.053625)F3(4,-0.047375,-0.017625,-0.155,0.096875)F3(8,-0.18,-0.255,1.2625,1.175)\n    C(4, 1, 1)\n    F0(0,-0.34375,-1.775,-1.3625,-1.2625)F0(4,0.012375,-0.078875,-0.54125,-1.05)F0(8,-0.51,0.87875,0.5375,-0.57375)\n    F1(0,-0.22375,0.3875,-0.38125,0.51)F1(4,-0.0535,-0.01475,-0.25375,0.315)F1(8,0.47,0.025,0.2525,0.45)\n    F2(0,0.10625,0.62125,0.15125,1.2375)F2(4,0.14875,-0.097,-0.86,0.56)F2(8,0.2275,-0.2275,0.040625,0.035125)\n    F3(0,-0.058875,0.40375,-0.067375,1.175)F3(4,-0.0090125,-0.05125,-0.325,-0.032)F3(8,0.69125,-0.15375,0.23875,-0.07275)\n    C(8, 1, 1)\n    F0(0,0.5125,-0.064375,0.525,-0.6675)F0(4,-0.083125,0.07575,-0.1625,-0.75625)F0(8,0.46875,-0.61375,0.265,-0.20625)\n    F1(0,-0.20125,-0.485,-0.265,1.1)F1(4,0.105,-0.033,-0.90875,-0.07825)F1(8,0.11875,-0.18875,0.60625,0.5475)\n    F2(0,-0.074375,-0.27375,-0.096,-0.045625)F2(4,0.0865,-0.065875,-0.16375,-0.024)F2(8,-0.0465,-0.079875,0.0605,0.081625)\n    F3(0,0.46875,0.23625,0.275,1.125)F3(4,-0.025375,0.0585,-0.59375,0.49625)F3(8,-0.42375,0.2025,-0.3,-0.052375)\n    C(12, 1, 1)\n    F0(0,0.44875,0.495,0.44,-0.17875)F0(4,0.018,-0.01025,0.805,-0.76875)F0(8,-0.71125,-0.24875,0.056875,-0.3875)\n    F1(0,0.925,0.9525,0.78375,0.64625)F1(4,-0.04975,-0.0091625,0.19125,0.8175)F1(8,0.1175,0.24625,0.14,0.002525)\n    F2(0,-0.26125,0.011375,-0.26,-0.77875)F2(4,-0.02525,-0.02875,-0.7525,-0.905)F2(8,-1.2,-0.059875,-0.18375,-0.36875)\n    F3(0,0.1175,0.38625,0.2525,-1.3)F3(4,-0.0057875,-0.001225,0.44875,-0.58625)F3(8,-0.715,-0.43625,-0.04025,-0.15625)\n    C(16, 1, 1)\n    F0(0,0.32375,-0.2075,0.42,0.25625)F0(4,0.0027875,0.08025,0.1,-0.2575)F0(8,0.38625,0.34375,-0.8675,-0.8675)\n    F1(0,0.58625,0.3825,-0.33625,0.03525)F1(4,1.525,-1.3625,0.3,0.18125)F1(8,-0.46,-0.47125,0.84875,-0.41125)\n    F2(0,0.53375,0.04975,0.49875,0.55125)F2(4,-0.04575,0.034625,-0.38125,0.5)F2(8,0.59,-0.515,-0.02625,0.16875)\n    F3(0,-0.3525,0.20625,-0.6725,-0.7125)F3(4,-0.06775,-0.006525,-0.885,0.060625)F3(8,0.1,0.165,-0.36625,-0.22)\n    C(20, 1, 1)\n    F0(0,0.12625,-1.125,1.0,1.1625)F0(4,-2.0375,1.75,0.1625,-0.16375)F0(8,1.95,0.6775,-1.1875,-0.0012625)\n    F1(0,-0.33625,-0.445,-0.055875,1.5)F1(4,-0.02275,0.1,-1.5375,-0.88625)F1(8,-1.3375,-0.5775,-0.90875,-0.63375)\n    F2(0,0.1,0.32875,-0.004975,1.6125)F2(4,0.094125,-0.061125,0.003125,0.17875)F2(8,-1.125,0.4325,-0.013625,0.1625)\n    F3(0,0.0385,-0.90875,-0.12375,-0.06875)F3(4,-0.11625,0.12625,0.62875,-0.21375)F3(8,0.2175,-0.0605,0.44625,0.43125)\n\n    // Biases\n\n    #define F(idx, f0, f1, f2, f3) val = index == float(idx) ? vec4(f0, f1, f2, f3) + val : val;\n\n    F(0,1.12352669,2.3,0.34690702,1.28966069)\n    F(4,-2.88188791,2.60484695,0.46568558,0.25229403)\n    F(8,3.60696173,1.03364789,0.09012905,-0.56845796)\n\n    // ReLU\n    val = max(vec4(0.0), val);\n\n    fragColor = vec4(val);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// superResolution - Buf D\n//\n// Conv 3 - 6x6x1 and Bicubic upsampling\n//\n// Image Super-Resolution Using Deep Convolutional Networks.\n// Shadertoy implementation of SRCNN described in https://arxiv.org/pdf/1501.00092.pdf\n//\n// Created by Dmitry Andreev - and'2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec4 loadA(int x, int y)\n{\n    return texture(iChannel0, (vec2(x, y) + 0.5) / iChannelResolution[0].xy, 0.0);\n}\n\n// B = 1,   C = 0   - cubic B-spline\n// B = 1/3, C = 1/3 - recommended\n// B = 0,   C = 1/2 - Catmull-Rom spline (sharpest)\nfloat cMitchell(float x)\n{\n    const float B = 0.0;\n    const float C = 1.0 / 2.0;\n\n    float ax = abs(x);\n\n    if (ax < 1.0)\n    {\n        return ((12.0 - 9.0 * B - 6.0 * C) * ax * ax * ax +\n            (-18.0 + 12.0 * B + 6.0 * C) * ax * ax + (6.0 - 2.0 * B)) / 6.0;\n    }\n    else if ((ax >= 1.0) && (ax < 2.0))\n    {\n        return ((-B - 6.0 * C) * ax * ax * ax +\n            (6.0 * B + 30.0 * C) * ax * ax + (-12.0 * B - 48.0 * C) *\n            ax + (8.0 * B + 24.0 * C)) / 6.0;\n    }\n    else\n    {\n        return 0.0;\n    }\n}\n\nvec3 bicubic(float x, vec3 c0, vec3 c1, vec3 c2, vec3 c3)\n{\n    vec3 r = vec3(0);\n\n    r += c0 * cMitchell(x + 1.0);\n    r += c1 * cMitchell(x + 0.0);\n    r += c2 * cMitchell(1.0 - x);\n    r += c3 * cMitchell(2.0 - x);\n\n    return r;\n}\n\nvec3 textureBicubic(sampler2D tex, vec2 res, vec2 t, const float bias)\n{\n    t = t * res - 0.5;\n\n    vec2 f = fract(t);\n\n    t = floor(t) + 0.5;\n\n    vec3 t0 = bicubic(f.x,\n        texture(tex, (t + vec2(-1, -1)) / res, bias).xyz,\n        texture(tex, (t + vec2( 0, -1)) / res, bias).xyz,\n        texture(tex, (t + vec2( 1, -1)) / res, bias).xyz,\n        texture(tex, (t + vec2( 2, -1)) / res, bias).xyz);\n\n    vec3 t1 = bicubic(f.x,\n        texture(tex, (t + vec2(-1, 0)) / res, bias).xyz,\n        texture(tex, (t + vec2( 0, 0)) / res, bias).xyz,\n        texture(tex, (t + vec2( 1, 0)) / res, bias).xyz,\n        texture(tex, (t + vec2( 2, 0)) / res, bias).xyz);\n\n    vec3 t2 = bicubic(f.x,\n        texture(tex, (t + vec2(-1, 1)) / res, bias).xyz,\n        texture(tex, (t + vec2( 0, 1)) / res, bias).xyz,\n        texture(tex, (t + vec2( 1, 1)) / res, bias).xyz,\n        texture(tex, (t + vec2( 2, 1)) / res, bias).xyz);\n\n    vec3 t3 = bicubic(f.x,\n        texture(tex, (t + vec2(-1, 2)) / res, bias).xyz,\n        texture(tex, (t + vec2( 0, 2)) / res, bias).xyz,\n        texture(tex, (t + vec2( 1, 2)) / res, bias).xyz,\n        texture(tex, (t + vec2( 2, 2)) / res, bias).xyz);\n\n    return bicubic(f.y, t0, t1, t2, t3);\n}\n\nvec4 fetch(const vec2 stc, const int ch, const int y, const int x)\n{\n    vec2 local_size = iResolution.xy;\n    vec2 local_stc = stc;\n\n    vec2 ch_size = floor(iResolution.xy / vec2(3, 1));\n    vec2 ch_stc;\n\n    ch_stc.x = floor(float(ch) / 4.0) * ch_size.x;\n    ch_stc.y = 0.0;\n\n    ch_stc += local_stc;\n\n    return texture(iChannel2, (ch_stc + 0.5 + vec2(x, 4 - y)) / iChannelResolution[2].xy, 0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec4  c;\n    float val = 0.0;\n    vec2  stc = floor(fragCoord.xy);\n\n    // Reconstruct luminance with a single 6x6 convolution of 12 input channels.\n\n    #define C(ch, y, x) c = fetch(stc, ch, y, x);\n    #define F(f0, f1, f2, f3) val += dot(vec4(f0, f1, f2, f3), c);\n\n    C(0, 0, 0)F(-0.00351446,0.00295939,0.00348678,0.01086617)\n    C(4, 0, 0)F(0.00045127,-0.00132629,-0.00257146,0.00091958)\n    C(8, 0, 0)F(-0.00070582,-0.00183283,0.00191495,-0.00238455)\n    C(0, 1, 0)F(-0.00612511,-0.00251725,0.00515538,0.0187)\n    C(4, 1, 0)F(0.00836052,-0.00617204,-0.00062157,-0.00238186)\n    C(8, 1, 0)F(0.00166426,0.0014092,-0.00084613,0.00035721)\n    C(0, 2, 0)F(-0.00806507,-0.00493,0.01,-0.00440553)\n    C(4, 2, 0)F(0.00173781,-0.00674753,0.00247206,-0.0048747)\n    C(8, 2, 0)F(0.0028579,0.00082987,0.00407489,-0.00555691)\n    C(0, 3, 0)F(-0.01093632,-0.00572558,0.0112733,-0.03460487)\n    C(4, 3, 0)F(0.03830647,-0.03696717,0.00342859,-0.0024113)\n    C(8, 3, 0)F(0.0029622,-0.00356101,0.00546178,-0.00640677)\n    C(0, 4, 0)F(-0.001737,-0.00467947,0.00215393,-0.01817206)\n    C(4, 4, 0)F(0.00982415,-0.0148,0.00353559,-0.00217086)\n    C(8, 4, 0)F(0.00081517,0.00267436,0.00425578,-0.00386803)\n    C(0, 5, 0)F(-0.00071466,0.00021793,0.00071,0.00940729)\n    C(4, 5, 0)F(-0.00241738,0.0043505,-0.00005815,0.00160608)\n    C(8, 5, 0)F(-0.00183418,0.00079654,0.00072595,-0.00119)\n    C(0, 0, 1)F(0.00437643,-0.00051339,-0.0024492,-0.02795563)\n    C(4, 0, 1)F(-0.00037356,-0.00002798,0.00170701,0.00434493)\n    C(8, 0, 1)F(-0.00385045,-0.00328069,0.00283315,-0.00332309)\n    C(0, 1, 1)F(0.008,-0.00317051,-0.0073894,-0.00054319)\n    C(4, 1, 1)F(-0.00195051,0.00268219,0.00246903,-0.001)\n    C(8, 1, 1)F(-0.00098941,0.00051914,-0.00030331,0.00223843)\n    C(0, 2, 1)F(0.00905984,0.00484156,-0.01121,0.01282)\n    C(4, 2, 1)F(-0.00168041,-0.00112627,-0.00032715,0.00136474)\n    C(8, 2, 1)F(-0.00130515,0.00235374,-0.00039633,0.00283941)\n    C(0, 3, 1)F(0.01814448,0.00828836,-0.01633495,0.02)\n    C(4, 3, 1)F(0.0072975,-0.00271804,-0.00489583,0.00822377)\n    C(8, 3, 1)F(-0.00162914,-0.00438643,0.00510254,-0.00463271)\n    C(0, 4, 1)F(0.0053389,-0.00051851,-0.00424779,0.02073688)\n    C(4, 4, 1)F(0.01115845,-0.01650364,0.00070977,-0.00251249)\n    C(8, 4, 1)F(0.00166848,-0.00496334,-0.00501119,0.00415624)\n    C(0, 5, 1)F(-0.00153355,0.00222806,0.00144618,-0.00469521)\n    C(4, 5, 1)F(-0.00803807,0.01,-0.003,-0.00126027)\n    C(8, 5, 1)F(0.00177767,0.00178174,0.00171077,-0.00171697)\n    C(0, 0, 2)F(0.0044618,-0.00156725,-0.00592573,-0.03567032)\n    C(4, 0, 2)F(0.0008857,-0.00121977,0.00213931,0.00319787)\n    C(8, 0, 2)F(-0.00390982,-0.00108124,0.00061069,0.00004329)\n    C(0, 1, 2)F(-0.00161138,0.00075456,-0.00000097,0.01666664)\n    C(4, 1, 2)F(0.00012306,0.001,0.00053903,-0.00440154)\n    C(8, 1, 2)F(0.00308909,0.00522174,-0.00205641,0.00145743)\n    C(0, 2, 2)F(-0.00650194,0.0171419,0.00717652,0.01013387)\n    C(4, 2, 2)F(0.00464069,-0.00431937,-0.0163497,-0.00441018)\n    C(8, 2, 2)F(0.00389743,0.00817269,-0.00567924,0.00690274)\n    C(0, 3, 2)F(-0.0086457,0.00289117,0.00430285,-0.00276493)\n    C(4, 3, 2)F(0.02094857,-0.0277664,-0.00196656,0.01463915)\n    C(8, 3, 2)F(-0.017,-0.00132498,-0.02114368,0.01797535)\n    C(0, 4, 2)F(0.01229748,-0.00514671,-0.01163268,0.0036593)\n    C(4, 4, 2)F(0.01168708,-0.01180411,0.00794236,0.00221342)\n    C(8, 4, 2)F(-0.00345081,0.00693983,-0.00276887,0.00730968)\n    C(0, 5, 2)F(-0.01042707,0.00488621,0.00942085,0.0095552)\n    C(4, 5, 2)F(-0.00118139,0.00235663,-0.00595082,-0.00341906)\n    C(8, 5, 2)F(0.00335706,0.00563086,-0.00166246,0.00086624)\n    C(0, 0, 3)F(0.00229853,-0.00524362,-0.00167594,0.00455854)\n    C(4, 0, 3)F(-0.0009744,0.00147137,0.00384814,0.0024445)\n    C(8, 0, 3)F(-0.003088,-0.00656954,0.00298292,-0.00281983)\n    C(0, 1, 3)F(-0.00663323,-0.00172808,0.00583134,0.018849)\n    C(4, 1, 3)F(0.00535728,-0.00642662,0.00129886,0.00002421)\n    C(8, 1, 3)F(0.0009507,0.00129439,-0.00357376,0.00090546)\n    C(0, 2, 3)F(-0.0005863,-0.00312956,0.00443886,-0.01553692)\n    C(4, 2, 3)F(-0.00867062,0.01014164,-0.00057495,-0.01255229)\n    C(8, 2, 3)F(0.01523018,0.00006842,0.00940459,-0.00684986)\n    C(0, 3, 3)F(-0.00762155,-0.01872233,0.0066778,-0.00556319)\n    C(4, 3, 3)F(-0.00679776,0.0093582,0.01407626,-0.00096806)\n    C(8, 3, 3)F(0.00204611,-0.01691971,0.0137738,-0.01686179)\n    C(0, 4, 3)F(0.00690628,-0.00275081,-0.00861448,-0.01395018)\n    C(4, 4, 3)F(-0.00818415,0.00908822,0.00627839,-0.00009538)\n    C(8, 4, 3)F(-0.001,-0.00155,0.00561848,-0.00722778)\n    C(0, 5, 3)F(-0.00941427,0.00474623,0.01096883,-0.00345726)\n    C(4, 5, 3)F(0.0057046,-0.00644603,-0.00338494,-0.00514077)\n    C(8, 5, 3)F(0.00455451,-0.00510219,0.00006587,-0.00014436)\n    C(0, 0, 4)F(0.00211751,-0.00257602,-0.00317558,-0.00774556)\n    C(4, 0, 4)F(-0.00036749,0.00089582,0.00251946,0.00046646)\n    C(8, 0, 4)F(-0.00048038,-0.00044347,0.00101065,-0.001015)\n    C(0, 1, 4)F(-0.00054915,0.00010671,0.0010155,0.0154)\n    C(4, 1, 4)F(0.00344185,-0.00456773,0.0014,0.0026547)\n    C(8, 1, 4)F(-0.00407896,0.00186302,0.00045663,0.00082582)\n    C(0, 2, 4)F(-0.002,0.00033,0.00428,0.0024057)\n    C(4, 2, 4)F(-0.005651,0.00571041,-0.0026,0.00107123)\n    C(8, 2, 4)F(-0.00167793,0.00286365,0.00140161,-0.00166331)\n    C(0, 3, 4)F(0.00093457,0.00069406,-0.00131938,-0.01677026)\n    C(4, 3, 4)F(-0.00775682,0.00830363,-0.00239213,0.0013892)\n    C(8, 3, 4)F(-0.00110915,0.00327647,0.00481028,-0.00460168)\n    C(0, 4, 4)F(0.00809064,0.0015098,-0.00552941,-0.00497923)\n    C(4, 4, 4)F(-0.00529672,0.00579133,-0.00282269,-0.00127692)\n    C(8, 4, 4)F(0.002,0.00275793,0.00102498,0.00218349)\n    C(0, 5, 4)F(-0.003,0.00177685,0.0023859,0.00548968)\n    C(4, 5, 4)F(0.00041167,-0.0012298,-0.00185702,-0.00173367)\n    C(8, 5, 4)F(0.00298512,0.00355975,0.00173601,-0.00204575)\n    C(0, 0, 5)F(0.00162489,0.00098652,-0.00167976,-0.01751723)\n    C(4, 0, 5)F(0.0005,-0.00074233,-0.00071144,-0.00206626)\n    C(8, 0, 5)F(0.00313231,-0.00038876,0.00239279,-0.00286974)\n    C(0, 1, 5)F(0.00182831,0.00369742,-0.00142315,0.00430287)\n    C(4, 1, 5)F(-0.00450609,0.00517208,-0.00196407,0.00023938)\n    C(8, 1, 5)F(0.00002449,0.00076561,-0.00112265,0.00144857)\n    C(0, 2, 5)F(-0.00079172,0.00446152,-0.00081561,0.00501851)\n    C(4, 2, 5)F(0.0066961,-0.00729496,-0.00249268,-0.00017788)\n    C(8, 2, 5)F(0.00057479,0.00313447,-0.00512984,0.00436886)\n    C(0, 3, 5)F(0.00514397,0.00224223,-0.00616465,0.00575604)\n    C(4, 3, 5)F(0.00067425,-0.00060911,0.00051277,0.00162658)\n    C(8, 3, 5)F(-0.00370987,-0.00339403,-0.00846926,0.00817676)\n    C(0, 4, 5)F(0.00011564,-0.00056051,-0.00065373,0.00774179)\n    C(4, 4, 5)F(0.00340144,-0.00376592,-0.00085788,0.002)\n    C(8, 4, 5)F(-0.00346563,0.00122545,-0.00443362,0.0048959)\n    C(0, 5, 5)F(-0.00296302,-0.00383445,0.00332275,0.00244432)\n    C(4, 5, 5)F(-0.00008264,0.00006626,0.0021196,0.00137287)\n    C(8, 5, 5)F(-0.00156066,0.00091643,-0.00072657,0.00007617)\n\n    // Bias\n    val += 0.3150385;\n\n    // Upsample source image using bicubic filter.\n    fragColor.rgb = textureBicubic(iChannel0, iChannelResolution[0].xy, 0.5 * fragCoord / iChannelResolution[0].xy, 0.0);\n    \n    // Put SRCNN output luminocity into alpha channel.\n    fragColor.a = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}