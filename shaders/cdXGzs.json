{
    "Shader": {
        "info": {
            "date": "1666617117",
            "description": "Assuming you have a vertical video (thats why pass #1 crops the input), it blurs and zooms the rest. Similar to what I 've seen in shows. Enhancement of my https://www.shadertoy.com/view/flVcDz",
            "flags": 32,
            "hasliked": 0,
            "id": "cdXGzs",
            "likes": 0,
            "name": "Vertical Video Enlargement",
            "published": 3,
            "tags": [
                "video",
                "blur"
            ],
            "usePreview": 0,
            "username": "turboplay",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "// MIT\n\n// Second, enlarge\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 Radius = Size / iResolution.xy;\n\n    if (uv.x < left || uv.y < top || uv.x > right || uv.y > bottom)\n    {\n        float HorizontalZoom = 1. / (1. - (left + (1. - right)));\n        float VerticalZoom = 1. / (1. - (top + (1. - bottom)));\n\n        // https://www.shadertoy.com/view/wtKfWt\n        // Convert uv range to -1 to 1\n        vec2 xy = uv;\n        xy = xy * 2.0 - 1.0;\n\n        // Scale uv\n        xy.x /= HorizontalZoom;\n        xy.y /= VerticalZoom;\n\n        // Convert back to 0 to 1 range\n        xy = (xy + 1.) / 2.0f;\n\n        vec4 Color = texture(iChannel0,xy);\n\n        // Blur\n        // https://www.shadertoy.com/view/Xltfzj\n        for (float d = 0.0; d < Pi2; d += Pi2 / Directions)\n        {\n            for (float i = 1.0 / Quality; i <= 1.0; i += 1.0 / Quality)\n            {\n                Color += texture(iChannel0,xy + vec2(cos(d), sin(d)) * Radius * i);\n            }\n        }\n        Color /= Quality * Directions - 15.0;\n        fragColor = Color;\n    }\n    else\n        fragColor = texture(iChannel0,uv);\n\n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// MIT\n\n// First, crop the video\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // crop enough\n    if (uv.x < left || uv.x > right || uv.y < top || uv.y > bottom)\n        fragColor = vec4(0);\n    else\n        fragColor = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// MIT\n\n// crop %\nfloat left = 0.25;\nfloat right = 0.75;\nfloat top = 0.0f;\nfloat bottom = 1.0f;\n\n\n// Gaussian Blur Settings\nfloat Directions = 16.; // BLUR DIRECTIONS (Default 16.0 - More is better but slower), 8,64,32\nfloat Quality = 32.; // BLUR QUALITY (Default 4.0 - More is better but slower) 4,64,32\nfloat Size = 32.; // BLUR SIZE (Radius) 0-128\n\n// Constants\nconst float Pi2 = 6.28318530718; // Pi*2",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}