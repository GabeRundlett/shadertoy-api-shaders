{
    "Shader": {
        "info": {
            "date": "1611899346",
            "description": "Testing gradient normalization in 3D for estimating the distance to implicit surfaces. It works\nsurprisingly well. Some of the surfaces are based off the [url=https://en.wikipedia.org/wiki/Implicit_surface]wikipedia article[/url].",
            "flags": 0,
            "hasliked": 0,
            "id": "ttVcW3",
            "likes": 3,
            "name": "Gradient Normalization Test",
            "published": 3,
            "tags": [
                "gradient",
                "implicit",
                "distanceestimate",
                "normalization"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "/*\nTesting gradient normalization in 3D for estimating the distance to implicit surfaces. It works\nsurprisingly well. Some of the surfaces are based off the wikipedia article:\nhttps://en.wikipedia.org/wiki/Implicit_surface\n*/\n\n// Just in case ;)\n#define EXTRA_FUDGE_FACTOR 1.0\n\n// Settings\n#define MAX_TRACE_DIST 10.0\n#define MIN_HIT_DIST 0.001\n#define GRAD_STEP 0.001\n#define GRAD_CAP 20.0\n#define MAX_STEPS 100.0\n\n// Uncomment one to see a different surface\n//#define GENUS_2\n//#define SPHERICAL_HARMONIC\n//#define CASSINI_OVAL\n//#define QUARTIC_SPHERE\n#define TANGLECUBE\n\nfloat mapSceneImplicit(in vec3 p) {\n    float c = cos(iTime), s = sin(iTime);\n    p.xz *= mat2(c, -s, s, c);\n    p.yz *= mat2(c, -s, s, c);\n\n    #ifdef GENUS_2\n    float t1 = 2.0 * p.y * (p.y * p.y - 3.0 * p.x * p.x) * (1.0 - p.z * p.z);\n    float t2 = p.x * p.x + p.y * p.y; t2 *= t2;\n    float t3 = (9.0 * p.z * p.z - 1.0) * (1.0 - p.z * p.z);\n    return max(t1 + t2 - t3, dot(p, p) - 4.0); // Theres other stuff that gets in the way\n    #endif\n\n    #ifdef SPHERICAL_HARMONIC\n    p /= 2.0;\n    const float k = 0.3153915652; // sqrt(5/Ï€)/4\n    return dot(p, p) - pow(3.0 * k * p.y * p.y / dot(p, p) - k, 2.0);\n    #endif\n\n    #ifdef CASSINI_OVAL\n    float q1 = length(p - vec3(-1.5,  0.0,  0.0));\n    float q2 = length(p - vec3( 1.5,  0.0,  0.0));\n    float q3 = length(p - vec3( 0.0, -1.5,  0.0));\n    float q4 = length(p - vec3( 0.0,  1.5,  0.0));\n    float q5 = length(p - vec3( 0.0,  0.0, -1.5));\n    float q6 = length(p - vec3( 0.0,  0.0,  1.5));\n    return q1 * q2 * q3 * q4 * q5 * q6 - 14.0;\n    #endif\n\n    #ifdef QUARTIC_SPHERE\n    return dot(p * p, p * p) - 4.0;\n    #endif\n\n    #ifdef TANGLECUBE\n    return dot(4.0 * p * p, 4.0 * p * p) + dot(-10.0 * p, 2.0 * p) + 11.0;\n    #endif\n}\n\nfloat getGrad(in vec3 p) {\n    vec3 e = vec3(GRAD_STEP, 0.0, 0.0);\n    return length(vec3(mapSceneImplicit(p + e.xyy) - mapSceneImplicit(p - e.xyy),\n                       mapSceneImplicit(p + e.yxy) - mapSceneImplicit(p - e.yxy),\n                       mapSceneImplicit(p + e.yyx) - mapSceneImplicit(p - e.yyx))) / (2.0 * e.x);\n}\n\nfloat mapScene(in vec3 p) {\n    return mapSceneImplicit(p) / max(getGrad(p), GRAD_CAP) * EXTRA_FUDGE_FACTOR;\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(GRAD_STEP, 0.0, 0.0);\n    return normalize(vec3(mapSceneImplicit(p + e.xyy) - mapSceneImplicit(p - e.xyy),\n                          mapSceneImplicit(p + e.yxy) - mapSceneImplicit(p - e.yxy),\n                          mapSceneImplicit(p + e.yyx) - mapSceneImplicit(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float t = 0.0;\n    for (float iters=0.0; iters < MAX_STEPS; iters++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < MIN_HIT_DIST) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n            fragColor.rgb += n * max(0.2, dot(n, l));\n            break;\n        }\n\n        if (t > MAX_TRACE_DIST) {\n            break;\n        }\n\n        t += d;\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.4545));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}