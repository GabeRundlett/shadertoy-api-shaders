{
    "Shader": {
        "info": {
            "date": "1669144509",
            "description": "I expect this has been done before: move shader code to a buffer and output debug information in alpha channel. Here we return the number of iterations of the main loop for the pixel under the mouse.",
            "flags": 32,
            "hasliked": 0,
            "id": "mslSzS",
            "likes": 3,
            "name": "Alpha Channel Debug Info",
            "published": 3,
            "tags": [
                "debug",
                "alpha",
                "sh17b"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "///////////////////////////////////////////////////////////////\n//\n// Alpha Channel Debug Info, mla, 2022.\n//\n// Main shader runs in a buffer. Image just copies through\n// from the buffer, but also reads and displays debug information\n// from the alpha channel for the pixel under the mouse.\n//\n///////////////////////////////////////////////////////////////\n\nfloat hud(vec2 fragCoord, vec4 data) {\n  const int digits = 7, nrows = 15, ncols = 4;\n  // Table structure\n  vec2 cellsize = iResolution.xy/vec2(ncols,nrows);\n  ivec2 cellindex = ivec2(fragCoord/cellsize);\n  int column = cellindex.x;\n  int row = nrows-cellindex.y-1; // Reverse order of rows\n  if (column > 1 || row > 0) return 0.0;\n  float x = data[3-column];\n  float fsize = cellsize.y; // \"Font size\" = line height in pixels\n  vec2 p = mod(fragCoord,cellsize)/fsize;\n  // Get diffs for textureGrad\n  float uvscale = 0.5/(16.0*fsize);   // 0.5 to sharpen a little\n  vec2 dx = vec2(uvscale,0), dy = vec2(0,uvscale);\n\n  // Draw the character\n  vec4 metrics = vec4(0.25,0.75,0,1);\n  float charwidth = metrics.y-metrics.x;\n  float colwidth = cellsize.x/fsize-1.0; // Cell width in chars, with padding\n  int charpos = int(p.x/charwidth);\n  vec2 uv = vec2(0);\n  int c = printfloat(x,digits,charpos); // Get character at charpos, 0 if out of range\n  if (c > 0) {\n    float charstart = charwidth*float(charpos); // character start\n    uv = char(vec2(p.x-charstart+metrics.x,p.y),c);\n  }\n  vec4 t = textureGrad(iChannel3,uv,dx,dy);\n  if (c > 0) return t.x;\n  return 0.0;  \n}\n\nvoid mainImage( out vec4 o, in vec2 C ) {\n  o = texelFetch(iChannel0,ivec2(C),0).xyyy;\n  vec4 data = texelFetch(iChannel0,ivec2(iMouse.xy),0);\n  o = mix(o,vec4(1),hud(C,data));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Original shader by Trisomie21\n\nvec2 Path(vec2 x) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\tf = f*f*(3.-2.*f);\n\treturn textureLod(iChannel2, (p+vec2(37.5,17.5) + f)/256.0, 0.).xy;\n}\n\n#define S(x) vec4(Path(x*vec2(.04,.1))*vec2(6,9),0,0)\n\nvoid mainImage( out vec4 o, in vec2 C ) {\n    vec4 p = vec4(C.xy,0,0)/iResolution.xyxy-.5, d=p, t, c, s;\n    p.z += iTime*8.;\n    p -= S(p.z);\n    float x, r, w, i;\n    float count = 0.0;\n    float maxx = -1e8;\n    for(i=1.5; i>0.; i-=.01)\n    {\n        count++;\n        // Select one of 5 type of wood beam separation\n        vec2 z = (p.zz-2.)*.25;\n        z = Path(z - fract(z))*4.+.5;\n        z = (z - fract(z))/10.;\n        z = mix(z, vec2(1.), step(vec2(.4), z));      \n        z *= step(4., mod(p.z-2., 8.));\n\t\tfloat f = mix(z.x, z.y, step(p.x, 0.));                \n        \n        t = abs(mod(c=p+S(p.z), 8.)-4.);\n        w = step(0., c.y);\n        r = (step(2.6, t.x) - step(2.8, t.x)) * w;        \n        s = texture(iChannel0, (c.y*t.x > 3. ? t.zxy:t.yzx)-3.);\n        x = min(t.x + f, t.y)-s.x * (1.-r) - r*.8;  \n        maxx = max(x,maxx);               \n        if(x < .01) break;\n        p -= d*x*.5;\n     }\n    w = step(t.x, 0.8) * step(2.8, t.z) + step(2.8, t.x) * step(0., c.y);\n\to = p.wyyw*.02 + 1.3* mix(s, vec4(.8), r) * mix(vec4(1), vec4(1,.5,.2,1), w ) * i/p.w;\n    o.z = maxx;\n    o.w = count;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\n// Wrapper for division to allow emulation of GPU style division\n// on CPU, not that this makes much difference to result.\nfloat fdiv(float x, float y) { return x/y; }\n\n// If we've found the character for the target index, return it.\n#define CHAR(c) { if (index++ == cindex) return(c); }\n\n// https://www.shadertoy.com/view/4sBfRd\nvec2 char(vec2 p, int c) {\n  // Compute uv for font texture.\n  // p is [0,1] coordinates in square character\n  return (p + vec2(c,15-c/16))/16.0;\n}\n\nint printfloat(float x, int digits, int cindex) {\n  if (cindex < 0 || cindex > digits+6) return 0;\n  int index = 0;\n  const float pmax = 1e15; //  Large power of 10 with a nice representation\n  const int emax = 15; // Exponent of pmax\n  const float pow10[] = float[]( 1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8 );\n  const int ZERO = 0x30, POINT = 0x2e, MINUS = 0x2d, PLUS = 0x2b;\n  const int A = 0x61, E = 0x65, F = 0x66, I = 0x69, N = 0x6e;\n  const int SPACE = 0x20;\n  if (isinf(x)) {\n    if (x < 0.0) CHAR(MINUS);\n    CHAR(I); CHAR(N); CHAR(F);\n  } else if (isnan(x)) {\n    if (floatBitsToInt(x) < 0) CHAR(MINUS);\n    CHAR(N); CHAR(A); CHAR(N);\n  } else if (x == 0.0) {\n    if (1.0/x < 0.0) CHAR(MINUS);\n    CHAR(ZERO);\n  } else {\n    if (x < 0.0) CHAR(MINUS) // No semicolon!\n    else CHAR(SPACE);\n    x = abs(x);\n    int exp = 0; // Compute exponent here\n    float llimit = pow10[digits-2], ulimit = 10.0*llimit;\n    // Now put x in the range llimit <= x <= ulimit\n    while (x > llimit*pmax) { x /= pmax; exp += emax; }\n    while (x < fdiv(ulimit,pmax)) { x *= pmax; exp -= emax; }\n    if (x >= ulimit) {\n      float p = 1.0;\n      while (fdiv(x,p) > ulimit) {\n        exp++; p *= 10.0;\n      }\n      x = fdiv(x,p);\n    } else if (x < llimit) {\n      float p = 1.0;\n      while (x*p < llimit) {\n        exp--;  p *= 10.0;\n      }\n      x *= p;\n    }\n    assert(!isinf(x));\n    assert(!isnan(x));\n    assert(x >= llimit);\n    assert(x <= ulimit); // Equality is possible!\n    // Round to an integer which has exactly the significant figures we want.\n    int n = int(round(x));\n    if (n == int(ulimit)) {\n      // Just in case the round has taken us the wrong way\n      n /= 10; exp++;\n    }\n    assert(n >= int(llimit));\n    assert(n < int(ulimit));\n    // Now we have our (correctly rounded) integer representation\n    // together with the correct exponent.\n    // See if we want to use exponent notation\n    int e = 0;\n    if (exp <= -digits-4) {\n      e = exp+digits-1;\n      exp = -digits+1;\n    } else if (exp > 0) {\n      e = exp+digits-1;\n      exp = -digits+1;\n    }\n    while(n%10 == 0 && exp < 0) {\n      // Remove trailing zeros\n      n /= 10; exp++;\n    }\n    int m = 1, i = exp+1;\n    while (10*m <= n) { m *= 10; i++; }\n    // i is number of characters in front of decimal point\n    if (i <= 0) {\n      CHAR(ZERO);\n      CHAR(POINT);\n      // Add leading digits for 0 < x < 1\n      while(i < 0) {\n        CHAR(ZERO); i++;\n      }\n    }\n    while(m != 0) {\n      CHAR(ZERO+n/m%10);\n      m /= 10; i--;\n      // Don't print trailing point!\n      if (i == 0 && m != 0) CHAR(POINT);\n    }\n    if (e != 0) {\n      CHAR(E);\n      CHAR(e < 0 ? MINUS : PLUS);\n      e = abs(e);\n      CHAR(ZERO+e/10); CHAR(ZERO+e%10); \n    }\n  }\n  return 0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}