{
    "Shader": {
        "info": {
            "date": "1477591947",
            "description": "Weird Lattice",
            "flags": 0,
            "hasliked": 0,
            "id": "4l3SRr",
            "likes": 3,
            "name": "Weird Lattice 2",
            "published": 3,
            "tags": [
                "smooth",
                "cristal",
                "radclick",
                "latice"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 578
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\n// count radial section. \n// with this you can have more section. \n// more sections need more id check, but the tech is exactly the same\nconst float sections = 4.; \t\n\n// some varas\nfloat time = 0.;\t\t\t\t// time\nfloat cid = 0., lid = 0.; \t// current id, last id\nmat3 m1;\t\t\t\t\t\t// matrix used by the pattern merging\nmat3 m2;\t\t\t\t\t\t// matrix used by the pattern merging\n\n// Matrix operations\nmat3 getRotXMat(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 getRotYMat(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 getRotZMat(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\n// tunnel and cam path\nvec2 path(float t){return vec2(cos(t*0.08), sin(t*0.08)) * 4.;}\n\n// continuous angle from atan\nfloat cAtan(vec2 uv)\n{\n\tfloat a = 0.;\n\tif (uv.x >= 0.) a = atan(uv.x, uv.y);\n    if (uv.x < 0.) a = 3.14159 - atan(uv.x, -uv.y);\n    return a;\n}\n\n// return id of region \nfloat GetID(vec2 uv) \n{\n    return cAtan(uv) * floor(sections) * .5 / 3.14159;\n}\n\n// one pettern for each ID\n// here id is from range 0 to 1\n// so i use Id > section numbers to have continuity\nfloat pattern(vec3 p, mat3 m, float s, float id)\n{\n\tfloat r = 0.;\n\tp = abs(fract(p*m*s) - 0.5);\n\tif (id > 3.) r= max(min(abs(p.x),abs(p.z)),abs(p.y));\n    else if (id > 2.) r= max(p.x,abs(p.y)+p.z);\n\telse if (id > 1.) r= length(p);\n    else if (id > 0.) r= max(p.x,-p.y);\n\treturn r;\n}\n\n// redirect dispalce func according to ID\n// here id is from range 0 to 1\n// so i use Id > section numbers to have continuity\nfloat displace(vec3 p, float id)\n{\n\tvec3 a = vec3(0), b = a;\n\tif (id > 3.) a = vec3(-0.32,0.5,.5), b = vec3(0);\n    else if (id > 2.) a = vec3(0.46,0.42,-1.5), b = vec3(0);\n    else if (id > 1.) a = vec3(0.36,0.2,-2.28), b = vec3(0.36,0.24,1.62);\n\telse if (id > 0.) a = vec3(0.62,0.62,-1.02), b = vec3(0);\n        \n    return \n        (1.-min(pattern(p, m1, a.x, id), pattern(p, m2, a.y, id))) * a.z + \n    \t(1.-min(pattern(p, m1, b.x, id), pattern(p, m2, b.y, id))) * b.z;\n}\n\nfloat smin( float a, float b )\n{\n\tfloat k = 1.;\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 map(vec3 p)\n{\n\tp.xy -= path(p.z);\t\t\t\t\t\t\t\t\t\t\t\t\t// tunnel path\n\t\n    // mix from displace of last section id with displace of current section id accroding to id range \n    float r = mix(displace(p, lid), displace(p, cid), fract(cid)); \t// id range [0-1]\n\t\n    p *= getRotZMat(p.z*0.05);\n\t\n    p = mod(p, 10.) - 5.;\n    \n    // tunnel + dispalce\n\treturn vec4(smin(length(p.xz), abs(p.y)+2.) - 1. + r, p);\n}\n\nvec3 nor( vec3 pos, float k)\n{\n\tvec3 eps = vec3( k, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// get density of the df at surfPoint\n// ratio between constant step and df value\nfloat SubDensity(vec3 surfPoint, float prec, float ms) \n{\n\tvec3 n;\n\tfloat s = 0.;\n    const int iter = 8;\n\tfor (int i=0;i<iter;i++)\n\t{\n\t\tn = nor(surfPoint,prec); \n\t\tsurfPoint = surfPoint - n * ms; \n\t\ts += map(surfPoint).x;\n\t}\n\treturn 1.-s/(ms*float(iter)); // s < 0. => inside df\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = nor(p,s); \t\t\t\t\t\t\t// precise normale at surf point\n\treturn map(p - n * s).x;\t\t\t\t\t\t// ratio between df step and constant step\n}\n\n// from shane sahders\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n )\n{\n    n = max((abs(n) - .2)*7., .001);\n    n /= (n.x + n.y + n.z );  \n\tp = (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n    return p*p;\n}\n\n// from shane sahders\n// Texture bump mapping. Four tri-planar lookups, or 12 texture lookups in total. I tried to \n// make it as concise as possible. Whether that translates to speed, or not, I couldn't say.\nvec3 doBumpMap( sampler2D tx, in vec3 p, in vec3 n, float bf)\n{\n    const vec2 e = vec2(0.001, 0);\n    // Three gradient vectors rolled into a matrix, constructed with offset greyscale texture values.    \n    mat3 m = mat3( tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n));\n    vec3 g = vec3(0.299, 0.587, 0.114)*m; // Converting to greyscale.\n    g = (g - dot(tex3D(tx,  p , n), vec3(0.299, 0.587, 0.114)) )/e.x; g -= n*dot(n, g);\n    return normalize( n + g*bf ); // Bumped normal. \"bf\" - bump factor.\n}\n\n// color arangement is what i choose\n// its easy to have another coloration wothout modified the lighting.\n// here is an easy way i choose, but you can do alterate more as you want\n// here id is from range 0 to 1\n// so i use Id > section numbers to have continuity\nvec4 params(vec4 f, float id)\n{\n\tvec4 c = f;\n    if (id > 3.) c = f.zwyw; \n    else if (id > 2.) c = f.zyzw; \n    else if (id > 1.) c = f.yzyx; \n    else if (id > 0.) c = f.xyzw; \n    return c;\n}\n\nvec4 shade(vec3 ro, vec3 rd, float d, vec3 lp)\n{\n\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t\t// surface point\n\tfloat sb = SubDensity(p, 0.001, 0.1);\t\t\t\t\t\t\t// deep subdensity (10 iterations)\n\tvec3 bb = blackbody(100.*sb+100.);\t\t\t\t\t\t\t\t// blackbody color according to the subdensity value\n\tvec3 ld = normalize(lp-p); \t\t\t\t\t\t\t\t\t\t\t// light dir\n\tvec3 n = nor(p, .01);\t\t\t\t\t\t\t\t\t\t\t\t// normal at surface point\n\tn = doBumpMap(iChannel0, -p*0.5, n, 0.015);\t\t\t\t\t// use bumpmap fnc of shane here\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t\t// reflected ray dir at surf point \n\tfloat amb = 0.08; \t\t\t\t\t\t\t\t\t\t\t\t\t// ambiance factor\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\t// diffuse\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 16. ); \t\t// fresnel\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),25.);\t\t// specular\n\tfloat sss = 1. - SubDensity(p*0.1, 5.) * 0.5; \t\t\t\t\t// one step sub density of df\n\treturn vec4(\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// some mix of WTF :) i tried many different things and this i choose :) but maybe there is other things to do\n        (diff + fre + bb.x * sss) * amb + diff * 0.5, \n        (diff + fre + bb * sb + sss * 0.3) * amb + spe * 0.6 - diff * sss * 0.05\t\n    );\n}\n\n// get cam \n// g will be gl_FragCoord.xy or uMouse.xy\n//  si is screensize\nvec3 cam(vec2 g, vec2 si, vec3 ro, vec3 cv)\n{\n\tvec2 uv = (g+g-si)/si.y;\n\tvec3 cu = normalize(vec3(0,1,0) * getRotZMat(ro.z*-0.03));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y= cross(z,x);\n  \treturn normalize(z + uv.x*x + uv.y*y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 f = vec4(0);\n    \n    vec2 g = fragCoord.xy;\n    vec2 si = iResolution.xy;\n    \n    mat3 mx = getRotXMat(-7.);\n\tmat3 my = getRotYMat(-5.);\n\tmat3 mz = getRotZMat(-3.);\n\t\n\t// matrix used by the pattern\n    m1 = mx * my * mz;\n    m2 = m1 * m1;\n\t\n    time = iTime * 8.;\n    \n    vec3 cu = vec3(0,1,0);\t\t\t\t\t\t\t\t\t\t\t// Camera Up\n  \tvec3 cv = vec3(path(time + .1),time + .1); \t\t\t\t\t// Camera View\n    vec3 ro = vec3(path(time),time);\t\t\t\t\t\t\t\t// Camera Origin\n    //ro *= getRotZMat(ro.z*0.05);\n\t//cv *= getRotZMat(ro.z*0.05);\n\t\n\tvec3 lp = vec3(path(ro.z + 7.),ro.z + 7.); \t\t\t\t\t// light point\n    vec3 cp = vec3(path(ro.z + 25.2),ro.z + 25.2); \t\t// center point for Smooth RadClick\n\tvec3 rd = cam(g, si, ro, cv);\t\t\t\t\t\t\t\t\t// Camera Direction\n\n\t// center point for calculate section id accroding to the tunnel path\n\tvec2 rdID = rd.xy - normalize(cp-ro).xy;\n\t\n\trdID = cam(si*0.5, si, ro, cv).xy - normalize(cp-ro).xy;\n\n\t// radial section id\n    float id = 0.;//GetID(rdID); // 0 to 4\n\n    // circular sections id \n    cid = id; \t\t\t\t\t\t\t\t\t// current section id\n\tlid = cid - 1.; \t\t\t\t\t\t\t// last section id\n\tif (lid < 0.) lid = id + sections - 1.;\t// circular \n\t\n\t// Ray Marching\n    float s = 1.;\n    float d = 2.;\n    for(int i=0;i<60;i++)\n    {      \n        if (log(d*d/s/1e5)>0.) break;\n        d += s = map(ro+rd*d).x * .6;\n    }\n\t\n\t// Color\n    f = shade(ro, rd, d, lp);\n\t\n\t// mix Color Arangement according to Radial Section Range \n\t// mix from params of last section id with params of current section id \n\t// according to the range between the two sections with fract(cid) => range 0 to 1\n\tf = mix(params(f, lid), params(f, cid), fract(cid)); // id range [0-1]\n\t\n\t// improve light a little bit\n\tf = f + f.x*0.3;\n\n\t// fog for hide some ray marching artifact cause by the low count iteration (60 here )\n    f = mix( f, vec4(0.8), 1.0-exp( -0.001*d*d ) );\n        \n\t// gamma correction for add some contrast without saturation\n   \tfragColor = sqrt(f*f*f*2.); // gamma correction\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}