{
    "Shader": {
        "info": {
            "date": "1594576980",
            "description": "License CC0: Hextiled back image\nMore experimenting with back images for webpages. This is less demanding than previous one.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttjyDw",
            "likes": 8,
            "name": "Hextiled back image",
            "published": 3,
            "tags": [
                "2d",
                "backimage"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 478
        },
        "renderpass": [
            {
                "code": "// License CC0: Hextiled back image\n// More experimenting with back images for webpages. This is less demanding than previous one.\n//  Code copied from IQ, ollj and others\n    \n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define SCA(a)          vec2(sin(a), cos(a))\n\n// SABS - A very useful function copied from ollj - https://www.shadertoy.com/view/Ws2SDK\n#define LESS(a,b,c)     mix(a,b,step(0.,c))\n#define SABS(x,k)       LESS((.5/k)*x*x+k*.5,abs(x),abs(x)-k)\n\n#define MROT(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n\nuniform float iOffset;\n\nconst mat2 rot120   = MROT(TAU/3.0);\nconst vec2 sz       = vec2(1.0, sqrt(3.0));\nconst vec2 hsz      = 0.5*sz;\nconst vec2 n1       = normalize(sz.yx);\nconst float radius  = 0.5/sqrt(3.0);\nconst vec2 off1     = 2.0*radius*n1;\nconst vec2 off2     = rot120*off1;\nconst vec2 off3     = rot120*off2;\n\nconst vec2 sca0 = SCA(0.0);\n\nfloat hash(in vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat psin(float a) {\n  return 0.5 + 0.5*sin(a);\n}\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// Various distance functions from: https://iquilezles.org/articles/distfunctions2d\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat horseshoe(vec2 p, vec2 c, float r, vec2 w) {\n  p.x = abs(p.x);\n  float l = length(p);\n  p = mat2(-c.x, c.y, c.y, c.x)*p;\n  p = vec2((p.y>0.0)?p.x:l*sign(-c.x),(p.x>0.0)?p.y:l);\n  p = vec2(p.x,abs(p.y-r))-w;\n  return length(max(p,0.0)) + min(0.0,max(p.x,p.y));\n}\n\nfloat letteri(vec2 p) {\n  p.y -= 0.25;\n  return box(p, vec2(0.125, 0.75));\n}\n\nfloat letterm(vec2 p) {\n  p.y = -p.y;\n  float l = horseshoe(p - vec2(+0.5, 0.0), sca0, 0.5, vec2(0.5, 0.1));\n  float r = horseshoe(p - vec2(-0.5, 0.0), sca0, 0.5, vec2(0.5, 0.1));\n  return min(l, r);\n}\n\nfloat letterp(vec2 p) {\n  float b = box(p - vec2(-0.45, -0.25), vec2(0.1, 0.75));\n  float c = max(circle(p, 0.5), -circle(p, 0.3));\n  return min(b, c);\n}\n\nfloat letteru(vec2 p) {\n  return horseshoe(p - vec2(0.0, 0.125), sca0, 0.5, vec2(0.375, 0.1));\n}\n\nfloat letterl(vec2 p) {\n  return box(p, vec2(0.125, 0.5));\n}\n\nfloat letters(vec2 p) {\n  rot(p, -PI/6.0);\n  rot(p, -PI/2.0);\n  float u = horseshoe(p - vec2(-0.25*3.0/4.0, -0.125/2.0), sca0, 0.375, vec2(0.2, 0.1)) - 0.0;\n  rot(p, PI);\n  float l = horseshoe(p - vec2(-0.25*3.0/4.0, -0.125/2.0), sca0, 0.375, vec2(0.2, 0.1));\n  return min(u,l);\n}\n\nfloat lettere(vec2 p) {\n  return min(box(p, vec2(0.4, 0.1)), max(circle(p, 0.5), -circle(p, 0.3)));\n}\n\nfloat impulse(vec2 p) {\n  p.x += 0.6;\n  const float oi = -3.00;\n  const float om = -1.65;\n  const float op = +0.10;\n  const float ou = +1.25;\n  const float ol = +2.10;\n  const float os = +2.80;\n  const float oe = +3.85;\n  float di = letteri(p - vec2(oi, 0.0));\n  float dm = letterm(p - vec2(om, 0.0));\n  float dp = letterp(p - vec2(op, 0.0));\n  float du = letteru(p - vec2(ou, 0.0));\n  float dl = letterl(p - vec2(ol, 0.0));\n  float ds = letters(p - vec2(os, 0.0));\n  float de = lettere(p - vec2(oe, 0.0));\n  float oo = 0.1;\n  float dx = abs(p.y) - oo;\n  dx = abs(dx) - oo*0.5;\n  float d = 1E6;\n  d = min(d, di);\n  d = min(d, dm);\n  d = min(d, dp);\n  d = min(d, du);\n  d = min(d, dl);\n  d = min(d, ds);\n  d = min(d, de);\n  d = max(d, -dx);\n\n  return d;\n}\n\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz*1.0, sz)-hsz;\n  vec2 p3 = mix(p2, p1, vec2(length(p1) < length(p2)));\n  vec2 n = p3 - p;\n  p = p3;\n\n  return n;\n}\n\nfloat cell(vec2 p) {\n  float d0 = circle(p-off1, radius);\n  float d1 = circle(p-off2, radius);\n  float d2 = circle(p-off3, radius);\n   \n  float d = d0;\n  d = min(d, d1);\n  d = min(d, d2);\n  \n  return d;\n}\n\nfloat tnoise(vec2 p) {\n  const float width = 0.125;\n\n  vec2 nn = hextile(p);\n  nn = round(nn*10.0);\n  float r1 = hash(nn);\n  rot(p, floor(r1*6.0)* TAU/6.0);\n\n  float d = cell(p);\n  d = abs(d) - width;\n   \n  float r = clamp((-d+0.0125)/width, 0.0, 1.0);\n  float h = r*r*r*(r*(r*6.0-15.0)+10.0);\n\n  return h;\n}\n\nfloat warp(vec2 p, vec2 q) {\n  // The result of lot of experimenting and very little thought\n  q = -1.0 + 2.0*q;\n  float l = 1.0-1.0*length(q)/sqrt(2.0);\n  vec2 o = 10.75*normalize(vec2(1.0, 1.0));\n  rot(o, TIME*0.001);\n  p *= 0.25;\n  vec2 v = l*vec2(tnoise(p), tnoise(p+o));\n  rot(v, 1.0+TIME*0.075);\n  v = SABS(v, vec2(0.1));\n  return 0.75*(0.5 + 0.5*tanh(atan(v.y, v.x)));\n}\n\nfloat height(vec2 p, vec2 q) {\n  float a = 0.005*TIME;\n  p += 5.0*vec2(cos(a), sin(sqrt(0.5)*a));\n  return warp(p, q);\n}\n\nvec3 normal(vec2 p, vec2 q) {\n  // As suggested by IQ, thanks!\n  vec2 eps = -vec2(2.0/RESOLUTION.y, 0.0);\n\n  vec3 n;\n\n  n.x = height(p + eps.xy, q) - height(p - eps.xy, q);\n  n.y = 2.0*eps.x;\n  n.z = height(p + eps.yx, q) - height(p - eps.yx, q);\n\n  return normalize(n);\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(0.75));\n  col=col*0.6+0.4*col*col*(3.0-2.0*col);\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nfloat df(vec2 p) {\n  p *= 3.0;\n  float d = impulse(p);\n  return d;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  const vec3 lp1 = vec3(0.8, -0.75, 0.8);\n  const vec3 lp2 = vec3(-0., -1.5, -1.0);\n  const vec3 eye = vec3(0.0, -2.0, 0.0);\n\n  float aa = 8.0/RESOLUTION.y;\n\n  vec3 col = vec3(0.0);\n  float h = height(p, q);\n  vec3 pp = vec3(p.x, h, p.y);\n  vec3 ld1 = normalize(lp1 - pp);\n  vec3 ld2 = normalize(lp2 - pp);\n  vec3 ed = normalize(eye - pp);\n\n  float off = iOffset;\n\n  vec2 bp = p;\n  vec2 lp = p;\n  bp.y += 0.5*off;\n  lp.y += off;\n\n  vec3 n = normal(bp, q);\n  float diff1 = max(dot(ld1, n), 0.0);\n  float diff2 = max(dot(ld2, n), 0.0);\n  float spe1 = max(dot(reflect(-ld1, n), ed), 0.0);\n  float spe2 = max(dot(reflect(-ld2, n), ed), 0.0);\n  const vec3 baseCol1 = vec3(0.6, 0.8, 1.0);\n  const vec3 baseCol2 = sqrt(baseCol1.zyx);\n\n  col += baseCol1*pow(diff1, 16.0);\n  col += 0.1*baseCol1*pow(diff1, 4.0);\n  col += 0.15*baseCol2*pow(diff2,8.0);\n  col += 0.015*baseCol2*pow(diff2, 2.0);\n  col += pow(spe1, 50.0)*sqrt(baseCol1)*1.0;\n  col += pow(spe2, 25.0)*sqrt(baseCol2)*1.0;\n\n  col = clamp(col, 0.0, 1.0);\n  col = mix(0.05*baseCol1, col, 1.0 - (1.0 - 0.5*diff1)*exp(- 2.0*smoothstep(-.1, 0.05, (h))));\n\n  float d = df(lp);\n  float bd = abs(d - 0.03) - 0.015;\n\n  float shd = pow(psin(-0.25*TIME+(lp.x-lp.y)*1.5), 4.0);\n  col += 1.0*baseCol1*(exp(-20.0*bd))*shd;\n  col += 0.5*baseCol1*(exp(-1.0*bd))*shd;\n  col -= 0.125*vec3(1.0)*(exp(-2.5*d));\n  col = clamp(col, 0.0, 1.0);\n\n  const float fadeIn = 6.0;\n  col *= smoothstep(0.0, fadeIn*fadeIn, TIME*TIME);\n\n  col = mix(col, vec3(1.0), smoothstep(0.0, aa, -d));\n\n  col = postProcess(col, q);\n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}