{
    "Shader": {
        "info": {
            "date": "1608463083",
            "description": "interested to see a better or more readable method, but really, I'll be using this as a template in the future.\n\nwanted to make an ez uv template for center justified stuff",
            "flags": 0,
            "hasliked": 0,
            "id": "tt3cz8",
            "likes": 0,
            "name": "Reactive, Center justified UV",
            "published": 3,
            "tags": [
                "example",
                "template"
            ],
            "usePreview": 0,
            "username": "jackwitherell",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    bool aspect = iResolution.x>iResolution.y;\n    float maximum = max(iResolution.x,iResolution.y);\n    float minimum = min(iResolution.x,iResolution.y);\n    vec2 uv = (fragCoord/minimum)\n              -(vec2(fract(maximum/minimum),fract(maximum/minimum))\n               *vec2(aspect,!aspect)/2.0)\n              -0.5;\n    uv*=2.0;\n    \n    //uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(uv,0.0); // show uv like a vector\n    \n    if(length(uv)<1.0 && length(uv)>0.985){ //show circle\n        col = vec3(1.0);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}