{
    "Shader": {
        "info": {
            "date": "1655170960",
            "description": "show house v2",
            "flags": 0,
            "hasliked": 0,
            "id": "7dycRK",
            "likes": 6,
            "name": "show house v2",
            "published": 3,
            "tags": [
                "showhousev2"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "//----------image\n//por jorge2017a2-\n//show house- v2-13-jun-2022\n//referencia\n//https://iquilezles.org/articles/distfunctions/\n#define MAX_STEPS 100\n#define MAX_DIST 110.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n#define Kd 0.4\n#define PI 3.14159265\n\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//operacion de Union  por FabriceNeyret2\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat Intersect(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Union(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Difference(float distA, float distB)\n\t{ return max(distA, -distB);}\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n { float c = cos(phi);float s = sin(phi); return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);}\nvec3 rotate_y(vec3 p, float phi)\n { float c = cos(phi);float s = sin(phi);\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);}\nvec3 rotate_z(vec3 p, float phi)\n {float c = cos(phi); float s = sin(phi);return vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);}\n\nvec2 techoInclinadoA(vec3 p)\n{  vec2 res= vec2(9999.0, -1.0);\n    p.y-=9.0; vec3 p0=p;\n    vec3 p1= rotate_z(p, radians(45.0));\n    float d1a= sdBox(p1,vec3(10.0,10.0,5.5) );  //techo triangulo\n    float d1b= sdBox(p-vec3(0.0,-10.0,0.),vec3(14.0,10.0,7.0) );\n    d1a= Difference(d1a, d1b);\n    res =opU2(res, vec2(d1a,9.0));\n    return res;\n}\n\nvec2 casa01(vec3 p)\n{\tvec2 res= vec2(9999.0, -1.0);  vec3 p0=p;\n     p.y=p.y-12.0;\n    float d1a= sdBox( p, vec3(12.0,10.0,5.0) );\n    float d1b= sdBox( p-vec3(0.0,-5.0,-5.0), vec3(3.5,5.0,1.0) ); //puerta-marco\n    float d1c= sdBox( p-vec3(0.0,-5.25,-5.0), vec3(3.0,5.0,1.5) ); //puerta\n    float d1d= sdBox( p-vec3(0.0,-5.25,-5.0), vec3(3.0,5.0,0.5) ); //fondo puerta\n    d1a= Difference(d1a, d1c);//hueco casa\n    d1b= Difference(d1b, d1c); //puerta\n    vec2 ti1 =techoInclinadoA(p);\n    res =opU2(res, vec2(d1a,1.0));\n    res =opU2(res, vec2(d1b,8.0));\n    res =opU2(res, vec2(d1d,7.0));\n    res =opU2(res, ti1);\n    return res;\n}\n\nvec2 opScaleCasa02( vec3 p, vec3 s, int opc)\n{\tvec2 res= vec2(9999.0, -1.0);  \n    vec2 c1= casa01(p/s);\n    if (opc==1) c1.x*=s.x;\n    if (opc==2) c1.x*=s.y;\n    if (opc==3) c1.x*=s.z;    \n    res =opU2(res, c1);\n    return res;\n}\n\nvec2 GetDist(vec3 p  ) \n{  vec2 res= vec2(9999.0, -1.0);  vec3 p0=p;\n   p.x=opRep1D( p.x, 42.0 );\n   p.z=opRep1D( p.z, 30.0 );\n   \n   \n   float d1= sdBox( p-vec3(0.0,0.0,0.0), vec3(25.0,3.0,10.0) );\n   \n   p.x=abs(p.x)-15.0;\n   vec2 c1= opScaleCasa02(p,vec3(0.35,1.25,1.0),1);\n   vec2 c2= opScaleCasa02(p0,vec3(0.75,0.8,1.0),1);\n   vec2 c3= opScaleCasa02(p0-vec3(0.0,20.0,0.0),vec3(0.45,0.8,0.8),1);\n   res =opU2(res, c1);\n   res =opU2(res, c2);\n   res =opU2(res, c3);\n   res =opU2(res, vec2(d1,57.0));\n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec3 pallete(float t) {\n    vec3 a = vec3(0.2);vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);vec3 d = vec3(0.0, 0.33, 0.67);\n    return a + b * cos(6.28318 * (c*t + d));\n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n    vec3 V = -rd;\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n\n    float shadow = getSoftShadow(worldPos, L);// shadows\n        \n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.7,.9,1)*specular*specular;\n    return colOut;\n}\n\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n}\n\n//https://www.shadertoy.com/view/4lcSRn   ///IQ\nvec3 pattern( in vec2 uv )\n{   vec3 col = vec3(0.4);\n    col += 0.4*smoothstep(-0.01,0.02,cos(uv.x*0.5)*cos(uv.y*0.5)); \n    col *= smoothstep(-1.0,-0.98,cos(uv.x))*smoothstep(-1.0,-0.98,cos(uv.y));\n    return col;\n}\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n    if (id_color==0)  { colobj=vec3(0,0,0);  return colobj; }\n    if (id_color==1)  { colobj=vec3(1.,1.,1.);  return colobj; }\n    if (id_color==2)  { colobj=vec3(1,0,0);  return colobj; }\n    if (id_color==3)  { colobj=vec3(0,1,0);  return colobj; }\n    if (id_color==4)  { colobj=vec3(0,0,1);  return colobj; }\n    if (id_color==5)  { colobj=vec3(1,1,0);  return colobj; }\n    if (id_color==6)  { colobj=vec3(0,1,1);  return colobj; } \n    if (id_color==7)  { colobj=vec3(1,0,1);  return colobj; }\n    if (id_color==8)  { colobj=vec3(0.7529,0.7529,0.7529);  return colobj; }\n    if (id_color==9)  { colobj=vec3(0.5,0.5,0.5);  return colobj; }\n    if (id_color==10) { colobj=vec3(0.5,0,0);  return colobj; }\n      if (id_color==57) {return pattern( p.xz );}\n      \n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       {   p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n         result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        col= result/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n        \n        \n    }\n    else if(hit.x>MAX_DIST)\n    col= render_sky_color(rd);\n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t;\n    t=22.0*abs(sin(iTime*0.5));\n \tlight_pos1= vec3(-10.0, 120.0, -25.+t); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(10.0, 20.0, 55.0 +t); light_color2 =vec3(0.5 ); \n   vec3 ro=vec3(0.0,12.0,-40.0);\n   ro.y+=t;\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n   light_pos1+=ro;\n   light_pos2+=ro;\n    vec3 col= Render( ro,  rd);    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}