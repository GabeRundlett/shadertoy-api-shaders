{
    "Shader": {
        "info": {
            "date": "1577931393",
            "description": "Wanted to make a stair sdf thing. ",
            "flags": 0,
            "hasliked": 0,
            "id": "ttcGWs",
            "likes": 4,
            "name": "Just sum stairs",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "color",
                "stars",
                "stairs"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 374
        },
        "renderpass": [
            {
                "code": "// Plento\nvec2 R;\nconst float pi = 3.14159;\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n#define s iTime*3.8\n\n// The stairs sdf\nfloat map(vec3 rp){\n    //float k = floor(rp.x*.75)*.25;\n    rp.yz += s;\n    return min(rp.y - floor(rp.z), 1.- (rp.z - floor(rp.y)));\n}\n\n\n\nvec3 normal( in vec3 pos ){ // Can def get rid of this\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\nfloat march(vec3 rd, vec3 ro){\n \tfloat t = 0., d = 0.;   \n    \n    for(int i = 0; i < 44; i++){\n    \td = map(ro + rd*t); \t   \n        \n        if(abs(d) < .005 || t > 64.){\n            break;\n        }\n        \n        t += d * .75;\n    }\n    \n    return t;\n}\n\n// Color the stairs and also fake the staircase width\nvec3 render(vec3 ro, vec3 rd, vec3 n, vec2 u, float t){\n    vec3 lp = ro + vec3(0., .016, -.7);\n    vec3 ld = lp-ro;\n   \n    float dif = max(dot(n, ld), .0);\n    vec3 col = vec3(0);\n    \n    \n    ro.yz+=s;\n    ro.x*=.5;\n    \n    float c = smoothstep(0.1, 0.15, sin(ro.x*4.));\n    vec3 cc = .4 + .34*cos(2.*pi*(vec3(0.7, 4.8, 0.5)*floor(ro.z)));\n    \n    col = mix(vec3(.0), cc, c)*dif;\n    col = mix(vec3(0), col,  smoothstep(9.9, 10.1, 30./abs(ro.x-4.33)));\n    \n\treturn col;   \n}\n\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    \n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 ro = vec3(0.5,6.6 , -6.);\n    \n    rd.yz*=rot(.4);\n    rd.xz*=rot(-.75);\n    \n    float t = march(rd, ro);\n    \n    ro += rd*t;\n    \n    vec3 n = normal(ro);\n    vec3 col = render(ro, rd, n, u, t);\n    \n    col*=smoothstep(.52, .2, uv.y);\n    f = vec4(sqrt(clamp(col, .0, 1.)), 1.);\n    \n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}