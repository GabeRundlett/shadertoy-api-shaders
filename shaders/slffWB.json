{
    "Shader": {
        "info": {
            "date": "1651391689",
            "description": "math",
            "flags": 0,
            "hasliked": 0,
            "id": "slffWB",
            "likes": 0,
            "name": "paintingWithMath",
            "published": 3,
            "tags": [
                "math"
            ],
            "usePreview": 0,
            "username": "Ron1Adi",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "\nfloat map( in vec3 pos )\n    {\n      float d1 = length(pos) - 0.25;\n      \n      float d2 = pos.y - (-0.25);\n      return min(d1, d2);\n    }\n    \nvec3 calcNormal( in vec3 pos )\n{\n  vec2 e = vec2(0.0001, 0.0);\n  return normalize(vec3(map(pos+e.xyy)-map(pos-e.xyy),\n                        map(pos+e.yxy)-map(pos-e.yxy),\n                        map(pos+e.yyx)-map(pos-e.yyx) ) );\n}\n\nfloat castRay( in vec3 ro, vec3 rd )\n{\n    float t = 0.0;\n    for(int i=0; i<100; i++)\n      {\n        vec3 pos = ro + t*rd;\n        float h = map(pos);\n        if( h<0.001 )\n            break;\n        t += h;\n        if( t>20.0 )\n            break;\n      }\n      if( t>20.0 ) t=-1.0;\n      return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float an = 10.0*iMouse.x/iResolution.x; //0.1*iTime;\n    \n    vec3 ro= vec3(1.0*sin(an), 0.0, 1.0*cos(an));\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n    \n    vec3 ww = normalize( ta-ro );\n    vec3 uu = normalize( cross( ww, vec3(0,1,0)));\n    vec3 vv = normalize( cross( uu, ww) );\n    \n    vec3 rd= normalize( p.x*uu + p.y*vv + 1.5*ww);\n\n    //float f = smoothstep( 0.25, 0.26, length(p) );\n    vec3 col = vec3(0.4, 0.75, 1.0) - 0.7*rd.y;\n    col = mix(col, vec3(0.7, 0.75, 0.8), exp(-10.0*rd.y) );\n    \n    float t = castRay( ro, rd );\n      \n      if( t>0.0 )\n      {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        \n        vec3 mate = vec3(0.18);\n        \n        vec3 sun_dir = normalize(vec3(0.8, 0.4, 0.2) );\n        float sun_dif = clamp(dot(nor, sun_dir), 0.0, 1.0);\n        float sun_sha = step(castRay( pos+nor*0.001, sun_dir ), 0.0 );\n        float sky_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.0, 1.0, 0.0) ), 0.0, 1.0);\n        float bou_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.0, -1.0, 0.0) ), 0.0, 1.0);\n        \n        col = mate*vec3(7.0, 4.5, 3.0)*sun_dif*sun_sha;  //nor.zzz;\n        col += mate*vec3(0.5, 0.8, 0.9)*sky_dif;\n        col += mate*vec3(0.7, 0.3, 0.2)*bou_dif;\n      }\n\n    col = pow(col, vec3(0.4545) );\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}