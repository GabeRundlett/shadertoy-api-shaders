{
    "Shader": {
        "info": {
            "date": "1636347753",
            "description": "These patterns resemble Persian carpets.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nl3Gz2",
            "likes": 3,
            "name": "Persian carpet 12",
            "published": 3,
            "tags": [
                "fractal",
                "carpet",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 243
        },
        "renderpass": [
            {
                "code": "//change these constants to get different patterns!\n#define c2 0.0\n\n#define c1 vec4(3.0+c2,2.5+c2,1.5,0)\n//#define c1 vec4(2.0+c2,1.5+c2,1.4,0)\n//#define c1 vec4(1.0,1.5,1.4,0)\n//#define c1 vec4(7.0,5.0,1.4,0)\n//#define c1 vec4(7.0,9.0,1.4,0)\n//#define c1 vec4(5.0,5.5,1.4,0)\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n    //from David Hoskin's \"Hash without sine\"\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+c1.xy)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    \n\n    \n    vec3 col;  \n    float t1 = 4.5;\n\n    vec2 uv = (fragCoord-iResolution.xy)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    //vec3 random1 = hash31(floor((iTime)/10.0+uv.x))*10.*.0;\n    //vec3 random2 = hash31(1.+floor((iTime)/10.0+uv.x));\n    float t2 = floor((iTime)/20.0+uv.x);\n    vec3 random1 = (hash31(1.+t2)-vec3(.5))/4.;\n    vec3 random2 = (hash31(1.+t2)-vec3(.5))/4.;\n    vec3 random3 = (hash31(2.+t2)-vec3(.5))/4.;\n    vec3 random4 = (hash31(3.+t2)-vec3(.5))/4.;\n    \n    float offset = .5;\n    float scale2 = 1.5;\n    for(int c=0;c<3;c++){\n        float scale = c1.z;\n        //float scale1 = 1.0;\n        for(int i=0;i<3;i++)\n        {\n            vec3 col_prev = col; \n            //float factor = 1.16;\n            //uv.y *= factor;\n\n            uv = triangle_wave(uv.yx-offset,scale)+triangle_wave(uv,scale);\n            for(int k = 0; k < 3; k++){\n                uv.y /= scale2;\n                //uv.y /= scale2-uv.x/2.;\n                uv = triangle_wave((uv-random2[k])/(random4[k]+1.),scale+random3[k]);\n                uv.x /= -scale2;\n                //uv.x /= -scale2-uv.y/2.;\n            }\n            //uv.x *= factor;\n            \n            //uv.x *= -1.0;\n            //uv = triangle_wave(uv+c1.y,scale);\n            scale /= 1.+scale2*col.x;\n            //offset *= scale2/(1.+random4.x);\n            \n            //uv = -uv.yx;\n            //uv = uv.yx;\n            //scale2 *= 1.25 + col.x;\n            //scale2 += col.x/8.;\n            scale2 = 1./(1.+col.x);\n            //col = (col*random1[i]+col_prev.yzx*(1.-random1[i]));\n            col[c] = fract((uv.x)-(uv.y));\n            //col[c] = abs(-col[c]-uv.x+uv.y);\n\n        }\n\t}\n    \n    fragColor = vec4(vec3(col),1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}