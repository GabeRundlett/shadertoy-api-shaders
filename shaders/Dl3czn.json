{
    "Shader": {
        "info": {
            "date": "1698800295",
            "description": "Pretty straightforward mandelbrot shader",
            "flags": 0,
            "hasliked": 0,
            "id": "Dl3czn",
            "likes": 2,
            "name": "Coloring-Book Mandelbrot",
            "published": 3,
            "tags": [
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "jackjackdev",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "// Coloring-Book Mandelbrot\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize to [0,1]\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Add some movement over time\n    float zoom = .10 + 0.35*sin(0.5);\n    vec2 move = vec2(sin(0.2)*0.5, cos(0.3)*0.5);\n\n    // Adjust the coordinates for the Mandelbrot set\n    vec2 c = (uv * vec2(3.5, 2.0)*zoom - vec2(2.5, 1.0) + move);\n    vec2 z = vec2(0.0);\n    float n = 0.0;\n    for (int i = 0; i < 100; i++) {\n        if (dot(z, z) > 4.0) break;\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n        n++;\n    }\n\n    // Convert iteration number to color with more blue emphasis\n    float hue = 1.+  15.*sin(iTime*.5 + n); \n    float saturation = pow(abs(sin(iTime + n * 1.1)), 1.0);\n    float value = (step(0.02, fract(n)));\n\n    fragColor = vec4(vec3(hue, saturation, value)*0.9, 1.0) + vec4(0.0, 0.0, value, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}