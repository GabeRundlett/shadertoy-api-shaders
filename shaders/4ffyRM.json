{
    "Shader": {
        "info": {
            "date": "1721147921",
            "description": "diffusion",
            "flags": 48,
            "hasliked": 0,
            "id": "4ffyRM",
            "likes": 3,
            "name": "GrayScott_UI",
            "published": 3,
            "tags": [
                "grayscott"
            ],
            "usePreview": 0,
            "username": "kosalos",
            "viewed": 127
        },
        "renderpass": [
            {
                "code": "// Use the Mouse to draw walls.\n//\n// Keyboard Commands:\n//\n// <Q>,<W> alter Feed Rate\n// <A>,<S> alter Kill Rate\n// <Z>,<X> alter Diffusion rate A\n// <E>,<R> alter Diffusion rate B\n// <D>,<F> alter Scale\n//\n// <Return> Reset everything \n// <Space>  Reset just the Population\n//--------------------------------------------------------------\n\nvoid displaySettings(inout vec4 fragColor, in vec2 fragCoord,int offset) {\n    if(fragCoord.x > iResolution.x * 0.6) return; // no printing in that region\n    if(fragCoord.y < iResolution.y * 0.5) return;\n\n    Font f;\n    setFont(f,iChannelResolution[3].xy / vec2(16, 16),iChannelResolution[3].xy);\n\n    TextCursor t;\n    const vec2 charScale = vec2(30,30);\n    t.startPos = vec2(0, iResolution.y);\n    t.coord = ivec2(0.);\n    t.font = f;\n    t.color = vec4(1.);\n    t.charSize = charScale;\n    t.charSpace = vec2(0.8,0.9) * charScale;\n    t.pageWidth = int(iResolution.x / t.charSize.x);\n    t.fragCoord = fragCoord;\n    \n    if(offset == 1) {\n     t.color.xyz = vec3(0.);\n     t.fragCoord += vec2(-2.,3.);\n    }\n    \n    String str;\n    setString(str,14,(cQ,cW,cSp,cF,ce,ce,cd,cr,ca,ct,ce,cSp,cSp,cSp));\n    printString(str,t);\n    printFloat(qFeedRate,t);\n    newlineCursor(t);\n    \n    setString(str,14, (cA,cS,cSp,cK,ci,cl,cl,cr,ca,ct,ce,cSp,cSp,cSp));\n    printString(str,t);\n    printFloat(qKillRate,t);\n    newlineCursor(t);\n    t.fragCoord += vec2(0.,10.);\n\n    setString(str,14, (cZ,cX,cSp,cD,ci,cf,cf,cu,cs,ci,co,cn,cA,cSp));\n    printString(str,t);\n    printFloat(qDiffusionRateA,t);\n    newlineCursor(t);\n    \n    setString(str,14, (cE,cR,cSp,cD,ci,cf,cf,cu,cs,ci,co,cn,cB,cSp));\n    printString(str,t);\n    printFloat(qDiffusionRateB,t);\n    newlineCursor(t);\n    t.fragCoord += vec2(0.,10.);\n\n    setString(str,14, (cD,cF,cSp,cS,cc,ca,cl,ce,cSp,cSp,cSp,cSp,cSp,cSp));\n    printString(str,t);\n    printFloat(qScale,t);\n    newlineCursor(t);\n\n    drawText(t, iChannel2, fragColor);\n}\n\n\n// ----------------------------------------------------------\n// coloring:  https://www.shadertoy.com/view/ls2Bz1\n\nfloat saturate (float x) { return min(1.0, max(0.0,x)); }\nvec3 saturate (vec3 x) { return min(vec3(1.,1.,1.), max(vec3(0.,0.,0.),x)); }\n\nvec3 bump3y (vec3 x, vec3 yoffset) {\n\tvec3 y = vec3(1.,1.,1.) - x * x;\n\ty = saturate(y-yoffset);\n\treturn y;\n}\n\nvec3 spectral_zucconi (float w) {\n    // w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\n\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\n\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\n\n\treturn bump3y (\tcs * (x - xs), ys);\n}\n\n// ----------------------------------------------------------\n\nvoid drawGrid(inout vec4 fragColor,in vec2 fragCoord) {\n    // screen coord -> grid\n    fragCoord /= iResolution.xy;  // 0 ... 1\n    ivec2 addr = ivec2(int(float(GRIDX) * fragCoord.x),int(float(GRIDY) * fragCoord.y));\n\n    vec4 data = fetchData(iChannel0, addr);\n    \n    fragColor.xyz = vec3(0.);\n    if(data.x != WALL) \n        fragColor.xyz = spectral_zucconi(fract(data.x) * 300. + 400.);\n}\n\n// ---------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    drawGrid(fragColor,fragCoord);\n    \n    getSettings(iChannel0);\n    if(iFrame - int(qFrame) < 20) {\n        displaySettings(fragColor,fragCoord,1);\n        displaySettings(fragColor,fragCoord,0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void saveSettings(inout vec4 fragColor,vec2 fragCoord) {\n    for(int i=0;i<ADDR_COUNT;++i)\n        if(storeDataAddr(fragCoord, addrList[i])) {\n            fragColor.xyz = q[i];\n            return;\n        }\n}\n\n// ----------------------------------------------------------\n\nconst float RNDCHANCE = 0.01;\nconst float YSTART = 0.83;\n\nvoid resetDiffusion(inout vec4 color,vec2 coord) {\n    ivec2 adr = ivec2(coord);\n    if(adr.x < GRIDX && adr.y < GRIDY) {\n        if(color.x != WALL) {\n            color.x = 1.; \n            color.y = (rndStart(coord,iTime) < RNDCHANCE) ? YSTART : 0.;\n        }\n    }\n}\n\nvoid reset(inout vec4 color,vec2 coord) {\n    ivec2 adr = ivec2(coord);\n    if(adr.x < GRIDX && adr.y < GRIDY) {\n        color.x = 1.;\n        color.y = (rndStart(coord,iTime) < RNDCHANCE) ? YSTART : 0.;\n    }\n}\n\n// ----------------------------------------------------------\n\n#define hk 0.004\n#define adjacentWeight 0.2\n#define diagonalWeight (adjacentWeight / 1.414)\n#define centerWeight -(adjacentWeight * 4.0 + diagonalWeight * 4.0 + hk * 2.0)\n\nfloat cellV1(int x, int y, int ix, int iy) {\n    float v = texelFetch(iChannel0,ivec2(ix,iy),0).x;\n\tif (v < WALL) return v;\n    \n    return texelFetch(iChannel0,ivec2(x,y),0).x;\n}\n\nfloat cellV2(int x, int y, int ix, int iy) {\n    float v = texelFetch(iChannel0,ivec2(ix,iy),0).y;\n\tif (v < WALL) return v;\n    \n    return texelFetch(iChannel0,ivec2(x,y),0).y;\n}\n\nvoid evolveCell(inout vec4 color, vec2 coord) {\n    ivec2 adr = ivec2(coord);\n    vec4 cell = texelFetch(iChannel0,adr,0); \n    float a = cell.x;\n    float b = cell.y;\n\n    color.z = a;\n    color.w = b;\n\n    if (a != WALL) {\n        float k = qKillRate + qKillRate * a / 100.0;\n        float f = qFeedRate + qFeedRate * a / 100.0;\n\n        // ------------------------------------------------------------\n        // neighboring pixels, wrapping around edges\n        int xp = (GRIDX + adr.x - 1) % GRIDX;\n        int xn = (GRIDX + adr.x + 1) % GRIDX;\n        int yp = (GRIDY + adr.y - 1) % GRIDY;\n        int yn = (GRIDY + adr.y + 1) % GRIDY;\n\n        // A diffusion\n        float dda = a * centerWeight;\n        dda += cellV1(adr.x, adr.y, xn, yn) * diagonalWeight;\n        dda += cellV1(adr.x, adr.y, xp, yn) * diagonalWeight;\n        dda += cellV1(adr.x, adr.y, xn, yp) * diagonalWeight;\n        dda += cellV1(adr.x, adr.y, xp, yp) * diagonalWeight;\n        dda += cellV1(adr.x, adr.y, adr.x, yn) * adjacentWeight;\n        dda += cellV1(adr.x, adr.y, adr.x, yp) * adjacentWeight;\n        dda += cellV1(adr.x, adr.y, xn, adr.y) * adjacentWeight + hk;\n        dda += cellV1(adr.x, adr.y, xp, adr.y) * adjacentWeight + hk;\n\n        // B diffusion\n        float ddb = b * centerWeight;\n        ddb += cellV2(adr.x, adr.y, xn, yn) * diagonalWeight;\n        ddb += cellV2(adr.x, adr.y, xp, yn) * diagonalWeight;\n        ddb += cellV2(adr.x, adr.y, xn, yp) * diagonalWeight;\n        ddb += cellV2(adr.x, adr.y, xp, yp) * diagonalWeight;\n        ddb += cellV2(adr.x, adr.y, adr.x, yn) * adjacentWeight;\n        ddb += cellV2(adr.x, adr.y, adr.x, yp) * adjacentWeight;\n        ddb += cellV2(adr.x, adr.y, xn, adr.y) * adjacentWeight + hk;\n        ddb += cellV2(adr.x, adr.y, xp, adr.y) * adjacentWeight + hk;\n\n        // reaction diffusion formula\n        float da = qDiffusionRateA * dda - a * b * b + f * (1.0 - a);\n        float db = qDiffusionRateB * ddb + a * b * b - (f + k) * b;\n\n\t\tcolor.z = a + da * qScale;\n\t\tcolor.w = b + db * qScale;\n\t}\n}\n\n// ----------------------------------------------------------\n\nbool keyClick(int ascii,sampler2D channel) {\n\treturn (texture(channel,vec2((.5+float(ascii))/256.,0.25)).x > 0.);\n}\n\nbool getKeyState(int keyCode,sampler2D channel) {\n    bool keyPressed = bool(texelFetch(channel, ivec2(keyCode,0), 0).x != 0.);\n    if(keyPressed) qFrame = float(iFrame);\n    return keyPressed;\n}\n\n// ----------------------------------------------------------\n\nvoid wallPixel(vec2 base, int x,int y,inout vec4 fragColor, vec2 fragCoord) {\n    ivec2 adr = ivec2(int(base.x)+x,int(base.y)+y);\n    if(storeDataAddr(fragCoord,adr)) fragColor.x = WALL;\n}\n\n// ----------------------------------------------------------\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if((iFrame < 2 || keyClick(13,iChannel3)) && (iFrame & 1) == 1) { // coldstart or <Return>\n        qFeedRate = 0.02;\n        qKillRate = 0.079;\n        qDiffusionRateA = 1.1010;\n        qDiffusionRateB = 0.4;\n        qScale = 0.79;\n        saveSettings(fragColor,fragCoord);\n        reset(fragColor,fragCoord);\n        return;\n    }\n    \n    getSettings(iChannel0); \n    fragColor = fetchData(iChannel0, ivec2(fragCoord));\n\n    if(keyClick(32,iChannel3)) { // <Space>\n        resetDiffusion(fragColor,fragCoord);\n        return;\n    }\n    \n    if(fragCoord.x < float(GRIDX) && fragCoord.y < float(GRIDY)) {\n        if((iFrame & 1) == 1) \n            fragColor.xy = fragColor.zw;\n        else\n            evolveCell(fragColor,fragCoord);     \n    }\n    \n    // adding walls ------------------------------------\n    if(iMouse.z > 0.) {     // mouse down or dragged\n        vec2 mPos = vec2(GRIDX,GRIDY) * iMouse.xy / iResolution.xy; // mouse as grid position\n        for(int x=-3;x<=3;++x)\n            for(int y=-3;y<=3;++y)\n                wallPixel(mPos,x,y,fragColor,fragCoord);\n    }\n    \n    // -----------------------------------------------------------------------------------\n    if(getKeyState(81,iChannel3)) qFeedRate = clamp(qFeedRate - 0.001,0.01,0.2); // Q\n    if(getKeyState(87,iChannel3)) qFeedRate = clamp(qFeedRate + 0.001,0.01,0.2); // W\n    if(getKeyState(65,iChannel3)) qKillRate = clamp(qKillRate - 0.001,0.01,0.2); // A\n    if(getKeyState(83,iChannel3)) qKillRate = clamp(qKillRate + 0.001,0.01,0.2); // S\n    if(getKeyState(90,iChannel3)) qDiffusionRateA = clamp(qDiffusionRateA - 0.001,0.1,1.3); // Z\n    if(getKeyState(88,iChannel3)) qDiffusionRateA = clamp(qDiffusionRateA + 0.001,0.1,1.3); // X\n    if(getKeyState(69,iChannel3)) qDiffusionRateB = clamp(qDiffusionRateB - 0.001,0.1,1.3); // E\n    if(getKeyState(82,iChannel3)) qDiffusionRateB = clamp(qDiffusionRateB + 0.001,0.1,1.3); // R\n    if(getKeyState(68,iChannel3)) qScale = clamp(qScale - 0.01,0.01,10.); // D\n    if(getKeyState(70,iChannel3)) qScale = clamp(qScale + 0.01,0.01,10.); // F\n\n    saveSettings(fragColor,fragCoord); \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define GRIDX  250  // terrain size\n#define GRIDY  140\n#define WALL   10.\n\n#define qFeedRate       q[0].x\n#define qKillRate       q[0].y\n#define qDiffusionRateA q[0].z\n#define qDiffusionRateB q[1].x\n#define qScale          q[1].y\n#define qFrame          q[1].z  // frame# when edits were made\nconst int ADDR_COUNT =    2;\n\nvec3[ADDR_COUNT] q;\n\nconst ivec2 Q0 = ivec2( 0,GRIDY+1);\nconst ivec2 Q1 = ivec2( 1,GRIDY+1);\nconst ivec2[ADDR_COUNT] addrList = ivec2[](Q0,Q1);\n\n#define fetchData(buf, addr) texelFetch(buf, addr, 0)\n#define storeDataAddr(buf_pos, addr) ivec2(buf_pos) == addr\n\nvoid getSettings(sampler2D channel) { \n    for(int i=0;i<ADDR_COUNT;++i) \n        q[i] = texelFetch(channel, addrList[i],0).xyz;\n}\n\n// ========================================================================\n// https://www.shadertoy.com/view/MtfGWM\n\nfloat previousRnd = 0.;\n\nfloat rnd(vec2 c) { return fract(sin(dot(vec2(1.317,19.753),c))*413.7972); } // 0...1\n\nfloat rndStart(vec2 coord, float t) {  // 0...1\n\tpreviousRnd += rnd(coord.xy + vec2(t * 217.0));\n    return previousRnd;\n}\n\n// ========================================================================\n// https://www.shadertoy.com/view/mdsSD7\n\nconst int maxStringLength = 24;\nconst ivec2 cNl    = ivec2(-1, -1);\nconst ivec2 cSp    = ivec2( 0, 13);\nconst ivec2 cPlus  = ivec2(11, 13);\nconst ivec2 cMinus = ivec2(13, 13);\nconst ivec2 cDot   = ivec2(14, 13);\n\nconst ivec2[10] Digits = ivec2[10]\n(\n    ivec2(0, 12), ivec2(1, 12), ivec2(2, 12), ivec2(3, 12), ivec2(4, 12),\n    ivec2(5, 12), ivec2(6, 12), ivec2(7, 12), ivec2(8, 12), ivec2(9, 12)\n);\n#define chd(name, index) const ivec2 name = Digits[index];\nchd(c0,  0) chd(c1,  1) chd(c2,  2) chd(c3,  3) chd(c4,  4)\nchd(c5,  5) chd(c6,  6) chd(c7,  7) chd(c8,  8) chd(c9,  9)\n\nconst ivec2[26] Uppercase = ivec2[26]\n(\n    ivec2( 1, 11), ivec2( 2, 11), ivec2( 3, 11), ivec2( 4, 11), ivec2( 5, 11),\n    ivec2( 6, 11), ivec2( 7, 11), ivec2( 8, 11), ivec2( 9, 11), ivec2(10, 11),\n    ivec2(11, 11), ivec2(12, 11), ivec2(13, 11), ivec2(14, 11), ivec2(15, 11),\n    ivec2( 0, 10), ivec2( 1, 10), ivec2( 2, 10), ivec2( 3, 10), ivec2( 4, 10),\n    ivec2( 5, 10), ivec2( 6, 10), ivec2( 7, 10), ivec2( 8, 10), ivec2( 9, 10),\n    ivec2(10, 10)\n);\n#define chu(name, index) const ivec2 name = Uppercase[index];\nchu(cA,  0) chu(cB,  1) chu(cC,  2) chu(cD,  3) chu(cE,  4)\nchu(cF,  5) chu(cG,  6) chu(cH,  7) chu(cI,  8) chu(cJ,  9)\nchu(cK, 10) chu(cL, 11) chu(cM, 12) chu(cN, 13) chu(cO, 14)\nchu(cP, 15) chu(cQ, 16) chu(cR, 17) chu(cS, 18) chu(cT, 19)\nchu(cU, 20) chu(cV, 21) chu(cW, 22) chu(cX, 23) chu(cY, 24)\nchu(cZ, 25)\n\nconst ivec2[26] Lowercase = ivec2[26]\n(\n    ivec2( 1,  9), ivec2( 2,  9), ivec2( 3,  9), ivec2( 4,  9), ivec2( 5,  9),\n    ivec2( 6,  9), ivec2( 7,  9), ivec2( 8,  9), ivec2( 9,  9), ivec2(10,  9),\n    ivec2(11,  9), ivec2(12,  9), ivec2(13,  9), ivec2(14,  9), ivec2(15,  9),\n    ivec2( 0,  8), ivec2( 1,  8), ivec2( 2,  8), ivec2( 3,  8), ivec2( 4,  8),\n    ivec2( 5,  8), ivec2( 6,  8), ivec2( 7,  8), ivec2( 8,  8), ivec2( 9,  8),\n    ivec2(10,  8)\n);\n#define chl(name, index) const ivec2 name = Lowercase[index];\nchl(ca,  0) chl(cb,  1) chl(cc,  2) chl(cd,  3) chl(ce,  4)\nchl(cf,  5) chl(cg,  6) chl(ch,  7) chl(ci,  8) chl(cj,  9)\nchl(ck, 10) chl(cl, 11) chl(cm, 12) chl(cn, 13) chl(co, 14)\nchl(cp, 15) chl(cq, 16) chl(cr, 17) chl(cs, 18) chl(ct, 19)\nchl(cu, 20) chl(cv, 21) chl(cw, 22) chl(cx, 23) chl(cy, 24)\nchl(cz, 25)\n\nstruct String {\n    int count;\n    ivec2[maxStringLength] chars;\n};\n\n#define setString(string, n, contents)\\\n{\\\n    ivec2[n] _s_ = ivec2[n] contents ;\\\n    for(int _i_ = 0; _i_ < min(maxStringLength, n); _i_++)\\\n    {\\\n        string.chars[_i_] = _s_[_i_];\\\n    }\\\n    string.count = n;\\\n}\n#define declString(string, n, contents)\\\nString string;\\\n{\\\n    ivec2[n] _s_ = ivec2[n] contents ;\\\n    for(int _i_ = 0; _i_ < min(maxStringLength, n); _i_++)\\\n    {\\\n        string.chars[_i_] = _s_[_i_];\\\n    }\\\n    string.count = n;\\\n}\n\nstruct Font {\n    vec2 texSize;\n    vec2 charSize;\n    vec2 ct;\n};\n\n#define setFont(ff,c,t) ff.charSize = c; ff.texSize = t; ff.ct = c/t;\n\nstruct TextCursor {\n    vec2 startPos;\n    ivec2 coord;\n    Font font;\n    vec4 color;\n    vec2 charSize;\n    vec2 charSpace;\n    int pageWidth;\n    vec2 fragCoord;\n    vec2 outUV;\n    vec4 outColor;\n};\n\nvec4 getFontCharRect(in Font f, ivec2 char) {\n    return vec4(char, char+ivec2(1)) * f.ct.xyxy;\n}\n\nvec4 getCharScreenRect(in TextCursor t)\n{\n    vec2 leftTop = t.startPos + t.charSpace * vec2(t.coord.x, -t.coord.y);\n    vec2 rightBottom = leftTop + t.charSize * vec2(1, -1);\n    \n    return vec4(leftTop.x, rightBottom.y, rightBottom.x, leftTop.y);\n}\n\nvoid updateOutUV(ivec2 char, inout TextCursor t) {\n    vec4 fontRect = getFontCharRect(t.font, char);\n    vec4 screenRect = getCharScreenRect(t);\n    vec2 screenRectUV = (t.fragCoord - screenRect.xy) / (screenRect.zw - screenRect.xy);\n    \n    if(clamp(screenRectUV, vec2(0), vec2(1)) != screenRectUV) return;\n    \n    t.outUV = screenRectUV * (fontRect.zw - fontRect.xy) + fontRect.xy;\n    t.outColor = t.color;\n}\n\nvoid incrementCursor(inout TextCursor t)\n{\n    t.coord.x += 1;\n    if(t.coord.x >= t.pageWidth)\n    {\n        t.coord.x = 0;\n        t.coord.y += 1;\n    }\n}\n\nvoid newlineCursor(inout TextCursor t)\n{\n    t.coord.x = 0;\n    t.coord.y += 1;\n}\n\nvoid printChar(ivec2 char, inout TextCursor t)\n{\n    if(char == cNl)\n    {\n        newlineCursor(t);\n        return;\n    }\n    \n    updateOutUV(char, t);\n    incrementCursor(t);\n}\n\nvoid printString(String s, inout TextCursor t)\n{\n    for(int i = 0; i < min(s.count, maxStringLength); i++)\n    {\n        printChar(s.chars[i], t);\n    }\n}\n\nvoid printInt(int val, inout TextCursor t) {\n    if(val < 0) {\n        printChar(cMinus, t);\n        val = -val;\n    }\n    \n    int[maxStringLength] digits;\n    int count = 0;\n    \n    if(val < 100) printChar(cSp,t);\n    if(val < 10) printChar(cSp,t);\n    \n    for(;;)  {\n        digits[count++] = val % 10;\n        \n        if(count >= maxStringLength)\n            break;\n        \n        val /= 10;\n        \n        if(val == 0)\n            break;\n    }\n    \n    for(int i = count-1; i >= 0; i--)\n        printChar(Digits[digits[i]], t);\n}\n\nvoid printFloat(float val, inout TextCursor t)\n{\n    if(val < 0.0)\n    {\n        printChar(cMinus, t);\n        val = -val;\n    }\n    \n    int[maxStringLength] digits;\n    int count = 0;\n    \n    int iVal = int(val);\n    val -= float(iVal);\n    \n    for(;;)\n    {\n        digits[count++] = iVal % 10;\n        \n        if(count >= maxStringLength)\n            break;\n        \n        iVal /= 10;\n        \n        if(iVal == 0)\n            break;\n    }\n    \n    for(int i = count-1; i >= 0; i--)\n    {  \n        printChar(Digits[digits[i]], t);\n    } \n    \n    printChar(cDot, t);\n        \n    const int maxDecimalCount = 4;\n    for(int i = 0; i < maxDecimalCount; i++)\n    {\n        val *= 10.0;\n        \n        int digit = int(val);\n        val -= float(digit);\n        \n        printChar(Digits[digit], t);\n        \n        if(val <= 0.0)\n            break;\n    }\n}\n\nvoid drawText(TextCursor t, sampler2D fontTexture, inout vec4 fragColor) {\n    if(texture(fontTexture, t.outUV).r > 0.2)\n        fragColor = t.outColor;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}