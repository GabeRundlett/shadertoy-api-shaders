{
    "Shader": {
        "info": {
            "date": "1718326980",
            "description": "some sphere rendered with raymarching and using blinn phong illumination and aces tonemapping.",
            "flags": 0,
            "hasliked": 0,
            "id": "43V3D3",
            "likes": 1,
            "name": "Spheres W/Blinn + Raymarching",
            "published": 3,
            "tags": [
                "raymarching",
                "sphere",
                "lights"
            ],
            "usePreview": 0,
            "username": "spenceryonce",
            "viewed": 101
        },
        "renderpass": [
            {
                "code": "#define MAX_MARCHING_STEPS 255\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n#define EPSILON 0.001\n\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat planeSDF(vec3 p) {\n    return p.y;\n}\n\nfloat wallSDF(vec3 p) {\n    return max(p.x, -p.y);\n}\n\nfloat vertWallSDF(vec3 p) {\n    return max(p.y, -p.x);\n}\n\n//CSG\nfloat unionSDF(float d1, float d2) {\n    return min(d1, d2);\n}\n\nfloat intersectSDF(float d1, float d2) {\n    return max(d1, d2);\n}\n\nfloat differenceSDF(float d1, float d2) {\n    return max(d1, -d2);\n}\n\nvec3 repeat(vec3 p, vec3 c) {\n    return mod(p, c) - 0.5 * c;\n}\n\nvec3 applyFog(in vec3 color, in float dist) {\n    float b = 0.0004;\n    float fogAmount = 1.0 - exp(-dist * b);\n    vec3 fogColor = vec3(0.0392, 0.1412, 0.0706);\n    return mix(color, fogColor, fogAmount);\n\n}\n\nfloat map(vec3 p) {\n    vec3 spherePos = vec3(0.0, 0.0, 0.0+ 2.26* sin(iTime));\n    vec3 planePos = vec3(0.0, -1.0, 0.0);\n    vec3 wallPos = vec3(4.0, 1.9, 0.4627);\n    vec3 vertWallPos = vec3(1.9, 4.0, 0.4627);\n    vec3 bp = p;\n    p = repeat(p, vec3(4.7, 0.0, 9.8+ 0.0026* sin(iTime)));\n    float sphereDist = sphereSDF(p - spherePos, 1.0);\n    float planeDist = planeSDF(p - planePos);\n    float wallDist = wallSDF(p - wallPos);\n\n    return unionSDF(unionSDF(planeDist,sphereDist), wallDist);\n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = map(eye + depth * marchingDirection); // Sphere radius is 1.0\n        if (dist < EPSILON) {\n            return depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0); //fun to make this 0.8\n    return normalize(vec3(xy, -z));\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\n        map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n        map(vec3(p.x, p.y, p.z + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nfloat attenuation(float dist, float cutoff, float sharpness) {\n    return 1.0 / (1.0 + pow(dist / cutoff, sharpness));\n}\n\nvec3 blinnPhongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                                 vec3 lightPos, vec3 lightIntensity, vec3 lightColor) {\n     vec3 N = estimateNormal(p);\n     vec3 L = normalize(lightPos - p);\n     vec3 V = normalize(eye - p);\n     vec3 H = normalize(L + V);\n\n     float distance = length(lightPos - p);\n     float att = attenuation(distance, 1.0, distance);\n     \n     float dotLN = dot(L, N);\n     float dotHN = dot(H, N);\n     \n     if (dotLN < 0.0) {\n          return vec3(0.0, 0.0, 0.0);\n     }\n     \n     return att * lightIntensity * (k_d * dotLN + k_s * pow(dotHN, alpha) * lightColor);\n}\n\n\nvec3 blinnPhongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(2.0 * sin(iTime),\n                          1.0,\n                          2.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 1.4, 0.4);\n    vec3 light1Color = vec3(0.9451, 0.9137, 0.9529);\n\n    color += blinnPhongContribForLight(k_d, k_s, alpha, p, eye,\n                                    light1Pos,\n                                    light1Intensity,\n                                    light1Color);\n                                \n    vec3 light2Pos = vec3(2.0 * sin(0.5 * iTime),\n                            0.2 * cos(0.5 * iTime),\n                            2.0);\n    vec3 light2Intensity = vec3(1.2745, 0.2745, 0.2745);\n    vec3 light2Color = vec3(0.902, 0.8275, 0.8275);\n\n    color += blinnPhongContribForLight(k_d, k_s, alpha, p, eye,\n                                    light2Pos,\n                                    light2Intensity,\n                                    light2Color);\n\n    vec3 light3Pos = vec3(0.0,\n                          0.0,\n                          -3.0);\n    vec3 light3Intensity = vec3(1.0, 1.0, 1.0);\n    vec3 light3Color = vec3(1.0, 1.0, 1.0);\n    \n    color += blinnPhongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light3Pos,\n                                  light3Intensity,\n                                  light3Color);  \n\n    return color;\n}\n\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\n// Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\nvec3 tonemapeAces(vec3 x)\n{\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\n\nvoid mainImage(out vec4 O, in vec2 fc) {\n    vec3 viewDir = rayDirection(55.0, iResolution.xy, fc.xy);\n    vec3 eye = vec3(0.0, 0.0,15.0); // Camera position\n    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = viewToWorld * viewDir;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        O = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    vec3 p = eye + dist * worldDir;\n    \n    vec3 K_a = vec3(0.0, 0.0, 0.006); // Ambient color\n    vec3 K_d = vec3(0.4392, 0.7176, 0.6941); // Diffuse color\n    vec3 K_s = vec3(0.9569, 0.9569, 0.9569); // Specular color\n    float shininess = 70.0;\n    \n    vec3 color = blinnPhongIllumination(K_a, K_d, K_s, shininess, p, eye);\n\n    color = applyFog(color, dist);\n    color = tonemapeAces(color);\n    color = pow(color, vec3(1.0 / 2.2));\n    \n    O = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}