{
    "Shader": {
        "info": {
            "date": "1644829140",
            "description": "A 2D homography (projective transformation of the plane) is determined by 4 points.\n\nMouse: click and drag reference points.\na: highlight reference quadrilateral\nn: show normals\n<up>/down>: zoom\n ",
            "flags": 48,
            "hasliked": 0,
            "id": "7dXfDH",
            "likes": 29,
            "name": "2D Homography",
            "published": 3,
            "tags": [
                "2d",
                "projective",
                "homography",
                "collineation"
            ],
            "usePreview": 1,
            "username": "mla",
            "viewed": 664
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// 2D Homography, Matthew Arcus, mla, 2022\n//\n////////////////////////////////////////////////////////////////////////////////\n//\n// A 2D homography (projective transformation of the plane) is\n// determined by 4 points, here the corners of a square texture.\n// Use the mouse to change the mapping - sometimes the texture\n// is split by the line at infinity.\n//\n// Mouse: click and drag reference points.\n// a: highlight reference quadrilateral\n// n: show normals at quadrilateral corners\n// <up>/down>: zoom\n//\n////////////////////////////////////////////////////////////////////////////////\n\nfloat lwidth = 0.004;\nfloat pwidth = 0.04;\n\n// Map p0,p1,p2,p3 to triangle of reference & unit point,\n// (1,0,0),(0,1,0),(0,0,1),(1,1,1)\nmat3 rproject(vec3 p0, vec3 p1, vec3 p2, vec3 p3) {\n  // Just an inverse for the first three points\n  // (the triangle of reference). No inverse if collinear.\n  mat3 m = inverse(mat3(p0,p1,p2)); // column major!\n  // Then scale each row so p3 maps to unit point (1,1,1)\n  // Divide by zero can only happen if 3 points collinear\n  vec3 t = 1.0/(m*p3);\n  return mat3(t[0],0,0, 0,t[1],0, 0,0,t[2])*m;\n}\n\nmat3 rproject(vec2 p0, vec2 p1, vec2 p2, vec2 p3) {\n   return rproject(vec3(p0,1),vec3(p1,1),vec3(p2,1),vec3(p3,1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  setscale();\n  vec2 p = map(fragCoord.xy);\n  float px = fwidth(p.x);\n\n  vec2 p0 = getselection(0);\n  vec2 p1 = getselection(1);\n  vec2 p2 = getselection(2);\n  vec2 p3 = getselection(3);\n  mat3 m = rproject(p0,p1,p2,p3);\n  mat3 n = rproject(vec2(0,0),vec2(0,1),vec2(1,1),vec2(1,0));\n  mat3 t = inverse(n)*m;\n  // t maps screen coords to 'canonical' coords\n  // inverse(t) maps canonical coords to screen coords\n  vec3 uv = t*vec3(p,1);\n  float z = uv.z;\n  uv /= z;\n  // so screen lines are mapped to canonical lines by transpose(inverse(t))\n  // so canonical lines mapped to screen lines by transpose(t)\n  // the normal is just the slope of the line, ie. the xy component:\n  mat3x2 tt = transpose(mat2x3(t));\n  vec2 nx0 = tt*vec3(0,1,0); // Just tt[1] in fact\n  vec2 ny0 = tt*vec3(1,0,0); // Just tt[0] in fact\n  vec2 nx1 = tt*vec3(0,1,-1);\n  vec2 ny1 = tt*vec3(1,0,-1);\n\n  vec3 color = pow(texture(iChannel0,uv.xy).xyz,vec3(2.2));\n  color *= min(2.5*z*z,1.0); // depth fade\n  if (key(CHAR_A) &&\n      !(uv.x >= 0.0 && uv.x <= 1.0 && uv.y >= 0.0 && uv.y <= 1.0)) {\n     color *= 0.5;\n  }\n\n  float d = segment(p,p0,p1);\n  d = min(d,segment(p,p1,p2));\n  d = min(d,segment(p,p2,p3));\n  d = min(d,segment(p,p3,p0));\n  color = mix(vec3(0.75),color,smoothstep(0.0,px,d-lwidth));\n  if (key(CHAR_N)) {\n    d = 1e8;\n    d = min(d,segment(p,p0,p0+nx0));\n    d = min(d,segment(p,p0,p0+ny0));\n    d = min(d,segment(p,p1,p1+nx1));\n    d = min(d,segment(p,p1,p1+ny0));\n    d = min(d,segment(p,p2,p2+nx1));\n    d = min(d,segment(p,p2,p2+ny1));\n    d = min(d,segment(p,p3,p3+nx0));\n    d = min(d,segment(p,p3,p3+ny1));\n    color = mix(vec3(1,0,0),color,smoothstep(0.0,px,d-0.5*lwidth));\n  }\n  d = distance(p,p0);\n  d = min(d,distance(p,p1));\n  d = min(d,distance(p,p2));\n  d = min(d,distance(p,p3));\n  color = mix(vec3(1),color,smoothstep(0.0,px,d-pwidth));\n  \n  //d = distance(p,p0+nx);\n  //d = min(d,distance(p,p0+ny));\n  //color = mix(vec3(1,0,0),color,smoothstep(0.0,px,d-pwidth));\n  \n  color = pow(color,vec3(0.4545));\n  if (alert) color.r = 1.0;\n  fragColor = vec4(color,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 t, vec2 uv) {\n  setscale();\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2 && key(i)) {\n    // Record mouse position when key pressed\n    t = vec4(iMouse.xy,0,iTime);\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse now down\n        for (int i = nselections; i >= 1; i--) {\n          // Select topmost item (assume drawn 1..N)\n          vec2 p = texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < scale*0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        // Clear selection if mouse up.\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0 || t.z != 1234.0) {\n      t.xyz = vec3(initselection(i-1),1234); // Current coordinates\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i && iMouse.z > 0.0) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store((key),0).x))\n#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\n#define map(screenpos) (scale*(2.0*(screenpos)-iResolution.xy)/iResolution.y)\n#define getselection(i) (texelFetch(iChannel2,ivec2((i)+1,3),0).xy)\n#define setscale() (scale *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP))))\n\nfloat scale = 1.2;\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst int nselections = 4;\nvec2 initselection(int i) {\n  if (i == 0) return vec2(-1,-1);\n  if (i == 1) return vec2(-1,1);\n  if (i == 2) return vec2(1,1);\n  if (i == 3) return vec2(1,-1);\n  return vec2(0);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI =  3.141592654;\n\nconst int KEY_ALT = 18;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\nfloat segment(vec2 p, vec2 a, vec2 b, bool doclamp) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  if (doclamp) h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  return segment(p,a,b,false);\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n  return rgb;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}