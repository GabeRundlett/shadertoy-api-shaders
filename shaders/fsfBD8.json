{
    "Shader": {
        "info": {
            "date": "1644774145",
            "description": "Quite happy with this - very laggy and messy code tho",
            "flags": 0,
            "hasliked": 0,
            "id": "fsfBD8",
            "likes": 39,
            "name": "3D Squiggly Things",
            "published": 3,
            "tags": [
                "raymarching",
                "template",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 709
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 35.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n#define pi 3.14159\n\nfloat h21 (float a, float b, float zoom) {\n    a = mod(a, zoom); b = mod(b, zoom);\n    return fract(sin(dot(vec2(a, b), vec2(12.9898, 78.233)))*43758.5453123);\n}\n\n// rand value that changes with val (time usually)\nfloat rand(vec2 ipos, float val) {\n    float a = 2. * pi * h21(ipos);\n    float c = cos(a), s = sin(a);\n    \n    float f = floor(val);\n    \n    // current value (using 0.01 so it looks \"random\" for longer)\n    float v = h21(vec2(c * f, s * f) + 0.01 * ipos);\n    // next value\n    float v2 = h21(vec2(c * (f + 1.), s * (f + 1.)) + 0.01 * ipos);\n    \n    // smooth lerp between values\n    return mix(v, v2, smoothstep(0., 1., fract(val)));\n}\n\nfloat GetDist(vec3 p) {\n    // Rotate xz plane with height + time\n    vec2 uv = p.xz;\n    uv *= Rot(0.28 * p.y - 0.1 * iTime);\n    uv *= 3.;\n    \n    // Cut into grid\n    vec2 ipos = floor(uv) + 0.5;\n    vec2 fpos = uv - ipos;\n    \n    // Rand values\n    float h = h21(ipos);\n    float h2 = rand(ipos, h + 0.2 * iTime);\n    \n    // Each cell rotates with height+time, randomly\n    float time = h * 4. * iTime + p.y * h2 * 9.; // + 2. * pi * h; // dont need offset\n    vec2 q = h2 * 0.1 * vec2(cos(time), sin(time));\n    \n    // Radius of each squiggle (height+time), offset randomly\n    float r = 0.1 * (1. + 0.5 * cos(2. * pi * h + 4. * p.y + iTime));\n    float d = length(fpos - q) - r; \n    \n    // Cut sphere out of squiggles so we can see - smin looks nice\n    float sd = length(p - vec3(0, -3.5, -1.3)) - 0.7;\n\n    // (artifacts appear in furthest tiles if d is larger)\n    d = -smin(-0.35 * d, sd); \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    // (sphere cut-out doesnt follow mouse, but you can still look)\n    vec3 ro = vec3(0, -3.5, -1.3);\n    if (iMouse.z > 0.) {\n        ro.yz *= Rot(-m.y*3.14+1.);\n        ro.xz *= Rot(-m.x*6.2831);\n    }\n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.8);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.05;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n\n        //float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        //col = vec3(dif);\n        \n        vec3 rdIn = refract(rd, n, 1./IOR);\n        \n        vec3 pEnter = p - n*SURF_DIST*30.;\n        float dIn = RayMarch(pEnter, rdIn, -1.); // inside the object\n        \n        vec3 pExit = pEnter + rdIn * dIn; // 3d position of exit\n        vec3 nExit = -GetNormal(pExit);\n        \n        float fresnel = pow(1.+dot(rd, n), 3.);\n        col = 2.5 * vec3(fresnel);\n        \n        // No idea what this does, but I need it\n        col *= 0.55 + 0.45 * cross(nExit, n); \n        \n        //col = clamp(col, 0., 1.); // clamp removes highlighting that I want       \n        \n        // Cylinder length\n        float ln = length(p.xz);\n        \n        // Stripey patterns etc\n        vec3 e = vec3(1.);\n        col *= pal(4.*ln + .05*iTime, e, e, e, \n                   0.5 + 0.5 * thc(3., 20.*p.y + 10.*ln - 8.*iTime) * vec3(0,1,2)/3.);\n        \n        // Darken with height\n        col *= (0.32 * p.y + .95);\n        \n        // Fake shadows (I think)\n        col *= 0.8 + 1. * n.y; \n        \n        // Darken in a cylinder (less aliasy thingies from far away / fake vignette)\n        col *= clamp(1. - 0.3 * ln, 0., 1.);\n        //float val = 0.5 + 0.5 *  thc(4., -0.2 * p.y + 1. * iTime);//clamp(5. + 5. * cos(p.y + iTime), 0., 1.);\n        \n        // Mix col with fres vertically, fake fog\n        fresnel = pow(1.+dot(rd, n), 1.);\n        col = mix(col, vec3(fresnel), clamp(-0.3 + 0.15 * p.y, 0., 1.));\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    col += 0.04;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\n// (SdSmoothMin) stolen from here: https://www.shadertoy.com/view/MsfBzB\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}