{
    "Shader": {
        "info": {
            "date": "1604597551",
            "description": "Autonomous flyer leaping",
            "flags": 0,
            "hasliked": 0,
            "id": "3s3Bz7",
            "likes": 10,
            "name": "Painted Bird",
            "published": 3,
            "tags": [
                "movement",
                "wing",
                "kinematics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "// \"Painted Bird\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Revisiting the bird used in several earlier shaders (e.g., \"SeaBirds at Sunset\",\n// \"Fractal Bridge\", \"Tempting the Mariner\"); updated internals and paintjob.\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 DirVuMat (vec3 vd);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qHit;\nfloat dstFar, tCur, wngAng, legAng, bkAng, bUp;\nint idObj;\nconst int nwSeg = 5;\nconst int idBdy = 1, idTail = 2, idEye = 3, idBk = 4, idLeg = 5, idWing = 6,\n   idWTip = idWing + nwSeg - 1, idPrch = idWTip + 1;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float wSeg, wChord, wSpar, fTap, bkLen, lgLen, ftLen, dMin, d, a, wr, wf, ws, ww;\n  dMin = dstFar;\n  wSeg = 0.15;\n  wChord = 0.3;\n  wSpar = 0.02;\n  fTap = 8.;\n  bkLen = 0.2;\n  lgLen = 0.08;\n  ftLen = 0.05;\n  p.y -= 2. * lgLen + 1.16;\n  p.y -= bUp;\n  q = p;\n  q.z -= 0.5;\n  q.x = abs (q.x) - 0.1;\n  a = wngAng;\n  wf = 1.;\n  ws = 0.02 * wChord;\n  for (int k = 0; k < nwSeg; k ++) {\n    q.xy = Rot2D (q.xy, a);\n    q.x -= wSeg;\n    wr = wf * (1. - 0.5 * q.x / (fTap * wSeg));\n    ww = ws - 0.01 * (q.z / wChord) * (q.z / wChord);\n    q.z += 0.4 * wr * wChord;\n    if (k < nwSeg - 1) {\n      d = length (max (abs (vec3 (q.xz, q.y - 0.5 * ww).xzy) - vec3 (wSeg, ww, wr * wChord),\n         0.)) - wr * wSpar;\n      q.x -= wSeg;\n      DMINQ (idWing + k);\n    } else {\n      q.x += wSeg;\n      d = max (length (abs (max (vec2 (length (q.xz) - wr * wChord,\n         abs (q.y - 0.5 * ww) - ww), 0.))) - wr * wSpar, - q.x);\n      DMINQ (idWTip);\n    }\n    q.z -= 0.4 * wr * wChord;\n    a *= 1.03;\n    wf *= (1. - 1. / fTap);\n    ws *= 0.8 * (1. - 1. / fTap);\n  }\n  q = p;\n  wr = q.z - 0.5;\n  if (wr > 0.) {\n    wr = 0.17 - 0.44 * wr * wr;\n  } else {\n    wr = clamp (0.667 * wr, -1., 1.);\n    wr *= wr;\n    wr = 0.17 - wr * (0.34 - 0.18 * wr); \n  }\n  d = PrCapsDf (q, wr, 1.);\n  DMINQ (idBdy);\n  q = p;\n  q.x = abs (q.x);\n  wr = (q.z + 1.) * (q.z + 1.);\n  q -= vec3 (0.3 * wr, 0.1 * wr, -1.2);\n  d = PrCapsDf (q, 0.009, 0.2);\n  DMINQ (idTail);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.07, 0.05, 0.9);\n  d = PrSphDf (q, 0.04);\n  DMINQ (idEye);\n  q = p;\n  q -= vec3 (0., -0.015, 1.15);\n  q.yz = Rot2D (vec2 (abs (q.y), q.z + 0.8 * bkLen), bkAng);\n  q.z -= 0.8 * bkLen;\n  wr = clamp (0.4 - 0.3 * q.z / bkLen, 0., 1.);\n  d = max (abs (length (max (abs (q) - vec3 (0., 0.25 * wr * bkLen, bkLen), 0.)) - 0.25 * wr * bkLen) - 0.002, - q.y);\n  DMINQ (idBk);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.08, -0.12, 0.5);\n  q.yz = Rot2D (q.yz, legAng);\n  q.xz = Rot2D (q.xz, -0.05 * pi);\n  q.z += lgLen;\n  d = PrCapsDf (q, 0.1 * lgLen, lgLen);\n  DMINQ (idLeg);\n  q.z += lgLen;\n  q.xy = vec2 (- q.y, q.x);\n  q.xy = Rot2D (q.xy, floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) * (2. * pi / 3.));\n  q.xz = Rot2D (q.xz, - pi + 0.4 * legAng);\n  q.z -= ftLen - 0.02;\n  q.x -= 0.01 * (1. - (q.z / ftLen) * (q.z / ftLen));\n  d = PrCapsDf (q, 0.1 * ftLen, ftLen);\n  DMINQ (idLeg);\n  p.y += bUp;\n  q = p - vec3 (0., - (2. * lgLen + 0.16), 0.5);\n  d = PrCapsDf (q.yzx, 0.02, 0.3);\n  q.x = abs (q.x) - 0.25;\n  q.y -= -0.51;\n  d = min (d, max (PrCapsDf (q.xzy, 0.03, 0.51), -0.5 - q.y));\n  DMINQ (idPrch);\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 20; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4, c1, c2, c3;\n  float spec, a, r, s, t, sx;\n  c1 = vec4 (0.9, 0.8, 0.8, 0.2);\n  c2 = vec4 (0.3, 0.3, 0.8, 0.2);\n  c3 = vec4 (0.1, 0.3, 0.1, 0.2);\n  if (idObj == idEye) {\n    col4 = vec4 (0., 0., 0.6, 0.5);\n  } else if (idObj == idBdy || idObj == idTail) {\n    a = atan (abs (qHit.x), qHit.y) / pi;\n    col4 = mix (c3, mix (c1, c2, smoothstep (0.5, 0.7, a)), smoothstep (0.1, 0.3, a));\n    if (idObj == idBdy && qHit.z > 0. && length (max (abs (vec2 (qHit.x, qHit.y + 0.017)) -\n       vec2 (0., 0.035), 0.)) < 0.025) col4 = vec4 (1., 0.7, 0.2, -1.);\n  } else if (idObj == idBk) {\n    col4 = vec4 (0.9, 0.4, 0.1, 0.1);\n  } else if (idObj == idLeg) {\n    col4 = (0.7 + 0.3 * sin (128. * pi * qHit.z)) * vec4 (0.8, 0.6, 0., 0.1);\n  } else if (idObj >= idWing && idObj <= idWTip) {\n    col4 = (qHit.y > -0.006) ? c3 : c2;\n    t = 0.3 * float (idObj - idWing);\n    sx = 6.66 * qHit.x - 0.52;\n    if (idObj < idWTip || idObj == idWTip && qHit.x < 0.075) col4 = mix (col4, c1, smoothstep (0.,\n       0.01, qHit.z - 0.54 * (abs (cos (pi * sx)) - 0.5) * (1. - 0.4 * t)));\n    r = (length (qHit.xz) - 0.165);\n    a = atan (qHit.z, - qHit.x) / (2. * pi) + 0.5;\n    t = 0.11 * (qHit.x + t) - 0.29;\n    s = (idObj < idWTip) ? step (0., qHit.z + t) * (1. - smoothstep (0.1, 0.2, mod (8. * sx, 1.))) :\n       step (0.021, r) * smoothstep (0.8, 0.9, mod (64. * a, 1.));\n    col4 *= 1. - 0.2 * s;\n    s = (idObj == idWTip) ? smoothstep (0., 0.005, r) * (1. - smoothstep (0.3, 0.4, mod (32. * a, 1.))) :\n       (1. - smoothstep (0.01, 0.016, qHit.z - t)) * smoothstep (0.6, 0.7, mod (4. * sx, 1.));\n    col4 = mix (col4, c1, s);\n  } else if (idObj == idPrch) {\n    col4 = vec4 (0.5, 0.3, 0.1, 0.);\n  }\n  return col4;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.41, 0.55);\n  } else if (rd.y < 0.) {\n    col = vec3 (0.3, 0.41, 0.55);\n  } else {\n    q = 0.02 * (ro.xz + 0.5 * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * ltDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, ltDir), 0.);\n    skCol = vec3 (0.4, 0.5, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return 0.8 * col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 vf;\n  float dstObj, dstGrnd, nDotL, sh, tCyc, phs, nCyc;\n  int idObjT;\n  tCyc = 2.;\n  nCyc = floor (mod (tCur / tCyc, 4.));\n  phs = (nCyc > 0.) ? mod (tCur / tCyc, 1.) : 0.;\n  bUp = 3. * phs * (1. - phs) * smoothstep (0., 0.1, 0.5 - abs (phs - 0.5));\n  legAng = pi * (0.2 + 0.3 * SmoothBump (0.25, 0.75, 0.1, mod (phs + 0.5, 1.)));\n  wngAng = -0.03 * pi * ((nCyc > 0.) ? (1. + 2. * cos (2. * pi * phs)) :\n     (2.9 + 0.1 * cos (2. * pi * mod (8. * tCur / tCyc, 1.))));\n  bkAng = 0.02 * pi * (1. + sin (5. * tCur));\n  dstGrnd = dstFar;\n  dstObj = ObjRay (ro, rd);\n  vf = vec2 (0.);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = ObjCol ();\n    if (idObj == idPrch) vf = vec2 (64., 0.3);\n    idObjT = idObj;\n    if (col4.a < 0.) col = col4.rgb * (0.6 - 0.4 * dot (vn, rd));\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    vn = vec3 (0., 1., 0.);\n    col4 = mix (vec4 (0.4, 0.5, 0.3, 0.), vec4 (0., 0.5, 0.1, 0.),\n       smoothstep (0.2, 0.8, Fbm2 (8. * ro.xz)));\n    col4 = mix (vec4 (0.2, 0.5, 0.2, 0.), col4,  1. - smoothstep (0.5, 0.9, dstGrnd / dstFar));\n    vf = vec2 (8., 2. * (1. - smoothstep (0.2, 0.5, dstGrnd / dstFar)));\n  } else {\n    col = SkyBgCol (ro, rd);\n  }\n  if (dstObj < dstFar && col4.a >= 0. || dstObj >= dstFar && rd.y < 0.) {\n    sh = (min (dstObj, dstGrnd) < dstFar) ? ObjSShadow (ro + 0.01 * vn, ltDir) : 1.;\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (dstObj < dstFar) nDotL *= nDotL;\n    col = col4.rgb * (0.2 + 0.1 * max (vn.y, 0.) + 0.8 * sh * nDotL) +\n       step (0.95, sh) * col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    if (dstObj < dstFar) {\n      if (idObjT == idEye) col.b += 0.2;\n      col = mix (col, 1.3 * SkyBgCol (ro, reflect (rd, vn)), 0.3);\n    } else {\n      col *= 0.7 + 0.3 * smoothstep (0.92, 0.97, dot (normalize (10. * ltDir - ro), ltDir));\n      col = mix (col, 0.8 * vec3 (0.3, 0.41, 0.55), pow (1. + rd.y, 16.));\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.2 * pi;\n  el = 0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  } else {\n    az += 0.01 * pi * tCur;\n    el += 0.1 * pi * sin (0.1 * pi * tCur);\n  }\n  el = clamp (el, 0.01 * pi, 0.4 * pi);\n  ro = 8. * sin (el + vec2 (0.5 * pi, 0.)).xyx * vec3 (sin (az + vec2 (0.5 * pi, 0.)), 1.2).xzy;\n  ro.y += 1.;\n  vuMat = DirVuMat (normalize (vec3 (0., 1.5, 0.) - ro));\n  zmFac = 5.5;\n  dstFar = 80.;\n  ltDir = normalize (vec3 (1., 1.5, 1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 DirVuMat (vec3 vd)\n{\n  float s;\n  s = sqrt (max (1. - vd.y * vd.y, 1e-6));\n  return mat3 (vec3 (vd.z, 0., - vd.x) / s, vec3 (- vd.y * vd.x, 1. - vd.y * vd.y,\n     - vd.y * vd.z) / s, vd);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}