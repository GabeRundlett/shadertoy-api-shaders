{
    "Shader": {
        "info": {
            "date": "1547855171",
            "description": "For x and y integers, but floating point operations, white pixels mark where (x/y)*y != x. See Fabrice's [url]https://www.shadertoy.com/view/WdsGDX[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "tds3Ws",
            "likes": 14,
            "name": "int-in-float precision issues II",
            "published": 3,
            "tags": [
                "2d",
                "precision",
                "ieee",
                "float"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1052
        },
        "renderpass": [
            {
                "code": "// Similar test to Fabrice's: https://www.shadertoy.com/view/WdsGDX\n//\n// With x and y integers and floating point representation and operations,\n// white pixels mark where (x/y)*y != x\n\n\n#define ZERO float(min(iFrame,0))\n\nvoid mainImage( out vec4 c, vec2 f )\n{\n    vec2 p = floor(f+0.5);   // Pick two numbers, call them x and y,\n                             //\n    float x = p.x;           // Now, take x,\n    x /= p.y;                // divide it by y,\n    x += ZERO;               // add nothing to it (prevents compiler optimizing things away)\n    x *= p.y;                // and finally multiply it by y.\n                             // At this point we'd like x to have its original value, \n    c = vec4( x!=p.x );      // but it won't,\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}