{
    "Shader": {
        "info": {
            "date": "1511451013",
            "description": "Red vs Blue are diverging costly computations.   White = fps. Green=smoothed.\nThe frame rate doubles if they fall in separate warp vs fall in the same warp.\nMouse: set good case.\nTuned for nVidia warps = 4x8 window-aligned.\nAuto adjust to your GPU power.",
            "flags": 32,
            "hasliked": 0,
            "id": "Xtsfz7",
            "likes": 2,
            "name": "testing warps (2)",
            "published": 3,
            "tags": [
                "fps",
                "gpu",
                "perfmeter"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 719
        },
        "renderpass": [
            {
                "code": "// following of https://www.shadertoy.com/view/4tsBzN\n// more GPU reverse engineering (aka fragSniffing) here: https://hal.inria.fr/hal-01643579\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tO =  texelFetch(iChannel0, ivec2(U), 0);\n    O += texelFetch(iChannel1, ivec2(U), 0); // * (O.r+O.b==0. ? 1. : .5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Warp effects tester. Warps are 4x8 pixels (on nvidia), aligned with window coordinates\n// Divergence is costly only if occuring in the same warp.\n// In addition, blocks of 16x16 pixels ( = 8 warps ) are flushed in sync, which prevent savings for isolated empty warps.\n\n#define K 2.                                // paint 1 over K^2 checkers\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = exp2(floor(log2(iResolution.xy)));\n    if ( U.x>=R.x || U.y>=R.y ) return;     // we want tilable properties\n    \n    int N = int( texelFetch(iChannel0, ivec2(0),0).a );// N will adjust depending on your GPU power\n    \n    float d =  float(iFrame/8);   \n    if (iFrame>30 && iMouse.z<=0.)          // don't move if qualibration or mouse\n        U.y -= d;\n     // U.x -= d;\n     // U.y += 4., U.x -= d;\n    \n    U = mod( U, vec2(4,8) *K ) - vec2(4,8) *(K-1.);\n    \n    if (U.x>0. && U.y>0.) {                 // paint 1 over KÂ² checkers\n    \n        if (U.y>4.)                         // top half: red process\n            for(int i = 0; i< N; i++) \n                O.r += abs(sin(iTime)); \n        \n        else                                // bottom half: blue process = diverging costly branch...\n            for(int i = 0; i< N; i++)       // ...only if offset is in the same warp than red one.\n                O.b += abs(cos(iTime));\n    \n        O = sign(O);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// performance meter + GPU power qualibration\n\nvoid mainImage( out vec4 O, vec2 U )\n{                                                        // N will adjust depending on your GPU power\n    int N = iFrame==0 ? 30000 : int( texelFetch(iChannel0, ivec2(0),0).a );\n    float sTimeDelta = texelFetch(iChannel0, ivec2(1),0).a,\n          h = iResolution.y;   \n    U -= .5;                                                     \n    O = texelFetch(iChannel0, ivec2(U-vec2(1,0)), 0);    // scrool the perf display\n    \n    if (U.x==0. && U.y < h/(iTimeDelta*65.) ) O += .8;   // fps. top = 65 fps\n    if (U.x==0. && abs(U.y - h/(sTimeDelta*65.) ) < 1. ) O = vec4(0,1,0,0); // smoothed fps\n // if (mod(U.y,10.*iResolution.y/65.) < 1.) O = vec4(1,0,0,0);   // red line every 10 fps\n    \n    O.a = iFrame<30 && U==vec2(0) && h>200.              // use 30 frames to adjust to your computer\n        ? float(N) * (.9 + .1*(1./31.)/iTimeDelta )      // relaxation towards 30fps goal.\n        : float(N);\n\n    if (U==vec2(1)) O.a = .9*sTimeDelta + .1*iTimeDelta; // smoothed FPS;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}