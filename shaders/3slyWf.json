{
    "Shader": {
        "info": {
            "date": "1586362713",
            "description": "Kaleidoscope",
            "flags": 0,
            "hasliked": 0,
            "id": "3slyWf",
            "likes": 8,
            "name": "Psychedelic  Kaleidoscope",
            "published": 3,
            "tags": [
                "psychedelic",
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "brechrt",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define TWO_PI 6.28318530\n\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\nuint hash( uvec2 v ) { \n    return hash( v.x ^ hash(v.y)); \n}\n\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n\n    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n    m |= ieeeOne;                          // Add fractional part to 1.0\n\n    float  f = uintBitsToFloat( m );       // Range [1:2]\n    return f - 1.0;                        // Range [0:1]\n}\nfloat random( vec2  v ) { \n    return floatConstruct(hash(floatBitsToUint(v)));\n}\n\nfloat noise(vec2 uv){\n\tvec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat noise( vec2 uv, float detail){\n\tfloat n = 0.;\n    float m = 0.;\n\n    for(float i = 0.; i < detail; i++){\n    \tfloat x = pow(2., i);\n        float y = 1./x;\n        \n        n += noise(uv*x+y)*y;\n        m += y;\n    }\n    \n    return n/m;\n    \n}\nmat2 rot(float a){\n\tfloat c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 selectColor(float b){\n    float n = 4.;\n    vec3 cols[5];\n    cols[0] = vec3( 0.9490196078431372, 0.5686274509803921, 0.23529411764705882);\n    cols[1] = vec3( 0.2627450980392157, 0, 0.39215686274509803);\n    cols[2] = vec3( 0.8784313725490196, 0.08627450980392157, 0.4823529411764706);\n    cols[3] = vec3( 0, 0.7137254901960784, 0.7372549019607844);\n    cols[4] = vec3( 1, 0.5019607843137255, 0);\n    \n    float i = floor(b*n);\n    float f = fract(b*n);\n    f = f*f*(3.-2.*f);\n    int i1 = int(i);\n    int i2 = int(i) + 1;\n    vec3 col = mix(cols[i1], cols[i2], f);\n    //col = col*col*(3.0-2.0*col);\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec2 gv = vec2(length(uv), atan(uv.y, uv.x)+iTime*.5);\n\t//gv.y += gv.x*.5*sin(iTime*.1);\n    gv.y = (gv.y+PI)/TWO_PI;\n    \n    gv.y = abs(fract(gv.y*5.)-.5);\n    gv.x *= 1.;\n    gv.x += sin(iTime*.05)*sin(iTime*.08+.4)*7.-7.;\n    \n    gv *= rot(noise(gv,2.));\n    float n = noise(gv*5., 1.);\n    vec3 col = selectColor(n*n);//hsv2rgb(vec3(n*n,1.,1.));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}