{
    "Shader": {
        "info": {
            "date": "1635561768",
            "description": "i shouldn't have made this (looks quite cool if you increase \"num\")",
            "flags": 0,
            "hasliked": 0,
            "id": "ftcGzr",
            "likes": 10,
            "name": "Sperm",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    uv.y += 0.02 * cos(12. * uv.x + 8. * iTime);\n    const float num = 30.;\n    \n    float s = 0.;\n    for (float i=0.;i<num;i++) {\n        vec2 p = (0.2 + 0.6 * tanh(3. * cos(0.8 * iTime))) * vec2(tanh(1. *cos(0.5 * pi * tanh(1.5 * cos(iTime + 23. * i/num * pi)) + 1. - 0.5 * i/num * pi)), \n                            0.3 * cos(iTime + 11. * i/num * pi));\n        float d = length(uv - p);\n        s = max(s, step(d, 0.015 + 0.008 * sin(iTime + i/num * pi)));\n        \n        float y = uv.y + 0.01 * cos(50. * uv.x + iTime);\n        //float x = uv.x + .1 * cos(100. * uv.y + iTime);\n        s += smoothstep(-0.05, 0.1, uv.x - (p.x - 0.15 * (i+5.)/num)) * step(uv.x, p.x) * step(abs(y-p.y),0.001);\n    }\n   vec3 col = vec3(s);\n    \n    \n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}