{
    "Shader": {
        "info": {
            "date": "1653431504",
            "description": "Shader for projectors with fog machines.",
            "flags": 36,
            "hasliked": 0,
            "id": "NdcyWN",
            "likes": 1,
            "name": "Sound Laser Line Projector",
            "published": 3,
            "tags": [
                "sound",
                "audio",
                "laser",
                "projector"
            ],
            "usePreview": 0,
            "username": "Ossitech",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "#define MULT 0.0\n#define SPEED 2.0\n\nfloat getOffset()\n{\n    float offset = 0.0;\n    \n    for (int i = 0; i < 512; i++)\n    {\n        offset += texture(iChannel0, vec2(float(i) / 512.0, 0.0)).x * MULT;\n    }\n    \n    offset /= 512.0;\n    \n    return offset;\n}\n\n// direction x + y must be 1.0.\n// d must be between 0.0 an 1.0.\nint line(vec2 uv, vec2 direction, float d)\n{\n    float v = uv.x * direction.x + uv.y * direction.y;\n    \n    if (abs(d - v) < 0.01) return 1;\n    \n    return 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    int mask = 0;\n    \n    int second = int(iTime) % 60;\n    \n    float d = cos(iTime * SPEED) * 0.5 + 0.5 + getOffset();\n    \n    if (second < 10) mask += line(uv, vec2(1.0, 0.0), d);\n    else if(second < 20) mask += line(uv, vec2(0.0, 1.0), d);\n    else if(second < 30) mask += line(uv, vec2(0.5, 0.5), d);\n    else if(second < 40) mask += line(uv, vec2(0.25, 0.75), d);\n    else if(second < 50) mask += line(uv, vec2(0.8, 0.2), d);\n    else mask += line(uv, vec2(0.4, 0.6), d);\n    \n    if (mask > 0) fragColor = texture(iChannel1, uv);\n    else fragColor = vec4(0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}