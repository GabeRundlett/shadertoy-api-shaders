{
    "Shader": {
        "info": {
            "date": "1712842794",
            "description": "Tiffi logo",
            "flags": 0,
            "hasliked": 0,
            "id": "XcyGWw",
            "likes": 0,
            "name": "Tiffi logo",
            "published": 3,
            "tags": [
                "raymarching",
                "logo"
            ],
            "usePreview": 0,
            "username": "Alie",
            "viewed": 48
        },
        "renderpass": [
            {
                "code": "#define r2d(p,a) p=cos(a)*p+sin(a)*vec2(-p.y,p.x);\n#define pi acos(-1.)\n#define eps 0.001\n\nfloat box(in vec3 p, in vec3 b, in float r){\n    p = abs(p) - b;\n    return length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.) - r;\n}\n\nfloat torus(vec3 p, vec2 t) {\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat arc(in vec3 p, in vec2 o, in float a, in float ra, in float rot){\n    p.xy -= o;\n    r2d(p.xy, rot * pi / 2.);\n    a *= pi / 4.;\n    vec2 sc = vec2(sin(a), cos(a));\n    \n    p.x = abs(p.x);\n    float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k );\n}\n\nfloat line(in vec3 p, in vec3 a, in vec3 b) {\n    vec3 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba * h);\n}\n\nfloat f(in vec3 p, in vec2 o) {\n    p.xy -= o;\n    float d = line(p, vec3(-.75, .6, 0), vec3(-.75, -.6, 0));\n    d = min(d, arc(p, vec2(-.35,.6), 1., .4, -.5));\n    d = min(d, line(p, vec3(-.35, 1.,0), vec3(.5, 1., 0)));\n    d = min(d, arc(p, vec2(-.35,-.6), 1., .4, -1.5));\n    \n    float scale = max(0., -p.x-.75);\n    d = min(d, \n        line(p, vec3(-1.25, -scale / 8., 0.), vec3(0., 0., 0.)) + scale / 4.\n        );\n    d -= 0.3;\n    return d;\n}\n\nfloat t(in vec3 p, in vec2 o) {\n    p.xy -= o;\n    float d = arc(p, vec2(-.35,-.6), 1., .4, -1.5);\n    d = min(d, line(p, vec3(-.35, -1., 0), vec3(.5, -1., 0)));\n    float scale = max(0., -p.x-.75);\n    d = min(d, \n        line(p, vec3(-1.55, -scale / 4., 0), vec3(0., 0., 0)) + scale / 3.\n        );\n    scale = max(0., p.y);\n    d = min(d, \n        line(p, vec3(-.75 , -.6, 0), vec3(-.75 - scale / 12., 1., 0)) + scale / 6.\n        );\n    d -= .3;\n    return d;\n}\n\nfloat i(in vec3 p, in vec2 o) {\n    p.xy -= o;\n    float scale = max(0., p.y);\n    float d = line(p, vec3(0, -1, 0), vec3(scale / 8., 1, 0)) + scale / 6.;scale = max(0., -p.x-.75);\n    scale = max(0., -p.x);\n    d = min(d, \n        line(p, vec3(-.75, -scale / 6., 0), vec3(0)) + scale / 4.\n        );\n    d -= .3;\n    return d;\n}\n\nfloat elli(in vec3 p) {\n    p.y -= p.x / 1.8;\n    p.y -= abs(p.y * 2.) * sign(-p.y);\n    float d = torus(p, vec2(4, 0));\n    return abs(d) - .15;\n}\n\nfloat tiffi(in vec3 p) {\n    float d = min(\n        t(p, vec2(-2., 0.)),\n        i(p, vec2(-1,0))\n        );\n    d = min(d, \n        f(p, vec2(.5, 0.))\n        );\n    d = min(d, \n        f(p, vec2(2.25, 0.))\n        );\n    d = min(d, \n        i(p, vec2(3.25,0))\n        );\n    return d;\n}\n\nvec2 df(in vec3 p) {\n    float d = tiffi(p);\n        \n    float d2 = tiffi(vec3(p.xy, 0.)) - .3;\n    vec2 q = vec2(d2, p.z);\n    d2 = length(q) - .15;\n    d2 = max(d2, \n        -min(\n            box(p-vec3(1.5,.5,0), vec3(1.5,.4,1), 0.),\n            box(p-vec3(-1.5,-.5,0), vec3(1., .4,1), 0.)\n        ));\n        \n    d2 = min(d2, \n        max(\n            elli(p),\n            -(d-.4)\n        ));\n    return d < d2 ? vec2(d, 0) : vec2(d2, 1);\n}\n\nvec3 norm(vec3 p) {\n    vec2 e = vec2(eps, 0.);\n    return normalize(vec3(\n        df(p + e.xyy).x - df(p - e.xyy).x,\n        df(p + e.yxy).x - df(p - e.yxy).x,\n        df(p + e.yyx).x - df(p - e.yyx).x\n    ));\n}\n\nvec3 rm(in vec3 p, vec3 d) {\n    for (int i=0; i<100; i++) {\n        vec2 dist = df(p);\n        if (dist.x < eps) {\n            break;\n        }\n        p += d * dist.x * .5;\n        \n        if (any(greaterThan(abs(p), vec3(4.25,2.75,.3)))) {\n            return vec3(-1);\n        }\n    }\n    \n    vec3 n = norm(p);\n    vec3 c = texture(iChannel0, reflect(d, n), 3.).rgb;\n    c = vec3((c.r+c.g+c.b) / 3.);\n    r2d(n.xz, -iTime);\n    c *= mix(vec3(1,.5,.5), vec3(.5,.5,1), -n.x * .5 + .5);\n    return c;\n}\n\nfloat intersectBox(vec3 p, vec3 d, vec3 s) {\n\n\tvec3 a=(-s - p) / d, // near\n\tb = (s - p) / d, // far\n\tf = max(a, b), // furthest\n\tn = min(a, b); // nearest\n    \n\tfloat x=min(f.x,min(f.y,f.z)), // furthest plane\n\ty = max(n.x,max(n.y,n.z)), // nearest plane\n\to = y<0. ? x : y; // nearest in front\n\tif(y >= x || o < 0.) return -1.;\n\treturn max(n.x, max(n.y, n.z)); // nearest plane\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.yy;\n    \n    vec3 p = vec3(0, 0, -10),\n    d = normalize(vec3(uv, 3.));\n    r2d(p.xz, iTime);\n    r2d(d.xz, iTime);\n    \n    vec3 col;\n    float dist = intersectBox(p, d, vec3(4.25,2.75,.3));\n    if (dist > 0.) {\n        p += d * dist;\n        col = rm(p, d);\n    } else {\n        col = vec3(-1);\n    }\n    \n    if (col.x < 0.) {\n        uv *= 4.;\n        vec2 c = floor(uv);\n        uv = fract(uv) * 2. - 1.;\n        r2d(uv, c.x + c.y + iTime * sign(sin(c.x) * sin(c.y)));\n        uv.y -= abs(uv.x) / 2.;\n        float l = sin(length(c) - iTime * 2.) * .5 + .5;\n        float d = length(uv) - l * .2 - .4;\n        d = abs(d);\n        col = d < 0.05 ? mix(vec3(.5,.5,1), vec3(1,.5,.5), l) : vec3(0);\n    } else {\n        col = pow(col, vec3(2.)) * 8.;\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}