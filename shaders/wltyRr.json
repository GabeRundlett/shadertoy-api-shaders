{
    "Shader": {
        "info": {
            "date": "1608404746",
            "description": "Explore the Julia set by moving the mouse over the Mandebrot set, and see which Julia sets correspond to which point in the Mandelbrot set.\n\nIf the mouse is not used, the point moves along the main cardioid.",
            "flags": 0,
            "hasliked": 0,
            "id": "wltyRr",
            "likes": 11,
            "name": "Julia set explorer",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "julia",
                "mandelbrot",
                "explore"
            ],
            "usePreview": 0,
            "username": "darkeclipz",
            "viewed": 633
        },
        "renderpass": [
            {
                "code": "// http://cosinekitty.com/mandel_orbits_analysis.html\n// main cardioid is c = e^{iθ}/2 − e^{2iθ}/4\n\n#define R iResolution.xy\n#define C fragCoord\n#define T iTime\n#define M iMouse\n\nfloat pixelSize = 0.;\nfloat pi = 3.14159;\nfloat e = 2.718281828459;\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos(6.28318 * (c*t + d));\n}\n\nvec3 color(float t) {\n    t = fract(2.*t + .5);\n    return pal(t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),\n                  vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20));\n}\n\nbool isBorder(vec2 uv) {\n    float w = 6.*pixelSize;\n    return uv.x > 1.0 - w || uv.x < -1.0 + w\n        || uv.y > 1.0 - w || uv.y < -1.0 + w;\n}\n\nbool inRect(vec2 p, vec4 rect) {\n    return p.x > rect.x && p.x < rect.x + rect.z\n        && p.y > rect.y && p.y < rect.y + rect.w;\n}\n\nvec2 rectUV(vec2 p, vec4 rect) {\n    return 2.0 * (p.xy - rect.xy) / rect.zw - vec2(1);\n}\n\nfloat map(vec2 z, vec2 c, float n) {\n    float b = 4., i=0.;\n    for(i=0.; i < n; i++) {\n        z = mat2(z, -z.y, z.x) * z + c;\n        if(dot(z, z) > b*b) break;\n\t}\n    return (i - log2(log2(dot(z, z)))) / n;\t    \n}\n\nvec3 mainRect1(vec2 uv) {\n    float t = map(vec2(0), uv, 64.);\n    return color(t);    \n}\n\nvec3 mainRect2(vec2 uv, vec2 p) {\n    float t = map(uv, p, 300.);\n    return color(t);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*C-R)/R.y;\n    pixelSize = 1./R.y;\n    vec2 mouse = (2.*M.xy-R)/R.y;\n    vec3 col = vec3(0);\n    col = texture(iChannel0, C.xy/R.y).xyz*0.15;\n    vec4 rect1 = vec4(-1.5, -0.7, 1.4, 1.4);\n    vec4 rect2 = vec4(0.1, -0.7, 1.4, 1.4);\n    vec2 offset = vec2(0.7, 0);\n    float scale = 1.3;\n    \n    if(iMouse.z < 1.0) {\n        float theta = 2.0 * pi * fract((T + 136.) / 400.);\n        float s2 = sin(theta/2.0);\n        vec2 c = vec2(0.25 * (2.0 * cos(theta) - cos(2.0 * theta)), sin(theta)*s2*s2);\n        mouse = 1.007 * 1./scale * 1.4 / 2. * c - offset + vec2(0.2765,0);\n    }\n    \n    if(inRect(uv, rect1)) {\n        vec2 uvr1 = rectUV(uv, rect1);\n        col = mainRect1(scale*uvr1 - offset); \n        if(isBorder(uvr1)) {\n            col = vec3(1);\n        }\n    }\n    \n    if(inRect(uv, rect2)) {\n        vec2 uvr2 = rectUV(uv, rect2);\n        col = mainRect2(scale*uvr2, scale*rectUV(mouse, rect1) - offset);\n        if(isBorder(uvr2)) {\n            col = vec3(1);\n        }\n    }\n    \n    if(length(uv - mouse.xy) < 16.*pixelSize) {\n        col = vec3(1, 0, 0);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}