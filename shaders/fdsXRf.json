{
    "Shader": {
        "info": {
            "date": "1618968075",
            "description": "Something I've wanted for a while, visualizer here:\n[url]https://www.desmos.com/calculator/j6h3ket3hw[/url]\n\nI used it in this shader if you want a cooler example:\n[url]https://www.shadertoy.com/view/fssXzj[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "fdsXRf",
            "likes": 4,
            "name": "Stepped Time Remapping Functions",
            "published": 3,
            "tags": [
                "example",
                "tutorial"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n//Thanks to Alan Wolfe in the shadertoy discord for suggesting to use monotonically increasing functions for this.\n\n//Play with the function here\n//https://www.desmos.com/calculator/j6h3ket3hw\n\n//t = initial Time\n//s1 = speed 1\n//s2 = speed 2\n//c = smoothing factor (1-30 works well)\nfloat timeRemap (float t, float s1, float s2, float c){\n    return 0.5*((s1-s2)*sqrt(c*c+1.0)*asin((c*cos(pi*t))/ sqrt(c*c+1.0))+(s1+s2)*c*t*pi)/(c*pi);\n}\n\n//Simpler version, same as before but c ranges from 0 to 3 ish (0.0-0.3 works best)\nfloat timeRemap2 (float t,float s1, float s2, float c){\n    return 0.5*(s2-s1)*(t-asin(cos(t*pi)/sqrt(c*c+1.0))/pi)+s1*t;\n    \n}\n//Same thing but without the smoothing\nfloat timeRemapEasy (float t, float s1, float s2){\n    return (s1-s2)*(fract(t)*step(1.0,mod(t,2.0))+floor(t*0.5))+t*s2;\n}\n\n//Worse version of the smoothing one but might be easier to remember?\nfloat timeRemapScuffed (float t, float s1, float s2){\nreturn (s1-s2)*(smoothstep(0.0,1.0,fract(t))*step(1.0,mod(t,2.0))+floor(t*0.5))+t*s2;}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    float t = iTime*0.25;\n    vec3 col =vec3(0);\n    \n    \n    float speed1 = 15.0;\n    float speed2 = -2.0;\n    t = timeRemap2(t, speed1, speed2, 0.1)*4.0;\n    \n    //Crappy visualizer for the function (just look at the desmos link)\n    vec2 uv2=uv*15.0;\n    uv2.y += timeRemap2(-uv2.x, sin(iTime), cos(iTime), 0.1)*4.0;\n    col += vec3(step(max(abs(uv2.x)-5.0,abs(uv2.y)),0.3),0,0);\n    \n    uv*=rot(t);\n    col += vec3(step(length(uv+vec2(0,0.3)),0.075));\n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}