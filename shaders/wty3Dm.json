{
    "Shader": {
        "info": {
            "date": "1579073308",
            "description": "A simple ocean scene.",
            "flags": 0,
            "hasliked": 0,
            "id": "wty3Dm",
            "likes": 21,
            "name": "Dark Ocean",
            "published": 3,
            "tags": [
                "noise",
                "raymarch",
                "water",
                "ocean"
            ],
            "usePreview": 0,
            "username": "kstyler",
            "viewed": 797
        },
        "renderpass": [
            {
                "code": "const int MAX_DIST = 300;\nconst float EPSI = 0.009;\n\nfloat random(vec2 p){\n\treturn(fract(sin(p.x*431.+p.y*707.)*7443.));\n}\n\nfloat noise(vec2 uv){\n\tvec2 id = floor(uv*10.);\n    vec2 lc = smoothstep(0.,1.,fract(uv*10.));\n    \n    float a = random(id);\n    float b = random(id + vec2(1.,0.));\n    float c = random(id + vec2(0.,1.));\n    float d = random(id + vec2(1.,1.));\n    \n    float ud = mix(a,b,lc.x);\n    float lr = mix(c,d,lc.x);\n    float fin = mix(ud,lr,lc.y);\n    return fin;\n}\n\nfloat octaves(vec2 uv){\n    float amp = 0.5;\n    float f = 0.;\n    for(int i =1; i<5;i++){\n    \tf+=noise(uv)*amp;\n        uv*=2.;\n        amp*=0.5;\n    }\n    return f;\n}\nfloat SDF(vec3 p){\n    vec3 spherePos = vec3(8,6,25);\n    float sphere = length(p-spherePos)-1.;\n    float water = p.y+8.+octaves((p.xz/30.)+(iTime/10.)+sin(length(p.xz*2.))*.04);\n    float mindst = min(water,sphere);\n    return mindst;\n}\n\nfloat rayMarcher(vec3 ro, vec3 rd){\n\tfloat tot = 0.;\n    for(int i=0;i<MAX_DIST;i++){\n    \tvec3 p = ro+rd*tot;\n        float diff = SDF(p);\n        tot+=diff;\n        if(diff<EPSI || tot>float(MAX_DIST)){\n        \ttot = float(i)/float(MAX_DIST-50);\n            break;\n        }\n    }\n    return tot;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){     \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x; \n    vec3 ro = vec3(0,0,-8);\n    vec3 rd= normalize(vec3(uv,1.)); \n    vec3 col = vec3(rayMarcher(ro,rd)); \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}