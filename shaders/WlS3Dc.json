{
    "Shader": {
        "info": {
            "date": "1561310818",
            "description": "Some result of me tinkering around with BPM stuff, 120BPM.\n(Needs A LOT of optimizations here, I'm just too lazy to do it.. for now.)",
            "flags": 32,
            "hasliked": 0,
            "id": "WlS3Dc",
            "likes": 5,
            "name": "BPM stuff",
            "published": 3,
            "tags": [
                "beat"
            ],
            "usePreview": 0,
            "username": "zikbakguru",
            "viewed": 629
        },
        "renderpass": [
            {
                "code": "// Bloom\n\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand (vec2 n)\n{ \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 n)\n{\n\tconst vec2 d = vec2(0.0, 1.0);\n  \tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixelSz = vec2(1.0) / iResolution.xy;\n    \n\tvec2 uv = fragCoord / iResolution.xy;\n    vec4 final = texture(iChannel0, uv);\n    \n    const float stepsize = 0.1;\n    const float stepmult = stepsize * 0.5;\n    float samplescale = pixelSz.x * 64.0;\n    \n    for (float i=0.0; i<= 1.0; i+= stepsize)\n    {\n        float bias = i - 0.5;\n        float samplerand = rand(uv) - 0.5;\n        vec2 sampleuv = vec2(bias * samplescale + samplerand * samplescale, 0.0);\n        \n        final += texture(iChannel0, uv + sampleuv) * stepmult * (1.0 - abs(samplerand));\n        final += texture(iChannel0, uv - sampleuv) * stepmult * (1.0 - abs(samplerand));\n    }\n    \n    final.xyz = clamp(final.xyz, 0.0, 1.0);\n    final.a = 1.0;\n    fragColor = final;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14\n#define PI_2 6.28\n\nfloat getPoly (vec2 uv, float gonSide, float gonAngle, float thickness, float percent)\n{\n    // N-Gon from : https://thndl.com/square-shaped-shaders.html\n    float gonSlice = 6.28319 / gonSide;\n    float gonSize = percent;\n    float gonWidth = thickness;\n  \t\n    vec2 deltaUV = vec2(0.5) - uv;\n    float deltaAngle = atan(deltaUV.x,deltaUV.y) + (gonAngle / PI);\n    float dist = cos(floor(.5 + deltaAngle / gonSlice) * gonSlice - deltaAngle) * length(deltaUV.xy) * 2.0;\n    return min(smoothstep(gonSize - gonWidth - 0.001, gonSize - gonWidth, dist), smoothstep(gonSize + gonWidth, gonSize + gonWidth - 0.001, dist));\n}\n\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand (vec2 n)\n{ \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 n)\n{\n\tconst vec2 d = vec2(0.0, 1.0);\n  \tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 final = vec4(vec3(0.0), 1.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uvOrig = fragCoord / iResolution.xy;\n    vec2 ctDelta = uvOrig - vec2(0.5);\n    float ctLen = length(ctDelta);\n    vec2 ctDir = normalize(ctDelta);\n    \n    // Aspect ratio corrected uv\n    vec2 uv = uvOrig;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\tuv += 0.5;\n    \n    // Beat?\n    const float BPM = 120.0;\n    const float BPS = 60.0 / BPM;\n    const float BPS2 = BPS * 2.0;\n    float beatDelta = mod(iTime, BPS) / BPS;\n    float beatDelta2 = mod(iTime, BPS2) / BPS2;\n    float beatIncr = 3.0 + mod(floor(iTime / BPS), 4.0);\n    float beatIncr2 = 3.0 + mod(floor(iTime / BPS2), 4.0);\n    \n    float beatTime = iTime / BPS;\n    float powerBeat = pow(1.0 - beatDelta, 1.4);\n    \n    // Flashy background\n    float bgr = mod(beatIncr, 6.0) / 6.0;\n    vec3 flash = vec3(sin(iTime * 2.0 + 60.0) * 0.5 + 0.5, cos(iTime * 4.0 + 0.5) * 0.5 + 0.5, abs(sin(iTime))) * 0.4 * pow(1.0 - beatDelta, 3.0);\n    final.xyz = flash * (uv.y + sin(uv.x * 10.0) * 0.05);\n    \n    // Rad BG\n    float radRand = rand(vec2(floor(uv.x * 8.0) / 8.0, beatIncr));\n    vec2 raduv = vec2(uv.x, min(uv.y + radRand * 0.5, 1.0));\n    \n    float radIntensity = pow(min(powerBeat + radRand * 0.3, 1.0), 2.0) * 0.52 + abs(sin(beatTime * 10.0 + radRand * 42.0)) * 0.1;\n    float radDelta = 1.0 - abs(radIntensity - raduv.y) * 2.0;\n    float radPercent = max(round(sin(raduv.y * 128.0) * pow(radDelta, 2.0)) * pow(max(radDelta, 0.0), 6.0), smoothstep(radIntensity, radIntensity - 0.001, raduv.y));\n    // radPercent *= pow(radDelta, 3.0);\n    \n    vec3 radColour = mix(vec3(0.0), vec3(0.9, 0.55, 0.15) * (1.0 + radRand * 0.1), radPercent);\n    final.xyz += radColour * (1.0 + noise(uv * 5.0 + iTime) * 0.4 + noise(uv * 100.0 + iTime) * 0.9);\n    \n    // BG with stars?\n    float ctAngle = atan(ctDir.y, ctDir.x) / PI_2 + 0.5;\n    float starSamp = smoothstep(0.98, 1.0, noise(vec2(ctAngle * 2.0, ctLen * 0.05 - beatTime * 0.05) * 100.0));\n    final.xyz += starSamp;\n    final.xyz = clamp(final.xyz, 0.0, 1.0);\n    // vec3 stars = vec3(starSamp);\n    \n    // rotato potato\n    // N-Gon from : https://thndl.com/square-shaped-shaders.html\n    float gon1Side = beatIncr; // sides\n    float gon1Angle = beatDelta * 4.0 - 2.0;\n    float gon2Angle = beatDelta2 * 4.0 - 2.0;\n    float gon1Width = 0.01 + pow(beatDelta, 3.0) * 0.1;\n    \n    float t1 = (beatDelta + abs(sin(beatDelta * 5.0)) * 0.2) / 1.2;\n    float gon1Size = pow(1.0 - pow(1.0 - t1, 1.0), 3.0) * 2.0;\n    float gon2Size = pow(1.0 - pow(1.0 - beatDelta2, 0.5), 2.5) * 2.0;\n    \n    float gon1 = getPoly(uv, gon1Side, gon1Angle, gon1Width, gon1Size);\n    float gon2 = getPoly(uv, gon1Side + 1.0, gon2Angle, 0.01, gon2Size);\n    \n    /*\n    float gonSlice = 6.28319 / gonSide;\n    float gonSize = pow(1.0 - pow(1.0 - beatDelta, 0.5), 2.5) * 1.4;\n    float gonWidth = 0.01;\n  \t\n    vec2 deltaUV = vec2(0.5) - uv;\n    float deltaAngle = atan(deltaUV.x,deltaUV.y) + (gonAngle / PI);\n    float dist = cos(floor(.5 + deltaAngle / gonSlice) * gonSlice - deltaAngle) * length(deltaUV.xy) * 2.0;\n    //dist = smoothstep(gonSize, gonSize + 0.01, cos(floor(.5 + deltaAngle / gonSlice) * gonSlice - deltaAngle) * length(deltaUV.xy));\n    \n    //final.xyz = vec3(round(dist));\n    //line = min(smoothstep(impulseT + impulseWid ,impulseT + impulseWid - 0.001, dist), smoothstep(impulseT - impulseWid - 0.001, impulseT - impulseWid, dist));\n    float sub = mod(beatIncr, 2.0);\n    float line = min(smoothstep(gonSize - gonWidth - 0.001, gonSize - gonWidth, dist), smoothstep(gonSize + gonWidth, gonSize + gonWidth - 0.001, dist));\n\t*/\n    final.xyz = mix(final.xyz, vec3(1.0), gon1);\n    final.xyz += vec3(fract(0.5 - bgr), bgr, 0.5) * 0.25 * gon2; //mix(final.xyz, vec3(fract(0.5 - bgr), bgr, 0.5), gon2 * 0.2);\n    \n    for (float i=0.1; i<=1.0; i+=0.1)\n    {\n        float disp = 1.0 - pow(1.0 - i, 3.0);\n        \n        float gon3Size = pow(1.0 - pow(1.0 - t1 - 0.1 * disp, 1.0), 3.0) * 2.0;\n        float gon3 = getPoly(uv, gon1Side, gon1Angle, gon1Width * 0.3 * i, gon3Size - 0.2);\n    \tfinal.xyz += vec3(sin(iTime * 2.0 + 60.0), tan(iTime * 4.0 + 0.5), abs(sin(iTime))) * gon3 * disp;\n        // final.xyz = mix(final.xyz, vec3(sin(iTime * 2.0 + 60.0), tan(iTime * 4.0 + 0.5), abs(sin(iTime))), gon3);\n    }\n    \n    // Output to screen\n    final.xyz = clamp(final.xyz, 0.0, 1.0);\n    final.a = 1.0;\n    fragColor = final;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}