{
    "Shader": {
        "info": {
            "date": "1646428269",
            "description": "false fire test",
            "flags": 0,
            "hasliked": 0,
            "id": "NsjfDw",
            "likes": 6,
            "name": "false fire test-3d",
            "published": 3,
            "tags": [
                "falsefiretest"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "//cambios por jorge flores p.---->jorge2017a2\n//23-feb-2022\n//----falta depurar\n\n//---------image------\n#define MIN_DIST 0.001\n#define MAX_DIST 100.\n#define PI 3.1415926535\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\n\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nvec2 GetDist(vec3 p , bool opcbln )\n{\n\tvec3 res= vec3(9999.0, -1.0,-1.0);  vec3 pp=p;\n    \n   if(opcbln==true)\n   {\n   float d1= sdBox(p-vec3(0.0,5.0,0.0), vec3(10.0,6.0,0.5) );\n   res =opU3(res, vec3(d1,68.0,-1.0));\n   }    \n   else\n    {\n\tfloat planeDist1 = p.y+0.0;  //piso inf\n    float planeDist2 = 50.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared frente\n    float planeDist6 = p.z+40.0;  //pared atras\n    \n    res =opU3(res, vec3(planeDist1,57.0,7.0)); //inf\n    //res =opU3(res, vec3(planeDist1,67.0,7.0)); //inf\n    /*\n    res =opU3(res, vec3(planeDist2,14.0,-1)); \n    res =opU3(res, vec3(planeDist3,2.0,-1.0)); \n    res =opU3(res, vec3(planeDist4,3.0,-1.0)); \n    res =opU3(res, vec3(planeDist5,4.0,-1.0)); \n    res =opU3(res, vec3(planeDist6,5.0,-1.0)); \n   \n   */\n   /* \n    res =opU3(res, vec3(planeDist2,67.0,-1.0)); \n    res =opU3(res, vec3(planeDist3,66.0,-1.0)); \n    res =opU3(res, vec3(planeDist4,66.0,-1.0)); \n    res =opU3(res, vec3(planeDist5,65.0,-1.0)); \n    res =opU3(res, vec3(planeDist6,65.0,-1.0));\n    */\n    \n   p.y=p.y-5.0;\n   }\n   \n   \n    return vec2(res.x, res.y);\n   \n}\n\n// basic trace, with some LOD\nvec2 RayMarch(vec3 ro, vec3 rd, float m, bool opcbln) {\n    float t;\n\tvec2 d = vec2(9999.0,-1.0);\n    \n\tfor(int i = 0; i < 200; i++) {\n\t\td = GetDist(ro + rd*t, opcbln);\n\t\tif(d.x < (0.001 + 0.0001*t) || t >= m) break;\n        t += d.x*0.67;\n\t}\n\treturn vec2(t,d.y);\n}\n\nvec3 GetNormal(vec3 p)\n{   \n    bool opcbln=false;\n    float d = GetDist(p, opcbln).x;\n    vec2 e = vec2(0.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy,opcbln).x,GetDist(p-e.yxy,opcbln).x,GetDist(p-e.yyx,opcbln).x);\n    return normalize(n);\n}\n\nfloat getSoftShadow(vec3 p, vec3 lightPos)\n{   float res = 1.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    bool opcbln=false;\n    \n    for (int i = 0; i < 15; i++) {\n        float hit = GetDist(p + lightPos * dist,opcbln).x;\n        res = min(res, hit / (dist * lightSize));\n        dist += hit;\n        if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat ambOcclusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {\n        float hr = 0.01 + float(i) * 0.5 / 4.0;\n        float dd = GetDist(nor * hr + pos,false).x;\n        occ += (hr - dd)*sca;\n        sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );\n}\n\n//euclidean cameras.\nmat3 camera(vec3 o, vec3 l) \n{\tvec3 w = normalize(l - o);\n\tvec3 u = normalize(cross(vec3(0, 1, 0), w));\n\tvec3 v = normalize(cross(w, u));\t\n\treturn mat3(u, v, w);\n}\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n}\n\nvec3 lightingv3(vec3 normal,vec3 p,vec3 lp,vec3 rd, vec3 ro, vec3 color )\n{   vec3 lightPos=lp;\n    vec3 hit=p;\n    vec3 norm=normal;\n    \n    vec3 light = lightPos - hit;\n    float lightDist = max(length(light), .001);\n    float atten = 1. / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    light /= lightDist;\n    \n    vec3 R = reflect(-light, norm);\n    vec3 V = -rd;\n    \n    // shadows\n    float shadow = getSoftShadow(hit, normalize(lightPos));\n    // occ\n    float occ = ambOcclusion(hit, norm);\n    \n    vec3 ambient= 0.5*color*clamp(0.5 + 0.5*norm.y, 0.0, 1.0);\n    vec3 fresnel =  color *  pow(clamp(1.0 + dot(rd, norm), 0.0, 1.0), 2.0);;\n    \n    float dif = clamp(dot(norm, light), 0.0, 1.0);\n    dif = pow(dif, 4.) * 2.;\n    vec3 diffuse =  color * dif;\n    \n    float specular = pow(max(dot(R, V), 0.), 8.);\n     // back\n    vec3 back = 0.5 * color * clamp(dot(norm, -light), 0.0, 1.0);\n       vec3 colOut = occ*color*(ambient+diffuse*shadow+.35 +back) + vec3(.7,.9,1)*specular*specular;\n   return colOut;\n}\n\n\nvec3 Sinusfire( in vec2 fragCoord )\n{\n\tvec2 uv = ( fragCoord.xy -.2*iResolution.xy )/iResolution.y;\n    //vec2 uv=fragCoord;\n\tfloat x = uv.x*5.;\n\tfloat y = uv.y*12.;\n\tfloat m = 1.-(y*9.)*(13.+sin(-iTime/4.)*.6)*.7+cos(y*1.+x*2.-iTime*9.)*cos(y*1.2-x*6.-iTime+sin(x*5.-y*.4-iTime*2.)+sin(iTime/15.-y*6.+x*6.)/3.)*98.;\n\treturn vec3( m*.016,m*.005,m*.0012);\n}\n\n\n\nvec3 GetColor(vec3 p, float id_color)\n{  vec3 color; \n   if(id_color<50.0)\n   { color=getColor(int(id_color)); }  \n        \n   if(id_color==57.0)\n   { color =vec3(1.0)*( 0.2 + 0.5*mod(floor(p.x*0.25) + floor(p.z*0.25), 2.0));}\n   \n   \n   \n   if (id_color==68.)\n   //{ color =Sinusfire(p.xy*0.125-vec2(0.0,0.25)); }\n   { color =Sinusfire(p.xy*8.0-vec2(0.0,0.25)); }\n   \n   return color;\n}\n\nvec3 render(vec3 ro, vec3 rd) \n{\n    vec3 col = vec3(0.45, 0.8, 1.0);\n\tvec3 lig1 = normalize(vec3(10.8, 10.0, -15.6));\n    vec3 lig2 = normalize(vec3(0.0, 60., 25.6));\n    vec2 t;\n    vec3 rcol = vec3(0);\n    vec3 ro2,rd2;\n    ro2=ro;\n    rd2=rd;\n    \n    \t//for(int i = 0; i < 3; i++) \n        for(int i = 0; i < 1; i++) \n        {\n\t\t t = RayMarch(ro, rd, MAX_DIST,false);\n\t\tif(t.x < MAX_DIST) \n        {\n\t\t\t\n            // geometry, hit position, normal, reflect\n\t\t\tvec3 pos = ro + rd*t.x;\n\t\t\tvec3 nor = GetNormal(pos);\n\t\t\tvec3 ref = reflect(rd, nor);\n              vec3 color= GetColor(pos,t.y);\n              \n            \n                rcol= lightingv3(nor,pos,lig1,rd, ro, color );\n                rcol+= lightingv3(nor,pos,lig2,rd, ro, color );\n                rcol/=2.0;\n            \n            \n            // lighten intensity on each successive reflect.\n\t\t\tif(i == 0)\n               col = rcol;\n\t\t\telse\n               col = mix(rcol, col, 1.0 - exp(-0.8*float(i)));\n\t\t}\n        else if(t.x>MAX_DIST)\n        col = mix(render_sky_color(rd), col, 1.0 - exp(-0.8*float(i)));\n    \n\t}\n    \n    \n    ///segundo\n    int j;\n    t = RayMarch(ro2, rd2, MAX_DIST,true);\n\t\tif(t.x < MAX_DIST) \n        {\n            // geometry, hit position, normal, reflect\n\t\t\tvec3 pos = ro2 + rd2*t.x;\n\t\t\tvec3 nor = GetNormal(pos);\n\t\t\tvec3 ref = reflect(rd2, nor);\n              vec3 color= GetColor(pos,t.y)/2.0;\n                rcol= lightingv3(nor,pos,lig1,rd2, ro2, color );\n                rcol+= lightingv3(nor,pos,lig2,rd2, ro2, color );\n                rcol/=2.0;\n           \n            // lighten intensity on each successive reflect.\n\t\t\tif(j == 0)\n               col=(col+ rcol)/2.0;\n\t\t\telse\n               col= mix(rcol/2.0, col/2.0, 1.0 - exp(-0.8*float(j)));\n\t\t}\n       \n    \n    return col;\n}\n\n\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43; \n    d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nRay RotarEnCirculo(vec3 ro,vec3 rd)\n{\n   float r=28.0;\n   float veltime=30.0;  \n    float tt = radians( -iTime*veltime);\n    vec3  pos=vec3(0.0,0.0,10.0);\n    vec3 rotation1 = pos+vec3(r*sin(tt), 0.0, r*cos(tt));\n    ro +=rotation1;   \n    rd=rotate_y( vec3(-rd.x,rd.y,-rd.z), tt);\n    return  Ray(ro,rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tvec2 p = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro=vec3(0.0,8.0,-15.0);\n    vec3 rd=normalize(vec3(p,1.0));\n      Ray ray= RotarEnCirculo(ro,rd);\n    ro=ray.ro;\n    rd=ray.rd;\n   \n     vec3 col= render(ro, rd);\n \tcol= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n\tfragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct Ray\n{   vec3 ro; // origin\n    vec3 rd; // direction\n};\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(1.,1.,1.), //1\nvec3(1,0,0),  //2\nvec3(0,1,0),   //3\nvec3(0,0,1),   //4\nvec3(1,1,0),  //5\nvec3(0,1,1),  //6 \nvec3(1,0,1),   //7\nvec3(0.7529,0.7529,0.7529),  //8\nvec3(0.5,0.5,0.5),  //9\nvec3(0.5,0,0),   //10\nvec3(0.5,0.5,0.0),  //11\nvec3(0,0.5,0),   //12\nvec3(0.5,0,0.5),  //13\nvec3(0,0.5,0.5),  //14\nvec3(0,0,0.5),    //15\nvec3(1.0, 0.8, 0.737),  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(0.968,0.6588,  0.721),  //21\nvec3(0, 1, 1),                           //22 \nvec3(0.333, 0.803, 0.988),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9) \n);\n\nvec3 getColor(int i)\n{    \n   // if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}