{
    "Shader": {
        "info": {
            "date": "1599462286",
            "description": "Application of [url]https://shadertoy.com/view/3ljfRG[/url]\noversample only near the drawing. Left: none, for reference.\nMouse.x : ref separator \nSPACE: show where oversampling is done ( B&W area - colors where LOD#0 )",
            "flags": 48,
            "hasliked": 0,
            "id": "tlBfR3",
            "likes": 8,
            "name": "easy adaptive sampling: Mandelbr",
            "published": 3,
            "tags": [
                "antialiasing",
                "sampling",
                "optimization",
                "adaptive",
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 502
        },
        "renderpass": [
            {
                "code": "// Fork of \"easy adaptive sampling : hexamaz\" by FabriceNeyret2. https://shadertoy.com/view/3l2BzV\n// 2020-09-07 06:48:03\n\n// variant of https://shadertoy.com/view/WtjBzV\n// adapted from https://shadertoy.com/view/3ljfRG\n\n#define N 5      // pixel oversampling NxN ( only where necessary )\n#define eps 1e-2 // similarity threshold, is case of continuous mask\n\n//#define T(U,l)          texelFetch(iChannel0, ivec2(U)>>l, l)\n  #define T(U,l)          textureLod(iChannel0, (U)/R, float(l-1) )\n  #define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\n\nvoid mainImage(out vec4 O, vec2 u) {\n    O -= O;\n    float n = float(N),\n          S = 1. / R.y / exp2(iTime),\n          s = iMouse.z>0. ? iMouse.x : R.x/2.;\n       // m = T( U, 2 ).w;             // check neighborhood. Here: LOD #2 of mask\n    vec2 U = S* ( 2.*u - R );\n\n    if ( u.x > s\n     //  && length(T(u,2)-T(u,0)) > eps ) {  // neighborhood does not agree\n         && abs(T(u,2)-T(u,0)).w > eps ) { \n // if ( true ) {                      // for bench: always oversample\n        for (int k=0; k<N*N; k++) {    // --- oversampling\n            vec2 D = ( vec2(k%N,k/N) - float(N-1)/2. ) / n; // subpixel\n            O += f( U +  D*2.*S );\n        }\n        O /= n*n;\n    }\n    else                               // LOD#0 is ok\n        O = keyToggle(32)              // SPACE: show red/blue where not oversampled\n        ? T( u, 0 ).w == 1. ? vec4(1,0,0,1) : vec4(0,0,1,1)\n        : T( u, 0 );\n      \n    if ( abs(u.x-s) < 1. ) O = vec4(1,0,0,1); // red separator\n  //O = pow( O, vec4(1./2.2) );        // to sRGB\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- custom function or image or render\n\n#define R  iResolution.xy\n\n// --- Mandelbrot\n\nvec4 f( vec2 U ) {\n    vec2 z = vec2(0),\n         c = vec2(-.74502,.1860105) + U;\n    float i = 0.;\n    for (; i < 150.; i++) {\n        z = mat2(z,-z.y,z.x) * z + c;\n        if ( dot(z,z) > 4. ) break; \n    }\n    return vec4(  (1.-i/150.)\n                 *( .6 + .6 * cos( 6.3*i/25.  + vec3(0,23,21) ) ), // hue https://www.shadertoy.com/view/ll2cDc\n                 i );\n}\n   ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// --- evaluate the function everywhere at pixel resolution\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 U = ( 2.*u - R ) / R.y / exp2(iTime);\n    O = f(U);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}