{
    "Shader": {
        "info": {
            "date": "1631290190",
            "description": "My attempt at creating the hilbert curve fractal. Hacked the function of the Hilbertcurve together, until it worked.",
            "flags": 0,
            "hasliked": 0,
            "id": "wl2SzV",
            "likes": 15,
            "name": "Parametrized Hilbert Curve SDF",
            "published": 3,
            "tags": [
                "fractal",
                "spacefillingcurve"
            ],
            "usePreview": 0,
            "username": "Gegell",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "#define ITERATIONS 3\n#define LINE_THICKNESS .5\n\nvec3 hue(float h)\t{\n    h = fract(h);\n    float r = abs(h * 6. - 3.) - 1.;\n    float g = 2. - abs(h * 6. - 2.);\n    float b = 2. - abs(h * 6. - 4.);\n    return clamp(vec3(r, g, b), 0., 1.);\n}\n\nvec2 sdParamMin( vec2 a, vec2 b) {\n    if (a.x < b.x) {\n        return a;\n    }\n    return b;\n}\n\nvec2 sdParamLine( vec2 p, vec2 a, vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return vec2(length( pa - ba*h ), h);\n}\n\nvec2 sdParamU( vec2 uv ) {\n    vec2 mirUv = vec2(abs(.5 - uv.x), uv.y);\n    vec2 l1 = sdParamLine(mirUv, vec2(.25, .25), vec2( .25, .75));\n    vec2 l2 = sdParamLine(mirUv, vec2(.25, .75), vec2(-.25, .75));\n    \n    l1.y /= 3.;\n    l2.y = (l2.y + 1.) / 3.;\n    \n    vec2 res = sdParamMin(l1, l2);\n    if (uv.x > .5) {\n        res.y = 1. - res.y;\n    }\n\treturn res;\n}\n\n/*\n * Generate the distance to and parameter along a pseudo-hilbert curve \n * created with ITERATIONS many iterations.\n */\nvec2 sdParamHilbert( vec2 uv ) {\n    \n    vec2 pos = fract(uv);\n\n    float s = pow(2., float(ITERATIONS));\n    float o = .25 * pow(0.5, float(ITERATIONS));\n    \n    vec2 d = vec2(1e10, 0);\n    float totalSegments = pow(4., float(ITERATIONS+1)) - 1.;\n    float segmentsBefore = 0.;\n    float betweenOffset = pow(4., float(ITERATIONS));\n    \n    // Distort space so that only 1 U shape has to be calculated.\n    for (int i = 0; i < ITERATIONS; i++) {\n        ivec2 region = ivec2(floor(pos * 2.));\n        \n        // Add the connecting lines of the 4 parts.\n        vec2 scale = vec2(s, 1./totalSegments);\n        d = sdParamMin(d, (sdParamLine(pos, vec2(   o, .5-o), vec2(   o, .5+o)) + vec2(0., betweenOffset * 1. + segmentsBefore * 4. - 1.)) * scale);\n        d = sdParamMin(d, (sdParamLine(pos, vec2(.5-o, .5+o), vec2(.5+o, .5+o)) + vec2(0., betweenOffset * 2. + segmentsBefore * 4. - 1.)) * scale);\n        d = sdParamMin(d, (sdParamLine(pos, vec2(1.-o, .5+o), vec2(1.-o, .5-o)) + vec2(0., betweenOffset * 3. + segmentsBefore * 4. - 1.)) * scale);\n        \n        betweenOffset *= .25;\n        o *= 2.;\n        s *= .5;\n        \n        if (region.x < 1) {\n            if (region.y < 1) {\n                segmentsBefore += 0. * betweenOffset;\n            } else {\n                segmentsBefore += 1. * betweenOffset;\n            }\n        } else {\n            if (region.y < 1) {\n                segmentsBefore += 3. * betweenOffset;\n            } else {\n                segmentsBefore += 2. * betweenOffset;\n            }\n        }\n        \n        // Create sub tiles\n        pos = fract(pos * 2.);\n\n        // Rotate the lower 2 U shapes.\n        if (region.y < 1)  {\n            pos = pos.yx;\n            if (region.x >= 1) {\n                pos = 1. - pos;\n            }\n        }\n        \n    }\n    float paramOffset = segmentsBefore * 4. / totalSegments;\n    \n    // Evaluate the 1 U shape on the transformed position. \n    // Use its parameter for the connecting lines as well.\n    vec2 u = sdParamU(pos);\n    u.y = u.y / totalSegments * 3. + paramOffset;\n    return sdParamMin(d, u);\n}\n\n/*\n * Better tiling for the sdParamHilbert function. It aligns the multiple\n * pseudo-hilbert curves to better match the colors between them.\n */\nvec2 sdParamTiledHilbert( vec2 uv ) {\n\n    ivec2 tp = ivec2(floor(uv));\n    vec2 pos = fract(uv);\n    \n    // Rotate every curve on every second line by 180 degrees.\n    if ((tp.y & 1) == 1) {\n        // Dont use 1. here for inversion due to it being off by 1 pixel sometimes.\n        pos = 1. - 1e-7 - pos;\n    }\n    \n    vec2 res = sdParamHilbert(pos);\n    \n    // Reverse every second curve parameter. Like a checker board pattern. \n    if ((tp.x + tp.y & 1) == 1) {\n        res.y = 1. - res.y;\n    }\n    \n    return res;\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Centered normalized pixel coordinates (from 0 to 1 on y)\n    vec2 uv = ((2.*fragCoord-iResolution.xy)/min(iResolution.x, iResolution.y) + 1.)/2.;\n    \n    // Get distance and parameter to the hilbert curve.\n    vec2 d = sdParamTiledHilbert(uv);\n    \n    // Use the distance returned by the hilbert curve sdf to create the shape mask.\n    float smoothing = 2./length(iResolution.xy) * pow(2., float(ITERATIONS));\n    float mask = 1.-smoothstep(-smoothing, smoothing, d.x - LINE_THICKNESS/4.);\n    \n    // Cut out every tile other than the one in the center.\n    if (max(abs(uv.x-.5), abs(uv.y-.5)) > .5) mask = 0.;\n    \n    // Add ripples.\n    // mask *= .5+.5*cos(d.y * 6.2831 * 16. * pow(4., float(ITERATIONS)) - iTime *10.);\n    \n    // Use the parameter returned by the paramtrized hilbert curve to determine a color.\n    vec3 col = vec3(0.);\n    \n    // Black to white gradient. \n    // col = mix(vec3(.25), vec3(1.), d.y);\n    // Hue gradient.\n    col = hue(d.y);\n    \n    \n    // Apply the final mask.\n    col *= mask;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}