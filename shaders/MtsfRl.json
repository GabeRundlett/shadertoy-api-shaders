{
    "Shader": {
        "info": {
            "date": "1512991264",
            "description": "Open-plan library (mouseable, click in right upper/lower corners for other views)",
            "flags": 0,
            "hasliked": 0,
            "id": "MtsfRl",
            "likes": 14,
            "name": "Books and Stairs 2",
            "published": 3,
            "tags": [
                "stairs",
                "library",
                "cellmarching"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 659
        },
        "renderpass": [
            {
                "code": "// \"Books and Stairs 2\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 HsvToRgb (vec3 c);\nfloat RgbToVal (vec3 c);\nfloat Hashfv2 (vec2 p);\nfloat Hashfv3 (vec3 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\n\nvec3 bSize, qHit, ltPos, cId;\nfloat tCur, dstFar, stepCnt;\nint idObj;\nbool colImg, marchImg;\nconst float pi = 3.14159;\nconst int idFlr = 1, idCol = 2, idRail = 3, idStr = 4, idShlf = 5, idBk = 6, idLt = 7;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qr;\n  float dMin, d, stAng, r, a, s;\n  dMin = dstFar;\n  r = length (p.xz);\n  stAng = 0.5 * pi * floor (4. * Hashfv2 (cId.xz));\n  q = p;  q.y = 0.5 * bSize.y - 0.3 - abs (p.y);\n  d = max (q.y, 9.8 - r);\n  DMINQ (idFlr);\n  q.xz = abs (q.xz) - 15.;\n  q.y -= 0.1;\n  d = min (length (q.xz) - 0.6, PrCylDf (q.xzy, 1., 0.1));\n  DMIN (idCol);\n  qr = p;\n  qr.xz = Rot2D (qr.xz, stAng);\n  q = qr;\n  d = length (vec2 (r - 10.2, abs (q.y + 6.) - 1.3)) - 0.13;\n  d = max (d, 2. - abs (qr.z));\n  d = min (d, PrCylDf (vec3 (abs (q.x) - 10., q.y + 7.1, abs (q.z) - 2.).xzy, 0.25, 2.8));\n  q.xz = Rot2D (q.xz, 2. * pi / 32.);\n  a = (r > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (16. * a + 0.5) / 16.));\n  d = min (d, PrCylDf ((q + vec3 (10.2, + 7.2, 0.)).xzy, 0.13, 2.5));\n  q = qr;\n  q.xy = Rot2Cs (q.xy, vec2 (sqrt (0.5)));\n  d = min (d, max (length (vec2 (abs (q.y - 2.9) - 0.9, abs (q.z) - 2.)) - 0.13, abs (qr.x) - 10. ));\n  q = qr;  q.x += 20.;\n  q.xy = Rot2D (q.xy, 0.25 * pi);\n  d = min (d, max (length (vec2 (abs (q.y - 2.9) - 0.9, abs (q.z) - 2.)) - 0.13, abs (qr.x) - 10.));\n  DMIN (idRail);\n  q = qr;\n  q.xy = Rot2Cs (q.xy - vec2 (10., -10.), vec2 (sqrt (0.5)));\n  s = mod (q.x, 1. * sqrt (2.));\n  d = 0.5 * max (max (q.y - min (s, 1. * sqrt (2.) - s), abs (q.z) - 2.), -0.2 - q.y);\n  DMINQ (idStr);\n  q = p;  q.y -= -6.7;\n  s = min (abs (q.x), abs (q.z));\n  d = max (max (max (abs (r - 17.) - 1., abs (q.y) - 3.), 5. - s),\n     - max (max (abs (r - 16.) - 1.5, abs (abs (q.y) - 1.4) - 1.2), 5.5 - s));\n  DMINQ (idShlf);\n  d = max (max (abs (r - 17.) - 0.5, abs (q.y) - 2.8), 5.2 - s);\n  DMINQ (idBk);\n  q = p;  q.y -= 9.5;\n  d = length (vec2 (r - 11., q.y)) - 0.2;\n  q.xz = abs (q.xz) - 0.5 * bSize.xz;\n  d = min (d, PrCylDf (q.xzy, 2., 0.2));\n  DMIN (idLt);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi, s;\n  float dHit, d, eps;\n  eps = 0.0005;\n  dHit = eps;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  ro /= bSize;\n  rd /= bSize;\n  rdi = 1. / rd;\n  stepCnt = 0.;\n  for (int j = 0; j < 330; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p);\n    s = (cId + step (0., rd) - p) * rdi;\n    d = min (ObjDf (bSize * (p - (cId + 0.5))), abs (min (min (s.x, s.z), s.y)) + eps);\n    dHit += d;\n    ++ stepCnt;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  cId = floor (p / bSize);\n  p -= bSize * (cId + 0.5);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float ltDist)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 60; j ++) {\n    p = ro + d * rd;\n    cId = floor (p / bSize);\n    h = ObjDf (p - bSize * (cId + 0.5));\n    sh = min (sh, smoothstep (0., 0.08 * d, h));\n    d += clamp (h, 0.15, 0.3);\n    if (sh < 0.05 || d > ltDist) break;\n  }\n  return sh;\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float ao, d;\n  ao = 0.;\n  for (int j = 0; j < 8; j ++) {\n    d = 0.1 + float (j) / 16.;\n    p = ro + d * rd;\n    cId = floor (p / bSize);\n    ao += max (0., d - 3. * ObjDf (p - bSize * (cId + 0.5)));\n  }\n  return 0.5 + 0.5 * clamp (1. - 0.2 * ao, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, bgCol, ltVec, roo, vn;\n  vec2 vf, bt;\n  float dstObj, ltDist, sh, ao, atten, r, s, a;\n  bgCol = mix (0.9 * vec3 (0.2, 0.4, 0.5), vec3 (0.4) * (1. - 0.05 * Noisefv2 (512. * abs (rd.xy))),\n     smoothstep (-0.01, 0.01, rd.y)) * 1.2 / (1. + 0.002 * pow (dstFar, 1.5));\n  roo = ro;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    if (idObj == idFlr || idObj == idShlf || idObj == idBk) {\n      r = length (qHit.xz);\n      a = (r > 0.) ? atan (qHit.z, - qHit.x) / pi + 0.5 : 0.;\n    }\n    if (idObj == idFlr) {\n      if (vn.y > 0.99) {\n        objCol = vec4 (0.2, 0.4, 0.5, 0.1) * (1. - 0.3 * Fbm2 (2. * ro.xz)) *\n           (0.5 + 0.5 * SmoothBump (0.03, 0.97, 0.01, mod (r, 1.)));\n        objCol.rgb *= ((1. - 0.3 * smoothstep (1., 5., length (abs (qHit.xz) - 20.))) +\n           (1. - 0.3 * smoothstep (1., 5., r - 11.)));\n        vf = vec2 (32., 1.);\n      } else if (vn.y < -0.99) {\n        objCol = vec4 (vec3 (0.8) * (1. - 0.4 * smoothstep (3., 7., length (abs (qHit.xz) - 20.))) *\n           (1. - 0.4 * smoothstep (0., 4., r - 11.)), -1.);\n      } else {\n        objCol = vec4 (0.3, 0.3, 0.7, 0.1);\n        vf = vec2 (32., 1.);\n      }\n    } else if (idObj == idCol) {\n      objCol = vec4 (0.8, 0.8, 0.85, 0.05);\n      vf = vec2 (32., 1.);\n    } else if (idObj == idRail) {\n      objCol = vec4 (0.8, 0.8, 0.85, 0.2);\n      vf = vec2 (32., 0.2);\n    } else if (idObj == idStr) {\n      if (abs (qHit.z) > 1.9) {\n        objCol = vec4 (0.5, 0.55, 0.5, 0.1);\n        vf = vec2 (32., 0.2);\n      } else if (vn.y > -0.01) {\n        objCol = vec4 (0.2, 0.4, 0.5, 0.1) * (1. - 0.2 * Fbm2 (2. * ro.xz));\n        vf = vec2 (32., 0.2);\n      } else {\n        objCol = vec4 (0.6, 0.6, 0.6, -1.);\n      }\n    } else if (idObj == idShlf) {\n      objCol = vec4 (vec3 (0.7, 0.4, 0.2) * (0.5 + 0.5 * Fbm2 ((r > 17.99) ? vec2 (128. * a, 0.5 * qHit.y) :\n         ((abs (vn.y) < 0.01) ? vec2 (4. * r, 0.5 * qHit.y) : vec2 (32. * a, 4. * r)))), 0.1);\n      vf = vec2 (32., 0.1);\n      a = mod (4. * a + 0.5, 1.) - 0.5;\n      if (r > 17.99 && abs (a) < 0.07 && abs (qHit.y - 2.2) < 0.4) {\n        cId = floor (ro / bSize);\n        if (ShowInt (vec2 (- 10. * a - 0.5, 0.8 * (qHit.y - 2.)), vec2 (1., 0.25), 4.,\n           dot (mod (vec2 (66., 60.) + cId.xz, 100.), vec2 (100., 1.))) != 0.) \n           objCol = vec4 (0.2, 1., 0.2, -1.);\n      }\n    } else if (idObj == idBk) {\n      cId = floor (ro / bSize);\n      a *= 128.;\n      bt = floor (vec2 (16. * a, 16. * qHit.y));\n      s = Hashfv2 (vec2 (floor (a), 1. + floor (qHit.y / 2.8)));\n      qHit.y = mod (qHit.y / 2.8, 1.) / (0.95 - 0.3 * s);\n      if (qHit.y < 1.) {\n        a = mod (a, 1.);\n        objCol = vec4 (HsvToRgb (vec3 (mod (Hashfv3 (cId) + 0.2 * s, 1.), 1.,\n           0.7 * (0.5 + 0.5 * SmoothBump (0.05, 0.95, 0.02, a)))), 0.1);\n        objCol.rgb = mix (mix (objCol.rgb, vec3 (0.9, 0.9, 0.3), SmoothBump (0.2, 0.25, 0.01, qHit.y)),\n           vec3 (1., 1., 0.2), step (abs (qHit.y - 0.5), 0.15) *\n           step (abs (a - 0.5), 0.25) * step (0.5, Noisefv2 (cId.xz * vec2 (19., 31.) + bt)));\n        vn.xz = Rot2D (vn.xz, 0.5 * pi * (a - 0.5));\n      } else {\n        objCol = vec4 (0.02, 0.01, 0., -1.);\n      }\n    } else if (idObj == idLt) {\n      objCol = vec4 (vec3 (1., 1., 0.8) * (0.8 - 0.3 * vn.y), -1.);\n    }\n    ltVec = roo + ltPos - ro;\n    ltDist = length (ltVec);\n    atten = 1.2 / (1. + 0.002 * pow (ltDist, 1.5));\n    ltVec /= ltDist;\n    sh = 1.;\n    ao = 1.;\n    if (idObj != idBk) {\n      sh = 1. - 0.8 * (1. - ObjSShadow (ro, ltVec, ltDist)) * min (0.3 * atten, 1.);\n      ao = ObjAO (ro, vn);\n    }\n    if (objCol.a >= 0.) {\n      if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n      col = 0.2 * objCol.rgb;\n      if (idObj == idBk) col += 0.3 * objCol.rgb * (0.6 - 0.4 * dot (normalize (vn.xz), normalize (qHit.xz)));\n      col += sh * atten * (objCol.rgb * 0.8 * max (dot (vn, ltVec), 0.) +\n         objCol.a * pow (max (dot (normalize (ltVec - rd), vn), 0.), 32.));\n    } else col = objCol.rgb * (0.5 + 0.5 * atten);\n    col *= ao;\n    col = clamp (mix (bgCol, col, exp (32. * min (0., 0.7 - dstObj / dstFar))), 0., 1.);    \n  } else col = bgCol;\n  col = pow (col, vec3 (0.8));\n  if (! colImg) col = vec3 (0.9) * RgbToVal (col);\n  else if (marchImg) col = HsvToRgb (vec3 (0.7 * (1. - stepCnt / 300.), 1., 1.));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, asp;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  bSize = vec3 (40., 20., 40.);\n  az = 0.;\n  el = 0.;\n  colImg = true;\n  marchImg = false;\n  if (mPtr.z > 0. && mPtr.x > 0.4 && mPtr.y < -0.4) colImg = false;\n  if (mPtr.z > 0. && mPtr.x > 0.4 && mPtr.y > 0.4) marchImg = true;\n  if (mPtr.z > 0. && colImg && ! marchImg) {\n    az += 2. * pi * mPtr.x;\n    el += 0.7 * pi * mPtr.y;\n  } else {\n    el = -0.03 * pi;\n    az = 0.5 * pi * (2. * mod (floor (0.07 * tCur), 2.) - 1.) *\n       SmoothBump (0.2, 0.8, 0.1, mod (0.07 * tCur, 1.));\n  }\n  el = clamp (el, -0.45 * pi, 0.45 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -1.) + vec3 (0., 9., 4. * tCur);\n  asp = canvas.x / canvas.y;\n  uv.xy /= 1.8;\n  rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uv.x / asp)) * asp, uv.y, 1.));\n  ltPos = vuMat * vec3 (0., 1., -1.);\n  dstFar = 440.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nfloat RgbToVal (vec3 c)\n{\n  return max (c.r, max (c.g, c.b));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat DigSeg (vec2 q)\n{\n  return step (abs (q.x), 0.12) * step (abs (q.y), 0.6);\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.5, 2.2);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.)) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (sgn < 0.) {\n      if (idChar == mxChar - nDig - 1.) s = ShowDig (q, -1);\n      else ++ v;\n    }\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}