{
    "Shader": {
        "info": {
            "date": "1437848466",
            "description": "Example of http://patriciogonzalezvivo.com/2015/thebookofshaders/10/",
            "flags": 0,
            "hasliked": 0,
            "id": "4tXSz2",
            "likes": 31,
            "name": "Ikea's Data Path",
            "published": 3,
            "tags": [
                "random",
                "serial"
            ],
            "usePreview": 0,
            "username": "patriciogv",
            "viewed": 2120
        },
        "renderpass": [
            {
                "code": "// Copyright Patricio Gonzalez Vivo, 2015 - http://patriciogonzalezvivo.com/\n// I am the sole copyright owner of this Work.\n//\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n\nfloat random (in float x) {\n    return fract(sin(x)*1e4);\n}\n\nfloat random (in vec2 st) { \n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nfloat pattern(vec2 st, vec2 v, float t) {\n    vec2 p = floor(st+v);\n    return step(t, random(100.+p*.000001)+random(p.x)*0.5 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 st = fragCoord.xy / iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n\n    vec2 grid = vec2(100.0,50.);\n    st *= grid;\n    \n    vec2 ipos = floor(st);  // integer\n    vec2 fpos = fract(st);  // fraction\n    \n    vec2 vel = vec2(iTime*2.*max(grid.x,grid.y)); // time\n    vel *= vec2(-1.,0.0) * random(1.0+ipos.y); // direction\n\n    // Assign a random value base on the integer coord\n    vec2 offset = vec2(0.1,0.);\n\n    vec3 color = vec3(0.);\n    color.r = pattern(st+offset,vel,0.5+iMouse.x/iResolution.x);\n    color.g = pattern(st,vel,0.5+iMouse.x/iResolution.x);\n    color.b = pattern(st-offset,vel,0.5+iMouse.x/iResolution.x);\n\n    // Margins\n    color *= step(0.2,fpos.y);\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}