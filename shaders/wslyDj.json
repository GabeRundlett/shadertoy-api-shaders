{
    "Shader": {
        "info": {
            "date": "1585635588",
            "description": "Letting people go to next town.\n\nPlay with parameters in #Common :\n- epidemia propagates locally at rate #Contag\n- a proportion #Travel of people travel to the nearby areas  ( and might have a higher #ContagG )\n- Step: to slow down simulation",
            "flags": 32,
            "hasliked": 0,
            "id": "wslyDj",
            "likes": 5,
            "name": "multiscale epidemia simulation 3",
            "published": 3,
            "tags": [
                "simulation",
                "forestfire",
                "epidemia"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 437
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/wdlyDj\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    if (iFrame==0) { \n        O-=O; \n        if (floor(U) == floor(R/2.) )  O.x = 1.; // initial infection : 1\n      //if ( hash(U) < Init ) O.x = 1.;          // initial infection : random people\n        return; }\n    \n    O = T(U);                                    // recover previous state\n    \n    if ( iFrame % Step > 0 ) return;             // 1 step delay at a time\n    if ( O.x > 0. ) { O.x *= .95; return; }      // already contaminated \n    float n = 0.;                                // local propagation with probability #Contag\n\n    for ( int k=0; k<9; k++ ) \n        if( T(U+vec2(k%3,k/3)-1.).x > 0. ) n++;\n    if ( hash(U+iTime) < n*Contag ) O.x = 1., O.z = .3;  // contaminated\n    \n        // next-town propagation with probability #Contag\n    if ( hash(U-iTime) < Travel ) \n        if( T(U+Dist*(2.*hash2(U+iTime)-1.)).x > 0. )\n            O.x = 1., O.y = 1.;                  // contaminated\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float Contag = .1,      // probability of local transmission per step\n           ContagG = .1,      // probability of transmission for next-town travelers\n              Init = .0004,   // initial infection\n            Travel = .001,    // next-town travelers proportion\n              Dist = 50.;\nconst int     Step = 7 ;      // time step\n     \n#define R          iResolution.xy\n#define T(U)       texelFetch(iChannel0,ivec2(mod(U,R)),0)\n#define hash(p)  ( 1. - fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453) )\n#define hash2(p) ( 1. - fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123) )\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}