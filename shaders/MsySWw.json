{
    "Shader": {
        "info": {
            "date": "1464705960",
            "description": "glitch experiment",
            "flags": 32,
            "hasliked": 0,
            "id": "MsySWw",
            "likes": 20,
            "name": "Glitch Snake",
            "published": 3,
            "tags": [
                "glitch"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 1353
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 position = ( fragCoord.xy / iResolution.xy );\n    \n    float temp = 0.01;\n    float temp2 = 0.01;\n    temp *= sin(iTime*10.0)*1.0;\n    temp2 *= sin(iTime*10.0)*1.0;\n    vec4 col = \n        vec4\n        (\n       \t\ttexture(iChannel0, vec2(position.x+temp, position.y-temp)).r,\n            texture(iChannel0, vec2(position.x-temp2, position.y+temp2)).g,\n            texture(iChannel0, vec2(position.x-temp, position.y+temp)).b,\n            1.0\n        );\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define NEAR 0.01\n#define FAR 128.\n#define ITER 128\n#define NUM_NODES 6\nfloat tt;\nfloat atime;\nconst float PI = 3.14159265359;\nconst float DEG_TO_RAD = PI / 180.0;\n\nstruct BaseNode{\n    float x;\n    float y;\n    float size;\n    float deg;\n    float rad;\n};\nBaseNode nodes[NUM_NODES];\n\nfloat head  = 1.5;\nfloat girth = 6.0;\n\nfloat speedCoefficient = 0.09;    \n   \nfloat friction = 0.9;    \n\nfloat muscleRange = 15.0;\n\nfloat muscleFreq = 0.5;  \n\nfloat tv = 0.0;\n\nfloat theta = 0.0;\n\nfloat count = 0.0;\n\nmat4 matRotateX(float rad)\n{\n    return mat4(1,       0,        0,0,\n                0,cos(rad),-sin(rad),0,\n                0,sin(rad), cos(rad),0,\n                0,       0,        0,1);\n}\n\nmat4 matRotateY(float rad)\n{\n    return mat4( cos(rad),0,-sin(rad),0,\n                0,       1,        0,0,\n                sin(rad),0, cos(rad),0,\n                0,       0,        0,1);\n}\n\nmat4 matRotateZ(float rad)\n{\n    return mat4(cos(rad),-sin(rad),0,0,\n                sin(rad), cos(rad),0,0,\n                0,        0,1,0,\n                0,        0,0,1);\n}\n\nmat3 mat3RotateX(float rad)\n{\n    return mat3(1,       0,        0,\n                0,cos(rad),-sin(rad),\n                0,sin(rad), cos(rad));\n}\n\nvec4 combine(vec4 val1, vec4 val2 )\n{\n    if ( val1.w < val2.w ) return val1;\n    return val2;\n}\n\nvec4 mapFloor ( vec3 pos )\n{\n    vec4 ret = vec4(0.1,0.1,0.1,1.0);\n    ret.w = pos.y;\n    return ret;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat cubicInOut(float t) {\n    return t < 0.5\n        ? 4.0 * t * t * t\n        : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\nfloat mix2(float x, float y, bool a) {\n    return a ? y : x;\n}\n\nfloat atan2(in float y, in float x) {\n    bool s = (abs(x) > abs(y));\n    return mix2(3.14159265358979/2.0 - atan(x,y), atan(y,x), s);\n}\n\nvec4 map( vec3 pos, mat4 m)\n{\n    vec4 q = vec4(pos+vec3(0,0,-50.0),1.0)*m;\n    float rad = (iTime*2.0);\n    float deg = 360.0/float(NUM_NODES);\n\n    theta += iTime;\n    tv *= friction;\n\n    count += muscleFreq*0.5;\n    float thetaMuscle = muscleRange*sin(count);\n\n    vec3 bodyColor = vec3(0.5,0.5,0.5);\n    float dist = 16.0;\n    float sizeX = 5.0;\n    nodes[0].x = cos(iTime + 0.0 * PI/float(NUM_NODES))*dist;\n    nodes[0].y = sin(iTime + 0.0 * PI/float(NUM_NODES))*dist;\n\n    nodes[0].deg = (atan2(nodes[0].x,nodes[0].y)*180.0/PI);\n    nodes[0].rad = nodes[0].deg*DEG_TO_RAD;\n    nodes[0].size = 0.5;\n\n    vec4 rotatedPos1 = (q+vec4( nodes[0].x, 0, nodes[0].y, 1.0))*matRotateY(nodes[0].rad)*matRotateX(iTime*0.4);\n    vec4 val1 = vec4(bodyColor,sdBox(rotatedPos1.xyz, vec3(sizeX,nodes[0].size,nodes[0].size*2.0) ));\n\n    nodes[1].x = cos(iTime + 1.0 * PI/float(NUM_NODES))*dist;\n    nodes[1].y = sin(iTime + 1.0 * PI/float(NUM_NODES))*dist;\n\n    float dx2 = nodes[1].x - nodes[0].x;\n    float dy2 = nodes[1].y - nodes[0].y;\n    float d2 = sqrt(dx2 * dx2 + dy2 * dy2);\n    nodes[1].x += (dx2 * girth) / d2;\n\n    nodes[1].deg = (atan2(nodes[1].x,nodes[1].y)*180.0/PI);\n    nodes[1].rad = (nodes[1].deg)*DEG_TO_RAD;\n    nodes[1].size = 0.7;\n\n    vec4 rotatedPos2 = (q+vec4( nodes[1].x, 0, nodes[1].y, 1.0))*matRotateY(nodes[1].rad)*matRotateX(iTime*0.5);\n    vec4 val2 = vec4(bodyColor,sdBox(rotatedPos2.xyz, vec3(sizeX,nodes[1].size,nodes[1].size*2.0) ));\n\n    nodes[2].x = cos(iTime + 2.0 * PI/float(NUM_NODES))*dist;\n    nodes[2].y = sin(iTime + 2.0 * PI/float(NUM_NODES))*dist;\n\n    dx2 = nodes[2].x - nodes[1].x;\n    dy2 = nodes[2].y - nodes[1].y;\n    d2 = sqrt(dx2 * dx2 + dy2 * dy2);\n    nodes[2].x += (dx2 * girth) / d2;\n\n    nodes[2].deg = (atan2(nodes[2].x,nodes[2].y)*180.0/PI);\n    nodes[2].rad = (nodes[2].deg)*DEG_TO_RAD;\n    nodes[2].size = 0.9;\n\n    vec4 rotatedPos3 = (q+vec4( nodes[2].x, 0, nodes[2].y, 1.0))*matRotateY(nodes[2].rad)*matRotateX(iTime*0.6);\n    vec4 val3 = vec4(bodyColor,sdBox(rotatedPos3.xyz, vec3(sizeX,nodes[2].size,nodes[2].size*2.0) ));\n\n    nodes[3].x = cos(iTime + 3.0 * PI/float(NUM_NODES))*dist;\n    nodes[3].y = sin(iTime + 3.0 * PI/float(NUM_NODES))*dist;\n\n    dx2 = nodes[3].x - nodes[2].x;\n    dy2 = nodes[3].y - nodes[2].y;\n    d2 = sqrt(dx2 * dx2 + dy2 * dy2);\n    nodes[3].x += (dx2 * girth) / d2;\n\n    nodes[3].deg = (atan2(nodes[3].x,nodes[3].y)*180.0/PI);\n    nodes[3].rad = (nodes[3].deg)*DEG_TO_RAD;\n    nodes[3].size = 1.1;\n\n    vec4 rotatedPos4 = (q+vec4( nodes[3].x, 0, nodes[3].y, 1.0))*matRotateY(nodes[3].rad)*matRotateX(iTime*0.7);\n    vec4 val4 = vec4(bodyColor,sdBox(rotatedPos4.xyz, vec3(sizeX,nodes[3].size,nodes[3].size*2.0) ));\n\n    nodes[4].x = cos(iTime + 4.0 * PI/float(NUM_NODES))*dist;\n    nodes[4].y = sin(iTime + 4.0 * PI/float(NUM_NODES))*dist;\n\n    dx2 = nodes[4].x - nodes[3].x;\n    dy2 = nodes[4].y - nodes[3].y;\n    d2 = sqrt(dx2 * dx2 + dy2 * dy2);\n    nodes[4].x += (dx2 * girth) / d2;\n\n    nodes[4].deg = (atan2(nodes[4].x,nodes[4].y)*180.0/PI);\n    nodes[4].rad = (nodes[4].deg)*DEG_TO_RAD;\n    nodes[4].size = 1.3;\n\n    vec4 rotatedPos5 = (q+vec4( nodes[4].x, 0, nodes[4].y, 1.0))*matRotateY(nodes[4].rad)*matRotateX(iTime*0.8);\n    vec4 val5 = vec4(bodyColor,sdBox(rotatedPos5.xyz, vec3(sizeX,nodes[4].size,nodes[4].size*2.0) ));\n\n    nodes[5].x = cos(iTime + 5.0 * PI/float(NUM_NODES))*dist;\n    nodes[5].y = sin(iTime + 5.0 * PI/float(NUM_NODES))*dist;\n\n    dx2 = nodes[5].x - nodes[4].x;\n    dy2 = nodes[5].y - nodes[4].y;\n    d2 = sqrt(dx2 * dx2 + dy2 * dy2);\n    nodes[5].x += (dx2 * girth) / d2;\n\n    nodes[5].deg = (atan2(nodes[5].x,nodes[5].y)*180.0/PI);\n    nodes[5].rad = (nodes[5].deg)*DEG_TO_RAD;\n    nodes[5].size = 1.5;\n\n    vec4 rotatedPos6 = (q+vec4( nodes[5].x, -3.0+abs(sin(iTime*5.0)*3.0), nodes[5].y, 1.0))*matRotateY(nodes[5].rad)*matRotateX(iTime*0.9);\n    vec4 rotatedPos7 = (q+vec4( nodes[5].x, 3.0-abs(sin(iTime*5.0)*3.0), nodes[5].y, 1.0))*matRotateY(nodes[5].rad)*matRotateX(iTime*0.9);\n    vec4 val6 = vec4(bodyColor,sdBox(rotatedPos6.xyz, vec3(sizeX,nodes[5].size/3.0,nodes[5].size*2.0) ));\n    vec4 val7 = vec4(bodyColor,sdBox(rotatedPos7.xyz, vec3(sizeX,nodes[5].size/3.0,nodes[5].size*2.0) ));\n\n    vec4 c0 = combine(val1,val2);\n    vec4 c1 = combine(val3,val4);\n    vec4 c2 = combine(val5,val6);\n    vec4 c3 = combine(val7,c0);\n    vec4 c4 = combine(c1,c2);\n    vec4 c5 = combine(c3,c4);\n\n    return c5;\n}\n\nvec2 rot(vec2 p, float a) {\n    return vec2(\n        cos(a) * p.x - sin(a) * p.y,\n        sin(a) * p.x + cos(a) * p.y);\n}\n\nfloat saw(float x){\n    return abs(fract(x)*2.-1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 position = ( fragCoord.xy / iResolution.xy );\n    position -= .5;\n    vec3 dir = vec3( position, 1.0 );\n\n    float aspect = iResolution.x / iResolution.y;\n    dir = normalize(vec3(position * vec2(aspect, 1.0), 1.0));\n    dir.yz = rot(dir.yz, 0.2);\n\n    vec3 pos = vec3(0.0, 5.0, 15.0);\n    mat4 m = matRotateY(-iTime*1.1);\n\n    float t = iTime*1.1;\n    vec2 gl = floor(2.*cos(2.*t))/2.*step(mod(position.yx-.0625,.125),vec2(.0625));\n    //pos.x += mix(mix(gl,gl.xy,floor(2.*saw(-3.*t*0.7))/2.),vec2(0.),floor(-3.*saw(2.*t*0.7))/4.).x;\n    pos.y += mix(mix(gl,gl.yx,floor(2.*saw(3.*t))/2.),vec2(0.),floor(3.*saw(2.*t))/4.).y;\n\n    vec4 result;\n    int march = 0;\n    for (int i = 0; i < ITER; i++)\n    {\n        result = map(pos, m);\n        march = i;\n        if (result.w < NEAR || result.w > FAR) break;\n        pos += result.w * dir;\n    }\n\n    vec3 col = map(pos, m).xyz;\n    vec4 bgCol;\n    bool isThreedObj = false;\n    if ( pos.z> 100. )\n    {\n        // bg\n        float temp = length(vec2(position.xy))+0.9;\n        col = vec3(.3,.3,.3)/vec3(temp);\n    }\n    else\n    {\n        //http://prideout.net/blog/?p=22\n        // shade\n\n        vec3 lightPos = vec3(20.0, 20.0, 20.0 );\n        vec3 light2Pos = normalize( lightPos - pos);\n        vec3 eps = vec3( .1, .01, .0 );\n        vec3 n = vec3( result.w - map( pos - eps.xyy, m ).w,\n                      result.w - map( pos - eps.yxy, m ).w,\n                      result.w - map( pos - eps.yyx, m ).w );\n        n = normalize(n);\n\n        float lambert = max(.0, dot( n, light2Pos));\n        col *= vec3(lambert);\n        col += vec3(result.xyz);\n\n        isThreedObj = true;\n    }\n\n    fragColor = vec4( col, 1.0);\n\n    // cross hatching\n    if(isThreedObj){\n        float lum2 = length(col);\n        float max=length(vec3(1.0,1.0,1.0));\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        fragColor = vec4(col*4.0,1.0);\n        if (lum2 < max/7.0*6.0) {\n            if (mod(fragCoord.x + fragCoord.y, 8.0) == 0.0) {\n                fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n                fragColor = vec4(col*0.6,1.0);\n            }\n        }\n\n\n        if (lum2 < max/7.0*5.0) {\n            if (mod(fragCoord.x - fragCoord.y, 8.0) == 0.0) {\n                fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n                fragColor = vec4(col*0.6,1.0);\n            }\n        }\n        if (lum2 < max/7.0*4.0) {\n            if (mod(fragCoord.x + fragCoord.y, 4.0) == 0.0) {\n                fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n                fragColor = vec4(col*0.6,1.0);\n            }\n        }\n\n\n        if (lum2 < max/7.0*3.0) {\n            if (mod(fragCoord.x - fragCoord.y, 4.0) == 0.0) {\n                fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n                fragColor = vec4(col*0.6,1.0);\n            }\n        }\n\n        if (lum2 < max/7.0*2.0) {\n            if (mod(fragCoord.x + fragCoord.y, 2.0) == 0.0) {\n                fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n                fragColor = vec4(col*0.6,1.0);\n            }\n        }\n\n        if (lum2 < max/7.0*1.0) {\n            if (mod(fragCoord.x - fragCoord.y , 2.0) == 0.0) {\n                fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n                fragColor = vec4(col*0.6,1.0);\n            }\n        }\n    }\t\t\t\n\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}