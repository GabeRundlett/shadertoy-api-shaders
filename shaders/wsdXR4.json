{
    "Shader": {
        "info": {
            "date": "1571600530",
            "description": "a rough attempt at CRT emulation.  Not so great, but it really depends on a very small pixel size.\n\nDrag right to magnify after applying effect.\nDrag right while holding shift to magnify before applying effect.",
            "flags": 48,
            "hasliked": 0,
            "id": "wsdXR4",
            "likes": 6,
            "name": "scanlines and shadow mask",
            "published": 3,
            "tags": [
                "scanlines",
                "filter",
                "raster"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 1028
        },
        "renderpass": [
            {
                "code": "bool zoom = false;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1.0;\n    if (texelFetch(iChannel3, ivec2(16,0), 0).x > 0.0\n            && iMouse.z > 0.0\n            && iMouse.x > abs(iMouse.z))\n        scale += 16.0 * abs(iMouse.x - abs(iMouse.z)) / iResolution.x;\n    vec2 uv = fragCoord / scale / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const bool interlace = false;   // FLASHING IMAGE WARNING: enabling this flickers a bit\nconst bool philace = false;    // enabling this flickers a lot more\nconst float brightnessBoost = 2.5;\nconst float colourLeakage = 0.45;\nconst float focus = 8.0;\nconst vec2 maskScale = vec2(3.0, 4.0);\nconst vec2 pixelScale = vec2(1.0, 8.0);\n\nfloat strobe(float up, float dn, float x) {\n    return step(up, x) - step(dn, x);\n//    return smoothstep(up, up+0.08, x) - smoothstep(dn, dn+0.08, x);\n}\n\n#if 1\nvec3 mask(in vec2 c) {\n    c = fract(c / maskScale);\n    c.x += step(0.5, c.y) * (1.5 / 3.0);\n    c.x = fract(c.x) * 3.0;\n    vec3 m = vec3(strobe(0.0, 0.9, c.x),\n                  strobe(1.0, 1.9, c.x),\n                  strobe(2.0, 2.9, c.x));\n    m *= vec3(1.0-step(0.9, fract(c.y * 2.0)));\n    return m;\n}\n#else\nvec3 mask(in vec2 c) {\n    float yo = step(0.5,fract(c.x * 0.5 / maskScale.x)) * 0.5;\n    c = fract(c / maskScale);\n    c.x = fract(c.x) * 3.0;\n    c.y += yo;\n    vec3 m = vec3(strobe(0.0, 0.9, c.x),\n                  strobe(1.0, 1.9, c.x),\n                  strobe(2.0, 2.9, c.x));\n    m *= vec3(1.0-step(0.9, fract(c.y * 1.0)));\n    return m;\n}\n#endif\n\nfloat g(in float x) {\n    return exp(-(x*x) * focus);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float magnify = 1.0;\n\n    if (texelFetch(iChannel3, ivec2(16,0), 0).x == 0.0\n            && iMouse.z > 0.0\n            && iMouse.x > abs(iMouse.z))\n        magnify += 16.0 * abs(iMouse.x - abs(iMouse.z)) / iResolution.x;\n\n    vec2 scale = pixelScale;\n    float phase = float(iFrame / 1);\n    float il = fract(phase * (!interlace ? 0.000\n                               : philace ? 0.61803398875\n                                         : 0.5));\n    vec2 uv = fragCoord / scale;\n    uv /= magnify;\n    vec2 uv0 = vec2(uv.x, floor(uv.y + il) - il);\n    vec2 uv1 = vec2(uv.x, ceil(uv.y + il) - il);\n    if (uv1.y == uv0.y) uv1.y += 1.0;\n    float f0 = uv.y - uv0.y;\n    float f1 = uv1.y - uv.y;\n    uv0 = uv0 * scale / iResolution.xy;\n    uv1 = uv1 * scale / iResolution.xy;\n\n    vec3 c0 = texture(iChannel0, uv0).rgb;\n    vec3 c1 = texture(iChannel0, uv1).rgb;\n\n    vec3 col = c0 * g(f0) + c1 * g(f1);\n    vec3 m = mask(floor(fragCoord) / magnify);\n    col *= brightnessBoost;\n    vec3 excess = max(vec3(0.0), col - 1.0);\n    col = col * m + excess * colourLeakage;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}