{
    "Shader": {
        "info": {
            "date": "1594036681",
            "description": "Attempting to compute the SDF of a bilinear patch (p0,p1,p2,p3), by searching for roots of a quintic equation in parametric space. In its default settings it has artifacts, so set INITIAL to 1 to fix most of them at some performance cost.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tjczm",
            "likes": 39,
            "name": "Bilinear Patch - distance",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "bilinear",
                "hyperboloid",
                "patch",
                "bilinearpatch"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2812
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Attempting to compute the SDF of a bilinear \n// patch (p0,p1,p2,p3), by searching for the roots of\n// a quintic polynomial in parametric space. It works,\n// but it's unstable. So, not successfull. I might try\n// to find an implicit form instead, another time. But\n// for now, this is the derivation:\n//\n// q(u,v) = p0 + u(p1-p0) + v(p3-p0) + uv(p2-p3-p1+p0)\n//\n// D²(uv) = |p-q(u,v)|² = |D+uA+vB+uvC|²\n//\n// ∇D²(uv) = 2(uAA + uv²CC + v(AB+CD) + 2uvAC +  v²*BC + AD,\n//             vBB + u²vCC + u(AB+CD) +  u²AC + 2uv*BC + BD)\n//\n// ∇D²(uv) = 0 gives two equations\n//\n// Isolating u in one and replacing in the other produces\n// an equation of degree 9, which we cannot solve in \n// closed form. So, we need another method. I implemented\n// two method to find the roots:\n// \n// Method 0 is to isolate u and v anywways, and iterate:\n//\n//   v = -(u²AC + u(AB+CD) + BD) / |B+uC|²\n//   u = -(v²BC + v(AB+CD) + AD) / |A+vC|²\n//\n// Method 1 is using the Newton method: https://en.wikipedia.org/wiki/Newton%27s_method_in_optimization\n//\n//   Gradient G=2*( uAA + uv²CC + v(AB+CD) + 2uvAC +  v²BC + AD,\n//                  vBB + u²vCC + u(AB+CD) +  u²AC + 2uvBC + BD)\n//\n//   Hessian H = 2*( AA + v²CC + 2vAC, \n//                   2uvCC + ABCD + 2uAC + 2vBC,\n//                   2uvCC + ABCD + 2uAC + 2vBC,\n//                   BB + u²CC + 2uBC )\n//\n//   uv = uv - inverse(H(uv))*G(uv)\n//\n// I implemented two ways to initialize the root finders:\n//\n// Initial 0 just starts at the center of the patch\n// Initial 1 computes 15 geodesics and picks the uv's of the\n//           closest point in any geodesic\n//\n// The cube is from from fizzer's bilinear-patch\n// intersection shader: https://www.shadertoy.com/view/3dXGWs\n\n\n// List of other 3D SDFs: https://www.shadertoy.com/playlist/43cXRl\n//\n// and https://iquilezles.org/articles/distfunctions\n\n\n\n// 0: hack\n// 1: newtown\n#define METHOD 0\n\n// 0: middle      ---> fast but bad\n// 1: line scans  ---> much better, but slower\n#define INITIAL 1\n\n\n// enable SHADOWS and floor plane if you have a fast machine\n#define SHADOWS\n\n\n//-------------------------------------------------------\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nvec3 sdBilinearPatch( in vec3 p,\n                      in vec3 p0, in vec3 p1, in vec3 p2, in vec3 p3 )\n{    \n    vec3 A = p1-p0;\n    vec3 B = p3-p0;\n    vec3 C = p2-p3-p1+p0;\n    vec3 D = p0-p;\n\n    // initial guess\n\n#if INITIAL==0\n    vec2 uv = vec2(0.5,0.5);\n#endif\n#if INITIAL==1\n    vec2 uv = vec2(0.0,0.0);\n    float d = dot2(p-p0);\n    for( int i=0; i<16; i++ )\n    {\n        float u = float(i)/15.0;\n        vec3 ba = mix( B,p2-p1,u);\n        vec3 pa = mix(-D,p -p1,u);\n\t\tfloat v = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\t\tfloat t = dot2(pa-ba*v);\n        if( t<d ) { d=t; uv=vec2(u,v); }\n    }\n    //return vec3(sqrt(d),uv);\n#endif\n    \n    // find roots\n    \n#if METHOD==0\n    vec2  k2 = vec2(dot(A,C),dot(B,C));\n    vec2  k0 = vec2(dot(B,D),dot(A,D));\n    float k1 = dot(A,B)+dot(C,D);\n    for( int i=0; i<16; i++ )\n    {\n      uv.yx = clamp( -(uv*uv*k2 + uv*k1 + k0 ) /\n                     vec2( dot2(B+uv.x*C), dot2(A+uv.y*C) ),\n                     0.0, 1.0);\n    }\n    vec3 pq = D+uv.x*A+uv.y*B+uv.x*uv.y*C;\n    vec3 nor = cross(A+uv.y*C,B+uv.x*C); // normal\n\treturn vec3( length(pq), uv );\n#endif\n    \n#if METHOD==1\n    float AA = dot(A,A);\n    float BB = dot(B,B);\n    float CC = dot(C,C);\n    float BC = dot(B,C);\n    float AC = dot(A,C);\n    float ABCD = dot(A,B)+dot(C,D);\n    float AD = dot(A,D);\n    float BD = dot(B,D);\n    for( int i=0; i<6; i++ )\n    {\n        vec2 gra = vec2(\n         uv.x*AA + uv.x*uv.y*uv.y*CC + uv.y*ABCD + 2.0*uv.x*uv.y*AC +     uv.y*uv.y*BC + AD,\n         uv.y*BB + uv.x*uv.x*uv.y*CC + uv.x*ABCD +     uv.x*uv.x*AC + 2.0*uv.x*uv.y*BC + BD);\n\n        float k1 = 2.0*uv.x*uv.y*CC + ABCD + 2.0*uv.x*AC + 2.0*uv.y*BC;\n        mat2x2 hes = mat2x2(\n         AA + uv.y*uv.y*CC + 2.0*uv.y*AC,\n         k1, k1, \n         BB + uv.x*uv.x*CC + 2.0*uv.x*BC );\n        \n        uv -= inverse(hes)*gra;\n        \n        uv = clamp(uv,0.0,1.0);\n    }\n    vec3 nor = cross(A+uv.y*C,B+uv.x*C); // normal\n\treturn vec3( length(D+uv.x*A+uv.y*B+uv.x*uv.y*C), uv );\n#endif    \n}\n\n//-------------------------------------------------------\n\nvec3 gVerts[8]; // Deformed cube geometry\n\nconst float kRoundness = 0.03;\n\n// sdf\nvec3 map( in vec3 p )\n{\n    vec3 res = vec3(length(p-gVerts[0]),0.0,0.0);\n\n    \n    //   2---3\n    //  /   /|\n    // 6---7 |\n    // |   | 1\n    // 4---5/\n    \n    vec3 tmp;\n    tmp = sdBilinearPatch(p, gVerts[0], gVerts[2], gVerts[3], gVerts[1]); if( tmp.x<res.x ) res = tmp;\n    tmp = sdBilinearPatch(p, gVerts[7], gVerts[6], gVerts[4], gVerts[5]); if( tmp.x<res.x ) res = tmp;\n    tmp = sdBilinearPatch(p, gVerts[0], gVerts[1], gVerts[5], gVerts[4]); if( tmp.x<res.x ) res = tmp;\n    tmp = sdBilinearPatch(p, gVerts[2], gVerts[6], gVerts[7], gVerts[3]); if( tmp.x<res.x ) res = tmp;\n    tmp = sdBilinearPatch(p, gVerts[0], gVerts[4], gVerts[6], gVerts[2]); if( tmp.x<res.x ) res = tmp;\n    tmp = sdBilinearPatch(p, gVerts[1], gVerts[3], gVerts[7], gVerts[5]); if( tmp.x<res.x ) res = tmp;\n    \n    res.x -= kRoundness; // round it a bit\n    return res;\n}\n\n// https://iquilezles.org/articles/intersectors\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n    h = sqrt(h);\n\treturn vec2(-b-h,-b+h);\n}\n\nint raycast( in vec3 ro, in vec3 rd, out vec3 oUVT)\n{\n    int   obj = 0;\n    float tmin = 2.0;\n    float tmax = 5.0;\n    vec2  uv = vec2(0.0);\n\n    // floor\n    #ifdef SHADOWS\n    float tf = (-2.0 - ro.y) / rd.y;\n    if( tf>0.0 ) { tmax=min(tmax,tf); obj=1; oUVT = vec3(0.0,0.0,tf); }\n    #endif\n\n    // bounding sphere\n    vec2 bs = iSphere(ro,rd,vec4(0.0,0.0,0.0,sqrt(3.0)+kRoundness));\n    if( bs.y>0.0 )\n    {\n        tmin = max(tmin,bs.x); // clip search space\n        tmax = min(tmax,bs.y); // clip search space\n        \n        // rayamarch cube\n        float t = tmin;\n        for( int i=0; i<256; i++ )\t\n        {\n            vec3 pos = ro + t*rd;\n            vec3 duv = map(pos);\n            uv = duv.yz;\n            if( (duv.x)<0.001 ) break;\n            t += duv.x;\n            if( t>tmax ) break;        \n        }\n\n        if( t<tmax )\n        {\n            obj = 2;\n            oUVT = vec3(uv,t);\n        }\n    }\n\n    return obj;\n}\n\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.001;\n    float tmax = 8.0;\n\n    float res = 1.0;\n    \n    // bounding sphere\n    vec2 bs = iSphere(ro,rd,vec4(0.0,0.0,0.0,sqrt(3.0)+kRoundness+0.2));\n    if( bs.y>0.0 )\n    {\n        tmin = max(tmin,bs.x); // clip search space\n        tmax = min(tmax,bs.y); // clip search space\n        \n        float t = tmin;\n        for( int i=0; i<64; i++ )\n        {\n            float h = map( ro + rd*t ).x;\n            float s = clamp(8.0*h/t,0.0,1.0);\n            res = min( res, s*s*(3.0-2.0*s) );\n            t += clamp( h, 0.02, 0.5 );\n            if( res<0.005 || t>tmax ) break;\n        }\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n#if 0\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=min(0,iFrame); i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.001*e).x;\n    }\n    return normalize(n);\n#endif    \n}\n\nvec2 rot( vec2 p, float an )\n{\n    return mat2(cos(an), sin(an), -sin(an), cos(an)) * p;\n}\n\nconst float N = 32.0;\nfloat gridTexture( in vec2 p )\n{\n\t// filter kernel\n    vec2 w = fwidth(p) + 0.01;\n\n\t// analytic (box) filtering\n    vec2 a = p + 0.5*w;                        \n    vec2 b = p - 0.5*w;           \n    vec2 i = (floor(a)+min(fract(a)*N,1.0)-\n              floor(b)-min(fract(b)*N,1.0))/(N*w);\n    //pattern\n    return (1.0-i.x)*(1.0-i.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 4.0);\n    vec3 rd = normalize(vec3(uv, -1.6));\n\n    // vertex deformation, from https://www.shadertoy.com/view/3dXGWs\n    float time = iTime;\n    float amp = smoothstep(0.0,0.2,0.5-0.5*cos(6.2831*time/15.0));\n    for(int i = 0; i<8; i++)\n    {\n        vec3 p = vec3((ivec3(i)>>ivec3(0,1,2))&1)*2.0-1.0;\n\n        p.xz = rot(p.xz,  amp*cos(time*3.0*6.2831/15.0+p.y+0.0)/2.0 );\n        p.yz = rot(p.yz, -amp*cos(time*1.0*6.2831/15.0+p.x+2.0)/1.0 );\n        p.xz = rot(p.xz,  4.0 + time*1.0*6.2831/15.0 );\n        \n        gVerts[i] = p;\n    }\n\n    // render\n    \n    vec3 col = vec3(0.0);\n\n    vec3 uvt;\n    int obj = raycast(ro, rd, uvt);\n    if( obj>0 )\n    {\n        float t = uvt.z;\n        vec3 pos = ro + t*rd;\n    \tvec3 nor = vec3(0.0,1.0,0.0);\n        vec2 uv = pos.xz*0.25;\n        #ifdef SHADOWS\n    \tif( obj==2 )\n        #endif\n        {\n            uv = uvt.xy;\n        \tnor = calcNormal(pos);\n        }\n\n        // shade and illuminate (oldscool way)\n        vec3 tex = texture(iChannel0,uv).xyz;\n    \t//tex *= gridTexture(4.0*uv);\n        \n    \tvec3  lig = normalize(vec3(6, 5,-1));\n        vec3  hal = normalize(lig-rd);\n        float dif = clamp(dot(nor,lig),0.0,1.0);\n        float spe = pow(max(0.0, dot(nor,hal)), 16.0);\n        float amb = 0.5+0.5*nor.y;\n        float bou = 0.5+0.5-nor.y;\n\n        #ifdef SHADOWS\n        if( dif>0.0 )\n        {\n    \t\tdif *= calcSoftshadow(pos+0.01*nor, lig);\n        }\n        #endif\n\n        spe *= 0.04 + 0.96*pow(clamp(1.0-dot(lig,hal),0.0,1.0),5.0);\n        col = tex*(4.0*dif*vec3(1.00,0.70,0.70) + \n                   1.0*amb*vec3(0.15,0.10,0.05)+\n                   1.0*bou*vec3(0.20,0.07,0.02)) + \n              tex.x*spe*dif*20.0;\n        col *= exp2(-t*0.1);\n    }\n    \n    // gain\n    col = col*2.0/(1.0+col);\n\t// gamma\n    col = pow(col,vec3(0.4545));\n    \n    // grade\n    col.z += 0.02;\n\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}