{
    "Shader": {
        "info": {
            "date": "1722887266",
            "description": "#Curve",
            "flags": 0,
            "hasliked": 0,
            "id": "4fBcWy",
            "likes": 1,
            "name": "Smoothing Bezier Curve",
            "published": 3,
            "tags": [
                "curve"
            ],
            "usePreview": 0,
            "username": "Yeeun",
            "viewed": 61
        },
        "renderpass": [
            {
                "code": "#define NUM_SAMPLES 10\n#define GLITCH_FREQUENCY 0.3\n#define GLITCH_AMPLITUDE 0.02\n#define ANIMATION_SPEED 0.3\n#define WAVE_AMPLITUDE 0.8\n#define SMOOTH_FACTOR 0.7 \n#define KALMAN_Q 0.1\n#define KALMAN_R 0.001\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec2 glitch(vec2 p, float time) {\n    float noise = random(p + time);\n    if (noise < GLITCH_FREQUENCY) {\n        float glitchAmount = (noise / GLITCH_FREQUENCY) * GLITCH_AMPLITUDE;\n        p.x += sin(time * 50.0 + p.y * 10.0) * glitchAmount;\n        p.y += cos(time * 60.0 + p.x * 12.0) * glitchAmount;\n    }\n    return p;\n}\n\nvec2 cubicBezier(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float t) {\n    float t2 = t * t;\n    float t3 = t2 * t;\n    float mt = 1.0 - t;\n    float mt2 = mt * mt;\n    float mt3 = mt2 * mt;\n    return p0 * mt3 + p1 * 3.0 * mt2 * t + p2 * 3.0 * mt * t2 + p3 * t3;\n}\n\nfloat distToLine(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float t = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * t);\n}\n\n// Kalman filter\nstruct KalmanFilter {\n    vec2 estimate;\n    vec2 errorCovariance;\n};\n\nKalmanFilter kalmanFilterUpdate(KalmanFilter kf, vec2 measurement) {\n    vec2 K = kf.errorCovariance / (kf.errorCovariance + vec2(KALMAN_R)); // Kalman gain\n    kf.estimate = kf.estimate + K * (measurement - kf.estimate);\n    kf.errorCovariance = (vec2(1.0) - K) * kf.errorCovariance + vec2(KALMAN_Q);\n    return kf;\n}\n\nvec2 exponentialSmooth(vec2 prev, vec2 curr, float alpha) {\n    return alpha * curr + (1.0 - alpha) * prev;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    \n    vec2 p0 = vec2(-0.8, 0.0);\n    vec2 p3 = vec2(0.8, 0.0);\n    \n    float time = iTime * ANIMATION_SPEED;\n    vec2 p1 = vec2(-0.4, sin(time) * WAVE_AMPLITUDE);\n    vec2 p2 = vec2(0.4, sin(time + 3.14159) * WAVE_AMPLITUDE);\n    \n    float lineThickness = 0.004;\n    float smoothing = 0.01;\n    \n    vec3 glitchedColor = vec3(0.0);\n    vec3 smoothedColor = vec3(0.0);\n    \n    vec2 prevGlitchedPoint = glitch(cubicBezier(p0, p1, p2, p3, 0.0), time);\n    vec2 prevSmoothedPoint = prevGlitchedPoint;\n    \n    KalmanFilter kf;\n    kf.estimate = prevGlitchedPoint;\n    kf.errorCovariance = vec2(1.0);\n\n    for (int i = 1; i <= NUM_SAMPLES; i++) {\n        float t = float(i) / float(NUM_SAMPLES);\n        \n        // Glitched curve point\n        vec2 glitched_p0 = glitch(p0, time);\n        vec2 glitched_p1 = glitch(p1, time);\n        vec2 glitched_p2 = glitch(p2, time);\n        vec2 glitched_p3 = glitch(p3, time);\n        vec2 glitchedCurvePoint = cubicBezier(glitched_p0, glitched_p1, glitched_p2, glitched_p3, t);\n        \n        // Apply Kalman filter\n        kf = kalmanFilterUpdate(kf, glitchedCurvePoint);\n        vec2 smoothedCurvePoint = exponentialSmooth(prevSmoothedPoint, kf.estimate, SMOOTH_FACTOR);\n        \n        float distToGlitched = distToLine(uv, prevGlitchedPoint, glitchedCurvePoint);\n        float distToSmoothed = distToLine(uv, prevSmoothedPoint, smoothedCurvePoint);\n        \n        glitchedColor += vec3(1.0, 0.0, 0.0) * smoothstep(lineThickness + smoothing, lineThickness - smoothing, distToGlitched);\n        smoothedColor += vec3(0.0, 1.0, 0.0) * smoothstep(lineThickness + smoothing, lineThickness - smoothing, distToSmoothed);\n        \n        prevGlitchedPoint = glitchedCurvePoint;\n        prevSmoothedPoint = smoothedCurvePoint;\n    }\n    \n    vec3 finalColor = glitchedColor + smoothedColor;\n    finalColor = clamp(finalColor, 0.0, 1.0);\n    \n    fragColor = vec4(finalColor, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}