{
    "Shader": {
        "info": {
            "date": "1530958953",
            "description": "Simple transition between a sphere projection and rectangular map",
            "flags": 0,
            "hasliked": 0,
            "id": "XsyfDt",
            "likes": 15,
            "name": "Sphere unwrapping",
            "published": 3,
            "tags": [
                "sphere",
                "map",
                "transition"
            ],
            "usePreview": 0,
            "username": "davidar",
            "viewed": 910
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\n#define CAMERA_DIST 25.\n\nvec4 map(vec2 p) {\n    vec3 col = vec3(0.5 + sin(20. * PI * p.x), 0.5 + sin(20. * PI * p.y), 1.);\n    return vec4(sqrt(0.5 * clamp(col, 0., 1.)), 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (2. * fragCoord.xy - iResolution.xy) / iResolution.x;\n    fragColor = vec4(sqrt(vec3(0.05) * (1. - length(p)/2.)), 1.);\n    float t = clamp(1.125 - abs(mod(iTime + 1., 10.) - 5.)/4., 0., 1.);\n    if (t < 1.) {\n        float zoom = pow(2. * t, 5.) + 1.;\n        vec3 dir = normalize(vec3(PI * p, -zoom * (CAMERA_DIST - 1.)));\n        float b = CAMERA_DIST * dir.z;\n        float h = b*b - CAMERA_DIST*CAMERA_DIST + 1.;\n        if (h >= 0.) {\n            vec3 q = vec3(0., 0., CAMERA_DIST) - dir * (b + sqrt(h));\n            p = zoom * vec2(atan(q.x, q.z) / PI, 0.5 - acos(q.y / length(q)) / PI);\n        } else {\n            return;\n        }\n    }\n    if (abs(p.y) <= 0.5 && abs(p.x) <= 1.) fragColor = map(p);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}