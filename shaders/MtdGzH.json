{
    "Shader": {
        "info": {
            "date": "1468043171",
            "description": "Raymarcha'!!!",
            "flags": 0,
            "hasliked": 0,
            "id": "MtdGzH",
            "likes": 11,
            "name": "Anglesine",
            "published": 3,
            "tags": [
                "raymarching",
                "mathematical",
                "vrotex"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 945
        },
        "renderpass": [
            {
                "code": "float map( vec3 p )\n{\n    \n    vec3 q = fract(p) * max(2.0,float(p)) - 1.0;\n    return length(q) - 0.5;\n    \n}\nfloat trace( vec3 ro, vec3 rd )\n{\n    \n    float t = 0.0;\n    \n    for( int i = 0; i < 24; ++i ) {\n        \n        vec3 p = ro + t*rd;\n        \n        float d = map( p );\n        \n        t += d * 0.5;\n    }\n    \n    return t;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    r.xz *= mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime));\n    r.yz *= mat2(cos(iTime), sin(iTime), -sin(iTime), cos(iTime));\n    r.zx *= mat2(-cos(iTime), sin(iTime), sin(iTime), cos(iTime));\n    r.zy *= mat2(cos(iTime), sin(iTime), sin(iTime), -cos(iTime));\n    r.xz *= mat2(cos(iTime), sin(iTime), -sin(iTime), cos(iTime));\n    r.xyz *= vec3(r.yzx);\n    \n    vec3 o = vec3( 0.0, iTime, iTime );\n    \n    float t = trace(o, r);\n    \n    \n    //vec3 h: This Vector Is Used For Custom Colors.\n    //Component 1: Render Background.\n    //Component 2: Render Sphere Color (Blends Background)\n    //Component 3: Render Sky Color ( Blends Background And Sphere );\n    vec3 h = vec3(0.9,0.5,0.1);\n    float fogx = 2.0 / (1.0 + t * float(h) * 1.0);\n    \n    vec3 fog = mix(vec3(fogx),h,2.0);\n    \n    vec3 fc = vec3(fog);\n    \n\tfragColor = vec4(fc,1.0);\n    vec2 uvr = fragCoord.xy / iResolution.xy;\n    uvr = -1.0+2.0*uvr;\n    fragColor -= max(dot(uvr,uvr)-0.9,0.)/2.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}