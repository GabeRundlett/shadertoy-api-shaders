{
    "Shader": {
        "info": {
            "date": "1713654940",
            "description": "With more inputs. Demo:\n- https://youtu.be/gwM5yiKn9QQ",
            "flags": 0,
            "hasliked": 0,
            "id": "XcdSR4",
            "likes": 14,
            "name": "AF - Complicated Things",
            "published": 3,
            "tags": [
                "3d",
                "animationfractal"
            ],
            "usePreview": 0,
            "username": "tristanC",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "#ifndef ANIMATION_FRACTAL\n// Simulate the pitch inputs using a smoothed stairs function STEP\n#define STEP1(x) ((x) - sin(x))\n#define STEP(x, offset, amp) (STEP1(STEP1(offset + x * amp)) * .15)\n#define is (iTime)\n\nfloat pitches[9];\nvoid genPitches() {\n  pitches[0] = STEP(is, 1., 1.);\n  pitches[1] = STEP(is, 2., 2.);\n  pitches[2] = STEP(is, 3., 3.);\n  pitches[3] = STEP(is, 4., 4.);\n  pitches[4] = STEP(is, 5., 1.);\n  pitches[5] = STEP(is, 6., 2.);\n  pitches[6] = STEP(is, 7., 3.);\n  pitches[7] = STEP(is, 8., 4.);\n  pitches[8] = STEP(is, 1., 5.);\n}\n#define ipitch_1 pitches[0]\n#define ipitch_2 pitches[1]\n#define ipitch_3 pitches[2]\n#define ipitch_4 pitches[3]\n#define ipitch_5 pitches[4]\n#define ipitch_6 pitches[5]\n#define ipitch_7 pitches[6]\n#define ipitch_8 pitches[7]\n#define ipitch_9 pitches[8]\n\n#define icolor (iTime*.5)\n#define imoveFWD (iTime*.1)\n#endif\n\n\n// CC0: Complicating things even further\n//  That is what I do.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define PI_2        (0.5*PI)\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PCOS(a)     0.5*(cos(a)+1.0)\n\nconst float planeDist = 1.0-0.75;\nconst int   furthest  = 12;\nconst int   fadeFrom  = max(furthest-4, 0);\nconst float fadeDist  = planeDist*float(furthest - fadeFrom);\n\n// License: Unknown, author: Unknown, found: don't remember\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nvec3 alphaBlend(vec3 back, vec4 front) {\n  return mix(back, front.xyz, front.w);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nvec3 offset(float z) {\n  float a = z*0.5;\n  vec2 p = -0.25*(vec2(cos(a), sin(a*sqrt(2.0))) + vec2(cos(a*sqrt(0.75)), sin(a*sqrt(0.6))));\n  return vec3(p, z);\n}\n\nvec3 doffset(float z) {\n  const float eps = 0.05;\n  return (offset(z + eps) - offset(z - eps))/(2.0*eps);\n}\n\nvec3 ddoffset(float z) {\n  const float eps = 0.05;\n  return (doffset(z + eps) - doffset(z - eps))/(2.0*eps);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  return vec3(0.0);\n}\n\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = PI_2 - cosatan2 * PI_2;\n  return y < 0.0 ? -t : t;\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan_approx(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - pabs(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\nvec3 palette( float t ) {\n  return (1.0+cos(1.0*vec3(0.0, 1.0, 2.0)+TAU*t))*0.5;\n}\n\n// License: Unknown, author: kishimisu, found: https://www.shadertoy.com/view/mtyGWy\nvec3 kishimisu(vec3 col, vec2 p, float tm, float n) {\n  vec2 p0 = p;\n  vec3 finalColor = vec3(0.0);\n\n  vec2 p1 = p;\n  for (float i = 0.0; i < 4.0; i++) {\n    p1 = fract(p1 * 2.0+0.0125*tm) - 0.5;\n\n    float d = length(p1) * exp(-length(p0));\n\n    vec3 cc = palette(icolor + length(p0) + i*.4 + tm*.2);\n\n    d = sin(d*8. + tm)/8.;\n    d = abs(d);\n\n    d -= 0.0025;\n    d = max(d, 0.005);\n    d = (0.0125 / d);\n    d *= d;\n\n    col += cc * d;\n  }\n\n  return 0.5*(col);\n}\n\nvec3 effect(vec2 p, float tm, float n) {\n  vec3 col = vec3(0.0);\n  vec2 kp = p;\n  float kl = dot(kp, kp);\n  float kpf = 0.;\n  int nm3 = int(mod(n, 3.));\n  if (nm3 == 0)      kpf = ipitch_6;\n  else if (nm3 == 1) kpf = ipitch_7;\n  else if (nm3 == 2) kpf = ipitch_8;\n  float nn = 2.*floor(mix(3.0, 16.0, 0.5+0.5*sin(0.1*n)));\n  float kn = smoothKaleidoscope(kp, 0.1, nn);\n  kp += 0.5*sin(vec2(1.0, sqrt(0.5))*tm*(0.21+(.08*sin(kpf*.05))));\n  col = kishimisu(col, kp, tm, n);\n  col -= 0.75*vec3(0.0, 1.0, 2.0).zyx*dot(p, p);\n  col = clamp(col, 0.0, 4.0);\n  return col;\n}\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 off, float aa, float n) {\n  vec2 p = (pp-off*vec3(1.0, 1.0, 0.0)).xy;\n  float l = length(p);\n  p *= mix(0.5, 0.75, 0.5+0.5*sin(n*0.071));\n  float tm = 0.*TIME+0.125*n;\n  int nm3 = int(mod(n, 5.));\n  if (nm3 == 0)      tm += ipitch_1 * .5;\n  else if (nm3 == 1) tm += ipitch_2 * .5;\n  else if (nm3 == 2) tm += ipitch_3 * .5;\n  else if (nm3 == 3) tm += ipitch_4 * .5;\n  else if (nm3 == 4) tm += ipitch_5 * .5;\n\n  p *= ROT(-tm);\n  float fade = smoothstep(0.1, 0.15, l);\n  if (fade < 0.05) return vec4(0.0);\n  vec4 col = vec4(0.0);\n\n  col.xyz = effect(p, tm, n);\n  float i = max(max(col.x, col.y), col.z)*0.75;\n  col.w = (tanh_approx(0.5+l+max((i), 0.0))*fade);\n  return col;\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1.0/RESOLUTION.xy;\n  const float rdd_per   = 10.0;\n  float rdd =  (1.75+0.75*pow(lp,1.5)*tanh_approx(lp+0.9*PCOS(rdd_per*p.x)*PCOS(rdd_per*p.y)));\n//  float rdd = 2.0;\n\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  float nz = floor(ro.z / planeDist);\n\n  vec3 skyCol = skyColor(ro, rd);\n\n\n  vec4 acol = vec4(0.0);\n  const float cutOff = 1.;\n  bool cutOut = false;\n\n  float maxpd = 0.0;\n\n  // Steps from nearest to furthest plane and accumulates the color\n  for (int i = 1; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*float(i);\n\n    float pd = (pz - ro.z)/rd.z;\n\n    if (pd > 0.0 && acol.w < cutOff) {\n      vec3 pp = ro + rd*pd;\n      maxpd = pd;\n      vec3 npp = ro + nrd*pd;\n\n      float aa = 3.0*length(pp - npp);\n\n      vec3 off = offset(pp.z);\n\n      vec4 pcol = plane(ro, rd, pp, off, aa, nz+float(i));\n\n      float nz = pp.z-ro.z;\n      float fadeIn = smoothstep(planeDist*float(furthest), planeDist*float(fadeFrom), nz);\n      float fadeOut = smoothstep(0.0, planeDist*0.1, nz);\n      pcol.w *= fadeOut*fadeIn;\n      pcol = clamp(pcol, 0.0, 1.0);\n\n      acol = alphaBlend(pcol, acol);\n    } else {\n      cutOut = true;\n      acol.w = acol.w > cutOff ? 1.0 : acol.w;\n      break;\n    }\n\n  }\n\n  vec3 col = alphaBlend(skyCol, acol);\n// To debug cutouts due to transparency\n//  col += cutOut ? vec3(1.0, -1.0, 0.0) : vec3(0.0);\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float tm  = planeDist*imoveFWD*10.;\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)+ddro), ww));\n  vec3 vv = cross(ww, uu);\n\n  vec3 col = color(ww, uu, vv, ro, p);\n  // col *= smoothstep(1.0, 10.0, TIME);\n  col = clamp(col, 0.0, 1.0);\n  col = sqrt(col);\n  return col;\n}\n\n#ifdef ANIMATION_FRACTAL\nvoid main() {\n    vec2 p = -1. + 2*inUV;\n    p.y *= scene.screenRatio;\n    p *= 1.5;\n#else\nvoid mainImage( out vec4 oColor, in vec2 fragCoord ) {\n    genPitches();\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n#endif\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, pp);\n\n#ifdef ANIMATION_FRACTAL\n    col = pow(col, vec3(3.));\n#endif\n\n  oColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}