{
    "Shader": {
        "info": {
            "date": "1589661702",
            "description": "this is the technique in [url]https://www.shadertoy.com/view/td2fRD[/url] but a 3d SDF mapping to a 2d sdf, instead of a 4d to a 3d. should be easier to understand.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsBBRw",
            "likes": 13,
            "name": "Corroding Arbitrary SDF (2D)",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 663
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n//this is the technique in https://www.shadertoy.com/view/td2fRD\n//but a 3d SDF mapping to a 2d sdf, instead of a 4d to a 3d.\n//should be easier to understand.\n\n#define FK(k) floatBitsToInt(k)^floatBitsToInt(cos(k))\nfloat hash(float a, float b) {\n    int x = FK(a); int y = FK(b);\n    return float((x*x-y)*(y*y+x)+x)/2.14e9;\n}\n\n//return the SDF for a sphere, or the SDF for an empty region surrounded by spheres\nfloat gated_domain(vec3 p, float scale, bool gated) {\n    if (!gated) {\n        p.xy = abs(p.xy);\n        if (p.x > p.y) p.xy = p.yx;\n        p.y -= 1./scale;\n    }\n    return length(p)-.2;\n}\n\nfloat scene3d(vec3 p) {\n    float scale = 2.;\n    vec2 id = floor(p.xy*scale);\n    p.xy = (fract(p.xy*scale)-0.5)/scale;\n    bool gated = hash(id.x, id.y) > 0.;\n    return gated_domain(p, scale, gated);\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(ax,p)*ax,p,cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nint pittingtype;\nfloat scene2d(vec2 p) {\n    float circle = length(p)-1.;\n\n    float top = circle;\n    float last = circle;\n    for (int i = 0; i < 5; i++) {\n        float scale = 1./float(i+1);\n        //map 3d coordinates to 4d using the distance to the SDF\n    \tvec3 p3d = vec3(p, last)/scale;\n\t\t//cut out mapped spheres from SDF\n        float holes = scene3d(p3d)*scale;\n    \ttop = max(top, -holes);\n\n        if (pittingtype == 0) last = holes; //add pitting to existing pits\n        if (pittingtype == 1) last = top; //add pitting everywhere\n        if (pittingtype == 2) last = circle; //add pitting only to original surface\n    }\n    return top;\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene3d(p)-vec3(scene3d(k[0]),scene3d(k[1]),scene3d(k[2])));\n}\n\nvec3 render3d(vec2 uv) {\n    \n    vec3 cam = normalize(vec3(2,uv));\n    vec3 init = vec3(-5,0,2);\n    \n    cam = erot(cam,vec3(0,1,0), .3);\n    cam = erot(cam,vec3(0,0,1), iTime*.1);\n    \n    vec3 p = init; \n    bool hit = false;\n    //raymarch\n    for (int i = 0; i < 100 && !hit; i++) {\n        float dist = scene3d(p);\n        hit = dist*dist < 1e-6;\n        p+=cam*dist*.9;\n        if (distance(p,init) > 100.) break;\n    }\n    //shading\n    vec3 n = norm(p);\n    return hit ? sin(n)*.5+.5 : vec3(0.1);\n}\n\nvec3 shadeDistance(float d) {\n    float dist = d*150.0;\n    float banding = max(sin(dist), 0.0);\n    float strength = sqrt(1.-exp(-abs(d)*2.));\n    float pattern = mix(strength, banding, (0.6-abs(strength-0.5))*0.3);\n    \n    vec3 color = vec3(pattern);\n    color *= d > 0.0 ? vec3(1.0,0.56,0.4) : vec3(0.4,0.9,1.0);\n\n    return color;\n}\n\nfloat antialias(float x) {\n    float pixelsize = 3./iResolution.y;\n    return smoothstep(-pixelsize, pixelsize, x);\n}\n\nvec3 render2d(vec2 uv, vec2 mouse) {\n    uv *= 3.; mouse *= 3.;\n    vec3 col = shadeDistance(scene2d(uv));\n    \n    float mousedist = scene2d(mouse);\n    if (iMouse.z > 0.) {\n        col *= antialias(distance(mouse, uv) - abs(mousedist))*0.5+0.5;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    pittingtype = int(iTime)%3;\n    \n    if (uv.x > .0) {\n        fragColor.xyz = render3d(uv-vec2(0.45,0.));\n    } else {\n        fragColor.xyz = render2d(uv+vec2(0.45,0.), mouse+vec2(0.45,0.));\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}