{
    "Shader": {
        "info": {
            "date": "1721458991",
            "description": "sourses  https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/lXdGD2 https://www.shadertoy.com/view/MflyRf https://glslsandbox.com/e#109321.0",
            "flags": 0,
            "hasliked": 0,
            "id": "4csyRl",
            "likes": 3,
            "name": "cosmic fbm noise",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "galaxy",
                "cosmos",
                "universe",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n\n// The following two functions copied from The Book of Shaders\n// Credit to: Patricio Gonzalez Vivo\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define rotation(angle) mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\nfloat TAU = 2.*3.14159;\nfloat PI = 3.14159;\n\n\n// https://thebookofshaders.com/13/\nfloat fbm (in vec2 p) {\n    float nVal = 0.0;\n    float amp = .45;   \n    int numOctaves = 4;\n    for (int i = 0; i < numOctaves; i++) {\n        nVal += amp * simplex3d(vec3(p,.2*iTime));\n        nVal += amp * noise(p+iTime);\n        p *= 3.;\n        amp *= .45;\n    }\n    return nVal;\n}\n\n#define iterations 12\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n\n#define saturation 0.850\n\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n#define PI 3.141592\n#define TWOPI 6.283184\n\n#define R2D 180.0/PI*\n#define D2R PI/180.0* \n\nmat2 rotMat(in float r){float c = cos(r);float s = sin(r);return mat2(c,-s,s,c);}\n\n//fract -> -0.5 -> ABS  : coordinate absolute Looping\nfloat abs1d(in float x){return abs(fract(x)-0.5);}\nvec2 abs2d(in vec2 v){return abs(fract(v)-0.5);}\nfloat cos1d(float p){ return cos(p*TWOPI)*0.25+0.25;}\nfloat sin1d(float p){ return sin(p*TWOPI)*0.25+0.25;}\n\n#define OC 15.0\nvec3 Oilnoise(in vec2 pos, in vec3 RGB)\n{\n    vec2 q = vec2(1.0);\n    float result = 0.0;\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(pos.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    float s = 14.2;\n    \n    float gain = 0.44;\n    vec2 aPos = abs2d(pos)*0.0;//add pos\n\n    for(float i = 0.0; i < OC; i++)\n    {\n        pos *= rotMat(D2R 30.);\n        \n        float time = (sin(iTime)*0.5+0.5)*0.2+iTime*0.8;\n        q =  pos * s + time;\n        q =  pos * s + aPos + time;\n        q = vec2(cos(q));\nq*=ma;\n        result += sin1d(dot(q, vec2(0.3))) * gain;\n\n        s *= 1.07;\n        aPos += cos(smoothstep(0.0,0.15,q));\n        aPos*= rotMat(D2R 1.0);\n        aPos*= 1.232; \n    }\n    \n    result = pow(result,4.504);\n    return clamp( RGB / abs1d(dot(q, vec2(-0.240,0.000)))*.5 / result, vec3(0.0), vec3(1.0));\n}\n\n#define resolution iResolution.xy\n#define time iTime\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 uv = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n    vec2 uv2 = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n      vec2 uv3 = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n      uv3.x+=0.5;\n       uv3.y+=0.2;\n    vec3 col = vec3(0.);   \n    float t = fract(iTime);\n    //get coords and direction\n\tuv2.x+=0.1*cos(iTime);\n    uv2.y+=0.1*sin(iTime);\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n    vec2 uPos = ( gl_FragCoord.xy / resolution.y );//normalize wrt y axis\n\tuPos -= vec2((resolution.x/resolution.y)/2.0, 0.5);//shift origin to center\n\t\n\tfloat multiplier = 0.0005; // Grosseur\n\tconst float step2 = 0.006; //segmentation\n\tconst float loop = 80.0; //Longueur\n\tconst float timeSCale = 0.5; // Vitesse\n\t\n\tvec3 blueGodColor = vec3(0.0);\n\tfor(float i=1.0;i<loop;i++){\t\t\n\t\tfloat t = time*timeSCale-step2*i*i;\n\t\tvec2 point = vec2(0.75*sin(t), 0.5*sin(t));\n\t\tpoint += vec2(0.75*cos(t*4.0), 0.5*sin(t*3.0));\n\t\tpoint /= 11. * sin(i);\n\t\tfloat componentColor= multiplier/((uPos.x-point.x)*(uPos.x-point.x) + (uPos.y-point.y)*(uPos.y-point.y))/i;\n\t\tblueGodColor += vec3(componentColor/3.0, componentColor/3.0, componentColor);\n\t}\n\t\n\t\n\tvec3 color = vec3(0,0,0);\n\tcolor += pow(blueGodColor,vec3(0.1,0.3,0.8));\n   \n    vec3 from=vec3(1.,.5,0.5);\n    vec2 uv0 = uv;\n vec3 col2 = vec3(0.0,0.0,0.0);\n    vec2 st = (fragCoord/iResolution.xy);\n            st.x = ((st.x - 0.5) *(iResolution.x / iResolution.y)) + 0.5;\n    float stMask = step(0.0, st.x * (1.0-st.x));\n float t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv3.xy) + .57)) * 25.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\tmat2 ma = mat2(co, si, -si, co);\n\n    //st-=.5; //st move centor. Oil noise sampling base to 0.0 coordinate\n    st*=3.;\n    \n    vec3 rgb = vec3(0.30, .8, 1.200);\n    \n    \n    //berelium, 2024-06-07 - anti-aliasing\n    float AA = 1.0;\n    vec2 pix = 1.0 / iResolution.xy;\n    vec2 aaST = vec2(0.0);\n    \n    for(float i = 0.0; i < AA; i++) \n    {\n        for(float j = 0.0; j < AA; j++) \n        {\n            aaST = st + pix * vec2( (i+1.5)/AA, (j+0.5)/AA );\n            col2 += Oilnoise(aaST, rgb);\n        }\n    \n    }\n    \n    col2 /= AA * AA;\n    float scale = 5.0;\n    uv *= scale;\n       uv2 *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n \n    // Idea from IQ\n    col += 3.*(fbm(uv + fbm(uv + fbm(uv))) - .4) * (1.5-length(uv0));\n    \n    col *= vec3(.9,.9,1.0);\n    float s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir+.5;\n        \n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.05), sin(iTime*0.05),-sin(iTime*0.05), cos(iTime*0.05));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\n    \n\n    \n\n    \tfragColor= vec4(v*.03+col+col2+color*2.,1.);\t\n            fragColor+= vec4(happy_star(uv3*ma, anim) * vec3(0.15+0.1*cos(iTime),0.2,0.15+0.1*sin(iTime))*0.3, 1.0);\n         fragColor+= vec4(happy_star(uv2, anim) * vec3(0.25+0.1*cos(iTime),0.2+0.1*sin(iTime),0.15)*0.5, 1.0);\n        \n           fragColor*= vec4(happy_star(uv2, anim) * vec3(0.25+0.1*cos(iTime),0.2+0.1*sin(iTime),0.15)*2., 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}