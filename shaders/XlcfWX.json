{
    "Shader": {
        "info": {
            "date": "1541182777",
            "description": "Mandelbrot zoom at point (-1.2501046 + 0.00611021 i), which shows the mandelbrot, but as it gets closer and closer shows the limits of floating point numbers at very small numbers (in particular the boxes and lines at 1+ minutes), tuned to time 318.84.",
            "flags": 0,
            "hasliked": 0,
            "id": "XlcfWX",
            "likes": 0,
            "name": "Mandelbrot Set Test Zoom",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "zoom"
            ],
            "usePreview": 0,
            "username": "Nihilistic_Furry",
            "viewed": 502
        },
        "renderpass": [
            {
                "code": "// Default zoom point of (-1.2501046 + 0.00611021 i) \n// Zooms in on point that is good at showing rounding errors as it zooms in more and more \n#define cx -1.2501046\n#define cy 0.00611021\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Variables\n\tfloat scale = 1.0 / (iTime * iTime * iTime + 1.0);\n    float ax, ay;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Change perspectives w/ zoom\n    ax = cx + ((uv.x * 3.5) - 2.5) * scale;\n    ay = cy + ((uv.y * 2.0) - 1.0) * scale;\n    \n    // Set up calculation (a = real, b = imaginary)\n    float a1 = ax, a2, b1 = ay, b2;\n    int i;\n    \n    // Actual math of mandelbrot set\n    for (i = 0; !(i > 255 || (a1 * a1) + (b1 * b1) > 16.0); i++) \n    {\n        // Find \"z = z^2 + c\"\n        a2 = (a1 * a1) - (b1 * b1) + ax;\n        b2 = 2.0 * (a1 * b1) + ay;\n        \n        // Set values to new values\n        a1 = a2;\n        b1 = b2;\n    }\n    \n    float color;\n    \n    // If part of set, make it black, if not, divide by 255 for colored version\n    if (i > 255)\n    {\n        color = 0.0;\n    } \n    else\n    {\n\t\tcolor = float (i) * 0.0625;\n    }\n    \n    fragColor = vec4 (color, color, color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}