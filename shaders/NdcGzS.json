{
    "Shader": {
        "info": {
            "date": "1630003480",
            "description": "Simply black hole simulation based on ray tracing ",
            "flags": 0,
            "hasliked": 0,
            "id": "NdcGzS",
            "likes": 3,
            "name": "Black hole simulation",
            "published": 3,
            "tags": [
                "raytracing",
                "space",
                "blackhole"
            ],
            "usePreview": 0,
            "username": "Skele7on1250",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "#define H 6.626176f*10e-34\n#define C 299792458.\n#define HL 380.\n#define sunM 1.989f*10e30\n//I choose this mass for more beauty effect\n#define photonM 0.0000000000000000000000000001f\n#define G 6.67f*10e-11\nstruct BlackHole{\n    vec3 pos;\n    float radius;\n    float mass;\n    vec3 discColor;\n};\nvec3 CalculateRayDir(vec3 origin,float fov,vec2 fragCoord);\nvec3 TraceRay(vec3 origin,vec3 dir,float t);\nvec3 CalculateColor(vec3 origin,vec3 dir,int rayDistance,BlackHole blackHole);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    BlackHole blackHole=BlackHole(vec3(cos(iTime/3.)*50.+50.,0,100.),5.,sunM*10e6,vec3(1.,0.4f,0.));\n\n    // Output to screen\n    vec3 cameraPos=vec3(0,0,0);\n    vec3 col=CalculateColor(cameraPos,CalculateRayDir(cameraPos,45.,fragCoord),100,blackHole);\n    fragColor = vec4(col,1.0);\n}\nvec3 CalculateRayDir(vec3 origin,float fov,vec2 fragCoord){\n    float d=1./tan(fov/2.);\n    float px=fragCoord.x+0.5f;\n    float py=fragCoord.y+0.5f;\n    float aspect_ratio=iResolution.x/iResolution.y;\n    return vec3(aspect_ratio*(2.*px/iResolution.x)-1.,(2.*py/iResolution.y)-1.,d);\n}\nfloat hypot(vec3 first,vec3 second){\n    vec3 resVec=second-first;\n    return sqrt(pow(resVec.x,2.0f)+pow(resVec.y,2.0f)+pow(resVec.z,2.0f)); \n}\nvec3 CalculateColor(vec3 origin,vec3 dir,int rayDistance,BlackHole blackHole){\n    vec3 bhDir;\n    float F;\n    while(rayDistance>0){   \n        origin=TraceRay(origin,dir,1.);\n        //Return black hole color\n        if(hypot(origin,blackHole.pos)<=blackHole.radius){\n            return vec3(0,0,0);\n        }\n        //Return calculation for disc color\n        if(hypot(origin,blackHole.pos)<=blackHole.radius*3.&&abs(origin.y-blackHole.pos.y)<=0.3f){\n            return blackHole.discColor*max(0.4f,((blackHole.radius*3.-hypot(origin,blackHole.pos))/blackHole.radius*3.));\n        }\n        \n        //Calculate direction to black hole\n        bhDir=normalize(blackHole.pos-origin);\n        //Calculate F of black hole\n        F=G*(photonM*blackHole.mass)/(pow(hypot(origin,blackHole.pos),2.));\n        bhDir*=F;\n        //Calculate new direction\n        dir+=bhDir;\n        rayDistance-=1;\n    }\n    return texture( iChannel0, dir ).rgb;\n    \n    \n}\nvec3 TraceRay(vec3 origin,vec3 dir,float t){\n    return(origin+dir*t);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}