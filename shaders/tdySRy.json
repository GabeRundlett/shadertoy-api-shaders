{
    "Shader": {
        "info": {
            "date": "1574270603",
            "description": "Based on Khayzo's https://www.shadertoy.com/view/4slBDl \nCheap Dither offset:  (1/(mantissa bits ^ 2)) * noise*value\nIt produces a result close enough, still dithers the image reasonably well\nLeft Mouse = Cheap, Right Mouse = Original\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tdySRy",
            "likes": 3,
            "name": "Cheap  R11G11B10F Dither",
            "published": 3,
            "tags": [
                "dither",
                "quantization",
                "dithering",
                "r11g11b10f"
            ],
            "usePreview": 0,
            "username": "Dain",
            "viewed": 512
        },
        "renderpass": [
            {
                "code": "//This is Khayzo's https://www.shadertoy.com/view/4slBDl with a cheap dither option(left mouse button) and the original(right mouse)\n//Shows the relative error when it is blue\n\n#define FLOAT32 0\n#define FLOAT16\t1\n#define FLOAT11\t2\n#define FLOAT10\t3\n#define FLOAT8\t4\n\n#define FLOAT_TYPE_COUNT 5\n\n#define EFloatType int\n\n\n#define RANGE_LOW 0.2\n#define RANGE_HIGH 0.7\n\n#ifndef SHOW_RELATIVE_ERROR\n//#define REMAP_RANGE_TO_01\n#endif\n#define SHOW_RELATIVE_ERROR\nstruct FloatDesc\n{\n\tbool signBit;\n\tint nbitsExponent;\n\tint nbitsMantissa;\n};\n\nconst FloatDesc gFloatDescs[FLOAT_TYPE_COUNT] = FloatDesc[FLOAT_TYPE_COUNT](\n\tFloatDesc(true,  8, 23 ), // FLOAT32\n\tFloatDesc(true,  5, 10 ), // FLOAT16\n\tFloatDesc(false, 5, 6  ), // FLOAT11\n\tFloatDesc(false, 5, 5  ), // FLOAT10\n    FloatDesc(false, 5, 3  )  // FLOAT8\n);\n// Quantize a 32-bit float to a float with 'nbitsMantissa' bits of mantissa\nfloat F32ToFn(float f, const int nbitsMantissa)\n{\n\tint bits = floatBitsToInt(f);\n\n    int s = bits >> 31;\t// sign\n    int expo = (bits & 0x7f800000) >> 23; // exponent\n    int m = bits & 0x007fffff; // mantissa\n\n  \tconst float exponentBias32 = 127.0;\n    float decodedExponent = float(expo) - float(exponentBias32);\n\n    float decodedSignificand = 1.0;\n\n    for(int i = 0; i < nbitsMantissa; ++i)\n    {\n        int bit = (1 << (23 - i - 1));\n        if((m & bit) != 0)\n        {\n            decodedSignificand += exp2(-(float(i)+1.0));\n        }\n    }\n\n    return decodedSignificand * exp2(decodedExponent);\n}\n\n// Quantize a 32-bit float to a float of the given type\nfloat F32To(EFloatType ftype, float f)\n{\n\treturn F32ToFn(f, gFloatDescs[ftype].nbitsMantissa);\n}\n\n\n// Quantum for the float f with 'nbitsMantissa' bits of mantissa\nfloat FnQuantum(float f, const int nbitsMantissa)\n{\n    float e = floor(log2(f));   \n    return exp2(e - float(nbitsMantissa));\n}\n\n// Quantum for the float f of the given type\nfloat FQuantum(EFloatType ftype, float f)\n{\n    return FnQuantum(f, gFloatDescs[ftype].nbitsMantissa);\n}\n\n\nfloat interleavedGradientNoise(vec2 n)\n{\n    float f = 0.06711056 * n.x + 0.00583715 * n.y;\n    return fract(52.9829189 * fract(f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float f = uv.y > 0.5 ? uv.x : uv.x *  (RANGE_HIGH - RANGE_LOW) + RANGE_LOW; // [0.0, 1.0] : [RANGE_LOW, RANGE_HIGH]\n  \n    float r = f;\n    float g = f;\n    float b = f;\n    \n  //  float noise = interleavedGradientNoise(fragCoord.xy);\n   // noise = noise * 2.0 - 1.0;\n    vec2 bn = texture( iChannel0, fragCoord.xy/iChannelResolution[0].xy ).rg;\n    float noise = (bn.x + bn.y) - 1.0;//triangular shaped blue noise in -1 to +1\n    \n\n    // Cheap Dither(Left Mouse Button)\n    bool mouseBtnPressed = (iMouse.z >= 1.0);\n    if(mouseBtnPressed)\n    {\n        float dither11_r = (1.0/64.0) * noise*r;//red/green have 6 mantissa bits\n    \tfloat dither11_g = (1.0/64.0) * noise*g;\n    \tfloat dither10_b = (1.0/32.0) * noise*b;//blue is 5 bits\n        \n   \t\tr += dither11_r;\n       \tg += dither11_g;\n        b += dither10_b;\n    }\n     \n    bool mouseBtn2Pressed = (iMouse.w >= 1.0);\n    \n    //Correct Dither(Right Mouse Button)\n    if(mouseBtn2Pressed)\n    {\n        float dither11_r = FQuantum(FLOAT11, f) * noise;\n    \tfloat dither11_g = dither11_r;\n    \tfloat dither10_b = FQuantum(FLOAT10, f) * noise;\n        \n   \t\tr += dither11_r;\n       \tg += dither11_g;\n        b += dither10_b;\n    }\n\n    \n    // Quantize 32-bit floats to R11G11B10F\n    r = F32To(FLOAT11, r);\n    g = F32To(FLOAT11, g);\n    b = F32To(FLOAT10, b);\n    \n    vec3 rgb = vec3(r, g, b);\n    \n    #ifdef REMAP_RANGE_TO_01\n    if(uv.y < 0.5)\n    \trgb = (rgb - RANGE_LOW) / (RANGE_HIGH - RANGE_LOW);\n    #endif\n       \n   \t//#ifdef SHOW_RELATIVE_ERROR\n    if(sin(iTime) >0.0){\n    \tvec3 relativeError = abs((vec3(f) - rgb) / vec3(f));\n   \t\t rgb = relativeError * 10.0;\n    }\n  //  #elif defined(SHOW_DITHER)\n   // rgb = vec3(dither11, dither11, dither10) * 200.0;\n //   #endif\n    \n    // Separator\n    vec2 texelSize = vec2(1.0 / iResolution.xy);\n    float lineWidth = 4.0;\n    if(abs(uv.y - 0.5) < (0.25 * lineWidth * texelSize.y)) rgb = vec3(0);\n    \n  //  rgb = vec3(abs(dithDiff)*100.0);\n\tfragColor = vec4(pow(rgb,vec3(1.0)), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}