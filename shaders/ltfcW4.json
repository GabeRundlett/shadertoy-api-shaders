{
    "Shader": {
        "info": {
            "date": "1504860312",
            "description": "An attempt to make a procedural planet. Don't know how to get rid of the flickering pixels in the clouds so far.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltfcW4",
            "likes": 4,
            "name": "A procedural,earth-like planet ",
            "published": 3,
            "tags": [
                "procedural",
                "planet",
                "simplexnoise"
            ],
            "usePreview": 0,
            "username": "LuisRodriguezRuiz",
            "viewed": 1370
        },
        "renderpass": [
            {
                "code": "\n#define maxIterations 64\n#define TWOPI 6.2831854\n\n\n/*****************************************************************************/\n/*                               Data structures                             */\n/*****************************************************************************/\n\nstruct Light\n{\n  vec3 position;\n  vec3 direction;\n  vec3 color;\n  float intensity;\n  vec3 attenuation;\n};\n\nstruct Material\n{\n  vec4 color;\n  float ambient;\n  float diffuse;\n  float specular;\n  float emissive;\n  vec4 bgColor;\n};\n\n\nstruct Object\n{\n  float distance;\n  vec3 orientation;\n};\n\n\n//\tClassic Perlin 3D Noise \n//\tborrowed from Stefan Gustavson\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n\n\nmat4 rotationMatrix(vec3 a, float g)\n{\n    a = normalize(a);\n    float s = sin(g);\n    float c = cos(g);\n    float oc = 1.0 - c;\n    \n    return mat4(oc*a.x*a.x+c, oc*a.x*a.y-a.z*s, oc*a.z*a.x+a.y*s, 0.0,\n                oc*a.x*a.y+a.z*s, oc*a.y*a.y+c, oc*a.y*a.z-a.x*s, 0.0,\n                oc*a.z*a.x-a.y*s, oc*a.y*a.z+a.x*s, oc*a.z*a.z+c, 0.0,\n                0.0,0.0,0.0,1.0);\n}\n\n\nvec3 rotate(vec3 p, vec3 axis, float angle)\n{\n    mat4 m=rotationMatrix(axis,-angle);\n    vec4 q=m*vec4(p,1.0);\n    return q.xyz;\n}\n\n// The planet is simply a sphere with simplex noise based textures.\n\nfloat sphere( vec3 p, float radius )\n{\n  return length(p)-radius;\n}\n\n\n// Definition of materials\n\nMaterial landMaterial=Material(vec4(0.20,0.16,0.09,1.0),0.1,0.7,0.0,0.0,vec4(0.72,0.67,0.52,1.0));\nMaterial grassMaterial=Material(vec4(0.27,0.4,0.25,1.0),0.25,0.95,0.0,0.0,vec4(0.15,0.33,0.11,1.0));\nMaterial waterMaterial=Material(vec4(0.1,0.1,0.4,1.0),0.1,1.0,0.7,0.0,vec4(0.15,0.15,0.55,1.0));\nMaterial cloudsMaterial=Material(vec4(1.0,1.0,1.0,1.0),0.4,0.5,0.0,0.0,vec4(1.0,1.0,1.0,1.0));\nMaterial backgroundMaterial=Material(vec4(0.0,0.0,0.0,1.0),0.0,0.8,0.3,0.0,vec4(0.0,0.0,0.0,0.0));\n\nfloat noiseValue;\nfloat noiseValue2;\n\n\nfloat smoothStep(float edge0, float edge1, float x)\n{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0); \n    return x*x*(3.0- 2.0*x);\n}\n\n\n\n// The threshold parameter is to stop the computation when the noise\n// is lower than this thresold. Useful to build the continents and other things\n\nfloat fractalNoise(float freq, float lacunarity, float decay, vec2 threshold, vec3 p)\n{  \n  float res=0.0;\n  float currentFreq=freq;\n  float weight=1.0;\n  float maxValue=0.0;\n  // Always 5 octaves because the condition in the loop must be a constant.\n  for(int i=0;i<5;i++)\n  {\n\n    res+=weight*cnoise(currentFreq*p);\n    if(threshold.x==0.0||(res>threshold.x*float(i)&&res<threshold.y*float(i)))\n          weight/=decay;\n    else weight/=3.0;\n    \n\n    currentFreq*=lacunarity;\n  }\n  return res/5.0;\n}\n\n\nMaterial getMaterial(Object obj)\n{\n  // The material: clouds, land, or water is computed according to the fractal noise. \n  float alpha=1.0;\n\n  noiseValue=fractalNoise(1.8,3.0,1.9,vec2(0.06,0.09),obj.orientation);\n  noiseValue2=smoothStep(0.0,1.0,fractalNoise(6.7,2.5,1.1,vec2(0.0,0.0),obj.orientation));   \n  if(clamp(0.0,1.0,noiseValue2*noiseValue2)>0.01) return cloudsMaterial;\n  else if(noiseValue<0.03) return waterMaterial;\n       else return landMaterial;\n    \n}\n\n\n\nvec4 getTexture(Material mat, vec3 p)\n{\n\n  if(mat==landMaterial)\n  {\n    // Adds some green areas. \n    if(noiseValue*10.0-float(int(noiseValue2*10.0))>0.55)\n    {\n      mat=grassMaterial;\n      noiseValue=10.0*noiseValue2*noiseValue+3.0*cnoise(noiseValue*(p-vec3(0.1,0.1,0.2))*40.0)+0.6*cnoise((p+vec3(0.2,0.1,-0.3))*200.0);\n    } \n    else\n      noiseValue=noiseValue2*2.0+noiseValue*4.0+2.0*cnoise((p+vec3(0.6,0.3,0.4))*noiseValue*40.0);\n  }\n\n  else if(mat==waterMaterial)\n      noiseValue*=10.0;\n\n\n  noiseValue=clamp(0.0,1.0,noiseValue);\n  return noiseValue*mat.color+(1.0-noiseValue)*mat.bgColor;\n}\n\n\n\nObject map( vec3 p )\n{\n  return Object(sphere(p,1.0),rotate(p,vec3(0.0,1.0,1.0),iTime/8.0));\n}\n\n\nvec3 computeNormal( vec3 p )\n{\n    vec2 epsilon = vec2(0.01,0.0);\n     \n    float deltaX = map(p+epsilon.xyy).distance - map(p-epsilon.xyy).distance;\n    float deltaY = map(p+epsilon.yxy).distance - map(p-epsilon.yxy).distance;\n    float deltaZ = map(p+epsilon.yyx).distance - map(p-epsilon.yyx).distance;\n    \n    return normalize(vec3(deltaX,deltaY,deltaZ));\n}\n\n\n\n\nvec4 lighting(Object obj, vec3 pos,vec3 p, Light light, vec3 rayDirection)\n{\n  \n  \n  float intensity=light.intensity;\n  if(light.direction==vec3(0.0,0.0,0.0))\n  {\n    light.direction=normalize(vec3(p-light.position));\n    float d=distance(light.position,p);\n    if(light.attenuation!=vec3(0.0,0.0,0.0))\n       intensity*=1.0/(light.attenuation.x*d*d+light.attenuation.y*d+light.attenuation.z);\n  }\n\n  // Gamma correction:\n  intensity=pow(intensity,0.45);\n  Material mat=getMaterial(obj);\n  vec3 ambientColor=mat.ambient*light.color;\n  vec3 emissiveColor=vec3(0.0,0.0,0.0);\n  vec3 N=computeNormal(p);\n  vec3 diffuseColor = intensity*light.color*mat.diffuse*max(dot(light.direction, N),0.0);\n \n  vec3 R=reflect(light.direction,N);\n  vec3 specularColor =vec3(0.0,0.0,0.0);\n\n  vec4 materialColor=getTexture(mat,obj.orientation);\n  return vec4(materialColor.xyz*(diffuseColor+specularColor+ambientColor+emissiveColor),materialColor.w);\n }\n\n\n\n\nObject rayMarching(vec3 origin, vec3 direction, out vec3 p)\n{\n    float currentDistance = 0.0;\n\n    Object res=Object(0.0,vec3(0.0,0.0,0.0));\n\n    float lowerThreshold=0.001;\n    float upperThreshold=30.0; \n    for(int i=0;i<maxIterations;i++)\n    {\n        p=origin+direction*currentDistance;\n\tObject obj=map(p);\n\tfloat distanceToClosestSurface = obj.distance;\n        currentDistance += distanceToClosestSurface;\n        if(distanceToClosestSurface<lowerThreshold)\n\t{\n\t  return obj;\n\t  break;\n\t}\n        \n        if(distanceToClosestSurface>upperThreshold)\n        {\n            currentDistance=0.0;\n            break;\n        }\n    }\n\n    return res;\n}\n\nLight light = Light(vec3(0.0,0.0,0.0),normalize(vec3(-0.4,0.2,-0.2)),normalize(vec3(1.0,1.0,1.0)),7.2,vec3(0.0,0.0,0.0));\nvec3 cameraPosition = vec3(0.0,0.0,-1.7);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n   {\n     vec2 uv = (fragCoord.xy / iResolution.xy)*2.0-1.0;\n     uv.x *= iResolution.x / iResolution.y;\n     vec3 rayDirection = normalize(vec3( uv.x, uv.y, 1.0));\n     vec3 pointOnSurface;\n     Object obj=rayMarching( cameraPosition, rayDirection, pointOnSurface);\n     vec3 pos = cameraPosition + obj.distance*rayDirection;\n     if(obj.distance!=0.0)\n     {\n       \n       fragColor = lighting(obj,pos,pointOnSurface, light, rayDirection);\n     }\n     else fragColor=backgroundMaterial.color;\n     \n   }\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}