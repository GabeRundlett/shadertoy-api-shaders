{
    "Shader": {
        "info": {
            "date": "1644014833",
            "description": "A fluidly subdividing reaction/diffusion field. Use the mouse to control the zoom.",
            "flags": 32,
            "hasliked": 0,
            "id": "NdjyWy",
            "likes": 18,
            "name": "Byzantine Biology",
            "published": 3,
            "tags": [
                "scaling",
                "cellularautomaton"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 486
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 C = iMouse.xy / iResolution.xy;\n    vec2 uv = fragCoord / iChannelResolution[0].xy;\n    float m = float(iFrame % R) / float(R);  \n    uv -= C;\n    uv.x *= iResolution.x / iResolution.y;\n    //uv = uv / (1.0 + 0.01*dot(uv,uv));\n    uv.x /= iResolution.x / iResolution.y;\n    uv *= exp(mix(log(1.0),log(0.5),m));\n    vec2 uv3 = uv + C;\n    vec2 uv2 = uv + C;\n    vec2 uv1 = uv + C;\n    float r = texture(iChannel0, uv1).r*0.5+0.5;\n    float g = texture(iChannel0, uv2).g*0.5+0.5;\n    float b = texture(iChannel0, uv3).b*0.5+0.5; \n    vec3 col = vec3(r,g,b);\n    float t = iTime / 500.0;\n    col =\n          col.r * pastelizer(t)\n        + col.g * pastelizer(t + 1./3.)\n        + col.b * pastelizer(t + 2./3.);\n    col = col / 1.5;\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec2 rez;\nvec2 fc;\n\nvec3 fetch(int x, int y) {\n    vec2 p = fc + vec2(x,y);\n    return texture(iChannel0, p / rez).rgb;\n}\n\nfloat combine(vec2 p) {\n    p = clamp(p, vec2(-1.0), vec2(1.0))*0.5+0.5;\n    return 1.0 - max(p.x, p.y);\n}\n\nvec4 process(vec2 c) {\n   rez = iChannelResolution[0].xy;\n   fc = c;\n\n    //vec3 p00 = fetch(-2,-2);\n    vec3 p10 = fetch(-1,-2);\n    vec3 p20 = fetch( 0,-2);\n    vec3 p30 = fetch( 1,-2);\n    //vec3 p40 = fetch( 2,-2);\n\n    vec3 p01 = fetch(-2,-1);\n    vec3 p11 = fetch(-1,-1);\n    vec3 p21 = fetch( 0,-1);\n    vec3 p31 = fetch( 1,-1);\n    vec3 p41 = fetch( 2,-1);\n\n    vec3 p02 = fetch(-2, 0);\n    vec3 p12 = fetch(-1, 0);\n    vec3 p22 = fetch( 0, 0);\n    vec3 p32 = fetch( 1, 0);\n    vec3 p42 = fetch( 2, 0);\n\n    vec3 p03 = fetch(-2, 1);\n    vec3 p13 = fetch(-1, 1);\n    vec3 p23 = fetch( 0, 1);\n    vec3 p33 = fetch( 1, 1);\n    vec3 p43 = fetch( 2, 1);\n\n    //vec3 p04 = fetch(-2, 2);\n    vec3 p14 = fetch(-1, 2);\n    vec3 p24 = fetch( 0, 2);\n    vec3 p34 = fetch( 1, 2);\n    //vec3 p44 = fetch( 2, 2);\n\n\n    vec3 corners = p11 + p31 + p13 + p33;\n    vec3 edges = p12 + p32 + p21 + p23;\n\n    vec3 lp = corners + 4. * edges - 20.0 * p22;\n\n    vec3 bilp = p01 + p02 + p03 + p14 + p24 + p34 + p43 + p42 + p41 + p30 + p20 + p10\n        - 2. * corners - 10. * edges + 36.0 * p22;\n\n    float D = 0.0;\n    float dx = 1.0;\n    vec2 d = sin(((fc/rez)*2.0-1.0)*radians(360.0)*1.0)*0.5+0.5;\n    float dt = 0.16 / (max(0.0,2.0 - length(d))*float(R)/60.0);\n    //bilp = bilp / (3.0 * dx * dx * dx * dx);\n    //lp = lp / (6.0 * dx * dx);\n    bilp = bilp / (3.0 * dx);\n    lp = lp / (6.0 * dx);\n\n    vec3 u = p22;        \n\n    float H = 2.0;\n    vec3 mu = mix(vec3(0.5), vec3(2.0), sin((iTime/120.0 + vec3(0,1,2)/3.)*radians(360.0))*0.5+0.5);\n    vec3 beta = (vec3(combine(u.yz),combine(u.xz),combine(u.xy))*2.0-1.0)*0.5;\n\n    vec3 du = mu*u - bilp - 2.*lp - u + beta*u*u - u*u*u;\n\n    vec3 res = u + du*dt;\n    \n    // combined average\n    float k = (res.x + res.y + res.z) / 3.0;\n\n    return vec4(mix(res, vec3(k), vec3(0.01)),0.01);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 C = iMouse.xy / iResolution.xy;\n    if (iFrame == 0) {\n        vec2 uv = (fragCoord / iResolution.xy) * 2.0 - 1.0;        \n        uv.x *= iResolution.x / iResolution.y;\n        float c0 = length(uv) - 0.5;\n        float c1 = length(uv - vec2(0.0,0.25));\n        float c2 = length(uv - vec2(0.0,-0.25));\n        float d = max(min(max(c0, -uv.x),c1-0.25),-c2+0.25);        \n        d = max(d, -c1+0.07);\n        d = min(d, c2-0.07);\n        d = min(d, abs(c0)-0.01);\n        float w = sign(d) * sin(c0*80.0);\n        vec3 h = pastelizer(atan(uv.y, uv.x)/radians(360.0))*2.0-1.0;\n        fragColor = vec4(h*w,0.0);\n    } else if ((iFrame % R) == 0) {\n        vec2 c = vec2(fragCoord / iResolution.xy);\n        fragColor = texture(iChannel0, (c - C) / 2.0 + C);\n    } else {\n        vec4 s = process(fragCoord);\n        fragColor = clamp(s, -1.0, 1.0);\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int R = 60 * 4;\n\nvec3 pastelizer(float h) {\n    h = fract(h + 0.92620819117478) * 6.2831853071796;\n    vec2 cocg = 0.25 * vec2(cos(h), sin(h));\n    vec2 br = vec2(-cocg.x,cocg.x) - cocg.y;\n    vec3 c = 0.729 + vec3(br.y, cocg.y, br.x);\n    return c * c;\n}\n\n//const vec2 C = vec2(0.5, 0.0);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}