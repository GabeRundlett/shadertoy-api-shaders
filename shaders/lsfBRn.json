{
    "Shader": {
        "info": {
            "date": "1494532404",
            "description": "2/100",
            "flags": 0,
            "hasliked": 0,
            "id": "lsfBRn",
            "likes": 3,
            "name": "2/100",
            "published": 3,
            "tags": [
                "noise",
                "dot"
            ],
            "usePreview": 0,
            "username": "yahe",
            "viewed": 465
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926535897932384626433832795;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (in vec2 st) { \n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n    vec2 u = f*f*(3.0-2.0*f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\nvec2 movingTiles(vec2 _st, float _zoom, float _speed){\n    _st *= _zoom;\n    float time = u_time*_speed;\n    _st.x += cos(iTime/3.0) * 2.* noise(_st*20.) / 2.0 ;\n    _st.y += sin(iTime/3.0)  * 2.* noise(_st*20.) / 2.0 ;\n      \n    return fract(_st);\n}\n\nfloat circle(vec2 _st, float _radius){\n    vec2 pos = vec2(0.5)-_st;\n    return smoothstep(1.0-_radius*(sin(iTime/3.0)+1.0) ,1.0-_radius* (sin(iTime/3.0)+1.0)+_radius* (sin(iTime/3.0)+1.0)*0.2,1.-dot(pos,pos)*3.14);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n\n    st = movingTiles(st,.5,0.5);\n\n    vec3 color = vec3( circle(st, 0.2 ) * sin(iTime/5.) ,  circle(st, 0.5 ) * st.y* sin(iTime/2.0),  circle(st, 0.4 )* st.y+0.1);\n\n    fragColor = vec4(color,1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}