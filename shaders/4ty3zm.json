{
    "Shader": {
        "info": {
            "date": "1477107350",
            "description": "I created a simple lens flare to see how one might be implemented.\nYes, I know, I should separate the blur into 2 passes, but that's not the point. \nYes, color input should be hdr.\nI would appreciate ideas on how to make this look more realistic.",
            "flags": 32,
            "hasliked": 0,
            "id": "4ty3zm",
            "likes": 6,
            "name": "Lens Flare Test",
            "published": 3,
            "tags": [
                "flare"
            ],
            "usePreview": 0,
            "username": "epicabsol",
            "viewed": 1336
        },
        "renderpass": [
            {
                "code": "//#define clear\n\nconst float xrad = 60.0; // x radius of blur\nconst float yrad = 1.0; // y radius of blur\nconst float xscale = 5.0; // x blur offset scale\nconst float yscale = 1.0; // y blur offset scale\nconst float scale = 20.0; // intensity scale\nconst float brightnessMin = 0.75;\nconst float maxLength = 1.7320508075688772935274463415059; // sqrt(3) = max length of a color which is (0, 0, 0) through (1, 1, 1)\nconst vec3 tint = vec3(0.1, 0.5, 1.0);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef clear\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv) * vec4(1.0, 1.0, 1.0, 1.0);\n    #else\n    \n    vec3 result = vec3(0, 0, 0);\n    for (float x = -xrad; x < xrad; x += 1.0)\n    {\n        for (float y = -yrad; y < yrad; y += 1.0)\n        {\n            vec3 c = texture(iChannel0, vec2((x * xscale + fragCoord.x) / iResolution.x, (y * yscale + fragCoord.y) / iResolution.y)).xyz;\n        \tresult += tint * clamp((1.0 - length(vec2(x / xrad, y / yrad))) * scale * c * clamp((length(c) / maxLength - brightnessMin) * 4.0, 0.0, 1.0), 0.0, scale);//* pow(length(c) * 1.3, 2.0);\n        }\n    }\n\t\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy) + vec4(result / ((xrad * 2.0 + 1.0) * (yrad * 2.0 + 1.0)), 1.0);\n#endif\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float radius = 0.05 - 0.07 * sin(iTime * 5.0) / 3.1415926535;\n    fragColor = mix(vec4(0.5, 0.5, 0.5, 1.0), vec4(1.0, 1.0, 1.0, 1.0), clamp(20.0 * (1.0 - radius * length(fragCoord - (iResolution.xy * 0.5 + 100.0 * sin(iTime * 0.25)))), 0.0, 1.0));\n\tfragColor = mix(fragColor, vec4(0.0, 0.0, 0.0, 1.0), clamp(100.0 * (1.0 - 0.008 * length(fragCoord - iResolution.xy * 0.5 + vec2(100, 100))), 0.0, 1.0));\n\t\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}