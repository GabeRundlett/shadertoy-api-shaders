{
    "Shader": {
        "info": {
            "date": "1702491440",
            "description": "an attempt at recreating the effect from https://www.youtube.com/watch?v=bMTeCqNkId8",
            "flags": 32,
            "hasliked": 0,
            "id": "DlKfz3",
            "likes": 3,
            "name": "Heightmap Lighting",
            "published": 3,
            "tags": [
                "lighting",
                "heightmap"
            ],
            "usePreview": 0,
            "username": "soimn",
            "viewed": 163
        },
        "renderpass": [
            {
                "code": "#define PION2 1.57079632679f\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 texel = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    vec3 albedo  = texel.xyz;\n    float height = texel.w;\n    vec3 normal = texelFetch(iChannel0, ivec2(fragCoord), 0).xyz;\n    \n    vec3 light = normalize(vec3(-0.5f, 0.5f, 0.5f));\n    float light_steepness = length(light-vec3(light.xy, 0.0f))/length(light.xy);\n    \n    bool in_shadow = false;\n    \n    ivec2 sstep = ivec2(sign(light));\n    ivec2 pos = ivec2(fragCoord);\n    while (pos.x >= 0 && pos.x < int(iResolution.x) && pos.y >= 0 && pos.y < int(iResolution.y))\n    {\n        float pos_height = texelFetch(iChannel0, pos, 0).w;\n    \n        if ((pos_height-height)/(length(vec2(pos) - fragCoord)*4.0f) > light_steepness)\n        {\n            in_shadow = true;\n        }\n    \n        float err_x = dot(vec2(pos + sstep.x) - fragCoord, light.xy); \n        float err_y = dot(vec2(pos + sstep.y) - fragCoord, light.xy);\n    \n        pos += sstep;\n    }\n    \n    float light_i = 0.3f;\n    if (!in_shadow)\n    {\n        light_i += 0.7f*max(0.0f, dot(normal, light));\n    }\n    \n    vec3 color = albedo*light_i;\n    \n    vec3 waves_color = vec3(ivec3(0x2F, 0x37, 0xE2))/(400.0f + 100.0f*(cos(fragCoord.y + 80.0f*cos(fragCoord.x)) + sin(fragCoord.x + (50.0f + 30.0f*cos(0.5f*iTime))*sin(fragCoord.y))));\n    \n    // NOTE: Forgot to divide color by 255 and the result was pretty cool\n    //if (height < 220.0f) color = mix(color, mix(vec3(ivec3(0x2F, 0x37, 0xE2)), waves_color, 1.5f + 0.5f*sin(fragCoord.y + cos(fragCoord.x))), 0.2f);\n    \n    if (height < 220.0f) color = mix(color, mix(vec3(ivec3(0x2F, 0x37, 0xE2))/255.0f, waves_color, 0.9f + 0.5f*sin(fragCoord.y/24.0f + iTime + cos(fragCoord.x/30.0f + iTime*3.0f))), 0.2f);\n    \n    fragColor = vec4(color, 1.0f);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Heavily inspired by the applicaiton of \"noise\" in https://www.shadertoy.com/playlist/fXlXzf&from=0&num=12\nfloat\nHeight(vec2 p, float r)\n{\n    mat2 m = mat2(1.1f, -0.8f, 0.7f, 1.2f);\n    p += vec2(0.8f);\n    float f = noise(0.6f*vec2(noise(-3.0f*p)));\n    p *= m;\n    f += 0.4f*noise(p*5.0f);\n    p *= m;\n    f += 0.1f*noise(p*10.0f);\n    p *= m;\n    f += 0.01f*noise(p*16.0f);\n    \n    f = exp(-f);\n\n    f *= exp(-r*r*4.0f);\n    \n    return (0.5f + 0.5f*f)*400.0f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 scale = vec2(1.0f/iResolution.y);\n    vec2 c = (fragCoord + iTime*30.0f)*scale;\n    vec2 dx = vec2(1.0f, 0.0f)*scale;\n    vec2 dy = vec2(0.0f, 1.0f)*scale;\n\n    float r = length(2.0f*fragCoord/iResolution.xy-1.0f);\n\n    float height = Height(c, r);\n    \n    float diff_x = Height(c - dx, r) - Height(c + dx, r);\n    float diff_y = Height(c - dy, r) - Height(c + dy, r);\n    \n    vec3 normal = normalize(vec3(diff_x, diff_y, 2.0f));\n\n    fragColor = vec4(normal, height);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n\n// Simplex Noise (http://en.wikipedia.org/wiki/Simplex_noise), a type of gradient noise\n// that uses N+1 vertices for random gradient interpolation instead of 2^N as in regular\n// latice based Gradient Noise.\n\n// All noise functions here:\n//\n// https://www.shadertoy.com/playlist/fXlXzf&from=0&num=12\n\n\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 texel = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec3 normal  = texel.xyz;\n    float height = texel.w;\n    \n    vec3 albedo = vec3(0.0f);\n    \n    vec3 deep_sea_color = vec3(ivec3(0x22, 0x41, 0x8F));\n    vec3 shore_color    = vec3(ivec3(0x0C, 0xE1, 0xF5));\n    vec3 sand_color     = vec3(ivec3(0xF5, 0xD1, 0x91));\n    vec3 grass_color    = vec3(ivec3(0x06, 0x75, 0x59));\n    vec3 rock_color     = vec3(ivec3(0x6B, 0x5E, 0x8F));\n    vec3 snow_color     = vec3(ivec3(0xFE, 0xE8, 0xE8));\n    \n    float t = pow((height-200.0f)/10.0f, 0.3f);\n    vec3 sea_color = mix(deep_sea_color, shore_color, t);\n    sea_color = mix(sea_color, vec3(ivec3(0x1B, 0x37, 0xC2)), 0.5f - t*0.1f);\n    \n    albedo = mix(sea_color, sand_color, smoothstep(220.0f, 221.0f, height));\n    albedo = mix(albedo, grass_color, smoothstep(230.0f, 231.0f, height));\n    albedo = mix(albedo, rock_color, smoothstep(300.0f, 301.0f, height));\n    albedo = mix(albedo, snow_color, smoothstep(450.0f, 451.0f, height));\n    albedo /= 255.0f;\n    \n    fragColor = vec4(albedo, height);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}