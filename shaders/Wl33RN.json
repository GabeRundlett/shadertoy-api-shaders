{
    "Shader": {
        "info": {
            "date": "1576037221",
            "description": "Saw a fun GIF and wanted to re-create it.  First version went pretty quick until I realized there was a slight overlap on wave crests.  Love any feedback, improvements, and optimizations.  Thanks!",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl33RN",
            "likes": 14,
            "name": "Striped 2D Waves",
            "published": 3,
            "tags": [
                "2d",
                "wave",
                "overlap",
                "stripe",
                "offset"
            ],
            "usePreview": 0,
            "username": "Codax",
            "viewed": 667
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Miguel \"Codax\" Nieves\n// Twitter: @GameDevMig\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define PI 3.14159265359\n\n//Inigo Quilez's Palette Function\n//https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //How many stripes to show (even works best)\n    float stripes = 16.0;\n    //Wave Scroll Speed\n    float speed = 0.35;\n    \n    //Animated height of each wave from -1 to 1\n    float amplitude = sin(iTime * 2.0);\n    //float amplitude = (2.0 * abs( (2.0 * fract(iTime * 0.5))-1.0 ) - 1.0); //Triangle Wave\n    amplitude *= 0.68;//0.78;\n    \n    uv.y = uv.y * stripes;\n    uv.x = uv.x * 4.0;\n    \n    float waveID = round(uv.y);\n    \n    //Current Wave but cap the parts would overlap\n    vec2 waveUV = uv;\n    waveUV.x += iTime  * speed * (2.0 * step(1.0,mod(waveID,2.0)) - 1.);\n    waveUV.y += max(-0.5, min(0.5, sin(waveUV.x * PI * 2.0) * amplitude));\n\n\t//Use next line only if amplitude is between -0.5 and 0.5\n    //waveUV.y += sin(waveUV.x * PI * 2.0) * amplitude; \n    \n    //Hold on to the current Stripe value\n    float midWave = waveUV.y;\n    \n    //Calculate the Value from the Stripe Above\n    float upperWave = uv.x + ( iTime * speed * (2.0 * step(1.0,mod(waveID + 1.0,2.0)) - 1.));\n    upperWave = sin(upperWave * PI * 2.0) * amplitude;\n    \n    upperWave *= 1.0- step(0.5, fract(uv.y));\n    /*if (fract(uv.y) >= 0.5) //Optimized Out\n    {\n        upperWave = 0.0;\n    }*/\n                      \n\tupperWave += fract(uv.y);\n    upperWave = step(1.0, upperWave);\n    \n    //Calculate the Value from the Strip Below\n    float lowerWave = uv.x + ( iTime * speed * (2.0 * step(1.0,mod(waveID - 1.0,2.0)) - 1.));\n    lowerWave = sin(lowerWave * PI * 2.0) * amplitude;\n    \n    lowerWave *= step(0.5, fract(uv.y));\n    /*if (fract(uv.y) < 0.5) //Optimized Out\n    {\n        lowerWave = 0.0;\n    }\n\t*/\n    lowerWave += fract(uv.y);\n    lowerWave = step(0.00, lowerWave);\n\n\n    //Mix and Overlap\n\tmidWave *= upperWave;\t//Use the Upperwave to first mask the mid wave\n    upperWave *= step(0.000,midWave - waveID); //Then overlap the upperwave by the midwave\n    \n    waveUV.y *= (1.0 - upperWave); //Mask out the upper Wave\n    waveUV.y += upperWave * (uv.y + 1.0); //Add in the upper \n    \n\twaveUV.y *= lowerWave;  //Mask out the lower wave from the \n    waveUV.y += (1.0 - lowerWave) * (uv.y - 1.0); //Put in the overlap from the lower wave\n\n   \n    //Create a color ID from 0.0 - 1.0\n    float colorID = floor( waveUV.y ) / stripes;\n    \n    float ct = iTime * 0.1;\n    //vec3 col = pal( colorID, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,1.0),vec3(0.4 * sin(ct*1.23),0.40 * cos(ct*2.14),0.80 * sin(-ct)) );\n    vec3 col = pal( colorID, vec3(0.5,0.5,1.0),vec3(0.5,0.5,1.0),vec3(2.0, 1.0, 0.0),vec3(0.2+sin(ct*1.23), 0.2+cos(ct*2.14), 0.1 + sin(-ct)));\n    \n    //Darken the bottom few waves\n    col *= smoothstep(1.0, 0.6, 1.0 - colorID);\n\n    // Wave Debug\n    //col = vec3(colorID);// * fract(uv.y));\n\n    // Output to screen \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}