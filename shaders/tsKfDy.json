{
    "Shader": {
        "info": {
            "date": "1607910689",
            "description": "paisaje- n2-2d\nwell the original sound is from https://www.shadertoy.com/view/XdlyDM ",
            "flags": 8,
            "hasliked": 0,
            "id": "tsKfDy",
            "likes": 5,
            "name": "paisaje- n2-2d",
            "published": 3,
            "tags": [
                "paisajen22d"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "//por jorge flores ---jorge2017a1\n//recursos\n//https://iquilezles.org/articles/distfunctions2d\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{\n    //return  min(d1.x,d2.x); \n    if (d1.x<d2.x)\n       return d1; \t\n    else\n       return d2;\n}\n\nvec2 opS2( vec2 d1, vec2 d2 )\n{\n    //return max(-d1.x,d2.x); \n    if  (-d1.x<d2.x)\n        return d1;\n    else\n        return d2;\n}\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{\n    //return max(d1,d2);\n    if (d1.x>d2.x)\n       \treturn d1;\n    else\n        return d2;\n}\n\nvec2 opS(vec2 d1, vec2 d2) {\n\treturn vec2(max(-d2.x, d1.x), 2.0);\n}\n\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{\n    vec2 q = mod(p+0.5*c,c)-0.5*c;\n    return  q;\n}\n\n\n\nfloat sdCirc(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\n    \nfloat MarOnda(vec2 uv,float  t)\n{\n    uv.y += sin(uv.x*5.+t)*0.1;\n    return uv.y;\n}\n\n\nvec2 Bloque(vec2 p)\n{\n    \n    \n    vec2 resp=vec2(9999.0,-1.0);\n    vec2 p1= rotate2d( p, radians(180.0));\n    vec2 p2= rotate2d( p, radians(90.0));\n    vec2 p3= rotate2d( p, radians(270.0));\n    \n    float dtArriba= sdTriangleIsosceles(p-vec2(0.0,0.01), vec2(0.05,0.04) );\n    float dtAbajo= sdTriangleIsosceles(p1-vec2(0.0,0.01), vec2(0.05,0.04) );\n    float dtDer= sdTriangleIsosceles(p2-vec2(-0.001,0.01), vec2(0.05,0.04) );\n    float dtIzq= sdTriangleIsosceles(p3-vec2(0.001,0.01), vec2(0.05,0.04) );\n    \n    resp= opU2( vec2(dtArriba,32.0 ), resp);\n    resp= opU2( vec2(dtAbajo,34.0 ), resp);\n    resp= opU2( vec2(dtDer,33.0 ), resp);\n    resp= opU2( vec2(dtIzq,33.0 ), resp);\n    \n    return resp;\n}\n\n\nfloat Bloquesv2(vec2 p)\n{\n    vec2 pp=p;\n    \n   \n    float suma=1000.0;\n    \n    for (float i=0.0; i<16.0;i++)\n \t{       \n    \tfloat b1a=sdBox(pp-vec2(-1.8+0.235*float(i),-1.4), vec2(0.11,0.05 ) );\n    \tsuma=opU(suma, b1a);\n        \n\t}   \n    \n    float resp=suma;\n    \n    return resp;\n}\n\nvec2 BloqueTriangulo(vec2 p)\n{   \n    vec2 resp=vec2(9999.0,-1.0);\n    \n    float st1= TriangulosPoly(p, 1);\n    float st2= TriangulosPoly(p, 2);\n    float st3= TriangulosPoly(p, 3);\n    float st4= TriangulosPoly(p, 4);\n    \n    resp= opU2( vec2(st1,36.0), resp); //sup\n    resp= opU2( vec2(st2,37.0), resp); //der\n    resp= opU2( vec2(st3,35.0), resp); //inf\n    resp= opU2( vec2(st4,38.0), resp); //izq\n    \n    \n    return resp;\n}   \n\nvec2 BloqueTrianguloGris(vec2 p)\n{   \n    vec2 resp=vec2(9999.0,-1.0);\n    \n    float st1= TriangulosPoly(p, 1);\n    float st2= TriangulosPoly(p, 2);\n    float st3= TriangulosPoly(p, 3);\n    float st4= TriangulosPoly(p, 4);\n    \n    resp= opU2( vec2(st1,31.0), resp);\n    resp= opU2( vec2(st2,32.0), resp);\n    resp= opU2( vec2(st3,33.0), resp);\n    resp= opU2( vec2(st4,32.0), resp);\n    \n    \n    return resp;\n}   \n\n\nvec2 EsferaRebota(vec2 pp)\n{   \n    \n    vec2 p= vec2(pp.x,pp.y+ abs(0.5*sin(iTime+cos(iTime*0.5)))+0.15);\n    vec2 resp=vec2(9999.0,-1.0);\n    float sc1=  sdCirc( p, 0.06);\n    float sc2=  sdCirc( p, 0.05);\n    sc1=opS(sc2,sc1);\n    resp= opU2( vec2(sc1,1.0), resp);\n    resp= opU2( vec2(sc2,2.0), resp);\n    \n    \n    return resp;\n}   \n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n     vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n     vec2 pbola=p;\n     //p*=0.125;\n\t vec3 col = vec3(0.6);\n    \n    \n    //sugerencia por FabriceNeyret2, \n     //p.x = mod( p.x+iTime, iResolution.x/iResolution.y);\n     p.x = mod(1.5+ p.x+iTime*0.75, iResolution.x/iResolution.y);\n     \n    vec2 c=vec2(.114,0.1);\n    vec2 pRep=opRep2D( p, c );\n    \n    \n    float b1 = Bloquesv2(p-vec2(0.1,0.61));\n    float b2 = Bloquesv2(p-vec2(0.0,0.5));\n    vec2 st1= BloqueTriangulo(p-vec2(0.0,0.0));\n    vec2 st2= BloqueTriangulo(p-vec2(0.53,0.0));\n    \n    vec2 es1= EsferaRebota(pbola);\n    \n    \n    vec3 colgris=vec3(0.5);\n    \n    \n    vec2 sb1= Bloque(pRep);\n    vec3 colb1=getColorf(sb1.y);\n    vec3 colt1=getColorf(st1.y);\n    vec3 colt2=getColorf(st2.y);\n  \n    \n    vec3 colt4=getColorf(es1.y);\n    \n    \n    \n    col= DibujoSinBorde(p, sb1.x,colb1,  col);\n    \n    col= DibujoConBorde(p, b1, colgris,  col);\n    col= DibujoConBorde(p, b2, colgris,  col);\n    \n    col= DibujoSinBorde(p, st1.x,colt1, col);\n    col= DibujoSinBorde(p, st2.x,colt2, col);\n    \n    col= DibujoSinBorde(p, es1.x,colt4, col);\n    \n   \n    fragColor = vec4(col,1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    vec3 color;\n   \n};\n\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.9),  //31\nvec3(0.8),  //32\nvec3(0.7),  //33\nvec3(0.6),  //34\n\nvec3(150.,75.,0.0)/255.,  //35  //marron o cafe\nvec3(204.,119.,34.0)/255.,  //36 //marron o cafe\nvec3(184.,115.,51.0)/255.  //37 //marron o cafe\n\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\n\n\nvec3 getColorf(float ii)\n{    \n\n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\n///--------------------------------------------\n\n\n\n// MASKS\nfloat fillMask(float distanceChange, float dist) \n{\n    return smoothstep(distanceChange, -distanceChange, dist);\n}\n\nfloat blurMask(float distanceChange, float dist, float blurAmount) {\n    float blurTotal = blurAmount*.01;\n    return smoothstep(blurTotal+distanceChange, -distanceChange, dist);\n}\n\nfloat innerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist+width);\n}\n\nfloat outerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist-width);\n}\n\n\nvec3 DibujoConBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    \n    float uWotM8 = 0.009;\n    \n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    \n    return mix(colOut,colIn, flm );\n}\n\n\nvec3 DibujoSinBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    \n    float uWotM8 = 0.009;\n    \n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    \n    return mix(colOut,colIn, flm );\n}\n\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n\n\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n///-------------------------------\n\n\nvec2 rotate2d(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);\n    float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\n//================================================\n//https://www.shadertoy.com/view/wdBXRW   referencia IQ\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2d( in vec2 v0, in vec2 v1) { return v0.x*v1.y - v0.y*v1.x; }\n\nconst int N = 3;\n\n//https://www.shadertoy.com/view/wdBXRW   referencia IQ\nfloat sdPolygon( in vec2 p, in vec2[N] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\n\n\nfloat TriangulosPoly(vec2 p, int opc)\n{\n        \n    vec2 p0,p1, p2;\n    \n    if (opc==1)\n        {\n             p0 = vec2(0.25,0.75);\n             p1 = vec2(0.75,0.75);\n             p2 = vec2(0.5,0.5);\n            \n        }\n        \n     if (opc==2)\n        {\n             p0 = vec2(0.75,0.75);\n             p1 = vec2(0.75,0.25);\n             p2 = vec2(0.5,0.5);   \n        }\n        \n        \n        if (opc==3)\n        {\n             p0 = vec2(0.25,0.25);\n             p1 = vec2(0.75,0.25);\n             p2 = vec2(0.5,0.5);   \n        }\n        \n        \n        if (opc==4)\n        {\n             p0 = vec2(0.25,0.25);\n             p1 = vec2(0.5,0.5);\n             p2 = vec2(0.25,0.75);   \n        }\n      \n    \n    // add more points\n    vec2[] polygon = vec2[](p0, p1,p2);\n    \n\tfloat d = sdPolygon(p, polygon);\n    \n    return d;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//sonido modificado por jorge flores ---jorge2017a1\n//https://www.shadertoy.com/view/XdlyDM\n\nvec2 mainSound( in int samp, float i )\n{ float t=fract(i/52.)*52.;\n    float b=fract(t/4.)<5./6.?180.*acos(-1.):108.*acos(-1.);\n \n \n \tvec2 c1=vec2( sin(b*t)*exp(-3.0*fract(t/2.)),sin(b*t)*exp(-5.0*fract(--t/2.)) );\n \tvec2 c2=vec2( sin(b*floor(t/8.)*(t))*exp(-2.0*fract(t*3.+.5)));\n    vec2 c3=clamp( vec2( sin(b*floor((t+1.8)/8.)*(t))*exp(-3.0*fract(t*1.5+.5))),.2,.8);\n \tvec2 c4=vec2( sin(b*floor(t/4.)*(t)+2.0*sin(b*t*0.5))*exp(-2.0*fract(t*3.+.5)));\n    vec2 sum=c1+c2+c3+ c4;\n        \n    return sum;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}