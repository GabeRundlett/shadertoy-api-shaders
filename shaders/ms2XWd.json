{
    "Shader": {
        "info": {
            "date": "1671123058",
            "description": "A simple flat shaded Batman I made based on Z0rg's work.",
            "flags": 0,
            "hasliked": 0,
            "id": "ms2XWd",
            "likes": 16,
            "name": "Lonely Batman",
            "published": 3,
            "tags": [
                "2d",
                "batman",
                "creativecommons"
            ],
            "usePreview": 0,
            "username": "StanleySweet",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "// SPDX-License-Identifier: CC-BY-NC-SA-4.0\n// SPDX-FileCopyrightText: © 2022 Sébastien Maire\n// SPDX-FileCopyrightText: © 2022 Stanislas Daniel Claude Dolcini\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.141592653\n\nmat2 r2d(float a) { float c= cos(a), s = sin(a); return mat2(c,-s,s,c);}\nfloat lenny(vec2 v) { return abs(v.x)+abs(v.y); }\n\nfloat _cir(vec2 uv, float r)\n{\n    return length(uv)-r;\n}\n\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\n\nfloat _nimal(vec2 uv)\n{\n    float timeOffset = 0.0075*sin(uv.y*30.-iTime* 0.5);\n    uv.x+=sin(uv.y*25.+iTime*2.)*0.01*sat(uv.y*5.);\n    vec2 tuv = (uv-vec2(0.14+timeOffset,-.015))*  r2d(3.3*PI);\n    tuv.x = abs(tuv.x);\n    tuv = (tuv-vec2(-.07,0.));\n    vec2 tuv2 = -((uv+vec2(0.04+timeOffset,0.015)) * r2d(1.7*PI));\n    tuv2.x = abs(tuv2.x);\n    tuv2 = (tuv2-vec2(-.07,0.));\n\n\n    uv -= vec2(0.05,-.04);\n    float body = 10.;\n    float anhears = 0.1;\n    vec2 offhears = vec2(0.01,0.);\n    body = min(body, _sqr(((uv+offhears)*r2d(anhears)), vec2(.025,.07)));\n    body = min(body, _sqr(((uv-offhears)*r2d(-anhears)), vec2(.025,.07)));\n    body = max(body, -_sqr(((uv-vec2(0.,.08))*r2d(PI/4.)), vec2(.03, .03)));\n    uv.x = abs(uv.x);\n    float tail = _cir(tuv, .11);\n    body = min(body, tail);\n    float tail2 = _cir(tuv2, .11);\n    body = min(body, tail2);\n\n\n    float carveCircle = _cir(uv - vec2(0.17,0.01), 0.065);\n    body = max(body, -carveCircle);\n    carveCircle = _cir(uv - vec2(0.09,-0.07), 0.066 );\n    body = max(body, -carveCircle);\n\n    return body;\n}\n\nfloat _eyes(vec2 uv)\n{\n    uv.x+=sin(uv.y*25.+iTime*2.)*0.01*sat(uv.y*5.);\n    uv -= vec2(0.05,-.012);\n    float body = 1.;\n    float square_width = 0.014;\n    float square_height = 0.007;\n    body = min(body, _sqr(((uv-vec2(0.0, 0.01))* r2d(0.0)), vec2(square_width, square_height)));\n    body = max(body, -_sqr(((uv-vec2(0.0, 0.02))*r2d(0.0)), vec2(square_width * 6.0,  0.019 )));\n    body = max(body, -_sqr(((uv-vec2(0.0, 0.02))*r2d(PI)), vec2(square_width * 0.9,  0.018 * 2.0)));\n    float square_width_01 = 0.045;\n    body = max(body, -_sqr(((uv-vec2(0.0, 0.05))*r2d(PI/4.)), vec2(square_width_01, square_width_01)));\n\n    return body;\n}\n\n\nfloat _star(vec2 p, vec2 s)\n{\n    float a = _sqr(p, s.xy);\n    float b = _sqr(p, s.yx);\n    return min(a, b);\n}\n\nfloat _stars(vec2 uv, vec2 szu)\n{\n    uv = r2d(PI/4.) * uv;\n    uv += vec2(0.5,0.5);\n    vec2 ouv = uv;\n    float th = 0.002;\n    vec2 rep = vec2(0.1,0.1);\n\n    vec2 idx = floor((uv+rep*.5)/rep);\n\n    uv = mod(uv+rep*.5, rep)-rep*.5;\n    float sz = sat(sin(idx.x*5.+idx.y+iTime))*sat(length(ouv*2.)-.5);\n    return _star(uv, vec2(20.*th, th)*.15*sz*szu);\n}\n\n\n\nvec3 rdr(vec2 uv)\n{\n    float shp = 400.;\n    vec3 background = vec3(0.431,0.114,0.647)*.2;\n\n    background = mix(background, vec3(1.000,0.761,0.239), 1.-sat(_stars(uv, vec2(1.,1.0))*shp));\n\n    vec3 sunCol = vec3(0.239,0.761,1.000);\n    vec3 foregroundBack = vec3(0.345,0.125,0.494);\n\n    vec3 foreground;\n\n    float sun = _cir(uv, .02);\n    float sstp = 0.05;\n    sun = floor(sun/sstp)*sstp;\n    foreground = mix(foregroundBack, sunCol, 1.-sat(sun*4.));\n\n    float mount = uv.y-asin(sin(uv.x*25.))*.01+.1;\n    foreground = mix(foreground, foreground*.3, 1.-sat(mount*shp*.5));\n\n    float mount2 = uv.y-(sin(uv.x*25.+2.))*.05+.1;\n    foreground = mix(foreground, foreground*.5, 1.-sat(mount2*shp*.1));\n\n\n    float hill = _cir(uv-vec2(0.,-.9), .8);\n    foreground = mix(foreground, vec3(0.,0.,0.), 1.-sat(hill*shp));\n\n    float nanimal = _nimal(uv);\n    foreground = mix(foreground, vec3(0.,0.,0.), 1.-sat(nanimal*shp));\n\n    float eyes = _eyes(uv);\n    vec3 eyecolor = vec3( 0., 0.6, 0.);\n    foreground = mix(foreground, eyecolor * 1.2, 0.35 -clamp( sat(eyes * shp * 0.15), 0.0, 0.35));\n    foreground = mix(foreground, eyecolor, 1.0 - max(sat(eyes * shp * 0.6), 0.6));\n    foreground = mix(foreground, eyecolor, 1.0 - max(sat(eyes * shp * 0.6), 0.6));\n    foreground = mix(foreground, eyecolor, 1.0 - max(sat(eyes * shp * 0.6), 0.6));\n\n    float mask = _cir(uv, .25);\n\n    vec3 col = mix(background, foreground, 1.-sat(mask*shp));\n    col += (1.-sat(length(uv*3.)))*sunCol*.7;\n    float flicker = .1;\n    col += pow(1.-sat(lenny(uv*vec2(1.,2.))),5.)*sunCol*.7\n        *mix(.95,1., sat(sin(iTime*25.)*2.+sin(iTime*40.)));\n    \n    col = mix(col, vec3(1.000,0.761,0.239), sat(length(uv)-.1)*(1.-sat(_stars(uv*.8, vec2(5.))*shp*.3))*.7);\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    \n    col *= mix(-1.,1.,1.-sat(lenny(uv*2.)-.5));\n    col = sat(col);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}