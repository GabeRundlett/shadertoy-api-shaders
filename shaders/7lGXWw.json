{
    "Shader": {
        "info": {
            "date": "1640781183",
            "description": "My 39.2C be like:",
            "flags": 32,
            "hasliked": 0,
            "id": "7lGXWw",
            "likes": 8,
            "name": "Dudeverse 21",
            "published": 3,
            "tags": [
                "bitmap",
                "acid",
                "universe",
                "is",
                "my",
                "it",
                "2021",
                "wednesday",
                "dudes"
            ],
            "usePreview": 0,
            "username": "levonchic",
            "viewed": 375
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// MIT License (c) bitrate16\n#define WIDTH 40\n#define HEIGHT 32\n#define FWIDTH 40.\n#define FHEIGHT 32.\n#define COLORS 16\n#define COLORBITS 4\n#define COLORMASK 15\n#define POINTS4INT 8\n#define INTPERFRAME 160\n#define FRAMES 1\n\nvec4[16] palette = vec4[16] (\n\tvec4(0.6901960784313725, 0.5843137254901961, 0.3764705882352941, 1.0),\n\tvec4(0.8627450980392157, 0.8117647058823529, 0.6627450980392157, 1.0),\n\tvec4(0.788235294117647, 0.6705882352941176, 0.4392156862745098, 1.0),\n\tvec4(0.7294117647058823, 0.6705882352941176, 0.5215686274509804, 1.0),\n\tvec4(0.7725490196078432, 0.6745098039215687, 0.5176470588235295, 1.0),\n\tvec4(0.5882352941176471, 0.43529411764705883, 0.17647058823529413, 1.0),\n\tvec4(0.6274509803921569, 0.4745098039215686, 0.2823529411764706, 1.0),\n\tvec4(0.9019607843137255, 0.8784313725490196, 0.7647058823529411, 1.0),\n\tvec4(0.6196078431372549, 0.5372549019607843, 0.24313725490196078, 1.0),\n\tvec4(0.8196078431372549, 0.7529411764705882, 0.49019607843137253, 1.0),\n\tvec4(0.7372549019607844, 0.7647058823529411, 0.5725490196078431, 1.0),\n\tvec4(0.4196078431372549, 0.41568627450980394, 0.2823529411764706, 1.0),\n\tvec4(0.403921568627451, 0.396078431372549, 0.24313725490196078, 1.0),\n\tvec4(0.0, 0.0, 0.0, 0.0),\n\tvec4(0.8470588235294118, 0.792156862745098, 0.6588235294117647, 1.0),\n\tvec4(0.796078431372549, 0.7176470588235294, 0.5529411764705883, 1.0)\n);\n\nint[160] matrix = int[160] (\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xddddd1dd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xfddddddd,\n\t0xddddd1dd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddd2204,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdd00000d,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xfdddddd,\n\t0xdd060020,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xd06000dd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0x5008dd,\n\t0xdddddddd,\n\t0xddd1dddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0x6600ddd,\n\t0xdddddddd,\n\t0xddd1dddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xddd,\n\t0xdddddddd,\n\t0xddd1dddd,\n\t0x11dddddd,\n\t0x3333ff,\n\t0x5550,\n\t0xddddddd3,\n\t0xdd21d11,\n\t0x111edddd,\n\t0x33f111,\n\t0x4055500,\n\t0xdddddddf,\n\t0x506201dd,\n\t0x222221dd,\n\t0x22222222,\n\t0x2f050000,\n\t0xddddddf2,\n\t0x50222ddd,\n\t0x292,\n\t0x22222000,\n\t0x22000022,\n\t0xddddf1f0,\n\t0x20221ddd,\n\t0x2f,\n\t0x22200000,\n\t0x22,\n\t0xddd1f120,\n\t0xf002dddd,\n\t0x0,\n\t0x20020000,\n\t0x22ff,\n\t0xdd1fff20,\n\t0xf100dddd,\n\t0x2,\n\t0x0,\n\t0x2000,\n\t0xd11f2220,\n\t0xf12ddddd,\n\t0x3,\n\t0x320000,\n\t0x60000000,\n\t0xd1f22000,\n\t0xf1eddddd,\n\t0xf00f3,\n\t0x43000,\n\t0x60030000,\n\t0xd1ff0000,\n\t0x11dddddd,\n\t0x101ee00f,\n\t0x1fff3f01,\n\t0xfffe1e,\n\t0x11f20000,\n\t0xe1dddddd,\n\t0xee050f,\n\t0x111eee0b,\n\t0xf11f4e,\n\t0x1ff22000,\n\t0xe7dddddd,\n\t0x11ee0891,\n\t0xe1eee111,\n\t0xfee11,\n\t0x11402000,\n\t0x1ddddddd,\n\t0xeee1a1ce,\n\t0xeee1e11e,\n\t0x4f1e,\n\t0x7f224200,\n\t0xdddddddd,\n\t0x1eeeeeee,\n\t0xeeee11ee,\n\t0xfff03fff,\n\t0xdf222234,\n\t0xdddddddd,\n\t0x1eeeee17,\n\t0x1ee11111,\n\t0xffff1fee,\n\t0xdf4424f1,\n\t0xdddddddd,\n\t0x11ee111d,\n\t0xeee11111,\n\t0xe1111e11,\n\t0xde4422fe,\n\t0xdddddddd,\n\t0x1eeee1dd,\n\t0x11111111,\n\t0xe1711e11,\n\t0xd7f4fff1,\n\t0xdddddddd,\n\t0xeeef1ddd,\n\t0xe111eee1,\n\t0x1111ee11,\n\t0xdd1fff11,\n\t0xdddddddd,\n\t0xeeff1ddd,\n\t0x111eeeee,\n\t0x111eee1e,\n\t0xddde111e,\n\t0xdddddddd,\n\t0xe1eddddd,\n\t0x11eeeeee,\n\t0x11ee1e11,\n\t0xddddd111,\n\t0xdddddddd,\n\t0xe1dddddd,\n\t0x1eeeeeee,\n\t0x1111e111,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xeeeeeeee,\n\t0xddd11111,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0x11111ddd,\n\t0xddddddd1,\n\t0xdddddddd\n);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// MIT License (c) bitrate16\n// Animated texture, no buffering\n\n// ! - Prevent compile entire shader and freeze\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 frag = ivec2(fragCoord);\n    \n    if (iFrame != 0) { \n        // Use buffered texture where branch prediction is disabled\n        // Hello from Radeon HD 6670\n        fragColor = texelFetch(iChannel0, frag, 0);\n\t} else {\n        frag /= int(min(iResolution.x, iResolution.y) * 0.03);\n\t\tfragColor = vec4(0.0);\n\t\tif (frag.x >= WIDTH || frag.x <= 0 || frag.y >= HEIGHT || frag.y <= 0)\n\t\t\treturn;\n\t\telse {\n\t\t\tint px = frag.y * WIDTH + frag.x;\n\t\t\tint pind = px / POINTS4INT;\n\t\t\tint bind = px % POINTS4INT;\n\t\t\t\n\t\t\tint colind = (matrix[pind] >> (bind * COLORBITS)) & COLORMASK;\n\t\t\t\n\t\t\tfragColor = palette[colind];\n\t\t}\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// MIT License (c) bitrate16\n#define SCALE 0.2\n#define ROT_SCALEX 0.2\n#define ROT_SCALEY 0.1\n\n// Source: https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfloat c = cos(iTime * ROT_SCALEX);\n\tfloat s = sin(iTime * ROT_SCALEY);\n\tmat2 rot = mat2(c, -s, s, c);\n\t\n\tvec2 frag = iResolution.xy * 0.5 + (fragCoord.xy - iResolution.xy * 0.5) * rot * 2.;\n\tvec2 uv = frag / iResolution.xy;\n\t\n\tvec4 a = texture(iChannel0, fract(sign(mod(uv * 1.1, 2.) - 1.) * uv * 1.1)) * .99;\n\t\n    float an = float(iFrame % 50) * 3.14 * 0.02;\n    an = sin(an) * cos(an) * 0.1;\n    float sm = sin(an);\n\tfloat cm = cos(an);\n\tmat2 m = mat2(cm, -sm, sm, cm);\n    \n    vec4 b = texture(iChannel1, clamp(m * uv * (1.0 + 0.25 * sin(iTime * 0.1)), 0.0, 1.0));\n\t\n\tfragColor = b.a * b + (1. - b.a) * a;\n    fragColor.rgb *= hsv2rgb(vec3(iTime, 0.5 + 0.5 * sin(iTime), 1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}