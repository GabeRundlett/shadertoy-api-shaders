{
    "Shader": {
        "info": {
            "date": "1716188086",
            "description": "Find methods to change frequencies with no phase discontinuities.\nThis experiment alternates between first controlling the phase for 16 seconds and then not controling it.\nFixed the ramp !",
            "flags": 8,
            "hasliked": 0,
            "id": "lX33zN",
            "likes": 5,
            "name": "Continuous phase audio",
            "published": 3,
            "tags": [
                "sound"
            ],
            "usePreview": 0,
            "username": "dray",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float cc = 0.;\n    int xx = int(mod((fragCoord.x+iTime*30.)/3.,40.));\n    int yy = int(mod((fragCoord.y+iTime*30.)/3.,15.));\n    int xi = 0;\n    #define _ 0\n    #define COL(a,b,c,d,e,f,g) if ( xx == xi++ && (((a+b*2+c*4+d*8+e*16+f*32+g*64) & (1 << yy)) != 0) ) cc = 1.;\n    COL(1,_,_,_,1,1,_)\n    COL(1,_,_,1,_,_,1)\n    COL(1,_,_,1,_,_,1)\n    COL(_,1,1,_,_,_,1)\n    COL(_,_,_,_,_,_,_)\n    COL(_,1,1,1,1,1,_)\n    COL(1,_,_,_,_,_,1)\n    COL(1,_,_,_,_,_,1)\n    COL(_,1,1,1,1,1,_)\n    COL(_,_,_,_,_,_,_)\n    COL(_,1,1,1,1,1,1)\n    COL(1,_,_,_,_,_,_)\n    COL(1,_,_,_,_,_,_)\n    COL(_,1,1,1,1,1,1)\n    COL(_,_,_,_,_,_,_)\n    COL(1,1,1,1,1,1,1)\n    COL(_,_,_,_,1,1,_)\n    COL(_,_,1,1,_,_,_)\n    COL(1,1,1,1,1,1,1)\n    COL(_,_,_,_,_,_,_)\n    COL(1,1,1,1,1,1,1)\n    COL(1,_,_,_,_,_,1)\n    COL(1,_,_,_,_,_,1)\n    COL(_,1,1,1,1,1,_)\n    COL(_,_,_,_,_,_,_)\n    COL(_,1,_,_,_,_,_)\n    COL(1,1,1,_,_,_,_)\n    COL(1,1,1,_,_,_,_)\n    COL(_,1,1,1,1,1,1)\n    COL(_,_,_,_,1,1,_)\n    COL(_,_,_,1,1,_,_)\n    COL(_,_,_,_,_,_,_)\n    // Output to screen\n    fragColor = vec4(vec3(cc),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// David Rayna 5/2024\n// Improvement on Box-O-Balls audio\n// The combination of defines and constant folding goes a long way\n\n// Notes are started and stopped at zero phase.\n// Zero-crossing control is like a method I implemented in hardware in a digital synth in the 70s-80s.\n\n#define PI (3.1415926535)\n#define TAU (2.*PI)\n\n// This works for vibrato and more\n#define SINC(X) (sin(X)/(X))\n\n// 12-tone notes\n#define C D f f\n#define D E f f\n#define E F f\n#define F G f f\n#define G A f f\n#define A 440.\n#define B A s s\n\n// accidentals\n#define s * 1.05946\n#define f * 0.9438\n\n// octaves\n#define L * .5\n#define H * 2.\n\n// durations\n#define e + .125\n#define t + .16666666666666\n#define q + .25\n#define h + .5\n#define w + 1.\n\n// Inline repeats\n#define DO1(X) X\n#define DO2(X) X X\n#define DO3(X) X X X\n#define DO4(X) X X X X\n#define DO8(X) DO4(X) DO4(X)\n\nbool fix;\n\n#define ROUNDTO(X,Y) (fix ? (round((X)/(Y))*(Y)) : (X) )\n//#define ROUNDTO(X,Y) (round((X)/(Y))*(Y))\n\n// Start playing at 0 phase and play until a 0 phase in the waveform (within 1/2 cycle of desired duration)\n#define PHS0(TIM,FC) ROUNDTO(TIM,1./(FC)) \n#define P(FC,DUR,EXTRA) if ( tempo < PHS0(DUR,FC) ) { fc = FC; note = tempo; tempo += 10000.; EXTRA; } else { tempo -= PHS0(DUR,FC); }\n\n// Linear ramp starts at 0 phase and ends at 0 phase\n#define PHS0r(TIM,F1,F2) ROUNDTO(TIM,2./((F2)+(F1)))\n#define RAMP(F1,F2,DUR,EXTRA) if ( tempo < PHS0r(DUR,F1,F2) ) { note = tempo; fc = (F1) + ((F2)-(F1)) * note / PHS0r(DUR,F1,F2) / 2.; tempo += 10000.; EXTRA; } else { tempo -= PHS0r(DUR,F1,F2); }\n\n////////////// Here we go /////////////////////////////////////\n\nvec2 mainSound( int samp, float time )\n{\n    fix = mod( time, DO4(+8.) ) < DO4(+4.); // alternate fixed and non-fixed phase for demo\n        \n    float left = 0., right = 0.;\n    \n    float tempo; // working var represents tempo time (& pitch)\n    float fc; // frequency to play\n    float note; // tempo time within note\n\n////// LEFT /////////////////////////////////////////////////\n\n// define 2 ramp pitches\n#define NT C\n#define NT2 E H\n\n    tempo = float(samp%(16*int(iSampleRate)))/float(iSampleRate); // try to preserve accuracy until ShaderToy limit\n    if ( ! fix )\n        tempo = mod( time, DO4(+4.) );  // keep looping - this does not know about phase 0\n    fc = 0.;\n\n// This works because sin at note start is 0 which leaves phase at 0\n// At end of note, modulation is diminished which allows ending phase to be near 0\n#define DING fc *= ( 1. + SINC(note * TAU * 8.) * exp(-note/e) * .5 );    \n\n    DO2(\n    P(C,q,) P(D,q,) P(E,q,) P(F,q,)\n    P(G,q,) P(A,q,) P(B,q,) P(C H,q,)\n    P(C,h,DING) P(D,h,DING) P(E,h,DING) P(F,h,DING)\n    )\n    DO2(\n    P(NT,h,)\n    RAMP(NT,NT2,h,)\n    P(NT2,h,)\n    RAMP(NT2,NT,h,)\n    P(NT,h,)\n    RAMP(NT,G L,h,)\n    P(G L,h,)\n    RAMP(G L,C,h,)\n    )\n    P(C,h,) // extra in case tempo mod loop does not align perfectly\n\n    left += sin( note * TAU * fc ) * .1 ; // * exp(-note/e);\n\n/////// RIGHT //////////////////////////////////////////////\n\n// redefine the 2 ramp pitches\n#undef NT\n#undef NT2\n#define NT E\n#define NT2 G H s\n\n    tempo = mod( time, DO4(+4.) );  // keep looping - this does not know about phase 0\n    \n    DO2(\n    P(E,q,) P(F,q,) P(G,q,) P(A,q,)\n    P(B,q,) P(C H,q,) P(D H ,q,) P(E H,q,)\n    P(E,h,DING) P(F,h,DING) P(G,h,DING) P(A,h,DING)\n    )\n    DO2(\n    P(NT,h,)\n    RAMP(NT,NT2,w,)\n    P(NT2,w,)\n    RAMP(NT2,NT,w,)\n    P(NT,h,)\n    )\n    P(NT,h,) // extra in case tempo mod loop does not align perfectly\n\n    right += sin( note * TAU * fc ) * .1 ; // * exp(-note/e);\n\n////// output results //////////////////\n\n    return vec2( left, right );\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}