{
    "Shader": {
        "info": {
            "date": "1693966914",
            "description": "Representing a shape as closely as possible with the fewest rectangular sections. (they have to be rectangular because that's integrable)",
            "flags": 0,
            "hasliked": 0,
            "id": "ctSBWh",
            "likes": 23,
            "name": "Rectangular Representation",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 238
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\nfloat roundBox ( vec2 p, vec2 b, float r) \n\t\t{\n\t\t    vec2 h = 0.5*vec2(b.x,b.y);\n\t\t    vec2 q = p-clamp(p,-h+r,h-r);\n\t\t    if (length(q)>0.) return length(q) - r ;\n            else return max(abs(p.x)-h.x,abs(p.y)-h.y);\n\t\t}\nfloat map (vec2 p ) {\n     p -= .5*R;\n     p.xy *= mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n     return max(roundBox(p,(.4+.1*sin(iTime))*R,(.05+.05*sin(.333*iTime))*R.x),-length(p)+(.03*sin(1.2*iTime)+.07)*R.x);\n}\nvoid mainImage( out vec4 Q, in vec2 U)\n{\n    \n    \n    {\n        float d = map(U);\n        Q = (1.-.25*exp(-3.*abs(sin(d/3.))))*max(vec4(-sign(d),.5,sign(d),1),0.);\n    }\n    \n    vec2 s = vec2(40);\n    vec2 l = floor(U/s+iTime)*s-iTime*s;\n    vec2 h = ceil (U/s+iTime)*s-iTime*s;\n    vec4 q = vec4(l,h);\n    \n    float a = map(q.xy);\n    float b = map(q.xw);\n    float c = map(q.zy);\n    float d = map(q.zw);\n    \n    if (a>0.&&b>0.&&c>0.&&d>0.) return; \n    else if (a>0.&&b>0.&&c>0.) {\n        q.xy = q.xy+max(a*sqrt(.5),max(b,c));\n    } else if (a>0.&&b>0.&&d>0.) {\n        q.xw = q.xw-vec2(-1,1)*max(b*sqrt(.5),max(a,d));\n    } else if (a>0.&&c>0.&&d>0.) {\n        q.zy = q.zy+vec2(-1,1)*max(c*sqrt(.5),max(a,d));\n    } else if (b>0.&&c>0.&&d>0.) {\n        q.zw = q.zw-max(d*sqrt(.5),max(b,c));\n    } else if (a>0.&&b>0.) {\n        q.x = q.x + max(a,b);\n    } else if (c>0.&&d>0.) {\n        q.z = q.z - max(c,d);\n    } else if (a>0.&&c>0.) {\n        q.y = q.y + max(a,c);\n    } else if (b>0.&&d>0.) {\n        q.w = q.w - max(b,d);\n    } \n    {\n        float d = roundBox(U-.5*(q.xy+q.zw),q.zw-q.xy,0.);\n        Q *= smoothstep(0.,1.,abs(d))-.2*smoothstep(1.,0.,d);\n    }\n      \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}