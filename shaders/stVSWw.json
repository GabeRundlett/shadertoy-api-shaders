{
    "Shader": {
        "info": {
            "date": "1640829674",
            "description": "The Universe Within - Live Coding follow along thingy (with GPVM).\n\nNo audio thingy though.",
            "flags": 0,
            "hasliked": 0,
            "id": "stVSWw",
            "likes": 5,
            "name": "code123456789",
            "published": 3,
            "tags": [
                "universe"
            ],
            "usePreview": 0,
            "username": "JuanDeager",
            "viewed": 419
        },
        "renderpass": [
            {
                "code": "#define S(a, b, t) smoothstep(a, b, t)\n\n// distance to a line segment, by projecting your point onto the line\nfloat DistLine(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    \n    return length(pa - ba * t);\n}\n\n// 2-to-1 hash\nfloat N21(vec2 p)\n{\n    p = fract(p * vec2( 233.34, 851.73));\n    p += dot(p, p + 23.45);\n    return fract(p.x * p.y);\n}\n\n// 2-to-2 hash\nvec2 N22(vec2 p)\n{\n    float n = N21(p);\n    return vec2(n, N21(p + n));\n}\n\n// get the position for a given grid id, and offset for the neighbor cells\nvec2 GetPos(vec2 id, vec2 offset)\n{\n    vec2 n = N22(id + offset) * iTime;\n    return offset + vec2(sin(n.x), cos(n.y)) * 0.4; \n}\n\n// distance to a line, but with the mapping applied\nfloat Line(vec2 p, vec2 a, vec2 b)\n{\n    float d = DistLine(p, a, b);\n    float m = S(0.03, 0.01, d);\n    float d2 = distance(a, b);\n    m *= S(1.2, .8, d2) * 0.5 + S(0.05, 0.03, abs(d2 - 0.75));\n    return m;\n}\n\nfloat Layer(vec2 uv)\n{\n    float m = 0.0; // initial value of mapped distance\n    \n    // creating grid cells across the screen\n    vec2 gv = fract(uv) - 0.5; // position within the grid cell\n    vec2 id = floor(uv);      // the id of the grid cell\n    \n    vec2 p[9]; // randomly moving points, for the neighboring cells\n    \n    int i = 0; // loop across these neighbors\n    for(float y = -1.0; y <= 1.0; y++)\n    {\n        for(float x = -1.0; x <= 1.0; x++)\n        {\n            p[i++] = GetPos(id, vec2(x, y)); // get the random position for all neigbhors\n        }\n    }\n\n    // create lines between neighboring cells\n    float t = iTime * 10.0;\n    for(int i = 0; i < 9; i++)\n    {\n        m += Line(gv, p[4], p[i]);\n        vec2 j = (p[i] - gv) * 10.0;\n        float sparkle = 1.0 / dot(j, j);\n        m += sparkle * (sin(t + fract(p[i].x) * 10.0) * .5 + .5);\n    }\n    \n    m += Line(gv, p[1], p[3]);\n    m += Line(gv, p[1], p[5]);\n    m += Line(gv, p[5], p[7]);\n    m += Line(gv, p[7], p[3]);\n    \n    return m;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 mouse = (iMouse.xy / iResolution.xy) - 0.5;\n    \n    float gradient = uv.y;\n    float m = 0.0;\n    float t = iTime * 0.1;\n    \n    float s = sin(t);\n    float c = cos(t);\n    mat2 rot = mat2(c, -s, s, c);\n    \n    uv *= rot;\n    mouse *= rot;\n    \n    for (float i = 0.0; i < 1.0; i += 1.0 / 4.0)\n    {\n        float z = fract(i + t);\n        float size = mix(10.0, 0.5, z);\n        float fade = S(0.0, 0.5, z) * S(1.0, 0.8, z);\n        m += Layer(uv * size + i * 20.0 - mouse) * fade;\n    }\n    \n    vec3 base = sin(t * 5.0 * vec3(.345, .456, .657)) * .4 + .6;\n    vec3 col = base * m;\n    col -= gradient * base;\n\n    // red line between grid cells\n    //if(gv.x > 0.48 || gv.y > 0.48)\n    {\n        //col = vec3( 1.0, 0.0, 0.0 ); // color red on the boundary\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}