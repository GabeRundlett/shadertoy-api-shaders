{
    "Shader": {
        "info": {
            "date": "1593543353",
            "description": "Derp",
            "flags": 0,
            "hasliked": 0,
            "id": "wlSyRR",
            "likes": 22,
            "name": "Double Triangle tiling [Day 193]",
            "published": 3,
            "tags": [
                "triangle",
                "tiling",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "\n// Mathematically correct with no number-crunching! \n// https://tilings.math.uni-bielefeld.de/substitution/double-triangle/\n\n#define rot(j) mat2(cos(j),-sin(j),sin(j),cos(j))\n#define pi acos(-1.)\n#define tau (2.*pi)\n\n\nfloat sdEquilateralTriangle(  vec2 p, float r ){   \n    r = r*1./3.;\n\tp.y -= r;\n    p.y += r*1.5;\n    float d = dot(vec2(abs(p.x),p.y) - -normalize(vec2(0.,1)*rot(tau/3.))*(r), -normalize(vec2(0.,1)*rot(tau/3.)));\n    d = max(d,p.y - r*2.);\n    d = max(d,-p.y - r);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\t\n    \n    vec3 col = vec3(0);\n    \n    float iters = 6.;\n    \n    float d = 10e5;\n    \n    // mafs\n    float s = 1.;\n\n    \n    \n\n    \n    uv += vec2(sin(iTime/2.6),cos(iTime/2.))*0.4;    \n    uv *= .03;\n    uv.y -= 0.1;\n    uv.x -= 0.2;\n\n    \n    float id = 0.;\n    vec2 p = uv;\n    float sc = 1.;\n    \n    float palvar = 1.;\n    \n    for(float i = 0.; i < iters; i++){\n        \n        \n        float median = s;\n        float outer = median*2./sqrt(3.);\n\n        vec2 pbtrans = - vec2(0.,sc*median/4.);\n        vec2 pctrans = + vec2(0.,sc*median/4.);\n        vec2 pdtrans = + vec2(0. - sc*outer*.125,sc*median/8.);\n        vec2 petrans = + vec2(0. - sc*outer*.25 , sc*median/(2.+2./3.));\n        vec2 pftrans = + vec2(0. - sc*outer*.25, sc*median/(8.));\n        vec2 pgtrans = + vec2(0. - sc*outer*0.375, sc*median/(2.+2./3.));\n\n\n        float tria = sdEquilateralTriangle( p, s*sc*1.);\n        float trib = sdEquilateralTriangle( p + pbtrans, s*sc/2.);\n        float tric = sdEquilateralTriangle( p + pctrans, s*sc/2.);\n\n        p.x = abs(p.x);\n\n        float trid = sdEquilateralTriangle((p + pdtrans )* rot(1.*pi) , s*sc/4.);\n        float trie = sdEquilateralTriangle((p + petrans )* rot(1.*pi) , s*sc/4.);\n\n        float trif = sdEquilateralTriangle((p + pftrans ), s*sc/4.);\n        float trig = sdEquilateralTriangle((p + pgtrans ) , s*sc/4.);\n\n\n        d = min(d,abs(tria));\n\n        d = min(d,abs(trib));\n        d = min(d,abs(tric));\n        d = min(d,abs(trid));\n        d = min(d,abs(trie));\n        d = min(d,abs(trif));\n        d = min(d,abs(trig));\n\n        if(tria < 0.){\n            if( trib < 0.){\n                p += pbtrans;\n                palvar += 0.4;\n            } else if(tric < 0.){\n                p += pctrans;\n                palvar += 1.4;\n            } else if(trid < 0.){\n                p += pdtrans;\n                palvar += .4;\n            } else if(trie < 0.){\n                p += petrans;\n                palvar += 1.4;\n            } else if(trif < 0.){\n                p += pftrans;\n                palvar += .4;\n            } else if(trig < 0.){\n                p += pgtrans;\n                palvar += 2.4;\n            }\n            if(trid < 0. || trie < 0.){\n                p *= rot(pi);\n            }\n            if(trib < 0. || tric < 0. ){\n                sc *= 0.5;\n            } else {\n                sc *= 0.25;\n            }\n\n        } else {\n        \tbreak;\n        }\n            \n            \n        \n    }\n    \n    \n    #define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n    \n    col = mix(col,pal(0.5,0.56,vec3(3.,0.7,0.2),3.4, palvar + iTime + uv.x*2. + uv.y*2.)/1.,smoothstep(dFdx(uv.x),0.,-d));\n    \n    //col = mix(col,pal(0.5,0.56,vec3(2.,0.7,0.2),1., palvar + iTime + uv.x*2. + uv.y*2.)/1.,smoothstep(dFdx(uv.x),0.,-d));\n    \n    \n    d = abs(d);\n    \n    float w = 1.1;\n    col = mix(col,vec3(0.01),smoothstep(dFdx(uv.x)*w,dFdx(uv.x)*(w-1.)*1.,d));\n    \n    \n    col = pow(col,vec3(0.454545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}