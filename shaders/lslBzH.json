{
    "Shader": {
        "info": {
            "date": "1494924128",
            "description": "Rainy could ",
            "flags": 64,
            "hasliked": 0,
            "id": "lslBzH",
            "likes": 2,
            "name": "Audioreactive Rainy Cloud",
            "published": 3,
            "tags": [
                "cloud",
                "audioreactive"
            ],
            "usePreview": 0,
            "username": "apazat",
            "viewed": 705
        },
        "renderpass": [
            {
                "code": "#define PI 3.14\n\nfloat circle(vec2 uv, vec2 pos, float radius){\n    return smoothstep(0.0,0.006,radius-length(uv + pos));\n}\n\nfloat freqs[9];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1. + 2.*fragCoord.xy / iResolution.xy;// Remap the space to [-1;1]\n    uv.y *= iResolution.y/iResolution.x;// Aspect ratio correction (y*y square)\n    vec3 color = vec3(0.);// Default background color to black\n    \n    vec3 b = vec3(.2,.8,1.);\n    \n    uv*=1.8;\n    \n    // float f = .5*abs(sin(iTime));\n    float f = .2;\n    float r = .2;\n    float s = .01;\n    \n    freqs[0] = texture( iChannel0, vec2( f-4.*s, 0.25 ) ).x;\n    freqs[1] = texture( iChannel0, vec2( f-3.*s, 0.25 ) ).x;\n    freqs[2] = texture( iChannel0, vec2( f-2.*s, 0.25 ) ).x;\n    freqs[3] = texture( iChannel0, vec2( f-s, 0.25 ) ).x;\n    freqs[4] = texture( iChannel0, vec2( f, 0.25 ) ).x;\n    \n    freqs[5] = texture( iChannel0, vec2( f+s, 0.25 ) ).x;\n    freqs[6] = texture( iChannel0, vec2( f+2.*s, 0.25 ) ).x;\n    freqs[7] = texture( iChannel0, vec2( f+3.*s, 0.25 ) ).x;\n    freqs[8] = texture( iChannel0, vec2( f+4.*s, 0.25 ) ).x;\n    \n    color += circle(uv, vec2(.2*sin(2.*PI*freqs[0]),.2*cos(freqs[0])), freqs[0]*r-.05)*b;\n    color += circle(uv, vec2(.4*sin(2.*PI*freqs[1]),.4*cos(freqs[1])), freqs[1]*r)*b;\n    color += circle(uv, vec2(.6*sin(2.*PI*freqs[2]),.6*cos(freqs[2])), freqs[2]*r-.05)*b;\n    color += circle(uv, vec2(.8*sin(2.*PI*freqs[3]),.8*cos(freqs[3])), freqs[3]*r)*b;\n    \n    color += circle(uv, vec2(0.,-.23), freqs[4]*r+.25);\n    color += circle(uv, vec2(.42,-.17), freqs[4]*r+.13);\n    color += circle(uv, vec2(-0.23,-.15), freqs[4]*r+.17);\n    color += circle(uv, vec2(-0.43,-.12), freqs[4]*r+.12);\n    color += circle(uv, vec2(0.26,-.19), freqs[4]*r+.18);\n    \n    \n    \n    \n    color += circle(uv, vec2(-.2*sin(2.*PI*freqs[4]),.2*cos(freqs[4])), freqs[5]*r-.05)*b;\n    color += circle(uv, vec2(-.4*sin(2.*PI*freqs[5]),.4*cos(freqs[5])), freqs[6]*r)*b;\n    color += circle(uv, vec2(-.6*sin(2.*PI*freqs[6]),.6*cos(freqs[6])), freqs[7]*r-.05)*b;\n    color += circle(uv, vec2(-.8*sin(2.*PI*freqs[7]),.8*cos(freqs[7])), freqs[8]*r)*b;\n    \n    \n    \n    //   color += vec3(1./distance(uv, pos)*.08);// Compute the inverse of the distance (white if near the position, black if far)\n    //\tcolor = smoothstep(.98, 1., color)*A1;// Threshold to have clean balls\n    \n    fragColor = vec4(color,1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 8670,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/polo-pan/nana"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}