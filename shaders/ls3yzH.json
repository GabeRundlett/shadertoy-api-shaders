{
    "Shader": {
        "info": {
            "date": "1517926972",
            "description": "https://en.wikipedia.org/wiki/Problem_of_Apollonius\nhttps://upload.wikimedia.org/wikipedia/commons/8/8c/Apollonius8ColorMultiplyV2.svg",
            "flags": 0,
            "hasliked": 0,
            "id": "ls3yzH",
            "likes": 6,
            "name": "Problem of Apollonius, all",
            "published": 3,
            "tags": [
                "circles",
                "apollonius"
            ],
            "usePreview": 0,
            "username": "mv",
            "viewed": 476
        },
        "renderpass": [
            {
                "code": "#define USE_MOUSE\n\nfloat dCircle(vec2 p, vec2 c, float r) {\n    return length(p - c) - r;   \n}\n\nfloat cross2(vec2 u, vec2 v) {\n \treturn u.x*v.y - u.y*v.x;   \n}\n\nvec3 solveApollonius(vec2 P1, vec2 P2, vec2 P3, float s1, float s2, float s3, float r1, float r2, float r3) {\n    // see https://www.sharelatex.com/read/mxqspwvsbhny\n    float A1 = (dot(P1, P1) - r1*r1)/2.0 - (dot(P3, P3) - r3*r3)/2.0;\n    float A2 = (dot(P2, P2) - r2*r2)/2.0 - (dot(P3, P3) - r3*r3)/2.0;\n    \n    float B1 = (s1*r1 - s3*r3);\n    float B2 = (s2*r2 - s3*r3);\n    \n    float D = cross2(P1, P2) + cross2(P2, P3) + cross2(P3, P1);\n    \n    float M = (A1*(P2.y - P3.y) - A2*(P1.y - P3.y))/D;\n    float N = (B1*(P2.y - P3.y) - B2*(P1.y - P3.y))/D;\n    float P = (-A1*(P2.x - P3.x) + A2*(P1.x - P3.x))/D;\n    float Q = (-B1*(P2.x - P3.x) + B2*(P1.x - P3.x))/D;\n    \n    float a = N*N + Q*Q - 1.0;\n    float b = 2.0*(M*N + P*Q - N*P3.x - Q*P3.y + s3*r3);\n    float c = M*M + P*P - 2.0*M*P3.x - 2.0*P*P3.y + dot(P3, P3) - r3*r3;\n    \n    float rs1 = (-b - sqrt(b*b - 4.0*a*c))/(2.0*a);\n    float rs2 = (-b + sqrt(b*b - 4.0*a*c))/(2.0*a);\n    float rs = rs1;\n    \n    float xs = M + N*rs;\n    float ys = P + Q*rs;\n    \n    return vec3(xs, ys, rs);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = vec2(2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n    \n    float zoom = 7.0;\n    vec2 center = vec2(2.0, 3.5);\n    \n    p *= zoom;\n    p += center;\n\n    \n    // Reproducing https://upload.wikimedia.org/wikipedia/commons/8/8c/Apollonius8ColorMultiplyV2.svg\n    float r1 = 1.0;\n    float r2 = 2.0;\n    float r3 = 3.0;\n    \n    vec2 P1 = vec2(0.0, 0.0);\n#ifdef USE_MOUSE\n    vec2 P2 = vec2(2.0*iMouse.xy - iResolution.xy)/iResolution.y * zoom + center;\n#else\n    vec2 P2 = vec2(6.0, 1.0);\n#endif\n    \n    vec2 P3 = vec2(1.0, 5.0);\n    \n    // set bgColor based on difference in contact angles\n    vec3 bgColor = vec3(1.0, 1.0, 1.0);\n\n    vec3 res1 = solveApollonius(P1, P2, P3, +1.0, +1.0, +1.0, r1, r2, r3);\n    vec3 res2 = solveApollonius(P1, P2, P3, -1.0, -1.0, -1.0, r1, r2, r3);\n    vec3 res3 = solveApollonius(P1, P2, P3, -1.0, +1.0, +1.0, r1, r2, r3);\n    vec3 res4 = solveApollonius(P1, P2, P3, +1.0, -1.0, -1.0, r1, r2, r3);\n    vec3 res5 = solveApollonius(P1, P2, P3, +1.0, -1.0, +1.0, r1, r2, r3);\n    vec3 res6 = solveApollonius(P1, P2, P3, -1.0, +1.0, -1.0, r1, r2, r3);\n    vec3 res7 = solveApollonius(P1, P2, P3, +1.0, +1.0, -1.0, r1, r2, r3);\n    vec3 res8 = solveApollonius(P1, P2, P3, -1.0, -1.0, +1.0, r1, r2, r3);\n    \n    float b = 0.05;\n    \n    float w = 1.5*2.0*zoom/iResolution.y;\n    \n    // first circle\n    float s1 = smoothstep(-w/2.0, w/2.0, abs(dCircle(p, P1, r1)) - b);\n    float s2 = smoothstep(-w/2.0, w/2.0, dCircle(p, P1, 2.0*b));\n    \n    // second circle\n    float s3 = smoothstep(-w/2.0, w/2.0, abs(dCircle(p, P2, r2)) - b);\n    float s4 = smoothstep(-w/2.0, w/2.0, dCircle(p, P2, 2.0*b));\n    \n    // third circle\n    float s5 = smoothstep(-w/2.0, w/2.0, abs(dCircle(p, P3, r3)) - b);\n    float s6 = smoothstep(-w/2.0, w/2.0, dCircle(p, P3, 2.0*b));\n        \n    \n    \n    // sol\n    float s7  = isnan(res1.z) ? 1.0 : smoothstep(-w/2.0, w/2.0, abs(dCircle(p, res1.xy, res1.z)) - b);\n    float s8  = isnan(res2.z) ? 1.0 : smoothstep(-w/2.0, w/2.0, abs(dCircle(p, res2.xy, res2.z)) - b);\n    float s9  = isnan(res3.z) ? 1.0 : smoothstep(-w/2.0, w/2.0, abs(dCircle(p, res3.xy, res3.z)) - b);\n    float s10 = isnan(res4.z) ? 1.0 : smoothstep(-w/2.0, w/2.0, abs(dCircle(p, res4.xy, res4.z)) - b);\n    float s11 = isnan(res5.z) ? 1.0 : smoothstep(-w/2.0, w/2.0, abs(dCircle(p, res5.xy, res5.z)) - b);\n    float s12 = isnan(res6.z) ? 1.0 : smoothstep(-w/2.0, w/2.0, abs(dCircle(p, res6.xy, res6.z)) - b);\n    float s13 = isnan(res7.z) ? 1.0 : smoothstep(-w/2.0, w/2.0, abs(dCircle(p, res7.xy, res7.z)) - b);\n    float s14 = isnan(res8.z) ? 1.0 : smoothstep(-w/2.0, w/2.0, abs(dCircle(p, res8.xy, res8.z)) - b);\n    \n\n    vec3 white = vec3(1.0);\n    vec3 black = vec3(0.0);\n    vec3 gray = vec3(0.6);\n    vec3 blue = vec3(0.3, 0.6, 1.0);\n    vec3 yellow = vec3(0.95, 0.95, 0.1);\n    vec3 pink = vec3(1.0, 0.3, 0.6);\n    \n    // background\n    vec3 color = white;\n    \n    // circles\n    color = black*(1.0 - s1) + color*s1;    // first circle ring\n    color = black*(1.0 - s2) + color*s2;    // first circle center\n    color = black*(1.0 - s3) + color*s3;    // second circle ring\n    color = black*(1.0 - s4) + color*s4;    // second circle center\n    color = black*(1.0 - s5) + color*s5;    // third circle ring\n    color = black*(1.0 - s6) + color*s6;    // third circle center\n    \n    color = gray*(1.0 - s7) + color*s7;     // all circles inside\n    color = gray*(1.0 - s8) + color*s8;     // all circles outside\n    color = blue*(1.0 - s9) + color*s9;     // first outside, second and third inside    \n    color = blue*(1.0 - s10) + color*s10;   // first inside, second and third outside\n    color = pink*(1.0 - s11) + color*s11;   // second outside, first and third inside    \n    color = pink*(1.0 - s12) + color*s12;   // second inside, first and third outside\n    color = yellow*(1.0 - s13) + color*s13; // third outside, first and second inside    \n    color = yellow*(1.0 - s14) + color*s14; // third inside, first and second outside\n\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}