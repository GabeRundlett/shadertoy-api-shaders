{
    "Shader": {
        "info": {
            "date": "1608204150",
            "description": "added primitive audio reactivity to one of Kali's shaders",
            "flags": 4,
            "hasliked": 0,
            "id": "4tBfD1",
            "likes": 5,
            "name": "Jelly-Something-Audio",
            "published": 3,
            "tags": [
                "audio",
                "blob",
                "kali"
            ],
            "usePreview": 0,
            "username": "jarkob",
            "viewed": 517
        },
        "renderpass": [
            {
                "code": "// \"Jelly-something\" by Kali\n// \n// slightly modified from https://www.shadertoy.com/view/MlXGzr\n// basically nothing changed, except some audio reactivity\n// need this code for party projections\n\nconst int Iterations=7;  \nconst float Wavelength=.5; \nconst float Scale=1.5; \nconst float Amplitude=.1; \nconst float Speed=.3; \n\nvec3 z;\nvec4 vv;\n\nconst vec3 fore=vec3(200.,20.,30.)/255.;\nconst vec3 back=vec3(45.,52.,55.)/255.;\nconst vec3 innards=vec3(250.,0.,0.)/255.;\nconst float detail=.04;\n\nconst vec3 lightdir=-vec3(-1.0,0.5,-0.5);\n\nmat2 rot2D(float angle)\n{\n\tfloat a=radians(angle) * vv.g;\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\n\n}\n\nvoid vvv() {\n    for( int i=0; i<4; i++ )\n\t{\n        vv[i] = texture(iChannel0, vec2(float(i)/6.0, .01)).r;\n\t}\n}\n\n\nfloat de (in vec3 p);\n\nvec3 normal(vec3 p) {\n\tvec3 e = vec3(0.0,detail,0.0);\n\t\n\treturn vv.r * normalize(vec3(\n\t\t\tde(p+e.yxx)-de(p-e.yxx),\n\t\t\tde(p+e.xyx)-de(p-e.xyx),\n\t\t\tde(p+e.xxy)-de(p-e.xxy)\n\t\t\t)\n\t\t);\t\n}\n\n\nvec3 light(in vec3 p, in vec3 dir) {\n\tvec3 ldir=normalize(lightdir);\n\tvec3 n=normal(p);\n\tfloat diff=max(0.,dot(ldir,-n));\n\tvec3 r = reflect(ldir,n);\n\tfloat spec=max(0.,dot(dir,-r));\n\treturn diff*fore+pow(spec,40.)*.4+fore*.2+back*.3;\t\n\t\t}\n\nfloat kaliset(vec3 p) {\n\tp.x+=.23;\n\tp.z+=.18;\n    p*=.5;\n    p.y+=iTime*1.5;\n    p.y=abs(2.-mod(p.y,4.));\n    for (int i=0;i<8;i++) p=abs(p)/dot(p,p)-.8;\n    return p.y;\n}\n\nfloat rnd(vec2 co){\n\treturn fract(sin(iTime*.1+dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvec3 raymarch(in vec3 from, in vec3 dir) \n{\n    vec3 odir=dir;\n    float totdist=0., v=0.;\n\tvec3 col=vec3(0.), p;\n\tfloat d=9999.;\n\tfor (int i=0; i<80; i++) {\n        if (d>detail && totdist<50.) {\n        \tp=from+totdist*dir;\n\t\t\td=de(p);\n\t\t\ttotdist+=d*.8; \n            v++;\n\t\t\tdir=normalize(odir+pow(max(0.,totdist*totdist-9.),2.)*.0000003*vec3(rnd(dir.xy*5.21358),rnd(dir.yz*3.12568),rnd(dir.zx*2.12358)));\n        }\n\t}\n\ttotdist=min(50.,totdist);\n\t\tdir=normalize(odir+.1*vec3(rnd(dir.xy*5.21358),rnd(dir.yz*3.12568),rnd(dir.zx*2.12358)));\n    vec3 backg=back*(1.+pow(1.-dot(normalize(90.*dir),normalize(lightdir)),2.5));\n    if (d<detail) {\n\t\tfloat k=kaliset(p);\n        col=light(p-detail*dir, dir)+k*.05*(innards+.3); \n    } else {\n        col=backg+v*.015*pow(1.-dot(normalize(90.*dir),normalize(lightdir)),2.5);\n    }\n\tcol = mix(col*1.2, backg, 1.0-exp(-.0045*totdist*totdist));\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vvv();\n\tvec2 mouse=iMouse.xy/iResolution.xy;\n\tfloat time=iTime*.5;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv=uv*2.-1.;\n\tuv.y*=iResolution.y/iResolution.x;\n\tuv=uv.yx;\n\tvec3 from=vec3(.5,0.,-18.+cos(time*.8)*4.5);\n\tvec3 dir=normalize(vec3(uv*.8,1.));\n\tmat2 camrot1=rot2D(50.);\n\tmat2 camrot2=rot2D(190.+sin(time*.5)*80.);\n\tmat2 camrot3=rot2D((sin(time))*10.);\n\tfrom.xz=from.xz*camrot1;\n\tdir.xz=dir.xz*camrot1;\n\tfrom.xy=from.xy*camrot2;\n\tdir.xy=dir.xy*camrot2;\n\tdir.yz=dir.yz*camrot3;\n\t\n\tvec3 col=raymarch(from,dir); \n\tcol=pow(col,vec3(1.3))*vec3(1.,1.2,1.2);\n\tvec4 fColor = vec4(col,1.0);// * smoothstep(0.0,0.6,vv);\n    fragColor = fColor;//.brga;\n}\n\n\nfloat de(vec3 pos)\n{\n\tfloat time=iTime;\n\tz=pos;\n\tfloat O=7.;\n\tfloat sc=1.;\n\tfloat tsc=pow(Scale,float(Iterations));\n\tfloat t=time*Speed*10./tsc+100.;\n\tfloat amp1=Amplitude;\n\tfloat amp2=amp1*1.1256;\n\tfloat amp3=amp1*1.0586;\n\tfloat amp4=amp1*0.9565;\n\tfloat l1=length(z.xy-vec2(O*1.1586,0));\n\tfloat l2=length(z.xy+vec2(O*.98586,0));\n\tfloat l3=length(z.xy+vec2(0,O*1.13685));\n\tfloat l4=length(z.xy-vec2(0,O));\n\tfor (int n=0; n<Iterations ; n++) {\n\t\tz+=sin(length(z.xy)*sc*Wavelength-t)*amp1/sc*2.;\n\t\tz+=sin(l1*sc*Wavelength-t)*amp1/sc;\n\t\tz+=sin(l2*sc*Wavelength-t)*amp2/sc;\n\t\tz+=sin(l3*sc*Wavelength-t)*amp3/sc;\n\t\tz+=sin(l4*sc*Wavelength-t)*amp4/sc;\n\t\tt=t*Scale*Scale;\n\t\tsc*=Scale;\n\t}\n\t//z.z*=3.;\n\tfloat wd=-z.z+2.;\n\treturn length(z)-6.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}