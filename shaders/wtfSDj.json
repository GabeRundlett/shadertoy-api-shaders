{
    "Shader": {
        "info": {
            "date": "1564301861",
            "description": "Based on Julio Le Parc's painting [url]https://www.artbasel.com/catalog/artwork/45703[/url]\n\nWatch in full screen. Take your time and enjoy.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtfSDj",
            "likes": 6,
            "name": "Hommage à Le Parc I",
            "published": 3,
            "tags": [
                "2d",
                "flow",
                "art",
                "opart",
                "cineticart"
            ],
            "usePreview": 0,
            "username": "sschmidtix",
            "viewed": 672
        },
        "renderpass": [
            {
                "code": "// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Copyright © 2019 Stefan Schmidt\n//\n// Hommage à Le Parc I\n// Based on Julio Le Parc's painting https://www.artbasel.com/catalog/artwork/45703\n//\n// Watch in full screen. Take your time and enjoy.\n//\n// Thanks to Fabrice Neyret for helping optimize the code.\n// ---------------------------------------------------------------------\n\n// Parameters\n#define GRID_DIV    13.\n#define ROT_PERIOD  45.\n#define RECT_SIZE   vec2(0.6, 0.06)\n\n// Constants\n#define GRID_DIVN1  (GRID_DIV - 1.)\n#define M_PI        3.1415926535\n#define R           iResolution\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat rect(vec2 p, vec2 c) {\n    vec2 d = abs(p) - c;\n    return smoothstep(1., -1., max(d.x, d.y) * R.y);\n}\n\n#define triWave(n) abs(mod(n + GRID_DIVN1, 2. * GRID_DIVN1) - GRID_DIVN1) / max(GRID_DIV - 1., 1.)\n\nfloat rects(vec2 p, float mode) {\n    p += mode / GRID_DIV / 4.;   \n    vec2 a = abs(p);\n    if (max(a.x, a.y) > .5)\n        return 0.;\n    \n    p *= GRID_DIV;   \n    vec2 pi = round(p + .5 * GRID_DIVN1);\n    \n    float n = mode < 0. ? pi.x + pi.y : pi.x - pi.y;\n    float angle = M_PI * (2. / ROT_PERIOD * iTime + triWave(n));\n    if (mode > 0.)\n        angle -= M_PI / 2.;\n    p = rot(angle) * (fract(p + .5 * mod(GRID_DIV, 2.)) - .5);\n    \n    return rect(p / GRID_DIV, .5 * RECT_SIZE / GRID_DIV);\n}\n\nvoid mainImage(out vec4 o, vec2 p)\n{\n    vec2 pp = 1.1 * vec2(-1., 1.) * (p - .5 * R.xy) / R.y;\n    \n    float val = .008 + rects(pp, 1.) + rects(pp, -1.);\n    \n    val = pow(val, 1. / 2.2);\n    \n    vec2 uv = p.xy / R.xy;\n    val *= 0.5 + 0.5 * pow(16.0 * uv.x * uv.y *\n                           (1.0 - uv.x) * (1.0 - uv.y), 0.2);\n    \n    o = vec4(val, val, val, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}