{
    "Shader": {
        "info": {
            "date": "1536684847",
            "description": "Inspired by Piet Hein and by the superellipse.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltVcDm",
            "likes": 7,
            "name": "rotating squircles",
            "published": 3,
            "tags": [
                "2d",
                "aa",
                "squircle"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 757
        },
        "renderpass": [
            {
                "code": "\n#define INSCRIBE 0 // set to 1 to prevent squircles from overlapping\n\nfloat squircle(in vec2 pos, in float rad4) {\n    vec2 tmp = pos * pos;\n    vec2 deriv = 4.0 * pos * tmp;\n    tmp = tmp * tmp;\n    float val4 = dot(vec2(1.0, 1.0), tmp);\n    float deriv_mag = length(deriv);\n    float sdf = (val4 - rad4) / deriv_mag;\n    return clamp(0.5 * sdf * iResolution.y, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n\tconst float pi = 3.141592654;\n    \n    float time = mod(iTime, 2.0 * pi);\n    time = (0.5 * pi) * smoothstep(0.25 * pi, 0.75 * pi, time) +\n        (0.5 * pi) * smoothstep(1.25 * pi, 1.75 * pi, time);\n    \n    float vel = 0.5;\n    float ct = cos(vel * time);\n    float st = sin(vel * time);\n    \n    mat2 rot = mat2(ct, st, -st, ct);\n    \n    float rad4 = max(iResolution.y, iResolution.x) / iResolution.y;\n    rad4 = rad4 * rad4 * rad4 * rad4 + 1.0;\n    vec3 col = vec3(1.0, 0.0, 1.0);\n    float sign_val = -1.0;\n    vec3 curr_col = vec3(1.0, 0.0, 0.0);\n    \n    for (int i = 0; i < 64; ++i) {\n        uv = rot * uv;\n        float s = 1.0 - squircle(uv, rad4);\n        col += sign_val * s * curr_col;\n        sign_val = sign_val * -1.0;\n        curr_col = curr_col.zxy;\n#if INSCRIBE\n        rad4 = rad4 * 0.5;\n#else        \n        rad4 = rad4 * 0.75;\n#endif        \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}