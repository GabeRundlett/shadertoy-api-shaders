{
    "Shader": {
        "info": {
            "date": "1524496489",
            "description": "Inspired by an attempt to understand what has been done here: https://twitter.com/klemen_lozar/status/987743611289681920",
            "flags": 0,
            "hasliked": 0,
            "id": "Md3Bz7",
            "likes": 6,
            "name": "torus normal uv distortion",
            "published": 3,
            "tags": [
                "torus",
                "distortion",
                "uv",
                "normal"
            ],
            "usePreview": 0,
            "username": "mv",
            "viewed": 727
        },
        "renderpass": [
            {
                "code": "vec2 split_uv(vec2 uv) {\n    return uv - vec2(0.5*sign(uv.x)*iResolution.x/iResolution.y, 0.0);\n}\n\nvec3 get_normal(vec2 uv) {\n    // http://web.cs.ucdavis.edu/~amenta/s12/findnorm.pdf\n \tuv = uv * (1.0 + 0.6*cos(iTime));\n    \n    float phi = 2.0*3.1416*uv.x;\n    float theta = 2.0*3.1416*uv.y;\n    \n    vec3 dphi = vec3(-sin(phi), cos(phi), 0.0);\n    vec3 dtheta = vec3(-sin(theta)*cos(phi), -sin(theta)*sin(phi), cos(theta));\n    \n    return normalize(cross(dphi, dtheta));  \n}\n\nfloat checkerboard(vec2 uv, float size) {\n    // https://www.shadertoy.com/view/lt2XWK\n\tvec2 p = floor(uv / size);\n    return mod(p.x + p.y, 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float cell_size = 0.125*iResolution.x/iResolution.y;\n    \n    // uv coordinates, corrected for aspect ratio\n    vec2 uv0 = (2.0*fragCoord.xy - iResolution.xy)/iResolution.yy;\n    \n    // uv coordinates split in half and duplicate left hand side\n    vec2 uv1 = split_uv(uv0);\n    \n    // grab the normals from the torus using these uv coordinates\n    vec3 n = get_normal(uv1.yx);\n    \n    // distort uv's based on normal\n    uv1 = uv1 + 0.1*cell_size*n.xy;\n    \n    // apply a scrolling motion upwards\n    uv1 = uv1 - vec2(0.0, 0.2*iTime);\n    \n    // create a checkerboard effect\n    float s = checkerboard(uv1, cell_size);\n    \n    // output\n    if (uv0.x > 0.0) {   \n        fragColor = vec4(s, s, s, 1.0);\n        //fragColor = texture(iChannel0, uv1/cell_size);\n    } else {\n    \tfragColor = vec4(0.5 + 0.5*n, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}