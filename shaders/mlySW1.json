{
    "Shader": {
        "info": {
            "date": "1686064801",
            "description": "This is my first shader! Please tell me if you have any suggestions to improve my code.",
            "flags": 0,
            "hasliked": 0,
            "id": "mlySW1",
            "likes": 9,
            "name": "Sci-fi Roadway",
            "published": 3,
            "tags": [
                "road",
                "fake3d",
                "track",
                "driving"
            ],
            "usePreview": 0,
            "username": "JoaquinFraud",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "#define FOV 3.\n#define CURVE_FRQ .03\n#define CURVE_AMT .07\n#define SPEED 20.\n#define LINES 4.\n#define TEXTURE_STENGTH .1\n#define DARKNESS 2.\n#define BUILDING_DIST 2.\n#define DTL_RANGE 2.\n#define DTL_CHANGE .5\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float speed = iTime * SPEED;\n    float shade;\n    // pixel pos between -1 and 1\n    vec2 pos = fragCoord / (iResolution.xy / 2.) - 1.;\n\n    // the offset of the road for each pixel\n    float curve = sin((FOV * CURVE_FRQ) / -abs(pos.y) - (speed * CURVE_FRQ)) / abs(pos.y) * CURVE_AMT;\n    float roadX = pos.x + curve;\n\n    // texture\n    shade = 1. - sin(FOV / pos.y - speed) * TEXTURE_STENGTH;\n\n    // sky\n    if (pos.y > 0.) shade = pos.y;\n    // road\n    else {\n        if (abs(roadX) < -pos.y / 3.) shade = 0.;\n        if (abs(roadX) < -pos.y / 30.) shade = sign(sin((FOV / pos.y - speed) * LINES));\n    }\n\n    // road border\n    if (abs(roadX) < -pos.y / 3. && abs(roadX) > -pos.y / 4.) shade = .3;\n\n    // bushes\n    float dist = DTL_RANGE + floor(sin((FOV * DTL_CHANGE) / pos.y - (speed * DTL_CHANGE)) * DTL_RANGE);\n    float size = 1. + sin(FOV / pos.y - speed) * .5;\n    if (abs(roadX) > -pos.y * dist && abs(roadX) < -pos.y * dist * size && pos.y < 0.) shade = 0.;\n\n    // gradient\n    if (pos.y < 0.) shade *= -pos.y * DARKNESS;\n\n    // vignette\n    shade *= cos(pos.y * 1.1) * cos(pos.x * 1.1);\n\n    fragColor = vec4(shade * (1. + cos(iTime / 3.) * .2), shade * (1. + sin(iTime / 2.) * .2), shade / .9, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}