{
    "Shader": {
        "info": {
            "date": "1635985932",
            "description": "was made for the ConcoursJFIG2021 but sadly only did the animation part, not the rendering.\nstill it work great.",
            "flags": 32,
            "hasliked": 0,
            "id": "NsyGWW",
            "likes": 5,
            "name": "Interactive Menu - JFIG 2021",
            "published": 3,
            "tags": [
                "mouse",
                "animation",
                "slider",
                "concoursjfig2021",
                "interactif"
            ],
            "usePreview": 0,
            "username": "Cewein",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "//////////////////\n//\n//    this is a proof of concept for a 3 color selector \n//    along with the proper transition to 3 different display\n//    and a yellow back button to go back to the color selector.\n//    \n//    Shader made by Cewein, 2021\n//    \n//    feel free to use this shader as long you reference this one\n//\n//////////////////\n\n#define ir iResolution\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    //this variable hold the whole animation state\n    //-1: three color display\n    // 0: 3 color to R\n    // 1: 3 color to G\n    // 2: 3 color to B\n    // 3: R to 3 color\n    // 4: G to 3 color\n    // 5: B to 3 color\n    // 6: full screen R\n    // 7: full screen G\n    // 8: full screen B\n    vec4 animState = texture(iChannel0, uv);\n    \n    if(animState.x < -0.5)\n    {\n        col = vec3(0.8,0.3,0.2);\n        col = mix(col,vec3(0.2,0.8,0.3),checkSide(fragCoord,vec2(ir.x/3.0,ir.y/2.0),10.0));\n        col = mix(col,vec3(0.3,0.2,0.8),checkSide(fragCoord,vec2(ir.x/3.0 * 2.0,ir.y/2.0),10.0));\n    }\n    else if(animState.x < 5.5)\n    {\n        float time = iTime - animState.y;\n        float transitionTime = 0.75;\n        \n        if(animState.x > 2.5 && animState.x < 5.5)\n        {\n            time = transitionTime - time;\n            animState.x = animState.x -3.0;\n        }\n        \n        float angle = mix(10.0,0.0,smoothstep(0.0,0.25,time));\n\n        float posL = ir.x/3.0;        \n        float posR = ir.x/3.0 * 2.0;\n\n        if(animState.x < 0.5)\n        {\n            posR = mix(posR, ir.x + 1.0,smoothstep(0.0,transitionTime, time));           \n            posL = mix(posL, ir.x + 1.0,smoothstep(0.0,transitionTime, time));\n        }\n        else if(animState.x < 1.5)\n        {\n            posR = mix(posR, ir.x + 1.0,smoothstep(0.0,transitionTime, time));            \n            posL = mix(posL, -1.0,smoothstep(0.0,transitionTime, time));\n        }\n        else if(animState.x < 2.5)\n        {\n            posR = mix(posR, -1.0,smoothstep(0.0,transitionTime, time));\n            posL = mix(posL, -1.0,smoothstep(0.0,transitionTime, time));          \n        }\n        \n        \n        col = vec3(0.8,0.3,0.2);\n        col = mix(col,vec3(0.2,0.8,0.3),checkSide(fragCoord,vec2(posL,ir.y/2.0),angle));\n        col = mix(col,vec3(0.3,0.2,0.8),checkSide(fragCoord,vec2(posR,ir.y/2.0),angle));\n        \n       \n    }\n    else\n    {\n        if(animState.x < 6.5)\n        {\n            col = vec3(0.8,0.3,0.2);\n        }\n        else if(animState.x < 7.5)\n        {\n            col = vec3(0.2,0.8,0.3);\n        }\n        else if(animState.x < 8.5)\n        {\n            col = vec3(0.3,0.2,0.8);       \n        }\n        \n        col = mix(col, vec3(0.9,0.9,0.2),step(sdBox(fragCoord-vec2(ir.x-120.0,45.0),vec2(100,25)),0.0));\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//this buffer is for all the animation\n//it record last time since mouse click or animation state switch\n//it record also the animation state we are in\n//////////////////////////////////////////////\n\n#define clickBack(m) step(sdBox(m.xy-vec2(iResolution.x-120.0,45.0),vec2(100,25)),0.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ir = iResolution.xy;\n\n    //init the global \n    if(iTime < 0.1)\n    {\n        fragColor = vec4(-1);\n        return;\n    }\n\n    fragColor = texture(iChannel0,fragCoord);\n    \n    //check if mouse is init\n    if(iMouse.x != 0.0 && iMouse.y != 0.0)\n    {\n        //check if mouse is clicked\n        if(iMouse.w > 0.0 || iMouse.z > 0.0)\n        {\n            //check with color as been clicked\n            if(fragColor.x < -0.5)\n            {\n                fragColor.x = checkSide(iMouse.xy,vec2(ir.x/3.0,ir.y/2.0),10.0) + checkSide(iMouse.xy,vec2(ir.x/3.0 * 2.0,ir.y/2.0),10.0);\n                fragColor.y = iTime;\n            }\n            //check if back yellow rectangle as been clicked\n            else if(clickBack(iMouse) > 0.5 && fragColor.x > 5.5)\n            {\n                fragColor.x = fragColor.x - 3.0;\n                fragColor.y = iTime;\n            }\n        }\n        //forced transition to a full color display\n        else if(fragColor.x < 2.5)\n        {\n            fragColor.x = mix(fragColor.x, fragColor.x + 6.0, step(0.75, iTime - fragColor.y)); \n        }\n        //forced transition to a 3 color display\n        else if(fragColor.x > 2.5 && fragColor.x < 5.5)\n        {\n            fragColor.x = mix(fragColor.x, -1.0, step(0.75, iTime - fragColor.y)); \n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nmat2 rot(float angle)\n{\n    angle *= 0.0174533;\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat checkSide(vec2 check, vec2 p, float angle)\n{\n    //rotating point\n    vec2 k = p + vec2(50.0,0.0);\n    \n    //rotate around the point\n    k = p + rot(angle)*(k-p);\n    \n    //Get the direction\n    vec2 dir = k-p;\n    vec2 checkPointDir = check - p;\n    \n    //perform dot product to know we side of the \"border\" we are\n    return step(0.0, dot(dir,checkPointDir));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}