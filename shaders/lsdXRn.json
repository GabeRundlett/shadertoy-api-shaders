{
    "Shader": {
        "info": {
            "date": "1457427498",
            "description": "My color grading code from my 64k intros.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsdXRn",
            "likes": 18,
            "name": "Color grading",
            "published": 3,
            "tags": [
                "colorgrading"
            ],
            "usePreview": 1,
            "username": "BeRo",
            "viewed": 1819
        },
        "renderpass": [
            {
                "code": "\n// http://creativecommons.org/publicdomain/zero/1.0/\n\nstruct ColorGradingPreset {\n  vec3 gain;\n  vec3 gamma;\n  vec3 lift;\n  vec3 presaturation;\n  vec3 colorTemperatureStrength;\n  float colorTemperature; // in K\n  float colorTemperatureBrightnessNormalization;  \n};\n\nvec3 colorTemperatureToRGB(const in float temperature){\n  mat3 m = (temperature <= 6500.0) ? mat3(vec3(0.0, -2902.1955373783176, -8257.7997278925690),\n                                          vec3(0.0, 1669.5803561666639, 2575.2827530017594),\n                                          vec3(1.0, 1.3302673723350029, 1.8993753891711275)) :\n                                     mat3(vec3(1745.0425298314172, 1216.6168361476490, -8257.7997278925690),\n                                          vec3(-2666.3474220535695, -2173.1012343082230, 2575.2827530017594),\n                                          vec3(0.55995389139931482, 0.70381203140554553, 1.8993753891711275));\n  return clamp(vec3(m[0] / (vec3(clamp(temperature, 1000.0, 40000.0)) + m[1]) + m[2]), vec3(0.0), vec3(1.0));\n}\n\nvec3 colorGradingProcess(const in ColorGradingPreset p, in vec3 c){\n  float originalBrightness = dot(c, vec3(0.2126, 0.7152, 0.0722));\n  c = mix(c, c * colorTemperatureToRGB(p.colorTemperature), p.colorTemperatureStrength);\n  float newBrightness = dot(c, vec3(0.2126, 0.7152, 0.0722));\n  c *= mix(1.0, (newBrightness > 1e-6) ? (originalBrightness / newBrightness) : 1.0, p.colorTemperatureBrightnessNormalization);\n  c = mix(vec3(dot(c, vec3(0.2126, 0.7152, 0.0722))), c, p.presaturation);\n  return pow((p.gain * 2.0) * (c + (((p.lift * 2.0) - vec3(1.0)) * (vec3(1.0) - c))), vec3(0.5) / p.gamma);\n}\n\nColorGradingPreset colorGradingPresetLerp(const in ColorGradingPreset a, const in ColorGradingPreset b, const in float t){\n  return ColorGradingPreset(mix(a.gain, b.gain, t),\n                            mix(a.gamma, b.gamma, t),\n                            mix(a.lift, b.lift, t),\n                            mix(a.presaturation, b.presaturation, t),\n                            mix(a.colorTemperatureStrength, b.colorTemperatureStrength, t),\n                            mix(a.colorTemperature, b.colorTemperature, t),\n                            mix(a.colorTemperatureBrightnessNormalization, b.colorTemperatureBrightnessNormalization, t));\n}\n\nColorGradingPreset ColorGradingPreset1 = ColorGradingPreset(\n  vec3(0.5),   // Gain\n  vec3(0.5),   // Gamma\n  vec3(0.5),   // Lift\n  vec3(1.0),   // Presaturation\n  vec3(0.0),   // Color temperature strength\n  6500.0,      // Color temperature (in K)\n  0.0          // Color temperature brightness normalization factor \n);\n\nColorGradingPreset ColorGradingPreset2 = ColorGradingPreset(\n  vec3(0.5),   // Gain\n  vec3(0.5),   // Gamma\n  vec3(0.5),   // Lift\n  vec3(1.0),   // Presaturation\n  vec3(1.0),   // Color temperature strength\n  3500.0,      // Color temperature (in K)\n  1.0          // Color temperature brightness normalization factor \n);\n\nColorGradingPreset ColorGradingPreset3 = ColorGradingPreset(\n  vec3(0.51, 0.55, 0.53), // Gain\n  vec3(0.45, 0.57, 0.55), // Gamma\n  vec3(0.5,  0.4,  0.6),  // Lift\n  vec3(1.0,  0.9,  0.8),  // Presaturation\n  vec3(1.0,  1.0,  1.0),  // Color temperature strength\n  6500.0,                 // Color temperature (in K)\n  0.0                     // Color temperature brightness normalization factor \n);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 c = texture(iChannel0, uv).xyz;\n    c = colorGradingProcess(colorGradingPresetLerp(ColorGradingPreset1, \n                                                   colorGradingPresetLerp(ColorGradingPreset2, \n                                                                          ColorGradingPreset3, \n                                                                          (sin(iTime * 6.28318 * 0.25) * 0.5) + 0.5), \n                                                   (sin(iTime * 6.28318) * 0.5) + 0.5), c);\n\tfragColor = vec4(c, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}