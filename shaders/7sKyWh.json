{
    "Shader": {
        "info": {
            "date": "1654792158",
            "description": "Random slabs (see source)",
            "flags": 0,
            "hasliked": 0,
            "id": "7sKyWh",
            "likes": 10,
            "name": "Random Slabs",
            "published": 3,
            "tags": [
                "lattice",
                "percolation",
                "slab"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "// \"Random Slabs\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Based on \"Lattice Percolation\", with the random bonds in a cubic lattice\n  replaced by thin perpendicular slabs, all bounded by a sphere; pattern\n  changes periodically.\n*/\n\n#if 1\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat Minv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv3 (vec3 p);\n\nvec3 ltDir[4], ltCol[4], cId;\nfloat tCur, dstFar, pVal, cMax, rSeed;\nbool cOcc, cOccN[6];\nconst float pi = 3.1415927;\n\nbool IsOcc (vec3 c)\n{\n  return (length (c + 0.5) < cMax && pVal + 0.5 * (Hashfv3 (c + rSeed + vec3 (0.21, 0.31, 0.41)) +\n     Hashfv3 (c.yzx + rSeed + vec3 (0.21, 0.31, 0.41))) > 1.);\n}\n\nvoid SetConf ()\n{\n  vec2 dc;\n  cOcc = IsOcc (cId);\n  dc = vec2 (1., 0.);\n  for (int k = 0; k < 2; k ++) {\n    dc.x = - dc.x;\n    cOccN[3 * k + 0] = IsOcc (cId + dc.xyy);\n    cOccN[3 * k + 1] = IsOcc (cId + dc.yxy);\n    cOccN[3 * k + 2] = IsOcc (cId + dc.yyx);\n  }\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec2 sz, dc;\n  float d, bl;\n  d = dstFar;\n  bl = 0.5;\n  sz = vec2 (0.05, 0.99) * bl;\n  if (cOcc) {\n    p -= cId + 0.5;\n    dc = vec2 (1., 0.);\n    for (int k = 0; k < 2; k ++) {\n      dc.x = - dc.x;\n      if (cOccN[3 * k + 0]) d = min (d, PrRoundBoxDf (p - dc.xyy * bl, sz.xyy, 0.01 * bl));\n      if (cOccN[3 * k + 1]) d = min (d, PrRoundBoxDf (p - dc.yxy * bl, sz.yxy, 0.01 * bl));\n      if (cOccN[3 * k + 2]) d = min (d, PrRoundBoxDf (p - dc.yyx * bl, sz.yyx, 0.01 * bl));\n    }\n  }\n  return d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cIdP, s, rdi;\n  float dHit, d, eps;\n  eps = 0.0005;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  rdi = 1. / rd;\n  cIdP = vec3 (-999.);\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p);\n    if (cId != cIdP) {\n      SetConf ();\n      cIdP = cId;\n    }\n    d = ObjDf (p);\n    s = (cId + step (0., rd) - p) * rdi;\n    d = min (d, abs (Minv3 (s)) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec4 ObjNfL (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  float s;\n  e = vec2 (0.005, -0.005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  s = dot (v, vec4 (1.));\n  return vec4 (normalize (2. * v.yzw - s), (s - 2. * v.x - 4. * ObjDf (p)) / (e.x * e.x));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, vn4;\n  vec3 col, vn, sumD, sumS;\n  float dstObj, nDotL, att;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn4 = ObjNfL (ro);\n    vn = vn4.xyz;\n    col4 = vec4 (1., 1., 1., 0.2) * (1. - 0.5 * smoothstep (4., 8., abs (vn4.w))) *\n       (0.1 + 0.9 * length (cId + 0.5) / cMax);\n    sumD = vec3 (0.);\n    sumS = vec3 (0.);\n    for (int k = VAR_ZERO; k < 4; k ++) {\n      nDotL = max (dot (vn, ltDir[k]), 0.);\n      att = smoothstep (0.85, 0.95, dot (normalize (50. * ltDir[k] - ro), ltDir[k]));\n      sumD += ltCol[k] * att * col4.rgb * nDotL * nDotL;\n      sumS += ltCol[k] * att * col4.a * pow (max (0., dot (ltDir[k], reflect (rd, vn))), 32.);\n    }\n    col = sumD + sumS;\n  } else col = vec3 (0.1);\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1\n  \nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, e;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  cMax = 16.;\n  pVal = 0.45;\n  rSeed = 11.111 * floor (tCur / 30.);\n  az = 0.15 * pi;\n  el = -0.2 * pi;\n  zmFac = 2.4;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n    zmFac += 2. * abs (az - 0.15 * pi) * smoothstep (0.2, 0.5, abs (az - 0.15 * pi));\n  } else {\n    az += 0.2 * pi * sin (0.01 * pi * tCur);\n    el += 0.1 * pi * sin (0.007 * pi * tCur);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -45.);\n  e = vec2 (1., -1.);\n  for (int k = VAR_ZERO; k < 4; k ++) {\n    ltDir[k] = normalize ((k < 2) ? ((k == 0) ? e.xxx : e.xyy) : ((k == 2) ? e.yxy : e.yyx));\n    ltDir[k].xy = Rot2D (ltDir[k].xy, 0.13 * pi * tCur);\n    ltDir[k].xz = Rot2D (ltDir[k].xz, 0.17 * pi * tCur);\n  }\n  ltCol[0] = vec3 (1., 0.1, 0.1);\n  ltCol[1] = ltCol[0].gbr;\n  ltCol[2] = ltCol[0].brg;\n  ltCol[3] = 0.8 * ltCol[0].rrg;\n  dstFar = 80.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}