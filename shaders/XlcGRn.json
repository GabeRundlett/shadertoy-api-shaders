{
    "Shader": {
        "info": {
            "date": "1467538966",
            "description": "An unlikely mode of transportation",
            "flags": 0,
            "hasliked": 0,
            "id": "XlcGRn",
            "likes": 8,
            "name": "Space Elevator",
            "published": 3,
            "tags": [
                "raymarch",
                "space"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 710
        },
        "renderpass": [
            {
                "code": "// \"Space Elevator\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Noisefv3 (vec3 p);\nfloat Fbm3 (vec3 p);vec3 VaryNf (vec3 p, vec3 n, float f);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 SSBump (float w, float s, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrRCylDf (vec3 p, float r, float rt, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat PrHexp2Df (vec2 p, float r);\n\nint idObj;\nvec3 qHit, sunDir, wPos, cgPos;\nfloat dstFar, tCur, cbLen, cbRad, cgRad, cgLen, wRad, wGap, wtRad, wcRad;\nbool showElev;\nconst int idHub = 1, idSph = 2, idTor = 3, idCbl = 4, idCage = 5;\nconst float pi = 3.14159;\nconst float sqrt3 = 1.73205;\n\nfloat CageDf (vec3 p, float pAng, float dMin)\n{\n  vec3 q;\n  vec2 qs;\n  float d;\n  q = p;\n  qs = vec2 (mod (vec2 (16. * pAng, 0.25 * q.z) + 0.5, 1.) - 0.5);\n  d = max (PrCylAnDf (p, cgRad, 0.1, cgLen), - PrBox2Df (qs, vec2 (0.45)));\n  if (d < dMin) { dMin = d;  idObj = idCage;  qHit = q; }\n  q.z = abs (q.z) - cgLen;\n  d = max (max (PrSphDf (q, cgRad + 0.1), cbRad + 0.1 - length (q.xy)), - q.z);\n  if (d < dMin) { dMin = d;  idObj = idCage;  qHit = q; }\n  return dMin;\n}\n\nfloat CablDf (vec3 p, float pAng, float dMin)\n{\n  vec3 q;\n  vec2 vg, qs;\n  float d, wd;\n  q = p;\n  wd = 1./3.;\n  vg = 1.15 * wd * vec2 (sqrt3, 1.);\n  q.z += mod (0.8 * tCur, 4.);\n  qs = vec2 ((32. / 3.) * pAng, sqrt3 * q.z);\n  d = min (PrHexp2Df (mod (qs + vg, 2. * vg) - vg, wd),\n           PrHexp2Df (mod (qs, 2. * vg) - vg, wd));\n  d = 0.7 * max (PrCylAnDf (q, cbRad, 0.02 * cbRad, cbLen), - d);\n  if (d < dMin) { dMin = d;  idObj = idCbl;  qHit = p; }\n  return dMin;\n}\n\nfloat WhlDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  float d, a, s;\n  p.xy = Rot2D (p.xy, 0.19 * tCur);\n  q = p;\n  d = PrCylDf (q, 2. * wcRad, 2. * wGap + wcRad);\n  if (d < dMin) { dMin = d;  idObj = idHub;  qHit = q; }\n  q.z = abs (q.z) - wGap;\n  d = PrRCylDf (q, 4. * wcRad, 2. * wcRad, 1.5 * wtRad);\n  if (d < dMin) { dMin = d;  idObj = idHub;  qHit = q; }\n  q.z -= wGap + 4. * wcRad;\n  d = PrSphDf (q, 4. * wcRad);\n  qq = q;\n  qq.z -= 4. * wcRad;\n  d = max (d, - PrCylDf (qq, 1.5 * wcRad, wcRad));\n  if (d < dMin) { dMin = d;  idObj = idSph;  qHit = q; }\n  q.z += wGap + 4. * wcRad;\n  d = PrTorusDf (q, wtRad, wRad);\n  if (d < dMin) { dMin = d;  idObj = idTor;  qHit = q; }\n  q = p;\n  a = atan (q.y, - q.x) / (2. * pi);\n  q.xy = Rot2D (q.xy, (0.5 + floor (7. * a)) * (2. * pi / 7.));\n  q.x -= - wRad;\n  d = PrCylDf (q, wcRad, wGap);\n  if (d < dMin) { dMin = d;  idObj = idHub;  qHit = q; }\n  q.z = abs (q.z) - wGap;\n  d = PrSphDf (q, 1.3 * wtRad);\n  if (d < dMin) { dMin = d;  idObj = idHub;  qHit = q; }\n  s = 1. + 0.2 * SmoothBump (0.45, 0.55, 0.02, mod (4. * q.x / wRad + 0.5, 1.));\n  q.x -= 0.5 * wRad;\n  d = PrCylDf (q.yzx, wcRad * s, 0.5 * wRad);\n  if (d < dMin) { dMin = d;  idObj = idHub;  qHit = q; }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, pAng;\n  pAng = 0.5 * (atan (p.y, - p.x) / pi + 1.);\n  dMin = dstFar;\n  dMin = WhlDf (p - wPos, dMin);\n  if (showElev) {\n    dMin = CablDf (p - cgPos, pAng, dMin);\n    dMin = CageDf (p - cgPos, pAng, dMin);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  if (d >= 0.001) dHit = dstFar;\n  return dHit;\n}\n\nfloat TransObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 qs;\n  float a, d;\n  q = p;\n  a = 0.5 * (atan (q.y, - q.x) / pi + 1.);\n  qs = vec2 (mod (vec2 (16. * a, 0.25 * q.z) + 0.5, 1.) - 0.5);\n  d = max (PrCylAnDf (q, cgRad - 0.05, 0.05, cgLen), PrBox2Df (qs, vec2 (0.45)));\n  return d;\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = TransObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  if (d >= 0.001) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.2, 0.1 * d);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec4 ObjCol ()\n{\n  vec4 col;\n  float a, aa, f;\n  if (idObj == idTor) {\n    col = vec4 (0.9, 0.9, 1., 0.3);\n    a = (atan (qHit.y, - qHit.x) / (2. * pi));\n    aa = atan (qHit.z, length (qHit.xy) - wRad) / (2. * pi);\n    f = max (SmoothBump (0.3, 0.7, 0.02, mod (0.5 + 63. * a, 1.)),\n       SmoothBump (0.3, 0.7, 0.02, mod (4. * aa, 1.)));\n    col = mix (vec4 (0.7, 0.7, 0.2, 1.), col, f);\n  } else if (idObj == idSph) {\n    col = vec4 (0.9, 0.9, 1., 0.3);\n    a = (atan (qHit.y, - qHit.x) / (2. * pi));\n    aa = atan (qHit.z, length (qHit.xy)) / (2. * pi);\n    f = max (SmoothBump (0.3, 0.7, 0.02, mod (0.5 + 14. * a, 1.)),\n       1. - SmoothBump (-0.05, 0.05, 0.01, aa));\n    col = mix (vec4 (0.7, 0.7, 0.2, 1.), col, f);\n    if (length (qHit.xy) < 1.5 * wcRad) col = vec4 (0.1, 0.1, 0., -1.);\n  } else if (idObj == idCbl) {\n    col = vec4 (0.9, 1., 0.9, 0.3);\n  } else if (idObj == idCage) {\n    col = vec4 (0.9, 0.9, 1., 0.3);\n  } else if (idObj == idHub) {\n    col = vec4 (0.9, 0.9, 1., 0.3);\n  }\n  return col;\n}\n\nvec3 PlCol (vec3 rd, vec3 vn)\n{\n  vec4 gCol, cCol;\n  vec3 col, sn, vc;\n  float spec, s;\n  sn = vn;\n  sn.xz = Rot2D (sn.xz, 0.1 * tCur);\n  s = min ((0.5 + 0.5 * sn.y * sn.y) *\n     Fbm3 (3. * normalize (vec3 (sn.xz, 0.8 * sn.y))), 1.);\n  col = vec3 (0.5, 0.5, 1.);\n  col = mix (col, vec3 (0.1, 0.2, 0.1), step (0.6, s));\n  col = mix (col, vec3 (0.3, 0.25, 0.1), step (0.7, s));\n  col = mix (col, vec3 (0.7), step (0.9, s));\n  spec = mix (0.8, 0.1, step (0.6, s));\n  gCol = vec4 (col, spec);\n  sn = vn;\n  sn.xz = Rot2D (sn.xz, 0.12 * tCur);\n  vc = normalize (vec3 (0.7 * sn.xz, sn.y));\n  cCol = vec4 (1., 1., 1., 0.2) * (1. - 0.2 * Fbm3 (27. * vc));\n  gCol = mix (gCol, cCol, smoothstep (0.5, 0.9, 0.7 * Fbm3 (7. * vc)));\n  if (s > 0.6) vn = VaryNf (20. * sn, vn, 1.);\n  col = gCol.rgb * (0.1 +\n     0.1 * max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.) +\n     max (0., max (dot (vn, sunDir), 0.)) + gCol.a *\n     pow (max (0., dot (sunDir, reflect (rd, vn))), 16.));\n  return col;\n}\n\nvec3 HvnCol (vec3 ro, vec3 rd)\n{\n  vec3 rds, col;\n  float a, s, plAng;\n  plAng = 0.06;\n  a = atan (length (rd.xy), - rd.z);\n  if (a < plAng) {\n    s = sin (a);\n    s *= cos (a) / plAng - sqrt (1. - s * s / (plAng * plAng));\n    col = PlCol (rd, vec3 (s * normalize (rd.xy), sqrt (1. - s * s)));\n  } else {\n    rds = floor (2000. * rd);\n    rds = 0.00015 * rds + 0.1 * Noisefv3 (0.0005 * rds.yzx);\n    for (int j = 0; j < 19; j ++) rds = abs (rds) / dot (rds, rds) - 0.9;\n    col = vec3 (0.8, 0.8, 0.6) *\n       min (1., 0.5e-3 * pow (min (6., length (rds)), 5.));\n    s = pow (max (0., dot (rd, sunDir)), 16.);\n    col = vec3 (0., 0., 0.03) + col * (1. - smoothstep (0.9, 1., s));\n    s = pow (s, 128.);\n    col += vec3 (1., 0.95, 0.8) * (0.2 * s + 0.9 * pow (s, 8.));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, rCol, vn, roo, rdo;\n  vec4 objCol;\n  vec2 ss;\n  float dstHit, dstWin, sh, spec, a;\n  int idObjT;\n  roo = ro;\n  rdo = rd;\n  if (showElev) dstWin = TransObjRay (ro, rd);\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    objCol = ObjCol ();\n    if (idObj == idCage) {\n      a = mod (16. * atan (qHit.y, - qHit.x) / (2. * pi), 1.) - 0.5;\n      if (abs (a) < 0.1) {\n        ss = SSBump (0.02, 0.03, a);\n        if (ss.x + ss.y != 0.) {\n          vn.xy *= 1. + 0.5 * (ss.y - ss.x);\n          vn = normalize (vn);\n        }\n      }\n    }\n    vn = VaryNf (50. * ro, vn, 0.1);\n    rCol = (objCol.a >= 0.) ? HvnCol (ro, reflect (rd, vn)) : vec3 (0.);\n    sh = ObjSShadow (ro, sunDir);\n    col = objCol.rgb * (0.1 +\n       0.2 * max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.) +\n       0.7 * sh * max (0., max (dot (vn, sunDir), 0.)));\n    col = sh * mix (col, rCol, 0.2);\n    col += objCol.a * sh * vec3 (1., 1., 0.95) *\n       pow (max (0., dot (sunDir, reflect (rd, vn))), 16.);\n  } else col = HvnCol (ro, rd);\n  if (idObj == idCbl && abs (qHit.z) > 0.9 * cbLen)\n     col = mix (col, HvnCol (roo, rdo), smoothstep (0.9, 1., abs (qHit.z) / cbLen));\n  if (showElev && dstWin < min (dstHit, dstFar)) {\n    vn = vec3 (normalize (roo.xy), 0.);\n    rCol = vec3 (0.05, 0.05, 0.) + HvnCol (roo, reflect (rdo, vn));\n    col = mix (col * vec3 (1., 1., 0.5), rCol,\n       1. - pow (max (- dot (rdo, vn), 0.), 5.));\n  }\n  col = pow (clamp (col, 0., 1.), vec3 (0.8));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd, vd, u;\n  vec2 uv;\n  float f, t, tm, tCyc;\n  uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n  uv.x *= iResolution.x / iResolution.y;\n  tCur = iTime;\n  dstFar = 1000.;\n  cbLen = 150.;\n  wRad = 20.;\n  wGap = wRad / 8.;\n  wtRad = wRad / 20.;\n  wcRad = wRad / 40.;\n  cbRad = 1.;\n  cgRad = 4.;\n  cgLen = 5.;\n  wPos = vec3 (0., 0., 400.);\n  cgPos = vec3 (0.);\n  tCyc = 80.;\n  showElev = (mod (tCur, 0.5 * tCyc) < 0.25 * tCyc);\n  if (showElev) {\n    t = 0.05 * mod (tCur, 0.25 * tCyc);\n    f = SmoothBump (0.25, 0.75, 0.15, mod (2. * t, 1.)) *\n       (2. * step (0.5 * tCyc, mod (tCur, tCyc)) - 1.);\n    tm = 2. * step (0.5, mod (t + 0.25, 1.)) - 1.;\n    ro = vec3 (- (50. + 50. * abs (f)) * tm, 10. * f, 0.);\n    ro.xz = Rot2D (ro.xz, 0.5 * pi * f * (2. * step (0.5, t) - 1.));\n    ro.z *= tm;\n    ro.z += cgPos.z;\n    vd = normalize (cgPos - ro);\n  } else {\n    ro = vec3 (150., 0., 0.);\n    ro.xz = Rot2D (ro.xz, 0.1 * tCur);\n    ro.xy = Rot2D (ro.xy, 0.032 * tCur);\n    ro.z += wPos.z;\n    vd = normalize (wPos - ro);\n  }\n  u = - vd.y * vd;\n  f = 1. / max (0.001, sqrt (1. - vd.y * vd.y));\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, 6.));\n  sunDir = vec3 (1., 0., 0.);\n  fragColor = vec4 (ShowScene (ro, rd), 2.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrHexp2Df (vec2 p, float r)\n{\n  vec2 pa;\n  pa = abs (p);\n  return max (0.5 * (pa.x * sqrt3 + pa.y), pa.y) - r;\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  const vec3 e = vec3 (0.1, 0., 0.);\n  vec3 g;\n  float s;\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 SSBump (float w, float s, float x)\n{\n  return vec2 (step (x + s, w) * step (- w, x + s),\n     step (x - s, w) * step (- w, x - s));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}