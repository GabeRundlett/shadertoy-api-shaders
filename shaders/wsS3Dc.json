{
    "Shader": {
        "info": {
            "date": "1550150794",
            "description": "Distance to an octahedron, alternative approach to https://www.shadertoy.com/view/wsSGDG",
            "flags": 0,
            "hasliked": 0,
            "id": "wsS3Dc",
            "likes": 2,
            "name": "Distance to an Octahedron",
            "published": 3,
            "tags": [
                "distance",
                "octahedron"
            ],
            "usePreview": 0,
            "username": "sopyer",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// It computes the distance to a triangle.\n//\n// See here: https://iquilezles.org/articles/triangledistance\n//\n// In case a mesh was rendered, only one square root would be needed for the\n// whole mesh. In this example the triangle is given a thckness of 0.01 units\n// for display purposes. Like the square root, this thickness should be added\n// only once for the whole mesh too.\n\n\n// Other distande functions (SDFs):\n//\n// Quad:          https://www.shadertoy.com/view/Md2BWW\n// Triangle:      https://www.shadertoy.com/view/4sXXRN\n// Rounded Cone:  https://www.shadertoy.com/view/tdXGWr\n// Cylinder:      https://www.shadertoy.com/view/wdXGDr\n// Octahedron:    https://www.shadertoy.com/view/wsSGDG\n// Many more:     https://www.shadertoy.com/view/Xds3zN\n//\n// List of primitive SDFs at https://iquilezles.org/articles/distfunctions\n\n\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat saturate(in float v) {return clamp(v, 0.0, 1.0);}\n\nvec2 udSegment(in vec2 p0, in vec2 p1, in vec2 p)\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 v0 = p - p0;\n\tvec2 pq0 = v0 - e0*saturate( dot(v0,e0)/dot(e0,e0) );\n    return pq0;\n}\n\nfloat udOctahedron( in vec3 p )\n{\n    // Octant symmetry\n    p = abs(p);\n    // Diagonal symmetry\n    p.xz = p.x < p.z ? p.zx : p.xz;\n  \n    // transform into triangle plane\n    //float x = (1.0 - p.x + sqrt(2.0)*p.y) / sqrt(3.0);\n    //float y = p.z - 1.0;\n    //float z = (sqrt(2.0)*(p.x - 1.0)+p.y) / sqrt(3.0);\n    \n    // transform into triangle plane\n    p.xz -= vec2(1.0);\n    float x = (-p.x + sqrt(2.0)*p.y) / sqrt(3.0);\n    float y = p.z;\n    float z = (sqrt(2.0)*p.x+p.y) / sqrt(3.0);\n    \n    \n    // x==0.0 edge mask\n    float edge0 = step(0.0, -x);\n    // diagonal edge mask\n    float edge1 = (1.0-edge0) * step(0.0, x / sqrt(3.0)+ y);\n    \n    vec2 pd = vec2(0);\n    //pd += edge0 * udSegment(vec2(0, 1), vec2(0, 0), p2);\n    //pd += edge1 * udSegment(vec2(0, 1), vec2(sqrt(3.0), 0.0), p2);\n\n    pd += edge0 * vec2(x, y + saturate(-y));\n    float t = saturate( (sqrt(3.0)*x - y)/4.0 );\n    pd += edge1 * vec2(x - sqrt(3.0)*t, y + t );\n\n    // compute distance to triangle\n    return length(vec3(pd, z));\n}\n\n//=====================================================\n\nfloat map( in vec3 p )\n{\n\tfloat rad = 0.103+0.1*sin(iTime*2.0);\n\tfloat d1 = udOctahedron( (p-vec3(0, 1.0, 0))/(1.0-rad) )*(1.0-rad) - rad;\n\n    // ground plane\n\tfloat d2 = p.y + 1.0;\n\n    return min( d1, d2 );\t\n}\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;\n\tfloat h = 1.0;\n    float t = 0.0;\n    for( int i=0; i<50; i++ )\n    {\n        if( h<0.001 || t>maxd ) break;\n\t    h = map( ro+rd*t );\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n\t\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.002,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = 0.0;\n\tfloat h = 1.0;\n    for( int i=0; i<20; i++ )\n    {\n        h = map(ro + rd*t);\n        res = min( res, k*h/t );\n\t\tt += clamp( h, 0.01, 1.0 );\n\t\tif( h<0.0001 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.02 + 0.025*float(i*i);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return 1.0 - clamp( occ, 0.0, 1.0 );\n}\n\nvec3 lig = normalize(vec3(1.0,0.9,0.7));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n     // camera movement\t\n\tfloat an = 0.5*(iTime-10.0);\n\tvec3 ro = vec3( 4.0*cos(an), 2.4, 4.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    // create view ray\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\t\n\tvec3 col = vec3(0.0);\n\n    float t = intersect(ro,rd);\n    if( t>0.0 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\tfloat sha = calcSoftshadow( pos + nor*0.01, lig, 32.0 );\n\t\tfloat occ = calcOcclusion( pos, nor );\n\t\tcol =  vec3(0.9,0.6,0.3)*clamp( dot( nor, lig ), 0.0, 1.0 ) * sha;\n\t\tcol += vec3(0.5,0.6,0.7)*clamp( nor.y, 0.0, 1.0 )*occ;\n        col += 0.03;\n\t\tcol *= exp( -0.2*t );\n        col *= 1.0 - smoothstep( 5.0, 10.0, t );\n\t}\n\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}