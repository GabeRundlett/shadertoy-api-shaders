{
    "Shader": {
        "info": {
            "date": "1599905682",
            "description": "looks neat\ncheck the #defines and use mouse !",
            "flags": 0,
            "hasliked": 0,
            "id": "tl2BWK",
            "likes": 4,
            "name": "pixels woo",
            "published": 3,
            "tags": [
                "pixel",
                "post"
            ],
            "usePreview": 0,
            "username": "thefox231",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "#define amp (iMouse.y / iResolution.y)\n#define split (iMouse.x / iResolution.x)\n\n#define smooth\n\nconst float PI = 3.1415;\n\nfloat inOutSine(float x) {\n  return 0.5 - 0.5 * cos(x * PI);\n}\n\nvec2 hash23(vec3 p3) {\n\treturn fract(texture(iChannel1, p3.xy - p3.z * 0.12551).rb + p3.z);\n}\n\nvec2 smoothNoise(vec3 p3) {\n    return mix(hash23(vec3(p3.x, p3.y, floor(p3.z))), hash23(vec3(p3.x, p3.y, ceil(p3.z))), fract(p3.z));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float pixSize = 20.0;\n    \n    uv.y *= iResolution.y / iResolution.x;\n    \n    vec2 pixUv = floor(uv * pixSize) / pixSize;\n    #ifndef smooth\n    if (pixUv.x + pixUv.y * 0.2 > split) uv += floor((smoothNoise(vec3(pixUv, iTime + pixUv.x - pixUv.y)) * 2.0 - 1.0) * pixSize * amp) / pixSize;\n  \t#else\n    if (pixUv.x + pixUv.y * 0.2 > split) uv += (smoothNoise(vec3(pixUv, inOutSine(iTime + pixUv.x - pixUv.y))) * 2.0 - 1.0) * amp;\n    #endif\n    \n    uv.y /= iResolution.y / iResolution.x;\n    \n    fragColor = texture(iChannel0, fract(uv)).rgba;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}