{
    "Shader": {
        "info": {
            "date": "1630181305",
            "description": "Pythagorean triples. All points in the plane which distance to the origin is an integer are green. In this render every pixel represents a 8x8 grid of integers.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nt23RD",
            "likes": 32,
            "name": "Pythagorean Triples",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "maths",
                "pythagorean",
                "triplets"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 945
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2021\n// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. \n// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute \"by Inigo Quilez, @iquilezles and iquilezles.org\". \n// If you are a teacher, lecturer, educator or similar and these conditions are too restrictive for your needs, please contact me and we'll work it out.\n\n\n// Pythagorean triples - https://en.wikipedia.org/wiki/Pythagorean_triple\n//\n// All points in the plane for which the distance to the origin\n// is an integer. In this render every pixel represents a 8x8 grid\n// of integers. You can change that in line 15.\n\n\n#define INTS_PER_PIXEL 8\n#define USE_EXACT_SQRT 0\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 6\n#endif\n\n#if USE_EXACT_SQRT==1\nuint intsqrt( uint s );\n#endif\n\nvec3 render( in vec2 px )\n{\n    float s = exp2( -(1.0+cos(6.283185*iTime/20.0)) );\n    uvec2 p = uvec2( abs(floor((px-iResolution.xy*0.5)*s)) );\n\n    const uint S = uint(INTS_PER_PIXEL);\n    \n    float f = 0.0;\n    for( uint j=0u; j<S; j++ )\n    for( uint i=0u; i<S; i++ )\n    {\n        uvec2 q = S*p + uvec2(i,j);\n        uint h2 = q.x*q.x + q.y*q.y;\n        \n        #if USE_EXACT_SQRT==0\n        uint h = uint(round(sqrt(float(h2))));\n        #else\n        uint h = intsqrt(h2);\n        #endif\n        \n        if( h*h==h2 ) { f = 1.0; break; }\n    }\n    \n    return vec3(0.5*f,f,0.0);\n}\n\n\n// --------------------------------------\n// Integer square root\n// https://en.wikipedia.org/wiki/Integer_square_root\n// --------------------------------------\n#if USE_EXACT_SQRT==1\nuint intsqrt( uint s )\n{\n\tuint x0 = s >> 1;\n    if( x0==0u ) return s;\n    uint x1 = ( x0 + s / x0 ) >> 1;\n    while( x1 < x0 )\n    {\n        x0 = x1;\n        x1 = ( x0 + s / x0 ) >> 1;\n    }\n    return x0;\n}\n#endif\n\n\n\n#if AA>1\n// --------------------------------------\n// oldschool rand() from Visual Studio\n// --------------------------------------\nint  seed = 1;\nvoid srand(int s ) { seed = s; }\nint  rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat frand(void) { return float(rand())/32767.0; }\n\n// --------------------------------------\n// hash to initialize the random sequence (copied from Hugo Elias)\n// --------------------------------------\nint hash( int n )\n{\n\tn = (n << 13) ^ n;\n    return n * (n * n * 15731 + 789221) + 1376312589;\n}\n#endif\n\n// --------------------------------------\n// main\n// --------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#if AA>1\n    seed = hash( int(fragCoord.y)*3840 + int(fragCoord.x) );\n    vec3 col = vec3(0.0);\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 o = 2.0*vec2(float(m)+frand(),float(n)+frand())/float(AA)-1.0;\n        col += render(fragCoord+o);\n    }\n    col /= float(AA*AA);\n#else\n    vec3 col = render(fragCoord);\n#endif\n    col = sqrt(col);\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}