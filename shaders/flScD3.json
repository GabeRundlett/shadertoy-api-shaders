{
    "Shader": {
        "info": {
            "date": "1650531561",
            "description": "Jalta, Crimea",
            "flags": 0,
            "hasliked": 0,
            "id": "flScD3",
            "likes": 22,
            "name": "Jalta lighthouse",
            "published": 3,
            "tags": [
                "raymarch",
                "sea",
                "day",
                "lighhouse"
            ],
            "usePreview": 0,
            "username": "deni_de",
            "viewed": 583
        },
        "renderpass": [
            {
                "code": "#define PI 3.14\n#define wavelength 4.8\n#define steepness 0.7\n\n#define surfaceEdge .001\n\n#define normalPower 1.0\nvec3 ambient = vec3(0.001);\n\n//OPERATORS_3D______OPERATORS_3D______OPERATORS_3D______OPERATORS_3D______OPERATORS_3D______\nfloat random (vec2 seed) \n{\n    return fract(sin(dot(seed.xy,\n                         vec2(12.9898,78.233)))\n                             * 43758.5453123);\n}\nmat2 Rotate(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,-s,s,c);\n}\n\nvec3 Wave(vec4 wave, vec3 pos, vec2 SW)\n{\n    float s = SW.x;\n    float w = SW.y;\n    float k = 2. * PI / w ;\n    float c = sqrt(9.8 / k);\n    vec2 d = normalize(wave.xy);\n    \n    float f = k * (dot(d, pos.xz) - c * iTime);\n    float a = s / k;\n    \n    return vec3(d.x * (a * cos(f)),\n\t\t\t\ta * sin(f),\n\t\t\t\td.y * (a * cos(f)));\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 uv) \n{\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n// Low quality, turbulent FBM (for raymarching)\nfloat fbm(vec2 uv) \n{\n    float h = 0.0, a = 1.0;    \n    for (int i = 0; i < 4; ++i) \n    {\n        h += 1.0-abs(a * noise(iTime - uv) ); // ridged perlin noise\n        a *= 0.45; uv *= 2.02;\n    }   \n    \n    return h;\n}\n\n//PRIMITIVE____PRIMITIVE____PRIMITIVE____PRIMITIVE____PRIMITIVE____PRIMITIVE____\nvec2 sphere(vec3 position, vec4 objPosition, float matId)\n{\n    return vec2(length(position-objPosition.xyz) - objPosition.w,matId);\n}\n\nvec2 box(vec3 position, vec3 bounds, float matId)\n{\n  vec3 q = abs(position) - bounds;\n  return vec2(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),matId);\n}\n\nvec2 sdHexPrism( vec3 p, vec2 h, float matId)\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return vec2(min(max(d.x,d.y),0.0) + length(max(d,0.0)),matId);\n}\n\nvec2 sdTorus( vec3 p, vec2 t ,float matId)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return vec2(length(q)-t.y, matId);\n}\n\n//vec2 sdCone( vec3 p, vec2 c, float h ,float matId)\nvec2 sdCone( in vec3 p, in vec2 c, float h, float matId)\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return vec2(sqrt(d)*sign(s), matId);\n}\n\nvec2 sdBoxFrame( vec3 p, vec3 b, float e ,float matId)\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return vec2(min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0)),matId);\n}\n//OBJECTS_STRUCT_______OBJECTS_STRUCT_______OBJECTS_STRUCT_______OBJECTS_STRUCT_______\nvec2 waterplane(vec3 position, float matId)\n{\n    vec4 waveInfo = vec4(1,-3,0,0);\n    vec4 waveInfo2 = vec4(-1,5,0,0);\n    vec4 waveInfo3 = vec4(-3,2,0,0);\n    float oPos = position.y;\n    \n    vec3 wave = vec3(fbm(position.xz + 0.7 + iTime));\n    wave += Wave(waveInfo, position,vec2(steepness,wavelength));\n    wave += Wave(waveInfo3,position,vec2(steepness * 2., wavelength / 2.));\n      \n    float o = (wave.x + wave.y + wave.z) / 3. ;\n    // .21 | .11\n    oPos += o * 0.11;\n    return vec2(oPos,matId);\n}\n\nvec2 pier(vec3 position, float matId)\n{\n    vec3 boxPosCtrl = (position - vec3(-8.8,0,14));\n    float boxs = box( boxPosCtrl, vec3(9,1,1), matId).x;\n    \n    boxPosCtrl = (position - vec3(-8.8, 2.1, 14.21));\n    boxs = min( boxs, box( boxPosCtrl, vec3(9,1.5,.1), matId).x );\n    \n    boxPosCtrl = position - vec3(-2.3, 0, 12.21);\n    boxs = min( boxs, box( boxPosCtrl , vec3(4,1,2), matId).x );\n    \n    boxPosCtrl = position - vec3(-1.3, 0.21, 12.21);\n    boxs = min( boxs, box( boxPosCtrl , vec3(3,2,1), matId).x );\n    \n    boxs -= texture(iChannel0,position.xy * .21).b * 0.07;\n    \n    return vec2(boxs,matId);\n}\n\nvec2 lighthouse(vec3 position, float matId)\n{\n    vec3 tmpPose = position - vec3(0,4.0,13);\n    tmpPose.yz *= Rotate(1.6);\n    float lhouse = sdHexPrism(tmpPose, vec2(1,2.55),matId).x;\n    \n    tmpPose = position - vec3(0,8.8,13);    \n    lhouse = min(lhouse, sdCone(tmpPose, vec2(1,1.2), 1.4, matId).x);\n    \n    tmpPose = position - vec3(0,5,12);  \n    lhouse = max( -box( tmpPose, vec3(.1,.2,.5), matId).x, lhouse );\n    \n    tmpPose = position - vec3(0,3.5,12);  \n    lhouse = max( -box( tmpPose, vec3(.1,.2,.5), matId).x, lhouse );\n    \n    tmpPose = position - vec3(0,9,13);  \n    lhouse = min(  lhouse, box( tmpPose, vec3(.05,.7,.05), matId).x);\n    \n    tmpPose = position - vec3(0,7,13); \n    tmpPose.xz *= Rotate(0.7);\n    lhouse = min( lhouse, sdBoxFrame( tmpPose, vec3(.8,.5,.8), .05, matId).x);\n    \n    tmpPose = position - vec3(0,5.7,13);\n    tmpPose.yz *= Rotate(1.6);\n    lhouse = min( lhouse, sdHexPrism(tmpPose, vec2(1.5, .021),matId).x);\n    \n    tmpPose = position - vec3(0,2.4,13);\n    tmpPose.yz *= Rotate(1.6);\n    lhouse = min( lhouse, sdHexPrism(tmpPose, vec2(1.3, .5),matId).x);\n    \n    tmpPose = position - vec3(0,7.4,13);\n    tmpPose.yz *= Rotate(1.6);\n    lhouse = min( lhouse, sdHexPrism(tmpPose, vec2(1.3, .021),matId).x);\n    \n    lhouse -= texture(iChannel2,position.xy * .21).b * 0.02;\n    \n    return vec2(lhouse,matId);\n}\n//RAYFUNCTIONS______RAYFUNCTIONS______RAYFUNCTIONS______RAYFUNCTIONS______RAYFUNCTIONS______\nvec2 Map(vec3 position)\n{\n    float mat = 2.0;\n    float final = position.y;\n    \n    float waterplane = waterplane(position,1.).x;\n    final = waterplane;\n    float prevd = final;\n    \n    float pier = pier(position,2.).x;\n    final = min(waterplane, pier);\n    \n    if (final < prevd)\n        mat = 3.0;\n    prevd = final;\n    \n    float lighthouse = lighthouse(position + vec3(0.5,0,0),3.).x;\n    final = min(final,lighthouse);\n    if (final < prevd)\n        mat = 4.0;\n    prevd = final;\n    ;\n    float sphDist = sphere(position + vec3(0.5,0,0), vec4(0, 6.9, 13, 0.21),0.).x;\n    final = min(final,sphDist);\n    \n    if (final < prevd)\n        mat = 5.0;\n    prevd = final;\n\n    return vec2(final,mat);\n}\n\nvec2 Raycast(vec3 rayOrigin, vec3 rayDirection)\n{\n    //distance of a point on ray\n    float d = 0.0;\n    float matId = 0.0;\n    \n    //cast all ray points\n    for(int i = 0; i < 200; i++)\n    {\n        vec3 position = rayOrigin + rayDirection * d;\n        \n        //map.x = distS;\n        vec2 map = Map(position);\n        \n        matId = map.y;\n                \n        if (map.x < 0.001) break;\n        \n        d += map.x;\n        \n        if(d > 120.0) break;\n        \n    }\n    if(d > 100.0) d = -1.0;\n    return vec2(d,matId);\n}\n\nvec3 CalcNormal(vec3 position)\n{\n    float d = Map(position).x;\n    \n    vec2 edge = vec2(0.001, 0);\n    vec3 normal = d - vec3(\n        Map(position-edge.xyy).x,\n            Map(position-edge.yxy).x,\n                Map(position-edge.yyx).x\n                                        );\n    return normalize(normal);\n}\n\n//LIGHTNING____LIGHTNING____LIGHTNING____LIGHTNING____LIGHTNING____LIGHTNING____LIGHTNING____\nvec3 CalcLight(vec3 position,vec3 lightPosition,vec3 rayOrigin, vec3 rayDirection, vec4 lightColor, bool point)\n{\n    vec3 l;\n    vec3 n = CalcNormal(position);\n    float shadow;\n    \n    if(point)\n    {\n        l = normalize(lightPosition-position);\n        shadow = Raycast(position + n * surfaceEdge, l).x;\n    }\n    else\n    {\n        l = normalize(lightPosition);\n        shadow = step( Raycast(position + n * surfaceEdge, l).x, 0.0);\n    }\n    \n    float nl = clamp(dot(n,l), 0., 1.);\n    return lightColor.rgb * (nl * shadow * lightColor.w) ;\n}\n\nvec3 SkyMotions(float status, vec3 rd, vec3 ro, vec3 lp)\n{\n    //color = vec3(0.6,0.7,0.9) - 0.5 * rd.y;\n        //color = mix(color,vec3(0.9,0.95,1.2),exp(-10.0*rd.y));\n    vec3 day_colorsky = (vec3(0.6,0.7,0.9) - 0.5 * rd.y);\n    vec3 day_colorhorz = vec3(0.9,0.95,1.2);\n    float stat = dot(lp.x,lp.y);\n    vec3 colorsky = mix(day_colorsky, day_colorhorz, exp(-10.0 *rd.y ));\n    float sun = pow(1.0 - length( ( rd + vec3(0.5 + status,0.1,-0.4)) - 0.4), 20.5) * 25.;\n    \n    return colorsky + clamp(sun,0.01,1.);\n}\n\nfloat ao(vec3 p, vec3 n) \n{\n\tfloat o = 0.0, s = 0.011, w = 1.0;\n\t\n\tfor(int i = 0; i < 15; i++) {\n\t\tfloat d = Map(p + n*s).x;\n\t\to += (s - d)*w;\n\t\tw *= 0.98;\n\t\ts += s/float(i + 1);\n\t}\n\t\n\treturn 1.0 - clamp(o, 0.0, 1.0);\n}\n\nvec3 RenderImage(out vec3 ro, out vec3 rd, vec3 color, vec3 lp, float status)\n{\n    for(int i = 0; i < 2; i++)\n    {\n        //SKY\n        //color = vec3(0.6,0.7,0.9) - 0.5 * rd.y;\n        //color = mix(color,vec3(0.9,0.95,1.2),exp(-10.0*rd.y));\n\n        //2.0 = standard\n        color = SkyMotions(status,rd,ro,lp);\n\n        //AMBIENT < ? >\n        vec3 ambient = clamp(color,vec3(0),vec3(1));\n\n        vec2 ray = Raycast(ro,rd);\n        if(ray.x > 0.0)\n        {\n            vec3 diffuse = vec3(0);\n            vec3 position = ro + rd * ray.x;\n            vec3 normal = CalcNormal(position);\n            vec3 l = normalize(lp-position);          \n\n            float bounce = clamp(0.5 + 0.5 * dot(normal,vec3(0.0,-1.0,0.0)),0.0,1.0);\n            float SkyAmbient = clamp(0.5 + 0.5 * dot(normal,vec3(0.0,1.0,0.0)),0.0,1.0)+ 0.05;\n\n            float AO = ao(position, normal);\n\n            diffuse += CalcLight( position, lp, ro, rd, vec4(1, 1, 1, 1.0), false);\n            diffuse +=  ambient * SkyAmbient * ctrl; //vec3(0.9,0.95,1.2) * SkyAmbient;      \n            vec3 mat = vec3(0.16);\n\n            if(ray.y > 4.5)\n            {\n                //SPHERE\n                mat = vec3(1,0,0) * (sin(iTime * 3.0)  * sin(iTime * 0.21) );\n                return mat * AO * 2.0;\n            }\n            else if(ray.y > 3.5)\n            {\n                //LIGHTHOUSE\n                mat = vec3(1,1,1) * diffuse * 5.0 * ctrl;\n                return mat * AO * 2.0;\n            }  \n            else if(ray.y > 2.5)\n            {\n                //PIER\n                vec3 channel0 = texture(iChannel0,position.xy * 0.21 + position.zy * 0.21).rgb;\n                mat = channel0;\n                mat =  mat * diffuse * ctrl;\n                return mat * AO * 2.0;\n            }   \n            else if(ray.y > 1.5)\n            {\n                //WATER  \n                mat = vec3(0.21,0.21,0.7) * diffuse * ctrl;\n                \n                vec3 ref = reflect(rd, normal);\n                ro = position + normal;\n                rd = ref;\n                \n                color -= mat * AO * 0.5;\n            }\n\n            //color += 1. - (length(uv.xy) +.5);\n            //fog\n            //mat = mix(mat, vec3(0.45, 0.8, 1.0), 1.0 - exp(-0.02*t));\n            //color = mat * AO * 2.0;\n        }\n    \n    }\n        \n    return color;\n}\n//MAIN_PROCESSING______MAIN_PROCESSING______MAIN_PROCESSING______MAIN_PROCESSING______\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lp = vec3(-50,9,31);\n    lp.yx *= Rotate(iTime * 0.31) ;\n    float status = (vec2(1,1) * Rotate(iTime * 0.16)).x;\n    vec2 uv = (fragCoord-0.5 *iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(8.1, 3, -15); // Y 1.7\n    vec3 rd = normalize(vec3(uv,1));\n    \n    vec3 color = vec3(0);\n    color = RenderImage(ro,rd,color,lp,status);\n    color = pow(color,vec3(0.53));\n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ctrl vec3(0.21,0.21,0.21);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}