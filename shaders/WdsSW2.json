{
    "Shader": {
        "info": {
            "date": "1552246596",
            "description": " Критерии:\nСцена сделана реалистично, содержит множество интересных объектов и материалов (это планета со спутником)\nКамера\nОкружение в виде текстурированной плоскости",
            "flags": 0,
            "hasliked": 0,
            "id": "WdsSW2",
            "likes": 1,
            "name": "PLANET",
            "published": 3,
            "tags": [
                "cosmos"
            ],
            "usePreview": 0,
            "username": "questina",
            "viewed": 324
        },
        "renderpass": [
            {
                "code": "/* PLANET */\n#define MAX_STEPS 512\n#define SURF_DIST 0.01\n#define MAX_DIST 100.\n#define EPSILON 0.0001\n\nvec3 uv(vec3 point, vec3 nml, sampler2D samp) {\n\tvec3 texX = texture(samp, point.zy).xyz;\n    vec3 texY = texture(samp, point.xz).xyz;\n    vec3 texZ = texture(samp, point.xy).xyz;\n    return texX * nml.x + texY * nml.y + texZ * nml.z;\n}\n\nmat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sphereSD(vec3 p) {\n    return length(p) - 1.0 - (uv(p, normalize(p), iChannel1).r * 0.2);\n}\n\nfloat sphere(vec3 p) {\n    return length(p + vec3(2.*sin(iTime), -0.2, 2.*cos(iTime))+1.0) - 0.3;\n}\n\nfloat planeSD(vec3 p) {\n    \n    return min(sphere(p - vec3(1,1,1)), p.y+2.);\n}\n\nfloat DistanceToPlanet(vec3 eye, vec3 dir, float start, float end) {\n    float old_dist;\n    float depth = start;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 cur_eye = eye + depth * dir;\n        float dist = sphereSD(cur_eye);\n        if (dist < EPSILON) {\n            vec3 old_eye = eye - old_dist * dir;\n\t\t\treturn depth - old_dist + old_dist * (old_dist - old_eye.y) / (cur_eye.y - old_eye.y - dist + old_dist);\n        }\n        depth += dist * 0.5;\n        old_dist = dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nfloat DistanceToPlane(vec3 eye, vec3 dir, float start, float end){\n    float old_dist;\n    float depth = start;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 cur_eye = eye + depth*dir;\n        float dist = planeSD(cur_eye);\n        if (dist < EPSILON) {\n            vec3 old_eye = eye - old_dist * dir;\n            return depth - old_dist + old_dist * (old_dist - old_eye.y) / (cur_eye.y - old_eye.y - dist + old_dist);\n        }\n        depth += dist * 0.5;\n        old_dist = dist;\n        if (depth >= end) {\n            return end;\n        }     \n    }\n    return end; \n}\n\nvec3 getNormalS(vec3 p) {\n    return normalize(vec3(\n        sphereSD(vec3(p.x + EPSILON, p.y, p.z)) - sphereSD(vec3(p.x - EPSILON, p.y, p.z)),\n        sphereSD(vec3(p.x, p.y + EPSILON, p.z)) - sphereSD(vec3(p.x, p.y - EPSILON, p.z)),\n        sphereSD(vec3(p.x, p.y, p.z  + EPSILON)) - sphereSD(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 getNormalP(vec3 p) {\n    return normalize(vec3(\n        planeSD(vec3(p.x + EPSILON, p.y, p.z)) - planeSD(vec3(p.x - EPSILON, p.y, p.z)),\n        planeSD(vec3(p.x, p.y + EPSILON, p.z)) - planeSD(vec3(p.x, p.y - EPSILON, p.z)),\n        planeSD(vec3(p.x, p.y, p.z  + EPSILON)) - planeSD(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 frenelS(vec3 Kd, vec3 Ks, float shiness, vec3 p, vec3 eye, vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = getNormalS(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) return vec3(0.0, 0.0, 0.0);\n    if (dotRV < 0.0) return lightIntensity * (Kd * dotLN);\n    return lightIntensity * (Kd * dotLN + Ks * pow(dotRV, shiness));\n}\n\nvec3 frenelP(vec3 Kd, vec3 Ks, float shiness, vec3 p, vec3 eye, vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = getNormalP(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) return vec3(0.0, 0.0, 0.0);\n    if (dotRV < 0.0) return lightIntensity * (Kd * dotLN);\n    return lightIntensity * (Kd * dotLN + Ks * pow(dotRV, shiness));\n}\n\nvec3 refS(vec3 col, float shiness, vec3 p, vec3 eye) {\n    vec3 Kd = col;\n    vec3 Ks = vec3(1.);\n    vec3 color = vec3(0.0);\n    \n    vec3 light1Pos = vec3(4.*sin(iTime), 2., 4.*cos(iTime));\n    vec3 light1Intensity = vec3(1., 1., 1.);\n    \n    color += frenelS(Kd, Ks, shiness, p, eye, light1Pos, light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.4*iTime), 2.*cos(0.4*iTime),2.);\n    vec3 light2Intensity = vec3(1., 1., 1.);\n    \n    color += frenelS(Kd, Ks, shiness, p, eye, light2Pos, light2Intensity);    \n    return color;\n}\n\nvec3 refP(in vec3 col, float shiness, in vec3 p, in vec3 eye) {\n    vec3 Kd = col;\n    vec3 Ks = vec3(1.);\n    vec3 color = vec3(0.0);\n    \n    vec3 light1Pos = vec3(4.*sin(iTime), 2., 4.*cos(iTime));\n    vec3 light1Intensity = vec3(1., 1., 1.);\n    \n    color += frenelP(Kd, Ks, shiness, p, eye, light1Pos, light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.4*iTime), 2.*cos(0.4*iTime),2.);\n    vec3 light2Intensity = vec3(1., 1., 1.);\n    \n    color += frenelP(Kd, Ks, shiness, p, eye, light2Pos, light2Intensity);    \n    return color;\n}\n\nmat4 viewMatrix(vec3 origin, vec3 center, vec3 up) {\n    vec3 f = normalize(center - origin);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1.)\n    );\n}\n\nvec3 Tonemap(in vec3 p){\n    return (p*(2.5*p+0.1))/(p*(2.4*p+0.6)+0.2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 ang = iMouse.xy / iResolution.xy * 3.14;\n\tvec3 viewDir = normalize(vec3(fragCoord - iResolution.xy/2.0, -iResolution.y/0.5));\n    vec3 origin = vec3(6.*cos(ang.x), 6.*cos(ang.y), 6.*sin(ang.x)); //cam\n    \n    mat4 viewToWorld = viewMatrix(origin, vec3(0., 0., 0.), vec3(0., 1., 0.));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.)).xyz; //direction\n    \n    float disttomet = DistanceToPlanet(origin, worldDir, SURF_DIST, MAX_DIST);\n    \n    float disttoplane = DistanceToPlane(origin, worldDir, SURF_DIST, MAX_DIST);\n    \n    vec3 p = vec3(0.,0.,0.);\n    vec3 nml = vec3(0.,0.,0.);\n    vec3 col = vec3(0.,0.,0.);\n    if ( disttoplane > 0. && ( disttoplane < disttomet || disttomet == 0. ) ){\n\t\tp = origin + disttoplane * worldDir;\n        nml = getNormalP(p);\n        col = uv(p, nml, iChannel3);\n    }\n    else if ( disttomet > 0.0 ) {\n\t\tp = origin + disttomet * worldDir;\n        nml = getNormalS(p);\n        col = uv(p, nml, iChannel0);\n    } else {\n        fragColor = texture(iChannel2, viewDir);\n        return;\n    }\n    float shininess = 10.;\n    \n    vec3 color;\n    if ( disttoplane > 0. && ( disttoplane < disttomet || disttomet == 0.) ){\n\t\t color = refP(col, shininess, p, origin);\n    }\n    else if ( disttomet > 0. ) {\n\t\tcolor = refS(col, shininess, p, origin);\n    }\n    fragColor = vec4(Tonemap(color), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}