{
    "Shader": {
        "info": {
            "date": "1377150565",
            "description": "An analytical solver for 2-bone joins. Move the mouse around to see the behavior. More information: [url]https://iquilezles.org/articles/simpleik/[/url]. This solver was used in my Insect shader: [url]https://www.shadertoy.com/view/Mss3zM[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "ldlGR7",
            "likes": 60,
            "name": "IK Solver",
            "published": 3,
            "tags": [
                "2d",
                "ik",
                "solver",
                "analytical"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 13623
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// An analytical IK solver for 2 segments - gven two base and tip white points\n// at which the bones start and end, the red join (yellow) is computed \n// automatically by the solver. You can read the derivation here:\n// https://iquilezles.org/articles/simpleik/\n// A 3D version of this is used in the Insect shader https://www.shadertoy.com/view/Mss3zM\n//\n// Move the mouse to see the behavior of the solver.\n\n\n\n#if 1\n// https://iquilezles.org/articles/simpleik/\nvec2 solve( vec2 p, float r1, float r2 )\n{\n\tvec2 q = p*(0.5+0.5*(r1*r1-r2*r2)/dot(p,p));\n\n\tfloat s = r1*r1/dot(q,q)-1.0;\n\tif( s<0.0 ) return vec2(-100.0); // no solution\n\t\n    return q + vec2(-q.y,q.x)*sqrt(s);\n}\n\n#else\n\n// alternative, single division\nvec2 solve( vec2 p, float r1, float r2 )\n{\n    float h2 = dot(p,p);\n    float w = h2 + r1*r1 - r2*r2;\n    float s = 4.0*r1*r1*h2 - w*w;\n    \n\tif( s<0.0 ) return vec2(-100.0); // no solution\n    \n    return (w*p + vec2(-p.y,p.x)*sqrt(s)) * 0.5/h2;\n}\n#endif\n\n    \n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdSegment( vec2 a, vec2 b, vec2 p )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel setup\n    vec2 uv = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n\tvec2 mo = (2.0*iMouse.xy-iResolution.xy) / iResolution.y;\n\tif( iMouse.z<=0.0001 ) { mo = vec2(0.8+0.3*sin(iTime),0.2+0.2*sin(iTime*1.31)+0.2*sin(iTime*2.11)); }\n\t\n\n    // compute IK\n\tconst float l1 = 0.8;        // length of first segment\n\tconst float l2 = 0.4;        // length of second segment\n\tvec2 a = vec2(0.0,0.0);      // location of base\n\tvec2 c = mo;                 // location of tip\n\tvec2 b = solve( c, l1, l2 ); // compute location of join\n\n\n    // draw background\n\tvec3 col = vec3(0.3)*(1.0-0.2*length(uv));\n\n    // plot circles\n\tcol = mix( col, vec3(0.5,0.5,0.5), 1.0-smoothstep( 0.0, 0.007, abs(length( a - uv )-l1) ) );\n\tcol = mix( col, vec3(0.5,0.5,0.5), 1.0-smoothstep( 0.0, 0.007, abs(length( c - uv )-l2) ) );\n\n    // plot segments and join\n\tif( b.x>-99.0 )\n\t{\n\tfloat f = min( sdSegment( a, b, uv ), sdSegment( b, c, uv ) ) - 0.002;\n\tcol = mix( col, vec3(1.0,1.0,1.0), 1.0-smoothstep( 0.000, 0.005, f ) );\n\tcol = mix( col, vec3(1.0,1.0,0.0), 1.0-smoothstep( 0.035, 0.040, length( b - uv ) ) );\n\t}\n\n    // plot base and tip\n\tcol = mix( col, vec3(1.0,1.0,1.0), 1.0-smoothstep( 0.035, 0.040, length( a - uv ) ) );\n\tcol = mix( col, vec3(1.0,1.0,1.0), 1.0-smoothstep( 0.035, 0.040, length( c - uv ) ) );\n\t\n    // dither to remove banding in the background\n    col += fract(sin(fragCoord.x*vec3(13,17,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}