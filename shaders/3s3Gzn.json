{
    "Shader": {
        "info": {
            "date": "1567569284",
            "description": "Finally I made a shader that I'm proud of. One that looks sort of like I envisioned it.",
            "flags": 0,
            "hasliked": 0,
            "id": "3s3Gzn",
            "likes": 2,
            "name": "Rainbow Swirl",
            "published": 3,
            "tags": [
                "beginner",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "draco_nite",
            "viewed": 467
        },
        "renderpass": [
            {
                "code": "#define t .005 // thickness as % of screen\n\n// Smooth HSV to RGB conversion \n// as made by iq himself\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat clampSinTime(float x)\n{\n    return (sin(iTime + x) + 1.) / 2.;\n}\n\nvec3 rainbow(vec2 uv, float curve)\n{\n    float div = step(curve, uv.x) * 2.;\n    float time = -(iTime - iTime * div) * 2.;\n    time *= 0.1;\n    \n    float hue = 2. * (uv.x - curve - time);\n    \n    if (uv.x > curve) hue = -hue;\n    \n    return vec3(hue, 1., 1.);\n}\n\nvec3 drawLine(vec2 uv, vec3 col, float curve)\n{\n    float dist = 1.025 - 3.5 * abs(curve - uv.x);\n    col.y -= dist;\n    //col += vec3(step(curve, limit + t) * step(limit - t, curve));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float waviness = sin(iTime) * 1.25;\n    float vertSinCurve = (clampSinTime(uv.y * 7.5) * .1) * waviness + .5;\n    \n    vec3 l = rainbow(uv, vertSinCurve);\n    \n    l = drawLine(uv, l, vertSinCurve);\n    l = hsv2rgb_smooth(l);\n   \n    // Output to screen\n    fragColor = vec4(l, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}