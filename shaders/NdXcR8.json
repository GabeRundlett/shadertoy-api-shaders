{
    "Shader": {
        "info": {
            "date": "1641650757",
            "description": "I started trying to make something that looks like a black opal diffraction, but this ended up being cooler. I still want to go back to the black opal idea eventually. ",
            "flags": 32,
            "hasliked": 0,
            "id": "NdXcR8",
            "likes": 34,
            "name": "Hidden Fractures",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "refraction",
                "dispersion",
                "crystal"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 932
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MDIST 10.0\n#define STEPS 128.0\n#define FRAMEMIX 0.85\n//if you have a good PC you can increase this\n#define RAYS 4.0\n#define BOUNCES 8.0\n#define fs(i) (fract(sin((i)*114.514)*1919.810)) //from 0b5vr\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pi 3.1415926535\n#define pmod(p,x) (mod(p,x)-0.5*(x))\n#define flip(a) sign(mod(a,2.0)-0.5)\nfloat sc = 0.5;\n\nvec3 hsv(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n//based on ideas from \n//https://www.shadertoy.com/view/fsVSzw\n//https://www.shadertoy.com/view/MscSDB\n//https://www.shadertoy.com/view/3ddGzn\n#define h13(n) fract((n)*vec3(12.9898,78.233,45.6114)*43758.5453123)\nvec2 vor(vec2 v, vec3 p, vec3 s){\n    p = abs(fract(p-s)-0.5);\n    float a = max(p.x,max(p.y,p.z));\n    float b = min(v.x,a);\n    float c = max(v.x,min(v.y,a));\n    return vec2(b,c);\n}\nfloat vorMap(vec3 p){\n    vec2 v = vec2(5.0);\n    v = vor(v,p,h13(0.96));\n    p.xy*=rot(1.2);\n    v = vor(v,p,h13(0.55));\n    p.yz*=rot(2.);\n    v = vor(v,p,h13(0.718));\n    return v.y-v.x; \n}\n\nvec2 map(vec3 p) {   \n    p.xz*=rot(iTime*0.1);\n    float a = length(p*vec3(1,1.0,1))-1.0;\n    float b = a;\n    b = max(-(b-0.)-(vorMap((p+iTime*0.01)*1.3)+0.1)*0.8,b);\n    vec2 c = vec2(b,1.0);\n    //vec2 d = vec2(a+0.8,2.0);\n    //c = (c.x<d.x)?c:d;\n    //c.x = max(p.z,c.x);\n    \n    return vec2(c.x*sc,c.y);\n}\n\n\n\nvec3 march(vec3 ro, vec3 rd){\n    float s = sign(map(ro).x);\n    float rl = 0.;\n    vec3 p = ro;\n    vec2 d = vec2(0);\n    for(float i =0.; i<STEPS; i++){\n        p = ro+rd*rl;\n        d = map(p);\n        if(s*(d.x)<0.001){break;}\n        if(rl>MDIST){d.y=0.;break;}\n        rl+=d.x*s;\n    }\n    return vec3(rl,d.x,d.y);\n}\n\nvec3 norm(vec3 p, float d){\n    vec2 e = vec2(0.006,0);\n    return normalize( map(p).x-vec3(\n    map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\n\n//idk just a bunch of garbage to make a light cubemap\n//partially based on blackle's fake ibl thing\nfloat lbox(vec3 rd, float size,float scl) {  \n    //return texture(iChannel0,rd).rgb;\n    float a = 0.;\n    vec3 n2 = rd;\n    rd *=scl;\n    rd = pmod(rd,vec3(1.5));\n    vec3 d= abs(rd);\n    a = 1.0-max(d.x,max(d.y,d.z))-size;\n    a*=max(n2.z*n2.y,0.);\n    //a*=max(sign(rd.y),0.);\n    a = clamp(a,0.,1.);\n    a = smoothstep(0.,0.3,a);\n    return a;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 rand =(vec2(fs(iTime),fs(iTime*0.3))-0.5)*0.5;\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0.,4,-4.5);\n   // ro.xz*=rot(-1.6);\n    bool click = iMouse.z>0.;\n    if(click){\n    ro.yz*=rot(1.0*(iMouse.y/iResolution.y-0.5));\n    ro.zx*=rot(-7.0*(iMouse.x/iResolution.x-0.5));\n    }\n    \n    vec3 lk = vec3(0,0.0,0);\n    vec3 f = normalize(lk-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = normalize(f*(2.6)+uv.x*r+uv.y*cross(f,r));\n    vec3 rdo = rd;\n    vec3 roo = ro;\n    vec3 p = ro;\n    \n    //All rays will share the same initial raymarch so it stays outside the loop\n    sc = 0.9;\n    vec3 d = march(ro,rd);\n    p = ro+rd*d.x;\n    vec3 po = p;\n    vec3 n = norm(p,d.y);\n\n    if(d.z==0.||dot(rd,n)>0.0){\n        col = mix(vec3(0.208,0.200,0.302),vec3(0.0),length(uv));\n        fragColor = vec4(col,1.0);\n        return;\n    }\n\n    sc = 0.5;\n    \n    //Dispersion loop is inspired by tdhooper's method\n   // float rays = RAYS;\n   // if(iFrame == 0)rays+=20.0;\n    \n    //Dispersion loop\n    for(float i = 0.; i < RAYS; i++){\n        float wl = (i)/RAYS; \n        wl+=(h21(fragCoord+mod(iTime,60.0)))/RAYS;\n        float ior = 1.2+wl*0.6;\n        vec3 waveCol = pow(abs(hsv(vec3(wl*0.65+fs(floor(iTime*0.2+10.0)*0.2232),1.,1.8))),vec3(1.7));\n        bool skip = false;\n        //Bounce Loop\n        for(float j = 0.; j < BOUNCES; j++){\n            n = norm(p,d.y)*-flip(j);\n            ro = p-n*0.02;\n            vec3 flec = reflect(rd,n);\n            ior = 1.0/ior;\n            vec3 frac = refract(rd,n,ior);\n                              rd = frac;\n            if(frac==vec3(0)) rd = flec;\n            vec3 re = reflect(rd,n);\n            float fres = pow(max((1.-abs(dot(rd, n))), 0.), 5.);\n            col+=pow(smoothstep(0.1,0.2,lbox(re,0.5,1.4)),2.5)*\n            mix(waveCol,vec3(1),0.8)*pow((BOUNCES-j)/BOUNCES,2.0)*0.1;\n            col+=fres*0.3*waveCol;\n            d = march(ro,rd);\n            if(d.z<.5){\n                if(j<.5)skip = true;\n                break;\n            }\n            p = ro+rd*d.x;\n        }\n        if(skip)break;\n        col +=lbox(rd,0.5,1.0)*mix(waveCol,vec3(1),0.3);\n        ro = roo; rd = rdo; p = po;\n    }\n    col*=6./RAYS;\n    col = pow(col,vec3(0.95));\n   // col = smoothstep(0.,1.,col);\n    if(isnan(col.x)); //idk why this is nessecary \n\n    col = clamp(col,(0.),(1.));\n    vec3 buf = texture(iChannel0,fragCoord/iResolution.xy).rgb;\n    float fm = FRAMEMIX*clamp(iTime*60.0,0.0,1.0);\n    if(iMouse.z<0.5)col = mix(col,buf,fm*clamp(0.016/iTimeDelta,0.,1.));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}