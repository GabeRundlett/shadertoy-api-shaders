{
    "Shader": {
        "info": {
            "date": "1565964837",
            "description": "ALL CONDITION GEAR",
            "flags": 0,
            "hasliked": 0,
            "id": "tl2XDD",
            "likes": 2,
            "name": "ACG",
            "published": 3,
            "tags": [
                "nike",
                "raymerching"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 355
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n#define hash(h) fract(sin(h) * 43758.5453123)\n#define PI 3.141592653589793\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    if ( val1.w < val2.w ) {\n        return val1;\n    }\n    return val2;\n}\n\n// This formula is from:https://en.wikipedia.org/wiki/Triangle_wave\nfloat triangleWave(vec3 p) {\n    float val = 0.0;\n    float amp = 1.2;\n    float period =12.0;\n    val = (2.0 * amp /PI) * acos(sin(2.0 * (PI / period) *p.x));\n    val += (2.0 * amp /PI) * asin(cos(2.0 * (PI / period) *p.z));\n    return val;\n}\n\nvec4 map(vec3 p){    \n    vec3 pref = p;\n    vec2 uv = p.xy;\n    p.z += iTime*20.0;\n\tp.y+= triangleWave(p);\n    \n    vec4 f = vec4(vec3(1.2,1.0,0.3),p.y+5.0);\n    p = pref;\n    \n    float a1 = sdCappedCylinder((p+vec3(0.0,-0.9,0.0))*matRotateY(radians(90.0))*matRotateZ(radians(90.0)), 0.8,0.2);\n    float a2 = sdCappedCylinder((p+vec3(0.0,-0.9,0.0))*matRotateY(radians(90.0))*matRotateZ(radians(90.0)), 0.4,0.3);\n    float a3 = sdBox((p+vec3(-0.65,-1.0,0.0)),vec3(0.2,0.7,0.2));\n    float ad = min(max(-a2,a1),a3);\n    \n    float c1 = sdCappedCylinder((p+vec3(0.9,0.7,0.0))*matRotateY(radians(90.0))*matRotateZ(radians(90.0)), 0.8,0.2);\n    float c2 = sdCappedCylinder((p+vec3(0.9,0.7,0.0))*matRotateY(radians(90.0))*matRotateZ(radians(90.0)), 0.4,0.3);\n    float c3 = sdBox((p+vec3(0.2,0.7,0.0)),vec3(0.9,0.2,0.3));\n    float cd = max(-c3,max(-c2,c1));\n    \n\tfloat g1 = sdCappedCylinder((p+vec3(-0.9,0.7,0.0))*matRotateY(radians(90.0))*matRotateZ(radians(90.0)), 0.8,0.2);\n    float g2 = sdCappedCylinder((p+vec3(-0.9,0.7,0.0))*matRotateY(radians(90.0))*matRotateZ(radians(90.0)), 0.4,0.3);\n    float g3 = sdBox((p+vec3(-1.6, 0.25,0.0))*matRotateZ(radians(-45.0)),vec3(0.7,0.25,0.3));\n    float g4 = sdBox((p+vec3(-1.6, 0.7,0.0)),vec3(0.7,0.2,0.3));\n    float g5 = sdBox((p+vec3(-1.37, 0.8,0.0)),vec3(0.3,0.15,0.3));\n    float gd = min(max(-g4,max(-g3,max(-g2,g1))),g5);\n    \n    float chard = min(min(ad,cd),gd);\n    \n    float bg0 = sdTriPrism(p,vec2(3.2,0.1));\n    vec4 bg = vec4(vec3(1.2,0.5,0.6),max(-chard,bg0));\n    \n    return combine(bg,f);\n}\n\nvec3 normalMap(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        map(p + vec3(  d, 0.0, 0.0)).w - map(p + vec3( -d, 0.0, 0.0)).w,\n        map(p + vec3(0.0,   d, 0.0)).w - map(p + vec3(0.0,  -d, 0.0)).w,\n        map(p + vec3(0.0, 0.0,   d)).w - map(p + vec3(0.0, 0.0,  -d)).w\n    ));\n}\n\nfloat shadowMap(vec3 ro, vec3 rd){\n    float h = 0.0;\n    float c = 0.001;\n    float r = 1.0;\n    float shadow = 0.5;\n    for(float t = 0.0; t < 30.0; t++){\n        h = map(ro + rd * c).w;\n        if(h < 0.001){\n            return shadow;\n        }\n        r = min(r, h * 16.0 / c);\n        c += h;\n    }\n    return 1.0 - shadow + r * shadow;\n}\n\n// from simon green and others\nfloat ambientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 4;\n    const float delta = 0.15;\n\n    float a = 0.0;\n    float weight = 4.;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - map(p + n*d).w);\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n    vec3 cw = normalize(ta-ro);\n    vec3 cp = vec3(sin(cr), cos(cr),0.0);\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 uv = p;\n    \n    float time = iTime*2.0;\n    \n    vec3 ro = vec3( 3.5*cos(0.1*time + 6.0), 0.0, -0.5+5.5*sin(0.1*time + 6.0) );\n    vec3 ta = vec3( 0.0, -0.4, -0.7 );\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    float zoom = 1.5;\n    vec3 rd = ca * normalize( vec3(p.xy,zoom) );\n    \n    float t, dist;\n    float lastDistEval = 1e10;\n    float edge = 0.0;\n    t = 0.0;\n    vec3 distPos = ro+rd;\n    vec4 distCl = vec4(0.0);\n    for(int i = 0; i < 64; i++){\n        distCl = map(distPos);\n        dist = distCl.w;\n        t += dist;\n        distPos = ro+rd*t;\n        \n        if (dist < lastDistEval) lastDistEval = dist;\n        if(dist < 0.01 || dist > 60.0) break;\n    }\n\n    vec3 color;\n    float shadow = 1.0;\n    if(dist < 1.0){\n        // lighting\n        vec3 lightDir = vec3(0.0, 1.0, 0.0);\n        vec3 light = normalize(lightDir + vec3(0.5, 0.0, 0.9));\n        vec3 normal = normalMap(distPos);\n\n        // difuse color\n        float diffuse = clamp(dot(light, normal), 0.5, 1.0);\n        float lambert = max(.0, dot( normal, light));\n        \n        // ambient occlusion\n        float ao = ambientOcclusion(distPos,normal);\n        \n        // shadow\n        shadow = shadowMap(distPos + normal * 0.001, light);\n\n        // result\n        color += vec3(lambert);\n        color = ao*diffuse*(distCl.xyz+(.1-length(p.xy)/3.))*vec3(1.0, 1.0, 1.0);\n        \n    }else{\n        color =.84*max(mix(vec3(0.6,0.6,0.6)+(.1-length(p.xy)/3.),vec3(1),.1),0.);\n    }\n\n    // rendering result\n    float brightness = 1.5;\n    vec3 dst = (color * max(0.8, shadow))*brightness;\n    \n    fragColor = vec4(dst, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}