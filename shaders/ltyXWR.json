{
    "Shader": {
        "info": {
            "date": "1483799585",
            "description": "( not sure how to be smarter with the near-plane )",
            "flags": 0,
            "hasliked": 0,
            "id": "ltyXWR",
            "likes": 14,
            "name": "crowded chains",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "spheremarching"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 943
        },
        "renderpass": [
            {
                "code": "// using the base ray-marcher of Trisomie21: https://www.shadertoy.com/view/4tfGRB#\n\n#define r(v,t) { float a = (t)*T, c=cos(a),s=sin(a); v*=mat2(c,s,-s,c); }\n\n\nvoid mainImage( out vec4 f, vec2 w ) {\n    float T = iTime+20., \n        closest = 999.;\n    vec4 p = vec4(w,0,1)/iResolution.yyxy-.5, d,c; p.x-=.4; // init ray \n    r(p.xz,.13); r(p.yz,.2); r(p.xy,.1);         // camera rotations\n    d = p;                                       // ray dir = ray0-vec3(0) \n    d = normalize(p);                            \n  //p = -normalize(p); p *= 2.2/sqrt(1.-p.z*p.z/dot(p.xyz,p.xyz)); // sin(acos(x)) = sqrt(1-x*x) // camera in free space\n  //p.z -= 2.*T;\n    p -= 6.*d;                                   // near-plane\n  //p.xy -= 2.;                                  // camera in free space\n    \n    f -= f;\n   \n    for (float i=1.; i>0.; i-=.01)  {\n        \n        vec4 u=floor(p/18.+3.5), t = p, ta,v;\n        c = p/p*1.2;\n\n\t    float x=1e9,x1=1e9;\n\n#define mod4(t)         ( mod(t+2.,4.)-2. )\n#define setbox(t,h,w,d)  abs(t)/vec4(h,w,d,1)\n#define dbox(t,r)       ( max(t.x,max(t.y,t.z)) -(r) )\n#define dsphere(t,r)    ( length((t).xyz) -(r) )\n#define dcyl(t,r)       ( length((t).xy) -(r) )\n#define union(a,b)       min(a,b)\n#define sub(a,b)         max(a,-(b))\n        \n        ta.xy = floor((t.xy+2.)/4.),                      // chains displacement\n        t.z -= 2.*T*sign( mod(ta.x+ta.y,2.) -.5 ) ;\n\n        // --- base '+' cross section\n        ta = setbox(mod4(t),1,3,16); x =          dcyl(ta,.5);  \n        ta = setbox(mod4(t),3,1,16); x = union(x, dcyl(ta,.5) ); // ( try dbox or dcyl )\n        \n        // --- woodcut-like strategy to make a chain : progressive carving\n        \n        // NB: it's easier to use setbox(3size), dbox(.5),\n        //     but it's more stable doing setbox(3proportion>=1), dbox(r)\n        //ta = setbox(mod4(t+vec4( 0,0,2,0)), 3,1,.5);x = sub(x,  dbox(ta,.55) );\n        ta = setbox(mod4(t+vec4( 0,0,2,0)), 6,2,1);x = sub(x,  dbox(ta,.27) );\n        ta = setbox(mod4(t-vec4(.8,0,0,0)),.6,3,2); x = sub(x,  dbox(ta,.5) );\n        ta = setbox(mod4(t+vec4(.8,0,0,0)),.6,3,2); x = sub(x,  dbox(ta,.5) );\n        \n        //ta = setbox(mod4(t               ),2,6,1); x = sub(x,  dbox(ta,.27) );\n        ta = setbox(mod4(t               ),1,3,.5); x = sub(x,  dbox(ta,.55) );\n        ta = setbox(mod4(t-vec4(0,.8,2,0)),3,.6,2); x = sub(x,  dbox(ta,.5) );\n        ta = setbox(mod4(t+vec4(0,.8,2,0)),3,.6,2); x = sub(x,  dbox(ta,.5) );\n        \n        //ta = setbox(mod4(t-vec4( 0,0,1,0)),2,2,.2); x = sub(x,  dbox(ta,.55) );\n        //ta = setbox(mod4(t+vec4( 0,0,1,0)),2,2,.2); x = sub(x,  dbox(ta,.55) );\n        ta = setbox(mod4(t-vec4( 0,0,1,0)),10,10,1); x = sub(x,  dbox(ta,.12) );\n        ta = setbox(mod4(t+vec4( 0,0,1,0)),10,10,1); x = sub(x,  dbox(ta,.12) );\n       \n\n        x1 = dsphere(mod4(t),.3);          // red spheres\n        closest = min(closest, x1);        // glow footprint\n        // x = min(x1,x);                  // uncomment to display the spheres\n        if (x==x1) c  = vec4(2.,.3,0,0);\n        // if (cos(.25*T)>0.) c += vec4(2.,.3,0,0)*pow(abs((x-x1)),.2)*(.5+.5*cos(.5*T));  // glow1: thanks squid !\n\n        if (x<-.01) c = vec4(.9);          // near-plane cut parts\n        \n        \n        if(x<.01)                          // hit !\n            { f = i*i*c; break;  }         // color texture + black fog \n        \n        p -= d*x*.7;                       // march ray\n     }\n\n     f += vec4(1,0,0,0) * exp(-closest)*(.5+.5*cos(.5*T)); // glow2 - thanks kuvkar ! \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}