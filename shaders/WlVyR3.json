{
    "Shader": {
        "info": {
            "date": "1611437157",
            "description": "Ray intersector for a 2D parabola.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlVyR3",
            "likes": 4,
            "name": "Ray-Parabola Intersection (2D)",
            "published": 3,
            "tags": [
                "2d",
                "raytracing",
                "ray",
                "quadratic",
                "intersect",
                "parabola"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 154
        },
        "renderpass": [
            {
                "code": "vec3 IntersectParabola2D(in vec2 ro, in vec2 rd, in float a, in float b, in float c) {\n    float ra = a * rd.x * rd.x;\n    float rb = 2.0 * a * ro.x * rd.x + b * rd.x - rd.y;\n    float rc = a * ro.x * ro.x + b * ro.x + c - ro.y;\n\n    vec3 intersect = vec3(0.0);\n\n    // If the discriminant is less than zero there are no (real) roots\n    float discr = rb * rb - 4.0 * ra * rc;\n    if (discr > 0.0) {\n        float root = sqrt(discr);\n        float denom = 2.0 * ra;\n        float t1 =  (root - rb) / denom; // 1st root\n        float t2 = -(rb + root) / denom; // 2nd root\n        intersect = vec3(t1, t2, 1.0);\n    }\n\n    return intersect;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    float time = iTime * 0.25;\n    vec3 color = vec3(0.0);\n\n    float a = sin(time);\n    float b = cos(time);\n    float c = sin(time * 2.0);\n\n    // Draw the parabola\n    float g = 2.0 * a * uv.x + b; // Derivative for DE\n    float f = a * uv.x * uv.x + b * uv.x + c;\n    color += smoothstep(unit, 0.0, abs(uv.y - f) / sqrt(1.0 + g * g));\n\n    // Ray origin (ro) and ray direction (rd)\n    vec2 ro = vec2(cos(time * 0.75) * 2.0, sin(time * 1.5));\n    vec2 rd = sin(sin(time * 0.25) * 3.14 + vec2(1.57, 0.0));\n\n    // Draw the ray\n    color += smoothstep(unit, 0.0, length(uv - ro) - 0.1);\n    color += smoothstep(unit, 0.0, abs(dot(uv - ro, rd.yx * vec2(-1.0, 1.0))));\n\n    // Draw the intersections:\n    vec3 intersect = IntersectParabola2D(ro, rd, a, b, c);\n    if (intersect.z > 0.5) {\n        color += smoothstep(unit, 0.0, length(uv - ro - rd * intersect.x) - 0.05);\n        color += smoothstep(unit, 0.0, length(uv - ro - rd * intersect.y) - 0.05);\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}