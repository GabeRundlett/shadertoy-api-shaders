{
    "Shader": {
        "info": {
            "date": "1570977767",
            "description": "An ordered geometric grid pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wdd3DX",
            "likes": 25,
            "name": "Geometric Grid Pattern",
            "published": 3,
            "tags": [
                "2d",
                "grid",
                "box",
                "geometry",
                "pattern",
                "cell",
                "art"
            ],
            "usePreview": 1,
            "username": "Shane",
            "viewed": 1858
        },
        "renderpass": [
            {
                "code": "/*\n\t\n\tGeometric Grid Pattern\n\t----------------------\n\n\tI have a lot of grid pattern examples lying around. They're not exactly cutting edge, \n    but I find them quick to construct and visually interesting, which makes them suitable \n    texture add-ins for 3D scenes, or to provide the basis for the geometry itself.\n\n  \tI see patterns that follow this particular rectangular strip concept all the time, but \n    usually in the form of randomly rotated cell segments. This version consists of 4 by 4 \n    cell blocks that have been rotated in a specific predetermined order, in accordance with \n    array pattern entries. I'd imagine people could code this up without too much hassle, \n    and probably in more efficient ways, but for anyone interested, the workings and \n    explanation are below. I've kept the code reasonably short.\n\n\n\tOther Examples:\n\n    // Using simple square geometry to great effect.\n\tTruchet variation - XT95\n    https://www.shadertoy.com/view/llfBWB\n\n    // Flyguy has a lot of clean but interestig exapmles.\n\tMaterial Design Pattern  - FlyGuy\n\thttps://www.shadertoy.com/view/XsySWc\n\n\t// Clever.\n    Escher-like tiling (255 chars) - FabriceNeyret2  \n    https://www.shadertoy.com/view/4dVGzd\n\n*/\n\n\n// Standard 2D rotation formula.\nmat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n\n// This renders a horizontal or vertical box-line from point \"a\" to point \"b,\" with a line \n// width of \"w.\" It's different to the the usual line formula because it doesn't render the \n// rounded caps on the end -- Sometimes, you don't want those. It utilizes IQ's box formula \n// and was put together in a hurry, so I'd imagine there are more efficient ways to do the \n// same, but it gets the job done. I put together a more generalized angular line formula as \n// well.\nfloat lBoxHV(vec2 p, vec2 a, vec2 b, float w){\n    \n   vec2 l = abs(b - a); // Box-line length.\n   p -= vec2(mix(a.x, b.x, .5), mix(a.y, b.y, .5)); // Positioning the box center.\n   \n   // Applying the above to IQ's box distance formula.\n   vec2 d = abs(p) - (l + w)/2.; \n   return min(max(d.x, d.y), 0.) + length(max(d, 0.));\n}\n\n\n// Number of bar lines. As you can see from the imagery, there are five. Different numbers are\n// interesting, but numbers in this range obviously visualize better.\n#define N 5\nconst float Nf = float(N);\n\nvec3 distField(vec2 p){\n    \n    vec2 ip = floor(p); // Cell ID.\n    p -= ip + .5; // Centered local coordinates.\n   \n    // A lot of grid patterns are formed by rendering specific patterns in cells, then\n    // randomly rotating them -- Truchets are a good example. Others can be formed by rotating\n    // patterns according to a simple formula, like rotating alternate checkered cells. Others, \n    // however, need to be rotated according to specific sequence that might not be as easy to\n    // define with a simple formula, in which case it makes more sense to simply hardcode them,\n    // so that's what is happening here. Each 4x4 cell block is rotated according to the 4x4\n    // cell block sequence below.\n    // \n    // In this case, you could use a mat4, if you wanted, but the following is a little more \n    // readable, and can be extended to include any \"N x M\" arrangement.\n    float ad[16] = float[16](3., 0., 1., 0.,\n                             0., 3., 0., 1.,\n                             3., 2., 1., 2.,\n                             2., 3., 2., 1.);\n    \n    // Rotate the local grid coordinates according to the 4x4 sequence above. For instance, the\n    // second cell on the third row has a value of \"2,\" which results in 2 90-degree rotations.\n    // The cell to the right of it has a value of \"1,\" so will result in 1 90-degree rotation.\n    int index = int(floor(mod(ip.x, 4.) + mod(4. - ip.y, 4.)*4.));\n    float cID = ad[index];\n    \n    // Rotate the cell by multiples of 90 degrees, according to the 4x4 cell block array above.\n    p = rot2(cID*3.14159/2.)*p;\n     \n    // Line width, cell object (box-line) ID, and box-line distance value.\n    float w = 1./Nf, bID = -1., d = 1e5;\n    \n    // Render a series of bar-graph vertical lines that shorten with increasing X-value across\n    // the cell, then fill in the rest of the space with the equivalent horizontal lines. Refer to \n    // the imagery to get a better idea. By the way, I've been doing this for years, and nothing \n    // below require math skills beyond grade school, yet I never get it right the first time. Sigh. :)\n    for(int i = 0; i<N; i++){\n        \n        float fi = float(i);\n        \n        // Vertical and horizontal bar-graph like boxs of width \"w.\" \n        float vBox = lBoxHV(p, vec2(-.5 + w/2. + fi*w, -.5 + w/2.), vec2(-.5 + w/2. + fi*w, .5 - w/2. - fi*w), w);\n        float hBox = lBoxHV(p, vec2(-.5 + w/2. + (fi + 1.)*w, .5 - w/2. - fi*w), vec2(.5 - w/2., .5 - w/2. - fi*w), w);\n       \n        // Give the individual vertical and horizontal boxes their own unique ID (not to be confused\n        // with the overall individual cell ID). These will be used later to shade and color the \n        // box lines. Again, refer to the imagery.\n        if(vBox<d){ d = vBox; bID = fi; }\n        if(hBox<d && i<N - 1){ d = hBox; bID = fi + Nf; }\n         \n    } \n     \n    // Return the object distance, cell ID and individual cell object ID.\n    return vec3(d, cID, bID);\n    \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    // Aspect correct screen coordinates.\n    float iRes = min(iResolution.y, 800.);\n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iRes;\n    \n    // Scaling and translation.\n    float gSc = 6.;\n    // Depending on perspective; Moving the oject toward the bottom left, \n    // or the camera in the north east (top right) direction. \n    vec2 p = uv*gSc - vec2(-.5, -.25)*iTime;\n    \n    // Smoothing factor -- based on the resolution and global scaling factor.\n    float sf = gSc/iRes;\n\n\n    // The distance field. It returns the block \n    vec3 d = distField(p);\n    \n    // Record the individual cell ID and the ID of the individual object \n    // within the cell.\n    float cID = d.y;\n    float bID = d.z;\n    \n    \n    // Shade and color the cell contents, according to the cell object ID.\n    //\n    // Shade: Outer horizontal and vertical bars are lighter.\n    float idSh = (Nf - 1. - mod(bID, Nf))/(Nf - 1.); \n    // Color, which is reliant on shade, meaning uter horizontal and vertical bars will\n    // have lighter palette (a fiery variation) colors.\n    vec3 dCol = pow(min(vec3(1.35, 1.02, 1)*mix(.3, .925, idSh), 1.), vec3(1, 2.25, 8.));\n    \n    // A blue-flame shaded complimentary color to the above.\n    vec3 shCol = mix(dCol, dCol.zyx, .9); // Mixing in just a touch of the original color\n\n    // Use the cell ID and cell object ID to apply the blue shaded color.\n    //\n    // Top left, X, sans frame.\n    if(bID>.5 && bID<(Nf - .5) && mod(cID, 4.)==2.) dCol = shCol;\n    // Top right, X and Y, sans frame.\n    if(bID!=0. && bID!=Nf && mod(cID, 4.)==3.) dCol = shCol;\n    // Bottom right, Y, sans frame.\n    if(bID>(Nf + .5) && mod(cID, 0.)==0.) dCol = shCol;\n    \n    \n    /*\n    // The palette color provides the depth, but you can apply extra depth, if desired.\n    vec2 q = rot2(svID*3.14159/2.)*p;\n    q = fract(q) - .5;\n    float lDist = max(1. - length(q - vec2(-.5, .5).yx), 0.);\n    float sh = 1./(1. + lDist*lDist*4.);\n    dCol = min(dCol*sh*1.25, 1.);\n    */\n    \n    \n    // Render the cell contents: I.e. The individually colored and shaded bar-graph lines. The \n    // \"sqrt(450./iRes)\" term is just a hack to give the dark lines around the borders some \n    // consistency with resolution changes. Catering to canvas size changes is almost futile. :)\n    vec3 col = mix(vec3(0), dCol, 1. - smoothstep(0., sf, d.x + .02*sqrt(450./iRes)));// + .42/(Nf + 1.)\n \n    // Run a bit of a texturized layer over the top. Comment it out, if you prefer\n    // a cleaner version.\n    vec3 tx = texture(iChannel0, p/gSc*2.).xyz; tx *= tx;\n    tx = min(smoothstep(-.1, .3, tx)*1.1, 1.);\n    col *= tx;\n    \n\n    // Apply some subtle line overlays.\n    vec2 pt = rot2(6.2831/3.)*p;\n    float pat2 = clamp(cos(pt.x*6.2831*28.*iRes/450.)*2. + 1.5, 0., 1.);\n    col *= pat2*.4 + .7;\n    \n    \n    // Applying a subtle silhouette, for art's sake.\n\tuv = fragCoord/iResolution.xy;\n    col *= pow(16.*(1. - uv.x)*(1. - uv.y)*uv.x*uv.y, 1./16.); \n\n    \n    // Rough gamma correction, then output to the screen..\n    fragColor = vec4(sqrt(max(col, 0.)), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}