{
    "Shader": {
        "info": {
            "date": "1724706313",
            "description": "oscilloscope wave beam",
            "flags": 32,
            "hasliked": 0,
            "id": "lfBBzW",
            "likes": 4,
            "name": "oscillograph beam",
            "published": 3,
            "tags": [
                "wave",
                "glow"
            ],
            "usePreview": 0,
            "username": "orblivius",
            "viewed": 61
        },
        "renderpass": [
            {
                "code": "// Free use as you wish by 0rblivius\n// Moire dots from: https://www.shadertoy.com/view/lfBfR1\n\n\n#define PI 3.1415926\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\nmat2 rotate(float d)\n{\n    float c = cos(d);\n    float s = sin(d);\n    return  mat2(c, -s, s, c);\n}\nvec4 getPixelMult(vec2 fc){\n    // Output to screen\n    vec4 o = vec4(vec3(0.),1.0);\n    if(mod(fc.y,18.) >= 9.){\n        fc.x += 4.5;}\n    if(mod(fc.x,3.) < 1.){\n        o = vec4(vec3(0.),1.0);\n    }\n    else if(mod(fc.y,9.) < 1.){\n        o = vec4(vec3(0.),1.0);\n    }\n    else if(mod(fc.x,9.) < 3.){\n        o = vec4(3.,0.,0.,1.0);\n    }\n    else if(mod(fc.x,9.) < 6.){\n        o = vec4(0.,3.,0.,1.0);\n    }\n    else{\n        o = vec4(0.,0.,3.,1.0);\n    }\n    return o;\n\n}\nvec4 getPM2(vec2 fc){\n    return (getPixelMult(fc)*4.+getPixelMult(fc+vec2(1.,0.))+getPixelMult(fc+vec2(-1.,0.))+getPixelMult(fc+vec2(0.,1.))+getPixelMult(fc+vec2(0.,-1.)))/8.;\n}\nvec4 getPM3(vec2 fc){\n    return (getPM2(fc)*4.+getPM2(fc+vec2(2.,0.))+getPM2(fc+vec2(-2.,0.))+getPM2(fc+vec2(0.,2.))+getPM2(fc+vec2(0.,-2.)))/8.;\n}\nvec4 colorFromDir(vec3 dir){\n\n    dir *= 1./dir.z;\n    dir.y -= 0.3;\n    vec2 uv = dir.xy;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    return vec4(texture(iChannel0,dir.xy*.75+vec2(.125,.375)).rgb,1.0)*getPM3(dir.xy*1536.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dir = normalize(vec3(fragCoord.xy / iResolution.xy, 1.));\n  \n    vec3 dir2;\n    vec4 ret = vec4(0);\n    for(float i = 0.; i < 16.; i++) {\n        dir2 = dir;\n        dir2.xz *= rotate(PI/4096.*(mod(i,5.)-2.));\n        dir2.yz *= rotate(PI/4096.*(floor(i/5.)-2.));\n        ret += colorFromDir(dir2);\n    }\n    fragColor = ret/16.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define NL 10.\n\nfloat fbm(float i, vec2 p)\n{\n    return 3.*texture(iChannel0, vec2(p.x*.25*i/NL+NL*.5/i,1.)).r;\n\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = ( fragCoord.xy / iResolution.xy ) * 2. - 2.5 ;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 finalColor = vec3(0);\n    for(int i=1; i < int(NL); i++) {\n        float t = abs(2.8 / ((uv.y + fbm(float(i), uv))*200.));\n       vec3 v =  pow(t * vec3( float(i)/NL, 0.3, .5 * float(i*i)/NL ),vec3(1.2));\n        finalColor += v;\n    }\n    fragColor = vec4( finalColor, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}