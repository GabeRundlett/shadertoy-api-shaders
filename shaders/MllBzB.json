{
    "Shader": {
        "info": {
            "date": "1512394050",
            "description": "Simple Checkerboard Reconstruction shader. My first shader in Shader Toy.\n\nPress R to toggle between Checkerboard Reconstruction & Checkerboard Image without reconstruction.",
            "flags": 16,
            "hasliked": 0,
            "id": "MllBzB",
            "likes": 2,
            "name": "Checkerboard Reconstruction",
            "published": 3,
            "tags": [
                "checkerboard"
            ],
            "usePreview": 0,
            "username": "BlueSkyDefender",
            "viewed": 680
        },
        "renderpass": [
            {
                "code": "//If you like divide iResolution.xy by 4.\n//define division will give you a way better idea of what going on.\n\n#define division 1.0\n\n#define Adjust 0.5625\n\nconst int KEY_R  = 82;\n\nvec4 CBImage(vec2 fragCoord )\n{   \n\t//Checkerboard Image lets remove half the information.\n\tfloat gridy = floor(fragCoord.y*(iResolution.y/division)); //Native if no division\n\tfloat gridx = floor(fragCoord.x*(iResolution.x/division)); //Native if no division\n\n    bvec2 BC = lessThan(vec2(int(gridy+gridx) & 1,int(gridy+gridx) & 1), vec2(0.5,0.5)); \n      \n    return BC.x ? vec4(0,0,0,0) : texture(iChannel0,fragCoord);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 pix = 1.0/(iResolution.xy/division);\n    pix *= Adjust;//Adjustment for a sharper image.\n    vec2 texCoord = fragCoord.xy/iResolution.xy;\n   \n   //Basic Bilinear Filter for reconstruction\n   vec2 fracInfo = texCoord * (iResolution.xy/division);\n\n   vec4 tl = CBImage(texCoord);\n   vec4 tr = CBImage(texCoord + vec2( pix.x, 0.0  ));\n   vec4 bl = CBImage(texCoord + vec2( 0.0  , pix.y));\n   vec4 br = CBImage(texCoord + vec2( pix.x, pix.y));\n    \n    \n   vec2 f = fract( fracInfo );//In my shader on ReShade I use set this to f = 0.5f; \n    \n   vec4 tA = mix( tl, tr, f.x );\n   vec4 tB = mix( bl, br, f.x );\n   vec4 CBdone = mix( tA, tB, f.y );\n    \n    \n    vec4 done = vec4(CBdone.rgb,tl.a) * 2.0;//2.0 Gamma correction.\n    \n    //R Key Toggle\n    float Key = texelFetch( iChannel3, ivec2(KEY_R,2),0 ).x;\n    \n    if(Key > 0.5) \n    {\n \t\tdone = tl;\n\t}\n \n    \n  \tfragColor = done;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}