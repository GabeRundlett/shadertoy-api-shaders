{
    "Shader": {
        "info": {
            "date": "1612368826",
            "description": "Smooth transition between Euclidean, Hyperbolic and Spherical geometry.\n\nMouse moves centre point (with an isometry in the appropriate geometry).",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt3fz8",
            "likes": 12,
            "name": "Geometry Warp",
            "published": 3,
            "tags": [
                "geometry",
                "spherical",
                "hyperbolic"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 409
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Geometry Warp, Matthew Arcus, mla, 2021\n//\n// Smooth transition between Euclidean,  Hyperbolic and Spherical geometry.\n//\n// Mouse moves centre point (with an isometry in the appropriate geometry). \n//\n// Uses hyperboloid model for hyperbolic geometry.\n// \n// k controls the geometry - use a sphere or hyperboloid of radius 1/sqrt(|k|),\n// with inner product x^2+y^2+sign(k)*z^2. For k = 0 (the Euclidean case),\n// the radius is infinite and we use some asymptotic approximations.\n// \n////////////////////////////////////////////////////////////////////////////////\n\n// Stereographic projection from (0,0,-R) to z = 0, where R^2 = |1/k|\nvec3 project(vec2 p, float k) {\n  float t = 2.0/(1.0+k*dot(p,p));\n  return vec3(t*p,(t-1.0)/sqrt(abs(k)));\n}\n\n// Inner product\nfloat kdot(vec3 p, vec3 q, float k) {\n  return dot(p*vec3(1,1,sign(k)),q);\n}\n\nvec3 diagram(vec2 p2, vec2 q2) {\n  p2 = rotate(p2,iTime);\n  q2 = rotate(q2,iTime);\n  float k = -sin(0.5*iTime);\n  float R = 1.0/sqrt(abs(k)); // Sphere or hyperboloid radius\n  vec3 p = project(p2,k);\n  vec3 q = project(q2,k); // Mouse position\n  vec3 r = vec3(0,0,R);\n  vec3 n = q+r; // This reflects q to -r & then flipping z coord takes us to N. pole\n  p -= k == 0.0 ? n : 2.0*kdot(p,n,k)/kdot(n,n,k)*n; // Asymptotic value for k = 0\n  p.z = -p.z;\n  float s = length(p.xy);\n  // Calculate distance from centre\n  // For small x, atanh(x) = atan(x) = x and for small k, p.z = R\n  float d = abs(k) < 1e-4 ? s : R*(k < 0.0 ? atanh(s/p.z) : atan(s/abs(p.z)));\n  vec2 uv = vec2(16.0*d,12.0*atan(p.y,p.x));\n  uv /= 2.0*PI;\n  vec2 index = floor(uv);\n  uv -= index;\n  uv *= 2.0*PI;\n  vec3 col = h2rgb(fhash(index));\n  col *= (0.5-0.5*cos(uv.x))*(0.5-0.5*cos(uv.y));\n  if (k < 0.0) {\n    col = mix(vec3(0),col,smoothstep(0.0,0.05,R-length(p2)));\n    col = mix(vec3(0.2),col,smoothstep(-0.01,0.0,R-length(p2)));\n  }\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec2 q = vec2(-0.75,-0.25);\n  if (iMouse.x > 0.0) q = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n  vec3 col = diagram(p,q);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n\nfloat PI = 3.14159;\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat fhash(vec2 index) {\n  uint h = ihash(uint(int(index.x))^ihash(uint(int(index.y))));\n  return float(h)/exp2(32.0);\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  //rgb *= rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return rgb;\n}\n\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}