{
    "Shader": {
        "info": {
            "date": "1717291617",
            "description": "truncated octahedrons inside the sierpinski gasket when the scale factor is 1.05 instead of 2\nf-e+v: 14-36+24",
            "flags": 32,
            "hasliked": 0,
            "id": "l3dGRX",
            "likes": 5,
            "name": "14-36+24",
            "published": 3,
            "tags": [
                "sierpinksi",
                "fwidth"
            ],
            "usePreview": 0,
            "username": "pb",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "//philip,bertani@gmail.com\n//Buffer A is where it is at\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    //distance the ray travelled was saved in alpha channel\n    float maxDist = texture(iChannel0,uv).a;\n    \n    vec2 texel = 1./iResolution.xy;\n    vec4 total_color;\n    for (int i=0;i<5;i++){\n        float fi = float(i)-2.;\n        for (int j=0;j<5;j++){ \n            float fj = float(j)-2.;\n            vec4 color = texture(iChannel0, \n                uv + vec2( texel.x*fi,texel.y*fj )  );\n            total_color += color * gk1s[i*5 + j];\n        }\n    }\n     \n    fragColor = fwidth(total_color*total_color*6e5)*exp(-maxDist*maxDist*2.) ;\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n//gaussian_kernel_one_stdev\nfloat[] gk1s = float[] (\n        0.003765,0.015019,0.023792,0.015019,0.003765,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.023792,0.094907,0.150342,0.094907,0.023792,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.003765,0.015019,0.023792,0.015019,0.003765 );\n        \n        \n        \n//hard coding the vertices for a tetrahedron\nconst float gmh=(sqrt(5.)+1.)/2.;\nconst float gmi=1./gmh;\n\nvec3[] d4 = vec3[]  (\nvec3(1.,1.,1.),\nvec3(1.,-1.,-1.),\nvec3(-1.,-1,1.),\nvec3(-1.,1,-1.)\n\n);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvec3 ifs_color, ro;\nfloat ifs_scale = 1.05; //you really should play with this\nfloat maxDist;\n\nmat2 rot(float a) {return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\nfloat de(vec3 z) {\n    \n    z.xz *= rot(iTime/11.);\n    z.yz *=  rot(iTime/7.);\n    \n    vec3 min_vtx;\n    vec3 orig_z = z;\n    int n=0;\n    float min_dist,dist_to_vtx;\n\n\n    ifs_color = vec3(0.);\n\n    for (int i=0; i<25; i++) {\n       \n        min_vtx = d4[0];\n        min_dist=length(z-d4[0]);\n        for (int j=1; j<4; j++) {\n        \n            dist_to_vtx=length(z-d4[j]); \n            if (dist_to_vtx<min_dist) {min_vtx=d4[j]; min_dist=dist_to_vtx;}\n            \n        }\n        \n        z = min_vtx + ifs_scale*(z-min_vtx);\n        \n        n++;\n\n        \n        if ( z.x * z.y > 0. ) ifs_color.x += cos(iTime/3.)*cos(iTime/3.);\n        if ( z.y * z.z > 0. ) ifs_color.y += cos(iTime/5.+1.)*cos(iTime/5.+1.);\n        if ( z.z * z.x > 0. ) ifs_color.z += cos(iTime/7.+2.)*cos(iTime/7.+2.);\n\n    }\n\n    ifs_color /= float(n);\n\n    float dz = pow(ifs_scale, float(n) );\n    //dz is simply the constant Scale factor to the power of number of times used\n\n    float scene_dist = length(z) / dz;  \n    \n    return scene_dist;\n}\n\n\nfloat march(vec3 ro, vec3 rd, float mx) {\n    float t = 0.0;\n  \n    float eps = 2e-5, distfac=60.;\n    float hitThreshold = eps;\n    for(int i = 0; i < 60; i++) {\n        float d = de(ro + rd*t);\n        if ( (d < hitThreshold && t>.2) || t >= mx) break;\n        t += d;\n        hitThreshold = eps*(1.+distfac);\n     \n    }\n    return t;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    float t = march(ro, rd, 1.);\n    maxDist = t;\n    \n    \n    return  cos(ifs_color)*cos(ifs_color) * exp(-t*t/2.) ;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p  = (2.*fragCoord.xy-iResolution.xy)/iResolution.y*2.;\n    \n    ro = vec3(0,0,-.9+abs(sin(iTime/7.)));\n    vec3 rd = normalize( vec3(p,2.) );  \n\n    vec3 col = render(ro, rd);\n    col = 1. - exp(-col);\n    fragColor = vec4( pow(col,vec3(12.)), maxDist);\n    \n\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}