{
    "Shader": {
        "info": {
            "date": "1609363207",
            "description": "Messing with point lights turned into this?!?",
            "flags": 0,
            "hasliked": 0,
            "id": "WttczS",
            "likes": 3,
            "name": "Test Turned Demo?!?",
            "published": 3,
            "tags": [
                "glow",
                "neon",
                "cool",
                "happyaccident"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "struct Light {\n    vec3 pos; // Position of the light\n    vec3 col; // Color of the light\n};\n\nmat2 Rotate(in float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat noise(in float x) {\n    return fract(sin(x * 12.5673) * 573.123);\n}\n\nfloat snoise(in float x) {\n    float r = 2.735;\n\n    float y1 = noise(floor(x / r) * r);\n    float y2 = noise(ceil(x / r) * r);\n    float i = fract(x / r);\n    i *= i * (3.0 - 2.0 * i);\n\n    return mix(y1, y2, i);\n}\n\nfloat mapScene(in vec3 p) {\n    p.xz = mod(p.xz - 2.0, 4.0) - 2.0;\n    p.yz *= Rotate(-60.0);\n    p.xz *= Rotate(iTime);\n\n    vec3 q1 = abs(p) - 1.2;\n    float box = max(q1.x, max(q1.y, q1.z));\n\n    vec2 q2 = abs(p.xy) - 0.8;\n    vec2 q3 = abs(p.xz) - 0.8;\n    vec2 q4 = abs(p.yz) - 0.8;\n\n    float tube1 = max(q2.x, q2.y);\n    float tube2 = max(q3.x, q3.y);\n    float tube3 = max(q4.x, q4.y);\n\n    float sphere = length(p) - 2.0;\n\n    float scene = max(mix(box, sphere, 0.5), -mix(min(tube1, min(tube2, tube3)), sphere, 0.5)) - 0.1;\n    return scene * 0.6;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    float t1 = 0.5 * iTime;\n    float t3 = 1.5 * iTime;\n\n    float c1 = cos(t1) * 2.0, s1 = sin(t1) * 2.0;\n    float c2 = cos(iTime) * 2.0, s2 = sin(iTime) * 2.0;\n    float c3 = cos(t3) * 2.0, s3 = sin(t3) * 2.0;\n\n    Light lights[4] = Light[](Light(vec3(c1, c3, s2), vec3(1.0, 0.0, 0.0)),\n                              Light(vec3(s2, c1, s3), vec3(0.0, 1.0, 0.0)),\n                              Light(vec3(s2, s3, c1), vec3(0.0, 0.0, 1.0)),\n                              Light(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0) * snoise(iTime * 15.0)));\n\n    vec3 ro = vec3(s1, s2, c3) * 3.0;\n    vec3 f = -normalize(ro);\n    vec3 r = normalize(vec3(-f.z, 0.0, f.x));\n    vec3 u = normalize(cross(r, f));\n    vec3 rd = normalize(f + uv.x * r + uv.y * u);\n\n    float t = 0.0;\n    for (int i=0; i < 150; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            fragColor.b += 0.25;\n            break;\n        }\n\n        for (int l=0; l < lights.length(); l++) {\n            fragColor.rgb += 0.005 * lights[l].col * length(ro + f * dot(lights[l].pos - ro, f) - lights[l].pos);\n        }\n\n        if (t > 50.0) {\n            break;\n        }\n\n        t += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}