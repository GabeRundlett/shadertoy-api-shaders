{
    "Shader": {
        "info": {
            "date": "1525948491",
            "description": "Here's my attempt to \"simplify\" FabriceNeyret2's \"shortest von Koch\" shader. More in comments.",
            "flags": 0,
            "hasliked": 0,
            "id": "XstBR2",
            "likes": 10,
            "name": "shortest von Koch \"demystified\"",
            "published": 3,
            "tags": [
                "fractal",
                "ifs",
                "koch"
            ],
            "usePreview": 0,
            "username": "mv",
            "viewed": 686
        },
        "renderpass": [
            {
                "code": "/*\n\tWhile I can appreciate the quest for short and compact shaders, it isn't that useful to beginners,\n\tto which it would look quite obfuscated and unappealing. Being approached by someone finding the \n\toriginal shaders confusing prompted me to create this.\n\n\tThis is my attempt to, at least to some extent, try and simplify the compactified version presented \n\tby FabriceNeyret2 and the commentators in his shader. \n\n\tFabriceNeyret2's 143 char shader: https://www.shadertoy.com/view/ll3XRn\n\twhich is inspired by nimitz's shader: https://www.shadertoy.com/view/Mlf3RX\n\twhich itself is an improvement on: https://www.shadertoy.com/view/XsfXDH\n\n\tThe latter might be useful to learn how to construct other IFS shaders. \n\t\n\tAs a result of this my version differs quite significantly from nimitz's original shader,\n\tas I seem to have reduced it to just a couple of elementary operations - One rotation, one translation, \n\tone inversion and what I guess you could call a vertical fold. \n\n\tThe main observation is that\n\n        mat2( 9, 5.2, -5.2, 9 ) / 6. \n\n    can be rewritten as\n\n        mat2( 3*c, s, -s, 3*c )\n\n    which is the same as \n\n        mat2( c, s, -s, c ) + mat2( 2*c, 0, 0, 2*c )\n\n    which is the same as \n\n        mat2( c, s, -s, c ) + mat2( 1, 0, 0, 1 )\n\n    using c = cos(radians(60.0)) = 0.5 and s = sin(radians(60.0)) = 0.866 as shorthand. The 60 degree\n\tangle comes up due to the nature of the Koch snowflake and is a lot more intuitive than the original \n\tmagic numbers.\n\n\tThe first matrix is just a clockwise rotation (since GLSL is column-major). The nature of the *= operator\n\tresults in a right-multiply. Converting to a left-multiply is equivalent to changing the clockwise rotation\n    to a counter-clockwise rotation, essentially by flipping the sign of the sine terms. \n\t\n\tThe result is that \n\n\t\tU.y = .7- abs( U *= - mat2( 9, 5.2, -5.2, 9 ) / 6. ).y\n\n\texpands to the sequence\n\n\t\tU = mat2( c, -s, s, c )*U + U; \n\t\tU = -U;\n\t\tU.y = 0.7 - abs(U.y);\n\n\t\n\tNote that this version differs slightly from the original one in the setup phase as it normalizes using \n\tthe vertical resolution\tinstead of the horizontal resolution. \n*/\n\n\n// cosine and sine of 60 degrees\n#define c 0.5\n#define s 0.866025388240814208984375\n\nvoid mainImage( out vec4 O, vec2 U ) {\n    // aspect ratio\n    float r = iResolution.x/iResolution.y;\n    \n    // normalize\n    U = U / iResolution.yy;\n        \n    // center\n    U = U - vec2(c) - vec2((s/4.0)*r, 0.0);\n    \n    // fold\n    U = abs(U);\n     \n    for( int i=0; i < 12; i++) {\n        // original\n        // U.y = .7- abs( U *= - mat2( 9, 5.2, -5.2, 9 ) / 6. ).y;\n                \n        // a clockwise rotation by 60 degrees followed by a translation\n        U = mat2( c, -s, s, c )*U + U; \n        \n        // inversion\n        U = -U;\n        \n        // fold?\n        U.y = 0.7 - abs(U.y); // the 0.7 factor seems to control the size, make it 1.0 to fill the window vertically\n    }\n    \n    O = U.xxxx;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}