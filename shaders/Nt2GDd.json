{
    "Shader": {
        "info": {
            "date": "1624994629",
            "description": "License CC0: Too many eyes\nContinued tweaking on KIFS fractals",
            "flags": 0,
            "hasliked": 0,
            "id": "Nt2GDd",
            "likes": 18,
            "name": "Too many eyes",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 515
        },
        "renderpass": [
            {
                "code": "// License CC0: Too many eyes\n// Continued tweaking on KIFS fractals\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PCOS(x)         (0.5+0.5*cos(x))\n\n#define TOLERANCE       0.00001\n#define MAX_RAY_LENGTH  10.0\n#define MAX_RAY_MARCHES 50\n#define NORM_OFF        0.0001\n#define N(a)            normalize(vec3(sin(a), -cos(a),  0.0))\n#define SCA(x)          vec2(sin(x), cos(x))\n\nconst vec3  std_gamma  = vec3(2.2);\nconst float smoothing  = 0.125*0.25;\n\nfloat g_v = 0.0;\n\nfloat hash(vec2 co) {\n  return fract(sin(dot(co, vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// From: https://stackoverflow.com/a/17897228/418488\nvec3 hsv2rgb(vec3 c) {\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, 1.0/std_gamma);\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nvec3 pmin(vec3 a, vec3 b, float k) {\n  vec3 h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 pabs(vec3 a, float k) {\n  return -pmin(a, -a, k);\n}\n\nvec3 refl(vec3 p, vec3 n) {\n  p -= n*pmin(0.0, dot(p, n), smoothing)*2.0;\n  return p;\n}\n\nfloat sphered(vec3 ro, vec3 rd, vec4 sph, float dbuffer) {\n    float ndbuffer = dbuffer/sph.w;\n    vec3  rc = (ro - sph.xyz)/sph.w;\n  \n    float b = dot(rd,rc);\n    float c = dot(rc,rc) - 1.0;\n    float h = b*b - c;\n    if( h<0.0 ) return 0.0;\n    h = sqrt( h );\n    float t1 = -b - h;\n    float t2 = -b + h;\n\n    if( t2<0.0 || t1>ndbuffer ) return 0.0;\n    t1 = max( t1, 0.0 );\n    t2 = min( t2, ndbuffer );\n\n    float i1 = -(c*t1 + b*t1*t1 + t1*t1*t1/3.0);\n    float i2 = -(c*t2 + b*t2*t2 + t2*t2*t2/3.0);\n    return (i2-i1)*(3.0/4.0);\n}\n\nfloat solidAngle(vec3 p, vec2 c, float ra) {\n  vec2 q = vec2( length(p.xz), p.y );\n    \n  float l = length(q) - ra;\n  float m = length(q - c*clamp(dot(q,c),0.0,ra) );\n  return max(l,m*sign(c.y*q.x-c.x*q.y));\n}\n\n\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nfloat df(vec3 p) {\n  vec3 op = p;\n  const float zf = 2.0-0.3;\n  const vec3 n0  = N((PI-acos(1.0/3.0))/2.0);\n  const vec3 n1 = vec3(n0.x, n0.yz*ROT(2.0*PI/3.0));\n  const vec3 n2 = vec3(n0.x, n0.yz*ROT(-2.0*PI/3.0));\n\n  float a  = TIME*0.1;\n  mat2 rxy = ROT(a);\n  mat2 ryz = ROT(a*sqrt(0.5));\n  float z = 1.0;\n  \n  float d = 1E6;\n\n  const int mid = 0;\n  const int end = 4;\n  \n  float v = 0.0;\n\n  for (int i = 0; i < mid; ++i) {\n    p.xy *= rxy;\n    p.yz *= ryz;\n  //  p = -pabs(p, smoothing); \n    p = refl(p, n2);\n    p = refl(p, n0);\n    p = refl(p, n1);\n    p.x -= 0.3;\n    p *= zf;\n    z *= zf;\n  }\n\n  vec2 sca = SCA(1.3*PI/2.0);\n\n  for (int i = mid; i < end; ++i) {\n    p.xy *= rxy;\n    p.yz *= ryz;\n    p = -pabs(p, smoothing); \n    p = refl(p, n2);\n//    p = refl(p, n0);\n    p = refl(p, n1);\n//    p.x -= 0.3+0.075*(sin(10.0*op.x-time));\n    p.x -= 0.3;\n    p *= zf;\n    z *= zf;\n    vec3 pp = p;\n    const float sz = 0.125;\n    vec2 nn = mod2(pp.yz, vec2(sz*3.0));\n    float rr = TAU*hash(nn+float(i));\n    vec3 eyedir = normalize(vec3(1.0, 0.0, 0.0));\n    eyedir.xz *= ROT(0.5*smoothstep(-0.75, 0.75, sin(rr+TIME)));\n    eyedir.xy *= ROT(0.5*smoothstep(-0.75, 0.75, sin(rr+TIME*sqrt(2.0))));\n    float d2 = dot(normalize(pp), eyedir);\n    float vv = mix(PCOS(10.0*TAU*d2-TAU*TIME), 1.0, smoothstep(1.0, 0.66, d2))*smoothstep(0.9, 0.80, d2);\n    float dd1 = length(pp) - sz*0.9;\n    float dd3 = solidAngle(-pp.zxy, sca, sz*0.9)-sz*0.1;\n    float dd = dd1;\n    dd = min(dd1, dd3);\n    vv = dd == dd3 ? 1.0 : vv;\n    dd /= z;\n    \n    float ddd = pmin(d, dd, 2.0*smoothing/z);\n    v = mix(vv, v, abs(ddd - dd)/abs(d - dd));\n    d = ddd;\n  }\n\n  g_v = v;\n\n  return d;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, out int iter) {\n  float t = 0.0;\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; i++) {\n    float d = df(ro + rd*t);\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) break;\n    t += d;\n  }\n  iter = i;\n  return t;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat softShadow(vec3 pos, vec3 ld, float ll, float mint, float k) {\n  const float minShadow = 0.25;\n  float res = 1.0;\n  float t = mint;\n  for (int i=0; i<24; i++) {\n    float d = df(pos + ld*t);\n    res = min(res, k*d/t);\n    if (ll <= t) break;\n    if(res <= minShadow) break;\n    t += max(mint*0.2, d);\n  }\n  return clamp(res,minShadow,1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  vec3 lightPos = vec3(1.0);\n  float alpha   = 0.05*TIME;\n  \n  const vec3 skyCol = vec3(0.0);\n\n  int iter    = 0;\n  float t     = rayMarch(ro, rd, iter);\n\n  float beat  = smoothstep(0.25, 1.0, sin(TAU*TIME*10.0/60.0));\n  float sr    = mix(0.45, 0.5, beat);\n  float sd    = sphered(ro, rd, vec4(vec3(0.0), sr), t);\n\n  vec3 gcol   = sd*mix(1.5*vec3(2.25, 0.75, 0.5), 3.5*vec3(2.0, 1.0, 0.75), beat);\n\n  if (t >= MAX_RAY_LENGTH) {\n    return gcol;\n  }\n\n  vec3 pos    = ro + t*rd;\n  vec3 nor    = normal(pos);\n  vec3 refl   = reflect(rd, nor);\n  float ii    = float(iter)/float(MAX_RAY_MARCHES);\n  float ifade = 1.0-tanh_approx(1.25*ii);\n  float h     = fract(-1.0*length(pos)+0.1);\n  float s     = 0.25;\n  float v     = tanh_approx(0.4/(1.0+40.0*sd));\n  vec3 color  = hsv2rgb(vec3(h, s, v));\n  color       *= g_v;\n\n  vec3 lv   = lightPos - pos;\n  float ll2 = dot(lv, lv);\n  float ll  = sqrt(ll2);\n  vec3 ld   = lv / ll;\n  float sha = softShadow(pos, ld, ll*0.95, 0.01, 10.0);\n\n  float dm  = 4.0/ll2;\n  float dif = pow(max(dot(nor,ld),0.0),2.0)*dm;  \n  float spe = pow(max(dot(refl, ld), 0.), 20.);\n  float ao  = smoothstep(0.5, 0.1 , ii);\n  float l   = mix(0.2, 1.0, dif*sha*ao);\n\n  vec3 col = l*color + 2.0*spe*sha;\n//  return vec3(ao);\n  return gcol+col*ifade;\n}\n\nvec3 effect3d(vec2 p, vec2 q) {\n  float z   = TIME;\n  vec3 cam  = 1.75*vec3(1.0, 0.5, 0.0);\n  float rt  = TAU*TIME/30.0;;\n  cam.xy   *= ROT(sin(rt*sqrt(0.5))*0.5+0.0);\n  cam.xz   *= ROT(sin(rt)*1.0-0.75);\n  vec3 la   = vec3(0.0);\n  vec3 dcam = normalize(la - cam);\n  vec3 ddcam= vec3(0.0);\n  \n  vec3 ro = cam;\n  vec3 ww = normalize(dcam);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0)+ddcam*2.0, ww ));\n  vec3 vv = normalize(cross(ww,uu));\n  vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n\n  return render(ro, rd);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect3d(p, q);\n\n  col = postProcess(col, q);\n\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}