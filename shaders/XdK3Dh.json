{
    "Shader": {
        "info": {
            "date": "1454267448",
            "description": "How to use texture to store numbers. This can be used for example to store positions that are not just in 0;255 interval. ",
            "flags": 32,
            "hasliked": 0,
            "id": "XdK3Dh",
            "likes": 12,
            "name": "Save numbers in texture",
            "published": 3,
            "tags": [
                "math",
                "texture",
                "buffer",
                "memory"
            ],
            "usePreview": 0,
            "username": "EntityBlack",
            "viewed": 1665
        },
        "renderpass": [
            {
                "code": "// Buffer is used as simple memory to store float numbers\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    fragColor = texture(iChannel0, q);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// color2float, float2color\n// allows to convert vec3 color <0.0;1.0> with 256 shades\n// to signed number with max size 8388608 and back\n// decimal places are lost during conversion to color\n\nfloat color2float(in vec3 c) {\n    c *= 255.;\n    // comment following line to see how values can be malformed\n    c = floor(c); // without this value could be shifted for some intervals\n    return c.r*256.*256. + c.g*256. + c.b - 8388608.;\n}\n\n// values out of <-8388608;8388608> are stored as min/max values\nvec3 float2color(in float val) {\n    val += 8388608.; // this makes values signed\n    if(val < 0.) {\n        return vec3(0.);\n    }\n    if(val > 16777216.) {\n        return vec3(1.);\n    }\n    vec3 c = vec3(0.);\n    c.b = mod(val, 256.);\n    val = floor(val/256.);\n    c.g = mod(val, 256.);\n    val = floor(val/256.);\n    c.r = mod(val, 256.);\n    return c/255.;\n}\n\n//--------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    \n    // create large spectrum of colors to see if values are not malformed\n    if(iTime < 0.5) {\n        for(float i=0.;i<20.;i++) {\n            for(float j=0.;j<20.;j++) {\n        \t\tif(q.x <= i/19.) {\n                    if(q.y <= j/19.) {\n            \t\t\tfragColor = vec4(float2color((i * 20. + j) * 41942. - 8388608.), 1.);\n           \t\t\t\treturn;\n                    }\n     \t   \t\t}\n        \t}\n        }\n    }\n    \n    vec4 colorOnPosition = texture(iChannel0, q);\n\n    // create value from color\n    float valueFromColor = color2float(colorOnPosition.xyz);\n    \n    // use value to create color\n    fragColor = vec4(float2color(valueFromColor), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}