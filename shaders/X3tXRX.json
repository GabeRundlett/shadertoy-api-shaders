{
    "Shader": {
        "info": {
            "date": "1719345415",
            "description": "patterns for a game",
            "flags": 0,
            "hasliked": 0,
            "id": "X3tXRX",
            "likes": 4,
            "name": "Patterns BG/FG",
            "published": 3,
            "tags": [
                "patterns",
                "backgrounds"
            ],
            "usePreview": 0,
            "username": "annie_weaver",
            "viewed": 66
        },
        "renderpass": [
            {
                "code": "vec3 pattern(vec2 c, int which, float dim, vec3 col1, vec3 col2) {\n    if(which == 0) { // vertical stripes\n        if(mod(dot(c, vec2(0.9, 0.1)), dim*1.5) < dim*0.75)\n            return col1;\n        else return col2;\n    } else if(which == 1) { // zig zags\n        float dimp = dim*2.0;\n        float x = c.x * (mod(c.x, dimp*2.0) < dimp ? -1.0 : 1.0);\n        if(mod(c.y + x*0.5, dimp) < dimp/2.0)\n            return col1;\n        else return col2;\n    } else if(which == 2) { // tesselated squares\n        if(max(mod(c.x, dim*1.25), mod(c.y, dim*1.25)) < dim*0.75)\n            return col1;\n        else return col2;\n    } else if(which == 3) { // checkers\n        if((mod(c.x, dim*2.0) < dim) == (mod(c.y, dim*2.0) < dim)) return col1;\n        else return col2;\n    } else if(which == 4) { // squiggles\n        if(mod(c.x + cos(c.y*20.0)/40.0, dim*1.5) < dim*0.75) return col1;\n        else return col2;\n    } else if(which == 5) { // circles\n        float y22 = c.y - floor((c.x)/(dim*2.0))*dim*1.0;\n        float xxx = mod(c.x, dim*2.0) - dim*1.0,\n              yyy = mod(y22, dim*2.0) - dim*1.0;\n        float ddd = sqrt(xxx*xxx + yyy*yyy);\n        if(ddd > dim*0.25 && ddd < dim*0.9) return col1;\n        else return col2;\n    }\n}\nvec3 background(vec2 c, int which) {\n    return pattern(\n        c,\n        which,\n        0.08797979,\n        vec3(0.9),\n        vec3(1.0)\n    );\n}\nvec3 foreground(vec2 c, int which) {\n    return pattern(\n        c.yx,\n        (which+3) % 6,\n        0.047111111, \n        vec3(1.0, 0.0, 1.0), \n        vec3(0.5, 0.5, 1.0)\n    );\n}\n    \nfloat dist(vec2 a, vec2 b) {\n    return dot(b-a, b-a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = (fragCoord - iResolution.xy*0.5)/min(iResolution.x, iResolution.y) + vec2(0.5, 0.5);\n    vec3 col;\n    float dim = 0.05;\n    \n    int k = int(iTime) % 6;\n    // col = dist(uv, vec2(0.5, 0.5)) < 0.15 ? foreground(uv, k) : background(uv, k);\n    col = background(uv, k);\n    \n    // Output to screen\n    if(uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0)\n        col = vec3(0.0, 0.0, 0.0);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}