{
    "Shader": {
        "info": {
            "date": "1578937564",
            "description": "just for fun.\n\ncode golfed here: [url]https://www.shadertoy.com/view/ttyGWD[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "wly3DW",
            "likes": 15,
            "name": "pseudo-Tron screensaver",
            "published": 3,
            "tags": [
                "tron",
                "particles"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 643
        },
        "renderpass": [
            {
                "code": "// === display buffer ====================================\n\nvoid mainImage( out vec4 O, vec2 U ) { O = T(U); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === move particles ====================================\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U);\n    \n    if (iFrame==0 || O.w<0.) {  // --- called at init + particle timer\n        vec3 r = hash3(vec3(U,iTime));\n        if (iFrame==0) O.xy = r.xy *R/R.y;  // xy = normalized location\n        float d = floor(r.z*4.);\n        O.z = iFrame==0 ? d                 // z = direction: random\n                        : mod( O.z + sign(d-1.5), 4.); // or random turn\n        O.w = fract(r.z*4.)*60.;            // w = life time of current move\n        return;\n    }\n    if (U.y>1.) return;                     // limit particles\n    \n                                     // --- move particle\n    float d = sign(O.z-1.5) * radius/2.;    // dir = + or - ?\n    int(O.z)%2==0                           // orientation = x or y ?\n        ? O.x = fract((O.x+d)/ratio)*ratio  // screen wrap\n        : O.y = fract((O.y+d));\n    O.w--;                                  // timelife decrease \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// === utils from https://www.shadertoy.com/view/llySRh ==========\n\n#define radius   .01\n#define T(U)     texelFetch(iChannel0, ivec2(U), 0)\n#define T1(U)    texelFetch(iChannel1, ivec2(U), 0)\n#define R      ( iResolution.xy )\n#define ratio  ( R.x / R.y )\n#define hash3(p) fract(sin((p)*mat3(127.1,311.7, 74.7,  269.5,183.3,246.1,  113.5,271.9,124.6))*43758.5453123)\n#define S(v)     smoothstep( 0., -1.5/R.y, v )\n#define hue(c) ( .6 + .6 * cos( 6.3*(c)  + vec4(0,23,21,0)  ) )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// === draw bands ====================================\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U)*.99;                   // keep and fade past \n    \n    for(float i=0.; i++<30.; ) {    // draw particles\n        vec2  V = abs( U/R.y - T1(vec2(i,0)).xy ) / radius;\n        float r = dot(V,V);\n        if (r<1.) O = mix( O, hue(i/30.), S((sqrt(r)-1.)*radius)); // blend\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}