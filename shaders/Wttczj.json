{
    "Shader": {
        "info": {
            "date": "1609535769",
            "description": "z Reaction diffusion modified",
            "flags": 34,
            "hasliked": 0,
            "id": "Wttczj",
            "likes": 6,
            "name": "z Reaction diffusion modified",
            "published": 3,
            "tags": [
                "cellular"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 516
        },
        "renderpass": [
            {
                "code": "#define COLOR_MIN 0.0\n#define COLOR_MAX 0.9\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).brga);\n    fragColor = vec4(texture(iChannel1, uv).r);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TIMESTEP 1.\n//#define SPEED 1.\n\n//#define F (0.05 + .08* smoothstep(.0, .9, length(uv)))\n#define F (0.04)\n#define K (0.07+.02*(texture(iChannel1,fragCoord/iResolution.xy).r-.5))\n//#define K (0.063)\n// 4 circles\n// #define K (0.06+.04*smoothstep(.8, .85, length(abs(uv*2.)-.7)))\n// #define K (0.065+.05*step(.0, sdHexagon(uv, .3)-.1)+uv.y*.02)\n//#define K 0.03+.05*smoothstep(.0,.5,length(uv))\n//#define K (0.1)\n//#define K .5*smoothstep(0.,2.,length(uv))\n#define Da (1.3)\n#define Db (.5*smoothstep(0.,5.,iTime))\n#define RADIUS 3.\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat rnd(float x) {return fract(54321.987 * sin(987.12345 * x));}\n//float rnd(float x) {return 2.*fract(54321.987 * sin(987.12345 * x))-1.;}\n\nvoid getVal(vec2 p, out vec2 val, out float diff_a, out float diff_b) {\n  vec2 r = iResolution.xy;\n  vec2 uv = p / r;\n  val = texture(iChannel0, uv).xy;\n  vec2 neigh_val_a = vec2(0.);\n  vec2 neigh_val_b = vec2(0.);\n  vec2 k_anisotropy = abs(normalize(uv-vec2(.5)));\n  if(uv.x<0.5)k_anisotropy = k_anisotropy.yx;\n  float k_sum = 0.;\n  for(float i = -RADIUS; i <= RADIUS; i++){\n      for(float j = -RADIUS; j <= RADIUS; j++){\n          if(i==0. || j==0.) continue;\n          if(length(vec2(i,j))>RADIUS) continue;\n          //if(length(vec2(i,j))<RADIUS*.5) continue;\n          //vec2 k = .1/pow(vec2(i,j)*k_anisotropy,vec2(2.));\n          vec2 k = vec2(1.);\n          k_sum += k.x+k.y;\n          neigh_val_a += texture(iChannel0, (p+vec2(i,j)) / r).x * k;\n          neigh_val_b += texture(iChannel0, (p+vec2(i,j)) / r).y * k;\n      }\n  }\n  neigh_val_a /= k_sum;\n  neigh_val_b /= k_sum;\n  diff_a = (-val.x+neigh_val_a.x+neigh_val_a.y)/2.;\n  diff_b = (-val.y+neigh_val_b.x+neigh_val_b.y)/2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy) / iResolution.y;\n    \n    vec3 colour = vec3(0.0);\n    if (iFrame < 1) {\n        //if (length(fract(uv*5.)-.9)<.1) {\n        colour = vec3(rnd(uv.x+uv.y*.0001));\n        //if (length(uv)<.1) {\n        //    colour = vec3(1.);\n        //}\n    } else {\n     \tvec2 val;\n        float diff_a, diff_b;\n        getVal(fragCoord.xy, val, diff_a, diff_b);\n        \n        vec2 delta;\n \t\tdelta.x = Da * diff_a - val.x * val.y * val.y + F * (1.0 - val.x);\n  \t\tdelta.y = Db * diff_b + val.x * val.y * val.y - (K + F) * val.y;\n        \n        \n        colour = vec3(val + delta * TIMESTEP, 0.0);\n        colour = clamp(colour, -1., 1.);\n    }\n    \n    fragColor = vec4(colour,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define res iResolution.xy\n\nmat2 rot(float a){float s=sin(a),c=cos(a);return mat2(c,-s,s,c);}\n//float sdTorus( vec3 p, vec2 t ){\n//  vec2 q = vec2(length(p.xz)-t.x,p.y);\n//  return length(q)-t.y;\n//}\n\nfloat dist(vec3 p){\n\treturn p.y+3.+\n        .5*texture(iChannel0, (p.xz)*vec2(.2,.35)+vec2(.5)).r;\n}\n\nvec3 norm(vec3 p){\n    vec2 e = vec2(.01,0.);\n\treturn normalize(vec3(\n    \tdist(p+e.xyy)-dist(p-e.xyy),\n    \tdist(p+e.yxy)-dist(p-e.yxy),\n        dist(p+e.yyx)-dist(p-e.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 FC )\n{\n    float d=0., e;\n    vec3 p,rd=normalize(vec3((FC*2.-res)/res.y,2.));\n    rd.yz*=rot(3.1415/2.);\n    for(int i=0;i++<99;){\n        p = d*rd;\n        d+=e=dist(p);\n        if(e<.001)break;\n    }\n    fragColor = vec4(vec3(dot(norm(p),vec3(1.)))*.2+.7,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}