{
    "Shader": {
        "info": {
            "date": "1727201055",
            "description": "originals https://www.shadertoy.com/view/MdXSzS and other",
            "flags": 0,
            "hasliked": 0,
            "id": "X32yWh",
            "likes": 4,
            "name": "fbm burning space",
            "published": 3,
            "tags": [
                "burn",
                "noise",
                "fbm"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 79
        },
        "renderpass": [
            {
                "code": "\nuniform vec2      resolution;\nuniform float     time;\nuniform float     alpha;\nuniform vec2      speed;\nuniform float     shift;\n#define time iTime\n#define resolution iResolution.xy\n\nfloat rand(vec2 point) {\n return fract(100.0 * sin(point.x + fract(100.0 * sin(point.y)))); // http://www.matteo-basei.it/noise\n}\n\nfloat noise(vec2 n) {\n  //Uses the rand function to generate noise\n\t  const vec2 d = vec2(0, 1.0);\n\t  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\t  return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(vec2 n) {\n  //fbm stands for \"Fractal Brownian Motion\" https://en.wikipedia.org/wiki/Fractional_Brownian_motion\n\t  float total = 0.0, amplitude = 1.0;\n\t  for (int i = 0; i < 4; i++) {\n \t   total += noise(n) * amplitude;\n\t    n += n;\n\t    amplitude *= 1.0;\n\t  }\n\t  return total;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //This is where our shader comes together\n    const vec3 c1 = vec3(126.0/255.0, 0.0/255.0, 97.0/255.0);\n    const vec3 c2 = vec3(173.0/255.0, 0.0/255.0, 161.4/255.0);\n    const vec3 c3 = vec3(0.2, 0.0, 0.0);\n    const vec3 c4 = vec3(164.0/255.0, 1.0/255.0, 214.4/255.0);\n    const vec3 c5 = vec3(0.1);\n    const vec3 c6 = vec3(0.9);\n      vec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n\tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n\n        vec2 p = gl_FragCoord.xy * 8.0 / resolution.xx;\n          \n    //The fbm function takes p as its seed (so each pixel looks different) and time (so it shifts over time)\n    float q = fbm(p - time * 0.1);\n    vec2 r = vec2(fbm(p + q + time * speed.x - p.x - p.y), fbm(p + q - time * speed.y));\n    r*=ma;\n    vec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);\n\n\t\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv, 0.0);\n\t\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1)+c;\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.7, .0, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.9, .0, len);\n\t\n\tvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n    //This is how \"packed\" the smoke is in our area. Try changing 8.0 to 1.0, or something else\n\n    float grad = gl_FragCoord.y / resolution.y;\n    fragColor = vec4(c * cos(shift * gl_FragCoord.y / resolution.y), 1.0);\n    fragColor.xyz =col;\n        fragColor*= vec4(c * cos(shift * gl_FragCoord.y / resolution.y), 1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}