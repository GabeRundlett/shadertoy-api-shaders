{
    "Shader": {
        "info": {
            "date": "1629223648",
            "description": "a",
            "flags": 0,
            "hasliked": 0,
            "id": "7sc3R4",
            "likes": 5,
            "name": "rotatintg A",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "sunhokim",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.1415926535897932384626433832795\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvec3 hash3( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*13.5453123);\n}\n\nfloat noise( in vec3 p ) {\n    vec3 a = hash3(p);\n    return sin(dot(a,a));\n}\n\nvec3 rotateX( in vec3 p, float t )\n{\n    float co = cos(t);\n    float si = sin(t);\n    p.yz = mat2(co,-si,si,co)*p.yz;\n    return p;\n}\nvec3 rotateY( in vec3 p, float t )\n{\n    float co = cos(t);\n    float si = sin(t);\n    p.xz = mat2(co,-si,si,co)*p.xz;\n    return p;\n}\nvec3 rotateZ( in vec3 p, float t )\n{\n    float co = cos(t);\n    float si = sin(t);\n    p.xy = mat2(co,-si,si,co)*p.xy;\n    return p;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec4 opU( vec4 d1, vec4 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec4 opS( vec4 d2, vec4 d1 )\n{\n\treturn (-d1.x>d2.x) ? vec4(-d1.x, d1.yzw) : d2;\n}\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    return mod(p+0.5*c,c)-0.5*c;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nvec4 mapA(vec3 p) {\n    vec3 q = rotateZ(p, M_PI*0.15);\n    vec4 A = vec4(sdBox(q, vec3(0.5,3.0, 0.5)), vec3(1.0));\n    q -= vec3(-1.0, 0.0, 0.0);\n    vec4 D = vec4(sdBox(q, vec3(0.5,3.0, 0.6)), vec3(1.0));\n    q = rotateZ(p- vec3(1.4, 0.0, 0.0), -M_PI*0.15) ;\n    vec4 A2 = vec4(sdBox(q, vec3(0.5,3.0, 0.5)),vec3(1.0));\n    q -= vec3(1.0, 0.0, 0.0);\n    vec4 D2 = vec4(sdBox(q, vec3(0.5,3.0, 0.6)), vec3(1.0));\n    q = p - vec3(0.7, -2.1, 0.0);\n    vec4 D3 = vec4(sdBox(q, vec3(0.7,0.7, 0.6)), vec3(1.0));\n    q = p - vec3(0.7, 1.3, 0.0);\n    vec4 A3 = vec4(sdBox(q, vec3(1.1, 0.4, 0.5)),vec3(1.0));\n    A = opU(A, A2);\n    A = opS(A, D);\n    A = opS(A, D2);\n    A = opS(A, D3);\n    A = opU(A, A3);\n    return A;\n}\n\nvec4 map(vec3 p) {\n    vec4 res = vec4(1e10, 0, 0,0);\n\n    {\n    float s = (1.0+sin((p.x/20.0)*M_PI+(p.z/20.0)*M_PI+iTime*M_PI))/2.0;\n    vec3 c = vec3(10.0, 10.0, 6.0);\n    vec3 q = opRep(p, c);\n    vec3 id = floor((p+0.5*c)/c);\n    float t2 = 2.0*M_PI*noise((id)*0.1);\n    float t = t2;\n    q.xy*=rot(-t);\n    q.yz*=rot(-t);\n    q.zx*=rot(t);\n    vec4 A = mapA(q/s)*s;\n    res = opU(res, A);\n    res.x = max(res.x, sdBox(id, vec3(2.0, 2.0,3.0)));\n    //res.x -= 0.3*noise(p);\n    }\n\n    return res;\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in float rad )\n{\n\tfloat b = dot( ro, rd );\n\tfloat c = dot( ro, ro ) - rad*rad;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n    h = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nvec3 calcNormal( in vec3 p )\n{\n    const float h = 0.05;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ).x + \n                      k.yyx*map( p + k.yyx*h ).x + \n                      k.yxy*map( p + k.yxy*h ).x + \n                      k.xxx*map( p + k.xxx*h ).x );\n}   \n\nvec4 raycast( in vec3 ro, in vec3 rd )\n{\n    vec4 res = vec4(-1.0);\n    vec2 tminmax = iSphere( ro, rd, 100.0 );\n\tif( tminmax.y>0.0 )\n    {\n        float t = max(tminmax.x,0.001);\n        for( int i=0; i<256 && t<tminmax.y; i++ )\n        {\n            vec4 h = map(ro+t*rd);\n            if( h.x<0.01 ) { res=vec4(t,h.yzw); break; }\n            t += 0.5*h.x;\n        }\n    }\n    \n    return res;\n}\n\nvec3 skyColor(vec3 rd) {\n    float k = (max(rd.y,0.0)*0.8+0.2)*0.8;\n    vec3 sky = vec3(pow(1.0-k,2.0), 1.0-k, 0.6+(1.0-k)*0.4) * 1.1;\n    return sky;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t).x;\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\nvec3 render( in vec3 ro, vec3 rd )\n{ \n    vec4 res = raycast(ro, rd);\n    vec3 pos = ro + res.x*rd;\n    vec3 col = vec3(0.0);\n    vec3 normal = calcNormal(pos);\n\n    if (res.x <0.0) {\n        return skyColor(rd);\n    }\n    vec3 sunDir = normalize(vec3(1.0,-1.0,1.0));\n    vec3 material = vec3(1.0);\n    float sun = clamp( dot( normal, sunDir ), 0.0, 1.0 );\n    float sky = clamp( 0.5 + 0.5*normal.y, 0.0 ,1.0 );\n    float sha = softshadow(pos, sunDir, 0.03, 100.0, 30.0);\n    return 0.4*sky + sun*vec3(1.64,1.27,0.99)*pow(vec3(sha),vec3(1.0,1.2,1.5));\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nmat3 viewMat( in vec3 eye, in vec3 look )\n{\n    vec3 w = normalize(eye-look);\n    vec3 u = normalize(cross(w, vec3(0,1,0)));\n    vec3 v = cross(w, u);\n    return mat3( u, v, w );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec2 mouse = iMouse.xy /iResolution.xy;\n    if (iMouse.xy == vec2(0)) {\n        mouse = vec2(0.5,0.5);\n    }\n    vec2 spr = vec2(mouse.x * M_PI - M_PI/2.0, mouse.y*M_PI-M_PI)*0.8;\n    spr.x += 0.3*iTime;\n    float r = 100.0;\n    vec3 eye = vec3(-r*sin(spr.x)*sin(spr.y), -r*cos(spr.y),-r*sin(spr.y)*cos(spr.x)) + vec3(0.0, -2.0, 0.0);\n    vec3 look = vec3(0.0,0.0,0);\n    mat3 view = viewMat(eye, look);\n    dir = view * dir;\n    fragColor = vec4(render(eye, dir), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}