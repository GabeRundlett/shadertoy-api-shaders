{
    "Shader": {
        "info": {
            "date": "1698088518",
            "description": "Watched a twitch stream that showed some concept art for the stream\nI thought: I could shaderify that for fun!\nThis was a quick remix of existing shaders\n",
            "flags": 32,
            "hasliked": 0,
            "id": "msVBzm",
            "likes": 33,
            "name": "Quick hack for a twitch buddy",
            "published": 3,
            "tags": [
                "twitch"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 433
        },
        "renderpass": [
            {
                "code": "// CC0: Quick hack for a twitch buddy\n//  Watched a twitch stream that showed some concept art for the stream\n//  I thought: I could shaderify that for fun!\n//  This was a quick remix of existing shaders\n\n#define RESOLUTION      iResolution\n\n// License: Unknown, author: XorDev, found: https://github.com/XorDev/GM_FXAA\nvec4 fxaa(sampler2D tex, vec2 uv, vec2 texelSz) {\n  // See this blog\n  // https://mini.gmshaders.com/p/gm-shaders-mini-fxaa\n\n  // Maximum texel span\n  const float span_max    = 8.0;\n  // These are more technnical and probably don't need changing:\n  // Minimum \"dir\" reciprocal\n  const float reduce_min  = (1.0/128.0);\n  // Luma multiplier for \"dir\" reciprocal\n  const float reduce_mul  = (1.0/32.0);\n\n  const vec3  luma        = vec3(0.299, 0.587, 0.114);\n\n  // Sample center and 4 corners\n  vec3 rgbCC = texture(tex, uv).rgb;\n  vec3 rgb00 = texture(tex, uv+vec2(-0.5,-0.5)*texelSz).rgb;\n  vec3 rgb10 = texture(tex, uv+vec2(+0.5,-0.5)*texelSz).rgb;\n  vec3 rgb01 = texture(tex, uv+vec2(-0.5,+0.5)*texelSz).rgb;\n  vec3 rgb11 = texture(tex, uv+vec2(+0.5,+0.5)*texelSz).rgb;\n\n  //Get luma from the 5 samples\n  float lumaCC = dot(rgbCC, luma);\n  float luma00 = dot(rgb00, luma);\n  float luma10 = dot(rgb10, luma);\n  float luma01 = dot(rgb01, luma);\n  float luma11 = dot(rgb11, luma);\n\n  // Compute gradient from luma values\n  vec2 dir = vec2((luma01 + luma11) - (luma00 + luma10), (luma00 + luma01) - (luma10 + luma11));\n\n  // Diminish dir length based on total luma\n  float dirReduce = max((luma00 + luma10 + luma01 + luma11) * reduce_mul, reduce_min);\n\n  // Divide dir by the distance to nearest edge plus dirReduce\n  float rcpDir = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n\n  // Multiply by reciprocal and limit to pixel span\n  dir = clamp(dir * rcpDir, -span_max, span_max) * texelSz.xy;\n\n  // Average middle texels along dir line\n  vec4 A = 0.5 * (\n      texture(tex, uv - dir * (1.0/6.0))\n    + texture(tex, uv + dir * (1.0/6.0))\n    );\n\n  // Average with outer texels along dir line\n  vec4 B = A * 0.5 + 0.25 * (\n      texture(tex, uv - dir * (0.5))\n    + texture(tex, uv + dir * (0.5))\n    );\n\n\n  // Get lowest and highest luma values\n  float lumaMin = min(lumaCC, min(min(luma00, luma10), min(luma01, luma11)));\n  float lumaMax = max(lumaCC, max(max(luma00, luma10), max(luma01, luma11)));\n\n  // Get average luma\n  float lumaB = dot(B.rgb, luma);\n\n  //If the average is outside the luma range, using the middle average\n  return ((lumaB < lumaMin) || (lumaB > lumaMax)) ? A : B;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n      \n  fragColor = fxaa(iChannel0, q, sqrt(2.0)/RESOLUTION.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// CC0: Quick hack for a twitch buddy\n//  Watched a twitch stream that showed some concept art for the stream\n//  I thought: I could shaderify that for fun!\n//  This was a quick remix of existing shaders\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float PI                  = acos(-1.)   ;\nconst float TAU                 = 2.0*PI      ;\nconst float PI_2                = 0.5*PI      ;\nconst float TOLERANCE           = 1.0E-4      ;\nconst float MAX_RAY_LENGTH      = 20.         ;\nconst float NORM_OFF            = 0.005       ;\nconst float MAX_RAY_MARCHES     = 40.0        ;\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst float hoff      = 0.;\nconst vec3 skyCol     = HSV2RGB(vec3(hoff+0.57, 0.70, 0.25));\nconst vec3 sunDir     = normalize(vec3(0.0, 0.0, 1.0)) ;\n\nfloat g_anim;\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = PI_2 - cosatan2 * PI_2;\n  return y < 0.0 ? -t : t;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat twistedBoxTorus(vec3 p, vec3 d) {\n  vec2 q = vec2(length(p.xz) - d.x, p.y);\n  float a = atan_approx(p.x, p.z);\n  mat2 r = ROT(a+g_anim);\n  return box(r*q, vec2(d.y))-d.z;\n}\n\nfloat df(vec3 p) {\n  vec3 p0 = p.yzx;\n  float d = twistedBoxTorus(p0, vec3(2.5, 0.5, 0.075));\n  return d;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float t     = 0.0;\n  vec2 nti = vec2(MAX_RAY_MARCHES,0);\n\n  float i;\n  for (i = 0.0; i < MAX_RAY_MARCHES; ++i) {\n    if (t > MAX_RAY_LENGTH) break;\n    float d = df(ro + rd*t);\n    if (d<nti.x) nti = vec2(d,t);\n    if (d < TOLERANCE) break;\n    t += d;\n  }\n\n  if(i==MAX_RAY_MARCHES) t = nti.y;\n\n  return t;\n}\n\n\nvec3 normal(vec3 pos) {\n  vec2 eps = vec2(NORM_OFF, 0.0);\n  return normalize(vec3(\n      df(pos+eps.xyy)-df(pos-eps.xyy)\n    , df(pos+eps.yxy)-df(pos-eps.yxy)\n    , df(pos+eps.yyx)-df(pos-eps.yyx))\n    );\n}\n\nvec3 render0(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n\n  col += 1E-2*(skyCol*skyCol)/(1.0001+dot(rd, sunDir));\n\n  float tp0  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), -5.0));\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), 6.0));\n\n  if (tp0 > 0.0) {\n    col += 0.85*(skyCol)*exp(-0.5*(length((ro + tp0*rd).xz)));\n  }\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += vec3(4.0)*skyCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += vec3(0.8)*skyCol*exp(-0.5*max(db, 0.0));\n    col += 0.25*sqrt(skyCol)*max(-db, 0.0);\n  }\n\n  return col;\n}\n\nvec3 render1(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n\n  float te = rayMarch(ro, rd);\n  if (te < MAX_RAY_LENGTH) {\n    vec3 ep = ro+rd*te;\n    vec3 en = normal(ep);\n    vec3 er = reflect(rd, en);\n\n    float fre = 1.0+dot(rd,en);\n    fre *= fre;\n    col += skyCol*0.125;\n    col += mix(0.5, 2.0, fre)*render0(ep, er);\n  } else {\n    col += render0(ro,rd);\n  }\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  g_anim = 0.125*TIME;\n  const float fov = tan(TAU/6.);\n  const vec3 ro = vec3(0.0, 0.1, 8.0);\n  const vec3 la = vec3(0.0, 0.0, 0.0);\n  const vec3 up = vec3(0.0, 1.0, 0.0);\n  const vec3 ww = normalize(la - ro);\n  const vec3 uu = normalize(cross(up, ww));\n  const vec3 vv = (cross(ww,uu));\n\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  vec3 col = render1(ro, rd);\n  col -= 0.05*length(pp);\n  col = aces_approx(col);\n  col = sqrt(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}