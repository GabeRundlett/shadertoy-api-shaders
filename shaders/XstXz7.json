{
    "Shader": {
        "info": {
            "date": "1458425642",
            "description": "Cumulatively generating a distance field texture for a spirograph figure.",
            "flags": 48,
            "hasliked": 0,
            "id": "XstXz7",
            "likes": 35,
            "name": "Spirograph Distance",
            "published": 3,
            "tags": [
                "distance",
                "spirograph",
                "multipass"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 1332
        },
        "renderpass": [
            {
                "code": "#define EPS 1e-3\n#define LINE_COLOR vec3(0.1, 0.3, 1.0)\n#define LINE_BRIGHTNESS 0.008\n#define LINE_WIDTH 0.005\n\n//#define VIEW_DISTANCE\n//#define VIEW_SPEED\n\nfloat pi = atan(1.0)*4.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    float dist = texture(iChannel0, uv / res).x;\n    float spd = texture(iChannel0, uv / res).y;\n    \n    float brightness = LINE_BRIGHTNESS / max(EPS, abs(dist - LINE_WIDTH));\n    \n    vec3 col = mix(vec3(0), LINE_COLOR, brightness);\n    \n    col *= pow(spd * 0.5, 2.0);\n    \n    #ifdef VIEW_DISTANCE\n    \tcol = vec3(log(1.0 + dist * 10.0) / log(10.0));\n    #endif\n    #ifdef VIEW_SPEED\n    \tcol = vec3(spd * 0.5);\n    #endif\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define INF 1e6\n#define STEPS 32\n#define TIME_SCALE 2.0\n\n#define polar(l,a) (l*vec2(cos(a),sin(a)))\n#define saturate(a) clamp(a,0.0,1.0)\n\nvec2 spirograph(float t)\n{\n    return polar(0.30, t *-0.5) \n         + polar(0.08, t * 4.0)\n         + polar(0.03, t *-6.0)\n         + polar(0.05, t * 10.0)\n         + polar(0.03, t *-26.0);\n}\n\nfloat dfLine(vec2 start, vec2 end, vec2 uv)\n{   \n\tvec2 line = end - start;\n\tfloat frac = dot(uv - start,line) / dot(line,line);\n\treturn distance(start + line * clamp(frac, 0.0, 1.0), uv);\n}\n\n//Smooth sign\nfloat ssign( float a, float k )\n{\n\treturn smoothstep(-k,k,a) * 2.0 - 1.0;\n}\n\nbool keyPressed(int key)\n{\n    return texture(iChannel1, vec2(float(key) / 256.0, 0.0)).x == 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.y;\n    \n    bool reset = (iFrame < 5) || !keyPressed(0x20);\n    \n    float t = iTime * TIME_SCALE;\n    float dt = iTimeDelta * TIME_SCALE;\n    \n    vec4 last = texture(iChannel0, uv / res);\n    \n    float dist = reset ? INF : last.x;\n    float spd = reset ? 0.0 : last.y;\n    \n    uv -= res / 2.0;\n    \n    for(int i = 0;i < STEPS;i++)\n    {\n        float lidx = float(i + 0) / float(STEPS);\n        float cidx = float(i + 1) / float(STEPS);\n        \n    \tvec2 lpos = spirograph(t - lidx * dt);\n    \tvec2 cpos = spirograph(t - cidx * dt);\n    \t\n        float dline = dfLine(lpos, cpos, uv);\n        \n        if(dline < dist)\n        {\n           float s = length(cpos-lpos) / (dt / float(STEPS));\n           \n           spd = mix(spd, s, saturate(ssign(dist - dline, 0.08)));\n            \n           dist = dline; \n        }\n    }\n    \n    fragColor = vec4(dist, spd, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}