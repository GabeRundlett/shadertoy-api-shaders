{
    "Shader": {
        "info": {
            "date": "1677427694",
            "description": "A shader I made for friends in order to demonstrate the concept of creating shading and shadows from a heightmap.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds3GRB",
            "likes": 4,
            "name": "Heightmap Shadows - Point Light",
            "published": 3,
            "tags": [
                "2d",
                "shadow"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "int maxSamples = 32;\nfloat normalIntensity = 1.0;\nfloat normalDistance = 1.5;\n//the bigger this is, the less defined the normals are\nfloat shadowBrightness = 0.2;\nfloat shadowDistance = 64.0;\n\n//can replace heightmap with whatever shader you want, using 0-1 UV coordinates.\nfloat heightmap(vec2 uv)\n{\n    \n    return texture(iChannel1, uv).x*10.0;\n    /*\n    if (length(uv-0.5) < 0.2){ \n        return 5.0-length(uv-0.5)*25.0;\n    }else{\n        return 0.0;\n    }\n    //*/\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    float height = heightmap(uv);\n    vec3 lightPos = vec3(sin(iTime)*0.5+0.5, cos(iTime)*0.5+0.5, sin(iTime*0.73)*0.5 + 0.5);\n\n    //normal calculation\n    vec3 norm = vec3(0, 0, 1);\n    \n    norm.x = heightmap(uv-vec2(normalDistance/iResolution.x, 0))\n        -heightmap(uv+vec2(normalDistance/iResolution.x, 0));\n    norm.y = heightmap(uv-vec2(0, normalDistance/iResolution.y))\n        -heightmap(uv+vec2(0, normalDistance/iResolution.y));\n        \n    norm*=normalIntensity;\n    norm.z = sqrt(1.0-min(max(0.0, norm.x*norm.x+norm.y*norm.y), 1.0));\n\n    //col = norm;\n    \n    //Shading\n    float light = max(0.0, dot(norm, normalize(lightPos-vec3(uv.xy, 0.0))));\n        \n    col*=light;\n    \n    col = mix(col, vec3(1), smoothstep(0.01 + 1./iResolution.y, 0.01, length((uv-lightPos.xy)*vec2(1., iResolution.y/iResolution.x))));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}