{
    "Shader": {
        "info": {
            "date": "1486491531",
            "description": "Playing with softjoins\nMade after Checkerboard Flight (https://www.shadertoy.com/view/XtKXWt)\nUsing an app on Android called ShaderBox",
            "flags": 0,
            "hasliked": 0,
            "id": "4lKXWt",
            "likes": 19,
            "name": "Elastic Checkerboard",
            "published": 3,
            "tags": [
                "raymarching",
                "simple",
                "checkerboard",
                "mobile",
                "softjoin",
                "elastic"
            ],
            "usePreview": 0,
            "username": "PauloFalcao",
            "viewed": 1069
        },
        "renderpass": [
            {
                "code": "// Elastic Checkerboard\n//\n//\n// Playing with softjoins\n//\n// Made after Checkerboard Flight (https://www.shadertoy.com/view/XtKXWt)\n// using an app on Android called ShaderBox\n//\n\n\n// Join\nfloat softjoin(float x,float y,float s){\n  if (x>s||y>s) return min(x,y);\n  else return -length(vec2(x,y)-s)+s;\n}\n\n// Distance function\nfloat objdist(vec3 p){\n  float g=sin(iTime)*2.0+2.0;\n  float c=length(p.xz)-2.0;\n  return max(softjoin(p.y,c,g),p.y-g+0.5);\n}\n\n// Object Color\nvec3 objcolor(vec3 p){\n  p*=0.9;\n  vec2 f=fract(p.xz)-0.5;\n  return vec3(f.x*f.y>0.0?1.0:0.0);\n}\n\nvec3 grad(in vec3 p){\n  //tetrahedron normal\n  const vec2 e=vec2(0.01,-0.01);\n  float v1=objdist(p+e.xyy);\n  float v2=objdist(p+e.yyx);\n  float v3=objdist(p+e.yxy);\n  float v4=objdist(p+e.xxx);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nfloat shading(vec3 light,vec3 p,float global){\n  vec3 n=grad(p);\n  vec3 v=normalize(light-p);\n  return max(dot(n,v),0.0)+global;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n  vec2 uv=fragCoord.xy/iResolution.xy-0.5;\n  uv.x*=iResolution.x/iResolution.y;\n\n  //Camera\n  vec3 lookat=vec3(0.0,0.0,0.0);\n  vec3 cam=vec3(sin(iTime)*10.0,5.0,cos(iTime)*10.0);\n  vec3 up=vec3(0.0,1.0,0.0);\n\n  vec3 light=vec3(10.0,5.0,10.0);\n  float globallight=0.2;\n\n  float camdist=2.0;\n  float camsize=2.0;\n  float maxdist=50.0;\n  float preci=0.001;\n\n  vec3 v=cam-lookat;\n  vec3 camx=normalize(cross(up,v))*camsize;\n  vec3 camy=normalize(cross(v,camx))*camsize;\n\n  vec3 campoint=cam-normalize(v)*camdist+\n    camx*uv.x+\n    camy*uv.y;\n\n  vec3 ray=normalize(campoint-cam);\n\n  //Ray marching\n  vec3 p=campoint;\n  float d=maxdist;\n  float s=0.0;\n  for(int i=0;i<256;i++){\n    d=objdist(p);\n    s+=d;\n    if (d<preci) break;\n    if (s>maxdist) break;\n    p=campoint+ray*s;\n  }\n\n  float fadeout=max(maxdist-s,0.0)/maxdist;\n  fragColor = vec4(objcolor(p)*fadeout*\n     shading(light,p,globallight),\n     1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}