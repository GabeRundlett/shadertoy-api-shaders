{
    "Shader": {
        "info": {
            "date": "1636354840",
            "description": "playing with cubes of cubes and booleans of more cubes\noptimization ideas:\n- premarch to the main cube\n- premarch to the max subcube",
            "flags": 0,
            "hasliked": 0,
            "id": "NsKSzt",
            "likes": 4,
            "name": "lattice sdf",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "distancefield",
                "sdf"
            ],
            "usePreview": 0,
            "username": "ufffd",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "// show step count. click to set splitscreen\n#define DEBUG_STEPS\n\n#define AA 1\n\n//---------------------------------\n// geometry controls\nconst float bothscale = 1.;\nconst float boxscale = 0.125 * bothscale;\nconst float diascale = 0.38 * bothscale;\nconst float timeoffset = 1.5; // -2 to 2\nconst int pattern = 999; // pattern picker, 1-whatever, 999 to test\nconst float dancespeed = 1.5;\n// render controls\nconst float render_depth = 13.0; // range 9ish to 11, lower = goopy\nconst int render_steps = 64; // options: 4, 8, 16, 32. low = goopy\nconst float lines = 0.0; // 0 to ~3.5\nconst int colormode = 2;\n\nfloat cubeDance(in float time, in vec3 pos) {\n    float size = 0.0;\n    if (pattern == 1) {\n        size += sin(time + pos.y * 3.15 * -.75);\n        if (mod(pos.x + pos.z,2.0) < 0.5) size *= -1.;\n    } else if (pattern == 2)\n        size += sin(time + pos.x * pos.y * (3.0 + 2.0 * pos.z));\n    else if (pattern == 3) \n        size += pos.y*cos(time*0.5);    \n    else {\n        vec3 normpos = (pos+0.5) * 0.4 - 1.; // -1 to 1\n        vec3 centerpos = abs(normpos) * 2.0 - 1.0;\n        size = sin(centerpos.z + centerpos.x + centerpos.y + time);\n    }\n    return size; // -1 to 1\n}\n\nfloat map(in vec3 pos)\n{\n    float d = 1e10;\n\n    pos -= vec3(.0,2.,.0);\n    \n    float c = .5;\n    float l = 2.;\n    \n    vec3 opos = pos;\n    \n    pos = pos-c*clamp(round(pos/c),-l,l);\n\n    \n    \n    \n    vec3 cubepos = pos; // something wrong here\n    \n    \n    \n    \n    float temptime = iTime*dancespeed;\n\n    float boxsize = cubeDance(temptime, cubepos);\n    boxsize = clamp(boxsize*1.4+0.2, -1., 1.0);\n    boxsize = sin(boxsize)*boxscale+boxscale;\n\n    float diasize = cubeDance(temptime+timeoffset, cubepos);\n    diasize = clamp(diasize*1.4+0.2, -1.1, 1.0);\n    diasize = sin(diasize)*diascale+diascale;\n    float d2 = sdBox(\n        pos, \n        boxsize\n    ); \n    float d3 = sdOctahedron(\n        pos, \n        diasize\n    );\n    // d3 = 0.; // show box only\n    // d2 = 0.; // show diamond only\n    d = min( d, max( d2, d3 ));\n    \n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep ) );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.01, 1.00 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n \n        vec3 ro = vec3(.0,5.8,10.);\n        vec3 rd = normalize(vec3(p-vec2(.0,2.05),-5.));\n        \n        ro.xz *= opRotate(iTime * .5 + p.y * 1.2);\n        rd.xz *= opRotate(iTime * .5 + p.y * 1.2);\n\n        float t = 8.5;\n        int stepped = 0;\n        for( int i=0; i<render_steps; i++ )\n        {\n            stepped++;\n            vec3 p = ro + t*rd;\n            float h = map(p);\n            if( abs(h)<0.005 || t>render_depth ) break;\n            t += h;\n        }\n        \n        #ifdef DEBUG_STEPS\n            if (abs(iMouse.x) < fragCoord.x) {\n                float nstepped = float(stepped)/float(render_steps);\n                fragColor = vec4(nstepped);\n                return;\n            }\n        #endif\n\n        vec3 col = vec3(0.0);\n\n        if( t<render_depth + lines)\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            vec3 lig = vec3(0.8);\n            float dif = clamp(dot(nor,lig),0.0,1.0);\n            float sha = calcSoftshadow( pos, lig, 0.001, 0.5, 12.0 );\n            float amb = 0.5 + 0.5*nor.y;\n        \n            if (colormode == 1){\n                float amb = 0.5 + 0.5*nor.y;\n                col = vec3(sha + amb) / 2.;\n                col -= 0.5;\n                col *= 2.0;\n                col = pow(col, vec3(0.5));\n                col /= 2.0;\n                col += 0.5;\n                col = vec3(step(amb,0.3));\n            } else if (colormode == 2){\n                float amb = 0.5 + 0.5*nor.y;\n                col = vec3(sha + amb) / 2.;\n                col -= 0.5;\n                col *= 2.0;\n                col = pow(col, vec3(0.25));\n                col /= 2.0;\n                col += 0.5;\n            } else {\n                col = vec3(0.4)*amb + \n                      vec3(.80)*dif*sha;\n            }\n            \n        }\n\n        col = sqrt( col );\n        \n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution\n\n// SDF functions from IQ:\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Smooth vs sharp boolean operations for combining shapes\n\n// Related techniques:\n//\n// Elongation  : https://www.shadertoy.com/view/Ml3fWj\n// Rounding    : https://www.shadertoy.com/view/Mt3BDj\n// Onion       : https://www.shadertoy.com/view/MlcBDj\n// Metric      : https://www.shadertoy.com/view/ltcfDj\n// Combination : https://www.shadertoy.com/view/lt3BW2\n// Repetition  : https://www.shadertoy.com/view/3syGzz\n// Extrusion2D : https://www.shadertoy.com/view/4lyfzw\n// Revolution2D: https://www.shadertoy.com/view/4lyfzw\n//\n// More information here: https://iquilezles.org/articles/distfunctions\n\nmat2 opRotate(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n//-------------------------------------------------\n\nfloat sdSphere( in vec3 p, in float r )\n{\n    return length(p)-r;\n}\n\n\nfloat sdBox( vec3 p, float b)\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdDiamond( vec3 p, float b)\n{\n  vec3 rot = p;\n  rot.xy = rot.xy * opRotate(0.785);\n  rot.xz = rot.xz * opRotate(.616);\n  rot.yz = rot.yz * opRotate(-.616);\n  vec3 d = abs(rot) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float d = (p.x+p.y+p.z-s)*0.57735027;\n  return d;\n}\n\nfloat opRepLimBox( in vec3 p, in float c, in vec3 l, float bb )\n{\n    vec3 q = p-c*clamp(round(p/c),-l,l);\n    return sdBox(q, bb);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}