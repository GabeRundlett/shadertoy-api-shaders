{
    "Shader": {
        "info": {
            "date": "1491336569",
            "description": "A single function for both projections :)\nKeys:\n[b]space[/b] for the gnomonic projection;\n[b]1-3[/b] for settings; \n[b]enter[/b] for equirectangular.\nMove mouse for central point lat/lon.\nPrevious version see: [url]https://shadertoy.com/view/4sjcz1[/url].",
            "flags": 16,
            "hasliked": 0,
            "id": "ldBczm",
            "likes": 27,
            "name": "Unified Gnomonic & Stereographic",
            "published": 3,
            "tags": [
                "2d",
                "cubemap",
                "projection",
                "panorama",
                "stereographic",
                "equirectangular",
                "gnomonic",
                "rectilinear",
                "littleplanet"
            ],
            "usePreview": 0,
            "username": "starea",
            "viewed": 2937
        },
        "renderpass": [
            {
                "code": "/** \n * Cubemap to Stereographic / Gnomonic / Rectilinear / Equirectangular unwrapping by Ruofei Du (DuRuofei.com)\n * Link to demo: https://www.shadertoy.com/view/ldBczm\n * starea @ ShaderToy, License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n * https://creativecommons.org/licenses/by-nc-sa/3.0/\n * \n * The conversions to stereographic and gnomonic projection are very similar, so I merged them together.\n * One intuition is both of the projections use spherical lens.\n * The only difference is written in line 50. \n * Hopefully my commented code is useful for your research & fun! Please comment if you used it for your works :-)\n *\n * Interaction:\n * Click and move your cursor to alter the central point.\n * Press space to compare the gnomonic projection.\n * Press enter for the equirectangular projection. \n * Press 1 for zooming in, which creates a very similar effect as reference [6], if you click the center.\n * Press 2 for zooming out, creating the \"little planet\" effect in photography.\n * Press 3 for a slight fish-eye lens.\n *\n * Reference: \n * [1] Stereographic projection: https://en.wikipedia.org/wiki/Stereographic_projection\n * [2] Weisstein, Eric W. \"Stereographic Projection.\" From MathWorld--A Wolfram Web Resource. http://mathworld.wolfram.com/StereographicProjection.html\n * [3] Gnomonic projection: https://en.wikipedia.org/wiki/Gnomonic_projection\n * [4] Weisstein, Eric W. \"Gnomonic Projection.\" From MathWorld--A Wolfram Web Resource. http://mathworld.wolfram.com/GnomonicProjection.html\n * [5] Equirectangular projection. https://en.wikipedia.org/wiki/Equirectangular_projection\n * [6] Bourke, Paul. \"Using a spherical mirror for projection into immersive environments.\" SIGGRAPH Asia 2005.\n *     http://paulbourke.net/papers/graphite2005/graphite.pdf\n * [7] Little Planet. https://en.wikipedia.org/wiki/Little_planet\n *\n * My related ShaderToy project:\n * [1] starea. Cubemap to Gnomonic Projection. https://www.shadertoy.com/view/4sjcz1\n *\n * Similar projects in ShaderToy\n * [1] hornet. Projection: Stereographic. https://www.shadertoy.com/view/Xsl3D2\n *\n * [1]'s code is super efficient since it uses the Cartesian coordinates from Wikipedia, \n * but it defines the line intersects the plane z = 0, thus not allowing varying central point.\n *\n * Last updated: 4/4/2017\n *\n **/\nconst float PI = 3.1415926536;\nconst float PI_2 = PI * 0.5; \nconst float PI2 = PI * 2.0; \nconst int KEY_SPACE = 32;\nconst int KEY_ENTER = 13;\nconst int KEY_1 = 49;\nconst int KEY_2 = 50;\nconst int KEY_3 = 51; \n\nfloat localRadius = 0.15; \n\n// Forked from fb39ca4's keycode viewer tool @ https://www.shadertoy.com/view/4tt3Wn\nfloat keyPressed(int keyCode) {\n\treturn texture(iChannel1, vec2((float(keyCode) + 0.5) / 256., .5/3.)).r;   \n}\n\n// Main function, convert screen coordinate system to spherical coordinates in stereographic / gnomonic projection\n// screenCoord: [0, 1], centralPoint: [0, 1], FoVScale: vec2(0.9, 0.2) recommended, localRadius\nvec2 calcSphericalCoordsFromProjections(in vec2 screenCoord, in vec2 centralPoint, in vec2 FoVScale, in bool stereographic) {\n    vec2 cp = (centralPoint * 2.0 - 1.0) * vec2(PI, PI_2);  // [-PI, PI], [-PI_2, PI_2]\n    \n    // Convert screen coord in gnomonic mapping to spherical coord in [PI, PI/2]\n    vec2 convertedScreenCoord = (screenCoord * 2.0 - 1.0) * FoVScale * vec2(PI, PI_2); \n    float x = convertedScreenCoord.x, y = convertedScreenCoord.y;\n    \n    float rou = sqrt(x * x + y * y), c = stereographic ? 2.0 * atan(rou / localRadius / 2.0) : atan(rou); \n\tfloat sin_c = sin( c ), cos_c = cos( c );  \n    \n    float lat = asin(cos_c * sin(cp.y) + (y * sin_c * cos(cp.y)) / rou);\n\tfloat lon = cp.x + atan(x * sin_c, rou * cos(cp.y) * cos_c - y * sin(cp.y) * sin_c);\n    \n\tlat = (lat / PI_2 + 1.0) * 0.5; lon = (lon / PI + 1.0) * 0.5; //[0, 1]\n\n    // uncomment the following if centralPoint ranges out of [0, PI/2] [0, PI]\n\t// while (lon > 1.0) lon -= 1.0; while (lon < 0.0) lon += 1.0;\n\t// while (lat > 1.0) lat -= 1.0; while (lat < 0.0) lat += 1.0;\n    \n    // convert spherical coord to cubemap coord\n   return (bool(keyPressed(KEY_ENTER)) ? screenCoord : vec2(lon, lat)) * vec2(PI2, PI);\n}\n\nvec2 calcSphericalCoordsInStereographicProjection(in vec2 screenCoord, in vec2 centralPoint, in vec2 FoVScale) {\n\treturn calcSphericalCoordsFromProjections(screenCoord, centralPoint, FoVScale, true); \n}\n\nvec2 calcSphericalCoordsInGnomonicProjection(in vec2 screenCoord, in vec2 centralPoint, in vec2 FoVScale) {\n\treturn calcSphericalCoordsFromProjections(screenCoord, centralPoint, FoVScale, false); \n}\n\n// convert cubemap coordinates to spherical coordinates: \nvec3 sphericalToCubemap(in vec2 sph) {\n    return vec3(sin(sph.y) * sin(sph.x), cos(sph.y), sin(sph.y) * cos(sph.x));\n}\n    \n// convert screen coordinate system to cube map coordinates in rectilinear projection\nvec3 calcCubeCoordsInGnomonicProjection(in vec2 screenCoord, in vec2 centralPoint, in vec2 FoVScale) {\n\treturn sphericalToCubemap( calcSphericalCoordsInGnomonicProjection(screenCoord, centralPoint, FoVScale) );\n}\n\nvec3 calcCubeCoordsInStereographicProjection(in vec2 screenCoord, in vec2 centralPoint, in vec2 FoVScale) {\n\treturn sphericalToCubemap( calcSphericalCoordsInStereographicProjection(screenCoord, centralPoint, FoVScale) );\n}\n\n// the inverse function of calcSphericalCoordsInGnomonicProjection()\nvec2 calcEquirectangularFromGnomonicProjection(in vec2 sph, in vec2 centralPoint) {\n    vec2 cp = (centralPoint * 2.0 - 1.0) * vec2(PI, PI_2);\n\tfloat cos_c = sin(cp.y) * sin(sph.y) + cos(cp.y) * cos(sph.y) * cos(sph.y - cp.y);\n    float x = cos(sph.y) * sin(sph.y - cp.y) / cos_c;\n    float y = ( cos(cp.y) * sin(sph.y) - sin(cp.y) * cos(sph.y) * cos(sph.y - cp.y) ) / cos_c; \n    return vec2(x, y) + vec2(PI, PI_2); \n}\n\n// Forked from: https://www.shadertoy.com/view/MsXGz4, press enter for comparison\nvec3 iqCubemap(in vec2 q, in vec2 mo) {\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x / iResolution.y;\n\t\n    // camera\n\tfloat an1 = -6.2831 * (mo.x + 0.25);\n\tfloat an2 = clamp( (1.0-mo.y) * 2.0, 0.0, 2.0 );\n    vec3 ro = 2.5 * normalize(vec3(sin(an2)*cos(an1), cos(an2)-0.5, sin(an2)*sin(an1)));\n    vec3 ww = normalize(vec3(0.0, 0.0, 0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0, -1.0, 0.0), ww ));\n    vec3 vv = normalize(cross(ww, uu));\n    return normalize( p.x * uu + p.y * vv + 1.4 * ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    \n\t// Modify this to adjust the field of view\n    vec2 FoVScale = vec2(0.5, 0.5); \n    if (bool(keyPressed(KEY_1))) {\n        FoVScale = vec2(0.5, 0.5) * 0.5; \n    } else if (bool(keyPressed(KEY_2))) {\n        FoVScale = vec2(0.5, 0.5) * 2.0; \n    } else if (bool(keyPressed(KEY_3))) {\n        FoVScale = vec2(0.5, 0.5) * 3.0; \n        localRadius = 3.0; \n    } \n         \n    // central / foveated point, iMouse.xy corresponds to longitude and latitude \n    vec2 centralPoint = iMouse.xy / iResolution.xy;\n    \n    // press enter to compare with recilinear projection\n    vec3 dir = bool(keyPressed(KEY_SPACE))\n        ? calcCubeCoordsInGnomonicProjection(q, centralPoint, FoVScale) \n        : calcCubeCoordsInStereographicProjection(q, centralPoint, FoVScale);\n    \n\tvec3 col = texture(iChannel0, dir).rgb;\n    \n    // test if the inverse function works correctly by pressing z\n    if (bool(keyPressed(90))) {\n    \tvec2 sph = calcSphericalCoordsInGnomonicProjection(q, centralPoint, FoVScale);    \n        sph = calcEquirectangularFromGnomonicProjection(sph, centralPoint);\n        col = vec3(sph / vec2(PI2, PI), 0.5); \n    }\n    \n    col *= 0.25 + 0.75 * pow( 16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.15 );\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}