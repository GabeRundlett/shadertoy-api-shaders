{
    "Shader": {
        "info": {
            "date": "1638716896",
            "description": "boost connected components calc. in hexatruchets https://shadertoy.com/view/fttXzn\nas in the quadri-truchet series ( e.g. https://www.shadertoy.com/view/NlGGRV )\nBoost done in current windows\nMouse.y: zoom     SPACE: reset    TAB: highlight 10% components",
            "flags": 48,
            "hasliked": 0,
            "id": "fltXRH",
            "likes": 13,
            "name": "connected compo.in hexatruchets4",
            "published": 3,
            "tags": [
                "connected",
                "doodles",
                "truchets",
                "entanglement"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "// boost connected components calculation of https://shadertoy.com/view/fttXzn\n// coloring connected componant variant of https://shadertoy.com/view/flK3zc\n// variant with shadows https://shadertoy.com/view/flGGR3\n\n#define hue(v) vec4( .6 + .6 * cos( .5+(v)  + vec3(0,23,21)  ) ,1 )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    N*= 1.5;\n    if (length(iMouse.xy)>10.) N *= exp2(4.*(iMouse.y/R.y-.2)); // mouse zoom\n    float s = sqrt(3.), r = 1./s, a;\n    vec2 U = (N * u / R.y) * mat2(s,-1,0,2)/4. + 4.*iTime, // to tilted space\n         I = floor(U), V;                                // I : hexa tile ID\n    U = fract(U) *  mat2(1,.5,0,s/2.) - vec2(1,r)/2.;    // U : local coords\n    U += U.y*s+abs(U.x) < 0. ? I.y--,   + vec2( 0,r)     // Set to hexagon over the 3\n        : U.x < 0.           ? I.x--, -.5*vec2(-1,r)     //   covered by the tilted cell\n        :                             -.5*vec2( 1,r);\n // I.x += N;\n    O-=O;                                                // --- draw tiles\n\n    int t = typ(I);                                      // random tile type\n    a = float(ang(I))/6. *6.2831853;                     // random tile rotation\n    U *= mat2( cos( a - vec4(0,1.57,-1.57,0) ) );        // do rotation\n\n#define S(n,v)   vec2(n, smoothstep( N/R.y, 0., v ) )    // Draw among 3 types:\n#define C(n,v,r) S(n, abs(length(v)-r/2.) )           \n#define sha(x,y) S(0, length(U-vec2(x,y))-.1)    \n#define max(a,b) ( (a).y>(b).y ? a : b )\n    V = t==0 ?  max(max(C(1, U - vec2(.5,-r/2.) , r),    // 3 short turns\n                        C(2, U + vec2(.5, r/2.) , r)),\n                        C(0, U - vec2(0,r), r) )\n      : t==1 ?  max(max(C(1, U - vec2(.5,-s/2.), s),     // 2 larges + 1 short\n                        C(2, U + vec2(.5, s/2.), s) - sha(0,-.17) ),   // - shadow\n                        C(0, U - vec2(0,r), r))\n      :         max(max(C(2, U - vec2(.5,-s/2.), s),     // 2 larges + 1 line\n                        C(1, U + vec2(.5,-s/2.), s) - sha(-.08,.12) ), // - shadow\n                        S(0, abs(U.x*s+U.y) / 2.)   - sha(.08,-.12) ); // - shadow\n    O += V.y;                                            // Vx: #thread Vy: mask\n\n    O *= hue(T(I)[int(V.x)] );                     // show connected components\n    if ( keyToggle(9) && int(T(I)[int(V.x)])%10 > 0) O*=.3; // TAB: enlight 10%\n // if (iMouse.z > 0.) { O += (1.-O.a)*.4*hue(6.28*fract(1e4*sin(I.y + I.x*N))); return; } // if click show tiling\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define H(p)   fract(sin(dot(p, vec2(12.9898, 78.233))-floor(iTime)) * 43758.5453)\n\n// the define version doesn't work on Windows\nint t,a; vec2 U;\nfloat n( int d) {\n    vec4 T = T( U+ vec2[](vec2(-1,1),vec2(-1,0),vec2(0,-1),vec2(1, -1),vec2(1,0),vec2(0,1))[(d+a)%6] );\n    int  A = ( d + a - (int(T.a)%8) +3 +6 )%6,\n         n = int(T.a)/8;\n    return T[ int[](0, n>1?1:2, n==1?1:2, (n+1)%3, n<2?1:2, n<2?0:1)[A] ];\n}\n//#define n(d) ( T = T( U+ vec2[](vec2(-1,1),vec2(-1,0),vec2(0,-1),vec2(1, -1),vec2(1,0),vec2(0,1))[(d+a)%6] ), \\\n//               A = ( d + a - (int(T.a)%8) +3 +6 )%6,    \\\n//               n = int(T.a)/8,                          \\\n//               T[ int[](0, n>1?1:2, n==1?1:2, (n+1)%3, n<2?1:2, n<2?0:1)[A] ] )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    U = u-.5;\n    if (iFrame < 1 || keyDown(32) ) {\n        O.a = 8.* floor(3.*H(U))                       // random tile type\n            + floor(6.*H(U+.5));                       // random tile rotation\n        O.xyz = U.y + U.x*4096. + vec3(0,.3,.6);       // init ids#1,2,3\n        return;\n    }\n    O = T(U);                                 // recover previous state\n    t = typ(U), a = ang(U);                   // tile type and angle\n    \n                                              // --- propagate id along connections\n                                              // read id in neighbor in direction d\n\n    if (t==0) {       // tile type #0   For each thread, new id = min(connections)\n        O.x = min( O.x, min( n(5), n(0) ));\n        O.y = min( O.y, min( n(3), n(4) ));\n        O.z = min( O.z, min( n(1), n(2) ));\n    }\n    else if (t==1) {  // tile type #1   For each thread, new id = min(connections)\n        O.x = min( O.x, min( n(5), n(0) ));\n        O.y = min( O.y, min( n(2), n(4) ));\n        O.z = min( O.z, min( n(1), n(3) ));\n    }\n    else  {           // tile type #2   For each thread, new id = min(connections)\n        O.x = min( O.x, min( n(0), n(3) ));\n        O.y = min( O.y, min( n(1), n(5) ));\n        O.z = min( O.z, min( n(2), n(4) ));\n    }\n                  // --- shortcut: at color change, update the color source pixel\n  //if (iFrame%2<1) return; // to not count twice the same change\n    N *= 2.;\n    float Nx = floor(N*R.x/R.y), s = sqrt(3.);\n    vec2 //D = mat2(1,.5,0,s/2.) * vec2(4.*iTime);       // track only the screen region\n         D = vec2(4.*iTime);\n  //D = floor(R*fract(1e3*iTime*vec2(1,.7813)));         // random updates pages\n  //D = floor(R*fract(1e3*sin(U*mat2(R,174.-R)-iTime))); // full random updates\n    for( float j = 0.; j < N/8.; j++)\n        for( float i = 0.; i < Nx/8.; i++) {\n            vec4 T = T1( mod(D/8.+vec2(i,j),R/8.) );\n            vec2 o = T.xy, n = T.zw;          // changed old->new value\n            if (O.x==o.x) O.x = n.x;          // oldvalue was my seg1 : update\n            if (O.x==o.y) O.x = n.y;          // (only 2 values are stored in bufB)\n            if (O.y==o.x) O.y = n.x;          // oldvalue was my seg2 : update\n            if (O.y==o.y) O.y = n.y;\n            if (O.z==o.x) O.z = n.x;          // oldvalue was my seg3 : update\n            if (O.z==o.y) O.z = n.y;\n        }\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float N = 32.;                                    // vertical number of tiles\n\n#define typ(U) int(T(U).a)/8                      // decode tile type and angle\n#define ang(U) int(T(U).a)%8\n\n#define R               iResolution.xy\n#define T(U)            texelFetch(iChannel0, ivec2(U+R) % ivec2(R), 0 )\n#define T1(U)           texelFetch(iChannel1, ivec2(U), 0 )\n#define keyToggle(c)  ( texelFetch(iChannel3,ivec2(c,2),0).x > 0.)\n#define keyDown(c)    ( texelFetch(iChannel3,ivec2(c,1),0).x > 0.)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// --- reduction map of change\n// We should treat the change in any 3 threads per tile, but this requires storing 6 floats.\n// -> instead of duplicating loops and storage to fit vec4, we just test 2 threads.\n// Correlation in neighbor tiles should capture the 3rd.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U-=.5;\n    if (U.x > R.x/8. || U.y > R.y/8. ) return;\n    \n    O-=O;\n    for (int k=0; k < 64; k++ ) {\n        vec2 V = 8.*U + vec2(k%8,k/8);\n        vec4 o = T1(V),                         // old vs new value\n             n = T (V);\n        if ( o.x != n.x ) O.xz = vec2(o.x,n.x); // if changed, store \n        if ( o.y != n.y ) O.yw = vec2(o.y,n.y);\n        if (O.x*O.y!=0.) break;\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- keep previous version\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}