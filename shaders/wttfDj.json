{
    "Shader": {
        "info": {
            "date": "1618255205",
            "description": "Mascot of Golang",
            "flags": 0,
            "hasliked": 0,
            "id": "wttfDj",
            "likes": 7,
            "name": "Gopher Golang",
            "published": 3,
            "tags": [
                "modeling",
                "golang"
            ],
            "usePreview": 0,
            "username": "cepalle",
            "viewed": 292
        },
        "renderpass": [
            {
                "code": "// Fork of \"CyrillRayMarching starting poin3\" by sylvain69780. https://shadertoy.com/view/ttVcRG\n// 2021-01-21 21:18:38\n\n// Fork of \"RayMarching starting point\" by BigWIngs. https://shadertoy.com/view/WtGXDD\n// 2020-11-29 14:59:32\n\n// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 256\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdHear(vec3 p) {\n    p.xz *= Rot(1.6);\n    \n    vec3 q = p.yxz;\n    float dTorus = sdTorus(q, vec2(0.15, 0.05));\n    float dCylinder = sdCappedCylinder(q - vec3(0.0, -0.025, 0.0), 0.15, 0.025);\n    float d = min(dTorus, dCylinder);\n    return d;\n}\n\nfloat sdFoot(vec3 p) {\n    vec3 aFoot = vec3(0.6, -0.5, -0.1);\n    p.xz *= Rot(0.0);\n    float dFoot1 = sdStick(p, aFoot, aFoot - vec3(0.1, 0.07, 0.4), 0.15, 0.1).x;\n    float dFoot2 = sdStick(p, aFoot, aFoot - vec3(0.0, 0.07, 0.4), 0.15, 0.1).x;\n    return min(dFoot1, dFoot2);\n}\n\nvec2 GetDistMat(vec3 p) {\n    float m=0.0;\n    float alpha = sin(iTime) / 10.0;\n    float alphab = sin(iTime - 1.0) / 10.0;\n\n    vec3 pBody = p;\n    pBody.zy *= Rot(alphab);\n    float dbody = sdEllipsoid(pBody-vec3(0.0,-1.0,0.0),vec3(0.65,0.5,0.5));  // body\n\n    float dgrnd = p.y + 2.0;\n    \n    p = p - vec3(0.0, -0.5, 0.0);\n    p.zy *= Rot(alpha);\n    p = p + vec3(0.0, -0.5, 0.0);\n\n    float dhead = sdEllipsoid(p,vec3(0.65,0.5,0.5)); // head\n\n    float dbodyhead = smin( dhead, dbody,1.5);  // body + head\n\n    vec3 pNose = p-vec3(0.0,-0.20,-0.56);\n    // pNose.y += pNose.x * p.x;\n    pNose = opCheapBend( pNose, -2.0 );\n    float dNose = sdVerticalCapsule(pNose, 0.2, 0.08); // Nose\n\n    float dTruffle = sdEllipsoid(p-vec3(0.0,-0.15,-0.61),vec3(0.07,0.05,0.05)); // Truffle\n\n    vec3 pArm = pBody;\n    pArm.x = abs(pArm.x);\n    vec3 a = vec3(0.6, -0.5, -0.1);\n    float dArm = sdStick(pArm, a, a - vec3(-0.3, 0.3, 0.0), 0.1, 0.15).x; // Arm\n\n    p.x = abs(p.x);\n\n    float dTeeth = sdBox(p-vec3(0.050,-0.30,-0.57), vec3(0.03, 0.06, 0.006)) - 0.02;\n\n    float dhear = sdHear(p-vec3(0.50,0.30,0.15));    \n    \n    float deyeW = length(p-vec3(0.3,0.0,-0.4))-0.25;\n    float deyeB = length(p-vec3(0.3,0.0,-0.46))-0.20;\n    \n    vec3 pFoot = pBody;\n    pFoot.x = abs(pFoot.x);\n    pFoot = pFoot - vec3(-0.25, -0.95, 0.25);\n    float dFoot = sdFoot(pFoot);\n    // d-min\n    \n    float d = min(dbodyhead, dgrnd);\n    d = min(d, deyeW);\n    d = min(d, deyeB);\n    d = min(d, dhear);\n    d = min(d, dNose);\n    d = min(d, dTruffle);\n    d = min(d, dTeeth);\n    d = min(d, dArm);\n    d = min(d, dFoot);\n    \n    // color\n    \n    if ( deyeW == d )  m = 1.0;\n    if ( deyeB == d )  m = 3.0;\n    if ( dgrnd == d ) m = 2.0;\n    if ( dbodyhead == d ) m = 4.0;\n    if ( dhear == d ) m = 4.0;\n    if ( dNose == d ) m = 5.0;\n    if ( dTruffle == d ) m = 3.0;\n    if ( dTeeth == d ) m = 1.0;\n    if ( dArm == d ) m = 4.0;\n    if ( dFoot == d ) m = 5.0;\n\n    return vec2(d,m);\n}\n\nfloat GetDist(vec3 p) {\n    return GetDistMat(p).x;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0),f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.11*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float mint = SURF_DIST;\n    float tmax = MAX_DIST;\n    int technique =1;\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    \n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = GetDist( ro + rd*t );\n\n        // traditional technique\n        if( technique==0 )\n        {\n        \tres = min( res, 10.0*h/t );\n        }\n        // improved technique\n        else\n        {\n            // use this if you are getting artifact on the first iteration, or unroll the\n            // first iteration out of the loop\n            //float y = (i==0) ? 0.0 : h*h/(2.0*ph); \n\n            float y = h*h/(2.0*ph);\n            float d = sqrt(h*h-y*y);\n            res = min( res, 10.0*d/max(0.0,t-y) );\n            ph = h;\n        }\n        \n        t += h;\n        \n        if( res<0.0001 || t>tmax ) break;\n        \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0, 1, -3.0);\n    if ( iMouse.x > 10.0 ) {\n        vec2 m = iMouse.xy/iResolution.xy-0.5;\n        ro.yz *= Rot((m.y*0.5)*3.14);\n        ro.xz *= Rot(m.x*6.2831);\n    } else {\n        ro.xz *= Rot(sin(iTime*.1)*.2);\n    }\n    vec3 rd = GetRayDir(uv, ro, vec3(0.0, -0.5, 0.0), 1.);\n\n    vec3 col = vec3(0.4, 0.4, 0.9) * (1.0 - rd.y);\n    \n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n\t\t// lighing  \n        float matid = GetDistMat(p).y;\n        if (matid == 1.0) {\n            col = vec3(0.9,0.9,0.9);\n        } else if (matid == 2.0) {\n            col = vec3(0.6,0.6,0.6);\n        } else if (matid == 3.0) {\n            col = vec3(0.05,0.05,0.05);\n        } else if (matid == 4.0) {\n            col = vec3(0.1,0.5,0.5);\n        } else {\n            col = vec3(0.8, 0.6, 0.2);\n        }\n        vec3 sunDir = normalize(vec3(4, 4, -3));\n        // lighting terms\n        float occ = calcOcclusion(p, n);\n        float sha = calcSoftshadow( p+n*.001, sunDir );\n        float sun = clamp( dot( n, sunDir ), 0.0, 1.0 );\n        float sky = clamp( 0.5 + 0.5*n.y, 0.0, 1.0 );\n        float ind = clamp( dot( n, normalize(sunDir*vec3(-1.0,0.0,-1.0)) ), 0.0, 1.0 );\n\n        // compute lighting\n        vec3 lin  = sun*vec3(1.64,1.27,0.99)*pow(vec3(sha),vec3(1.0,1.2,1.5));\n                lin += sky*vec3(0.16,0.20,0.28)*occ;\n                lin += ind*vec3(0.40,0.28,0.20)*occ;\n\n        // multiply lighting and materials\n\t\tcol = col * lin;        \n        \n        \n        // float dif = dot(n, normalize(vec3(1,2,3)))*0.5+0.5;\n        // float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        // col *= dif;  \n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// https://iquilezles.org/articles/smin\nfloat smin(float a, float b, float k) {\n    float h = max(k-abs(a-b), 0.0)/k;\n    return min(a, b) - h*h*h*k*(1.0/6.0);\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.x -= clamp( p.x, -h / 2.0, h / 2.0 );\n  return length( p ) - r;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 sdStick(vec3 p, vec3 a, vec3 b, float r1, float r2) // approximated\n{\n    vec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( length( pa - ba*h ) - mix(r1,r2,h*h*(3.0-2.0*h)), h );\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec3 opCheapBend( in vec3 p, float k )\n{\n    // const float k = 10.0; // or some other amount\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    return vec3(m*p.xy,p.z);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdEllipsoid( in vec3 p, in vec3 r ) \n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n    \n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n  float k = dot(q,vec2(-b,a));\n    \n  if( k < 0.0 ) return length(q) - r1;\n  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n  return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n    \n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    float x2 = dot2( pa*l2 - ba*y );\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;\n    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;\n                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}