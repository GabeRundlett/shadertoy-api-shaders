{
    "Shader": {
        "info": {
            "date": "1638480142",
            "description": "...originally done in twigl.app (266 chars there)\n[url]https://twitter.com/flockaroo/status/1466494447525539843[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "stKGDc",
            "likes": 25,
            "name": "tiny voxels",
            "published": 3,
            "tags": [
                "voxel",
                "golfing",
                "tinycode"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 653
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// tiny voxels\n//\n// ...not quite as minimal as on twigl (266 chars)\n// https://twitter.com/flockaroo/status/1466494447525539843\n//\n\n/*\nvoid mainImage( out vec4 o, in vec2 F )\n{\n#define C(p) max(c=abs(p),max(c.y,c.z)).x\n#define L(N) for(int i=0;i<N;i++){\n// had to trick a bit on the rotation - only diagonal rotation (full blown up rotate/axis func is quite big)\n   //vec3 e=cos(iTime-vec3(0,1.6,-1.6));e.yz/=sqrt(3.); mat3 R=mat3(e,e.zxy,e.yzx)+(1.-e.x)/3.;\n   float e=cos(iTime),a=sin(iTime)*.58; mat3 R=mat3(e,a,-a,-a,e,a,a,-a,e)+(1.-e)/3.;\n   vec3 p=R*vec3(0,0,40),v=R*vec3(F/iResolution.y-.5,1),m,c,d;\n   L(99)\n       d.x=9.;\n       L(8)\n           m=floor(p)+vec3(i&1,i/2&1,i/4&1);\n           d=min(d,C(R*m)>9.?.5:C(p-m)-.4);\n       }\n       p-=d.x*v;\n   }\n   o=abs(p*R).zzzz*.07;\n}\n*/\n\n// fabrice's breakdown - minus another 6 chars (vec3 d now float (prev e))\n#define C(p) max(c = abs(p), max(c.y, c.z)).x//\n#define L for(int i=0; i++ < \n\nvoid mainImage(out vec4 o, vec2 F) \n{\n    float d = cos(iTime), a = sin(iTime) * .58;\n    mat3 R = mat3(d, a, -a, -a, d, a, a, -a, d) + (1. - d) / 3.;\n    vec3 p = R * vec3(0, 0, 40), \n    v = R * vec3(F / iResolution.y - .5, 1), m, c;\n    L 99; p -= d * v ) {\n        d = 9.;\n        L 8; d = min(d, C(R * m) > 9. ? .5 : C(p - m) - .4) ) \n          m = floor(p) + vec3(i&1,i/2&1,i/4&1);\n    }\n\n    //o += abs(p * R).z * .07 - o;\n    o = abs(p * R).zzzz * .07;\n    // bit longer, but i also like this one - gives some central gradent on the depth field\n    //o += abs(dot(p,v)) * .07 - o;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}