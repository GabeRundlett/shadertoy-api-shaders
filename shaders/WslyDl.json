{
    "Shader": {
        "info": {
            "date": "1585850306",
            "description": "Energy Confinement - Result of improvised live code session on Twitch\nLIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 21:00 Uk time:\nhttps://www.twitch.tv/evvvvil_",
            "flags": 0,
            "hasliked": 0,
            "id": "WslyDl",
            "likes": 22,
            "name": "[TWITCH] Energy Confinement",
            "published": 3,
            "tags": [
                "demoscene",
                "space",
                "spline",
                "beam",
                "glow",
                "alien",
                "vortex",
                "scifi",
                "pyramid",
                "tentacle",
                "inside",
                "structure",
                "industrial",
                "twitch",
                "improv"
            ],
            "usePreview": 0,
            "username": "evvvvil",
            "viewed": 1358
        },
        "renderpass": [
            {
                "code": "// Energy Confinement - Result of an improvised live code session on Twitch\n\n// LIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 21:00 Uk time:\n// https://www.twitch.tv/evvvvil_\n\n// \"Seven continents in the shit, smoking like it's fuckin London\" - EL-P\n\nvec2 z,v,e=vec2(.00035,-.00035); float t,tt,b,bb,g,grow,gg,ps;vec3 pp,np,cp,xp,po,no,al,ld;//global vars. \nfloat bo(vec3 p,vec3 r){p=abs(p)-r;return max(max(p.x,p.y),p.z);} //box primitive function. \nmat2 r2(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));} //rotate function. \nfloat octa( vec3 p, float s){  p = abs(p); return (p.x+p.y+p.z-s)*0.57735027;} //dumb octagone function. Clearly not as cool as Dr Octagon, but then nobody really is...\nvec2 fb( vec3 p,float s, float f,float gs) // fb \"fucking bit\" function make a base geometry which we use to make weird spliune network\n{ //I will comment all this shit later...\n  b=sin(p.y*.2+1.57)+sin(p.y+tt*5.)*.15;\n  vec2 h,t=vec2(length(p.xz)-(1.+b),5);\n  t.x=min(length(abs(p.xz)-(1.+b)*.7)-(.2+b*.2),t.x);\n  pp=p; pp.y=mod(p.y,1.)-0.5;\n  h=vec2(length(pp.xy)-(.2),3);\n  h.x=max(h.x,length(p.xz)-(1.2+b));\n  t=t.x<h.x?t:h;\n  t.x=max(abs(t.x)-.2,-bo(p+vec3(0,0,0),vec3(3,s,3)));  \n  h=vec2(length(p.xz)-(1.1+b),6);\n  t=t.x<h.x?t:h;\n  t.x=max(abs(t.x)-.05,-bo(p,vec3(3,s-.5,3)));  \n  h=vec2(length(p.xz)-(.1+b*.3*f),6);\n  h.x=max(h.x,bo(p,vec3(3,12.3,3)));  \n  g+=0.2/(0.1+(h.x/gs)*(h.x/gs)*(80.-sin(p.y*.3-tt*3.)*79.));  \n  t=t.x<h.x?t:h;  \n  pp=p; pp.xz*=r2(sin(p.y*.3+tt));\n  h=vec2(length(abs(pp.xz)-(1.+b)*.2+sin(p.y*.3)*.2)-(.2*f),6);  \n  t=t.x<h.x?t:h;  \n  h=vec2(length(abs(pp.xz)-(1.+b)*.5+sin(p.y*.3)*.2)-((1.+b*2.)*.05)*f,3);  \n  t=t.x<h.x?t:h; \n  t.x*=0.7;return t;\n}\nvec2 pyra(vec3 p,float s,float of,float m,float o){  \n  p*=(1.-grow*.1);\n  pp=p;pp.xz*=r2(.785); \n  vec2 h,t=vec2(octa(pp+vec3(0,grow*15.,0),s),m); //PYRA TOP  \n  t.x=max(abs(t.x)-o,p.y+grow*15.+of);    \n  h=vec2(octa(pp+vec3(0,-grow*15.,0),s),m); //PYRA BOTTOM\n  h.x=max(abs(h.x)-o,-p.y+grow*15.+of);  \n  t=t.x<h.x?t:h;\n  t.x=max(t.x,-(length(p.xz)-5.)); //CYLINDER CUT\n  if(s>24.) {\n    pp=abs(abs(abs(p)-vec3(0,8.+grow*15.,0))-vec3(0,2,0))-vec3(0,1,0);\n    t.x=max(t.x,-bo(pp,vec3(20,.3,20))); //THIN RECTANGLE CUT\n  }else{\n    gg+=0.15/(0.1+t.x*t.x*(20.-abs(sin(p.y*.2-tt*3.))*19.));//GLOW ONLY THE INSIDE PYRAMID\n  } return t;\n}\nvec2 mp( vec3 p )\n{ \n  bb=cos(p.y*.1);  ps=(1.-grow*.4);\n  cp=p*ps;cp.xz*=r2(grow*10.+sin(p.y*.05));    \n  np=cp;  np.xz*=r2(.785);  np.xz=abs(np.xz);  \n  np.xz-=(2.5+bb*4.*grow);\n  vec2 h,t=fb(np,4.5,1.,1.); h.x/=ps; //TWIRLS MIDDLE 4\n  h=fb(p*.42,2.,1.,.42); h.x/=.42; //TWIRLS MIDDLE SMALL\n  t=t.x<h.x?t:h; \n  h=fb(p*.105,2.+grow*8.,0.,.35); h.x*=6.; //TWIRLS HUGE\n  t=t.x<h.x?t:h; \n  h=fb(abs(p*.7)-(15.+grow*7.+bb*2.,11.,15.+grow*7.+bb*2.),2.,1.,.7); h.x/=.7; //TWIRLS outter 4\n  xp=p; t=t.x<h.x?t:h; \n  pp=cp;pp.xz=abs(pp.xz)-vec2(5.+bb*6.,5.+bb*6.)*grow;\n  h=fb(pp*.6,4.5,1.,.6); h.x/=(.7*ps); t=t.x<h.x?t:h;  //TWIRLS BIG 4\n  h=vec2(.9*length(cos(abs(p*.4)-vec3(0.,tt*4.+grow*10.,0.)+np*.04)),6); //PARTICLES\n  h.x=max(h.x,length(p.xz)-(14.+bb*3.+grow*6.));\n  gg+=0.1/(0.1+h.x*h.x*100.); t=t.x<h.x?t:h; \n  bb=15.+grow*18.;\n  h=vec2(bo(p,vec3(bb,10.,bb)),6); //ROAD WHITE  \n  h.x=max(abs(h.x)-2.5,bo(p,vec3(bb+.5,.5,bb+.5)));\n  gg+=0.1/(0.1+h.x*h.x*50.); t=t.x<h.x?t:h;  \n  h=vec2(bo(p,vec3(bb-1.,10.,bb-1.)),3); //ROAD BLACK\n  h.x=max(abs(abs(h.x)-.6)-.3,bo(p,vec3(bb,.7,bb)));\n  t=t.x<h.x?t:h;  \n  h=pyra(p,25.,0.,3.,1.); t=t.x<h.x?t:h; //OUTTER PYRA BLACK\n  h=pyra(p,24.,1.,6.,0.2); t=t.x<h.x?t:h;  //INNER PYRA BLUE\n  return t;// Add central structure and return the whole shit\n}\nvec2 tr( vec3 ro, vec3 rd ) // main trace / raycast / raymarching loop function \n{\n  vec2 h,t= vec2(.1); //Near plane because when it all started the hipsters still lived in Norwich and they only wore tweed.\n  for(int i=0;i<128;i++){ //Main loop de loop \n    h=mp(ro+rd*t.x); //Marching forward like any good fascist army: without any care for culture theft. (get distance to geom)\n    if(h.x<.0001||t.x>250.) break; //Conditional break we hit something or gone too far. Don't let the bastards break you down!\n    t.x+=h.x;t.y=h.y; //Huge step forward and remember material id. Let me hold the bottle of gin while you count the colours.\n  }\n  if(t.x>250.) t.y=0.;//If we've gone too far then we stop, you know, like Alexander The Great did when he realised his wife was sexting some Turkish bloke. (10 points whoever gets the reference)\n  return t;\n}\n#define a(d) clamp(mp(po+no*d).x/d,0.,1.)\n#define s(d) smoothstep(0.,1.,mp(po+ld*d).x/d)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )//2 lines above are a = ambient occlusion and s = sub surface scattering\n{\n  vec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1); //get UVs, nothing fancy, \n  tt=mod(5.+iTime*.5,31.41); //Time variable, modulo'ed to avoid ugly artifact. Imagine moduloing your timeline, you would become a cry baby straight after dying a bitter old man. Christ, that's some fucking life you've lived, Steve.\n  grow=smoothstep(0.,1.,.5+.5*sin(tt));\n  vec3 ro=mix(vec3(1),vec3(-1.2,-2,1),ceil(sin(tt)))*vec3(cos(tt*.2+.2)*38.,5,sin(tt*.2)*38.),//Ro=ray origin=camera position We build camera right here broski. Gotta be able to see, to peep through the keyhole.\n  cw=normalize(vec3(0)-ro), cu=normalize(cross(cw,vec3((sin(grow*.2))*2.,1,0))),cv=normalize(cross(cu,cw)),\n  rd=mat3(cu,cv,cw)*normalize(vec3(uv,.5+grow*.1)),lp=vec3(0,0,0)-ro,co,fo;//rd=ray direction (where the camera is pointing), co=final color, fo=fog color\n  ld=normalize(vec3(1,5,0)), //ld=light direction\n  co=fo=vec3(.15)-length(uv*1.1)*.15-rd.y*vec3(.05,.05,.1);//background is dark blueish with vignette and subtle vertical gradient based on ray direction y axis. \n  z=tr(ro,rd);t=z.x; //Trace the trace in the loop de loop. Sow those fucking ray seeds and reap them fucking pixels.\n  if(z.y>0.){ //Yeah we hit something, unlike you at your best man speech.\n    po=ro+rd*t; //Get ray pos, know where you at, be where you is.\n    no=normalize(e.xyy*mp(po+e.xyy).x+e.yyx*mp(po+e.yyx).x+e.yxy*mp(po+e.yxy).x+e.xxx*mp(po+e.xxx).x); //Make some fucking normals. You do the maths while I count how many instances of Holly Willoughby there really is.\n    al=mix(vec3(0.7,0.05,.0),vec3(.8,.2,.0),.5+.5*sin(xp*.3)); //al=albedo=base color, by default it's a gradient between red and orange. \n    if(z.y<5.) al=vec3(0); //material ID < 5 makes it black\n    if(z.y>5.) al=vec3(1); //material ID > 5 makes it white\n    float dif=max(0.,dot(no,ld)), //Dumb as fuck diffuse lighting\n    attn=1.-pow(min(1.,length(lp-po)/(20.+grow*70.)),4.),\n    fr=pow(1.+dot(no,rd),4.), //Fr=fresnel which adds background reflections on edges to composite geometry better\n    sp=pow(max(dot(reflect(-ld,no),-rd),0.),30.); //Sp=specular, stolen from Shane\n    co=attn*mix(sp+al*(a(.1)*a(.3)+.2)*(dif+s(2.)),fo,min(fr,.2)); //Building the final lighting result, compressing the fuck outta everything above into an RGB shit sandwich\n    co=mix(fo,co,exp(-.000005*t*t*t));//Fog soften things, but it won't stop your mother from being unimpressed by your current girlfriend\n  } ps=.07+.13*grow;\n  fragColor = vec4(pow(co+gg*ps*mix(vec3(0.1,0.2,.4),vec3(.1,.3,.6),.5+.5*sin(xp*.3))+g*ps*mix(vec3(0.7,0.05,.0),vec3(.8,.2,.0),.5+.5*sin(xp*.3)),vec3(.55)),1);// Naive gamma correction and glow applied at the end. Glow switches from blue to red hues - nice idea by Haptix - cheers broski\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}