{
    "Shader": {
        "info": {
            "date": "1523038397",
            "description": "Animation inspired from https://twitter.com/motions_work/status/935938795173658624 by @nabehiro93",
            "flags": 0,
            "hasliked": 0,
            "id": "XsyyWm",
            "likes": 10,
            "name": "Error animation",
            "published": 3,
            "tags": [
                "animation",
                "error"
            ],
            "usePreview": 1,
            "username": "zlnimda",
            "viewed": 698
        },
        "renderpass": [
            {
                "code": "/* ----------------\n*\tzlnimda wrote this file and is under license CC-BY-SA-4.0 \n* \t( see legal notice: https://creativecommons.org/licenses/by-sa/4.0/legalcode )\n/* ----------------\n* \tAnimation inspired from https://twitter.com/motions_work/status/935938795173658624 by @nabehiro93\n*/\nprecision highp float;\n\n#define RATIO\t(iResolution.x/iResolution.y)\n#define FONT_R\t(16.)\n#define FONT_S\t(1./FONT_R)\n\nconst float M_PI = 3.1415926535897932384626433832795;\n\nconst vec4\tGREEN  = vec4(vec3(0xE1, 0xED, 0x00) / vec3(0xFF), 1.);\nconst vec4 \tGRAY   = vec4(vec3(0x36, 0x36, 0x35) / vec3(0xFF), 1.);\nconst vec4\tPURPLE = vec4(vec3(0xE8, 0x24, 0xFF) / vec3(0xFF), 1.);\nconst vec4 \tWHITE  = vec4(vec3(0xFF, 0xFF, 0xFF) / vec3(0xFF), 1.);\nconst vec4 \tBBLACK = vec4(0., 0., 0., 1.);\n\n\nvec2 rot(vec2 uv, float a)\n{\n    return (mat2(cos(a), -sin(a), sin(a), cos(a)) * mat2(RATIO, 0., 0., 1.)) * uv;\n}\n\n// normalized angle (a,b) [0,1]\nfloat normAngle(vec2 a, vec2 b)\n{\n    return .5 + .5 * sign(cross(vec3(a,0.), vec3(b,0.)).z) * -acos(dot(normalize(a), normalize(b))) / M_PI;\n}\n\nfloat normAngleFrom(vec2 uv, vec2 o, float a)\n{\n    uv = mat2(RATIO, 0., 0., 1.) * (uv - o);\n    vec2 oa = mat2(cos(a), -sin(a), sin(a), cos(a)) * vec2(0., -1.);\n    return normAngle(oa, uv);\n}\n\n// shitty signed dist tri\nfloat sdtri(vec2 uv, vec2 o, float s, float a)\n{\n    uv = mat2(1./s,0.,0.,1./s) * mat2(RATIO, 0., 0., 1.) * (uv - o);\n    \n    vec2 oa = mat2(cos(a), -sin(a), sin(a), cos(a)) * vec2(0., -1.);\n    float ua = normAngle(oa, uv);\n    float ba = floor(ua * 3.);\n    float r = (0.25- ba) * 2.*M_PI/3. - a;\n    vec2 nn = mat2(cos(r), -sin(r), sin(r), cos(r)) * uv;\n    return nn.x - .5*s*.5;\n}\n\n// tri color\nvec4 tri(vec2 uv, vec2 o, float s, vec4 c, float a)\n{\n    float d = sdtri(uv, o, s, a);\n    return mix(vec4(0.0), c, 1.- step(0., d));\n}\n\nvec4 triol(vec2 uv, vec2 o, float s, vec4 c, float a, float ol)\n{\n    float d = sdtri(uv, o, s, a); //return vec4(abs(2.*d + (1.- ol)) - (1. - ol));\n    \n    d = abs(d + .5*.25*s*ol) - .5*.25*s*ol;\n    return mix(vec4(0.0), c, 1.- step(0., d));\n}\n\n// almost signed dist sq\nvec2 sdsq(vec2 uv, vec2 o, vec2 s, float a)\n{\n    // handle angle & ratio\n    uv = rot(o - uv, a);\n    return s/2.0 - abs(uv);\n}\n\n// text\nvec4 tx(vec2 uv, vec2 o, float s, float c, float a)\n{\n    // italic weird, keep ratio\n    mat2 rot = mat2(cos(a), 0., -sin(a), 1.) * mat2(RATIO, 0., 0., 1.);\n    uv = rot * (o - uv);\n    vec2 d = s/2.0 - abs(uv);\n    vec2 texCoord = -1.*uv/s+vec2(.5);\n    vec2 offset = vec2(mod(c, FONT_R), -1.-floor(c / FONT_R)) * FONT_S;\n    vec4 f = textureGrad(iChannel0, texCoord*FONT_S + offset, dFdx(uv/16.),dFdy(uv/16.));\n    \n    return mix(vec4(0.0), smoothstep(.5,.485,f.wwww)*f.x, step(0.0, min(d.x, d.y)));\n}\n\n// sq color\nvec4 sq(vec2 uv, vec2 o, vec2 s, vec4 c, float a)\n{\n    vec2 d = sdsq(uv, o, s, a);\n    return mix(vec4(0.0), c, step(0.0,  min(d.x, d.y)));\n}\n\n// test\nfloat noEasing (in float t)\n{\n    return t;\n}\n\n// tween (badass septic pow)\nfloat easeOutCubic(in float t)\n{\n    //return -pow( 2., -10. * t ) + 1.;\n    return 1.+pow(t-1., 5.);\n    //return mix(t*t*t, 1.+tt*tt*tt, st);\n}\n\n\nfloat rangeEaseOutCubic(in float t, float o, float r)\n{\n    return clamp(easeOutCubic((t-o)/r), 0., 1.);\n}\n\n// draws little arrows with 2 sq\nvec4 arrows(in vec2 uv, in vec4 color, float s, vec2 p)\n{\n    vec4 c;\n    c += sq(uv, p + vec2(.0, -.1+s*0.4), vec2(0.28, s), color, radians(+45.));\n    c += sq(uv, p + vec2(.0, +.1-s*0.4), vec2(0.28, s), color, radians(-45.));\n    return c;\n}\n\nvec4 glitches(float t, vec2 uv, vec2 origin)\n{\n    vec4 ec;\n    float fade = easeOutCubic(t);\n    t += .654;\n    for (uint i = 0u; i < 10u; ++i)\n    {\n        vec2 dir = vec2(2.364, 6.6543) * t * t;\n        origin += dir * dir + (2.* origin - origin) * dir;\n        float s = mod(origin.x, 1.756) / 3.14;\n        vec4 col = mix(GREEN, PURPLE, step(0.03, mod(origin.x, 0.126)));\n        ec += sq(uv, abs(fract(origin)), vec2(s * fade, 0.1) * fract(origin.y/t), col, 0.);\n        ec *= 1.-pow(fade, 100.);\n    }\n    return max(ec, .0);\n}\n\nvec4 pBar(in float t, in vec2 uv)\n{\n    float p = easeOutCubic(t);\n    float fade = rangeEaseOutCubic(t, 0.8, 0.2);\n    \n    // Bar\n    float s = 0.99;\n    vec4  c;\n    if (uv.x < p*s)\n    {\n        c = sq(uv - vec2(fade, 0.), vec2(0.5*p*s, 0.5), vec2(p*s*RATIO, .2), GREEN, 0.);\n        c += arrows(uv, -GREEN, 0.005, vec2(easeOutCubic(t/0.6-0.3) * .4, .5))\n           + arrows(uv, -GREEN, 0.01, vec2(easeOutCubic(t/0.6-0.4) * .38, .5))\n           + arrows(uv, -GREEN, 0.02, vec2(easeOutCubic(t/0.6-0.5) * .35, .5))\n           - GREEN * tx(uv, vec2( p * .3 - .3 + 0.7, 0.48), .37, 48.+floor(p*s*10.), radians(10.))\n           - GREEN * tx(uv, vec2( p * .3 - .3 + 0.8, 0.48), .37, 48.+floor(mod(p*s, 0.1)*100.), radians(10.))\n           - GREEN * tx(uv, vec2( p * .3 - .3 + 0.9, 0.48), .37, 48.+5.-16., radians(10.));\n    }\n    else\n        c = sq(uv - vec2(fade, 0.), vec2(0.5, 0.5), vec2(RATIO, .2), GRAY, 0.);\n    c = max(c, vec4(0.));\n    \n    // Text\n    p = rangeEaseOutCubic(t, 0.2, 0.6);\n    vec4 tc;\n    float off = 0.1 + p * 0.04 + fade * 0.2;\n    if (p >= 1./9.)tc += tx(uv, vec2((off += 0.024), 0.70), .1, 80., radians(15.));\n    if (p >= 2./9.)tc += tx(uv, vec2((off += 0.024), 0.70), .1, 82., radians(15.));\n    if (p >= 3./9.)tc += tx(uv, vec2((off += 0.024), 0.70), .1, 79., radians(15.));\n    if (p >= 4./9.)tc += tx(uv, vec2((off += 0.024), 0.70), .1, 71., radians(15.));\n    if (p >= 5./9.)tc += tx(uv, vec2((off += 0.024), 0.70), .1, 82., radians(15.));\n    if (p >= 6./9.)tc += tx(uv, vec2((off += 0.024), 0.70), .1, 69., radians(15.));\n    if (p >= 7./9.)tc += tx(uv, vec2((off += 0.024), 0.70), .1, 83., radians(15.));\n    if (p >= 8./9.)tc += tx(uv, vec2((off += 0.024), 0.70), .1, 83., radians(15.));\n    if (p > 0. && p < 0.9)c += tx(uv, vec2((off += 0.024), 0.70), .1, 95., radians(15.));\n    tc *= 1.0-pow(fade, 5.);\n    \n    // glitches\n    vec4 ec;\n    vec2 origin = vec2(.123, .245);\n    ec = glitches((t - .8) / .2, uv, origin);\n    return tc + c + ec;\n}\n\nvec4 pTriangleError(in float t, in vec2 uv)\n{\n    float t1 = rangeEaseOutCubic(t, 0.0, 0.55);\n    float t11 = t1*t1;\n    float t2 = rangeEaseOutCubic(t, 0.4, 0.9);\n    uv = vec2(.5) + (uv - vec2(.5)) * (1.- t2) * 0.6;\n    vec4 c;\n    vec2 offset = vec2(.0,.4) + vec2(.5,.0) * t1;\n    float s = 1. + 6.* t2;\n    c  = tri(uv, offset, .85, GREEN, 0.);\n    c += tri(uv, offset, .82, -GREEN, 0.);\n    c += tri(uv, offset, .76, GREEN, 0.);\n    c += tri(uv, offset, .70, -GREEN, 0.);\n    c = max(vec4(0.), c);\n    if (length(c) <= 0.)\n    {\n        float ff = 1.-mod(clamp(t, .15, .3), .05) / .05;\n    \tc += sq(uv, offset+vec2(0.,0.05), vec2(0.04, 0.185), ff * t1 * (1.-t2) * WHITE, 0.);\n    \tc += sq(uv, offset+vec2(0.,-0.08), vec2(0.04, 0.04), ff * t1 * (1.-t2) * WHITE, 0.);\n    \tvec2 ratio = 1./vec2(RATIO, 1.);\n    \tvec2 uvr = mod(uv + vec2(-.2, .0) * t11, ratio * vec2(.2));\n    \tvec2 sr  = ratio * vec2(.1, .07);\n    \tc += tri(uvr, sr, .45, GRAY, 0.) * step(1.-t11, normAngleFrom(uvr, sr, M_PI));\n    \tc += tri(uvr, sr, .43, -GRAY, 0.);\n    \tuvr = mod(uv + ratio * vec2(.1, .0) + vec2(-.2, .0) * t1, ratio * vec2(.2)) - ratio * vec2(.1, .0);\n    \tsr  = ratio * vec2(.0, .13);\n    \tc += tri(uvr, sr, .45, GRAY, M_PI) * step(1.-t11, normAngleFrom(uvr, sr, M_PI));\n    \tc += tri(uvr, sr, .43, -GRAY, M_PI);\n    \tc = max(vec4(0.), c);\n    }\n    return c * (1.-rangeEaseOutCubic(t, .8, .2));\n}\n\nvec4 errorDsp(vec2 uv, vec2 o, float s, float r)\n{\n    vec4 c;\n    float off = 0.;\n    c += tx(uv, o+vec2((off          ), 0.), s, 69., radians(15.)) * step(.0, r);\n    c += tx(uv, o+vec2((off += s*0.24), 0.), s, 82., radians(15.)) * step(.2, r);\n    c += tx(uv, o+vec2((off += s*0.24), 0.), s, 82., radians(15.)) * step(.3, r);\n    c += tx(uv, o+vec2((off += s*0.24), 0.), s, 79., radians(15.)) * step(.4, r);\n    c += tx(uv, o+vec2((off += s*0.24), 0.), s, 82., radians(15.)) * step(.8, r);\n    c += tx(uv, o+vec2((floor(1.+r*5.) * s*0.24), 0.), s, 95., radians(15.)) * step(.0, r) * (1. - step(.9, r));\n    return c;\n}\n\nvec4 error(vec2 uv, vec2 o, float s)\n{\n    return errorDsp(uv, o, s, 1.0);\n}\n\nvec4 blend(vec4 a, vec4 b)\n{\n    a = clamp(a, 0., 1.);\n    b = clamp(b, 0., 1.);\n    return mix(a, b, b.a);\n}\n\nvec4 pLastAnim(in float t, in vec2 uv)\n{\n    float t0 = rangeEaseOutCubic(t, 0.5, 0.5);\n    float t1 = rangeEaseOutCubic(t, 0.8, 0.3);\n    vec4 c;\n    \n    // Text\n    if (t < .8)\n    {\n        c += errorDsp(uv, vec2(.41, .5), .2, rangeEaseOutCubic(t, 0.5, 0.4));\n    \t// green tris\n    \tc += tri(uv, vec2(.32-t0*.31, .5), .25, GREEN, +M_PI*.5);\n    \tc += tri(uv, vec2(.68+t0*.31, .5), .25, GREEN, -M_PI*.5);\n        c *= step(.5, t);\n    }\n    \n    // glitches\n    vec2 uvfk = (uv - vec2(.5)) / vec2(1., .2) + vec2(.5);\n    if (t < .7)\n    \tc = blend(c, glitches((t - .4) / .3, uvfk, vec2(.245, .759))) * step(.4, t);\n    \n    c += WHITE * step(abs(uv.y - .5), .2*(1.-t1)) * step(.01, t1);\n    c = blend(c, GREEN * step(abs(uv.y - .5), .1*(1.-t1)) * step(.01, t1));\n    \n    // glitches\n    uvfk = (uv - vec2(.5)) / vec2(.4, .2) + vec2(.5);\n    c = blend(c, glitches((t - .8) / .3, uvfk, vec2(.245, .759)));\n    \n    return c;\n}\n    \nvec4 pTriangleError2(in float t, in vec2 uv)\n{\n    float t0 = rangeEaseOutCubic(t, 0.0, 0.3);\n    float t1 = rangeEaseOutCubic(t, 0.0, 0.5);\n    float t2 = rangeEaseOutCubic(t, 0.4, 0.7);\n    float t3 = rangeEaseOutCubic(t, .13, .55);\n    float t4 = rangeEaseOutCubic(t, .95, .6);\n    float t5 = rangeEaseOutCubic(t, 1.1, 1.4);\n    vec4 c;\n    for (uint i = 0u; i < 3u; ++i)\n    {\n        vec2 offset = float(i) * vec2(-.26, .0) + + vec2(-.18, .5) + vec2(.7, 0.) * t0;\n        float a = (t1*2.-2.)*M_PI/3.;\n        c += triol(uv, offset, .7, WHITE, a, 1.-.9*rangeEaseOutCubic(t - 0.02 * float(i), 0.1, 0.3));\n        vec2 fkuv = rot(uv - offset, -a) + offset;\n        vec2 ss = vec2(1. + 3. * (fkuv.y - .4), .8);\n        c += sq(fkuv, offset+ss*vec2(0.,0.05), ss*vec2(0.04, 0.185), t3 * WHITE, 0.);\n        c += sq(fkuv, offset+ss*vec2(0.,-0.08),ss* vec2(0.04, 0.04), t3 * WHITE, 0.);\n    }\n    const float size = .06;\n    for (uint i = 0u; i < 8u; ++i)\n        c += error(uv, vec2(.8, .8-float(i)*size*(3.-2.*t3)), size) * t3 * .8;\n    vec2 offset = + (1.-t2) * vec2(1., .0);\n    c += error(uv, vec2(.2, .1)+offset, .7);\n    c += error(uv, vec2(0., 1.)-offset, .7);\n    // INVERSE\n    c = mix(c, WHITE-c, step(.0, 1.-sdtri(uv, vec2(.5, .35), t2*.5, .0)));\n    \n    if (t4 > .0)\n    {\n        vec4 tc;\n        const float s = 1.8;\n        offset = vec2(1., .0) * (t4-1.);\n        tc = \t\t   tri  (uv, +offset + vec2(0., .5), s, BBLACK, +M_PI*.5);\n        tc = blend(tc, triol(uv, +offset + vec2(0., .5), s,  GREEN, +M_PI*.5, .01));\n        tc = blend(tc, tri  (uv, -offset + vec2(1., .5), s, BBLACK, -M_PI*.5));\n        tc = blend(tc, triol(uv, -offset + vec2(1., .5), s,  GREEN, -M_PI*.5, .01));\n        \n        tc = blend(tc, tri  (uv, +offset + vec2(0., .5), s*.7, GREEN, +M_PI*.5));\n        tc = blend(tc, tri  (uv, -offset + vec2(1., .5), s*.7, GREEN, -M_PI*.5));\n        \n        \n    \tif (t5 > .0)\n        {\n            vec2 uvfk = vec2(.5, .0) + abs(uv - vec2(.5, .0));\n\n            tc = blend(tc, tri  (uvfk, vec2(.45, .5), 2.1*t5, BBLACK, M_PI*.5));\n            tc = blend(tc, triol(uvfk, vec2(.45, .5), 2.1*t5,  WHITE, M_PI*.5, .1));\n            tc = blend(tc, triol(uvfk, vec2(.45, .5), 2.1*t5*t5,  WHITE, M_PI*.5, .025));\n            tc = blend(tc, triol(uvfk, vec2(.45, .5), 2.1*t5*t5*t5*t5,  WHITE, M_PI*.5, .0125));\n        }\n        \n        tc = blend(tc, pLastAnim(t-1., uv));\n        \n    \tc = blend(c, tc);\n    }\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const float mTime = 2.0;\n    const float stageNB = 4.0;\n    const float spaceout = 1.0;\n    \n    // Get normalized timing\n    float lifeRatio = mod(iTime, mTime * stageNB + spaceout);\n    float stage = floor(lifeRatio / mTime);\n\n    vec4 color;\n    if (stage <= 0.)\n        color += pBar(mod(lifeRatio, mTime) / mTime, uv);\n    else\n    if (stage <= 1.)\n        color += pTriangleError(mod(lifeRatio, mTime) / mTime, uv);\n    else\n    if (stage >= 2. && stage <= 3.)\n        color += pTriangleError2(mod(lifeRatio, 2.*mTime) / mTime, uv);\n    \n\t//color += 0.5 * length(texture(iChannel0, uv).x);\n    // Output to screen\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}