{
    "Shader": {
        "info": {
            "date": "1691192149",
            "description": "Credits to Art of Code's gyroid tutorial on YT, tutorial is here: https://www.youtube.com/watch?v=-adHIyjIYgk&list=PLGmrMu-IwbgsVjE7SAtFaWyhZXyBjJNnO&index=7",
            "flags": 0,
            "hasliked": 0,
            "id": "ctsyDj",
            "likes": 10,
            "name": "Alien nuerons",
            "published": 3,
            "tags": [
                "raymarching",
                "alien",
                "gyroid"
            ],
            "usePreview": 0,
            "username": "jackjackdev",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "// Alien nuerons - Raymarching gyroid\n// Credits to Art of Code's gyroid tutorial on YT, tutorial is here: https://www.youtube.com/watch?v=-adHIyjIYgk&list=PLGmrMu-IwbgsVjE7SAtFaWyhZXyBjJNnO&index=7\n// \"Gyroid is a minimal surface: a surface that minimizes its area for a given boundary\"\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) {\n    p *= scale;\n        return abs(dot(sin(p), cos(p.zxy)) - bias) / scale - thickness;\n}\n\n\nvec3 Transform(vec3 p) {\n    p.z -= iTime*.1;\n    p.y -=.3;\n    return p;\n}\n\nfloat GetDist(vec3 p) {\n    p = Transform(p);\n    \n    float box = sdBox(p, vec3(1));\n    \n    float g1 = sdGyroid(p, 5.23, .03, 1.4);\n    float g2 = sdGyroid(p, 10.76, .03, .3);\n    float g3 = sdGyroid(p, 20.76, .03, .3);\n    float g4 = sdGyroid(p, 35.76, .03, .3);\n    float g5 = sdGyroid(p, 60.76, .03, .3);\n    float g6 = sdGyroid(p, 101.72, .03, .3);\n    float g7 = sdGyroid(p, 185.56, .03, .3);\n\n\n    //float g = min(g1, g2); //union\n    //float g = max(g1, -g2); //subtraction\n    g1 -= g2*.3;\n    g1 -= g3*.2;\n    g1 += g4*.1;\n    g1 += g5*.1;\n        g1 += g6*.8;\n    g1 += g7*.5;\n\n    \n    float d = g1*.9; \n    //float d = max(box, g1 * .8);\n    \n    return d;\n}\n\n\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.005, 0);\n    vec3 n = GetDist(p) - \n    vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 Background(vec3 rd) {\n    vec3 col = vec3(0);\n    float t = iTime;\n    float y = rd.y *.5+.5;\n    col += (1.-y)*vec3(0.4, 0.8, 1.)*1.5;\n    \n    float a = atan(rd.x, rd.z);\n    float beams = (sin(a*10.+t) * sin(a*7.-t) * sin(a*3.+t));\n    beams *= smoothstep(.8, .5, y);\n    col += beams;\n    col = max(col, 0.);\n    col += smoothstep(.5, .0, y);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime;\n    vec3 ro = vec3(0, 0, -.03);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 lookat = vec3(0, 0, 0);\n    vec3 rd = GetRayDir(uv, ro, lookat, .8);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        p = Transform(p);\n        \n        //vec3 r = reflect(rd, n);\n        //float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        //col = vec3(dif);\n        \n        float dif = n.y*.5+.5;\n        col += dif*dif;\n        \n        float g2 = sdGyroid(p, 10.76, .03, .3);\n        col *= smoothstep(-.1, .1, g2); //dimmer\n        \n        float crackWidth = -0.02 + smoothstep(0., -.5, n.y) * .04;\n        float cracks = smoothstep(crackWidth, -.03, g2);\n        float g3 = sdGyroid(p+t*.1, 5.76, .03, .0);\n        float g4 = sdGyroid(p+t*.05, 4.76, .03, .0);\n        cracks *= g3*g4*20.+.2*smoothstep(.2, .0, n.y);\n        \n        \n        col += cracks*vec3(0.1,0.2,1.)*3.;\n    }\n    //col *= 0.;\n    //d = sdGyroid(vec3(uv.x, uv.y, iTime*.1), 20., .02, 0.);\n    //col += d*10.;\n    \n    col = mix(col, Background(rd), smoothstep(0., 7., d));\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}