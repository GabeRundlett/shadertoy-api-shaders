{
    "Shader": {
        "info": {
            "date": "1544739276",
            "description": "Visualization of raycast, with reflection, on objects surfaces. Move mouse to choose a direction (based on cursor position and center of space).",
            "flags": 0,
            "hasliked": 0,
            "id": "Wss3zn",
            "likes": 6,
            "name": "Ray Playground",
            "published": 3,
            "tags": [
                "2d",
                "ray",
                "raycast",
                "physics",
                "point"
            ],
            "usePreview": 0,
            "username": "josemorval",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "#define VEL 0.02\n\nfloat sdCircle(vec2 p, float r){\n\treturn length(p)-r;   \n}\n\n\nfloat sdSquare(vec2 p, float r){\n\treturn max(abs(p.y),abs(p.x))-0.1;   \n}\n\nfloat map(vec2 p){\n    \n    float angle = VEL*0.2*iTime;\n   \tvec2 q = p;\n    q = mat2(cos(angle),-sin(angle),sin(angle),cos(angle))*q;\n    float d = sdCircle(q-vec2(0.2+0.1*sin(VEL*iTime),-0.1+0.1*sin(VEL*iTime)),0.1);\n    d = min(d,sdSquare(q-vec2(0.2+0.2*sin(VEL*iTime),0.3),0.1));\n    d = min(d,sdSquare(q-vec2(0.5,0.05+0.3*sin(VEL*iTime)),0.1));\n    \n    p*=1.25;\n    angle = VEL*0.01*iTime;\n    q = mat2(cos(angle),-sin(angle),sin(angle),cos(angle))*p;\n    \n    q = mod(q,1.)-0.75;\n    d = min(d,sdCircle(q+vec2(0.3,0.2),0.15));\n    \n    angle -= VEL*0.05*iTime;\n    q = mat2(cos(angle),-sin(angle),sin(angle),cos(angle))*p;\n    \n    q = mod(q,1.)-0.75;\n    d = min(d,sdCircle(q,0.2));\n    \n    return d;\n    \n}\n\nvec2 calcNormal(vec2 pos )\n{\n\tvec2 eps = vec2( 0.0005, 0.0);\n\tvec2 nor = vec2(\n\t    map(pos+eps.xy) - map(pos-eps.xy),\n\t    map(pos+eps.yx) - map(pos-eps.yx));\n\treturn normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv-0.5;\n    p.x*=iResolution.x/iResolution.y;\n    vec2 mpos = iMouse.xy/iResolution.xy;\n    mpos -= 0.5;\n    mpos.x*=iResolution.x/iResolution.y;\n    \n    \n    vec2 dir = normalize(-mpos);\n    \n    vec3 col = vec3(0.0,0.0,0.0);\n    float mask = 0.;\n    float d = 0.;\n    \n    \n    mask = map(p);\n    mask = 1.-smoothstep(0.001,0.005,mask);\n    col = mix(vec3(1.,1.,1.),col,mask);\n    \n    col = mix(col,vec3(0.8,0.3,0.2),1.-step(0.005,abs(sdCircle(p-mpos,0.02\n                                                            +0.002*sin(10.*iTime)))));\n    col = mix(col,0.3*col,1.-step(0.,sdCircle(p,0.01)));\n    \n    \n    vec2 oldpos = mpos;\n\tvec2 newpos;\n    float totd = 0.;\n    for(int i=0;i<4;i++){\n        \n        d = 0.0;\n        for(int j=0;j<64;j++){\n            float f = map(oldpos+d*dir);\n\t\t\td+=f;\n        }\n\n\t\t\n\t\tnewpos = oldpos+dir*d;\n\n        mask = abs(dot(vec2(dir.y,-dir.x),oldpos-p)); \n        mask = 1.-smoothstep(0.003,0.005,mask);\n        mask *= step(0.,dot(dir,normalize(p-oldpos)));\n        mask *= step(0.,dot(-dir,normalize(p-newpos)));\n        mask = 1.-mask;\n        col = mix(vec3(0.8,0.5,0.9),col,mask);\n\n\n        mask = sdCircle(p-newpos,0.01);\n        mask = step(0.,mask);\n        col = mix(vec3(0.3,0.2,0.9),col,mask);\n\n\n        \n\t\tdir = reflect(dir,calcNormal(newpos));\n\t\toldpos = newpos+0.001*dir;\n        \n        totd+=d;\n\n        \n    }\n\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}