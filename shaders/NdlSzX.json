{
    "Shader": {
        "info": {
            "date": "1619208608",
            "description": "Particles follow trails left by other particles. Cool images appear!\nTry changing the number of agents (NUM_AGENTS_SQRT in Common), up to the smallest side resolution of the canvas; also, Buffer A has particle parameters, and B has trail parameters.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "NdlSzX",
            "likes": 15,
            "name": "Ant Particles",
            "published": 3,
            "tags": [
                "particles",
                "art",
                "trail",
                "ant"
            ],
            "usePreview": 0,
            "username": "michionlion",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "vec3 decompressColorRamp(float color) {\n    if (color > 1.0) {\n        return vec3(0.0);\n    } else if (color > 0.75) {\n        return mix(vec3(1.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0), (color - 0.75) * 4.0);\n    } else if (color > 0.5) {\n        return mix(vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 0.0), (color - 0.5) * 4.0);\n    } else if (color > 0.25) {\n        return mix(vec3(0.0, 1.0, 1.0), vec3(0.0, 1.0, 0.0), (color - 0.25) * 4.0);\n    } else if (color >= 0.0) {\n        return mix(vec3(0.0, 0.0, 1.0), vec3(0.0, 1.0, 1.0), color * 4.0);\n    } else {\n        return vec3(1.0);\n    }\n}\n\nvec3 decompressColor(float color) {\n    uint fields = floatBitsToUint(color);\n    return vec3((fields >> 8) & 0xFu, (fields >> 4) & 0xFu, fields & 0xFu) / 15.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    //vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    //fragColor = vec4(vec2(rand(fragCoord.xy), rand(fragCoord.yx)), 0.0, 0.0);\n    //fragColor = data;\n    //return;\n    \n    //vec2 location = fragCoord / iResolution.xy;\n    //vec2 pixelSize = 1.0 / iResolution.xy;\n\n    //vec3 point = vec3(0.0);\n    //for(int x = 0; x < NUM_AGENTS_SQRT; x++) {\n    //    for(int y = 0; y < NUM_AGENTS_SQRT; y++) {\n            \n    //        vec4 agentdata = texelFetch(iChannel0, ivec2(x, y),  0);\n    //        float closeToPoint = AGENT_SIZE / distanceSqr(agentdata.xy*iResolution.xy, fragCoord);\n    //        point = mix(point, decompressColor(agentdata.w), closeToPoint);\n            //if(ivec2(agentdata.xy*iResolution.xy) == ivec2(fragCoord)) {\n            //    point = decompressColor(agentdata.w);\n            //}\n    //    }\n    //}\n    \n    float trail = texelFetch(iChannel1, ivec2(fragCoord), 0).x;\n    \n    //fragColor = vec4(vec3(point) + vec3(trail), 1.0);\n    fragColor = mix(vec4(0.0), mix(vec4(0.0, 0.2, 1.0, 0.7), vec4(0.5, 1.0, 1.0, 1.0), trail), trail);\n    //fragColor = vec4(point*10.0 + vec3(trail), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TWO_PI 6.283185307179586\n#define SENSOR_DISTANCE 7.0\n#define SENSOR_RADIUS 2\n// in radians!\n#define SENSOR_ANGLE 0.8\n\n#define TURN_SPEED 0.2\n#define SPEED 1.0\n#define RANDOM_MOVEMENT 0.001\n#define RANDOM_BIAS 0.0\n\nfloat getTrailAt(ivec2 pos) {\n    return texelFetch(iChannel1, pos, 0).x;\n}\n\nfloat sense(vec2 pos, float angle, float sensorAngleOffset) {\n    float sensorAngle = angle + sensorAngleOffset;\n    vec2 sensorDir = vec2(cos(sensorAngle), sin(sensorAngle));\n    vec2 sensorCenter = pos + sensorDir * SENSOR_DISTANCE;\n    \n    float sensed = 0.0;\n    for(int xo = -SENSOR_RADIUS; xo <= SENSOR_RADIUS; xo++) {\n        for(int yo = -SENSOR_RADIUS; yo <= SENSOR_RADIUS; yo++) {\n            sensed += getTrailAt(ivec2(sensorCenter + vec2(xo, yo)));\n        }\n    }\n    return sensed / float((SENSOR_RADIUS + 1) * (SENSOR_RADIUS + 1));\n}\n\nvoid mainImage( out vec4 agentdata, in vec2 index ) {\n\n    // Initialize the agent data on the first frame.\n    if (iFrame == 1)\n    {\n        float r = (iResolution.y / 4.0) * sqrt(rand(index.xy));\n        float t = rand(index.yx) * TWO_PI;\n        float z = rand(index.xy*829.0);\n        \n        vec2 center = iResolution.xy / 2.0;\n        vec2 pos = center + vec2(r * cos(t), r * sin(t));\n\t\tagentdata = vec4(pos / iResolution.xy, z * TWO_PI, 0.0);\n        return;\n    }\n    \n    // no idea if this helps or hurts performance\n    if(index.y > float(NUM_AGENTS_SQRT) || index.x > float(NUM_AGENTS_SQRT)) discard;\n\n    vec4 previousAgentData = texelFetch(iChannel0, ivec2(index), 0);\n    vec2 pos = previousAgentData.xy * iResolution.xy;\n    float angle = previousAgentData.z * TWO_PI;\n    //float color = previousAgentData.w;\n    \n    float weightForward = sense(pos, angle, 0.0);\n    float weightLeft = sense(pos, angle, SENSOR_ANGLE);\n    float weightRight = sense(pos, angle, -SENSOR_ANGLE);\n    \n    float randomSteerStrength = rand(index.xy*angle + pos*angle) * 0.25 + 0.5;\n    \n    if (weightForward > weightLeft && weightForward > weightRight) {\n        angle += 0.0;\n        //color = 0.9;\n    } else if (weightForward < weightLeft && weightForward < weightRight) {\n        // Biasing this one direction or the other calms down a lot of things!\n        angle += (randomSteerStrength - 0.625 + RANDOM_BIAS) * RANDOM_MOVEMENT * TURN_SPEED;\n        //color = 0.0;\n    } else if (weightRight > weightLeft) {\n        angle -= randomSteerStrength * TURN_SPEED;\n        //color = 0.6;\n    } else if (weightLeft > weightRight) {\n        angle += randomSteerStrength * TURN_SPEED;\n        //color = 0.3;\n    }\n    \n    //color = uintBitsToFloat(uint(weightLeft * 15.0) << 8 | uint(weightRight * 15.0) << 4 | uint(weightForward * 15.0));\n\n    vec2 delta = vec2(cos(angle), sin(angle)) * SPEED;\n    pos += delta;\n    // loop when resolution hit\n    pos = mod(pos, iResolution.xy); \n    agentdata = vec4(pos / iResolution.xy, angle / TWO_PI, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define NUM_AGENTS_SQRT 128\n#define TOTAL_AGENTS float(NUM_AGENTS_SQRT*NUM_AGENTS_SQRT)\n\n#define AGENT_SIZE 0.25\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\n\nfloat distanceSqr(vec2 A, vec2 B) {\n    vec2 C = A - B;\n    return dot( C, C );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Diffusion controls how much \"diffusion\" is applied to a trail every frame\n#define DIFFUSION 0.15\n\n// Evaporation controls how much is subtracted from each trail pixel every frame\n#define EVAPORATION 0.01\n\n// Strength controls how much initial trail is deposited by each agent\n#define STRENGTH 0.1\n\nfloat getPreviousTrail(vec2 pos) {\n    return texelFetch(iChannel1, ivec2(mod(pos, iResolution.xy)), 0).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 location = fragCoord / iResolution.xy;\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    \n    float trail = 0.0;\n    for(int x = 0; x < NUM_AGENTS_SQRT; x++) {\n        for(int y = 0; y < NUM_AGENTS_SQRT; y++) {\n            \n            vec4 agentdata = texelFetch(iChannel0, ivec2(x, y),  0);\n            //if(distanceSqr(agentdata.xy*iResolution.xy, fragCoord) <= AGENT_SIZE) trail = STRENGTH;\n            if(ivec2(agentdata.xy*iResolution.xy) == ivec2(fragCoord)) trail = STRENGTH;\n            \n        }\n    }\n    \n    float previousTrail = getPreviousTrail(fragCoord);\n    \n    float diffused = 0.0;\n    for(int xo = -1; xo <= 1; xo++) {\n        for(int yo = -1; yo <= 1; yo++) {\n            diffused += getPreviousTrail(fragCoord + vec2(xo, yo));\n        }\n    }\n    \n    previousTrail = mix(previousTrail, diffused / 9.0, DIFFUSION);\n    previousTrail = max(0.0, previousTrail - EVAPORATION);\n    fragColor = vec4(vec3(min(1.0, previousTrail + trail)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}