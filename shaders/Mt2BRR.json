{
    "Shader": {
        "info": {
            "date": "1514345955",
            "description": "a remake of https://www.shadertoy.com/view/4tsBD2",
            "flags": 64,
            "hasliked": 0,
            "id": "Mt2BRR",
            "likes": 0,
            "name": "dancing bubbles",
            "published": 3,
            "tags": [
                "raymarch",
                "sdf",
                "music"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 475
        },
        "renderpass": [
            {
                "code": "\n#define BLOCKSIZE 0.75\n\n#define EXTENT 7.0\n\n#define MULTI_SAMPLE 3 // do not set higher than 8\n\n#define DROP_BLOCKS 0\n#define DROP_WAFFLE 1\n#define BUBBLES_DENSER_THAN_AIR 0\n\nvec3 camera = vec3(25.0, 0.0, 0.0);\nmat3 dir_mat = mat3(1.0, 0.0, 0.0,\n                    0.0, 1.0, 0.0,\n                    0.0, 0.0, 1.0);\n\nconst float error_bound = 1.0e-5;\n\nconst float blocks_max_height = -1.15; // -1.75 + 0.6 + 0.25 * BLOCKSIZE\nconst float waffle_max_height = -1.75; // -2.0 + 0.1 + 0.15\n\nvec3 sun_dir; // movable, set in main\nconst float sun_sin = 2.0 * 3.141592654 / 180.0; // approx 5 degrees\n\nconst float earth_rad = 60000.0; // off by a factor of 100\nconst float height_above_earth = 1000.0; // 1 km up\n\nfloat in_sun (in vec3 dir) {\n    float pixel_sin = (22.0 / 180.0) * (8.0 / 3.141592654) / iResolution.y;\n\n\tfloat dir_cos = abs(dot(dir, sun_dir));\n    float dir_sin =\n        length(dir - sun_dir * dir_cos);\n    return smoothstep(sun_sin + 2.0 * pixel_sin, sun_sin, dir_sin);\n}\n\nvec4 sky_shade(in vec3 dir) {\n    \n    vec3 base_blue =\n        vec3(0.1, 0.2, 0.6) + \n        0.5 * (1.2 + 0.8 * dot(dir, sun_dir)) * vec3(0.4, 0.5, 0.4);\n    \n    vec4 base =\n        vec4(mix(base_blue, vec3(1.0),\n                 0.5 * smoothstep(0.2, 1.0, dot(dir, sun_dir))), 1.0); \n    \n\treturn base + vec4(2.2 * in_sun(dir) * vec3(0.9, 1.0, 0.2), 1.0);\n}\n\nvec2 dist_to_sphere(in vec3 orig, in vec3 dir, in vec3 cent,\n                     in float rad) {\n    // p = orig + t * dir\n    // (p-cent)^2 = rad^2\n    // t *t * dot(dir, dir) + 2.0 * t * dot(dir, orig - cent) +\n    // dot(orig - cent, orig - cent) - rad * rad = 0\n    vec3 rel = orig - cent;\n    float A = dot(dir, dir);\n    float B = 2.0 * dot(dir, rel);\n    float C = dot(rel, rel) - rad * rad;\n    \n    float discr = B * B - 4.0 * A * C;\n    if (discr < 0.0) {\n        return vec2(-1.0);\n    }\n    \n    return (-B + vec2(-sign(A), sign(A)) * sqrt(discr)) / (2.0 * A);\n}\n\n\nfloat noise(in vec2 p) {\n    vec2 scaled_p = 0.05 * p;\n    float px_step = 1.0 / 64.0;\n    vec2 within = mod(scaled_p, vec2(px_step));\n    vec2 mod_by = vec2(1.0 - px_step);\n    vec2 corner_00 = mod(scaled_p - within, mod_by);\n    vec2 corner_10 = mod(corner_00 + vec2(px_step, 0.0), mod_by);\n    vec2 corner_01 = mod(corner_00 + vec2(0.0, px_step), mod_by);\n    vec2 corner_11 = mod(corner_00 + vec2(px_step, px_step), mod_by);\n    \n    float val_00 = texture(iChannel1, corner_00).r;\n    float val_10 = texture(iChannel1, corner_10).r;\n    float val_01 = texture(iChannel1, corner_01).r;\n    float val_11 = texture(iChannel1, corner_11).r;\n    \n    float val_0 = val_00 +\n        (val_01 - val_00) * smoothstep(0.0, px_step, within.y);\n    \n    float val_1 = val_10 +\n        (val_11 - val_10) * smoothstep(0.0, px_step, within.y);\n    \n    return val_0 +\n        (val_1 - val_0) * smoothstep(0.0, px_step, within.x);\n    \n}\n\nfloat noise_sum(vec2 uv) {\n    vec2 d = 1.0 * vec2(0.3, 0.4) * iTime;\n\treturn noise(uv + d) + 0.5 * noise(d + 3.0 * uv) +\n        0.25 * noise(d + 9.01 * uv)  + 0.125 * noise(d + 27.01 * uv) +\n        0.0625 * noise(d + 81.01 * uv) + 0.03125 * noise(d + 243.01 * uv);\n\n}\n\nvec2 noise_grad(vec2 uv) {\n\tfloat x = noise_sum(uv);\n    float h = 0.01;\n    float one_over_h = 100.0;\n    return one_over_h *\n        vec2(noise_sum(uv + vec2(h, 0.0)) - x,\n             noise_sum(uv + vec2(0.0, h)) - x);\n}\n\nvec3 sea_bounce(in vec3 orig, in vec3 dir, out vec4 color_mul) {\n\n    vec3 earth_cen = vec3(0.0, - height_above_earth - earth_rad, 0.0);\n    vec2 dists = dist_to_sphere(orig, dir, earth_cen,\n                             earth_rad);\n    float t = dists.x;\n    if (t < 0.0) {\n    \tcolor_mul = vec4(1.0);\n        return dir;\n    }\n    vec3 p = orig + t * dir;\n    vec3 n = normalize(p - earth_cen);\n    vec2 uv = p.xz / height_above_earth; // renorm or something\n    n = normalize(n + vec3(0.5 * noise_grad(uv), 0.0).xzy);\n    \n    float edgeness = 1.0 -\n        clamp(3.0 * (dists.y - dists.x) / earth_rad, 0.0, 1.0);\n\n    color_mul = mix(vec4(0.25, 0.4, 0.6, 1.0), vec4(1.0), edgeness);\n    return normalize(reflect(dir, n));\n}\n                                         \n\nvec4 shade(in vec3 orig, in vec3 dir) {\n    vec4 color_mul = vec4(1.0);\n    dir = sea_bounce(orig, dir, color_mul);\n    return color_mul * sky_shade(dir);\n}\n\nfloat waffle_sdf(in highp vec3 point) {\n#if DROP_WAFFLE\n    return 5.0 * EXTENT;\n#else\n    vec3 local = vec3(abs(abs(mod(point.xz, BLOCKSIZE)) - vec2(0.5 * BLOCKSIZE)), point.y).xzy;\n    vec2 lr_dists = 0.5 * BLOCKSIZE - local.xz;\n    float lr_dist = min(lr_dists.x, lr_dists.y);\n    float updist = abs(local.y + 2.0);\n    return length(vec3(lr_dist, max(updist, 0.0), \n                       max(length(point - camera) - EXTENT, 0.0))) - 0.05;\n#endif\n}\n\nfloat blocks_sdf(in highp vec3 point) {\n#if DROP_BLOCKS\n    return 5.0 * EXTENT;\n#else\n\tvec3 local = vec3(abs(abs(mod(point.xz, BLOCKSIZE)) - vec2(0.5 * BLOCKSIZE)),\n                      abs(point.y + 1.75)).xzy;\n    float samp_loc = mod(dot(point.xz - mod(point.xz, BLOCKSIZE),\n                             vec2(0.17, 0.13)), BLOCKSIZE);\n    float samp = texture(iChannel0, vec2(samp_loc, 0.0)).r;\n\tvec3 to_core = max(vec3(0.0), local - vec3(0.05, 0.1 + 0.5 * samp, 0.05));\n    return max(length(to_core), \n                       max(length(point - camera) - EXTENT, 0.0)) - 0.125 * (1.0 + samp) * BLOCKSIZE;\n#endif\n}\n\nfloat grid_sdf(in highp vec3 point) {\n    return min(waffle_sdf(point), blocks_sdf(point));\n}\n\nvec3 waffle_grad(in highp vec3 point) {\n    float p = waffle_sdf(point);\n    return normalize(vec3(waffle_sdf(point + vec3(0.01, 0.0, 0.0)) - p,\n                          waffle_sdf(point + vec3(0.0, 0.01, 0.0)) - p,\n                          waffle_sdf(point + vec3(0.0, 0.0, 0.01)) - p));\n}\n\n\nvec3 blocks_grad(in highp vec3 point) {\n    float p = blocks_sdf(point);\n    return normalize(vec3(blocks_sdf(point + vec3(0.01, 0.0, 0.0)) - p,\n                          blocks_sdf(point + vec3(0.0, 0.01, 0.0)) - p,\n                          blocks_sdf(point + vec3(0.0, 0.0, 0.01)) - p));\n}\n\n\nfloat dist_to_grid(in highp vec3 point, in highp vec3 dir) {\n\tvec3 p = point;\n    float result = 0.0;\n    if (dir.y < -error_bound) {\n\t    float to_max = (point.y - waffle_max_height) / dir.y;\n    \tresult = to_max;\n    } else if (point.y > waffle_max_height + EXTENT * error_bound) {\n        return 2.0 * EXTENT;\n    }\n    p = p + result * dir;\n    for (int i = 0; i < 128; ++i) {\n    \tfloat d = 0.9 * waffle_sdf(p);\n    \tresult += d;\n        p = p + d * dir;\n        if (abs(d) < error_bound || result > 2.0 * EXTENT) {\n            return result;\n        }\n    }\n    return result;\n}\n\nfloat dist_to_blocks(in highp vec3 point, in highp vec3 dir) {\n\tvec3 p = point;\n    float result = 0.0;\n    if (dir.y < -error_bound) {\n        float to_max = (point.y - blocks_max_height) / dir.y;\n        result = to_max;\n    } else {\n        return 2.0 * EXTENT;\n    }\n    p = p + result * dir;\n    for (int i = 0; i < 96; ++i) {\n    \tfloat d = 0.8 * blocks_sdf(p);\n    \tresult += d;\n        p = p + d * dir;\n        if (abs(d) < error_bound || result > 2.0 * EXTENT) {\n            return result;\n        }\n    }\n    return result;\n}\n\nfloat dist_out_of_blocks(in highp vec3 point, in highp vec3 dir) {\n\tvec3 p = point;\n    float result = 0.0;\n    for (int i = 0; i < 64; ++i) {\n    \tfloat d = -0.9 * blocks_sdf(p);\n    \tresult += d;\n        p = p + d * dir;\n        if (abs(d) < error_bound) {\n            return result;\n        }\n    }\n    return result;\n}\n\nconst vec3 light1 = vec3(0.36, 0.48, -0.8);\n\nconst vec3 light2 = vec3(-0.48, 0.64, -0.6);\n\nvec4 getSample(in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / max(iResolution.x, iResolution.y);\n\n    vec4 color_mul = vec4(1.0);\n\n    vec3 ray_orig = camera; // vec3(0.0, 0.0, -1.0); // sin(iTime));\n    vec3 ray_dir = normalize(vec3(uv - vec2(0.0, 0.1), -0.4));\n    float c_pitch = 0.9;\n    float s_pitch = 0.4358898943540673;\n    ray_dir = dir_mat *\n        mat3(1.0, 0.0, 0.0,\n        \t 0.0, c_pitch, -s_pitch,\n             0.0, s_pitch, c_pitch) * ray_dir;\n    float d1 = dist_to_grid(ray_orig, ray_dir);\n    float d2 = dist_to_blocks(ray_orig, ray_dir);\n    vec3 n = ray_dir;\n#if BUBBLES_DENSER_THAN_AIR\n    const float eta = 0.85; // 1.1; // 1.5;\n#else\n    const float eta = 1.1;\n#endif\n    if (d2 < d1 && d2 < 1.5 * EXTENT) {\n        ray_orig = ray_orig + ray_dir * (d2 + 0.01);\n    \tn = blocks_grad(ray_orig);\n        vec3 next_ray_dir = refract(ray_dir, n, eta);\n        float l = length(next_ray_dir);\n\n        if (l > 0.1) {\n            ray_dir = next_ray_dir / l;\n        \td2 = dist_out_of_blocks(ray_orig, ray_dir);\n        \tcolor_mul *= mix(vec4(0.9, 1.2, 0.5, 1.0), vec4(2.0),\n                         exp(-5.0 * max(d2, 0.0)));\n        \tray_orig = ray_orig + d2 * ray_dir;\n       \t\tn = blocks_grad(ray_orig);\n        \tnext_ray_dir = refract(ray_dir, -n, 1.0/eta);\n            l = length(next_ray_dir);\n            if (l > 0.1) {\n                ray_dir = next_ray_dir / l;\n            }\n        } else {\n            ray_dir = normalize(reflect(ray_dir, n));\n        }\n        d1 = dist_to_grid(ray_orig, ray_dir);\n        \n    }\n    vec3 bounce = ray_dir;\n    if ( d1 < 1.5 * EXTENT) {\n        vec3 p = ray_orig + ray_dir * d1;\n        ray_orig = p;\n        n = waffle_grad(p);\n        bounce = normalize(reflect(ray_dir, n));\n        color_mul *= vec4(vec3(0.5), 1.0);\n    }\n    \n    return color_mul * shade(ray_orig, bounce);\n }\n\n\nvec2 offsets[8] = vec2[8](vec2(-0.4, -0.4), \n                         vec2(-0.45, 0.1),\n                         vec2(-0.4, 0.4),\n                         vec2(0.1, 0.45),\n                         vec2(0.4, 0.4),\n                         vec2(0.45, -0.1),\n                         vec2(0.4, -0.4),\n                         vec2(0.0, 0.0));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 result = vec4(0.0);\n    \n    float c_theta = cos(0.05 * iTime);\n    float s_theta = sin(0.05 * iTime);\n\n    camera = mat3(c_theta, 0.0, s_theta,\n                  0.0, 1.0, 0.0,\n                  -s_theta, 0.0, c_theta) * camera;\n    \n    dir_mat = mat3(-c_theta, 0.0, -s_theta,\n                   0.0, 1.0, 0.0,\n                   s_theta, 0.0, -c_theta);\n    \n\tsun_dir = dir_mat * vec3(0.6, 0.0, -0.8);\n    \n    float nsamps = 0.0;\n    \n    for (int i = 0; i < 8; i += max(8 / MULTI_SAMPLE, 1)) {\n        result += getSample(fragCoord + offsets[i]);\n    \tnsamps += 1.0;\n    }\n    \n    fragColor = result / nsamps;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 12908,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/vantagenoise/aloha-ft-phaun"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}