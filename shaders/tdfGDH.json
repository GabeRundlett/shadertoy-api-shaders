{
    "Shader": {
        "info": {
            "date": "1546099144",
            "description": "Its an oddity!",
            "flags": 8,
            "hasliked": 0,
            "id": "tdfGDH",
            "likes": 3,
            "name": "Oddity",
            "published": 3,
            "tags": [
                "fractal",
                "gpusound"
            ],
            "usePreview": 0,
            "username": "Jamie_Pendergast",
            "viewed": 581
        },
        "renderpass": [
            {
                "code": "mat2 rotator(float theta)\n{\n\treturn mat2(cos(theta),-sin(theta), sin(theta), cos(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(-1. + 2. * fragCoord/iResolution.xy);\n\n    uv.x *= iResolution.x / iResolution.y;\n\tuv *= 3.;\n\tfloat dark_x = 2.;\n    float dark_y = 2.;\n        \n\n    \n    vec3 color;\n    \n    for(int i = 0; i < 3; ++i)\n    {\n        // right\n        if(uv.x > 0.5)\n        { \n            //top\n            if(uv.y >= 0.5)\n            {\n                color = vec3(0.2,0.2,1.);\n                color *= dark_x;\n            }\n            //bottom\n            else \n            {\n                color = vec3(1.,0.3,0.3);\n                color *= dark_y;\n            }\n        }\n        else\n        {\n            //top\n            if(uv.y >= 0.5)\n            {\n                color = 1. - vec3(1.,0.2,0.2);\n                color *= dark_y;\n            }\n            //bottom\n            else \n            {\n                color = 1. -  vec3(0.2,0.2,1.);\n                color *= dark_x;\n            }\n        }\n        \n        \n        uv /= dot(uv,uv);\n        \n        vec2 mouse = -1. + 2. * iMouse.xy / iResolution.xy;\n        uv += mouse;\n        uv = fract(uv.xy + vec2(-sin(iTime),cos(iTime))) *2. - 1.;\n         \n\t}\n    \n    \n    \n\n    // Output to screen\n    fragColor = vec4(color,0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float piano(float time, float freq)\n{\n \tint octaves = 3;   \n\tfloat most = 0.;\n    \n    float sound = 0.;\n    for(int octave = 1; octave < octaves; ++octave)\n    {\n        sound += sin(float(octave) * 6.28318530718 * freq * time) * exp(-time * 20.);\n    \tsound *= 1.1;\n        most = max(most,sound);\n    }\n    sound /= float(octaves) + most;\n    return sound; \n}\n\nfloat drum(float time, float freq)\n{\n\tfloat noise = fract(sin(time * 421.3) * 1432.32);\n    return sin(noise*freq) * exp(-time * 20.);\n}\n\nvec2 mainSound( in int samp, float time )\n{   \n    \n    // This prevents the cut out\n    time = mod(time,180.);\n    \n    float sounds[3];\n   \tsounds[0] = 440.;\n    sounds[1] = 330.;\n    sounds[2] = 350.;\n   \n    \n    float local_time = mod(time,3.);\n    int index = int(local_time);\n\n    return\n    // Main Beat :)    \n    vec2( \n       \t0.031 * drum(fract(time * 2.), sounds[index])  + \n        0.031 * drum(fract(2. * time * 2.), sounds[index]) +\n        0.125 * drum(fract(time * 0.5),sounds[index])  +\n        0.121 * drum(fract(time * 0.25),sounds[index]) +\n        \n        \n        0.231 * piano(fract(time), 100.) + \n        0.212 * piano(fract(time * 2.), 200.) +\n        0.123 * piano(fract(time * 2.), 300.) +\n        0.124 * drum(fract(time * 4.), 100.)\n    ) + \n        \n\tvec2(\n        piano(fract(time),sounds[index])\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}