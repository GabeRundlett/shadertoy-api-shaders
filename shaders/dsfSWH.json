{
    "Shader": {
        "info": {
            "date": "1668886111",
            "description": "Trying out recreation of Floyd–Steinberg dithering in GLSL\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dsfSWH",
            "likes": 0,
            "name": "Floyd–Steinberg dithering",
            "published": 3,
            "tags": [
                "grayscale",
                "imagefilter",
                "image",
                "pixelation"
            ],
            "usePreview": 1,
            "username": "Rutvik_Tak",
            "viewed": 427
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv=fragCoord/iResolution.xy;\n    \n    // Output to screen\n    \n    vec4 mycolor=vec4(uv.xyx,1.);\n    \n    //vec4 color = texture( iChannel0, uv.xy );\n    \n    vec4 bitRateColor=vec4(sin(mycolor.x*700.)*.3,cos(mycolor.y*700.)*.3,1.,1.);\n    vec2 res=iResolution.xy/3.;\n    vec2 pos=floor(uv*res)/res;\n    //if(max(abs(pos.x-.5),abs(pos.y-.5))>.5){\n   //     fragColor=vec4(0.);\n  //  }\n    \n    vec4 imagePixel=texture(iChannel0,pos.xy);\n    float factor = 1.0;\n    \n    //vec4 imagetopixelcolor=vec4(bitRateColor.xy,imagePixel.x,imagePixel.x);\n    \n   // float grayScaleValue=(imagetopixelcolor.x+imagetopixelcolor.y+imagetopixelcolor.z)/3.;\n    float newR = round(factor*imagePixel.r)*1./factor;\n    float newG = round(factor*imagePixel.g)*1./factor;\n    float newB = round(factor*imagePixel.b)*1./factor;//step(0.5,imagePixel.b);\n    \n    float errR = imagePixel.r - newR;\n    float errG = imagePixel.g - newG;\n    float errB = imagePixel.b - newB;\n    \n    \n    \n   // pixels[x + 1][y    ] := pixels[x + 1][y    ] + quant_error × 7 / 16\n  //  pixels[x - 1][y + 1] := pixels[x - 1][y + 1] + quant_error × 3 / 16\n  //  pixels[x    ][y + 1] := pixels[x    ][y + 1] + quant_error × 5 / 16\n  //  pixels[x + 1][y + 1] := pixels[x + 1][y + 1] + quant_error × 1 / 16\n\n\n    \n    vec3 filteredColor = vec3(errR,errG,errB);\n        fragColor=vec4(filteredColor,1.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}