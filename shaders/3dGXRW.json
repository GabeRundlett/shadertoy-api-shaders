{
    "Shader": {
        "info": {
            "date": "1573481179",
            "description": "made this in 25 minutes in front of an audience for Demosplash 2019's shader showdown.  The pulsating background is optimized for a 138 bpm song.\n\nhttps://www.youtube.com/watch?v=ik3T37fCydo",
            "flags": 0,
            "hasliked": 0,
            "id": "3dGXRW",
            "likes": 10,
            "name": "Pacman (Demosplash 2019)",
            "published": 3,
            "tags": [
                "pacman",
                "shadershowdown",
                "demosplash",
                "liveshader",
                "livecode"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 634
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(vec2 p) {\nint x = FK(p.x);int y = FK(p.y);\nreturn float((x*x-y)*(y*y+x)-x)/2.14e9;\n}\n\nfloat maze(vec2 p) {\nvec2 id = floor(p);\nfloat sgn = sign(hash(id));\np = fract(p)-0.5;\nreturn abs(abs(p.x+p.y*sgn)-0.5)/sqrt(2.);\n}\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\nreturn distance(p, mix(a, b, clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.)));\n}\n\nfloat scene(vec3 p) {\nvec2 crds = vec2(maze(p.xy), p.z);\nfloat walls = linedist(crds, vec2(0,0),vec2(0,1));\nreturn min(walls-0.05, p.z);\n}\n\nfloat light(vec3 p, vec3 l) {\nreturn pow(max(0., scene(p)-scene(p+l*0.01))/0.01,2.);\n}\n\nvoid pac(vec2 uv, inout vec3 col) {\nuv.y = abs(uv.y);\nif (length(uv) > 1.) return;\nif (atan(uv.x/uv.y) < -1. - sin(iTime*12.)*0.35-0.2) return;\ncol = vec3(1.,1.,0.);\n}\n\nvoid goast(vec2 uv, inout vec3 col, vec3 colgo) {\nvec2 head = vec2(0,0.2);\nif (length(uv-head+vec2(0.5,0)) < 0.1) {col = vec3(0); return;}\nif (length(uv-head-vec2(0.3,0)) < 0.1) {col = vec3(0); return;}\nif (length(uv-head+vec2(0.4,0)) < 0.2) {col = vec3(1); return;}\nif (length(uv-head-vec2(0.4,0)) < 0.2) {col = vec3(1); return;}\nif (abs(uv.x) > 0.8) return;\nif (uv.y < -1.) return;\nif (uv.y > .2 && length(uv - head) > 0.8) return;\nfloat tail = asin(sin((uv.x + floor(iTime)*3.)*20.))*0.05;\nif (uv.y+tail < -0.9) return;\ncol = colgo;\n}\n\nvec3 colgo4t(float t) {\nt = mod(t ,4.);\nif (t < 1.) return vec3(1.,0.,0.);\nif (t < 2.) return vec3(0.,1.,1.);\nif (t < 3.) return vec3(1.,0.5,0.);\nif (t < 4.) return vec3(0.7,0.,1.);\nreturn vec3(0.);\n}\n\nfloat bpm = 23.*6.;\n\nvoid dots(vec2 uv, float bt, inout vec3 col) {\nfloat old = uv.x;\nuv.x = fract(uv.x)-0.5;\nif (length(uv) > smoothstep(0.,1., bt+12.)*0.1) return;\nif (old+bt > 0.) return;\ncol = vec3(1.,1.,0.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\nvec2 olduv = uv*10.;\n\nfloat beat =  fract(iTime/60.*bpm);\n\nuv = vec2(uv.x*sign(uv.y), -abs(uv.y));\nvec3 cam =normalize(vec3(0.5 + beat*0.03,uv));\nvec3 init = vec3(-4.+iTime,iTime/10.,2.);\nvec3 p = init;\nbool hit = false;\nfor (int i = 0; i< 100; i++) {\nfloat dist = scene(p);\nif (abs(dist) < 0.001) { hit = true; break; }\n\np += cam*dist;\n}\nfloat l = light(p, cam);\nvec3 col = hit ? vec3(0.2,0.4,1)*l: vec3(0);\nfragColor = vec4(col ,0);\n\nfloat bt = (fract((iTime+2.5)/5.)-0.5)*30.;\nfloat bk = floor((iTime+2.5)/5.);\nvec2 anim = olduv + vec2(bt,0.);\npac(anim, fragColor.xyz);\ndots(olduv, bt, fragColor.xyz);\ngoast(anim - vec2(3,0), fragColor.xyz, colgo4t(bk));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}