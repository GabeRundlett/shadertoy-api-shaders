{
    "Shader": {
        "info": {
            "date": "1591226860",
            "description": "POV: you're having another airplane dream.",
            "flags": 32,
            "hasliked": 0,
            "id": "3lXczr",
            "likes": 28,
            "name": "JetStream Dreams",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "bloom",
                "gaussian",
                "airplane"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 524
        },
        "renderpass": [
            {
                "code": "// Plento \n// JetStream Dreams //\n\n// Toggle the bloom in common if its slow..\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = u/R;\n    vec2 nuv = vec2(u.xy - 0.5*R.xy)/R.y;\n    \n    if(iTime < 1.){\n    \tfloat di = max(25. - iTime*45., 0.);\n    \tuv.x += sin(uv.y*di)*.15;\n    }\n    \n\t#ifdef DoBloom\n    vec3 col = texture(iChannel0, uv).xyz;\n    vec3 blur = texture(iChannel1, uv).xyz;\n    vec3 sum = vec3(0);\n    \n    vec2 scl = 1./R;\n    \n    for(float i = 0.; i < iter; i++){\n        float g = gauss(i, nd);\n        \n        vec3 l = texture(iChannel1, uv+vec2(0., (i+1.)*scl.y)).xyz;\n        vec3 r = texture(iChannel1, uv-vec2(0., (i+1.)*scl.y)).xyz;\n        \n        sum += l*g;\n        sum += r*g;\n    }\n    \n    col += sum*4.3;\n    col = 1.-exp(-col);\n    col = pow(col, vec3(1.32));\n    \n    #else\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    col = 1.-exp(-col*1.8);\n    col = pow(col, vec3(1.5));\n    \n    #endif\n    \n    col *= ss(.67, .25, abs(nuv.y));\n    col *= ss(1.2, .5, length(nuv));\n    \n    col = mix((1.-col)*.4, col, min(iTime*1.3, 1.));\n    \n    f = vec4(col, 1.);\n    \n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\n#define ss(a, b, t) smoothstep(a, b, t)\n#define ch(chan, p) texelFetch(chan, ivec2(p), 0)\n\n\n// Turn the bloom off if its too slow for you\n#define DoBloom\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nconst float iter = 15.;\nconst float nd = iter*.5;\n\n\nfloat gauss(float i, float nd){\n     return exp(-(i*i)/(2.*nd*nd))/sqrt(2.*3.14159*nd*nd);  \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// sdf operations from https://iquilezles.org/articles/distfunctions\nfloat ssub( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat box( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat baggage(vec3 rp){\n    rp.x = -abs(rp.x);\n    vec3 p = rp - vec3(-1. - max((rp.y-.7)*1.5, 0.), .8, 0.);\n    p.z = mod(p.z, .4)-.4*.5;\n    float d = box(p, vec3(.05, .05, .5))-.3;\n    d = smin(d, box(p, vec3(0.45, .2, .175))-.1, .2);\n   \n    return d;\n}\nfloat fuselage(vec3 rp){\n    float d = abs(length(rp.xy)-1.0)-.06; // main cylinder\n    d = min(d, .5 + rp.y); // floor\n    d = min(d, .75 - rp.y); // ceiling\n    \n    // windows\n    rp.z = mod(rp.z, .8)-.8*.5;\n    d = ssub(box(rp, vec3(12., .04, .01)), d, .33);\n    d = max(d, box(rp, vec3(1.1, 2., 8.)));\n    \n    return d;\n}\n\nfloat seats(vec3 rp){\n    rp.x = -abs(rp.x);\n    \n    vec3 b = vec3(.34, 0., .8);\n    vec3 p = mod(rp-vec3(-1.9, -0.1, -.23), b)-b*.5; // backrest\n    vec3 p1 = mod(rp-vec3(-1.9, -.3, -.05), b)-b*.5; // seat\n    \n    // add backrest\n    float d = box(p, vec3(.125 - clamp((p.y-.06)*.2, 0., 1.), .2, .01))-.03; \n    // add seat\n    d = smin(d, box(p1, vec3(.125, .01, .1))-.03, .1); \n    // clip inside\n    d = max(d, -box(vec3(rp.x, rp.y, mod(rp.z, .5)-.5*.5), vec3(.21, 1., 4.)));\n    // clip outside\n    d = max(d, box(vec3(rp.x-.04, rp.y, mod(rp.z, .5)-.5*.5), vec3(.9, 4., 4.)));\n    // Add armrest\n    vec3 p2 = rp - vec3(-.225, -.15, -.13);\n    d = min(d, box(vec3(p2.x, p2.y, mod(p2.z, .8)-.8*.5),vec3(.01,.01,.1))-.015); \n   \n    return d;\n}\nfloat map(vec3 rp){\n    float d = 999.;\n    \n    d = fuselage(rp);\n    d = smin(d, baggage(rp), .03);\n    d = min(d, seats(rp));\n    \n    return d;\n}\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\nfloat march(vec3 rd, vec3 ro){\n \tfloat t = 0., d = 0.;   \n    \n    for(int i = 0; i < 64; i++){\n    \td = map(ro + rd*t); \t   \n        if(abs(d) < .001 || t > 8.){\n            break;\n        }\n        t += d * .95;\n    }\n    return t;\n}\n\nvec3 color(vec3 p, vec3 rd, vec3 n, vec2 u, float t){\n    vec3 lp = vec3(0., 0., iTime*.3);\n    vec3 ld = normalize(lp-p);\n    ld.x*=.01;\n    \n    float lgd = length(lp - p);   \n    float fal = max(exp(-lgd*1.6), .003);\n    \n    float dif = max(dot(n, ld), .0);\n    vec3 col = vec3(texture(iChannel1, p.yz*.7).x + .3);\n    \n    if(p.y < -.48)\n        col += vec3(3.)*ss(.02, .01, abs(-abs(p.x)+.2));\n    else if(p.y > -.33 && p.y < .13 && abs(p.x) < .85){\n     \tcol = (.75*vec3(.23, .23, .3)-texture(iChannel0, p.xy).z*.12)*.9;\n        col *= ss(0.01, 0.015, abs(p.y));\n    }\n    \n    // diffuse\n    col *= 1.-exp(-4.*dif*vec3(0.85, 0.9, 1.)*fal);\n    \n    // overhead light glow\n    vec3 fol = 4.*vec3(.5,.4,.3)*exp(-9.*abs(p.x-.5));\n    fol += 4.*vec3(.5,.4,.3)*exp(-9.*abs(p.x+.5));\n    fol *= ss(0.,.34, p.y-.6);\n    \n    col += fol;    \n    \n    // fog\n    vec3 fogCol = mix(vec3(.1), vec3(.9, .9, 1.0), ss(.15,.55,length(rd.xy)));\n    col = mix(fogCol, col, exp(-t*t*t*0.004));\n    \n\treturn col;   \n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - .5*R.xy)/R.y;\n    \n    vec3 rd = normalize(vec3(uv, 1.0 - dot(uv, uv) * .3));\n    vec3 ro = vec3(0., 0.35, iTime*.3);\n   \n    ro.y += + sin(iTime*3.)*.01;\n    rd.yz *= rot(.04+sin(-iTime*3.)*.01);\n    \n    if(iMouse.z > 0.){\n        rd.xz *= rot(-m.x*3.);\n        ro.y += m.y*.7;\n    }\n    \n    float t = march(rd, ro);\n    \n    vec3 n = normal(ro + rd*t);\n    vec3 col = color(ro + rd*t, rd, n, u, t);\n    \n    f = vec4(sqrt(clamp(col, .0, 1.)), 1.);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 f, in vec2 u ){\n    #ifdef DoBloom\n    vec2 uv = u / R;\n    vec3 sum = vec3(0);\n    vec2 scl = 1./R;\n    \n    for(float i = 0.; i < iter; i++){\n        float g = gauss(i, nd);\n        \n        vec3 l = texture(iChannel0, uv+vec2((i+1.)*scl.x, 0)).xyz;\n        vec3 r = texture(iChannel0, uv-vec2((i+1.)*scl.x, 0)).xyz;\n        \n        l = pow(l, vec3(2.2));    \n        r = pow(r, vec3(2.2));  \n        \n        sum += l*g;\n        sum += r*g;\n    }\n    f = vec4(sum, 1.0);\n    #else\n    f = vec4(0);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}