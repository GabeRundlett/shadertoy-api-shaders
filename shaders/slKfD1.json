{
    "Shader": {
        "info": {
            "date": "1664466519",
            "description": "Reference volumetric phase functions",
            "flags": 0,
            "hasliked": 0,
            "id": "slKfD1",
            "likes": 0,
            "name": "Volume Phase Test",
            "published": 3,
            "tags": [
                "test",
                "volumetric",
                "phase"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 48
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define PHASE 0.73\n\nfloat HG(float aCosTheta, float aAnisotropy)\n{\n\t/*\n\t\t\t1                  1 - g^2\n\t\t ----- * -------------------------------------\n\t\t  4PI     (1 + g^2 - 2g * cos(theta)) ^ (3/2)\n\t*/\n\tfloat g = aAnisotropy;\n\tfloat numerator = (1.f / (4.0*PI)) * (1.f - g * g);\n\n\tfloat x = 1.f + g * g - 2.f * g * aCosTheta;\n\tfloat f = 1.0/sqrt(max(x, 0.00001)); // x^(-1/2)\n\tfloat denominator = f * f * f; // x^(-3/2)\n\treturn numerator * denominator;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 screenSpace = uv * 2.0 - 1.0;\n\t\n    vec3 o = vec3(0.0, 0.0, -0.5);\n    \n    vec3 f = normalize(-o);\n    vec3 u = vec3(0,1,0);\n    vec3 r = normalize(cross(f, u));\n    \n    vec3 direction = normalize(f * 2.0 + \n                         r * screenSpace.x * iResolution.x / iResolution.y +\n                         u * screenSpace.y);\n\n    vec3 bg = texture(iChannel0,direction).rgb;\n    \n    float transmittance = 1.0;\n    vec3 scattering = vec3(0.0,0.0,0.0);\n    \n    vec3 indirectScattering = vec3(0.0, 0.0, 0.0);\n    float ts = 2.0*PI/64.0;\n    for(float t = 0.0; t < 2.0*PI; t += ts)\n    {\n        float ps = PI / 64.0;\n        for(float p = 0.0; p < PI; p += ps)\n        {\n            vec3 l = vec3(cos(t)*sin(p), cos(p), sin(t)*sin(p));\n            vec3 lc = texture(iChannel0,l).rgb * 2.0;\n\n            float slice = ts * ps * sin(p);\n            indirectScattering += lc * slice * HG(dot(l,direction), PHASE);\n        }\n    }\n    \n    float d = 0.0;\n    for(; d < 1.;)\n    {\n        float ss = 0.001;\n        vec3 pos = o + direction * d;\n\n        if(abs(pos).x < 0.15 && abs(pos).y < 0.15 && abs(pos).z < 0.15)\n        {\n            float extinction = 1.0/0.1* ss;\n            scattering += indirectScattering * transmittance * extinction;\n            transmittance *= exp(-extinction);\n        }\n        \n        d += ss;\n    }\n    \n    fragColor.rgb = scattering + bg * transmittance;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}