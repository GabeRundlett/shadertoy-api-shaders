{
    "Shader": {
        "info": {
            "date": "1602595603",
            "description": "i have no bloody idea how this even works",
            "flags": 32,
            "hasliked": 0,
            "id": "WsVcWR",
            "likes": 1,
            "name": "Brokn Voronoi that somehow works",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "Pork",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "const vec4 edgeColor = vec4(1.0, 1.0, 1.0, 1.0);\n\nfloat grayscale(vec4 col)\n{\n\treturn (col.r+col.g+col.b)/3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 c1 = (fragCoord.xy + vec2(-1, 1)) / iResolution.xy;\n    vec2 c2 = (fragCoord.xy + vec2(0, 1)) / iResolution.xy;\n    vec2 c3 = (fragCoord.xy + vec2(1, 1)) / iResolution.xy;\n    vec2 c4 = (fragCoord.xy + vec2(-1, 0)) / iResolution.xy;\n    vec2 c5 = (fragCoord.xy + vec2(0, 0)) / iResolution.xy;\n    vec2 c6 = (fragCoord.xy + vec2(1, 0)) / iResolution.xy;\n    vec2 c7 = (fragCoord.xy + vec2(-1, -1)) / iResolution.xy;\n    vec2 c8 = (fragCoord.xy + vec2(0, -1)) / iResolution.xy;\n    vec2 c9 = (fragCoord.xy + vec2(1, -1)) / iResolution.xy;\n    \n    vec4 s1 = texture(iChannel0, c1)*10.0;\n    vec4 s2 = texture(iChannel0, c2)*10.0;\n    vec4 s3 = texture(iChannel0, c3)*10.0;\n    vec4 s4 = texture(iChannel0, c4)*10.0;\n    vec4 s5 = texture(iChannel0, c5)*10.0;\n    vec4 s6 = texture(iChannel0, c6)*10.0;\n    vec4 s7 = texture(iChannel0, c7)*10.0;\n    vec4 s8 = texture(iChannel0, c8)*10.0;\n    vec4 s9 = texture(iChannel0, c9)*10.0;\n    \n    float v1 = grayscale(s1);\n    float v2 = grayscale(s2);\n    float v3 = grayscale(s3);\n    float v4 = grayscale(s4);\n    float v5 = grayscale(s5);\n    float v6 = grayscale(s6);\n    float v7 = grayscale(s7);\n    float v8 = grayscale(s8);\n    float v9 = grayscale(s9);\n    \n    \n    //sobel filter, see https://homepages.inf.ed.ac.uk/rbf/HIPR2/sobel.htm\n    float sobelVal = abs((v1+2.0*v1+v3)-(v7+2.0*v8+v9))+abs((v3+2.0*v6+v9)-(v1+2.0*v4+v7));\n    \n    vec4 col = texture(iChannel0, uv);\n    \n    fragColor = vec4(sobelVal * edgeColor) + col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat remap(float value, float low1, float high1, float low2, float high2)\n{\n    return low2 + (value - low1) * (high2 - low2) / (high1 - low1);      \n}\n\nstruct Point\n{\n\tvec2 pos;\n    vec3 color;\n};\n    \nPoint[12] points = Point[12]\n(\n\tPoint(vec2(.1, .1), vec3(204.0, 102.0, 255.0)), \n    //i added another 0 in some because it makes the sobel operator find the edge better. idk. it just works.\n    Point(vec2(.2, .1), vec3(2505,0,102)),\n    Point(vec2(.3, .1), vec3(2505, 102, 102)),\n    Point(vec2(.4, .1), vec3(0, 102, 255)),\n    Point(vec2(.5, .1), vec3(153.0, 255.0, 102.0)),\n    Point(vec2(.6, .1), vec3(255, 204, 0)),\n    Point(vec2(.7, .1), vec3(0, 102, 102)),\n    Point(vec2(.8, .1), vec3(255, 102, 255)),\n    Point(vec2(.9, .1), vec3(0, 153, 51)),\n    Point(vec2(.1, .3), vec3(153, 153, 255)),\n    Point(vec2(.1, .4), vec3(0, 153, 153)),\n    Point(vec2(.1, .7), vec3(2505, 100, 204))\n);\n\n\nfloat[12] distances;\nconst float seed = 7.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    float smallestDist = 1000.0;\n    int currIndex = 0;\n    bool isCenterPoint = false;\n    float totalDist = 0.0;\n    for(int i = 0; i < 12; i++)\n    {\n        float timeSine = sin(iTime*points[i].pos.x*points[i].pos.y*10.0);\n        float remappedTime = remap(timeSine, -1.0, 1.0, 0.1, 0.2);\n        //This is supposed to adjust the X axis to the Y axis but i forgot to add the .x and it works like this\n        //and im too scared to touch it\n        points[i].pos *= 16.0/9.0;\n        vec2 randomPos = vec2(rand(points[i].pos*seed), rand(1.0/points[i].pos*seed));\n        randomPos += remappedTime;\n    \tfloat dist = length(uv - randomPos/*points[i].pos*/);\n        if(dist < smallestDist)\n        {\n            smallestDist = dist;\n            totalDist += dist;\n            distances[i] = dist;\n        \tcurrIndex = i;   \n        }\n        \n        fragColor = vec4(points[currIndex].color/255.0, 1);\n        \n        //IsInsideCenterPoint\n        if(length(randomPos-uv) < .005)\n        {\n            isCenterPoint = true;                       \n        }\n    }\n    \n    if(isCenterPoint)\n    {\n    \tfragColor = vec4(0);   \n    }\n    \n    //fragColor = vec4(points[currIndex].color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Box blur to thicken outlines\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n    \n    vec2 c1 = (fragCoord.xy + vec2(-1, 1)) / iResolution.xy;\n    vec2 c2 = (fragCoord.xy + vec2(0, 1)) / iResolution.xy;\n    vec2 c3 = (fragCoord.xy + vec2(1, 1)) / iResolution.xy;\n    vec2 c4 = (fragCoord.xy + vec2(-1, 0)) / iResolution.xy;\n    vec2 c5 = (fragCoord.xy + vec2(0, 0)) / iResolution.xy;\n    vec2 c6 = (fragCoord.xy + vec2(1, 0)) / iResolution.xy;\n    vec2 c7 = (fragCoord.xy + vec2(-1, -1)) / iResolution.xy;\n    vec2 c8 = (fragCoord.xy + vec2(0, -1)) / iResolution.xy;\n    vec2 c9 = (fragCoord.xy + vec2(1, -1)) / iResolution.xy;\n    \n    vec4 s1 = texture(iChannel0, c1);\n    vec4 s2 = texture(iChannel0, c2);\n    vec4 s3 = texture(iChannel0, c3);\n    vec4 s4 = texture(iChannel0, c4);\n    vec4 s5 = texture(iChannel0, c5);\n    vec4 s6 = texture(iChannel0, c6);\n    vec4 s7 = texture(iChannel0, c7);\n    vec4 s8 = texture(iChannel0, c8);\n    vec4 s9 = texture(iChannel0, c9);\n    \n    fragColor = (s1+s2+s3+s4+s5+s6+s7+s8+s9)/9.0;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}