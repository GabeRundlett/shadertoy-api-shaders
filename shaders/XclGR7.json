{
    "Shader": {
        "info": {
            "date": "1702914426",
            "description": "2D Square SDF bump mapped",
            "flags": 32,
            "hasliked": 0,
            "id": "XclGR7",
            "likes": 11,
            "name": "SDF Bump Mapping",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "bumpmapping"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "#define R iResolution\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/R.xy;\n    \n    // Anti Aliasing\n    vec3 res = texture(iChannel0, uv).rgb;\n    vec3 dX = texture(iChannel0, uv+ vec2(1.,.0)/R.x).rgb;\n    vec3 dY = texture(iChannel0, uv+ vec2(.0,1.)/R.y).rgb;\n\n    vec3 col = res+dX+dY;\n    col /= 3.;\n    fragColor = vec4(col, .0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 hash22(vec2 p){\n    return fract(  sin( vec2(\n                            dot(p,vec2(178.357, 37.456)),\n                            dot(p,vec2(54.678, 87.3965)))) * vec2(36.5657, 25.689));\n}\nfloat hash(float d){\n    return fract(sin(d*21.45879)*14564.57);\n}\nfloat noise1(float p){\n    float idx = floor(p);\n    float f = fract(p);\n    \n    f = f*f*3.-2.*f*f*f;\n\n    float h0 = hash(idx);\n    float h1 = hash(idx+1.);\n    \n    return mix(h0, h1, f);\n}\nfloat noise(vec2 p){\n    vec2 idx = floor(p);\n    vec2 f = fract(p);\n    \n    f = f*f*3.-2.*f*f*f;\n\n    float h00 = hash22(idx).x;\n    float h01 = hash22(idx+vec2(0.,1.)).x;\n    float h10 = hash22(idx+vec2(1.,0.)).x;\n    float h11 = hash22(idx+vec2(1.,1.)).x;\n    \n    return mix(\n                mix(h00, h01, f.y),\n                mix(h10, h11, f.y),\n            f.x);\n}\nfloat PeriodicNoise(float t, vec2 seed){\n    t = t*3.14159;\n    return noise(vec2(cos(t), sin(t)) + seed);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float sdBox( in vec2 p, float r, float t)\n{\n    float M = 6. + 4.*cos(iTime*.05 + t*2.*3.14);\n    return pow(pow(abs(p.x), M) + pow(abs(p.y), M), 1./M) - r-.1;\n}\n\nfloat smoothmin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nfloat map(vec2 uv){\n    float id = 2.*(hash(-1.)-.5);\n    float PN = PeriodicNoise(iTime*(hash(id)-.5)*2., vec2(id, id)+150.);\n    vec2 pB = vec2(PeriodicNoise(iTime*id*.1, vec2(id, id)), PeriodicNoise(iTime*id*.1 + 17., vec2(id, id)))*3.*(PN-.5)*2.;\n    float a = iTime*.2;\n    mat2 rB = mat2(cos(a), sin(a), -sin(a), cos(a));\n    float d = sdBox(uv*rB - pB, .5, id);\n\n    for (float i=0.; i<15.; i++){\n        id = 2.*(hash(id)-.5);\n        PN = PeriodicNoise(iTime*(hash(id)-.5)*.1, vec2(id, id)+150.);\n        pB = vec2(PeriodicNoise(iTime*id*.01, vec2(id, id)), PeriodicNoise(iTime*id*.1 + 17., vec2(id, id)))*7.*(PN-.5)*4.;\n        a = iTime*.1*(exp(id))*id;\n        rB = mat2(cos(a), sin(a), -sin(a), cos(a));\n        d = smoothmin(d, sdBox(1.5*uv*rB - pB, .5*(.5+.5*sin(id*iTime*.5 + id + iTime*.5)), id), .2);\n    }\n\n    return d;\n}\n\nfloat smooth_floor(float x){\n    float m = fract(x);\n    return floor(x) + (pow(m, 20.) - pow(1.-m, 20.) )/2.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float d = map(uv*7.);\n    float X = 3. + 2.*cos(iTime * .17);\n    float idx =  floor(d*X);\n    if (d<.0){ d = .0; idx=-1.;}\n    float smth_idx = smooth_floor(d*X+4.);\n    float coord = fract(d*X);\n    fragColor = vec4(d, idx+1., coord, smth_idx);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(p) pow(texture(iChannel0, p).a, 2.)\n#define R iResolution\n\nvec3 palette(float t){\n    vec3 a = vec3(0.204,0.396,0.643);\n    vec3 b = vec3(0.361,0.208,0.400);\n    vec3 c = vec3(1., 1., 1.);\n    vec3 d = vec3(0.306,0.604,0.024)*.1;\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 calcNormal(vec2 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0001; // epsilon\n    float orig = T(p);\n    return normalize(\n      vec3( T(p - vec2(.5,.0)/iResolution.x) - T(p + vec2(.5,.0)/iResolution.x),\n             T(p - vec2(.0,.5)/iResolution.y) - T(p + vec2(0.,.5)/iResolution.y),\n            1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 info = texture(iChannel0, uv).rgb;\n    float d = info.x, idx = info.y, coord = info.z;\n  \n    vec3 col = palette(hash(idx)*10. + iTime * .1)*(.4+.6*pow(noise1(cos(idx*1.-.3*iTime)+iTime*.1), 4.))*4.;\n\n    // Bump Mapping\n    vec3 sn = calcNormal(uv); // Surface normal\n    vec3 sp = vec3(uv, idx); // Surface position.\n    vec3 rd = normalize(vec3(uv-.5, 1.)); // Direction vector from the origin to the screen plane.\n    vec3 lp = vec3(-.5,-.5, -1.); // Light position\n \tvec3 ld = lp - sp; // Light direction\n\tfloat lDist = max(length(ld), 0.001);\n\tld /= lDist;  \n    float atten = 1./(1.0 + lDist*lDist*0.2);\n\n\tfloat diff = max(dot(-sn, ld), 0.); \n    vec3 ldf = vec3(-ld.xy, ld.z);\n    float fresnel = pow( 1.+ dot(sn, ldf), 5. );\n    \n    col = atten*col*vec3(diff+fresnel);\n    fragColor = vec4(vec3(col), .0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}