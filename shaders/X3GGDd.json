{
    "Shader": {
        "info": {
            "date": "1718375216",
            "description": "A Belousov-Zhabotinsky (BZ) Reaction simulator. The other BZ reactions I've seen on here don't seem to use the chemical formulas so I thought I would go ahead and change that. ",
            "flags": 32,
            "hasliked": 0,
            "id": "X3GGDd",
            "likes": 7,
            "name": "Belousov Zhabotinsky Reaction",
            "published": 3,
            "tags": [
                "diffusion",
                "oscillating",
                "reaction",
                "belousov",
                "infection",
                "oscillations",
                "chemistry"
            ],
            "usePreview": 0,
            "username": "jwmaxwell",
            "viewed": 132
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define get(x,y) texture(iChannel0, uv + vec2(x, y) / iResolution.xy)\n\nconst float alpha = 1.2;\nconst float beta = 1.;\nconst float gamma = 1.;\n\nconst float radius = 2.; // Edit this for bigger reactions :)\n\nvec3 getAvgNeighbor(vec2 uv) {       \n    vec3 sum = vec3(0.);\n    float count = 0.;\n    for (float dx = -radius; dx++ <= radius;) {\n        for (float dy = -radius; dy++ <= radius;) {\n            if (length(vec2(dx, dy)) < radius) {\n                sum += get(dx, dy).xyz;\n                ++count;\n            }\n        }\n    }\n             \n    return sum.xyz / vec3(count);\n}\n\nvec4 life(vec2 uv) {\n    vec3 v = getAvgNeighbor(uv);\n    \n    float A = v.x;\n    float B = v.y;\n    float C = v.z;\n    \n    v.x = clamp(A + (A * (alpha * B - gamma * C)), 0., 1.);\n    v.y = clamp(B + (B * (beta  * C - alpha * A)), 0., 1.);\n    v.z = clamp(C + (C * (gamma * A - beta  * B)), 0., 1.);\n    \n    return vec4(v, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = iFrame > 4 ? life(uv) : texture(iChannel1, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}