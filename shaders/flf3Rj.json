{
    "Shader": {
        "info": {
            "date": "1622382061",
            "description": "Testing VR ",
            "flags": 1,
            "hasliked": 0,
            "id": "flf3Rj",
            "likes": 3,
            "name": "Simple bubbles raymarch VR",
            "published": 3,
            "tags": [
                "vrtest"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(1000.,-1.);\n    for (int i = 0; i < 10; ++i)\n    {\n        float fi = float(i)+iTime*0.0025;\n        vec3 pos = p - vec3(sin(fi+iTime*.5), cos(fi*5.), cos(fi))*sin(fi*3.)*7.;\n        float sz = .5+.2*sin(fi);\n        acc = _min(acc, vec2(length(pos)-sz,0.));\n    }\n    for (int i = 0; i < 10; ++i)\n    {\n        float fi = float(i)+10.+iTime*.01;\n        vec3 pos = p - vec3(sin(fi+iTime*fi*.01), cos(fi*5.), cos(fi))*sin(fi*3.)*7.;\n        float sz = .05+.025*sin(fi);\n        acc = _min(acc, vec2(length(pos)-sz,1.));\n    }\n    return acc;\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p += rd * res.x;\n    }\n    return vec3(-1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+(r*uv.x+u*uv.y)*3.);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 dordr(vec3 ro, vec3 rd)\n{\n    vec3 col = mix(vec3(1.000,0.000,0.349),vec3(.1), pow(sat(2.*abs(dot(rd, vec3(0.,1.,0.)))),.5));\n    vec3 res = trace(ro, rd, 32);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = (n *.5+.5);\n        if (res.z == 0.)\n            col = mix(vec3(1.000,0.000,0.349),vec3(.1,.1,.15), 1.-pow(sat(abs(dot(vec3(0.,1.,0.), n))),2.));\n        else\n            col = mix(vec3(0.094,0.969,0.471),vec3(.1,.1,.15), clamp(sin(n.y*10.),-1.,1.));\n        col = mix(vec3(0.05,0.1,0.2), col, 1.-sat(exp(-res.y*0.1)));\n    }\n    return col;\n}\n\nvec3 rdr2d(vec2 uv)\n{\n    float t = iTime*.5;\n    float d = 7.;\n    vec3 ro = vec3(sin(t)*d,0.,cos(t)*d);\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    rd = getCam(rd, uv);\n    vec3 col = dordr(ro, rd);\n    return col;\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    vec3 col =dordr(fragRayOri,fragRayDir);\n    \n    fragColor = vec4(col,1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col =rdr2d(uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}