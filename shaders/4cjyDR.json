{
    "Shader": {
        "info": {
            "date": "1722166483",
            "description": "Infinite Boxy Spiral II\n  The boxy spiral I made yesterday relied on looping\n  But I was thinking that I could possibly eliminate the loops by \n  randoming a bit of math.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4cjyDR",
            "likes": 11,
            "name": "Infinite Boxy Spiral II",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "// Infinite Boxy Spiral II\n//  The boxy spiral I made yesterday relied on looping\n//  But I was thinking that I could possibly eliminate the loops by \n//  randoming a bit of math.\n\n//  In this version I have just two boxes that I repeat, one for x axis and one for y axis.\n\n//  Perhaps someone more clever than me can figure out how to repeat a single box.\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\nconst float\n  pi    = acos(-1.)\n, tau   = pi*2.\n, phi   = (1.+sqrt(5.))*0.5\n, phi2  = phi*phi\n, phi4  = phi2*phi2\n, iphi4 = 1./phi4\n;\n\nfloat circle(vec2 p, float r) {\n  return length(p)-r;\n}\n\nfloat superCircle8(vec2 p, float r) {\n  p *= p;\n  p *= p;\n  return pow(dot(p,p), 1./8.)-r;\n}\n\nvec3 palette(float a) {\n  return 0.5*(1.+sin(vec3(0.,1.,2.)+a));\n}\n\nfloat geometric(float a, float r) {\n  return a/(1.-r);\n}\n\nfloat igeometric(float a, float r, float x) {\n  return log2(1.-x*(1.-r)/a)/log2(r);\n}\n\nvec2 geometric2(float a, float r, float n) {\n  float rn = pow(r, n);\n  float rn1 = rn*r;\n  return (a/(1.-r))*(1.-vec2(rn, rn1));\n}\n\nvec4 boxySpiralCoord(vec2 p, float z) {\n  float px = p.x;\n  float ax = abs(px);\n  float sx = sign(px);\n  float a = px > 0. ? phi2 : 1.;\n  a *= z;\n  float gdx     = geometric(a, iphi4); \n  ax            -= gdx;\n  float x       = igeometric(a, iphi4, -ax);\n  float nx      = floor(x);\n  vec2  lx      = geometric2(a, iphi4, nx)-gdx;\n  float minx    = lx.x;\n  float maxx    = lx.y;\n  float radiusx = (maxx-minx)*0.5;\n  float meanx   = minx+radiusx;\n  \n  p -= vec2(-1.,1./3.)*meanx*sx;\n  return vec4(p, radiusx, 2.*nx+(sx>0.?0.:1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  // To avoid log/div of zero. Thanks to @chronos for finding the issue.\n  p += 1E-3;\n\n  vec3 col = vec3(0.0);\n\n  float anim = TIME*0.5;\n\n  float aa = sqrt(2.)/RESOLUTION.y;\n\n  float pft = fract(anim*0.25);\n  float nft = floor(anim*0.25);\n  float piz = exp2(log2(phi4)*pft);\n\n  vec4 gcx = boxySpiralCoord(p, piz);\n  vec4 gcy = boxySpiralCoord(vec2(p.y,-p.x), phi*piz);\n\n  const float br = 0.99;\n\n  float dbx = superCircle8(gcx.xy, gcx.z*br);\n  float dby = superCircle8(gcy.xy, gcy.z*br);\n  float dcx = circle(gcx.xy, gcx.z*br)/gcx.z;\n  float dcy = circle(gcy.xy, gcy.z*br)/gcy.z;\n\n  float lx = 1.+2.*gcx.w;\n  float ly = 2.*gcy.w;\n  float nx = lx+4.*nft;\n  float ny = ly+4.*nft;\n\n  vec3 colx = palette(nx*tau/16.);\n  vec3 coly = palette(ny*tau/16.);\n\n  float fadein = mix(-5. ,14., smoothstep(-1., 0.5, -cos(anim)));\n  col = mix(col, colx-0.5*dcx, smoothstep(aa, -aa, dbx)*smoothstep(4.+fadein,fadein, lx-4.*pft));\n  col = mix(col, coly-0.5*dcy, smoothstep(aa, -aa, dby)*smoothstep(4.+fadein,fadein, ly-4.*pft));\n\n  col = sqrt(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}