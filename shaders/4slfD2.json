{
    "Shader": {
        "info": {
            "date": "1498233417",
            "description": "- click to roll between red, blue, empty (but the initial blocks).\n- no more than twice the same color along. \n- half red/blue per line and col.\n- no identical lines or cols.\nfrom [url]http://0hh1.com/[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "4slfD2",
            "likes": 6,
            "name": "0h h1",
            "published": 3,
            "tags": [
                "game"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 865
        },
        "renderpass": [
            {
                "code": "#define T(u)    texelFetch(iChannel0, ivec2(u), 0)\n#define s(v,e)  smoothstep(.5,.45,v+e)\n#define line    m += (1.-m)* step(abs(F.y),E) * step(-E,F.x) // segment\n#define E .1                                            // pipe thickness\n#define rot     F = vec2(F.y,-F.x)\n#define delay   15.                                     // more = unconnected\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float S = T(0).z,                                   // grid size\n          m = 0.;\n    int s = int(S)+1;\n    U *= (S+2.)/iResolution.y; U.x -= 3.;               // cell id\n    ivec2 u = ivec2(floor(U));\n    vec2 F = fract(U)-.5;\n    float V = U.x<0. ? -1. : T(U).x, v=V;               // cell content\n    if (u.x<1||u.y<1||u.x>=s||u.y>=s){                  // out of grid\n        V = T(0).x; \n        O = V==-1. ? vec4(.82)                          // grey\n            :  .5 + .5 * cos( V + vec4(0,2.1,-2.1,0) ); // if end of game: flash\n        V = T(u).y;\n        if ( V!=0. &&                                   // line/col validators\n             (   ( u.x==0 && u.y>0 && u.y<s )\n              || ( u.y==0 && u.x>0 && u.x<s )  \n           ) ) \n            O = mix(O, sign(V)*vec4(-1,1,0,0), s(length(F),.3));\n        return;\n    }\n   \n    V = mod(V,100.);\n    O = V==1. ? vec4(1,.3,0,0) : V==2. ? vec4(0,.5,1,0) : O-O; // --- draw content\n\n    O += step(.5-E/3.,abs(max(abs(F.x),abs(F.y))));     // draw grid\n    if (v>100.) O -= .1 * s(length(F),.4);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T(u)        texelFetch(iChannel0, ivec2(u), 0)\n#define pos(n)      ( u == ivec2(n) )\n#define set(i,j,v)  if pos(vec2(i,j)) O.x = float(v+100)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    ivec2 u = ivec2(U), m;\n    if (T(0).z == 0.) {                                  // restart game\n        int i,j,S, g = int(T(0).y) + 0 ;                 // + N to start at level N-1\n        O -= O;\n        if (g == 0) {                                    // game #1\n            S=6;                                         // 6x6 \n            set(1,1,1); set(2,1,1); set(4,1,2);\n            set(5,2,2);\n            set(4,3,1);\n            set(1,4,1); set(4,4,1); set(5,4,2);\n            set(3,6,2);\n        }\n        else if (g == 1) {                               // game #2\n            S=8;                                         // 8x8 \n            set(2,1,2);\n            set(3,2,1); set(4,2,1);\n            set(2,4,2); set(4,4,1); set(6,4,1); set (8,4,2);\n            set(3,5,1); set(5,5,2);\n            set(1,6,1); set(8,6,2);\n            set(2,7,2);\n            set(5,8,2);\n        } \n        else  g = S = 0; \n        if (u.x==0||u.y==0||u.x==S+1||u.y==S+1) O.x--;   // walls\n                                                         // --- global flags\n        if pos(0) O.yzw = vec3(g,S,99.);                 // store game, size\n        return;\n    }\n    \n    O = T(u);                                            // previous cell state\n    float V,v, S = T(0).z; int s=int(S)+1;               // grid size\n \n    if (u.x*u.y==0 && u.x<s && u.y<s && u.x!=u.y) {      // check validity of each line/col\n        int r=0, b=0, c=0, p=0, v, m=0;\n        ivec2 d = sign(u.yx);\n        for (int i=1; i<s; i++) {\n            v = int(T(u+i*d).x) % 100; \n            v==1 ? r++ : v==2 ? b++ : 0;                 // count reds and blues\n            c = v!=p ? 1 : v>0 ? c+1 : c; p=v;           // count repetitions\n            m = max(m,c);\n        }\n        O.y = m>2 ? -1. : r+b==int(S) ?  r==b ? 1. : -1. : 0.; // status: 1: finished -1: wrong\n        // NB: we don't check \"no identical lines or cols\", but it should trigger other invalid situations\n    }            \n        \n    v = 0.;                                              // --- game finished ? \n    for (int i=1; i<s; i++) \n        v += T(vec2(0,i)).y + T(vec2(i,0)).y;\n    if (v==S+S) {                                        //    win !\n        if (O.x<0.) O.x--;                               // flash during 135 frames\n        if (pos(0) && O.x<-135.) O.y++, O.z = 0.;        // next game\n        return;                                          // ( important... but droped by linux compiler )\n    }\n\n    if (max(U.x,U.y)>S+1.) return;                       // out of grid\n\n                                                         // --- mouse \n    m = ivec2(iMouse.xy*(S+2.)/iResolution.y); m.x -= 3; // cell id under mouse\n \n    if (iMouse.z>0.) {                                   // on click\n        if ( pos(m) && T(1).w==0.) {\n            V = T(m).x; \n            if(V<100.) O.x = mod(V+1.,3.);               // switch red, blue, empty\n        }\n        if pos(1) O.w=1.;                                // only once per click\n    }\n    else if pos(1) O.w=0.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}