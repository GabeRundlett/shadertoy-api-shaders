{
    "Shader": {
        "info": {
            "date": "1524869603",
            "description": "completely based on https://www.shadertoy.com/view/lslfR7 , but without the multi-pass bloom effect",
            "flags": 4,
            "hasliked": 0,
            "id": "ldcfWH",
            "likes": 14,
            "name": "simpler audiotunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "audio",
                "mic"
            ],
            "usePreview": 1,
            "username": "sclavel",
            "viewed": 5991
        },
        "renderpass": [
            {
                "code": "\nfloat time = 0.1;\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length( p.xz - c.xy ) - c.z;\n}\n\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n mat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\n\n\nvec2 map(vec3 p)\n{\n\n    vec3 q = p;\n\tp.z -= 0.1 * iTime + sin(iTime * 0.01)* 0.5;\n    vec3 c = vec3(0.53 / 4.0);\n    \n    p.z = mod(p.z,c.z)-0.5*c.z;\n         \n    vec4 noise = texture(iChannel1, floor(q.zz / 1.0));\n    \n    float freq =  atan(p.x, -p.y) / 3.1415 * 2.0 + fract(q.z) * 3.1415 * 2.0;\n    \n    float audio = texture(iChannel0, vec2((freq), 0.0)).r;\n    float audio2 = texture(iChannel0, vec2(fract(0.01*q.z), 0.0)).r;\n    \n  \tfloat r1 = 1.9 ;\n           \n    float r2 = r1 * (1.0 -  audio2);\n        \n    \n    float thickness = 0.02 * audio2;\n\n    \n    float inner = sdCappedCylinder(p.xzy , vec2(r2, 0.5));\n    float outer = sdCappedCylinder(p.xzy, vec2(r1, thickness));\n        \n    float result = opS(inner, outer);\n\n    float theta = iTime + q.z + audio2;\n    float r = 1.0;\n\tfloat ball = length(p + vec3(r * cos(theta), r * sin(theta), 0.0)) - audio2* 2.0;\n\tresult = opS(ball, result);                  \n\n\tball = length(p + vec3(r * cos(-theta), r * sin(-theta), 0.0)) - audio2* 2.0;\n\tresult = opS(ball, result);   \n    \n\tball = length(p + vec3(r * cos(theta + 3.1415), r * sin(theta + 3.1415), 0.0)) - audio2* 2.0;\n\tresult = opS(ball, result);   \n    \n\tball = length(p + vec3(r * cos(-theta + 3.1415), r * sin(-theta + 3.1415), 0.0)) - audio2* 2.0;\n\tresult = opS(ball, result);   \n    \n    return vec2(result, audio2);\n    \n}\n\n\n// See https://iquilezles.org/articles/palettes for more information\n\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid getCamPos(inout vec3 ro, inout vec3 rd)\n{\n    ro.z = iTime  ;\n  //  ro.x -= sin(iTime /5.7);\n  //  ro.y -= cos(iTime /  2.3);\n}\n\n vec3 gradient(vec3 p, float t) {\n\t\t\tvec2 e = vec2(0., t);\n\n\t\t\treturn normalize( \n\t\t\t\tvec3(\n\t\t\t\t\tmap(p+e.yxx).x - map(p-e.yxx).x,\n\t\t\t\t\tmap(p+e.xyx).x - map(p-e.xyx).x,\n\t\t\t\t\tmap(p+e.xxy).x - map(p-e.xxy).x\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n#define MAX_D 20.0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\ttime = iTime * 0.5;\n\n    vec2 _p = (-iResolution.xy + 2.0 * fragCoord.xy) / iResolution.y;\n    vec2 noise = texture(iChannel0, _p).rg;\n\n    vec3 ray = normalize(vec3(_p + noise * 0.01, 1.0));\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    bool hit = false;\n    getCamPos(cam, ray);\n    \n    float depth = 0.0, iter = 0.0;\n    vec2 d; \n    vec3 p;\n    \n    for( int i = 0; i < 50; i ++)\n    {\n    \tp = depth * ray + cam;\n        d = map(p);\n                  \n        if (d.x < 0.001 * pow(depth, 2.0)) {\n\t\t\thit = true;\n            break;\n        }\n        \n        if (depth > MAX_D)\n            break;\n                   \n\t\tdepth += d.x * 0.2; \n\t\titer++; \n    }\n    float ii = 1.0 - iter / 50.0;\n    vec3 col = vec3(ii); \n    if ( hit)\n    col *= pal(d.y, vec3(0.5,0.5,0.9),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20));\n    \n    fragColor = vec4(sqrt(sqrt(col)),1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}