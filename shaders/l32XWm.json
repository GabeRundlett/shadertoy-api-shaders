{
    "Shader": {
        "info": {
            "date": "1710808073",
            "description": "THIS IS FOR BEGINNERS",
            "flags": 0,
            "hasliked": 0,
            "id": "l32XWm",
            "likes": 1,
            "name": "A Simple LandScape",
            "published": 3,
            "tags": [
                "cartoons"
            ],
            "usePreview": 0,
            "username": "archon",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "\n\n#define S(a,b,t) smoothstep(a,b,t)\n#define NUM_LAYERS 1\n//sol\nfloat sun(in vec2 uv ,float blur)\n{\n \n  \n  \n  uv.y += -0.1 ;\n  uv.x += 0.05;\n  \n   //rotate\nfloat angle = radians(180.0) + iTime * radians(30.0);\n  mat2 rotate = mat2(cos(angle), -sin(angle),\n  sin(angle), cos(angle));\n  uv = rotate * uv;\n  \n  \n  \n  //mouse\n\n  \n  float d = length(uv);\n  //firts sun\n  float y = exp(cos(sin(iTime))); \n  float r = length(uv);\n  float b = atan(uv.x,uv.y);\n  float a = 0.001 + 0.1 * sin(b * 13.0) ;\n  float u = 0.1 + 0.1 * a;\n  float f = (r < u)?1.0 : 0.0;\n  \n  return f;\n}\n\n//sky\nvec3 SkyColor(in vec2 uv)\n{\n    //color\n    vec3 color = mix(vec3(0,3,5), vec3(0,0,0),uv.y);\n    \n    return color;\n}\n\n\n//clouds\nfloat nubes(in vec2 uv, vec2 p, float r, float blur)\n{\n    uv.x *= .1;\n    float x = uv.x;\n    \n    float d = length(uv-p);\n    float m = smoothstep(r,r-blur,d);\n    \n    return m;\n\n}\n\n\n\nfloat mountain(vec2 uv)\n{\n    float r = exp(10.0-uv.y);\n    return r;\n\n}\n\n//clouds 2\n\n\nfloat clouds2(in vec2 uv)\n{\n\n    uv.x += sin(iTime * 0.01);\n\n   float clouds = nubes(uv,vec2(0.0,0.3),0.03,.01);\n   clouds += nubes(uv,vec2(0.0,0.3),0.04,.01);\n   clouds += nubes(uv,vec2(-0.1,0.4),0.04,.01);\n   clouds += nubes(uv,vec2(0.06,0.4),0.04,.01);\n   clouds += nubes(uv,vec2(-0.02,0.5),0.04,.01);\n   clouds += nubes(uv,vec2(0.1,0.3),0.04,.01);\n   \n   return clouds;\n    \n}\n\n\n  \n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n     \n   \n\n    \n\n    //defines sky\n    vec3 sky = SkyColor(uv);\n    \n    //define sun\n   \n    vec3 col = vec3(sky * .3);\n    float sol = sun(uv, 0.5);\n    //sun col\n    vec3 sc = vec3(0.984,1.000,0.000);\n    col += sol;\n    \n    //nubes\n    float clou = clouds2(uv);\n    col += clou;\n   \n   \n //terraim\n \n  \nfor(float  i=0.; i < 1.;  i+=1./5.)\n{\n\n   uv.y += sin(uv.x * 9. * sin(iTime  * 0.2)) * 0.01;\n   \n    \n    \n}\n \n \n \n \n \n if(uv.y < -0.3)\n {\n \n    \n     col = vec3(0.063,0.318,0.114);\n \n }\n   \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}