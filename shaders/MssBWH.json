{
    "Shader": {
        "info": {
            "date": "1496095126",
            "description": "trying out some cubemaps / realistic shading day11",
            "flags": 0,
            "hasliked": 0,
            "id": "MssBWH",
            "likes": 4,
            "name": "chromeTunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "raymarch",
                "ibl"
            ],
            "usePreview": 0,
            "username": "nshelton",
            "viewed": 608
        },
        "renderpass": [
            {
                "code": "\nfloat time = 0.1;\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n mat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nfloat length8(vec3 x)\n{\n \treturn pow(dot(vec3(1.0, 2.0, 1.0), pow(x, vec3(8.0))), 1.0/8.0)  ;\n}\n\nfloat length8(vec2 x)\n{\n \treturn pow(dot(vec2(1.0, 1.0), pow(x, vec2(8.0))), 1.0/8.0)  ;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n    \n  vec2 q = vec2(length8(p.xy)-t.x,p.z);\n  return length8(q)-t.y;\n}\n\nfloat nsin(float x)\n{\n    return sin(x) * 0.5 + 0.5;\n    \n}\n\nfloat triangle(vec3 p, float thickness, float depth, float size)\n{\n    float outer = sdTriPrism(p, vec2(size, depth)); \n    float inner = sdTriPrism(p, vec2(size-thickness, 0.1)); \n    \n    return opS(inner,outer);   \n}\n\nvec3 map(vec3 p)\n{\n\n    vec3 q = p;\n\n    float rep = 0.1;\n        \n    vec3 c = vec3(rep);\n    p.z = mod(p.z,c.z)-0.5*c.z;\n\n    p = p * rotationMatrix(vec3(0.0, 0.0, 1.0), time* 0.2 + q.z);\n    vec3 p_e = p * rotationMatrix(vec3(0.0, 0.0, 1.0), time* 0.2 + q.z*3.0);\n    p_e.z += 0.01;\n\tfloat emissive = triangle(p_e, 0.001, 0.001, 0.08);    \n\tfloat solid = triangle(p, 0.09, 0.03 , 0.1);    \n\n    vec3 p_s = q;\n\tfloat blockID = rep * floor(q.z / rep);\n\n    p_s.z += sin(blockID) * 0.1;\n    p_s.z = mod(p_s.z,c.z)-0.5*c.z;\n    p_s = p_s * rotationMatrix(vec3(0.0, 0.0, 1.0), -iTime + 1.0 * sin(blockID* 0.1 * sin(q.z)));\n\n    float cutout = 1e10;\n    \n    for ( int i = 0; i < 6; i ++)\n    {\n        p_s = p_s * rotationMatrix(vec3(0.0, 0.0, 1.0), 0.33 * 3.14);\n\n        float circle = sdBox(p_s + vec3(0.0, 0.06 + 0.01 * nsin(blockID* 1.0), 0.0) , \n                             vec3(0.04, 0.01, 0.5));\n     \tcutout = min(cutout, circle);   \n    }\n    \n    float depth, material;\n    \n    solid = opS(solid, cutout);\n    //solid = min(cutout, solid);\n    \n    if ( emissive < solid )\n    {\n        depth = emissive;\n        material = 0.0;\n    }\n    else\n    {\n\t\tdepth = solid;\n        material = 1.0;  \n    }\n    \n    return vec3(depth, material, emissive);\n}\n\n\nvoid getCamPos(inout vec3 ro, inout vec3 rd)\n{\n    ro.z = time * 0.5;\n    ro.x += 0.01 * sin(iTime);\n}\n\n vec3 gradient(vec3 p, float t) {\n\t\t\tvec2 e = vec2(0., t);\n\n\t\t\treturn normalize( \n\t\t\t\tvec3(\n\t\t\t\t\tmap(p+e.yxx).x - map(p-e.yxx).x,\n\t\t\t\t\tmap(p+e.xyx).x - map(p-e.xyx).x,\n\t\t\t\t\tmap(p+e.xxy).x - map(p-e.xxy).x\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\ttime = iTime * 0.1;\n    vec2 _p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    vec3 ray = normalize(vec3(_p, 1.0));\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    bool hit = false;\n    getCamPos(cam, ray);\n    \n    float depth = 0.0, iter = 0.0;\n    vec3 d;\n    vec3 p;\n    \n    for( int i = 0; i < 80; i ++)\n    {\n    \tp = depth * ray + cam;\n        d = map(p);\n                  \n        if (d.x < 0.0001) {\n\t\t\thit = true;\n            break;\n        }\n        if ( depth > 20.0)\n            break;\n                   \n        \n\t\tdepth += d.x * 0.8;\n\t\titer++;\n                   \n    }\n    vec3 col = vec3(0.0);\n    \n    if(hit)\n    \tcol = vec3(1.0 - iter / 80.0);\n\n    if(hit)\n    // emissive\n    if( d.y == 0.0)\n    {\n        col = vec3(0.3, 1.0, 1.0);\n    }\n    else // solid\n    {\n        vec3 normal = -gradient(p, 0.001);\n        col *= dot(ray, normal);\n        vec3 light = vec3(cos(iTime), sin(iTime), 0.0);\n   \n        col += vec3(0.5, 0.9, 0.9) * dot(light, normal) * 0.1;\n        \n        vec3 ref = reflect(ray,normal);\n        \n        ref = ref * rotationMatrix(vec3(1.0, 1.0, 1.1), iTime/10.0);\n\n        col *= texture(iChannel0, ref).rbg;\n        col = pow(col, vec3(\n        \t1.0, \n            0.3, \n            0.2)) * 0.5;\n    }\n\n   \tfloat dd = d.z; //max(d.z, 0.01);\n        \n\t//col += vec3(0.1, 0.5, 0.5) * (1.0 / (dd));\n\n\tcol = clamp(col, vec3(0.0), vec3(1.0));\n\n    fragColor = vec4((col), 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}