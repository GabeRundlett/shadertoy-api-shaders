{
    "Shader": {
        "info": {
            "date": "1630233109",
            "description": "Done for Chaos Constructions 2021 Shader Jam.\n\n** With comments ! **",
            "flags": 64,
            "hasliked": 0,
            "id": "fdtGz2",
            "likes": 5,
            "name": "[CC 2021-08-28]  Shure Iken",
            "published": 3,
            "tags": [
                "terrain",
                "green",
                "outline"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "/*\n\nFOR THE SOUNDCLOUD, REFRESH THE PAGE IF YOU HAVE THE ERROR MESSAGE\n\nChaos Constructions 2021-08-28\n\n*** Thanks to all the shader showdown scene folks ***\n\n*** Thanks my co-participants Tater, eimink & provod. Go check their stuff ! ***\n\n*** Thanks havoc and random for organising the jam ! ***\n\n>>>>\n***** PRIVIET CHAOS CONSTRUCTION ! KAK DELA ?  *****\n<<<<\n*/\n\n//Bonzo Trick\n#define fGlobalTime iTime \n\n// Need this for switch Iso to non iso\n// You will see after, it's a munch of mix on camera \n// But keep in mind to respect everywhere the order of the mix\n// Here 0, mix left = Non iso and  1,mix right = Iso\n#define timer (clamp(cos(fGlobalTime*.5),-.25,.05)*2.+.5) \nmat2 rot(float a){float c=cos(a),s=sin(a);return  mat2(c,-s,s,c);}\n\nfloat txt(vec2 uv,float s){\n    uv = vec2(log(length(uv)),atan(uv.y,uv.x))*3.5/atan(1.); // LogPolar coordinates\n    uv -=fGlobalTime*.5; // Rotate and zoom in one  (thx logpolar)\n    int x = int(abs(uv.x)*s); \n    int y = int(abs(uv.y)*s);\n    float z = float(x ^ y) ;  // Some messing up, need int to play with Bit operation :) \n     return texture(iChannel0,fract(vec2( (z /s)*.1))).r; // I love fft based effect ;\n}\n// Based on iq\nfloat diam(vec3 p,float s){\n      p  =abs(p);\n      return (p.x+p.y+p.z-s)*inversesqrt(3.);\n       //                      ^----- does it make sense instead of sqrt(1./3.) ? I don't know\n  }\n// Based on iq  \n float box(vec3 p,vec3 b){ // Taht's a box, nothing fancy\n      vec3 q = abs(p)-b;\n      return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n    \n   }\n   \n   \n// a mix of Iq article on fbmdetail (and all fbm related stuff)\n// & Evvvvil stuff about displacement\n// It's a nice way to generate sort of terrain \nfloat dd(vec3 p){\n    p*=.1; // Scaling makes this low poly effect\n    float q = 0.; // Start at 0 but could tune that\n    vec4 pp= vec4(p,1.);\n    for(float i=0.;i<=12.;i++){ // yes 12 loop, but still \"cheap\" sort of ? \n           \n           // Doing whatever you want, clamp it and don't forget scale compentation\n           q += clamp(cos(length(pp.xz))+sin(pp.x)+sin(pp.z*2.) ,0.,.75)/pp.a; \n           pp.xz*=rot(-.785*i+i);\n           pp*=1.2;\n           pp.xyz = abs(pp.xyz)-.5;\n      }\n      return q;\n  \n }\n \n float qq = 0.; // Keep the displacement\n vec3 oop ;  // Keep the position for later\nvec2 sdf(vec3 p){\n   vec3 op =p ;\n    p.yz=mix(p.yz,p.yz*rot(atan(inversesqrt(1./2.))),timer); // Camera Switch between iso and non iso\n    p.xz=mix(p.xz,p.xz*rot(3.1415/4.),timer); // Camera Switch between iso and non iso\n    \n    vec2 h;\n   vec3 hp = p+vec3(0.,asin(sin(fGlobalTime)),0.); // Object doing up and down -> '/\\/\\/\\'\n    hp .x = abs(abs(hp.x)-3.1-texture(iChannel0,vec2(.3)).r)-1.5; // Duplication of 4 objects \n    hp.yz *=rot(-fGlobalTime); // You see them rollin\n    h.x = mix(box(hp,vec3(1.)),diam(hp,1.),1.3)*.9; // Secret receipe of the start / 3D shuriken\n    qq= sqrt(\n         texture(iChannel0,\n                 fract(vec2(floor(length(p.xz*10.)*.1)*.1-fGlobalTime*.5))\n                 ).r\n        )*.5; // did I told you I love fft  ? \n     h.y = mod(floor(fGlobalTime-p.x-p.z),2.) ==0. ? 3.:4.; // Texture switch for later\n     oop = hp; // need this for txture application later\n     \n     // Done with the shuriken, now the terrain\n     // Going forward right, or forwad on iso cam\n     p.zx +=fGlobalTime+100.;\n     vec2 t;\n    // Non conventional, not using the dot(n,vec3(0.,1.,0.)) but just p.y and then adding stuff\n    t.x = p.y+3.2+dd(p+qq*.5)*2.5+qq*.1+texture(iChannel0,vec2(p.z*.01)).r*.5;\n    \n    \n    //t.x = max(-(abs(p.x)+.5),t.x); I wanted to 'cut' the terrain in a band, couldn't remember how\n  \n    // Texture switch, the \"texture wave\" in the terrain\n    t.y = sin((op.x+op.z)*.1+fGlobalTime) < 0.01+qq? 1.:2.;\n    \n \n  // Mixing everything\n    h= t.x < h.x ? t:h;\n    \n    // OH YEAH\n    return h;  \n}\n\n// Routine for normal compute, sooo tini\n#define q(s) s*sdf(p+s).x\nvec3 norm(vec3 p, float e){vec2 nv= vec2(-e,e);return normalize(q(nv.xyy)+q(nv.yxy)+q(nv.yyx)+q(nv.xxx));}\n\n// Some ao, completly useless here and mostly incorrect\n#define ao(rp,n,k) (sdf(rp+n*k).x/k)\n#define AO(rp,n) (ao(rp,n,.1)+ao(rp,n,.3)+ao(rp,n,.5))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // El famoso background\n   vec3 col = vec3(.1)*txt(uv,100.);\n  \n  // Camera\n  vec3 ro = vec3(0.,0.,-5.);\n  float zz = 20.;\n  \n  ro = mix(ro,vec3(uv*zz,-zz),timer); // Camera Switch between iso and non iso\n  vec3 rd = normalize(vec3(uv,1.));\n  rd = mix(rd,vec3(0,0,1),timer);// Camera Switch between iso and non iso\n  vec3 light = vec3(1.,2.,-3.);\n  vec3 rp = ro;\n  vec3 acc = vec3(0.);\n  for(float i=0.;i<=128.;i++){\n      vec2 d= sdf(rp);\n      if(d.y == 1.){ // Add some \"glow\" on terrain\n        acc +=vec3(.1,0.,1.)*exp(-abs(d.x))/(69.-qq*10.);\n        \n        }\n      if(length(rp) > 75.) break; // If too far break;\n      if(d.x<.001){\n          vec3 n = norm(rp,.003); // Get normal\n          if(d.y == 1.){ // Texture 1 : \"Normal terrain\"\n          // For people that really know their stuff\n          // I'm still learning lightning, so what is under this comment\n          // will mostly be incorrect. I'm aware, and I'm working on it\n          float diff=  max(0.,dot(normalize(light-rp),n)); // diffraction \n          float spc = pow(max(0.,dot(normalize(ro-rp),reflect(-normalize(light),n))),16.); // Specular\n          float fr = pow(1.+dot(n,rd),8.); // Frenel\n          col = vec3(.01)*diff+ vec3(1.)*spc+fr*vec3(.0,1.,.0)*.5; //Color composition\n      \n          break; \n          } else if(d.y == 2.){ // Texture 2 : The terrain outline\n          // Outline stuff is basically computing the normal on the same point but at different\n          // \"scale / resolution / epsilon value\" and taking the different / lenght of it\n          // -> If you are on a surface that doesn't change that much (plane of sphere) length will be 0\n          // -> If you are close to and edge (corner , breaking in the shape), the length > 0\n              float edge = length(n-norm(rp,.001*length(ro-rp))); \n            col  = vec3(.0,1.,.0)*edge;\n            \n              break;\n          } else if(d.y== 3.){  // texture 3: Boring texture for shuriken\n  float diff=  max(0.,dot(normalize(light-rp),n));            \n            col = diff * vec3(1.);\n            \n                break;\n            } else if(d.y == 4.){ // Texture 4, the generative texture applied to shuriken\n               float diff=  max(0.,dot(normalize(light-rp),n));\n                col = diff*vec3(2.)*txt(oop.xz*.1,1.);\n                break;\n            }\n       }\n       \n       rp+=rd*d.x*.9; // Poor trick to avoid glitch (as you can see not fixing everything)\n    \n   }\n  col +=acc; // Don't forget the glow\n\n    // YAY\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 28014,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/rezdubstep/signals-ep-out-now"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}