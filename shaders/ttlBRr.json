{
    "Shader": {
        "info": {
            "date": "1595886714",
            "description": "rotate0",
            "flags": 0,
            "hasliked": 0,
            "id": "ttlBRr",
            "likes": 0,
            "name": "rotate0",
            "published": 3,
            "tags": [
                "rotate0"
            ],
            "usePreview": 0,
            "username": "pohy",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "vec2 rotate(vec2 v, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * v;\n}\n\nfloat posSin(float x) {\n    return sin(x) * .5 + .5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec2 mouse = (iMouse.xy - iResolution.xy * .5) / iResolution.y;\n    \n    \n    //uv *= .5;\n\n    // Time varying pixel color\n    vec3 col;\n    \n    float c = 25.;\n    for (float i = 1.; i < c; i++) {\n\t\tfloat it = ((c - i) / c);\n        //vec2 pos = vec2(1. + float(i) * .1, .0);\n        //uv += pos;\n        float angle = posSin(iTime * .005) * 3.1415 * 4. * mod(i, 2.);//mouse.x * 3.1415;\n        vec2 rotUv = rotate(uv, angle);\n        \n        vec2 fractUv = uv;\n        fractUv *= 1.2;\n    \tfractUv = fract(fractUv) * sign(fractUv);\n        fractUv *= .9;\n        \n        //uv = mix(rotUv, fractUv, .1);\n        uv = rotUv;\n\n        float size = (i / c);// * (1. + posSin(iTime) * .2);\n        float d = length(uv - vec2(clamp(uv.x, -size, size), clamp(uv.y, -size, size)));\n        float rect = smoothstep(.001, .0, d) * it;\n        //vec3 color = vec3(it * posSin(iTime * i) * .1);\n        vec3 color = vec3(.1, .1 * mod(i, 2.), 1. * posSin(iTime * i * .1) * it);// * mod(iTime * .1, 1.);\n\n        col += color * rect;\n        //col += ((c - i) / c);\n    }\n    \n    \n    //col += d;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}