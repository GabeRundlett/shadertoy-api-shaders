{
    "Shader": {
        "info": {
            "date": "1565462782",
            "description": "drag mouse for quaternion rotation\narrow keys to accellerate and roll\nsee image tab\n\nparent bezierPatch  : https://www.shadertoy.com/view/XsjSDt\nparent flyQuaternion: https://www.shadertoy.com/view/MldczM\n",
            "flags": 48,
            "hasliked": 0,
            "id": "ttjSzw",
            "likes": 2,
            "name": "triangle BaryQuadraticBbezier",
            "published": 3,
            "tags": [
                "bezier",
                "camera",
                "bspline",
                "fly",
                "bpatch"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 556
        },
        "renderpass": [
            {
                "code": "//drag mouse for quaternion rotation\n//arrow keys to accellerate and roll\n\n//parent bezierPatch  : https://www.shadertoy.com/view/XsjSDt\n//parent flyQuaternion: https://www.shadertoy.com/view/MldczM\n//child               : https://www.shadertoy.com/view/wlSyzd\n\n//A triangular cubic bezier patch, bound by 6 CV-heights, \n//is tranceable analytically with good performance and precision\n//for no good reason i never bothered to fix the camera of /XsjSDt, till now\n//and i notice that this shader sucks if the camera is inside the bezier-triangle-prism.\n\n//it works fine, as long as the patch is not too planar\n//any near-planar bezierPatch has a too small determinant which diminishes precision too much.\n//the first few milliseconds of this demo are near-planar\n\n//it works fine as long as the camera is not inside the bounding-prism (incl min&&max height) \n//of the bezier patch\n\n//But if the camera is inside the bezierPrism, the roots are in the wrong order. \n//and it seems to treat roots behind the camera as if they are infront of the camera??\n\n//BUT it always renders 2 patches, and their distance to each other is the distance of the camera to vec3(0)\n//, as if they are mirror images.\n//and they intersect when the camera is close to it.\n//, and they appear to swap places when you move over one of them.\n//and then you may confuse it for its mirror image.\n\n//the open question here is, how to remove the mirror image solution?\n\n//the whole code is in BufferA (and the common tab)\n//buffer a is the backbuffer/doublebiffer\n//, needed to store moving camera properties.\nvoid mainImage(out vec4 o, in vec2 u){\n o=texture(iChannel0,u/iResolution.xy, -100.0 );\n  //o+=mainImage2(o,u);\n}\n\n//everything is in BuffA!\n//it needs a buffer for camera position and rotation.",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//buffA.start\n\nconst vec2 p1=vec2(-4,0),p2=vec2(4,0),p3=vec2(0,sqrt(3.)/3.*4.*4.);//corners.xy of a triangle\nconst float f200=2.,f020=2.,f002=2.,f011=-2.,f101=-2.,f110=-2.;//6 Control points,named by index\n\n\n\nfloat suv(vec3 a){return a.x+a.y+a.z;}\nvec3 BezierTriangle_Quadratic_Normal(const vec3 u,const vec3 a,const vec3 b//get normal(2nd derivative)of quadradicBezier triangularPatch\n){return normalize(cross(vec3(p1-p2,suv(u*vec3(a.x-b.z,b.z-a.y,b.y-b.x)))\n                        ,vec3(p1-p3,suv(u*vec3(a.x-b.y,b.z-b.x,b.y-a.z)))));}\n\nvec4 ComputeBezierColor(vec3 u,vec3 d,vec3 a,vec3 b,float res,inout vec3 cd//get color based on bezier tri intersection+lighting\n){vec4 v4ISect=BezierTriISect(u,d,a,b,p1,p2,p3,res,cd)//analytical intersection of ray [u,d] and triangular quadratic-bezier patch(6 CV-heights [a,b])\n ;vec3 hotPos=normalize(vec3(.7)),c=vec3(0);float A=0.\n ;if(v4ISect.w<=1.\n ){vec3 n=BezierTriangle_Quadratic_Normal(v4ISect.xyz,a,b)//analytical first derivative\n  ;c=n*.5+.5\n  ;if(board(v4ISect.xyz*9.)>0.)c.z=1.-c.z//barycentric checkerboard\n  ;A=1.;}return vec4(c,A);}\n\n#define THRUST 0.1*iTimeDelta\n#define ROLL 1.0*iTimeDelta\n#define ROTATE 4.0*iTimeDelta\n//collision epsilon\n#define TOO_CLOSE 0.01\n//should scale with movement speed\n\n//controls (i may have swapped left and right here, do not overthing this one)\n#define LEFT_ARROW 39\n#define RIGHT_ARROW 37  \n#define UP_ARROW 38\n#define DOWN_ARROW 40\n\n//load and save, originally from iq, modified\nfloat isInside(vec2 p,vec2 c){vec2 d=abs(p-.5-c)-.5;return -max(d.x,d.y);}\nvec4 load(int re){return texture(iChannel0,(.5+vec2(re,.0))/iChannelResolution[0].xy,-100.);}\nvoid store(in int re, in vec4 va, inout vec4 o, in vec2 u\n){if(isInside(u,vec2(re,0))>.0)o=va;}//o=(isInside(u,vec2(re,0))>.0)?va:o;}\n//bool KeyDown(in int key){return (texture(iChannel1,vec2((float(key)+0.5)/256.0, 0.25)).x>0.0);}\nfloat key(in int key){return texture(iChannel1,vec2((float(key)+0.5)/256.0, 0.25)).x;}\n\n//quaterion math\nvec4 qid(){return vec4(0,0,0,1);}\n//return q2, rotated by q1, order matters when unsigned(axes) are not identical.\nvec4 qmulq(vec4 q1, vec4 q2){return vec4(q1.xyz*q2.w+q2.xyz*q1.w+cross(q1.xyz,q2.xyz)\n,(q1.w*q2.w)-dot(q1.xyz,q2.xyz));}\nvec4 aa2q(vec3 axis, float angle){return vec4(normalize(axis)*sin(angle*0.5),cos(angle*0.5));}\nvec4 qinv(vec4 q){return vec4(-q.xyz,q.w)/dot(q,q);}//inverse quaternion\n//return p, rotated by q;\nvec3 qmulv(vec4 q, vec3 p){return qmulq(q,qmulq(vec4(p,.0),qinv(q))).xyz;}\n//rotate pitch,yaw,roll in that order:\nvec4 qpyr(vec3 o){o*=0.5;vec3 s=sin(o),c=cos(o)\n;return vec4(s.x*c.y*c.z+s.y*c.x*s.z,s.y*c.x*c.z-s.x*c.y*s.z\n,s.x*s.y*c.z+s.z*c.x*c.y, c.x*c.y*c.z-s.x*s.y*s.z);}\n/*\nvec4 q2aa(vec4 q){return vec4(q.xyz/sqrt(1.0-q.w*q.w),acos(q.w)*2.0);}//assumed q is normalized coverts to axis&angle\nvec4 qlookat(vec3 v){return aa2q(vec3(-v.y,v.x,0.0),acos(v.z/length(v)));}//point in direction v\nvec3 vmulq(vec3 p, vec4 q){return qmulq(qinv(q),qmulq(vec4(p,0.0),q)).xyz;}//inverse rotation\nvec4 qslerp(vec4 q1, vec4 q2, float f){\n\tfloat d=dot(q1,q2),theta=acos(abs(d)),ost=(1.0/sin(theta)); \n\treturn normalize(q1*sin(theta*(1.0-f))*ost*sign(d)+q2*sin(theta*f)*ost);}/**/\n\n//return signed distane of[p] to a surface. (relict for collision detection of flyCamera.\nfloat gd(vec3 u){return 999.;}//never collide\n\n/*\n//namespace convention\n[o]RayOrigin\n[d]RayDirection\n[c]color, to be returned\n[f]FragmentSpaceScaling, to blur rasterization, against moire;a=smoothstep(s,-s,a);\n[t]TimeTraveled (implies division by speed of light) == distance to camera \n[g]gradient, signed distance to surface.\n*/\n\nfloat sp(vec3 u,vec3 d,vec4 s//draw CV as transparent spheres,with simple projection;radius scaled by distance to camera.//cameraPos,Sphere\n){u-=s.xyz;float a=dot(d,u);u.x=length(u);s.w+=.0001;u.y=s.w*s.w;return sat(mix(0.,1.,(a*a-(u.x*u.x)+u.y)/(u.y-s.w*s.w)));}\nfloat ComputeOverlay(vec3 u,vec3 d,vec3 a,vec3 b){return sp(u,d,vec4(p1,a.x,.2))+sp(u,d,vec4((p1+p2)*.5,b.z,.2))\n +sp(u,d,vec4(p2,a.y,.2))+sp(u,d,vec4((p3+p1)*.5,b.y,.2))+sp(u,d,vec4(p3,a.z,.2))+sp(u,d,vec4((p2+p3)*.5,b.x,.2));}\n\nvec3 bezierPatch(vec3 v,vec3 d){//position,direction\n ;v-=vec3(11,11,11)\n ;vec4 o=vec4(0);\n ;mat3 pq=pqfmA()//matrix of different quadratic fields, to be most aperiodic\n ;pq=pq*(iTime*.2+.001)//.001 to skip the coplanar case at iTime==0 (with tiny determinant). dare to get closer to it, its quite the precision-mess where it gets too planar (but not quite planar)\n ;vec3 a=cos(pq[0]),b=cos(pq[1])\n ;//a=vec3(0,1,2)\n ;//b=vec3(0,1,2)\n ;a*=5.\n ;b*=5.\n ;vec3 cd=vec3(0)\n ;//a*=0.0;b*=0.0 //known bug, planar case has determinant of 0 special case!\n ;vec4 c=ComputeBezierColor(v,d,a,b,iResolution.x,cd)\n ;c=mix(vec4(.5,.5,.5,1.),c,c.a)//lazy alpha compositioning\n ;if(c.xyz==vec3(.5))c.xyz=mix(c.xyz,cd,.2)//debug color output\n ;o=mix(c,vec4(.7,.7,.7,1),ComputeOverlay(v,d,a,b))\n ;return o.xyz;\n ;}\n \nvec3 scene(vec3 o,vec3 d){return bezierPatch(o,d);}//origin,direction\n\nvec4 mainImage2(out vec4 fragColor, in vec2 fragCoord){\n vec3 t=normalize(vec3((2.0*fragCoord-iResolution.xy)/iResolution.y,1.0));\n vec3 o=load(0).xyz;\n vec4 fw=(load(1));\n t=qmulv(fw,t);\n //ro=eye;rd=normalize(dir);\n return vec4(scene(o,t),1.0);\n}\n\nvoid steer( out vec4 o, in vec2 u\n){vec4 p,qrot\n ;if(iFrame<2){//init\n ;p=vec4(.1,0,0,.01)\n ;qrot=normalize(vec4(.1,.2,.3,.8));\n }else{//next frame\n  ;p=load(0);qrot=load(1)//load state from previous frame\n  ;vec3 fw=vec3(0,0,1)\n  ;fw=qmulv(qrot,fw) //this can be done simpler\n  ;vec3 newp=p.xyz+fw*p.w*.2\n  ;if(gd(newp)>TOO_CLOSE)p.xyz=newp\n  ;else{\n   ;if(gd(vec3(p.xy,newp.z))>TOO_CLOSE)p.z=newp.z;\n   ;if(gd(vec3(p.x,newp.y,p.z))>TOO_CLOSE)p.y=newp.y;\n   ;if(gd(vec3(newp.x,p.yz))>TOO_CLOSE)p.x=newp.x;//mkay every domain checked intependently\n  ;}\n ;p.w+=THRUST*(key(UP_ARROW)-key(DOWN_ARROW));\n ;float roll=ROLL*(key(RIGHT_ARROW)-key(LEFT_ARROW));\n ;vec2 m=vec2(0)\n ;if(iMouse.z>.0\n ){\n  ;vec4 mouse=iMouse\n  ;mouse=iMouseZwFix(mouse,false)\n  ;vec2 n=mouse.xy-mouse.zw\n  ;n.x=-n.x\n  ;m.xy-=(n)/iResolution.xy\n ;}\n ;vec4 qp=qpyr(vec3(m.yx*ROTATE,roll))\n ;qrot=normalize(qmulq(qrot,qp))//normalize before saving\n;}\n;store(0,p,o,u)//position,velocity\n;store(1,qrot,o,u)//rotation\n;}\n\nvoid mainImage(out vec4 o,vec2 u){\n;if(all(lessThan(u,vec2(2.5,1.5))))steer(o,u)\n    ;else o=mainImage2(o,u); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 iMouseZwFix(vec4 m,bool NewCoke\n ){if(m.z>0.){ //while mouse down\n    if(m.w>0.)return m;//mouse was clicked in THIS     iFrame \n    else m.w=-m.w      //mosue was clicked in previous iFrame\n    //remember, MouseDrag advances the iFrame Count, even while paused !!\n ;}else{if(!NewCoke||m.w>0.)return m.xyxy; //OPTIONAL onMouseUp (fold or whatever)\n    m.zw=-m.zw;}\n  return m;}\n\n#define v0 float\n#define v1 vec2\n#define v2 vec3\n#define v3 vec4\n#define u2(a)(a*2.-1.)\n#define u5(a)(a*.5+.5)\n#define dd(a)dot(a,a)\n//perpendicular dot()used for line intersections.\n#define dotp(a,b)dot(vec2(-a.y,a.x),b)\nv0 suv(vec2 a){return a.x+a.y;}\nv0 miv(v1 a){return min(a.y,a.x);}\nv0 miv(v2 a){return min(a.z,miv(a.xy));}\nv0 miv(v3 a){return min(miv(a.zw),miv(a.xy));}//return min domain of vector.\n#define mav(a)-miv(-a)\n#define sat(a)clamp(a,0.,1.)\nvec4 minx(vec4 a,vec4 b){return mix(b,a,step(a.x,b.x));}//return the vec4 with the smaller .x\n\n\nfloat ad(vec2 a){return a.x+a.y;}\n\n#define rs3 sqrt(3.)\n#define rs5 sqrt(5.)\n#define u3(a)((a)*2.+1.)\n#define u4(a)((a)*.5-.5)\n#define phi u4(rs5)\n#define Phi u5(rs5)\n//(reciprocal) [skewConstant] arithmetic:   [rs*]==[reciprocal square of *]\n// ske==.36602540378;//==sqrt(3.)*.5-.5\n#define   ske u4(rs3)\n//reSke=.21132486540;//==(sqrt(3.)*.5-.5)/sqrt(3.)==.5-.5/sqrt(3.)\n#define reSke u4(rs3)/rs3\n//enter [0.366025] or [.2113248654] in search engines and be amazed by peoplewho use values without knowing them\nvec2   skew(vec2 u){return u+ad(u)*ske;}\nvec2 unskew(vec2 u){return u-ad(u)*reSke;}\n\n//https://www.shadertoy.com/view/4lySzc\n\nfloat board(vec3 p){\n\tp=floor(p*2.0);\n  return mod(p.x+p.y+p.z,2.0);}\n\nfloat board(vec2 p){\n\tp=floor(p*2.0);\n  return mod(p.x+p.y,2.0);}\n\n\nmat3 opop(vec3 a,vec3 b){return outerProduct(a,vec3(1))\n                                +outerProduct(  vec3(1),b);}\nmat3 pqfmA(){return opop((vec3(2,7,5)),sqrt(vec3(13,21,17)));}\n//matrix of quadratic fields with unique prime factors to maximize period length\n//also has the neat effect of all starting at null, which tends to be (near) a special (coplanar) case\n// that we can then skip over and safely assert to not reorrur anytime soon.\n\nfloat det2d(vec2 a,vec2 b){return a.x*b.y-a.y*b.x;}//2d determinant(mat2(a,b))-=perpendicular dotproduct\n\n//Cartesian to barycentric(relative to spline verts)\nvec3 CartToBary(vec2 c,vec2 p1,vec2 p2,vec2 p3\n){c-=p1;vec2 a=p2-p1,b=p3-p1,d=vec2(dot(c,b),dot(c,a))\n ;vec3 r=vec3(dd(a),dd(b),dot(a,b))\n ;r=vec3(0.,det2d(r.yz,d),det2d(r.xz,d.yx))/det2d(r.yz,r.zx)\n ;return vec3(1.-r.y-r.z,r.yz);}\n\n\n/*\nbezier patch analytic: https://www.shadertoy.com/view/4tSyRz\n- single page, less duped code. trutural sorting \n- less globals, more object oriented.\n- more defines\n- larger render distance.\n- establishing [tiny namespace convention]\n- - mostly in scene()\n- - distance field is called gd() and gd1()for colors (resolves fractal G-buffer stuff?)\nparent: https://www.shadertoy.com/view/lsd3Dl\n  Rocket City by eiffie (although there are no rockets \n   and there is little if any esemblance to a city this is what eiffie called it)\n  eiffie just wanted to make a reusable flight control \n   but then messed that up with collision detection.\n*/\n\n\n//LineSegmentAB+RayUD intersection\nvec2 LineISect(vec2 a,vec2 b,vec2 u,vec2 d\n){b=vec2(b.y-a.y,a.x-b.x);d=vec2(d.y-u.y,u.x-d.x);u=vec2(dot(d,u),det2d(b,d))\n ;if(u.y==0.)return vec2(0);a.x=dot(b,a);b*=u.x;d*=a.x;return vec2(d.y-b.y,b.x-d.x)/u.y;}\n\n#define altm(a,b)any(lessThan(vec4(a,b.zw),vec4(b.xy,a)))\n/* //explicit version for compatibility where bvec4 is not a defined type.\nbool altm(vec2 a,vec4 b){\n ;vec4 c=vec4(a,b.zw)\n ;b=vec4(b.xy,a)\n ;if(c.x<b.x)return true;\n ;if(c.y<b.y)return true;\n ;if(c.z<b.z)return true;\n ;if(c.w<b.w)return true;\n ;return false\n ;//return any(lessThan(vec4(a,b.zw),vec4(b.xy,a)))\n ;}*/\n\n//by @JJcoolkl,crunched by ollj\n//analytical intersection of RAY [u,d]=[origin,direction] \n//and quadratic-bezier triangular-patch(6 CV-heights)\n//in:\n//c1,c0 6 CW heights (orthogonal to triangle plane)\n//p1,p2,p3 corners of base triangle\n//res=resolution.x (screen width in oixel)\n//out:\n//.xyz returns intersection\n//.w   returns if it hits (.w<=1 means it hit a surface)\n//inout:\n//cd is a debug color, used to show the bounding volume, and 3 cases within that volume.\nvec4 BezierTriISect(const vec3 u,const vec3 d,vec3 c1,vec3 c0,vec2 p1,vec2 p2,vec2 p3,float res,inout vec3 cd\n){vec2 L=u.xy-d.xy\n ,a=LineISect(p1,p2,u.xy,L)//project the ray onto the triangle, within its ray+triangle intersections\n ,b=LineISect(p2,p3,u.xy,L)\n ,c=LineISect(p3,p1,u.xy,L)//three 2d intersections\n //there are 3 distinct ways to slice a triangle in two, in respect to its corners, told apart by g+bA, h+bB, o+bC\n ;vec4 q=vec4(-1,-1,1,1)*.001/res//tiny epsilon accounts for precision loss. this seals the seam between 2 planes in screenspace\n //;vec4 q=vec4(-1,-1,1,1)*4./res//just to visualize the screenspace seam\n ,g=vec4(min(p1.x,p2.x),min(p1.y,p2.y),max(p1.x,p2.x),max(p1.y,p2.y))+q\n ,h=vec4(min(p2.x,p3.x),min(p2.y,p3.y),max(p2.x,p3.x),max(p2.y,p3.y))+q\n ,o=vec4(min(p3.x,p1.x),min(p3.y,p1.y),max(p3.x,p1.x),max(p3.y,p1.y))+q\n ;bool bA=altm(a.xy,g),bB=altm(b.xy,h)\n ;vec3 f,e=(vec3(a.x,b.x,c.x)-u.x)/d.x//e stores 3 lengths.x of raystart.x to intersections.x, we care more for the shorter ones here.\n ;if(!(bA||bB)){cd+=vec3(.7,0,0) //if the plain red face shows, cB was not calculated.\n                      ;f=u+d*miv(e.xy);e=u-d*miv(-e.xy);//intersection with 1/3 sides of a \"triangle prism\"\n ;}else{bool bC=altm(c.xy,o)//restructured,1/3 of all cases skips the calculation of cB\n  ;if(!(bB||bC)){      f=u+d*miv(e.yz);e=u-d*miv(-e.yz);cd+=vec3(0,.7,0)//intersection with 1/3 sides of a \"triangle prism\"\n  ;}else if(!(bA||bC)){f=u+d*miv(e.zx);e=u-d*miv(-e.zx);cd+=vec3(0,0,.7)//intersection with 1/3 sides of a \"triangle prism\"\n  ;}else return vec4(0,0,0,2);}//no intersection!\n ;vec3 S=CartToBary(f.xy,p1,p2,p3)//barycentric projection root solving black magic\n ;vec3 E=CartToBary(e.xy,p1,p2,p3)-S//Plug in eye ray and solve variables for root finding.\n ;o.xyz=2.*vec3(dot(E*E,c1)+2.*dot(vec3(E.y*E.z,E.x*E.z,E.x*E.y),c0)\n               ,dot(E*S,c1)+   dot(vec3(dot(E.yz,S.zy),dot(E.xz,S.zx),(E.x*S.y+E.y*S.x)),c0)//i smell a cross()\n               ,dot(vec3(S.y*S.z,S.x*S.z,S.x*S.y),c0))\n       +vec3(0,f.z-e.z,dot(S*S,c1)-f.z)//3 root solving factors. .x is the scalar\n ;o.z=o.y*o.y-2.*o.x*o.z\n ;if(o.z>=0.&&o.x!=0.//not sure if this worksaving is really needed.\n    ){a=(vec2(1.,-1.)*sqrt(o.z)-o.y)/o.x; //a now stores 2 distances to two roots, scaled to a [0..1] barycentric range., a.x may not be within that range, meaning theres less than 2 roots.\n  ;if(abs(a.x-.5)<=.5//;if(a.x>=0.&&a.x<=1.\n  ){if(a.y>=0.) a.x=miv(a); //a.xy may not be within that [0..1]range, meaning theres less than 2 roots, we hope theres one root.\n   ;cd+=vec3(.3,.3,0);return vec4(S+a.x*E,a.x);}\n  ;if(abs(a.y-.5)<=.5){cd+=vec3(0,.3,.3);return vec4(S+a.y*E,a.y)//;if(a.y>=0.&&a.y<=1.)\n  ;}};return vec4(0,0,0,2);}//no intersection\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}