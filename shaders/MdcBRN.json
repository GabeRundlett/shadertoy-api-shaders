{
    "Shader": {
        "info": {
            "date": "1524213679",
            "description": "revisited variant using 1D Voronoi, + tilable\nCreates a decorated stone tile pattern. The id can be used for bump height and unique color per tile.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdcBRN",
            "likes": 6,
            "name": "Decor Wall Tiles ( tilable )",
            "published": 3,
            "tags": [
                "wall",
                "tiles",
                "mz"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 781
        },
        "renderpass": [
            {
                "code": "// Fork of \"Decor Wall Tiles\" by markusm. https://shadertoy.com/view/4dyyDh\n// shapes groups version: https://www.shadertoy.com/view/4stBz4\n\nconst float CELL =  14.,        // grid size vertically -> cell size\n           RATIO = 2.8,         // brick length / brick width\n          JITTER = 3.;          // jitter Voronoi amount. 1 = stay in cell\nvec2  CYCLE = vec2(5,10);       // pattern repeat scale ( in #brick )\n\n// --- 1D version Voronoi. IQ version https://www.shadertoy.com/view/MslGD8\n\nfloat hash( vec2 p ) { return fract(sin(dot(p,vec2(127.1,311.7)))*18.5453); }\n\n#define disp(p) ( -(JITTER-1.)/2. + JITTER * (p) )\n\nvec2 voronoi( vec2 u )\n{\n    vec2  n = floor( u );\n    float f = fract( u.x );\n\n\tvec2 m = vec2(1e5);\n    for( float g=-2.; g<=2.; g++ )\n        {\n            float o = hash(mod(n + vec2(g,0),CYCLE)),\n                  d = abs(g - f + disp(o));\n            if( d < m.x )\n                m = vec2( d, o );\n        }\n\n    return m;\n}\n\n// --- Returns the stone tile height and id at the given pos\n\nvec2 stone( vec2 uv )\n{\n    uv *= CELL; uv.x /= RATIO;\n    uv.y = floor( uv.y  );\n    vec2 c = voronoi( uv );\n    float height = c.y * .7;\n            \n    return vec2( height, c.y );\n}\n\n// --\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 p = U/iResolution.y;\n\n    p.y += iTime * 0.2;\n    \n    vec2 res = stone( p );\n\n    O = vec4(res.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}