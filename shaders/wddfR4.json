{
    "Shader": {
        "info": {
            "date": "1604533469",
            "description": "Cool pixelated fire simulation using cellular automata and the rule's to Conway's game of life.",
            "flags": 32,
            "hasliked": 0,
            "id": "wddfR4",
            "likes": 2,
            "name": "Pixelated Fire Simulation",
            "published": 3,
            "tags": [
                "fire",
                "automata",
                "cellular",
                "pixelated"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float liveCells = 0.0;\n    float totalCells = 0.0;\n    for (float i=-5.0; i < 6.0; i++) {\n        for (float j=-5.0; j < 6.0; j++) {\n            liveCells += texelFetch(iChannel0, ivec2(fragCoord + vec2(i, j)), 0).x;\n            totalCells += 1.0;\n        }\n    }\n\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    float brightness = (liveCells / totalCells) * 3.0;\n    if (brightness > 0.0) {\n        fragColor.rgb = vec3(mix(vec3(1.0, 0.0, 0.0), vec3(1.0, 1.0, 0.0), brightness));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float MAX_LIFETIME = 10.0;\nconst float DECAY = 0.1;\n\nfloat Hash21(in vec2 xy) {\n    vec2 n = xy * fract(dot(xy, vec2(534.75, 65.54)));\n    return pow(fract(dot(xy + n, n)), 2.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float liveNeighbors = 0.0;\n    float selfLifeLeft = 0.0;\n    float selfState = 0.0;\n    for (float i=-1.0; i < 2.0; i++) {\n        for (float j=-1.0; j < 2.0; j++) {\n            vec2 stateAndLifeLeft = texelFetch(iChannel0, ivec2(fragCoord + vec2(i, j)), 0).xy;\n            if (i == 0.0 && j == 0.0) {\n                selfState = stateAndLifeLeft.x;\n                selfLifeLeft = stateAndLifeLeft.y;\n            }\n\n            else {\n                liveNeighbors += stateAndLifeLeft.x;\n            }\n        }\n    }\n\n    if (selfState == 0.0) {\n        if (liveNeighbors == 3.0) {\n            selfState = 1.0;\n        }\n    }\n\n    else {\n        if (liveNeighbors < 2.0 || liveNeighbors > 3.0 || selfLifeLeft == 0.0) {\n            selfState = 0.0;\n        }\n    }\n\n    if (length(0.5 * iResolution.xy + vec2(cos(iTime), cos(iTime) * sin(iTime)) * 200.0 - fragCoord) < 25.0) {\n        selfState += Hash21(fragCoord + Hash21(vec2(iTime))) > 0.5 ? 1.0 : 0.0;\n        selfLifeLeft = MAX_LIFETIME;\n    }\n\n    fragColor = vec4(selfState, max(0.0, selfLifeLeft - DECAY), 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}