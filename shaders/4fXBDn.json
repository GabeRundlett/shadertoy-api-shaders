{
    "Shader": {
        "info": {
            "date": "1723565069",
            "description": "An explicit numerical PDE solver for the the 2D linear advection equation with constant wind vector. Numerical integration is carried out using a first-order explicit (Forward Euler) method, combined with first-order upwinding in space.",
            "flags": 32,
            "hasliked": 0,
            "id": "4fXBDn",
            "likes": 0,
            "name": "2D advection solver",
            "published": 3,
            "tags": [
                "advection",
                "solver",
                "gaussian",
                "numerics",
                "upwinding"
            ],
            "usePreview": 0,
            "username": "dsteinmo",
            "viewed": 90
        },
        "renderpass": [
            {
                "code": "/** \nCopyright Derek Steinmoeller, Math Faculty Computing Facility, University of Waterloo, 2024. \nLicense: MIT.\n**/\n\n// texelFetch-er to access neighboring pixels from the stored buffer.\nvec4 Load(in ivec2 idx)\n{\n    return texelFetch(iChannel0, idx, 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;  \n    float u;\n  \n    ivec2 ifragCoord = ivec2(fragCoord);\n    \n    // Load the solution for this pixel.\n    u = Load(ifragCoord).z;\n    \n    // Apply colormap (based on 'darkjet.m' called with an input resolution=10, and linear interpolation).\n    if (u < 0.1) {\n        fragColor = vec4(0.0, 0.0, u*10.0*0.6666, 1.0);\n    } else if (u < 0.2 && u >= 0.1) {\n        fragColor = vec4(0.0, 0.0, 0.6666 +(u-0.1)*10.0*(0.9996-0.6666), 1.0);\n    } else if (u < 0.3 && u >= 0.2) {\n        fragColor = vec4(0.0, 10.0*(u-0.2)*0.3320, 0.9996 + 10.0*(u - 0.2)*(0.9961 - 0.9996), 1.0);\n    } else if (u < 0.4 && u >= 0.3) {\n        fragColor = vec4(0.0, 0.3320 + 10.0*(u-0.3)*(0.6429-0.3320), 0.9961 + 10.0*(u-0.3)*(0.9644 - 0.9961), 1.0);\n    } else if (u < 0.5 && u >= 0.4) {\n        fragColor = vec4(0.0, 0.6429 + 10.0*(u-0.4)*(0.7030-0.6429), 0.9644 +(u-0.4)*(0.7030-0.9644), 1.0);\n    } else if (u < 0.6 && u >= 0.5) {\n        fragColor = vec4(10.0*(u-0.5)*0.2343, 0.7030, 0.7030 + 10.0*(u-.5)*(0.4687 - 0.7030), 1.0);\n    } else if (u < 0.7 && u >= 0.6) {\n        fragColor = vec4(0.2343 + 10.0*(u-0.6)*(0.6429 - 0.2343), 0.7030 + 10.0*(u-.6)*(0.9644 - 0.7030), 0.4687 + 10.0*(u-.6)*(0.3215-.4687), 1.0);\n    } else if (u < 0.8 && u >= 0.7) {\n        fragColor = vec4(0.6429 + 10.0*(u-.7)*(.9961 - .6429), .9644 + 10.0*(u-.7)*(.9961 - .9644), 0.3215 + 10.0*(u-.7)*(-0.3215), 1.0);\n    } else if (u < 0.9 && u >= 0.8) {\n        fragColor = vec4(0.9996, 0.9961 + 10.0*(u - .8)*(.6664 - 0.9961), 0.0, 1.0);\n    } else if (u <= 1.0 && u >= 0.9) {\n        fragColor = vec4(1.0, 0.6664 + 10.0*(u - .9) * (.3333 - .6664), 0.0, 1.0);\n    } \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/** \nCopyright Derek Steinmoeller, Math Faculty Computing Facility, University of Waterloo, 2024. \nLicense: MIT.\n**/\n\n// Horizontal wind-velocity component\nconst float c = 0.55;\n// Vertical wind-velocity component.\nconst float d = 0.25;\n// Time-step safety factor (<= 1.0).\nconst float CFL = 0.45;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/** \nCopyright Derek Steinmoeller, Math Faculty Computing Facility, University of Waterloo, 2024. \nLicense: MIT.\n**/\n\n// texelFetch-er to access neighboring pixels from the stored buffer.\nvec4 Load(in ivec2 idx)\n{\n    return texelFetch(iChannel0, idx, 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float u;\n    float uL;\n    float uD;\n    float L = 1.0; \n    \n    // Get grid spacing / widths of 'finite volume' cells.\n    float dx = L/float(iResolution.x);\n    float dy = L/float(iResolution.y);\n    float dt = CFL * min( dx / c, dy/d);\n    \n    // Get coordinates of this cell, and two neighbors.\n    ivec2 ifragCoordCentre = ivec2( fragCoord - 0.5);\n    ivec2 ifragCoordLeft = ifragCoordCentre - ivec2(1, 0);\n    ivec2 ifragCoordDown = ifragCoordCentre - ivec2(0, 1);\n    if (iFrame == 0) {\n        // Define Initial Condition.\n        u = 1.0*exp(-((uv.x - 0.5 )/.15) * ((uv.x - 0.5)/.15) - ((uv.y - 0.5 )/.15) * ((uv.y - 0.5)/.15));\n    } else {\n        //Advection: Grab from the cell to the left, and the cell underneath (assuming a left-to-right and bottom-to-top 'wind components').\n        u = Load(ifragCoordCentre).z;\n        uL = Load(ifragCoordLeft).z;\n        uD = Load(ifragCoordDown).z;\n        u -= (c*dt/dx) * (u - uL) + (d*dt/dy) * (u - uD); // Dimensional splitting.\n    }\n    \n    // Set monochromatic output to be the solution scalar.\n    fragColor = vec4(0.0, 0.0, u, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}