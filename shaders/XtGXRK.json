{
    "Shader": {
        "info": {
            "date": "1485122113",
            "description": "Built on top of one of my recent shaders: https://www.shadertoy.com/view/MlKXWm",
            "flags": 0,
            "hasliked": 0,
            "id": "XtGXRK",
            "likes": 17,
            "name": "Camouflage",
            "published": 3,
            "tags": [
                "camouflage"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 1774
        },
        "renderpass": [
            {
                "code": "// #define BW 1\n\nfloat patternForPos(vec2 uv, float reso, float time) {\n    float timeOsc = sin(time) * 0.15;\t\t\t\t\t\t\t\t// oscillation helper\n    float dist = 0.;\t\t\t\t\t\t\t\t\t\t\t\t// start distance count from 0\n    for(float i=10.; i < 60.; i++) {\t\t\t\t\t\t\t\t// create x control points\n        float rads = timeOsc + i;\t\t\t\t\t\t\t\t\t// get rads for control point\n        vec2 ctrlPoint = vec2(sin(rads), cos(rads));\t\t\t\t// control points in a circle \n        ctrlPoint *= abs(cos(rads)) * 15.;\t\t\t\t\t\t\t// oscillate control point radius - the magic happens w/abs()\n        dist += sin(i + reso * distance(uv, ctrlPoint));\t\t\t// sum up oscillated distance between control points\n    }\n    return dist;\n}\n\nvec2 rotateCoord(vec2 uv, float rads) {\n    uv *= mat2(cos(rads), sin(rads), -sin(rads), cos(rads));\n\treturn uv;\n}\n\nvec3 colFromRGB(float r, float g, float b) {\n    return vec3(r, g, b) / 255.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime / 4.;\n    // grab postion and rotate per layer\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\t// center coordinates\n    vec2 uv2 = rotateCoord(uv + 1., time + 1.);\n    vec2 uv3 = rotateCoord(uv * 2., time + 2.);\n    vec2 uv4 = rotateCoord(uv + 1.5, time + 3.);\n    // create pattern at different resolutions\n\tfloat col = patternForPos(uv, 4., time);\n\tfloat col2 = patternForPos(uv2, 9., time);\n\tfloat col3 = patternForPos(uv3, 3., time);\n\tfloat col4 = patternForPos(uv3, 2.25, time);\n    // create final pattern\n    vec3 color = vec3(0);\n    #ifdef BW\n    \tfloat colorSum = col + col2 + col3 + col4;\n        color = vec3(sin(colorSum * 2.));\n    #else\n        if(col2 + col + col4 > 2.85) color = colFromRGB(53., 58., 65.);\n        else if(col2 < 0.81) color = colFromRGB(102., 86., 58.);\n        else if(abs(col4 * col3) > 4.5) color = colFromRGB(80., 120., 77.);\n        else color = colFromRGB(199., 188., 125.);\n    #endif\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}