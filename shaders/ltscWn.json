{
    "Shader": {
        "info": {
            "date": "1504421197",
            "description": "An effect i saw in a famous computer game.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltscWn",
            "likes": 11,
            "name": "Magic Ring",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "sdf",
                "ring"
            ],
            "usePreview": 0,
            "username": "bmodone",
            "viewed": 695
        },
        "renderpass": [
            {
                "code": "//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n///////////////////////////////////////////////////////////////////////\n// END OF RIPS\n///////////////////////////////////////////////////////////////////////\n\n// Subtract sdf (a-b)\nfloat sdf_sub(float a, float b) {\n    return max(-b, a);\n}\n\n// 2D Donut SDF\nfloat ring(vec2 p, float radius, float thickness) {\n    float l = length(p);\n    float ht = thickness / 2.0;\n    float inner = l - (radius - ht);\n    float outer = l - (radius + ht);\n    return sdf_sub(outer, inner);\n}\n\n// Decellerate towards 1.0\nfloat upsidePowerCurve(float x, float e) {\n    return 1.0-pow(1.0-x, e);\n}\n\n// Decellerate towards 1.0, then acc+dec back to 0.0\nfloat bulgeCurve(float x, float e) {\n    // Type this in google:\n    // 3.0*x*((1.0-x)^2.0)*2.25*(1.0-x)\n    return 3.0*x*pow(1.0-x,2.0)*2.25*(1.0-x);\n}\n\n// Waterline function\nfloat clip(float x, float t, float range) {\n    return clamp((x-t)/range-t+1.0, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(0.5, 0.5);\n    uv.x *= iResolution.x / iResolution.y;\n\t\n    // Static attributes\n    float radius = 0.3;\n    float thickness = 0.02;\n    \n    // Repeating time [0, 1] range\n    float timespan = 4.0;\n    float t = mod(iTime/timespan, 1.0);\n    \n    // Animate parameters\n    float upow = upsidePowerCurve(t, 6.0);\n    radius *= upow;\n    thickness *= bulgeCurve(t, 3.0);\n    \n    float d = ring(uv, radius, thickness);\n    \n    \n    float ns = (snoise(vec3(uv*6.0/upow, iTime/10.0))+1.0)/2.0;\n    float clippedNoise = clip(ns, t, 0.1);\n\t\n    // Hard edge\n    //float m = d > 0.0 ? 0.0 : 1.0;\n    // Make smooth\n    float m = clamp(-d*100.0, 0.0, 1.0);\n    m *= clippedNoise;\n    // TODO: Make glow\n    \n    // show noise\n    //m = (uv.x < 0.0) ? ns : clippedNoise;\n    \n\tfragColor = vec4(0.5, 0.7, 1.0, 1.0) * m * 3.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}