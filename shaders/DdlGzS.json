{
    "Shader": {
        "info": {
            "date": "1666334027",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "DdlGzS",
            "likes": 4,
            "name": "Fractal mosaic 24 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\nvec2 triangle_wave(vec2 a){\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return\n        abs(fract((a1)*(a2.x+a2.y))-.5)\n        //*atan(a1.y,a1.x) //another nice variation\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    vec2 uv = (fragCoord)/iResolution.y/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/2.;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    bool t3 = true;\n    for(int k = 0; k < 6; k++){\n        t3 =\n            uv.x < uv.y\n            //(uv.x < uv.y || t3) || (uv.x > uv.y || !t3)\n        ;\n\n        //uv.x += 1.;\n        uv =\n            abs(.5+uv+t2)\n        ;\n        //uv.x += 1.;\n        t2 =\n            -triangle_wave(uv-1.5)\n        ;\n        uv =\n            t2-triangle_wave(uv.yx)\n        ;\n        float c1 =\n            uv.x-uv.y\n        ;\n        col = col.yzx;\n        if(t3) col = abs(vec3(col.yz,c1));\n       \n\n    }\n    fragColor = vec4(min(col*2.,vec3(1.)),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod1(float a, float b){\n    //divide by powers of 2 to get interesting rhythms\n    float a1 = a;\n    //a /= 1. + mod(floor(a1/8.),2.);\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod1(a,b)\n        //mod(fmod1(a,b*(1.+mod(floor(a),8.))),b)\n    ;\n}\n\n\n//#define fmod(a,b) mod(mod(floor((a)),floor(1.+(a)/5.)),b)\n\nvec2 mainSound(int samp, float time){\n  \n  float s1 =\n      8.,\n      //4.*(1.+fmod(floor(time/2.),2.)), //varying tempo\n\n  s2 = 8.,\n  t=\n      \n      time/(1.+fmod(floor(time*s1)*floor(time*s1)/s1/s1,2.))/2.\n  ,\n  m1 =\n      fmod(t/s1+floor(t/s1),s2)\n      //fmod(t+floor(t*s1),s2)\n  ,\n  m4 =\n      fmod(floor(t+m1)/s2,s2)\n  ,\n  m3 =\n      fmod((t+m4)*s1/(m1+.5),s2);\n\n  t *=\n      s1*s1\n  ;\n\n  float m2 =\n      1. + fmod(t/s1,s1);\n  ;\n  \n  float a = 64.*sqrt((1.-sqrt(fract(t/s1+floor(t/s1)))))*.2,\n\n  nb = time*pow(2.,(m3+m2)/5.+5.5);\n\n  return\n      abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}