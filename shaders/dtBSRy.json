{
    "Shader": {
        "info": {
            "date": "1676356014",
            "description": "I was thinking recently about different ways to create the effect of depth in a scene. It seemed like an interesting experiment to try to create depth without directly analyzing a fictitious world using 3D geometry.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtBSRy",
            "likes": 18,
            "name": "Apparent Depth (421 ch)",
            "published": 3,
            "tags": [
                "2d",
                "illusion",
                "hexagon",
                "depth",
                "tiling",
                "hex",
                "hexagons",
                "tiles",
                "codegolf"
            ],
            "usePreview": 0,
            "username": "fenix",
            "viewed": 425
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------------------------\n// Created by fenix in 2023\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//   I was thinking recently about different ways to create the effect of depth in a\n//   scene. It seemed like an interesting experiment to try to create depth without\n//   directly analyzing a fictitious world using 3D geometry.\n//\n// ---------------------------------------------------------------------------------------\n\n// From FabriceNeyret2: 421 chars!\n//*\n#define n(X) fract( dot( sin(X+i), sin(X+i)))              //\n#define r(X) sin(.523 * vec2(X+1, X+4) )                   //\n#define c(X) (X+u - (  dot(a = mod(X+u    , h + h) - h, a)  \\\n                     < dot(b = mod(X+u - h, h + h) - h, b)  \\\n                     ? a : b ) )                           //\n#define o(X)   max(0., dot(X, u - c()))                     \\\n             * max(0., mix(n(c(X) -1.) - n(c() -1.),        \\\n                           n(c(X)    ) - n(c()    ),        \\\n                           pow(fract(t), 7.)))             //\n#define M(h,v) max( o(h), max( o(r(v)), o(r(-v)) ) /2. )\n               \nvoid mainImage(out vec4 O, vec2 u)\n{\n    u *= 9. / iResolution.y;\n    float t = iTime*.2, i = ceil(t);\n    vec2  h = r(), a, b;\n    \n    O = .7 - M(h,2) + M(-h,4) * .4 + O * 0.;\n}\n/**/\n\n// Golfed by me: 459 chars\n/*\n#define n(X) fract(dot(sin(X), sin(X)))\n#define r(X) sin(.523 * (X + vec2(1, 4)))\n#define c(X) (X - (length(a = mod(X    , h + h) - h) < \\\n                   length(b = mod(X - h, h + h) - h) \\\n                   ? a : b))\n#define o(X) max(0., max(0., dot(X, u - c(u))) * \\\n                     mix(n(c(u + X) + s.x) - n(d + s.x), \\\n                         n(c(u + X) + s.y) - n(d + s.y), \\\n                         pow(fract(iTime*.2), 7.)))\n               \nvoid mainImage(out vec4 O, vec2 u)\n{\n    u *= 9. / iResolution.y;\n    \n    vec2 h = r(0.),\n         s = trunc(iTime * .2 + vec2(0, 1)),\n         a, b, d = c(u);\n    \n    O = O * 0. + .7\n        - max(max(o(h) * 2., o(r(2.))), o(r(-2.))) * .5\n        + max(max(o(-h) * 2., o(r(4.))), o(r(-4.))) * .2;\n}\n/**/\n\n// Original: 1154 chars\n/*\n// From BigWIngs' Hexagonal Tiling Explained: https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec4 hexCoords(vec2 u)\n{\n    const vec2 r = vec2(1, 1.73);\n    const vec2 h = r * .5;\n    vec2 a = mod(u, r) - h;\n    vec2 b = mod(u - h, r) - h;\n    \n    vec2 gv;\n    if (length(a) < length(b))\n        gv = a;\n    else\n        gv = b;\n    \n    vec2 id = u - gv;\n    return vec4(gv, id);\n}\n\nfloat noise( in vec2 p )\n{\n    return fract(4e4*dot(sin(177.*p + 1e5), sin(988.*p + 2e5)));\n}\n\nfloat oneNeighbor(vec2 p, vec2 dir, vec2 uv, vec2 h, vec3 t)\n{\n    float hsA = noise(hexCoords(p + dir).zw + t.x);\n    float shA = max(0., hsA - h.x);\n    float sA = shA * max(0., dot(normalize(dir), uv));\n\n    float hsB = noise(hexCoords(p + dir).zw + t.y);\n    float shB = max(0., hsB - h.y);\n    float sB = shB * max(0., dot(normalize(dir), uv));\n    \n    return mix(sA, sB, t.z);\n}\n\nvoid mainImage(out vec4 O, vec2 u)\n{\n    u = 9. * (u - .5*iResolution.xy) / iResolution.y;\n    \n    O = vec4(.7);\n\n    vec3 t = vec3(trunc(iTime*.2), trunc(iTime*.2) + 1., pow(fract(iTime*.2), 9.));\n       \n    vec4 hc = hexCoords(u);\n    vec2 h = vec2(noise(hc.zw + t.x), noise(hc.zw + t.y));\n    \n    float s0 = oneNeighbor(u, .5 * vec2(1, 1.73), hc.xy, h, t);\n    float s1 = oneNeighbor(u, vec2(1, 0), hc.xy, h, t) * .5;\n    float s2 = oneNeighbor(u, .5 * vec2(-1, 1.73), hc.xy, h, t) * .5;\n    \n    O -= max(max(s0, s1), s2);\n    \n    float b0 = oneNeighbor(u, .5 * vec2(-1, -1.73), hc.xy, h, t) * .2;\n    float b1 = oneNeighbor(u, .5 * vec2(1, -1.73), hc.xy, h, t) * .1;\n    float b2 = oneNeighbor(u, .5 * vec2(-1, 0), hc.xy, h, t) * .1;\n    \n    O += max(max(b0, b1), b2);\n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}