{
    "Shader": {
        "info": {
            "date": "1682024877",
            "description": "A cool pathtracer! \nwanted to improve on my last pathtracer in terms of textures and neatness and stuff, and tbh it was easier to code another than fix my other one.\n\nhttps://www.youtube.com/watch?v=Qz0KTGYJtUk\nhttps://www.shadertoy.com/view/XlXcW4",
            "flags": 32,
            "hasliked": 0,
            "id": "mltGR4",
            "likes": 4,
            "name": "Pathtracer + Textures",
            "published": 3,
            "tags": [
                "raytracing",
                "textures",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "ThePlaneGuy45",
            "viewed": 228
        },
        "renderpass": [
            {
                "code": "// Shader settings in Common\n// Scene editor in Buffer A\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nPathtracer by TPG45\n\nfeel free to use as a base for other projects, just give credit\nalso feel free to expand on this, just give credit for the base pathtracer\n\nIncludes:\n- lighting, diffuse + specular\n- refraction\n- textures & cubemaps\n- DOF & blur\n- Multipass sampling\n- Normal maps\n*/\n\n// Shader Settings\n#define FOCAL_LENGTH 500.0\n#define CAM_DISTANCE 250.0\n#define MAX_BOUNCES 10\n#define SAMPLES 10\n#define DOF_AMOUNT 5.0\n#define BLUR_AMOUNT 2.0\n\nstruct Material {\n\n    vec3 color;\n    bool useTexture;\n    bool useNormals;\n    int texID;\n    float texScale;\n    float bumpStrength;\n    float emission;\n    float glossiness;\n    float transparency;\n    float ior;\n\n};\n\nstruct Sphere {\n\n    Material material;\n    vec3 center;\n    float radius;\n\n};\n\nstruct Triangle {\n\n    Material material;\n    vec3 a;\n    vec3 b;\n    vec3 c;\n    vec2 auv;\n    vec2 buv;\n    vec2 cuv;\n\n};\n\nstruct Ray {\n\n    vec3 origin;\n    vec3 normal;\n\n};\n\nstruct Record {\n\n    Ray ray;\n    bool hit;\n    Material material;\n    vec3 normal;\n    vec3 intersect;\n    float dist;\n    vec3 offset;\n    vec3 tangent;\n    vec3 bitangent;\n    int refrac;\n    int objID;\n    int hitID;\n\n};\n\nmat2 rot2( float a ){ vec2 v = sin(vec2(1.570796, 0) + a);\treturn mat2(v, -v.y, v.x); }\n// Extra trig + hyperbolic functions by me, if you want to use please credit.\nfloat cot(float x){return cos(x)/sin(x);}vec2 cot(vec2 x){return cos(x)/sin(x);}vec3 cot(vec3 x){return cos(x)/sin(x);}vec4 cot(vec4 x){return cos(x)/sin(x);}float sec(float x){return 1./cos(x);}vec2 sec(vec2 x){return 1./cos(x);}vec3 sec(vec3 x){return 1./cos(x);}vec4 sec(vec4 x){return 1./cos(x);}float csc(float x){return 1./sin(x);}vec2 csc(vec2 x){return 1./sin(x);}vec3 csc(vec3 x){return 1./sin(x);}vec4 csc(vec4 x){return 1./sin(x);}float coth(float x){float a=exp(x);float b=exp(-x);return(a+b)/(a-b);}vec2 coth(vec2 x){vec2 a=exp(x);vec2 b=exp(-x);return(a+b)/(a-b);}vec3 coth(vec3 x){vec3 a=exp(x);vec3 b=exp(-x);return(a+b)/(a-b);}vec4 coth(vec4 x){vec4 a=exp(x);vec4 b=exp(-x);return(a+b)/(a-b);}float sech(float x){return 2./(exp(x)+exp(-x));}vec2 sech(vec2 x){return 2./(exp(x)+exp(-x));}vec3 sech(vec3 x){return 2./(exp(x)+exp(-x));}vec4 sech(vec4 x){return 2./(exp(x)+exp(-x));}float csch(float x){return 2./(exp(x)-exp(-x));}vec2 csch(vec2 x){return 2./(exp(x)-exp(-x));}vec3 csch(vec3 x){return 2./(exp(x)-exp(-x));}vec4 csch(vec4 x){return 2./(exp(x)-exp(-x));}\n\nuint raySphere(in Sphere sph, inout Record rec) {\n    vec3 offset = rec.ray.origin - sph.center;\n    float a = 2.0 * dot(offset, rec.ray.normal);\n    float b = dot(offset, offset) - sph.radius * sph.radius;\n    float disc = a * a - 4.0 * b;\n    rec.objID++;\n    if (disc > 0.0) {\n        float s = sqrt(disc);\n        float dstNear = max(0.0,(-a-s)/2.0);\n        float dstFar = (-a+s)/2.0;\n        if(dstNear < rec.dist) {\n            if(dstNear > 0.0) {\n                rec.intersect = (rec.ray.normal * dstNear) + rec.ray.origin;\n                rec.normal = normalize(rec.intersect - sph.center);\n                rec.dist = dstNear;\n                rec.material = sph.material;\n                rec.hit = true;\n                rec.offset = (rec.intersect - sph.center - sph.radius) / sph.radius - 0.5;\n                rec.tangent = normalize(vec3(rec.normal.z, 0.0, -rec.normal.x));\n                rec.bitangent = normalize(cross(rec.normal, rec.tangent));\n                rec.hitID = rec.objID;\n                return uint(0x1);\n            }\n        }\n        return uint(0x0);\n    }\n}\nuint rayTri(in Triangle tri, inout Record rec) {\n    vec3 ab = tri.b - tri.a;\n    vec3 ac = tri.c - tri.a;\n    vec3 bc = tri.c - tri.b;\n    vec3 normal = ab.yzx * ac.zxy - ab.zxy * ac.yzx;\n    vec3 ao = rec.ray.origin - tri.a;\n    vec3 dao = cross(ao, rec.ray.normal);    \n    float det = 1.0 / (-dot(rec.ray.normal, normal));    \n    float dist = dot(ao, normal) * det;\n    float u = dot(ac, dao) * det;\n    float v = -dot(ab, dao) * det;\n    float w = 1.0 - u - v;    \n    bool hit = det >= 1e-6 && dist >= 0.0 && u >= 0.0 && v >= 0.0 && w >= 0.0;    \n    rec.objID++;\n    if(hit && dist < rec.dist) {    \n        rec.intersect = (rec.ray.normal * dist) + rec.ray.origin;\n        rec.normal = normalize(normal);\n        rec.dist = dist;\n        rec.material = tri.material;\n        rec.hit = true;\n        rec.offset = vec3(u, v, w);\n        \n        float xba = tri.buv.x - tri.auv.x;\n        float xcb = tri.cuv.x - tri.buv.x;\n        float yba = tri.buv.y - tri.auv.y;\n        float ycb = tri.cuv.y - tri.buv.y;\n        rec.tangent = normalize(ycb * ab - yba * bc);\n        rec.bitangent = normalize(-xcb * ab + xba * bc);\n        rec.hitID = rec.objID;\n        \n        return uint(0x1);\n    }\n    return uint(0x0);\n}\nvec3 random(inout uvec3 state) {\n    state = ((state>>8U)^state.yzx)*1103515245U;\n    state = ((state>>8U)^state.yzx)*1103515245U;\n    state = ((state>>8U)^state.yzx)*1103515245U;\n    return vec3(state)*(1.0/float(0xffffffffU));\n}\nvec3 randomNormal(vec3 normal, inout uvec3 state) {\n    vec3 y = random(state);\n    vec3 theta = 2.0 * 3.14159265358979 * y;\n    vec3 rho = sqrt(-2.0 * log(y));\n    y = normalize(rho * cos(theta));\n    if(dot(y, normal) < 0.0) {\n        y -= y;\n    }\n    return y;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Scene Editor ////////////////////////\nvoid distances( inout Record rec ) {\n\n    raySphere( Sphere( Material(vec3(0.8, 0.8, 0.8), false, false, 0, 1.0, 1.0, 0.0, 0.9, 0.0, 0.0), vec3(0.0, 100.0, 300.0), 100.0 ), rec );\n    raySphere( Sphere( Material(vec3(0.0, 0.0, 0.0), true, true, 3, 0.25, 10.0, 0.0, 0.1, 0.0, 0.0), vec3(0.0, 100.0, -300.0), 100.0 ), rec );\n    raySphere( Sphere( Material(vec3(1.0, 0.5, 0.5), false, true, 2, 1.0, 2.5, 0.0, 0.1, 0.8, 1.5), vec3(300.0, 100.0, 0.0), 100.0 ), rec );\n    raySphere( Sphere( Material(vec3(1.0, 1.0, 1.0), true, true, 2, 50.0, 40.0, 0.0, 0.15, 0.0, 0.0), vec3(0.0, -50000.0, 0.0), 50000.0 ), rec );\n    \n    rayTri( Triangle( Material(vec3(0.5, 0.5, 0.5), true, true, 1, 1.0, 10.0, 0.0, 0.2, 0.0, 0.0), vec3(0.0, 100.0, 300.0), vec3(300.0, 100.0, 0.0), vec3(0.0, 100.0, -300.0), vec2(0.0, 0.0), vec2(0.0, 1.0), vec2(1.0, 1.0) ), rec );\n\n}\n////////////////////////////////////////\n\nvoid initRay( in vec2 fragCoord, inout Ray ray, uvec3 state ) {\n    vec2 mouse = iMouse.xy/iResolution.xy - 0.5;\n    ray.origin = vec3(0.0, 0.0, -FOCAL_LENGTH) + vec3(random(state).xy * DOF_AMOUNT, 0.0);\n    ray.normal = normalize(vec3(fragCoord + random(state).x * BLUR_AMOUNT, 0.0) - ray.origin);\n    ray.origin.z -= CAM_DISTANCE;\n    mat2 rot = rot2(4.0 * mouse.y);\n    ray.origin.yz *= rot; ray.normal.yz *= rot;\n    rot = rot2(4.0 * mouse.x);\n    ray.origin.xz *= rot; ray.normal.xz *= rot;\n}\n\nvoid initRecord(inout Record rec, in Ray ray) {\n\n    rec.ray = ray;\n    rec.hit = false;\n    rec.dist = 100000.0;\n    rec.objID = 0;\n\n}\n\nvec4 triPlanar(sampler2D tex, vec3 offset, vec3 normal, float scale, vec2 imgOffset) {\n\n    vec3 blend = normalize(max(abs(normal), 0.000001));\n    float sum = blend.x + blend.y + blend.z;\n    blend /= sum;\n    vec4 x = texture(tex, offset.yz * scale + imgOffset);\n    vec4 y = texture(tex, offset.xz * scale + imgOffset);\n    vec4 z = texture(tex, offset.xy * scale + imgOffset);\n    return x * blend.x + y * blend.y + z * blend.z;\n\n}\n\nvec4 sampleTex(int id, vec3 offset, vec3 normal, float scale, vec2 imgOffset) {\n\n    switch(id){\n    case 1:\n        return triPlanar(iChannel1, offset, normal, scale, imgOffset);\n    case 2:\n        return triPlanar(iChannel2, offset, normal, scale, imgOffset);\n    case 3:\n        return triPlanar(iChannel3, offset, normal, scale, imgOffset);\n    }\n    return vec4(0.0);\n\n}\n\nfloat getHeight(vec4 tex) {\n\n    return dot(tex.rgb, vec3(.2126, .7152, .0722));\n\n}\n\nvec3 normal(int id, vec3 offset, vec3 normal, float scale, vec2 res, float strength) {\n\n    float current = getHeight(sampleTex(id, offset, normal, scale, vec2(0.0)));\n    float x = (getHeight(sampleTex(id, offset, normal, scale, vec2(1.0 / res.x, 0.0))) - current) * strength;\n    float y = (getHeight(sampleTex(id, offset, normal, scale, vec2(0.0, 1.0 / res.y))) - current) * strength;\n    return normalize(vec3(x, y, 1.0));\n\n}\n\nvec3 worldSpace(vec3 map, vec3 t, vec3 b, vec3 n) {\n\n    mat3x3 tbn = mat3x3(t.x, b.x, n.x, t.y, b.y, n.y, t.z, b.z, n.z);\n    return normalize(map * tbn);\n\n}\n\nvec3 Trace( in vec2 fragCoord, in uvec3 state ) {\n\n    vec3 final = vec3(0.0);\n\n    for( int i = 0; i < SAMPLES; i++ ) {\n\n        Ray ray;\n        Record rec;\n        initRay( fragCoord, ray, state );\n        initRecord( rec, ray );\n        rec.refrac = -1;\n    \n        vec3 color = vec3(0.0);\n        vec3 increment = vec3(1.0);\n    \n        for( int j = 0; j < MAX_BOUNCES; j++ ) {\n    \n            distances( rec );\n    \n            if( rec.hit ) {\n            \n                vec3 matColor;\n                vec3 nMap;\n            \n                if(rec.material.useTexture) {\n                    \n                    matColor = sampleTex(rec.material.texID, rec.offset, rec.normal, rec.material.texScale, vec2(0.0)).rgb;\n                \n                } else {\n                \n                    matColor = rec.material.color;\n                \n                }\n                \n                if(rec.material.useNormals) {\n                \n                    nMap = normal(rec.material.texID, rec.offset, rec.normal, rec.material.texScale, iChannelResolution[3].xy, rec.material.bumpStrength);\n                    rec.normal = worldSpace(nMap, rec.tangent, rec.bitangent, rec.normal);\n                \n                }\n                \n                float spec = float(rec.material.glossiness > random(state).x);\n                rec.ray.origin = rec.intersect;\n                if(rec.material.transparency > random(state).x || rec.refrac == rec.hitID) {\n                \n                    rec.ray.normal = refract(rec.ray.normal, rec.normal, clamp(rec.refrac > 0 ? rec.material.ior : 1.0 / rec.material.ior, 0.0, 1.0));\n                    \n                    if(rec.refrac > -1) {\n                    \n                        rec.refrac = -1;\n                    \n                    } else {\n                    \n                        rec.refrac = rec.hitID;\n                    \n                    }\n                \n                } else {\n                \n                    rec.ray.normal = normalize(mix(randomNormal(rec.normal, state), reflect(rec.ray.normal, rec.normal), spec));\n                    \n                }\n                initRecord(rec, rec.ray);\n        \n                color += (matColor * rec.material.emission) * increment;\n                increment *= mix(matColor, vec3(1.0), spec);\n    \n            } else {\n    \n                color += texture(iChannel0, rec.ray.normal).xyz * increment;\n                break;\n    \n            }\n        }\n    \n        final += color;\n        \n    }\n    \n    final /= float(SAMPLES);\n    \n    return final;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float ratio = 720.0/iResolution.y;\n    vec2 coord = ratio * fragCoord;\n\n    uvec3 state = uvec3(floatBitsToUint(coord), uint(iFrame));\n    \n    fragColor = vec4(Trace( coord - ratio * iResolution.xy / 2.0, state ), 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    fragColor = texture(iChannel0, rayDir) * length(texture(iChannel0, rayDir));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "// Save State Buffer\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    if(iMouse.z > 0.0) {\n    \n        fragColor = vec4(float(iFrame));\n        \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord / iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n\n    float frame = float(iFrame + 1) - texture(iChannel1, vec2(0.6, 0.5)).x;\n    \n    vec4 current = texture(iChannel2, uv);\n    \n    if(iMouse.z > 0.0) {\n    \n        fragColor = current;\n    \n    } else {\n    \n        fragColor = mix(fragColor, current, 1.0 / frame);\n    \n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}