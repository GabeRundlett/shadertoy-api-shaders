{
    "Shader": {
        "info": {
            "date": "1502420841",
            "description": "snowy https://www.shadertoy.com/view/4dl3R4",
            "flags": 0,
            "hasliked": 0,
            "id": "MdSBD3",
            "likes": 3,
            "name": "Snowy London",
            "published": 3,
            "tags": [
                "snowy"
            ],
            "usePreview": 0,
            "username": "starea",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "// This shader useds noise shaders by stegu -- http://webstaff.itn.liu.se/~stegu/\n// This is supposed to look like snow falling, for example like http://24.media.tumblr.com/tumblr_mdhvqrK2EJ1rcru73o1_500.gif\n\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 permute(vec4 x) {\n    return mod((34.0 * x + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec2 v)\n{\n    const vec4 C = vec4(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439);\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                     + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n\n    return 130.0 * dot(m, g);\t\t\n}\n\nfloat cellular2x2(vec2 P)\n{\n    #define K 0.142857142857 // 1/7\n    #define K2 0.0714285714285 // K/2\n    #define jitter 0.8 // jitter 1.0 makes F1 wrong more often\n\n    vec2 Pi = mod(floor(P), 289.0);\n    vec2 Pf = fract(P);\n    vec4 Pfx = Pf.x + vec4(-0.5, -1.5, -0.5, -1.5);\n    vec4 Pfy = Pf.y + vec4(-0.5, -0.5, -1.5, -1.5);\n    vec4 p = permute(Pi.x + vec4(0.0, 1.0, 0.0, 1.0));\n    p = permute(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0));\n    vec4 ox = mod(p, 7.0)*K+K2;\n    vec4 oy = mod(floor(p*K),7.0)*K+K2;\n    vec4 dx = Pfx + jitter*ox;\n    vec4 dy = Pfy + jitter*oy;\n    vec4 d = dx * dx + dy * dy; // d11, d12, d21 and d22, squared\n    // Sort out the two smallest distances\n\n    // Cheat and pick only F1\n    d.xy = min(d.xy, d.zw);\n    d.x = min(d.x, d.y);\n    return d.x; // F1 duplicated, F2 not computed\n}\n\nfloat fbm(vec2 p) {\n    float f = 0.0;\n    float w = 0.5;\n    for (int i = 0; i < 5; i ++) {\n        f += w * snoise(p);\n        p *= 2.;\n        w *= 0.5;\n    }\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed=0.5;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    uv.x*=(iResolution.x/iResolution.y);\n\n    vec2 suncent=vec2(0.3,0.9);\n\n    float suns=(1.0-distance(uv,suncent));\n    suns=clamp(0.2+suns,0.0,1.0);\n    float sunsh=smoothstep(0.85,0.95,suns);\n\n    float slope;\n    slope=0.8+uv.x-(uv.y*2.3);\n    slope=1.0-smoothstep(0.55,0.0,slope);\t\t\t\t\t\t\t\t\n\n    float noise=abs(fbm(uv*1.5));\n    slope=(noise*0.2)+(slope-((1.0-noise)*slope*0.1))*0.6;\n    slope=clamp(slope,0.0,1.0);\n\n    vec2 GA;\n    GA.x-=iTime*1.8;\n    GA.y+=iTime*0.9;\n    GA*=speed;\n\n    float F1=0.0,F2=0.0,F3=0.0,F4=0.0,F5=0.0,N1=0.0,N2=0.0,N3=0.0,N4=0.0,N5=0.0;\n    float A=0.0,A1=0.0,A2=0.0,A3=0.0,A4=0.0,A5=0.0;\n\n\n    // Attentuation\n    A = (uv.x-(uv.y*0.3));\n    A = clamp(A,0.0,1.0);\n\n    // Snow layers, somewhat like an fbm with worley layers.\n    F1 = 1.0-cellular2x2((uv+(GA*0.1))*8.0);\t\n    A1 = 1.0-(A*1.0);\n    N1 = smoothstep(0.998,1.0,F1)*1.0*A1;\t\n\n    F2 = 1.0-cellular2x2((uv+(GA*0.2))*6.0);\t\n    A2 = 1.0-(A*0.8);\n    N2 = smoothstep(0.995,1.0,F2)*0.85*A2;\t\t\t\t\n\n    F3 = 1.0-cellular2x2((uv+(GA*0.4))*4.0);\t\n    A3 = 1.0-(A*0.6);\n    N3 = smoothstep(0.99,1.0,F3)*0.65*A3;\t\t\t\t\n\n    F4 = 1.0-cellular2x2((uv+(GA*0.6))*3.0);\t\n    A4 = 1.0-(A*1.0);\n    N4 = smoothstep(0.98,1.0,F4)*0.4*A4;\t\t\t\t\n\n    F5 = 1.0-cellular2x2((uv+(GA))*1.2);\t\n    A5 = 1.0-(A*1.0);\n    N5 = smoothstep(0.98,1.0,F5)*0.25*A5;\t\t\t\t\n\n    float Snowout= N1+N2+N3+N4+N5;\n    vec4 col = texture(iChannel0, fragCoord.xy / iResolution.xy); \n    fragColor = col + vec4(Snowout*0.9, Snowout, Snowout*1.1, 0.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}