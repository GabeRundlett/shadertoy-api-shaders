{
    "Shader": {
        "info": {
            "date": "1595022896",
            "description": "Inspired by yx's version: https://www.shadertoy.com/view/ttsSzr",
            "flags": 2,
            "hasliked": 0,
            "id": "3tByRd",
            "likes": 4,
            "name": "GB/GBC Camera",
            "published": 3,
            "tags": [
                "camera"
            ],
            "usePreview": 0,
            "username": "CelestialAmber",
            "viewed": 604
        },
        "renderpass": [
            {
                "code": "#define mode 1  //0: Game Boy, 1: Game Boy Color\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n\nvec2 res = vec2(128,112); //Gameboy Camera's screen resolution\n    vec2 uvRes = vec2(floor(res.y*(iResolution.x/iResolution.y)),res.y); //Widescreen version of the Gameboy's screen resolution\n    \n    \n    vec2 uv = fragCoord/iResolution.xy; \n    uv.x=1.-uv.x; // optional mirror selfie mode\n    vec2 pos = floor(uv*uvRes);\n       \n    vec3 col = vec3(0);\n\n    if (uvRes.x/2. - res.x/2. < pos.x && uvRes.x/2. + res.x/2. > pos.x){\n        if(mode == 0){\n        //use specific weighted amounts of each channel to improve the grayscale colors (Luma values)\n    \tfloat gray = dot(texture(iChannel0,pos/uvRes).rgb, vec3(0.2126,0.7152,0.0722));\t\n        float dither = texture(iChannel1, pos/8.).r;\n            \n    \tcol = vec3(floor(gray*3.+dither)/3.);\n        }else{\n        vec3 tex = texture(iChannel0,pos/uvRes).rgb;\n        float dither = texture(iChannel1, pos/8.).r;\n        //downscale the colors to be within the GBC's limitations (around 56 colors max according to the Wikipedia article)\n        vec3 newCol = (floor(tex*4. + dither))/4.;\n            \n        col = newCol;        \n        }\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}