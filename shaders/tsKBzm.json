{
    "Shader": {
        "info": {
            "date": "1606852044",
            "description": "6483 123",
            "flags": 0,
            "hasliked": 0,
            "id": "tsKBzm",
            "likes": 2,
            "name": "6483 123",
            "published": 3,
            "tags": [
                "123",
                "6483"
            ],
            "usePreview": 0,
            "username": "Fililip",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "float sdf(vec3 p)\n{\n    float m = 1.0;\n    for (float i = 0.0; i < 4.0; i++)\n    {\n        vec4 sphere = vec4(cos(p.y * 4.0 + iTime * i * 2.0 + i * 2.0) * 0.15 + 3.0 * i - 4.0, sin(iTime * 15.0 + i * 5.0) * 0.5 + 1.25 + sin(p.x * 4.0 + iTime * 10.0 + i * 6.0) * 0.15 + 1.2, 6.0, 1.0);\n        float distanceSphere = length(p - sphere.xyz) - sphere.w;\n        m = min(m, distanceSphere);\n    }\n    float distancePlane = p.y + cos(p.x + iTime * 2.5) * sin(p.z + iTime * 32.0) * 0.5 + cos(p.z + iTime * 32.0) * 0.5 + 1.75;\n    return min(m, distancePlane);\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 delta = vec2(0.01, 0.0);\n    float dist = sdf(p);\n    return normalize(dist - vec3(\n        sdf(p - delta.xyy),\n        sdf(p - delta.yxy),\n        sdf(p - delta.yyx)\n    ));\n}\n\nfloat raymarch(vec3 origin, vec3 direction)\n{\n    float distanceOrigin = 0.0;\n    \n    for (int i = 0; i < 64; i++)\n    {\n        vec3 point = origin + direction * distanceOrigin;\n        float distanceScene = sdf(point);\n        distanceOrigin += distanceScene;\n        if (distanceOrigin < 0.01 || distanceOrigin > 100.0) break;\n    }\n    \n    return distanceOrigin;\n}\n\nvec3 light(vec3 p, vec3 pos, vec3 col, float s)\n{\n    vec3 l = normalize(pos - p);\n    vec3 n = normal(p);\n    \n    float dist = distance(p, pos);\n    float att = 1.0 / (dist + 0.15 * dist + 0.15 * dist * dist);\n    \n    float diffuse = clamp(dot(l, n), 0.0, 1.0);\n    \n    float d = raymarch(p + n * 0.2, l);\n    if (d < length(pos - p)) diffuse *= 0.1;\n    \n    return col * texture(iChannel0, n.xz).rgb * smoothstep(0.0, 1.0, diffuse) * att * s;\n}\n\nvec3 lights(vec3 p)\n{\n    vec3 position = vec3(0.0, 6.0, 6.0);\n    position.xz += vec2(cos(iTime * 2.0), sin(iTime * 2.0)) * 2.0;\n    \n    vec3 l = vec3(0.0);\n    \n    vec3 color = vec3(0.5);\n    \n    color.r = sin(iTime * 2.0 + 50.0) * 0.25 + 1.0;\n    color.g = cos(iTime * 2.0 + 150.0) * 0.25 + 1.0;\n    color.b = sin(iTime * 2.0 + 200.0) * 0.25 + 1.0;\n    \n    l += light(p, position, color, 16.0);\n    l += light(p, vec3(-4.0, 4.0, -1.0), vec3(0.15, 0.15, 0.8), 18.0);\n    l += light(p, vec3(4.0, 4.0, -1.0), vec3(0.15, 0.8, 0.15), 18.0);\n    \n    return l;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    \n    vec3 ro = vec3(0.0, 2.5, 0.0);\n    vec3 rd = normalize(vec3(uv.x - cos(iTime * 29.4) * 0.01, uv.y - sin(iTime * 34.0) * 0.01, 0.5));\n    \n    float dist = raymarch(ro, rd);\n    \n    vec3 p = ro + rd * dist;\n    vec3 diffuse = lights(p);\n    \n    col = diffuse;\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}