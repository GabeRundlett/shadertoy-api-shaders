{
    "Shader": {
        "info": {
            "date": "1599397940",
            "description": "Arrows for control, space for restart, full screen for enjoy.",
            "flags": 48,
            "hasliked": 0,
            "id": "wl2BDm",
            "likes": 12,
            "name": "GlowSnake",
            "published": 3,
            "tags": [
                "game",
                "snake",
                "glow",
                "keyboard",
                "boost"
            ],
            "usePreview": 0,
            "username": "savegor",
            "viewed": 570
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float w = floor(iResolution.x / CELL_SIZE);\n    float h = floor(iResolution.y / CELL_SIZE);\n    \n    int apple_row = int(w) + 1;\n    int blow_row = int(w) + 3;\n\n    // point color + boost effect\n    vec4 blow = texture(iChannel2, vec2(float(blow_row) + 0.5, 0.5) / iResolution.xy);\n    \n    vec2 blow_pos = CELL_SIZE * (floor(blow.xy) + vec2(0.5, 0.5));\n    \n    vec2 diff =(fragCoord - blow_pos);\n    \n    float blow_intensity = blow.w / BLOW;\n    float blow_r = BLOW - blow.w;\n    float sqr_dist = dot(diff, diff);\n    float dist = sqrt(sqr_dist);\n    \n\n    float dist_factor = 0.5 *  sqr_dist;\n    float sigma = 10.0;\n    float gauss_arg = (dist - blow_r) / sigma;\n    float boost_intensity = 10.0 * exp(-0.5 * gauss_arg * gauss_arg);\n\t\n    vec2 boost = -boost_intensity * blow_intensity * diff / dist;\n    boost /= iResolution.xy;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 cell_data = texture(iChannel0, uv + boost);\n\n    float dist_to_edge = fragCoord.x;\n    dist_to_edge = min(dist_to_edge, iResolution.x - fragCoord.x);\n    dist_to_edge = min(dist_to_edge, fragCoord.y);\n    dist_to_edge = min(dist_to_edge, iResolution.y - fragCoord.y);\n    \n    fragColor = cell_data;\n    \n    // apple\n    vec2 apple_uv = vec2(float(apple_row) + 0.5, 0.0) / iResolution.xy;\n    vec4 apple = texture(iChannel2, apple_uv);\n    vec2 apple_pos = CELL_SIZE * (floor(apple.xy) + vec2(0.5, 0.5));\n    diff =(fragCoord - apple_pos);\n    sqr_dist = dot(diff, diff);\n    dist = sqrt(sqr_dist);\n    \n    float apple_r = CELL_SIZE * 0.5;\n\n    dist_factor = 0.5 *  apple_r * apple_r / sqr_dist;\n\n   \t// apple hoops\n    fragColor.xyz += 2.3 * smoothstep(0.1, 1.8, dist_factor) * APPLE_COLOR;\n    \n    float hoop_1 = fract(iTime * 0.4) * 30.0;\n    float inner_bound = smoothstep(hoop_1 - 3.0, hoop_1, dist);\n    float outer_bound = 1.0 - smoothstep(hoop_1, hoop_1 + 4.0, dist);\n    \n    fragColor.xyz += 0.16 * inner_bound * outer_bound * APPLE_COLOR * apple_r / dist;\n    \n    float hoop_2 = fract(iTime * 0.313356) * 50.0;\n    inner_bound = smoothstep(hoop_2 - 3.0, hoop_2, dist);\n    outer_bound = 1.0 - smoothstep(hoop_2, hoop_2 + 4.0, dist);\n    \n    fragColor.xyz += 0.16 * inner_bound * outer_bound * APPLE_COLOR * apple_r / dist;\n    \n    // border\n    float border_intensity = 3.0 / dist_to_edge;\n    fragColor.xyz += border_intensity * BORDER_COLOR;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Lazy implementation of the snake game\n\n#define check_marker(value, marker) ((value>marker-EPS)&&(value<marker+EPS))\n\n\nfloat rand(float value) {\n    return 0.15 + 0.7 * (abs(fract(100.0 * sin(-130.0 + 0.0001 * -iTime * value))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    float w = floor(iResolution.x / CELL_SIZE);\n    float h = floor(iResolution.y / CELL_SIZE);\n    \n    int apple_row = int(w) + 1;\n\tint dir_row = int(w) + 2;\n    int blow_row = int(w) + 3;\n\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n    // start and restart\n    if(iFrame == 0 || texelFetch( iChannel1, ivec2(KEY_SPACE, 0.0), 0 ).x > 0.0) {\n\n        \n        int h_center = int(h * 0.5);\n        int w_center = int(w * 0.5);\n        \n        \n        if(y == h_center && (x > w_center - START_LENGTH && x <= w_center)) {\n            fragColor = vec4(1.0, 0.0, BODY_MARKER, 1.0);\n            // snakes head\n            if(x == w_center) {\n            \tfragColor = vec4(1.0, 0.0, HEAD_MARKER, 1.0);\n            }\n            \n            // snakes tail\n            if(x == w_center - START_LENGTH + 1) {\n            \tfragColor = vec4(1.0, 0.0, TAIL_MARKER, 1.0);\n            }\n        }\n        else {\n            if(x == apple_row && y == 0) {\n                // apple start position\n            \tfragColor = vec4(0.5 * w + 4.0, 0.5 * h, 0.0, 1.0);    \n            }\n            else if(x == dir_row && y == 0) {\n                // start direction from input\n                fragColor = vec4(1.0,0.0,0.0,1.0);\n            }\n            else {\n            \tfragColor = vec4(0.0,0.0,0.0,1.0);\n            }\n        }\n        \n    }\n    else {\n        vec2 uv = fragCoord / iResolution.xy;\n        vec4 color = texture(iChannel0, uv);\n\t\t\n        vec2 apple_uv = vec2(float(apple_row) + 0.5, 0.0) / iResolution.xy;\n\t\tvec4 apple = texture(iChannel0, apple_uv);\n        vec2 apple_pos = floor(apple.xy) + vec2(0.5, 0.5);\n        vec2 field_uv = apple_pos / iResolution.xy;\n\n        // check that snake is on apple\n        bool snake_on_apple = texture(iChannel0, field_uv).z > EPS;\n        // apple processing\n        if(x == apple_row && y == 0) {\t\n            if(snake_on_apple && iFrame % TIME_STEP == 1) {\n                float next_x = rand(apple.x) * iResolution.x / CELL_SIZE;\n                float next_y = rand(apple.y) * iResolution.y / CELL_SIZE;\n                fragColor = vec4(next_x, next_y, 0.0, 1.0);\n            }\n            else {\n                fragColor = apple;\n            }\n        }\n        // boost position processing\n        else if(x == blow_row && y == 0) {\n            fragColor = color;\n            if(snake_on_apple && iFrame % TIME_STEP == 1) {\n            \tfragColor = apple;\n                fragColor.w = BLOW;\n            }\n            fragColor.w = max(0.0, fragColor.w - 1.0);\n        }\n        else {            \n            vec2 head_dir = texture(iChannel0, vec2(float(dir_row) + 0.5, 0.5) / iResolution.xy).xy;\n\n            \n            if(iFrame % TIME_STEP == 1 && x < int(w) && y < int(h)) {\n\n                float x_edge = iResolution.x / CELL_SIZE;\n                float y_edge = iResolution.y / CELL_SIZE;\n\n                if(check_marker(color.z, TAIL_MARKER) && !snake_on_apple) {\n                    color = vec4(0.0, 0.0, 0.0, 0.0);\n                }\n\n                if(check_marker(color.z, BODY_MARKER)) {\n                    for(int i = 0; i < 4; i++) {\n                        vec2 shift = vec2(X_UDLR[i], Y_UDLR[i]);\n                        \n                        vec2 neighbour = fragCoord.xy + shift;\n                        if(neighbour.x >= w) {\n                        \tneighbour.x = 0.5;    \n                        }\n                        if(neighbour.x < 0.0) {\n                        \tneighbour.x = w - 0.5;    \n                        }\n                        \n                        \n                        if(neighbour.y >= h) {\n                        \tneighbour.y = 0.5;    \n                        }\n                        if(neighbour.y < 0.0) {\n                        \tneighbour.y = h - 0.5;    \n                        }\n                        \n                        vec2 ng_uv = neighbour / iResolution.xy;\n                        vec4 ng = texture(iChannel0, ng_uv);\n\t\t\t\t\t\t\n                        \n                        if(check_marker(ng.z, TAIL_MARKER) && !snake_on_apple) {\n                            float from_here = float(dot(abs(shift + ng.xy), vec2(1.0, 1.0)) < EPS);\n                            color.z = mix(BODY_MARKER, TAIL_MARKER, from_here);    \n                        }\n                    }\n                }\n\n                if(check_marker(color.z, HEAD_MARKER)) {\n                    color.z = BODY_MARKER;\n\n                }\n\n                if(check_marker(color.z, EMPTY_MARKER)) {\n                    for(int i = 0; i < 4; i++) {\n                        vec2 shift = vec2(X_UDLR[i], Y_UDLR[i]);\n                        \n                        vec2 neighbour = fragCoord.xy + shift;\n                        \n                        if(neighbour.x >= w) {\n                        \tneighbour.x = 0.5;    \n                        }\n                        if(neighbour.x < 0.0) {\n                        \tneighbour.x = w - 0.5;    \n                        }\n\t\t\t\t\t\tif(neighbour.y >= h) {\n                        \tneighbour.y = 0.5;    \n                        }\n                        if(neighbour.y < 0.0) {\n                        \tneighbour.y = h - 0.5;    \n                        }\n                        vec2 ng_uv = neighbour / iResolution.xy;\n                        vec4 ng = texture(iChannel0, ng_uv);\n\t\t\t\t\t\t\n                        if(check_marker(ng.z, HEAD_MARKER)) {\n                            if(dot(abs(shift + ng.xy), vec2(1.0, 1.0)) < EPS) {\n                                vec2 dir_diff = abs(shift - head_dir);\n                                float change_dir = float((dir_diff.x + dir_diff.y) > EPS);\n                                color = vec4(mix(ng.xy, head_dir, change_dir), HEAD_MARKER, 1.0);\n                            }\n                        }\n                    }\n                }\n\n                fragColor = color;\n            }\n            else {\n                if(x == dir_row && y == 0) {\n                    // input\n                    float pressUp = texelFetch( iChannel1, ivec2(KEY_UP, 0.0), 0 ).x;\n                    float pressDown = texelFetch( iChannel1, ivec2(KEY_DOWN, 0.0), 0 ).x;\n                    float pressLeft = texelFetch( iChannel1, ivec2(KEY_LEFT, 0.0), 0 ).x;\n                    float pressRight = texelFetch( iChannel1, ivec2(KEY_RIGHT, 0.0), 0 ).x;\n\n                    vec2 dir = vec2(0.0, 0.0);\n\n                    dir = vec2(0.0, 1.0) * pressUp;\n                    float pressed = pressUp;\n\n                    dir += vec2(0.0, -1.0) * pressDown * (1.0 - pressed);\n                    pressed = min(pressed + pressDown, 1.0);\n\n                    dir += vec2(-1.0, 0.0) * pressLeft * (1.0 - pressed);\n                    pressed = min(pressed + pressLeft, 1.0);\n\n                    dir += vec2(1.0, 0.0) * pressRight * (1.0 - pressed);\n                    pressed = min(pressed + pressRight, 1.0);\n                    color.xy = mix(color.xy, dir, pressed);\n                }\n                fragColor = color;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TIME_STEP 10\nconst float GLOW_RANGE = 5.0;\nconst float CELL_SIZE = 20.0;\n  \nconst int START_LENGTH = 3;\n\nconst float EPS = 0.1;\nconst float EMPTY_MARKER = 0.0;\nconst float HEAD_MARKER = 0.2;\nconst float TAIL_MARKER = 0.4;\nconst float BODY_MARKER = 0.6;\nconst float APPLE_MARKER = 0.8;\n\nconst float X_UDLR[4] = float[4](0.0, 0.0, -1.0, 1.0);\nconst float Y_UDLR[4] = float[4](1.0, -1.0, 0.0, 0.0);\n\nconst int KEY_SPACE = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst vec3 BORDER_COLOR = vec3(0.3, 0.1, 0.9);\nconst vec3 APPLE_COLOR = vec3(0.8, 0.2, 0.4);\nconst float BLOW = 150.0;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // just screen with glowing snake\n    vec2 crd = fragCoord / CELL_SIZE;\n    \n    float intensity = 0.0;\n    for(float x = -GLOW_RANGE; x < GLOW_RANGE + 0.5; x += 1.0) {\n        for(float y = -GLOW_RANGE; y < GLOW_RANGE + 0.5; y += 1.0) {\n        \tvec2 crd_center = floor(crd) + vec2(x, y) + 0.5;\n\n            vec2 uv_center = crd_center / iResolution.xy;\n\n            vec4 cell_data = texture(iChannel0, uv_center);\n\n            float snake_factor = float(cell_data.z > 0.0);\n\n            vec2 diff = 15.0 * (crd_center - crd);\n            intensity += min(snake_factor / dot(diff, diff), 1.0);\n        }\n    }\n    \n    // something not clear\n    fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n    float extinction = fragColor.x + fragColor.y + 2.0 * fragColor.z;\n    \n    fragColor += vec4(intensity, 0.92 * intensity, 0.88 * intensity, 1.0);\n    fragColor.xyz -= extinction * vec3(0.034, 0.03, 0.028);\n    fragColor.xyz = max(fragColor.xyz, vec3(0.0, 0.0, 0.0));\n   \t\n    // :/\n    fragColor.xyz = min(fragColor.xyz, vec3(5.0, 5.0, 5.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}