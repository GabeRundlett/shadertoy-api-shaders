{
    "Shader": {
        "info": {
            "date": "1711265986",
            "description": "Experiment with the design of the iPhone cases for the iPhone 15 Pro",
            "flags": 0,
            "hasliked": 0,
            "id": "lXjSDd",
            "likes": 19,
            "name": "iPhone case design experiment",
            "published": 3,
            "tags": [
                "cineshader",
                "iphonecase"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 573
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define SPEED 200.\n#define ZERO (min(iFrame,0))\n#define MAT_0 0\n#define MAT_1 1\n#define AA 1\n\nfloat random (vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat smax( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat cam(vec3 p){\n    float d = abs(length(p.xy)-0.07)-0.005;\n    d = max(abs(p.z)-0.06,d);\n    float d2 = length(p.xy)-0.06;\n    d2 = max(abs(p.z)-0.055,d2);\n    d = min(d,d2);\n    return d;\n}\n\nfloat iphoneBody(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(0.22,0.5,0.01))-0.1;\n    d = smax(-(abs(p.z)-0.05),d,0.02);\n    \n    p-=vec3(-0.19,0.36,-0.02);\n    p.y = abs(p.y)-0.09;\n    float d2 = cam(p);\n    d = min(d,d2);\n    p = prevP;\n    d2 = cam(p-vec3(-0.01,0.37,-0.02));\n    d = min(d,d2);\n    \n    p-=vec3(-0.01,0.495,-0.01);\n    d2 = abs(length(p.xy)-0.03)-0.001;\n    d2 = max(abs(p.z)-0.05,d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p-=vec3(-0.01,0.24,-0.01);\n    d2 = length(p.xy)-0.03;\n    d2 = max(abs(p.z)-0.05,d2);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat iphoneCase(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(0.23,0.51,0.01))-0.1;\n    d = smax(-(abs(p.z)-0.06),d,0.02);\n    float d2 = sdBox(p-vec3(0,0,0.07),vec3(0.22,0.5,0.01))-0.1;\n    d = smax(d2,d,0.01);\n    \n    d2 = sdBox(p-vec3(-0.1,0.36,0),vec3(0.09,0.09,0.01))-0.1;\n    d = smax(d2,d,0.02);\n    \n    p-=vec3(-0.1,0.36,-0.04);\n    d2 = sdBox(p,vec3(0.095,0.095,0.05))-0.1;\n    d2 = max((abs(p.z)-0.05),d2);\n    \n    float d3 = sdBox(p,vec3(0.085,0.085,0.85))-0.1;\n    d3 = max((abs(p.z)-0.06),d3);\n    d2 = smax(d3,d2,0.01);\n    d = smin(d2,d,0.02);\n    \n    p = prevP;\n    p.y -=0.18;\n    p.x -= 0.33;\n    p.y = abs(p.y)-0.08;\n    d2 = sdBox(p,vec3(0.001,0.05,0.01))-0.01;\n    d2 = max((abs(p.x)-0.01),d2);\n    d = smin(d,d2,0.01);\n    \n    p = prevP;\n    p.y -=0.4;\n    p.x -= 0.33;\n    d2 = sdBox(p,vec3(0.001,0.025,0.01))-0.01;\n    d2 = max((abs(p.x)-0.01),d2);\n    d = smin(d,d2,0.005);\n    \n    p = prevP;\n    p.y -=0.06;\n    p.x += 0.33;\n    d2 = sdBox(p,vec3(0.001,0.09,0.01))-0.01;\n    d2 = max((abs(p.x)-0.01),d2);\n    d = smin(d,d2,0.01);\n    \n    p = prevP;\n    p.y +=0.6;\n    p.z-=0.02;\n    d2 = sdBox(p,vec3(0.2,0.01,0.03));\n    d = smax(d2,d,0.03);\n    \n    return d;\n}\n\nvec3 tileUV(vec3 p){\n    p.x+=0.35;\n    p.y+=0.62;\n    p.y-=iTime*0.3;\n    \n    float t = mod(iTime*0.2,2.48);\n    if(t>1.24){\n        if(mod(p.x,1.4)>0.7){\n            p.y+=t*0.5;\n        } else {\n            p.y-=t*0.5;\n        }\n    } else {\n        if(mod(p.y,2.48)>1.24){\n            p.x+=t*0.562;\n        } else {\n            p.x-=t*0.562;\n        }\n    }\n    \n    p.x = mod(p.x,0.7)-0.35;\n    p.y = mod(p.y,1.24)-0.62;\n    return p;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    p = tileUV(p);\n    float d = iphoneBody(p-vec3(0,0,0.01));\n    vec2 resD = vec2(d,MAT_0);\n    float d2 =  iphoneCase(p);\n    vec2 resD2 = vec2(d2,MAT_1);\n    resD = combine(resD,resD2);\n    \n    return resD;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<2; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\nfloat caseTexItem0_1(vec2 p){\n     vec2 prevP = p;\n     p*=36.;\n     p.x+=iTime*0.5;\n     p.y+=iTime;\n     vec2 gv = fract(p)-0.5;\n     vec2 id = floor(p);\n     \n     float n = random(id);\n     \n     float d = abs(gv.y)-0.1;\n     if(n<0.5){\n         float d2 = B(gv,vec2(0.3));\n         d = max(-d2,d);\n     } else if(n>=0.75){\n         float d2 = B(gv,vec2(0.25));\n         d = min(d,d2);\n     }\n     \n     return d;\n}\n\nfloat caseTexItem0(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.1,0.2));\n    float a = radians(-45.);\n    p.y-=0.05;\n    d = max(-dot(p,vec2(cos(a),sin(a))),d);\n    p = prevP;\n    a = radians(-45.);\n    p.x = abs(p.x);\n    p.y+=0.27;\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    \n    p = prevP;\n    p.x-=0.11;\n    p.y+=0.02;\n    float d2 = B(p,vec2(0.03,0.12));\n    a = radians(-45.);\n    p.y = abs(p.y)-0.1;\n    d2 = max(-dot(p,vec2(cos(a),sin(a))),d2);\n    d = max(-d2,d);\n    d = abs(d)-0.002;\n    \n    p = prevP;\n    p.x+=0.005;\n    p.y-=0.05;\n    d2 = B(p,vec2(0.08,0.1));\n    d = max(-d2,d);\n    \n    p = prevP;\n    d2 = caseTexItem0_1(p);\n    d2 = max(B(p,vec2(0.07,0.18)),d2);\n    a = radians(-45.);\n    p.y-=0.03;\n    d2 = max(-dot(p,vec2(cos(a),sin(a))),d2);\n    \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat caseTexItem1(vec2 p){\n    vec2 prevP = p;\n    p.x*=1.2;\n    p.y*=-1.;\n    p.y-=iTime*0.1;\n    p.y = mod(p.y,0.1)-0.05;\n    p.y-=0.025;\n    float d = Tri(p,vec2(0.07));\n    p-=vec2(0.,-0.04);\n    float d2 = Tri(p,vec2(0.07));\n    d = max(-d2,d);\n    d = abs(d)-0.002;\n    p = prevP;\n    p.y+=0.11;\n    d = max(abs(p.y)-0.12,d);\n    return d;\n}\n\nfloat stripeRect(vec2 p){\n    vec2 prevP = p;\n    p*=Rot(radians(-45.));\n    p.x-=iTime*0.1;\n    p.x = mod(p.x,0.05)-0.025;\n    \n    float d = B(p,vec2(0.01,1.));\n    p = prevP;\n    d = max(B(p,vec2(0.04,0.23)),d);\n    return d;\n}\n\nfloat caseTexItem2(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.08,0.26));\n    float a = radians(45.);\n    p.y+=0.18;\n    d = max(-dot(p,vec2(cos(a),sin(a))),d);\n    p = prevP;\n    a = radians(45.);\n    p.x = abs(p.x);\n    p.y-=0.31;\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    \n    p = prevP;\n    p.y-=0.05;\n    p.x = abs(p.x)-0.09;\n    float d2 = B(p,vec2(0.03,0.12));\n    a = radians(-45.);\n    p.y = abs(p.y)-0.1;\n    d2 = max(-dot(p,vec2(cos(a),sin(a))),d2);\n    d = max(-d2,d);\n    \n    d = abs(d)-0.002;\n    \n    p = prevP;\n    p.y+=0.15;\n    d2 = B(p,vec2(0.05,0.1));\n    d = max(-d2,d);\n    \n    p = prevP;\n    d2 = stripeRect(p);\n    a = radians(45.);\n    p.y+=0.15;\n    d2 = max(-dot(p,vec2(cos(a),sin(a))),d2);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat caseTexItem3(vec2 p){\n    vec2 prevP = p;\n    p*=Rot(radians(-45.));\n    float d = Tri(p,vec2(0.15));\n    float a = radians(-90.);\n    p.y+=0.03;\n    d = max(-dot(p,vec2(cos(a),sin(a))),d);\n    d = abs(d)-0.002;\n\n    p.y+=0.002;\n    float d2 = Tri(p,vec2(0.15));\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.x-=0.04;\n    p.y+=0.04;\n    p*=Rot(radians(-45.));\n    d2 = abs(Tri(p,vec2(0.06)))-0.002;\n    \n    p = prevP;\n    p.x-=0.07;\n    p.y+=0.07;\n    p*=Rot(radians(iTime*30.));\n    d2 = max(-(abs(p.x)-0.01),d2);\n    d = min(d,d2);\n    \n    return d;\n}\n\n\n\nfloat centerItem(vec2 p){\n    vec2 prevP = p;\n    p*=Rot(radians(iTime*20.));\n    p = DF(p,14.);\n    p-=0.12;\n    p*=Rot(radians(45.));\n    float d = B(p,vec2(0.001,0.01));\n    p = prevP;\n    p*=Rot(radians(iTime*20.));\n    d = max(-(abs(p.x)-0.03),d);\n    \n    p = prevP;\n    p*=Rot(radians(iTime*20.));\n    p*=Rot(radians(180.));\n    p.y = abs(p.y)-0.18;\n    float d2 = Tri(p,vec2(0.012));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(-iTime*20.));\n    p = DF(p,1.);\n    p-=0.09;\n    p*=Rot(radians(45.));\n    float mask = B(p,vec2(0.02,0.1));\n    p = prevP;\n    p*=Rot(radians(-iTime*20.));\n    d2 = abs(length(p)-0.14)-0.002;\n    d2 = max(-mask,d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(-sin(iTime*1.2)*120.));\n    p = DF(p,1.);\n    p-=0.08;\n    p*=Rot(radians(45.));\n    d2 = Tri(p,vec2(0.01));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(-sin(iTime*1.2)*120.));\n    p+=0.02;\n    p.y+=iTime*0.05;\n    p = mod(p,0.04)-0.02;\n    d2 = min(B(p,vec2(0.0003,0.01)),B(p,vec2(0.01,0.0003)));\n    p = prevP;\n    p*=Rot(radians(-sin(iTime*1.2)*120.));\n    p*=Rot(radians(45.));\n    d2 = max(B(p,vec2(0.07)),d2);\n    d = min(d,d2);\n    \n    return d;\n}\n\nvec3 iphoneCaseTex(vec2 p, vec3 col){\n    vec2 prevP = p;\n    p.y+=0.1;\n    float d = abs(length(p)-0.22)-0.02;\n    \n    p = prevP;\n    p.x = abs(p.x)-0.18;\n    p.y+=0.35;\n    float d2 = caseTexItem0(p);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.y+=0.35;\n    d2 = caseTexItem1(p);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x-=0.2;\n    p.y-=0.28;\n    d2 = caseTexItem2(p);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x+=0.285;\n    p.y-=0.15;\n    d2 = caseTexItem3(p);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x = abs(p.x)-0.26;\n    p.y+=0.1;\n    p*=Rot(radians(-90.));\n    d2 = Tri(p,vec2(0.012));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.y+=0.1;\n    d2 = centerItem(p);\n    d = min(d,d2);\n    \n    return mix(col,vec3(2.),S(d,0.0));\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    if (mat == MAT_0){\n        col = diffuseMaterial(n,rd,p,vec3(1.));\n    } else if(mat == MAT_1){\n        p = tileUV(p);\n        col = diffuseMaterial(n,rd,p,iphoneCaseTex(p.xy,vec3(0.35)));\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.35);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        float scene = mod(iTime,18.6);\n        float rotY = 0.;\n        float rotX = 0.;\n        if(scene>=6.2 && scene<12.4){\n            rotY = -20.;\n            rotX = -30.;\n        } else if(scene>=12.4){\n            rotY = -20.;\n            rotX = 30.;\n        }\n        \n        ro.yz *= Rot(radians(rotY));\n        ro.xz *= Rot(radians(rotX));\n    }\n    \n    vec3 col = vec3(.0);\n    \n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 rr = vec2(float(m),float(n))/float(AA);\n\n        uv =  ((fragCoord+rr)-.5*iResolution.xy)/iResolution.y;\n\n        vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n        vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n\n        if(d.x<MAX_DIST) {\n            vec3 p = ro + rd * d.x;\n            vec3 n = GetNormal(p);\n            int mat = int(d.y);\n            col = materials(mat,n,rd,p,col);\n        }\n    }    \n\n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}