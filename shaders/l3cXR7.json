{
    "Shader": {
        "info": {
            "date": "1718788185",
            "description": "The original work is by gaz, and I have deobfuscated it. This is for a blog post introducing IFS fractals.",
            "flags": 0,
            "hasliked": 0,
            "id": "l3cXR7",
            "likes": 8,
            "name": "IFS demystified",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "neozhaoliang",
            "viewed": 434
        },
        "renderpass": [
            {
                "code": "#define R(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#if 0\n// original obfuscated code by gaz\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O-=O;\n    for(float g,e,i=0.;++i<80.;e<1e-4?O+=.9/i:O)\n    {\n        vec3 r=iResolution,\n        p=g*vec3((C-.5*r.xy)/r.y,1);\n        p.y+=3.;\n        p.xz*=R(iTime*.2);\n        for(int j=0;++j<8;)\n            p.z-=.3,\n            p.xz=abs(p.xz),\n            p.xz=(p.z>p.x)?p.zx:p.xz,\n            p.xy=(p.y>p.x)?p.yx:p.xy,\n            p.z=1.-abs(p.z-1.),\n            p=p*3.-vec3(10,4,2);\n        g+=e=length(p)/6561.0-.001;\n    }\n}\n\n#else\n// deobfuscated code with explanations\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    // clear the screen\n    fragColor = vec4(0.0);\n    \n    // d is the distance to the compact set A\n    float d, total = 0.0;\n\n    // Each iteration draws part of the final fractal\n    for(float i = 1.0; i < 80.0; i++)\n    {\n        // screen to world\n        vec3 p = total * vec3((fragCoord - 0.5 * iResolution.xy) / iResolution.y, 1);\n        p.y += 3.0;\n        p.xz *= R(iTime * 0.2);\n\n        // fold p back\n        // the total scaling factor is 3^7\n        for(int j = 1; j < 8; j++)\n        {\n            // the lines below defines the invere of\n            // the contraction mapping F^{-1}\n            // here `abs` and conditional statements creates many copies\n            // of the initial compact set A\n            p.z -= 0.3;\n            p.xz = abs(p.xz);\n            p.xz = (p.z > p.x) ? p.zx : p.xz;\n            p.xy = (p.y > p.x) ? p.yx : p.xy;\n            p.z = 1.0 - abs(p.z - 1.0);\n            p = p * 3.0 - vec3(10, 4, 2);\n        }\n\n        // distance to the compact set A\n        // which is a sphere of radius 6.0 at the origin\n        // note we divided 3^8 instead of 3^7 to get a better distance\n        d = (length(p) - 6.) / pow(3.0, 8.0);\n        total += d;\n\n        // if d is small enough, we are in the compact set\n        // add a little color to the pixel, decreased in i\n        if(d < 0.0001)\n        {\n            fragColor += vec4(0.9) / i;\n        }\n    }\n}\n\n#endif",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nHow are those cool fractal scenes on Shadertoy created?\n\nMost of them are IFS fractals, and can be created using\nthe so called space folding trick.\n\n----------------------------\n  1. Contraction Mapping\n----------------------------\n\nSuppose f: Rn --> Rn is a mapping. If there exists 0<r<1 such that for\nany x,y∈Rn, we have\n\n    d(f(x),f(y)) ≤ r ⋅ d(x,y)\n\nthen f is called a contraction mapping. Here d is the usual Euclidean distance.\n\nLet K(Rn) denote the set of all compact sets in Rn. It can be proven that\nK(Rn) is a complete metric space under the Hausdorff metric. \n\nSuppose f1, …, fN are contraction mappings, where the contraction ratio\nof fi is ri. Define the mapping\n\n    F: K(RN) -> K(RN)\n    \nas follows:\n    \n    F(X) = f1(X)∪f2(X)∪⋯∪fN(X), X∈K(RN).\n\nIt can be proven that F is a contraction mapping on the space K(RN)\nwith a contraction ratio r=max⁡{r1,…,rN}. According to the Banach fixed-point\ntheorem, there exists a unique compact set A⊂RN such that A is a fixed\npoint of F: F(A)=A\n\nMoreover, for any point in K(RN), that is, any compact set B, we have\n    \n    lim⁡n→∞ F^n(B) = A\n\nThe compact set A is called the limit set of F, and A is a fractal.\n\n-----------------------------------\n   2. Spacing folding in shader\n-----------------------------------\n\n\nTo implement an IFS fractal in shader, we need to use the inverse of F,\nnot F. This process works exactly in the same way as paper cutting.\n\nIn the process of paper cutting, you first repeatedly fold the paper,\nthen draw some pattern on the folded paper, cut along this pattern,\nand finally unfold the paper to reveal a beautiful design.\n\nHere, the operation of unfolding the paper corresponds to the\niterative mapping F. It spreads an initial compact set across the space,\ntransforming it into a fractal, which is a \"one-to-many\" mapping.\n\nThe operation of folding the paper corresponds to F^{-1}. It folds the\nfractal back into the initial compact set, which is a \"many-to-one\"\nmapping.\n\nIf you look at the code of the numerous IFS fractal demos on shadertoy,\nyou will find that they almost always use the `abs` function.\nThis function is many-to-one, folding the entire space into the first\nquadrant, which corresponds to F containing 4 different f_i's.\nAdditionally, further folding with respect to other planes or spheres\ncan generate more fi. This explains why in shaders, we do not need to\nexplicitly write out each individual fi. We just fold, fold, and draw once!\n\n------------------------\n   3. Further detail\n------------------------\n\nAnother important detail is that we need to record a deformation factor\nduring each folding process to correct the final distance field.\n\nWhen drawing an IFS fractal, let A be the initial compact set.\nWhat we aim to draw is the set F^n(A) obtained after a certain number\nof iterations under the contraction mapping F. So we need to know the\ndistance from any point p in the space to F^n(A):\n    \n    d(p, F^n(A))\n\nAs mentioned earlier, what we actually compute is\n\n    d(F^{-n}(p), A)\n \nThese two distances are not necessarily equal.\n\nIf F is a rigid body motion such as translation, rotation, or reflection,\nwhich preserves Euclidean distance, then naturally\n\n    d(p, F(A)) = d(F^{-1}(p), A)\n\nHowever, if F is a scaling transformation, for example,\n\n    F(x) = x/s (s>1)\n\nthen\n\n    d(p, F(A)) = d(p, A/s) = d(s⋅p, A)/s = d(F^{-1}(p), A)/s\n    \nThat is, we need to divide the distance value obtained after folding by\nthe accumulated factor s.\n\nHence if F^{-1} is repeated k times, then we need to divide s^n in the end.\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}