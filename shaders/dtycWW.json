{
    "Shader": {
        "info": {
            "date": "1700217734",
            "description": "3D version of a ray-sphere intersection shader. With comments explaining how it works so i can look back at it if i need it",
            "flags": 0,
            "hasliked": 0,
            "id": "dtycWW",
            "likes": 1,
            "name": "3D Ray-sphere intersection",
            "published": 3,
            "tags": [
                "3d",
                "ray",
                "intersection",
                "raysphere"
            ],
            "usePreview": 0,
            "username": "djancool",
            "viewed": 143
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159263535\n//#define SPHERE_MOVEMENT\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    camera cam;\n\n    // ViewDir and fov\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    cam.viewDir = normalize(vec3((fragCoord - iResolution.xy * 0.5) * a, 0.5));\n    // Translate camera position and direction\n    vec2 mouseRotation = vec2( -iMouse.y / iResolution.y * -PI - PI * 0.5, iMouse.x / iResolution.x * PI * -2.0);\n    cam.position = vec3(0.0, 0.0, -3.0);\n    rotateCamera(cam, mouseRotation);\n\n\n    sphere sphere1;\n    #ifdef SPHERE_MOVEMENT\n    sphere1.position = vec3(0.25);\n    sphere1.position *= rotateX(iTime) * rotateY(iTime * 0.9) * rotateZ(iTime * 0.8);\n    #else\n    sphere1.position = vec3(0.0);\n    #endif\n    sphere1.radius = 1.0;\n\n    // Length along RD that is closest to sphere centre/origin\n    float t = dot(sphere1.position - cam.position, cam.viewDir);\n    // Position along RD that is closest to sphere centre/origin\n    vec3 tpos = cam.position + cam.viewDir * t;\n    // Distance from tpos to sphere centre/origin\n    float tdis = distance(tpos, sphere1.position);\n    // Get length of sphere surface to tpos\n    float x1 = sqrt(sphere1.radius * sphere1.radius - tdis * tdis);\n    // Distance along RD to sphere surface\n    float tx1 = t - x1;\n    // Distance along RD to sphere backface\n    float tx2 = t + x1;\n    // Position of sphere surface\n    vec3 tx1Pos = cam.position + cam.viewDir * tx1;\n    // Position of sphere backface\n    vec3 tx2Pos = cam.position + cam.viewDir * tx2;\n    \n    // Calculate normal\n    vec3 normal = normalize(sphere1.position - tx1Pos);\n    vec3 reflectVec = reflect(cam.viewDir, normal);\n    \n    //// Presenting additionals ////\n    \n    // Lambert multiplied by lowest mip of environment texture to get approx avarage scene light\n    vec3 lambert = max(dot(normal, -normalize(vec3(1.0))), 0.0) * textureLod(iChannel0, normal, 10.0).rgb;\n    float fresnel = pow(1.0 - dot(normal, cam.viewDir), 5.0) * 0.96 + 0.04;\n    vec3 reflections = texture(iChannel0, reflectVec).rgb;\n    vec3 col = lambert + reflections * fresnel;\n    \n    vec3 bcol = texture(iChannel0, cam.viewDir).rgb;\n    vec3 finalCol = tdis < sphere1.radius ? col : bcol;\n    \n    // Tonemapping\n    finalCol *= 3.0;\n    finalCol = reinhard_extended_luminance(finalCol, 3.0);\n    \n    fragColor = vec4(vec3(finalCol), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct camera\n{\n    vec3 position;\n    vec3 viewDir;\n};\n\nstruct sphere\n{\n    vec3 position;\n    float radius;\n};\n\n// https://graphics-programming.org/resources/tonemapping/index.html\n\nfloat luminance(vec3 v)\n{\n    return dot(v, vec3(0.2126f, 0.7152f, 0.0722f));\n}\n\nvec3 change_luminance(vec3 c_in, float l_out)\n{\n    float l_in = luminance(c_in);\n    return c_in * (l_out / l_in);\n}\nvec3 reinhard_extended_luminance(vec3 v, float max_white_l)\n{\n    float l_old = luminance(v);\n    float numerator = l_old * (1.0f + (l_old / (max_white_l * max_white_l)));\n    float l_new = numerator / (1.0f + l_old);\n    return change_luminance(v, l_new);\n}\n\n//// ROTATION AMTRIX ////\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n            vec3(1, 0, 0),\n            vec3(0, c, -s),\n            vec3(0, s, c));\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n            vec3(c, 0, s),\n            vec3(0, 1, 0),\n            vec3(-s, 0, c));\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n            vec3(c, -s, 0),\n            vec3(s, c, 0),\n            vec3(0, 0, 1));\n}\n\n\nvoid rotateCamera(inout camera cam, vec2 rot)\n{\n    cam.position *= rotateX(rot.x);\n    cam.position *= rotateY(rot.y);\n    \n    cam.viewDir *= rotateX(rot.x);\n    cam.viewDir *= rotateY(rot.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}