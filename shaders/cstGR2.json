{
    "Shader": {
        "info": {
            "date": "1677541689",
            "description": "modulating saw waves",
            "flags": 8,
            "hasliked": 0,
            "id": "cstGR2",
            "likes": 1,
            "name": "Modulating Saw Waves - Sound",
            "published": 3,
            "tags": [
                "sawwave"
            ],
            "usePreview": 0,
            "username": "gfy_9001",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "// Check these variables in Common to play around with how slow/fast it modulates\n// modulation_mod_hz_max\n// modulation_mod_hz_min\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    float mod_hz = GetModulation(iTime);\n    float modulation = SawMod(1./mod_hz, 1., iTime);\n    float peak = tone(FREQUENCY, 0.5, iTime, modulation);\n     \n    vec3 modCol = (modulation * sin(modulation)) * vec3(0,2,4); \n    vec2 uv     = fragCoord / (iResolution.xy * 0.1);\n    vec3 col    = cos(modulation + peak + uv.xyx + modCol) * (iTime * modulation);\n    \n    fragColor = vec4(col * 0.1,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(in int samp, float time)\n{\n    float mod_hz = GetModulation(time);\n    float modulation = SawMod(1./mod_hz, 1., time);\n\n    // amplitude envelope\n    float m = 1.;                      // higher, the longer it takes to reach peak\n    float b = -4.;                     // how quiet we start, lower is quieter\n    float a = AmpEnvelope(m, time, b); // linear rise\n    return vec2(tone(FREQUENCY, 0.5 * a, time, modulation));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "float modulation_hz = 3.;\nfloat modulation_mod_hz_max = 3.;\nfloat modulation_mod_hz_min = 0.1;\n\nfloat seconds_half_of_soundplayback = 90.;\n\n//#define PI 3.1415926536\n#define T_PI 6.28318530718\n\n// note and octave = hz\n#define C2 65.406\n#define C3 130.812\n#define C4 261.625\n#define G4 391.995\n#define F4 349.2282\t\n\nfloat FREQUENCY = C4;\n\nfloat SinMod(float x, float b, float c, float d)\n{\n    float p = T_PI / b;\n    return sin(p * (x + c)) + d;\n}\n\nfloat SawMod(float p, float a, float t)\n{\n    float period_t = t/p;\n    return 2.0 * (period_t - floor(0.5 + period_t));\n}\n\n// line, e.g. linear ramp\nfloat AmpEnvelope(float m, float t, float b)\n{\n    float v =  m * t + b;\n    return min(1. + (v / -b), 1.0); // convert into 0 -> 1 (nothing to full volume)\n                                    // and keep clamped at 1 (make sure we don't go super loud)\n}\n\nfloat Amp(float a)\n{\n    return a * 0.1;\n}\n\n// hz - frequency in hertz (1/period)\n// a  - amplitude e.g volume\n// t  - time\nfloat SinWave(float hz, float a, float t)\n{\n    return Amp(a) * sin(T_PI * hz * t);\n}\n\n// p - period/cycle (1/hz)\n// a - amplitude e.g volume\n// t - time\nfloat SawWave(float p, float a, float t)\n{\n    float period_t = t/p;\n    return Amp(a) * (2.0 * (period_t - floor(0.5 + period_t)));\n}\n\nfloat sum_of_sines(float f, float a, float t, float m)\n{\n    float sum = 0.;\n    for (int s = 0; s < 8; ++s)\n    {\n        float freq = f + float(s);\n        sum += SinWave(freq + float(s), a, t);\n    }\n    return sum;\n}\n\nfloat GetModulation(float t)\n{\n    float stepTime = mod(t, 15.);                                   // in seconds\n    float mixTime  = mod(t, 30.) / 30.;                             // in normalised range\n    float mod_t = mix(1. / stepTime, stepTime, step(mixTime, 0.5)); // flip modulation every 15 seconds (0.5 of x)\n    return mix(modulation_mod_hz_min, modulation_mod_hz_max, mod_t);\n}\n\nfloat tone(float f, float a, float t, float m)\n{\n    float sine          = SinWave(f,              a* .7,  t);\n    float saw           = SawWave(1./f,           a* 1.,  t);\n    float saw0          = SawWave(1./(f * 1.8),   a* .8,  t);\n    float interval_saw0 = SawWave(1./(f * 1.498), a* .56, t);\n    float interval_saw1 = SawWave(1./(f * 0.25),  a* .56, t);\n    \n    float interval      = interval_saw0 + interval_saw1;    \n    float saw_mix       = saw;\n    \n    return interval + mix(saw0, saw_mix, m);\n    //return sum_of_sines(f, a, t, m); // spooky\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}