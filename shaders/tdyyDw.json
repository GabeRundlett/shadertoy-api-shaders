{
    "Shader": {
        "info": {
            "date": "1602961728",
            "description": "Remix of \"Cellular Automata in Technicolor\" by mla.",
            "flags": 32,
            "hasliked": 0,
            "id": "tdyyDw",
            "likes": 6,
            "name": "Cellular Automata Neon Color",
            "published": 3,
            "tags": [
                "color",
                "remix",
                "glitch",
                "automata",
                "cellular",
                "weird",
                "neon",
                "technicolor",
                "unique"
            ],
            "usePreview": 0,
            "username": "UrbanClubProfessional",
            "viewed": 386
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 31.4159265359;\n\nvec4 t(vec2 fragCoord) {\n    return texelFetch(iChannel0, ivec2(fragCoord), 0);\n}\n\n// Rotate by 90 degrees\nvec2 zRot(vec2 p)\n{\n    return vec2(-p.y, p.x);\n}\n\nstruct CA\n{\n\tvec2 center;\n    // time direction\n    vec2 dir;\n    uint rule;\n};\n\n// interesting rules\nint[] RLS = int[](220, 300, 450, 540, 570, 600, 620, 730, 750, 860, 890, 1100);\n\nfloat next(vec2 idxCenter, CA c)\n{\n    uint id = 0U;\n    \n    // perpendicular to time direction\n    vec2 dirRot = zRot(c.dir);\n    \n    for (int i = -1; i <= 1; i++) {\n        vec2 offset = dirRot*float(i);\n        id <<= 1;\n        id += uint(t(idxCenter + offset - c.dir).a);\n    }\n    \n   \t// 111 110 101 100 011 010 001 000 ids\n    // 0x00011110 rule 30 in binary\n    \n    // rule tour\n    // ruleN = int(mod(iTime/10., exp2(exp2(float(INPUT_COUNT)))));\n    \n    // tip from FabriceNeyret2 \n    return float(((c.rule >> id) & 1U)*(id + 1U));\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec4 runCA(CA c, vec2 fragCoord)\n{\n    vec4 fragColor;\n    vec2 dist = fragCoord - c.center;\n    float d = dot(dist, c.dir);\n    \n\t// draw horizontal line with 1 black dot\n    if( abs(d) < 1.0)\n    {\n       \t// initial condition\n        float val = (length( fragCoord - c.center) < 1.)?0.:1.;\n        fragColor = vec4(val);\n    }\n\t// 0 whats behind the line and out of a 45 degree cone\n    else if( d < 0. || dot(normalize(dist), c.dir) < cos(PI/4.))\n    {\n        fragColor = vec4(0);\n    }\n    else\n    {\n        float c = next(fragCoord,c);\n        fragColor = c == 0.0 ? vec4(0) : vec4(hsv2rgb(vec3((c-1.0)/8.0,1,1)),1);\n    }\n    return fragColor;\n}\n\nuint getrule(int t) {\n\treturn uint(RLS[t%RLS.length()]);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    CA c;\n    vec2 p = fragCoord - vec2(iResolution.xy/2.);\n    \n    // Set 4 CA growing in perpendicular directions\n    int t = 2*iFrame/int(max(iResolution.x,iResolution.y));\n    if(p.x >  abs(p.y)){\n    \tc.rule = getrule(t);\n        c.dir = vec2(1, 0);\n    } else if(p.y >  abs(p.x)){\n    \tc.rule = getrule(t+1); \n        c.dir = vec2(0, 1);\n    } else if(p.x < -abs(p.y)) {\n        c.rule = getrule(t+2);\n        c.dir = vec2(-1, 0);\n    } else {\n        c.rule = getrule(t+3);\n        c.dir = vec2(0, -1);\n    }\n\n    c.center = vec2(iResolution.xy/2.0) + 5.0*c.dir;\n\n    fragColor = runCA(c, fragCoord);\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}