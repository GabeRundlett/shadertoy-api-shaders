{
    "Shader": {
        "info": {
            "date": "1649614115",
            "description": "just testing automata + effects, very messy code\n\npress r to reset",
            "flags": 48,
            "hasliked": 0,
            "id": "NlScWh",
            "likes": 2,
            "name": "Automata Test 098920842",
            "published": 3,
            "tags": [
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float a = 1.;0.25;1.;\n    float x = texelFetch( iChannel0, ivec2(a * fragCoord), 0 ).x;\n   // x = 1.-step(x,0.99);\n    \n    \n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec3 e = vec3(0.5);\n    vec3 col = x * pal(x + 0.5 + uv.y, e ,e, e, 0.5 * vec3(0,1,2)/3.);  \n    \n    float sc = 0.98 * iResolution.y;\n    vec2 ipos = floor(sc * uv);\n    vec2 fpos = fract(sc * uv) - 0.5;\n    \n    x = texelFetch( iChannel0, ivec2(ipos), 0 ).x;\n   // float k = 0.5 * sc / iResolution.y;\n    //col = x * vec3(1.) * smoothstep(-k,k, 0.2-mlength(fpos) + 0.48 * x);\n    if (fragCoord.x > 0.5 * iResolution.x)\n        col *= x; pal (x + 0.5 + uv.y, e, e, e, 0.5 * vec3(0,1,2)/3.);\n    col = sqrt(col) + 0.1;\n    \n    float k = 3./iResolution.y;\n    col += 0.65 * smoothstep(-k, k, -abs(uv.x - 0.5 * iResolution.x/iResolution.y)+ 0.004);\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEYBOARD iChannel1\n#define KEY_RESET 82\n//#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n\nfloat inv(float y) {\n    return 0.5 - sin(asin(1.0-2.0*y)/3.0);\n}\n\nfloat Cell(in ivec2 p) {\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return texelFetch(iChannel0, p, 0 ).x;\n}\n\n\nfloat hash1(float n) {\n    return fract(sin(n)*138.5453123);\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    ivec2 px = ivec2( fragCoord );\n    \n    if (key_down(KEY_RESET) || iFrame==0) \n    {    \n        float d = mlength((fragCoord -.5* iResolution.xy ) / iResolution.y);\n        float g = hash1(fragCoord.x * 13.0  + 10.131 * iTime + 100.19414 + hash1(fragCoord.y*73.1 + 1931.1));\n       // g += exp(-10. * d);\n      //  g *= step(fragCoord.x, 2.) * step(fragCoord.y, 2.);\n        g = step(0.999, g);\n       // g = step(abs(fragCoord.x - 0.5 * iResolution.x), 0.5);\n       // g *= step(abs(fragCoord.y - 0.5 * iResolution.y), 0.5);\n        fragColor = vec4(g, 0.0, 0.0, 0.0 );\n        return;\n    }\n    \n    // center cell\n    float e = Cell(px); \n    \n    // neighbour cells\n    float t = Cell(px + ivec2(0,-1));\n    float b = Cell(px + ivec2(0,1));\n    float l = Cell(px + ivec2(-1,0));\n    float r = Cell(px + ivec2(1,0));   \n    \n    // \"average\" of neighbours\n    float k = 0.5 * max(t + b, l + r);\n    \n    // difference between \"average\" and center\n    float j = abs(e - k);\n    \n   // e += 0.3 * j - 0.06;\n     float a = 0.0;\n    if (e > k - 0.1)\n        e = 0.98 * k + 0.15 * j * k;\n    else\n        e *= 1.5 * k;\n    \n    if (e <= j && e <= 0.12)\n        e = 4. * k;\n    else if (e >= 1.)\n        e = 0.8;\n    \n    if (e > 0.7)\n        e -= 0.01;\n        \n    e = clamp(e,0.,1.);\n     \n    fragColor = vec4( e, 0.0, 0.0, 0.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+0.)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b) {\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float Cell(in ivec2 p) {\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return texelFetch(iChannel0, p, 0 ).x;\n}\n\nfloat Cell2(in ivec2 p) {\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel1, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return texelFetch(iChannel1, p, 0 ).x;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n   \n    float e = Cell(px);\n    float e2 = Cell2(px);\n   \n    e = mix(e, e2, 0.9);\n    //e *= 0.99;\n    e = clamp(e,0.,1.);\n     \n    fragColor = vec4( e, 0.0, 0.0, 0.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}