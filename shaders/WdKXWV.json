{
    "Shader": {
        "info": {
            "date": "1575831497",
            "description": "just a simple infinite fractal with color and a bit of chromatic aberation",
            "flags": 32,
            "hasliked": 0,
            "id": "WdKXWV",
            "likes": 11,
            "name": "a infinite fractal",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "color"
            ],
            "usePreview": 0,
            "username": "Cewein",
            "viewed": 637
        },
        "renderpass": [
            {
                "code": "vec2 computeUV( vec2 uv, float k, float kcube ){\n    \n    vec2 t = uv - .5;\n    float r2 = t.x * t.x + t.y * t.y;\n\tfloat f = 0.;\n    \n    if( kcube == 0.0){\n        f = 1. + r2 * k;\n    }else{\n        f = 1. + r2 * ( k + kcube * sqrt( r2 ) );\n    }\n    \n    vec2 nUv = f * t + .5;\n    nUv.y = 1. - nUv.y;\n \n    return nUv;\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float lensType = 2.0;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float k = 0.2 * cos( lensType);\n    float kcube = .02 * cos( lensType );\n    \n    float offset = .1 * cos( lensType * .5 );\n    \n    float red = texture( iChannel0, computeUV( uv, k + offset, kcube ) ).r; \n    float green = texture( iChannel0, computeUV( uv, k, kcube ) ).g; \n    float blue = texture( iChannel0, computeUV( uv, k - offset, kcube ) ).b; \n    \n    fragColor = vec4( red, green,blue, 1. );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MARCHING_STEP 128\n\n/////\n// SDF Operation function\n/////\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return q;\n}\n\n/////\n// Scene and primitive SDF function\n/////\n\nfloat sphereSDF(vec3 samplePoint) {\n    return length(samplePoint) - 1.0;\n}\n\n\n\nfloat sdPlane( vec3 p )\n{\n    return p.y;\n}\n\n#define Scale 2.\n#define iteration 15\n#define Power (7.+sin(iTime/7.)*5.)\n#define Bailout 5.\nvec3 CSize = vec3(1.3);\n\nfloat DE(vec3 p) {\n    p = p.xzy;\n\tfloat scale = 1.;\n\tfor( int i=0; i < iteration;i++ )\n\t{\n\t\tp = 2.0*clamp(p, -CSize, CSize) - p;\n\t\t//float r2 = dot(p,p);\n        float r2 = dot(p,p+sin(p.x*.1)); //Alternate fractal\n\t\tfloat k = max((2.)/(r2), .027);\n\t\tp     *= k;\n\t\tscale *= k;\n\t}\n\tfloat l = length(p.xy);\n\tfloat rxy = l - 4.0;\n\tfloat n = l * p.z;\n\trxy = max(rxy, -(n) / 4.);\n\treturn (rxy) / abs(scale);\n}\n\nfloat sceneSDF(vec3 samplePoint) {\n\n  \n    float res = DE(samplePoint);\n    //res += sdPlane(-0.5, vec4(0.,1.,0.,1.));\n    return res;\n   \n}\n\n\n/////\n// Ray function\n/////\n\nvec3 getCameraRayDir(vec2 uv, vec3 camPos, vec3 camTarget)\n{\n    // Calculate camera's \"orthonormal basis\", i.e. its transform matrix components\n    vec3 camForward = normalize(camTarget - camPos);\n    vec3 camRight = normalize(cross(vec3(0.0, 1.0, 0.0), camForward));\n    vec3 camUp = normalize(cross(camForward, camRight));\n     \n    float fPersp = 2.0;\n    vec3 vDir = normalize(uv.x * camRight + uv.y * camUp + camForward * fPersp);\n \n    return vDir;\n}\n\nvec3 rayDir(float fov, vec2 size, vec2 fragCoord)\n{\n    vec2 xy = fragCoord - size/2.0;\n    float z = size.y * 0.5 / tan(radians(fov)/ 2.0);\n    return normalize(vec3(xy,-z));\n}\n\nvec2 normalizeScreenCoords(vec2 screenCoord)\n{\n    vec2 result = 2.0 * (screenCoord/iResolution.xy - 0.5);\n    result.x *= iResolution.x/iResolution.y;\n    return result;\n}\n\n/////\n// Marching function\n/////\n\nfloat march(vec3 pos, vec3 direction, float start, float end, inout int i)\n{\n    float depth = start;\n    for(i = 0; i < MARCHING_STEP; i++)\n    {\n        float dist =  sceneSDF(pos + direction * depth);\n        if(dist < 0.005f)\n        {\n            //return depth;\n            break;\n        }\n        depth += dist;\n        if(depth >= end)\n            return end;\n    }\n    return depth;\n}\n\n\n/////\n// Main function\n/////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = normalizeScreenCoords(fragCoord);\n    vec3 pos = vec3(iTime * 10.,52.0,52.);\n    vec3 at = vec3(pos.x + 0.1, pos.y, pos.z);\n    \n    int i = 0;\n    \n    vec3 dir = getCameraRayDir(uv, pos, at);\n    \n    float dist = march(pos, dir, 0.f,5000.f, i);\n    vec3 col = vec3(dist);\n    \n    if((dist - 5000.f) > 0.001f)\n    {\n        col = vec3(0.0529, 0.0808, 0.0922);\n    }\n    else\n    {\n        col = vec3(dist*0.4); \n        col = vec3(0.75 + sin(iTime/10.), 0.615, 0.053 + cos(iTime/10.)) * float(i)/float(MARCHING_STEP);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}