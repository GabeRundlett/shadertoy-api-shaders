{
    "Shader": {
        "info": {
            "date": "1533899981",
            "description": "Imho, the animation is what defines a human-like thing  :D.\na mixamo anim exported to code :D. I was in holydays during all the time of the compo... too many ideas, too few minutes per day.. but thanks to my wife and my daughters i did somehitng! :D ",
            "flags": 96,
            "hasliked": 0,
            "id": "ltdcW7",
            "likes": 130,
            "name": "[SH18]  Humanimation ",
            "published": 3,
            "tags": [
                "disco",
                "human",
                "mocap",
                "sh18",
                "mixamo",
                "samba"
            ],
            "usePreview": 1,
            "username": "pellicus",
            "viewed": 8265
        },
        "renderpass": [
            {
                "code": "// my SH18 Entry:  \n// inspired by this ref https://www.youtube.com/watch?v=kT-I26uFv9M\n// The idea is: \n// what ever you draw .. if it's animated like a human... becomes a human!\n// i've tons of ideas to try and for sure could be an interesting starting\n// point to make some demoscene stuff :D. at least for me.\n//\n// Animation: \n// \tSamba Dance fbx from www.mixamo.com \n// \t\n// Music:\n//\tBarretoVSLujan Feat. Rozalla E Nikki - Everybody Free Samba (Edih Bueno Mega Mush! Work)\n//\n// bufA : playback and interpolation of the animation points (pin)\n// bufB : modeling and rendering and very simple lighting of the scene\n// Image: compositing with some little fx activated by camera change\n\n// compositing: normal, littlebloom, littleglow, radialblur\n\nvec3 pins(int x) { \treturn texelFetch(iChannel1,ivec2(x,0),0).xyz; }\nvec3 pins(int x,int to) { \treturn texelFetch(iChannel1,ivec2(x,to),0).xyz; }\n\n\n//\tFull Scene Radial Blur by Shane:\n//\thttps://www.shadertoy.com/view/XsKGRW\n// Radial blur samples. More is always better, but there's frame rate to consider.\nconst float SAMPLES = 12.; \n// 2x1 hash. Used to jitter the samples.\nfloat hash( vec2 p ){ return fract(sin(dot(p, vec2(41, 289)))*45758.5453); }\n// fixed for me.\nvec3 lOff()\n{    \n    return normalize(vec3(-.50,0,1));\n}\n    vec4 RadialBlur(vec2 uv)\n    {\n    // Radial blur factors.\n    //\n    \n    // Falloff, as we radiate outwards.\n    float decay = 0.97; \n    // Controls the sample density, which in turn, controls the sample spread.\n    float density = 0.5; \n    // Sample weight. Decays as we radiate outwards.\n    float weight = 0.1; \n    \n    // Light offset. Kind of fake. See above.\n    vec3 l = lOff();\n    \n    // Offset texture position (uv - .5), offset again by the fake light movement.\n    // It's used to set the blur direction (a direction vector of sorts), and is used \n    // later to center the spotlight.\n    //\n    // The range is centered on zero, which allows the accumulation to spread out in\n    // all directions. Ie; It's radial.\n    vec2 tuv =  uv - .5 - l.xy*.45;\n    \n    // Dividing the direction vector above by the sample number and a density factor\n    // which controls how far the blur spreads out. Higher density means a greater \n    // blur radius.\n    vec2 dTuv = tuv*density/SAMPLES;\n    \n    // Grabbing a portion of the initial texture sample. Higher numbers will make the\n    // scene a little clearer, but I'm going for a bit of abstraction.\n    vec4 col = texture(iChannel0, uv.xy)*0.25;\n    \n    // Jittering, to get rid of banding. Vitally important when accumulating discontinuous \n    // samples, especially when only a few layers are being used.\n    uv += dTuv*(hash(uv.xy + fract(iTime))*2. - 1.);\n    \n    // The radial blur loop. Take a texture sample, move a little in the direction of\n    // the radial direction vector (dTuv) then take another, slightly less weighted,\n    // sample, add it to the total, then repeat the process until done.\n    for(float i=0.; i < SAMPLES; i++){\n    \n        uv -= dTuv;\n        col += texture(iChannel0, uv) * weight;\n        weight *= decay;\n        \n    }\n    \n    // Multiplying the final color with a spotlight centered on the focal point of the radial\n    // blur. It's a nice finishing touch... that Passion came up with. If it's a good idea,\n    // it didn't come from me. :)\n    col *= (1. - dot(tuv, tuv)*.75);\n    \n    // Smoothstepping the final color, just to bring it out a bit, then applying some \n    // loose gamma correction.\n    return sqrt(smoothstep(0., 1., col));\n    }\n\n\n\n//------------------------------------------------\n#define quickblur_points 14\nvec2 Circle(float Start, float Points, float Point) \n{\n\tfloat Rad = (3.141592 * 2.0 * (1.0 / Points)) * (Point + Start);\n\treturn vec2(sin(Rad), cos(Rad));\n}\nvec3 quickblur_sample(const vec2 uv,const float i,const vec2 scale)\n{\n\n    float ang = (3.141592 * 2.0 * (1.0 / float(quickblur_points)) )*( i +(2./float(quickblur_points)) );\n\treturn texture(iChannel0, uv.xy+scale*vec2(sin(ang), cos(ang))).rgb;\n}\nvec3 quickblur( const vec2 uv )\n{\n    vec2 pix = 1.0 / iChannelResolution[0].xy;\n    float Start = 2.0 / 14.0;\n\tvec2 Scale = 0.66 * 4.0 * 2.0 * pix.xy;\n    const float W = 1.0 / 15.0;\n    vec3 smp = texture(iChannel0, uv).rgb*W;\n    for(int i =0;i<quickblur_points;i++)\n        smp +=  quickblur_sample(uv,float(i),Scale)*W;\n   return smp;\n}\n\n\nvec4  LittleBloom( in vec2 uv)\n{\n\tvec4 src = texture(iChannel0, uv);\n    return vec4( 1. - (1. - src.xyz)*(1. - quickblur(uv)),1.);\n}\n//-------------------------------------------------------------------------\n\n// Little Glow , code stolen :D  from : \n//https://www.shadertoy.com/view/lsXGWn by Seven\n\n//const float blurSize = 1.0/512.0;\n//const float intensity = 0.35;\nvec4 LittleGlow(  const vec2 texcoord, const float blurSize,const float intensity )\n{\n   vec4 sum = vec4(0);\n   int j;\n   int i;\n   //thank you! http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/ for the \n   //blur tutorial\n   // blur in y (vertical)\n   // take nine samples, with the distance blurSize between them\n   sum += texture(iChannel0, vec2(texcoord.x - 4.0*blurSize, texcoord.y)) * 0.05;\n   sum += texture(iChannel0, vec2(texcoord.x - 3.0*blurSize, texcoord.y)) * 0.09;\n   sum += texture(iChannel0, vec2(texcoord.x - 2.0*blurSize, texcoord.y)) * 0.12;\n   sum += texture(iChannel0, vec2(texcoord.x - blurSize, texcoord.y)) * 0.15;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y)) * 0.16;\n   sum += texture(iChannel0, vec2(texcoord.x + blurSize, texcoord.y)) * 0.15;\n   sum += texture(iChannel0, vec2(texcoord.x + 2.0*blurSize, texcoord.y)) * 0.12;\n   sum += texture(iChannel0, vec2(texcoord.x + 3.0*blurSize, texcoord.y)) * 0.09;\n   sum += texture(iChannel0, vec2(texcoord.x + 4.0*blurSize, texcoord.y)) * 0.05;\n\t\n\t// blur in y (vertical)\n   // take nine samples, with the distance blurSize between them\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - 4.0*blurSize)) * 0.05;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - 3.0*blurSize)) * 0.09;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - 2.0*blurSize)) * 0.12;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - blurSize)) * 0.15;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y)) * 0.16;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + blurSize)) * 0.15;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 2.0*blurSize)) * 0.12;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 3.0*blurSize)) * 0.09;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 4.0*blurSize)) * 0.05;\n\n   //increase blur with intensity!\n   return sum*intensity + texture(iChannel0,texcoord);\n}\n\n//-----------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n  \n    vec2 uv = fragCoord.xy / iResolution.xy;\n       float t = iTime*0.512;\n\tint  scene=int(floor(t*0.25));\n   \n    int camchg=scene%5;\n    \n    fragColor = texture(iChannel0,uv);\n    if(camchg==4)\n\t    fragColor = RadialBlur(uv)*1.8;\n\tif(camchg==0)\n        fragColor = LittleBloom(uv);\n\tif(camchg==3)\n        fragColor = LittleGlow(uv,1.0/300.,1.2);\n\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// my SH18 Entry:  \n// inspired by this ref https://www.youtube.com/watch?v=kT-I26uFv9M\n// The idea is: \n// what ever you draw .. if it's animated like a human... becomes a human!\n// i've tons of ideas to try and for sure could be an interesting starting\n// point to make some demoscene stuff :D. at least for me.\n//\n// Animation: \n// \tSamba Dance fbx from www.mixamo.com \n// \t\n// Music:\n//\tBarretoVSLujan Feat. Rozalla E Nikki - Everybody Free Samba (Edih Bueno Mega Mush! Work)\n//\n// bufA : playback and interpolation of the animation points (pin)\n// bufB : modeling and rendering and very simple lighting of the scene\n// Image: compositing with some little fx activated by camera change\n\n// a lot of glitches, bugs to fix and to optimize but...i had a looot of fun\n// making this stuff. In holydays, few minutes each morning before my \n// family woke up... i think i'll remember this experience for a loong time :D.\n// thanks to the Shadertoy community... it's a gold mine of ideas, tricks and usefull code :D\n\n\n// CONSTANTS\n\n#define SQRT2 1.4142135623730950488016887242096980785696\n#define PI    3.1415926535897932384626433832795\n#define HPI   1.57079632679489661923132169\n#define QPI   0.785398163397448309615660845819875721\n#define TAU   6.283185307179586476925286766559\n#define PI2   TAU\n\n#define D2R(x) ((x)*0.0174532925)\n#define R2D(x) ((x)*57.295779513)\n\n\n#define PINS_NUM 20\n\n\n#define ROOT 0\n\n#define RHIP 1\n#define RKNEE 2\n#define RANKLE 3\n#define RFOOT 4\n//#define RTOE 5  removed and calculated on the fly\n\n#define LHIP 6\n#define LKNEE 7\n#define LANKLE 8\n#define LFOOT 9\n//#define LTOE 10  removed and calculated on the fly\n\n#define SPINE 11\n\n#define NECK  12\n#define HEAD  13\n\n#define RSHOULDER 14\n#define RELBOW 15\n#define RHAND 16\n\n#define LSHOULDER 17\n#define LELBOW 18\n#define LHAND 19\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// my SH18 Entry:  \n// inspired by this ref https://www.youtube.com/watch?v=kT-I26uFv9M\n// The idea is: \n// what ever you draw .. if it's animated like a human... becomes a human!\n// i've tons of ideas to try and for sure could be an interesting starting\n// point to make some demoscene stuff :D. at least for me.\n//\n// Animation: \n// \tSamba Dance fbx from www.mixamo.com \n// \t\n// Music:\n//\tBarretoVSLujan Feat. Rozalla E Nikki - Everybody Free Samba (Edih Bueno Mega Mush! Work)\n//\n// bufA : playback and interpolation of the animation points (pin)\n// bufB : modeling and rendering and very simple lighting of the scene\n// Image: compositing with some little fx activated by camera change\n\n// animation: points animation from the mixamo anim exported with a unity tool made\n// by me. \nconst   float totsecs=716./30.;\n\n\n\n#define PINS_DATA_NUM 6020\n\n\n#define II(p) pin == (p)\n#define LL(p) pin < (p)\n#define ONPIN \n#define MM  true\n\n\n\n#define bitmask(a)  ((1<<a)-1)\nfloat bituni(int a,int b) { return  ( float(a)*(1.0/float(bitmask(b))) ); }\n\nvec3 dec(int h,int a,int b,int c)\n{\n    vec3 v=vec3( bituni((h>>(b+c)) & bitmask(a),a) ,\n                 bituni((h>>(c)) & bitmask(b),b) ,\n                 bituni(h & bitmask(c),c)  ) ;\n    return v;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n// .... \nif(fragCoord.x>21. || fragCoord.y>15.)\n    return;\n// .... \nfloat time=iTime - fragCoord.y*.025;\nvec3 pp;\nvec3 pin_min=vec3(0),pin_size=vec3(0);\n int f = int(fract(time/totsecs)*200.);\nint pin=int(fragCoord.x) ;\n\n\n\n// frames: 10\n int[100] pins;\nif(II(0)){ ONPIN pin_min=vec3(-1.1302,1.2101,-0.5605); pin_size=vec3(1.4953,0.4389,1.7686);\npins= int[](\n0xDB24E283\n,0xB566CD45,0x9C89A4A8,0x7BE88D28,0x73286A49,0x93898428,0xBC49A389,0xE9CBD34A,0xD24ADA0B,0xACA7C2C9,0x9381A564\n,0x8B408AE0,0x84848BE2,0x8D858CC5,0x958595C5,0x8C648CA4,0x7D468585,0x744974C8,0x6D686D48,0x5C285CC8,0x4D695568\n,0x3C4C44AA,0x2D6B3CEB,0x1BAA24CB,0x156C148A,0xC2F0CCD,0xD4F0D0F,0x3D004B0,0x15520D31,0x24151473,0x3CB73496\n,0x5BF95498,0x83FA7439,0xBE9C9CBB,0xF1BFDC3E,0xED7DF31E,0xD4FBDDDC,0xBD18C519,0x9E75AD36,0x7A338D14,0x75927272\n,0x755376F3,0x7C1574D4,0x6D337C74,0x63F264F3,0x55325C91,0x44534D13,0x4D324C53,0x44714532,0x3D503C30,0x32B033B0\n,0x374E364F,0x3E0C3DCD,0x318B354B,0x334B300B,0x3E4B3EAB,0x4D6B3DAC,0x48CA53CA,0x554A512A,0x566A574A,0x65EA5E2A\n,0x684A62EA,0x5FEA644A,0x53EA5F0A,0x558B52CA,0x554C5E2B,0x546D548D,0x5D0C5D2C,0x642C642C,0x82CC748C,0x6D0C830C\n,0x540D5CED,0x3C0944AC,0x2A472A88,0x4D073C07,0x6CC75C08,0x9BC68587,0xA3C6AA26,0x7CE78D67,0x64876C08,0x432654A6\n,0x4C063AA6,0x74496528,0x94E98449,0xBC68ACA8,0xACC9BC48,0x842A94E9,0x75897C4A,0x52076467,0x6C485288,0x8BC87C29\n,0xACE69488,0xCAA5C385,0xAD07C3A6,0x8C499CC8,0x7CE784E8,0x62466A66,0x8C667466,0xA4259366,0xDBC3BD04);\n// pin 0 mixamorig:Hips \n//mind: 0,0,0\n//maxd: 4,33,3\n//sized: 4,33,3\n}\nif(II(1)){ ONPIN pin_min=vec3(-1.2134,1.1085,-0.7008); pin_size=vec3(1.6188,0.4370,1.9286);\npins= int[](\n0xEBC4FB24\n,0xADC6D5C5,0x8CA99CC8,0x64497D69,0x63C95ACA,0x8BA874C8,0xCC6AAB88,0xEA4EE38D,0xC22DDA8F,0x9CE8AACB,0x940195E4\n,0x93C09360,0x84249402,0x8D858485,0x95A595E4,0x9CE49CC4,0x856695A5,0x6BC97507,0x65A86548,0x64A75C88,0x5D496588\n,0x3BEC44EA,0x2D8A34AB,0x240924CA,0x1D6B24EA,0xBCF150C,0x5AF04EF,0x44F04B0,0xD320D50,0x1C5414D2,0x34F62C36\n,0x4C384C78,0x74196C39,0xA6BC8CDA,0xD97EC47D,0xCDBDE2DE,0xBCFBC61B,0xA538B4F9,0x8E559D16,0x727284D4,0x75B16AD1\n,0x755276D2,0x73956CF3,0x65726C34,0x6C7064F2,0x65116CF0,0x4C5254F1,0x45514BD3,0x4C704571,0x452F4C6F,0x3A6F438F\n,0x476D3E2E,0x4E0C4DEC,0x49CB4D4B,0x534C482B,0x466F56AE,0x556E45CF,0x608C63AD,0x554D60EC,0x46AB478C,0x55EC4E4B\n,0x600C5ACC,0x57EA540B,0x5C295F2A,0x5D8A5B09,0x556B5E2B,0x544C546C,0x654B554B,0x73EC6C0C,0x9B4C8CEC,0x7D4B938C\n,0x4BCD5CEC,0x2C6A448C,0x23082328,0x4D473487,0x7CC763E7,0xB44795E7,0xB426C2A7,0x7CE795A6,0x5C876BE7,0x3BC64CE7\n,0x44863346,0x74095D47,0xA5298C29,0xD4C9C509,0xBD29D4A9,0x7BEA9509,0x65A9744A,0x42A954C8,0x5CA84328,0x8B687C08\n,0xBD47A487,0xE346D427,0xB566D426,0x842994C8,0x6D487D09,0x53475327,0x84A664E6,0xAC059346,0xEC45CD25);\n// pin 1 mixamorig:RightUpLeg \n//mind: 0,0,0\n//maxd: 5,35,4\n//sized: 5,35,4\n}\nif(II(2)){ ONPIN pin_min=vec3(-1.1152,0.5679,-0.7930); pin_size=vec3(1.7381,0.3347,1.6845);\npins= int[](\n0xF3CAFAEB\n,0xBE46DE07,0x7DE59E05,0x3B8A5588,0x3AC93A68,0x8A694BC9,0xCD72C42E,0xD916DB35,0xA010D0D5,0x8DA58AC8,0x932085E2\n,0x92A09A80,0xA5839361,0x9D86A624,0x8CA88508,0x9C099C29,0x8D6B956A,0x85C68DA9,0x5CAA644A,0x6BCB6C0A,0x652E64EC\n,0x558A656E,0x2C8D348A,0x2AEC342B,0x352F2BED,0x1D8C2D6F,0x4B10D0E,0xB5203D1,0x1CF30C73,0x24D324B3,0x2C382514\n,0x435A3497,0x737B5BDA,0x873D7BFD,0xAB9D9D3D,0xA6BDA49D,0x95BBAD5F,0x8C7A943B,0x86168BFA,0x82327454,0x74D47A72\n,0x8DD87EB6,0x657285B5,0x64B65BF4,0x6B1574F4,0x751863B5,0x6DB56D78,0x44545D71,0x5BF54C94,0x663653D5,0x52F65C16\n,0x46F14E94,0x453044F0,0x59F25DD2,0x4B956053,0x2D923633,0x1D7324D2,0x20941D55,0x1DAF1192,0x35CE2F2E,0x36AA356D\n,0x39073389,0x57EC5449,0x632E4E8E,0x5CCE622E,0x5CCE5D8F,0x65AB6E4B,0x43EF4C0E,0x8C5272EF,0xA35494D3,0x9630A3F4\n,0x65CB7DEE,0x240845E9,0x1AC51B46,0x3C472367,0x95AA6B88,0xBC8DA5EA,0xC4CDCB6F,0x95C7A609,0x5D0585E5,0x2AC533C7\n,0x2B272A65,0x73093C69,0xACED9C0C,0xCC91C510,0xC5AFCCB0,0x9D69B66C,0x56477E86,0x32C53408,0x3B8832C6,0xA3EA7348\n,0xCDACBDAB,0xDB0DDBCC,0xC629DC2C,0x8E65AE27,0x44E76E65,0x32653286,0x6B863C07,0xC4E89A87,0xEBE9D568);\n// pin 2 mixamorig:RightLeg \n//mind: 0,0,0\n//maxd: 8,38,8\n//sized: 8,38,8\n}\nif(II(3)){ ONPIN pin_min=vec3(-1.3372,0.1316,-0.9600); pin_size=vec3(2.2253,0.3451,2.0035);\npins= int[](\n0xD085D085\n,0xB9C5D166,0x596888C5,0x282E3A2C,0x282E280E,0x460929CD,0xC90F8429,0xF093F153,0xCF57F994,0x62A987F3,0x68407161\n,0x68006820,0x796268A0,0x71C981C8,0x6869684A,0x78267846,0x784A7928,0x6A6C804A,0x48AF48CF,0x482B482B,0x504D48CB\n,0x508D504D,0x289131D0,0x102D194F,0x284F108D,0x20CF282F,0x85409F3,0x5500B4,0x183500D5,0x18351815,0x283A2178\n,0x401D317B,0x605E50BD,0x723D681F,0x80968137,0x919D8097,0x89BD903E,0x891D883D,0x733B80BE,0x50355095,0x50B45035\n,0x78766975,0x71567856,0x60596098,0x40514A14,0x51744052,0x60756036,0x309649D5,0x38533116,0x42353833,0x483A489A\n,0x41CF41D6,0x404E402E,0x30B53A32,0x28543035,0x489348F2,0x40F34833,0x194C2ACE,0x30AC182B,0x38B039B0,0x4A0E3870\n,0x702B716B,0x52AE708C,0x382F41AF,0x410F380F,0x482F48AF,0x434F524F,0x20F02970,0x62CD33AF,0x904E906F,0x990F904E\n,0x708C91ED,0x184B390C,0x182C184C,0x126A180C,0x6B072F68,0xA84AA129,0xA84AA84A,0xA166B14A,0x3A0968E6,0x182B18AB\n,0x180B180B,0x35C819AA,0xA04B6408,0xB04CB06D,0xB8CDB04C,0xA948C22C,0x3A0A7129,0x200B204B,0x204B202B,0x64E73429\n,0xC1299948,0xC048C048,0xC989C048,0x8907BA27,0x298A51A8,0x202B202B,0x2C68212B,0x926656A6,0xD065C8E6);\n// pin 3 mixamorig:RightFoot \n//mind: 0,0,0\n//maxd: 9,46,10\n//sized: 9,46,10\n}\nif(II(4)){ ONPIN pin_min=vec3(-1.2078,0.0002,-1.0061); pin_size=vec3(2.0270,0.2777,1.8923);\npins= int[](\n0xE089E089\n,0xD364E949,0x5A2791E4,0x202D29EB,0x204D204D,0x2DAA208D,0xD9B38BCB,0xF057F0B7,0xDFFAF897,0x5AA87FB5,0x70807961\n,0x70407060,0x89E27040,0x78CB89A8,0x786A784B,0x80698069,0x916D80EA,0x61EB920A,0x482F480E,0x504D502D,0x6130504D\n,0x496C61AF,0x205120D1,0x184E188F,0x30F0182E,0x18EE396F,0x340094,0x7500B5,0x18B40035,0x18D41874,0x205A2099\n,0x383D30DC,0x603E487D,0x71DD601F,0x74D675B7,0x90FD73D7,0x891E901E,0x803E801E,0x723C803E,0x58755835,0x58555855\n,0x91F97A37,0x69758A55,0x60386038,0x50345156,0x59364814,0x71B57139,0x30164155,0x40553076,0x49774055,0x503B505B\n,0x49114978,0x48114831,0x38363954,0x31373856,0x30553876,0x28153035,0x106F19B1,0x108F104F,0x287028F0,0x394E2830\n,0x602B606B,0x520F60AB,0x405040B0,0x40504030,0x50115071,0x3A6F59CF,0x20112031,0x6A6E2A70,0xA072A052,0xA912A072\n,0x79AAA3ED,0x106B312B,0x108B108B,0x112B102B,0x73081F88,0xB88DB9AC,0xB88DB8AD,0xBB26C1EC,0x31E871A5,0x106A102A\n,0x100A104A,0x256810AA,0xB10D6BC8,0xC0B0C0D0,0xC070C090,0xBB67DC8D,0x320971E7,0x184A184A,0x180A186A,0x64C72369\n,0xD0CCA9CA,0xD08CD06C,0xE1EBD06C,0x9265CC65,0x20AA4A67,0x184A186A,0x1B89182A,0xA2A64E46,0xE088E109);\n// pin 4 mixamorig:RightToeBase \n//mind: 0,0,0\n//maxd: 12,59,13\n//sized: 12,59,13\n}\nif(II(6)){ ONPIN pin_min=vec3(-1.0882,1.0960,-0.4728); pin_size=vec3(1.5827,0.4499,1.6648);\npins= int[](\n0xBAE3C242\n,0x9D27AD05,0x9C899C89,0x7B8794E8,0x6AC871E8,0x838A7BE9,0x94488BAA,0xD1A8BB28,0xCA68D1E8,0xAC67C308,0x83419505\n,0x73007AA0,0x750573C3,0x7DA67D26,0x7D867D85,0x74047485,0x6D476D86,0x74EA6CA8,0x65496D29,0x4BC854EA,0x3D6A4549\n,0x3CCD346B,0x2D4B3D2C,0x136B24CC,0xD6D0C4B,0x14B00C8F,0xD101510,0x3910CD1,0x15940D32,0x2BD61C34,0x3C573CD7\n,0x63B95CD8,0x8BFB7C5A,0xBE9D9CBC,0xF23FDC1E,0xE55EFB5E,0xD4DBD5BD,0xBD19C53A,0x9E96AD57,0x7A348D56,0x6D946A53\n,0x6D756EF5,0x84D66CB6,0x6CF57CB5,0x4BB35CD5,0x3D944C72,0x3C353D55,0x45144CF5,0x34933D13,0x2D922C12,0x2B122BF2\n,0x274F2650,0x262D25CE,0x216C1D4C,0x1B4B200C,0x364826A9,0x3D683DA9,0x31073BE7,0x55673986,0x5E6A5F29,0x6E09660A\n,0x70A96B28,0x5FEB6C8A,0x43EB4F0C,0x4D8C42AB,0x4D2D4E2D,0x4CAE4CAE,0x4CED4D0D,0x4C4D4C6E,0x628B546B,0x54ED62CB\n,0x546E550E,0x3BEA4CCD,0x29C72A08,0x44C833A7,0x5CC85449,0x83856546,0x838689E5,0x6CE97547,0x5CA86449,0x42C65467\n,0x43E73A26,0x64AA5D09,0x74E96C8A,0x9C078C67,0x8CA99C08,0x7C4B84AA,0x75697C6B,0x51A76427,0x64285227,0x7C4A744A\n,0x8CC67CA8,0xAA44A344,0x94E7A365,0x8C698CA9,0x7CA78CE8,0x61C661E6,0x7C676C06,0x8C468BC7,0xB3829CE4);\n// pin 6 mixamorig:LeftUpLeg \n//mind: 0,0,0\n//maxd: 5,31,4\n//sized: 5,31,4\n}\nif(II(7)){ ONPIN pin_min=vec3(-0.9867,0.4700,-0.2636); pin_size=vec3(1.6119,0.4310,1.3802);\npins= int[](\n0xB4679C46\n,0x94A5AD05,0x94449C25,0x83C18CC3,0x94427AA0,0x9BE694A5,0x8C299BC8,0x74857448,0x9B0183A3,0x9C02A302,0x948294E3\n,0x84828C82,0x7D048463,0x7D847D04,0x858395E3,0x7E6A8E48,0x6D056524,0x74877D06,0x6D447525,0x6E0C6D87,0x350945CB\n,0x448A4CEB,0x3D673CE9,0x45EB3DA6,0x4ED2E2E,0xC4C1CCC,0xD2A0CEC,0x36301D4C,0x155225D2,0x3C123D32,0x5D543C95\n,0x7CD54C96,0x9CF67457,0xD7BAC6F7,0xF1FEE43E,0xED9CF2FF,0xC4B8E679,0xB554C517,0xB753AD34,0xB533AE34,0x9FB5A553\n,0x65157715,0x7C558535,0x7D917C73,0x7E167E12,0x3D3655D8,0x4C343D15,0x4CF24495,0x55944D71,0x35F54658,0x1A8F2370\n,0xF3015EF,0x162F0DB0,0x29681D0C,0x12C82808,0xE630686,0x6421622,0x29091407,0x3CE42947,0x45E74EC6,0x55C44DC5\n,0x50445AC4,0x67E96406,0x652D5F4A,0x5E4D6D6F,0x44CB45CB,0x546B546B,0x54CC4CAB,0x4C6F546E,0x3C103CEF,0x654E5452\n,0x5C4B54AD,0x4C08548A,0x52C34245,0x5D265CC5,0x5C876466,0x5D095D47,0x7C696BEA,0x74E67506,0x75047CC5,0x6C607542\n,0x6D856C21,0x7CE86D87,0x6CEA7CAA,0x75AC6DAB,0x8CEB7D8C,0x8C888CA8,0x85858CA5,0x72817CA3,0x85057BC2,0x94A78CC7\n,0x85698CE8,0x7C697CC8,0x94C78CEA,0x94448C66,0x84828CA3,0x82C07A40,0x94A48D22,0x94459C04,0x95269505);\n// pin 7 mixamorig:LeftLeg \n//mind: 0,0,0\n//maxd: 6,31,6\n//sized: 6,31,6\n}\nif(II(8)){ ONPIN pin_min=vec3(-1.2176,0.1244,-0.4500); pin_size=vec3(1.9797,0.2848,2.0013);\npins= int[](\n0x8A8298A2\n,0x68267206,0x68266806,0x70696827,0x70A8704A,0x70047004,0x78847004,0xA0E99944,0x986A988A,0x98EB984B,0x694881EA\n,0x60266846,0x60266026,0x60C66026,0x68A469A5,0x75437AC4,0x52425181,0x582A5989,0x60085949,0x52286029,0x28E53B06\n,0x284C29EA,0x388B30AC,0x408A404A,0x692309,0x4E014D,0x180D00EE,0x29CD182D,0x107011B0,0x28F42232,0x423428B4\n,0x52B64056,0x73F85917,0xC73B97D9,0xF05FF23D,0xEB7DF87E,0xB058C2B8,0xA075B0F8,0xAB33A075,0xD0D0C171,0x92D1C0D1\n,0x48715B70,0x68566214,0x70517156,0x70907870,0x302F4A30,0x3032302F,0x30F12832,0x48514830,0x160D33B0,0x2A014A\n,0x34E024B,0x26C01CE,0x29001CA5,0x29602860,0x310631A5,0x4BC630C6,0x78466BA6,0x79477826,0x488959C9,0x626B50C9\n,0x684E69CD,0x5B4A694D,0x50885A49,0x3CEA4AE9,0x304A3109,0x300B302B,0x4009302B,0x40284029,0x60495888,0x418B6109\n,0x382B380B,0x40AD380B,0x40EC512E,0x40664068,0x40264046,0x68C448E5,0x61046824,0x58055825,0x58055845,0x60A85825\n,0x68286829,0x58475827,0x58265827,0x80487868,0x70A77848,0x68486828,0x68A86828,0x898B812B,0x6828894B,0x68486828\n,0x78A56807,0xA02598A5,0x68C690C4,0x68476807,0x68486847,0x712A78CA,0x702468E6,0x70047044,0x992278C3);\n// pin 8 mixamorig:LeftFoot \n//mind: 0,0,0\n//maxd: 7,40,7\n//sized: 7,40,7\n}\nif(II(9)){ ONPIN pin_min=vec3(-1.1375,-0.0067,-0.2979); pin_size=vec3(1.8911,0.2154,1.6895);\npins= int[](\n0x81629082\n,0x780578C5,0x78457825,0x78467845,0x78857846,0x80248004,0x80248004,0x90479084,0x88488828,0x90488868,0x78A78088\n,0x70047865,0x68247024,0x68246844,0x784378C3,0x6C6281A3,0x50C15040,0x60486067,0x68056047,0x51E97087,0x282629A6\n,0x384A30A9,0x4068384B,0x492B48C7,0x82A21E9,0x84C084B,0x182A082C,0x322C184A,0x18101870,0x28532112,0x40F42834\n,0x59764835,0x72B96018,0xCF3E97FB,0xF07EF0DE,0xF25EF83E,0xB837C238,0xA833B837,0xAA13A853,0xEED0D490,0xA3B2DEF1\n,0x50525A31,0x707568F4,0x80F07035,0x79B3894F,0x383140F2,0x38523831,0x38313832,0x5092504F,0x154D33F2,0x82B082B\n,0x1EF00CB,0x18E008F,0x202013A3,0x20202080,0x18431863,0x3AA41084,0x60456225,0x60256045,0x50665066,0x59685026\n,0x604B606B,0x62C9602B,0x58486108,0x3C295209,0x38293849,0x40094029,0x48094029,0x48294849,0x504A504A,0x486B506A\n,0x484B480B,0x486C482B,0x4869508B,0x50654806,0x50255065,0x60655045,0x60856045,0x68046804,0x68046844,0x70656824\n,0x78867045,0x68666846,0x68066826,0x70AA70A9,0x7847706A,0x78667826,0x78467846,0x88688088,0x78278888,0x78677847\n,0x80257827,0x88268826,0x78258825,0x78657805,0x78267845,0x78877867,0x78437884,0x78237843,0x90A28062);\n// pin 9 mixamorig:LeftToeBase \n//mind: 0,0,0\n//maxd: 9,51,11\n//sized: 9,51,11\n}\nif(II(11)){ ONPIN pin_min=vec3(-1.1230,1.5059,-0.5136); pin_size=vec3(1.5122,0.4463,1.7439);\npins= int[](\n0xD323DA83\n,0xB547C545,0x9C89A488,0x83A89509,0x7B097A29,0x93898C09,0xB449A3A8,0xD9CBCB4A,0xC24AD20B,0xACA6BAE9,0x9381A564\n,0x8B408AE0,0x8C638BE1,0x8DA48CC3,0x958495A4,0x84648CA3,0x7D468585,0x6C4874A8,0x65676D47,0x54075CA7,0x4D494D48\n,0x344B3CAA,0x2D6A34EA,0x138924AA,0x156C148A,0x42E0CCE,0x54F050E,0x3D004AF,0x15520D31,0x2BF51C53,0x44763475\n,0x63D85497,0x8BFA7439,0xC67CA4BB,0xF1BFE43E,0xED7CFB1E,0xD4FAE5BB,0xB517BD18,0x9654A535,0x721284F3,0x75926A71\n,0x7D3376D3,0x741474B4,0x6D137473,0x5BF164D2,0x55325491,0x44534D13,0x45314452,0x3C704511,0x354F3C2F,0x2ACF33B0\n,0x376D364E,0x3E2B35CC,0x31AB354B,0x3B2A300A,0x3E4A3EAA,0x4D6A45AA,0x50AA53AA,0x5D4A590A,0x5E695F49,0x5DEA5E29\n,0x58095ACA,0x57EA5429,0x540A572A,0x556B4ACA,0x554C562B,0x4C8C4C8C,0x5D0B552B,0x642B642C,0x7ACB748B,0x6D0B7B0B\n,0x4C0C5CEC,0x43E94CAB,0x3A083A48,0x550743C7,0x6CC75C07,0x93C58586,0x9BC5A225,0x74E78D86,0x64876C07,0x4AE65C67\n,0x4BE74A66,0x74686527,0x94E88448,0xB468A4A8,0xA4C8B448,0x840A94E9,0x75697C4A,0x59E86C48,0x6C485A68,0x83C77C48\n,0xACE69487,0xC2A5BB85,0xA506B3A5,0x8C2894C8,0x84A884E8,0x72067227,0x8C667C26,0xA4249385,0xD3C3BCE4);\n// pin 11 mixamorig:Spine1 \n//mind: 0,0,0\n//maxd: 4,34,3\n//sized: 4,34,3\n}\nif(II(12)){ ONPIN pin_min=vec3(-1.1303,1.8915,-0.4770); pin_size=vec3(1.6457,0.4511,1.6715);\npins= int[](\n0xCB24D264\n,0xAD08B526,0x9C4AA44A,0x7B8A8CCA,0x7AE97229,0x8B0B83AB,0xAC2A934A,0xC98DC30B,0xB24BC1CC,0xA487AAE9,0x8B819D45\n,0x836082E0,0x846383E1,0x85A38CA3,0x8D628DA2,0x84428C81,0x75277D85,0x64486CA8,0x5D465D47,0x540654A6,0x454A4548\n,0x344B3CAB,0x25692CEA,0x1B881CA9,0xD6D148A,0xC4F0CCE,0x54F050F,0x3D004CF,0x1D331512,0x3B962C15,0x54174416\n,0x6B996438,0x93BA83FA,0xCDFDA47B,0xF95FE3DE,0xE55CF2DE,0xC4FAD59B,0xA516B518,0x86339534,0x618F7471,0x6D91622F\n,0x7D1576D3,0x73F47CB5,0x6D116C73,0x5BD06490,0x4D3354B1,0x44544CF4,0x3D313C52,0x3C6F3D10,0x2D50344F,0x2AD02BD0\n,0x2F6E2E4F,0x362C35EC,0x29AA354B,0x3B4A300A,0x3E493EAA,0x4D8A45AA,0x588A53AA,0x5D4A590A,0x56495F29,0x4DEA562A\n,0x48094ACA,0x4FE94C29,0x4C0A4F2A,0x4D6B4ACA,0x552D562C,0x4C6D4C6E,0x550C4D0D,0x640B5C4C,0x7ACB746B,0x652B730A\n,0x53EC54EC,0x3BEA4CAB,0x39E83A29,0x54C943A8,0x6CA75BE8,0x93C57D66,0x8BC59245,0x6CC87566,0x64686BE8,0x52C75C48\n,0x53C74A47,0x6C496509,0x8D087C48,0xAC689CC8,0x9CE8AC48,0x83CB8CCA,0x6D4A7C2B,0x59E86409,0x6C295A68,0x83897429\n,0xA4C69487,0xBA86B366,0x9D07ABA6,0x8C099489,0x7C8984E9,0x71E77207,0x8C2783E7,0xA3E59327,0xCB84BCC4);\n// pin 12 mixamorig:Neck \n//mind: 0,0,0\n//maxd: 5,34,4\n//sized: 5,34,4\n}\nif(II(13)){ ONPIN pin_min=vec3(-1.0823,2.0354,-0.4356); pin_size=vec3(1.6431,0.4485,1.5786);\npins= int[](\n0xC2C5D205\n,0xACC9B4E7,0x9C4AA42A,0x73898CCA,0x72E96A29,0x8AEC83AB,0xA3CB92EC,0xB94DB2CC,0xAA2AB1AC,0xA467A2E8,0x8B419D25\n,0x83208AA0,0x844383E1,0x85A384A3,0x856185A2,0x84428481,0x75277D84,0x64286CA8,0x55665D47,0x4C0654A5,0x3D4A4548\n,0x346B34AB,0x25492CEA,0x13881CA9,0xD4D148A,0xC2E0CAE,0x54F050F,0x3D004AF,0x1D131512,0x3B962BF5,0x53F84BF7\n,0x73796419,0x939B83DA,0xCDDDA45C,0xF91EE39E,0xE51CF29E,0xBCD9D57B,0x9CF6ACF8,0x86128D14,0x616E6C50,0x6D50620E\n,0x7CF57693,0x73D47C95,0x6CF16C53,0x5BD06490,0x4D145492,0x44344CF4,0x3D323C53,0x3C6F3D10,0x2D303430,0x22D02BB0\n,0x2F6E2E4F,0x360C2DCD,0x29AB2D2C,0x332A280A,0x362A2E8A,0x3D6A358A,0x488A438A,0x4D4948EA,0x4E494F08,0x45E94629\n,0x400942C9,0x4FE94428,0x44094F29,0x4D8B42C9,0x4D4D4E2C,0x4C6E4C8E,0x4CED450D,0x63EC542C,0x7AAC744C,0x650B730B\n,0x53EC54EC,0x3BE944AB,0x39E83248,0x4CC943A8,0x6C685BC9,0x8BA67D27,0x83A58A05,0x6CC87547,0x5C6863E8,0x4AC75448\n,0x53C74A46,0x6C2A6509,0x84C97429,0xA4499489,0x9CA9A429,0x838B8C8B,0x6D6A7C2B,0x52075C29,0x64285267,0x83697429\n,0xA4688C28,0xB227B307,0x94A8A347,0x8C298C6A,0x74A87CE9,0x69E66A07,0x8C077BE7,0xA3669AE7,0xCB25BC45);\n// pin 13 mixamorig:Head \n//mind: 0,0,0\n//maxd: 5,35,4\n//sized: 5,35,4\n}\nif(II(14)){ ONPIN pin_min=vec3(-1.2828,1.7542,-0.7115); pin_size=vec3(1.7480,0.5211,2.0093);\npins= int[](\n0xEAE5F165\n,0xAF47CDE5,0x854B9649,0x6AAC7C6C,0x62EB618C,0x8DCA74AB,0xD50BADE9,0xE070EAAE,0xA9CFC890,0x9628940B,0x9CC19EE4\n,0x9AC09B20,0x9BE29B21,0x9D239463,0xA462A4C2,0x92E3A302,0x75A684E4,0x642764A8,0x6C856486,0x63256BE5,0x3D694CC7\n,0x2C4A348A,0x34C82C69,0x2AC73427,0xD4B1C08,0x3AE044E,0x4AD048E,0x38F04AD,0xE530591,0x2D361D75,0x45F83617\n,0x5D595638,0x7D5B6DDA,0xB79D961B,0xDB5FCD9E,0xCEBCDCBE,0xACBAC63B,0x93D69C57,0x7D718453,0x604E6B4F,0x64AF610E\n,0x6E346752,0x64926514,0x6BEF6C50,0x6AAE738E,0x4D705BEF,0x3BD24571,0x4C6E43F0,0x53CD548D,0x356D440D,0x2B0E2BEE\n,0x3FEB2E6D,0x4EEA468A,0x49E94E49,0x6B6C600A,0x6DED6EAD,0x6DAF6D2E,0x68F06CAF,0x5D6F6970,0x566E5F6F,0x3D0C4D6E\n,0x402A3A6B,0x47694449,0x4C494F09,0x45EA4329,0x464D46EC,0x4DCC45AD,0x6DCA5DEA,0x942B84CB,0xA1CC9AEC,0x85299AAA\n,0x4DEB66AA,0x340B3DCB,0x2A0A2A0B,0x4E683469,0x8D866627,0xB2C7A4A7,0xAC05B9E6,0x76E79645,0x55C96608,0x42E94CC9\n,0x44883AA8,0x7E485EA8,0xB4889D47,0xD329C3A9,0xBCE8D369,0x7DEA9E89,0x5D0B6D6B,0x494B530B,0x5CCA4A2A,0x8DA76DE9\n,0xCBA7B4C6,0xD987DA07,0xB626D3A6,0x7E0996C8,0x6C0B6D8A,0x620961AA,0x7E286CE8,0xBCE59DA6,0xEA45DBC5);\n// pin 14 mixamorig:RightArm \n//mind: 0,0,0\n//maxd: 5,35,4\n//sized: 5,35,4\n}\nif(II(15)){ ONPIN pin_min=vec3(-1.5946,1.3867,-1.0879); pin_size=vec3(2.3003,1.2118,2.4226);\npins= int[](\n0xF1E9E86A\n,0xB7E9E5A7,0x64CA86E9,0x61105AED,0x49EF58D1,0x874B548C,0xED0FC6CC,0xE033FA11,0x79B2B013,0x770A6CEF,0xA5409745\n,0xA1C1AB40,0xA188A125,0xBB28B248,0xC307C347,0x9925B9C6,0x54876345,0x7A2863A6,0x8A678248,0x618681C7,0x34A83AE8\n,0x53484508,0x62695A69,0x49285A09,0x3CC21E9,0x198E02ED,0x128C1A0D,0x1D0126C,0x4B50353,0x15B70D36,0x36982658\n,0x463A3E99,0x5DBC4E5B,0x873D6E1D,0xA2DF95BE,0x9EDB9CFE,0x83B78E1A,0x99948A35,0x9B309A32,0x80509230,0x4AB0704F\n,0x4E544593,0x6A704CF2,0x797079D0,0x790E816E,0x33F0522E,0x4A6F342F,0x69CF6190,0x616E720F,0x2BCC49EC,0x320C2AAD\n,0x464934AA,0x76286588,0x822B7DC9,0x933280AF,0x9B919CF1,0x7CF68B13,0x49925C36,0x54564993,0x54F55D96,0x3B4B3391\n,0x61295209,0x55475B87,0x3BA84D27,0x34CA3AA8,0x3EED3F0C,0x75CA4E6B,0xA52C8D6B,0xBBEFB4CD,0xB0F0BA30,0xB52BC22F\n,0x4EAB7F2A,0x228E24EC,0x216E3110,0x3EC923AB,0xBD297F28,0xB92BC30B,0xD349C8EB,0x7788B647,0x348A4E49,0x398E32EC\n,0x2BAA31AD,0x8EC74EE9,0xD34DC54A,0xD16EC9AE,0xDC8BE24D,0x7EA9AF29,0x4AEC5CC9,0x48F14990,0x3D0B396F,0xA647672A\n,0xDA4CD44A,0xD06CD0AC,0xCE88E2AB,0x662997A9,0x524E4C4C,0x498E58F0,0x776944AB,0xDC68AE87,0xE0CAEA4A);\n// pin 15 mixamorig:RightForeArm \n//mind: 0,0,0\n//maxd: 8,31,6\n//sized: 8,31,6\n}\nif(II(16)){ ONPIN pin_min=vec3(-1.9840,1.0580,-1.2359); pin_size=vec3(3.0428,1.7754,2.3667);\npins= int[](\n0xFA8ED84F\n,0xC76BED8C,0x768B9FAB,0x518E54AB,0x42ED5110,0xA64E65CA,0xCE55BE34,0xD039EBD7,0x5AD59018,0x7FE95E10,0xBDE09FC4\n,0xB9C1BC00,0x990EA087,0xAC4FA2D0,0xCC6CB50D,0x9866C9EB,0x6CC46A43,0x9B687CC5,0xA30D9BAD,0x70A7992B,0x44854A45\n,0x74665565,0x82EF832C,0x68CC7A2F,0x1B2A390A,0x438C2C0A,0x532E538D,0x29104A2F,0x4370A54,0x16190558,0x26FA1EBA\n,0x36BC2EFB,0x4E9E3EBD,0x6F9F56FE,0x9CFE86BE,0x7EDB8DFC,0x73D47618,0xA1158993,0xB356B1F5,0xA275AB76,0x51909032\n,0x46F334F3,0x8B8E6DF1,0x93949A72,0x90B0A2B2,0x532E612E,0x732D5C0E,0x8A958191,0x79548B16,0x52CB60EE,0x548F4C4B\n,0x6F0B5DED,0x86EE76EC,0x84718E30,0x7D167BB3,0x955785F7,0x66177D38,0x4C5455F6,0x55B54C33,0x56145635,0x456C45D2\n,0x8B4C6C6A,0x6C648BC9,0x444554A4,0x45874406,0x57AC474A,0x7F4D6F8D,0xB60F9ECD,0xCC34C571,0xB916C256,0xC5CFCAB3\n,0x6F6C9F4C,0x236C464B,0x2A4C296E,0x66E93509,0xBE8E970D,0xC930D3EF,0xDC4DD130,0x97CAC6EB,0x4E096749,0x320C340A\n,0x44C732AA,0x9EEE7688,0xD4D1B6AF,0xD133D1D3,0xE4F0EA72,0x9F4BC6CC,0x5409764A,0x48B1496E,0x4CE8320D,0xAE6E8609\n,0xE390CE0E,0xC871C8D2,0xD66DEBB0,0x7F2BAFAC,0x4B2C5DCA,0x428B512F,0x96685D28,0xD5AEBE4D,0xE0CFEB8F);\n// pin 16 mixamorig:RightHand \n//mind: 0,0,0\n//maxd: 8,29,7\n//sized: 8,29,7\n}\nif(II(17)){ ONPIN pin_min=vec3(-1.1215,1.7525,-0.3278); pin_size=vec3(1.7992,0.4905,1.5520);\npins= int[](\n0x93E1A3A0\n,0x942A8D26,0x9B0A9ACB,0x8BE89C2A,0x8B2982E8,0x796C8AAB,0x7D266AAA,0xBC269D45,0xC2C7C3E6,0xA388B228,0x6BC284A6\n,0x63606340,0x63E36381,0x65846C64,0x66226623,0x65236542,0x74896D67,0x634A6BEA,0x458854C9,0x34683CC7,0x4CEC3D0A\n,0x33CD444D,0x152B246C,0x3CA0CEA,0x150F044C,0x13D11C90,0x5310C91,0xB520492,0x2B741BD3,0x4A753A95,0x62965276\n,0x7A586AB7,0x9A798A99,0xCC9CAB5B,0xF01EE27D,0xECFCF9DE,0xCD3BE5DB,0xAD99BD1A,0x87969637,0x63B26E54,0x66945C12\n,0x84767E55,0x73368416,0x55B46456,0x3C924593,0x4C963CD4,0x43B74C56,0x2CF433B5,0x1C502572,0x25131C11,0x23122B73\n,0x27D02672,0x1ECD1EAE,0x11EB154C,0x1B650888,0x2F0326E4,0x3E433683,0x51244C44,0x65645944,0x6F6567C4,0x66896F47\n,0x58EB5B8A,0x57EB54AB,0x4D4C4FAC,0x556D4BAC,0x5CEE5DCD,0x434F536F,0x350D3C6E,0x3D6A34AB,0x54C74E28,0x464C4CC9\n,0x4B2E452E,0x53EA540C,0x526852E8,0x538A5389,0x44664AC9,0x64A255C4,0x5BE462E2,0x5BC95507,0x63296269,0x634763C8\n,0x5BA85AC8,0x532A5C0A,0x5CE653E8,0x7D446D04,0x6DA87D45,0x7A6C6C6B,0x7D0A832B,0x73277CA8,0x7BE97327,0x62CA72CA\n,0x75A46466,0x8BE184E2,0x74A87C03,0x8ACA7B2A,0x8C888C29,0x82A68306,0x8AA88BA7,0x7BE57A07,0x9CE08D82);\n// pin 17 mixamorig:LeftArm \n//mind: 0,0,0\n//maxd: 4,33,5\n//sized: 4,33,5\n}\nif(II(18)){ ONPIN pin_min=vec3(-1.4404,1.4480,-0.5504); pin_size=vec3(2.1668,0.9555,1.8592);\npins= int[](\n0x74A77CC3\n,0x73B0754D,0xC18F9971,0xC5ACD40D,0xC4EEBD8D,0x8071BA50,0x6E0452EA,0xDE84A783,0xF389EDC7,0x92B0D18E,0x54676C6C\n,0x43854425,0x71495228,0x5429624B,0x4D874506,0x64CD552A,0xAB0D942F,0x816FA22D,0x3C8F4B10,0x4C313CAF,0x8C307452\n,0x69F282EF,0xBF03273,0x28F044E,0x4A7329F2,0x39B549F4,0x13772277,0x21970AF7,0x69D449B7,0x719171B2,0x7A3071D0\n,0x89F28211,0xA1D391F3,0xC3B5AAD4,0xE818D256,0xFC35F157,0xF378F4B4,0xC41FE35C,0x86FC9D3E,0x64596E5A,0x963A749A\n,0xBBB4BD57,0x9159B256,0x3D375B5B,0x44193D58,0x83596B7A,0x79F98B18,0x23775199,0x1B141495,0x525731D6,0x625861B6\n,0x3F185519,0x26952EB6,0x26D1532,0x32A21165,0x26622D61,0x55A02D62,0x91A47CC1,0x9BE39906,0x86219681,0xA5EDA585\n,0x61528BB2,0x7ED36373,0x8E108FD2,0x94AD946F,0x9B8C9C4B,0x613389CF,0x24713B14,0x2DEA246D,0x472847E8,0x36D1476B\n,0x61943BF4,0x9D6D92CF,0x950C95AC,0x79D093CD,0x33A841AE,0x45253CE6,0x44894C47,0x522E4BAD,0x9A4E80EF,0x9D0DA44E\n,0x9450950E,0x49CE7A91,0x4B8542A8,0x5D6553C5,0x55CB5E48,0x8112536F,0xBD8DB230,0xA64BAF0B,0xB36DAD4B,0x51ED9171\n,0x5D434BC7,0x6CE26DC2,0x542A5C25,0xA1706A10,0xC60CC3AE,0xBD4BBE0A,0xA98EC40B,0x5C2661AC,0x7D816D82);\n// pin 18 mixamorig:LeftForeArm \n//mind: 0,0,0\n//maxd: 9,27,8\n//sized: 9,27,8\n}\nif(II(19)){ ONPIN pin_min=vec3(-1.6539,1.0733,-0.8371); pin_size=vec3(2.7022,1.7169,2.4777);\npins= int[](\n0x758D7E08\n,0x62725C51,0xC96D90B1,0xC64ADC4A,0xD50DBE4B,0x8011CA10,0x454739EC,0xBF048764,0xF367E625,0x8151C8CE,0x43EE5AD0\n,0x332B3C0C,0x688C496C,0x42AD594E,0x34ED2C2B,0x8C2F54D0,0xA3A89C0A,0x910FB24A,0x433361D2,0x74B15414,0x8C0A84CD\n,0x79129A2D,0x12D34174,0x2C130BB3,0x6C2E4C51,0x593372CF,0x31D54155,0x519531D6,0x7A4E69D2,0x6AAB728B,0x632B62EB\n,0x630D632C,0x7ACE730E,0x93AF832E,0xB2B39B51,0xC46FC3B1,0xE2D1D40E,0xC2BDE237,0x859E9C3F,0x757A75FC,0xA69485D8\n,0xB42DA5B0,0x98B8B9D1,0x3C1A5A1B,0x6C984D1A,0x8BF18414,0x89749311,0x2A1860D8,0x33781B78,0x74325BB5,0x6C926C31\n,0x66766DF4,0x3D785617,0x2101C36,0x13A40908,0x36292E27,0x35C435E9,0x8A426480,0x7D229223,0x66A56E84,0xAD898624\n,0x79D5A372,0x9DD28375,0x9DABA64F,0x84E88C89,0xA3888D07,0x6894996D,0x1C543257,0x2E8E1D71,0x5F6B47EB,0x26133F8E\n,0x60B42B16,0xAD8BAA2E,0xA5AA9E4A,0x80F0B38C,0x230D38CF,0x464A2D4B,0x3CEF4DCB,0x495032D0,0xB28E888F,0xA60CB50C\n,0xAC30AD8D,0x40EF89B3,0x33EA31EB,0x564A4549,0x34EE4E4D,0x78724230,0xCD6BC22E,0xA6A9AF09,0xC28CBDA9,0x491088B1\n,0x3D88334C,0x66475686,0x3ACD550C,0xA8D0590F,0xCE2AD38D,0xC5C9B688,0xA0AFD36C,0x42CA58CD,0x66464507);\n// pin 19 mixamorig:LeftHand \n//mind: 0,0,0\n//maxd: 10,27,9\n//sized: 10,27,9\n}\n\n\n    int fa =f;\n    int fb = f+1;\n    if(fb>=200)fb=0;\n    \n    int ss=pins[f>>1];\n    int aa=pins[fa>>1]; aa = (fa&1)==0? aa : (aa>>16);\n    int bb=pins[fb>>1]; bb = (fb&1)==0? bb : (bb>>16);\n \n    \n    float ff =fract( fract((time)/totsecs)*200.);\n\n    // some interpolation. I sampled 200 frames from a total 716 frames\n    // at 30fps. ... enough for playing with the human figure\n    vec3 pos =  pin_min+dec(aa&0xffff,5,6,5)*pin_size  ;\n    vec3 pos_n =  pin_min+dec(bb&0xffff,5,6,5)*pin_size  ;\n\tpos = mix(pos,pos_n,ff);\n    fragColor =vec4(pos,0.);\n    \n}    \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 15624,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/edihbueno/barretovslujan-feat-rozalla-e-nikki-everybody-free-samba-edih-bueno-mega-mush-work"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// my SH18 Entry:  \n// inspired by this ref https://www.youtube.com/watch?v=kT-I26uFv9M\n// The idea is: \n// what ever you draw .. if it's animated like a human... becomes a human!\n// i've tons of ideas to try and for sure could be an interesting starting\n// point to make some demoscene stuff :D. at least for me.\n//\n// Animation: \n// \tSamba Dance fbx from www.mixamo.com \n// \t\n// Music:\n//\tBarretoVSLujan Feat. Rozalla E Nikki - Everybody Free Samba (Edih Bueno Mega Mush! Work)\n//\n// bufA : playback and interpolation of the animation points (pin)\n// bufB : modeling and rendering and very simple lighting of the scene\n// Image: compositing with some little fx activated by camera change\n\n// modeling, rendering, lighting (veeeery stupid lighting).\n\nvec3 pins(int x) { \treturn texelFetch(iChannel0,ivec2(x,0),0).xyz; }\nvec3 pins(int x,int to) { \treturn texelFetch(iChannel0,ivec2(x,to),0).xyz; }\n\n//modeling features\nfloat puftyfx =0.;\nfloat macho =0.0;\nfloat fatty = 0.;\nfloat pompom =0.;\nfloat faceted=0.;\nfloat springs =0.0;\n//bool floormix =false;\n\n\n// probably i could easily avoid this structure...\nstruct Camera\n{\n    vec3 right;//Right, \n    vec3 up;//Up,\n    vec3 dir;//Direction,\n    vec3 pos;//origin (pos)\n};\n\nCamera cam;\n/*  \nvec3 UpdateCamera(vec2 uv, float t,float uvscl,float zoom)\n{\n \tif(iMouse.z>0.)\n    {\n    \tt = 2.0*PI*(iMouse.x/iResolution.x);\n    }\n    cam.pos = vec3(cos(t),sin(t)*.45+0.8,1.2)*zoom;\n    cam.dir = normalize(vec3(0,1.0,0.0)-cam.pos);\n    cam.right = normalize(cross(cam.dir,vec3(0,1,0)));\n    cam.up = cross(cam.right,cam.dir);\n    uv*=uvscl;\n   return normalize(uv.x*cam.right+uv.y*cam.up+cam.dir);\n}\n*/\nvec3 SetCamera(vec2 uv, vec3 from,vec3 to,float uvscl)\n{\n   \t// here some user mouse interaction..\n    vec3 useroff=vec3(0.);\n    if(iMouse.z>0.)\n    {\n        useroff = vec3((iMouse.xy/iResolution.xy)*2.5,0.);\n    }\n    cam.pos = from+useroff;\n    cam.dir = normalize(to-cam.pos);\n    cam.right = normalize(cross(cam.dir,vec3(0,1,0)));\n    cam.up = cross(cam.right,cam.dir);\n    uv*=uvscl;\n   return normalize(uv.x*cam.right+uv.y*cam.up+cam.dir);\n}\n\n// not sure if it's a good idea.. \n\nstruct Trace\n{\n    vec2\tuv;\n    float \tz;\n    vec3 \tn;\n    vec3 \tp;\n    \n    int\t\tid;\n};\n   \nTrace trc;\n   \n\n#define MATERIALS_NUM 3\n#define ID_SKIN 1.\n#define ID_FLOOR 2.\n#define ID_WALL 3.\n#define ID_MIX -1.\n\n\n\nfloat oS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec4 oU( vec4 d1, vec4 d2 )\n{\n    return (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat smin(in float a, in float b) \n{ const float k=80.;\n    return a - log(1.0+exp(k*(a-b))) * (1. / k); \n}\nfloat smin(in float a, in float b,const float k) \n{ \n    return a - log(1.0+exp(k*(a-b))) * (1. / k); \n}\n//iq's  polynomial smooth min https://iquilezles.org\nfloat oB( float a, float b ) {\n    const  float k = 0.207821;\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat oB2( float a, float b ) {\n    const  float k =0.9207821;\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 oMix(vec4 d1,vec4 d2)\n{\n\treturn vec4(oB2(d1.x,d2.x),d1.x<d2.x?d1.yzw:d2.yzw*2.);\n}\n\nfloat sdSph( const vec3 p, const float s )\n{\n    return length(p)-s;\n}\nfloat sdCap( const vec3 p,const  vec3 a, const vec3 b, const float r )\n{\n    vec3 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdCap2Original(const vec3 p, const vec3 a, const vec3 b, const float r1,const  float r2) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0., 1. );\n    return length( pa - ba*h ) - mix(r1,r2,h);\n}\n\n// to optimize for sure .. \nfloat cos01(const float x)\n{\n\treturn (cos(x)+1.)*.5;\n}\n// Springs\nfloat sdCap2(const  vec3 p, const vec3 a, const vec3 b, const float r1,const  float r2) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0., 1. );\n    vec3 j=ba*h;\n    vec3 pj = pa - j ;\n    float ph=length( pj )- cos01(h*PI2*8.)*springs;\n    return ph - (mix(r1,r2,h));\n}\n\n\n\n// SETTINGS RAYMARCHER\n#define MIN_DIST \t0.001\n#define MAX_DIST\t13.\n#define MAX_ITERATIONS\t60\n\n#define BOUNDS 1.7\n\n\nfloat sdHuman(const vec3 p)\n{\n    // feature: chest/arms biggy\n//    float k=sin(iTime)*0.25;\n\t//float as=1.25+k;\n    \n    float as =1.0+1.5*macho;\n    float ls =1.0+0.6*macho; \n    \n \tvec3 r=pins(ROOT),t,n,s,l,sl,sr;\n\tfloat z = sdCap2(p,r,s=pins(SPINE),0.16,0.12);\n    n=pins(NECK);\n    t=pins(HEAD);\n\tz = min(z,sdCap2(p,n, t+(t-n)*0.6 ,0.0577,0.13));\n\n    z = smin(z,sdCap2(p,s,sl=pins(LSHOULDER),0.160797,as*0.0813));\n    z = smin(z,sdCap2(p,s,sr=pins(RSHOULDER),0.160797,as*0.0813));\n    z = oB(z,sdCap(p,sl,sr,0.1));\n    \n    z = min(z,sdCap2(p,sl,t=pins(LELBOW),0.08*as,0.068*as));\n\t z = min(z,sdCap2(p,t,l=pins(LHAND),0.068*as,0.052));\n    \n    z = min(z,sdCap2(p,sr,t=pins(RELBOW),0.08*as,0.068*as));\n\t z = min(z,sdCap2(p,t,r=pins(RHAND),0.068*as,0.052));\n    \n    z = smin(z,sdCap2(p,r=pins(RHIP),t=pins(RKNEE),0.14*ls,0.09));\n    z = min(z,sdCap2(p,t,r=pins(RANKLE),0.093,0.0889));\n    z = min(z,sdCap2(p,r,t=pins(RFOOT),0.0889,0.0809));\n    s=t-r;s.y=0.;\n    z = min(z,sdCap2(p,t,t+normalize(s)*.1,0.08,0.06));\n\n//        z = min(z,dCap2(p,t,r=pins(RTOE),0.09,0.06));\n    z = smin(z,sdCap2(p,r=pins(LHIP),t=pins(LKNEE),0.14*ls,0.09));\n\t z = min(z,sdCap2(p,t,r=pins(LANKLE),0.093,0.0889));\n    z = min(z,sdCap2(p,r,t=pins(LFOOT),0.0889,0.0809));\n //   z = min(z,dCap2(p,t,r=pins(LTOE),0.09,0.06));\n     s=t-r;s.y=0.;\n    z = min(z,sdCap2(p,t,t+normalize(s)*.1,0.08,0.06));\n\n    //feature: fat-ring\n    z-= puftyfx*.15;\n    \n\t//z-=clamp(sin(iTime)*0.30,-0.025,5.0);\n\n\treturn z;\n}\n\nfloat sdFat(const vec3 p)\n{\n    float k=1.0 + 0.1;\n \tvec3 r=pins(ROOT,2),t,n,s,l,sl,sr;\n//\tfloat z = sdCap2(p,r,s=pins(SPINE),0.15,0.13);\n    float z = sdSph(p-r,0.26);\n    z = oB(z, sdSph(p-(pins(SPINE)+vec3(0.,.07,0. )),0.23) );\n    vec3 oass=vec3(0.,0.1,0.);\n    \n    vec3 lhip=pins(LHIP,3);\n    vec3 rhip=pins(RHIP,3);\n    vec3 back=-cross(rhip-lhip,vec3(0.,1.,0.)) * 0.35;\n    z = smin(z, sdSph(p-(rhip + back   ),0.20) , 50.);\n     z =smin(z, sdSph(p-(lhip + back   ),0.20) ,50.);\n    z = smin(z,sdCap2(p,r=pins(RHIP,2),t=pins(RKNEE),0.20,0.09));\n    \n    z = smin(z,sdCap2(p,r=pins(LHIP,2),t=pins(LKNEE),0.20,0.09));\n\n \tz-=0.031;\n\treturn z;\n}\n\nfloat sdTrail(const vec3 pos,const int pin,const int n,float sz)\n{\n        float szdec=sz/float(n);\n        vec3 off=vec3(0);\n        float z=1000.;\n    \tfor(int h=0;h<n;h+=2)\n        {\n            // changed! the iq's sphere-thing purple primitive :D \n            // for performance reason.\n            z = min( z, sdSph( pos-(pins(pin,h)+off), sz ) + 0.03*sin(50.0*pos.x)*sin(50.0*pos.y)*sin(50.0*pos.z) );\n\t //\t    z = min(z,sdCapStrk(p,pins(pin,h)+off,pins(pin,h+1)+off-vec3(szdec),sz,sz-szdec  ));\n            sz-=szdec;\n            off-=vec3(szdec);\n        }        \n\treturn z;\n}\n\nvec4 sdRoom(const vec3 p)\n{\n\n    vec4 r=vec4(p.y,ID_FLOOR,p.xz);\n\tr=oU(r,vec4(p.z+5.,ID_WALL,p.xy));\n    \n    return r;\n}\n\n\nvec4 sdScene(const vec3 p ,const bool human)\n{\t\n    vec4 r=sdRoom(p);\n    if(human)\n    {\n        \n        \n \t\t float z=sdHuman(p);\n        if(fatty>0.)\n\t        z=mix(z,smin(z,sdFat(p)),fatty);\n        if(pompom>0.)\n        {\n        z=smin(z,sdTrail(p,LHAND,10,pompom));\n        z=smin(z,sdTrail(p,RHAND,10,pompom));\n        }\n       // here there are space for experimentations :D\n      //  for(time_offset=0;time_offset<2;time_offset++)\n       //     z=min(z,sdHuman(p));\n        \n     //    r=floormix?oMix(r,vec4(z,ID_MIX,p.xy)) :\n        r=oU(r,vec4(z,ID_SKIN,p.xy)) ;\n    }\n\treturn r;\n}\n    \n\nfloat rAABB( in vec3 roo, in vec3 rdd, in vec3 rad )\n{\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n    \n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    \n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN > tF || tF < 0.0) return MAX_DIST;\n    \n    return tN;\n}\nfloat rSphere(vec3 o, vec3 d,const vec3 c,const float r)\n{\n    vec3 e= c - o;\n    float a= dot(e, d);\n    float b= r*r - dot(e,e) + a*a;\n    if(b<0.0)\n        return -1.;\n    return  a- sqrt(b);\n  }\n\n\nvec4 Raymarcher(vec3 p,vec3 dir,bool A)\n{\n    float tmin = 1.8;// rFloor(p,dir,0.035);\n    \n    if(A)\n    {\n   \t\t float h=rSphere(p,dir,pins(0)+vec3(0,-0.21,0),BOUNDS);\n  \t\t  tmin=min(tmin,h);\n    }\n    float tmax = MAX_DIST;\n    float t = tmin;\n    vec4  dist = vec4(MAX_DIST,0.,0.,0.);\n    for( int i=0; i<MAX_ITERATIONS; i++ )\n    {\n\t    dist = sdScene( p+dir*t ,A);\n        if( (dist.x)<MIN_DIST || t>MAX_DIST ) break;\n        t += dist.x;\n    }\n    \n    return vec4( t, dist.yzw );\n\n}\n\n\nvec3 GetNormal( in vec3 p ,const bool A)\n{\n/*\tconst float d = 0.01;\n     const vec2 e = vec2(d,-d);\n    return normalize( e.xyy*sdScene( p + e.xyy, A ).x +  e.yyx*sdScene( p + e.yyx, A ).x + \n\t\t\t\t\t  e.yxy*sdScene( p + e.yxy, A ).x +  e.xxx*sdScene( p + e.xxx, A ).x );\n*/\n    //I love it! from Klems!\n    vec4 n = vec4(0);\n    for (int i = 0 ; i < 4 ; i++) {\n        vec4 s = vec4(p, 0);\n        s[i] += 0.001;\n        n[i] = sdScene(s.xyz,A).x;\n    }\n    return normalize(n.xyz-n.w);\n\n\n}\n\n\n\nfloat AO( in vec3 ro, in vec3 rd,bool A ) {\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    \n   for( int i=0; i<5; i++ ) {\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = sdScene( ro+rd*h, A ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 1.2*occ, 0.0, 1.0 );    \n}\n// not used..\n/*\nfloat softshadow(in vec3 ro, in vec3 rd){\n    float res = 1.0, t = 0.15; \n    for(int s = 0; s < 26; ++s){\n        float h = sdScene(ro + rd*t,true).x;\n        if(h < 0.001) return 0.0;\n        res = min( res, 2.0*h/t );\n        t += h*0.339;\n    }\n    return res;\n}\n*/\n\n// sorry .. i dont remember where i found this piece of code\n// the idea is to make a sort of low poly thing.\nvec2 qu(vec2 v)\n{\n\tfloat n = 2.0;\n\treturn floor(v * n + 0.15) / n;\n}\n\nvec3 faceted_normal(vec3 n)\n{\n\tvec3 an = abs(n);\n\t\n\tif(an.x > an.y && an.x > an.z)\n\t{\n\t\tn.yz = qu(n.yz / n.x);\n\t\tn.x = 1.0;\n\t}\n\telse if(an.y > an.x && an.y > an.z)\n\t{\n\t\tn.xz = qu(n.xz / n.y);\n\t\tn.y = 1.0;\n\t}\n\telse if(an.z > an.y && an.z > an.x)\n\t{\n\t\tn.xy = qu(n.xy / n.z);\n\t\tn.z = 1.0;\n\t}\n    return n; \n}\n\n\nvec2 getUV(vec3 nor)\n{\n    float lon = atan(nor.x,nor.z)/3.14;\n    float lat = acos(nor.y)/3.14;\n    vec2 r = vec2(lat, lon);\n    \n    return r;\n}\nbool TraceScene(vec3 p,vec3 dir,bool A)\n{\n  \tvec4 c;  \n    //vec4 h=vec4(MAX_DIST,ID_VOID,dir.xy);\n\tvec4 r=Raymarcher(p,dir,A);\n    if(r.x>MAX_DIST)\n        return false;  // skycolor.\n    \n    trc.p =p+r.x*dir;\n    trc.uv = r.zw;\n\t\n    trc.id = int(r.y);\n    trc.z = r.x;\n    if(trc.id<=int(ID_SKIN))\n    {\n    \ttrc.n =GetNormal(trc.p,A);\n        trc.uv = getUV(trc.n);\n        if(faceted>0.)\n      \t\ttrc.n = faceted_normal(trc.n);\n\n    }\n    else    \n   \t\t trc.n =   trc.id==int(ID_FLOOR)?vec3(0,1,0):vec3(0,0,1);\n    return true;\n}\n\n\n\n// from https://www.shadertoy.com/view/4dsSzr\nvec3 hueGradient(float t) {\n    vec3 p = abs(fract(t + vec3(1.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0);\n\treturn (clamp(p - 1.0, 0.0, 1.0));\n}\n\n\n\n// BleepyBlocks https://www.shadertoy.com/view/MsXSzM by Daedalus\n#define TIMESCALE 0.225 \n#define TILES 8\nvec4 BleepyBlocks(  const  vec2 uv,const vec4 color )\n{\n\t\n\tvec4 noise = texture(iChannel1, floor(uv * float(TILES)) / float(TILES));\n\tfloat p = 1.0 - mod(noise.r + noise.g + noise.b + iTime * float(TIMESCALE), 1.0);\n\tp = min(max(p * 3.0 - 1.8, 0.1), 2.0);\n\t\n\tvec2 r = mod(uv * float(TILES), 1.0);\n\tr = vec2(pow(r.x - 0.5, 2.0), pow(r.y - 0.5, 2.0));\n\tp *= 1.0 - pow(min(1.0, 12.0 * dot(r, r)), 2.0);\n\t\n\treturn color * p+ color*0.45;\n}\n\n\n// Plasma \n// from https://www.shadertoy.com/view/4ssyRB by FabriceNeyret2\n// .. the same on the towel in the Shadertoy Island :D.\nfloat plasma_noise3( vec3 x ) \n{\n    vec3 p = floor(x),f = fract(x);\n\n    f = f*f*(3.-2.*f);  // or smoothstep     // to make derivative continuous at borders\n\n#define plasma_hash3(p)  fract(sin(1e3*dot(p,vec3(1,57,-13.7)))*4375.5453)        // rand\n    \n    return mix( mix(mix( plasma_hash3(p+vec3(0,0,0)), plasma_hash3(p+vec3(1,0,0)),f.x),       // triilinear interp\n                    mix( plasma_hash3(p+vec3(0,1,0)), plasma_hash3(p+vec3(1,1,0)),f.x),f.y),\n                mix(mix( plasma_hash3(p+vec3(0,0,1)), plasma_hash3(p+vec3(1,0,1)),f.x),       \n                    mix( plasma_hash3(p+vec3(0,1,1)), plasma_hash3(p+vec3(1,1,1)),f.x),f.y), f.z);\n}\n\n// pseudoperlin improvement from foxes idea \n#define plasma_noise(x) (plasma_noise3(x)+plasma_noise3(x+11.5)) / 2. \n\nvec4 plasma(vec2 uv,vec4 amb)\n{\n  float n = plasma_noise(vec3(uv,.1*iTime)),\n          v = sin(6.28*10.*n);\n  \t  v = smoothstep(0.,1., .7*abs(v)/fwidth(v));\n    n = floor(n*20.)/20.;\n    return vec4(dot(vec3(.2126, .7152, .0722),v * (.5+.5*cos(12.*n+vec3(0,2.1,-2.1)))) * amb.rgb,1.); \n}\n\n// --------------------------------------------------------------------\nvec4 EvaluateMaterials(vec3 p,vec3 dir,const bool A)\n{\n    float t=floor(iTime*.5);\n    vec4 wall_color= hueGradient(mod(t,8.)/8.).xyzx;\n    vec4 floor_color= hueGradient(mod(t+4.,8.)/8.).xyzx;\n    \n    const vec3 ldir=normalize(vec3(.0,1.,-1.0));\n    vec3 n = trc.n;\n    vec3 hv = normalize(-dir+ldir);\n    vec4 spec=vec4(1.)*pow( max(0.0, dot(hv, n)) , 28.2);\n    \n       float ao=(A&& trc.p.z>-1.50)?AO(trc.p,trc.n,A):1.;\n//    float shd=softshadow(trc.p,-ldir);\n \t//shd=min(shd,ao);\n    vec4  o = vec4( -dot(trc.n, ldir));\n \n    float ff=(1.-length(trc.p-vec3(0,1.5,-3.5))/7.5);\n    if(trc.id == int(ID_FLOOR))\n       o=(ff+vec4(0.1))*BleepyBlocks(trc.uv*0.25,floor_color);\n//    texture(iChannel3,trc.uv*.5)*\n    if(trc.id == int(ID_WALL))\n       o=plasma(trc.uv*1.2,wall_color)*ff;\n \tif(trc.id <= int(ID_SKIN))\n    {\n          o = o*floor_color*vec4(0.35) +(vec4(1.)-o)*wall_color*vec4(0.25); //*vec4( dot(trc.n, ldir));\n    \t\t//o+=gaussianSpecular(-ldir,dir,trc.n,1.5);\n        if(trc.id<0)\n     \t  o=o*(BleepyBlocks(trc.uv*0.25,floor_color)+vec4(0.2));\n\t\telse\n           o=o+(texture(iChannel2,trc.uv)*.5 );\n        o+=spec;\n    \n    }\n    return o*ao;\n\t\n\n}\n\n\n//----------------------------------------------------------------------------------------------\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 suv = (fragCoord.xy-0.5*iResolution.xy) / iResolution.xx;\n    float t = iTime*0.512;\n    vec3 campos=vec3(2.0,0.2,2.5);\n       \n    vec3 camat=vec3(0,1.2,0.0);\n    float camscl=1.15;\n    \n   // camat=pins(ROOT);\n    fatty = iMouse.w/360.;\n   \n    int  scene=int(floor(t*0.25));\n   \n    int camchg=scene%4; \n   \n    \n   // puftyfx=1.;\n   // macho=1.0;\n    // fatty=0.;\n  //  floormix=true;\n\n    vec4 features[]=vec4 [] ( vec4(0),vec4(0.,0.,1.,0.),vec4(0,0,0,.3),vec4(1,0,0,0),\n                              vec4(0,1,0,0), vec4(0.5,0.25,0.75,0.1));\n    vec4 feat=features[scene% 6];\n      puftyfx=feat.x;\n      macho=feat.y;\n      fatty=feat.z;\n\t  pompom=feat.w;\n  //  floormix=true;\n      faceted=scene%5==3?1.:0.;\n    \n    if(fatty>0.)\n        macho = fatty*0.5;\n    \n   // camchg=3;\n    if(camchg==0) { campos = vec3(cos(t),sin(t)*.45+0.8,1.2)*2.3; camat=vec3(0,1,0); \n                   camscl=2.5; \n                  }\n    if(camchg==1) {  campos=vec3(2.0,0.2,2.5)+vec3(cos(t*.5)+1.,0.,sin(t*.5)+1.);\n       \t\t\t\t\tcamat=vec3(0,1.2,0.0);\n\t\t\t    \t\tcamscl=1.15; }\n    if(camchg==2) { \n    \tcampos=vec3(-2.0,0.25,3.0)+vec3(cos(t*.5)+1.,0.,sin(t*.5)+1.)*0.25;\n       \t\t\t\t\tcamat=pins(ROOT);\n\t\t\t    \t\tcamscl=1.45;\n    \t}\n    if(camchg==3) { \n    \tcampos=vec3(0.0,3.25,0.50)+vec3(cos(t*.5)+1.,0.,sin(t*.5)+1.)*0.25;\n       \t\t\t\t\tcamat=pins(ROOT);camat.y=0.5;camat.z-=0.6;\n\t\t\t    \t\tcamscl=2.45;\n    \t}\n    if(scene>=5 && scene<=7)\n        springs=0.05;\n    if(scene>9)\n        springs=cos01(iTime*3.)*0.06;\n    \n    \n    vec3 ray=SetCamera(suv,campos,camat,camscl);\n\n    \n    bool A=rSphere(cam.pos,ray,pins(0)+vec3(0,-0.21,0),BOUNDS)>0.;\n\t\n    fragColor=vec4(0.);\n    if(TraceScene(cam.pos,ray,A))\n    {\n    \tfragColor=EvaluateMaterials(cam.pos, ray,A);\n    }\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}