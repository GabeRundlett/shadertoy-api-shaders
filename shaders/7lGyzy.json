{
    "Shader": {
        "info": {
            "date": "1661707821",
            "description": "OdetoJoy-Beethoven.....play again...if you don't hear",
            "flags": 8,
            "hasliked": 0,
            "id": "7lGyzy",
            "likes": 11,
            "name": "OdetoJoy-Beethoven",
            "published": 3,
            "tags": [
                "odetojoybeethoven"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 256
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n///por jorge flores P.--- :)  28-ago-2022\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBordeR(vec3 pColObj, vec3 colOut, float distObj, float r )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-r,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0)); return colOut;}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\nvec3 DrawFigRB(vec3 pColObj, vec3 colOut, float distObj, float r )\n{  colOut = mix(colOut,pColObj ,S2( distObj-r,0.0)); return colOut; }\n\nvec3 DrawFigDelgado(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj-0.001,0.0)); return colOut; }\n\n\n\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nvec3 noisemontanaCol(vec2 p, vec3 colIn, vec3 colOut, float ptime )\n{   float t=ptime;\n    float fx4a=sin(p.x);\n    float fx4b= 2.0*noise(vec2(3.*p.x+t*20.0,1.0))+fx4a;\n    float y41=p.y+fx4b;\n    float y42=p.y+4.0;\n    float y4e= differenceSDF(y41,y42);\n     colOut=DrawFigBorde(colIn, colOut,y4e);    \n    return colOut;\n    \n}\n\nvec3 monte(vec2 p, vec3 colOut, vec3 colIn)\n{   float t=0.0;\n    float x=p.x;\n    \n    float fx1=4. + 4.*smoothstep(0.0,0.7,sin(x+t));\n    float fx5=(t + floor(x-t))/2.0 - 5.0;\n    float fx6=sin(fx5 -0.5 )+2.0*(fx5/8.0);\n    \n    float y1=p.y+fx6;\n    float y2=p.y+2.0;\n    \n    float yg0= differenceSDF(y1,y2);\n    float fxy1=yg0;\n    \n    vec3 col;\n    col= DrawFigBorde(colIn, colOut, fxy1); \n    \n    return col;\n}\n\nvec3 edificios(vec2 uv, vec3 colOut, vec3 colIn)\n{   const float bands = 20.0;\n\tvec2 p;\n\tp.x = floor(uv.x*bands)/bands;\n\tp.y = uv.y;\n    // led shape\n\tfloat dx = fract( (uv.x - p.x) * bands) - 0.5;\n\tfloat led = smoothstep(0.5, 0.3, abs(dx));\t\n    float fft=random1d(p.x+sin(p.x*0.5));\n    fft-=random1d(p.x);\n    \n    float mask = (p.y*2.0 < fft) ? 1.0 : 0.0;\t\n    \n    vec3 col=mix( colIn*led*mask,colOut,1.0-abs(led*mask));\n    return col;\n}\n\nvec3 nubes(vec2 uv, vec3 colOut)\n{   vec3 col;\n    float d1,d2,d3;\n    float esc=0.75;\n     d1= sdCircle(uv, 1.0);\n     d2= sdCircle(uv-vec2(1.5,0.0), 1.5);\n     d3= sdCircle(uv-vec2(3.0,-0.25), 1.2);\n     float duni= unionSDF(d1, d2);\n     duni= unionSDF(duni,d3);\n     col= DrawFigBorde(vec3(1.0)+uv.y*0.5, colOut, duni);\n     return col;\n}\n\nvec3 sol(vec2 p, vec3 colOut)\n{    float d1= length(p)- 1.0;\n     colOut= DrawFigBorde(vec3(1.0), colOut, d1);\n     return colOut;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=8.0;\n    vec2 uva= fragCoord.xy/iResolution.xy;;\n    vec2 uv0=uv;\n    uv*=esc;\n    \n     vec3 col=vec3(0.0,0.0,0.5);\n    float t=iTime*0.25;\n    uv.x+=t*8.0;\n\n    float posxn1=mod(t*5.0 ,30.0);\n    float posxn2=mod(t*5.0 ,35.0);\n    \n    col= sol(uv0*8.0-vec2(6.0,7.0), col);\n    col= nubes(uv0*6.0-vec2(-15.0+posxn1,4.5),col);\n    col= nubes(uv0*6.0-vec2(-20.0+posxn2,6.0),col);\n    col= monte(uv0*5.0-vec2(0.0+t,-0.1), col, vec3(1.0) );\n    col= monte(uv0*5.0-vec2(0.0+t,-0.2), col, vec3(0.15) );\n    col=edificios(uva+vec2(2.0-t*0.25,-0.25),col,vec3(0.25)); \n    col= noisemontanaCol(uv-vec2(0.0,2.0),vec3(0.0,0.0,0.3), col,1. );\n    col= noisemontanaCol(uv-vec2(1.0,1.0),vec3(0.0,0.2,0.9), col,2.0 );\n    col= noisemontanaCol(uv-vec2(0.0,0.0),vec3(0.0,0.0,1.0), col,3.0 );\n    col=edificios(uva+vec2(0.0+t,0.0),col, vec3(0.4,0.2,0.5)); \n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///tool sound  and random\n\n//version D \n////Octava #1\n//--fin--\n////Octava #2\n const float A0 =27.5;  //1\n const float A_0 =29.14;  //2\n const float B0 =30.87;  //3\n//--fin--\n////Octava #3\n const float C1 =32.7;  //4\n const float C_1 =34.65;  //5\n const float D1 =36.71;  //6\n const float D_1 =38.89;  //7\n const float E1 =41.2;  //8\n const float F1 =43.65;  //9\n const float F_1 =46.25;  //10\n const float G1 =49.0;  //11\n const float G_1 =51.91;  //12\n const float A1 =55.;  //13\n const float A_1 =58.27;  //14\n const float B1 =61.74;  //15\n//--fin--\n////Octava #4\n const float C2 =65.41;  //16\n const float C_2 =69.3;  //17\n const float D2 =73.42;  //18\n const float D_2 =77.78;  //19\n const float E2 =82.41;  //20\n const float F2 =87.31;  //21\n const float F_2 =92.5;  //22\n const float G2 =98.;  //23\n const float G_2 =103.83;  //24\n const float A2 =110.;  //25\n const float A_2 =116.54;  //26\n const float B2 =123.47;  //27\n//--fin--\n////Octava #5\n const float C3 =130.81;  //28\n const float C_3 =138.59;  //29\n const float D3 =146.83;  //30\n const float D_3 =155.56;  //31\n const float E3 =164.81;  //32\n const float F3 =174.61;  //33\n const float F_3 =185.;  //34\n const float G3 =196.;  //35\n const float G_3 =207.65;  //36\n const float A3 =220.;  //37\n const float A_3 =233.08;  //38\n const float B3 =246.94;  //39\n//--fin--\n////Octava #6\n const float C4 =261.63;  //40\n const float C_4 =277.18;  //41\n const float D4 =293.66;  //42\n const float D_4 =311.13;  //43\n const float E4 =329.63;  //44\n const float F4 =349.23;  //45\n const float F_4 =369.99;  //46\n const float G4 =392.;  //47\n const float G_4 =415.3;  //48\n const float A4 =440.;  //49\n const float A_4 =466.16;  //50\n const float B4 =493.88;  //51\n//--fin--\n////Octava #7\n const float C5 =523.25;  //52\n const float C_5 =554.37;  //53\n const float D5 =587.33;  //54\n const float D_5 =622.25;  //55\n const float E5 =659.26;  //56\n const float F5 =698.46;  //57\n const float F_5 =739.99;  //58\n const float G5 =783.99;  //59\n const float G_5 =830.61;  //60\n const float A5 =880.;  //61\n const float A_5 =932.33;  //62\n const float B5 =987.77;  //63\n//--fin--\n////Octava #8\n const float C6 =1046.5;  //64\n const float C_6 =1108.73;  //65\n const float D6 =1174.66;  //66\n const float D_6 =1244.51;  //67\n const float E6 =1318.51;  //68\n const float F6 =1396.91;  //69\n const float F_6 =1479.98;  //70\n const float G6 =1567.98;  //71\n const float G_6 =1661.22;  //72\n const float A6 =1760.;  //73\n const float A_6 =1864.66;  //74\n const float B6 =1975.53;  //75\n//--fin--\n////Octava #9\n const float C7 =2093.;  //76\n const float C_7 =2217.46;  //77\n const float D7 =2349.32;  //78\n const float D_7 =2489.02;  //79\n const float E7 =2637.02;  //80\n const float F7 =2793.83;  //81\n const float F_7 =2959.96;  //82\n const float G7 =3135.96;  //83\n const float G_7 =3322.44;  //84\n const float A7 =3520.;  //85\n const float A_7 =3729.31;  //86\n const float B7 =3951.07;  //87\n//--fin--\n////Octava #10\n const float C8 =4186.01;  //88\n const float C_8 =4434.92;  //89\n const float D8 =4698.64;  //90\n const float D_8 =4978.03;  //91\n const float E8 =5274.04;  //92\n const float F8 =5587.65;  //93\n const float F_8 =5919.91;  //94\n const float G8 =6271.93;  //95\n const float G_8 =6644.88;  //96\n const float A8 =7040.;  //97\n const float A_8 =7458.62;  //98\n const float B8 =7902.13;  //99\n//--fin--\n\n\n// Durations\nconst float WHOLE_NOTE = 1.0;\nconst float HALF_NOTE = 1.0/2.0;\nconst float _4_NOTE = 1.0/4.0;\nconst float _8_NOTE = 1.0/8.0;\nconst float _16_NOTE = 1.0/16.0;\nconst float _32_NOTE = 1.0/32.0;\nconst float DOUBLE_NOTE = 2.0;\n\n//octava\nconst float _0oct8=0.0/8.0;\nconst float _1oct8=1.0/8.0;\nconst float _2oct8=2.0/8.0;\nconst float _3oct8=3.0/8.0;\nconst float _4oct8=4.0/8.0;\nconst float _5oct8=5.0/8.0;\nconst float _6oct8=6.0/8.0;\nconst float _7oct8=7.0/8.0;\nconst float _8oct8=8.0/8.0;\n\nconst float _1cua4=1.0/4.0;\nconst float _2cua4=2.0/4.0;\nconst float _3cua4=3.0/4.0;\nconst float _4cua4=4.0/4.0;\n\nconst float _1med2=1.0/2.0;\n\nconst float _t1=1.0;\nconst float _t2=2.0;\nconst float _t3=3.0;\nconst float _t4=4.0;\nconst float _t5=5.0;\n\nconst float _1hex16=1.0/16.0;\nconst float _2hex16=2.0/16.0;\nconst float _3hex16=3.0/16.0;\nconst float _4hex16=4.0/16.0;\n\n\n\n\n\n///-----------random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n\nfloat random1d( float  v ) \n{\treturn fract(sin(dot( vec2(v,v), vec2(114.0, 514.0))) * 1919810.0) * 2.0 - 1.0; }\n\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "///por jorge flores P.--- :)  28-ago-2022\nstruct Note {\n    // in Hz, see \"common\" tab\n    float frequency;\n    // offset - time in seconds when to start playing note\n    float offset;\n    // duration of a note (1/4, 1/8, ...), see \"common\" tab\n    float duration;\n};\n\nconst Note[] notes = Note[] (\nNote(C4,0.0,1.),\nNote(E5,0.0,0.25),\nNote(E5,0.25,0.25),\nNote(F5,0.5,0.25),\nNote(G5,0.75,0.25),\nNote(B3,1.0,1.),\nNote(G5,1.0,0.25),\nNote(F5,1.25,0.25),\nNote(E5,1.5,0.25),\nNote(D5,1.75,0.25),\nNote(C4,2.0,1.),\nNote(C5,2.0,0.25),\nNote(C5,2.25,0.25),\nNote(D5,2.5,0.25),\nNote(E5,2.75,0.25),\nNote(B3,3.0,0.5),\nNote(E5,3.0,0.375),\nNote(D5,3.375,0.125),\nNote(G3,3.5,0.5),\nNote(D5,3.5,0.5),\nNote(C3,4.0,1.),\nNote(E5,4.0,0.25),\nNote(E5,4.25,0.25),\nNote(F5,4.5,0.25),\nNote(G5,4.75,0.25),\nNote(G2,5.0,1.),\nNote(G5,5.0,0.25),\nNote(F5,5.25,0.25),\nNote(E5,5.5,0.25),\nNote(D5,5.75,0.25),\nNote(C3,6.0,1.),\nNote(C5,6.0,0.25),\nNote(C5,6.25,0.25),\nNote(D5,6.5,0.25),\nNote(E5,6.75,0.25),\nNote(D3,7.0,0.5),\nNote(D5,7.0,0.375),\nNote(C5,7.375,0.125),\nNote(C3,7.5,0.5),\nNote(C5,7.5,0.5),\nNote(G3,8.0,1.),\nNote(D5,8.0,0.25),\nNote(D5,8.25,0.25),\nNote(E5,8.5,0.25),\nNote(C5,8.75,0.25),\nNote(G3,9.0,1.),\nNote(D5,9.0,0.25),\nNote(E5,9.25,0.125),\nNote(F5,9.375,0.125),\nNote(E5,9.5,0.25),\nNote(C5,9.75,0.25),\nNote(G3,10.0,0.5),\nNote(D5,10.0,0.25),\nNote(E5,10.25,0.125),\nNote(F5,10.375,0.125),\nNote(A_3,10.5,0.5),\nNote(E5,10.5,0.25),\nNote(D5,10.75,0.25),\nNote(A3,11.0,0.25),\nNote(C5,11.0,0.25),\nNote(F_3,11.25,0.25),\nNote(D5,11.25,0.25),\nNote(B2,11.5,0.5),\nNote(G4,11.5,0.5),\nNote(C3,12.0,1.),\nNote(E5,12.0,0.25),\nNote(E5,12.25,0.25),\nNote(F5,12.5,0.25),\nNote(G5,12.75,0.25),\nNote(B2,13.0,1.),\nNote(G5,13.0,0.25),\nNote(F5,13.25,0.25),\nNote(E5,13.5,0.25),\nNote(D5,13.75,0.25),\nNote(C3,14.0,1.),\nNote(C5,14.0,0.25),\nNote(C5,14.25,0.25),\nNote(D5,14.5,0.25),\nNote(E5,14.75,0.25),\nNote(B2,15.0,1.),\nNote(E5,15.0,0.375),\nNote(D5,15.375,0.125),\nNote(D5,15.5,0.5)\n\n\n);\n\nfloat Weight( float x )\n{  if( x < 0.0 )x = - x;\n\tif( x < 1.0 )return (1.0 - 2.0*x*x + x*x*x) ;\n\tif( x < 2.0 )return (4.0 - 8.*x + 5.*x*x - x*x*x) ;\n\treturn 0.0 ;\n}\n\nfloat saw(float t, float note, float octave)\n{   return fract(t*note*exp2(octave-1.))-0.5;}\n\n\nvec2 noteFreq(Note note, float time)\n{   float octava=3.0;\n    float n1=saw(time,note.frequency, octava)* exp(-1.0/note.duration * (time - note.offset));  ///ORIGINAL\n    \n    float n1a=n1+pow(n1, 2.0);\n    float t=time;\n    \n    n1=Weight(n1)*n1+n1a;\n    return vec2(n1*0.25);\n}\n\n\nvec2 mainSound( in int samp,float time) \n{   vec2 result;\n    float tt=sin(time*0.25)+2.0*sin(time*0.25+5.0*cos(time*0.125));\n    float ftime=time;\n    ftime= mod(ftime*0.5, 20.0);\n    \n    for (int i = 0; i < notes.length(); i++) \n    {\n        //Note(D5,15.5,0.5)    \n        Note note = notes[i];\n        float x = float(i) * 1.0;\n        \n        if (ftime >= note.offset) \n        {\n            result += noteFreq(note, ftime);            \n        }\n    }\n    return result*0.35;\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}