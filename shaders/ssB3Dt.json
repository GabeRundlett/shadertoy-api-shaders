{
    "Shader": {
        "info": {
            "date": "1618100076",
            "description": "Some debug patterns for edge detection.\nTry applying various edge detection operators, and see how they behave in these different corner cases.\nApply your gradient operator and check that the value is normalized, etc.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssB3Dt",
            "likes": 9,
            "name": "Debug pattern",
            "published": 3,
            "tags": [
                "gradient",
                "edgedetection",
                "pattern",
                "debug"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "//\n// This shader displays several patterns meant to help\n// visualize the result of an edge detection or a gradient\n// operator.\n//\n// --\n// Zavie\n//\n\n#define ANTIALISING 1\n#define PI acos(-1.)\n\nvec3 debugPattern(vec2 fragCoord, vec2 iResolution)\n{\n\tfloat x = fragCoord.x / iResolution.x;\n    if (x < 0.15)\n    {\n        // Horizontal lines:\n        float size = pow(2., 1.+floor(4. * fragCoord.y / iResolution.y));\n        float signal = fragCoord.y;\n        return vec3(fract(signal/size) > 0.5);\n    }\n    else if (x < 0.3)\n    {\n        // Vertical lines:\n        float size = pow(2., 1.+floor(4. * fragCoord.y / iResolution.y));\n        float signal = fragCoord.x;\n        return vec3(fract(signal/size) > 0.5);\n    }\n    else if (x < 0.45)\n    {\n        // Circles:\n        float size = pow(2., 1.+floor(4. * fragCoord.y / iResolution.y));\n        vec2 uv;\n        uv.x = fragCoord.x - (0.3 + 0.5*0.15) * iResolution.x;\n        uv.y = mod(fragCoord.y, 0.25 * iResolution.y) - 0.125 * iResolution.y;\n        float signal = max(abs(uv.x), abs(uv.y));\n        return vec3(fract(signal/size) > 0.5);\n    }\n    else if (x < 0.6)\n    {\n        // Squares:\n        vec2 uv = vec2((x - 0.3)/0.15, fract(4. * fragCoord.y / iResolution.y));\n        float size = pow(2., 1.+floor(4. * fragCoord.y / iResolution.y));\n        uv.x = fragCoord.x - (0.45 + 0.5*0.15) * iResolution.x;\n        uv.y = mod(fragCoord.y, 0.25 * iResolution.y) - 0.125 * iResolution.y;\n        float signal = abs(fract(length(uv)/size) * 2. - 1.)-0.5;\n        #if ANTIALISING\n        float threeshold = 0.5*fwidth(signal);\n        return vec3(smoothstep(-threeshold, threeshold, signal));\n        #else\n        return vec3(signal > 0.);\n        #endif\n    }\n    else\n    {\n        // Radial lines:\n        vec2 uv = vec2((x - 0.6)/0.4, fragCoord.y / iResolution.x/0.4-0.2);\n        vec2 p = uv-0.5;\n        float d = length(p);\n        float signal = sin(24.*2.*PI*atan(p.y,p.x));\n        #if ANTIALISING\n        float threeshold = 0.5*fwidth(signal);\n        return vec3(smoothstep(-threeshold, threeshold, signal));\n        #else\n        return vec3(signal > 0.);\n        #endif\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(debugPattern(fragCoord, iResolution.xy), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}