{
    "Shader": {
        "info": {
            "date": "1672074798",
            "description": "Fractal!  fractals are cool.  Click to restart (for full screen rendering).",
            "flags": 32,
            "hasliked": 0,
            "id": "dllGzj",
            "likes": 2,
            "name": "Yet another mandelbrot",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 colOut = texture(iChannel0, fragCoord/iResolution.xy);\n    /*\n    fragColor = vec4(colOut.z/float(iFrame));//*/\n    //*\n    fragColor = 1.0-vec4(pow(0.99, colOut.z));//*/\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor.x = iMouse.z<0.5?texture(iChannel0, vec2(0.5)).x + 1.0:0.0;\n    fragColor = vec4(fragColor.x);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 colIn = texture(iChannel0, fragCoord/iResolution.xy);\n    vec2 uv = (fragCoord/iResolution.xy)-vec2(0.5);\n    uv.x /= iResolution.y/iResolution.x;\n\n    \n    /*\n    uv*=0.2;\n    uv.x -= 0.3;\n    uv.y -= 0.7;\n    //*/\n\n    //*\n    //uv*=5e-6;//this value will take you to the limit of the floating point resolution\n    uv*=5e-2;\n    uv.x -= 0.230602;\n    uv.y -= 0.700407;\n    //*/\n\n\n\n    vec2 coords;\n    bool done = colIn.z != 0.0;\n    bool prevDone = done;\n    float margin = 10.0;\n\n    if (!done) {\n        coords = colIn.xy;\n        \n        vec2 i = coords;\n        vec2 o;\n        o.x = i.x*i.x - i.y * i.y;\n        o.y = i.x * i.y * 2.0;\n        \n        coords = o + uv;\n        \n        \n        if (length(coords) > margin)\n        {\n            done = true;\n        }\n    }\n\n    fragColor = vec4(coords, done?(prevDone?colIn.z:texture(iChannel1, vec2(0.5)).x):0.0 ,1.0);\n\n    if (texture(iChannel1, vec2(0.5)).x < 0.1)\n    {\n        fragColor.xy = uv;\n        fragColor.zw = vec2(0.0);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}