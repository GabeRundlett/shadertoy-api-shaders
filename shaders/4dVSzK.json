{
    "Shader": {
        "info": {
            "date": "1465409560",
            "description": "Just a test on making godrays",
            "flags": 0,
            "hasliked": 0,
            "id": "4dVSzK",
            "likes": 8,
            "name": "nyan cat godrays",
            "published": 3,
            "tags": [
                "nyan",
                "godrays",
                "cat"
            ],
            "usePreview": 0,
            "username": "robobo1221",
            "viewed": 1027
        },
        "renderpass": [
            {
                "code": "#define Density 1.0\n#define Num_Steps 64.0\n\nvec3 getTexure(vec2 coord){\n\tvec4 t = texture(iChannel0,coord.st);   \n    return t.rgb * t.a; \n}\n\nfloat getNoiseTexture(vec2 coord){\n\treturn texture(iChannel1, coord.xy * 2.0).r;\n}\n\nvec3 getRays(vec2 coord, out float mask){\n    \n    const int numSteps = int(Num_Steps * Density);\n    int weight = 0;\n    \n    vec3 gr = vec3(0.0);\n    \n    vec2 mouseCoord = coord.xy - (iMouse.xy / iResolution.xy);\n    \n    vec2 delta = (mouseCoord) * (Density / float(numSteps));\n    vec2 customTexcoord = coord.st;\n    \n    float visibility = 1.0-sqrt(pow(mouseCoord.x,2.0) + pow(mouseCoord.y,2.0));\n    visibility = pow(visibility,1.0);\n    visibility += pow(visibility,2.0);\n    visibility = clamp(visibility,0.0,1.0);\n    visibility = 1.0;\n\t\n    for(int i = 0; i < numSteps; i++){\n        \n        customTexcoord -= delta;\n    \tfloat noise = getNoiseTexture(customTexcoord);\n        \n        gr += getTexure(customTexcoord.st + delta * noise);\n        \n        weight++;\n    }\n    \n    gr /= float(weight);\n    gr *= visibility;\n    mask = (gr.r + gr.g + gr.b) / 3.0;\n    mask = pow(mask,2.2);\n    gr *= mask;\n    gr = max(gr,0.0);\n    \n    return gr;\n    \n}\n\nvec3 getRaysSecondPass(vec2 coord, out float mask){\n    \n    const int numSteps = int(Num_Steps * Density);\n    int weight = 0;\n    \n    vec3 gr = vec3(0.0);\n    \n    vec2 mouseCoord = coord.xy - (iMouse.xy / iResolution.xy);\n    \n    vec2 delta = (mouseCoord) * (Density / float(numSteps));\n    vec2 customTexcoord = coord.st;\n    \n    float visibility = 1.0-sqrt(pow(mouseCoord.x,2.0) + pow(mouseCoord.y,2.0));\n    visibility = pow(visibility,1.0);\n    visibility += pow(visibility,2.0);\n    visibility = clamp(visibility,0.0,1.0);\n    visibility = 1.0;\n\t\n    for(int i = 0; i < numSteps; i++){\n        \n        customTexcoord -= delta;\n    \tfloat noise = getNoiseTexture(customTexcoord);\n        \n        gr += getNoiseTexture(customTexcoord.st + delta * noise);\n        \n        weight++;\n    }\n    \n    gr /= float(weight);\n    gr *= visibility;\n    mask = (gr.r + gr.g + gr.b) / 3.0;\n    mask = pow(mask,2.2);\n    gr *= mask;\n    gr = max(gr,0.0);\n    \n    return gr;\n    \n}\n    \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float grMask;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(getTexure(uv) + (getRays(uv, grMask) * getRaysSecondPass(uv, grMask) * pow(5.0,2.0)),1.0);\n    //fragColor = vec4(getTexure(uv) + (getRays(uv, grMask) * 3.0),1.0);\n    //fragColor = vec4((getRays(uv, grMask) * getRaysSecondPass(uv, grMask) * pow(5.0,2.0)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}