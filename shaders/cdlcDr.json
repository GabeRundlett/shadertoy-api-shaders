{
    "Shader": {
        "info": {
            "date": "1686730209",
            "description": "This is my first raymarching shader :)",
            "flags": 0,
            "hasliked": 0,
            "id": "cdlcDr",
            "likes": 1,
            "name": "First Raymarching Shader",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "ApeSander",
            "viewed": 152
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat smoothMax(float a, float b, float k) {\n        return log(exp(k * a) + exp(k * b)) / k;\n}\n\nfloat smoothMin(float a, float b, float k) {\n    return -log(exp(k * -a) + exp(k * - b)) / k;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat getDist( vec3 p ) {\n    vec4 s = vec4(0, 1, 6, 1);\n    s.y = sin(iTime) - 1.0;\n    float sD = length(p-s.xyz) - s.w;\n    float pD = p.y;\n    float d = smoothMax(-sD, pD, 1.0);\n    \n    return d;\n}\n\nvec3 getNormal( vec3 p ) {\n    float d = getDist(p);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = d - vec3(\n        getDist(p-e.xyy),\n        getDist(p-e.yxy),\n        getDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat rayMarch( vec3 ro, vec3 rd ) \n{\n    float dO = 0.0;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        float dS = getDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nfloat getLight( vec3 p ) {\n    vec3 lightPos = vec3(0, 5, 6);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    float d = rayMarch(p+n*SURF_DIST*2.0, l);\n    if (d < length(lightPos-p)) dif *= 0.2;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0, 3, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = rayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    float dif = getLight(p);\n    \n    d /= 6.0;\n    col = vec3(dif);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}