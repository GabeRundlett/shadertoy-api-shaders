{
    "Shader": {
        "info": {
            "date": "1495307142",
            "description": "11/100",
            "flags": 0,
            "hasliked": 0,
            "id": "lsXBR7",
            "likes": 3,
            "name": "11/100",
            "published": 3,
            "tags": [
                "sphere",
                "softshadow"
            ],
            "usePreview": 0,
            "username": "yahe",
            "viewed": 557
        },
        "renderpass": [
            {
                "code": "// Using iq's 3D template\n\n#define PI 3.14159265\n\n\n//------------------------------------------------------------------------\n// Camera\n//\n// Move the camera. In this case it's using time and the mouse position\n// to orbitate the camera around the origin of the world (0,0,0), where\n// the yellow sphere is.\n//------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3*iTime + 10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n//------------------------------------------------------------------------\n// Background \n//\n// The background color. In this case it's just a black color.\n//------------------------------------------------------------------------\nfloat noise2(in vec2 position) {\n    return fract(sin(dot(position.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Value Noise courtesy of Book of Shaders\n// https://thebookofshaders.com/11/\nfloat noise2d(vec2 uv) {\n    \n    vec2 pos = floor(uv);\n    vec2 fractional = fract(uv);\n    \n    // four corners\n    float a = noise2(pos);\t\t\t\t\t// bottom left\n    float b = noise2(pos + vec2(1., 0.));\t// bottom right\n    float c = noise2(pos + vec2(1., 1.));\t// top right\n    float d = noise2(pos + vec2(0., 1.));\t// top left\n    \n    vec2 intermix = smoothstep(0., 1., fractional);\n    \n    float value = mix(a, b, intermix.x);\n    value += (d - a) * intermix.y * (1.0 - intermix.x);\n    value += (c - b) * intermix.x * intermix.y;\n    \n    return value;\n}\n\n// Fractal noise courtesy of iq\n// https://www.shadertoy.com/view/XdXGW8\nfloat fractalNoise2d(vec2 uv) {\n    uv *= 3.0;\n    uv.x -= iTime / 5.0;\n    uv.y += sin(iTime / 5.0) * 2.0;\n    \n    mat2 rotate = mat2(1.6 - sin(iTime / 100.0) / 10.0, 1.2, -1.2, 1.6);\n    \n    float value = 0.5 * noise2d(uv);\n    uv *= rotate;\n    value += 0.25 * noise2d(uv);\n    uv *= rotate;\n    value += 0.125 * noise2d(uv);\n    uv *= rotate;\n    value += 0.0625 * noise2d(uv);\n    \n    return value;\n}\n\nvec3 doBackground( vec2 uv )\n{\n    uv *= .8;\n    uv.x = uv.x + 1.5;\n    float noise = fractalNoise2d(uv);\n    float plasma = .8*noise*(sin(uv.x)+cos(uv.y))/.2 + .5;\n    \n    vec3 col = vec3((sin(plasma)+1.)*.1,\n                    (sin(plasma+.2)+1.)*.1,\n                    (sin(plasma+.2)+1.)*.1);\n\n    return mix(col, vec3(0.25, 0.24, .45), 0.1);\n}\n\nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\n\nfloat noise( vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n    \n//------------------------------------------------------------------------\n// Modelling \n//\n// Defines the shapes (a sphere in this case) through a distance field, in\n// this case it's a sphere of radius 1.\n//------------------------------------------------------------------------\nfloat sdSphere( vec3 p )\n{\n    \n    float n = exp(noise(vec3(p * 5.))) ;\n    \n    return length(p) - (1.*( sin(iTime)/4. + 1.) + n * 0.13)*.9;\n}\n\n//------------------------------------------------------------------------\n// Material \n//\n// Defines the material (colors, shading, pattern, texturing) of the model\n// at every point based on its position and normal. In this case, it simply\n// returns a constant yellow color.\n//------------------------------------------------------------------------\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n    return vec3(0.078,0.1,0.3)+vec3(0.1 * (sin(iTime)+1.),0.03,0.05);\n}\n\nfloat gaussianSpecular(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n  vec3 H = normalize(lightDirection + viewDirection);\n  float theta = acos(dot(H, surfaceNormal));\n  float w = theta / shininess;\n  return exp(-w*w);\n}\n\nfloat orenNayarDiffuse(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float roughness,\n  float albedo) {\n  \n  float LdotV = dot(lightDirection, viewDirection);\n  float NdotL = dot(lightDirection, surfaceNormal);\n  float NdotV = dot(surfaceNormal, viewDirection);\n\n  float s = LdotV - NdotL * NdotV;\n  float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));\n\n  float sigma2 = roughness * roughness;\n  float A = 1.0 + sigma2 * (albedo / (sigma2 + 0.13) + 0.5 / (sigma2 + 0.33));\n  float B = 0.45 * sigma2 / (sigma2 + 0.09);\n\n  return albedo * max(0.0, NdotL) * (A + B * s / t) / PI;\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    //vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    //vec3  lig = normalize(vec3(1.0,0.7,0.9));\n    //float dif = max(dot(nor,lig),0.0);\n    //float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    //lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    //lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    //vec3 col = mal*lin;\n\n    \n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  view = normalize(-rd);\n    vec3  lig1 = normalize(vec3(1.0,0.7,0.9));\n    vec3  lig2 = normalize(vec3(1.0,0.9,0.9)*-1.);\n    vec3  lig3 = normalize(vec3(1.4,2.4,1.3));\n    \n    float spc1 = gaussianSpecular(lig1, view, nor, 0.95)*0.5;\n    float dif1 = max(0., orenNayarDiffuse(lig1, view, nor, -20.1, 1.0));\n    float sha1 = 0.0; if( dif1>0.02 ) sha1=calcSoftshadow( pos+0.01*nor, lig1 );\n    vec3  col1 = vec3(1.,4.2,2.);\n    lin += col1*spc1+dif1*col1*sha1;\n    \n    float spc2 = gaussianSpecular(lig2, view, nor, 0.95);\n    float dif2 = max(0., orenNayarDiffuse(lig2, view, nor, -20.1, 1.0));\n    float sha2 = 0.0; if( dif2>0.02 ) sha2=calcSoftshadow( pos+0.01*nor, lig2 );\n    vec3  col2 = vec3(2.0,1.05,1.55);\n    lin += col2*spc2+dif2*col2*sha2;\n\n    float spc3 = gaussianSpecular(lig3, view, nor, 0.95);\n    float dif3 = max(0., orenNayarDiffuse(lig3, view, nor, -20.1, 1.0));\n    float sha3 = 0.0; if( dif3>0.02 ) sha3=calcSoftshadow( pos+0.01*nor, lig3 );\n    vec3  col3 = vec3(0.50,1.05,2.15);\n    lin += col3*spc3+dif3*col3*sha3;\n    \n    // ambient light\n    //-----------------------------\n    lin += vec3(0.05);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = sdSphere( ro+rd*t );\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*sdSphere( pos + v1*eps ) + \n\t\t\t\t\t  v2*sdSphere( pos + v2*eps ) + \n\t\t\t\t\t  v3*sdSphere( pos + v3*eps ) + \n\t\t\t\t\t  v4*sdSphere( pos + v4*eps ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = sdSphere(ro + rd*t);\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground(p);\n\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec3 mal = doMaterial( pos, nor );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1. );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}