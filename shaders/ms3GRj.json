{
    "Shader": {
        "info": {
            "date": "1677514270",
            "description": "bla",
            "flags": 0,
            "hasliked": 0,
            "id": "ms3GRj",
            "likes": 14,
            "name": "Github senior stuff",
            "published": 3,
            "tags": [
                "github"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n\n// Thanks IQ :)\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n// Thanks IQ :)\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s,c);}\nfloat map(vec3 p)\n{\n    vec3 p2 = p;\n    p2.yz *= r2d(p.x+iTime);\n    float bend = sdBox(p2.yz, vec2(.5));\n    p.xy *= r2d(iTime);\n    p.xz *= r2d(iTime);\n    float wire = sdBoxFrame(p, vec3(1.), .05);\n    return min(wire, bend);\n}\nfloat rdr(vec2 uv)\n{\n    vec3 ro = vec3(0.,0.,-5.);\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    float col = 0.;\n    vec3 p = ro;\n    for (float i = 0.; i < 128.; ++i)\n    {\n        float d = map(p);\n        if (d < 0.01)\n        {\n            col = pow(1.-sat(distance(p, ro)/15.),.8);\n            break;\n        }\n        p+=rd*d;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    vec3 col = vec3(1.);\n    vec2 rep = vec2(.015);\n    vec2 id = floor((uv+rep*.5)/rep);\n    uv = mod(uv+rep*.5,rep)-rep*.5;\n    vec3[5] cols = vec3[5](\n        vec3(0.93f, 0.93f, 0.93f),\n        vec3(0.84f, 0.9f, 0.46f),\n        vec3(0.55f, 0.78f, 0.33f),\n        vec3(0.27f, 0.64f, 0.16f),\n        vec3(0.13f, 0.41f, 0.07f)\n    );\n    vec2 sz = rep*.35;\n    float shape = sdBox(uv, sz);\n    float val = rdr(id*rep);\n    col = mix(col, cols[int(val*4.)], 1.-sat(shape*iResolution.x));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}