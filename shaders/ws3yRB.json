{
    "Shader": {
        "info": {
            "date": "1601146082",
            "description": "basic-face-head -v4",
            "flags": 0,
            "hasliked": 0,
            "id": "ws3yRB",
            "likes": 3,
            "name": "basic-face-head -v4",
            "published": 3,
            "tags": [
                "basicfaceheadv4"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 255
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\n\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n//----------oPeraciones de Repeticion\nvec2 opRep2D( in vec2 p, in vec2 c )\n\t{ vec2 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\nvec3 opRep3D( in vec3 p, in vec3 c )\n\t{ vec3 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\nvec3  opRep(vec3 p, vec3 r)\n   { return mod(p,r)-0.5*r; }\n///------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n//--------------------------------\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdCapsule(in vec3 p, in vec3 a, in vec3 b, in float r0, in float r1 )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0., 1.);\n    return length( pa - ba*h ) - mix(r0,r1,h);\n}\n\nfloat NarizB(vec3 p,float pDistCabeza )\n{\n    \n    float posNarizY=3.5;\n    //frente linea\n   \tvec3 aA=vec3(0.0,posNarizY,0.8); // / inclinado mas \n    vec3 bA=vec3(0.0,0.0,-0.1); // / inclinado menos\n    float r0A=0.3;  //diametro sup\n    float r1A=0.5;  //diametro inferior de cilindro\n    \n    \n    vec3 aB=vec3(0.0,posNarizY,0.8);\n    vec3 bB=vec3(0.0,0.0,-0.2); \n    float r0B=0.3;\n    float r1B=0.2;\n    \n    ///-----------------------------------\n    \n    vec3 aDer=vec3(0.0,2.5,0.5); // / inclinado mas \n    vec3 bDer=vec3(0.5,0.0,0.2); // / inclinado menos\n    float r0Der=0.3;  //diametro sup\n    float r1Der=0.4;  //diametro inferior de cilindro\n    \n    \n    vec3 aIzq= vec3(0.0,2.5,0.5);\n    vec3 bIzq=vec3(-0.5,0.0,0.2); \n    float r0Izq=0.3;\n    float r1Izq=0.4;\n    \n    \n    \n    // linea frontal\n    float sdca1= sdCapsule( p-vec3(0.0,0.5,-4.2), aA, bA, r0A, r1A );\n    float sdca2= sdCapsule( p-vec3(0.0,0.5,-4.2), aB, bB, r0B, r1B );\n    \n    // linea inclinadas /\n    float sdcaDer= sdCapsule( p-vec3(0.0,0.5,-4.2), aDer, bDer, r0Der, r1Der );\n    float sdcaIzq= sdCapsule( p-vec3(0.0,0.5,-4.2), aIzq, bIzq, r0Izq, r1Izq );\n    \n    float sdsp1= sdSphere(p- vec3(0.5,0.45,-4.0), 0.35 );\n    float sdsp2= sdSphere(p-vec3(-0.5,0.45,-4.0), 0.35 );\n\t\n    float k=0.12;\n    float sdU= smin( sdca1, sdca2, k );  //unir 2 lobulos\n    sdU= smin( sdU, sdcaDer, k );  //unir capsulas inclinadas\n    sdU= smin( sdU, sdcaIzq, k );  //unir capsulas inclinadas\n    \n    \n    sdU= smin( sdU, sdsp1, k );\n    sdU= smin( sdU, sdsp2, k );\n    \n    return sdU;\n    \n}\n\nvec2 HacerOjoyCorneaII(vec3 p)\n{   \n    float la=0.5;\n    float lb=0.8;\n    float h=2.0;\n    float ra=0.45;\n   \n    vec2 res=vec2(9999.0,-1.0);\n    \n     \n    float OjoSeparacion=2.1;\n    float OjoIzq= sdEllipsoid(p- vec3(OjoSeparacion,1.5,-5.0), vec3(1.8,0.8,1.8));\n    float OjoDer= sdEllipsoid(p-vec3(-OjoSeparacion,1.5,-5.0), vec3(1.8,0.8,1.8));\n    \n    float IrisSeparacion=2.5;\n    float moverIris=0.0;//0.5*sin(iTime);\n    float IrisIzq= sdEllipsoid(p- vec3(IrisSeparacion+moverIris,1.5,-6.5), vec3(0.5,0.5,0.5));\n    float IrisDer= sdEllipsoid(p-vec3(-IrisSeparacion+moverIris,1.5,-6.5), vec3(0.5,0.5,0.5));\n    \n    float  sU= unionSDF(OjoIzq, OjoDer);\n\n    //restar Iris hoyo\n\tsU= differenceSDF(sU, IrisIzq);\n    sU= differenceSDF(sU, IrisDer);\n    //sumar Iris hoyo\n    \n    float InterOjoIrisIzq=intersectSDF(OjoIzq,IrisIzq);\n    float InterOjoIrisDer=intersectSDF(OjoDer,IrisDer);\n    \n    res=opU(res, vec2(sU,1.0));\n    \n    res=opU(res, vec2(InterOjoIrisIzq,0.0));\n    res=opU(res, vec2(InterOjoIrisDer,0.0));\n    \n    return res;\n  \n}   \n\nfloat Labios(vec3 p,float pDistCabeza )\n{\n    //labio superior\n   \tvec3 aA1=vec3(1.0,1.0,0.1);\n    vec3 bA1=vec3(2.0,1.1,0.0); \n    float r0A1=0.1;\n    float r1A1=0.3;\n    \n    vec3 aB1=vec3(-1.0,1.0,0.1);\n    vec3 bB1=vec3(-2.0,1.1,0.0); \n    float r0B1=0.1;\n    float r1B1=0.3;\n    \n    \n    //labio inferior\n   \tvec3 aA2=vec3(1.0,1.1,0.1);\n    vec3 bA2=vec3(2.0,1.0,0.0); \n    float r0A2=0.1;\n    float r1A2=0.3;\n    \n    vec3 aB2=vec3(-1.0,1.1,0.1);\n    vec3 bB2=vec3(-2.0,1.0,0.0); \n    float r0B2=0.1;\n    float r1B2=0.3;\n    \n    \n    ///superior labio\n    float sdca1A= sdCapsule( p-vec3(-2.2,0.0,0.0), aA1, bA1, r0A1, r1A1 );\n    float sdca2A= sdCapsule( p-vec3(2.2,0.0,0.0), aB1, bB1, r0B1, r1B1 );\n   ///inferior labio\n\tfloat sdca1B= sdCapsule( p-vec3(-2.2,-0.2,0.0), aA2, bA2, r0A2, r1A2 );\n    float sdca2B= sdCapsule( p- vec3(2.2,-0.2,0.0), aB2, bB2, r0B2, r1B2 );\n    \n    \n    float k=0.12;\n    float sdU1= smin( sdca1A, sdca2A, k );  //unir labios\n    float sdU2= smin( sdca1B, sdca2B, k );\n    \n\tfloat sUTdo= unionSDF(sdU1, sdU2);\n    \n    return sUTdo;\n    \n}\n//------------------------------------\nfloat pelo( vec3 p)\n{\n    float  spelo= sdCylinderXZ(p-vec3(0.0,0.0,0.0), vec2(8.0,1.5) );\n    return spelo+cos(p.z*0.3)*cos((p.x/0.2*p.z*0.35))*p.y*0.12;\n    \n}\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp;\n    res = vec3(9999.0, -1.0,-1.0);\n    \n\t\n    p.y=p.y-10.0;\n\t\n    float  sdcabeza= sdCylinderXZ(p-vec3(0.0,0.0,0.0), vec2(7.0,7.0) );\n\tfloat  sdcabezaFrente= sdCylinderXZ(p-vec3(0.0,5.0,-1.5), vec2(6.0,2.0) );\n    // Unir cabeza y frente\n    \n\n    sdcabeza= smin( sdcabeza, sdcabezaFrente, 0.4 );\n    \n    \n    vec3 pr1= rotate_z(p-vec3(0.0,0.0-3.0,0.0), radians(45.0));\n    pr1= rotate_x(pr1-vec3(0.0,0.0,0.0), radians(15.0));\n    \n    vec3 pr2= rotate_z(p-vec3(-7.0,-7.0-3.0,0.0), radians(45.0+90.0));\n    pr2= rotate_x(pr2-vec3(0.0,0.0,0.0), radians(180.0-15.0));\n    \n    vec3 pr3= rotate_x(p-vec3(0.0,0.0-3.0,0.0), radians(20.0));\n    \n    float sdb1= sdBox(pr1- vec3(5.0,0.0,1.0), vec3(3.0,8.0,8.0) );\n    float sdb2= sdBox(pr2-vec3(-5.0,0.0,1.0), vec3(3.0,8.0,8.0) );\n    float sdb3= sdBox(pr3-vec3(0.0,-1.5,0.0), vec3(10.0,4.5,10.0) );\n    \n    sdcabeza=differenceSDF(sdcabeza, sdb1);\n    sdcabeza=differenceSDF(sdcabeza, sdb2);\n    sdcabeza=differenceSDF(sdcabeza, sdb3);\n    sdcabeza=smin(sdcabeza, sdcabeza,0.4);\n    \n    \n    \n    float HoyoSeparacion=2.2;\n    float HoyoOjoIzq= sdEllipsoid(p- vec3(HoyoSeparacion,1.5,-5.5), vec3(2.0,1.0,2.0));\n    float HoyoOjoDer= sdEllipsoid(p-vec3(-HoyoSeparacion,1.5,-5.5), vec3(2.0,1.0,2.0));\n    \n    //restar hoyos de Cabeza\n\t sdcabeza=differenceSDF(sdcabeza, HoyoOjoIzq);\n     sdcabeza=differenceSDF(sdcabeza, HoyoOjoDer);\n    \n   \n    float slabios= Labios( p-vec3(0.0,-2.5,-7.3), sdcabeza );\n    res =opU3(res, vec3(slabios,2,-1));\n    \n    vec2 rOjo= HacerOjoyCorneaII(p);\n   \n    float sNariz= NarizB(p-vec3(0.0,-0.5,-3.5),sdcabeza );\n\t\n    \n    //UNir cabeza con nariz\n    sdcabeza= smin( sdcabeza, sNariz, 0.4 );\n    res =opU3(res, vec3(sdcabeza,16.0,MATERIAL_NO));   \n   \n    \n    float spelo= pelo( p- vec3(0.0,6.0,0.0));\n    spelo=smin(spelo, spelo,0.6);\n    \n        \n    res =opU3(res, vec3(spelo,32.0,MATERIAL_NO));   \n        \n    res =opU3(res, vec3(rOjo.x,rOjo.y,MATERIAL_NO));   \n    \n    float sCuello=sdCylinderXZ(p- vec3(0.0,-2.0,0.0), vec2(3.0,3.5));\n    float sbCuerpo= sdBox(p- vec3(0.0,-12.0,0.0), vec3(10.0,8.0,2.7) );\n    \n    \n    res =opU3(res, vec3(sbCuerpo,10.0,MATERIAL_NO));   \n    res =opU3(res, vec3(sCuello,16.0,MATERIAL_NO));   \n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    return diffuse + specular;\n}\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        marchCount++;\n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n//-------------------------------------------\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n        //vec3 psh= p_shadingv3(p,  nor,  ro,  rd,  plight_pos,   colobj );\n    \t//return result* psh;\n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n\n    \n    return colobj;\n}\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\tmObj.blnShadow=false;\n        \n \tlight_pos1= vec3(10.0, 6.0, 10.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n    \n    \n    \n     ///--------------- por spalmer rotacion orbital\n    ///---------------\n    vec2 R = iResolution.xy;\n    vec2 M = iMouse.xy;\n     M.y = M.y+1.0;\n    vec2 q = StoQ(   fragCoord, R);\n    vec2 m = StoQ(M.xy, R);\n    if (length(M.xy) <= 1.0)\n  \n        m = vec2(.2 + .1*iTime,-.015); // unattended, mouse in bottom left corner?\n    \n    \n    vec3 object_pos = vec3(0., radius, 0.);\n        \n    vec3 camera_dir = OrbitCamera(m);\n    vec3 camera_pos = object_pos - orbit_scale * radius * camera_dir; // LookAt\n    \n    \n\n    camera_pos.y = max(camera_pos.y, 1e-2); // do not go beneath ground\n    camera_dir = normalize(object_pos - camera_pos); // redo LookAt after clamp\n\n    \n    mat3 cam = CameraMatrix(camera_dir);\n    const float hfovy = PI/6.;\n    vec3 vd = normalize(vec3(q, 1./sin(hfovy)));\n    vec3 ro = camera_pos;\n    vec3 rd = normalize(cam * vd); // view ray\n    //-------------------\n  \n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n     \n\n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nfloat saturate(float f)\n{ return clamp(f,0.0,1.0);}\n\n\n///--------------------------------------------\n///----------Orbit Camera\n///---------https://www.shadertoy.com/view/WlVGD1\n///----------Creditos de : spalmer en 2020-01-12\n///--------------------------------------------INICIO\nconst float orbit_scale = 4.0; // of radius of object\nconst float radius = 8.0; // of object resting on ground to examine\n\nvec2 StoQ(vec2 s, vec2 r)\n{\n\treturn (s + s - r) / r.y; \n}\n\nmat3 CameraMatrix(vec3 camFwd)\n{\n    vec3 w = normalize(camFwd)\n       , u = normalize(cross(vec3(0., 1., 0.), w))\n       , v = normalize(cross(w, u));\n    return mat3(u, v, w);\n}\n\n\nvec3 sph2cart(vec3 a) // spherical radians theta, psi, radius -> cartesian\n{\n    float cx = cos(a.x), sx = sin(a.x)\n        , cy = cos(a.y), sy = sin(a.y);\n    return vec3(sx*cy, sy, cx*cy) * a.z;\n}\n\nvec3 OrbitCamera(vec2 angles)\n{ // angles is yaw, pitch in radians\n    angles.x *= 2.; // kludge because Shadertoys clip mouse to window\n    angles.y = clamp(angles.y, -.4, .3);\n    return sph2cart(vec3(angles * PI, 1.));\n} \n\n///--------------------------------------------FIN\n///--------------------------------------------\n\n\n\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\nfloat m;\nif (i==-2 ) {return mObj.color; }       \nif (i==0 ) {return vec3(0,0,0)/255.0; }\nif (i==1 ) {return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) {return vec3(255,0,0)/255.0; }\nif (i==3 ) {return vec3(0,255,0)/255.0; }\nif (i==4 ) {return vec3(0,0,255)/255.0; }\nif (i==5 ) {return vec3(255,255,0)/255.0; }\nif (i==6 ) {return vec3(0,255,255)/255.0; }\nif (i==7 ) {return vec3(255,0,255)/255.0; }\nif (i==8 ) {return vec3(192,192,192)/255.0; }\nif (i==9 ) {return vec3(128,128,128)/255.0; }\nif (i==10 ) {return vec3(128,0,0)/255.0; }\nif (i==11 ) {return vec3(128,128,0)/255.0; }\nif (i==12 ) {return vec3(0,128,0)/255.0; }\nif (i==13 ) {return vec3(128,0,128)/255.0; }\nif (i==14 ) {return vec3(0,128,128)/255.0; }\nif (i==15 ) {return vec3(0,0,128)/255.0; }    \nif (i==16 ) {return vec3(255, 204, 188)/255.0; }\nif (i==17 ) {return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) {return vec3(0.5, 0.5, 0.8); }\nif(i== 19 ) {return vec3(1, 0.5, 0);} \nif(i== 20 ) {return vec3(1.0, 1.0, 1.0);} \nif(i== 21 ) {return vec3(247./255., 168./255.,  184./255.);} \nif(i== 22 ) {return vec3(0, 1, 1);} \nif(i== 23 ) {return vec3(85./255., 205./255., 252./255.);} \nif(i== 24 ) {return  vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );} \nif(i== 25 ) {return vec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ); } \nif(i== 26 ){ return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ); } \nif(i== 30 ) { return vec3(0.1, 0.5, 1.0);}   \nif(i== 31 ){ return vec3(0.0, 0.6, 0.0);}\nif(i== 32 ){ return vec3(1.0,0.5,0.2);}\n\n    \n\n}\n\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}