{
    "Shader": {
        "info": {
            "date": "1504282414",
            "description": "Abstracts Curves",
            "flags": 0,
            "hasliked": 0,
            "id": "ldlcD8",
            "likes": 9,
            "name": "Abstracts Curves",
            "published": 3,
            "tags": [
                "curves",
                "abstracts"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 598
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\n// Matrix operations\nmat3 getRotXMat(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 getRotYMat(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 getRotZMat(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nvec2 path(float t)\n{\n    return vec2(2., 5.1) * 1.;\n}\n\nfloat df(vec3 p)\n{\n\tp.xy -= path(p.z);\n   \tp *= getRotZMat(p.z*0.05);\n    p = mod(p, 10.) - 5.;\n    return abs(p.y + sin(p.x)* .5) - .02;\n}\n\nvec3 nor( vec3 p, float k)\n{\n\tvec3 e = vec3( k, 0., 0. );\n\tvec3 nor = vec3(\n\t    df(p+e.xyy) - df(p-e.xyy),\n\t    df(p+e.yxy) - df(p-e.yxy),\n\t    df(p+e.yyx) - df(p-e.yyx) );\n\treturn normalize(nor);\n}\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// get density of the df at surfPoint\n// ratio between constant step and df value\nfloat SubDensity(vec3 surfPoint, float prec, float ms) \n{\n\tvec3 n;\n\tfloat s = 0.;\n    const int iter = 8;\n\tfor (int i=0;i<iter;i++)\n\t{\n\t\tn = nor(surfPoint,prec); \n\t\tsurfPoint = surfPoint - n * ms; \n\t\ts += df(surfPoint);\n\t}\n\treturn 1.-s/(ms*float(iter)); // s < 0. => inside df\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = nor(p,s);\n\treturn df(p - n * s);\n}\n\n// from shane sahders\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n )\n{\n    n = max((abs(n) - .2)*7., .001);\n    n /= (n.x + n.y + n.z );  \n\tp = (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n    return p*p;\n}\n\n// from shane sahders\n// Texture bump mapping. Four tri-planar lookups, or 12 texture lookups in total. I tried to \n// make it as concise as possible. Whether that translates to speed, or not, I couldn't say.\nvec3 doBumpMap( sampler2D tx, in vec3 p, in vec3 n, float bf)\n{\n    const vec2 e = vec2(0.001, 0);\n    // Three gradient vectors rolled into a matrix, constructed with offset greyscale texture values.    \n    mat3 m = mat3( tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n));\n    vec3 g = vec3(0.299, 0.587, 0.114)*m; // Converting to greyscale.\n    g = (g - dot(tex3D(tx,  p , n), vec3(0.299, 0.587, 0.114)) )/e.x; g -= n*dot(n, g);\n    return normalize( n + g*bf ); // Bumped normal. \"bf\" - bump factor.\n}\n\nvec4 shade(vec3 ro, vec3 rd, float d, vec3 lp)\n{\n\tvec3 p = ro + rd * d;\n\tfloat sb = SubDensity(p, 0.001, 0.1);\n\tvec3 bb = blackbody(100.*sb+100.);\n\tvec3 ld = normalize(lp-p);\n\tvec3 n = nor(p, .01);\n\tn = doBumpMap(iChannel0, -p*0.5, n, 0.015);\t\n\tvec3 refl = reflect(rd,n);\n\tfloat amb = 0.08;\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 );\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 16. );\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),25.);\n\tfloat sss = 1. - SubDensity(p*0.1, 5.) * 0.5; \n\treturn vec4(\n        (diff + fre + bb.x * sss) * amb + diff * 0.5, \n        (diff + fre + bb * sb + sss * 0.3) * amb + spe * 0.6 - diff * sss * 0.05\t\n    );\n}\n\nvec3 cam(vec2 g, vec2 si, vec3 ro, vec3 cv)\n{\n\tvec2 uv = (g+g-si)/si.y;\n\tvec3 cu = normalize(vec3(0,1,0) * getRotZMat(ro.z*-0.03));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y= cross(z,x);\n  \treturn normalize(z + uv.x*x + uv.y*y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 f = vec4(0);\n    \n    vec2 g = fragCoord.xy;\n    vec2 si = iResolution.xy;\n\t\n    float time = iTime * 8.;\n    \n    vec3 cu = vec3(0,1,0);\n  \tvec3 cv = vec3(path(time + .1),time + .1);\n    vec3 ro = vec3(path(time),time);\n    ro *= getRotZMat(ro.z*0.06);\n\tcv *= getRotZMat(ro.z*0.06);\n\t\n\tvec3 lp = vec3(path(ro.z + 7.),ro.z + 7.);\n    vec3 rd = cam(g, si, ro, cv);\n\n    float s = 1., d = 1.;\n    for(int i=0;i<250;i++)\n    {      \n        if (log(d*d/s/1e6)>0.) break;\n        d += s = df(ro+rd*d) * .1;\n    }\n\t\n    f = shade(ro, rd, d, lp);\n\tf = f + f.x*0.3;\n\tf = mix( f, vec4(0.8), 1.0-exp( -0.001*d*d ) );\n\tfragColor = sqrt(f*f*f*2.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}