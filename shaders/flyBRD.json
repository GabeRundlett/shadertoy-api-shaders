{
    "Shader": {
        "info": {
            "date": "1664128299",
            "description": "shader bike track machine",
            "flags": 0,
            "hasliked": 0,
            "id": "flyBRD",
            "likes": 30,
            "name": "shader bike track machine",
            "published": 3,
            "tags": [
                "bike",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 2805
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define SPEED 200.\n#define ZERO (min(iFrame,0))\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\nfloat gear(vec2 p){\n    p.x+=0.2;\n    vec2 prevP = p;\n    p*=Rot(radians(90.));\n    float h = 0.4;\n    float d = abs(sdUnevenCapsule(p-vec2(0.0,-h*0.5),0.05,0.1,h))-0.003;\n\n    p = prevP;\n    p.x -=0.2;\n    float d2 = length(p)-0.075;\n    d = min(d,d2);\n    \n    p*=Rot(radians(iTime*SPEED));\n    p = DF(p,6.0);\n    p -= vec2(0.065);\n    d2 = Tri(p*Rot(radians(45.0)),vec2(0.01),radians(45.));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x +=0.2;\n    d2 = length(p)-0.028;\n    d = min(d,d2);\n    \n    p*=Rot(radians(iTime*SPEED));\n    p = DF(p,3.0);\n    p -= vec2(0.03);\n    d2 = Tri(p*Rot(radians(45.0)),vec2(0.01),radians(45.));\n    d = min(d,d2);\n    \n    return d;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCappedCylinderX( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.yz),p.x)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCappedCylinderZ( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n    vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n    return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\nfloat frontFolk(vec3 p){\n    vec3 prevP = p;\n    p.xz*=Rot(radians(90.));\n    p.yz*=Rot(radians(5.));\n    float d = sdLink(p,0.2,0.04,0.01);\n    d = max(-p.y-0.15,d);\n    float d2 = sdCappedCylinder(p-vec3(0,0.3,0),0.01,0.062);\n    d = min(d,d2);\n    \n    p = prevP;\n    \n    d2 = sdCappedCylinderZ(p-vec3(0.013,-0.14,0),0.05,0.013);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat frame(vec3 p){\n    vec3 prevP = p;\n    p.xy*=Rot(radians(45.));\n    float d = sdCappedCylinder(p-vec3(-0.04,0.23,0.),0.01,0.33);\n    p = prevP;\n    \n    p.xy*=Rot(radians(-10.));\n    float d2 = sdCappedCylinder(p-vec3(-0.08,0.22,0.),0.01,0.25);\n    d = min(d,d2);\n    p = prevP;\n    \n    p.xy*=Rot(radians(-7.));\n    d2 = sdCappedCylinderX(p-vec3(0.165,0.41,0.),0.01,0.26);\n    d = min(d,d2);\n    p = prevP;\n    \n    p.z = abs(p.z);\n    p.xz*=Rot(radians(7.5));\n    d2 = sdCappedCylinderX(p-vec3(-0.25,0.0,-0.005),0.01,0.235);\n    d = min(d,d2);\n    p = prevP;\n    \n    p.xz*=Rot(radians(90.));\n    p.yz*=Rot(radians(-40.));\n    p-=vec3(0.0,-0.16,-0.37);\n    d2 = sdLink(p,0.2,0.06,0.01);\n    d2 = max(-p.y-0.15,d2);\n    d = min(d,d2);\n    \n    \n    d2 = sdCappedCylinder(p-vec3(0,0.31,0),0.01,0.055);\n    d = min(d,d2);    \n    \n    p = prevP;\n    d2 = sdCappedCylinderZ(p-vec3(-0.48,0.,0),0.07,0.015);\n    d = min(d,d2);    \n    \n    return d;\n}\n\nfloat tyre(vec3 p, float startDeg){\n    p.xy*=Rot(radians(iTime*(SPEED+100.)+startDeg));\n    vec3 prevP = p;\n    \n    float size = 0.28;\n    \n    float d = sdCappedCylinderZ(p,0.005,size);\n    \n    p.y=abs(p.y);\n    float mask = abs(sdCappedCylinderZ(p,0.1,0.17))-0.03;\n    mask = max(-p.y+0.06,mask);\n    d = max(-mask,d);\n    \n    p = prevP;\n    p.yz*=Rot(radians(90.));\n    float d2 = sdTorus(p,vec2(size,0.01));\n    d = min(d,d2);\n    return d;\n}\n\nfloat sheet(vec3 p){\n    vec3 prevP = p;\n    p.xy*=Rot(radians(-7.));\n    float d = sdBox(p,vec3(0.07,0.001,0.01))-0.02;\n    return d;\n}\n\nfloat handleBar(vec3 p){\n    vec3 prevP = p;\n    p.xy*=Rot(radians(-7.));\n    float d = sdBox(p,vec3(0.04,0.02,0.02));\n    \n    p.z = abs(p.z);\n    p.z-=0.03;\n    float d2 = sdCappedCylinderZ(p-vec3(0.02,0.,0),0.03,0.013);\n    d = min(d,d2);\n    p.yz*=Rot(radians(12.));\n    d2 = sdCappedCylinderZ(p-vec3(0.02,-0.005,0.05),0.03,0.013);\n    d = smin(d,d2,0.008);\n    p.yz*=Rot(radians(-12.));\n    d2 = sdCappedCylinderZ(p-vec3(0.02,0.012,0.11),0.04,0.013);\n    d = smin(d,d2,0.008);   \n    \n    return d;\n}\n\nfloat gearAndPedal(vec3 p){\n    vec3 prevP = p;\n    \n    p.z+=0.04;\n    float d = gear(p.xy);\n    d = max((abs(p.z)-0.01),d);\n    \n    p = prevP;\n    float d2 = sdCappedCylinderZ(p,0.04,0.05);\n    d = min(d,d2);\n    \n    p.xy*=Rot(radians(iTime*SPEED));\n    vec3 pos = (p-vec3(-0.07,0.0,-0.06));\n    d2 = sdBox(pos,vec3(0.07,0.01,0.01));\n    d = min(d,d2);\n    \n    p = prevP;\n    float dist = 0.13;\n    float a = radians(iTime*SPEED);\n    float x = dist*cos(a)+p.x;\n    float y = dist*sin(a)-p.y;\n    pos.x = x;\n    pos.y = y;\n    pos.z = p.z+0.1;\n    d2 =  sdBox(pos,vec3(0.04,0.01,0.03));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.xy*=Rot(radians(iTime*SPEED+180.));\n    pos = (p-vec3(-0.07,0.0,0.05));\n    d2 = sdBox(pos,vec3(0.07,0.01,0.01));\n    d = min(d,d2);\n    \n    p = prevP;\n    dist = 0.13;\n    a = radians(iTime*SPEED+180.);\n    x = dist*cos(a)+p.x;\n    y = dist*sin(a)-p.y;\n    pos.x = x;\n    pos.y = y;\n    pos.z = p.z-0.09;\n    d2 =  sdBox(pos,vec3(0.04,0.01,0.03));\n    d = min(d,d2);\n    \n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    float d = gearAndPedal(p-vec3(-0.08,-0.15,0));\n    \n    float d2 = frontFolk(p-vec3(0.4,0.0,0));\n    d = min(d,d2);\n\n    d2 = tyre(p-vec3(0.41,-0.15,0),45.);\n    d = min(d,d2);\n    \n    d2 = tyre(p-vec3(-0.5,-0.15,0),60.);\n    d = min(d,d2);\n    \n    d2 = frame(p-vec3(0.0,-0.15,0.));\n    d = min(d,d2);\n    \n    d2 = sheet(p-vec3(-0.16,0.32,0.));\n    d = min(d,d2);\n    \n    d2 = handleBar(p-vec3(0.39,0.37,0.));\n    d = min(d,d2);\n    \n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    col = diffuseMaterial(n,rd,p,vec3(1.8));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.35);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.yz *= Rot(radians(-5.0));\n        ro.xz *= Rot(radians(sin(iTime*0.3)*60.0));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}