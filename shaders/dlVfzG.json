{
    "Shader": {
        "info": {
            "date": "1702238581",
            "description": "An auto-VJ of a rgb-shifted & morphing dot matrix displaying characters. Reactive to sound.\n\n- Use with music in iChannel0 -",
            "flags": 64,
            "hasliked": 0,
            "id": "dlVfzG",
            "likes": 12,
            "name": "Dot Music",
            "published": 3,
            "tags": [
                "2d",
                "music",
                "vj",
                "dotmatrix"
            ],
            "usePreview": 1,
            "username": "QuantumSuper",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "// Dot Music v0.32.231210 by QuantumSuper\n// auto-vj of a rgb-shifted & morphing dot matrix reactive to sound & displaying characters\n// \n// - use with music in iChannel0 -\n\n#define PI 3.14159265359 \n#define aTime 150./60.*iTime\nvec4 fft, ffts; //compressed frequency amplitudes\nfloat warp; //screen warp factor\nfloat sc; //max scale factor\n\nvoid compressFft(){ //v1.2, compress sound in iChannel0 to simplified amplitude estimations by frequency-range\n    fft = vec4(0), ffts = vec4(0);\n\n\t// Sound (assume sound texture with 44.1kHz in 512 texels, cf. https://www.shadertoy.com/view/Xds3Rr)\n    for (int n=0;n<3;n++) fft.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //bass, 0-517Hz, reduced to 0-258Hz\n    for (int n=6;n<8;n++) ffts.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech I, 517-689Hz\n    for (int n=8;n<14;n+=2) ffts.y  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech II, 689-1206Hz\n    for (int n=14;n<24;n+=4) ffts.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech III, 1206-2067Hz\n    for (int n=24;n<95;n+=10) fft.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //presence, 2067-8183Hz, tenth sample\n    for (int n=95;n<512;n+=100) fft.w  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //brilliance, 8183-44100Hz, tenth2 sample\n    fft.y = dot(ffts.xyz,vec3(1)); //speech I-III, 517-2067Hz\n    ffts.w = dot(fft.xyzw,vec4(1)); //overall loudness\n    fft /= vec4(3,8,8,5); ffts /= vec4(2,3,3,23); //normalize\n\t\n\t//for (int n=0;n++<4;) fft[n] *= 1. + .3*pow(fft[n],5.); fft = clamp(fft,.0,1.); //limiter? workaround attempt for VirtualDJ\n}\n\nvec3 getCol(float id){ //v0.92, color definitions, for triplets\n    vec3 setCol = vec3(0);\n    id = mod(id,18.);\n         if (id< 1.) setCol = vec3(244,  0,204); //vw2 pink\n    else if (id< 2.) setCol = vec3(  0,250,253); //vw2 light blue\n    else if (id< 3.) setCol = vec3( 30, 29,215); //vw2 blue\n    else if (id< 4.) setCol = vec3(252,157,  0); //miami orange\n    else if (id< 5.) setCol = vec3( 26,246,138); //miami green\n    else if (id< 6.) setCol = vec3(131, 58,187); //nordic violet\n    else if (id< 7.) setCol = vec3(231, 15, 20); //arena red\n    else if (id< 8.) setCol = vec3( 35, 87, 97); //arena dark blue\n    else if (id< 9.) setCol = vec3(103,211,225); //arena blue\n    else if (id<10.) setCol = vec3(241,204,  9); //bambus2 yellow\n    else if (id<11.) setCol = vec3( 22,242,124); //bambus2 green\n    else if (id<12.) setCol = vec3( 30,248,236); //magic turquoise\n    else if (id<13.) setCol = vec3(123, 23,250); //cneon pink\n    else if (id<14.) setCol = vec3( 23,123,250); //cneon blue\n    else if (id<15.) setCol = vec3( 73, 73,250); //cneon white\n\telse if (id<16.) setCol = vec3(173,  0, 27); //matrix red\n    else if (id<17.) setCol = vec3( 28,142, 77); //matrix green\n    else if (id<18.) setCol = vec3( 66,120, 91); //matrix green 2\n    return setCol/256.;\n}\n\nfloat char(float c, vec2 p) { //get char from texture, source: https://www.shadertoy.com/view/MtySzd\n    return texture( iChannel1, clamp(p,0.,1.)/16. + fract(floor(vec2( c, 15.999-float(c)/16.))/16.)).x;\n}\n\nmat2 rotM(float r){float c = cos(r), s = sin(r); return mat2(c,s,-s,c);} //2D rotation matrix\n\nvec3 tmUnreal( vec3 c){return c / (c + .155) * 1.019;} //tone map, source: https://www.shadertoy.com/view/llXyWr\n\nfloat aaStep( float fun){return smoothstep( max(fwidth(fun),.2*(1.-fft.x)), .0, fun);} //simple conditional antialiasing\n\nfloat hash21(vec2 p){ //pseudorandom generator, cf. The Art of Code on youtu.be/rvDo9LvfoVE\n    p = fract(p*vec2(13.81, 741.76));\n    p += dot(p, p+42.23);\n    return fract(p.x*p.y);\n}\n\nfloat drawCirc( vec2 p, float s){ //draw circles of dot matrix\n    float aspect = length(iResolution.xy)/max(iResolution.x,iResolution.y); //aspect ratio corrector, 1..sqrt(2) for line..square\n    p *= rotM(sin(aTime/64.*PI)*.05); //rotation effect\n    float r = texelFetch( iChannel0, ivec2(512./aspect/cos(aspect*warp)*length(floor(p*s+.5)/s),0), 0 ).x; //grab audio amplitude\n    return aaStep( length(fract(p*s-.5)-.5)-.45*r) //circle    \n        //* (1.+9.*fft.y*step(fft.x,.92+fract(float(iFrame)*.5))*float( abs(floor(p.x*s+.5)*.5+floor(floor(p.y*s+.5)*sc)) ==  floor(fract(aTime/256.)*sc*sc*min(iResolution.x,iResolution.y)/max(iResolution.x,iResolution.y)) )) //running lights\n        * (1.+9.*fft.y*step(fft.x,.92)*float( abs(floor(p.x*s+.5)*.5+floor(floor(p.y*s+.5)*sc)) ==  floor(fract(aTime/256.)*sc*sc*min(iResolution.x,iResolution.y)/max(iResolution.x,iResolution.y)) )) //running lights\n        * step( .02, fract(p.x*s-.5)*fract(p.y*s-.5)*fract(-p.x*s-.5)*fract(-p.y*s-.5)); //ugly singularity fix\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    // General initialization\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); //long edge -1 to 1, square aspect ratio\n    vec2 v = vec2(1,0); //utility\n    compressFft(); //initializes fft, ffts\n        \n    // Base settings\n    warp = .5*fft.w; //warp factor\n    uv *= cos(length(uv*warp)); //screen warp effect\n    sc = 35.; //max scale factor\n    float scale = (.6-.4*cos(aTime/64.*PI)) * sc;\n\n    // Draw dot matrix\n    vec3 col = vec3(0) + \n        v.xyy * drawCirc( uv, scale     ) + //r\n        v.yxy * drawCirc( uv, scale*1.01) + //g\n        v.yxy * drawCirc( uv, scale*1.02);  //b\n    \n    // Overlay characters\n    vec2 offset = vec2(.5) + mix(.0,.01-.02*hash21(fft.yz),fft.z*fft.z*2.-1.); //char pos + shake\n    scale *= .04; //char scale\n    float myString = (fract(aTime/256.)<.5)?\n        char( 77., uv*scale+offset+v*1.) + \n        char( 65., uv*scale+offset+v*.5) +\n        char( 82., uv*scale+offset+v*.0) +\n        char( 73., uv*scale+offset-v*.5) +\n        char( 65., uv*scale+offset-v*1.) : //\"MARIA\"\n        char( 65., uv*scale+offset+v*.5) +\n        char( 68., uv*scale+offset+v*.0) +\n        char( 73., uv*scale+offset-v*.4) ; //\"ADI\"  \n    float amp = (fft.x>.97)? fract(float(iFrame)*.5)*22. : 1.; //char strobo\n    col *= .05 + .95*mix( 1., amp*myString, clamp(fft.x/.92,.0,1.)); //overlay string\n\n    // Finalization\n    float colId = 3. * floor(aTime/32.); //color set id\n    col = mat3( getCol( colId+0.), getCol( colId+1.), getCol( colId+2.)) * col * (.1+.9*ffts.xyz/max(.001,max(ffts.x,max(ffts.y,ffts.z)))); //remap colors\n    col = tmUnreal( col); //tone map & gamma\n\tcol -= length(uv) * fft.z * .2; //vignette\n    fragColor = vec4(col,1.); //output\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 35536,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/garderecords/jkrs-echo-maneater-sped-up"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}