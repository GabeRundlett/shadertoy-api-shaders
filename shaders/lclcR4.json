{
    "Shader": {
        "info": {
            "date": "1723121966",
            "description": "star\n",
            "flags": 32,
            "hasliked": 0,
            "id": "lclcR4",
            "likes": 8,
            "name": "3d heiroglyphs",
            "published": 3,
            "tags": [
                "fractal",
                "rotate",
                "star"
            ],
            "usePreview": 0,
            "username": "orblivius",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "// Fork of \"star rotation\" by None. https://shadertoy.com/view/-1\n// 2024-07-13 14:23:51\n\n// Fork of \"star rotation\" by nayk. https://shadertoy.com/view/Xcsyz4\n// 2024-07-13 14:23:13\n\n\n#define BLUR_STRENGTH 34.\n#define BLUR_RANGE 30.\n\nvec4 blurr(in sampler2D sampler, in vec2 fragCoord, in vec2 resolution)\n{\nvec2 uv = fragCoord / resolution;\nfloat blurStrength = distance(uv, vec2(0.3));\nblurStrength = pow(blurStrength, BLUR_RANGE) * (resolution.x / 100.0) * BLUR_STRENGTH;\nvec4 sum = vec4(0.0);\nvec2 pixelSize = vec2(1.0) / resolution;\n\nfor (float x = -1.0; x <= 1.0; x += 1.0)\n{\n\nfor (float y = -1.0; y <= 1.0; y += 1.0)\n{\nsum += texture(sampler, uv + vec2(x, y) * pixelSize * blurStrength);\n}\n}\nreturn sum / 8.0;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor =vec4(texture(iChannel1,uv).rgb + \n            blurr(iChannel0, fragCoord, iResolution.xy).rgb, .8);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \n #define\tPI         3.14159265359\n#define THICKNESS  .4\n\nvoid mainImage(out vec4 O, vec2 C)\n{\nvec2 uv = ( C - .5*iResolution.xy ) / iResolution.y;\n\n  float snd=2.*texture(iChannel1,vec2(0.08,0.25)).r;\n \n   uv.x+=0.*cos(iTime);\n   uv.y+=0.25*sin(iTime);\n    O=vec4(0);\n    vec3 p,r=iResolution,n=vec3(-.5,-.707,.5),\n    d=normalize(vec3((C-.5*r.xy),r.y));  \n    for(float i=0.,e,g=0.; ++i<50.;\n        O.xyz+=mix(vec3(1),H(length(p)*.5+iTime*0.),.7)*.05*exp(-.13*i*i*e)\n    )\n    {\n        p=g*d;\n       \n      \n      p.x+=.25*cos(iTime);\n       p.y+=.25*sin(iTime);\n        p.z-=2.-(sin(iTime));\n         p.xz*=mat2(cos(snd+iTime), sin(snd+iTime), -sin(snd+iTime),cos(snd+iTime));\n          p.yz*=mat2(cos(snd+iTime), sin(snd+iTime), -sin(snd+iTime),cos(snd+iTime));\n        p=R(p,normalize(vec3(-2,3.,3)),-iTime*.14);\n       \n        for(int j=0;j<10;j++) {\n        \n             p.zy=abs(sin(p.zy)),\n           p.xy=abs(sin(p.xy)),\n            p-=2.*min(fract(p.x+p.z),dot(p,n))*n;\n            }\n            \n        p.z=fract(log(p.z)+iTime*2.5)-.35;\n        g+=e=+abs(min(length(p.yz),length(p.xz))-.05)+.002;\n    }\n    \n    \n    float anim = sin(iTime * 4.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O*= .2*vec4(happy_star(uv, anim) * vec3(0.25,0.15,.15)*2.1, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}