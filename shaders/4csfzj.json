{
    "Shader": {
        "info": {
            "date": "1724056826",
            "description": "Test to see what the buffers store and what happens when they are sampled and how they are executed. You can never be too sure about these things. ",
            "flags": 32,
            "hasliked": 0,
            "id": "4csfzj",
            "likes": 0,
            "name": "Buffer Rendering Order Test",
            "published": 3,
            "tags": [
                "test",
                "experiment",
                "buffer",
                "order"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 62
        },
        "renderpass": [
            {
                "code": "/*\nThis is an experiment to verify how the buffers execute and what they read. \nI stored the iFrame value (up to 255) in the buffer channels to test this, \nwhich is why it flickers periodically.\n\nThe screen is divided into 6 segments with comparisons. \n- Black means the sampled ID is smaller than the current ID.\n- Gray means they are equal.\n- White means the sampled ID is larger.\n\nRefer to the switch case in line 40 for the specific comparisons in each \nsegment.\n\nThis experiment shows that the buffers execute sequentially. First, Buffer A \nexecutes, then Buffer B, and so on until the Image. The stored buffer \ncontains the previous result, or if the buffer executed first, the current \nframe. This is in line with what I read in comments online. I assume the \nother buffers behave the same.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Calculate the frame time as a modulo of 255\n    float timeMod = mod(float(iFrame), 255.0);\n\n    // Sample Buffer A\n    vec4 bufferA = texture(iChannel0, uv) * 255.0;\n    \n    // Sample Buffer B\n    vec4 bufferB = texture(iChannel1, uv) * 255.0;\n\n    // Determine the segment\n    int segment = int(uv.x * 3.0) + int(uv.y * 2.0) * 3;\n    \n    // Use switch-case to assign colors based on the segment\n    vec4 color = vec4(0.0);\n    switch (segment) {\n        case 0: // Bottom Left\n            // Comparing Buffer A current vs Sampled Buffer A\n            color = vec4(( bufferA.y - bufferA.x) *0.5+0.5);\n            break;\n        case 1: // Bottom Middle\n            // Comparing Buffer A current vs Sampled Buffer B\n            color = vec4((bufferA.z - bufferA.x) *0.5+0.5);\n            break;\n        case 2: // Bottom Right\n            // Comparing Buffer A current vs current\n            color = vec4((timeMod - bufferA.x) *0.5+0.5);\n            break;\n        case 3: // Top Left\n            // Comparing Buffer B current vs Sampled Buffer A\n            color = vec4((bufferB.y - bufferB.x) *0.5+0.5);\n            break;\n        case 4: // Top Middle\n            // Comparing Buffer B current vs Sampled Buffer B\n            color = vec4((bufferB.z - bufferB.x) *0.5+0.5);\n            break;\n        default: // Top Right and exceptions \n            // Comparing Buffer A current vs current\n            color = vec4((timeMod - bufferB.x) *0.5+0.5);\n            break;\n    }\n\n    // Output to screen\n    fragColor = vec4(color);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// BUFFER A ______________________________________________\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Calculate the frame time as a fraction of 255\n    float timeFraction = fract(float(iFrame) / 255.0);\n    \n    // Sample Buffer A\n    float bufferA = texture(iChannel0, uv).x;\n    \n    // Sample Buffer B\n    float bufferB = texture(iChannel1, uv).x;\n    \n    // Store the time fraction in the red channel\n    fragColor = vec4(timeFraction, bufferA, bufferB, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// BUFFER B ______________________________________________\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Calculate the frame time as a fraction of 255\n    float timeFraction = fract(float(iFrame) / 255.0);\n    \n    // Sample Buffer A\n    float bufferA = texture(iChannel0, uv).x;\n    \n    // Sample Buffer B\n    float bufferB = texture(iChannel1, uv).x;\n    \n    // Store the time fraction in the red channel\n    fragColor = vec4(timeFraction, bufferA, bufferB, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}