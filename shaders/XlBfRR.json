{
    "Shader": {
        "info": {
            "date": "1514117351",
            "description": "Golden ship in a silvery shell (\"egg\" no.4)",
            "flags": 0,
            "hasliked": 0,
            "id": "XlBfRR",
            "likes": 10,
            "name": "Ship in a Shell",
            "published": 3,
            "tags": [
                "raymarch",
                "glitter",
                "ship",
                "shell",
                "sail"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 687
        },
        "renderpass": [
            {
                "code": "// \"Ship in a Shell\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrEECapsDf (vec3 p, vec3 v1, vec3 v2, float r);\nfloat PrEllips2Df (vec3 p, vec2 r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 HsvToRgb (vec3 c);\nvec3 RgbToHsv (vec3 c);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, shipConf, qHit, bDeck;\nvec2 opCs;\nfloat tCur, dstFar, opPhs, szFac, shipRot;\nint idObj;\nconst int idHull = 1, idRud = 2, idStruc = 3, idMast = 4, idSparT = 5, idSparL = 6, idSailT = 7,\n   idSailA = 8, idSailF = 9, idFlag = 10, idRig = 11, idShell = 21, idArm = 22, idHing = 23,\n   idMir = 24, idLeg = 25;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ShipDf (vec3 p)\n{\n  vec3 q, qq, w;\n  float dMin, d, fy, fz, gz, s, rRig, rSpar, yLim, zLim;\n  rRig = 0.02;\n  rSpar = 0.05;\n  p.yz = Rot2D (p.yz, -0.4 * shipConf.z);\n  p.xy = Rot2D (p.xy, 6. * shipConf.y);\n  p.y -= shipConf.x + 4.1 * szFac;\n  p /= szFac;\n  dMin = dstFar / szFac;\n  fy = 1. - 0.07 * p.y;\n  fz = 1. - 0.14 * step (1., abs (p.z));\n  zLim = abs (p.z) - 4.5;\n  q = p;\n  d = zLim;\n  q.z = mod (q.z + 1.4, 2.8) - 1.2;\n  d = max (d, PrCapsDf ((q - vec3 (0., 3.7 * (fz - 1.), 0.)).xzy, 0.1 * fy, 3.7 * fz));\n  DMINQ (idMast);\n  q = p;\n  yLim = abs (q.y - 0.2 * fz) - 3. * fz;\n  qq = q;\n  qq.y = mod (qq.y - 3.3 * (fz - 1.), 2. * fz) - fz;\n  qq.z = mod (qq.z + 1.4, 2.8) - 1.4 + 0.1 * fz;\n  d = max (max (min (d, PrCylDf (vec3 (qq - vec3 (0., 0.05 * fy * fz, 0.1 * fz - 0.23)).xzy,\n     0.15 * fy, 0.11 * fy * fz)), yLim), zLim);\n  DMINQ (idMast);\n  d = max (max (PrCapsDf (qq.yzx, 0.05, 1.23 * fy * fz), yLim), zLim);\n  DMINQ (idSparT);\n  q = p;\n  d = min (d, min (PrEECapsDf (q, vec3 (0., -3.5, 4.3), vec3 (0., -2.6, 6.7), rSpar),\n     PrEECapsDf (q, vec3 (0., -4., 4.1), vec3 (0., -2.9, 6.), rSpar)));\n  d = min (d, min (PrEECapsDf (q, vec3 (0., -1.2, -3.), vec3 (0., -0.5, -4.5), rSpar),\n     PrEECapsDf (q, vec3 (0., -2.7, -3.), vec3 (0., -2.7, -4.5), rSpar)));\n  DMINQ (idSparL);\n  q = p;\n  qq = q;\n  qq.y = mod (qq.y - 3.1 * (fz - 1.), 2. * fz) - fz;\n  qq.z = mod (qq.z + 1.4, 2.8) - 1.4 + 0.2 * (fz - abs (qq.y)) * (fz - abs (qq.y)) - 0.1 * fz;\n  d = max (max (max (PrBoxDf (qq, vec3 ((1.2 - 0.07 * q.y) * fz, fz, 0.01)),\n     min (qq.y, 1.5 * fy * fz - length (vec2 (qq.x, qq.y + 0.9 * fy * fz)))),\n     abs (q.y - 3. * (fz - 1.)) - 2.95 * fz), - PrBox2Df (qq.yz, vec2 (0.01 * fz)));\n  d = max (d, zLim);\n  DMINQ (idSailT);\n  q = p;\n  q.z -= -3.8;  q.y -= -1.75 - 0.2 * q.z;\n  d = PrBoxDf (q, vec3 (0.01, 0.9 - 0.2 * q.z, 0.6));\n  DMINQ (idSailA);\n  q = p;\n  q.yz -= vec2 (-1., 4.5);\n  w = vec3 (1., q.yz);\n  d = max (max (max (abs (q.x) - 0.01, - dot (w, vec3 (2.3, 1., -0.35))),\n     - dot (w, vec3 (0.68, -0.74, -1.))), - dot (w, vec3 (0.41, 0.4, 1.)));\n  DMINQ (idSailF);\n  q = p;\n  d = zLim;  \n  gz = (q.z - 0.5) / 5. + 0.3;\n  gz *= gz;\n  gz = 1.05 * (1. - 0.45 * gz * gz);\n  q.x = abs (q.x);\n  q.z = mod (q.z + 1.4, 2.8) - 1.4;\n  d = max (d, min (PrEECapsDf (q, vec3 (1.05 * gz, -3.25, -0.5), vec3 (1.4 * fz, -2.95, -0.05), 0.7 * rRig),\n     PrEECapsDf (vec3 (q.xy, abs (q.z + 0.2) - 0.01 * (0.3 - 2. * q.y)), vec3 (gz, -3.2, 0.),\n     vec3 (0.05, -0.9 + 2. * (fz - 1.), 0.), rRig)));\n  q = p;\n  d = min (d, PrEECapsDf (q, vec3 (0., -3., -4.45), vec3 (0., -2.7, -4.5), 0.8 * rRig));\n  d = min (min (d, min (PrEECapsDf (q, vec3 (0., 2.45, 2.65), vec3 (0., -2.7, 6.5), rRig),\n     PrEECapsDf (q, vec3 (0., 2.5, 2.65), vec3 (0., -3.2, 4.9), rRig))),\n     PrEECapsDf (q, vec3 (0., 2.6, -3.), vec3 (0., -0.5, -4.5), rRig));\n  q.x = abs (q.x);\n  d = min (d, PrEECapsDf (q, vec3 (0.65, -3.5, 3.5), vec3 (0.05, -2.7, 6.4), rRig));\n  s = step (1.8, q.y) - step (q.y, -0.2);\n  d = min (min (d, min (PrEECapsDf (q, vec3 (0.95, 0.4, 2.7) + vec3 (-0.1, 1.7, 0.) * s,\n     vec3 (0.05, 1.1, -0.15) + vec3 (0., 2., 0.) * s, rRig),\n     PrEECapsDf (q, vec3 (1.05, 1., -0.1) + vec3 (-0.1, 2., 0.) * s,\n     vec3 (0.05, 0.5, -2.95) + vec3 (0., 1.7, 0.) * s, rRig))),\n     PrEECapsDf (q, vec3 (0.95, 0.4, -2.9) + vec3 (-0.1, 1.7, 0.) * s,\n     vec3 (0.05, 0.9, -0.25) + vec3 (0., 2., 0.) * s, rRig));\n  DMINQ (idRig);\n  q = p;\n  q.yz -= vec2 (3.4, 0.18);\n  d = PrBoxDf (q, vec3 (0.01, 0.2, 0.3));\n  DMINQ (idFlag);\n  q = p;\n  d = zLim;\n  q.z = mod (q.z + 1.4, 2.8) - 1.4;\n  q.yz -= vec2 (-3.4, -0.4);\n  d = max (d, PrBoxDf (q, vec3 (0.3, 0.1, 0.5)));\n  DMINQ (idStruc);\n  q = p;\n  q.x = abs (q.x);\n  q.yz -= vec2 (-3.8, 0.5);\n  fz = q.z / 5. + 0.3;\n  fz *= fz;\n  fy = 1. - smoothstep (-1.3, -0.1, q.y);\n  gz = smoothstep (2., 5., q.z);\n  bDeck = vec3 ((1. - 0.45 * fz * fz) * (1.1 - 0.5 * fy * fy) *\n     (1. - 0.5 * smoothstep (-5., -2., q.y) * smoothstep (2., 5., q.z)),\n     0.78 - 0.8 * gz * gz - 0.2 * (1. - smoothstep (-5.2, -4., q.z)), 5. * (1. + 0. * 0.02 * q.y));\n  d = min (PrBoxDf (vec3 (q.x, q.y + bDeck.y - 0.6, q.z), bDeck),\n     max (PrBoxDf (q - vec3 (0., 0.72, -4.6), vec3 (bDeck.x, 0.12, 0.4)),\n     - PrBox2Df (vec2 (abs (q.x) - 0.4, q.y - 0.65), vec2 (0.2, 0.08))));\n  d = max (d, - PrBoxDf (vec3 (q.x, q.y - 0.58 - 0.1 * fz, q.z), vec3 (bDeck.x - 0.07, 0.3, bDeck.z - 0.1)));\n  q = p;\n  d = max (d, - max (PrBox2Df (vec2 (q.y + 3.35, mod (q.z + 0.25, 0.5) - 0.25), vec2 (0.08, 0.1)),\n     abs (q.z + 0.5) - 3.75));\n  DMINQ (idHull);\n  q = p;\n  d = PrBoxDf (q + vec3 (0., 4.4, 4.05), vec3 (0.03, 0.35, 0.5));\n  DMINQ (idRud);\n  return 0.7 * dMin * szFac;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qHitA;\n  float dMin, d, r, radH, radV, w, hWid, shUp;\n  int idObjA;\n  dMin = dstFar;\n  radH = 4.;\n  radV = 3.5;\n  w = 0.1;\n  hWid = 0.3;\n  q = p;  q.z += radH + 0.9 * hWid;\n  d = PrCapsDf (q.yzx, 0.25, 0.95);\n  DMINQ (idHing);\n  q.yz = Rot2Cs (q.yz, opCs);\n  q.y = abs (q.y);\n  q.yz = Rot2Cs (q.yz, opCs);\n  q.z -= hWid;\n  d = PrBoxDf (q, vec3 (0.95, 0.25, hWid));\n  d = max (d, - q.y);\n  DMINQ (idArm);\n  q.z -= radH + 0.9 * hWid;\n  r = radH + 0.1 * (1. - q.y / length (q)) * cos (32. * atan (q.x, q.z));\n  d = max (PrEllips2Df (q.xzy, vec2 (r, radV) + w), - PrEllips2Df (q.xzy, vec2 (r, radV) - w));\n  d = max (d, - q.y);\n  DMINQ (idShell);\n  shUp = 1.8 * opPhs;\n  q = p;  q.y -= -radV + 1.5 + shUp;\n  d = PrCylDf (q.xzy, 3., 0.1);\n  DMINQ (idMir);\n  q = p;  q.y -= -0.5 * (radV + 2. - shUp);\n  d = PrCylDf (q.xzy, 0.05, 0.5 * (radV - 2. + shUp));\n  q = p;  q.y -= - radV + 0.1;\n  d = min (d, PrCylDf (q.xzy, 0.5, 0.05));\n  DMINQ (idLeg);\n  idObjA = idObj;\n  qHitA = qHit;\n  q = p;  q.y -= 1.5 * szFac + shUp;\n  q.xz = Rot2D (q.xz, shipRot);\n  q.z += 1. * szFac;\n  d = ShipDf (q);\n  if (d < dMin) { dMin = d;  idObjA = idObj;  qHitA = qHit; }\n  idObj = idObjA;\n  qHit = qHitA;\n  return 0.9 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvoid EvalShipConf ()\n{\n  shipConf = vec3 (-4. * szFac, 0., 0.);\n}\n\nvoid ShipCol (vec3 vn, out vec4 col4, out vec2 vf)\n{\n  vec2 cg;\n  vf = vec2 (0.);\n  if (idObj == idHull) {\n    if (vn.y > 0.9 && qHit.y < -3.4 + 0.1 * step (3.2, qHit.z)) {\n      col4 = vec4 (0.5, 0.3, 0., 0.1) * (0.5 + 0.5 * SmoothBump (0.05, 0.95, 0.02, mod (8. * qHit.x, 1.)));\n    } else if (qHit.y > -4.) {\n      col4 = vec4 (0.7, 0.5, 0.1, 0.1);\n      if (abs (qHit.z - 4.) < 0.25 && abs (qHit.y + 3.55) < 0.05) col4 *= 1.2;\n      else if (qHit.z < -4. && abs (qHit.x) < 0.84 && abs (qHit.y + 3.62) < 0.125) {\n        cg = step (0.1, abs (fract (vec2 (6. * qHit.x, 8. * (qHit.y + 3.62)) + 0.5) - 0.5));\n        if (cg.x * cg.y == 1.) col4 = vec4 (0.8, 0.8, 0.2, -1.);\n        else col4 *= 0.8;\n      } else {\n        col4 *= 0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (8. * qHit.y, 1.));\n        vf = vec2 (64., 0.3);\n      } \n    } else if (qHit.y > -4.05) {\n      col4 = vec4 (0.8, 0.8, 0.8, 0.1);\n    } else {\n      col4 = vec4 (0.3, 0.2, 0.1, 0.);\n      vf = vec2 (64., 2.);\n    }\n  } else if (idObj == idRud) {\n    col4 = vec4 (0.5, 0.3, 0., 0.);\n  } else if (idObj == idStruc) {\n    col4 = vec4 (0.4, 0.3, 0.1, 0.1);\n    if (max (abs (qHit.x), abs (qHit.z + 0.22)) < 0.2) {\n      cg = step (0.1, abs (fract (vec2 (10. * vec2 (qHit.x, qHit.z + 0.22)) + 0.5) - 0.5));\n      if (cg.x * cg.y == 1.) col4 = vec4 (0.8, 0.8, 0.2, -1.);\n    }\n  } else if (idObj == idSailT) {\n    qHit.x *= (1. + 0.07 * qHit.y) * (1. + 0.14 * step (1., abs (qHit.z)));\n    col4 = vec4 (1., 1., 1., 0.) * (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (4. * qHit.x, 1.)));\n    if (abs (qHit.z) < 0.2 && abs (abs (length (qHit.xy - vec2 (0., 0.3)) - 0.35) - 0.15) < 0.07)\n       col4 *= vec4 (1., 0.2, 0.2, 1.);\n  } else if (idObj == idSailA) {\n    col4 = vec4 (1., 1., 1., 0.) * (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (5. * qHit.z, 1.)));\n  } else if (idObj == idSailF) {\n    col4 = vec4 (1., 1., 1., 0.) * (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02,\n       mod (2.95 * qHit.y + 4. * qHit.z - 0.5, 1.)));\n  } else if (idObj == idFlag) {\n    col4 = vec4 (1., 1., 0.5, 0.1);\n    if (abs (abs (length (qHit.yz) - 0.1) - 0.04) < 0.02) col4 *= vec4 (1., 0.2, 0.2, 1.);\n  } else if (idObj == idMast) {\n    col4 = vec4 (0.7, 0.4, 0., 0.1);\n    if (length (qHit.xz) < 0.16 * (1. - 0.07 * qHit.y))\n       col4 *= 0.6 + 0.4 * SmoothBump (0.03, 0.97, 0.01, mod (2. * qHit.y / (1. + 0.14 * step (1., abs (qHit.z))), 1.));\n    if (qHit.y > 3.65) col4 = vec4 (1., 0., 0., -1.);\n  } else if (idObj == idSparT) {\n    qHit.x *= (1. + 0.07 * qHit.y) * (1. + 0.14 * step (1., abs (qHit.z)));\n    col4 = vec4 (0.7, 0.4, 0., 0.1) *  (0.6 + 0.4 * SmoothBump (0.08, 0.92, 0.01, mod (4. * qHit.x, 1.)));\n  } else if (idObj == idSparL) {\n    col4 = vec4 (0.7, 0.4, 0., 0.1);\n    if (qHit.z > 6.65) col4 = vec4 (1., 1., 0.3, -1.);\n  } else if (idObj == idRig) {\n    col4 = vec4 (0., 0.2, 0., 0.);\n    vf = vec2 (32., 0.5);\n  }\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 vf;\n  float dstObj, s;\n  bool isRefl;\n  szFac = 0.6;\n  EvalShipConf ();\n  isRefl = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar && idObj == idMir && qHit.y > 0. && length (qHit.xz) < 2.95) {\n    ro += dstObj * rd;\n    rd = reflect (rd, vec3 (0., 1., 0.));\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n    isRefl = true;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    if (idObj >= idHull && idObj <= idRig) ShipCol (vn, col4, vf);\n    else if (idObj == idShell) {\n      s = length (qHit / vec3 (4., 3.5, 4.));\n      col4 = (s > 1. || qHit.y < 0.05) ? vec4 (0.8, 0.8, 0.85, 0.2) : mix (vec4 (0.4, 0.4, 0.9, 0.1),\n         vec4 (0.9, 0.7, 0.7, 0.1), smoothstep (0.3, 0.5, 3.5 - qHit.y) * smoothstep (0.97, 0.98, s));\n      if (s > 1.) vf = vec2 (64., 0.5);\n    } else if (idObj == idArm || idObj == idMir || idObj == idLeg || idObj == idHing) {\n      col4 = vec4 (0.8, 0.8, 0.85, 0.2);\n      if (idObj == idHing) col4 *= 1. - 0.5 * SmoothBump (0.05, 0.1, 0.02, mod (4. * qHit.x, 1.));\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * qHit, vn, vf.y);\n    if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    else col = col4.rgb * (0.5 - 0.5 * dot (vn, rd));\n    if (idObj < idShell) {\n      col = RgbToHsv (col);\n      col = HsvToRgb (vec3 (0.15, 0.3 + 0.7 * sqrt (col.y), 0.9 * pow (col.z, 0.7)));\n    }\n    if (! isRefl || idObj == idShell && s > 1.)\n       col += 256. * pow (clamp (0.5 + 0.5 * dot (ltDir, reflect (rd, vn)), 0., 1.), 16.) *\n       pow (1. - 0.6 * abs (dot (normalize (ltDir - rd), VaryNf (1024. * qHit, vn, 2.))), 8.);\n    if (idObj < idShell || idObj == idShell && s < 1.) col *= 0.4 + 0.6 * smoothstep (0.1, 0.2, opPhs);\n  } else {\n    col = vec3 (0.6, 0.6, 1.) * (0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.)) *\n       (0.9 + 0.1 * SmoothBump (0.3, 0.7, 0.15, mod (64. * atan (rd.z, rd.x) / pi, 1.))) +\n       32. * pow (1. - 0.6 * abs (dot (rd, VaryNf (512. * vec3 (rd.xz, rd.y / length (rd.xz) +\n       0.01 * tCur).xzy, rd, 2.))), 8.);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  opPhs = SmoothBump (0.25, 0.85, 0.15, mod (0.1 * tCur, 1.));\n  opCs = vec2 (cos (0.2 * pi * opPhs), sin (0.2 * pi * opPhs));\n  shipRot = -0.05 * pi * tCur;\n  az = pi;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.5 * pi * (2. * mod (floor (0.04 * tCur), 2.) - 1.) *\n       SmoothBump (0.25, 0.65, 0.1, mod (0.04 * tCur, 1.));\n    el -= 0.05 * pi * sin (0.05 * pi * tCur);\n  }\n  el = clamp (el, -0.45 * pi, 0.45 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 2.7, -30.);\n  zmFac = 4.2 + 2. * opPhs;\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrEECapsDf (vec3 p, vec3 v1, vec3 v2, float r)\n{\n  vec3 s, t;\n  s = p - v1;\n  t = v2 - v1;\n  return length (s - clamp (dot (s, t) / dot (t, t), 0., 1.) * t) - r;\n}\n\nfloat PrEllips2Df (vec3 p, vec2 r)\n{\n  return (length (p / r.xxy) - 1.) * min (r.x, r.y);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec3 RgbToHsv (vec3 c)\n{\n  vec4 p, q;\n  float d;\n  const float e = 1.e-10;\n  p = mix (vec4 (c.bg, vec2 (-1., 2./3.)), vec4 (c.gb, vec2 (0., -1./3.)), step (c.b, c.g));\n  q = mix (vec4 (p.xyw, c.r), vec4 (c.r, p.yzx), step (p.x, c.r));\n  d = q.x - min (q.w, q.y);\n  return vec3 (abs (q.z + (q.w - q.y) / (6. * d + e)), d / (q.x + e), q.x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}