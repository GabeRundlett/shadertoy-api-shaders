{
    "Shader": {
        "info": {
            "date": "1701614014",
            "description": "Anime speed lines",
            "flags": 0,
            "hasliked": 0,
            "id": "DldfWj",
            "likes": 22,
            "name": "Anime Speed Lines",
            "published": 3,
            "tags": [
                "lines",
                "speed",
                "anime"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 573
        },
        "renderpass": [
            {
                "code": "// Modified From: https://www.shadertoy.com/view/WtfXRj\n\nfloat rand(vec2 p) { return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123); }\n\nfloat noise(vec2 p) \n{\n    vec2 i = floor(p); \n    vec2 f = fract(p);\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    float a = rand(i + vec2(0, 0));\n\tfloat b = rand(i + vec2(1, 0));\n\tfloat c = rand(i + vec2(0, 1));\n\tfloat d = rand(i + vec2(1, 1));\n    return float(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y)/4.;\n}\n\nfloat mirror(float t, float r) \n{\n    t = fract(t+r);\n    return 2.*abs(t-0.5);\n}\n\nfloat radialNoise(float t, float d)\n{\n    const mat2 m2 = mat2(0.90,0.44,-0.44,0.90);\n    const float SCALE = 45.;\n    d = pow(d, 0.01);\n    float doff = -iTime*0.07;\n    vec2 p = vec2(mirror(t,0.1),d+doff);\n    float f1 = noise(p * SCALE);\n    p = 2.1*vec2(mirror(t,0.4),d+doff);\n    float f2 = noise(p * SCALE);\n    p = 3.7*vec2(mirror(t,0.8),d+doff);\n    float f3 = noise(p * SCALE);\n    p = 5.8*vec2(mirror(t,0.0),d+doff);\n    float f4 = noise(p * SCALE);\n    return pow((f1+0.5*f2+0.25*f3+0.125*f4)*3., 1.);\n}\n\nvec3 colorize(float x)\n{\n    x = clamp(x,0.0,1.0);\n    vec3 c = mix(vec3(0,0,1.1), vec3(0,1,1), x);\n    c = mix(c, vec3(1,1,1), x*4.-3.0) * x;\n    c = max(c, vec3(0));\n    c = mix(c, vec3(1, .25, 1), smoothstep(1.0, 0.2, x) * smoothstep(0.15, 0.9, x));\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y * 0.5;\n    float d = dot(uv, uv);\n    float t = atan(uv.y, uv.x) / 6.28318530718;\n    float v = radialNoise(t, d);\n    v = v * 2.5 - 1.4;\n    v = mix(0., v, .8 * smoothstep(0.0, 0.8, d));\n    fragColor.rgb = colorize(v);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}