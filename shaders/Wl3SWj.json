{
    "Shader": {
        "info": {
            "date": "1581658829",
            "description": "Notebook starter for Joel",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl3SWj",
            "likes": 0,
            "name": "Notebook Cover",
            "published": 3,
            "tags": [
                "pattern",
                "notebook"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 64
        },
        "renderpass": [
            {
                "code": "\n\n// noise function\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\n// pattern calculations\n\nfloat patternForPos(vec2 uv, float reso, float time) {\n    float timeOsc = sin(time) * 0.15;\t\t\t\t\t\t\t\t// oscillation helper\n    float dist = 0.;\t\t\t\t\t\t\t\t\t\t\t\t// start distance count from 0\n    uv *= 1. + noise(-uv * 0.001)/20.;\t\t\t\t\t\t\t\t// adjust incoming uv w/noise\n    for(float i=10.; i < 30.; i++) {\t\t\t\t\t\t\t\t// create x control points\n        float rads = timeOsc + i;\t\t\t\t\t\t\t\t\t// get rads for control point\n        vec2 ctrlPoint = vec2(cos(rads), sin(rads));\t\t\t\t// control points in a circle \n        ctrlPoint *= abs(cos(rads)) * 185.;\t\t\t\t\t\t\t// oscillate control point radius - the magic happens w/abs()\n        dist += sin(i + reso * distance(uv, ctrlPoint));\t\t\t// sum up oscillated distance between control points\n    }\n    return dist;\n}\n\n// rotation helper\n\nvec2 rotateCoord(vec2 uv, float rads) {\n    uv *= mat2(cos(rads), sin(rads), -sin(rads), cos(rads));\n\treturn uv;\n}\n\n// main program\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime / 200.;\n    \n    // grab postion and rotate per layer\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\t// center coordinates\n    \n    // translate zoom\n    float zoom = 12.;\n    uv *= zoom;\n        \n    // create more UV coords that are rotated from original zoomed UV\n    vec2 uv2 = rotateCoord(uv + time + noise(uv/10.), time + 0.2);\n    vec2 uv3 = rotateCoord((uv - time + 1.) - noise(uv/5.), time + 0.3);\n    vec2 uv4 = rotateCoord((uv + time + 1.) - noise(uv/1.), time + 0.1);\n    uv3 *= 1.1;\n    uv4 *= 1.9;\n    \n    // create pattern at different resolutions via different uv coords\n\tfloat col = patternForPos(uv, 4., time);\n\tfloat col2 = patternForPos(uv2, 8., time);\n\tfloat col3 = patternForPos(uv3, 3., time);\n\tfloat col4 = patternForPos(uv4, 5., time);\n    \n    // average uv components\n    float avgColor = (col + col2 + col3 + col4) / 4.;\n    \n    // draw final pattern\n    vec3 color = vec3(smoothstep(0.7, 0.8, avgColor)); // threshold/antialias, weighted to black\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}