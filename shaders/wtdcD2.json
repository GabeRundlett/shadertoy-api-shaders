{
    "Shader": {
        "info": {
            "date": "1609971988",
            "description": "So i made a working 3D buffer.\n\nInstructions in the code!",
            "flags": 32,
            "hasliked": 0,
            "id": "wtdcD2",
            "likes": 4,
            "name": "3D Buffers",
            "published": 3,
            "tags": [
                "3d",
                "buffer"
            ],
            "usePreview": 0,
            "username": "Ric3cir121",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "#define _ --- 3D Buffers ------------|\\\n/| Image: Just display the 3D buffer |\\\n/| Buffer A: Create the 3D buffer    |\\\n/| Common: 3D buffer engine          |\\\n/|-----------------------------------|\\\n\n\n\nmat2 rotate(float p){return mat2(cos(p),sin(p),-sin(p),cos(p));}\nvoid mn(out vec4 o,vec2 u){\n    // Display that cube in the screen, try changing 'f'\n    float f = .5;\n    float t = sin(iTime)/4.0001+0.75;\n    vec2 uv = (u+u-iResolution.xy)/iResolution.y;\n    vec2 uv1 = vec2(uv.x-uv.y/f,uv.y/f+uv.x)*vec2(-1,1)+(1.-t);\n    vec2 uv2 = vec2(uv.x,uv.y+uv.x*f)*2.*vec2(-1,-1)+(1.-t);\n    vec2 uv3 = vec2(uv.x,uv.y-uv.x*f)*2.*vec2(1,-1)+(1.-t);\n    o = volume(iChannel0,vec3(uv1,1.-t));\n    if(uv.x+uv.y/f<0.)o = volume(iChannel0,vec3(uv2.x,1.-t,uv2.y));\n    if(-uv.x+uv.y/f<0.&&uv.x>0.)o = volume(iChannel0,vec3(1.-t,uv3));\n    if(abs(uv.x)*2.>t||max(-uv.x+uv.y/f,uv.x+uv.y/f)>t||-min(uv.y+uv.x*f,uv.y-uv.x*f)*2.>t)o = vec4(.2);\n}\n#define PI 3.1415926535\n#define hash12(c) (fract(sin(vec2(c,sin(c*1000.)*1000.)*1000.)*1000.))\nvoid mainImage(out vec4 o,vec2 u){\n    // Anti-aliasing\n    vec2 uv = u/iResolution.xy;\n    o = vec4(0.);\n    vec4 O = vec4(0.);\n\tint a = 20;\n    for(int i = 0; i<a; i++){\n        O = vec4(0);\n        mn(O,u+hash12(0.3*u.x*u.y*PI*(float(i)+mod(iTime,10.))));\n        o += O;\n    }\n    o /= float(a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define _ac ---------- Common ------------------------|\\\n/| Note: This is the 3D buffer engine!                |\\\n/|----------------------------------------------------|\\\n\n\n\n#define makevolume() void mainImage(out vec4 o,vec2 u){\\\n    ivec2 me = ivec2(u);\\\n    int ar = int(pow(iResolution.x*iResolution.y,1./3.));\\\n    int slide = me.x+me.y*int(iResolution.x)-1;\\\n    vec3 c = vec3(slide%ar,slide/ar%ar,slide/ar/ar);\\\n    o = vec4(0);\\\n    if(c.z<=volumeResolution.z)mainImage(o,c);\\\n    if(slide==-1)o=vec4(1.2,3.4,4.3,2.1);\\\n}\\\nfloat _r_voldserr\n\n#define volumeResolution vec3(int(pow(iResolution.x*iResolution.y,1./3.)))\n\n#define _r_res() int(pow(iResolution.x*iResolution.y,1./3.))\n#define _r_rd(c) ivec3(mod(vec3((c)*volumeResolution),vec3(_r_res())))\n#define _r_slide(c) (_r_rd(c).x+_r_rd(c).y*_r_res()+_r_rd(c).z*_r_res()*_r_res()+1)\n#define volume(ch,c) texelFetch(ch,ivec2(_r_slide(c)%int(iResolution.x),_r_slide(c)/int(iResolution.x)),0)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define _ab ------------------------- Buffer A --------------------------------------------|\\\n/| vec3 volumeResolution             /* volume resolution                               */ |\\\n/| void makevolume                   /* put at the end to declare the buffer as a volume*/ |\\\n/| void mainImage(out vec4 o,vec3 u) /* this is the mainImage                           */ |\\\n/| vec4 volume(sampler2D ch,vec3 c)  /* ch: iChannel, c: coordinates (from 0 to 1)      */ |\\\n/|                                                                                         |\\\n/| Note: while putting a texture remember to click on gear near the texture and change     |\\\n/|       the filter to linear                                                              |\\\n/|-----------------------------------------------------------------------------------------|\\\n\n\n\nvoid mainImage(out vec4 o,vec3 u){\n    /*Rainbow                  */ vec4 o1 = vec4(u/volumeResolution,0);\n    /*Sphere distance estimator*/ vec4 o2 = vec4(length(u-volumeResolution/2.)/volumeResolution.x);\n    /*2D to 3D texture         */ vec4 o3 = texture(iChannel0,(u.xz+u.yx)*2./volumeResolution.x/2.);\n    \n    float t = iTime/4.;\n    if(mod(t,3.)<1.         ) o = mix(o1,o2,mod(t,3.));\n    if(abs(mod(t,3.)-1.5)<.5) o = mix(o2,o3,mod(t,3.)-1.);\n    if(mod(t,3.)>2.         ) o = mix(o3,o1,mod(t,3.)-2.);\n}\n\nmakevolume();",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}