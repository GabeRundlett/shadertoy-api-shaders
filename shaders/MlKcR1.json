{
    "Shader": {
        "info": {
            "date": "1538246753",
            "description": "using the cubemap to create volumetric light.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlKcR1",
            "likes": 3,
            "name": "cubemap volumetric light",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "volumetric",
                "cubemap",
                "godrays"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 631
        },
        "renderpass": [
            {
                "code": "float rayvolum(vec3 ro, vec3 rd, float maxdist, vec3 light) {\n    float accum = 0.0;\n    for (float d = 0.0; d < maxdist; d += maxdist/100.0) {\n        vec3 p = ro+rd*d;\n        vec3 lightrd = p-light;\n        float lightlen = length(lightrd);\n        lightrd /= lightlen;\n        \n        float lightdist = texture(iChannel0,lightrd).x;\n        \n        accum += float(lightdist > lightlen);\n    }\n    return accum/maxdist/100.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = vec3(0.5,0.5,iTime*0.2);\n    vec3 rd = normalize(vec3(uv,1));\n    float d = ray(ro,rd);\n    if (d < 100.0) {\n        \n        vec3 light = lightpos(iTime);\n        \n        float accum = rayvolum(ro,rd,d,light);\n    \n    \tro += d*rd;\n        vec3 normal = normal(ro);\n        \n        vec3 lightrd = ro-light;\n        float lightlen = length(lightrd);\n        lightrd /= lightlen;\n        \n        float shadow = texture(iChannel0,lightrd).x;\n        \n    \tfragColor = vec4(normal*0.5+0.5,1);\n        \n        if (shadow < lightlen-0.01) fragColor *= 0.2;\n        fragColor += accum;\n        \n        fragColor = sqrt(fragColor);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    vec3 ro = lightpos(iTime);\n    vec3 rd = rayDir;\n    float d = ray(ro,rd);\n    \n    fragColor = vec4(d);\n}",
                "description": "",
                "inputs": [],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "float map(vec3 ro) {\n    \n    vec3 p = fract(ro)-0.5;\n    \n    float len = -length(p)+0.6;\n    \n    p.x = fract(ro.x-0.5)-0.5;\n    \n    len = min(len,length(p)-0.2);\n    \n    return len;\n    \n}\n\nvec3 normal(vec3 ro) {\n    vec2 e = vec2(0,0.001);\n    \n    return normalize(vec3(\n        map(ro+e.yxx)-map(ro-e.yxx),\n        map(ro+e.xyx)-map(ro-e.xyx),\n        map(ro+e.xxy)-map(ro-e.xxy)));\n}\n\nfloat ray(vec3 ro, vec3 rd) {\n    float d = 0.0;\n    for (int i = 0; i < 1000; i++) {\n        float len = map(ro+d*rd);\n        \n        d += len;\n        \n        if (len < 0.001||d>100.0) break;\n    }\n    return d;\n}\n\nvec3 lightpos(float time) {\n    return vec3(-0.5,0.2*sin(time)+0.5,time*0.2+1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}