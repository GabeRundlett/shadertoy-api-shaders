{
    "Shader": {
        "info": {
            "date": "1693363623",
            "description": "What's the fastest way to sort a local float array? (in practice this array will be different for each pixel)\nKeep in mind we can't use recursion or dynamic memory allocation unless we emulate them which would probably slow things down more.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtlfRs",
            "likes": 1,
            "name": "Local Sorting Challenge",
            "published": 3,
            "tags": [
                "sort",
                "sorting"
            ],
            "usePreview": 0,
            "username": "beans_please",
            "viewed": 137
        },
        "renderpass": [
            {
                "code": "const int N = 90;\nfloat arr[N] = float[](17., 16., 19., 4., 32., 7., 9., 500., 21., 54., 33., 35., 47., 96., 64., 17., 16., 19., 4., 32., 7., 9., 500., 21.,  31., 1., -5., 7., 30., 22., 97., 4., 44., 79., 799., 9973., 64., -47., -8520., -9., 974., 34., 21., 54., 35., 47., 96., 64., 31., 1., -5., 7., 30., 22., 97., 4., 44., 79., 799., 9973., 64., -47., -8520., -9., 974., 21., 54., 35., 47., 96., 64., 31., 1., -5., 7., 30., 22., 97., 4., 44., 79., 799., 9973., 64., -47., -8520., -9., 974., 21., 54.);\n\n\n\n// Bubble Sort\n// https://www.geeksforgeeks.org/bubble-sort\nvoid bubble_sort()\n{\n    bool swapped;\n    float temp;\n    for (int i = 0; i < N - 1; i++)\n    {\n        swapped = false;\n        for (int j = 0; j < N - i - 1; j++)\n        {\n            if (arr[j] > arr[j + 1])\n            {\n                    // Swap\n                arr[j] += arr[j + 1];\n                arr[j + 1] = arr[j] - arr[j + 1];\n                arr[j] -= arr[j + 1];\n                swapped = true;\n            }\n        }\n\n        // If no two elements were swapped by inner loop, then break.\n        if (!swapped)\n            break;\n    }\n}\n\n\n\n// Insertion Sort\n// https://betterprogramming.pub/5-basic-sorting-algorithms-you-must-know-9ef5b1f3949c\nvoid insertion_sort()\n{\n    int i, j;\n    float key;\n    for (i = 1; i < N; i++)\n    {\n        key = arr[i];\n        j = i - 1;\n\n        /* Move elements of arr[0..i-1], that are greater than key, to one position ahead \n        of their current position */\n        while (j >= 0 && arr[j] > key)\n        {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n}\n\n\n\n// Selection Sort\n// https://betterprogramming.pub/5-basic-sorting-algorithms-you-must-know-9ef5b1f3949c\nvoid selection_sort()\n{\n    int i, j, min0;\n    float temp;\n    for (i = 0; i < N - 1; i++)\n    {\n        min0 = i;\n        for (j = i + 1; j < N; j++) if (arr[j] < arr[min0])\n            {\n                min0 = j;\n            }\n        temp = arr[i];\n        arr[i] = arr[min0];\n        arr[min0] = temp;\n    }\n}\n\n\n\n// Shaker Sort\n// Suggested by Envy24\n// https://www.shadertoy.com/view/stVfDV\nvoid shaker_sort()\n{\n    for (int L = N - 1, E = 1, C = -1; L > E; --L, ++E)\n    {\n        while (++C < L)\n        {\n            if (arr[C] > arr[C + 1])\n            {\n                float A = arr[C];\n                arr[C] = arr[C + 1];\n                arr[C + 1] = A;\n            }\n        }\n\n        while (--C >= E)\n        {\n            if (arr[C - 1] > arr[C])\n            {\n                float A = arr[C - 1];\n                arr[C - 1] = arr[C];\n                arr[C] = A;\n            }\n        }\n    }\n}\n\n\n\n// Radix Sort\n// Suggested by Envy24\n// https://www.shadertoy.com/view/stVfDV\nvoid radix_sort()\n{\n    const int max_num_of_digits = 3; // base 10 digits for max element value 255.\n    const int base = 10;\n\n    int temp[N];\n    int digits_arr[10];\n    int power = 1;\n    float inv = 1. / 255.;\n\n    for (int k = 0; k < max_num_of_digits; ++k)\n    {\n        for (int i = 0; i < 10; ++i)\n        {\n            digits_arr[i] = 0;\n        }\n\n        for (int i = 0; i < N; ++i)\n        {\n            int value = int(arr[i] * 255.);\n            int digit = (value / power) % base;\n            ++digits_arr[digit];\n            temp[i] = value;\n        }\n\n        for (int i = 0; i < 9; ++i)\n        {\n            digits_arr[i + 1] += digits_arr[i];\n        }\n\n        for (int i = N - 1; i >= 0; --i)\n        {\n            float value = float(temp[i]) * inv;\n            int digit = (temp[i] / power) % base;\n            arr[--digits_arr[digit]] = value;\n        }\n\n        power *= base;\n    }\n}\n\n\n\n// Quick Sort\n// Suggested by Envy24\n// https://www.shadertoy.com/view/stVfDV\nvoid quick_sort()\n{\n    int pairs[2 * N], rw_offset = 0;\n\n    pairs[rw_offset++] = 0;\n    pairs[rw_offset++] = N - 1;\n\n    while (rw_offset != 0)\n    {\n        /* Tony Hoare's partition. */\n        int high = pairs[--rw_offset], low = pairs[--rw_offset];\n\n        float pivot = (arr[low] + arr[high]) * 0.5;\n        int i = low, j = high;\n\n        for (int k = 0; k < N; ++k)\n        {\n            while (arr[i] < pivot)\n            {\n                ++i;\n            }\n            while (arr[j] > pivot)\n            {\n                --j;\n            }\n\n            if (i >= j)\n            {\n                break;\n            }\n\n            float t = arr[i];\n            arr[i] = arr[j];\n            arr[j] = t;\n            ++i;\n            --j;\n        }\n        /* Tony Hoare's partition. */\n\n        if (low < j)\n        {\n            pairs[rw_offset++] = low;\n            pairs[rw_offset++] = j;\n        }\n        if (j + 1 < high)\n        {\n            pairs[rw_offset++] = j + 1;\n            pairs[rw_offset++] = high;\n        }\n    }\n}\n\n\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    // Sort arr in increasing order\n\n    //bubble_sort();      // 10.6 fps\n    //insertion_sort();   // 18.9 fps\n    //selection_sort();   // 12.9 fps\n    //shaker_sort();      // 12.3 fps\n    quick_sort();       // 60.0 fps (maxed out, the real FPS may be higher)\n\n    frag_col = vec4(arr[0]);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}