{
    "Shader": {
        "info": {
            "date": "1482210495",
            "description": "I wanted to see if it was possible to generate a Voronoi grid by looking at only 4 points. I've seen this method which uses a 3x3 grid: https://www.shadertoy.com/view/XlB3zW\n\nI made it alternate between Manhattan distance and euclidean distance for fun.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ltSDs",
            "likes": 6,
            "name": "2x2 Voronoi",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "voronoi"
            ],
            "usePreview": 0,
            "username": "antoineMoPa",
            "viewed": 717
        },
        "renderpass": [
            {
                "code": "/*\n  I wanted to see if it was possible to generate a Voronoi grid by looking \n  at only 4 points. \n\n  I had seen this method which uses a 3x3 grid: https://www.shadertoy.com/view/XlB3zW\n\n  Conclusion: This seems to work under certain conditions. The points must not be\n  too far away from their grid position. When the factor is increased in point_for(),\n  glitches begin to appear.\n \n\n*/\nuniform float time;\nuniform float ratio;\nuniform vec2 mouse;\n\nfloat manhattan_distance(vec2 p1, vec2 p2){\n    return abs(p1.y - p2.y) + abs(p1.x - p2.x);\n}\n\nvec2 point_for(vec2 in_pos){\n    vec2 pos = vec2(0.0);\n    \n    // Change the 0.2 factor and you'll see glitches\n    pos = 0.2 * vec2(\n        sin(in_pos.x * 100.0 + cos(130.0 * in_pos.y) + 0.2 * sin(4.0 * pos.y)),\n        sin(in_pos.x * 35.0 + cos(220.0 * in_pos.y) + 0.3 * sin(4.0 * pos.y))\n        ) + 0.5;\n    \n    return in_pos + pos;\n}\n\n/*\n  r : distance to nearest point\n  g : nothing\n  b : index of point\n */\nvec4 voronoi(vec2 pos){\n    vec4 col = vec4(0.0);\n    vec2 fpos = floor(pos);\n\n    // Points\n    vec2 ps[4];\n    // Function value for these points\n    vec2 fs[4];\n    \n\t// Find points around current point        \n    ps[0] = fpos + vec2(-0.5,  0.5);\n    ps[1] = fpos + vec2(0.5,   0.5);\n    ps[2] = fpos + vec2(-0.5, -0.5);\n    ps[3] = fpos + vec2(0.5,  -0.5);\n    \n    // Function values\n    fs[0] = point_for(ps[0]);\n    fs[1] = point_for(ps[1]);\n    fs[2] = point_for(ps[2]);\n    fs[3] = point_for(ps[3]);\n    \n    float d = 10.0;\n    \n    for(int i = 0; i < 4; i++){\n        // Alternate between manhattan distance and \n        // euclidean distance\n        float dist_fac = 0.5 * sin(iTime) + 0.5;\n        float man = manhattan_distance(fs[i], pos);\n        float dist = distance(fs[i], pos);\n        float curr_dist = \n            dist_fac * \n            man +\n            (1.0 - dist_fac) *\n            dist;\n            \n        \n        if(curr_dist < d){\n            col.g = d - curr_dist;\n            d = curr_dist;\n            col.r = d;\n            col.b = float(i) / 4.0;\n        }\n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    vec2 pos = uv;\n    \n    vec4 col = vec4(0.4, 0.7, 1.0, 1.0);\n    \n    pos.x += 0.1 * iTime;\n    pos.y -= 0.1 * iTime;\n    \n    vec4 voro = voronoi(10.0 * pos);\n\tvec4 voro2 = voronoi(70.0 * pos);\n   \n    \n    float d = voro.r; // Distance\n\n    if(voro.g < 0.1){\n        // edge\n        col = vec4(0.1);\n    }\n    \n    if(voro2.g < 0.2){\n    \tcol *= 0.8;\n    }\n    \n    if(d < 0.08){\n    \tcol *= 0.8;\n    }\n    \n    col.a = 1.0;\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}