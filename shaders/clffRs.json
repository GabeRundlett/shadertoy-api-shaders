{
    "Shader": {
        "info": {
            "date": "1693319025",
            "description": "Rough Black and White Patterns created from Bilinear Interpolation of a Grid with randomly generated 'Heights'.\nThe patterns can get wierd after long times due to the RNG.",
            "flags": 0,
            "hasliked": 0,
            "id": "clffRs",
            "likes": 3,
            "name": "Edged-Zebra-Patterns",
            "published": 3,
            "tags": [
                "bw",
                "stripes",
                "white",
                "black"
            ],
            "usePreview": 0,
            "username": "2w435",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nconst vec2 GRID_SIZE = vec2(12, 14);\nconst vec2 TRIG_SPEED = vec2(0.08, 0.05);\nconst vec2 LINEAR_SPEED = vec2(0.1, 0.15);\nconst vec2 FORM_PARAMS = vec2(0.11, 4);\n\n// RNG functions stolen from: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43.5453);\n}\n\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = (fragCoord) / iResolution.y;\n    uv += vec2(sin(iTime), cos(iTime)) * TRIG_SPEED + LINEAR_SPEED * iTime;\n    \n    vec2 gridCord = uv * GRID_SIZE;\n    \n    // Nearest grid coords\n    vec2 brCorner = floor(gridCord);\n    \n    float A = noise( brCorner + vec2(0, 0) );\n    float B = noise( brCorner + vec2(0, 1) );\n    float C = noise( brCorner + vec2(1, 1) );\n    float D = noise( brCorner + vec2(1, 0) );\n    \n    // 1. Layer lerps\n    float t = fract(gridCord.x);\n    float E = mix(A, D, t);\n    float F = mix(B, C, t);\n    \n    // 2. Layer lerp\n    float G = mix(E, F, fract(gridCord.y));\n\n    // G(0.5) = sin(0.5 * b - c) = 0.5    therefor c = pi/6 - b\n    G = sin( FORM_PARAMS.y * G - PI / 6.0  - 0.5 * FORM_PARAMS.y);\n    // v(0.5) = 0, v'(x)= x / a\n    float v = (-0.125 + 0.5 * G * G) / FORM_PARAMS.x;\n    vec3 col = vec3( smoothstep( -FORM_PARAMS.x, FORM_PARAMS.x, v ) );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}