{
    "Shader": {
        "info": {
            "date": "1586701437",
            "description": "needs 1920x1080 to look right. press space to re-render\n\nhttps://www.pouet.net/prod.php?which=85263",
            "flags": 48,
            "hasliked": 0,
            "id": "ttG3R1",
            "likes": 13,
            "name": "access control",
            "published": 3,
            "tags": [
                "revision2020"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 690
        },
        "renderpass": [
            {
                "code": "#define RADIUS 2.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n\t// algorithm stolen from the gimp oilify filter :3\n\tfloat hist[256];\n\tfor (int i = 0 ; i < 256 ; i++ ) hist[i] = 0.;\n\tfloat histmax = 0.;\n\tfloat rad = RADIUS;\n\n\tfloat mainsamp = 0.;\n\tfor(float i = -rad; i <= rad; i+=1.){\n\t\tfor(float j = -rad; j <= rad; j+=1.){\n\t\t\tvec2 off = vec2(i,j);\n\t\t\tif (length(off) > rad) continue;\n\t\t\tfloat samp = pow(clamp(texelFetch(iChannel0, ivec2(fragCoord.xy + off), 0).x,0.,1.),2.);\n\t\t\tif (i == 0. && j == 0.) mainsamp = samp;\n\t\t\tint pos = int(samp*254.);\n\t\t\thist[pos] += 1.;\n\t\t\thistmax =max(histmax,hist[pos]);\n\t\t  }\n\t}\n\tfloat color = 0.;\n\tfloat acc = 0.;\n\tfor (int i = 0; i < 255; i++ ){\n\t\tfloat weight = pow(hist[i]/histmax, 8.);\n\t\tcolor += (float(i)/255.) * weight;\n\t\tacc += weight;\n\t}\n\t\n\tfragColor = vec4(sqrt(mix(color/acc, mainsamp, 0.25)));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float linedist(float x, float y, float w) {\n\treturn length(vec2(x, max(0.,abs(y)-w)));\n}\n\nfloat fksquare(vec3 p, vec3 d) {\n\treturn max(linedist(p.x, p.z, d.z), linedist(p.x, p.y, d.y))-d.x;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n\treturn mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\n/* DAVE HOSKINS' HASH FUNCTIONS (modified so it's between -1 and 1)  */\nfloat hash(vec2 p){vec3 p3 = fract(vec3(p.xyx)*.1031); p3 += dot(p3,p3.yzx+19.19); return 2.*fract((p3.x+p3.y)*p3.z)-1.;}\n\nint mat;\nvec4 labelcoords;\nfloat scene(vec3 p) {\n\tif (p.z > 0.) {\n\t\tmat = 1;\n\t\tfloat s = 1.25;\n\t\tfloat mx = 10000.;\n\n\t\tp.z += floor(p.y/s)*acos(.0);\n\t\tp.y = (fract(p.y/s)-0.5)*s;\n\t\tfor (int i = -1; i <= 1;i++){\n\t\t\tvec3 g = p + vec3(0.,float(i)*s,float(i)*acos(0.));\n\t\t\tfloat d1 = linedist(g.x, g.y, 0.2)-0.5;\n\t\t\t//greets to FabriceNeyret2 https://www.shadertoy.com/view/XsdBW8\n\t\t\tfloat d2 = abs(sin(atan(g.y,g.x)/2.-g.z)*min(1.,length(g.xy)));\n\t\t\tfloat d = length(vec2(d1,d2))/sqrt(2.)-0.05;\n\t\t\tmx = min(d,mx);\n\t\t}\n\t\treturn mx;\n\t}\n\telse {\n\t\tp*=4.8;\n\t\tvec2 scale = vec2(14.5, 11);\n\t\tvec2 id = floor(p.yz/scale);\n\t\tp = vec3(p.x, (fract(p.yz/scale) - 0.5)*scale);\n\n\t\tfloat hs = hash(id);\n\t\tp.zx+=hash(id.xx+24.4)*0.8;\n\t\tfloat sides = fksquare(vec3(p.x+0.2,abs(p.y)-6.8,p.z), vec3(0.3,.3,10.));\n\t\tp = erot(p, vec3(1,0,0), hs*hs*hs*0.04);\n\t\tp = erot(p, vec3(0,0,1), hash(id+47.4)*hs*0.01);\n\t\tp.x+=hs*hs*0.3;\n\t\tfloat handle = linedist(linedist(min(p.x+.5,0.), p.y, 1.)-0.8, p.z+1.5, 0.25)-.1;\n\t\tfloat panel = fksquare(p, vec3(0.25,6.,5.));\n\t\tvec3 labelpos = vec3(0.2,0.,-1.);\n\t\tlabelcoords=vec4(p.yz+labelpos.yz, id);\n\t\tfloat label = max(fksquare(p+labelpos, vec3(0.2, 1.5, 1.)), -fksquare(p+labelpos, vec3(.5, 0.7, 0.5)));\n\t\tfloat keyhole = max(linedist(p.x+.4, length(p.yz+vec2(3.2,1.5)), 0.35)-0.05, -fksquare(p+vec3(.4, 3.2,1.5), vec3(.1, 0.03, 0.18)));\n\t\tfloat black = min(0.4-p.x, min(panel, sides));\n\t\tfloat silver = min(min(label, keyhole), handle*0.9);\n\t\tmat = silver < black ? 1 : 0;\n\t\treturn min(black, silver)/4.8;\n\t}\n}\n\nvec3 norm(vec3 p) {\n\tmat3 k = mat3(p,p,p) - mat3(0.001);\n\treturn normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])) );\n}\n\nvec2 hash2(vec2 p) {\n\treturn vec2(hash(p*5.), hash(p));\n}\n\nfloat noise(vec2 p) {\n\tvec2 c = fract(p);\n\tp = floor(p);\n\treturn mix(mix(hash(p),hash(p+vec2(1,0)),c.x),mix(hash(p+vec2(0,1)),hash(p+vec2(1,1)),c.x),c.y);\n}\n\nfloat scene_col(vec2 uv) {\n\tvec3 cam = normalize(vec3(1.6,uv));\n\tvec3 init = vec3(-35,0,uv.y>0.?3.:-4.2);\n\n\tvec3 p = init;\n\tbool hit = false;\n\tfor (int i = 0; i < 50; i++) {\n\t\tfloat dist = scene(p);\n\t\tif (dist*dist < 0.00001) { hit = true; break; }\n\t\tif (distance(p,init) > 100.) break;\n\t\tp += dist*cam;\n\t}\n\n\tint mymat = mat;\n\tvec4 mylabelcoords = labelcoords;\n\tvec3 n = norm(p);\n\tfloat ao = clamp((scene(p+n*0.1)+0.1)/.2, 0.,1.);\n\tfloat fakediff = length(sin(n*3.)*0.5+0.5)/sqrt(3.);\n\tfloat fakeref = pow(length(sin(reflect(cam,n)*4.)*0.5+0.5)/sqrt(3.),10.);\n\tfloat bright = uv.y>0.?0.35:0.6;\n\tif (!hit) return 0.07;\n\tif (mymat == 1) return fakediff*bright + fakeref*1.5;\n\tif (abs(mylabelcoords.x) < 1.2 && abs(mylabelcoords.y) < 1.) fakediff*= 8.;\n\treturn ao*fakediff*.15 + fakeref;\n}\n\nfloat pixel_col(vec2 coord) {\n\tvec2 uv = (coord - iResolution.xy*0.5)/iResolution.y;\n\tfloat border = max(max(abs(uv).x,abs(uv).y),0.43-abs(uv.y));\n\tfloat bg = 0.99+noise(uv*iResolution.y*vec2(0.4,1))*0.02;\n\tif (border > 0.41) { return bg;}\n\tfloat col = 0.;\n\tfloat acc = 0.;\n\tfor(float i = 0.; i < 1.; i+=0.25){\n\t\tfor(float j = 0.; j < 1.; j+=0.25){\n\t\t\tacc+=1.;\n\t\t\tvec2 uv2 = uv+vec2(i,j)/iResolution.y;\n\t\t\tcol += scene_col(uv2);\n\t\t}\n\t}\n\tcol = smoothstep(0.05,1.1,sqrt(col/acc))+noise(uv*iResolution.y/1.5)*0.03;\n\n\treturn mix(col, bg, smoothstep(0.4,0.4+3./iResolution.y,border));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0 || texelFetch( iChannel1, ivec2(32,1),0 ).x != 0.) {\n        fragColor = vec4(pixel_col(fragCoord));\n    } else {\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}