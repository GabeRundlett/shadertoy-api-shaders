{
    "Shader": {
        "info": {
            "date": "1601329397",
            "description": "recreation of Bridget Riley's Straight Curve, more info about the piece here (https://www.artsy.net/artwork/bridget-riley-straight-curve)",
            "flags": 0,
            "hasliked": 0,
            "id": "tdtcz2",
            "likes": 1,
            "name": "Straight Curve (1963)",
            "published": 3,
            "tags": [
                "modernart",
                "1963"
            ],
            "usePreview": 0,
            "username": "yasushisakai",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "// fragment shader\n\n#define PI 3.1415926535897932384626433832795\n#define divX 24\n#define divY 41\n#define wavyness vec2(-1.3,1.0)\n\n// draws a rectangle (returns 1.0 where it should be)\n// the origin is at the left top.\nfloat rect(float sx, float sy, float ex, float ey, vec2 st){\n    float ssx = step(sx, st.x);\n    float ssy = step(sy, 1.0 - st.y);\n    float sex = 1.0 - step(ex, st.x);\n    float sey = step(1.0 - ey, st.y);\n    return ssx * ssy * sex * sey;\n}\n\n// draws a triangle filling the diagnal half of the rect()\nfloat triangle(float sx, float sy, float ex, float ey, vec2 st) {\n    float r = rect(sx, sy, ex, ey, st);\n    float tx = (1.0 - (st.x - sx) / (ex - sx));\n    float ty = ((1.0 - st.y) - sy) / (ey - sy);\n    // float ty = (st.y - sy) / (ey - sy);\n    return (1.0 - step(1.0, ty+tx)) * r;\n}\n\n// converts index ints to radians\nfloat iToDeg(int i, int limit) {\n    return (float(i)/float(limit))*PI*2.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / iResolution.xy;\n    float r = 0.0;\n    vec2 unit = 1.0 / vec2(float(divX), float(divY));\n\n    for (int i=0;i<divX;i++){\n        for(int j=0;j<divY;j++){\n            vec2 degs = vec2(iToDeg(i,divX),iToDeg(j,divY)*2.0);\n            vec2 dege = vec2(iToDeg(i+1,divX),iToDeg(j+1,divY)*2.0);\n            vec2 start = unit * vec2(float(i),float(j));\n            start += unit * sin(degs) * wavyness; // this line adds the wavyness\n            vec2 end = unit * vec2(float(i+1),float(j+1));\n            end += unit * sin(dege) * wavyness; \n            float pr = triangle(start.x,start.y,end.x,end.y,st);\n            r += pr;\n        }\n    }\n\n    fragColor = vec4(vec3(r),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}