{
    "Shader": {
        "info": {
            "date": "1652621213",
            "description": "Fujiko Fujio A",
            "flags": 0,
            "hasliked": 0,
            "id": "Nt2fRt",
            "likes": 4,
            "name": "Sarumaru LogPolar Animation",
            "published": 3,
            "tags": [
                "reproduction",
                "sarumaru"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define MAX_STEPS 64\n#define MAX_DIST 64.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define MATERIAL 0\n\n#define ZERO (min(iFrame,0))\n\nfloat hash(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 GetDist(vec3 p) {\n    float d = p.y;\n    vec2 model = vec2(d,MATERIAL);\n    return model;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(5,0,-5));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff;\n    diffCol += col*vec3(1.0,1.0,1.0)*skyDiff;\n    diffCol += col*vec3(0.9)*bounceDiff;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.); // spec\n        \n    return diffCol;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nvec3 sarumaru(vec2 p, vec3 col){\n    vec2 prevP = p;\n    \n    p*=Rot(radians(-15.0));\n    p.x*=1.5;\n    p-=vec2(-0.3,0.01);\n    float ear = length(p)-0.07;\n    col = mix(col,vec3(1.0,0.9,0.8),S(ear,0.0));\n    ear = abs(length(p)-0.07)-0.005;\n    col = mix(col,vec3(0.0),S(ear,0.0));\n    \n    p = prevP;\n    p.y+=0.06;\n    p.x*=0.8;\n    float d = length(p)-0.15;\n    col = mix(col,vec3(1.0,0.9,0.8),S(d,0.0));\n    d = abs(length(p)-0.15)-0.005;\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    p = prevP;\n    p.y-=0.01;\n    d = length(p)-0.2;\n    d = max(-p.y-0.07,d);\n    col = mix(col,vec3(1.0,0.9,0.8),S(d,0.0));\n    d = abs(length(p)-0.2)-0.005;\n    d = max(-p.y-0.07,d);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    // hair\n    p = prevP;\n    p.y-=0.01;\n    d = length(p)-0.2;\n    d = max(-p.y+0.02,d);\n    \n    p.x-=-0.02;\n    p.x*=1.0;\n    p.x=abs(p.x)-0.08;\n    float d2 = length(p)-0.1;\n    d = max(-d2,d);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    p = prevP;\n    \n    p-=vec2(0.1,0.25);\n    p*=Rot(radians(50.0));\n    d = sdTriangleIsosceles(p,vec2(0.03,-0.09));\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    // eye\n    p = prevP;\n    p.x-=-0.09;\n    p.y-=-0.01;\n    p.x*=1.5;\n    d = length(p)-0.065;\n    p = prevP;\n    p.x-=-0.09;\n    p.y-=-0.01;\n    p*=Rot(radians(90.0));\n    d2 = sdTriangleIsosceles(p-vec2(0.00,0.02),vec2(0.02,0.03));\n    d = max(-d2,d);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    p = prevP;\n    p.x-=0.03;\n    p.y-=-0.01;\n    p.x*=1.5;\n    d = length(p)-0.065;\n    p = prevP;\n    p.x-=0.03;\n    p.y-=-0.01;\n    p*=Rot(radians(90.0));\n    d2 = sdTriangleIsosceles(p-vec2(0.00,0.02),vec2(0.02,0.03));\n    d = max(-d2,d);\n    col = mix(col,vec3(0.0),S(d,0.0));    \n    \n    p = prevP;\n    p*=Rot(radians(10.0));\n    p.x*=1.5;\n    p-=vec2(0.28,0.01);\n    ear = length(p)-0.07;\n    col = mix(col,vec3(1.0,0.9,0.8),S(ear,0.0));\n    ear = abs(length(p)-0.07)-0.005;\n    col = mix(col,vec3(0.0),S(ear,0.0));\n    \n    // mouth\n    p = prevP;\n    p*=Rot(radians(-10.0));\n    p.y*=1.8;\n    p-=vec2(-0.03,-0.23);\n    d = length(p)-0.1;\n    d = max(p.y,d);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    p = prevP;\n    p*=Rot(radians(-30.0));\n    p.y*=2.1;\n    p-=vec2(-0.138,-0.05);\n    d = length(p)-0.1;\n    d = max(p.x+0.06,d);\n    col = mix(col,vec3(1.0,0.9,0.8),S(d,0.0));\n    d = abs(length(p)-0.1)-0.005;\n    d = max(p.x+0.06,d);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    p = prevP;\n    p*=Rot(radians(-5.0));\n    p.y*=2.0;\n    p-=vec2(-0.11,-0.19);\n    d = length(p)-0.1;\n    d = max(p.y+0.05,d);\n    d = max(-p.x-0.05,d);\n    col = mix(col,vec3(1.0,0.9,0.8),S(d,0.0));\n    d = abs(length(p)-0.1)-0.005;\n    d = max(p.y+0.05,d);\n    d = max(-p.x-0.05,d);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    p = prevP;\n    p*=Rot(radians(-10.0));\n    p.y*=2.0;\n    p-=vec2(0.01,-0.19);\n    d = length(p)-0.1;\n    d = max(p.y+0.03,d);\n    d = max(-p.x-0.07,d);\n    col = mix(col,vec3(1.0,0.9,0.8),S(d,0.0));\n    d = abs(length(p)-0.1)-0.005;\n    d = max(p.y+0.03,d);\n    d = max(-p.x-0.07,d);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    \n    return col;\n}\n\nvec3 drawTex(vec2 p, vec3 col) {\n    vec2 prevP = p;\n    \n    // https://en.wikipedia.org/wiki/Log-polar_coordinates\n    float r = log(sqrt(p.x*p.x+p.y*p.y)); // or log(length(p))\n    float theta = atan(p.y/p.x);\n    p.x = r;\n    p.y = theta;\n    \n    p.x+=iTime*0.3;\n    p*=2.0;\n    p = fract(p)-0.5;\n    p*=0.75;\n    p*=Rot(radians(iTime*-20.0));\n    \n    col = sarumaru(p,col);\n    \n    p = prevP;\n    \n    p*=0.15;\n    p*=Rot(radians(iTime*-20.0));\n    col = sarumaru(p,col);\n    \n    return col;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    if(mat == MATERIAL){\n        col = diffuseMaterial(n,rd,p,drawTex(p.xz,col));\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -10.0);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(3.0,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.yz *= Rot(radians(35.0));\n        ro.xz *= Rot(radians(iTime*10.0));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0.0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    } else {\n\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}