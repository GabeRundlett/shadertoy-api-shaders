{
    "Shader": {
        "info": {
            "date": "1677605031",
            "description": "set grid to 2 for lots of particles.",
            "flags": 32,
            "hasliked": 0,
            "id": "mdcGRf",
            "likes": 18,
            "name": "Verlet Particle Simulator",
            "published": 3,
            "tags": [
                "realtime",
                "particle",
                "particle",
                "verlet",
                "molecular"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 362
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 f = fragCoord.xy;\n    ivec2 fc = ivec2((f+float(grid)*0.25));\n    ivec2 cell = fc/grid;\n    ivec2 g = ivec2(fc.x%grid, fc.y%grid);\n    if (length(vec2(cell*grid+g)-iResolution.xy*0.5) > iResolution.y*0.451+float(grid)*0.5) {\n        fragColor = vec4(0.5);\n        return;\n    }\n    int id = fc.x%grid+(fc.y%grid)*grid;\n    float d = 10000.;\n    for (int x = -1; x <= 1; x += 1) {\n        for (int y = -1; y <= 1; y += 1) {\n            for (int i = 0; i < maxP; i += 1) {\n                ivec2 z = (cell-ivec2(x, y))*grid+ivec2(i%grid, (i/grid));\n                    vec2 p = texelFetch(iChannel0, z, 0).xy;\n                    if (p != vec2(-10) && d >= 0.0) d = min(d, length(vec2(g)+vec2((ivec2(x, y))*grid)-p)-float(grid)*0.25);\n                    else break;\n            }\n        }\n    }\n    fragColor = vec4(d, d, d, 1);\n    fragColor.w = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n#define UI4 uvec4(UI3, 1979697957U)\n#define UIF (1.0 / float(0xffffffffU))\nvec2 hash22(uvec2 q)\n{\n\tq *= UI2;\n\tq = (q.x ^ q.y) * UI2;\n\treturn vec2(q) * UIF;\n}\nfloat hash12(uvec2 q)\n{\n\tq *= UI2;\n\tuint n = (q.x ^ q.y) * UI0;\n\treturn float(n) * UIF;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tivec2 fc = ivec2(fragCoord);\n    if (fc.x == 0) fragColor = vec4(0);\n\tivec2 cell = fc/grid;\n\tint id = fc.x%grid+(fc.y%grid)*grid;\n\tvec4 old = texelFetch(iChannel0, fc, 0);\n\tfragColor = old;\n\tif (iFrame < 10 || iMouse.z > 0.0) {\n        vec2 c = vec2(cell*grid-ivec2(iResolution.xy*0.5))/iResolution.y;//ivec2((cell.x-int(iResolution.x*0.5))/grid, (cell.y-int(iResolution.x*0.5))/grid);\n        fragColor = vec4(-10.);\n        int count = (c.x*c.x+c.y*c.y < 0.3*0.3)?1:0;\n        if (id < count) {\n            vec2 p = vec2(0.5);//hash22(uvec2(fc))*float(grid);\n            vec2 v = p+0.4;\n            fragColor = vec4(p, v);\n        }\n\t} else {\n\t\tif (fragColor.w != -10.0) {\n\t\t\tfor (int x = -1; x <= 1; x += 1) {\n\t\t\t\tfor (int y = -1; y <= 1; y += 1) {\n\t\t\t\t\tivec2 lp = (cell+ivec2(x, y))*grid;\n\t\t\t\t\tfor (float i = 0.; i < float(maxP); i += 1.) {\n\t\t\t\t\t\tif (!(x==0 && y == 0 && i == float(id))) {\n\t\t\t\t\t\t\tvec4 t = texelFetch(iChannel0, lp+ivec2(mod(i, float(grid)), i*gridi), 0);\n\t\t\t\t\t\t\tif (t.x != -10.) {\n\t\t\t\t\t\t\t\tvec2 p = t.xy+vec2(x, y)*float(grid);\n\t\t\t\t\t\t\t\tfloat d = distance(p, fragColor.xy);\n\t\t\t\t\t\t\t\tvec2 axis = normalize(fragColor.xy-p);\n\t\t\t\t\t\t\t\tfloat overlap = float(grid)-d;\n\t\t\t\t\t\t\t\tif (d < float(grid))fragColor.zw += 0.5*overlap*axis;\n\t\t\t\t\t\t\t} else break;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvec2 old = fragColor.xy;\n\t\t\tvec2 vel = fragColor.zw-fragColor.xy;\n\t\t\tfragColor.zw = old;\n\t\t\tfragColor.xy += clamp(vel, -float(grid)*0.5, 0.5*float(grid));\n\t\t\tvec2 p = vec2(cell*grid)+fragColor.xy;\n\t\t\tfloat dist = length(p-iResolution.xy*0.5);\n            float size = float(iResolution.y*0.45);\n\t\t\tif (dist > size) {\n\t\t\t\tvec2 normal = 2.0*((p-iResolution.xy*0.5)/dist);\n\t\t\t\tfragColor.xy -= normal*(dist-size);\n\t\t\t}\n\t\t}\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int grid = 3; //number of pixels per particles\nconst int maxBalls = 4; //maximum balls per grid cell\nconst float gridi = 1./float(grid);\nconst int maxP = min(maxBalls, grid*grid);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 fc = ivec2(fragCoord);\n    ivec2 cell = fc/grid;\n    int id = fc.x%grid+(fc.y%grid)*grid;\n    fragColor = vec4(-10);\n    int d = 0;\n    for (int x = -1; x <= 1; x += 1) {\n        for (int y = -1; y <= 1; y += 1) {\n            ivec2 lp = (cell+ivec2(x, y))*grid;\n            for (int i = 0; i < maxP; i += 1) {\n                vec4 t = texelFetch(iChannel0, lp+ivec2(i%grid, i/grid), 0);\n                if (t.x != -10.) {\n                    vec2 p = t.xy+vec2(x, y)*float(grid);\n                    if (p.x > 0.0 && p.x < float(grid) && p.y > 0.0 && p.y < float(grid)) {\n                        if (id == d++) {\n                            vec2 vel = t.xy-t.zw;\n                            fragColor.xy = vec2(mod(t.x+float(grid), float(grid)), mod(t.y+float(grid), float(grid)));\n                            fragColor.zw = fragColor.xy+vel;\n                            break;\n                        }\n                    }\n                } else break;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}