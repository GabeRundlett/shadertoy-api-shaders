{
    "Shader": {
        "info": {
            "date": "1593021725",
            "description": "A shader for my game.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtlcDS",
            "likes": 3,
            "name": "Healt Shader",
            "published": 3,
            "tags": [
                "health"
            ],
            "usePreview": 0,
            "username": "MrOkiDoki",
            "viewed": 315
        },
        "renderpass": [
            {
                "code": "\n\n\n\nfloat DrawPlus(vec2 uv,float blur)\n{\n    uv = abs(uv);\n    float plusX = length(uv - vec2(min(uv.x,0.2),0));\n    plusX = smoothstep(0.04,0.04-blur,plusX);\n    \n    float plusY = length(uv - vec2(0,min(uv.y,0.2)));\n    plusY = smoothstep(0.04,0.04-blur,plusY);   \n\t\n    return clamp(plusX + plusY,0.,1.);\n}\nfloat DrawCircle(vec2 uv)\n{\n    float offset = (0.5 * (sin(iTime*10.) + 1. )) * 0.002;\n    \n    float INminD = 0.38 + offset;\n\tfloat INmaxD = 0.42 + offset;\n\t\n\tfloat OUminD = 0.39 + offset;\n\tfloat OUmaxD = 0.41 + offset;\n    \n    float alpha = 0.;\n    float dist = length(uv);\n\n\tif(dist > INminD && dist < INmaxD)\n    {\n        //Get the angle given UV\n        float angle = atan(-uv.y,uv.x) * (180. / 3.1415);\n        \n        //Normalize Angle\n        if(angle < 0.)\n        \tangle = angle + 360.;\n        \n        //Shift & Normalize\n        angle -= 270.;\n        angle = fract(angle/360.)*360.;\n        \n        if(angle < ( fract((iTime * 360.) / 360.)*360.))\n        {\n        \talpha = 1.;\n        }\n        else\n        {\n            if(dist > OUminD && dist < OUmaxD)\n    \t\t{\n    \t\t    alpha = fract(angle/10.);\n                if(alpha < 0.4 || alpha > 0.8)\n\t\t\t\t\talpha = 0.;\n                else\n                    alpha = 1.;\n    \t\t}\n        }\n        \n    }\n\n    return clamp(alpha,0.,1.);\n}\n\nconst vec3 PlusColor = vec3(0.9,.15,.1);\nconst vec3 CircleColor = vec3(1,.6,.1);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5 *iResolution.xy) / iResolution.y;\n    \n\n    vec3 col = vec3(0.);\n    \n    //Circle\n\tfloat circleAlpha = DrawCircle(uv);\n    //Plus\n\tfloat plusAlpha = DrawPlus(uv,.001);\n\t\n    \n    col += PlusColor * plusAlpha;\n    col += CircleColor * circleAlpha;\n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}