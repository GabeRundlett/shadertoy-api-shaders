{
    "Shader": {
        "info": {
            "date": "1469734944",
            "description": "Just playing around with sound sync.",
            "flags": 64,
            "hasliked": 0,
            "id": "MdySW3",
            "likes": 91,
            "name": "Funky Disco Ball",
            "published": 3,
            "tags": [
                "3d",
                "sphere",
                "ball",
                "disco",
                "raytraycing",
                "soundcloud"
            ],
            "usePreview": 0,
            "username": "knarkowicz",
            "viewed": 5979
        },
        "renderpass": [
            {
                "code": "const float MATH_PI = 3.14159265359;\n\nfloat RaySphere( vec3 rayOrigin, vec3 rayDir, vec3 spherePos, float sphereRadius )\n{\n\tvec3 oc = rayOrigin - spherePos;\n\t\n\tfloat b = dot( oc, rayDir );\n\tfloat c = dot( oc, oc ) - sphereRadius * sphereRadius;\n\tfloat h = b * b - c;\n\t\n\tfloat t;\n\tif ( h < 0.0 )\n    {\n\t\tt = -1.0;\n    }\n\telse\n    {\n\t\tt = ( -b - sqrt( h ) );\n    }\n\treturn t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n\tp.x *= iResolution.x / iResolution.y;\n    p.y *= -1.0;\n\n    vec3 rayOrigin\t= vec3( 0.0, 0.0, -2.5 );\n\tvec3 rayDir \t= normalize( vec3( p.xy, 2.0 ) ); \n    \n\tfloat sphereAngle = -0.5 * iTime; \n\n\tvec3 color = vec3( 0.0 );\n\n    float sphere0Radius = 1.0;\n    float sphere1Radius = 1.4;\n    float sphere2Radius = 1.8;\n    \n    float t0 = RaySphere( rayOrigin, rayDir, vec3( 0.0, 0.0, 0.0 ), sphere0Radius );\n    float t1 = RaySphere( rayOrigin, rayDir, vec3( 0.0, 0.0, 0.0 ), sphere1Radius );\n    float t2 = RaySphere( rayOrigin, rayDir, vec3( 0.0, 0.0, 0.0 ), sphere2Radius );\n\n    float t \t\t\t= t0;\n    float sphereRadius \t= sphere0Radius;\n    float sphereColor\t= 0.15 + 3.0 * pow( texture( iChannel3, vec2( 0.75, 0.25 ) ).x, 3.0 );\n    \n    if ( t1 > t0 )\n    {\n        t \t\t\t\t= t1;\n    \tsphereRadius \t= sphere1Radius;\n        sphereColor\t\t= 0.8 * pow( texture( iChannel3, vec2( 0.5, 0.25 ) ).x, 3.0 );\n        sphereAngle\t\t= -sphereAngle;\n    }\n    if ( t2 > t1 )\n    {\n        t \t\t\t\t= t2;\n    \tsphereRadius \t= sphere2Radius;\n        sphereColor\t\t= 0.1 * pow( texture( iChannel3, vec2( 0.0, 0.25 ) ).x, 3.0 );\n    }\n    \n    if ( t > 0.0 )\n    {\n        vec3 pos = rayOrigin + t * rayDir;\n        \n        float tileSize \t= 0.12;        \n        vec2 phiTheta\t= vec2( atan( pos.z, pos.x ) + sphereAngle, acos( pos.y / sphereRadius ) );\n\t\tvec2 tileId \t= floor( phiTheta / tileSize );\n        vec2 tilePos\t= ( phiTheta - tileId * tileSize ) / tileSize;\n        phiTheta\t\t= tileId * tileSize;\n        phiTheta.x\t\t= phiTheta.x - sphereAngle;\n        \n        vec2 edge = min( clamp( ( tilePos ) * 10.0, 0.0, 1.0 ), clamp( ( 1.0 - tilePos ) * 10.0, 0.0, 1.0 ) );       \n        float bump = clamp( min( edge.x, edge.y ), 0.0, 1.0 );\n        \n        vec3 bumpPos;\n        bumpPos.x = sphereRadius * sin( phiTheta.y ) * cos( phiTheta.x );\n        bumpPos.y = sphereRadius * cos( phiTheta.y );\n        bumpPos.z = sphereRadius * sin( phiTheta.y ) * sin( phiTheta.x );\n\t\tbumpPos.y += ( 1.0 - bump ) * 0.1;\n        \n        vec3 normal = normalize( bumpPos );\n\n        vec3 refl = reflect( rayDir, normal );\n        color = texture( iChannel0, refl ).xyz;\n        color = color * color;\n        color *= vec3( bump ) * sphereColor * 10.0;\n    }\n\n    vec3 moodColor0 = vec3( 0.8, 0.5, 0.8 );\n    vec3 moodColor1 = vec3( 0.8, 0.8, 0.2 );\n    vec3 moodColor2 = vec3( 0.4, 1.0, 0.4 );\n\n    float moodTime \t= mod( iTime * 0.5, 3.0 );\n    float moodId \t= floor( moodTime );\n    float moodPos \t= moodTime - moodId;\n    float ma \t\t= moodId == 0.0 ? 1.0 : 0.0;\n    float mb \t\t= moodId == 1.0 ? 1.0 : 0.0;\n    float mc \t\t= moodId == 2.0 ? 1.0 : 0.0;\n    vec3 moodColor \t= moodColor0 * ma + moodColor1 * mb + moodColor2 * mc;\n    color *= mix( moodColor, vec3( 1.0 ), 0.3 );\n    \n    vec2 grainUV = ( fragCoord.xy / ( 2.0 * iChannelResolution[ 1 ].xy ) + fract( vec2( iTime * 11.1, iTime * 31.3 ) ) );\n    float grain = texture( iChannel1, grainUV ).x;\n    color += vec3( ( 2.0 * grain - 1.0 ) * 0.04 * ( 1.0 - sphereColor * 0.5 ) );\n    \n    fragColor = vec4( pow( color, vec3( 0.6 ) ), 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 4405,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/istv-ntak-cs/taki-spring-funky-disco-2014"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}