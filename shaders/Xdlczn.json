{
    "Shader": {
        "info": {
            "date": "1486742972",
            "description": "svg textured on the sphere.\nTry larger N for real splines if your GPU&compiler allows. (more compilation time, longer shader).",
            "flags": 0,
            "hasliked": 0,
            "id": "Xdlczn",
            "likes": 7,
            "name": "svg mapper / Earth",
            "published": 3,
            "tags": [
                "bezier",
                "map",
                "world",
                "svg"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 966
        },
        "renderpass": [
            {
                "code": "// === SVG Player ====      short spec: https://www.w3.org/TR/2008/REC-SVGTiny12-20081222/paths.html\n\n#define N 1.  // splines discretization. Lower it on slow GPUs\n// absolute main SVG commands\n#define M(x,y)             x0 = _x = x;   y0 = _y = y;\n#define L(x,y)             d = min(d, line(uv, vec2(_x,_y), vec2(x,y)) ); _x=x,_y=y;\n#define C(x1,y1,x2,y2,x,y) d = min(d, bezier(uv, vec2(_x,_y), vec2(x1,y1),vec2(x2,y2), vec2(x,y)) ); _x=x,_y=y; \n#define H(x)               d = min(d, line(uv, vec2(_x,_y), vec2(x,_y)) ); _x=x;\n#define V(y)               d = min(d, line(uv, vec2(_x,_y), vec2(_x,y)) ); _y=y;\n#define Z                  d = min(d, line(uv, vec2(_x,_y), vec2(x0,y0)) );\n// relative main SVG commands\n#define m(x,y)             M(_x+x,_y+y)\n#define l(x,y)             L(_x+x,_y+y)\n#define c(x1,y1,x2,y2,x,y) C(_x+x1,_y+y1,_x+x2,_y+y2,_x+x,_y+y)\n#define h(x)               H(_x+x)\n#define v(y)               V(_y+y)\n#define z                  Z\n\n#define style(f,c)         fill=f; S=1.; COL = mod(vec4((c)/65536,(c)/256,c,1),256.)/255.;\n#define path(cmd)          d = 1e38; cmd; draw(d,O);\n#define path1(cmd)         d = 1e38; cmd;                // to overcome compiler overflow\n#define path2(cmd)                   cmd; draw(d,O);\n\nfloat bezier(vec2,vec2,vec2,vec2,vec2);\nfloat line(vec2,vec2,vec2);\nvoid  draw(float,inout vec4);\nconst float FILL=1., CONTOUR=0.;\nvec4 COL = vec4(0); float fill=FILL, S=1., contrast=1.;  // style state\nfloat d = 1e38;   // global to allow unique distance field\n\n// === SVG drawing ===============================================================\nvoid SVG(vec2 uv, inout vec4 O) \n{\n    int _x, _y, x0, y0; // <><><> int  just for this svg file (coords are all ints)\n\n    uv.y -= .1;\n    uv *= 2500.;                         // scaling\n   //contrast = 1./10.; // <><><> set in main\n    \n// Copy-paste your SVG pathes here.  Slight adaptations : \n//  - add () around command params and  comma between points, \n//  - split polylines and polyb√©ziers into sets of 1 vs 3 pairs of coordinates\n//  - path( style( FILL/CONTOUR, color(hexa) )\n//          commands \n//        )    \n\n// converted from http://www.clipartpanda.com/clipart_images/worldmap-gif-6189430\n// using http://www.online-convert.com/\n\npath( style( FILL, 0x000000)\n    M( 880, 2045)\n    c( 7, -8, 24, -15, 39, -15)\n    c( 14, 0, 50, -16, 78, -35)\n    c( 29, -19, 57, -35, 63, -35)\n    c( 5, 0, 10, -6, 10, -13)\n    c( 0, -20, 71, -84, 101, -91)\n    c( 23, -5, 26, -3, 22, 18)\n    c( -6, 28, 24, 75, 47, 76)\n    c( 9, 0, 5, 6, -10, 15)\n    c( -19, 11, -21, 14, -7, 15)\n    c( 14, 0, 13, 5, -10, 30)\n    c( -14, 17, -34, 30, -44, 30)\n    c( -10, 0, -21, 5, -24, 10)\n    c( -4, 6, -62, 10, -142, 10)\n    c( -119, 0, -134, -2, -123, -15)\n    z\n)\n\npath( style( FILL, 0x000000)\n    M( 220, 1991)\n    c( -26, -4, -36, -12, -38, -28)\n    c( -2, -16, -11, -23, -35, -25)\n    c( -27, -2, -32, -7, -30, -26)\n    c( 2, -18, -5, -26, -30, -37)\n    l( -32, -14)\n    l( 25, -10)\n    c( 18, -7, 20, -10, 8, -10)\n    c( -10, -1, -18, -5, -18, -11)\n    c( 0, -5, -12, -17, -27, -25)\n    c( -31, -18, -36, -18, 55, 5)\n    c( 19, 4, 41, 15, 51, 24)\n    c( 10, 9, 26, 16, 37, 16)\n    c( 11, 0, 25, 5, 31, 11)\n    c( 15, 15, 90, -25, 99, -53)\n    c( 4, -13, 18, -40, 32, -61)\n    l( 25, -38)\n    l( -17, -50)\n    c( -21, -57, -15, -135, 14, -171)\n    c( 24, -31, 51, -98, 44, -109)\n    c( -3, -5, 1, -9, 9, -9)\n    c( 8, 0, 20, -13, 27, -30)\n    c( 7, -16, 16, -30, 20, -30)\n    c( 5, 0, -4, 26, -20, 58)\n    c( -15, 31, -26, 61, -23, 65)\n    c( 5, 7, 19, -15, 55, -83)\n    c( 7, -14, 18, -29, 25, -35)\n    c( 6, -5, 16, -28, 22, -51)\n    c( 9, -35, 18, -44, 64, -67)\n    c( 29, -15, 60, -27, 69, -27)\n    c( 10, 0, 34, -11, 54, -25)\n    c( 20, -14, 45, -25, 56, -25)\n    c( 11, 0, 18, -6, 16, -14)\n    c( -5, -24, 63, -78, 89, -71)\n    c( 43, 10, 59, -72, 20, -105)\n    c( -21, -18, -41, -80, -25, -80)\n    c( 6, 0, 4, -8, -5, -18)\n    c( -18, -20, -22, -42, -9, -42)\n    c( 5, 0, 27, -36, 51, -81)\n    c( 23, -44, 54, -91, 68, -103)\n    l( 25, -22)\n    l( -12, -85)\n    c( -7, -46, -16, -106, -19, -134)\n    c( -4, -27, -15, -68, -25, -90)\n    c( -12, -28, -16, -53, -12, -85)\n    c( 4, -33, 2, -52, -9, -65)\n    c( -16, -22, -19, -63, -7, -82)\n    c( 5, -9, 16, -4, 36, 17)\n    c( 15, 17, 32, 30, 38, 30)\n    c( 6, 0, 8, 6, 5, 14)\n    c( -3, 7, 5, 24, 17, 37)\n    c( 12, 13, 23, 28, 24, 32)\n    c( 3, 16, 61, 57, 81, 57)\n    c( 11, 0, 25, 9, 31, 20)\n    c( 7, 14, 7, 20, 0, 20)\n    c( -5, 0, -10, 5, -10, 11)\n    c( 0, 6, 9, 8, 20, 4)\n    c( 31, -10, 60, 4, 60, 28)\n    c( 0, 16, 3, 18, 9, 9)\n    c( 6, -10, 17, -2, 40, 33)\n    c( 17, 25, 29, 51, 26, 56)\n    c( -6, 9, 56, 69, 81, 79)\n    c( 17, 7, 86, 109, 80, 119)\n    c( -8, 12, 23, 72, 51, 98)\n    c( 37, 35, 31, 77, -14, 108)\n    c( -21, 14, -50, 25, -66, 25)\n    c( -16, 0, -36, 7, -45, 16)\n    c( -11, 11, -27, 15, -54, 11)\n    c( -42, -6, -43, -5, -27, 25)\n    c( 21, 40, -26, 88, -86, 88)\n    c( -16, 0, -25, 6, -25, 16)\n    c( 0, 8, -11, 30, -25, 48)\n    c( -24, 31, -28, 33, -90, 32)\n    c( -47, -1, -68, -5, -75, -16)\n    c( -8, -12, -10, -11, -10, 8)\n    c( 0, 12, -4, 22, -8, 22)\n    c( -14, 0, -53, -46, -45, -53)\n    c( 3, -4, -1, -7, -11, -7)\n    c( -9, 0, -14, 5, -11, 10)\n    c( 4, 6, -6, 10, -24, 10)\n    c( -53, 0, -61, 8, -61, 61)\n    c( 0, 48, 0, 49, -31, 49)\n    l( -32, 0)\n    l( 6, 50)\n    c( 5, 44, 4, 50, -13, 50)\n    c( -10, 0, -22, -9, -25, -20)\n    c( -5, -15, -15, -20, -39, -20)\n    c( -31, 0, -34, 3, -40, 38)\n    c( -10, 61, -7, 127, 7, 144)\n    c( 8, 11, 37, 18, 95, 22)\n    l( 82, 6)\n    l( 0, -28)\n    c( 0, -29, 24, -72, 34, -61)\n    c( 3, 3, 2, 20, -4, 37)\n    c( -7, 27, -4, 42, 21, 90)\n    c( 16, 31, 33, 62, 39, 69)\n    c( 5, 7, 10, 17, 10, 22)\n    c( 0, 5, 11, 18, 25, 29)\n    c( 14, 11, 25, 25, 25, 31)\n    c( 0, 10, 37, 24, 56, 20)\n    c( 22, -4, 22, 3, -1, 27)\n    c( -21, 23, -27, 25, -40, 14)\n    c( -14, -12, -15, -11, -4, 13)\n    c( 10, 22, 19, 27, 50, 27)\n    c( 53, 0, 73, 9, 58, 26)\n    c( -6, 8, -15, 11, -20, 8)\n    c( -5, -3, -9, 2, -9, 10)\n    c( 0, 9, -6, 16, -14, 16)\n    c( -7, 0, -25, 12, -40, 27)\n    c( -21, 21, -29, 24, -36, 14)\n    c( -10, -17, -40, -7, -40, 12)\n    c( 0, 10, -58, 47, -74, 47)\n    c( -2, 0, -2, -34, 0, -76)\n    c( 3, -72, 2, -75, -19, -72)\n    c( -14, 2, -23, 11, -25, 26)\n    c( -3, 17, -10, 22, -35, 22)\n    c( -64, 0, -74, 7, -70, 53)\n    c( 2, 25, -2, 44, -9, 49)\n    c( -8, 5, -1, 8, 20, 8)\n    c( 21, 0, 32, 5, 32, 14)\n    c( 0, 8, 14, 17, 30, 21)\n    c( 35, 8, 32, 24, -4, 18)\n    c( -16, -3, -31, 2, -46, 17)\n    c( -17, 17, -24, 19, -31, 9)\n    c( -4, -7, -5, -17, -3, -21)\n    c( 3, -4, -29, -8, -71, -8)\n    c( -44, 0, -74, 4, -70, 9)\n    c( 3, 5, -3, 12, -12, 15)\n    c( -16, 5, -308, 38, -308, 35)\n    c( 0, -1, -16, -4, -35, -8)\n    z\n)\n\n\npath1( style( FILL, 0x000000)\n    M( 3110, 1985)\n    c( -19, -7, -52, -16, -73, -20)\n    c( -24, -4, -35, -10, -31, -17)\n    c( 5, -7, 1, -9, -9, -5)\n    c( -12, 5, -17, 1, -17, -13)\n    c( 0, -11, 6, -20, 14, -20)\n    c( 35, 0, 20, -15, -17, -18)\n    c( -27, -1, -37, 1, -28, 7)\n    c( 8, 5, 11, 16, 6, 30)\n    c( -6, 21, -8, 21, -24, 7)\n    c( -10, -9, -33, -16, -52, -16)\n    c( -45, -1, -115, -16, -162, -37)\n    c( -35, -15, -39, -15, -54, 0)\n    c( -15, 15, -14, 16, 20, 10)\n    c( 51, -8, 48, 13, -5, 37)\n    c( -60, 27, -90, 25, -167, -14)\n    c( -36, -18, -84, -41, -106, -50)\n    c( -23, -10, -46, -26, -53, -37)\n    c( -11, -16, -9, -19, 9, -19)\n    c( 16, 0, 19, -4, 14, -20)\n    c( -8, -26, 8, -26, 44, 1)\n    c( 42, 31, 71, 7, 34, -29)\n    c( -12, -13, -31, -16, -85, -13)\n    c( -59, 2, -74, -1, -112, -23)\n    c( -25, -14, -56, -26, -70, -26)\n    c( -14, 0, -26, -4, -26, -10)\n    c( 0, -5, -10, -10, -21, -10)\n    c( -19, 0, -20, -2, -8, -16)\n    c( 11, -14, 10, -19, -11, -36)\n    c( -13, -10, -33, -18, -44, -17)\n    c( -36, 2, -42, 0, -64, -30)\n    c( -25, -34, -20, -71, 10, -71)\n    c( 23, 0, 88, 37, 88, 50)\n    c( 0, 4, 8, 10, 18, 13)\n    c( 9, 3, 41, 14, 69, 25)\n    l( 53, 20)\n    l( 30, -34)\n    c( 16, -19, 30, -40, 30, -46)\n    c( 0, -7, 6, -3, 14, 8)\n    c( 13, 17, 12, 21, -10, 42)\n    c( -27, 26, -24, 43, 6, 35)\n    c( 21, -6, 44, -68, 42, -110)\n    c( -1, -14, 4, -23, 13, -23)\n    c( 10, 0, 15, 10, 15, 29)\n    c( 0, 31, 23, 57, 40, 46)\n    c( 7, -4, 10, -15, 7, -25)\n    c( -8, -33, 11, -51, 48, -44)\n    c( 47, 9, 58, -1, 38, -34)\n    c( -10, -15, -23, -31, -30, -37)\n    c( -6, -5, -13, -19, -16, -30)\n    c( -4, -19, -5, -19, -6, 1)\n    c( -1, 19, -9, 22, -67, 27)\n    c( -39, 4, -74, 2, -86, -4)\n    c( -25, -13, -104, 29, -100, 53)\n    c( 4, 24, -25, 29, -133, 24)\n    c( -85, -5, -102, -9, -132, -31)\n    c( -73, -57, -183, -214, -183, -264)\n    c( 0, -7, -9, -28, -20, -45)\n    l( -19, -32)\n    l( 36, -71)\n    c( 22, -44, 45, -75, 60, -82)\n    c( 29, -13, 107, -14, 150, -2)\n    c( 24, 7, 41, 6, 62, -5)\n    c( 45, -22, 55, -39, 43, -73)\n    c( -9, -25, -6, -35, 16, -67)\n    c( 25, -37, 27, -45, 28, -174)\n    c( 1, -134, 8, -180, 49, -289)\n    c( 29, -78, 31, -81, 83, -81)\n    c( 41, 0, 53, 5, 90, 39)\n    c( 32, 29, 42, 46, 42, 69)\n    c( 0, 21, 6, 32, 19, 37)\n    c( 13, 4, 20, 19, 25, 53)\n    c( 5, 37, 14, 56, 41, 82)\n    c( 49, 47, 62, 91, 40, 136)\n    c( -26, 56, -7, 95, 93, 188)\n    c( 23, 22, 42, 44, 42, 50)\n    c( 0, 6, 11, 35, 25, 64)\n    l( 24, 52)\n    l( -23, 0)\n    c( -90, 0, -119, 25, -161, 139)\n    c( -39, 105, -47, 180, -18, 177)\n    c( 18, -1, 36, -39, 48, -104)\n    c( 6, -31, 59, -169, 69, -180)\n)\npath2(   // to overcome out of memory when compiling macro\n    c( 2, -1, 25, 9, 51, 23)\n    c( 26, 14, 53, 25, 59, 25)\n    c( 14, 0, 96, 76, 96, 89)\n    c( 0, 6, -11, 27, -25, 47)\n    c( -14, 20, -25, 32, -25, 25)\n    c( 0, -6, -11, -11, -25, -11)\n    c( -14, 0, -25, 5, -25, 11)\n    c( 0, 5, -4, 8, -9, 4)\n    c( -14, -8, -31, 28, -31, 64)\n    c( 0, 41, 22, 40, 41, -1)\n    c( 10, -24, 22, -34, 42, -36)\n    c( 15, -2, 27, -8, 27, -13)\n    c( 0, -5, 12, -9, 28, -9)\n    c( 75, 0, 100, -11, 128, -56)\n    c( 16, -24, 34, -44, 41, -44)\n    c( 7, 0, 15, -12, 19, -27)\n    c( 13, -59, 16, -70, 36, -125)\n    c( 23, -66, 43, -74, 52, -23)\n    c( 4, 19, 11, 35, 16, 35)\n    c( 6, 0, 10, 9, 10, 20)\n    c( 0, 11, 16, 34, 35, 51)\n    c( 19, 17, 37, 39, 40, 50)\n    c( 4, 10, 17, 22, 30, 25)\n    c( 18, 4, 31, -3, 59, -33)\n    c( 19, -21, 36, -46, 36, -55)\n    c( 0, -11, 8, -18, 20, -18)\n    c( 24, 0, 35, -35, 27, -90)\n    c( -3, -27, -1, -43, 10, -51)\n    c( 8, -7, 24, -31, 36, -53)\n    c( 22, -41, 22, -41, 25, -13)\n    c( 2, 20, -5, 38, -28, 63)\n    c( -26, 30, -30, 41, -24, 68)\n    c( 3, 17, 8, 33, 9, 34)\n    c( 5, 6, 65, -41, 65, -50)\n    c( 0, -14, 22, -8, 36, 10)\n    c( 21, 27, 16, 56, -15, 100)\n    c( -28, 38, -29, 41, -13, 56)\n    c( 10, 8, 26, 14, 37, 14)\n    c( 34, -3, 101, 50, 129, 101)\n    l( 26, 48)\n    l( -30, 54)\n    c( -21, 39, -26, 57, -18, 66)\n    c( 8, 10, 3, 14, -21, 19)\n    c( -34, 7, -50, 22, -34, 33)\n    c( 5, 3, 15, 15, 21, 26)\n    c( 11, 19, 11, 19, 12, -2)\n    c( 0, -18, 6, -23, 25, -23)\n    c( 14, 0, 25, -4, 25, -8)\n    c( 0, -15, 58, -77, 65, -70)\n    c( 4, 4, -3, 23, -15, 43)\n    c( -25, 41, -21, 85, 8, 85)\n    c( 10, 0, 31, 13, 46, 29)\n    l( 29, 30)\n    l( 19, -22)\n    l( 19, -22)\n    l( -10, 22)\n    c( -6, 12, -11, 30, -11, 39)\n    c( 0, 18, -47, 74, -62, 74)\n    c( -5, 0, -4, -10, 2, -22)\n    c( 9, -18, 6, -17, -10, 5)\n    c( -12, 15, -30, 27, -40, 27)\n    c( -18, 0, -37, 46, -25, 59)\n    c( 4, 3, 32, 6, 63, 5)\n    c( 41, 0, 60, 4, 69, 15)\n    c( 10, 14, 15, 12, 42, -13)\n    c( 17, -17, 31, -37, 31, -47)\n    c( 0, -9, 17, -32, 38, -50)\n    c( 35, -31, 37, -32, 40, -11)\n    c( 2, 15, -8, 31, -32, 53)\n    c( -20, 17, -36, 34, -36, 38)\n    c( 0, 4, 16, 13, 35, 20)\n    c( 35, 12, 46, 35, 23, 44)\n    c( -7, 3, 3, 3, 22, 0)\n    c( 32, -5, 34, -4, 19, 11)\n    c( -9, 10, -45, 21, -85, 28)\n    c( -38, 5, -80, 16, -94, 23)\n    c( -16, 8, -46, 11, -81, 8)\n    c( -42, -4, -75, 1, -125, 17)\n    c( -38, 12, -73, 26, -79, 31)\n    c( -13, 13, -78, 11, -70, -1)\n    c( 8, -13, -138, -13, -151, 0)\n    c( -6, 6, -29, 11, -52, 13)\n    c( -32, 1, -42, 6, -42, 20)\n    c( 0, 21, -30, 22, -80, 2)\n    z\n)\n\n    \npath( style( FILL, 0x000000)\n    M( 3852, 795)\n    c( 6, -14, 17, -25, 24, -25)\n    c( 7, 0, 31, -18, 53, -39)\n    c( 40, -38, 92, -67, 77, -42)\n    c( -4, 6, -2, 11, 4, 11)\n    c( 19, 0, 60, -32, 60, -46)\n    c( 0, -8, 9, -14, 20, -14)\n    c( 25, 0, 25, 11, -1, 44)\n    c( -12, 16, -16, 26, -8, 26)\n    c( 22, 0, -24, 41, -75, 67)\n    c( -26, 13, -53, 22, -60, 20)\n    c( -6, -3, -20, 1, -31, 9)\n    c( -10, 8, -31, 14, -47, 14)\n    c( -26, 0, -27, -2, -16, -25)\n    z\n)\n\npath( style( FILL, 0x000000)\n    M( 3820, 606)\n    c( 0, -9, -4, -16, -10, -16)\n    c( -5, 0, -10, -10, -10, -22)\n    c( -1, -23, -1, -23, -16, -3)\n    c( -15, 20, -15, 20, -35, -5)\n    c( -10, -14, -22, -34, -25, -46)\n    c( -3, -11, -21, -28, -39, -38)\n    c( -19, -11, -42, -27, -51, -38)\n    c( -22, -23, -25, -81, -7, -132)\n    c( 7, -21, 13, -50, 13, -63)\n    c( 0, -22, 3, -25, 28, -19)\n    c( 15, 3, 43, 9, 62, 12)\n    c( 19, 4, 43, 13, 52, 21)\n    c( 20, 17, 73, 10, 100, -14)\n    c( 15, -13, 20, -14, 34, -2)\n    c( 14, 11, 16, 10, 14, -6)\n    c( -1, -11, 1, -31, 5, -44)\n    c( 7, -21, 12, -23, 63, -19)\n    c( 46, 4, 60, 10, 83, 36)\n    c( 39, 44, 54, 105, 38, 155)\n    c( -7, 21, -18, 41, -25, 45)\n    c( -14, 8, -64, 109, -64, 129)\n    c( 0, 7, -9, 27, -19, 44)\n    l( -19, 32)\n    l(-7, -46)\n    c( -8, -55, -27, -65, -66, -35)\n    c( -23, 18, -28, 29, -24, 51)\n    c( 3, 21, 1, 27, -13, 27)\n    c( -9, 0, -27, 3, -39, 6)\n    c( -17, 5, -23, 2, -23, -10)\n    z\n)    \n\n}\n// --- spline interpolation ( inspired from revers https://www.shadertoy.com/view/MlGSz3 )\nvec2 interpolate(vec2 G1, vec2 G2, vec2 G3, vec2 G4, float t)\n{\n    vec2 A = G4-G1 + 3.*(G2-G3),\n         B = 3.*(G1-2.*G2+G3),\n         C = 3.*(G2-G1),\n         D = G1;\n    return t * (t * (t * A + B) + C) + D;\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) \n{\n\tvec2 pa = p-a, ba = b-a,\n\t     d = pa - ba * clamp(dot(pa, ba) / dot(ba, ba) , 0., 1.); // distance to segment\n    if  ( (a.y>p.y) != (b.y>p.y) &&\n           pa.x < ba.x * pa.y / ba.y ) S = -S;     // track interior vs exterior.\n\treturn dot(d,d); //length(d);                  // optimization by deferring sqrt\n}\n// interior detection (sign S): ( thanks TimoKinnunen https://www.shadertoy.com/view/4lySWd )\n// see http://web.archive.org/web/20161116163747/https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html - previously on https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\nfloat bezier( vec2 uv, vec2 A, vec2 B, vec2 C, vec2 D)    \n{\n    //float d = 1e5;                               // for global field\n    vec2 p = A;\n    for (float t = 1.; t <= N; t++) {\n        vec2 q = interpolate(A, B, C, D, t/N);\n        float l = line(uv, p, q);\n        d = min(d, l );\n\t\tp = q;\n\t}\n    // line(uv, p, D); // explicit last segment to avoid approx (and thus leaks) ?\n\treturn d;\n}\n\nvoid draw(float d, inout vec4 O) \n{\n    d = min(sqrt(d)*contrast,1.);                // optimization by deferring sqrt here\n    O = mix(COL, O, fill>0. ? .5+.5*S*d : d);    // paint \n}\n\n\n// sphere mapping from https://www.shadertoy.com/view/XstXzs\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    O = vec4(1);\n  //SVG( U/R.x*1.78, O ); return;                // display map\n    \n    float t = iTime-1.2,y,g,\n        zoom = exp2(2.*sin(t));  // zoom = 1.;\n    U = (U+U-R) / R.y *zoom;  \n    U.x = .5*acos( U.x / sin( U.y = -acos(U.y) )) - t; // longitude / lattitude\n    contrast = R.y/2e3/zoom;\n    SVG(vec2(0,-.15)+vec2(1.78,1.2)*fract(U/3.14),O);  // map\n  //vec2 V = step(.995,cos(8.*U)); O -= V.x+V.y;     // debug: show longitude/lattitude\n    // Earth color\n    #define SQR(x) ((x)*(x))\n    y = abs(-U.y/1.57-1.); g = smoothstep(.03,.0,SQR(y-.27));\n    O = mix(vec4(sqrt(g),.6,0,1),vec4(0,0,1,0), O);\n  //O += step(.8,y);\n    // clouds\n#define T(U)   2.*texture(iChannel0,vec2(1,2)/2.*(U)/3.14).r \n    O = mix(O,vec4(1), T(U)*T(2.*U)*T(4.*U)*T(8.*U))\n        + 1e-5/U.x;                      // trick for black background\n // O = mix(O,vec4(1), (T(U)+.5*T(2.*U)+.25*T(4.*U))/2.);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}