{
    "Shader": {
        "info": {
            "date": "1701119619",
            "description": "hand draw effect original idea by  flockaroo see https://www.shadertoy.com/view/XtVGD1",
            "flags": 2,
            "hasliked": 0,
            "id": "dl3BWn",
            "likes": 3,
            "name": "Sketch (Tabyltop)",
            "published": 3,
            "tags": [
                "effect",
                "postprocess",
                "sketch",
                "pencil",
                "drawing",
                "hand"
            ],
            "usePreview": 0,
            "username": "DrieStone",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "// created by sofiene71 - 2017\n//original idea by  flockaroo see https://www.shadertoy.com/view/XtVGD1\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// trying to resemle some hand drawing style\n\n\n#define SHADERTOY\n#ifdef SHADERTOY\n#define Res0 iChannelResolution[0].xy\n#define Res1 iChannelResolution[1].xy\n#else\n#define Res0 textureSize(iChannel0,0)\n#define Res1 textureSize(iChannel1,0)\n#define iResolution Res0\n#endif\n\n#define Res  iResolution.xy\n\n#define randSamp iChannel1\n#define colorSamp iChannel0\n\n\n\nvec4 getCol(vec2 pos)\n{\n    // take aspect ratio into account\n    vec2 uv=pos/Res.xy;\n    vec4 c1=texture(iChannel0,uv);\n    vec4 e=smoothstep(vec4(-0.05),vec4(-0.0),vec4(uv,vec2(1)-uv));\n    c1=mix(vec4(1,1,1,0),c1,e.x*e.y*e.z*e.w);\n    float d=clamp(dot(c1.xyz,vec3(-.5,1.,-.5)),0.0,1.0);\n    vec4 c2=vec4(.7);\n    return min(mix(c1,c2,1.8*d),.7);\n}\n\nvec4 getColHT(vec2 pos)\n{\n \treturn smoothstep(0.795,1.05,getCol(pos)*.8+.2+1.0);\n}\n\nfloat getVal(vec2 pos)\n{\n    vec4 c=getCol(pos);\n \treturn pow(dot(c.xyz,vec3(.333)),1.)*1.;\n}\n\nvec2 getGrad(vec2 pos, float eps)\n{\n   \tvec2 d=vec2(eps,0.);\n    return vec2(\n        getVal(pos+d.xy)-getVal(pos-d.xy),\n        getVal(pos+d.yx)-getVal(pos-d.yx)\n    )/eps/2.;\n}\n\n\n  float lum( vec3 c) {\n              return dot(c, vec3(0.3, 0.59, 0.11));\n             }\n\n\n vec3 clipcolor( vec3 c) {\n                  float l = lum(c);\n                  float n = min(min(c.r, c.g), c.b);\n                  float x = max(max(c.r, c.g), c.b);\n                \n                 if (n < 0.0) {\n                     c.r = l + ((c.r - l) * l) / (l - n);\n                     c.g = l + ((c.g - l) * l) / (l - n);\n                     c.b = l + ((c.b - l) * l) / (l - n);\n                 }\n                 if (x > 1.25) {\n                     c.r = l + ((c.r - l) * (1.0 - l)) / (x - l);\n                     c.g = l + ((c.g - l) * (1.0 - l)) / (x - l);\n                     c.b = l + ((c.b - l) * (1.0 - l)) / (x - l);\n                 }\n                 return c;\n             }\n\n vec3 setlum( vec3 c,  float l) {\n                 float d = l - lum(c);\n                 c = c + vec3(d);\n                 return clipcolor(0.85*c);\n }\n\n#define AngleNum 3\n\n#define SampNum 9\n\n#define PI2 6.28318530717959\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = fragCoord;\n    vec3 col = vec3(0);\n    vec3 col2 = vec3(0);\n    float sum=0.;\n    \n    for(int i=0;i<AngleNum;i++)\n    {\n        float ang=PI2/float(AngleNum)*(float(i)+0.8);\n        vec2 v=vec2(cos(ang),sin(ang));\n        for(int j=0;j<SampNum;j++)\n        {\n            vec2 dpos  = v.yx*vec2(1,-1)*float(j)*iResolution.y/920.;\n            vec2 dpos2 = 5.0*( v.xy*float(j*j)/float(SampNum)*.5*iResolution.y/920.);\n\t        vec2 g;\n            float fact;\n            float fact2;\n            float s=3.5;\n\n          \n            \n                vec2 pos2=pos+s*dpos+dpos2;\n                \n            \tg=getGrad(pos2,0.08);\n            \tfact=dot(g,v)-.5*abs(dot(g,v.yx*vec2(1,-1)));\n            \tfact2=dot(normalize(g+vec2(.0001)),v.yx*vec2(1,-1));\n                \n                fact=clamp(fact,0.,.05);\n                fact2=abs(fact2);\n                \n                fact*=1.-float(j)/float(SampNum);\n            \tcol += fact;\n            \tcol2 += fact2;\n            \tsum+=fact2;\n            \n        }\n    }\n    col/=float(SampNum*AngleNum)*0.65/sqrt(iResolution.y);\n    col2/=sum;\n    col.x*=1.6;\n    col.x=1.-col.x;\n    col.x*=col.x*col.x;\n\n    vec2 s=sin(pos.xy*.1/sqrt(iResolution.y/720.));\n    vec3 karo=vec3(1);\n    karo-=.75755*vec3(.25,.1,.1)*dot(exp(-s*s*80.),vec2(1.));\n    float r=length(pos-iResolution.xy*.5)/iResolution.x;\n    float vign=1.-r*r*r;\n\tfragColor = vec4(vec3(col.x*col2*karo*vign ),1);\n    vec4 origCol = texture(iChannel0, gl_FragCoord.xy/iResolution.xy);\n    vec4 overlayColor = vec4(0.3755,0.05,0.,0.0)*origCol;\n           \n    fragColor = vec4( setlum(1.25*overlayColor.rgb, lum(fragColor.rgb)) * 1.0, 0.);\n    fragColor.rgb -= 0.75- clamp (origCol.r + origCol.g + origCol.b , 0.0 , 0.75);\n    //fragColor += 0.077;\n    //fragColor = min(fragColor , 5.5*texture (iChannel0 , fragCoord/iResolution.xy));\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}