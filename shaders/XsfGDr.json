{
    "Shader": {
        "info": {
            "date": "1366940294",
            "description": "Internal reflections in a diamond with far too few facets. Not sure if this actually works on anything but my machine. I wish I weren't too lazy to try to write down plane equations for a real brilliant cut.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsfGDr",
            "likes": 64,
            "name": "Diamond #1",
            "published": 3,
            "tags": [
                "raytracing",
                "diamond"
            ],
            "usePreview": 1,
            "username": "WAHa_06x36",
            "viewed": 4450
        },
        "renderpass": [
            {
                "code": "void intersect_plane(vec3 dir,vec3 pos,vec3 planenormal,float planeoffset,inout float near,inout float far,inout vec3 nearnormal,inout vec3 farnormal)\n{\n\tfloat negheight=planeoffset-dot(pos,planenormal);\n\tfloat slope=dot(dir,planenormal);\n\tfloat t=negheight/slope;\n\n\tif(slope<0.0)\n\t{\n\t\tif(t>near)\n\t\t{\n\t\t\tnear=t;\n\t\t\tnearnormal=planenormal;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(t<far)\n\t\t{\n\t\t\tfar=t;\n\t\t\tfarnormal=planenormal;\n\t\t}\n\t}\n}\n\nint find_intersection(vec3 dir,vec3 pos,out float near,out float far,out vec3 nearnormal,out vec3 farnormal)\n{\n\tnear=-10000.0;\n\tfar=10000.0;\n\tnearnormal=vec3(0.0);\n\tfarnormal=vec3(0.0);\n\n\tintersect_plane(dir,pos,normalize(vec3(0.0,1.0,0.0)),0.4,near,far,nearnormal,farnormal);\n\tif(far<0.0 || near>far) return 0;\n\tintersect_plane(dir,pos,normalize(vec3(-1.0, 1.0, 1.0)),1.0,near,far,nearnormal,farnormal);\n\tif(far<0.0 || near>far) return 0;\n\tintersect_plane(dir,pos,normalize(vec3( 1.0, 1.0, 1.0)),1.0,near,far,nearnormal,farnormal);\n\tif(far<0.0 || near>far) return 0;\n\tintersect_plane(dir,pos,normalize(vec3(-1.0,-1.0, 1.0)),1.0,near,far,nearnormal,farnormal);\n\tif(far<0.0 || near>far) return 0;\n\tintersect_plane(dir,pos,normalize(vec3( 1.0,-1.0, 1.0)),1.0,near,far,nearnormal,farnormal);\n\tif(far<0.0 || near>far) return 0;\n\tintersect_plane(dir,pos,normalize(vec3(-1.0, 1.0,-1.0)),1.0,near,far,nearnormal,farnormal);\n\tif(far<0.0 || near>far) return 0;\n\tintersect_plane(dir,pos,normalize(vec3( 1.0, 1.0,-1.0)),1.0,near,far,nearnormal,farnormal);\n\tif(far<0.0 || near>far) return 0;\n\tintersect_plane(dir,pos,normalize(vec3(-1.0,-1.0,-1.0)),1.0,near,far,nearnormal,farnormal);\n\tif(far<0.0 || near>far) return 0;\n\tintersect_plane(dir,pos,normalize(vec3( 1.0,-1.0,-1.0)),1.0,near,far,nearnormal,farnormal);\n\tif(far<0.0 || near>far) return 0;\n\n\treturn 1;\n}\n\nvec3 environment(vec3 dir)\n{\n\tvec3 rgb=texture(iChannel0,vec3(dir.x,dir.y,-dir.z)).xyz;\n\tfloat l=(rgb.x+rgb.y+rgb.z)/3.0;\n\tfloat l2=pow(l,4.0)*4.0;\n\treturn rgb/l*l2;\n//return fract(dir*6.0+0.34);\n}\n\n\nvoid split_light(vec3 incomingdir,vec3 normal,float eta,out vec3 reflecteddir,out vec3 refracteddir,out float reflectedfraction)\n{\n\treflecteddir=incomingdir-2.0*dot(incomingdir,normal)*normal;\n\n\tfloat k=1.0-eta*eta*(1.0-dot(normal,incomingdir)*dot(normal,incomingdir));\n\tif(k>0.0)\n\t{\n\t\trefracteddir=eta*incomingdir-(eta*dot(normal,incomingdir)+sqrt(k))*normal;\n\t\tfloat f=pow(1.0-eta,2.0)/pow(1.0+eta,2.0);\n\t\treflectedfraction=f+(1.0-f)*pow(1.0+dot(incomingdir,normal),5.0); // Approximate.\n\t}\n\telse\n\t{\n\t\treflectedfraction=1.0;\n\t}\n}\n\nmat3 inv;\n\nvec3 gather_light(vec3 dir,vec3 pos,vec3 normal,float eta)\n{\n\tvec3 reflecteddir,refracteddir;\n\tfloat reflectedfraction;\n\n\tsplit_light(dir,normal,1.0/eta,reflecteddir,refracteddir,reflectedfraction);\n\n\tvec3 light=environment(inv*reflecteddir)*reflectedfraction;\n\n\tdir=refracteddir;\n\tfloat fraction=1.0-reflectedfraction;\n\n\tfor(int i=0;i<32;i++)\n\t{\n\t\tfloat near,far;\n\t\tvec3 nearnormal,farnormal;\n\t\tfind_intersection(dir,pos,near,far,nearnormal,farnormal);\n\n\t\tpos=pos+dir*far;\n\n\t\tsplit_light(dir,-farnormal,eta,reflecteddir,refracteddir,reflectedfraction);\n\n\t\tif(reflectedfraction!=1.0) light+=environment(inv*refracteddir)*(1.0-reflectedfraction)*fraction;\n\n\t\tdir=reflecteddir;\n\t\tfraction*=reflectedfraction;\n\t}\n//\tvec3 refractedlight=environment(refracteddir)*(1.0-reflectedfraction);\n\n\treturn light;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 position=(2.0*fragCoord.xy-iResolution.xy)/max(iResolution.x,iResolution.y);\n\tvec3 pos=vec3(0.0,0.0,-5.0);\n//\tvec3 dir=normalize(vec3(position,1.0-sqrt(position.x*position.x+position.y*position.y)));\n\tvec3 dir=normalize(vec3(position,1.0));\n\n\tfloat a=sin(iTime*0.3);\n\tfloat b=iTime*0.2;\n\tmat3 rot=mat3( cos(b),0.0,-sin(b),\n\t\t          0.0,1.0,    0.0,\n\t\t       sin(b),0.0, cos(b));\n\trot*=mat3(1.0,    0.0,   0.0,\n\t\t      0.0, cos(a),sin(a),\n\t\t      0.0,-sin(a),cos(a));\n\n\tinv=transpose(rot);\n\tvec3 localdir=rot*dir;\n\tvec3 localpos=rot*pos;\n\n\tfloat near,far;\n\tvec3 localnearnormal,localfarnormal;\n\tint hit=find_intersection(localdir,localpos,near,far,localnearnormal,localfarnormal);\n\tif(hit!=0)\n\t{\n\t\tvec3 newlocalpos=localpos+localdir*near;\n\t\tvec3 light;\n\t\t// http://refractiveindex.info/?group=CRYSTALS&material=C\n\t\tlight=gather_light(localdir,newlocalpos,localnearnormal,2.4105)*vec3(1.0,0.0,0.0); // 650 nm\n\t\tlight+=gather_light(localdir,newlocalpos,localnearnormal,2.42602)*vec3(0.0,1.0,0.0); // 532 nm\n\t\tlight+=gather_light(localdir,newlocalpos,localnearnormal,2.43883)*vec3(0.0,0.0,1.0); // 473 nm\n\t\tfragColor=vec4(light,1.0);\n\t}\n\telse\n\t{\n\t\tfragColor=vec4(environment(dir),1.0);\n\t}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}