{
    "Shader": {
        "info": {
            "date": "1680179341",
            "description": "Test of clouds generated by cheap pseudo sine wave",
            "flags": 0,
            "hasliked": 0,
            "id": "DsdXRX",
            "likes": 13,
            "name": "Pacific Sunset",
            "published": 3,
            "tags": [
                "sea",
                "clouds"
            ],
            "usePreview": 0,
            "username": "guil",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nconst vec3 l = vec3(1.);\nconst vec3 sundir = normalize( vec3(.3,.1,1.) );\nconst vec3 suncol = vec3(1.,.7,.4);\nconst float low = 5.;\nconst float high = 8.;\nconst float dens = 5.;\n\nvec2 sn(vec2 x){x= fract(x*.15);return 32.*x*(x-.5)*(x-1.);}\nvec3 sn(vec3 x){x= fract(x*.15);return 32.*x*(x-.5)*(x-1.);}\n\nfloat cloud(in vec3 p) {\n\tfloat s=.5,\n          e=max(low-p.y,0.)+max(p.y-high,0.)+dens,\n          h=smoothstep(0.,2.,2.*(p.y-low));\n    p.xz *=.7;\n    for(int i=0;i<7;i++)\n            p.xz *= rot(1.),\n            e -= h*abs(dot(sn(p*s+sn(1.7*p.zxy*s)),l*.5))/s,\n            s *= 1.7;\n    return .7*e;\n}\n\nfloat cloud1(in vec3 p) {\n\tfloat s=.5,\n          e=max(low-p.y,0.)+max(p.y-high,0.)+dens,\n          h=smoothstep(0.,2.,2.*(p.y-low));\n    p.xz *=.7;\n    for(int i=0;i<4;i++)\n            p.xz *= rot(1.),\n            e -= h*abs(dot(sn(p*s+sn(1.7*p.zxy*s)),l*.5))/s,\n            s *= 1.7;\n    return .7*e;\n}\n\n\nfloat sea(in vec3 p) {\t\n\tfloat s=1.,f;\t\n\tfor(f=p.y;s<1e2;s*=1.7)\n            p.xz*=rot(1.),            \n            f+=dot(sn(p.xz*s*.4+2.*sn(.7*p.zx*s*.4))/s,l.xz);    \n    return f*.7;\n}\n\nvec3 sky( in vec3 ro, in vec3 rd ,in vec2 res)\n{ \n    // background sky : modified from IQ clouds        \n    float sun = max( dot(sundir,rd), 0.0);    \n    vec3 col = vec3(0.6,0.6,0.78) - abs(rd.y)*0.5*vec3(1.0,0.4,.05);    \n    \n    // clouds        \n    float k = res.x, c = res.y;\n    col += suncol*pow( sun+.001, 500.0 )*(1.-4.*c); \n    if(c>.0)\n       col *= 1.-.7*c,\n       col += 3.5*(.5+k)*c*suncol,\n       col += 2.*vec3(0.2,0.08,0.04)*pow( sun, 3.0 )*k;    \n    // sunrays\n    float sh = 0., t, d;    \n    vec3 q = ro+10.*rd;\n    for(int i=0; i<20; ++i)  {  \n        t=1.;\n        for(int j=0; j<5; ++j)\n            d = cloud1(q+sundir*t),\n            t += 1.8*d;       \n        d = cloud(q+sundir*t);        \n        sh += 1./(1.+exp(2.*d)); \n        q += .7*rd;    \n    }\n    col += 1.5/(1.+exp(1.*sh))*suncol;\n    \n    return col;\n}\n\n\nvec3 raycast( in vec3 ro, vec3 rd )\n{\n    float t = 4.,e,e1,f,de=0.,df,d,c=1.,dt=.1,r=1.,t0;\n    vec3 col= vec3(0.),p,skycol,q;\n    for( int i=0; i<64; i++ )\n\t{                \n        p = ro+t*rd;\n        if(p.y<0.)\n            rd.y = -rd.y+.5*(sea(p+.05*rd)-sea(p)), \n            ro = p,\n            t0 = t,\n            t = .1,\n            r = .7,\n            q = p;\n        e = cloud(p),             \n        d = min(p.y+.1,max(e,.06));\n        t += d;\n        if(e<.001)\n            e1 = cloud(p + dt*sundir),\n            de += max(e1-e,0.)/dt/(1.+ exp(-16.*e1));\n        c *= 1./(1.+ exp(-16.*e));        \t\n    }\n    skycol = sky(ro,rd,vec2(.1*de,(1.-c)*.25));        \n    if(r>.9)return skycol;\n    df = max(sea(q+.005*sundir)-sea(q),.0)*1.5+.7;\n    col = skycol*df;\n    float maxd = 40.;\n    col = mix(r*col, skycol, smoothstep(.1, .99, t0/maxd));\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n\tfloat t = iTime;\n    vec2  R = iResolution.xy,\n          q = ( u+u - R ) / R.y;   \n       \n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    // camera\n    \n    vec3 ro = vec3(0.), rd = normalize(vec3(q,3.) );\n    rd.yz *= rot(-.05); \n    rd.xz *= rot(2.5*m.x);\n    ro.x -=t*.4;\n    ro.y += 2.;\n    \n\t// raymarch \n    \n    vec3 col = raycast(ro,rd);\n    \t\n\t// shade\n    \n    col = log(1.+col);\n    col = clamp(col,0.,1.);\n    fragColor = vec4( col, 1.0 );\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}