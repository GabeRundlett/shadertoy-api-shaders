{
    "Shader": {
        "info": {
            "date": "1699008567",
            "description": "A pseudo-3d animation by morphing glowing 2d shapes.",
            "flags": 0,
            "hasliked": 0,
            "id": "DltcRM",
            "likes": 7,
            "name": "Blue Pentagon",
            "published": 3,
            "tags": [
                "2d",
                "glow",
                "25d",
                "pentagon"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "// Blue Pentagon v0.7.231103 by QuantumSuper\n// pseudo-3d animation by morphing glowing 2d shapes\n// \n\n#define PI 3.14159265359 \n\nvec3 tmUnreal( vec3 x){ //tone map, source: https://www.shadertoy.com/view/llXyWr, thanks at Xor for highlighting\n    return x / (x + .155) * 1.019;\n}\n\nfloat sdPentagon( vec2 p, float r){ //source: https://iquilezles.org/articles/distfunctions2d/\n    const vec3 k = vec3( .809016994, .587785252, .726542528);\n    p.x = abs(p.x);\n    p -= 2.*min( dot(vec2(-k.x,k.y),p), 0.) * vec2( -k.x, k.y);\n    p -= 2.*min( dot(k.xy,p), 0.) * k.xy;\n    p -= vec2( clamp( p.x, -r*k.z, r*k.z), r);    \n    return length(p) * sign(p.y);\n}\n\nfloat myObj(vec2 p, float scale, float speed, float off){\n    return abs(sdPentagon( p/vec2(cos(iTime*speed+off),1.-sin(iTime*speed+off)*p.x/cos(iTime*speed+off)), .85/scale)) + .01;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); //long edge -1 to 1, square aspect ratio\n\tvec3 col = vec3(0);\n    float amp;\n  \n    // Settings\n    float scale = 4. + .5*sin(iTime/8.); //coordinate system scale\n    float matDiff = .33; //material brightness difference   \n    float speed = .5; //speed factor\n    vec3 color1 = vec3( 23,123,250)/256.; //cneon blue\n    vec3 color2 = vec3( 30, 29,215)/256.; //vw2 blue\n    \n    float off=.01; //rotation offset per slice\n    float num = 32.; //number of 2d slices\n\n    // Calculation\n    for(float n=0.;n<num;n++){\n        amp = .01 / max( .01, myObj( uv, scale, speed, n*off)) //draw\n            * ((uv.x/cos(iTime*speed+n*off)*scale*.5+1.5) * (1.-matDiff) + (cos(iTime*speed+PI/2.+n*off)*.5+.5) * matDiff); //lighting\n        col += clamp(amp,.0,1.) * (color1*(1.-n/num)+color2*n/num) / num; //color \n        off *= 1.05 - .05*cos(iTime/PI); //iterate rotation offset\n    }\n      \n    fragColor = vec4( tmUnreal(col), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}