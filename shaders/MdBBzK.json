{
    "Shader": {
        "info": {
            "date": "1501633262",
            "description": "Got the idea form this paper https://arxiv.org/pdf/math-ph/0603065.pdf see Buf A for explanation and stuff to mess with",
            "flags": 32,
            "hasliked": 0,
            "id": "MdBBzK",
            "likes": 0,
            "name": "Cut & Project",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 578
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nGiven a basis for a vector space, a lattice in that space generated by the basis is the set of all\nintegral linear combinations of those vectors. Lattices that are invariant under discrete subgroups\nof translations can be used as mathematical models for crystals. Quasicrystals are aperiodics sets\nof points with discrete rotational symmetry. Quasicrystals can be modeled as cut & project sets,\nwhere you take two subspaces of your vector space whose direct product is the whole space, project\nthe lattice onto one of the subspaces, determine whether or not it falls into a subset of the space\ncalled the \"acceptance window\", if it does project it onto the other subspace and that's a part of\nyour C&P set. Unfortuantely, I couldn't figure out what kind of lattices/acceptance windows give \nquasicrystals, so I decided to just publish this for people to play with. The shader can do 3 and\n4 dimensional lattices, uncomment line 14 and re-initialize to see the 4D version.\n*/\n\n#define fourD\n\n//make this smaller for bigger dots\n#define inverse_dot_intensity 50.0\n//make this larger to make the screen encompass more space\n#define screen_scale 5.0\n\n//basis vector stuff\nconst float isqrt2 = inversesqrt(2.0);\nconst float isqrt3 = inversesqrt(3.0);\nconst float isqrt6 = inversesqrt(6.0);\nconst float isqrt10 = inversesqrt(10.0);\nconst float phi = 0.5 * (1.0 + inversesqrt(0.2));\n//3D basis vectors\nconst vec3 b0 = vec3(0.5, 0.5 / isqrt3, 0);\nconst vec3 b1 = vec3(-0.5, 0.5 / isqrt3, 0);\nconst vec3 b2 = vec3(0, -0.5 / isqrt3, .5);\n//4D basis vectors\nconst vec4 c0 = vec4(1, 0, 0, 0);\nconst vec4 c1 = vec4(0.5);\nconst vec4 c2 = vec4(0, 1, 0, 0);\nconst vec4 c3 = vec4(0, 0.5, 0.5 / phi, -0.5 * phi);\n\n//go from integer coefficients to position in the lattice\nvec3 calcPos3(ivec3 n){\n    vec3 v = vec3(n);\n    return v.x * b0 + v.y * b1 + v.z * b2;\n}\n\nvec4 calcPos4(ivec4 n){\n    vec4 v = vec4(n);\n    return v.x * c0 + v.y * c1 + v.z * c2 + v.w * c3;\n}\n\nfloat firstProjection3(vec3 v){\n    return v.z;\n}\n\nvec2 firstProjection4(vec4 v){\n    return vec2(dot(normalize(vec4(0.5, 1.3, 8.6, -7.1)), v),\n                dot(normalize(vec4(-3.9, 7.668, 3.051, -7.8)), v));\n    return v.zw;\n}\n\nvec2 secondProjection3(vec3 v){\n    return v.xy;\n}\n\nvec2 secondProjection4(vec4 v){\n    return vec2(dot(normalize(vec4(-31.8, 36.4, 47.1, 88.89)), v),\n                dot(normalize(vec4(90, 7.1, -9, -2)), v));\n}\n\nbool fitsAcceptanceWindow3(vec3 v){\n    float projectedVector = firstProjection3(v);\n    bool result = abs(projectedVector) < 1.0;\n    return result;\n}\n\nbool fitsAcceptanceWindow4(vec4 v){\n    vec2 projectedVector = firstProjection4(v);\n    bool result = length(projectedVector) < 4.0;\n    return result;\n}\n\n//the functions below are for generating a tuple of integers from a single one in a way that covers\n//the entire lattice.\n\n//rodolphito came up with the 3D version and I generalized it to 4D\nint condense3(int level0){\n    \n    //three ones, six zeroes, three ones, six zeroes, etc.\n    int three = 941362695;\n    //six ones, twelve zeroes, etc.\n    int six = 16515135;\n    //twelve ones\n    int twelve = 4095;\n    \n    //group all bits into groups of three with 6 unnecessary bits between them,\n    //extract them by 'and'ing with three\n    int level1 = three & (\n    \t(level0 >> 0) |\n        (level0 >> 2) |\n        (level0 >> 4)\n    );\n    \n    //put groups of three together to make groups of 6\n    int level2 = six & (\n    \t(level1 >> 0) |\n        (level1 >> 6)\n    );\n    \n    //put two groups of 6 together\n    int level3 = twelve & (\n    \t(level2 >> 0) |\n        (level2 >> 8)\n    );\n    \n    int sgn = ((level3 & 1) << 1) - 1;\n    \n    return sgn * level3 >> 1;\n}\n\nivec3 getLatticePos3(int t){\n    //one, two zeroes, one, two zeroes, etc\n    int helper = 1227133513;    \n    \n    //the first digit in every triple of digits will be in x, the second in y, etc.\n    int x0 = (t >> 0) & helper;\n    int y0 = (t >> 1) & helper;\n    int z0 = (t >> 2) & helper;    \n    \n    //get rid of unnecessary bits\n    int x = condense3(x0);\n    int y = condense3(y0);\n    int z = condense3(z0);\n    \n    return ivec3(x, y, z);\n}\n\nint condense4(int level0){\n    //four ones, eight zeroes, four ones\n\tint four = 218165519;\n    //eight ones, 16 zeroes, eight ones\n    int eight = 4278190335;\n    //sixteen ones\n    int sixteen = 65535;\n    \n    int level1 = four & (\n         (level0 >> 0) |\n         (level0 >> 3) |\n         (level0 >> 6) );\n        \n\tint level2 = eight & (\n         (level1 >> 0) |\n         (level1 >> 12) );\n    \n    int level3 = sixteen & (\n        (level2 >> 0) |\n        (level2 >> 15));\n    \n    int sgn = ((level3 & 1) << 1) - 1;\n    \n    return sgn * level3 >> 1;\n}\n\nivec4 getLatticePos4(int t){\n    int helper = 286331153;\n    \n    int x0 = (t >> 0) & helper;\n    int y0 = (t >> 1) & helper;\n    int z0 = (t >> 2) & helper;\n    int w0 = (t >> 3) & helper;\n    \n    int x = condense4(x0);\n    int y = condense4(y0);\n    int z = condense4(z0);\n    int w = condense4(w0);\n    \n    return ivec4(x, y, z, w);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor -= fragColor;\n    \n    vec2 xy = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    xy *= screen_scale;\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n    if(iFrame > 30){\n    #ifdef fourD\n    ivec4 coords = getLatticePos4(iFrame - 30);\n    vec4 v = calcPos4(coords);\n    if(fitsAcceptanceWindow4(v)){\n        vec2 p = secondProjection4(v);\n        float d = distance(p, xy);\n        fragColor += exp(-inverse_dot_intensity * d)\n            * (.5 + .5 * sin(v));\n    }\n    #else\n    ivec3 coords = getLatticePos3(iFrame - 30);\n    vec3 v = calcPos3(coords);\n    if(fitsAcceptanceWindow3(v)){\n        vec2 p = secondProjection3(v);\n        float d = distance(p, xy);\n        fragColor.xyz += exp(-inverse_dot_intensity * d)\n             * (.5 + .5 * sin(v));\n    }\n    #endif\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}