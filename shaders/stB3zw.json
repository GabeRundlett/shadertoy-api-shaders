{
    "Shader": {
        "info": {
            "date": "1623542901",
            "description": "Inspired by [url=https://www.shadertoy.com/view/slS3Rw]https://www.shadertoy.com/view/slS3Rw[/url]\nLeft side: trig\nRight side: no trig",
            "flags": 0,
            "hasliked": 0,
            "id": "stB3zw",
            "likes": 4,
            "name": "Distance to Ellipse (Iterative)",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "iterative",
                "ellipse"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "float sdEllipse(in vec2 p, in vec2 ab) {\n    p = abs(p);\n    if (ab.y > ab.x) p = p.yx, ab = ab.yx;\n\n    vec2 pab = p * ab;\n    float s1 = ab.x * ab.x - ab.y * ab.y;\n    float s2 = length(pab);\n    float offs = atan(pab.x / pab.y);\n\n    float t = 1.1;\n    for (int n=0; n < 10; n++) {\n        float to = t + offs, t2 = 2.0 * t;\n        float y = 0.5 * s1 * sin(t2) + s2 * cos(to);\n        t -= y / (s1 * cos(t2) - s2 * sin(to));\n        if (abs(y) < 1e-7 * (s2 + s1)) break;\n    }\n\n    pab = p / ab;\n    return length(p - vec2(cos(t), sin(t)) * ab) * sign(dot(pab, pab) - 1.0);\n}\n\n// Trigless version (solving as a quartic in sin(t))\n// Note that the final solution is asin(solveQuartic()) which allows\n// the final position to be calculated without any trig\n// (a*cos(asin(solveQuartic())), b*sin(asin(solveQuartic()))) =\n// (a * sqrt(1 - solveQuartic()^2), b * solveQuartic())\nfloat sdEllipse2(in vec2 p, in vec2 ab) {\n    if (ab.y > ab.x) p = p.yx, ab = ab.yx;\n    p = abs(p);\n\n    // Line (mainly optimization, the solver handles this case just fine)\n    if (abs(ab.x) < 1e-3 || abs(ab.y) < 1e-3) return length(vec2(p.x - clamp(p.x, -ab.x, ab.x), p.y));\n    if (abs(ab.x - ab.y) < 1e-3) return length(p) - ab.x; // Circle (nab = a^2 - b^2 = 0 ---> sq/nab^2 = undefined)\n\n    vec2 abab = ab * ab, pp = p * p * abab;\n    float nab = abab.x - abab.y, sq = pp.x + pp.y;\n    float k = 1.0 + pp.x / pp.y;\n\n    float b = 2.0 / (sqrt(k / sq) * nab);\n    float c = sq / (nab * nab);\n    float e = c / k;\n    c -= 1.0;\n\n    float t = 0.73;\n    for (int n=0; n < 12; n++) {\n        float y = (((t + b) * t + c) * t - b) * t - e;\n        t -= y / (((4.0 * t + 3.0 * b) * t + 2.0 * c) * t - b);\n        if (abs(y) < 1e-7 * (b + e)) break;\n    }\n\n    vec2 pab = p / ab;\n    return length(p - vec2(sqrt(1.0 - t * t), t) * ab) * sign(dot(pab, pab) - 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 10.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 9.0; // Slight lag to maintain visibility\n\n    // Default before interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(6.0, 3.0);\n\n    vec2 ab = abs(mouse);\n    float d = uv.x < 0.0 ? sdEllipse(uv, ab) : sdEllipse2(uv, ab);\n    d *= 0.2; // Undo UV scaling and shrink the isolines a bit for visual purposes\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), smoothstep(0.015, 0.0, abs(d)));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}