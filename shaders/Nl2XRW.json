{
    "Shader": {
        "info": {
            "date": "1627193778",
            "description": "Drag the mouse cursor to change the position of the light source.",
            "flags": 32,
            "hasliked": 0,
            "id": "Nl2XRW",
            "likes": 14,
            "name": "Mandelbrot Normal mapping",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "normalmapping"
            ],
            "usePreview": 0,
            "username": "milesWaugh",
            "viewed": 466
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 k = texture(iChannel2, uv).rgb * 1.1;\n    fragColor = vec4(sqrt(k), 0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define zoomMagnitude 0.0\n#define zoomRate      0.5\n\n//DAVE HOSKINS' HASH FUNCTIONS\n//https://www.shadertoy.com/view/4djSRW\n\nvec2 rnd23(vec3 p3){\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 off = rnd23(vec3(fragCoord, iTime)) - .5;\n    vec2 uv = (fragCoord + off - iResolution.xy * .5) / iResolution.y;\n    int i = 0;\n    vec2 z = uv * ((cos(iTime * zoomRate) + 1.) * zoomMagnitude + 0.09);\n    z -= vec2(.57, .58);\n    vec2 c = z;\n    for (i = 0; i < 1024; i++) {\n        z = vec2(z.x * z.x - z.y * z.y + c.x, 2. * z.x * z.y + c.y);\n        if (dot(z, z) > 4.) {\n            break;\n        }\n    }\n    float j = float(i);\n    float j2 = j - log2(log2(dot(z, z))) + 4.;\n    vec3 dat = vec3(j / 1024., j2 / 1024., 0.);\n    fragColor = vec4(dat, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define lightStrength 30.\n#define ambientLight  0.2\n\n#define pi  3.1415926535897932\n#define pi2 1.57079632679\n\nfloat tex(vec2 p){\n    return pow(texture(iChannel0, p / iResolution.xy).g, .1) * 20.;;\n}\n\nfloat tex2(vec2 p){\n    return pow(1. - texture(iChannel0, p / iResolution.xy).g, 2.);\n}\n\nfloat sm(float x, float a){ //Thingy I solved for integrating the lambert cosine thingy over a solid angle with angle measure a, since the sun has volume in the sky\n    x = acos(x);\n    return (sin(max(-pi2, min(x + a * .5, pi2))) - sin(max(-pi2, min(x - a * .5, pi2)))) / a;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 z = fragCoord;\n    vec2 muv = 3. * (iMouse.xy - iResolution.xy * 0.5) / iResolution.y;\n    vec3 n = vec3(tex(z) - tex(z - vec2(5, 0)), tex(z) - tex(z - vec2(0, 5)), 0.025);\n    n = normalize(n);\n    vec2 z2 = (z - iResolution.xy * 0.5) / (.5 * iResolution.y);\n    float lambert = dot(n, normalize(vec3(muv.x - z2.x, muv.y - z2.y, 1.)));\n    vec2 off = muv - z2;\n    lambert = max(sm(lambert, 0.1), 0.1) / (dot(off, off) * 2. + .1 + tex(z) * 5. - 60.);\n    vec3 col = lambert * vec3(1., 0.5, 0.65) * lightStrength + ambientLight * vec3(0.1, 0.5, 1.) * pow(tex2(z), 5.) * (max(dot(n, vec3(0., 0., 1.) * 2.), 0.) + .1);\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define sampleReprojectionCompensation 0.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord / iResolution.xy;\n    float k = texture(iChannel0, uv).r*2.;\n    vec3 k2 = texture(iChannel1, uv).rgb;\n    k2 = max(k2, 1e-6);\n    float j = round(k * 512.);\n    float o1 = (fract(j/3.) + 0.25) / (cos(500. * k)*5. + 5.);\n    float o2 = (fract(j/3.) + 0.25) / (cos(80.  * k)*5. + 5.);\n    float o3 = (fract(j/3.) + 0.25) / (cos(50.  * k)*5. + 5.);\n    vec3 col = vec3(o1, o2, o3);\n    col = (col*27. + (o1 + o2 + o3)) / 30.;\n    col = 1. - 1. / (1. + k2 * k2 * max(min(col, 1.), 0.));\n    col = clamp(col, 0., 1.);\n    col *= 1.5;\n    float zch = -sin(iTime*.5)*sampleReprojectionCompensation; //Derivative of zoom function lets us predict how to reproject samples\n    uv -= 0.5;\n    uv *= 1. + zch;\n    uv += 0.5;\n    fragColor = vec4((texture(iChannel2, uv).rgb*15. + col)/16., 0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}