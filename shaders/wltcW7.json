{
    "Shader": {
        "info": {
            "date": "1609278544",
            "description": "Line 16 in image to see different ones. might need to adjust the number on line 18 if it gets too bright or dim.",
            "flags": 0,
            "hasliked": 0,
            "id": "wltcW7",
            "likes": 17,
            "name": "Hydrogen Orbits",
            "published": 3,
            "tags": [
                "physics",
                "hydrogen"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 519
        },
        "renderpass": [
            {
                "code": " \nMain {\n    U = 2.*(U-0.5*R)/R.y;\n    vec3 p = vec3(0,0,-60);\n    vec3 d = normalize(vec3(U,1));\n    vec2 t = vec2(iTime);\n    if (iMouse.z>0.)\n        t = 6.2*iMouse.xy/R.x;\n    //p = vec3(105.*U,0);\n    p.xy *= ei(t.x);\n    p.yz *= ei(t.y);\n    d.xy *= ei(t.x);\n    d.yz *= ei(t.y);\n    Q = vec4(0);\n    \n    float n = 5., l = 3., m = 0.;\n    for (int i = 0; i < 100; i++) {\n        vec2 psi = 35.*hydrogen(p,n,l,m);\n        float ro = dot(psi,psi);\n        p += 3.*d*exp(-200.*ro);\n        Q += color(psi);\n    }\n    //Q = 100.*color(hydrogen(p,n,l,m));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texture(iChannel0,(U)/R)\n#define Main void mainImage(out vec4 Q, vec2 U)\n#define cx(b) mat2((b).x,-(b).y,(b).yx)\n#define ei(a) cx(vec2(cos(a),sin(a)))\n#define norm(v) (length(v)<=0.?vec2(0):normalize(v))\n#define pi 3.14159265359\nfloat factorial (float n) {\n    float o = 1.;\n    for (float i = 1.; i <= n; i++) \n        o *= i;\n    return o;\n}\nfloat legendre (float x, float l, float m) {\n    float p0 = 1.;\n    for (float i = 0.; i<m; i++) \n        p0 = (1.-2.*i)*sqrt(1.-x*x)*p0;\n    if (l == m) return p0;\n    float p1 = (2.*m+1.)*x*p0;\n    for (float i = m+2.; i < l; i++) {\n        float t = ((2.*i-1.)*x*p1-(i+m-1.)*p0)/(i-m);\n        p0 = p1;\n        p1 = t;\n    }\n    return p1;\n}\nfloat laguerre (float x, float k, float a) {\n    float _0 = 1.;\n    float _1 = 1.+a-x;\n    for (float i = 0.; i < k; i++) {\n        float t = ((2.*i+1.+a-x)*_1-(i+a)*_0)/(i+1.);\n        _0 = _1;\n        _1 = t;\n    }\n    return _0;\n}\nvec2 harmonic (vec3 k, float l, float m) {\n    if (length(k)>0.) k = normalize(k);\n    vec2 o = vec2(1,0)*ei(atan(k.y,k.x)*m);\n    o *= legendre(k.z,l,m);\n    o *= pow(-1.,m)*sqrt((2.*l+1.)/(4.*pi)*factorial(l-m)/factorial(l+m));\n    return o;\n}\nfloat normalization (float n, float l) {\n    return sqrt(pow(2./n,3.)/(2.*n)*factorial(n-l-1.)/factorial(n+l));\n}\nvec2 hydrogen (vec3 k, float n, float l, float m) {\n    \n    vec2 o = harmonic(k,l,m);\n    float p = 2.*length(k)/n;\n    o *= laguerre(p,n-l-1.,2.*l+1.);\n    o *= exp(-p*.5)*pow(p,l);\n    return o*normalization(n,l);\n}\nvec4 color (vec2 u) {\n\n    return dot(u,u)*(0.5+0.5*normalize(sin(atan(u.y,u.x)+vec4(1,2,3,4))));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}