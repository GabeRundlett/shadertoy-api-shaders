{
    "Shader": {
        "info": {
            "date": "1631654831",
            "description": "this is some sort of fbm but, but the frequency increase is linear, and its rotated and then it got weird.\nand then i added power of two and then it looked less weird.... meh",
            "flags": 0,
            "hasliked": 0,
            "id": "NsV3Ww",
            "likes": 0,
            "name": "what did i even try to do?",
            "published": 3,
            "tags": [
                "fbmweirdmadness"
            ],
            "usePreview": 0,
            "username": "Arrangemonk",
            "viewed": 240
        },
        "renderpass": [
            {
                "code": "//Arrangemonk 2021, innefficient noise function\n//in the unlikely event of someone forking this: yeah, do that\n\nfloat PI  = 3.14159265359;\nfloat TAU = 6.28318530718;\nfloat E = 2.71828182846;\nfloat iters = 1.;\nfloat octaves = 32.;\n\nfloat GammaToLinear(float gamma)\n{\n    return pow(gamma,0.4545454545454545);\n}\n\nvec3 GammaToLinear(vec3 gamma)\n{\n    return vec3(GammaToLinear(gamma.x),GammaToLinear(gamma.y),GammaToLinear(gamma.z));\n}\n\nfloat LinearToGamma(float linear)\n{\n    return pow(linear,2.2);\n}\n\nvec3 LinearToGamma(vec3 linear)\n{\n    return vec3(LinearToGamma(linear.x),LinearToGamma(linear.y),LinearToGamma(linear.z));\n}\n\n\nfloat flip(float x)\n{\n    return sign(cos(x * PI));\n}\n\nvec2 rot(vec2 uv, float phi)\n{\n    return vec2(sin(phi)*uv.x + cos(phi)*uv.y,cos(phi)*uv.x - sin(phi)*uv.y);\n}\n\n\nvec3 rotfbm(vec3 pos)\n{\nvec3 result = vec3(0.);\nfloat m = 0.;\nfor(float i = 1.; i <= octaves;i++)\n    {\n    float f =flip(i);\n    float tmp = 1./i;\n    m += (f * tmp);\n    result += f * GammaToLinear(texture(iChannel0,rot(pos.xy*i * iters,PI * E * i)).xyz)* tmp;\n    }\nreturn mix(result /m,result *m,.5);\n}\n\n\nvec3 rotfbmp2(vec3 pos)\n{\nvec3 result = vec3(0.);\nfloat m = 0.;\nfor(float x = 1.; x <= octaves;x++)\n    {\n    float i = pow(2.,x);\n    float f =flip(i);\n    float tmp = 1./i;\n    m += (f * tmp);\n    result += f * GammaToLinear(texture(iChannel0,rot(pos.xy*i * iters,PI * E * x)).xyz)* tmp;\n    }\nreturn mix(result /m,result *m,.5);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n    float scale = sin(iTime* 0.05 * TAU)*0.5;\n    uv = (uv-vec2(.5,.25)) * mix(.001,1.,1.+scale) + vec2(.5,.0);\n\n    vec3 val = vec3(0.);\n    if(uv.x < .5)\n    val = rotfbmp2(vec3(uv,iTime));\n    else\n    val = rotfbm(vec3(uv,iTime));\n    \n    \n    uv = fragCoord/iResolution.x;\n    if (uv.x > .499 && uv.x < .501 ) {\n        val = vec3(0.0);\n    }\n    val = LinearToGamma(val);\n\n    fragColor = vec4( val,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}