{
    "Shader": {
        "info": {
            "date": "1705161652",
            "description": "\nMy first shader in shadertoy, inspired by kishimisu's tutorial.",
            "flags": 0,
            "hasliked": 0,
            "id": "lfsXWn",
            "likes": 1,
            "name": "Neon Stars",
            "published": 3,
            "tags": [
                "fractal",
                "sdf",
                "beginner",
                "repetition",
                "abstract",
                "rainbow",
                "creative"
            ],
            "usePreview": 0,
            "username": "madpro",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "/* \n   Forked from kishimisu's shadar tutorial: https://www.shadertoy.com/view/mtyGWy\n   \n   palette and sdHexagram function from Inigo Quilez \n   \n   https://iquilezles.org/articles/palettes/\n   https://www.shadertoy.com/view/tt23RR\n   \n*/\n\n\nvec4 palette( float t ) { // Modified for vec4 arithmetic\n    vec3 a = vec3(1.000, 0.973, 0.906); // Cosmic Latte\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.000,0.333, 0.667);\n    \n    vec3 rgb = a + b*cos( 6.28318*(c*t+d) );\n    vec4 rgba = vec4(rgb,1.0); //RGBA converted\n    return rgba;\n}\n\n\nfloat sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.86602540378,0.57735026919,1.73205080757);\n    \n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Transformed Coords\n    vec2 uv = ( fragCoord * 2.0 - iResolution.xy ) / iResolution.y;\n    vec2 uv0 = uv; //Original Space\n    vec4 finalColor = vec4(0.0);\n    float patternSize = 0.1;\n    float colFreq = .6;\n    float patternFreq = .6;\n    \n    for(float i = 0.0; i<3.0; i++){\n    \n        uv = fract( uv * 1.3 ) - .5; // Fract Space\n\n        // Distance\n        float d = sdHexagram(uv, patternSize) * exp(-sdHexagram(uv0, patternSize));\n        d = sin(d*8. - patternFreq*iTime)/8.; // repeat\n        d = abs(d);  // abs\n        \n        //d = 0.005/d;\n        d = pow(0.005/d, 1.2); // reduce contrast more sharply\n        \n\n        //vec4 col = vec4(\t1.0, 0.973, 0.906, 1.0); // Cosmic Latte\n        vec4 col = palette(sdHexagram(uv0, patternSize) + i*.4 + iTime*colFreq);\n        //(1.0-d); // inverted color\n        finalColor += col * d;\n    \n    }\n    \n    // Output to screen\n    fragColor = finalColor; \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}