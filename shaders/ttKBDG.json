{
    "Shader": {
        "info": {
            "date": "1614993195",
            "description": "Try to have a continuous hatchign with dots / checkers",
            "flags": 0,
            "hasliked": 0,
            "id": "ttKBDG",
            "likes": 2,
            "name": "points hatching",
            "published": 3,
            "tags": [
                "video",
                "postprocess",
                "checker",
                "dots",
                "hatching"
            ],
            "usePreview": 0,
            "username": "ManuManu",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "vec3 W = vec3(0.2125, 0.7154, 0.0721);\n\n\n//#define TEST\n#define SMOOTH\n\nfloat checkerDisplay( vec2 uv, float intens, float offset)\n{\n    float val = clamp( sin(uv.x)*sin(uv.y+ offset), 0.,1.); \n    return pow( val, intens);\n}\n\nfloat processLum( vec2 uv, float lum )\n{\n    float scale = 350.;\n    vec2 uv2 = uv * scale;\n    \n    float lum_orig = lum;\n    float offset = 0.;\n    if ( lum <.5 ) \n    {\n        lum = 1.-lum;\n        offset = 3.14159;\n    }\n\n    // rotation :\n    float angle = 1.;  // why not ?\n    float c = cos( angle ), s = sin(angle);\n    uv2 = vec2( uv2.x * c + uv2.y * s, -uv2.x * s + uv2.y * c );\n    \n    float lum_scale = smoothstep( 1., .82, lum);\n    float power = mix( 10., 3.1, lum_scale);\n    power = mix(power, .8, smoothstep(.82, .66, lum));\n    power = mix(power, 0.0, smoothstep(.66, .5, lum));\n    \n#ifdef SMOOTH\n    vec2 delta = vec2(0.,0.2);\n    float color = checkerDisplay(uv2, power, offset) \n                + checkerDisplay(uv2+delta.xy, power, offset)\n                + checkerDisplay(uv2+delta.yx, power, offset);\n    color = color / 3. * lum_scale;\n#else\n    float color = checkerDisplay(uv2, power, offset) * lum_scale;\n#endif\n\n    if (lum_orig < .5 )\n        color = 1.-color;\n    \n    color = 1.-color;\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n#ifdef TEST\n    vec3 col = vec3(uv.x );\n#else\n    vec3 col = texture( iChannel0, uv ).xyz;\n#endif\n    float luminance = dot(col, W);\n    float color = processLum( uv,  luminance );\n\n    // add a blueish style for ink like :\n    vec3 outputColor = mix( vec3( 0.,.2,.3), vec3(1.,1.,1.), color);\n\n#ifdef TEST\n    if (uv.y > .7 )\n        outputColor = col;        \n#endif\n    fragColor = vec4(vec3(outputColor),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}