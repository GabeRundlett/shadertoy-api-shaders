{
    "Shader": {
        "info": {
            "date": "1639422956",
            "description": "My very first shader, basic tests aside.\nNot much to say, it’s just basic stuff bundled in one shader.\n\nComments and criticism are welcomed, for I am an absolute beginner.",
            "flags": 0,
            "hasliked": 0,
            "id": "sldSRj",
            "likes": 3,
            "name": "negative light",
            "published": 3,
            "tags": [
                "grid",
                "negative"
            ],
            "usePreview": 0,
            "username": "Mots_Doux",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "// This shader is licensed under the Creative Commons Zero 1.0 License\n// https://creativecommons.org/publicdomain/zero/1.0/legalcode\n// It means you can do anything you want, it’s pretty much Public Domain\n\n#define TAU 6.28318530718\n\nfloat square(float x) {\n    return x * x;\n}\n\n// function to draw the grid\n// has a lot of parameters but allows avoiding some code duplication\nvec4 grid(vec2 uv, float cellSize, vec3 color1, vec3 color2, float ratio) {\n    if ((mod(uv.x * ratio, cellSize) <= cellSize/2.0 && mod(uv.y, cellSize) <= cellSize/2.0) || (mod(uv.x * ratio, cellSize) >= cellSize/2.0 && mod(uv.y, cellSize) >= cellSize/2.0)) {\n        return vec4(color1, 1.0);\n    } else {\n        return vec4(color2, 1.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates of the pixel\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // duration of the animation in seconds\n    float duration = 5.0;\n    \n    // colors of the grid\n    vec3 color1 = vec3(1.0, 1.0, 1.0);\n    vec3 color2 = vec3(0.0, 0.436, 1.0);\n\n    // ratio of the display surface so we have a proper circle and not an ellipse\n    float ratio = iResolution.x / iResolution.y;\n    \n    // center of the circle, moves with time\n    // this is a very simple movement only for me to explore the iTime parameter and the cos function\n    vec2 center = vec2(cos(TAU / duration * iTime) * 0.2 + 0.5, cos(TAU / duration * iTime) * 0.2 + 0.5);\n    \n    // radius of our circle\n    float radius = 0.3;\n    \n    // size of each cell of the grid\n    float cellSize = 0.5;\n    \n    // circle equation, true if the pixel is inside the circle\n    // (pixel.x - center.x)^2 + (pixel.y - center.y)^2 <= radius^2\n    // pixels in the circle get an inverted color\n    /*if (square(uv.x * ratio - center.x) + square(uv.y - center.y) <= square(radius)) {\n        fragColor = 1.0 - grid(uv, cellSize, color1, color2, ratio);\n    } else {\n        fragColor = grid(uv, cellSize, color1, color2, ratio);\n    }*/\n    \n    // change suggested by hamtarodeluxe, replace the commented lines above + removes aliasing\n    vec4 col = grid(uv, cellSize, color1, color2, ratio);\n    float squareRadius = square(radius);\n    // returns smooth Hermite interpolation between 0 and 1 when\n    // squareRadius < square(uv.x * ratio - center.x) + square(uv.y - center.y) < squareRadius + 0.005\n    float t = smoothstep(squareRadius, squareRadius + 0.005, square(uv.x * ratio - center.x) + square(uv.y - center.y));\n    // mix is simply a lerp function\n    fragColor = mix(1.-col, col, t);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}