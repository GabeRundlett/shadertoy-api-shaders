{
    "Shader": {
        "info": {
            "date": "1553649323",
            "description": "Geometry doodled a while back, refined and colored during Revision 2019 demoparty.",
            "flags": 0,
            "hasliked": 0,
            "id": "3d2XD1",
            "likes": 11,
            "name": "Vaporwave Polyhedra",
            "published": 3,
            "tags": [
                "polyhedra"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 726
        },
        "renderpass": [
            {
                "code": "#define AA\n\n#define pi (acos(-1.))\n\nconst float phi = (1.+sqrt(5.))*.5;\n\nvec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\nfloat sdIcosahedron(vec3 p, float r)\n{\n    // need to minify and tidy up\n    \n    const float q = (sqrt(5.)+3.)/2.;\n\n    const vec3 n1 = normalize(vec3(q,1,0));\n    const vec3 n2 = vec3(sqrt(3.)/3.);\n\n    p = abs(p/r);\n    float a = dot(p, n1.xyz);\n    float b = dot(p, n1.zxy);\n    float c = dot(p, n1.yzx);\n    float d = dot(p, n2.xyz)-n1.x;\n    return max(max(max(a,b),c)-n1.x,d)*r;\n}\n\nfloat sdDodecahedron(vec3 p, float r)\n{\n    p = abs(p);\n    p += phi*p.zxy;\n    return (max(max(p.x,p.y),p.z)-r*phi) / sqrt(phi*phi+1.);\n}\n\n\nfloat sdRhombicTriacontahedron(vec3 p, float r)\n{\n    const float l = phi*2.;\n    p = abs(p);\n    float a = max(max(p.x,p.y),p.z);\n    p += (p+p.yzx)*phi+p.zxy;\n    return max(a, max(p.x,max(p.y,p.z))/l)-r;   \n}\n\nint mat;\nfloat scene(vec3 p)\n{\n    vec3 r = vec3(1);\n    float R = sin(iTime)*.1+.2;\n    \n    float t=cos(iTime)*.4+.4;\n    t=.8;\n    \n    float cage = max(\n        min(\n\t\t\tsdDodecahedron(p.zyx,1.03-t*.03),\n\t\t\tsdIcosahedron(p,1.02-t*.02)\n        ),\n\t\t-sdRhombicTriacontahedron(p,1.)\n    );\n\n\tfloat ball = length(p)-.8;\n    float ball2 = min(\n        sdIcosahedron(p,.8),\n        sdDodecahedron(p.zyx,.8)\n    );\n    ball=mix(ball,ball2,cos(iTime)+1.)*.5;\n        \n    float best = min(cage,ball);\n    mat=(best==cage?0:1);\n    return best;\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\n    vec3 sky = mix(\n        vec3(.1,0,.5),\n        vec3(.75,.03,0),\n        gl_FragCoord.y/iResolution.y\n    );\n    \n    vec3 accum = vec3(1);\n    for(int bounce=0;bounce<3;++bounce)\n    {\n        float t;\n        float k;\n        for(int i=0;i<100;++i)\n        {\n            k = scene(cam+dir*t);\n            t += k;\n            if (k < .001 || k > 10.)\n                break;\n        }\n\n        vec3 h = cam+dir*t;\n        vec2 o = vec2(.001, 0);\n        vec3 n = normalize(vec3(\n            scene(h+o.xyy)-scene(h-o.xyy),\n            scene(h+o.yxy)-scene(h-o.yxy),\n            scene(h+o.yyx)-scene(h-o.yyx)\n        ));\n\n        if (k > 10.)\n        {\n            // sky\n            return sky * accum;\n        }\n        else if (iMouse.z > 0.)\n        {\n            return n*.5+.5;\n        }\n        else if (mat==0)\n        {\n            float A = .1;\n            float B = scene(h+n*A);\n            float fakeAO = clamp(B/A,0.,1.);\n            fakeAO = pow(fakeAO,.6)*.2+.8;\n\n            float light = n.y*.5+.5;//+n.x*.2+n.z*.1;\n\n            vec3 color = mix(vec3(1.5),sky*3.,.6);\n            color = vec3(.1,1,.8)*.7;\n            \n            // floor\n            return light * fakeAO * accum * color;\n        }\n        else\n        {\n            float fresnel = min(.7,pow(max(0.,1.-dot(-dir,n)),5.))/.7;\n            fresnel=mix(.04,1.,fresnel);\n            cam=h+n*.01;\n            dir=reflect(dir,n);\n            accum *= fresnel;\n        }\n    }\n    return vec3(0);\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy-.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    out_color=vec4(0);\n    \n#ifdef AA\n    for(int i=0;i<4;++i){\n        vec2 offset=vec2(i/2,i%2)*.5/iResolution.y;\n#else\n        vec2 offset=vec2(0);\n#endif\n    \n        vec3 cam = vec3((uv+offset)*3.,-5.);\n        vec3 dir = vec3(0,0,1);\n\n        cam.yz = rotate(cam.yz, atan(1.,sqrt(2.)));\n        dir.yz = rotate(dir.yz, atan(1.,sqrt(2.)));\n\n        cam.xz = rotate(cam.xz, pi/4.);\n        dir.xz = rotate(dir.xz, pi/4.);\n\n        cam.xz = rotate(cam.xz, iTime*.1);\n        dir.xz = rotate(dir.xz, iTime*.1);\n\n        out_color.rgb += trace(cam,dir);\n#ifdef AA\n    }\n    out_color *= .25;\n#endif\n    out_color *= 2.; // exposure\n    out_color.rgb *= 1.-dot(uv,uv)*.2; // vignette\n\tout_color.rgb = pow(out_color.rgb,vec3(.45)); // gamma\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}