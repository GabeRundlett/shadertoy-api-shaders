{
    "Shader": {
        "info": {
            "date": "1555674178",
            "description": "melody",
            "flags": 8,
            "hasliked": 0,
            "id": "wllGz8",
            "likes": 1,
            "name": "[Ese] melody",
            "published": 3,
            "tags": [
                "melody"
            ],
            "usePreview": 0,
            "username": "Eseris",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float Pi = 2. * asin(1.);\nconst float PPi = 4. * asin(1.);\nconst float HTone = pow(2., 1. / 12.);\n\nfloat tab[] = float[](0., 4., 7., 12.);\n\nconst float A = 0., B = 2., C = 3., D = 5., E = 7., F = 8., G = 10.;\nconst float NORMAL = 0., DIESE = 1., BEMOL = -1.;\n\nstruct Note {\n\tint o;\n    float n;\n    float m;\n};\n\nfloat tone(int o, float n, float m) {\n\treturn 27.5*pow(HTone, float(o)*12.+n+m);\n}\n\nfloat tone(Note n) {\n\treturn tone(n.o, n.n, n.m);\n}\n\nfloat sineWave(float h, float t) {\n    return sin(PPi*t*h);\n}\n\nfloat triangleWave(float f, float t) {\n    return 1. - 2. * abs(2. * fract(f * t) - 1.);\n}\n\nfloat sawToothWave(float f, float t) {\n    return 2. * fract(f * t) - 1.;\n}\n\nfloat squareWave(float f, float t) {\n    return 1. - 2. * step(.5, fract(f * t));\n}\n\nfloat smoothSquareWave(float f, float t, float s) {\n    return 2. * atan(sin(PPi * f * t), s) / (1. - s / 2.) / Pi;\n}\n\nvec2 mainSound( in int samp,float time) {\n    float tune = 440.;\n    float res = 0.;\n    float intv = tab[int(mod(.1 * time * time, float(tab.length())))];\n    \n    //res += sine(tone(Note(4, A, NORMAL)) * pow(HTone, cos(time)), time);\n    //res += .2 + sin(PPi * time * tune * pow(HTone, 7.));\n    //res += .2 * sawToothWave(440., time);\n    //res += .2 * triangleWave(440., time);\n    //res += .2 * sineWave(440., time);\n    //res += .2 * squareWave(440., time);\n    res += .2 * smoothSquareWave(44., time, 0.);\n    \n    return vec2(res);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}