{
    "Shader": {
        "info": {
            "date": "1602465962",
            "description": "How to convert a VR shadertoy to an stereo equirectangular.\n\nVideo export (Better viewed in VR)\nhttps://youtu.be/CzHM3zD-Taw\n\nOriginal shader https://www.shadertoy.com/view/tsfGzl",
            "flags": 1,
            "hasliked": 0,
            "id": "WdGczm",
            "likes": 10,
            "name": "Stereo Equirectangular",
            "published": 3,
            "tags": [
                "stereo",
                "youtube",
                "equirectangular"
            ],
            "usePreview": 0,
            "username": "xjorma",
            "viewed": 722
        },
        "renderpass": [
            {
                "code": "// Created by David Gallardo - xjorma/2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n#define PI radians(180.)\n#define TAU radians(360.)\n#define HELICOIDLENGTH 1.5\n#define NBTUBES 3.\n#define MAXDIST 15.\n\n\nvec2 minVecSelect(vec2 a, vec2 b)\n{\n    return a.x<b.x?a:b;\n}\n\nfloat sdcircle2d(vec2 p, float r)\n{\n     return length(p)-r;\n}\n\nvec2 rotate(vec2 center, float angle, float radius)\n{\n    return center + vec2(cos(angle),-sin(angle)) * radius;\n}\n\nvec2 slice(vec3 v)\n{\n    float\ttime = (v.z/TAU)*2.+iTime*0.1;\n\n    float\tr1 = 0.04*sin(v.z*4.+iTime*7.) + 0.08;\n    \n    float   r2 = 0.15 + sin(v.z + iTime)*0.05;\n\n    vec2\tm = vec2(sdcircle2d(rotate(v.xy,time*TAU,r2),r1));\n    \n    for(float i = 1. ; i < NBTUBES ; i++)\n    {\n        m = minVecSelect(m,vec2(sdcircle2d(rotate(v.xy,(time+i/NBTUBES)*TAU,r2),r1),i));\n    }\n    return m;\n}\n\n\nvec2 curve(float z)\n{\n    return vec2(cos(z*.2)*cos(z*0.5),cos(z*.3)*cos(z*0.7));\n}\n\nvec3 map(vec3 p)    \n{\n    p.z += iTime;\n    \n    p.xy += curve(p.z);\n    \n    float angle = atan(p.y,p.x);\n    \n    p.z+= (angle/TAU)*HELICOIDLENGTH;\n\n    p.z = mod(p.z+HELICOIDLENGTH/2.,HELICOIDLENGTH)-HELICOIDLENGTH/2.;\n    \n    vec3 v = vec3(length(p.xy)-1., p.z, angle);\n\n    return vec3(slice(v),angle*4.+iTime*7.);\n}\n\n\n// From IQ\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 CalcNormal(vec3 pos)\n{\n    vec2\teps\t= vec2(0.01,0);\n\tfloat\td\t= map(pos).x;\n\treturn\tnormalize(vec3(map(pos+eps.xyy).x-d,map(pos+eps.yxy).x-d,map(pos+eps.yyx).x-d));\n}\n\nvec3 rayMarch(vec3 ro, vec3 rd, out float t, float maxDist)\n{\n    vec3\td;\n    t = 0.5;\n    for(int i=0;i<75;++i)\n    {\n        d = map(ro+rd*t);\n        t+=d.x*.7;\n        if (d.x < .001 || t > maxDist) break;\n    }\n    return d;\n}\n\nvec3 applyFog(vec3 rgb,float distance, vec3 fogColor)\n{\n    float fogAmount = 1.0 - exp( -distance*0.2 );\n    return mix( rgb, fogColor, fogAmount );\n}\n\nvec3 render(vec3 ro,vec3 rd)\n{\n    float\tt;\n    \n    vec3\tr = rayMarch(ro,rd,t,MAXDIST);\n   \n    vec3\tcol;\n\n    if (t < MAXDIST)\n    {\n    \tvec3 p = ro+rd*t;\n        vec3 n = CalcNormal(p);\n\t\tcol = mix(vec3(1.,0.75,.5),vec3(1.,0.55,.3),0.5*sin(r.z*5.)+0.5);\n\t\tcol = mix(col,vec3(1),0.2*sin(r.y*TAU/NBTUBES)+0.2)*mix(n.y,1.,0.6);\n\t\tvec3 reflected=reflect(rd,n);\n        vec3 env = texture(iChannel0,reflected).xyz;\n\t\tcol = mix(col,env,length(env)*0.3);\n\t\tcol*= calcAO(p,n);\n\t\tcol = applyFog(col,t,vec3(0));\n    }\n    else\n    {\n        col = vec3(0);\n    }\n    \n    return col;\n}\n\nmat3 buildLookAtMatrix( in vec3 ro, in vec3 ta )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 up = vec3(0, 1, 0);\n\tvec3 cu = normalize( cross(cw,up) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{   \n    mat3 ma = buildLookAtMatrix(vec3(0), vec3(0,0.25,-1));\n    \n    fragColor = vec4(render(ma*ro/4.-vec3(curve(iTime),0),ma*rd) ,1);\n}\n\n\n#define EQUIRECTANGULAR\n\n#define STEREO\n\n\n#ifndef EQUIRECTANGULAR\n#define AA\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    \n\tvec3 tot = vec3(0.0);\n        \n#ifdef AA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; ++n )\n    {\n        // pixel coordinates\n        vec2 o = rook[n];\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else //AA\n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif //AA        \n        // camera\t\n        vec3 ro = vec3(-curve(iTime),0);\n        vec3 ta = vec3(-curve(iTime + 2.),5);\n        // camera-to-world transformation\n        mat3 ma = buildLookAtMatrix( ro, ta );\n        \n        vec3 rd =  ma*normalize(vec3(p,2.0));        \n        \n        vec3 col = render(ro ,rd);\n\n\t    tot += col;\n#ifdef AA\n    }\n    tot /= 4.;\n#endif\n\n\tfragColor = vec4( tot, 1.0 );    \n}\n\n#else //EQUIRECTANGULAR\n\n\n#define sePI radians(180.)\n#define seIPD 0.064\t\t\t\t// in meters\n#define seSCALE 1.0\n#define seAA\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 tot = vec3(0.0);\n        \n#ifdef seAA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; ++n )\n    {\n        // pixel coordinates\n        vec2  shiftedCoord = fragCoord + rook[n];\n#else //seAA\n        vec2  shiftedCoord = fragCoord;\n#endif //seAA\n        vec2 uv = shiftedCoord / iResolution.xy;\n#ifdef STEREO\n        // positive = right(bottom) ---- negative = left(top)\n        float side = -sign(uv.y - 0.5);\n        uv.y = fract(uv.y * 2.0);\n#endif // STEREO\n        vec2 polar = (uv - 0.5) * vec2(2.0 * sePI, sePI);\n        vec3 rd = vec3(sin(polar.x) * cos(polar.y), sin(polar.y), -cos(polar.x) * cos(polar.y));\n#ifdef STEREO\n        vec3 ro = (side * seIPD * 0.5) * vec3(cos(polar.x), 0, sin(polar.x)) / seSCALE;\n#else // STEREO\n        vec3 ro = vec3(0);\n#endif\n        vec4 outColor;\n        mainVR( outColor, fragCoord, ro, rd);\n        tot += outColor.xyz;\n#ifdef seAA\n    }\n    tot /= 4.;\n#endif  //seAA\n\tfragColor = vec4(tot, 1.0);        \n}\n\n#endif //EQUIRECTANGULAR",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}