{
    "Shader": {
        "info": {
            "date": "1613145174",
            "description": "drag and drop bricks",
            "flags": 32,
            "hasliked": 0,
            "id": "3l3fzf",
            "likes": 10,
            "name": "construction game",
            "published": 3,
            "tags": [
                "tuto",
                "draganddrop"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = u/R.y, A; \n    O-=O;\n    for ( float x = 0.; x < S; x++ )                            // parse particles\n        for ( float y = 0.; y < S; y++ ) {\n            vec4 T = T(vec2(x,y));\n            A = abs( U - T.xy );\n            if ( max(A.x,A.y) < r ) O += vec4(.5+.5*T.zz,1,1);  // draw particle\n          }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float S  =  4.,                // S² bricks\n            r  = .4/S /2.;           // brick radius\n#define R    iResolution.xy\n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "bool collide(vec2 U, vec2 M) {                                 // --- is current particle colliding ?\n    if ( M.y < r ) return true;                                // collide with floor\n    for ( float x = 0.; x < S; x++ ) \n        for ( float y = 0.; y < S; y++ ) {\n            vec2 P = vec2(x,y), A;\n            if ( P != U-.5 ) { \n                A = abs( M - T(P).xy ); \n                if( max(A.x,A.y) < 2.*r ) return true;        // collide with particle (x,y)     \n            }\n          }\n    return false;                                             // no collision\n }\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( max(U.x,U.y) > S ) return;                           // manage only S² particles\n    if ( iFrame < 1 ) { O = vec4(.5*U/S,0,0); return; }       // init state\n\n    O = T(U);                                                 // restore state\n    vec2 M = iMouse.xy/R.y, D = vec2(0.,1./R.y);  \n\n    if ( iMouse.z < 0. ) O.z = 0.;                            // mouse release\n    else if ( iMouse.w > 0. && length(M-O.xy) < r ) O.z = 1.; // mouse down on me: activate\n    \n    if (O.z > 0.) {                                           // if active particle\n        if ( collide(U,M ) ) return;                          // collision: stop\n        O.xy = M;                                             // no obstactle: follow mouse\n      } else {\n        if ( collide(U,O.xy-D ) ) return;                     // if no collision,\n        O.xy -= D;                                            // free fall\n      }\n      \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}