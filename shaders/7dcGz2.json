{
    "Shader": {
        "info": {
            "date": "1630226640",
            "description": "cellular automata with keyboard/mouse controll. GUIDE TO CONTROL IN\"Common\"  FILE",
            "flags": 48,
            "hasliked": 0,
            "id": "7dcGz2",
            "likes": 3,
            "name": "Cellular automata life simulator",
            "published": 3,
            "tags": [
                "cellularautomata",
                "lifesimulator"
            ],
            "usePreview": 0,
            "username": "Skele7on1250",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define Key_R 82.\n#define Key_C 67.\n#define Key_G 71.\n#define Key_E 69.\nbool isPressed(float keyCode) {\n        keyCode = (keyCode + 0.5) / 256.0;\n        vec2 uv = vec2(keyCode, 0.25);\n        float key = texture(iChannel2, uv).r;\n\n        return key > 0.0;\n}\nbool isToggled(float keyCode) {\n        keyCode = (keyCode + 0.5) / 256.0;\n        vec2 uv = vec2(keyCode, 0.75);\n        float key = texture(iChannel2, uv).r;\n\n        return key > 0.0;\n}\nbool isKeyDown(float keyCode){\n    return(texelFetch( iChannel2, ivec2(keyCode, 0),0 ).x==1.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    int sizeOfCell=10;\n    vec3 col;\n    \n    col=texture(iChannel0,uv).rgb;\n    \n    \n    if(isToggled(Key_E)){\n       col=texture(iChannel3,uv).rgb;\n    }\n    if(isKeyDown(Key_R)||iTime<=0.5f){\n         col=texture(iChannel1,uv).rgb;\n    }\n    if(isKeyDown(Key_C)){\n        col=vec3(0,0,0);\n    }\n    \n    if(!isToggled(Key_G)&&((int(fragCoord.x)%sizeOfCell==0&&fragCoord.x>1.)||(int(fragCoord.y)%sizeOfCell==0&&fragCoord.y>1.))){\n        col=Color(uv,iTime);\n    }\n    else if(((int(fragCoord.x)%sizeOfCell==0&&fragCoord.x>1.)||(int(fragCoord.y)%sizeOfCell==0&&fragCoord.y>1.))){\n        col=vec3(0,0,0);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    int sizeOfCell=10;\n    vec3 col=texture(iChannel0,uv).rgb;\n    vec2 coord=vec2(int(fragCoord.x)/sizeOfCell+1,int(fragCoord.y)/sizeOfCell+1);\n    int cnt=0;\n    \n    for(int i=0;i<=8;i++){\n        int posx,posy;\n        if(i%3==0){\n            posx=-1;\n        }\n        else if((i+1)%3==0){\n            posx=1;\n        }\n        else{\n            posx=0;\n        }\n        if(i>=6){\n            posy=1;\n        }\n        else if(i<=2){\n            posy=-1;\n        }\n        else{\n            posy=0;\n        }\n        \n        vec2 newCoord=coord+vec2(posx,posy);\n        if(i!=4&&(texture(iChannel0,(newCoord*float(sizeOfCell)-vec2(1,1))/iResolution.xy).rgb!=vec3(0,0,0))&&newCoord.x>=0.&&newCoord.y>=0.){\n            cnt+=1;\n            //col=normalize(vec3(newCoord*float(sizeOfCell)/iResolution.xy,1.));\n        }\n        \n    }\n    if(cnt==3&&col==vec3(0,0,0)){\n        col=Color(uv,iTime);\n    }\n    else if(cnt>=2&&cnt<=3&&col!=vec3(0,0,0)){\n        col=Color(uv,iTime);\n    }\n    else if(cnt<2||cnt>3){\n        col=vec3(0,0,0);\n    }\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nControl\nToggle Key E - edit field (LMB to create/delete cell)\nToggle Key G - enable/disable grid\nPress Key C - clear field\nPress Key R - randomize field\n\n\n\n\n*/\n\n\n\n\n\nvec3 Color( vec2 uv , float iTime )\n{\n    return 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n}\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    int sizeOfCell=10; \n    vec3 col=vec3(0,0,0);\n    vec2 coord=vec2(int(fragCoord.x)/sizeOfCell,int(fragCoord.y)/sizeOfCell);\n    if(rand(coord*iTime*float(iFrame))>=0.5f){\n        col=Color(uv,iTime);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    int sizeOfCell=10; \n    vec2 coord=vec2(int(fragCoord.x)/sizeOfCell,int(fragCoord.y)/sizeOfCell);\n    vec3 col=texture(iChannel0,uv).rgb;\n    if(vec2(int(iMouse.x)/sizeOfCell,int(iMouse.y)/sizeOfCell)==coord&&(iMouse.w>0.)){\n        if(col==vec3(0,0,0)){\n            col=Color(uv,iTime);\n        }\n        else{\n            col=vec3(0,0,0);\n        }\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}