{
    "Shader": {
        "info": {
            "date": "1561229496",
            "description": "Oemfoe Freewheeling 1",
            "flags": 0,
            "hasliked": 0,
            "id": "wt2GWV",
            "likes": 0,
            "name": "Oemfoe Freewheeling 1",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "oemfoe",
            "viewed": 360
        },
        "renderpass": [
            {
                "code": "const float E = 0.001;\n\n\nmat3 rotY(float r){return mat3(cos(r), 0., sin(r), 0., 1., 0., -sin(r), 0., cos(r));}\nmat3 rotX(float r){return mat3(1., 0., 0., 0., cos(r), sin(r), 0., -sin(r), cos(r));}\nmat3 rotZ(float r){return mat3(cos(r), sin(r), 0., -sin(r), cos(r), 0., 0., 0., 1.);}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat plane(vec3 p){\n    //p = rotY(iTime / 4.) * p;\n    float crazy = abs(p.x/2. - floor(p.x/2. + .5)) * 2.;\n    float crazy2 = abs(p.z/2. - floor(p.z/2. + .5)) * 2.;\n    float var1 = sin(p.x + iTime) * cos(p.z + iTime) / 2. + p.y + 5.;\n\tfloat var2 = -crazy * crazy2 / 2. * (sin(iTime) * .5 + .5) + p.y + 5.;\n\t//return mix(var1, var2, cos(iTime / 8.) / .5 + .5);\n    return var1;\n}\n\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sph1(vec3 p){\n    return sphere(p - vec3(sin(iTime * 2.), 0., 0.), .2);\n}\n\nfloat box(vec3 p, vec3 b){\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.) + length(max(d, 0.));\n}\n\nvec3 normal2(vec3 p){\n    return normalize(vec3(\n        plane(vec3(p.x + E, p.y, p.z)) - plane(vec3(p.x - E, p.y, p.z)),\n        plane(vec3(p.x, p.y + E, p.z)) - plane(vec3(p.x, p.y - E, p.z)),\n        plane(vec3(p.x, p.y, p.z + E)) - plane(vec3(p.x, p.y, p.z - E))\n    ));\n}\n\nvec3 carpos(float t){\n    return vec3(sin(t / 2.) * 4., 0., sin(t) * 4. + 8.);\n}\n\nfloat cyl(vec3 p, float r, float h){\n\treturn max(length(p.xy) - r, abs(p.z) - h);\n}\n\nfloat map(vec3 p){\n    \n    float pl = plane(p);\n    \n    vec3 cp = carpos(iTime);\n    vec3 cp2 = carpos(iTime + E);\n    vec2 dir = normalize(cp2.xz - cp.xz);\n    \n    vec3 bp = carpos(iTime - (sin(iTime) * .5 + .5));\n    bp.y -= plane(bp);\n    bp.y += .4;\n    \n    cp.y -= plane(cp);\n    vec3 n2 = normal2(cp);\n    cp.y += 0.4;\n    \n    mat3 rot = rotY(-atan(dir.x, dir.y) - 1.57) * rotZ(-acos(n2.x) - 1.57) * rotX(acos(n2.z) - 1.57);\n    cp = rot * (p - cp);\n    \n    float autoke = box(cp, vec3(.4, .1, .2));\n    \n    float whl = 1000.;\n    whl = min(whl, cyl(cp - vec3(.3, .2, .2), .1, .02));\n    whl = min(whl, cyl(cp - vec3(-.3, .2, .2), .1, .02));\n    whl = min(whl, cyl(cp - vec3(-.3, .2, -.2), .1, .02));\n    whl = min(whl, cyl(cp - vec3(.3, .2, -.2), .1, .02));\n\n    \n    float sph = sph1(p - bp);\n    \n    return min(pl, smin(sph, min(autoke, whl), .2));\n}\n\n\nvec3 normal(vec3 p){\n    return normalize(vec3(\n        map(vec3(p.x + E, p.y, p.z)) - map(vec3(p.x - E, p.y, p.z)),\n        map(vec3(p.x, p.y + E, p.z)) - map(vec3(p.x, p.y - E, p.z)),\n        map(vec3(p.x, p.y, p.z + E)) - map(vec3(p.x, p.y, p.z - E))\n    ));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    uv -= .5;\n    uv.y /= iResolution.x / iResolution.y;\n    \n    vec3 sky = vec3(0.153,0.000,0.580);\n    vec3 c = sky;\n    \n    vec3 ro = vec3(0., 0., -3.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n    float t = 0.;\n    \n    for (int step = 0; step < 200; step++){\n    \tvec3 p = rotX(.5) * (ro + t * rd);\n        float d = map(p);\n        if (d < E){\n            vec3 n = normal(p);\n            float shading = dot(n, normalize(ro - p));\n            c = vec3(0.000,0.749,1.000);\n            \n            if (sph1(p) < E)\n            \tc *= texture(iChannel0, vec2(atan(p.x), atan(p.y))).x;\n            if (plane(p) < E)\n                c = vec3(0.816,0.000,0.980);\n            c *= shading;\n            c = mix(c, sky, smoothstep(0., .5, length(p - ro) / 100.));\n            break;\n        }\n        else if (d > 100.)\n        {\n            break;\n        }\n        t += d;\n    }\n\n    fragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}