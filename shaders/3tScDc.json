{
    "Shader": {
        "info": {
            "date": "1595494241",
            "description": "Based on \"Cookie Waves\" but with Truchet-like tiles (color scheme  from \"Hexagonal Truchet Flow\")",
            "flags": 0,
            "hasliked": 0,
            "id": "3tScDc",
            "likes": 7,
            "name": "Truchet Waves",
            "published": 3,
            "tags": [
                "wave",
                "hexagon",
                "truchet"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "// \"Truchet Waves\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0    // optional antialiasing\n\nfloat PrCylDf (vec3 p, float r, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p);\nfloat Minv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\n\nmat3 flMat;\nvec3 ltDir, flPos;\nvec2 gId, cMid;\nfloat tCur, dstFar, hgSize, wavHt, cDir, trWidf, trHt;\nint idObj;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, w;\n  vec2 s, r;\n  float dMin, d, h, b;\n  dMin = dstFar;\n  p.xz -= cMid;\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * atan (q.z, - q.x) / (2. * pi) + 0.5)) / 6.);\n  d = abs (q.x) - 0.86 * hgSize;\n  r = p.xz / hgSize;\n  s = vec2 (0., - cDir);\n  b = dot (s - r, s - r);\n  w = vec3 (s, b);\n  s = 0.5 * vec2 (sqrt3, cDir);\n  b = dot (s - r, s - r);\n  if (b < w.z) w = vec3 (s, b);\n  s = 0.5 * vec2 (- sqrt3, cDir);\n  b = dot (s - r, s - r);\n  if (b < w.z) w = vec3 (s, b);\n  h = - trHt * smoothstep (0.5 * trWidf, trWidf, abs (sqrt (w.z) - 0.5));\n  d = max (d, abs (q.y - wavHt + h) - 0.15 + h);\n  DMIN (1);\n  q = p;\n  q.y -= wavHt - 2.;\n  d = PrCylDf (q.xzy, 0.5, 2.);\n  DMIN (2);\n  return 0.8 * dMin;\n}\n\nvoid SetTrConf ()\n{\n  vec2 u;\n  cMid = HexToPix (gId * hgSize);\n  cDir = 2. * step (Hashfv2 (gId), 0.5) - 1.;\n  u = mod (0.1 * vec2 (cMid.x + cMid.y, cMid.x - cMid.y) * (1. + 0.3 * sin (0.2 * 2. * pi * cMid)) +\n    0.1 * tCur, 1.) - 0.5;\n  wavHt = 0.4 * dot (exp (-100. * u * u), vec2 (1.));\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.y == 0.) rd.y = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = Minv3 (hv);\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetTrConf ();\n    }\n    d = ObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0005, -0.0005);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  gIdP = vec2 (-99.);\n  for (int j = 0; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetTrConf ();\n    }\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.05;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 TruchCol (vec2 p)\n{\n  vec3 col, w;\n  vec2 s;\n  float a, d, b;\n  p -= cMid;\n  p /= hgSize;\n  s = vec2 (0., - cDir);\n  b = dot (s - p, s - p);\n  w = vec3 (s, b);\n  s = 0.5 * vec2 (sqrt3, cDir);\n  b = dot (s - p, s - p);\n  if (b < w.z) w = vec3 (s, b);\n  s = 0.5 * vec2 (- sqrt3, cDir);\n  b = dot (s - p, s - p);\n  if (b < w.z) w = vec3 (s, b);\n  w.z = abs (sqrt (w.z) - 0.5);\n  d = HexEdgeDist (p);\n  col = vec3 (0.5, 0.5, 1.) * mix (1., 0.7 + 0.3 * smoothstep (0.2, 0.8, d), smoothstep (0.02, 0.03, d));\n  if (w.z < trWidf) {\n    col = vec3 (1., 1., 0.);\n    w.xy = Rot2D (w.xy - p, 0.5 * cDir * tCur);\n    a = mod (3. * atan (cDir * w.y, - w.x) / pi, 1.) - 0.5;\n    for (float s = 0.01; s >= 0.; s -= 0.01) {\n      d = 1.;\n      if (abs (a) - 0.15 < s) d = min (d, smoothstep (0., 0.005,\n         w.z - 0.045 * (1. - a / 0.15) - 0.5 * s));\n      if (abs (a + 0.3) - 0.15 < s) d = min (d, smoothstep (0., 0.005, w.z - 0.02 - s));\n      if (abs (mod (2. * a + 0.5, 1.) - 0.5) - 0.4 < s)\n         d = min (d, smoothstep (0., 0.005, abs (w.z - 0.135) - 0.01 - s));\n      col = mix (vec3 (0., 1. - 70. * s, 0.), col, d);\n    }\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, sh;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col4 = (vn.y > 0.01) ? vec4 (TruchCol (ro.xz), 0.1) :\n         vec4 (0.8, 0.8, 0.9, 0.3) * (0.8 + 0.2 * cos (18. * pi * (ro.y - wavHt)));\n    } else if (idObj == 2) {\n      col4 = vec4 (0.3, 0.3, 0.4, 0.1);\n    }\n    sh = ObjSShadow (ro, ltDir);\n    col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else col = vec3 (0.3, 0.3, 0.3);\n  return clamp (col, 0., 1.);\n}\n\nvec3 TrackPath (float t)\n{\n  return t * vec3 (0.1, 0., sqrt (0.99)) + vec3 (2. * cos (0.1 * t), 0., 0.);\n}\n\nvoid VuPM (float t)\n{\n  vec3 fpF, fpB, vel, acc, va, ort, cr, sr;\n  float dt;\n  dt = 1.;\n  flPos = TrackPath (t);\n  fpF = TrackPath (t + dt);\n  fpB = TrackPath (t - dt);\n  vel = (fpF - fpB) / (2. * dt);\n  vel.y = 0.;\n  acc = (fpF - 2. * flPos + fpB) / (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) / length (vel);\n  ort = vec3 (0.2, atan (vel.z, vel.x) - 0.5 * pi, 5. * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  flMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 dateCur;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  tCur = mod (tCur, 2400.) + 30. * floor (dateCur.w / 7200.) + 11.1;\n  hgSize = 2.;\n  trWidf = 0.3;\n  trHt = 0.07;\n  VuPM (1. * tCur);\n  az = 0.;\n  el = -0.1 * pi;\n  vuMat = StdVuMat (el, az);\n  flPos.y += 10.;\n  ro = flPos;\n  zmFac = 6. + 3. * sin (0.02 * 2. * pi * tCur);\n  dstFar = 100.;\n  ltDir = normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    rd = vuMat * rd;\n    rd = rd * flMat;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}