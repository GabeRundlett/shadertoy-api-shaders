{
    "Shader": {
        "info": {
            "date": "1599972458",
            "description": "This is SUPER FUN!  Copy/Paste the code to the bottom of any shader to add anti-aliasing.\nA huge thanks to Fabrice's code from this shader that showed me how to do this (see comments):\n[url]https://www.shadertoy.com/view/WlfyW8[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wtBBW3",
            "likes": 4,
            "name": "Anti-alias any shader V2",
            "published": 3,
            "tags": [
                "2d",
                "boxfilter",
                "tool",
                "supersample"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 773
        },
        "renderpass": [
            {
                "code": "// This uses an idea that was created by Fabrice Neyret's:\n// https://www.shadertoy.com/view/WlfyW8 \n// It's an improvement to my previous box-filter.\n// Add the extra code at the bottom of this shader to any shader to anti-alias it. \n// \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 r = iResolution.xy,\n         u = ( 2.*fragCoord - r ) / r.y;\n    float m = 4.* sin(.1*iTime);\n\tfragColor = vec4 (fract( m / length(u) + atan(u.y,u.x)/3.14 + .3*iTime ));\n}\n\n\n// Add this code to the bottom of any shader to add Anti-aliasing:\n// Made a few changes to Fabrice's code:\n// Replaced the single for() loop with double for() loops (x,y) - Because it's faster.\n// Added min(T,1.0) to guarantee the output is maximum value of vec4(1.0)\n// Without the min() function, bright areas do not anti-alias.\n\n#define mainImage(O,U)                                     \\\n    vec4 T;                                                \\\n    int AA = 5, /* Set the Anti-Aliasing level (1-16) higher numbers are SLOW! */ \\\n        x = 0, y;                                          \\\n        float A = float (AA);                              \\\n    for (;x++ < AA;) for (y=0; y++ < AA; O += min(T,1.) )  \\\n        mainImage( T, U + vec2(x,y)/A-.5 );                \\\n    O /= A*A",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}