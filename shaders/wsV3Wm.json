{
    "Shader": {
        "info": {
            "date": "1570380396",
            "description": "Trying the setup of leon to make anaglyphe shaders.\nThis will be the theme of the cookie party \nhttps://2019.cookie.paris/",
            "flags": 0,
            "hasliked": 0,
            "id": "wsV3Wm",
            "likes": 12,
            "name": "Anaglyphe Dojo 01",
            "published": 3,
            "tags": [
                "raymarch",
                "anaglyphe"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 633
        },
        "renderpass": [
            {
                "code": "\n// Using code from\n// Leon d\n// Inigo Quilez\n// Morgan McGuire\n\n// Custom part\n\nfloat rep(inout float p, float r)\n{\n    float hr = r/2.;\n    p += hr;\n    float id = floor(p * r);\n    p = mod(p , r) - hr;\n    return id;\n}\n\n#define PI 3.1415926\n#define TAU (PI * 2.)\n#define HPI (PI / 2.)\n\nfloat bounce(float p)\n{\n\n    float b = .25;\n    \n    return .5 - cos(p * PI) * .5 + sin(p * PI) * p * b ;\n}\n\nfloat multiplexer(float channel,float nbChannel,float t)\n{\n    float ft = floor(t);\n    float mt = t- ft;\n    mt *= nbChannel;\n    channel = clamp(mt - channel,0.,1.);\n    channel = bounce(channel) ;\n    return ft + channel;\n}\n\n#define time (iTime * .75)\n\nfloat map(vec3 pos)\n{\n    float nbChannel = 12.;\n    \n    \n    \n    float ti = max(0.,time) ;\n    float bpm = 121.;\n    \n    ti *= (bpm / 60.) * 2.;\n    \n    float ts = ti / nbChannel;\n\n    float dir =  mod(floor(ts),2.) * 2. - 1.;\n    \n    float multiTime = ti / nbChannel;\n    \n    float r1 = multiplexer(2.,nbChannel,multiTime) * PI / 2. * dir;\n    pos.xz *= rot(r1);\n    \n    float r2 = multiplexer(6.,nbChannel,multiTime) * PI / 2. * dir;\n    pos.yz *= rot(r2);\n    \n    float r3 = multiplexer(10.,nbChannel, multiTime) * PI / 2. * dir;\n    pos.xy *= rot(r3);\n    \n    float dec = 4.;\n    pos.xyz += dec / 2.;\n    \n    \n    \n    pos.z += multiplexer(0. ,nbChannel,multiTime) * dec * -dir;\n    pos.x += multiplexer(4. ,nbChannel,multiTime) * dec * -dir;\n    pos.y += multiplexer(8.,nbChannel,multiTime) * dec * -dir;\n    \n    \n    \n    rep(pos.x,dec);\n    rep(pos.y,dec);\n    rep(pos.z,dec);\n    float r =max(max((abs(pos.x)), abs(pos.y)),abs(pos.z));\n    r = texture(iChannel0,vec2(r *.25,.5)).r;\n    \n    r = (exp(r)) * .35 - .25;\n    \n    \n    float grid = min(min(length(pos.xy),length(pos.yz)),length(pos.xz)) - r;\n    \n    return grid;\n}\n\n// End of custom part.\n\nconst float grain = .01;\nconst float divergence = 0.1;\nconst float fieldOfView = 1.5;\n\nfloat raymarch ( vec3 eye, vec3 ray ) {\n    float dither = random(ray.xy+fract(iTime));\n    float total = dither;\n    const int count = 30;\n    for (int index = count; index > 0; --index) {\n        float dist = map(eye+ray*total);\n        dist *= 0.9+.1*dither;\n        total += dist;\n        if (dist < 0.001 * total)\n            return float(index)/float(count);\n    }\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 eyeLeft = vec3(-divergence,0,5.);\n    vec3 eyeRight = vec3(divergence,0,5.);\n    vec3 rayLeft = look(eyeLeft, vec3(0), uv, fieldOfView);\n    vec3 rayRight = look(eyeRight, vec3(0), uv, fieldOfView);\n    float red = raymarch(eyeLeft, rayLeft);\n    float cyan = raymarch(eyeRight, rayRight);\n    fragColor = vec4(red,vec2(cyan),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Anaglyph Quick Sketch\n// An example on how to render stereoscopic anaglyph image\n// It will be the theme of https://2019.cookie.paris/\n// And the content of the 3rd issue of https://fanzine.cookie.paris/\n// Licensed under hippie love conspiracy\n\nfloat random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n\nmat2 rot(float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nfloat smoothmin (float a, float b, float r) { float h = clamp(.5+.5*(b-a)/r, 0., 1.); return mix(b, a, h)-r*h*(1.-h); }\n\nvec3 look (vec3 eye, vec3 target, vec2 anchor, float fov) {\n    vec3 forward = normalize(target-eye);\n    vec3 right = normalize(cross(forward, vec3(0,1,0)));\n    vec3 up = normalize(cross(right, forward));\n    return normalize(forward * fov + right * anchor.x + up * anchor.y);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}