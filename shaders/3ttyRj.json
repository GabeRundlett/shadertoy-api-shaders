{
    "Shader": {
        "info": {
            "date": "1609500038",
            "description": "Attempt at programming a pixel sorter without looking at any resources.",
            "flags": 32,
            "hasliked": 0,
            "id": "3ttyRj",
            "likes": 5,
            "name": "Second order pixel sorter",
            "published": 3,
            "tags": [
                "pixel",
                "sorting",
                "binarysearch",
                "sortingtree"
            ],
            "usePreview": 0,
            "username": "andrinr",
            "viewed": 428
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    vec3 buffer = texture(iChannel0,uv).xyz;\n    // Output to screen\n    fragColor = vec4(buffer,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Sorting step 1\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float du = 1. / iResolution.x;\n    float dv = 1. / iResolution.y;\n    \n    vec3 y = texture(iChannel0,uv).xyz;\n    \n    vec3 y_l = texture(iChannel0,uv - vec2(du, 0.)).xyz;\n    vec3 y_r = texture(iChannel0,uv + vec2(du, 0.)).xyz;\n    \n    // Modulo\n    if (fract(float(fragCoord.x)/2.0) > 0.5){\n        if (length(y_l) > length(y)){\n            y = y_l;\n        }\n    }\n    \n    // Modulo\n    if (fract(float(fragCoord.x)/2.0) < 0.5){\n        if (length(y) > length(y_r)){\n            y = y_r;\n        }\n    }\n\n    fragColor = vec4(y,1.0);\n    \n    if (iFrame < 4){\n        \n        fragColor = texture(iChannel1,uv);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Sorting step 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float du = 1. / iResolution.x;\n    float dv = 1. / iResolution.y;\n    \n    vec3 y = texture(iChannel0,uv).xyz;\n    \n    vec3 y_l = texture(iChannel0,uv - vec2(du, 0.)).xyz;\n    vec3 y_r = texture(iChannel0,uv + vec2(du, 0.)).xyz;\n    \n    // Modulo\n    if (fract(float(fragCoord.x)/2.0) > 0.5){\n        if (length(y_r) < length(y)){\n            y = y_r;\n        }\n    }\n    \n    // Modulo\n    if (fract(float(fragCoord.x)/2.0) < 0.5){\n        if (length(y_l) > length(y)){\n            y = y_l;\n        }\n    }\n\n    fragColor = vec4(y,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}