{
    "Shader": {
        "info": {
            "date": "1550694543",
            "description": "Let there be light !",
            "flags": 0,
            "hasliked": 0,
            "id": "wsfXR4",
            "likes": 2,
            "name": "RayTracing Tutorial - Step 3",
            "published": 3,
            "tags": [
                "raytracing",
                "tutorial"
            ],
            "usePreview": 0,
            "username": "BrunoLevy",
            "viewed": 536
        },
        "renderpass": [
            {
                "code": "const float FARAWAY=1e30;\nconst float EPSILON=1e-3;\n\nstruct Camera {\n    vec3 Obs;\n    vec3 View;\n    vec3 Up;\n    vec3 Horiz;\n    float H;\n    float W;\n    float z;\n};\n\nstruct Ray {\n    vec3 Origin;\n    vec3 Dir;\n};\n\nCamera camera(in vec3 Obs, in vec3 LookAt, in float aperture) {\n   Camera C;\n   C.Obs = Obs;\n   C.View = normalize(LookAt - Obs);\n   C.Horiz = normalize(cross(vec3(0.0, 0.0, 1.0), C.View));\n   C.Up = cross(C.View, C.Horiz);\n   C.W = float(iResolution.x);\n   C.H = float(iResolution.y);\n   C.z = (C.H/2.0) / tan((aperture * 3.1415 / 180.0) / 2.0);\n   return C;\n}\n\nRay launch(in Camera C, in vec2 XY) {\n   return Ray(\n      C.Obs,\n      C.z*C.View+(XY.x-C.W/2.0)*C.Horiz+(XY.y-C.H/2.0)*C.Up \n   );\n}\n\nstruct Sphere {\n   vec3 Center;\n   float R;\n};\n\nstruct Material {\n    vec3 Kd; // diffuse color\n    vec3 Ke; // emissive color\n};\n\nMaterial diffuse(in vec3 Kd) {\n   return Material(Kd, vec3(0.0, 0.0, 0.0));\n}\n\nMaterial light(in vec3 Ke) {\n   return Material(vec3(0.0, 0.0, 0.0), Ke);\n}\n\nstruct Object {\n   Sphere sphere;\n   Material material;\n};\n\nObject scene[3];\n\nvoid init_scene() {\n   float beta = float(iFrame)/30.0;\n   float s = sin(beta);\n   float c = cos(beta); \n\n   scene[0] = Object(\n      Sphere(vec3(0.0, 0.0, 0.0),0.5), \n      diffuse(vec3(1.0, 1.0, 1.0))\n   );\n\n   scene[1] = Object(\n      Sphere(vec3(0.7*s, 0.7*c, 0.0),0.1), \n      diffuse(vec3(1.0, 0.0, 0.0))\n   );\n\n   scene[2] = Object(\n      Sphere(vec3(5.0, 0.0, 3.0),0.02),\n      light(vec3(1.0, 1.0, 1.0)) \n   );\n\n//   scene[3] = Object(\n//      Sphere(vec3(1.5, 0.0, 1.5),0.02),\n//      light(vec3(1.0, 1.0, 1.0)) \n//   );\n\n\n}\n\nbool intersect_sphere(in Ray R, in Sphere S, out float t) {\n   vec3 CO = R.Origin - S.Center;\n   float a = dot(R.Dir, R.Dir);\n   float b = 2.0*dot(R.Dir, CO);\n   float c = dot(CO, CO) - S.R*S.R;\n   float delta = b*b - 4.0*a*c;\n   if(delta < 0.0) {\n      return false;\n   }\n   t = (-b-sqrt(delta)) / (2.0*a);\n   return true;\n}\n \nvec3 lighting(in vec3 P, in vec3 N, in Material material) {\n   if(material.Ke != vec3(0.0, 0.0, 0.0)) {\n      return material.Ke;\n   }  \n\n   vec3 result = vec3(0.0, 0.0, 0.0);\n\n   for(int i=0; i<scene.length(); ++i) {\n      if(scene[i].material.Ke != vec3(0.0, 0.0, 0.0)) {\n         Ray R2 = Ray(P, scene[i].sphere.Center);\n         vec3 E = scene[i].sphere.Center - P;\n         float lamb = max(0.0, dot(E,N) / length(E));\n         result += lamb * material.Kd * scene[i].material.Ke;\n       }\n   }\n\n   return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n   init_scene();\n\n   Camera C = camera(\n       vec3(2.0, 2.0, 1.5),\n       vec3(0.5, 0.5, 0.5),\n       50.0       \n   );\n   Ray R = launch(C, fragCoord);\n   \n   \n   fragColor = vec4(0.5, 0.5, 1.0, 1.0);\n\n   const float FARAWAY=1e30; \n   float t = FARAWAY;\n\n   vec3 P;  // Point courant\n   vec3 N;  // Normale\n   Material material; // Couleur\n\n   for(int i=0; i<scene.length(); ++i) {\n       float cur_t;\n       if(\n          intersect_sphere(R, scene[i].sphere, cur_t) \n          && cur_t < t\n       ) {\n           t = cur_t;\n           P = R.Origin + t*R.Dir;\n           N = normalize(P - scene[i].sphere.Center);\n           material = scene[i].material;\n       } \n   }\n\n   if(t != FARAWAY) {\n      fragColor.rgb = lighting(P,N,material);\n   }\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}