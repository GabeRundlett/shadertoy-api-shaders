{
    "Shader": {
        "info": {
            "date": "1385661066",
            "description": "A test for a refraction effect + Perlin noise! Drag the mouse around!",
            "flags": 0,
            "hasliked": 0,
            "id": "Ms23zm",
            "likes": 52,
            "name": "Refraction Test",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "wave",
                "refraction",
                "water",
                "effect",
                "liquid"
            ],
            "usePreview": 0,
            "username": "HLorenzi",
            "viewed": 2499
        },
        "renderpass": [
            {
                "code": "#define REFRACTION_INDEX 0.75\n\n\n\n\n\n\nfloat rand(vec3 co)\n{\n    return -1.0 + fract(sin(dot(co.xy,vec2(12.9898 + co.z,78.233))) * 43758.5453) * 2.0;\n}\n\nfloat linearRand(vec3 uv)\n{\n\tvec3 iuv = floor(uv);\n\tvec3 fuv = fract(uv);\n\t\n\tfloat v1 = rand(iuv + vec3(0,0,0));\n\tfloat v2 = rand(iuv + vec3(1,0,0));\n\tfloat v3 = rand(iuv + vec3(0,1,0));\n\tfloat v4 = rand(iuv + vec3(1,1,0));\n\t\n\tfloat d1 = rand(iuv + vec3(0,0,1));\n\tfloat d2 = rand(iuv + vec3(1,0,1));\n\tfloat d3 = rand(iuv + vec3(0,1,1));\n\tfloat d4 = rand(iuv + vec3(1,1,1));\n\t\n\treturn mix(mix(mix(v1,v2,fuv.x),mix(v3,v4,fuv.x),fuv.y),\n\t\t       mix(mix(d1,d2,fuv.x),mix(d3,d4,fuv.x),fuv.y),\n\t\t\t   fuv.z);\n}\n\nfloat textureNoise(vec3 uv)\n{\n\tfloat c = (linearRand(uv * 1.0) * 32.0 +\n\t\t\t   linearRand(uv * 2.0) * 16.0 + \n\t\t\t   linearRand(uv * 4.0) * 8.0 + \n\t\t\t   linearRand(uv * 8.0) * 4.0) / 32.0;\n\treturn c * 0.5 + 0.5;\n}\n\n// Comment to turn off for faster rendering!\n#define SHADOWS 1\n#define GLOW 1\n#define SPECULAR 1\n\n// Reduce for accuracy-performance trade-off!\n#define RAYMARCH_ITERATIONS 40\n#define SHADOW_ITERATIONS 60\n\n// Increase for accuracy-performance trade-off!\n#define SHADOW_STEP 2.0\n\n\n\n\nvoid fUnionMat(inout float curDist, inout float curMat, float dist, in float mat)\n{\n\tif (dist < curDist) {\n\t\tcurMat = mat;\n\t\tcurDist = dist;\n\t}\n}\n\nfloat fSubtraction(float a, float b)\n{\n\treturn max(-a,b);\n}\n\nfloat fIntersection(float d1, float d2)\n{\n    return max(d1,d2);\n}\n\nfloat fUnion(float d1, float d2)\n{\n    return min(d1,d2);\n}\n\nfloat pSphere(vec3 p, float s)\n{\n\treturn length(p)-s;\n}\n\nfloat pRoundBox(vec3 p, vec3 b, float r)\n{\n \treturn length(max(abs(p)-b,0.0))-r;\n}\n\nfloat pTorus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nbool water = false;\nfloat distf(vec3 p, inout float m)\n{\n\tfloat d = 100000.0;\n\tm = 0.0;\n\t\n\tfUnionMat(d, m, pRoundBox(vec3(0,0,10) + p, vec3(11,11,1), 1.0), 1.0);\n\tfUnionMat(d, m, pRoundBox(vec3(0,0,-2) + p, vec3(5,5,12), 1.0), 1.0);\n\t\n\tif (water)\n\t\tfUnionMat(d, m, pRoundBox(\n\t\t\tvec3(cos(p.y + iTime) * sin(p.z + iTime) * 0.1,\n\t\t\t\t cos(p.x + iTime) * sin(p.z + iTime) * 0.1,\n\t\t\t\t cos(p.x + iTime) * sin(p.y + iTime * 2.0) * 0.35) + p, vec3(10,10,10), 1.0), 2.0);\n\t\n\treturn d;\n}\n\n\nvec3 normalFunction(vec3 p)\n{\n\tconst float eps = 0.01;\n\tfloat m;\n    vec3 n = vec3( (distf(vec3(p.x-eps,p.y,p.z),m) - distf(vec3(p.x+eps,p.y,p.z),m)),\n                   (distf(vec3(p.x,p.y-eps,p.z),m) - distf(vec3(p.x,p.y+eps,p.z),m)),\n                   (distf(vec3(p.x,p.y,p.z-eps),m) - distf(vec3(p.x,p.y,p.z+eps),m))\n\t\t\t\t );\n    return normalize( n );\n}\n\nvec4 raymarch(vec3 from, vec3 increment)\n{\n\tconst float maxDist = 200.0;\n\tconst float minDist = 0.1;\n\tconst int maxIter = RAYMARCH_ITERATIONS;\n\t\n\tfloat dist = 0.0;\n\t\n\tfloat material = 0.0;\n\t\n\tfor(int i = 0; i < maxIter; i++) {\n\t\tvec3 pos = (from + increment * dist);\n\t\tfloat distEval = distf(pos, material);\n\t\t\n\t\tif (distEval < minDist) {\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tdist += distEval;\n\t}\n\t\n\t\n\tif (dist >= maxDist) {\n\t\tmaterial = 0.0;\n\t}\n\t\n\treturn vec4(dist, material, 0, 0);\n}\n\nfloat shadow(vec3 from, vec3 increment)\n{\n\tconst float minDist = 1.0;\n\t\n\tfloat res = 1.0;\n\tfloat t = 1.0;\n\tfor(int i = 0; i < SHADOW_ITERATIONS; i++) {\n\t\tfloat m;\n        float h = distf(from + increment * t,m);\n        if(h < minDist)\n            return 0.0;\n\t\t\n\t\tres = min(res, 4.0 * h / t);\n        t += SHADOW_STEP;\n    }\n    return res;\n}\n\nvec4 getPixel(out float mat, out vec3 hitPos, out vec3 normal, vec3 from, vec3 increment)\n{\n\tvec4 c = raymarch(from, increment);\n\t\n\thitPos = from + increment * c.x;\n\tnormal = normalFunction(hitPos);\n\tvec3 lightPos = normalize(vec3(-1,-1,1));\n\t\n\tfloat diffuse = max(0.0, dot(normal, -lightPos)) * 0.5 + 0.5;\n\tfloat shade = 1.0;\n\t\t/*#ifdef SHADOWS\n\t\t\tshadow(hitPos, lightPos) * 0.3 + 0.7;\n\t\t#else\n\t\t\t1.0;\n\t\t#endif*/\n\tfloat specular = 0.0;\t\n\t\t#ifdef SPECULAR\n\t\tif (dot(normal, -lightPos) < 0.0) {\n\t\t\tspecular = 0.0;\n\t\t} else {\n\t\t\tspecular = pow(max(0.0, dot(reflect(-lightPos, normal), normalize(from - hitPos))), 5.0);\n\t\t}\n\t\t#endif\n\t\n\t\n\tvec4 m = vec4(0,0,0,1);\n\t\n\tif (c.y == 0.0) {\n\t\tm = texture(iChannel1, hitPos.xzy);\n\t\tdiffuse = 1.0;\n\t} else if (c.y == 1.0) {\n\t\thitPos += textureNoise(hitPos) * 2.0;\n\t\tfloat g = cos(hitPos.x + hitPos.y) * 0.5 + 1.0;\n\t\tm = mix(vec4(g * 0.6,g * 0.3,g * 0.1,1),\n\t\t\t\tvec4(g * 0.2,g * 0.8,g * 0.2,1),\n\t\t\t\tclamp(dot(normal,vec3(0,0,-1)),0.0,1.0));\n\t} else if (c.y == 2.0) {\n\t\tm = vec4(0.5,0.9,1.0,0.4);\n\t}\n\t\n\tmat = c.y;\n\t\n\treturn (vec4(m.rgb * diffuse,m.a) + vec4(1,1,1,1) * specular) * shade;\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n\t// Camera\n\t\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= -iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\n\tvec2 m = iMouse.xy / iResolution.xy;\n\tif (iMouse.x == 0.0 && iMouse.y == 0.0) {\n\t\tm = vec2(iTime * 0.06 + 0.14,0.3);\t\n\t}\n\tm = -1.0 + 2.0 * m;\n\tm *= vec2(4.0,-1.5);\n\n\t// camera\t\n\tfloat dist = 50.0;\n\t\n\tvec3 ta = vec3(0,0,0);\n\tvec3 ro = vec3(cos(m.x) * cos(m.y) * dist, sin(m.x) * cos(m.y) * dist, sin(m.y) * dist);\n\t\n\t// camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( 0.0, 0.0, 1.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n\t\n\tfloat mat;\n\tvec3 hitPos, normal;\n\t\n\twater = true;\n\tvec4 col = getPixel(mat, hitPos, normal, ro, rd);\n\t\n\t\n\tif (mat == 2.0 && col.a < 1.0) {\n\t\tvec3 lastHit = hitPos;\n\t\tvec3 nrd = normalize(refract(rd, -normal, REFRACTION_INDEX));\n\t\tif (nrd.x == 0.0 && nrd.y == 0.0 && nrd.z == 0.0) {\n\t\t\tnrd = normalize(reflect(rd, normal));\n\t\t}\n\t\twater = false;\n\t\tcol = mix(getPixel(mat, hitPos, normal, lastHit + nrd * 0.2, nrd),col,col.a);\n\t}\n    \n    \n    col = pow(col, vec4(1.0 / 2.2));\n    col = col*1.4-0.5;\n\tfragColor = col;\n\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}