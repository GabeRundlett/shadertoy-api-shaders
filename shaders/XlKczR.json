{
    "Shader": {
        "info": {
            "date": "1534880094",
            "description": "A simple way to create procedural hexagons",
            "flags": 0,
            "hasliked": 0,
            "id": "XlKczR",
            "likes": 6,
            "name": "Procedural Hexagons",
            "published": 3,
            "tags": [
                "procedural",
                "hexagons"
            ],
            "usePreview": 0,
            "username": "pedrolb",
            "viewed": 1144
        },
        "renderpass": [
            {
                "code": "float uvTile = 10.0;\nfloat hexagonSeparation = 0.05; //[0.0, 1.0]\nfloat hexagonAspect = sqrt(3.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n    uv.y *= hexagonAspect;\n    \n    vec2 uvTiled = uv * uvTile + iTime;\n    vec2 uvOffset = uvTiled + floor((uvTiled.y) / 1.5) * 0.5;\n    vec2 uvChanged = abs(fract(uvOffset) - 0.5) * 2.0;\n    \n    float hexagonMask = 0.0;\n    \n    if(mod(uvTiled.y, 1.5) < 1.0)\n    {\n    \thexagonMask = step(uvChanged.x, 1.0 - hexagonSeparation);\n    }\n    else\n    {\n        hexagonMask = \n                step(uvChanged.x + hexagonSeparation * hexagonAspect, uvChanged.y) + \n                step(uvChanged.y + hexagonSeparation * hexagonAspect, uvChanged.x);\n    }\n\n    // Output to screen\n    //fragColor = vec4(uvChanged, 0.0, 1.0);\n    fragColor = vec4(hexagonMask);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}