{
    "Shader": {
        "info": {
            "date": "1591950095",
            "description": "Hairy critter that eats grass, shoots, roots and leaves...",
            "flags": 0,
            "hasliked": 0,
            "id": "tlXyWH",
            "likes": 8,
            "name": "Shaggy Feeder",
            "published": 3,
            "tags": [
                "hair",
                "fur",
                "animal"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "// \"Shaggy Feeder\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Hairy critter that eats grass, shoots, roots and leaves...\n\n// Learned hairstyling from \"furball\" by simesgreen \n\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nvec2 Noisev2v2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir;\nfloat dstFar, tCur, tRot, rBall, furThk;\nconst float pi = 3.1415927;\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  float b, d;\n  d = dstFar;\n  b = dot (rd, ro);\n  d = b * b + rBall * rBall - dot (ro, ro);\n  return (d > 0.) ? - b - sqrt (d) : dstFar;\n}\n\nvec3 FurPos (vec3 p)\n{\n  float s, t;\n  s = length (p);\n  p /= s;\n  t = 1. + (s - rBall) / furThk;\n  p.xz = Rot2D (p.xz, 0.5 * t * sin (2. * pi * tRot));\n  return vec3 (atan (p.z, p.x), acos (p.y) - 0.3 * t, s);\n}\n\nfloat FurDens (vec3 q)\n{\n  vec2 s;\n  s = Noisev2v2 (96. * q.xy);\n  return smoothstep (0.3, 1., s.x) * smoothstep (1., 1.2, s.y - (q.z - rBall) / furThk);\n}\n\nvec3 FurCol (vec3 ro, vec3 rd, vec3 col)\n{\n  vec4 col4, c4;\n  vec3 p, q, vn;\n  vec2 e;\n  float d;\n  const float nLay = 96.;\n  furThk = 0.2;\n  rBall = 1.;\n  d = BallHit (ro, rd);\n  col4 = vec4 (0.);\n  if (d < dstFar) {\n    p = ro + (d + 0.001) * rd;\n    p.xz = Rot2D (p.xz, 0.5 * sin (2. * pi * tRot + 0.5 * pi));\n    for (float j = 0.; j < nLay; j ++) {\n      q = FurPos (p);\n      c4.a = (j < nLay - 1. || q.z > rBall - furThk) ? FurDens (q) : 1.;\n      if (c4.a > 0.) {\n        e = vec2 (0.01, 0.);\n        vn = normalize (c4.a - vec3 (FurDens (FurPos (p + e.xyy)),\n           FurDens (FurPos (p + e.yxy)), FurDens (FurPos (p + e.xxy))));\n        c4.rgb = mix (vec3 (0.7, 0.4, 0.2), vec3 (0.3, 0.3, 0.5),\n           smoothstep (0.4, 0.6, Fbm2 (16. * q.xy)));\n        c4.rgb = c4.rgb * (0.5 + 0.5 * max (0., dot (vn, sunDir)));\n        c4.rgb *= c4.a * (0.6 + 0.4 * smoothstep (0.3, 0.7, (q.z - (rBall - furThk)) / furThk));\n        col4 += c4 * (1. - col4.a);\n      }\n      p += (2. * furThk / nLay) * rd;\n      if (p.y < 0.02 || col4.a > 0.95 || q.z > rBall) break;\n    }\n  }\n  if (col4.a > 0.95) col = col4.rgb;\n  return col;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.41, 0.55);\n  } else {\n    q = 0.02 * (ro.xz + 0.5 * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.4, 0.5, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, trCol, vn, gPos;\n  vec2 vf;\n  float dstGrnd, dMove, s, bRad, f, w;\n  dMove = 0.1 * tCur;\n  if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    vn = vec3 (0., 1., 0.);\n    gPos = ro + vec3 (0., 0., dMove);\n    vf = vec2 (8., 4. * (1. - smoothstep (0.5, 0.9, dstGrnd / dstFar)));\n    col = mix (vec3 (0.4, 0.5, 0.3), vec3 (0., 0.5, 0.1),\n       smoothstep (0.2, 0.8, Fbm2 (8. * gPos.xz)));\n    w = 0.1 * (Noisefv2 (8. * gPos.xz) - 0.5);\n    if (ro.z < 0. && abs (gPos.x) < 0.8 + w) {\n      f = Fbm2 (32. * gPos.xz);\n      trCol = vec3 (0.6, 0.7, 0.1) * (0.5 + 0.5 * f);\n      bRad = 0.1 + 0.15 * Fbm1 (floor ((gPos.z + 1.) / 2.));\n      s = length (vec2 (gPos.x, mod (gPos.z + 1., 2.) - 1.));\n      if (s < bRad) {\n        trCol = mix (vec3 (0.1 + 0.2 * f, 0., 0.), trCol, smoothstep (-0.04, 0., s - bRad));\n        vf = vec2 (8., 8.);\n      } else vf = vec2 (16., 1.);\n      col = mix (trCol, col, smoothstep (0.75, 0.8, abs (gPos.x) - w));\n    }\n    col *= 0.9 + 0.1 * smoothstep (0.8, 0.9, length (ro.xz));\n    col = mix (vec3 (0.2, 0.5, 0.2), col,  1. - smoothstep (0.5, 0.9, dstGrnd / dstFar));\n    if (vf.x > 0.) vn = VaryNf (vf.x * gPos, vn, vf.y);\n    col = col * (0.2 + 0.8 * max (dot (vn, sunDir), 0.));\n    col = mix (0.8 * col, vec3 (0.3, 0.41, 0.55), pow (1. + rd.y, 16.));\n  } else {\n    col = SkyBgCol (ro, rd);\n  }\n  col = FurCol (ro, rd, col);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.17 * pi;\n  tRot = 0.4 * tCur;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az -= 0.03 * pi * tCur;\n    el += 0.08 * pi * sin (0.05 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.05 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -10.);\n  sunDir = vuMat * normalize (vec3 (1., 2., -1.));\n  dstFar = 50.;\n  rd = vuMat * normalize (vec3 (uv, 4.));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nvec2 Noisev2v2 (vec2 p)\n{\n  return vec2 (Noisefv2 (p), Noisefv2 (p + vec2 (17., 23.)));\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}