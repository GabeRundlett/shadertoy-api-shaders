{
    "Shader": {
        "info": {
            "date": "1604918073",
            "description": "test",
            "flags": 0,
            "hasliked": 0,
            "id": "3d3BW8",
            "likes": 1,
            "name": "Meecarlo's RayMarching Test ",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Meecarlo",
            "viewed": 544
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n\nfloat GetDist(vec3 p){\n\tvec4 s = vec4 (0, 1, 6, 1);\n    \n    float sphereDist = length(p-s.xyz)-s.w;\n    float planeDist=p.y;\n    \n    float d = min(sphereDist,planeDist);\n    return d;\n    \n\n\n}\n\n\nfloat raymarching(vec3 ro, vec3 rd){\n\tfloat dO=0.;\n        \n        for(int i=0; i<MAX_STEPS;i++){\n        \tvec3 p = ro + rd*dO;\n            float dS = GetDist(p);\n            dO +=dS;\n            if (dO>MAX_DIST || dS<SURF_DIST) break;\n        \n        \n        }\n        \n    return dO;\n\n\n\n}\n\nvec3 GetNormal(vec3 p){\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01,0);\n    \n    vec3 n = d- vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n        return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xy += vec2(sin(iTime),cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    \n    float d =  raymarching(p+n*SURF_DIST*2.,l);\n    if(d<length(lightPos-p)) dif *=.1;\n    \n    return dif;\n\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro =vec3(0,1,0);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n    \n\tfloat d=raymarching(ro,rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n   \n    \n    fragColor = vec4(col,1.0);\n\n\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}