{
    "Shader": {
        "info": {
            "date": "1577597516",
            "description": "Update of 4llBDr\nFractal rule is mutated as each 3x3 division is performed.\nMade to work at 1 FPS with blending between images (for a low-power system)\n",
            "flags": 32,
            "hasliked": 0,
            "id": "tlcGW2",
            "likes": 7,
            "name": "Mutating Sierpinski 2",
            "published": 3,
            "tags": [
                "fractal",
                "generative",
                "genetic"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 435
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 v, in vec2 f ) {\n    vec4 v0 = texelFetch(iChannel0, ivec2(f), 0);\n    vec4 v1 = texelFetch(iChannel1, ivec2(f), 0);\n    v = mix(v0, v1, float(iFrame%NDISCARD)/float(NDISCARD));\n    v = pow(v,vec4(1./2.2));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 v, in vec2 f ) {\n    CDISCARD\n    v = texelFetch(iChannel1, ivec2(f), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n\nMutating Sierpinski 2\nCopyright 2019 Theron Tarigo\n\nfractal, random, genetic, generative\n\nFractal rule is mutated as each 3x3 division is performed.\n\n*/\n\nvec2 rand(uint s) {\n  s+=100u;\n  uint a = ((s^1057926937u)*3812423987u)^(s*s*4000000007u);\n  a = (a<<13)^(a>>19);\n  a = (a^2156034509u)*3699529241u;\n  return vec2((uvec2(a,a>>16))&uvec2((1u<<16)-1u))/float((1u<<16)-1u);\n}\n\nvoid mainImage( out vec4 v, in vec2 f ) {\n  CDISCARD\n  v = vec4(0.);\n  vec2 faa = f+1.5*(-.5+rand(uint(int(f.y*iResolution.x+f.x)+(iFrame<<16))).xy);\n  vec2 uv = (faa.xy - iResolution.xy*0.5) / iResolution.x + 0.5;\n  //float a = 1.;\n  if (uv.x<0. || uv.x>1. || uv.y<0. || uv.y>1.) return;\n\n  int[9] m = int[9](0,0,0,0,0,0,0,0,0);\n\n  int d = 0;\n  for (int i = 0; i <= 6; i++) {\n    ivec2 u = ivec2(mod(uv*pow(3.,float(i)),1.)*3.);\n    ivec2 ur = ivec2(uv*pow(3.,float(i))*3.);\n    for (int j = 0; j < 9; j++) {\n      vec2 r = rand(uint(j+9*(32*ur.y+ur.x)+9*9*m[3*u.y+u.x]));\n      if (fract(r.x+iTime*RATE)<0.3/pow(3.,float(i)) ) m[j]+=int(r.y*4.0);\n      m[j] = m[j]%4;\n    }\n    int c = m[3*u.y+u.x];\n    int nd = d;\n    // This little state machine is probably\n    // not the best way to accomplish this\n    if (d==0 && c==3) nd=3;\n    if (d==3 && c==3) nd=0;\n    if (d==0 && c==1) nd=1;\n    if (d==0 && c==2) nd=2;\n    if (d==3 && c==1) nd=2;\n    if (d==3 && c==2) nd=1;\n    d = nd;\n  }\n  if (d==3) v+=1.;\n\n  vec4 v1 = texelFetch(iChannel0, ivec2(f), 0);\n  if (iMouse.w<=0.)\n  v = mix(v1, v, (RATE+.01*exp(-iTime/10.))*vec4(.8,2.,3.,0.)*float(NDISCARD));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define NDISCARD (60)\n#define RATE (0.001)\n#define CDISCARD \\\n  if (iFrame%NDISCARD>1) discard; \\\n  if (iFrame%NDISCARD==1) {v = texelFetch(iChannel0, ivec2(f), 0); return;}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}