{
    "Shader": {
        "info": {
            "date": "1501269303",
            "description": "All set to the Great American Eclipse !",
            "flags": 0,
            "hasliked": 0,
            "id": "ls2fzK",
            "likes": 21,
            "name": "21 August 2017",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "noise"
            ],
            "usePreview": 0,
            "username": "rigel",
            "viewed": 870
        },
        "renderpass": [
            {
                "code": "// Created by Rigel\n// First shader and total noob :) all the knowledge to make this \n// shader came from this one by iq...\n// https://www.shadertoy.com/view/lsfGRr\n\n// returns a random number\nfloat hash(vec2 p) {\n  return fract(sin(dot(p,vec2(12.9898,78.2333)))*43758.5453123);\n}\n\n// return a noise value in a 2D space\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( hash( i + vec2(0.0,0.0) ),\n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ),\n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// returns a fractal noise in a 2D space\nfloat fbm ( vec2 p ) {\n    // rotation matrix to spin the noise space and remove axial bias\n    mat2 m = mat2(0.8,0.6,-0.6,0.8);\n\n    float f = 0.0;\n    f += 0.5000*noise ( p ); p*=m*2.02;\n    f += 0.2500*noise ( p ); p*=m*2.04;\n    f += 0.1250*noise ( p ); p*=m*2.03;\n    f += 0.0650*noise ( p ); p*=m*2.01;\n    // normalize f;\n    f /= 0.9375;\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = -0.5 + fragCoord.xy / iResolution.xy;\n  p.x *= iResolution.x / iResolution.y;\n\n  float r = sqrt( dot(p,p) ); // radius\n\n  // abs is to fix the -pi/pi discontinuity in atan and noise artifact  \n  float a = atan( p.y, abs(p.x) ); // angle\n\n  vec3 color = vec3(0.,0.,0.140);\n  float anim = iTime*0.7;\n\n  // red burn\n  float f = 1.0 - smoothstep(0.2,0.45, r);\n  color = mix(color, vec3(0.47,0.11,0.09), f);\n\n  // shine\n  f = smoothstep(0.4, 0.3, 2.0 * length(p - vec2(0.1,0.1)));\n  color += vec3(1.0,0.85,0.68) * f ;\n\n  // angular distortion\n  float aa = a + 0.2 * fbm (15.0*p);\n\n  // heat\n  f = smoothstep(0.2, .45, r);\n  color = mix(color, vec3(0.210,0.093,0.020), f*fbm(vec2(10.0*r-anim,10.0*aa)));\n\n  // dissipation\n  f = smoothstep(0.40, .5, r);\n  color = mix(color, vec3(0.0,0.0,0.140),f);\n\n  // radius of the sun\n  float rs = fbm(vec2(20.0*r-anim,15.0*aa));\n\n  // sun\n  f = 1.0 - smoothstep(0.29,0.3+(rs*0.02), r);\n  color = mix(color, vec3(0.9,0.8,0.490), f);\n\n  // corona\n  f = 1.0 - smoothstep(0.2, .42, r);\n  color = mix(color, vec3(0.965,0.750,0.008), f*rs);\n\n  // moon\n  f = smoothstep(0.29,0.3,r);\n  color *= f;\n\n  // flare\n  f = smoothstep(3.5, 0.2, 25.0 * length(p - vec2(0.2,0.2)));\n  color += vec3(.9,0.7,0.0) * 0.3 * f ;\n\n  // atmosphere\n  color = mix(color, vec3(.9,0.8,0.6), smoothstep(0.4,1.0,r)*0.2*fbm(vec2(4.1*r-anim,25.*(a+0.2 * fbm (3.0*p)))));\n\n  fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}