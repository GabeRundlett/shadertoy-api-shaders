{
    "Shader": {
        "info": {
            "date": "1715618229",
            "description": "New epoqe logo\n\nThe minimal version can be seen at: https://www.shadertoy.com/view/4cySDR",
            "flags": 0,
            "hasliked": 0,
            "id": "4cGSDR",
            "likes": 9,
            "name": "New epoqe",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "demoscene",
                "logo"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "float radius = .05; //radius of o (and the other characters, basically)\nfloat width = .005; //stroke width of font\nfloat char_offset = .15; //distance of letters to each other\n\nfloat pi = 3.1415925;\n\nvec2 p0 = vec2(0);\nvec2 p1, p2;\n\nfloat deg_step1 = .04;\nfloat deg_step2 = .11;\n\nfloat len_fac1 = .86;\nfloat len_fac2 = .9;\n\nfloat fac = .33;\nfloat fac2 = .368;\nfloat fac3 = 1.05;\n\nconst float original_len = .8;\n\nfloat len = original_len;\nfloat deg = .02;\n\nvec2 p7 = vec2(0,original_len);\n\nmat2 rot(float t){\n\treturn mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nfloat absmin(float a, float b){\n    return min(abs(b),abs(a)) * max(sign(b),sign(a));\n}\n\nfloat sd_segment(vec2 p, vec2 a, vec2 b)\n{\n\tp -= a;\n\tb -= a;\n    float h = max(min( dot(p,b)/dot(b,b), 1.), 0. );\n    return length(p - b*h) * sign(dot(b,vec2(-p.y,p.x)));\n}\n\nfloat sd_box(vec2 p, vec2 b)\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.)) + min(max(d.x,d.y),0.);\n}\n\nfloat sd_ring(vec2 uv){\n\treturn abs(length(uv)-radius)-width;\n}\n\nfloat sd_ring_section(vec2 p){\n    p = rot(.4*pi)*p;\n    p.x = abs(p.x);\n    p = rot(.9*pi)*p;\n\n    return max(sd_ring(p),length(vec2(p.x,max(.0,abs(radius-p.y)-width)))*sign(p.x));\n}\n\nfloat logo_part(vec2 p){\n\tp1 = vec2(sin(deg),cos(deg))*len;\n\tdeg += deg_step2;\n\tlen *= len_fac2;\n\n\tp2 = vec2(sin(deg),cos(deg))*len;\n\tdeg += deg_step1;\n\tlen *= len_fac1;\n\n    return absmin(absmin(sd_segment(p, p0, p2), sd_segment(p, p2, p1)), sd_segment(p, p1, p0));\n}\n\nfloat logo(vec2 uv){\n    return min(max(min(min(logo_part(uv), logo_part(uv)),logo_part(uv)),\n\t               sd_segment(uv,p7*fac2,p2*fac3*fac2)),\n\t           absmin(sd_segment(uv,p0,p2*fac3*fac),sd_segment(uv,p2*fac3*fac,p7*fac)));\n}\n\nfloat epoqe(vec2 uv){\n\tuv.x -= 2.*char_offset;\n\n\tfloat dis = min(sd_ring_section(uv),sd_box(uv-vec2(0,width),vec2(radius,width)));\n\tuv.x += char_offset;\n\tdis = min(dis,min(sd_ring(uv),sd_box(uv-vec2(radius,-radius),vec2(width,radius))));\n\tuv.x += char_offset;\n\treturn min(dis,sd_ring(uv));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec2 uv = 2.5*(fragCoord.xy - .5*iResolution.xy) / iResolution.x;\n\n\tuv.y += .19;\n\tuv.x = abs(uv.x);\n\n\tfloat dis = logo(uv);\n\tdis = min(dis, epoqe(uv*.6-vec2(0,-.1))/.6);\n\n\tfragColor = vec4(dis * iResolution.x + 2.5)/5.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}