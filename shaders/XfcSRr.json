{
    "Shader": {
        "info": {
            "date": "1713467294",
            "description": "Plots arbitrary function. ",
            "flags": 0,
            "hasliked": 0,
            "id": "XfcSRr",
            "likes": 1,
            "name": "2D Function Plot",
            "published": 3,
            "tags": [
                "plotfunction"
            ],
            "usePreview": 0,
            "username": "Astral",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float t = iTime;\n    \n    // Transforming uv to graph space (-pi to pi for x, -1 to 1 for y)\n    float x = (uv.x * 2.0 * 3.14159) - 3.14159;\n    \n    // Arbitrary function f(x) or f(x,t)\n    float y = sin(sin(x)+t);\n\n    // Transform y to pixel space\n    float pixelY = (y + 1.0) / 2.0;\n\n    // Drawing the function: Check if current pixel is close to function y-value\n    float plotWidth = 0.005; // width of the plot line\n    bool onFunction = abs(uv.y - pixelY) < plotWidth;\n\n    // Draw grid lines\n    float gridSpacingX = 0.1; // Space between vertical grid lines\n    float gridSpacingY = 0.1; // Space between horizontal grid lines\n    vec3 gridColor = vec3(0.2, 0.2, 0.2); // Color of the grid lines\n    bool onGridX = mod(fragCoord.x, gridSpacingX * iResolution.x) < 1.0;\n    bool onGridY = mod(fragCoord.y, gridSpacingY * iResolution.y) < 1.0;\n\n    // Draw axes in the center\n    float axisWidth = 1.0; // width of the axis lines\n    bool onXAxis = abs(iResolution.y * uv.y - iResolution.y / 2.0) <= axisWidth;\n    bool onYAxis = abs(iResolution.x * uv.x - iResolution.x / 2.0) <= axisWidth;\n    vec3 axisColor = vec3(1.0, 1.0, 1.0); // Color of the axes\n\n    // Color assignment\n    if (onFunction) {\n        fragColor = vec4(1.0, 0.5, 0.0, 1.0); // Orange color for the function\n    } else if (onXAxis || onYAxis) {\n        fragColor = vec4(axisColor, 1.0); // White color for the axes\n    } else if (onGridX || onGridY) {\n        fragColor = vec4(gridColor, 1.0); // Light gray color for the grid lines\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0); // Black background\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}