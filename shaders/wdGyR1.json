{
    "Shader": {
        "info": {
            "date": "1602304464",
            "description": "Real-time path tracing, using some speedup techniques",
            "flags": 32,
            "hasliked": 0,
            "id": "wdGyR1",
            "likes": 10,
            "name": "Diffuse-Glossy Sphere W/ Cubemap",
            "published": 3,
            "tags": [
                "sphere",
                "cubemap",
                "diffuse",
                "glossy"
            ],
            "usePreview": 1,
            "username": "milesWaugh",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "//You can change the cubemap shown under Buffer A\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 r = iResolution.xy;\n    fragColor  = vec4(0.);\n    fragColor += texture(iChannel0, uv) * 2.0;\n    fragColor += texture(iChannel0, uv - vec2( 0., 1.) / r);\n    fragColor += texture(iChannel0, uv - vec2( 0.,-1.) / r);\n    fragColor += texture(iChannel0, uv - vec2( 1., 0.) / r);\n    fragColor += texture(iChannel0, uv - vec2(-1., 0.) / r);\n    fragColor += texture(iChannel0, uv - vec2(-1., 1.) / r) * .5;\n    fragColor += texture(iChannel0, uv - vec2(-1 ,-1.) / r) * .5;\n    fragColor += texture(iChannel0, uv - vec2( 1., 1.) / r) * .5;\n    fragColor += texture(iChannel0, uv - vec2( 1.,-1.) / r) * .5;\n    fragColor /= 5.;\n    //fragColor-=0.01; //Blackpoint\n    float x = max(fragColor.x, 0.);\n    float y = max(fragColor.y, 0.);\n    float z = max(fragColor.z, 0.);\n    fragColor = vec4(pow(1.-1./(1.+5.*x*x),0.45), pow(1.-1./(1.+5.*y*y),0.45), pow(1.-1./(1.+5.*z*z), 0.45), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define c cos(iTime/5.)\n#define s sin(iTime/5.)\n\nvec3 random(vec3 pos) {\n    pos.x *= 50.;\n    pos.y *= 50.;\n    float x = fract(sin(dot(pos, vec3(64.25375463, 23.27536534, 86.29678483))) * 59482.7542);\n    float y = fract(sin(dot(pos, vec3(34.78372462, 89.68045824, 64.86872345))) * 49368.2846);\n    float z = fract(sin(dot(pos, vec3(46.28658934, 21.58496345, 67.10684735))) * 83460.2385);\n    return vec3(x, y, z);\n}\n\nvec3 pow3(vec3 v, float n) {\n    return vec3(pow(v.x, n), pow(v.y, n), pow(v.z, n));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.);\n    vec2 uvm = (fragCoord - (iResolution.xy / 2.)) / (iResolution.y / 2.);\n    int iters = dot(uvm, uvm) > 1. ? 1 : 32;\n    \n    for(int i = 0; i < iters; i++) { //32 samples per frame, for the sphere\n        vec2 offset = random(vec3(fragCoord.x, fragCoord.y + iResolution.y, iTime * 60. + float(i))).xy;\n        vec2 uv = ((fragCoord + offset) - (iResolution.xy / 2.)) / (iResolution.y / 2.);\n        float d = dot(uv, uv) * 1.05;\n        vec3 normal = d < 1. ? vec3(uv.x, uv.y, sqrt(1. - d)) : vec3(0.);\n        vec3 r, albedo, refcol, refvec, col;\n        if(d < 1.) {\n            refvec = (2. * normal.z * normal) - vec3(0., 0., 1.);\n            r = random(vec3(uv.x, uv.y, iTime * 60. + float(i))) * 2.0 - 1.0;\n            if(dot(r, normal) < 0.)\n                r = -r;\n            refvec = normalize(refvec * 15.0 + r);\n            float d2 = dot(r, normal);\n            r = vec3(r.x * c - r.z * s, r.y, r.z * c + r.x * s);\n            refvec = vec3(refvec.x * c - refvec.z * s, refvec.y, refvec.z * c + refvec.x * s);\n            albedo = d2 * 3. * pow3(texture(iChannel0, r).rgb, 2.2) * vec3(0.3, 0.6, 0.8);\n            refcol = 3. * pow3(texture(iChannel0, refvec).rgb, 2.2);\n            float fresnel = 1. - normal.z;\n            fresnel = 0.04 + 0.96 * fresnel * fresnel * fresnel * fresnel * fresnel;\n            col = fresnel * refcol + (1. - fresnel) * albedo;\n        } else {\n            r = normalize(vec3(uv.x, uv.y, -5.));\n            r = vec3(r.x * c - r.z * s, r.y, r.z * c + r.x * s);\n            col = 3. * pow3(texture(iChannel0, r).rgb, 2.2);\n        }\n        fragColor += vec4(col.x, col.y, col.z, 1.0);\n    }\n    \n    fragColor /= float(iters);\n    fragColor = (fragColor + 5. * texture(iChannel1, fragCoord / iResolution.xy).rgba) / 6.; //persist frames\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}