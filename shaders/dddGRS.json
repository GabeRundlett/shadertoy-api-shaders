{
    "Shader": {
        "info": {
            "date": "1677487383",
            "description": "gradient color horizontal  3",
            "flags": 0,
            "hasliked": 0,
            "id": "dddGRS",
            "likes": 0,
            "name": "gradient color horizontal  3",
            "published": 3,
            "tags": [
                "gradientcolorhorizontal3"
            ],
            "usePreview": 0,
            "username": "tianluo97",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "\n\n//The shader code that embeds a 938x84 frame buffer at its largest size without stretching the input\n\nconst vec2 target_resolution = vec2(940, 86);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Same texCoord as in Minecraft\n    vec2 texCoord = fragCoord/iResolution.xy;\n    // Own uv variable\n    vec2 uv = texCoord;\n    \n    // Center origin around screen center (range -0.5, 0.5)\n    uv -= .5;\n    \n    // Squish image in excessive dimension\n    float r = (iResolution.x/iResolution.y) / (target_resolution.x/target_resolution.y);\n    if (r >= 1.) uv.x *= r;\n    else uv.y /= r;\n    \n    // Recenter origin to start at 0 (range 0.0, 1.0)\n\tuv += .5;\n    uv.y -= 0.5/r - 0.5;    \n    \n    float PI = 3.1415926;\n    float time = iTime * 0.04; \n    \n    \n    if(uv.x > 0.2){\n\n    vec4 color0 = vec4(0.784,0.827,0.941,1.0);\n    vec4 color1 = vec4(0.859,0.161,0.161,1.0); \n    vec4 color2 = vec4(1.000,0.506,0.380,1.0);\n    vec4 color02 = vec4(0.180,0.318,0.620,1.0);\n    vec4 color3 = vec4(0.000,0.220,0.820,1.0);\n    \n\n    float scale = 1.0;\n    float step0 = 0.02;\n    float step1 = 0.2;\n    float step2 = 0.5;\n    float step3 = 1.0;\n\n    \n    //修正uv.x\n    uv.x = smoothstep(0.2,1.0,uv.x);\n\n    float offset = uv.x ;\n    float y = offset;\n    \n    //morning Color\n    if (y < step0) {\n    float dist0 = smoothstep(0.0, step0, y);\n    dist0 = sqrt(dist0);\n    fragColor = mix(color0, color1, dist0);\n    }\n    \n    if (y > step0 && y < step1) {\n    float dist1 = smoothstep(step0, step1, y);\n    fragColor = mix(color1, color2, dist1);\n    }\n    \n    //红到蓝 step1 - step2\n    else if (y > step1 && y < step2) {\n    float dist2 = smoothstep(step1, step2, y);\n    fragColor = vec4(dist2,dist2,dist2,1.0);\n    fragColor = mix(color2, color02, dist2);\n    }\n    \n    else if (y > step2 && y < step3) {\n    float dist02 = smoothstep(step2, step3, y);\n    fragColor = vec4(dist02,dist02,dist02,1.0);\n    fragColor = mix(color02, color3, dist02);\n    }\n    \n    else if (y > step3){\n    float dist3 = smoothstep(step3, 1.0 * scale, y);\n    fragColor = mix(color3, color3, dist3);\n    }\n    \n    vec3 morningScatter = vec3(1.000,0.510,0.302);\n    \n    fragColor = mix(vec4(morningScatter,1.0),fragColor,pow(uv.x/1.3,0.5));\n    if (y < step0) {\n    float dist0 = smoothstep(0.0, step0, y);\n    fragColor = mix(color0, fragColor, dist0);\n    }\n    fragColor = sqrt(fragColor);\n    \n    \n    //night Color\n    vec4 ncolor0 = vec4(0.784,0.827,0.941,1.0);\n    vec4 ncolor1 = vec4(1.000,0.584,0.220,1.0); \n    vec4 ncolor2 = vec4(1.000,0.820,0.639,1.0);\n    vec4 ncolor02 = vec4(0.698,0.839,0.976,1.0);\n    vec4 ncolor3 = vec4(0.302,0.639,1.000,1.0);\n    \n    float nstep0 = 0.05;\n    float nstep1 = 0.2;\n    float nstep2 = 0.3;\n    float nstep3 = 1.0;\n    \n    vec4 nightColors;\n    if (y < nstep0) {\n    float dist0 = smoothstep(0.0, nstep0, y);\n    nightColors = mix(ncolor0, ncolor1, dist0);\n    }\n    \n    else if (y > nstep0 && y < nstep1) {\n    float dist1 = smoothstep(nstep0, nstep1, y);\n    nightColors = mix(ncolor1, ncolor2, dist1);\n    }\n    \n    else if (y > nstep1 && y < nstep2) {\n    float dist2 = smoothstep(nstep1, nstep2, y);\n    nightColors = mix(ncolor2, ncolor02, dist2);\n    }\n    \n    else{\n    float dist3 = smoothstep(nstep2, nstep3, y);\n    nightColors = mix(ncolor02, ncolor3, dist3);\n    }\n   \n    vec3 nightScatter = vec3(1.000,0.925,0.820);\n    nightColors.rgb = mix(nightScatter, nightColors.rgb, pow(uv.x/1.3,0.1));\n    if (y < nstep0) {\n    float dist0 = smoothstep(0.0, nstep0, y);\n    nightColors = mix(ncolor0, nightColors, dist0);\n    }\n    nightColors = sqrt(nightColors);\n    \n    //scatter\n    float scatter = pow((sin(iTime * .3) * 0.5 + 0.5),1.0 / 1.0);\n    //float scatter = pow(iMouse.x / iResolution.x,1.0 / 15.0);\n    \n    //skyColors早上是fragColor，晚上是蓝色\n    vec3 morningColor = fragColor.rgb;\n    vec3 nightColor = nightColors.rgb;\n    vec3 skyColors = mix(morningColor,nightColor,scatter);\n\n    /*\n    //scatterColor早上是橙色，晚上是黄色\n    vec3 morningScatter = vec3(1.000,0.412,0.161);\n    morningScatter = mix(color0.rgb,morningScatter,0.0);\n    vec3 nightScatter = vec3(1.000,0.816,0.561)*1.2;\n    vec3 scatterColor = mix(morningScatter,nightScatter, scatter);*/\n    \n    //vec3 color = mix(skyColors,vec3(scatterColor),pow(atmosphere/1.3,1.5));\n    \n    fragColor = vec4(skyColors,1.0);\n    }\n    \n    else {\n    vec3 startColor = vec3(0.341,0.482,0.886);\n    vec3 endColor = vec3(0.784,0.827,0.941);\n    \n    vec3 color = mix(startColor,endColor,uv.x * 5.0);\n    fragColor = vec4(color,1.0);\n    fragColor = sqrt(fragColor);\n    }\n    \n    // Black bars at the sides\n    if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) fragColor = vec4(0);    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}