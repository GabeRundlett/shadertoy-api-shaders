{
    "Shader": {
        "info": {
            "date": "1400594740",
            "description": "A shader I originally wrote for a loading screen. Makes use of iq's voronoi shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdlXWH",
            "likes": 49,
            "name": "Psychedelic Glass",
            "published": 3,
            "tags": [
                "mattdamon"
            ],
            "usePreview": 1,
            "username": "paniq",
            "viewed": 1516
        },
        "renderpass": [
            {
                "code": "\nvec2 uv;\nvec2 pos;\n\nfloat hash1( float n ) { return fract(sin(n)*43758.5453); }\nvec2  hash2( vec2  p ) { p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) ); return fract(sin(p)*43758.5453); }\n\nvec2 rotate(vec2 p, float a) {\n    float cs = cos(a), sn = sin(a);\n    return (mat3(\n        cs, sn, 0.0,\n        -sn, cs, 0.0,\n        0.0, 0.0, 1.0) * vec3(p,1.0)).xy;\n}\n\n// ratio: 3 = neon, 4 = refracted, 5+ = approximate white\nvec3 physhue2rgb(float hue, float ratio) {\n    return smoothstep(\n        vec3(0.0),vec3(1.0),\n        abs(mod(hue + vec3(0.0,1.0,2.0)*(1.0/ratio),1.0)*2.0-1.0));\n}\n\nvec4 voronoi( in vec2 x, float c, out vec2 rp)\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 8.0 );\n\tfloat m2 = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n        vec2 o = hash2( n + g );\n\n\t\t// animate\n\t\tfloat cid = hash1( dot(n+g,vec2(7.0,113.0) ) );\n\t\tif (cid < 0.1)\n        \to = 0.5 + 0.5*abs(mod(c + o,2.0)-1.0);\n\n\t\tvec2 r = g - f + o;\n\n        // triangular\n\t\tvec2 d = vec2( max(abs(r.x)*0.866025+r.y*0.5,-r.y), \n\t\t\t\t        1.0 );\n\n\t\t\n        if( d.x<m.x )\n        {\n\t\t\tm2 = m.x;\n            m.x = d.x;\n            m.y = cid;\n\t\t\tm.z = d.y;\n\t\t\trp = n + g;\n        }\n\t\telse if( d.x<m2 )\n\t\t{\n\t\t\tm2 = d.x;\n\t\t}\n\n    }\n    return vec4( m, m2-m.x );\n}\n\nvec4 render_sheet(vec2 p, float fi, float a) {\n\t\n\tfloat z = exp(mix(log(32.0), log(0.5), a));\n\n\t//p.y = abs(p.y);\n\tp.y = -p.y;\n\tfloat tpos = abs(p.x); //max(abs(p.x)*0.866025-p.y*0.5,p.y);\n\tp.x = abs(p.x);\n\tp = rotate(p, radians(60.0));\n\tp.x = abs(p.x);\n\t\n\t//p = rotate(p, radians(-60.0));\n\t//p.x = abs(p.x);\n\t\n\tvec2 rp;\n\tfloat o = fi*128.0-step(fi,0.2)*a*2.0;\n\tvec4 c = voronoi( z*p+o, fi+a*8.0, rp);\n\trp -= o;\n\t\n\tfloat pp = 0.6 - (max(abs(rp.x)*0.866025+rp.y*0.5,-rp.y)/4.0); // + fract(fi+c.y);\n\tpp = clamp(pp, 0.0, 1.0);\n\t\n\tfloat fadein = clamp(a*2.0,0.0,1.0);\n\t\n\tfloat rep = 1.0-a-(pp-sin(c.w*40.0)*0.1)*fadein;//;\n\t\n\tfloat alpha = clamp((rep-c.w)*16.0, 0.0, 1.0);\n\tif (alpha > 0.0) {\t\n\t\tfloat hue = c.w*(1.0+c.y*8.0)\n\t\t\t+fi+a*9.0*c.y*mix(1.0,8.0,step(fi,0.1))\n\t\t\t-tpos*1.0;\n\t\t\n\t\tvec3 w = physhue2rgb(hue, 4.0);\n\t\tw.z = 0.5; //sin(iTime)*0.1+0.5;\n\t\treturn vec4(w, alpha);\n\t}\t\n\t\n\treturn vec4(0.0);\n}\n\nvec4 alpha(vec4 a, vec4 b) {\n\ta = mix(b, a, a.w);\n\ta.w = max(a.w, b.w);\n\treturn a;\n}\n\n#define STEPS 6\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pos = (uv*2.0-1.0)*aspect;\n    \n\tvec4 col = vec4(0.0);\n\t\n\tfloat s = 1.0/float(STEPS);\n\t\n\tfloat t = iTime*0.5;\n\tfloat a = fract(t)*s;\n\tt -= fract(t);\n\t\n\tfor (int i = STEPS-1; i >= 0; --i) {\n\t\tfloat fi = float(i);\n\t\tcol = alpha(col, render_sheet(pos, hash1(t-fi), a+fi*s));\n\t\tif (col.w >= 1.0) break;\n\t}\n\t\n\tfloat blend = sin(iTime)*0.5+0.5;\n\tblend = 0.2; //smoothstep(0.0,1.0,blend);\n\t\n\tvec3 co = texture(iChannel0, -uv + col.xy*blend*0.1).rgb;\n\tcol.rgb = mix(co, col.rgb, blend);\n\t\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}