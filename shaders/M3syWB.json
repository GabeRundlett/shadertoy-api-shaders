{
    "Shader": {
        "info": {
            "date": "1726633040",
            "description": "audio reactive thx to help from @420bongrips247365",
            "flags": 4,
            "hasliked": 0,
            "id": "M3syWB",
            "likes": 0,
            "name": "sep172024",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 46
        },
        "renderpass": [
            {
                "code": "// Audio-reactive version of \"sep162024\" by brendanluu\n// Modified to incorporate audio reactivity and dynamic color changes\n\n#define NUM_RECTANGLES 40 // Number of cards in a deck\n#define NUM_STACKS 18 // Number of stacks\n#define SPAWN_INTERVAL 0.1 // Longer interval between stack spawns\n#define RECT_WIDTH .36\n#define RECT_HEIGHT 0.78\n#define GRAVITY 0.05 // Further reduced gravity for even longer fall\n#define BOUNCE_FACTOR 0.5\n#define TRAIL_FADE_RATE 0.1 // How quickly the trail fades\n#define PRE_BAKE_TIME 47.0 // Time to pre-bake in seconds\n#define FADE_DURATION 25.0 // Duration of fade-in and fade-out effects\n\n// Cosine based palette, 4 vec3 params\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Audio reactivity functions\nfloat getLowFreq() {\n    return texture(iChannel0, vec2(0.1, 0.0)).x;\n}\n\nfloat getMidFreq() {\n    return texture(iChannel0, vec2(0.5, 0.0)).x;\n}\n\nfloat getHighFreq() {\n    return texture(iChannel0, vec2(0.9, 0.0)).x;\n}\n\n// New function to get overall audio intensity\nfloat getAudioIntensity() {\n    return (getLowFreq() + getMidFreq() + getHighFreq()) / 3.0;\n}\n\nvec4 getRectPosition(float id, float time) {\n    float stackId = floor(id - float(NUM_RECTANGLES / NUM_STACKS));\n    float cardInStackId = mod(id, float(NUM_RECTANGLES / NUM_STACKS));\n    float spawnTime = stackId * SPAWN_INTERVAL + cardInStackId * .1;\n    \n    if (time < spawnTime) return vec4(-1.0, 0.0, 0.0, 0.0);\n    \n    time -= spawnTime;\n    \n    vec2 spawnPos = vec2(\n        rand(vec2(stackId, 0.0)) * 0.8 + 0.1,\n        1.1 + rand(vec2(stackId, 1.0)) * 0.2\n    );\n    \n    float fallTime = 5.3 + getMidFreq() * 2.0; // Adjust fall time based on mid frequencies\n    float t = mod(time, fallTime * 2.0);\n    \n    // Modify gravity based on low frequencies\n    float audioGravity = GRAVITY * (1.0 + getLowFreq() * 2.0);\n    \n    float y = t < fallTime \n        ? spawnPos.y - 0.5 * audioGravity * t * t\n        : max(0.0, RECT_HEIGHT/2.0 * 0.9 + BOUNCE_FACTOR * sin((t - fallTime) * 3.14159 / fallTime) * (1.0 - (t - fallTime) / fallTime));\n    \n    // Add some horizontal movement based on high frequencies\n    float xOffset = sin(time * 2.0) * getHighFreq() * 0.1;\n    \n    // Calculate fade factor\n    float fadeFactor = 1.0;\n    if (time < FADE_DURATION) {\n        fadeFactor = time / FADE_DURATION; // Fade in\n    } else if (t > fallTime * 2.0 - FADE_DURATION) {\n        fadeFactor = (fallTime * 2.0 - t) / FADE_DURATION; // Fade out\n    }\n    \n    return vec4(spawnPos.x + cardInStackId * 0.005 + xOffset, y, fadeFactor, time);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Add PRE_BAKE_TIME to iTime\n    float adjustedTime = iTime + PRE_BAKE_TIME;\n    \n    // Dynamic color palette parameters based on audio intensity\n    float audioIntensity = getAudioIntensity();\n    vec3 a = vec3(1.698, 0.500 + audioIntensity * 0.5, 0.500);\n    vec3 b = vec3(-3.142, 0.500, 0.500 + audioIntensity * 0.5);\n    vec3 c = vec3(0.335 + audioIntensity * 0.2, 0.990, 0.990);\n    vec3 d = vec3(-1.012, 0.333 + audioIntensity * 0.3, 0.667);\n    \n    // Generate background color using the dynamic palette\n    float bgT = adjustedTime * 0.1 + audioIntensity * 0.5;\n    vec3 bgColor = palette(bgT + uv.x * 0.2 + uv.y * 0.3, a, b, c, d);\n    vec4 col = vec4(bgColor, 1.0);\n    \n    // Single loop for all rectangles\n    for (int i = 0; i < NUM_RECTANGLES; i++) {\n        vec4 rectInfo = getRectPosition(float(i), adjustedTime);\n        vec2 rectPos = rectInfo.xy;\n        float fadeFactor = rectInfo.z;\n        \n        if (rectPos.x >= 0.0) { // Check if the rectangle is active\n            float distX = abs(uv.x - rectPos.x);\n            float distY = abs(uv.y - rectPos.y);\n            \n            // Adjust rectangle size based on audio\n            float audioSizeMultiplier = 1.0 + getHighFreq() * 0.5;\n            float rectWidth = RECT_WIDTH * audioSizeMultiplier;\n            float rectHeight = RECT_HEIGHT * audioSizeMultiplier;\n            \n            if (distX < rectWidth * 0.5 && distY < rectHeight * 0.5) {\n                float t = float(i) / float(NUM_RECTANGLES) + adjustedTime * 0.1;\n                \n                // Use dynamic palette for card colors\n                vec3 cardColor = palette(t + audioIntensity * 0.3, a, b, c, d);\n                \n                // Modify card color based on individual frequency bands\n                cardColor += vec3(getLowFreq() * 0.2, getMidFreq() * 0.2, getHighFreq() * 0.2);\n                \n                // Calculate opacity based on distance from center\n                float centerDist = max(distX / (rectWidth * 0.9), distY / (rectHeight * 0.5));\n                float opacity = 1.0 - pow(centerDist, 0.9); // Soften the edges\n                \n                // Apply trail effect\n                float trailFade = 10.0 - (1.0 - rectPos.y) * TRAIL_FADE_RATE;\n                opacity *= trailFade;\n                \n                // Apply fade-in and fade-out effect\n                opacity *= fadeFactor;\n                \n                // Increase opacity based on audio intensity\n                opacity *= 1.0 + audioIntensity * 0.3;\n                \n                opacity = clamp(opacity, 0.0, 1.0);\n                \n                vec4 color = vec4(cardColor, opacity);\n                col = color * color.a + col * (1.0 - color.a);\n            }\n        }\n    }\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}