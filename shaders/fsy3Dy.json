{
    "Shader": {
        "info": {
            "date": "1632056472",
            "description": "Ohh look all those nice colors and vibes, a free visual drug which doesn't harm you :D I can't stop watching this.\n\nRemix of \"Electric Flower - WebGLSamples\" by oneshade. https://www.shadertoy.com/view/wt3cWB",
            "flags": 32,
            "hasliked": 0,
            "id": "fsy3Dy",
            "likes": 12,
            "name": "Electric Flower LSD",
            "published": 3,
            "tags": [
                "cube",
                "psychedelic",
                "glow",
                "webglsamples",
                "electricflower"
            ],
            "usePreview": 0,
            "username": "Krischan",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "/*\n\nRecreation of \"Electric Flower\" by Henrik Rydgard: https://webglsamples.org/electricflower/electricflower.html\nI have no idea how he actually achieved the effect but this is what I came up with.\n\nRemix by Krischan, who has a rough idea how this works ;)\n\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Hue to RGB function from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(hue) 0.6 + 0.6 * cos(6.3 * hue + vec3(0, 23, 21))\n#define uv2rgb(uv) .5 + .5 * cos( atan(uv.x,uv.y) + 6.3 * iTime + vec4(0,23,21,0) )\n\n#define MIX max(1.0/(iTime+1.0),0.05)\n\nfloat mapScene(in vec3 p) {\n    float r = iTime * 2.0;\n    float c = cos(r), s = sin(r);\n    mat2 rmat = mat2(c, -s, s, c);\n\n    p.yz *= rmat;\n    p.xz *= rmat;\n\n    vec3 q = abs(p) - 0.5;\n    float box = max(q.x, max(q.y, q.z));\n\n    box = max(box, -max(q.x, q.y) - 0.03);\n    box = max(box, -max(q.x, q.z) - 0.03);\n    box = max(box, -max(q.y, q.z) - 0.03);\n\n    return box;\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + vec3(0.001, 0.0, 0.0)) - mapScene(p - vec3(0.001, 0.0, 0.0)),\n                          mapScene(p + vec3(0.0, 0.001, 0.0)) - mapScene(p - vec3(0.0, 0.001, 0.0)),\n                          mapScene(p + vec3(0.0, 0.0, 0.001)) - mapScene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screenCenter = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n    float aspect=iResolution.x/iResolution.y*0.66;\n    \n    fragColor = mix(texture(iChannel0, (fragCoord - screenCenter) * 0.98 / iResolution.xy + 0.5),uv2rgb(uv)/(aspect-length(uv)),MIX);\n\n    vec3 ro = vec3(0.0, 0.0, min(iTime,10.));\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float t = 0.0;\n    for (int iter=0; iter < 150; iter++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            fragColor.rgb += hue2rgb(iTime * 0.5) * 0.5;\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}