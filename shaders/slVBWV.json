{
    "Shader": {
        "info": {
            "date": "1665304384",
            "description": "simple typo animation",
            "flags": 0,
            "hasliked": 0,
            "id": "slVBWV",
            "likes": 10,
            "name": "Rolling Typo",
            "published": 3,
            "tags": [
                "typoanimation"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define SPEED 200.\n#define ZERO (min(iFrame,0))\n#define MATERIAL0 0\n#define MATERIAL1 1\n#define MATERIAL2 2\n\n\nfloat segBase(vec2 p){\n    vec2 prevP = p;\n    \n    float size = 0.02;\n    float padding = 0.05;\n\n    float w = padding*3.0;\n    float h = padding*5.0;\n\n    p = mod(p,0.05)-0.025;\n    float thickness = 0.005;\n    float gridMask = min(abs(p.x)-thickness,abs(p.y)-thickness);\n    \n    p = prevP;\n    float d = B(p,vec2(w*0.5,h*0.5));\n    float a = radians(45.0);\n    p.x = abs(p.x)-0.1;\n    p.y = abs(p.y)-0.05;\n    float d2 = dot(p,vec2(cos(a),sin(a)));\n    d = max(d2,d);\n    d = max(-gridMask,d);\n    return d;\n}\n\nfloat seg0(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    return d;\n}\n\nfloat seg2(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x-=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\nmat2 Rot0(vec2 p){\n    return Rot(radians(90.));\n}\n\nfloat ring(vec3 p, float size){\n    return max(abs(p.y)-1.,abs(length(p.xz)-size)-0.001);\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    p.yz*=Rot0(p.yz);\n    p.xy*=Rot0(p.xy);\n    float d = ring(p,0.4);\n    vec2 res = vec2(d,MATERIAL0);\n    \n    p.z-=0.85;\n    d = ring(p,0.4);\n    vec2 res2 = vec2(d,MATERIAL1);\n    \n    p.z+=1.7;\n    d = ring(p,0.4);\n    vec2 res3 = vec2(d,MATERIAL2);\n    \n    return combine(res,combine(res2,res3));\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 tex(vec3 p, float dir){\n    vec2 uv = vec2(0.9*atan(p.x,p.z)/6.2832,p.y/3.);\n    uv*=1.5;\n    uv.y*=-1.;\n    uv.x+=iTime*0.1*dir;\n    uv.x = mod(uv.x,0.3)-0.15;\n    uv*=Rot(radians(90.));\n    float d = seg2(uv-vec2(-0.3,0.));\n    float d2 = seg0(uv-vec2(-0.1,0.));\n    d = min(d,d2);\n    d2 = seg2(uv-vec2(0.1,0.));\n    d = min(d,d2);\n    d2 = seg2(uv-vec2(0.3,0.));\n    d = min(d,d2);\n    \n    return mix(vec3(0.0),vec3(1.8),S(d,0.0));\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    vec3 prevP = p;\n    p.yz*=Rot0(p.yz);\n    p.xy*=Rot0(p.xy);\n    if(mat == MATERIAL0){\n        col = tex(p,1.);        \n    } else if(mat == MATERIAL1){\n        p.z-=0.85;\n        col = tex(p,-1.);        \n    } else if(mat == MATERIAL2){\n        p.z+=0.85;\n        col = tex(p,-1.);        \n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.35);\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}