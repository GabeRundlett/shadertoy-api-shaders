{
    "Shader": {
        "info": {
            "date": "1620595139",
            "description": "Was curious what shape the projection of the tangent around the circle to a specific point on the circumference would make.  ",
            "flags": 32,
            "hasliked": 0,
            "id": "ssSSRV",
            "likes": 4,
            "name": "Circle Doodle ",
            "published": 3,
            "tags": [
                "circle",
                "sketch"
            ],
            "usePreview": 0,
            "username": "ircss",
            "viewed": 307
        },
        "renderpass": [
            {
                "code": "#define TWO_PI 6.28318530718\n#define radius 0.3\n#define BUFFER iChannel0\n\n#define betweenVector vec3(0.784, 0.254, 0.254)\n#define originCol     vec3(0.768, 0.709, 0.709)\n#define rCurrentCol   vec3(0.803, 0.427, 0.396)\n#define toProjCol     vec3(0.937, 0.223, 0.164)\n#define circleCol     vec3(0.505, 0.254, 0.372)\n#define shapCol       vec3(0.956, 0.164, 0.533)\n\nvoid DrawVector(vec2 origin, vec2 vector, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * vUv/v2;\n    float d    = distance(p, uv);\n    sceneColor = mix(lineColor, sceneColor, smoothstep(size, size + 0.001, d));\n    \n}\n\nvoid DrawBetweenTwoPoints(vec2 origin, vec2 end, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n    \n    vec2 vector = end - origin;\n          uv  -= origin;\n    float len  = length(vector);\n       vector /= len;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * clamp(vUv, 0.,len) /v2;\n    float d    = distance(p, uv);\n\n    sceneColor = mix(lineColor, sceneColor, clamp(smoothstep(size, size + 0.001, d), 0. ,1.)); \n}\n\nvoid DrawLengthedVector(vec2 origin, vec2 vector, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float len  = length(vector);\n       vector /= len;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * clamp(vUv, 0.,len) /v2;\n    float d    = distance(p, uv);\n\n    sceneColor = mix(lineColor, sceneColor, clamp(smoothstep(size, size + 0.001, d), 0. ,1.)); \n}\n\nvoid DrawHalfVectorWithLength(vec2 origin, vec2 vector, float len, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * clamp(vUv, 0.,len) /v2;\n    float d    = distance(p, uv);\n\n    sceneColor = mix(lineColor, sceneColor, clamp(smoothstep(size, size + 0.001, d), 0. ,1.)); \n}\n\nvoid DrawPoint(vec2 origin, vec2 uv, float size, vec3 pointColor, inout vec3 sceneColor){\n  float d = distance(uv, origin);\n  sceneColor = mix(pointColor, sceneColor, clamp(smoothstep(size, size + 0.001, d), 0. ,1.)); \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 buff = texture(BUFFER, uv);\n\n    uv -= vec2(0.5);\n    uv.x *=  iResolution.x/iResolution.y;\n\n\n    float cAngle = iTime * 0.3;\n    // Use polar coordinates instead of cartesian\n    vec2 toCenter = -uv;\n    float angle = atan(toCenter.y,toCenter.x);\n          \n          angle = (angle/TWO_PI)+0.5;\n          //angle-= 0.25;\n          angle = fract(angle);\n      //    fragColor = vec4(angle);\n      //    return;\n    float pradius = length(toCenter);\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    \n    vec2 cricle = vec2(cos(cAngle), sin(cAngle))*radius;\n\n    vec2 currentInPolar =  uv ;\n    float shouldDraw = abs( pradius - radius);\n          shouldDraw = step(0.004,shouldDraw);\n    \n\n   vec2 tangent = vec2(-sin(cAngle), cos(cAngle));\n\n\n  \n   \n   vec2 originalPoint = vec2(0., radius);\n   \n   vec2 toOrignalPoint = originalPoint - cricle;\n   \n   float fOnTangent = dot(toOrignalPoint, tangent);\n   vec2  drawPoint  = fOnTangent * normalize(tangent) + cricle;\n   \n    col = mix(circleCol, vec3(1.), shouldDraw);\n   \n   vec2 toDrawPoint = drawPoint - cricle;\n   vec2 orgToDrawP  = drawPoint - originalPoint;\n   \n    DrawLengthedVector(cricle, toOrignalPoint, uv, 0.004,  betweenVector, col);\n    DrawBetweenTwoPoints(cricle, vec2(0.), uv, 0.004,  rCurrentCol, col);\n    DrawBetweenTwoPoints(originalPoint, vec2(0.), uv, 0.004,  originCol, col);\n    DrawBetweenTwoPoints(drawPoint, cricle,  uv, 0.004,  toProjCol, col);\n    DrawVector(drawPoint, normalize(toDrawPoint),   uv, 0.001,  toProjCol, col);\n    DrawVector(drawPoint, normalize(orgToDrawP),   uv, 0.001,  toProjCol, col);\n    DrawPoint(cricle, uv, 0.013,  rCurrentCol, col);\n    DrawPoint(originalPoint, uv, 0.01,  originCol, col);\n    DrawPoint(vec2(0.), uv, 0.01,  originCol, col);\n    DrawPoint(drawPoint, uv, 0.013,  toProjCol, col);\n    //DrawVector(cricle, )    \n   // Output to screen\n   \n   col = mix(col, shapCol, buff.x );\n    fragColor = vec4(col.xyz, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define radius 0.3\n#define BUFFER iChannel0\n#define BUFF_RES iChannelResolution[0].xy\n\n\nfloat DrawPoint(vec2 origin, vec2 uv, float size){\n  float d = distance(uv, origin);\n  return clamp(smoothstep(size, size + 0.001, d), 0. ,1.); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv  = (fragCoord / BUFF_RES);\n        \n \n   vec4 buff = texture(BUFFER, uv);\n        \n         uv -= vec2(0.5);\n       uv.x *=  iResolution.x/iResolution.y;\n       \nfloat cAngle = iTime * 0.3;\n       \n vec2 cricle = vec2(cos(cAngle), sin(cAngle))*radius;\n float clearBuff = 1.-step(0.995,fract(cAngle / TWO_PI));   \n\n        \n            // Use polar coordinates instead of cartesian\n    vec2 toCenter = -uv;\n    float angle = atan(toCenter.y,toCenter.x);\n          angle = (angle/TWO_PI)+0.5;\n        \n   vec2 tangent = vec2(-sin(cAngle), cos(cAngle));\n   \n      vec2 originalPoint = vec2(0., radius);\n   \n   vec2 toOrignalPoint = originalPoint - cricle;\n   \n   float fOnTangent = dot(toOrignalPoint, tangent);\n   vec2  drawPoint  = fOnTangent * normalize(tangent) + cricle;\n        \n        \n        buff  += vec4(1. -DrawPoint(drawPoint, uv,  0.006));\n        \n    fragColor = clamp( buff * clearBuff, 0., 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}