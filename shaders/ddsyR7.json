{
    "Shader": {
        "info": {
            "date": "1686683464",
            "description": "Tribute to the beautiful sea of colour.",
            "flags": 0,
            "hasliked": 0,
            "id": "ddsyR7",
            "likes": 2,
            "name": "The Love of Colour",
            "published": 3,
            "tags": [
                "2d",
                "colourful"
            ],
            "usePreview": 0,
            "username": "Pink",
            "viewed": 172
        },
        "renderpass": [
            {
                "code": "//Based on https://www.youtube.com/watch?v=f4s1h2YETNY\n//inline comments may not be completely accurate.\n\n// Gold Noise ©2015 dcerisano@standard3d.com\n// - based on the Golden Ratio\n// - uniform normalized distribution\n// - fastest static noise generator function (also runs at low precision)\n// - use with indicated fractional seeding method. \n\nfloat PHI = 1.61803398874989484820459;  // Φ = Golden Ratio   \n\nfloat gold_noise(in vec2 xy, in float seed){\n       return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n}\n\nfloat gaussian(float t)\n{\n    return exp(-(5.0 * pow(t - 0.5, 2.0)));\n}\n\nfloat dot2( in vec2 v ) \n{ \n    return dot(v,v); \n}\n\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float timeSine = 0.5 + 0.5 * sin(iTime*0.25);\n\n    vec2 uv = ((fragCoord * 2.0 - iResolution.xy) / iResolution.y) * 2.0;// + sin(iTime*10.3);\n\n    uv.x -= sin(iTime * 0.2);\n    uv.y += 0.5 + 0.25 * cos(iTime * 0.4);\n        \n    float red =   gaussian(gold_noise(uv, timeSine * 1.25)) + 2.0;\n    float green = gaussian(gold_noise(uv, timeSine * 1.025)) + 4.0;\n    float blue =  gaussian(gold_noise(uv, timeSine * 1.15)) + 8.0;\n\n    float d = abs(sdHeart(uv));\n    d = gaussian(pow(0.05 / d, 0.5));\n    float v = 1.0 / 1.0 - length(uv);\n\n    vec3 col = v * 0.5 + 0.5 + sin(iTime + uv.yyy + vec3(red, green, blue) * d) - cos(iTime*0.5 + uv.xxx + vec3(red, green, blue) * d);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}