{
    "Shader": {
        "info": {
            "date": "1616337028",
            "description": "goku v2",
            "flags": 0,
            "hasliked": 0,
            "id": "fdf3zX",
            "likes": 1,
            "name": "goku v2",
            "published": 3,
            "tags": [
                "gokuv2"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "//Modificado por jorge2017a1 ----jorgeFloresP\n\n//Referencia :\n//IQ https://www.shadertoy.com/view/wdBXRW\n//https://www.shadertoy.com/view/tlGBW3 //Created by manu210404 in 2021-03-13 \n\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n//----------\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n////-------------------\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2d( in vec2 v0, in vec2 v1) { return v0.x*v1.y - v0.y*v1.x; }\nconst int N1 =30;\nconst int N2 =29;\nconst int N3 =10;\n\n\n//https://www.shadertoy.com/view/tlGBW3\n//Created by manu210404 in 2021-03-13\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\nfloat sdPoly11 POLY(11)\nfloat sdPoly29 POLY(29)\nfloat sdPoly16 POLY(16)\nfloat sdPoly36 POLY(36)\nfloat sdPoly15 POLY(15)\nfloat sdPoly17 POLY(17)\nfloat sdPoly07 POLY(7)\nfloat sdPoly13 POLY(13)\nfloat sdPoly12 POLY(12)\n\nvec2 pt0[11]=vec2[](vec2(.55,1.08),vec2(.7,1.16),vec2(.77,1.16),vec2(.86,1.1),vec2(.94,1.05),\nvec2(.94,1.02),vec2(.99,.73),vec2(1.02,.6),vec2(.75,.46),vec2(.44,.56),vec2(.55,1.08) );\n\n//pelo 1\nvec2 pt1[29]=vec2[]( vec2(.43,.95), vec2(.21,.86), vec2(.29,.83), vec2(.12,.66),\nvec2(.26,.66), vec2(.14,.48),  vec2(.11,.45), vec2(.07,.40), vec2(.04,.38),\nvec2(.01,.36), vec2(.06,.32), vec2(.12,.30), vec2(.18,.29), vec2(.21,.29), \nvec2(.25,.31), vec2(.31,.35), vec2(.29,.29),  vec2(.27,.17), vec2(.26,.14),\nvec2(.22,.05), vec2(.19,.00), vec2(.25,.00),  vec2(.31,.01), vec2(.37,.03),\nvec2(.44,.07), vec2(.49,.14), vec2(.53,.23), vec2(.55,.28), vec2(.43,.95) );\n\n//pelo 2\nvec2 pt2[16]=vec2[]( vec2(.61,.95), vec2(.83,.92), vec2(.76,.87), vec2(.91,.81),\nvec2(.80,.77), vec2(.97,.63), vec2(.93,.59), vec2(.89,.57), vec2(.84,.56),\nvec2(.98,.41), vec2(.90,.40),  vec2(.81,.40), vec2(.76,.41), vec2(.73,.42),\nvec2(.55,.28), vec2(.61,.95) );\n\n//pelo 3\nvec2 pt3[36]=vec2[]( vec2(.35,.71), vec2(.37,.73), vec2(.36,.66), vec2(.39,.68),\nvec2(.38,.58), vec2(.38,.55), vec2(.41,.50), vec2(.41,.54), vec2(.42,.59),\nvec2(.42,.62), vec2(.44,.67), vec2(.46,.57), vec2(.47,.53), vec2(.52,.47),\nvec2(.55,.43), vec2(.56,.47), vec2(.58,.52), vec2(.59,.54), vec2(.59,.58),\nvec2(.59,.65), vec2(.63,.61), vec2(.64,.58), vec2(.66,.56), vec2(.67,.51),\nvec2(.67,.52), vec2(.68,.54), vec2(.68,.57), vec2(.68,.61), vec2(.66,.70),\nvec2(.69,.67), vec2(.68,.73), vec2(.70,.73), vec2(.73,.49), vec2(.53,.38),\nvec2(.32,.46), vec2(.35,.71) );\n\n// ojo \nvec2 pt4[16]=vec2[]( vec2(.41,.81), vec2(.40,.78),  vec2(.39,.72), vec2(.40,.69),\nvec2(.41,.66), vec2(.43,.65), vec2(.45,.65), vec2(.46,.66), vec2(.47,.68),\nvec2(.48,.70), vec2(.49,.73), vec2(.49,.80), vec2(.47,.81), vec2(.45,.82),\nvec2(.42,.81), vec2(.41,.81) );\n\n/// ojo\nvec2 pt5[17]=vec2[]( vec2(.57,.81), vec2(.56,.78), vec2(.56,.75), vec2(.56,.71),\nvec2(.57,.69), vec2(.59,.66), vec2(.61,.65), vec2(.62,.65), vec2(.64,.66),\nvec2(.65,.68), vec2(.65,.70), vec2(.65,.73), vec2(.65,.77), vec2(.64,.81),\nvec2(.60,.81), vec2(.59,.82), vec2(.57,.81) );\n\n//nariz\nvec2 pt6[7]=vec2[]( vec2(.52,.85), vec2(.51,.84), vec2(.52,.81), vec2(.52,.83),\nvec2(.52,.84), vec2(.52,.85), vec2(.52,.85) );\n\n// ceja 1\nvec2 pt7[15]=vec2[]( vec2(.56,.60), vec2(.58,.55), vec2(.61,.54), vec2(.62,.54),\nvec2(.63,.54), vec2(.65,.56), vec2(.66,.57), vec2(.66,.58), vec2(.65,.60),\nvec2(.63,.58), vec2(.62,.57), vec2(.60,.57), vec2(.58,.57), vec2(.57,.59),\nvec2(.56,.60) );\n\n// ceja 2\nvec2 pt8[16]=vec2[]( vec2(.39,.58), vec2(.41,.55), vec2(.43,.54), vec2(.44,.53),\nvec2(.45,.54), vec2(.47,.55), vec2(.48,.57), vec2(.49,.59), vec2(.48,.60),\nvec2(.47,.57), vec2(.45,.56), vec2(.44,.56), vec2(.43,.56), vec2(.42,.57),\nvec2(.41,.60), vec2(.39,.58)  );\n\n//boca\nvec2 pt9[13]=vec2[]( vec2(.48,.87), vec2(.51,.88), vec2(.53,.88), vec2(.54,.87),\nvec2(.56,.87), vec2(.57,.87), vec2(.57,.90), vec2(.55,.93), vec2(.52,.93),\nvec2(.49,.93), vec2(.48,.90), vec2(.48,.88), vec2(.48,.87) );\n\nvec2 pt10[12]=vec2[]( vec2(.38,.88), vec2(.36,.88), vec2(.34,.86), vec2(.31,.82),\nvec2(.31,.80), vec2(.31,.75),  vec2(.31,.71), vec2(.31,.70), vec2(.32,.69),\nvec2(.33,.70), vec2(.35,.72), vec2(.38,.88)\n);\n\nvec2 pt11[13]=vec2[]( vec2(.67,.88), vec2(.69,.88), vec2(.72,.86), vec2(.74,.83),\nvec2(.74,.82), vec2(.75,.78), vec2(.75,.75), vec2(.75,.72), vec2(.75,.70),\nvec2(.73,.70), vec2(.72,.70), vec2(.70,.73), vec2(.67,.88)\n);\n\n\nvec3 RostroGoku(in vec2 pp, vec3 col) \n{\n  vec2 p= rotatev2( pp, radians(180.0)); \n  float sd0 = sdPoly11(p-vec2(0.0,-0.2), pt0);\n  //pelo 1\n  float sd1 = sdPoly29(p-vec2(0.22,0.0), pt1);\n  //pelo 2\n  float sd2 = sdPoly16(p-vec2(0.20,0.0), pt2);\n  //pelo centro\n  float sd3 = sdPoly36(p*0.7-vec2(-0.02,-0.21), pt3);\n  //ojo \n  float sd4 = sdPoly16(p-vec2(0.15,-0.02), pt4);\n  float sd5 = sdPoly17(p-vec2(0.2,-0.02), pt5);\n  //nariz\n  float sd6 = sdPoly07(p-vec2(0.18,-0.03), pt6);\n  //ceja 1 y 2\n  float sd7 = sdPoly15(p-vec2(0.0,0.0), pt7);\n  float sd8 = sdPoly16(p-vec2(0.35,0.0), pt8);\n  //boca\n  float sd9 = sdPoly13(p-vec2(0.19,0.0), pt9);\n  //orejas\n  float sd10 = sdPoly12(p-vec2(0.16,-0.04), pt10);\n  float sd11 = sdPoly13(p-vec2(0.26,-0.04), pt11);\n  float dcornea1= sdCircle(p-vec2(0.6,0.75), 0.02 );\n  float dcornea2= sdCircle(p-vec2(0.8,0.75), 0.02 );\n  //---------------\n  col = mix(col,vec3(0.0, 0.0,0.0)*1.2,S(sd1,0.0));\n  col = mix(col,vec3(0.0, 0.0,0.0)*1.2,S(sd2,0.0));\n  //rostro\n  col = mix(col,vec3(0.99, 0.73,0.70)*1.2,S(sd0,0.0));\n  //ojos\n  col = mix(col,vec3(1.0)*1.2,S(sd4,0.0));\n  col = mix(col,vec3(1.0)*1.2,S(sd5,0.0));\n  //pelo centro\n  col = mix(col,vec3(0.0, 0.0,0.0)*1.2,S(sd3,0.0));\n  //nariz\n  col = mix(col,vec3(0.0, 0.0,0.0)*1.2,S(sd6,0.0));\n  //ceja\n  col = mix(col,vec3(0.0)*1.2,S(sd7,0.0));\n  col = mix(col,vec3(0.0)*1.2,S(sd8,0.0));\n  // boca\n  col = mix(col,vec3(0.0, 0.0,0.0)*1.2,S(sd9,0.0));\n  //oreja\n  col = mix(col,vec3(0.9, 0.75,0.71)*1.2,S(sd10,0.0));\n  col = mix(col,vec3(0.9, 0.75,0.71)*1.2,S(sd11,0.0));\n  //cornea\n  col = mix(col,vec3(0.0)*1.2,S(dcornea1,0.0));\n  col = mix(col,vec3(0.0)*1.2,S(dcornea2,0.0));\n  \n  \n  return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 p=uv*0.75+vec2(-0.5,-0.5);\n    \n   \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)+uv.yyx);\n    \n    \n     col= RostroGoku( p,col);\n     \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}