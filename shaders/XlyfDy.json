{
    "Shader": {
        "info": {
            "date": "1543809661",
            "description": "Comparison of linear vs quadratic vs cubic uniform bspline interpolation\n\n Started from iq's bicubic comparison shader: https://www.shadertoy.com/view/XsSXDy\n\n\n\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XlyfDy",
            "likes": 10,
            "name": "BSpline Comparison",
            "published": 3,
            "tags": [
                "cubic",
                "quadratic",
                "interpolation",
                "bspline"
            ],
            "usePreview": 1,
            "username": "Dain",
            "viewed": 947
        },
        "renderpass": [
            {
                "code": "// The MIT License\n\n\n/*\n\t-Left side is linear bspline-- same as standard lerp\n\n\t-Middle is quadratic bspline. By default it doesn't line up with linear/cubic, so I'm offsetting it by a half pixel.\n\t\tThis graph shows the quadratic weight curves if you are wondering why it needs to be offset\n\t\thttps://www.desmos.com/calculator/xo5wmka2jh\n\n\t-Right is cubic bspline, it seems slightly blurrier than quadratic, but the gradient is smoother\n\n Started from iq's cubic comparison shader: https://www.shadertoy.com/view/XsSXDy\n\n*/\n\n \nfloat ScreenH;\n//weights, these can be calculated once before hand.\n\nvec2 BSplineLinearWeights(float f){//this is identical to lerp\n \tfloat w0 = 1.f - f;\n    float w1 = f;\n    return vec2(w0,w1);\n}\nvec3 BSplineQuadraticWeights(float f){\n    float ff = f*f;\n\tfloat w0 = 0.5f*(ff - 2.f*f + 1.f);\t\t\t//starts at 0.5, and decreases\n\tfloat w1 = 0.5f*(-2.f*ff + 2.f*f + 1.f);\t//starts at 0.5, increase until midpoint, then decreases\n\tfloat w2 = ff * 0.5f;\t\t\t\t\t\t//starts at 0, grows as f increase \n    return vec3(w0,w1,w2);\n}\n\nvec4 BSplineCubicWeights(float f){\n    float f2 = 1.f - f;\n\n\tfloat w0 = (1.f / 6.f)*(f2*f2*f2);\n\tfloat w1 = (2.f / 3.f) - 0.5f*f*f*(2.f - f);\n\tfloat w2 = (2.f / 3.f) - 0.5f*f2*f2 * (1.f + f);\n\tfloat w3 = (1.f / 6.f) * f*f*f;\n    return vec4(w0,w1,w2,w3);\n}\n\nvec4 spline( float x, vec4 c0, vec4 c1, vec4 c2, vec4 c3 )\n{\n    if(ScreenH == 0.f){\n        vec2 w = BSplineLinearWeights(x);\n        return w.x * c1 + w.y * c2;      \n    }else if(ScreenH == 1.f){       \n         vec3 w = BSplineQuadraticWeights(x);\n    \t return  w.x *c1 + w.y *c2 + w.z*c3;      \n    }else{       \n     \tvec4 w = BSplineCubicWeights(x);\n   \t\treturn w.x*c0 + w.y *c1 + w.z *c2 + w.w*c3;\n    }\n}\n\n#define SAM(a,b)  texture(iChannel0, (i+vec2(float(a),float(b))+0.5)/res, -99.0)\n\nvec4 texture_Bspline( sampler2D tex, vec2 t )\n{\n    vec2 res = iChannelResolution[0].xy;\n    vec2 p = res*t - 0.5;\n    \n    //half pixel offset for quadratic to make it line up with others\n    if(ScreenH == 1.f){\n     \tp -= .5;   \n    }\n    vec2 f = fract(p);\n    vec2 i = floor(p);\n\n    return spline( f.y, spline( f.x, SAM(-1,-1), SAM( 0,-1), SAM( 1,-1), SAM( 2,-1)),\n                        spline( f.x, SAM(-1, 0), SAM( 0, 0), SAM( 1, 0), SAM( 2, 0)),\n                        spline( f.x, SAM(-1, 1), SAM( 0, 1), SAM( 1, 1), SAM( 2, 1)),\n                        spline( f.x, SAM(-1, 2), SAM( 0, 2), SAM( 1, 2), SAM( 2, 2)));\n}\n\n//-----------------------------------------------------------------------------------------\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy/iResolution.x;\n    vec2 q = fragCoord.xy/iResolution.xy;\n    \n    vec2 uv = vec2(0.0);\n\n         if( q.x<0.33 ) {  uv = p-vec2(0.00,0.0); ScreenH = 0.f; }\n    else if( q.x<0.66 ) {  uv = p-vec2(0.33,0.0); ScreenH = 1.f; }\n    else                { uv = p-vec2(0.66,0.0); ScreenH = 2.f; }\n\n\n    uv = uv * 0.06 + 0.003*iTime;\n\n    vec3 colb = texture_Bspline(  iChannel0, uv ).xyz;\n    \n    vec3 col = colb;\n\n    float gre = dot(col,vec3(0.333));\n    \n    vec3 colc = 0.5 + 50.0*vec3( dFdx(gre), dFdy(gre), 0.0 );\n    \n    col = mix( col, colc, step(q.y,0.40) );\n    \n    col *= smoothstep( 0.0, 2.0/iResolution.x, abs(p.x-0.33) );\n    col *= smoothstep( 0.0, 2.0/iResolution.x, abs(p.x-0.66) );\n    col *= smoothstep( 0.0, 2.0/iResolution.y, abs(q.y-0.40) );\n    \n\tfragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}