{
    "Shader": {
        "info": {
            "date": "1631411677",
            "description": "Learning about how to create pseudo-random numbers from https://thebookofshaders.com/10/",
            "flags": 0,
            "hasliked": 0,
            "id": "fsG3Wh",
            "likes": 1,
            "name": "random + truchet tiles",
            "published": 3,
            "tags": [
                "random"
            ],
            "usePreview": 0,
            "username": "prishainabox",
            "viewed": 49
        },
        "renderpass": [
            {
                "code": "float random(in vec2 v) {\n    return fract(65465.1327854 * sin(dot(v, vec2(73.93422, 12.5165))));\n}\n\nvec3 tile(in vec2 pt) {\n\n    vec2 f = fract(pt);\n    float n = random(floor(pt));\n    if (n > 0.75) {\n        f = 1.0 - f;\n    } else if (n > 0.5) {\n        f = 1.0 - vec2(1.0 - f.x, f.y);\n    } else if (n > 0.25) {\n        f = vec2(1.0 - f.x, f.y);\n    }\n    \n    // circles\n    float l1 = length(f);\n    float l2 = length(1.0-f);\n    vec3 clr = vec3(step(l1, 0.6) - step(l1, 0.4) + step(l2, 0.6) - step(l2, 0.4));\n    \n    return clr;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Normalized pixel coordinates\n    vec2 uv = (2.0*fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    vec2 pt = 15.0 * uv;\n    \n    vec3 clr = tile(pt);\n    clr += 2.0 * vec3(0.03, 0.02, 0.1) * tile(pt + 0.3);\n    clr += 0.5 * vec3(0.5, 0.05, 0.04) * tile(vec2(pt.x - 0.2, pt.y - 0.5));\n    clr.y -= 0.9 * tile(pt - 0.05).y;\n    clr.x += 0.7 * tile(pt + 0.15).x;\n    \n    vec2 shape = abs(uv) - vec2(0.5, 0.5);\n    shape = shape + 0.05 * sin(20.0 * atan(shape.y, shape.x));\n    if (length(shape) < 0.3 && length(shape) > 0.15) {\n        clr += 10.0 * (tile(uv * pt) + 0.1) * vec3(0.1, 0.3, 5.5);\n    }\n    \n    clr = pow(clr, vec3(0.4545)); \n    \n    // Output to screen\n    fragColor = vec4(clr, 1);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}