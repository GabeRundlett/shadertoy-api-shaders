{
    "Shader": {
        "info": {
            "date": "1613267662",
            "description": "A stylized alien ocean inspired by \"Very fast procedural ocean\" by afl_ext\nCan you spot the other planet in the sky?",
            "flags": 32,
            "hasliked": 0,
            "id": "wldBRf",
            "likes": 44,
            "name": "Alien ocean",
            "published": 3,
            "tags": [
                "raymarching",
                "waves",
                "sea",
                "ocean",
                "sky",
                "reflections",
                "scattering",
                "mist",
                "multipass"
            ],
            "usePreview": 0,
            "username": "NLIBS",
            "viewed": 2130
        },
        "renderpass": [
            {
                "code": "const vec3 star_dir = vec3(0.,.199,.98);\nconst vec3 star_col = vec3(1.,.5,.06)*200.;\n\nfloat ray(vec3 ro, vec3 rd, float t) \n{\n    vec3 p = ro+t*rd;\n    float h = 0.0;\n    for (int i=0;i<50;i++) {\n        float h = p.y-srf(p.xz,ITERS_RAY, iTime).x;\n        t+=h;\n        p+=rd*h;\n        if (h<EPS*t) return t;\n    }\n    return t;\n}\n\nvec3 sky(vec3 rd)\n{\n    float z = rd.z*.5+.5;\n    float v = max(dot(rd,star_dir),0.);\n    vec3 star = pow(min(pow(v,5.),.992),450.)*star_col + pow(v,40.)*vec3(1.,.4,.03);\n    star *= 1.-smoothstep(4e-3,3e-3,length(rd-vec3(-.049,.291,.955)))*.7;\n    \n    float mist_col = exp(min(-rd.y*8.,0.))*0.03;\n    vec3 sky_col = mix(vec3(.2,.5,.8)*(z+1.)*.01,vec3(.25,.02,.01),z*z*.9)*1.5;\n    vec3 col = sky_col+mist_col+star;\n    return col;\n}\n\nfloat fresnel(vec3 rd, vec3 N, float n1, float n2)\n{\n    float I = acos(abs(dot(rd, N))-1e-5);\n    float cosI = cos(I);\n    float cosR = n1/n2 * sin(I);\n    if(cosR > 1.) return 1.;\n    cosR = sqrt(1. - cosR * cosR);\n    float Rs = (n1*cosI - n2 * cosR)/(n1*cosI + n2 * cosR);\n    float Rp = (n1*cosR - n2 * cosI)/(n1*cosR + n2 * cosI);\n    return mix(Rs*Rs, Rp*Rp, .5);\n}\n\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    vec2 R   = iResolution.xy,\n         uv  = (2.*u-R)/R.x,\n         muv = (2.*iMouse.xy-R)/R.x*-float(iMouse.z>1.)*PI;    \n    \n    //Camera\n    vec3 vo = vec3(iTime,1.01,iTime),\n         vd = camera_ray(vo,uv,muv,iTime),\n    //Sky colour\n         sky_col = sky(vd),\n         col = sky_col;\n    \n    if ((1.0-vo.y)/vd.y>0.0) {\n        //raymarch using previous pass\n        float t = texelFetch(iChannel0,ivec2(u)>>3,0).x;\n        t = ray(vo,vd, t);\n        \n        //normal using derivative\n        vec3 p = vo+vd*t;\n        vec3 N = norm(p.xz, max(ITERS_NORMAL+min(int(log(t)*-10.),0),1), iTime);\n        \n        //Reflected ray\n        vec3 refd = reflect(vd,N);\n        //Approx reflection occlusion from other waves\n        float ref_hit = clamp((p.y+refd.y*100.-.5)*.5,0.,1.);\n        //vec3 ref_col = mix(vec3(0),sky(refd),ref_hit);\n        vec3 ref_col = mix(sky(normalize(refd+vec3(0,.2,0)))*.4,sky(refd),ref_hit);\n\n        //approx SSS\n        vec3 H = normalize(star_dir+N*.05);\n        float thick = pow(1.-p.y,2.);\n        float I = pow(max(dot(vd,H),0.), 8.)*.002;\n        vec3 ss_col = I*star_col*pow(vec3(.8,.15,.02)*.5,vec3(.3+thick*2.));\n\n        //Mix using fresnel\n        col = mix(ss_col,ref_col,fresnel(vd,N,1.,1.333));\n        \n        //Fog\n        col = mix(sky_col,col,exp(-pow(t,1.5)*.007));\n        //col = ss_col;\n    }\n    \n    vec2 d = pow(abs(uv*.5)+.1,vec2(4.));\n\tcol *= pow(1.-.84*pow(d.x+d.y,.25),2.); //vignette\n    col += col*col;\n    col = 1.-exp(-col);\n    col = pow(col,vec3(1./2.2));\n    \n    vec3 noise = pow(texelFetch(iChannel1, ivec2(u)%1024, 0).rgb,vec3(1./2.2));\n    noise = (noise*2.-1.)*0.499*2.;\n    col += noise/256.;\n        \n    O = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.141592\n#define EPS 0.005\n\n#define ITERS_RAY    17\n#define ITERS_NORMAL 45\n#define W_DEPTH  2.2\n#define W_SPEED  1.4\n#define W_DETAIL .75\n\nconst mat2 rot = mat2(cos(12.),sin(12.),-sin(12.),cos(12.));\n\nvec3 srf(vec2 pos, int n, float time)\n{\n    pos *= W_DEPTH;\n    float freq = 0.6;\n    float t = W_SPEED*time;\n    float weight = 1.0;\n    float w = 0.0;\n    vec2 dx = vec2(0);\n    \n    vec2 dir = vec2(1,0);\n    for(int i=0;i<n;i++){\n        dir = rot*dir;\n        float x = dot(dir, pos) * freq + t;\n        float wave = exp(sin(x)-1.);\n        vec2 res = vec2(wave, wave*cos(x)) * weight;\n        pos    -= dir*res.y*.48;\n        w      += res.x;\n        dx     += res.y*dir / pow(weight,W_DETAIL);\n        weight *= .8;\n        freq   *= 1.2;\n        t   *= 1.08;\n    }\n    float ws = (pow(.8,float(n))-1.)*-5.; //Geometric sum\n    \n    return vec3(w / ws,dx / pow(ws,1.-W_DETAIL));\n}\n\nvec3 norm(vec2 p, int n, float time){\n    return normalize(vec3(-srf(p.xy, n, time).yz,1.).xzy);\n}\n\nvec3 camera_ray(vec3 vo, vec2 uv, vec2 muv, float iTime)\n{\n    vec3 vd = normalize(vec3(uv,1));\n    \n    //Add Mouse rotation\n    vec4 cs = vec4(cos(muv),sin(muv));\n    vd.yz = mat2(cs.y,cs.w,-cs.w,cs.y)*vd.yz;\n    vd.xz = mat2(cs.x,cs.z,-cs.z,cs.x)*vd.xz;\n    //Add Water bobbing\n    vec2 ang = norm(vo.xz,5, iTime).xz*-.05*PI;\n    cs = vec4(cos(ang),sin(ang));\n    vd.xy = mat2(cs.x,cs.z,-cs.z,cs.x)*vd.xy;\n    vd.zy = mat2(cs.y,cs.w,-cs.w,cs.y)*vd.zy;    \n    return vd;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float ray(vec3 ro, vec3 rd, float t) \n{\n    vec3 p = ro+t*rd;\n    float h = 0.;\n    for (int i=0;i<100;i++) {\n        float h = p.y-srf(p.xz,ITERS_RAY, iTime).x;\n        if (h<t*EPS*4.) return t;\n        t+=h;\n        p+=rd*h;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    vec2 R = iResolution.xy;\n    if (all(lessThan(u*8.,R))) {\n         vec2 uv  = (16.*u-R)/R.x,\n              muv = (2.*iMouse.xy-R)/R.x*-float(iMouse.z>1.)*PI; \n\n        //Camera\n        vec3 vo = vec3(iTime,1.01,iTime),\n             vd = camera_ray(vo,uv,muv,iTime);\n        \n        float t = -vo.y/(vd.y-1.0+EPS*8.);\n        if (t>0.) {\n            //march to surface with high epsilon\n            t = ray(vo,vd, t);\n        }\n\n        O = vec4(t);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}