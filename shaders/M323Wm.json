{
    "Shader": {
        "info": {
            "date": "1708544224",
            "description": "TWELVE shaders squeezed into 690 chars ... That's an average of 57.5 chars per shader!!\nThanks to Smake's DigEggs shader: [url]https://www.shadertoy.com/view/wdlfDH[/url]\nThanks to P Malin's SmallStars [url]https://www.shadertoy.com/view/Ml2XDt[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "M323Wm",
            "likes": 10,
            "name": "TINY Shaders - 58 chars each!",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "raymarching",
                "short",
                "halftweet",
                "golf",
                "multiple"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "// TWELVE shaders squeezed into 690 chars ... That's an average of 57.5 chars per shader!!\n// This is a fork of my previous shader (65 char Shaders!)\n// I tried to combine shaders together in a way that saves chars and embed multiple \n// calculations in one loop for greater efficiency.\n\n// HUGE thanks to Fabrice, IQ, and Xor for helping me golf these shaders. \n\n// I invite all of our fellow code golfers to combine their small shaders in clever ways\n// to reduce the average size per shader ... How LOW can you GO?!\n\n// 58 char Shaders! - 690 chars total\n/**/\n#define X texture(iChannel1,//\n#define L length//\n#define F fract//\n#define V vec4\nvoid mainImage( out V O, vec2 u ){\n    ivec4 b; vec2 U = u; V m, r, o, n, w, f, z, C = V(u/=iResolution.x, ++o.y, 0); \n    float T = r.z = iTime, t = f.y =.1*T,                 \n          i, D, d = L(u-=.4), a = atan(u.x, u.y), c = ceil(a * 6e2), h = cos(c);\n    for ( n = sin( T - 8.*C.zzzx / (u.y-.2) ); i++<98.; \n          m.xy = .55 - mat2(-m.y,m.x,m)*m.yx+u*cos(t)) o += C * (L(cos(o.xyz + T)) - .3),            \n          f += C/4. * (.7 - L(O=F (f+f+.5)-.5)), r += C * (L(cos(r.xyz    )) - .6);\n    for (; (b.x^b.y^b.z)%99 > b.z-7; D < X u-T/D/i).r ? D += .1 : D)\n         b = ivec4( T + 6.*u*w.x, w+=.1 );\n    O = V[]( d*d/h / exp(F(h/d/d + h*c +T) * i) - z\n         , X vec2(T + .3/d, a)), max ( u = F( u/d/d-T ), u.x-u ).y + z        \n         , V(b%3) / w/.2, m, o/50., .5 + (n+n.w)*2e2, F(r+r) - (r.z-T)/30.\n         , O/f.z, D + z, V((int(U+=T*i)^int(U.y))%99%45<9), w/i) [int(T-u)/5 % 12];                   \n}\n/**/\n\n// 56 char Shaders!! - 672 chars total - Sacrificing slight quality for smallest code:\n/**\n#define X texture(iChannel1,//\n#define L length//\n#define F fract//\n#define V vec4\nvoid mainImage( out V O, vec2 u ){\n    ivec4 b; vec2 U = u; V m, r, o, n, w, f, C = V(u/=iResolution.x, 1, 0); \n    float T = r.z = iTime, t = f.y = T*.2,                 \n          i, D, d = L(u-=.4), a = atan(u.x, u.y), c = ceil(a * 6e2), h = cos(c);\n    for ( n = sin( T - 8.*C.zzzx / u.y ); i++<98.; \n          m.xy = .55 - mat2(-m.y,m.x,m)*m.yx+u*cos(t)) o += C * (L(cos(o.xyz + T)) - .3),            \n          f += C/4. * (.7 - L(O=F (f+f+.5)-.5)), r += C * (L(cos(r.xyz    )) - .6);\n    for (; (b.x^b.y^b.z)%99 > b.z-7; D < X u-T/D/i).r ? D += .1 : D)\n         b = ivec4( T + 6.*u*w.x, w+=.1 );\n    O = V[]( d*d/h / exp(F(h/d/d + h*c +T) * i) - C\n         , X vec2(T + .3/d, a)), max ( u = F( u/d/d-T ), u.x-u ).y - C        \n         , V(b%3) / w, m, o/50., .5 + (n+n.w)*2e2, F(r) - (r.z-T)/30.\n         , O/f.z, D + C, V((int(U+=T*i)^int(U.y))%99%45<9), w/i) [int(T)/5 % 12]; }\n/**/\n\n// Here's the shader with comments:\n/*\n#define X texture(iChannel1,//\n#define L length//\n#define F fract//\n#define V vec4\nvoid mainImage( out V O, vec2 u )\n{\n    ivec4 b;\n    vec2 U = u;\n    V    m, r, o, n, w, f, z,\n         C = V(u/=iResolution.x, ++o.y, 0); // Vec4 used for raymarching shaders\n    float T = r.z = iTime,               // Time\n          t = f.y =.1*T,                 // Slower Time\n          i, D,                          // i is the counter for raymarching\n          d = L(u-=.4),                  // Length u\n          a = atan(u.x, u.y),            // polar coordinate conversion\n          c = ceil(a * 6e2),\n          h = cos(c);\n\n    for ( n = sin( T - 8.*C.zzzx / (u.y-.2) ); i++<98.; // Main raymarching loop\n          m.xy = .55 - mat2(-m.y,m.x,m)*m.yx+u*cos(t))  // Calculate Mandelzoom\n          o += C * (L(cos(o.xyz + T)) - .3),            // Raymarch Black Spheres\n          f += C/4. * (.7 - L(O=F (f+f+.5)-.5)),        // Raymarch Rainbow Elevator\n          r += C * (L(cos(r.xyz    )) - .6);            // Raymarch Rainbow Spheres\n\n    for (; (b.x^b.y^b.z)%99 > b.z-7;                    // Calculate XOR Towers\n    D < X u-T/D/i).r ? D += .1 : D)                     // Calculate Debris\n    b = ivec4( T + 6.*u*w.x, w+=.1 );\n    \n    O = V[](                                // Determine which shader to display\n           d*d/h / exp(F(h/d/d + h*c +T) * i) - z       // SmallStars by P_Malin\n         , X vec2(T + .3/d, a))                         // 3D Tunnel\n         , max ( u = F( u/d/d-T ), u.x-u ).y + z        // Inversion\n         , V(b%3) / w/.2                                // 3D Rainbow Towers\n         , m                                            // Mandelzoom\n         , o/50.                                        // 3D Black Spheres\n         , .5 + (n+n.w)*2e2                             // 3D Checkerboard\n         , F(r+r) - (r.z-T)/30.                         // 3D Rainbow Spheres\n         , O/f.z                                        // 3D Rainbow Elevator\n         , D + z                                        // 3D Debris by Xor\n         , V((int(U+=T*i)^int(U.y))%99%45<9)            // XOR Pattern by Xor\n         , w/i                                          // 3D XOR Towers\n     ) [int(T-u)/5 % 12];                   // The transition variable\n}\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}