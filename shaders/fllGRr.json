{
    "Shader": {
        "info": {
            "date": "1621434684",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "fllGRr",
            "likes": 15,
            "name": "animated tiling  2",
            "published": 3,
            "tags": [
                "2d",
                "tiling",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/flsGzn\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,S,\n         U = 6.*u/R.y;\n\n    ivec2 I = ivec2(U); bool b = (I.x+I.y)%2 < 1;\n    U = 2.* fract( U ) - 1.;\n    \n    float h = 1.41*fract(iTime/2.+ .2*u.x/R.x),\n          c = 1., p = 9./R.y; \n    if (h>.707) U=U.yx, h=1.41-h;                          // 2nd half of the animation\n    \n    U *= mat2(cos( asin(h) + 1.57*vec4(0,1,-1,0) ));       // rotation\n    U = abs( U.x*U.y > 0. ? c=.5, U : vec2(-U.y,U.x) );    // 4-fold symmetry + c = checker coloring\n    if (b) c = 1.5-c;\n    \n    if (u.y < R.y/2.)                                      // draw contours\n        S =  smoothstep( 2.*p, 0., abs(U-h ) ),\n        O = vec4(   S.y\n                 +( U.y<h ? S.x : 0. )\n                );\n    else                                                   // draw regions\n        S =  smoothstep( p, -p, h-U ),\n        O =  vec4(       S.y * c\n                   + (1.-S.y)*S.x * (1.5-c)\n               //  + (1.-S.x)*(1.-S.y)* ( b ? .5 : 1. )*(h)\n                 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}