{
    "Shader": {
        "info": {
            "date": "1688112318",
            "description": "gradient circle test",
            "flags": 0,
            "hasliked": 0,
            "id": "Dd2cWG",
            "likes": 1,
            "name": "gradient circle test",
            "published": 3,
            "tags": [
                "gradientcircletest"
            ],
            "usePreview": 0,
            "username": "tianluo97",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "const vec2 target_resolution = vec2(720, 720);\nvec4 radicalGradient2(vec2 uv, vec2 pos, vec2 size, vec4 cl1, float p1, vec4 cl2, float p2){\n    vec2 graduv = uv;\n    graduv -= pos;\n    graduv /= size;\n    float d = distance(graduv, vec2(0.0));  \n    vec4 color = mix(cl1, cl2, smoothstep(p1, p2, d));\n    return color;\n}\n\nvec2 rotate2d(vec2 v, float rot)\n    {\n        float mid = 0.5;\n        return vec2(\n        cos(rot) * (v.x - mid) + sin(rot) * (v.y - mid) + mid,\n        cos(rot) * (v.y - mid) - sin(rot) * (v.x - mid) + mid\n        );\n}\n    \n vec4 radicalGradient3(vec2 uv, vec2 pos, vec2 size, vec4 cl1, float p1, vec4 cl2, float p2, vec4 cl3, float p3){\n    vec2 graduv = uv;\n    graduv -= pos;\n    graduv /= size;\n    float d = distance(graduv, vec2(0.0));  \n    vec4 color = mix(cl1, cl2, smoothstep(p1, p2, d));\n    color = mix(color, cl3, smoothstep(p2, p3, d));\n    return color;\n  }\n\nfloat circleBlur(in vec2 _st, in float _radius, in float _blur){\n          vec2 dist = _st-vec2(0.5);\n          return 1.-smoothstep(_radius-(_radius*_blur), _radius, dot(dist, dist)*4.0);\n}\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Same texCoord as in Minecraft\n    vec2 texCoord = fragCoord/iResolution.xy;\n    // Own uv variable\n    vec2 uv = texCoord;\n    \n    // Center origin around screen center (range -0.5, 0.5)\n    uv -= .5;\n    \n    // Squish image in excessive dimension\n    float r = (iResolution.x/iResolution.y) / (target_resolution.x/target_resolution.y);\n    if (r >= 1.) uv.x *= r;\n    else uv.y /= r;\n    \n    // Recenter origin to start at 0 (range 0.0, 1.0)\n    uv += .5;\n    //uv.y -= 0.5/r - 0.5;    \n    \n    vec4 grad = radicalGradient3(\n        uv, \n        vec2(.4, .7) , \n        //vec2(-5.2867, -2.0867), \n        vec2(.7, .7) , \n        vec4(vec3(0.980,0.984,1.000),1.0), \n        0., \n        vec4(vec3(0.220,0.843,1.000),1.0), \n        0.45,\n        vec4(vec3(0.000,0.667,1.000),1.0), \n        0.8\n    );\n    \n    //uv *= 1.5;\n    vec2 circleUv = uv; \n    float circle = circleBlur(circleUv, 1., 1.3);\n    \n    //uv -= noise(vec2(iTime * 1.9));\n    \n    // Output to screen\n    fragColor = vec4(vec3(uv, noise(vec2(iTime * .9))), 1.0) * circle;\n    fragColor = vec4(vec3(grad.rgb) * circle\n    , 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}