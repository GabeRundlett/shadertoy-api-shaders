{
    "Shader": {
        "info": {
            "date": "1444638173",
            "description": "Study of how to render cloudy stuff... I basically simplified Duke's [url=https://www.shadertoy.com/view/MljXDw]Cloudy spikeball[/url] and merged it with the model I used for my [url=https://www.shadertoy.com/view/XdBGDd]Love Tunnel[/url].",
            "flags": 0,
            "hasliked": 0,
            "id": "XljXRG",
            "likes": 71,
            "name": "Cloudy stuff",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 1,
            "username": "Nrx",
            "viewed": 12240
        },
        "renderpass": [
            {
                "code": "// From https://www.shadertoy.com/view/XdBGDd\n// From https://www.shadertoy.com/view/MljXDw (from Duke)\n\n// Rendering parameters\n#define CAMERA_FOCAL_LENGTH\t3.0\n#define RAY_STEP_MAX\t\t100.0\n#define RAY_LENGTH_MAX\t\t150.0\n#define NOISE_FACTOR\t\t2.0\n#define DIST_CORRECTION\t\t0.6\n#define DIST_MIN\t\t\t0.6\n#define DENSITY_FACTOR_STEP\t0.01\n#define DENSITY_FACTOR_DIST\t0.3\n\n// Math constants\n#define PI\t3.14159265359\n\n// Rotation on the Z axis\nvec3 vRotateZ (in vec3 p, in float angle) {\n\tfloat c = cos (angle);\n\tfloat s = sin (angle);\n\treturn vec3 (c * p.x + s * p.y, c * p.y - s * p.x, p.z);\n}\n\n// Noise (from iq)\nfloat noise (in vec3 p) {\n\tvec3 f = fract (p);\n\tp = floor (p);\n\tf = f * f * (3.0 - 2.0 * f);\n\tf.xy += p.xy + p.z * vec2 (37.0, 17.0);\n\tf.xy = texture (iChannel0, (f.xy + 0.5) / 256.0, -256.0).yx;\n\treturn mix (f.x, f.y, f.z);\n}\n\n// FBM\nfloat fbm (in vec3 p) {\n\treturn noise (p) + noise (p * 2.0) / 2.0 + noise (p * 4.0) / 4.0;\n}\n\n// HSV to RGB\nvec3 hsv2rgb (in vec3 hsv) {\n\thsv.yz = clamp (hsv.yz, 0.0, 1.0);\n\treturn hsv.z * (1.0 + hsv.y * clamp (abs (fract (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) - 2.0, -1.0, 0.0));\n}\n\n// Distance to the scene\nfloat distScene (in vec3 p, out float hue) {\n\n\t// Global deformation\n\tp.xy += vec2 (3.0 * sin (p.z * 0.1 + 2.0 * iTime), 2.0 * sin (p.z * 0.2 + iTime));\n\n\t// Cylinder\n\tfloat cylinder = 6.0 - length (p.xy) + sin (atan (p.y, p.x) * 6.0) * sin (p.z);\n\tfloat d = max (cylinder, -cylinder - 6.0);\n\thue = 0.3 + 0.3 * noise (p * 0.2);\n\n\t// Rotating spheres\n\tvec3 q = vRotateZ (p, sin (iTime * 4.0));\n\tq.xy = mod (q.xy, 6.5) - 0.5 * 6.5;\n\tq.z = mod (q.z + 0.5 * 32.0, 32.0) - 0.5 * 32.0;\n\tfloat sphereTorus = max (length (q) - 3.0, -cylinder);\n\n\t// Torus\n\tq.xy = vec2 (length (p.xy) - 6.0, q.z);\n\tsphereTorus = min (sphereTorus, length (q.xy) - 3.0);\n\tif (sphereTorus < d) {\n\t\td = sphereTorus;\n\t\thue = 0.3;\n\t}\n\n\t// Return the distance\n\treturn d;\n}\n\n// Main function\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Define the position and orientation of the camera\n\tvec3 rayOrigin = vec3 (6.0 * cos (iTime * 1.5) + 0.1 * cos (iTime * 10.0), 0.1 * cos (iTime * 20.0), iTime * 20.0 + 5.0 * cos (iTime * 2.0));\n\tvec3 cameraForward = vec3 (-rayOrigin.xy, 15.0 * cos (iTime * 0.6));\n\tvec3 cameraUp = vRotateZ (vec3 (0.0, 1.0, 0.0), PI * sin (iTime) * sin (iTime * 0.2));\n\tmat3 cameraOrientation;\n\tcameraOrientation [2] = normalize (cameraForward);\n\tcameraOrientation [0] = normalize (cross (cameraUp, cameraForward));\n\tcameraOrientation [1] = cross (cameraOrientation [2], cameraOrientation [0]);\n\tvec3 rayDirection = cameraOrientation * normalize (vec3 ((2.0 * fragCoord.xy - iResolution.xy) / iResolution.y, CAMERA_FOCAL_LENGTH));\n\n\t// Set the background color\n\tvec3 colorBackground = vec3 (0.0);\n\n\t// Ray marching\n\tfloat densityTotal = 0.0;\n\tvec3 colorTotal = vec3 (0.0);\n\tfloat rayLength = 0.0;\n\tfor (float rayStep = 0.0; rayStep < RAY_STEP_MAX; ++rayStep) {\n\n\t\t// Compute the maximum density\n\t\tfloat densityMax = 1.0 - rayLength / RAY_LENGTH_MAX - rayStep * DENSITY_FACTOR_STEP;\n\t\tif (densityTotal > densityMax) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Get the scene information\n\t\tvec3 p = rayOrigin + rayDirection * rayLength;\n\t\tfloat hue;\n\t\tfloat dist = (distScene (p, hue) + NOISE_FACTOR * (fbm (p) - 0.5)) * DIST_CORRECTION;\n\t\tif (dist < 0.0) {\n\n\t\t\t// Compute the local density\n\t\t\tfloat densityLocal = (densityTotal - densityMax) * dist * DENSITY_FACTOR_DIST;\n\t\t\tdensityTotal += densityLocal;\n\n\t\t\t// Update the color\n\t\t\tvec3 colorLocal = hsv2rgb (vec3 (hue, 0.5, 0.8));\n\t\t\tcolorTotal += colorLocal * densityLocal;\n\t\t}\n\n\t\t// Go ahead\n\t\trayLength += max (dist, DIST_MIN);\n\t}\n\tcolorTotal += colorBackground * (1.0 - densityTotal);\n\n\t// Set the fragment color\n\tfragColor = vec4 (colorTotal, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}