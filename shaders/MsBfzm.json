{
    "Shader": {
        "info": {
            "date": "1499894783",
            "description": "Another halftone pattern for compositing purposes",
            "flags": 0,
            "hasliked": 0,
            "id": "MsBfzm",
            "likes": 6,
            "name": "Halftone Lines",
            "published": 3,
            "tags": [
                "lines",
                "halftone",
                "stripes"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 1027
        },
        "renderpass": [
            {
                "code": "#define linesRows 5.0\n#define thickness 0.25\n#define invert 0\n\nvec2 rotateCoord(vec2 uv, float rads) {\n    uv *= mat2(cos(rads), sin(rads), -sin(rads), cos(rads));\n\treturn uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // update layout params\n    float rows = linesRows * 0.5;//linesRows + 3. * sin(iTime);\n    float curThickness = 0.25 + 0.22 * cos(iTime);\n  \tfloat curRotation = 0.8 * sin(iTime);\n    // get original coordinate, translate & rotate\n\tvec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    //uv += curCenter;\n    uv = rotateCoord(uv, curRotation);\n    // create grid coords\n    vec2 uvRepeat = fract(uv * rows);\t\t\n    // adaptive antialiasing, draw, invert\n    float aa = iResolution.y * 0.00003; \t\n    float col = smoothstep(curThickness - aa, curThickness + aa, length(uvRepeat.y - 0.5));\n    if(invert == 1) col = 1. - col;\t\t\t\n\tfragColor = vec4(vec3(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}