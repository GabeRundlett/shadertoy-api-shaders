{
    "Shader": {
        "info": {
            "date": "1609608199",
            "description": "globe thing",
            "flags": 0,
            "hasliked": 0,
            "id": "wtcyRf",
            "likes": 4,
            "name": "something2021",
            "published": 3,
            "tags": [
                "noise",
                "torus",
                "sphere",
                "plane"
            ],
            "usePreview": 0,
            "username": "jj99",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "// fork of - https://www.shadertoy.com/view/3ltczj\n\n#define PLANET_RADIUS 1.4\n#define MAP_SCALE 2.0\n#define MAP_ROUGHNESS 5.0\n#define MAP_HEIGHT 0.35\n\nvec3 Hash33(in vec3 p) {\n    return vec3(fract(sin(dot(p, vec3(7643.54, 6854.95, 356.6765))) * 234.752),\n                fract(sin(dot(p, vec3(7853.67, 5214.327, 435.6437))) * 6734.8275),\n                fract(sin(dot(p, vec3(7546.754, 683.2647, 358.2431))) * 257.8643));\n}\n\nfloat noise(in vec3 p) {\n    return fract(sin(dot(p, vec3(3743.54, 2754.23, 578.537))) * 5664.865);\n}\n\nfloat snoise(in vec3 p)\n{\n\n    vec3 cell = floor(p);\n    vec3 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float ldb = noise(cell);\n    float rdb = noise(cell + vec3(1.0, 0.0, 0.0));\n    float ldf = noise(cell + vec3(0.0, 0.0, 1.0));\n    float rdf = noise(cell + vec3(1.0, 0.0, 1.0));\n    float lub = noise(cell + vec3(0.0, 1.0, 0.0));\n    float rub = noise(cell + vec3(1.0, 1.0, 0.0));\n    float luf = noise(cell + vec3(0.0, 1.0, 1.0));\n    float ruf = noise(cell + 1.0);\n\n    return mix(mix(mix(ldb, rdb, local.x),\n                   mix(lub, rub, local.x),\n                   local.y),\n\n               mix(mix(ldf, rdf, local.x),\n                   mix(luf, ruf, local.x),\n                   local.y),\n\n               local.z);\n}\n\nfloat fnoise(in vec3 p) {\n\n    p *= MAP_SCALE;\n\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (float octave=0.0; octave < MAP_ROUGHNESS; octave++) {\n        value += snoise(p) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        p *= 2.0;\n    }\n\n\tfloat nn = value / tscale;\n\tnn = clamp(nn,0.5,1.0);\n\t\n\t\n\treturn nn;\n\t//return value / tscale;\n}\n\nvec3 map(in vec3 p)\n{\n\tfloat n = fnoise(p);\n\tvec3 sea = vec3(0.25,0.55,0.95);\n\tvec3 lan1 = vec3(0.2, 1.1, 0.3);\n\tvec3 lan2 = vec3(1.1, 0.3, 0.3);\n\tvec3 color = mix(sea, mix(lan1, lan2, n ), float(n > 0.5));\n\treturn color;\n}\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat mapScene(in vec3 p)\n{\n\tfloat earth = length(p) - PLANET_RADIUS;\n\tfloat off = fnoise(p) * MAP_HEIGHT;\n\t\n\tfloat d1 = sdTorus(p,vec2(2.0,0.0155));\n\tfloat d2 = sdTorus(p.yxz,vec2(2.0,0.0155));\n\tfloat d3 = sdTorus(p.yzx,vec2(2.0,0.0155));\n\td1 = smin(d1,d2,0.1);\n\td1 = smin(d1,d3,0.1);\n\n\tfloat d4 = p.y +1.7+sin(p.x*0.7+fract(iTime*0.4)*6.28+length(p))*0.17;\n\t\n\td1 = smin(d1,d4,0.3);\n\t\n\tearth = smin(earth,d1,0.15);\n\tearth-=off;\n\t\n\t\n\t\n\treturn earth*0.7;\n}\n\n\nvec3 getNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.001;\n    return normalize( e.xyy*mapScene( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*mapScene( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*mapScene( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*mapScene( pos + e.xxx*eps ) );\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\tfloat vv1=uv.y+0.2*4.0;\n\tfragColor.rgb = vec3(0.03,0.2,0.06)*vv1;\n\n    vec3 ro = vec3(0., 0.2, 10.0+sin(iTime*0.7)*4.0);\n    vec3 rd = normalize(vec3(uv, -1.5));\n            vec3 l = vec3(-.74, .9, .0);\n\tl = normalize(l);\n\n    float t = 0.0;\n    for (float iters=0.0; iters < 200.0; iters++) {\n        vec3 p = ro + rd * t;\n\n        vec2 cs = sin(iTime + vec2(1.57, 0.0));\n        p.xz *= mat2(cs, -cs.y, cs.x);\n        //p.yz *= mat2(cs, -cs.y, cs.x);\n\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n\n            //n.yz *= mat2(cs.x, -cs.y, cs.yx);\n            n.xz *= mat2(cs.x, -cs.y, cs.yx);\n\n            fragColor.rgb += map(p);\n\t\tfloat ddd = max(0.3, dot(n, l));\n            fragColor.rgb *=ddd;\n\t\t\n  \tvec3 ref = reflect(rd, n);\n\tfloat spe = max(dot(ref, l), 0.0);\n\t\t\n\t\tfragColor.rgb += pow(spe,8.0)*0.7;\n\t\t\n            break;\n        }\n\n        if (t > 20.0) {\n            break;\n        }\n\n        t += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}