{
    "Shader": {
        "info": {
            "date": "1467931921",
            "description": " A 3d point based tunnel effect based off the scene from Second Reality.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xlt3R8",
            "likes": 84,
            "name": "Point Tunnel",
            "published": 3,
            "tags": [
                "3d",
                "tunnel",
                "dots",
                "points",
                "secondreality"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 3609
        },
        "renderpass": [
            {
                "code": "//Constants\n#define TAU 6.2831853071795865\n\n//Parameters\n#define TUNNEL_LAYERS 96\n#define RING_POINTS 128\n#define POINT_SIZE 1.8\n#define POINT_COLOR_A vec3(1.0)\n#define POINT_COLOR_B vec3(0.7)\n#define SPEED 0.7\n\n//Square of x\nfloat sq(float x)\n{\n\treturn x*x;   \n}\n\n//Angular repeat\nvec2 AngRep(vec2 uv, float angle)\n{\n    vec2 polar = vec2(atan(uv.y, uv.x), length(uv));\n    polar.x = mod(polar.x + angle / 2.0, angle) - angle / 2.0; \n\n    return polar.y * vec2(cos(polar.x), sin(polar.x));\n}\n\n//Signed distance to circle\nfloat sdCircle(vec2 uv, float r)\n{\n    return length(uv) - r;\n}\n\n//Mix a shape defined by a distance field 'sd' with a 'target' color using the 'fill' color.\nvec3 MixShape(float sd, vec3 fill, vec3 target)\n{\n    float blend = smoothstep(0.0,1.0/iResolution.y, sd);\n    return mix(fill, target, blend);\n}\n\n//Tunnel/Camera path\nvec2 TunnelPath(float x)\n{\n    vec2 offs = vec2(0, 0);\n    \n    offs.x = 0.2 * sin(TAU * x * 0.5) + 0.4 * sin(TAU * x * 0.2 + 0.3);\n    offs.y = 0.3 * cos(TAU * x * 0.3) + 0.2 * cos(TAU * x * 0.1);\n    \n    offs *= smoothstep(1.0,4.0, x);\n    \n    return offs;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    uv -= res/2.0;\n    \n    vec3 color = vec3(0);\n    \n    float repAngle = TAU / float(RING_POINTS);\n    float pointSize = POINT_SIZE/2.0/iResolution.y;\n    \n    float camZ = iTime * SPEED;\n    vec2 camOffs = TunnelPath(camZ);\n    \n    for(int i = 1;i <= TUNNEL_LAYERS;i++)\n    {\n        float pz = 1.0 - (float(i) / float(TUNNEL_LAYERS));\n        \n        //Scroll the points towards the screen\n        pz -= mod(camZ, 4.0 / float(TUNNEL_LAYERS));\n        \n        //Layer x/y offset\n        vec2 offs = TunnelPath(camZ + pz) - camOffs;\n        \n        //Radius of the current ring\n        float ringRad = 0.15 * (1.0 / sq(pz * 0.8 + 0.4));\n        \n        //Only draw points when uv is close to the ring.\n        if(abs(length(uv + offs) - ringRad) < pointSize * 1.5) \n        {\n            //Angular repeated uv coords\n            vec2 aruv = AngRep(uv + offs, repAngle);\n\n            //Distance to the nearest point\n            float pdist = sdCircle(aruv - vec2(ringRad, 0), pointSize);\n\n            //Stripes\n            vec3 ptColor = (mod(float(i / 2), 2.0) == 0.0) ? POINT_COLOR_A : POINT_COLOR_B;\n            \n            //Distance fade\n            float shade = (1.0-pz);\n\n            color = MixShape(pdist, ptColor * shade, color);\n        }\n    }\n    \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}