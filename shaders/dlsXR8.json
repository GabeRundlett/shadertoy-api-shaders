{
    "Shader": {
        "info": {
            "date": "1674314087",
            "description": "i want to have a hebbian network using locality rules to overfit on a circle pattern. \nim interested in seeing this visually, but also i suspect it scales very well for memory locality, (hardware native implementations)",
            "flags": 32,
            "hasliked": 0,
            "id": "dlsXR8",
            "likes": 1,
            "name": "Hebbian Learning",
            "published": 3,
            "tags": [
                "ai",
                "ml"
            ],
            "usePreview": 0,
            "username": "timeiskey",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "/*here we should output the current network*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel1, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*The Update Shader\n in here we read the weights in the network from\n iChannel1 on color r, and output the next weight and output\n \n the weight should be output on color r\n the neuron output, its current activation level, on color g\n*/\n\n#define RADIUS 10.0\n\nfloat sigmoid(float x) {\n    return 1.0 / (1.0 + exp(-x));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 nppd = 1.0/iResolution.xy * 1.0;\n    \n    vec2 nmp = iMouse.xy / iResolution.xy;\n\n    vec3 c = vec3(0.0);\n    \n    // network values and local neighborhood\n    // where mc is the center pixel, the current neuron\n    vec3 tl = texture(iChannel1, abs(uv + nppd * vec2( -1.0, -1.0))).rgb;\n    vec3 tc = texture(iChannel1, abs(uv + nppd * vec2(  0.0, -1.0))).rgb;\n    vec3 tr = texture(iChannel1, abs(uv + nppd * vec2(  1.0, -1.0))).rgb;\n    vec3 ml = texture(iChannel1, abs(uv + nppd * vec2( -1.0,  0.0))).rgb;\n    vec3 mc = texture(iChannel1, abs(uv + nppd * vec2(  0.0,  0.0))).rgb;\n    vec3 mr = texture(iChannel1, abs(uv + nppd * vec2(  1.0,  0.0))).rgb;\n    vec3 bl = texture(iChannel1, abs(uv + nppd * vec2( -1.0,  1.0))).rgb;\n    vec3 bc = texture(iChannel1, abs(uv + nppd * vec2(\t0.0,  1.0))).rgb;\n    vec3 br = texture(iChannel1, abs(uv + nppd * vec2(  1.0,  1.0))).rgb;\n \n    // before frame 20, set your pixel weights to be random by just using the input\n    // from iChannel0 which is a noisy texture.\n    if (iFrame < 20)\n    {\n        tl = texture(iChannel0, uv + nppd * vec2( -1.0, -1.0)).rgb;\n        tc = texture(iChannel0, uv + nppd * vec2(  0.0, -1.0)).rgb;\n        tr = texture(iChannel0, uv + nppd * vec2(  1.0, -1.0)).rgb;\n        ml = texture(iChannel0, uv + nppd * vec2( -1.0,  0.0)).rgb;\n        mc = texture(iChannel0, uv + nppd * vec2(  0.0,  0.0)).rgb;\n        mr = texture(iChannel0, uv + nppd * vec2(  1.0,  0.0)).rgb;\n        bl = texture(iChannel0, uv + nppd * vec2( -1.0,  1.0)).rgb;\n        bc = texture(iChannel0, uv + nppd * vec2(\t0.0,  1.0)).rgb;\n        br = texture(iChannel0, uv + nppd * vec2(  1.0,  1.0)).rgb;\n    }\n    \n    /* this is where you would compute the output of the current \n    neuron (mc) and its new weight\n    input is the output of the \"in_circle\" function which \n    takes in the pixel coord of mc and outputs true or false. \n    the neuron then uses that as input, to compute its next output, \n    \n    and updates itself based on its neighbors last outputs\n    */\n    // in circle\n    float in_circle = step(length(uv - vec2(0.5, 0.5)), RADIUS);\n    float error = in_circle - mc.g;\n    float next_weight = mc.r + 0.01 * error * (tl.g + tc.g + tr.g + ml.g + mr.g + bl.g + bc.g + br.g);\n    float out_put = sigmoid(next_weight * in_circle);\n    \n    fragColor = vec4( next_weight, out_put, 0.0, 1.0 );\n    \n    // this lets us draw weights, its weird but should help with debugging\n    if(iMouse.z > 0.0)\n    \tfragColor = max(fragColor,vec4(step(length(iMouse.xy - fragCoord),RADIUS)));\n        }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}