{
    "Shader": {
        "info": {
            "date": "1529787259",
            "description": "Hastily coded live in 25 minutes at NOVA 2018. Coded in Bonzomatic, adapted here for shadertoy.",
            "flags": 64,
            "hasliked": 0,
            "id": "Mdyfzc",
            "likes": 11,
            "name": "NOVA 18 Showdown Final - yx",
            "published": 3,
            "tags": [
                "showdown",
                "nova18"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 871
        },
        "renderpass": [
            {
                "code": "// fuck your digits\n#define pi (acos(-1.))\n\nfloat noise(vec2 uv)\n{\n  return fract(sin(dot(uv, vec2(12.43243,4.543))*46573.71254));\n}\n\nfloat mlength(vec2 a)\n{\n  a=abs(a);\n  return max(a.x,a.y);\n}\n\nvec2 R(vec2 a, float b)\n{\n  float c =cos(b);\n  float s =sin(b);\n  return vec2(\n    a.x*c-a.y*s,\n    a.x*s+a.y*c\n  );\n}\n\n// :)\nfloat IKEDA(vec2 uv,float th)\n{\n  th = min(.5,th);\n  uv = R(uv,sin(floor(iTime*2.)));\n\n  //return mlength(uv)<4. ? 1. : 0.;\n\n  uv.x *= 15.;\n  \n\n  float sc = mix(.4,.1,noise(vec2(0,floor(uv.y))));\n  float sp = noise(vec2(1,floor(uv.y)))+2.;\n  uv.x+=sp*iTime*5.;\n  uv.x*=sc;\n  float n = noise(floor(uv));\n  n = fract(n+iTime*sp);\n  uv.x += iTime*10.;\n  return n>th&&fract(uv.y)>.35 && fract(uv.x*.5) < .8 ?1.:0.;\n}\n\nvec4 plas( vec2 v, float time )\n{\n  float c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n  return vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25, 1.0 );\n}\n\nvec4 pal(vec4 a, vec4 b, vec4 c, vec4 d, float t)\n{\n  return a+b*cos(2.*pi*(c*t+d));\n}\n\n// <3\nvec4 logichroma(float t)\n{\n  return pal(\n    vec4(.5),\n    vec4(.5),\n    vec4(1.),\n    vec4(0,.33,.67,1),\n    t\n  );\n}\n\nvec3 SG(vec2 uv)\n{\n  return vec3(\n    (2.*uv) /  (1.+dot(uv,uv)),\n    (-1.+dot(uv,uv)) /  (1.+dot(uv,uv))\n  );\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n  vec2 suv = fragCoord.xy / iResolution.xy;\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  float v = (1.-length(uv))*3.;\n  v=clamp(v,0.,1.);\n\n  vec3 s = SG(uv*3.);\n  s.xz = R(s.xz,iTime*1.9);\n  float m = s.x*s.z > 0. ? 1. : 0.;\n\n  float f = texture(iChannel0, vec2(0.005,0)).r*.5;\n\n\n  m = s.x*40.+.5 + f*4.;\n  m = clamp(m,0.,1.);\n\n\n  uv *= 1.-f*.8;\n  out_color=vec4(.0);\n  for(int i=0;i<30;++i)\n  {\n    out_color += vec4(IKEDA(uv*12.,.2+f*.5)) * logichroma(1.-float(i)/30.) * (1.-(float(i)/30.));\n    uv *= pow(0.992,1.-f);\n    uv.x+=sin(iTime)*.002;\n    uv.y+=cos(iTime)*.002;\n  }\n  out_color *= .1;\n  out_color = mix(out_color, 1.-out_color, m);\n  out_color *= v;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 14992,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/space-laces/space-laces-dungeons-and-dragons"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}