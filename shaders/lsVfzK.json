{
    "Shader": {
        "info": {
            "date": "1529822307",
            "description": "Rectangle edge to pixel coverage computation - allows for smooth rectangle movement. Top: smooth movement. Bottom: naive implementation (discontinuous edge movement)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "lsVfzK",
            "likes": 13,
            "name": "Smooth Rectangle movement",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 1212
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Often times when rendering a simple pixel/screen aligned rectangle that\n// needs to move or scale around, the edges of the rectangle jump in a non \n// smooth  way. This shader computes the pixel coverage of the rectangle's\n// edges and blends the colors properly to create a smooth visualization.\n// \n// Top: smooth movement\n// Bottom: naive implementation\n\n\nvec3 drawImageSimple( vec3 col, in vec2 p, in vec2 b1, in vec2 b2 ) \n{\n    if( p.x>=b1.x && p.y>=b1.y && p.x<=b2.x && p.y<=b2.y )\n    {\n        vec2 uv = (p-b1)/(b2-b1);\n        vec3 tex = texture( iChannel0, uv ).xyz;\n        col = tex*tex;\n    }\n    return col;    \n}\n\nvec3 drawImageSmooth( vec3 col, in vec2 p, in vec2 b1, in vec2 b2 ) \n{\n    ivec2 a1 = ivec2(floor(b1));\n    ivec2 a2 = ivec2(floor(b2));\n    vec2  f1 = fract(b1);\n    vec2  f2 = fract(b2);\n    \n    ivec2 ip = ivec2(floor(p));\n    \n    if( ip.x>=a1.x && ip.y>=a1.y && ip.x<=a2.x && ip.y<=a2.y )\n    {\n        vec2 uv = (p-b1)/(b2-b1);\n        \n\t\tfloat al = 1.0;\n    \n        al = (ip.x==a1.x ) ? al *= 1.0-f1.x : al;\n        al = (ip.y==a1.y ) ? al *= 1.0-f1.y : al;\n        al = (ip.x==a2.x ) ? al *= f2.x : al;\n        al = (ip.y==a2.y ) ? al *= f2.y : al;\n            \n        vec3 tex = texture( iChannel0, uv ).xyz;\n        col = mix( col, tex*tex, al );\n    }\n    \n    return col;    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // location of box(es)\n    vec2  b1 = vec2(0.05,0.03) + vec2(0.6,0.1)*fract(0.01*iTime );\n    vec2  b2 = b1 + 0.15;\n\tfloat of = 0.25;\n    \n    // adapt to different resolutions\n    b1 *= iResolution.x;\n    b2 *= iResolution.x;\n    of *= iResolution.x;\n    \n    // background\n    vec3  col = vec3(0.05);\n    // top    \n    col = drawImageSmooth( col, fragCoord-vec2(0,of), b1, b2 ); \n    //bottom\n    col = drawImageSimple( col, fragCoord-vec2(0, 0), b1, b2 ); \n    \n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}