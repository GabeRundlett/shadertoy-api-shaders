{
    "Shader": {
        "info": {
            "date": "1508700717",
            "description": "A simple polygons animation",
            "flags": 0,
            "hasliked": 0,
            "id": "MlByWW",
            "likes": 8,
            "name": "Introducing polygons",
            "published": 3,
            "tags": [
                "2d",
                "animation",
                "rotation",
                "polygons",
                "pseudofractal"
            ],
            "usePreview": 0,
            "username": "josemorval",
            "viewed": 654
        },
        "renderpass": [
            {
                "code": "//Simple palette color by iq: https://iquilezles.org/articles/palettes\nvec3 palette(float t,vec3 a,vec3 b,vec3 c,vec3 d)\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 backgroundColor(float t){\n  return palette(t,vec3(0.5),vec3(0.5),vec3(1.),vec3(0., 0.33, 0.67));  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv-0.5;\n    p.x*=iResolution.x/iResolution.y;\n    \n    float walkingIntensity = 1.5*iResolution.x/iResolution.y;\n    float animTime = 4.;\n    float velTime = 1.5;\n    float walkingPolygonTime = 4.;\n    float rotatingPolygonTime = 3.;\n    float sizePolygonTime = 3.;\n    float numberTypePolygons = 6.;\n    float minimumSidePolygon = 3.;\n    float size = 0.1;\n    float minfactorsize = 1.;\n    float maxfactorsize = 22.;\n    float widthpol = 0.04;\n\n    float rawtime = iTime;\n\n    //Playing with rotate all canvas along time\n    //p = mat2(cos(0.01*rawtime),-sin(0.01*rawtime),sin(0.01*rawtime),cos(0.01*rawtime))*p;\n\t\n    //Compute number of sides based on rawtime\n    float sides = minimumSidePolygon+mod(floor(velTime*rawtime/animTime),numberTypePolygons);\n\n    float modrawtime = mod(velTime*rawtime,animTime);\n    \n    //Arc tan is a fantastic curve to get a \"organic slowing down\" effect\n    float oneanimtime = walkingIntensity*sides*mix(atan(modrawtime),atan(walkingPolygonTime),smoothstep(0.,1.,modrawtime/walkingPolygonTime));\n    float time = mod(oneanimtime,1.);\n\t\n    //Polygon movement direction\n    p.x *= 1.*(mod(sides,2.)-0.5)*2.;\n\t\n    \n    //Final part of animation (rotation)\n    float a = 1.*3.14159*2.*smoothstep(rotatingPolygonTime,animTime,modrawtime);\n    p = mat2(cos(a),-sin(a),sin(a),cos(a))*p;\n\t\n    float rotfactor = 2.*3.14159/sides;\n    float ra=3.14159/2.;\n\t\n    //When polygon rotating, only rotate a small angle...\n    float onerot = (3.14159/2.-(3.14159-2.*3.14159/sides)/2.);\n    ra += 2.*onerot*time-onerot;\n\t\n  \t//...then move..and repeat with the same point    \n    p+=vec2(2.*size*sin(3.14159/sides)*floor(oneanimtime)-iResolution.x/iResolution.y,0.0) * (1.-smoothstep(rotatingPolygonTime,animTime,modrawtime));\n    \n    //Comment last line and uncomment next one to see how much rotate\n    //p+=vec2(2.*size*sin(3.14159/sides),0.0) * (1.-smoothstep(rotatingPolygonTime,animTime,modrawtime));\n\t    \n    p = mat2(cos(ra),-sin(ra),sin(ra),cos(ra))*p-vec2(size*(1.-smoothstep(rotatingPolygonTime,animTime,modrawtime)),0.0);\n\n   \t//Here the magic: constructing polygons!\n    float angle = mod(3.14159+atan(p.y,p.x),2.*3.14159/sides)-3.14159/sides;\n    float r = length(p);\n    vec2 newp = r*vec2(cos(angle),sin(angle));\n\t\n  \t//Here we simulate a zoom effect without a headache\n    size *= mix(minfactorsize,maxfactorsize,smoothstep(sizePolygonTime,animTime,modrawtime));\n    float mask = step(size*cos(3.14159/sides),newp.x);\n\n    //Some border for the polygon\n    float shadowmask = 1.-step((1.+widthpol)*size*cos(3.14159/sides),newp.x);\n    shadowmask *= step((1.-widthpol)*size*cos(3.14159/sides),newp.x);\n    shadowmask = 1.-shadowmask;\n\t\n    //Here the \"fractal color background\" part. Ok, called it \"fractal\" maybe is too much.\n    vec3 col; \n    col = shadowmask*mix(\n        backgroundColor((sides-minimumSidePolygon)/numberTypePolygons),\n        backgroundColor((mod(sides-1.-minimumSidePolygon,numberTypePolygons))/numberTypePolygons),\n        mask);\n\n  \tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}