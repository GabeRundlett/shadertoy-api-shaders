{
    "Shader": {
        "info": {
            "date": "1633839954",
            "description": "The board is subdivided to store each possible move X can make along with the corresponding \"best\" response for O.\n\nZoom in by clicking with your mouse\n",
            "flags": 0,
            "hasliked": 0,
            "id": "fdcSWH",
            "likes": 10,
            "name": "Tic-tac-toe cheat sheet",
            "published": 3,
            "tags": [
                "recursive",
                "glow",
                "tictactoe",
                "storage"
            ],
            "usePreview": 0,
            "username": "NLIBS",
            "viewed": 518
        },
        "renderpass": [
            {
                "code": "#define AA 2\n\nconst int data1 = 193684000;\nconst int data2[5] = int[](73513917,45929,244974619,32811,92120642);\nconst int data3[45] = int[](\n    0,288970497,334209321,95790699,6024960,288616743,239299803,87289101,32836977,\n    288970497,0,258279597,129134258,1243676,128667698,340122167,263010734,32583791,\n    334209321,258279597,0,258273845,4786622,1,340009315,219964087,15962943,\n    95790699,129134258,258273845,0,4783520,128609450,340116399,263057462,32569233,\n    6024960,87337604,143669892,91939844,0,288041568,47889532,87276368,5374332\n);\nint data4[405];\nconst int indices[186] = int[](\n    15,239653647,10,220015845,4,340050069,8,3015873,1,5201415,1,28698354,\n    2,5846355,1,24092037,1,1241973,8,339644007,8,339644007,6,220015845,\n    14,119979,8,239653647,20,15967287,9,32812053,1,4610196,2,258758550,\n    1,2,2,1062884,1,177155,2,1185111,9,32461647,9,133085,9,119801,\n    1,30650805,2,15967287,1,32812053,1,1185111,1,32461647,1,133085,\n    1,119801,9,220015845,10,15967287,18,32457327,1,5201415,1,129618387,\n    2,4782977,2,38263832,2,3653,1,14352579,1,32468931,16,3,2,220015845,\n    1,133869915,2,220010093,1,3653,1,1,1,1,2,19713,4,32457327,8,340050069,\n    15,32812053,9,32457327,10,28698354,1,2,1,4782977,4,124357266,\n    1,488,1,10629369,9,29229315,9,65709,9,131645,1,9684135,1,32812053,\n    1,32457327,2,10629369,1,29229315,1,65709,1,131645,3,3015144,1,14531157,\n    1,4783095,2,29761236,1,4842063,1,1182924,2,4610196,2,129618387,\n    1,87156812,2,259343700,1,129320963,2,1775601,4,47829761,6,38264472,\n    1,87156812,1,47829761,4,81310545,1,87156812,1,5314554,16,47829754,\n    4,129320963,10,129320958,8,1775601\n);\n\nint npow[9] = int[](1,9,81,729,6561,59049,531441,4782969,43046721);\n\n#define won(g) (g&86016)==86016 || (g&1344)==1344 || (g&21)==21 || (g&4161)==4161 || (g&16644)==16644 || (g&66576)==66576 || (g&4368)==4368 || (g&65793)==65793\n\nvoid mainImage(out vec4 O,vec2 U) {\n    int n = 0;\n    for (int i = 0; i<93; i++) data4[n += indices[i*2]] = indices[i*2+1];\n    \n    for (int aa = 0; aa<AA*AA; aa++) {\n        vec2 r = iResolution.xy,\n             uv = (2.*(U + vec2(aa%AA,aa/AA)/float(AA))-1.-r)/r.y;\n             \n        if (iMouse.z>0.)\n            uv =uv*.3+iMouse.xy/r*1.4-.7;\n        vec2 p = uv;\n        \n        int i=0,n=0,g=0,v,h=-1,pt=0,n0,n1;\n        float c,c2,x,l=0.,d=.05;\n        vec2 p2 = max(abs(p)-.6,0.);\n        vec3 bg = vec3(0,.03,.06)/(dot(p2,p2)+vec3(0,.3,1));\n        for (; i<5; i++) {        \n            n*=9;\n            if ((v&3)>0&&i>1 || length(max(abs(p)-.9,0.))>.05 || won(g)) break;\n            bg += vec3(.02,.04,.06)*sqrt(float(i));\n            uv = p*1.6+1.5;\n            \n            if (i==0) uv = mix(uv,3.-uv,step(.95/3.,p));\n            \n            p = fract(uv)*2.-1.;\n            n += int(uv.x)+int(uv.y)*3;\n\n            if (i>0) {\n                n0 = (n/9)%9;\n                n1 = (pt+n0)/9;             \n                h = i<3 ? (i==1 ? data1 : data2[n1]) : (i==3 ? data3[n1] : data4[n1]);\n                h = (h/npow[(pt+n0)%9])%9;\n                g |= (2<<n0*2) | (1<<h*2);\n                pt = (pt+n0)*9;\n            }\n\n            v = g>>(n%9)*2;            \n            c = min(.035/sqrt(abs(length(p)-.8)-d*.8),1.) * float(v&1);\n            c2 = c*float(n%9==h);\n            \n            vec2 px = abs(p.y+vec2(p.x,-p.x)); px = (px.y>px.x) ? px.yx : px.xy;\n            x = min(.035/sqrt(length(max(px-vec2(1.6,0),0.))-1.4*d),1.) * float(v/2&1);\n                    \n            d += .02;\n        }\n        O += vec4( (1.-x-c)*bg/(bg.r+.6)+max(c2-l,0.)*vec3(.9,.7+float(i-2)*.1,.2),0)/float(AA*AA);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}