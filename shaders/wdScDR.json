{
    "Shader": {
        "info": {
            "date": "1586412447",
            "description": "left: hardware | right: manual\nEven when sampling from float textures hardware filtering is a low-precision operation.",
            "flags": 32,
            "hasliked": 0,
            "id": "wdScDR",
            "likes": 6,
            "name": "HW-Filtering Precision Test",
            "published": 3,
            "tags": [
                "filtering"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 616
        },
        "renderpass": [
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n/*\n    left: hardware | right: manual\n    Even when sampling from float textures hardware filtering is a low-precision operation.\n    https://iquilezles.org/articles/hwinterpolation\n\n    https://twitter.com/adamjmiles/status/1248190466090323968\n*/\n\nfloat cubic(float x) { return x*x*(3.0-2.0*x); }\n\nfloat Read(vec2 uv)\n{\n    float v = texelFetch(iChannel0, ivec2(uv), 0).x;\n\n    return v;\n}\n\n  //  #define EMULATE_LOW_PRECISION\n\nfloat texLoad(vec2 tex)\n{\n    vec2 uv = tex * iResolution.xy;\n    \n    uv += 0.5;\n    \n    vec2 uvI = floor(uv);\n    vec2 uvF = fract(uv);\n\n#ifdef EMULATE_LOW_PRECISION\n    {\n        float s = 256.0;\n        uvF = round(uvF * s) / s;\n    }\n#endif\n    \n    float v = mix(mix(Read(uvI + vec2(0.0, 0.0)), Read(uvI + vec2(1.0, 0.0)), uvF.x),\n                  mix(Read(uvI + vec2(0.0, 1.0)), Read(uvI + vec2(1.0, 1.0)), uvF.x), uvF.y);\n    \n#ifdef EMULATE_LOW_PRECISION\n    {\n        float s = 256.0;\n        v = floor(v * s) / s;\n    }\n#endif\n    \n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 uv0 )\n{\n\tvec2 tex = uv0.xy / iResolution.xy;\n    vec2 tex2= tex * 0.004+0.008;\n    \n#if 0\n    // quantize uvF\n    {\n        vec2 uv = tex2 * iResolution.xy;\n        vec2 uvI = floor(uv);\n        vec2 uvF = fract(uv);\n        {\n            float s = 16.0;\n            uvF = round(uvF * s) / s;\n        }        \n        tex2 = (uvI + uvF) / iResolution.xy;\n    }\n#endif\n\n    vec3 col = textureLod(iChannel0, tex2, 0.0).rgb;\n    \n    if(tex.x > 0.5)\n    col = vec3(texLoad(tex2));\n    \n    //col = vec3(col.r > 0.5 ? 1.0 : 0.0);\n\tfor(float i = 0.0; i < 9.0; ++i)\n    col = vec3(cubic(col.r));\n    \n#if 0\n    // vis error\n    {\n        vec3 col2 = vec3(texLoad(tex2));\n        \n        for(float i = 0.0; i < 9.0; ++i)\n        col2 = vec3(cubic(col2.r));\n        \n        col = col.r != col2.r ? vec3(1.0) : vec3(0.0);\n        //col = vec3(abs(col.r - col2.r) * exp2(22.0));\n    }\n#endif\n\n    //fragColor = vec4(pow(col, vec3(1.0/2.2)), 0.0);\n    fragColor = vec4(col, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage(out vec4 outCol, in vec2 uv0)\n{\n    uvec2 uv2 = uvec2(uv0);\n    \n    vec3 col = vec3(((uv2.x ^ uv2.y) & 1u) == 0u ? 1.0 : 0.0);\n    //col = vec3((uv2.y & 1u) == 0u ? 1.0 : 0.0);\n    \n    outCol = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}