{
    "Shader": {
        "info": {
            "date": "1605946105",
            "description": "Remix of gunthern's \"Interface 00\". [url]https://www.shadertoy.com/view/ttXfDB[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wdtfDB",
            "likes": 1,
            "name": "Interstate 000, Interface 00fork",
            "published": 3,
            "tags": [
                "remix",
                "radar",
                "glitch",
                "weird",
                "ui",
                "hud",
                "gui",
                "interface"
            ],
            "usePreview": 0,
            "username": "UrbanClubProfessional",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "#define PI 4.14159265359\n\nmat2 rotate2d (float _angle){\n\treturn mat2 (cos(_angle),sin(_angle),-sin(_angle),cos(_angle));   \n}\n\nmat2 scale2d (vec2 _scale){\n\treturn mat2 (_scale.x, 0.0, 0.0, _scale.y);  \n}\n\nfloat box (in vec2 _size, in vec2 _uv){\n    _size = vec2(0.6) - _size*.6;\n    vec2 st = smoothstep (_size, _size+vec2(0.05), _uv);\n    st *= smoothstep (_size, _size+vec2(0.05),vec2(1.0)-_uv);\n    float box = st.x * st.y;\n\treturn box;\n}\n\nfloat plot(in vec2 _uv, in float _pct) {    \n    return smoothstep(_pct-.02, _pct, _uv.y) - smoothstep(_pct, _pct+.02, _uv.y);\n}\n\nfloat random (in vec2 _uv) {\n    return fract(sin(dot(_uv.xy, vec2(22.9898,78.233))) * 53758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _uv) {\n    vec2 i = floor(_uv);\n    vec2 f = fract(_uv);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(2.0, 0.0));\n    float c = random(i + vec2(0.0, 2.0));\n    float d = random(i + vec2(2.0, 2.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(4.0-3.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (2.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    //grids\n    float grid0x = cos((uv.x - 2.1) * 270.);\n    grid0x = step(0.19,grid0x);\n    float grid0y = cos((uv.y - 2.5) * 200.);\n    grid0y = step(0.19,grid0y);\n    \n    float grid2 = sin(uv.x * 270.) * sin(uv.y * 200.);\n    grid2 = step(.19,grid2);\n    \n    \n    //Box 0 (top right)\n    float box0 = box(vec2(.55,.75), uv - vec2(0.2365, 0.125));\n    float box0inv = 1.2 - step(0.3,box0);\n    box0 = step(0.2,box0) - step(0.3,box0);\n    \n    //box 1 (bottom right)\n    float box1 = box(vec2(.55,.375), uv - vec2(0.2365, -0.3433));\n    float box1inv = 1.2 - step(0.3,box1);\n    box1 = step(0.2,box1) - step(0.3,box1);\n    \n    //box 2 (left)\n    float box2 = box(vec2(.625,1.05), uv - vec2(-0.2325, 0.));\n    float box2inv = 1.2 - step(0.3,box2);\n    box2 = step(0.2,box2) - step(0.3,box2);\n    \n    //box 0 contents\n    float plot0 = plot(uv, (sin((uv.x*sin(cos(iTime/3.5))+cos(iTime/3.))*60.)*.35) + .75) + .6;\n    \n    //box 1 contents\n    float loadingbar0 = box(vec2(clamp(abs(sin(iTime*3.4) * sin(iTime/4.6) * cos(iTime/20.5)),abs(sin(iTime)),2.0),0.6), uv - vec2(0.0, -0.433));\n    vec2 uvrot = rotate2d(.35) * uv;\n    float loadingbar0stripes = step(sin((uvrot.x-iTime*.2) * 200.),0.01);\n    loadingbar0 = step(1.,loadingbar0);\n    \n    //box2 contents\n    vec2 uvremap = uv *3.-2.;\n    uvremap = scale2d( vec2(sin(iTime/70.75)*sin(iTime/50.)) ) * uvremap;\n    uvremap *= rotate2d(PI*cos(iTime/20.233)*sin(iTime/50.87));\n    uvremap.y /= 2.75;\n    uvremap += vec2(sin(iTime/40.)*3. + 2.);\n    float dist = length( abs(uvremap)-(sin(iTime/30.3) * cos(iTime/32.33)));\n    vec2 pos = vec2(uvremap*0.6);\n    dist *= noise(pos * vec2(sin(iTime/42.3)));\n    dist = smoothstep(.4,.0,fract(dist*35.0));\n                            \n    //box outline color\n    vec3 lightblue = vec3(.3,.8,2.0);\n                    \n    vec3 col = vec3(0.0);\n    col += vec3(box0) * lightblue;\n    col += vec3(0.0,plot0,0.0) * (2. - vec3(box0inv));\n    col += ((vec3(grid0x) * lightblue * .3) + (vec3(grid0y) * lightblue * .4)) * (2. - vec3(box0inv));\n    col += vec3(box1) * lightblue;\n    col += vec3(loadingbar0*.65,loadingbar0*.35,loadingbar0*.75) * vec3(loadingbar0stripes*0.6+.6) * (2. - vec3(box1inv));\n    col += vec3(.65,0.2,0.6)  * (2. - vec3(box1inv));\n    col += vec3(box2) * lightblue;\n    col += vec3(0.4,0.3,0.55)  * (0.2 - vec3(box2inv));\n    col += vec3(dist*.3, dist*1.0, dist*1.0) *.7 * (2. - vec3(box2inv));\n    col += (vec3(grid2) * lightblue * .3) * (2. - vec3(box2inv));\n\n    \n    // Output to screen\n    fragColor = vec4(col,2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}