{
    "Shader": {
        "info": {
            "date": "1612087138",
            "description": "swoosh",
            "flags": 0,
            "hasliked": 0,
            "id": "wlyyWd",
            "likes": 14,
            "name": "Rollin out",
            "published": 3,
            "tags": [
                "3d",
                "orthographic"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "// Cole Peterson\n\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat sub(float d1, float d2){return max(-d1, d2);}\n\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z))-.04,0.0);\n}\n\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid trn(inout vec3 p){\n    p.yz*=rot(-0.8);\n    p.xy*=rot(0.475);\n    p.x += iTime + 50.;\n}\n\n#define b vec3(5., 5., 0.)\n\nfloat map(vec3 rp){\n    float d = 999.;\n    vec3 p = rp-vec3(0., -5., 9.);\n    vec3 pp = p;\n    trn(pp);\n    \n    for(float i = 0.; i < 2.; i++){\n        p = pp;\n        vec3 id = floor(p / max(b, 0.0001));\n        p.z += i*-5.;\n    \n        float rnd = hash12(i*33.+id.xy*vec2(333., 588.));\n        p = mod(p, b)-b*.5;\n        \n        p.xz *= rot(sign(rnd-0.5)*.8*iTime+id.x+id.y);\n        p.xy *= rot(sign(rnd-0.5)*.8*iTime+id.x+id.y);\n    \n        d = min(sdBox(p, vec3(1.6 - rnd*0.2, 1.6 - rnd*0.4, 1.0 + rnd*0.9)), d);\n        if(rnd > 0.4) d=sub(length(p)-1.68, d);\n    }\n    \n    return d;\n}\n\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec3 rd = normalize(vec3(0., 0.0, 1.));\n    vec3 ro = vec3(uv * 12., 0.);\n    \n    float d = 0.0, t = 0.0, ns = 0.;\n    for(int i = 0; i < 44; i++){\n    \td = map(ro + rd*t); \n        if(abs(d) < 0.01 || t > 40.)break;\n        t += d * .55;\n        ns++;\n    }\n    \n    vec3 p = ro + rd*t;\n    vec3 n = normal(p);\n    \n    vec3 lp = vec3(-2., 37.0, -30.);\n    vec3 ld = normalize(lp-p);\n    \n    float dif = max(dot(n, ld), .3);\n    vec3 col = .43 + .3*cos(vec3(0.5, 2., 1.1)*(n.x+n.y+n.z)*1.2 + vec3(2., 1.8, 0.2));\n    \n    col *= max(ss(1.85, 0.6, ns/24.), 0.03) * dif;\n    \n    col = mix(vec3(0.0), col, exp(-t*t*t*0.0001));\n    col = pow(col*1.4, vec3(1.85));\n    \n    col*=ss(.42, .419, abs(uv.y));\n    \n    f = vec4(sqrt(clamp(col, .0, 1.)), 1.);\n}\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}