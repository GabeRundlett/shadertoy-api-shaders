{
    "Shader": {
        "info": {
            "date": "1635428844",
            "description": "solving Laplacian(V) = 0 ( e.g. for heat diffusion ) takes foreever.\nMultigrid approach solves this at corse, then thinner and thinner resolution.\nAs usual, hierarchical requires power-of-2 textures, thus the cubeMap.\nPaint dot, rewind to see multigrid ac",
            "flags": 32,
            "hasliked": 0,
            "id": "NsKXWc",
            "likes": 9,
            "name": "multigrid diffusion booster",
            "published": 3,
            "tags": [
                "diffusion",
                "solver",
                "multigrid"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 428
        },
        "renderpass": [
            {
                "code": "// Must paint in cubeMap face for power of 2 hierarchy\n// I still map the result on screen, thus the mouse distortion.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    O = C(U,0);        // access to cubemap face 1, LOD 0\n // O = sin(100.*O);   // debug: display isovalues\n // float f = sin(100.*O.r); O = mix(O,vec4(1,0,0,0),smoothstep(1.5,0.,abs(f)/fwidth(f)));// debug variant\n\n    O = sqrt(O);       // to sRGB\n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T(U,x,y,n)   C( U + vec2(x,y), n )\n\nvoid mainCubemap( out vec4 O, vec2 U, vec3 o, vec3 d )\n{\n    if ( max(d.x, max(d.y,d.z)) != d.z ) return; // we want only face 1 \n    \n    //U -= .5;\n    if (iFrame==0) { O = vec4(0); return; }\n    vec2 R = iResolution.xy, I;\n                                                // --- set multigrid LOD\n  //int n = max(0, int( log2(R.y) -4. - log2(float(1+iFrame/60/2)) ));\n    int n = max(0, int( log2(R.y) -2. - float(iFrame/60) )); // what is optimum duration per level ?\n  //n = 3;\n    U =       U / float(1<<n); I = floor(U);\n    R = floor(R / float(1<<n));\n    \n    O = T(U,0,0, n);                            \n                                                // --- Laplacian solver. \n // vec4 D = (   T(U,1,0,n) + T(U,-1,0,n) + T(U,0, 1,n) + T(U, 0,-1,n) - 4.*O ) / 4.;\n // vec4 D = (   T(U,1,0,n) + T(U,-1,0,n) + T(U,0, 1,n) + T(U, 0,-1,n) // higher orders: https://en.wikipedia.org/wiki/Discrete_Laplace_operator\n //            + T(U,1,1,n) + T(U,-1,1,n) + T(U,1,-1,n) + T(U,-1,-1,n)\n //             - 8.*O ) / 8.;\n    vec4 D = ( 2.*( T(U,1,0,n) + T(U,-1,0,n) + T(U,0, 1,n) + T(U, 0,-1,n) )\n               +    T(U,1,1,n) + T(U,-1,1,n) + T(U,1,-1,n) + T(U,-1,-1,n)\n               - 12.*O ) / 12.;\n    O += D;  // apparently stable even with coef 1\n    \n                                                // --- set border constraints\n#if 0\n    O =  I.y==0. || I.y==R.y-1. ? vec4(I.x/(R.x-1.)) \n       : I.x==0. ? vec4(0) : I.x==R.x-1. ? vec4(1)\n       : O;\n#else\n    O =  I.x==0. ? vec4(1,0,0,1) : I.x==R.x-1. ? vec4(0,1,0,1)\n       : I.y==0. ? vec4(0,0,1,1) : I.y==R.y-1. ? vec4(1,1,1,1)\n       : O;\n#endif\n                                                // --- mouse paint\n    vec2 M = texelFetch(iChannel1,ivec2(0),0).xy;   // get normalized mouse position\n    if ( length(M)>.1 && length(I/R-M)<.1) O = vec4(I.x/R.x > M.x);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "// access to cubemap face 1 , LOD n\n#define C(U,n) texture(iChannel0, vec3(clamp(2.*(U)/R-1.,-1.+1./R,1.-1./R),1)*vec3(1,-1,1), float(n) )\n//#define C(U,n) texture(iChannel0, vec3(2.*(U)/R-1.,1)*vec3(1,-1,1), float(n) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// can't normalize iMouse in cubeMap, so this Buffer provides it\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = iMouse;\n    O.xy /= iResolution.xy;\n    O.zw /= iResolution.xy;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}