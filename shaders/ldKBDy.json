{
    "Shader": {
        "info": {
            "date": "1530362376",
            "description": "Combining two others just to see if I can",
            "flags": 0,
            "hasliked": 0,
            "id": "ldKBDy",
            "likes": 3,
            "name": "Wet Plasma",
            "published": 3,
            "tags": [
                "plasma",
                "water"
            ],
            "usePreview": 0,
            "username": "_polymath",
            "viewed": 698
        },
        "renderpass": [
            {
                "code": "#define SPEED 8.0\n#define HEIGHT 0.05\n#define WAVELENGTH -100.0\n#define DIEOFF 0.6\n#define DROPS 40.0\n#define TIMEDIEOFF 0.6\n#define DISTANCEDIEOFF 38.2\n#define DROPFRQ 5000.0\n#define PROPSPEED 3.0\n\nvec4 plasma( vec2 uv )\n{\n    float d = 0.0;\n    for (float i = 0.0; i < 200.0; ++i) {\n        float j = max(0.0, 3.14 - distance(uv, vec2(\n            sin(i + iTime * mod(i * 2633.2363, 0.42623)) * 12.0,\n            cos(i  * 0.617 + iTime * mod(i * 36344.2363, 0.52623)) * 12.0\n        )));\n        d += cos(j);\n     }\n    float r = cos(d * 6.0) * 0.5 + 0.5;\n    float g = cos(d * 3.0) * 0.5 + 0.5;\n    return vec4(r, g, max(r, g), 1.0);\n}\n\nfloat h(vec2 uv) {\n    float h = 0.0;\n    for (float i = 0.0; i < DROPS; ++i) {\n        vec2 c = vec2(\n            mod(cos(i * 343.7345), 0.001) * 1000.0,\n            mod(cos(i * 634.3634), 0.001) * 1000.0 * iResolution.y / iResolution.x);\n        float d = distance(uv, c);\n        float t = mod(cos(i * 734.6345), 0.001) * DROPFRQ;\n        t = mod(t - iTime, DROPFRQ / 1000.0);\n        if (t * PROPSPEED< d) continue;\n        h -= HEIGHT * sin(d*WAVELENGTH + SPEED*iTime) * t\n                        * pow(d*DISTANCEDIEOFF,-TIMEDIEOFF * t);\n     }\n    return h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n    \n    float n = h(uv),\n        d = h(uv - 0.00001) - n;\n    \n    fragColor = plasma((uv + n)* 6.0 ) + min(0.1,max(-0.1, d * 10000.0)) * 0.5;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}