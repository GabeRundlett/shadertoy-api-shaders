{
    "Shader": {
        "info": {
            "date": "1697484543",
            "description": "Gaussian blur using two passes for higher efficiency, kinda janky variables with the kernelSize and all but here we are. \nO(2n)",
            "flags": 32,
            "hasliked": 0,
            "id": "DddyWj",
            "likes": 0,
            "name": "A Simple Gaussian Blur",
            "published": 3,
            "tags": [
                "blur",
                "gaussianblur"
            ],
            "usePreview": 0,
            "username": "Kampfhund",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float kernelSize = 9.0;\n    //the -1.0 only if it's an odd number I think idk haven't tested\n    float halfKernelSize = (kernelSize-1.0) / 2.0;\n    \n    float[] gaussian = float[] (1.0, 8.0, 28.0, 56.0, 70.0, 56.0, 28.0, 8.0, 1.0);\n    //sum of all the values in the array\n    float sum = 256.0;\n    \n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0); \n    vec2 currentCoordinate = vec2(0.0, 0.0);\n    \n    for(float i = -halfKernelSize; i <= halfKernelSize; i++)\n    {\n        currentCoordinate = vec2(fragCoord.x, fragCoord.y + i);\n        color.r += texture(iChannel0, currentCoordinate / iResolution.xy).r * gaussian[int(i+halfKernelSize)];\n        color.g += texture(iChannel0, currentCoordinate / iResolution.xy).g * gaussian[int(i+halfKernelSize)];\n        color.b += texture(iChannel0, currentCoordinate / iResolution.xy).b * gaussian[int(i+halfKernelSize)];\n    }\n    \n    color = vec4(color.r / sum, color.g / sum, color.b / sum, 1.0);\n    fragColor = color;\n    //fragColor = texture(iChannel1, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float kernelSize = 9.0;\n    //the -1.0 only if it's an odd number I think idk haven't tested\n    float halfKernelSize = (kernelSize-1.0) / 2.0;\n    \n    float[] gaussian = float[] (1.0, 8.0, 28.0, 56.0, 70.0, 56.0, 28.0, 8.0, 1.0);\n    //sum of all the values in the array\n    float sum = 256.0;\n    \n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0); \n    vec2 currentCoordinate = vec2(0.0, 0.0);\n    \n    for(float i = -halfKernelSize; i <= halfKernelSize; i++)\n    {\n        currentCoordinate = vec2(fragCoord.x + i, fragCoord.y);\n        color.r += texture(iChannel0, currentCoordinate / iResolution.xy).r * gaussian[int(i+halfKernelSize)];\n        color.g += texture(iChannel0, currentCoordinate / iResolution.xy).g * gaussian[int(i+halfKernelSize)];\n        color.b += texture(iChannel0, currentCoordinate / iResolution.xy).b * gaussian[int(i+halfKernelSize)];\n    }\n    \n    color = vec4(color.r / sum, color.g / sum, color.b / sum, 1.0);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}