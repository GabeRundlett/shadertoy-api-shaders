{
    "Shader": {
        "info": {
            "date": "1514393396",
            "description": "The simplest Escher's cubes. Mouse drag to reveal the trick. Another trick on ray tracing > [url]https://www.shadertoy.com/view/XlBfRh[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ltjBzz",
            "likes": 25,
            "name": "Escher's Cubes",
            "published": 3,
            "tags": [
                "illusion",
                "escher",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "keim",
            "viewed": 1283
        },
        "renderpass": [
            {
                "code": "precision highp float;\n vec2  resolution, mouse;\n float time;\n\nconst vec3 V  = vec3(0,.001,300);\nconst vec3 BG = vec3(0);\nconst vec3 Amb= vec3(.01);\nconst vec3 PI = vec3(1.5707963,3.1415927,6.2831853);\nconst float BPM = 120.;\nvec2 uv;\nfloat tick;\n\nfloat rnd(vec3 s){s=fract(s*443.8975);s+=dot(s,s.yzx+19.19);return fract(s.x*s.y*s.z);}\nvec4  gamna(vec3 c){return vec4(pow(c,vec3(1./2.2)),1);}\nvec3  hsv(float h,float s,float v){return((clamp(abs(fract(h+vec3(0,2,1)/3.)*6.-3.)-1.,0.,1.)-1.)*s+1.)*v;}\nmat3  camera(vec3 p, vec3 t, vec3 h){vec3 w=normalize(p-t),u=normalize(cross(w,h));return mat3(u,normalize(cross(u,w)),w);}\nfloat dfPln(vec3 p, vec3 n, float d){return dot(p,n)+d;}\nfloat dfBox(vec3 p, vec3 b, float r){return length(max(abs(p)-b,0.))-r;}\n\nfloat map(in vec3 p) {\n    float d = dfPln(p, vec3(0,1,0), 0.);\n    for (float i=0.; i<3.; i+=1.) {\n        d = min(d, dfBox(p-vec3(i*1.01-0.025,.5,0), vec3(.42-i*.01), .09));\n        d = min(d, dfBox(p-vec3(4.,.5,i), vec3(.4), .09));\n        d = min(d, dfBox(p-vec3(4.,i+.5,4.), vec3(.4), .09));\n    }\n    d = min(d, dfBox(p-vec3(3.,.5,0.), vec3(.4), .09));\n    d = min(d, dfBox(p-vec3(4.,.5,3.), vec3(.4), .09));\n    d = min(d,max(min(dfBox(p-vec3(4.,3.5,4.), vec3(.4), .09),\n                      dfBox(p-vec3(4.,4.5,4.), vec3(.4), .09)),\n                      dfPln(p-vec3(4.,3.70,4.), normalize(vec3(-0.08,0.96,-1)), .1)));\n    return d;\n}\n\nvec3 background(vec3 pos, vec3 dir, inout float bld) {\n    bld = 0.;\n    return BG;\n}\n\nvec3 diff(vec3 nml, vec3 lit, vec3 col){return max(dot(nml,lit)*col,0.);}\nfloat shad(vec3 pos, vec3 lit){float s=V.z,t=.05,d;for(int i=20;i!=0;--i){t+=max(d=map(pos+lit*t),.05);s=min(s,d/t);if(t>20.)break;}return clamp(s*.2,0.,1.);}\nfloat occl(vec3 pos, vec3 nml){float s=0.;for(float t=.01;t<.8;t+=.05){s+=t-map(pos+nml*t);}return clamp(1.-s*.1,0.,1.);}\n\nvec3 trace(inout vec3 pos, inout vec3 dir, inout float bld) {\n    float t = 0., d;\n    for (int i=80; i!=0; --i) {\n        t += (d = map(pos + dir * t));\n        if (d < V.y) break;\n        if (t > V.z) return bld * background(pos, dir, bld);\n    }\n    vec3 p = pos + dir * t;\n    vec3 n = normalize(vec3(map(p+V.yxx),map(p+V.xyx),map(p+V.xxy))-map(p));\n    vec3 c = vec3(1);\n    vec3 ldir = normalize(vec3(sin(tick/4.*PI.z)*5.+16.,10.,-15.) - p);\n    vec3 lcol = diff(n, ldir, vec3(10)) * shad(p, ldir) * occl(p, n) + Amb;\n    vec3 ldir2 = normalize(vec3(-5.,10.,15.) - p);\n    vec3 lcol2 = diff(n, ldir2, vec3(10)) * shad(p, ldir2) * occl(p, n) + Amb;\n    vec3 col = c * (lcol + lcol2);\n    float b=bld*.2;\n    pos = p + n*V.y;\n    dir = reflect(dir, n);\n    bld *= .8;\n    return mix(col, BG, clamp((length(p.xz)-1.)/16.,0.,1.))*b;\n}\n\nvec3 render(in vec3 pos, in vec3 dir) {\n    float b = 1.;\n    vec3 col = trace(pos, dir, b);\n    if (b > V.y) col += trace(pos, dir, b);\n    if (b > V.y) col += trace(pos, dir, b);\n    return col;\n}\n\nvec4 entryPoint(vec2 fragCoord) {\n    uv = (fragCoord * 2.-resolution) / resolution.y;\n    tick = time * BPM / 60.;\n\n    float scan = 1., dist = 0.;\n    vec3 pos = vec3(70.,70.,70.);\n    if (iMouse.z > .5) {\n        scan = (mod(fragCoord.y, 2.)+1.) * (1.-length(uv)*.3);\n        dist += (.0003/(uv.y+fract(tick/16.)*2.-1.));\n        vec2 r = iMouse.xy/iResolution.xy*2.-1.;\n        pos = vec3(70.+r.x*120.,70.-r.y*45.,70.-r.x*120.);\n    }\n    vec3 dir = camera(pos, vec3(2,0,2), vec3(0,1,0)) * normalize(vec3(uv+vec2(dist,0),-30));\n    return gamna(render(pos, dir)) * scan;\n}\n\nvoid mainImage(out vec4 flagColor,in vec2 flagCoord) {\n    resolution = iResolution.xy;\n    time = iTime;\n    mouse = iMouse.xy;\n    flagColor = entryPoint(flagCoord);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}