{
    "Shader": {
        "info": {
            "date": "1692522794",
            "description": "A simple 2D curve plotter based on a curve equation. Uses pixel derivatives to make a curve of uniform width.",
            "flags": 0,
            "hasliked": 0,
            "id": "mlXBRr",
            "likes": 12,
            "name": "2D curve plotter",
            "published": 3,
            "tags": [
                "curve",
                "function",
                "plot"
            ],
            "usePreview": 0,
            "username": "lisyarus",
            "viewed": 485
        },
        "renderpass": [
            {
                "code": "float f(float x, float y)\n{\n    // Circle\n    // return x * x + y * y - 1.0;\n    \n    // Hyperbola\n    // return x * x - y * y - 1.0;\n    \n    // Cut parabola\n    // return (x < sqrt(1.5)) ? y - x * x : y - 1.5;\n    \n    // Cubic\n    // return x * x * x - 2.0 * x - y;\n    \n    // Witch of Agnesi\n    // return (x * x + 1.0) * y - 1.0;\n    \n    // Three-leaved clover\n    return x * x * x * x + 2.0 * x * x * y * y + y * y * y * y - x * x * x + 3.0 * x * y * y;\n    \n    // Butterfly curve\n    // return pow(abs(x), 6.0) + pow(abs(y), 6.0) - x * x;\n    \n    // Sine\n    // return sin(x) - y;\n}\n\nfloat max2(vec2 v)\n{\n    return max(v.x, v.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // const float scale = 100.0;\n    float scale = max2(abs(iMouse.xy - iResolution.xy * 0.5)) * 0.5;\n    vec2 p = (fragCoord - iResolution.xy * 0.5) / scale;\n    \n    float value = f(p.x, p.y);\n    \n    vec2 grad = vec2(dFdx(value), dFdy(value));\n    \n    float plot_alpha = smoothstep(1.5 * length(grad), 0.0, abs(value));\n    \n    vec2 pm = mod(p, vec2(1.0));\n    float grid_alpha = smoothstep(1.0 / scale, 0.0, min(min(pm.x, 1.0 - pm.x), min(pm.y, 1.0 - pm.y)));\n    \n    float x_axis_alpha = smoothstep(1.0 / scale, 0.0, abs(p.y));\n    float y_axis_alpha = smoothstep(1.0 / scale, 0.0, abs(p.x));\n        \n    vec3 color = vec3(1.0);\n   \n    color = mix(color, vec3(0.8), grid_alpha);\n    color = mix(color, vec3(1.0, 0.0, 0.0), x_axis_alpha);\n    color = mix(color, vec3(0.0, 0.0, 1.0), y_axis_alpha);\n    color = mix(color, vec3(0.0), plot_alpha);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}