{
    "Shader": {
        "info": {
            "date": "1662784952",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "flcBz7",
            "likes": 12,
            "name": "Fractal mosaic 13",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 471
        },
        "renderpass": [
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\n\nvec2 f1(vec2 a){\n    return\n        fract(a)\n        //fract(a-floor(a.y*2.)/2.)\n    ;\n}\n\n\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,.5)\n        //vec2(1.5,0.)\n        //vec2(0.,2.)\n    ,\n    \n    a1 = a+a2;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    //a1 += (distance(floor(a1),round(a1)))/1.5;\n\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n        //abs(abs(f1((a1)*(a2.x+a2.y))-.5)+.125)/1.125\n    ;\n}\n\nconst float scale = 1.5;\n\nvoid transform(inout vec2 uv, inout vec2 t2){\n        uv = (uv+t2)/scale;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*1.5)-.5)/1.5;\n        //uv += (distance(floor(uv),round(uv+.5)));\n\n        //uv *= sign(uv1-uv1.yx);\n        //uv *= sign(uv-uv.yx);\n        \n        //if(uv.y>uv.x) uv = uv.yx;\n        t2 =\n            triangle_wave(uv+.5)\n            //triangle_wave(uv+.5*sign(uv.x-.5))\n            //triangle_wave(uv+.5)*sign(.5-uv.x)\n        ;\n        \n        //uv += floor(uv.y-uv.x);\n        uv = t2-triangle_wave(uv.yx);\n        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 16.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.x += iTime/t1/12.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    \n    vec2 t2 = vec2(0.);\n    for(int k = 0; k < 12; k++){\n        //uv += pow(floor(uv.x*2.),3.)/2.;\n\n        const float warp_scale = 16.;\n\n        //uv.x -= floor(uv.y*1.5)/1.5;\n        //uv += floor(uv+vec2(1.,.5))/1.5;\n        \n        //if(uv.x>uv.y)\n        \n        vec2 warp =\n            vec2(0)\n            //vec2(sin((t2.x)*warp_scale),cos((t2.y)*warp_scale))\n            //vec2(sin((uv.x)*warp_scale),cos((uv.y)*warp_scale))\n        ;\n        warp = warp*warp/warp_scale;\n        \n        vec2 uv_1 = uv+warp;\n        vec2 t2_1 = t2+warp;\n        \n        transform(uv,t2);\n        transform(uv_1,t2_1);\n        \n        //uv.x += sign(uv.y-uv.x-.5)+.5;\n        \n        //another really interesting pattern\n        //uv.x +=\n            //floor(uv1.x)/1.5\n            //.5\n        //;\n        \n        //uv += dot(uv,uv); //makes another interesting pattern\n        col.x =\n            max(max(abs(t2_1.y-t2_1.x),abs(uv_1.y-uv_1.x))/3.,col.x)\n            //max(abs(uv.y+uv.x*sign(t2.y-t2.x))/3.,col.x)\n            //max(max(fract(t2.y-t2.x+.5),fract(uv.y-uv.x+.5))/3.,col.x)\n            //max(max(abs(t2.y-t2.x),abs(uv.y*sign(uv.x)-uv.x))/3.,col.x)\n        ;\n        col =\n            abs(col-(1.-col.x));\n            max(abs(col-(1.-col.x)),col/4.);\n            \n            //abs(col*col.yzx-(1.-col.x));\n        //{uv=uv.yx;t2=t2.yx;}\n        //if(uv.x>uv.y) uv.y += .5;\n\n        //if(t2.y>t2.x) t2.y *= .5;\n        //else uv.y *= 1.5;\n    }\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod2(float a, float b){\n    return mod(floor(a/b),b)*b;\n}\n\nfloat mod1(float a, float b){\n    return\n        mod(a,b)\n        //mod(a+floor(a/8./8.),b)\n        //mod(a-mod(a,3.-mod(a,2.)),b)\n    ;\n}\n\nfloat fmod1(float a, float b){\n    //a += fmod2(a/4.,4.);\n    for(float i = 1.; i < 8.; i++){\n        //a += floor(pow(2.,b));\n        if(i < mod(floor(a),8.))\n        a +=\n            mod1(floor(a/2.),b)*i\n            //floor(mod(floor(a)/2.,b)*i)\n        ;\n        \n        //a += mod(floor(a/2.),b)*i;\n    }\n    /*\n    for(int i = 0; i < 3; i++){\n        a += floor(a/64.)*4.;\n    }\n    */\n    return\n        mod1(floor(a),b)\n        //mod1(floor(a+floor(a/8./8.)),b)\n        //mod(mod(floor(a)+4.,floor(a/4.)+4.),b)\n        //mod(floor(a+floor(a/b/8.)),b)\n        //mod(floor(a)/b*8.,b)\n        //mod(floor(a/b+b*2.)*floor(a),b)\n        //mod(floor(a*sign(.5-mod(floor(a/b/16.),2.))),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod1(a,b)\n        //fmod1(a/2.+fmod1(a,b*b),b/2.)*fmod1(a,b/2.)\n        //fmod1(a+fmod1(a/8.,8.*8.*b),b)\n    ;\n}\n\n\nvec2 mainSound1(int samp, float time,float scale){\n  float tempo = 1.;\n  time /= tempo;\n  float s1 =\n      8.;\n  float s2 = 8.,\n  t=\n      time*2.\n  ,\n  m1 =\n      fmod(t*4.,s2)\n  ,\n  m3 =\n      (fmod(m1,abs(s2*2.-m1)+1.)-m1),\n  m4= (1.+fmod(t/s1,2.))\n  ;\n  //t /= (1.+fmod((t/s1+floor(t/s1/s1))/2.,2.));\n  t *=\n      m4\n  ;\n  //t += m3;\n  float m2 =\n      1. + fmod(t,s1)\n  ;\n  float a=\n      //64.*(1.-sqrt(fract(t)/1.25))*.2\n      //(1.-log(fract(t)))*(1.-log(fract(t)))\n      (1.-log(fract(t)/2.))*(1.-log(fract(t/2.)))\n      //(1.-log(fract(t)))*(2.-log(fract(t*2.)))\n      //(1.-log(fract(t)))*(2.-log(fract(t/8.)))\n      //8.*(2.-sqrt(fract(t)))\n      //16.*(1.-log(fract(t)))\n  ,\n  nb = time*tempo*pow(2.,floor((m3+m2)/2.)/5.+scale);\n  return\n      abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      \n      //voice synth?\n      //log(abs(a/32.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))/2.\n      \n      //abs(1.+log(abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a))/2.\n  ;\n}\n\nvec2 mainSound(int a,float b){\n    return mainSound1(a,b,6.5);\n    //return (mainSound1(a,b,7.5)+mainSound1(a*2,b*2.,7.5))/4.;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}