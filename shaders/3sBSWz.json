{
    "Shader": {
        "info": {
            "date": "1553348591",
            "description": "blah",
            "flags": 0,
            "hasliked": 0,
            "id": "3sBSWz",
            "likes": 0,
            "name": "Julia Slideshow",
            "published": 3,
            "tags": [
                "mandelbrotjulia"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "#define pi 3.1415927\n#define phi 1.618033\n\n//#define BLACKFILL\n#ifdef BLACKFILL\n#define ITER 2048.\n#else\n#define ITER 256.\n#endif\n\nstruct CompNumber {\n    float x;\n    float y;\n};\n    \n   \t/*\ni, i, -1\ni, -1, -i  -1, i, -i\ni, -i, 1   -1, -1, 1    -i, i, 1\ni, 1, i    -1, -i, i    -i, -1, i     1, i, i\n           -1, 1, -1    -i, -i, -1    1, -1, -1\n                        -i, 1, -i     1, -i, -i\n                                      1, 1, 1\n\t*/\n    \n/*int bmodemult(int m1, int m2) {\n\tint index = (m1-1)*4+(m2-1);\n    int[] prod = int[] (2, 3, 4, 1, 3, 4, 1, 2, 4, 1, 2, 3, 1, 2, 3, 4);\n    return prod[index];\n}*/\n\nstruct inta {\n    int[13] a;\n    int l;\n};\n    \ninta[] pt = inta[] (\n    inta (int[](1, 0,  0,  0,   0,   0,   0,   0,   0,   0,   0,  0,  0), 1),\n    inta (int[](1, 1,  0,  0,   0,   0,   0,   0,   0,   0,   0,  0,  0), 2),\n    inta (int[](1, 2,  1,  0,   0,   0,   0,   0,   0,   0,   0,  0,  0), 3),\n    inta (int[](1, 3,  3,  1,   0,   0,   0,   0,   0,   0,   0,  0,  0), 4),\n    inta (int[](1, 4,  6,  4,   1,   0,   0,   0,   0,   0,   0,  0,  0), 5),\n    inta (int[](1, 5,  10, 10,  5,   1,   0,   0,   0,   0,   0,  0,  0), 6),\n    inta (int[](1, 6,  15, 20,  15,  6,   1,   0,   0,   0,   0,  0,  0), 7),\n    inta (int[](1, 7,  21, 35,  35,  21,  7,   1,   0,   0,   0,  0,  0), 8),\n    inta (int[](1, 8,  28, 56,  70,  56,  28,  8,   1,   0,   0,  0,  0), 9),\n    inta (int[](1, 9,  36, 84,  126, 126, 84,  36,  9,   1,   0,  0,  0), 10),\n    inta (int[](1, 10, 45, 120, 210, 252, 210, 120, 45,  10,  1,  0,  0), 11),\n    inta (int[](1, 11, 55, 165, 330, 462, 462, 330, 165, 55,  11, 1,  0), 12),\n    inta (int[](1, 12, 66, 220, 495, 792, 924, 792, 495, 220, 66, 12, 1), 13)\n);\n//z^n + c\n    /*\nCompNumber createFractalN(CompNumber z, CompNumber c) {\n    float a = z.x*z.x; float b = z.y*z.y;\n    float ab = a-b;\n    CompNumber abb = CompNumber(ab, 2.*z.x*z.y);\n    CompNumber newcm = CompNumber(abb.x+c.x, abb.y+c.y);\n    return newcm;\n                                  \n}*/\n\n#define createFractal createFractal2\n\n//z^2 + c\n    \nCompNumber createFractal2(CompNumber z, CompNumber c) {\n    float a = z.x*z.x; float b = z.y*z.y;\n    float ab = a-b;\n    CompNumber abb = CompNumber(ab, 2.*z.x*z.y);\n    CompNumber newcm = CompNumber(abb.x+c.x, abb.y+c.y);\n    return newcm;\n                                  \n}\n\n\n//z^3 + c\n    \nCompNumber createFractal3(CompNumber z, CompNumber c) {\n    float a = z.x*z.x*z.x; float b = z.y*z.y;\n    float tab = 3.*z.x*z.y;\n    \n    float abx = a-tab*z.y;\n    CompNumber abb = CompNumber(abx, tab-z.y*z.y*z.y);\n    CompNumber newcm = CompNumber(abb.x-c.x, abb.y-c.y);\n    return newcm;\n                                  \n}\n    \n//z^4+c\nCompNumber createFractal4(CompNumber z, CompNumber c) {\n    float a = z.x*z.x; float b = z.y*z.y;\n    float ab = z.x*z.y;\n    float ax = a*a-6.*a*b+b*b;\n    float ay = 4.*(a*ab+b*ab);\n    CompNumber abb = CompNumber(ax, ay);\n    CompNumber newcm = CompNumber(abb.x+c.x, abb.y+c.y);\n    return newcm;\n                                  \n} \n\n\n    //z^6+c\n    \nCompNumber createFractal6(CompNumber z, CompNumber c) {\n    float a = z.x*z.x; float b = z.y*z.y;\n    float ab = z.x*z.y;\n    float ax = a*a*a + 15.*(a*b*b - a*a*b) - b*b*b;\n    float ay = 6.*(ab*a*a+ab*b*b)-20.*ab*a*b;\n    CompNumber abb = CompNumber(ax, ay);\n    CompNumber newcm = CompNumber(abb.x+c.x, abb.y+c.y);\n    return newcm;\n                                  \n}\n\n    //z^8+c\nCompNumber createFractal8(CompNumber z, CompNumber c) {\n    float a = z.x*z.x; float b = z.y*z.y;\n    float aa = a*a; float bb = b*b;\n    float ab = z.x*z.y;\n    float ax = aa*aa + bb*bb - 28.*(a*aa*b+a*bb*b) + 70.*aa*bb;\n    float ay = 8.*(aa*a*ab-bb*b*ab)+ 56.*(ab*a*bb-ab*aa*b);\n    CompNumber abb = CompNumber(ax, ay);\n    CompNumber newcm = CompNumber(abb.x+c.x, abb.y+c.y);\n    return newcm;\n                                  \n}\n\nvec3 hsv2rgb(float h_, float s, float v) {\n    float h = mod(h_, 360.);\n    float c = v * s;\n    float hp = h/60.;\n    float x = c*(1.-abs(mod(hp, 2.)-1.));\n    vec3 rgb1 = vec3(0.);\n    vec3 swiz = vec3(c, x, 0.);\n    if(hp >= 0. && hp < 1.) rgb1 = swiz.xyz;\n    if(hp >= 1. && hp < 2.) rgb1 = swiz.yxz;\n    if(hp >= 2. && hp < 3.) rgb1 = swiz.zxy;\n    if(hp >= 3. && hp < 4.) rgb1 = swiz.zyx;\n    if(hp >= 4. && hp < 5.) rgb1 = swiz.yzx;\n    if(hp >= 5. && hp < 6.) rgb1 = swiz.xzy;\n    float m = v-c;\n    return vec3(rgb1.x+m, rgb1.y+m, rgb1.z+m);\n}\n\nfloat easeInOut(float x_) {\n    float x = min(x_, 1.);\n    if(x <= 0.5) {\n        return 2.*x*x;\n    }\n    return x*(4.-2.*x)-1.;\n}\n\nCompNumber juliaSlideShow(float secpslide, vec2 uv) {\n    int leng = 14;\n    \n    CompNumber[] julias = CompNumber[] (\n        CompNumber(0., 0.),\n        CompNumber(0.4,0.6),\n        CompNumber(0.285, 0.),\n        CompNumber(0.285, 0.01),\n        CompNumber(0.45, 0.1428),\n        CompNumber(-0.70176, -0.3842),\n        CompNumber(-0.835, -0.2321),\n        CompNumber(-0.8, 0.156),\n        CompNumber(-0.7269, 0.1889),\n        CompNumber(0., -0.8),\n        CompNumber(0.1, 0.651),\n        CompNumber(-0.74543, 0.11301),\n        CompNumber(1.-phi,0.),\n        CompNumber(uv.x, uv.y),\n        CompNumber(uv.x, uv.y)\n    );\n\t\n    \n    CompNumber[] juliasx = CompNumber[] (\n        CompNumber(-0.8+sin(iTime)/50., 0.156+cos(iTime)/50.)//,\n        //CompNumber(uv.x, uv.y)\n        //CompNumber(-0.835+sin(iTime)/50., -0.2321+cos(iTime)/50.)\n    );\n    float jTime = mod(iTime, secpslide*float(leng));\n    //float jTime = iTime;\n    for(int i = 1; i < leng+1; i++) {\n        if(jTime < secpslide*float(i)) {\n            float selTime = jTime - secpslide*float(i-1);\n            CompNumber transC = CompNumber(\n                mix(julias[i-1].x,julias[i].x,easeInOut(selTime/2.)),\n                mix(julias[i-1].y,julias[i].y,easeInOut(selTime/2.))\n            );\n            return transC;\n            break;\n        }\n        //i = int(mod(float(i-1), float(leng)))+1;\n    }\n    \n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = -1.0+2.0*uv;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= phi;\n    \n    float i = 0.;\n    CompNumber startNum = juliaSlideShow(3., uv);\n    CompNumber currentNumber = CompNumber(uv.x, uv.y);\n    \n    while(i <= ITER) {\n   \t\tcurrentNumber = createFractal(currentNumber, startNum);\n        float dist = currentNumber.x+currentNumber.y;\n        if(abs(dist) < 10.) {\n            fragColor = vec4(hsv2rgb(i/ITER*360./32.+iTime*10., 1., i/32.), 1.);\n            //fragColor = vec4(i/64.);\n            #ifdef BLACKFILL\n            if(i > ITER-1.) fragColor = vec4(0.);\n            #endif\n        }\n        i += 1.;\n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}