{
    "Shader": {
        "info": {
            "date": "1724824498",
            "description": "originals https://www.shadertoy.com/view/lcBfWR https://www.shadertoy.com/view/lcjyDR",
            "flags": 1,
            "hasliked": 0,
            "id": "lcjfWR",
            "likes": 2,
            "name": "flower of cosmos",
            "published": 3,
            "tags": [
                "galaxy",
                "stars",
                "cosmos"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 74
        },
        "renderpass": [
            {
                "code": "\n#define pi 3.1415926\n#define tau (pi+pi)\n\nfloat bounce(float t) // [0,1]\n{\n    return 1.0 - 2.0 * abs(t - floor(t) - 0.5);\n}\n\n#define S (sqrt(3.0)/2.0)\n// scale 2x2 square so it fits two squares and 4 triangles\n#define H (1.0+S)\n\n#define iterations 11\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(1., 10.233))) * 40000.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\nfloat invs(float y) {\n    return 0.5 - sin(asin(1.0-2.0*y)/3.0);\n}\n\nfloat isBetween(float a, float b, float c) {\n    //float k = 3. / iResolution.y;\n    return smoothstep(-0.5, 0., -mod(c-a, 2. * pi) + mod(b-a - 0.1 * pi, 2. * pi));\n   //return exp( -1. * (abs(-mod(c-a, 2. * pi) + mod(b-a, 2. * pi))) );\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.3-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nfloat ellipse(vec2 uv, vec2 p, vec2 q, float i) {\n    float quadTest = 0.5 * (sign(q.x - p.x) * sign(q.y - p.y) + 1.);\n    i = 1.-quadTest;\n\n    // center point\n    vec2 c = (i == 1.) ? vec2(p.x, q.y)\n                       : vec2(q.x, p.y);\n\n    // axis distances between points\n    float x = abs(q.x - p.x), y = abs(q.y - p.y);\n\n    // ellipses (asymptotes when x==0 or y==0, annoying)\n    //float d = (i == 1.) ? length((uv - c) * vec2(y/x,1)) - y\n    //                    : length((uv - c) * vec2(1,x/y)) - x;\n\n    float d = sdEllipse(uv - c, vec2(x, y));\n\n    // (make this smoothstep or exp)\n    // float s = smoothstep(-0.02, 0.02, -abs(d) + 0.01);\n    float k = 1. / iResolution.y;\n    float s = smoothstep(-k, k, -abs(d) + 0.006);\n    s = exp(-100. * abs(d));\n    // a, b angles from center to points\n    // c angle from center to uv\n    float a1 = atan(p.x-c.x, p.y-c.y);\n    float a2 = atan(q.x-c.x, q.y-c.y); // move b from a-> b to \"draw\" thing\n    float b = atan(uv.x-c.x, uv.y-c.y);\n    \n    // flip clockwise <-> anticlockwise across diagonal quads\n    // float quadTest = 0.5 * (sign(q.x - p.x) * sign(q.y - p.y) + 1.);\n    \n    // cut out a1,a2 segment of ellipse\n    float as = isBetween(a1, a2, b);\n    return s;// * mix(as, 1. - as, quadTest);\n}\nvec3 striped_triangle_square_tiling(vec2 p)\n{\n    p.y /= H;\n    float d = floor(p.y);\n    p.y = fract(p.y);\n    p.x = fract(p.x/2.0)*2.0;\n    if(p.y*H > S) // square\n        return fract(p.x/2.0+d/4.0+0.25)*2.0 < 1.0 ? vec3(1,0,0) : vec3(0,1,0);\n    return bounce(p.x+d*0.5) > p.y*(1.0 + 1.0/S) ? vec3(0,0,1) : vec3(1,1,0);\n}\n\nvec2 polar(float mu)\n{\n    return vec2(cos(mu), sin(mu));\n}\n\nvec3 dodecagon_triangle_square_tiling(vec2 p)\n{\n    bool flip = fract(atan(p.y, p.x)/tau*6.0-0.25) < 0.5;\n\n    if(!flip)\n    {\n        vec2 q = polar((fract(0.5+atan(p.y, p.x)/tau*6.0)+1.0)*tau/6.0)*length(p);\n\n        //vec2 a = vec2(0.5, H)*0.535; // XXX guessed constant - verify XXX\n        vec2 a = vec2(0.5, H)*(4.0 - 2.0*sqrt(3.0)); // XXX guessed constant - verify XXX\n        //vec2 b = vec2(-a.y,a.x)*1.05; // XXX guessed constant - verify XXX\n        vec2 b = vec2(-a.y,a.x)*(sqrt(3.0)+sqrt(2.0))/3.0; // XXX guessed constant - verify XXX\n        float s = (2.0 - S)/4.0;\n        bool wave = bounce(dot(a,abs(q))/2.0+1.0)*s < dot(b,abs(q));\n        q.y -= 1.0;\n\n        if(wave) return striped_triangle_square_tiling(q);\n        //return vec3(0);\n    }\n\n    vec2 q = polar((fract(atan(p.y, p.x)/tau*6.0)+1.0)*tau/6.0)*length(p);\n\n    return striped_triangle_square_tiling(q);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n\tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n\n vec2 R = iResolution.xy;\n                 vec2 I = fragCoord;\n    I = (2. * I - R) / R.y; // thanks to Fabrice\n    I *= 2.0 * H; // zoom out\n  \t\t\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\tvec3 c23 = dodecagon_triangle_square_tiling(I);\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv, 0.0);\n\t\tp.xy*=ma;\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1)*c23;\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.7, .0, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.9, .0, len);\n\t\n\tvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.)*c23;\n\tfloat time=iTime*speed+.25;\n\n    uv *= 1.1 + 0.15 * cos(uv.y - 0.6 * iTime);\n    uv.y += 0.02 * cos(iTime);\n    \n    // points\n    vec2 p = 0.1 * vec2(cos(0.913 * iTime), sin(iTime));\n    vec2 q = 0.2 * vec2(cos(0.81 * iTime), sin(0.73 * iTime));\n\n    // should look bad if time gets too high\n    float t3 = 10. * iTime + 8. * h21(uv) + 15. *exp(-0.01 * length(uv)) * (650. + iTime);\n    int f = int(floor(t3)); \n    \n    float d = 10.;\n    float s3 = 0.;\n    vec2 pp = vec2(0.);\n    \n    vec3 e = vec3(1);\n    vec3 col3 = vec3(0);\n    \n    float n = 20.;\n    for (float i = 0.; i <= n; i++) {\n        float f2 = 0.0001 * float(f);\n        float f3 = 0.0001 * float(f + 1);\n\n        vec2 qp = pp;\n             \n        pp = vec2( h21(vec2(f2)), h21(vec2(0.01 + f2)) );\n        pp = pow(4. * pp * (1.-pp), vec2(4));\n\n        vec2 pp2 = vec2( h21(vec2(f3)), h21(vec2(0.01 + f3)) );\n        float fr = fract(t);\n        fr = smoothstep(0., 1., fr); //idk if this changes anything\n        pp = mix(pp, pp2, fr); // looks cool if you remove this too\n        pp = 0.3 * (pp - 0.5);\n        f++;\n        //if(i>0.) d = length(uv-pp);sdSegment(uv, pp, qp);\n        //s += exp(-40. * d);\n        float s2;\n        if (i > 0.) s2 = ellipse(uv, pp, qp, 0.);//mod(i, 2.));\n        s = clamp(s + s2, 0., 1.);\n        vec3 col2 = pal(i/n, e, e, e, (i/n) * vec3(0,1,2)/3.);\n        col3 = mix(col3, col2, s2);\n    }\n    \n    col3 += 0.03*c23;\n    col3 += 0.35 * exp(-3. *length(uv));\n\t\n\tvec3 from=vec3(1.,.5,0.5);\n\n\n\n    \tmainVR(fragColor, fragCoord, from, dir);\n        \tfragColor*=vec4(min(pow(abs(col)+col3, vec3(1.2)), 1.0), 1.0);\n              \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}