{
    "Shader": {
        "info": {
            "date": "1475512936",
            "description": "watercolor effect.\nbasic principle: blurring strokes perpendicular to gradient, colors parallel.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ltyGRV",
            "likes": 142,
            "name": "watercolor",
            "published": 3,
            "tags": [
                "effect",
                "watercolor"
            ],
            "usePreview": 1,
            "username": "flockaroo",
            "viewed": 12320
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// trying to resemble watercolors\n\n#define Res  iResolution.xy\n#define Res0 iChannelResolution[0].xy\n#define Res1 iChannelResolution[1].xy\n\n#define PI 3.14159265358979\n\nvec4 getCol(vec2 pos)\n{\n    vec2 uv=pos/Res0;\n    vec4 c1 = texture(iChannel0,uv);\n    vec4 c2 = vec4(.4); // gray on greenscreen\n    float d = clamp(dot(c1.xyz,vec3(-0.5,1.0,-0.5)),0.0,1.0);\n    return mix(c1,c2,1.8*d);\n}\n\nvec4 getCol2(vec2 pos)\n{\n    vec2 uv=pos/Res0;\n    vec4 c1 = texture(iChannel0,uv);\n    vec4 c2 = vec4(1.5); // bright white on greenscreen\n    float d = clamp(dot(c1.xyz,vec3(-0.5,1.0,-0.5)),0.0,1.0);\n    return mix(c1,c2,1.8*d);\n}\n\nvec2 getGrad(vec2 pos,float delta)\n{\n    vec2 d=vec2(delta,0);\n    return vec2(\n        dot((getCol(pos+d.xy)-getCol(pos-d.xy)).xyz,vec3(.333)),\n        dot((getCol(pos+d.yx)-getCol(pos-d.yx)).xyz,vec3(.333))\n    )/delta;\n}\n\nvec2 getGrad2(vec2 pos,float delta)\n{\n    vec2 d=vec2(delta,0);\n    return vec2(\n        dot((getCol2(pos+d.xy)-getCol2(pos-d.xy)).xyz,vec3(.333)),\n        dot((getCol2(pos+d.yx)-getCol2(pos-d.yx)).xyz,vec3(.333))\n    )/delta;\n}\n\nvec4 getRand(vec2 pos) \n{\n    vec2 uv=pos/Res1;\n    return texture(iChannel1,uv);\n}\n\nfloat htPattern(vec2 pos)\n{\n    float p;\n    float r=getRand(pos*.4/.7*1.).x;\n  \tp=clamp((pow(r+.3,2.)-.45),0.,1.);\n    return p;\n}\n\nfloat getVal(vec2 pos, float level)\n{\n    return length(getCol(pos).xyz)+0.0001*length(pos-0.5*Res0);\n    return dot(getCol(pos).xyz,vec3(.333));\n}\n    \nvec4 getBWDist(vec2 pos)\n{\n    return vec4(smoothstep(.9,1.1,getVal(pos,0.)*.9+htPattern(pos*.7)));\n}\n\n#define SampNum 24\n\n#define N(a) (a.yx*vec2(1,-1))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos=((fragCoord-Res.xy*.5)/Res.y*Res0.y)+Res0.xy*.5;\n    vec2 pos2=pos;\n    vec2 pos3=pos;\n    vec2 pos4=pos;\n    vec2 pos0=pos;\n    vec3 col=vec3(0);\n    vec3 col2=vec3(0);\n    float cnt=0.0;\n    float cnt2=0.;\n    for(int i=0;i<1*SampNum;i++)\n    {   \n        // gradient for outlines (gray on green screen)\n        vec2 gr =getGrad(pos, 2.0)+.0001*(getRand(pos ).xy-.5);\n        vec2 gr2=getGrad(pos2,2.0)+.0001*(getRand(pos2).xy-.5);\n        \n        // gradient for wash effect (white on green screen)\n        vec2 gr3=getGrad2(pos3,2.0)+.0001*(getRand(pos3).xy-.5);\n        vec2 gr4=getGrad2(pos4,2.0)+.0001*(getRand(pos4).xy-.5);\n        \n        float grl=clamp(10.*length(gr),0.,1.);\n        float gr2l=clamp(10.*length(gr2),0.,1.);\n\n        // outlines:\n        // stroke perpendicular to gradient\n        pos +=.8 *normalize(N(gr));\n        pos2-=.8 *normalize(N(gr2));\n        float fact=1.-float(i)/float(SampNum);\n        col+=fact*mix(vec3(1.2),getBWDist(pos).xyz*2.,grl);\n        col+=fact*mix(vec3(1.2),getBWDist(pos2).xyz*2.,gr2l);\n        \n        // colors + wash effect on gradients:\n        // color gets lost from dark areas\n        pos3+=.25*normalize(gr3)+.5*(getRand(pos0*.07).xy-.5);\n        // to bright areas\n        pos4-=.5 *normalize(gr4)+.5*(getRand(pos0*.07).xy-.5);\n        \n        float f1=3.*fact;\n        float f2=4.*(.7-fact); \n        col2+=f1*(getCol2(pos3).xyz+.25+.4*getRand(pos3*1.).xyz);\n        col2+=f2*(getCol2(pos4).xyz+.25+.4*getRand(pos4*1.).xyz);\n        \n        cnt2+=f1+f2;\n        cnt+=fact;\n    }\n    // normalize\n    col/=cnt*2.5;\n    col2/=cnt2*1.65;\n    \n    // outline + color\n    col = clamp(clamp(col*.9+.1,0.,1.)*col2,0.,1.);\n    // paper color and grain\n    col = col*vec3(.93,0.93,0.85)\n        *mix(texture(iChannel2,fragCoord.xy/iResolution.xy).xyz,vec3(1.2),.7)\n        +.15*getRand(pos0*2.5).x;\n    // vignetting\n    float r = length((fragCoord-iResolution.xy*.5)/iResolution.x);\n    float vign = 1.-r*r*r*r;\n    \n\tfragColor = vec4(col*vign,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}