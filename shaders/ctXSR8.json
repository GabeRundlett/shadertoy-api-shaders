{
    "Shader": {
        "info": {
            "date": "1674294430",
            "description": "[ restart if texture not there ]\nbutterfly sort is one of the most efficient in parallelism ( log²(n)  step to sort n numbers )\nsee p113 [url]https://airccse.org/journal/ijdps/papers/3612ijdps09.pdf[/url]\nColor sort variant: see header.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "ctXSR8",
            "likes": 19,
            "name": "butterfly parallel sort  3",
            "published": 3,
            "tags": [
                "sorting",
                "short",
                "histogram",
                "parallel"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 363
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    O = T(u);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// cf https://www.academia.edu/77537224/Parallel_butterfly_sorting_algorithm_on_GPU\n// color sort: switch #inf line 6  and  del .rrr line 11\n\n#define tex(i)   ivec2( (i) % n , (i) / n )\n#define inf(A,B) ( (A).x < (B).x )\n//#define inf(A,B) (  A.x == B.x ? A.y == B.y ? A.z == B.z ? A.w < B.w : A.z < B.z : A.y < B.y : A.x < B.x  )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy;\n    if ( iFrame < 1 ) { O = textureSize(iChannel1,0).x > 1 // init array\n                            ? texture(iChannel1, u/R ).rrrr\n                            : vec4(fract(1e4*sin(dot(u,R-17.)))); // fallback if texture not loaded\n                        return; }                     \n    O = T(u);                                         // last state \n    R = exp2(floor(log2(R))); \n    if ( u.x > R.x || u.y > R.y ) return;             // power-of-2 image only\n    int m = int(log2(R.x*R.y));\n    if ( iFrame >= ((m+1)*(m+2))/2 ) return;          // sort finished\n // if ( iFrame > n ) return;                         // min-max finished\n    \n    ivec2 I = ivec2(u);\n    int n = int(R.x), \n        i = I.x+ n*I.y,                               // 2D → linear index\n#if 0                                                 // min-max butterfly:\n        f = iFrame,\n#else                                                 // full butterfly:\n        F = iFrame, \n        t = int(.5+.5*sqrt(float(1+8*F))),            // build t = 1  2    3      4\n        f = (t*(t+1))/2 - F,                          //       f = 1, 2 1, 3 2 1, 4 3 2 1\n#endif\n        d = 1<<f,                                     // butterfly span\n        l = t==f ?  (d/2)-1 - 2*(i%(d/2))  :          // phase1. get twin side (i.e. offset to other) in the span \n            i%d < d/2 ? d/2 : -d/2;                   // phase2\n\n    vec4 T = T( tex(i + l) );                         // twin value to compare with\n    if ( inf(O,T) != l > 0 ) O = T;                   // if ill sorted, swap\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}