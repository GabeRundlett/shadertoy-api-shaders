{
    "Shader": {
        "info": {
            "date": "1587670647",
            "description": "Slicing through a 4-dimensional cubic lattice.",
            "flags": 16,
            "hasliked": 0,
            "id": "WdXBzH",
            "likes": 5,
            "name": "4D Lattice Slice",
            "published": 3,
            "tags": [
                "4d",
                "slice",
                "lattice"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 390
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// 4D Lattice Slice\n//\n// Matthew Arcus, mla, 2020\n//\n// Slices through a 4 dimensional cubic lattice.\n// <mouse x>: slice angle\n// <mouse-y>: scale\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.1415927;\n\nmat4 qmat_left(vec4 q) {\n  float x = q.x, y = q.y, z = q.z, t = q.w;\n  return mat4( t, z,-y,-x, \n              -z, t, x,-y,\n               y,-x, t,-z,\n               x, y, z, t );\n}\n\nmat4 qmat_right(vec4 q) {\n  float x = q.x, y = q.y, z = q.z, t = q.w;\n  return mat4( t,-z, y,-x, \n               z, t,-x,-y,\n              -y, x, t,-z,\n               x, y, z, t );\n}\n\nvec4 qmul(vec4 p, vec4 q) {\n  vec3 P = p.xyz, Q = q.xyz;\n  return vec4(p.w*Q+q.w*P+cross(P,Q),p.w*q.w-dot(P,Q));\n}\n\nvec4 qrot(vec4 p, vec4 q, vec4 r) {\n  p = qmul(q,p);\n  p = qmul(p,r);\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  float size = 5.0;\n  float time = 0.1*iTime+0.1;\n  float theta = 0.618*time;\n  if (iMouse.x > 0.0) {\n    size *= exp((2.0*iMouse.y -iResolution.y)/iResolution.y);\n    theta = PI*(2.0*iMouse.x-iResolution.x)/iResolution.x;\n  }\n  uv *= size;\n  float tq = time;\n  float tr = theta;\n  vec4 q = vec4(sin(tq)*vec3(1,0,0),cos(tq));\n  vec4 r = vec4(sin(tr)*vec3(0,1,0),cos(tr));\n  vec4 p = vec4(uv,0,0);\n  mat4 qm = qmat_left(q)*qmat_right(r);\n  float ds = fwidth(p.x);\n  p = qm*p; // qrot(p,q,r);\n  p = mod(p,2.0);\n  vec4 dp = fract(p);\n  dp = min(dp,1.0-dp);\n  p = floor(p);\n  int parity = int(dot(p,vec4(1)))%2;\n\n  mat4x2 dm = transpose(mat2x4(qm));\n  dp /= vec4(length(dm[0]),length(dm[1]),length(dm[2]),length(dm[3]));\n  float d = min(min(dp.x,dp.y),min(dp.z,dp.w));\n  vec3 color = vec3(smoothstep(-ds,+ds,parity==0?d:-d));\n  color = mix(vec3(1,0,0),color,smoothstep(0.01,0.02+ds,d));\n  color = pow(color,vec3(0.4545));\n  fragColor = vec4(color,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}