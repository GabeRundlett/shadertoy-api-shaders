{
    "Shader": {
        "info": {
            "date": "1633352234",
            "description": "Limit of Flux Phases\n\nThe definition for 3-phase flux is given at the top of the code.\n\nThis just does it for other phase numbers.",
            "flags": 0,
            "hasliked": 0,
            "id": "NdtXDM",
            "likes": 1,
            "name": "Limit of Flux Phases",
            "published": 3,
            "tags": [
                "limitoffluxphase"
            ],
            "usePreview": 0,
            "username": "zovox",
            "viewed": 240
        },
        "renderpass": [
            {
                "code": "#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\nfloat saw(float x)\n{\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\n\nvec2 saw(vec2 x) { return vec2(saw(x.x), saw(x.y)); }\nvec3 saw(vec3 x) { return vec3(saw(x.x), saw(x.y), saw(x.z)); }\nvec4 saw(vec4 x) { return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy*2.0-1.0)*GR;\n    \n    const float max_phases = 16.;\n    const float min_phases = 1.;\n    float phases = (max_phases-min_phases)*(saw(iTime/PI/GR/E))+min_phases;\n    uv.x /= phases;\n    vec3 color = vec3(0.);\n    for(float phase = 0.; phase < max_phases; phase += 1.)\n    {\n        if(phase > phases)\n            break;\n        vec2 p2 = vec2(uv.x, cos(uv.x*phases*PI+phase*PI/phases*2.));\n        float line = 1.-smoothstep(0., 1./PI/GR/E, length(uv-p2));\n        color += flux(line+phase+uv.x)*line;\n    }\n    color += 1.-smoothstep(0., 1./PI/GR/E, saw(uv.x*phases*2.));\n    color = cos((vec3(1.-smoothstep(0., 1./PI/GR/E, saw(uv.y*2.)))+color)/2.*PI)*.5+.5;\n    fragColor.rgb = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}