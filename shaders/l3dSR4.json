{
    "Shader": {
        "info": {
            "date": "1718725678",
            "description": "Raymarched intertwined cylinders with displacement pattern and outline",
            "flags": 0,
            "hasliked": 0,
            "id": "l3dSR4",
            "likes": 7,
            "name": "Câbles infestés",
            "published": 3,
            "tags": [
                "raymarching",
                "cartoon",
                "outline"
            ],
            "usePreview": 0,
            "username": "Docteur_Raton",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "// https://iquilezles.org/articles/distfunctions/\nfloat sdCylinder(vec3 p, vec3 c)\n{\n    return length(p.xy - c.xy) - c.z;\n}\n\nmat2 rot(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    \n    return mat2(c, -s, s, c);\n}\n\nfloat map(vec3 p)\n{\n    p.yz *= rot(.2 * iTime);\n    p.xy *= rot(.2 * p.z);\n    p += vec3(0., 0., iTime);\n    //p += vec3(sin(p.z), sin(0.001 * iTime * p.z), 0.);\n    float d = 6.;\n    p.xy = mod(p.xy, d) - .5 * d;\n    float sd = sdCylinder(p, vec3(0., -1., .5));\n    float displacementFactor = 4.;\n    float displacement = 2. * sin(displacementFactor * p.x) * sin(displacementFactor * p.y)\n        * sin(displacementFactor * p.z);\n    \n    return sd + displacement;\n}\n\n// https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 warmPalette(float t)\n{\n    // http://dev.thi.ng/gradients/\n    vec3 a = vec3(0.938, 0.328, 0.718);\n    vec3 b = vec3(0.659, 0.438, 0.628);\n    vec3 c = vec3(0.445, 0.445, 0.17);\n    vec3 d = vec3(2.538, 2.478, 0.228);\n    \n    return palette(t, a, b, c, d);\n}\n\nvec3 march(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    float i;\n    float numIterations = 1000.;\n    float outlineDist = .05;\n    bool outline = false;\n    float distPrev = 100.;\n    for (i = 0.; i < numIterations; ++i)\n    {\n        vec3 p = ro + rd * t;\n        float d0 = map(p);\n        \n        // Avoids artifacts caused by space repetition.\n        float d = min(d0, 0.1);\n        \n        if (d < 0.001 || d > 100.)\n            break;\n        if (outline && d0 > distPrev)\n            return vec3(0.);\n        if (d0 < outlineDist)\n            outline = true;\n        t += d;\n        distPrev = d0;\n    }\n    vec3 col = warmPalette(1. - 0.5 * (.02 * t + i * 0.005)) - 0.0001 * pow(t, 2.);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) /iResolution.y;\n    vec3 ro = vec3(0., 0., -3.);\n    vec3 rd = normalize(vec3(uv, 1.));\n    vec3 col = march(ro, rd);\n    fragColor = vec4(col ,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}