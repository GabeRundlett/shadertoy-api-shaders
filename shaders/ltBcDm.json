{
    "Shader": {
        "info": {
            "date": "1508798674",
            "description": "Simple gaussian blur filter.",
            "flags": 32,
            "hasliked": 0,
            "id": "ltBcDm",
            "likes": 10,
            "name": "Simple gaussian blur",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "filter",
                "gaussian"
            ],
            "usePreview": 1,
            "username": "luluco250",
            "viewed": 2021
        },
        "renderpass": [
            {
                "code": "// Vertical blur\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec3 ps = vec3(vec2(1.0) / iResolution.xy, 0.0);\n    vec2 uv = coord * ps.xy;\n    \n    color = GaussianBlur1D(\n        iChannel0,\n        uv,\n        ps.zy * BlurScale,\n        BlurSigma,\n        BlurSamples);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Horizontal blur\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec3 ps = vec3(vec2(1.0) / iResolution.xy, 0.0);\n    vec2 uv = coord * ps.xy;\n    \n    color = GaussianBlur1D(\n        iChannel0,\n        uv,\n        ps.xz * BlurScale,\n        BlurSigma,\n        BlurSamples);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec2 BlurScale = vec2(2.0);\nconst int BlurSamples = 21;\nconst float BlurSigma = sqrt(float(BlurSamples));\n\nconst bool UseSimplifiedGaussian = true;\n\nconst float Pi = atan(1.0) * 4.0;\n\nfloat Gaussian1D(float x, float sigma)\n{\n    if (UseSimplifiedGaussian)\n    {\n        return exp(-(x * x) / (2.0 * sigma * sigma));\n    }\n    \n    float o = sigma * sigma;\n    float a = 1.0 / sqrt(2.0 * Pi * o);\n    float b = (x * x) / (2.0 * o);\n\n    return a * exp(-b);\n}\n\nvec4 GaussianBlur1D(\n\tsampler2D sp,\n\tvec2 uv,\n\tvec2 dir,\n\tfloat sigma,\n\tint samples)\n{\n\tfloat halfSamples = float(samples) * 0.5;\n\n\tvec4 color = vec4(0.0);\n\tfloat accum = 0.0;\n\n\tuv -= halfSamples * dir;\n\n\tfor (int i = 0; i < samples; ++i)\n\t{\n\t\tfloat weight = Gaussian1D(float(i) - halfSamples, sigma);\n\n\t\tcolor += texture(sp, uv) * weight;\n\t\taccum += weight;\n\n\t\tuv += dir;\n\t}\n\n\treturn color / accum;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}