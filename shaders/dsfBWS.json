{
    "Shader": {
        "info": {
            "date": "1689111911",
            "description": "WORLEY / VORNOI NOISE EXAMPLE - ORGANIC NOISE SHADER\nCredits to Suboptimal Engineer's youtube tutorial https://www.youtube.com/watch?v=vcfIJ5Uu6Qw",
            "flags": 0,
            "hasliked": 0,
            "id": "dsfBWS",
            "likes": 1,
            "name": "WORLEY / VORNOI NOISE EXAMPLE",
            "published": 3,
            "tags": [
                "noise",
                "vornoi",
                "organic"
            ],
            "usePreview": 0,
            "username": "jackjackdev",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "// WORLEY / VORNOI NOISE EXAMPLE - ORGANIC NOISE SHADER\n// Credits to Suboptimal Engineer's youtube tutorial https://www.youtube.com/watch?v=vcfIJ5Uu6Qw\n\nvec2 noise2x2(vec2 p) {\n  float x = dot(p, vec2(123.4, 234.5));\n  float y = dot(p, vec2(345.6, 456.7));\n  vec2 noise = vec2(x, y);\n  noise = sin(noise);\n  noise = noise * 43758.5453;\n  noise = fract(noise);\n  return noise;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // set up uv & base color\n  vec2 uv = fragCoord / iResolution.xy;\n  uv = fragCoord.xy / iResolution.y;\n\n  vec3 color = vec3(0.0);\n\n  // set up grid\n  uv = uv * 10.0; // adjust this for \"zoom in/out\"\n  vec2 currentGridId = floor(uv);\n  vec2 currentGridCoord = fract(uv);\n  color = vec3(currentGridCoord, 0.0);\n  currentGridCoord = currentGridCoord - 0.5;\n  color = vec3(currentGridCoord, 0.0);\n \n  // add a point at the center of each grid\n  float pointsOnGrid = 0.0;\n  float minDistFromPixel = 100.0;\n\n  for (float i = -1.0; i <= 1.0; i++) {\n    for (float j = -1.0; j <= 1.0; j++) {\n      vec2 adjGridCoords = vec2(i, j);\n      vec2 pointOnAdjGrid = adjGridCoords;\n\n      // vary the points based on time + noise\n      vec2 noise = noise2x2(currentGridId + adjGridCoords);\n      pointOnAdjGrid = adjGridCoords + sin(iTime * noise) * 0.5;\n\n      float dist = length(currentGridCoord - pointOnAdjGrid);\n      minDistFromPixel = min(dist, minDistFromPixel);\n    }\n  }\n\n  // display voronoi noise\n  color = vec3(minDistFromPixel);\n  color = vec3(smoothstep(0.0, 1.0, minDistFromPixel));\n\n  // display clouds\n  color = vec3(smoothstep(0.25, 1.0, 1.0 - minDistFromPixel));\n\n  // split into 2 color-opposite sections\n  if (uv.x > 8.8) {\n    color = vec3(smoothstep(0.0, 1.0, minDistFromPixel));\n  } else {\n    color = vec3(smoothstep(0.1, 1.0, 1.0 - minDistFromPixel));\n  }\n\n  fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}