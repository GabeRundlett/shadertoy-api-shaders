{
    "Shader": {
        "info": {
            "date": "1700411187",
            "description": "-tmm added color and mouse.x can modify iterations \n@spalmer - see where the code was changed to add color ?\nEstou testando vários tipos de raymarch's acho que este é o mais legal\nsó faltou aqui um daqueles algoritmos de vizinhança para evitar glitchs ",
            "flags": 0,
            "hasliked": 0,
            "id": "mlGczK",
            "likes": 9,
            "name": "Acrilic 3 w/ color",
            "published": 3,
            "tags": [
                "cubes",
                "glass",
                "refract",
                "cubos",
                "plastc"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "// Fork of \"Acrilic 3\" by Elsio. https://shadertoy.com/view/ctKyRy\n// 2023-11-19 16:25:19\n\n#define rot(a) mat2(cos(a + vec4(0, 11, 33, 0)))\n#define L(q) length(max(abs(q.zx), abs(q.y)) - .2) - .01\n\n\n//Hash and Noise Functions\n\n\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n\n// https://www.shadertoy.com/view/4djSRW\n// Trying to find a Hash function that is the same on ALL systens\n// and doesn't rely on trigonometry functions that change accuracy \n// depending on GPU. \n// New one on the left, sine function on the right.\n// It appears to be the same speed, but I suppose that depends.\n\n// * Note. It still goes wrong eventually!\n// * Try full-screen paused to see details.\n\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n//#define HASHSCALE1 .1031\n//#define HASHSCALE3 vec3(.1031, .1030, .0973)\n//#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n// For smaller input rangers like audio tick or 0-1 UVs use these...\n#define HASHSCALE1 443.8975\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n#define HASHSCALE4 vec3(443.897, 441.423, 437.195, 444.129)\n\n\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n        vec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n        vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n        p3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\n\nvec4 hsb2rgb( in vec4 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return vec4(c.z * mix( vec3(1.0), rgb, c.y), 1.);\n}\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec3 R = iResolution, q, k;\n         u = (u - R.xy / 2.) / R.y;\n         o *= 0.; \n    \n    float d, ss, s, f, i, j, \n          t = iTime * .2, e = 1e-2;\n    \n    \n     vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(0.5) : iMouse.xy/iResolution.xy;\n    \n    float maxIter = 78.0 * mouse.x;\n    \n    while(i++ < maxIter) {\n        q = vec3(d * u, d), \n        \n        q.xz *= rot(cos(t)); \n        q.yz *= rot(t); \n        q.z -= 2.*t;\n        \n        k = floor(q) + .5;\n        q = fract(q) - .5; \n         \n        q.yz *= rot(-t); \n        q.xz *= rot(-cos(t)); \n        q.xy *= rot(cos(k.x+k.y+k.z)); \n        \n        s = L(q) - .05;\n        \n        s = abs(s);\n        \n        f = 1. - s / e, \n        \n#define cor(a)   (cos((a) * 6.3 + vec3(0, 23, 21)) * .5 + .5)\n//#define ELSIO_WHITE\n//#define ELSIO_COLOR\n//#define D_TERM_COLOR\n//#define K_TERM_HASH_COLOR\n#define ELSIO_K_TERM_HASH_COLOR\n//#define K_TERM_ALT\n\n        o +=  (f > .01) ?\n#ifdef ELSIO_WHITE\n           /* Elsio white \n              Fork of \"Acrilic 3\" by Elsio. https://shadertoy.com/view/ctKyRy\n              @spalmer made a comment asking about color - so I thought I would illustrate \n              some of infinite ways you could add color -tmm\n            */\n            //ORIG - color was always white \n           vec4(1.) * f / d * i / 210. \n#endif\n#ifdef ELSIO_COLOR\n\n            //@Elsio \n            vec4(cor(k.x+k.y+k.z) * f / d * i / 210., 1.0)\n#endif       \n#ifdef D_TERM_COLOR\n           // using d term to make color\n           hsb2rgb(vec4(3.141592653/d /*pow(d,0.2)*/,0.9,0.9,1)) * f / d * i / 210. \n#endif\n#ifdef K_TERM_HASH_COLOR          \n           // using noise to make color from k term - allows 'constant' color for each 'cube'\n           hsb2rgb(vec4(3.141592653 / hash13(k),0.9,0.9,1)) * f / d * i / 210. \n#endif\n#ifdef ELSIO_K_TERM_HASH_COLOR          \n           // using noise to make color from k term - allows 'constant' color for each 'cube'\n           hsb2rgb(vec4(3.141592653 / hash13(cor(k)),0.9,0.9,1)) * f / d * i / 210. \n#endif\n#ifdef K_TERM_ALT\n            // mix two terms to make hash - here just k.z\n           hsb2rgb(vec4(3.141592653 * hash12(vec2(k.z,k.z)),0.9,0.9,1)) * f / d * i / 210. \n#endif  \n            \n            \n           :  vec4(0);\n         \n            \n        d += max(s, e / 5.);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}