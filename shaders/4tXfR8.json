{
    "Shader": {
        "info": {
            "date": "1510880361",
            "description": "Drag mouse to set number of weaves!\n\nA floating, pulsating weaved thing! It's a Mobius knot! It's similar to my Sierpinski Floater: https://www.shadertoy.com/view/XtyGD1\n\nAn alt version - b&w with a neat background: https://www.shadertoy.com/view/4tXBRH",
            "flags": 0,
            "hasliked": 0,
            "id": "4tXfR8",
            "likes": 8,
            "name": "Mobius Floater",
            "published": 3,
            "tags": [
                "2d",
                "mobius",
                "ring",
                "hsv",
                "hue",
                "knot",
                "weave"
            ],
            "usePreview": 0,
            "username": "Zanzlanz",
            "viewed": 676
        },
        "renderpass": [
            {
                "code": "// Use it, change it, enjoy! By Zanzlanz :)\n// Here's an alt version: https://www.shadertoy.com/view/4tXBRH\n\n#define pi 3.14159265358979\n\n// Hue. https://www.laurivan.com/rgb-to-hsv-to-rgb-for-shaders/\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Black background\n\tvec3 col = vec3(0.0, 0.0, 0.0);\n    \n    // Set the moose (xmouse)\n    float moose = iMouse.x/iResolution.x;\n    if(iMouse.x == 0.0 && iMouse.y == 0.0) moose = .4;\n    \n    // Make the X coordinates the same distance as the Y\n\tvec2 uv = fragCoord.xy / iResolution.yy;\n    uv.xy -= .5;\n\tuv.x += (1.0-iResolution.x/iResolution.y)/2.0;\n    \n    // Rotate the camera a bit, then draw grid\n    float gridSize = sin(iTime/5.0)*.01+.07;\n    uv.xy = vec2(uv.x*cos(.1) - uv.y*sin(.1), uv.x*sin(.1) + uv.y*cos(.1));\n    float d2E = smoothstep(0.0, 1.0, min(min(mod(uv.x, gridSize), mod(uv.y, gridSize)), min(gridSize-mod(uv.x, gridSize), gridSize-mod(uv.y, gridSize)))*200.0);\n    col = vec3(d2E*.04+.49, d2E*.04+.66, d2E*.05+.73);\n    \n    // Move mobius thing around\n    uv.x += sin(iTime/5.0)*.4;\n    uv.y += cos(iTime/4.0)*.1;\n    \n    float globalRotationTime = iTime/10.0;\n    uv.xy = vec2(uv.x*cos(globalRotationTime) - uv.y*sin(globalRotationTime), uv.x*sin(globalRotationTime) + uv.y*cos(globalRotationTime));\n\n    // Now many weaves there are (.5 though, because Mobius <3)\n    float cuts = 1.5 + floor(moose*10.0);\n\t\n    // Radians of the first loop   \n    float rotA = atan(uv.y, uv.x)+pi;\n    \n    // Radius of overal circle - fun to change per pixel\n    float rawRadius = .30 + sin(iTime/2.0)*.07;\n    \n\t// How thick the strands are\n    float separation = sin(iTime+rotA*3.0)*.01 + .02;\n    \n\t// Distance between the two strands\n\tfloat dist = sqrt(uv.x*uv.x + uv.y*uv.y);\n\n\t// Radius of first loop\n\tfloat radiusA = sin(rotA*cuts)*.039+rawRadius;\n\n    // Radians and radius of the second loop\n\tfloat rotB = rotA + pi*2.0/cuts/2.0;\n\tfloat radiusB = sin(rotB*cuts)*.02+rawRadius;\n\n\t// Draw black border around shape\n    col = mix(col, vec3(.34, .37, .43), \n              smoothstep(0.0, 1.0, 1.0-200.0*min(abs(dist - radiusA) - separation, abs(dist - radiusB) - separation)));\n    \n\t// Draw the first loops\n    if(abs(dist - radiusA) < separation) {\n        col = hsv2rgb(mix(vec3(0.0, 1.0, 0.7), vec3(.5, 1.0, 0.7), rotA/2.0/pi + iTime/20.0));\n    }\n    \n    // Draw the second loop\n    // If it's going behind the first loop, only draw it if the pixel isn't colliding with that region\n\tif(fract((rotB/2.0/pi+1.0/(cuts*4.0))*cuts)>.5 || abs(dist - radiusA) > separation) {\n        if(abs(dist - radiusB) < separation) {\n            col = hsv2rgb(mix(vec3(.5, 1.0, 0.7), vec3(1.0, 1.0, 0.7), rotA/2.0/pi + iTime/20.0));\n        }\n\t}\n    \n    // Boop!\n\tfragColor.rgb = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}