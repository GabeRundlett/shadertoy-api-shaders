{
    "Shader": {
        "info": {
            "date": "1455695010",
            "description": "blending sprites can be seemless if correcting the variance, for contrast preserving.\nleft: linear  right :-variance normalized",
            "flags": 0,
            "hasliked": 0,
            "id": "lsKGz3",
            "likes": 26,
            "name": "contrast-corrected blending",
            "published": 3,
            "tags": [
                "sprite",
                "blend",
                "variance",
                "lagrangian",
                "smartblend"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 2132
        },
        "renderpass": [
            {
                "code": "// NB: trick published in https://hal.inria.fr/inria-00536064v2\n// deeper conservation: see histogram-preserving here: https://hal.inria.fr/hal-01824773\n//                      partly in https://www.shadertoy.com/view/MdyfDV\n\n                                          // try textures random, checker, etc\n#define T(U) texture(iChannel0,2.*U)*1.3      // *1.3 only for dark texture\n#define mean texture(iChannel0,2.*U,10.)*1.3\n                                       // variants: \n// #define mean vec4(65,54,46,1)/255.     // mean for Britney video\n// #define T(U) vec4(.5+.5*sin(120.*U.x)) // Gabor noise. mean = .5\n// #define T(U) K(U)                      // simple blob. mean = .5\n// #define mean .5\n\n#define K(U) smoothstep(.2, .0, length(U))      // smooth kernel\n#define rnd(i) fract(1e4*sin(i+vec2(0,73.17)))  // texture\n\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O*=0.;\n    vec2 R = iResolution.xy, r=R/R.y;\n    if (abs(U.x-R.x/2.)<2.) return;\n\tU /= R.y;\n    float s=0., s2=0., v;\n    for (float i=0.; i<150.; i++) \n    {\n        vec2 V = U-rnd(i)*r  + .1*cos(i+iTime+vec2(0,1.6)); // sprite position\n        v = K(V); s += v; s2 += v*v;                        // kernel and momentums\n\t    O += v*T(V);\n    }\n    // normalization\n    if     (U.x<r.x/2.)\n            O /= s;                          // linear blend\n    else    O = mean + (O-s*mean)/sqrt(s2);  // variance preserving blend\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}