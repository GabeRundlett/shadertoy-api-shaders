{
    "Shader": {
        "info": {
            "date": "1463475753",
            "description": "Chaotic motion of a pendulum - see source",
            "flags": 32,
            "hasliked": 0,
            "id": "MdGXRm",
            "likes": 7,
            "name": "Chaotic Pendulum",
            "published": 3,
            "tags": [
                "dynamics",
                "chaos"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 663
        },
        "renderpass": [
            {
                "code": "// \"Chaotic Pendulum\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  The pendulum mass is attracted by several 'magnets' resulting in\n  chaotic motion.\n\n  The sliders control the strength and number of magnets. A trace of the\n  recent trajectory is shown, and the magnets flash when approached.\n*/\n\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, vec4 slVal);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec4 Loadv4 (int idVar);\n\nconst float pi = 3.14159;\nconst float txRow = 32.;\n\n#define MAX_SITE 9\n\nvec3 rSite[MAX_SITE], rb, ltDir, qHit;\nfloat dstFar, nSite, penLen, hDist, vDist;\nint idObj;\nconst int ntPoint = 400;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, s;\n  dMin = dstFar;\n  p.y -= - 0.5 * penLen;\n  q = p;  q.y -= penLen + vDist;\n  s = length (rb.xy);\n  if (s > 0.) {\n    q.xz = Rot2D (q.xz, atan (rb.y, - rb.x));\n    q.xy = Rot2D (q.xy, atan (s, - rb.z));\n  }\n  q.y -= -0.5 * penLen;\n  d = PrCylDf (q.xzy, 0.03, 0.5 * penLen);\n  if (d < dMin) { dMin = d;  idObj = 1;  qHit = q; }\n  q = p - rb.xzy;\n  q.y -= penLen + vDist;\n  d = PrSphDf (q, 0.12);\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  q = p;\n  d = PrCylDf (q.xzy, 2., 0.1);\n  if (d < dMin) { dMin = d;  idObj = 3; }\n  q = p;  q.z -= 2.25;\n  d = PrCapsDf (q, 0.1, 0.25);\n  q = p;  q.yz -= vec2 (0.5 * (penLen + vDist), 2.5);\n  d = min (d, PrCapsDf (q.xzy, 0.1, 0.5 * (penLen + vDist)));\n  q.yz -= vec2 (0.5 * (penLen + vDist), -1.25);\n  d = min (d, PrCapsDf (q, 0.1, 1.25));\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  for (int j = 0; j < MAX_SITE; j ++) {\n    if (float (j) == nSite) break;\n    q = p;  q.xz -= rSite[j].xy;  q.y -= 0.125;\n    d = PrCylDf (q.xzy, 0.12, 0.02);\n    if (d < dMin) { dMin = d;  idObj = 5 + j; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  vec2 p;\n  float dstObj, s, h;\n  int idObjT;\n  bool isNr;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) {\n      col = vec3 (0.9, 1., 0.9) * (0.3 + 0.7 *\n         SmoothBump (0.1, 0.9, 0.05, mod (10. * qHit.y, 1.)));\n    } else if (idObj == 2) {\n      col = vec3 (1., 0.9, 0.2);\n    } else if (idObj == 3) {\n      col = vec3 (0.5, 0.5, 0.55);\n      if (vn.y > 0.) {\n        s = 1.;\n        h = 1.;\n        for (int j = 0; j < ntPoint; j ++) {\n          s = min (s, h * length (Loadv4 (5 + j).xy - ro.xz));\n          h += 1. / float (ntPoint);\n        }\n        col = mix (vec3 (1., 1., 0.), col, smoothstep (0.03, 0.04, s));\n      }\n    } else if (idObj == 4) {\n      col = vec3 (0.6, 0.3, 0.);\n    } else if (idObj >= 5) {\n      isNr = false;\n      for (int j = 0; j < MAX_SITE; j ++) {\n        if (j == idObj - 5) {\n          if (length (rb.xy - rSite[j].xy) < 0.5) isNr = true;\n        }\n      }\n      col = isNr ? vec3 (1., 0., 0.) : vec3 (0., 1., 0.);\n    }\n    col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.) +\n       0.5 * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.));\n  } else {\n    rd.yz = Rot2D (rd.yz, -0.3 * pi);\n    col = (1. - 2.5 * dot (rd.xy, rd.xy)) * vec3 (0.1, 0.1, 0.2);\n  }\n  col = clamp (col, 0., 1.);\n  return col;\n}\n\nvoid SetSites ()\n{\n  float a, fj;\n  for (int j = 0; j < MAX_SITE; j ++) {\n    fj = float (j);\n    if (fj == nSite) break;\n    a = (fj + 0.5) * 2. * pi / nSite;\n    rSite[j] = vec3 (hDist * sin (a), hDist * cos (a), - penLen - vDist);\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat, slVal;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;;\n  float az, el, asp, eTot;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  dstFar = 30.;\n  penLen = 4.;\n  hDist = 1.6;\n  vDist = 0.4;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  eTot = stDat.y;\n  el = stDat.z;\n  az = stDat.w;\n  stDat = Loadv4 (1);\n  rb = stDat.xyz;\n  slVal = Loadv4 (3);\n  nSite = floor (10. * slVal.y + 0.01);\n  SetSites ();\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 6.));\n  ro = vuMat * vec3 (0., 0., -20.);\n  ltDir = vuMat * normalize (vec3 (1., 2., -1.));\n  col = ShowScene (ro, rd);\n  col = ShowWg (uv, canvas, col, slVal);\n  if (false) col = mix (col, vec3 (1., 1., 0.),\n     ShowInt (0.5 * uv - vec2 (0.47 * asp, - 0.45),\n     vec2 (0.06 * asp, 0.03), 4., floor (100. * eTot)));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, vec4 slVal)\n{\n  vec4 wgBx[2];\n  vec2 ut, ust;\n  float vW[2], asp;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.38 * asp, -0.1, 0.012 * asp, 0.18);\n  wgBx[1] = vec4 (0.45 * asp, -0.1, 0.012 * asp, 0.18);\n  vW[0] = slVal.x;\n  vW[1] = slVal.y;\n  for (int k = 0; k < 2; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = vec3 (1., 1., 0.);\n      else col = (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.1) *\n         canvas.y < 6.) ? vec3 (1., 1., 0.) : vec3 (0.4, 0.3, 0.);\n    }\n    ut.y -= (vW[k] - 0.5) * 2. * wgBx[k].w;\n    ut = abs (ut) * vec2 (1., 2.);\n    if (abs (max (ut.x, ut.y) - 0.015) < 0.006) col = vec3 (0.1, 0.5, 1.);\n  }\n  return col;\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv < 5) {\n    if (iv == -1) k = 8;\n    else if (iv == 0) k = 119;\n    else if (iv == 1) k = 36;\n    else if (iv == 2) k = 93;\n    else if (iv == 3) k = 109;\n    else k = 46;\n  } else {\n    if (iv == 5) k = 107;\n    else if (iv == 6) k = 122;\n    else if (iv == 7) k = 37;\n    else if (iv == 8) k = 127;\n    else k = 47;\n  }\n  q = (q - 0.5) * vec2 (1.7, 2.3);\n  d = 0.;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx - vo);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (sgn < 0.) {\n      if (idChar == mxChar - nDig - 1.) s = ShowDig (q, -1);\n      else ++ v;\n    }\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Chaotic Pendulum\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst float pi = 3.14159;\nconst float txRow = 32.;\n\n#define MAX_SITE 9\n\nvec3 rSite[MAX_SITE];\nfloat tCur, nStep, nSite, fCon, fFac, grav, delT, eTot, penLen, hDist, vDist;\nconst int ntPoint = 400;\n\nvoid EvalRhs (vec3 q, vec3 qv, out vec3 fv, out vec3 f)\n{\n  vec3 dr;\n  float ri;\n  f = vec3 (0.);\n  for (int j = 0; j < MAX_SITE; j ++) {\n    if (float (j) == nSite) break;\n    dr = q - rSite[j];\n    ri = 1. / length (dr);\n    f -= fCon * ri * ri * ri * dr;\n  }\n  f += q * (grav * q.z - dot (f, q) - dot (qv, qv)) / (penLen * penLen);\n  f.z -= grav;\n  fv = qv;\n  f *= delT;\n  fv *= delT;\n}\n\nvoid Step (inout vec3 r, inout vec3 rv)\n{\n  vec3 k1r, k2r, k3r, k4r, k1v, k2v, k3v, k4v;\n  EvalRhs (r, rv, k1r, k1v);\n  EvalRhs (r + k1r / 2., rv + k1v / 2., k2r, k2v);\n  EvalRhs (r + k2r / 2., rv + k2v / 2., k3r, k3v);\n  EvalRhs (r + k3r, rv + k3v, k4r, k4v);\n  r += (k1r + k4r) / 6. + (k2r + k3r) / 3.;\n  rv += (k1v + k4v) / 6. + (k2v + k3v) / 3.;\n}\n\nvoid Init (out vec3 r, out vec3 rv)\n{\n  float a;\n  r = vec3 (0., 0., - penLen);\n  a = 2. * pi * Hashff (tCur);\n  rv = vec3 (cos (a), sin (a), 0.);\n}\n\nvoid SetSites ()\n{\n  float a, fj;\n  for (int j = 0; j < MAX_SITE; j ++) {\n    fj = float (j);\n    if (fj == nSite) break;\n    a = (fj + 0.5) * 2. * pi / nSite;\n    rSite[j] = vec3 (hDist * sin (a), hDist * cos (a), - penLen - vDist);\n  }\n}\n\nfloat Eng (vec3 r, vec3 rv)\n{\n  float en;\n  en = 0.5 * dot (rv, rv) + grav * r.z;\n  for (int j = 0; j < MAX_SITE; j ++) {\n    if (float (j) == nSite) break;\n    en -= fCon / length (r - rSite[j]);\n  }\n  return - en;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[2], mPtr, mPtrP, stDat, slVal;\n  vec3 r, rv;\n  vec2 iFrag, canvas, ust, tPoint;\n  float asp, vW, eTot, el, az;\n  int pxId, wgSel, wgReg, kSel;\n  bool doInit;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 5 + ntPoint) discard;\n  grav = 1.;\n  penLen = 4.;\n  hDist = 1.6;\n  vDist = 0.4;\n  delT = 0.004;\n  fFac = 4.;\n  doInit = false;\n  wgReg = -2;\n  if (iFrame <= 5) {\n    fCon = 2.;\n    nSite = 3.;\n    slVal = vec4 (fCon / fFac, 0.1 * nSite, 0., 0.);\n    mPtrP = mPtr;\n    wgSel = -1;\n    doInit = true;\n  } else {\n    nStep = Loadv4 (0).x;\n    r = Loadv4 (1).xyz;\n    rv = Loadv4 (2).xyz;\n    slVal = Loadv4 (3);\n    fCon = fFac * slVal.x;\n    nSite = floor (10. * slVal.y + 0.01);\n    stDat = Loadv4 (4);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.38 * asp, -0.1, 0.012 * asp, 0.18);\n    wgBx[1] = vec4 (0.45 * asp, -0.1, 0.012 * asp, 0.18);\n    for (int k = 0; k < 2; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  el = -0.3 * pi;\n  az = 0.;\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      el +=  pi * mPtr.y;\n      az += 2. * pi * mPtr.x;\n    }\n  } else {\n    for (int k = 0; k < 2; k ++) {\n      if (wgSel == k) {\n        kSel = k;\n        vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0.01, 0.99);\n        break;\n      }\n    }\n    if (kSel == 0) {\n      slVal.x = vW;\n      fCon = clamp (fFac * slVal.x, 0.5, 4.5);\n      slVal.x = fCon / fFac;\n    } else if (kSel == 1) {\n      slVal.y = vW;\n      nSite = clamp (floor (10. * slVal.y + 0.01), 2., float (MAX_SITE - 1));\n      slVal.y = 0.1 * nSite;\n    }\n    doInit = true;\n  }\n  if (doInit) {\n    Init (r, rv);\n    nStep = 0.;\n  }\n  SetSites ();\n  if (! doInit && pxId <= 5) {\n    for (int k = 0; k < 12; k ++) Step (r, rv);\n    ++ nStep;\n  }\n  eTot = Eng (r, rv);\n  if (pxId == 5) tPoint = r.xy;\n  else if (pxId > 5) {\n    if (doInit) tPoint = vec2 (0.);\n    else {\n      if (mod (nStep, 2.) == 0.) tPoint = Loadv4 (pxId - 1).xy;\n      else tPoint = Loadv4 (pxId).xy;\n    }\n  }\n  if (pxId == 0) stDat = vec4 (nStep, eTot, el, az);\n  else if (pxId == 1) stDat = vec4 (r, 0.);\n  else if (pxId == 2) stDat = vec4 (rv, 0.);\n  else if (pxId == 3) stDat = slVal;\n  else if (pxId == 4) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else stDat = vec4 (tPoint, 0., 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}