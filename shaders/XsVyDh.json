{
    "Shader": {
        "info": {
            "date": "1521913032",
            "description": "Basically folding a grid.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsVyDh",
            "likes": 15,
            "name": "BambooCave",
            "published": 3,
            "tags": [
                "raymarching",
                "grid",
                "folding",
                "glow"
            ],
            "usePreview": 1,
            "username": "EvilRyu",
            "viewed": 4487
        },
        "renderpass": [
            {
                "code": "// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Folding (gaz): https://www.shadertoy.com/view/4tX3DS\n// Curvature (iq): https://www.shadertoy.com/view/MsXGzM\n// Triangle noise (Shane): https://www.shadertoy.com/view/MlXSWX\n// Log-Bisection (Nimitz): https://www.shadertoy.com/view/4sSXz\n\n#define PI 3.14159265\n#define FLICKER cos(iTime*2.5)\n\nfloat smin(float a, float b, float k)\n{\n    float h = clamp(0.5+0.5*(b-a)/k,0.,1.);\n    return mix(b,a,h)-k*h*(1.-h);\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nvec2 fold(vec2 p, float a)\n{\n    p.x=abs(p.x);\n    vec2 n = vec2(cos(a),sin(a));\n    for(int i = 0; i < 3; ++i)\n    {\n        p -= 2.*min(0.,dot(p,n))*n;\n        n = normalize(n-vec2(1.,0.));\n    }\n    return p;\n}\n\nvec3 tri(vec3 p)\n{\n    return abs(fract(p)-0.5);\n}\n\nfloat tri_surf(vec3 p)\n{\n    return dot(tri(p*0.5+tri(p*0.25+tri(p*0.125))).yxz,vec3(0.666));\n}\n\nvec3 path(float p)\n{\n    return vec3(sin(p*0.05)*cos(p*0.025)*18., 0.,0.);\n}\n\nvec4 texcube(sampler2D sam, vec3 p, vec3 n)\n{\n    vec4 p1=texture(sam, p.xy);\n    vec4 p2=texture(sam, p.xz);\n    vec4 p3=texture(sam, p.yz);\n    return p1*abs(n.z)+p2*abs(n.y)+p3*abs(n.x);\n}\n\nfloat bump(vec3 p, vec3 n)\n{\n    return dot(texcube(iChannel0, 0.25*p, n).xyz, vec3(0.299, 0.587, 0.114)); \n}\n\nvec3 bump_mapping(vec3 p, vec3 n, float weight)\n{\n    vec2 e = vec2(2./iResolution.y, 0); \n    vec3 g=vec3(bump(p-e.xyy, n)-bump(p+e.xyy, n),\n                bump(p-e.yxy, n)-bump(p+e.yxy, n),\n                bump(p-e.yyx, n)-bump(p+e.yyx, n))/(e.x*2.);  \n    g=(g-n*dot(g,n));\n    return normalize(n+g*weight);\n}\n\nint mateid = 0;\n\nvec2 map(vec3 p)\n{\n    p-=path(p.z);\n    mateid = 0;\n    \n    vec3 q = p;\n    \n    // folding the grid\n   \tq.xy=fold(q.xy,9.6);\n   \tq=abs(mod(q, 12.0)-6.0);\n\tq.xz=fold(q.xz,1.9);\n\tq.yz=fold(q.yz, 1.1);\n    \n    float d= min(length(q.xy)-0.1, \n            \tmin(max(q.y,q.z), max(q.x,q.z)))-.2;\n \n    q = p;\n    q.z = mod(q.z,12.)-6.;\n    q += vec3(0.,-2.,0.);\n    q.x=abs(q.x)-5.5;\n    float d2 = sphere(q, 0.6);\n    \n    d += 0.4*(0.5-tri_surf(p));\n    \n    d = smin(d, p.y+4.+sin(p.z*0.4)+0.8*texture(iChannel1,0.1*p.xz).x, 1.5);\n    if(d > d2){ mateid = 1; d = d2;}\n    \n    return vec2(d, sphere(q, 1.+(0.25+0.25*FLICKER)));\n}\n\nvec3 calc_normal(vec3 p)\n{ \n \tvec3 e=vec3(0.001,0.0,0.0); \n \treturn normalize(vec3(map(p+e.xyy).x-map(p-e.xyy).x, \n \t\t\t\t\t\t  map(p+e.yxy).x-map(p-e.yxy).x, \n \t\t\t\t\t\t  map(p+e.yyx).x-map(p-e.yyx).x)); \n} \n\n\n#define BASE_STRIDE .8\n#define FAR_STRIDE .5\n#define MIN_STEP .1\nconst float logvl = 1.+MIN_STEP;\n\nfloat bisect(vec3 ro, vec3 rd, float near, float far)\n{\n    float mid = 0.;\n    float sgn = sign(map(rd*near+ro).x);\n    for (int i = 0; i < 6; i++)\n    { \n        mid = (near + far)*.5;\n        float d = map(rd*mid+ro).x;\n        if (abs(d) < 0.002)break;\n        d*sgn < 0. ? far = mid : near = mid;\n    }\n    return (near+far) * .5;\n}\n\nvec2 intersect(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    vec2 d = map(rd*t+ro);\n\n    float sgn = sign(d.x);\n    float told = t;\n    bool doBisect = false;\n    \n    vec2 res = vec2(0., 1e10);\n    \n    for (int i=0;i<128;i++)\n    {\n        // \"break\" still breaks on windows...\n        if (abs(d.x) < 0.002 || t > 100.) continue;            \n       \tif (sign(d.x) != sgn)\n        {\n            doBisect= true;\n            continue;\n        }\n        \n        told = t;\n        if (d.x > 1.)t += d.x*FAR_STRIDE;\n        else t += log(abs(d.x)+logvl)*BASE_STRIDE;\n       \t\n        res = vec2(t, min(res.y, d.y));\n        d = map(rd*t+ro);\n    }\n    \n    if (doBisect)\n        res.x = bisect(ro,rd,told,t);\n    if(t > 100.)\n        res.x = -1.;\n    return res;\n}\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nfloat curvature(vec3 p, vec3 n)\n{\n\tfloat acc = 0.0;\n    for( int i=0; i<4; i++ )\n    {\n\t\tvec3 aopos = normalize(hash3(float(i)*213.47));\n\t\taopos = aopos - dot(n,aopos)*n;\n\t\taopos = p + aopos*0.5;\n        float dd = clamp(map(aopos).x*100.0, 0.0, 1.0 );\n        acc += dd;\n    }\n\t\n    return smoothstep( 0.2, 1.0, acc/4.0 );\n}\n\nfloat shadow( in vec3 ro, in vec3 rd)\n{\n\tfloat res = 1.0;\n    float t = 0.05;\n\tfloat h;\n\t\n    for (int i = 0; i < 8; i++)\n\t{\n\t\th = map( ro + rd*t ).x;\n\t\tres = min(6.0*h / t, res);\n\t\tt += h;\n\t}\n    return max(res, 0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord/iResolution.xy;\n\tvec2 p = q * 2.0 - 1.;\n    p.x *= iResolution.x/iResolution.y;\n\t\n    vec3 ro = vec3(0., 0., -iTime*5.);\n    vec3 ta = ro + vec3(0,0,-1);\n    ro+=path(ro.z);\n    ta+=path(ta.z-2.);\n    \n    vec3 f = normalize(ta - ro);\n    vec3 r = normalize(cross(f, vec3(0,1,0)));\n\tvec3 u = normalize(cross(r, f));\n    mat3 cam = mat3(r,u,f);\n    \n    vec3 rd = normalize(cam * vec3(p.xy, PI/2.));\n    \n    vec2 res = intersect(ro, rd);\n\n    vec3 col = vec3(0);\n        \n    if(res.x > -0.5)\n    {\n        int mid = mateid;\n        vec3 pos = ro+res.x*rd;\n        vec3 n = calc_normal(pos);\n        \n  \n        vec3 mate = mix(vec3(1.),texcube(iChannel0, pos*0.3, n).xyz,\n                    smoothstep(-9.1,2.,pos.y));\n\n        float cur = curvature(pos, n);\n        \n        mate += cur*vec3(0,2.,0.);\n       \n        n=bump_mapping(pos, n, 0.2/(1.+res.x*0.4));\n\n        vec3 light1_pos = ro + vec3(0,0,-10);\n        vec3 light1_dir = light1_pos - pos;\n        float light1_dist = length(light1_dir);\n        light1_dir /= light1_dist;\n        vec3 light1_col = vec3(1.7, 0.6, 0.);\n        \n        float sha = shadow(pos+0.2*n, vec3(0,1,0));\n        float dif = max(0., dot(n,light1_dir));\n        float bac = max(0., dot(n,-light1_dir));\n        float spe = max(0.0, pow(clamp(dot(light1_dir, reflect(rd, n)), 0.0, 1.0), 32.0));\n        \n        vec3 Lo =  sha*8.*dif*light1_col/(0.5*light1_dist);\n       \tLo += 0.5*bac*light1_col*(1.-smoothstep(-2.5,0.,pos.y));\t\n       \tLo *= .5+.5*FLICKER;\n    \tLo += .5*max(0.,dot(n,vec3(0,1,0)))*vec3(0.6,0.8,1.2)\n            \t* smoothstep(-3., 3., pos.y);\n        Lo += 1.*spe*vec3(1.);\n       \tcol = Lo * mate * 0.2;\n        if(mid==1) col = 1.4*vec3(1.7, 0.6470, 0.0);\n    }\n    // the glow\n    col +=  0.3*vec3(1.7, 0.6470, 0.0) * \n            pow(max(1.0 - res.y,0.), 6.+2.*FLICKER);\n          \n    col=mix(col, 0.0*vec3(0.6,0.8,1.1), 1.0-exp(-0.001*res.x*res.x) );\n\n    // post\n    col=pow(clamp(col,0.0,1.0),vec3(0.45));\n    col=pow(col,vec3(0.85,.85,.9));\n    col*=pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}