{
    "Shader": {
        "info": {
            "date": "1591299554",
            "description": "glitch pattern",
            "flags": 0,
            "hasliked": 0,
            "id": "ts2cRy",
            "likes": 18,
            "name": "glitch pattern",
            "published": 3,
            "tags": [
                "glitch",
                "pattern"
            ],
            "usePreview": 1,
            "username": "boysx",
            "viewed": 846
        },
        "renderpass": [
            {
                "code": "float rand(vec2 p)\n{\n    float t = floor(iTime * 20.) / 10.; // glitch FPS\n    //t = exp(t);\n    return fract(sin(dot(p, vec2(t * 12.9898, t * 78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 uv, float blockiness)\n{   \n    vec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    \n    float n1 = rand(id);\n    float n2 = rand(id+vec2(1,0));\n    float n3 = rand(id+vec2(0,1));\n    float n4 = rand(id+vec2(1,1));\n    \n    vec2 u = smoothstep(0.0, 1.0 + blockiness, lv);\n\n    return mix(mix(n1, n2, u.x), mix(n3, n4, u.x), u.y);\n}\n\nfloat fbm(vec2 uv, int count, float blockiness, float complexity)\n{\n    float val = 0.0;\n    float amp = 0.5;\n    \n    while(count != 0)\n    {\n    \tval += amp * noise(uv + (rand(ceil(uv * 3.) / 3.) * 2. + (float(floor(iTime * 20.) / 10.)/float(count)) - 1.), blockiness);\n        amp *= 0.5;\n        uv *= complexity;    \n        count--;\n    }\n    \n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = uv;\n    \n    uv *= 5.;\n    //uv.x *= noise((ceil(uv * 5.) / 5.) * 0.3, 3.0); // should i?\n    uv.x *= fbm(uv, 2, 3.0, 1.0);\n    \n    float noiseVal = (smoothstep(0.5, 1.0, fbm(uv, 2, 3.0, 1.5))); // take the noise\n\n    vec3 col = vec3(texture(iChannel0, vec2(uv2.x + noiseVal * 0.05, uv2.y)).r,\n                   texture(iChannel0, vec2(uv2.x - noiseVal * 0.05, uv2.y)).g,\n                   texture(iChannel0, vec2(uv2.x, uv2.y)).b); // adjust amplitude\n    col = vec3(1.0, 0.0, 0.0)*smoothstep(0.2, 0.3, noiseVal);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}