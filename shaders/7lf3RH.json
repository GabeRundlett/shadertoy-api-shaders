{
    "Shader": {
        "info": {
            "date": "1621518030",
            "description": "this is a very simple implementation of a particle system using raymarching.\nThe whole idea is to make the position of each particle fully deterministic so that at each point of time, we know exactly where the particle should be.",
            "flags": 0,
            "hasliked": 0,
            "id": "7lf3RH",
            "likes": 2,
            "name": "raymarched particle system",
            "published": 3,
            "tags": [
                "raymarching",
                "particles",
                "particle"
            ],
            "usePreview": 0,
            "username": "maeln",
            "viewed": 615
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415\n#define MAXSTEPS 128\n#define MINDIST  0.0005\n#define MAXDIST  20.0\n#define saturate(x) (clamp(0.0, 1.0, x))\n\nstruct pLight {\n    vec3 position;\n    vec3 ambiant;\n    vec3 diffuse;\n    vec3 specular;\n};\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat sphere(vec3 p, float s)\n{\n    return length(p) - s;\n}\n\n// Compute the position of particle {i} at the time {iTime}.\nvec3 calcPos(int i) {\n    float g = 8.91;\n    float period = 5.0;\n    float mTime = iTime+(float(i)*0.2);\n    \n    // we change the direction of the particle every {period} seconds.\n    float dv = floor(mTime/period+1.0);\n    \n    // Our \"random\" is deterministic so it will give us the same output\n    // if we give the same input, this how we can generate the same direction verctor\n    // for particle {i}\n    float dx = 0.5-random(vec2(i,i)*dv);\n    float dy = 0.5-random(vec2(i-1,i+1)*dv);\n    float dz = 0.5-random(vec2(i+1,i-1)*dv);\n    \n    vec3 dir = vec3(dx, dy, dz);\n    \n    // We skew the direction upward\n    dir += vec3(0.0, 1.0, 0.0);\n    \n    // We compute its position at time {iTime%period}\n    // We multiply direction {dir} by the {iTime} modulo {period} so that we reset the particle position every {period} seconds \n    vec3 p = (dir*3.0 + vec3(0.0,-g/10.0,0.0)*(mod(mTime,period))) * mod(mTime,period);\n    \n    return p;\n}\n\n// Draw all the particles\nvec2 scene(vec3 ray)\n{\n    float de = MAXDIST;\n    float m = 0.0;\n    for(int i=0; i<100; ++i) {\n        // if we just want the distance \n        // de = min(sphere(ray-calcPos(i), 0.1), de);\n        \n        // So that we can return the \"material id\"\n        // probably slower, but we can color each particle differently !\n        float di = sphere(ray-calcPos(i), 0.1);\n        if(di < de) {\n            de = di;\n            m = float(i);\n        }\n    }\n    \n    return vec2(de, m);\n}\n\nvec3 normal(vec3 pos) {\n    vec2 eps = vec2(0.0, MINDIST);\n\treturn normalize(vec3(\n    scene(pos + eps.yxx).x - scene(pos - eps.yxx).x,\n    scene(pos + eps.xyx).x - scene(pos - eps.xyx).x,\n    scene(pos + eps.xxy).x - scene(pos - eps.xxy).x));\n}\n\nvec2 raymarch(vec3 from, vec3 direction)\n{\n    float t = 1.0*MINDIST;\n    int i = 0;\n    float obj = -1.0;\n    for(int steps=0; steps<MAXSTEPS; ++steps)\n    {\n        ++i;\n        vec2 dist = scene(from + t * direction);\n        if(dist.x < MINDIST || t >= MAXDIST) break;\n        t += dist.x;\n        obj = dist.y;\n    }\n    \n    return vec2(t, t > MAXDIST ? -1.0 : obj);\n}\n\nvec3 material(vec2 c, vec3 hit, vec3 sky) {\n    vec3 color = sky;\n    float r = random(vec2(c.y,c.y));\n    float g = random(vec2(c.y-1.0,c.y+1.0));\n    float b = random(vec2(c.y+1.0,c.y-1.0));\n    return vec3(r,g,b);\n}\n\nvec3 phong(vec3 hit, vec3 eye, vec3 N, pLight light, float ks) {\n    vec3 L = normalize(light.position - hit);\n    vec3 V = normalize(eye - hit);\n    vec3 R = reflect(L, N);\n    vec3 ambiant = light.ambiant;\n    vec3 diffuse = max(dot(L,N), 0.0)*light.diffuse;\n    vec3 specular = pow(max(dot(R,V), 0.0), ks)*light.specular;\n    return ambiant + 0.5*(diffuse+specular);\n}\n\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdArc( in vec2 p, in vec2 sca, in vec2 scb, in float ra, in float rb )\n{\n    p *= mat2(sca.x,sca.y,-sca.y,sca.x);\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p);\n    return sqrt(max(0.0, dot(p,p) + ra*ra - 2.0*ra*k)) - rb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    pLight l1 = pLight(vec3(iTime-3.0, 2.0*sin(iTime), cos(iTime)*3.0),\n                       vec3(0.8), vec3(1.0, 0.0, 0.0), vec3(0.8, 0.0, 0.0));\n    \n   \tpLight l2 = pLight(vec3(iTime-3.0, -2.0, -3.0),\n                       vec3(0.3), vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 0.8));\n    \n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 target  = vec3(0.0, 0.0, 0.0);\n\tvec3 eye     = vec3(2.0, 2.0, 2.0);\n    vec3 up      = vec3(0.0, 1.0, 0.0);\n    \n    vec3 eyeDir   = normalize(target - eye);\n    vec3 eyeRight = normalize(cross(up, eye));\n    vec3 eyeUp    = normalize(cross(eye, eyeRight));\n    \n    vec3 rayDir = normalize(eyeRight * uv.x + eyeUp * uv.y + eyeDir);\n    \n    vec3 hi = vec3(255.0, 122.0, 122.0)/255.0;\n    vec3 lo = vec3(134.0, 22.0, 87.0)/255.0;\n    vec3 color = mix(lo, hi, fragCoord.y/iResolution.y);\n    vec3 sky = color;\n    vec2 c = raymarch(eye, rayDir);\n    vec3 hit = eye+c.x*rayDir;\n    vec3 norm = normal(hit);\n    \n    if(c.y>0.0) {\n        color = material(c, hit, color);\n        color = color * phong(hit, eye, norm, l1, 2.0);\n    }\n    \n    \n    // LOGO\n    // left-down circle\n    float d = sdCircle(uv + vec2(1.25, 0.5), 0.1);\n    color = mix(color, vec3(1.0), smoothstep(3.0/iResolution.y, 0.0, d));\n    \n    // left down arc\n    float ta = PI/2.0 * iTime*2.0;// 3.14*(0.5+0.5*cos(iTime*0.52+2.0));\n    float tb = PI/4.0 * (1.0-sin(iTime)/2.0); //3.14*(0.5+0.5*cos(iTime*0.31+2.0));\n    d = sdArc(uv + vec2(1.25, 0.5),vec2(sin(ta),cos(ta)),vec2(sin(tb),cos(tb)), 0.2, 0.02);\n    color = mix(color, vec3(1.0), smoothstep(4.0/iResolution.y, 0.0, d));\n\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}