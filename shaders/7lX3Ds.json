{
    "Shader": {
        "info": {
            "date": "1623956191",
            "description": "Description",
            "flags": 0,
            "hasliked": 0,
            "id": "7lX3Ds",
            "likes": 10,
            "name": "Abstract triangle",
            "published": 3,
            "tags": [
                "3d",
                "triangle",
                "abstract",
                "pattern"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a,0.,1.)\nmat2 r2d(float a){float ca = cos(a),sa=sin(a);return mat2(ca,-sa,sa,ca);}\n#define PI 3.14159265\n\nfloat _bbox(vec3 p, vec3 s)\n{\n  vec3 l = abs(p)-s;\n  return max(l.x,max(l.y,l.z));\n}\n\nvec2 map(vec3 p)\n{\n  float t = iTime*.01;\n  float shp = -p.y;//-texture2D(noise, p.xz*.01+vec2(sin(t),cos(t))).x*.05;\n  p+=vec3(0.,-.75,0.);\n  p.yz*= r2d(PI*.2);\n  p.xy*= r2d(PI*.25);\n\n  shp = min(shp,_bbox(p,vec3(1.)));\n  return vec2(shp,0.);\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n  vec3 p = ro;\n  for (int i = 0; i<steps;++i)\n  {\n    vec2 res = map(p);\n    if (res.x<0.01)\n      return vec3(res.x,distance(p,ro),res.y);\n    p+= rd*res.x;\n  }\n  return vec3(-1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n  float fov = 1.;\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 u = normalize(cross(rd,r));\n  return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n  vec2 e = vec2(0.01,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x,map(p-e.yxy).x,map(p-e.yyx).x));\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col;\n\n  vec3 ro = vec3(0.,-5.,-1.);\n  vec3 ta = vec3(0.,0.,0.);\n  vec3 rd = normalize(ta-ro);\n\n  rd = getCam(rd,uv);\n\n  vec3 res = trace(ro,rd,32);\n  if (res.y>0.)\n  {\n    vec3 p = ro+rd*res.y;\n    vec3 n = getNorm(p,res.x);\n    col = n*.5+.5;\n    vec3 lpos = vec3(sin(iTime),-1./3.,cos(iTime))*10.;\n    vec3 ldir = lpos-p;\n    vec3 nldir = normalize(ldir);\n    vec3 h = normalize(rd-ldir);\n    col = vec3(1.)*pow(sat(-dot(n,h)),.75);\n    vec3 ressh = trace(p+n*0.02,nldir,64);\n    if (ressh.y >0.)\n    {\n\n       col*= .75;\n    }\n    col += vec3(.4,.5,.7)*.5;\n    float dao = 0.6;\n    col *= sat(pow(sat(map(p+n*dao).x/dao),.5)+.1);\n    col+= pow(1.-sat(-dot(rd,n)),.25)*vec3(1.,.5,.7).yzx*.25;\n  }\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (fragCoord.xy-vec2(.5)*iResolution.xy) / iResolution.xx;\n  uv *= 2.;\n  vec3 col = rdr(uv);\n  vec3 o = col;\n  vec3 inv = 1.-sat(col.zyx);\n  inv = mix(inv,1.-inv,sat((uv.x-uv.y+sin((uv.y+uv.x)*5.+iTime*2.)*.1)*400.));\n  col = mix(col,inv,1.-sat((sin((uv.y+uv.x)*20.)+.4)*400.));\n  col = pow(col,vec3(.5));\n  col = mix(col,o,sat((length(uv)-.4)*400.));\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}