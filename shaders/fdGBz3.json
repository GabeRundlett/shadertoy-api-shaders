{
    "Shader": {
        "info": {
            "date": "1658544364",
            "description": "A variant of my \"Banded mosaic\" pattern with a more interesting color palette.",
            "flags": 8,
            "hasliked": 0,
            "id": "fdGBz3",
            "likes": 13,
            "name": "Fractal mosaic 5",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 518
        },
        "renderpass": [
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\n\n\nvec2 triangle_wave(vec2 a,float scale){\n    //a += sign(a.y)/2.;\n    return abs(fract((a+vec2(1.,0.5))*scale)-.5);\n}\n\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 2.*1.5;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0 + vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec2 t2 = vec2(0.);\n    float scale = 1.5;\n    for(int k = 0; k < 9; k++){\n        \n        //uv.x -= t1_(floor(uv),floor(uv));\n        \n        float offset =\n            //Change this to get lots of interesting patterns\n            0.\n            //.25\n            //float(k)/2.\n        ;\n        //uv +=\n            //floor(uv+vec2(1.,.5))/1.5\n            //floor(uv+vec2(0.,1.))/1.5\n        //;\n        //uv.x += floor(uv.x*4.)/4.;\n        \n        //uv.x += fmod(uv.x,1.5); //lace pattern\n        float p1 = sign(uv.x);\n        //t2 /= 1.5; //makes an interesting tessellation\n        //t2 *= (1.5+p1)/2.; //another interesting tessellation\n        uv = (uv+t2)/scale;\n        //uv *= sign(uv.y-uv.x);\n        //uv = abs(uv);\n        //uv += floor(t2.y-t2.x)/2.;\n        \n        //uv = max(uv,uv*sign(uv.yx-uv));\n        t2 = -p1*triangle_wave(uv-.5+offset,scale);\n        uv = t2-p1*triangle_wave(uv.yx+offset,scale);\n        \n        //celtic knot patterns\n        //uv *= 1. + sign(uv.y-uv.x)/9.;\n        \n        col.x =\n            max(uv.y-uv.x,0.)+col.x-.5\n            //fract(max(uv.y-uv.x,0.)+col.x-.5+iTime) //color cycling\n        ;\n        col = abs(col.yzx-col.x/3.);\n        \n        //if(uv.x < uv.y) uv.x += 1.;\n\n        //uv -= .5;\n        //col = abs(col*col-col.yzx);\n        //if(t2.x<t2.y||t2.x>t2.y) {uv=uv.yx;t2=t2.yx;}\n    }\n    fragColor = vec4(col*3.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    //divide by powers of 2 to get interesting rhythms\n    float a1 = floor(a);\n    //a /= 1. + mod(floor(a1/32.),2.);\n    //a /= 1. + mod(floor(a1/16.),2.);\n    //a /= 1. + mod(floor(a1/8.),2.);\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n#define fmod1(x,y) mod(floor(x+floor(t0*y)),y)\n#define fmod2(x,y) mod(floor(y*((x)/y+floor((x)/y)/y)),y)\n\n#define smod(x,y) floor(mod(floor(x)*floor(x),y))\n#define sqmod(x,y) floor(mod(floor(x)*floor(x),y*y)/y)\n#define fmax(x,y,z) max(fmod(x,z),fmod(y,z))\n#define fpow(x,y) pow(y,fmod(x,y))\n#define floor1(x) floor(x)*floor(mod((x)/2.,2.))\n\nvec2 mainSound(int samp, float t){\n  \n  float tempo = 1.;\n  t /= tempo;\n  t /= 1.5;\n  \n  t += fpow(t*4.,2.)*fpow(t/4.,2.);\n  \n  float t0=t, s1 =\n      8.;\n  t = t + floor(t+floor(t/s1))/s1;\n  //t += fpow(t*4.,2.)*fpow(t/4.,2.);\n  float\n  m1 =\n      fmod(t,s1)\n  ,\n  z1 =\n      (1.+fmod(t+floor(t*s1),2.))\n  ;\n  t /=\n      1.+fmod(floor(t+floor(t*s1)+z1),2.)\n  ;\n  //t += fpow(t*4.,2.)*fpow(t/4.,2.);\n  float m3 =\n      fmod((t*8.+m1),s1)\n  ;\n  t /=\n      1.+fmod(floor(t*s1+floor(t/s1+z1)),2.)\n  ;\n  float a=sqrt((1.-sqrt(fract(t*s1))))*.2,\n\n  nb = pow(2.,(m3+z1)/5.+9.)*tempo;\n\n  return vec2(fract(t*nb*.998)*a\n   ,fract(t*nb)*a);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}