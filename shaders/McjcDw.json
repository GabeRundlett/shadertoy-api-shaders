{
    "Shader": {
        "info": {
            "date": "1722441450",
            "description": "cineshader https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/lXsSRN",
            "flags": 1,
            "hasliked": 0,
            "id": "McjcDw",
            "likes": 2,
            "name": "galaxys inside ",
            "published": 3,
            "tags": [
                "fractal",
                "galaxy",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 205
        },
        "renderpass": [
            {
                "code": "\n\n#define iterations 22\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define PI 3.14159265359\n\nconst float displace = 1.;\nconst float gridSize = 6.;\nconst int layers = 1;\nconst float detail = 1.0;\nconst float wave = 5.0;\n\nvec2 rotate(vec2 v, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return v * mat2(c, s, -s, c);\n}\n\nvec3 coordToHex(vec2 coord, float scale, float angle) {\n    vec2 c = rotate(coord, angle);\n    float q = (1.0 / 3.0 * sqrt(3.0) * c.x - 1.0 / 3.0 * c.y) * scale;\n    float r = 2.0 / 3.0 * c.y * scale;\n    return vec3(q, r, -q - r);\n}\n\nvec3 hexToCell(vec3 hex, float m) {\n    return sin(hex / m) * 2.0 - 1.0;\n}\n\nfloat absMax(vec3 v) {\n    return max(max(abs(v.x), abs(v.y)), abs(v.z));\n}\n\nfloat nsin(float value) {\n    return sin(value * 2.0 * PI) * 0.5 + 0.5;\n}\n\nfloat hexToFloat(vec3 hex, float amt) {\n    return mix(absMax(hex), 1.0 - length(hex) / sqrt(3.0), amt);\n}\n\nfloat calc(vec3 hex, float time, float len) {\n    float value = 0.0;\n    for (int i = 0; i < layers; i++) {\n        vec3 cell = hexToCell(hex, 1.0);\n        value += nsin(hexToFloat(cell, nsin(len * wave + time + float(i) / float(layers))) * detail + nsin(time * 0.5));\n    }\n    return value / float(layers);\n}\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nfloat hash( ivec3 p )    // this hash is not production ready, please\n{                        // replace this by something better\n\n    // 3D -> 1D\n    int n = p.x*3 + p.y*113 + p.z*311;\n\n    // 1D hash by Hugo Elias\n\tn = (n << 13) ^ n;\n    n = n * (n * n * 15731 + 789221) + 1376312589;\n    return float( n & ivec3(0x0fffffff))/float(0x0fffffff);\n}\n\nfloat noise( in vec3 x )\n{\n    ivec3 i = ivec3(floor(x));\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+ivec3(0,0,0)), \n                        hash(i+ivec3(1,0,0)),f.x),\n                   mix( hash(i+ivec3(0,1,0)), \n                        hash(i+ivec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+ivec3(0,0,1)), \n                        hash(i+ivec3(1,0,1)),f.x),\n                   mix( hash(i+ivec3(0,1,1)), \n                        hash(i+ivec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// https://www.shadertoy.com/view/XsGfWV\nvec3 aces_tonemap(vec3 color){\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}\n\nvec2 r(vec2 p, float a) { return p*mat2(cos(a), sin(a), -sin(a), cos(a)); }\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n     vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n   \n        \n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n       \n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n         \n            // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*0.3-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.0032*vec3(0,1,0.5),1.);\t\n}\n#define R iResolution.xy\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n vec2 uv0 = uv;\n  vec2 I=fragCoord ;\n    vec2 uv4 = I/R;\n     \n    vec2 p = (2.*I - R) / R.y * 1.5;\n    p.x+=1.3;\n     p.y-=0.5;\n    float fp = pow(.5/length(pow(abs(r(p,.43))\n        *vec2(2,1),vec2(.5))),4.5);\n       \n    p *= mat2(1.7,-2.5,-.4,1.2);    \n    vec3 pos = normalize(vec3(r(p,-.4/length(p)),.25));\n    pos.z -= iTime*0.5;\n    \n    vec3 q = 6.*pos;\n        \n    float f  = 0.5000*noise( q ); q = q*2.;\n          f += 0.2500*noise( q ); q = q*2.;\n          f += 0.1250*noise( q ); q = q*2.;\n          f += 0.0625*noise( q );\n    \n    vec2 n = uv4*(1.-uv4)*3.; float v = pow(n.x*n.y,.8);\n\n    float fr = .06/length(p);\n    f = smoothstep(-.4,2.,f*f) * fr*fr + fp;\n    \n    vec4 O = vec4(aces_tonemap(\n        pow(f*f * vec3(2., .05, 1.5)*v,vec3(.45))*3.5),0);\n  \n\tvec2 uv3 = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n   \n\tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + 1.127)) * 1.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\nvec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\n\n\t uv += (cPos/cLength)*cos(cLength*12.0-iTime*4.0) * 0.23;\n\t\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s = 0.0;\n\tfor (float i = 0.; i < 90.; i++)\n\t{\n      uv3= rotate(uv3*ma ,iTime*0.0001);\n\t\tvec3 p = s * vec3(uv3 , 0.);\n        \n\t\t\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv3*ma );\n\tv1 *= smoothstep(0.52, .0, len);\n\tv2 *= smoothstep(0.515, .1, len);\n\tv3 *= smoothstep(.219, 10.0, len);\n\t\n\tvec3 col2 = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .03;\n    \n    float t3 = iTime * 1.;\n    vec3 col3;\n    float len3 = 1.0 - length(uv) * 0.03;\n    float zoom2 = nsin(t3 * 0.1) + len3 * 10.0;\n    float angle = 2.0 * PI * nsin(t3 * 0.05);\n    vec3 hex = coordToHex(uv, gridSize * zoom2, angle);\n    for (int i = 0; i < 10; i++) {\n        float t2 = t3 + float(i) * displace;\n        hex[i] += 0.2;\n        col3[i] = pow(calc(hex, t3 * displace, len3), 5.0) * (0.2 + 0.8 * sin(PI * len3 * 0.5)) * 2.0 - 1.0;\n    }\n    \n  vec4 o = O;\n    o-=o;\n    for(float d,t = iTime*.01, i = 0. ; i > -1.; i -= .06 )          \t\n    {   d = fract( i -3.*t );                                          \t\n        vec4 c = vec4( ( I - R *.5 ) / R.y *d ,i,0 ) * 28.;            \t\n        for (int j=0 ; j++ <27; )                                      \t\n            c.xzyw = abs( c / dot(c,c)                                 \t\n                    -vec4( 7.-.2*sin(t) , 7.3 , .7 , 1.-cos(t/.8))/7.);\t\n       o -= c * c.yzww  * d--*d  / vec4(2,3,2,2)*0.5;                     \n    }\n    \n\t\n\n\tvec3 from=vec3(1.,.5,0.5)+o.xyz;\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor+= vec4(col2, 1.0);\n     uv3 *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor+= vec4(happy_star(uv3, anim) * vec3(0.35,0.2,1.15)*0.3, 1.0);\n    fragColor+=O+o;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}