{
    "Shader": {
        "info": {
            "date": "1658921036",
            "description": "License CC0: Simple double ended truchet\nSeems I am having a truchet kind of week. Anyway, from experimenting \nwith Wave Function Collapse algorithms or rather cheating it I figured\nI could use the fake idea to create double ended truchets\n ",
            "flags": 0,
            "hasliked": 0,
            "id": "NdKfW3",
            "likes": 9,
            "name": "Simple double ended truchet(BW)",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "// License CC0: Simple double ended truchet in B/W\n// Seems I am having a truchet kind of week. Anyway, from experimenting \n// with Wave Function Collapse algorithms or rather cheating it I figured\n// I could use the fake idea to create double ended truchets\n// Turned out ok and I thought another truchet shader wouldn't hurt.\n\n// A B/W version of: https://www.shadertoy.com/view/fdVfDc\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat cell(vec2 p, float off, float linew) {\n  float r = 0.5+off;\n  float d0 = length(p-0.5)-r; \n  float d1 = length(p+0.5)-r;\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - linew;\n  return d;\n}\n\nfloat truchet_var(float h, float cs, vec2 cp, float off, float linew) {\n  float hs = h >= 0.5 ? 1.0 : -1.0;\n  cp = hs > 0.0 ? cp : vec2(cp.y, -cp.x);\n\n  return cell(cp, off*hs*cs, linew);\n}\n\nvec3 effect(vec2 p) {\n  float hoff0 = 0.5+0.5*sin(0.5*p.x)*sin(0.5*p.y);\n  float hoff1 = 0.5+0.5*cos(0.33*p.x)*cos(0.66*p.y);\n  \n  const float z = 3.0;\n  float aa = 2.0/RESOLUTION.y;\n  aa *= z;\n  p *= z;\n\n  vec2 cp = p-0.5;\n  vec2 cn = round(cp);\n  cp -= cn;\n\n  float h0 = hash(cn);\n  float h1 = fract(1667.0*h0);\n  float h2 = fract(8677.0*h0);\n  float cs = mod(cn.x+cn.y, 2.0) >= 1.0 ? -1.0 : 1.0; \n\n  const float off = 0.1;\n  const float linew = 0.01;\n  float d0 = truchet_var(h1, cs, cp, off, linew*mix(1.0, 2.0, hoff0));\n  float d1 = truchet_var(h2, cs, cp, -off, linew*mix(1.0, 2.0, hoff1));\n\n  vec3 col = vec3(0.0);\n  \n  const vec3 dcol0 = vec3(0.9); \n  const vec3 dcol1 = vec3(0.9); \n\n  float f0 = smoothstep(aa, -aa, d0);\n  float f1 = smoothstep(aa, -aa, d1);\n\n  float shd0 = 1.0-exp(-5.0*max(z*d0, 0.0));\n  float shd1 = 1.0-exp(-5.0*max(z*d1, 0.0));\n  \n  if (h0 > 0.5) {\n    col = mix(col, dcol0, f0);\n    col *= shd1;\n    col = mix(col, dcol1, f1);\n  } else {\n    col = mix(col, dcol1, f1);\n    col *= shd0;\n    col = mix(col, dcol0, f0);\n  }\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  const float r = 20.0;\n  const float spd = 0.5;\n  p += r*sin(vec2(sqrt(0.5), 1.0)*TIME*spd/r);\n   \n  vec3 col = effect(p);\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}