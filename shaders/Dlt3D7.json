{
    "Shader": {
        "info": {
            "date": "1682547986",
            "description": "w√¶tre\n\nwas messing around with noise functions and found this :P",
            "flags": 32,
            "hasliked": 0,
            "id": "Dlt3D7",
            "likes": 13,
            "name": "Procedural Water Texture",
            "published": 3,
            "tags": [
                "water"
            ],
            "usePreview": 1,
            "username": "ThePlaneGuy45",
            "viewed": 474
        },
        "renderpass": [
            {
                "code": "float getHeight(vec2 fragCoord) {\n\n    return dot(texture(iChannel0, mod(fragCoord/iResolution.xy, 1.0)).rgb, vec3(.2126, .7152, .0722));\n\n}\n\nvec4 normal(vec2 fragCoord) {\n\n    float current = getHeight(fragCoord);\n    float x = (getHeight(fragCoord + vec2(1.0, 0.0)) - current) * BUMPSTRENGTH;\n    float y = (getHeight(fragCoord + vec2(0.0, 1.0)) - current) * BUMPSTRENGTH;\n    return vec4(normalize(vec3(x, y, 1.0)), current);\n\n}\n\nvec3 tint(vec3 color) {\n\n    return mix(vec3(0.1, 0.3, 0.5), color, 75.0 / (DEPTH + 75.0));\n\n}\n\nvec3 shade(vec2 fragCoord) {\n\n    vec4 norm = normal(fragCoord);\n    \n    #ifdef LIGHT\n    \n    vec3 lightNorm = normalize(vec3(0.1, -0.1, 1.0));\n    \n    float diff = dot(norm.xyz, lightNorm);\n    \n    vec2 refracNorm = (refract(vec3(0.0, 0.0, -1.0), norm.xyz, 0.35) * DEPTH).xy + fragCoord.xy;\n    vec2 coord = refracNorm / iResolution.xy;\n    \n    #ifdef SPEC\n    \n    float specang = acos(diff);\n    float specexp = specang / (1.0-SPECULAR);\n    float spec = exp(-specexp * specexp) * SPECULAR;\n    \n    #else\n    \n    float spec = 0.0;\n    \n    #endif /* SPEC */\n    \n    return (tint(texture(iChannel1, coord).rgb) + vec3(spec)) * LIGHTSTRENGTH;\n\n    #else\n    \n    return norm.xyz;\n    \n    #endif /* LIGHT */\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(shade(fragCoord),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rot2( float a ){ vec2 v = sin(vec2(1.570796, 0) + a);\treturn mat2(v, -v.y, v.x); }\n\nvec3 random (in vec2 st) {\n    vec3 r;\n    r.x = fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n    r.y = fract(sin(dot(st.xy + vec2(st.x), vec2(12.9898,78.233))) * 43758.5453123);\n    r.z = fract(sin(dot(st.xy + vec2(st.y), vec2(12.9898,78.233))) * 43758.5453123);\n    return r;\n}\n\nvec3 noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec3 a = random(i);\n    vec3 b = random(i + vec2(1.0, 0.0));\n    vec3 c = random(i + vec2(0.0, 1.0));\n    vec3 d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nvec3 fbm (in vec2 st) {\n    vec3 value = vec3(0.0);\n    float amplitude = 0.5;\n    float frequency = 0.0;\n    for (int i = 0; i < 6; i++) {\n        value += amplitude * noise(st);\n        st = st * rot2(0.5) * 2.0 + vec2(100.0, 0.0);\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= SCALE;\n    \n    vec2 p = vec2(fbm(uv + iTime * ROUGHNESS).r, fbm(uv - iTime * ROUGHNESS).r);\n    \n    fragColor = vec4(fbm(uv + p), 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define ROUGHNESS 0.25\n#define DEPTH 100.0\n\n#define LIGHT\n#define SPEC\n\n#define BUMPSTRENGTH 1000.0 * ROUGHNESS\n#define LIGHTSTRENGTH 1.0\n#define SPECULAR 0.92\n\n#define SCALE 2.0",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}