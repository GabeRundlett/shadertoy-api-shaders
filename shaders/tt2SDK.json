{
    "Shader": {
        "info": {
            "date": "1567192924",
            "description": "Really hot",
            "flags": 32,
            "hasliked": 0,
            "id": "tt2SDK",
            "likes": 24,
            "name": "Smoking Hot",
            "published": 3,
            "tags": [
                "smoke"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 948
        },
        "renderpass": [
            {
                "code": "// Smoking Hot\n// Leon Denise 2019.08.30\n// Licensed under hippie love conspiracy\n\n// Using code from\n// Inigo Quilez\n// Morgan McGuire\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Smoking Hot\n// Leon Denise 2019.08.30\n// Licensed under hippie love conspiracy\n\n// Using code from\n// Inigo Quilez\n// Morgan McGuire\n\nconst int count = 6;\nconst float speed = .5;\nconst float range = 1.;\nconst float radius = .05;\nconst float balance = 1.9;\nconst float falloff = 1.8;\nconst float grain = .1;\n\nfloat random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nmat2 rot(float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nfloat smoothmin (float a, float b, float r) { float h = clamp(.5+.5*(b-a)/r, 0., 1.); return mix(b, a, h)-r*h*(1.-h); }\nvec3 look (vec3 eye, vec3 target, vec2 anchor, float fov) {\n    vec3 forward = normalize(target-eye);\n    vec3 right = normalize(cross(forward, vec3(0,1,0)));\n    vec3 up = normalize(cross(right, forward));\n    return normalize(forward * fov + right * anchor.x + up * anchor.y);\n}\n\nfloat geometry (vec3 pos, float time) {\n    float a = 1.0;\n    float scene = 1.;\n    float x = pos.y;\n    float t = time + pos.x / 4.;\n    t = floor(t)+pow(fract(t),.5);\n    for (int i = count; i > 0; --i) {\n        pos.xy *= rot(cos(t)*balance/a+a*2.);\n        pos.zy *= rot(sin(t)*balance/a+a*2.);\n        pos.xz = abs(pos.xz)-range*a;\n        a /= falloff;\n    }\n    scene = length(pos)-(x+1.)*.1;\n    return scene;\n}\n\nfloat raymarch ( vec3 eye, vec3 ray, float time, out float total ) {\n    float dither = random(ray.xy+fract(iTime));\n    total = 0.0;\n    const int count = 20;\n    for (int index = count; index > 0; --index) {\n        float dist = geometry(eye+ray*total,time);\n        dist *= 0.9+0.1*dither;\n        total += dist;\n        if (dist < 0.001 * total)\n            return float(index)/float(count);\n    }\n    return 0.;\n}\n\nvec3 camera (vec3 eye) {\n    vec2 mouse = iMouse.xy/iResolution.xy*2.-1.;\n    if (iMouse.z > 0.5) {\n        eye.yz *= rot(mouse.y*3.1415);\n        eye.xz *= rot(mouse.x*3.1415);\n    }\n    return eye;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 eye = camera(vec3(0,0,4.));\n    vec3 ray = look(eye, vec3(0), uv, 2.);\n    float total = 0.;\n    float dither = random(ray.xy+fract(iTime));\n    float time = iTime*speed + dither*grain;\n    fragColor = vec4(raymarch(eye, ray, time,total));\n    \n    vec4 frame = texture(iChannel0, fragCoord/iResolution.xy);\n    float fade = (1.-iTimeDelta*2.);\n    fragColor = max(fragColor, frame*fade);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}