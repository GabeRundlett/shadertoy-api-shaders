{
    "Shader": {
        "info": {
            "date": "1568521163",
            "description": "A chaotic spreading per pixel\nFIX: Starts another chain around 10 seconds to fix preview\nCellular automata; a fully dark cell has a chance of lighting if a neighbor is newly lit.",
            "flags": 32,
            "hasliked": 0,
            "id": "wd3GWN",
            "likes": 15,
            "name": "A Simple Chaos",
            "published": 3,
            "tags": [
                "pixel",
                "chaos"
            ],
            "usePreview": 0,
            "username": "MadScientistMoses",
            "viewed": 866
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Output to screen\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst float threshold = 0.4; //Higher = less likely to move. About 0.48 is the highest that will survive\nconst int MIN = -2147483648;\nconst int MAX = 2147483647;\nconst vec3 white = vec3(1.0, 1.0, 1.0);\n\nint xorshift(in int value) {\n    // Xorshift*32\n    // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\n\nint nextInt(inout int seed) {\n    seed = xorshift(seed);\n    return seed;\n}\n\nfloat nextFloat(inout int seed) {\n    seed = xorshift(seed);\n    return abs(fract(float(seed) / 3141.592653));\n}\n\nfloat nextFloat(inout int seed, in float max) {\n    return nextFloat(seed) * max;\n}\n\nvec3 nearby(in vec2 fragCoord, in vec2 offset) {\n    vec2 uv = (fragCoord + offset)/iResolution.xy;\n    return vec3(texture(iChannel0, uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int rngSeed = int(fragCoord.x) + int(fragCoord.y) * int(iResolution.x) + int(iTime * 1000.0);\n\n    float mouseDown = iMouse.z;\n    vec2 uvMouse = vec2(iMouse)/iResolution.xy;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 previous = vec3(texture(iChannel0, uv));\n    vec3 next = previous;\n    next *= 0.9;\n\n    if(next[0] < 0.1) {\n        vec3 up = nearby(fragCoord, vec2(0.0, -1.0));\n        vec3 down = nearby(fragCoord, vec2(0.0, 1.0));\n        vec3 left = nearby(fragCoord, vec2(-1.0, 0.0));\n        vec3 right = nearby(fragCoord, vec2(1.0, 0.0));\n        if(up[0] > 0.9 || down[0] > 0.9 || left[0] > 0.9 || right[0] > 0.9) {\n            if(nextFloat(rngSeed, 1.0) > threshold) {\n                next = white;\n            }\n        }\n    }\n\n    //float cycle = fract(iTime / 20.0);\n    //if(abs(cycle - uv.x) < .01) {\n    //    next = white;\n    //}\n\n    if(length(uvMouse-uv)<.01 && mouseDown > 0.5) {\n        next = white;\n    }\n    if((iTime < .1 || (iTime > 9.9 && iTime < 10.1)) && length(uv - vec2(0.5, 0.5)) < .1) {\n        next = white;\n    }\n\n    // Output to screen\n    fragColor = vec4(next,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}