{
    "Shader": {
        "info": {
            "date": "1670632155",
            "description": "I did something. Looks pretty good in my opinion",
            "flags": 0,
            "hasliked": 0,
            "id": "csjSz3",
            "likes": 4,
            "name": "Dark mode truchet tiling",
            "published": 3,
            "tags": [
                "truchet"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "#define SCALE 10.\n#define FLIP_CHANCE 0.5\n#define COLOR_A vec3(0.3, 0.3, 0.5)*0.3\n#define COLOR_B vec3(0.3, 0.3, 0.5)\n\nfloat hash21(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat tile(vec2 p, float thickness, float aa)\n{\n    float d = abs(abs(p.x+p.y)-0.5);\n    return smoothstep(aa*-0.5, aa*0.5, (d-thickness));\n}\n\nmat2 rotMat(float t) { return mat2(cos(t), -sin(t), sin(t), cos(t)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ((fragCoord-iResolution.xy*0.5)/iResolution.y)*rotMat(iTime*0.1)+iTime*vec2(0.2, 0.1);\n    float aa = 2.5/iResolution.y;\n    \n    vec2 suv = fract(uv*SCALE)-0.5;\n    vec2 id = floor(uv*SCALE);\n    if(hash21(id+floor(iTime*0.5+id.x*0.02))<FLIP_CHANCE) suv.x = -suv.x;\n\n    // Output to screen\n    fragColor = vec4(mix(COLOR_A, COLOR_B, vec3(tile(suv, 0.4, aa*SCALE))), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}