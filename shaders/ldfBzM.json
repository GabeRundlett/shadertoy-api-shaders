{
    "Shader": {
        "info": {
            "date": "1498353179",
            "description": "raymarching",
            "flags": 0,
            "hasliked": 0,
            "id": "ldfBzM",
            "likes": 9,
            "name": "Playing with Raymarching",
            "published": 3,
            "tags": [
                "alittletestsceneforplayingwithdifferentraymarchingtechniques"
            ],
            "usePreview": 0,
            "username": "shanesimmsart",
            "viewed": 686
        },
        "renderpass": [
            {
                "code": "float sdSphere(vec3 p, float s)\n{\n  return length(p)-s;\n}\n\nfloat sdTorus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat opU(float d1, float d2)\n{\n    return min(d1,d2);\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nfloat displacement(vec3 p)\n{\n    float freq = 40.0;\n    float gain = 0.05;\n    float trans = iTime/5.0;\n    return sin(freq*p.x)*sin(freq*(p.y+trans))*sin(freq*p.z)*gain;\n}\n\nvec3 opTwist(vec3 p)\n{\n    float c = cos(5.0*p.y);\n    float s = sin(5.0*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);;\n}\n\nfloat map(vec3 p)\n{\n    vec3 c = vec3(2.0);\n    vec3 q1 = opRep(p, c);\n    //q = opTwist(q);\n    \n    float radius = 0.3;\n    \n    float sphere1 = sdSphere(q1, radius);\n    \n    float d1 = displacement(p);\n    \n    float dispSphere = sphere1 + d1;\n    \n    vec3 q2 = p;\n    \n    q2 = opTwist(q2);\n    \n    q2.xy *= mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime));\n    q2.yz *= mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime));\n    \n    float torus1 = sdTorus(q2, vec2(0.5, 0.2));\n    \n    float res = opU(dispSphere, torus1);\n    \n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*(map( pos + e.xyy )) + \n\t\t\t\t\t  e.yyx*(map( pos + e.yyx )) + \n\t\t\t\t\t  e.yxy*(map( pos + e.yxy )) + \n\t\t\t\t\t  e.xxx*(map( pos + e.xxx )) );\n}\n\nmat3 setCamera(in vec3 ro, in vec3 ta, float cr)\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 128; i++)\n    {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv* 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    \n    // CAMERA SET-UP\n    vec4 m = (iMouse / iResolution.xxxx) * 2.0 - vec4(1.0);\n    \n    // camera\t\n    vec3 o = vec3( -0.5+3.5*cos(0.1*iTime + 6.0*m.x), 1.0 + 2.0*m.y, 0.5 + 4.0*sin(0.1*iTime + 6.0*m.x) );\n    vec3 ta = vec3( 0.0 );\n    // camera-to-world transformation\n    mat3 ca = setCamera( o, ta, 0.0 );\n    \n    vec3 r = ca * normalize( vec3(uv.xy,3.0) );\n    \n    \n    \n    float t = trace(o, r);\n    \n    vec3 pos = o + r*t;\n    vec3 nor = calcNormal(pos);\n    \n    float fog = 5.0 / (5.0 + t * t *0.1);\n    \n    vec3 lig = normalize(vec3(-1.0, -1.0, 0.0));\n    \n    float ambient = 0.1;\n    float dif = clamp( dot( nor, lig ), ambient, 1.0 );\n    float inten = 2.0;\n    \n    vec3 n = nor;\n    \n    n.xy = nor.xy * 0.5 + vec2(0.5);\n    n.z = nor.z * 0.5 + 1.0;\n    \n    vec3 kd = n * dif * .18;\n    \n    vec3 ref = reflect(r, nor);\n    float exponent = 32.0;\n    float fre = pow( clamp(1.0+dot(nor,r),0.0,1.0), 2.0 );\n    float ks = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),exponent) * fre;\n    \n    float exposure = 10.0;\n    \n    vec3 col = (kd+ks)*exposure*fog;\n    \n\tfragColor = vec4((col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}