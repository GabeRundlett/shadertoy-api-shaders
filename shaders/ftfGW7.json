{
    "Shader": {
        "info": {
            "date": "1622167402",
            "description": "2D cubic interpolation.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftfGW7",
            "likes": 11,
            "name": "Bicubic Interpolation Surface",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "raymarching",
                "bicubic",
                "cubic",
                "surface",
                "interpolation"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "float bicubic4x4(in vec2 p, in mat4 v) {\n    ivec2 id = ivec2(floor(p));                                         // Cell index\n    vec2 uv = smoothstep(0.0, 1.0, fract(p));                           // Smoothed local cell coordinates\n    return mix(mix(v[id.x    ][id.y    ], v[id.x + 1][id.y    ], uv.x), // Lower horizontal pass\n               mix(v[id.x    ][id.y + 1], v[id.x + 1][id.y + 1], uv.x), // Upper horizontal pass\n               uv.y);                                                   // Vertical pass\n}\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nfloat anim(in float seed) {\n    float a = Hash11(seed * 393.84 + 673.48);\n    float b = Hash11(seed * 348.46 + 183.37);\n    float c = Hash11(seed * 275.35 + 741.69);\n    return 0.5 + 0.5 * sin(iTime * a + b) * c;\n}\n\nfloat mapScene(in vec3 p) {\n    float height = bicubic4x4(p.xz + 1.5, mat4(anim( 1.0), anim( 2.0), anim( 3.0), anim( 4.0),\n                                               anim( 5.0), anim( 6.0), anim( 7.0), anim( 8.0),\n                                               anim( 9.0), anim(10.0), anim(11.0), anim(12.0),\n                                               anim(13.0), anim(14.0), anim(15.0), anim(16.0)));\n\n    return max(p.y - height, max(max(abs(p.x), abs(p.z)) - 1.5, -p.y));\n}\n\nvec3 getNormal(in vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Boilerplate\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 4.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    float t = 0.0;\n    for (int i=0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p) * 0.75;\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n\n            fragColor.rgb += smoothstep(0.0, 0.05, abs(fract(p.x + 2.0) - 0.5));\n            fragColor.rgb += smoothstep(0.0, 0.05, abs(fract(p.z + 2.0) - 0.5));\n            fragColor.rgb *= 0.5 * max(0.0, dot(n, -rd));\n\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}