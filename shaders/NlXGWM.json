{
    "Shader": {
        "info": {
            "date": "1622225977",
            "description": "a nice pattern that reminds me of the late sixties !",
            "flags": 0,
            "hasliked": 0,
            "id": "NlXGWM",
            "likes": 10,
            "name": "pattern study",
            "published": 3,
            "tags": [
                "pattern"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "const float pixSize = 50.0;\nconst float lineWidth = 0.8;\n\nconst vec3 col1 = vec3(.1,.4, 1.);\nconst vec3 col2 = vec3(.1,.1,.4 );\n\n//Dave_Hoskins's hash function\n//https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 fc = fragCoord+iTime*20.;\n    \n    //coordinates of the cell\n    vec2 uv = floor(fc / pixSize);\n    \n    //position inside the cell (0 to pixSize)\n    vec2 diff = mod(fc,pixSize);\n    \n    //direction of the 2 closest cell boundaries\n    vec2 clo = sign(diff-pixSize*0.5);\n    \n    //////\n    \n    // each cell is assigned a random direction (0 to 3)\n    int r = int(hash12(uv)*4.);\n    // w1 and w2 indicates the direction of our cell's closest walls (same 0 to 3 format)\n    int w1 = int(clo.x + 1.);\n    int w2 = int(max(clo.y*2.0,0.0) + 1.);\n    \n    //\n    \n    //we also check the random number of the 2 neighbour cells\n    int rX = int( hash12(uv + vec2(clo.x,0.0))*4.0 );\n    int rY = int( hash12(uv + vec2(0.0,clo.y))*4.0 );\n    //oposite directions\n    int wX = (w1+2)%4;\n    int wY = (w2+2)%4;\n    \n    ////\n        \n    vec3 pix = vec3(0.0); \n    \n    //is our point inside the width of the line ?\n    vec2 truc = abs(diff-pixSize*0.5) - (1.-lineWidth)*0.5*pixSize;\n    \n    // if so, we add color\n    if ( r==w1 && truc.x>0.0 || r==w2 && truc.y>0.0 ) {\n        pix = col1;\n    }\n    \n    // same thing for the neigbours\n    if ( wX==rX && truc.x>0.0 ) {\n        pix += col1;\n    }\n\n    if ( wY==rY && truc.y>0.0 ) {\n        pix += col1;\n    }\n    \n    //round ends\n    if ( pix==vec3(0) && length(abs(diff-pixSize*0.5)-pixSize*0.5) < pixSize*lineWidth*0.5 ) {\n        pix += col1;\n    }\n\n    //if ( (dot(pix,vec3(1.)) == 0.0) && (length(diff-pixSize*0.5) < pixSize*0.3)) {\n    //    pix = vec3(.1,.1,.7);\n    //}\n    \n    //background\n    if ( pix==vec3(0) ) {\n        pix = col2;\n    }\n    \n    fragColor = vec4(pix,1.);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}