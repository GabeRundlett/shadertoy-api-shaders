{
    "Shader": {
        "info": {
            "date": "1563315030",
            "description": "testing using fourier transform to calculate cosine transform, left half is dct type 2 and right half is dct using dft",
            "flags": 32,
            "hasliked": 0,
            "id": "3tfXzB",
            "likes": 2,
            "name": "dct from dft test",
            "published": 3,
            "tags": [
                "cosine",
                "fourier",
                "discrete",
                "transform",
                "dft",
                "dct"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 390
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    if (iFrame > 1) {\n     \tdiscard;\n        return;\n    }\n    \n    if (u.x > .5*iResolution.x) {\n        //dct using dft\n        o = texelFetch(iChannel1,ivec2(iResolution.x-u.x,u.y),0);\n    } else {\n        //type 2 dct\n        float v = 0., sz = iResolution.y;\n        for (float y = 0.; y < sz; y++) v += texelFetch(iChannel0,ivec2(u.x,y),0).x*cos(floor(u.y)*(y+.5)*(PI/sz));\n    \to = vec4(v);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Source image\n\nvoid mainImage( out vec4 o, in vec2 u )\n{\n    if (iFrame > 1) {\n     \to = texelFetch(iChannel1,ivec2(u),0);\n        return;\n    }\n    \n    float cs = floor(1.+pow(u.y*3./iResolution.y,2.))*8./iResolution.y;\n    o = vec4(mod(floor(u.x*cs)+floor(u.y*cs),2.)*.1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159265358979\n\nvec2 cmul(vec2 a, vec2 b) {\n    return b*mat2(a,-a.y,a.x);\n}\nvec2 ang(float a) {\n    return vec2(cos(a),sin(a));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//Calculate N dct from 2N dft, described by John Makhoul here https://pdfs.semanticscholar.org/387e/ed2d96c099655168c4cfa52ec71ada48ca2d.pdf\n\nvoid mainImage( out vec4 o, in vec2 u )\n{\n    if (iFrame > 1) {\n     \to = texelFetch(iChannel1,ivec2(u),0);\n        return;\n    }\n    if (iFrame == 1) {\n     \tvec4 s = texelFetch(iChannel1,ivec2(u),0);\n        o = vec4(cmul(s.xy,ang(-u.y*.5*PI/iResolution.y)).x);\n        return;\n    }\n    \n    if (u.x < .5*iResolution.x) {\n        vec2 v = vec2(0);\n        float sz = iResolution.y, sz2 = sz/2., sz4 = sz/4., sz1 = sz-1.;\n        for (float y = 0.; y < sz2; y++) v += cmul(vec2(texelFetch(iChannel0,ivec2(u.x,y*2.),0).x,0),ang(floor(u.y)*y*(PI*2./sz)));\n        for (float y = 0.; y < sz2; y++) v += cmul(vec2(texelFetch(iChannel0,ivec2(u.x,sz1-y*2.),0).x,0),ang(floor(u.y)*(sz2+y)*(PI*2./sz)));        \n        o = vec4(v,0,0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}