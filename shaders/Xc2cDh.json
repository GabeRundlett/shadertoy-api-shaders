{
    "Shader": {
        "info": {
            "date": "1722261032",
            "description": "https://www.shadertoy.com/view/MfjcDz  https://www.shadertoy.com/view/4fjyR1",
            "flags": 0,
            "hasliked": 0,
            "id": "Xc2cDh",
            "likes": 1,
            "name": "  gradient space",
            "published": 3,
            "tags": [
                "space",
                "stars"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 105
        },
        "renderpass": [
            {
                "code": "const int num = 18;\nuvec3 pcg3d(uvec3 v) {\n    v = v * 1664525u + 1013904223u;\n    v.x += v.y * v.z; v.y += v.z * v.x; v.z += v.x * v.y;\n    v ^= v >> 16u;\n    v.x += v.y * v.z; v.y += v.z * v.x; v.z += v.x * v.y;\n    return v;\n}\n\nvec3 pcg33(vec3 p)\n{\n    uvec3 r = pcg3d(floatBitsToUint(p));\n    return vec3(r) / float(0xffffffffu);\n}\n\nvec3 pcg23(vec2 p)\n{\n    return pcg33(p.xyx);\n}\n\n#define pi 3.14159265\n#define phi 1.6180339887\n\n#define iterations 13\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define PI 3.1415926536\n\nmat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nvec3 star(vec2 uv, vec2 id)\n{\n    vec3 r = pcg23(id);\n    float size = r.z;\n    uv += (r.xy - .5);\n    float d = length(uv);\n    float l = size * .0002 / (d * d);\n    float s1 = min(1., (.002 / abs(uv.x)) + (.002 / abs(uv.y)));\n    uv *= rot(PI * .25);\n    float s2 = min(1., (.002 / abs(uv.x)) + (.002 / abs(uv.y)));\n    float s = s1 * smoothstep(.25, 0., d) + s2 * smoothstep(.15, 0., d);\n    s *= smoothstep(.95, 1., size) * .5;\n    float b = l +  .5 * s;\n    b *= smoothstep(1., .5, d);\n    float blink_i = smoothstep(0., .8, fract(r.z * 1000.));\n    float blink_f = smoothstep(0., 1., fract(r.z * 100.));\n    float blink = (.5+.5*sin(blink_f * iTime * 10.))*(blink_i*.5);\n    return b * (1.0 - blink) * vec3(\n        .5*smoothstep(1., .5, size)+.5,\n        (.25 + .75*smoothstep(0., 0.5, size)) * (.5+.5*smoothstep(1., 0.5, size)) ,\n        smoothstep(1., .5, size));\n        \n}\n\nvec3 layer(vec2 uv, vec2 id)\n{\n    vec3 col = vec3(0);\n    for (float x = -1.; x <= 1.; x++)\n    {\n        for (float y = -1.; y <= 1.; y++)\n        {\n            vec2 off = vec2(x, y);\n            col += star(uv - off, id + off);\n        }\n    }\n    return col;\n}\n\n#define N 6.\n\nvoid mainImage( out vec4 O, vec2 U ){\n\n    vec2 r = iResolution.xy;\n    vec2 uv=U.xy/iResolution.xy;\n\n    vec3 col = vec3(0);\n    float t2 = iTime * .05;\n    \n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    \n    \n    for (float f = 0.; f < 1.; f += 1. / N)\n    {\n        float depth = fract(f + t2);\n        float scale = mix(10., .1, depth);\n        vec2 uv2 = uv * scale;\n        \n        uv2 += vec2(123.45, 55.22) * f;\n        vec2 gv = fract(uv2) - .5;\n        vec2 id = floor(uv2);\n        col += depth * layer(gv, id) * smoothstep(1., .95, depth);\n    }\n    \n    col = pow(col*vec3(.1,.2,3.), vec3(0.4545));\n    vec2 cuv = (2.*U-r)/r.y;\n  \n    vec2 muv = (2.*iMouse.xy-r)/r.y;\n\n \n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n    vec3 from=vec3(1.,.5,0.5);\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); \n        p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01) );// tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.3-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\t\t\n      vec2 o = (U.xy-iResolution.xy*.5)/min(iResolution.x,iResolution.y);\n\n    o*=ma;\n    float n = length(o);\n\n    \n    vec3 o_col = vec3(\n        sin(30.*n+0.3+iTime),\n        sin(30.*n+0.6+iTime),\n        sin(30.*n+0.9+iTime)\n    )*.5+.5;\n    \n\n  \n\n    o_col.x = 1.-pow(abs(o_col.x-.5), 1./3.);\n    o_col.y = 1.-pow(abs(o_col.y-.5), 1./3.);\n    o_col.z = 1.-pow(abs(o_col.z-.5), 1./3.);\n\n    if (cos(uv.x*pi*2.*float(num)) > .99){\n    \n        O = vec4(1.-uv.y)*.5;\n         O*= vec4(v*.05,1.);\n        return;\n    }\n    \n    O+=vec4( col,.1);\n    float x = uv.y* o_col.x;\n    switch (int(uv.x * float(num))){\n        case 0:\n            O = vec4(\n                sqrt(x* o_col.x),\n                x*x,\n                x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 1:\n            O = vec4(\n                sqrt(x* o_col.x),\n                x,\n                x*x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 2:\n            O = vec4(\n                x,\n                sqrt(x* o_col.x),\n                x*x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 3:\n            O = vec4(\n                x*x,\n                sqrt(x* o_col.x),\n                x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 4: \n            O = vec4(\n                x*x,\n                x,\n                sqrt(x),\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n            return;\n        case 5:\n            O = vec4(\n                x,\n                x*x,\n                sqrt(x* o_col.x),\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 6:\n            O = vec4(\n                x,\n                x*x*x,\n                x*x*x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 7: \n            O = vec4(\n                x*x*x,\n                x,\n                x*x*x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 8: \n            O = vec4(\n                x*x*x,\n                x*x*x,\n                x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 9:\n            O = mix(x*(sin(-x*pi*1.5 + vec4(2.*pi/3.,4.*pi/3.,0,0)))* o_col.x, vec4(1), x);\n            return;\n             O*= vec4(v*.05,1.);\n        case 10:\n            O = vec4(\n                x,\n                x,\n                x*x*x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 11:\n            O = vec4(\n                x*x*x,\n                x,\n                sqrt(x),\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n            return;\n        case 12:\n            O = vec4(\n                x,\n                x*x*x,\n                x*x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 13:\n            O = vec4(\n                x,\n                x*x,\n                x*x*x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 14:\n            O = vec4(\n                x*x,\n                x,\n                x*x*x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 15:\n            O = vec4(\n                x*x*x,\n                x,\n                x*x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 16:\n            O = vec4(\n                x*x*x,\n                x*x,\n                x,\n                1.\n            )* o_col.x;\n             O*= vec4(v*.05,1.);\n              O+=vec4( col,.1);\n            return;\n        case 17:\n            O = vec4(\n                x*x,\n                x*x*x,\n                x,\n                1.\n            )* o_col.x ;\n                 O*= vec4(v*.01,1.);\n                  O+=vec4( col,.1);\n            return;\n            \n        default: \n            O = vec4(.1);\n              O+= vec4(v*.05,1.);\n               O+=vec4( col,.1);\n            return;\n                \n    }\n  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}