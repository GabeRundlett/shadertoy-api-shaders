{
    "Shader": {
        "info": {
            "date": "1707433393",
            "description": "My first Lighting System. It does use some SDFs and math functions from iq.",
            "flags": 0,
            "hasliked": 0,
            "id": "XcSXWw",
            "likes": 3,
            "name": "Lighting system very basic",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "SamKriki",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "vec3 ambient = vec3(0);\n\n\n\nmat2 rot2D(float angle){\n     float s = sin(angle);\n     float c = cos(angle);\n     return mat2(c,-s,s,c);\n\n}\n\n\n\n\nfloat sdbox(vec3 p,vec3 r){\n    vec3 q = abs(p) - r;\n    return length(max(q,0.0));\n }\n\n\n\n\nfloat map(vec3 p , bool wcol){\n    \n    float d = length(p-vec3(0))-1.0;\n    if(d < 0.001 && wcol) ambient = vec3(2.45, 2.04, 1.60)*0.2;\n    float ground = p.y+3.0;\n    \n    d = min(d,ground);\n    \n    return d;\n    \n}\n\nvec3 calcNormal( in vec3 p ) \n{\n    const float eps = 0.0001; \n    const vec2 h = vec2(eps,0);\n    return normalize( vec3(map(p+h.xyy, false) - map(p-h.xyy, false),\n                           map(p+h.yxy, false) - map(p-h.yxy, false),\n                           map(p+h.yyx, false) - map(p-h.yyx, false) ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float bigH = 0.0;\n    float t = mint;\n    for( int i=0; i<256 && t<maxt; i++ )\n    {\n        float h = map(ro + rd*t, false);\n        if( h<0.001 )\n            return 0.0;\n        bigH = max(bigH,h);\n        if(bigH > 0.5){res = min( res, k*h/t );}\n        t += h;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 4.0;\n    \n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n        //This part was improved by @maras:\n    vec2 m = (iMouse.xy * vec2(4.0, 1.0) - iResolution.xy) / iResolution.y;\n    m = vec2(m.x + iTime * .3,m.y);\n    \n    vec3 modelCol = vec3(0.0);\n    vec3 col = vec3(0.0);\n    vec3 lightCol = vec3(1.0); \n    vec3 lighting = vec3(1.);\n    vec3 skyCol = (vec3(132,205,238)/255. + vec3(1,1,1))*.5;\n    float shadowCol = 1.0;\n    \n    vec3 skySource = vec3(0,100,0);\n    vec3 lightSource = vec3(0,4,10.);\n    vec3 ro = vec3(0,0,-5.0*zoom);\n    vec3 rd = normalize(vec3(uv*0.5,1)); \n    \n    \n    float rms = 200.0;\n    float t = 0.0;\n    \n    ro.yz *= rot2D(-m.y);\n    rd.yz *= rot2D(-m.y);\n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n    \n    \n    float i = 0.0;\n    vec3 p = vec3(0);\n    for(i = 0.0; i<rms;i++){\n    \n        p = ro + rd * t;\n        \n        float d = map( p, true );\n        \n        t += d;\n        \n        \n        if(d>100. || d<0.0001){break;}\n        \n    }\n    \n    vec3 normal = calcNormal(p);\n    \n    shadowCol = softshadow(p + normal*0.4,normalize(lightSource-p),0.0,40.,32.);\n    \n    float ds = max(0.0, dot(lightSource, normal));  //Diffuse St채rke Berechnen\n    vec3 diffuse = ds * lightCol;\n    \n    vec3 reflectSource = normalize(reflect(-lightSource, normal));\n    float spS = max(0.0, dot(normalize(p), reflectSource)); //Specular St채rke berechnen\n          spS = pow(spS, 32.0); //spS verst채rken\n    vec3  sp = spS * lightCol;\n    \n    lighting = lighting * 0.5 + sp * 0.5 + diffuse * 0.5;\n    \n    float dssky = max(0.0, dot(skySource, normal));  //Diffuse St채rke Berechnen\n    vec3 diffusesky = dssky * skyCol * 0.003;\n    \n    modelCol = vec3(t/400.); \n    col = modelCol * lighting;\n    \n    col = min(col,vec3(.8));\n    col *= max(shadowCol,0.4);\n    col += diffusesky;\n    col += ambient;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}