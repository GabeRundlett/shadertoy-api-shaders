{
    "Shader": {
        "info": {
            "date": "1727198011",
            "description": "[url]https://www.mathcurve.com/surfaces.gb/plucker/plucker.shtml[/url]\n\nMouse rotates, up/down to zoom.",
            "flags": 48,
            "hasliked": 0,
            "id": "M32czm",
            "likes": 18,
            "name": "Plücker Conoids",
            "published": 3,
            "tags": [
                "sdf",
                "surface",
                "plucker",
                "conoid",
                "plcker"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 136
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Plücker Conoids, mla, 2024\n//\n// A conoid is a surface swept out by a moving line, in this case the line\n// revolves about an axis while moving sinusoidally along the axis.\n//\n// More details here: https://www.mathcurve.com/surfaces.gb/plucker/plucker.shtml\n//\n////////////////////////////////////////////////////////////////////////////////\n\nfloat maxdist = 20.0;\nfloat N = 1.0; // Number of folds\n\n// f(x,y,z) = y-sin(N*atan(z,x))\nfloat conoid(vec3 p, out vec2 uv) {\n  float theta = atan(p.z,p.x);\n  float d = abs(p.y-sin(N*theta));\n  if (mod(N,2.0) != 0.0) {\n    d = min(d,abs(p.y-sin(N*(theta+PI)))); // Double up surface\n  }\n  float r = length(p.xz);\n  float grad = 1.0+N/r; // Approximation to gradient\n  d /= grad;\n  d -= 0.005; // Surface thickness\n  d = max(d,r-4.0); // Clip at radius 4 cylinder\n  uv = vec2(theta/PI,r/4.0); // Texture coords\n  return d;\n}\n\nfloat map(vec3 pos, out vec2 uv) {\n  float d = conoid(pos,uv);\n  // We get an annoying spike along the axis which is troublesome\n  // to get rid of. This masks it out, but the cut leaves a flat surface.\n  // It would nice to find a better way.\n  if (key(CHAR_X)) d = max(d,abs(pos.y)-1.02); // Trim the whiskers\n  return d;\n}\n\nfloat map(vec3 pos) {\n  vec2 uv;\n  return map(pos,uv);\n}\n\nvec2 uvmap(vec3 pos) {\n  vec2 uv;\n  map(pos,uv);\n  return uv;\n}\n\n// Tetrahedron technique, from:\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(vec3 p) {\n  float h = 0.0005;\n  vec2 k = vec2(1,-1);\n  return normalize( k.xyy*map( p + k.xyy*h ) + \n                    k.yyx*map( p + k.yyx*h ) + \n                    k.yxy*map( p + k.yxy*h ) + \n                    k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat march(in vec3 ro, in vec3 rd) {\n  const float precis = 0.001;\n  float t = 0.0;\n  for (int i = 0; i < 200; i++) {\n    //assert(i < 100);\n    if (t > maxdist) break;\n    vec3 p = ro+rd*t;\n    float h = map(p);\n    if (h < precis) break;\n    h *= 0.8;\n    t += h;\n  }\n  return t;\n}\n\nvec3 transform(in vec3 p) {\n  vec2 mouse = iMouse.xy;\n  if (mouse.x > 0.0) {\n    float theta = (2.0*mouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*mouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (!key(CHAR_R)) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.2);\n  }\n  return p;\n}\n\nvec3 basecolor(int type) {\n  if (type == 0) return vec3(1,1,0.5);\n  if (type == 1) return vec3(1,0.25,0.25);\n  return vec3(1,0,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n  float camera = 8.0;\n  camera *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  vec3 ro = vec3(0,0,-camera);\n  vec3 rd = vec3(p, 2);\n  vec3 light = vec3(0.5, 0.8, -3.0);\n  ro = transform(ro);\n  rd = transform(rd);\n  light = transform(light);\n  light = normalize(light);\n  rd = normalize(rd);\n  float cycle = 11.0;\n  float tt = mod(0.5*iTime,cycle);\n  tt = min(tt,cycle-tt);\n  N = floor(tt);\n  N += max(1.0,2.0*fract(tt));\n  vec3 col = vec3(0);\n  float t = march(ro, rd);\n  if (t < maxdist) {\n    vec3 pos = ro + t * rd;\n    //assert(abs(pos.y) <= 1.005);\n    vec3 n = calcNormal(pos);\n    vec2 uv = uvmap(pos);\n    vec2 t = floor(2.0*N*uv);\n    float type = mod(t.x+t.y,2.0);\n    col = basecolor(int(type));\n    col *= texture(iChannel1,uv).xyz;\n    float diffuse = clamp(dot(n, light), 0.0, 1.0);\n    col *= 0.2 + 0.8*diffuse;\n    float specular = pow(max(0.0,dot(reflect(light,n),rd)),10.0);\n    col += 0.3*specular*vec3(1);\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 map(vec2 screenpos) {\n  return (2.0*screenpos-iResolution.xy)/iResolution.y;\n}\n\nvec2 initselection(int i) {\n  return vec2(0);\n}\n \nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2) {\n    if (key(i)) t.xy = iMouse.xy;\n    else t.zw = iMouse.xy;\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse down\n        for (int i = 1; i <= 4; i++) {\n          vec2 p = texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < 0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0) {\n      t.xy = initselection(i); // Current coordinates\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PI\t= 3.14159265359;\n\nbool alert = false;\nvoid assert(bool test) {\n  if (!test) alert = true;\n}\n\nfloat dot2(vec2 p) {\n return dot(p,p);\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nfloat length2(vec3 p) {\n  return dot(p,p);\n}\n\n// Perpendicular distance from p to segment from origin to b\nfloat segment2(vec3 p, vec3 b) {\n  float t = dot(p,b)/dot(b,b);\n  t = clamp(t,0.0,1.0);\n  return length2(p-t*b);\n}\n\n// Perpendicular distance from p to segment ab\nfloat segment2(vec3 p, vec3 a, vec3 b) {\n  return segment2(p-a,b-a);\n}\n\n// Triple product\nfloat triple(vec3 p,vec3 q, vec3 r) { return dot(cross(p,q),r); }\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nconst int KEY_SHIFT = 16;\nconst int KEY_ALT = 18;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_K = 75;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}