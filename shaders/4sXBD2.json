{
    "Shader": {
        "info": {
            "date": "1498062745",
            "description": "whom whom\nBy Santa",
            "flags": 0,
            "hasliked": 0,
            "id": "4sXBD2",
            "likes": 0,
            "name": "visualizer Mandelbrot",
            "published": 3,
            "tags": [
                "effekt"
            ],
            "usePreview": 0,
            "username": "Zeusist",
            "viewed": 421
        },
        "renderpass": [
            {
                "code": "// Mandelbrot mit Auto. Zoom in und Zoom out\n// und das Ã¤ndern der Farben zu der Musik(Sound an machen)\n\n\nconst float colorspeed1 = 0.25;\nconst float colorspeed2 = 0.15;\nconst float rotspeed = 0.33;\nconst float aint = 4.0;\n\n\nvoid mainImage ( out vec4 fragColor, in vec2 fragCoord )\n    \n{\n    \n\tvec2 ax = fragCoord.xy / iResolution.x;\n    \n    //ax.x and ax.y Camera Pos.\n    //Start Pos Camera\n    ax.x -= 0.65;\n    ax.y -= iResolution.y / iResolution.x/2.0;\n    \n    //Camera Speed.\n    float time = sin ( ( iTime+10.0 ) /5.0 ) *3.0+5.0;\n    \n    //End Pos Camera\n    ax *= 35.0/pow ( time,time );\n    ax.x += 0.5;\n    ax.y += iResolution.y/iResolution.x/2.0;\n    ax.x += -0.101903;\n    ax.y += 0.031983;\n    \n    vec2 m = ax;\n    \n    //Outline\n    float ou = 0.2;\n    float light = 1.0;\n    \n    //MandelBrot Funct.\n    for ( int n = 0; n < 20000; n++ ) \n        \n    \t{  \n    \tax = mat2 ( ax,-ax.y,ax.x ) * ax + m;\n        if( dot ( ax,ax ) <2.0 ) {\n    \t\tou += 0.1;\n            \n    \t}\n            \n    }\n    \n    // Color\n    \n   \tfragColor = vec4 ( cos ( ou+10.0 ) ,sin ( 0.0 ) ,floor ( 0.0) ,1.0 );\n\n    float cm = aint* ( texture ( iChannel0, vec2 ( 0.02,0.26 ) ) .x-0.7 );\n    float cx = aint* ( texture ( iChannel0, vec2 ( 0.2,0.4 ) ) .x-0.8 );\n\t\n\tfloat cs = ( 0.93+cm*cx ) * ( 0.35+abs ( sin ( iTime*colorspeed1 ) ) );\n\tfloat cc = ( 0.93+cm ) * ( 0.35+abs ( cos ( iTime*colorspeed2 ) ) );\n\t\n\t//fragColor = vec4 ( cs*cc*col, cs*col, cc*col, 1.0 );\n\tfragColor = fragColor.x*vec4 ( cs*cc*light, cs*light, cc*light, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 20,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}