{
    "Shader": {
        "info": {
            "date": "1530336957",
            "description": "Generates pressure systems (click to show) and wind flow patterns from a land/ocean map.\n\nBased on [url=https://web.archive.org/web/20130619132254/http://jc.tech-galaxy.com/bricka/climate_cookbook.html]The Climate Cookbook[/url] and some simple modelling.",
            "flags": 32,
            "hasliked": 0,
            "id": "MdGBWG",
            "likes": 220,
            "name": "Global Wind Circulation",
            "published": 3,
            "tags": [
                "simulation",
                "earth",
                "map",
                "flow",
                "vector",
                "model",
                "atmosphere",
                "particle",
                "wind",
                "pressure",
                "circulation",
                "climate"
            ],
            "usePreview": 0,
            "username": "davidar",
            "viewed": 68301
        },
        "renderpass": [
            {
                "code": "// comment out the following line for original style\n#define PAPER\n\n// uncomment the following line for Mollweide projection\n//#define ELLIPTICAL\n\n#ifdef PAPER\n#define  LOW_PRESSURE vec3(0.,0.5,1.)\n#define HIGH_PRESSURE vec3(1.,0.5,0.)\n#else\n#define  LOW_PRESSURE vec3(1.,0.5,0.)\n#define HIGH_PRESSURE vec3(0.,0.5,1.)\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float lat = 180. * fragCoord.y/iResolution.y - 90.;\n#ifdef ELLIPTICAL\n    fragCoord.x -= iResolution.x/2.;\n    fragCoord.x /= sqrt(1. - pow(lat/90., 2.));\n    if (abs(fragCoord.x/iResolution.x) > 0.5) return;\n    fragCoord.x += iResolution.x/2.;\n    fragCoord.x -= 0.05 * iTime * iResolution.x;\n    fragCoord.x -= iMouse.x;\n    fragCoord.x = mod(fragCoord.x, iResolution.x);\n#endif\n    vec2 p = fragCoord * MAPRES / iResolution.xy;\n    if (p.x < 1.) p.x = 1.;\n    vec2 uv = p / iResolution.xy;\n    float land = texture(iChannel0, uv).x;\n    fragColor = vec4(0,0,0,1);\n    if (0.25 < land && land < 0.75) fragColor.rgb = vec3(0.5);\n    float mbar = texture(iChannel1, uv + PASS3).x;\n    if (iMouse.z > 0.) {\n        vec3 r = LOW_PRESSURE;\n        r = mix(r, vec3(0), smoothstep(1000., 1012., floor(mbar)));\n        r = mix(r, HIGH_PRESSURE, smoothstep(1012., 1024., floor(mbar)));\n        fragColor.rgb += 0.5 * r;\n    } else {\n        vec2 v = texture(iChannel1, uv + PASS4).xy;\n        float flow = texture(iChannel2, fragCoord/iResolution.xy).z;\n        vec3 hue = vec3(1.,0.75,0.5);\n#ifndef PAPER\n        hue = .6 + .6 * cos(atan(v.y,v.x) + vec3(0,23,21));\n#endif\n        float alpha = clamp(length(v), 0., 1.) * flow;\n        fragColor.rgb = mix(fragColor.rgb, hue, alpha);\n    }\n#ifdef PAPER\n    fragColor.rgb = 0.9 - 0.8 * fragColor.rgb;\n    if (mod(fragCoord.x, floor(iResolution.x/36.)) < 1. ||\n        mod(fragCoord.y, floor(iResolution.y/18.)) < 1.)\n        fragColor.rgb = mix(fragColor.rgb, vec3(0.,0.5,1.), 0.2);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAPRES vec2(144,72)\n\n#define PASS1 vec2(0.0,0.0)\n#define PASS2 vec2(0.0,0.5)\n#define PASS3 vec2(0.5,0.0)\n#define PASS4 vec2(0.5,0.5)\n\n#define N vec2( 0, 1)\n#define E vec2( 1, 0)\n#define S vec2( 0,-1)\n#define W vec2(-1, 0)\n\n#define PI 3.14159265359\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n\n// https://www.shadertoy.com/view/4djSRW\n// Trying to find a Hash function that is the same on ALL systens\n// and doesn't rely on trigonometry functions that change accuracy \n// depending on GPU. \n// New one on the left, sine function on the right.\n// It appears to be the same speed, but I suppose that depends.\n\n// * Note. It still goes wrong eventually!\n// * Try full-screen paused to see details.\n\n\n#define ITERATIONS 4\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n// For smaller input rangers like audio tick or 0-1 UVs use these...\n//#define HASHSCALE1 443.8975\n//#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n//#define HASHSCALE4 vec3(443.897, 441.423, 437.195, 444.129)\n\n\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n        vec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n        vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n        p3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n        vec3 p3 = fract(vec3(p) * HASHSCALE3);\n        p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n        vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n        p3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n        vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n        p3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n        vec4 p4 = fract(vec4(p) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n        vec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n        vec4 p4 = fract(vec4(p.xyzx)  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n        p4 = fract(p4  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// 1-bit land/ocean map, 2.5 degree resolution\n// auto-generated by https://github.com/rkibria/img2shadertoy\nconst vec2 bitmap_size = vec2(160, 72);\nconst int[] palette = int[] ( 0x00000000, 0x00ffffff );\nconst int[] rle = int[] ( 0x0001ff91, 0x03ff9100, 0xf8000000, 0x0008ff8f, 0xfffc0000, 0xf80fffff, 0x010aff89, 0xfe000000, 0x39ffffff, 0xff88fc3c, 0x0000030a, 0xffffc000, 0xc0003fff, 0x0100ff88, 0x80050084, 0x0000ffbf, 0x00ff87fe, 0x07008607, 0x20000078, 0xf7ffffff, 0x0f00ff83, 0x20000086, 0x20060083, 0xffff8fff, 0x00873fff, 0x00844000, 0x00007004, 0x0089f437, 0x00cd0100, 0x00921800, 0x00920c00, 0x00921c00, 0x008a1c00, 0x00860800, 0x008a3800, 0x00861000, 0x00897800, 0x00870400, 0x0089f800, 0x86400201, 0x01f80100, 0x0f000088, 0xf80b0087, 0x80000003, 0x00000007, 0x871fc3c0, 0x07f80b00, 0x0f800000, 0xc0000000, 0x00871fff, 0x000ff80b, 0x001f8000, 0xffc00000, 0x0b00871f, 0x00001ff0, 0x00001fc0, 0x1fffe000, 0xf00b0087, 0xc000003f, 0x0000063f, 0x870fffe0, 0xfff00b00, 0x3fe00000, 0xc0000004, 0x00870fff, 0x00fff00b, 0x0c3fe000, 0xfe000000, 0x0b008703, 0x0000fffc, 0x000cffe0, 0x027c0000, 0xfe0a0087, 0xe00000ff, 0x000008ff, 0x00883000, 0x01fffe05, 0x8dffe000, 0xffff0500, 0xffe00003, 0xff0b008d, 0xe00003ff, 0x000000ff, 0x87060004, 0xffff0b00, 0xfff00000, 0x02000000, 0x008703c1, 0x0007ff0a, 0x01fff000, 0x31710000, 0xff090088, 0xf000000f, 0x800003ff, 0x09008971, 0x000007fe, 0x0007fff0, 0x00896140, 0x0001fe09, 0x0ffffdf0, 0x88410100, 0xfec00b00, 0xfff80000, 0x80000fff, 0x00870600, 0x0008200a, 0xfffffc00, 0x0200c009, 0x700b0088, 0xfe000000, 0xc007ffff, 0x87010f80, 0x001e0b00, 0xfffc0000, 0x80e01eff, 0x00860107, 0x081bc00b, 0xfffc0000, 0xc3e07e7f, 0x0b008703, 0x000101c0, 0x7ffffe00, 0x07e7f0ff, 0xe00c0087, 0x00000001, 0x7fbffffc, 0x017ff7f8, 0xf00b0086, 0x00000081, 0x8ffffffc, 0x87ffffff, 0x83fc0c00, 0xf0000000, 0xfff7ffff, 0x8601ffff, 0x7ffa0700, 0xf0000000, 0xff83e77f, 0xfe070087, 0x000001ff, 0x83c00fe0, 0x853000ff, 0xff800800, 0x000003ff, 0x83c00f00, 0x85c800ff, 0xffc00e00, 0x000003ff, 0xcffb00f0, 0x043fffff, 0x0d008401, 0x07ffffc0, 0x61f00000, 0xffffcf67, 0x00850fff, 0xffffc00e, 0x8000000f, 0xfff707d7, 0x023fffff, 0xc00d0084, 0x003fffff, 0xafff8000, 0xffffffc3, 0x0900857f, 0x3fffffc0, 0xff800002, 0xff83e7ff, 0xe0070085, 0x03ffffff, 0x85fec000, 0x840100ff, 0xfff00700, 0x0001ff7f, 0xff85f890, 0x0083c000, 0xfff80108, 0x00007e1f, 0xff842840, 0x01c07f0f, 0x07000000, 0x6e03fffe, 0x7c000000, 0x0eff84fc, 0x00000101, 0xffffffc0, 0x00700603, 0x84ee7c00, 0x1f7f0eff, 0xff800000, 0x384fffff, 0xf00380f8, 0x0cff85fe, 0x8700007f, 0x7fffffff, 0x0003f878, 0x0eff87e0, 0xffc00000, 0x1e5c7bff, 0x80003ff8, 0x84df007f, 0x0d0084ff, 0xfc07f63e, 0x0000007f, 0xfffff820, 0x00841fef, 0xfd03c00c, 0x00fffc01, 0x00400000, 0x00875ffe, 0xf0e91204, 0x0083ffff, 0x1fa00302, 0x80060087, 0xfffff3f8, 0x0083f000, 0x00880300, 0xfffff004, 0x00c603ff );\n\nconst int rle_len_bytes = rle.length() << 2;\n\nint get_rle_byte( in int byte_index )\n{\n        int long_val = rle[ byte_index >> 2 ];\n        return ( long_val >> ( ( byte_index & 0x03 ) << 3 ) ) & 0xff;\n}\n\nint get_uncompr_byte( in int byte_index )\n{\n        int rle_index = 0;\n        int cur_byte_index = 0;\n        while( rle_index < rle_len_bytes )\n        {\n                int cur_rle_byte = get_rle_byte( rle_index );\n                bool is_sequence = int( cur_rle_byte & 0x80 ) == 0;\n                int count = ( cur_rle_byte & 0x7f ) + 1;\n\n                if( byte_index >= cur_byte_index && byte_index < cur_byte_index + count )\n                {\n                        if( is_sequence )\n                        {\n                                return get_rle_byte( rle_index + 1 + ( byte_index - cur_byte_index ) );\n                        }\n                        else\n                        {\n                                return get_rle_byte( rle_index + 1 );\n                        }\n                }\n                else\n                {\n                        if( is_sequence )\n                        {\n                                rle_index += count + 1;\n                                cur_byte_index += count;\n                        }\n                        else\n                        {\n                                rle_index += 2;\n                                cur_byte_index += count;\n                        }\n                }\n        }\n\n        return 0;\n}\n\n\nint getPaletteIndexXY( in ivec2 fetch_pos )\n{\n        int palette_index = 0;\n        if( fetch_pos.x >= 0 && fetch_pos.y >= 0\n                && fetch_pos.x < int( bitmap_size.x ) && fetch_pos.y < int( bitmap_size.y ) )\n        {\n                int uncompr_byte_index = fetch_pos.y * ( int( bitmap_size.x ) >> 3 )\n                        + ( fetch_pos.x >> 3);\n                int uncompr_byte = get_uncompr_byte( uncompr_byte_index );\n\n                int bit_index = fetch_pos.x & 0x07;\n                palette_index = ( uncompr_byte >> bit_index ) & 1;\n        }\n        return palette_index;\n}\n\n\nint getPaletteIndex( in vec2 uv )\n{\n        int palette_index = 0;\n        ivec2 fetch_pos = ivec2( uv * bitmap_size );\n        palette_index = getPaletteIndexXY( fetch_pos );\n        return palette_index;\n}\n\nvec4 getColorFromPalette( in int palette_index )\n{\n        int int_color = palette[ palette_index ];\n        return vec4( float( int_color & 0xff ) / 255.0,\n                                float( ( int_color >> 8 ) & 0xff) / 255.0,\n                                float( ( int_color >> 16 ) & 0xff) / 255.0,\n                                0 );\n}\n\nvec4 getBitmapColor( in vec2 uv )\n{\n        return getColorFromPalette( getPaletteIndex( uv ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 uv = fragCoord / bitmap_size;\n        fragColor = getBitmapColor( uv );\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// 2018 David A Roberts <https://davidar.io>\n\n// atmospheric pressure and circulation model\n\n#define buf(uv) texture(iChannel1, uv)\n\n#define SIGMA vec4(6,4,0,0)\nvec4 normpdf(float x) {\n\treturn 0.39894 * exp(-0.5 * x*x / (SIGMA*SIGMA)) / SIGMA;\n}\n\n// mean sea level pressure\nvec4 mslp(vec2 uv) {\n    float lat = 180. * (uv.y * iResolution.y / MAPRES.y) - 90.;\n    float land = texture(iChannel0, uv).x;\n    vec4 r;\n    if (land > 0.) { // land\n        r.x = 1012.5 - 6. * cos(lat*PI/45.); // annual mean\n        r.y = 15. * sin(lat*PI/90.); // January/July delta\n    } else { // ocean\n        r.x = 1014.5 - 20. * cos(lat*PI/30.);\n        r.y = 20. * sin(lat*PI/35.) * abs(lat)/90.;\n    }\n    return r;\n}\n\n// horizontally blurred MSLP\nvec4 pass1(vec2 uv) {\n    //if (iFrame > 10) return buf(uv + PASS1);\n    vec4 r = vec4(0);\n    for (float i = -20.; i <= 20.; i++)\n        r += mslp(uv + i*E/iResolution.xy) * normpdf(i);\n    return r;\n}\n\n// fully blurred MSLP\nvec4 pass2(vec2 uv) {\n    //if (iFrame > 10) return buf(uv + PASS2);\n    vec4 r = vec4(0);\n    for (float i = -20.; i <= 20.; i++)\n        r += buf(uv + i*N/iResolution.xy + PASS1) * normpdf(i);\n    return r;\n}\n\n// time-dependent MSLP\nvec4 pass3(vec2 uv) {\n    vec4 c = buf(uv + PASS2);\n    float t = mod(iTime, 12.); // simulated month of the year\n    float delta = c.y * (1. - 2. * smoothstep(1.5, 4.5, t) + 2. * smoothstep(7.5, 10.5, t));\n    return vec4(c.x + delta,0,0,0);\n}\n\n// wind vector field\nvec4 pass4(vec2 uv) {\n    vec2 p = uv * iResolution.xy;\n    float n = buf(mod(p + N, MAPRES)/iResolution.xy + PASS3).x;\n    float e = buf(mod(p + E, MAPRES)/iResolution.xy + PASS3).x;\n    float s = buf(mod(p + S, MAPRES)/iResolution.xy + PASS3).x;\n    float w = buf(mod(p + W, MAPRES)/iResolution.xy + PASS3).x;\n    vec2 grad = vec2(e - w, n - s) / 2.;\n    float lat = 180. * fract(uv.y * iResolution.y / MAPRES.y) - 90.;\n    vec2 coriolis = 15. * sin(lat*PI/180.) * vec2(-grad.y, grad.x);\n    vec2 v = coriolis - grad;\n    return vec4(v,0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    if (uv.x < 0.5) {\n        if (uv.y < 0.5) {\n    \t\tfragColor = pass1(uv - PASS1);\n        } else {\n    \t\tfragColor = pass2(uv - PASS2);\n        }\n    } else {\n        if (uv.y < 0.5) {\n    \t\tfragColor = pass3(uv - PASS3);\n        } else {\n    \t\tfragColor = pass4(uv - PASS4);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// 2018 David A Roberts <https://davidar.io>\n\n// wind flow map\n\nvec2 getVelocity(vec2 uv) {\n    vec2 p = uv * MAPRES;\n    if (p.x < 1.) p.x = 1.;\n    vec2 v = texture(iChannel1, p/iResolution.xy + vec2(0.5,0.5)).xy;\n    if (length(v) > 1.) v = normalize(v);\n    return v;\n}\n\nvec2 getPosition(vec2 fragCoord) {\n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            vec2 uv = (fragCoord + vec2(i,j)) / iResolution.xy;\n            vec2 p = texture(iChannel0, fract(uv)).xy;\n            if(p == vec2(0)) {\n                if (hash13(vec3(fragCoord + vec2(i,j), iFrame)) > 1e-4) continue;\n                p = fragCoord + vec2(i,j) + hash21(float(iFrame)) - 0.5; // add particle\n            } else if (hash13(vec3(fragCoord + vec2(i,j), iFrame)) < 8e-3) {\n                continue; // remove particle\n            }\n            vec2 v = getVelocity(uv);\n            p = p + v;\n            p.x = mod(p.x, iResolution.x);\n            if(abs(p.x - fragCoord.x) < 0.5 && abs(p.y - fragCoord.y) < 0.5)\n                return p;\n        }\n    }\n    return vec2(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor.xy = getPosition(fragCoord);\n    fragColor.z = 0.9 * texture(iChannel0, fragCoord/iResolution.xy).z;\n    if (fragColor.x > 0.) fragColor.z = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}