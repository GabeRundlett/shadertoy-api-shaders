{
    "Shader": {
        "info": {
            "date": "1504902317",
            "description": "2D Mandelbrot Fractal implemented in Fragment Shader with zoom-in and zoom-out periodic animation to an interesting target. \nModify variables at the beginning to change visualization of the fractal.\n\nMIT License\nCopyright (c) 2017 Vicente Oyanedel Muñoz\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Mlscz7",
            "likes": 1,
            "name": "Mandelbrot Oyanedel",
            "published": 3,
            "tags": [
                "fractal",
                "simple",
                "mandelbrot",
                "zoom",
                "zoomanimation"
            ],
            "usePreview": 0,
            "username": "Vichoko",
            "viewed": 647
        },
        "renderpass": [
            {
                "code": "/**\n\t@Author: Vicente Oyanedel Muñoz\n*/\n\n// Modify as you want\n#define ITERATION_LIMIT 100\n#define TIMIT_ZOOM_LIMIT 19.0\n// 19 seconds time limit zoom is nice\n#define ZOOM_TARGET vec2(0.3, 0.01857)\n\n// recommend not change\n#define INITIAL_SCALE 0.5\n#define CENTER_INITIAL_OFFSET vec2(-0.3, 0)\n\n// global variables init\nvec2 zoom_center = ZOOM_TARGET;\nfloat zoom = INITIAL_SCALE;\nvec2 center_offset = CENTER_INITIAL_OFFSET;\nfloat last_zoom = INITIAL_SCALE;\n\n/** Given a coordinate (pos), calculate if the Mandelbrot Series converges. \n\tReturn number of iterations needed to check convergence.\n*/\nint checkConvergence(vec2 pos){\n    float x_val = 0.0;\n    float y_val = 0.0;\n    int iteration = 0;\n    while (iteration++ < ITERATION_LIMIT){\n        if (x_val*x_val + y_val*y_val >= 2.0*2.0){\n        \tbreak;\n        }\n        float xtemp = x_val*x_val - y_val*y_val + pos.x;\n        y_val = 2.0*x_val*y_val + pos.y;\n        x_val = xtemp;\n    }\n    return iteration;\n}\n\n/**\n\tNormalize a val to a number between 0 and 1\n*/\nfloat myNormalize(float val, float minval, float maxval){\n\treturn (val - minval)/(maxval - minval);\n}\n\n/**\n\tPick a color based on the tone (value between 0 and 1).\n\tUsing HSV transformation of HUE.\n        based on: https://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_HSV_to_RGB\n        and: view-source:http://learningwebgl.com/lessons/example01/\n*/\nvec4 pickColor(float tone){\n    vec4 color;\n    if (tone != 0.0) {\n        float hue = float(tone);\n        float saturation = 1.0;\n        float value = 1.0;\n\n        float hueRound = float(tone) * 6.0;\n        int hueIndex = int(mod(float(int(hueRound)), 6.0));\n        float f = fract(hueRound);\n        float p = value * (1.0 - saturation);\n        float q = value * (1.0 - f * saturation);\n        float t = value * (1.0 - (1.0 - f) * saturation);\n        if (hueIndex == 0){\n            color = vec4(p, q, value, 1.0);}\n        else if (hueIndex == 1){\n            color = vec4(-value, t, p, 1.0);}\n        else if (hueIndex == 2){\n            color = vec4(q, value, p, 1.0);}\n        else if (hueIndex == 3){\n            color = vec4(p, value, t, 1.0);}\n        else if (hueIndex == 4){\n            color = vec4(t, p, value, 1.0);}\n        else if (hueIndex == 5){\n            color = -vec4(value, p, q, 1.0);}\n\n    } else {\n      color = vec4(0.1, 0.5, 0.1, 1.0);\n    }\n\treturn color;\n\n}\n\n/**\n\tMain method.\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy; \n    uv = uv.xy - vec2(0.5,0.5); // center at the middle of viewport\n    uv = uv.xy + center_offset; // small offset to center at the middle of the fractal\n    \n    // zoom system\n    center_offset += (zoom_center - center_offset);\n    if (mod(iTime, 2.0*TIMIT_ZOOM_LIMIT) <= TIMIT_ZOOM_LIMIT){\n    // zoom in phase to ZOOM_TARGET\n    zoom *= pow(2.0,mod(iTime, 2.0*TIMIT_ZOOM_LIMIT));\n    } else{\n    // make zoomout to see full shape\n    zoom *= pow(2.0,TIMIT_ZOOM_LIMIT*2.0 - mod(iTime, 2.0*TIMIT_ZOOM_LIMIT));\n    }\n    uv = uv.xy/zoom + center_offset; // apply zoom to coordinates\n    \n    int iterations = checkConvergence(uv); // check convergence of coordinate\n    float tone = myNormalize(float(iterations), 0.0, float(ITERATION_LIMIT)); // normalize number of interations\n    fragColor = pickColor(tone); // get color of fragment\n\t//fragColor = vec4(1.0*tone,1.4*tone,1.0*tone,1.0); // black and white\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}