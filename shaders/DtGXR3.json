{
    "Shader": {
        "info": {
            "date": "1686241505",
            "description": "A simple rainbow equalizer",
            "flags": 0,
            "hasliked": 0,
            "id": "DtGXR3",
            "likes": 8,
            "name": "Classic Equalizer",
            "published": 3,
            "tags": [
                "audio",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "akufishi",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "\n#define NUM_PILLARS 27.0\n#define M_PI 3.141592653589\n#define PILLAR_DROPOFF_START 1.5\n#define PILLAR_DROPOFF_END 3.0\n\nvec3 hsv2rgb(float hue, float saturation, float value)\n{\n  float c = value * saturation;\n  float h = hue / 60.0;\n  float x = c * (1.0 - abs(mod(h, 2.0) - 1.0));\n  float m = value - c;\n\n  vec3 rgb;\n\n  if (h >= 0.0 && h < 1.0) {\n    rgb = vec3(c, x, 0.0);\n  } else if (h >= 1.0 && h < 2.0) {\n    rgb = vec3(x, c, 0.0);\n  } else if (h >= 2.0 && h < 3.0) {\n    rgb = vec3(0.0, c, x);\n  } else if (h >= 3.0 && h < 4.0) {\n    rgb = vec3(0.0, x, c);\n  } else if (h >= 4.0 && h < 5.0) {\n    rgb = vec3(x, 0.0, c);\n  } else if (h >= 5.0 && h < 6.0) {\n    rgb = vec3(c, 0.0, x);\n  }\n\n  rgb += m;\n\n  return rgb;\n}\n\n\nvec3 hue(float t)\n{\n    return hsv2rgb(t * 360.0, 1.0, 1.0);\n}\n\n\nfloat gaussian(float t)\n{\n    return exp(-(5.0 * pow(t - 0.5, 2.0)));\n}\n\n\nfloat audio_sample(float t)\n{\n    int tx = int(t * 512.0);\n\n    float fft  = texelFetch( iChannel0, ivec2(tx, 0), 0 ).x;\n    \n    return fft * gaussian(t) + 0.01 + (sin((iTime / 2. + t) * 5.) / 2. + 1.) / 50.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float pillar_index = floor(uv.x * NUM_PILLARS) / NUM_PILLARS;\n    float pillar_height = audio_sample(pillar_index);\n    float pillar_dropoff = smoothstep(0.5 - pillar_height / PILLAR_DROPOFF_START, \n                                      0.5 - pillar_height / PILLAR_DROPOFF_END, uv.y) *\n                           smoothstep(0.5 + pillar_height / PILLAR_DROPOFF_START, \n                                      0.5 + pillar_height / PILLAR_DROPOFF_END, uv.y);\n\n    float ground_reflection = step(0.5, uv.y) + smoothstep(0.5, 0.0, uv.y - 0.12);\n    float separation = clamp(1. - cos(uv.x * M_PI * NUM_PILLARS * 2.), 0.0, 1.48);\n    \n    vec3 color = hue(pillar_index) * pillar_dropoff * ground_reflection * separation;\n    \n    color = mix(color, vec3(1.0), 0.12);\n\n\tfragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 34,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}