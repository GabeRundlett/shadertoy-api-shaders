{
    "Shader": {
        "info": {
            "date": "1700264421",
            "description": "Distance estimate by iq, but this accepts two perpendicular vectors (things break if they aren't) instead of a minor and major radius",
            "flags": 0,
            "hasliked": 0,
            "id": "dtGyWw",
            "likes": 3,
            "name": "Ellipse distance different param",
            "published": 3,
            "tags": [
                "2d",
                "distance",
                "ellipse"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Using Newtown's root solver to compute the distance to\n// an ellipse, instead of using the analytical solution in\n// https://www.shadertoy.com/view/4sS3zz.\n//\n// In retrospect, it's the same as Antonalog's https://www.shadertoy.com/view/MtXXW7\n//\n// More information here:\n//\n// https://iquilezles.org/articles/ellipsedist\n//\n//\n// Ellipse distances related shaders:\n//\n// Analytical     : https://www.shadertoy.com/view/4sS3zz\n// Newton Trig    : https://www.shadertoy.com/view/4lsXDN\n// Newton No-Trig : https://www.shadertoy.com/view/tttfzr \n// ?????????????? : https://www.shadertoy.com/view/tt3yz7\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n#define rot(t) mat2(cos(t), -sin(t), sin(t), cos(t))\n\n// for visualization purposes only\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\nfloat sdEllipse( vec2 p, vec2 a, vec2 b )\n{\n    // do transformations and get the minor/major radii\n    float la = length(a);\n    float lb = length(b);\n    p *= mat2(a/la, b/lb);\n    vec2 ab = vec2(la, lb);\n    \n    // everything past this point is by iq\n    \n    // symmetry\n\tp = abs( p );\n\n    // find root with Newton solver\n    vec2 q = ab*(p-ab);\n\tfloat w = (q.x<q.y)? 1.570796327 : 0.0;\n    for( int i=0; i<4; i++ )\n    {\n        vec2 cs = vec2(cos(w),sin(w));\n        vec2 u = ab*vec2( cs.x,cs.y);\n        vec2 v = ab*vec2(-cs.y,cs.x);\n        w = w + dot(p-u,v)/(dot(p-u,u)+dot(v,v));\n    }\n    \n    // compute final point and distance\n    float d = length(p-ab*vec2(cos(w),sin(w)));\n    \n    // return signed distance\n    return (dot(p/ab,p/ab)>1.0) ? d : -d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    vec2 a = vec2(sin(iTime*2.5)*0.1 + 0.5, 0);\n    vec2 b = vec2(0, sin(iTime*1.5)*0.1 + 0.5);\n    a *= rot(iTime*0.25);\n    b *= rot(iTime*0.25);\n    if(iMouse.z > 0.001)\n    {\n        a = m;\n        b = (normalize(a)*(sin(iTime*1.5)*0.1+0.5))*rot(1.57);\n    }\n\t\n\tfloat d = sdEllipse( p, a, b );\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n    // added these lines to show the vectors\n    col = mix( col, vec3(1.0, 1.0, 0.0), 1.0-smoothstep(0.0,0.01,sdSegment(p, vec2(0), a)) );\n    col = mix( col, vec3(0.0, 1.0, 1.0), 1.0-smoothstep(0.0,0.01,sdSegment(p, vec2(0), b)) );\n\n\tfragColor = vec4( col, 1.0 );;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}