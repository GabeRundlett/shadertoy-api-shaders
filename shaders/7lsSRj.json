{
    "Shader": {
        "info": {
            "date": "1626102497",
            "description": "Noise Learning",
            "flags": 0,
            "hasliked": 0,
            "id": "7lsSRj",
            "likes": 1,
            "name": "Noise01_WhitePetal",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "WhitePetal",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "vec2 truchetPattern(in vec2 _st, in float _index){\n    _index = fract(((_index-0.5)*2.0));\n    if (_index > 0.75) {\n        _st = vec2(1.0) - _st;\n    } else if (_index > 0.5) {\n        _st = vec2(1.0-_st.x,_st.y);\n    } else if (_index > 0.25) {\n        _st = 1.0-vec2(1.0-_st.x,_st.y);\n    }\n    return _st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv1 = floor(uv * vec2(10));\n    vec2 uv2 = fract(uv * vec2(10));\n    // random = fract(sin(x * c))   c: The degree of randomness -> 1 / Tilling\n    // rando_2d = fract(sin(dot(vec2_x, vec2_d)) * c)    vec2_d: random dir\n    float random = fract(sin(dot(uv1, vec2(31.415926, 2.34765))) * 400003.32456);\n    vec2 tile = truchetPattern(uv2, random);\n    float color = smoothstep(tile.x-0.5,tile.x,tile.y)-\n            smoothstep(tile.x,tile.x+0.5,tile.y);\n    \n\n    // Output to screen\n    fragColor = vec4(vec3(color), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}