{
    "Shader": {
        "info": {
            "date": "1580063705",
            "description": "Interesting Flower",
            "flags": 0,
            "hasliked": 0,
            "id": "3lKGD3",
            "likes": 3,
            "name": "Interesting Flower",
            "published": 3,
            "tags": [
                "flower",
                "interesting"
            ],
            "usePreview": 0,
            "username": "zovox",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "//-----------------CONSTANTS MACROS-----------------\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define MAX_DIM (max(iResolution.x,iResolution.y))\n//--------------------------------------------------\n\n#define time ((sin(float(__LINE__))/PI/GR+1.0)*iTime/PI)\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n\nfloat saw(float x)\n{\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\n\nvec4 saw(vec4 x)\n{\n    return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w));\n}\n\n\nmat2 rotate(float x) { return mat2(cos(x), sin(x), -sin(x), cos(x)); }\n\nfloat cross2d( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nvec2 invBilinear( in vec2 p, in vec2 a, in vec2 b, in vec2 c, in vec2 d )\n{\n    vec2 e = b-a;\n    vec2 f = d-a;\n    vec2 g = a-b+c-d;\n    vec2 h = p-a;\n        \n    float k2 = cross2d( g, f );\n    float k1 = cross2d( e, f ) + cross2d( h, g );\n    float k0 = cross2d( h, e );\n    \n    float w = k1*k1 - 4.0*k0*k2;\n    if( w<0.0 ) return vec2(-1.0);\n    w = sqrt( w );\n\n    // will fail for k0=0, which is only on the ba edge \n    float v = 2.0*k0/(-k1 - w); \n    if( v<0.0 || v>1.0 ) v = 2.0*k0/(-k1 + w);\n\n    float u = (h.x - f.x*v)/(e.x + g.x*v);\n    if( u<0.0 || u>1.0 || v<0.0 || v>1.0 ) return vec2(-1.0);\n    return vec2( u, v );\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvec3  hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (fragCoord.xy)/iResolution.xy*2.-1.;\n    \n    p.x *= iResolution.x/iResolution.y;\n    \n    \n    vec3 col = vec3(0.);\n\n    vec2 c = vec2(0., 0.);\n    vec2 d = vec2(0., 0.);\n\n    const float max_iterations = 4.;\n    \n    float map = 0.;\n    \n    for(float f = 0.; f < max_iterations; f+=1.){\n        float iteration = (f/max_iterations+1.);\n        float rots = 6.+3.*sin(time);\n        float angle = atan(-p.y, -p.x);\n        angle = floor(((angle/PI)*.5+.5)*rots);\n\n        vec2 a = vec2(1., 0.);\n        vec2 b = vec2(1., 0.);\n        \n        a *= rotate(-angle/rots*2.*PI);\n        angle += 1.;\n        b *= rotate(-angle/rots*2.*PI);\n\n        p = (invBilinear( p, a, b, c, d ))*2.-1.;\n\n        \n        map += 1.-smoothstep((f)/max_iterations, (f+1.)/max_iterations, (abs(p.x+p.y)));\n    }\n\n    fragColor = vec4(flux(map)*clamp(map, 0., 1.), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}