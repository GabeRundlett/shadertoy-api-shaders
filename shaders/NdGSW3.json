{
    "Shader": {
        "info": {
            "date": "1635365229",
            "description": "realtime fullscreen DFT convolution using linear light, with color support; we need to cramp everything into 4 buffers, so it takes 12 frames to update the picture fully. comes with 9 kernel presets.",
            "flags": 32,
            "hasliked": 0,
            "id": "NdGSW3",
            "likes": 5,
            "name": "DFT Convolution",
            "published": 3,
            "tags": [
                "convolution",
                "dft"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 498
        },
        "renderpass": [
            {
                "code": "\nconst float tau = 6.283185;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef SHOW_KERNEL\n    // shift kernel back to center\n    fragCoord = mod(fragCoord + vec2(ivec2(iResolution.xy)/2), iResolution.xy);\n#endif\n#if 0\n    vec4 f = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = vec4(vec3(f.x*0.5+0.5),0.0);\n#elif defined(SHOW_DFT)\n    vec4 f = texelFetch(iChannel2, ivec2(fragCoord), 0);\n    float w = length(f);\n    w = w / (w + 1.0); // limit magnitudes to 0..1\n    float a = atan(f.y,f.x);\n    fragColor = vec4(pow(vec3(w)*hue(a), vec3(1.0/2.2)), 1.0);\n#else\n    vec4 f = texelFetch(iChannel2, ivec2(fragCoord), 0);\n    #ifdef SHOW_KERNEL\n    fragColor = vec4(pow(f.rgb,vec3(1.0/2.2)),0.0);\n    #elif defined(LINEAR_LIGHT)\n    fragColor = vec4(pow(ACESFitted(f.rgb*0.8),vec3(1.0/2.2)),0.0);\n    #else\n    fragColor = vec4(pow(f.rgb,vec3(1.0/2.2)),0.0);\n    #endif\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int frame = iFrame;\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    //// IMAGE\n\n    vec4 image = vec4(0.0);\n#ifdef LONDON\n    image = texture(iChannel2, (uv*0.5*vec2(1.0, 16.0/9.0))*0.5 + 0.5);\n#else\n    image = texture(iChannel1, (uv*0.5*vec2(1.0, 1.0))*0.5 + 0.5);\n#endif\n    image.rgb = pow(image.rgb, vec3(2.2));\n#ifdef LINEAR_LIGHT\n    // fake linear light\n    image.rgb = InvACESFitted(image.rgb);\n#endif\n\n    //// KERNEL\n\n    vec4 kernel = vec4(0.0);\n    ivec2 pixelcoord = ivec2(fragCoord);\n    float identity_pixel = float(pixelcoord == ivec2(0));\n    // shift center to the edge because 0,0 convolves relative to 0,0\n    fragCoord = mod(fragCoord + vec2(ivec2(iResolution.xy)/2), iResolution.xy);\n    uv = fract(fragCoord/iResolution.xy)*2.0-1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    float radius = RADIUS;\n    float A = iResolution.x*iResolution.y;\n    #if (KERNEL == 0) // circular gradient\n    float d = length(uv);\n    float w = mix(0.5,1.0,dot(uv,uv) / (radius*radius));\n    kernel = vec4(w*(1.0 - clamp((d - radius)*iResolution.y/2.0, 0.0, 1.0)));\n    #elif (KERNEL == 1) // hexagon\n    float u0 = dot(abs(uv),ang(radians(60.0)));\n    float u1 = dot(abs(uv),ang(radians(0.0)));\n    float d = max(u0,u1);\n    kernel = vec4(1.0 - clamp((d - radius)*iResolution.y/2.0, 0.0, 1.0));\n    #elif (KERNEL == 2) // pentagon\n    uv = vec2(abs(uv.x),uv.y);\n    float u0 = dot(uv,ang(radians(54.0)));\n    float u1 = dot(uv,ang(radians(-18.0)));\n    float u2 = dot(uv,ang(radians(-90.0)));\n    float d = max(max(u0,u1),u2);\n    kernel = vec4(1.0 - clamp((d - radius)*iResolution.y/2.0, 0.0, 1.0));\n    #elif (KERNEL == 3) // bloom\n    float R = 4.0;\n    float d = gauss(length(uv)*R)*R*R/A;\n    d += identity_pixel;\n    kernel = vec4(d*0.5);\n    #elif (KERNEL == 4) // motion blur\n    float R = radius*6.0;\n    float d = udBezier(uv, vec2(-0.5,0.0)*R, vec2(0.0, 0.1)*R, vec2(0.5,0.0)*R);\n    A = sqrt(A);\n    kernel = vec4(1.0 - clamp((d - 0.5/A)*iResolution.y/2.0, 0.0, 1.0));\n    #elif (KERNEL == 5) // star\n    radius *= 0.125;\n    uv = vec2(abs(uv.x),uv.y);\n    float u0 = dot(uv,ang(radians(18.0)));\n    float u1 = dot(uv,ang(radians(90.0)));\n    float u2 = dot(uv,ang(radians(-54.0)));\n    float u3 = dot(uv,ang(radians(-126.0)));\n    float d = min(max(u0,u3),max(u1,u2));\n    kernel = vec4(1.0 - clamp((d - radius)*iResolution.y/2.0, 0.0, 1.0));\n    #elif (KERNEL == 6) // polychrome flare\n    uv = cmul(uv, radians(25.0));\n    vec3 m = vec3(0.2, 0.3, 0.4);\n    uv = abs(uv);\n    vec2 uv_r = pow(uv, vec2(m.x));\n    vec2 uv_g = pow(uv, vec2(m.y));\n    vec2 uv_b = pow(uv, vec2(m.z));\n    vec3 L;\n    L.r = pow(uv_r.x+uv_r.y,1.0/m.x);\n    L.g = pow(uv_g.x+uv_g.y,1.0/m.y);\n    L.b = pow(uv_b.x+uv_b.y,1.0/m.z);    \n    vec3 c = 1.0 - clamp((L - radius)*iResolution.y/256.0, vec3(0.0), vec3(1.0));\n    c = pow(c, vec3(32.0))*radius*40.0/sqrt(A);\n    kernel = vec4(c + identity_pixel*vec3(1.5,0.6,0.0)*0.5, 0.0);\n    #elif (KERNEL == 7)\n    float l = length(uv);\n    float m = (1.0 - clamp((l - radius*1.5)*iResolution.y/2.0, 0.0, 1.0));\n    vec3 d = min(abs((l-radius*(1.0+vec3(0.0,1.0,2.0)*0.5))*16.0),vec3(1.0));\n    d = cos(d*radians(180.0))*0.5+0.5;\n    kernel = vec4(d*m,0.0);\n    #elif (KERNEL == 8)\n    #if 1\n    mat3 M = mat3(\n         0, -1,  0,\n        -1,  5, -1,\n         0, -1,  0\n    );\n    #else\n    // write your own\n    // will not be normalized\n    mat3 M = mat3(\n         0,  0,  0,\n         0,  1,  0,\n         0,  0,  0\n    );\n    #endif\n    ivec2 p = pixelcoord;\n    if ((min(p.x,p.y) >= 0) && (max(p.x,p.y) < 3))\n        kernel = vec4(M[p.x][p.y]);\n    #endif\n    \n    int ch = (iFrame / 4) % 3;\n    fragColor = vec4(image[ch], 0, kernel[ch], 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// built the thing from scratch but used https://www.shadertoy.com/view/4s3GDs\n// extensively for reference and to fix implementation details\n\n#define RADIUS 0.1\n\n#define LINEAR_LIGHT\n// 0 = circular gradient bokeh\n// 1 = hexagon bokeh\n// 2 = pentagon bokeh\n// 3 = bloom\n// 4 = bezier motion blur\n// 5 = star bokeh\n// 6 = polychrome flare\n// 7 = hue ring\n// 8 = 3x3 sharpen matrix\n#define KERNEL 5\n//uncomment for regent street test picture\n//#define LONDON\n\n#if (KERNEL == 5)\n#undef RADIUS\n#define RADIUS 0.2\n#endif\n\n#if (KERNEL == 8)\n#undef LINEAR_LIGHT\n#endif\n\n//#define SHOW_KERNEL\n//#define SHOW_DFT\n\n//// utility functions\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \nvec2 ang(float a) { return vec2(cos(a), sin(a)); }\nfloat gauss(float x) { return exp(-.5*x*x); }\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat expstep(float x) {\n    x = clamp(x, 0.0, 1.0);\n    return 1.0/(1.0 + exp(1.0/x - 1.0/(1.0-x)));\n}\nvec3 hue(float hue) {\n    return clamp(\n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0,\n        0.0, 1.0);\n}\n\n// from https://www.shadertoy.com/view/MlKcDD\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n    \n// unsigned distance to a quadratic bezier\nfloat udBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n\n    if( h>=0.0 ) \n    {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d+(c+b*t)*t);\n    }\n    else \n    {   // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q/(p*z*2.0))/3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0 );\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest. See https://www.shadertoy.com/view/4dsfRS\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    \n    return sqrt( res );\n}\n\n///////////////////////////////////////////////\n\n// ACES fitted\n// from https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl\n\nconst mat3 ACESInputMat = mat3(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n\n// ODT_SAT => XYZ => D60_2_D65 => sRGB\nconst mat3 ACESOutputMat = mat3(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\n\nvec3 RRTAndODTFit(vec3 v)\n{\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return a / b;\n}\n\nvec3 ACESFitted(vec3 color)\n{\n    color = color * ACESInputMat;\n\n    // Apply RRT and ODT\n    color = RRTAndODTFit(color);\n\n    color = color * ACESOutputMat;\n\n    // Clamp to [0, 1]\n    color = clamp(color, 0.0, 1.0);\n\n    return color;\n}\n\nvec3 InvRRTAndODTFit(vec3 x)\n{\n    return -1.0/100.0*(21647550.0*x + sqrt(-1873455419487500.0*x*x + 2326712714032270.0*x + 2415638944900.0) - 1228930.0)/(983729.0*x - 1000000.0);\n}\n\nvec3 InvACESFitted(vec3 color)\n{    \n    color = color * inverse(ACESOutputMat);\n    \n    // Apply RRT and ODT\n    color = InvRRTAndODTFit(color);\n\n    color = color * inverse(ACESInputMat);\n\n    return color;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int frame = iFrame % 4;\n    if (frame == 0) {\n        int M = int(iResolution.x);\n        int U = int(fragCoord.x);\n        float u = fragCoord.x - 0.5 - float(int(iResolution.x)/2);\n        float iM = 1.0 / float(M);\n        vec4 result = vec4(0.0);\n        for (float i = 0.0; i < iResolution.x; ++i) {\n            float k = -6.28318530718*(float(u)*float(i)*iM);\n            vec4 d = texelFetch(iChannel0, ivec2(i,fragCoord.y), 0);\n            result.xy += cmul(d.xy, k);\n            result.zw += cmul(d.zw, k);\n           \n        }\n        fragColor = result;\n    } else if (frame == 1) {\n        int M = int(iResolution.y);\n        int U = int(fragCoord.y);\n        float v = fragCoord.y - 0.5 - float(int(iResolution.y)/2);\n        float iM = 1.0 / float(M);\n        vec4 result = vec4(0.0);\n        for (float i = 0.0; i < iResolution.y; ++i) {\n            float k = -6.28318530718*(float(v)*float(i)*iM);\n            vec4 d = texelFetch(iChannel1, ivec2(fragCoord.x,i), 0);\n            result.xy += cmul(d.xy, k);\n            result.zw += cmul(d.zw, k);\n        }\n        fragColor = result;\n    } else if (frame == 2) {\n        vec2 U = fragCoord - 0.5;\n        vec4 s = texelFetch(iChannel1, ivec2(fragCoord), 0).xyzw;\n        vec2 A = s.xy;\n        vec2 B = s.zw;\n        vec2 uv = (fragCoord.xy / iResolution.xy)*2.0 - 1.0;\n        vec2 m = (iMouse.xy / iResolution.xy);\n        \n        float L = length(U);\n        float l = length(uv);\n        \n        #ifdef SHOW_KERNEL\n        A = B;\n        #else\n        // center pixel of kernel, which is the integral of the entire image\n        float B_area = texelFetch(iChannel1, ivec2(iResolution.xy)/2, 0).z;\n        #if ((KERNEL == 3)||(KERNEL == 6)||(KERNEL == 8)) // controls its own intensity\n        B_area  = 1.0;\n        #endif\n        // convolution\n        A = mat2(B,-B.y,B.x) * A / B_area;\n        #endif\n    \n        fragColor = vec4(A,0,0);\n    } else {\n        fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int frame = iFrame % 4;\n    if (frame == 2) {\n        int M = int(iResolution.x);\n        float u = fragCoord.x - 0.5;\n        float iM = 1.0 / float(M);\n        vec2 result = vec2(0.0);\n        for (float i = 0.0; i < iResolution.x; ++i) {\n            float k = 6.28318530718*float(u)*float(i)*iM;\n            float m = mod(float(i) + float(int(iResolution.x)/2), iResolution.x);\n            vec4 d = texelFetch(iChannel0, ivec2(m+0.5,fragCoord.y), 0);\n            result += cmul(d.xy, k);\n        }\n        fragColor = vec4(result * iM, 0, 0);\n    } else if (frame == 3) {\n        int M = int(iResolution.y);\n        float v = fragCoord.y - 0.5;\n        float iM = 1.0 / float(M);\n        vec2 result = vec2(0.0);\n        for (float i = 0.0; i < iResolution.y; ++i) {\n            float k = 6.28318530718*float(v)*float(i)*iM;\n            float m = mod(float(i) + float(int(iResolution.y)/2), iResolution.y);\n            vec4 d = texelFetch(iChannel1, ivec2(fragCoord.x,m+0.5), 0);\n            result += cmul(d.xy, k);\n        }\n        fragColor = vec4(result * iM, 0, 0);\n    } else {\n        fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int frame = iFrame % 4;\n    int ch = (iFrame / 4) % 3;\n#ifdef SHOW_DFT\n    if ((frame == 2) && (ch == 0)) {\n        fragColor = texelFetch(iChannel2, ivec2(fragCoord), 0);\n    } else {\n        fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    }\n#else\n    fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    if (frame == 3) {\n        fragColor[ch] = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n    }\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}