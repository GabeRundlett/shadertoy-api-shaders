{
    "Shader": {
        "info": {
            "date": "1726399810",
            "description": "source  https://glslsandbox.com/e#55836.0",
            "flags": 0,
            "hasliked": 0,
            "id": "XXfczj",
            "likes": 0,
            "name": "silver mandala",
            "published": 3,
            "tags": [
                "fractal",
                "menger"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 59
        },
        "renderpass": [
            {
                "code": "#define ITERATIONS 5\n#define time iTime\n#define resolution iResolution.xy\nmat2 rotate(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\nfloat deMengerSponge2(vec3 p, vec3 offset, float scale) {\n\t\t\n\t\n    vec4 z = vec4(p, 1.0);\n\t\n\tfloat f,c,s;\n    for (int i = 0; i < ITERATIONS; i++) {\n        z = abs(z);\n\t    \n\t    for(float i = 0.0; i < 10.0; i++){\n       s = sin(time + i * 0.628318) * 0.4;\n        c = cos(time+ i * 0.628318) * 0.5;\n\t\t z.xy*=mat2(c,s,-s,c);  \n\t\t    \n        f += 0.0025 / abs(length(p.xy + vec2(c, s)) - 0.5);\n    }\n\t    \n\t  \n        if (z.x == z.y) z.xy = z.yx;\n        if (z.z == z.y) z.xz = z.xz;\n        if (z.y > z.z) z.yz = z.zy;\n\t\n        z *= scale+f;\n        z.xyz -= offset * (scale - 1.0);\n        if (z.z < -0.5 * offset.z * (scale - 1.0))\n\t\t\n            z.z += offset.z * (scale - 1.0);\n    }\n    return (length(max(abs(z.xyz) - vec3(1.0, 1.0, 1.0), 0.0))) / z.w;\n}\n\n\nfloat de(vec3 p) {\n\t \n    return deMengerSponge2(p, vec3(1.0), 3.0);\n}\n\nvec3 calcNormal(vec3 p) {\n    float d = 0.001;\n    return normalize(vec3(\n        de(p + vec3(d, 0.0, 0.0)) - de(p - vec3(d, 0.0, 0.0)),\n        de(p + vec3(0.0, d, 0.0)) - de(p - vec3(0.0, d, 0.0)),\n        de(p + vec3(0.0, 0.0, d)) - de(p - vec3(0.0, 0.0, d))\n    ));\n}\n\n#define OCCLUSION_ITERATIONS 5\nfloat ambientOcclusion(vec3 pos, vec3 nor) {\n    float ao = 0.0;\n\t\n    float amp = 0.5;\n    float step = 0.02;\n    for (int i = 1; i < OCCLUSION_ITERATIONS; i++) {\n        vec3 p = pos + step * float(i) * nor;\n        float d = de(p);\n        ao += amp * ((step * float(i) - d) / (step * float(i)));\n        amp *= 0.5;\n    }\n    return 1.0 - ao;\n}\n\nconst vec3 LIGHT_DIR = normalize(vec3(0.5, 0.8, 1.0));\nconst vec3 DIFFUSE_COLOR = vec3(0.8);\nconst vec3 AMBIENT_COLOR = vec3(0.2);\nvec3 shadeSurface(vec3 pos, vec3 nor) {\n    float dotNL = max(0.0, dot(nor, LIGHT_DIR));\n    vec3 dif = DIFFUSE_COLOR * dotNL;\n    float ao = ambientOcclusion(pos, nor);\n    vec3 amb = AMBIENT_COLOR * vec3(ao);\n    return dif + amb;\n}\n\nbool raymarch(vec3 ro, vec3 rd, out float t) {\n    vec3 p = ro;\n\t\n    t = 0.0;\n    for (int i = 0; i < 128; i++) {\n        float d = de(p);\n        p += d * rd;\n        t += d;\n        if (d < 0.002) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvec3 background(vec2 st) {\n    return mix(vec3(0.5), vec3(0.1), length(st) * 0.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 st = (2.0 * gl_FragCoord.xy - resolution) / min(resolution.x, resolution.y);\n\n    vec3 ro = vec3(0.0, 0.0, 3.0);\n\t \n    vec3 ta = vec3(0.0);\n    vec3 z = normalize(ta - ro);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n\t\n    vec3 x = normalize(cross(z, up));\n\t\n    vec3 y = normalize(cross(x, z));\n\t\n    vec3 rd = normalize(x * st.x + y * st.y + z * 1.5);\n\n    vec3 c; \n    float t;\n    if (raymarch(ro, rd, t)) {\n        vec3 pos = ro + t * rd;\n\t    pos.zx*=rotate(time*1.1);\n        vec3 nor = calcNormal(pos);\n        c = shadeSurface(pos, nor);\n    } else {\n        c = background((2.0 * gl_FragCoord.xy - resolution) / resolution);\n    }\n\n    fragColor = vec4(pow(c, vec3(1.0 / 2.2)), 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}