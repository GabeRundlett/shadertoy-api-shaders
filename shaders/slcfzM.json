{
    "Shader": {
        "info": {
            "date": "1662877892",
            "description": "9x - 7i > 3(3x - 7u) shader magic",
            "flags": 32,
            "hasliked": 0,
            "id": "slcfzM",
            "likes": 9,
            "name": "Eternal Eclipse",
            "published": 3,
            "tags": [
                "sun",
                "space",
                "for"
            ],
            "usePreview": 0,
            "username": "deni_de",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 U )\n{\n    //Space and shapes\n    vec2 uv = U/iResolution.y;\n    vec2 suv = uv;\n    vec2 suv2 = suv;\n    \n    float sizeOffset = 0.0;\n    \n    vec4 space = texture(iChannel1, U/iResolution.xy * 0.5 - vec2(iTime * 0.05,0.0));\n\n    uv.x -= 0.4;\n    uv += anim(-65.) * 0.1;\n    \n    suv.x -= 0.4;\n    suv += anim(-65.) * 0.29;\n    \n    suv2.x -= 0.4;\n    suv2 += anim(-65.) * 0.06;\n     \n    float scircle05 =  smoothstep( 0.05, 0.33 , length(U / iResolution.y - vec2(0.9,0.5)));\n    float scircle25 =  smoothstep( 0.25, 0.30 , length(U / iResolution.y - vec2(0.9,0.5)));\n    float scircle15 =  smoothstep( 0.15, 0.40 , length(uv - vec2(0.5)));\n    float scircle01 =  smoothstep( 0.01, 0.15 , length(suv - vec2(0.5)));\n    \n    float hcircle   =  step(0.22 , length(suv2 - vec2(0.5,0.5) ) );\n    \n    float scircleHVM =  smoothstep( 0.01, 0.5 + 0.5 * sin(hash(1.153255, iTime) + iTime * 155.0) , length(suv - vec2(0.5,0.5)));\n    float scircleH =  smoothstep( 0.01, 0.11 , length(suv * vec2(0.1,9.0) - vec2(0.05,4.5)));\n    float scircleV =  smoothstep( 0.01, 0.11 , length(suv * vec2(9.0,0.1) - vec2(4.5,0.05)));\n    \n    //Application\n    vec3 tex = vec3(0.0);\n    for(int i = -5; i < 15; i++)\n    {\n        \n        uv -= vec2(0.5);\n        uv *= Rotate( iTime * 0.03 + (sin(0.5 + 0.1 * (iTime*0.1+uv.x + 2.) + float(i + int(hash(1.1243124, iTime))) * 0.01)));\n        float sizeOffset = clamp(sin((7. + iTime * 0.5 + 1.0) * (float(i)) + hash(75734.13213 + iTime, iTime)),0.0, 1.0) ;\n        uv *= 1.0 + 0.05 * sizeOffset;\n        uv += vec2(0.5);\n        \n        tex += texture(iChannel0, uv + space.r * 0.05).rgb;\n    }\n    \n    tex -= scircle05;\n    \n    tex = mix(tex, vec3(0.2,0.4,0.7) , (1. - scircle15 )) ;\n    \n    tex *= scircle25;\n    \n    tex *= hcircle;\n\n    tex += (1.- scircle01 ) * scircle25  ;\n    \n    float mask = clamp(((1.-scircleH) + (1.-scircleV)) * 1.- scircleHVM, 0.0, 1.0);\n    \n    tex = mix( tex, vec3(1.) , mask / 2. ) ;\n    \n    fragColor = vec4(tex , 1.0) ;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvs = fragCoord/iResolution.xy;\n    \n    float scircle = clamp( smoothstep(0.01,0.55,length((fragCoord / iResolution.y) - vec2(0.8,0.5))) , 0.5, 1.0) ;\n    \n    vec3 tex = vec3(0);\n    uv.x *= 0.9;\n    //chaotic\n    //uv.xy += vec2( 0.2 * anim(-iTime).y, 0.1 * anim(iTime).x) * 0.5;\n    uv.x += 0.1;\n    for(int i = 0; i < 7; i++)\n    {\n        float fi = float(i);\n       \n        uv.xy -= vec2(0.5,0.5);\n        vec2 scale = mix(uv * 2., uv * 1.5, sin(mod(iTime, 3.5) * fi * 0.5 )) * (scircle * 0.1);\n        uv -= scale;\n        \n        uv.xy += vec2(0.5,0.5);\n        \n        vec3 img = texture(iChannel0, uv).rgb; \n        img = step(0.96,img + fi * 0.05);\n        \n        tex += clamp(pow(img , vec3(1.0)), 0.0, 1.0) * (1.0-scircle);\n    }\n    tex *= 0.5 + 0.5 * sin(iTime+uv.xyx+vec3(0,2,4));\n    tex = vec3((tex.r + tex.g + tex.b) / 3.0);\n    \n    fragColor = vec4(tex * vec3(2.0,1.0,0.0) ,1.0) ;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float hash(float seed,float t)\n{\n    return fract(seed * t * 94515.67657324);\n}\n\nvec2 anim(float angle)\n{    \n    return vec2(1.0  * sin(angle) , 1.0  * cos(angle) );\n}\n\nmat2 Rotate(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,-s,s,c);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}