{
    "Shader": {
        "info": {
            "date": "1716921225",
            "description": "Adapted from https://en.wikipedia.org/wiki/Ikeda_map\nInspired by https://rreusser.github.io/ikeda/\n\nCheck the common tab to change the result\nSee https://www.shadertoy.com/view/MXt3DB for possible results with different values",
            "flags": 32,
            "hasliked": 0,
            "id": "XX3GWS",
            "likes": 1,
            "name": "Ikeda map plot",
            "published": 3,
            "tags": [
                "plot",
                "chaos",
                "ikeda"
            ],
            "usePreview": 0,
            "username": "Razakhel",
            "viewed": 94
        },
        "renderpass": [
            {
                "code": "// See the common tab for the U value\n// See buffer A for the actual computation, and buffer B for the plotting\n\n// Graph of the values, with y and u varying over time (apologies for the huge link!):\n// https://graphtoy.com/?f1(x,t)=x*cos(t)&v1=false&f2(x,t)=sin(t)*0.3+0.8&v2=true&f3(x,t)=0.4-6/(1+x%C2%B2+f1(x,t)%C2%B2)&v3=true&f4(x,t)=1+f2(x,t)*(x*cos(f3(x,t))-f1(x,t)*sin(f3(x,t)))&v4=true&f5(x,t)=f2(x,t)*(x*sin(f3(x,t))+f1(x,t)*cos(f3(x,t)))&v5=true&f6(x,t)=&v6=false&grid=1&coords=0.08060485663244621,-1.9666220199928726,6.73647628284181\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv   = fragCoord / iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).rrr, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://www.shadertoy.com/view/4djSRW\nvec4 hash42(vec2 p) {\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec2 computeIkedaValue(vec2 coords, float u) {\n    float t = 0.4 - 6.0 / (1.0 + dot(coords, coords));\n    float cosT = cos(t);\n    float sinT = sin(t);\n\n    float x1 = 1.0 + u * (coords.x * cosT - coords.y * sinT);\n    float y1 = u * (coords.x * sinT + coords.y * cosT);\n\n    return vec2(x1, y1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 origUv = fragCoord / iResolution.xy;\n\n    if (iFrame == 0) {\n        fragColor = vec4(hash42(origUv));\n        return;\n    }\n\n    vec4 prevVal = texture(iChannel0, origUv);\n    // You can change this U value in the common tab\n    fragColor    = vec4(computeIkedaValue(prevVal.xy, U), computeIkedaValue(prevVal.zw, U));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 origUv    = fragCoord / iResolution.xy;\n    vec2 uniformUv = fragCoord / iResolution.y;\n\n    vec2 remappedUv = origUv;\n    float epsilon   = 0.005;\n\n    // Should be the result of an actual equation...\n    if (U - 0.8 <= 0.05) {\n        remappedUv = uniformUv * 3.0 - vec2(1.8, 1.8);\n    } else if (U - 0.9 <= 0.05) {\n        remappedUv = uniformUv * 4.0 - vec2(2.7, 2.6);\n        epsilon    = 0.0075;\n    } else if (U - 1.0 <= 0.05) {\n        remappedUv = uniformUv * 20.0 - vec2(16.5, 7.0);\n        epsilon    = 0.1;\n    } else if (U - 1.1 <= 0.05) {\n        remappedUv = uniformUv * 750.0 - vec2(650.0, 350.0);\n        epsilon    = 2.5;\n    }\n\n    vec4 ikedaValues = texture(iChannel0, origUv);\n\n    float color = 0.0;\n\n    if (abs(ikedaValues.x - remappedUv.x) < epsilon && abs(ikedaValues.y - remappedUv.y) < epsilon\n     || abs(ikedaValues.z - remappedUv.x) < epsilon && abs(ikedaValues.w - remappedUv.y) < epsilon) {\n        color = 1.0;\n    } else {\n        color = texelFetch(iChannel1, ivec2(fragCoord), 0).r;\n    }\n\n    fragColor = vec4(vec3(color), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Make this value vary for different results\n// Explicitly handled values are 0.8, 0.9, 1.0 and 1.1\n// Any other value may need some tinkering from the buffer B to be displayed properly\nconst float U = 0.9;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}