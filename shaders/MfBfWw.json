{
    "Shader": {
        "info": {
            "date": "1724997097",
            "description": "basic Reaction-Diffusion, from https://www.karlsims.com/rd.html",
            "flags": 32,
            "hasliked": 0,
            "id": "MfBfWw",
            "likes": 0,
            "name": "rdiffu",
            "published": 3,
            "tags": [
                "diffusion",
                "reaction"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 47
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 t = texture(iChannel0, uv);\n    float age_scaling = min(2.5, t.b * .005);\n    vec4 c = vec4(t.r, t.g * age_scaling, 0.7, 1.);\n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    iter(fragColor, fragCoord, iChannel0, iResolution, iMouse, iFrame);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// https://www.karlsims.com/rd.html\n// Some typical values used, for those interested, are: \n// DA=1.0, \n#define DA 1.0f\n// DB=.5, \n#define DB 0.5f\n// f=.055, \n#define f_ 0.045f\n// k=.062 (f and k vary for different patterns), \n#define k_ 0.062f\n// and Î”t=1.0. \n#define dt 1.0f\n\n// The Laplacian is performed with a 3x3 convolution \n// with center weight -1, adjacent neighbors .2, and diagonals .05. \n// The grid is initialized with A=1, B=0, and a small area is seeded with B=1.\n\nconst mat3 kernel = mat3(\n.05,  .2,  .05,\n .2,  -1.,  .2,\n.05,  .2,  .05\n);\n\n// A' = A + (DA * lapl(A) - A * B * B + f * (1 - A)) * dt\n// B' = B + (DB * lapl(B) + A * B * B - B * (k + f)) * dt\n\nvoid iter( out vec4 fragColor, in vec2 fragCoord, in sampler2D iChannel0, in vec3 iResolution, in vec4 iMouse, in int iFrame)\n{\n    vec2 uv      = fragCoord/iResolution.xy;\n    vec2 pxw     = 1. / iResolution.xy;\n    \n    vec2 aspect = iResolution.xy / iResolution.yx;\n    \n    vec2  mouse      = iMouse.zw/iResolution.xy;\n    vec2  p2mouse    = mouse - uv;\n    if (iResolution.x > iResolution.y) \n    {\n        p2mouse.x *= aspect[0];\n    } else {\n        p2mouse.x *= aspect[1];\n    }\n    float d_mouse = 1. - step(.1, length(p2mouse));\n    \n    vec4 prev = texture(iChannel0, uv);\n    if (iFrame == 0) \n    {\n        prev = vec4(1., d_mouse, 0., 0.);\n    }\n    \n    float A = prev.r;\n    float B = prev.g;\n    float ABB = A * B * B;\n    \n    // (laplacian part)\n    vec2 LAP = vec2(0);\n    for (int r = -1; r < 2; r++)\n    for (int c = -1; c < 2; c++) \n    {\n        vec2 offs = vec2(float(c), float(r));\n        vec4 color = texture(iChannel0, (uv + offs * pxw));\n        vec2 attenuated = color.rg * kernel[c + 1][r + 1];\n        LAP += attenuated;\n    }\n    \n    float A_ = A + (DA * LAP.r - ABB + f_ * (1.f - A)) * dt;\n    float B_ = B + (DB * LAP.g + ABB - (k_ + f_) * B)  * dt;\n    \n    vec4 next = vec4(A_, B_, 0., 1.);\n    vec4 user_add = vec4(0., d_mouse, 0., 0.);\n    vec4 lifetime = vec4(0, 0, prev.z + B_, 0);\n    \n    fragColor = next + user_add + lifetime;\n    fragColor = clamp(vec4(0), vec4(1,1,uint(-1),1), fragColor);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    iter(fragColor, fragCoord, iChannel0, iResolution, iMouse, iFrame);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    iter(fragColor, fragCoord, iChannel0, iResolution, iMouse, iFrame);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    iter(fragColor, fragCoord, iChannel0, iResolution, iMouse, iFrame);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}