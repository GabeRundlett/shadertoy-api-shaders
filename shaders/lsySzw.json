{
    "Shader": {
        "info": {
            "date": "1463587167",
            "description": "Offset RGB lines. Warped space via noise + sin. Click to modify warp.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsySzw",
            "likes": 34,
            "name": "Chrome Grill",
            "published": 3,
            "tags": [
                "noise",
                "lines",
                "rgb"
            ],
            "usePreview": 0,
            "username": "airtight",
            "viewed": 1796
        },
        "renderpass": [
            {
                "code": "// Chrome Grill by @felixturner\n\n#define PI 3.1415926535\n\nconst float LINE_THICKNESS = 0.2;\nconst float SPEED = 0.262;\nconst float DISPLACE = 0.0001;\n\n//const float STRIPE_COUNT = 50.0;\n\n\n// --------------------------\n//VALUE NOISE - CHEAPER\n//from: https://www.shadertoy.com/view/lsf3WH\n\nfloat hashV( vec2 p )\n{\n\tfloat h = dot(p,vec2(127.1,311.7));\n    return -1.0 + 2.0*fract(sin(h)*43758.5453123);\n}\n\nfloat noiseV( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hashV( i + vec2(0.0,0.0) ), \n                     hashV( i + vec2(1.0,0.0) ), u.x),\n                mix( hashV( i + vec2(0.0,1.0) ), \n                     hashV( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n//-----------------------\n\nvec2 rotate2D(vec2 position, float theta)\n{\n    mat2 m = mat2( cos(theta), -sin(theta), sin(theta), cos(theta) );\n    return m * position;\n}\n\n//draw stripes along x axis\n//returns 1 for on line, 0 otherwise\nfloat stripes(vec2 st){\n    \n   float STRIPE_COUNT = 30.;//iResolution.x/30.; //resolution independent stripe width\n    \n   st = fract( st * STRIPE_COUNT);\n   float pos = 0.5;\n   return smoothstep( pos-LINE_THICKNESS, pos,  st.y) - \n        smoothstep( pos, pos+LINE_THICKNESS,  st.y);\n    \n}\n\n//warp uv space by noise value\nvec2 distort(in vec2 uv , float time, float amount)\n{    \n    vec2 uv2 = uv + vec2(time);\n    uv2 *= 1.8;  //scale noise  \n    uv += vec2(noiseV(uv2) * amount);\n    return uv;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2( fragCoord.xy - 0.5*iResolution.xy ) / min(iResolution.x,iResolution.y);\n    vec2 mouse = iMouse.xy / iResolution.xy - 0.5;    \n    mouse = clamp(mouse, -0.5, 0.5);\n    \n    //give a nice initial value before first click\n    if (mouse == vec2(-0.5,-0.5)) mouse = vec2(0.1,0.253); \n    \n    float time = iTime * SPEED;\n          \n    //rotate\n    uv = rotate2D(uv,iTime/10.1);\n    \n    //uv = rotate2D(uv, PI/2.);\n    \n    //uv.y += iTime/6.;\n    \n    //sin warp on mouse X\n    uv.y = uv.y + sin(uv.x * 6. + time * 6. )*mouse.x/3.;\n    \n    //white background\n    vec3 col = vec3(1.);\n    \n    float OFFSET = 1./60.;\n    \n    //draw rgb seperately with a slight time offset\n    for (int i = 0; i < 3; i++) {\n        float time2 = time + float(i) * DISPLACE;\n        uv = distort(uv, time2,OFFSET);        \n        col[i] -=stripes(uv);\n    }\n    \n    //black stripes on top\n    uv = distort(uv, time,mouse.y/30.);    \n    col -=stripes(uv);\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}