{
    "Shader": {
        "info": {
            "date": "1551521876",
            "description": "Godel Escher Bach ",
            "flags": 0,
            "hasliked": 0,
            "id": "WdsSDH",
            "likes": 23,
            "name": "Godel Escher Bach ",
            "published": 3,
            "tags": [
                "sdf",
                "text",
                "csg",
                "font"
            ],
            "usePreview": 0,
            "username": "Danielhu",
            "viewed": 1261
        },
        "renderpass": [
            {
                "code": "#define MARCH_STEP 64\n#define EPSILON 0.001\n\nfloat rect(vec2 c, vec2 hsize, vec2 p) {\n    return length(max(abs(p-c)-hsize,0.0));\n}\n\nfloat roundrect(vec2 c, vec2 hsize, vec2 p, float r) {\n    return rect(c, hsize - r, p) - r;\n}\n\nfloat circle(vec2 c, float r, vec2 p) {\n    return length((p - c)) - r;\n}\n\nfloat Sub(float a, float b) {\n    return max(a, -b);\n}\n\nfloat Uni(float a, float b) {\n    return min(a, b);\n}\n\n\nfloat ring(vec2 c, float r1, float r2, vec2 p) {\n    return Sub(circle(c, r1, p), circle(c, r2, p));\n}\n\nfloat rightring(vec2 c, float r1, float r2, vec2 p) {\n    return max(-p.x, Sub(circle(c, r1, p), circle(c, r2, p)));\n}\n\nfloat halfB(vec2 p) {\n    float ring = rightring(vec2(0.0), 0.175, 0.075, p - vec2(0.125, 0.0));\n    float c1 = rect(vec2(-0.05, 0.125), vec2(0.2 ,0.05), p);\n    float c2 = rect(vec2(-0.05, -0.125), vec2(0.2 ,0.05), p);\n    return min(min(ring, c1), c2);\n}\n\nfloat B(vec2 p) {\n    float h1 = halfB(p - vec2(0.0, 0.125));\n    float h2 = halfB(p + vec2(0.0, 0.125));\n    float c = rect(vec2(-0.25, 0.0), vec2(0.05, 0.3), p);\n    return min(min(h1, h2), c);\n}\n\nfloat E(vec2 p) {\n    float c1 = rect(vec2(0.0, 0.25), vec2(0.3, 0.05), p);\n    float c2 = rect(vec2(0.0), vec2(0.3, 0.05), p);\n    float c3 = rect(vec2(0.0, -0.25), vec2(0.3, 0.05), p);\n\tfloat r = rect(vec2(-0.25, 0.0), vec2(0.05, 0.3), p);\n   return Uni(Uni(c1, c2), Uni(c3, r));\n}\n\n\nfloat G(vec2 p) {\n    float c1 = roundrect(vec2(0.0, 0.25), vec2(0.3, 0.05), p, 0.02);\n    float c2 = roundrect(vec2(-0.25, 0.0), vec2(0.05, 0.3), p, 0.02);\n    float c3 = roundrect(vec2(0.0, -0.25), vec2(0.3, 0.05), p, 0.02);\n    float c4 = roundrect(vec2(0.25, -0.15), vec2(0.05, 0.15), p, 0.02);\n    float c5 = roundrect(vec2(0.15, 0.0), vec2(0.15, 0.05), p, 0.02);\n    return Uni(Uni(Uni(c1, c2), Uni(c3, c4)), c5);\n}\n\nfloat extrudeB(vec3 p) {\n    return B(p.xy);\n}\n\nfloat extrudeE(vec3 p) {\n    return E(p.xz);\n}\n\nfloat extrudeG(vec3 p) {\n    \n    //return -1.0;\n    return G(vec2(-p.z, p.y));\n}\n\n\nfloat plane(vec3 p, vec3 center, vec3 dir) {\n   return dot(p - center, dir);\n}\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nfloat wall(vec3 p) {\n    float planeZ = plane(p, vec3(0.0, 0.0, -2.0), vec3(0.0, 0.0, 1.0));\n    float planeX = plane(p, vec3(-2.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0));\n    float planeY = plane(p, vec3(0.0, -1.0, 0.0), vec3(0.0, 1.0, 0.0));\n    return Uni(planeX, Uni(planeY, planeZ));\n}\n\nmat3 trans() {\n    return rotateY(radians(-45.0) + sin(iTime) * radians(45.0));\n}\n\nfloat obj(vec3 p) {\n    return max(extrudeE(p), max(extrudeG(p), extrudeB(p)));\n}\n\n\nfloat sdf(vec3 p) {\n    p = trans() * p;\n    return Uni(obj(p), wall(p));\n}\n\nvec3 central_diff(vec3 p) {\n    return normalize(vec3(\n        sdf(vec3(p.x + EPSILON, p.y, p.z)) - sdf(vec3(p.x - EPSILON, p.y, p.z)),\n        sdf(vec3(p.x, p.y + EPSILON, p.z)) - sdf(vec3(p.x, p.y - EPSILON, p.z)),\n        sdf(vec3(p.x, p.y, p.z  + EPSILON)) - sdf(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n\nbool march(vec3 eye, vec3 ray, out vec3 p) {\n    p = eye;\n    for (int i = 0; i < MARCH_STEP; ++i) {\n        float s = max(sdf(p), 0.0);\n        p += s * ray ;\n        if(abs(s) < 0.01) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool marchobj(vec3 eye, vec3 ray, out vec3 p) {\n    p = eye;\n    for (int i = 0; i < MARCH_STEP; ++i) {\n        float s = max(obj(trans() * p), 0.0);\n        p += s * ray ;\n        if(abs(s) < 0.01) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nfloat shadowX(vec3 p) {\n    vec3 occ;\n    if(marchobj(p + vec3(1.0, 0.0, 0.0) * trans(), vec3(1, 0, 0) * trans(), occ))\n        return 0.1;\n    return 1.0;\n}\n\n\nfloat shadowY(vec3 p) {\n    vec3 occ;\n    if(marchobj(p + vec3(0.0, 1.0, 0.0)* trans(), vec3(0, 1, 0)* trans(), occ))\n        return 0.1;\n    return 1.0;\n}\n\nfloat shadowZ(vec3 p) {\n    vec3 occ;\n    if(marchobj(p + vec3(0.0, 0.0, 1.0) * trans(), vec3(0, 0, 1)* trans(), occ))\n        return 0.1;\n    return 1.0;\n}\n\n\nvec3 fill(float a, vec3 color) {\n    return step(a, 0.0) * color;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ndc = (fragCoord - iResolution.xy / 2.0) / iResolution.yy * 2.0;\n    vec3 p;\n    vec3 ray = normalize(vec3(ndc, -3.0));\n    if(!march(vec3(0, 0, 4), ray, p)) {\n        fragColor.rgb = vec3(0.0);\n        return;\n    }\n    vec3 lightDir =  normalize(vec3(10.0, 10.0, 10.0) - p) * trans();\n    vec3 nor = central_diff(p);\n    vec3 hal = normalize(nor + lightDir);\n    vec3 dif = dot(lightDir, nor) * vec3(1.0, 1.0, 0.8);\n    fragColor.rgb = dif * shadowX(p) * shadowY(p) * shadowZ(p) + vec3(0.05);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}