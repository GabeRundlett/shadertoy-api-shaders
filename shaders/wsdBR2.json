{
    "Shader": {
        "info": {
            "date": "1605592838",
            "description": "as seen on https://www.youtube.com/watch?v=QD51HsYwHX0\nbad attempt at reflections lol but still made a cool effect I'm happy with :)",
            "flags": 32,
            "hasliked": 0,
            "id": "wsdBR2",
            "likes": 6,
            "name": "Whirling Reflections (Youtube)",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "youtube"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define iTime iTime*0.067\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec3 ps(vec3 p) {\n    p.y += sin(p.z*.25)*0.6;\n    p.x += sin(p.z*0.1)*0.8;\n    return p;\n}\n\nvec3 pm(vec3 p, vec3 ro) {\n    float sd = .2;\n    sd += sin(p.z*0.002)*10.1;\n    p = ps(p);\n    float r = length(p.xy);\n    float pr = -p.z*sin(p.z*0.4)*0.1+sin(p.z*0.1)*2.;\n    //p.y = (fract(p.y*sd)-0.5)/sd;\n    p.xy = mix(p.xy,p.xy*r2d(pr),sin(p.z*0.01-iTime*2.)*0.5+0.5);\n    vec3 op = p;\n    vec3 pf = floor((p)*sd);\n    //p.y += time*1.;\n    p.z += iTime*sin(pf.y);\n    p.xyz = (fract(p.xyz*sd)-0.5)/sd;\n    return p;\n}\n\nvec4 map(vec3 p, vec3 ro) {\n    vec3 op = p;\n    float r = length(p.xy);\n    //p = pm(p*0.2,ro);\n    p = pm(p,ro);\n    float d = (length(p)-(0.2+sin(op.z*0.09)*0.15)*r*0.4);\n    //p = pm(vec3(op.xy,op.z),ro);\n    //d = min(d,(length(p)-(0.2+sin(op.z*0.09)*0.15)*r*0.4));\n    d = max(d,-(length(op.yx)-(.03+(op.z-ro.z)*0.05)+sin(op.z*2.2)*sin(op.z*0.08)));\n    //d = max(d,-(length(op-ro)-0.1));\n    return vec4(p,d);\n}\n\nvec2 RM(vec3 ro, vec3 rd) {\n    float dO, ii;\n    for (int i=0;i<160;i++) {\n        vec3 p = ro+rd*dO;\n        vec4 dS = map(p,ro);\n        dO += dS.w*0.4;\n        //dO += dS.w*(0.5+dS.z*0.9);\n        ii += 0.1;\n        if (dO > 500. || dS.w < 0.01) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvec2 RM1(vec3 ro, vec3 rd) {\n    float dO, ii;\n    for (int i=0;i<110;i++) {\n        vec3 p = ro+rd*dO;\n        vec4 dS = map(p,ro);\n        dO += dS.w*0.13;\n        //dO += dS.w*(0.5+dS.z*0.9);\n        ii += 0.1;\n        if (dO > 200. || dS.w < 0.1) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    vec2 tv = fragCoord/iResolution.xy;\n    vec2 uv = -1. + 2. * tv;\n    \n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv.x *= ar;\n    vec3 ro = vec3(0.,0.,iTime*3.);\n    ro.xy = -ps(ro).xy;\n    float c= length(uv);\n    //ro.y -= sin(ro.z*.5)*0.9;\n    //ro.x -= sin(ro.z*0.4);\n    vec3 rd = normalize(vec3(uv,2.*sin(iTime*0.1)));\n    //rd.xy += ps(vec3(rd.xy,ro.z)).xy;\n    vec2 d = RM(ro,rd);\n    vec3 p = ro+rd*d.x;\n    vec4 mp = map(p,ro);\n    //col += d.x*0.1;\n    //col = mp.xyz*4.;\n    vec2 dd = RM1(vec3(p.xy,d.x),vec3(mp));\n    col = vec3(cos(dd.y*2.),sin(dd.x*0.04),p.z/400.);\n    col.z = sin(col.r+col.b);\n    col += sin((d.x+ro.z)*0.01)*1.4;\n    col += sin(d.x*3.1)*1.3;\n    col = 1.-col.xzy;\n    col.y += sin((d.y*0.1-ro.z))*0.8;\n    col *= 0.5;\n    //col += dd.y*.04;\n    //if (dd.x < 0.2) {\n    //    col = sin(d.xxx*10.);\n    //}\n    vec3 bak = texture(iChannel0,tv).rgb;\n    //col = mix(clamp(col,0.,1.),bak,0.25+d.x*0.013);\n    tv += sin(p.xy*53.)*0.004;\n    vec3 bak1 = texture(iChannel0,tv).rgb;\n    //col = mix(col,bak1,0.56);\n    col = mix(col,bak,0.98);\n    fragColor = vec4(col, 1.);\n    \n    \n    //fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}