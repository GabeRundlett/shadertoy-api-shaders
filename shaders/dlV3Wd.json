{
    "Shader": {
        "info": {
            "date": "1684900923",
            "description": "cool",
            "flags": 0,
            "hasliked": 0,
            "id": "dlV3Wd",
            "likes": 0,
            "name": "wobbles",
            "published": 3,
            "tags": [
                "wobbles"
            ],
            "usePreview": 0,
            "username": "mhellar",
            "viewed": 133
        },
        "renderpass": [
            {
                "code": "vec2 polarCoords(vec2 coord) {\n    float angle = atan(coord.y, coord.x);\n    float radius = length(coord);\n    return vec2(angle, radius);\n}\n\nvec3 calc( in vec2 p )\n{\n    float x = 0.5;\n\tfloat h = 0.0;\n\tfor( int i=0; i<150; i++ )\n\t{\n\t\tx = p.x*x*(1.0-x); h += log2(abs(p.x*(1.0-2.0*x)));\n\t\tx = p.x*x*(1.0-x); h += log2(abs(p.x*(1.0-2.0*x)));\n\t\tx = p.x*x*(1.0-x); h += log2(abs(p.x*(1.0-2.0*x)));\n\t\tx = p.x*x*(1.0-x); h += log2(abs(p.x*(1.0-2.0*x)));\n\t\tx = p.x*x*(1.0-x); h += log2(abs(p.x*(1.0-2.0*x)));\n\t\tx = p.x*x*(1.0-x); h += log2(abs(p.x*(1.0-2.0*x)));\n\n        x = p.y*x*(1.0-x); h += log2(abs(p.y*(1.0-2.0*x)));\n\t\tx = p.y*x*(1.0-x); h += log2(abs(p.y*(1.0-2.0*x)));\n\t\tx = p.y*x*(1.0-x); h += log2(abs(p.y*(1.0-2.0*x)));\n\t\tx = p.y*x*(1.0-x); h += log2(abs(p.y*(1.0-2.0*x)));\n\t\tx = p.y*x*(1.0-x); h += log2(abs(p.y*(1.0-2.0*x)));\n\t\tx = p.y*x*(1.0-x); h += log2(abs(p.y*(1.0-2.0*x)));\n\t}\n    h /= 150.0*12.0;\n\t\n\t\n\tvec3 col = vec3(0.0);\n\tif( h<0.0 )\n\t{\n\t\th = abs(h);\n\t\tcol = 0.5 + 0.5*sin( vec3(0.0,0.4,0.7) + 2.5*h );\n\t\tcol *= pow(h,0.25);\n\t}\n\t\n\n\treturn col;\n}\n\t\n\nfloat kaleidoscope(float angle, float numSegments) {\n    return mod(numSegments * angle / (2.0 * 3.1415926) + 90.5, 3.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 coord = (iTime / cos(iTime * .0005)) / (uv - iTime /20.);\n    \n    vec2 polar = polarCoords(cos(coord));\n    float angle = polar.x;\n    float radius = polar.y;\n    \n    float jim = tan(abs(polar.x) * tan(polar.y));\n    \n    float result = kaleidoscope(sin(angle), 4.);\n    \n    \n    vec3 color = mix(vec3(1.0, 4.5, 32.0), vec3(90.0, 100.5, 1.0), fract(result));\n    \n    fragColor = vec4(cos(color) * (iTime * .0009) * abs(jim) * cos(iTime * jim), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}