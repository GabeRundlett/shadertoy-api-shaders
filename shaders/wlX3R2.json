{
    "Shader": {
        "info": {
            "date": "1556903101",
            "description": "sort of meta-pixelize.\nbetter in full-screen.\ni'm sure this has been done before.\nnext step: infinite zoom, pointers welcome.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlX3R2",
            "likes": 4,
            "name": "whys and hows of shirley jones 6",
            "published": 3,
            "tags": [
                "video",
                "video",
                "filter",
                "filter",
                "shirleyjones",
                "shirley",
                "jones"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 485
        },
        "renderpass": [
            {
                "code": "#define RESXY (iResolution.xy)\n\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    \n    vec2  UV = XY/RESXY - 0.5;\n\n    const float boxMin =   1.0;\n    const float boxMax =  80.0;\n    float boxT         = sin(iTime * 0.181 + 2.5) * 0.5 + 0.5;\n    vec2  boxSize = vec2(1.0 / mix(boxMin, boxMax, boxT));\n    vec2  uvStep  = boxSize / 8.0;\n    \n    vec2  iCR0 = iChannelResolution[0].xy + 1.0;\n    boxSize.x *= iCR0.x / iCR0.y;\n    \n    vec2 uv = UV - mod(UV + boxSize / 2.0, boxSize);\n    uv += 0.5;\n    \n    vec3  accum       = vec3(0.0);\n    float weightTotal = 0.0;\n    \n    for (float offu = -boxSize.x / 2.0; offu <= boxSize.x / 2.0; offu += uvStep.x) {\n    for (float offv = -boxSize.y / 2.0; offv <= boxSize.y / 2.0; offv += uvStep.y) {\n        accum       += texture(iChannel0, uv + vec2(offu, offv), 3.0).rgb;\n        weightTotal += 1.0;\n    }\n    }\n    \n    accum /= weightTotal;\n    \n    float bright = length(accum) / sqrt(3.0);\n    \n    // bump the contrast\n    float spread = sin(iTime * 0.3 + 4.5) * 0.4 + 0.5;\n    bright = smoothstep(0.5 - spread, 0.5 + spread, bright);\n    \n    vec2 uv2     = fract((UV + boxSize / 2.0) / boxSize);\n//    uv2.x        = 1.0 - uv2.x; // why not.\n//    uv2 -= 0.5;\n//    vec2  iCR1 = iChannelResolution[1].xy + 1.0;\n//    uv2.x *= iCR1.x / iCR1.y;\n//    float theta = iTime + length(uv - 0.5) * 3.0;\n//    uv2 *= mat2(sin(theta), cos(theta), -cos(theta), sin(theta));\n//    uv2.x /= iCR1.x / iCR1.y;\n//    uv2 += 0.5;\n//    uv2 = fract(uv2);\n    \n    // checkerboard reversals\n    ivec2 q = ivec2(UV / boxSize + 10000.0 + 0.5);\n    if ((q.x) % 2 != 0) {\n        uv2.x = 1.0 - uv2.x;\n    }\n    if ((q.y) % 2 != 0) {\n        uv2.y = 1.0 - uv2.y;\n    }\n    \n    float mipHint = mix(-1.0, 4.0, boxT);\n    vec3 t2 = 1.0 - texture(iChannel1, uv2, mipHint).rgb;\n            \n    vec3 wet     = t2 * bright;\n    \n    RGBA = vec4(wet, 1.0);\n    \n    \n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}