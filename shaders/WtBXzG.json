{
    "Shader": {
        "info": {
            "date": "1566831705",
            "description": "layers with ambient occlusion. Layer spacing is animated. 1 blue-noise sample and 48 hemisphere rays with golden angle sampling per pixel.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtBXzG",
            "likes": 11,
            "name": "ambient occlusion layers",
            "published": 3,
            "tags": [
                "ao",
                "occlusion",
                "layers",
                "layering",
                "sinenoise"
            ],
            "usePreview": 0,
            "username": "johan2",
            "viewed": 672
        },
        "renderpass": [
            {
                "code": "#define GOLDEN_ANGLE 2.39996322;\n#define AA 2\n#define SAMPLES 12\n#define LAYERS 5\n#define DIVERGENCE 1.\n#define SHAPE_SIMPLICITY 5.\n#define m4  mat4( 0.00, 0.80, 0.60, -0.4, -0.80,  0.36, -0.48, -0.5, -0.60, -0.48, 0.64, 0.2, 0.40, 0.30, 0.20,0.4)\n\nfloat twistedSineNoise(vec4 q)\n{\n    float a = 1.;\n    float sum = 0.;\n    for(int i = 0; i <4 ; i++){\n        q = m4 * q;\n        vec4 s = sin(q.ywxz / a) * a;\n        q += s;\n        sum += s.x;\n        a *= 0.7;\n    }\n    return sum;\n}\n\nfloat noiseMask(vec2 uv, int layer)\n{\n    vec4 p = vec4(uv * 3., float(layer) * DIVERGENCE, iTime * 0.5);\n    float f = twistedSineNoise(p);\n    f += length(uv) * SHAPE_SIMPLICITY;\n    return step(SHAPE_SIMPLICITY, f + float(layer));\n}\n/*\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 R = iResolution.xy;\n    //blue noise randomizes initial radius and angle of goldenangle hemisphere\n    vec2 r = texture(iChannel0, fragCoord / 1024.).xy;\n   \t//vec2 r = hash23(vec3(fragCoord, 0. ) );\n    float phi = r.y * 6.283185307179;\n    float c = float(SAMPLES * AA * AA);\n    float inv = 1. / c;\n    float phase = r.x * inv;\n    float layerSpacing = sin(iTime) * 0.2 + 0.21;\n    \n    for( int x = 0; x < AA; x++ ){\n        for( int y = 0; y < AA; y++ ){\n            \n            vec2 fc = fragCoord + vec2(x,y) / float(AA);\n            vec2 uv = (2.*fc - R ) / R.y;\n   \t\n            for (int i = 0; i < LAYERS; i++){\n                float f = noiseMask(uv, i);\n\n                if((f > 0.5 || i == LAYERS - 1)){\n                    //first layer does not receive occlusion\n                   \tif(i==0)break;\n                        \n                    //do ambient occlusion  \n                    for (int k = 0; k < SAMPLES; k++){\n                        phase += inv;\n                        float z = sqrt(1. - phase);\n                        float radius = sqrt(phase);\n                        phi += GOLDEN_ANGLE;\n                        //TODO: precalculate matrix?\n                        vec3 ray = vec3(sin(phi) * radius, cos(phi) * radius, z);\n                        \n                        //hit test layers above it\n                        for (int j = i - 1; j >= 0; j--){\n                            float d = float(i - j) * layerSpacing;\n                            vec2 hit = uv + (d / ray.z) * ray.xy;\n                            //ray has hit a layer\n                            if(noiseMask(hit, j) > 0.5){\n                                c --;\n                                break; \n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            //this was needed to make it work. Compiler error? \n            c += 0.;\n        } \n\t} \n    fragColor = vec4(c * inv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}