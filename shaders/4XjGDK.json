{
    "Shader": {
        "info": {
            "date": "1708908200",
            "description": "A simple approximation for standard Solar spectrum in space.\nRed - black body at 5819 K.\nGreen - proposed approximation.",
            "flags": 0,
            "hasliked": 0,
            "id": "4XjGDK",
            "likes": 3,
            "name": "Solar spectrum AM0 approx.",
            "published": 3,
            "tags": [
                "spectrum",
                "blackbody"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// A simple approximation for standard Solar spectrum in space (ASTM E-490, AM0).\n// Source of data: https://www.pveducation.org/pvcdrom/appendices/standard-solar-spectra\n\n// The closest (in RMS sense) to solar spectrum black bodies are\n//     T=5819 K for [380;780] nm range\n//     T=5801 K for [360;830] nm range\n// They, however match the solar spectrum only moderately well (RMS\n// error ~19% on [380;780], and >100% on [160;10000]). When integrated,\n// they provide estimate for the solar constant ~1389 W/m^2 for T=5801,\n// and ~1406 W/m^2 for T=5819 K, compared to real value of 1366.1 W/m^2.\n// As can be easily seen from the plot, the actual spectrum is\n// pretty complex, with many sharp valleys (and, to the lesser, extent,\n// peaks).\n// A relatively simple piecewise approximation of AM0 is provided,\n// which, while still very smoothed, yields somewhat better accuracy.\n// The RMS relative error is ~11% on [380;780] nm (and ~17% on [160;10000] nm).\n// Integrated, the solar constant estimate is 1351 W/m^2.\n\nconst float pi=3.14159265358979323846;\n\n// Fundamental Physical Constants\n// Source: https://physics.nist.gov/cuu/Constants/Table/allascii.txt\n\nconst float c1=3.741771852e-16;  // First radiation constant 2*pi*h*c^2, W/m^2.\nconst float c1L=1.191042972e-16; // First radiation constant for spectral radiance 2*h*c^2, W/m^2*sr^-1.\nconst float c2=1.438776877e-2;   // Second radiation constant, m*K.\n\n// Astrophysical Constants\n// Source: https://pdg.lbl.gov/2023/reviews/rpp2022-rev-astrophysical-constants.pdf\n\nconst float au=149597870700.0; // Astronomical unit, in m.\nconst float Rs=6.957e8;        // Nominal Solar equatorial radius\nconst float S=6.79431e-5;      // Solar solid angle from 1 a.u., in sr (=2*pi*(1-sqrt(au^2-rs^2)/au))\n\n//==============================================================================\n// Radiance.\n\n// Input: temperature in K, and wavelength in nm.\n// Output: spectral radiance, in W*sr^-1*m^-2*nm^-1.\nfloat blackbody_spectral_radiance(float T,float lambda)\n{\n    lambda*=1e-9;\n    return 1e-9*c1L*pow(lambda,-5.0)/(exp(c2/(lambda*T))-1.0);\n}\n\n// Integral of the above on [0;inf].\n// Input: temperature in K.\n// Output: radiance, in W*sr^-1*m^-2.\nfloat blackbody_total_radiance(float T)\n{\n    return (c1L/15.0)*pow(pi*T/c2,4.0);\n}\n\n//==============================================================================\n// Approximation.\n\n// Input: wavelength, in nm.\n// Output: temperature, in K.\nfloat effective_temperature(float x)\n{\n    if(x<460.0)  return 3967.27881+4.272*x;\n    if(x<880.0)  return 7185.0-3.4*x+0.002*x*x-140.0/(1.0+(x<520.0?0.00007:0.0016)*(x-520.0)*(x-520.0));\n    if(x<1700.0) return 5048.53027+0.772*x;\n    return 4880.92822+1480.0*exp(0.68-4e-4*x);\n}\n\n// Input: wavelength, in nm.\n// Output: spectral irradiance, in W*m^-2*nm^-1.\nfloat spectral_irradiance(float x)\n{\n    return S*blackbody_spectral_radiance(effective_temperature(x),x);\n}\n\n//==============================================================================\n// Main image.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 xy=fragCoord/iResolution.xy;\n    float x=160.0*exp2(6.0*xy.x);\n    float y=2.5*xy.y;\n    float d=0.0;\n    vec3 col=vec3(0.25);\n    d=S*blackbody_spectral_radiance(5819.0,x)-y;\n    col+=vec3(0.7,0.2,0.2)*smoothstep(1.5*fwidth(d),0.0,abs(d));\n    d=spectral_irradiance(x)-y;\n    col+=vec3(0.2,0.7,0.2)*smoothstep(1.5*fwidth(d),0.0,abs(d));\n    col+=0.25*smoothstep(380.0,380.0+1.5*fwidth(x),x)*smoothstep(780.0+1.5*fwidth(x),780.0,x);\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}