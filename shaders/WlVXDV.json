{
    "Shader": {
        "info": {
            "date": "1583641749",
            "description": "sdf",
            "flags": 0,
            "hasliked": 0,
            "id": "WlVXDV",
            "likes": 9,
            "name": "ReflectionMess",
            "published": 3,
            "tags": [
                "sdf",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "Hei149",
            "viewed": 412
        },
        "renderpass": [
            {
                "code": "#define rotate(angle) mat2(cos(angle), sin(angle), -sin(angle), cos(angle))\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdCylinder(vec3 p, float r)\n{\n    return length(p.xz) - r;\n}\nfloat sdCappedCylinder(vec3 p, float r, float h)\n{\n    return max(length(p.xz) - r, abs(p.y) - h);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 h = abs(p) - b;\n    return max(h.x, max(h.y, h.z));\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat matId = 0.0;\n\nvec3 kifs(vec3 p)\n{\n    float t = iTime * 0.2;\n    for(int i = 0; i < 3; ++i)\n    {\n        p = abs(p) - 0.3;\n        p.xz *= rotate(0.7878 + t);\n        p.yz *= rotate(1.3 + t);\n        p.xy *= rotate(2.6 + t);\n    }   \n    return p; \n}\n\nfloat map(vec3 p)\n{\n    /*\n    float d = sdSphere(p + vec3(0.0 ,0.3, 0.0), 0.5);\n    d = min(d, sdCappedCylinder(p - vec3(1.0, 0.0, -2.0), 0.5, 1.0));\n    //d = min(d, p.y + 1.0);\n    float d1 = sdBox(p + vec3(-2.0, 0.0, 0.0), vec3(0.5, 1.0, 0.5));\n    if(d < d1)\n        matId = 0.0;\n    else\n    {\n        matId = 1.0;\n        d = d1;\n    }\n    */\n    //p.xz *= rotate(iTime);\n    matId = 1.0;\n    p = kifs(p);\n    float d = sdBox(p, vec3(0.2));\n    return d;\n}\n\nvec3 hash33(vec3 p)\n{\n    return fract(sin(p * vec3(29.244, 59.6994, 456.4939)) * 50391.2484);\n}\nvec3 RandomInUnitSphere(vec3 seed) \n{\n    vec3 h = hash33(seed) * vec3(2.,6.28318530718,1.)-vec3(1,0,0);\n    float phi = h.y;\n    float r = pow(h.z, 1./3.);\n\treturn r * vec3(sqrt(1.-h.x*h.x)*vec2(sin(phi),cos(phi)),h.x);\n}\n\nbool rayMarch(vec3 r0, vec3 rd, inout float d)\n{\n    d = 0.0;\n    for(int i = 0; i < 100; ++i)\n        {\n            vec3 p = r0 + d * rd;\n            float t = map(p);\n            d += t;\n            if(abs(t) < 0.001)\n            {\n                return true;\n            }\n            if(d > 100.0) break;\n        }\n    return false;\n}\n\nvec3 norm(vec3 p)\n{\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n    ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 luv = fragCoord.xy / iResolution.xy;\n    vec3 final_col = vec3(0.0);\n    vec2 uv = (fragCoord + vec2(fract(iTime)) - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 r0 = vec3(0.0, 3.0, -5.0);\n    vec2 mouse = (iMouse.xy / iResolution.xy) * 10.;\n    r0.yz *= rotate(mouse.y);\n    r0.xz *= rotate(mouse.x);\n    vec3 tgt = vec3(0.0);\n    vec3 ww = normalize(tgt - r0);\n    vec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    \n    float zoom = 1.3;\n    vec3 rd = normalize(uv.x * uu + uv.y * vv + zoom * ww);\n    \n    float d = 0.0;\n    vec3 col = vec3(1.0);\n    for(int i = 0; i < 10; ++i){\n        if(rayMarch(r0, rd, d))\n        {\n            float mat = matId;\n            vec3 p = r0 + d * rd;\n            vec3 n = norm(p);\n            r0 = p + 0.1 * n;\n            vec3 albedo = vec3(0.2, 0.5, 0.8);\n            if(mat >  0.5){\n                rd = reflect(rd, n);\n            }\n            else{\n                rd = normalize(RandomInUnitSphere(r0) + n);\n                \n            }\n            col *= albedo;\n        }\n        else{\n            col *= texture(iChannel0, rd).rgb;//mix(vec3(1.0), vec3(0.5, 0.7, 1.0), rd.y + 1.5);\n            break;\n        }\n    }\n\n    col = pow(col, vec3(0.4545));\n    /*\n    if(iMouse.z < 0.0)\n    {\n        vec3 color = texture(iChannel0, luv).rgb;\n        float alpha = 1.0 / float(iFrame + 1);\n        col = mix(color.rgb, col, alpha);\n    }\n    */\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}