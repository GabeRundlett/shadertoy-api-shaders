{
    "Shader": {
        "info": {
            "date": "1637744412",
            "description": "A simple lil shader :)",
            "flags": 0,
            "hasliked": 0,
            "id": "7sSGDV",
            "likes": 7,
            "name": "Alien terrain",
            "published": 3,
            "tags": [
                "3d",
                "terrain",
                "landscape",
                "alien"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c,-s,s,c);}\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(max(l.x,l.y),l.z);\n}\n\nfloat map(vec3 p)\n{\n    float limits = _cube(p,vec3(3.,1.,3.));\n    p.xz *= r2d(iTime*.01);\n    p.xz += vec2(0., iTime);\n    p.xz*=.5;\n\n    float land = -p.y + .5-(\n    texture(iChannel0, p.xz*.01).x\n    -asin(sin(p.x*10.*sin(p.z*2.)))*.05\n    -sin(p.z*7.+p.x*2.)*.2\n    -sin(p.z*10.+p.x*20.)*.05\n    -sin(p.z*50.+p.x*2.+length(p))*.02)*1.25\n    ;\n    return max(land, limits);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    \n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        float d = map(p);\n        if (d < 0.01)\n            return vec2(d, distance(ro, p));\n        p+= rd*d*.5;\n    }\n    return vec2(-1.);\n}\nvec3 getNormal(float d, vec3 p)\n{\n    vec2 e = vec2(0.01,0.);\n    return -normalize(vec3(d)-vec3(map(p-e.xyy),map(p-e.yxy),map(p-e.yyx)));\n}\n\nvec3 gradient(float f)\n{\n    //return vec3(1.)*sat((sin(f*100.)-.9)*10.);\n    float stp = 0.025;\n    vec3 col;\n    col = mix(vec3(0.996,0.663,0.086), vec3(0.847,0.133,0.788), f);\n    col = floor(col/stp)*stp;\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = 1.-gradient(sat((uv.y+.5)*1.));\n    float dist = 10.;\n    vec3 ro = vec3(dist, -dist, -dist);\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    rd = getCam(rd, uv);\n    vec2 res = trace(ro, rd, 64);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNormal(res.x, p);//normalize(cross(dFdx(p), dFdy(p)));\n        vec3 lpos = vec3(15.);\n        vec3 ldir = lpos-p;\n        vec3 rgb = gradient(p.y);\n        \n        col = rgb;//*sat(dot(normalize(rd+ldir), n));\n        if (dot(n, vec3(0.,1.,0.)) > 0.01)\n        col -= sat((sin(p.y*25.)-.975)*50.);\n    }\n    \n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    { // Not so cheap antialiasing SSAA x4\n\n        vec2 off = vec2(1., -1.)/(iResolution.x*2.);\n        vec3 acc = col;\n        // To avoid too regular pattern yielding aliasing artifacts\n        mat2 rot = r2d(uv.y*5.); // a bit of value tweaking, appears to be working well\n        acc += rdr(uv-off.xx*rot);\n        acc += rdr(uv-off.xy*rot);\n        acc += rdr(uv-off.yy*rot);\n        acc += rdr(uv-off.yx*rot);\n        col = acc/5.;\n    }\n    col = col.yxz;\n    col = pow(col, vec3(1.45));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}