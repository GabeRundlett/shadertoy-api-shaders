{
    "Shader": {
        "info": {
            "date": "1619483261",
            "description": "Now using SDFs properly! (I think)",
            "flags": 32,
            "hasliked": 0,
            "id": "7ssXWl",
            "likes": 40,
            "name": "Another volumetric PT",
            "published": 3,
            "tags": [
                "volumetric"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 1055
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Output to screen\n    vec4 acc = texture(iChannel0, fragCoord/iResolution.xy);\n    fragColor = tanh(1.2*acc/acc.w);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//CAMERA stuff\n#define FOV 1.0\n#define ANG 0.001\n#define PI 3.14159265\n#define TWO_PI 6.28318530718\n\nconst vec3 light = normalize(vec3(1,1,1));\nconst float light_bright = 2.0;\nconst float light_ang = 0.1;\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nmat3 get_cam(float phi, float theta)\n{\n    vec3 z_dir = vec3(cos(phi)*sin(theta),  cos(theta), sin(phi)*sin(theta));\n    vec3 x_dir = normalize(cross(z_dir, vec3(0,1,0)));\n    vec3 y_dir = normalize(cross(x_dir, z_dir));\n    return mat3(x_dir, y_dir, z_dir);\n}\n\nvec3 udir(vec2 rng)\n{\n    vec2 r = vec2(2.*PI*rng.x, acos(2.*rng.y-1.));\n    vec2 c = cos(r), s = sin(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdMandelbulb( in vec3 p, out vec4 resColor )\n{\n    vec3 w = p;\n    float m = dot(w,w);\n\n    vec4 trap = vec4(abs(w),m);\n\tfloat dz = 1.0;\n    \n\tfor( int i=0; i<3; i++ )\n    {\n        // trigonometric version (MUCH faster than polynomial)\n        \n        // dz = 8*z^7*dz\n\t\tdz = 8.0*pow(m,3.5)*dz + 1.0;\n      //dz = 8.0*pow(sqrt(m),7.0)*dz + 1.0;\n      \n        // z = z^8+z\n        float r = length(w);\n        float b = 8.0*acos( w.y/r);\n        float a = 8.0*atan( w.x, w.z );\n        w = p + pow(r,8.0) * vec3( sin(b)*sin(a), cos(b), sin(b)*cos(a) );\n\n        trap = min( trap, vec4(abs(w),m) );\n\n        m = dot(w,w);\n\t\tif( m > 256.0 )\n            break;\n    }\n\n    resColor = vec4(m,trap.yzw);\n\n    // distance estimation (through the Hubbard-Douady potential)\n    return 0.25*log(m)*sqrt(m)/dz;\n}\n\nfloat sdShrek(vec3 p)\n{\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n    //neural networks can be really compact... when they want to be\n    //loss 0.000032\nvec4 f0_0=sin(p.y*vec4(1.614,-.384,3.461,-1.449)+p.z*vec4(-1.740,-3.099,1.257,-4.194)+p.x*vec4(1.423,-.731,3.950,2.749)+vec4(8.860,-6.088,-1.444,-.854));\nvec4 f0_1=sin(p.y*vec4(-.614,4.579,-2.415,-.228)+p.z*vec4(-3.400,.411,2.157,5.092)+p.x*vec4(-.270,-3.123,3.553,-2.081)+vec4(-4.280,7.037,6.676,-4.043));\nvec4 f0_2=sin(p.y*vec4(-2.214,-1.697,-2.458,4.407)+p.z*vec4(-.505,-.133,1.820,-1.197)+p.x*vec4(.871,-2.552,-1.096,2.168)+vec4(-4.484,.480,4.456,6.656));\nvec4 f0_3=sin(p.y*vec4(-.262,-2.127,-1.644,2.066)+p.z*vec4(.936,-1.286,-2.796,-1.724)+p.x*vec4(-2.576,-3.029,3.619,-2.664)+vec4(-2.128,-1.856,.912,-4.219));\nvec4 f1_0=sin(mat4(-.175,-.141,-.181,.472,.489,.042,.178,.065,-.133,-.601,.384,.606,.263,-.225,.024,.052)*f0_0+\n    mat4(.098,-.435,.407,.053,.141,.108,.168,.313,-.374,.313,-.633,-.237,.296,-.092,.360,-.109)*f0_1+\n    mat4(-.176,-.664,.937,.178,-.583,-.178,-.535,.900,-.029,.356,-.298,.286,-.024,-.326,-.247,-.266)*f0_2+\n    mat4(-.835,.224,-.646,.308,-.166,.522,-.570,-.073,.047,-.005,-.242,-.191,.909,-.777,.278,.586)*f0_3+\n    vec4(-.176,2.932,2.633,-2.581))/1.0+f0_0;\nvec4 f1_1=sin(mat4(.749,-.599,.060,.201,-.584,-.380,-.259,-.265,-.113,-.045,-.065,.320,-.000,-.157,-.369,-.111)*f0_0+\n    mat4(-.400,.668,1.048,.477,.226,-.053,.362,.106,.470,-.557,.278,-.050,-.536,.537,.612,.275)*f0_1+\n    mat4(.685,.667,.474,-.149,.817,.178,.281,-.997,.225,-.281,-.254,-.012,.430,-.658,-.169,-.168)*f0_2+\n    mat4(-.089,-.062,.411,-.270,.016,-.351,.504,-.621,-.372,-.099,.459,-.068,-.388,.787,.695,.653)*f0_3+\n    vec4(.874,2.704,2.734,2.805))/1.0+f0_1;\nvec4 f1_2=sin(mat4(-.333,.630,-.095,-.111,.342,-.102,1.435,-.043,.302,-.710,-.089,-.692,.067,-.047,.046,-.422)*f0_0+\n    mat4(-.534,1.033,.178,-.453,.696,-.087,.148,.130,-.115,.143,-.336,-.327,-.102,-.410,.370,.048)*f0_1+\n    mat4(-.007,-.061,.888,-.374,-.059,-.973,.430,.050,-.113,-.428,-.590,-.414,-.198,-.424,.016,.285)*f0_2+\n    mat4(-.424,.566,.485,-.124,.416,.015,-.159,.513,-.429,.508,-.177,.190,-.571,.348,.324,-.368)*f0_3+\n    vec4(-.466,2.862,1.568,-2.639))/1.0+f0_2;\nvec4 f1_3=sin(mat4(-.026,-.149,-.096,-.071,.120,-.360,-1.019,-.550,-.089,-.020,.527,-.275,-.345,.112,-.160,-.434)*f0_0+\n    mat4(-.155,-.337,.294,-.055,.492,-.659,.231,.273,-.218,.718,.127,.420,-.238,-.451,.167,.370)*f0_1+\n    mat4(-.100,.416,-.164,-.078,.739,.003,-.123,-.696,-.125,.202,-.117,-.863,.344,-.077,-.164,-.210)*f0_2+\n    mat4(.194,-.275,-.282,-.496,.212,-.590,.201,-.477,-.228,-.461,-.468,.123,.167,-.749,.085,-.343)*f0_3+\n    vec4(-1.475,1.966,-.599,1.170))/1.0+f0_3;\nvec4 f2_0=sin(mat4(1.080,.872,.711,.104,-.660,-.142,.339,.249,-.538,.418,-.618,-.306,-.245,-.175,.919,.010)*f1_0+\n    mat4(.106,.512,.018,.883,-.682,-.317,-.718,.475,.948,.038,.574,-.350,.023,.970,-.766,-.102)*f1_1+\n    mat4(-.030,.754,.336,.579,.234,-.428,.030,.166,-.002,.211,.055,.803,.260,.031,-.520,.381)*f1_2+\n    mat4(1.245,.856,.354,.121,.430,.305,.790,.595,.811,-.195,-.067,-.106,-1.421,-.204,-.224,.791)*f1_3+\n    vec4(.633,2.190,2.576,2.018))/1.4+f1_0;\nvec4 f2_1=sin(mat4(-.996,.390,-.566,-.109,.387,1.037,-.638,.502,.281,-1.178,-.828,.312,.283,-.481,-.210,.117)*f1_0+\n    mat4(-.602,-1.130,.273,-.236,.057,.597,-.631,.156,-.654,.380,.573,-.101,-.234,.068,-1.024,.173)*f1_1+\n    mat4(-.701,-.500,-.727,-.173,.118,.611,.552,-.199,.059,.022,.418,.257,-.545,-.647,.448,-.700)*f1_2+\n    mat4(-.117,.682,.589,-.177,.646,-.025,.158,.017,-.317,.787,1.245,-.632,.519,-.488,-1.065,-.338)*f1_3+\n    vec4(1.238,2.124,-.652,1.610))/1.4+f1_1;\nvec4 f2_2=sin(mat4(-.041,.230,-.114,-1.108,.284,.695,.812,.578,1.379,-.228,-.261,-.672,-1.183,.124,-.086,-.331)*f1_0+\n    mat4(.336,.228,-.854,.183,.180,.017,.893,.442,-.643,.418,-.519,.101,1.136,.074,.436,.166)*f1_1+\n    mat4(.056,-.419,-.569,-.230,-1.501,.016,.276,-.461,.651,.871,.042,.257,-.036,.253,-.484,-.337)*f1_2+\n    mat4(.759,-.194,.608,-1.026,-1.631,.967,-.322,.307,.793,-.334,.523,.013,.792,-.088,-.167,.215)*f1_3+\n    vec4(-.405,2.659,-1.339,3.678))/1.4+f1_2;\nvec4 f2_3=sin(mat4(-.339,1.039,.044,.203,.042,-.744,.374,-1.190,.583,.152,-.218,-.236,.024,.066,-.172,.659)*f1_0+\n    mat4(.220,-.253,1.000,-.678,.038,-.133,-.593,-.444,-.459,-.264,.763,.378,-.388,.042,-.395,-.742)*f1_1+\n    mat4(.392,.475,.196,-.626,.014,.124,-.313,.056,-.065,-.452,.111,-.250,-.420,.529,-.215,1.039)*f1_2+\n    mat4(-.607,-.029,.254,.600,.523,.250,-.227,.773,.091,-.398,.193,-.483,.781,.248,-.055,.150)*f1_3+\n    vec4(-1.623,-2.998,-.552,-3.926))/1.4+f1_3;\nreturn dot(f2_0,vec4(-.054,-.051,.066,.043))+\n    dot(f2_1,vec4(.045,.041,.025,.086))+\n    dot(f2_2,vec4(.011,-.046,.074,-.094))+\n    dot(f2_3,vec4(-.053,.089,-.084,.041))+\n    0.077;\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash31(float pos)\n{\n    vec3 p3 = fract(vec3(pos)*vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nfloat sdErastus(vec3 pos)\n{\n    float minDist = length(pos)-0.1;\n    for(int i = 0; i < 32; i++)\n    {\n        minDist = min(minDist,length(pos-(hash31(float(5*i))*1.0 - 0.5))-0.3);\n    }\n    return minDist;\n}\n\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n    \n    //blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31 + 4566, frame*2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))/float(0xffffffffu); }\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) * \n           vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define scatter 50.0\n#define extinct 10.0\n\nvec4 map(vec3 p)\n{\n    float sd = 1e10;\n    vec4 col = vec4(1.0);\n    //sd = min(sdErastus(p), sd);\n    float mand =sdMandelbulb(p,col); \n    sd = min(mand, sd);\n    float plane = p.y+1.0;\n    if(plane < sd) \n    {\n        sd = plane;\n        col = vec4(0,0,0,1.0);\n    }\n    return vec4(col.xyz, sd);\n}\n\nconst float Br = 0.0025;\nconst float Bm = 0.0003;\nconst float g =  0.9800;\nconst vec3 nitrogen = vec3(0.650, 0.570, 0.475);\nconst vec3 Kr = Br / pow(nitrogen, vec3(4.0));\nconst vec3 Km = Bm / pow(nitrogen, vec3(0.84));\n\nvec3 sky_color(vec3 rd)\n{\n\t// Atmosphere Scattering\n\tvec3 fsun = light;\n\tfloat brightnees = exp(-sqrt(pow(abs(min(5.*(rd.y-0.1),0.)),2.)+0.1));\n\tif(rd.y < 0.)\n\t{\n\t\trd.y = 0.;\n\t\trd.xyz = normalize(rd.xyz);\n\t}\n    float mu = dot(rd, fsun);\n\t\n\tvec3 extinction = mix(exp(-exp(-((rd.y + fsun.y * 4.0) * (exp(-rd.y * 16.0) + 0.1) / 80.0) / Br) * (exp(-rd.y * 16.0) + 0.1) * Kr / Br) * exp(-rd.y * exp(-rd.y * 8.0 ) * 4.0) * exp(-rd.y * 2.0) * 4.0, vec3(1.0 - exp(rd.y)) * 0.2, -rd.y * 0.2 + 0.5);\n\tvec3 sky_col = brightnees* 3.0 / (8.0 * 3.14) * (1.0 + mu * mu) * (Kr + Km * (1.0 - g * g) / (2.0 + g * g) / pow(1.0 + g * g - 2.0 * g * mu, 1.5)) / (Br + Bm) * extinction;\n\tsky_col = 0.4*clamp(sky_col,0.,10.);\n\treturn light_bright*sky_col; \n}\n\nvec3 back(vec3 rd)\n{\n    return sky_color(rd);//texture(iChannel1, rd).xyz;\n}\n\n//trace up to a scattering threshold\nbool trace(inout vec4 ro, vec3 rd, float maxc, out vec3 ex)\n{\n    vec4 c = vec4(0.); //rgb extinction and w scattering\n    float td = 0.0;\n    for(int i = 0; i < 300; i++)\n    {\n        vec4 d = map(ro.xyz); //distance\n        float dx = max(ro.w*ANG, abs(d.w)); //ray step\n        ro += vec4(rd,1.)*dx; \n        td += dx;\n        c += (d.w < 0.0 ? vec4(extinct*d.xyz, scatter) : vec4(0.))*dx;\n        if(c.w > maxc || dx > 3.0 || td > 10.0) break;\n    }\n    ex = exp(-c.xyz); //return extinction\n    return c.w > maxc;\n}\n\nvec3 pathtrace(vec4 ro, vec3 rd)\n{\n    ro.w = 3.0 + 3.*rand();\n    ro += vec4(rd,1.0)*rand()*0.5;\n    vec3 tex = vec3(1.0);\n    vec3 emi = vec3(0.);\n    for(int i = 0; i < 8; i++)\n    {\n        vec3 ex;\n        float thresh = -log(rand());\n        bool hit = trace(ro, rd, thresh, ex);\n        tex *= ex;\n        if(hit) \n        {\n            rd = udir(rand2());\n            vec4 sro = ro; \n            //shadow ray\n            if(!trace(sro, light, -log(rand()), ex)) emi += sky_color(light)*ex*light_ang;\n        }\n        else\n        {\n            emi += back(rd); break;\n        }\n    }\n    return emi*tex;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    rng_initialize(fragCoord, iFrame);\n   \n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    fragCoord += nrand2(0.5, vec2(0.));\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 m = PI*iMouse.xy/iResolution.xy + 1e-3;\n    \n   \n    if(iMouse.z > 0.) fragColor*=0.6;\n    mat3 cam = get_cam(2.*m.x,PI - m.y);\n    \n    vec3 ro = -cam*vec3(0,0,2.3);\n    vec3 rd = normalize(cam*vec3(FOV*uv, 1.0));\n    \n    vec3 c = pathtrace(vec4(ro,0.), rd);\n    // Output to screen\n    fragColor += vec4(c, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}