{
    "Shader": {
        "info": {
            "date": "1499006207",
            "description": "Classic.",
            "flags": 8,
            "hasliked": 0,
            "id": "XdSBzR",
            "likes": 1,
            "name": "Mandelbrot 9001",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "johannesCmayer",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "//#define animateIterations\n//#define zoom\n#define animateColor\n\nfloat maxIterationsC = 100.;\nfloat minIterationsC = 10.;\n\nvec2 offset = vec2(-30., 0.);\n\nstruct Coordinates\n{\n    float real;\n    float imagenary;\n};\n    \nstruct Frac_Return_Val\n{\n\tfloat iterations;\n    float real;\n    float imaginary;\n};\n    \nFrac_Return_Val MandelbrotFunc(float maxIterations, Coordinates coordinates)\n{\n    float real = 0.;\n    float imaginary = 0.;\n    \n    float iterations = 0.;    \n    \n   \tfor (float i = 0.; i < maxIterations; i++)\n    {\n        iterations++;\n                        \n        if (pow(real, 2.) + pow(imaginary, 2.) > 4.) \n        {\n            Frac_Return_Val r_Val;\n    \t\tr_Val.iterations = iterations;\n    \t\tr_Val.real = real;\n    \t\tr_Val.imaginary = imaginary;\n                \n            return r_Val;\n        }\n               \n        float temp = real;\n        real = pow(real, 2.) - pow(imaginary, 2.) + coordinates.real;\n        imaginary = 2. * temp * imaginary + coordinates.imagenary;\n    } \n    \n    Frac_Return_Val r_Val;\n    r_Val.iterations = iterations;\n    r_Val.real = real;\n    r_Val.imaginary = imaginary;\n    \n    return r_Val;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef animateIterations\n    float maxIterations = maxIterationsC * abs(sin(iTime)) + minIterationsC;    \n    #else\n    float maxIterations = maxIterationsC;\n    #endif\n        \n    Coordinates coordinates;\n  \n    #ifdef constantCoordinate\n    coordinates.real = 1. / 100.;\n    coordinates.imagenary = 1. / 100.;\n    #else\n    coordinates.real = (fragCoord.x - iResolution.x / 2. + offset.x) / iResolution.y * 3.;\n    coordinates.imagenary = (fragCoord.y - iResolution.y / 2. + offset.y) / iResolution.y * 3.;\n    #endif\n    \n    #ifdef zoom\n    coordinates.real /= (sin(iTime * 0.1) * 1000.);\n    coordinates.imagenary /= (sin(iTime * 0.1) * 1000.);\n    #endif\n    \n    Frac_Return_Val r_Val = MandelbrotFunc(maxIterations, coordinates);\n         \n    vec4 color;\n    \n    if (r_Val.iterations >= maxIterations) {\n        color = vec4(abs(r_Val.real) * 1.5, abs(r_Val.imaginary) * 1.5, 1, 1.);\n        //color = vec4(0,0,0,0);\n    }\n    else {\n    \tcolor = vec4(r_Val.iterations / 64., r_Val.iterations / 128., r_Val.iterations / 32., 1.);\n        //color = vec4(0,0,0,0);\n    }\n    \n    \n    \n    #ifdef animateColor\n    float st = abs(sin(iTime)) * .4 + 1.;\n    color *= vec4(1. * st, 1. * st , 1. * st , 1.);\n    #endif\n    fragColor = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float Sin01 (float time)\n{\n    return  sin(time * 0.0) * 3.;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 sound = vec2(Sin01(time), Sin01(time));    \n    \n    return sound;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}