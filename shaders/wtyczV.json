{
    "Shader": {
        "info": {
            "date": "1611336238",
            "description": "Visualizer for audio",
            "flags": 32,
            "hasliked": 0,
            "id": "wtyczV",
            "likes": 6,
            "name": "Audioviz",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "audio",
                "visualizer",
                "visualiser"
            ],
            "usePreview": 0,
            "username": "darkeclipz",
            "viewed": 422
        },
        "renderpass": [
            {
                "code": "vec3 magma(float t) { // from Mattz\n    const vec3 c0 = vec3(-0.002136485053939582, -0.000749655052795221, -0.005386127855323933);\n    const vec3 c1 = vec3(0.2516605407371642, 0.6775232436837668, 2.494026599312351);\n    const vec3 c2 = vec3(8.353717279216625, -3.577719514958484, 0.3144679030132573);\n    const vec3 c3 = vec3(-27.66873308576866, 14.26473078096533, -13.64921318813922);\n    const vec3 c4 = vec3(52.17613981234068, -27.94360607168351, 12.94416944238394);\n    const vec3 c5 = vec3(-50.76852536473588, 29.04658282127291, 4.23415299384598);\n    const vec3 c6 = vec3(18.65570506591883, -11.48977351997711, -5.601961508734096);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\nvoid bar(vec2 uv, out vec3 col) {\n    float width = 5./iResolution.x;\n    vec2 moduv = mod(uv, width);\n    float nSamples = 10.;\n    float sampleWidth = width / nSamples;\n    float samples = 0.;\n    for(float i=0.; i < nSamples; i++) \n        samples += texture(iChannel0, vec2(uv.x-moduv.x + i*sampleWidth, 0.)).x;\n    float y = samples / nSamples;\n    float gap = 1./iResolution.x;\n    if(y > uv.y && moduv.x > gap && moduv.x < 1.0-gap) {\n        float t = 0.7 - 0.7*y;\n        col = magma(y);\n    }\n}\n\nvoid heat(vec2 uv, out vec3 col) {\n    float t = texture(iChannel0, uv).y;\n    col = magma(t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = vec3(0);\n    if(uv.y > 0.5) bar (uv*vec2(1.,2.)-vec2(0.,1.), col);\n    else           heat(uv*vec2(1.,2.)            , col);\n    col = mix(vec3(0), col, min(1.0, 2.25*sqrt(abs(uv.y-0.5))));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n    Calculates the height of the bar y.\n    If the bar is higher than what is stored in BuffA, store this\n    new height. Otherwise slowly lower the bar height.\n*/\n\n//#define HEAT_DECAY\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tex = texture(iChannel1, vec2(uv.x, 0.)); \n    \n    // Bar \n    float y = tex.x;\n    float buff = texture(iChannel0, uv).x;\n    float height = max(y, buff-0.275*iTimeDelta);\n    \n    // Heat\n    float map = 0.;\n    if(fragCoord.x < 1.5) {\n        map = texture(iChannel1, vec2(uv.y, 0.)).x;\n    }\n    else {\n        #ifdef HEAT_DECAY\n        map = max(texture(iChannel0, (fragCoord.xy - vec2(1., 0.)) / iResolution.xy).y,\n                  0.99*texture(iChannel0, (fragCoord.xy) / iResolution.xy).y);\n        #else\n        map = texture(iChannel0, (fragCoord.xy - vec2(1., 0.)) / iResolution.xy).y;\n        #endif\n        \n    }\n    \n    fragColor = vec4(height, map, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}