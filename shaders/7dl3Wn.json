{
    "Shader": {
        "info": {
            "date": "1615898005",
            "description": "A small shader based on Anachronist's Thirty-Thousand Miles song.\n",
            "flags": 64,
            "hasliked": 0,
            "id": "7dl3Wn",
            "likes": 11,
            "name": "Thirty-Thousand waves",
            "published": 3,
            "tags": [
                "sdf",
                "light",
                "retrowave"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 762
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define FFT(A) pow(texelFetch(iChannel0, ivec2(A, 0), 0).x, 5.)*.5\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c,-s,s,c);}\nfloat _time;\n\nfloat _sph(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0., 1., 0.)));\n    vec3 u = normalize(cross(rd, r));\n    float fov = mix(1., 10., sat(sin(_time*.25)*.5+.5));\n    return normalize(rd+(uv.x*r+uv.y*u)*fov);\n}\n\nfloat _cyl(vec3 p, float r)\n{\n    float test = clamp(sin(p.z+_time*50.)*100., -1., 1.);\n    r += sin(_time*50.+p.z*.5)*.1+FFT(p.z*.1);\n    r += test*.07;\n    return length(p.xy)-r;\n}\n\nfloat map(vec3 p)\n{\n    p.x = abs(p.x);\n    vec3 cp = p-vec3(20., 0.02, 0.);\n   \n    float yrep = 10.;\n    float idx = (cp.y+yrep*.5)/yrep;\n    cp.y = mod(cp.y+yrep*.5, yrep)-yrep*.5;\n    cp.x += sin(idx*.1+iTime*1.)*2.+FFT(idx)*10.;\n    float cl = _cyl(cp, .1+abs(sin(iTime))*.25+FFT(10));\n\n    //min(_sph(p, .5), _sph(p-vec3(1.+sin(_time), 0., 0.), .5));\n    return cl;\n}\n\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col;\n    \n    \n    vec3 ro = vec3(0.,sin(_time),-5.);\n    vec3 ta = vec3(sin(_time*.25)*5.,cos(_time*.5)*2.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 p = ro;\n    vec3 acc = vec3(0.);\n    float accth = 5.;\n    for (int i = 0; i < 128; ++i)\n    {\n        float d = map(p);\n        if (d < 0.01)\n        {\n            vec3 grad = 0.5 + 0.5*cos(_time+uv.xyx+vec3(0,2,4)+2.*FFT(p.z+10.));\n            col = grad;\n            break;\n        }\n        if (d < accth)\n        {\n            vec3 grad = 0.5 + 0.5*cos(_time+uv.xyx+vec3(0,2,4)+2.*FFT(p.z+10.));\n            acc += grad*(1.-sat(d/accth))*(1.-sat(distance(ro, p)/300.));\n        }\n        p += rd * d;\n    }\n    \n    col += .25*sat(dot(rd, vec3(0.,0.,1.)))*(0.5 + 0.5*cos(_time+uv.yxy+vec3(0,2,4)+2.*FFT(p.z+10.)));\n    return col+acc*.2*FFT(10.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n_time = iTime+texture(iChannel1, fragCoord/8.).x*iTimeDelta*2.;\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    \n    uv *= r2d(_time*.1);\n    vec3 col = rdr(uv);\n    { // Not so cheap antialiasing SSAA x4\n\n        vec2 off = vec2(1., -1.)/(iResolution.x*2.);\n        vec3 acc = col;\n        // To avoid too regular pattern yielding aliasing artifacts\n        mat2 rot = r2d(uv.y*2.); // a bit of value tweaking, appears to be working well\n        acc += rdr(uv-off.xx*rot);\n        acc += rdr(uv-off.xy*rot);\n        acc += rdr(uv-off.yy*rot);\n        acc += rdr(uv-off.yx*rot);\n        col = acc/5.;\n    }\n    \n    col = mix(col, vec3(0.), pow(sat(length(uv*1.7)), 1.5));\n    col = pow(col, vec3(.45));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 26159,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/theanachronist/thirty-thousand-miles"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}