{
    "Shader": {
        "info": {
            "date": "1724567876",
            "description": "projector",
            "flags": 0,
            "hasliked": 0,
            "id": "McSBRz",
            "likes": 0,
            "name": "aug242024v7",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "// Fork of \"aug242024v6\" by brendanluu. https://shadertoy.com/view/lcBfzR\n// 2024-08-25 06:37:47\n\n// Fork of \"aug242024v5\" by brendanluu. https://shadertoy.com/view/MfSfzR\n// 2024-08-25 06:33:27\n\n// Fork of \"aug242024\" by None. https://shadertoy.com/view/-1\n// 2024-08-25 06:32:48\n\n// Fork of \"aug242024\" by brendanluu. https://shadertoy.com/view/lfSfRR\n// 2024-08-25 06:32:40\n\n// Fork of \"aug122024v3\" by brendanluu. https://shadertoy.com/view/XclfR7\n// 2024-08-24 01:39:18\n// Fork of \"aug122024v2\" by brendanluu. https://shadertoy.com/view/XfffRN\n// 2024-08-13 06:45:47\n\n// Blob shape function with increased number of spiky lines and subtle movement\nfloat blobShape(vec2 uv, float time, float scaleFactor) {\n    vec2 pos = vec2(\n        sin(time * .0) * 0.00001,\n        cos(time * .0) * 0.00001\n    );\n    float blob = length(uv - pos);\n    float angle = atan(uv.y - pos.y, uv.x - pos.x);\n    \n    // Increased frequency for more spiky lines, scaled by resolution\n    blob += sin(angle * 9000.0 * scaleFactor + time * 2.0) * 0.5;\n    \n    return blob;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate aspect ratio and scale factor\n    float aspectRatio = iResolution.x / iResolution.y;\n    float scaleFactor = sqrt(iResolution.x * iResolution.y) / 800.0; // Base scale on 800x450 resolution\n    \n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Center the coordinates\n    uv = (uv - 0.5) * 2.0;\n    \n    // Adjust for aspect ratio while maintaining the shape's visibility\n    float targetAspect = 16.0 / 9.0; // Target aspect ratio (e.g., 16:9)\n    if (aspectRatio > targetAspect) {\n        uv.x *= targetAspect / aspectRatio;\n    } else {\n        uv.y *= aspectRatio / targetAspect;\n    }\n    \n    // Calculate distance from center\n    float dist = length(uv);\n    \n    // Define portal parameters\n    float portalRadius = 0.8; // Increased to ensure visibility\n    float portalEdgeSize = 0.1;\n    \n    // Create base color (white)\n    vec3 col = vec3(0.016,1.000,0.000);\n    \n    // Create portal effect\n    if (dist < portalRadius) {\n        // Inside the portal\n        vec3 portalColor = vec3(0.000,0.000,0.000);  // Black\n        col = mix(col, portalColor, smoothstep(portalRadius - portalEdgeSize, portalRadius, dist));\n        \n        // Add some swirling effect with increased frequency\n        float angle = atan(uv.y, uv.x);\n        float swirl = sin(angle * 1.0 * scaleFactor + iTime * 1.0) * .01;\n        col += swirl * vec3(1.000,1.000,1.000) * (1.0 - dist / portalRadius);\n        \n        // Create blob mask with increased spiky lines and subtle movement\n        float blob = blobShape(uv, iTime, scaleFactor);\n        float mask = smoothstep(0.1, 0.2, blob);\n        \n        // Apply mask with fade to black\n        col = mix(col, vec3(0.0), mask);\n        \n        // Output to screen\n        fragColor = vec4(col, 1.0);\n    } else {\n        // Outside the portal radius, set color to transparent\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}