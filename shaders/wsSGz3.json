{
    "Shader": {
        "info": {
            "date": "1549491524",
            "description": "Source: https://codepen.io/ashthornton/pen/KRQbMO\nby : Ash Thornton\nJust learning how some of the shaders I see on the internet work :)\nAlso, I'm using custom images with a chrome extension, the images are on the code",
            "flags": 16,
            "hasliked": 0,
            "id": "wsSGz3",
            "likes": 8,
            "name": "Study: Distortion Slider",
            "published": 3,
            "tags": [
                "transition"
            ],
            "usePreview": 0,
            "username": "anemolo",
            "viewed": 681
        },
        "renderpass": [
            {
                "code": "// Source: https://codepen.io/ashthornton/pen/KRQbMO\n// by : Ash Thornton\n\n// Images added with custom chrome extension \n// https://s3-us-west-2.amazonaws.com/s.cdpn.io/123024/leopard2\n// https://s3-us-west-2.amazonaws.com/s.cdpn.io/123024/lion2.\n    \n#define PI 3.141592653589793\nfloat sineInOut(float t) {\n  return -0.5 * (cos(PI * t) - 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n\n            vec2 uv = fragCoord/iResolution.xy;\n            vec4 _currentImage;\n            vec4 _nextImage;\n        // Progress of the transition\n    \t\tfloat dispFactor = sineInOut(iTime * 2.);\n    // dispFactor = iMouse.x/iResolution.x;\n    \t\t// How much the red color of the image affects the displacement\n            float intensity = 0.3;\n\n    \t\t// Get the image colors\n            vec4 orig1 = texture(iChannel0,uv);\n            vec4 orig2 = texture(iChannel1,uv);\n            // orig2 = vec4(1.);\n            \n    \t\t// Distort/displace the image based on the red color of the other image\n            // Thats why it looks that way, because the red value varies \n    \t\t// And if you use another image the displacement will look diferent\n            _currentImage = texture(iChannel0, \n                              vec2(uv.x, uv.y + dispFactor * (orig2.r * intensity)));\n\t\t\t// And this is the same but backwards\n            _nextImage = texture(iChannel1, vec2(uv.x,\n                            uv.y + (1.0 - dispFactor) * (orig1.r * intensity)));\n\t\t\t\n            vec4 finalTexture = mix(_currentImage, _nextImage, dispFactor);\n    \n    \t\t// Uncomment to see how it looks\n    \t\t//finalTexture= _nextImage;\n    \t\t//finalTexture= _currentImage;\n\n            fragColor = finalTexture;\n}  \n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}