{
    "Shader": {
        "info": {
            "date": "1660419832",
            "description": "don't code and drive",
            "flags": 8,
            "hasliked": 0,
            "id": "fl3yWB",
            "likes": 23,
            "name": "avenue",
            "published": 3,
            "tags": [
                "sound",
                "synth",
                "reverb",
                "riff",
                "fdn",
                "slowwave"
            ],
            "usePreview": 0,
            "username": "nabr",
            "viewed": 451
        },
        "renderpass": [
            {
                "code": "// soundin shader by FabriceNeyret2\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg return length(T.yz)==0. ? -1. : T.x\n\nfloat message(vec2 U) {// to alter in the icon with the alter message\n    initMsg;C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110);// message \"Sound in\"\n    endMsg;\n} // EOL soundin shader\n\n#define T iTime\n\nfloat tex(vec3 uv) \n{\n    uv.xyz *=(mod(T, 8.)<4.5?20.:10.*max(1.,.2*(floor(mod(6.*T, 8.)))));\n    uv.y += mod(6. * T, 20.);\n    float s = 1.;\n    float mobile = max(iResolution.x, iResolution.y)*20.;\n    //by FabriceNeyret2\n    s = fract((s = sin(mod(mobile, 2.*mobile)*length(ceil(uv.xy *= mat2(14, 0, -7, 14) / 1e2)))) > .5 ? uv.xy : s < -.25 ? uv.yx : uv.xy + uv.y).x;\n    return s;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    \n    if (min(1., 1.-T/8.)>0.&&iResolution.y<2000.) {float c=message(mod(fragCoord/iResolution.y*18.-vec2(3,T), vec2(18, 7)));if(c>=0.){fragColor=vec4(fract(T)*c);return;}}\n\n    vec3 c = vec3(0);\n    //by iq\n    vec3 dthr = 10. * fract(sin((fragCoord.x / iResolution.x)*2.-1. * vec3(13, 1, 11) + fragCoord.y * vec3(1, 7, 5)) * 158.391832) / 255.0;\n    \n    const vec3 o = vec3(-0.05, -.05, 1);\n    vec3 d = normalize(vec3((fragCoord.xy * 2. - iResolution.xy) / min(iResolution.x, iResolution.y), 2.));\n    \n    float dd = 2.8;\n    vec3 p = (o + d * .001);\n    float dn = dot(p, d);\n    if(abs(dn) > .001)\n    {\n        p = (o + d * (-dd - dot(p, o)) / dn);\n        vec3 n = vec3(0, .01, 1);\n        //p.y-=.25*T;n.y-=.25*T;\n        //by nimitz\n        vec3 tgt = (n * dot(d, n) - d);\n        tgt /= (abs(dot(tgt, d))) + 1.002;\n        p += (tgt * tex(p) * .02);\n        float ds = distance(o, p);\n        vec2 e = vec2(0.07 * pow(0.105 * ds, .5) , 0);\n        #define btex(_p)(tex(_p) + tex(_p))\n        vec3 dd = (btex(p) - vec3(btex(p - e.xyy), btex(p - e.yxy), btex(p - e.yyx))) / e.x;\n        vec3 tgd = dd - n * dot(n, dd);\n        n = normalize(n - tgd  * .62 * 8. / (ds));\n        \n        vec3 l = normalize(normalize(2. * vec3( sin(T), cos(T), 1)) + p),\n             dn = vec3(sin(T), mod(.25*T, 2.), 3),\n             D = dot(dn, o) / dot(dn, d) * p;\n        \n        c = dthr;\n        c += max(.2, abs(sin(T))) * (cos(vec3(1, 2, 2.8) + 2.32 * mix(tex(n), tex(p), abs(sin(pow(1.-fract(.5*T), 4.)))) ) * .5 + .5);\n        float dif = max(0., dot(n, l));\n        float k = pow(max(0., .556 + length(dot(-l, reflect(n, -d)))), 15.) * exp2(15. - dot(D, D));\n        c = c * min(.01+ c * k, 1.5 -dif * vec3(1.2, 1.5, 1.4));\n    }\n\n    fragColor.rgb = sqrt(c);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n\n    Just an other reverb experiment\n    If you have a simple delay going there \n    Are some ops you can shuffle to your liking\n    The very improvment and the basic first step \n    Is to store the delay in a multi-channel\n    And than mix it down to a stereo output\n    Note: Probably less dense in a raw float 32bit output\n\n*/\n\n#define _f(_x)(fract(_x))\n#define tau (acos(0.)*4.) //6.283185307179586\n\nfloat drm(float t)\n{\n    float kk ;\n    float tt = t * 4., ft = mod(tt, 1.);\n    int ut = int(tt) % 12;\n    kk = (1. - ft);\n    kk = pow( kk, 4. ); //  * kk;\n    kk *= sin(12. * tau * kk);\n    kk *= float[](1.,0.,0.,1.,0.,0.,1.,0.,1.,1.,0.,0.)[ut];\n    return  .6 * kk * min(1., 10. * ft) * max( 0., 1.-ft);\n}\nfloat ns(inout float snn, float rt, float t)\n{\n    float sn;\n    float x = t * 5623.123456;\n    snn = mod(x * mod(t + x, 1.), 1.);\n    sn = snn * min(1., mod(rt/2., 2.) ) * max(0., 1.-mod(rt/2., 2.) ) ;\n    return rt>2.?(.02*sn*exp(-1.*_f(rt))):0.;\n}\nfloat shk(float t)\n{\n    float kk,sn;\n    float tt = t * 4., ft = mod(tt, 1.);\n    int ut = int(tt) % 12;\n    ns(sn, t, t);\n    sn *= float[](0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 1., 1.)[ut];\n    sn *=  .051 * atan(1. - ft, 5. * ft);\n    return  sn * min(1., 5. * ft) * max( 0., 1.-ft);\n}\n\nvec2 chd(in float rt, in float t, int ch)\n{\n    float mx = 8.;\n    int it = int(mx * t) % 4;\n    float ft = mod(mx * t, 1.);\n\n    mat4x2 p1 = mat4x2(57, 64, 67, 71, 72, 74, 76, 79);\n    mat4x2 p2 = mat4x2(56, 63, 67, 70, 72, 75, 79, 75);\n    mat4x2 p3 = mat4x2(53, 60, 63, 68, 70, 75, 67, 75);\n    mat4x2 p4 = mat4x2(48, 62, 65, 70, 74, 79, 67, 79);\n\n    vec2 pp =vec2(0., 0.);\n \n    switch(int( .5 * t)%4)\n    {\n        case 0:pp = p1[it];\n        break;\n        case 1:pp = p2[it];\n        break;\n        case 2:pp = p3[it];\n        break;\n        case 3:pp = p4[it];\n        break;   \n        default: vec2(0., 0.);\n    }\n\n    vec2 s = sin(rt * tau * 8.175799 * exp( 0.057762265 * pp) ) * ft  * ( 1. - ft );\n    if(ch==0)\n    {\n        return.55 * tanh(7. * s ) * min(1., 10. * ft) * max( 0., 1.-ft);\n    }\n    else\n    {\n    s.y *= cos(rt + 220.00 * exp(-.101 * pow(1. - ft, 14.)));\n    s.x = (sin(.5*s.x) + .43021 ) /(1.23242 + cos(7. * s.y));\n    return .2985 * vec2( tanh( 5. * s.x),  0); \n    }\n}\n\n\nvoid sndmix(inout vec2 y,in float k[8], in int c)\n{\n     y.x = k[0];\n     if(c<2) y.y = k[1+c];\n}\n\n#define MODE 3\nvec2 mainSound(in int samp, float t)\n{\n\n    vec2 y = vec2(1e-6, 1e-6);\n    #define initarr float[8](1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6)\n    float o[8] = initarr;\n    float k[8] = initarr;\n    float dlt = t;\n    float fsn = 0.;\n    int maxiter = 15;//29\n    for (int i = 1; i < maxiter; ++i)\n    {\n        for (int c = 0; c < 3; ++c)//max channels 7\n        {\n                dlt += .0991609 //brute forced correlation val\n                        * exp2( float(i / 6 % 8) );\n                o[c] += (ns(fsn, t, dlt) + drm(dlt) + chd(t, dlt, 1).x );\n                k[c]*= float[8](-1., -1., 1., 1., -1., -1., 1., 1.)[c];\n                o[c] = (c%2==0)? (k[c] = o[c]): (k[c] = o[(1+c)%4]);\n                k[c]*= -2./8.; //+/-\n                \n    #if MODE == 1 \n    \n          sndmix(y, k, i);\n          \n    #endif\n    \n        }\n    \n    #if (MODE == 1) || (MODE == 2)\n        #if MODE == 2\n        y.x = k[0]; \n        #endif\n        if(i>12)\n        {\n            y.y = k[1];\n            break;\n        }\n        \n    #endif\n    \n    }\n\n    \n    #if MODE == 3\n    // in array stored sample right to left like a rotation \n        y.x = k[0];\n        \n        for (int c = 0; c < 2; ++c)\n            y.y = k[1+c];\n            \n    #endif\n\n     t = (float(samp%int(8.*iSampleRate))/iSampleRate);//less hairy\n     \n     #if 1\n     return .211 * chd(.5*t,t, 0) + .51 * y  + (.7  * drm(t) + .223 * shk(t));\n     #else\n     return  .707 * y;\n     #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}