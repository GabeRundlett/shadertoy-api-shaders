{
    "Shader": {
        "info": {
            "date": "1547428176",
            "description": "infinite cube tessellation with indexing for individual cubes",
            "flags": 32,
            "hasliked": 0,
            "id": "wsl3WS",
            "likes": 7,
            "name": "cubes rings",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "vandale",
            "viewed": 971
        },
        "renderpass": [
            {
                "code": "struct Cube{\n    vec3 f1;\n    vec3 f2;\n    vec3 f3;\n};\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio= iResolution.x/iResolution.y;\n    float rows = 15.;\n    float cols = rows * ratio;\n    \n    \n    vec2 uv =  fragCoord/iResolution.xy;\n    uv.x *= ratio;\n    float row = trunc(rows - rows * uv.y) - trunc(rows/2.);\n    float col = trunc(rows * uv.x) - trunc(cols/2.);\n    \n    vec4 mask = texture(iChannel0, rows * uv);  \n    \n    Cube c1 = Cube(vec3(.2, .2, .6), vec3(1., 0., .35), vec3(1., .6, .2));\n    Cube c2 = Cube(vec3(1., 0., 0.), vec3(0., 1., .0), vec3(0., 0., 1.));\n    \n    Cube cube = c2;\n    if (mask.w == 1.){\n        row = 2. * row;\n        col = 2. * col + 1.;\n    }else if (mask.w == 2.){\n        row = 2. * row - 1.;\n        col = 2. * col;\n    } else if(mask.w == 3.){\n        row = 2. * row;\n        col = 2. * col - 1.;\n    } else if (mask.w == 4.){\n        row = 2. * row + 1.;\n        col = 2. * col;\n    }\n    \n    float d = abs(col) + abs(row);\n    \n    float t = trunc(rows * iTime);\n    if (0. <= mod( t - d, rows) && rows/2. >= mod( t - d, rows)){\n    \tcube = c1;\n    }\n    \n    vec3 color = mat3(cube.f1, cube.f2, cube.f3) * mask.xyz;\n    \n    \n    fragColor = vec4(color, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265359\n#define SQRT_3 1.7320508075688772\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 s1 = vec3(1., 0., 0.);\n    vec3 s2 = vec3(0., 1., 0.);\n    vec3 s3 = vec3(0., 0., 1.);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2. * uv  - 1.;\n    uv.x /= SQRT_3;\n    \n    float a = mod(PI/2.-atan(uv.x,uv.y), 2. *PI);\n    float r = length(uv);\n    float c = a / (PI/6.);\n    vec3 col;\n    float cube;\n    if(c<1.){\n        col = s1;\n        cube = 1.0;\n    }else if(c < 2.){\n    \tcol = s2;\n        cube = 2.0;\n    }else if (c<3.){\n        if (1./ cos(a + PI/3.) < -SQRT_3*r){\n        \tcol = s2;\n        }else{\n        \tcol = s1;\n        }\n        cube = 2.0;\n    }else if (c<4.){\n        if (1./cos(a - PI/3.) < SQRT_3*r){\n        \tcol = s1;\n        }else{\n        \tcol = s3;\n        }\n        cube = 2.0;\n    }else if (c < 5.){\n        col=s3;\n        cube = 2.0;\n    }else if (c < 7.){\n        col=s1;\n        cube = 3.0;\n    }else if (c < 8.){\n        col=s2;\n        cube = 3.0;\n    }else if (c < 9.){\n        if (1./cos(a + 4. *PI/3.) < -SQRT_3*r){\n        \tcol = s2;\n            cube = 3.0;\n        }else{\n        \tcol = s1;\n        \tcube = 4.0;\n        }\n    }else if (c < 10.){\n        if (1./cos(a - 4. *PI/3.) < +SQRT_3*r){\n        \tcol = s1;\n        \tcube = 4.0;\n        }else{\n        \tcol = s3;\n        \tcube = 1.0;\n        }\n    }else if (c < 11.){\n        col = s3;\n        cube = 1.0;\n    }else {\n    \tcol = s1;\n        cube = 1.0;\n    }\n    \n    fragColor = vec4(col, cube);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}