{
    "Shader": {
        "info": {
            "date": "1570757333",
            "description": "Interactive, click and drag mouse horizontally to adjust flight speed, vertically to adjust tunnel complexity. (Just tap and don't drag if on mobile)",
            "flags": 0,
            "hasliked": 0,
            "id": "WsVGzt",
            "likes": 3,
            "name": "Interactive Wormhole",
            "published": 3,
            "tags": [
                "mouse",
                "interactive",
                "infinity"
            ],
            "usePreview": 0,
            "username": "shadeThrower",
            "viewed": 580
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tme = iTime*.3;\n    float scale = 0.125;\n   \n    vec2 adjVec = vec2((sin(tme)*.5), (cos(tme)*.5));\n    vec2 uv = fragCoord/iResolution.xy;    \n    vec2 uvM;\n    float posMod;\n    float normX;\n    float normY;\n\n    //INTERACTIVE: Mouse X controls flight speed, Mouse Y controls depth\n    if(iMouse.y>0. || iMouse.x>0.){\n    \tnormX = ((iMouse.x)-1.)/iResolution.x;\n    \tnormY = ((iMouse.y)-1.)/iResolution.y;\n    }\n    else{\n        normX = 0.2;\n        normY = 0.2;\n    }\n    float zoomMult = pow(max(normY,0.001)*5., .5);\n    float posModGradA;\n    float posModGradB;\n    posModGradA = (cos(tme*1.1)*.9 + .1)/2.+.5;\n    posModGradB = (cos(tme*.9)*.9 + .1)/2.+.5;\n    //uv = vec2(pow((uv.x-.5)*length(normalize(uv-0.5))*5., -.05)*posMod, pow((uv.y-.5)*length(normalize(uv-0.5))*5., -.05)*posMod);\n    //uv = vec2(pow((uv.x-.5)*length(uv-0.5)*5., -.07)*posMod*2., pow((uv.y-.5)*length(uv-0.5)*5., -.07)*posMod*2.);\n    uv = vec2(pow(abs(uv.x-.5)+length(uv-.5), -.07)*zoomMult*2., pow(abs(uv.y-.5)+length(uv-.5), -.07)*zoomMult*2.);\n    uvM = mod(uv+fract((tme)*normX)*5.*(normY*.75+.25), scale);\n\n    uv = normalize(uvM-vec2(scale/2.))*(adjVec+vec2(.5));\n\n    if(mod(floor((uv.x)/scale),2.) == 0.)\n            uvM.x = scale - uvM.x;\n    if(mod(floor((uv.y)/scale),2.) == 0.)\n            uvM.y = scale - uvM.y;\n\n    uvM += adjVec*length(uvM + adjVec - vec2(0.5));\n\n    // Time varying pixel color\n    /*vec3 col = vec3(0.5 + 0.5*tan((cos(tme)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.)))),\n                    0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.)))),\n                    0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*(uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))));*/\n\n    // With uvM and uv gradients\n    vec3 col = vec3(0.5 + 0.5*tan((cos(tme)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(((cos(length(uv*posModGradA*100.))*.4+.6)+(cos(length(uvM*posModGradB*100.))*.4+.6))/2.),\n                    0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(((cos(length(uv*posModGradA*100.))*.4+.6)+(cos(length(uvM*posModGradB*100.))*.4+.6))/2.),\n                    0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*(uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))))*(((cos(length(uv*posModGradA*100.))*.4+.6)+(cos(length(uvM*posModGradB*100.))*.4+.6))/2.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}