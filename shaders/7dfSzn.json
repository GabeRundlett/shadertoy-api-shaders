{
    "Shader": {
        "info": {
            "date": "1618175290",
            "description": "Effect of ~30 min Shader Livecoding session at https://warszawskiedniinformatyki.pl/, Thanks for stopping by and watching pixels bouncing to music",
            "flags": 64,
            "hasliked": 0,
            "id": "7dfSzn",
            "likes": 3,
            "name": "WDI 2021 Livecoding",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "music",
                "reflections",
                "livecoding",
                "klos"
            ],
            "usePreview": 0,
            "username": "spolsh",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "// #version 410 core\n\n#define f float \n#define v2 vec2\n#define v3 vec3\n\n#define v2Resolution iResolution\n#define fGlobalTime iTime\n#define F gl_FragCoord\n#define R iResolution\n#define T iTime\n\n#define C(v) clamp(v, 0., 1.)\n#define N normalize\n#define H(v) fract(sin(100.0*v) * 43758.5453)\n\n// #define BI(v) (texture(texFFTIntegrated, v).x)\n// #define BS(v) (texture(texFFTSmoothed, v).x)\n// #define B(v) (texture(texFFT, v).x)\n// fake beat accumulation, next time I will save it in buffer\n#define B2(v) (0.05*T+0.005*texture(iChannel0, v2(v, 0.5)).x)\n#define B1(v) (0.005*texture(iChannel0, v2(v, 0.5)).x)\n#define B0(v)  (0.005*texture(iChannel0, v2(v, 0.5)).x)\n\n#define texNoise iChannel1\n\n// uniform float fGlobalTime; // in seconds\n// uniform vec2 v2Resolution; // viewport resolution (in pixels)\n\nv3 colA = v3(0.2, 0.5, 1.2);\nv3 cP = v3(0.);\n\nf gG = 10e8;\n\nmat2 rot(f a) {return mat2(cos(a), -sin(a), sin(a), cos(a)); }\n\nvec4 plas( vec2 v, float time )\n{\n\tfloat c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n\treturn vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25, 1.0 );\n}\n\nf map(v3 p) {\n  f s = 10e8;\n  s = -abs(p.y) + 1.5;\n  \n  v3 p2 = p;\n  p2.x = abs(p2.x) - 2.0;\n  p2.z = mod(p2.z + 5.0, 10.0) - 5.0;\n  p2.y = mod(p2.z +  .01, 0.02) - 0.01;\n  s = min(s, length(p2) - 0.5);\n  p2.x -= 2.;\n  s = min(s, length(p2) - 0.5);\n  \n  v3 p3 = p;\n  p3.y -= 0.5;\n  p3.z -= 8.0;\n  p3.z = mod(p3.z + .01, .02) - .01;\n  p3.y += 0.5 + .5*sin(0.3*p.z);\n  p3.x += 1.5*sin(0.1*p.z);  \n  f s5 = min(s, length(p3) - 0.05);\n  p3.z -= 10.0*B0(0);\n  s5 = min(s5, length(p3) - 0.05);\n  p3.x -= 10.0*B0(0.1);\n  s5 = min(s5, length(p3) - 0.1);\n  p3.x -= 10.0*B0(0.2);\n  s5 = min(s5, length(p3) - 0.1);\n  gG = min(gG, s5);  \n  s = min(s, s5);  \n  \n  v3 p1 = p - cP;\n  p1.y += 100.0*B1(0.0);\n  p1.z -= 10.0 + 5.0*sin(10.0*B2(0));\n  \n  f s3 = 10e8;\n  for (f i = 0.; i < 4.; ++i) {\n    p1 -= v3(0.1, 0.3, 0.5);   \n    p1.xz *= rot(10. * B2(0.));\n    p1.zy *= rot(-9. * B2(0.));\n    p1.xy *= rot(50. * B1(0.));\n    // p1.zy *= rot(0.5 * B2(0.) );\n    p1 = abs(p1);\n    p1 *= 0.9;\n    f s4 = length(p1) -0.1 -5.0*B0(0.);\n    vec3 p4 = p1;\n    if (i < 2. + B1(0.)) {\n      p4.y = mod(p4.y +  .01, 0.02) - 0.01;\n      f s2 = length(p4) -0.05 -1.0*B0(0.);\n      s3 = min(s3, s2);\n      s3 = min(s3, s4);\n    }      \n  }\n  gG = min(gG, s3);  \n  s = min(s, s3);\n  return s;\n}\n\nvoid mainImage( out vec4 out_color, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(v2Resolution.y / v2Resolution.x, 1);\n\n  \n  out_color = vec4(0);  \n  if (abs(uv.y) > 0.35) return;\n  \n  vec3 ro = vec3(0, 0, 0);\n  ro.x += sin(20.0*B2(0.));\n  ro.y += 0.1*sin(20.0*B2(0.));\n  ro.z += 20.0*T;\n  cP = ro;\n  vec3 rd = N(vec3(uv, 2.));\n  rd.xy *= rot(0.5*sin(0.5* T));\n  v3 c = v3(0.0);\n  \n  f t = 0.1;\n  for (f i = 0.; i < 128.; ++i) {\n    f d = map(ro + rd * t);\n    if (abs(d) < 0.001 || t > 40.0) break;\n    t += d;\n  }\n  \n  if (t > 0.2 || t < 40.) {\n    v3 p = ro + rd  * t;    \n    f tex0 = texture(texNoise, floor(20.0*( vec2(1.0, 0.05) * p.xz + vec2(0, 1) * T))/20.0).x;\n    f tex1 = texture(texNoise, floor(20.0*( vec2(0.5, 0.005) * p.xz + vec2(0, 0.5) * T))/20.0).x;\n    c += 0.25 * colA.xyz * smoothstep(0.2, 0.7, tex0);\n    c += 0.25 * colA.xyz * smoothstep(0.2, 0.7, tex1);\n    \n    c += 0.1 * colA.xzy * smoothstep(0.0, 1., sin(p.z + 10.*T));\n    c += 0.5 * colA.xzy * smoothstep(0.9, 1., sin(0.5*p.z + 10.*T));\n    c += 0.5 * colA.xzy * smoothstep(0.5, 1., sin(0.5*p.z + 10.*T)) * sin(p.z + sin(100.0*p.x) + 10.*T);\n  }\n  \n  c = mix(c, 0.1*colA.yzx, 1.0 - exp(-0.005 * t*t));\n  \n  v3 colB = v3(1., 0.5, 0.5);\n  f sb = 0.01 + 20.0*B1(0.);\n  c += sb * colB.xyz * exp(gG * - 0.01);\n  c += sb * colB.xyz * exp(gG * - 0.1);\n  c += sb * colB.xyz * exp(gG * - 1.0);\n  c += sb * colB.xyz * exp(gG * - 5.0);\n  c += sb * colB.xyz * exp(gG * - 10.0);\n  \n  c += 10.0*B0(0);\n  \n  // c = v3(1) * (t/64.);\n  c = C(c / (c + 1.));  \n  c = pow(c, v3(1. -50.0*B1(0.), 1. -50.0*B1(0.25), 1. -50.0*B1(0.5)));\n  c = smoothstep(0., .6, c);\n  c = pow(c, v3(0.4545));\n  out_color = vec4(c, 1);  \n\t// out_color = vec4(rd, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 26619,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/inzynier/bad-dream-good-dream-podcast"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}