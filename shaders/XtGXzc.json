{
    "Shader": {
        "info": {
            "date": "1485196968",
            "description": "wew",
            "flags": 0,
            "hasliked": 0,
            "id": "XtGXzc",
            "likes": 0,
            "name": "Van Dammed CheckerBoard",
            "published": 3,
            "tags": [
                "checkerboard"
            ],
            "usePreview": 0,
            "username": "slarsen",
            "viewed": 490
        },
        "renderpass": [
            {
                "code": "#define ROWS 9.0\n#define COLUMNS 16.0\n\n\t//Functions for optimizing out conditionals\n//returns 0.0 if !=, 1.0 if ==\nfloat when_eq(float x, float y) \n{\n  return 1.0 - abs(sign(x - y));\n}\n//returns 0.0 if ==, 1.0 if !=\nfloat when_neq(float x, float y) \n{\n  return abs(sign(x - y));\n}\n\t//Math Helper Functions\n//My round function, no webgl provided implementation I guess...\nfloat round(float x)\n{\n    return floor(x + 0.5);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //slowly circularly scrolling UV for checkerboard\n    vec2 MovingUV = vec2(uv.x + 2.0*sin(iTime /8.0),uv.y + 2.0*cos(iTime /8.0));\n//Uncomment to stop checkerboard scrolling\n\t//MovingUV = uv;\n    \n    //texture0, van damme\n    vec4 texture0 = texture(iChannel0, uv);\n    //texture1, fast scrolling color noise\n    vec4 texture1 = texture(iChannel1, uv + 4.0 * iTime);\n    \n    //create floats with values of either 0.0 or 1.0 \n    //corresponding to rounded modulus of MovingUV.x/.y and Columns/Rows\n    float column = round(COLUMNS/2.0 * mod(MovingUV.x, 1.0/(COLUMNS/2.0)));\n    float row = round(ROWS/2.0 * mod(MovingUV.y, 1.0/(ROWS/2.0)));\n\n    //if both row and column are equal, use inverted texture\n    fragColor = when_eq(row, column)*(vec4(1.0) - texture0);\n    \n    //if both row and column are not equal, use texture0 + texture1\n    fragColor += when_neq(row,column)*(texture0/2.0 + texture1/2.0);\n       \n    fragColor.a = 1.0;    \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}