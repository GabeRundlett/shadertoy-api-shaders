{
    "Shader": {
        "info": {
            "date": "1603244467",
            "description": "Just word",
            "flags": 0,
            "hasliked": 0,
            "id": "wdGyRK",
            "likes": 4,
            "name": "G OOD",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "#define S smoothstep\n#define T iTime\n\n#define pi (3.14159265359)\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n    p += vec2(523.124, 244.155);\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 neon(float t, vec3 col){\n    t = 1. - t;\n    float mx=max(col.x, max(col.y, col.y));\n    return col * t / mx;\n}\n\nmat2 Rot(float a) {\n    a *= pi * 2.;\n    float s=sin(a), c=cos(a);\n    return mat2(c, s, -s, c);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat seg(vec2 uv, vec2 a, vec2 b, float t){\n    t = clamp(0., 1., t);\n    return sdSegment(uv, a, t * (b - a) + a);\n}\n\nfloat polarAgl(vec2 v){\n    return fract((atan(v.y, v.x)) / pi / 2. + 1.);\n}\n\nfloat arcDist(vec2 uv, vec2 c, vec2 a, float agl){\n    vec2 v = uv - c;\n    vec2 b = a - c;\n    float r = length(b);\n    float d = length(v);\n    float uv_agl = fract((atan(v.y, v.x) - atan(b.y, b.x)) / pi / 2. + 1.);\n    uv_agl = fract(polarAgl(v) - polarAgl(b));\n    if (uv_agl < agl)\n    \treturn abs(d - r);\n    return min(length(uv - a), length(Rot(agl) * (a - c)  + c - uv));\n}\n\nvec3 boomEvaluateParametrs(vec2 uv, vec2 c, vec2 partsrange, vec2 speedrange, float seed){\n    vec2 v = uv - c;\n    float uv_agl = polarAgl(v);//fract(atan(v.y, v.x) / pi / 2. + 1.);\n    float partsnum = partsrange.x + floor((partsrange.y - partsrange.x) * hash12(vec2(seed, 31.41)));\n    float id = floor(uv_agl * partsnum - 1e-7) / partsnum;\n    float speed = speedrange.x + (speedrange.y - speedrange.x) * hash12(vec2(id, seed));\n    return vec3(id, partsnum, speed);\n}\n\nvec2 boomShift(vec2 uv, vec2 c, vec2 partsrange, vec2 speedrange, float seed){\n    vec3 tmp = boomEvaluateParametrs(uv, c, partsrange, speedrange, seed);\n    float id = tmp.x;\n    float partsnum = tmp.y;\n    float speed = tmp.z;\n    //return vec2(id);\n    return Rot(id + 0.5 / partsnum) * vec2(-speed, 0.);\n}\n\nvec2 boomed(vec2 uv, vec2 c, vec2 partsrange, vec2 speedrange, float seed, float t){\n    vec2 sh = boomShift(uv, c, partsrange, speedrange, seed) * t;\n    if (boomEvaluateParametrs(uv + sh * t, c, partsrange, speedrange, seed).x !=\n        boomEvaluateParametrs(uv, c, partsrange, speedrange, seed).x){\n        return vec2(1e9);\n    }\n    return uv + sh * t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float T = iTime / 2.;\n    float seed = floor(T / 12.) + 1.52;\n    T = mod(T, 12.);\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv /= 2.;\n    \n    uv *= S(0., 1., T - 2.) * 1.4 + 1.;\n    uv.x += S(0., 1., T - 2.) / 2.;\n    vec2 buv = uv;\n    //uv += boomShift(uv, vec2(.5, -.5), vec2(30., 50.), vec2(.1, .2), 1.52) * S(8., 15., T) * 10.;\n    uv = boomed(uv, vec2(.5, -.5), vec2(30., 50.), vec2(.1, .2), seed, S(7., 12., T) * 3.5);\n    //uv += boomShift(uv, vec2(0., 0.), vec2(30., 50.), vec2(.1, .2), 1.52) * S(8., 15., T) * 10.;\n    \n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float d = arcDist(uv, vec2(0.), vec2(.2, .1), S(0., 1., T) * 0.85242);\n    d = min(seg(uv, vec2(.2, -.1), vec2(.1, -.1), S(0., 1., T - 1.)) + step(T, 1.), d);\n    \n    d = min(seg(uv, vec2(.2, -.1), vec2(.2, -.2), S(0., 1., T - 1.)) + step(T, 1.), d);\n    \n    d = min(arcDist(uv, vec2(.5, 0.), vec2(.7, .0), S(0., 1., T - 3.)) + step(T, 3.), d);\n    float tmp = arcDist(uv, vec2(0.9, 0.), vec2(.7, .0), S(0., 1., T - 3.)) + step(T, 3.);\n    tmp += step(abs(abs(T - 6.5) - 0.2), 0.1);\n    d = min(tmp, d);\n    \n    uv.y = abs(uv.y);\n    d = min(seg(uv, vec2(1.1, .0), vec2(1.1, 0.2), S(0., 1., T - 4.)) + step(T, 4.), d);\n    \n    uv.y = -uv.y;\n    d = min(arcDist(uv, vec2(1.1, 0.), vec2(1.1, -.2), S(0., 1., T - 5.) * 0.25) + step(T, 5.), d);\n    \n    \n    \n    fragColor = vec4(d * 100.);\n    fragColor = vec4(neon(d * 100., vec3(0.8, 0.3, 0.5)), 1.);\n    \n    uv = buv;\n    \n    //fragColor = vec4(uv + boomShift(uv, vec2(.5, -.5), vec2(30., 50.), vec2(.1, .2), 1.52), 0., 1.);\n    //fragColor = boomShift(uv, vec2(.0, -.0), vec2(5., 5.), vec2(.1, .2), 1.52).xxxx;\n    //fragColor = vec4(length(Rot(1./5.) * vec2(0.3, 0.) - uv) * 100.);\n    //fragColor = vec4(fract(atan(uv.y, uv.x) / pi / 2. + 1.));\n    return;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}