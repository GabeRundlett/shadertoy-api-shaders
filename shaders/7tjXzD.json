{
    "Shader": {
        "info": {
            "date": "1627256337",
            "description": "Solution to x^y=y^x in terms of the Lambert W function.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tjXzD",
            "likes": 6,
            "name": "x^y = y^x - Solved (Lambert W)",
            "published": 3,
            "tags": [
                "solution",
                "lambertw",
                "specialfunction"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "// See https://www.desmos.com/calculator/7w04yjoiwx\n// See also @iq's shader about x^y=y^x https://www.shadertoy.com/view/XdySR3\n// W1(x) and W2(x) are the two branches of the Lambert W function (https://en.wikipedia.org/wiki/Lambert_W_function)\n// According to the wikipedia article, they are actually denotated W_0(x) and W_-1(x)\n// but that convention doesn't work in GLSL syntax\n\n#define draw(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\nfloat h1(in float x) { return 0.62 * log(x + 0.5) + 0.3; }\nfloat h2(in float x) { return -4.68 - 10.0 * x; }\nfloat n(in float y, in float x) { return y - (y - x / exp(y)) / (y + 1.0); } // Newton-Raphson\nfloat W1(in float x) { return n(n(n(n(n(n(n(n(h1(x), x), x), x), x), x), x), x), x); } // y > -1\nfloat W2(in float x) { return n(n(n(n(n(n(n(n(h2(x), x), x), x), x), x), x), x), x); } // y < -1\n\n// Solutions (two possible)\nfloat f(in float x) { return exp(-W1(-log(x) / x)); }\nfloat g(in float x) { return exp(-W2(-log(x) / x)); }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Grid\n    draw(abs(fract(uv.x + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(fract(uv.y + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    draw(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    // Draw the solved equation (two parts)\n    if (mod(iTime, 4.0) < 2.0) {\n        float y = f(uv.x);\n        float dx = (f(uv.x + 0.001) - y) / 0.001;\n        draw(abs(uv.y - y) / sqrt(1.0 + dx * dx) - 0.01, vec3(1.0, 0.0, 0.0));\n\n        y = g(uv.x);\n        dx = (g(uv.x + 0.001) - y) / 0.001;\n        draw(abs(uv.y - y) / sqrt(1.0 + dx * dx) - 0.01, vec3(0.0, 0.0, 1.0));\n    }\n\n    // Draw the implicit equation\n    else {\n        #define f(x, y) (pow(x, y) - pow(y, x))\n        float d = f(uv.x, uv.y);\n        vec2 g = (vec2(f(uv.x + 0.001, uv.y), f(uv.x, uv.y + 0.001)) - d) / 0.001;\n        draw(abs(d) / length(g), vec3(0.0));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}