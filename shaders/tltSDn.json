{
    "Shader": {
        "info": {
            "date": "1580777528",
            "description": "some experimental stuff for my adaptive distribution path tracer. I was trying to get a smooth in time and space blue noise distribution for the direction. Now I need to compute the probability distribution function for this to compensate the oversampling",
            "flags": 32,
            "hasliked": 0,
            "id": "tltSDn",
            "likes": 6,
            "name": "Adaptive direction noise",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 pos )\n{\n    vec3 dir = pixelmm(ch0, (0.2*pos+s2d*0.4),(pos.x>s2d.x*0.5)?0.:0.).xyz;\n    \n    vec3 col = dir*0.5 + 0.5;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n#define pixelmm(a, p, m) texture(a, p/vec2(textureSize(a,0)),m)\n#define texel(a, p) texelFetch(a, ivec2(p),0)\n#define s2d iResolution.xy\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//smoothing in time\n#define str 0.05\n\n//noise radius\n#define rad 2\n\nvoid mainImage( out vec4 V, in vec2 pos )\n{\n    V = pixel(ch0, pos);\n    vec3 seed = vec3(pos,iTime);\n     vec2 dc= pos-s2d*0.5;\n    \n    //repulsion from neighbor directions\n    vec3 F = vec3(0.);\n    for(int i = -rad; i <= rad; i++)\n    {\n        for(int j = -rad; j <= rad; j++)\n    \t{\n            if(i!=0 && j!=0)\n            {\n                vec2 ij = vec2(i,j)/float(rad);\n                vec3 ndir = pixel(ch0, pos+ij).xyz;\n          \t    vec3 dV = V.xyz - ndir;\n                vec3 d0 = 2.*(hash33(seed+vec3(i,j,0))-0.5);\n            \tF += d0*exp(-1.*dot(dV,dV)+0.2*dot(ij,ij));\n            }\n    \t}\n    }\n    \n    //redistribution depending on external factors\n    F += 10.*exp(-0.01*dot(dc,dc))*(vec3(2.,0,1)-V.xyz) + //light direction\n         1.6*(vec3(0,0,1)-V.xyz); //normal direction\n    \n    V.xyz = normalize(V.xyz + str*F);\n    \n    if(iFrame < 1)\n    {\n        V.xyz = vec3(1,0,0);\n        V.w = 1.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}