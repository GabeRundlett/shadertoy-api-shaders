{
    "Shader": {
        "info": {
            "date": "1596042977",
            "description": "What could they mean?",
            "flags": 0,
            "hasliked": 0,
            "id": "wl2yDc",
            "likes": 22,
            "name": "Ancient Symbols",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "random",
                "fonts",
                "symbols"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 692
        },
        "renderpass": [
            {
                "code": "//Ancient Symbols\n//by Sam Gates (BackwardsCap)\n\n#define R iResolution.xy\n#define PI 3.1415927\n#define m vec2(5.+2.*4.,10.)\n#define SS(U) smoothstep(PX, 0., U)\n\n//#define MORPH\n\n//Any advice on fixing the inconsistency on the connecting edges when you resize the screen would be very welcome\n#define PX 30./R.y\n\n\nfloat rand (vec2 p)\n{\n    float d = iDate.w;\n    #ifdef MORPH\n    vec2 pp = mod(p,m);\n    d=floor(d*pp.x*pp.y)/30.;\n    #endif\n    return fract(sin(dot(p.xy,vec2(12389.1283,8941.1283)))*(12893.128933)+cos(floor(d)));\n}\n\nmat2 rot(float a){return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\n//https://www.shadertoy.com/view/4llXD7\nfloat B(vec2 p, vec2 b, vec4 r)\n{\n    r.xy = p.x>0.0?r.xy : r.zw;\n    r.x = p.y>0.0 ? r.x : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return SS(min(max(q.x,q.y),0.0)+length(max(q,0.0))-r.x);\n}\n\nbool removed(float h, vec2 p)\n{\n    vec2 lp = mod(p,m);\n    float h2 = rand(vec2(20.+h*(floor(p.y))+10.84));\n    if(lp.x>=4.&&lp.x<11.||lp.y>=6.)return true;\n    return h*dot(h,h2)*5.<=.5;\n}\n\n\nfloat C(vec2 p){return SS(length(p-.5)-.4);}\n\nfloat CL(vec2 p, float a)\n{\n    vec2 bp = (p-.5);\n    bp*=rot(PI/4.*a);\n    bp.x+=.5;\n    return B(bp, vec2(.6,.345), vec4(.3));\n}\n\nfloat CE(vec2 p, vec2 o)\n{\n    return B((p+o)*rot(PI/4.), vec2(.5), vec4(0));\n}\n\nfloat EL(vec2 p, float t)\n{\n    vec2 b = vec2(.5,.4-PX);\n    p-=vec2(.5,.5);\n    p*=rot(PI/2.*t);\n    p.x+=PX;\n    vec4 r = vec4(b.x-b.x/2.,b.x-b.x/2.,0,0);\n    return B(p, b, r);\n}\n\nfloat D(vec2 p, float r)\n{\n    p-=.5;\n    p*=rot(PI/2.*r);\n    p+=.13;\n    float b1 = B(p,vec2(.5),vec4(.5,0,0,0));\n    p+=.77;\n    float b2 = B(p,vec2(.5),vec4(0,0,0,.025));\n    return b1-b2;\n}\n\n\nfloat T(vec2 p, float r)\n{\n    p-=.5;\n    p*=rot(PI/2.*r);\n    return B(p,vec2(.4-PX,.6), vec4(0));\n}\n\nfloat render(vec2 p, float h)\n{\n    bool neighbors[9];\n    int ul=6,u=7,ur=8,l=3,me=4,r=5,dl=0,d=1,dr=2;\n    int n=0;\n\n    float o = 0.;\n\n    for(float y=-1.;y<=1.;y++)\n    {\n        for(float x=-1.;x<=1.;x++){\n\n            int i = int((x+1.)+(y+1.)*3.);\n\n            vec2 pos = floor(p+vec2(x,y));\n\n            neighbors[i]= !removed(rand(pos),pos);\n\n            if(i!=me&&neighbors[i])\n            {\n                n++;\n            }\n        }\n    }\n    \n    p=fract(p);\n\n    if(neighbors[me])\n    {\n        if(n==0) return C(fract(p));\n\t\t\n        if(neighbors[u]&&neighbors[d]){\n\n            float o = T(p,0.);\n            if(neighbors[l])o+=EL(p+vec2(.175,0),0.);\n            if(neighbors[r])o+=EL(p-vec2(.175,0),2.);\n            return o;\n        }\n        if(neighbors[l]&&neighbors[r])\n        {\n            float o = T(p,1.);\n            if(neighbors[u])o+=EL(p-vec2(0,.25),1.);\n            if(neighbors[d])o+=EL(p+vec2(0,.25),3.);\n            return o;\n        }\n\n\n        if(neighbors[u]&&!neighbors[d]&&!neighbors[l]&&!neighbors[r])\n        {\n            float o = EL(p-vec2(0,.3),1.);\n\n            if(neighbors[dl]) o+=CL(p-vec2(.175),7.);\n            if(neighbors[dr]) o+=CL(p-vec2(-.175,.175),5.);\n\n            return o;\n        }\n\n        if(neighbors[d]&&!neighbors[u]&&!neighbors[l]&&!neighbors[r])\n        {\n            float o = EL(p+vec2(0,.3),3.);\n\n            if(neighbors[ul]) o+=CL(p+vec2(-.175,.175),1.);\n            if(neighbors[ur]) o+=CL(p+vec2(.175),3.);\n\n            return o;\n        }\n\n        if(neighbors[l]&&!neighbors[r]&&!neighbors[d]&&!neighbors[u])\n        {\n            float o = EL(p+vec2(.3,0),0.);\n\n            if(neighbors[ur]) o+=CL(p+vec2(.175,.175),3.);\n            if(neighbors[dr]) o+=CL(p-vec2(-.175,.175),5.);\n\n            return o;\n        }\n\n        if(neighbors[r]&&!neighbors[l]&&!neighbors[d]&&!neighbors[u])\n        {\n            float o = EL(p-vec2(.3,0),2.);\n\n            if(neighbors[ul]) o+=CL(p+vec2(-.175,.175),1.);\n            if(neighbors[dl]) o+=CL(p-vec2(.175),7.);\n\n            return o;\n        }\n        float j = 0.0;\n        if(!neighbors[u]&&neighbors[r]&&!neighbors[l]&&neighbors[d])j+= D(p,3.);\n        if(neighbors[u]&&neighbors[r]&&!neighbors[l]&&!neighbors[d])j+= D(p,2.);\n        if(!neighbors[u]&&!neighbors[r]&&neighbors[l]&&neighbors[d])j+= D(p,0.);\n        if(neighbors[u]&&!neighbors[r]&&neighbors[l]&&!neighbors[d])j+= D(p,1.);\n        if(neighbors[ul]&&!neighbors[l]&&!neighbors[u]) j+=CL(p+vec2(-.175,.175),1.);\n        if(neighbors[dl]&&!neighbors[l]&&!neighbors[d]) j+=CL(p-vec2(.175),7.);\n        if(neighbors[ur]&&!neighbors[r]&&!neighbors[u]) j+=CL(p+vec2(.175,.175),3.);\n        if(neighbors[dr]&&!neighbors[r]&&!neighbors[d]) j+=CL(p-vec2(-.175,.175),5.);\n        \n\n        return  j;\n    }else{\n        float o = 0.0;\n        if(!neighbors[ul]&&neighbors[u]&&neighbors[l])o+= CE(p,vec2(.07,-1.15));\n        if(!neighbors[ur]&&neighbors[u]&&neighbors[r])o+= CE(p, vec2(-1.11));\n        if(!neighbors[dl]&&neighbors[d]&&neighbors[l])o+= CE(p,vec2(.11));\n        if(!neighbors[dr]&&neighbors[d]&&neighbors[r])o+= CE(p,vec2(-1.11,.11));\n        return o;\n    }\n}\n\nvoid mainImage( out vec4 c, in vec2 f )\n{\n\n    vec2 p = ((2.0*f-R)/R.y), u=p;\n    \n    p*= (6.0/PI)* (20.*clamp((1.0+sin(-2.1+iTime/5.))/1.5,0.1,1.25));\n    p-=vec2(51,-3.);    \n\n    vec2 lp = (p);\n    p=floor(p);\n    float hash = rand(p);\n    c.rgb=vec3(clamp(render(lp,hash),0.,1.));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}