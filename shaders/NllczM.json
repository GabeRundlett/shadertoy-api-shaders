{
    "Shader": {
        "info": {
            "date": "1647688352",
            "description": "draw a ~screenspace-constant density of curves \n\niMouse.y controls zoom while preserving screen-space density.",
            "flags": 0,
            "hasliked": 0,
            "id": "NllczM",
            "likes": 15,
            "name": "adaptive polar lines 3",
            "published": 3,
            "tags": [
                "raytracing",
                "intersection",
                "isolines",
                "hatching",
                "balanced"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/flXyR7\n\n//#define S\n#define S(v)     ( v - 6.283*sign(v)*step(3.14,abs(v)) )     // fight wrap discontinuity\n#define fwidth2(v) length( S( vec2( dFdx(v), dFdy(v) ) ) )   // high quality fwidyj\n#define fwidth(v)  fwidth2(v)                                // to manage wrap\n#define r          mat2(cos(.3*iTime+vec4(0,-1,1,0)*1.5708)) // rotation\n#define LOD(v)     exp2( round(log2(abs(.5/(v)))))\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec3 R = iResolution,\n         P = vec3( 2.*u - R.xy, 0 ) / R.y;                 // P on sphere surface (or background)\n    if (iMouse.z>0.) P *= exp2( 2.*(2.*iMouse.y/R.y-1.) ); // mouse.y zoom\n    float l = length(P), n=2.;                             // n : more lines  \n    P.z = sqrt(1.-l*l);\n    P.xy *= r; P.yz *= r;                                  // rotations\n    float a = sign(P.z)* acos(clamp(P.x/sqrt(1.-P.y*P.y),-1.,1.)), // polar coord\n          t = sin(3.*asin(P.y)),\n          U = a + .1*cos(10.*a)  - t,                      // isoline to draw\n          V,\n          d = fwidth2(U),\n          z = LOD(d) ,                                     // LOD \n          f = .5 + log2(abs(.5/d)) - log2(z),              // fractional part\n          p = fwidth(U) * z*n;\n          U *= z*n;\n    V = abs(sin(U)/(cos(U)*p));                            // lines\n // f = max(1.5*f-.5 ,0.);                                 // shorter transition\n    O = l > 1. \n          ? vec4(.5)                                       // background\n          : vec4( abs(sin(U/2.)) < .5 \n                    ? V                                    // plain line\n                    : mix( 1., V, f ));                    // transition lines  \n\n    O = sqrt(O);                                           // to sRGB\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}