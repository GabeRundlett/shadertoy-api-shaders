{
    "Shader": {
        "info": {
            "date": "1502462717",
            "description": "Volumetric 32x32x32 Stanford Bunny.\nOriginal doesn't compile on OpenGL because of compiler bug (max array 8x smaller if using interpolation !)\n->  we store the array in bufA. This saves many register + free bilinear interpolation.\nHere: + precomputed N",
            "flags": 32,
            "hasliked": 0,
            "id": "MsSfWc",
            "likes": 15,
            "name": "Volumetric Stanford Bunny 5",
            "published": 3,
            "tags": [
                "voxel",
                "bug",
                "volumetricrendering",
                "stanfordbunny"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 1301
        },
        "renderpass": [
            {
                "code": "// To avoid the OpenGL array bug as in https://www.shadertoy.com/view/ls2BRt \n// (investigated here https://www.shadertoy.com/view/4sBBWy) \n// + for performance, store 3D array in BufA with band gard to avoid modulo-leaks.\n// Then xy interpolation is provided by hardware, only z still to be done.\n// Bunny data from SebH https://www.shadertoy.com/view/MdlyDs\n\n// Here: adding normals precomputation to https://www.shadertoy.com/view/MdSfWc\n\n#define voxelB(x,y,z) ( min(x,min(y,z)) >= 0. && max(x,max(y,z)) < 32.    \\\n            ? texture(iChannel0, (1.5+vec2(x,y)+33.*vec2(int(z)%8,int(z)/8))/iResolution.xy ) \\\n            : vec4(0) )   \n\n#define voxel(x,y,z) mix( voxelB(x,y, z), voxelB(x,y, z+1.), fract(z) )\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvoid mainImage( out vec4 O,vec2 u )\n{\n // O = texelFetch(iChannel0,ivec2(U),0).aaaa;  return;            // debug: show density data\n // O = .5+.5*texelFetch(iChannel0,ivec2(U),0); return;            // debug: show normals data\n\n    vec2 R = iResolution.xy,\n         U = 1.7*  (2.*u - R) / R.y;\n    vec3 C = vec3(U,1); C.yz *= rot(.78); C.xz *= rot(-iTime);     // for optional envmap\n    O -= O; \n    vec2 M = iMouse.xy;\n    M  = length(M) < 20. ? vec2(-iTime,.78) : -1.57*(2.*M-R)/R.y;\n    \n    for (float i=-1.4; i<1.; i+=.3/16.) {  // step .3 for Nyquist\n        vec3 P = vec3( U, i); \n        P.yz *= rot(M.y);\n        P.xz *= rot(M.x);\n        vec3 A = abs(P);  if (max(A.x,max(A.y,A.z))>1.) continue;  // optimization\n        P = 16.*(P+1.);\n        vec4 V = voxel( P.x , P.z, P.y  ); // .a = density, .xyz = gradient\n        vec3 col = vec3(.3,0,0) + vec3(1) *clamp(dot(V.xyz,normalize(vec3(0,0,1))),0.,1.);\n     // vec3 col = texture( iChannel1, reflect(C,V.xzy) ).rgb;     // variant: envmap\n        O += (1.-O.a) * V.a * vec4( col, 1) ;\n    }\n    O += (1.-O.a) * vec4(.1,.3,0,1);                               // background\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Stores (once) the density array in texture in .a ,\n// with band gards to avoid modulo-leaks\n// + precomputes (once) the gradients in .xyz\n\n// data from SebH https://www.shadertoy.com/view/MdlyDs\n// Packed 32^3 bunny data as 32x32 uint where each bit represents density per voxel\nconst uint packedBunny[1024] = uint[1024](0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,917504u,917504u,917504u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1966080u,12531712u,16742400u,16742400u,16723968u,16711680u,8323072u,4128768u,2031616u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,6144u,2063360u,16776704u,33553920u,33553920u,33553920u,33553920u,33520640u,16711680u,8323072u,8323072u,2031616u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,268435456u,402653184u,134217728u,201326592u,67108864u,0u,0u,7168u,2031104u,16776960u,33554176u,33554176u,33554304u,33554176u,33554176u,33554176u,33553920u,16744448u,8323072u,4128768u,1572864u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,805306368u,939524096u,402653184u,478150656u,260046848u,260046848u,260046848u,125832192u,130055680u,67108608u,33554304u,33554304u,33554304u,33554304u,33554304u,33554304u,33554304u,33554176u,16776704u,8355840u,4128768u,917504u,0u,0u,0u,0u,0u,0u,0u,0u,0u,805306368u,1056964608u,1056964608u,528482304u,528482304u,260046848u,260046848u,260046848u,130039296u,130154240u,67108739u,67108807u,33554375u,33554375u,33554370u,33554368u,33554368u,33554304u,33554304u,16776960u,8330240u,4128768u,393216u,0u,0u,0u,0u,0u,0u,0u,0u,939524096u,1040187392u,1040187392u,520093696u,251658240u,251658240u,260046848u,125829120u,125829120u,130088704u,63045504u,33554375u,33554375u,33554375u,33554407u,33554407u,33554370u,33554370u,33554374u,33554310u,16776966u,4144642u,917504u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,15360u,130816u,262017u,4194247u,33554383u,67108847u,33554415u,33554407u,33554407u,33554375u,33554375u,33554318u,2031502u,32262u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,31744u,130816u,262019u,2097151u,134217727u,134217727u,67108863u,33554415u,33554407u,33554415u,33554383u,2097102u,982926u,32262u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,31744u,130816u,524263u,117964799u,127926271u,134217727u,67108863u,16777215u,4194303u,4194303u,2097151u,1048574u,65422u,16134u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3u,31751u,130951u,524287u,252182527u,261095423u,261095423u,59768830u,2097150u,1048574u,1048575u,262143u,131070u,65534u,16134u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,7u,31751u,130959u,503840767u,520617982u,529530879u,261095423u,1048575u,1048574u,1048574u,524286u,524287u,131070u,65534u,16134u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3u,1799u,32527u,134348750u,1040449534u,1057488894u,520617982u,51380223u,1048575u,1048575u,524287u,524287u,524287u,131070u,65534u,15886u,6u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1536u,3968u,8175u,65535u,1006764030u,1040449534u,1057488894u,50855934u,524286u,524286u,524287u,524287u,524286u,262142u,131070u,65534u,32270u,14u,6u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3968u,8160u,8191u,805371903u,2080505854u,2114191358u,101187582u,34078718u,524286u,524286u,524286u,524286u,524286u,524286u,262142u,131070u,32766u,8078u,3590u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,8128u,8176u,16383u,2013331455u,2080505854u,235143166u,101187582u,524286u,1048574u,1048574u,1048574u,1048574u,524286u,524286u,262142u,131070u,32766u,16382u,8070u,1024u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,8160u,8184u,1879064574u,2013331455u,470024190u,67371006u,524286u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,524286u,524286u,262142u,65534u,16382u,8160u,1024u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,8128u,8184u,805322750u,402718719u,134479870u,524286u,524286u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,524286u,262142u,65534u,16382u,16368u,1792u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3968u,8184u,16382u,131071u,262142u,524286u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,524286u,262142u,65534u,16382u,16368u,1792u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,1792u,8184u,16380u,65535u,262143u,524286u,524286u,1048574u,1048574u,1048575u,1048574u,1048574u,1048574u,1048574u,524286u,262142u,65534u,16376u,16368u,1792u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,8176u,16376u,32767u,262143u,524286u,1048574u,1048574u,1048575u,1048575u,1048575u,1048575u,1048574u,1048574u,524286u,262142u,32766u,16376u,8176u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,4032u,8184u,32766u,262142u,524286u,524286u,1048575u,1048574u,1048574u,1048574u,1048574u,1048574u,1048574u,524286u,262142u,32766u,16376u,8176u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,384u,8184u,32766u,131070u,262142u,524286u,1048575u,1048574u,1048574u,1048574u,1048574u,1048574u,524286u,524286u,131070u,32766u,16368u,1920u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,4080u,32764u,65534u,262142u,524286u,524286u,524286u,1048574u,1048574u,524286u,524286u,524286u,262142u,131070u,32764u,8160u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,256u,16376u,32760u,131068u,262140u,262142u,524286u,524286u,524286u,524286u,524286u,262142u,131070u,65532u,16368u,3840u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3968u,32752u,65528u,131068u,262142u,262142u,262142u,262142u,262142u,262142u,262140u,131064u,32752u,7936u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,8064u,32736u,65528u,131070u,131070u,131070u,131070u,131070u,131070u,65532u,32752u,8160u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,3456u,16376u,32764u,65534u,65534u,65534u,32766u,32764u,16380u,4048u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,48u,2680u,8188u,8188u,8188u,8188u,4092u,120u,16u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,120u,248u,508u,508u,508u,248u,240u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,96u,240u,504u,504u,504u,240u,96u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,224u,224u,224u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u,0u);\n\n#define voxel(x,y,z) float( ( packedBunny[ (x) + (y)*32 ] >> (z) ) % 2u )\n\n#define T(i,j,k) texelFetch(iChannel0, U + ivec2(i,j) + z2xy(k), 0 ) .a\n\n#define z2xy(z) (   U.x+33*z <  0    ? ivec2( 33*7,-33)   \\\n                  : U.x+33*z >= 33*8 ? ivec2(-33*7, 33)   \\\n                  :                    ivec2( 33*z,  0) )\n    \nvoid mainImage( out vec4 O,vec2 V )\n{\n    ivec2 U = ivec2(V), M = U%33, T=U/33, D=ivec2(1,0);\n    O = iFrame == 0  &&  M.x*M.y != 0\n         ? vec4( voxel( M.x-1 , M.y-1 , T.x + T.y*8 ) ) // band guard at 1+33.k\n         : texelFetch(iChannel0,U,0);\n    \n    if (iFrame == 1) {                                  // normals\n        vec3 C = vec3(0), F = 1./vec3(4,2,4);  // separable filtering kernel\n        for (int j = -1; j <= 1; j++ )\n            for (int i = -1; i <= 1; i++ )\n                C +=  vec3( T( 1, i, j ) - T(-1, i, j ),\n                            T( i, 1, j ) - T( i,-1, j ),\n                            T( i, j, 1 ) - T( i, j,-1 ) \n                          ) * F[1+i] * F[1+j]; // weighting kernel\n             O.xyz = - normalize(C+1e-5);\n         }           \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}