{
    "Shader": {
        "info": {
            "date": "1589130406",
            "description": "base on work https://www.shadertoy.com/view/llfXW8 and https://www.shadertoy.com/view/XtS3DD",
            "flags": 32,
            "hasliked": 0,
            "id": "3dsfRs",
            "likes": 3,
            "name": "Tribute - Sky",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Iris_",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n// float tasd[1] = {0.1};\n\nfloat kernel[7] = float[7](0.017649,\t0.02324,\t0.027413,\t0.028964,\t0.027413,\t0.02324,\t0.017649);\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 c = texture(iChannel0, uv);\n\t\t\n    //declare stuff\n    const int mSize = 7;\n    const int kSize = (mSize-1)/2;\n    //float kernel[mSize];\n    vec3 final_colour = vec3(0.0);\n\n    //create the 1-D kernel\n    float sigma = 7.0;\n    float Z = 0.0;\n\n\n    //get the normalization factor (as the gaussian has been clamped)\n    for (int j = 0; j < mSize; ++j)\n    {\n        Z += kernel[j];\n    }\n\n    //read out the texels\n    for (int i=-kSize; i <= kSize; ++i)\n    {\n        for (int j=-kSize; j <= kSize; ++j)\n        {\n            final_colour += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy + 1. *vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n        }\n    }\n    \n    vec3 bgcolor1 = texture(iChannel1, uv).rgb;\n    vec3 bgcolor = mix(bgcolor1, c.rgb, c.g);\n    \n    float luma = (bgcolor.r + bgcolor.g + bgcolor.b) * 0.1;\n    bgcolor -= (luma) * vec3(.9, .5, .0) * clamp(uv.y - 0.5, 0.0, 1.0);\n    \n    bgcolor += vec3(.2, 0.2, 0.3) * abs(clamp(uv.y - 0.5, -1.0, .0));\n\n\n    fragColor = vec4(final_colour/(Z*Z) * 0.2 + bgcolor, 1.0);\n    \n    // fragColor += vec4(texture(iChannel1, uv));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Cloud Ten\n//by nimitz 2015 (twitter: @stormoid)\n//License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n// https://www.shadertoy.com/view/XtS3DD\n\n#define time iTime\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\nfloat noise(float t){return textureLod(iChannel0,vec2(t,.0)/iChannelResolution[0].xy,0.0).x;}\nfloat moy = 0.;\n\nfloat noise(in vec3 p)\n{\n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n\tfp = fp*fp*(3.0-2.0*fp);\n\tvec2 tap = (ip.xy+vec2(37.0,17.0)*ip.z) + fp.xy;\n\tvec2 rz = textureLod( iChannel0, (tap+0.5)/256.0, 0.0 ).yx;\n\treturn mix( rz.x, rz.y, fp.z );\n}\n\nfloat fbm(in vec3 x)\n{\n    float rz = 0.;\n    float a = .35;\n    for (int i = 0; i<2; i++)\n    {\n        rz += noise(x)*a;\n        a*=.35;\n        x*= 4.;\n    }\n    return rz;\n}\n\nfloat path(in float x){ return sin(x*0.01-3.1415)*28.+6.5; }\nfloat map(vec3 p){\n    return p.y*0.07 + (fbm(p*0.3)-0.1) + sin(p.x*0.24 + sin(p.z*.01)*7.)*0.22+0.15 + sin(p.z*0.08)*0.15;\n}\n\nfloat march(in vec3 ro, in vec3 rd)\n{\n    float precis = 0.3;\n    float h= 1.;\n    float d = 0.;\n    for( int i=0; i<17; i++ )\n    {\n        if( abs(h)<precis || d>70. ) break;\n        d += h;\n        vec3 pos = ro+rd*d;\n        pos.y += .5;\n\t    float res = map(pos)*7.;\n        h = res;\n    }\n\treturn d;\n}\n\nvec3 lgt = vec3(0);\nfloat mapV( vec3 p ){ return clamp(-map(p), 0., 1.);}\nvec4 marchV(in vec3 ro, in vec3 rd, in float t, in vec3 bgc)\n{\n\tvec4 rz = vec4( 0.0 );\n\t\n\tfor( int i=0; i<150; i++ )\n\t{\n\t\tif(rz.a > 0.99 || t > 200.) break;\n\t\t\n\t\tvec3 pos = ro + t*rd;\n        float den = mapV(pos);\n        \n        vec4 col = vec4(mix( vec3(.85,.85,.90), vec3(.0), den ),den);\n        col.xyz *= mix(bgc*bgc*2.5,  mix(vec3(0.1,0.2,0.35),vec3(.1,.85,.9),moy*0.4), clamp( -(den*40.+0.)*pos.y*.03-moy*0.5, 0., 1. ) );\n        col.rgb += clamp((1.-den*6.) + pos.y*0.13 +.55, 0., 1.)*0.35*mix(bgc,vec3(1),0.7); //Fringes\n        col += clamp(den*pos.y*.15, -.02, .0); //Depth occlusion\n        col *= smoothstep(0.2+moy*0.05,.0,mapV(pos+1.*lgt))*.85+0.15; //Shadows\n        \n\t\tcol.a *= .95;\n\t\tcol.rgb *= col.a;\n\t\trz = rz + col*(1.0 - rz.a);\n\n        t += max(.3,(2.-den*30.)*t*0.011);\n\t}\n\n\treturn clamp(rz, 0., 1.);\n}\n\nfloat pent(in vec2 p){    \n    vec2 q = abs(p);\n    return max(max(q.x*1.176-p.y*0.385, q.x*0.727+p.y), -p.y*1.237)*1.;\n}\n\nvec3 lensFlare(vec2 p, vec2 pos)\n{\n\tvec2 q = p-pos;\n    float dq = dot(q, q);\n    vec2 dist = p*(length(p))*0.75;\n\tfloat ang = atan(q.x,q.y);\n    vec2 pp = mix(p, dist, 0.5);\n    float sz = 0.01;\n    float rz = 0.;\n\n\trz += clamp(sz-pow(pent(pp + 0.15*pos),1.55),.0, 1.)*5.0;\n\trz += clamp(sz-pow(pent(pp + 0.1*pos),2.4),.0, 1.)*4.0;\n\trz += clamp(sz-pow(pent(pp - 0.05*pos),1.2),.0, 1.)*4.0;\n    rz += clamp(sz-pow(pent((pp + .5*pos)),1.7),.0, 1.)*4.0;\n    rz += clamp(sz-pow(pent((pp + .3*pos)),1.9),.0, 1.)*3.0;\n    rz += clamp(sz-pow(pent((pp - .2*pos)),1.3),.0, 1.)*4.0;\n    return vec3(clamp(rz,0.,1.));\n}\n\nmat3 rot_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rot_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rot_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = q - 0.5;\n\tfloat asp =iResolution.x/iResolution.y;\n    p.x *= asp;\n\tvec2 mo = iMouse.xy / iResolution.xy;\n    mo = vec2(0., 0.);\n\tmoy = mo.y;\n    float st = 0.; //sin(time*0.3-1.3)*0.2;\n    vec3 ro = vec3(0.,0.,time*10.);\n    ro.x = path(ro.z);\n    vec3 ta = ro + vec3(0,0,1);\n    vec3 fw = vec3(0,0,1); //normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), fw ));\n    vec3 vv = normalize(cross(fw,uu));\n    const float zoom = 1.;\n    vec3 rd = normalize( p.x*uu + p.y*vv + -zoom*fw );\n    \n    float rox = 2.9; //sin(time*0.2)*0.6+2.9;\n    rox += smoothstep(0.6,1.2,sin(time*0.25))*3.5;\n   \tfloat roy = 0.; //sin(time*0.5)*0.2;\n    mat3 rotation = rot_x(-roy)*rot_y(3.14 + st*1.5)*rot_z(st);\n\tmat3 inv_rotation = rot_z(-st)*rot_y(-3.14-st*1.5)*rot_x(roy);\n    rd *= rotation;\n    rd.y -= dot(p,p)*0.06;\n    rd = normalize(rd);\n    \n    vec3 col = vec3(0.);\n    lgt = normalize(vec3(-0.3,mo.y+0.1,1.));  \n    float rdl = clamp(dot(rd, lgt),0.,1.);\n\n    col = texture(iChannel1,q - 0.001 * vec2(ro.x, 0.)).xyz;\n    vec3 bgc = col;\n    \n    float rz = march(ro,rd);\n    \n    if (rz < 70.)\n    {   \n        vec4 res = marchV(ro, rd, rz-5., vec3(0.6));\n        // if(res.w > 0.5) col = res.xyz;\n        \n    \tcol = mix(res.xyz, col, 1. - res.w);\n    }\n    \n    vec3 proj = (-lgt*inv_rotation);\n    col += 5.*vec3(0.7,0.7,0.4)*clamp(lensFlare(p,-proj.xy/proj.z*zoom + vec2( 0.35, 0.15))*proj.z,0., 1.);\n    \n    float g = smoothstep(0.03,.97,mo.x);\n    col = mix(mix(col,col.brg*vec3(1,0.75,1),clamp(g*2.,0.0,1.0)), col.bgr, clamp((g-0.5)*2.,0.0,1.));\n    \n\tcol = clamp(col, 0., 1.);\n    col = col*0.5 + 0.5*col*col*(3.0-2.0*col); //saturation\n    col = pow(col, vec3(0.416667))*1.055 - 0.055; //sRGB\n\tcol *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.12 ); //Vign\n\n\tfragColor = vec4( col, 1.0 );\n    fragColor += vec4(.54, 0.54, 0.54, 0.0) * abs(clamp(rd.y, -1.0, .0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// what the hell did iq use in graphtoy?\nfloat noise( float x )\n{\n    return sin(x * 6.0) * 0.1 + sin(x * 3.0) * 0.1 + sin(x * 1.5) * 0.1;\n}\n\n\nfloat random1(vec2 p) {\n  return fract(sin(dot(p, vec2(456.789, 20487145.123))) * 842478.5453);\n}\n\nfloat random1( vec3 p ) {\n  return fract(sin(dot(p, vec3(127.1, 311.7, 191.999))) * 43758.5453);\n}\n\nvec2 random2(vec2 p) {\n  return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453);\n}\n\nfloat mySmootherStep(float a, float b, float t) {\n  t = t*t*t*(t*(t*6.0 - 15.0) + 10.0);\n  return mix(a, b, t);\n}\n\nfloat interpNoise3D1(vec3 p) {\n  vec3 pFract = fract(p);\n  float llb = random1(floor(p));\n  float lrb = random1(floor(p) + vec3(1.0,0.0,0.0));\n  float ulb = random1(floor(p) + vec3(0.0,1.0,0.0));\n  float urb = random1(floor(p) + vec3(1.0,1.0,0.0));\n\n  float llf = random1(floor(p) + vec3(0.0,0.0,1.0));\n  float lrf = random1(floor(p) + vec3(1.0,0.0,1.0));\n  float ulf = random1(floor(p) + vec3(0.0,1.0,1.0));\n  float urf = random1(floor(p) + vec3(1.0,1.0,1.0));\n\n  float lerpXLB = mySmootherStep(llb, lrb, pFract.x);\n  float lerpXHB = mySmootherStep(ulb, urb, pFract.x);\n  float lerpXLF = mySmootherStep(llf, lrf, pFract.x);\n  float lerpXHF = mySmootherStep(ulf, urf, pFract.x);\n\n  float lerpYB = mySmootherStep(lerpXLB, lerpXHB, pFract.y);\n  float lerpYF = mySmootherStep(lerpXLF, lerpXHF, pFract.y);\n\n  return mySmootherStep(lerpYB, lerpYF, pFract.z);\n}\n\nfloat Worley(vec2 P)\n{\n    float Dist = 1.;\n    vec2 I = floor(P);\n    vec2 F = fract(P);\n    \n    for(int X = -1; X<=1; X++)\n    for(int Y = -1; Y<=1; Y++)\n    {\n        float D = distance(random2(I+vec2(X,Y))+vec2(X,Y),F);\n        Dist = min(Dist,D);\n    }\n    return Dist;\n\t\n}\n\nfloat fbm(vec3 p, float octaves) {\n  float amp = 0.5;\n  float freq = 8.0;\n  float sum = 0.0;\n  float maxSum = 0.0;\n  for(float i = 0.0; i < 10.0; ++i) {\n    if(i == octaves)\n    break;\n    maxSum += amp;\n    sum += interpNoise3D1(p * freq) * amp;\n    amp *= 0.5;\n    freq *= 2.0;\n  }\n  return sum / maxSum;\n}\n\n\nfloat basicline1(float x)\n{\n    return clamp(2.0*(1. - abs(x)), 0., 1.);\n}\n\nfloat basicline2(float x)\n{\n    return pow(pow(noise(x * 4.0) + noise(x * 0.3) * 4.0, 2.0), 1.5) * basicline1(x * 0.6) * 0.8;\n}\n\nfloat basicline3(float x)\n{\n    return pow(1.0 - abs(x), 2.0) * basicline1(x * 1.2);\n}\n\nfloat basicline4(float x)\n{\n    // mountain\n    float t = 4.0*sin(x * 0.9)/x+0.03*sin(x*10.0)+0.02*sin(x*20.0); \n    x *= 0.7;\n    // noise\n    t += basicline2(x*3.0)*1.8 + basicline2(x* 0.2);\n    t += basicline3(x * 3.0) * 2.4 + basicline3(x * 5. - 2.) * 0.6;\n    return t;\n}\n\nfloat basicline5(float x)\n{\n    return abs(x) * 0.3 + 4. + noise(x * 0.2) * 0.5;\n}\n\nfloat drawcloud(vec2 uv)\n{\n    float t = basicline5(uv.x);\n    //if(t > uv.y) return 1.;\n    float m = uv.y - t;\n    m = clamp(m*0.25, 0., 1.) + 0.1;\n    m = m * m * (3. - 2.*m);\n    return mix(fbm(vec3(uv * 0.02, iTime * 0.1), 8.), 1., m);\n}\n    \nvec3 drawCastle(vec2 uv)\n{\n    if(uv.y + 2.1 < basicline4(uv.x * 0.8)) return vec3(169., 197., 211.0) / 255. * 0.9;\n    return mix(vec3(1.) * 0.95, vec3(169., 197., 211.0) / 255. * 0.95 , drawcloud(uv) * 0.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n\tvec2 frag = fragCoord.xy;\n\tvec2 uv = frag/res.xy;\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    p = (p) * 9.0;\n    \n\n\n    fragColor = vec4(drawCastle(p), 1.);\n    \n    float luma = (fragColor.r + fragColor.g + fragColor.b) * 0.1;\n    fragColor -= (luma) * vec4(.9, .5, .0, 1.) * clamp(p.y * 0.1 - 0.05, 0.0, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// https://www.shadertoy.com/view/llfXW8\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\nmat3 rotz(float a) { mat3 rot; rot[0] = vec3(cos(a), -sin(a), 0.0); rot[1] = vec3(sin(a), cos(a), 0.0); rot[2] = vec3(0.0, 0.0, 1.0); return rot; }\n\nconst float mouseRotateSpeed = 5.0;\n\nstruct sdObject\n{\n    vec3 pos;\n    float rad;\n    int index;\n};\n\n// Amount of butterflies    \n#define OBJECTS 40\n    \nsdObject sdObjects[OBJECTS];    \n\n// objects that will be potentially hit, found at prestep\n#define CACHED 5\nsdObject cachedObjects[CACHED];\n\nint maxCacheIndex = 0;\n    \n// distance functions from https://iquilezles.org/articles/distfunctions\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n//// \n\nconst float MATERIAL_BODY = 0.0;\nconst float MATERIAL_WING = 1.0;\n\n\nconst float OBJECT_SIZE = 0.5;    \nvec2 getModel(in vec3 pos, int index)\n{\n    float phase = float(index);\n    float l = length(pos);\n\t\n    float bl = (sin(pos.z * 12.0 - 5.0) * 0.5 + 0.5) + 0.3;\n        \n\n    float wx = max(abs(l * 6. + .2) - .4, 0.0);\n    float sl = 1.5* abs(sin(wx)) + 0.05;\n    \n    vec3 wing = vec3(OBJECT_SIZE * 0.5, OBJECT_SIZE * 0.01, OBJECT_SIZE * 0.25 * sl);\n    \n    float w1 = udBox(rotz(sin(iTime * 10.0 + phase)) * pos - vec3(OBJECT_SIZE * 0.5, OBJECT_SIZE * 0., 0.0), wing);\n    float w2 = udBox(rotz(-sin(iTime * 10.0 + phase)) * pos + vec3(OBJECT_SIZE * 0.5, OBJECT_SIZE * 0., 0.0), wing);\n    \n    float w3 = sdSphere(pos - vec3(OBJECT_SIZE * 0.5, OBJECT_SIZE * 0., 0.0), 0.07);\n    \n    float id = MATERIAL_BODY;\n\n    id = MATERIAL_WING;\n    \n    \n    float m = min(w1, w2);\n    if(index % 3 != 0)\n        m = w3;\n    \n    return vec2(m, id);\n            \n}\n\n// return vec2(distance, id)\n\nvec2 map(in vec3 rp, in sdObject[CACHED] objects, inout vec3 localPos, inout int index)\n{\n    float m = 9999.0;\n    vec2 ret = vec2(m, 0.0);\n    \n    for (int i = 0; i < CACHED; ++i)\n    {\n        if ( i <= maxCacheIndex)\n        {\n            vec3 lp = rp - objects[i].pos;\n            vec2 mat = getModel(lp, objects[i].index);     \n            float a = min(mat.x, m);\n            if (a < m)\n            {\n                m = a;\n                ret = mat;\n                localPos = lp;\n                index = objects[i].index;\n            }\n        }\n    }    \n    return ret;\n}\n\n/**\n * In the pre-step function I find objects that will be potentially hit.\n * I will check only against these objects at later steps.\n */\nfloat prestep(in vec3 ro, in vec3 rp, in vec3 rd, in vec3 rd90degXAxis, in vec3 rd90degYAxis)\n{\n    maxCacheIndex = -1;\n    float m = 99999.0;\n    for (int i = 0; i < OBJECTS; ++i)\n    {\n        vec3 sp = -ro + sdObjects[i].pos;\n        \n        float distToPlaneY = abs(dot(rd90degYAxis, sp));\n    \tfloat distToPlaneX = abs(dot(rd90degXAxis, sp));\n        \n        float distanceToPlanes = max(distToPlaneY, distToPlaneX);\n        distanceToPlanes = distanceToPlanes - sdObjects[i].rad;\n\n        vec2 mat = getModel(rp - sdObjects[i].pos * (1.0 + distanceToPlanes), sdObjects[i].index);\n        float l = mat.x;\n        m = min(m, l);\n        \n        if(distanceToPlanes <= 0.0 && ++maxCacheIndex < CACHED)\n        {\n            if (maxCacheIndex == 0) cachedObjects[0] = sdObjects[i];\n            else if (maxCacheIndex == 1) cachedObjects[1] = sdObjects[i];\n            else if (maxCacheIndex == 2) cachedObjects[2] = sdObjects[i];\n            else if (maxCacheIndex == 3) cachedObjects[3] = sdObjects[i];\n            else if (maxCacheIndex == 4) cachedObjects[4] = sdObjects[i];\n            else return m;    \n            \n        }\n    }\n    \n    return m;\n}\n\n\n\nvoid trace(in vec3 rp, in vec3 rd, inout vec4 color)\n{\n    vec3 ro = rp;\n    float travel = 0.0;\n    const int STEPS = 50;\n    // build orthonormal frame to get right and up vectors to be used in distance calculations \n    vec3 tmp = normalize(cross(rd, vec3(0.0, 1.0, 0.0)));\n    vec3 up = normalize(cross(rd, tmp));\n    vec3 right = cross(rd, up);\n    \n    // pre-step and move ray\n    travel = prestep(ro, rp, rd, right, up);\n    rp += travel * rd;\n    \n    vec3 local = vec3(0.0);\n    int hitindex = 0;\n    \n    for (int i = 0; i < STEPS; ++i)\n    {\n       vec2 mat = map(rp, cachedObjects, local, hitindex);\n       float dist = mat.x;\n        \n       if(dist <= 0.0)\n       {\n           float id = mat.y;\n           float indx = float(hitindex);\n           float c1 = sin(indx * 10.) * 0.5;\n           float c2 = abs(cos(abs(local.z * 15.0)) + sin(abs(local.x) * 15.0));\n           float c3 = cos(indx * 0.4);\n           // color = vec4(mat.y, c2 * mat.y + 0.5, c1 * mat.y, 1.0) * abs(sin(indx * 0.1));\n           float t = mix(1.1, 1. - abs(rd.y - 0.5), 0.3) + 0.2 * c1;\n           color = vec4(1, 1, 0.8, 1) * t;\n           color.a = 1.0;\n               \n           return;\n       }\n       float dst = max(0.01, dist);\n       travel += dst;\n       rp += rd * dst;\n       if(travel > 30.0) return;\n    }\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = uv;\n    uv -= vec2(0.5);\n    uv.y /= iResolution.x / iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse -= vec2(0.5);\n    mouse = vec2(0);\n    \n    if(mouse.xy == vec2(-0.5))\n    {\n        mouse = vec2(0.0);\n    }\n    \n    mouse *= mouseRotateSpeed;\n    \n\n    for (int i = 1; i < OBJECTS; ++i)\n    {\n        float times = 0.45f;\n        if(i % 3 != 0) times = 0.3f;\n        vec3 p = (texture(iChannel0, sin(times * iTime * 0.001) + 0.21 * vec2(float(i))) - vec4(0.5)).rgb;\n        p *= roty(iTime * 2.0 * times);\n        p.z += (sin(iTime * times) * 0.25 + 0.5) * 1.0 + 0.6;\n        p.x *= 1.0 + (sin(iTime * 0.051 * times) * 0.5 + 0.5) * 0.25;\n        p.y *= 1.0 + (cos(iTime * 0.051 * times) * 0.5 + 0.5) * 0.25 + sin(times * iTime / 10.);\n      \n        sdObjects[i] = sdObject(p * 10.0, OBJECT_SIZE * 1. , i);\n    }\n    \n    vec3 rp = vec3(0.0, .0, 1.0);\n    vec3 rd = normalize(vec3(uv, 0.3));\n    \n    rd *= rotx(mouse.y);\n    rd *= roty(mouse.x);\n    \n    trace(rp, rd, fragColor);\n    fragColor = mix(fragColor, vec4(0,0,0,0), 1.0 - fragColor.a);\n    \n\n    \n    // float luma = (fragColor.r + fragColor.g + fragColor.b) * 0.1;\n    // fragColor -= (luma) * vec4(.9, .5, .0, 1.) * clamp(rd.y - 0.05, 0.0, 1.0);\n    \n    // fragColor += vec4(.4, 0.4, 0.0, 0.0) * abs(clamp(rd.y, -1.0, .0));\n\t\n    // frame\n    // fragColor = mix(fragColor, vec4(0.0), 1.0 - smoothstep(0.5, 0.45, abs(uv.x)));\n    // fragColor = mix(fragColor, vec4(0.0), 1.0 - smoothstep(0.28, 0.2, abs(uv.y)));\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\n * Part 2 Challenges\n * - Change the diffuse color of the sphere to be blue\n * - Change the specual color of the sphere to be green\n * - Make one of the lights pulse by having its intensity vary over time\n * - Add a third light to the scene\n */\n\n\nvec3 rotateX(in vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(p.x, c * p.y - s * p.z, s * p.y + c * p.z);\n}\n\nvec3 rotateY(vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(c * p.x + s * p.z, p.y, -s * p.x + c * p.z);\n}\n\nvec3 rotateZ(vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(c * p.x - s * p.y, s * p.x + c * p.y, p.z);\n}\n\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nfloat dot2( vec3 v ) { return dot(v,v); }\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 ac = a - c; vec3 pc = p - c;\n  vec3 nor = cross( ba, ac );\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\n/**\n * Signed distance function for a sphere centered at the origin with radius 1.0;\n */\nfloat sphereSDF( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCone( vec3 p, vec2 c, float h )\n{\n  float q = length(p.xz);\n  return max(dot(c.xy,vec2(q,p.y)),-h-p.y);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max(k - abs(a - b), 0.0f)/k;\n    return min(a, b) - h * h * k * (1.0 / 4.0);\n}\n\nfloat planeSDF(vec3 samplePoint)\n{\n    samplePoint = rotateZ(samplePoint, -1.57 + sin(iTime * 0.1 + 1.57));\n    samplePoint = rotateY(samplePoint, sin(iTime*1.25 + 1.57) * 0.1 - 1.57);\n    samplePoint *= 4.;\n    const float k = 0.03; // or some other amount\n    vec3 p = samplePoint;\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    vec2 xz = m * p.xz;\n    vec3  q = vec3(xz.x,p.y,xz.y);\n    samplePoint = q;\n\n    float t1 = udTriangle(samplePoint, vec3(0,0.05,0), vec3(2,0,0), vec3(0,1,-0.05));\n    float t2 = udTriangle(samplePoint, vec3(0,-0.05,0), vec3(2,0,0), vec3(0,-1,-0.05));\n    float t3 = udTriangle(samplePoint, vec3(0,-0.05,0), vec3(2,0,0), vec3(-0.2,0,-0.5));     \n    float t4 = udTriangle(samplePoint, vec3(0,0.05,0), vec3(2,0,0), vec3(-0.2,0,-0.5));\n\n    \n    return min(min(t1, t2), min(t3, t4)) / 4.; \n}\n\nfloat traceSDF(vec3 samplePoint)\n{\n    samplePoint = rotateX(samplePoint, 1.57 );\n    \n    float k = 0.05 * abs(samplePoint.y) * sin(iTime * 0.1 + samplePoint.y * 0.3 + 1.57);\n    float k2 = 0.02 * abs(samplePoint.y) * sin(iTime * 1.25 + samplePoint.y * 0.3 + 2.5);\n\n    samplePoint.x += k;\n    samplePoint.z += k2;\n    \n    float t1 = sdCone(samplePoint + vec3(0, 0.4, 0), vec2(1., 0.01), 20.);\n    float t2 = sdCone(samplePoint + vec3(0, 2, 0), vec2(1., 0.08), 20.);\n    return smin(t1, t2, 0.1);\n}\n\nfloat sceneSDF(vec3 samplePoint) {\n    float t1 = planeSDF(samplePoint);\n    float t2 = traceSDF(samplePoint);\n    \n    // return blend(t1, t5);\n    return min(t1, t2);\n}\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nfloat calculateTrace(vec3 p, vec3 dir)\n{\n    float t = 1.0;\n    float dis = 0.2;\n    for (int i = 0; i < 10; i++) {\n        p += dir * dis;\n        float dist = traceSDF(p);\n        dist = min(dist, 0.);\n        t += dist * 3.;\n    }\n    t = max(t, 0.01);\n    return 1. - t;\n}\n            \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\n\n\nvoid coordinateSystem(const vec3 v1, out vec3 v2, out vec3 v3) {\n    \n    if (abs(v1.x) > abs(v1.y)) {\n        v2 = vec3(-v1.z, 0, v1.x) / length(v1.xz);\n    }\n    else {\n        v2 = vec3(0, v1.z, -v1.y) / length(v1.yz);\n    }\n    v3 = cross(v1, v2);\n}\n\nvec2 random2(vec3 p) {\n    return fract(sin(vec2(p.x, p.x + 1.0)) * vec2(43758.5453123, 22578.1459123));\n}\n\n\nconst int AO_SAMPLES = 50; \nfloat computeAO(vec3 p, vec3 n, float dist) {\n    // return planeSDF(p + n * dist) * 100.;\n    float aoSum = 0.0;\n    // Sample a few points in the hemisphere around n at p\n    vec3 t, b;\n    // Make a tangent and bitangent vector\n    coordinateSystem(n, t, b);\n    for(int i = 0; i < AO_SAMPLES; ++i) {\n        // Generate a pair of random [0, 1] floats\n        vec2 xi = random2(p + float(i) * 203.1);\n        // Convert the xi pair to a vector in the hemisphere\n        float len = sqrt(xi.y);\n        float rx = len * cos(6.2831 * xi.x);\n        float ry = len * sin(6.2831 * xi.x);\n        float rz = sqrt(1.0 - xi.y); // z = sqrt(1 - x*x - y*y)\n        vec3 dir = vec3(rx * t + ry * b + rz * n);\n        aoSum += planeSDF(p + dir * dist);\n    }\n    return aoSum / float(AO_SAMPLES);\n}\n\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity, vec3 N) {\n\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    vec3 N = estimateNormal(p);\n    vec3 ambientLight = vec3(1.0, 1.0, 1.0);\n    ambientLight *= computeAO(p, N, 0.1) * 10. + 0.2;\n    \n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(0.0, 0.0, 10.0);\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4) * 10.;\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye, light1Pos, light1Intensity, N);\n\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n\tvec2 frag = fragCoord.xy;\n\tvec2 uv = frag/res.xy;\n\tvec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(sin(iTime / 10. + 1.57), 0.7, 7.0);\n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    \n    vec4 bgcolor = texture(iChannel0,uv);\n    // bgcolor = vec4(1, 0, 0, 1);\n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = bgcolor;\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * dir;\n    vec4 color;\n    if(traceSDF(p) < EPSILON)\n    {\n        float m = calculateTrace(p, dir);\n        color = vec4(1.0);\n        color.a = abs(uv.y) * 10. * m + 0.05;\n        // color.a = 1.0;\n    }\n    else\n    {\n        vec3 K_a = vec3(0.2, 0.2, 0.2) * 5.;\n        vec3 K_d = vec3(0.8, 0.8, 0.8);\n        vec3 K_s = vec3(1.0, 1.0, 1.0);\n        float shininess = 5.0;\n\n        color = vec4(phongIllumination(K_a, K_d, K_s, shininess, p, eye), 0.8);\n    }\n    \n    fragColor = mix(bgcolor, vec4(color.xyz, 1.0), color.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}