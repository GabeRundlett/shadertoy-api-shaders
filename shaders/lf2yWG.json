{
    "Shader": {
        "info": {
            "date": "1723332171",
            "description": "3d https://www.shadertoy.com/view/4fSczd was too slow so I wanted to try 2d.\nI gave the font more attitude (and serifs).\nEvery 10 seconds, it alternates between opaque and translucent circles.\nOther experiments still in the code.",
            "flags": 0,
            "hasliked": 0,
            "id": "lf2yWG",
            "likes": 7,
            "name": "Animated Digits 5x3 2d",
            "published": 3,
            "tags": [
                "digits"
            ],
            "usePreview": 0,
            "username": "dray",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "/*\n3d https://www.shadertoy.com/view/4fSczd was too slow so I wanted to try 2d.\nAt first, conversion to 2d can keep many things but drops Marching.\nMarching was basically adding support for the Z axis, but the GPU and X,Y pixels handle the searching for 2d.\nThen I tried other things including translucent and opaque circles (no longer spheres). Remnants of experiments are still in the code.\nI switched to an uncompressed font to play with variations.\nI included some improvements from FabriceNeyret2's golfing.\n*/\n\n#define PI 3.14159265\n#define TAU (2.*PI)\n\n// Provide a stream of constant values until when the number or location of usages is allowed to change\n\n// This seems to work erratically.\nfloat irnd = 0.;\n#define RND() ( irnd = fract(irnd*23454.2263+.5) )\n\n// alternate method to compute pseudo random \"constants\" not derived from usage sequence in code\nfloat digit_rnd = 0.; // \nfloat circle_rnd = 0.;\n#define NEWRND() fract( circle_rnd * 1231.25166 )\n\n\n\n// As a function of time, this should return slow random continuous ramps for motion\n#define HASH(X)  fract((X)*1111.1111)\nfloat LFN(float t) {\n    float f = floor(t); \n    return mix( HASH(f), HASH(f+1.), fract(t) );\n}\n\n#define F(a,b,c,d,e, f,g,h,i,j, k,l,m,n,o) (a*1+b*2+c*4+d*8+e*16+f*32+g*64+h*128+i*256+j*512+k*1024+l*2048+m*4096+n*8192+o*16384)\n\nconst int font[] = int[](\nF(1,1,1,1,0,\n  1,0,0,0,1,\n  0,1,1,1,1), // 0\nF(1,0,0,1,0,\n  1,1,1,1,1,\n  1,0,0,0,0), // 1\nF(1,1,0,0,1,\n  1,0,1,0,1,\n  1,0,1,1,1), // 2\nF(1,0,0,0,1,\n  1,0,1,0,1,\n  0,1,1,1,1), // 3\nF(0,0,1,1,1,\n  0,0,1,0,0,\n  1,1,1,1,1), // 4\nF(1,0,1,1,1,\n  1,0,1,0,1,\n  0,1,1,0,1), // 5\nF(1,1,1,1,1,\n  1,0,1,0,1,\n  1,1,1,0,0), // 6\nF(0,0,0,0,1,\n  1,1,1,0,1,\n  0,0,0,1,1), // 7\nF(1,1,1,1,1,\n  1,0,1,0,1,\n  1,1,1,1,1), // 8\nF(0,0,1,1,1,\n  0,0,1,0,1,\n  1,1,1,1,1)  // 9\n);\n\n#define spread .7\n#define diam .35\n\n//#define wander min(mod(iTime,6.)/5.,1.)\n//#define wander min(mod(iTime/3.,1.5),1.)\n//#define wander min(iTime,0.)\n//#define wander fract(iTime/4.)\n//#define TRI(T)  (1.-abs(fract(T)*2.-1.))   // 0 to 1\n//#define wunder clamp( (TRI(iTime/8.)-.5) * 20. , 0. , 1. )\n\nfloat color = 0.;\n\n#define step min(mod(iTime/3.,1.5),1.)\n\n//#define walkabout(end) mix( end, vec3( LFN(iTime+RND()*10.)*3.*spread, LFN(iTime+RND()*10.)*5.*spread, LFN(iTime+RND()*10.)*8.-4. ), .5-.5*cos(step*TAU) )\nvec2 walkabout(vec2 end) {\n    //return mix( end, vec2( LFN(iTime+RND()*20.)*3.*spread, LFN(iTime+RND()*20.)*5.*spread ), .5-.5*cos(step*TAU) );\n    return mix( end, vec2( LFN(iTime+NEWRND()*25.)*3.*spread,\n                           LFN(iTime+NEWRND()*21.)*5.*spread ), .5-.5*cos(step*TAU) );\n}\n\n#define mode int( mod( iTime, 20. ) / 10. )\n//#define mode 1\n\n//#define colorinc .15\n#define colorinc .7\n\n//#define blur ( 8.5 + 8.5 * sin(iTime*TAU) )\n#define blur 1.\n\n#define SQR(X) ((X)*(X))\n\nvec4 digit(vec2 pt,int dig) {\n    vec4 res = vec4(0); // color, count\n    circle_rnd = digit_rnd;\n    int patt = font[dig];\n    for ( int nn = 0; nn < 15; ++nn, patt >>= 1 ) \n        if ( (patt & 1) > 0 ) {\n            circle_rnd += 12.3;\n            float dist = distance( pt, walkabout( vec2( float(nn/5)*spread, float(nn%5)*spread ) ) );\n            vec3 colr = .4+.1*cos( vec3(0,21,23) + color );\n            color += colorinc;\n            if ( mode == 0 ) {\n                if ( dist < diam ) res = vec4( colr, 1 );\n            }\n            else {\n//                res += vec4( (colr) * ( 1 - ( .1 + 200. * max( 0., dist - diam*0. ) ) ), 1 );\n                res += vec4( \n                  colr * SQR( .001 * blur ) / SQR( max( .001 * blur, dist * ( dist - diam ) ) ),\n                  1 );\n            }\n        }\n    return res;\n}\n\n#define begcc (int((iTime-.5)/(3.*6.))*7)\n//#define begcc 0\n\nvec4 ColorAt(vec2 pt) { // return distance to closest object and object\n    irnd = 0.; // reset random sequence\n    color = 1.; // reset color sequence\n    //color = floor(iTime*100.)*colorinc;\n    int cc = begcc; // reset character\n    vec4 res = vec4(0); // color, count\n    for ( float y = -6.; y < 7.; y += 5. )\n        for ( float x = -11.; x < 10.; x += 4. ) {\n            digit_rnd += 1.3;\n            res += digit( pt - vec2(x,y), (cc+=7)%10 );\n       }\n    return res;\n}\n\n\n/*\nvec2 rot2d(vec2 inp,float ang) {\n    float s = sin(ang);\n    float c = cos(ang);\n    return vec2( inp.x * c + inp.y * s, inp.y * c - inp.x * s ); \n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy/2.) / min(iResolution.x,iResolution.y);\n\n    //uv = rot2d( uv, iTime/4.);\n\n    fragColor = sqrt( ColorAt(uv*16.) );\n    //fragColor /= (fragColor.w+.001);\n    \n    \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}