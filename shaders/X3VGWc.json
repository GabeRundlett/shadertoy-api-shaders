{
    "Shader": {
        "info": {
            "date": "1723600677",
            "description": "Originally for audio but switched to video input, now kind of a neat effect for webcam / video",
            "flags": 32,
            "hasliked": 0,
            "id": "X3VGWc",
            "likes": 24,
            "name": "Byt3-daily-011",
            "published": 3,
            "tags": [
                "video",
                "dots",
                "hex",
                "buffer"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n    Byt3-daily-011\n    Originally for audio but switched to video input. Using @Shane's hex grid system.\n    Simple depth/size from input video texture.\n     \n    08/13/2024  @byt3_m3chanic\n    \n*/\n\n#define R \t\t\tiResolution\n#define R iResolution\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    vec2 uv = (F.xy - R.xy*.5)/R.y;\n    vec3 C = texture(iChannel0,(F.xy/R.xy)).rgb;\n    O = vec4(pow(C, vec3(.4545)),1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n    Byt3-daily-011\n    Originally for audio but switched to video input. Using @Shane's hex grid system.\n    Simple depth/size from input video texture.\n     \n    08/13/2024  @byt3_m3chanic\n    \n*/\n\n#define PI  \t\t3.1415926\n#define PI2 \t\t6.2831952\n#define R \t\t\tiResolution\n#define T \t\t\tiTime\n\nfloat hash21(vec2 p) {return fract(sin(dot(p,vec2(4323.232,323.123))))*3434.32323;}\nvec3 sampleFreq(vec2 uv) {\n    vec3 fg = texture(iChannel1, uv-.5).rgb; \n    vec3 bg = vec3(0);\n    //@iq https://www.shadertoy.com/view/XsfGzn\n    float maxrb = max(fg.r,fg.b);\n    float k = clamp( (fg.g-maxrb)*5., 0., 1. );\n    return mix(fg, bg, k);\n}\n\nmat2 rot(float a){ return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\n// global\nfloat gth;\nvec3 vclr;\n\n// scaling and const\nconst float scale = 2.5/3.5;\nconst vec2 l = vec2(scale*1.732/2., scale);\nconst vec2 s = l*2.;\nconst vec2[4] ps4 = vec2[4](vec2(-l.x, l.y), l + vec2(0., l.y), -l, vec2(l.x, -l.y) + vec2(0., l.y));\n\nvec3 map(vec2 q3){\n\n    float d = 1e5;\n    vec2 p, ip;\n    vec2 id = vec2(0), cntr = vec2(0);\n    \n    //@Shane - Hexagon tiling loop\n    for(int i = 0; i<4; i++){\n        // center.\n        cntr = ps4[i]/2.;\n        // local coordinates.\n        p = q3 - cntr;\n        ip = floor(p/s) + .5;\n        p -= (ip)*s;\n        vec2 idi = (ip)*s + cntr;\n\n        float hx=distance(idi,vec2(.0));\n        vec3 crgb = sampleFreq( mod(vec2(idi.x*.4,idi.y*.8)*.026,2.) );\n        float th = crgb.r;\n        vclr = crgb;\n        float sp = length(p)-(.4*th);\n        if(sp<d &&th>.01){\n            gth=th;\n            d = sp;\n         \tid = idi;\n        }   \n    }\n    return vec3(d, id);\n}\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n\n    // uv ro + rd\n    vec2 uv = (2.* F.xy-R.xy)/max(R.x,R.y);\n    uv *= 42.;\n\n    float px = fwidth(uv.x);\n\n    vec2 xv =  ((F.xy/R.xy)*.99 )+.005;\n    vec3 C = mix(vec3(.02,0,.08),texture(iChannel0,xv).rgb,.95);\n  \n    vec3 hex = map(uv);\n    \n    vec3 h = .35+.45*sin(PI2*gth+vec3(2,1,0));\n    \n    C = mix(C,h,smoothstep(px,-px,abs(hex.x)-.025));\n    O = vec4(C,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}