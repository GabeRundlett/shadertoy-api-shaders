{
    "Shader": {
        "info": {
            "date": "1516551370",
            "description": "This shader is similar to the previous one and adds the Phong shading light. The sphere takes a material component with ambient, diffuse and specular coefficients. Furthermore, we place a light in the world space.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ljfzV",
            "likes": 0,
            "name": "3. Phong",
            "published": 3,
            "tags": [
                "phong"
            ],
            "usePreview": 0,
            "username": "ragotpaul",
            "viewed": 703
        },
        "renderpass": [
            {
                "code": "struct Pixel {\n    vec2 coordinate;\n    vec3 color;\n};\n\nstruct Material {\n    vec3 color;\n    float ka;\n    float kd;\n    float ks;\n    float shininess;\n};\n\nstruct Sphere {\n    float radius;\n    vec3 position;\n    Material material;\n};\n\nstruct LightColor {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n};\n\nstruct Light {\n    vec3 position;\n    LightColor color;\n};\n\nstruct Camera {\n    vec3 eye;\n    vec3 front;\n    vec3 up;\n    float fov;\n};\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nconst vec3 background = vec3(0.1, 0.2, 0.4);\nconst float infini = 1.0 / 0.0;\n\nPixel initPixel(in vec3 color, in vec2 fragCoord) {\n    Pixel pixel = Pixel(\n        2.0 * fragCoord.xy / iResolution.xy - 1.0,                          /* coordinate */\n        color                                                                   /* color */\n    );\n    float ratio = iResolution.x / iResolution.y;\n    if (ratio > 1.0) {\n        pixel.coordinate.x *= ratio;\n    } else {\n        pixel.coordinate.y /= ratio;\n    }\n    return pixel;\n}\n\nRay initRay(in Pixel pixel, in Camera camera) {\n    float focal = 1.0 / tan(radians(camera.fov) / 2.0);\n\n    vec3 forward = normalize(camera.front);\n    vec3 side = normalize(cross(forward, camera.up));\n    vec3 up = normalize(cross(forward, side));\n\n    vec3 direction = normalize(pixel.coordinate.x * side - pixel.coordinate.y * up + focal * forward);\n\n    return Ray(\n        camera.eye,                                                             /* origin */\n        direction                                                               /* direction */\n    );\n}\n\nfloat computeSphereIntersection(inout Ray ray, in Sphere sphere) {\n    float a = dot(ray.direction, ray.direction);\n    float b = 2.0 * dot(ray.direction, ray.origin - sphere.position);\n    float c = dot(ray.origin - sphere.position, ray.origin - sphere.position) - sphere.radius * sphere.radius;\n    float t = -1.0;\n    float delta = b * b - 4.0 * a * c;\n    if (delta >= 0.0) {\n        float sqrt_delta = sqrt(delta);\n        float t1 = (- b - sqrt_delta) / (2.0 * a);\n        float t2 = (- b + sqrt_delta) / (2.0 * a);\n        float direction = 1.0;\n        if (t1 > 0.0) {\n            t = t1;\n        } else if (t2 > 0.0) {\n            t = t2;\n            direction = -1.0;\n        } else {\n            return t;\n        }\n        ray.origin = ray.origin + t * ray.direction;\n        ray.direction = normalize(ray.origin - sphere.position) * direction;\n    }\n    return t;\n}\n\nvec3 computePhongShading(in Ray ray, in Ray intersection, in Material material, in Light light) {\n    vec3 L = normalize(light.position - intersection.origin);\n    vec3 R = 2.0 * dot(L, intersection.direction) * intersection.direction - L;\n    vec3 V = -ray.direction;\n\n    vec3 ambient = material.ka * light.color.ambient;\n    vec3 diffuse = material.kd * light.color.diffuse * material.color * max(dot(intersection.direction, L), 0.0);\n    vec3 specular = material.ks * light.color.specular * material.color * pow(max(dot(R, V), 0.0), material.shininess);\n\n    return ambient + diffuse + specular;\n}\n\nvoid drawSphere(inout Pixel pixel, inout Ray ray, in Sphere sphere, in Light light) {\n    Ray intersection = ray;\n    float ray_length = computeSphereIntersection(intersection, sphere);\n    if (ray_length > 0.0 && ray_length < infini) {\n        pixel.color = computePhongShading(ray, intersection, sphere.material, light);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    Pixel pixel = initPixel(background, fragCoord);\n\n    Camera camera = Camera(\n        vec3(0.0, 0.0,  5.0),                                                   /* eye */\n        vec3(0.0, 0.0, -1.0),                                                   /* front */\n        vec3(0.0, 1.0,  0.0),                                                   /* up */\n        45.0                                                                    /* fov */\n    );\n\n    Ray ray = initRay(pixel, camera);\n\n    Light light = Light(\n        vec3(10.0, 10.0, 10.0),                                                 /* position */\n        LightColor(                                                             /* color */\n            vec3(1.0, 1.0, 1.0),                                                /* ambient */\n            vec3(1.0, 1.0, 1.0),                                                /* diffuse */\n            vec3(1.0, 1.0, 1.0)                                                 /* specular */\n        )\n    );\n\n    Sphere sphere = Sphere(\n        0.5,                                                                    /* radius */\n        vec3(0.0, 0.0, 0.0),                                                    /* position */\n        Material(                                                               /* material */\n            vec3(0.2, 0.8, 0.2),                                                /* color */\n            0.1,                                                                /* ka */\n            0.5,                                                                /* kd */\n            0.8,                                                                /* ks */\n            32.0                                                                /* shininess */\n        )\n    );\n\n    drawSphere(pixel, ray, sphere, light);\n\n    fragColor = vec4(pixel.color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}