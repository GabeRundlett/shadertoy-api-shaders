{
    "Shader": {
        "info": {
            "date": "1679943075",
            "description": "A pathtracer. Bloom, HDR, importance sampling, completely configurable.",
            "flags": 48,
            "hasliked": 0,
            "id": "mstXWH",
            "likes": 1,
            "name": "Path tracer attempt 3",
            "published": 3,
            "tags": [
                "pathtracer"
            ],
            "usePreview": 0,
            "username": "pathtracerenthusiast",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "//To change camera settings or the scene, go to the 'Buffer A' tab.\n//To change the bloom threshold settings ,,go to the 'Buffer B' tab.\n\n//I used the Bing AI to improve this code.\nvec3 blur(sampler2D s, vec2 p, int w) {\n  vec2 invRes = 1. / vec2(textureSize(s, 0));\n  vec3 color = vec3(0.);\n  float n = 1./float(2*w*w);\n  const float invpi = 1./PI;\n  for (int x = -w; x <= w; x++) {\n    for (int y = -w; y <= w; y++) {\n      vec2 uv = p + vec2(x, y) * invRes;\n      float weight = n*invpi*exp(-float(x*x+y*y)*n);\n      //float weight = 1.;\n      color += texture(s, uv).xyz*weight;\n    }\n  }\n  float size = float(2*w+1);\n  color /= size*size;\n  return color;\n}\n\n#define size 3.*((R.x+R.y)*.00119048)\nvoid mainImage( out vec4 o,  vec2 i )\n{\n    o = texelFetch(iChannel0,ivec2(i),0);\n    o /= o.w;\n    \n    //Comment out to remove bloom.\n    o.xyz += .5*size*size*blur(iChannel1,i/R,int(size));\n    \n    //Comment out the above and uncomment the below to see what will be bloomed.\n    //o.xyz = texelFetch(iChannel1,ivec2(i),0).xyz;\n    \n    o /= o+1.;\n    o = pow(o,vec4(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define PI 3.1415926523\n#define sat(a) clamp(a,0.,1.)\n#define md(a,b) max(dot(a,b),0.)\n#define d2r(a) a*(PI/180.)\n\nfloat _seed;\nfloat rand(void) {\n    _seed += 1.;\n    return fract(81.29*sin(38.23*+_seed-12.13)-12.21);\n}\nvec2 rand2(void) {return vec2(rand(),rand());}\nfloat srand(float s) {\n    return fract(37.12*sin(91.04*s-76.82)-19.35);\n}\nvoid irand(vec2 c,float f){\n    _seed = srand(f)*f+srand(c.x)*c.y+srand(c.y)*c.x;\n}\n\nvec3 mrefract(vec3 I,vec3 N,float i0,float i1){\n    float a = i0/i1;\n    float idn = dot(I,N);\n    float k = 1.-a*a*idn*idn;\n    if(k<0.) return vec3(0.);\n    return a*I-(a*idn+sqrt(k))*N;\n}\n\nstruct Mat {\n    float r;\n    vec3 col;\n    vec3 ems;\n};\n\nstruct Sphere {\n    vec3 pos;\n    float rad;\n    Mat m;\n};\n\nstruct Plane {\n    vec4 p;\n    Mat m;\n};\n\nstruct Box{\n    vec3 pos,siz,rot;\n    Mat m;\n};\n\nstruct Quad {\n    vec3 v0,v1,v2,v3;\n    Mat m;\n};\n\n//d_spw => Spheres per world\n//d_bpw => Boxes per world\n//d_qpw => Quads per world\n//planeq => Planes per world\n#define d_spw 2\n#define d_bpw 1\n#define d_qpw 4\n#define planeq 1\nstruct World {\n    Sphere spheres[d_spw];\n    #if planeq==1\n    Plane plane;\n    #endif\n    Box boxes[d_bpw];\n    Quad quads[d_qpw];\n    \n};\n//TODO: Add more uses for WorldSize. Use it for lights as well? Should the number of planes be kept at 1?\nstruct Viewer {\n    vec3 uu;\n    vec3 vv;\n    vec3 ww;\n    vec3 ro;\n};\n\nstruct Hit {\n    int id;\n    int type;\n    vec3 nor;\n    float len;\n};\n\nstruct Light {\n    vec3 pos,col;\n    float str;\n};\n\n\nfloat sphereInt( in vec3 ro, vec3 rd, Sphere sphere) {\n    ro -= sphere.pos;\n    float b = dot( ro, rd );\n    float c = dot( ro, ro ) - sphere.rad*sphere.rad;\n    float h = b*b - c;\n    if( h<0. ) return -1.;\n    h = sqrt( h );\n    return -b-h;\n}\n\nfloat planeInt( in vec3 ro, in vec3 rd, in vec4 p )\n{\n    return -(dot(ro,p.xyz)-p.w)/dot(rd,p.xyz);\n}\n//The following function was generated by Bing AI\nfloat quadInt(vec3 ro, vec3 rd, Quad q) {\n    // Compute quad normal and plane constant\n    vec3 n = cross(q.v1-q.v0,q.v2-q.v0);\n    float d = dot(n, q.v0);\n    \n    // Check if ray is parallel to quad\n    float nd = dot(n, rd);\n    if (abs(nd) < 1e-6) return -1.;\n    \n    // Compute ray-plane intersection\n    float t = (d - dot(n, ro)) / nd;\n    if (t < 0.) return -1.;\n    vec3 p = ro + t * rd;\n    \n    // Check if intersection point is inside quad\n    vec3 e0 = q.v1 - q.v0;\n    vec3 e1 = q.v2 - q.v1;\n    vec3 e2 = q.v3 - q.v2;\n    vec3 e3 = q.v0 - q.v3;\n    vec3 c0 = p - q.v0;\n    vec3 c1 = p - q.v1;\n    vec3 c2 = p - q.v2;\n    vec3 c3 = p - q.v3;\n    if (dot(n, cross(e0, c0)) > 0. &&\n        dot(n, cross(e1, c1)) > 0. &&\n        dot(n, cross(e2, c2)) > 0. &&\n        dot(n, cross(e3, c3)) > 0.) {\n        return t;\n    }\n    \n    // Otherwise, no hit\n    return -1.;\n}\n\nfloat boxInt( in vec3 ro, in vec3 rd, vec3 b) \n{\n    vec3 m = 1./rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*b;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.) return -1.;\n    return tN;\n}\n\nconst float bias = 1.0001;\nvec3 boxNor(Box b,vec3 p){\n    vec3 q = p-b.pos;\n    vec3 d = b.siz;\n    return normalize(vec3(ivec3(q/d*bias)));\n}\n\nvec3 cosDir(vec3 nor)\n{\n    float u = rand();\n    float v = rand();\n    float a = 2.*PI*v; float b = 2.*u-1.;\n    vec3 dir = vec3(sqrt(1.-b*b)*vec2(cos(a),sin(a)),b);\n    return normalize(nor+dir);\n}\nvec3 uniformVec(void)\n{\n    float phi = rand()*2.*PI;\n    float x = rand()*2.-1.;\n    float z = rand();\n\treturn pow(z,1./3.)*vec3(sqrt(1.-x*x)*vec2(sin(phi),cos(phi)),x);\n}\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2( c,-s,\n                 s, c);\n}\nmat3 rot3(vec3 a){\n    vec3 c = cos(a);\n    vec3 s = sin(a);\n    \n    mat3 xm = mat3(1., 0., 0.,\n                   0., c.x, -s.x,\n                   0., s.x, c.x );\n    \n    mat3 ym = mat3(c.y, 0.,-s.y,\n                   0.,1.,0.,\n                   s.y,0.,c.y);\n    \n    mat3 zm = mat3(c.z,s.z,0.,\n                   -s.z,c.z,0.,\n                   0.,0.,1.);\n    \n    \n    return xm*ym*zm;\n}\n/*vec3 hemi(vec3 n){\n    vec3 o = uniformVec();\n    float sd = sign(dot(n,o));\n    sd = sd==0.?1.:sd;\n    return o*sd;\n}*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//NOTE: When making any changes in the code in this tab, and the mode is zero,\n//you must reset the time for the changes to take effect.\n#define shutAp .6\n#define fcsDist 1.3\n#define blurAmt .003\n#define numLvls 8\n#define spp 1.\n#define FOV 75.\n#define fovInDeg 1\nconst float mode = 0.;\n//mode=0.: Develop; the image develops over multiple frames.\n//mode=1.; Realtime; the image is signifigantly more noisy, but changes take effect\n//immediatly.\n//Any other value of mode: FPS; same as Develop, but resets the image every\n//->mode<- frames. FPS MODE NOT RECCOMENDED. Develop mode reccomended.\n\n//To add objects, look in the 'Common' tab.\nvoid getScene(float t, out World world, out Viewer cam) {\n    cam = Viewer(vec3(1.,0.,0.),vec3(0.,1.,0.),vec3(0.,0.,1.),vec3(1.5,2.,-5.));\n    \n    mat2 rx = rot(d2r(-3.));\n    cam.uu.zy *= rx;\n    cam.vv.zy *= rx;\n    cam.ww.zy *= rx;\n    \n    mat2 ry = rot(-d2r(-3.));\n    cam.uu.xz *= ry;\n    cam.vv.xz *= ry;\n    cam.ww.xz *= ry;\n    \n    mat2 rz = rot(-d2r(-2.));\n    cam.uu.yx *= rz;\n    cam.vv.yx *= rz;\n    cam.ww.yx *= rz;\n    \n    world.spheres[0] = Sphere(vec3(-1.5,-.5,3.),1.5,Mat(.2,vec3(1.),vec3(0.)));\n    world.spheres[1] = Sphere(vec3(1.5,-1.,2.),1.,Mat(.8,vec3(1.),vec3(0.)));\n    \n    world.boxes[0] = Box(vec3(0.,3.,.5),vec3(.75,.25,.75),d2r(vec3(0.)),Mat(.5,vec3(.25),vec3(5.)));\n    \n    world.quads[0] = Quad(vec3(-3.5,-2.,-2.),vec3(3.5,-2.,-2.),vec3(3.5,-2.,3.5),vec3(-3.5,-2.,3.5),Mat(.7,vec3(1.),vec3(0.)));\n    world.quads[1] = Quad(vec3(-3.5,5.,-2.),vec3(3.5,5.,-2.),vec3(3.5,5.,3.5),vec3(-3.5,5.,3.5),Mat(.3,vec3(1.),vec3(0.)));\n    world.quads[2] = Quad(vec3(-3.5,-2.,-2.),vec3(-3.5,5.,-2.),vec3(-3.5,5.,3.5),vec3(-3.5,-2.,3.5),Mat(.5,vec3(1.,0.,0.),vec3(0.)));\n    world.quads[3] = Quad(vec3(3.5,-2.,-2.), vec3(3.5,5.,-2.), vec3(3.5,5.,3.5), vec3(3.5,-2.,3.5), Mat(.5,vec3(0.,1.,0.),vec3(0.)));\n    \n    #if planeq==1\n    world.plane = Plane(vec4(normalize(vec3(0.,0.,-1.)),-3.5),Mat(.5+.5*sin(t),vec3(1.),vec3(0.,0.,.2)));\n    #endif\n}\n\nvec3 getSky(float t,vec3 rd) {\n    vec3 color = vec3(.25,.55,.85);\n    color = mix(color,vec3(.2),sat(.7-3.*rd.y));\n    color = mix(color,vec3(.05),sat(1.-5.*abs(rd.y)));\n    return color;\n    return vec3(0.);\n}\n\n\nHit intersect(vec3 ro, vec3 rd, World world) {\n    vec3 r = vec3(999999.,-1.,-1.);\n    \n    for(int i = 0; i<d_spw;i++) {\n        float d = sphereInt(ro,rd,world.spheres[i]);\n        if(d<r.x&&d>=.001) r = vec3(d,i,0.);\n    }\n    \n    #if planeq==1\n    {\n        float d = planeInt(ro,rd,world.plane.p);;\n        if(d<r.x&&d>=.001) r = vec3(d,0.,1.);\n    }\n    #endif\n    \n    for(int i = 0; i<d_bpw;i++) {\n        mat3 rot = rot3(-world.boxes[i].rot);\n        float d = boxInt((ro-world.boxes[i].pos)*rot,rd*rot,world.boxes[i].siz);\n        if(d<r.x&&d>=.001) r = vec3(d,i,2.);\n    }\n    \n    for(int i = 0; i<d_qpw;i++) {\n        float d = quadInt(ro,rd,world.quads[i]);\n        if(d<r.x&&d>=.001) r = vec3(d,i,3.);\n    }\n    \n    Hit h = Hit(int(r.y),int(r.z),vec3(0.),r.x);\n    \n    vec3 p = ro+rd*h.len;\n    \n    if(h.type==0) h.nor = normalize(p-world.spheres[h.id].pos);\n    #if planeq==1\n    else if(h.type==1) h.nor = world.plane.p.xyz;\n    #endif\n    else if(h.type==2) {Box b = world.boxes[h.id];h.nor = boxNor(b,b.pos+(p-b.pos)*rot3(-b.rot))*rot3(b.rot);}\n    else if(h.type==3) {Quad q = world.quads[h.id];h.nor = normalize(cross(q.v1-q.v0,q.v2-q.v0));}\n    \n    return h;\n}\n\nvec3 newRay(inout vec3 ro,inout vec3 rd,vec3 p,vec3 n,Mat m) {\n    vec3 oro = ro; vec3 ord = rd;\n    ro = p;\n    float r = 2.*m.r-m.r*m.r;\n    vec3 reflected = reflect(rd,n);\n    rd = normalize((1.-r)*reflected+r*cosDir(reflected));\n    return m.col;\n}\n\nvoid mainImage( out vec4 o, in vec2 i ){\n    irand(i,float(iFrame));\n    \n    float ftime;\n    if(mode==0.){\n        o = texelFetch(iChannel0,ivec2(i),0);\n        ftime = 0.;\n    } else if(mode==1.) {\n        o = vec4(0.);\n        ftime = iTime;\n    }else{\n        if(iTimeDelta*mode>1.) {\n        o = vec4(0.);\n        }else{\n        o = texelFetch(iChannel0,ivec2(i),0);\n        }\n        ftime = floor(iTime*mode)/mode;\n    }\n    if(texture(iChannel3, vec2(32.5/256.0,0.25)).x > 0.1) o = vec4(0.);\n    \n    #if fovInDeg==0\n    float dv = 1./tan(FOV/2.);\n    #else\n    float dv = 1./tan(PI*FOV/360.);\n    #endif\n    \n    vec3 ttcol = vec3(0.);\n    for(float _i = 0.; _i<spp;_i++) {\n        vec2 p1 = (-R+ 2.*(i + rand2())) / R.y;\n        \n        vec3 er = normalize(vec3(p1,dv));\n        float ctime = ftime - rand()*shutAp/24.;\n        \n        World world;\n        Viewer cam;\n        getScene(ctime,world,cam);\n        \n        \n        vec3 rd = er.x*cam.uu + er.y*cam.vv+er.z*cam.ww;\n        \n        vec3 go = blurAmt*vec3(-1.+2.*rand2(),0.);\n        vec3 gd = normalize( er*fcsDist-go );\n        cam.ro += go.x*cam.uu + go.y*cam.vv;\n        rd += gd.x*cam.uu + gd.y*cam.vv;\n        rd = normalize(rd);\n        \n        vec3 tcol = vec3(0.);\n        vec3 fcol = vec3(1.);\n        for(int _j = 0; _j<numLvls;_j++) {\n            Hit hit = intersect(cam.ro,rd,world);\n            if(hit.type==-1) {tcol+=getSky(ctime,rd)*fcol;break;}\n            \n            vec3 p = hit.len*rd+cam.ro;\n            Mat mat;\n            if(hit.type==0) {mat = world.spheres[hit.id].m;}\n            #if planeq==1\n            else if(hit.type==1) {mat = world.plane.m;}\n            #endif\n            else if(hit.type==2) {mat = world.boxes[hit.id].m;}\n            else if(hit.type==3) {mat = world.quads[hit.id].m;}\n            \n            tcol += mat.ems*fcol;\n            fcol *= newRay(cam.ro,rd,p,hit.nor,mat);\n            \n            #if 1\n            {\n                float r_p = max(fcol.x,max(fcol.y,fcol.z));\n                if(rand()>r_p) break;\n                fcol /= r_p;\n            }\n            #endif\n        }\n        \n        ttcol += tcol;\n    }\n    o += vec4(ttcol / spp,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 o, vec2 i )\n{\n    o = texture(iChannel0,i/R);\n    o /= o.w;\n    o.xyz = dot(o.xyz,vec3(1.))>2.5?o.xyz:vec3(0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}