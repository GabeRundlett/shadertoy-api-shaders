{
    "Shader": {
        "info": {
            "date": "1582329701",
            "description": "For an upcoming video tutorial on The Art of Code",
            "flags": 96,
            "hasliked": 0,
            "id": "WtKSRz",
            "likes": 46,
            "name": "Up in flames",
            "published": 3,
            "tags": [
                "fire",
                "heat",
                "gyroid",
                "artofcode",
                "embers"
            ],
            "usePreview": 0,
            "username": "BigWIngs",
            "viewed": 1988
        },
        "renderpass": [
            {
                "code": "// \"Up in flames\" by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n//\n// My tutorial on The Art of Code is called Playing with Gyroids \n// This is the result of playing with gyroids for a few hours ;)\n//\n// https://youtu.be/-adHIyjIYgk\n//\n// See common tab for tweakable values.\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord)/iResolution.xy;\n\tvec2 m = (iMouse.xy-iResolution.xy*.5)/iResolution.xy;\n\tfloat t = iTime;\n   \n    float depth = texture(iChannel0,uv).w;\n   \t\n    depth = smoothstep(.0, .1, depth-.92)*(sin(t*.3)*.5+.5);\n    //depth = 0.;\n    \n    vec3 col = dof(iChannel0,uv,depth*1.2, iResolution.xy);\n    col *= col*EXPOSURE;\n    uv -= .5;\n    col *= 1.-dot(uv, uv)*VIGNETTE;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Up in flames\" by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n//\n// My upcoming tutorial on The Art of Code is called Playing with Gyroids \n// This is the result of playing with gyroids for a few hours ;)\n//\n// See common tab for tweakable values.\n\n\n\nfloat Gyroid(vec3 p, float scale, float bias, float thickness) {\n    p *= scale;\n    float d = abs(dot(sin(p), cos(p.yzx))+bias)-thickness;\n\treturn d/scale;\n}\n\nvec4 GetGyroids(vec3 p) {    \n    float t = iTime*.1;\n       \n    p.xy *= Rot(p.z*.3);\n    p.z += t;\n    \n    float g1 = Gyroid(p, 5., .4, .1);\n    float g2 = Gyroid(p, 17., .3, .1);\n    float g3 = Gyroid(p, 39., .3, .1);\n    float g4 = Gyroid(p, -7., .3, .1);\n    \n    return vec4(g1, g2, g3, g4);              \n}\n\nfloat GetDist(vec3 p) {\n\tfloat d = p.y;\n    p.x+=.33;\n    \n    float t = iTime*.1;\n    float scale = 20.;\n       \n    p.xy *= Rot(p.z*.3);\n    p.z += t;\n    \n    float g1 = Gyroid(p, 5., 1.4, .1);\n    float g2 = Gyroid(p, 17., .3, .1);\n    float g3 = Gyroid(p, 39., .3, .1);\n    float g4 = Gyroid(p, 89., .3, .1);\n    float g5 = Gyroid(p, 189., .3, .1);\n    float g6 = Gyroid(p, 289., .0, .1);\n    \n    d = g1*.7;\n    d -= g2*.3;\n    d += g3*.2;\n    d += g4*.1;\n    d += g5*g4*20.;\n    d += g6*.1;\n    \n   \tvec3 P = p;\n    P.xz = fract(P.xz)-.5;\n    vec2 id = floor(p.xz);\n    float n = Hash21(id);\n    //P = fract(P)-.5;\n    \n    \n    return d;              \n}\n\nfloat sdSpark(vec3 p) {\n    float t = iTime*.5;\n    \n    p.xz *= Rot(t*.1);\n    \n    vec3 id = floor(p);\n    p.xz = fract(p.xz)-.5;\n    \n    float n = Hash21(id.xz);\n    \n\tfloat z = fract(t+n)-.5;\n   \tz *= 10.;\n    \n    n *= 6.2832;\n    float size = .3+.2*sin(t*.1);\n    vec3 p1 = vec3(0, z-size*1., 0);\n    vec3 p2 = vec3(0, z+size*1., 0);\n    \n    p.x += sin(p.y*3.)*.1;\n    \n    float d = sdCapsule(p, p1, p2, size*.1);\n    \n    d = min(d, length(p.xz)+size*2.);\n    \n    return d;\n}\n\nvec2 SparkMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    float dM=MAX_DIST;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = sdSpark(p);\n        if(dS<dM) dM = dS;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return vec2(dO, dM);\n}\n\nvec3 GetSparkNormal(vec3 p) {\n\tfloat d = sdSpark(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        sdSpark(p-e.xyy),\n        sdSpark(p-e.yxy),\n        sdSpark(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    float dM=MAX_DIST;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if(dS<dM) dM = dS;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return vec2(dO, dM);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z, vec3 up) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(up, f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 GetPos(float t) {\n    float y = .6+cos(t)*.2;\n\treturn mix(vec3(-.3, y, t), vec3(2.2, y, t), (sin(t)*.5+.5)*1.);\n}\n\nvec3 Bg(vec3 rd) {\n    float b = -rd.y*.5+.5;\n\tvec3 col = vec3(.9, .6, .5)*b*4.;\n    \n    float a = atan(rd.x, rd.z);\n    \n    //col += sin(a*10.+iTime)*(1.-rd.y);\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = (iMouse.xy-iResolution.xy*.5)/iResolution.xy;\n\tfloat t = iTime;\n   \n    vec2 heat=sin(vec2(.123, .234)*t*30.+uv*40.+vec2(0,t*10.));\n    //heat *= uv.y+.5;\n    float c = (sin(t*.1)*.5+.5);\n   \n    #ifndef ABSTRACT\n    c = .1;\n    #endif\n    \n   //c=.9;\n    uv += heat*.02*(c*c*c*c+.1);\n    \n    \n    vec3 ro = vec3(0, 0, .01);\n    ro.yz *= Rot(m.y*3.14*.25+.25);\n    ro.xz *= Rot(-m.x*6.2831+t*.1);\n   \n   // ro = GetPos(t*0.);\n    vec3 up = vec3(0,1,0);\n    //up.xy *= Rot(sin(t)*.4);\n    vec3 lookat = vec3(0,0,0);\n    \n    float zoom = mix(.7, 1.7, sin(t*.15)*.5+.5);\n    vec3 rd = R(uv, ro, lookat, zoom, up);\n\n    float d = RayMarch(ro, rd).x;\n    \n    vec3 bg = Bg(rd);\n    vec3 col = vec3(0.);\n\t\n    if(d<MAX_DIST) {\n        \n        vec3 p = ro + d*rd;\n        vec3 n = GetNormal(p);\n       \n        float dif = n.y*.5+.5;\n        \n        vec4 g = GetGyroids(p);\n        \n        col += dif;\n        col *= min(1., g.y*20.);\n        //col *= .1;\n        \n        float lava = S(.01-min(0., p.y*.1), -.01, g.y);\n        lava *= sin(g.z*100.+t)*.5+.5;\n       // lava += S(-.7, -1., n.y);\n        \n        \n        float flicker = Gyroid(p-vec3(0,t,0), 5., 0., .1);\n        flicker *= Gyroid(p-vec3(.2,.5,0)*t, 5., 0., .1);\n        \n        col *= sin(t*.2)*.5+.5; \n        col += flicker*10.*vec3(1., .4, .1);//*S(.01,.0, g.y);\n        \n        col += lava*vec3(1., .5, .1);\n        \n    }\n    col = mix(col, bg, S(0., 7., d));\n    \n    \n    float dSpark = SparkMarch(ro, rd).x;\n    \n    \n    if(dSpark<MAX_DIST && dSpark<d) {\n        //col += 1.;\n        \n        vec3 p = ro+rd*dSpark;\n        vec3 n = GetSparkNormal(p);\n        n = normalize(n*vec3(1,0,1));\n        \n        float f = max(0., dot(rd, -n));\n        float fade = 1.-pow(f, 5.);\n        fade = .05/fade;\n        fade *= S(.0, 1., f);\n        col += fade;\n        //col += 1.;\n    }\n    \n    \n    \n    fragColor = vec4(col,d);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 21234,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/lucaslinsds/natural-sounds-wood-burning"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 21236,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/cubicolor/8-once-around?in=cubicolor/sets/hardly-a-day-hardly-a-night"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Up in flames\" by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n//\n// My upcoming tutorial on The Art of Code is called Playing with Gyroids \n// This is the result of playing with gyroids for a few hours ;)\n//\n// See common tab for tweakable values.\n\n\n// Not necessary unless you define ABSTRACT in common tab\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 old = texture(iChannel0, uv);\n    vec4 new = texture(iChannel1, uv);\n    \n    float fade = 1.;\n    \n    #ifdef ABSTRACT\n    fade = (sin(iTime*.07)*.48+.52);\n    #endif\n    \n    fragColor = mix(old, min(new,1.), fade);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Up in flames\" by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n//\n// My upcoming tutorial on The Art of Code is called Playing with Gyroids \n// This is the result of playing with gyroids for a few hours ;)\n//\n// See common tab for tweakable values.\n\n// uncomment this for some extra periodic 2d fuckery ;)\n//#define ABSTRACT\n\n#define VIGNETTE 1.\n#define EXPOSURE 1.3\n#define DOF_SAMPLES 40\n\n#define MAX_STEPS 100\n#define MAX_DIST 7.\n#define SURF_DIST .001\n\n#define S(a, b, t) smoothstep(a, b, t)\n\n\nmat2 Rot(float a) {\n    float s=sin(a),c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\n// Dave Hoskins hash without sine\nfloat Hash21(vec2 p) {\n\tp = fract(p*vec2(123.23,234.34));\n    p += dot(p, p+87.);\n    return fract(p.x*p.y);\n}\n\nfloat Hash31(vec3 p) {\n\tp = fract(p*vec3(123.23,234.34,345.54));\n    p += dot(p, p+87.);\n    return fract(p.x*p.y*p.z);\n}\n\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r ) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\n// DOF function borrowed from XT95\nconst float GA =2.399; \nmat2 rot = mat2(cos(GA),sin(GA),-sin(GA),cos(GA));\nvec3 dof(sampler2D tex,vec2 uv,float rad, vec2 iResolution)\n{\n\tvec3 acc=vec3(0);\n    vec2 pixel=vec2(.003*iResolution.y/iResolution.x,.003),angle=vec2(0,rad);;\n    rad=1.;\n\tfor (int j=0;j<DOF_SAMPLES;j++)\n    {  \n        rad += 1./rad;\n\t    angle*=rot;\n        vec4 col=texture(tex,uv+pixel*(rad-1.)*angle);\n\t\tacc+=col.xyz;\n\t}\n\treturn acc/float(DOF_SAMPLES);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}