{
    "Shader": {
        "info": {
            "date": "1658855134",
            "description": "A simple path tracer written for educational purposes.\nExercise 2: Implementing a ray-triangle intersection test.\nSolved.\nhttps://www.intel.com/content/www/us/en/developer/videos/path-tracing-workshop-part-1.html",
            "flags": 0,
            "hasliked": 0,
            "id": "ssyBDK",
            "likes": 0,
            "name": "PT workshop 2S: Ray-triangle tes",
            "published": 3,
            "tags": [
                "educational",
                "pathtracing",
                "exercises"
            ],
            "usePreview": 0,
            "username": "christoph_peters",
            "viewed": 132
        },
        "renderpass": [
            {
                "code": "// Computes the direction vector of a primary ray\n// \\param x, y Coordinates between 0 and 1 for the pixel that the ray\n//      passes through (x, y)\n// \\param camera_position Position vector for the camera (o)\n// \\param left_bottom Position vector for the left bottom corner of\n//      the image plane (c)\n// \\param right, up Direction vectors towards the right and top end\n//      of the image plane (r, u)\n// \\return A direction vector of length 1 for a ray through the\n//      specified pixel (d)\nvec3 get_primary_ray_direction(float x, float y, vec3 camera_position, vec3 left_bottom, vec3 right, vec3 up) {\n    vec3 image_plane_pos = left_bottom + x * right + y * up;\n    return normalize(image_plane_pos - camera_position);\n}\n\n\n// A triangle along with some shading parameters\nstruct triangle_t {\n    // The positions of the three vertices (v_0, v_1, v_2)\n    vec3 positions[3];\n    // A vector of length 1, orthogonal to the triangle (n)\n    vec3 normal;\n    // The albedo of the triangle (i.e. the fraction of\n    // red/green/blue light that gets reflected) (a)\n    vec3 color;\n    // The radiance emitted by the triangle (for light sources) (L_e)\n    vec3 emission;\n};\n\n\n// Checks whether a ray intersects a triangle\n// \\param out_t The ray parameter at the intersection (if any) (t)\n// \\param origin The position at which the ray starts (o)\n// \\param direction The direction vector of the ray (d)\n// \\param tri The triangle for which to check an intersection\n// \\return true if there is an intersection, false otherwise\nbool ray_triangle_intersection(out float out_t, vec3 origin, vec3 direction, triangle_t tri) {\n    vec3 v0 = tri.positions[0];\n    mat3 matrix = mat3(-direction, tri.positions[1] - v0, tri.positions[2] - v0);\n    vec3 solution = inverse(matrix) * (origin - v0);\n    out_t = solution.x;\n    vec2 barys = solution.yz;\n    return out_t >= 0.0 && barys.x >= 0.0 && barys.y >= 0.0 && barys.x + barys.y <= 1.0;\n}\n\n\nvoid mainImage(out vec4 out_color, in vec2 pixel_coord) {\n    // Define the camera position and the view plane\n    vec3 camera_position = vec3(0.278, 0.8, 0.2744);\n    vec3 middle = camera_position - vec3(0.0, 0.8, 0.0);\n    vec3 up = vec3(0.0, 0.0, 0.56);\n    float aspect = float(iResolution.x) / float(iResolution.y);\n    vec3 right = aspect * vec3(-0.56, 0.0, 0.0);\n    vec3 left_bottom = middle - 0.5 * right - 0.5 * up;\n    // Compute the camera ray\n    vec2 tex_coord = pixel_coord / iResolution.xy;\n    vec3 ray_direction = get_primary_ray_direction(\n        tex_coord.x, tex_coord.y, camera_position, left_bottom, right, up);\n    // Trace a ray against a single triangle and display t\n    triangle_t tri;\n    tri.positions[0] = vec3(0.555999935, -0.000000119, 0.548799932);\n    tri.positions[1] = vec3(0.555999935, -0.000000119, 0.000000040);\n    tri.positions[2] = vec3(0.555999935, -0.559199989, 0.000000040);\n    tri.normal = vec3(-1.0, 0.0, -0.0);\n    tri.color = vec3(0.730000019, 0.246000007, 0.250999987);\n    tri.emission = vec3(0.0, 0.0, 0.0);\n    float t;\n    out_color.rgb = vec3(0.0);\n    if (ray_triangle_intersection(t, camera_position, ray_direction, tri))\n        out_color.rgb = vec3(0.7 * t);\n    out_color.a = 1.0;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}