{
    "Shader": {
        "info": {
            "date": "1721112352",
            "description": "combination of https://www.shadertoy.com/view/lXsSRN https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/wdtczM",
            "flags": 1,
            "hasliked": 0,
            "id": "XfXyW4",
            "likes": 2,
            "name": "other galaxy",
            "published": 3,
            "tags": [
                "galaxy",
                "stars",
                "universe"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "\n\n#define iterations 14\n#define formuparam 0.50\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.04,1.);\t\n}\nfloat hash( ivec3 p )    // this hash is not production ready, please\n{                        // replace this by something better\n\n    // 3D -> 1D\n    int n = p.x*3 + p.y*113 + p.z*311;\n\n    // 1D hash by Hugo Elias\n\tn = (n << 13) ^ n;\n    n = n * (n * n * 15731 + 789221) + 1376312589;\n    return float( n & ivec3(0x0fffffff))/float(0x0fffffff);\n}\n\nfloat noise( in vec3 x )\n{\n    ivec3 i = ivec3(floor(x));\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+ivec3(0,0,0)), \n                        hash(i+ivec3(1,0,0)),f.x),\n                   mix( hash(i+ivec3(0,1,0)), \n                        hash(i+ivec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+ivec3(0,0,1)), \n                        hash(i+ivec3(1,0,1)),f.x),\n                   mix( hash(i+ivec3(0,1,1)), \n                        hash(i+ivec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// https://www.shadertoy.com/view/XsGfWV\nvec3 aces_tonemap(vec3 color){\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}\n\nvec2 r(vec2 p, float a) { return p*mat2(cos(a), sin(a), -sin(a), cos(a)); }\n#define R iResolution.xy\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    vec4 O = fragColor; vec2 I = fragCoord;\n      vec2 uv3 = I/R;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.005);\n\tfloat time=iTime*speed+.25;\n     vec2 uv2 = fragCoord / iResolution.xy;\n vec2 adjustedUV = (uv2 - 0.5) * 3.5;\n    float timeFactor = iTime * 0.025;\n    vec4 outputColor = vec4(0.0);\n    float x;\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    vec4 o = fragColor;\n vec2 R2 = iResolution.xy; \n    o-=o;\n    for(float d,t = -iTime*.1, i = 0. ; i > -1.; i -= .06 )          \t\n    {   d = fract( i -3.*t );                                          \t\n        vec4 c = vec4( ( I - R2 *.5 ) / R2.y *d ,i,0 ) * 28.;            \t\n        for (int j=0 ; j++ <27; )                                      \t\n            c.xzyw = abs( c / dot(c,c)                                 \t\n                    -vec4( 7.-.2*sin(t) , 6.3 , .7 , 1.-cos(t/.8))/7.);\t\n       o -= c * c.yzww  * d--*d  / vec4(3,5,1,1);                     \n    }\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t \n    vec2 p = (2.*I - R) / R.y * 1.5;\n    \n    float fp = pow(.5/length(pow(abs(r(p,.43))\n        *vec2(2,1),vec2(.5))),4.5);\n       \n    p *= mat2(.7,-.5,-.4,1.2);    \n    vec3 pos = normalize(vec3(r(p,-.4/length(p)),.25));\n    pos.z -= iTime*1.1;\n    \n    vec3 q = 6.*pos;\n    float f  = 0.5000*noise( q ); q = q*2.;\n          f += 0.2500*noise( q ); q = q*2.;\n          f += 0.1250*noise( q ); q = q*2.;\n          f += 0.0625*noise( q );\n    \n    vec2 n = uv3*(1.-uv)*3.; float v = pow(n.x*n.y,.8);\n    \n    float fr = .6/length(p);\n    f = smoothstep(-.4,2.,f*f) * fr*fr + fp;\n    \n    O = vec4(aces_tonemap(\n        pow(f*f * vec3(1., .05, 1.0)*v,vec3(.45))*3.5),0);\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv, 0.0);\n\t\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.7, .0, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.9, .0, len);\n\t\n\tvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n    vec3 color;\n    for (float waveIndex = 0.0; waveIndex < 25.0; waveIndex += 1.0) {\n        vec2 waveVector = vec2(cos(x = waveIndex * 15. - timeFactor), sin(x));\n        float wave = sin(waveIndex * mix(0.05, 0.5, sin(timeFactor) * 0.5) - timeFactor);\n        float distance = length(adjustedUV - wave * waveVector); \n        \n        for(int i=0;i<3;i++) {\n            float z = waveIndex * 0.000002;\n            float l = distance;\n            vec2 uv = adjustedUV;\n            uv += waveVector/l*(sin(z)+5.)*abs(sin(l*1.1-z-z));\n            color[i] = 0.0013/length(mod(uv + vec2(0.003 * float(i-1)),1.1)-0.5); \n        }\n        color *= vec3(0.49, 0.49, 1.0)+o.xyz; \n        outputColor += vec4(color / distance, 2.0);\n    }\n\t\n    \n\tvec3 from=vec3(1.,.5,0.5);\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor*=outputColor*5.;\n    fragColor*=O*2.;\n    fragColor*=vec4(min(pow(abs(col), vec3(1.0)), 1.0), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}