{
    "Shader": {
        "info": {
            "date": "1468352642",
            "description": "Zooming into the Mandelbrot set. Zoom stops before the single precision calculations make the image blocky.  Decrease MAX_ITER for better performance. Think the zoom function could be improved.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtcGzM",
            "likes": 0,
            "name": "Mandelbrot Zoom Test",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 795
        },
        "renderpass": [
            {
                "code": "//Based on colouring techniques and optimisations from https://en.wikipedia.org/wiki/Mandelbrot_set\n\n#define MAX_ITER 6000.0\n#define BAILOUT 50000.0\n\nfloat mandelbrot(vec2 c){\n    vec2 z = vec2(0.0, 0.0);\n    float iter = 0.0;\n    \n    //Checks if c lies in the main cardiod - saves MAX_ITER iterations if it is :)\n    float xm = c.x - 0.25;\n    float yy = c.y * c.y;\n    float q = xm * xm + yy;\n    if(q * q + q * xm <= 0.25 * yy){\n        return MAX_ITER;\n    }\n    \n    for(float i = 0.0; i < MAX_ITER; i++){\n        if(z.x * z.x + z.y * z.y >= BAILOUT){\n            break;\n        }\n        z = vec2(z.x * z.x - z.y * z.y + c.x, 2.0 * z.x * z.y + c.y);\n        iter += 1.0;\n    }\n    if(iter < MAX_ITER){\n        float logz = log(z.x * z.x + z.y * z.y) / 2.0;\n        float logt = log(2.0);\n        float nu = log(logz / logt ) / logt;\n        iter += 1.0 - nu;\n    }\n    return iter;\n}\n\nvec3 getCol(float x){\n    if(x == 1.0){\n        return vec3(0.0);\n    }\n    if(x < 0.5){\n        //13 4 71 -> 255 255 255\n    \treturn mix(vec3(0.05, 0.015, 0.278), vec3(1.0, 1.0, 1.0), x * 2.0);\n    }\n    //255 255 255 -> 244 138 2\n    return mix(vec3(1.0, 1.0, 1.0), vec3(0.956, 0.5411, 0.0078), (x - 0.5) * 2.0);\n}\n        \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Controls the zoom\n    float xsize = mix(0.01, 0.0005, min(iTime / 15.0, 1.0));\n    \n    //X and Y offsets\n    float xoffset = 0.42;\n    float yoffset = 0.1;\n    \n    \n    uv = uv * xsize - (xsize / 2.0);\n    uv.x -= xoffset;\n    uv.y += yoffset;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = getCol(mandelbrot(uv) / MAX_ITER);\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}