{
    "Shader": {
        "info": {
            "date": "1695911102",
            "description": "Each pixel owns a particle and is coloured based on the particleâ€™s relative distance from two points on the screen. See commments in the code.",
            "flags": 32,
            "hasliked": 0,
            "id": "dd3yDB",
            "likes": 6,
            "name": "gravity particle field",
            "published": 3,
            "tags": [
                "chaos",
                "gravity"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = U/iResolution.xy;\n    O = texture(iChannel0, uv);\n    \n    vec2 pos = O.xy;\n    \n    float a = length(pos-vec2(.25,.5));\n    float b = length(pos-vec2(.75,.5));\n    \n    float x = (a - b)/(a + b); // This nifty formula gives us a colour based on the ratio\n                               // of the distance of the particle from the two attractors located\n                               // at (.25, .5) and (.75,. 5)\n    x = x * .5 + .5;\n    \n    O = vec4(\n        x,\n        x*x,\n        x,\n        1.\n    );\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define DRAG\n//#define actual_gravity_equation\n\nfloat stepSize = 1e-5;\n\nvoid mainImage( out vec4 O, in vec2 U ){\n\n    vec2 r = iResolution.xy;\n    vec2 cuv = (2.*U-r)/r.y;\n    vec2 uv = U/r;\n    \n    if (iFrame < 1){\n        O.xy = vec2(.5);\n        O.zw = cuv * 8e-3;\n        #ifdef actual_gravity_equation\n            O.zw = cuv * 9e-3;\n        #endif\n\n        // Our particle's initial velocity, set based on its position on screen.\n        // So what we see on screen is particle position over time starting from centre\n        // with initial velocity = position on screen.\n\n    } else {\n        vec4 buff = texture(iChannel0, uv);\n        vec2 pos = buff.xy;\n        vec2 vel = buff.zw;\n        // Read data from buffer\n\n\n        if (length(vel) > stepSize){\n            vec2 dir = pos-vec2(.75, .5);\n            #ifdef actual_gravity_equation\n                float d = 1./dot(dir,dir);\n            #else\n                float d = 1./length(dir);\n            #endif\n            vel += normalize(dir) * -d * stepSize;\n            // Gravity of first attractor\n\n            dir = pos-vec2(0.25, 0.5);\n            #ifdef actual_gravity_equation\n                d = 1./dot(dir,dir);\n            #else\n                d = 1./length(dir);\n            #endif\n            vel += normalize(dir) * -d * stepSize;\n            // Gravity of second attractor\n\n            #ifdef DRAG\n                vel *= 0.99;\n            #endif\n\n\n\n            //boundary bounce\n\n            /*\n            float a = 0.9;\n            if (pos.y < -1.) vel.y = abs(vel.y)*a;\n            if (pos.y > 1.) vel.y = -abs(vel.y)*a;\n            if (pos.x < -1.) vel.x = abs(vel.x)*a;\n            if (pos.x > 1.) vel.x = -abs(vel.x)*a;\n            //*/\n\n\n\n            pos = pos + vel;\n        }\n        \n        O = vec4(pos, vel);\n        // Write the processed data back in\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}