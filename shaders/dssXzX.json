{
    "Shader": {
        "info": {
            "date": "1669385801",
            "description": "Simple implementation of the game of life with a buffer layer for baking an oscillating color heatmap.",
            "flags": 32,
            "hasliked": 0,
            "id": "dssXzX",
            "likes": 4,
            "name": "game of life with lineage",
            "published": 3,
            "tags": [
                "gameoflife",
                "heatmap",
                "lineage"
            ],
            "usePreview": 0,
            "username": "Dirk",
            "viewed": 233
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 life = texture(iChannel0, uv);\n    vec4 ancestors = texture(iChannel1, uv);\n    vec3 final = life.xyz+ancestors.xyz;\n    \n    \n    \n\tfragColor = vec4(final, 1.0);\n\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = vec3(0.0);\n    float neighbors = 0.0;\n    \n    for(float i = -1.0; i <= 1.0; i += 1.0){\n        for( float j = -1.0; j <= 1.0; j += 1.0){\n        \tvec2 offset = vec2(i, j) / iResolution.xy;\t\t \n        \tvec4 lookup = texture(iChannel0, uv + offset); \n        \tneighbors += lookup.x;\t\t\t\t\t\t\t \n        }\n    }\n    \n    float cell = texture(iChannel0, uv).x;\n    if(cell > 0.0) {\n        if(neighbors >= 3.0 && neighbors <= 4.0) { color = vec3(1.0); }\n    }else\n    if(neighbors > 2.0 && neighbors < 4.0) { color = vec3(1.0); }\n    \n    if(iTime < 0.05) { color = vec3(texture(iChannel1, fragCoord.xy / iResolution.xx).x); }\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 bionary = texture(iChannel0, uv);\n    vec4 color = texture(iChannel1, uv);\n    \n    \n    if(bionary.x == 1.0){\n        color.x += 0.02*abs(sin(iTime*0.5));\n        color.y += 0.02*abs(sin(iTime*0.55));\n        color.z += 0.02*abs(sin(iTime*0.6));\n    }else{\n        color.x -= 0.0005*abs(sin(iTime*0.5));\n        color.y -= 0.0005*abs(sin(iTime*0.55));\n        color.z -= 0.0005*abs(sin(iTime*0.6));\n    }\n    if( color.x > 0.1 ) color.x -= 0.01*sin(iTime*0.52);\n    if( color.y > 0.1 ) color.y -= 0.01*sin(iTime*0.56);\n    if( color.z > 0.1 ) color.z -= 0.01*sin(iTime*0.59);\n    \n\tfragColor = vec4(color.xyz, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}