{
    "Shader": {
        "info": {
            "date": "1501359538",
            "description": "Mirrors are micro-mountains! Descartes reflection results from interferences. Basic rule is Huygens: any point scatters  in every directions.\nMouse: incident direction. SPACE: show energy  vs  wavefronts\nNB: we are monofrequency (i.e. laser), thus sparkle",
            "flags": 16,
            "hasliked": 0,
            "id": "4dBBRc",
            "likes": 7,
            "name": "reflection & sparkling",
            "published": 3,
            "tags": [
                "physics",
                "optics",
                "interferences",
                "huygens"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1208
        },
        "renderpass": [
            {
                "code": "// --- simulating reflection on a micro-relief + sparkling (because of mono-frequency)\n// see also 2-buffers optimized version https://www.shadertoy.com/view/4sSBRd\n\n#define T(x)        .1 + z * textureLod(iChannel0,vec2(.5*x,.75),0.).g     // relief\n#define W(P)         k*( dot(P,D) - .1*iTime )                             // incident phase\n#define M(P)       ( .7 + .3* cos(k*cross2(U-C,D)) )                       // dashing\n#define cross2(a,b) ( (a).x*(b).y - (b).x*(a).y )\n#define draw(v)      clamp(1.* (v) -0., 0., 1.)                            // draw wave\n#define keyToggle(ascii)  ( texelFetch(iChannel3,ivec2(ascii,2),0).x > 0.) // keyboard\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 D = normalize(vec2(1,-5)), d=vec2(0),\n         R = iResolution.xy,\n         C = vec2(R.x/R.y/2.,.1);                     // pivot for in-out rays\n\tU /= R.y;\n    O -= O;\n    \n    if (length(iMouse.xy)>10.) D = -normalize(iMouse.xy-C*R.y); // tune incident direction\n    float k = 150.,                                   // wavenumber\n          z = .03,                                    // relief amplitude\n          l, N = 300.; // R.y                         // sampling \n\n    if (U.y < T(U.x)) { O ++; return; }               // relief\n    \n    O.g = draw( .7 * cos(W(U)) * M(U) )               // incident wavefronts\n        + smoothstep(2./R.y,.0,abs(cross2(U-C,D)));   // incident direction\n   \n    for (float x=-1.; x< 2.5; x+=1./N) {              // sum scattering from each terrain point\n        vec2 P = vec2(x, T(x) );\n        l = length(U-P);\n        d += cos( k*l + W(P) +vec2(0,1.5708) ) * 2.5 / l / N; //  * M(P) \n    }\n    O.r =   draw( !keyToggle(32)                      // diffracted wavefronts\n                 ? max(d.x,0.) : length(d));          // wavefront vs amplitude   \n    O.rb += smoothstep(4./R.y,.0,abs(cross2(vec2(2.*C.x-U.x,U.y)-C,D))); // reflected direction\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}