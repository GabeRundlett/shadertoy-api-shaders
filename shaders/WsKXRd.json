{
    "Shader": {
        "info": {
            "date": "1575988855",
            "description": "Playing around with cornusammonis' \"Pixel Sorting\"\n\nSorting pixels from nyant cat until we create a nice looking landscape\n\nSpace to reset",
            "flags": 48,
            "hasliked": 0,
            "id": "WsKXRd",
            "likes": 3,
            "name": "Nyanscape",
            "published": 3,
            "tags": [
                "nyan",
                "landscape",
                "cat",
                "sort"
            ],
            "usePreview": 0,
            "username": "Gaktan",
            "viewed": 426
        },
        "renderpass": [
            {
                "code": "// Original source: \n// https://www.shadertoy.com/view/4dcGDf\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 sceneColor = texelFetch(iChannel0, ivec2(fragCoord.xy), 0).rgb;\n    \n    vec3 skyColor = vec3(0.3*(fragCoord.y*1.5+1.0)/iResolution.y, 0.3, 0.1);\n    float sky = smoothstep(0.1, 1.0, luminanceRB(sceneColor))*5.0;\n    \n    // Blend with sky\n    vec3 finalColor = mix(sceneColor, sceneColor-skyColor, clamp(sky, 0.0, 1.0));\n\n    fragColor = vec4(finalColor, 1.0);\n    \n    //fragColor = vec4(sky);\n    //fragColor = vec4(luminanceRB(sceneColor.rgb), sceneColor.g, luminanceRB(sceneColor.rgb), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 e  = vec2(-step_x, 0.0);\n    vec2 w  = vec2(step_x, 0.0);\n\n    vec3 im =    texture(iChannel0, uv).rgb;\n    vec3 im_n =  texture(iChannel0, uv+n).rgb;\n    vec3 im_s =  texture(iChannel0, uv+s).rgb;\n    vec3 im_e =  texture(iChannel0, uv+e).rgb;\n    vec3 im_w =  texture(iChannel0, uv+w).rgb;\n    \n    // North/South sort. Use luminance of Red and Blue\n    if(int(mod(float(iFrame), 4.0)) < 2)\n    {\n        if(int(mod(float(iFrame) + fragCoord.y, 2.0)) == 0)\n        {\n            if ((luminanceRB(im_s) > luminanceRB(im)))\n                im = im_s;\n        }\n        else\n        {\n            if ((luminanceRB(im_n) < luminanceRB(im)))\n                im = im_n;\n        }\n    }\n    // West, East sort. Just use Green\n    else\n    {\n        if(int(mod(float(iFrame) + fragCoord.x, 2.0)) == 0)\n        {\n            if ((im_w.g > im.g))\n                im = im_w;\n        }\n        else\n        {\n            if ((im_e.g < im.g))\n                im = im_e;\n        }\n    }\n    \n    fragColor = vec4(im, 1.0);\n    \n    // initialize with image\n    if(iFrame<10 || texelFetch(iChannel3, ivec2(32, 0), 0).x > 0.0)\n    {\n        fragColor = texture(iChannel1, uv*0.8);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float luminance(vec3 color)\n{\n    return (0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b);\n}\n\nfloat luminanceRB(vec3 color)\n{\n    return (0.2126 * color.r + 0.0722 * color.b);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}