{
    "Shader": {
        "info": {
            "date": "1679995987",
            "description": "Automatic differentiation with dual numbers, computing the cheaper dot(gradient(F),v)*v; This method generalizes to any number of dimensions, and is used in forward gradient descent.",
            "flags": 0,
            "hasliked": 0,
            "id": "cs3XRB",
            "likes": 18,
            "name": "Automatic Differentiation (Dual)",
            "published": 3,
            "tags": [
                "numbers",
                "derivative",
                "dual",
                "arithmetic",
                "automatic",
                "differential"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 473
        },
        "renderpass": [
            {
                "code": "\n// a set of arithmetic functions to compute the derivative of a function on a second channel,\n// also known as automatic differentiation with dual numbers.\n\n// to compute dot(gradient(F), v) for a function F(p), it suffices to replace p with\n// { ad_float(p[0],v[0]), ad_float(p[1],v[1]), ... } and evaluate F that way.\n\n// This method generalizes to any number of dimensions, and is used in forward gradient descent.\n\n// ad_float(f(x), f'(x))\n#define ad_float vec2\n\nstruct ad_vec2 {\n    ad_float x;\n    ad_float y;\n};\nstruct ad_vec3 {\n    ad_float x;\n    ad_float y;\n    ad_float z;\n};\n\nad_vec3 ad_domain(vec3 p, vec3 v) {\n\treturn ad_vec3(\n        ad_float(p.x,v.x),\n        ad_float(p.y,v.y),\n        ad_float(p.z,v.z));\n}\n\nad_float ad_const(float a) {\n    return ad_float(a, 0.0);\n}\n\nad_float ad_sub(ad_float a, ad_float b) {\n    return a - b;\n}\nad_float ad_sub(ad_float a, float b) {\n    return ad_float(a[0] - b, a[1]);\n}\nad_float ad_sub(float a, ad_float b) {\n    return ad_float(a - b[0], -b[1]);\n}\n\nad_float ad_add(ad_float a, ad_float b) {\n    return a + b;\n}\nad_float ad_add(ad_float a, float b) {\n    return ad_float(a[0] + b, a[1]);\n}\nad_float ad_add(float a, ad_float b) {\n    return ad_float(a + b[0], b[1]);\n}\n\nad_float ad_mul(ad_float a, ad_float b) {\n    return ad_float(a[0] * b[0], a[1] * b[0] + a[0] * b[1]);\n}\nad_float ad_mul(ad_float a, float b) {\n    return a * b;\n}\nad_float ad_mul(float a, ad_float b) {\n    return a * b;\n}\n\nad_float ad_div(ad_float a, ad_float b) {\n    return ad_float(a[0] / b[0], a[1] / b[0] - a[0] * b[1] / (b[0] * b[0]));\n}\nad_float ad_div(ad_float a, float b) {\n    return a / b;\n}\nad_float ad_div(float a, ad_float b) {\n    return ad_float(a / b[0], (-a * b[1]) / (b[0] * b[0]));\n}\n\nad_float ad_min(ad_float a, ad_float b) {\n    return (a[0] < b[0])?a:b;\n}\nad_float ad_min(ad_float a, float b) {\n    return (a[0] < b)?a:ad_const(b);\n}\nad_float ad_min(float a, ad_float b) {\n    return (a < b[0])?ad_const(a):b;\n}\n\nad_float ad_max(ad_float a, ad_float b) {\n    return (a[0] > b[0])?a:b;\n}\nad_float ad_max(ad_float a, float b) {\n    return (a[0] > b)?a:ad_const(b);\n}\nad_float ad_max(float a, ad_float b) {\n    return (a > b[0])?ad_const(a):b;\n}\n\n// new functions are easy to build from the chain rule:\n// diff(f(g(x)),x) = f'(g(x)) * g'(x)\n// or\n// ad_float(f(g[0]), f'(g[0]) * g[1])\n\nad_float ad_sq (ad_float a) {\n    return ad_float(a[0] * a[0], 2.0 * a[0] * a[1]);\n}\n\nad_float ad_sqrt (ad_float a) {\n    float q = sqrt(a[0]);\n    return ad_float(q, (a[1] == 0.0)?0.0:(0.5 * a[1] / q));\n}\n        \nad_float ad_abs(ad_float a) {\n    return ad_float(abs(a[0]), a[1] * sign(a[0]));\n}\nad_float ad_sin(ad_float a) {\n    return ad_float(sin(a[0]), a[1] * cos(a[0]));\n}\nad_float ad_cos(ad_float a) {\n    return ad_float(cos(a[0]), -a[1] * sin(a[0]));\n}\nad_float ad_log(ad_float a) {\n    return ad_float(log(a[0]), (a[1] == 0.0)?0.0:(a[1] / a[0]));\n}\nad_float ad_exp(ad_float a) {\n    float w = exp(a[0]);\n    return ad_float(w, a[1] * w);\n}\n\nad_float ad_dot(ad_vec2 u, ad_vec2 v) {\n    return ad_add(ad_mul(u.x,v.x),ad_mul(u.y,v.y));\n}\nad_float ad_dot(ad_vec3 u, ad_vec3 v) {\n    return ad_add(ad_add(ad_mul(u.x,v.x),ad_mul(u.y,v.y)), ad_mul(u.z,v.z));\n}\nad_float ad_length(ad_vec2 v) {\n    return ad_sqrt(ad_add(ad_sq(v.x),ad_sq(v.y)));\n}\nad_float ad_length(ad_vec3 v) {\n    return ad_sqrt(ad_add(ad_add(ad_sq(v.x),ad_sq(v.y)), ad_sq(v.z)));\n}\n\n// s: width, height, depth, thickness\n// r: xy corner radius, z corner radius\nad_float sdSuperprim(ad_vec3 p, vec4 s, vec2 r) {\n    ad_float dx = ad_sub(ad_abs(p.x),s.x);\n    ad_float dy = ad_sub(ad_abs(p.y),s.y);\n    ad_float dz = ad_sub(ad_abs(p.z),s.z);\n    ad_float q = \n       \tad_sub(\n            ad_abs(\n                ad_add(\n                    ad_add(\n                        ad_length(ad_vec2(\n                            ad_max(ad_add(dx, r.x), 0.0),\n                            ad_max(ad_add(dy, r.x), 0.0))),\n                  \t\tad_min(-r.x,ad_max(dx,dy))),\n                    s.w)), \n                s.w);\n    return ad_add(\n                ad_length(ad_vec2(\n                    ad_max(ad_add(q, r.y),0.0),\n                    ad_max(ad_add(dz, r.y),0.0))),\n                ad_min(-r.y,ad_max(q,dz)));\n}\n\n// example parameters\n#define SHAPE_COUNT 10.0\nvoid getfactor (int i, out vec4 s, out vec2 r) {\n    //i = 8;\n    if (i == 0) { // cube\n        s = vec4(1.0);\n        r = vec2(0.0);\n    } else if (i == 1) { // corridor\n        s = vec4(vec3(1.0),0.25);\n        r = vec2(0.0);\n    } else if (i == 2) { // pipe\n        s = vec4(vec3(1.0),0.25);\n        r = vec2(1.0,0.0);\n    } else if (i == 3) { // cylinder\n        s = vec4(1.0);\n        r = vec2(1.0,0.0);\n\t} else if (i == 4) { // pill\n        s = vec4(1.0,1.0,2.0,1.0);\n        r = vec2(1.0);\n    } else if (i == 5) { // sphere\n        s = vec4(1.0);\n        r = vec2(1.0);\n    } else if (i == 6) { // pellet\n        s = vec4(1.0,1.0,0.25,1.0);\n        r = vec2(1.0,0.25);\n    } else if (i == 7) { // torus\n        s = vec4(1.0,1.0,0.25,0.25);\n        r = vec2(1.0,0.25);\n    } else if (i == 8) { // sausage mouth\n        s = vec4(2.0,0.5,0.25,0.25);\n        r = vec2(0.5,0.25);\n    } else if (i == 9) { // beveled O\n        s = vec4(0.7,1.0,1.0,0.25);\n        r = vec2(0.125);\n\t}\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 1.5 + sin(time * 0.1) * 0.7;\n\tcamPos = vec3(4.5*sin(an),2.0,4.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\nvec3 doBackground( void )\n{\n    return vec3( 0.0, 0.0, 0.0);\n}\n\nstruct ADMValue {\n    ad_float d;\n    float mat;\n};\n\nADMValue min2(ADMValue a, ADMValue b) {\n    if (a.d[0] <= b.d[0])\n        return a;\n    else\n        return b;\n}\n\nADMValue plane(ad_vec3 p) {\n    return ADMValue(ad_add(p.y,2.0),1.0);\n}\n\nADMValue add_plane(ad_vec3 p, ADMValue m) {\n    return min2(plane(p),m);\n}\n\nADMValue doScene (ad_vec3 p) {\n    float k = iTime*0.5;\n    float u = smoothstep(0.0,1.0,smoothstep(0.0,1.0,fract(k)));\n    int s1 = int(mod(k,SHAPE_COUNT));\n    int s2 = int(mod(k+1.0,SHAPE_COUNT));\n    \n    vec4 sa,sb;\n    vec2 ra,rb;\n    getfactor(s1,sa,ra);\n    getfactor(s2,sb,rb);\n    \n    ad_float d;\n    ad_vec3 pp = ad_vec3(p.z,p.y,p.x);\n    if (iMouse.z > 0.5) {\n    \tvec2 m = iMouse.xy/iResolution.xy;\n    \td = sdSuperprim(pp, vec4(vec3(1.0),mix(sa.w,sb.w,u)), m);\n\t} else {\n    \td = sdSuperprim(pp, mix(sa,sb,u), mix(ra,rb,u));\n\t}\n    \n    return add_plane(p, ADMValue(d,0.0));\n}\n\n\nvec2 doModel( vec3 p ) {\n    ADMValue d = doScene(ad_domain(p, vec3(0.0)));\n\treturn vec2(d.d[0], d.mat);\n}\n\nvec4 doMaterial( in vec3 pos, in vec3 nor )\n{\n    float k = doModel(pos).y;\n    ad_float d = doScene(ad_domain(vec3(pos.x,0.0,pos.z), vec3(0.0,1.0,0.0))).d;\n    \n    float w = abs(mod(d[0], 0.1)/0.1 - 0.5);\n    \n    return mix(vec4(nor * 0.5 + 0.5,0.1),\n               vec4(vec3(d[1]) * 0.5 + 0.5,0.0) * w,\n               clamp(k,0.0,1.0));\n}\n\n//------------------------------------------------------------------------\n\nfloat calcNormalDot( in vec3 pos, vec3 v )\n{\n    ADMValue d = doScene(ad_domain(pos, v));    \n    return d.d[1];\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    // the full d-dimensional gradient can be reconstructed by calling the function d times\n    // or by monte carlo integration of projected gaussian(0,1) basis vectors.\n    vec3 n = vec3(\n        doScene(ad_domain(pos, vec3(1.0,0.0,0.0))).d[1],\n        doScene(ad_domain(pos, vec3(0.0,1.0,0.0))).d[1],\n        doScene(ad_domain(pos, vec3(0.0,0.0,1.0))).d[1]);\n    return normalize(n);\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec4 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n#if 0\n\tfloat cos_Ol = max(0.0, calcNormalDot(pos, lig));\n#else\n\tfloat cos_Ol = max(0.0, dot(nor, lig));\n#endif\n    vec3 h = normalize(lig - rd);\n#if 0\n    float cos_Oh = max(0.0, calcNormalDot(pos, h));\n#else\n    float cos_Oh = max(0.0,dot(nor, h));\n#endif\n    float dif = cos_Ol;\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(0.8,0.7,0.6)*sha;\n    \n    lin += vec3(0.20,0.30,0.30);\n\n    \n    vec3 col = mal.rgb*lin;\n\n    // specular\n    col += cos_Ol * pow(cos_Oh,40.0) * sha;\n    \n    // envmap\n    col += mal.w*texture(iChannel0, reflect(rd,nor)).rgb;\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvec3 ff_filmic_gamma3(vec3 linear) {\n    vec3 x = max(vec3(0.0), linear-0.004);\n    return (x*(x*6.2+0.5))/(x*(x*6.2+1.7)+0.06);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n    //doCamera( ro, ta, 3.0, 0.0 );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground();\n\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec4 mal = doMaterial( pos, nor );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = ff_filmic_gamma3(col * 0.6); //pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}