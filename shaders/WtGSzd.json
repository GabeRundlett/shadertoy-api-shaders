{
    "Shader": {
        "info": {
            "date": "1583334900",
            "description": "Ex05, interact with mouse",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGSzd",
            "likes": 2,
            "name": "PapillaCell",
            "published": 3,
            "tags": [
                "2d",
                "cellularnoise",
                "cinashader"
            ],
            "usePreview": 0,
            "username": "Reva",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "// Author Reva - 2020-03-04\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n        return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    \n    st *= rotate2d(noise(st));\n    \n    // Cell positions\n    vec2 point[10];\n    vec2 move = iMouse.xy/iResolution.xy - 0.5;\n    for(float i = 0.; i < 10.; i+= 1.){\n        vec2 pos = random2(vec2(i) - 5.93);\n        vec2 vel = vec2(noise(pos*iTime));\n        point[int(i)] = clamp(pos + vel*0.5 + move,vec2(-0.8),vec2(0.8));\n    }\n\n    float m_dist = 1.;  // minimun distance\n\n    // Iterate through the points positions\n    for (int i = 0; i < 10; i++) {\n        float dist = distance(st, point[i]);\n\n        // Keep the closer distance\n        m_dist = min(m_dist, dist);\n    }\n\n    // Draw the min distance (distance field)\n    float t = m_dist*0.8;\n    \n    vec3 color = pal(t,vec3(0.635,0.589,0.504),vec3(0.720,0.534,0.493),vec3(0.500,0.818,0.915),vec3(0.410,0.317,0.297));\n    \n    // Show isolines\n    // color -= step(0.10,m_dist)*-0.060;\n\n    fragColor = vec4(1.0 - color,0.5 - m_dist);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}