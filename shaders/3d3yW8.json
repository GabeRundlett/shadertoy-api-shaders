{
    "Shader": {
        "info": {
            "date": "1600785740",
            "description": "Interlocked moebius strips built on Martijn Steinrucken´s great demonstration.",
            "flags": 0,
            "hasliked": 0,
            "id": "3d3yW8",
            "likes": 19,
            "name": "Mesmerizing interlocked moebius ",
            "published": 3,
            "tags": [
                "raymarching",
                "torus",
                "moebius"
            ],
            "usePreview": 0,
            "username": "machmuel",
            "viewed": 509
        },
        "renderpass": [
            {
                "code": "// based on Martijn Steinrucken´s (aka The Art of Code/BigWings) \n// ray marching sample and trefoil knot sample\n\n#define MAX_STEPS 1000\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define PI 3.1415926\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat profile(vec2 p, float radians, float phase) { \n    p.x = abs(p.x)-.05*abs(sin(2.*p.y)); //sin is for some warp in the x direction\n    if (p.y>0.) {\n        p.y = abs(p.y);\n    }\n    else{\n        //p.y = abs(p.y) - .1-.4*pow(abs(sin(phase+radians*4.25)), 9.);\n        p.y = abs(p.y) -.4 + .3*sqrt(1.-pow(acos(cos((phase*2.+radians*10.5)))/PI/.9,4.));\n    }\n    return length(max(p, 0.))+min(max(p.x, max(p.x, p.y)), 0.);\n}\n\nfloat sdMoebius(vec3 p, vec3 s) {\n    float rMax= 1.4;\n    float rMin= .2;\n    \n    float radians = atan(p.x, p.z);\n    mat2 rotMat = Rot(iTime*PI-radians*0.250);\n    mat2 rotMat2 = Rot(PI/2.);\n    vec2 cp= vec2(length(p.xz)-rMax, p.y); \n    cp *= rotMat;\n    vec2 cp2 = cp*rotMat2;\n    cp.y = abs(cp.y)-.4;\n    cp2.y = abs(cp2.y)-.4;\n    //float d= length(cp)-rMin; // formula to have a circle as cross section\n    \n    float d= profile(cp, radians, PI/2.);\n    cp.y = abs(cp.y)-0.4;\n    float d2=  profile(cp2, radians, 0.);\n\treturn min(d-.1,d2-.1);\n    //return min(d-.0,d2-.0);\n}\n\nfloat GetDist(vec3 p) {\n    float d = sdMoebius(p, vec3(1));\n   \t\n    return d*.4 ;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=.0;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS; // smaller steps to avoid glitches\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec3 Bg(vec3 rd) {\n\tfloat k= rd.y*.5+.5;\n    vec3 col = mix(vec3(.2,.1,.1), vec3(.2,.5,1.), k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n\n    col +=Bg(rd);\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n        vec3 r = reflect(rd,n);\n    \tfloat spec = pow(max(0., r.y),30.);\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n    \tcol = mix(Bg(r), vec3(dif), .5) + spec;  \n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}