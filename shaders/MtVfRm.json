{
    "Shader": {
        "info": {
            "date": "1542227595",
            "description": "Game of life w/ pause button. To step, pause the small pause button, then click the large one.",
            "flags": 32,
            "hasliked": 0,
            "id": "MtVfRm",
            "likes": 4,
            "name": " Conway's  Game of Life",
            "published": 3,
            "tags": [
                "game",
                "simulation",
                "life",
                "cellularautomation"
            ],
            "usePreview": 0,
            "username": "Hullburg",
            "viewed": 552
        },
        "renderpass": [
            {
                "code": "// Draw\n\n\nconst float buttonTransparency = 0.2;\n#define lettersOnTexture vec2(16, 16)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // draw cells\n    ivec2 c = ivec2(fragCoord);\n    c /= cellSize;\n\n    fragColor.rgb = vec3( alive(c) ? 1. : 0.);\n    \n    if (\t// draw button\n        fragCoord.x < pauseButtonSize.x && \n        fragCoord.y < pauseButtonSize.y \n    ) {\n        bool pause = paused;\n        vec2 symbol = vec2(pause ? 6 : 5, 15);\n        vec4 image = texture(\n            iChannel1,\n            (fragCoord/pauseButtonSize + symbol)/lettersOnTexture\n        );\n        float val = image.r;\n        \n        vec3 buttonCol = pause ? vec3(1., 1. - val, 0) : vec3(0, 1. - val, val);\n        //buttonCol = texel;\n        \n        fragColor.rgb = mix(buttonCol, fragColor.rgb, buttonTransparency);\n    }\n    \n    //fragColor.a = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Cellular automation\n\n\nint countNbs(ivec2 c) {\t// Counts 8 surrounding pixels\n    \n    int count = 0;\n    \n    #define countNb(x, y) if ( alive(c + ivec2(x, y)) ) { if (count >= 3) { return 4; } count++; }\n    \n    countNb(-1, -1);\n    countNb(-1, 0);\n    countNb(-1, 1);\n    \n    countNb(0, -1);\n    countNb(0, 1);\n    \n    countNb(1, -1);\n    countNb(1, 0);\n    countNb(1, 1);\n    \n    #undef countNb\n    \n    return count;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 c = ivec2(fragCoord);\t// cell\n\n    vec2 afterScale = vec2(c * cellSize);\n    if (\t// outside screen\n        afterScale.x > iResolution.x ||\n        afterScale.y > iResolution.y\n        || fragCoord.x > iResolution.y\n    ) {\n        return;\n    }\n    \n    bool mouseDown = iMouse.z >= 0.;\n    if (c == pausedAdress) {\t// pause button\n        bool pausePressed = \n            mouseDown &&\t// mouse down\n            iMouse.x <= pauseButtonSize.x &&\n            iMouse.y <= pauseButtonSize.y;\n        vec4 texel = texelFetch(iChannel0, pausedAdress, 0);\n        \n        if (pausePressed && texel.g < 1.) {\t// just started pressing\n            fragColor.b = texel.b > 1. ? 0. : 1.5 ;\t// flip mode\n            fragColor.g = on;\n        } else if (!pausePressed && texel.g > 1.) {\t// just stopped pressing\n        \tfragColor.b = texel.b;\n            fragColor.g = off;\n        } else {\n            fragColor = texel;\n        }\n        \n        return;\n    }\n    \n    if (iFrame == 0) {\t// init pattern\n        #ifdef serpinski\n        \tfragColor.r = (c.x & c.y) > 0 ? off : on ;\n        #else\n        \tfragColor = texelFetch(iChannel1, c % int(iChannelResolution[1].xy), 0) * 1.42;\n        #endif\n        \n        return;\n    }\n   \n    \n    ivec2 m = ivec2(iMouse.xy) / cellSize;\n    bool lives;\n    if (mouseDown && ivec2(m) == c) {\t// mouse spawn\n        lives = true;\n    } else if (paused) {\t// pause\n    \tlives = alive(c);\n    } else {\t// game rules\n        int count = countNbs(c);\n    \tlives = count == 3 || (alive(c) && count == 2);\n    }\n        \n    fragColor.r = lives ? on : off ;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//#define serpinski\n\n#define cellSize 4\t//int(exp2(1.) + 0.5)\n\n#define on 1.5\n#define bound 1.\n#define off 0.\n\nconst vec2 pauseButtonSize = vec2(64);\t// texture is 64\n//const int pauseButtonSize2 = 32;\nconst ivec2 pausedAdress = ivec2(0);\n\n\n#define alive(c) (texelFetch(iChannel0, c, 0).r >= bound)\n#define paused texelFetch(iChannel0, pausedAdress, 0).b > bound\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}