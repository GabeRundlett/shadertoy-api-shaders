{
    "Shader": {
        "info": {
            "date": "1408912258",
            "description": "Experimenting with movement in Voronoi noise. Mouse X to force zoom out.\nFull screen it if you can!",
            "flags": 64,
            "hasliked": 0,
            "id": "4sjXRh",
            "likes": 39,
            "name": "Squiggles",
            "published": 3,
            "tags": [
                "voronoi",
                "squiggles"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 3587
        },
        "renderpass": [
            {
                "code": "// Squiggles\n// Dave H.\n// https://www.shadertoy.com/view/4sjXRh\n\n#define MOD2 vec2(.16632,.17369)\n#define MOD3 vec3(.16532,.17369,.15787)\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3.zxy, p3.yxz+19.19);\n    return fract(vec2(p3.x * p3.y, p3.z*p3.x));\n}\n\n//---------------------------------------------------------------------------------------\nvec3 Cells(in vec2 p, in float time)\n{\n    vec2 f = fract(p);\n    p = floor(p);\n\tfloat d = 1.0e10;\n    vec2 id = vec2(0.0);\n    time *= 1.5;\n    \n\tfor (int xo = -1; xo <= 1; xo++)\n\t{\n\t\tfor (int yo = -1; yo <= 1; yo++)\n\t\t{\n            vec2 g = vec2(xo, yo);\n            vec2 n = Hash22(p+g);\n            n = n*n*(3.0-2.0*n);\n            \n\t\t\tvec2 tp = g + .5 + sin(time + 6.2831 * n)*1.2 - f;\n            float d2 = dot(tp, tp);\n\t\t\tif (d2 < d)\n            {\n                // 'id' is the colour code for each squiggle\n                d = d2;\n                id = n;\n            }\n\t\t}\n\t}\n\treturn vec3(sqrt(d), id);\n}\nmat2 rot(float a)\n{\n    return mat2(sin(a), cos(a),-cos(a), sin(a));\n}\n//---------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-iResolution.xy*.5) / iResolution.y;\n\tfloat time = iTime;\n    vec3 col = vec3(0.0);\n    uv = uv * rot(iTime*.05);\n\tfloat amp = 1.0;\n    float size = 4.0 * (abs(fract(time*.01-.5)-.5)*50.0+1.0) + ((iMouse.x/iResolution.x) * 200.0);\n    float timeSlide = .05;\n         \n    for (int i = 0; i < 20; i++)\n    {\n        vec3 res = Cells(uv * size, time);\n        float c = 1.0 - res.x;\n        // Get a colour associated with the returned id...\n        vec3 wormCol =  clamp(abs(fract((res.y+res.z)* 1.1 + vec3(1.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) -1.0, 0.0, 1.0);\n        c = smoothstep(0.6+amp*.25, 1., c);\n        col += amp * c * ((wormCol * .1) + vec3(.9, .2, .15));\n        amp *= .85;\n        time -= timeSlide;\n    }\n\tfragColor = vec4(min(col, 1.0), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 167,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/badklaat/badklaat-insects-clip"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}