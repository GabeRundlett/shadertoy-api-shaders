{
    "Shader": {
        "info": {
            "date": "1679542820",
            "description": "aurora shader test 2",
            "flags": 0,
            "hasliked": 0,
            "id": "mscXzM",
            "likes": 2,
            "name": "aurora shader test 2",
            "published": 3,
            "tags": [
                "aurorashadertest2"
            ],
            "usePreview": 0,
            "username": "tianluo97",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "const vec2 target_resolution = vec2(940, 86);\n\nvec2 random(vec2 uv){\n    uv = vec2( dot(uv, vec2(127.1,311.7) ),\n               dot(uv, vec2(269.5,183.3) ) );\n    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);\n}\n\nfloat noise(vec2 uv) {\n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n\n    vec2 blur = smoothstep(0.0, 1., uv_fract);\n\n    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),\n                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),\n                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),\n                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;\n}\n\nfloat remap(float x, float t1, float t2, float s1, float s2)\n{\n    return (x - t1) / (t2 - t1) * (s2 - s1) + s1;\n}\n\n#define OCTAVES 3\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    //amplitude代表的是亮暗的对比度\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        \n        value += amplitude * noise(st);\n        st *= 1.5;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // Same texCoord as in Minecraft\n    vec2 texCoord = fragCoord/iResolution.xy;\n    // Own uv variable\n    vec2 uv = texCoord;\n    \n    // Center origin around screen center (range -0.5, 0.5)\n    uv -= .5;\n    \n    // Squish image in excessive dimension\n    float r = (iResolution.x/iResolution.y) / (target_resolution.x/target_resolution.y);\n    if (r >= 1.) uv.x *= r;\n    else uv.y /= r;\n    \n    // Recenter origin to start at 0 (range 0.0, 1.0)\n    uv += .5;\n    uv.y -= 0.5/r - 0.5;    \n    \n    //第一层的layer\n    vec2 p = uv;\n    p.x *= 7.;\n    p.y *= 20.0;\n    \n    p.x += iTime * .8;\n    p.y += iTime * 0.4;\n    \n    float n = noise(p);\n    \n    //调整亮暗的对比度\n    n= pow(n,1.);\n    \n    //调整亮暗的对比度方式2\n    //n = smoothstep(-0.1,1.6,n);\n    \n    vec3 col = vec3(n,n,n);\n    \n    vec3 colLight = col *vec3(0.659,1.000,0.843);\n    \n    col *= vec3(0.102,1.000,0.580);\n    \n    //第二层的layer\n    vec2 p0 = uv;\n    p0.x *= 5.2;\n    p0.y *= 7.0;\n    \n    p0.x -= iTime * 0.4;\n    p0.y += iTime * 0.01;\n    p0.y -= 2.5;\n    \n    float n0 = fbm(p0);\n    n0 = pow(n0,1.1);\n    \n    vec3 col0 = vec3(n0,n0,n0);\n    col0 *= vec3(0.000,0.482,1.000);\n    \n    //第三层的layer\n    vec2 p1 = uv;\n    p1.x *= 1.2;\n    p1.y *= 2.0;\n    \n    p1.x -= iTime * 0.4;\n    p1.y += iTime * 0.01;\n    p1.y -= 2.5;\n    \n    float n1 = fbm(p1);\n    n1 = pow(n1,1.1);\n    \n    vec3 col1 = vec3(n1,n1,n1);\n    col1 *= vec3(0.000,0.678,0.569);\n    \n    //layer进行mix\n    vec3 color = col0*.8 + col*1.3 + colLight*0.3 + col1*0.;\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n    \n    //Debug\n    //fragColor = vec4(col1,1.0);\n    \n    //debug\n    //fragColor = vec4(n0,n0,n0,1.0);\n    \n    // Black bars at the sides\n    if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) fragColor = vec4(0);    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}