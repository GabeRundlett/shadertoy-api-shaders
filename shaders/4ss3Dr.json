{
    "Shader": {
        "info": {
            "date": "1367673900",
            "description": "A simple Sobel based edge detection filter.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ss3Dr",
            "likes": 58,
            "name": "Edge Detection (Sobel kernels)",
            "published": 3,
            "tags": [
                "convolution"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 4784
        },
        "renderpass": [
            {
                "code": "// by Nikos Papadopoulos, 4rknova / 2013\n// WTFPL\n\n// Sobel Kernel - Horizontal\n//  1  2  1\n//  0  0  0\n// -1 -2 -1\n\n// Sobel Kernel - Horizontal\n//  1  0 -1\n//  2  0 -2\n//  1  0 -1\n\nvec3 samplef(const int x, const int y, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n\treturn texture(iChannel0, uv).xyz;\n}\n\nfloat luminance(vec3 c)\n{\n\treturn dot(c, vec3(.2126, .7152, .0722));\n}\n\nvec3 filterf(in vec2 fragCoord)\n{\n\tvec3 hc =samplef(-1,-1, fragCoord) *  1. + samplef( 0,-1, fragCoord) *  2.\n\t\t \t+samplef( 1,-1, fragCoord) *  1. + samplef(-1, 1, fragCoord) * -1.\n\t\t \t+samplef( 0, 1, fragCoord) * -2. + samplef( 1, 1, fragCoord) * -1.;\t\t\n\n    vec3 vc =samplef(-1,-1, fragCoord) *  1. + samplef(-1, 0, fragCoord) *  2.\n\t\t \t+samplef(-1, 1, fragCoord) *  1. + samplef( 1,-1, fragCoord) * -1.\n\t\t \t+samplef( 1, 0, fragCoord) * -2. + samplef( 1, 1, fragCoord) * -1.;\n\n\treturn samplef(0, 0, fragCoord) * pow(luminance(vc*vc + hc*hc), .6);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float u = fragCoord.x / iResolution.x;\n    float m = iMouse.x / iResolution.x;\n    \n    float l = smoothstep(0., 1. / iResolution.y, abs(m - u));\n    \n    vec2 fc = fragCoord.xy;\n    fc.y = iResolution.y - fragCoord.y;\n    \n    vec3 cf = filterf(fc);\n    vec3 cl = samplef(0, 0, fc);\n    vec3 cr = (u < m ? cl : cf) * l;\n    \n    fragColor = vec4(cr, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}