{
    "Shader": {
        "info": {
            "date": "1623627438",
            "description": "Reparametrization of a squircle (square circle, circle with general power). The goal is to achieve approximately constant speed while moving around its perimeter. Currently only works for powers >1. It becomes unstable for powers greater than 5 too.",
            "flags": 0,
            "hasliked": 0,
            "id": "7t2Gzw",
            "likes": 17,
            "name": "Squircle Reparametrization",
            "published": 3,
            "tags": [
                "squircle",
                "parametrization",
                "reparametrization"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "// Desmos graph: https://www.desmos.com/calculator/fd8azv2lgv\n\n#define REPARAMETRIZE\n\n// Constants\n#define TAU 6.28318530718 // 2π\n#define RHO 1.57079632679 // π/2\n\n// Magic constant I haven't found a good way to autoselect yet\n// Its a sort of scale factor\n#define h 1.758\n\n// Utilities\n#define drawSDF(dist, col, opac) color = mix(color, col, smoothstep(unit, 0.0, dist) * (opac))\n\n// SDFs\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nvec2 pSquircle(in float t, in float r, in float n) {\n    vec2 p = vec2(cos(t), sin(t));\n    return pow(abs(p), vec2(n)) * sign(p) * r;\n}\n\n// Approximation of arclength and inverse arclength\nfloat gain(in float x, in float n) {\n    float r = round(x);\n    return abs(r - 0.5 * pow(2.0 * abs(r - x), n));\n}\n\nfloat arcSquircle(in float t, in float r, in float n) {\n    t /= RHO;\n    return (gain(fract(t), n) + floor(t)) * r * h;\n}\n\nfloat invArcSquircle(in float t, in float r, in float n) {\n    t /= r * h;\n    return (gain(fract(t), 1.0 / n) + floor(t)) * RHO;\n}\n\nfloat sdSquircle(in vec2 p, in float r, in float n) {\n    p = abs(p);\n    vec2 pn = pow(p, vec2(n));\n    return abs((pn.x + pn.y - pow(r, n)) / length(pn / p * n));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 2.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 2.0;\n    float unit = 4.0 / iResolution.y;\n    float time = 0.25 * iTime;\n    vec3 color = vec3(1.0);\n\n    float r = 0.75;\n    float n = mix(1.0, 5.0, 0.5 + 0.5 * sin(0.25 * iTime));\n\n    // This conversion bit was pulled out to simplify things\n    // It is necessary for the parametrization to match the implicit form\n    float pn = 2.0 / n;\n\n    // Squircle\n    float squircleAngle = atan(pow(abs(uv.y), 1.0 / pn) * sign(uv.y), pow(abs(uv.x), 1.0 / pn) * sign(uv.x));\n\n    #ifndef REPARAMETRIZE\n    float arclen = TAU * r;\n    #else\n    float arclen = arcSquircle(TAU, r, pn);\n    squircleAngle = arcSquircle(squircleAngle, r, pn);\n    #endif\n\n    float dashesMask = mod(floor(squircleAngle / arclen * 50.0 - 2.5 * iTime), 2.0);\n    drawSDF(sdSquircle(uv, r, n), vec3(0.0), dashesMask);\n\n    // Points moving around the perimeter\n    #ifndef REPARAMETRIZE\n    for (float t=0.0; t < TAU; t += TAU / 50.0) {\n        drawSDF(sdDisk(uv, pSquircle(t + time, r, pn), 0.025), vec3(1.0, 0.4, 0.5), 0.5 + 0.5 * sin(iTime));\n    }\n    #else\n    for (float t=0.0; t < arclen; t += arclen / 50.0) {\n        drawSDF(sdDisk(uv, pSquircle(invArcSquircle(t + time, r, pn), r, pn), 0.025), vec3(1.0, 0.4, 0.5), 0.5 + 0.5 * sin(iTime));\n    }\n    #endif\n\n    //drawSDF(abs(uv.y - arcSquircle(uv.x, r, n)), vec3(0.0));\n    //drawSDF(abs(uv.y - invArcSquircle(uv.x, r, n)), vec3(0.0));\n\n    // Vignette (kinda)\n    uv *= 0.5;\n    float dd = dot(uv, uv);\n    color -= 0.5 * dd * dd;\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}