{
    "Shader": {
        "info": {
            "date": "1482742375",
            "description": "forking to tweak and optimize on mobile\noriginal : https://www.shadertoy.com/view/MscGzj",
            "flags": 1,
            "hasliked": 0,
            "id": "4tyXz1",
            "likes": 5,
            "name": "green void (tweaked)",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "MobileForks01",
            "viewed": 670
        },
        "renderpass": [
            {
                "code": "// various functions from:\n// http://mercury.sexy/hg_sdf/\n// https://www.shadertoy.com/view/Xds3zN\n\n#define PI 3.14159265\n\nfloat fScene(in vec3 p);\n\n///\\todo should really just change this to use the analytical normal from the sphere\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.025, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    fScene(pos+eps.xyy) - fScene(pos-eps.xyy),\n\t    fScene(pos+eps.yxy) - fScene(pos-eps.yxy),\n\t    fScene(pos+eps.yyx) - fScene(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\nmat3 persp(in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\nfloat clamp01(float value)\n{\n    return clamp(value, 0.0, 1.0);\n}\n\nfloat fSphere(in vec3 p, float radius)\n{\n    return length(p) - radius;\n}\n\n// Repeat in three dimensions\nvec3 pMod3(inout vec3 p, vec3 size) {\n\tvec3 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn c;\n}\n\nfloat fScene(in vec3 p)\n{\n    p.z += iTime;\n    pMod3(p, vec3(3.0));\n    return fSphere(p, 0.5);\n}\n\nvec4 render(in vec3 ro, in vec3 rd)\n{\n    const float tMax = 100.0;\n    const float epsilon = 0.001;\n    \n    float t = 1.0;\n    \n    const vec3 bg = vec3(0);\n    vec3 col = bg;\n    \n    vec3 lightP = ro;\n    \n    for(int n = 0;n < 100; ++n)\n    {\n        vec3 p = ro + rd * t;\n        \n    \tfloat d = fScene(p);\n        \n        if (d > tMax) break;\n        if (d < epsilon)\n        {\n            vec3 light = normalize(lightP - p);\n            vec3 normal = calcNormal(p);\n            \n            // intensity of diffuse light\n            float diff = clamp01(dot(light, normal));\n            \n            // intensity of specular - phong\n            float shininess = 72.0;\n            vec3 reflection = reflect(light, normal);\n            float spec = pow(max(dot(rd, reflection), 0.0), shininess);\n             \n            float lightPower = 1.0 / (0.5 + length(lightP - p)*0.125);\n            \n            col = vec3(0,.1,0);\n            col += diff * vec3(0,0.8,0.0) * lightPower + spec * vec3(1,1,1) * lightPower;\n            break;\n        }\n\n        t += d;\n    }\n    \n    float fogStart = 10.0;\n    float fogDistance = length(rd * (fogStart - max(fogStart, t)));\n    float fogDensity = 0.18;\n    float fogAmount = 1.0 - exp( -fogDistance*fogDensity );\n    vec3  fogColor = vec3(0.);\n    col = mix( col, fogColor, fogAmount );\n    \n    col = pow(col, vec3(0.4545));\n    return vec4(col, 1.0);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir ) \n{\n\tfragColor = render(fragRayOri, fragRayDir);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // ray origin\n    vec3 ro = vec3(0.0,1.0,0.0);\n    \n    // mouse look\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 look = 100.0*normalize(vec3(sin(-m.x*PI), 0.7*m.y, cos(-m.x*PI)));\n    \n    mat3 ca = persp(ro,look,0.0);\n        \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(uv.xy,2.0) );\n\n\tfragColor = render(ro, rd);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}