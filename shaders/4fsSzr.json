{
    "Shader": {
        "info": {
            "date": "1704867613",
            "description": "A multiscale truchet weave pattern using triangle waves instead of trigonometric functions.",
            "flags": 8,
            "hasliked": 0,
            "id": "4fsSzr",
            "likes": 8,
            "name": "Neon truchet waves (music)",
            "published": 3,
            "tags": [
                "music",
                "truchet",
                "multiscale",
                "weave"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "#define triwave(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\n\nvec4 t1(vec2 c, vec2 p){\n    return triwave((.5 - length( min(p=fract(p*sign(triwave1(c*c.y))), 1.-p.yx) )) * vec4(22,7,5,0));\n}\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec2 p = (I/1e2);\n    vec4 t_ = t1(ceil(p),p);\n    vec4 t1_ = vec4(0.),t2_ = vec4(0.),\n    t3_ = vec4(0.);\n    float scale = 2.;\n    \n    for(int i = 0; i < 3;i++){\n        t1_ = t1(ceil(p/scale/64.+iTime/64.),p/scale/64.+iTime/32.);\n        t2_ = t1(ceil(p/(scale)-t1_.x),p/(scale)-t1_.y);\n        scale *= 2.;\n        \n        //scale *= 2.;\n        t3_ = 1.-min(t_,t2_);\n        if(\n            //Lots of interesting patterns here!\n            t3_.y>t1_.y\n            //t_.y>t_.x\n            //t1_.y>t1_.z\n            //1.-t_.z>t1_.y||1.-t_.y>t1_.x||1.-t_.x>t1_.z\n\n            //t1_.y>t_.y||t1_.z>t_.z||t1_.x>t_.x\n            //t_.y<t1_.y\n\n            //t_.x>t1_.x&&t_.y<t1_.x\n            //t_.z>.5||t_.y>.5||t_.z>.5\n            //t1_.z>t_.z||t1_.y>t_.y||t1_.z>t_.z\n        ) t_ = 1.-t2_;\n    }\n    O = t3_;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/4cXGzH\n\nint collatz(int initial, int steps){\n    //hailstone numbers\n    //makes some interesting rhythms\n    for(int i = 0; i < steps; i++){\n        if(initial%2==0) initial /= 2;\n        else initial = initial*3+1;\n    }\n    return initial;\n}\nfloat collatz(float initial, float steps){\n    return float(collatz(int(initial),int(steps)));\n}\n\nfloat mod1(float a,float b){\n    //a += mod(floor(a/16.),16.);\n\n    //a += collatz(mod(a/4.,b),8.);\n    //a += collatz(mod(a/4.,8.),b);\n    \n    return\n        mod(a,b)\n        //mod(a+mod(a,b+3.),b)\n        //mod(a+4.*floor(mod(a/4.,b)),b)\n    ;\n}\n\nvoid distort(inout float a, inout float b){\n    for(float i = 1.; i < mod(floor(a/b),5.); i++){\n        a /= 2.0;\n        //a /= 1.0+mod(floor(a),2.);\n        a += mod1(floor(a/2.),b)*i;\n    }\n}\n\nfloat fmod(float a, float b, float tempo){\n    //a += mod(floor(a/16.),16.);\n    \n    //distort(a,b);\n    \n    float\n    t1 =\n        mod1(floor(b/2.),2.)\n        //mod1(floor(b/2.+a/4.),2.)\n        //mod1(floor(b/2.)+floor(a/2.),2.),\n    ,\n    a1 =\n        floor(a/tempo+t1),\n    a0 =\n        //a1\n        a1+floor(a1/2.)*4.\n        //a1+floor(a1/4.)*3.+floor(a1/3.)*4.\n    ,\n    a2 =\n        mod1(a0,3.)\n        //mod1(a1*2.,3.)\n    ,\n    a3 =\n        mod1(a0,4.)\n    ;\n    return\n        mod1(a0-a2-a3,b)\n        //mod1(a1-a2-a3+2.,b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return fmod(a,b,1.);\n}\n\nfloat prime_rhythm(float time){\n    //time += mod(floor(time/16.),16.);\n\n    //time += floor(time/8.);\n    return (1.+fmod(time/4.,2.))/(1.+fmod(time/2.,2.));\n}\n\nfloat fmod1(float a, float b){\n\n    //a += collatz(a/8./8.,b);\n    return\n        fmod(a,b)\n        //fmod(a+4.+floor(a/4.)*4.,b)\n    ;\n}\n\n#define fract1(a) (1.-pow(fract(-a),2.))\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\nvec2 banjo(vec2 a, vec2 nb){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./6.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,6./4.));\n}\n\nvec2 harp(vec2 a, vec2 nb){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,2.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.));\n}\n\nvec2 synth_drum(vec2 a, vec2 nb,float m2){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./m2)\n  + synth(1./8.,a,1./4.,1.,nb*2.,m2/4.));\n}\n\nvec2 oud(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 steel_drum(vec2 a, vec2 nb){\nreturn a/16./4.*abs(synth(1./2.,a,1./8.,1.,nb*4.,1.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.))\n;\n}\n\nvec2 gamelan(vec2 a, vec2 nb){\nreturn\na/16./4.*abs(synth(1./4.,a,1./8.,1.,nb*2.,1./2.)\n  +.5*synth(1./4.,a,1./4.,1.,nb*2.,1./2.)) \n;\n}\n\nvec2 sitar1(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      -log(1./4.+a*(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 sitar(vec2 a, vec2 nb){\nreturn a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.)));\n}\n\nvec2 note1(vec2 rhythm,float attack,float duration)\n{\n\nreturn -vec2((log(attack+fract1(rhythm.x)/2./duration)),(log(attack+fract1(rhythm.y)/4./duration)));\n\n}\n\nvec2 mainSound1(float frequency,int samp, float time,float scale,float duration){\n  //time += mod(floor(time/16.),16.);\n\n  float s1 =\n      8.,\n  tempo1 =\n      prime_rhythm(time)*prime_rhythm(time/2.)*2.\n      //prime_rhythm(time+floor(time/8.))*prime_rhythm(time/2.)*2.\n  ,t = s1*time/4./tempo1,\n  t7 =\n      (1.+fmod(t/8.,2.))\n      //(1.+fmod(t/8.+mod(t/8.,2.),2.))\n  ,\n  t4 = t/prime_rhythm(time+11.)/t7,\n  t1 =\n       //fmod(t4,2.)\n       fmod(t4+floor(time/8.),2.)\n  ,\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 =\n      //(1.+fmod(t5,2.))\n      (1.+fmod(t5+floor(time/4./4./4.),2.))\n\n  ,\n  t6 = time*8./t3,\n  m3 =\n      //floor(fmod1(t6,s1/2.)/2.)\n      floor(fmod1(t6+floor(time/8./4.),s1/2.)/2.)\n\n  ,\n  m2 =\n      1. + fmod1(t/t3/2.,s1/2.)\n      //1. + fmod1(t/t3/2.+floor(time/4./4.),s1/2.)\n  ,note = (\n      (m3+m2-t1*4.)\n      //mod(m3+m2-t1*4.-floor(time/4.)*4.,8.)-4.\n      //(m3+m2-t1*4.+fmod(time/2.,2.))\n      //(m3+m2+t1*4.-2.)\n      //(m3+m2-t1*4.)+mod(m3,2.)\n  )/7.\n  ,attack=1./64.\n  ,tempo2=2./(1.+fmod(time/8.,2.))\n  ;\n  vec2\n  rhythm = vec2(t/2./frequency/prime_rhythm(time+14.),t/frequency/prime_rhythm(time+7.))\n  ,a=\n      //note1(rhythm,attack,duration)\n      note1(rhythm*tempo2,attack*tempo2*2.,duration*tempo2)\n  ,\n  nb =\n      t*vec2(pow(2.,note+scale),pow(2.,note+scale))*tempo1\n      \n      //distortion\n      //t*vec2(pow(2.,note+scale),pow(2.,note+a.y/128./128./16.+scale))*tempo1/2.\n\n  ;\n  return\n      //oud\n      //oud(a,nb)\n      sitar1(a,nb)\n\n      //sitar\n      //a/16./2.*abs(\n      //synth(1./4.,a,0.,1.,nb*2.,1./2.)\n      //-.5*synth(1./8.,a,1./8.,1.,nb,1./2.))/2.\n      \n      //sitar\n      //a/16./2.*abs(\n      //synth(1./4.,a,0.,1.,nb*2.,1./2.)\n      //+.5*synth(1./8.,a,1./8.,1./duration,nb,1./2.))/2.\n      \n      //sitar\n      //abs(oud(a,nb)-oud(a,nb*2.)/2.)\n      \n      //banjo\n      //a/16./4.*abs(\n      //synth(1./4.,a,1./8.,1.,nb*4.,4./6.)\n      //+ synth(1./8.,a,1./4.,1.,nb*2.,6./4.))\n      \n      //synth drum\n      //a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))*4.))\n      //+ log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.)))\n  ;\n  \n}\n\nvec2 mainSound1(int samp, float time,float scale){\n    return mainSound1(1.,samp,time,scale,1.);\n}\n\nvec2 mainSound(int a,float b){\n    return\n        //6.*abs(mainSound1(1./4.,a,b/4.,8.25,1./2.)+mainSound1(1./8.,a,b/8.,8.25,1.)/2.)\n        6.*(mainSound1(1./2.,a,b/4.,7.25,1./2.)+mainSound1(1.,a,b/2.,7.25,1.))\n        //6.*(mainSound1(2.,a,b/4.,7.25,1./2.)+mainSound1(1.,a,b/2.,7.25,1.))\n        //6.*(mainSound1(1./2.,a,b/4.,7.25,2.)+mainSound1(1.,a,b/2.,7.25,1.))\n        //6.*(mainSound1(1./4.,a,b/8.,7.25,1./2.)+mainSound1(1./2.,a,b/4.,7.25,1.)+mainSound1(1.,a,b/2.,7.25,2.))\n        ;\n\n    ;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}