{
    "Shader": {
        "info": {
            "date": "1614086050",
            "description": "Bug wanders autonomously; use the buttons to take control.",
            "flags": 32,
            "hasliked": 0,
            "id": "3tKBzw",
            "likes": 47,
            "name": "Controllable Hexapod 2",
            "published": 3,
            "tags": [
                "interactive",
                "robot",
                "walk"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 4154
        },
        "renderpass": [
            {
                "code": "// \"Controllable Hexapod 2\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec4 Loadv4 (int idVar);\n\n#define VAR_ZERO min (iFrame, 0)\n\nvec3 footPos[6], legAng[6], bdyPos, ltPos[3], ltCol[3], qHit;\nvec2 hipPos[6], kneePos[6];\nfloat tCur, dstFar, bdyRad, legLen, walkDir, hdAng;\nint idObj;\nbool doSh;\nconst int idLeg = 1, idPiv = 2, idFoot = 3, idBod = 4, idAx = 5, idNek = 6, idRad = 7, idLmp = 8,\n   idHead = 9, idEye = 10, idAnt = 11;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvoid BugGeom ()\n{\n  float dr, dxz, dy, ll;\n  ll = 4. * legLen * legLen;\n  for (int m = VAR_ZERO; m < 6; m ++) {\n    dr = length (footPos[m].xz);\n    hipPos[m] = bdyRad * vec2 (sin (pi * float (2 * m + 1) / 6. + vec2 (0.5 * pi, 0.)));\n    legAng[m].x = - atan (footPos[m].z, footPos[m].x);\n    dxz = 0.5 * dr + bdyPos.y * sqrt (ll / dot (footPos[m], footPos[m]) - 0.25);\n    dy = sqrt (ll - dxz * dxz);\n    kneePos[m] = vec2 (dxz, dy);\n    legAng[m].y = atan (dxz, dy);\n    legAng[m].z = atan (dr - dxz, - sqrt (ll - (dr - dxz) * (dr - dxz)));\n  }\n}\n\nfloat BugDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  float d, y, a;\n  for (int m = VAR_ZERO; m < 6; m ++) {\n    q = p;\n    q.xz = Rot2D (q.xz - hipPos[m], legAng[m].x);\n    q.xy = Rot2D (q.xy, legAng[m].y);\n    d = PrRoundCylDf (q, 0.12, 0.02, 0.08);\n    DMINQ (idPiv);\n    q.y -= legLen;\n    y = q.y / legLen;\n    d = PrCylDf (vec3 (abs (q.xz) - 0.032 * (1. - 0.375 * y), q.y), 0.02 * (1. + 0.1 * abs (cos (16. * pi * y))), legLen);\n    DMINQ (idLeg);\n    q.y -= legLen;\n    d = PrRoundCylDf (q, 0.05, 0.02, 0.03);\n    DMINQ (idPiv);\n    q.xy = Rot2D (q.xy, legAng[m].z - legAng[m].y);\n    q.y -= legLen;\n    y = q.y / legLen;\n    d = PrCylDf (vec3 (q.x, abs (q.z) - 0.02 * (1. - 0.25 * y), q.y), 0.012 * (1. + 0.1 * abs (cos (16. * pi * y))), legLen);\n    DMINQ (idLeg);\n    q.y -= legLen;\n    q.xy = Rot2D (q.xy, - legAng[m].z);\n    q.y -= 0.04 * legLen;\n    d = PrCylDf (q.xzy, 0.08, 0.04 * legLen);\n    DMINQ (idFoot);\n  }\n  q = p;\n  q.xz = Rot2D (q.xz, pi / 6.);\n  qq = q;\n  a = atan (q.z, - q.x) / (2. * pi);\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * a + 0.5) / 6.));\n  q.x -= - bdyRad + 0.1;\n  d = PrRoundCylDf (q.xzy, 0.13, 0.02, 0.15);\n  DMINQ (idAx);\n  q = qq;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (18. * a + 0.5) / 18.));\n  q.x -= - bdyRad;\n  d = PrRoundCylDf (q.yzx, 0.025, 0.01, 0.03);\n  q = vec3 (q.yz, a).xzy;\n  DMINQ (idLmp);\n  q = p;\n  d = min (PrTorusDf (vec3 (q.xz, abs (q.y) - 0.06), 0.015, bdyRad - 0.016),\n      length (vec2 (q.y - 0.2, abs (abs (q.z) - 0.36) - 0.16)) - 0.012);\n  d = SmoothMax (PrRoundCylDf (q.xzy, bdyRad - 0.12, 0.1, 0.1), - d, 0.01);\n  d = max (d, - PrSphDf (vec3 (mod (q.x + 0.06, 0.12) - 0.06, q.y - 0.2, abs (q.z) - 0.36), 0.025));\n  DMINQ (idBod);\n  q = p;\n  q.xy -= vec2 (-0.7 * bdyRad, 0.2);\n  d = PrCylDf (q.xzy, 0.05, 0.08);\n  DMINQ (idRad);\n  q.y -= 0.22;\n  q.xz = Rot2D (q.xz, 2. * tCur);\n  d = PrTorusDf (q, 0.02, 0.15);\n  DMINQ (idRad);\n  q = p;\n  q.xy -= vec2 (0.7 * bdyRad, 0.25);\n  d = PrCylDf (q.xzy, 0.12, 0.08);\n  DMINQ (idNek);\n  q.y -= 0.24;\n  q.xz = Rot2D (q.xz, hdAng);\n  d = PrRoundBoxDf (q, vec3 (0.3, 0.2, 0.27) - 0.1, 0.1);\n  d = max (d, - PrCylDf (vec3 (q.x - 0.3, q.y + 0.07, q.z).xzy, 0.1, 0.02));\n  d = max (d, - min (PrSphDf (vec3 (q.x, abs (q.yz)) - vec3 (-0.3, 0.05, 0.1), 0.03),\n     PrSphDf (vec3 (q.x, abs (q.yz)) - vec3 (-0.15, 0.05, 0.27), 0.03)));\n  DMINQ (idHead);\n  qq = q;\n  q.z = abs (q.z);\n  q -= vec3 (0.15, 0.25, 0.15);\n  q.yz = Rot2D (q.yz, -0.1 * pi);\n  q.xy = Rot2D (q.xy, 0.05 * pi);\n  d = min (PrCylDf (q.xzy, 0.02, 0.25), PrRoundCylDf (vec3 (q.xz, q.y - 0.26), 0.06, 0.01, 0.01));\n  DMINQ (idAnt);\n  q = qq;\n  q.xy -= vec2 (0.1, 0.08);\n  d = PrRoundCylDf (q.xzy, 0.3, 0.02, 0.04);\n  DMINQ (idEye);\n  return 0.95 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;\n  q -= bdyPos;\n  if (! doSh) d = PrCylDf (q.xzy, bdyRad + 1.6, 1.1);\n  if (doSh || d < 0.1) {\n    q.xz = Rot2D (q.xz, - walkDir);\n    dMin = BugDf (q, dMin);\n  } else dMin = d;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  doSh = true;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.001 || d > dMax) break;\n  }\n  doSh = false;\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, int wgSel)\n{\n  vec4 wgBx[4], w1, w2;\n  vec2 s;\n  float asp, d, w;\n  bool isCol;\n  asp = canvas.x / canvas.y;\n  w1 = vec4 (0.42 * asp, -0.35, 0.025, 0.);\n  w2 = vec4 (0.06, 0., 0., 0.);\n  wgBx[0] = w1 + w2.yxzw;\n  wgBx[1] = w1 - w2.yxzw;\n  wgBx[2] = w1 - w2;\n  wgBx[3] = w1 + w2;\n  for (int k = 0; k < 4; k ++) {\n    s = 0.5 * uv - wgBx[k].xy;\n    w = (length (s) - wgBx[k].z) * canvas.y;\n    isCol = false;\n    if (w < 1.5) {\n      isCol = (abs (w) < 1.5);\n      if (! isCol) {\n        if (k == 0) d = max (abs (s.x) + s.y, -2. * s.y);\n        else if (k == 1) d = max (abs (s.x), abs (s.y));\n        else if (k == 2) d = max (abs (s.y) - s.x, 2. * s.x);\n        else if (k == 3) d = max (abs (s.y) + s.x, -2. * s.x);\n        isCol = (d < 0.4 * wgBx[k].z);\n      }\n    }\n    if (isCol) col = mix (col, (k == wgSel) ? vec3 (1.) : vec3 (0.3), 0.7);\n  }\n  return col;\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4, col4B, col4H;\n  float s;\n  s = length (qHit.xz);\n  col4B = vec4 (0.95, 0.95, 1., 0.2);\n  col4H = vec4 (0.9, 0.95, 0.9, 0.2);\n  if (idObj == idLeg) col4 = vec4 (1., 0.8, 0.8, 0.2);\n  else if (idObj == idPiv) col4 = col4B * (0.5 + 0.5 * smoothstep (0., 0.01, length (qHit.xy) - 0.03));\n  else if (idObj == idAx) col4 =  col4B * (0.5 + 0.5 * smoothstep (0., 0.01, s - 0.08));\n  else if (idObj == idBod) col4 = col4B;\n  else if (idObj == idHead) col4 = mix (col4H, vec4 (1., 0., 0., -1.), step (abs (qHit.y + 0.07), 0.02) *\n     step (0., qHit.x) * step (abs (qHit.z), 0.1));\n  else if (idObj == idAnt) col4 = mix (col4B * (0.6 + 0.4 * SmoothBump (0.1, 0.9, 0.05, mod (32. * qHit.y, 1.))),\n     vec4 (1., 1., 0., -1.), step (0.26, qHit.y) * step (s, 0.05) * step (-0.5, sin (8. * pi * tCur)));\n  else if (idObj == idEye) col4 = mix (col4H, vec4 (0., 0., 1., -1.), step (-0.12, qHit.x) *\n     step (cos (16. * atan (qHit.z, qHit.x)), 0.7) * step (abs (qHit.y), 0.03));\n  else if (idObj == idFoot) col4 = 0.8 * col4B * (0.5 + 0.5 * smoothstep (0., 0.01, s - 0.04));\n  else if (idObj == idNek) col4 = col4H;\n  else if (idObj == idRad) col4 = 0.9 * col4B;\n  else if (idObj == idLmp) col4 = mix (col4B, vec4 (HsvToRgb (vec3 (mod (qHit.y + 0.3 * tCur, 1.), 0.8, 1.)), -1.),\n     step (s, 0.03));\n  return col4;\n}\n\n#define REFLECT 0 // optional reflection\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo, ltDir, ltAx, c;\n  float dstObj, nDotL, sh, att, ltDst;\n  BugGeom ();\n  doSh = false;\n  dstObj = ObjRay (ro, rd);\n#if REFLECT\n  if (dstObj >= dstFar && rd.y < 0.) {\n    roo = ro;\n    ro += (- ro.y / rd.y) * rd;\n    if (length (max (abs (mod (ro.xz + 0.5, 1.) - 0.5) - 0.4, 0.)) < 0.05) {\n      rd = reflect (rd, vec3 (0., 1., 0.));\n      ro += 0.01 * rd;\n      dstObj = ObjRay (ro, rd);\n    } else ro = roo;\n  }\n#endif\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = ObjCol ();\n  } else if (rd.y < 0.) {\n    dstObj = - ro.y / rd.y;\n    ro += dstObj * rd;\n    vn = vec3 (0., 1., 0.);\n    col4 = vec4 (0.7, 0.7, 0.7, 0.) * (1. - 0.1 * Noisefv2 (256. * ro.xz)) * (1. - 0.2 * Fbm2 (4. * ro.xz));\n    col4.rgb = mix (col4.rgb, vec3 (0.5), smoothstep (0.05, 0.08,\n       length (max (abs (mod (ro.xz + 0.5, 1.) - 0.5) - 0.4, 0.))));\n  }\n  if (dstObj < dstFar) {\n    if (col4.a >= 0.) {\n      col = vec3 (0.);\n      for (int k = VAR_ZERO; k < 3; k ++) {\n        ltDir = ltPos[k] - ro;\n        ltDst = length (ltDir);\n        ltDir /= ltDst;\n        ltAx = normalize (ltPos[k] - vec3 (bdyPos.xz, 0.).xzy);\n        att = smoothstep (0., 0.01, dot (ltDir, ltAx) - 0.985);\n        sh = (dstObj < dstFar) ? ObjSShadow (ro + 0.01 * vn, ltDir, ltDst) : 1.;\n        nDotL = max (dot (vn, ltDir), 0.);\n        if (col4.a > 0.) nDotL *= nDotL * nDotL;\n        c = att * ltCol[k] * (col4.rgb * (0.15 + 0.85 * sh * nDotL) +\n           col4.a * step (0.95, sh) * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.));\n        col += pow (c, vec3 (2.));\n      }\n      col = pow (col, 1. / vec3 (2.));\n    } else col = col4.rgb * (0.2 + 0.8 * max (0., - dot (vn, rd)));\n  } else col = vec3 (0.);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az;\n  int wgSel;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  hdAng = 0.2 * pi * sin (tCur);\n  legLen = 0.5;\n  for (int k = VAR_ZERO; k < 6; k ++) {\n    stDat = Loadv4 (k);\n    footPos[k] = stDat.xyz;\n  }\n  stDat = Loadv4 (6);\n  bdyPos = stDat.xyz;\n  walkDir = stDat.w;\n  stDat = Loadv4 (9);\n  bdyRad = stDat.y;\n  stDat = Loadv4 (10);\n  az = stDat.x;\n  el = stDat.y;\n  wgSel = int (stDat.z);\n  vuMat = StdVuMat (el, az);\n  rd = vuMat * normalize (vec3 (uv, 5.));\n  ro = bdyPos * vec3 (1., 0., 1.) + vuMat * vec3 (0., 0.2, -10.);\n  dstFar = 30.;\n  for (int k = VAR_ZERO; k < 3; k ++) {\n    ltPos[k] = vec3 (0., 30., 0.);\n    ltPos[k].xy = Rot2D (ltPos[k].xy, 0.25 * pi * (1. + 0.2 * sin (0.05 * pi * tCur - pi * float (k) / 3.)));\n    ltPos[k].xz = Rot2D (ltPos[k].xz, 0.1 * pi * tCur + pi * float (k) / 3.);\n    ltPos[k].xz += bdyPos.xz;\n  }\n  ltCol[0] = vec3 (1., 0.5, 0.5);\n  ltCol[1] = ltCol[0].gbr;\n  ltCol[2] = ltCol[0].brg;\n  dstFar = 30.;\n  col = ShowScene (ro, rd);\n  col = ShowWg (uv, canvas, col, wgSel);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Controllable Hexapod 2\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 footPos[6], bdyPos;\nfloat tCur, bdyRad, bdyHt, footSpeedV, footDir, stepCount, stepLim, \n   wkPhase, wkChange, walking, walkDir, turnDir, turnDirN;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid Step ()\n{\n  vec2 b, c;\n  float stepLimM, walkSpeed, turnSpeed, u, mm;\n  stepLimM = 64.;\n  walkSpeed = 0.8 / stepLimM;\n  turnSpeed = 0.5 * walkSpeed;\n  if (stepCount == 0.) {\n    if (wkChange != 0. && (wkPhase == 0. || wkPhase == 2.)) {\n      ++ wkPhase;\n      wkChange = 0.;\n    }\n    if (wkPhase == 2. && turnDir != turnDirN) {\n      ++ wkPhase;\n      wkChange = 1.;\n    }\n    if (wkPhase == 1. || wkPhase == 4.) walking = 1. - walking;\n    stepLim = stepLimM;\n    if (wkPhase == 1. || wkPhase == 3.) stepLim *= 0.5;\n    else if (wkPhase == 0. || wkPhase == 4.) stepLim = 0.;\n    if (stepLim > 0.) {\n      footSpeedV = 0.6 * bdyHt / (stepLim * 0.5);\n      if (wkPhase == 1. || wkPhase == 3.) footSpeedV *= 0.5;\n    }\n    if (wkPhase == 1.) {\n      turnDir = turnDirN;\n      footDir = 1.;\n    } else footDir = - footDir;\n    if (wkPhase == 4.) {\n      wkPhase = 0.;\n      turnDir = 0.;\n    }\n    if (wkPhase == 1. || wkPhase == 3.) ++ wkPhase;\n    stepCount = stepLim;\n  }\n  if (walking == 0. && turnDir == 0.) {\n    bdyPos.y = max (0.97 * bdyPos.y, 0.6 * bdyHt);\n    for (int m = 0; m < 6; m ++) footPos[m].y = - bdyPos.y;\n  } else if (bdyPos.y != bdyHt) {\n    bdyPos.y = min (1.1 * bdyPos.y, bdyHt);\n    for (int m = 0; m < 6; m ++) footPos[m].y = - bdyPos.y;\n  }  \n  if (stepLim > 0.) {\n    -- stepCount;\n    if (turnDir == 0.) {\n      bdyPos.xz += walkSpeed * sin (walkDir + vec2 (0.5 * pi, 0.));\n    } else {\n      walkDir = mod (walkDir + turnSpeed * turnDir, 2. * pi);\n      c = sin (turnSpeed * turnDir + vec2 (0.5 * pi, 0.));\n    }\n    for (int m = 0; m < 6; m ++) {\n      mm = float (m);\n      u = footDir * (2. * mod (mm, 2.) - 1.);\n      if (u > 0.) footPos[m].y += footSpeedV * sign (stepLim * 0.5 - 0.5 - stepCount);\n      if (turnDir == 0.) {\n        footPos[m].x += u * walkSpeed;\n      } else {\n        b = bdyRad * sin (pi * (2. * mm + 1.) / 6. + vec2 (0.5 * pi, 0.));\n        footPos[m].xz = Rot2Cs (footPos[m].xz + b, vec2 (c.x, u * c.y)) - b;\n      }      \n    }\n  }\n}\n\nvoid Init ()\n{\n  float footDist;\n  bdyRad = 0.8;\n  bdyHt = 0.6;\n  bdyPos = vec3 (0., bdyHt, 0.);\n  footDist = 1.1;\n  for (int m = 0; m < 6; m ++) {\n    footPos[m].xz = footDist * sin (pi * (2. * float (m) + 1.) / 6. + vec2 (0.5 * pi, 0.));\n    footPos[m].y = - bdyPos.y;\n  }\n  footSpeedV = 0.;\n  footDir = 0.;\n  stepCount = 0.;\n  stepLim = 0.;\n  wkPhase = 0.;\n  wkChange = 0.;\n  walking = 0.;\n  walkDir = - 0.5 * pi;\n  turnDir = 0.;\n  turnDirN = 0.;\n}\n\nvoid SetMode (int m)\n{\n  if (m == 0) {\n    turnDirN = 0.;\n    if (walking == 0.) wkChange = 1.;\n  } else if (m == 1) {\n    turnDirN = 0.;\n    if (walking != 0.) wkChange = 1.;\n  } else if (m == 2) {\n    turnDirN = 1.;\n    if (turnDir != turnDirN && walking == 0.) wkChange = 1.;\n  } else if (m == 3) {\n    turnDirN = -1.;\n    if (turnDir != turnDirN && walking == 0.) wkChange = 1.;\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[4], mPtr, mPtrP, stDat, w1, w2;\n  vec2 canvas, iFrag;\n  float asp, el, az, autMode, tChMode;\n  int pxId, wgSel, wgReg, im;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 12) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  wgReg = -2;\n  doInit = false;\n  autMode = 1.;\n  tChMode = tCur;\n  if (iFrame <= 5) {\n    mPtrP = mPtr;\n    az = 0.;\n    el = 0.;\n    wgSel = -1;\n    doInit = true;\n  } else {\n    for (int k = 0; k < 6; k ++) {\n      stDat = Loadv4 (k);\n      footPos[k] = stDat.xyz;\n    }\n    stDat = Loadv4 (6);\n    bdyPos = stDat.xyz;\n    walkDir = stDat.w;\n    stDat = Loadv4 (7);\n    walking = stDat.x;\n    footDir = stDat.y;\n    turnDir = stDat.z;\n    turnDirN = stDat.w;\n    stDat = Loadv4 (8);\n    stepCount = stDat.x;\n    stepLim = stDat.y;\n    wkPhase = stDat.z;\n    wkChange = stDat.w;\n    stDat = Loadv4 (9);\n    footSpeedV = stDat.x;\n    bdyRad = stDat.y;\n    bdyHt = stDat.z;\n    tChMode = stDat.w;\n    stDat = Loadv4 (10);\n    az = stDat.x;\n    el = stDat.y;\n    wgSel = int (stDat.z);\n    autMode = stDat.w;\n    mPtrP = Loadv4 (11);\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    w1 = vec4 (0.42 * asp, -0.35, 0.025, 0.);\n    w2 = vec4 (0.06, 0., 0., 0.);\n    wgBx[0] = w1 + w2.yxzw;\n    wgBx[1] = w1 - w2.yxzw;\n    wgBx[2] = w1 - w2;\n    wgBx[3] = w1 + w2;\n    for (int k = 0; k < 4; k ++) {\n      if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) < wgBx[k].z) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n    az = 0.02 * pi * tCur;\n    el = -0.15 * pi + 0.07 * pi * sin (0.033 * pi * tCur);\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {   \n      az = 2. * pi * mPtr.x;\n      el = -0.1 * pi + pi * mPtr.y;\n      el = clamp (el, -0.4 * pi, -0.01 * pi);\n    }\n  } else if (mPtrP.z <= 0.) {\n    autMode = 0.;\n    tChMode = tCur + 10.;\n    SetMode (wgSel);\n  }\n  if (tCur > tChMode) autMode = 1.;\n  if (autMode != 0. && tCur > tChMode) {\n    tChMode = tCur + 2.;\n    im = int (100. * Hashff (17. * tChMode));\n    tChMode += 3. * Hashff (23. * tChMode);\n    if (im < 60) im = 0;\n    else if (im < 75) im = 2;\n    else if (im < 90) im = 3;\n    else im = 1;\n    SetMode (im);\n  }\n  if (doInit) Init ();\n  else Step ();\n  if (pxId < 6) {\n    for (int k = 0; k < 6; k ++) {\n      if (pxId == k) stDat = vec4 (footPos[k], 0.);\n    }\n  }\n  else if (pxId == 6) stDat = vec4 (bdyPos, walkDir);\n  else if (pxId == 7) stDat = vec4 (walking, footDir, turnDir, turnDirN);\n  else if (pxId == 8) stDat = vec4 (stepCount, stepLim, wkPhase, wkChange);\n  else if (pxId == 9) stDat = vec4 (footSpeedV, bdyRad, bdyHt, tChMode);\n  else if (pxId == 10) stDat = vec4 (az, el, float (wgSel), autMode);\n  else if (pxId == 11) stDat = mPtr;\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}