{
    "Shader": {
        "info": {
            "date": "1689278977",
            "description": "A bunch of blobs that like each other in a line",
            "flags": 0,
            "hasliked": 0,
            "id": "cslBWH",
            "likes": 7,
            "name": "String of blobs",
            "published": 3,
            "tags": [
                "blobs"
            ],
            "usePreview": 0,
            "username": "Larbagar",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535897932384626433832795\n#define threshold 0.5\n#define range 0.2\n\nfloat blobFunc(float dist){\n    return pow(max(1. - dist, 0.), 2.);\n}\n\nvec2 path(float t){\n    return vec2(sin(t*2.*PI), sin(4.*t*PI)/2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    float val1 = 0.;\n    float val2 = 0.;\n    float val3 = 0.;\n    \n    int points = 20;\n    for(int i = 0; i < points; i++){\n        float normalIndex = float(i)/float(points);\n        float size = 0.1 + normalIndex*0.2;\n        float time = iTime*0.5 + normalIndex*0.25;\n        \n        \n        float pointDist1 = time;\n        vec2 pos1 = path(pointDist1);\n        float dist1 = length(pos1 - uv);\n        val1 += blobFunc(dist1/size);\n        \n        \n        float pointDist2 = time - 2./3.;\n        vec2 pos2 = path(pointDist2);\n        float dist2 = length(pos2 - uv);\n        val2 += blobFunc(dist2/size);\n        \n        float pointDist3 = time - 4./3.;\n        vec2 pos3 = path(pointDist3);\n        float dist3 = length(pos3 - uv);\n        val3 += blobFunc(dist3/size);\n    }\n\n    float shape1 = smoothstep(threshold - range, threshold, val1);\n    float glow1 = (1. - shape1)*val1/threshold;\n\n    float shape2 = smoothstep(threshold - range, threshold, val2);\n    float glow2 = (1. - shape2)*val2/threshold;\n\n    float shape3 = smoothstep(threshold - range, threshold, val3);\n    float glow3 = (1. - shape3)*val3/threshold;\n    \n    col += shape1;\n    col += vec3(0., 0.5, 1.)*glow1;\n    \n    col += shape2;\n    col += vec3(1., 0., 0.5)*glow2;\n    \n    col += shape3;\n    col += vec3(0.5, 1., 0.)*glow3;\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}