{
    "Shader": {
        "info": {
            "date": "1458685952",
            "description": "Simple but fun to watch.",
            "flags": 64,
            "hasliked": 0,
            "id": "ldcSWr",
            "likes": 14,
            "name": "Zooming Grid Distortion",
            "published": 3,
            "tags": [
                "grid",
                "zoom",
                "distort",
                "flower"
            ],
            "usePreview": 0,
            "username": "Glyph",
            "viewed": 1228
        },
        "renderpass": [
            {
                "code": "#define TIMESCALE .2\n//Change this value to speed up (greater value) or slow down (lesser value) the visuals\n\nfloat circle(vec2 uv, float r){\n    return(step(length(uv),r));\n}\n\nvec2 push2D(vec2 uv, vec2 o, float r, float hv, float lv){\n    vec2 ivec = o-uv;//Get vector from current coord to distortion origin\n    \n    //Return vector pushing away from origin scaled by the distance from the origin\n    return(normalize(ivec)*clamp(smoothstep(1.0*r,0.0,length(ivec))*hv,lv,hv));\n}\n\nmat2 rotate2D(float a){\n    //Standard rotation matrix\n    return(mat2(-sin(a),cos(a),cos(a),sin(a)));\n}\n\nfloat rect(vec2 uv, float w, float h){\n    return(step(abs(uv.x),w) * step(abs(uv.y),h));\n}\n\nfloat grid(vec2 uv, float density){\n    vec2 fuv = uv + vec2(.25); // Offset grid to center at cross not cell\n    \n    // Return function exapanded for readability. Is treated as one line\n    return(clamp(\n        rect(fract(fuv*density) - vec2(.5),.005*density,1.0) // Vertical lines\n        +\n        rect(fract(fuv*density) - vec2(.5),1.0,.005*density) //Horiontal lines\n        -\n        circle(uv,.01) // Origin marker\n        ,0.0,1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ar = iResolution.y/iResolution.x; // Bad practice?\n    //Create square mapping with origin at image center\n\tvec2 uv = (fragCoord.xy / iResolution.xy - .5) * 2.0; uv = uv*vec2(1.0,ar);\n    vec2 ouv = uv;\n    float time = iTime * TIMESCALE;\n\n    uv = (uv*1.5)*(1.0/(time*.2+1.0)); //Zoom in overtime\n    \n    float frq = texture(iChannel0,vec2(length(uv),.75)).x*.05*(1.0/(time*.1+1.0)) + 1.0;\n    float mid = texture(iChannel0,vec2(length(ouv),.25)).x;\n    \n    \n    vec3 col = vec3(0.05,mid*.3*length(ouv),mid*.45);\n    //Feed the grid function a uv coord distorted by push2D\n    col += grid((uv + push2D(uv, vec2(0.0), .8, .1*time*frq, 0.0)) * rotate2D(time), 10.0) * vec3(1.0,.2,.2); \n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 2526,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/myxair/tron-legacy-the-grid"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}