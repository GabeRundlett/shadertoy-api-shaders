{
    "Shader": {
        "info": {
            "date": "1592858611",
            "description": " A quantum version of \"Belvedere\" (with apologies to Escher): penguins can  tunnel between the two scenes, and now they are even more confused because  they don't know where they are.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wtsyzs",
            "likes": 10,
            "name": "Quantum Penguins",
            "published": 3,
            "tags": [
                "escher",
                "architecture",
                "folly",
                "paradox"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 441
        },
        "renderpass": [
            {
                "code": "// \"Quantum Penguins\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrFlatCyl2Df (vec2 p, float rhi, float rlo);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_PENG 7\n\nvec3 ltDir, qHit, vuDir, vuPln;\nfloat dstFar, tCur, fAng, sFrame;\nint idObj;\nbool pengOn[N_PENG];\nconst int idFlr = 1, idPil = 2, idBal = 3, idFrz = 4, idRf = 5, idLBld = 6, idLad = 7,\n   idGrnd = 8, idStr = 9, idWal = 10, idPen = 20;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat PengDf (vec3 p, float szFac, float rot, int isSit, float dMin)\n{\n  vec3 q;\n  float d, dh;\n  dMin /= szFac;\n  p /= szFac;\n  if (isSit > 0) p.y -= 1.25;\n  else p.y -= 1.55;\n  q = p;\n  q.y -= 0.5;\n  d = PrSphDf (q, 2.5);\n  if (d < dMin) {\n    p.xz = Rot2D (p.xz, rot);\n    q = p;\n    d = PrEllipsDf (q.xzy, vec3 (1.3, 1.2, 1.4));\n    q.y -= 1.5;\n    dh = PrEllipsDf (q.xzy, vec3 (0.8, 0.6, 1.3));\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.3, 2., -0.4);\n    d = SmoothMin (d, max (dh, - PrCylDf (q, 0.15, 0.3)), 0.2);\n    DMINQ (idPen + 1);\n    q = p;\n    q.yz -= vec2 (1.6, -0.6);\n    d = max (PrEllipsDf (q, vec3 (0.4, 0.2, 0.6)), 0.01 - abs (q.y));\n    DMINQ (idPen + 2);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.3, 2., -0.4);\n    d = PrSphDf (q, 0.15);\n    DMINQ (idPen + 3);\n    q = p;\n    q.x = abs (q.x);\n    if (isSit > 0) {\n      q.xy -= vec2 (0.6, -1.05);\n      q.yz = Rot2D (q.yz, -0.5 * pi);\n      q.y -= -0.6;\n    } else {\n      q.xy -= vec2 (0.4, -0.8);\n    }\n    d = PrCylDf (q.xzy, 0.12, 0.7);\n    DMINQ (idPen + 4);\n    q -= vec3 (0.1, -0.67, -0.4);\n    q.xz = Rot2D (q.xz, -0.07 * pi);\n    d = PrEllipsDf (q.xzy, vec3 (0.15, 0.5, 0.05));\n    q.z -= 0.5;\n    q.xz = Rot2D (q.xz, 0.15 * pi);\n    q.z -= -0.5;\n    d = SmoothMin (d, PrEllipsDf (q.xzy, vec3 (0.15, 0.5, 0.05)), 0.05);\n    q.z -= 0.5;\n    q.xz = Rot2D (q.xz, -0.3 * pi);\n    q.z -= -0.5;\n    d = SmoothMin (d, PrEllipsDf (q.xzy, vec3 (0.15, 0.5, 0.05)), 0.05);\n    DMINQ (idPen + 5);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (1.1, 0.3, -0.2);\n    q.yz = Rot2D (q.yz, -0.25 * pi);\n    q.xy = Rot2D (q.xy, fAng) - vec2 (0.1, -0.4);\n    d = PrEllipsDf (q.xzy, vec3 (0.05, 0.25, 0.9));\n    DMINQ (idPen + 6);\n  } else dMin = min (dMin, d);\n  dMin *= szFac;\n  return dMin;\n}\n\nfloat StairDf (vec3 p, float st, float w, float h)\n{\n  return 0.7 * max ((st + p.y - p.z - abs (mod (p.y + p.z, 2. * st) - st) / sqrt(2.)),\n     max (abs (p.x) - w, max (abs (p.y) - h, abs (p.z) - h)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, wb, len, wid, b, ds;\n  dMin = dstFar;\n  len = 4.;\n  wid = 1.;\n  b = 0.1;\n  wb = 0.4 * b;\n  q = p;\n  q.y -= (vuDir.y > 0.) ? 1.2 : -3.;\n  q.xz = (vuDir.y > 0.) ? q.xz : q.zx;\n  d = PrBoxDf (q, vec3 (wid + 1.5 * b, 0.1, len + 1.5 * b));\n  DMINQ (idFlr);\n  if (vuDir.y > 0.) {\n    q = p;\n    q.y -= 4.4;\n    d = abs (q.z) - (len + 1.5 * b);\n    q.z = mod (q.z + (1./3.) * len + 0.05, (2./3.) * len + 0.1) - (1./3.) * len - 0.05;\n    d = max (d, min (max (max (length (vec2 (q.yz)) - (1./3.) * len , length (q.xy) - wid - b) - 0.1,\n       0.3 - q.y), min (PrCylDf ((q - vec3 (0., 1.3, 0.)).xzy, 0.07 * (1. - 1.3 * (q.y - 1.3)), 0.35),\n       PrCylDf ((q - vec3 (0., 1.5, 0.)).xzy, 0.15, 0.03))));\n    DMIN (idRf);\n    q = p;\n    q.y = (abs (q.y - 2.4) - 1.8) * sign (q.y - 2.4);\n    d = max (PrBoxDf (q, vec3 (wid + wb, 0.5, len + wb)), - PrBox2Df (q.xz, vec2 (wid, len) - wb));\n    d = max (d, - PrFlatCyl2Df (vec2 (q.x, q.y + 0.4), wid - b - 0.7, 0.8));\n    d = max (d, - PrFlatCyl2Df (vec2 (mod (q.z + (1./3.) * len, (2./3.) * len) -\n       (1./3.) * len, q.y + 0.4), (1./3.) * len - b - 0.7, 0.8));\n    DMIN (idFrz);\n  } else {\n    q = p;\n    q.y -= -4.5;\n    d = PrBoxDf (q, vec3 (len + b, 1.4, wid + b));\n    d = max (d, - max (PrFlatCylDf ((q - vec3 (- len - b, 0.3, 0.)).yzx, 0.2, 0.6, 0.4), 0.2 - q.y));\n    d = max (d, - max (PrFlatCylDf ((q - vec3 (0.5, 0.3, - wid - b)).yxz, 0.2, 0.6, 0.4), 0.2 - q.y));\n    d = max (d, - max (PrFlatCylDf ((q - vec3 (3., -0.3, - wid - b)).yxz, 0.7, 0.5, 0.4), -0.8 - q.y));\n    d = min (d, PrBoxDf (q - vec3 (- len - b, -0.5, - wid - b - 0.5), vec3 (0.35, 0.2, 0.4)));\n    DMINQ (idLBld);\n    q = p - vec3 (-2.7, -4.1, -2.3);\n    d = StairDf (q, 0.25, 1., 1.2);\n    DMINQ (idStr);\n    q = p - vec3 (-9., -5.5, -5.);\n    d = PrBoxDf (q, vec3 (8.1, 0.4, 6.3));\n    DMINQ (idGrnd);\n    q = p - vec3 (-1., -4.7, -6.);\n    d = PrBoxDf (q, vec3 (0.1, 0.4, 5.2));\n    DMINQ (idWal);\n    q = p - vec3 (-7., -4.7, 1.2);\n    d = PrBoxDf (q, vec3 (9., 0.4, 0.1));\n    DMINQ (idWal);\n  }\n  q = p;\n  q.y -= (vuDir.y > 0.) ? 1.7 : -2.5;\n  q.xz = (vuDir.y > 0.) ? q.xz : q.zx;\n  d = max (PrBoxDf (q, vec3 (wid + wb, 0.4, len + wb)), - PrBox2Df (q.xz, vec2 (wid, len) - wb));\n  d = max (d, - PrBoxDf (q - vec3 (- wid, 0., ((vuDir.y > 0.) ? 0. : - (2./3.) * len)),\n     vec3 (0.2, 0.5, (1./3.) * len)));\n  d = max (d, - max (PrFlatCyl2Df (vec2 (q.y, mod (mod (q.z + (1./3.) * len, (2./3.) * len) -\n     (1./3.) * len + 0.2, 0.4) - 0.2), 0.17, 0.13), abs (q.z) - (len - 0.9 * b)));\n  d = max (d, - PrFlatCyl2Df (vec2 (q.y, mod (q.x + 0.2, 0.4) - 0.2), 0.17, 0.13));\n  DMIN (idBal);\n  if (vuDir.y > 0.) {\n    q = p;\n    d = max (abs (q.y - 3.) - 1.8, PrBox2Df (vec2 (abs (q.x) - wid,\n       abs (abs (q.z) - (2./3.) * len) - (1./3.) * len), vec2 (b)));\n    DMIN (idPil);\n  }\n  q = p;\n  q = vec3 (abs (q.x) - wid, q.y + 0.5, abs (abs (q.z) - 2. * len / 3.) - len / 3.);\n  d = max (PrBox2Df (q.xz, vec2 (b)), abs (q.y) - 1.6);\n  if (vuDir.y < 0.) d = max (d, - dot (q, vuPln));\n  DMIN (idPil);\n  q = p;\n  q = vec3 (abs (abs (q.x) - 2. * len / 3.) - len / 3., q.y + 1.1, abs (q.z) - wid);\n  d = max (PrBox2Df (q.xz, vec2 (b)), abs (q.y) - 2.);\n  if (vuDir.y > 0.) d = max (d, dot (q, vuPln));\n  DMIN (idPil);\n  q = p;\n  q.xy -= (vuDir.y > 0.) ? vec2 (-1.3, 1.) : vec2 (-2.39, -2.);\n  d = abs (q.y) - ((vuDir.y > 0.) ? 1.3 : 2.7);\n  q.xy = Rot2D (q.xy, 0.1 * pi);\n  d = max (d, PrBox2Df (vec2 (q.x, abs (q.z) - ((vuDir.y > 0.) ? 0.3 : 0.28)), vec2 (0.05)));\n  ds = (vuDir.y > 0.) ? max (PrCylDf (vec3 (q.x, mod (q.y + 0.1, 0.4) - 0.21, q.z), 0.03, 0.3),\n     abs (q.y + 1.) - 2.2) : max (PrCylDf (vec3 (q.x, Rot2D (vec2 (mod (q.y + 0.15, 0.4) - 0.2, q.z),\n     -0.019 * pi * (q.y + 0.9))), 0.03, 0.3), abs (q.y - 1.) - 2.2);\n  d = min (d, ds);\n  DMIN (idLad);\n  if (pengOn[0]) {\n    q = p - vec3 (-4.1, -4.8, -1.7);\n    dMin = PengDf (q, 0.3, 0.45 * pi, 1, dMin);\n  }\n  if (pengOn[1] && vuDir.y > 0. || pengOn[2] && vuDir.y < 0.) {\n    q = p - ((vuDir.y > 0.) ? vec3 (-0.6, 1.3, 0.9) : vec3 (-2.5, -2.9, -0.9));\n    dMin = PengDf (q, 0.35, ((vuDir.y > 0.) ? 0.6 * pi : 0.), 0, dMin);\n  }\n  if (pengOn[3] && vuDir.y > 0. || pengOn[4] && vuDir.y < 0.) {\n    q = p - ((vuDir.y > 0.) ? vec3 (0.3, 1.3, -3.3) : vec3 (3.3, -2.9, -0.3));\n    dMin = PengDf (q, 0.35, ((vuDir.y > 0.) ? 0. : -0.3 * pi), 0, dMin);\n  }\n  if (pengOn[5] || pengOn[6]) {\n    q = p - vec3 (-3., -5.1, -6.8);\n    if (pengOn[5] && pengOn[6]) q.z = (abs (q.z) - 1.33) * sign (q.z);\n    else q.z -= pengOn[5] ? 1.33 : -1.33;\n    dMin = PengDf (q, 0.4, 0.7 * pi, 0, dMin);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 80; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.002, -0.002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = VAR_ZERO; j < 8; j ++) {\n    d = float (j + 1) / 16.;\n    ao += max (0., d - 3. * ObjDf (ro + d * rd));\n  }\n  return 0.6 + 0.4 * clamp (1. - 0.2 * ao, 0., 1.);\n}\n\nvec4 PengCol (vec3 p)\n{\n  vec4 col4;\n  if (idObj == idPen + 1) col4 = (qHit.z < -0.2 || qHit.z < 0. && length (qHit.xy) < 0.2) ?\n     vec4 (0.95, 0.95, 0.95, 0.05) : vec4 (0.15, 0.15, 0.2, 0.1);\n  else if (idObj == idPen + 2) col4 = vec4 (1., 0.8, 0.2, 0.2);\n  else if (idObj == idPen + 3) col4 = vec4 (0.05, 0.15, 0.05, 0.2);\n  else if (idObj == idPen + 4) col4 = vec4 (0.05, 0.1, 0.05, 0.1);\n  else if (idObj == idPen + 5) col4 = vec4 (0.9, 0.9, 0., 0.3);\n  else if (idObj == idPen + 6) col4 = vec4 (0.25, 0.25, 0.3, 0.1);\n  return col4;\n}\n\nvec4 BldgCol (vec3 vn)\n{\n  vec4 col4;\n  if (idObj == idFlr) col4 = (vn.y > -0.99) ? vec4 (0.9, 0.85, 0.85, 0.1) :\n     vec4 (1., 0.3, 0., 0.2);\n  else if (idObj == idBal) col4 = vec4 (0.6, 0.3, 0.1, 0.2);\n  else if (idObj == idLBld) col4 = (abs (qHit.x) < 3.8 && abs (qHit.z) < 0.8) ?\n     vec4 (0., 0., 0.4, 0.) : vec4 (0.85, 0.8, 0.8, 0.2);\n  else if (idObj == idLad) col4 = vec4 (0.95, 0.95, 1., 0.2);\n  else if (idObj == idGrnd) col4 = vec4 (0.7, 0.8, 0.7, 0.1) *\n     (1. - 0.2 * abs (dot (floor (mod (0.75 * qHit.xz, 2.)), vec2 (1., -1.))));\n  else if (idObj == idWal) col4 = vec4 (0.7, 0.7, 0.8, 0.1);\n  else if (idObj == idPil) col4 = vec4 (1., 0.8, 0.2, 0.1);\n  else if (idObj == idStr) col4 = (abs (qHit.x) > 0.85) ? vec4 (0.9, 0.85, 0.85, 0.2) :\n     vec4 (0.6, 0.7, 0.6, 0.1);\n  else if (idObj == idRf) col4 = vec4 (1., 0.3, 0., 0.2);\n  else if (idObj == idFrz) col4 = vec4 (0.9, 0.5, 0., 0.2);\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd, vec3 bgCol)\n{\n  vec4 col4;\n  vec3 colD[2], col, roo, vn;\n  float dstObj, ao, tCyc, bt;\n  fAng = -0.2 * pi + 0.15 * pi * SmoothBump (0.25, 0.75, 0.1, mod (0.2 * tCur, 1.)) *\n     sin (8. * pi * tCur);\n  tCyc = 15.;\n  for (int k = 0; k < N_PENG; k ++) {\n    pengOn[k] = (Hashff (floor (tCur / (0.5 * tCyc)) + 11.1 * float (k)) > 0.5);\n    if (sFrame > 0.) pengOn[k] = ! pengOn[k];\n  }\n  roo = ro;\n  bt = SmoothBump (0.25, 0.75, 0.1, mod (tCur / tCyc + 0.25, 1.));\n  colD[0] = vec3 (0.);\n  colD[1] = vec3 (0.);\n  for (int j = VAR_ZERO; j < 2; j ++) {\n    for (int k = 0; k < N_PENG; k ++) pengOn[k] = ! pengOn[k];\n    if (j == 0 && bt < 1. || j == 1 && bt > 0.) {\n      ro = roo;\n      dstObj = ObjRay (ro, rd);\n      if (dstObj < dstFar) {\n        ro += dstObj * rd;\n        vn = ObjNf (ro);\n        col4 = (idObj < idPen) ? BldgCol (vn) : PengCol (ro);\n        if (idObj == idLBld || idObj == idFlr || idObj == idWal) vn = VaryNf (16. * ro, vn, 0.5);\n        ao = (idObj != idLad) ? ObjAO (ro, vn) : 1.;\n        colD[j] = ao * (col4.rgb * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n           col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.));\n      } else {\n        colD[j] = bgCol;\n      }\n    }\n  }\n  col = mix (colD[0], colD[1], bt);\n  return pow (clamp (col, 0., 1.), vec3 (0.9));\n}\n\nvec3 BgCol (vec2 uv)\n{\n  return (uv.y + 0.05 < 0.05 * Fbm1 (32. * uv.x)) ? mix (mix (vec3 (0.3, 0.5, 0.3),\n     vec3 (0.2, 0.5, 0.2), smoothstep (0.4, 0.6, Fbm2 (256. * uv))),\n     vec3 (0.85, 0.85, 1.) * (1. - 0.05 * Fbm1 (128. * uv.x)),\n     smoothstep (-0.1, -0.01, uv.y + 0.05)) : mix (vec3 (0.7, 0.7, 0.8), vec3 (0.4, 0.4, 1.),\n     uv.y + 0.05);\n}\n\n#define AA  0  // optional antialiasing (risky!)\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd, col, bgCol, vx, vy;\n  vec2 canvas, uv, uvv;\n  float el, az, zmFac, sr, df;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  az = 0.25 * pi;\n  el = 0.;\n  ro = vec3 (0., - 1.5 * sign (uv.y), -10.);\n  ro.yz = Rot2D (ro.yz, - el);\n  ro.xz = Rot2D (ro.xz, - az);\n  rd = normalize (- ro);\n  vuDir = rd;\n  vx = normalize (vec3 (vuDir.z, 0., - vuDir.x));\n  vy = vec3 (0., 1., 0.) - vuDir.y * vuDir;\n  vuPln = vy;\n  zmFac = 0.15;\n  dstFar = 30.;\n  ltDir = normalize (vec3 (-0.5, 0.7, -1.));\n  sFrame = sign (uv.x);\n  uv.x -= 0.85 * sFrame;\n  df = max (abs (uv.x) - 0.76, abs (uv.y) - 0.96);\n  if (df < 0.) {\n    bgCol = BgCol (uv);\n#if ! AA\n    const float naa = 1.;\n#else\n    const float naa = 3.;\n#endif  \n    col = vec3 (0.);\n    sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n    for (float a = float (VAR_ZERO); a < naa; a ++) {\n      uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi);\n      col += (1. / naa) * ShowScene (ro + vec3 (uvv.x * vx + uvv.y * vy) / zmFac, rd, bgCol);\n    }\n  } else if (df < 0.02) {\n    col = vec3 (0.6, 0.4, 0.1) * (0.6 + 0.4 * smoothstep (0., 0.02, df));\n  } else col = vec3 (0.75);\n  fragColor = vec4 (col, 1);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (clamp (p.x, - rhi, rhi), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrFlatCyl2Df (vec2 p, float rhi, float rlo)\n{\n  return length (p - vec2 (clamp (p.x, - rhi, rhi), 0.)) - rlo;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}