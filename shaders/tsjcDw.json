{
    "Shader": {
        "info": {
            "date": "1586946377",
            "description": "Device from the title page of John Byrom's The Universal English Short-hand (1767):\n\n[url]https://books.google.co.uk/books?id=Azg5AAAAMAAJ&printsec=frontcover[/url]\n[url]https://en.wikipedia.org/wiki/John_Byrom[/url]",
            "flags": 16,
            "hasliked": 0,
            "id": "tsjcDw",
            "likes": 11,
            "name": "John Byrom's Device",
            "published": 3,
            "tags": [
                "reproduction",
                "byrom"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// John Byrom: device from title page of \"The Universal English Short-hand\":\n// https://books.google.co.uk/books?id=Azg5AAAAMAAJ&printsec=frontcover\n// https://en.wikipedia.org/wiki/John_Byrom\n//\n// Matthew Arcus (mla), 2020\n//\n// 'r' shows fundamental region\n//\n// John Byrom, FRS (1692-1763): English poet and the inventor of a\n// revolutionary system of shorthand. He is most remembered as the\n// writer of the lyrics of the Anglican hymn 'Christians awake! Salute\n// the happy morn'.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nbool key(int code) {\n  return texelFetch(iChannel3, ivec2(code,2),0).x != 0.0;\n}\n\nconst int CHAR_R = 82;\n\nfloat circle(vec2 p, vec3 c) {\n  vec2 centre = c.xy;\n  float radius = c.z;\n  return abs(length(p-centre)-radius);\n}\n\nfloat byrom(vec2 p, float lwidth, out bool fundamental) {\n  float d = 1e8;\n  //p = p-3.0*round(p/3.0); // Repeat grid of [-1.5,1.5] squares\n  vec2 p0 = p;\n  p = abs(p);  // Reflect into primary quadrant\n\n  // Next line draws the 2 little circles on the x-axis.\n  // Do this before the reflection in x = 0.5\n  d = min(d,circle(p,vec3(0.94,0,0.06)));\n\n  p.x = min(p.x,1.0-p.x); // Reflect in x = 0.5\n\n  fundamental = p == p0;\n  \n  // The arcs of the larger circles - there are 3 in the fundamental\n  // region. Use a fixed circle and reflect p in y=0 and x=0.5 (could\n  // fix p and reflect the circle, but seems clearer this way round).\n  vec3 c = vec3(2.5,-1,2.5);\n  d = min(d,circle(p,c));\n  d = min(d,circle(vec2(1.0-p.x,p.y),c)); // x=0.5\n  d = min(d,circle(vec2(p.x,-p.y),c));    // y=0.0\n\n  // The small semicircles on top and bottom edges\n  d = min(d,circle(p,vec3(0.5,1,0.5)));\n\n  // The diagonal lines - translate to any point on line, then\n  // dot product with line normal. The compiler can do the\n  // normalization for use.\n  d = min(d,abs(dot(p-vec2(0.5,0),normalize(vec2(2,1)))));\n\n  // The grid lines\n  d = min(d,abs(p.y));\n  d = min(d,abs(p.y-1.0));\n  d = min(d,abs(p.x));\n  \n  // Clip to region, just the sides needed.\n  d = max(d,p.y-1.0);\n  d = max(d,-p.x);\n\n  // Surrounding circle - use original p0 for this and make circle\n  // slightly larger to ensure square corners are covered.\n  d = min(d,circle(p0,vec3(0,0,sqrt(2.0+2.0*lwidth))));\n  return d;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n   p *= 1.55; // scale\n    //p.x += iTime;\n  float lwidth = 0.012;\n  bool fundamental;\n  float d = byrom(p,lwidth,fundamental);\n\n  // Draw the line!\n  vec4 tt = texture(iChannel0,p);\n  float t = 1.0-smoothstep(0.0,lwidth*(1.0+tt.y),d);\n  t *= tt.x;\n  t = 1.0-t;\n  t *= 0.8+0.1*tt.z;\n  vec3 col = t*vec3(1,1,0.8);\n\n  // The fundamental region is the points that haven't moved.a\n  if (key(CHAR_R) &&  fundamental) col.gb *= 0.8;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}