{
    "Shader": {
        "info": {
            "date": "1603628547",
            "description": "mouse controls the blocks.  Will you dare moving it ? :-p\n[url]https://inktober.com/[/url]\n#inktober2020 themes: [img]https://i.imgur.com/b3gMiu0.png[/img]",
            "flags": 32,
            "hasliked": 0,
            "id": "wdycWy",
            "likes": 14,
            "name": "Fab26 #inktober2020 \"hide\"",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "particles",
                "short",
                "swarm",
                "inktober2020",
                "cockroaches"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 756
        },
        "renderpass": [
            {
                "code": "// find hidding cockroaches !  variant of https://www.shadertoy.com/view/3dGyWy\n\n#define rot(v) mat2( v, -v.y, v.x ) / length(v)\n\nfloat line(vec2 p, vec2 a,vec2 b) { // https://www.shadertoy.com/view/llySRh\n    p -= a, b -= a;\n    p -= b * clamp(dot(p, b) / dot(b, b), 0., 1.);\n    return dot(p,p);\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = u / R.y, P, X = vec2(.01,0);\n    \n    O = T(u);                                            // load drawing\n    \n    float l = 1e5,v;\n#define d(d) .03*sin(6.28*(iTime+float(d)/3.)+float(i))\n    for(int i=1; i<N; i++) {                             // draw moving particles\n        vec4 T =T(vec2(i,0));\n        P = T.xy - U; \n        if ( length(P) > .084 ) continue;                // bounding sphere optimization\n//      O.b += clamp( R.y*max(0.,.04-length( P )/2.1 ), 0., 1. );        // show bounding sphere\n        P *= rot(T.zw);\n//      O.b += clamp( R.y*max(0.,.04-length( P/ vec2(3,1) ) ), 0., 1. ); // show bounding ellipse\n        v = max(0.,length( P/ vec2(3,1) ) - .01 ); l = min(l, v*v );        // body\n        v = max(0.,length( P + 3.*X )     - .01 ); l = min(l, v*v );        // head\n        for(int s=0; s<2; s++) {\n            l = min(l, line(P, vec2( .01, .013), vec2(.04+d(0)   , .03)) ); // legs\n            l = min(l, line(P, vec2(  0,  .013), vec2(.01+d(1)/2., .04)) ); \n            l = min(l, line(P, vec2(-.01, .013), vec2(-.015+d(2) , .03)) ); \n            l = min(l, line(P, vec2(-.03,  0  ), vec2(-.08, d(0))      ) ); \n            P.y = -P.y;\n        }\n    }\n     O *=  clamp( R.y*(sqrt(l)-.001), 0., 1. );\n    \n    U = abs( U - T(0).xy ) ; O += max(0., R.y/8.- R.y/2.*max(U.x,U.y) );    // hidder \n    O = sqrt(O);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define H(u) fract(sin( (u)* mat2(127.1,311.7, 269.5,183.3) ) *4e5 ) // variant from https://www.shadertoy.com/view/llySRh\n#define G(d) textureLod(iChannel0, (d + P) / a  ,2. ).a\n#define dt   iTimeDelta\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = T(u);                                                 // restore state\n    vec2 U = u / R.y, a = R/R.y, P, e=vec2(.1,0), F,D; float l;\n    \n    if (T(1).b != iChannelResolution[1].x || T(1).a != R.x ) {// --- init at texture load or resolution change\n        if (u.y == .5)\n        { if (iFrame < 1) O = vec4( H(u) , .7*(2.*H(u+.5)-1.) ); }  // particles\n        else O = texture(iChannel1, u/R ).r * vec4(.8,.4,.2,1)+.1*vec4(1,1,1,0); // ground\n        if (u==vec2(1.5)) O.b = iChannelResolution[1].x, O.a = R.x; // for re-init\n        return;\n    }    \n    \n    if ( u == vec2(.5) )                                      // --- leader\n            O.xy = iMouse.xy !=vec2(0) ? iMouse.xy / R.y : a/2.;\n         // O.xy = iMouse.z > 0. ? iMouse.xy / R.y : (.5+.4*cos(iTime+vec2(0,33)))*a;\n    else if ( u.y == .5  && int(u.x) < N )                    // --- particle simulation\n    {\n        P = O.xy; \n        F = T(0).xy - P; F *= 5. / max(.1,length(F));        // attracted by leader\n        F -= .5 * ( vec2(G(e),G(e.yx)) - G() ) / e.x;         // repulsed by dense areas                      \n        for (int i=1; i<N; i++)                               // particles repulse each other\n            if (int(u)!=i) D = T(vec2(i,0)).xy - P, l = length(D),\n                           l < .1 ? F -= D/(.1+l*l)  : F;\n\n        O.zw *= .98;                                          // viscosity\n        O.zw += dt * F,                                       // Newton: v += F.dt\n        O.xy += dt * O.zw;                                    //         p += v.dt\n     // O.xy = fract(O.xy /a ) * a;                           // wrapped world\n    }\n }",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "int N = 100;    // number of particles\n#define R       iResolution.xy\n#define T(U)    texelFetch( iChannel0, ivec2(U), 0 )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}