{
    "Shader": {
        "info": {
            "date": "1620071901",
            "description": "Nice illusion",
            "flags": 0,
            "hasliked": 0,
            "id": "7d2SDR",
            "likes": 2,
            "name": "Lunar Arcans",
            "published": 3,
            "tags": [
                "lunar"
            ],
            "usePreview": 0,
            "username": "jhabaa",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "/*\n    ///Voici les arcanes lunaires inspirées du manga Naruto\n    \n    Le code est basé sur celui de  FabriceNeyret2-- shortest rotation dot (91 chars) -- \n    pour les effets lumineux et rotationnel des élements. \n    \n    La sphère centrale qui représente la lune est la même utilisée par Deefunct --Light circles--\n    \n    Le disque central rouge est acquis grace au code disponible en cours\n    \n    les effets de lumières, couleurs, et animations resultent d'une modification des codes acquis.\n    \n*/\n\n\n//Fonction de création d'un disque. Prise en cours\nvec4 disk(vec2 uv, vec2 center, float radius, vec4 color) {\nfloat inDisk = step(length(center - uv), radius);\nif (inDisk==0.0) return vec4(0.0, 0.0, 0.0, 1.0);\nelse return vec4(inDisk, inDisk, inDisk, 1.0)*color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //disque central rouge\n    vec2 xy = fragCoord.xy;\n    xy = iResolution.xy;\n    vec2 center = iResolution.xy * 0.5;\n    float radius = 0.12 * iResolution.y;\n    vec4 layer3 = disk(fragCoord.xy, center, radius, vec4(1.0, 0.0, 0.0, 1.0));\n    layer3 -= 0.1 / length( (fragCoord+fragCoord-xy)/xy.y*2.0 + tan( iTime  + vec2(33,0) )  ) ; //ajout d'un halo noir tangent à la lune\n    \n    //cercle luminlumineux blanc lunaire\n    vec2 uv1 = 7.2*(2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec3 light_color1 = vec3(1.0,1.0,1.0);\n    float light1 = 2.0 / distance(normalize(uv1), uv1);\n    vec4 layer2 = vec4(light1*light_color1,1.0) + layer3;\n    layer2 += .1 / length( (fragCoord+fragCoord-xy)/xy.y*1.8 + sin( iTime  + vec2(33,0) )  ) ;\n\n   // cercle central\n\tvec2 uv = 1.8*(2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 light_color = vec3(0.9, 0.1, 0.1);\n\tvec2 offset = vec2(tan(iTime),sin(iTime));;\n\tfloat light = 0.1 / distance(normalize(uv), uv); // Point de chute du ryon à la surface de la lune\n    float light2 = 0.5 / distance(normalize(uv), uv); // satellite\n    float light3 = 0.3 / distance(normalize(uv), uv*2.5); // rayon envoyé par le satellite\n    if(length(uv) > 1.0  ){\n\t\tlight *= 0.7 /  length( (fragCoord+fragCoord-xy)/xy.y + sin( iTime  + vec2(33,0) ) + light2 * light3);\n\n\t}\n    vec4 layer1 = vec4(light*light_color,0.0);\n\tfragColor = mix(layer1,mix(layer2,layer3,0.5),0.5); // affichage de tous les calques\n\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}