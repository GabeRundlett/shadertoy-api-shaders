{
    "Shader": {
        "info": {
            "date": "1635470296",
            "description": "e",
            "flags": 0,
            "hasliked": 0,
            "id": "fsySDd",
            "likes": 18,
            "name": "Grid Spiral Test",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// idea:\n// change brightness depending on difference in radius from last frame to this one,\n// for each cell / circle\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    float xr = 40.; float yr = 40.;\n    \n    vec2 ipos = vec2(floor(xr * uv.x) + 0.5, floor(yr * uv.y) + 0.5);\n    vec2 fpos = vec2(fract(xr * uv.x) - 0.5, fract(yr * uv.y) - 0.5);\n    \n    float id = length(ipos);//max(abs(ipos.x), abs(ipos.y));\n    float d = 1.- length(fpos);//max(abs(fpos.x), abs(fpos.y));\n   // d *= .5;\n    // 3.5 30. 3.5 // 30. / 37.\n   // float m = 30./37.;\n    float a = atan(ipos.y, ipos.x);\n    float b = .5 + .5 * cos(iTime + 0.1 * length(ipos));\n    //b = b * (1.-b) * 4.;\n    float e = 1.8 + 0.5 * cos(-0.8 * iTime + 1. * a + 0.5 * id);\n    float e2 = e + cos(0.8 * iTime + 3. * a - 0.5 * id);\n\n    //float e2= cos(0.1 * id + 0.8 * iTime);//\n    float c = step(max(0.5, pow(0.5 + 0.5 * (1.-b) * e,12.)), d);//(1.-b) * e);\n    \n    float c2 =  step(max(0.5, pow(0.5 + 0.5 * b * e2, 4.)), d);//(1.-b) * e);//step(0.5 + 0.5 * b * e2, d);\n    c = smoothstep(-0.1,0.1,c2-c) * c;\n    //c *= .5 + .5 * cos(c + iTime);\n    //c = clamp(c, 0., 1.);\n    \n    vec3 col = pal(e/c + 0.4 * h21(ipos), vec3(0.5), vec3(0.5), vec3(1.5), vec3(0.,0.333,0.666));\n    \n    // Time varying pixel color\n   // vec3 col = vec3(c * e);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}