{
    "Shader": {
        "info": {
            "date": "1727302600",
            "description": "Wanted to see if I could make a basic \"outline\" of any black / white texture.\n\nThis is temporally antialiased",
            "flags": 32,
            "hasliked": 0,
            "id": "4XSyWw",
            "likes": 2,
            "name": "Fork Edge Detec pixve 594",
            "published": 3,
            "tags": [
                "texture",
                "earth",
                "detection",
                "edge"
            ],
            "usePreview": 0,
            "username": "pixve",
            "viewed": 74
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 tex = texture(iChannel1, uv).xyz;\n    vec2 edge = abs(tex.xy);\n    float rim = max(edge.x, edge.y);\n    float intr = tex.z;\n    \n    \n    fragColor = vec4(vec3(rim > 0.15 ? 1.0 : 0.0), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec2 bitmap_size = vec2(672, 336);\nconst int[] palette = int[] (\n    0x00000000,\n    0x00ffffff\n);\n\n// RLE Data, this is earth\nconst int[] rle = int[] ( 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0xf00300b7, 0x9a7fffff, 0x01e00200, 0x8300b1ff, 0x987f00ff, 0xffe00400, 0xad0fffff, 0x9f300100, 0x0700ff86, 0x80000095, 0x0100ff84, 0x800000ab, 0x0700ff88, 0xf8000095, 0x3f00ff84, 0x800000ab, 0x0094ff89, 0xff86c000, 0x800000ab, 0x0093ff8a, 0xff86fe00, 0x00ab0700, 0x7f00ff8a, 0xc0000091, 0x0f00ff87, 0xfe0000ab, 0x3f01ff8a, 0x000085fc, 0x0000887f, 0x00ff8880, 0x0000aa07, 0x05ff8dc0, 0xffff8001, 0x00837f81, 0x0084e000, 0x0700ff88, 0xf80000ab, 0x8305ff8c, 0xf3ffffff, 0x0100833f, 0x008301fe, 0xff87fe00, 0x00ab0f00, 0xff91f000, 0x00003f0b, 0x0ffffc00, 0x000000fc, 0x00ff88fe, 0x0000aa01, 0x02ff91e0, 0x83e0007f, 0x000f03ff, 0xff890000, 0x00aa7f00, 0xff92c000, 0x83f80101, 0x000703ff, 0xff8a8000, 0x00a90300, 0xff98f000, 0x00000103, 0x00ff8a80, 0x0000a90f, 0x03ff98fe, 0x80000003, 0x00a7ff8c, 0xff99f800, 0x00000303, 0x07ff8cc0, 0x00fff87f, 0x07fc0000, 0xfc00009e, 0x0f03ff9a, 0x90c00000, 0xfc0f03ff, 0x009dffff, 0xff9bc000, 0x00607f03, 0x00ff9480, 0x0100881f, 0x009001f0, 0xff9d8000, 0x00007f03, 0x00ff95fe, 0x0200857f, 0x9007ff80, 0x9efe0000, 0x000001ff, 0x0085ff97, 0x07fff802, 0xc000008f, 0x7f02ff9e, 0xff988000, 0x00000307, 0xfffffffe, 0xa0008f03, 0x800601ff, 0x3f02ff98, 0xff83c000, 0x00870f00, 0x83078001, 0xa1e00000, 0x801f01ff, 0x0001ff99, 0x0eff83f0, 0xc000e37f, 0x78000000, 0x00e78000, 0xa2800000, 0x007f02ff, 0x0bffa0fe, 0x0007e403, 0x007fff80, 0xf80001fe, 0x0001ffa4, 0x02ffa2fe, 0x84f00007, 0xa5fb00ff, 0xfc0501ff, 0x1f02ffa2, 0xffabfc00, 0xa2c03701, 0x067f01ff, 0x8300ffad, 0x8f00ffa3, 0x3f00ffad, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffe7ffff, 0xd1f81f01, 0xe00701ff, 0x1001ffd1, 0x02ffd0fc, 0xd0fe383f, 0x147f01ff, 0x1f01ffd1, 0x04ffd1c0, 0x7fff000f, 0x04ffcef8, 0xffff803f, 0x01ffcefa, 0xffd1800f, 0xd1000701, 0x000702ff, 0x02ffd0fe, 0x9efc0007, 0xb0fd00ff, 0x000702ff, 0x02ffd0f8, 0xd0f0000f, 0x001f02ff, 0x02ffd0e0, 0xd0e0001f, 0x000f02ff, 0x00ffb5fc, 0x02ff99e7, 0xb4fc001f, 0x807f01ff, 0x1f02ff99, 0xffb5f800, 0xff998000, 0xc0005f02, 0x0100ffb5, 0x7f02ff99, 0xffb5c000, 0x99fe0701, 0xc00001ff, 0xfd00ffb0, 0x1f01ff83, 0x02ff98fc, 0xb08000bf, 0x83f000ff, 0xf87f01ff, 0x9f03ff98, 0xaefe8000, 0xf07f01ff, 0xf000ff84, 0xbf02ff98, 0xffaf8000, 0x84e07f01, 0x98e000ff, 0x003f02ff, 0x01ffafc0, 0xff84e03f, 0xff982100, 0x00003f03, 0x01ffb5f0, 0xff97fe7b, 0x00003f03, 0x01ffb5f0, 0xff97fc7f, 0x00007f03, 0x01ffb5f0, 0xff97fc1f, 0x00007f03, 0x01ffb5f0, 0xff97f81f, 0x00007f04, 0xffadfc00, 0x84fdf701, 0xe03f01ff, 0x7f04ff97, 0xf0000000, 0x0001ffad, 0x01ff84f8, 0xff97e03f, 0x00003f04, 0xfface000, 0x80003f02, 0x3f01ff84, 0x04ff97fe, 0x0000007f, 0x02ffacc0, 0x8400001f, 0x993f00ff, 0x000003ff, 0xffacc000, 0x00001f02, 0xdf00ff84, 0x0003ff99, 0xace00000, 0x001f02ff, 0x00ff8400, 0x03ff99cf, 0xe0000001, 0x0703ffac, 0x83fe0000, 0x99e700ff, 0x000104ff, 0xa6fdf000, 0x83f100ff, 0x000303ff, 0xff9efe00, 0x00000104, 0xff8ff008, 0xff950f00, 0xffffc008, 0x0000dfff, 0xff9efc00, 0x00000304, 0xff8ff000, 0x93000701, 0x007f09ff, 0x8fffffc0, 0xfc000001, 0x0304ff9e, 0xe0000000, 0x0302ff8f, 0xff92f800, 0x80007f09, 0x010fffff, 0x9ef80000, 0x000304ff, 0x8fc00000, 0x000302ff, 0x08ff93e0, 0xfffe0000, 0x00000007, 0x04ff9ef0, 0x00000003, 0x02ff8f80, 0x93c00003, 0x000008ff, 0x0003ffe0, 0x9ef00000, 0x000304ff, 0x8f800000, 0x000302ff, 0x03ff9380, 0x3f000000, 0xe0000083, 0x0300ff9e, 0xff8f0083, 0x00000302, 0x0087ff93, 0xff9ee000, 0x00830300, 0x0103ff8f, 0x91fe0000, 0x877f00ff, 0x9ee00000, 0x830700ff, 0x8efc0000, 0x000003ff, 0xff91fe00, 0x00877f00, 0xff9ec000, 0x00830700, 0xff8ef800, 0x00000003, 0x00ff91fc, 0x0000877f, 0x00ff9ec0, 0x00008303, 0x04ff8df0, 0x0000007f, 0x00ff91f8, 0x0000877f, 0x00ff9ec0, 0x00008307, 0x04ff8de0, 0x0000007f, 0x00ff91f0, 0x0000873f, 0x00ff9ec0, 0x00008307, 0x04ff8de0, 0x0000003f, 0x00ff91e0, 0x0000873f, 0x00ff9ec0, 0x00008307, 0x04ff8dc0, 0x0000001f, 0x00ff91e0, 0x0000871f, 0x00ff9ec0, 0x0000830f, 0x04ff8de0, 0x0000000f, 0x00ff91e0, 0x0000871f, 0x00ff9ec0, 0x0000830f, 0x04ff8de0, 0x0000000f, 0x00ff91e0, 0x0000871f, 0x00ff9ec0, 0x0000830f, 0x04ff8dc0, 0x0000000f, 0x00ff91e0, 0x0000871f, 0x00ff9ee0, 0x0000830f, 0x07ff8dc0, 0x00000007, 0xc7ffffc0, 0x1f00ff8e, 0xe0000087, 0x0f00ff9e, 0x80000083, 0x0700ff8d, 0xfe020083, 0xff8e03ff, 0x00870f00, 0xff9ef000, 0x00840f00, 0xff8cfe00, 0x00830700, 0x01fffc02, 0x0f00ff8e, 0xf8000087, 0x0f00ff9e, 0xf0000084, 0x0700ff8c, 0xfc030083, 0x8dfe01ff, 0x870f00ff, 0x9efc0000, 0x840f00ff, 0x8ce00000, 0x830700ff, 0xfffc0300, 0xff8dfe01, 0x00871f00, 0xff9efe00, 0x00851f00, 0xff8bfc00, 0x00830700, 0x01fffc03, 0x00ff8dfe, 0x0000871f, 0x00ff9efe, 0x0000851f, 0x00ff8bf8, 0x03008307, 0xfc01fffc, 0x1f00ff8d, 0x80040086, 0xbfffffff, 0x1f00ff9b, 0xf0000085, 0x0300ff8b, 0xfc030083, 0x8dfc01ff, 0x867f00ff, 0xff800400, 0x9bcfffff, 0x851f00ff, 0x8bf00000, 0x830300ff, 0xfffe0400, 0x8d7ffc03, 0x040086ff, 0xffffffc0, 0x00ff9be7, 0x0000851f, 0x00ff8be0, 0x03008301, 0xf803fffe, 0x0f00ff8e, 0xe0040085, 0xfbffffff, 0x1f00ff9b, 0xe0000085, 0x0084ff8b, 0x07fffe03, 0x00ff8ef8, 0x0000857f, 0x00ff9ff0, 0x0000851f, 0x84ff8bc0, 0xfffc0300, 0xff8ff807, 0x00840300, 0xff9ff800, 0x00851f00, 0xff8ac000, 0x00847f00, 0x03fff803, 0x00ff8ff0, 0x00008403, 0x00ff9ffe, 0x0000850f, 0x00ff8ac0, 0x0300847f, 0xf003fff0, 0x0700ff8f, 0xfe000084, 0x0700ff9f, 0x80000085, 0x3f00ff8a, 0xe0030084, 0x8ff003ff, 0x840f00ff, 0x00ff8600, 0x00ff98e7, 0x00008503, 0x00ff8a80, 0x0300843f, 0xf003ff80, 0x0f05ff8f, 0x70000000, 0x00ffa000, 0x00008501, 0x00ff8a80, 0x0200853f, 0x8fe007fe, 0x000f05ff, 0x007c0000, 0xbf00ff86, 0x7f00ff97, 0x80000086, 0x3f00ff8a, 0xfc020085, 0xff90e007, 0x00000004, 0xff9f80fe, 0x00871f00, 0x3f00ff8a, 0xf8020085, 0xff90c03f, 0x80000004, 0xff9f80ff, 0x00860700, 0xff8a8000, 0x00853f00, 0xc0fff002, 0x0104ff90, 0x80ffe000, 0x7f00ff83, 0x0300ff9a, 0x80000086, 0x7f00ff8a, 0xf0020085, 0xff90c1ff, 0xe0010104, 0xff9fc0ff, 0x00860300, 0xff8a8000, 0x00857f00, 0xc1fff002, 0x8704ff90, 0xf0ffa001, 0x0300ff9f, 0x80000086, 0x7f00ff8a, 0xf0020085, 0xff91e3ff, 0xffe00303, 0x00ff9ff0, 0x8b008701, 0x030084ff, 0xe7fff001, 0x0703ff91, 0x9ff0ffc0, 0x870100ff, 0x8afe0000, 0x830100ff, 0xf0010300, 0xff91f7ff, 0xff800f03, 0x88ff9ff8, 0x8afc0000, 0x830100ff, 0xf8010100, 0x7f03ff93, 0x9ef9fffc, 0x887f00ff, 0x8afc0000, 0x830100ff, 0xf8010100, 0x6703ff93, 0x9efdffff, 0x887f00ff, 0x8af80000, 0x840100ff, 0x96f00000, 0x9efd00ff, 0x883f00ff, 0x8af00000, 0x840100ff, 0x97f80000, 0xfe7f01ff, 0x3f00ff9c, 0xe0000088, 0x0085ff8a, 0xff91fc00, 0xff847e00, 0xffff0703, 0x00ff9af7, 0x0000881f, 0x85ff8ac0, 0x91fc0000, 0xfc7f01ff, 0xc300ff83, 0x1f00ff9d, 0x80000088, 0x0085ff8a, 0xff90fe00, 0xf1f8e107, 0xf83fffff, 0x00ff9de1, 0x0000880f, 0x83ff8a80, 0x00020200, 0x01ff8ffe, 0xff83e7e0, 0xf1f01905, 0x9afddfff, 0x880f00ff, 0x8a800000, 0x020083ff, 0x8efe0001, 0xc00b09ff, 0xefffffff, 0xf82001ff, 0x0700ff9d, 0x80000088, 0x0083ff8a, 0xfe000102, 0x7f02ff8d, 0xff84f000, 0xfc000702, 0x0300ff9d, 0x80000088, 0x7f07ff89, 0x80000000, 0x8dfe0000, 0x783f01ff, 0xfb05ff84, 0xfff80003, 0x00ff9bfb, 0x00008801, 0x00ff8980, 0x8e00857f, 0xfe3f01ff, 0xfb05ff84, 0xfe380003, 0x00ff9bfd, 0x00008801, 0x07ff89c0, 0x0000003f, 0xfe000080, 0xc700ff8d, 0xfb04ff85, 0xf81e0001, 0x0089ff9c, 0xff89f000, 0x00003f07, 0x00004000, 0x03ff8dfe, 0x7fffffc3, 0x0003ff83, 0x9cf3ff00, 0x000089ff, 0x00ff89fc, 0x0000851f, 0x0bff8dfe, 0x7fffffc1, 0x1fffffe7, 0xf7ff8000, 0x0100ff9c, 0xfe000088, 0x1f00ff89, 0xfc000085, 0x7f0aff8c, 0xffffffc0, 0x07ffffe3, 0xff9ec000, 0x00870300, 0xff8a8000, 0x00850f00, 0xff8cfc00, 0xffc07f0a, 0x67f37c3f, 0xf0000073, 0x0300ff9e, 0xc0000087, 0x0700ff8a, 0xf8000085, 0x3f09ff8c, 0x3c007d80, 0x183c7ff1, 0x00ff9f00, 0x00008601, 0x00ff8b60, 0x02008303, 0x8cf00038, 0xa01f09ff, 0xf83c003f, 0xc03cffff, 0x0100ff9f, 0xe0000086, 0x0100ff8b, 0x78020083, 0xff8ce000, 0x3fd00f09, 0xfef87c00, 0x9ff8fc3b, 0x860100ff, 0x8bf80000, 0x020084ff, 0x8cc00070, 0xf80f08ff, 0xd07c003f, 0x9dfc0fff, 0xffdf03ff, 0x008601ff, 0xff8bfe00, 0xf0020084, 0xff8c8000, 0x1ffc0708, 0xffce7000, 0xff9dfc1f, 0xffffdf03, 0x00008503, 0x00ff8ce0, 0x02008301, 0x8c8000f0, 0xfc0707ff, 0xfff0000f, 0xffa1f7ff, 0x00850300, 0xff8cf800, 0x00860100, 0x0304ff8c, 0xf0000ffc, 0x0700ffa4, 0xfc000085, 0x0100ff8c, 0xfe000086, 0xbf07ff8a, 0x000ffe01, 0xa2bf01e0, 0x850f00ff, 0x8cf80000, 0x860100ff, 0x8bf80000, 0xfb0106ff, 0xffc0000f, 0x00ffa21e, 0x0000851f, 0x00ff8cfc, 0x00008603, 0x04ff8bf0, 0x00fff8c0, 0x00ffa4e0, 0x0000851f, 0x00ff8cfe, 0x00008603, 0x07ff8ac0, 0xfffc707f, 0x7fffe000, 0x7f00ffa2, 0xfe000085, 0x0300ff8c, 0x80000086, 0x3f05ff8a, 0x03fffc38, 0x00ffa4f0, 0x0000857f, 0x00ff8cfe, 0x8a008703, 0x1c1f05ff, 0xf00ffffe, 0x7f00ffa4, 0xfe000085, 0x0100ff8c, 0xfe000087, 0x0f05ff89, 0x1ffffe0f, 0x00ffa4f0, 0x0000847f, 0x03ff8980, 0xc3fffff9, 0xfe000088, 0x8705ff89, 0x1ffffe0f, 0x00ffa4c0, 0x0000847f, 0x04ff88c0, 0xffc3c07f, 0x00008803, 0x05ff89fc, 0xfffe0f83, 0xffa4c0ff, 0x00847f00, 0xff88f000, 0x00003f04, 0x008801ff, 0xff89f800, 0xff0ffb05, 0xa4e0ffff, 0x837f00ff, 0x89e00000, 0x001f03ff, 0x0089f800, 0xff85f800, 0xff833f00, 0xffff8f06, 0xfcfff1ff, 0x7f00ffa2, 0xf0000083, 0x0f00ff89, 0xf000008c, 0x1f0bff85, 0xfffffffe, 0xffffffc7, 0xa2fc7ffb, 0x837f00ff, 0x89f80000, 0x8c0300ff, 0x85f00000, 0xfe1f05ff, 0xf3ffffff, 0x7f01ff83, 0x00ffa2f0, 0x0000833c, 0x00ff89fc, 0x00008c01, 0x05ff85e0, 0xfffffe1f, 0xff83f1ff, 0xa1f01f01, 0x3c3f01ff, 0xfe000083, 0x008dff89, 0xff85e000, 0xff831e00, 0xff83f800, 0xa1f83f01, 0x980f05ff, 0x80000001, 0x008dff8a, 0xff84c000, 0x831c7f01, 0xeff801ff, 0xfb00ff83, 0xc705ffa1, 0x000403c7, 0x00ff89c0, 0x00008d7f, 0x01ff8480, 0xff83b87f, 0xffcffc05, 0xa2dfffff, 0xffe005ff, 0xe0000607, 0x7f00ff89, 0x8000008d, 0x3f01ff84, 0x05ff83f0, 0xffff8ffe, 0xffa21fff, 0x07fff005, 0x89d8e000, 0x8d1f00ff, 0x84800000, 0xe03f01ff, 0xfc06ff83, 0xffffff07, 0xffa1fe9f, 0x0ffff003, 0x00ff8b04, 0x01008c0f, 0xff8480fc, 0x83e03f01, 0x03fc06ff, 0xc7fffffc, 0x04ffa0fc, 0x7ffff87f, 0x00ff8b9c, 0x01008c0f, 0xff849ffe, 0x83e01f01, 0x01fd06ff, 0xeffffff0, 0x04ffa0fc, 0xfffff03f, 0x00ff8bf9, 0x02008a03, 0x85fe0020, 0xe01f01ff, 0xf806ff83, 0xfffff000, 0xffa0fcff, 0x8ef01f01, 0x8c0100ff, 0xfffe0200, 0x01ff83ef, 0xff83c00f, 0xf0007805, 0xa1fdffff, 0xf00f01ff, 0x0100ff8e, 0x0c000085, 0x80010084, 0x01ff85f1, 0xff83c00f, 0xf0001805, 0xa1bdffff, 0xf00001ff, 0x0100ff8e, 0x8801008b, 0x01ff8501, 0xff83c007, 0xf0000005, 0xa0d9ffff, 0x001f02ff, 0x00ff8ef0, 0x02008b01, 0x84f800e8, 0xc0070bff, 0x7fffffff, 0xfff00000, 0xffa0f9ff, 0xf0000702, 0x008cff8e, 0xf000f002, 0x070bff84, 0xffffffc0, 0xf000007f, 0xa0f8ffff, 0x000302ff, 0x00ff8ef0, 0x02008b01, 0x848000f8, 0xc0030bff, 0x7fffffff, 0xfff80000, 0xff9ffcff, 0x0001f703, 0x00ff8ef8, 0x03008b01, 0xfe0000fe, 0x030bff83, 0xffffffc0, 0xfc00007f, 0x9ff8ffff, 0x000002ff, 0x00ff8ffc, 0x03008b03, 0xfc0000fe, 0x010bff83, 0xffffff00, 0xfe000038, 0x9ef0ffff, 0x001f03ff, 0xff8ff800, 0x008b0300, 0x00007e03, 0x0bff83f0, 0xfffc0001, 0x000020ff, 0xf0ffffff, 0x0703ff9e, 0x8ff80000, 0x8b0300ff, 0x007e0300, 0xff838000, 0xfc00010b, 0x0001ffff, 0xffffff80, 0x07ff9ef0, 0xf8000003, 0xfbff7fff, 0x0300ff8b, 0x3f03008b, 0x83000000, 0x00010bff, 0x01fffff0, 0xffffc000, 0xff9df1ff, 0x80003f09, 0x3ffff801, 0x8ae7601f, 0x8a0300ff, 0x1f801400, 0xfc000000, 0x00ffffff, 0xffffe000, 0xc7c00000, 0x9dfbffff, 0x001f08ff, 0xfff01fe0, 0x8b00ffff, 0x8a0300ff, 0x1fc01100, 0xf8000000, 0x00ffffff, 0xffffc000, 0x87c00000, 0x9f00ff94, 0x0f08ff8a, 0xf03ff000, 0xc0ffffff, 0x0300ff8b, 0xe011008a, 0x0000000f, 0xfffffff0, 0xff800000, 0xc000007f, 0x00ff948f, 0x07ff8adf, 0x7ff80007, 0xf27ffff0, 0x0300ff8c, 0xe011008a, 0x00000007, 0xfffffff0, 0xfe000000, 0xc000003f, 0x07ffa09f, 0x7ff80007, 0xe0ffffe0, 0x0100ff8c, 0xe011008a, 0x00000003, 0xffffffe0, 0xfc000000, 0x8000001f, 0x07ffa09f, 0x7ffc0007, 0xfc1fffc0, 0x0100ff8c, 0xe011008a, 0x00000001, 0xc7ffffc0, 0xfc000000, 0x0000000f, 0x06ffa08e, 0xfffc0007, 0x8d1ffff7, 0x8a0100ff, 0x01e01200, 0x80000000, 0x0083ffff, 0x0ff80000, 0x04000000, 0x06ff9ffe, 0xfffe0003, 0x8dc0fbff, 0x8a0100ff, 0x01f00800, 0x80000000, 0x8301ffff, 0x830e0000, 0x9ff00000, 0x000306ff, 0x67fffffe, 0x00ff8df8, 0x08008a03, 0x000001f8, 0xffff8000, 0x00008307, 0x02008304, 0x9cfcff80, 0x01fb06ff, 0xfffffe00, 0x00ff8ebf, 0x00008a03, 0x020083fc, 0x8affffc0, 0xfcfc0100, 0xf903ff9c, 0x91fe0000, 0x8a0700ff, 0x83fc0000, 0xfff00200, 0x01008a7f, 0xff9cf8f8, 0x00007c07, 0xfffffffe, 0x00ff8dbf, 0x07008a0f, 0x0000003c, 0x3ffffc1f, 0xe001008a, 0x08ff9bf9, 0x00003e3f, 0xfffffffc, 0x00ff8dbf, 0x07008a1f, 0x0000001e, 0x1ffffe3f, 0xc001008a, 0x08ff9bfb, 0x00001f3f, 0xfffffffc, 0x00ff8dfd, 0x07008a1f, 0x4000001e, 0x0e81fe7f, 0x8000008a, 0x3f08ff9c, 0xfc00000f, 0xfcffffff, 0x1f00ff8d, 0x0f05008a, 0xff400000, 0x9c008d06, 0x0f1f08ff, 0xfffc0000, 0x8dfc7fff, 0x8a3f00ff, 0x000f0500, 0x07ffc000, 0xff9c008d, 0x00038708, 0xfffffc00, 0xff8dfc3f, 0x00897f00, 0x00078006, 0x030fe000, 0xfe00008d, 0xc308ff9b, 0xfc000001, 0xfc3fffff, 0x0089ff8e, 0x00038005, 0x8e03f000, 0x9bfe0000, 0x00e708ff, 0xfff80000, 0x8efc1fff, 0x880100ff, 0x03400400, 0x8ff80000, 0x9bfc0000, 0x006708ff, 0xffe00000, 0x8efe1fff, 0x880700ff, 0x00200400, 0x8f7c0000, 0x9bf80000, 0x003308ff, 0xff800000, 0x8efe1fff, 0x871f00ff, 0x200e0500, 0x7c000000, 0xf800008f, 0x3800ff9b, 0x1f020083, 0xff8f0ffe, 0x00873f00, 0x00101c05, 0x8f3c0000, 0x9af80000, 0x1c7f01ff, 0xfe010084, 0x00ff8f00, 0x0000873f, 0x00008318, 0x00008f18, 0x01ff9afc, 0x00861e7f, 0x3f00ff8f, 0x1c000085, 0xf8000096, 0x3f01ff9a, 0x8f00860c, 0x843f00ff, 0x1f800700, 0x0071f000, 0x00908000, 0xff9af800, 0x00873f00, 0x3f00ff8f, 0xe0040084, 0xffff801f, 0xf8020093, 0xff98e7ff, 0x00871f00, 0xff8efe00, 0x00847f00, 0xf83ff005, 0x9201ffff, 0xfffc0200, 0x00ff98c7, 0x0000871f, 0x84ff8ff8, 0xfffc0500, 0x01fffffc, 0xfe020092, 0xff98c7ff, 0x00870f00, 0xff8ff000, 0x00000104, 0xff84e000, 0x00920300, 0x47fffe03, 0x00ff97fe, 0x00008707, 0x04ff8fe0, 0x00000007, 0x00ff84f8, 0x03009207, 0x887fffff, 0x0088ff97, 0xff8f8000, 0x00000f04, 0xff84f000, 0x00920700, 0x1fffff03, 0x00ff9608, 0x0000897f, 0x04ff8efe, 0x0000001f, 0x01ff83f0, 0x0091079f, 0x0fff8005, 0x95f8007f, 0x893f00ff, 0x8efc0000, 0x3fdf04ff, 0x84f00000, 0x920700ff, 0x0fff0400, 0x95c000fe, 0x891f00ff, 0x90fc0000, 0x000102ff, 0x00ff84f0, 0x04009207, 0x3ffe0ffe, 0x00ff95c0, 0x0000891f, 0x0aff8efc, 0x0007ff8f, 0xfffffff0, 0x92060c3f, 0x0ffc0400, 0x95807ffe, 0x890f00ff, 0x8efc0000, 0xe00708ff, 0xf3f9ffff, 0x8307f8ff, 0x1fc00100, 0xf004008e, 0x83fffe0f, 0x0700ff95, 0xfe000089, 0x0008ff8e, 0xffffffc0, 0x07f0fff0, 0xf0010083, 0x05008d1f, 0xfe0ffdc0, 0xff958fff, 0x00890300, 0xff8df000, 0x80007f09, 0x9effffff, 0x8303e0ff, 0x1ff80100, 0xe005008d, 0xffff01ff, 0x00ff950f, 0x00008901, 0x09ff8df0, 0xff00007f, 0x7f3fffff, 0x008303f0, 0x8d1ff801, 0xfff00500, 0x1fffff81, 0x0100ff95, 0xf0000089, 0x7f09ff8d, 0x7fff0000, 0xf83f3ffc, 0x01008303, 0x008d1ff8, 0xc1ffc006, 0xfe1fffff, 0x0100ff94, 0xc0000089, 0x0008ff8e, 0xfc7fdf00, 0x01fc1f9f, 0xf8010083, 0x06008d1f, 0xff80c780, 0x94fe1fff, 0x890100ff, 0x8e800000, 0x000008ff, 0x0ffc7ffe, 0x8301f00d, 0x07f00100, 0x0604008e, 0x1ffffe00, 0x0100ff95, 0xff8e008a, 0xfc000008, 0x0e03fcff, 0x008330e0, 0x8e3ff001, 0x00040400, 0x953ffffc, 0x8a0100ff, 0x8dfc0000, 0x00000eff, 0xc0fffff0, 0x07c0000f, 0xf8003fe0, 0x0000903f, 0x87ff97fc, 0xe0600400, 0x8df00007, 0x00000fff, 0xe03effe0, 0x3ff0000f, 0xf8003ffc, 0x008f081f, 0xdffff802, 0x0087ff95, 0x0f007004, 0xff8cf000, 0x00007f0f, 0xf81fffe0, 0xfff00007, 0xfc001fff, 0x03009003, 0xf1fffff0, 0x0087ff94, 0x00007004, 0xff8cf000, 0x00007f0f, 0xfc0fffc0, 0xffe00000, 0xfe001fff, 0x03009001, 0xe07ffc40, 0x0087ff94, 0xf0c07004, 0xff8de003, 0x801e010e, 0x003e07e0, 0xffffe000, 0x01ff8007, 0xf0020091, 0xff9480ff, 0x00860100, 0x80e06005, 0x8d1f8003, 0x003f0fff, 0x000f0300, 0xffffc000, 0x007fc001, 0x008f0180, 0x80ffc002, 0x0100ff94, 0xe0060086, 0x000001e0, 0xff8cfe3c, 0x00003f0f, 0x00000f80, 0x007fff80, 0xe01c7fc0, 0x02008f03, 0x94f8ff80, 0x860100ff, 0xf1e00600, 0x00000007, 0x0fff8cc0, 0x8000003f, 0x80000001, 0xe0003c3f, 0x03c07fff, 0xff960090, 0x008c0100, 0xff8c1c00, 0x00863f00, 0x007e3e05, 0x837fffe0, 0x8d040000, 0x95fe0000, 0x860100ff, 0x03e00100, 0xbf000083, 0x1f00ff8c, 0x0c050086, 0xfff00078, 0x0100927f, 0xff94fdfc, 0x00850100, 0x03ffc009, 0x80000000, 0x8af7ffff, 0x890f00ff, 0xff800200, 0x0100923f, 0xff94f9f8, 0x80090086, 0x000003ff, 0x0bff8000, 0x00ff8ae0, 0x02008903, 0x921fff80, 0xf9f00100, 0x0400ff94, 0xfe000086, 0x80030083, 0x8af003ff, 0x01008bff, 0x009207ff, 0x93fde001, 0x047f01ff, 0x38080086, 0x80000000, 0xf007ff01, 0x0900ff8a, 0xf801008a, 0x01009203, 0xff93fde0, 0x8b021f01, 0xf3fe0300, 0xff8af007, 0x008a1f00, 0x00938000, 0x93f9c001, 0x8c0700ff, 0xfdf80200, 0x9fff8c0f, 0xe1c00100, 0x0300ff93, 0x9f00008e, 0x0300ff8c, 0x0200008e, 0xc001008e, 0x00ff93e1, 0x00008e01, 0x01ff8b1c, 0x009e0600, 0x93f1c001, 0x8e0100ff, 0x8b300000, 0x3c0101ff, 0xc004009e, 0xdffffff1, 0x0100ff90, 0x04040085, 0x1c000000, 0xff890084, 0x007e1f04, 0x009d01fc, 0xfff98004, 0xff908fff, 0x06040086, 0x1f000000, 0xff890084, 0x00f01f04, 0x009d03f8, 0xfff88004, 0xff8f0fff, 0x00867d00, 0x00000304, 0x00841e00, 0x3f04ff89, 0x03fe00e0, 0x01000096, 0x80040085, 0x0ffffff8, 0x1c00ff8f, 0x80050085, 0x80000003, 0x0000831f, 0x04ff8981, 0xff03e03f, 0x0000961f, 0x05008507, 0xfffffb80, 0xff8efc07, 0x00891c00, 0x830fc001, 0x89e00000, 0xe03f06ff, 0x00ffff07, 0x00009404, 0x0500850c, 0xffffffc7, 0xff86f807, 0xff86df00, 0x00891f00, 0x8307c001, 0x8af00000, 0x83e006ff, 0x7ff8ffff, 0x00009318, 0x00008408, 0x01ff8380, 0xff87c007, 0xff85fc00, 0x00890e00, 0x833fc001, 0x8afc0000, 0xc06106ff, 0xfff0ffff, 0x0000937f, 0x00008418, 0x01ff83e0, 0xff87c003, 0xff84e100, 0x89027f01, 0xffff0500, 0x80000000, 0x3f06ff8b, 0x90ffffe0, 0x00997ffd, 0xff838000, 0x87c00301, 0x841f00ff, 0x897f00ff, 0xffe00600, 0x000001f7, 0x06ff8bc0, 0x7ffff83f, 0x9a7fe078, 0xfffe0600, 0x0007ffff, 0x01ff86fe, 0xff83fc7f, 0x00893f00, 0xfffff806, 0xe0000001, 0x1f06ff8b, 0x787ffff8, 0x009a7f80, 0xfffffc05, 0x880007ff, 0xfcf105ff, 0x07ffffff, 0xff060089, 0x0001ffff, 0xff8be000, 0xfff01f07, 0xff8079ff, 0x05009910, 0xfffffff0, 0xff88001f, 0xfff8c305, 0x8843ffff, 0xfff00700, 0x0000ffff, 0xff8bf000, 0xfffe1f07, 0xff803fff, 0x0500991f, 0xffffffc0, 0xff88001f, 0xfff30305, 0x8801ffff, 0xfff80700, 0x00007fff, 0xff8bf800, 0xfffe3f07, 0xff803f8f, 0x0000991f, 0x00ff8380, 0x05ff8780, 0xfffc0013, 0x00897fff, 0xfffffe07, 0x1f00001f, 0x04ff8efc, 0xff001e07, 0x83009a0f, 0xfb0301ff, 0x0305ff86, 0xffffde00, 0x0700890f, 0x3fffffff, 0xfe3fc000, 0x0304ff8e, 0x1ffc0000, 0xf005009a, 0x07fe07c7, 0x06ff85fe, 0x18000339, 0x8801ffff, 0xff800700, 0x007fffff, 0xff833fc0, 0xff8abf00, 0x00000305, 0x9c3ffff8, 0x1fff0200, 0x05ff85fe, 0x3000000f, 0x008901f8, 0xffff8006, 0xc0007fff, 0x0701ff84, 0x05ff89fc, 0xf8000003, 0x009c3c01, 0x007ffe03, 0x03ff848e, 0x4000000f, 0xff05008c, 0x003fffff, 0x02ff83e0, 0x89fc003f, 0x000103ff, 0x009efe00, 0x01e7f804, 0xff83fe00, 0x008a0300, 0x00830600, 0xfffffe05, 0x83fc007f, 0x001f02ff, 0x03ff89fc, 0xff000001, 0xe004009e, 0xf8000387, 0x0700ff83, 0x0400008a, 0xfc0c0083, 0x0033ffff, 0xffffe1ff, 0xfc000fff, 0x0303ff89, 0xa0ff0000, 0x00030200, 0x00ff8380, 0x0c008f0f, 0xffc7fff0, 0xfff82fff, 0x0003ffff, 0x03ff89f8, 0xfe00000f, 0x060700a0, 0xff800000, 0x8f9ff7ff, 0x83800000, 0x060707ff, 0x01ffffff, 0xff89f000, 0x00007f03, 0x0000a3fc, 0x00ff8380, 0x0b008f0f, 0xfffe78df, 0xfffe0003, 0xe00000ff, 0x8300ff83, 0x0303ff85, 0xa203e000, 0x83c00000, 0x8f0f00ff, 0x80701100, 0x0000ffff, 0x007fffe0, 0xffffe000, 0xf8007fff, 0x0706ff84, 0x000f8000, 0x009f7800, 0xc3ffe005, 0x8f0e03ff, 0x80601100, 0x0000003f, 0x007fffc0, 0xffffe000, 0xc0003fff, 0x1f07ff84, 0x001f8000, 0x9e060e00, 0xfec80300, 0x0089ff80, 0x00861000, 0x84104001, 0x7fff0a00, 0xff000000, 0x003fffff, 0x07ff8480, 0x7f00003f, 0x03ff0000, 0x0602009f, 0x00897c00, 0x8c07f001, 0x1ffe0a00, 0xe0000000, 0x020fffff, 0x07ff84e0, 0x1c00007f, 0x07fe0000, 0xf80200a1, 0x00870387, 0x8c07fc01, 0x0ffe0500, 0x80000000, 0x0083ff8a, 0x380f8003, 0x00008402, 0x02009a40, 0x8703fffe, 0x8de00000, 0x0ffe0100, 0xfc000083, 0x0100ff89, 0xe0010084, 0x01008407, 0x009801c0, 0x3fffc002, 0xff010097, 0x0000830f, 0x00ff89f8, 0x02008407, 0x8301f3e0, 0x03800100, 0xe0020098, 0x008a07ff, 0x8a31fc01, 0x1fff0100, 0xf0000083, 0x1f00ff89, 0xf8020084, 0x00840f83, 0x97010e01, 0xffe00200, 0x00008a01, 0x01008b18, 0x00843ffe, 0xff88f800, 0x00833f00, 0xe3ff800a, 0x008070ff, 0x03060080, 0xf0020097, 0x008503ff, 0x00000305, 0x8b046000, 0xfffe0200, 0x89008401, 0x090083ff, 0xe3fffff0, 0xf003ffff, 0x0094bf00, 0x00007006, 0x7ffff800, 0xe0050084, 0x0000000f, 0x03008b7f, 0x0183ff80, 0xf8000084, 0x030dff88, 0xffe00000, 0xfff7ffff, 0x007f01ff, 0x13009203, 0x007c0010, 0xfe380000, 0x000001ff, 0xffffc600, 0x3fff3007, 0xc002008b, 0x008503ff, 0xff89f000, 0x85000001, 0xff3f04ff, 0x9203001f, 0xfffc0c00, 0x000fff7f, 0x1fffe000, 0x83f80000, 0xfffc02ff, 0x02008b1f, 0x8503ffc0, 0x890e0000, 0x108f01ff, 0x3f04ff87, 0x08000700, 0xfc0c0090, 0x0fffffff, 0x01e00000, 0xfc0003f8, 0xfb01ff84, 0x02008b0f, 0x8507ff80, 0x90060000, 0xfe0f07ff, 0x03801fff, 0x00890c00, 0x00833800, 0xff84f800, 0x00000709, 0x0fe000e0, 0x83e00000, 0x01008dff, 0x0086ffc0, 0xff90c000, 0xffff0007, 0x0061807f, 0x04008908, 0x001bfe7c, 0x00ff8500, 0x03008803, 0x3ffff3c0, 0x8005008a, 0xfff810ef, 0x00008501, 0x07ff9080, 0xffffff83, 0x03c3ef00, 0xfe040089, 0x80000fff, 0x0100ff85, 0xf001008a, 0x00008a3f, 0x87ff83f4, 0x06ff9000, 0xffffff03, 0x8a7fef01, 0xfffe0300, 0xff84f87f, 0x008c0100, 0x877fe001, 0x01800700, 0xfffffe00, 0x00873fff, 0xff8ffe00, 0xfffc0f06, 0x7fffe7ff, 0x03080085, 0x003fc000, 0xe07ffffe, 0x0100ff84, 0xe001008c, 0x010087ff, 0xff84fe1f, 0x00873f00, 0xff8ffc00, 0x85f81f01, 0x010084ff, 0xff84f218, 0xffc00704, 0x008f0381, 0x877fe001, 0x00ff8600, 0x0000870f, 0x00ff90e0, 0x00ff85e0, 0x01008303, 0xff84f3c0, 0x03c07f02, 0xfe010092, 0x0000880f, 0x00ff83fc, 0x00008707, 0x00ff90e0, 0x00ff8501, 0x00008407, 0x02ff84fc, 0x9207c001, 0x89e00000, 0x83f80000, 0x000088ff, 0x01ff90f0, 0xff84f807, 0x00843f00, 0xff84f800, 0xf5c00002, 0xef03009d, 0x8963ffff, 0x90f00000, 0x007f02ff, 0x00ff84fc, 0x0800833f, 0xfffbfff0, 0xf000ffff, 0x02009d77, 0x8a3fff80, 0x92f80000, 0x860100ff, 0x000708ff, 0x81fff800, 0xa101ff87, 0x07ff0100, 0xc000008a, 0x1f00ff86, 0x3f00ff8a, 0x1f04ff86, 0xffffff00, 0xfc0100a5, 0x00008a07, 0x02ff86e0, 0x91f3fe03, 0xffe003ff, 0x00a603ff, 0x008a0100, 0xff86f800, 0xf87c0102, 0xf703ff90, 0xb31fffff, 0x85fc0000, 0x187f03ff, 0xff90fe30, 0xffe00f03, 0x0000b303, 0x02ff85f0, 0x90e0001f, 0x180104ff, 0xb301fffc, 0x85f00000, 0x120f03ff, 0xff8f001a, 0xfff80003, 0x0000b43f, 0x02ff87f8, 0x85fc0007, 0x86f500ff, 0x800f04ff, 0xb33fffff, 0x800c0200, 0x03ff8dfb, 0xb075ff8f, 0x3f03ff85, 0xb41f03c0, 0x01d80200, 0x09ff8f40, 0x007ffff1, 0xfffff800, 0x00b67bff, 0xc1ff8c0d, 0x007fffff, 0xffffffce, 0x86f8001f, 0x851f00ff, 0xb6020000, 0xff800400, 0x8b03ffff, 0xfff00400, 0xb90fffff, 0x00800700, 0xfff80000, 0x00cb3003, 0x000ffe05, 0xce7fffc0, 0xff700000, 0xff00ff00, 0xff00ff00, 0xff00ff00 );\n\nconst int rle_len_bytes = rle.length() << 2;\n\nint get_rle_byte(in int byte_index) {\n    int long_val = rle[byte_index >> 2];\n    return (long_val >> ((byte_index & 0x03)<< 3))& 0xff;\n}\n\nint get_uncompr_byte(in int byte_index) {\n    int rle_index = 0;\n    int cur_byte_index = 0;\n    while(rle_index < rle_len_bytes) {\n        int cur_rle_byte = get_rle_byte(rle_index);\n        bool is_sequence = int(cur_rle_byte & 0x80)== 0;\n        int count = (cur_rle_byte & 0x7f)+ 1;\n\n        if(byte_index >= cur_byte_index && byte_index < cur_byte_index + count) {\n            if(is_sequence) {\n                return get_rle_byte(rle_index + 1 + (byte_index - cur_byte_index));\n            }\n            else{\n                return get_rle_byte(rle_index + 1);\n            }\n        }\n        else {\n            if(is_sequence) {\n                rle_index += count + 1;\n                cur_byte_index += count;\n            }\n            else {\n                rle_index += 2;\n                cur_byte_index += count;\n            }\n        }\n    }\n\n    return 0;\n}\n\n\nint getPaletteIndexXY(in ivec2 fetch_pos) {\n    int palette_index = 0;\n    if(fetch_pos.x >= 0 && fetch_pos.y >= 0\n        && fetch_pos.x < int(bitmap_size.x)&& fetch_pos.y < int(bitmap_size.y)) {\n        int uncompr_byte_index = fetch_pos.y * (int(bitmap_size.x)>> 3)\n            + (fetch_pos.x >> 3);\n        int uncompr_byte = get_uncompr_byte(uncompr_byte_index);\n\n        int bit_index = fetch_pos.x & 0x07;\n        palette_index = (uncompr_byte >> bit_index)& 1;\n    }\n    return palette_index;\n}\n\n\nint getPaletteIndex(in vec2 uv) {\n    int palette_index = 0;\n    ivec2 fetch_pos = ivec2(uv * bitmap_size);\n    palette_index = getPaletteIndexXY(fetch_pos);\n    return palette_index;\n}\n\nvec4 getColorFromPalette(in int palette_index) {\n    int int_color = palette[palette_index];\n    return vec4(float(int_color & 0xff)/ 255.0,\n                float((int_color >> 8)& 0xff)/ 255.0,\n                float((int_color >> 16)& 0xff)/ 255.0,\n                0);\n}\n\nvec4 getBitmapColor(in vec2 uv) {\n    return getColorFromPalette(getPaletteIndex(uv));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 r = iResolution.xy / bitmap_size;\n    vec2 uv = fragCoord / bitmap_size / r;\n    \n    fragColor = getBitmapColor(uv);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 hash21(float p) {\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 diskPt(vec2 p) {\n    return sqrt(p.x) * vec2(sin(6.2832 * p.y), cos(6.2832 * p.y));\n}\n\nbool useSquareDistribution = false;\n\nvec2 sample_biquadratic_gradient(sampler2D channel, vec2 res, vec2 uv) {\n    vec2 q = fract(uv * res);\n    vec2 c = (q*(q - 1.0) + 0.5) / res;\n    vec2 w0 = uv - c;\n    vec2 w1 = uv + c;\n    vec2 cc = 0.5 / res;\n    vec2 ww0 = uv - cc;\n    vec2 ww1 = uv + cc;\n    float nx0 = texture(channel, vec2(ww1.x, w0.y)).r - texture(channel, vec2(ww0.x, w0.y)).r;\n    float nx1 = texture(channel, vec2(ww1.x, w1.y)).r - texture(channel, vec2(ww0.x, w1.y)).r;\n    float ny0 = texture(channel, vec2(w0.x, ww1.y)).r - texture(channel, vec2(w0.x, ww0.y)).r;\n    float ny1 = texture(channel, vec2(w1.x, ww1.y)).r - texture(channel, vec2(w1.x, ww0.y)).r;\n\treturn vec2(nx0 + nx1, ny0 + ny1) / 2.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy;\n    vec2 uv = fragCoord / res;\n    vec3 pr = texture(iChannel1, uv).xyz;\n    if (useSquareDistribution)\n        uv += 1.333 * hash21(mod(iTime, 1000.)) / res;\n    else\n        uv += 1.15 * diskPt(hash21(mod(iTime, 1000.))) / res;\n    \n    float fr = texture(iChannel0, uv).x;\n    vec2 grd = sample_biquadratic_gradient(iChannel0, res, uv);\n    \n    fr = mix(fr, pr.z, .99);\n    grd = mix((grd), pr.xy, .99);\n    \n    fragColor = vec4(vec3(grd, fr), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}