{
    "Shader": {
        "info": {
            "date": "1636185360",
            "description": " ",
            "flags": 32,
            "hasliked": 0,
            "id": "ftcGD7",
            "likes": 17,
            "name": "大龙猫 - Look mom i'm evvvvil",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 491
        },
        "renderpass": [
            {
                "code": "/******\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n\n== Do not buy NFT ==\n== Do not make NFT with Creative-Commons artworks ==\n== If you respect the art and the artists, remember and apply this ==\n\n01000110011101010110001101101011 011011100110011001110100\n\n                                                                               \n _|_|_|_|                      _|            _|      _|  _|_|_|_|  _|_|_|_|_|  \n _|        _|    _|    _|_|_|  _|  _|        _|_|    _|  _|            _|      \n _|_|_|    _|    _|  _|        _|_|          _|  _|  _|  _|_|_|        _|      \n _|        _|    _|  _|        _|  _|        _|    _|_|  _|            _|      \n _|          _|_|_|    _|_|_|  _|    _|      _|      _|  _|            _|      \n                                                                          \n\n01000110011101010110001101101011 011011100110011001110100\n\n******/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n  vec4 pframe = texture(iChannel0,fragCoord.xy/iResolution.xy);\n    // Output to screen\n    fragColor = vec4(pframe.xyz,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\n// ka = radius close to a, kb = radius close to b\n// https://www.shadertoy.com/view/Nt3GWH\n// credit to @paniq \nfloat brsmin( float a, float b, float ka, float kb)\n{\n    float s = a-b;\n    float k = (ka + kb + (kb - ka)*s/max(ka,kb))*0.5;\n    const float p = 2.0;\n    float h = max( k - abs(s), 0.0 )/k;\n    return min( a, b ) - pow(h,p)*k*(1.0/(2.0*p));\n}\nfloat diam(vec3 p,float s){\n  \n    p = abs(p);\n   return (p.x+p.y+p.z-s)*inversesqrt(3.);\n  }\n  \n  float di(vec3 p){\n      float q =0.;\n      vec4 pp = vec4(p,1.);\n      for(float i=0.;i<=8.;i++){\n          pp*=1.1;\n          p.xz *=rot(.1+i);\n          q +=clamp( (asin(.9*sin(p.x*3.3))*acos(.8*cos(p.z*2.))),.0,.2)/pp.a;\n        }\n        return q/pp.a;\n    }\n float diam(vec2 p,float s){\n  \n    p = abs(p);\n   return (p.x+p.y-s)*inversesqrt(3.);\n  }\n float box(vec3 p, vec3 b){\n    vec3 q =abs(p)-b;\n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n   }\n   vec3 gp ;\nvec2 sdf(vec3 p){\n    vec2 h ;\n    h.x = 1e10;\n      gp =p;\n  p/=10.;  \n  p.xz = asin(sin(p.xz)*.8);\n   p*=10.;\n\n    vec4 hp =vec4(p,1.) ;\n     for(float i=0.;i<=4.;i++){\n         hp.xz = abs(hp.zx)-1.5;\n           hp*=1.3;\n         hp.xy *=rot(-.785+i);\n         hp.xz *=rot(.785*i);\n         \n           vec2 t ;\n           vec3 tp = hp.xyz;\n           tp.xy *= rot(tp.z*.1);\n         t.x = (diam(tp.xy,.1+i/16.))/hp.a;\n         t.y = 2.+i;\n          h = t.x < h.x  ? t:h;\n       }\n       float r = di(p);\n      vec2 t ;\n         t.x = box(hp.xyz,vec3(1.,1.5,2.0))/hp.a;\n         t.x = brsmin(t.x, diam(abs(p.xyz)-.5,2.),.5,.5);\n         t.y = 1.;\n     h = t.x < h.x  ? t:h; \n\n      t .x =brsmin(h.x, dot(vec3(0.,1.,0.),p)+r,1.5,5.0);\n      t.y = 0.;\n      h = t.x < h.x ? t:h;\n       \n       t.x = length(gp+vec3(.0,-3.5,.0))-2.;\n       t.y = .5+fract(iTime+log(length(gp.zx))+r);\n        h = t.x < h.x ? t:h;\n          \n        vec3 tp= gp+vec3(.0,-2.5,.0);\n        tp.x = abs(tp.x)-3.5;\n        tp.xz *=rot(tp.y*.5);\n          t.x = diam(tp.xz,.5);\n       t.y = -1.;\n        h = t.x < h.x ? t:h;\n  return h;\n  }\n  \n#define q(s) s*sdf(p+s).x\nvec3 norm(vec3 p, float ee){vec2 e= vec2(-ee,ee);return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\n\n\n#define ao(rp,n,k) clamp(sdf(rp+n*k).x/k,0.,1.)\n#define gao(rp,n) (.1+( ao(rp,n,.1)+ao(rp,n,.5)+ao(rp,n,.7) )/3.)\n\nfloat h21(vec2 p){\n    return fract(sin(dot(p,vec2(9995.3564,5614.4968)))*6114.6554);\n  }\n  vec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(.1,.2,.3)));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n vec3 col = vec3(0.1);\n  \n  vec2 puv = uv; \n  puv = (puv*vec2(iResolution.y / iResolution.x, 1.))+.5;\n  \n\n  // Unecessary, but why not\n  float ra = h21(uv+iTime);\n  float rb = h21(ra+uv+iTime);\n  float rc = h21(rb+ra+uv+iTime);\n  vec3 r = vec3(fract(ra+rb),fract(rb+rc),fract(rc+ra))*.03;\n  vec3 ro = r +vec3(sin(iTime*.1)*15.,10.1,cos(iTime*.1)*15.);\n  vec3 rt = vec3(1e-10)+r;\n  \n  vec3 rp = ro;\n  vec3 z = normalize(rt-ro);\n  vec3 x = normalize(cross(z,vec3(0.,-1.,0.)));\n  vec3 y = normalize(cross(z,x));\n  \n  vec3 rd = mat3(x,y,z)*normalize(vec3(uv,1.));\n  vec3 light = vec3(1.,2.,-3.);\n  vec3 acc = vec3(0.);\n  float dd = 0.;\n  for(float i=0.;i<=128.;i++){\n    \n      vec2 d = sdf(rp);\n      dd +=d.x;\n      if(d.y >=2. && d.x < 1.){\n        \n          acc += pal(d.y/5.)*exp(-abs(d.x))/(240.-220.*sin(length(gp)*3.-iTime*2.));\n          d.x = max(.005,d.x);\n        }\n      if(dd>60.) break;\n      if(d.x< .001 && d.y <= 1.){\n      // evvvvil-ish light\n           vec3 n = norm(rp,.001);\n           float diff= max(0.,dot(normalize(light-rp),n));\n        float spc = pow(max(0.,dot( -rd , reflect(-normalize(light),n))),48.);\n        float fr = pow(1.+dot(n,rd),8.);\n        if(d.y == 0.){\n        // This is cool, but expensive\n          // vec3 nn = norm(rp,.002-texture(texFFT,fGlobalTime+.3+rp.y).r);\n         // float qq = length(n-nn); \n          col = mix(vec3(.0)*gao(rp,n)+spc+vec3(.1)*diff,col,min(fr,.5)); \n         //  acc += pal(qq)*step(.15,qq);\n        } \n        else if(d.y ==1.) {\n           col = mix(vec3(.4)*gao(rp,n)+spc+vec3(1.)*diff,col,min(fr,.5)); \n        } else if(d.y ==-1.){\n          \n            rd = reflect(rd,n);\n            rp +=rd*.1;\n            col +=pal(rp.y)*.2;\n            continue;\n          }\n         \n          col = pow(col,vec3(.4545));\n          break;\n      }\n      rp +=rd*d.x;\n  }\n  col +=acc;\n   col = mix(col,texture(iChannel0,puv).rgb,.75);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}