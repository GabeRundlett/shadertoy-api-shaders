{
    "Shader": {
        "info": {
            "date": "1518807231",
            "description": "Let the noise dance ",
            "flags": 0,
            "hasliked": 0,
            "id": "XscyDN",
            "likes": 4,
            "name": "Music + Noise != Boring",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "noise",
                "richiehawtin"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 647
        },
        "renderpass": [
            {
                "code": "#define EPS 0.001\n#define FAR 10.0\n#define STEPS 128\n\nfloat hash(vec2 p)  // replace this by something better\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat map( vec3 p, vec2 uv )\n{\n\n\tfloat wave = texture( iChannel0, vec2( uv.y, 0.75 ) ).x;\n    wave *= 0.1;\n    \n    float f = 0.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf += wave*0.2344*noise( uv ); uv = m*uv;\n\tf += wave*0.34253*noise( uv ); uv = m*uv;\n\tf += wave*0.484348*noise( uv ); uv = m*uv;\n\tf += wave*0.32423*noise( uv ); uv = m*uv;\n    f += wave*0.48539*noise( uv ); uv = m*uv;\n    \n    float r = 2.0 + 0.12 + cos( 10.0* f * p.y + sin( iTime )  ) + cos( 3.0 * f * p.z + cos( iTime ) );\n    return length( p ) - r;\n    \n}\n\nvec3 grad( vec3 e, vec2 uv )\n{\n\n    vec2 q = vec2( EPS, 0.0 );\n    return vec3( map( e + q.yxx, uv ) - map( e - q.yxx, uv ), \n                 map( e + q.xyx, uv ) - map( e - q.xyx, uv ),\n                 map( e + q.xxy, uv ) - map( e - q.xxy, uv )\n    \t\t\t);\n    \n}\n\nvec3 shade( vec3 ro, vec3 rd, float t, vec2 uv )\n{\n\n    return normalize( grad( ro + rd * t, uv ) );\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord.xy ) / iResolution.y;\n    \n    vec4 mouser = iMouse / iResolution.xyxy;\n    \n    vec3 ro = vec3( mouser.x, mouser.y, 6.0 );\n    vec3 rd = normalize( vec3( uv, -1.0 ) );\n    \n    float t = 0.0;\n    float d = EPS;\n    \n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = map( ro + rd * t, uv );\n        \n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n        \n    }\n    \n    // Time varying pixel color\n    vec3 col = d < EPS ? shade( ro, rd, t, uv ) : vec3( 0.0 ) ;\n    \n    col = pow( col, vec3( 0.45 ) );\n\n    // Output to screen\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}