{
    "Shader": {
        "info": {
            "date": "1614909666",
            "description": "Quick-and-dirty Negabrot (negative Mandelbrot) orbit visualizer.\nClick and drag to view the orbits for any given starting point.\n\nEDIT: Thanks to FabriceNeyret2 for faster complex ops!",
            "flags": 0,
            "hasliked": 0,
            "id": "wlKfzt",
            "likes": 6,
            "name": "Simple Negabrot orbit demo",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "negabrot"
            ],
            "usePreview": 0,
            "username": "FutureFractal",
            "viewed": 426
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 200\n#define DOT_SIZE 0.04375\n\nvec2 complex_mul(vec2 a, vec2 b)\n{\n    return mat2(a, -a.y, a.x) * b;\n}\n\nvec2 complex_pow2(vec2 z)\n{\n\treturn mat2(z, -z.y, z.x) * z;\n}\n\nvec2 complex_inv(vec2 z)\n{\n    return vec2(z.x, -z.y) / dot(z,z);\n}\n\nvec3 h2rgb(float h)\n{\n    // source: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(h) + K.xyz) * 6.0 - K.www);\n    return clamp(p - K.xxx, 0.0, 1.0);\n}\n\nvec2 scaleFragCoord(vec2 coord)\n{\n    coord = (coord*2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    coord *= 1.75;\n    return coord;\n}\n\nvec3 drawNegabrot(vec2 c)\n{\n    vec2 mc = scaleFragCoord(iMouse.xy);\n    vec2 z = c, mz = mc;\n    \n    float sigma = 0.;\n    \n    for (int i = 0; i < MAX_ITER; ++i) {\n    \n        if (length(mz - c) < DOT_SIZE) {\n            return h2rgb(float(i) / float(MAX_ITER));\n        }\n    \n        // Draw the Negabrot using the Lyapunov exponent method\n\t\t// d/dz (z^(-2)+c) = -2(z^(-3))\n        vec2 zr  = complex_inv(z);\n        vec2 zr2 = complex_pow2(zr);\n        sigma += log(length(-2.0 * complex_mul(zr, zr2)));\n        z = zr2 + c;\n        \n        mz = complex_inv(complex_pow2(mz)) + mc;\n\t}\n    \n    float mag = abs(sigma * (1.0 / float(MAX_ITER)));\n    mag = mag / sqrt((mag * mag) + 1.0); // same as sin(atan(mag))\n    mag = (mag * 0.95) + 0.05;\n\t\n\treturn vec3(mag);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 c = scaleFragCoord(fragCoord);    \n\tvec3 color = drawNegabrot(c);\n\tfragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}