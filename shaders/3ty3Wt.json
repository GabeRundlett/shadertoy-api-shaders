{
    "Shader": {
        "info": {
            "date": "1580481533",
            "description": "inside of mandelbox",
            "flags": 40,
            "hasliked": 0,
            "id": "3ty3Wt",
            "likes": 16,
            "name": "[â™ª]Caged Star",
            "published": 3,
            "tags": [
                "raymarching",
                "music",
                "mandelbox"
            ],
            "usePreview": 0,
            "username": "Catzpaw",
            "viewed": 883
        },
        "renderpass": [
            {
                "code": "//---Caged Star\n// by Catzpaw 2020\n\n//Image:post effect\n\n#define ITER   20.\n#define RADIUS 0.05\n\nvec4 tx(vec2 uv){return texture(iChannel0,uv);}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv=fragCoord/iResolution.xy;\n    vec2 m=vec2(1,iResolution.x/iResolution.y);\n    vec4 c=tx(uv);\n    float a=sin(iTime*.1)*6.283,v=0.,b=1./ITER;\n    for(int j=ZERO;j<6;j++){\n        float r=RADIUS/ITER;\n        vec2 d=(vec2(0,1)*rot(a))*m;\n        for(int i=ZERO;i<int(ITER);i++){\n            v+=tx(uv+d*r*RADIUS).w*(1.-r);\n            r+=b;\n        }\n        a+=1.047;\n    }\n    v*=6e-3;\n    c+=v;\n    c.w=1.;\n\tfragColor=c;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//---Caged Star\n// by Catzpaw 2020\n\n//BufferA:scene\n\n#define ITER 120\n#define NEAR .01\n#define FAR 13.\n#define EPS 1e-5\n\n//OBJECTS\nfloat cube(vec3 p){\n    p=abs(p)-.1;\n    return length(max(p,0.)+min(max(p.x,max(p.y,p.z)),0.));\n}\nfloat mandelbox(vec3 p){\n    float s=2.,r=.7;\n\tvec3 o=p;\n\tfor(int i=ZERO;i<8;i++){\n\t\tp=clamp(p,-1.008,1.008)*2.03-p; //boxfold\n        float l=cube(p);\n        if(l<.5){p*=2.1;r*=2.1;}else if(l<3.8){p/=l;r/=l;} //ballfold\n        p=o+p*s;r=r*abs(s)+1.;\n\t}\n\treturn .25-length(p)/abs(r);\n}\n\n//SCENE\nfloat map(vec3 p){\n    return min(mandelbox(p),length(p)-1.2);\n}\n// \"Log-Bisection Tracing\" by Nimitz\n// https://www.shadertoy.com/view/4sSXzD\nfloat trace(vec3 ro,vec3 rd){\n    float t=NEAR,lt=t;\n    vec3 p=ro+rd*t;\n    float d=map(p);\n    bool s=d>0.?true:false;\n    bool b=false;\n    for(int i=ZERO;i<ITER;i++){\n        if(abs(d)<EPS*t||t>FAR)break;            \n       \tif((d>0.)!=s){b=true;break;}\n        lt=t;\n        t+=d>1.?d*.5:log(abs(d)+1.);\n        p=ro+rd*t;\n       \td=map(p);\n    }\n    if(b){\n        float m=0.;\n        p=ro+lt*rd;\n        s=map(p)>0.?true:false;;\n        for(int i=ZERO;i<6;i++){ \n            m=(lt+t)*.5;\n            p=ro+rd*m;\n            d=map(p);\n            if(abs(d)<EPS*t)break;\n            (d<0.)==s?t=m:lt=m;\n        }\n        t=(lt+t)*.5;\n    }\n    return t;\n}\n\n//MATERIALS & SHADING\nvec3 normal(vec3 p){\n    const vec2 d=vec2(1,-1);\n    const float e=5e-3;\n    return normalize(\n        d.xyy*mandelbox(p+d.xyy*e)+\n        d.yxy*mandelbox(p+d.yxy*e)+\n        d.yyx*mandelbox(p+d.yyx*e)+\n        d.xxx*mandelbox(p+d.xxx*e));\n}\nvec3 light(vec3 ld,vec3 rd,vec3 v,vec3 c,vec3 no){\n    float ph=pow(max(dot(reflect(ld,no),-rd),0.),4.);\n    return v*(c*pow(.5+dot(no,-ld)*.5,2.)+ph)+pow(ph,10.);\n}\nfloat reflection(vec3 ro,vec3 no,vec3 rd){\n    vec3 rr=normalize(reflect(rd,no));\n    float t=.92,n=1.;\n    for(int i=ZERO;i<10;i++){float d=mandelbox(ro+rr*t);if(d<1e-3)break;t+=d;n+=1.;}\n    return pow(.22-dot(normal(ro+rr*t),no)*(n*.078),4.);\n}\nfloat shadow(vec3 ro){\n    vec3 rr=normalize(-ro);\n    float t=2.2;\n    for(int i=ZERO;i<10;i++){float d=mandelbox(ro+rr*t);if(d<1e-2)return .3;t+=d*2.5;}\n    return 2.5;\n}\nfloat ao(vec3 p,vec3 no){\n\tfloat o=1.,s=1.;\n    for(float i=1.;i<3.;i++){float r=.3*i;o+=(mandelbox(no*r+p)-r)*s;s*=.9;}\n    return clamp(o,.2,1.);\n}\nvec4 material(in vec3 p,in vec3 rd){\n    const vec3 ld=vec3(.577);\n    float l=floor(length(p)*.411);\n    vec3 c=l<1.?vec3(.85):vec3(sin(l)*.6,sin(l*.6)*.6,sin(l*4.4));\n\tvec3 no=normal(p);\n    vec3 l1=light(ld,rd, vec3(.9,.95,1.),c,no);\n    vec3 l2=light(-ld,rd,vec3(.7,.65,.6),c,no);\n    vec3 l3=l<1.?c:light(normalize(p),rd,vec3(.6),c,no);\n    vec3 l4=(l==1.)?vec3(reflection(p,no,rd)):vec3(0);\n         l4=(l==3.)?vec3(reflection(p,no+sin(p*15.+iTime*10.)*sin(p*7.+iTime*8.),rd)):l4;\n    float s=l>1.?shadow(p):4.;\n    c=clamp(ao(p,no)*(l1+l2+l3*s+l4*s*.2)*.4,-1.,2.8); ////\n    return vec4(c,pow(length(c+.1),2.+hash(p+iTime)*2.5));\n}\n\n//MAIN\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv=(fragCoord-iResolution.xy*.5)/iResolution.y;\n    vec3 ro=vec3(0,0,-3.8+clamp(sin(3.14+iTime*.1)*30.,-1.,1.));\n    ro.xz*=rot(iTime*.2);\n    ro.xy*=rot(iTime*.35);\n\tvec3 rd=vec3(uv.x,uv.y,.6);\n    rd.xz*=rot(iTime*.2);\n    rd.xy*=rot(iTime*.43);\n    rd=normalize(rd);\n\tfragColor=material(ro+trace(ro,rd)*rd,rd);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//---Scale Sequencer 2\n// by Catzpaw 2020\n// https://www.shadertoy.com/view/3tVGz3\n\n//SETUP\nconst float base =432.;\t//A tuning (Hz)\nconst float bpm  =98.;\t//beats per minute\nconst float steps=240.;\t//block length\nconst float start=1.;   //start count (beats)\nconst float fade =10.;  //fade out time (sec)\nconst float sec  =180.; //performance time (includes fade out time and start count)\nconst float gateseed=441.;\nconst float noteseed=849.;\nconst int chord3=4; //3rd tone(default:2)\nconst int chord5=7; //5th tone(default:4)\n\n//SCALE\nint key=2; //0:C 1:C+ 2:D 3:D+ 4:E 5:F 6:F+ ... 11:B\nint scale=0;\nconst uint[12] scl=uint[](\n    0xcb975420u, //0:major\n    0xca875320u, //1:natural minor\n    0xcb875320u, //2:harmonic minor\n    0xcb975320u, //3:melodic minor\n    0xa9765320u, //4:blues octatonic\n    0xa9764310u, //5:blues diminished octatonic\n    0xc9974420u, //6:major pentatonic (to heptatonic)\n    0xca775530u, //7:minor pentatonic (to heptatonic)\n    0xcb775540u, //8:ryukyu pentatonic (to heptatonic)\n    0xcb755420u, //9:ryukyu hexatonic (to heptatonic)\n    0xba875410u, //10:maqam hijaz octatonic\n    0xba876320u);//11:gypsy minor octatonic\nint scalenote(int y){\n    return y<0?-999:key+((int(scl[scale])>>(y&7)*4)&15);\n}\n\n//PATTERN\n// melodic:range(4),rest(4),seed1(12),seed2(12)\n// percussive:note(2x16)\nconst uint[36] pat=uint[](\n    0x37000000u,0x37011171u,0x47012172u,0x37011773u,  //00-   melody\n    0x37054394u,0x37054c95u,0x44226166u,0x34617167u,\n    0x34028168u,0x34019119u,0x4401a11au,0x3440417cu,  //  -0B\n    0x44001434u,0x44001491u,0x44001022u,0x44001022u,  //0C-0F backing\n    0x1162a000u,0x2162a803u,0x4162a802u,0x4162a801u,  //10-13 chord\n    0x12118151u,0x1761a890u,0x17143327u,0x17957631u,  //14-17 bass\n    0x3a3a3a3au,0x393a393au,0x39393939u,0x99999999u,  //18-1B sd+hh\n    0x00000000u,0xb9b979b9u,0xb9b979b9u,0x55555555u,  //1C-1F bd+conga\n    0x10000100u,0x10000100u,0x10000100u,0x10000100u); //20-23 chord\n\n//SEQUENCE\n// speed(4),degree1(4),pattern1(8),division(4),degree2(4),pattern2(8)\n// speed    0:0.5x 1:1x 2:2x 3:4x\n// degree   0:mute 1:I  2:II 3:III 4:IV 5:V 6:VI 7:VII\n// division 0-f ... timing to switch pattern1 to pattern2 (0:only pattern2)\nconst uint[8] seq1=uint[]( //snare+hihat\n    0x11000119u,0x11000119u,0x11000119u,0x1119711bu,\n    0x11000119u,0x11000119u,0x11000119u,0x1119711au);\nconst uint[8] seq2=uint[]( //bassdrum+conga\n    0x1100011eu,0x1100011eu,0x1100011eu,0x111e811fu,\n    0x1100011eu,0x1100011eu,0x1100011eu,0x111ee11fu);\nconst uint[4] seq3=uint[]( //bass\n    0x11000414u,0x11000214u,0x11000714u,0x11000114u);\nconst uint[4] seq4=uint[]( //arpeggio\n    0x11000410u,0x11000410u,0x11000310u,0x11000110u);\nconst uint[4] seq5=uint[]( //backing\n    0x1100010cu,0x1100010cu,0x1100040cu,0x150d810eu);\nconst uint[24] seq6=uint[]( //melody\n    0x10000000u,0x10000000u,0x10000000u,0x10000000u,\n    0x11000101u,0x11000102u,0x11000703u,0x11000104u,\n    0x11000101u,0x11000102u,0x11000703u,0x11000105u,\n    0x11000106u,0x11000107u,0x11000708u,0x11000109u,\n    0x11000106u,0x11000107u,0x1100070au,0x1100010bu,\n    0x11000702u,0x11000501u,0x11000203u,0x1104c000u);\nconst uint[4] seq7=uint[]( //chord\n    0x11000520u,0x11000520u,0x11000420u,0x11000220u);\n\n//BIT OPERATION\nint imod(int x,int y){return int(x-y*(x/y));}\nint imod(uint x,uint y){return int(x-y*(x/y));}\nint get12(uint b,int l){return int(b>>l*4)&4095;}\nint get8(uint b,int l){return int(b>>l*4)&255;}\nint get4(uint b,int l){return int(b>>l*4)&15;}\nint get2(uint b,int l){return int(b>>l*2)&3;}\n\n//NES SOUND GENERATORS(without DPCM)\nfloat osc_duty(float x,float d){return fract(x)<d?1.:-1.;}\n//float osc_tri4(float x){return abs(floor(fract(x)*15.9999)/7.5-1.);}\nconst float[16] nt=float[](2.,4.,8.,16.,32.,48.,64.,80.,101.,127.,190.,254.,381.,508.,1017.,2034.);\nfloat osc_nesnoise(float x,int i){return fract(sin(floor(x*1789772.5/nt[i])*179.2)*204.8);}\n\n//WAVETABLE OSC(namco C30/N163)\n//sound0:flute  ADFF DA75 4456 9ABB A852 0025\n//sound1:brass  BFED ED93 0378 78CF C621 2104\n//sound2:organ  87D7 F7F7 D7A7 8582 8080 8287\n//sound3:piano  BEFF EBA9 9998 7666 6541 0014\n//sound4:harpsi BDEF 000F EDB9 6421 0fff 0124\n//sound5:bass   0033 2266 0033 CCFF 99DD CCFF\n//sound6:octsqr 0000 00AA AAAA 5555 55FF FFFF\n//sound7:octsaw 0123 4567 89AB 4567 89AB CDEF\n/*\nconst uint[24] wt=uint[](\n    0x000bb8bau,0x100de7fdu,0x203efdefu,0x303ff7dfu,0x4020efedu,0x5020b7dau,0x6a60af97u,0x7a6f9735u,\n    0x8a0e9d04u,0x9a0d9734u,0xaa3b9a75u,0xba398786u,0x45c67879u,0x55c4658au,0x65f268cbu,0x75f162fbu,\n    0x859068cau,0x959f5068u,0xafdf4825u,0xbfdf1012u,0xcfc00820u,0xdfc10210u,0xeff21802u,0xfff44745u);\nfloat osc_c30(float x,int i){return(float((wt[int(mod(x*24.,24.))]>>(i*4))&15u)/15.-.5);}\n*/\n\n//AMP\n//  vec3 p( drive, pressure, volume)\nvec2 amp(vec2 i,vec3 p){return clamp(sign(i)*pow(abs(i*p.x),vec2(1./p.y)),-1.,1.)*p.z;}\n\n//FOLDBACK DISTORTION\nfloat fbdist(float v){return abs(v)>1.?sign(v)*2.-v:v;}\n\n//FREQUENCY FROM MIDI NOTE NUMBER\nfloat freq(float n){return pow(2.,(n-69.)/12.)*base;}\n\n//ENVELOPE\nfloat env_d(float x,float d){return max(0.,1.-x/max(d,1e-4));}\n\n//FM INSTRUMENTS (freq,time)\nfloat fmbass(float f,float x){f*=6.283;return fbdist(sin(f*2.03)*.5+sin(f*2.+sin(f+sin(f*7.51)*env_d(x,.07))*env_d(x,.2)))*env_d(x,.5);}\nfloat fmharpsi(float f,float x){f*=6.283;return (sin(f+sin(f*5.+sin(f*9.))))*env_d(x,.7);}\nfloat fmvibe(float f,float x){f*=6.283;return (sin(f+sin(f*9.)))*env_d(x,.9);}\nfloat fmep(float f,float x){f*=6.283;return (sin(f+sin(f*15.)*env_d(x,.5)*.6))*env_d(x,.7);}\nfloat fmmarimba(float f,float x){f*=6.283;return (sin(f+sin(f*3.99+sin(f*5.3)*env_d(x,.08))*env_d(x,.3)))*env_d(x,.4);}\nfloat fmguitar(float f,float x){f*=6.283;return fbdist(sin(f+sin(f*3.01+sin(f*3.49)*env_d(x,.4))*env_d(x,.7)*.6)*1.3*env_d(x,.9));}\nfloat fmpad(float f,float x){f*=6.283;return sin(f+sin(f*1.01))*(.9+sin(x*60.)*.1);}\n\n//PERCUSSION INSTRUMENTS (time)\nfloat bd(float x){return sin(x*freq(82./(1.+x*.7)))*env_d(x,.5);}\nfloat sd(float x){return (osc_nesnoise(x,10)*.8*env_d(x,.2)+sin(x*freq(83./(1.+x*.05)))*env_d(x,.4));}\n//float hh(float x,float d){return osc_nesnoise(x,3)*env_d(x,d);}\n\n/*\n//CHIPTUNE INSTRUMENTS (freq,time)\nconst float detune =.0025;\nvec2 dutybass(float f,float x){return vec2(osc_duty(f*(1.+detune),.5),osc_duty(f*(1.-detune),.5))*env_d(x,.2);}\nvec2 tri4bass(float f,float x){return vec2(osc_tri4(f*(.5+detune)),osc_tri4(f*(.5-detune)));}\nvec2 tri4lead(float f,float x){return vec2(osc_tri4(f*(1.-detune)),osc_tri4(f*(1.+detune)));}\nvec2 c30bass(float f,float x){return vec2(osc_c30(f*(1.+detune),5),osc_c30(f*(1.-detune),5))*env_d(x,.5);}\nvec2 c30chord(float f,float x){return vec2(osc_c30(f*(1.-detune),7),osc_c30(f*(1.+detune),7));}\nvec2 c30bell(float f,float x){return vec2(osc_c30(f*(1.-detune),1),osc_c30(f*(1.+detune),1))*env_d(x,.6);}\nvec2 c30lead(float f,float x){return vec2(osc_c30(f*(1.-detune),4),osc_c30(f*(1.+detune),4))*env_d(x,.5);}\n*/\n\n//CHIPTUNE PERCUSSION (time)\n//float nessd(float x){return osc_nesnoise(x,11)*env_d(x,.2);}\nfloat neshh(float x,float d){return osc_nesnoise(x,0)*env_d(x,d);}\n//float nesbd(float x){return osc_duty(2./(x*.5+.1),.5)*env_d(x,.1);}\nfloat neslc(float x){return osc_duty(4./(x*.5+.1),.5)*env_d(x,.05);}\nfloat neshc(float x){return osc_duty(5./(x*.5+.1),.5)*env_d(x,.05);}\n\n//GET PATTERN FROM SEQUENCE\nfloat mp=0.; //note length multiplier(from speed)\nint   dg=0;  //degree now playing\nuint  pt=0u;  //pattern now playing\nint   st=0;  //step now playing\nbool getpattern(float t,uint sq){\n    // speed(4),degree1(4),pattern1(8),division(4),degree2(4),pattern2(8)\n    mp=pow(2.,float(get4(sq,7)-1))*16.;\n    st=int(mod(t*bpm*mp/steps,16.));\n    bool di=int(mod(t*bpm*16./steps,16.))<get4(sq,3);\n    dg=di?get4(sq,6):get4(sq,2);\n    pt=di?pat[get8(sq,4)]:pat[get8(sq,0)];\n    return dg==0?false:true;\n}\n\n//GET NOTE FROM PATTERN\nint notegen(int s,int s1,int s2){\n    return fract(sin(float(s+s1)+float(s1*20)*gateseed)*50.)<(float(get4(pt,6))*.0625)?-1:\n    imod(int(abs(sin(float(s+s1+s*s2)*noteseed)*float(s2))),get4(pt,7));\n}\nvec4 getnote(float t,float l){\n    // melodic:range(4),rest(4),seed1(12),seed2(12)\n    int s1=get12(pt,3),s2=get12(pt,0),n=notegen(st,s1,s2);\n    float x=mod(t,l/mp);\n    if((st>=1)&&(n<0)){n=notegen(st-1,s1,s2);x+=l/mp;}\n    n+=n<0?0:dg-1;\n    return (dg<1)||(n<0)?vec4(x,-1,-1,-1):vec4(x,scalenote(n),scalenote(n+chord3),scalenote(n+chord5));\n}\nvec4 getgate(float t,float l){\n    // percussive:note(2x16)\n    int n=get2(pt,st);\n    float x=mod(t,l/mp);\n    if((st>=1)&&(n==0)){n=get2(pt,st-1);x+=l/mp;}\n    return dg<1?vec4(x,-1,-1,-1):vec4(x,n,n,n);\n}\n\n//RENDERER\nvec2 track1(float t,float l,int s){//TRACK 1 snaredrum,closehh,openhh\n    vec2 o=vec2(0);\n    getpattern(t,seq1[imod(s,8)]);\n    vec4 n=getgate(t,l);\n    o+=(n.y==1.)?sd(n.x)*.8:0.;\n    o+=(n.y==2.)?neshh(n.x,.08)*.4:0.;\n    o+=(n.y==3.)?neshh(n.x,.2)*.5:0.;\n    return s>1?o:vec2(0);\n}\nvec2 track2(float t,float l,int s){//TRACK 2 bassdrum,lowconga,highconga\n    vec2 o=vec2(0);\n    getpattern(t,seq2[imod(s,8)]);\n    vec4 n=getgate(t,l);\n    o+=(n.y==1.)?bd(n.x)*.8:0.;\n    o+=(n.y==2.)?neslc(n.x)*.3:0.;\n    o+=(n.y==3.)?neshc(n.x)*.3:0.;\n    return o;\n}\nfloat range(float n,float l){return n<=l?n:n-12.;}\nvec2 track3(float t,float l,int s){//TRACK 3 bass\n    vec2 o=vec2(0);\n    getpattern(t,seq3[imod(s,4)]);\n    vec4 n=getnote(t,l);\n    o+=(n.y>=0.)?vec2(.8)*fmbass(freq(range(n.y+24.,36.))*n.x,n.x):vec2(0);\n    return s>2?o*.8:vec2(0);\n}\nvec2 track4(float t,float l,int s){//TRACK 4 arpeggio\n    vec2 o=vec2(0);\n    getpattern(t,seq4[imod(s,4)]);\n    vec4 n=getnote(t,l);\n    int g=imod(1+imod(int(t*32./l),4),3);\n    o+=(n.y>=0.)&&(g==0)?vec2(.8,.8)*fmvibe(freq(n.y+48.)*n.x,n.x):vec2(0);\n    o+=(n.y>=0.)&&(g==1)?vec2(.6,1.)*fmvibe(freq(n.z+48.)*n.x,n.x):vec2(0);\n    o+=(n.y>=0.)&&(g==2)?vec2(1.,.6)*fmvibe(freq(n.w+48.)*n.x,n.x):vec2(0);\n    return s>2?o*.13:vec2(0);\n}\nvec2 track5(float t,float l,int s){//TRACK 5 backing\n    vec2 o=vec2(0);\n    getpattern(t,seq5[imod(s,4)]);\n    vec4 n=getnote(t,l);\n    o+=(n.y>=0.)?vec2(fmharpsi(freq(n.y+59.97)*n.x,n.x),fmharpsi(freq(n.y+60.03)*n.x,n.x)):vec2(0);\n    return o*.17;\n}\nvec2 track6(float t,float l,int s){//TRACK 6 melody\n    vec2 o=vec2(0);\n    getpattern(t,seq6[imod(s,24)]);\n    vec4 n=getnote(t,l);\n    o+=(n.y>=0.)?vec2(fmguitar(freq(n.y+60.03)*n.x,n.x),fmguitar(freq(n.y+59.97)*n.x,n.x)):vec2(0);\n    return o*.45;\n}\nvec2 track7(float t,float l,int s){//TRACK 4 chord\n    vec2 o=vec2(0);\n    getpattern(t,seq7[imod(s,4)]);\n    vec4 n=getnote(t,l);\n    o+=(n.y>=0.)?vec2(1.,.6)*fmpad(freq(n.y+48.)*n.x,n.x):vec2(0);\n    o+=(n.y>=0.)?vec2(.8,.8)*fmpad(freq(n.z+48.)*n.x,n.x):vec2(0);\n    o+=(n.y>=0.)?vec2(.6,1.)*fmpad(freq(n.w+48.)*n.x,n.x):vec2(0);\n    return s>1?o*.2:vec2(0);\n}\nvoid render(float t,float l,inout vec2 o){\n    float c=0.;       //render target\n    int   s=int(t/l); //sequence number now playing\n    vec4  n=vec4(0);  //chord info x:gate yzw:notes\n    o+=track1(t,l,s); //TRACK 1 snaredrum,closehh,openhh\n    o+=track2(t,l,s); //TRACK 2 bassdrum,lowconga,highconga\n    o+=track3(t,l,s); //TRACK 3 bass\n    o+=track4(t,l,s); //TRACK 4 arpeggio\n    o+=track5(t,l,s); //TRACK 5 backing\n    o+=track6(t,l,s); //TRACK 6 melody\n    o+=track7(t,l,s); //TRACK 7 chord\n}\n\n//MASTER SECTION\n#define MASTER_DRIVE    0.3\n#define MASTER_PRESSURE 1.0\n#define DELAY_REPEAT    6\n#define DELAY_WET       0.20\n#define DELAY_FEEDBACK  0.95\n#define DELAY_TIME      0.05\nfloat mvol=0.; //for indicator\nvec2 mainSound( in int samp,float time){\n    float l=steps/bpm,vol=1.,d=DELAY_WET,r=DELAY_TIME;\n    vec2 o=vec2(0);\n    if(time>sec-fade){vol=(sec-min(time,sec))/fade;}\n    time-=start*60./bpm;\n    if(time<0.)return o;\n    render(time,l,o);\n    for(int i=0;i<DELAY_REPEAT;i++){\n        time-=r;\n        if(time<0.)continue;\n        vec2 a=vec2(0);\n        render(time,l,a);\n        d*=DELAY_FEEDBACK;\n        r+=DELAY_TIME;\n        o+=a*d;\n    }\n    mvol=vol;\n    return amp(o,vec3(MASTER_DRIVE,MASTER_PRESSURE,vol));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//---Caged Star\n// by Catzpaw 2020\n\n//Common:utils\n\n#define ZERO min(0,iFrame)\n\n//UTILS\nfloat hash(vec3 p){return fract(sin(p.x*200.1+p.y*100.3)*p.z*300.7);}\nmat2 rot(float a){float s=sin(a),c=cos(a);return mat2(c,s,-s,c);}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}