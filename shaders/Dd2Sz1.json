{
    "Shader": {
        "info": {
            "date": "1669918445",
            "description": "A morphing mosaic pattern, *Use mouse*(!) and you can find some cool spots :)\nAll credits to @jarble, I just added some mouse interactivity to morph parameters",
            "flags": 0,
            "hasliked": 0,
            "id": "Dd2Sz1",
            "likes": 4,
            "name": "Morphing Gilded mosaic",
            "published": 3,
            "tags": [
                "fractal",
                "knot",
                "mosaic"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "// Fork of \"Gilded mosaic\" by jarble. https://shadertoy.com/view/fscfWB\n// 2022-12-01 17:14:21\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a*iTime);\n\tfloat c = cos(a*iTime);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\nvec2 mouse;\nvec2 triangle_wave(vec2 a){\n    //a = rotate(a,num*radians(180.));\n    vec2 to_return = abs(fract((a+vec2(1.,0.5))*1.5)-.5);\n    //to_return /= 1.5; //makes another interesting pattern\n    return to_return;\n    //return abs(fract((a+vec2(1.,1.5)+num)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.*1.5;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n  \n  float theTime = iTime+71.0*59.0;\n#define ONEWAY\n#ifdef ONEWAY\n    vec2 mMouse = (iMouse.xy == vec2(0.)) ? vec2(116.0,292.0) : iMouse.xy;\n    mouse = (mMouse.xy/iResolution.xy)*fract(theTime/73.0);\n    //mouse.x = clamp(mouse.x,-10.,0.5);\n    //mouse.y = clamp(mouse.y,-10.,0.5);\n#else\n    mouse = (iMouse.xy == vec2(0.)) ? vec2(116.0/1280.0,292.0/720.0)*fract(theTime/73.0) : (iMouse.xy/iResolution.xy)*fract(theTime/73.0);\n    //if(mouse.x>0.05&& mouse.y>0.05) mouse = abs(mouse/39.0);\n#endif\n \n     float time1 = iTime/64.;\n//time1 *=(mouse.x);\n    uv += vec2(time1/2.0,time1/3.0)/t1/4.0+(vec2(cos(time1),sin(time1)))*8./t1;\n    float scale = 1.5;\n    float offset = 0.;\n    float offset1 = iTime/1000.;\n        vec2 t2 = vec2(0.);\n        vec2 t3 = vec2(0.);\n        for(int k = 0; k < 9; k++){\n\n            uv += t2;\n            uv /= scale;\n            t2 = triangle_wave(uv)+mouse;\n            t3 = -triangle_wave(uv.yx-.5)+mouse.yx;\n            uv = t2-t3;\n            \n            col.x = (col.x+max(mouse.x-mouse.y,max(uv.y-uv.x,col.x)))/(2.);\n            \n            //col.y = (col.y+min(mouse.x-mouse.y,max(uv.x-uv.y,col.y)))/(2.);\n            \n            col.x = abs(col.x-.5+mouse.y);\n            col = abs(col.yzx-vec3(col.x/sqrt(2.)))*2.;\n        }\n\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}