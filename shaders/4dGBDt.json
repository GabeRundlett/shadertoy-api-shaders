{
    "Shader": {
        "info": {
            "date": "1530933483",
            "description": "Cyber jewel",
            "flags": 0,
            "hasliked": 0,
            "id": "4dGBDt",
            "likes": 48,
            "name": "Cyber Jewel",
            "published": 3,
            "tags": [
                "raymarching",
                "refraction",
                "wireframe"
            ],
            "usePreview": 0,
            "username": "setchi",
            "viewed": 1511
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592654\n#define HASHSCALE1 .1031\n\nconst float EPS = 1e-2;\nfloat OFFSET = EPS * 5.0;\n\nfloat TIME;\n\nvec2 rotate2d(vec2 p, float angle) {\n    return p * mat2(cos(angle), -sin(angle),\n        sin(angle), cos(angle));\n}\n\nfloat hash11(float p) {\n    vec3 p3 = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Gem clock by keim\n// https://www.shadertoy.com/view/MsXcWr\nfloat dfBC( in vec3 p, float r) {\n    float a = floor(atan(p.z, p.x) / (PI * .25) + .5) * PI * .25, c = cos(a), s = sin(a);\n    vec3 q = vec3(c * p.x + s * p.z, p.y, abs(-c * p.z + s * p.x)) / r;\n    float fcBezel = dot(q, vec3(.544639035, .8386705679, 0)) - .544639035;\n    float fcUGird = dot(q, vec3(.636291199, .7609957358, .1265661887)) - .636291199;\n    float fcLGird = dot(q, vec3(.675808237, -.7247156073, .1344266163)) - .675808237;\n    float fcStar = dot(q, vec3(.332894535, .9328278154, .1378894313)) - .448447409;\n    float fcPMain = dot(q, vec3(.656059029, -.7547095802, 0)) - .656059029;\n    float fcTable = q.y - .2727511892;\n    float fcCulet = -q.y - .8692867378 * .96;\n    float fcGirdl = length(q.xz) - .975;\n    return max(fcGirdl, max(fcCulet, max(fcTable, max(fcBezel, max(fcStar, max(fcUGird, max(fcPMain, fcLGird)))))));\n}\n\nfloat sdPlane(vec3 p) {\n    return p.y + 1.;\n}\n\nfloat dGlass(vec3 p) {\n    return dfBC(p, 1.);\n}\n\nfloat map(vec3 p) {\n    float b = sdPlane(p);\n    float c = dGlass(p);\n    return min(b, c);\n}\n\nfloat box(vec2 st, float size) {\n    size = 0.5 + size * 0.5;\n    st = step(st, vec2(size)) * step(1.0 - st, vec2(size));\n    return st.x * st.y;\n}\n\nvec3 floorPattern(vec2 p) {\n    return vec3(0.2) * mod(floor(p.x * 0.3) + floor(p.y * 0.3), 2.0);\n}\n\nvec2 intersect(vec3 ro, vec3 ray) {\n    float t = 0.0;\n    for (int i = 0; i < 100; i++) {\n        float res = abs(map(ro + ray * t));\n        if (res < 0.005) return vec2(t, res);\n        t += res;\n    }\n\n    return vec2(-1.0);\n}\n\nvec3 normal(vec3 pos, float e) {\n    vec3 eps = vec3(e, 0.0, 0.0);\n\n    return normalize(vec3(\n        map(pos + eps.xyy) - map(pos - eps.xyy),\n        map(pos + eps.yxy) - map(pos - eps.yxy),\n        map(pos + eps.yyx) - map(pos - eps.yyx)));\n}\n\nfloat edge(vec3 p, vec3 n) {\n    vec3 offset = vec3(0.001, 0., 0.);\n    float e = 0.008;\n\n    float d = dot(n, normal(p + offset.xyy, e));\n    d = min(d, dot(n, normal(p - offset.xyy, e)));\n    d = min(d, dot(n, normal(p + offset.yxy, e)));\n    d = min(d, dot(n, normal(p - offset.yxy, e)));\n    d = min(d, dot(n, normal(p + offset.yyx, e)));\n    d = min(d, dot(n, normal(p - offset.yyx, e)));\n\n    return step(d, 0.99999);\n}\n\nmat3 createCamera(vec3 ro, vec3 ta, float cr) {\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.0);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nfloat triangle(float t) {\n    return 1.0 - 8.0 * abs(fract(t) - 0.5);\n}\n\nfloat trail(vec2 p, float n) {\n    float offs = hash11(floor(p * n).x) * .4;\n    float a = triangle((p.y * 0.3 + TIME + 2.2 + offs) * 0.2) * 16. + 10.;\n    return box(fract(p * n), clamp(a / 8., 0., 1.));\n}\n\nfloat trailEffect(vec2 p) {\n    p = rotate2d(p, PI / 4.);\n    float l1 = trail(p, 45.);\n    float l2 = trail(p, 20.);\n    float l3 = step(2., l1 + l2);\n\n    float idx = 1.;\n    idx = mix(idx, 2., l1);\n    idx = mix(idx, 0., l2);\n    idx = mix(idx, 0., l3);\n    return idx;\n}\n\nvec2 scanEffect(vec2 p) {\n    p = rotate2d(p, PI / 4.);\n    float a = clamp(triangle(TIME * 0.2), -.9, .9) * 2.;\n    p.y = mix(min(p.y, -a), max(p.y, a), step(0.5, fract(TIME * 0.2)));\n    return rotate2d(p, -PI / 4.);\n}\n\nvec3 render(vec2 p) {\n    float effect = trailEffect(p);\n    if (effect == 2.) {\n        return vec3(p * 0.5 + 0.5, 1.);\n    }\n    p = scanEffect(p);\n\n    float t = TIME * 0.7;\n    vec3 ro = vec3(cos(t) * 10., sin(t * 2.) + 4., sin(t) * 10.);\n    vec3 ta = vec3(0);\n    mat3 cm = createCamera(ro, ta, 0.);\n    vec3 ray = cm * normalize(vec3(p, 10.0));\n\n    vec3 fresnel = vec3(0);\n    float edgeValue = 0.;\n    int wireframe = int(effect);\n    float tt = 0.;\n\n    for (int i = 0; i < 10; i++) {\n        vec2 res = intersect(ro, ray);\n        tt += res.x;\n\n        if (res.y < -0.5) {\n            return vec3(0.1, 0.2, 0.4) * 7.;\n        }\n\n        vec3 pos = ro + ray * res.x;\n        vec3 nor = normal(pos, 0.008);\n\n        if (dGlass(pos) > 0.005) {\n            if (wireframe == 1) {\n                return mix(vec3(.13, .16, .16), vec3(1.), step(0.5, edgeValue));\n            }\n\n            vec3 col = vec3(0);\n            col += floorPattern(pos.xz * 7.);\n            col += fresnel;\n            col += vec3(0.001, 0.002, 0.004) * tt * 10.;\n            return col;\n        }\n\n        if (i == 0 && dot(-ray, nor) < 0.5) {\n            float a = 1. - dot(-ray, nor) * 2.;\n            fresnel = mix(fresnel, vec3(0., 0.8, 0.8), a);\n        }\n        edgeValue += edge(pos, nor);\n\n        float eta = 1.1;\n\n        bool into = dot(-ray, nor) > 0.0;\n        nor = into ? nor : -nor;\n        eta = into ? 1.0 / eta : eta;\n\n        ro = pos - nor * OFFSET;\n\n        if (wireframe == 1) {\n            continue;\n        }\n\n        ray = refract(ray, nor, eta);\n\n        if (ray == vec3(0.0)) {\n            ro = pos + nor * OFFSET;\n            ray = reflect(ray, nor);\n        }\n    }\n}\n\nvec3 aaRender(vec2 p) {\n    vec3 col = vec3(0.0);\n    const int num = 4;\n\n    for (int i = 0; i < num; i++) {\n        float fi = float(i + 1);\n        col += render(p + vec2(step(fi, 2.001), mod(fi, 2.001)) * 0.0015);\n    }\n\n    return col / float(num);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n  TIME = mod(iTime, 4.8) + 2.3;\n  vec3 color = aaRender(uv);\n  fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}