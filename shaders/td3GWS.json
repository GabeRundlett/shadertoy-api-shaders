{
    "Shader": {
        "info": {
            "date": "1569181142",
            "description": "First try at shadertoy.\nA simple jellyfish animation",
            "flags": 0,
            "hasliked": 0,
            "id": "td3GWS",
            "likes": 8,
            "name": "Jellyfish - By Dani Frank",
            "published": 3,
            "tags": [
                "animation",
                "jellyfish",
                "first"
            ],
            "usePreview": 0,
            "username": "ChibiDenDen",
            "viewed": 521
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates for y (from -1 to 1), for x (from -xMin to xMax)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // rotate 45 degrees\n    uv = vec2(uv.x*.5+uv.y*.5, uv.x*.5-uv.y*.5);\n    // tile more jellys\n    uv *= 5.;\n    \n    float idx = trunc(uv.x) + 2.*trunc(uv.y);\n    // each jelly is in range 0-1, 0-1\n    uv = fract(uv);\n\n    // bg\n    vec3 col = vec3(uv.xy*.8, .9).yxz;\n    \n    // jelly belly\n    float d = length(uv - vec2(.5))*2.;\n    float rmix = .5*sin(iTime+length(uv)*8.+idx*8.)+.5; \n    float r = mix(.4,.7,rmix);\n    float sr = 0.9;\n    float jelly = smoothstep(r, sr*r,d)*0.3;\n    col += jelly;\n    \n    // tentacles\n    if (jelly < .2) {\n        if (abs(uv.x - uv.y + sin(uv.x*18.+uv.y*18. + iTime)*0.05) < 0.008) {\n            col += smoothstep(.2,.3, uv.x+uv.y)*0.6;\n            col -= smoothstep(.8,.9, uv.x+uv.y)*0.6;\n        }    \n        else if (abs(uv.x - uv.y - .2 + sin(uv.x*18.+uv.y*18. + iTime*2.)*0.05) < 0.008) {\n            col += smoothstep(.3,.4, uv.x+uv.y)*0.6;\n            col -= smoothstep(.8,.9, uv.x+uv.y)*0.6;\n        }    \n        else if (abs(uv.x - uv.y + .2 + sin(uv.x*18.+uv.y*18. + iTime*2.)*0.05) < 0.008) {\n            col += smoothstep(.3,.4, uv.x+uv.y)*0.6;\n            col -= smoothstep(.8,.9, uv.x+uv.y)*0.6;\n        }\n    }\n\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}