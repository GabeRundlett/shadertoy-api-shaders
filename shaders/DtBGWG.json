{
    "Shader": {
        "info": {
            "date": "1673882254",
            "description": "genesis shadertoy experiment. maybe it looks like watercolor paint?  ¯\\_(ツ)_/¯\nlayered gradient noise on hsb colors in a circle distorted by radial gradient noise",
            "flags": 0,
            "hasliked": 0,
            "id": "DtBGWG",
            "likes": 6,
            "name": "painted wobbly circle",
            "published": 3,
            "tags": [
                "sdf",
                "hsb",
                "gradientnoise"
            ],
            "usePreview": 0,
            "username": "ducttapecode",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "// random 1D to 1D\nfloat random11(float t) {\n    return fract(sin(t * 12.34) * 567.89);\n}\n\n// random 2D to 1D\nfloat random21(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(123.45, 67.89))) * 98765.4321);\n}\n\n// random 2D to 2D\nvec2 random2(vec2 st){\n    st = vec2(dot(st, vec2(127.1, 311.7)),\n              dot(st, vec2(269.5, 183.3)) );\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\n// rotation matrix\nmat2 rot1 = mat2(4., -3., 4., 3.) / 5.;\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n//  Function from Iñigo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nfloat blob_sdf(vec2 uv, float r) {\n    \n    float d = length(uv); // radius from 0,0\n    vec2 n = uv / d; // normalized for a clear direction for the noise offset\n    \n    float magnitude = .5;\n    float frequency = .5;\n    vec2 t = vec2(iTime) * 0.5;\n    \n    float offset = noise(t + frequency * n);// \n    d += magnitude * offset;\n    return d - r;\n}\n\nvec3 hsb_noise(vec2 uv, float hue) {\n    vec3 color = vec3(0.0);\n    \n    float s = 1.57;\n    for (int i = 0; i < 7; i++) \n    {\n        uv = uv * rot1 * 2.23;\n        color += hsb2rgb(vec3(hue, \n            noise(uv * 0.3) * 0.5 + 0.45, \n            noise(uv * 0.712) * 0.2 + 0.8)) / s;\n        s *= 2.03;\n        uv += iTime * .25;\n    }\n    return color;\n}\n\nfloat hue = 0.73; \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates (from -1 to 1 in a centered square)\n    // compensating for aspect ratio, coordinates outside -1..1 for the longer axis\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y) * 2.;\n    \n    // vary main hue\n    vec2 hue_line = vec2(0.123, 0.2345);\n    hue = fract(uv.x * hue_line.x + uv.y * hue_line.y + 0.1 * iTime);\n    // flipp hue across an oscillating line\n    hue = fract(hue + 0.5 * smoothstep(-0.001, 0.001, \n        uv.x * -hue_line.y * 1.73 \n        + uv.y * hue_line.x\n        + 0.2 * sin(iTime * 0.8)));\n\n    // layered hsb noise\n    vec3 color = hsb_noise(uv, hue);\n    //color = hsb2rgb(vec3(hue, 1., 1.));\n    \n    // blob shape sdf\n    float r = blob_sdf(uv, 0.75);\n    float t = 0.0;\n    \n    // get darker closer to the border\n    t = smoothstep(-0.2, 0.1, r);\n    color *= 1. - 0.15 * t;\n    \n    // blend the circle/blob with the background\n    t = smoothstep(-0.01, 0.0, r);\n    color = mix(color, vec3(0.97, 0.95, 0.93), t);\n    \n    // output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}