{
    "Shader": {
        "info": {
            "date": "1576214863",
            "description": "smoother motion, and different shading style.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttdGW8",
            "likes": 11,
            "name": "Foldable Cube 2",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "cube"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 475
        },
        "renderpass": [
            {
                "code": "\n#define ITERS 100\n#define TOL 1e-3\n#define fdist 0.5\n#define maxdist 10.\n#define LEVELS 9\n#define PI 3.1415926\n\nfloat oscillate(float t_low, float t_high, float t_transition, float t_offset) {\n    float t_osc = 0.5*(t_high+t_low)+t_transition;\n    float h_l = 0.5*t_low/t_osc;\n    float h_h = (0.5*t_low+t_transition)/t_osc;\n    return smoothstep(0., 1., (clamp(abs(mod(iTime + t_offset, t_osc*2.)/t_osc-1.), h_l, h_h) - h_l) / (h_h - h_l));\n}\n\nvec4 map(in vec3 pos)   \n{\n    float t = oscillate(2., 2., 7., 0.) * PI * 0.5;\n    float t2 = oscillate(7., 7., 2., 5.);\n    if (iMouse.z > 1.0)\n    {\n    \tt = iMouse.y/iResolution.y*PI*0.5;\n    }\n    float c = cos(t);\n    float s = sin(t);\n    mat3 rotZ = mat3(c, -s, 0, s, c, 0, 0, 0, 1);\n    mat3 rotX = mat3(1, 0, 0, 0, c, -s, 0, s, c);\n    float sc = 0.5;\n    float truncdist = -1e6;\n    for (int i=0; i<LEVELS; i++)\n    {\n        pos = abs(rotX * rotZ * pos) - sc;\n        truncdist = max(truncdist, (pos.x+pos.y+pos.z)/sqrt(3.)-(2.-t2)*sc);\n     \tsc *= 0.5;\n    }\n    vec3 bx = max(vec3(0.), pos-sc*2.);\n    float dist = max(truncdist, length(bx));\n    return vec4(dist, step(pos.zxy, pos.xyz) * step(pos.yzx, pos.xyz));\n}\n\nvec3 getnormal(vec3 ro) {\n    vec2 d = vec2(TOL, 0.0);\n    float x1 = map(ro+d.xyy).x;\n    float x2 = map(ro-d.xyy).x;\n    float y1 = map(ro+d.yxy).x;\n    float y2 = map(ro-d.yxy).x;\n    float z1 = map(ro+d.yyx).x;\n    float z2 = map(ro-d.yyx).x;\n    return normalize(vec3(\n        x1-x2,\n        y1-y2,\n        z1-z2));\n}\n\nvec4 march(in vec3 pos, in vec3 dir)\n{\n    float t = 0.;\n    vec4 dist;\n    int i=0;\n    for (; i<ITERS; i++)\n    {\n        vec3 currpos = t*dir+pos;\n    \tdist = map(currpos);\n        t += dist.x;\n        if (abs(dist.x) < TOL)\n        {\n            return vec4(t, dist.yzw);\n        } else if (t > maxdist) {\n            break;\n        }\n    }\n    return vec4(t, vec3(-1., t/maxdist*0.8, float(i)/float(ITERS)));\n}\n\nfloat shadowmarch(in vec3 pos, in vec3 dir) {\n    float t = 0.;\n    for (int i=0; i<50; i++) {\n        vec3 currpos = t*dir+pos;\n        float dist = map(currpos).x;\n        if (dist <= 0.) return 0.;\n        t += max(0.01, dist);\n        if (t > maxdist) break;\n    }\n    return 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ang = iTime * 0.3;\n    if (iMouse.z > 1.0) {\n        ang = iMouse.x/iResolution.x*PI*2.;\n    }\n    float c = cos(ang);\n    float s = sin(ang);\n    mat3 rot = mat3(c, -s, 0, s, c, 0, 0, 0, 1);\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.x;\n    vec3 ro = rot * vec3(1.,1.,1.) * (2.+s*0.3);\n    vec3 nw = -normalize(ro);\n    vec3 up = vec3(0.,0.,1.);\n    vec3 nu = cross(nw, up);\n    vec3 nv = cross(nu, nw);\n   \tvec3 rd = normalize(nw*fdist + uv.x*nu + uv.y*nv);\n    vec4 d = march(ro, rd);\n    vec3 pos = d.x * rd + ro;\n    vec3 n = getnormal(pos);\n    vec3 col = vec3(0.);\n    if (d.y > -0.5) {\n        vec3 albedo = d.yzw + 0.75*d.wyz;\n        vec3 lightdir = normalize(vec3(1., 0.5, 2.));\n        float origfac = dot(n, lightdir);\n        float fac = max(0., origfac);\n        float shadowfac = shadowmarch(pos+lightdir*TOL, lightdir);\n\n        float ambfac = abs(origfac);\n        float occfac = clamp(map(pos + n * 0.25).x*4., 0., 1.);\n        col = occfac*(fac * shadowfac + vec3(0.25) * ambfac) * albedo;\n    } else {\n        col = vec3(d.z, d.w, d.w);\n    }\n    fragColor = vec4(pow(col, vec3(0.45)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}