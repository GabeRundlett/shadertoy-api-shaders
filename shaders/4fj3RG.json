{
    "Shader": {
        "info": {
            "date": "1704361589",
            "description": "simplifying + commenting  \"HighQuality Blue Noise\" by sampajama. https://shadertoy.com/view/Mfj3Dm\n3843 chars â†’ 586\n- factor 4 directional filters in Common  (horiz, vertic, diags)\n- use simple buitin whitenoise texture in buffA\n- a bit of simplif/golfing",
            "flags": 32,
            "hasliked": 0,
            "id": "4fj3RG",
            "likes": 14,
            "name": "HighQuality Blue Noise 2",
            "published": 3,
            "tags": [
                "noise",
                "math",
                "blue",
                "hash",
                "hash",
                "bluenoise",
                "rng",
                "sinc"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 377
        },
        "renderpass": [
            {
                "code": "// === simplifying \"HighQuality Blue Noise\" by sampajama. https://shadertoy.com/view/Mfj3Dm ===\n// principle is to filter whitenoise with Bessel, approx as 4 directions separable filter\n// then blue noise =  source - lowpass filter \n\nM(vec2(1,-1));    // apply 2nd diagonal filter filter\n\n                  // blue noise =  source - lowpass filter \n    O = .5 + .5*( texelFetch(iChannel1, ivec2(u), 0 ) - O );\n // O = O.rrrr;   // grey version\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === source white noise. use better hash if needed =============\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = texelFetch(iChannel0, ivec2(u + 73.*floor(3.*iTime) )%256, 0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// === apply horizontal filter =======================\n\nM(vec2(1,0) ); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float EPS = 5.79334e-21,\n             PI = 3.1415927,\n         KERNEL = 2.,\n          RANGE = floor(KERNEL * 32.),                  // windowing. 8 seems identical\n     MID_WEIGHT = 1.;\n\n// --- choose your filters here\n\n  #define kernel(x)  sin( PI*x + EPS) / ( PI*x + EPS)   // Sinc\n//#define kernel(x)  exp( -x*x )                        // Gauss\n\n//#define window(x)   1.                                // no window ( indeed, box[-1,1] due to loop(RANGE) \n  #define window(x) ( .35875 + .48829* cos(PI*x) + .14128* cos(2.*PI*x) + .01168* cos(3.*PI*x) ) // Blackman Harris window function [-1,1]\n\n\n// ---  apply 1D filter to channel0\n\n#define T(u) vec4( texelFetch(iChannel0, ivec2(u), 0 ).rgb, 1 )\n\n#define M(D)            /* D: direction of integration  */ \\\nvoid mainImage( out vec4 O, vec2 u ) {                     \\\n    float l = length(D);                                   \\\n    vec4  s =  T(u)                                        \\\n             * MID_WEIGHT * window(0.) * kernel(0.);       \\\n    for(float d = 1.; d < RANGE - .5; d++ )                \\\n        s += (  T( u + d*D )                               \\\n              + T( u - d*D )                               \\\n             )                                             \\\n             * window(     d / RANGE )                     \\\n             * kernel( l * d / KERNEL);                    \\\n                                                           \\\n    O = s / s.a",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// === apply vertical filter =======================\n\nM(vec2(0,1)); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// === apply 1st diagonal filter =======================\n\nM(vec2(1)); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}