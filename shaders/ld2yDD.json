{
    "Shader": {
        "info": {
            "date": "1494949170",
            "description": "mic - hacked from https://www.shadertoy.com/view/MdBczW",
            "flags": 36,
            "hasliked": 0,
            "id": "ld2yDD",
            "likes": 22,
            "name": "twitchy fractal",
            "published": 3,
            "tags": [
                "fractal",
                "microphone",
                "mic"
            ],
            "usePreview": 0,
            "username": "netgrind",
            "viewed": 1780
        },
        "renderpass": [
            {
                "code": "/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan - https://www.shadertoy.com/view/MdBczW\n* hacked by cale bradbury\n*/\n\n#define I_MAX\t100\n#define E\t\t0.0005\n\n//#define SEE_ALL\n//#define SPIRAL\n\nvoid\trotate(inout vec2 v, float angle);\nfloat\tsdTorus( vec3 p, vec2 t );\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tblackbody(float Temp);\nfloat\tscene(vec3 p);\n\nfloat\tg; //coloring id\nfloat\tt; // time\nfloat\ta; // angle\nvec3\tss;// tmp var recording old ray position\nvec4 vv;\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\nvoid mainImage(out vec4 o, in vec2 f )\n{\n    t = iTime*.5;\n    for( int i=0; i<4; i++ )\n\t{\n        vv[i] = texture(iChannel0, vec2(float(i)/6.0, .01)).r;\n\t}\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(0., 0., 0.);\n    //rotate(dir.zx, cos(t)*.25);\n    vec2\tinter = (march(pos, dir));\n \to.xyz = vec3(inter.y*.051 - (inter.x)*.001);\n    //o.xyz *= vec3(abs(sin(1.04+t) ), abs(sin(2.09+t) ), abs(sin(3.14+t) ));\n    o.xyz += (1.)*blackbody((15.-(2.*inter.y-.1*inter.x) )*50.);\n    o.xyz = sin(o.xyz*6.-.4)*.5+.5;\n    //o.xyz += (1.-sin(t))*vec3(abs(sin(t+1.04+g)), abs(sin(t+2.09+g)), abs(sin(t+3.14+g)))*inter.x*.005;\n    //o.xyz *= (1.1-length(uv)*1.);\n}\n\nfloat\tscene(vec3 p)\n{\n\tfloat scale = 1.0;\n    float r2,k;\n    a = cos( .5*(p.z) +t);\n    rotate(p.yx, (a) );\n    p.xy+=vec2(cos(t), sin(t))*.25+1.;\n    p.z-=t;\n    //p.xy+=t;\n    \n    ss = p;\n    for( int i=0; i<4; i++ )\n\t{\n        p.xyz = 1.0 - 2.*fract(.5*p.xyz+0.5);\n        //p*=1.+pow(v, 3.);\n\t\tr2 = sdTorus(p, vec2(.21,.4*vv[i]+.21) );\n       /// if(r2 > 5./float(i) )\n        //    break;\n\t\tk = 1./(r2);\n\t\tp     *= k;\n\t\tscale *= k;\n\t}\n\tss=p*(fract(ss)+.5);\n    return (0.25*(abs(p.x)+length(fract(ss.xz)-.5 )*.1)/scale);\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec2\ts = vec2(0.0);\n\n    vec3\tdirr;\n    for (int i = 0; i < I_MAX; ++i)\n    {\n        dirr = dir;\n    \t//rotate(dirr.zx, .025*dist.y*sin(t*1.5));        \n        //rotate(dirr.yx, .5*dist.y*sin(t*.5));\n        \n    \tp = pos + dirr * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E || dist.y > 6.)\n        {\n            p=ss;\n            g = p.y;\n\t        g += (step(sin(5.*p.x), .5) \n             + step(sin(20.*p.x), .5) );\n           break;\n        }\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.zy)-t.x,p.x);\n\n    return length(q)-t.y;\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//by cale bradbury\n//hacked from https://www.shadertoy.com/view/MdBczW by balkhan\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 o = vec2(0., 1.1/iResolution.y);\n    float m = mix(\n        texture(iChannel0, uv-o).x,\n        texture(iChannel1, vec2(uv.x, .33)).x,\n       \tmax(ceil(1.-fragCoord.y), 0.));\n    m*=(1.0-pow(1.0-uv.x, 5.))*.3+.75;\n    fragColor = vec4(m,m,m,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}