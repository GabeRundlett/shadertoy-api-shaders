{
    "Shader": {
        "info": {
            "date": "1463170553",
            "description": "A simulation of nonlinear springs and advection. Use the mouse to paint and spacebar to reset (useful in fullscreen).",
            "flags": 48,
            "hasliked": 0,
            "id": "MsyXRW",
            "likes": 51,
            "name": "Smooth Fracturing",
            "published": 3,
            "tags": [
                "advection",
                "fracturing"
            ],
            "usePreview": 1,
            "username": "cornusammonis",
            "viewed": 3059
        },
        "renderpass": [
            {
                "code": "// Visualization of the system in Buffer A\n\n// uncomment to just render the normals\n//#define NORMAL\n\n// light source rotation\n#define TIME iDate.w * 0.6\n\n// displacement\n#define DISP 0.06\n\n// contrast\n#define SIGMOID_CONTRAST 8.0\n\n// mip level\n#define MIP 1.0\n\nvec4 contrast(vec4 x) {\n\treturn 1.0 / (1.0 + exp(-SIGMOID_CONTRAST * (x - 0.5)));    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 texel = 1. / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    #ifdef NORMAL\n    \tvec2 d = texture(iChannel1, uv).xy;\n   \t\tvec3 nr = normalize(vec3(d.x,d.y,sqrt(clamp(1.0-length(d.xy),0.0,1.0))));\n    \tfragColor = vec4(nr, 1.0);\n    #else\n        vec2 n  = vec2(0.0, texel.y);\n        vec2 e  = vec2(texel.x, 0.0);\n        vec2 s  = vec2(0.0, -texel.y);\n        vec2 w  = vec2(-texel.x, 0.0);\n\n        vec2 d   = texture(iChannel1, uv).xy;\n        vec2 d_n = texture(iChannel1, fract(uv+n)).xy;\n        vec2 d_e = texture(iChannel1, fract(uv+e)).xy;\n        vec2 d_s = texture(iChannel1, fract(uv+s)).xy;\n        vec2 d_w = texture(iChannel1, fract(uv+w)).xy;    \n\n        vec3 i   = texture(iChannel0, fract(uv + DISP * d  ), MIP).xyz;\n        vec3 i_n = texture(iChannel0, fract(uv + DISP * d_n), MIP).xyz;\n        vec3 i_e = texture(iChannel0, fract(uv + DISP * d_e), MIP).xyz;\n        vec3 i_s = texture(iChannel0, fract(uv + DISP * d_s), MIP).xyz;\n        vec3 i_w = texture(iChannel0, fract(uv + DISP * d_w), MIP).xyz;\n\n        vec3 ib = 0.4 * i + 0.15 * (i_n+i_e+i_s+i_w);\n\n        vec3 nr = normalize(vec3(d.x,d.y,sqrt(clamp(1.0-length(d.xy),0.0,1.0))));\n        vec3 l = normalize(vec3(cos(TIME), sin(TIME), 0.1)); \n        vec3 sh = pow(vec3(clamp(dot(nr,l),0.0,1.0)), vec3(5.0));\n\n        fragColor = contrast(vec4(0.9*ib+0.6*sh,1.0));\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define _G0 0.25\n#define _G1 0.125\n#define _G2 0.0625\n#define W0 18.0\n#define W1 0.5\n#define TIMESTEP 0.3\n#define ADVECT_DIST 2.0\n#define DV 0.70710678\n\n// nonlinearity\nfloat nl(float x) {\n    return 1.0 / (1.0 + exp(W0 * (W1 * x - 0.5))); \n}\n\nvec4 gaussian(vec4 x, vec4 x_nw, vec4 x_n, vec4 x_ne, vec4 x_w, vec4 x_e, vec4 x_sw, vec4 x_s, vec4 x_se) {\n    return _G0*x + _G1*(x_n + x_e + x_w + x_s) + _G2*(x_nw + x_sw + x_ne + x_se);\n}\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvec2 normz(vec2 x) {\n\treturn x == vec2(0.0, 0.0) ? vec2(0.0, 0.0) : normalize(x);\n}\n\nvec4 advect(vec2 ab, vec2 vUv, vec2 step) {\n    \n    vec2 aUv = vUv - ab * ADVECT_DIST * step;\n    \n    vec2 n  = vec2(0.0, step.y);\n    vec2 ne = vec2(step.x, step.y);\n    vec2 e  = vec2(step.x, 0.0);\n    vec2 se = vec2(step.x, -step.y);\n    vec2 s  = vec2(0.0, -step.y);\n    vec2 sw = vec2(-step.x, -step.y);\n    vec2 w  = vec2(-step.x, 0.0);\n    vec2 nw = vec2(-step.x, step.y);\n\n    vec4 u =    texture(iChannel0, fract(aUv));\n    vec4 u_n =  texture(iChannel0, fract(aUv+n));\n    vec4 u_e =  texture(iChannel0, fract(aUv+e));\n    vec4 u_s =  texture(iChannel0, fract(aUv+s));\n    vec4 u_w =  texture(iChannel0, fract(aUv+w));\n    vec4 u_nw = texture(iChannel0, fract(aUv+nw));\n    vec4 u_sw = texture(iChannel0, fract(aUv+sw));\n    vec4 u_ne = texture(iChannel0, fract(aUv+ne));\n    vec4 u_se = texture(iChannel0, fract(aUv+se));\n    \n    return gaussian(u, u_nw, u_n, u_ne, u_w, u_e, u_sw, u_s, u_se);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vUv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    vec2 n  = vec2(0.0, 1.0);\n    vec2 ne = vec2(1.0, 1.0);\n    vec2 e  = vec2(1.0, 0.0);\n    vec2 se = vec2(1.0, -1.0);\n    vec2 s  = vec2(0.0, -1.0);\n    vec2 sw = vec2(-1.0, -1.0);\n    vec2 w  = vec2(-1.0, 0.0);\n    vec2 nw = vec2(-1.0, 1.0);\n\n    vec4 u =    texture(iChannel0, fract(vUv));\n    vec4 u_n =  texture(iChannel0, fract(vUv+texel*n));\n    vec4 u_e =  texture(iChannel0, fract(vUv+texel*e));\n    vec4 u_s =  texture(iChannel0, fract(vUv+texel*s));\n    vec4 u_w =  texture(iChannel0, fract(vUv+texel*w));\n    vec4 u_nw = texture(iChannel0, fract(vUv+texel*nw));\n    vec4 u_sw = texture(iChannel0, fract(vUv+texel*sw));\n    vec4 u_ne = texture(iChannel0, fract(vUv+texel*ne));\n    vec4 u_se = texture(iChannel0, fract(vUv+texel*se));\n\n    float di_n  = nl(distance(u_n.xy + n, u.xy));\n    float di_w  = nl(distance(u_w.xy + w, u.xy));\n    float di_e  = nl(distance(u_e.xy + e, u.xy));\n    float di_s  = nl(distance(u_s.xy + s, u.xy));\n    \n    float di_ne  = nl(DV * distance(u_ne.xy + ne, u.xy));\n    float di_se  = nl(DV * distance(u_se.xy + se, u.xy));\n    float di_sw  = nl(DV * distance(u_sw.xy + sw, u.xy));\n    float di_nw  = nl(DV * distance(u_nw.xy + nw, u.xy));\n\n    vec2 xy_n  = u_n.xy + n - u.xy;\n    vec2 xy_w  = u_w.xy + w - u.xy;\n    vec2 xy_e  = u_e.xy + e - u.xy;\n    vec2 xy_s  = u_s.xy + s - u.xy;\n    \n    vec2 xy_ne  = DV * (u_ne.xy + ne - u.xy);\n    vec2 xy_se  = DV * (u_se.xy + se - u.xy);\n    vec2 xy_sw  = DV * (u_sw.xy + sw - u.xy);\n    vec2 xy_nw  = DV * (u_nw.xy + nw - u.xy);\n\n    vec2 ma = di_ne * xy_ne + di_se * xy_se + di_sw * xy_sw + di_nw * xy_nw + di_n * xy_n + di_w * xy_w + di_e * xy_e + di_s * xy_s;\n\n    vec4 u_blur = gaussian(u, u_nw, u_n, u_ne, u_w, u_e, u_sw, u_s, u_se);\n    \n    vec4 auv = advect(u.xy, vUv, texel);\n    \n    // main update rule. there are lots of possible variations one could try here,\n    // using either the advected, blurred, or original values.\n    vec2 dv = auv.zw + TIMESTEP * ma;\n    vec2 du = u_blur.xy + TIMESTEP * dv;\n\n    if (iMouse.z > 0.0) {\n    \tvec2 d = fragCoord.xy - iMouse.xy;\n        float m = exp(-length(d) / 50.0);\n        du.xy += m * normz(d);\n    }\n    \n    vec3 init = texture(iChannel1, vUv).xyz;\n    // initialize with noise\n    if((u == vec4(0.0) && init != vec3(0.0)) || reset()) {\n        fragColor = vec4(-0.5 + init.xy, 0.0, 0.0);\n    } else {\n        du = length(du) > 1.0 ? normz(du) : du;\n        fragColor = vec4(du, dv);\n    }\n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}