{
    "Shader": {
        "info": {
            "date": "1475164839",
            "description": "Part 04: moving the screen, plus empirical tweaking\nIntro to democoding using ShaderToy\nBy cxw/Incline - Demosplash 2016",
            "flags": 0,
            "hasliked": 0,
            "id": "Mly3Ry",
            "likes": 1,
            "name": "demosplash2016-cxw-04",
            "published": 3,
            "tags": [
                "tutorial",
                "demoparty"
            ],
            "usePreview": 0,
            "username": "cxw",
            "viewed": 501
        },
        "renderpass": [
            {
                "code": "precision highp int;precision highp float;\n\nvec4 get_sine_color(in float time, in vec2 coords)  // a slightly better name\n{\n    float whereami = 50.0*distance(vec2(0.5),coords) - 10.0*time;\n    return vec4(0.0,0.0, 0.5+0.5*sin(whereami), 1.0);\n} //get_sine_color\n\nfloat get_base_y(in float time,\n    in float A, in float b, in float m, in float omega, in float phi)\n{ // determine where the bottom of the screen should be\n    return abs( A*exp(-b*time/(2.0*m))*cos(omega*time-phi) );\n        // Underdamped oscillator.  Take the absolute value so it\n        // bounces rather than ringing around zero.\n        // Use cos so that t=0 => base_y=1\n        // Note: in production code, precompute K=-b/(2*m) and use exp(K*t)\n} //get_base_y\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec2 pixel_coord = fragCoord.xy / iResolution.xy;\n    float base_y = get_base_y(t, 1.0, 3.0, 1.0, 4.5, 0.0);\n        // Tweak empirically     ^^^^^^^^^^^^^^^^^^^^^^^\n        // Note: don't pass parameters you don't need!  I didn't use\n        // A, m, or phi.  Comment out so I can add it back later if I need it.\n\n    if(pixel_coord.y < base_y) {\n        fragColor = vec4(0.0);  //black at the bottom\n    } else {\n        pixel_coord.y -= base_y;\n            // Move the generated image - pretend this pixel is where it\n            // would be in the non-offset image.\n        vec4 pixel_color = get_sine_color(t, pixel_coord);\n        fragColor = pixel_color;\n    }\n} //mainImage\n\n// parms for get_base_y are from \n// https://ocw.mit.edu/courses/mathematics/18-03sc-differential-equations-fall-2011/unit-ii-second-order-constant-coefficient-linear-equations/damped-harmonic-oscillators/MIT18_03SCF11_s13_2text.pdf\n// Note: Keep b < sqrt(4*m*k) for a bounce (underdamping), where\n// omega = sqrt(abs(b*b-4*m*k))/(2*m) (hint: MATLAB/GNU Octave)\n\n// vi: set ts=4 sts=4 sw=4 et ai: //\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}