{
    "Shader": {
        "info": {
            "date": "1635367577",
            "description": "Inspired by https://twitter.com/josefluispelz/status/1453019124699906058 By Josef Luis Pelz\nTrying to do a realtime version of it.\nUse the mouse to move around.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsySD3",
            "likes": 35,
            "name": "Fractal Cloud",
            "published": 3,
            "tags": [
                "fractal",
                "raymarch",
                "cloud",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "xjorma",
            "viewed": 6115
        },
        "renderpass": [
            {
                "code": "// Created by David Gallardo - xjorma/2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n#define AA 0\n\nmat2 rot(float a)\n{\n  float s = sin(a), c = cos(a);\n  return mat2(c,-s,s,c);\n}\n\nfloat cube(vec3 p)\n{\n  vec3 a = abs(p) - 1.;\n  return max(a.x, max(a.y, a.z));\n}\n\n\nmat2 mx, my, mz;\nfloat fold(vec3 p)\n{\n  float scale = 50.0;\n  p *= scale;\n  int iter = 13;\n  for (int i=0; i < iter; i++)\n  {\n    p.xy *= mz;\n    p.yz *= mx;\n    p.xz *= my;\n    p = abs(p) - float(iter - i);    \n  }\n  return cube(p) / scale;\n}\n\nfloat map(vec3 p)\n{\n   return fold(p);\n}\n\n\n\nfloat rayCastShadow(in vec3 ro, in vec3 rd)\n{\n   vec3 p = ro;\n   float acc = 0.0;\n   float dist = 0.0;\n\n   for (int i = 0; i < 32; i++)\n   {\n\t  if((dist > 6.) || (acc > .75))\n\t\t   break;\n\n      float sdf = map(p);\n      \n      const float h = .05;\n      float ld = max(h - sdf, 0.0);\n      float w = (1. - acc) * ld;   \n     \n      acc += w;\n             \n      sdf = max(sdf, 0.05);\n      p += sdf * rd;\n      dist += sdf;\n   }  \n   return max((0.75 - acc), 0.0) / 0.75 + 0.02;\n}\n\n\n\nvec3 Render(in vec3 ro, in vec3 rd)\n{\n   vec3 p = ro;\n   float acc = 0.;\n   \n   vec3 accColor = vec3(0);\n   \n   float dist = 0.0;\n\n   for (int i = 0; i < 64; i++)\n   {\n\t  if((dist > 10.) || (acc > .95))\n        break;\n\n      float sdf = map(p) * 0.80;\n      \n      const float h = .05;\n      float ld = max(h - sdf, 0.0);\n      float w = (1. - acc) * ld;   \n     \n      accColor += w * rayCastShadow(p, normalize(vec3(0.75,1,-0.10))); \n      acc += w;\n       \n      sdf = max(sdf, 0.03);\n      \n      p += sdf * rd;\n      dist += sdf;\n   }  \n    \n   return accColor;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 up = vec3(0, 1, 0);\n\tvec3 cu = normalize( cross(cw,up) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mz = rot(iTime * 0.19);\n    mx = rot(iTime * 0.13);\n    my = rot(iTime * 0.11);\n\n\tvec3 tot = vec3(0.0);\n        \n#if AA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; ++n )\n    {\n        // pixel coordinates\n        vec2 o = rook[n];\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else //AA\n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif //AA\n \n        // camera       \n        float theta\t= radians(360.)*(iMouse.x/iResolution.x-0.5);\n        float phi\t= radians(90.)*(iMouse.y/iResolution.y-0.5)-1.;\n        vec3 ro = 6. * vec3( sin(phi)*cos(theta),cos(phi),sin(phi)*sin(theta));\n        vec3 ta = vec3( 0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta );\n        \n        vec3 rd =  ca*normalize(vec3(p,1.5));        \n        \n        vec3 col = Render(ro ,rd);\n        \n        tot += col;         \n#if AA\n    }\n    tot /= 4.;\n#endif\n\tfragColor = vec4( sqrt(tot), 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}