{
    "Shader": {
        "info": {
            "date": "1642340164",
            "description": "more shader practice. playing with 10print",
            "flags": 0,
            "hasliked": 0,
            "id": "NtySzV",
            "likes": 5,
            "name": "truchet madness",
            "published": 3,
            "tags": [
                "truchet",
                "10print"
            ],
            "usePreview": 0,
            "username": "ml",
            "viewed": 292
        },
        "renderpass": [
            {
                "code": "#define CELL_SIZE 0.075\n#define THICKNESS 0.1\n#define BLUR 0.01\n\n#define TAU 6.28318530718\n\n\n//const vec3 palette[2] = vec3[2](vec3(0.965, 0.925, 0.255), vec3(0.305, 0.245, 0.525));\n//const vec3 palette[2] = vec3[2](vec3(0.1), vec3(0.98));\nconst vec3 palette[2] = vec3[2](vec3(0.986), vec3(0.665, 0.135, 0.215));\n \n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat dist(vec2 p1,vec2 p2){\n    return sqrt(pow(p1.x-p2.x, 2.) + pow(p1.y-p2.y, 2.));\n}\n\nfloat timeOffset(vec2 cell){\n    vec2 centre = vec2(iResolution.x/iResolution.y*0.5, 0.5);\n    \n    \n    float o;\n    o = sin(dist((cell+vec2(0.5, 0.5))*CELL_SIZE, centre)*TAU/5.)*1.;\n    //o = sin(cell.x*CELL_SIZE*TAU/10.)+cos(cell.y*CELL_SIZE*TAU/10.);\n    return -o;\n  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    vec2 cell = vec2(floor(uv.x/CELL_SIZE), floor(uv.y/CELL_SIZE));\n    \n    vec2 cellUv = vec2(mod(uv.x, CELL_SIZE), mod(uv.y, CELL_SIZE))/CELL_SIZE;\n    \n    float t = iTime + timeOffset(cell);\n\n    \n    bool dir = hash12(cell) < 0.5;\n    \n    float d = dir ? abs(cellUv.x - cellUv.y) :  abs(1.-cellUv.x - cellUv.y);\n    \n    d = 1. - d;\n    \n    float a = sin(t*TAU/4.)*0.5+0.5;\n    \n    d = d*(1.-a)+dist(cellUv, vec2(0.5, 0.5))*a;\n    \n    float m = 2.+sin(t*TAU/10.);\n        \n    d = sin(d*TAU*m)*0.5+0.5;\n    \n    float thickness = 0.5;//sin(t*TAU/3.)*0.4+0.4;\n    \n    float v = smoothstep(thickness+BLUR, thickness-BLUR, d);\n\n    \n    // Time varying pixel color\n    vec3 col = palette[int(v)];\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}