{
    "Shader": {
        "info": {
            "date": "1568753451",
            "description": "The shader for my 1k intro for the Function 2019 party - requires GLSL ES 3.0\n\nA tribute to the old duck.3ds mesh that was overused in the '90s PC demoscene.\nhttps://www.pouet.net/prod.php?which=82886",
            "flags": 0,
            "hasliked": 0,
            "id": "ws33DN",
            "likes": 6,
            "name": "Minecrafted Oldschool",
            "published": 3,
            "tags": [
                "1k",
                "function2019"
            ],
            "usePreview": 0,
            "username": "dabadab",
            "viewed": 568
        },
        "renderpass": [
            {
                "code": "// the code is written to be small after compressed with shader minifier and Crinkler\n\n// the letters ENP\n\n// 111011001100\n// 100010101010\n// 110010101110\n// 100010101000\n// 111010101000\nint Z[5]=int[5](0xecc,0x8aa,0xcae,0x8a8,0xea8);\n \nvoid mainImage( out vec4 O, vec2 fragCoord )\n{\n    O=vec4(0,0,.6,0);\n    \n    float t = cos(iTime/6.)/2.+.5,md=1. // time is translated into the [0..1] interval, slowing down at the ends\n        ,k0,k1;\n    int X,Y;\n    \n    // screen coordinate translation\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3\n        // the Bezier curve along which the camera moves\n        p = mix(\n              mix(\n                mix(vec3(22,  4, 40),vec3(20, -3, 10),t),\n                mix(vec3(20, -3, 10),vec3(20, 34,  5),t),\n                t),\n              mix( \n                mix(vec3(20, -3, 10),vec3(20, 34,  5),t),\n                mix(vec3(20, 34,  5),vec3(12,  3,  0),t),\n                t),\n              t),\n        \n        // camera looks at (0,0,0)\n    \tww = normalize(- p),\n    \tuu = normalize(vec3(ww.z,0,-ww.x)), // actually it's cross(vec3(0,1,0),ww) but spelling it out is a few bytes shorter\n    \tvv = normalize(cross(ww,uu)),\n    \tdir = normalize( uv.x*uu + uv.y*vv + 2.5*ww ),\n        \n        t2;\n    \n    // tracing the ray through voxels\n    for (int i=0 ; i < 99; i++)\n\t{   \n        // calculate distance to voxel boundary\n        t2 = max((-fract(p))/dir, (1.-fract(p))/dir);\n        // go to next voxel\n        p += dir * (min(min(t2.x, t2.y), t2.z)+.01);\n        // get voxel's center\n        vec3 pi=ceil(p)-.5;\n        \n        // reflection\n        if (p.y<-2.) {\n            dir.y=-dir.y;\n            dir.z+=sin(p.x+iTime)/16.; // the rather simplistic waving\n            md=.5; // reflected voxels are darker\n        }\n        \n        // the duck's body and head - ellipsoid distance function taken from https://iquilezles.org/articles/distfunctions\n        if (min( (k0=length(pi/vec3(6,5,9)),k1=length(pi/vec3(6,5,9)/vec3(6,5,9)),k0*(k0-1.0)/k1), length(pi-vec3(0,6,4))-4.) < 0.)\n            O = pi.zy == vec2(5.5,7.5) ? vec4(.2) : vec4(.9,.9,0,0); // this is where the eyes are painted\n        \n        // the letters\n        // this is horribly verbose and inefficient - a last minute addition at 3 AM\n        if (pi.z==25.5)\n        \tfor(Y=0;Y<5;Y++)\n\t            for(X=0;X<16;X++)                    \n\t                if( ((Z[Y]>>X)&1)==1 &&pi==vec3(-2.5+float(X),2.5-float(Y),25.5))\n    \t                O=vec4(1.3);\n\n        // the duck's beak\n        if ( (pi -=vec3(0,5.7,7),k0=length(pi/vec3(2,1,4)),k1=length(pi/vec3(2,1,4)/vec3(2,1,4)),k0*(k0-1.0)/k1) <0.)\n            O=vec4(.8,.4,0,0);\n\n        // check if we set a new color (that is, hit a non-empty voxel)\n        if(O.x!=0.) {\n\t        // add the reflection modifier and a simple texture to the color and return that\n            O*=md*(1.4-length(mod(p,1.)-.5));\n            return;\n        }\n\t}\n    \n    // all tested voxels were empty, return a sea / sky color\n    O=mix(vec4(.8),O,abs(dir.y));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}