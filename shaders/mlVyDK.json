{
    "Shader": {
        "info": {
            "date": "1700702182",
            "description": "Xor's 4 value noises to create a cell like \nxor from jt's:  https://www.shadertoy.com/view/ssG3WK#\nTook my shader  and replaced geometric average with xor 4:  https://www.shadertoy.com/view/WtfSDS \n\nleft: 1 sample\nright: 4 octaves fbm",
            "flags": 0,
            "hasliked": 0,
            "id": "mlVyDK",
            "likes": 3,
            "name": "VNoise Xor Cells",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "xor",
                "cellular"
            ],
            "usePreview": 1,
            "username": "Dain",
            "viewed": 143
        },
        "renderpass": [
            {
                "code": "/*\nXor's 4 value noises to create a cell like structure --by exploiting the 4 texture channels available to get 4 value noises and convert to something vaguely cell-like\n\nxor from jt's https://www.shadertoy.com/view/ssG3WK#\n\nTook my old shader  https://www.shadertoy.com/view/WtfSDS and replaced geometric average with xor 4\n\nXor should produce a better distance field than geo avg(as long as not too much smooth xor )\n\nIf you turn off the smoothing it looks fairly similiar to goe avg shader--although darker since xor always picks the value closer to 0\n\n*/\n\n//use fade curve? Makes it rounder but I don't like the look as much for fbm\n#define SMOOTH_CELL\n\n//uncomment to use smoth xor rather than hard xor\n#define USE_SMOOTH_XOR \n\n//Offset position by prior octave to get some flow\n#define FLOW_STRENGTH 2.0\n\n\n//smin attempt:  adjusted for smooth xor so that it transitions between + and - space smoothly\n//the problem is smin with a and b both being 0 does not return 0\n//a and b need to be positive\nfloat smin_xor(float a, float b, float r) {\n    float e = max(r - abs(a - b),0.0);\n    \n    //a fade so we get smooth transition for sxor between + and - space\n    //..this might cause rate of change to be > 1-- oh well for now.. at least it is very close to surface\n    float f = min(min(a,b)/r,1.0);\n\n   //slow down the transition to hard \n   f = (f+f)-f*f;\n   \n    return min(a, b)- e*e* (1.0/(r*4.0)) *f;\n}\n\nfloat sgn(float a){\n    return a >=0.0 ? 1.0 : -1.0;\n}\n//smooth xor https://www.shadertoy.com/view/ctyyzd\n//radius of 0 is invalid\nfloat sxor(float a, float b, float r){\n    //see IQ article: https://iquilezles.org/articles/sdfxor/\n    //where he shows it can be written this way\n     return sgn(a)*sgn(b)*smin_xor(abs(a), abs(b),r );\n}\n\n//jt's https://www.shadertoy.com/view/ssG3WK#\nfloat xor(float a, float b)\n{\n    return max(min(a, b), -max(a, b));\n}\n\nfloat xor4(vec4 a){\n float x = xor(a.x, a.y);\n float y = xor(a.z, a.w);\n return xor(x,y);\n}\n\nfloat sxor4(vec4 a, float r){\n float x = sxor(a.x, a.y, r);\n float y = sxor(a.z, a.w, r);\n return sxor(x,y,r);\n}\n\nfloat sqr(float a){return a*a;}\n\n\nfloat VNoiseCell( in vec2 p )\n{\n#ifndef SMOOTH_CELL\n    vec2 uv = p;\n#else\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    vec2 uv = i + u+.5;\n#endif\n    \n    //Fetch 4 value noises--\n    vec4 r = texture(iChannel0, uv*(1.0/256.0)).rgba*2.0-1.0;\n    \n#ifdef USE_SMOOTH_XOR\n   float d =sxor4(r, 0.25);\n#else\n  float  d = xor4(r);\n#endif\n\n    //better distance field, but since xor tends toward 0 this looks rather too dark for display reasons\n    //but this is probably what you would use if you wanted an sdf\n   // return abs(d)*2.0-1.0;\n\n   d = abs(d);\n   d = (d+d)-d*d;//fade up to make it brighter\n   return d*2.0-1.0;\n\n}\n\n// -----------------------------------------------\n//Render code taken from IQ value noise https://www.shadertoy.com/view/lsf3WH\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n\t\n\tfloat f = 0.0;\n\n    float split = .4;\n    // left: value noise\t\n\tif( p.x<split )\n\t{\n\t\tf = VNoiseCell( 8.0*uv );\n\t}\n    // right: fbm - fractal noise (4 octaves)\n    else\t\n\t{\n\t\tuv *= (6.0 + sin(iTime*.25+9.0)*4.0);\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n        float flow = sin(iTime*0.1+5.0)*1.0 + FLOW_STRENGTH;\n        #if 0\n\t\tf  = 0.5000*VNoiseCell( uv ); uv = m*uv;\n\t\tf += 0.2500*VNoiseCell( uv +f*flow); uv = m*uv;\n\t\tf += 0.1250*VNoiseCell( uv +f*flow); uv = m*uv;\n\t\tf += 0.0625*VNoiseCell( uv +f*flow); uv = m*uv;\n        #else\n        \n       \tfloat f1  = VNoiseCell( uv ); uv = m*uv;\n\t\tfloat f2 = VNoiseCell( uv +f1*flow); uv = m*uv;\n\t\tfloat f3= VNoiseCell( uv +f2*flow); uv = m*uv;\n\t\tfloat f4 = VNoiseCell( uv +f3*flow); uv = m*uv;\n        \n        f = f1 *.5 + f2*.25 + f3*.125 + f4*0.0625;\n        #endif\n        \n\t}\n\n\tf = 0.5 + 0.5*f;\n\t\n    f *= smoothstep( 0.0, 0.005, abs(p.x-split) );\t\n\t\n\tfragColor = vec4( f, f, f, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}