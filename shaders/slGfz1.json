{
    "Shader": {
        "info": {
            "date": "1664036283",
            "description": "something",
            "flags": 0,
            "hasliked": 0,
            "id": "slGfz1",
            "likes": 17,
            "name": "2d Raymarching - very simple",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "raymarching",
                "example",
                "simple",
                "ray",
                "marching"
            ],
            "usePreview": 0,
            "username": "SONENEIS",
            "viewed": 1239
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat sdCirc(vec2 p,float r){\n  return length(p) - r;\n}\nfloat sdRect(vec2 p,float s){\n  return max(abs(p.x)-s,abs(p.y)-s);\n}\nfloat sdLine(vec2 p,vec2 p1,vec2 p2,float r){\n  vec2 a1 = p - p1; vec2 a2 = p2 - p1;\n  float h = clamp(dot(a1,a2)/dot(a2,a2),0.0,1.0);\n  return length(a1 - a2*h) - r;\n}\nfloat sdTri(vec2 p,vec2 p0,vec2 p1,vec2 p2){\n  vec2 e0 = p1 - p0, e1 = p2 - p1, e2 = p0 - p2;\n  vec2 v0 = p - p0, v1 = p - p1, v2 = p - p2;\n  vec2 pq0 = v0 - e0*clamp(dot(v0,e0)/dot(e0,e0),0.0,1.0);\n  vec2 pq1 = v1 - e1*clamp(dot(v1,e1)/dot(e1,e1),0.0,1.0);\n  vec2 pq2 = v2 - e2*clamp(dot(v2,e2)/dot(e2,e2),0.0,1.0);\n  float s = e0.x*e2.y - e0.y*e2.x;\n  vec2 f = min(min(\n    vec2(dot(pq0,pq0),s*(v0.x*e0.y-v0.y*e0.x)),\n    vec2(dot(pq1,pq1),s*(v1.x*e1.y-v1.y*e1.x))),\n    vec2(dot(pq2,pq2),s*(v2.x*e2.y-v2.y*e2.x))\n  );\n  return -sqrt(f.x)*sign(f.y);\n}\n\nfloat map(vec2 p){\n  float d = 1.0;\n\n  d = min(d,sdCirc(p - vec2(-0.4,0.6),0.1));\n  d = min(d,sdCirc(p - vec2(0.5,-0.3),0.2));\n\n  d = min(d,sdRect((p - vec2(-0.2,0.1))*rot(-iTime*0.8),0.1));\n  d = min(d,sdRect(p - vec2(0.9,0.5),0.1));\n\n  d = min(d,sdLine(p,vec2(-0.7,-0.2),vec2(-0.7,0.4),0.025));\n  \n  {\n  vec2 a = vec2(0.8,-0.2);\n  vec2 b = vec2(0.6,0.2);\n  vec2 m = (a + b) / 2.0;\n  d = min(d,sdLine((p-m)*rot(iTime*0.9)+m,a,b,0.01));\n  }\n  \n  {\n  vec2 a = vec2(-0.2,-0.5);\n  vec2 b = vec2(-0.3,-0.7);\n  vec2 c = vec2(0.0,-0.6);\n  vec2 m = (a+b+c) / 3.0;\n  vec2 q = (p-m) * rot(iTime) + m;\n  d = min(d,sdTri(q,a,b,c));\n  d = min(d,sdCirc(q - a,0.05));\n  d = min(d,sdCirc(q - b,0.05));\n  d = min(d,sdCirc(q - c,0.05));\n  }\n  \n  return d;\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n  vec2 uv = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n  vec2 m = (2.0*iMouse.xy - iResolution.xy) / iResolution.y;\n  vec3 col = vec3(0.0);\n\n  uv *= 0.75;\n\n  col = mix(col,vec3(0,0,1),smoothstep(4.0/iResolution.y,0.0,map(uv)));\n  col += sin(200.0*map(uv))*0.2;\n  col = mix(col,vec3(0,1,1),smoothstep(4.0/iResolution.y,0.0,abs(map(uv))));\n  \n  {\n  \tvec2 ro = m;\n  \tvec2 rd = normalize(vec2(1.0)*rot(iTime*0.1));\n  \t\n    float d = 0.0;\n    for(float i=0.0;i<50.0;i++){\n      vec2 p = ro + rd * d;\n      float hit = map(p);\n    \t\n      if(abs(hit) < 0.01 || d > 10.0) break;\n      \n      d += hit;\n    \t\n      col = mix(col,vec3(1),smoothstep(4.0/iResolution.y,0.0,\n        abs(length(uv - p) - abs(hit))\n      ));\n      col = mix(col,vec3(0,1,0),smoothstep(4.0/iResolution.y,0.0,\n        length(uv - p) - 0.01\n      ));\n    }\n    \n    vec2 p = ro + rd * d;\n    \n    col = mix(col,vec3(1,0,0),smoothstep(4.0/iResolution.y,0.0,\n      sdLine(uv,ro,ro+rd*d,0.0025)\n    ));\n  }\n    \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}