{
    "Shader": {
        "info": {
            "date": "1706396686",
            "description": "A little shader I made that looks very fabric like too me.",
            "flags": 0,
            "hasliked": 0,
            "id": "lfBSDm",
            "likes": 2,
            "name": "cool blue fabric",
            "published": 3,
            "tags": [
                "fabric"
            ],
            "usePreview": 0,
            "username": "trumpetrespas",
            "viewed": 155
        },
        "renderpass": [
            {
                "code": "/// ======= Inigo Quilez's code =======\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat snoise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n\nfloat fbm( in vec2 x )\n{    \n    float H=0.9;\n    float t = 0.0;\n    for( int i=0; i<5; i++ )\n    {\n        float f = pow( 2.0, float(i) );\n        float a = pow( f, -H );\n        t += a*snoise(f*x);\n    }\n    return t;\n}\n\nfloat rectSDF( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n/// ======= My Code =======\n\nfloat rectSDF( in vec2 p) { return rectSDF(p, vec2(1.0, 1.0)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time=iTime*1.0;\n    vec3  background = vec3(0.2);\n    vec3  color = background;\n    vec2  bottomLeft = fragCoord.xy/iResolution.xy;\n    vec2  center = (gl_FragCoord.xy*2.0 - iResolution.xy)/iResolution.y;\n    vec2  uv = center;\n    vec2 pol = vec2(atan(uv.y, uv.x), length(uv));\n    \n    uv.x += time/32.0;\n\n    //uv.x += time/8.0;\n    //uv.y += time/16.0;\n\n    uv.y -= time/300.0;\n\n    uv.x += cos(uv.y*128.0)/512.0;\n    uv.y += cos(uv.x*8.0)/512.0;\n\n    float noise = snoise(vec2(fbm(vec2(fbm(uv*9.0), fbm(uv))), fbm(uv*2.0))*1.0+time/10.0);\n    //uv += noise/(abs(cos(time)*64.0+32.0));\n\n    //uv.y -= fract(cos(uv.x+time))/16.0;\n    //uv = fract(vec2(uv.x/2.0, uv.y)*3.0)-0.5;\n    //uv = fract(uv/32.0);\n\n\n\n    float f = smoothstep(0.02, 0.04, 1.0-rectSDF(center/16.0));\n    f *= noise/2.0;\n    //f = abs(cos(f*3.0+time));\n\n    //f += noise/2.0;\n    //f = max(f, length(vec2(center.x, center.y+0.5)/3.0));\n\n    color = mix(vec3(0.01, 0.01, 0.2), vec3(0.5, 0.9, 0.9), f);\n\n    fragColor = vec4(color, 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}