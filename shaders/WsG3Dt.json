{
    "Shader": {
        "info": {
            "date": "1571156792",
            "description": "I played to much Zelda Botw",
            "flags": 64,
            "hasliked": 0,
            "id": "WsG3Dt",
            "likes": 6,
            "name": "Shadertober 15 Legend",
            "published": 3,
            "tags": [
                "raymarching",
                "zelda",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 412
        },
        "renderpass": [
            {
                "code": "// SHADERTOBER 15 Legend\n// Poulet vert 15-10-2019\n// used iq menger spone code for fractal crap in the background\n\n#define PI 3.14159\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nfloat uSDF(float s1, float s2) { return min(s1, s2);}\n\nfloat sSDF( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat sdBox( vec3 p, float s )\n{\n  vec3 q = abs(p) - vec3(s);\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdCross( vec3 p )\n{\n  float da = sdBox(p.xyz, vec3(3.,1.0,1.0));\n  float db = sdBox(p.yzx, vec3(1.0,3.,1.0));\n  float dc = sdBox(p.zxy, vec3(1.0,1.0,3.));\n  return min(da,min(db,dc));\n}\n\nvec3 opRep(vec3 p, vec3 c)\n{\n     return mod(p+0.5*c,c)-0.5*c;\n}\n\nfloat opU(float d1, float d2)\n{\n    return min(d1, d2);\n}\n\nvec2 opU2( vec2 d1, vec2 d2 )\n{\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n// Scene setup\n\nvec2 map(vec3 pos)\n{\n\n    vec2 t = vec2(pos.y, 0.0);\n    \n    vec3 cp = pos + vec3(0.0, -1.0, 0.0);\n    cp = opRep(cp, vec3(1.0));\n    float c = sdBox(cp, vec3(1.0));\n    \n    float s = 1.0;\n    for(int m=0; m<3; m++)\n    {\n        vec3 p = pos + vec3(0.0, iTime, 0.0);\n        vec3 a = mod(p*s, 2.0)-1.0;\n        s*= 3.1;\n        vec3 r = 1.0 - 3.0 * abs(a);\n        \n        float cro = sdCross(r)/s;\n        \n        c = max(c, -cro);\n    }\n    \n    float subBox = sdBox(pos+vec3(0.0, -1.2, 0.0), .5);\n    c = max(c, -subBox);\n    \n    vec2 shape = vec2(c, 1.0);\n    \n    vec3 trip = pos + vec3(0.21, -1.0, 0.0);\n    float tri = sdTriPrism(trip, vec2(.25, .1));\n    trip = pos + vec3(-0.21, -1.0, 0.0);\n    tri = opU(tri, sdTriPrism(trip, vec2(.25, .1)));\n    trip = pos + vec3(-0.0, -1.37, 0.0);\n    tri = opU(tri, sdTriPrism(trip, vec2(.25, .1)));\n    \n    t = shape;\n    t = opU2(t, vec2(tri, 2.0));\n    \n    return t;\n}\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<128 ; i++)\n    {\n        vec2 ray = map(ro + rd * t);\n        \n        if(ray.x < (0.0001*t))\n        {\n            return vec2(float(i)/128., ray.y);\n        }\n        \n        t += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    vec2 t = CastRay(ro, rd);\n    vec3 pos = vec3(ro + rd * t.x);\n    \n    vec3 col = vec3(0.0);\n    \n    if(t.x == -1.0)\n    {\n        \n        col = vec3(.0); \n        \n    }\n    else\n    {\n        float depth = 1.0 - t.x;\n        \n        if(t.y == 0.0)\n        {\n            col = vec3(depth*.2);\n        }\n        else if(t.y == 1.0)\n        {\n            col = vec3(1.0, 1.0, 1.0) * depth * .5;\n        }\n        else if(t.y == 2.0)\n        {\n            col = vec3(1.0, .8, 0.0) * depth;\n        }\n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 1.0 * forward);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float time = iTime * .5;\n    \n    vec3 cp = vec3(sin(time), 1.5, cos(time));\n    vec3 ct = vec3(0.0, 1.2, 0.0);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec2 screenUV = fragCoord.xy / iResolution.xy;\n    \n    vec3 col = Render(cp, vd, screenUV);\n    \n    // compo\n    \n    col.rg -= screenUV.y * .5 * length(uv);\n    col -= random(uv)*.1* length(uv) * .4;\n    \n    col = clamp(col, 0.0, 1.0);\n    col *= 1.0-length(uv)*.5;\n    \n    col = sqrt(clamp(col, 0.0, 1.0)) * 1.2;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 19981,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/zelda-soundtracks/sets/legend-of-zelda-nes"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}