{
    "Shader": {
        "info": {
            "date": "1584879705",
            "description": "You need to tune your TV set...\n\n\nstarted from Iq's green keying effect :\nhttps://www.shadertoy.com/view/XsfGzn",
            "flags": 0,
            "hasliked": 0,
            "id": "wdlcWN",
            "likes": 4,
            "name": "buggy video",
            "published": 3,
            "tags": [
                "2d",
                "chroma",
                "chroma",
                "greenscreen",
                "chromakey",
                "matte",
                "compositing",
                "despillbuggyeffect"
            ],
            "usePreview": 0,
            "username": "ManuManu",
            "viewed": 459
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n#define METHOD 2  // try method 1 and method 2\n\n\n// procedural noise from IQ\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n\nfloat fbm(vec2 uv)\n{\n\tfloat f;\n\tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise( uv ); uv = m*uv;\n\tf += 0.2500*noise( uv ); uv = m*uv;\n\tf += 0.1250*noise( uv ); uv = m*uv;\n\tf += 0.0625*noise( uv ); uv = m*uv;\n\tf = 0.5 + 0.5*f;\n\treturn f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    \n    // changing offset magnitude over time :\n    float maxMag = 1./50.;\n    float timeFreqFactor = 2.;\n    float timeNoiseFactor = 1.2;\n    float sinPower = 6.;\n    float noiseTimeFactor = 10.;\n    float offsetMag = maxMag * pow( sin(iTime*timeFreqFactor + timeNoiseFactor*noise( vec2(0.,iTime*noiseTimeFactor) ) ), sinPower );\n    //offsetMag = maxMag;\n    \n    // changing offset pos over time :\n    float timeChgFreq = .1;\n    float nbDifferentPos = 10.;\n    float timeChgFactor = 1.;\n    float timeChg = mod ( floor( iTime / timeChgFreq ), nbDifferentPos) * timeChgFactor;\n    //float timeChg = ( iTime - mod( iTime, timeChgFreq)) / timeChgFreq * 0.01;\n    //float timeChg = fract( iTime / timeChgFreq ) * 0.01;\n    //timeChg = 0.;\n    \n    float freqFact = 50.;\n    //float xoffset = hash( vec2(.0, q.y + timeChg) ).x * offsetMag;\n    float xoffset = noise( vec2(0., freqFact*(q.y + timeChg)) ) * offsetMag;\n    \n    \n    vec2 q_offset = vec2(q.x + xoffset, q.y);\n    \n    vec3 bg = texture( iChannel0, q ).xyz;\n\tvec3 fg = texture( iChannel1, q_offset ).xyz;\n\t\n    \n    float maxrb = max( fg.r, fg.b );\n    float k = clamp( (fg.g-maxrb)*5.0, 0.0, 1.0 );\n    \n#if METHOD==1\n    \n\tfloat ll = length( fg );\n    fg.g = min( fg.g, maxrb*0.8 );\n    fg = ll*normalize(fg);\n\n#else    \n\n    float dg = fg.g; \n    fg.g = min( fg.g, maxrb*0.8 ); \n    fg += dg - fg.g;\n\n#endif\n\n    fragColor = vec4( mix(fg, bg, k), 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}