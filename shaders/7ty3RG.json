{
    "Shader": {
        "info": {
            "date": "1637875213",
            "description": "Performing barycentric quadratic interpolation orthogonally. Left: bilinear interpolation, Right: baryquadratic interpolation. Bottom: first derivative.\nInspired by the Cendes-Wong algorithm. ",
            "flags": 0,
            "hasliked": 0,
            "id": "7ty3RG",
            "likes": 28,
            "name": "Baryquadratic Interpolation (2D)",
            "published": 3,
            "tags": [
                "barycentric",
                "quadratic",
                "interpolation"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 651
        },
        "renderpass": [
            {
                "code": "\n// this code is in the public domain\n\nvec4 sample_baryquadratic_2d(sampler2D channel, vec2 res, vec2 uv) {\n    vec2 pixelpos = uv * res;\n    vec2 q = fract(pixelpos);\n    ivec2 t = ivec2(pixelpos);\n    ivec2 ires = ivec2(res);\n    ivec3 e = ivec3(-1, 0, 1);\n    vec4 s00 = texelFetch(channel, (t + e.xx) % ires, 0);\n    vec4 s01 = texelFetch(channel, (t + e.xy) % ires, 0);\n    vec4 s02 = texelFetch(channel, (t + e.xz) % ires, 0);\n    vec4 s10 = texelFetch(channel, (t + e.yx) % ires, 0);\n    vec4 s11 = texelFetch(channel, (t + e.yy) % ires, 0);\n    vec4 s12 = texelFetch(channel, (t + e.yz) % ires, 0);\n    vec4 s20 = texelFetch(channel, (t + e.zx) % ires, 0);\n    vec4 s21 = texelFetch(channel, (t + e.zy) % ires, 0);\n    vec4 s22 = texelFetch(channel, (t + e.zz) % ires, 0);\n    \n    vec4 c00 = (s00 + s01 + s10 + s11) / 4.0;\n    vec4 c10 = (s10 + s11 + s20 + s21) / 4.0;\n    vec4 c01 = (s01 + s02 + s11 + s12) / 4.0;\n    vec4 c11 = (s11 + s12 + s21 + s22) / 4.0;\n    \n    vec4 e10 = (s11 + s10) / 2.0;\n    vec4 e01 = (s11 + s01) / 2.0;\n    vec4 e12 = (s11 + s12) / 2.0;\n    vec4 e21 = (s11 + s21) / 2.0;\n    \n    vec4 m00 = (e10 + e01) / 2.0;\n    vec4 m10 = (e10 + e21) / 2.0;\n    vec4 m01 = (e12 + e01) / 2.0;\n    vec4 m11 = (e12 + e21) / 2.0;\n    \n    vec4 u0 = (m00 + m10 + m01 + m11) / 4.0;\n    vec3 w;\n    vec2 qa = abs(q-0.5);\n    bool x_dominant = qa.x >= qa.y;\n    vec2 d = x_dominant?q.xy:q.yx;\n    float s = sign(d.x - 0.5);\n    bool d_pos = (d.x >= 0.5);    \n    bool lower_right = (x_dominant == d_pos);\n    vec4 u1 = lower_right?c10:c01;\n    vec4 u2 = d_pos?c11:c00;\n    vec4 m0 = (x_dominant?(d_pos?e21:e01):(d_pos?e12:e10));\n    vec4 m1 = d_pos?m11:m00;\n    vec4 m2 = lower_right?m10:m01;\n    w.x = 1.0 - abs(d.x - 0.5)*2.0;\n    w.y = (d.x - d.y)*s;\n    w.z = (q.x + q.y - 1.0)*s;\n    vec3 m = 2.0*vec3(w.y*w.z, w.x*w.z, w.x*w.y);\n    w = w*w; \n    return vec4(\n        dot(w, vec3(u0.x, u1.x, u2.x)) + dot(m, vec3(m0.x, m1.x, m2.x)),\n        dot(w, vec3(u0.y, u1.y, u2.y)) + dot(m, vec3(m0.y, m1.y, m2.y)),\n        dot(w, vec3(u0.z, u1.z, u2.z)) + dot(m, vec3(m0.z, m1.z, m2.z)),\n        dot(w, vec3(u0.w, u1.w, u2.w)) + dot(m, vec3(m0.w, m1.w, m2.w)));\n}\n\nvec2 sample_baryquadratic_2d_gradient(sampler2D channel, vec2 res, vec2 uv) {\n    // the field can be made smoother by choosing a higher epsilon value\n    vec2 eps = vec2(1e-5, 0.0);\n    return vec2(\n        sample_baryquadratic_2d(channel, res, uv + eps.xy).x - sample_baryquadratic_2d(channel, res, uv - eps.xy).x,\n        sample_baryquadratic_2d(channel, res, uv + eps.yx).x - sample_baryquadratic_2d(channel, res, uv - eps.yx).x) / (2.0*eps.x*res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;    \n    \n    float h = uv.x;\n    float w = uv.y;\n    \n    uv += iTime * 0.2;\n    uv /= 30.0;\n\n    vec4 col;\n    vec2 n;\n    if (h < 0.0) {\n    \tcol = texture(iChannel0, uv).rrrr;\n        n = vec2(dFdx(col.r), dFdy(col.r)) * iResolution.y / 16.0;\n    } else {\n        col = sample_baryquadratic_2d(iChannel0, iChannelResolution[0].xy, uv).rrrr;\n        n = vec2(dFdx(col.r), dFdy(col.r)) * iResolution.y / 16.0;\n        if (h > 0.9) {            \n            n = sample_baryquadratic_2d_gradient(iChannel0, iChannelResolution[0].xy, uv);\n        }\n    }\n    float ph = sin(iTime * 0.1);\n    n = mix(n, normalize(n), ph*ph);\n    if (w > -0.5) {\n        fragColor = col;\n    } else {\n        fragColor = vec4(n*0.5+0.5, 0.0, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}