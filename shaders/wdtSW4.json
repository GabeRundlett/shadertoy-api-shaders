{
    "Shader": {
        "info": {
            "date": "1572013466",
            "description": "This shader is based on the following tutorial code.\nhttps://www.shadertoy.com/view/wdGGz3\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wdtSW4",
            "likes": 5,
            "name": "Slice and Explosion",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 429
        },
        "renderpass": [
            {
                "code": "// An awesome idea about the cutting distance function objects.\n// @BigWings Thank you so much for the great tutorial!\n// https://youtu.be/Vmb7VGBVZJA\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat GetDist(vec3 p) {\n    float explodeDist = 0.5;\n    float speed = 2.0;\n    float time = mod(iTime,3.0);\n    float wait = 1.0;\n    float t = (time<wait)?-1.0:-1.0+((time-wait)*speed);\n\n    float x = (t*explodeDist)*-1.0;\n    float y = (t*explodeDist)+explodeDist;\n    \n    float _floor = p.y -(y+explodeDist);\n    float _floor2 = p.y +(y-explodeDist);\n    \n    vec3 movY = vec3(0,y,0);\n    float movx = x-explodeDist;\n    float plane = dot((p-vec3(movx,0.0,movx)-movY),vec3(0.7,0.5,0.5))-1.0;\n    float box = sdBox((p-vec3(movx,1.0,movx)-movY), vec3(1));\n   \n    movx = (x*-1.0)+explodeDist;\n    float plane2 = dot(p-vec3(movx,0,0)-movY,vec3(0.7,0.5,0.5))-1.0;\n    float box2 = sdBox(p-vec3(movx,1.0,0)-movY, vec3(1));\n    \n    float d = max(plane, box);\n    float d2 = max(-plane2, box2);\n    \n    movx = x-explodeDist;\n    float plane3 = dot(p-vec3(movx,0.0,0)+movY,vec3(0.7,0.5,0.5))-1.0;\n    float box3 = sdBox(p-vec3(movx,1.0,0)+movY, vec3(1));\n   \n    movx = (x*-1.0)+explodeDist;\n    float plane4 = dot(p-vec3(movx,0,movx)+movY,vec3(0.7,0.5,0.5))-1.0;\n    float box4 = sdBox(p-vec3(movx,1.0,movx)+movY, vec3(1));\n    \n    float d3 = max(plane3, box3);\n    float d4 = max(-plane4, box4);\n\n    return min(max(-_floor,min(d,d2)),max(_floor2,min(d3,d4)));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(3, 5, 4);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n\n    return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -5);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n    \n        float dif = GetLight(p);\n        col = vec3(dif);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}