{
    "Shader": {
        "info": {
            "date": "1708035134",
            "description": "Just a sketch! Warming up after a long time away. Mouse controls the camera.",
            "flags": 64,
            "hasliked": 0,
            "id": "M3fGWs",
            "likes": 1,
            "name": "2024/02/15",
            "published": 3,
            "tags": [
                "raymarching",
                "audio",
                "kaleidoscope",
                "trope"
            ],
            "usePreview": 0,
            "username": "hughsk",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "precision highp float;\n\nvec2 squareFrame(vec2 screenSize, vec2 coord) {\n  vec2 position = 2.0 * (coord.xy / screenSize.xy) - 1.0;\n  position.x *= screenSize.x / screenSize.y;\n  return position;\n}\n\nhighp float random(vec2 co) {\n  highp float dt = dot(co.xy, vec2(12.9898, 78.233));\n  highp float sn = mod(dt, 3.14);\n  return fract(sin(sn) * 43758.5453);\n}\n\nvec2 rotate2D(vec2 p, float a) {\n  return p * mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat fogFactorExp2(const float dist, const float density) {\n  float d = density * dist;\n  return 1.0 - clamp(exp2(d * d * -1.442695), 0.0, 1.0);\n}\n\nmat3 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n  return mat3(uu, vv, ww);\n}\n\nvec3 getRay(mat3 camMat, vec2 screenPos, float lensLength) {\n  return normalize(camMat * vec3(screenPos, lensLength));\n}\n\nvec3 getRay(vec3 origin, vec3 target, vec2 screenPos, float lensLength) {\n  mat3 camMat = calcLookAtMatrix(origin, target, 0.0);\n  return getRay(camMat, screenPos, lensLength);\n}\n\nvoid orbitCamera(in float camAngle, in float camHeight, in float camDistance, in vec2 screenResolution, out vec3 rayOrigin, out vec3 rayDirection, in vec2 coord) {\n  vec2 screenPos = squareFrame(screenResolution, coord);\n  vec3 rayTarget = vec3(0.0);\n  rayOrigin = vec3(camDistance * sin(camAngle), camHeight, camDistance * cos(camAngle));\n  rayDirection = getRay(rayOrigin, rayTarget, screenPos, 2.0);\n}\n\nfloat gaussianSpecular(vec3 lightDirection, vec3 viewDirection, vec3 surfaceNormal, float shininess) {\n  vec3 H = normalize(lightDirection + viewDirection);\n  float theta = acos(dot(H, surfaceNormal));\n  float w = theta / shininess;\n  return exp(-w * w);\n}\n\nfloat sdCappedTorus(vec3 p, vec2 sc, float ra, float rb) {\n  p.x = abs(p.x);\n  float k = sc.y * p.x > sc.x * p.y ? dot(p.xy, sc) : length(p.xy);\n  return sqrt(dot(p, p) + ra * ra - 2.0 * ra * k) - rb;\n}\n\nvec2 doModel(vec3 p);\n\nvec2 calcRayIntersection(vec3 rayOrigin, vec3 rayDir, float maxd, float precis) {\n  float latest = precis * 2.0;\n  float dist = +0.0;\n  float type = -1.0;\n  vec2 res = vec2(-1.0, -1.0);\n  for (int i = 0; i < 120; i++) {\n    if (latest < precis || dist > maxd)\n      break;\n    vec2 result = doModel(rayOrigin + rayDir * dist);\n    latest = result.x;\n    type = result.y;\n    dist += latest * 0.7;\n  }\n  if (dist < maxd) {\n    res = vec2(dist, type);\n  }\n  return res;\n}\n\nvec3 calcNormal(vec3 pos, float eps) {\n  const vec3 v1 = vec3(1.0, -1.0, -1.0);\n  const vec3 v2 = vec3(-1.0, -1.0, 1.0);\n  const vec3 v3 = vec3(-1.0, 1.0, -1.0);\n  const vec3 v4 = vec3(1.0, 1.0, 1.0);\n  return normalize(v1 * doModel(pos + v1 * eps).x + v2 * doModel(pos + v2 * eps).x + v3 * doModel(pos + v3 * eps).x + v4 * doModel(pos + v4 * eps).x);\n}\n\nvec3 calcNormal(vec3 pos) {\n  return calcNormal(pos, 2e-3);\n}\n\nfloat intersectPlane(vec3 ro, vec3 rd, vec3 nor, float dist) {\n  float denom = dot(rd, nor);\n  float t = -(dot(ro, nor) + dist) / denom;\n  return t;\n}\n\nfloat getTime() {\n  return iTime * 1.5;\n}\n\nfloat getWaveform(float t) {\n  return texture(iChannel0, vec2(t, 1.0)).r;\n}\n\nfloat getFrequency(float t) {\n  return texture(iChannel0, vec2(t, 0.0)).r;\n}\n\n// pModMirror2 is part of hg_sdf: https://mercury.sexy/hg_sdf/\n// \n// MIT License\n//\n// Copyright (c) 2011-2021 Mercury Demogroup\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nvec2 pModMirror2(inout vec2 p, vec2 size) {\n  vec2 halfsize = size * 0.5;\n  vec2 c = floor((p + halfsize) / size);\n  p = mod(p + halfsize, size) - halfsize;\n  p *= mod(c, vec2(2)) * 2.0 - vec2(1);\n  return c;\n}\n\nfloat doSmileMouth(vec3 p, int mode) {\n  vec2 c = vec2(sin(1.5), cos(1.5));\n  p.xz = p.zx;\n  if (mode == 0) {\n    p.y = -p.y;\n  }\n  else {\n    p.z += 1.7;\n    p.y += 0.35;\n    p.yz = rotate2D(p.yz, 0.5);\n  }\n  float d = sdCappedTorus(p, vec2(c), 0.35, 0.12);\n  d -= 0.2 * max(0.0, getFrequency(0.1) - 0.2);\n  return d;\n}\n\nfloat doSmileEyes(vec3 p) {\n  p.z = abs(p.z);\n  p.x = abs(p.x + 0.85) - 0.85;\n  p.y -= 0.4;\n  p.z -= 0.36;\n  return length(p) - 0.2;\n}\n\nvec2 doFace(vec3 p) {\n  float d = doSmileMouth(p, 0);\n  d = min(d, doSmileMouth(p, 1));\n  d = min(d, doSmileEyes(p));\n  vec2 smile = vec2(d, 0.0);\n  p.x += 0.85;\n  vec2 face = vec2(length(p) - 1.0, 1.0);\n  if (face.x > -smile.x) {\n    return face;\n  }\n  else {\n    return-smile;\n  }\n}\n\nvec2 doModel(vec3 p) {\n  p.y -= 0.5;\n  p.z += iTime * 0.5;\n  vec2 idx = pModMirror2(p.yz, vec2(3.0));\n  p.xy = rotate2D(p.xy, idx.y + iTime);\n  p.y += sin(iTime) * 1.0;\n  vec2 t = doFace(p);\n  return t;\n}\n\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n  return a + b * cos(6.28318 * (c * t + d));\n}\n\nvec3 bg(vec3 ro, vec3 rd) {\n  float beat1 = getFrequency(0.01);\n  float beat2 = getFrequency(0.08);\n  float t = rd.y * 0.35 + 0.35;\n  vec3 grad = vec3(0.15, 0.15, 0.15) + palette(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(0.8, 0.8 - beat2, 0.5), vec3(0.0, 0.2, 0.5));\n  grad.b = pow(grad.b, 0.35);\n  float d = intersectPlane(ro, rd, vec3(0, 1, 0), 2.0);\n  if (d > 0.0) {\n    vec3 p = ro + rd * d;\n    p.z -= iTime * 1.8;\n    p.x += getWaveform(fract(p.z * 0.02 + 0.5 * 0.4 * iTime)) * 8.0;\n    float g = 1.0 - pow(abs(sin(p.x * 1.25) * cos(p.z * 1.25)), 0.06125);\n    g = 1.0 - abs(g - 0.8);\n    g *= 1.0 + beat1 * 3.0;\n    grad += (1.0 - fogFactorExp2(d, 0.04)) * vec3(0.5, 2.5, 1.9) * g * 0.18;\n  }\n  return grad;\n}\n\nvec2 cameraPosition() {\n  float time = iTime * 0.25;\n  vec2 mouse = iMouse.z <= 0.0 ? vec2(\n    sin(time * 1.0833 + cos(time)) * 0.5 + 0.5,\n    cos(time * 0.9324) * 0.5 + 0.5\n  ) : iMouse.xy / iResolution.xy;\n  \n  float rotation = mouse.x * 3.141593 * 2.0;\n  float height = (1.0 - mouse.y) * 10.0;\n  return vec2(rotation, height);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 ro, rd;\n  vec2 uv = squareFrame(iResolution.xy, fragCoord.xy);\n  fragCoord.x = abs(fragCoord.x - iResolution.x / 2.0) + iResolution.x / 2.0;\n  fragCoord.y = abs(fragCoord.y - iResolution.y / 2.0) + iResolution.y / 2.0;\n  vec2 camera = cameraPosition();\n  orbitCamera(camera.x, camera.y, 8.0, iResolution.xy, ro, rd, fragCoord.xy);\n  vec3 color = bg(ro, rd);\n  vec2 t = calcRayIntersection(ro, rd, 20.0, 1e-3);\n  if (t.x > -0.5) {\n    vec3 pos = ro + rd * t.x;\n    vec3 nor = calcNormal(pos);\n    vec3 ldir1 = normalize(vec3(-0.25, 1, -1));\n    vec3 ldir2 = normalize(vec3(0, -0.8, 1));\n    color = bg(pos, reflect(rd, nor)) + 0.05;\n    vec3 albedo = mix(vec3(1.0, 0.6, 0.4), vec3(0.3), 1.0 - t.y);\n    color *= albedo;\n    color += 0.33 * gaussianSpecular(ldir1, -rd, nor, 0.385);\n    color += 0.15 * gaussianSpecular(ldir2, -rd, nor, 0.25);\n  }\n  else {\n    color = bg(ro, rd);\n  }\n  color.g = smoothstep(-0.09, 1.1, color.g);\n  color.r = smoothstep(0.0, 1.02, color.r);\n  color.b += 0.015;\n  color -= dot(uv * 0.05, uv) * vec3(0.5, 0.3, 0.6);\n  color += (uv.y * 0.5 + 0.5) * vec3(5e-3, -0.05, 0.105) * 0.6;\n  color += random(fragCoord.xy * 1e-3 + sin(getTime())) * 0.04;\n  fragColor.rgb = color;\n  fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 36034,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/com-truise/trying-times-for-the-indirect"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}