{
    "Shader": {
        "info": {
            "date": "1576781378",
            "description": "( variant of [url]https://www.shadertoy.com/view/3lt3DN[/url] ). better seen in fullscreen. \nright: raw fwidth shows the 2x2 blocks\nleft: correction using the correct 3x3 cross neighborhood. Trick: store fwidth( f(u) ) and fwidth( f(u+1) )\nmid: * texture",
            "flags": 32,
            "hasliked": 0,
            "id": "tttGRB",
            "likes": 10,
            "name": "rebalanced fwidth (2)",
            "published": 3,
            "tags": [
                "derivatives"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 489
        },
        "renderpass": [
            {
                "code": "// Fork of https://www.shadertoy.com/view/3lt3DN\n\n// --- reconstruction of balanced derivatives \n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = u/R, \n         f = mod( u-.5,2.);                   // position within 2x2 neighborhood\n\n    float v = U.x>.5\n          ?    T(u).y                         // left: fwidth\n          : (  T(u).y + T(u-(1.-f)).w ) / 2.; // right: smooth. y = D(u) , w = D(u+1) -> checkered 2x2 neighborhood\n    \n    if (abs(U.x-.5)<.25) v *= texture(iChannel1,U).x/4.; // middle: derivative * texture\n    \n    if (U.y<.5) v = 1.-v;                     // reverse video\n    O = vec4( sqrt(v) );                      // to sRGB\n    \n    if ( int(u.x) % int(R.x/4.) == 0 ) O = vec4(1,0,0,1);   // separators\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- source image\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = 4. * texture(iChannel0,(U+vec2(iFrame,0))/iChannelResolution[0].xy);\n    O*= O;  // to flat RGB\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- to get all hardware derivatives without the 2x2 limitation, evaluate checkered versions\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float a = T(U).r,\n          b = T(U+1.).r;\n    O.x = a;\n    O.y = fwidth(a);\n    O.z = b;\n    O.w = fwidth(b);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch( iChannel0, ivec2(U), 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}