{
    "Shader": {
        "info": {
            "date": "1639779503",
            "description": "im not sure if this is a monstrosity or a masterpiece",
            "flags": 0,
            "hasliked": 0,
            "id": "slcSW2",
            "likes": 22,
            "name": "trippy butterfly thing i dont kn",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 thc(float a, vec3 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat h21 (float a, float b, float sc) {\n    a = mod(a, sc); b = mod(b, sc);\n    return fract(sin(dot(vec2(a, b), vec2(12.9898, 78.233)))*43758.5453123);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 pnt(vec2 ipos, float sc) {\n    float h = h21(ipos.x, ipos.y, sc);\n    float t = iTime + 10. * h;\n    float k = 1.5 +  h;\n    return 0.4 * vec2(thc(4. * (1.-h), 100. + k * t), \n                      ths(4. * h, 100. + (1.-k) * t));\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b * cos(6.28318*(c*t+d) );\n}\n\nfloat test(vec2 p) {\n    return h21(floor(h21(p) + iTime) + 0.01 * p);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/ iResolution.y;\n    vec2 ouv = uv;\n    ouv.y += 0.05 * cos(iTime);\n    vec2 ms = (iMouse.xy - 0.5 * iResolution.xy)/ iResolution.y;\n    //uv += 3. + 0.04 * iTime;\n    \n    float a = atan(uv.y, uv.x);\n    float r = length(uv); \n    //uv = vec2(4. * a/pi, log(r) - 0.1 * iTime);\n    \n    float c = 2.;\n    // cant scale dynamically because sc used in h21 (bad)\n    float sc = 50.;// + 1./length(ouv-ms);\n    vec2 fpos = fract(sc * uv) - 0.;\n    vec2 ipos = floor(sc * uv) + 0.5;    \n    \n    // Generate values for each corner of uv (sloppy)\n    float l  = h21(ipos.x + 1., ipos.y,      c * sc);\n    float t  = h21(ipos.x,      ipos.y + 1., c * sc);\n    float tl = h21(ipos.x + 1., ipos.y + 1., c * sc);\n    float id = h21(ipos.x,      ipos.y,      c * sc);\n\n    vec2 lp = ipos + vec2(1.,0.);\n    vec2 tp = ipos + vec2(0.,1.);\n    vec2 tlp = ipos + vec2(1.);\n    vec2 idp = ipos;\n\n    l = test(lp);\n    t = test(tp);\n    tl = test(tlp);\n    id = test(idp);\n    \n    //float v = h21(floor(h21(ipos) + iTime) + 0.01 * ipos);\n\n    // Smooth fpos completely, so v noise looks better\n    vec2 sfpos = fpos * fpos * (3. - 2. * fpos);\n    \n    // Smooth the grid uvs so different uvs meet continuously on the edges\n    //fpos = mix(fpos, fpos * fpos * (3. - 2. * fpos), 0.5 * thc(4., iTime));\n    \n    // Box lerp between the corner values to get a radius value for this pixel\n    float v = l  * sfpos.x      * (1.-sfpos.y)\n     \t    + t  * (1.-sfpos.x) * sfpos.y\n     \t    + tl * sfpos.x      * sfpos.y\n      \t    + id * (1.-sfpos.x) * (1.-sfpos.y);\n            \n    uv *= mix(0.6, 0.2, 0.5 + 0.5 * thc(4., v * 10. + iTime));// + 0.5 * cos(v + iTime);\n    vec2 p = vec2(thc(2., 0.2 * v + 8. * abs(uv.x) + 2. * a - iTime), \n                  ths(2., 0.2 * v + 8. * abs(uv.y) - 3. * a - iTime));\n    uv.x *= thc(4., iTime + 8. * p.x);\n    uv.y *= ths(4., iTime + 8. * p.y);\n    float d = length(uv/p);\n    float k = 0.1 * v;\n    float s = smoothstep(-k,k, -d + 0.15);\n    s *= 4. * s * s;\n    s = clamp(s, 0., 1.);\n    vec3 col = vec3(s);\n    vec3 e = vec3(1.);\n    col = s * pal(thc(2., 0.1 * h21(ipos) + 10. * r + 4. * length(p) - iTime), \n                    e, e, e, mix(0., 0.5, 0.5 + 0.5 * cos(length(p)*32. + iTime)) + 0.5 * vec3(0.,0.33,0.66));\n    \n    //col *= smoothstep(-v * 0.2, v, -length(ouv) + 0.25);\n    col *= mix(smoothstep(-v * 0.2, v, -length(ouv) + 0.25), 1., 0.5 + 0.5 * cos(0.8 * iTime));\n    fragColor = vec4(col, 1.); //vec4(v);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}