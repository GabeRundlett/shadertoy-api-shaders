{
    "Shader": {
        "info": {
            "date": "1610662849",
            "description": " wip. Kinda chuggy in full screen at the moment.",
            "flags": 32,
            "hasliked": 0,
            "id": "3tKyRD",
            "likes": 15,
            "name": "Dragon Egg Shell",
            "published": 3,
            "tags": [
                "2d",
                "waves",
                "bump"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 466
        },
        "renderpass": [
            {
                "code": "// Cole Peterson\n\nvec3 t(vec2 p){\n    return texture(iChannel0, p).xyz;   \n}\n\nfloat height(vec2 p){\n    return t(p).r;\n}\n\nvec3 bump(vec2 uv, float strength){\n    float h = 0.002;\n    \n    vec3 p = t(uv); \n    float dx = height(uv) - height(uv + vec2(h, .0));\n    float dy = height(uv) - height(uv + vec2(0., h));\n    \n    return normalize( vec3(0., 0., -1.) + vec3(dx, dy, 0.)*strength); \n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = u/R;\n    vec2 nuv = vec2(u.xy - 0.5*R.xy)/R.y;\n    \n    vec3 col = ch(iChannel0, u).xyz;\n    \n    vec2 cuv =  vec2(u.xy - 0.5*R.xy)/R.y; \n    vec3 lp = vec3(.1, .1, -1.);\n    \n    vec3 sp = vec3(cuv, 0.0);\n    vec3 ro = vec3(0, 0, -1.);\n    vec3 rd = normalize(sp - ro);\n    vec3 ld = lp - sp;\n    \n    float dist = max(length(ld), 0.001);\n    ld /= dist;\n    vec3 objCol = t(uv);\n    \n    vec3 norm = bump(uv, 35.);\n    \n  \tvec3 tt = texture(iChannel1, norm).xyz;\n    float dif = max(dot(norm, ld), 0.6);  \n    float spec = pow(max(dot( reflect(-ld, norm), -rd), 0.), 13.); \n    \n    float falloff = .35/(dist*dist);\n    col = objCol * falloff * dif;\n    \n    if(length(objCol) > .01)\n        col += tt*spec*0.85;\n    \n    f = vec4(col, 1.0);\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\n#define KEY(v,m) texelFetch(iChannel1, ivec2(v, m), 0).x\n#define ss(a, b, t) smoothstep(a, b, t)\n#define ch(chan, p) texelFetch(chan,  ivec2(p), 0)\n\nconst float pi = 3.14159;\n\nfloat hsh(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat perlin(vec2 p){\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    float a = hsh(i);\n    float b = hsh(i+vec2(1., .0));\n    float c = hsh(i+vec2(0. ,1 ));\n    float d = hsh(i+vec2(1., 1. ));\n    \n    vec2 u = smoothstep(0., 1., f);\n    \n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat octnse(vec2 p, float t, int oct){\n    float a = 1.;\n    float n = 0.;\n    \n    for(int i = 0; i < oct; i++){\n        p.y+=t;\n     \tn += perlin(p) * a;\t\n        p*=2.;\n        a *= .5;\n    }\n    \n    return n;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nfloat h(vec2 uv, float t, float nse){\n    float sum = 0., amp = .1;\n    \n    sum += cos(t*2. + 12.3)*amp*3.;\n    sum += cos(t*4. + 65.)*amp*3.7;\n    sum += cos(t*8. + 23.)*amp*2.5;\n    sum += cos(t*12. + 7.2)*amp*2.5;\n    sum += cos(t*52. + 4.2)*amp*.3;\n    \n    float nse2 = octnse(uv*3., 0., 10) * .5;\n    \n    sum += nse * .85;\n    \n    sum /= 4.;\n    \n    return sum;\n}\n\nvec3 pal(float t, float a, float b, vec3 prd, vec3 shift){\n    return a + b*cos(prd*t + shift);\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = u/R;\n    vec2 nuv = vec2(u.xy - .5*R.xy)/R.y;\n    vec3 col = vec3(.2);\n    \n    float yy = uv.x-.5;\n    float aa = 1.+abs(exp(abs(-3.5*(yy*yy))));\n    \n    uv -= .5;\n    uv *= aa;\n    uv += .5;\n    \n    uv.y+= .7;\n    uv.x+=iTime*.2;\n   \n    vec3 landCol = vec3(0);\n    \n    float yp = .5;\n    for(float i = 0.; i < 17.; i++){\n        yp = i*.1;\n\n        float nse = octnse((uv + i*23.3)*3., 0., 8) * .5;\n        float height = .5-(uv.y + h(uv + i*33., uv.x + i*10., nse*.9));\n        float land = ss(.001, -.001, height+yp);\n        \n        vec3 lc = pal(3.*uv.x+i, .5, .11, vec3(1.4, .0, .5), vec3(.0, 1., 1.));\n        vec3 lc2 = .8*pal(3.*uv.x+i, .57, .1, vec3(0.0, 1.0, .0), vec3(2.0, 1., 1.));\n        \n        if(i!=16.)\n            landCol = mix(lc, lc2, nse*.9);\n        else\n            landCol = vec3(.2);\n        \n        col = mix(col, landCol, land);\n        \n        float ed = ss(-.002, .002, abs(height + yp) - .01);\n        col *= ed;\n    }\n    \n    col = pow(col*2., vec3(6.0));\n    col *= ss(.1, .4, 1.-abs(nuv.x));\n    f = vec4(col, 1.);\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}