{
    "Shader": {
        "info": {
            "date": "1386564433",
            "description": "Stateless bouncing calculated by simulating a 45 deg ray bouncing inside a rectangle",
            "flags": 0,
            "hasliked": 0,
            "id": "Md23Rm",
            "likes": 6,
            "name": "Stateless Bouncing Vortex",
            "published": 3,
            "tags": [
                "2d",
                "swirl",
                "stateless"
            ],
            "usePreview": 0,
            "username": "h3nr1x",
            "viewed": 540
        },
        "renderpass": [
            {
                "code": "#define PI     3.14159265358\n#define SIN_45 0.70710678118\n\nconst float swirl_border_thickness = 12.0;\nconst float vortex_speed = 120.0;\nconst float bg_scroll_speed = 1.0 / 20.0;\nconst float twist = 8.0;\nconst vec4 black = vec4(.0, .0, .0, 1.);\n\nvec4 vortex(in vec2 frag_coord,\n            in vec2 screen,\n            in vec2 center,\n            in float radius) {\n  float bg_scroll = iTime * bg_scroll_speed;\n  float twist_speed = (cos(iTime / 3.0) * sin(iTime / 3.0)) / 40.0;\n\n  // from cartesian to polar:\n  // (x, y) -> (r, θ)\n  vec2 v = frag_coord - center;\n  float r_2  = dot(v, v);\n  float r = sqrt(r_2);\n  float angle = atan(v.y, v.x);\n\n  // from polar back to cartesian (but twisting the angle):\n  // (r', θ') -> (x', y')\n  float swirl_x = r * cos(angle + r * twist * twist_speed);\n  float swirl_y = r * sin(angle + r * twist * twist_speed);\n  vec2 swirl = (vec2(swirl_x, swirl_y) + center) / screen;\n  swirl.y += bg_scroll;\n  vec4 swirl_frag = texture(iChannel0, swirl);\n\n  // black hole\n  float black_hole_radius = (radius / 3.) * abs(cos(iTime)) + (radius / 5.);\n\n  // scrolling background\n  vec2 bg = frag_coord / screen;\n  bg.y += bg_scroll;\n  vec4 bg_frag = texture(iChannel0, bg);\n\n  float t = smoothstep(black_hole_radius - (black_hole_radius / 2.0),\n                       black_hole_radius,\n                       r);\n  t = clamp(t + 0.2, 0.0, 1.0);\n  // combine the black hole with the swirl\n  vec4 vortex_frag = t * (swirl_frag - black) + black;\n\n  float s = smoothstep(radius - swirl_border_thickness,\n                       radius + swirl_border_thickness,\n                       r);\n\n  return s * (bg_frag - vortex_frag) + vortex_frag;\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n  vec2 screen = iResolution.xy;\n  float radius = iResolution.x / 10.0;\n\n  // +---------------------+\n  // |........screen.......|\n  // |...+-------------+...|\n  // | R | screen - 2R |...|\n  // |<->|             |...|\n  // |...|             <==== the vortex only moves inside\n  // | ..|    __       |...| this 'travel_box'\n  // |...|   / R\\ ^    |...|\n  // |...+---| -| 2R---+<======= vortex collisions with bounds\n  // |.......\\__/ v .......|     happen on the travel_box's edge\n  // +---------------------+\n  vec2 travel_box = screen - (2.0 * radius);\n\n  // 'traveled' is the total distance the vortex has moved inside the\n  // 'travel_box' following a linear path with 45° inclination\n  // starting from the center of the screen (screen / 2) after 'iTime'\n  // has passed at a 'vortex_speed' speed\n  //                           .\n  //                          .\n  //                         . <-- this would be the trajectory followed by the\n  //                        /      vortex if there were no collisions\n  //             +---------/------+\n  //    /screen\\ |        /       |\n  //    | ---- | ------> /) 45°   |\n  //    \\   2  / |                |<- travel_box\n  //             +----------------+\n  // Because we are doing the calculation in screen space, we have to translate\n  // to the travel_box space by adding -radius\n  vec2 traveled = (screen / 2.0)\n      + vortex_speed * iTime * SIN_45\n      - radius;\n\n  // Now we need to take the ray travelled by the vortex, and bend it inside\n  // the travel_box:\n  //              ___\n  //             /   \\\n  //             | / |\n  //              /__/               center collides here\n  //             /                            |\n  //            /  traveled dist = 7          v\n  // +---------/---------+           +--------*---___----+\n  // |        /          |           |       / \\ /   \\   |\n  // |       /) 45°      |   =====>  |      /   \\| / |   |\n  // |                   |           |           \\/__/   |\n  // +-------------------+           +-------------------+\n  // we want to go from this...          ... to this ^\n  //\n  // For simplicity, let's focus on the vertical movement only:\n  //    ___\n  //   /   \\ first bounce        changes direction (goes down)\n  // +-| * |---------------+        +----.----------------+\n  // | \\_^_/  \\            |        |   | |   \\           |\n  // |   |    |            |        |   | |   |           |\n  // |   |    |            |        |   |_|_   > hk       |\n  // |   |     > travel_box|        |   / v \\ |           |\n  // |   |    |  height    |        |   | * | /           |\n  // |   |    |            |        |   \\___/             |\n  // |   |    |            |        |   |                 |\n  // |   |    /            |        |   |                 |\n  // +---.-----------------+        +---.-----------------+\n  //  starts here (goes up)\n  //\n  // num_vertical_bounces = traveled_h / travel_box_h\n  //\n  // an odd num_vertical_bounces means the direction is down (positive)\n  // en even num_vertical_bounces means direction is going up (negative)\n  //\n  // the final position will be either going up or down some amount hk\n  // if the num_vert_bounces is even (up), then hk starts from the bottom:\n  // +---------------------+\n  // |                     |\n  // |  ___                |   if (num_bounces parity is even):\n  // | /   \\               |     pos.y = travel_box_h - hk\n  // | | * |  \\            |\n  // | \\_^_/  |            |\n  // |   |     > hk        |\n  // |   |    |            |\n  // |   |    /            |\n  // +---.-----------------+\n  //     ^ last bounce\n  // if the num_vert_bounces is odd (down), then hk starts from the top:\n  //     v last bounce\n  // +---.-----------------+\n  // |   |    \\            |\n  // |   |    |            |   if (num_bounces parity is odd):\n  // |  _|_    > hk        |     pos.y = hk\n  // | / v \\  |            |\n  // | | * |  /            |   num_bounces parity = num_bounces mod 2 => {0,1}\n  // | \\___/               |   hk = traveled mod travel_box_h\n  // |                     |\n  // |                     |\n  // +---------------------+\n  //\n  // both branches can be merged into one formula if we have a way\n  // to turn the parity into [-1, 1]:\n  // pos = parity * travel_box + [1, -1][parity] * hk\n  //\n  //  parity 0 => 1  |\n  //                  > -2*parity + 1\n  //  parity 1 => -1 |\n\n  vec2 parity = mod(floor(traveled / travel_box), 2.0);\n\n  // maps parity from [0, 1] to [1, -1]\n  vec2 inv_parity = -2.0 * parity + 1.0;\n\n  // we're working on travel_box space, to go back to 'screen'\n  // space we have to translate by radius\n  vec2 vortex_center =\n      + parity * travel_box\n      + inv_parity * mod(traveled, travel_box)\n      + radius;\n\n  frag_color = vortex(frag_coord, screen, vortex_center, radius);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}