{
    "Shader": {
        "info": {
            "date": "1546034457",
            "description": "I learned how to use tail recursion :)",
            "flags": 0,
            "hasliked": 0,
            "id": "Wss3D8",
            "likes": 4,
            "name": "fractal chessboard",
            "published": 3,
            "tags": [
                "endless",
                "loop",
                "checker",
                "rotation",
                "perspective",
                "double",
                "chess",
                "tailrecursion"
            ],
            "usePreview": 0,
            "username": "morisil",
            "viewed": 492
        },
        "renderpass": [
            {
                "code": "#define RECURSION_LEVEL 10\n\n#define SCALE 1.0\n\n#define SCENE_ROTATION_SPEED -0.1\n\n#define PLANE_ROTATION_SPEED 0.3\n\n#define EDGE_SHARPNESS 20000.0\n\n#define PI 3.14159265359\n\nmat2 rotate2d(float angle){\n    return mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n}\n\nfloat getChessboardLuminance(vec2 point) {\n    float value =\n        (1.0 - pow(cos(point.x * PI), EDGE_SHARPNESS))\n        * sign(sin(point.x * PI));\n    value *=\n        (1.0 - pow(cos(point.y * PI), EDGE_SHARPNESS))\n        * sign(sin(point.y * PI));\n    return (value + 1.0) / 2.0;    \n}\n\nbool isBlack(vec2 point) {\n    vec2 checkerV = mod(floor(point), 2.0);\n    float checker = mod(checkerV.x + checkerV.y, 2.0);\n    return (checker == 1.0);\n}\n\nfloat getLuminance(vec2 pixel) {\n    float luminance = 1.0;\n    for (int i = 0; i < RECURSION_LEVEL; i++) {\n        pixel *= rotate2d(iTime * SCENE_ROTATION_SPEED);\n        vec2 trans = vec2(pixel.x / pixel.y, 1.0 / pixel.y);\n        trans *= rotate2d(iTime * PLANE_ROTATION_SPEED);    \n        trans *= SCALE;\n\n        luminance += getChessboardLuminance(trans) * luminance;\n        // apply air perspective\n        luminance *= abs(pixel.y);\n\n        if (isBlack(trans)) {\n            pixel = mod(trans, 2.0) - 1.0;\n        } else {\n            break;\n        }\n    }\n    return luminance;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 pixel = (fragCoord -.5 * iResolution.xy) / iResolution.y;\n    float luminance = getLuminance(pixel);\n    fragColor = vec4(vec3(luminance),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}