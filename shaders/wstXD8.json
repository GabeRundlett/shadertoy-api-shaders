{
    "Shader": {
        "info": {
            "date": "1571922205",
            "description": "Mandalay fractal: simplified with time-varying parameters (mouse pans and zooms)",
            "flags": 0,
            "hasliked": 0,
            "id": "wstXD8",
            "likes": 14,
            "name": "Mandalay Fractal",
            "published": 3,
            "tags": [
                "fractal",
                "kifs",
                "parameterization"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 716
        },
        "renderpass": [
            {
                "code": "// \"Mandalay Fractal\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n Origin: DarkBeam in www.fractalforums.com\n (http://www.fractalforums.com/amazing-box-amazing-surf-and-variations/'new'-fractal-type-mandalay/).\n Basically, extra transformation is added to Mandelbox fractal;\n see also \"Fractal Explorer Multi-res\" by Dave_Hoskins (https://www.shadertoy.com/view/MdV3Wz).\n\n Here, the number of scaling parameters is reduced from 9 to 3, with other simplifications,\n resulting in cubic symmetry (so only need to view one cube face).\n Parameters vary with time (cycle period approx 2 min).\n Additional periodicity in horizontal plane, and original Mandelbox is optionally available.\n See also \"Compleat Mandelbox\", which focuses on the interior\n (https://www.shadertoy.com/view/ld3fDl).\n*/\n\n#define MTYPE  1  // = 0/1 for Mandelbox / Mandalay\n\n#define AA    0   // optional antialiasing\n\nvec3 HsvToRgb (vec3 c);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\n\nvec3 ltDir, pFold;\nfloat tCur, dstFar, mScale, hFold, tSmooth;\nint mType;\nconst float pi = 3.14159;\n\nconst float itMax = 8.;\n\nfloat PPFoldD (vec3 p)\n{\n  vec3 s;\n  p.y = max (p.y, p.z);\n  s = vec3 (p.x, max (abs (p.x - pFold.x) - pFold.x, p.y - 4. * pFold.x),\n     max (p.x - 2. * pFold.x - pFold.y, p.y - pFold.z));\n  return Minv3 (s);\n}\n\nvec3 PPFold (vec3 p)\n{\n  return vec3 (PPFoldD (p), PPFoldD (p.yzx), PPFoldD (p.zxy));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 p4;\n  p.xz = mod (p.xz + 1., 2.) - 1.;\n  p4 = vec4 (p, 1.);\n  for (float j = 0.; j < itMax; j ++) {\n    p4.xyz = 2. * clamp (p4.xyz, -1., 1.) - p4.xyz;\n    if (mType == 1) p4.xyz = - sign (p4.xyz) * PPFold (abs (p4.xyz));\n    p4 = mScale * p4 / clamp (dot (p4.xyz, p4.xyz), 0.25, 1.) + vec4 (p, 1.);\n  }\n  return length (p4.xyz) / p4.w;\n}\n\nvec3 ObjTDist (vec3 p)\n{\n  vec4 p4;\n  vec3 pMin;\n  p.xz = mod (p.xz + 1., 2.) - 1.;\n  pMin = vec3 (1.);\n  p4 = vec4 (p, 1.);\n  for (float j = 0.; j < itMax; j ++) {\n    p4.xyz = 2. * clamp (p4.xyz, -1., 1.) - p4.xyz;\n    if (mType == 1) p4.xyz = - sign (p4.xyz) * PPFold (abs (p4.xyz));\n    pMin = min (pMin, abs (p4.xyz));\n    p4 = mScale * p4 / clamp (dot (p4.xyz, p4.xyz), 0.25, 1.) + vec4 (p, 1.);\n  }\n  return pMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0005, -0.0005);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (float j = 1.; j < 4.; j ++) {\n    d = 0.01 * j;\n    ao += max (0., d - ObjDf (ro + d * rd));\n  }\n  return 0.3 + 0.7 * clamp (1. - 5. * ao, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, bgCol, vn;\n  float dstObj, sh, ao;\n  if (mType == 1) {\n    hFold = mod (0.5 * tSmooth, 1.);\n    pFold = HsvToRgb (vec3 (hFold, 0.2, 1.));\n  }\n  mScale = 3.;\n  bgCol = vec3 (0.15, 0.15, 0.1);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col = HsvToRgb (vec3 (mod (0.05 + 0.15 * Maxv3 (abs (ObjTDist (ro))), 1.), 0.5, 1.));\n    sh = ObjSShadow (ro, ltDir);\n    ao = ObjAO (ro, vn);\n    col = col * (0.2 + 0.1 * max (- dot (vn, ltDir), 0.) + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       0.5 * step (0.95, sh) * pow (max (0., dot (ltDir, reflect (rd, vn))), 4.);\n    col *= ao;\n    col = mix (col, bgCol, smoothstep (0.7, 1., dstObj / dstFar));\n  } else col = bgCol;\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, sr, t, asp;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  mType = MTYPE;\n  az = 0.25 * pi;\n  el = -0.25 * pi;\n  zmFac = (mType == 1) ? 20. : 30.;\n  t = mod (0.015 * tCur, 2.);\n  tSmooth = (floor (32. * t) + smoothstep (0.8, 1., mod (32. * t, 1.))) / 32.;\n  if (mPtr.z > 0.) {\n    az += pi * mPtr.x;\n    zmFac = clamp (20. + 60. * mPtr.y, 4., 50.);\n  } else {\n    az = -0.5 * pi * (0.5 - abs (tSmooth - 1.));\n  }\n  el = clamp (el, -0.49 * pi, -0.06 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vec3 (1., 12., 1.);\n  if (mType == 0) ro.xz += 1.;\n  dstFar = 60.;\n  ltDir = normalize (vec3 (1., 1.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (false && mType == 1) {\n    asp = canvas.x / canvas.y;\n    col = mix (col, vec3 (1., 0.7, 0.7),\n       ShowInt (vec2 (-0.4, 0.4) + 0.45 * uv / vec2 (asp, 1.),\n       0.03 * vec2 (asp, 1.), 3., floor (1000. * hFold + 1e-4)));\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.5, 2.2);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar == mxChar - nDig - 1. && sgn < 0.) s = ShowDig (q, -1);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return clamp (s, 0., 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}