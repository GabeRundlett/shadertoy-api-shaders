{
    "Shader": {
        "info": {
            "date": "1721406781",
            "description": "General rounded truchet with overlapping parts, some reflection and a little splash of color.",
            "flags": 0,
            "hasliked": 0,
            "id": "4cfczf",
            "likes": 15,
            "name": "Byt3-daily-010",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "truchet",
                "tile"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 140
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n    Byt3-daily-010\n    General rounded truchet with overlapping parts, some reflection and a little\n    splash of color.\n     \n    07/19/2024  @byt3_m3chanic\n    \n*/\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI  3.141592653\n#define PI2 6.283185307\n\n#define MIN_DIST 1e-3\n#define MAX_DIST 90.\n\nvec3 hp,hit;\nmat2 r90;\n\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21(vec2 p){return fract(sin(dot(p, vec2(27.609, 57.583)+iDate.yz))*43758.5453);}\n\n//@iq extrude functions \nfloat opx(in float d, in float z, in float h){\n    vec2 w = vec2( d, abs(z) - h );\n  \treturn min(max(w.x, w.y), 0.) + length(max(w, 0.));\n}\n\nvec2 map(vec3 pos) {\n    vec2 res = vec2(1e5,0);\n    vec2 uv = pos.xz*.75;\n\n    vec2 id = floor(uv), q = fract(uv)-.5;\n\n    float hs = hash21(id.xy);\n    float ck = mod(id.x+id.y,5.)*2.-1.;\n\n    if(hs>.5) q *=r90;\n    \n    const float wd = .1;\n    vec2 q2 = q;\n\n    // main pattern\n    float d = length(q+.5)-.5;\n    float f = length(q-.5)-.5;\n    d = abs(d) - wd;\n    f = abs(f) - wd;\n\n    float dy = pos.y;\n    float fy = pos.y;\n    \n    \n    hs = fract(hs*43.37);\n    if(hs>.7) {\n        dy = (hs>.7)?(pos.y-.05)-.05*cos(q2.y*PI2):(pos.y-.05)-.05*cos(q2.x*PI2);\n        fy = (hs>.7)?(pos.y+.02)+.02*cos(q2.x*PI2):(pos.y+.02)+.02*cos(q2.y*PI2);\n        d = length(q2.x)-wd;\n        f = length(q2.y)-wd;\n    }\n\n    d=abs(d)-.065;\n    f=abs(f)-.065;\n    \n    float d1 = opx(d,dy,.015)-.0075;\n    if(d1<res.x) {\n        res =vec2(d1,1.);\n        hp = pos;\n    }\n\n    float d2 = opx(f,fy,.015)-.0075;\n    if(d2<res.x) {\n        res = vec2(d2,1.);\n        hp = pos;\n    }\n\n    float g = pos.y+.125;\n    if(g<res.x) {\n        res =vec2(g,4.);\n        hp = pos;\n    }\n\n    return res;\n}\n\n\nvec3 normal(vec3 p, float t)\n{\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\n\nvec4 FC = vec4(0.239,0.278,0.298,0.);\n\nvec3 hsv( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*2.+vec3(0,4,2),6.)-3.)-1., 0., 1.0 );\n    return c.z * mix( vec3(1), rgb, c.y);\n}\n\nvec4 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, float last, inout float d) {\n\n    vec3 C = vec3(0);\n    float m = 0.;\n    vec3 p = ro;\n    \n    for(int i=0;i<128;i++) {\n        p = ro + rd * d;\n        vec2 ray = map(p);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST)break;\n        d += i<32? ray.x*.35: ray.x;\n        m  = ray.y;\n    } \n    hit = hp;\n    \n    float alpha = 0.;\n    if(d<MAX_DIST)\n    {\n        vec3 n = normal(p,d);\n        vec3 lpos =  vec3(4,8,4);\n        vec3 l = normalize(lpos);\n\n        float diff = clamp(dot(n,l),0.,1.);\n        \n        float shdw = 1.0;\n        for( float t=.05; t < 18.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 18.*h/t);\n            t += h;\n            if( shdw<MIN_DIST || t>32. ) break;\n        }\n        diff = mix(diff,diff*shdw,.75);\n\n        vec3 h = vec3(.2);\n\n        if(m==1.) {\n            float tr = texture(iChannel0,hit.xz*.35).r;\n            h = mix(hsv(vec3(hit.x*.105,1.,.75)),h,tr>.5?1.:0.);\n            ref = mix(h,vec3(.5),tr>.495?1.:0.);\n        }\n        if(m==4.) {\n            vec2 uv =fract(hit.xz*4.6)-.5;\n            vec2 id =floor(hit.xz*4.6);\n\n            float px = 2./R.x, ck = hash21(id);\n\n            if(ck>.5) uv *=r90;\n\n            float d = length(uv+.5) < length(uv-.5) ? abs(length(uv+.5)-.5) - .1: abs(length(uv-.5)-.5) - .1;\n\n            if (fract(ck*471.32)>.85) d = min(length(uv.x),length(uv.y))-.1;\n            \n            h = texture(iChannel1,p.xz*.5).rgb*vec3(.93,.62,.25);\n            h = mix(h,clamp(h+.15,h,vec3(1)),smoothstep(px,-px,abs(d)-.05));\n            ref = h;\n        }\n        \n        C = h*diff;\n\n        ro = p+n*.001;\n        rd = reflect(rd,n);\n    \n    }else{\n        C = FC.rgb;\n    } \n    return vec4(C,alpha);\n}\nfloat zoom = 6.;\nvoid mainImage( out vec4 O, in vec2 F )\n{\n\n    r90 = rot(1.5707);\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    \n    vec3 ro = vec3(uv*4.,-6.);\n    vec3 rd = vec3(0,0,1.);\n    \n    // mouse //\n    float x = M.xy==vec2(0) || M.z<0. ? 0. : -(M.y/R.y*.1-.05)*1.5;\n    float y = M.xy==vec2(0) || M.z<0. ? 0. : -(M.x/R.x*1.-.5)*PI;\n    \n    mat2 rx = rot(.48-x), ry = rot(.87+y);\n    ro.zy *= rx; ro.xz *= ry; \n    rd.zy *= rx; rd.xz *= ry;\n    \n    ro.x+=T*.2;\n\n    vec3 C = vec3(0),ref=vec3(0),fil=vec3(1);\n    \n    float d = 0.,a = 0.;\n    float numBounces = 3.;\n    \n    for(float i=0.; i<numBounces; i++) {\n        d =0.;\n        vec4 pass = render(ro, rd, ref, i, d);\n        C += pass.rgb*fil;\n        fil*=ref;\n        if(i==0.) a = d;\n    }\n\n    C = mix(FC.rgb,C,  exp(-.0005*a*a*a));\n\n    // gamma correction\n    C = pow(C, vec3(.4545));\n    O = vec4(C,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}