{
    "Shader": {
        "info": {
            "date": "1585943091",
            "description": "Testing how many bits we can store in a CubeA texture.\nOn my system I get error in ranges 7C00..7FFF and FC00..FFFF.\nPlease let me know if it is different on your system!",
            "flags": 0,
            "hasliked": 0,
            "id": "tdBczR",
            "likes": 3,
            "name": "Test CubeA bitwise accuracy",
            "published": 3,
            "tags": [
                "test",
                "glitch",
                "cubea"
            ],
            "usePreview": 0,
            "username": "Observer",
            "viewed": 447
        },
        "renderpass": [
            {
                "code": "const int marginL = 42;\nconst int marginR = 16;\nconst int marginT = 16;\nconst int marginB = 24;\n\nint[] hex = int[] ( 432534, 287812, 431151, 492679, 630664, 989063, 923542, 1016866, 431766, 433799, 434073, 497559, 921886, 498071, 988959, 988945);\n\nbool drawHex4(in int value, in vec2 coord, in vec2 pos)\n{\n    if (coord.x < pos.x || coord.y < pos.y) return false;\n    ivec2 p = ivec2((coord - pos) / 2.);\n    int dig = p.x / 5;\n    p.x = p.x - dig * 5;\n    if (dig >= 0 && dig < 4 && p.y < 5 && p.x < 4)\n    {\n        int v = hex[(value >> (12 - dig * 4)) & 15];\n        return (v & (1 << (p.x + p.y * 4))) != 0;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float lineColor = 0.0;\n    float textColor = 0.0;\n    float graphColor = 0.0;\n    float graphError = 0.0;\n\n    ivec2 res = ivec2(iResolution.xy);\n    ivec2 size = res - ivec2(marginL + marginR, marginT + marginB);\n    ivec2 coord = (ivec2(fragCoord) - ivec2(marginL, marginB)) * ivec2(maxStep - minStep) / size + ivec2(minStep);\n    \n    // Nr of itermediate steps\n    ivec2 stp = ivec2(maxStep - minStep) / size + 1;\n\n    // Min distance between grid lines\n    int sc = 32 << int(log(float(stp.x))/log(2.));\n    \n    bool fnd = false;\n\n    if (coord.y >= minStep && coord.y <= maxStep && coord.x >= minStep && coord.x <= maxStep)\n    {\n        for (int sx = 0; sx < stp.x; sx++)\n        {\n            int vx = coord.x + sx;\n            ivec2 tcoord = ivec2(vx % 1024, vx / 1024);\n            vec3 rd = vec3(float(tcoord.x * 2 - 1023), 1024.0, float(tcoord.y * 2 - 1023));\n            vec4 state = texture(iChannel0, rd);\n\n            int vy = int(packHalf2x16(vec2(state.b, 0.0)));\n            if (coord.y == vy)\n            {\n                fnd = true;\n                graphColor = 1.0;\n            } else\n            if (vx != vy)\n            {                \n                graphError = 0.2;\n            }\n        }\n        \n        // Grid lines\n    \tif (coord.x >= minStep && coord.x <= maxStep)\n    \t{\n            coord += stp/2;\n    \t\tif (coord.x % sc < stp.x) lineColor += 0.1;\n    \t\tif (coord.x % (sc << 2) < stp.x) lineColor += 0.2;\n    \t\tif (coord.x % (sc << 4) < stp.x) lineColor += 0.3;\n    \t\tif (coord.x % (sc << 6) < stp.x) lineColor += 0.4;\n    \t\tif (coord.y % sc < stp.y) lineColor += 0.1;\n    \t\tif (coord.y % (sc << 2) < stp.y) lineColor += 0.2;\n    \t\tif (coord.y % (sc << 4) < stp.y) lineColor += 0.3;\n    \t\tif (coord.y % (sc << 6) < stp.y) lineColor += 0.4;\n        }\n \n\t}\n    \n    // Axis labels\n    int addrStep = sc << 2;\n    ivec2 textoffset = ivec2(20, 5) * (maxStep - minStep) / size;\n    if (fragCoord.y < float(marginB))\n    {\n        int adr = ((coord.x + textoffset.x) / addrStep) * addrStep;\n\t    textColor += float(drawHex4(adr, fragCoord, vec2((adr - minStep - textoffset.x) * size.x / (maxStep - minStep) + marginL, 8)));\n    }\n    if (fragCoord.x < float(marginL))\n    {\n        int adr = ((coord.y + textoffset.y) / addrStep) * addrStep;\n\t    textColor += float(drawHex4(adr, fragCoord, vec2(0, (adr - minStep - textoffset.y) * size.y / (maxStep - minStep) + marginB)));\n    }\n    \n    fragColor.rgb = vec3(1.0 - (lineColor + textColor + graphColor)) * vec3(1.0, 1.0 - graphError, 1.0 - graphError);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The CubeA is a great texture which can hold a lot of data. Being fixed sized, \n// it is ideal to store all kinds of large structures.\n// It contains 6 planes of 1024x1024 pixels. A CubeA pixel consist of 4 low-precision\n// components (4x16 bits), so in theory we could store 384 Mbit = 48 MByte there!\n// There is one important limitation: we cannot use all 16 bits of a component.\n// By using unpackHalf2x16 and packHalf2x16 we can pack 2x 16-bit uints into 2x low precision\n// floats and vice-versa. However we seem to loose some precision, maybe because converting low\n// precision float to high precision floats (the native type in GLSL) and back.\n// Not every bit combination seems to lead to a valid float (think of NaN).\n//\n// At my system (Windows 10, both Firefox and Chrome, ANGLE) this has the effect that in a range\n// of 0..FFFF there are two ranges that will not be correctly converted: 7C00..7FFF and FC00..FFFF\n// (indicated by the two red bars in the graph).\n// So effectively we can only use 15 of the 16 bits (not using bit 14).\n//\n// I'm curious if this is videocard/GLSL version dependent and if everybody experiences the same\n// effect. If that's the case, we can still store 360 MBit = 45 MByte, which is still a huge amount!\n\n// Doesn't seem to have effect:\nprecision lowp float;\n\n// - Zoom in on first range 7C00..7FFF\n// const int minStep = 0x7B00;\n// const int maxStep = 0x8100;\n\n// - Zoom in on second range FC00..FFFF\n// const int minStep = 0xFB00;\n// const int maxStep = 0xFFFF;\n\n// - Complete range to test\nconst int minStep = 0x0000;\nconst int maxStep = 0xFFFF;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    ivec2 coord = ivec2(fragCoord);\n    int a = (coord.x + coord.y * 1024) & 0xFFFF;\n    fragColor.b = unpackHalf2x16(uint(a)).x;\n}",
                "description": "",
                "inputs": [],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            }
        ],
        "ver": "0.1"
    }
}