{
    "Shader": {
        "info": {
            "date": "1626482117",
            "description": "Another Face-21-jul-",
            "flags": 0,
            "hasliked": 0,
            "id": "7lsXWB",
            "likes": 6,
            "name": "Another Face-21-jul-",
            "published": 3,
            "tags": [
                "anotherface21jul"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define REFLECT 2\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//operacion de Union  por FabriceNeyret2\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opI2(d1, d2) ( d1.x > d2.x ? d1 : d2 )\n#define opS2(d1, d2) ( d1.x > -d2.x ? d1 : d2 )\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\nfloat sdTorus( vec3 p, vec2 t )\n\t{ vec2 q = vec2(length(p.xz)-t.x,p.y);  return length(q)-t.y; }\nfloat sdCylinder( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n    \nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat sMin( float a, float b, float k )\n{\n\tfloat h = clamp(0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.-h);\n}\nfloat sMax(in float x, in float y, in float s)\n{\n    float b = clamp(abs(x-y)/s, 0.0, 1.0);\n    return max(x,y) + 0.25 * s * (b - 1.0) * (b - 1.0);\n}\n\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//----------oPeraciones de Repeticion\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n    \n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n  float k = dot(q,vec2(-b,a));\n    \n  if( k < 0.0 ) return length(q) - r1;\n  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n  return dot(q, vec2(a,b) ) - r1;\n}\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\tvec3 res= vec3(9999.0, -1.0,-1.0);  vec3 pp=p;\n\tfloat planeDist1 = p.y+0.0;  //piso inf\n    float planeDist2 = 50.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared frente\n    float planeDist6 = p.z+40.0;  //pared atras\n    \n    res =opU3(res, vec3(planeDist1,-1.0,7.0)); //inf\n    \n    res =opU3(res, vec3(planeDist2,14.0,MATERIAL_NO)); \n    res =opU3(res, vec3(planeDist3,-1.0,9.0)); \n    res =opU3(res, vec3(planeDist4,-1.0,9.0)); \n    res =opU3(res, vec3(planeDist5,-1.0 ,8.0)); \n    //res =opU3(res, vec3(planeDist5,100.0 ,-1.0));\n    res =opU3(res, vec3(planeDist6,16.0,MATERIAL_NO)); \n    \n    float vmi=mix( -5.0,40.0, sin(iTime));\n    p=rotate_y(p, radians( vmi) );\n    mObj.AngRot=radians( vmi);\n    \n          p.y=p.y-10.0;\n   \n    float sdCabeza= sdEllipsoid( p, vec3(6.5,8.0,5.0) );\n    \n    float sdPelo= sdEllipsoid( p, vec3(7.6,8.0,7.6) );\n    float sdPeloMordida= sdEllipsoid( p-vec3(0.0,-1.0,-5.5), vec3(5.0,4.5,3.0) );\n    \n    float sdCuadradoPelo=sdBox( p-vec3(0.0,-11.0,0.0), vec3(7.7,7.0,7.7) );\n    float sdPeloDif=differenceSDF(sdPelo,sdCuadradoPelo);\n    sdPeloDif=differenceSDF(sdPeloDif,sdPeloMordida);\n    \n    res =opU3(res, vec3(sdPeloDif,-1.0,10.0));\n    \n    //Frente\n    float  sdFrente= sdCylinder(p-vec3(0.0,3.0,0.0), vec2(5.5,2.0) );\n    res =opU3(res, vec3(sdFrente,3.0,MATERIAL_NO)); \n    \n    //Oyos Ojos\n    float sdOyoIzq= sdEllipsoid( p-vec3(-2.5,-0.5,-4.5), vec3(2.0,1.5,1.0) );\n    float sdOyoDer= sdEllipsoid( p-vec3( 2.5,-0.5,-4.5), vec3(2.0,1.5,1.0) );\n    \n    sdCabeza= differenceSDF(sdCabeza, sdOyoIzq);\n    sdCabeza= differenceSDF(sdCabeza, sdOyoDer);\n    \n    ///ojos\n    float sdOjoIzq= sdEllipsoid( p-vec3(-2.5,-0.5,-4.0), vec3(1.8,1.4,0.9) );\n    float sdOjoDer= sdEllipsoid( p-vec3( 2.5,-0.5,-4.0), vec3(1.8,1.4,0.9) );\n    \n    //restar cilindro a ojos y poner en negro uno nuevo\n    float sdPupilaIzq=sdCylinderXY(p-vec3(-2.5,-0.65,-3.5), vec2(0.2,2.0) );\n    float sdPupilaDer=sdCylinderXY(p-vec3( 2.5,-0.65,-3.5), vec2(0.2,2.0) );\n    float sdOjoIzqInter=intersectSDF( sdOjoIzq,sdPupilaIzq);\n    float sdOjoDerInter=intersectSDF( sdOjoDer,sdPupilaDer);\n    \n    float sdOjoIzqDif=differenceSDF( sdOjoIzq,sdPupilaIzq);\n    float sdOjoDerDif=differenceSDF( sdOjoDer,sdPupilaDer);\n     sdOjoIzq=sdOjoIzqDif;\n     sdOjoDer=sdOjoDerDif;\n    \n    \n    res =opU3(res, vec3(sdOjoIzqInter,0.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdOjoIzq,1.0,MATERIAL_NO));\n    \n    res =opU3(res, vec3(sdOjoDerInter,0.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdOjoDer,1.0,MATERIAL_NO));\n    \n\n    \n    //Nariz\n    vec3 prot0=p;\n    prot0.yz= rotatev2(p.yz, radians(350.0));  //inclinado hacia adelante\n    float sNariz1= sdCylinderXZ(prot0-vec3(0.0,-1.5,-5.3), vec2(0.2,1.5) );\n    vec3 pn=p-vec3(0.0,1.0,0.0);\n    vec3 prot1=pn;\n    vec3 prot2=pn;\n     prot1.xy= rotatev2(pn.xy, radians(15.0)); //lado izq\n     prot2.xy= rotatev2(pn.xy, radians(345.)); //lado derecho\n     \n    \n    float sNariz1Izq= sdCylinderXZ(prot1-vec3( 0.1,-1.5,-5.2), vec2(0.18,1.5) );\n    float sNariz1Der= sdCylinderXZ(prot2-vec3(-0.1,-1.5,-5.2), vec2(0.18,1.5) );\n    \n    res =opU3(res, vec3(sNariz1,2.0,MATERIAL_NO));\n    \n    //suavizar frente\n    sdCabeza= smin( sdCabeza, sdFrente, 2.0);\n    sdCabeza= smin( sdCabeza, sNariz1, 1.5);\n    \n    \n    sdCabeza= smin( sdCabeza, sNariz1Izq, 0.8);\n    sdCabeza= smin( sdCabeza, sNariz1Der, 0.8);\n    \n    p=p-vec3(0.0,0.5,0.0);  //subir labios\n    //Labio Izquierdo\n    float r1; float r2; float h;\n    r1=0.05; r2=0.3; h=1.7;\n    pn=p-vec3(0.15,0.0,0.5); //unir mas cerca labios\n    prot1=rotate_z(pn-vec3(-2.0+0.1,-4.5,-4.5), radians(70.0));\n    prot2=rotate_z(pn-vec3(-2.0,    -4.5,-4.5), radians(86.0));\n    \n    //rotar hacia un lado de afuera\n    prot1=rotate_x(prot1, radians(20.0));\n    prot2=rotate_x(prot2, radians(20.0));\n    float sdLabioIzqA= sdRoundCone( prot1-vec3(0.0,0.0,0.0), r1, r2, h );\n    float sdLabioIzqB= sdRoundCone( prot2-vec3(0.0,0.0,0.0), r1, r2, h );\n    \n    \n    \n    //----labio derecho\n    pn=p-vec3(-0.15,0.0,0.5);\n    prot1=rotate_z(pn-vec3(2.0-0.2,-4.5,-4.5), radians(270.0+2.0));\n    prot2=rotate_z(pn-vec3(2.0-0.2,-4.5,-4.5), radians(286.0+2.0));\n    \n    //rotar hacia un lado de afuera\n    prot1=rotate_x(prot1, radians(20.0));\n    prot2=rotate_x(prot2, radians(20.0));\n    float sdLabioDerA= sdRoundCone( prot1-vec3(0.0,0.0,0.0), r1, r2, h );\n    float sdLabioDerB= sdRoundCone( prot2-vec3(0.0,0.0,0.0), r1, r2, h );\n    \n    res =opU3(res, vec3(sdCabeza,16.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdLabioDerA,2.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdLabioDerB,2.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdLabioIzqA,2.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdLabioIzqB,2.0,MATERIAL_NO));\n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   float t = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    \n    #define DISTANCE_BIAS 0.75\n    float minDist = 9999.0; \n    \n    for(int i=0; i <= PMaxSteps; i++) \n    {  \tp = ro + rd*t;\n        dS = GetDist(p);\n        t += dS.x;\n        if ( abs(dS.x)<MIN_DIST  || i == PMaxSteps)\n            {mObj.hitbln = true; minDist = abs(t); break;}\n        if(t>MAX_DIST)\n            {mObj.hitbln = false;    minDist = t;    break; } \n        marchCount++;\n    }\n    mObj.dist = minDist;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    mObj.phit=p;\n    return t;\n}\n\n///-----------------------------\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{   vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l , MAX_STEPS/2);\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\nvec3 amb(vec3 c, float k)\n{  return c * k; }\n\nfloat diff(vec3 p,vec3 lp,vec3 n )\n{   vec3 l = normalize(lp - p);\n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    return dif;\n}\nfloat spec( vec3 p, vec3 lp,vec3 rd,vec3 n )\n{ vec3 l = normalize(lp - p);\n  vec3 r = reflect(-l, n);\n  float spe =pow(clamp(dot(r, -rd), 0.0, 1.0), 20.0);\n  return spe;\n}\n\n\n\nvec3 LightShadingV2(vec3 normal,vec3 p, vec3 ro,vec3 rd, vec3 plight_pos,vec3 color)\n{   \n    vec3 final = vec3( 0.0 );\n    float shininess = 64.;\n\tvec3 l = normalize( p-plight_pos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    \n    vec3 lightDir = normalize(plight_pos);\n    vec3 viewDir = normalize(-rd);  \n    vec3 halfV = normalize(viewDir + lightDir);\n    float diff = dot(normal, l);\n    \n    vec3 vl = normalize( plight_pos - p );\n    vec3 ref_v = reflect( v, normal );\n    float diffuse  = max( 0.0, dot( vl, normal ) );\n    float specular = max( 0.0, dot( vl, ref_v ) );\n\t\tspecular = pow( specular, shininess );\n\t\tfinal += color * ( diffuse + specular);\n    return  final;\n    \n    \n}   \n\n\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{  float intensity=1.0;\n     vec3 result;\n    //result = lightingv3( nor, p, plight_pos,  rd,ro, colobj);\n    result= LightShadingV2( nor, p, ro,rd, plight_pos, colobj);\n    return result;\n}\n///-------------------------------------\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n}\n\n//https://www.shadertoy.com/view/4lcSRn   ///IQ\nvec3 pattern( in vec2 uv )\n{   vec3 col = vec3(0.4);\n    col += 0.4*smoothstep(-0.01,0.02,cos(uv.x*0.5)*cos(uv.y*0.5)); \n    col *= smoothstep(-1.0,-0.98,cos(uv.x))*smoothstep(-1.0,-0.98,cos(uv.y));\n    return col;\n}\n\n// Convert polar coordinates -> rectangular.\nvec2 polar2rect(vec2 polar)\n{\n    float x = polar.x * cos(polar.y);\n    float y = polar.x * sin(polar.y);\n    return vec2(x, y);\n}\n\n\n//https://www.shadertoy.com/view/stXXWn\n///http://glslsandbox.com/e#73908.0\nvec3 espiral( vec2 uv ) \n{\n    float size= 10.0;\n    vec2 cuv = vec2(2.0*length(uv), atan(uv.x, uv.y));\n    cuv.x = mix(cuv.x, 2.0/cuv.x, 0.7);\n    float td = (pow(0.3/length(cuv.x),1.0));\n    float strip1 = step(-sin(size*(cuv.x-cuv.y)), -0.5);\n    float strip2 = step(-sin(size*(cuv.x+cuv.y)), -0.1)*step(sin(size*(cuv.x-cuv.y)), -0.0);\n    return vec3(5.0*(strip1*4.+2.*strip2)*td);\n    \n}\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{ vec3 col=vec3(1.0);\n  vec3 p=pp;\n  vec3 l1;\n    \n    if (id_material==5.0)\n    {   float escala=0.25;\n    \tfloat d = mod(floor(p.x*escala)+floor(p.z*escala*2.0),2.0);\n\t    return vec3( clamp(d,0.0,1.0) );\n    }\n    \n    \n    if (id_material==6.0)\n    {  float escala=0.25;\n    \tfloat d = mod(floor(p.x*escala)+floor(p.z*escala*2.0),2.0);\n\t    vec3 col= vec3( clamp(d,0.0,1.0) );\n        l1= amb(col, 0.5) + col*diff( p,light_pos1, mObj.normal) + col*spec( p, light_pos1,mObj.rd, mObj.normal);\n        return l1;\n    }\n    \n    if (id_material==7.0)\n    {return pattern( p.xz );}\n    \n    if (id_material==8.0)\n    {return pattern( p.xy );}\n    \n    if (id_material==9.0)\n    {return pattern( p.zy );}\n    \n    \n    \n    if (id_material==10.0)\n    {\n        vec2 uv=p.xy;\n         uv = vec2(length(uv), atan(uv.y, uv.x));\n        uv= rotatev2(uv, mObj.AngRot);\n        return espiral( polar2rect(uv*1.0 )); \n    }\n    \n   \n    if (id_material==11.0)\n    {\n        vec2 uv=mObj.normal.xy;\n        vec2 rt = vec2(length(uv), atan(uv.y, uv.x));\n        rt= rotatev2(rt, mObj.AngRot);\n        return espiral(( rt) );\n    }\n    \n    \n    if (id_material==11.0)\n    {\n        vec2 uv=mObj.normal.xy;\n        vec2 rt = vec2(length(uv), atan(uv.y, uv.x));\n        rt= rotatev2(rt, mObj.AngRot);\n        return espiral(( rt) );\n    }\n    \n}\n\n//-------------------------------------------------\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{  \tvec3 colobj; \n    \n    if( mObj.hitbln==false) return  render_sky_color(rd);\n    \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n   TObj Obj;\n   mObj.rd=rd;\n   mObj.ro=ro;\n   vec3 p;\n   \n    float d=RayMarch(ro,rd, MAX_STEPS);\n   \n    Obj=mObj;\n    if(mObj.hitbln) \n    {   p = (ro + rd * d );  \n        vec3 nor=mObj.normal;\n        vec3 colobj;\n        colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n\n        float dif1=1.0;\n        vec3 result;\n        result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n        result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n        col= result;\n    }\n   \n   return col;\n}\n\n///---------------------------------------------\nvec3 linear2srgb(vec3 c) {\n    return mix(\n        12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055,\n        step(vec3(0.0031308), c));\n}\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{    return vec3(1.0) - exp(-hdrColor * exposure);  }\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n        \n \t//light_pos1= vec3(5.0, 15.0, -10.0+10.*sin(t) ); light_color1=vec3( 1.0 );\n \t//light_pos2= vec3(0.0,10.0, -10.0-10.*sin(t) ); light_color2 =vec3( 1.0 ); \n   \n   light_pos1= vec3(5.0, 10.0, -10.0 ); light_color1=vec3( 1.0 );\n   light_pos2= vec3( -10.0, 30.0, -10.0 ); light_color2 =vec3( 1.0 );\n    \n   \n   vec3 ro=vec3(0.0,8.5,-19.0);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n      \n    //light_pos1+=ro;\n    //light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    col = exposureToneMapping(2.0, col);\n    //col = linear2srgb(col);\n    \n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 phit; //22-mar-2021\n    vec3 rf;\n    float marchCount;\n    bool blnShadow;\n    bool hitbln;\n    float AngRot;\n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\n\n///--------------------------------------------FIN\n///--------------------------------------------\nvec3 hsv(vec3 c)\n{\n    vec4 k=vec4(1.,2./3.,1./3.,3.);\n    vec3 p=abs(fract(c.xxx+k.xyz)*6.-k.www);\n    return c.z*mix(k.xxx,clamp(p-k.xxx,0.,1.),c.y);\n}\n\n\nfloat random() \n{ return fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9) \n);\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}