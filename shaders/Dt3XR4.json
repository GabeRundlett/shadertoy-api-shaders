{
    "Shader": {
        "info": {
            "date": "1685061943",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n\nIf slow - turn AA off ",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt3XR4",
            "likes": 18,
            "name": "Year of Truchets #024",
            "published": 3,
            "tags": [
                "raymarching",
                "truchet",
                "tiles"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #024\n    05/25/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n    glintz based off @tachyonflux https://www.shadertoy.com/view/ll2fzt\n\n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n\n#define PI         3.141592653\n#define PI2        6.283185307\n\n#define MAX_DIST    50.\n#define MIN_DIST    1e-4\n\n// globals\nvec3 hit,hitPoint;\nfloat time=0.,spd=.3;\n\n// constants\nconst float size = 1.85;\nconst float hlf = size*.5;\n\nvec2 hash2( vec2 p ){ return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453); }\nfloat hash21(vec2 p){return fract(sin(dot(p, vec2(27.609, 57.583)))*43758.5453);}\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\n//@iq extrude\nfloat opx(in float sdf, in float pz, in float h){\n    vec2 w = vec2( sdf, abs(pz) - h );\n  \treturn min(max(w.x, w.y), 0.) + length(max(w, 0.));\n}\n\nvec2 map(vec3 pos){\n    vec2 res = vec2(1e5,0);\n    pos.x-=spd;\n    \n    vec2 uv = pos.xz;\n    \n    vec2 id = floor(uv*size);\n    float rnd = hash21(id);\n    \n    float chk = mod(id.y+id.x,2.)*2.-1.;\n    vec2 q = fract(uv*size)-.5;\n    if(rnd>.5) q.x=-q.x; \n\n    vec2 cv = vec2(length(q-.5),length(q+.5));\n    vec2 p = cv.x<cv.y?q-.5:q+.5;\n    \n    float thc = .05+.045*sin(pos.x*1.63);\n          thc+= .05+.045*sin(pos.z*2.47);\n    \n    float k = length(p)-.5;k = abs(k)-thc;\n    \n    if(chk>.5) { \n        float tk = length(abs(q.x)-(thc*1.55))-(thc*.55);\n        k = max(min(length(q.x)-thc,length(q.y)-thc),-tk);\n    }\n\n    float d = opx(k,pos.y,.85*thc)-.01;\n    if(d<res.x) {\n        res = vec2(d,2.);\n        hit=vec3(q.x,pos.y,q.y);\n    }\n\n    float gnd = pos.y+.01;\n    float gnt = d-.05;\n    if(gnd<res.x) {\n        res = vec2(gnd,gnt<gnd?3.:1.);\n        hit=pos;\n    }\n\n    return res;\n}\n\n// Tetrahedron technique @iq\n// https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float t) {\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\n\n// reduced voronoi based off @iq\n// https://www.shadertoy.com/view/ldl3W8\nvec3 voronoi( in vec2 x) {\n    vec2 n = floor(x), f = fract(x);\n\tvec2 mg, mr;\n    float md = 8.,ox = 0.;\n    for( float j=-1.; j<=1.; j++ )\n    for( float i=-1.; i<=1.; i++ )\n    {\n        vec2 g = vec2(i,j);\n\t\tvec2 o = hash2( n + g );\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n        if( d<md ){\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n    md = 8.;\n\tvec2 o = hash2( n + mg );\n    ox = o.x;\n    return vec3(md,ox,mr.x);\n}\n\nvec3 vor3D(in vec3 p, in vec3 n ) {\n    n = max(abs(n), MIN_DIST);\n    n /= dot(n, vec3(1));\n\tvec3 tx = voronoi(p.yz).xyz;\n    vec3 ty = voronoi(p.zx).xyz;\n    vec3 tz = voronoi(p.xy).xyz;\n    return mat3(tx*tx, ty*ty, tz*tz)*n;\n}\n\nvec3 glintz( vec3 lcol, vec3 pos, vec3 n, vec3 rd, vec3 lpos) {\n    vec3 mate = vec3(0);\n    vec3 h = normalize(lpos-rd);\n\n    float nh = abs(dot(n,h)), nl = dot(n,lpos);\n    vec3 light = lcol*max(.0,nl)*1.5;\n    vec3 coord = pos*1.5, coord2 = coord;\n\n    vec3 ww = fwidth(pos),glints=vec3(0),tcoord;\n    float pw,q,anisotropy;\n\n    for(int i = 0; i < 2;i++) {\n        if( i==0 ) {\n            anisotropy=.55;\n            pw=R.x*.20;\n            tcoord=coord;\n        } else {\n            anisotropy=.62;\n            pw=R.x*.10;\n            tcoord=coord2;\n        }\n\n        vec3 aniso = vec3(vor3D(tcoord*pw,n).yy, vor3D(tcoord.zyx*vec3(pw,-pw,-pw),n).y)*1.-.5;\n        if(i==0) {\n            aniso -= n*dot(aniso,n);\n            aniso /= min(1.,length(aniso));\n        }\n\n        float ah = abs(dot(h,aniso));\n        if( i==0 ) {\n            q = exp2((1.15-anisotropy)*2.5);\n            nh = pow( nh, q*4.);\n            nh *= pow( 1.-ah*anisotropy, 10.);\n        } else {\n            q = exp2((.1-anisotropy)*3.5);\n            nh = pow( nh, q*.4);\n            nh *= pow( 1.-ah*anisotropy, 150.);\n        }     \n\n        glints += (lcol*nh*exp2(((i==0?1.25:1.)-anisotropy)*1.3))*smoothstep(.0,.5,nl);\n    }\n    float fresnel = mix(0.,.95,pow(1.+dot(n,rd),2.));\n    return mix(light*vec3(0.3),vec3(.5),fresnel)+glints+lcol *.3;\n}\nmat2 rx,ry;\n\nvec3 renderFull( vec2 uv )\n{\n\n    vec3 ro = vec3(0,0,2.);\n    vec3 rd = normalize(vec3(uv,-1.));\n    \n    // mouse //\n    ro.xz*=ry;ro.zy*=rx;\n    rd.xz*=ry;rd.zy*=rx;\n\n    float d = 0.,m = 0.;\n    vec3 color = vec3(0), n = vec3(0),p = vec3(0);\n    \n    // marcher\n    for(int i=0;i<100;i++)\n    {\n        p = ro + rd * d;\n        vec2 ray = map(p);\n        if(abs(ray.x)<MIN_DIST*d||d>MAX_DIST)break;\n        d += i<32? ray.x*.4: ray.x*.9;\n        m  = ray.y;\n    } \n    \n    hitPoint=hit;\n    \n    if (d < MAX_DIST) \n    {\n        vec3 n = normal(p, d);\n        vec3 lpos =vec3(8,0,8)+vec3(8.*sin(time*.45),12,6.*cos(time*.45));\n        vec3 l = normalize(lpos-p);\n        float diff = clamp(dot(n,l),.05,1.);\n        \n        //shadows\n        float shdw = 1.;\n        for( float t=.01; t < 12.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 12.*h/t);\n            t += h;\n            if( shdw<MIN_DIST ) break;\n        }\n        diff = mix(diff,diff*shdw,.65);\n        float spec = .75 * pow(max(dot(normalize(p-ro),reflect(l,n)),.0),24.);\n        vec3 h = vec3(0);\n        \n        if(m==3.) h = vec3(.0,.08,.16)*diff;\n        if(m==1.){\n            float mp = fract((p.x-spd-p.z)*2.);\n            float sw = smoothstep(.76,.77,sin(mp)*.5+.5);\n            vec3 cr = mix(vec3(0,.5,1),vec3(.95),sw);\n            vec3 hp = mix(hitPoint*.05,(p-vec3(spd,0,0))*.1,sw);\n            h = glintz(cr,hp, n, rd, l)*diff+spec;\n        }\n        if(m==2.){\n            float mp = clamp(sin(p.z+.75)*.5+.4,0.,1.);\n            h = glintz(vec3(.95), hitPoint*.3, n, rd, l)*diff+spec;\n        }\n        color = h;\n    }\n\n    return color;\n}\n\nfloat vmul(vec2 v) {return v.x * v.y;}\n\nvoid mainImage(out vec4 O, in vec2 F) { \n\n    //  precal //\n    vec3 col = vec3(0); \n    time = T; \n    spd = time*.15;\n\n    float x = M.xy==vec2(0) ? 0. : -(M.y/R.y*.125-.0625)*PI;\n    float y = M.xy==vec2(0) ? 0. : -(M.x/R.x*.125-.0625)*PI;\n\n    rx = rot(x-1.1);\n    ry = rot(y-.1*sin(time*.02));\n       \n    vec2 o = vec2(0);\n\n    // AA and motion blur from iq https://www.shadertoy.com/view/3lsSzf\n    // set AA above renderFull\n    #ifdef AA\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n    \t// pixel coordinates\n    \to = vec2(float(m),float(n)) / float(AA) - 0.5;\n    #endif\n    \tvec2 p = (-R.xy + 2. * (F + o)) / R.x;\n    \tcol += renderFull(p);\n    #ifdef AA\n    }\n    col /= float(AA*AA);\n    #endif\n\n    col = pow( col, vec3(0.4545) );\n\n    O = vec4(col, 0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}