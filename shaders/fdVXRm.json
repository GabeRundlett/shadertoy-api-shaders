{
    "Shader": {
        "info": {
            "date": "1634477611",
            "description": "Experiments while trying to figure out other shader problems (always have a B shader going on) - Working on some biological / media scenes -how to emulate organic items and processes.. \n(Mouseable) ",
            "flags": 0,
            "hasliked": 0,
            "id": "fdVXRm",
            "likes": 12,
            "name": "Gyroid Exploded Sections II",
            "published": 3,
            "tags": [
                "raymarching",
                "refraction",
                "transparent",
                "layers",
                "gyroid"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Just an experiment into doing some\n    visual representations / layers like in\n    those old science textbooks.\n    \n    AA chugs a bit/2pass hack bit anything\n    more kills it on my PC\n\n*/\n\n#define R \t\tiResolution\n#define T \t\tiTime\n#define M \t\tiMouse\n\n#define PI      3.14159265358\n#define PI2     6.28318530718\n\n// set to 1.0 if it chugs for you\n#define AA 2.0\n\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21(vec2 a) { return fract(sin(dot(a,vec2(21.23,41.232)))*43758.5453); }\n\n//@iq\nfloat box( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat cap( vec3 p, float h, float r ){\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdGry(vec3 p, float s, float t, float b) {\n    p *= s;\n    float sw = 1.25+1.25*sin(23.3);\n    return abs(dot(sin(p*1.57-sw), cos(p.zxy))-b)/(s)-t;\n}\n\n//global\nvec3 hit=vec3(0),hitPoint=vec3(0);\nvec2 uv=vec2(0);\nmat2 turn,rx,ry;\nfloat g1,g2,g5,g4,gg5;\nfloat dz = .38;\n\nvec2 map(vec3 p){\n    vec2 res = vec2(1e5,0.);\n    float cutbox = cap(p, 7.,5.);\n\n    vec3 q = p;\n    q.xz*=turn;\n \n    float gdens = 1.35, g1 = 0.;\n\n    g2 = sdGry(q, gdens*8., .028, .2);\n    g5 = sdGry(q, gdens*7., .058, .2)*.5;\n\n    g1 = sdGry(q, gdens, .008, .5);\n    g1 = max(g1-.05,g2);\n\n    g1 = max(cutbox,g1*.5); \n    if(g1<res.x&&uv.x>dz) {\n        res=vec2(g1,1.);\n        hit=q;\n    }\n\n    g1 = sdGry(q, gdens, .02, .8);\n    g1 = max(g1,g5);\n    \n    g1 = max(cutbox,g1*.5); \n    if(g1<res.x&&uv.x>-dz) {\n        res=vec2(g1,2.);\n        hit=q;\n    }\n    \n    g1 = sdGry(q, gdens, .098, 1.15);\n    g1 = max(g1,g5);\n    \n    g1 = max(cutbox,g1*.5); \n    if(g1<res.x) {\n        res=vec2(g1,3.);\n        hit=q;\n    }\n \n    return res;\n}\n\n//Tetrahedron technique\n//https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float e) {\n    vec2 h = vec2(1.0,-1.0)*0.5773;\n    return normalize( h.xyy*map( p + h.xyy*e ).x + \n\t\t\t\t\t  h.yyx*map( p + h.yyx*e ).x + \n\t\t\t\t\t  h.yxy*map( p + h.yxy*e ).x + \n\t\t\t\t\t  h.xxx*map( p + h.xxx*e ).x );\n}\n\nvec3 shade(vec3 p, vec3 rd, float d, float m, inout vec3 n, inout float fresnel) {\n    n = normal(p,d);\n    vec3 lpos = vec3(.1,9,7);\n    vec3 l = normalize(lpos);\n\n    float diff = clamp(dot(n,l),0.,1.);\n    fresnel = pow(clamp(1.+dot(rd, n), 0., 1.), 8.5);\n    fresnel = mix(.0, .9, fresnel);\n    \n    vec3 h = vec3(.01);\n    if(m==1.) h = vec3(0.690,0.408,0.012);\n    if(m==2.) h = vec3(0.012,0.306,0.549);\n    if(m==3.) h = vec3(0.161,0.129,0.173);\n    if(m==3.) {\n        h = mix(vec3(0.161,0.129,0.173),vec3(0.690,0.271,0.620),g5*4.);\n    }\n\n    return diff*h;\n}\n\nvec3 render(vec3 ro, vec3 rd, vec2 F) {\n   \n    vec3 C = vec3(0);\n    vec3  p = ro + rd * .1;\n    float atten = 1., k = 1.;\n    \n    // loop inspired/adapted from @blackle's \n    // marcher https://www.shadertoy.com/view/flsGDH\n    for(int i=0;i<128;i++)\n    {\n        vec2 ray = map(p);\n        vec3 n = vec3(0);\n        float fresnel=0.;\n        float d = ray.x*.65;\n        float m = ray.y;\n        p += rd * d *k;\n        \n        if (d*d < 1e-7) {\n \n            hitPoint=hit;\n            \n            C+=shade(p,rd,d,m,n,fresnel)*atten;\n\n            atten *= .45;\n            p += rd*.1;\n            k = sign(map(p).x);\n\n            vec3 rr = vec3(0);\n\n            if((int(F.x)%3 != int(F.y)%3)&&m!=3.) {\n                rd = refract(rd,n,m==2.?.8:.5);\n            }else{\n                rd=reflect(-rd,n);\n                p+=n*.015;\n            } \n         \n            \n        }  \n        if(distance(p,rd)>30.) { break; }\n       \n    }\n    return C;\n}\n\nvoid image( out vec4 O, in vec2 F ) {   \n    turn = rot(T*1.25*PI/180.);\n\n    vec3 C = vec3(.0);\n    \n    uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    dz = .42+.11*sin(uv.y*2.3+T);\n\n    vec3 ro = vec3(0,0,M.z>0.?11.:9.),\n         rd = normalize(vec3(uv,-1));\n    vec2 mm = M.xy/R.xy;\n    float x = M.xy == vec2(0) ? .0 : -(mm.y * 1. - .5) * PI;\n    float y = M.xy == vec2(0) ? .0 :  (mm.x * 2. - 1.) * PI;\n\n    rx = rot(x);ry = rot(y);\n\n    ro.yz *= rx;rd.yz *= rx;\n    ro.xz *= ry;rd.xz *= ry;\n\n    C = render(ro,rd,F);\n    \n    float px = fwidth(uv.x)*PI;\n    if(uv.x<px-dz&& uv.x>-(dz+px)) C = vec3(1);\n    if(uv.x>(dz-px)&& uv.x<(dz+px)) C = vec3(1);\n    \n    C = clamp(C,vec3(.03),vec3(.98));\n    O = vec4(C,1.0);\n}\n\nvoid mainImage(out vec4 O, in vec2 F){\n    vec4 C = vec4(0);\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    float px = .125;\n    \n    if(AA==1.0) {\n        image(C,F);\n    } else {\n    \n        vec4 C2;\n        image(C2,F.xy+vec2(px,px));\n        C.rgb+=C2.rgb;\n        image(C2,F.xy+vec2(-px,-px));\n        C.rgb+=C2.rgb;\n        C/=2.0;\n    }\n    \n    C = sqrt(smoothstep(0.,1.,C));\n    O = vec4(C);\n}\n\n// end\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}