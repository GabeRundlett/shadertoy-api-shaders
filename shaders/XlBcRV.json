{
    "Shader": {
        "info": {
            "date": "1509141391",
            "description": "Naive implementation of Lucas-Kanade optical flow",
            "flags": 34,
            "hasliked": 0,
            "id": "XlBcRV",
            "likes": 26,
            "name": "optical flow",
            "published": 3,
            "tags": [
                "flow",
                "vision"
            ],
            "usePreview": 1,
            "username": "mds2",
            "viewed": 5228
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float blocksize = 5.0 + iResolution.y / 25.0;\n    vec2 within_block = mod(fragCoord.xy, blocksize) - vec2(0.5 * blocksize);\n    vec2 block = fragCoord.xy - within_block;\n\tvec2 uv = block.xy / iResolution.xy;\n\tvec2 flow  = textureLod(iChannel0, uv, 2.0).rg - vec2(0.5);\n    float lineness = abs(dot(normalize(flow.yx * vec2(-1.0, 1.0)), within_block)); //  / dot(flow, flow);\n    float alongness = (dot(flow, within_block)/blocksize);\n    float dark = smoothstep(0.2 * blocksize, 0.0, lineness) *\n        step(alongness, dot(flow, flow)) * step(0.0, alongness);\n    float ballness = smoothstep(3.0, 1.0, dot(within_block, within_block));\n    if (dot(flow, flow) < 1.0e-6) {\n        fragColor = vec4(vec3(ballness), 1.0);\n    } else {\n\t    fragColor = vec4(vec3(dark + ballness), 1.0);\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float lod = 3.0;\nconst float lodscale = 8.0; // 2 ^ lod\n\n\nfloat intensity(vec2 loc, float time) {\n\tfloat i0 = dot(textureLod(iChannel0, loc, lod).rgb, vec3(1.0));\n    float i1 = dot(textureLod(iChannel1, loc, lod).rgb, vec3(1.0));\n    return mix(i0, i1, time);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // lucas-kanade optical flow \n    // https://en.wikipedia.org/wiki/Lucas%E2%80%93Kanade_method\n    mat2 AtA = mat2(0.0, 0.0, 0.0, 0.0);\n    vec2 Atb = vec2(0.0, 0.0);\n    vec2 p = (fragCoord.xy - vec2(5.0)) /iResolution.xy;\n    float xstart = p.x;\n    vec2 px_step = lodscale / iResolution.xy;\n    for (int i = 0; i < 11; ++i) {\n        p.x = xstart;\n        for (int j = 0; j < 11; ++j) {\n            float I = intensity(p, 0.0);\n            float It = I - intensity(p, 1.0);\n            float Ix = intensity(p + vec2(1.0, 0.0) * px_step, 0.0) - I;\n            float Iy = intensity(p + vec2(0.0, 1.0) * px_step, 0.0) - I;\n            \n            AtA += mat2(Ix * Ix, Ix * Iy, Ix * Iy, Iy * Iy);\n            Atb -= vec2(It * Ix, It * Iy);\n            p.x += px_step.x;\n        }\n        p.y += px_step.y;\n    }\n    mat2 AtAinv = mat2(AtA[0][0], -AtA[0][1], -AtA[1][0], AtA[1][1]) /\n        (AtA[0][0] * AtA[1][1] - AtA[1][0] * AtA[0][1]);\n    \n    vec2 flow = AtAinv * Atb;\n    \n    fragColor = vec4(0.5 + 0.1 * flow,0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}