{
    "Shader": {
        "info": {
            "date": "1717094713",
            "description": "I want to try to make my own voxel raymarcher, I'm pretty sure there is a more straightforward way  to do it.\nYou can play with the resolution by changing vres.",
            "flags": 32,
            "hasliked": 0,
            "id": "lXd3Rs",
            "likes": 17,
            "name": "BitCrusher",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "voxel"
            ],
            "usePreview": 1,
            "username": "rcargou",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float vres = 1.5;\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (i.xy+vec2(37.0,17.0)*i.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfloat noise2( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (i.xy+vec2(37.0,17.0)*i.z) + f.xy;\n\tvec2 rg = textureLod( iChannel1, (uv+0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat hash(float a) {\n    return fract( sin(a * 521.12)* 12.312);\n}\nfloat sdBox(vec3 p, vec3 o) {\n   // p-= o;\n    p = abs(p);\n    p -= o;\n    return max(p.x, max(p.y, p.z) ) - 2.;\n}\n\nfloat wf() {\n    float t = iTime;\n    \n    float mat = hash(floor( t  ) );\n    return floor(mat * 10.);\n}\n\nfloat t() {\n    return mod( -iTime * 41., 1000.);\n}\nfloat chompCount() {\n    float t = -1.+floor(iTime * 9. / 6.28 + 0.5);\n    return t;\n}\n\nfloat chomp() {\n    float t = 1.+sin(iTime * 9.);\n    return pow(t, 4.) / 1.;\n}\nmat2 r(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvec4 mapGround(vec3 p) {\np+= ( noise2(p ) - .5 ) * 16.;\n\nvec2 uv = p.xz;\np.z -= iTime * 21.;\np.xy/=2.2;\n    p.x += 5.;\n    p.xy *= r( iTime + p.z / (10. ));\n    p.y +=sin(p.x / 20. - 4.5) * 4.;\n    float mat = 5.;\n    float a = 0.;//texture(iChannel0, uv * .0123  ).r * 5.;\n    p.y+=a;\n    \n    a = p.y;\n   \n    float d1 = p.y + 17.5;\n    float d2 = 30. - p.y;\n    float d = min(d1, d2);\n    if (noise(floor(p / 5.)) < .1)\n        d=1e10;\n    return vec4(d, mat, a, 0.);\n}\nvec4 mapHead(vec3 p ) {\n    p.z -= 55.4 + t() - chomp();\n    p.y -= 10. - chomp() / 2.;\n    p /= (1.+ chomp() / 50.);\n    vec3 pT = p;\n    vec3 pEye = p;\n    vec3 pMouth = p;\n    vec3 pFire = p;\n    pMouth.x /= 1.5;\n    pMouth.y += cos(p.x / 6. - .0) * (2. + chomp() / 4.);\n\n    pMouth.y *= 1.+chomp();\n    p.y*=1.+ chomp()*.01;\n    //p.y += cos(p.y);\n    p.xy /= 1.3;\n    float mat = 1.;\n    \n    float d1 = length(p) - 16.;\n    float d2 = sdBox(p, vec3(10.));\n    \n    float d = mix(d1, d2, -1. + mod( chompCount() / 2., 2.5));\n    d-= noise(vec3(length(p / .5)) ) * (  .5 * chomp());\n    \n    pEye.z += 25.;\n    pEye.x = abs(pEye.x);\n    pEye.x -= 5.;\n    pEye.y -= 7.;\n    \n    vec3 pS = pEye;\n    pS.x += 2.;\n    pS.y -= 6. - chomp() / 10.;\n\n    pS.xy *= r(.0 + -.8 * chomp() / 10.);\n    pS.x /= 2.;\n\n    float dEye = length(( pEye )) - 3.;\n    \n    float dS = length(pS) - 2.;\n    if (dEye < d) {\n        mat = 3.;\n        if (dEye < -.5) {\n            //mat = 6.;\n        }\n    }\n    \n    d = min(d, dEye);\n    if (dS < d) {\n        mat = 6.;\n    }\n    \n    d = min(d, dS);\n    pFire.z /= 4.;\n    pFire.z -= 35.;\n\n    float dFire = length(pFire) - 20.;\n    \n    if (dFire < d) {\n//        mat = 6.;\n    }\n    \n   // d = min(d, dFire);\n\n    pMouth.z += 10.;\n    pMouth.y +=5.;\n    float dMouth = length(pMouth) - 9.;\n\n    if (-dMouth > d) {\n        mat = 4.;\n    }\n    d = max(d, -dMouth);\n  \n    pT.y =  abs(pT.y);\n    pT.y -= 1.;\n    pT.y -= chomp() * 5.;\n    pT.z += 11.;\n    //pT.y /= 2.;\n    float rt = .1;\n    pT.x = mod(pT.x, rt) - rt / 2.;\n    float dT = length(pT.xz) - 1.1;\n    dT = max(dT, pT.y- 3.  );\n    dT = max(dT, dMouth );\n  if (dT < d) {\n        mat = 3.;\n    }\n\n    d = min(d, dT);\n    return vec4(d, mat, 0., 0.);\n}\n\nvec4 mapPath(vec3 p) {\n    float mat = 3.;\n    float z = p.z - t();\n    p.z += iMouse.y;\n    p.z += 31.;\n    float r = 85.5;\n    p.z += t() * 2.;\n    p.y += sin(p.z);\n    p.z = mod(p.z, r) - r/2.;\n    float d = length(p.xyz) - 2.5;\n    float kk = 3.;\n    //d-=noise(p) * smoothstep(1. + kk, kk + 2., z) * (chomp() + 1.);\n    \n    return vec4(d, mat, 0., 0.);\n}\n\nvec4 map(vec3 p) {\np/=1.;\n    vec4 ret = vec4(1e10, .0, .0, 0.);\n    \n    vec4 d = vec4(0.);\n    \n    d = mapHead(p);\n    if (d.x < ret.x) {\n        ret = d;\n    }\n    \n    d = mapPath(p);\n    if (d.x < ret.x) {\n        ret = d;\n    }\n    \n    d = mapGround(p);\n    if (d.x < ret.x) {\n        ret = d;\n    }\n    return ret;\n}\n\nvec3 fc(vec3 p, vec3 rd) {\n\n    vec3 ret;\n    float e = 0.0001;\n    //p += rd * e;\n  //  e = 0.;\n    //if (rd.x>0.)\n    //p.x += 1.;\n    ret.x = rd.x > 0.0 ? ceil(p.x + e) +e: floor(p.x - e) - e;\n    ret.y = rd.y > 0.0 ? ceil(p.y + e)  +e : floor(p.y - e) - e;\n    ret.z = rd.z > 0.0 ? ceil(p.z + e) + e: floor(p.z - e) - e;\n//    ret.x = floor(p.x + sign(rd.x) );\n    return ret;\n}\nfloat computeoutline(vec3 p, vec3 qu, vec3 n) {\n    float ret = 0.;\n    float k1 = .5;\n    float k2 = .4;\n\n    vec3 op = abs( p - floor(p) - vec3(.5));\n    op = smoothstep(vec3(k1), vec3(k2), op );\n    op =  abs(1.-op) - .3;\n    ret = op.x + op.y+ op.z;\n    return  ret ;\n}\nvec4 rm(vec3 ro, vec3 rd, out float outl, out vec3 n, float vf, out vec3 op) {\n    vec4 ret;\n    vec3 off = vec3(0.);\n    for (int i = 0; i < 231; ++i) {\n        vec3 p = ro + off;\n        p /= vf;\n        vec3 offside = fc(p, rd);\n        vec3 qu = offside;\n        offside -= p;\n        vec3 ff = offside;\n        offside /= rd;\n        //offside = abs(offside);\n        float t = min(offside.x, min(offside.y, offside.z));\n        vec3 next = vec3(rd * t);\n        vec4 d = map( qu  * vf);\n        \n            //outl = computeoutline(p, qu, sign(rd) * ff);\n        if (d.x < 0.) {\n            op = qu*vf;\n            outl = computeoutline(p, qu, sign(rd) * ff);\n            ret = vec4(length(off  ) , d.yzw);\n            n = normalize( sign(rd) * fc(ff, rd)  );\n            return ret;\n        }\n\n        off += next * vf;\n    }\n    return vec4(0.);\n}\n\nvec3 getnormal(vec3 p) {\n    float e = .0001;\n    vec3 o = vec3(0., e, -e);\n    \n    return normalize( vec3 ( map(p + o.zxx).x - map(p + o.yxx).x,\n    map(p + o.xzx).x - map(p + o.xyx).x,\n    map(p + o.xxz).x - map(p + o.xxy).x\n    )\n    );\n}\n\nvoid getcam(vec2 uv, out vec3 rd, out vec3 ro){\nfloat tt = fract( iTime / 16. );\n\nif (tt < .5) {\n ro = vec3(-25., -10.,  -86.4 + t());\n rd = normalize(vec3(uv.x + .15, uv.y + .06, 1.));\n\n} else   {\n    float ti = (fract(iTime / 16.) - .5) * 2.;\n ro = vec3(0., 4.,  -226.4 + t() + ti * 251.);\n rd = normalize(vec3(uv.x, uv.y + .06, 1.));\n}\n\n}\nfloat hash31(vec3 p) {\n    return fract( sin(dot(sin(vec3((312.87121) * p )), vec3(31.128271, 77.9511,21.92361))) );\n}\n\nfloat computeEdges(vec4 va, vec4 vb, vec4 vc) {\n    return 1.;\n}\n\nfloat computeAO(vec4 va, vec4 vb, vec4 vc) {\n   // return va.y;\n    vec4 s  = va + vb + vc ;\n    \n    return (9.-(s.x+s.y+s.z+s.w)) / 9.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy /2.) / iResolution.xx;\n    vec3 ro;\n    vec3 rd;\n    getcam(uv, rd, ro);\n    float outl;\n    vec3 n;\n    vec3 op;\n    vec4 r = rm(ro, rd, outl, n, vres, op);\n    vec3 p = ro + rd * r.x;\n    p = op;\n    float id = hash31(floor(p / (vres)));\n    vec3 oo = vec3(0., 1., -1.) * vres;\n    vec4 va = -vec4( map(p + oo.zxx).x, map( p + oo.yxx).x, \n    map( p + oo.xyx).x, map( p+oo.xzx).x);\n    vec4 vb = -vec4( map(p + oo.xxy).x, map( p + oo.xxz).x, \n    map( p + oo.yxy).x, map( p + oo.zxz).x);\n    vec4 vc = -vec4( map(p + oo.xxy).x, map( p + oo.zzy).x, \n    map( p + oo.yxx).x, map( p + oo.yzz).x);\n    \n    va = vec4(greaterThan(  max(vec4(0.), va ), vec4(0.)));\n    vb = vec4(greaterThan(  max(vec4(0.), vb ), vec4(0.)));\n    vc = vec4(greaterThan(  max(vec4(0.), vc ), vec4(0.)));\n\nfloat ao = computeAO(va, vb, vc);\n    //n = getnormal(p);\n    float ndotl = max(.1, dot(n, normalize(vec3(-1., 1., 11.) ) ) );\n   // vec3 col = vec3( pow(r.x, 3.)/10000.);\n   \n     vec3 col = vec3(0., 1., 1.);\n   //  outl*=5.;\n     if (r.y == 1.) {\n         vec3 albedo = mix(vec3(0., 2., 0.), vec3(1.000,.300,0.000) ,\n         smoothstep(-.5, .2, rd.y));\n           albedo = mix(albedo, vec3(1., 0., 0.), chomp() / 20.);\n         col =2.* albedo + albedo * ndotl + outl / 10.;\n      // if(fract(.1*iTime + rd.x) < .5)\n         //col = albedo*outl;\n     } if (r.y == 3.) {\n         col = vec3(ndotl + outl);\n     }\n     if (r.y == 4.) {\n         col = vec3(ndotl * vec3(1., .3, 0.) * outl);\n     }\n     if (r.y == 5.) {\n        vec3 albedo = pal( p.x / 150. + iTime * .5, vec3(0.5,0.5,.5),vec3(0.5,0.5,0.5),vec3(.5,.5,.5),vec3(0.0,0.33,0.67) );\n        vec3 albedo2 = pal( p.x / 100., vec3(0.5,0.51,0.5),vec3(0.1,0.5,0.2),vec3(.2,1.,.2),vec3(0.0,0.33,0.67) );\n        \n          float t = 1./(r.z / 10.);\n          outl *= chomp() / 5.;\n         col = mix(vec3( ndotl * albedo + albedo2 * t), vec3(ndotl) * outl, .2);\n     }\n     if (r.y == 6.) {\n         col = vec3(outl);\n     }\n     col = mix(col, vec3(0.0, 1., 1.), ( r.x  - 100.) / 200.);\n\n     if (r.y == wf()) {\n         ;//col = outl * vec3(0., 1., 0.);\n     }\n     if (r.y != 0.)\n     col *= .8 +ao / 2.;\n     //col += id  / 13.;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}