{
    "Shader": {
        "info": {
            "date": "1717376309",
            "description": "MOVE AROUND WITH WASD AND LOOK AROUND WITH ARROW KEYS\nAnd do mess with the variables at the top :)",
            "flags": 48,
            "hasliked": 0,
            "id": "MX3GWl",
            "likes": 1,
            "name": "Cool Refraction",
            "published": 3,
            "tags": [
                "water",
                "light",
                "glass",
                "realistic"
            ],
            "usePreview": 0,
            "username": "Supercooldude",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "float glassDensity = 0.09;\nfloat bump = 0.2;\nfloat reflectionAmount = 0.2;\nfloat rippleSpeed = -7.0;\nvec3 sphereColour = vec3(0.1, 0.7, 0.9);\n\n\nvec2 circleIntersection(vec3 p, vec3 d)\n{\n    float a = d.x * d.x + d.y * d.y + d.z * d.z;\n    float b = 2.0 * (d.x * p.x + d.y * p.y + d.z * p.z);\n    float c = p.x * p.x + p.y * p.y + p.z * p.z - 1.0;\n    \n    \n    if (b*b - 4.0 * a * c > 0.0)\n    {\n        float A = 0.5 * (-b + sqrt(b*b - 4.0 * a * c)) / a;\n        float B = 0.5 * (-b - sqrt(b*b - 4.0 * a * c)) / a;\n        float minSolution = min(A,B);\n        float maxSolution = max(A,B);\n        \n        if (minSolution >  0.0)\n        {\n            return vec2(1.0, minSolution);\n        }\n        if (maxSolution > 0.0)\n        {\n            return vec2(1.0, maxSolution);\n        }\n        return vec2(0.0, 0.0);\n    }\n    return vec2(0.0, 0.0);\n}\n\nvec3 skyboxColour(vec3 d)\n{\n    vec3 colour = vec3(0.0);\n    \n    colour = d * 0.5 + 0.5;// * (0.5 + 0.5 * sin(atan(d.x/d.z) * 30.0));\n    if (d.x > 0.99 || d.y > 0.99 || d.z > 0.99 || d.x < -0.99 || d.y < -0.99 || d.z < -0.99) { colour = vec3(0.0); }\n    \n    colour = texture(iChannel1, d).xyz;\n    return colour;\n}\n\nvec3 normalPos(vec3 pos)\n{\n    return normalize(pos + bump * vec3(sin(15.324 * pos.x + 15.355)*sin(14.343 * pos.y + 1.54534 - iTime * rippleSpeed)*sin(16.3435 * pos.z + 7.14453), sin(12.2343 * pos.x + 4.143416)*sin(15.123 * pos.y + 54.36532 - iTime * rippleSpeed)*sin(13.832 * pos.z + 33.234234), sin(14.54 * pos.x + 4.1234)*sin(18.123 * pos.y + 54.13453 - iTime * rippleSpeed)*sin(13.324 * pos.z + 12.43243)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float ar = iResolution.x / iResolution.y;\n    \n    vec3 posInp = texelFetch(iChannel0, ivec2(0, 0), 0).xyz;\n    vec3 rotInp = texelFetch(iChannel0, ivec2(1, 0), 0).xyz;\n    vec3 cameraPos = posInp;\n    float cameraAzimuth = rotInp.x;\n    float cameraPitch = -rotInp.y;\n    \n    vec3 p = posInp;\n    \n    vec3 temp = vec3((uv.x - 0.5) * ar, uv.y - 0.5, 1.0);\n    vec3 temp2 = vec3(temp.x, temp.y * cos(cameraPitch) - temp.z * sin(cameraPitch), temp.z * cos(cameraPitch) + temp.y * sin(cameraPitch));\n    vec3 d = normalize(vec3(temp2.x * cos(cameraAzimuth) + temp2.z * sin(cameraAzimuth), temp2.y, temp2.z * cos(cameraAzimuth) - temp2.x * sin(cameraAzimuth)));\n    vec3 col = vec3(0.0);\n    vec3 sphereCol = vec3(1.0);\n    \n    vec3 reflection = vec3(0.0);\n    \n    float spheredist = 0.0;\n    if (length(p) > 1.0)\n    {\n        vec2 pants = circleIntersection(p, d);\n        if (pants.x != 0.0)\n        {\n            sphereCol = sphereColour;\n            p += pants.y * d;\n            vec3 normal = normalPos(p);\n            \n            reflection = normalize(normal * 2.0 - d);\n            \n            p -= normal * 0.01;\n            d = normalize(d * (1.0 - glassDensity) - normal * (glassDensity));\n            \n            pants = circleIntersection(p, d);\n            p += pants.y * d;\n            spheredist = pants.y;\n            normal = normalPos(p);\n            d = normalize(d * (1.0 - glassDensity * 0.5) + -normal * (glassDensity * 0.5));\n        }\n        \n        col += skyboxColour(d) * exp(-spheredist * (1.0 - sphereCol));\n        \n    }\n    else\n    {\n        vec2 pants = circleIntersection(p, d);\n        if (pants.x != 0.0)\n        {\n            sphereCol = sphereColour;\n            spheredist = pants.y;\n            p += pants.y * d;\n            vec3 normal = normalPos(p);\n            d = normalize(d * (1.0 - glassDensity) + normal * (glassDensity));\n        }\n        col += skyboxColour(d) * exp(-spheredist * (1.0 - sphereCol));\n    }\n\n    if (reflection != vec3(0.0))\n    {\n        col += skyboxColour(reflection) * reflectionAmount;\n    }\n    fragColor = vec4(col, 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int KEY_UP    = 38;\nconst int KEY_DOWN  = 40;\nconst int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\n\nconst int KEY_W = 87;\nconst int KEY_S = 83;\nconst int KEY_A = 65;\nconst int KEY_D = 68;\nconst int KEY_E = 69;\nconst int KEY_Q = 81;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipos = ivec2(int(fragCoord.x), int(fragCoord.y));\n    if ((ipos.x == 0 || ipos.x == 1) && ipos.y == 0)\n    {\n        vec3 pos = vec3(texelFetch(iChannel0, ivec2(0, 0), 0));\n        vec3 rot = vec3(texelFetch(iChannel0, ivec2(1, 0), 0));\n        \n        float xAxis = texelFetch(iChannel1, ivec2(KEY_D, 0), 0).r;\n        xAxis -= texelFetch(iChannel1, ivec2(KEY_A, 0), 0).r;\n        \n        float yAxis = texelFetch(iChannel1, ivec2(KEY_E, 0), 0).r;\n        yAxis -= texelFetch(iChannel1, ivec2(KEY_Q, 0), 0).r;\n        \n        float zAxis = texelFetch(iChannel1, ivec2(KEY_W, 0), 0).r;\n        zAxis -= texelFetch(iChannel1, ivec2(KEY_S, 0), 0).r;\n        \n        float hAxis = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r;\n        hAxis -= texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r;\n        \n        float vAxis = texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r;\n        vAxis -= texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n        \n        pos.x += (cos(rot.x) * xAxis + sin(rot.x) * zAxis) * iTimeDelta;\n        pos.y += yAxis * iTimeDelta;\n        pos.z += (cos(rot.x) * zAxis + -sin(rot.x) * xAxis) * iTimeDelta;\n        if (pos == vec3(0.0, 0.0, 0.0))\n        {\n            pos = vec3(0.0, 0.0, -3.0);\n        }\n        //if (length(pos) < 1.1)\n        //{\n        //    pos = normalize(pos) * 1.1;\n        //}\n        \n\n        rot.x += iTimeDelta * hAxis;\n        rot.y += iTimeDelta * vAxis;\n        \n        rot.y = min(max(rot.y, -1.5707), 1.5707);\n        if (ipos.x == 0)\n        {\n            fragColor = vec4(pos, 0.0);\n        }\n        else\n        {\n            fragColor = vec4(rot, 0.0);\n        }\n    }\n    \n    if (iFrame == 0)\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}