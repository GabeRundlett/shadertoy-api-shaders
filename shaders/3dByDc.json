{
    "Shader": {
        "info": {
            "date": "1587681636",
            "description": "HW09 for CIS461 Shadow Noise Scene",
            "flags": 0,
            "hasliked": 0,
            "id": "3dByDc",
            "likes": 1,
            "name": "HW_09_2 XuechengSun_Noise",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "hehehaha12138",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "#define SQUARE_PLANE 0\n#define CUBE 1\n#define SPHERE 2\n#define POINT_LIGHT 0\n#define FOCAL_LENGTH 8.0\n#define FOCAL_RANGE 20.0\nconst float AO_DIST = 0.2;\nconst float FIVETAP_K = 2.0;\n\nconst float FOVY = 3.141569 * 0.25;\nconst int RAY_STEPS = 256;\n\nstruct Intersection {\n    float t;\n    vec3 color;\n    vec3 p;\n    int object; // Assign every object in our scene a unique ID int\n};\n    \nstruct Transform\n{\n\tvec3 trans;\n    vec3 scale;\n    vec3 rotate;\n};\n\nstruct Primitive\n{\n\tint id;\n    Transform transform;\n    vec3 matColor;\n    int primitiveId;\n};\n    \nstruct Light\n{\n\tint id;\n    int typeId;\n    float intensity;\n    Transform transform;\n    vec3 lightColor;\n};\n   \n    \nPrimitive floorSquare;\nPrimitive redWall;\nPrimitive greenWall;\nPrimitive backWall;\nPrimitive ceilingWall;\nPrimitive shortCube;\nPrimitive sphere1;\nLight pointLight;\nPrimitive primitives[7];\nLight lights[1];\n\nvoid initializeCornelBox()\n{\n    \n    \n    // Primitive initialization\n\tfloorSquare.transform.trans = vec3(0, -2.5, 0);\n\tfloorSquare.transform.rotate = vec3(-90, 0, 0);\n\tfloorSquare.transform.scale = vec3(10, 10, 1);\n    floorSquare.primitiveId = SQUARE_PLANE;\n    floorSquare.matColor = vec3(0.85, 0.81, 0.78);\n    primitives[0] = floorSquare;\n    \n    redWall.transform.trans = vec3(5, 2.5, 0);\n\tredWall.transform.rotate = vec3(0, -90, 0);\n\tredWall.transform.scale = vec3(10, 10, 1);\n    redWall.primitiveId = SQUARE_PLANE;\n    redWall.matColor = vec3(0.63, 0.065, 0.05);\n    primitives[1] = redWall;\n    \n    greenWall.transform.trans = vec3(-5, 2.5, 0);\n    greenWall.transform.rotate = vec3(0, 90, 0);\n\tgreenWall.transform.scale = vec3(10, 10, 1);\n    greenWall.primitiveId = SQUARE_PLANE;\n    greenWall.matColor = vec3(0.14, 0.45, 0.091);\n    primitives[2] = greenWall;\n    \n    backWall.transform.trans = vec3(0, 2.5, 5);\n    backWall.transform.rotate = vec3(0, 180,  0);\n\tbackWall.transform.scale = vec3(10, 10, 1);\n    backWall.primitiveId = SQUARE_PLANE;\n    backWall.matColor = vec3(0.85, 0.81, 0.78);\n    primitives[3] = backWall;\n    \n    ceilingWall.transform.trans = vec3(0, 7.5, 0);\n    ceilingWall.transform.rotate = vec3(90, 0, 0);\n\tceilingWall.transform.scale = vec3(10, 10, 1);\n    ceilingWall.primitiveId = SQUARE_PLANE;\n    ceilingWall.matColor = vec3(0.85, 0.81, 0.78);\n    primitives[4] = ceilingWall;\n    \n    shortCube.transform.trans = vec3(-2, -1, 0.75);\n    shortCube.transform.rotate = vec3(0, -17.5, 0);\n\tshortCube.transform.scale = vec3(3, 3, 3);\n    shortCube.primitiveId = CUBE;\n    shortCube.matColor = vec3(0.85, 0.81, 0.78);\n    primitives[5] = shortCube;\n    \n    sphere1.transform.trans = vec3(2, 0, 3);\n    sphere1.transform.rotate = vec3(0, 27.5, 0);\n\tsphere1.transform.scale = vec3(3, 3, 3);\n    sphere1.primitiveId = SPHERE;\n    sphere1.matColor = vec3(0.85, 0.81, 0.78);\n    primitives[6] = sphere1;\n    \n \n    \n    // Light initlaization\n    pointLight.id = 0;\n    pointLight.typeId = POINT_LIGHT;\n    pointLight.intensity = 2.0;\n    pointLight.lightColor = vec3(17, 12, 4);\n    pointLight.transform.trans = vec3(0, 7.0, -2.0);\n    pointLight.transform.rotate = vec3(90, 0, 0);\n    pointLight.transform.scale = vec3(3, 3, 1);\n    \n    return;\n}\n\n\n\nfloat random1( vec3 p ) {\n    return fract(sin((dot(p, vec3(127.1,\n                                  311.7,\n                                  191.999)))) *         \n                 43758.5453);\n}\n\nfloat random1(vec2 n)\n{\n\treturn fract(\n                 sin(\n                     dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec2 random2(vec2 p)\n{\n\treturn fract(sin(vec2(dot(p, vec2(127.1, 311.7)),\n                          dot(p, vec2(269.5, 183.3))))\n                          * 42121.32);\n}\n\nvec3 random3( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\nfloat fbm2D(vec2 n)\n{\n    float result = 0.0f;\n    float persistence = 0.5f;\n    int octaves = 8;\n\n\n\n\n    for(int i = 1; i <= octaves; i++)\n    {\n        float freq = pow(3.0, float(i));\n        float amp = pow(persistence, float(i));\n\n        float x = n.x * freq;\n        float y = n.y * freq;\n\n        float v1 = random1(vec2(floor(x), floor(y)));\n        float v2 = random1(vec2(floor(x) + 1.0, floor(y)));\n        float v3 = random1(vec2(floor(x), floor(y) + 1.0));\n        float v4 = random1(vec2(floor(x) + 1.0, floor(y) + 1.0));\n\n        float i1 = mix(v1, v2, fract(x));\n        float i2 = mix(v3, v4, fract(x));\n\n        result += mix(i1, i2, fract(y)) * amp;\n    }\n    result = pow(result, 2.0);\n    return result;\n}\n\nvec3 pow3D(vec3 p, float power)\n{\n\treturn vec3(pow(p.x, power), pow(p.y, power), pow(p.z, power));\n}\n\nfloat surflet(vec3 p, vec3 gridPoint) {\n    // Compute the distance between p and the grid point along each axis, and warp it with a\n    // quintic function so we can smooth our cells\n    vec3 t2 = abs(p - gridPoint);\n    vec3 t = vec3(1.0) - 6.0 * pow3D(t2, 5.0) - 15.0 * pow3D(t2, 4.0) + 10.0 * pow3D(t2, 3.0);\n    // Get the random vector for the grid point (assume we wrote a function random2\n    // that returns a vec2 in the range [0, 1])\n    vec3 gradient = random3(gridPoint) * 2.0 - vec3(1, 1, 1);\n    // Get the vector from the grid point to P\n    vec3 diff = p - gridPoint;\n    // Get the value of our height field by dotting grid->P with our gradient\n    float height = dot(diff, gradient);\n    // Scale our height field (i.e. reduce it) by our polynomial falloff function\n    return height * t.x * t.y;\n}\n\nfloat PerlinNoise3D(vec3 pos) {\n\tfloat surfletSum = 0.0;\n    \n    int cell = 1;\n    \n\tfor(int dx = 0; dx <= cell; ++dx) {\n\t\tfor(int dy = 0; dy <= cell; ++dy) {\n            for(int dz=0; dz <= cell; ++dz)\n            {\n            \tsurfletSum += surflet(pos, floor(pos) + vec3(dx, dy, dz));\n            }\n\t\t\t\n\t\t}\n\t}\n\treturn surfletSum;\n}\n\n\nfloat WorleyNoise3D(vec3 p) {\n    // Tile the space\n    vec3 pointInt = floor(p);\n    vec3 pointFract = fract(p);\n\n    float minDist = 1.0; // Minimum distance initialized to max.\n\n    // Search all neighboring cells and this cell for their point\n    for(int z = -1; z <= 1; z++)\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            for(int x = -1; x <= 1; x++)\n            {\n                vec3 neighbor = vec3(float(x), float(y), float(z));\n\n                // Random point inside current neighboring cell\n                vec3 point = random3(pointInt + neighbor);\n\n                // Animate the point\n                point = 0.5 + 0.5 * sin(iTime * 0.01 + 6.2831 * point); // 0 to 1 range\n\n                // Compute the distance b/t the point and the fragment\n                // Store the min dist thus far\n                vec3 diff = neighbor + point - pointFract;\n                float dist = length(diff);\n                minDist = min(minDist, dist);\n            }\n        }\n    }\n    return minDist;\n}\n\nfloat WorleyNoise2D(vec2 p) {\n    // Tile the space\n    p = p * 5.0;\n    vec2 pointInt = floor(p);\n    vec2 pointFract = fract(p);\n\n    float minDist = 1.0; // Minimum distance initialized to max.\n\n    // Search all neighboring cells and this cell for their point\n    int cell = 1;\n   \n    for(int y = -cell; y <= cell; y++)\n    {\n        for(int x = -cell; x <= cell; x++)\n        {\n            vec2 neighbor = vec2(float(x), float(y));\n\n            // Random point inside current neighboring cell\n            vec2 point = random2(pointInt + neighbor);\n\t\t\tpoint = 0.5 + 0.5 * sin(4.2132 * point + iTime);\n            \n            // Animate the point\n            point = 0.5 + 0.5 * sin(iTime * 0.01 + 6.2831 * point); // 0 to 1 range\n\n            // Compute the distance b/t the point and the fragment\n            // Store the min dist thus far\n            vec2 diff = neighbor + point - pointFract;\n            float dist = length(diff);\n            minDist = min(minDist, dist);\n        }\n    }\n    \n    return minDist;\n}\n\nvoid CoordinateSystem(in vec3 v1, out vec3 v2, out vec3 v3) {\n    if (abs(v1.x) > abs(v1.y))\n            v2 = vec3(-v1.z, 0.0, v1.x) / sqrt(v1.x * v1.x + v1.z * v1.z);\n        else\n            v2 = vec3(0.0, v1.z, -v1.y) / sqrt(v1.y * v1.y + v1.z * v1.z);\n        v3 = cross(v1, v2);\n}\n\nvec3 WorleyTangentSpaceNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( WorleyNoise3D(pos + epsilon.yxx) - WorleyNoise3D(pos - epsilon.yxx),\n                            WorleyNoise3D(pos + epsilon.xyx) - WorleyNoise3D(pos - epsilon.xyx),\n                            WorleyNoise3D(pos + epsilon.xxy) - WorleyNoise3D(pos - epsilon.xxy)));\n\n}\n\nvec3 PerlinTangentSpaceNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( PerlinNoise3D(pos + epsilon.yxx) - PerlinNoise3D(pos - epsilon.yxx),\n                            PerlinNoise3D(pos + epsilon.xyx) - PerlinNoise3D(pos - epsilon.xyx),\n                            PerlinNoise3D(pos + epsilon.xxy) - PerlinNoise3D(pos - epsilon.xxy)));\n\n}\n\n    \n    \nmat4 transformMatrix(Transform t)\n{\n\tmat4 translate = mat4(      1.0,       0.0,       0.0, 0.0,\n                                0.0,       1.0,       0.0, 0.0,\n                                0.0,       0.0,       1.0, 0.0,\n                                t.trans.x,       t.trans.y,       t.trans.z, 1.0);\n    \n    float xRot = radians(t.rotate.x);\n    float yRot = radians(t.rotate.y);\n    float zRot = radians(t.rotate.z);\n    \n    mat4 rotateX = mat4(1.0,        0.0,       0.0, 0.0,\n                        0.0,  cos(xRot), sin(xRot), 0.0,\n                        0.0, -sin(xRot), cos(xRot), 0.0,\n                        0.0,        0.0,       0.0, 1.0);\n    \n    mat4 rotateY = mat4(cos(yRot), 0.0, -sin(yRot), 0.0,\n                              0.0, 1.0,        0.0, 0.0,\n                        sin(yRot), 0.0,  cos(yRot), 0.0,\n                              0.0, 0.0,        0.0, 1.0);\n    \n    mat4 rotateZ = mat4( cos(zRot), sin(zRot), 0.0, 0.0,\n                        -sin(zRot), cos(zRot), 0.0, 0.0,\n                               0.0,       0.0, 1.0, 0.0,\n                               0.0,       0.0, 0.0, 1.0);\n    \n    mat4 scale = mat4(      t.scale.x,       0.0,       0.0, 0.0,\n                            0.0,       t.scale.y,       0.0, 0.0,\n                            0.0,       0.0,       t.scale.z, 0.0,\n                            0.0,       0.0,       0.0, 1.0);\n    \n    return translate * rotateX * rotateY * rotateZ * scale;\n}\n\nmat4 rotMat(Transform t)\n{\n\tfloat xRot = radians(t.rotate.x);\n    float yRot = radians(t.rotate.y);\n    float zRot = radians(t.rotate.z);\n    \n    mat4 rotateX = mat4(1.0,        0.0,       0.0, 0.0,\n                        0.0,  cos(xRot), sin(xRot), 0.0,\n                        0.0, -sin(xRot), cos(xRot), 0.0,\n                        0.0,        0.0,       0.0, 1.0);\n    \n    mat4 rotateY = mat4(cos(yRot), 0.0, -sin(yRot), 0.0,\n                              0.0, 1.0,        0.0, 0.0,\n                        sin(yRot), 0.0,  cos(yRot), 0.0,\n                              0.0, 0.0,        0.0, 1.0);\n    \n    mat4 rotateZ = mat4( cos(zRot), sin(zRot), 0.0, 0.0,\n                        -sin(zRot), cos(zRot), 0.0, 0.0,\n                               0.0,       0.0, 1.0, 0.0,\n                               0.0,       0.0, 0.0, 1.0);\n    \n    return rotateX * rotateY * rotateZ;\n}\n\nmat3 TangentToWorld(vec3 nor) {\n\tvec3 tangent, bitangent;\n    CoordinateSystem(nor, tangent, bitangent);\n    return mat3(tangent, bitangent, nor);\n}\n\n// SDF of a sphere\nfloat sphere(vec3 p, Transform trans) {\n    p = vec3(inverse(transformMatrix(trans)) * vec4(p, 1.0));\n    return distance(p, vec3(0.0)) - 0.5f;\n}\n\n// Cube SDF\nfloat cube(vec3 p, Transform cubeTrans)\n{\n\tvec3 q = vec3(abs(inverse(transformMatrix(cubeTrans)) * vec4(p, 1.0))) - vec3(0.5);\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\n// SquarePlane SDF\nfloat squarePlane(vec3 p, Transform squareTrans)\n{\n    mat4 squareMat = transformMatrix(squareTrans);\n    vec3 planeNormal = vec3(0, 0, 1);\n    vec3 actualPoint = vec3(inverse(squareMat) * vec4(p, 1.0f));    \n\treturn abs(dot(actualPoint, planeNormal));\n}\n\nfloat squarePlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p, n.xyz) + n.w;\n}\n\n\nbool isOnPlane(vec3 p, Transform squareTrans)\n{\n    mat4 squareMat = transformMatrix(squareTrans);\n\tvec3 ap = vec3(inverse(squareMat) * vec4(p, 1.0));\n    if(ap.x < 0.5f && ap.x > -0.5f && ap.y < 0.5f && ap.y > -0.5f)\n    {\n    \treturn true;\n    }\n    else\n    {\n    \treturn false;\n    }\n}\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    float minT = 10000.0;\n    obj = -1;\n    for(int i = 0; i < primitives.length(); i = i + 1)\n    {\n        if(primitives[i].primitiveId == SQUARE_PLANE)\n        {\n            vec4 curNor = normalize(rotMat(primitives[i].transform) * vec4(0.0, 0.0, 1.0, 0.0));\n            float maxOffset = max(max(abs(primitives[i].transform.trans.x), \n                                      abs(primitives[i].transform.trans.y)), \n                                      abs(primitives[i].transform.trans.z));\n            curNor.w = maxOffset;\n        \tt = squarePlane(pos, curNor);\n        }\n        else if(primitives[i].primitiveId == CUBE)\n        {\n        \tt = cube(pos, primitives[i].transform);\n        }\n        else if(primitives[i].primitiveId == SPHERE)\n        {\n        \tt = sphere(pos, primitives[i].transform);\n        }\n        \n       \n        \n        if(t < minT)\n        {\n        \tminT = t;\n            obj = i;\n        }\n    }\n   \n    t = minT;\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float minT = 10000.0;\n    float t = minT;\n    for(int i = 0; i < primitives.length(); i++)\n    {\n        if(primitives[i].primitiveId == SQUARE_PLANE)\n        {\n        \tvec4 curNor = normalize(rotMat(primitives[i].transform) * vec4(0.0, 0.0, 1.0, 0.0));\n            float maxOffset = max(max(abs(primitives[i].transform.trans.x), \n                                      abs(primitives[i].transform.trans.y)), \n                                      abs(primitives[i].transform.trans.z));\n            curNor.w = maxOffset;\n        \tt = squarePlane(pos, curNor);\n        }\n        else if(primitives[i].primitiveId == CUBE)\n        {\n        \tt = cube(pos, primitives[i].transform);\n        }\n        \n       \n        if(t < minT)\n        {\n        \tminT = t;\n        }\n    }\n    t = minT;\n    return t;\n}\n\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - sceneMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nvec3 computeNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj) {\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(abs(m) < 0.01) \n        {\n            return;\n        }\n        \n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nconst vec3 a = vec3(0.5, 0.5, 0.5);\nconst vec3 b = vec3(0.5, 0.5, 0.5);\nconst vec3 c = vec3(2.0, 1.0, 1.0);\nconst vec3 d = vec3(0.5, 0.2, 0.25);\n\nvec3 colorPalette(float t) {\n    return a + b * cos(6.28 * (t * c + d));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view) {\n    float lambert = max(0.0, dot(lightVec, n));\n    if(hitObj == -1)\n        return vec3(0.0, 0.0, 0.0);\n    if(hitObj == 3)\n    {\n    \t// Back Wall\n        vec2 worleyPoint = vec2(inverse(transformMatrix(primitives[hitObj].transform)) * vec4(p, 1.0));\n        float worley = WorleyNoise2D(worleyPoint);\n        vec3 worleyColor = colorPalette(worley);\n        vec3 color = primitives[hitObj].matColor * lambert * worleyColor;\n        return color;\n    }\n    \n    if(hitObj == 5)\n    {\n        p = vec3(inverse(transformMatrix(primitives[hitObj].transform)) * vec4(p, 1.0));\n    \tfloat cubePerlin = PerlinNoise3D(p);\n        vec3 perlinColor = colorPalette(cubePerlin + iTime);\n       \tvec3 color = primitives[hitObj].matColor * lambert * perlinColor;\n    \treturn color;\n    }\n    \n    if(hitObj == 6)\n    {\n    \tlambert = max(0.0, dot(lightVec, -n));\n        float sphereFBM = fbm2D(vec2(p + iTime));\n        vec3 fbmColor = colorPalette(sphereFBM + iTime);\n        vec3 color = primitives[hitObj].matColor * lambert * fbmColor;\n    \treturn color;\n    }\n    vec3 color = primitives[hitObj].matColor * lambert * vec3(1.0, 1.0, 1.0);\n    return color;\n    \n}\n\n\nIntersection sdf3D(vec3 dir, vec3 eye) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    \n    isect = isect + 0.01 * nor;\n    //vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 lightDir = normalize(pointLight.transform.trans - isect);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    \n    vec3 normalAsColor = 0.5 * (nor + vec3(1.0, 1.0, 1.0));\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n// Returns direction of ray\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc) {\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0,1,0)));\n    vec3 U = normalize(cross(R, F)); \n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    return normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    initializeCornelBox();\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    // Convert to range [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = vec3(0, 4, -15);\n    vec3 ref = vec3(0, 2, 0);\n    \n    vec3 rayDir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(rayDir, eye);\n    \n    float focalLength = (sin(iTime) *  FOCAL_RANGE +  FOCAL_RANGE) / 2.0;\n\t\n    vec3 focalLine = isect.p - eye;\n    float distance = length(focalLine);\n    float disAlongCamZ = dot(focalLine, normalize(ref - eye));\n    float t = abs(disAlongCamZ - focalLength) / FOCAL_RANGE;\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(0.5 * (rayDir + vec3(1., 1., 1.)), 1.0);\n    fragColor = vec4(isect.color, t);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}