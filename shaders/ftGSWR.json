{
    "Shader": {
        "info": {
            "date": "1640438040",
            "description": "I was looking for some random pixelated color grid. \nThis is what i was aiming for. Now without bitwise operations, so it can run with glslCanvas from\nhttps://thebookofshaders.com/",
            "flags": 0,
            "hasliked": 0,
            "id": "ftGSWR",
            "likes": 1,
            "name": "Grid random no bitwise",
            "published": 3,
            "tags": [
                "grid",
                "color",
                "random",
                "4bit"
            ],
            "usePreview": 0,
            "username": "ersteller",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "// grid dimensions\n#define GRID vec2(16,9)\n\n// number of bits used for each color channel\n// max 8 bits (otherwise the masks will overlapp)\n#define BITS 1.\n\n\nfloat random(float co){\n    return fract(sin(co)*33333.);\n}\n\n// uv input 0 to 1\nvec3 getRandomGridColor( in vec2 uv , in vec2 grid_size, float bits )\n{\n \n    // we use time fraction for random val\n    int frac = int(fract(iTime)*4095.);        \n    \n    // transform to grid pos\n    vec2 fetch_pos = vec2( uv * grid_size);\n    // quantize with int() and convert x y to an index \n    int idx = int(fetch_pos.x) + ( int(grid_size.y) - 1 - int(fetch_pos.y)) * int(grid_size.x);\n       \n    float seed = float( frac + idx);\n    \n    return vec3( \n        floor(random(3. * seed)* (bits+1.))  / bits , \n        floor(random(11. * seed)* (bits+1.)) / bits ,\n        floor(random(13. * seed)* (bits+1.)) / bits \n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // get random color in a grid\n    vec3 col = getRandomGridColor(uv, GRID, BITS);\n        \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}