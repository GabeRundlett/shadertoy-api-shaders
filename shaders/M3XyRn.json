{
    "Shader": {
        "info": {
            "date": "1725715858",
            "description": "Following this (https://www.youtube.com/watch?v=khblXafu7iA) beautiful tutorial",
            "flags": 0,
            "hasliked": 0,
            "id": "M3XyRn",
            "likes": 3,
            "name": "Raymarching swirl",
            "published": 3,
            "tags": [
                "raymarching",
                "mod",
                "fract"
            ],
            "usePreview": 0,
            "username": "Spartansky",
            "viewed": 86
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// 2D rotation function\nmat2 rot2D(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// Custom gradient - https://iquilezles.org/articles/palettes/\nvec3 palette(float t) {\n    return .5+.5*cos(6.28318*(t+vec3(.3,.416,.557)));\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat map(vec3 p){\n    p.z += iTime * .5; // Forward movement\n\n    // Space repetition\n    p.xy = fract(p.xy) - .5;     // spacing: 1\n    p.z =  mod(p.z, .25) - .125; // spacing: .25\n\n    float boxFrame = sdBoxFrame(p, vec3(.0125 * 4.5), .0125 *.5);\n\n    return boxFrame;\n}\n\nvec2 raymarching(vec3 ro, vec3 rd){\n    float t = 0.; // total distance\n    int i = 0;\n\n    vec2 m = vec2(cos(iTime*.2), sin(iTime*.2));\n\n    for(int i = 0; i < 80; i++){\n        vec3 p = ro + rd * t; // position along ray\n\n        p.xy *= rot2D(t*.25 * m.x);     // rotate ray around z-axis\n\n        p.y += 2.*sin(t*(m.y+1.)*.5)*.35;  // wiggle ray\n\n        float d = map(p); // current distance in scene\n        \n        t += d; // \"march\" the ray\n\n        if (d < .001 || t > 100.) break; // early stop\n    }\n\n    return vec2(t, i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord.xy * 2. -\n        iResolution.xy)\n        / iResolution.y;\n\n    // Initialize\n    vec3 ro = vec3(0.,0.,-3.); // ray origin\n    vec3 rd = vec3(uv,1.); //ray direction\n\n    vec3 col = vec3(0.);\n\n    vec2 rm = raymarching(ro, rd);\n   \n\n    col = palette(rm.x*.04*sin(iTime) + float(rm.y)*.5);\n\n    fragColor = vec4 (col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}