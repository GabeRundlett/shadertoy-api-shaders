{
    "Shader": {
        "info": {
            "date": "1714616143",
            "description": "A multiscale truchet weave pattern using triangle waves instead of trigonometric functions.",
            "flags": 8,
            "hasliked": 0,
            "id": "MccXDs",
            "likes": 9,
            "name": "Sitar synthesizer 5",
            "published": 3,
            "tags": [
                "music",
                "truchet",
                "multiscale",
                "weave"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "#define triwave(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1(p) (abs(fract(p/8.0)-.5)-abs(fract(p/4.0)-.5)/2.)\n\nvec4 t1(vec2 c, vec2 p){\n    return triwave((.5 - length( min(p=fract(p*sign(triwave1(c*c.y))), 1.-p.yx) )) * vec4(22,7,5,0));\n}\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec2 p = (I/1e2+iTime);\n    vec4 t_ = t1(ceil(p),p);\n    vec4 t1_ = vec4(0.),\n    t3_ = vec4(0.);\n    float scale = 2.;\n    \n    for(int i = 0; i < 3;i++){\n        \n        t1_ = t1(ceil(p/scale),p/scale);\n        //https://www.shadertoy.com/new\n        //crazy psychedelic animation\n        t1_ += triwave(iTime/8.+t3_);\n\n        scale *= 2.;\n        t3_ =\n            1.-min(1.-t_,t1_)\n            //1.-min(t_,t1(ceil(p/(scale)+t1_.y-iTime),p/(scale)+t1_.y-iTime))\n            //1.-min(1.-t_,min(t3_,triwave(iTime/8.+t1_+iTime)))\n            //1.-min(t_.yzxw,t1_)\n        ;\n        t3_ += triwave(iTime/8.+t1_);\n\n        if(\n            //Lots of interesting patterns here!\n            t3_.x>t3_.y\n            //t1_.x<t1_.y\n            //t3_.y-triwave1(iTime-p.x)>t1_.y-triwave1(iTime-p.y)\n            //t3_.y>t3_.x\n            //t1_.y>t1_.z\n            //1.-t_.z>t1_.y||1.-t_.y>t1_.x||1.-t_.x>t1_.z\n\n            //t1_.y>t_.y||t1_.z>t_.z||t1_.x>t_.x\n            //t_.y<t1_.y\n\n            //t_.x>t1_.x&&t_.y<t1_.x\n            //t_.z>.5||t_.y>.5||t_.z>.5\n            //t1_.z>t_.z||t1_.y>t_.y||t1_.z>t_.z\n        ) t_ =\n            1.-t1_\n            //t1_.yzxw\n        ;\n    }\n    O = t3_/2.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/mtSBzV\n\nfloat fmod(float a, float b){\n    a += floor(mod(b/2.,2.));\n    float\n    a2 = mod(floor(a),b),\n    a3 =\n        mod(floor(a/(b)),b)\n    ;\n    return\n        mod(a2*(a3+floor(a/4.*sign(a2-a3))),b)\n    ;\n}\n\nfloat prime_rhythm(float time){\n    return\n        (1.+fmod(time/5.,2.))/(1.+fmod(time/3.,2.))\n    ;\n}\n\n#define fract1(a) (1.-fract(-a)*fract(-a))\n\nvec2 sitar0(vec2 a, vec2 nb){\nreturn a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.)));\n}\n\nvec2 sitar3(vec2 a, vec2 nb){\nreturn a/16./4.*abs(log(1./2.+.5*a*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./2.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n;\n}\n\nvec2 flute(vec2 a, vec2 nb){\nreturn a*a/16./4.*abs((.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  +(abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n;\n}\n\nvec2 note1(vec2 rhythm,float attack,float duration){\nreturn vec2(\n      //(-log(attack+.5/duration*fract1(rhythm.x))),(-log(attack+.5/duration*fract1(rhythm.y)))\n      -log(attack+.25/duration*fract1(rhythm.y))\n  );\n}\n\n#define sitar7(a,nb) (sitar0(a,nb)-sitar0(a,nb/2.)/2.)\n\nvec2 sitar5(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./2.+a*a/2.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 instrument1(vec2 a,vec2 nb,int instrument){ \n  vec2 sitar = \n  sitar0(a,nb)\n  //sitar0(a,nb)-sitar5(a,nb)/2.\n  //a/16./2.*abs(log(1./4.+a*abs(1./4.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  //-log(1./4.+a*abs(abs(vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n  ,\n  \n  gamelan =\n      flute(a,nb)\n      //sitar3(a,nb)\n  //    a/16./4.*abs(log(1./4.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  //+.5*log(1./4.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n  ,\n  \n  steel_drum = a/16./4.*abs(log(1./2.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))      \n  \n  ,oud = a/16./8.*abs(log(1./4.+a*abs(1./8.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  +.5*log(1./4.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n\n  ,banjo = a/16./8.*abs(log(1./2.+a*abs(1./8.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n  -log(1./2.+a*abs(abs(1./2.-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))\n\n  ,harp = a/16./2.*abs(log(1./8.+a*abs(1./4.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./8.+a*abs(abs(1./4.-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.))) \n\n  \n  \n  ;\n  //instrument = 1+int(fmod(time/4.+float(instrument),2.));\n  switch(instrument){\n  case 1: return gamelan;\n  case 2: return oud;\n  case 3: return steel_drum;\n  case 4: return sitar;\n  case 5: return harp;\n  case 6: return banjo;\n  default:\n  return\n      oud\n  ;\n}\n}\n\nvec2 instrument2(vec2 a,vec2 nb,int instrument){\n      return\n      //gamelan\n      //instrument1(a,nb,instrument)-instrument1(a,nb*2.,instrument)\n      \n      //sitar\n      instrument1(a,nb,instrument)\n      //instrument1(a,nb,instrument)+instrument1(a/2.,nb/2.,instrument)+instrument1(a/4.,nb/4.,instrument)\n      \n      //instrument1(a,nb,instrument)+instrument1(a,nb/2.,instrument)\n      //instrument1(a,nb,instrument)-instrument1(a/2.,nb*2.,1)\n      //instrument1(a,nb,instrument)+instrument1(note1(rhythm/2.,attack*2.,duration/4.),nb1*2.,1)\n      ;\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument,float duration,float s1){\n  \n  //duration /= (1.+fmod(time,2.));\n  float \n  tempo1 =\n      prime_rhythm(time)*2.\n  ,\n  tempo2=prime_rhythm(time+7.),\n  t = s1*time/4./tempo1,\n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 = fmod(t4,2.),\n  t5 = t*2./tempo2,\n  t3 = (1.+fmod(t5,2.)),\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod(t6+mod(t6/8.,3.)-mod(t6/8.,2.),8./2.)/2.),\n  m2 =\n      1. + fmod(t/t3/2.,8./2.)\n  ,attack=1./64.*8.;\n  vec2\n  rhythm=\n      t*vec2(1./tempo2)\n  ,a=\n      note1(rhythm,attack,duration)\n  ,\n  a1=\n      note1(rhythm,attack,duration/2.)\n  ,\n  nb = vec2(\n      t*pow(2.,(m3+m2-t1*4.)/7.+scale)*tempo1\n  ),\n  nb1 = vec2(t*pow(2.,(4.+t1*4.)/7.+scale))*tempo1\n  ;\n  \n  return\n      //instrument2(a*a,nb*2.,4)+instrument2(a*a,nb,4)\n      //instrument2(a,nb*2.,4)+instrument2(a*a,nb,4)\n\n      //instrument1(a,nb,4)*2.-instrument1(a*a,nb/2.,4)\n      //instrument1(a,nb*2.,4)-instrument1(a*a,nb,4)*2.\n\n      -instrument1(a,nb,instrument)/2.+instrument1(a*a,nb,instrument)\n      //-(instrument1.(a1,nb*2.,instrument)-instrument1(a1*a1,nb,instrument))/2.\n      \n      //instrument2(a,nb*2.,instrument)-instrument2(a*a,nb,instrument)\n      //instrument2(a,nb*2.,1)+instrument2(a,nb,4)\n  ;\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument){\n    return mainSound1(samp, time,scale,instrument,1.,8.);\n}\n\nvec2 sitar(int a,float b){\n    return 8.*(mainSound1(a,b,5.,1,1.,8.)-.5*mainSound1(a,b,6.,4,1.,8.));\n}\n\nvec2 mainSound2(int a,float b){\n    //b += mainSound1(a,b,5.5,1,2.).x/128.;\n    return\n        //gamelan\n        //mainSound1(a,b,5.,1,1.,8.)*16.\n        //8.*mainSound1(a,b,7.-4./7.,1,2.)\n        \n        //sitar\n        //4.*mainSound1(a,b,5.,4,2.)\n        \n        //drum\n        //8.*mainSound1(a,b,3.,4,8.)*mainSound1(a,b,3.,1,8.)\n        \n        //mainSound1(a,b,6.,6)\n        \n        //sounds like Venetian Snares\n        //mainSound1(a,b,6.,4,1.,8.)*mod(floor(b*128.*16.+1.),2.)+mainSound1(a,b,6.,4,1.,16.)*mod(floor(b*128.*16.),2.)\n        \n        //mainSound1(a,b,5.,4,1.,16.)\n        \n        //8.*(mainSound1(a,b,5.,4,1.,8.))\n        \n        4.*(mainSound1(a,b,5.,4,1.,8.)-mainSound1(a,b,5.,4,1./2.,8.)-mainSound1(a,b,4.,4,1.,8.)/4.-mainSound1(a,b,4.,4,1./2.,8.)/8.)\n        //8.*(mainSound1(a,b,5.,4,1.,8.)+.5*mainSound1(a,b,5.,4,1./2.,8.))\n        //8.*(mainSound1(a,b,4.,1,1.,16.)*2.-.5*mainSound1(a,b,5.,4,1.,16.))\n        //16.*(mainSound1(a,b,5.-4./7.,1,2.,8.)-mainSound1(a,b,6.-4./7.,4,1.,8.)/2.)\n        \n\n        \n        //+(mainSound1(a,b+8.,5.,1,1.)-mainSound1(a,b+8.,5.,1,1./2.)/2.)\n        //(mainSound1(a,b,5.,4)+mainSound1(a,b,4.,4)/4.+mainSound1(a,b,3.,4)/8.)\n        //(mainSound1(a,b,5.5,4)+mainSound1(a,b/2.,4.5,4)/2.+mainSound1(a,b/4.,3.5,4)/4.)\n        \n        //sounds like a tabla drum\n        //mainSound1(a,b,5.5,1,1.)/2.\n        \n        //sitar\n        //abs(mainSound1(a,b,5.5,4,2.)-mainSound1(a,b,6.5,4,4.)/4.)\n        //mainSound1(a,b,5.5,4,1.)\n        \n        //(mainSound1(a,b,5.5,4,1.)-mainSound1(a,b,6.5,4,2.)/4.)\n        //((mainSound1(a,b,5.5,4,1.))-(mainSound1(a,b,6.5,4,2.)))\n        \n        //mainSound1(a,b,5.,4,1.) - mainSound1(a,b,6.,4,2.) - mainSound1(a,b,6.,4,1.)/2.\n                \n        //mainSound1(a,b,6.,4,2.)-mainSound1(a,b,5.,1,1.)\n        \n        //(mainSound1(a,b,6.5,4,1.)/2.-mainSound1(a,b,5.5,4,2.))\n        //(mainSound1(a,b,6.5,4,2.)-mainSound1(a,b,5.5,4,2.)/2.-mainSound1(a,b,4.5,4,2.)/4.)\n        //(mainSound1(a,b,5.5,4,1.)/2.-mainSound1(a,b,5.5,4,2.))\n        //2.*(mainSound1(a,b,5.5,4,1./2.)/2.-mainSound1(a,b,5.5,4,1.))\n        \n\n        \n        //8.*(mainSound1(a,b,5.5,1,4./3.)-mainSound1(a,b,6.5,1,4./3.))\n        //((mainSound1(a,b,6.5,4,1.))/2.+(mainSound1(a,b,5.5,4,1.)))\n\n        //(mainSound1(a,b/2.,8.)+mainSound1(a,b,7.)/2.+mainSound1(a,b*2.,6.)/4.+mainSound1(a,b*4.,5.)/8.)\n        //(mainSound1(a,b,6.5)+mainSound1(a,b/2.,7.5)+mainSound1(a,b/4.,8.5))\n    ;\n}\n\nvec2 mainSound(int a,float b){\n    //b += mainSound1(a,b,5.5,1,2.).x/128.;\n    return\n        mainSound2(a,b)\n        //mainSound2(a,b)+mainSound2(a,b+1.)/8.+mainSound2(a,b+2.)/16. //echo\n    ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}