{
    "Shader": {
        "info": {
            "date": "1602753235",
            "description": "Lazzy evaluation: buffer A computes the SDF at low resolution\nbuff B,C,D computes at double resolution (emulating quadtree) only in prev tiles close to SDF=0\nImage evaluates and draw SDF in last near-zero tiles\n",
            "flags": 32,
            "hasliked": 0,
            "id": "WsVcW1",
            "likes": 5,
            "name": "lazzy SDF evaluation",
            "published": 3,
            "tags": [
                "quadtree",
                "lazy",
                "interval",
                "lazzy",
                "hierachical"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    float SIZE = 4.*L, l;      // below: to test Buffers content\n // SIZE = 8.*L; O = texture(iChannel3,u/SIZE/R); O=vec4(-O.r*R.y/16.,O.g,O.r*R.y/16.,0); return;\n    \n    vec2 U = u/R.y;\n    int n = 0;\n     \n#if LAZZY\n    \n    O = texture(iChannel0,u/SIZE/R); l = O.r;    // LOD content\n    n = int(O.g);                                // \"near\" LOD flags\n    if ( abs(l) < k*SIZE/R.y )                   // near tile on: compute\n        { SDF(U); n += 8; }\n    \n#else\n    \n    SDF(U);\n    \n#endif\n    O-=O;\n    O = vec4( smoothstep(1./R.y, 0., abs(l) ) ); // isovalue SDF = 0\n    O += .5 * vec4((n&4)>0,(n&2)>0,n&1,0);       // show flags\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define LAZZY 1              // lazzyness on/off\n#define L (.5+max(0.,log(R.y/360.))) // scaling of resolutions   ( for worthful LOD0 )\n#define k 1.2                // neighborhood gain factor ( don't loose, don't redund )\n\n#define R        iResolution.xy\n#define hash(p)  fract(sin( p * vec2(12.9898, 78.233) ) * 43758.5453)\n\n\n// --- put your costly SDF here\n\n#define SDF(U) /* as a macro because we stupidely can't access resol in Common */  \\\n{   l = 1e5;                                                                       \\\n    for(float i=0.; i<1e3; i++) {                                                  \\\n        vec2 P = R/R.y*hash(i) + .2*cos(iTime*(2.*hash(i+.3)-1.)+hash(i+.7)+vec2(0,11)); \\\n        l = min(l, length(U-P) -1./R.y);                                           \\\n    }                                                                              \\\n    l -= .04;                                                                      \\\n}\n\n// --- compute a hierarchy of intervals\n\n#define LOD(scale,flag)                                          \\\nvoid mainImage( out vec4 O, vec2 u )                             \\\n{   if ( LAZZY < 1 ) discard;                                    \\\n    float SIZE = (scale)*L, l;                                   \\\n                                                                 \\\n    vec2 U = SIZE*u/R.y;                                         \\\n    if ( max( U.x*R.y/R.x , U.y ) > 1. ) discard;                \\\n    O = texture(iChannel0,u/2./R); l = O.r;                      \\\n    if ( abs(l) < k*SIZE/R.y )                                   \\\n        { SDF(U); O.r = l; O.g += float(1<<flag); }              \\\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "LOD(32.,-1)    // === compute SDF at res 1/32 ====================\n\n    \n    \n    \n    \n    \n    \n    \n/*    \nvoid mainImage( out vec4 O, vec2 u )\n{   \n    if (LAZZY<1) discard;\n    float SIZE = 32.*L;\n    \n    vec2 U = SIZE*u/R.y;\n    if ( max(U.x*R.y/R.x,U.y) > 1. ) discard;\n    float l; SDF(U);\n    O.rg = vec2(l,0);\n}\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "LOD(16.,0)    // === compute SDF at res 1/16 ====================",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "LOD(8.,1)    // === compute SDF at res 1/8 ====================",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "LOD(4.,2)    // === compute SDF at res 1/4 ====================",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}