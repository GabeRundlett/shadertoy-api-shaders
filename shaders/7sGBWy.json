{
    "Shader": {
        "info": {
            "date": "1658782447",
            "description": "casita otra",
            "flags": 0,
            "hasliked": 0,
            "id": "7sGBWy",
            "likes": 14,
            "name": "casita otra",
            "published": 3,
            "tags": [
                "casitaotra"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "///-------image\n//por jorge2017a2\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n#define pi 3.14159265359\n///------casita otra---25-jul-2022\nfloat opRep1D( float p,float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdParallelogram( in vec2 p, float wi, float he, float sk )\n{\n    vec2 e = vec2(sk,he);\n    p = (p.y<0.0)?-p:p;\n    vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);\n    vec2  d = vec2(dot(w,w), -w.y);\n    float s = p.x*e.y - p.y*e.x;\n    p = (s<0.0)?-p:p;\n    vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);\n    d = min( d, vec2(dot(v,v), wi*he-abs(s)));\n    return sqrt(d.x)*sign(-d.y);\n}\n\n\n// Basic Geometry Functions.\n//https://www.shadertoy.com/view/7dGfWW\nfloat sdCircle(in vec2 p, float radius, vec2 pos, float prec)\n{\n      return smoothstep(0.0,prec,radius - length(pos-p));\n}\n\n\n// noise and fbm function from https://www.shadertoy.com/view/Xd3GD4\n//-----------------------------------------------------------------------------\nvec2 hash( vec2 p )\n{  p = vec2( dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise2d( in vec2 p )\n{   const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n    vec2 i = floor( p + (p.x+p.y)*K1 );\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    \n    return dot( n, vec3(100.0) );\n}\n\nfloat fbm(vec2 uv)\n{   float f;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise2d( uv ); uv = m*uv;\n    f += 0.2500*noise2d( uv ); uv = m*uv;\n    f += 0.1250*noise2d( uv ); uv = m*uv;\n    f += 0.0625*noise2d( uv ); uv = m*uv;\n    f = 0.5 + 0.5*f;\n    return f;\n}\n\nvec3 casa3Color(vec2 p, vec3 col, int frente, int puerta, int techo )\n{   vec3 colF=getColor(frente);\n    vec3 colP=getColor(puerta);\n    vec3 colT=getColor(techo);\n    \n    float d1= sdBox(p, vec2(3.5,2.5) );\n    float d2=sdTriangleIsosceles(vec2(p.x,-p.y)-vec2(4.5,-5.3), vec2(1.2,3.2) );\n    float d3=sdBox(p-vec2(-1.5,-0.4), vec2(0.8,0.8) ); //ventana\n    float d4=sdBox(p-vec2(1.5,-1.0), vec2(0.8,1.5) ); //puerta\n    float d5= sdParallelogram(p-vec2(0.0,3.6), 4.0, 1.9, 0.5 ); //techo\n    float d6= sdParallelogram(p.yx-vec2(0.6,4.3), 2.5, 0.795, 0.5 ); //lateral\n    \n    float d7=sdBox(p-vec2(1.7,3.5), vec2(0.8,0.8));\n    float d8=sdBox(p-vec2(-1.7,3.5), vec2(0.8,0.8));\n    float d7a=sdTriangleIsosceles(vec2(p.x,p.y)-vec2(-0.8,2.8), vec2(1.0,1.5) );\n    float d8a=sdTriangleIsosceles(vec2(p.x,p.y)-vec2( 2.5,2.8), vec2(1.0,1.5) );\n    \n    col= DrawFigBorde(colF,col, d1 );// frente\n    col= DrawFigBorde(vec3(0.1),col, d6 );  //lateral1\n    col= DrawFigBorde(vec3(0.0),col, d2 ); //lateral2\n    col= DrawFigBorde(vec3(0.0,0.5,0.5),col, d3 ); //ventana\n    col= DrawFigBorde(colP,col, d4 ); //puerta\n    col= DrawFigBorde(colT,col, d5 ); //techo\n    col= DrawFigBorde(vec3(0.0),col, d7a ); //sombra\n    col= DrawFigBorde(vec3(0.0),col, d8a ); //sombra 2\n    col= DrawFigBorde(vec3(0.0,0.0,1.0),col, d7 ); //ventana fijo\n    col= DrawFigBorde(vec3(0.0,0.0,1.0),col, d8 ); //ventana 2 fijo\n    return col;\n}\n\nvec3 HacerMonte(vec2 uv, vec3 colOut)\n{   float t=0.0;\n    uv.y-=8.0;\n     uv.x+=t*5.0;\n    float n = fbm(uv*0.05)*5.0;\n    float nc = noise2d(uv*vec2(0.5,10.))*0.05;\n    float d = uv.y+n-3.;\n    colOut= DrawFigBorde(vec3(0.25,0.50,0.0)+nc,colOut,d );\n    return colOut;\n}\n\n\nvec3 HacerAgua(vec2 uv, vec3 colOut)\n{   float t=iTime;\n     uv.x+=t*12.0;\n     float mx=5.0*sin(uv.x+t*5.0);\n     float my=10.0*cos(uv.y+t*5.0+mx*0.5);\n    vec2 v2=vec2(mx, my);\n    float nc2 = noise2d(uv*vec2(0.5,10.))*0.05 *length(v2);\n    float d2 = uv.y+sin(nc2*0.5)+3.5;\n    colOut= DrawFigBorde(vec3(0.15,0.2,0.9)+nc2,colOut,d2 );\n    return colOut;\n}\n\nvec3 pastoyCielo(vec2 p, vec3 colOut)\n{   float h=p.y-4.0; //piso\n    float sky=4.0-p.y; //cielo\n    \n    float noise = texture(iChannel0, vec2(p.x, p.y + 0.8)*0.25).r*1.5;\n    float noisesky = texture(iChannel0,vec2(p.x+iTime, p.y + 0.8)*0.05).r*1.5;\n    vec3 colbg=vec3(0.2,1.0,0.2)*clamp(noise,0.0,1.0);\n    vec3  colsky=vec3(0.45,0.7,1.0)-p.y*0.03;\n    vec3 colbgsky=colsky*noisesky;\n    \n    colOut= DrawFigBorde(colbgsky, colOut, sky);\n    colOut= HacerMonte(p,colOut);\n    colOut= DrawFigBorde(colbg, colOut, h);\n    colOut=HacerAgua(p,colOut);\n    return colOut;\n}\n\n//https://www.shadertoy.com/view/7dGfWW\nvec3 luna2(vec2 p, vec3 colOut)\n{    float FD1 = sdCircle(p,2.50,vec2(-2.70,1.0),0.01);\n     float DS1 = sdCircle(p,2.76,vec2(-3.0,1.0),0.5);\n     float Croissant1 = FD1 - DS1;\n     colOut += clamp(Croissant1,0.0,1.0);    \n    return colOut;\n}\n\n//https://www.shadertoy.com/view/7dGfWW\nvec3 luna(vec2 p, vec3 colOut)\n{ float d1= sdCircle(p, 3.0 );\n    float d2= sdCircle(p-vec2(-0.6,-0.3), 3.0 );\n    float dif1= differenceSDF(d1, d2);\n    float Croissant1=d1-d2;\n    float dc=clamp(Croissant1,0.0,1.0);\n      colOut= DrawFigBorde(vec3(0.5,0.2,0.8), colOut, dif1);\n    return colOut;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=25.0;\n    uv*=esc;\n    uv.x+=iTime*5.0;\n    vec2 uv0=uv;\n    \n    vec3 col=vec3(1.0);\n    col=pastoyCielo(uv,col);\n    float cCol =floor( mod(floor(uv.x/(esc)),3.0)); //Current column of uv\n    uv.x= opRep1D( uv.x-5.0,12.5);\n    vec3 col2;\n    \n    \n    if(mod(cCol, 3.0) == 0.0)\n        col=casa3Color(uv, col, 1, 2, 2 );\n    \n    if(mod(cCol, 3.0) == 1.0)\n        col=casa3Color(uv, col, 3, 4, 5 );\n           \n    if(mod(cCol, 3.0) == 2.0)\n        col=casa3Color(uv, col, 6, 7, 8 );\n       \n    uv=uv0;\n    uv.x = opRep1D(uv.x, 85.0 );\n    col= luna(uv*0.45-vec2(1.0,12.0), col);\n    col= luna2(uv*0.25-vec2(-1.0,5.0), col);\n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//-------common\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(1.,1.,1.), //1\nvec3(1,0,0),  //2\nvec3(0,1,0),   //3\nvec3(0,0,1),   //4\nvec3(1,1,0),  //5\nvec3(0,1,1),  //6 \nvec3(1,0,1),   //7\nvec3(0.7529,0.7529,0.7529),  //8\nvec3(0.5,0.5,0.5),  //9\nvec3(0.5,0,0),   //10\nvec3(0.5,0.5,0.0),  //11\nvec3(0,0.5,0),   //12\nvec3(0.5,0,0.5),  //13\nvec3(0,0.5,0.5),  //14\nvec3(0,0,0.5),    //15\nvec3(1.0, 0.8, 0.737),  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(0.968,0.6588,  0.721),//21\nvec3(0, 1, 1), //22 \nvec3(0.333, 0.803, 0.988),//23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),//24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),//25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),//26\nvec3(0.1, 0.5, 1.0),//27   \nvec3(0.0, 0.6, 0.0),//28 \nvec3(0.1,0.1,0.7), //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9), //32\nvec3(0.7333, 0.1412, 0.1412), //33\nvec3(0.1843, 0.3333, 0.1843), //34\n vec3(0.6549, 0.6549, 0.9922), //35\n vec3(0.8549, 0.8549, 0.8549)  //36\n);\n\nvec3 getColor(int i)\n{   //if (i==-2 ) {return mObj.color; }       \n    if (i>-1 )  return Arrcolores[i];\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}