{
    "Shader": {
        "info": {
            "date": "1607543336",
            "description": "Simple fractal noise.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdVBRK",
            "likes": 3,
            "name": "Simple Fractal Noise",
            "published": 3,
            "tags": [
                "fractal",
                "noise",
                "coherentnoise"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 189
        },
        "renderpass": [
            {
                "code": "float noise(in vec2 p) {\n    return fract(sin(p.x * 17.6452 + p.y * 565.337) * 5425.235);\n}\n\nfloat SmoothNoise(in vec2 p) {\n    vec2 luv = smoothstep(0.0, 1.0, fract(p)); // :P\n    vec2 cid = floor(p);\n\n    float bl = noise(cid);\n    float br = noise(cid + vec2(1.0, 0.0));\n    float tl = noise(cid + vec2(0.0, 1.0));\n    float tr = noise(cid + vec2(1.0, 1.0));\n\n    return mix(mix(bl, br, luv.x), mix(tl, tr, luv.x), luv.y);\n}\n\nfloat CoherentNoise(in vec2 p, in float scale, in float octaves) {\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (float octave=0.0; octave < octaves; octave++) {\n        value += SmoothNoise(p * pow(2.0, octave) * scale) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n    }\n\n    return value / tscale;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.y;\n    fragColor = vec4(CoherentNoise(uv + 0.1 * iTime, 6.0, 4.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}