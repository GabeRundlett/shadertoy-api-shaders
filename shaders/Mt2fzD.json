{
    "Shader": {
        "info": {
            "date": "1514942221",
            "description": "Just checking my understanding of GLSL pack and unpack functions. Does anyone have any wisdom about Unorm vs Snorm vs Half packing? \n\nOriginal image is copyright Capcom.",
            "flags": 32,
            "hasliked": 0,
            "id": "Mt2fzD",
            "likes": 5,
            "name": "< 1bpp ",
            "published": 3,
            "tags": [
                "compression",
                "image",
                "encoding"
            ],
            "usePreview": 0,
            "username": "mattz",
            "viewed": 864
        },
        "renderpass": [
            {
                "code": "int tile_fetch(int tile_idx, ivec2 tc) {\n    \n    ivec2 fc = ivec2(tile_idx & 0xf, tile_idx >> 4);\n    \n    int idx = tc.x + tc.y*8;\n    \n    vec4 v = texelFetch(iChannel0, fc, 0);\n    \n    vec2 src = (idx < 16) ? v.xy : v.zw;\n    idx &= 0xf;\n    \n    uint k = packUnorm2x16(src);\n    uint b = (k >> (idx*2)) & 0x03u;\n    \n    return int(b);\n    \n}\n\nint index_fetch(int tile_idx) {\n    \n    int texel_idx = tile_idx >> 3;\n    int sub_idx = tile_idx & 0x7;\n    \n    ivec2 texel_pos = ivec2(texel_idx & 0xf, texel_idx >> 4);\n    \n    vec4 v = texelFetch(iChannel1, texel_pos, 0);\n    \n    vec2 src = sub_idx < 4 ? v.xy : v.zw;\n    sub_idx &= 3; \n    \n    uint k = packUnorm2x16(src);\n    uint b = (k >> (sub_idx*8)) & 0xffu;\n    \n    return int(b);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    fragCoord -= 0.5*iResolution.xy;\n    fragCoord.y *= -1.0;\n    \n\tfloat zoom = max(floor(iResolution.y / 144.), 1.);\n    fragCoord /= zoom;\n    \n    ivec2 fc = ivec2(floor(fragCoord));\n    fc += ivec2(80, 72);\n\n    \n    ivec2 tc = fc & ivec2(7, 3); // within-tile coords\n    fc = fc >> ivec2(3, 2); // absolute tile coordinates\n    \n    int brt;\n    \n    if (fc.x < 0 || fc.y < 0 || fc.x >= 20 || fc.y >= 36) {\n        brt = 1;\n    } else {\n        int flat_idx = fc.x + fc.y * 20;\n        int tile_idx = index_fetch(flat_idx);\n        brt = tile_fetch(tile_idx, tc);\n    }\n\n    ivec3 c = (brt == 0 ? ivec3(15,56,15) :\n               brt == 1 ? ivec3(48,98,48) : \n               brt == 2 ? ivec3(139,172,16) :\n               ivec3(165, 198,15));\n    \n    fragColor = vec4(vec3(c)/255., 1); \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const ivec2 dims = ivec2(16, 9);\nint cur, idx;\nvec4 data;\n\nvoid store(in uvec2 v) {\n    if (cur++ == idx) {\n        data = vec4(unpackUnorm2x16(v.x), unpackUnorm2x16(v.y));\n    }    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    ivec2 fc = ivec2(fragCoord);\n\n    if (iFrame > 1) {\n        fragColor = texelFetch(iChannel0, fc, 0);\n        return;\n    }\n    \n    if (any(greaterThanEqual(fc, dims))) { \n        fragColor = vec4(1, 0, 1, 1);\n        return; \n    }\n    \n    idx = fc.x + (fc.y << 4);\n    cur = 0;\n    data = vec4(0);\n\n    store(uvec2(0xffffffffu, 0xffffffffu));\n    store(uvec2(0xbfff7fffu, 0xffffffffu));\n    store(uvec2(0x450118u, 0x455b0155u));\n    store(uvec2(0x0u, 0x0u));\n    store(uvec2(0x50000u, 0x14110001u));\n    store(uvec2(0x0u, 0x151050u));\n    store(uvec2(0x2a7f017fu, 0xaaf09afu));\n    store(uvec2(0x5000u, 0x4000u));\n    store(uvec2(0x40004001u, 0x0u));\n    store(uvec2(0xffffffffu, 0x2bfffffu));\n    store(uvec2(0xffffffffu, 0x1400ffffu));\n    store(uvec2(0x157f465fu, 0x45057ffu));\n    store(uvec2(0x0u, 0x14000000u));\n    store(uvec2(0x0u, 0x4500000u));\n    store(uvec2(0x404000u, 0x11u));\n    store(uvec2(0x0u, 0x4001u));\n    store(uvec2(0x404000u, 0x14000011u));\n    store(uvec2(0x0u, 0x4504001u));\n    store(uvec2(0x0u, 0x40004001u));\n    store(uvec2(0xffffffffu, 0xbfffbfffu));\n    store(uvec2(0x42a04abu, 0x26102au));\n    store(uvec2(0x0u, 0x40000000u));\n    store(uvec2(0x51405000u, 0x82500950u));\n    store(uvec2(0x1450005u, 0x5820560u));\n    store(uvec2(0xe1009000u, 0xef80d950u));\n    store(uvec2(0x948894u, 0x948840u));\n    store(uvec2(0x16001623u, 0x16000132u));\n    store(uvec2(0x40000000u, 0xa4000000u));\n    store(uvec2(0xbef9ff54u, 0xbffdbffdu));\n    store(uvec2(0x808c54u, 0xaf94ee94u));\n    store(uvec2(0x2001522u, 0x16ea16bbu));\n    store(uvec2(0xae40c040u, 0xff90fee4u));\n    store(uvec2(0xebbfbbffu, 0x9e7eaf6fu));\n    store(uvec2(0x157f465fu, 0xffff57ffu));\n    store(uvec2(0x404000u, 0xffff0011u));\n    store(uvec2(0x0u, 0x2bf4001u));\n    store(uvec2(0x45544554u, 0x14000000u));\n    store(uvec2(0x15511551u, 0x4500000u));\n    store(uvec2(0x45544554u, 0x0u));\n    store(uvec2(0x15511551u, 0x0u));\n    store(uvec2(0x9ebdefe0u, 0xaaa4999au));\n    store(uvec2(0x5d9d9d5du, 0x1aaa5999u));\n    store(uvec2(0xeffefff9u, 0xaefefefeu));\n    store(uvec2(0x6beb2fffu, 0x69e669eau));\n    store(uvec2(0xaebdaebeu, 0xfebefabdu));\n    store(uvec2(0x6aea6ae6u, 0x1aaf66afu));\n    store(uvec2(0xffaeffaeu, 0xabaeabaeu));\n    store(uvec2(0x5a6a5a9au, 0x195a1a5au));\n    store(uvec2(0x157f465fu, 0x2bf57ffu));\n    store(uvec2(0x404000u, 0x44690011u));\n    store(uvec2(0x0u, 0x59a94001u));\n    store(uvec2(0x0u, 0x44690000u));\n    store(uvec2(0x0u, 0x59a90000u));\n    store(uvec2(0xa6a9aaaeu, 0xcb285554u));\n    store(uvec2(0x59255a2au, 0x28fa9405u));\n    store(uvec2(0xffffaaffu, 0xfffbfffbu));\n    store(uvec2(0xffff6fffu, 0xbbbebfffu));\n    store(uvec2(0x2bf8cb28u, 0xfce41450u));\n    store(uvec2(0x2c3f28bbu, 0x133f0515u));\n    store(uvec2(0x7eeebbfeu, 0x6de96eedu));\n    store(uvec2(0x6eef7baeu, 0x9f6e5dafu));\n    store(uvec2(0xf3905140u, 0xa9005000u));\n    store(uvec2(0x4cf0055u, 0x5a0005u));\n    store(uvec2(0x0u, 0x230000u));\n    store(uvec2(0x9db55db9u, 0xe5b999b5u));\n    store(uvec2(0xa76da76du, 0x7a9eb79eu));\n    store(uvec2(0xf650fd40u, 0xafd0db90u));\n    store(uvec2(0x16b016au, 0x5af05afu));\n    store(uvec2(0x0u, 0xc0000000u));\n    store(uvec2(0x230cccf0u, 0x2f880e3u));\n    store(uvec2(0x2fa00b8u, 0xbba03ebu));\n    store(uvec2(0xa965e9a5u, 0xcb28a454u));\n    store(uvec2(0x56696ba9u, 0x28fa1559u));\n    store(uvec2(0xa965e9a5u, 0xfa90a454u));\n    store(uvec2(0x56696ba9u, 0xfbbf1559u));\n    store(uvec2(0xa6a9aaaeu, 0xafff5554u));\n    store(uvec2(0x59255a2au, 0x6a59405u));\n    store(uvec2(0xffe4ff64u, 0xffa4ffd4u));\n    store(uvec2(0x16bf05afu, 0x16db16beu));\n    store(uvec2(0xc000c000u, 0x30003000u));\n    store(uvec2(0x2a0c002cu, 0xaba3be8eu));\n    store(uvec2(0x22e0ecau, 0xce888ba2u));\n    store(uvec2(0xd941aa41u, 0xd944d981u));\n    store(uvec2(0xfebefebfu, 0xffbeffbeu));\n    store(uvec2(0x6fbf6afeu, 0xadbeafbfu));\n    store(uvec2(0x11650165u, 0x4651565u));\n    store(uvec2(0x9f10bf64u, 0xff90e580u));\n    store(uvec2(0x57f165fu, 0x1af04afu));\n    store(uvec2(0x30003000u, 0x30003000u));\n    store(uvec2(0xe003e2e3u, 0xa8e3a8e3u));\n    store(uvec2(0x38bc022u, 0x8282882fu));\n    store(uvec2(0x2u, 0x30003u));\n    store(uvec2(0x95459944u, 0xfe909400u));\n    store(uvec2(0xffbfffaau, 0xffabaa65u));\n    store(uvec2(0x5bae6dbeu, 0xfbef5559u));\n    store(uvec2(0x40554465u, 0x11ab0004u));\n    store(uvec2(0xfd40ff80u, 0x5000f900u));\n    store(uvec2(0x16b016bu, 0x15005au));\n    store(uvec2(0x30003000u, 0xf0003000u));\n    store(uvec2(0xa2e2a003u, 0xe880a3a2u));\n    store(uvec2(0xa0be00ebu, 0x2eae0aau));\n    store(uvec2(0x30000u, 0x3u));\n    store(uvec2(0xa941e951u, 0xe944e940u));\n    store(uvec2(0xffeeffefu, 0xfeeeffeeu));\n    store(uvec2(0xf6afb6ffu, 0xa66bb66eu));\n    store(uvec2(0x51461156u, 0x40664146u));\n    store(uvec2(0x1500ff90u, 0x5140c3e4u));\n    store(uvec2(0x115063cu, 0x1511bcfu));\n    store(uvec2(0x3000u, 0x44690000u));\n    store(uvec2(0x30ba0cu, 0x40030e3cu));\n    store(uvec2(0x303a0u, 0x20300e3u));\n    store(uvec2(0x0u, 0x59a80000u));\n    store(uvec2(0xe951e950u, 0xfa906500u));\n    store(uvec2(0xfadefeeeu, 0xfbbfaa55u));\n    store(uvec2(0x66af66afu, 0xafff556au));\n    store(uvec2(0x11551065u, 0x6a50004u));\n    store(uvec2(0x802ce0b8u, 0xaaa4802cu));\n    store(uvec2(0x2cff2abau, 0x1aaa2cffu));\n    store(uvec2(0xffffeaffu, 0xfffbfffbu));\n    store(uvec2(0xffff3ef8u, 0xbbbebfffu));\n    store(uvec2(0xffffbfa3u, 0xfffbfffbu));\n    store(uvec2(0xffff6ff3u, 0xbbbebfffu));\n    store(uvec2(0xa965e9a5u, 0xafffa454u));\n    store(uvec2(0x56696ba9u, 0x6a51559u));\n    store(uvec2(0xa965e9a5u, 0xaaa4a454u));\n    store(uvec2(0x56696ba9u, 0x1aaa1559u));\n    store(uvec2(0xa6a9aaaeu, 0xaaa45554u));\n    store(uvec2(0x59255a2au, 0x1aaa9405u));\n    store(uvec2(0xaaffffffu, 0xa46f01bfu));\n    store(uvec2(0xaaaaffffu, 0xaaaa0000u));\n    store(uvec2(0xffeaffffu, 0xfe46ff90u));\n    store(uvec2(0xfe2ffd2fu, 0xfe2ffe2fu));\n    store(uvec2(0xfe2ffe1fu, 0xfe2ffe2fu));\n    store(uvec2(0xfe2ffe2fu, 0xfe2ffe2fu));\n    store(uvec2(0xffc3ff00u, 0xffc3ffc3u));\n    store(uvec2(0xf41fffffu, 0xc003d007u));\n    store(uvec2(0xc3f0c3f0u, 0xc330c330u));\n    store(uvec2(0xc000c000u, 0xc000c000u));\n    store(uvec2(0xcfc3ffc3u, 0xffffc000u));\n    store(uvec2(0xd007c003u, 0xfffff41fu));\n    store(uvec2(0xf0c3c000u, 0xfffff3f3u));\n\n    fragColor = data;\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const ivec2 dims = ivec2(16, 6);\nint cur, idx;\nvec4 data;\n\nvoid store(in uvec2 v) {\n    if (cur++ == idx) {\n        data = vec4(unpackUnorm2x16(v.x), unpackUnorm2x16(v.y));\n    }    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    ivec2 fc = ivec2(fragCoord);\n\n    if (iFrame > 1) {\n        fragColor = texelFetch(iChannel0, fc, 0);\n        return;\n    }\n    \n    if (any(greaterThanEqual(fc, dims))) { \n        fragColor = vec4(1, 0, 1, 1);\n        return; \n    }\n\n    idx = fc.x + (fc.y << 4);\n    cur = 0;\n    data = vec4(0);\n\n    store(uvec2(0x2010000u, 0x5040303u));\n    store(uvec2(0x5040303u, 0x3030504u));\n    store(uvec2(0x5040303u, 0x6000000u));\n    store(uvec2(0x8070303u, 0x8070303u));\n    store(uvec2(0x3030807u, 0x8070303u));\n    store(uvec2(0xb0a0900u, 0xf0e0d0cu));\n    store(uvec2(0xf0e0d0cu, 0x3031110u));\n    store(uvec2(0x120e0303u, 0x15031413u));\n    store(uvec2(0x17161503u, 0x17161503u));\n    store(uvec2(0x3031503u, 0x18030303u));\n    store(uvec2(0x5040201u, 0x1a190504u));\n    store(uvec2(0x1a190504u, 0x3030504u));\n    store(uvec2(0x1c1b0303u, 0x8070600u));\n    store(uvec2(0x1e1d0807u, 0x1e1d0807u));\n    store(uvec2(0x3030807u, 0x201f0303u));\n    store(uvec2(0x23222100u, 0x25241110u));\n    store(uvec2(0x27260f0eu, 0x3031110u));\n    store(uvec2(0x29281503u, 0x14130000u));\n    store(uvec2(0x15031503u, 0x3030303u));\n    store(uvec2(0x3031503u, 0x2b2a1803u));\n    store(uvec2(0x2010000u, 0x5040504u));\n    store(uvec2(0x3030303u, 0x3030504u));\n    store(uvec2(0x2d2c1c1bu, 0x6000000u));\n    store(uvec2(0x8070807u, 0x3030303u));\n    store(uvec2(0x3030807u, 0x2f2e201fu));\n    store(uvec2(0x30000000u, 0x11101110u));\n    store(uvec2(0x3030303u, 0x34333231u));\n    store(uvec2(0x36352928u, 0x14130000u));\n    store(uvec2(0x15031503u, 0x3030303u));\n    store(uvec2(0x38373837u, 0x3a392b2au));\n    store(uvec2(0x2010000u, 0x5040504u));\n    store(uvec2(0x3030303u, 0x3c3b3c3bu));\n    store(uvec2(0x3e3d2d2cu, 0x6000000u));\n    store(uvec2(0x8070807u, 0x33f0303u));\n    store(uvec2(0x41404140u, 0x43422f2eu));\n    store(uvec2(0xb0a0900u, 0x11101110u));\n    store(uvec2(0x3464544u, 0x4a494847u));\n    store(uvec2(0x4e4d4c4bu, 0x15031413u));\n    store(uvec2(0x15031503u, 0x351504fu));\n    store(uvec2(0x53523a39u, 0x57565554u));\n    store(uvec2(0x5040201u, 0x5040504u));\n    store(uvec2(0x5b5a5958u, 0x5d5c3e3du));\n    store(uvec2(0x61605f5eu, 0x8070600u));\n    store(uvec2(0x8070807u, 0x65646362u));\n    store(uvec2(0x67664342u, 0x6b6a6968u));\n    store(uvec2(0x120e0b0au, 0x32313231u));\n    store(uvec2(0x6f6e6d6cu, 0x71704e4du));\n    store(uvec2(0x75747372u, 0x18031503u));\n    store(uvec2(0x38373837u, 0x79787776u));\n    store(uvec2(0x53525756u, 0x2b2a5554u));\n    store(uvec2(0x1c1b0504u, 0x3c3b3c3bu));\n    store(uvec2(0x3c3b3c3bu, 0x5d5c6160u));\n    store(uvec2(0x2d2c5f5eu, 0x201f0807u));\n    store(uvec2(0x41404140u, 0x41404140u));\n    store(uvec2(0x67666b6au, 0x2f2e6968u));\n    store(uvec2(0x2928120eu, 0x7b7a4a49u));\n    store(uvec2(0x7d7c4847u, 0x71707574u));\n    store(uvec2(0x7f7e7372u, 0x2b2a1803u));\n    store(uvec2(0x55545352u, 0x2b2a3a39u));\n    store(uvec2(0x53522b2au, 0x2b2a5554u));\n    store(uvec2(0x2d2c1c1bu, 0x5f5e5d5cu));\n    store(uvec2(0x2d2c3e3du, 0x5d5c2d2cu));\n    store(uvec2(0x2d2c5f5eu, 0x2f2e201fu));\n    store(uvec2(0x69686766u, 0x2f2e4342u));\n    store(uvec2(0x67662f2eu, 0x2f2e6968u));\n    store(uvec2(0x36352928u, 0x73727170u));\n    store(uvec2(0x7f7e4e4du, 0x71707f7eu));\n    store(uvec2(0x7f7e7372u, 0x3a392b2au));\n    store(uvec2(0x55545352u, 0x2b2a5756u));\n    store(uvec2(0x53522b2au, 0x2b2a5554u));\n    store(uvec2(0x3e3d2d2cu, 0x5f5e5d5cu));\n    store(uvec2(0x2d2c6160u, 0x5d5c2d2cu));\n    store(uvec2(0x2d2c5f5eu, 0x43422f2eu));\n    store(uvec2(0x69686766u, 0x2f2e6b6au));\n    store(uvec2(0x67662f2eu, 0x2f2e6968u));\n    store(uvec2(0x4e4d3635u, 0x73727170u));\n    store(uvec2(0x7f7e7574u, 0x71707f7eu));\n    store(uvec2(0x7f7e7372u, 0x57563a39u));\n    store(uvec2(0x55545352u, 0x2b2a2b2au));\n    store(uvec2(0x53522b2au, 0x2b2a5554u));\n    store(uvec2(0x81818180u, 0x81818181u));\n    store(uvec2(0x81818181u, 0x81818181u));\n    store(uvec2(0x82818181u, 0x83u));\n    store(uvec2(0x0u, 0x0u));\n    store(uvec2(0x0u, 0x84000000u));\n    store(uvec2(0x87008685u, 0x87u));\n    store(uvec2(0x3008800u, 0x89u));\n    store(uvec2(0x85000000u, 0x8b008a85u));\n    store(uvec2(0x8bu, 0x3008c00u));\n    store(uvec2(0x89u, 0x85000000u));\n\n    fragColor = data;\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}