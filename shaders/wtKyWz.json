{
    "Shader": {
        "info": {
            "date": "1610841336",
            "description": "Origami landscape and Night sky, storm clouds, stylized birds and full moon. \nVery computationally intensive, need to find better parameters.\nThis is yet another scene derived from http://glslsandbox.com/e#70315.0\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wtKyWz",
            "likes": 2,
            "name": "Stylized atmospheric bird world",
            "published": 3,
            "tags": [
                "3d",
                "stylized",
                "geometric"
            ],
            "usePreview": 0,
            "username": "xavierseb",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "// night sky , storm clouds and birds , origami landscape\n// Warning: very slow on some machines\n\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PI 3.14159\n\nfloat mapWorld(vec3 p, mat2 m, mat2 n, float s) {\n\tfloat k;\n\tp.xy *= m;\n\tp.yz *= n;\n\tfor (int i = 0; i < 9; i++) {\n\t\tk = length(p.xy), p.x = k * (mod(atan(p.y, p.x), PI/4.) - PI/8.),  p.y = k - 2.752;\t\t\n\t\tk = length(p.yz), p.y = k * (mod(atan(p.z, p.y), PI/6.) - PI/12.), p.z = k - 10.0;\n\t}\n\t\n\treturn dot(abs(p), normalize(vec3(6.9,5,2.2+s))) - 1.6 ; \n}\n\nfloat mapMoon(vec3 p) {\n\tfloat k;\n\tp.xy *= rot(.92);\t\t\n\tp.yz *= rot(-.5);\t\t\n\tfor (int i = 0; i < 4; i++) {\n\t\tk = length(p.xy), p.x = k * (mod(atan(p.y, p.x), PI/5.) - PI/10.), p.y = k - 2.;\t\t\n\t\tk = length(p.yz), p.y = k * (mod(atan(p.z, p.y), PI/6.) - PI/12.), p.z = k - 10.0;\n\t}\n\treturn dot(abs(p), normalize(vec3(13, 18, 7))) - 0.7;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y, moon = vec2(.55,.05); \n    vec2 mouse=iMouse.xy/iResolution.xy;\n\t\n\t// draw moon\n\tvec3 rd = normalize(vec3(uv-moon, 1)), p;\n\tif(length(uv-moon)<.1) {\n\t\tp = vec3(0, 0, -420.);\n\t\tfragColor = vec4(.6); \n\t\t\n\t\tfor (int i = 1; i < 60; i++) {\n\t\t\tfloat d = mapMoon(p);\t\t\t\t\n\t\t\tp += rd * d;\n\t\t\tif (d < 0.001) {\n\t\t\t\tfragColor = vec4(20./float(i));\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse \tfragColor = vec4(0,0,mouse.x*2.-1.,1);\n\t\n\t// draw rest of our world\n\trd = normalize(vec3(uv, 1)); \n\tp  = vec3(0, 35.+mouse.y*5., -10.);\n\tfloat v = -8.*mod(iTime/266.,PI/2.), u = mouse.x, \n\t      s = .002*(1.+sin(iTime*8.+uv.x*10.));\n\tmat2 m = rot(u), n = rot(v);\t\n\t\n\tfor (int i = 1; i < 160; i++) {\n\t\tfloat d = mapWorld(p, m, n, s);\t\t\t\t\n\t\tp += rd * d;\n\t\tif (d < 0.001) {\n\t\t\tfragColor = vec4( 10,9,p.y-22.4,1)/float(i);\t\t\t\n\t\t\tbreak;\n\t\t}\n\t}\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}