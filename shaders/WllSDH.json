{
    "Shader": {
        "info": {
            "date": "1562753083",
            "description": "added https://www.shadertoy.com/view/MstGW2 as a subshader.\n\nplz excuse some bugs for now.",
            "flags": 32,
            "hasliked": 0,
            "id": "WllSDH",
            "likes": 1,
            "name": "RTS_Layout2",
            "published": 3,
            "tags": [
                "layout",
                "subshader",
                "mastershader"
            ],
            "usePreview": 0,
            "username": "gchipunov",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "//GEORGIY CHIPUNOV, NICE BACKGROUND\n#define S 40.\n                                                               // draw segment [a,b]\n#define L(a,b)  fragColor.g+= 2e-1 / length( clamp( dot(fragCoord-a,v=b-a)/dot(v,v), 0.,1.) *v - fragCoord+a )\n#define T(i,j) texture(iChannel0,(.5+S*vec2(i,j))/iResolution.xy).xy\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c = fragColor;\n   //   c.w = length(p = p/iResolution.y - .5);\n //\n    \n   // c = texture( iChannel0, vec2(atan(p.y,p.x), .3/c.w)+iTime )*c.w;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,0,1));\n\n    if(fragCoord.x > 0.5 )\n    {\n    col.r = smoothstep(c.w,iTime,iResolution.y);\n    \n    }\n    // Output to screen\n    float fNumPixelsX = iResolution.x ;\n    float fNumPixelsY = iResolution.y ;\n    \n    if(fragCoord.x > 555.0 && fragCoord.y > 200.0 )\n    {\n    col.r = smoothstep(c.w,iTime,iResolution.y);\n    fragColor.b = fragCoord.x;\n      fragColor.g = fragCoord.y;\n         fragColor -= fragColor; \n    \n    for (int j=0; j<10; j++) \n    {\n        vec2 v, P00, P01, P10 = T(0,j), P11 = T(0,j+1);\n        \n        for (int i=0; i<17; i++) \n        {\n            P00=P10, P01=P11, P10 = T(i+1,j), P11=T(i+1,j+1);\n            if (j<9 ) L(P00,P01);   // draw fragColorne vertical segment\n            if (i<16) L(P00,P10);   // draw fragColorne hfragColorrizfragColorntal segment\n            fragColor += smoothstep(5.,3.,length(fragCoord-T(i,j)));  // draw pfragColorints\n        }\n    }\n    }\n    else if(fragCoord.x > (fNumPixelsX/2.0 )+100.0)\n    {\n    col.r = smoothstep(c.w,iTime,iResolution.y);\n    fragColor.r = fragCoord.x;\n      fragColor.g = fragCoord.y;\n    }\n    // ADD MORE ELSE  IF FOR MORE LAYERS\n    \n    //EXAMPLE 1\n    // else if(fragCoord.x > (fNumPixelsX-500.0) )\n   // {\n  //  col.r = smoothstep(c.w,iTime,iResolution.y);\n   // fragColor.b = fragCoord.x;\n   //   fragColor.g = fragCoord.y;\n   //     fragColor = vec4(col,1.0);\n  //  }\n    //fragCoord\n    // EXAMPLE 2 _OVERRIDE!\n  //  if(fragCoord.x >  (fNumPixelsX-50.0) )\n  //  {\n  //  col.r = smoothstep(c.w,iTime,iResolution.y);\n  //  fragColor.b = fragCoord.x;\n  //    fragColor.g = fragCoord.y;\n  //    //  fragColor = vec4(col,1.0);\n  //  }\n    \n    \n    \n    else\n    {\n    fragColor = vec4(col,1.0);\n    }\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// each pixel of BufA encodes a pair of vertex coordinates.\n// It's Image shader responsability to pick and connect some of these.\n\n\nvoid mainImage( out vec4 O,  vec2 uv )\n{\n    vec2 U = uv/iResolution.xy;\n    \n    O = texture(iChannel0,U);\n  //if (iFrame==0) {\n    if (length(O.xy)==0.) {   // better if further increase of window size\n        O.xy = uv + 10.*(2.*texture(iChannel1,U).xy-1.);  // initial jittered coords\n        return;\n    }\n    else  {\n        float a = 10.*iTime + uv.x+117.1*uv.y; // decorelates rotation angle\n        O.xy += .2* vec2(cos(a),sin(a));       // shake coords\n    }\n    \n    if ( length(iMouse.xy-O.xy) < 10. )        // edit coords\n        O.xy = iMouse.xy;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}