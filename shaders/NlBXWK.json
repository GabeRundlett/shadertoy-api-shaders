{
    "Shader": {
        "info": {
            "date": "1628570831",
            "description": "just a little lighting fun.",
            "flags": 2,
            "hasliked": 0,
            "id": "NlBXWK",
            "likes": 7,
            "name": "glow mirror",
            "published": 3,
            "tags": [
                "video",
                "sdf",
                "noodle"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 586
        },
        "renderpass": [
            {
                "code": "\nfloat boxDist(in vec2 p, in vec2 corner) {\n  p = abs(p);\n  p = max(p - corner, vec2(0.0));\n  return length(p);\n}\n\nvec2 onEdge(in vec2 p, in vec2 corner, in float rad) {\n  if (abs(p.x) < corner.x) {\n    return vec2(p.x, sign(p.y) * (corner.y + rad));\n  }\n  if (abs(p.y) < corner.y) {\n    return vec2( sign(p.x) * (corner.x + rad), p.y);\n  }\n  vec2 anchor = sign(p) * corner;\n  vec2 dir = p - anchor;\n  dir = dir * rad / max(0.1, length(dir));\n  return anchor + dir;\n}\n\nfloat alongEdge(in vec2 p, in vec2 corner, in float rad) {\n  float result = 0.0;\n  if (p.y < 0.0) {\n    p = -p;\n    result += 2.0 * corner.x + 2.0 * corner.y + 3.141592654 * rad;\n  }\n\n  float along2 = 0.0;\n  \n  float quarterLength = corner.x + corner.y + 0.5 * 3.141592654 * rad;\n  \n  if (abs(p.x) < corner.x) {\n    along2 = abs(p.x);\n  } else if (abs(p.y) < corner.y) {\n    along2 = quarterLength - abs(p.y);\n  } else {\n    along2 = corner.x + atan(abs(p.x) - corner.x, abs(p.y) - corner.y) * rad;\n  }\n  \n  if (p.x < 0.0) {\n    along2 = quarterLength - along2;\n  } else {\n    along2 = quarterLength + along2;\n  }\n  return result + along2;\n}\n\nfloat normAlongEdge(in vec2 p, in vec2 corner, in float rad) {\n  return alongEdge(p, corner, rad) / (dot(corner, vec2(4.0)) + 2.0 * rad * 3.141592654);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    vec2 corner = 0.5 * iResolution.xy / min(iResolution.x, iResolution.y);\n    \n    float sdf = boxDist(uv, corner) - 0.25;\n\n    // Time varying pixel color\n    vec3 col = 5.0 * vec3(0.1, 0.2, 0.3) / (1.0 + 5.0 * sdf);\n    \n    float along = normAlongEdge(uv, corner, 0.25);\n    \n    float tex_along = mod(along + 0.0625 * iTime, 1.0);\n    \n    col *= 1.0 + 0.125 * (1.0 + tex_along) * smoothstep(0.0, 1.0, texture(iChannel1, vec2(tex_along, 0.5)).r);\n    \n    if (sdf < 0.0) {\n      uv = 0.5 + 1.0 * (fragCoord - 0.5 * iResolution.xy) / iResolution.xy;\n      col = texture(iChannel0, uv).rgb;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}