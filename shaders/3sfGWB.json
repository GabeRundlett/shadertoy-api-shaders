{
    "Shader": {
        "info": {
            "date": "1547292014",
            "description": "Inspired from http://canabalt.com/",
            "flags": 0,
            "hasliked": 0,
            "id": "3sfGWB",
            "likes": 8,
            "name": "CANABALT",
            "published": 3,
            "tags": [
                "2ddistance"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 432
        },
        "renderpass": [
            {
                "code": "#define noise(x) fract(sin(dot(vec2(x), vec2(12.9898, 78.233)))* 43758.5453)\n#define combine2D(d1,d2) d1 < d2 ? d1 : d2\n\n// numbers 0123456789\nint c[] = int[](31599,9362,29671,29391,23497,31183,31215,29257,31727,31695);\nfloat getBit(int num,int bit)\n{\n\treturn float( num>>bit & 1);\n}\n\nfloat Sprite3x5(int sprite,vec2 p)\n{\n\tfloat bounds = float(all(lessThan(p,vec2(3,5))) && all(greaterThanEqual(p,vec2(0,0))));\n\treturn getBit(sprite,int((2.0 - p.x) + 3.0 * p.y)) * bounds;\n}\n\nfloat Digit(int n,vec2 p)\n{\n\tn = int(mod(float(n),10.0));\n    return Sprite3x5(n == 0 ? c[0] : n == 1 ? c[1] : n == 2 ? c[2] : n == 3 ? c[3] : n == 4 ? c[4] : n == 5 ? c[5] : n == 6 ? c[6] : n == 7 ? c[7] : n == 8 ? c[8] : n == 9 ? c[9] : 0,p);\n}\n\n// noise and fbm function from https://www.shadertoy.com/view/Xd3GD4\n//-----------------------------------------------------------------------------\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise2d( in vec2 p )\n{\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n\nfloat fbm(vec2 uv)\n{\n\tfloat f;\n\tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise2d( uv ); uv = m*uv;\n\tf += 0.2500*noise2d( uv ); uv = m*uv;\n\tf += 0.1250*noise2d( uv ); uv = m*uv;\n\tf += 0.0625*noise2d( uv ); uv = m*uv;\n\tf = 0.5 + 0.5*f;\n\treturn f;\n}\n\nfloat dBox2d(vec2 p, vec2 b) {\n\treturn max(abs(p.x) - b.x, abs(p.y) - b.y);\n}\n\nfloat sdQuads( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p3 - p2;\n    vec2 e3 = p0 - p3;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n    vec2 v3 = p - p3;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    vec2 pq3 = v3 - e3*clamp( dot(v3,e3)/dot(e3,e3), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e3.y - e0.y*e3.x );\n    vec2 d = min( min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                 \t   vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) )),\n                       vec2( dot( pq3, pq3 ), s*(v3.x*e3.y-v3.y*e3.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nvec3 buildingTex(vec2 uv)\n{\n    float n = 7.9;\n    uv.x -= 0.093;\n    vec2 st = uv;\n    vec3 col = vec3(0.0);\n    if(uv.x>-0.55 && uv.x<0.35){\n         st = fract(uv * n);\n         col = vec3(1.0-smoothstep(0.009,0.01,dBox2d(st, vec2(0.5,0.4))))*vec3(-0.3);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/min(iResolution.y,iResolution.x);\n    \n    // bg color\n    vec3 col = vec3(0.65,0.65,0.7);\n    vec3 bcol = vec3(0.55,0.55,0.6);\n    vec3 mcol = vec3(0.25,0.25,0.3);\n    vec3 fcol = vec3(0.6,0.6,0.6);\n    \n    // smoke\n    float smokeD = dBox2d(uv+vec2(1.0,0.0),vec2(0.01,0.8))*fbm(uv - vec2(sin(iTime*0.1)*1.5,iTime*0.2));\n    col = mix( col, (vec3(0.95)+vec3(smokeD))*col, 1.0-smoothstep(0.13,0.15,abs(smokeD)) );\n    \n    // fake camera shake\n    uv.y += fbm(vec2(0.0,iTime*0.3))*0.1;\n    \n    vec2 uvRef = uv;\n    // bottom layer\n    uvRef.x += iTime*0.5;\n\tfloat n = floor(uvRef.x/0.5);\n    uvRef.y -=0.8;\n\tuvRef.y += noise(n)*0.3;\n\tuvRef.x = mod(uvRef.x,1.4)-0.7;\n    \n    float nn = floor(uv.y/1.1);\n    float bl0 = sdQuads(vec2(0.1,0.1),vec2(-0.1,0.15),vec2(-0.1,-1.5),vec2(0.1,-1.5),uvRef);\n    float bl1 = sdQuads(vec2(0.5,-0.05),vec2(0.1,0.05),vec2(0.1,-1.5),vec2(0.5,-1.5),uvRef);\n    float bl2 = sdQuads(vec2(-0.1,0.05),vec2(-0.3,-0.1),vec2(-0.3,-1.5),vec2(-0.1,-1.5),uvRef);\n    float bl3 = sdQuads(vec2(-0.3,-0.3),vec2(-0.6,-0.3),vec2(-0.6,-1.5),vec2(-0.3,-1.5),uvRef);\n    float blD = combine2D(bl0,bl1);\n    float blD1 = combine2D(bl2,bl3);\n    float blD2 = combine2D(blD,blD1);\n    col = mix( col, bcol, 1.0-smoothstep(0.009,0.01,blD2) );\n    \n    uvRef = uv;\n    \n    uvRef.x += iTime*0.5;\n    n = floor(uvRef.x/1.2);\n    uvRef.y += 0.7;\n\tuvRef.y += noise(n)*0.8;\n    uvRef.x = mod(uvRef.x,0.4)-0.2;\n    \n    float buildingD = dBox2d(uvRef,vec2(0.005,0.5));\n    col = mix( col, bcol, 1.0-smoothstep(0.2,0.21,abs(buildingD)) );\n    \n    uvRef = uv;\n    // middle layer\n\tuvRef.x += iTime*0.6;\n\tn = floor(uvRef.x/0.5);\n    uvRef.y -=0.5;\n\tuvRef.y += noise(n)*0.3;\n\tuvRef.x = mod(uvRef.x,1.4)-0.7;\n    \n    float ml0 = sdQuads(vec2(0.1,-0.2),vec2(-0.1,-0.25),vec2(-0.1,-1.5),vec2(0.1,-1.5),uvRef);\n    float ml1 = sdQuads(vec2(0.5,0.1),vec2(0.1,-0.05),vec2(0.1,-1.5),vec2(0.5,-1.5),uvRef);\n    float ml2 = sdQuads(vec2(-0.1,-0.2),vec2(-0.3,-0.15),vec2(-0.3,-1.5),vec2(-0.1,-1.5),uvRef);\n    float ml3 = sdQuads(vec2(-0.3,-0.3),vec2(-0.65,-0.3),vec2(-0.65,-1.5),vec2(-0.3,-1.5),uvRef);\n    float mlD = combine2D(ml0,ml1);\n    float mlD1 = combine2D(ml2,ml3);\n    float mlD2 = combine2D(mlD,mlD1);\n    col = mix( col, mcol, 1.0-smoothstep(0.009,0.01,(mlD2)) );\n    \n    uvRef = uv;\n    // top layer\n    uvRef.x += iTime*1.5;\n    n = floor(uvRef.x/3.0);\n    uvRef.y += 0.5;\n\tuvRef.y += noise(n)*1.1;\n    uvRef.x = mod(uvRef.x,1.5)-0.75;\n    \n    buildingD = dBox2d(uvRef,vec2(0.3,0.5));\n    col = mix( col, fcol+buildingTex(uvRef), 1.0-smoothstep(0.2,0.21,(buildingD)) );\n    \n    // meter\n    uv = ( fragCoord.xy /iResolution.xy ) * vec2(128,64);\n\tvec2 cpos = vec2(112.5,56.3);\n\tfloat dc = Digit(int(fract(iTime)*10.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*20.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*30.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*40.0),floor(uv-cpos));\n    col = mix(col,vec3(0.0),dc );\n    \n    cpos = vec2(112.0,57.0);\n\tdc = Digit(int(fract(iTime)*10.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*20.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*30.0),floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(int(fract(iTime)*40.0),floor(uv-cpos));\n   \tcol = mix(col,vec3(1.0),dc );\n    \n    // result\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}