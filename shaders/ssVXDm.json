{
    "Shader": {
        "info": {
            "date": "1634782298",
            "description": "It seems like differentiation and newton-raphson approximation is a bit more complicated with quaternions.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssVXDm",
            "likes": 5,
            "name": "Quaternion Newton Fractal Try",
            "published": 3,
            "tags": [
                "fractal",
                "quaternion",
                "iteration",
                "newton",
                "attempt",
                "naive"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "// vec4(a, b, c, d) = a + bi + cj + dk\nvec4 qmul(in vec4 p, in vec4 q) {\n    return vec4(p.x * q.x - p.y * q.y - p.z * q.z - p.w * q.w,\n                p.x * q.y + p.y * q.x + p.z * q.w - p.w * q.z,\n                p.x * q.z - p.y * q.w + p.z * q.x + p.w * q.y,\n                p.x * q.w + p.y * q.z - p.z * q.y + p.w * q.x);\n}\n\nvec4 qconj(in vec4 p) {\n    return vec4(p.x, -p.yzw);\n}\n\nvec4 qinv(in vec4 q) {\n    return qconj(q) / dot(q, q);\n}\n\n// https://www.shadertoy.com/view/ld23DV\nvec4 iBox(in vec3 ro, in vec3 rd, in vec3 size) {\n    vec3 n = ro / rd;\n    vec3 k = size / abs(rd);\n\n    vec3 t1 = -k - n;\n    vec3 t2 =  k - n;\n\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n\n    if (tN > tF || tF < 0.0) return vec4(-1.0);\n    return vec4(tN, -sign(rd) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz));\n}\n\nvec3 qNewton(in vec4 x) {\n    vec4 a = vec4(1.5, 2.0, 1.0, 0.25);\n    vec4 b = vec4(-1.0, 0.65, 2.0, -0.1);\n    vec4 c = vec4(-1.2, 1.25, 1.5, 1.3);\n\n    for (int i=0; i < 100; i++) {\n        vec4 xa = x - a, xb = x - b, xc = x - c;\n        vec4 f = qmul(xa, qmul(xb, xc));\n        vec4 df = qmul(xa + xb, xc) + qmul(xa, xb);\n        x -= qmul(f, qinv(df));\n    }\n\n    float distA = length(x - a);\n    float distB = length(x - b);\n    float distC = length(x - c);\n\n    vec3 color = vec3(1.0, 0.0, 0.0);\n    if (distB < distA) color = vec3(0.0, 1.0, 0.0);\n    if (distC < min(distA, distB)) color = vec3(0.0, 0.0, 1.0);\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 3.14;\n    fragColor = vec4(0.0);\n\n    // Generate camera ray\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Environment map\n    fragColor = texture(iChannel0, rd);\n\n    vec4 box = iBox(ro, rd, vec3(1.5));\n    if (box.x > 0.0) {\n        vec3 pos = ro + rd * box.x;\n        fragColor.rgb = qNewton(10.0 * vec4(pos, sin(iTime))) * max(0.0, dot(-rd, box.yzw));\n    }\n\n    // Tonemap\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.75));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}