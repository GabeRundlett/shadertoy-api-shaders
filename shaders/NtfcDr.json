{
    "Shader": {
        "info": {
            "date": "1647783253",
            "description": "réalisation d'un temple par Valentin Cuzin-Rambaud",
            "flags": 0,
            "hasliked": 0,
            "id": "NtfcDr",
            "likes": 4,
            "name": "TP1-2 P2003442",
            "published": 3,
            "tags": [
                "templesdffunction"
            ],
            "usePreview": 0,
            "username": "valentinCuzin",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "// Modeling - 2022.02.06\n// Eric Galin \n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Primitives \n\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Sphere \n// p : point\n// n : Normal of plane\n// o : Point on plane\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n\n//un Disque\n// p : point\n// c : centre du tore\n// r : rayon hauteur\n// R : rayon externe\n// n : Normal du Tore\nfloat Disque(vec3 p, vec3 c,vec3 n, float r, float R){\n    float pc = length(p-c);\n    float pq = abs(dot(p-c,n));\n    float qc = sqrt( pc*pc - pq*pq );\n    if(qc<R){\n        return pq-r;\n    }else{\n        return sqrt( pq*pq + (qc -R)*(qc -R))-r;\n    }\n}\n\n//la boite\n// p : le point Ã  qui on calcul la distance Ã  la boite\n// S : l'espace entre deux plan de la boite\nfloat Boite(vec3 p, vec3 s){\n    vec3 q = abs(p)-s;\n    return length( max(q , 0.0))+ min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat cylinder (vec3 a, vec3 b, float r, vec3 p)\n{\n    float aq = dot((p-a),(b-a)/length(b-a));\n    float l = sqrt(dot(p-a,p-a)- aq*aq);\n    return l-r;\n}\n\nfloat Capsule (vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p-a;\n    vec3 ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return length(pa-ba*h)-r;\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\n// Intersection\n// a,b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n\n// DiffÃ©rence\n// a,b : les deux distance de la fonction SDF des deux object\nfloat Differance(float a, float b){\n    return max(a, -b);\n}\n\nvec3 Translation(vec3 p, vec3 T){\n    return p - T;\n}\n\n//matrice de rotation\n// a : prend en paramÃ¨tre iTime\nmat2 Rotation(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n//Tore\nfloat Tore(vec3 p, vec3 normal, float Rextern, float Rintern, float rayon){\n    vec3 centre = vec3(0.0, 0.0, 3.0); \n    return Differance( Disque(p, centre, normal, rayon, Rextern), Disque(p, centre, normal, rayon, Rintern));\n}\n\n//cylindrefini\n// p : point\n// r : rayon\n// t : taille du cylindre\nfloat CylindreFini(vec3 p, float r, float t)\n{\n    float cylindreInf = cylinder(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, t), r, p);\n    float demiCylindreInf1 = Differance(cylindreInf, Plane( p, vec3(0.0, 0.0, -1.0) , vec3(0.0, 0.0, t+1.0))); \n    float demiCylindreInf2 = Differance(cylindreInf, Plane( p, vec3(0.0 ,0.0 ,1.0) , vec3(0.0,0.0,1.0) ));\n    return Intersection(demiCylindreInf1, demiCylindreInf2);\n    \n}\n\n//Pilier\n// p : point\n// t : taille du pilier\nfloat Pilier(vec3 p, float t){\n    float base = Boite(p, vec3(3.0, 3.0, 1.0));\n    vec3 transCourrante = Translation(p, vec3(0.0, 0.0, t));\n    float toit = Boite(transCourrante, vec3(3.0, 3.0, 1.0));\n    float Colone = CylindreFini(p, 2.0, t);\n    transCourrante = Translation(p, vec3(0.0, 0.0, -2.0));\n    float Disque = Disque(transCourrante, vec3(0.0, 0.0, 3.0), vec3(0.0, 0.0, 1.0), 0.5, 2.5);\n    return Union( Disque, Union(base, Union(toit, Colone)));\n}\n\n//Temple\n// p : point\nfloat Temple(vec3 p){\n  vec3 transCourrante = Translation(p, vec3(0.0, 0.0, -3.0));\n  float B1 = Boite(transCourrante, vec3(20.0, 15.0,1.0));\n  transCourrante = Translation(p, vec3(-2.0, 0.0, -2.0));\n  float B2 = Boite(transCourrante, vec3(18.0, 15.0,1.0));\n  float base = Union(B1, B2);\n  \n  transCourrante = Translation(p, vec3(-10.0, 0.0, 0.0));\n  float murs = Pilier(transCourrante, 4.0);\n  for( int i = 0; i<4; i++){\n      transCourrante = Translation(p, vec3(i*9-15, 11.0, 0.0));\n      murs = Union(murs, Pilier(transCourrante, 11.0));\n  }\n  for( int i = 0; i<4; i++){\n      transCourrante = Translation(p, vec3(i*9-15, -11.0, 0.0));\n      murs = Union(murs, Pilier(transCourrante, 11.0));\n  }\n  \n  float Tonnelle = Capsule(p, vec3(-18.0, -11.0, 10.0), vec3(-18, 11.0, 10.0), 0.5);\n  for( int i = 0; i<4; i++){\n      transCourrante = Translation(p, vec3(i*9-15, -11.0, 0.0));\n      Tonnelle = Union(Tonnelle, Capsule(p, vec3(i*9-15, -11.0, 12.0), vec3(i*9-15, 11.0, 12.0), 1.0));\n  }\n  \n  return Union( Tonnelle, Union(base, murs));\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  vec3 Tp = Translation(p, vec3(-10.0, 0.0, 4.0));\n  Tp.xy = Tp.xy * Rotation(0.2*iTime);\n  float AnneauMagique = Tore(Tp, vec3(0.0, 0.7, 1.0), 2.5, 2.0, 0.5);\n  vec3 Pp = Translation(p, vec3(10.0, -7.0,0.0));\n  float temple1 = Temple(p);\n  float v = Union(AnneauMagique, temple1);\n                        \n\n  /*Union(\n      Union(Sphere(p,vec3( 0.0, 2.0, 2.0),2.25),\n            Sphere(p,vec3( 3.0, 0.0,-1.0),3.0)),\n            Sphere(p,vec3( 3.0, 0.0,5.0),3.75));*/     \n    \n  v = Union(v,\n      Intersection(\n            Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,-4.0)),\n            Sphere(p,vec3(0.0,0.0,-4.0),25.0))\n     );\n\n  return v;\n}\n\n// Analysis of the scalar field \n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps = 0.001;\n  vec3 n;\n  float v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n  // Start at the origin\n  float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting \n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// r : Radius for ambient occlusion\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, float r, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,r,h,s);\n        if (!h) {ao+=1.0;}\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.45,0.55,0.99),vec3(0.65,0.69,0.99), d.z*0.5+0.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p+0.1*n,l,100.0,h,s);\n    if (!h)\n    {\n      return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    // Ambient color\n    vec3 ambient = 0.25+0.25*background(n);\n    \n    // Ambient occlusion\n    ambient += 0.15 * AmbientOcclusion(p+0.1*n,n,5.0,50) * vec3(1.0,1.0,1.0);\n    \n    // Shadow computation\n    float shadow = Shadow(p,n,l);\n    \n    // Phong diffuse\n    vec3 diffuse = 0.35  * clamp(dot(n, l),0.0,1.0) * vec3(1.0,1.0,1.0);\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = 0.15 * pow(clamp(dot(r,l),0.0,1.0),30.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + shadow * (diffuse + specular);\n    return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t = float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p = (-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip = true;\n    }\n       else\n       {\n           pip = false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Modeling\n// Eric Galin\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( float seed, vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m, vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.5;\n    \n    // Origin\n    ro=vec3(37.0,0.0,15.0);\n    ro*=Rz(a); \n\n    // Target\n    vec3 ta = vec3(0.0,0.0,1.0);\n    \n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}