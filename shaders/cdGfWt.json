{
    "Shader": {
        "info": {
            "date": "1713428104",
            "description": "This shader showcases a Height Blend method I came up with, offering smooth texture transitions based on height information while addressing issues with existing techniques.",
            "flags": 0,
            "hasliked": 0,
            "id": "cdGfWt",
            "likes": 4,
            "name": "Stable Height Blend",
            "published": 3,
            "tags": [
                "mix",
                "contrast",
                "barycentric",
                "lerp",
                "blend",
                "height",
                "interpolation",
                "interpolation",
                "bilinear",
                "heightblend"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 224
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2024 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nI introduce a novel Height Blend method to address issues with existing techniques. \nHeight interpolation, a common graphics technique, blends samples (usually texture \ncolors) based on their height information. Heightmaps for each sample bias the \nblending weight, creating a natural texture transition. I propose a stable Height \nBlend criterion: a sample is fully visible at 100% weight and entirely hidden at 0%.\n\nInitially, I tried to compare this method with others, but found existing techniques \nfail with extreme height values (0.0 or 1.0). Interestingly, I developed several \nunique methods, each with many variations, without much effort. So there are a lot \nmore variations possible with different approaches and strengths. If you have stable \nheight blend methods, please share them.\n\nThe shader demonstrates linear (2 value), barycentric (3 value), and bilinear (4 value) \ninterpolation in three columns. Mouse control adjusts the contrast on the Y-axis and \nenlarges a column by moving the X-axis to a column center. Global constants provide \nadditional control and alternate views.\n*/\n\n// Enable to show the weights (Alpha); disable to show blending with textures\n#define SHOW_WEIGHTS\n\n// Uncomment and set height values; heights should be in the range of 0-1\n// Linear interpolation is XY, barycentric is XYZ, and bilinear is XYZW\n//#define HEIGHT vec4(0.0, 1.0, 0.25, 0.75)\n\n// Offsets linear weights based on height differences. Contrast value range is 0-inf, \n// but ~16 should probably be the max, as weight transitions become too steep\n// See: https://www.desmos.com/calculator/gxhnhzu1cs\nfloat heightWeight(float weight, vec2 heights, float contrast) {\n    \n    // Generate both weights\n    vec2 weights = vec2(1. - weight, weight);\n    \n    // Generate the height weight\n    // Bias (+1) can be closer to 0, but float errors may come up\n    vec2 heightWeights = weights * pow(heights +1.0, vec2(contrast));\n\n    // Normalize to sum 1 and return weight y since linear only needs one\n    return heightWeights.y / (heightWeights.x + heightWeights.y);\n}\n\n// Offsets barycentric weights based on height differences\nvec3 baryHeightWeight(vec3 weights, vec3 heights, float contrast) {\n    \n    // Generate the height weight\n    vec3 heightWeights = weights * pow(heights +1.0, vec3(contrast));\n\n    // Normalize to sum 1\n    return heightWeights / (heightWeights.x + heightWeights.y + heightWeights.z);\n}\n\n// Offsets bilinear weights based on height differences\nvec4 bilinearHeightWeight(vec4 weights, vec4 heights, float contrast) {\n    \n    // Generate the height weight\n    vec4 heightWeights = weights * pow(heights +1.0, vec4(contrast));\n\n    // Normalize to sum 1\n    return heightWeights / (heightWeights.x + heightWeights.y + heightWeights.z + heightWeights.w);\n}\n\n// Demo of linear height tiling with height blending\nvec3 heightBlend(vec2 gridUV, float contrast, vec2 detailUV) {\n\n    // Calculate zigzag linear weight\n    float weight = abs(fract(gridUV.y * 0.5) * 2.0 - 1.0);\n        \n    // So a small section is 0. and 1. to show the heighblend does not encroach on them\n    weight = straightContrast(weight, 1.1); \n    \n    // Optionally increase the contrast for nicer transitions\n    // https://www.desmos.com/calculator/6c62nyvwou\n    weight = smoothContrast(weight, 1.6);\n    \n    // Choose between using constant height values or sampling heightmaps\n    #ifdef HEIGHT\n        // Use constant height values\n        vec2 heights = HEIGHT.xy;\n        \n    #else\n        // Sample heightmaps\n        float heightA = texture(iChannel0, detailUV).x;\n        float heightB = texture(iChannel1, detailUV).x;\n        \n        // Combine heights\n        vec2 heights = vec2(heightA, heightB);\n    #endif\n\n    // Offset weight with height bias by contrast\n    float heightWeight = heightWeight(weight, heights, contrast);\n    \n    // Debug view of weights\n    #ifdef SHOW_WEIGHTS\n        // Apply a colormap for visual clarity\n        return viridis(heightWeight);\n    #endif\n\n    // Sample albedo textures\n    vec3 colorA = texture(iChannel0, detailUV).xyz;\n    vec3 colorB = bone(texture(iChannel1, detailUV).x);\n\n    // Interpolate between the textures based on the final weight\n    return mix(colorA, colorB, heightWeight);\n}\n\n// Demo of Barycentric interpolation with bias from heightmaps\nvec3 baryHeightBlend(vec2 gridUV, float contrast, vec2 detailUV) {\n\n    // Calculate barycentric weights for a square pattern\n    vec3 weights = baryWeights(gridUV);\n\n    // So a small section is 0. and 1. to show the heighblend does not encroach on them\n    weights = straightContrast(weights, 1.1); \n\n    // Optionally increase the contrast for nicer transitions\n    weights = smoothContrast(weights, 1.6);\n\n    // Choose between using constant height values or sampling heightmaps\n    #ifdef HEIGHT\n        // Use constant height values\n        vec3 heights = HEIGHT.xyz;\n        \n    #else\n        // Sample heightmaps\n        float heightA = texture(iChannel0, detailUV).x;\n        float heightB = texture(iChannel1, detailUV).x;\n        float heightC = texture(iChannel2, detailUV).y;\n\n        // Combine heights\n        vec3 heights = vec3(heightA, heightB, heightC);\n    #endif\n    \n    // Offset weight with height bias by contrast\n    vec3 heightWeights = baryHeightWeight(weights, heights, contrast);\n        \n    // Debug view of weights\n    #ifdef SHOW_WEIGHTS\n        // Show weights / Alpha values\n        return heightWeights;\n    #endif\n\n    // Sample albedo textures\n    vec3 colorA = texture(iChannel0, detailUV).xyz;\n    vec3 colorB = bone(texture(iChannel1, detailUV).x);\n    vec3 colorC = texture(iChannel2, detailUV).xyz;\n\n    // Interpolate between the textures based on the final weights\n    return colorA * heightWeights.x + colorB * heightWeights.y + colorC * heightWeights.z;\n}\n\n// Demo of Bilinear interpolation with bias from heightmaps\nvec3 bilinearHeightBlend(vec2 gridUV, float contrast, vec2 detailUV) {   \n\n    // Calculate vanilla bilinear weights\n    vec4 weights = bilinearWeights(gridUV);\n    \n    // So a small section is 0. and 1. to show the heighblend does not encroach on them\n    weights = straightContrast(weights, 1.1); \n    \n    // Optionally increase the contrast for nicer transitions\n    weights = smoothContrast(weights, 1.6);\n    \n    // Choose between using constant height values or sampling heightmaps\n    #ifdef HEIGHT\n        // Use constant height values\n        vec4 heights = HEIGHT;\n        \n    #else\n        // Sample heightmaps\n        float heightA = texture(iChannel0, detailUV).x;\n        float heightB = texture(iChannel1, detailUV).x;\n        float heightC = texture(iChannel2, detailUV).y;\n        float heightD = texture(iChannel3, detailUV).x;\n        \n        // Combine heights\n        vec4 heights = vec4(heightA, heightB, heightC, heightD);\n    #endif\n    \n    // Generate biased weights using bilinear interpolation\n    vec4 heightWeights = bilinearHeightWeight(weights, heights, contrast);\n    \n    // Debug view of weights\n    #ifdef SHOW_WEIGHTS\n        // Show weights / Alpha values\n        return heightWeights.xyz;\n    #endif\n    \n    // Sample albedo textures\n    vec3 colorA = texture(iChannel0, detailUV).xyz;\n    vec3 colorB = bone(texture(iChannel1, detailUV).x);\n    vec3 colorC = texture(iChannel2, detailUV).xyz;\n    vec3 colorD = texture(iChannel3, detailUV).xyz;\n     \n    // Interpolate between the textures\n    vec3 color = colorA * heightWeights.x + \n                 colorB * heightWeights.y + \n                 colorC * heightWeights.z +\n                 colorD * heightWeights.w;\n    return color;\n}\n\n// Demo of Bilinear interpolation with bias from heightmaps\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {   \n\n    // Calculate UVs for the x-axis of the window\n    vec2 uv = fragCoord / iResolution.x;\n    \n    // Calculate UVs for the blend grids\n    vec2 gridUV = uv * 6.0;\n    \n    // Calculate UVs for the detail texture\n    vec2 detailUV = uv * 7.0;\n    \n    // Create a float to divide into sections for comparisons\n    float comparisonX = uv.x * 3.0;\n\n    // Enable mouse controls when clicked; otherwise, animate\n    float pointer;\n    float contrast;\n    if (iMouse.x > 0.0) {\n        // Mouse controls\n        vec2 mouse = iMouse.xy / iResolution.xy;\n        contrast = mix(0.0, 16.0, pow(mouse.y, 2.0));\n        pointer = mouse.x * 3.0;\n    } else {\n        // Animation when no mouse input is used\n        float myTime = iTime * 1.0;\n        contrast = mix(0.0, 12.0, pow(sin(myTime) * 0.5 + 0.5, 2.0));\n        // pointer = fract(iTime * 0.05) * 3.0;\n    }\n    \n    // Create zigzag weights\n    float weight = abs(fract(pointer - 0.5) * 2.0 - 1.0);\n    \n    // Make transitions dead zones for easier use\n    weight = straightContrast(weight, 2.);\n            \n    // Define default edge locations for the columns\n    vec2 columnEdges = vec2(1.0, 2.0); \n    \n    // Mouse-controlled animations to zoom into the columns    \n    vec2 zoomColumnEdges = columnEdges;\n    if (pointer <= 1.0) {\n        // Zoom into the left side        \n        zoomColumnEdges = vec2(2.8, 2.9);\n    } else if (pointer <= 2.0) {\n        // Zoom into the center column\n        zoomColumnEdges = vec2(0.1, 2.9);\n    } else {\n        // Zoom into the right column\n        zoomColumnEdges = vec2(0.1, 0.2);\n    }\n\n    // Interpolate between default column edge positions and zoom\n    columnEdges = mix(columnEdges, zoomColumnEdges, weight);    \n    \n    // Choose interpolation method based on the x-coordinate\n    vec3 color;\n    if (comparisonX <= columnEdges.x) {\n        // Left side\n        color = heightBlend(gridUV, contrast, detailUV);\n                        \n    } else if (comparisonX <= columnEdges.y) {\n        // Center section\n        color = baryHeightBlend(gridUV, contrast, detailUV);\n        \n    } else {\n        // Right side        \n        color = bilinearHeightBlend(gridUV, contrast, detailUV);\n    }\n    \n    // Add lines between columns\n    float borderThickness = 0.004;    \n    color += step(abs(comparisonX - columnEdges.x), borderThickness);\n    color += step(abs(comparisonX - columnEdges.y), borderThickness);\n    \n    // Add arrows pointing at the center of columns\n    color += step(uv.y + abs(fract(comparisonX)-0.5), borderThickness*5.);\n            \n    // Set the output color\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Generic Functions ____________________________________________________________\n\n// makes viridis colormap with polynimal 6\nvec3 viridis(float t) {\n    const vec3 c0 = vec3(0.274344,0.004462,0.331359);\n    const vec3 c1 = vec3(0.108915,1.397291,1.388110);\n    const vec3 c2 = vec3(-0.319631,0.243490,0.156419);\n    const vec3 c3 = vec3(-4.629188,-5.882803,-19.646115);\n    const vec3 c4 = vec3(6.181719,14.388598,57.442181);\n    const vec3 c5 = vec3(4.876952,-13.955112,-66.125783);\n    const vec3 c6 = vec3(-5.513165,4.709245,26.582180);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// makes bone colormap with polynimal 6\nvec3 bone(float t) {\n    const vec3 c0 = vec3(-0.005007,-0.003054,0.004092);\n    const vec3 c1 = vec3(1.098251,0.964561,0.971829);\n    const vec3 c2 = vec3(-2.688698,-0.537516,2.444353);\n    const vec3 c3 = vec3(12.667310,-0.657473,-8.158684);\n    const vec3 c4 = vec3(-27.183124,8.398806,10.182004);\n    const vec3 c5 = vec3(26.505377,-12.576925,-5.329155);\n    const vec3 c6 = vec3(-9.395265,5.416416,0.883918);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// Interpolation ________________________________________________________________\n\n// Make tiling bilinear weights\nvec4 bilinearWeights(vec2 uv) {\n\n    // Generate zigzag pattern\n    vec2 zigZag = abs(fract(uv * 0.5) * 2.0 - 1.0);\n    \n    // Invert zigzag as a partial of the weights\n    vec2 infZigZag = 1.0 - zigZag;\n\n    // Generate alpha values (weights) for bilinear interpolation.\n    float weightA = zigZag.x * zigZag.y;\n    float weightB = zigZag.x * infZigZag.y;\n    float weightC = infZigZag.x * zigZag.y;\n    float weightD = infZigZag.x * infZigZag.y;\n    \n    // Combine weight/alpha values. \n    return vec4(weightA, weightB, weightC, weightD);\n}\n\n// Make tiling square barycentric weights\nvec3 baryWeights(vec2 uv) {\n\n    // Generate zigzag pattern\n    vec2 zigZag = abs(fract(uv * 0.5) * 2.0 - 1.0);\n\n    // make individual weights for pattern\n    float weightA = min(zigZag.x, zigZag.y);\n    float weightB = min(1.-zigZag.x, 1.-zigZag.y);\n    float weightC = 1. - weightA - weightB;\n    \n    // when to alternate the 2 C samples\n    //float switchC = float(zigZag.x < zigZag.y);\n    \n    // Join weights together\n    return vec3(weightA, weightB, weightC);//, switchC);\n}\n\n// Contrast _______________________________________________________________\n\n// Linearly increases contrast of Alpha\n// See: https://www.desmos.com/calculator/hs1nsjb32q\nfloat straightContrast(float alpha, float contrast) {\n    return clamp(contrast * (alpha - 0.5) + 0.5, 0., 1.);\n}\n\n// Straight Contrast to 3 Barycentric Weights, oh the pain\n// See: https://www.desmos.com/calculator/n23ntt1nys\nvec3 straightContrast(vec3 weights, float contrast) {\n    // Offset of weights to move towards the center\n    // InverseStraightContrast(0)*(1/3)\n    float offset = (contrast-1.) / (6. * contrast);\n\n    // Merge the offset with the diagonal offsets\n    float offsetA = min(offset, min(weights.y, weights.z) * 0.5);\n    float offsetB = min(offset, min(weights.x, weights.z) * 0.5);\n\n    // Apply the contrast to the merged weights\n    float contrastA = straightContrast(weights.x + offsetA, contrast);\n    float contrastB = straightContrast(weights.y + offsetB, contrast);\n    // No proper calculation needed as sum(weights)=1\n    float contrastC = clamp(1. - contrastA - contrastB, 0.,1.); // clamp prevents float errors \n    \n    // merge into vector\n    return vec3(contrastA, contrastB, contrastC);\n}\n\n// Straight Contrast for 4 Bilinear Weights \n// See: https://www.desmos.com/calculator/629sxxdp5g\nvec4 straightContrast(vec4 weights, float contrast) {\n    // recreate coordinates\n    float ab = weights.x + weights.y; // = UV.x\n    float ac = weights.x + weights.z; // = UV.y\n    \n    // apply contrast\n    ab = straightContrast(ab, contrast);\n    ac = straightContrast(ac, contrast);\n    \n    // recreate weights\n    return bilinearWeights(vec2(ab, ac));\n}\n\n// Increases the steepness of Alpha while preserving 0-1 range and 1 sum\n// See: https://www.desmos.com/calculator/hs1nsjb32q\nfloat smoothContrast(float alpha, float contrast) {\n    // increase steepness using power\n    float powAlpha = pow(alpha, contrast);\n    float powInfAlpha = pow(1.-alpha, contrast);\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha + powInfAlpha);\n}\n\n// Increases the steepness of Alpha while preserving 0-1 range and 1 sum\n// See: https://www.desmos.com/calculator/n23ntt1nys\nvec3 smoothContrast(vec3 alpha, float contrast) {\n    // increase steepness using power\n    vec3 powAlpha = pow(alpha, vec3(contrast));\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha.x + powAlpha.y + powAlpha.z);\n}\n\n// Increases the steepness of Alpha while preserving 0-1 range and 1 sum\n// See: https://www.desmos.com/calculator/629sxxdp5g\nvec4 smoothContrast(vec4 alpha, float contrast) {\n    // increase steepness using power\n    vec4 powAlpha = pow(alpha, vec4(contrast));\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha.x + powAlpha.y + powAlpha.z + powAlpha.w);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}