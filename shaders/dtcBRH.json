{
    "Shader": {
        "info": {
            "date": "1700934243",
            "description": "CC0: These mist covered mountains...\n Tinkering around with a terrain marcher.\n Thought I share it and explain a bit what's going on\n  The name of the game is fine tuning!\n\n",
            "flags": 96,
            "hasliked": 0,
            "id": "dtcBRH",
            "likes": 25,
            "name": "These mist covered mountains...",
            "published": 3,
            "tags": [
                "fbm"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 383
        },
        "renderpass": [
            {
                "code": "// CC0: These mist covered mountains...\n//  Tinkering around with a terrain marcher.\n//  Thought I share it and explain a bit what's going on\n\n// Uncomment if you are on mobile devices and the screen goes dark\n// \"Might\" help\n#define APPLY_FXAA\n\n// License: Unknowon, author: XorDev, found: https://github.com/XorDev/GM_FXAA\nvec4 fxaa(sampler2D tex, vec2 uv, vec2 texelSz) {\n  // See this blog\n  // https://mini.gmshaders.com/p/gm-shaders-mini-fxaa\n\n  // Maximum texel span\n  const float span_max    = 8.0;\n  // These are more technnical and probably don't need changing:\n  // Minimum \"dir\" reciprocal\n  const float reduce_min  = (1.0/128.0);\n  // Luma multiplier for \"dir\" reciprocal\n  const float reduce_mul  = (1.0/32.0);\n\n  const vec3  luma        = vec3(0.299, 0.587, 0.114);\n\n  // Sample center and 4 corners\n  vec3 rgbCC = texture(tex, uv).rgb;\n  vec3 rgb00 = texture(tex, uv+vec2(-0.5,-0.5)*texelSz).rgb;\n  vec3 rgb10 = texture(tex, uv+vec2(+0.5,-0.5)*texelSz).rgb;\n  vec3 rgb01 = texture(tex, uv+vec2(-0.5,+0.5)*texelSz).rgb;\n  vec3 rgb11 = texture(tex, uv+vec2(+0.5,+0.5)*texelSz).rgb;\n\n  //Get luma from the 5 samples\n  float lumaCC = dot(rgbCC, luma);\n  float luma00 = dot(rgb00, luma);\n  float luma10 = dot(rgb10, luma);\n  float luma01 = dot(rgb01, luma);\n  float luma11 = dot(rgb11, luma);\n\n  // Compute gradient from luma values\n  vec2 dir = vec2((luma01 + luma11) - (luma00 + luma10), (luma00 + luma01) - (luma10 + luma11));\n\n  // Diminish dir length based on total luma\n  float dirReduce = max((luma00 + luma10 + luma01 + luma11) * reduce_mul, reduce_min);\n\n  // Divide dir by the distance to nearest edge plus dirReduce\n  float rcpDir = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n\n  // Multiply by reciprocal and limit to pixel span\n  dir = clamp(dir * rcpDir, -span_max, span_max) * texelSz.xy;\n\n  // Average middle texels along dir line\n  vec4 A = 0.5 * (\n      texture(tex, uv - dir * (1.0/6.0))\n    + texture(tex, uv + dir * (1.0/6.0))\n    );\n\n  // Average with outer texels along dir line\n  vec4 B = A * 0.5 + 0.25 * (\n      texture(tex, uv - dir * (0.5))\n    + texture(tex, uv + dir * (0.5))\n    );\n\n\n  // Get lowest and highest luma values\n  float lumaMin = min(lumaCC, min(min(luma00, luma10), min(luma01, luma11)));\n  float lumaMax = max(lumaCC, max(max(luma00, luma10), max(luma01, luma11)));\n\n  // Get average luma\n  float lumaB = dot(B.rgb, luma);\n\n  //If the average is outside the luma range, using the middle average\n  return ((lumaB < lumaMin) || (lumaB > lumaMax)) ? A : B;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  // Apply FXAA (full screen anti aliasing) to reduce some aliasing effects caused\n  // by specular lighting\n#ifdef APPLY_FXAA  \n  vec3 col = fxaa(iChannel0, q, 1.0/RESOLUTION.xy).xyz;\n#else\n  vec3 col = texture(iChannel0, q).xyz;\n#endif\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 35351,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/progressive-rock/mark-knopfler-brothers-in-arms?si=8949302be68844bab8502540f5a6a5c8&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// CC0: These mist covered mountains...\n//  Tinkering around with a terrain marcher.\n//  Thought I share it and explain a bit what's going on\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float \n  pi        = acos(-1.0)\n, tau       = 2.*pi\n;\nconst vec2 U = vec2(0., 1.);\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash1(vec2 co) {\n  // Creates a pseudo random number from a 2D coord\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nvec2 hash2(vec2 p) {\n  // Creates two pseudo random number from a 2D coord\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return fract(sin(p)*43758.5453123);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.shadertoy.com/view/XslGRr\nfloat vnoise(vec2 p) {\n // Value noise (vnoise) to my understanding is basically generating a white noise (using hash)\n // samples in a grid and interpolating using smoothstep to create \"smoother\" noise\n // which is more suited to generate terrains\n // Another common approach is perlin noise\n vec2 i = floor(p);\n vec2 f = fract(p);\n    \n vec2 u = f*f*(3.0-2.0*f);\n\n float a = hash1(i);\n float b = hash1(i+U.yx);\n float c = hash1(i+U.xy);\n float d = hash1(i+U.yy);\n   \n float m0 = mix(a, b, u.x);\n float m1 = mix(c, d, u.x);\n float m2 = mix(m0, m1, u.y);\n    \n return m2;\n}\n\n// https://iquilezles.org/articles/fbm/\nvec3 terrain(vec2 p, int n) {\n  vec2 np = p;\n  vec2 cp = p;\n  float nh = 0.0;\n  float na = 1.0;\n  float ns = 0.0;\n  const mat2 nr = 2.11*ROT(radians(57.0));\n\n  // Terrain generated by applying vnoise function multiple times\n  //  Each time halving the amplitude and roughly doubling the frequency.\n\n  // This generating a height field that looks like mountains\n\n  for (int i = 0; i < n; ++i) {\n    nh += na*vnoise(np);\n    np += 123.4;\n    np *= nr;\n    ns += na;\n    na *= 0.5;\n  }\n  \n  \n  // Subtracting cone shaped objects to create more dramatic terrain\n  nh /= ns;\n  cp *= 0.05*nr;\n  vec2 cn = floor(cp);\n  cp = fract(cp);\n  cp *= pi;\n  float ch = 0.5*((sin(cp.x)*sin(cp.y)));\n  float h = hash1(cn);\n  nh -= 2.0*ch*h*h*h;\n  \n  vec3 col = vec3(nh);\n  return col;\n}\n\n\n// From Shane's excellent shader: Perspex Web Lattice\n//  https://www.shadertoy.com/view/Mld3Rn\n//  Adopted slightly\nvec3 voronoi(vec2 p) {\n  // Voronoi patterns look somewhat organic and is used here to create tree a like texture\n  p*= 20.0;\n  vec2 g = floor(p);\n  vec2 o;\n  p -= g;\n  \n  float dx = 8.0;\n  float dy = 8.0;\n  float dz = 8.0;\n  vec2 c = vec2(0.01);\n  for(int y = -1; y <= 1; y++) {\n    for(int x = -1; x <= 1; x++) {\n      o = vec2(x, y);\n      vec2 h = hash2(g + o); \n      o += h - p;\n      dz = dot(o, o); \n      dy = max(dx, min(dy, dz));\n      if (dz < dx) {\n        dx = dz;\n        c = h;\n      }\n    }\n  }\n  \n  return vec3(max(dy/1.2 - dx, 0.)/1.2, fract(c.x+c.y), 0.);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// CC0: These mist covered mountains...\n//  Tinkering around with a terrain marcher.\n//  Thought I share it and explain a bit what's going on\n\n// Generating a high detailed terrain texture used during raymarching\n//  and to generate the mountain normal\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  fragColor = vec4(terrain(p, 10), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CC0: These mist covered mountains...\n//  Tinkering around with a terrain marcher.\n//  Thought I share it and explain a bit what's going on\n\n// Generating a low detailed terrain texture used during to generate the snow normal\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  fragColor = vec4(terrain(p, 5), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CC0: These mist covered mountains...\n//  Tinkering around with a terrain marcher.\n//  Thought I share it and explain a bit what's going on\n\n// Generating the voronoi texture used to generate the trees\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  fragColor = vec4(voronoi(p), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CC0: Mountains and beaches\n//  Tinkering around with a terrain marcher.\n//  Thought I share it and explain a bit what's going on\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// HSV2RGB let's us define a color using hue saturation and brightness\n//  I find it an easier way to experiment with getting the colors right\n//  All of these colors have been fine tuned through lots of experiments\nconst vec3 \n  skyCol     = HSV2RGB(vec3(0.57, 0.7 , 0.25))\n, sunCol     = HSV2RGB(vec3(0.07, 0.66, 25E-4))\n, glowCol    = HSV2RGB(vec3(0.98, 0.66, 25E-4))\n, groundCol0 = HSV2RGB(vec3(0.04, 0.9 , 0.1))\n, groundCol1 = HSV2RGB(vec3(0.06, 0.45, 0.5))\n, groundCol2 = HSV2RGB(vec3(0.05, 0.6 , 1.0))\n, treeCol0   = HSV2RGB(vec3(0.35, 0.8 , 0.4))\n, treeCol1   = HSV2RGB(vec3(0.12, 0.95, 0.8))\n, mistCol    = HSV2RGB(vec3(0.55, 0.13, 1.0))\n, sandCol    = HSV2RGB(vec3(0.087, 0.35, 0.5))\n// An approximate direction of the sky\n//  Used to cheat illumination from the sky\n, skyDir     = normalize(vec3(0.5, 0.25, 1.0)) \n, sunDir     = normalize(vec3(0.0, 0.1, -1.0))\n;\n\nconst float \n, max_dist  = 14.0\n, tolerance = 1E-3\n, norm_off  = 1E-2\n// Controls the path of the camera\n, path_a    = 0.20123\n, path_b    = 3.0\n, path_c    = 0.123\n, minh      = 0.5\n, maxh      = 2.5\n, waterLevel= 0.3\n, beachLevel= waterLevel+0.01\n, treeLevel = waterLevel+0.4\n, cloudLevel= waterLevel+0.125\n;\nconst int\n  max_iter = 80\n  ;\n\n// The camera path or the current eye position\nvec3 cam_path(float z) {\n  return vec3(sin(z*path_a)*path_b, 1.25+0.5*sin(z*path_c), -z);\n}\n\n// The derivate of the camera path, will be used to generate the direction we are looking at\nvec3 dcam_path(float z) {\n  return vec3(path_a*path_b*cos(path_a*z), path_c*0.5*cos(z*path_c), -1.0);\n}\n\n// The derivate of the derivate, used to to tilt the camera to increase the feeling\n// of us being in an airplane\nvec3 ddcam_path(float z) {\n  return vec3(-path_a*path_a*path_b*sin(path_a*z), -path_c*path_c*0.5*sin(z*path_c), 0.0);\n}\n\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  // We create colors in 0,inf range but the final result must be clamp to 0,1\n  //  Just a normal clamp will create significant glare around the sun\n  //  This function maps 0,inf to 0,1\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nfloat hf(sampler2D fbm, vec2 p) {\n  // Samples the height texture \n  \n  // Computes a global height function around the cam path, \n  //  Because we use a height texture this makes the texture repeat\n  //  The global height function makes that less apparant\n  vec3 cam = cam_path(p.y);\n  float g =  mix(minh, maxh*(0.5-0.5*cos(0.124*p.y)), smoothstep(0.25, 2.0-0.5*sin(0.124*p.y), max(abs(cam.x+p.x), 0.0)));\n\n  p *= 0.125;\n  p += 0.5;\n\n  // Performs a reflection of the texture to lessen the artefacts at the border of the texture\n  vec2 n = fract(0.5*floor(p));\n  p = fract(p);\n  p.x = n.x == 0.0 ? p.x : 1.-p.x;\n  p.y = n.y == 0.0 ? p.y : 1.-p.y;\n  \n  \n  return g*texture(fbm, p).x;\n}\n\nfloat hihf(vec2 p) {\n  return hf(iChannel0 ,p);\n}\n\nfloat lohf(vec2 p) {\n  return hf(iChannel1 ,p);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float initt, float minstep) {\n  // Marches the height field until we hit the ground\n\n  float t = initt;\n  \n  float stp = 0.9;\n  int i;\n  float lastt;\n  for (i = 0; i < max_iter; ++i) {\n    if (t > max_dist) {\n      break;\n    }\n    vec3 p = ro+rd*t;\n    // Compute the height of the terrain at the current position\n    float h = hihf(p.xz);\n    // The height is an approximate distance, \n    // If the mountain is rising rapidly it's possible to travel through it\n    //  or hit the inside\n    \n    float d = p.y - h;\n    \n    if (d < tolerance) {\n      // Because of the approximate nature of the distance\n      //  when we hit the surface we attempt a back track and reduce the stp size\n      \n      if (stp >= 0.1) {\n        stp /= 3.0;\n        t = lastt;\n      } else {\n        break;\n      }\n    }\n    \n    lastt = t;\n    // Step forward\n    t += max(stp*d, minstep);\n  }\n\n  return t;\n}\n\nvec3 hinormal(vec2 p, float e) {\n  // Compute a high resolution normal\n  //  Used to compute the color of the mountain sides\n  vec2 eps = vec2(e, 0.0);\n  return normalize(vec3(\n    hihf(p - eps.xy) - hihf(p + eps.xy)\n  , 2.0*eps.x\n  , hihf(p - eps.yx) - hihf(p + eps.yx)\n  ));\n}\n\nvec3 lonormal(vec2 p, float e) {\n  // Compute a low resolution normal\n  //  Used to compute the color of the snow\n  vec2 eps = vec2(e, 0.0);\n  return normalize(vec3(\n    lohf(p - eps.xy) - lohf(p + eps.xy)\n  , 2.0*eps.x\n  , lohf(p - eps.yx) - lohf(p + eps.yx)\n  ));\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nvec3 render0(vec3 ro, vec3 rd) {\n  // The sky color\n  vec3 col = vec3(0.0);\n  // The primary sun color\n  col += sunCol/max((1.0-dot(rd, sunDir)), 0.001);\n  // A reddish glow around the horizon and rising around the sun\n  col += glowCol/max(0.05*abs(rd.y)+0.25*rd.x*rd.x, 0.005);\n  // The sky color that fades out upwards\n  col += skyCol*(1.125-tanh_approx(17.0*(rd.y*rd.y)));\n  return col;\n}\n\n\nvec2 sampleVoronoi(vec2 p) {\n  // Sampling the voronoi height feild\n  p *= 3.0;\n\n  // Reflect again to avoid artefacts around borders\n  vec2 n = fract(0.5*floor(p));\n  p = fract(p);\n  \n  p.x = n.x == 0.0 ? p.x : 1.-p.x;\n  p.y = n.y == 0.0 ? p.y : 1.-p.y;\n  return texture(iChannel2, p).xy;\n}\n\nfloat treehf(vec2 p, out float vc, out float vh) {\n  // Tree height function, using the height of the terrain and adds the voronoi pattern\n  vec2 vp = sampleVoronoi(p);\n  vh = vp.x;\n  vc = vp.y;\n  return lohf(p)+vp.x*.075;\n}\n\nfloat treehf(vec2 p) {\n  float vc;\n  float vh;\n  return treehf(p, vc, vh);\n}\n\nvec3 treenormal(vec2 p, float e, out float vc, out float vh) {\n  // Tree height normal\n  //  To give a normal that is adjusted by the voronoi pattern as\n  //  well as to extract what color should be used for this tree cell\n  vec2 eps = vec2(e, 0.0);\n  float h0 = treehf(p, vc, vh);\n  return normalize(vec3(\n    treehf(p - eps.xy) - h0\n  , eps.x\n  , treehf(p - eps.yx) - h0\n  ));\n}\n\nvec3 render1(vec3 ro, vec3 rd) {\n  // The main renderer of mountains, beaches, trees and such\n  \n  // There is lot of fine tuning here from lots of experiments\n  \n  vec3 sky = render0(ro, rd);\n\n  // The distance to the water\n  float watert   = -(ro.y-waterLevel)/rd.y;\n  // The distance to the terrain\n  float terraint = rayMarch(ro, rd, 0.01, tolerance);\n  // The distance to the cloud layer\n  float cloudt   = -(ro.y-cloudLevel)/rd.y;\n\n  vec3 col = vec3(0.0);\n\n  vec3 cp = ro+rd*cloudt;\n  // Sample the height at the cloud intersection, this will be used later to modify\n  // the cloud transparency\n  float ch = lohf(cp.xz);\n  \n  // Compute the fade out factor\n  const float near_dist = 10.0;\n  float ft = max(terraint-near_dist, 0.0)/(max_dist-near_dist);\n  const float fof = log(20.0);\n  float fm = exp(-ft*fof);\n\n  vec3 gp   = ro+rd*terraint;\n  vec3 hin  = hinormal(gp.xz, norm_off);\n  vec3 lon  = lonormal(gp.xz, norm_off);\n  // Compute diffuse light for various aspects  \n  float gdif = max(dot(hin, sunDir), 0.0);\n  float bdif = max(dot(hin, skyDir), 0.0);\n  float sdif = max(dot(lon, sunDir), 0.0);\n  float sbdif = max(dot(lon, skyDir), 0.0);\n  \n  // Raymarch toward the sun to detect if the point is in shadow\n  float gst = rayMarch(gp, sunDir, 0.05, 0.05); \n  // Makes the shadow softer depending if the intersection\n  // to the terrain was close or far away\n  float sf = mix(0.1, 0.5, tanh_approx(0.1*(gst)));\n  float sdifu = sdif;\n  if (gst < max_dist) {\n    gdif *= sf;\n    sdif *= sf;\n  }\n\n  vec3 pp = ro+watert*rd;\n  \n  if (watert > 0.0 && watert < terraint) {\n    // Water effect\n    // Fake water wave effect\n    // Waves are also not moving but that is not visible because camera is moving\n    vec3 pn = normalize(vec3(0.005*sin(67.0*pp.x), 1.0, 0.0));\n    vec3 pr = reflect(rd, pn);\n    // Compute fresnel effect, which is that the more steep we hit the water\n    // surface the more it reflects\n    // Inspired by real life but not using \"proper\" math\n    float pfre = 1.0+dot(rd, pn);\n    pfre *= pfre;\n    // Do we hit the sky without intercepting the terrain?\n    float pgt = rayMarch(pp, pr, 0.05, 0.05); \n\n    // We sample the height of the terrain at this point to later determine if we should render a boat\n    float sh = lohf(pp.xz);\n\n    if (pgt < max_dist) {\n      // We hit something but we smooth the amount we absorb the reflection\n      // by the distance. It's not realistic but it looks somewhat better to me.\n      pfre *= 0.125*smoothstep(2., 4., pgt);\n    }\n    \n    float fdif = max(dot(pn, sunDir), 0.0);\n    // The reflected sky adjusted for the fresnel effect\n    col = render0(pp, pr)*pfre;\n    col += fdif*skyCol*sf;  // The diffuse color\n\n    // The water absorbation factor which fades out the sand color    \n    vec3 wfo = exp(-8.0*vec3(2.0, 1.5, 2.0)*(terraint-watert));\n\n    // Compute repeating boat coordinates\n    float sz = pp.z;\n    sz *= 0.5;\n    float sn = floor(sz);\n    sz = fract(sz);\n    float sf = smoothstep(0.5, 0.0, sz);\n    // Adjust the distance to the boat path depending on the cam path\n    // to make them follow the path\n    float sd = abs(0.4*sin(1234.5*sn)+pp.x+cam_path(pp.z).x);\n\n    // The depth factor ensures we don't see both when water too shallow\n    // Fine tuned value\n    float df = smoothstep(0.2, 0.18, sh);\n\n    // Center boat foam\n    col += sf*5E-7*df/max(sd*sd, 1E-6);\n    // Spreading boat foam\n    col += sf*mix(1E-4, 1E-7, sf)*df/max(sd*sd, mix(5E-4, 1E-6, sf));\n\n    // Undersea sand col adjusted for sun\n    col += wfo*sandCol*sdif;\n    // Undersea sand adjusted for sky\n    col += wfo*sandCol*sbdif;\n\n  } else if (terraint < max_dist) {\n    // Reflect both hi and lo rest normal\n    vec3 hir = reflect(rd, hin);\n    vec3 lor = reflect(rd, lon);\n    \n    // Compute fresnel effect, which is that the more steep we hit the ground\n    // surface the more it reflects\n    // Inspired by real life but not using \"proper\" math\n    // Ground is not very reflective so we multiple gfre by itself a few times\n    // fine-tuned\n    float gfre = 1.0+dot(rd, hin);\n    gfre *= gfre;\n    gfre *= gfre;\n    gfre *= gfre;\n\n    // Snow fresnel effect, snow is more reflective\n    float sfre = 1.0+dot(rd, lon);\n    sfre *= sfre;\n\n    // Specular light for ground and snow\n    //  Pow by 40 spreads light more than 100\n    float gspe = pow(max(dot(sunDir, hir), 0.0), 100.0);\n    float sspe = pow(max(dot(sunDir, lor), 0.0), 40.0);\n\n    if (gp.y > mix(0.25, 0.55, 0.5+0.5*sin(gp.z+1.23*gp.x))+0.6/max(sqrt(hin.y), 0.1)) {\n      // Snow\n      // The complicated if expression allow lets snow layer wave up and down and adjust\n      // the snow height for the normal. More steep terain means less snow\n      \n      // Diffuse light\n      col += sdif;\n      // Add the sky col\n      col += 1.75*sqrt(skyCol);\n      // And the specular light\n      col += sfre*sspe*10.0*sqrt(sunCol);\n      // Then some hack to make snow seem more bluish and interesting\n      col += -0.25*abs(lon.x*lon.y);\n    } else if (gp.y < beachLevel) {\n      // The beach adjusted for sun and sky diffuse light\n      col += 2.0*sandCol*sdif;\n      col += 2.0*sandCol*sbdif;\n    } else {\n      // Finally the mountain color\n      // What follows is a hack to hilight colors to the mountain colors \n      // to make it more interesting\n      vec3 hp = gp;\n      // Compute cell id\n      vec3 hn = floor(hp);\n      // Compute a random number per cell\n      float hh = hash1(hn.xz);\n      // Create cell coordinate\n      hp = fract(hp);\n      hp *= pi;\n      // Create cell height \n      float gh = sin(hp.x)*sin(hp.y)*sin(hp.z);\n      gh *= gh;\n      // Use cell random number to modify it's amplitude\n      hh *= hh;\n      hh *= hh;\n      float lh = 0.5+0.5*sin(3.0*gp.x)*sin(7.0*gp.y)*cos(11.0*gp.z);\n      // Let ground color change slowly depending the position\n      vec3 gcol = mix(groundCol0, groundCol1, lh);\n      // Add random hilights      \n      gcol = mix(gcol, groundCol2, tanh_approx(40.0*hh*gh*sf));\n      // Compute mineral lines\n      // All off this is fine tuned and experimented until good enough to click publish\n      float gb0 = gp.y+0.3*gp.x+0.2*gp.z;\n      gb0 *= 10.0;\n      // Sine ways combined gives a pretty decent pseudo random distribution\n      float gb1 = 0.5+0.5*sin(11.1*gb0)*sin(23.3*gb0)*sin(43.5*gb0);\n      gb1 *= gb1;\n      // Finally adjust lightness depending on the mineral line factor\n      gcol *= 1.+gb1;\n      \n      // Diffuse color\n      col += gdif*gcol;\n      // and diffuse color from sky\n      col += 0.2*bdif*gcol;\n      // And some speculare light\n      col += gfre*gspe;\n    }\n\n    // Compute tree line, the flatter the surface the height the tree line\n    float tline = mix(beachLevel, treeLevel, lon.y*lon.y*lon.y); \n\n    if (gp.y < tline && gp.y > waterLevel) {\n      float vc;\n      float vh;\n      // Compute the tree normal which is based on voronoi pattern\n      vec3 vn = treenormal(gp.xz, 3.0*norm_off, vc, vh);\n      // Use the cell factor to determine tree col\n      // Most cells are green but some are yellowish\n      // TBH I don't think I succeed here but in the \"morning light\" it looks good enough for now\n      vec3 treeCol = mix(treeCol0, treeCol1, step(vc, 0.125))*mix(0.125, 1.0, vh);\n      // Diffuse coloring\n      vec3 tcol = max(dot(sunDir, vn), 0.0)*treeCol*sf;\n      tcol += 0.5*max(dot(skyDir, vn), 0.0)*treeCol*skyCol;\n      // Fade out the tree line both to the beach line and tree line\n      col = mix(col, tcol, smoothstep(tline, tline-0.05, gp.y)*smoothstep(beachLevel-0.0033, beachLevel, gp.y));\n    }\n    \n  } else {\n    col = sky;\n  }\n  \n  if(cloudt > 0.0 && cloudt < terraint) {\n    // applies fake fog. Uses the terrain height at the point of interception off the\n    // cloud layer to determine how much fog. Fine tuned and tinkered with\n    col = mix(mistCol, col, exp(-2.0*max(ch-minh*0.3, 0.0)*(terraint-cloudt)));\n  }\n\n  col = mix(sky, col, fm);\n\ncol *= smoothstep(0.5, 10., TIME-10.0*(1.0-dot(sunDir, rd)));\n  \n  return col;\n}\n\nvec3 effect(vec2 p) {\n  const mat2 rot = ROT(radians(-20.0));\n\n  float t = TIME*0.5;\n  // The eye position\n  vec3 ro   = cam_path(t);\n  // This will be the direction we look\n  vec3 dro  = dcam_path(t);\n  // And this will adjust the camera tilt, fine-tuned again\n  vec3 ddro = ddcam_path(t);\n  // Look down \n  dro.zy *= rot;\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0)+2.0*ddro, ww));\n  vec3 vv = (cross(ww, uu));\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.0*ww);\n\n  vec3 col = render1(ro, rd);\n  col -= 5E-3*vec3(1.0, 2.0, 1.0)*(dot(p, p)+0.25);\n  // To saturate the image a bit\n  col = aces_approx(col);\n  // So aces_approx remove glare. But I do want some glare in the\n  // sun so multiple by 1.33. Fine tuned again!\n  col *= 1.33;\n  // Fake sRGB conversion\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.0+2.0*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p);\n  fragColor = vec4(col, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}