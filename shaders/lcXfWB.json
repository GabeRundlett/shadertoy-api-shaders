{
    "Shader": {
        "info": {
            "date": "1724272507",
            "description": "https://glslsandbox.com/e#60577.0",
            "flags": 0,
            "hasliked": 0,
            "id": "lcXfWB",
            "likes": 1,
            "name": "spiral rotate",
            "published": 3,
            "tags": [
                "fractal",
                "spiral",
                "rotate"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 83
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)cos((h)*6.3+vec3(0,23,21))*.5+.5\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdHexagon(vec2 p, float r)\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\nfloat square(vec2 uv, float d) {\n\treturn max(abs(uv.x), abs(uv.y)) - d;\t\n}\n\nfloat smootheststep(float edge0, float edge1, float x)\n{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0) * 3.14159265;\n    return 0.5 - (cos(x) * 0.5);\n}\n#define time iTime\n#define resolution iResolution.xy\n\nconst float PI = 3.14159265;\n\nvec2 rotate(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA); \t\n}\n\n\nvec3 getColorFromTime( float time)\n{\n\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= resolution.x / resolution.y;\n\tuv *= 1.5;\n\t\n    \tfloat blurAmount = -0.005 * 1000.0 / resolution.y;\n    \n\tfloat btime = mod(time, 1.0);\n\tbtime = smootheststep(0.0, 1.0,  btime);\n\t\n\tvec3 returnVal = vec3(.0);\n\t\n\t\n\tfor (int i = 0; i < 30; i++) {\n\t\tfloat n = float(i);\n\t\tfloat size = 1.0 - n / 9.0;\n\t\tfloat rotateAmount = (n * 0.5 + 0.25) * PI * 2.0; \n\t\treturnVal = mix(returnVal, vec3(1.0), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * btime), size)));\n\t\tfloat blackOffset = mix(1.0 / 4.0, 1.0 / 2.0, n / 9.0) / 9.0;\n\t\treturnVal = mix(returnVal, vec3(0.0), smoothstep(0.0, blurAmount, square(rotate(uv, -(rotateAmount + PI / 2.0) * btime), size - blackOffset)));\n    }\nreturn returnVal;\n}\n\n\n\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec3 p,r=iResolution,\n    d=normalize(vec3((C-.5*r.xy)/r.y,1));  \n    \n    float period = 5.0;\n\tfloat btime = (time*1.2);\n\n\tvec3 mainVal \t= getColorFromTime(iTime*0.1);\n\tvec3 SecondVal \t= getColorFromTime(iTime -.005);\n\tvec3 ThirdVal \t= getColorFromTime(iTime -.01);\n\tvec3 FirstMixInter =ThirdVal;\n\tvec3 SecondMixInter =  ThirdVal;\n\t\n\tvec3 FirstMix = mix ( mainVal, FirstMixInter, .1 );\n\tvec3 SecondMix = mix ( mainVal, SecondMixInter, .1 );\n\t\n\t\n    float i=0.,g=0.,e,s;\n    for(;++i<99.;){\n        p=d*g;\n        \n        p=R(p,vec3(1),.0);\n        p.z+=iTime*.2;\n        p=asin(sin(p*4.));\n        float sdf=sdHexagon(p.xy,2.);\n        p.xy=vec2(sdf)*SecondMixInter.xz ;\n        s=3.;\n        for(int i=0;i++<6;){\n\t\t\tp=vec3(3.2,6.8,5.2)-abs(p-vec3(3.4,4.8,2.4));            \t\t\t\n          \tp=p.x<p.y?p.zxy:p.zyx;\n            s*=e=17.8/min(dot(p,p),11.8);\n            p=abs(p)*e;\n        }\n        g+=e=abs(p.y)/s+.001;\n        O.xyz+=(H(log(s)*.8)+.5)*exp(sin(i))/e*3e-5;\n    }\n    O*=O*O*O;\n \n\tO*= vec4( O.r, mix (mainVal, mix( SecondVal, ThirdVal, 0.25), .00030 ).x, O.b, 1.);\n }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}