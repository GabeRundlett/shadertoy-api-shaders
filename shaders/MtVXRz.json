{
    "Shader": {
        "info": {
            "date": "1482623374",
            "description": "Mouse Y to change the number of sides in the polygon, Mouse X to change the table. Table changes with time as well. Check [url]https://www.shadertoy.com/view/XtcSRr[/url] for another exemple.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtVXRz",
            "likes": 16,
            "name": "Multiplication Tables Mandalas",
            "published": 3,
            "tags": [
                "2d",
                "modulo",
                "multiplication"
            ],
            "usePreview": 0,
            "username": "Klems",
            "viewed": 916
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nvec3 hsv2rgb( in vec3 c ) {\n    float frac = fract(c.x)*6.0;\n    vec3 col = smoothstep(vec3(3,0,3),vec3(2,2,4),vec3(frac));\n    col += smoothstep(vec3(4,3,4),vec3(6,4,6),vec3(frac)) * vec3(1, -1, -1);\n    return mix(vec3(1), col, c.y) * c.z;\n}\n\nfloat sdCapsule( vec2 p, vec2 a, vec2 b, float r ) {\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\n#define N 360\n\nfloat radius(float theta, float n) {\n    theta += PI;\n    return cos(PI/n)/cos(theta-2.0*PI/n*floor((n*theta+PI)/(2.0*PI)));\n}\n\nvec2 getPos(float n, float poly) {\n    float theta = n / float(N) * 2.0 * PI;\n    return vec2(cos(theta), sin(theta)) * radius(theta, poly);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 0.55;\n    uv.xy = uv.yx;\n    \n    fragColor.rgb = vec3(0);\n    fragColor.a = 1.0;\n    \n    // number of polygons\n    float poly = 3.0 + floor((iResolution.y-iMouse.y) * 0.05);\n    \n    // f table\n    float f = floor(iTime)*poly+1.0;\n    if (iMouse.z > 0.0) f = floor(iMouse.x * 0.1);\n    \n    // change size on polygon size\n    float top = radius(0.0, poly);\n    float bot = -radius(PI, poly);\n    float scale = top - bot;\n    uv *= scale;\n    uv.x += (top + bot) * 0.5;\n    \n    float acc = 0.0;\n    \n    // optimize a bit\n    float theta = atan(uv.y, uv.x);\n    float dist = length(uv) - radius(theta, poly);\n    if (dist > 0.0) {\n        acc = 1.0;\n    } else {\n        for (int i = 0 ; i <= N ; i++) {\n            float fi = float(i);\n            vec2 a = getPos(fi, poly);\n            vec2 b = getPos(fi*f, poly);\n            float dist = sdCapsule(uv, a, b, 0.0);\n            acc += exp(-dist*100.0);\n        }\n\n        acc *= 70.0;\n        acc /= float(N);\n        acc = mix(acc, 1.0, smoothstep(-0.05, 0.0, dist));\n    }\n    \n    fragColor.rgb = hsv2rgb( vec3( acc*4.0, 1.0-acc, 1.0-acc));\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}