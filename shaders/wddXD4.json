{
    "Shader": {
        "info": {
            "date": "1572282005",
            "description": "I'm not sure if you should eat that",
            "flags": 0,
            "hasliked": 0,
            "id": "wddXD4",
            "likes": 7,
            "name": "Shadertober 25 - Tasty",
            "published": 3,
            "tags": [
                "tasty",
                "inktober",
                "shadertober",
                "backwardscaptain"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 364
        },
        "renderpass": [
            {
                "code": "vec3 spp(vec3 p, float ap)\n{    \n    float apr = 50.;\n    float yr = 100.;\n    float dy = iTime*5.-p.y*60.;\n    float dx = iTime*10.+p.y*50.*cos(iTime/3.);\n    return (p+(vec3(cos(200.+dy+(p.y+10.)*yr),0.,cos(-100.+dy+(p.y+10.)*yr))*\n               vec3(cos(dx+ap*apr),0.,cos(dx+ap*apr)))/60.)/(vec3(1,1.01-p.y,1));\n}\n\nfloat leaf(vec3 p, float s)\n{\n    vec3 o = vec3(.3,0,0);\n    float c1 = cyl(p+o,s,.01);\n    float c2 = cyl(p-o,s,.01);\n    return max(c1,c2);\n}\n\nvec2 map(vec3 p)\n{\n    float m=0.,r;\n    \n    p.y-=.15;\n\n    vec3 sp = (p-vec3(0,.008,0.))/(vec3(1,.99-p.y,1));\n\n    float ap = atan(sp.z,sp.x);    \n    \n    vec3 sps = spp(p,ap);\n    vec3 spss = spp(p,ap+.31);\n    \n    float sb = length(sp)-.5;\n    float sbs = length(sps)-.49;\n    float sbss = length(spss)-.42;\n    \n\n    sb=smin(sb,sbss,.11);\n    \n    vec3 lp = p;\n    lp.y+=(lp.x*lp.z)/2.+.005;\n    lp.xz*=rot(iTime/8.*PI);\n    lp.xz=abs(lp.xz);\n\tfloat c =leaf(lp-vec3(0.,.345,0.25),.5);\n    lp.xz*=rot(PI/3.);\n    c=min(c,leaf(lp-vec3(0.,.345,0.25),.5));\n    \n    c*=.55;\n    sbs*=.6;\n    \n    r = min(sb,sbs);\n    r=min(r,c);\n    \n    if(r==sb)m=1.;\n    else if(r==sbs)m=2.;\n    else if(r==c)m=3.;\n    \n    return vec2(r,m);\n}\n\nvec2 ray(vec3 ro, vec3 rd)\n{\n    float t=0., m=0.;\n    for(int i=0;i<128;i++)\n    {\n        vec3 p = ro+rd*t;\n        vec2 s = map(p);\n        m=s.y;\n        if(s.x<0.000001)break;\n        t+=s.x;\n        if(t>MAX_DIST){t=-1.;break;}\n    }\n    return vec2(t,m);\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(0.00005,0.);\n    return normalize(vec3(\n        map(p+e.xyy).x-map(p-e.xyy).x,\n        map(p+e.yxy).x-map(p-e.yxy).x,\n        map(p+e.yyx).x-map(p-e.yyx).x\n        ));\n}\n\nvoid mainImage( out vec4 c, in vec2 f )\n{\n    vec2 uv = (2.*f-iResolution.xy)/iResolution.y;\n    \n    float x = PI+iMouse.x/100.;\n\tfloat d = 2.5;\n    \n\n    vec3 ro = vec3(sin(x)*d,-.25,cos(x)*d);\n    vec3 ta = vec3(0);\n    vec3 rd = cam(ro,ta,uv);\n\n    vec2 r = ray(ro,rd);\n\tfloat auv = atan(uv.y,uv.x);\n    vec3 col =vec3(1.,0.,0.)*(.5+smoothstep(0.,1.,cos(auv*20.+iTime*2.)));  \n    if(r.x>0.)\n    {\n        vec3 p = ro+rd*r.x;\n        vec3 n = normal(p);\n        \n        vec3 mate = vec3(0.5);\n        \n        if(r.y==1.)mate=vec3(1.,0.1,0.1);\n        else if(r.y==2.)mate=vec3(.6,1.2,0.1);\n        else if(r.y==3.)mate=vec3(0,.8,0);\n        \n        vec3 sun = normalize(vec3(0.2,0.35,-0.6));\n        float dif = clamp(dot(sun,n),0.,1.);\n        float sky = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.,1.)*.5;\n        float bou = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.,1.)*.5;\n        float sha = step(ray(p+n*0.01,sun).x,0.);\n        \n        vec3 bou_col = vec3(0.2,0.3,0.4);\n        vec3 sky_col = vec3(0.2,0.2,0.3);\n        vec3 sun_col = vec3(0.4,0.2,0.2);\n        \n        col =mate*dif*sun_col*2.*sha;\n        col+=mate*sky_col*sky;\n        col+=mate*bou_col*bou;\n    }\n    \n    c.rgb=col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_DIST 10.0\n#define PI 3.1415927\n\nmat2 rot(float x)\n{\n    float s = sin(x);\n    float c = cos(x);\n    return mat2(c,-s,s,c);\n}\n\n//thanks to iq for sharing this knowledge on his website\nfloat cyl(vec3 p, float h, float r)\n{\n    vec2 x = abs(vec2(length(p.xz),p.y))-vec2(h,r);\n    return length(max(x,0.0))+min(max(x.x,x.y),0.0);\n}\n\nfloat smin(float d1, float d2, float k)\n{\n    float h = clamp(0.5+0.5*(d2-d1)/k,0.0,1.0);\n    return mix(d2,d1,h)-k*h*(1.0-h);\n}\n\nvec3 cam(vec3 ro, vec3 ta, vec2 uv)\n{\n    vec3 cf = normalize(ta-ro);\n    vec3 cu = normalize(cross(cf,vec3(0,1,0)));\n    vec3 cr = normalize(cross(cu,cf));\n    return normalize(uv.x*cu+uv.y*cr+2.*cf);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}