{
    "Shader": {
        "info": {
            "date": "1679737922",
            "description": "CC0: Saturday truchet tinkering\nResult of a little bit of tinkering with truchets\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mstSD8",
            "likes": 34,
            "name": "CC0: Saturday truchet tinkering",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "// CC0: Saturday truchet tinkering\n//  Result of a little bit of tinkering with truchets\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n//#define SHOW_GRID  \n\nconst float a  = 20.0;\nconst float lw = 0.05;\nconst float zz = 1.0-0.75;\nconst mat2 rots[4] = mat2[](\n    ROT(0.0*TAU/4.0)\n  , ROT(1.0*TAU/4.0)\n  , ROT(2.0*TAU/4.0)\n  , ROT(3.0*TAU/4.0)\n  );\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat cross_(vec2 pos, float he) {\n  pos = abs(pos);\n  pos = vec2(abs(pos.x-pos.y),1.0-pos.x-pos.y)/sqrt(2.0);\n\n  float p = (he-pos.y-0.25/he)/(6.0*he);\n  float q = pos.x/(he*he*16.0);\n  float h = q*q - p*p*p;\n    \n  float x;\n  if( h>0.0 ) { float r = sqrt(h); x = pow(q+r,1.0/3.0)-pow(abs(q-r),1.0/3.0)*sign(r-q); }\n  else        { float r = sqrt(p); x = 2.0*r*cos(acos(q/(p*r))/3.0); }\n  x = min(x,sqrt(2.0)/2.0);\n    \n  vec2 z = vec2(x,he*(1.0-2.0*x*x)) - pos;\n  return length(z) * sign(z.y);\n}\n\nfloat ref(inout vec2 p, vec2 r) {\n  float d = dot(p, r);\n  p -= r*min(0.0, d)*2.0;\n  return d < 0.0 ? 0.0 : 1.0;\n}\n\nfloat cell00(vec2 cp) {\n  vec2 p0 = cp;\n  p0 = abs(p0);\n  p0 -= 0.5;\n  vec2 p2 = cp;\n  const float zc = 0.2;\n  p2 /= zc;\n  float d0 = length(p0)-1.0/3.0;\n  float d1 = length(p0)-lw;\n  float d2 = (cross_(p2, 0.7)-0.25)*zc;\n  float d = d0;\n  d = abs(d);\n  d -= lw;\n  d = min(d, d1);\n  d = min(d, d2);\n  return d;\n}\n\nfloat cell01(vec2 cp) {\n  vec2 p0 = cp;\n  p0.y = abs(p0.y);\n  float d0 = p0.y-(1.0/6.0+lw);\n\n  vec2 p1 = cp;\n  p1.x = abs(p1.x);\n  p1.x -= 0.5;\n  float d1 = length(p1)-(1.0/6.0-lw);\n  \n  vec2 p2 = cp;\n  float d2 = length(p2)-(1.0/6.0-lw);\n  \n  vec2 p3 = cp;\n  p3 = abs(p3);\n  p3 -= 0.5;\n  float d3 = length(p3)-lw;\n\n  vec2 p4 = cp;\n  p0.y = abs(p0.y);\n  p0.y -= 0.5;\n  float d4 = length(p0)-1.0/6.0;\n  d4 = abs(d4);\n  d4 -= lw;\n  \n  float d = d0;\n  d = max(d, -d1);\n  d = max(d, -d2);\n  d = min(d, d3);\n  d = min(d, d4);\n  return d;\n}\n\nfloat cell12(vec2 cp) {\n  vec2 p0 = cp;\n  ref(p0, normalize(vec2(1.0)));\n  p0 -= 0.5;\n  float d0 = length(p0)- lw*3.0;\n  vec2 p1 = cp;\n  float d1 = dot(normalize(vec2(1.0)), p1);\n  d1 = abs(d1);\n  d1 -= lw*3.0*sqrt(0.5);\n  float d = d0;\n  d = min(d, d1);\n  return d;\n}\n\n\nvec3 effect(vec2 p, vec2 pp) {\n  p /= zz;\n  p += a*sin(vec2(1.0, sqrt(0.5))*(TIME+100.0)*TAU/a/5.0);\n  p *= ROT(-PI/8.0);\n  vec2 cp0 = p;\n  vec2 np0 = round(p);\n  cp0 -= np0;\n\n  float h0 = hash(np0+123.4);\n  float h1 = fract(3667.0*h0);\n  float h2 = fract(8667.0*h0);\n\n  cp0 *= rots[int(4.0*h1)];  \n\n  float d0 = 1E6;\n  float d2 = 1E6;\n  if (h0 > 1.0/3.0) {\n    if (h2 > 2.0/3.0) {\n      d0 = cell00(cp0);\n    } else {\n      d0 = cell01(cp0);\n    }\n  }\n  else\n  {\n    const float iz = 1.0/3.0;\n    vec2 cp1 = cp0;\n    cp1 /= iz;\n    vec2 np1 = round(cp1);\n    cp1 -= np1;\n\n    vec2 p3 = cp1;\n    p3 = -abs(p3);\n    d2 = min(p3.x+0.5, p3.y+0.5);\n    d2 *= iz;\n    d2 = abs(d2)-0.01;\n\n    float h10 = hash(np1+123.4);\n    cp1 *= rots[int(4.0*h10)];  \n    d0 = cell12(cp1)*iz;\n  }\n  \n  vec2 p1 = cp0;\n  p1 = -abs(p1);\n  float d1 = min(p1.x+0.5, p1.y+0.5);\n  d1 = abs(d1)-0.01;\n  float d = d0;\n  d *= zz;\n  float aa = 4.0/RESOLUTION.y;\n  vec3 col = vec3(0.01);\n  col = mix(col, vec3(0.5), smoothstep(0.0, -aa, d));\n#ifdef SHOW_GRID\n  col = mix(col, vec3(0.5, 0.0, 0.0), smoothstep(0.0, -aa, d1));\n  col = mix(col, vec3(0.0, 0.0, 0.5), smoothstep(0.0, -aa, d2));\n#endif  \n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}