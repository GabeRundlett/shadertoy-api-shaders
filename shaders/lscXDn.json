{
    "Shader": {
        "info": {
            "date": "1458677215",
            "description": "regular triangular grid. vertices and lines settings are controllable separately.",
            "flags": 0,
            "hasliked": 0,
            "id": "lscXDn",
            "likes": 30,
            "name": "Triangular Grid",
            "published": 3,
            "tags": [
                "2d",
                "triangle",
                "hexagon",
                "tiling",
                "hex"
            ],
            "usePreview": 0,
            "username": "seb0fh",
            "viewed": 3095
        },
        "renderpass": [
            {
                "code": "/*\n\tTriangular Grid\n\t03/2016\n\tseb chevrel\n*/\n\n#define PI 3.1415926535897\n\n// triangle rotation matrices\nconst vec2 v60 = vec2( cos(PI/3.0), sin(PI/3.0));\nconst vec2 vm60 = vec2(cos(-PI/3.0), sin(-PI/3.0));\nconst mat2 rot60 = mat2(v60.x,-v60.y,v60.y,v60.x);\nconst mat2 rotm60 = mat2(vm60.x,-vm60.y,vm60.y,vm60.x);    \n\nfloat triangleGrid(vec2 p, float stepSize,float vertexSize,float lineSize) \n{\n    // equilateral triangle grid\n    vec2 fullStep= vec2( stepSize , stepSize*v60.y);\n    vec2 halfStep=fullStep/2.0;\n    vec2 grid = floor(p/fullStep);\n    vec2 offset = vec2( (mod(grid.y,2.0)==1.0) ? halfStep.x : 0. , 0.);\n   \t// tiling\n    vec2 uv = mod(p+offset,fullStep)-halfStep;\n    float d2=dot(uv,uv);\n    return vertexSize/d2 + // vertices \n    \tmax( abs(lineSize/(uv*rotm60).y), // lines -60deg\n        \t max ( abs(lineSize/(uv*rot60).y), // lines 60deg\n        \t  \t   abs(lineSize/(uv.y)) )); // h lines\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*0.1;\n    \n    // screen space\n\tvec2 uv = fragCoord.xy / iResolution.xx -vec2(0.5,0.5*iResolution.y/iResolution.x);  \n    \n    //uv=vec2(uv.y,-uv.x);\n    vec2 uv2 = (uv+vec2(time,time*0.3));\n    \n    vec3 color = triangleGrid(uv2,0.1,0.00005,0.001)*vec3(0,1,0);\n    \n    // output\n\tfragColor = vec4(  color ,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}