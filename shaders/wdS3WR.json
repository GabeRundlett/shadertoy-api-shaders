{
    "Shader": {
        "info": {
            "date": "1548628850",
            "description": "It's not at all what I wanted to do. But still look good I think.",
            "flags": 1,
            "hasliked": 0,
            "id": "wdS3WR",
            "likes": 6,
            "name": "Bloody drain",
            "published": 3,
            "tags": [
                "blood",
                "drain"
            ],
            "usePreview": 0,
            "username": "xjorma",
            "viewed": 682
        },
        "renderpass": [
            {
                "code": "// Created by David Gallardo - xjorma/2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\n//#define AA\n\nfloat hyperbolaV(float v)\n{\n    return -2./v;\n}\n\nfloat hyperbolaD(float v)\n{\n    return 2./(v*v);    \n}\n\nfloat hyperbolaDist(vec2 pos)   // Using Newton approximation\n{\n\tfloat\tcurX = pos.x;\n    for(int i=0; i<10 ; ++i)\n    {\n        vec2\tp = vec2(curX,hyperbolaV(curX));\n        vec2\td = normalize(vec2(curX,hyperbolaD(curX)));\n        float\tproj = dot(d,(pos-p))*d.x;\n        curX += proj;\n        if(abs(proj) < 0.002) break;\n    }\n    vec2\tp = vec2(curX,hyperbolaV(curX));\n    float\ts = sign(pos.y - p.y);   \n    return  s*length(pos - p);\n}\n\nfloat map(in vec3 pos)\n{\n    float hd = length(pos.xz);\n    \n    float wave = sin(hd*10.+iTime*7.+atan(pos.z,pos.x)*6.)*0.06;\n\n    float dist = hyperbolaDist(vec2(hd,pos.y));\n\n    return min(dist+wave,10.);\n}\n\n\nvec3 calcNormal(vec3 pos)\n{\n    vec2\teps\t= vec2(0.01,0);\n\tfloat\td\t= map(pos);\n\treturn\tnormalize(vec3(map(pos+eps.xyy)-d,map(pos+eps.yxy)-d,map(pos+eps.yyx)-d));\n}\n\nvec3 applyFog(vec3 rgb,float distance, vec3 fogColor)\n{\n    float fogAmount = 1.0 - exp( -distance*0.2 );\n    return mix( rgb, fogColor, fogAmount );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 up = vec3(0, 1, 0);\n\tvec3 cu = normalize( cross(cw,up) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec3 Render(vec3 ro,vec3 rd,vec3 cd,float dist)\n{\n    float t = 1.0;\n    float d;\n    for( int i=0; i<64; i++ )\n    {\n        vec3\tp = ro + t*rd;\n        float\th = map(p);\n        t += h*0.7;\n        d = dot(t*rd,cd);\n        if( abs(h)<0.001 || d>dist ) break;\n    }\n\n    vec3 col = vec3(0.0);\n\n    if( d<dist )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        vec3 reflected=reflect(rd,nor);\n        vec3 env = texture(iChannel0,reflected).xyz;\n\t\tcol = vec3(nor.y)*vec3(1,0.1,0.1)+env*0.1;\n\t\tcol = applyFog(col,d,vec3(0));\n    }\n    return col;\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n    fragColor = vec4(Render(ro/3. + vec3(0.0,.0,4.0),rd ,rd,14.) ,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 tot = vec3(0.0);\n        \n#ifdef AA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; ++n )\n    {\n        // pixel coordinates\n        vec2 o = rook[n];\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else //AA\n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif //AA\n \n        // camera\t\n        vec3 ro = 4.*vec3( sin(0.01*iMouse.x), 0.2 , cos(0.01*iMouse.x) );\n        //vec3 ro = vec3(0.0,.2,4.0);\n        vec3 ta = vec3( 0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta );\n        //vec3 cd = ca[2];    \n        \n        vec3 rd =  ca*normalize(vec3(p,1.0));        \n        \n        vec3 col = Render(ro ,rd ,ca[2],12.);\n\n\t    tot += col;\n#ifdef AA\n    }\n    tot /= 4.;\n#endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}