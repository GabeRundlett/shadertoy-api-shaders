{
    "Shader": {
        "info": {
            "date": "1606993313",
            "description": "Try to stay on the road :)",
            "flags": 32,
            "hasliked": 0,
            "id": "wsGBDh",
            "likes": 20,
            "name": "Truck Driving",
            "published": 3,
            "tags": [
                "game",
                "interactive",
                "car",
                "kinematics",
                "cyber"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 561
        },
        "renderpass": [
            {
                "code": "// \"Truck Driving\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Knob controls speed and steering; on-track driving distance shown; view direction\n  different at high elevation; mouseable.\n*/\n\n#define AA  0   // (=0/1) optional antialiasing (can be slow)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat Minv2 (vec2 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val);\nfloat Hashfv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nvec3 sunDir, qHit, carPos, wlBase;\nvec2 wlRot;\nfloat dstFar, tCur, wlRad, carRot, strRot, hgSize, trWidf;\nint idObj;\nconst int idBod = 1, idAx = 2, idBas = 3, idWhl = 4, idStr = 5, idSeat = 6;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec4 ra;\n  vec3 q;\n  float dMin, d, ds1, ds2, ds3;\n  ra = vec4 (-0.08, -0.012, 0.37, -0.42) * pi;\n  p.y -= carPos.y;\n  p.xz = Rot2D (p.xz, carRot);\n  p.z -= wlBase.z;\n  dMin = dstFar;\n  q = p;\n  ds1 = max (Rot2D (q.yz, ra.z).y - 1.03, - Rot2D (q.yz, ra.w).y - 0.75);\n  ds2 = Rot2D (abs (vec2 (q.x, q.y + 0.18)), ra.x).x - 1.3;\n  ds3 = max (Rot2D (vec2 (q.y, abs (q.z)), ra.y).y - 3., ds1);\n  d = max (max (abs (q.y - 0.1) - 1., ds2), ds3);\n  d = max (d, - PrBoxDf (p - vec3 (0., 0.2, -2.), vec3 (1.08, 0.4, 0.9)));\n  d = max (d, - PrCylDf (((vec3 (abs (q.xz) - wlBase.xz, q.y + wlRad + 0.35)).xzy).yzx,\n     wlRad + 0.06, 0.5));\n  d = max (d, - max (max (max (abs (q.y - 0.48) - 0.35, abs (q.z - 0.5) - 1.5), ds1 + 0.05),\n     0.08 - abs (q.z - 0.5)));\n  d = max (d, - max (ds2 + 0.08, min (max (abs (q.y - 0.68) - 0.2, q.z - 0.5),\n     max (abs (q.y - 0.55) - 0.31, 0.5 - q.z))));\n  d = max (d, - max (max (max (max (abs (q.y - 0.2) - 0.9, ds2), ds3) + 0.06,\n     abs (q.z - 0.3) - 1.3), - max (max (length (vec2 (q.y + wlRad + 0.35, q.z - wlBase.z)) -\n     (wlRad + 0.06 + 0.02), q.z - wlBase.z), - q.y - wlRad - 0.35)));\n  DMINQ (idBod);\n  q = p;\n  q.z = abs (q.z);\n  q.yz -= vec2 (- wlRad - 0.35, wlBase.z);\n  d = PrCylDf (q.yzx, 0.08, wlBase.x);\n  DMINQ (idAx);\n  q = p;\n  q.y -= -0.88;\n  d = PrBoxDf (q, vec3 (1.3, 0.03, 1.35));\n  DMINQ (idBas);\n  q = p;\n  q = vec3 (abs (q.xz) - wlBase.xz, q.y + wlRad + 0.35).xzy;\n  if (p.z > 0.) q.xz = Rot2D (q.xz, - strRot * sign (p.x));\n  q.yz = Rot2D (q.yz, - ((p.x < 0.) ? wlRot.x : wlRot.y) * sign (p.z));\n  d = max (PrRoundCylDf (q.yzx, wlRad - 0.1, 0.1, 0.14), wlRad - 0.25 - length (q.yz));\n  d = min (d, PrCylDf (q.yzx, wlRad - 0.25, 0.2));\n  d = min (d, PrCylDf (vec3 (q.x, ((abs (q.y) < abs (q.z)) ? q.yz : q.zy)) - vec3 (0.17, 0., 0.),\n     0.07, wlRad - 0.2));\n  DMINQ (idWhl);\n  q = p;\n  q.yz = Rot2D (q.yz - vec2 (0.72, 0.2), -0.1 * pi);\n  q -= vec3 (-0.5, -0.3, 1.5);\n  d = PrRoundCylDf (q, 0.03, 0.03, 0.35);\n  q.z -= -0.35;\n  q.xy = Rot2D (q.xy, -8. * strRot + pi / 6.);\n  q.xy = Rot2D (q.xy, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n  d = min (d, PrTorusDf (q, 0.025, 0.35));\n  q.x += 0.17;\n  d = min (d, PrCylDf (q.yzx, 0.02, 0.17));\n  DMINQ (idStr);\n  q = p;\n  q.yz -= vec2 (-0.4, 0.5);\n  d = PrBoxDf (q, vec3 (1., 0.1, 0.35));\n  q.yz = Rot2D (q.yz - vec2 (0.4, -0.43), 0.1 * pi);\n  d = min (d, PrBoxDf (q, vec3 (1., 0.35, 0.05)));\n  DMINQ (idSeat);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar || p.y < 0.) break;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec4 ra;\n  vec3 q;\n  float ds1, ds2, ds3;\n  ra = vec4 (-0.08, -0.012, 0.37, -0.42) * pi;\n  p.y -= carPos.y;\n  p.xz = Rot2D (p.xz, carRot);\n  p.z -= wlBase.z;\n  q = p;\n  ds1 = max (Rot2D (q.yz, ra.z).y - 1.03, - Rot2D (q.yz, ra.w).y - 0.75);\n  ds2 = Rot2D (abs (vec2 (q.x, q.y + 0.18)), ra.x).x - 1.3;\n  ds3 = max (Rot2D (vec2 (q.y, abs (q.z)), ra.y).y - 3., ds1);\n  return max (max (ds2 + 0.03, ds3 + 0.02), max (abs (q.z - 0.5) - 1.55, - q.y - 0.2));\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    p = ro + dHit * rd;\n    d = TrObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec4 CarCol (out float refFac)\n{\n  vec4 col4, colB4;\n  float r, s;\n  colB4 = vec4 (0.9, 0.3, 0.3, 0.2);\n  col4 = colB4;\n  if (idObj == idBod) {\n    s = 1.;\n    if (qHit.z < - 2.98 && PrRoundBox2Df (qHit.xy + vec2 (0., 0.1), vec2 (1.2, 0.), 0.05) < 0.)\n       col4 = vec4 (1., 0., 0., -1.);\n    else if (qHit.z > 2.98 && PrRoundBox2Df (qHit.xy + vec2 (0., 0.25), vec2 (1.2, 0.), 0.05) < 0.)\n       col4 = vec4 (1., 1., 0.8, -1.);\n    else if (qHit.z > 2.8 && PrRoundBox2Df (qHit.xy + vec2 (0., 0.5), vec2 (0.78, 0.15), 0.01) < 0.)\n       s = 0.7 + 0.3 * step (0.2, cos (8. * pi * qHit.x));\n    else if (qHit.y > -0.5 && abs (qHit.x) < 1.05 && abs (qHit.z + 2.) < 0.85)\n       s = 1. - 0.1 * cos (16. * pi * qHit.x);\n    else s = 0.6 + 0.4 * step (-0.75, qHit.y) * step (0., max (abs (qHit.y) - 0.85,\n       abs (qHit.z - 0.5) - 0.01)) *\n       step (0., max (abs (qHit.y + 0.09) - 0.3, abs (qHit.z - 2.) - 0.01)) *\n       step (0., max (abs (qHit.y + 0.15) - 0.6, abs (qHit.z + 1.) - 0.01));\n    s *= 0.5 + 0.5 * step (wlRad + 0.07, length (vec2 (qHit.y + wlRad + 0.35,\n       abs (qHit.z) - wlBase.z)));\n    col4.rgb *= s;\n  } else if (idObj == idAx) {\n    col4 = vec4 (0.3, 0.3, 0.4, 0.1);\n  } else if (idObj == idBas) {\n    col4.rgb *= 0.4;\n  } else if (idObj == idWhl) {\n    r = wlRad - length (qHit.yz);\n    if (r < 0.22) col4 = vec4 (0.3, 0.3, 0.3, 0.) * (1. - 0.5 * step (r, 0.07) *\n       abs (step (0., cos (32. * pi * qHit.x)) - step (0.5, mod (32. * atan (qHit.z, - qHit.y) /\n       (2. * pi) + 0.5, 1.))));\n    else {\n      if (qHit.x > 0.205) col4 = vec4 (0.9, 0.9, 1., 0.2);\n      else if (qHit.x < 0.) col4 *= 0.5;\n    }\n  } else if (idObj == idStr) {\n    col4 = vec4 (0.9, 0.9, 0.9, 0.2);\n  } else if (idObj == idSeat) {\n    col4 = vec4 (0.9, 0.7, 0.4, 0.05) * (0.95 + 0.05 * cos (64. * qHit.x));\n  }\n  refFac = 0.;\n  if (col4 == colB4 && (qHit.y < -0.5 || PrRoundBox2Df (qHit.xz + vec2 (0., 2.),\n     vec2 (1.1, 0.95), 0.01) > 0.)) refFac = 0.12;\n  return col4;\n}\n\nvec3 GrndCol (vec3 ro, float dstGrnd, float sh)\n{\n  vec3 col, colG, vn;\n  vec2 vf, q;\n  vec2 gId;\n  float a, f, ff;\n  gId = PixToHex (ro.xz / hgSize);\n  q = Rot2D ((ro.xz - HexToPix (gId * hgSize)) / hgSize,\n     (2. * step (Hashfv2 (gId), 0.5) - 1.) * pi / 6.);\n  q = Rot2D (q, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n  q.x += 1.;\n  colG = 0.4 * mix (vec3 (0.8, 1., 0.5), vec3 (0.7, 0.9, 0.5), 0.2 +\n     0.8 * smoothstep (0.3, 0.7, Fbm2 (4. * ro.xz)));\n  vf = vec2 (0.);\n  ff = 1. - smoothstep (0.5, 0.8, dstGrnd / dstFar);\n  f = abs (length (q) - 0.5) - trWidf;\n  if (f < 0.) {\n    col = mix (vec3 (0.25) * (0.5 + 0.5 * Fbm2 (64. * ro.xz)), vec3 (0.8), f);\n    a = abs (mod (4. * (mod (15. * atan (q.y, - q.x) / (2. * pi), 1.) - 0.5) + 0.5, 1.) - 0.5) - 0.3;\n    for (float s = 1.; s >= 0.; s -= 1.) {\n      col = mix (vec3 (0.9), col, max (smoothstep (0., 0.02, a - 0.03 * s),\n         smoothstep (0., 0.002, abs (f + 0.02) - 0.005)));\n    }\n    col = mix (colG, col, ff);\n    vf = vec2 (16., 1. * (1. - 0.9 * f));\n  } else {\n    col = colG;\n    vf = vec2 (4., 1.);\n  }\n  vn = vec3 (0., 1., 0.);\n  if (vf.x > 0. && ff > 0.) vn = VaryNf (vf.x * ro, vn, vf.y * ff);\n  col *= 0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.);\n  return col;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.4, 0.5);\n  } else {\n    q = 0.01 * (ro.xz + 2. * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.3, 0.4, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 roo, rdo, col, colR, vn;\n  float dstObj, dstGrnd, dstTrObj, nDotL, refFac, sh;\n  roo = ro;\n  rdo = rd;\n  dstTrObj = TrObjRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = CarCol (refFac);\n    if (dstTrObj < dstObj) refFac = 0.;\n    if (col4.a >= 0.) {\n      nDotL = max (dot (vn, sunDir), 0.);\n      sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n      col = col4.rgb * (0.2 + 0.2 * max (dot (vn, sunDir * vec3 (-1., 1., -1.)), 0.) +\n         0.8 * sh * nDotL * nDotL) + col4.a * step (0.95, sh) *\n         pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n      if (refFac > 0.) rd = reflect (rd, vn);\n    } else if (col4.a == -1.) {\n      col = col4.rgb * (0.2 - 0.8 * dot (rd, vn));\n    }\n  }\n  if (dstObj >= dstFar || refFac > 0.) {\n    if (rd.y < 0.) {\n      dstGrnd = - ro.y / rd.y;\n      ro += dstGrnd * rd;\n      vn = vec3 (0., 1., 0.);\n      sh = (dstGrnd < dstFar) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n      colR = GrndCol (vec3 (ro.xz + carPos.xz, 0.).xzy, dstGrnd, sh);\n      colR = mix (colR, vec3 (0.3, 0.4, 0.5), pow (1. + rd.y, 16.));\n    } else {\n      colR = SkyBgCol (ro, rd);\n    }\n    col = (refFac > 0.) ? mix (col, 0.9 * colR, refFac) : colR;\n  }\n  if (dstTrObj < min (dstObj, dstFar)) {\n    ro = roo + dstTrObj * rdo;\n    vn = TrObjNf (ro);\n    col *= vec3 (0.9, 1., 0.9);\n    rd = reflect (rdo, vn);\n    col = mix (col, SkyBgCol (ro, rd), 0.2 + 0.8 * pow (1. - abs (dot (vn, rdo)), 5.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 rd, ro, col, wgBox;\n  vec2 canvas, uv, ud, cnPos;\n  float el, az, asp, zmFac, onPath, trvDist, s, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  carPos = stDat.xyz;\n  carRot = stDat.w;\n  stDat = Loadv4 (1);\n  wlBase = stDat.xyz;\n  wlRad = wlBase.y;\n  stDat = Loadv4 (2);\n  strRot = stDat.y;\n  wlRot = stDat.zw;\n  stDat = Loadv4 (3);\n  az = stDat.x;\n  el = stDat.y;\n  cnPos = stDat.zw;\n  stDat = Loadv4 (4);\n  hgSize = stDat.x;\n  trWidf = stDat.y;\n  onPath = stDat.z;\n  trvDist = stDat.w;\n  el = clamp (el - 0.1 * pi, -0.49 * pi, -0.03 * pi);\n  if (el > -0.47 * pi) az += carRot;\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -12.) + vec3 (Rot2D (vec2 (0., wlBase.z), - carRot),\n     carPos.y + 1.).xzy;\n  carPos.y += wlRad + 0.95;\n  zmFac = 5. + 3. * el;\n  dstFar = 150.;\n  sunDir = normalize (vec3 (1., 2., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  wgBox = vec3 (0.39, -0.3, 0.135);\n  ud = 0.5 * uv - wgBox.xy * vec2 (asp, 1.);\n  col = mix (vec3 (0.7, 0.6, 0.3), col, smoothstep (0., 1.,\n     PrRoundBox2Df (ud, vec2 (wgBox.z) - 0.1, 0.12) * canvas.y));\n  s = (length (ud) - wgBox.z) * canvas.y;\n  col *= 0.5 + 0.5 * smoothstep (0., 1., abs (s) - 1.);\n  if (s < 0.) {\n    if (Minv2 (abs (ud)) * canvas.y < 1.) col *= 0.5;\n    col = mix (((onPath > 0.) ? vec3 (0., 1., 0.) : vec3 (0.8, 0., 0.)), col,\n       smoothstep (2.5, 3.5, abs (length (ud - cnPos) * canvas.y - 10.)));\n  }\n  col = mix (col, vec3 (0., 1., 0.), ShowIntPZ (0.5 * uv - vec2 (0.43 * asp, -0.11),\n     vec2 (0.08 * asp, 0.04), 4., mod (floor (trvDist / (2. * wlBase.z)), 1e4)));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    nDig = mxChar;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    val = max (val, 0.);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Truck Driving\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 carPos, wlBase;\nfloat carRot, hgSize, trWidf;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\nconst float txRow = 128.;\n\nfloat OnPath ()\n{\n  vec2 q, gId;\n  q = carPos.xz + Rot2D (vec2 (0., wlBase.z), - carRot);\n  gId = PixToHex (q / hgSize);\n  q = Rot2D ((q - HexToPix (gId * hgSize)) / hgSize,\n     (2. * step (Hashfv2 (gId), 0.5) - 1.) * pi / 6.);\n  q = Rot2D (q, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n  q.x += 1.;\n  return (abs (length (q) - 0.5) < trWidf) ? 1. : 0.;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 wgBox;\n  vec2 iFrag, canvas, cnPos, wlRot, cp, ud, w;\n  float tCur, autoMd, cRotN, strRot, wlRad, rTurn, spd, onPath, trvDist, tc, nStep,\n     az, el, asp, s;\n  int pxId, wgSel;\n  bool init;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (pxId >= 6) discard;\n  init = (iFrame <= 5);\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  if (init) {\n    carPos = vec3 (0.);\n    carRot = 0.;\n    strRot = 0.;\n    wlRad = 0.6;\n    wlBase = vec3 (1.25, wlRad, 2.);\n    wlRot = vec2 (0.);\n    az = 0.;\n    el = 0.;\n    nStep = 0.;\n    cnPos = vec2 (0.);\n    mPtrP = mPtr;\n    wgSel = 0;\n    autoMd = 1.;\n    hgSize = 40.;\n    trWidf = 0.12;\n    onPath = 0.;\n    trvDist = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    carPos = stDat.xyz;\n    carRot = stDat.w;\n    stDat = Loadv4 (1);\n    wlBase = stDat.xyz;\n    autoMd = stDat.w;\n    stDat = Loadv4 (2);\n    nStep = stDat.x;\n    strRot = stDat.y;\n    wlRot = stDat.zw;\n    stDat = Loadv4 (3);\n    az = stDat.x;\n    el = stDat.y;\n    cnPos = stDat.zw;\n    stDat = Loadv4 (4);\n    hgSize = stDat.x;\n    trWidf = stDat.y;\n    onPath = stDat.z;\n    trvDist = stDat.w;\n    stDat = Loadv4 (5);\n    mPtrP.xyz = stDat.xyz;\n    wgSel = int (stDat.w);\n  }\n  wgBox = vec3 (0.39, -0.3, 0.135);\n  if (mPtr.z > 0.) {\n    if (wgSel == 0 && mPtrP.z > 0.) {\n      az = -2. * pi * mPtr.x;\n      el = - pi * mPtr.y;\n    } else {\n      ud = mPtr.xy * vec2 (asp, 1.) - wgBox.xy * vec2 (asp, 1.);\n      if (wgSel == 1) {\n        autoMd = - tCur;\n        cnPos = ud;\n        s = length (cnPos);\n        if (s > 0.) cnPos = min (s, wgBox.z) * cnPos / s;\n      } else if (mPtrP.z <= 0. && length (ud) < wgBox.z) wgSel = 1;\n    }\n  } else {\n    wgSel = 0;\n    cnPos *= 1. - 5e-3;\n  }\n  wlRad = wlBase.y;\n  ++ nStep;\n  if (autoMd > 0.) {\n    tc = mod (0.003 * nStep, 4.);\n    strRot = 0.12 * pi * SmoothBump (0.3, 0.7, 0.15, mod (tc, 1.)) * sign (mod (tc, 2.) - 1.) *\n       sign (tc - 2.);\n    spd = 0.1 - 0.06 * abs (strRot / (0.12 * pi));\n    w = vec2 (- strRot / (0.15 * pi), spd / 0.5);\n    w = pow (abs (w), 1. / vec2 (1.5)) * sign (w);\n    cnPos = w * wgBox.z;\n  } else {\n    w = cnPos / wgBox.z;\n    w = pow (abs (w), vec2 (1.5)) * sign (w);\n    strRot = -0.15 * pi * w.x;\n    spd = 0.5 * w.y;\n    if (tCur + autoMd > 10.) autoMd = 1.;\n  }\n  cp = carPos.xz;\n  w = vec2 (1.);\n  if (abs (strRot) > 1e-4) {\n    cRotN = carRot - strRot * spd / pi;\n    rTurn = wlBase.z / asin (0.5 * strRot);\n    carPos.xz += rTurn * (sin (carRot - vec2 (0.5 * pi, 0.)) - sin (cRotN - vec2 (0.5 * pi, 0.)));\n    carRot = cRotN;\n    w += vec2 (-1., 1.) * wlBase.x / rTurn;\n  } else {\n    carPos.xz += spd * sin (carRot + vec2 (0., 0.5 * pi));\n  }\n  wlRot += w * spd / wlRad;\n  onPath = OnPath ();\n  if (onPath > 0.) trvDist += length (carPos.xz - cp);\n  else trvDist = 0.;\n  if      (pxId == 0) stDat = vec4 (carPos, carRot);\n  else if (pxId == 1) stDat = vec4 (wlBase, autoMd);\n  else if (pxId == 2) stDat = vec4 (nStep, strRot, wlRot);\n  else if (pxId == 3) stDat = vec4 (az, el, cnPos);\n  else if (pxId == 4) stDat = vec4 (hgSize, trWidf, onPath, trvDist);\n  else if (pxId == 5) stDat = vec4 (mPtr.xyz, float (wgSel));\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}