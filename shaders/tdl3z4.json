{
    "Shader": {
        "info": {
            "date": "1545262270",
            "description": "just trying something out.  For full experience, turn off sound on the video in iChannel1.  I wish I could save the choice to do so in the shadertoy state when saving the shader.  But, as far as I know, I can't.",
            "flags": 66,
            "hasliked": 0,
            "id": "tdl3z4",
            "likes": 6,
            "name": "emissive window border experimen",
            "published": 3,
            "tags": [
                "window",
                "border",
                "emissive"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 804
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 50.0\n\n#define INTEGRATE_UNBOUNDED_STUFF 1\n// set to 0 to make the density of the glowy stuff 1/(distance^2)\n// by default it's 1/distance, which means the total glow contribution grows with MAX_DIST\n// I think it looks better with 1/distance\n// but, hey, neither of these functions come from \"physics\"\n// (or, if they do, it is only by coincidence)\n//\n// p.s. looks really nice when MAX_DIST is huge (thanks @CLPB for pointing this out)\n\nconst vec3 light = vec3(0.48, 0.64, -0.6);\n\nvec3 ball1;\nvec3 ball2;\nvec3 ball3;\n\nvec3 radii;\n\nconst float curve_rad = 0.1;\n\nconst mat3 color_map = 0.25 * mat3(1.0, 1.25, 1.0,\n                  \t\t\t0.7, 0.5, 1.0,\n                  \t\t\t0.0, 0.1, 1.0);\n\nmat3 tilt;\n\n\nfloat s_min(in float x, in float y, in float s) {\n\n    float bridge =\n        clamp(abs(x-y)/s, 0.0, 1.0);\n    return min(x,y) - 0.25 * s * (bridge - 1.0) * (bridge - 1.0);\n}\n\nfloat s_max(in float x, in float y, in float s) {\n    float bridge =\n        clamp(abs(x-y)/s, 0.0, 1.0);\n    return max(x,y) + 0.25 * s * (bridge - 1.0) * (bridge - 1.0);\n}\n\nfloat rect_sdf(in vec3 pt, in vec2 size, in float radius) {\n    vec2 xy = abs(pt.xy) - size;\n    xy = xy + curve_rad;\n    xy = max(vec2(0.0), xy);\n    float xy_dist = abs(length(xy) - curve_rad);\n    return length(vec2(pt.z, xy_dist)) - radius;\n}\n\nfloat hits(in vec2 plane_pt) {\n    vec2 rel = abs(plane_pt) + vec2(curve_rad) - vec2(1.0, 0.5625);\n    rel = max(vec2(0.0), rel);\n    return step(dot(rel, rel), curve_rad * curve_rad);\n}\n\nfloat sdf1(in vec3 pt) {\n    return rect_sdf(pt, vec2(1.0, 0.5625), 0.025 * radii.x);\n\n}\n\nfloat sdf2(in vec3 pt) {\n    return rect_sdf(pt, vec2(1.0, 0.5625) + 0.05, 0.025 * radii.y);\n}\n\nfloat sdf3(in vec3 pt) {\n    return rect_sdf(pt, vec2(1.0, 0.5625) + 0.1, 0.025 * radii.z);\n\n}\n\nvec3 sdfs(in vec3 pt) {\n    return vec3(sdf1(pt), sdf2(pt), sdf3(pt));\n}\n\nfloat sdf(in vec3 pt) {\n    return min(sdf1(pt), min(sdf2(pt), sdf3(pt)));\n}\n\nfloat min_comp(in vec3 comps) {\n    return min(comps.x, min(comps.y, comps.z));\n}\n\nvec3 sdf_grad(in vec3 pt) {\n    float f = sdf(pt);\n    const float h = 0.001;\n    const float h_inv = 1000.0;\n    \n    return vec3(sdf(pt + vec3(h, 0.0, 0.0)) - f,\n                sdf(pt + vec3(0.0, h, 0.0)) - f,\n                sdf(pt + vec3(0.0, 0.0, h)) - f);\n}\n\nfloat raymarch(in vec3 orig, in vec3 dir, out vec3 integral) {\n    integral = vec3(0.0);\n    float curr = 0.0;\n    const float step_ratio = 0.25;\n    vec3 curr_sdf = sdfs(orig);\n    float dist = step_ratio * min_comp(curr_sdf);\n    vec3 next_sdf = sdfs(orig + dir * dist);\n    // integral from 0 to d of 1/(a+bx) =\n    // screw it, just average some things.\n    integral = dist * (0.25 / curr_sdf + 1.0 / (curr_sdf + next_sdf) + 0.25 / next_sdf);\n    float total_dist = dist;\n    const vec3 thresh = vec3(0.004);\n    for (int i = 0; i < 128; ++i) {\n        curr_sdf = next_sdf;\n        dist = step_ratio * min_comp(curr_sdf);\n        total_dist += dist;\n        next_sdf = sdfs(orig + total_dist * dir);\n        vec3 mid = 0.5 * (curr_sdf + next_sdf);\n#if INTEGRATE_UNBOUNDED_STUFF        \n        integral += dist * (0.25 / max(thresh, curr_sdf) + \n                            0.5 / max(thresh, mid ) + \n                            0.25 / max(thresh, next_sdf));\n#else\n        integral += dist * (0.25 / max(thresh, curr_sdf * curr_sdf) + \n                            0.5 / max(thresh , mid * mid ) + \n                            0.25 / max(thresh, next_sdf * next_sdf));\n#endif        \n        if (min_comp(next_sdf) < 1.0e-4 || total_dist > MAX_DIST) {\n            return total_dist;\n        }\n    }\n    return total_dist;\n}\n        \n\nvec4 mainSingleRay( in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec3 orig = vec3(0.0, 0.0, -0.5);\n    vec3 dir = normalize(vec3(uv, 1.0));\n    \n    orig = tilt * orig;\n    dir = tilt * dir;\n    \n    orig.z -= 0.5;\n    \n    vec3 integral;\n    \n    \n    vec2 plane_hit = orig.xy - dir.xy * (-0.0 + orig.z) / dir.z;\n\n    float raydist = raymarch(orig, dir, integral);\n\n#if INTEGRATE_UNBOUNDED_STUFF    \n    vec3 col = smoothstep(0.15 * (1.0 *  radii), vec3(0.0), 0.45/(integral));\n#else\n    vec3 col = smoothstep(0.15 * (1.0 *  radii), vec3(0.0), 2.5/(integral));    \n#endif    \n    \n    col = color_map * col;\n    \n    // plane_hit = plane_hit * (1.0 + 0.05 * smoothstep(0.5, 1.2, length(plane_hit)));\n    \t\n    if (raydist < MAX_DIST) {\n        vec3 pt = orig + raydist * dir;\n        vec3 norm = normalize(sdf_grad(pt));\n        vec3 bounce = normalize(reflect(dir, norm));\n        vec3 dists = abs(sdfs(pt));\n        col += color_map * step(dists, vec3(1.0e-3));\n        col += 0.5 * smoothstep(0.5, 1.0, dot(bounce, light)) * vec3(0.9, 0.8, 1.0);\n    } else if (hits(plane_hit.xy) > 0.1) {\n        vec2 vid_uv = 0.5 * (plane_hit + vec2(1.0, 0.5625));\n        vid_uv.y /= 0.5625;\n        col += texture(iChannel2, vid_uv).rgb;\n    }\n    // Output to screen\n    return vec4(col,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    radii = 0.1 + 0.5 * vec3(texture(iChannel0, vec2(0.0, 0.0)).r,\n                             texture(iChannel0, vec2(0.5, 0.0)).r,\n                             texture(iChannel0, vec2(1.0, 0.0)).r);\n    \n    vec2 mouse_uv = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    \n    float theta = 0.3 * sin(iTime);\n    float ct = cos(theta);\n    float st = sin(theta);\n\n\n    tilt = mat3(ct, 0.0, st,\n                0.0, 1.0, 0.0,\n                -st, 0.0, ct);\n\n\tvec3 mouse_orig = vec3(0.0, 0.0, -0.5);\n    vec3 mouse_dir = normalize(vec3(mouse_uv, 1.0));\n    \n    mouse_orig = tilt * mouse_orig;\n    mouse_dir = tilt * mouse_dir;\n    \n    mouse_orig.z -= 0.5;\n    \n    vec2 plane_hit = mouse_orig.xy - mouse_dir.xy * (-0.0 + mouse_orig.z) / mouse_dir.z;\n    \n    if (hits(plane_hit.xy) > 0.1) {\n        radii += vec3(0.5, 0.6, 0.7);\n    }\n    \n    vec4 result = vec4(0.0);\n    const float r = 0.6;\n    result += 0.25 * mainSingleRay(fragCoord);\n    result += 0.25 * mainSingleRay(fragCoord + r * vec2(0.0, 1.0));\n    result += 0.25 * mainSingleRay(fragCoord + r * vec2(0.866, 0.5));\n    result += 0.25 * mainSingleRay(fragCoord + r * vec2(-0.866, 0.5));\n    fragColor = result;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 17051,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/dog-lick/5050-on-my-tombstone"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}