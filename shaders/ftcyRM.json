{
    "Shader": {
        "info": {
            "date": "1659555408",
            "description": "Tip: you can zoom in/out with your mouse\n\nThe implementation isn't perfect, lines get \"dashed\" on large scales.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftcyRM",
            "likes": 2,
            "name": "008 - Plot study",
            "published": 3,
            "tags": [
                "mouse",
                "interactive",
                "study",
                "plot",
                "begginer"
            ],
            "usePreview": 0,
            "username": "PiGIon",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "// 2022.08.02 rev 1\n// 2022.08.02 rev 2 - fix plot errors for pow when x and y < 0.\n// 2022.08.02 rev 3 - fix plot errors when result isinf\n\n#define PI 3.14159265\n\n// tells if the result is undefined, e.g. pow(-1, -1)\nbool undefinedResult = false;\n\n// avoids undefined behavior when x < 0 && y < 0\nfloat safePow(float x, float y) {\n    if (x < 0. || (x == 0. && y <= 0.))\n        undefinedResult=true;\n    \n    float res = pow(x, y);\n    if (isinf(res))\n        undefinedResult=true;\n\n    return res;\n}\nfloat safeDiv(float x, float y) { return x/(y + 0.00000000001); }\n#define pow safePow\n#define div safeDiv\n\n// equation to plot that defines y based on x\n//#define eqy sin(x)\n//#define eqy x*x*x\n//#define eqy pow(x, x)\n\n// from https://www.mzrg.com/math/graphs.shtml\n#define eqy abs(div(sin(pow(x, x)), pow(2., div((pow(x, x)-PI/2.), PI))))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // controls the scale, or, in another word, the zoom of the plot\n    float mouseScale = (0.1 + (iMouse.x / iResolution.x));\n    float scale = 15. * mouseScale;\n    vec2 uv = scale * ((2. * fragCoord - iResolution.xy) / iResolution.y);\n    \n    float lineThickness = 3.;\n    // determine the minimum size for a x pixels in the screen\n    float line = scale*lineThickness/iResolution.y;\n    \n    float antiAlias = (scale * 1.5)/iResolution.y; // higher scale requires more antiAlias\n    \n    vec3 col;\n    \n    float x = uv.x;\n    float yOfx = eqy;\n\n    \n    vec2 p = vec2(uv.x, yOfx);\n\n    \n    float bias = distance(uv, p);\n    \n    vec3 plot = vec3(.96, 0.1, 0.06);\n    vec3 bg = vec3(.993, .992, 0.995);\n    vec3 grid = vec3(0.05, 0.085, 0.97);\n    \n    \n    float g = step(line/1.5, mod(uv.x, 2.)) * step(line/1.5, mod(uv.y, 2.));\n    bg = mix(grid, bg, smoothstep(line - antiAlias, line + antiAlias, g));\n\n    if (!undefinedResult) {\n        col = mix(plot, bg, smoothstep(line - antiAlias, line + antiAlias, bias));\n    } else {\n        col = bg;\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}