{
    "Shader": {
        "info": {
            "date": "1646339794",
            "description": "CC0: Appolloian with a twist II\n  Playing around with shadows in 2D\n  Needed a somewhat more complex distance field than boxes\n  The appolloian fractal turned out quite nice\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7d2fDW",
            "likes": 56,
            "name": "Appolloian with a twist II",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 1479
        },
        "renderpass": [
            {
                "code": "// CC0: Appolloian with a twist II\n//  Playing around with shadows in 2D\n//  Needed a somewhat more complex distance field than boxes\n//  The appolloian fractal turned out quite nice so while\n//  similar to an earlier shader of mine I think it's\n//  distrinctive enough to share\n#define RESOLUTION  iResolution\n#define TIME        iTime\n#define MAX_MARCHES 30\n#define TOLERANCE   0.0001\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\nconst mat2 rot0 = ROT(0.0);\nmat2 g_rot0 = rot0;\nmat2 g_rot1 = rot0;\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat apolloian(vec3 p, float s, out float h) {\n  float scale = 1.0;\n  for(int i=0; i < 5; ++i) {\n    p = -1.0 + 2.0*fract(0.5*p+0.5);\n    float r2 = dot(p,p);\n    float k  = s/r2;\n    p       *= k;\n    scale   *= k;\n  }\n  \n  vec3 ap = abs(p/scale);  \n  float d = length(ap.xy);\n  d = min(d, ap.z);\n\n  float hh = 0.0;\n  if (d == ap.z){\n    hh += 0.5;\n  }\n  h = hh;\n  return d;\n}\n\nfloat df(vec2 p, out float h) {\n  const float fz = 1.0-0.0;\n  float z = 1.55*fz;\n  p /= z;\n  vec3 p3 = vec3(p,0.1);\n  p3.xz*=g_rot0;\n  p3.yz*=g_rot1;\n  float d = apolloian(p3, 1.0/fz, h);\n  d *= z;\n  return d;\n}\n\nfloat shadow(vec2 lp, vec2 ld, float mint, float maxt) {\n  const float ds = 1.0-0.4;\n  float t = mint;\n  float nd = 1E6;\n  float h;\n  const float soff = 0.05;\n  const float smul = 1.5;\n  for (int i=0; i < MAX_MARCHES; ++i) {\n    vec2 p = lp + ld*t;\n    float d = df(p, h);\n    if (d < TOLERANCE || t >= maxt) {\n      float sd = 1.0-exp(-smul*max(t/maxt-soff, 0.0));\n      return t >= maxt ? mix(sd, 1.0, smoothstep(0.0, 0.025, nd)) : sd;\n    }\n    nd = min(nd, d);\n    t += ds*d;\n  }\n  float sd = 1.0-exp(-smul*max(t/maxt-soff, 0.0));\n  return sd;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  float aa = 2.0/RESOLUTION.y;\n  float a = 0.1*TIME;\n  g_rot0 = ROT(0.5*a); \n  g_rot1 = ROT(sqrt(0.5)*a);\n\n  vec2  lightPos  = vec2(0.0, 1.0);\n  lightPos        *= (g_rot1);\n  vec2  lightDiff = lightPos - p;\n  float lightD2   = dot(lightDiff,lightDiff);\n  float lightLen  = sqrt(lightD2);\n  vec2  lightDir  = lightDiff / lightLen;\n  vec3  lightPos3 = vec3(lightPos, 0.0);\n  vec3  p3        = vec3(p, -1.0);\n  float lightLen3 = distance(lightPos3, p3);\n  vec3  lightDir3 = normalize(lightPos3-p3);\n  vec3  n3        = vec3(0.0, 0.0, 1.0);\n  float diff      = max(dot(lightDir3, n3), 0.0);\n\n  float h;\n  float d   = df(p, h);\n  float ss  = shadow(p,lightDir, 0.005, lightLen);\n  vec3 bcol = hsv2rgb(vec3(fract(h-0.2*length(p)+0.25*TIME), 0.666, 1.0));\n\n  vec3 col = vec3(0.0);\n  col += mix(0., 1.0, diff)*0.5*mix(0.1, 1.0, ss)/(lightLen3*lightLen3);\n  col += exp(-300.0*abs(d))*sqrt(bcol);\n  col += exp(-40.0*max(lightLen-0.02, 0.0));\n \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n  col *= mix(0.0, 1.0, smoothstep(0.0, 4.0, TIME));\n  col = sRGB(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}