{
    "Shader": {
        "info": {
            "date": "1557549309",
            "description": "Display the (Noll-indexed) [url=https://en.wikipedia.org/wiki/Zernike_polynomials]Zernike polynomials[/url] used in optics.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlsGWB",
            "likes": 5,
            "name": "Zernike polynomials",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "optics",
                "polynomial"
            ],
            "usePreview": 0,
            "username": "tpfto",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Density plots of the Zernike polynomials (https://en.wikipedia.org/wiki/Zernike_polynomials) over the unit disk\n\n// dark and light colors from Solarized (https://ethanschoonover.com/solarized/)\n#define DARK vec3(0., 0.169, 0.212)\n#define LIGHT vec3(0.992, 0.965, 0.89)\n#define GRAY vec3(0.576, 0.631, 0.631)\n\n// maximum order, equal to (n - |m|)/2\n#define MAX_ORDER 5\n\n// Kronecker delta\n#define kd(n, k) ((n == k) ? 1.0 : 0.0)\n\n// Noll-indexed Zernike functions; https://doi.org/10.1364/JOSA.66.000207\n// evaluated using Clenshaw's algorithm for a Zernike series; https://doi.org/10.1364/JOSAA.31.000708\n\nfloat zernike(in int nu, in vec2 pt)\n{\n\t// convert Noll indices to index pair\n    int n = int(floor(sqrt(2.0 * float(nu)) + 0.5)) - 1;\n    int j = n % 2;\n    int m = (((nu % 2) == 0) ? 1 : -1 ) * (j + 2 * ((nu - j - (n * (n + 1))/2)/2));\n    int am = abs(m);\n    \n    float rho = length(pt), p = 2.0 * rho * rho - 1.0;\n    float u = 0.0, v = 0.0, w = 0.0;\n    \n    // Clenshaw recurrence for radial factor\n    for (int k = MAX_ORDER; k >= 0; k--)\n    {\n        j = 2 * k + am;\n        float q = float((j + m + 2) * (j - m + 2));\n        float f = (j != 0) ? (2.0/q * (float((j + 1) * (j + 2)) * p - float(m * m * (j + 1))/float(j))) : p;\n        float g = (q * float(j + 4))/(float(j + 2) * (q + float(4 * j + 12)));\n        \n        w = v; v = u;\n        u = kd(n - am, 2 * k) + f * v - g * w;\n    }\n    \n    vec2 np = normalize(pt), cs = vec2(1.0, 0.0);\n    mat2 rm = mat2(np, -np.y, np.x);\n    \n    // recurrence for angular factor\n    for (int k = 1; k <= am; k++) cs = rm * cs;\n    \n    return u * pow(rho, float(am)) * ((m >= 0) ? cs.x : cs.y);\n}\n\n// rescaling function\n\nfloat rescale(float x, vec2 r1, vec2 r2)\n{\n      return mix(r2.x, r2.y, (x - r1.x)/(r1.y - r1.x));\n}\n\n// HSB to RGB conversion; from https://www.shadertoy.com/view/MsS3Wc\nvec3 hue(float h)\n{\n     return clamp( abs(mod(6.0 * h + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) -1.0, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 aspect = iResolution.xy / iResolution.y;\n        vec2 uv = 2.0 * ( fragCoord.xy / iResolution.y ) - aspect;\n        \n        vec3 col = DARK;\n\n        int NPOLY = 21; // number of polynomials to show\n        int id = (iFrame/120) % NPOLY; // one function per 120 frames\n   \n        float h = 2.0/iResolution.y, rr = length(uv);\n        if (rr < 1.0) col = hue(rescale(zernike(id, uv), vec2(-1.0, 1.0), vec2(2.0/3.0, 0.0)));\n        col = mix(DARK, col, 1.0 - smoothstep(0.5 - h, 0.5 + h, rr - 0.5));\n\n        fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}