{
    "Shader": {
        "info": {
            "date": "1551480702",
            "description": "First attempt of making sound shader",
            "flags": 8,
            "hasliked": 0,
            "id": "WsfSzS",
            "likes": 9,
            "name": "Waterdrops song",
            "published": 3,
            "tags": [
                "sound"
            ],
            "usePreview": 0,
            "username": "klk",
            "viewed": 714
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n\n    float time=iTime+uv.x/5.0;\n    \n    float vol=0.;\n    vec2 music=tune(time,1);\n    \n    col.g=\n        0.2*clamp\n        (1.0-\n         abs(iResolution.y/2.0-fragCoord.y)+abs(music.y)*iResolution.y/2.0\n         ,0.0,1.0);\n\n\n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.141592\n\n// Notes frequinces for 0 octave taken from Wikipedia\nconst float notes[12]=float[12](\n    261.626,277.183,293.665,311.127,329.628,349.228,\n    369.994,391.995,415.305,440.000,466.164,493.883\n);\n    \n\nvec3 ding(float time, float start, int note, float l)\n{\n    float len=0.1*l;\n    if(time<start)\n        return vec3(0);\n    else if(time>(start+len))\n        return vec3(0);\n    int octave=(note+12*8)/12-8;\n    int octnote=note%12;\n\tif(note<0)\n    {\n        octnote=(note+12*8)%12;\n    }\n\n    float mul=1.0;\n    if(octave<0)\n        mul=pow(0.5,float(-octave));\n    else if(octave>0)\n        mul=pow(2.0,float(octave));\n        \n    float T=(time-start);\n    float E=1.0-T/len;\n    float E0=E;\n    E*=E;\n//    E*=1.-E0*E0*E0*E0;\n    \n    float sine=sin(2.0*PI*notes[octnote]*mul*T\n                   +2.0*sin(T*50.0)\n                  );\n    if(sine<0.)\n        sine=-sqrt(-sine);\n    else\n        sine=sqrt(sine);\n    return vec3(vec2(sine*E), E);\n}\n\nstruct TN\n{\n    float time;\n    int note;\n};\n    \nstruct TNV\n{\n    float time;\n    int note;\n    float volume;\n};\n    \n\nvec2 tune0(float time, int echo)\n{\n    vec2 val=vec2(0);\n\tint beat0=1;\n\tint beat1=1;\n\tint mel0=1;\n\n    \n    if(beat0!=0)\n    {\n        int pc[8]=int[8](8,12,8,12,10,8,2,8);\n        const TNV nt[]=TNV[](\n            TNV( 0.5, 4, 0.5),\n            TNV( 1.5, 8, 1.),\n            TNV( 2.5, 4, 0.5),\n            TNV( 3.0, 2, 1.5),\n            TNV( 4.5, 4, 0.5),\n            TNV( 5.5, 8, 0.5),\n            TNV( 6.5, 4, 0.5),\n            TNV( 7.0, 6, 1.5)\n        );\n\t\t\n        float longe=1.0;\n        float intime=mod(time,longe);\n        float ontime=trunc(time/longe);\n\t    for(int i=0;i<8;i++)\n        {\n            if(nt[i].note>0)\n            {\n\t\t        int pcn=int(time/longe)%8;\n\t\t\t\tint note=nt[i].note-16+pc[pcn];\n                vec3 val0=ding(intime,nt[i].time/(4.0/longe),\n                          note-6,0.75)*0.25*nt[i].volume;\n        \t    vec3 val1=ding(intime,nt[i].time/(4.0/longe),\n                          note,0.25)*0.5*nt[i].volume;\n                val+=val0.xy+val1.xy;\n            }\n        }\n        \n    }\n\n    if(beat1!=0)\n    {\n        int pc[8]=int[8](-4,-6,2,4,0,-5,16,18);\n\n        const TN nt[]=TN[]\n            (\n                TN( 0.0,-1),\n                TN( 1.0, 9),\n                TN( 2.0,-1),\n                TN( 3.0, 7),\n                TN( 4.0,-1),\n                TN( 5.0, 8),\n                TN( 6.0,-1),\n                TN( 7.0, 5),\n                TN( 8.0,-1),\n                TN( 9.0,11),\n                TN(10.0, 7),\n                TN(11.0, 9),\n                TN(12.0, 6),\n                TN(13.0,-1),\n                TN(14.0, 7),\n                TN(15.0, 5)\n            );\n\t\t\n        float longe=2.0;\n        float intime=mod(time,longe);\n        float ontime=trunc(time/longe);\n        int pcn=int(time/longe)%8;\n        pcn=pc[pcn];\n        if(pcn>=0)\n        {\n            for(int i=0;i<16;i++)\n            {\n                if(nt[i].note>0)\n                {\n                    int note=nt[i].note-12+pcn;\n                    vec3 val0=ding(intime,nt[i].time/(16.0/longe),\n                              note,1.0)*0.25;\n                    vec3 val1=ding(intime,nt[i].time/(16.0/longe),\n                              note+12,0.15)*0.1;\n                    val+=val0.xy+val1.xy;\n                }\n            }\n        }\n        \n    }\n    if(mel0!=0)\n    {\n        int pc[12]=int[12](-1,4,-1,8,10,12,-10,8,-1,-12,-1,-1);\n        const TN nt[]=TN[]\n            (\n                TN( 0.0,-5),\n                TN( 1.0,-1),\n                TN( 2.0, 5),\n                TN( 3.0,-1),\n                TN( 4.0, 7),\n                TN( 5.0, 8),\n                TN( 6.0,-1),\n                TN( 7.0, 5),\n                TN( 8.0,-1),\n                TN( 9.0,11),\n                TN(10.0, 7),\n                TN(11.0,-9),\n                TN(12.0, 6),\n                TN(13.0,-7),\n                TN(14.0,-7),\n                TN(15.0,-5)\n            );\n\t\t\n        float longe=2.0;\n        float intime=mod(time,longe);\n        float ontime=trunc(time/longe);\n\n        int pcn=int(time/longe)%12;\n        pcn=pc[pcn];\n        if(pcn>=0)\n        {\n            for(int i=0;i<16;i++)\n            {\n                if(nt[i].note>0)\n                {\n                    int note=nt[i].note-12+pcn*2;\n                    vec3 val0=ding(intime,nt[i].time/(16.0/longe),\n                              note,2.0)*0.5;\n                    val+=val0.xy;\n                }\n            }\n        }\n        \n    }\n    \n    return val;\n}\n\nvec2 tune(float time, int echo)\n{\n    float delay=0.25*1.01;\n    float echomin=0.03;\n    time+=8.*delay;\n    return tune0(time, 0)\n        +16.*echomin*tune0(time-1.*delay,echo)\n        + 8.*echomin*tune0(time-2.*delay,echo)\n        + 4.*echomin*tune0(time-3.*delay,echo)\n        + 2.*echomin*tune0(time-4.*delay,echo)\n        + 1.*echomin*tune0(time-5.*delay,echo)\n        + .5*echomin*tune0(time-6.*delay,echo)\n        + .25*echomin*tune0(time-7.*delay,echo);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound( in int samp, float time )\n{\n\treturn tune(time, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}