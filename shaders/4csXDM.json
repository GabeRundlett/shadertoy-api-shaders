{
    "Shader": {
        "info": {
            "date": "1705340430",
            "description": "Plot of normalized max(1-x^2,0)^k (gray) vs. standard normal distribution (green),",
            "flags": 0,
            "hasliked": 0,
            "id": "4csXDM",
            "likes": 4,
            "name": "(1-x^2)^k",
            "published": 3,
            "tags": [
                "approximation",
                "gamma",
                "gauss"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Function f(x)=max(1-x^2,0)^k has area\n// S = sqrt(π)*Γ(k+1)/Γ(k+3/2) = 2^(2*k+1)*(k!)^2/(2*k+1)/(2*k)!\n// which is the ratio of https://oeis.org/A101926 and https://oeis.org/A001803,\n// and standard deviation σ = 1/sqrt(2*k+3).\n// Its normalized version F(x) = (σ/S)*f(σ*x) converges to standard normal distribution:\n// https://www.wolframalpha.com/input?i=limit+%281-x%5E2%2F%282*k%2B3%29%29%5Ek%2F%28sqrt%28pi%29*sqrt%282*k%2B3%29*gamma%28k%2B1%29%2Fgamma%28k%2B3%2F2%29%29+for+k+-%3E+inf\n// Table of relevant values, for few small k (RMS is difference from standard normal distribution):\n//  k |       S       |               σ              |             σ/S              |   RMS\n// --:|:-------------:|------------------------------|------------------------------|----------\n//  1 |      4/3      | 0.44721359549995793928183... | 0.33541019662496845446137... | 0.087869\n//  2 |     16/15     | 0.37796447300922722721451... | 0.35434169344615052551360... | 0.057184\n//  3 |     32/35     | 0.33333333333333333333333... | 0.36458333333333333333333... | 0.042587\n//  4 |    256/315    | 0.30151134457776362264681... | 0.37100028727342008255369... | 0.033981\n//  5 |    512/693    | 0.27735009811261456100917... | 0.37539769139070681792842... | 0.028287\n//  6 |   2048/3003   | 0.25819888974716112567861... | 0.37859925093297112324848... | 0.024235\n//  7 |   4096/6435   | 0.24253562503633297351890... | 0.38103436208711003041849... | 0.021202\n//  8 |  65536/109395 | 0.22941573387056176590720... | 0.38294882517654578218718... | 0.018845\n//  9 | 131072/230945 | 0.21821789023599238126609... | 0.38449348953667648690413... | 0.016962\n// 10 | 524288/969969 | 0.20851441405707476267814... | 0.38576606309609747024567... | 0.015421\n// Empirically, it seems that 1/(12*k) < RMS < 1/(5*k), at least up to k=10^6.\n// NOTE: k does not have to be integer.\n\nconst float pi=3.14159265358979;\n\n// Gamma function approximation.\n// Based on Lanczos approximation, with parameter\n// g=3.65517998 (chosen as per on http://web.mala.bc.ca/pughg/phdThesis/phdThesis.pdf).\n// Only ok for positive x (without the reflection formula).\n// Accuracy not tested much. It is clearly possible to do better.\nfloat gamma(float x)\n{\n    // if(x<0.5) return pi/(gamma(1.0-x)*sin(pi*x)); // <-- Euler's reflection formula.\n    float t=x-1.0;\n    // NOTE: accuracy likely suffers when\n    // the expression is evaluated this way.\n    return exp((t+0.5)*(log(t+4.15517998)-1.0))*\n        (((0.0648134947*t+0.81914556)*t+3.45251751)*t+4.8529253)/((t+1.0)*(t+2.0)*(t+3.0));\n}\n\n// NOTE: in practice, you would likely use fixed k,\n// and precalculate the coefficients offline.\nfloat F(float x,float k)\n{\n    float s=1.0/sqrt(2.0*k+3.0);\n    float S=sqrt(pi)*gamma(k+1.0)/gamma(k+1.5);\n    float t=s*x;\n    return (s/S)*pow(max(1.0-t*t,0.0),k);\n}\n\nfloat N(float x)\n{\n    return exp(-0.5*x*x)/sqrt(2.0*pi);\n}\n\nfloat plot(float f,float y)\n{\n    float d=f-y;\n    return smoothstep(1.5*fwidth(d),0.0,abs(d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    xy.x*=3.5;\n    xy.y=(xy.y+1.0)/5.0;\n    vec3 col=vec3(0.25);\n    col+=vec3(0.2,0.8,0.2)*plot(N(xy.x),xy.y);\n    float k=mix(1.0,16.0,0.5+0.5*sin(iTime));\n    col+=vec3(0.5)*plot(F(xy.x,k),xy.y);\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}