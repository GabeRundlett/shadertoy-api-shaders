{
    "Shader": {
        "info": {
            "date": "1482010588",
            "description": "I found Taylor series interesting so I decided to draw some of them.\n\nwhite = original function\nred= Taylor representation of original function",
            "flags": 0,
            "hasliked": 0,
            "id": "lsG3Rh",
            "likes": 4,
            "name": "Taylor series",
            "published": 3,
            "tags": [
                "math",
                "taylor",
                "trigonometry",
                "maclaurin"
            ],
            "usePreview": 0,
            "username": "KnightPista",
            "viewed": 683
        },
        "renderpass": [
            {
                "code": "#define fact_2 2.0\n#define fact_3 6.0\n#define fact_4 24.0\n#define fact_5 120.0\n#define fact_6 720.0\n#define fact_7 5040.0\n#define fact_8 40320.0\n#define pi 3.14159265359\n\n#define taylorFuncColor vec3(1.0, 0.0, 0.0)\n#define origFuncColor vec3(1.0, 1.0, 1.0)\n#define gridColor vec3(0.65)\n#define backColor vec3(0.25)\n\n//\n// taylor part here\n//\n\nfloat taylor_sin(float x)\n{\n    float x3 = x * x * x;\n    float x5 = x3 * x * x;\n    float x7 = x5 * x * x;\n    \n    return x - (x3 / fact_3) + (x5 / fact_5) - (x7 / fact_7);\n}\n\nfloat taylor_cos(float x)\n{\n    float x2 = x * x;\n    float x4 = x2 * x2;\n\tfloat x6 = x4 * x2;\n    float x8 = x6 * x2;\n    \n    return 1.0 - (x2 / fact_2) + (x4 / fact_4) - (x6 / fact_6) + (x8 / fact_8);\n}\n\nfloat taylor_tan(float x)\n{\n    float x3 = x * x * x;\n\tfloat x5 = x3 * x * x;\n    \n    return x + (x3 / 3.0) + ((2.0*x5)/15.0);\n}\n\nfloat taylor_exp(float x)\n{\n    float x2 = x * x;\n    float x3 = x2 * x;\n    float x4 = x3 * x;\n    float x5 = x4 * x;\n    float x6 = x5 * x;\n    float x7 = x6 * x;\n    \n    return 1.0 + x + (x2 / fact_2) + (x3 / fact_3) + (x4 / fact_4) + (x5 / fact_5) + (x6 / fact_6) + (x7 / fact_7);\n}\n\nfloat taylor_log_1_minus_x(float x)\n{\n    float x2 = x * x;\n    float x3 = x2 * x;\n    float x4 = x3 * x;\n    float x5 = x4 * x;\n    float x6 = x5 * x;\n    float x7 = x6 * x;\n    float x8 = x7 * x;\n    \n    return -x - (x2/2.0) - (x3/3.0) - (x4/4.0) - (x5/5.0) - (x6/6.0) - (x7/7.0) - (x8/8.0);\n}\n\nfloat taylor_log_1_plus_x(float x)\n{\n    float x2 = x * x;\n    float x3 = x2 * x;\n    float x4 = x3 * x;\n    float x5 = x4 * x;\n    float x6 = x5 * x;\n    float x7 = x6 * x;\n    float x8 = x7 * x;\n    \n    return x - (x2/2.0) + (x3/3.0) - (x4/4.0) + (x5/5.0) - (x6/6.0) + (x7/7.0) - (x8/8.0);\n}\n\n//\n// helpers, drawers\n//\n\nfloat wrap_to_pi(float x)\n{\n    return -pi + x*pi*2.0;\n}\n\nvec3 drawHorizLine(vec3 inColor, vec3 lineColor, float y, vec2 p)\n{\n    float e = 1.0/iResolution.x;\n    float d = abs(p.y - y);\n    return mix(inColor, lineColor, 1.0 - step(e, d));\n}\n\nvec3 drawVertLine(vec3 inColor, vec3 lineColor, float x, vec2 p)\n{\n    float e = 1.0/iResolution.x;\n    float d = abs(p.x - x);\n    return mix(inColor, lineColor, 1.0 - step(e, d));\n}\n\nvec3 drawGrid(vec3 col, float scroll, vec2 p)\n{\n    float e = 1.0/iResolution.x;\n    float m = 0.5*iResolution.y/iResolution.x;\n    \n    col = drawHorizLine(col, gridColor, m, p);\n    \n    col = drawVertLine(col, gridColor, 0.5, p + vec2(scroll, 0.0));\n    \n    return col;\n}\n\nvoid draw(float func, inout vec3 origColor, vec3 funcColor, vec2 p)\n{\n    float e = 1.0/iResolution.x;\n    float m = 0.5*iResolution.y/iResolution.x;\n    \n    float y = m + m*func;\n    float d = abs(p.y-y);\n    \n    origColor = mix( origColor, funcColor, 1.0 - smoothstep( 0.0, 2.0*e, d ) );\n}\n\n#define STAGE_EXP 0\n#define STAGE_TAN 1\n#define STAGE_COS 2\n#define STAGE_SIN 3\n#define STAGE_LOG_1_MINUS_X 4\n#define STAGE_LOG_1_PLUS_X 5\n#define STAGE_COUNT 6.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  p = fragCoord.xy / iResolution.x;\n    //float mouseScroll = -((iMouse.x/iResolution.x)-0.5);\n    //float pureScroll = mouseScroll*2.0;\n    //float scroll = pureScroll*pi;\n    //float mouseStage = iMouse.y/iResolution.y;\n    float scroll = 0.0;\n    float mouseScroll = 0.0;\n    float pureScroll = 0.0;\n    \n    vec3 col = backColor;\n    \n    col = drawGrid(col, mouseScroll, p);\n    \n    // function changing\n\t//int stage = int(min(mouseStage * STAGE_COUNT, STAGE_COUNT-1.0));\n    int stage = int(mod(iTime * 0.5, STAGE_COUNT));\n    \n    // Exp\n    if(stage == STAGE_EXP)\n    {\n        float x = (-3.0 + 6.0*p.x) + scroll;\n            \n        draw(exp(x) / 10.0, col, origFuncColor, p);\n        \n        draw(taylor_exp(x) / 10.0, col, taylorFuncColor, p);\n    }\n    // Tan\n    else if(stage == STAGE_TAN)\n    {\n        float x = wrap_to_pi(p.x) + scroll;\n        \n        draw(tan(x), col, origFuncColor, p);\n        \n        draw(taylor_tan(x), col, taylorFuncColor, p);\n    }\n    // Cos\n    else if(stage == STAGE_COS)\n    {\n        float x = wrap_to_pi(p.x) + scroll;\n        \n        draw(cos(x), col, origFuncColor, p);\n        \n        draw(taylor_cos(x), col, taylorFuncColor, p);\n    }\n    // Sin\n    else if(stage == STAGE_SIN)\n    {\n        float x = wrap_to_pi(p.x) + scroll;\n        \n        draw(sin(x), col, origFuncColor, p);\n        \n        draw(taylor_sin(x), col, taylorFuncColor, p);\n    }\n\t// log(1-x)\n\telse if(stage == STAGE_LOG_1_MINUS_X)\n    {\n        float x = (-1.0 + 2.0*p.x) + pureScroll;\n        \n        draw(log(1.0-x), col, origFuncColor, p);\n        \n        draw(taylor_log_1_minus_x(x), col, taylorFuncColor, p);\n    }\n    // log(1+x)\n\telse if(stage == STAGE_LOG_1_PLUS_X)\n    {\n        float x = (-1.0 + 2.0*p.x) + pureScroll;\n        \n        draw(log(1.0 + x), col, origFuncColor, p);\n        \n        draw(taylor_log_1_plus_x(x), col, taylorFuncColor, p);\n    }\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}