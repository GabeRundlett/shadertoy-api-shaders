{
    "Shader": {
        "info": {
            "date": "1679434736",
            "description": "testing material maker ",
            "flags": 0,
            "hasliked": 0,
            "id": "DdcXzN",
            "likes": 2,
            "name": "Fork MaterialMa deviltiger 729",
            "published": 3,
            "tags": [
                "materialmaker"
            ],
            "usePreview": 0,
            "username": "deviltiger01",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "/* Generated by Material Maker */\n\n#define SEED_VARIATION 0.0\n\n\n\n\nfloat dot2(vec2 x) {\n\treturn dot(x, x);\n}\n\nfloat rand(vec2 x) {\n    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);\n}\n\nvec2 rand2(vec2 x) {\n    return fract(cos(mod(vec2(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t      dot(x, vec2(3.4562, 17.398))), vec2(3.14))) * 43758.5453);\n}\n\nvec3 rand3(vec2 x) {\n    return fract(cos(mod(vec3(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t\t  dot(x, vec2(3.4562, 17.398)),\n                              dot(x, vec2(13.254, 5.867))), vec3(3.14))) * 43758.5453);\n}\n\nvec3 rgb2hsv(vec3 c) {\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\tvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n\tvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat param_rnd(float minimum, float maximum, float seed) {\n\treturn minimum+(maximum-minimum)*rand(vec2(seed));\n}\nfloat box3d(vec3 uv, vec3 s) {\n\tvec3 q = abs(uv) - s;\n\treturn length(max(q, 0.0))+min(max(q.x, max(q.y, q.z)), 0.0);\n}\nuniform sampler2D o127558_tex;\nconst float o127558_tex_size = 2048.0;\nconst float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\nconst float p_o23489_CamX = 2.500000000;\nconst float p_o23489_CamY = 2.000000000;\nconst float p_o23489_CamZ = 3.000000000;\nconst float p_o23489_LookAtX = 0.000000000;\nconst float p_o23489_LookAtY = 0.000000000;\nconst float p_o23489_LookAtZ = 0.000000000;\nconst float p_o23489_CamD = 1.500000000;\nconst float p_o23489_CamZoom = 0.939000000;\nconst float p_o23489_Reflection = 0.200000000;\nconst float p_o23489_Specular = 0.000000000;\nconst float p_o23489_Pow = 64.000000000;\nconst float p_o23489_SunX = 2.500000000;\nconst float p_o23489_SunY = 2.500000000;\nconst float p_o23489_SunZ = 1.000000000;\nconst float p_o23489_AmbLight = 0.250000000;\nconst float p_o23489_AmbOcclusion = 1.000000000;\nconst float p_o23489_Shadow = 1.000000000;\nconst float p_o14096_sx = 1.000000000;\nconst float p_o14096_sy = 1.000000000;\nconst float p_o14096_sz = 1.000000000;\nconst float p_o14096_r = 0.100000000;\nfloat o23489_input_sdf_a(vec3 p, float _seed_variation_) {\nfloat o14096_0_1_sdf3d = (box3d((p), vec3(p_o14096_sx, p_o14096_sy, p_o14096_sz)-p_o14096_r/2.0)-p_o14096_r/2.0)+0.0*((box3d((p), vec3(p_o14096_sx, p_o14096_sy, p_o14096_sz)-p_o14096_r)-p_o14096_r)-(box3d((p), vec3(p_o14096_sx, p_o14096_sy, p_o14096_sz)-p_o14096_r/2.0)-p_o14096_r/2.0));\n\nreturn o14096_0_1_sdf3d;\n}\nvec3 o23489_input_tex3d_a(vec4 p, float _seed_variation_) {\n\nreturn vec3(1.0,0.1,0.1);\n}\nfloat o23489_input_sdf_b(vec3 p, float _seed_variation_) {\n\nreturn max((p).y+1.0,length(vec3((p).x,(p).y+1.0,(p).z))-10.0);\n}\nvec3 o23489_input_tex3d_b(vec4 p, float _seed_variation_) {\n\nreturn vec3(mod(floor((p).x*2.0)+floor((p).z*2.0),2.0))*0.9+0.1;\n}\nvec3 o23489_input_hdri(vec2 uv, float _seed_variation_) {\nvec4 o127558_0 = textureLod(o127558_tex, uv, 0.0);\n\nreturn ((o127558_0).rgb);\n}\nvec2 input_o23489(vec3 p, float _seed_variation_) {\n    float sdfa=o23489_input_sdf_a(p, _seed_variation_);\n\tfloat sdfb=o23489_input_sdf_b(p, _seed_variation_);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_o23489(vec3 p, float _seed_variation_) {  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_o23489(p+e.xyy, _seed_variation_).x;\n  float v2=input_o23489(p+e.yyx, _seed_variation_).x;\n  float v3=input_o23489(p+e.yxy, _seed_variation_).x;\n  float v4=input_o23489(p+e.xxx, _seed_variation_).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_o23489(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd, float _seed_variation_) {\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_o23489(p, _seed_variation_);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_o23489( in vec3 pos, in vec3 nor , float _seed_variation_) {\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_o23489( pos + h*nor , _seed_variation_).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_o23489( in vec3 ro, in vec3 rd, in float mint, in float tmax, float _seed_variation_) {\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_o23489( ro + rd*t , _seed_variation_).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_o23489(vec2 uv, float _seed_variation_) {\n    uv-=0.5;\n\tvec3 cam=vec3(p_o23489_CamX,p_o23489_CamY,p_o23489_CamZ)*p_o23489_CamZoom;\n\tvec3 lookat=vec3(p_o23489_LookAtX,p_o23489_LookAtY,p_o23489_LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*p_o23489_CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_o23489(d,p,dS,ro,rd, _seed_variation_);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?o23489_input_tex3d_a(vec4(p,1.0), _seed_variation_):o23489_input_tex3d_b(vec4(p,1.0), _seed_variation_);\n\tvec3 light=normalize(vec3(p_o23489_SunX,p_o23489_SunY,p_o23489_SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_o23489(p, _seed_variation_);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_o23489(p,n, _seed_variation_),p_o23489_AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_o23489(p,light,0.05,5.0, _seed_variation_),p_o23489_Shadow);\n\t\tcolor=min(vec3(max(shadow,p_o23489_AmbLight)),max(l,p_o23489_AmbLight))*max(cAO,p_o23489_AmbLight)*objColor+pow(r,p_o23489_Pow)*p_o23489_Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_o23489(d,p,dS,p,ref, _seed_variation_);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?o23489_input_tex3d_a(vec4(p,1.0), _seed_variation_):o23489_input_tex3d_b(vec4(p,1.0), _seed_variation_);\n\t\t\tn=normal_o23489(p, _seed_variation_);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,p_o23489_AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=o23489_input_hdri(equirectangularMap(ref.xzy), _seed_variation_).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,p_o23489_Reflection);\n\t} else {\n\t\tcolor=o23489_input_hdri(equirectangularMap(rd.xzy), _seed_variation_).xyz;\n\t}\n\treturn color;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\nfloat minSize = min(iResolution.x, iResolution.y);\nfloat _seed_variation_ = SEED_VARIATION;\nvec2 UV = vec2(0.0, 1.0) + vec2(1.0, -1.0) * (fragCoord-0.5*(iResolution.xy-vec2(minSize)))/minSize;\nvec3 o23489_0_1_rgb = raymarch_o23489((UV), _seed_variation_);\nfragColor = vec4(o23489_0_1_rgb, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}