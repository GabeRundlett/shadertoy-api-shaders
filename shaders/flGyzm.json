{
    "Shader": {
        "info": {
            "date": "1661116767",
            "description": "Rave fractal\nStill suffers from spaghetti code curse",
            "flags": 0,
            "hasliked": 0,
            "id": "flGyzm",
            "likes": 3,
            "name": "AVizMandelbulb PF",
            "published": 3,
            "tags": [
                "fractal",
                "raytracer",
                "raymarch",
                "sound",
                "mandelbulb",
                "audio"
            ],
            "usePreview": 0,
            "username": "senseedious",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "// Fork of \"Audio visualizer Mandelbulb\" by Pyromma. https://shadertoy.com/view/7djcDc\n// 2022-08-21 21:18:43\n\n#define PI 3.1415\n#define EPS 0.005\n\nstruct Ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Light \n{\n\tvec3 position;\n\tvec3 color;\n};\n\n// Shoot Ray\nRay getFragCoordRay(const vec2 frag_coord) {\n  \t   \n    // FOV\n    float fov = 230.;\n    float cameraDistance = 1.0 / tan(fov * 0.5f * PI / 180.0);\n    vec3 position = vec3(0.0, 0.0, -6.5);\n    \n    vec3 rayTarget = vec3((frag_coord / iResolution.xy) * 2.0 - 1.0, cameraDistance);\n    rayTarget.y /= (iResolution.x / iResolution.y);\n    \n  \tvec3 origin = vec3(-0., 0.0, -10.0);\n    vec3 direction = normalize(rayTarget - origin + position);\n  \n  \treturn Ray(origin, direction);\n}\n\n//Rotate Mandelbulb\nvec3 rot(vec3 pos, float x, float y, float z)\n{\n\tmat3 rx = mat3(1.0, 0.0, 0.0, 0.0, cos(x), -sin(x), 0.0, sin(x), cos(x));\n\tmat3 ry = mat3(cos(y), 0.0, sin(y), 0.0, 1.0, 0.0, -sin(y), 0.0, cos(y));\n\tmat3 rz = mat3(cos(z), -sin(z), 0.0, sin(z), cos(z), 0.0, 0.0, 0.0, 1.0);\n\n\treturn rx * ry * rz * pos;\n}\n\n//Distance Estimator - MandelBulb\nfloat distEst(vec3 pos)\n{\n    float fft[4];\n    fft[0] = texture( iChannel0, vec2( 0.01, 0.25 ) ).x;\n\tfft[1] = texture( iChannel0, vec2( 0.07, 0.25 ) ).x;\n\tfft[2] = texture( iChannel0, vec2( 0.15, 0.25 ) ).x;\n\tfft[3] = texture( iChannel0, vec2( 0.30, 0.25 ) ).x;\n    \n    float fftA = (fft[0]+fft[1]+fft[2]+fft[3])/4.;\n    \n    float wave = 0.8*pow(texelFetch( iChannel0, ivec2(1,1), 0 ).x, 0.5);\n    \n    \n\tfloat dis = 0.0;\n\tfloat res = 0.0;\n    int iter = 5;\n\n    pos = rot(pos, sin(iTime * 0.2) * 0.01 - 0.3, cos(iTime * 0.2) * 0.02 - 0.3, 1.2);\n\tvec3 posN = vec3( pos.xyz );\n\n\tfloat p = sin(iTime * 0.1) + 8.0;\n\tfloat d = sin(iTime * 0.1) * 0.2 + 1.0;\n    \n\tfor(int l = 0; l < iter; ++l)\n\t{\n\t\t\n        dis = length(posN);\n\n        if( dis > 1.5 )\n        {\t\n            res = 0.3 * log(dis) * dis / d;\n        }\n        else\n        {\n            d = pow(dis, 7.0) * 7.0 * d + 1.0;\n            \n            float theta = atan( length( posN.xy ), posN.z );\n            float phi = atan( posN.y, posN.x );\n            \n            float tran = sin(theta * p);\n            float rPow = pow(dis, 8.0);\n            \n            posN.x = rPow * cos(phi * p + (1.0-fftA)) * tran;\n            posN.y = rPow * sin(phi * (1.0-fftA) - pow(fft[3],3.0) - pow(sin(fft[0]),3.0)) * tran;\n            posN.z = rPow * cos(theta * p) * wave;\n            \n            posN += pos;\n        }\n\t\t\t\n\t}\n\t\n\treturn res;\n}\n\n//Global var\nconst int maxSteps = 100;\nconst float maxDistance = 500.;\n\nconst int lightAmount = 2;\n\n//Ray Marching\nvec2 rayMarch(Ray ray)\n{\n    float totalDistance = 0.0;\n    int steps;\n    \n\tfor (steps = 0; steps < maxSteps; ++steps)\n    {\n\t\tvec3 p = ray.origin + totalDistance * ray.direction;\n\t\tfloat distance = distEst(p);\n        \n\t\ttotalDistance += distance;\n\t\tif (totalDistance > maxDistance)\n            break;\n            \n\t}\n\treturn vec2(totalDistance, float(steps) / float(maxSteps));\n}\n\n//Normal\nvec3 getNormal(vec3 pos)\n{\n    vec2 e = vec2(EPS, 0);\n    float d = distEst(pos);\n    \n    vec3 n = d - vec3(\n        distEst(pos - e.xyy),\n        distEst(pos - e.yxy),\n        distEst(pos - e.yyx)\n    );\n    \n    return normalize(n);\n}\n\n//Get light\nvec3 getLight(Ray ray, vec2 dist, Light[lightAmount] light)\n{\n    vec3 pos = ray.origin + ray.direction * dist.x;\n    float diff = 0.0;\n    vec2 shadow = vec2(0.0);\n    vec3 shade = vec3(0.0);\n    vec3 n = getNormal(pos);\n    \n    for(int i = 0; i < lightAmount; i++)\n    {\n        vec3 lightVec = normalize(light[i].position - pos);\n        diff = clamp(dot(n, lightVec), 0.0, 1.0);\n        shadow = rayMarch(Ray(pos + n * EPS, lightVec));\n        diff *= 1.0 - shadow.y;\n        shade += diff * light[i].color * pow(length(pos),3.);\n    }\n\n    return shade;\n}\n\n//Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fft[4];\n    fft[0] = texture( iChannel0, vec2( 0.01, 0.25 ) ).x;\n\tfft[1] = texture( iChannel0, vec2( 0.07, 0.25 ) ).x;\n\tfft[2] = texture( iChannel0, vec2( 0.15, 0.25 ) ).x;\n\tfft[3] = texture( iChannel0, vec2( 0.30, 0.25 ) ).x;\n    \n    float fftA = (fft[0]+fft[1]+fft[2]+fft[3])/4.;\n    \n    Light[2] light;\n\n    light[0].position = vec3(13.0, 7.0, -18.0);\n    light[0].color = vec3(0.0, 0.8, 0.9) * fft[0];\n    light[1].position = vec3(-1.0, 9.0, -6.0);\n    light[1].color = vec3(1.0, 0.0, 0.7) * fft[3];\n\n    Ray ray = getFragCoordRay(fragCoord);\n    \n    vec2 res = rayMarch(ray);\n    \n    vec3 color = vec3(0.0);\n\n    color = getLight(ray, res, light) + 0.4 * vec3(res.y * pow(fft[2],3.), 0.0, res.y * pow(fft[0], 10.) - fft[2]*0.3) + 0.5*vec3(pow(fftA,10.));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 20,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}