{
    "Shader": {
        "info": {
            "date": "1592418465",
            "description": "Cellular automaton particle tracking used for advection in a fluid which is also fully conservative\nEach pixel has 1 virtual particle",
            "flags": 32,
            "hasliked": 0,
            "id": "ttsyzB",
            "likes": 42,
            "name": "Virtual particle SPH",
            "published": 3,
            "tags": [
                "particles",
                "ca"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 913
        },
        "renderpass": [
            {
                "code": "vec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n\tR = iResolution.xy; time = iTime;\n    //pos = R*0.5 + pos*0.1;\n    ivec2 p = ivec2(pos);\n    \n    //pressure\n    vec4 P = textureLod(ch1, pos/R, 0.);\n    \n    //border render\n    vec3 bord = smoothstep(border_h+1.,border_h-1.,border(pos))*vec3(1.);\n    \n    //particle render\n    float rho = 0.;\n    range(i, -1, 1) range(j, -1, 1)\n    {\n       vec2 dx = vec2(i,j);\n       vec4 data = texel(ch0, pos + dx);\n       particle P = getParticle(data, pos + dx);\n       \n        vec2 x0 = P.X; //update position\n        //how much mass falls into this pixel\n        rho += 1.*P.M.x*G((pos - x0)/0.75);\n    }\n  \trho = tanh(2.*rho);\n    \n     vec4 D = pixel(ch2, pos);\n    float ang = atan(D.x, D.y);\n    float mag = 0. + 10.*length(D.xy)*rho;\n    \n    // Output to screen\n    fragColor = vec4(vec3(0.1,0.2,0.5)*rho + hsv2rgb(vec3(ang, 1., mag)) + bord + 0.*abs(P.x),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define Bf(p) p\n#define Bi(p) ivec2(p)\n#define texel(a, p) texelFetch(a, Bi(p), 0)\n#define pixel(a, p) texture(a, (p)/R)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n\n#define PI 3.14159265\n\n#define loop(i,x) for(int i = 0; i < x; i++)\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n#define dt 1.5\n\n#define border_h 5.\nvec2 R;\nfloat time;\n\nmat2 Rot(float ang)\n{\n    return mat2(cos(ang), -sin(ang), sin(ang), cos(ang)); \n}\n\nvec2 Dir(float ang)\n{\n    return vec2(cos(ang), sin(ang));\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat border(vec2 p)\n{\n    float bound = -sdBox(p - R*0.5, R*vec2(0.5, 0.5)); \n    float box = sdBox(Rot(0.4*time)*(p - R*0.5) , R*vec2(0.005, 0.2));\n    float drain = -sdBox(p - R*vec2(0.9, 0.05), vec2(0));\n    return max(drain,min(bound, box));\n}\n\n#define h 0.1\nvec3 bN(vec2 p)\n{\n    vec3 dx = vec3(-h,0,h);\n    vec4 idx = vec4(-1./h, 0., 1./h, 0.25);\n    vec3 r = idx.zyw*border(p + dx.zy)\n           + idx.xyw*border(p + dx.xy)\n           + idx.yzw*border(p + dx.yz)\n           + idx.yxw*border(p + dx.yx);\n    return vec3(normalize(r.xy), r.z);\n}\n\nuint pack(vec2 x)\n{\n    x = 65534.0*clamp(0.5*x+0.5, 0., 1.);\n    return uint(x.x) + 65535u*uint(x.y);\n}\n\nvec2 unpack(uint a)\n{\n    vec2 x = vec2(a%65535u, a/65535u);\n    return clamp(x/65534.0, 0.,1.)*2.0 - 1.0;\n}\n\nvec2 decode(float x)\n{\n    uint X = floatBitsToUint(x);\n    return unpack(X); \n}\n\nfloat encode(vec2 x)\n{\n    uint X = pack(x);\n    return uintBitsToFloat(X); \n}\n\nstruct particle\n{\n    vec2 X;\n    vec2 V;\n    vec2 M;\n};\n    \nparticle getParticle(vec4 data, vec2 pos)\n{\n    particle P; \n    P.X = decode(data.x) + pos;\n    P.V = decode(data.y);\n    P.M = data.zw;\n    return P;\n}\n\nvec4 saveParticle(particle P, vec2 pos)\n{\n    P.X = clamp(P.X - pos, vec2(-0.5), vec2(0.5));\n    return vec4(encode(P.X), encode(P.V), P.M);\n}\n\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat G(vec2 x)\n{\n    return exp(-dot(x,x));\n}\n\nfloat G0(vec2 x)\n{\n    return exp(-length(x));\n}\n\n//diffusion amount\n#define dif 1.15\nvec3 distribution(vec2 x, vec2 p)\n{\n    vec4 aabb0 = vec4(p - 0.5, p + 0.5);\n    vec4 aabb1 = vec4(x - dif*0.5, x + dif*0.5);\n    vec4 aabbX = vec4(max(aabb0.xy, aabb1.xy), min(aabb0.zw, aabb1.zw));\n    vec2 center = 0.5*(aabbX.xy + aabbX.zw); //center of mass\n    vec2 size = max(aabbX.zw - aabbX.xy, 0.); //only positive\n    float m = size.x*size.y/(dif*dif); //relative amount\n    //if any of the dimensions are 0 then the mass is 0\n    return vec3(center, m);\n}\n\nvoid Reintegration(sampler2D ch, inout particle P, vec2 pos)\n{\n    //basically sum over all updated neighbors \n    //that fall inside of this pixel\n    //this makes the tracking conservative\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = texel(ch, tpos);\n       \n        particle P0 = getParticle(data, tpos);\n       \n        P0.X += P0.V*dt; //integrate position\n\n        vec3 D = distribution(P0.X, pos);\n\n        //the deposited mass into this cell\n        float m = P0.M.x*D.z;\n        \n        //add weighted by mass\n        P.X += D.xy*m;\n        P.V += P0.V*m;\n        P.M.y += P0.M.y*m;\n        \n        //add mass\n        P.M.x += m;\n    }\n    \n    //normalization\n    if(P.M.x != 0.)\n    {\n        P.X /= P.M.x;\n        P.V /= P.M.x;\n        P.M.y /= P.M.x;\n    }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define mass 1.\n#define div 0.7\n\nvec2 Force(vec2 dx)\n{\n    return 0.*dx*exp(-dot(dx,dx));\n}\n\nvec2 Pressure(vec2 p)\n{\n    return pixel(ch1, p).zw;\n}\n\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    R = iResolution.xy; time = iTime;\n    ivec2 p = ivec2(pos);\n        \n    //particle velocity, mass and grid distributed density\n    vec2 F = vec2(0.);\n    \n    vec4 data = texel(ch0, pos); \n    \n    particle P;// = getParticle(data, pos);\n       \n    Reintegration(ch0, P, pos);\n    \n    if(P.M.x != 0.) //not vacuum\n    {\n        vec2 x = P.X;\n     \n        //border \n        vec3 N = bN(x);\n        N.z += 0.0001;\n\n        float vdotN = step(abs(N.z), border_h)*dot(N.xy, P.V);\n        P.V -= 0.5*(N.xy*vdotN + N.xy*abs(vdotN));\n        F += N.xy*step(abs(N.z), border_h)/N.z;\n\n        vec3 dx = vec3(-1., 0., 1.) + 1.;\n        \n        //global force field\n        vec2 pressure = Pressure(x);\n        \n        //avg velocity\n        vec2 av = pixel(ch2, x).xy;\n\n        F += 0.4*pressure + 0.*P.M.x*(av - P.V) + P.M.x*vec2(0., -0.0004);\n        \n        if(iMouse.z > 0.)\n        {\n            vec2 dm =(iMouse.xy - iMouse.zw)/10.; \n            float d = distance(iMouse.xy, x)/20.;\n            F += 0.001*dm*exp(-d*d);\n        }\n        \n        //integrate\n        P.V += 0.4*F*dt/P.M.x;\n        \n        //velocity limit\n        float v = length(P.V);\n        P.V /= (v > 1.)?v:1.;\n    }\n   \n    if(pos.x < 1.)\n    {\n    \t//vm.xyz = vec3(1.5, 0., 3.*mass);\n    }\n    \n    //initial condition\n    if(iFrame < 1)\n    {\n        //random\n        vec3 rand = hash32(pos);\n        if(rand.z < 0.1) \n        {\n            P.X = pos;\n            P.V = 0.5*(rand.xy-0.5) + vec2(0., 0.);\n            P.M = vec2(mass, mass);\n        }\n        else\n        {\n            P.X = pos;\n            P.V = vec2(0.);\n            P.M = vec2(0.);\n        }\n    }\n    \n    U = saveParticle(P, pos);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//velocity blur\n\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    R = iResolution.xy; time = iTime;\n    \n\tU = texel(ch1, pos);\n    vec4 av = vec4(0.); float s = 0.0001, s0 = s;\n    range(i, -3, 3) range(j, -3, 3)\n    {\n        vec2 dx = vec2(i,j);\n        vec4 data = texel(ch0, pos + dx); \n    \tparticle P = getParticle(data, pos);\n        vec4 dc = vec4(P.V, P.M);\n        float k = G(dx/1.2);\n        s0 += k;\n        s += dc.z*k;\n        av += vec4(dc.zz, 1., 1.)*k*dc.xyzw;\n    }\n    U.xy = av.xy/s; \n    U.zw = av.zw/s0; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//pressure solve\n\nvec2 V(vec2 p)\n{\n    vec4 d =texel(ch0, p); \n    return d.xy;\n}\n\nfloat P(vec2 p)\n{\n    return texel(ch1, p).x;\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    R = iResolution.xy; time = iTime;\n    \n    float b = border(pos);\n      \n    \n    vec3 dx = vec3(-1., 0., 1.);\n    //velocity divergence\n    float rho = texel(ch0, pos).z;\n    float div = 0.5*rho*(V(pos + dx.zy).x - V(pos + dx.xy).x +\n                     V(pos + dx.yz).y - V(pos + dx.yx).y);\n    //neighbor average\n    float L = 0.25*(P(pos + dx.zy) + P(pos + dx.xy) +\n                    P(pos + dx.yz) + P(pos + dx.yx));\n    U.x = L + div;\n  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//pressure solve + gradient\n\nvec2 V(vec2 p)\n{\n    vec4 d =texel(ch0, p); \n    return d.xy;\n}\n\nfloat sqr(float x)\n{\n\treturn x*x;\n}\n\n\nfloat Pf(float rho)\n{\n    //return 0.2*rho; //gas\n    return 0.14*rho*clamp(pow(abs(rho/0.2), 1.) - 1., -1., 1.); //water pressure\n}\n\nfloat Pv(vec2 p)\n{\n    return texel(ch1, p).x;\n}\n\nfloat P(vec2 p)\n{\n    float rho = texel(ch0, p).z;\n    return -Pf(rho) - 0.*rho + 0.0*texel(ch1, p).x;\n}\n\n\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    R = iResolution.xy; time = iTime;\n    \n    float b = border(pos);\n      \n    if(b > 0. || true) \n    {\n        vec3 dx = vec3(-1., 0., 1.);\n        //velocity divergence\n         float rho = texel(ch0, pos).z;\n        float div = 0.5*rho*(V(pos + dx.zy).x - V(pos + dx.xy).x +\n                         V(pos + dx.yz).y - V(pos + dx.yx).y);\n        //neighbor average\n        float L = 0.25*(Pv(pos + dx.zy) + Pv(pos + dx.xy) +\n                       Pv(pos + dx.yz) + Pv(pos + dx.yx));\n        U.x = L + div;\n    }  \n    \n    \n    vec3 dx = vec3(-1., 0., 1.);\n    //global force field\n    vec2 pressure = 0.5*vec2(P(pos + dx.zy) - P(pos + dx.xy),\n                             P(pos + dx.yz) - P(pos + dx.yx));\n    U.zw = pressure;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}