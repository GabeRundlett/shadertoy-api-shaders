{
    "Shader": {
        "info": {
            "date": "1654002020",
            "description": "mouse.x shows the full res texture.\nPurpose is to display an image \"as if\" vectorized at low resolution.\nTriangle variant of  https://www.shadertoy.com/view/NddyRl",
            "flags": 0,
            "hasliked": 0,
            "id": "fdccDB",
            "likes": 9,
            "name": "marching triangles on texture",
            "published": 3,
            "tags": [
                "short",
                "marchingcubes",
                "marchingsquares",
                "vectorization"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 366
        },
        "renderpass": [
            {
                "code": "int      lod = 6;\nfloat thresh = .4;\n\n// relying on hexagonal tiling tuto https://www.shadertoy.com/view/4dKXR3\n\n//#define s    textureSize(iChannel0,0)\n#define S(v)  smoothstep( -.8,.8,(v)/fwidth(v) )          // antialiasing draw\n#define T(U)  textureLod(iChannel0, U , float(lod)-1. ).r // or lod=0 for fun\n#define G(uv) ( ( (floor(U) + uv) *mat2(1,.5,0,.86) ) *Z/1024. )\n\nvoid mainImage( out vec4 O, vec2 U )\n{ \n    float Z = exp2(float(lod)),                           // scaling\n          t = floor(30.*iTime),                           // animation\n          h = iResolution.y;\n    U *= h/512.; U += t; \n    if ( iMouse.x*h/512. > U.x-t ) {                      // mouse.x show ref\n        O = vec4( texture(iChannel0, U/h).r > thresh, T(U/h)  > thresh , 0,1);\n        return;\n    }\n          \n    U *= mat2(1,-1./1.73, 0,2./1.73) *1024./Z/h;          // conversion to\n    vec3 g = vec3(U, 1.-U.x-U.y);                         // hexagonal coordinates\n\tg = fract(g);                                         // diamond coords\n    bool side = length(g)>1.;                             // tri: which diamond half\n \n    vec3 V = side ? vec3( T(G(vec2(1))), T(G(vec2(0,1))), T(G(vec2(1,0))) ) // samples at corder\n                  : vec3( T(G(vec2(0))), T(G(vec2(1,0))), T(G(vec2(0,1))) );\n    if (side) g = 1.-g;                                   // barycentric coordinates\n    O = vec4( S( (1.-g.x-g.y)*V.x + g.x*V.y + g.y*V.z - thresh ) );\n    if (step(thresh,V)==vec3(0)) O += .3;                 // empty cell ( for test )\n    \n    O = mix( vec4(.5), O, S(min(g.x,min(g.y,g.z)) ));     // grid\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}