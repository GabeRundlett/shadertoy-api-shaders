{
    "Shader": {
        "info": {
            "date": "1721409152",
            "description": "Inspired by Kishimisu Shader Art Coding Introduction",
            "flags": 0,
            "hasliked": 0,
            "id": "4clczf",
            "likes": 4,
            "name": "Kaleidouscoupe 2",
            "published": 3,
            "tags": [
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "LoganOracio",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.7, 0.55, 0.6);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nuint murmurHash12(uvec2 src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nfloat hash12(vec2 src) {\n    uint h = murmurHash12(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\nfloat lerp(float x, float y, float v)\n{\n    if(v<=0.0) return x;\n    else if(v>=1.0) return y;\n    else\n    { \n        return (y - x) * (((v * 6.0 - 15.0) * v + 10.0) * v * v * v) + x;\n    }\n}\nvec2 random_gradient(vec2 uv)\n{\n    float angle = hash12(uv)*2.0*3.14159265358979;\n    return vec2(cos(angle),sin(angle));\n}\nfloat dot_gradient(vec2 i, vec2 uv)\n{\n    vec2 d = uv - i;\n    vec2 grad = random_gradient(vec2(i.x,i.y));\n    return d.x*grad.x + d.y*grad.y;\n}\nfloat pnoise(vec2 uv)\n{\n    vec2 fr = fract(uv);\n    vec2 fl = floor(uv);\n    \n    float n0 = dot_gradient(fl,uv);\n    float n1 = dot_gradient(fl+vec2(1.0,0.0),uv);\n    float o0 = lerp(n0,n1,uv.x-fl.x);\n    \n    n0 = dot_gradient(fl+vec2(0.0,1.0),uv);\n    n1 = dot_gradient(fl+vec2(1.0,1.0),uv);\n    float o1 = lerp(n0,n1,uv.x-fl.x);\n    \n    return lerp(o0,o1,uv.y-fl.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pix_l = 1.0/iResolution.xy;\n    vec2 uv = fragCoord*pix_l;\n    uv -= 0.5;\n    uv *= 28.0;\n    uv.y *= iResolution.y/iResolution.x;\n    float theta = atan(uv.x,uv.y);\n    float ntheta = mod(theta,3.1415926535/8.0)-3.14159265358979/16.0;\n    float dist = pow(length(uv),0.7);\n    vec2 uv2 = vec2(cos(ntheta)*dist,sin(ntheta)*dist);\n    if(mod(floor(theta/(3.1415926535/8.0)),2.0)==0.0)\n    {\n        uv2.y = -uv2.y;\n    }\n    vec3 col = vec3(0.0);\n    for(int i = 0; i < 22; i++)\n    {\n        float scale = pow(hash12(vec2(i,10.0)),1.0);\n        float b = abs(length(uv2+vec2(\n                cos((iTime)*(.1+0.3*hash12(vec2(i,1.0))))*4.0*hash12(vec2(i,8.0))*scale-1.0*(1.0+hash12(vec2(i,4.0))),\n                sin((iTime)*(.1+0.3*hash12(vec2(i,2.0))))*4.0*hash12(vec2(i,9.0))*scale)\n                )-4.0*scale\n            );\n        b=max(b-0.02,0.0);\n        b=exp(-200.0*b/pow(dist+2.0,1.5));\n        col += palette(b*.2 + uv2.x*.2 - iTime*1.0 + float(i)*.134)*b;\n    }\n    col = vec3(pow(col.x,0.5),pow(col.y,0.5),pow(col.z,0.5));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}