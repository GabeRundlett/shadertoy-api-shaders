{
    "Shader": {
        "info": {
            "date": "1637244718",
            "description": "\"Texture Generation with Ultra-Compact Neural Cellular Automata\" supplementary material\nA collection of Texture generating NCA-68 rules.\nSee \"Buffer A\" for the NCA code",
            "flags": 32,
            "hasliked": 0,
            "id": "slGGzD",
            "likes": 42,
            "name": "micro Texture NCA (68 params)",
            "published": 3,
            "tags": [
                "ca"
            ],
            "usePreview": 0,
            "username": "Anony",
            "viewed": 1802
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    init(iResolution);\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv/Scale)+0.5;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 rule0(vec4 s, vec4 p) {\n  return 1e-3*(vec4(24,12,-8,-2)+\n    mat4(-101,5,9,-34,-45,-150,1,-23,-26,97,-33,6,21,26,33,-42)*s+\n    mat4(-17,-75,-91,15,30,82,98,-9,-59,-58,-47,-13,-31,-7,2,-16)*p+\n    mat4(5,27,15,-17,37,45,80,-52,-19,-47,-72,78,61,18,24,-4)*abs(s)+\n    mat4(33,6,13,14,-40,-20,-30,-6,-21,8,17,-13,-31,3,10,-10)*abs(p));     \n}\nvec4 rule1(vec4 s, vec4 p) {\n  return 1e-3*(vec4(-15,-2,-9,24)+\n    mat4(-66,-52,-1,16,21,-88,1,58,-21,36,-91,-42,12,15,7,-42)*s+\n    mat4(38,-75,-41,-62,13,22,23,35,11,15,16,34,0,0,0,0)*p+\n    mat4(-57,42,5,-44,-3,-39,-76,-76,-4,-29,-36,-56,87,-5,61,37)*abs(s)+\n    mat4(-25,-6,-18,-5,-8,13,10,11,-4,6,4,-3,0,-1,1,-2)*abs(p));     \n}\nvec4 rule2(vec4 s, vec4 p) {\n  return 1e-3*(vec4(4,-10,-27,18)+\n    mat4(-67,1,2,44,-13,-59,4,30,-1,16,-57,9,-10,-4,-2,-41)*s+\n    mat4(19,-18,-1,8,-4,35,8,0,-4,-4,-1,0,34,31,21,-25)*p+\n    mat4(4,13,18,-57,-79,-22,-25,71,-12,-11,24,27,-17,-8,-7,6)*abs(s)+\n    mat4(11,10,4,0,4,1,2,7,-26,-33,-15,-3,22,27,20,-34)*abs(p));     \n}\nvec4 rule3(vec4 s, vec4 p) {\n  return 1e-3*(vec4(-17,17,0,-3)+\n    mat4(-102,25,28,-21,-15,-32,62,-47,37,31,-68,-27,-3,18,13,-78)*s+\n    mat4(62,1,34,18,-70,29,-10,-10,1,0,1,1,-29,-19,-26,-65)*p+\n    mat4(-66,-1,-38,-26,108,-17,66,-62,22,-21,10,-51,-16,-16,-16,13)*abs(s)+\n    mat4(20,-17,4,40,1,46,24,-14,9,-6,0,23,-5,-36,-32,-13)*abs(p));     \n}\nvec4 rule4(vec4 s, vec4 p) {\n  return 1e-3*(vec4(-1,1,-5,-19)+\n    mat4(-42,-2,14,-10,6,-35,6,-23,16,19,-37,-10,17,24,16,-33)*s+\n    mat4(19,1,6,0,-18,3,-2,1,1,0,1,-3,25,24,26,35)*p+\n    mat4(7,-10,-7,1,-2,10,2,3,-11,-12,3,-28,1,4,1,-21)*abs(s)+\n    mat4(1,1,2,5,1,2,-1,0,-13,-17,-15,-4,20,22,26,40)*abs(p));     \n}\nvec4 rule5(vec4 s, vec4 p) {\n  return 1e-3*(vec4(9,6,23,-23)+\n    mat4(-173,36,-6,8,32,-111,0,65,7,26,-120,-61,70,26,63,-34)*s+\n    mat4(-57,-85,-63,-1,53,80,57,11,16,20,17,30,0,0,0,-1)*p+\n    mat4(84,-9,69,29,16,-31,-44,-11,21,69,0,-4,-80,-20,-58,0)*abs(s)+\n    mat4(11,19,39,-2,-16,-13,-30,0,0,-8,-11,20,1,-2,-10,4)*abs(p));\n}\nvec4 rule6(vec4 s, vec4 p) {\n  return 1e-3*(vec4(19,-8,5,10)+\n    mat4(-61,25,22,-19,11,-35,40,-16,14,9,-71,-18,22,18,28,-60)*s+\n    mat4(31,-10,21,14,-34,16,-19,-20,-7,-17,-8,8,-21,-9,-8,-50)*p+\n    mat4(10,50,56,-47,-44,-38,-96,29,-27,27,9,3,5,22,11,3)*abs(s)+\n    mat4(0,2,6,-2,-8,-3,-11,-5,-6,2,4,-20,0,-4,-8,24)*abs(p));\n}\nvec4 rule7(vec4 s, vec4 p) {\n  return 1e-3*(vec4(-27,2,0,-4)+\n    mat4(-40,12,2,10,-9,-60,32,30,13,-2,-85,13,-26,-40,-29,-68)*s+\n    mat4(43,18,38,34,-11,38,1,22,-8,-12,-9,-4,27,36,30,68)*p+\n    mat4(20,-19,-8,-9,17,2,21,138,13,51,1,-41,-17,-24,-16,-33)*abs(s)+\n    mat4(8,8,7,-21,3,21,13,5,24,29,21,-27,3,-1,3,12)*abs(p));\n}\nvec4 rule8(vec4 s, vec4 p) {\n  return 1e-03*(vec4(6,-6,-19,-5)+\n    mat4(-68,14,-51,-3,37,-104,-37,21,-5,12,-43,0,27,20,35,-68)*s+\n    mat4(-12,-33,-30,-19,28,34,21,19,-7,-46,-56,2,32,13,5,-24)*p+\n    mat4(18,29,39,58,-81,-19,-5,-24,16,-8,12,-39,-37,-22,-21,21)*abs(s)+\n    mat4(13,8,-1,-12,-4,-1,-1,9,-4,-18,-28,8,-18,5,3,45)*abs(p));\n}\nvec4 rule9(vec4 s, vec4 p) {\n  return 1e-03*(vec4(-12,28,7,4)+\n    mat4(-30,-21,-52,31,9,-32,22,-30,27,29,-60,-8,41,15,-15,-60)*s+\n    mat4(78,-105,-55,3,-11,57,31,22,9,8,17,28,0,0,0,-1)*p+\n    mat4(-46,-8,-22,28,61,-6,141,-4,21,-23,-42,0,-103,-8,-4,-40)*abs(s)+\n    mat4(9,-92,-51,12,30,4,0,7,1,12,6,-36,7,17,9,16)*abs(p));\n}\nvec4 rule10(vec4 s, vec4 p) {\n  return 1e-03*(vec4(45,-17,6,20)+\n    mat4(-32,26,7,15,56,-88,52,-31,-45,61,-47,-2,-7,4,-2,-85)*s+\n    mat4(61,-2,-12,-19,-70,9,17,27,1,8,-18,17,28,-33,-2,-70)*p+\n    mat4(-5,50,7,59,-114,-62,-33,-49,12,78,14,-10,0,9,0,31)*abs(s)+\n    mat4(14,4,-1,-8,-10,-5,1,21,-15,-2,-23,-2,-40,-18,10,-28)*abs(p));\n}\nvec4 rule11(vec4 s, vec4 p) {\n return 1e-03*(vec4(15,-30,-47,61)+\n   mat4(-69,42,46,-8,45,-88,-14,-3,-13,-6,-64,4,-7,-8,-6,-30)*s+\n   mat4(24,4,18,15,-12,-1,-12,-14,6,-2,-2,4,0,-19,-15,34)*p+\n   mat4(-5,52,25,-185,-122,-1,49,-26,-2,-45,26,-15,4,-10,-25,5)*abs(s)+\n   mat4(13,-7,-3,28,-4,0,-1,-10,11,18,8,0,4,23,17,-29)*abs(p));\n}\nconst float ruleN=12.0;\n\nvec4 hash43(vec3 p) {\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec4 R(float x, float y) {\n    return texture(iChannel0, vec2(x, y));\n}\n\nfloat wrap(float x, float a, float b) {\n  return mod(x-a,b-a)+a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  init(iResolution);\n  vec2 dp = 1.0/iResolution.xy;\n  vec2 pos = fragCoord*dp;\n  \n  if (any(greaterThan(pos*Scale, vec2(1.0))))\n    discard;\n    \n  const float tileSize = 112.0;\n  \n  vec2 sz=1.0/vec2(Scale);\n  float x=pos.x, y=pos.y;\n  vec2 lo = dp*floor(fragCoord/tileSize)*tileSize;\n  vec2 hi = min(lo+tileSize*dp, sz);\n  float l=wrap(x-dp.x, lo.x, hi.x), r=wrap(x+dp.x, lo.x, hi.x);\n  float u=wrap(y-dp.y, lo.y, hi.y), d=wrap(y+dp.y, lo.y, hi.y);\n  vec4 s = R(x,y);\n  if (s == vec4(0, 0, 0, 0) || iMouse.z>0.0 && length(iMouse.xy/Scale-fragCoord)<20.0) {\n    fragColor = hash43(vec3(fragCoord, iFrame))-0.5;\n    return;\n  }  \n  vec4 p = R(l,u)*vec4(1,1,-1, 1) + R(x,u)*vec4(2,2,0, 2) + R(r,u)*vec4(1,1,1, 1)\n         + R(l,y)*vec4(2,2,-2, 0) +  s*vec4(-12,-12,0, 0) + R(r,y)*vec4(2,2,2, 0)\n         + R(l,d)*vec4(1,1,-1,-1) + R(x,d)*vec4(2,2,0,-2) + R(r,d)*vec4(1,1,1,-1);\n  \n  vec4 ds;\n  vec2 rulePos = floor(fragCoord.xy/tileSize);\n  float ri = mod(rulePos.x+rulePos.y*4., ruleN);\n  if (ri<1.0) {ds = rule0(s, p);} \n  else if (ri<2.0) {ds = rule1(s, p);} \n  else if (ri<3.0) {ds = rule2(s, p);}\n  else if (ri<4.0) {ds = rule3(s, p);}\n  else if (ri<5.0) {ds = rule4(s, p);}\n  else if (ri<6.0) {ds = rule5(s, p);}\n  else if (ri<7.0) {ds = rule6(s, p);}\n  else if (ri<8.0) {ds = rule7(s, p);}\n  else if (ri<9.0) {ds = rule8(s, p);}\n  else if (ri<10.0) {ds = rule9(s, p);}\n  else if (ri<11.0) {ds = rule10(s, p);}  \n  else {ds = rule11(s, p);}\n\n\n  fragColor = clamp(s+ds, -1.5, 1.5);\n  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float Scale = 1.0;\n\nvoid init(vec3 resolution) {\n  float d = max(resolution.x, resolution.y);\n  Scale = ceil(d/1024.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}