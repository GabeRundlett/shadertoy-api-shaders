{
    "Shader": {
        "info": {
            "date": "1577794626",
            "description": "Chenonceau perhaps; summer/winter, day/night, rotating/traveling viewer; vertical mouse selects page (different views), horizontal pans.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wtd3Df",
            "likes": 22,
            "name": "Chateaux...",
            "published": 3,
            "tags": [
                "raymarch",
                "tree",
                "river",
                "architecture",
                "book",
                "building"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 656
        },
        "renderpass": [
            {
                "code": "// \"Chateaux...\"  by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA    0   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat PrConeDf (vec3 p, vec3 b);\nfloat SmootherStep (float a, float b, float x);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvec4 snowCol;\nvec3 sunDir, trkA, trkF, bldSize, ltDirEx, qHit, pgSize;\nvec2 gId, trOff, trkA2, trkF2;\nfloat tCur, dstFar, hgSize, szFac, trSym, grHt, trRot, snowFac, zRep, bldSzFac,\n   dstFarEx, tpBook, phsTurn, idPage, msAz, msEl;\nint idObj, vuMode;\nbool isNt, isFlsh;\nconst int idFnd = 1, idWal = 2, idWin = 3, idTwr = 4, idRf = 5, idFlr = 6, idRmp = 7, \n   idPil = 8, idRod = 9, idFlag = 10, idTrnk = 21, idLv = 22, idRk = 23;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\nconst int nPage = 6;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nvec2 TrackPathS (float t)\n{\n  return vec2 (dot (trkA, cos (2. * pi * trkF * t)), t);\n}\n\nvec2 TrackPath (float t)\n{\n  return TrackPathS (t) + vec2 (dot (trkA2, cos (2. * pi * trkF2 * t)), 0.);\n}\n\nfloat GrndHt (vec2 p)\n{\n  float h, w;\n  h = 0.5 + 0.17 * (sin (dot (p, vec2 (1., 1.4))) + sin (dot (p, vec2 (-1.2, 0.8)))) *\n     smoothstep (1., 2., abs (mod (p.y + zRep, 2. * zRep) - zRep));\n  w = abs (p.x - TrackPath (p.y).x) * (1.1 + 0.3 * sin (0.5 * p.y));\n  h = h * SmootherStep (4.35, 5., w) - 0.05 * (1. - w * w / (4.3 * 4.3)) * step (w, 4.3);\n  return h;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.05, 0.5 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy),\n     GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\nfloat ObjCdf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, ht;\n  dMin = dstFar;\n  p.xz -= HexToPix (gId) * hgSize + trOff;\n  if (szFac > 0.) {\n    dMin /= szFac;\n    p.xz = Rot2D (p.xz, trRot);\n    p.y -= grHt - 0.1;\n    p /= szFac;\n    ht = 2.2;\n    q = p;\n    q.y -= ht;\n    d = PrCylDf (q.xzy, 0.12 - 0.03 * q.y / ht, ht);\n    qq = p;\n    qq.xz = Rot2D (qq.xz, 2. * pi * (floor (trSym * atan (qq.z, - qq.x) / (2. * pi) +\n       0.5) / trSym));\n    q = qq;\n    q.xy = Rot2D (q.xy - vec2 (-0.2, 0.3), -0.3 * pi);\n    d = SmoothMin (d, PrCylDf (q.yzx, 0.09 + 0.02 * q.x / 0.6, 0.6), 0.2);\n    q = qq;\n    q.xy = Rot2D (q.xy - vec2 (-0.2, 1.2 * ht), 0.3 * pi);\n    d = SmoothMin (d, PrCylDf (q.yzx, 0.05 + 0.02 * q.x / 0.5, 0.5), 0.1);\n    DMIN (idTrnk);\n    q = p;\n    q.y -= 2. * ht;\n    d = SmoothMin (min (PrSphDf (q + vec3 (0, -1., 0.), 0.6),\n       PrSphDf (vec3 (qq.x + 0.4, q.y + 1., qq.z), 0.6)), PrSphDf (q, 1.), 0.5);\n    DMIN (idLv);\n    dMin *= szFac;\n  } else  if (szFac < 0.) {\n    q = p;\n    d = PrSphDf (q, - szFac * 0.25);\n    DMIN (idRk);\n  }\n  return dMin;\n}\n\nvoid SetTrParms ()\n{\n  vec2 g, w, v;\n  float s;\n  szFac = 0.3 + 0.4 * Hashfv2 (17. * gId + 99.);\n  trSym = floor (3. + 2.9 * Hashfv2 (19. * gId + 99.));\n  w = Hashv2v2 (33. * gId);\n  g = HexToPix (gId) * hgSize;\n  s = abs (g.x - TrackPath (g.y).x);\n  if (length (vec2 (max (s, 10.), mod (g.y + zRep, 2. * zRep) - zRep)) < 10.5) {\n    szFac = 0.;\n  } else {\n    v = w.x * sin (2. * pi * w.y + vec2 (0.5 * pi, 0.));\n    if (s < 1.5) {\n      trOff = hgSize * 0.5 * sqrt3 * v;\n      szFac *= -1.;\n    } else if (s < 6.5) {\n      szFac = 0.;\n    } else {\n      trOff = max (0., hgSize * 0.5 * sqrt3 - szFac) * v;\n      trRot = 0.6 * pi * (Hashfv2 (23. * gId + 99.) - 0.5);\n      grHt = GrndHt (g + trOff);\n    }\n  }\n}\n\nfloat ObjCRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-99.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = min (hv.x, min (hv.y, hv.z));\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetTrParms ();\n    }\n    d = ObjCdf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjCNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0005, -0.0005);\n  v = vec4 (- ObjCdf (p + e.xxx), ObjCdf (p + e.xyy), ObjCdf (p + e.yxy), ObjCdf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjCSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-99.);\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetTrParms ();\n    }\n    h = ObjCdf (p);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += clamp (h, 0.05, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 vb, vc;\n  float dMin, d, dd, t;\n  dMin = dstFar;\n  dMin /= bldSzFac;\n  p.z = mod (p.z + zRep, 2. * zRep) - zRep;\n  p.x -= TrackPath (0.).x;\n  p /= bldSzFac;\n  p.y -= 1.;\n  q = p;\n  q.x = abs (q.x) - bldSize.x - 3.;\n  q.y -= 0.6 - 0.2 * q.x;\n  d = max (PrBoxDf (q, vec3 (2.64, 0.3, 0.7)),\n     - PrBox2Df (q.yz - vec2 (0.2, 0.), vec2 (0.3, 0.6)));\n  DMIN (idRmp);\n  q.xz = abs (q.xz) - vec2 (2.7, 0.65);\n  d = PrCylDf (q.xzy, 0.08, 0.33);\n  DMIN (idPil);\n  q = p;\n  d = abs (q.x) - 5.;\n  q.x = mod (q.x + 1., 2.) - 1.;\n  d = max (PrFlatCylDf (q.zxy, bldSize.z + 0.3, 0.4, 1.), d);\n  DMIN (idFnd);\n  q = p;\n  q.y -= 0.5;\n  d = max (PrBoxDf (q, vec3 (bldSize.x + 0.4, 0.5, bldSize.z + 0.3)),\n     0.6 - length (vec2 (mod (q.x, 2.) - 1., q.y + 0.5)));\n  DMIN (idFnd);\n  q = p;\n  q.y -= 1. + bldSize.y;\n  vb = mod (q.xz + 0.5, 1.) - 0.5;\n  vc = abs (q.xz) - bldSize.xz + 0.15;\n  d = max (max (max (PrBoxDf (q, bldSize), - PrBox2Df (q.xz, bldSize.xz - 0.14)),\n     - min (max (PrBox2Df (vec2 (vb.x, abs (q.y) - 0.7), vec2 (0.2, 0.45)), vc.x),\n     max (PrBox2Df (vec2 (vb.y, abs (q.y) - 0.7), vec2 (0.2, 0.45)), vc.y))),\n     0.3 - length (vc - 0.15));\n  dd = PrBox2Df (vec2 (q.y + 0.85, q.z), vec2 (0.6, 0.35));\n  d = max (d, - dd);\n  DMIN (idWal);\n  q = p;\n  q.y -= 1. + 2. * bldSize.y + 0.15;\n  vb = abs (mod (q.xz + 0.25, 0.5) - 0.25);\n  d = max (max (PrBoxDf (q, vec3 (bldSize.x, 0.15, bldSize.z)), - PrBox2Df (q.xz, bldSize.xz - 0.1)),\n     -0.125 + max (vb.x, vb.y));\n  DMIN (idWal);\n  q = p;\n  q.y -= 1. + bldSize.y - 0.1;\n  d = PrBoxDf (q, vec3 (bldSize.x, 0.05, bldSize.z));\n  DMIN (idFlr);\n  q = p;\n  t = abs (q.z) - bldSize.z + 0.05;\n  q.yz = vec2 (abs (q.y - (1. + bldSize.y) - 0.1) - 0.7, t);\n  d = PrCylDf (q.yzx, 0.025, bldSize.x);\n  q = vec3 (mod (p.x + 0.5, 1.) - 0.5, p.y - (1. + bldSize.y), t);\n  d = min (d, max (PrCylDf (q.xzy, 0.025, bldSize.y), vc.x));\n  DMIN (idWin);\n  q = p;\n  t = abs (q.x) - bldSize.x + 0.05;\n  q.xy = vec2 (t, abs (q.y - (1. + bldSize.y) - 0.1) - 0.7);\n  d = PrCylDf (q, 0.025, bldSize.z);\n  q = vec3 (t, p.y - (1. + bldSize.y), mod (p.z + 0.5, 1.) - 0.5);\n  d = min (d, max (PrCylDf (q.xzy, 0.025, bldSize.y), vc.y));\n  d = max (d, - dd);\n  DMIN (idWin);\n  q = p;\n  q.y -= 2. * bldSize.y + 2.15;\n  d = 0.7 * max (max (q.y + max (abs (q.x) - 2.75, 0.6 * abs (q.z)), - q.y - 1.2),\n     PrBox2Df (q.xz, bldSize.xz - 0.1));\n  DMIN (idRf);\n  q = vec3 (vc - 0.15, p.y - (1.2 + bldSize.y)).xzy;\n  d = PrCylDf (q.xzy, 0.3, bldSize.y + 0.2);\n  DMIN (idTwr);\n  q.y -= 1. + bldSize.y;\n  d = 0.9 * PrConeDf (q.xzy, vec3 (1., 0.3, 0.8));\n  DMIN (idRf);\n  q.y -= 0.15;\n  d = PrCylDf (q.xzy, 0.03, 0.3);\n  DMIN (idRod);\n  q.xy -= vec2 (0.2 * sign (p.x), 0.15);\n  d = PrRoundBoxDf (q, vec3 (0.2, 0.1, 0.005), 0.005);\n  DMIN (idFlag);\n  return bldSzFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.05, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, clCol, skCol;\n  vec2 q;\n  float f, ff, fd;\n  rd.y = abs (rd.y) + 0.0001;\n  q = 0.01 * (ro.xz + 4. * tCur + ((50. - ro.y) / rd.y) * rd.xz);\n  ff = Fbm2 (q);\n  f = smoothstep (0.2, 0.8, ff);\n  fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n  clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n     smoothstep (0., 0.05, abs (fd)));\n  fd = smoothstep (0.01, 0.1, rd.y);\n  skCol = isNt ? vec3 (0.2, 0.2, 0.2) : vec3 (0.4, 0.5, 0.8);\n  skCol = mix ((vec3 (0.7, 0.7, 0.75)), skCol, 0.3 + 0.7 * fd);\n  col = mix (skCol, (isNt ? 0.8 : 1.) * clCol, 0.1 + 0.9 * f * fd);\n  return col;\n}\n\nvoid BldCol (vec3 p, vec3 vn, out vec4 col4, out vec2 vf)\n{\n  vec4 snCol, wallCol;\n  vec3 u, uu;\n  float zColr;\n  snCol = snowCol;\n  u = p;\n  u.x -= TrackPath (0.).x;\n  zColr = mod (floor (u.z / (2. * zRep) + 0.5), 4.);\n  u.z = mod (u.z + zRep, 2. * zRep) - zRep;\n  u /= bldSzFac;\n  u.y -= 1.;\n  wallCol = vec4 (HsvToRgb (vec3 (0.05 + 0.06 * zColr / 3., 0.7, 1.)), 0.1);\n  col4 = vec4 (0.);\n  vf = vec2 (0.);\n  if (idObj == idWal) {\n    uu.xz = mod (u.xz + 0.5, 1.) - 0.5;\n    u.xz = abs (u.xz);\n    uu.y = u.y - 1. - bldSize.y;\n    if (abs (uu.y + 0.85) < 0.7 && u.x > bldSize.x - 0.2 && u.z < 0.45) {\n      col4 = vec4 (0.3, 0.5, 0.4, 0.1);\n    } else if (abs (abs (uu.y) - 0.7) < 0.5 && (u.z > bldSize.z - 0.2 &&\n       abs (uu.x) < 0.25 || u.x > bldSize.x - 0.2 && abs (uu.z) < 0.25)) {\n       col4 = vec4 (0.7, 0.6, 0.5, 0.1);\n    } else {\n      col4 = wallCol;\n      if (abs (u.x) > bldSize.x - 0.01 || abs (u.z) > bldSize.z - 0.01)\n         col4.rgb *= 0.9 + 0.1 * SmoothBump (0.1, 0.9, 0.02, mod (10. * u.y + 0.5, 1.));\n    }\n    if (u.y < 2. * bldSize.y + 1.) snCol.r = -1.;\n    vf = vec2 (32., 0.2);\n  } else if (idObj == idTwr) {\n    col4 = wallCol;\n    vf = vec2 (32., 0.2);\n  } else if (idObj == idRf) {\n    col4 = vec4 (0.55, 0.6, 0.55, 0.1) * (0.93 +\n       0.07 * SmoothBump (0.05, 0.95, 0.02, mod (8. * u.y, 1.)));\n  } else if (idObj == idFnd) {\n    if (vn.y > 0.99) {\n      if (abs (u.x) < bldSize.x && abs (u.z) < bldSize.z) {\n        col4 = (isNt ? 0.6 : 1.) * vec4 (0.5, 0.2, 0., 0.1);\n        snCol.r = -1.;\n      } else {\n        if (vuMode == 0) {\n          col4 = vec4 (0.5, 0.5, 0.55, 0.1);\n        } else {\n          col4 = 0.4 * wallCol;\n          snCol.r = -1.;\n        }\n        vf = vec2 (32., 0.2);\n      }\n    } else {\n      col4 = 0.7 * wallCol;\n      if (u.y < -0.6) col4.rgb *= 0.8 * (0.8 +\n         0.2 * SmoothBump (0.1, 0.9, 0.02, mod (8. * u.y, 1.)));\n      if (u.y < 0.6 && abs (u.z) < bldSize.z) col4.rgb *= (0.8 +\n         0.2 * SmoothBump (0.08, 0.92, 0.02, mod (4. * u.z, 1.)));\n      vf = vec2 (32., 0.5);\n    }\n  } else if (idObj == idRmp) {\n    if (abs (vn.z) > 0.99) col4 = wallCol;\n    else col4 = vec4 (0.5, 0.5, 0.55, 0.1);\n    vf = vec2 (32., 0.2);\n  } else if (idObj == idPil) {\n    col4 = wallCol;\n    vf = vec2 (32., 0.1);\n  } else if (idObj == idFlr) {\n    col4 = (isNt ? 0.6 : 1.) * vec4 (0.5, 0.2, 0., 0.1);\n    snCol.r = -1.;\n  } else if (idObj == idWin) {\n    col4 = vec4 (0.4, 0.4, 0.3, 0.3);\n    vf = vec2 (16., 0.3);\n  } else if (idObj == idRod) {\n    col4 = vec4 (0.9, 0.9, 0.9, 0.2);\n  } else if (idObj == idFlag) {\n    col4 = vec4 (mix (HsvToRgb (vec3 (zColr / 4., 1., 1.)), vec3 (1.2),\n       step (u.y, 2. * bldSize.y + 2.5)), 0.2);\n  }\n  if (snCol.r > 0.) {\n    col4 = mix (col4, snCol, snowFac * smoothstep (0.3, 0.8, vn.y));\n    if (snowFac > 0.5) vf = vec2 (32., 2. * smoothstep (0.5, 0.7, snowFac)) *\n       smoothstep (0.3, 0.8, vn.y);\n  }\n}\n\nvoid TrStCol (vec3 p, vec3 vn, out vec4 col4, out vec2 vf)\n{\n  vec4 snCol;\n  float h1, h2;\n  col4 = vec4 (0.);\n  vf = vec2 (0.);\n  gId = PixToHex (p.xz / hgSize);\n  h1 = Hashfv2 (gId * vec2 (17., 27.) + 0.5);\n  h2 = Hashfv2 (gId * vec2 (19., 29.) + 0.5);\n  if (idObj == idTrnk) {\n    col4 = vec4 (HsvToRgb (vec3 (0.1 * h1, 0.5, 0.4 - 0.2 * h2)), 0.);\n    snCol = mix (snowCol, mix (col4, snowCol, smoothstep (0.01, 0.2, vn.y)),\n       smoothstep (0.1 * szFac, 0.3 * szFac, p.y - GrndHt (HexToPix (gId) * hgSize)));\n    vf = vec2 (32., 2.);\n  } else if (idObj == idLv) {\n    col4 = vec4 (HsvToRgb (vec3 (0.2 + 0.2 * h1, 0.7, 0.8 - 0.4 * h2)) *\n       (1. - 0.2 * Noisefv3 (64. * p)), 0.05);\n    snCol = mix (0.6 * col4, snowCol, 0.2 + 0.8 * smoothstep (-0.8, -0.6, vn.y));\n    vf = vec2 (16., mix (2., 8., 1. - snowFac));\n  } else if (idObj == idRk) {\n    col4 = vec4 (mix (vec3 (0.4, 0.3, 0.3), vec3 (0.3, 0.4, 0.5), Fbm2 (16. * p.xz)), 0.1);\n    snCol = mix (col4, snowCol, 0.2 + 0.8 * smoothstep (0.1, 0.3, vn.y));\n    vf = vec2 (8., 8.);\n  }\n  col4 = mix (col4, snCol, snowFac);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, c1, c2, vn, vnw, rog, roo, rdo;\n  vec2 vf;\n  float dstObjC, dstObjM, dstObj, dstGrnd, dstWat, sh, spec, s, glit;\n  int idObjC;\n  bool isRefl, isSky, isGlit;\n  hgSize = 1.5;\n  bldSize = vec3 (4., 1.5, 2.);\n  bldSzFac = 0.5;\n  isRefl = false;\n  isSky = false;\n  isGlit = false;\n  snowCol = vec4 (0.9, 0.9, 0.95, 0.2);\n  spec = 0.;\n  roo = ro;\n  rdo = rd;\n  dstGrnd = GrndRay (ro, rd);\n  dstObjC = ObjCRay (ro, rd);\n  idObjC = idObj;\n  dstObjM = ObjRay (ro, rd);\n  dstWat = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  rog = ro + dstGrnd * rd;\n  dstObj = min (dstObjM, dstObjC);\n  if (dstWat < min (min (dstGrnd, dstObj), dstFar)) {\n    ro += dstWat * rd;\n    vnw = VaryNf (ro + vec3 (0., 0., 0.2 * tCur), vec3 (0., 1., 0.),\n       0.2 - 0.18 * smoothstep (0.1, 0.15, dstWat / dstFar));\n    rd = reflect (rd, vnw);\n    ro += 0.01 * rd;\n    dstGrnd = GrndRay (ro, rd);\n    dstObjC = ObjCRay (ro, rd);\n    idObjC = idObj;\n    dstObjM = ObjRay (ro, rd);\n    dstObj = min (dstObjM, dstObjC);\n    isRefl = true;\n  }\n  vf = vec2 (0.);\n  if (min (dstGrnd, dstObj) < dstFar) {\n    if (dstObj < dstGrnd) {\n      if (dstObjM < dstObjC) {\n        ro += dstObjM * rd;\n        vn = ObjNf (ro);\n        BldCol (ro, vn, col4, vf);\n        col = col4.rgb;\n        spec = col4.a;\n        if (vn.y > 0.8) isGlit = true;\n      } else {\n        ro += dstObjC * rd;\n        vn = ObjCNf (ro);\n        idObj = idObjC;\n        TrStCol (ro, vn, col4, vf);\n        col = col4.rgb;\n        spec = col4.a;\n      }\n    } else if (dstGrnd < dstFar) {\n      ro += dstGrnd * rd;\n      gId = PixToHex (ro.xz / hgSize);\n      SetTrParms ();\n      vn = GrndNf (ro);\n      vf = vec2 (8., 4.);\n      if (snowFac < 1.) {\n        c1 = mix (vec3 (0.1, 0.2, 0.15), vec3 (0.2, 0.4, 0.2),\n           smoothstep (0.3, 0.5, Fbm2 (8. * ro.xz)));\n        if (szFac > 0.) c1 = mix (vec3 (0.15, 0.05, 0.1), c1, 0.2 + 0.8 *\n           smoothstep (0.4 * szFac, 0.7 * szFac, length (ro.xz - HexToPix (gId) * hgSize - trOff)));\n        c1 *= (1. - 0.2 * Noisefv2 (128. * ro.xz));\n        c2 = vec3 (0.3, 0.3, 0.35) * (1. - 0.2 * Noisefv2 (256. * ro.zy));\n        col = mix (c2, mix (c2, c1, smoothstep (0.4, 0.7, vn.y)),\n           smoothstep (0., 0.005 * Noisefv2 (128. * ro.xz), ro.y));\n      } else col = vec3 (0.);\n      col = mix (col, snowCol.rgb, snowFac);\n      isGlit = true;\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    sh = (! isNt) ? min (ObjCSShadow (ro, sunDir), ObjSShadow (ro, sunDir)) : 1.;\n    col = col * (0.2 + 0.2 * max (dot (normalize (- sunDir.xz), vn.xz), 0.) +\n       0.1 * max (vn.y, 0.) + 0.8 * sh * max (dot (vn, sunDir), 0.));\n    if (! isNt) col += step (0.95, sh) * spec * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n  } else {\n    if (! isRefl) {\n      ro = roo;\n      rd = rdo;\n    }\n    col = SkyCol (ro, rd);\n    isSky = true;\n  }\n  if (! isNt && isGlit && snowFac > 0.) {\n    glit = 64. * step (0.01, max (0., dot (vn, sunDir))) *\n       pow (max (0., dot (sunDir, reflect (rd, vn))), 16.) *\n       pow (1. - 0.6 * abs (dot (normalize (sunDir - rd), VaryNf (512. * ro, vn, 8.))), 8.);\n    col += vec3 (1., 1., 0.8) * smoothstep (0.6, 0.9, snowFac) * step (0.95, sh) * glit;\n  }\n  if (isRefl) col = mix (mix (vec3 (0., 0.1, 0.), vec3 (0.08, 0.08, 0.1),\n     smoothstep (0.45, 0.55, Noisefv2 (128. * rog.xz))), 0.95 * col,\n     1. - 0.9 * pow (dot (- rdo, vnw), 2.));\n  if (! isSky) col = mix (col, vec3 (0.65, 0.65, 0.7), smoothstep (0.7, 1.,\n     (min (dstGrnd, dstObj) + (isRefl ? dstWat : 0.)) / dstFar));\n  if (isNt) col = mix (col, vec3 (pow (max (max (col.r, col.g), col.b), 1.5)), 0.8) *\n     (isFlsh ? 1.5 * vec3 (1., 1., 0.8) : vec3 (0.3));\n  return col;\n}\n\n#define ISBOOK  1\n\nvoid ExMain (out vec3 fCol, in vec2 fCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd;\n  vec2 vd;\n  float el, az, zmFac, t, vel, f;\n  zRep = 64.;\n  trkF = vec3 (1., 2., 3.) / zRep;\n  trkA = vec3 (1.5, -1.2, 0.8);\n  trkF2 = vec2 (1., 2.) * 16. / zRep;\n  trkA2 = vec2 (-0.1, 0.05);\n#if ISBOOK\n  if (idPage <= 3.) {\n    vuMode = 0;\n  } else {\n    vuMode = 1;\n  }\n  msEl = -99.;\n  t = (mod (idPage - 1., 3.) == 1.) ? 0. : 0.5;\n  isNt = (mod (idPage - 1., 3.) == 2.);\n  isFlsh = (Fbm1 (10. * tCur) > 0.7);\n#else\n  t = 0.;\n  vuMode = 0;\n  isNt = false;\n  isFlsh = false;\n#endif\n  snowFac = SmoothBump (0.4, 0.9, 0.03, mod (tCur / 120. + t, 1.));\n  if (vuMode == 0) {\n    ro = vec3 (0., 1., -15.);\n    az = mod (((msAz >= 0.) ? - msAz : 0.03 * pi * tCur),  2. * pi);\n    el = (msEl >= -0.5 * pi) ? min (- msEl, 0.) : -0.023 * pi * (5. - cos (2. * az));\n    zmFac = 4.;\n  } else {\n    vel = 3.;\n    t = vel * tCur + 0.3 * zRep;\n    ro.xz = TrackPathS (t);\n    vd = TrackPathS (t + zRep / 32.) - ro.xz;\n    t = ro.z / (2. * zRep);\n    f = SmoothBump (0.2, 0.8, 0.1, mod (t, 1.));\n    ro.x += 0.5 * (1. - f) * (2. * mod (floor (t + 0.5), 2.) - 1.);\n    ro.y = 0.6 + 1.4 * (1. + 0.5 * mod (floor (t), 2.)) * f;\n    az = 0.5 * atan (vd.x, vd.y);\n    az += (msAz >= 0.) ? msAz : pi * SmoothBump (0.15, 0.55, 0.15, mod (t, 1.)) * (mod (floor (t), 3.) - 1.);\n    el = (msEl >= 0.) ? msEl : 0.;\n    zmFac = 3.;\n  }\n  dstFar = 150.;\n  sunDir = normalize (vec3 (1., 1.5, 0.3));\n  vuMat = StdVuMat (el, az);\n  if (vuMode == 0) ro = vuMat * ro;\n  rd = vuMat * normalize (vec3 (fCoord, zmFac));\n  fCol = ShowScene (ro, rd);\n  fCol = clamp (fCol, 0., 1.);\n}\n\n#if ISBOOK\n\nfloat ExObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, rRad, hRad, hOff, np, bc, thFac, nRing, y, s, w;\n  dMin = dstFarEx;\n  rRad = 0.4;\n  hRad = 0.08;\n  nRing = 5.;\n  hOff = 0.15;\n  thFac = 2.2;\n  np = float (nPage - 1);\n  q = p;\n  s = mod (nRing, 2.);\n  w = pgSize.x / nRing;\n  bc = q.x;\n  bc = mod (bc + s * w, 2. * w) - w;\n  for (int k = VAR_ZERO; k < nPage; k ++) {\n    q = p;\n    q.y -= 0.5 * np * thFac * pgSize.y;\n    y = q.y + np * thFac * pgSize.y * phsTurn;\n    if (k == 0) q.zy = Rot2D (vec2 (q.z, y), 2. * pi * phsTurn);\n    else q.y -= thFac * pgSize.y * (phsTurn - float (k));\n    d = hRad - length (vec2 (q.z + rRad, bc));\n    q.z -= - (pgSize.z - hOff + rRad);\n    d = max (PrRoundBoxDf (q, pgSize - pgSize.y, pgSize.y), d);\n    DMINQ (k + 1);\n  }\n  q = p;\n  d = abs (q.x) - pgSize.x;\n  q.x = bc;\n  q = q.zyx;\n  d = max (PrTorusDf (q, 0.5 * hRad, rRad + 0.3 * hRad), d);\n  DMINQ (nPage + 1);\n  return dMin;\n}\n\nfloat ExObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ExObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFarEx) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ExObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  v = vec4 (- ExObjDf (p + e.xxx), ExObjDf (p + e.xyy), ExObjDf (p + e.yxy), ExObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ExObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ExObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.7 + 0.3 * sh;\n}\n\nvec3 ExShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 s, w;\n  float dstObj, sh, npCyc, tpCyc, tpWait, nDotL, t;\n  bool isImg;\n  pgSize = vec3 (3.2, 0.011, 1.8);\n  tpCyc = 3.;\n  tpWait = 4.;\n  t = (tpBook < 0.) ? (- tpBook * float (nPage - 1) * (tpCyc + tpWait)) :\n     mod (tpBook - tpWait, float (nPage) * (tpCyc + tpWait));\n  npCyc = mod (floor (t / (tpCyc + tpWait)), float (nPage));\n  phsTurn = min (mod (t / (tpCyc + tpWait), 1.) * (tpCyc + tpWait) / tpCyc, 1.);\n  isImg = false;\n  dstObj = ExObjRay (ro, rd);\n  if (dstObj < dstFarEx) {\n    ro += dstObj * rd;\n    vn = ExObjNf (ro);\n    nDotL = max (dot (vn, ltDirEx), 0.);\n    if (idObj <= nPage) {\n      idPage = mod ((float (idObj - 1) + npCyc), float (nPage)) + 1.;\n      s = pgSize.xz - abs (qHit.xz);\n      col4 = vec4 (0.9, 0.9, 0.8, 0.1);\n      if (qHit.y > 0.) {\n        w = qHit.xz / pgSize.z;\n        if (min (s.x, s.y) > 0.3) {\n          isImg = true;\n          ExMain (col, w);\n        } else if (min (s.x, s.y) > 0.27) {\n          col4 *= 0.3;\n        } else {\n          col4 *= 0.6;\n        }\n      }\n    } else if (idObj == nPage + 1) {\n      col4 = vec4 (0.9, 0.9, 0.95, 0.2);\n      nDotL *= nDotL;\n    }\n    sh = ExObjSShadow (ro + 0.001 * vn, ltDirEx);\n    if (isImg) col *= 0.2 + 0.8 * sh;\n    else col = col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (dot (normalize (ltDirEx - rd), vn), 0.), 32.);\n  } else {\n    col = vec3 (1., 1., 0.9) * (0.5 + 0.2 * rd.y);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#endif\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tpBook = tCur;\n  msAz = -99.;\n  msEl = -99.;\n  az = 0.;\n  el = -0.5 * pi;\n  if (mPtr.z > 0.) {\n    msAz = mod (2. * pi * mPtr.x, 2. * pi);\n#if ISBOOK\n    tpBook = - clamp (1.05 * mPtr.y + 0.45, 0., 1.);\n#else\n    msEl = pi * mPtr.y;\n#endif\n}\n#if ISBOOK\n  vuMat = StdVuMat (el, az);\n  ro = vec3 (0., -2., -20.);\n  zmFac = 9.;\n  ro = vuMat * ro;\n  dstFarEx = 40.;\n  ltDirEx = normalize (vec3 (0.3, 1., 0.3));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ExShowScene (ro, rd);\n  }\n#else\n  if (abs (uv.y) < 0.85) ExMain (col, uv);\n  else col = vec3 (0.05);\n#endif\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  float d;\n  d = length (p.xy - vec2 (clamp (p.x, - rhi, rhi), 0.)) - rlo;\n  if (h > 0.) d = max (d, abs (p.z) - h);\n  return d;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrConeDf (vec3 p, vec3 b)\n{\n  return max (dot (vec2 (length (p.xy), p.z), b.xy), abs (p.z) - b.z);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat SmootherStep (float a, float b, float x)\n{\n  x = clamp ((x - a) / (b - a), 0., 1.); \n  return ((6. * x - 15.) * x + 10.) * x * x * x;\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}