{
    "Shader": {
        "info": {
            "date": "1530028906",
            "description": "Arrows keys to move, space to shoot\n\nFor best experience:\n1. mute Van Damme in Buf A\n2. click rewind and then play immediately afterwards",
            "flags": 112,
            "hasliked": 0,
            "id": "MsyBzt",
            "likes": 1,
            "name": "[game] Nyan's Space Adventure",
            "published": 3,
            "tags": [
                "2d",
                "game",
                "space",
                "shooter",
                "nya"
            ],
            "usePreview": 0,
            "username": "DJDoomz",
            "viewed": 682
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\nvec3 rainbow(float s)\n{\n    return .5+.5*sin(s+vec3(1,2,3)*PI/3.);\n}\n\nfloat ls(vec2 u, vec2 s, vec2 e)\n{\n    vec2 l1 = u-s;\n    vec2 l2 = (e-s)*(clamp( dot(l1,(e-s) ) /(dot(e-s,e-s)), 0., 1. ) );\n    \n    return 2.*smoothstep(0.015,.0,length(l1-l2));\n}\n\nvoid draw_bull(vec2 u, inout vec3 s){\n    vec3 b = texelFetch(iChannel0,ivec2(1,0),0).xyz;\n    \n    vec3 col = rainbow(b.x*8.+iTime*4.);\n    \n    if(b.z > .5)\n    \ts += ls(u,b.xy,b.xy+vec2(.07,0))*col;\n    \n}\n\nvec3 draw_background(vec2 u, vec2 p){\n    \n    u.x += .2*iTime;\n    \n    u += .25*p;\n    \n    u.x = mod(u.x,10.);\n    \n    float t = floor(iTime)/999.;\n    u = floor(u*100.)/100.;\n    u = fract(u*25.+vec2(1.8,1.2)*sin(u.yx*64.24+6.*t))*6.-2.5;\n    \n    float s = (.04)/(length(sin(vec2(1,4.4)+.2*t)*1.1-u))+.2;\n    \n    s*=s*s;\n    \n    return vec3(s);\n}\n\n\nvoid draw_player(vec2 u, vec4 p, inout vec3 s){\n    if(p.z > 0.)\n    {\n        float f = floor(mod(iTime*15.,6.))/6.4;\n\n        u-=p.xy;\n\n        u.y -= f>.4?.005:0.;\n\n        vec2 d = u/vec2(6,1);\n\n        d*=6.;\n\n        d = clamp(d,vec2(0),vec2(1./6.-.01,1.))+vec2(f,0);\n\n        vec4 nya = texture(iChannel1,d);\n        s = nya.a > .5 ? nya.rgb : s;\n    }\n    else\n    {\n        s += clamp(-(.1*p.z)/(length(p.xy-u)),0.,1.) * clamp(.1*p.z+2.,0.,1.);\n    }\n}\n\nvoid draw_hud(vec2 u, vec4 p, inout vec3 s){\n    \n    s += ls(u,vec2(0),vec2(p.z/10.,0))*(p.z > 3. ? vec3(0,1,0) : vec3(1,0,0));\n    \n}\n\nvoid draw_enemy(vec2 u,vec4 p, inout vec3 s){\n    if(p.z > 0.)\n    {\n        for(int i = 0;i < 10; i++)\n        {\n            \tvec4 e = texelFetch(iChannel0, ivec2(i,1),0);\n                if(e.z > .5)\n                {\n                    vec2 mu = (u-e.xy)*6.;\n                    vec3 col = (.5*rainbow(e.w*2.+e.z)+.5);\n                    if(e.w > .5 && e.w < 1.5)\n                    {\n                        float s = sin(iTime*2.), c = cos(iTime*2.);\n                        mu -=.5;\n                        mu *=mat2(c,s,-s,c);\n                        mu += .5;\n                        \n                    }\n                    if(e.w > 9.5)\n                    {\n                        s += ls(u,e.xy,e.xy+vec2(e.z/325.,0))*rainbow(u.x*32.+4.*iTime);\n                        mu /= 4.;\n                        mu *= 1.+.04*sin(mu.yx*3.+6.*iTime);\n                        col = rainbow(length(mu-.3)*16.+e.z);\n                        s += .1/length(mu-vec2(.28,.25))*(.8+.2*sin(iTime*4.))*vec3(1.,.4,.4);\n                    }\n                    \n                    mu.x = clamp(mu.x, .04,1.);\n                    vec4 v = 1.*texture(iChannel0,mu);\n                    s = v.a > .5 ? 1.-col*v.rgb : s;\n                }\n            \telse if(e.w > 9.5)\n                {\n                    vec2 mu = (u-e.xy)*6.;\n                    vec3 col = rainbow(e.w*2.+e.z);\n                    mu.x-=.3;\n                    mu /= 4.;\n                    mu.x /= (-e.z*.05);\n                    mu.x += .3;\n                    mu.x = clamp(mu.x, .04,1.);\n                    vec4 v = 1.*texture(iChannel0,mu);\n                    s = v.a > .5 ? 1.-col*v.rgb : s;\n                    s += clamp(-(.003*e.z)/(length(e.xy-u)),0.,1.);\n                }\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 p = texelFetch(iChannel0,ivec2(0),0);\n    \n    vec3 scene = draw_background(uv,p.xy)+draw_background(uv/1.5,p.xy)+draw_background(uv*1.5,p.xy);\n    \n    draw_enemy(uv,p,scene);\n    \n    draw_bull(uv,scene);\n    \n    draw_player(uv,p,scene);\n    \n    draw_hud(uv,p,scene);\n    \n    \n    \n    fragColor = vec4(scene,1);\n    //fragColor = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 15005,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/8-bit-generation3/gradius-ii-burning-heat"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//0,0: player\t(x,y, health)\n//1,0: projectile (x,y, 1 = active 0 = not)\n//0,1: enemies (x, y, health, enemy type)\n\nconst int KEY_SPACE = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst vec2 speed = vec2(.01,.014);\n\n#define T(U) texelFetch(iChannel1,ivec2(U),0)\n\nvoid mainImage( out vec4 f, in vec2 fragCoord )\n{\n    f = T(fragCoord);\n    if(iFrame > 3)\n    {\n        if(fragCoord.y < 1.5){\n            if(fragCoord.x < 1.5){\t//player data\n                vec2 vel = vec2(0);\n                if(f.z < 0.) f.z-=.2;\n                #define key(c, a, b) if (texelFetch( iChannel0, ivec2(c,0),0 ).x > 0. ) vel += speed*vec2(a,b)\n                key(KEY_LEFT , -1, 0.);\n                key(KEY_RIGHT,  1.,0.);\n                key(KEY_UP,     0.,1.);\n                key(KEY_DOWN,   0.,-1.);\n                if(f.z > 0.) f.xy += vel;\n                f.xy = clamp(f.xy,vec2(-.05,-.05),vec2(.78,.8));\n                \n                if(iTime > 60. && iTime < 65.){\n                    f.z += .01;\n                }\n                \n                float t = T(ivec2(0,1)).z;\n                \n                if(iTime > 75. && t < -2.)\n                {\n                    f.xy = vec2(-t*.001,.4);\n                }\n                \n                //collision\n                for(int i = 0; i < 10; i++)\n                {\n                    vec4 e = T(ivec2(i,1));\n                    if(length(e.xy-f.xy-vec2(0.05,.03)) < .1 && e.z > .5)\n                    {\n                        if(iResolution.x > 700.)\n                        \tf.z -= iTime > 65. ? .075 : .03;\n                    }\n                }\n                \n                if(iTime < 2.){\n                    f.z = 5.*iTime;\n                    f.xy = vec2(iTime*.1-.07,.45);\n                }\n                \n            }\n            else if(fragCoord.x < 2.5){\t//projectile\n                if(f.z > .5) f.x += .1;\n                \n                if(f.x > 1.) f.z = 0.;\n                \n                float h = texelFetch(iChannel1,ivec2(0),0).z;\n                \n                if(texelFetch(iChannel0, ivec2(KEY_SPACE,0),0).x > 0. && f.z < .5 && h > 0.){\n                    vec2 p = T(0).xy;\n                    f.z = 1.;\n                    f.xy = p+vec2(.05,.08);\n                }\n            }\n        } else if(fragCoord.y < 2.5){\n            if(fragCoord.x < 10.5 && iTime > 3.5){ //enemy\n                vec3 p = T(ivec2(1,0)).xyz;\n                if( (p.z > .5 && length(p.xy+vec2(.07,-.06)-f.xy) < .07) || f.x < -.1 || f.y > 1.2 || f.y < -.2 )\n                {\n                    f.z -= 1.;\n                }\n                if(f.z < .5 && mod(fragCoord.x+iTime*8.,15.) < .5 && iTime < 60.)\n                {\n                    f.w = floor(fract(iTime)*3.);\n                    f.z = f.w+1.;\n                    f.xy = vec2(1.2,.4+.3*sin(iTime));\n                }\n                if(f.z > .5)\n                {\n                    float id = fragCoord.x;\n                    if(f.w < .5)\n                    \tf.xy -= vec2(.016,.013*sin(f.x*4.));\n                    else if(f.w < 1.5)\n                        f.xy -= vec2(.005*sin(iTime*4.+id)+.003,.003*cos(iTime*4.+id));\n                    else if(f.w < 2.5)\n                        f.xy -= .01*normalize(f.xy-T(0).xy-vec2(.1,0));\n                    else if(f.w < 3.5)\n                        f.xy -= vec2(.015,.02*cos(id/3.));\n                    else if(f.w < 4.5)\n                        f.xy -= vec2(.01,.01*cos(id/3.+5.*iTime));\n                    else if(f.w < 5.5)\n                        f.xy -= .008*normalize(f.xy-T(0).xy-vec2(.1,0));\n                }\n                if(fragCoord.x < 1.5 && iTime > 65.){ //boss\n                    f.w = 10.;\n                    if(iTime < 70.){ //boss intro\n                        f.xy = vec2(1.2,.35) - vec2((iTime-65.)*.13,0);\n                        f.z = 100.;\n                    }\n                    else{\t//boss ai\n                        if(f.z > 0.)\n                        \tf.xy = .2*vec2(.4*sin(iTime),cos(4.*iTime))+vec2(.64,.3);\n                        if( (p.z > .5 && length(p.xy-f.xy-vec2(.2,.2)) < .1))\n                            f.z -= 1.;\n                        if (f.z < 0.5) f.z -= 1.;\n                    }\n                }\n                else if(fragCoord.x<10.5 && iTime > 70.){ //boss attacks\n                    vec4 B = texelFetch(iChannel1,ivec2(0,1),0);\n                    if(f.z < .5 && mod(fragCoord.x+iTime*16.,15.) < .5 && B.z > 0.)\n                \t{\n                        \n                        f.w = 3.+floor(mod(iTime/10.,3.));\n                        f.z = f.w-2.;\n                        f.xy = B.xy+vec2(0.1,0.1);\n                \t}\n                }\n            }\n        }\n        else\n        {\n            if(iTime < 2.5)\n            {\n                vec4 v = texture(iChannel2,fragCoord/iResolution.xy);\n\t\t\t\tf = v.g > length(v.rb) ? vec4(0.) : v;\n            }\n        }\n    }\n    else\n    {\n        \n        f = vec4(0);\n    }\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}