{
    "Shader": {
        "info": {
            "date": "1585154730",
            "description": "simulation of a spreading virus over a total amount of time. \n\nPlease do make improvements if you want to!",
            "flags": 0,
            "hasliked": 0,
            "id": "3dlcRj",
            "likes": 0,
            "name": "Virus simulation",
            "published": 3,
            "tags": [
                "simulation",
                "disease",
                "virus",
                "infection"
            ],
            "usePreview": 0,
            "username": "robobo1221",
            "viewed": 416
        },
        "renderpass": [
            {
                "code": "const float spreadRate = 0.3;\t// How much the virus spreads per day\nconst float recoverRate = 0.04;\t// How much each person recovers per day\nconst int peopleCount = 30;\t\t// Total amount of people\nconst int timeLength = 120;\t\t// Length in days\n\nfloat hash(float n){return fract(sin(n) * 43758.5453123);}\n\nvoid calculateVirusValues(inout float values[timeLength]) {\n    float healthPerson[peopleCount];\n    int isInfected[peopleCount];\n    int hasBeenInfected[peopleCount];\n    \n    for (int i = 0; i < peopleCount; i++) {\n\t\thealthPerson[i] = 1.0;\n        isInfected[i] = 0;\n    }\n    \n    healthPerson[0] = 0.0;\n    isInfected[0] = 1;\n    hasBeenInfected[0] = 1;\n        \n    for (int i = 0; i < timeLength; i++) {\n        values[i] = 0.0;\n        \n        for (int j = 0; j < peopleCount; j++) {\n            if (isInfected[j] == 0) {\n            \tcontinue;    \n            }\n            \n            float getInfected = clamp(floor(hash(float(i+j)) + spreadRate), 0.0, 1.);\n            \n            if (isInfected[j] == 1) {\n\t\t\t\thealthPerson[j] += recoverRate;\n                hasBeenInfected[j] = 1;\n                \n                int nextPersonId = int(hash(float(i-j*255)) * float(peopleCount));\n                \n                if (hasBeenInfected[nextPersonId] == 0) {\n                    healthPerson[nextPersonId] = 1.0 - getInfected;\n                    isInfected[nextPersonId] = int(getInfected);\n                }\n            } \n            \n            if (healthPerson[j] >= 1.0) {\n\t\t\t\thealthPerson[j] = 1.0;\n                \n                isInfected[j] = 0;\n            }\n        }\n        \n        for (int j = 0; j < peopleCount; j++) {\n\t\t\tvalues[i] += float(isInfected[j]);\n        }\n    }\n}\n\nfloat drawLine(vec2 uv, vec2 p1, vec2 p2, float pixelSize) {\n  float a = abs(distance(p1, uv));\n  float b = abs(distance(p2, uv));\n  float c = abs(distance(p1, p2));\n\n  if ( a >= c || b >=  c ) return 0.0;\n\n  float p = (a + b + c) * 0.5;\n\n  // median to (p1, p2) vector\n  float h = 2. / c * sqrt( p * ( p - a) * ( p - b) * ( p - c));\n\n  return 1.0 - smoothstep(pixelSize, pixelSize * 2., h);\n}\n\nfloat graphValues(vec2 uv, float pixelSize) {\n\tvec2 xy = vec2(timeLength, peopleCount);\n    float values[timeLength];\n    calculateVirusValues(values);\n    \n    float result = 0.0;\n    \n    for (int i = 0; i < timeLength; ++i) {\n        float nextPeopleValue = values[(i + 1) % timeLength];\n        float nextTimeValue = float(i + 1);\n        \n        float peopleValue = values[i];\n        float timeValue = float(i);\n        \n        peopleValue = peopleValue;\n        nextPeopleValue = nextPeopleValue;\n        \n        if (i == timeLength-1) {\n\t\t\tnextPeopleValue = peopleValue;\n        }\n        \n\t\tresult = max(result, drawLine(uv, vec2(timeValue, peopleValue) / xy, vec2(nextTimeValue, nextPeopleValue) / xy, pixelSize));\n    }\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float pixelSize = 1.0 / min(iResolution.x, iResolution.y);\n    float graph = graphValues(uv, pixelSize);\n\n    // Time varying pixel color\n    vec3 col = vec3(graph);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}