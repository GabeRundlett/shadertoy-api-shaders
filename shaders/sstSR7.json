{
    "Shader": {
        "info": {
            "date": "1632892918",
            "description": "https://en.wikipedia.org/wiki/Wave_equation",
            "flags": 0,
            "hasliked": 0,
            "id": "sstSR7",
            "likes": 20,
            "name": "Wave Equation 1D",
            "published": 3,
            "tags": [
                "waves",
                "1d",
                "smoothnoise",
                "waveequation"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\nvec2 noise(in vec2 x) {\n    return fFract(fMul(vec2(367.436, 0.0), fCos(439.573 * x + vec2(153.584, 0.0))));\n}\n\nvec2 f(in vec2 x) {\n    x *= 0.5;\n    return 3.0 * fMix(noise(fFloor(x)), noise(fCeil(x)), fSmoothstep(vec2(0.0), vec2(1.0, 0.0), fFract(x)));\n}\n\nvec2 u(in vec2 x, in float t) {\n    t *= 8.0; // c\n    return (f(x - vec2(t, 0.0)) + f(x + vec2(t, 0.0))) / 2.0; // + int(x - ct < s < x + ct, g(s)ds) / 2c\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Draw wave function\n    vec2 y = u(vec2(uv.x, 1.0), iTime);\n    color = mix(color, vec3(0.0, 0.0, 0.8 * exp(0.25 * (uv.y - y.x))), smoothstep(unit, 0.0, (uv.y - y.x) / sqrt(1.0 + y.y * y.y)));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 const2dual(in float x) { return vec2(x, 0.0); }\nvec2 var2dual(in float x) { return vec2(x, 1.0); }\nvec2 fAdd(in vec2 a, in vec2 b) { return a + b; }\nvec2 fSub(in vec2 a, in vec2 b) { return a - b; }\nvec2 fMul(in vec2 a, in vec2 b) { return vec2(a.x * b.x, a.x * b.y + a.y * b.x); }\nvec2 fDiv(in vec2 a, in vec2 b) { return vec2(a.x / b.x, (b.x * a.y - a.x * b.y) / (b.x * b.x)); }\nvec2 fInv(in vec2 z) { float q = 1.0 / z.x; return vec2(q, -z.y * q / z.x); }\nvec2 fPow(in vec2 a, in vec2 b) { float q = pow(a.x, b.x); return vec2(q, q * (b.x * a.y / a.x + b.y * log(a.x))); }\nvec2 fConstPow(in vec2 z, in float power) { float q = pow(z.x, power); return vec2(q, power * z.y * q / z.x); }\nvec2 fIntPow(in vec2 z, in int power) { float res = 1.0; for (int n=0; n < abs(power); n++) { res *= z.x; } if (power < 0) res = 1.0 / res; return vec2(res, float(power) * res / z.x * z.y); }\nvec2 fSquare(in vec2 z) { return vec2(z.x * z.x, 2.0 * z.x * z.y); }\nvec2 fSqrt(in vec2 z) { float q = sqrt(z.x); return vec2(q, 0.5 * z.y / q); }\nvec2 fExp(in vec2 z, in float base) { float q = pow(base, z.x); return vec2(q, q * z.y); }\nvec2 fLn(in vec2 z) { return vec2(log(z.x), z.y / z.x); }\nvec2 fSin(in vec2 z) { return vec2(sin(z.x), cos(z.x) * z.y); }\nvec2 fCos(in vec2 z) { return vec2(cos(z.x), -sin(z.x) * z.y); }\nvec2 fTan(in vec2 z) { float q = cos(z.x); return vec2(tan(z.x), z.y / (q * q)); }\nvec2 fAsin(in vec2 z) { return vec2(asin(z.x), z.y / sqrt(1.0 - z.x * z.x)); }\nvec2 fAcos(in vec2 z) { return vec2(acos(z.x), -z.y / sqrt(1.0 - z.x * z.x)); }\nvec2 fAtan(in vec2 z) { return vec2(atan(z.x), z.y / (1.0 + z.x * z.x)); }\nvec2 fSinh(in vec2 z) { return vec2(sinh(z.x), cosh(z.x) * z.y); }\nvec2 fCosh(in vec2 z) { return vec2(cosh(z.x), sinh(z.x) * z.y); }\nvec2 fTanh(in vec2 z) { float q = cosh(z.x); return vec2(tanh(z.x), z.y / (q * q)); }\nvec2 fAsinh(in vec2 z) { return vec2(asinh(z.x), z.y / sqrt(z.x * z.x + 1.0)); }\nvec2 fAcosh(in vec2 z) { return vec2(acosh(z.x), z.y / sqrt(z.x * z.x - 1.0)); }\nvec2 fAtanh(in vec2 z) { return vec2(atanh(z.x), z.y / (1.0 - z.x * z.x)); }\nvec2 fMin(in vec2 a, in vec2 b) { return a.x < b.x ? a : b; }\nvec2 fMax(in vec2 a, in vec2 b) { return a.x > b.x ? a : b; }\nvec2 fFloor(in vec2 z) { return vec2(floor(z.x), 0.0); }\nvec2 fCeil(in vec2 z) { return vec2(ceil(z.x), 0.0); }\nvec2 fAbs(in vec2 z) { return vec2(abs(z.x), z.y * sign(z.x)); }\nvec2 fSign(in vec2 z) { return vec2(sign(z.x), 0.0); }\nvec2 fMod(in vec2 a, in vec2 b) { return vec2(mod(a.x, b.x), a.y); }\nvec2 fFract(in vec2 z) { return vec2(fract(z.x), z.y); }\nvec2 fClamp(in vec2 z, in vec2 edge0, in vec2 edge1) { return fMax(edge0, fMin(edge1, z)); }\nvec2 fSmoothstep(in vec2 edge0, in vec2 edge1, in vec2 z) { z = fClamp(fDiv(z - edge0, edge1 - edge0), vec2(0.0), vec2(1.0, 0.0)); vec2 sq = fSquare(z); return 3.0 * sq - 2.0 * fMul(sq, z);}\nvec2 fMix(in vec2 a, in vec2 b, in vec2 t) { return a + fMul(b - a, t); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}