{
    "Shader": {
        "info": {
            "date": "1498649488",
            "description": "The color flow direction can change between Truchet cells. This cannot be avoided for random cell orientations (with local decision rules).\n",
            "flags": 0,
            "hasliked": 0,
            "id": "lslfDf",
            "likes": 8,
            "name": "Colored Truchet Cells",
            "published": 3,
            "tags": [
                "raymarch",
                "truchet",
                "tiling"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 704
        },
        "renderpass": [
            {
                "code": "// \"Colored Truchet Cells\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv3 (vec3 p);\n\nvec3 ltPos, qHit;\nfloat dstFar, tCur;\nconst float pi = 3.14159;\n\nvec3 TrackPath (float t)\n{\n//  return vec3 (0., 0., t);\n  return vec3 (2. * sin (0.2 * t) + 0.9 * sin (0.23 * t),\n     1.3 * sin (0.17 * t) + 0.66 * sin (0.24 * t), t);\n}\n\nfloat TubeDf (vec3 p)\n{\n  return length (vec2 (length (p.xy), p.z) - 0.5) - 0.06;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, r;\n  q = p;\n  q.xy -= TrackPath (q.z).xy;\n  r = floor (8. * Hashfv3 (floor (q)));\n  q = fract (q);\n  if (r >= 4.) q = q.yxz;\n  r = mod (r, 4.);\n  if (r == 0.) q.x = 1. - q.x;\n  else if (r == 1.) q.y = 1. - q.y;\n  else if (r == 2.) q.xy = 1. - q.xy;\n  dMin = dstFar;\n  qq = q;\n  d = TubeDf (qq);\n  if (d < dMin) { dMin = d;  qHit = qq; }\n  qq = vec3 (q.z, 1. - q.x, q.y);\n  d = TubeDf (qq);\n  if (d < dMin) { dMin = d;  qHit = qq; }\n  qq = vec3 (1. - q.yz, q.x);\n  d = TubeDf (qq);\n  if (d < dMin) { dMin = d;  qHit = qq; }\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 16; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.07;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, ltVec, q;\n  float dHit, ltDist, sh, a;\n  dHit = ObjRay (ro, rd);\n  if (dHit < dstFar) {\n    ro += dHit * rd;\n    a = atan (- qHit.y, qHit.x) / pi;\n    col = HsvToRgb (vec3 (mod (2. * a + 0.3 * tCur, 1.), 1., 1.));\n    vn = ObjNf (ro);\n    ltVec = ltPos - ro;\n    ltDist = length (ltVec);\n    ltVec /= ltDist;\n    sh = ObjSShadow (ro, ltVec);\n    col = col * (0.1 + 0.9 * sh * max (dot (vn, ltVec), 0.)) +\n       0.1 * sh * pow (max (dot (normalize (vn - rd), vn), 0.), 64.);\n    col *= 1. / (1. + 0.1 * ltDist * ltDist);\n  } else col = vec3 (0.);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, pF, pB, u, vd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, asp, zmFac, vFly, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  vFly = 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = -0.1 * pi + pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  zmFac = 2.;\n  rd = normalize (vec3 ((2. * tan (0.5 * atan (uv.x / (asp * zmFac)))) * asp,\n     uv.y / zmFac, 1.));\n  pF = TrackPath (vFly * tCur + 0.1);\n  pB = TrackPath (vFly * tCur - 0.1);\n  ro = 0.5 * (pF + pB);\n  vd = normalize (pF - pB);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd) *\n     vuMat;\n  rd = vuMat * rd;\n  ltPos = ro + vuMat * vec3 (0.3, 0.5, 0.1);\n  dstFar = 30.;\n  fragColor = vec4 (pow (clamp (ShowScene (ro, rd), 0., 1.), vec3 (0.6)), 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, cHashA3)) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}