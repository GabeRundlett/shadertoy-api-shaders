{
    "Shader": {
        "info": {
            "date": "1604740526",
            "description": "Game of life. Edit the rules through the \"BORN\" & \"SURVIVE\" arrays in common.\nAlso available is speed, scale and grid line size.",
            "flags": 32,
            "hasliked": 0,
            "id": "wddBRM",
            "likes": 34,
            "name": "cellular automaton",
            "published": 3,
            "tags": [
                "2d",
                "life",
                "cellularautomaton",
                "gol"
            ],
            "usePreview": 0,
            "username": "Dragonpeak",
            "viewed": 688
        },
        "renderpass": [
            {
                "code": "\nfloat march_shadow(vec2 pos)\n{\n\tfloat MAX_DIST = 5./iResolution.x;\n    const float STEP_SIZE = 0.0001;\n    const vec2 dir = normalize(vec2(0.2, 0.2));\n\n    float dist = 0.;\n    while(dist < MAX_DIST)\n    {\n        vec2 p = pos+dir*dist;\n        float t = texture(iChannel1, p).x;\n\t\tif(t >= 1.)\n        {\n\n\t\t\tbreak;\n            \n        }\n        dist += STEP_SIZE;\n        \n    }\n    \n    return (dist/MAX_DIST);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pos = fragCoord+iTime*20.;\n    vec2 uv = pos/iResolution.xy;\n\n    \n    int cell = int(texture(iChannel1, uv*SCALE).x);\n    vec3 col = vec3(.8);\n    if(cell >= 1)\n    {\n\t\tcol = mix(vec3(0.95), vec3(.7, 0.1, 0.2)*1.4, 1.-min(float(cell)/6., 1.));\n    }\n    \n    float grid = step(1.-GRID_SIZE, fract((pos.x-0.5)*SCALE));\n    grid += step(1.-GRID_SIZE, fract((pos.y-0.5)*SCALE));\n   \tgrid = min(grid, 1.);\n    if(grid == 1.)\n    {\n    \tcol = vec3(0.9);\n    }\n    if(cell <= 0)\n    {\n\t\tfloat shadow = march_shadow(uv*SCALE);\n    \tcol *= min(shadow+0.3, 1.);\n    }\n    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float SCALE = .1;\nfloat SPEED = 4.;\nfloat GRID_SIZE = 0.15;\n\nint BORN[] = int[](3);\nint SURVIVE[] = int[](2,3);\n\nfloat rand2(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvec2 offsets[] = vec2[](\n    vec2(0, 1),\n    vec2(1, 0),\n    vec2(0, -1),\n    vec2(-1, 0),\n    vec2(1, 1),\n    vec2(-1, 1),\n    vec2(-1, -1),\n    vec2(1, -1));\n\n    \nint get_total(vec2 pos)\n{\n\tint tot = 0;\n    for(int i = 0; i < 8; i++)\n    {\n\t\ttot += min(int(texture(iChannel1, (pos+offsets[i])/iResolution.xy).x), 1);\n    }\n    return tot;\n}\n\nint get_new_state(int current, int total)\n{\n    int new = 0;\n    \n    if(current <= 0)\n    {\n\t\tfor(int i = 0; i < BORN.length(); i++)\n        {\n\t\t\tif(total == BORN[i])\n            {\n             \tnew = 1;   \n            }\n        }\n    }\n    else\n    {\n\t\tfor(int i = 0; i < SURVIVE.length(); i++)\n        {\n\t\t\tif(total == SURVIVE[i])\n            {\n             \tnew = current + 1;   \n            }\n        }\n    }\n\treturn new;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if(iFrame < 5)\n    {\n\t\tfragColor = min(floor(vec4(rand2(floor(fragCoord))+0.2)), 1.);\n    }\n    else\n    {\n        if(mod(float(iFrame), SPEED) == 0.)\n        {\n\t\t\tfragColor = vec4(get_new_state(int(texture(iChannel1, uv)), get_total(fragCoord)));\n        }\n        else\n        {\n\t\t\tfragColor = texture(iChannel1, uv);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}