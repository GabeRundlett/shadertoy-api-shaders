{
    "Shader": {
        "info": {
            "date": "1515949451",
            "description": "Inspired by flopine shader during cookie 2017 shader showdown\nMusic by Doctor Gekil: https://soundcloud.com/doctor-gekil\nCreative commons CC-BY-NC-ND",
            "flags": 96,
            "hasliked": 0,
            "id": "MtBBWw",
            "likes": 9,
            "name": "Meduses (Some jellyfish)",
            "published": 3,
            "tags": [
                "jellyfish"
            ],
            "usePreview": 0,
            "username": "lamogui",
            "viewed": 3302
        },
        "renderpass": [
            {
                "code": "// Taken from FXAA example by fernandomv3 https://www.shadertoy.com/view/XlVGRz\nconst float FXAA_SPAN_MAX = 8.0;\nconst float FXAA_REDUCE_MUL = 1.0/8.0;\nconst float FXAA_REDUCE_MIN = 1.0/128.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 offset = 1.0/iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 nw = texture(iChannel0, uv + vec2(-1.0, -1.0) * offset).rgb;\n    vec3 ne = texture(iChannel0, uv + vec2( 1.0, -1.0) * offset).rgb;\n    vec3 sw = texture(iChannel0, uv + vec2(-1.0,  1.0) * offset).rgb;\n    vec3 se = texture(iChannel0, uv + vec2( 1.0, -1.0) * offset).rgb;\n    vec3 m  = texture(iChannel0, uv).rgb;\n\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(nw, luma);\n    float lumaNE = dot(ne, luma);\n    float lumaSW = dot(sw, luma);\n    float lumaSE = dot(se, luma);\n    float lumaM  = dot(m,  luma);\n\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    vec2 dir = vec2(\n        -((lumaNW + lumaNE) - (lumaSW + lumaSE)),\n        ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\n\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX), dir * rcpDirMin)) * offset;\n\n    vec3 rgbA = 0.5 * (texture(iChannel0, uv + dir * (1.0 / 3.0 - 0.5)).xyz + texture(iChannel0, uv + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (texture(iChannel0, uv + dir * -0.5).xyz + texture(iChannel0, uv + dir * 0.5).xyz);\n    float lumaB = dot(rgbB, luma);\n    if (lumaB < lumaMin || lumaB > lumaMax) {\n        fragColor = vec4(rgbA, 1.0);\n    } else {\n        fragColor = vec4(rgbB, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// By lamogui inspired by flopine shader during cookie 2017 shader showdown\n// Music by Doctor Gekil : https://soundcloud.com/doctor-gekil\n// Creative commons CC-BY-NC-ND\n\n#define time iChannelTime[0]\nconst int numTentacle = 2; // in fact this is the num of tentacle / 2\nconst bool fog = true;\nconst bool reflection = true;\n\nfloat magic_value = 0.0;\n\n// Basice distance field geometry primitives\nfloat sphere(vec3 p, vec3 o, float r)\n{\n  vec3 d = p-o;\n  return length(d) - r;\n}\n\nfloat cylinder(vec2 p, vec2 o, float r)\n{\n  return length(p - o) - r;\n}\n\n// Thoses function are taken from Mercury hg_sdf library\nfloat fOpIntersectionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r + a,r + b), vec2(0));\n\treturn min(-r, max (a, b)) + length(u);\n}\n\nfloat fOpDifferenceRound (float a, float b, float r) {\n\treturn fOpIntersectionRound(a, -b, r);\n}\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.0*3.1415/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\tif (abs(c) >= (repetitions/2.0)) c = abs(c);\n\treturn c;\n} \n// End of stolen code from mercury\n\n// Don't remember where I stolen this one \nvec4 hsv_to_rgb(float h)\n{\n\tfloat c = 1.;\n\th = mod((h * 6.0), 6.0);\n\tfloat x = c * (1.0 - abs(mod(h, 2.0) - 1.0));\n\tvec4 color;\n \n\tif (0.0 <= h && h < 1.0) {\n\t\tcolor = vec4(c, x, 0.0, 1.);\n\t} else if (1.0 <= h && h < 2.0) {\n\t\tcolor = vec4(x, c, 0.0, 1.);\n\t} else if (2.0 <= h && h < 3.0) {\n\t\tcolor = vec4(0.0, c, x, 1.);\n\t} else if (3.0 <= h && h < 4.0) {\n\t\tcolor = vec4(0.0, x, c, 1.);\n\t} else if (4.0 <= h && h < 5.0) {\n\t\tcolor = vec4(x, 0.0, c, 1.);\n\t} else if (5.0 <= h && h < 6.0) {\n\t\tcolor = vec4(c, 0.0, x, 1.);\n\t} else {\n\t\tcolor = vec4(0.0, 0.0, 0.0, 1.);\n\t}\n \n\treturn color;\n}\n\n\n// utils \nmat2 rot2d(float a)\n{\n  float c = cos(a);\n  float s = sin(a);\n  return mat2(c, -s, s, c);\n}\n\n\n// Modeling\n// A single tentacle\nfloat tentacle(vec3 p, float pulse)\n{\n  return cylinder(p.xz, vec2(0.3 + 0.1 * cos(p.y + 2.0 * pulse + 3.0 * time), 0.2 * sin(p.y + 3.0 * pulse + time + 0.1)), 0.1 * exp(p.y * 0.5));\n}\n\n// A single medusa\nfloat medusa(vec3 p)\n{\n  float d = sphere(p, vec3(0.0), 0.8);\n  float pulse = -0.7 - 0.2* cos(time); // animating the \"head\" movement\n  d = fOpDifferenceRound(d, sphere(p, vec3(0.0, pulse, 0.0), 1.0), 0.1);\n  vec3 q = p;\n  q.xz = rot2d(0.3 * time) * q.xz;\n  vec3 q2 = q;\n  pModPolar(q.zx, 5.0);\n  q.y -= 0.3 * pulse;\n  d = fOpDifferenceRound(d, cylinder(q.xy, vec2(0.0), 0.3), 0.1);\n  vec3 q3 = q2;\n  pModPolar(q2.xz, float(numTentacle));\n\n  // Compute all the tentacles\n  float te = tentacle(q2, pulse);\n  q3.xz = rot2d(3.1415 * 0.5) * q3.xz;\n  pModPolar(q3.xz, float(numTentacle));\n  te = min(te, tentacle(q3, pulse));\n  te = max(te, p.y - 0.3); // cut the infinite cylinder for the \"head\"\n  te = fOpDifferenceRound(te, p.y + 5.0, 2.0); // smooth cut the cylinder for the \"end\"\n\n  \n  d = min(d, te);\n  return d;\n}\n\n// Animation \n// the curve the medusa should follow\nvec3 curve(float y) \n{\n  return vec3(0.01 * cos(y + time), y, 0.01 * sin(y * 0.8 + 0.9 * time));\n}\n\n// Generate the local space on the curve\nmat3 localSpace(float y)\n{\n  float eps = 0.001;\n  vec3 forward = normalize(curve(y + eps) - curve(y - eps));\n  vec3 right = vec3(1.0, 0.0, 0.0);\n  vec3 depth = normalize(cross(right, forward));\n  right = normalize(cross(forward, depth));\n  return mat3(right, forward, depth);\n}\n\n\n// Our whole scene \nfloat map(vec3 p)\n{\n  p.y -= time * 0.4; // move down to up continously\n  vec3 period = vec3(7.0, 7.0, 7.0); // repetition cube \n  vec3 id = vec3(ivec3((p - period * 0.5) / period));  // medusa unique id\n  p.y -= 1.0 + sin(id.x + id.y + id.z); // pseudo random down to up offset\n    \n  float y = p.y + id.x + id.y + id.z;\n  //vec3 c = curve(y);\n  p = mat3(inverse(mat4(localSpace(y)))) * p; // animate using the curve\n  vec3 q = mod(p - period * 0.5, period) - period * 0.5; // repeat\n  return medusa(q); // our model \n}\n\n// Raymarcging loop (st is used to \"detect\" edge for the color\nvec3 rm(vec3 ro, vec3 rd, out float st)\n{\n  vec3 p = ro;\n  for (int i = 0; i < 80; ++i)\n  {\n    float d = map(p);\n    if (abs(d) < 0.01)\n    {\n      st = float(i) / 80.0;\n      break;\n    }\n    p += rd * d * 0.7;\n  }\n  return p;\n}\n\n// Colorize using point\nvec3 shade(vec3 p, vec3 origin, vec3 n, float st)\n{\n  float f = fog ? 0.1 : 0.05;\n  vec3 color = vec3(1.0) * exp(-distance(p, origin) * f) * (1.0 + st);\n  color *= vec3(0.3 + 0.1 * st, 0.7 * (0.8 + 0.3 * st), 0.7 - 0.1 * st);\n  color *= mix(vec3(1.0), hsv_to_rgb((p.x+p.y+p.z) * 0.2 + time).rgb, 0.5 * texture(iChannel0, vec2((p.x+p.y+p.z)*0.1, 0.25)).x );\n  return color; \n}\n\n// Compute normals from the scene \nvec3 grad(vec3 p)\n{\n  vec2 eps = vec2(0.01, 0.0);\n  return normalize(vec3(\n    map(p + eps.xyy) - map(p - eps.xyy),\n    map(p + eps.yxy) - map(p - eps.yxy),\n    map(p + eps.yyx) - map(p - eps.yyx)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float bpm = 100.0;\n  float beat_sec = bpm / 60.0;\n  float fq = 2.0 * 3.1415 * beat_sec;\n  float z = time;\n  if (time > 168.0 && time < 206.0)\n  \tmagic_value = pow(abs(sin(0.25 * (time + 0.1) * fq)) + abs(cos(0.25 * (time + 0.1) * fq)), 1.0);\n    \n  vec2 uv = fragCoord.xy / iResolution.xy;\n  uv = 2.0 * uv - 1.0;\n  uv.x *= iResolution.x / iResolution.y;\n  vec3 origin = vec3(3.0, 0.0, z);\n  vec3 direction = normalize(vec3(uv, magic_value * 0.1 + 0.9 - 0.7*length(uv)));\n  if (time > 168.0 && time < 206.0)\n      direction.xy = rot2d((float(int(time * beat_sec)) - 0.053) * 0.3) * direction.xy;\n  float st = 0.0;\n  vec3 p = rm(origin, direction, st);\n  \n  vec3 n = grad(p);\n  vec3 color = shade(p, origin, n, st);\n\n  // reflection \n  if (reflection)\n  {\n    vec3 rd = reflect(direction, n);\n    vec3 p2 = rm(p + 0.1 * rd, rd, st);\n    color = mix(color, shade(p, origin, n, st), 0.05);\n  }\n\n  // Fog \n  if (fog)\n    color +=  vec3(0.0, 0.25, 0.5) * 0.7;\n  \n  fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 13151,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/doctor-gekil/jellyfish"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}