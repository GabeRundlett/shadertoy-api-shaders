{
    "Shader": {
        "info": {
            "date": "1532772472",
            "description": "classical formula used in many situations (BBox, paint bricks, grid marching through edges, cubemaps...)",
            "flags": 0,
            "hasliked": 0,
            "id": "4l3yWM",
            "likes": 7,
            "name": "efficient BBox test",
            "published": 3,
            "tags": [
                "bbox",
                "tudo"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 543
        },
        "renderpass": [
            {
                "code": "#define S(v,r)    smoothstep(3./R.y,0.,  length( v )-r )\n#define disk(P,r) S( P-U , r )\n\nfloat line(vec2 p, vec2 a,vec2 b) { // https://www.shadertoy.com/view/4dcfW8\n    p -= a, b -= a;\n\tfloat h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n\treturn length(p - b * h);                         // dist to segment\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 C = vec2(.1,.3),            // box center\n         S = vec2(.8,.3),            // scale (i.e. radiis )\n         R = iResolution.xy,\n         U = (u+u-R) / R.y,\n        \n    // --- bounding box     \n    B = ( U - C ) / S;              // box coordinates [-1,1]x[-1,1]   \n    B = abs(B);\n    O = .8*vec4( max( B.x, B.y ) < 1.); \n  //O = vec4( B.x < 1. && B.y < 1.); // this form might stop earlier\n    O += disk(C,.04);\n\n    // --- show pseudo distance field\n    O += .1+.1*sin(50.*max( B.x, B.y ));\n   \n    vec2 M = (2.*iMouse.xy-R) / R.y;\n    O.bg += disk(M,.04);\n    B = ( M - C ) / S;\n    float d =  max( abs(B).x, abs(B).y );\n    O.g += disk( C + S*B/d ,.05);\n    O.r += disk( C - S*B/d ,.05);\n    O.g += S(line(U,M,C - S*B/d), 0.); \n\n    // --- show ray front/back intersection\n/**\n    vec2 T = vec2(.6,.8),            // target\n         D = normalize(T-M),         // ray dir from M\n    K = abs((-S + C-M ) / D); d = max(K.x,K.y); O.g += disk( M+d*D, .05);\n     d = min(K.x,K.y); O.g += .5*disk( M+d*D, .05);\n    K = abs(( S +C-M ) / D); d = min(K.x,K.y); O.r += disk( M+d*D, .05);\n     d = max(K.x,K.y); O.r += .5*disk( M+d*D, .05);\n    O += disk(T,.04);\n    O.bg += S(line(U,M,T), 0.); \n/**/\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}