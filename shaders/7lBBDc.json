{
    "Shader": {
        "info": {
            "date": "1652823058",
            "description": "Reading Fractal Horizons which introduced tent and logistic maps so I decided to make this to help me understand them. ",
            "flags": 0,
            "hasliked": 0,
            "id": "7lBBDc",
            "likes": 7,
            "name": "Tent and Logistic Map",
            "published": 3,
            "tags": [
                "map",
                "logistic",
                "tent"
            ],
            "usePreview": 0,
            "username": "mAmaro",
            "viewed": 318
        },
        "renderpass": [
            {
                "code": "float line(vec2 p, vec2 a,vec2 b) { \n    p -= a,\n    b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n    float l = length(p - b * h);                         // dist to segment\n    return smoothstep(0.001, 0.0, l);\n}\n\nfloat UVDot(float UVRadius, vec2 UVPos, float UVFade, vec2 uv, float UVRange)\n{\n    return smoothstep(UVRange-UVFade, UVRange, length(uv-UVPos)/UVRadius);\n}\n\nfloat rand(vec2 uv, float freq)\n{\n    float result = 0.0; \n    vec3 a = fract(uv.xyx * vec3(123.45, 345.678, 567.89));\n    a += dot(a, a + 345.578*(1.0+0.5*cos(iTime*freq)));   \n    result = fract(a.x*a.y*a.z);\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0.0);\n    vec2 uv = gl_FragCoord.xy/iResolution.xy;\n    float olduvx =uv.x;\n    uv.x*=iResolution.x/iResolution.y;\n    uv.x+=1.5-iResolution.x/iResolution.y;\n    color += vec3(uv.x, uv.y, abs(sin(iTime)))*0.2;\n    \n    //~ Tent Map I think???\n    float x0 = 1.0*(.5+.5*sin(iTime*0.4));\n    float c0 = line(uv, vec2(0.0, 0.), vec2(1., 1.));\n    float c1 = 0.0;\n    float c2 = 0.0;\n#if 1\n    //Tent Map Plot\n    for(int i=0;i<10;i++)\n    {\n        float r = 2.;//(.5+.5*sin(iTime*0.2));\n        float x1 = (r/2.)-r*abs(x0-1./2.);\n        vec2 Point = vec2(x0,x1);\n        c0 += 1.-UVDot(0.02, Point, 1.5, uv, 1.0);\n        c0 += line(uv, vec2(x0, 0.0), vec2(x0, x1));\n        c0 += line(uv, vec2(0.0, x1), vec2(x0, x1));\n        x0 = x1;\n    }\n#endif\n#if 1\n    //Logistic Map Plot from r = 3.68\n    float x = mod(iTime*0.000002, 50.0)/50.0;\n    int itr= 50;\n    for(int i=0;i<itr;i++)\n    {\n        float r = 3.68;\n        float x1 = x*r*(1.-x);\n        float x0 = float(i)/float(itr);\n        vec2 Point = vec2(x0,x1);\n        c1 += 1.-UVDot(0.005, Point, 0.0, uv, 1.0);\n        c1 += line(uv, vec2(x0, 0.0), vec2(x0, x1));\n        //c1 += line(uv, vec2(0.0, x1), vec2(x0, x1));\n        x = x1;\n    }\n#endif\n#if 1\n    {\n        //Logistic Map Bifurcation Diagram\n        float x = mod(iTime*0.00000001, 100.0)/100.0;\n        int itr= 50;\n        for(int i=0;i<itr;i++)\n        {\n            float r = uv.x*4.0;\n            float x1 = x*r*(1.-x);\n            float x0 = float(i)/float(itr);\n            vec2 Point = vec2(x0,x1);\n            c2 += 1.-UVDot(0.01, Point, 900.0, uv, 1.0);\n            c2 += line(uv, vec2(x0, 0.0), vec2(x0, x1));\n            c2 += line(uv, vec2(0.0, x1), vec2(x0, x1));\n            x = x1;\n        }\n    }\n#endif\n    color += c0*vec3(1.0,0.,1.) + c1*vec3(1.,1.,0.) + c2*vec3(0.,1.,1.);\n    fragColor = vec4(color,1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}