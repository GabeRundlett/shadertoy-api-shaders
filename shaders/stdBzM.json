{
    "Shader": {
        "info": {
            "date": "1662853613",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "stdBzM",
            "likes": 3,
            "name": "Fractal mosaic 15 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n        \n        //vec2(1.5,0.5)\n        //vec2(1.5,0.)\n        //vec2(abs(mod(a.x-.5,2.)-1.),abs(mod(a.y-.5,2.)-1.))\n    ,\n    \n    a1 = a+a2;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    return\n        abs(fract((a1)*(a2.x+a2.y))-.5)\n        //abs(fract(a+vec2(floor(a.x),floor(a.y)))/2.-.5)\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.y += iTime/t1/12.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    for(int k = 0; k < 9; k++){\n    \n        //Uncomment this line to make another interesting pattern\n        //uv.x -= abs(fract(uv.x)-.5)/scale;\n        \n        bool c1 = t2.x < uv.x;\n        uv = (uv+t2)/scale;\n        t2 = triangle_wave(uv-.5);\n        uv = t2-triangle_wave(uv.yx);       \n        \n        col.x = max(abs(uv.y-uv.x)/3.,col.x);\n        col =\n            abs(abs(col-(1.-col.x))-col.yzx);\n            //abs(abs(col-(float(c1)+1.-col.x))-col.yzx);\n            //abs(abs(col*col-(1.-col.x))-col.yzx);\n            //abs(abs(col-(1.-col.x))-col.yzx*col.yzx);\n        //if(uv.y>uv.x) uv = uv.yx;\n        //if(c1) col =\n            //col.yzx;\n            //abs(col.yzx-col);\n\n    }\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\n//#define fmod(a,b) mod(mod(floor((a)),floor(1.+(a)/5.)),b)\n#define fmod1(x,y) mod(floor(y*((x)/y+floor((x)/y)/y)),y)\n\nvec2 mainSound(int samp, float time){\n  \n  float s1 =\n      8.,\n  s2 = 8.,\n  m4 =\n      fmod(floor(time*s1)+floor(time/s1),2.)\n  ,\n  t=\n      time/(1.+m4)\n  ,\n  m3 =\n      fmod(floor(t*s1)/1.5,s2);\n  t *=\n      s1*s1\n  ;\n\n  float m2 =\n      1. + fmod(t/s1,s1)\n  ;\n  \n  float a = 64.*sqrt((1.-sqrt(max(fract(t/s1/s1),fract(t/s1)))))*.2,\n\n  nb = pow(2.,(m3+m2)/5.+6.5);\n\n  return abs(.5-vec2(fract(time*nb*.998)\n   ,fract(time*nb)))*a;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}