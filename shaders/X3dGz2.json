{
    "Shader": {
        "info": {
            "date": "1717205163",
            "description": "explosion test for https://github.com/Krapas2/BlindEnding",
            "flags": 0,
            "hasliked": 0,
            "id": "X3dGz2",
            "likes": 7,
            "name": "cartoon explosion effect",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "perlin",
                "turbulence",
                "explsion"
            ],
            "usePreview": 0,
            "username": "Krapas",
            "viewed": 540
        },
        "renderpass": [
            {
                "code": "\nvec3 boom_pal[] = vec3[4](\n    vec3(.2, .15, .3),\n    vec3(.9, .15, .05),\n    vec3(.9, .5, .1),\n    vec3(.95, .95, .35)\n);\n\nvec3 smoke_pal[] = vec3[3](\n    vec3(.2, .15, .3),\n    vec3(.35, .3, .45),\n    vec3(.5, .45, .6)\n);\n\nvec3 n_rand3(vec3 p) {\n    vec3 r = \n        fract(\n            sin(\n                vec3(\n                    dot(p, vec3(127.1,311.7,371.8)),\n                    dot(p,vec3(269.5,183.3,456.1)),\n                    dot(p,vec3(352.5,207.3,198.67))\n                )\n            ) * 43758.5453\n        ) * 2.0 - 1.0;\n    return normalize(vec3(r.x/cos(r.x), r.y/cos(r.y), r.z/cos(r.z)));\n}\n\nfloat noise(vec3 p) {\n\n    vec3 fv = fract(p);\n    vec3 nv = vec3(floor(p));\n    \n    vec3 u = fv*fv*fv*(fv*(fv*6.0-15.0)+10.0);\n    \n    return (\n        mix(\n            mix(\n                mix(\n                    dot( n_rand3( nv+vec3(0.0,0.0,0.0) ), fv-vec3(0.0,0.0,0.0)), \n                    dot( n_rand3( nv+vec3(1.0,0.0,0.0) ), fv-vec3(1.0,0.0,0.0)), \n                    u.x\n                ), \n                mix(\n                    dot( n_rand3( nv+vec3(0.0,1.0,0.0) ), fv-vec3(0.0,1.0,0.0)), \n                    dot( n_rand3( nv+vec3(1.0,1.0,0.0) ), fv-vec3(1.0,1.0,0.0)), \n                    u.x\n                ), \n                u.y\n            ),\n            mix(\n                mix(\n                    dot( n_rand3( nv+vec3(0.0,0.0,1.0) ), fv-vec3(0.0,0.0,1.0)), \n                    dot( n_rand3( nv+vec3(1.0,0.0,1.0) ), fv-vec3(1.0,0.0,1.0)), \n                    u.x\n                ), \n                mix(\n                    dot( n_rand3( nv+vec3(0.0,1.0,1.0) ), fv-vec3(0.0,1.0,1.0)), \n                    dot( n_rand3( nv+vec3(1.0,1.0,1.0) ), fv-vec3(1.0,1.0,1.0)), \n                    u.x\n                ), \n                u.y\n            ),\n            u.z\n       )\n  );\n}\n\nfloat worley(vec3 s)\n{\n    vec3 si = floor(s);\n    vec3 sf = fract(s);\n\n    float m_dist = 1.;  \n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            for (int z= -1; z <= 1; z++) {\n                vec3 neighbor = vec3(float(x),float(y), float(z));\n\n                vec3 point = fract(n_rand3(si + neighbor));\n                point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n\n                vec3 diff = neighbor + point - sf;\n\n                float dist = length(diff);\n\n                m_dist = min(m_dist, dist);\n            }\n        }\n    }\n\n    return m_dist;\n}\n\nfloat oct_noise(vec3 pos, float o)\n{\n\n    float ns = 0.0;\n    float d = 0.0;\n    \n    int io = int(o);\n    float fo = fract(o);\n    \n    for(int i=0;i<=io;++i)\n    {\n        float v = pow(2.0,float(i));\n        d += 1.0/v;\n        ns += noise(pos*v)*(1.0/v);\n    }\n    \n    \n    float v = pow(2.0,float(io+1));\n    d+= 1.0*fo/v;\n    ns += noise(pos*v)*(1.0*fo/v);\n    \n    return ns/d;\n}\n\nfloat boom (vec2 p)\n{\n    float repeat = mod(iTime, 2.);\n    float shape = 1.-pow(distance(vec3(p, 0.), vec3(0.)),2.) / (repeat*12.) - repeat*2.;\n    \n    float distortion = noise(vec3(p*.5, iTime*.5));\n    float bubbles = .5-pow(worley(vec3(p*1.2,iTime*2.)), 3.);\n    float bw = .5;\n    float effects = (bw * bubbles + (1.-bw) * distortion);\n\n    return shape + effects;\n}\n\nfloat smoke (vec2 p)\n{\n    float repeat = mod(iTime, 2.);\n    float shape = 1.-pow(distance(vec3(p - vec2(0, 2) * pow(repeat/1.45,2.)*1.5, 0.), vec3(0.)),2.) / (repeat*16.) - pow(repeat*1.5,.5);\n    \n    float distortion = noise(vec3(p*1.5 - vec2(0, 2) * pow(repeat/1.45,2.)*1.5, iTime*.1));\n    float bubbles = .5-pow(worley(vec3((p/pow(repeat,.35)) - vec2(0, 2) * pow(repeat/1.65,2.)*1.5, iTime*.1)), 2.);\n    float bw = .75;\n    float effects = (bw * bubbles + (1.-bw) * distortion);\n\n    return shape + effects;\n}\n\nfloat f (vec2 p){\n    float b = boom(p);\n    float s = smoke(p);\n    return b > s ? b : s;\n}\n\nvec2 grad( vec2 x )\n{\n    vec2 h = vec2( 0.01, 0.0 );\n    return vec2( f(x+h.xy) - f(x-h.xy),\n                 f(x+h.yx) - f(x-h.yx) )/(2.0*h.x);\n}\n\nfloat border (vec2 uv)\n{\n\n    float b = f( uv );\n    vec2  g = grad( uv );\n    float de = abs(b)/length(g);\n    float eps = .02;\n    \n    return smoothstep( 1.0*eps, 2.0*eps, de );\n}\n\nfloat posterize(float v, int n)\n{\n    float fn = float(n);\n    return floor(v*fn)/(fn-1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = uv - vec2(.5, .4);\n    pos.x *= iResolution.x/iResolution.y;\n    pos *= 7.;\n    \n    int bpl = boom_pal.length();\n    int spl = smoke_pal.length();\n\n\n    float boom_val = boom(pos);\n    float boom_a = step(0., boom_val);\n    vec3 boom_col = boom_pal[int(posterize(boom_val, bpl)*float(bpl))] - vec3(1.-boom_a);\n    \n    float smoke_val = smoke(pos);\n    float smoke_a = step(0., smoke_val);\n    vec3 smoke_col = smoke_pal[int(posterize(smoke_val, spl)*float(spl))] - vec3(1.-smoke_a);\n    \n    float b = border(pos);\n    \n    float bw = step(smoke_val*1.25, boom_val);\n    \n    vec3 color = bw * boom_col + (1.-bw) * smoke_col;\n    float alpha = bw * boom_a + (1.-bw) * smoke_a;\n    \n    vec4 result = vec4(alpha == 1. ? color : vec3(.5), alpha) - vec4(vec3(1.-b), 1.);\n\n    fragColor = vec4(result);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}