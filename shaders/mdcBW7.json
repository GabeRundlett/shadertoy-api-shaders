{
    "Shader": {
        "info": {
            "date": "1697955233",
            "description": "Click to explore! Generated using the same formula as the Julia/Mandelbrot set, but using the tetration hyperoperation. \nz²↑₄ + i = z^z+i instead of z²↑₃ + i = z*z+i\n[url=https://www.shadertoy.com/playlist/s3BcD1]FRACTAL PLAYLIST[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "mdcBW7",
            "likes": 5,
            "name": "Sum Tetrabrot II Julia Explorer",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "mandelbrot",
                "interactive",
                "orbit",
                "quadratic",
                "trap",
                "explorer",
                "chaotic",
                "tetration",
                "hyperoperation"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 243
        },
        "renderpass": [
            {
                "code": "/// by Dom Mandy in 2023\n\n\n/*\nhttps://en.wikipedia.org/wiki/Tetration\n*/\nvec2 T(vec2 v) {\n    // https://mathworld.wolfram.com/ComplexExponentiation.html\n    float d = dot(v, v),\n          a = atan(v.y, v.r),\n          t = dot(v, vec2(a, log(d) / 2.));\n        \n    return exp(-a * v.y) * pow(d, v.r / 2.) * vec2(cos(t), sin(t));\n}\n\n\nvoid mainImage(out vec4 o, vec2 i)\n{\n    // https://en.wikipedia.org/wiki/Orbit_trap\n    vec2 z, t, w, \n         R = iResolution.xy,\n         M = 2. * iMouse.xy - R;\n    z = t = i = 2. * (i + i - R) / R.x;\n    float j, f, r = 9.;\n    \n    // https://en.wikipedia.org/wiki/Julia_set\n    for (M = 2. * M / R.x; j++ < 48.; f < r ? r = f, t = z : t)\n        f = dot(z, z = \n            mix(i, M, max(0., sign(iMouse.z)))\n            + (w = T(z))\n        );\n    \n    // nonlinearly proportional to distance\n    float d = 3. * sqrt(r) + exp(-length(z)),\n          // grid\n          g = smoothstep(0., 4., length(fract(w))),\n          // hue angle\n          // https://en.wikipedia.org/wiki/Argument_(complex_analysis)\n          h = atan(t.y, t.x) + iTime / 4.;\n    \n    // normal map\n    vec3 n = normalize(cross(dFdx(vec3(i, d)), dFdy(vec3(i, d)))),\n         // light ray\n         e = normalize(vec3(1, -1, -1)),\n         // https://en.wikipedia.org/wiki/Color_wheel\n         v = vec3(h - 2.1, h, h + 2.1);\n    // https://en.wikipedia.org/wiki/Phong_reflection_model\n    float l = (max(0., dot(e, n)),\n            + max(0., dot(reflect(e, n), vec3(0, 0, -1)))\n    ) / 2.;\n    \n    // https://en.wikipedia.org/wiki/Versine#Definitions\n    o = vec4(.5 + .5 * cos(v), 1.);\n    \n    o = smoothstep(.0, .6, l * o + g);\n}\n\n\n/*\nREFERENCES\n\ndomain warping\n\ngcgac 2022\nhttps://www.shadertoy.com/view/NtyfWD\n\ndistance\n\niq 2013\nhttps://www.shadertoy.com/view/lsX3W4\n\norbit traps\n\nDeltaT 2023\nhttps://www.shadertoy.com/view/csSyzy\n\nathibaul 2021\nhttps://www.shadertoy.com/view/fdt3zX\n\npiotrekli 2016\nhttps://www.shadertoy.com/view/4lK3Dc\n\nKramin 2015\nhttps://www.shadertoy.com/view/4st3Wn\n\nrefactoring\n\nshadertoyjiang & FabriceNeyret2 2023\nhttps://www.shadertoy.com/view/DdcBWX\n\nSnoopethDuckDuck 2023\nhttps://www.shadertoy.com/view/cs3BRj\n*/\n\n\n/*\nFURTHER READING\n\nhyperoperations\n\nhttps://en.wikipedia.org/wiki/Tetration\nhttps://en.wikipedia.org/wiki/Iterated_function#Fractional_iterates_and_flows,_and_negative_iterates\n\nfractals\n\nhttps://en.wikipedia.org/wiki/Julia_set\nhttps://en.wikipedia.org/wiki/Mandelbrot_set\nhttps://en.wikipedia.org/wiki/Bifurcation_diagram\nhttps://en.wikipedia.org/wiki/Orbit_trap#Point_based\n\ncolor mapping\n\nhttps://en.wikipedia.org/wiki/Color_wheel\nhttps://en.wikipedia.org/wiki/Versine#Definitions\nhttps://en.wikipedia.org/wiki/Spectral_sensitivity\nhttps://en.wikipedia.org/wiki/Argument_(complex_analysis)\n\ndifferentials\n\nhttps://en.wikipedia.org/wiki/Product_rule\nhttps://en.wikipedia.org/wiki/Gradient_descent\nhttps://en.wikipedia.org/wiki/Newton%27s_method\nhttps://en.wikipedia.org/wiki/Householder%27s_method\nhttps://en.wikipedia.org/wiki/Automatic_differentiation\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}