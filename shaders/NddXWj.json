{
    "Shader": {
        "info": {
            "date": "1633973771",
            "description": "Lampara de lava, shader basado subdivisi√≥n del espacio por regiones o IDs ",
            "flags": 0,
            "hasliked": 0,
            "id": "NddXWj",
            "likes": 2,
            "name": "Lava-Lamp ",
            "published": 3,
            "tags": [
                "noise",
                "time",
                "lava",
                "id",
                "idspace",
                "lampcolor"
            ],
            "usePreview": 0,
            "username": "nictemeral",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "//\n//proximamente lo pasare en limpio\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec2 map(vec2 value, vec2 min1, vec2 max1, vec2 min2, vec2 max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec3 map(vec2 value, vec3 min1, vec3 max1, vec3 min2, vec3 max2) {\n  return min2 + (vec3((value.s+value.t)/2.0 )- min1) * (max2 - min2) / (max1 - min1);\n}\n\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n\treturn 1.-smoothstep(_radius-(_radius*1.516),\n                         _radius+(_radius*0.122),\n                         dot(dist,dist)*4.0);\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nfloat div=4.;\n vec2 st = fragCoord/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;//esto aca es medio inecesario\n\n    st*=div;\n\n    vec2 ipos = floor(st);  \n    vec2 f_st=fract(st);\n    vec2   d_time=(0.5-random2(ipos));\n\n    vec2 mpos = map(ipos,vec2(0.0),vec2(div),vec2(0.120,0.250),vec2(0.990,01.980));\n\tmpos*=4.9632;//esto esta demas y es mala practica pero lo odejo por que me gusto el color\n    \n\n    float c=step(0.348,circle(f_st,1.340)*noise(f_st*div+ipos*div+iTime*d_time));\n\n\n    vec3 color = c*vec3(mpos.s+mpos.t)*0.5*vec3(0.680,0.159,0.067);\n\n\n    fragColor = vec4(color,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}