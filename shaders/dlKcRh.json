{
    "Shader": {
        "info": {
            "date": "1700138339",
            "description": "buble  blur effet",
            "flags": 32,
            "hasliked": 0,
            "id": "dlKcRh",
            "likes": 7,
            "name": "buble blur",
            "published": 3,
            "tags": [
                "blur",
                "heart"
            ],
            "usePreview": 0,
            "username": "zyc",
            "viewed": 240
        },
        "renderpass": [
            {
                "code": "const float lightIns = 14.0;\nconst float radius = 8.0;\nconst float ins = 1.1;\nconst float lastR = 24.14;\n\nmat2 rotMatrix(float angle)\n{\n    return mat2(-0.73735, 0.67539,\n                    -0.67539, -0.73735);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float progress = getProgress(iTime);\n    float intensity = progress;\n    float mysize = 97.0;\n    float blurSize = intensity * 1.25;\n\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    mat2 _GoldenRot = rotMatrix(2.39996323);\n    mat2 rot = _GoldenRot;\n    vec3 accumulator = vec3(0.0);\n    vec3 divisor = vec3(0.0);\n    float r = lastR*0.8;\n    float myRatio=max(iResolution.x,iResolution.y)/min(iResolution.x,iResolution.y);\n    vec2 angle = vec2(0.0, 0.35*blurSize*myRatio)/ iResolution.xy;\n\n    float amount = 40.0;\n    amount += 0.9987*500.0;\n    \n    \n    for (int i = 0; i < 120; i++)\n    {\n        float j = float(i);\n        if(j>mysize)\n            break;\n        \n        angle.x*=ratio;\n        angle = rot * angle;\n        angle.x/=ratio;\n        vec3 col = texture(iChannel0,vec2(uv + (r - 1.0)*mix(1.5,1.0,r/lastR) * angle)).rgb;\n        vec3 bokeh = pow(col,vec3(9.0)) * amount+.4;;\n        float d=r/lastR;\n        bokeh=bokeh*smoothstep(1.0,0.9,d)*\n        (ins+(1.0-ins)*smoothstep(0.8,0.9,d));\n        accumulator +=  col*bokeh;\n        divisor += 1.0*bokeh;\n        r += 1.0 / r;\n    }\n    \n    \n    vec3 res= (accumulator / divisor);\n    fragColor = vec4(res, texture(iChannel0,uv).a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float intensity = getProgress(iTime);\n    float blurSize = intensity * BLUR_SIZE;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 screenSize = iResolution.xy*0.5;\n    const int  radius = 8;\n    vec3 W = vec3(0.299,0.587,0.114);\n    \n    float half_gaussian_weight[9];\n    \n    half_gaussian_weight[0]= 0.20;//0.137401;\n    half_gaussian_weight[1]= 0.19;//0.125794;\n    half_gaussian_weight[2]= 0.17;//0.106483;\n    half_gaussian_weight[3]= 0.15;//0.080657;\n    half_gaussian_weight[4]= 0.13;//0.054670;\n    half_gaussian_weight[5]= 0.11;//0.033159;\n    half_gaussian_weight[6]= 0.08;//0.017997;\n    half_gaussian_weight[7]= 0.05;//0.008741;\n    half_gaussian_weight[8]= 0.02;//0.003799;\n    \n    \n    vec4 sum            = vec4(0.0);\n    vec4 result         = vec4(0.0);\n    vec2 unit_uv        = vec2(blurSize/screenSize.x,blurSize/screenSize.y)*1.25;\n    vec4 curColor       = texture(iChannel0, uv);\n    \n    vec4 centerPixel    = curColor*half_gaussian_weight[0];\n    \n    float sum_weight    = half_gaussian_weight[0];\n    //horizontal\n    for(int i=1;i<=radius;i++)\n    {\n        vec2 curRightCoordinate = uv+vec2(float(i),0.0)*unit_uv;\n        vec2 curLeftCoordinate  = uv+vec2(float(-i),0.0)*unit_uv;\n        vec4 rightColor = texture(iChannel0,curRightCoordinate);\n        vec4 leftColor = texture(iChannel0,curLeftCoordinate);\n        sum+=rightColor*half_gaussian_weight[i];\n        sum+=leftColor*half_gaussian_weight[i];\n        sum_weight+=half_gaussian_weight[i]*2.0;\n    }\n    \n    result = (sum+centerPixel)/sum_weight; \n    \n    fragColor = result;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float progress = getProgress(iTime);\n    float intensity = progress;\n    float blurSize = intensity * BLUR_SIZE;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 screenSize = iResolution.xy*0.5;\n    const int  radius = 8;\n    float half_gaussian_weight[9];\n    \n    half_gaussian_weight[0]= 0.2; //0.2;//0.137401;\n    half_gaussian_weight[1]= 0.19;//0.2;//0.125794;\n    half_gaussian_weight[2]= 0.17;//0.2;//0.106483;\n    half_gaussian_weight[3]= 0.15;//0.2;//0.080657;\n    half_gaussian_weight[4]= 0.13;//0.2;//0.054670;\n    half_gaussian_weight[5]= 0.11;//0.2;//0.033159;\n    half_gaussian_weight[6]= 0.08;//0.2;//0.017997;\n    half_gaussian_weight[7]= 0.05;//0.2;//0.008741;\n    half_gaussian_weight[8]= 0.02;//0.2;//0.003799;\n    \n    vec4 sum            = vec4(0.0);\n    vec4 result         = vec4(0.0);\n    vec2 unit_uv        = vec2(blurSize/screenSize.x,blurSize/screenSize.y)*1.25;\n\n    vec4 centerPixel    = texture(iChannel0, uv);\n    centerPixel = centerPixel*half_gaussian_weight[0];\n    float  sum_weight   = half_gaussian_weight[0];\n    //vertical\n    for(int i=1;i<=radius;i++)\n    {\n        vec2 curBottomCoordinate    = uv+vec2(0.0,float(i))*unit_uv;\n        vec2 curTopCoordinate       = uv+vec2(0.0,float(-i))*unit_uv;\n        sum+=texture(iChannel0,curBottomCoordinate)*half_gaussian_weight[i];\n        sum+=texture(iChannel0,curTopCoordinate)*half_gaussian_weight[i];\n        sum_weight+=half_gaussian_weight[i]*2.0;\n    }\n    \n    \n    result = (sum+centerPixel)/sum_weight;\n    fragColor = result;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BLUR_SIZE 0.48\n\n\nfloat getProgress(float t0) {\n    float t = 1.0 - t0;\n    return fract(0.3*t);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}