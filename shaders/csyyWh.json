{
    "Shader": {
        "info": {
            "date": "1696009112",
            "description": "My first complex scene",
            "flags": 112,
            "hasliked": 0,
            "id": "csyyWh",
            "likes": 44,
            "name": "Sunrise Window",
            "published": 3,
            "tags": [
                "raymarch",
                "aesthetic",
                "plant",
                "realistic",
                "agx"
            ],
            "usePreview": 0,
            "username": "Nguyen2007",
            "viewed": 768
        },
        "renderpass": [
            {
                "code": "/*\nCredits:\n    \n    Thanks Inigo for reducing the compile time from 30 to only 2 seconds\n    (on my computer)\n    \n    Inigo Quilez's lighting model: https://www.shadertoy.com/view/Xds3zN\n    Plant based on Inae's \"Happy Plant\": https://www.shadertoy.com/view/4ltyD4\n    Subsurface scattering approx by Poisson: https://www.shadertoy.com/view/dltGWl\n    Wood texture based on dean_the_coder: https://www.shadertoy.com/view/mdy3R1\n    AgX based on bwrensch's: https://www.shadertoy.com/view/cd3XWr\n    \n    The rest I made by myself\n*/\n\nvec3 tone(vec3 v)\n{\n    mat3 m = mat3(.842479062253094,  .0423282422610123, .0423756549057051,\n                  .0784335999999992, .878468636469772,  .0784336,\n                  .0792237451477643, .0791661274605434, .879142973793104);\n\n    v = sat((log2(m * v) + 12.47393) / 16.5);\n  \n    vec3 v2 = v * v;\n  \n    v = v2 * (v2 * (15.5 * v2 - 40.14 * v + 31.96) - 6.868 * v + .4298) + .1191 * v - .00232;\n  \n    v = inverse(m) * mix(vec3(dot(v, vec3(.2126, .7152, .0722))),\n                         pow(vec3(1, .9, .7) * v, vec3(1.3)), 1.2);\n    \n    return mix(1.055 * pow(v, vec3(1) / 2.4) - .055, v * 12.92, lessThan(v, vec3(.0031308)));\n}\n\n// Fix by ttg: smooth noise -> white noise\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    O = vec4(0);\n    \n    if (1.5 * abs(I.x - .5 * R.x) > R.y) return;\n    \n    vec2 p = I / R.xy;\n    \n    vec3 col = vec3(texture(iChannel0, p - vec2(.001, 0)).x,\n                    texture(iChannel0, p).y,\n                    texture(iChannel0, p + vec2(.001, 0)).z);\n    \n    col = tone(col * (h33(I.xyx) * .3 + .7) * (p.y * .8 + .2));\n    \n    col += S01(col);\n    \n    O = vec4(col * .5, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution\n#define sat(x) clamp(x, 0., 1.)\n#define S smoothstep\n#define S01(a) S(0., 1., a)\n#define N normalize\n\n#define linear(x, a, b) sat((x - a) / (b - a))\n\n#define TAU 6.283185\n\n#define ZERO min(0, iFrame)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n// PCG\nvec3 h33(vec3 p)\n{\n    uvec3 v = uvec3(p * 1e5) * 1664525u + 1013904223u;\n\n    v.x += v.y * v.z;\n    v.y += v.z * v.x;\n    v.z += v.x * v.y;\n\n    v ^= v >> 16u;\n\n    v.x += v.y * v.z;\n    v.y += v.z * v.x;\n    v.z += v.x * v.y;\n    \n\treturn vec3(v) / 4294967295.;\n}\n\n#define h23(p) h33(p).xy\n\n#define h13(p) h33(p).x\n\nfloat n13(vec3 p)\n{\n    vec3 s = vec3(7, 157, 113), ip = floor(p);\n\tp = S01(p - ip);\n    \n\tvec4 h = vec4(0, s.yz, 270) + dot(ip, s);\n    \n    #define n(x) fract(sin(x) * 43758.545)\n    \n\th = mix(n(h), n(h + 7.), p.x);\n\th.xy = mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\n#define cc(a) (2.33 * (a) * vec3(1, (a) * .5 + .5, a))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Fix by iq <3: while loop -> for loop\n\nfloat fbm(vec3 p, int o, float r)\n{\n\tfloat s = 0.,\n\t      a = 1.,\n\t      t = 0.;\n    \n\tfor(int i = ZERO; i < o; i++)\n    {\n\t\ts += a * n13(p);\n\t\tt += a;\n\t\ta *= r;\n\t\tp *= 2.;\n\t}\n    \n\treturn s / t;\n}\n\nfloat mus(vec3 p, int o, float d, float l)\n{\n\tfloat s = 0.,\n\t      a = 1.;\n          \n\tfor(int i = ZERO; i > o; i++)\n    {\n\t\ts += 2. * a * n13(p) - a;\n\t\ta *= pow(l, -d);\n\t\tp *= l;\n\t}\n    \n\treturn s;\n}\n\nvec3 wood(vec3 p)\n{\n    vec3 q = p * vec3(7.8, 1.17, 1.17);\n    \n\tfloat n1 = fbm(q + vec3(n13(q + vec3(64, 83, 33)), n13(q + vec3(27, 96, 45)), n13(q + vec3(95, 87, 91)) * 2. - 1.), 8, .5),\n          n2 = mix(mus(vec3(n1 * 4.6), 8, 0., 2.5), n1 * .8 + .2, .85);\n    \n    q = p * vec3(.01, .15, .15);\n          \n    n2 *=   (1. - mus(vec3(sin(q.x * 20. + .4 * fbm(q * 3., 3, 3.)) * .5 + .5, q.yz), 15, .26, 2.4) * .4) /* Dirt  */\n          * (1. - S(.2, 1., mus(p * vec3(500, 6, 1), 2, 2., 2.5)) * .2);                                  /* Grain */\n    \n    return mix(mix(vec3(.03, .012, .003), vec3(.25, .11, .04), linear(n2, .19, .56)), vec3(.52, .32, .19), linear(n2, .56, 1.));\n}\n\nvec3 dirRough(vec3 nor, vec3 ref, float r, vec2 h)\n{\n    float sz = (1. - h.y) / (1. + (r * r - 1.) * h.y);\n          \n    vec3 u   = N(cross(nor, abs(nor.y) > .5 ? vec3(1, 0, 0) : vec3(0, 1, 0))),\n\t     ret = sqrt(1. - sz) * (cos(TAU * h.x) * u + sin(TAU * h.x) * cross(u, ref)) + sqrt(sz) * ref;\n    \n    return dot(ret, nor) > 0. ? ret : ref;\n}\n\n#define ranDisk(h) (sqrt(h.x) * vec2(sin(h.y * TAU), cos(h.y * TAU)))\n\nfloat smin(float a, float b, float k)\n{\n\tfloat f = linear(a - b, -k, k);\n    return mix(a, b, f) - k * (f - f * f);\n}\n\n#define smax(a, b, k) smin(a, b, -k)\n\n#define sabs(p, k) (sqrt((p) * (p) + k * k) - k)\n\n#define sdSph(p, r) (length(p) - r)\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    p = abs(p) - b;\n    return min(max(p.x, max(p.y, p.z)), 0.) + length(max(p, 0.));\n}\n\nfloat sdCyl(vec3 p, float h, float r)\n{\n    vec2 d = vec2(length(p.xz) - r, abs(p.y) - h);\n    return min(max(d.x, d.y), 0.) + length(max(d, 0.));\n}\n\n// Modified for the \"chair\"\nfloat sdHor(vec3 p, float a, float r)\n{\n    p.x = abs(p.x);\n    \n    float l = length(p.xy);\n    \n    p.xy *= mat2(-cos(a), sin(a), sin(a), cos(a));\n    \n    p.xy = vec2(((p.y > 0. || p.x > 0.) ? p.x : l * sign(-cos(a))) - 1.,\n                abs(((p.x > 0.) ? p.y : l) - r));\n    \n    return length(vec2(length(max(p.xy, 0.)) + min(0., max(p.x, p.y)), p.z));\n}\n\nfloat leaf(vec3 p, float a, float s)\n{\n    p.xy *= rot(-a);\n\n    //main part\n    \n    p.x -= .25 * s;\n    p.y = -sabs(p.y - .02, .01) - .95 * s;\n    p.z = sabs(p.z, .01) + .05;\n    \n    float d = sdSph(p, s);\n    \n    //tip\n    p.x -= .175 * s;\n    p.z += .423 * s - .05;\n    \n   \treturn smin(d, sdSph(p, s * 1.05), .05);\n}\n\n#define opU(a, b) ((a.x < b.x) ? a : b)\n\nvec2 map(vec3 pos)\n{\n    vec2 res = vec2(10, 0);\n    \n    // Wall\n    \n    res = opU(res, vec2(sdBox(pos - vec3(0, -5, .4), vec3(5, 5, .1)), 1));\n\n    // Table\n    \n    res = opU(res, vec2(sdBox(pos, vec3(5, .025, .525)) - .05, 2));\n    \n    // Bumps\n    \n    res = opU(res, vec2(sdBox(pos - vec3(0, .15, .3), vec3(5, .05, .15)) - .03, 3));\n    res = opU(res, vec2(sdBox(pos - vec3(0, .3, .4), vec3(5, .05, .15)) - .03, 3));\n    \n    // Frame\n    \n    res = opU(res, vec2(sdBox(pos - vec3(0, 5, .4), vec3(.1, 5, .05)) - .03, 3));\n    \n    // Pot\n    \n    vec3 p = pos / 1.7 + vec3(.53, -.15, .12);\n    p.xz *= rot(2.);\n    \n    res = opU(res, vec2(smax(smax(sdSph(p, .2), p.y - .1, .01), -sdSph(p, .18), .01), 4));\n    \n    // Dirt\n    res = opU(res, vec2(smax(p.y - .06, sdSph(p, .18), .01), 5));\n    \n    // Plant\n    \n    if(sdCyl(pos + vec3(.9, -.6, .2), .2, .5) < 0.)\n    {\n        p.y -= .06;\n\n        float a = 1.2, o = .01;\n\n        for(int i = ZERO; i < 20; i++)\n        {\n            p.xz *= rot(3.883);\n            a *= .9;\n            o += .002;\n            res = opU(res, vec2(leaf(p - vec3(o, 0, 0), a, .3), 5));\n        }\n    }\n    \n    // Books\n    #define book(i) res = opU(opU(res, vec2(smax(sdBox(p, vec3(.4, .05, .3)) - .05, -sdBox(p + vec3(0, 0, .1), vec3(.5, .05, .4)), .01), i)), vec2(sdBox(p + .01 * n13(p * 20.), vec3(.41, .05, .31)), 8));\n    \n    p = pos - vec3(.17, .15, -.3);\n    p.xz *= rot(.2);\n\n    book(6)\n\n    p.y -= .2;\n    p.xz *= rot(-.2);\n\n    book(7)\n    \n    // Cloth\n    p = pos - vec3(-.9, -.33, -.17);\n    res = opU(res, vec2(smax(sdBox(p, vec3(.45, .4, .4)) - .03, -sdBox(p - vec3(0, -.1, .1), vec3(.5)), .01), 9));\n    \n    // \"Chair\"\n    \n    p = pos - vec3(.1, .1, -1.5);\n    p.y *= -1.;\n    p.xz *= rot(-.4);\n    p.yz *= rot(-.05);\n    \n    res = opU( res, vec2(max(sdHor(p, 1.6, .6), sdBox(p, vec3(.5, .6, .03))) - .03, 10));\n    res = opU( res, vec2(sdHor(p + vec3(0, .4, 0), 1.4, .5) - .05, 10));\n    \n    return res;\n}\n\nvec2 raycast(vec3 ro, vec3 rd)\n{\n    vec2 res = vec2(0);\n\n    float t = 0.;\n    for(int i = ZERO; i < 256 && t < 6.5; i++)\n    {\n        vec2 h = map(ro + rd * t);\n        if(abs(h.x) < 1e-4 * t)\n        { \n            res = vec2(t, h.y);\n            break;\n        }\n        t += h.x;\n    }\n    \n    return res;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, vec3 rd, float tmax, float w)\n{\n    float res = 1., t = 0.;\n    \n    for(int i = ZERO; i < 70 && t < tmax && res > -1. && t < tmax; i++ )\n    {\n        float h = map(ro + t * rd).x;\n        res = min(res, h / (w * t));\n        t += clamp(h, .01, .5);\n    }\n    \n    return S01(res * .5 + .5);\n}\n\n// Fix by iq: using the material from raycast instead\n//            of evaluating the map function again\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(vec3 pos, float m)\n{\n    vec3 n = vec3(0);\n    for(int i = ZERO; i < 4; i++)\n    {\n        vec3 e = mod(vec3((i + 3) / 2, i / 2, i), 2.) - .5;\n        n += e * map(pos + 1e-4 * e).x;\n    }\n    \n    if(m > 5.5 && m < 7.5)\n    {\n        vec2 e = vec2(.01, 0);\n        pos *= 1e2;\n        \n        n = mix(N(n), N(vec3(n13(pos - e.xyy) - n13(pos + e.xyy),\n                             2. * e.x,\n                             n13(pos - e.yyx) - n13(pos + e.yyx))), .1);\n    }\n    \n    return N(n);\n}\n\n// https://iquilezles.org/articles/nvscene2008/rwwtt.pdf\nfloat calcAO(vec3 pos, vec3 nor)\n{\n\tfloat occ = 1., sca = 3., h = .01;\n    \n    for(int i = ZERO; i < 5 && occ > 0.; i++)\n    {\n        occ -= (h - map(pos + h * nor).x) * sca;\n        sca *= .95;\n        h += .03;\n    }\n    \n    return sat(occ) * (.5 + .5 * nor.y);\n}\n\nvec3 render(vec3 ro, vec3 rd, vec2 p)\n{\n    // background\n    vec3 col = vec3(.3, .4, .2) * fbm((-2. - ro.y) / rd.y * rd + ro, 3, .5);\n\n    // raycast scene\n    vec2 res = raycast(ro, rd);\n\n    float m = res.y, t = (m > .5) ? res.x : (-2. - ro.y) / rd.y;\n    \n    vec3 pos = ro + t * rd,\n         nor = calcNormal(pos, m),\n         ref = reflect(rd, nor);\n\n    bool pot = false;\n    \n    vec3 op = pos;\n    float ot  = t,\n          fre = .96 * pow(1. + dot(rd, nor), 5.) + .04;\n\n    // material\n    if(m == 4.)\n    {\n        pot = true;\n\n        res = raycast(pos, dirRough(nor, ref, 1. - fre, h23(pos * 1e2 + iTime)));\n        t = res.x;\n        m = res.y;\n        \n        if (m < .5) col = vec3(0);\n        pos = ro + t * rd;\n    }\n\n    if(m == 1.)  col = vec3(0);\n    if(m == 2.)  col = wood(pos.zxy) * .3;\n    if(m == 3.)  col = vec3(.4, .15, .1);\n    if(m == 5.)  col = vec3(.07, .1, .05);\n    if(m == 6.)  col = vec3(1, .2, .2);\n    if(m == 7.)  col = vec3(0, .1, .3);\n    if(m == 8.)  col = vec3(2);\n    if(m == 9.)  col = vec3(.5, .3, .2) * (.2 + (step(mod(pos.x - .075, .1), .05) + max(step(mod(pos.y, .1), .05) * float(pos.y < .1), step(mod(pos.z - .02, .1), .05))) * .6);\n    if(m == 10.) col = vec3(.4, .2, .1);\n\n    if(pot) {t = ot; pos = op;}\n\n    // lighting\n\n    float occ = calcAO(pos, nor) * .9 + .1;\n\n    vec3 lin = vec3(0),\n    \n         sun = N(vec3(5, 4, 6));\n    \n    // sun\n    {\n        float dif = sat(dot(nor, sun)) * softshadow(pos, sun, 3., .1) * occ,\n\n        km = .05;\n\n        if(m == 5. || m == 9.)             km = 1.;\n        if(m == 2. || m == 3. || m == 10.) km = .2;\n\n        float g = pow(dot(nor, N(sun - rd)), 2.) * (km * km - 1.) + 1.,\n              spe = km * km / (TAU / 2. * g * g) * dif * fre;\n\n        lin += col * 22. * cc(dif) * vec3(1.3, 1, .7);\n        lin +=       50. *   spe   * vec3(1.3, 1, .7);\n    }\n\n    // sky\n    {\n        float dif = sqrt(.5 + .5 * nor.y) * occ;\n\n        float spe = S(-.2, .2, ref.y) * max(ref.z, 0.) * dif * fre * softshadow(pos, ref, 3., .1);\n\n        lin += col *  .6 * cc(dif) * vec3(.4, .6, 1.2);\n        lin +=       2.  *   spe   * vec3(.4, .6, 1.3);\n    }\n\n    // back\n    {\n        lin += col * 1.4 * cc(sat(dot(nor, -sun)) * occ);\n    }\n\n    // sss\n\n    {\n        float dif = pow(1. + dot(nor, rd), 2.) * occ;\n\n        lin += col * cc(dif);\n        if(m == 5.) lin += col * cc(dif);\n\n        float r = 1.;\n        if(m == 5.) r = 5.;\n\n        lin += .44 * col * cc(exp(-3. * abs(dot(nor, sun)) / r) * occ) * r;\n    }\n    \n    if(pot) lin *= 2.;\n    \n    col = mix(vec3(1.3, 1, .7), lin, exp(-.002 * t * t));\n    \n    col *= pow(1. - .6 * length(p), 1.2);\n    \n    col += vec3(.4, .2, .1) * pow(sat(dot(sun, rd)), 4.);\n        \n    return max(col, 0.);\n}\n\nmat3 setCamera(vec3 ro, vec3 ta)\n{\n\tvec3 w = N(ta - ro),\n\t     u = N(vec3(-w.z, 0, w.x));\n         \n    return mat3(u, cross(u, w), w);\n}\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    if (1.49 * abs(I.x - .5 * R.x) > R.y)\n    {\n        O = vec4(0);\n        return;\n    }\n\n    // camera\t\n    \n    vec3 ta = vec3(- .3,  .4,  0),\n         ro = vec3(-1.4, 2.4, -4);\n         \n    mat3 ca = setCamera(ro, ta);\n\n    // pixel coordinates\n    \n    vec2 p = (2. * I + 4. * h23(vec3(I, iTime)) - 2. - R.xy) / R.y;\n\n    // ray direction\n    vec3 rd = ca * N(vec3(p, 4.8)),\n         fp = ro + rd * 4.;\n    \n    ro += ca * vec3(ranDisk(h23(vec3(I, iTime) + 9.)), 0.) * .1;\n    rd  = N(fp - ro);\n    \n    vec4 last = texture(iChannel0, I / R.xy);\n    float blend = (last.a == 0. || texture(iChannel1, vec2(.126)).x > .1) ? 1. : 1. / (1. + (1. / last.a));\n    \n    O = vec4(mix(last.rgb, render(ro, rd, p), blend), blend);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 34807,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/herbalpert/ladyfingers"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}