{
    "Shader": {
        "info": {
            "date": "1522247929",
            "description": "球体/心形，按照漫反射/卡通风格渲染,。\nSphere/heart model with cartoon/wap _diffused style.\n\n交互：请在视图区拖拽鼠标，以改变光源方向\n To chage light direction, please press and drag mouse in the viewport.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4dKyWw",
            "likes": 3,
            "name": "Cartoon Sphere & heart",
            "published": 3,
            "tags": [
                "cartoon",
                "sphere",
                "heart"
            ],
            "usePreview": 0,
            "username": "tyw66",
            "viewed": 1218
        },
        "renderpass": [
            {
                "code": "//some control\nbool IsCartoon = true;\nint shape = 1;\n////////////////////////////////////////////\n\nfloat f(float x,float y,float z){\n    if(shape==0){\n        return x*x+y*y+z*z-1.0f;\n    }\n    else if(shape==1){\n        float a = x*x + 9.0f/4.0f *y*y+z*z-1.0f;\n        return a*a*a-x*x*z*z*z-9.0f/80.0f*y*y*z*z*z;\n    }\n}\n\nfloat h(float x,float z){\n    for(float y =-1.0f; y< 0.0f;  y+=0.01f){\n        if(f(x,y,z)<0.0f)\n            return y;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cur = iMouse.xy/iResolution.xy *4.0f-2.0f;\n    \n    \n    ////  some vector   ////\n    float x = (uv[0] *3.0f - 1.5f)*1.6f;\n    float z = uv[1] *3.0f - 1.5f ;\n    if(f(x,0.0f,z)<0.0f){\n        float y = h(x,z);\n        vec3 Coord = vec3(x, y, z);\t//坐标Coord\n        vec3 L = vec3(cur[0], -1.0f, cur[1]);\t//光线向量Light vector\n        vec3 N = vec3(x, y, z);\t\t//法向量Normal vector\t\n        float normN = sqrt(x*x+y*y+z*z);\n        //// 光照模型lighting model  //// \n        float cosNL = dot(L,N)/normN/sqrt(3.0f);\n\n        //漫反射部分 \n        float diffuse = cosNL;\n        diffuse = cosNL*0.5f+0.5f;//wrapped diffuse处理 \n\n        //高光部分 \n        float specular = cosNL;\n        specular = pow(cosNL,64.0f); //phong \n       \n\n        //描边部分 \n        float cosNY = -y /normN/ sqrt(3.0f);\n        float pCosNY = pow(cosNY,64.0);\n        bool rim = false;\n        if(cosNY<0.1f && cosNY>0.0f)rim = true;\n        \n        \n        //// 像素着色pixel coloring ////         \n        vec3 color; \n        if(rim){\n            color = vec3(0.0, 0.0, 0.0);//描边色\n        }\n        else{\n            vec3 Cr = vec3( 1.0, 0.0, 0.0 ); \n            float a = 0.05f; \t\t\t//环境光补偿 \n            float p = 1.00f;\t\t\t//光强度系数 \n            vec3 Cp = vec3( 1.0f,1.0f,1.0f ); \t//高光颜色 \n\n            //卡通渲染效果，根据不同区间，给diffuse不同值\n            if(IsCartoon){\n                //卡通漫反射 \n                if(cosNL>0.8f){diffuse = 0.9f*0.5f+0.5f;}\n                else if(cosNL>0.6f){diffuse = 0.7f*0.5f+0.5f;}\n                else if(cosNL>0.35f){diffuse = 0.45f*0.5f+0.5f;}\n                else if(cosNL>0.10f){diffuse = 0.22f*0.5f+0.5f;}\n                else {diffuse = 0.1f*0.5f+0.5f;}\n\n                //卡通高光 \n                if(cosNL>0.995f){specular = 1.0f;} \n                else if(cosNL>0.99f){specular = 0.95f;} \n                else{specular = 0.0f;}\n            } \n            // reference参考的公式：C = Cr(Ca+Cl*max(0,N·L))+ClCp*(N·H)^p \n            color =  Cr*(a+p*diffuse)+Cp*p*specular;\t\n        }              \n        fragColor = vec4(color,1.0);\n    }\n    //像素点不属于几何体\n    else\n        fragColor = vec4(1.0,0.8,0.4,1.0);\n    }\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}