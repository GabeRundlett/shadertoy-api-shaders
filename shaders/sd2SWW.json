{
    "Shader": {
        "info": {
            "date": "1620285690",
            "description": "The binet formula in the complex plane and its roots (the fibonacci numbers).\nTODO: use smarter distance-to-parametric method",
            "flags": 0,
            "hasliked": 0,
            "id": "sd2SWW",
            "likes": 10,
            "name": "Complex Fibonacci: Binet Formula",
            "published": 3,
            "tags": [
                "complex",
                "fibonacci",
                "formula",
                "binet"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "// I've had Matt Parker's video in the back of my head for a while:\n// https://www.youtube.com/watch?v=ghxQA3vvhsk\n\n#define PI 3.14159265359\n#define PHI 1.6180339887 // (1 + sqrt(5)) / 2\n\n#define PLOT_RES 150.0\n\nfloat remap(in float n) {\n    return mix(4.333 * sin(iTime * 0.25), 4.333, n);\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nvec2 complexFibonacci(in float n) {\n    float k = pow(PHI, n), np = n * PI;\n    return vec2(k - cos(np) / k, -sin(np) / k) / sqrt(5.0);\n}\n\n// Only defined for integers\nfloat realFibonacci(in float n) {\n    return (pow(PHI, n) - pow(-1.0 / PHI, n)) / sqrt(5.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    vec2 prevPos = complexFibonacci(remap(0.0));\n    float tStep = 1.0 / PLOT_RES;\n    for (float t=tStep; t < 1.0 + tStep; t += tStep) {\n        vec2 curPos = complexFibonacci(remap(t));\n        color = mix(color, vec3(0.8, 0.0, 0.0), smoothstep(unit, 0.0, sdLine(uv, prevPos, curPos)));\n        prevPos = curPos;\n    }\n\n    for (float n=-4.0; n < 5.0; n++) {\n        float fib = realFibonacci(n);\n        color = mix(color, vec3(0.0), smoothstep(unit, 0.0, length(vec2(uv.x - fib, uv.y)) - 0.05));\n    }\n\n    uv *= 0.25;\n    float dd = dot(uv, uv);\n    color -= 0.6 * dd * dd;\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}