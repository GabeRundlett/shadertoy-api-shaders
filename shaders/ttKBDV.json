{
    "Shader": {
        "info": {
            "date": "1615126393",
            "description": "License CC0: Commodore logo\nCommodore logo is trademark of Polabe Holding NV\n(AFAIK)",
            "flags": 0,
            "hasliked": 0,
            "id": "ttKBDV",
            "likes": 9,
            "name": "Commodore logo",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "// License CC0: Commodore logo\n// Commodore logo is trademark of Polabe Holding NV\n// (AFAIK)\n// Distance field for Commodore logo\n// The C isn't perfectly aligned with the logo but close enough for me.\n\n#define RESOLUTION iResolution\n\n\n// IQ's polynominal soft min\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// IQ's ellipse\nfloat ellipse(vec2 p, vec2 ab) {\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\nconst int N = 4;\n\n// IQ's polygon\nfloat polygon(vec2 p, vec2[N] v) {\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=N-1; i<N; j=i, i++ ) {\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n        bvec3 c = bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);\n        if( all(c) || all(not(c)) ) s*=-1.0;  \n    }\n    return s*sqrt(d);\n}\n\nconst vec2[] wing = vec2[](vec2(0.385, 0.435), vec2(1.35, 0.435), vec2(0.92, 0.035), vec2(0.385, 0.035));\n\nfloat commodore(vec2 p, out bool isRed) {\n  vec2 op = p;\n  p.y = abs(p.y);\n  float d0 = ellipse(p, vec2(1.0, 0.865));\n  d0 = abs(d0)- 0.275;\n  float d1 = p.x-0.375;\n  float d2 = polygon(p, wing);\n  float d = d0;\n  d = pmax(d, d1, 0.025);\n  d = pmin(d, d2, 0.025);\n  isRed = op.y > 0.0 && d2 <= 0.0025;\n  return d;\n}\n\nfloat df(vec2 p, out bool isRed) {\n  const float z = 0.75;\n  float dc = commodore(p/z, isRed)*z;\n  return dc;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n  \n  bool isRed;\n  float d = df(p, isRed);\n  \n  vec3 col = vec3(0.9);\n  vec3 ccol = isRed ? vec3(0.75, 0.0, 0.0): vec3(0.0, 0.0, 0.25);\n  col = mix(col, ccol, smoothstep(-aa, aa, -d));\n\n  if (p.y < 0.0) {\n    col += 0.5*sin(200.0*d);\n  }\n  \n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, 1.0/vec3(2.2));\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}