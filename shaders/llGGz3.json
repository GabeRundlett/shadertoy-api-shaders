{
    "Shader": {
        "info": {
            "date": "1476146837",
            "description": "Forked from [url=https://www.shadertoy.com/user/tomkh]tomkh[/url]'s [url=https://www.shadertoy.com/view/ldV3Wc]JFA Delaunay Video Filter[/url]. I fixed the bug occurred in boundaries. JFA for voronoi and its dual Delaunay triangulation are referenced.",
            "flags": 32,
            "hasliked": 0,
            "id": "llGGz3",
            "likes": 41,
            "name": "Low-Poly Style Image",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "lowpoly",
                "triangulation",
                "delaunay",
                "jfa"
            ],
            "usePreview": 1,
            "username": "starea",
            "viewed": 10002
        },
        "renderpass": [
            {
                "code": "// Delaunay Triangulation effect on top of Video by Tom '2016\n// Modified by Ruofei Du '2016 to fix the boundaries and create Low-Poly Arts\n\n// PolyCube version with interaction:\n//  http://polycu.be/edit/?h=d0YR9J\n\n// It has some artifacts. I'm not sure if possible to remove them all,\n// as even JFA for base Voronoi is not 100% accurate. Surprisingly,\n// most of the time it kind of works ;)\n\n// Extends my previous Voronoi filter attempt:\n//  https://www.shadertoy.com/view/4sy3W3\n\n// Uses jump-flood-fill concept (JFA), originally stated in this paper:\n//  http://www.comp.nus.edu.sg/~tants/jfa/i3d06.pdf\n\n#define GAMMA_CORRECTION 1\n\n//============================================================\nvec2 GetCoord( float offset )\n{\n    float y = floor(offset / iResolution.x);\n    return vec2( offset - y * iResolution.x, y ) + .5;\n}\n\n//============================================================\n// Signed distance to a 2D triangle by iq\n//   https://www.shadertoy.com/view/XsXSz4\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    // Correction for flipped triangle, we don't need it if consistent order is kept\n    //float s = -sign(e0.x*e1.y - e0.y*e1.x); e0 *= s; e1 *= s; e2 *= s;\n    \n    vec2 d = min( min( vec2( dot( pq0, pq0 ), v0.x*e0.y-v0.y*e0.x ),\n                       vec2( dot( pq1, pq1 ), v1.x*e1.y-v1.y*e1.x )),\n                       vec2( dot( pq2, pq2 ), v2.x*e2.y-v2.y*e2.x ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n#if 0 // debug feature extraction\n    \n    fragColor = texture(iChannel1, uv).wwww;\n    \n#else\n    \n\tvec4 tri = texture(iChannel0, uv);\n    \n    if (tri.x == 0.) {\n        fragColor = vec4(0);\n        return;\n    }\n            \n    vec2 p0 = GetCoord(tri.x);\n    vec2 p1 = GetCoord(tri.y);\n    vec2 p2 = GetCoord(tri.z);\n    vec2 p3 = (p0 + p1 + p2) * (1.0/3.0);\n    \n    float dist = sdTriangle(p0, p1, p2, fragCoord);\n    if (tri.w != 0.) {\n        p3 = GetCoord(tri.w);\n        dist = min(dist, sdTriangle(p0, p2, p3, fragCoord));\n    }\n    \n#if 0 // test triangles\n    dist = smoothstep(1.,-1.0,dist);\n    fragColor = vec4(vec3(dist), 1.);\n#else\n    dist = smoothstep(1.,0.5,dist);\n    vec3 c0 = texture(iChannel1, p0 / iChannelResolution[1].xy ).xyz;\n    vec3 c1 = texture(iChannel1, p1 / iChannelResolution[1].xy ).xyz;\n    vec3 c2 = texture(iChannel1, p2 / iChannelResolution[1].xy ).xyz;\n    vec3 c3 =texture(iChannel1, p3 / iChannelResolution[1].xy ).xyz;\n#if GAMMA_CORRECTION\n    vec3 video = pow( (pow(c0, vec3(2.2)) + pow(c1, vec3(2.2)) + pow(c2, vec3(2.2)) + pow(c3, vec3(2.2))) / 4.0, \n                     vec3(1.0 / 2.2));\n#else\n    vec3 video = (c0 + c1 + c2 + c3) / 4.0;\n#endif //GAMMA_CORRECTION\n    \n    vec3 color = video.xyz * dist;\n    fragColor = vec4(color, 1.);\n#endif\n    \n#endif\n    if (iMouse.w > 0.0) {\n    \tfragColor = vec4(texture(iChannel3, uv).xyz, 1.0);    \n    }\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    fragColor.rgb *= 0.1 + 0.25 + 0.75 * pow( 16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.15 );\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// A super simple video source with feature detection\nconst float eps = 1e-2;\n\nfloat grayScale(vec4 c) { return c.x*.29 + c.y*.58 + c.z*.13; }\n\n//============================================================\nvec4 GenerateSeed (in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 dataStep = vec3( vec2(1.) / iChannelResolution[0].xy, 0.);\n    \n    vec4 fragColor = texture( iChannel0, uv );\n    \n    float d = grayScale(fragColor);\n    float dL = grayScale(texture( iChannel0, uv - dataStep.xz ));\n    float dR = grayScale(texture( iChannel0, uv + dataStep.xz ));\n    float dU = grayScale(texture( iChannel0, uv - dataStep.zy ));\n    float dD = grayScale(texture( iChannel0, uv + dataStep.zy ));\n    float scale = 1.0;\n    float w = float( d*(.99 + scale*.01) > max(max(dL, dR), max(dU, dD)) );\n    \n    //w = max(w, texture( iChannel1, uv ).w*.9); // get some from previous frame\n    if (uv.x < eps || uv.y < eps || (1.0-uv.x) < eps || (1.0-uv.y)<eps) w = 1.0;\n    fragColor.w = w;\n    \n    return fragColor;\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = GenerateSeed(fragCoord);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Modified JFA algorithm to store flattened point offsets instead of coords\n// Tom@2016\n//https://www.shadertoy.com/view/ldV3Wc#\n// Original implementation by demofox:\n//    https://www.shadertoy.com/view/Mdy3DK\n\n// how many JFA steps to do.  2^c_maxSteps is max image size on x and y\nconst float c_maxSteps = 8.0;\n\n//============================================================\nvec2 GetCoord( float offset )\n{\n    float y = floor(offset / iResolution.x);\n    return vec2( offset - y * iResolution.x, y ) + .5;\n}\n\n//============================================================\nvec4 StepJFA (in vec2 fragCoord, in float level)\n{\n    float stepwidth = floor(exp2(c_maxSteps - 1. - level)+0.5);\n    \n    float bestDistance = 9999.0;\n    float bestCoord;\n    \n    for (int y = -1; y <= 1; ++y) {\n        for (int x = -1; x <= 1; ++x) {\n            vec2 sampleCoord = fragCoord + vec2(x,y) * stepwidth;\n            \n            float offset = texture( iChannel0, sampleCoord / iChannelResolution[0].xy).x;\n            if (offset == 0.) continue;\n            float dist = length(GetCoord(offset) - fragCoord);\n            if (dist < bestDistance)\n            {\n                bestDistance = dist;\n                bestCoord = offset;\n            }\n        }\n    }\n    \n    return vec4(bestCoord, 0.0, 0.0, 0.0);\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fFrame = float(iFrame);\n    float level = mod(fFrame,c_maxSteps);\n    if (level < .5) {\n        if (texture(iChannel1, fragCoord / iResolution.xy).w > .5)\n        \tfragColor = vec4(floor(fragCoord.y)*iResolution.x + floor(fragCoord.x), 0.0, 0.0, 0.0);\n        else \n            fragColor = vec4(0.0);\n        return;\n    }\n    \n    fragColor = StepJFA(fragCoord, level);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Triangulation JFA by Tom@2016\n\n// this must be in sync with Voronoi JFA algorithm constant\nconst float c_maxSteps = 8.0;\n\n//============================================================\nvec4 FindTriangles (in vec2 fragCoord )\n{\n    vec2 baseCoord = fragCoord / iChannelResolution[1].xy;\n    vec3 one = vec3( vec2(1,1) / iChannelResolution[1].xy, 0 );\n    float offset0 = texture( iChannel1, baseCoord ).x;\n    float offset1 = texture( iChannel1, baseCoord + one.zy ).x;\n    float offset2 = texture( iChannel1, baseCoord + one.xy ).x;\n    float offset3 = texture( iChannel1, baseCoord + one.xz ).x;\n    // Keep CW order\n    // 1 2\n    // 0 3\n    float count = float(offset0 != offset1);\n    count += float(offset0 != offset2);\n    count += float(offset0 != offset3);\n    count += float(offset1 != offset2);\n    count += float(offset1 != offset3);\n    count += float(offset2 != offset3);\n    // if 3 are different => only one comparison will be false, thus count = 5\n    // if 4 are different => count = 6\n    \n    if (count == 6.)\n    {\n        return vec4(offset0,offset1,offset2,offset3);\n    }\n    \n    if (count == 5.)\n    {\n        if (offset0 == offset1) return vec4(offset0,offset2,offset3,0.0);\n        if (offset1 == offset2) return vec4(offset0,offset1,offset3,0.0);\n        if (offset2 == offset0) return vec4(offset1,offset2,offset3,0.0);\n        return vec4(offset0,offset1,offset2,0.0);\n    }\n    \n    return vec4(0);\n}\n\n//============================================================\n// Signed distance to a 2D triangle by iq\n//   https://www.shadertoy.com/view/XsXSz4\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    // Correction for flipped triangle, we don't need it if consistent order is kept\n    //float s = -sign(e0.x*e1.y - e0.y*e1.x); e0 *= s; e1 *= s; e2 *= s;\n    \n    vec2 d = min( min( vec2( dot( pq0, pq0 ), v0.x*e0.y-v0.y*e0.x ),\n                       vec2( dot( pq1, pq1 ), v1.x*e1.y-v1.y*e1.x )),\n                       vec2( dot( pq2, pq2 ), v2.x*e2.y-v2.y*e2.x ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\n//============================================================\nvec2 GetCoord( float offset )\n{\n    float y = floor(offset / iResolution.x);\n    return vec2( offset - y * iResolution.x, y ) + .5;\n}\n\n//============================================================\nvec4 StepTriJFA (in vec2 fragCoord, in float level)\n{\n    float stepwidth = floor(exp2(c_maxSteps - 1. - level)+0.5);\n    \n    float bestDistance = 9999.0;\n    vec4 bestTri = vec4(0);\n    \n    for (int y = -1; y <= 1; ++y) {\n        for (int x = -1; x <= 1; ++x) {\n            vec2 sampleCoord = fragCoord + vec2(x,y) * stepwidth;\n            \n            vec4 tri = texture( iChannel0, sampleCoord / iChannelResolution[0].xy);\n            if (tri.x == 0.) continue;\n            \n            vec2 p0 = GetCoord(tri.x);\n            vec2 p1 = GetCoord(tri.y);\n            vec2 p2 = GetCoord(tri.z);\n            \n            float dist = sdTriangle(p0, p1, p2, fragCoord);\n            if (tri.w != 0.) {\n                vec2 p3 = GetCoord(tri.w);\n                dist = min(dist, sdTriangle(p0, p2, p3, fragCoord));\n            }\n            if (dist < bestDistance)\n            {\n                bestDistance = dist;\n                bestTri = tri;\n            }\n        }\n    }\n    \n    return bestTri;\n}\n\n//============================================================\nfloat TriangleArea( in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n    vec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n    return e0.x*e1.y - e0.y*e1.x;\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float level = mod(float(iFrame+1),c_maxSteps);\n   \tif (level < .5) {\n        vec4 tri = FindTriangles( fragCoord );\n\t\t#if 1\n        \t// Skip flipped triangles:\n            if ( tri.x == 0. )\n            {\n                fragColor = tri;\n                return;\n            }\n            vec2 p0 = GetCoord(tri.x);\n            vec2 p1 = GetCoord(tri.y);\n            vec2 p2 = GetCoord(tri.z);\n            float area = TriangleArea( p0, p1, p2 );\n            if ( tri.w != 0. ) // quad\n            {\n                if ( area >= 0. )\n                {\n                    if ( TriangleArea( p0, p2, GetCoord(tri.w) ) >= 0. )\n                        tri = vec4(0); // skip both triangles\n                    else\n                        tri = vec4(tri.xzw, 0); // second triangle is still valid\n                }\n            }\n            else if ( area >= 0. )\n            {\n                tri = vec4(0); // skip\n            }\n\t\t#endif\n        fragColor = tri;\n        return;\n    }\n    fragColor = StepTriJFA(fragCoord, level);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// A secondary buffer to get clean Voronoi every N-th frame\n\n// this must be in sync with JFA algorithm constant\nconst float c_maxSteps = 8.0;\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    if (mod(float(iFrame + 2), c_maxSteps) < .5) {\n        fragColor = texture(iChannel1, uv); // update to new voronoi cell\n    } else {\n        fragColor = texture(iChannel0, uv); // no change\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}