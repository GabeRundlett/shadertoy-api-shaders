{
    "Shader": {
        "info": {
            "date": "1662177901",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "NtGyDK",
            "likes": 5,
            "name": "Fractal mosaic 10 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n        //fract(a-floor(a.x-1.5)/2.)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    //a += .5;\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n        //vec2(2.5,-1.)\n        //vec2(1.5,0.)\n        \n    ,\n    \n    a1 = a+a2;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    //a1 += (distance(floor(a1),round(a1)))*1.5;\n\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n        //sqrt(abs(f1((a1)*(a2.x+a2.y))-.5))\n        //min(abs(fract((a1)*(a2.x+a2.y))-.75),abs(fract((a1+.5)*(a2.x+a2.y))-.5))\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.*8.;\n    vec2 u = (fragCoord)/iResolution.y/t1/2.0;\n    u += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    u = u.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    bool t3 = false;\n    float c1 = 0.;\n    vec2 uv1 = vec2(0.);\n    for(int k = 0; k < 9; k++){\n        //u += floor(vec2(u.x,u.y+.5)*2./1.5)/2.;\n\n        \n        //u.y += .5;\n        //u.y += pow(floor(u.x*1.5+.5),6.)*1.5;\n\n        //a really interesting pattern:\n        //u += floor(u/1.5)/1.5;\n        \n         //u.y += fmod(u.y,1.5); //lace pattern\n\n        //u.x += fmod(u.x*5.,5.);\n        //u.y += fmod(u.y*2.,4.); //lace pattern\n        t3 =\n            u.x < u.y\n            //u.x < u.y || !t3\n            //u.x < u.y && t2.x > t2.y || !t3\n        ;\n        \n       //another awesome pattern (looks better zoomed out)\n       //if(t3){ u = u.yx;t2 = -t2.yx;}\n        u =\n            abs(.5+u+t2)+uv1\n            //abs(.5*sign(u.x-u.y)+u+t2)\n        ;\n        //u *= sign(u.yx-u);\n        \n        //Arabesque pattern\n        //if(u.y>u.x) u = u.yx;\n        \n        t2 =\n            -triangle_wave(u-.5)\n            //-triangle_wave(u-.5)*float(t3)\n            //-triangle_wave(u-.5*sign(u.x-u.y))\n            //-triangle_wave(u-.5)/(.5+fmod(t2.x,2.))\n\n            //-triangle_wave(u-.5-fmod(t2.x/1.5,2.))\n        ;\n        \n        //u += floor(u.y-u.x);\n        \n        u =\n            t2-triangle_wave(u.yx)\n            //t2*length(u)-triangle_wave(u.yx)\n        ;\n        c1 =\n            //abs(col.x-u.x+u.y)\n            u.x-u.y\n            //max(c1,u.x-u.y)\n            //abs(u.x-u.y)\n        ;\n        \n        //u = fract(u);\n        col = col.yzx;\n        //col *= col +.5;\n        //if(!t3 || u.y < u.x) col = max(col.yzx,vec3(col.yz,c1));\n        if(t3 || u.y > u.x) col =\n            max(abs(col-vec3(col.zy,u.x-u.y)/3.),vec3(col.yz,u.x-u.y))\n            //max(abs(col/3.-vec3(col.zy,u.x-u.y)),vec3(col.yz,u.x-u.y))\n            //max(col,vec3(col.yz,c1))\n            //vec3(col.yz,c1)\n        ;\n        //if(t2.x<t2.y||t2.x>t2.y) {u=u.yx;t2=t2.yx;}\n        //if(t3 && u.y < u.x) col = vec3(col.yz,c1);\n        //if(t2.x>t2.y) {u=-u.yx;t2=-t2.yx;}\n        //uv1 += 2.5;\n\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define smod(x,y) floor(mod(floor(x)*floor(x),y))\n#define sqmod(x,y) floor(mod(floor(x)*floor(x),y*y)/y)\n#define fmod1(x,y) floor(mod(floor(x+floor((x)/y)),y*y)/y)\n#define fmod2(x,y) mod(floor(x-floor((x)/y)),y)\n#define fmod3(x,y) mod(floor(x)*floor((x)/y),y)\n#define fmod4(x,y) floor(pow(mod(floor(x),y),2.)/y)\n#define fmod5(x,y) floor(pow(mod((x),y),2.)/y)\n#define fmod6(x,y) floor(sqrt(mod((x)*4.,y*y)))\n#define fmod7(x,y) mod(floor(y*((x)/y+floor((x)/y)/y)),y)\n\nfloat fmod(float a, float b){\n    //divide by powers of 2 to get interesting rhythms\n    float a1 = floor(a);\n    //a /= 1. + mod(floor(a1/32.),2.);\n    //a /= 1. + mod(floor(a1/16.),2.);\n    //a /= 1. + mod(floor(a1/8.),2.);\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //mod(mod(floor(a/2.+8.),floor(a/8.+8.)),b)\n        //mod(floor(floor(a)*sign(.5-mod(floor(a/b),2.))),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n//#define fmod(x,y) mod(floor(floor(x)+floor((x)/4.)/4./4.),y)\n\n//multiply by prime numbers to get an interesting rhythm\n//#define fmod(a,b) mod(floor((a)/2.)*11.+floor((a)/4.)*7.,b)\n\n#define fmax(x,y,z) max(fmod(x,z),fmod(y,z))\n#define fpow(x,y) pow(y,fmod(x,y))\n#define floor1(x) floor(x)*floor(mod((x)/4.,2.))\n\n#define powmod(x,y) mod(floor(pow(y,mod(floor(x)/y,y))),y)\n#define powmod1(x,y) mod(floor(x+powmod(x+y,y)),y)\n\n\nint gcd (int a, int b) {    // Euclid algorithm:   gcd(a,b) = gcd(b, a%b) ; gcd(a,0) = a\n    int c;             \n    while ( b>0 && (c = a%b) != a ) a=b, b=c; \n    return b==0 ? a : c;\n}\n\nfloat gcd(float a, float b){\n   return float(gcd(int(a),int(b)));\n}\n\nvec2 mainSound(int samp, float time){\n  time += floor(time*pow(2.,fmod(time/2.,4.)));\n  float tempo = 1.;\n  time /= tempo;\n  //time = (time + pow(2.,fmod(time*2.,3.)));\n  \n  //time = mod(time,4.)+mod(floor(time/2./4.),4.)*4.;\n  \n  //time = time*(1. + fmod(time*4.,2.))/2.;\n  \n  //for(int i = 0; i < 2; i++){ time +=  fmod(floor(time*4.),2.); }\n  float limit = 8.;\n  //for(int i = 0; i < 4; i++){time += gcd(fmod(time*4.,limit),limit);}\n\n  //time += floor(time*2.)/2.;\n  float s1 = 4.,\n  t=\n      time\n      //time - fmod(time,5.+fmod(time*s1,7.))\n      //time + floor(time*s1+floor(time/s1))/s1\n      //time + floor(time*s1)*s1\n      //time/(1.+fmod(time*s1,2.))/(1.+fmod(time/s1,2.))\n      //time/(1.+fmod(time/s1,2.))\n  ,\n  f1=floor(t/4.),\n  m1 =\n      fmod(f1,4.)\n      //fmax(f1,floor(t*4.),4.)\n      //pow(fmod(floor(t/4.),4.),2.)\n      //fmod(floor(t/4.)*floor(t),4.)\n      //fmod(t/4.+floor(t*4.),4.)\n  ,\n  \n  m3 =\n      fmod((t*s1/abs(2.5-m1)),s1)\n      //pow(fmod((t*s1/abs(2.5-m1)),s1),2.)\n      //fmod((floor(t)*(floor(t*s1)+floor(t))/abs(2.5-m1)),s1)\n      //fmod(t/s1+floor(t/s1),s1);\n  ;\n  \n  //t *= (1.+fmod(t/4.,2.))/(1.+fmod(t/8.,2.)); //varying tempo;\n  //t += floor(t*s1+floor(t/s1))/s1;\n  //t += m1+m3;\n  t *=\n      s1*s1\n      //s1*s1*(1.+fmod(floor(t*s1*2.)/s1,2.))/(1.+fmod(floor(t*s1/2.)/s1,2.))\n  ;\n  \n  //t /= (1.+fmod(t/4.,2.))/(1.+fmod(t/8.,2.)); //varying tempo;\n\n  float m2 =\n      1. + fmod((t/s1),s1)\n      //1. + fmod((t/s1-fpow(t/s1,s1)),s1)\n      //1. + fmod((t/s1),s1-fmod(-t,s1))-fmod(-t,s1)\n      //1. + fmod((t/s1)+mod(t/s1,s1/2.),s1)\n      //1. + fmod((t/(s1+m3*s1)),s1)\n  ;\n\n  t /=\n      max(m2,m1+1.)\n      //max(min(m2,m3),m1)\n  ;\n  \n  float a=\n      //pow(fract(-t/s1),2.)\n      64.*((1.-sqrt(fract(t/s1)))/s1)*.2\n      //pow((1.-sqrt(fract(t/s1)))/2.,2.)\n\n      //sqrt((1.-sqrt(fract(t/s1)))/5.)*.2\n  ,\n  \n  nb = pow(2.,(m3+m2)/6.+7.)*tempo;\n\n  return\n      abs(.5-vec2(fract(time*nb*.998*2.),fract(time*nb)))*a\n      //vec2(fract(time*nb*.998/m2)*a,fract(time*nb/m2)*a)\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}