{
    "Shader": {
        "info": {
            "date": "1672532744",
            "description": "A substance-like approach to 3d texturing",
            "flags": 0,
            "hasliked": 0,
            "id": "7djfWW",
            "likes": 14,
            "name": "Shardstone",
            "published": 3,
            "tags": [
                "substance"
            ],
            "usePreview": 0,
            "username": "MiguelCepero",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\nvec3 random3f( vec3 p )\n{\n    return fract(sin(vec3( dot(p,vec3(1.0,57.0,113.0)), \n                           dot(p,vec3(57.0,113.0,1.0)),\n                           dot(p,vec3(113.0,1.0,57.0))))*43758.5453);\n}\n\nvec3 voronoi( in vec3 x, out vec3 center )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + random3f( p + b );\n        float d = dot( r, r );\n        //float d = abs(r.x) + abs(r.y) + abs(r.z);//dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            center = random3f( p + b );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\nvec3 voronoisq( in vec3 x, out vec3 center )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + random3f( p + b );\n        float d = max(abs(r.x), max(abs(r.y), abs(r.z)));//dot( r, r );\n        //float d = abs(r.x) + abs(r.y) + abs(r.z);//dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            center = random3f( p + b );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\nfloat levels(in float x, in float xmin, in float xmax)\n{\n    return clamp((x - xmin)/(xmax - xmin), -1.0, 1.0);\n}\n\nfloat sphere(in vec3 pos, in vec3 center, in float radius)\n{\n    return pow(length(pos - center), 2.0) - radius*radius + 1.0 * pos.z;\n}\n\nfloat rocks(in vec3 pos)\n{\n    vec3 org;\n\n    float mask = levels(\n        simplex3d(5.0 * pos) + \n        0.5 * simplex3d(20.0 * pos) +\n        1.3 * (1.0 - voronoi(10.0 * pos, org).x), -0.01, 0.01);\n    mask = clamp(mask, 0.0, 1.0);\n\n    // warp\n    vec3 noise3 = voronoi(5.0 * pos, org);    \n    //return max(mask, noise3.x) + 50.0 * pos.z;\n    \n    float field = levels(\n        simplex3d(5.0 * pos) + \n        0.5 * simplex3d(20.0 * pos) +\n        1.3 * voronoi(30.0 * pos, org).x, -0.01, 1.2);\n        \n    //field = max(field, 1.5 * noise3.x);\n\n    // output field\n    return (field + 170.0*pos.z);\n}\n\nfloat dirt(in vec3 pos)\n{\n    vec3 org;\n    vec3 noise3 = voronoi(vec3(4.5, 3.3 + 0.5 * simplex3d(0.01*pos), 4.0) * pos + 0.02 * vec3(simplex3d(10.0*pos)), org);\n    //return (noise3.y) + pos.z;\n    float noise1 = simplex3d(100.0 * org);\n    vec3 scale = vec3(4.0 + 0.5*noise1);\n    float field = simplex3d(scale * pos * vec3(1.0, 0.01, 1.0) + vec3(noise1));\n    field = min(field, simplex3d(0.5*scale * pos * vec3(0.01, 1.0, 1.0) - vec3(noise1)));\n    return 0.01 * (field ) + pos.z;\n}\n\nfloat rockfield(in vec3 pos)\n{\n    //return min(dirt(pos), dirt(0.5*pos));\n    return dirt(pos);\n}\n\nfloat sand(in vec3 pos, in vec3 warp)\n{\n    // warp node\n    float noise = simplex3d(0.5*pos);\n    pos += 0.2 * noise * vec3(1.0, 1.0, 0.0) + warp;\n\n    // wave amplitude\n    float amp = clamp(1.0 + simplex3d(2.15*pos), 0.0, 1.0);\n\n    pos.x *= 0.1;\n    pos.y *= 5.0;\n    float field = simplex3d(pos);\n    field = 0.1*pow(1.5 + field, 5.0);\n    return field + amp * 200.0 * pos.z;\n}\n\nvec3 gradientRocks(vec3 pos)\n{\n    float e = 0.001;\n    float m;\n    float dx = rockfield(pos + vec3(e, 0.0, 0.0)) - rockfield(pos - vec3(e, 0.0, 0.0));\n    float dy = rockfield(pos + vec3(0.0, e, 0.0)) - rockfield(pos - vec3(0.0, e, 0.0));\n    float dz = rockfield(pos + vec3(0.0, 0.0, e)) - rockfield(pos - vec3(0.0, 0.0, e));\n    return vec3(dx, dy, dz)/e;\n}\n\nfloat field3d(in vec3 pos)\n{\n    //return sand(2.0*pos);\n    float rockfield = rockfield(pos);\n    return rockfield;\n    //return min(rocks(0.5 * pos), max(rocks(pos), rocks(2.0 * pos)));\n    //return sphere(pos, vec3(0.5, 0.5, 0.0), 0.05);\n    //return sin(20.0*pos.x) + sin(20.0*pos.y) + 100.0*pos.z;\n    //return pos.z;\n    //return simplex3d(10.0*pos) + 80.0 * pos.z;\n    \n    \n}\n\nvec3 gradient(vec3 pos)\n{\n    float e = 0.001;\n    float m;\n    float dx = field3d(pos + vec3(e, 0.0, 0.0)) - field3d(pos - vec3(e, 0.0, 0.0));\n    float dy = field3d(pos + vec3(0.0, e, 0.0)) - field3d(pos - vec3(0.0, e, 0.0));\n    float dz = field3d(pos + vec3(0.0, 0.0, e)) - field3d(pos - vec3(0.0, 0.0, e));\n    return vec3(dx, dy, dz)/e;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/vec2(iResolution.x);\n\n    // input world coordinates\n    vec3 pos = vec3(uv.x, uv.y, 0.00*iTime);\n    \n    // scroll\n    pos += vec3(0.04*iTime, 0.04*iTime, 0.0);\n    \n    float field = field3d(pos);\n    vec3 normal = gradient(pos);\n    if (normal.z < 0.0)\n        normal.z = 0.0;\n    normal = normalize(normal);\n    vec3 light = normalize(vec3(sin(-0.01*iMouse.x), -1.0*cos(0.01*iMouse.y), -1.0));//normalize(vec3(sin(iTime), -10.5, cos(iTime)));\n    float l = dot(light, -normal);\n    \n    //vec3 color = 2.0 * field * vec3(1.0, 1.0, 1.0);\n    vec3 color = vec3(1.0, 1.0, 1.0);\n\n    // Output to screen\n    fragColor = vec4(color * l, 1.0);\n    //fragColor = vec4(uv.x, uv.y, 0.0, 1.0);\n    //fragColor = vec4(20.0*field, 0.0, 0.0, 1.0);\n    //fragColor = vec4(vec3(0.5) + 0.5*normal, 1.0);\n    //fragColor = vec4(l, l, l, 1.0);\n    //fragColor = vec4(0.5 + 0.5*field, 0.0, 0.0, 1.0);\n    //fragColor = vec4(0.0, 0.5 + 0.5*normal.g, 0.0, 1.0);\n    //fragColor = vec4(noise, 0.0, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}