{
    "Shader": {
        "info": {
            "date": "1681150255",
            "description": "Journey into mystery",
            "flags": 32,
            "hasliked": 0,
            "id": "DsKXDW",
            "likes": 7,
            "name": "Immersed",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "terrain",
                "clouds",
                "blur",
                "abstract",
                "360"
            ],
            "usePreview": 0,
            "username": "ruojake",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "// Immersed by Kristian Sivonen (ruojake)\n// CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)\n\n// You may sacrifice some detail for fps gain by undefining HIGHQ in Buffer A\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 tc = ivec2(fragCoord);\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec4 bl0 = texelFetch(iChannel0, tc, 0);\n    \n    vec4 bl1 = texelFetch(iChannel1, tc, 0);\n    \n    ivec2 o = ivec2(0,1);\n    vec4 bl2\n        = texelFetch(iChannel2, tc - o * 3, 0)\n        + texelFetch(iChannel2, tc + o * 3, 0)\n        + texelFetch(iChannel2, tc - o * 2, 0) * 6.\n        + texelFetch(iChannel2, tc + o * 2, 0) * 6.\n        + texelFetch(iChannel2, tc - o, 0) * 15.\n        + texelFetch(iChannel2, tc + o, 0) * 15.\n        + texelFetch(iChannel2, tc, 0) * 20.;\n    bl2 /= 64.;\n    vec4 bl3 =  textureLod(iChannel2, fragCoord / iResolution.xy, 3.25);\n    \n    float dist = length(uv);\n    \n    fragColor = mix(bl1, bl0, clamp(dist * 5. - .8, 0., 1.));\n    fragColor = mix(fragColor, bl2, clamp(dist * 5. - 1.8, 0., 1.));\n    fragColor = mix(fragColor, bl3, clamp(dist * 5. - 3.4, 0., 1.));\n    \n    float dth = fract(dot(fragCoord + float(17 * (iFrame & 7)), vec2(.161616, .778797)));\n    fragColor.rgb += dth / 255.;\n    fragColor.a = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FK(X) floatBitsToInt(cos(X)) ^ floatBitsToInt(X)\n\n// Undefine if chugging\n#define HIGHQ\n\nfloat hash12(vec2 p)\n{\n    int x = FK(p.x);\n    int y = FK(p.y);\n    \n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nmat2 rot(float a)\n{\n    float s = sin(a), c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p), f = smoothstep(0., 1., p - i);\n    vec2 o = vec2(1,0);\n    \n    \n    return mix(\n        mix(hash12(i), hash12(i + o), f.x),\n        mix(hash12(i + o.yx), hash12(i + 1.), f.x),\n        f.y\n    );\n}\n\nfloat cloud(vec2 p)\n{\n    float a = .5;\n    float res = 0.;\n    mat2 r = rot(2.);\n    float s = 1.;\n    for (int i = 0; i < 4; ++i)\n    {\n        p.y += iTime * .3 * a * s;\n        s *= -1.;\n        res += noise(p) * a;\n        a *= .5;\n        p += 5.;\n        p *= r;\n        p *= 2.;\n    }\n    return res * res * 2.;\n}\n\n#define FBM(X,N) \\\nfloat X(vec2 p){ \\\n    float a = .5, res = 0., s = 1.;\\\n    mat2 r = rot(2.);\\\n    for(int i= 0; i < N; ++i){\\\n        res += noise(p) * a; a *= .5;\\\n        p += 3.; p.x += iTime * .1 * sqrt(a) * s; s *= -1.; p *= r; p *= 2.;\\\n    }\\\n    return res;\\\n}\n\n#define HGT(X,F) \\\nfloat X(vec3 p){ return p.y - F(p.xz*.25) * 2. + .1; }\n\n#define NML(X,H, E) \\\nvec3 X(vec3 p, float d){ \\\n    const vec2 e = vec2(E, 0);\\\n    return normalize(\\\n        d - vec3(H(p - e.xyy), H(p - e.yxy), H(p - e.yyx))\\\n    );\\\n}\n\n\nFBM(fbm0,9)\nFBM(fbm1,7)\nFBM(fbm2,4)\n\nHGT(height0,fbm0)\nHGT(height1,fbm1)\nHGT(height2,fbm2)\n\nNML(normal0, height0, .001)\nNML(normal1, height1, .002)\nNML(normal2, height2, .01)\n\n#ifdef HIGHQ\n    #define NEARHEIGHT t < 3. ? height00(p) * .75 : \n    #define NEARNORMAL t < 3. ? normal00(p, d) :\n    \n    FBM(fbm00, 14)\n    HGT(height00, fbm00)\n    NML(normal00, height00, .0005)\n#else\n    #define NEARHEIGHT \n    #define NEARNORMAL\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    uv *= rot(iTime * -.01);\n    vec2 pol = vec2(atan(uv.y, uv.x), length(uv) * -4.5 + .8);\n    float dth = fract(dot(fragCoord + float(17 * (iFrame & 7)), vec2(.161616, .778797)));\n    \n    vec3 ro = vec3(0,2,iTime * -.1);\n    vec3 rd = normalize(vec3(0,pol.y, 1.4));\n    rd.xz *= rot(pol.x + dth * .001);\n    vec3 p = ro;\n    float t = height2(p) + dth * .002, i = 0., d;\n    float o = -1.;\n    for(;i < 1. && t < 50. && rd.y <= 0.; i += 1./128.)\n    {\n        p = ro + rd * t;\n        d = NEARHEIGHT t < 6. ? height0(p) * .75 : t < 15. ? height1(p) * .95 : height2(p) * 1.3;\n        if (false && o > 0. && d > 0.)\n        {\n            d = d*o/(o-d);\n        }\n        o = d;\n        t += d;\n        if (abs(d) < .0001 * t) break;\n    }\n    \n    vec3 sky = mix(vec3(.9), vec3(.2, .5, 1.), max(rd.y + .2, 0.));\n    vec3 ld = normalize(vec3(rd.xz * rot(-.3),.3).xzy);\n    vec3 col = sky;\n    if (t < 50. && rd.y <= 0.)\n    {\n        vec3 n = NEARNORMAL t < 6. ? normal0(p, d) : t < 15. ? normal1(p, d) : normal2(p, d);\n        \n        \n        float l = dot(ld, n) * .5 + .5;\n        l *= l;\n        \n        col = mix(vec3(.7,.4,.1), vec3(.2,.8,.2), smoothstep(.95,1.,n.y));\n        col = mix(col * l, vec3(l), l*l*l);\n        col *= 1. - i*i;\n        col = mix(sky, col, exp(-t * .04 + pow(p.y * .5, 3.)));\n        \n    }\n    \n    col = mix(vec3(col.g), col, 1. + clamp(1. - t * .3 + .4, 0., 1.));\n    if(rd.y < 0.)\n    {\n        float T = t;\n        t = 1.25 / -rd.y + dth * .01;\n        float v = 0.;\n        for(int j = 0; j < 40 && t < T ; ++j)\n        {\n            p = ro + rd * t;\n            t += .0075 / -rd.y;\n            v -= cloud(p.xz * vec2(.4,.2)) * sin(float(j) * .079);\n        }\n        float l = 1. - max(cloud(p.xz + ld.xz * .3 / ld.y) + v * .125 + .125, 0.); \n        col = mix(mix(vec3(.07, .1, .2), vec3(1), l*l), col, exp(v / (t * 2.5 + 5.)));\n    }\n\n    col *= 1.-pow(clamp(length(uv),0.,1.), 4.);\n    //col = vec3(i);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 tc = ivec2(fragCoord);\n    ivec2 o = ivec2(1,0);\n    fragColor\n        = texelFetch(iChannel0, tc - o * 3, 0)\n        + texelFetch(iChannel0, tc + o * 3, 0)\n        + texelFetch(iChannel0, tc - o * 2, 0) * 6.\n        + texelFetch(iChannel0, tc + o * 2, 0) * 6.\n        + texelFetch(iChannel0, tc - o, 0) * 15.\n        + texelFetch(iChannel0, tc + o, 0) * 15.\n        + texelFetch(iChannel0, tc, 0) * 20.;\n    fragColor /= 64.;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 tc = ivec2(fragCoord);\n    ivec2 o = ivec2(0,1);\n    fragColor\n        = texelFetch(iChannel0, tc - o * 3, 0)\n        + texelFetch(iChannel0, tc + o * 3, 0)\n        + texelFetch(iChannel0, tc - o * 2, 0) * 6.\n        + texelFetch(iChannel0, tc + o * 2, 0) * 6.\n        + texelFetch(iChannel0, tc - o, 0) * 15.\n        + texelFetch(iChannel0, tc + o, 0) * 15.\n        + texelFetch(iChannel0, tc, 0) * 20.;\n    fragColor /= 64.;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 tc = ivec2(fragCoord);\n    ivec2 o = ivec2(1,0);\n    fragColor\n        = texelFetch(iChannel0, tc - o * 3, 0)\n        + texelFetch(iChannel0, tc + o * 3, 0)\n        + texelFetch(iChannel0, tc - o * 2, 0) * 6.\n        + texelFetch(iChannel0, tc + o * 2, 0) * 6.\n        + texelFetch(iChannel0, tc - o, 0) * 15.\n        + texelFetch(iChannel0, tc + o, 0) * 15.\n        + texelFetch(iChannel0, tc, 0) * 20.;\n    fragColor /= 64.;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}