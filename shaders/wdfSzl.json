{
    "Shader": {
        "info": {
            "date": "1551869696",
            "description": "A small neural network with 3 hidden layers trained to generate sine waves\nShader is performing one NN inference for every pixel of every frame to render wave\nVisually much improved version of https://www.shadertoy.com/view/wdsXzf with similar complexity",
            "flags": 0,
            "hasliked": 0,
            "id": "wdfSzl",
            "likes": 3,
            "name": "Sine wave (using ML) v2",
            "published": 3,
            "tags": [
                "2d",
                "nn",
                "ml"
            ],
            "usePreview": 0,
            "username": "baldand",
            "viewed": 658
        },
        "renderpass": [
            {
                "code": "// (c) 2019 Andrew Baldwin (twitter:baldand)\n// License = Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) (http://creativecommons.org/licenses/by-sa/4.0/)\n\n// Small neural network with 3 hidden layers trained to generate sin waves\n// We are doing one inference with this for every pixel of every frame\n\n// Visually much improved version of https://www.shadertoy.com/view/wdsXzf\n// with similar complexity \n\n// Hold down mouse button to see training function overlayed for reference\n\n// See also twitter thread: https://twitter.com/baldand/status/1103012877064196098\n\nfloat infer(float x) {\n    vec4 v0 = vec4(-1.0264335,0.016575987,0.7683726,-0.57450604);\n    vec4 b0 = vec4(0.0,-0.042287465,0.049600255,0.0);\n    mat4 m1 = mat4(-0.56684726,-0.42447406,-0.36447382,-0.8339071,0.24432479,0.2496291,-0.709689,-0.12151086,0.9585465,-0.041398026,1.0177039,0.9430456,-0.5929886,-0.3974017,0.3334772,0.16827136);\n    vec4 b1 = vec4(-0.23816654,-0.0063188616,0.17527269,0.07215821);\n    mat4 m2 = mat4(-0.9948269,-1.838438,-0.21110824,-0.6786317,-0.6233567,0.44844365,0.64205533,-0.22527963,1.2259004,0.65223193,-0.21527317,0.75108105,0.71074504,0.11111804,0.21951368,0.36050126);\n    vec4 b2 = vec4(-0.09698069,0.4032268,-0.0001141361,0.31100145);\n    vec4 v3 = vec4(-1.6929443,1.7160753,-0.46278292,2.285155);\n    float b3 = -0.102938406;\n    vec4 l1 = v0*fract(x)+b0;\n    vec4 l2 = m1*max(l1,0.)+b1;\n    vec4 l3 = m2*max(l2,0.)+b2;\n    vec4 l4 = v3*clamp(l3*l3*l3,0.,1.);\n    return smoothstep(0.,1.,b3+l4.x+l4.y+l4.z+l4.w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float x = uv.x + iTime*.2;\n    float y = 0.25+0.5*infer(x);\n    float y_train = 0.5+0.25*sin(x*6.283185);\n    float r = smoothstep(y, y+.005, uv.y);\n    float r_train = smoothstep(y_train-.002, y_train, uv.y)*smoothstep(y_train+.002,y_train, uv.y);\n    vec3 col = mix(vec3(0.,0.3,0.5), vec3(0.,.9,1.), r);\n    if (iMouse.z > 0.) col += r_train;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}