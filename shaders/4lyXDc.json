{
    "Shader": {
        "info": {
            "date": "1486122479",
            "description": "1 dimensional cellular automata generating a sierpinski like pattern.\nupdate: made the code a lot more compact. You can now also specify the automata rules by editing the define. ",
            "flags": 32,
            "hasliked": 0,
            "id": "4lyXDc",
            "likes": 21,
            "name": "Infinite sierpinski",
            "published": 3,
            "tags": [
                "procedural",
                "fractal",
                "triangle",
                "automata",
                "cellular",
                "sierpinski",
                "infinite"
            ],
            "usePreview": 0,
            "username": "kzy",
            "viewed": 1020
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 color, in vec2 coord) {\n    color = texelFetch(iChannel0, ivec2(coord), 0).xxxx;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float initialize(in vec2 coord) {\n    return float(abs(iResolution.x / 2. - coord.x + .5) < .9);\n}\n\nfloat advance(float left, float center, float right) {\n    int total = int(left + center + right);\n    return float(total == 0 || total == 3);\n    // return float(total == 1);\n    // return float(bool(left) != (bool(center) || bool(right))); // Rule 30\n}\n\nbool get(vec2 uv, vec2 o) {\n    uv += o / iResolution.xy;\n    return texture(iChannel0, uv).x > 0.5 && uv.x >= 0. && uv.x < 1.;\n}\n\nfloat get_neighbor(in vec2 coord, in ivec2 offset) {\n    ivec2 pix = ivec2(coord) + offset;\n    if (pix.x < 0 || pix.x >= int(iResolution.x))\n        return 0.0;\n\n    return texelFetch(iChannel0, pix, 0).x;\n}\n\nvoid mainImage(out vec4 color, in vec2 p) {\n    vec2 x = p.xy / iResolution.xy;    \n    \n    float left = get_neighbor(p, ivec2(-1, 0));\n    float center = get_neighbor(p, ivec2(0));\n    float right = get_neighbor(p, ivec2(1, 0));\n    \n    if (iTime < 0.1) {\n        color.x = initialize(p);\n    } else if (p.y < 1.) {\n     \tcolor.x = advance(left, center, right);\n    } else {\n        color.x = get_neighbor(p, ivec2(0, -1));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}