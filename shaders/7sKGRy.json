{
    "Shader": {
        "info": {
            "date": "1631940566",
            "description": "Does this count as a fractal? Not sure. \n\nBased on 2D version from my previous shader: [url]https://www.shadertoy.com/view/7sV3WD[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "7sKGRy",
            "likes": 34,
            "name": "Iterative Subdivison Fractal",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "cubes",
                "subdivision",
                "subdivide"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 946
        },
        "renderpass": [
            {
                "code": "#define MDIST 150.0\n#define STEPS 300.0\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n//iq palette\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos(2.*pi*(c*t+d));\n}\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\nfloat h11 (float a) {\n    return fract(sin((a)*12.9898)*43758.5453123);\n}\nfloat box(vec3 p, vec3 b){\n    vec3 d = abs(p)-b;\n    return max(d.x,max(d.y,d.z));\n}\nfloat ebox(vec3 p, vec3 b){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat volume(vec3 a){\n    return a.x*a.y*a.z;\n}\n//Based on code from bigwings comment here\n//https://www.shadertoy.com/view/Wl3fD2\nfloat dibox(vec3 p,vec3 b,vec3 rd){\n    p/=b;\n    vec3 dir = sign(rd)*.5;   \n    vec3 rc = (dir-p)/rd;\n    rc*=b;\n    float dc = min(min(rc.x, rc.y), rc.z)+0.001;\n    return dc;\n}\n\nvec3 rdg = vec3(0);\nvec2 blocks(vec3 p, vec3 scl, vec3 rd){\n    float t = iTime;\n      \n    vec2 xRange = vec2(-0.5,0.5)*scl.x;\n    vec2 yRange = vec2(-0.5,0.5)*scl.y;\n    vec2 zRange = vec2(-0.5,0.5)*scl.z;\n    float id = 0.;\n    float seed = floor(t/6.)+0.1;\n    \n    //Some parameters to play with :D\n    float minSize = 0.15;\n    float iters = 12.;\n    float minIters = 1.;\n    float breakChance = 0.0;\n    float maxVolume = 5.0;\n    float destructionChance = 0.5;\n    float maxCenterDist = 4.5;\n    float padFact = 1.01;\n    \n    float xLength=0.;\n    float yLength=0.;\n    float zLength=0.;\n    \n    for(float i = 0.;i<iters;i++){\n        xLength = xRange.y-xRange.x;\n        yLength = yRange.y-yRange.x;\n        zLength = zRange.y-zRange.x;\n        \n        float dividex = h21(vec2(i+id,seed))*(xLength)+xRange.x;\n        float dividey = h21(vec2(i+id,seed))*(yLength)+yRange.x;\n        float dividez = h21(vec2(i+id,seed))*(zLength)+zRange.x;\n        \n        dividex= clamp(dividex,xRange.x+minSize*padFact,xRange.y-minSize*padFact);\n        dividey= clamp(dividey,yRange.x+minSize*padFact,yRange.y-minSize*padFact);\n        dividez= clamp(dividez,zRange.x+minSize*padFact,zRange.y-minSize*padFact);\n        \n        float mn = min(length(xRange.x-dividex),length(xRange.y-dividex));\n        mn = min(mn,min(length(yRange.x-dividey),length(yRange.y-dividey)));\n        mn = min(mn,min(length(zRange.x-dividez),length(zRange.y-dividez)));\n        bool willBreak = false;\n        if(i-1.>minIters && h11(id)<breakChance) willBreak = true;\n        if(mn<minSize&&i-1.>minIters||i==iters-1.) willBreak = true;\n        if(willBreak) {\n        //id = i*0.1*seed;\n        break;\n        }\n        vec3 diff = vec3(0);\n        if(p.x<dividex){\n            xRange = vec2(xRange.x,dividex);\n            diff.x+=dividex;\n        }\n        else{\n            xRange = vec2(dividex,xRange.y);\n            diff.x-=dividey;\n        }\n        if(p.y<dividey){\n            yRange = vec2(yRange.x,dividey);\n            diff.y-=dividex;\n        }\n        else{\n            yRange = vec2(dividey,yRange.y);\n            diff.y+=dividey;\n        }\n        if(p.z<dividez){\n            zRange = vec2(zRange.x,dividez);\n            diff.z-=dividex;\n        }\n        else{\n            zRange = vec2(dividez,zRange.y);\n            diff.z+=dividez;\n        }\n\n        id = length(diff+10.0);\n    }\n    \n    float volume = volume(vec3(xLength,yLength,zLength));\n    vec3 center = vec3((xRange.x+xRange.y)/2.,(yRange.x+yRange.y)/2.,(zRange.x+zRange.y)/2.);\n\n    //huge improvment in performance by using distance to intersection of empty cell\n    //to remove boxes (instead of using a negative box sdf)\n    //But it seems to cause artifacts rarely, idk why\n    float b = dibox(p-center,vec3(xLength,yLength,zLength),rd);\n    \n    float shr = 1.0-abs(pow(abs(cos(mod(t,6.)*pi/6.)),6.0));\n    shr = smoothstep(0.,1.,shr);\n    vec3 d = abs(center);\n    center.y-=yLength*(1.0-shr)*0.5;\n    yLength*=shr;\n    float a = box(p-center,vec3(xLength,yLength,zLength)*0.5);\n\n    //I found this helps to remove some of the artifacts from using the empty box intersection\n    if(abs(p.x)>scl.x*0.5) b=-a;\n    if(abs(p.z)>scl.z*0.5) b=-a;\n    \n    a=min(a,b);\n    if(max(d.x,max(d.y*0.5,d.z))>maxCenterDist)a=b;\n    else if(volume>maxVolume)a=b;\n    else if (h11(id*1.1)<destructionChance)a=b;\n    \n    id = h11(id)*1000.0;\n\n    return vec2(a,id);\n}\n\nvec2 map(vec3 p){\n    float t = iTime;\n    p.y-=1.0;\n    vec3 po = p;\n    vec2 a = vec2(1);\n    vec2 b = vec2(2);\n    vec3 scl = vec3(10.0,14.,10);\n    vec3 rd2 = rdg;\n    a = blocks(p,scl,rdg)+0.02;\n    \n    a.x = max(box(p,vec3(scl*0.49)),a.x);\n    \n    p.y+=scl.y*0.5+5.2;\n    b.x = ebox(p,vec3(5.2))-0.2;\n    \n    a=(a.x<b.x)?a:b;\n    return a;\n}\nvec3 norm(vec3 p){\n    vec2 e = vec2(0.00005,0.);\n    return normalize(map(p).x-vec3(\n    map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    float t = iTime;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,5,-20);\n    if(iMouse.z>0.){\n    ro.zx*=rot(7.0*iMouse.x/iResolution.x);\n    }\n    else ro.zx*=rot(iTime*0.3);\n    vec3 lk = vec3(0,0.,0);\n    vec3 f = normalize(lk-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = normalize(f*0.95+uv.x*r+uv.y*cross(f,r));    \n    rdg = rd;\n    vec3 p = ro;\n    float dO = 0.;\n    vec2 d = vec2(0);\n    bool hit = false;\n    for(float i = 0.; i<STEPS; i++){\n        p = ro+rd*dO;\n        d = map(p);\n        dO+=d.x*0.99;\n        if(abs(d.x)<0.0001){\n            hit = true;\n            break;\n        }\n        if(d.x>MDIST){\n            dO=MDIST;\n            break;\n        }\n    }\n    if(hit){\n        vec3 ld = normalize(vec3(0.5,1,-1));\n        vec3 n = norm(p);\n        vec3 r = reflect(rd, n);\n        vec3 e = vec3(0.5);\n        \n        vec3 al = pal(d.y*0.1,e*1.2,e,e*2.0,vec3(0,0.33,0.66));\n        if(d.y==2.0) al = vec3(1.);\n        col = al;\n        \n        //float diff = length(sin(n*2.)*.5+.8)/sqrt(3.);\n        float diff = mix(0.7,1.0,dot(ld,n)*0.5+0.5);\n\n        col = al*diff;\n        \n        float shadow = 1.;\n        rdg = ld;\n        for(float h = 0.05; h<50.;){\n            float dd = map(p+ld*h).x;\n            if(dd<0.001){shadow = 0.6; break;}\n            h+=dd;\n        }     \n        col*=shadow;\n    }\n    vec3 bg = mix(vec3(0.173,0.231,0.686),vec3(0.361,0.753,1.000),rd.y*0.5+0.5);\n    col = mix(col,bg,dO/MDIST);\n    fragColor = vec4(col,1.0);\n}\n/*\n#define AA 2.0\n#define ZERO min(0.0,iTime)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float px = 1.0/AA;\n    vec4 col = vec4(0);\n    \n    if(AA==1.0) {render(col,fragCoord); fragColor = col; return;}\n    \n    for(float i = ZERO; i <AA; i++){\n        for(float j = ZERO; j <AA; j++){\n            vec4 col2;\n            vec2 coord = vec2(fragCoord.x+px*i,fragCoord.y+px*j);\n            render(col2,coord);\n            col.rgb+=col2.rgb;\n            rdg = vec3(0);\n        }\n    }\n    col/=AA*AA;\n    fragColor = vec4(col);\n}\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}