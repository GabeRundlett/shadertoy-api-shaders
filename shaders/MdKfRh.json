{
    "Shader": {
        "info": {
            "date": "1527644993",
            "description": "sdfdsf",
            "flags": 0,
            "hasliked": 0,
            "id": "MdKfRh",
            "likes": 2,
            "name": "BlackWhite by SR",
            "published": 3,
            "tags": [
                "sdfsdf"
            ],
            "usePreview": 0,
            "username": "Shaderay",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision highp float;\n#endif\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nfloat noise(in vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\t\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\n\n#define OCTAVES 6 //adds detail\n        float turbulence (in vec2 st) {\n            // Initial values\n            float value = 0.30;\n            float amplitude = .47;\n            // Loop of octaves\n            for (int i = 0; i < OCTAVES; i++) {\n                value += amplitude * noise(st); // st* something adds detail\n                st *= 1.8; //changes shape\n                amplitude *= .46; //adds detail\n            }\n            return value;\n        }\n\n float pattern( in vec2 st, out vec2 q, out vec2 r, out vec2 s)\n          {\n              q.x = turbulence( st + vec2(3.0,1.0) );\n              q.y = turbulence( st + vec2(2.4,1.3) );\n\n              r.x = turbulence( st + 1.0*q +iTime*0.05 + vec2(1.7,9.2) );\n              r.y = turbulence( st + 1.0*q -iTime*0.005 + vec2(8.3,2.8) );\n\t\t\t\t\n              s.x = turbulence( st + 1.0*r + vec2(1.3,7.2) );\n              s.y = turbulence( st + 1.0*r + vec2(5.3,1.8) );  \n              \n              return turbulence( st + 1.5*s);}\n\n\n\n\n            \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n\tst.x *= iResolution.x/iResolution.y;\n    \n  \n    vec3 color = vec3(0.0);\n       \tvec2 q = vec2(0.);\n          \tvec2 r = vec2(0.);\n            vec2 s = vec2(0.);\n            color += pattern(st,q,r,s);\n\n    color *= 1.7; //makes lighter and darker\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}