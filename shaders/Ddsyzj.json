{
    "Shader": {
        "info": {
            "date": "1690006476",
            "description": "Each circle has 4 circles rotating it.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ddsyzj",
            "likes": 7,
            "name": "Orbiting Circles Fractal",
            "published": 3,
            "tags": [
                "fractal",
                "circle"
            ],
            "usePreview": 0,
            "username": "evpevdev",
            "viewed": 191
        },
        "renderpass": [
            {
                "code": "#define maxIterations 4\n\n#define PI 3.1415926\n\nfloat circle(float radius, vec2 position, vec2 uv){\n    \n    float thickness = pow(radius, 2.0) * 0.025;\n    //float val = 1.0 - smoothstep(thickness, thickness*2.0, abs(length(uv-position) - radius));\n    float val = 1.0 - smoothstep(thickness, thickness*2.0, abs(dot(uv-position, uv-position) - pow(radius, 2.)));\n    return val;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float speed = 0.2;\n    float val = 0.0;\n    float baseRadius = 0.5;\n\n    float speedMultiplier = 1.618;\n    float sizeMultiplier = 0.618;\n    for (int iteration = 0; iteration < maxIterations; iteration++){\n        float radius = baseRadius * pow(sizeMultiplier, float(iteration));\n        // Loop through all circles in this iteration\n        for (float c = 0.0; c < pow(4.0, float(iteration)); c++){ \n            vec2 position = vec2(0.0);\n            // Move the circle\n            for (float j=0.0; j < float(iteration); j++){\n                float n = mod(floor(c/pow(4.0, float(iteration)-j-1.0)), 4.0);\n                float angle = n*PI/2.0 + iTime*speed*pow(speedMultiplier, float(j));\n                position += baseRadius*pow(sizeMultiplier, j) * vec2(cos(angle), sin(angle));\n            }\n\n            val += circle(radius, position, uv);\n        }\n    }\n    val = 1.0 - val;\n\n    // Output to screen\n    fragColor = vec4(vec3(val), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}