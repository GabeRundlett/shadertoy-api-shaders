{
    "Shader": {
        "info": {
            "date": "1538931223",
            "description": "fingerbob",
            "flags": 0,
            "hasliked": 0,
            "id": "MtdBzN",
            "likes": 6,
            "name": "fingerbob3d",
            "published": 3,
            "tags": [
                "fingerbob"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 657
        },
        "renderpass": [
            {
                "code": "// fingerbob3d\n\n\n//------------------------------------------------------------------------\n// Camera\n//------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec2 mouse )\n{\n    vec2 mouse2 = vec2(0.0);\n    if (iMouse.z > 0.5)\n    {\n        mouse2 = mouse;\n        mouse2.y -= 0.1;\n    }\n    \n//    float an = 0.3*iTime + 10.0*mouse.x;\n    float an = 10.0*mouse2.x;\n    mouse2.y *= 4.0;\n\tcamPos = vec3(5.5*sin(an),0.0+mouse2.y*2.0,5.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\n    \n//------------------------------------------------------------------------\n// Modelling \n//------------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdEllipsoid(const in  vec3 p, const in vec3 r) {\n  return (length(p / r) - 1.0) * min(min(r.x, r.y), r.z);\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n\nfloat fakeEllipsoid( vec3 p, vec3 s ) {\n\tvec3 lp = p / s;\n\tvec3 ep = normalize(lp) * s;\n\treturn length(p - ep) * sign(length(lp) - 1.0);\n}\n\nfloat cylinder( vec3 p, vec2 rh )\n{\n\tvec2 cp = vec2( length(p.xz), p.y );\n\treturn length( max(abs(cp) - rh, 0.0) );\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 opUnionRound(const in vec2 a, const in vec2 b, const in float r)\n{\n    vec2 res = vec2(smin(a.x,b.x,r),(a.x<b.x) ? a.y : b.y);\n    return res;\n}\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\n\nvec3 rotateX(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(p.x, ca * p.y - sa * p.z, sa * p.y + ca * p.z);\n}\nvec3 rotateY(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca * p.x + sa * p.z, p.y, -sa * p.x + ca * p.z);\n}\nvec3 rotateZ(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca * p.x - sa * p.y, sa * p.x + ca * p.y, p.z);\n}\n\n// http://mercury.sexy/hg_sdf/\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size)\n{\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n\n#define PI 3.1415926\n#define DEG2RAD ((PI * 2.0) / 360.0)\n\n\n// model\n\n    // Return 2x2 rotation matrix\n    // With vector swizzle/mask can use as a 3x3 xform\n    // For y, you need to invert \n    // angle in radians\n    // ========================================\n    mat2 Rot2(float a ) {\n        float c = cos( a );\n        float s = sin( a );\n        return mat2( c, -s, s, c );\n    }\n\n\n    // ========================================\n    float sdCappedCylinder( vec3 p, vec2 h )\n    {\n        vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n        return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n    }\n\n    vec3 opCheapBend( vec3 p, float angle )\n    {\n        mat2  m = Rot2( angle * p.y );\n        vec3  q = vec3( m*p.yx, p.z );\n        return q;\n    }\n\n\nvec3 CalcBend(vec3 bodyp)\n{\n    float ang = sin(iTime) * 8.;\n    ang += sin(iTime*0.37) * 4.;\n    \n    bodyp.y += 2.0;\n\tbodyp = opCheapBend(bodyp,(ang)*DEG2RAD);\n    //bodyp.z -= 1.0;\n    bodyp = rotateZ(bodyp,90.0*DEG2RAD);\n    bodyp.y -= 2.0;\n    return bodyp;\n    \n}\n\nfloat smin( float a, float b )\n{\n    float k = 3.0;\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n\n\nvec2 doModel( vec3 p )\n{\n    //float c = pMod1(p.z,7.5);\n    //p.x += 2.75*c;\t\t\t\t// fucked because of mirroring\n    //pMod1(p.x,5.5);\n\n    vec2 res = vec2(0.0,0.0);\t\t\t// distance,material index\n    //p.z += 0.8;\n    \n    vec3 bodyp = p;\n    bodyp = CalcBend(bodyp);\n    \n\n    float d3 = sdEllipsoid(bodyp-vec3(0.0,1.4,0.0),vec3(0.95));\n    \n    float d1 = sdCappedCylinder(bodyp,vec2(0.8,1.8));\n    \n    d1 = smin(d3,d1);\n    \n    \n    float d2 = sdPlane(p-vec3(0.0,-1.8,0.0));\t\t// checkered floor distance...\n\n    res = vec2(d1,2.0);\n    res = opUnionRound(res,vec2(d2,1.0),0.1);\n\n    return res;\n}\n\n\nmat2 rotate(float a)\n{\n    float sa = sin(a), ca = cos(a);\n\treturn mat2(ca, -sa, sa, ca);\n}\n\nfloat circle(vec2 p, float radius)\n{\n\treturn length(p) - radius;\n}\n\n\n//======================\n// Line functions\n//======================\n\nfloat distanceToSegment( vec2 a, vec2 b, vec2 p )\n{\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n// bend(Y)\nvec2 opBendTest( vec2 p, float angle )\n{\n    mat2 m = rotate( angle * p.x );\n    return   m*p.xy;\n}\n\n// NAND, our only primitive\nfloat csg_nand (float a, float b) {\n    return -max(a,b);\n}\n\n// aka A AND NOT B, NOT(NAND(A,NOT(B)))\nfloat csg_sub (float a, float b) {\n    float o = csg_nand(a, csg_nand(b, b));\n    return csg_nand(o, o);\n}\n// NAND(NOT(A),NOT(B))\nfloat csg_or (float a, float b) {\n    return csg_nand(\n        csg_nand(a,a),\n        csg_nand(b,b));\n}\n\nfloat Eye(vec2 p,vec2 offset)\n{\n    float rad = 0.06;\n    float rad2 = 0.057;\n    float d = circle(p,rad);\n    float d2 = circle(p,rad2);\n    float d3 = circle(p+offset,0.015);\t// pupil\n    // blink\n    float blink = step(sin(iTime * 2.8 + cos(iTime * 2.0) * 2.0), 0.95);\n\td3 = max(d3,1.0-blink);\n    d = csg_sub(d,d2);\n    d = csg_or(d,d3);\n    return d;\n    \n}\n\n\nvec4 FaceTest(vec2 p)\n{\n    p.y += 0.1;\n\n    vec4 color = vec4(0.0,0.0,0.0,1.0);\n    vec2 p1 = vec2(-0.15,-0.03);\n    vec2 p2 = vec2(0.15,-0.03);\n    float dist = 100.0;\n\n    vec2 offset1 = vec2(0.015,0.02);\n    vec2 offset2 = vec2(-0.015,0.02);\n    float d2 = Eye(p+vec2(-0.08,-0.2),offset1);\n    float d3 = Eye(p+vec2(0.08,-0.2),offset2);\n\n    p = opBendTest(p,DEG2RAD*140.0);\t////sin(iTime));\n    float d1 = distanceToSegment(p1,p2,p);\n\n    dist = min(dist,d2);\n    dist = min(dist,d3);\n    dist = smoothstep(0.0,0.01, dist);\t\t// alias,thickness\n    \n    float b = 0.0;\n    \n    b += 1.0-dist;\n\n    // mouth\n    dist = smoothstep(0.004,0.015, d1);\t\t// alias,thickness\n    b += 1.0-dist;\n    b = 1.0-b;\n    \n\tcolor = vec4(b*0.7,b*0.1,b*0.2,0.5);\n    \n    return color;\n    \n}\n\n\n// Mellow purple II flow background - Del 17/06/2018\n//const float PI = 3.14159;\n\nvec2 _rotate(vec2 p, float a)\n{\n    float sa = sin(a), ca = cos(a);\n\treturn p * mat2(ca, -sa, sa, ca);\n}\n\nfloat pModPolar(inout vec2 p, float repetitions)\n{\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n\nvec4 MellowGreen(vec2 pos)\n{\n\tpos = _rotate(pos,iTime*0.09);\n\n  \tpModPolar(pos,11.0);    \n\n    pos = abs(pos*0.2);\t\t\t// Mirror, Zoom etc\n    \n    //pos.y *= sin(pos.x);\n    vec4 col = vec4(0.32,0.59,0.35,1.0);\n    float tt = iTime*0.8;\n    float iter = (pos.x*pos.y);\n    iter *= 0.5+sin(pos.x*0.5+tt*0.15)+0.5;\n    float r = sin(pos.y);\n    r += .26;\n    float d1 = sin(tt+pos.x+pos.y);\n    float val = sin(tt+iter*PI );\n    float brightness = 0.25 / abs( d1 * val - r);\n    brightness = brightness/(brightness + 8.);\n    col += brightness;\n    return col*0.2;\n}\n\n\n//------------------------------------------------------------------------\n// Material \n//\n// Defines the material (colors, shading, pattern, texturing) of the model\n// at every point based on its position and normal.\n//------------------------------------------------------------------------\n// c = colour index (added by del for some materials)\n// c.a == specular val fudged in...\nvec4 doMaterial( in vec3 pos, in vec3 nor,float c )\n{\n    if (c<=1.0)\n    {\n        // checker floor\n        //float f = mod( floor(0.25*pos.z) + floor(0.25*pos.x), 2.0);\n        //f+=0.5;\n        //vec4 col = f*vec4(0.3,0.3,0.1,0.0);\n\n        vec4 col = MellowGreen(pos.xz);\n        col.w = 0.2;\n        \n\t    return col;\n    }\n    else if (c<=2.0)\n    {\n        vec3 bodyp = pos;\n        bodyp = CalcBend(bodyp);\n        vec3 q = normalize( bodyp );\n        //vec2 uv = vec2( atan(q.z,q.x), acos(-q.y ) );\n \t\tvec2 uv = vec2(atan(q.x,q.z), q.y) / PI ;\n        return FaceTest(uv);\n    }\n    //else if (c<=3.0)\n    //{\n\t//\treturn vec4(0.3, 0.0, 0.0,3.0);\t// feet/gloves\n    //}\n\n\treturn vec4(0.0, 0.0, 0.0,2.0);\t// eyes\n    \n//    return vec3(0.2,0.07,0.01);\n    \n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec4 mat )\n{\n    \n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(0.7,0.875,0.89));\t\t// dir\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0;\n    if( dif>0.01 )\n        sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n\tfloat spec = pow(dif, 160.0) *mat.a;\n    \n    \n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mat.xyz*lin;\n    col+=spec;\n\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.001*dis*dis);\n\n    return col;\n}\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 50.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\t//float res = -1.0;\n    vec2 res = vec2(-1.0,0.0);\n    float c = 0.0;\n    \n    for( int i=0; i<120; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n        vec2 res2 = doModel( ro+rd*t );\n\t    h = res2.x;\n        c = res2.y;\n        \n        t += h*0.75;\t\t// hack * for extreme bend\n    }\n\n    if( t<maxd )\n    {\n        res.x = t;\n        res.y = c;\n    }\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    \n    vec2 uv3 = (fragCoord/iResolution.xy)-vec2(0.5,0.5);\n\tfloat distSqr = dot(uv3, uv3)+0.5;\n\tfloat vignette = 1.4 - distSqr;\n    \n    \n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n  \tvec3 col = mix( vec3(0.0,0.24, 0.0), vec3(0.1, 0.05, 0.3), fragCoord.y / iResolution.y );\n\n\t// raymarch\n    vec2 res = calcIntersection( ro, rd ); \n    float t = res.x;\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec4 mat = doMaterial( pos, nor, res.y );\n\n        col = doLighting( pos, nor, rd, t, mat );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n    col *= vignette;\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}