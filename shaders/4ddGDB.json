{
    "Shader": {
        "info": {
            "date": "1452037353",
            "description": "An optimised version of my other n-body shader.\nThis version breaks up the process of summing up the net acceleration into a bunch of small parallel \"chunks\" which are then summed up in another pass to integrate the position.",
            "flags": 32,
            "hasliked": 0,
            "id": "4ddGDB",
            "likes": 8,
            "name": "N-Body Gravity (Optimised)",
            "published": 3,
            "tags": [
                "simulation",
                "gravity",
                "nbody",
                "multipass"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 1790
        },
        "renderpass": [
            {
                "code": "//#define VIEW_POSITION_BUFFER\n//#define VIEW_CHUNK_BUFFER\n\n//NUM_BODIES must be less than or equal to iResolution.x and must be changed in all tabs.\n#define NUM_BODIES 800\n\n#define BODY_RADIUS 2.0\n\nvec2 invRes = vec2(0);\n\nvec2 getBody(int id)\n{\n    return texture(iChannel1, vec2(id, 0.0)*invRes.x).xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    invRes = 1.0 / iResolution.xy;\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    float d = 1e6;\n    \n    for(int i = 0;i < NUM_BODIES;i++)\n    {\n        vec2 body = getBody(i) - uv;\n\t\td = min(d, dot(body,body));\n    }\n    \n    d = sqrt(d);\n    \n    float px = 1.0/iResolution.y;\n    \n    float c = smoothstep(BODY_RADIUS*px - px, BODY_RADIUS*px, d);\n    \n\tfragColor = vec4(vec3(c),1.0);\n    \n    #ifdef VIEW_POSITION_BUFFER\n    \tfragColor = texture(iChannel1, uv / res / vec2(1,64));\n    #endif\n    #ifdef VIEW_CHUNK_BUFFER\n    \tfragColor = texture(iChannel0, uv / res) / 16.0;\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Acceleration Chunk Buffer\n\n//fragCoord.x = Body ID\n//fragCoord.y = Chunk ID\n\n//fragColor.xy = Chunk Acceleration\n\n//The process of summing up the accelerations is broken up into small parallel chunks which are summed up to get\n//the final net acceleration of a body.\n\n#define CLAMP_VIEW\n\n#define NUM_BODIES 800\n#define CHUNK_SIZE 32\n\n#define BODY_MASS 0.2\n#define MAX_ACCEL 1e4\n\n//Get a body from the backbuffer with its ID (xy = Current pos, zw = Last pos).\nvec4 getBody(int id)\n{\n    return texture(iChannel0, vec2(id,0)/iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    if( fragCoord.x > float(NUM_BODIES))\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    int id = int(fragCoord.x);\n    int chunk = int(fragCoord.y);\n    \n    vec4 body = getBody(id);\n    \n    vec2 acc = vec2(0);\n    \n    for(int i = 0;i < CHUNK_SIZE;i++)\n    {\n        if(i + chunk * CHUNK_SIZE != id)\n        {\n            vec2 diff = getBody(i + chunk * CHUNK_SIZE).xy - body.xy;\n            \n            acc += min(MAX_ACCEL, BODY_MASS / dot(diff, diff)) * normalize(diff);\n        }\n    }\n    \n    fragColor = vec4(acc,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Body Position Buffer\n\n//fragCoord.x = Body ID\n\n//fragColor.xy = Current Body Position\n//fragColor.zw = Last Body Position\n\n//Keep bodies inside the viewport\n#define CLAMP_VIEW\n\n#define NUM_BODIES 800\n#define CHUNK_SIZE 32\n\n#define TIME_SCALE 0.005\n\n//Get an acceleration chunk from the chunk buffer.\nvec2 getChunk(int id, int blk)\n{\n    return texture(iChannel0, vec2(id, blk)/iResolution.xy).xy;\n}\n\n//Get a body from the backbuffer with its ID (xy = Current pos, zw = Last pos).\nvec4 getBody(int id)\n{\n    return texture(iChannel1, vec2(id, 0.0)/iResolution.xy);\n}\n\n//Integrate the body's position.\nvec4 Integrate(vec4 body, vec2 accel, float delta)\n{\n    return vec4(2.0*body.xy - body.zw + accel * delta*delta, body.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    if(fragCoord.y > 0.5 || fragCoord.x > float(NUM_BODIES))\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 res = iResolution.xy / iResolution.y;\n    \n    int id = int(fragCoord.x);\n    \n    vec4 body = getBody(id);\n    \n    vec2 acc = vec2(0);\n    \n    for(int i = 0;i < NUM_BODIES/CHUNK_SIZE;i++)\n    {\n        acc += getChunk(id, i);\n    }\n    \n    body = Integrate(body, acc, iTimeDelta * TIME_SCALE);\n    \n    //Initialization (iFrame == 0 doesn't seem to work when the page is initially loaded)\n    if(iFrame == 0 || iTime < 3.0)\n    {\n        vec2 rpos = vec2(0);\n        float stride = iChannelResolution[2].x;\n        rpos.x = mod(float(id), stride);\n        rpos.y = floor(float(id) / stride);\n        body = texture(iChannel2, rpos / iChannelResolution[2].xy, -99.0).xyxy * res.xyxy;\n    }\n    \n    #ifdef CLAMP_VIEW\n    \tbody = clamp(body, vec4(0), res.xyxy);\n    #endif\n    \n    fragColor = body;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}