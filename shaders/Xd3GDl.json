{
    "Shader": {
        "info": {
            "date": "1452624783",
            "description": "2-pass bokeh (implementation of http://ivizlab.sfu.ca/papers/cgf2012.pdf )\nLMB to vary blursize.\nBottom test-pattern on the left shows artifacts.\nBUFB/BUFC are identical with different blur-directions.",
            "flags": 32,
            "hasliked": 0,
            "id": "Xd3GDl",
            "likes": 47,
            "name": "lens: bokeh blur, hexagon 2pass",
            "published": 3,
            "tags": [
                "blur",
                "lens",
                "filter",
                "dof",
                "bokeh",
                "hexagon"
            ],
            "usePreview": 1,
            "username": "hornet",
            "viewed": 3768
        },
        "renderpass": [
            {
                "code": "#define USE_RANDOM\n\nconst float blurdist_px = 64.0;\nconst int NUM_SAMPLES = 16;\n\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\n//note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float sinblur = ( 0.55 + 0.45 * sin( 5.0 * uv.x + iTime ) );\n    float blurdist = (iMouse.z>0.5) ? 100.0 * iMouse.x/iResolution.x : blurdist_px * sinblur;\n\n    float srnd = hash12n(uv+fract(iTime))-0.5;\n    \n   \tvec3 sumcol0 = vec3(0.0);\n    {\n        vec2 blurdir = vec2( 1.0, 0.577350269189626 );\n    \tvec2 blurvec = normalize(blurdir) / iResolution.xy;\n        vec2 p0 = uv - 0.5 * blurdist * blurvec;\n    \tvec2 p1 = uv + 0.5 * blurdist * blurvec;\n    \tvec2 stepvec = (p1-p0) / float(NUM_SAMPLES);\n    \tvec2 p = p0;\n        #if defined(USE_RANDOM)\n        p += srnd * stepvec;\n        #endif\n    \n        for (int i=0;i<NUM_SAMPLES;++i)\n        {\n            sumcol0 += srgb2lin( texture( iChannel0, p, -10.0 ).rgb);\n            p += stepvec;\n        }\n        sumcol0 /= float(NUM_SAMPLES);\n    }\n    \n    vec3 sumcol1 = vec3(0.0);\n    {\n        vec2 blurdir = vec2( -1.0, 0.577350269189626 );\n        vec2 blurvec = normalize(blurdir) / iResolution.xy;\n        vec2 p0 = uv - 0.5 * blurdist * blurvec;\n        vec2 p1 = uv + 0.5 * blurdist * blurvec;\n        vec2 stepvec = (p1-p0) / float(NUM_SAMPLES);\n        vec2 p = p0;\n        #if defined(USE_RANDOM)\n        p += srnd * stepvec;\n        #endif\n\n        for (int i=0;i<NUM_SAMPLES;++i)\n        {\n            sumcol1 += srgb2lin( texture( iChannel0, p, -10.0 ).rgb);\n            p += stepvec;\n        }\n        sumcol1 /= float(NUM_SAMPLES);\n    }\n\n    //DEBUG\n    //fragColor = vec4( sumcol0, 1.0 ); return;\n    //fragColor = vec4( sumcol1, 1.0 ); return;\n    \n    vec3 sumcol = min( sumcol0, sumcol1 );\n    \n    fragColor = vec4( lin2srgb(sumcol), 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define USE_RANDOM\n\nconst float blurdist_px = 64.0;\nconst int NUM_SAMPLES = 16;\n\nconst float THRESHOLD = 0.1;\nconst float MULT = 4.0;\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\n//note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\nvec4 pattern( vec2 p )\n{\n    float aspect = iResolution.x/iResolution.y;\n    float p0 = step(abs(p.x-0.125), 0.01) * step(abs(p.y-0.27), 0.01);\n    float p1 = step( length( p-vec2(0.125, 0.45) ), 0.025 );\n    \n    float p2_0 = step( length( p-vec2(0.08, 0.14) ), 0.0125 );\n    float p2_1 = step( length( p-vec2(0.16, 0.125) ), 0.0125 );\n    float p2_2 = step( length( p-vec2(0.1, 0.07) ), 0.0125 );\n    float p2 = max(p2_0, max(p2_1,p2_2));\n    \n    return vec4( max( p0, max(p1,p2) ) );\n}\n\nvec3 sampletex( vec2 uv )\n{\n    float t = fract( 0.1*iTime );\n    if ( t < 1.0/3.0)\n    \treturn srgb2lin( texture( iChannel0, uv, -10.0 ).rgb );\n    else if ( t < 2.0/3.0 )\n        return srgb2lin( texture( iChannel1, uv, -10.0 ).rgb );\n    else\n\t    return srgb2lin( texture( iChannel2, uv, -10.0 ).rgb );    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 blurdir = vec2( 0.0, 1.0 );\n    vec2 blurvec = normalize(blurdir) / iResolution.xx;\n    fragCoord += 25.0 * vec2( cos(iTime), sin(iTime ) );\n    vec2 suv = fragCoord / iResolution.xy; \n    vec2 uv = fragCoord / iResolution.xx;\n    float sinblur = ( 0.55 + 0.45 * sin( 5.0 * uv.x + iTime ) );\n    float blurdist = (iMouse.z>0.5) ? 100.0 * iMouse.x/iResolution.x : blurdist_px * sinblur;\n    \n    vec2 p0 = uv - 0.5 * blurdist * blurvec;\n    vec2 p1 = uv + 0.5 * blurdist * blurvec;\n    vec2 stepvec = (p1-p0) / float(NUM_SAMPLES);\n    vec2 p = p0;\n    #if defined(USE_RANDOM)\n    p += (hash12n(uv+fract(iTime))-0.5) * stepvec;\n    #endif\n    \n    vec3 sumcol = vec3(0.0);\n    for (int i=0;i<NUM_SAMPLES;++i)\n    {\n        if ( p.x < 0.25 )\n            sumcol += pattern( p ).rgb;\n        else\n        {\n            vec3 smpl = (sampletex(p) - THRESHOLD) / (1.0-THRESHOLD);\n            sumcol += smpl*smpl; //wtf\n        }\n        p += stepvec;\n    }\n    sumcol /= float(NUM_SAMPLES);\n    sumcol = max( sumcol, 0.0 );\n    \n    fragColor = vec4( lin2srgb( sumcol * MULT ), 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}