{
    "Shader": {
        "info": {
            "date": "1622360067",
            "description": "my first shader! render sphere , but  why if i set MAX_ITER_TIME =30 ,the image is wrong?",
            "flags": 0,
            "hasliked": 0,
            "id": "7ts3zS",
            "likes": 0,
            "name": "acedtang_sphere",
            "published": 3,
            "tags": [
                "3d",
                "sphere"
            ],
            "usePreview": 0,
            "username": "wiltchamberian",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "float sdf_sphere(vec3 p, vec3 center, float radius){\n    return length(p-center)-radius;\n}\n\nfloat sdf(vec3 p){\n    float dis = sin(5.0 * p.x) * sin(5.0 * p.y) * sin(5.0 * p.z) * 0.25;\n    return sdf_sphere(p,vec3(0,0,-1),0.5);\n}\n\n//cal color with normal vector\nvec3 calColor(vec3 dir,vec3 p){\n    float pi = 3.1415926535;\n    vec3 sunLight =  vec3(1.,1.,1.);//*sin(pi*2.0*float(iTime)*0.01);\n    \n    vec3 n = normalize(p-vec3(0,0,-1));\n    vec3 ndir = normalize(-dir);\n    \n    const vec3 sunDir = normalize(vec3(-1.,-1.,-1.));\n    vec3 h  = normalize((ndir-sunDir)*0.5);\n    \n    float co = dot(n,h);\n    return sunLight*vec3(0.8,0.2,0.2)*co;\n    //return vec3(0.8,0.2,0.2);\n}\n\n\n//dir should be nomalized\nvec3 rayMarching(vec3 v0, vec3 dir, const int maxIterTimes, float maxDistance,float tol1){\n    vec3 backgroundColor = vec3(0.2,0.2,0.8);\n    float totalDis = 0.0;\n    vec3 v = v0;\n    //return backgroundColor;\n    const float tol = 0.001;\n    const int MAX_ITER_TIME =10;\n    for(int i=0;i<MAX_ITER_TIME;++i){\n        float d = sdf(v);\n        if(d<tol){\n            return calColor(dir,v);\n        }\n        v = v+d*dir;\n        \n        totalDis+=d;\n        if(totalDis>maxDistance){\n            return backgroundColor;\n        }\n    }\n    return backgroundColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pi = 3.1415926535;\n    //fragColor = vec4( vec3(1.,1.,1.)*cos(float(iTime)*pi*2.0*0.25),1.0);\n    //return;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 cameraPos = vec3(0.0,0.0,2.0);\n    vec3 leftcorner = vec3(-1.0,-1.0,1.0);\n    float w = 2.0;\n    float h = 2.0;\n    vec3 pixelPoint = leftcorner+ vec3(uv.x*w,uv.y*h,0);\n    vec3 dir = pixelPoint-cameraPos;\n    dir = normalize(dir);\n    vec3 color = rayMarching(cameraPos,dir,50,1000.0,0.001);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}