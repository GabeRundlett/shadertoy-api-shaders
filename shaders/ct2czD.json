{
    "Shader": {
        "info": {
            "date": "1691535202",
            "description": "ai audio",
            "flags": 4,
            "hasliked": 0,
            "id": "ct2czD",
            "likes": 0,
            "name": "audioAI",
            "published": 3,
            "tags": [
                "audio",
                "ai"
            ],
            "usePreview": 0,
            "username": "lucianoferrarezi",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "// Retorna a intensidade dos agudos e m√©dios\nfloat getIntensity() {\n    float intensity = 0.0;\n    for(int i = 80; i < 200; i++) { \n        intensity += texture(iChannel0, vec2(float(i)/200.0, 0.5)).r;\n    }\n    return intensity / 120.0;\n}\n\nvec3 generateStars(vec2 coord, float intensity) {\n    coord *= 1.0 + 0.5 * intensity; \n    float starValue = fract(sin(dot(coord, vec2(12.9898, 78.233))) * 43758.5453);\n    float threshold = 0.998 - intensity * 0.002;\n    return vec3(step(threshold, starValue));\n}\n\nvec3 generateTexture(vec2 coord) {\n    float bassIntensity = 0.0;\n    for(int i = 0; i < 100; i++) {\n        bassIntensity += texture(iChannel0, vec2(float(i)/100.0, 0.5)).r;\n    }\n    bassIntensity /= 100.0;\n\n    float col = bassIntensity * (0.5 + 0.5*sin(iTime + coord.y*10.0) + 0.5*cos(iTime + coord.x*10.0));\n    return vec3(col);\n}\n\nvec3 getSphereNormal(vec2 coord) {\n    float lon = mix(-3.14159265, 3.14159265, coord.x);\n    float lat = mix(-1.57079633, 1.57079633, coord.y);\n    vec3 normal;\n    normal.x = cos(lat) * sin(lon);\n    normal.y = sin(lat);\n    normal.z = cos(lat) * cos(lon);\n    return normal;\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n\n    vec3 normal = getSphereNormal(p);\n\n    float angleX = (iMouse.x / iResolution.x) * 3.14159265;\n    float angleY = (iMouse.y / iResolution.y) * 3.14159265;\n\n    mat2 rotationX = mat2(\n        cos(angleX), -sin(angleX),\n        sin(angleX), cos(angleX)\n    );\n\n    mat2 rotationY = mat2(\n        cos(angleY), -sin(angleY),\n        sin(angleY), cos(angleY)\n    );\n\n    normal.xz = rotationX * normal.xz;\n    normal.yz = rotationY * normal.yz;\n\n    vec2 sphereCoord = vec2(\n        0.5 + atan(normal.z, normal.x) / (2.0 * 3.14159265),\n        0.5 - asin(normal.y) / 3.14159265\n    );\n\n    vec3 col = generateTexture(sphereCoord);\n\n    // Calcula a intensidade\n    float intensity = getIntensity();\n    \n    // Calcula as estrelas baseadas na intensidade\n    vec3 stars = generateStars(fragCoord, intensity);\n\n    col += stars;\n\n    col = clamp(col, 0.0, 1.0);\n\n    fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}