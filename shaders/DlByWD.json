{
    "Shader": {
        "info": {
            "date": "1691763989",
            "description": "show the power spectrum of pseudo-bluenoise ( set in BuffA )  \n- LF 3x3 filtering ( LOD0 - LOD1 )\n- LF 11x11Â Lanczos filtering ( = 49 coefs )\n- LF 12x12 Bessel-Lanczos\n- ref bluenoise\nSee also on Poisson disc https://www.shadertoy.com/view/MssfDf",
            "flags": 32,
            "hasliked": 0,
            "id": "DlByWD",
            "likes": 15,
            "name": "spectrum of pseudo-bluenoise",
            "published": 3,
            "tags": [
                "fft",
                "sampling",
                "fourier",
                "bluenoise",
                "dft"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 454
        },
        "renderpass": [
            {
                "code": "// === testing various pseudo-bluenoise spectrums ( def in BuffA ) ====================\n// fork from Fourier-based transform (e.g. kernel convolution) using https://www.shadertoy.com/view/4s3GDs\n\n// adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS#\n// see also https://www.shadertoy.com/view/4dGGz1 to play with spectrum.\n\n\n\nvec4 paintDFT(vec2 F) {\n     // return vec4( log(length(F)) / log(SIZE*SIZE) );   // log scale\n        return vec4( length(F) / SIZE );                  // linear scale    \n}\n\n\nvoid mainImage( out vec4 O,  vec2 u )\n{\n    vec2 R = iResolution.xy,     \n     pixel = ( u - R/2.) / SIZE  + vec2(2,1)/2.,\n      tile = floor(pixel),\n         U = fract(pixel) * SIZE / R ;\n\n    O *= 0.;\n    \n    if(tile == vec2(0,0))  // Input (Left)\n        O += texture(iChannel0, U).x;        \n\n    if(tile == vec2(1,0))  // DFT (Right)\n        O += paintDFT(texture(iChannel1, U).xy);  \n\n\n  //if(tile.y>0.) O += texture(iChannel0, U/iResolution.xy).x; // displayed values in top margin   \n    if (tile != mod(tile,vec2(2,1))) O+=.3;  \n    \n  if ( pixel.x<0. && int(4.*u.y/R.y)==int(iTime)%4 )   // show demo id\n     O.r += smoothstep( 1.5,0.,length(u-vec2(R.x/4.-SIZE/2.,R.y*mod(floor(iTime)+.5,4.)/4.)) -R.y/30. );\n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === testing various pseudo-bluenoise spectrums ====================\n// Lanczos pseudoblue from https://www.shadertoy.com/view/dtlyzs\n// but L(x)L(y) is not isotropic and has altered spectrum.\n// My Bessel-Lanczos fixels that. see: https://www.desmos.com/calculator/wqjt4vsodz\n// See also on Poisson disc spectrum: https://www.shadertoy.com/view/MssfDf\n// Void And Cluster ( no spectrum ): https://www.shadertoy.com/view/mt2cWR\n\nconst float a = 3., n = a-.5, N = 2., PI = 3.1415927;\n\n  #define L(i)    ( i==0. ? 1. : i > a ? 0. : a* sin(PI*i)*sin(PI*i/a) / ( PI*PI*i*i ) ) // Lanczos\n//#define L(i) float[]( 1., .60793, 0., -.13509, 0., .024317 )[abs(int(i+i))]            // for a=3,N=2\n  #define B(i)    ( i==0. ? 1. : i > 3. ? 0. : J0(PI*i/1.09) * J0(PI*i/3.6/1.09) )       // Lanczos-like with Bessel\n\n\n#define blue() (                                          /* 3x3 low-pass filter */ \\\n          (  H(-1,-1) +     H(0,-1)  + H(1,-1)  \\\n           + H(-1, 0) - 8.* H(0, 0)  + H(1, 0)  \\\n           + H(-1, 1) +     H(0, 1)  + H(1, 1)  \\\n          ) *.5/9. *2.1 +.5 )         \n//#define H(i,j) texture( iChannel0, ( u + vec2(i,j) ) /256. )\n  #define H(i,j)  hash( u + vec2(i,j) )\n\n\nfloat J0(float x)                                         // BesselJ0 from https://www.shadertoy.com/view/Wt3czM\n{\n    float  xx = x * x,\n         lamb = .865,\n         q    = .7172491568,\n         p0   = .6312725339,\n         ps0  = .4308049446,\n         p1   = .3500347951,\n         ps1  = .4678202347,\n         p2   =-.06207747907,\n         ps2  = .04253832927,\n        lamb4 = (lamb * lamb) * (lamb * lamb),\n           t0 = sqrt(1. + lamb4 * xx),\n           t1 = sqrt(t0);\n    \n    return xx == 0. ? 1. :   ( (p0 + p1*xx + p2*t0) * cos(x) + ( (ps0 + ps1*xx) * t0 + ps2*xx ) * sin(x)/x )\n                           / ( t1 * (1. + q * xx) )  ;\n}\n\n//#define W(i,j)  ( 2.* texture( iChannel0, ( u +N*vec2(i,j) ) / 256. ) - 1. )   // white noise to be filtered\n  #define W(i,j)  ( 2.* hash( u + N*vec2(i,j)+1234.567 ) - 1. )\nfloat hash( vec2 f )                                      // quality integer hash from https://www.shadertoy.com/view/fsKBzw\n{   uvec2 x = floatBitsToUint(f),\n          q = 1103515245U * ( x>>1U ^ x.yx    );\n    return float( 1103515245U * (q.x ^ q.y>>3U) ) / float(0xffffffffU);\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n        O *= 0.; \n        \n        int i = int(iTime)%4;\n        \n        if ( i== 0 )\n            O = vec4( blue() );\n        else if (i == 1 ) {                               // --- Lanczos filter\n            for( float y=-n; y<=n; y+= 1./N )\n                for( float x=-n; x<=n; x+= 1./N )\n                   O += L(x)*L(y) * W(x,y);\n                // O += L(sqrt(x*x+y*y)) * W(x,y);\n\n            O = .5 + .65*( W(0.,0.) - O/(N*N) );          // white noise minus its low freqs\n        }\n        else if (i == 2 ) {                               // --- Bessel-Lanczos filter\n            float N = 1., n = 6.;                         // try commenting for just the ring\n            for( float y=-n; y<=n; y+= 1./N )\n                for( float x=-n; x<=n; x+= 1./N )\n                   O += B(sqrt(x*x+y*y)/1.2) * W(x,y);    // 1.2 to adjust the ring to frequency domain border.\n\n            O = .5 + .4*  O/(N*N);                \n        }\n        else O = texelFetch(iChannel1, ivec2(u)%1024, 0); // reference bluenoise texture\n        \n        O=O.rrrr;\n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fourier transform of the input\n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n        \n    for(float n = 0.; n < SIZE; n++)  {\n        vec2 xn = tex(iChannel0, n+.5, uv.y).xy,\n             yn = tex(iChannel1, uv.x, n+.5).zw,\n             a = - 6.2831853 * (uv-.5 -SIZE/2.) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SIZE (2.*floor(iResolution.x/4.*.8)) // 256. \n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}