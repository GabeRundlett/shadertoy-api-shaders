{
    "Shader": {
        "info": {
            "date": "1530380640",
            "description": "Having fun with voronoi.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dyBWK",
            "likes": 8,
            "name": "Vorostripes",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "distance"
            ],
            "usePreview": 0,
            "username": "mlkn",
            "viewed": 472
        },
        "renderpass": [
            {
                "code": "#define EPSILON .00001\n\n// https://www.shadertoy.com/view/MslGD8\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\n// https://www.shadertoy.com/view/llG3zy\nvec4 voronoi( in vec2 x )\n{\n    bool isStripes = true;\n    float moveDir = mod(floor(x.y), 2.0) > 0.5 ? 1.0 : -1.0;\n    if (isStripes) {\n        float speedMult = floor(x.y + 1.0) * 0.3;\n    \tx.x += iTime * moveDir * speedMult ;\n    }\n    \n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    // first pass: regular voronoi\n\tvec2 closestPoint;\n    float id;\n\n    float minDist = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 cell = vec2(float(i),float(j));\n\t\tvec2 point = hash( n + cell );\n        \n        vec2 r = cell - f + (0.5+0.5*sin(iTime+6.2831*point));\n        float dist = dot(r,r);\n\n        if( dist < minDist )\n        {\n            minDist = dist;\n            closestPoint = r;\n            id = point.x + point.y;\n        }\n    }\n\n    // second pass: distance to borders,\n    // visits only neighbouring cells\n    minDist = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 cell = vec2(float(i),float(j));\n\t\tvec2 point = hash( n + cell );\n        if (isStripes) {\n           point = mix(hash( n + cell ), vec2(n + cell) * 0.1, moveDir > 0.0 ? 0.0 : 1.0);\n        }\n\t\tvec2 r = cell - f + (0.5+0.5*sin(iTime+6.2831*point));\n\n        if( dot(closestPoint-r,closestPoint-r) > EPSILON ) // skip the same cell\n        minDist = min( minDist, dot( 0.5*(closestPoint+r), normalize(r-closestPoint) ) );\n    }\n\n    return vec4( minDist, closestPoint, id );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/max(iResolution.x,iResolution.y);\n    \n    vec4 voro = voronoi( (10.0 + sin(iTime*0.1)*8.0)*p);\n    float dist = voro.x;\n\n    vec2 gb = 0.5 + 0.5*cos(vec2(voro.w+iTime*0.3, voro.w * sin(iTime * 0.2))*6.2831 );\t\n\t\n    fragColor.rgb = vec3(1.0 - step(dist, 0.1), gb);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}