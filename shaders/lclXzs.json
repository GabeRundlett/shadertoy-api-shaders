{
    "Shader": {
        "info": {
            "date": "1705627353",
            "description": "flat colored raymarched simple shapes  to create a 2d bauhausish look\nclick to randomize",
            "flags": 0,
            "hasliked": 0,
            "id": "lclXzs",
            "likes": 1,
            "name": "bauhau5i5h 4 genuary18 2024",
            "published": 3,
            "tags": [
                "genuary",
                "bauhaus",
                "genuary18"
            ],
            "usePreview": 0,
            "username": "ufffd",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "const vec3 cR = vec3(238, 48, 55)/255.; // red\nconst vec3 cY = vec3(250, 188, 38)/255.; // yellow\nconst vec3 cB = vec3(39, 102, 179)/255.; // blue\nconst vec3 c1 = vec3(245, 230, 196)/245.; // 'white'\nconst vec3 c0 = vec3(24, 25, 20)/255.; // 'black'\nfloat snsin(in float x, in float s) {\n    return SS(0.5,s,nsin(x));\n}\nfloat steps(in float x, in float s) {\n    return floor(x) + SS(0.5,s,fract(x));\n}\nvec4 map(in vec3 p) {\n    vec4 c = vec4(1.,1.,1.,999.);\n    // p*=10.;\n    // return dot(sin(p),cos(p.zxy))-0.2;\n    vec2 lastm = abs(iMouse.wz);\n    float seed = lastm.x*R.x+lastm.y;\n    for (int i=0;i<40;i++) {\n        if (i > int(hash11(seed)*30.)+10) break;\n        float fi = float(i);\n        float size = pxl8(nsin(seed+fi),8.);\n        size /= 10.;\n        vec3 pos = pxl8(hash31(fi+seed),4.) - .45;\n        float wave_speed = 2.*hash11(fi-8.)*hash11(seed);\n        pos.y += .1*sin(T*wave_speed+fi+p.z);\n        // pos.x += pos.z * .5;\n        //d = min(return length(p-vec3(0.,0.,3.)) - .5;\n        float col_pick = hash11(fi+10.);\n        vec3 shape_col = col_pick < .3 ? cR : col_pick > .7 ? cB : cY; // red blue or yellow\n        int shape_pick = 0;\n        if (size > .03)\n            shape_pick = int(hash11(fi-99.)*4.);\n        vec4 shape = vec4(99.);\n        if (shape_pick==0) // sphere\n            shape = vec4(shape_col, length(p-pos) - size);\n        else if (shape_pick==1) // box\n            shape = vec4(shape_col, sdBox(p-pos, vec3(size)));\n        else if (shape_pick==2) // cylinder\n            shape = vec4(shape_col, sdCappedCylinder(p-pos,vec3(0.),vec3(.1,.0,.1),0.) - size);\n        else // cut sphere\n            shape = vec4(shape_col, sdCutSphere(p-pos,size,-size/2.));\n            \n        if (shape.a<c.a)\n            c = shape;\n    }\n    return c;\n}\nvoid mainImage( out vec4 color, in vec2 coord ){\n    color = vec4(c1,0.);\n    vec2 uv = coord/R.xy;\n    vec2 uvc = (coord-R.xy/2.)/R.y;\n    color *= abs(snsin(max(abs(uvc.x),abs(uvc.y))-0.4,0.05)-0.5) < .2 ? 0. : 1.;\n    // uvc *= 1.3;\n    float d = 0.;\n    vec3 p = vec3(uvc,0.);\n    vec3 rd = normalize(vec3(uvc,2.));\n    // vec3 rd = vec3(0.,0.,1.);\n    p.z -= 1.;\n    float rot_amt = steps(T*.25-sin(T*.4-p.y), 0.05)*PI/2.;\n    p.xz *= Rot(rot_amt);\n    rd.xz *= Rot(rot_amt);\n    float g = 0.;\n    for (int i=0;i<80&&d<100.;i++) {\n        vec4 m = map(p);\n        if (m.a < .01) {\n            color = m;\n            break;\n        }\n        m.a *= .9;\n        d += m.a;\n        p += m.a*rd;\n        g += 1./m.a;\n    }\n    color.rgb = mix(c0,color.rgb,1.-SS(800.-length(uvc)*100.,100.,g));\n    color.a = 1.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution\n#define T iTime\n#define SS(a,b,c) smoothstep(a-b,a+b,c)\n#define nsin(x) (sin(x)*0.5+0.5)\n#define PI 3.1429\nmat2 Rot(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, s, -s, c);\n}\nfloat pxl8(in float x, in float n) {\n    return floor(x*n)/n;\n}\nvec3 pxl8(in vec3 x, in float n) {\n    return vec3(\n        pxl8(x.r,n),\n        pxl8(x.g,n),\n        pxl8(x.b,n)\n    );\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdCappedCylinder( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3  ba = b - a;\n  vec3  pa = p - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba;\n}\nfloat sdCutSphere( vec3 p, float r, float h )\n{\n  // sampling independent computations (only depend on shape)\n  float w = sqrt(r*r-h*h);\n\n  // sampling dependant computations\n  vec2 q = vec2( length(p.xz), p.y );\n  float s = max( (h-r)*q.x*q.x+w*w*(h+r-2.0*q.y), h*q.x-w*q.y );\n  return (s<0.0) ? length(q)-r :\n         (q.x<w) ? h - q.y     :\n                   length(q-vec2(w,h));\n}\n\n// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}