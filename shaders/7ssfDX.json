{
    "Shader": {
        "info": {
            "date": "1645872233",
            "description": "tried soft shadows refering to iq https://iquilezles.org/articles/rmshadows/rmshadows.htm\nbut with some problem with the shadow line.....",
            "flags": 0,
            "hasliked": 0,
            "id": "7ssfDX",
            "likes": 3,
            "name": "odos|reflect&refract",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "ErinZ",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "#define TMIN 0.01\n#define TMAX 200.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 3\n#define PI 3.1415926\n\n#define S(v,r) smoothstep( r, r+ 3./iResolution.y, v )\nfloat logo(vec2 uv);\n\n//========SDFunctions========\nfloat sdSphere(vec3 p, vec3 o, float r){\n    return length(p-o)-r;\n}\nfloat sdCapsule(vec3 p,vec3 a, vec3 b,float r){\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    float t = dot(ab, ap)/dot(ab,ab);\n    t = clamp(t,0.,1.);\n    vec3 c = a +t*ab;\n    return length(p-c)-r;\n}\nfloat sdTorus(vec3 p,vec3 o, float r1,float r2){\n    p -= o;\n    return length( vec2(length(vec2(p.x,p.z))-r1,p.y) ) - r2;\n}\nfloat sdBox(vec3 p, vec3 o, vec3 s){\n    p-=o;\n    return length(max(abs(p)-s,0.)) -.05;\n}\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot(ab, ap) / dot(ab, ab);\n    vec3 c = a + t*ab;\n\n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i-.05;\n}\n//===============TRANSFORM=================\nmat2 rotate(float a){\nreturn mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\n\n//===============RENDER===================\n//Scene\nfloat f(vec3 p){\n    float ds = sdSphere(p,vec3(0,1,0),1.);//sdf sphere\n    float dc = sdCapsule(p,vec3(1,.5,-1),vec3(3.5,.5,0),.5);//sdf capsule\n    float dt = sdTorus(p,vec3(-2,.5,1),1.,.5);//sdf torus\n    float db = sdBox(p,vec3(1,1,2),vec3(1,2,1));//sdf box\n    float dcy = sdCylinder(p,vec3(1.5,1.7,-1),vec3(4,.5,2),.5);//sdf cylinder\n    float d = min(ds,dc);\n    d = min(d,dt);\n    d = min(d,db);\n    d = min(d,dcy);\n    return d;\n}\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n    float t = TMIN;\n    for(int i = 0; i < RAYMARCH_TIME ; i++) {\n        vec3 p = ro + t * rd;\n        float d = f(p);\n        t += d;\n        if(d < PRECISION || t > TMAX)\n            break;\n    }\n    return t;\n}\nfloat softShadow(in vec3 ro, in vec3 rd,float k){\n    float t = .1;\n    float res = 1.;\n    float ld = 1e20;\n    for(int i = 0; i < RAYMARCH_TIME ; i++) {\n        vec3 p = ro + t * rd;\n        float d = f(p);\n        //res = min(res, k*d/t);\n        float y = (i==0) ? 0.0 : d*d/(2.0*ld); \n        float l = sqrt(d*d-y*y);\n        res = min(res, k*l/max(0.0,t-y));\n        ld = d;\n        t += d;\n        if(d < PRECISION || t > 30.)\n            break;\n    }\n    return clamp(res,0.,1.);\n}\nfloat calAO( in vec3 p, in vec3 n){\n    float occ = 0.;\n    float sca = 1.;\n    for(int i = 0;i<5;i++){\n        float h = 0.001 + 0.4*float(i)/4.0;\n        float d = f(p + h*n);\n        occ += (h-d)*sca;\n        sca *= 0.6;\n        }\n    return clamp(1.-1.5*occ,0.,1.);\n}\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * f(p + k.xyy * h) +\n        k.yyx * f(p + k.yyx * h) +\n        k.yxy * f(p + k.yxy * h) +\n        k.xxx * f(p + k.xxx * h));\n}\n\nmat3 setCamera(in vec3 camtar, in vec3 campos, in float camro){\n    vec3 z = normalize(camtar-campos);\n    vec3 cp = vec3(sin(camro),cos(camro),0.);\n    vec3 x = normalize(cross(cp,z));\n    vec3 y = cross(z,x);\n    return mat3(x,y,z);\n}\nvec3 render(vec2 uv){\n    vec3 lightPos = vec3(-5., 5.,-5);//light\n\n    //SET Camera\n    vec3 cam_tar = vec3(1,0,2);//cam target\n    vec3 cam_pos = cam_tar + vec3(10.*cos(iTime*.5), 10., 10.*sin(iTime*.5));//cam position\n\n    vec3 rd = vec3(uv,3.); //decide view width\n    if(iMouse.x!=0. || iMouse.y!=0. ){\n        float angle_x = -(iMouse.x /iResolution.x-0.5)  *0.5*PI;\n        float angle_y = (iMouse.y /iResolution.y-0.5)  *0.5*PI;\n        rd.yz *= rotate(angle_y);\n        rd.zx *= rotate(angle_x);}\n    rd = normalize(setCamera(cam_tar,cam_pos,0.)*rd);//viewing frustum\n\n    float t = rayMarch(cam_pos,rd);//raymarching\n    \n    vec3 color = texture(iChannel0,rd).rgb;//background\n    if(t > TMAX) return color; \n    \n    vec3 p = cam_pos + t*rd;\n    vec3 n = calcNormal(p);\n    vec3 l = normalize(lightPos-p);//lightDir\n    vec3 h = normalize(l-rd);//\n\n    vec3 diffusecol = vec3(1.);//diffuse color\n    vec3 specol = vec3(1.);//specular color\n    vec3 cmrfl = 1.5*vec3(.5)*texture(iChannel0,reflect(rd,n)).rgb;//cubemap reflection\n    vec3 cmrfr = texture(iChannel0,refract(rd,n,.8)).rgb;//cubemap refraction\n    \n\n    float dif = clamp(dot(l,n),0.,1.);//diffuse    \n    float spe = pow(clamp(dot(h,n),0.,1.),50.);//specular\n\n    float shadow = softShadow(p,l,8.);//soft shadow\n    float occ = calAO(p,n);//AO\n    float fresnel = pow(clamp(1. - dot(n,-rd),0.,1.),5.);\n\n    if(floor(mod(iTime*.5,2.))==0.){\n        color = cmrfl + .2*dif*diffusecol + spe*specol;//metal\n        color *= clamp(shadow+.4,0.,1.)*occ;\n        color += fresnel*.4;}\n        else{\n        color = cmrfr + .1*dif*diffusecol + smoothstep(.7,1.,spe)*specol;//glass\n        color *= clamp(shadow+.8,0.,1.)*occ;\n        color += fresnel*.8;}\n    // fog\n    //color *= exp( -0.0001*t*t*t );\n    \n    return color;\n}\nvec2 getuv(vec2 coord){\n    return (2.*coord-iResolution.xy)/iResolution.y;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 color = vec3(0.);\n    #if AA>1\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = getuv(fragCoord + offset);\n    #else\n            uv = getuv(fragCoord);\n    #endif\n            color += render(uv);\n    #if AA>1\n        }\n    }\n    color /= float(AA*AA);\n    #endif\n\n \n    color = mix(color,vec3(1),logo(uv));\n    fragColor = vec4(color,1.0);\n}\n\n \nfloat logo(vec2 uv){\nfloat n = 0.;\nn += S(.05,abs(length(uv-vec2(-1.23,0))-.12));\nn *= 1.-S(-1.25,uv.x);\nn += S(.17,abs(uv.y))*S(.05,abs(uv.x+1.29));\nn += S(.05,abs(length(uv-vec2(-1.5,0))-.12));\nn += S(.05,abs(length(uv-vec2(-0.9,0))-.12));\nn += (1.+S(-.6,uv.x)-S(.05,uv.y))*S(.05,abs(length(uv-vec2(-0.6,.03))-.09));\nn += (1.-S(-.6,uv.x)+S(-.05,uv.y))*S(.05,abs(length(uv-vec2(-0.6,-.04))-.09));\nreturn n;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}