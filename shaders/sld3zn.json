{
    "Shader": {
        "info": {
            "date": "1635632184",
            "description": "My shader from the 2021 Inércia Shader Royale, I got eliminated just a few seconds before I finished the blue twisty and voronoi effect, but I finished it afterwards and include it here. \n\nVOD: [url]https://www.youtube.com/watch?v=6xvZTxv6QYc[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "sld3zn",
            "likes": 31,
            "name": "Tater @ Inércia Shader Royale",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "voronoi",
                "terrain",
                "demoscene",
                "showdown",
                "livecode",
                "inercia",
                "royale"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 592
        },
        "renderpass": [
            {
                "code": "#define STEPS 128.0\n#define MDIST 128.0\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define sat(a) clamp(a,0.,1.)\n#define pmod(p,x) (mod(p,x)-0.5*(x))\n#define fGlobalTime iTime\n#define fft texelFetch( iChannel0, ivec2(10,0), 0 ).x*20.0\nfloat psin(float x, float b){\n  float xx = floor(b*x)/b;\n  return sin(xx)+(sin(floor(b*x+1.0)/b)-sin(xx))*mod(b*x,1.0);\n}\n//Voronoi Found in https://www.shadertoy.com/view/3ddGzn\n//Adapted it to 3d and fixed some of the artifacts\nvec2 vor(vec2 m, vec3 p, vec3 s){\n  float scl = 0.2;\n  vec3 c = round(scl*p+s);\n  c+=sin(fract(72985.*sin(dot(c,c.yzx+33.3)))*6.+fGlobalTime*3.)*0.3;\n  c*=(1./scl);\n  float v = length(c - p);\n  return v<m.x?vec2(v,m.x):v<m.y?vec2(m.x,v):m;\n}\n//I failed to understand Javad Taba's \n//Artical on rope fractals so this is my shitty\n//approximation\nvec3 spiral(vec3 p, float R){\n  p.xz*=rot(p.y/R);\n  vec2 s = sign(p.xz);\n  p.xz = abs(p.xz)-R*0.5;\n  p.xz*=rot(fGlobalTime);\n  float poy = p.y;\n  p.y = 0.;\n  p.yz*=rot(mix(0.,pi/4.,1./(R*0.5+1.5)))*-sign(s.x*s.y);\n  p.y = poy;\n  return p;\n}\nfloat wavey = 0.;\nvec2 map(vec3 p){\n\n  float t = mod(fGlobalTime,150.);\n  vec3 po2 = p;\n  p.z+=t*30.;\n  p.xz*=rot(0.4);\n  vec3 po = p;\n  vec2 a = vec2(1);\n  vec2 b = vec2(2);\n  vec2 c = vec2(3);\n  \n  //TRIANGLE PLANE\n  p.xz*=0.9;\n  p.y+=psin(p.x*0.1,2.)*4.*sin(t+p.x*0.01);\n  p.xz*=rot((2.*pi)/3.);\n  p.y+=psin(p.x,0.2)*3.*sin(t*2.+p.x*0.05);\n  p.xz*=rot((2.*pi)/3.);\n  p.y+=psin(p.x,0.2)*3.*sin(t*2.+p.x*0.04);\n  p.xz*=rot((2.*pi)/3.);\n  \n  //HEX LATTICE\n  vec3 p2 = p;\n  p2.y+=fft*0.01;\n  float m = 5.;\n  p.x = pmod(p.x-m*0.5,m);\n  b.x = length(p.xy)-0.2;\n  p = p2;\n  p.xz*=rot((2.*pi)/3.);\n  p.x = pmod(p.x-m*0.5,m);\n  b.x = min(b.x,length(p.xy)-0.2);\n  p = p2;\n  p.xz*=rot((2.*pi)/3.);\n  p.xz*=rot((2.*pi)/3.);\n  p.x = pmod(p.x-m*0.5,m);\n  b.x = min(b.x,length(p.xy)-0.2);\n \n  a.x = p.y+1.;\n  \n  a = (a.x<b.x)?a:b;\n  \n  //BIAS THE LATTICE\n  p = po;\n  a.x*=0.7;\n  c.x = p.y;\n  a.x = mix(c.x,a.x+0.1,1.15); //this was a lucky find\n  \n  //VORONOI\n  vec3 r = po2;\n  \n  r.y-=t*0.5;\n  r.xy*=rot(pi/4.);\n  vec2 s = vec2(0.5,-0.5);\n  vec2 vd =\n  vor(vor(vor(vor(vor(vor(vor(vor(vec2(5),\n  r,s.xxx) ,r,s.xxy) ,r,s.xyx) ,r,s.xyy),\n  r,s.yxx) ,r,s.yxy) ,r,s.yyx) ,r,s.yyy);\n  float h = vd.y-vd.x;\n  \n  //WAVES\n  p = po2;\n  float wav = 0.;\n  p.xz*=0.5;\n  wav+=sin(p.z*0.8+t)*0.1+sin(p.x*0.8+t)*0.2;\n  wav+=sin(p.z*0.3-t*2.)*0.2+sin(p.x*0.3-t*2.)*0.2;\n  wav+=sin(length(p.xz)*0.3+t*3.0);\n  p.y+=wav*5.0;\n  b.x = p.y;\n  \n  float v = mix(b.x,0.01,sat(1.-h));\n  b.x = max(b.x,v+0.1);\n  \n  //TWIST\n  p = po2;\n  p = spiral(p,25.+fft*0.3);\n  p = spiral(p,10.);\n  p = spiral(p,4.);\n  p = spiral(p,1.5);\n  \n  c.x = length(p.xz)-0.5;\n  c.x*=0.8;\n  b = (b.x<c.x)?b:c;\n  \n  \n  a.x = mix(a.x,b.x*0.8,wavey);\n  a.y = mix(a.y,b.y,wavey);\n  \n  return a;\n}\n\n//Anti-unroll normals (not live coded) \n#define ZERO (min(iFrame,0))\nvec3 norm(vec3 p){\n    \n   \n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*0.001).x;\n    }\n    return normalize(n);\n \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n  vec3 col = vec3(0.2);\n  float t= fGlobalTime+1.5;\n  wavey = smoothstep(-0.25,0.3,sin(t*0.4));\n  //wavey = 1.;\n  uv-=0.2*(1.0-wavey);\n  \n  uv.xy*=rot((1.0-wavey)*sin(t*1.5+pi/2.)*0.05);\n\n  vec3 ro = vec3(0,3,-5)*5.5;\n  ro.zy+=(sin(t*1.5)*8.+3.);\n  \n  vec3 ro2 = vec3(0,5,7)*10.;\n  ro2.xz*=rot(t*0.3);\n  ro = mix(ro,ro2,wavey);\n  \n  vec3 lk = vec3(0,0.+wavey*6.,30.*(1.0-wavey));\n  vec3 f = normalize(lk-ro);\n  vec3 r = normalize(cross(vec3(0,1,0),f));\n  vec3 rd = normalize(f*mix(0.3,0.7,wavey)+uv.x*r+uv.y*cross(f,r));\n  \n  vec3 p = ro;\n  vec2 d= vec2(0);\n  float dO = 0.;\n  float shad = 0.;\n  bool hit = false;\n  for(float i = 0.; i<STEPS; i++){\n    p = ro+rd*dO;\n    d = map(p);\n    dO+=d.x;\n    if(abs(d.x)<0.005||i==STEPS-1.){\n      shad = i/STEPS;\n      hit = true;\n      break;\n    }\n    if(dO>MDIST){\n      dO = MDIST;\n      break;\n    }\n  }\n  vec3 bg = mix(vec3(0.5,0.4,0.85),vec3(0.45,0.45,0.9),clamp(rd.y*5.,-1.,1.));\n  if(hit){\n    vec3 n = norm(p);\n    vec3 ld = normalize(vec3(20,45,0)-p);\n    vec3 rr = reflect(rd,n);\n    float diff = max(0.,dot(n,ld));\n    float amb = dot(n,ld)*0.5+0.5;\n    float spec = pow(max(0.,dot(rr,ld)),40.);\n    vec3 al = vec3(0.2,0.25,0.75);\n    #define AO(a,n,p) smoothstep(-a,a,map(p+n*a).x)\n    float ao = AO(0.3,n,p)*AO(0.5,n,p)*AO(0.9,n,p);\n    float sss = 0.;\n    for(float i = 0.; i<20.; i++){\n      float dist = i*0.09;\n      sss+=smoothstep(0.,1.,map(p+ld*dist).x/dist)*0.033; \n    }\n    \n    \n    if(d.y==2.0) al*=2.;\n    col = vec3(1.0-shad);\n    col = al*mix(vec3(0.3,0,0.3),vec3(1),mix(diff,amb,0.25));\n    col+=spec*0.3*bg;\n    col+=sss*0.3;\n    col*=mix(ao,1.0,0.3);\n    col = pow(col,vec3(0.7));\n    \n    //WAVEY COLOR\n    sss = 0.1;\n    float ssmag = 1.;\n    ld = normalize(vec3(0,120,0)-p);\n    if(d.y==3.0){ld = normalize(vec3(p.x,0,p.z));\n    ssmag = 1.5;\n    sss = 0.2;\n    }\n    spec = pow(max(.0,dot(rr,ld)),20.0);\n    vec3 wcol = vec3(0);\n    al = vec3(0.2,0.6,1);\n    //sss by nusan\n    for(float i = 0.; i<20.; i++){\n      float dist = i*0.3;\n      sss+=smoothstep(0.,1.,map(p+ld*dist).x/dist)*0.06*ssmag; \n    }\n    wcol = mix((1.0-shad),1.,0.5)*vec3(sss)*al;\n    wcol+=spec*0.3;\n    col = mix(col,wcol,wavey);\n  }\n  col = mix(col,bg,pow(dO/MDIST,2.5));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 20,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}