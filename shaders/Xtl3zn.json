{
    "Shader": {
        "info": {
            "date": "1417996031",
            "description": "Little shader art.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xtl3zn",
            "likes": 13,
            "name": "Spacebubbles",
            "published": 3,
            "tags": [
                "art"
            ],
            "usePreview": 0,
            "username": "srtuss",
            "viewed": 1763
        },
        "renderpass": [
            {
                "code": "// srtuss, 2014\n\nfloat strs(vec3 p)\n{\n\tvec3 pos = p;\n\tp += vec3(1.35, 1.54, 1.23);\n\tp *= .3;\n\tfor(int i = 0; i < 18; i++)\n    {\n\t\tp.xyz = abs(p.xyz);\n\t\tp = p / dot(p,p);\n\t\tp = p * 1. - vec3(.9);\n\t}\n\treturn pow(length(p),1.5)*.04;\n}\n\nfloat hash(float p)\n{\n    return fract(sin(p * 11.111111) * 91962.592632);\n}\n\nfloat hash(vec2 p)\n{\n    return fract(sin(p.x + p.y * 3.3333333) * 91962.592632);\n}\n\nfloat nse(float p)\n{\n    float fl = floor(p);\n    p = fract(p);\n    p = p * p * (3.0 - 2.0 * p);\n    return mix(hash(fl), hash(fl + 1.0), p);\n}\n\nfloat nse(vec2 p)\n{\n    vec2 fl = floor(p);\n    p = fract(p);\n    p = p * p * (3.0 - 2.0 * p);\n    \n    return mix(\n        mix(hash(fl), hash(fl + vec2(1.0, 0.0)), p.x),\n       \tmix(hash(fl + vec2(0.0, 1.0)), hash(fl + vec2(1.0, 1.0)), p.x),\n           p.y);\n}\n\nfloat fbm(vec2 p)\n{\n    return nse(p * 0.5) * 0.4 + nse(p) * 0.5 + nse(p * 2.0 - 3.3333) * 0.25 + nse(p * 4.01 + 3.3333) * 0.125;\n}\n\nfloat fbm2(vec2 p)\n{\n    return nse(p) * 0.5 + nse(p * 2.0 - 3.3333) * 0.25 + nse(p * 4.01 + 3.3333) * 0.125 + nse(p * 10.01) * 0.09;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    //uv *= 1.5 - exp(iTime * -0.01) * 0.5;\n    \n    float sd = iTime;//fragCoord.x * 7.0 + fragCoord.y * 1.11111;\n    uv += (fract(vec2(cos(sd), sin(sd)) * 192925.1972) - 0.5) * 0.01 * exp(iTime * -0.04);\n    \n    float v = 0.0;\n    \n    float sf = strs(vec3(uv * 0.1, 0.0));\n    \n    vec2 p = vec2(uv.yx + sf * 0.13);\n    vec2 c = vec2(0.1, 0.7);\n    float fo = 20.0, it = 1.0 * exp(iTime * -0.01);\n    for(int i = 0; i < 8; i++)\n    {\n    \tp = vec2(p.x * p.x - p.y * p.y, 2.0 * p.x * p.y) + c;\n        //p += nse(p * 20.0) * 0.02;\n        v += exp(abs(dot(p, p) - iTime * 0.03) * -fo) * it;\n        it *= 0.7;\n        fo *= 0.8;\n    }\n    \n    float v2 = /*v * 0.8 +*/ sf + abs(fbm(uv * 2.1 + fbm2(uv * 10.0) * 0.6) - 0.5);\n    \n    //v *= 2.0;\n    \n    vec3 col;\n    \n    //col = pow(vec3(clamp(v2 - v * 0.5, 0.0, 1.0) + length(uv) * 0.15), vec3(1.0, 0.8, 0.5) * 4.5) * 3.0;\n    //col += pow(vec3(v * 1.0), vec3(0.5, 0.5, 0.7) * 6.5) * 4.0;\n    \n    float lit = pow(nse(iTime * 10.0), 3.0) * nse(uv * 4.0 - iTime) * (0.5 + v2 * 1.0) * exp(iTime * -0.04) + 0.5;\n    \n    vec3 cp = mix(vec3(1.0, 0.8, 0.5), vec3(0.3, 0.6, 0.7), smoothstep(0.0, 1.0, v2 + v));\n    col = pow(vec3(v2 + v * 0.4) + exp(length(uv) * -2.0) * lit, cp * 7.0) * 4.0;\n    \n    \n    //1.0 - fbm(uv * 2.0) * 0.5\n    \n    \n    col = pow(col, vec3(1.0 / 2.2));\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}