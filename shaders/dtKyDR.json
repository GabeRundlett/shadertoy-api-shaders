{
    "Shader": {
        "info": {
            "date": "1700121368",
            "description": "hexagon blur fx",
            "flags": 32,
            "hasliked": 0,
            "id": "dtKyDR",
            "likes": 4,
            "name": "hexagon blur fx",
            "published": 3,
            "tags": [
                "blur"
            ],
            "usePreview": 0,
            "username": "zyc",
            "viewed": 185
        },
        "renderpass": [
            {
                "code": "\n\n#define PI 3.1415926\n#define GOLDEN_ANGLE 2.39996323\n\n#define u_Angle 0.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float theta = u_Angle * PI / 180.0;\n    vec2 rect = vec2(min(720.0, 720.0 * iResolution.x / iResolution.y), min(720.0, 720.0 * iResolution.y / iResolution.x));\n    vec2 dir = vec2(cos(theta), sin(theta)) / rect;\n    vec4 color = dirBlur(iChannel0, uv, dir, progress);\n    fragColor = color;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define progress (fract(0.4*iTime))\n#define u_Strength 0.32\n\nfloat customStep(float edge0, float edge1, float value) {\n    return clamp((value - edge0) / (edge1 - edge0), 0.0, 1.0);\n}\n\nfloat getScale(float p) {\n    return customStep(1.0, 0.0, p);\n}\n\nvec4 gaussianBlur(sampler2D i_InputTex, vec2 i_Uv, vec2 i_Dir, float i_Strength)\n{\n    float half_gaussian_weight[9];\n    half_gaussian_weight[0]= 0.20;//0.137401;\n    half_gaussian_weight[1]= 0.19;//0.125794;\n    half_gaussian_weight[2]= 0.17;//0.106483;\n    half_gaussian_weight[3]= 0.15;//0.080657;\n    half_gaussian_weight[4]= 0.13;//0.054670;\n    half_gaussian_weight[5]= 0.11;//0.033159;\n    half_gaussian_weight[6]= 0.08;//0.017997;\n    half_gaussian_weight[7]= 0.05;//0.008741;\n    half_gaussian_weight[8]= 0.02;//0.003799;\n    vec4 sum            = vec4(0.0);\n    vec4 result         = vec4(0.0);\n    vec2 unit_uv        = i_Dir * i_Strength;\n    vec4 curColor       = texture(i_InputTex, i_Uv);\n    vec4 centerPixel    = curColor*half_gaussian_weight[0];\n    float sum_weight    = half_gaussian_weight[0];\n    for(int i=1;i<=8;i++)\n    {\n        vec2 curRightCoordinate = i_Uv+float(i)*unit_uv;\n        vec2 curLeftCoordinate  = i_Uv+float(-i)*unit_uv;\n        vec4 rightColor = texture(i_InputTex, curRightCoordinate);\n        vec4 leftColor = texture(i_InputTex, curLeftCoordinate);\n        sum+=rightColor*half_gaussian_weight[i];\n        sum+=leftColor*half_gaussian_weight[i];\n        sum_weight+=half_gaussian_weight[i]*2.0;\n    }\n    result = (sum+centerPixel)/sum_weight; \n    return result;\n}\n\n\nvec4 dirBlur(sampler2D inputTexture, vec2 uv, vec2 dir, float p)\n{\n    float weight = 1.0;\n    float u_Size = 0.41;\n    float u_Bright = 4.8;\n    \n    float u_SizeScale = getScale(p);\n    vec4 resColor = texture(inputTexture, uv);\n    float sumWeight = 1.0;\n    vec4 maxColor = resColor;\n    for (int i = 1; i <= 16; ++i)\n    {\n        vec2 tmpUV = uv + dir * float(i) * u_Size * u_SizeScale;\n        vec4 a = texture(inputTexture, tmpUV);\n        tmpUV = uv - dir * float(i) * u_Size * u_SizeScale;\n        vec4 b = texture(inputTexture, tmpUV);\n        resColor += a + b;\n        vec4 c = max(a, b);\n        maxColor = max(c, maxColor);\n        sumWeight += 2.0;\n    }\n    \n    resColor /= sumWeight;\n    vec4 color = mix(resColor, maxColor, clamp(resColor * u_Bright, 0.0, 1.0));\n    resColor.rgb = color.rgb;\n    return resColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define u_Angle 0.0\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float theta = radians(u_Angle);\n    float u_SizeScale = getScale(progress);\n    \n    vec2 rect = vec2(min(720.0, 720.0 * iResolution.x / iResolution.y), min(720.0, 720.0 * iResolution.y / iResolution.x));\n    vec2 dir = vec2(cos(theta), sin(theta)) / rect.xy;\n    vec4 color = gaussianBlur(iChannel0, uv, dir, u_Strength * u_SizeScale);\n    fragColor = color;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define u_Angle 90.0\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n     float theta = radians(u_Angle);\n    float u_SizeScale = getScale(progress);\n    \n    vec2 rect = vec2(min(720.0, 720.0 * iResolution.x / iResolution.y), min(720.0, 720.0 * iResolution.y / iResolution.x));\n    vec2 dir = vec2(cos(theta), sin(theta)) / rect.xy;\n    vec4 color = gaussianBlur(iChannel0, uv, dir, u_Strength * u_SizeScale);\n    fragColor = color;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.1415926\n#define GOLDEN_ANGLE 2.39996323\n\n#define u_Angle 60.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n     float theta = radians(u_Angle);\n    vec2 rect = vec2(min(720.0, 720.0 * iResolution.x / iResolution.y), min(720.0, 720.0 * iResolution.y / iResolution.x));\n    vec2 dir = vec2(cos(theta), sin(theta)) / rect;\n    vec4 color = dirBlur(iChannel0, uv, dir, progress);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.1415926\n#define GOLDEN_ANGLE 2.39996323\n\n#define u_Angle -60.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float theta = radians(u_Angle);\n    vec2 rect = vec2(min(720.0, 720.0 * iResolution.x / iResolution.y), min(720.0, 720.0 * iResolution.y / iResolution.x));\n    vec2 dir = vec2(cos(theta), sin(theta)) / rect;\n    vec4 color = dirBlur(iChannel0, uv, dir, progress);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}