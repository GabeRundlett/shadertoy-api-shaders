{
    "Shader": {
        "info": {
            "date": "1569478543",
            "description": "Hexagonal variant of BV Pixel Noise https://www.shadertoy.com/view/tljXWV",
            "flags": 32,
            "hasliked": 0,
            "id": "td3GDs",
            "likes": 20,
            "name": "BV Hex Noise",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "vlams1",
            "viewed": 1947
        },
        "renderpass": [
            {
                "code": "//GLOW by Vlams\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 main = texture(iChannel0, uv).rgb;\n    vec3 glow1 = textureLod(iChannel0, uv, 5.0).rgb * 0.5;\n    vec3 glow2 = pow(textureLod(iChannel0, uv, 3.0).rgb, vec3(2.0) );\n    vec3 glow3 = pow(textureLod(iChannel0, uv, 5.0).rgb, vec3(4.0) );\n    vec3 glow4 = textureLod(iChannel0, uv, 6.0).rgb * 0.5;\n    \n    fragColor = vec4(main + glow1 + glow2 + glow3 + glow4,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//BV Noise by bela333: https://www.shadertoy.com/view/tt2SWV\n\n//Hash function by David Hoskins: https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p) {\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define CYCLE 1.\n#define RESOLUTION 32.\n#define THRESHOLD .4\n\nfloat complicatedNoise(float t, vec2 uv) {\n    float f1 = float(hash12(uv+floor(t)*10.) < THRESHOLD);\n    float f2 = float(hash12(uv+floor(t+1.)*10.) < THRESHOLD);\n    float f3 = float(hash12(uv+floor(t+2.)*10.) < THRESHOLD);\n    return ((f1+f2)*.5+f3)*.5;\n}\n\nfloat ease(float t) {\n    return t<.5 ? 8.*t*t*t*t : 1.-8.*(--t)*t*t*t;\n}\n\nfloat getColor(vec2 uv, float spd) {\n    float tP = iTime/CYCLE*spd+hash12(uv*10.);\n    float tN = (iTime/CYCLE*spd+1.)+hash12(uv*10.);\n    \n    float prev = complicatedNoise(tP, uv);\n    float next = complicatedNoise(tN, uv);\n    return mix(prev, next, ease(fract(tP)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    uv *= 12.;\n    \n\tvec3 col;\n    \n    vec2 s = vec2(1.73, 1.);\n    vec2 h = s*.5;\n    \n    vec2 uv1 = mod(uv,s)-h;\n    vec2 uv2 = mod(uv-h,s)-h;\n    \n    vec2 uvh;\n    uvh = length(uv1) < length(uv2) ? uv1 : uv2;\n    \n    vec2 id = uv - uvh;\n    \n    float l1 = getColor(round(id),.5);\n    float l2 = getColor(round(id*2.)+mod(floor(degrees(atan(uvh.x,uvh.y))/60.+.5),6.),1.);\n    \n    col = ((l1 * .8 + .3) * (l2 * .5 + .5)) * vec3(0.4,0.1,0.8);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}