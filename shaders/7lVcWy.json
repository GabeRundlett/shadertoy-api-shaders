{
    "Shader": {
        "info": {
            "date": "1662158298",
            "description": "Fractal equation taken from here:\nhttps://jbaker.graphics/writings/DEC.html\n\nIt's just a cross-section, with the colors taken from an old shader (very messy!)",
            "flags": 0,
            "hasliked": 0,
            "id": "7lVcWy",
            "likes": 48,
            "name": " A Pollo Onion",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n// RayMarching code stolen from TheArtOfCode\n\n// Stolen from BlackleMori\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    \n    float a = -0.25 * iTime;\n    float zm = (0.5 + 0.5 * thc(2., - 0.5 * iTime));\n    float r = 3. + zm;\n    vec3 ro = vec3(r * cos(a), 1. + zm, r * sin(a));\n   // ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat GetDist( vec3 p0 ){\n    p0.y += 0.15;\n    float sd = abs(p0.y) - 0.01;\n    sd -= 0.3;// * (0.5 + 0.5 * thc(4., length(p0.xz) - 0.5 * iTime));\n    sd = max(sd, length(p0.xz) - 1.34);\n   // p0.xz += 0.1 * thc(2., 5. * p0.y);\n    p0 *= 0.5;\n    vec4 p = vec4(p0, 1.);\n      \n    //p.xyz = erot(p.xyz, normalize(p.yzx), 0.5 * iTime);\n    p.y += 0.05 * iTime;\n    for(int i = 0; i < 8; i++){\n      p.xyz = mod(p.xyz-1., 2.)-1.;\n     // p.xyz *= 1. + 0.12 * cos(p.zxy * 8.);\n     // p.xyz *= 1. +  0.15 * cos(length(p.xyz) * 10.);\n     // p.y += .05 * cos(6. * length(p.xz) + iTime);// cos(iTime) * 0.5;\n      \n      // float r1 = 0.5;\n      // float r2 = 0.1;\n      // float d1 = length(p.xz) - r1;\n      // float d2 = length(vec2(d1, p.y)) - r2;     \n      // p.y = d2;//mlength(p.xyz);\n     \n      //This one looks really cool\n      //p.y = 0.5 + 0.4 * cos(0.25 * iTime - pi * p.y);\n      p*=(1.34/dot(p.xyz, p.xyz));\n    }\n    p/=p.w;\n    return max(sd, abs(p.y)*0.5 - 0.00);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    float zm = 5. - 1. * (0.5 + 0.5 * thc(1., -0.5 * iTime));\n    vec3 rd = GetRayDir(uv, ro, vec3(0), zm);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n   \n    float IOR = 1.2;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        vec3 pIn = p - 20. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit);\n        \n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n       \n        float fres = pow(1. + dot(rd, n), 5.);\n        \n        // Change me\n        float c = 4.; // [0.6,6] is an okay range (<1 is like fresnel)\n        float I = 3.; // anything above 0. lower numbers more intense\n        \n        vec3 n1 = 0.8 * (abs(r) - abs(n));\n        float mx2 = exp(-5. * length(abs(r)-abs(n1)));\n\n        vec3 r2 = c * (abs(r)-abs(n));\n        vec3 n2 = c * (abs(r2)-abs(n));\n        \n        float mx = exp(-I * length(abs(r2)-abs(n2)));\n \n        float cl = 0.5 + 0.25 * dif + max(0.5 * fres, max(mx,mx2));\n\n        vec3 e = vec3(0.5);\n        vec3 col2 = pal(1. + p.y - 0.1 * iTime + 4. * length(p) - p.y * 0.05  + 0.75 * mx, e, e, e, 0.5 * vec3(0,1,2)/3.);\n        vec3 col3 = pal(1. + p.y - 0.1 * iTime + 4. * length(p) - p.y * 0.05  + 1.5 * mx2, e, e, e, 0.5 * vec3(0,1,2)/3.);\n        \n        float c1 = texture(iChannel0, 0.05 * iTime + 3. * p.xy).r;\n        float c2 = texture(iChannel0, 0.05 * iTime + 3. * p.yz).r;\n        float c3 = texture(iChannel0, 0.05 * iTime + 3. * p.zx).r;\n        \n        vec3 n3 = abs(n);\n        float c4 = n3.z * c1 + n3.x * c2 + n3.y * c3;\n        \n        // add (dif + reflections) * base color\n        col = cl * col2;\n\n        // mix to second color based on ray distance inside object\n        float mx3 = exp(-0.333 * dIn);\n        //col = cl * col3;\n        //col = mix(col, col3, mx3);\n        // col= cl * col3;\n        col *= 2. * col3;\n        \n        // add vertical shading (\"light source\" from above)\n        col += 0.3 * n.y;\n        col *= 0.8 + 0.5 * c4;\n        \n        // more color + reflections to match background \n        col += 0.075 * (exp(vec3(abs(rd.x),rd.y,abs(rd.z))) + exp(-r) + 0.1 * exp(r2) - 1.05);\n    } else {    \n        col = 0.65 * exp(vec3(abs(rd.x),rd.y,abs(rd.z)));\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// Stolen from iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}\n    \n    \n    ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}