{
    "Shader": {
        "info": {
            "date": "1533589845",
            "description": "Mandelbrot fractal zoom, with precision issues.",
            "flags": 0,
            "hasliked": 0,
            "id": "ll3yRf",
            "likes": 4,
            "name": "Mandelbrot Fractal Zoom",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "zoomer"
            ],
            "usePreview": 0,
            "username": "voidstar69",
            "viewed": 754
        },
        "renderpass": [
            {
                "code": "const int maxIterations = 1000;\nconst vec2 centre = vec2(-0.16428,1.0392); // top\n//const vec2 centre = vec2(-1.81,0.0); // left side\n//const vec2 centre = vec2(-1.999999999138270118758274,1.314895443507637575136247e-14); // zoom too deep for floats!\n\nint fractalDepth = maxIterations;\n\nint mandelbrot(in vec2 C)\n{\n    // Z = Z^2 + C\n    \n    float x = C.x;\n    float y = C.y;\n\tfor(int i = 0; i < maxIterations; i++)\n    {\n        // iterate point in mandelbrot plane\n        //xy.xy = xy.xy * xy.xy;\n        \n        //Z = vec2(Z.x*Z.x-Z.y*Z.y+C.x, 2*Z.x*Z.y+C.y);\n        \n        float xTemp = x*x-y*y+C.x;\n        y = 2.0*x*y+C.y;\n        x = xTemp;\n        \n/*        \n    xtemp = x*x - y*y + C.x\n    y = 2*x*y + C.y\n    x = xtemp\n    iteration = iteration + 1\n*/\n        \n        if(i > fractalDepth)\n            return maxIterations;\n        \n        // outside circle?\n        //if(dot(xy,xy) > 4.0)\n        if(x*x+y*y > 4.0)\n        \treturn i;\n    }\n    return maxIterations;\n}\n\nvec4 fractal(in vec2 uv)\n{\n    int level = mandelbrot(uv);\n    \n    if(level==maxIterations)\n        return vec4(0,0,0,0);\n    else\n        return texture(iChannel0, vec2(level,level)/iChannelResolution[0].xy);\n    \n    //float intensity = float(level)/float(maxIterations);\n    //return vec4(intensity,intensity,intensity,0);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    // Normalize pixel coordinates: roughly -0.5 to +0.5, but Y affected by aspect ratio.\n    vec2 uv = ((fragCoord-iResolution.xy*0.5)/iResolution.xx);\n    \n    // Scale coordinates smaller over time, at constant zoom speed\n    uv = uv/exp(iTime)*10.0;\n    \n    // increase fractal depth as we zoom\n    fractalDepth = int(iTime * 20.0); // linear\n    //fractalDepth = int(exp(iTime) / 10.0); // exponential\n    \n    // wrap to tile fractal - optional\n    //uv.xy = vec2(mod(uv.x,3.0)-2.0, mod(uv.y,3.0)-1.5);\n    \n    // focus centre of image at a focal point in the fractal\n    uv.xy += centre;\n\n    // calculate Mandelbrot fractal colour\n    vec4 col = fractal(uv);\n    \n    // Output to screen\n    fragColor = vec4(col.xyz,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}