{
    "Shader": {
        "info": {
            "date": "1608136821",
            "description": "Move the mouse horizontally to scale up the squares.\nYou may change constant paramters of the program to generate other variations ",
            "flags": 0,
            "hasliked": 0,
            "id": "3dKfDc",
            "likes": 2,
            "name": "Noisy rotating squares",
            "published": 3,
            "tags": [
                "noise",
                "square",
                "pattern",
                "rotation",
                "generativeart",
                "creativecoding"
            ],
            "usePreview": 0,
            "username": "AI",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979323846\n\n// 2D rotation with pivot point (.5,.5)\nvec2 rotate2D(vec2 st, float angle){\n    st -= 0.5;\n    st =  mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle)) * st;\n    st += 0.5;\n    return st;\n}\n// a square with given size as side \nfloat square(vec2 st, vec2 side){\n    vec2 border = vec2(0.5)-side*0.5;\n    vec2 pq = smoothstep(border,border+.01,st);\n    pq *= smoothstep(border,border+.01,vec2(1.0)-st);\n    return pq.x*pq.y;\n}\n// pseudo-random function, returns value between [0.,1.]\nfloat rand (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(31.7667,14.9876)))\n                 * 833443.123456);\n}\n//bilinear value noise function\nfloat bilinearNoise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners of a 2D square\n    float f00 = rand(i);\n    float f10 = rand(i + vec2(1.0, 0.0));\n    float f01 = rand(i + vec2(0.0, 1.0));\n    float f11 = rand(i + vec2(1.0, 1.0));\n\n    vec2 u = smoothstep(0.,1.,(1.-f));\n\treturn u.x*u.y*f00+(1.-u.x)*u.y*f10+\n    u.x*(1.-u.y)*f01+(1.-u.x)*(1.-u.y)*f11;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv-=.5;\n    vec3 color = vec3(0.0);\n    float scale=6.-4.*iMouse.x/iResolution.x;\n    // Divide the space into cells\n\tvec2 ixy=.5+floor(scale*uv);\n    uv = fract(scale*uv);\n    // Using a 2x2 matrix to rotate with given angle\n    uv = rotate2D(uv,.5*PI*sin((ixy.x+ixy.y)*iTime));\n \tfloat nr=bilinearNoise(uv);\n    // Draw a noisy square\n    color =vec3(1.*nr)+vec3(square(uv,vec2(0.7)));\n    color*=vec3(1.,.5+.5*sin(40.*nr+ixy.x*iTime), .5+.5*sin(40.*nr+ixy.y*iTime));\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}