{
    "Shader": {
        "info": {
            "date": "1615713424",
            "description": "A raycasted island in the shape of π!\nHuge credits to IQ for lots of functions.\nMade for Pi Day 2021.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nds3zN",
            "likes": 3,
            "name": "Pi Island (Pi Day 2021)",
            "published": 3,
            "tags": [
                "pi",
                "piday",
                "piday2021"
            ],
            "usePreview": 0,
            "username": "Rowsej",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "/*\n\nπ Island\nBy Rowsej\nBEEG credits to IQ - I used five of his functions in this code!\n(Oh yes, and he made this website, so...)\n\nIt has a step size of 0.1, but each time it hits, it takes a step\nbackwards and then lowers the step size so it's more accurate\nuntil the step size is SMOL.\n\n*/\n\n#define PI 3.14159\n#define ROTATION (iTime * 32.)\n\n#define MAX_RAY_DIS 6.\n#define STEP_SIZE .1\n\n// Looks good but makes it look like plastic!\n#define SPECULARITY false\n\nvec2 rotate(vec2 p, float ang) {\n    float c = cos(ang * PI / 180.);\n    float s = sin(ang * PI / 180.);\n    return vec2(p.x * c - p.y * s, p.x * s + p.y * c);\n}\n\n// Credit to IQ for this function:\nfloat sdSegment(vec2 a, vec2 b, vec2 p) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba * h);\n}\n// And this polynomial-based smooth-minimum function:\nfloat sMin(float a, float b, float k) {\n    float h = clamp(.5 + .5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n// Oh, and these noise-related functions (https://www.shadertoy.com/view/lsf3WH):\nfloat hash(vec2 p) {\n    p = 50. * fract(p * .3183099 + vec2(.71, .113));\n    return -1. + 2. * fract(p.x * p.y * (p.x + p.y));\n}\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3. - 2. * f);\n    return mix(\n        mix(hash(i + vec2(0.)), hash(i + vec2(1., 0.)), u.x),\n        mix(hash(i + vec2(0., 1.)), hash(i + vec2(1., 1.)), u.x),\n    u.y);\n}\n\nvoid add(inout float a, float b) {\n    a = sMin(a, b, .03);\n}\nvoid addS(inout float d, vec2 a, vec2 b, vec2 p) {\n    add(d, sdSegment(a, b, p));\n}\n\nfloat sdPi(vec2 p) {\n    // The top\n    float d = sdSegment(vec2(-1., .8), vec2(-.8, 1.), p);\n    addS(d, vec2(-.8, 1.), vec2(1.), p);\n    // The left leg\n    addS(d, vec2(-.3, 1.), vec2(-.4, -.5), p);\n    addS(d, vec2(-.4, -.5), vec2(-.6, -.7), p);\n    // The right leg\n    addS(d, vec2(.4, 1.), vec2(.5, -.5), p);\n    addS(d, vec2(.5, -.5), vec2(.8, -.7), p);\n    d -= .25;\n    return d;\n}\nfloat heightmap(vec2 p) {\n    float n = -sdPi(p);\n    n = sin(clamp(n, -.2, .2) * (90. / .2) * PI / 180.) * .1;\n    n += noise(p * 4.) * .03 * mix(1., .2, clamp(n / -.1, 0., 1.));\n    return n;\n}\n// And this is IQ's as well:\nvec3 getNormal(vec2 p) {\n    float eps = 0.01;\n    vec2 h = vec2(eps, 0.);\n    return normalize(vec3(\n        heightmap(p - h.xy) - heightmap(p + h.xy),\n        2. * h.x,\n        heightmap(p - h.yx) - heightmap(p + h.yx)\n    ));\n}\nvec3 bg(vec3 rd) {\n    return mix(vec3(.65, .65, .9), vec3(.55, .55, 1.), rd.y);\n}\nvec3 shading(float h) {\n    vec3 y = vec3(1., 1., 0.);\n    vec3 b = vec3(.2, .95, 1.);\n    vec3 g = vec3(0., 1., 0.);\n    vec3 g2 = vec3(0., .7, 0.);\n    if(h < 0.) {\n        return mix(y, b, clamp(-h * 10. + .1, 0., 1.));\n    } else if(h < .02) {\n        return y;\n    } else if(h < .06) {\n        return mix(y, g, clamp((h - .02) / .04, 0., 1.));\n    } else if(h < .08) {\n        return mix(g, g2, clamp((h - .06) / .02, 0., 1.));\n    } else {\n        return g2;\n    }\n}\nvec3 getCol(vec2 p) {\n    vec3 ro = vec3(0., 1., -1.25);\n    ro.xz = rotate(ro.xz, ROTATION);\n    vec3 rd = normalize(vec3(p, 1.));\n    rd.yz = rotate(rd.yz, 37.5);\n    rd.xz = rotate(rd.xz, ROTATION);\n    float s = STEP_SIZE;\n    for(float t = 0.; t < MAX_RAY_DIS; t += s) {\n        vec3 p = ro + rd * t;\n        float d = heightmap(p.xz);\n        if(p.y < d) {\n            if(STEP_SIZE / s > 100.) {\n                vec3 col = shading((p.y + d) / 2.);\n                vec3 n = getNormal(p.xz);\n                vec3 l = normalize(vec3(2., 2., -2.) - p);\n                float d = clamp(dot(n, l), .3, 1.);\n                vec3 final;\n                if(SPECULARITY) {\n                    float s = clamp(pow(dot(n, normalize(l - rd)), 256.), 0., 1.);\n                    final = col * d + vec3(1.) * s;\n                } else {\n                    final = col * d;\n                }\n                float fog = t / MAX_RAY_DIS;\n                vec3 fogCol = bg(rd);\n                return mix(final, fogCol, fog);\n            } else {\n                t -= s;\n                s /= 10.;\n            }\n        }\n    }\n    return bg(rd);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float mind = min(iResolution.x, iResolution.y) / 1.5;\n    vec2 coords = fragCoord / mind * 2. - 1.;\n    coords.x -= (iResolution.x - mind) / mind;\n    coords.y -= (iResolution.y - mind) / mind;\n    vec3 col = getCol(coords);\n    fragColor = vec4(mix(vec3(0.), col, iTime > 0.? min(iTime, 1.) : 1.), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}