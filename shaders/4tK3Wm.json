{
    "Shader": {
        "info": {
            "date": "1474990487",
            "description": "Part 02: functions and some other useful things\nIntro to democoding using ShaderToy\nBy cxw/Incline - Demosplash 2016",
            "flags": 0,
            "hasliked": 0,
            "id": "4tK3Wm",
            "likes": 0,
            "name": "demosplash2016-cxw-02",
            "published": 3,
            "tags": [
                "tutorial",
                "demoparty"
            ],
            "usePreview": 0,
            "username": "cxw",
            "viewed": 514
        },
        "renderpass": [
            {
                "code": "// ^^^^ check out those shader inputs!\n\nprecision highp int;    //play it safe.  Also covers\nprecision highp float;  //vectors and matrices.\n\nvec4 do_color(in float time, in vec2 coords)\n{\n    vec4 retval;\n    retval.r = coords.x;\n    retval.g = coords.y;\n    retval.b = 0.5+0.5*sin(time);\n    retval.a = 1.0;\n    return retval;\n\n    // Exactly the same as the more concise:\n    //return vec4(coords,0.5+0.5*sin(time),1.0);\n\n    // Note: we just found out where the coordinate origin is!\n    // Debug with colors rather than printf().\n\n} //do_color\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = do_color(t, uv);\n    // Why should you use functions?  How about this:\n    //fragColor = do_color(t*15.0, uv);\n}\n\n// vi: set ts=4 sts=4 sw=4 et ai: //\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}