{
    "Shader": {
        "info": {
            "date": "1549904467",
            "description": "Molecular dynamics simulation - see the source",
            "flags": 32,
            "hasliked": 0,
            "id": "3dj3Wy",
            "likes": 16,
            "name": "Freezing and Melting",
            "published": 3,
            "tags": [
                "fluid",
                "moleculardynamics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 769
        },
        "renderpass": [
            {
                "code": "// \"Freezing and Melting\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Molecular dynamics simulation; like-colored particles attract; periodic boundaries.\n  Gradually lower temperature slider to observe freezing and raise to melt; click in image to restart.\n*/\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nvec4 Loadv4 (int idVar);\n\nconst int nMol = 800;\n\nvec4 ShowWg (vec2 uv, vec2 canvas, float parmV)\n{\n  vec4 wgBx[1];\n  vec3 col, cc;\n  vec2 ut, ust;\n  float vW[1], asp, s;\n  cc = vec3 (1., 0., 0.);\n  asp = canvas.x / canvas.y;\n  for (int k = 0; k < 1; k ++)\n     wgBx[k] = vec4 ((0.35 + 0.05 * float (k)) * asp, 0., 0.014 * asp, 0.18);\n  vW[0] = parmV;\n  col = vec3 (0.);\n  for (int k = 0; k < 1; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw * vec2 (0.7, 1.);\n    if (max (ust.x, ust.y) < 0.) {\n      if  (min (abs (ust.x), abs (ust.y)) * canvas.y < 2.) col = 0.3 * cc.yyx;\n      else col = (mod (0.5 * ((0.5 * uv.y - wgBx[k].y) / wgBx[k].w - 0.99), 0.1) *\n         canvas.y < 6.) ? 0.5 * cc.yyx : cc.yyx;\n    }\n    ut.y -= (vW[k] - 0.5) * 2. * wgBx[k].w;\n    s = ShowInt (ut - vec2 (0.018, -0.01), 0.02 * vec2 (asp, 1.), 2.,\n       clamp (floor (100. * vW[k]), 0., 99.));\n    if (s > 0.) col = cc;\n    ut = abs (ut) * vec2 (1., 1.5);\n    if (max (abs (ut.x), abs (ut.y)) < 0.025 && max (ut.x, ut.y) > 0.02) col = cc.yxy;\n  }\n  return vec4 (col, step (0.001, length (col)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, cw4;\n  vec3 col, ds;\n  vec2 canvas, uv, ut, p, s, t;\n  float dMin, d, bLen, parmV;\n  int nn;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  bLen = stDat.y;\n  parmV = stDat.w;\n  if (max (abs (uv.x), abs (uv.y)) < 1.) {\n    ut = 0.5 * bLen * uv;\n    dMin = 2. * bLen;\n    ds.z = 0.;\n    for (int n = 0; n < nMol; n ++) {\n      p = Loadv4 (n + 2).xy;\n      s = ut - p;\n      d = length (s);\n      t = abs (s) - bLen + 0.5;\n      if (max (t.x, t.y) > 0.) {\n        ds.xy = bLen * sign (p);\n        if (min (t.x, t.y) > 0.) d = min (d, length (s + ds.xy));\n        else if (t.x > 0.) d = min (d, length (s + ds.xz));\n        else if (t.y > 0.) d = min (d, length (s + ds.zy));\n      }\n      if (d < dMin) {\n        dMin = d;\n        nn = n;\n      }\n    }\n    col = mix (((mod (float (nn), 2.) > 0.) ? vec3 (1., 1., 0.) : vec3 (0., 1., 1.)),\n       vec3 (0.2, 0.1, 0.1), smoothstep (0.45, 0.5, dMin));\n  } else col = vec3 (0.82);\n  cw4 = ShowWg (uv, canvas, parmV);\n  col = mix (col, cw4.rgb, cw4.a);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (sgn < 0.) {\n      if (idChar == mxChar - nDig - 1.) s = ShowDig (q, -1);\n      else ++ v;\n    }\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Freezing and Melting\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nMol = 800;\nfloat bLen, vvSet, vScl;\nconst float pi = 3.14159;\n\nvec4 Step (int mId)\n{\n  vec4 p;\n  vec2 dr, f;\n  float rr, rri, rri3, rCut, rrCut, rCutA, rrCutA, dt, ic, icd;\n  rCut = pow (2., 1./6.);\n  rCutA = 2.5;\n  rrCut = rCut * rCut;\n  rrCutA = rCutA * rCutA;\n  f = vec2 (0.);\n  p = Loadv4 (mId + 2);\n  ic = mod (float (mId), 2.);\n  for (int n = 0; n < nMol; n ++) {\n    dr = p.xy - Loadv4 (n + 2).xy;\n    if (abs (dr.x) > 0.5 * bLen) dr.x -= bLen * sign (dr.x);\n    if (abs (dr.y) > 0.5 * bLen) dr.y -= bLen * sign (dr.y);\n    rr = dot (dr, dr);\n    icd = mod (float (n), 2.) - ic;\n    if (n != mId && (icd == 0. &&  rr < rrCutA || icd != 0. && rr < rrCut)) {\n      rri = 1. / rr;\n      rri3 = rri * rri * rri;\n      f += 48. * rri3 * (rri3 - 0.5) * rri * dr;\n    }\n  }\n  dt = 0.01;\n  p.zw += dt * f;\n  p.zw *= vScl;\n  p.xy += dt * p.zw;\n  p.xy -= bLen * sign (p.xy) * step (vec2 (0.5 * bLen), abs (p.xy));\n  return p;\n}\n\nvec4 Init (int mId)\n{\n  vec4 p;\n  float fm;\n  float ga = 2.39996; // = pi * (3 - sqrt(5))\n  fm = float (mId) + 1.;\n  p.xy = 0.6 * sqrt (fm) * sin (fm * ga + vec2 (0.5 * pi, 0.));\n  p.zw = sqrt (vvSet) * sin (2. * pi * Hashff (fm) + vec2 (0.5 * pi, 0.));\n  return p;\n}\n\nfloat EkSum ()\n{\n  vec2 v;\n  float svv;\n  svv = 0.;\n  for (int n = 0; n < nMol; n ++) {\n    v = Loadv4 (n + 2).zw;\n    svv += dot (v, v);\n  }\n  return svv / float (nMol);\n}\n\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[1], mPtr, mPtrP, stDat, p;\n  vec2 iFrag, canvas, ust;\n  float asp, fCount, vvCur, parmV, vW;\n  int pxId, mId, wgSel, wgReg, kSel;\n  bool init;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= nMol + 2) discard;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 2) mId = pxId - 2;\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  init = (iFrame <= 5);\n  if (init) {\n    bLen = 1.4 * sqrt (float (nMol));\n    parmV = 0.5;\n    fCount = 0.;\n    mPtrP = mPtr;\n  } else {\n    stDat = Loadv4 (0);\n    fCount = stDat.x;\n    bLen = stDat.y;\n    vvCur = stDat.z;\n    parmV = stDat.w;\n    ++ fCount;\n    stDat = Loadv4 (1);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n  }\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < 1; k ++)\n       wgBx[k] = vec4 ((0.35 + 0.05 * float (k)) * asp, 0., 0.014 * asp, 0.18);\n    for (int k = 0; k < 1; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0. && abs (mPtr.x) * asp < 0.5 && fCount > 50.) {\n      fCount = 0.;\n      init = true;\n    }\n  } else {\n    for (int k = 0; k < 1; k ++) {\n      if (wgSel == k) {\n        kSel = k;\n        vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 0.99);\n        break;\n      }\n    }\n    if (kSel == 0) parmV = clamp (vW, 0.01, 0.99);\n  }\n  vvSet = 6. * parmV;\n  if (init) {\n    if (pxId >= 2) p = Init (mId);\n    if (pxId == 0) vvCur = vvSet;\n  } else {\n    vScl = 0.99 + 0.01 * vvSet / vvCur;\n    if (pxId >= 2) p = Step (mId);\n    if (pxId == 0) vvCur = EkSum ();\n  }\n  if (pxId < 2) {\n    if (pxId == 0) stDat = vec4 (fCount, bLen, vvCur, parmV);\n    else if (pxId == 1) stDat = vec4 (mPtr.xyz, float (wgSel));\n  }\n  Savev4 (pxId, ((pxId >= 2) ? p : stDat), fragColor, fragCoord);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Freezing and Melting\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nMol = 800;\nfloat bLen, vvSet, vScl;\nconst float pi = 3.14159;\n\nvec4 Step (int mId)\n{\n  vec4 p;\n  vec2 dr, f;\n  float rr, rri, rri3, rCut, rrCut, rCutA, rrCutA, dt, ic, icd;\n  rCut = pow (2., 1./6.);\n  rCutA = 2.5;\n  rrCut = rCut * rCut;\n  rrCutA = rCutA * rCutA;\n  f = vec2 (0.);\n  p = Loadv4 (mId + 2);\n  ic = mod (float (mId), 2.);\n  for (int n = 0; n < nMol; n ++) {\n    dr = p.xy - Loadv4 (n + 2).xy;\n    if (abs (dr.x) > 0.5 * bLen) dr.x -= bLen * sign (dr.x);\n    if (abs (dr.y) > 0.5 * bLen) dr.y -= bLen * sign (dr.y);\n    rr = dot (dr, dr);\n    icd = mod (float (n), 2.) - ic;\n    if (n != mId && (icd == 0. &&  rr < rrCutA || icd != 0. && rr < rrCut)) {\n      rri = 1. / rr;\n      rri3 = rri * rri * rri;\n      f += 48. * rri3 * (rri3 - 0.5) * rri * dr;\n    }\n  }\n  dt = 0.01;\n  p.zw += dt * f;\n  p.zw *= vScl;\n  p.xy += dt * p.zw;\n  p.xy -= bLen * sign (p.xy) * step (vec2 (0.5 * bLen), abs (p.xy));\n  return p;\n}\n\nvec4 Init (int mId)\n{\n  vec4 p;\n  float fm;\n  float ga = 2.39996; // = pi * (3 - sqrt(5))\n  fm = float (mId) + 1.;\n  p.xy = 0.6 * sqrt (fm) * sin (fm * ga + vec2 (0.5 * pi, 0.));\n  p.zw = sqrt (vvSet) * sin (2. * pi * Hashff (fm) + vec2 (0.5 * pi, 0.));\n  return p;\n}\n\nfloat EkSum ()\n{\n  vec2 v;\n  float svv;\n  svv = 0.;\n  for (int n = 0; n < nMol; n ++) {\n    v = Loadv4 (n + 2).zw;\n    svv += dot (v, v);\n  }\n  return svv / float (nMol);\n}\n\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[1], mPtr, mPtrP, stDat, p;\n  vec2 iFrag, canvas, ust;\n  float asp, fCount, vvCur, parmV, vW;\n  int pxId, mId, wgSel, wgReg, kSel;\n  bool init;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= nMol + 2) discard;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 2) mId = pxId - 2;\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  init = (iFrame <= 5);\n  if (init) {\n    bLen = 1.4 * sqrt (float (nMol));\n    parmV = 0.5;\n    fCount = 0.;\n    mPtrP = mPtr;\n  } else {\n    stDat = Loadv4 (0);\n    fCount = stDat.x;\n    bLen = stDat.y;\n    vvCur = stDat.z;\n    parmV = stDat.w;\n    ++ fCount;\n    stDat = Loadv4 (1);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n  }\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < 1; k ++)\n       wgBx[k] = vec4 ((0.35 + 0.05 * float (k)) * asp, 0., 0.014 * asp, 0.18);\n    for (int k = 0; k < 1; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0. && abs (mPtr.x) * asp < 0.5 && fCount > 50.) {\n      fCount = 0.;\n      init = true;\n    }\n  } else {\n    for (int k = 0; k < 1; k ++) {\n      if (wgSel == k) {\n        kSel = k;\n        vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 0.99);\n        break;\n      }\n    }\n    if (kSel == 0) parmV = clamp (vW, 0.01, 0.99);\n  }\n  vvSet = 6. * parmV;\n  if (init) {\n    if (pxId >= 2) p = Init (mId);\n    if (pxId == 0) vvCur = vvSet;\n  } else {\n    vScl = 0.99 + 0.01 * vvSet / vvCur;\n    if (pxId >= 2) p = Step (mId);\n    if (pxId == 0) vvCur = EkSum ();\n  }\n  if (pxId < 2) {\n    if (pxId == 0) stDat = vec4 (fCount, bLen, vvCur, parmV);\n    else if (pxId == 1) stDat = vec4 (mPtr.xyz, float (wgSel));\n  }\n  Savev4 (pxId, ((pxId >= 2) ? p : stDat), fragColor, fragCoord);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Freezing and Melting\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nMol = 800;\nfloat bLen, vvSet, vScl;\nconst float pi = 3.14159;\n\nvec4 Step (int mId)\n{\n  vec4 p;\n  vec2 dr, f;\n  float rr, rri, rri3, rCut, rrCut, rCutA, rrCutA, dt, ic, icd;\n  rCut = pow (2., 1./6.);\n  rCutA = 2.5;\n  rrCut = rCut * rCut;\n  rrCutA = rCutA * rCutA;\n  f = vec2 (0.);\n  p = Loadv4 (mId + 2);\n  ic = mod (float (mId), 2.);\n  for (int n = 0; n < nMol; n ++) {\n    dr = p.xy - Loadv4 (n + 2).xy;\n    if (abs (dr.x) > 0.5 * bLen) dr.x -= bLen * sign (dr.x);\n    if (abs (dr.y) > 0.5 * bLen) dr.y -= bLen * sign (dr.y);\n    rr = dot (dr, dr);\n    icd = mod (float (n), 2.) - ic;\n    if (n != mId && (icd == 0. &&  rr < rrCutA || icd != 0. && rr < rrCut)) {\n      rri = 1. / rr;\n      rri3 = rri * rri * rri;\n      f += 48. * rri3 * (rri3 - 0.5) * rri * dr;\n    }\n  }\n  dt = 0.01;\n  p.zw += dt * f;\n  p.zw *= vScl;\n  p.xy += dt * p.zw;\n  p.xy -= bLen * sign (p.xy) * step (vec2 (0.5 * bLen), abs (p.xy));\n  return p;\n}\n\nvec4 Init (int mId)\n{\n  vec4 p;\n  float fm;\n  float ga = 2.39996; // = pi * (3 - sqrt(5))\n  fm = float (mId) + 1.;\n  p.xy = 0.6 * sqrt (fm) * sin (fm * ga + vec2 (0.5 * pi, 0.));\n  p.zw = sqrt (vvSet) * sin (2. * pi * Hashff (fm) + vec2 (0.5 * pi, 0.));\n  return p;\n}\n\nfloat EkSum ()\n{\n  vec2 v;\n  float svv;\n  svv = 0.;\n  for (int n = 0; n < nMol; n ++) {\n    v = Loadv4 (n + 2).zw;\n    svv += dot (v, v);\n  }\n  return svv / float (nMol);\n}\n\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[1], mPtr, mPtrP, stDat, p;\n  vec2 iFrag, canvas, ust;\n  float asp, fCount, vvCur, parmV, vW;\n  int pxId, mId, wgSel, wgReg, kSel;\n  bool init;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= nMol + 2) discard;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 2) mId = pxId - 2;\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  init = (iFrame <= 5);\n  if (init) {\n    bLen = 1.4 * sqrt (float (nMol));\n    parmV = 0.5;\n    fCount = 0.;\n    mPtrP = mPtr;\n  } else {\n    stDat = Loadv4 (0);\n    fCount = stDat.x;\n    bLen = stDat.y;\n    vvCur = stDat.z;\n    parmV = stDat.w;\n    ++ fCount;\n    stDat = Loadv4 (1);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n  }\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < 1; k ++)\n       wgBx[k] = vec4 ((0.35 + 0.05 * float (k)) * asp, 0., 0.014 * asp, 0.18);\n    for (int k = 0; k < 1; k ++) {\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0. && abs (mPtr.x) * asp < 0.5 && fCount > 50.) {\n      fCount = 0.;\n      init = true;\n    }\n  } else {\n    for (int k = 0; k < 1; k ++) {\n      if (wgSel == k) {\n        kSel = k;\n        vW = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 0.99);\n        break;\n      }\n    }\n    if (kSel == 0) parmV = clamp (vW, 0.01, 0.99);\n  }\n  vvSet = 6. * parmV;\n  if (init) {\n    if (pxId >= 2) p = Init (mId);\n    if (pxId == 0) vvCur = vvSet;\n  } else {\n    vScl = 0.99 + 0.01 * vvSet / vvCur;\n    if (pxId >= 2) p = Step (mId);\n    if (pxId == 0) vvCur = EkSum ();\n  }\n  if (pxId < 2) {\n    if (pxId == 0) stDat = vec4 (fCount, bLen, vvCur, parmV);\n    else if (pxId == 1) stDat = vec4 (mPtr.xyz, float (wgSel));\n  }\n  Savev4 (pxId, ((pxId >= 2) ? p : stDat), fragColor, fragCoord);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}