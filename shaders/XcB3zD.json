{
    "Shader": {
        "info": {
            "date": "1703865551",
            "description": "looped perlin noise using polar coordinates",
            "flags": 0,
            "hasliked": 0,
            "id": "XcB3zD",
            "likes": 5,
            "name": "Perlin whirlpool",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "radial",
                "polar"
            ],
            "usePreview": 0,
            "username": "ikucha",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265358979323846;\n\n// copy from https://www.shadertoy.com/view/4sc3z2   \n#define MOD3 vec3(.1031,.11369,.13787)\nconst float PERIOD = 8.;\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\n//this hash loops with period PERIOD in the x coordinate\nvec3 hash33_periodic(vec3 p3)\n{\n    p3.x = mod(p3.x, PERIOD);\n    \n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat perlin_noise_periodic(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33_periodic(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33_periodic(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33_periodic(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33_periodic(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33_periodic(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33_periodic(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33_periodic(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33_periodic(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nfloat fractal_perlin_noise_periodic(vec3 p){\n    return perlin_noise_periodic(p)+0.5*perlin_noise_periodic(2.*(p+vec3(0.25)))+0.25*perlin_noise_periodic(4.*(p+vec3(0.50)))+0.125*perlin_noise_periodic(8.*(p+vec3(0.75)));\n}\nfloat fractal_perlin_noise(vec3 p){\n    return perlin_noise(p)+0.5*perlin_noise(2.*(p+vec3(0.25)))+0.25*perlin_noise(4.*(p+vec3(0.50)))+0.125*perlin_noise(8.*(p+vec3(0.75)));\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n//(seed, frequency) combinations that look good^ (9,3), (2,1), (8,1), (18, 2), (5,4), (16,4), (8,0.5), (11,0.5), (23, 0.5), (40,0.5), (46, 0.5)\nconst float frequency = 0.5;\nconst float seed = 40.;\nvec3 palette(float g){\n    vec3 w = 2.*PI*vec3(perlin_noise(vec3(g*frequency)+seed*vec3(100.,0.,0.)), perlin_noise(vec3(g*frequency)+seed*vec3(200.,0,0)), perlin_noise(vec3(g*frequency)+seed*vec3(300.)));\n    w += 0.5*2.*PI*vec3(perlin_noise(vec3(g*frequency*2.)+seed*vec3(100.,0.,0.)), perlin_noise(vec3(g*frequency*2.)+seed*vec3(600.,0,0)), perlin_noise(vec3(g*frequency*2.)+seed*vec3(300.)));\n    w += 0.25*2.*PI*vec3(perlin_noise(vec3(g*frequency*4.)+seed*vec3(100.,0.,0.)), perlin_noise(vec3(g*frequency*4.)+seed*vec3(600.,0,0)), perlin_noise(vec3(g*frequency*4.)+seed*vec3(300.))); \n    w += 0.125*2.*PI*vec3(perlin_noise(vec3(g*frequency*8.)+seed*vec3(100.,0.,0.)), perlin_noise(vec3(g*frequency*8.)+seed*vec3(600.,0,0)), perlin_noise(vec3(g*frequency*8.)+seed*vec3(300.)));\n    return vec3(0.5)+0.5*cos(w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st = st*2.-1.;\n    st.x *= iResolution.x/iResolution.y;\n    float angle = 0.5*atan(st.y, st.x)/PI+0.5;\n    float radius = length(st);\n    //radius+=0.01*u_time;\n    angle+=pow(radius, 1.2);\n    st.x = angle;\n    st.y = pow(radius, 0.7);\n    \n    st*=vec2(PERIOD,8.);\n    st+=3.*vec2(fractal_perlin_noise_periodic(vec3(st, 0.3*iTime)), fractal_perlin_noise_periodic(vec3(st+vec2(100.), 0.3*iTime)));\n    st.y+=1.*iTime;\n    float gray = 0.5*fractal_perlin_noise_periodic(vec3(st, 0.))+0.5;\n    vec3 color = palette(gray);\n    //color = pal( gray, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20));\n\t//color = vec3(angle);\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}