{
    "Shader": {
        "info": {
            "date": "1533204435",
            "description": "I am fan of gam0022\nhttps://www.shadertoy.com/user/gam0022",
            "flags": 0,
            "hasliked": 0,
            "id": "4ttyRj",
            "likes": 22,
            "name": "gam0022!",
            "published": 3,
            "tags": [
                "2d",
                "text",
                "font",
                "curve",
                "ttf",
                "gam0022"
            ],
            "usePreview": 1,
            "username": "kaneta",
            "viewed": 968
        },
        "renderpass": [
            {
                "code": "// I got idea of this code from here\n// https://www.shadertoy.com/view/lslGDn\n\n// Reference\n// https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch25.html\n\n//#define AA\n\nfloat cross2(vec2 a, vec2 b) { return a.x*b.y-b.x*a.y; }\n\nfloat InTri( vec2 A, vec2 B, vec2 C, const in vec2 P )\n{\n    vec2 a = C - A, b = B - A, c = P - A;\n    vec2 area = vec2(cross2(c,b),cross2(a,c)) / (cross2(a,b));\n    return -min(min(area.x, area.y), 1.0 - area.x - area.y);\n}\n\nfloat InBezier(vec2 A, vec2 B, vec2 C, vec2 P, float cond)\n{\n    vec2 a = C - A, b = B - A, c = P - A;\n    vec2 area = vec2(cross2(c,b),cross2(a,c)) / (cross2(a,b));\n    float area2 = 1.0 - area.x - area.y;\n    vec2 d = vec2(area.y * 0.5, 0.0) + area2;\n    return max(cond * (d.x * d.x - d.y), -min(min(area.x, area.y), area2));\n}\n\n#define IT(a,b,c) d = min( d, InTri(v[a],v[b],v[c], uv));\n#define IB(a,b,c) d = min( d, InBezier(v[a],v[b],v[c], uv, -1.0));\n#define IB2(a,b,c) d = min( d, InBezier(v[a],v[b],v[c], uv, 1.0));\n\nfloat udRect( vec2 p, vec2 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat GA(vec2 uv) {    // 我\n    float d = 10000.0;\n    if (udRect(uv - vec2(0.1165,0.8740), vec2(0.1755,0.3340)) == 0.0) {\n    vec2 v[202] = vec2[202](\n        vec2(0.0290,0.6070),vec2(0.0160,0.6460),vec2(0.0180,0.6480),vec2(0.0320,0.6280),vec2(0.0470,0.6000),vec2(0.0490,0.6030),\n        vec2(0.0160,0.7480),vec2(-0.0210,0.6860),vec2(-0.0240,0.6780),vec2(-0.0130,0.7870),vec2(0.0250,0.8450),vec2(0.0350,0.8740),\n        vec2(-0.0500,0.8630),vec2(-0.0570,0.8670),vec2(-0.0030,0.9200),vec2(0.0460,1.0510),vec2(0.0180,1.0320),vec2(0.0040,1.0290),\n        vec2(0.0420,1.0970),vec2(0.0620,1.1300),vec2(0.0650,1.1400),vec2(0.0740,1.1650),vec2(0.0960,1.1610),vec2(0.1040,1.1540),\n        vec2(0.1130,1.1480),vec2(0.1120,1.1360),vec2(0.1100,1.1190),vec2(0.0840,1.0870),vec2(0.0810,0.9940),vec2(0.0970,1.0060),\n        vec2(0.1040,0.9910),vec2(0.1100,0.9760),vec2(0.1010,0.9470),vec2(0.1330,1.0650),vec2(0.1240,1.1520),vec2(0.1200,1.1650),\n        vec2(0.1160,1.1830),vec2(0.1040,1.2060),vec2(0.1360,1.2020),vec2(0.1540,1.1940),vec2(0.1620,1.1790),vec2(0.1700,1.1640),\n        vec2(0.1700,1.1410),vec2(0.1760,1.0110),vec2(0.1960,1.0310),vec2(0.2080,1.0320),vec2(0.2400,1.0170),vec2(0.2520,0.9920),\n        vec2(0.2120,0.9730),vec2(0.2150,0.9470),vec2(0.2920,0.9300),vec2(0.2520,0.8650),vec2(0.2390,0.8430),vec2(0.2060,0.8110),\n        vec2(0.2470,0.7530),vec2(0.2540,0.6940),vec2(0.2580,0.6360),vec2(0.2630,0.5700),vec2(0.2410,0.5700),vec2(0.2250,0.5800),\n        vec2(0.2130,0.5930),vec2(0.2020,0.6230),vec2(0.1920,0.6490),vec2(0.1750,0.7210),vec2(0.1460,0.7540),vec2(0.0920,0.7050),\n        vec2(0.0870,0.7090),vec2(0.0930,0.7190),vec2(0.1210,0.7420),vec2(0.1460,0.7790),vec2(0.1390,0.9210),vec2(0.1200,0.9040),\n        vec2(0.1030,0.8800),vec2(0.2050,1.1210),vec2(0.1950,1.1230),vec2(0.2070,1.1350),vec2(0.2180,1.1460),vec2(0.2340,1.1470),\n        vec2(0.2500,1.1490),vec2(0.2610,1.1400),vec2(0.2550,1.0840),vec2(0.2370,1.0700),vec2(0.2240,1.0510),vec2(0.0600,1.0600),\n        vec2(0.0750,1.0760),vec2(0.0090,1.0470),vec2(0.0740,1.0330),vec2(0.0600,1.0200),vec2(0.0640,1.1650),vec2(0.0640,1.1590),\n        vec2(0.0000,1.0310),vec2(0.0130,0.9350),vec2(0.0370,0.9090),vec2(0.0420,0.9130),vec2(0.0100,0.8730),vec2(0.0330,0.9540),\n        vec2(0.0740,0.9900),vec2(0.0600,0.9790),vec2(0.0490,0.9690),vec2(0.0980,0.9360),vec2(0.0420,0.9080),vec2(0.1150,1.2080),\n        vec2(0.1650,1.1090),vec2(0.1610,1.0920),vec2(0.1610,1.0220),vec2(0.1420,0.9780),vec2(0.0990,0.9390),vec2(0.1000,0.8750),\n        vec2(0.1470,0.9280),vec2(0.1200,0.9570),vec2(0.1650,0.9400),vec2(0.1480,0.9240),vec2(0.1690,0.8890),vec2(0.1530,0.8590),\n        vec2(0.0950,0.8680),vec2(-0.0360,0.8590),vec2(-0.0540,0.7200),vec2(-0.0410,0.7420),vec2(-0.0560,0.6930),vec2(-0.0590,0.7130),\n        vec2(-0.0180,0.8580),vec2(-0.0020,0.8600),vec2(-0.0290,0.7620),vec2(0.0540,0.8090),vec2(-0.0480,0.6650),vec2(-0.0380,0.6620),\n        vec2(-0.0310,0.6660),vec2(0.0280,0.6360),vec2(0.0250,0.6420),vec2(0.0900,0.8590),vec2(0.0850,0.8510),vec2(0.0720,0.8310),\n        vec2(0.0540,0.8030),vec2(0.1630,0.7690),vec2(0.1490,0.7840),vec2(0.1510,0.7580),vec2(0.1560,0.7630),vec2(0.0510,0.6970),\n        vec2(0.0660,0.6890),vec2(0.0610,0.5800),vec2(0.0500,0.5520),vec2(0.0580,0.5450),vec2(0.0880,0.7150),vec2(0.1610,1.0450),\n        vec2(0.2190,1.1110),vec2(0.2150,1.0460),vec2(0.2160,1.0490),vec2(0.2140,1.0430),vec2(0.1840,0.9580),vec2(0.1730,0.9500),\n        vec2(0.1620,0.9980),vec2(0.1620,1.0050),vec2(0.1970,0.9660),vec2(0.2180,1.0320),vec2(0.2170,1.0530),vec2(0.2600,1.1250),\n        vec2(0.2570,1.1210),vec2(0.2540,1.1160),vec2(0.2280,1.0960),vec2(0.2660,1.1340),vec2(0.2640,1.1300),vec2(0.2690,1.1000),\n        vec2(0.2680,1.0970),vec2(0.2620,1.1070),vec2(0.2660,1.0940),vec2(0.2260,1.0810),vec2(0.2190,1.0580),vec2(0.2340,1.0240),\n        vec2(0.2270,1.0290),vec2(0.2590,1.0880),vec2(0.2630,1.0910),vec2(0.1770,0.8330),vec2(0.1550,0.8420),vec2(0.1780,0.8280),\n        vec2(0.1560,0.8000),vec2(0.1820,0.7870),vec2(0.1850,0.8410),vec2(0.1980,0.8680),vec2(0.1840,0.7790),vec2(0.1620,0.7680),\n        vec2(0.1600,0.7660),vec2(0.1640,0.7670),vec2(0.1640,0.7640),vec2(0.1660,0.7580),vec2(0.1680,0.7510),vec2(0.1950,0.7490),\n        vec2(0.1700,0.7420),vec2(0.1720,0.7320),vec2(0.2180,0.6980),vec2(0.2080,0.7180),vec2(0.2040,0.9450),vec2(0.2090,0.9480),\n        vec2(0.2060,0.9400),vec2(0.2070,0.9260),vec2(0.2060,0.8930),vec2(0.2070,0.9080),vec2(0.2300,0.7150),vec2(0.2370,0.7690),\n        vec2(0.2240,0.6930),vec2(0.2440,0.7840),vec2(0.2390,0.7850),vec2(0.2420,0.7900)\n    );\n    IT(83,18,84)IT(27,18,19)IT(18,83,15)IT(15,85,18)IT(15,17,85)IT(83,86,87)IT(88,21,89)IT(89,21,20)IT(19,25,27)IT(83,84,86)\n    IT(84,18,27)IT(19,20,25)IT(90,85,17)IT(14,91,92)IT(93,92,91)IT(94,14,92)IT(91,95,93)IT(86,96,87)IT(32,97,96)IT(87,96,97)\n    IT(97,32,98)IT(93,98,99)IT(93,95,98)IT(100,93,99)IT(96,28,30)IT(20,23,25)IT(101,38,36)IT(38,40,36)IT(102,103,34)IT(34,35,40)\n    IT(33,104,105)IT(36,37,101)IT(106,98,32)IT(72,99,71)IT(99,98,106)IT(107,100,72)IT(72,100,99)IT(30,32,96)IT(108,109,110)IT(99,109,70)\n    IT(71,99,70)IT(110,111,108)IT(70,109,108)IT(105,110,109)IT(111,112,113)IT(21,23,20)IT(107,114,100)IT(14,115,12)IT(7,116,117)IT(118,119,116)\n    IT(120,94,121)IT(120,115,14)IT(122,9,6)IT(123,6,9)IT(122,6,117)IT(94,120,14)IT(6,7,117)IT(118,7,8)IT(7,118,116)IT(118,8,124)\n    IT(125,124,126)IT(124,8,126)IT(2,127,0)IT(3,0,127)IT(127,2,128)IT(10,123,9)IT(11,129,130)IT(129,11,114)IT(11,130,131)IT(123,131,132)\n    IT(123,10,131)IT(133,69,134)IT(68,69,64)IT(135,64,69)IT(135,69,136)IT(11,100,114)IT(137,138,5)IT(139,5,138)IT(4,0,3)IT(140,0,4)\n    IT(140,4,139)IT(139,141,140)IT(4,5,139)IT(68,66,67)IT(132,138,137)IT(142,67,66)IT(64,66,68)IT(131,138,132)IT(131,10,11)IT(40,42,34)\n    IT(33,34,103)IT(34,42,102)IT(103,143,33)IT(73,75,144)IT(82,145,146)IT(82,147,145)IT(104,33,143)IT(105,148,149)IT(149,110,105)IT(150,105,151)\n    IT(150,43,152)IT(150,148,105)IT(48,45,153)IT(150,152,148)IT(152,43,48)IT(45,48,43)IT(146,154,82)IT(104,151,105)IT(77,155,156)IT(77,156,157)\n    IT(77,157,144)IT(158,144,157)IT(144,75,77)IT(79,159,160)IT(79,160,155)IT(161,162,163)IT(158,157,163)IT(155,77,79)IT(164,163,162)IT(165,81,166)\n    IT(82,166,81)IT(167,48,168)IT(167,46,48)IT(165,158,80)IT(154,166,82)IT(163,169,158)IT(80,158,169)IT(165,80,81)IT(170,169,163)IT(163,164,170)\n    IT(153,168,48)IT(111,110,112)IT(113,112,171)IT(113,171,172)IT(172,173,174)IT(173,172,171)IT(174,173,175)IT(175,134,174)IT(175,133,134)IT(176,53,173)\n    IT(53,175,173)IT(53,177,51)IT(133,175,178)IT(69,179,180)IT(133,178,181)IT(69,180,136)IT(182,181,178)IT(183,182,178)IT(69,133,179)IT(184,185,186)\n    IT(185,184,183)IT(186,185,187)IT(187,185,63)IT(61,63,188)IT(185,189,63)IT(185,183,178)IT(190,191,192)IT(193,192,49)IT(53,176,177)IT(51,194,195)\n    IT(194,51,177)IT(51,193,49)IT(51,195,193)IT(191,49,192)IT(54,196,197)IT(196,54,56)IT(56,61,198)IT(188,198,61)IT(59,61,56)IT(188,63,189)\n    IT(199,54,197)IT(199,200,201)IT(59,56,58)IT(56,198,196)IT(200,199,197)IT(40,35,36)IB2(0,1,2)IB(3,4,5)IB(6,7,8)IB(9,10,11)\n    IB2(12,13,14)IB2(15,16,17)IB(18,19,20)IB2(21,22,23)IB2(23,24,25)IB2(25,26,27)IB2(28,29,30)IB2(30,31,32)IB(33,34,35)IB(35,36,37)\n    IB2(38,39,40)IB2(40,41,42)IB2(43,44,45)IB2(46,47,48)IB2(49,50,51)IB2(51,52,53)IB2(54,55,56)IB2(56,57,58)IB2(59,60,61)IB2(61,62,63)\n    IB2(64,65,66)IB(67,68,69)IB(70,71,72)IB2(73,74,75)IB2(75,76,77)IB2(77,78,79)IB(80,81,82)\n    return d;\n    }\n    return d;\n}\nfloat MU(vec2 uv) {    // 無\n    float d = 10000.0;\n    if (udRect(uv - vec2(0.1050,0.8770), vec2(0.1770,0.3410)) == 0.0) {\n    vec2 v[279] = vec2[279](\n        vec2(0.1160,0.5660),vec2(0.1280,0.5960),vec2(0.1300,0.6270),vec2(-0.0320,0.6640),vec2(0.0110,0.6820),vec2(0.0260,0.6930),\n        vec2(-0.0120,0.7180),vec2(-0.0360,0.7060),vec2(-0.0640,0.7410),vec2(-0.0410,0.8430),vec2(-0.0560,0.8470),vec2(-0.0660,0.8570),\n        vec2(0.0390,1.0690),vec2(0.0390,1.0760),vec2(0.0100,1.0580),vec2(-0.0230,1.0280),vec2(-0.0480,1.0010),vec2(-0.0520,1.0040),\n        vec2(-0.0540,1.0080),vec2(-0.0630,1.0260),vec2(-0.0510,1.0680),vec2(-0.0340,1.1340),vec2(-0.0330,1.1630),vec2(-0.0330,1.1890),\n        vec2(-0.0420,1.2050),vec2(-0.0460,1.2140),vec2(-0.0470,1.2180),vec2(-0.0170,1.2020),vec2(0.0230,1.1220),vec2(0.0170,1.1100),\n        vec2(-0.0130,1.0690),vec2(-0.0310,1.0420),vec2(-0.0310,1.0380),vec2(0.0220,1.0850),vec2(0.0540,1.1140),vec2(0.0680,1.1180),\n        vec2(0.0880,1.1250),vec2(0.1010,1.1190),vec2(0.1220,1.0890),vec2(0.0980,1.0720),vec2(0.0710,1.0450),vec2(0.0890,1.0010),\n        vec2(0.1050,1.0440),vec2(0.1130,1.0500),vec2(0.1300,1.0490),vec2(0.1430,1.0400),vec2(0.1430,1.0100),vec2(0.1430,0.9870),\n        vec2(0.1370,0.9680),vec2(0.1010,0.8570),vec2(0.1010,0.8470),vec2(0.1140,0.8320),vec2(0.1490,0.8170),vec2(0.2000,0.8190),\n        vec2(0.2100,0.8230),vec2(0.2280,0.8290),vec2(0.2540,0.8120),vec2(0.2810,0.7930),vec2(0.2820,0.7690),vec2(0.2820,0.7570),\n        vec2(0.2720,0.7540),vec2(0.2640,0.7510),vec2(0.2190,0.7630),vec2(0.1120,0.7680),vec2(0.0970,0.7350),vec2(0.0460,0.6940),\n        vec2(0.0920,0.6770),vec2(0.1070,0.7070),vec2(0.1140,0.7100),vec2(0.1440,0.6950),vec2(0.1650,0.7250),vec2(0.1860,0.7260),\n        vec2(0.2060,0.6670),vec2(0.1870,0.6090),vec2(0.1260,0.5550),vec2(0.0410,0.8060),vec2(0.0060,0.8290),vec2(0.0120,0.8600),\n        vec2(0.0080,0.8650),vec2(-0.0030,0.8580),vec2(0.0010,0.8500),vec2(0.0660,0.8160),vec2(0.0500,0.8360),vec2(0.0480,0.8730),\n        vec2(0.0360,0.8770),vec2(0.0260,0.8460),vec2(0.0320,0.8310),vec2(0.0670,0.8710),vec2(0.0640,0.8470),vec2(0.0690,0.8330),\n        vec2(-0.0010,1.1930),vec2(-0.0220,1.0550),vec2(0.0000,1.0520),vec2(-0.0280,1.0450),vec2(0.0280,1.1580),vec2(-0.0410,0.9730),\n        vec2(-0.0400,0.9840),vec2(-0.0360,0.9770),vec2(-0.0400,0.9380),vec2(-0.0270,0.9500),vec2(-0.0220,0.9250),vec2(-0.0390,0.9000),\n        vec2(-0.0210,0.9190),vec2(-0.0130,0.9340),vec2(0.0060,0.9530),vec2(-0.0110,0.9150),vec2(-0.0090,0.9430),vec2(-0.0050,0.9530),\n        vec2(-0.0200,0.9210),vec2(-0.0170,0.9260),vec2(-0.0140,0.9070),vec2(-0.0010,0.9630),vec2(-0.0150,0.9030),vec2(0.0110,1.1820),\n        vec2(0.0210,1.1700),vec2(0.0300,1.1440),vec2(0.0100,0.9860),vec2(0.0290,1.0400),vec2(0.0330,1.0010),vec2(0.0170,0.9740),\n        vec2(0.0060,0.9820),vec2(0.0360,1.0600),vec2(0.0230,0.9880),vec2(0.0440,1.0150),vec2(0.0560,1.0300),vec2(0.0020,0.9720),\n        vec2(0.0050,0.9780),vec2(0.0200,0.9670),vec2(0.0230,0.9560),vec2(0.0060,0.9460),vec2(0.0290,0.9360),vec2(0.0070,0.9160),\n        vec2(0.0070,0.9340),vec2(0.0260,0.9460),vec2(0.0020,0.9130),vec2(0.0370,0.8800),vec2(0.0710,0.9550),vec2(0.0300,0.9390),\n        vec2(0.0330,0.9470),vec2(0.0720,0.8980),vec2(0.0470,0.8870),vec2(0.0350,0.9530),vec2(0.0420,0.8850),vec2(-0.0090,0.9070),\n        vec2(0.0120,0.8680),vec2(-0.0710,0.8710),vec2(-0.0660,0.8760),vec2(-0.0580,0.8810),vec2(-0.0490,0.8860),vec2(-0.0720,0.8670),\n        vec2(-0.0380,0.8920),vec2(-0.0310,0.8380),vec2(-0.0180,0.8230),vec2(-0.0060,0.7790),vec2(0.0040,0.7320),vec2(-0.0110,0.7770),\n        vec2(-0.0180,0.7750),vec2(-0.0040,0.8050),vec2(-0.0720,0.7560),vec2(-0.0720,0.7610),vec2(-0.0630,0.7620),vec2(-0.0500,0.6190),\n        vec2(-0.0550,0.6440),vec2(-0.0120,0.6160),vec2(-0.0430,0.5990),vec2(-0.0550,0.6550),vec2(-0.0340,0.7700),vec2(-0.0260,0.7720),\n        vec2(-0.0200,0.5900),vec2(-0.0340,0.5890),vec2(-0.0250,0.5840),vec2(0.0000,0.6470),vec2(0.0060,0.8370),vec2(0.0360,0.8240),\n        vec2(0.0140,0.7950),vec2(0.0110,0.8170),vec2(0.0390,0.8830),vec2(0.0440,0.8160),vec2(0.0410,0.8000),vec2(0.0530,0.7640),\n        vec2(0.0300,0.7950),vec2(0.0530,0.8060),vec2(0.0040,0.7840),vec2(0.0150,0.7880),vec2(0.0240,0.7490),vec2(0.0210,0.6550),\n        vec2(0.0120,0.6570),vec2(0.0340,0.6850),vec2(0.0370,0.7020),vec2(0.0530,0.7170),vec2(0.0300,0.6470),vec2(0.0490,0.6750),\n        vec2(0.0410,0.6800),vec2(0.0440,0.6080),vec2(0.0340,0.6340),vec2(0.0810,0.6250),vec2(0.0570,0.6700),vec2(0.0460,0.9820),\n        vec2(0.0690,0.9700),vec2(0.0620,0.9920),vec2(0.0660,0.9840),vec2(0.0560,0.9950),vec2(0.0900,0.9810),vec2(0.0760,0.9650),\n        vec2(0.1030,1.0100),vec2(0.0790,0.9530),vec2(0.0900,0.9560),vec2(0.0990,0.9590),vec2(0.0930,0.9050),vec2(0.1280,0.9090),\n        vec2(0.0730,0.8220),vec2(0.0760,0.8150),vec2(0.0700,0.8100),vec2(0.0810,0.9020),vec2(0.1230,0.9040),vec2(0.0920,0.8980),\n        vec2(0.0930,0.9030),vec2(0.0860,0.8490),vec2(0.0880,0.8730),vec2(0.1070,0.8770),vec2(0.0910,0.8880),vec2(0.1110,1.1120),\n        vec2(0.1240,1.1010),vec2(0.1300,1.0950),vec2(0.1030,0.9990),vec2(0.1380,0.9100),vec2(0.1380,0.9660),vec2(0.1420,0.9650),\n        vec2(0.1590,0.9580),vec2(0.1720,0.9450),vec2(0.1780,0.9300),vec2(0.1690,0.9160),vec2(0.1010,0.8290),vec2(0.1100,0.8180),\n        vec2(0.1180,0.8270),vec2(0.1220,0.8220),vec2(0.1060,0.8160),vec2(0.1260,0.8170),vec2(0.1240,0.8200),vec2(0.1760,0.7730),\n        vec2(0.1150,0.7750),vec2(0.1400,0.7750),vec2(0.0680,0.7670),vec2(0.0650,0.8080),vec2(0.0900,0.7720),vec2(0.0570,0.8060),\n        vec2(0.0470,0.8020),vec2(0.0770,0.8110),vec2(0.0790,0.8110),vec2(0.0950,0.8140),vec2(0.1020,0.7730),vec2(0.1000,0.7680),\n        vec2(0.0930,0.7570),vec2(0.0830,0.7460),vec2(0.0700,0.7330),vec2(0.0790,0.6550),vec2(0.0740,0.5920),vec2(0.0670,0.5940),\n        vec2(0.0760,0.6020),vec2(0.0930,0.6570),vec2(0.0820,0.6590),vec2(0.1010,0.6750),vec2(0.1060,0.6790),vec2(0.1080,0.5400),\n        vec2(0.1020,0.5420),vec2(0.1010,0.5380),vec2(0.1260,0.7040),vec2(0.1290,0.6980),vec2(0.1970,0.7240),vec2(0.2060,0.7130),\n        vec2(0.2100,0.6920),vec2(0.1330,0.6890),vec2(0.1230,0.7080),vec2(0.1260,0.6290),vec2(0.1110,0.6440),vec2(0.1310,0.6380),\n        vec2(0.1140,0.6220),vec2(0.1360,0.6850),vec2(0.1410,0.6900)\n    );\n    IT(24,25,27)IT(27,23,24)IT(20,31,32)IT(30,20,21)IT(23,90,22)IT(90,23,27)IT(30,21,28)IT(30,91,20)IT(20,32,18)IT(32,92,15)\n    IT(93,31,20)IT(91,93,20)IT(32,15,18)IT(22,94,21)IT(17,18,15)IT(95,96,97)IT(98,95,99)IT(98,100,101)IT(100,98,99)IT(95,97,99)\n    IT(102,101,100)IT(103,104,105)IT(104,103,106)IT(104,106,107)IT(108,109,105)IT(110,102,105)IT(109,103,105)IT(105,102,108)IT(107,111,104)IT(112,102,110)\n    IT(90,113,22)IT(114,94,22)IT(21,115,28)IT(32,33,92)IT(14,33,13)IT(116,117,118)IT(92,33,14)IT(119,120,116)IT(113,114,22)IT(40,121,12)\n    IT(116,118,122)IT(117,123,118)IT(124,123,117)IT(121,124,117)IT(12,13,40)IT(94,115,21)IT(119,116,122)IT(125,126,119)IT(119,127,125)IT(120,119,126)\n    IT(127,104,111)IT(128,129,104)IT(130,131,132)IT(129,133,132)IT(134,131,135)IT(127,128,104)IT(127,111,125)IT(136,137,138)IT(137,136,130)IT(130,132,133)\n    IT(139,140,130)IT(141,136,138)IT(133,129,128)IT(131,130,142)IT(143,134,144)IT(11,145,146)IT(11,146,147)IT(9,147,148)IT(149,145,11)IT(11,147,9)\n    IT(148,150,9)IT(150,101,112)IT(112,79,150)IT(79,112,78)IT(101,102,112)IT(79,151,9)IT(80,152,151)IT(153,154,155)IT(154,156,155)IT(157,152,76)\n    IT(80,151,79)IT(79,9,150)IT(158,159,160)IT(160,8,158)IT(161,162,163)IT(164,161,163)IT(162,165,3)IT(8,160,166)IT(166,167,6)IT(167,154,6)\n    IT(156,154,167)IT(163,168,164)IT(162,3,163)IT(169,168,170)IT(169,164,168)IT(163,3,171)IT(8,166,6)IT(85,77,84)IT(78,112,144)IT(85,86,77)\n    IT(76,152,172)IT(77,86,75)IT(86,173,75)IT(174,157,175)IT(77,144,84)IT(175,157,76)IT(144,112,143)IT(176,131,142)IT(135,144,134)IT(177,75,173)\n    IT(178,179,180)IT(172,175,76)IT(181,75,177)IT(135,84,144)IT(176,135,131)IT(182,174,183)IT(182,157,174)IT(183,184,182)IT(183,179,184)IT(184,154,153)\n    IT(3,4,171)IT(4,185,186)IT(4,186,171)IT(4,187,185)IT(182,184,153)IT(179,183,180)IT(5,188,187)IT(65,188,189)IT(187,188,65)IT(190,185,191)\n    IT(185,187,192)IT(193,194,195)IT(190,196,194)IT(191,185,192)IT(187,4,5)IT(172,152,80)IT(130,140,142)IT(141,197,198)IT(121,40,124)IT(39,40,13)\n    IT(35,39,13)IT(199,200,197)IT(198,197,200)IT(198,136,141)IT(201,199,197)IT(41,202,203)IT(39,35,37)IT(202,41,204)IT(205,136,203)IT(206,207,208)\n    IT(203,202,205)IT(208,207,209)IT(139,130,136)IT(88,81,83)IT(88,83,87)IT(87,83,140)IT(87,140,139)IT(210,211,81)IT(89,210,81)IT(88,89,81)\n    IT(81,211,212)IT(213,139,136)IT(213,205,208)IT(214,215,216)IT(205,206,208)IT(217,218,49)IT(219,218,220)IT(215,219,220)IT(218,219,49)IT(214,216,208)\n    IT(205,213,136)IT(50,217,49)IT(221,39,37)IT(13,33,35)IT(38,221,222)IT(222,223,38)IT(224,48,207)IT(46,224,204)IT(44,204,43)IT(204,41,43)\n    IT(46,204,44)IT(38,39,221)IT(48,224,46)IT(225,226,227)IT(225,228,229)IT(227,228,225)IT(229,230,231)IT(207,48,226)IT(207,226,209)IT(215,214,219)\n    IT(50,51,232)IT(233,234,235)IT(233,232,51)IT(236,233,237)IT(51,234,233)IT(238,233,235)IT(50,232,217)IT(209,226,225)IT(229,231,225)IT(238,237,233)\n    IT(62,53,54)IT(52,53,239)IT(236,237,240)IT(208,209,214)IT(52,241,237)IT(242,243,244)IT(245,243,242)IT(179,246,242)IT(246,245,242)IT(244,243,212)\n    IT(246,75,181)IT(244,247,248)IT(248,249,244)IT(249,236,250)IT(212,211,247)IT(250,244,249)IT(251,63,252)IT(63,253,252)IT(65,253,63)IT(244,212,247)\n    IT(65,189,254)IT(194,196,255)IT(256,257,258)IT(193,258,257)IT(195,258,193)IT(259,195,255)IT(255,195,194)IT(255,260,259)IT(196,190,191)IT(66,261,259)\n    IT(261,66,262)IT(263,264,0)IT(263,265,264)IT(262,66,68)IT(66,259,260)IT(65,254,253)IT(63,251,250)IT(178,246,179)IT(240,63,250)IT(237,241,240)\n    IT(240,250,236)IT(68,266,267)IT(62,56,60)IT(62,239,53)IT(56,58,60)IT(268,269,71)IT(241,52,239)IT(269,270,71)IT(271,262,267)IT(68,272,266)\n    IT(262,68,267)IT(273,274,275)IT(1,74,0)IT(1,72,74)IT(276,274,273)IT(0,74,263)IT(271,277,262)IT(278,69,72)IT(270,72,69)IT(275,72,2)\n    IT(72,277,278)IT(72,275,277)IT(274,277,275)IT(72,1,2)IT(262,277,274)IT(71,270,69)IT(56,62,54)IB(0,1,2)IB(3,4,5)IB2(6,7,8)\n    IB2(9,10,11)IB(12,13,14)IB2(15,16,17)IB2(18,19,20)IB(20,21,22)IB(22,23,24)IB2(25,26,27)IB2(28,29,30)IB(31,32,33)IB2(33,34,35)\n    IB2(35,36,37)IB(38,39,40)IB2(41,42,43)IB2(44,45,46)IB2(46,47,48)IB(49,50,51)IB(52,53,54)IB2(54,55,56)IB2(56,57,58)IB2(58,59,60)\n    IB2(60,61,62)IB2(63,64,65)IB2(66,67,68)IB2(69,70,71)IB2(72,73,74)IB2(75,76,77)IB(78,79,80)IB2(81,82,83)IB(84,85,86)IB(87,88,89)\n    return d;\n    }\n    return d;\n}\n\nfloat GAM(vec2 uv)\n{\n    uv *= 0.4;\n    uv += vec2(0.275, 0.85);\n    float d = GA(uv);\n    uv.x -= 0.35;\n    d = min(d, MU(uv));\n    return d;\n}\n\nvec2 hash( vec2 x )\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fbm(vec2 uv, float s)\n{\n    uv *= s;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tfloat f  = 0.5000*noise( uv ); uv = m*uv;\n\tf += 0.2500*noise( uv ); uv = m*uv;\n\tf += 0.1250*noise( uv ); uv = m*uv;\n\tf += 0.0625*noise( uv ); uv = m*uv;\n    return f * 0.5 + 0.5;\n}\n\nfloat pingpong(float t, float len, float smo)\n{\n  t = mod(t + smo, len * 2.);\n  return 1.0 - (smoothstep(0., smo, t) - smoothstep(len, len + smo, t));\n}\n\nfloat getColor(vec2 uv) {\n\tuv += (vec2(fbm(vec2(iTime * 0.1), 1.0), fbm(vec2(iTime * 0.1 + 114.514), 1.0)) * 2.0 - 1.0) * 0.5;\n\tuv.x += tan(uv.y * iTime * 100.0 * rand(vec2(iTime))) * 0.04 * smoothstep(0.54, 0.7, fbm(vec2(iTime * 1.0), 1.0));\n\n    float fill = step(0.00000001, GAM(uv));\n    fill = clamp(fill + smoothstep(0.58, 0.63, fbm(uv, 8.)), 0.0, 0.8);\n    fill = clamp(fill - smoothstep(0.6, 0.65, fbm(uv, 12.)) * (1.0 - smoothstep(0.8, 0.95, length(uv * vec2(1.0, 1.1)))), 0.0, 0.8);\n    return mix(fill, 1.0 - fill, pingpong(iTime, 6.0, 1.0));\n}\n\nfloat aaGetColor(vec2 p) {\n    float col = 0.0;\n    const int num = 4;\n    \n    for (int i = 0; i < num; i++) {\n        float fi = float(i + 1);\n    \tcol += getColor(p + vec2(step(fi, 2.001), mod(fi, 2.001)) * vec2(0.002, 0.0028));\n    }\n    return col / float(num);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 mouse = (iMouse.zw / iResolution.xy) * 2.0 - 1.0;\n    mouse.x *= iResolution.x / iResolution.y;\n    \n    if (distance(mouse, uv) < 0.75) {\n        float zoom = 5.0;\n        uv += mouse * (zoom - 1.0);\n        uv /= zoom;\n    }\n    \n    #ifdef AA\n    \tfloat fill = aaGetColor(uv);\n    #else\n    \tfloat fill = getColor(uv);\n    #endif\n    \n    // Simple vignette effect by Ippokratis\n    // https://www.shadertoy.com/view/lsKSWR\n    uv = fragCoord.xy / iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 200.0;\n    vig = pow(vig, 0.1);\n    fragColor = vec4(vec3(vig * fill), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}