{
    "Shader": {
        "info": {
            "date": "1458566448",
            "description": "Test different smooth minimum and maximum functions.\nAdded mouse control to magnify regions, thanks to spalmer for the suggestions.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dtXRn",
            "likes": 24,
            "name": "smin and smax",
            "published": 3,
            "tags": [
                "function",
                "smoothminimum",
                "smoothmaximum"
            ],
            "usePreview": 0,
            "username": "EvilRyu",
            "viewed": 3231
        },
        "renderpass": [
            {
                "code": "// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// turn on smin/smax\n#define SMIN_ON true\n#define SMAX_ON true\n\n#define SHOW_SMIN0 true\n#define SHOW_SMIN1 true\n#define SHOW_SMIN2 true\n#define SHOW_SMIN3 true\n\n#define SHOW_SMAX0 true\n#define SHOW_SMAX1 true\n#define SHOW_SMAX2 true\n\n// polynomial one, red\nfloat smin0( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// only works on positive numbers,  green\nfloat smin1(float a, float b, float k)\n{\n    return pow((0.5 * (pow(a, -k) + pow(b, -k))), (-1.0 / k));\n}\n\n// has a log2 off when they are equal,  blue\nfloat smin2(float a, float b, float k)\n{\n    return -log(exp(-k * a) + exp(-k * b)) / k;\n}\n\n// works for both positive and negative numbers and no problem when a == b,  purple\nfloat smin3(float a, float b, float k)\n{\n    float x = exp(-k * a);\n    float y = exp(-k * b);\n    return (a * x + b * y) / (x + y);\n}\n\n////////////////////////////////////////////////////\n\nfloat smax0(float a, float b, float k)\n{\n    return smin1(a, b, -k);\n}\n\nfloat smax1(float a, float b, float k)\n{\n    return log(exp(k * a) + exp(k * b)) / k;\n}\n\nfloat smax2(float a, float b, float k)\n{\n    return smin3(a, b, -k);\n}\n\n//////////////////////////////////////////////\n\nfloat time;\n\nfloat f0(float x)\n{\n    return x*x;\n}\n\nfloat f1(float x)\n{\n    return abs(sin(x*3.0 + time));\n}\n//////////////////////////////////////////////\n\nfloat fmin0(float x)\n{\n    return smin0(f0(x), f1(x), 1.0);\n}\n\nfloat fmin1(float x)\n{\n    return smin1(f0(x), f1(x), 8.0);\n}\n\nfloat fmin2(float x)\n{\n    return smin2(f0(x), f1(x), 32.0);\n}\n\nfloat fmin3(float x)\n{\n    return smin3(f0(x), f1(x), 8.0);\n}\n\n/////////////////////////////////////////////\n\nfloat fmax0(float x)\n{\n    return smax0(f0(x), f1(x), 8.0);\n}\n\nfloat fmax1(float x)\n{\n    return smax1(f0(x), f1(x), 26.0);\n}\n\nfloat fmax2(float x)\n{\n    return smax2(f0(x), f1(x), 8.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    time = iTime;\n    if (iMouse.z > 0.)\n    {\n        fragCoord = (fragCoord - iMouse.xy) * .2 + iMouse.xy;\n        time *= .1;\n    }\n    float t = 4.0/iResolution.y;\n    \n    vec2  p = (-iResolution.xy + 2.0*(fragCoord))/iResolution.y;\n\tp.y += 0.8;\n    \n    vec3 col = vec3(0.2);\n    float eps = 0.0001;\n    \n    float f, df, d;\n    \n    /* Draw the two curves, y=x^2 and y = sin(x) */\n    f = f0(p.x);\n    df = (f - f0(p.x + eps)) / eps;\n    d = abs(p.y - f) / sqrt(1.0 + df * df);\n    col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, t, d));\n      \n   \tf = f1(p.x);\n    df = (f - f1(p.x + eps)) / eps;\n    d = abs(p.y - f) / sqrt(1.0 + df * df);\n    col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, t, d));\n    \n    /* draw smooth min max */\n    \n    if(SMIN_ON)\n    {\n        if(SHOW_SMIN0)\n        {\n            f = fmin0(p.x);\n            df = (f - fmin0(p.x + eps)) / eps;\n            d = abs(p.y - f) / sqrt(1.0 + df * df);\n            col = mix(col, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, t * 1.5, d));\n        }\n\n        if(SHOW_SMIN1)\n        {\n        \tf = fmin1(p.x);\n        \tdf = (f - fmin1(p.x + eps)) / eps;\n        \td = abs(p.y - f) / sqrt(1.0 + df * df);\n        \tcol = mix(col, vec3(0.0, 1.0, 0.0), 1.0 - smoothstep(0.0, t, d));\n        }\n\n        if(SHOW_SMIN2)\n        {\n            f = fmin2(p.x);\n            df = (f - fmin2(p.x + eps)) / eps;\n            d = abs(p.y - f) / sqrt(1.0 + df * df);\n            col = mix(col, vec3(0.0, 0.0, 1.0), 1.0 - smoothstep(0.0, t*2.5, d));\n        }\n\n        if(SHOW_SMIN3)\n        {\n            f = fmin3(p.x);\n            df = (f - fmin3(p.x + eps)) / eps;\n            d = abs(p.y - f) / sqrt(1.0 + df * df);\n            col = mix(col, vec3(1.0, 0.0, 1.0), 1.0 - smoothstep(0.0, t, d));\n        }\n    }\n    \n    if(SMAX_ON)\n    {\n        if(SHOW_SMAX0)\n        {\n            f = fmax0(p.x);\n            df = (f - fmax0(p.x + eps)) / eps;\n            d = abs(p.y - f) / sqrt(1.0 + df * df);\n            col = mix(col, vec3(0.0, 1.0, 1.0), 1.0 - smoothstep(0.0, t*2., d));\n        }\n\n        if(SHOW_SMAX1)\n        {\n            f = fmax1(p.x);\n            df = (f - fmax1(p.x + eps)) / eps;\n            d = abs(p.y - f) / sqrt(1.0 + df * df);\n            col = mix(col, vec3(1.0, 0.0, 1.0), 1.0 - smoothstep(0.0, t*3., d));\n        }\n\n        if(SHOW_SMAX2)\n        {\n            f = fmax2(p.x);\n            df = (f - fmax2(p.x + eps)) / eps;\n            d = abs(p.y - f) / sqrt(1.0 + df * df);\n            col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, t*2., d));\n        }\n    }\n   \n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}