{
    "Shader": {
        "info": {
            "date": "1724583429",
            "description": "source https://www.shadertoy.com/view/MflBWl https://www.shadertoy.com/view/MdXSzS",
            "flags": 0,
            "hasliked": 0,
            "id": "4cjBRz",
            "likes": 3,
            "name": "galaxy eye",
            "published": 3,
            "tags": [
                "eye",
                "galaxy"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 107
        },
        "renderpass": [
            {
                "code": "const vec3 IRIS_COL = vec3(0.043,0.584,0.855);\nconst vec3 PUPIL_COL = IRIS_COL * 0.1;\nconst float SIZE = 0.7;\nconst float PUPIL = SIZE * 0.4;\nconst float NOISE = 17.5;\n\nvec3 hue(vec3 col, float hue) {\n    return mix(vec3(dot(vec3(0.333), col)), col, cos(hue)) + cross(vec3(0.577), col) * sin(hue);\n}    \n\nfloat hash12(vec2 p) {\n\tvec3 p3 = fract(p.xyx * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise(vec2 p) {\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n    f *= f * f * (f * (6.0 * f - 15.0) + 10.0);\n\tfloat res = mix(\n\t\tmix(hash12(i), hash12(i + vec2(1, 0)), f.x),\n\t\tmix(hash12(i + vec2(0, 1)), hash12(i + vec2(1)), f.x), f.y);\n\treturn res;\t\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    fragColor = vec4(0, 0, 0, 1);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    float l = length(uv);\n    float f = length(fwidth(uv)) * 2.0;\n    if (l > SIZE + f) return;\n \n\tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .27)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv, 0.00001*iTime);\n\t\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.7, .0, len);\n\tv2 *= smoothstep(.0, .2, len);\n\tv3 *= smoothstep(.15, .50, len);\n\t\n\tvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n    float pupil_size = PUPIL * (0.05 * sin(iTime) + 1.0);\n    float nl = max(0.0, l - pupil_size) / (SIZE - pupil_size);\n    float bump = (nl * (1.0 - nl));\n    float a = atan(uv.y, uv.x) + bump * 0.3;\n    float sl = 0.5 + 0.5 * sqrt(l);\n    vec2 nv = vec2(cos(a), sin(a)) * sl;\n    float rl = (1.0 - nl * nl * nl);\n    float iris_exposure = rl * (noise(nv * NOISE) - 0.5);\n    nv = vec2(cos(a + 0.1), sin(a + 0.1)) * sl;\n    nv*=ma;\n    float iris_brightness = rl * (noise(nv * NOISE) - 0.5);\n    nl = max(0.0, l - PUPIL) / (SIZE - PUPIL);\n    \n    float iris = smoothstep(SIZE + f, SIZE - f, l);\n    float m = 0.1;\n    float pupil = smoothstep(pupil_size + m * (0.5 + iris_exposure), pupil_size - m * (0.5 + iris_brightness), l);\n    \n    vec3 iris_col = (iris_exposure + 1.0) * IRIS_COL;\n    vec3 pupil_col = PUPIL_COL;\n    \n    iris_brightness = smoothstep(0.0, 1.0, abs(iris_brightness));\n    // iris highlights\n    iris_col = mix(iris_col, iris_exposure + vec3(1), iris_brightness * 2.0);\n    iris_col += 2.0 * abs(iris_exposure - iris_brightness) * (1.0 - nl) * nl;\n    // iris outer darken\n    iris_col *= smoothstep(1.3, 0.7, nl);\n    // iris hue\n    float hn = noise(uv * 2.5) - 0.5;\n    iris_col = hue(iris_col, 0.4 * hn);\n    \n    float gloss = noise(uv * (1.0 - nl) * 12.5);\n    gloss *= gloss;\n    gloss = smoothstep(0.2, 0.8, gloss);\n    gloss *= gloss * rl;\n    gloss *= (smoothstep(0.1, 1.1, a) * smoothstep(-0.5, 0.9, a)*0.9 +\n              smoothstep(-3.1, -2.1, a) * smoothstep(0.4, -1.4, a) * 0.5);\n    iris_col += gloss * 1.5;\n    \n    // sharpen\n    iris_col += rl * iris_exposure * (1.0 - rl);\n    \n    // extra hue (optional, bit expensive)\n    float he = noise(hn * 3.0 - uv * 6.0) + noise(hn * 4.0 + uv * 12.0) * 0.5;\n    he = sqrt(he);\n    iris_col = hue(iris_col, he - 0.5);\n  \n    vec3 col2 = mix(iris_col, pupil_col, pupil);\n    col2 *= iris;  \n\n    fragColor = vec4(col2*vec3(0.3,0.5,1.)+col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}