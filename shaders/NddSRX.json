{
    "Shader": {
        "info": {
            "date": "1633623264",
            "description": "you must input a normal distribution texture in buffer A iChannel1, and a jet-colourmap texture in buffer A ichannel2.",
            "flags": 32,
            "hasliked": 0,
            "id": "NddSRX",
            "likes": 2,
            "name": "heat diffusion",
            "published": 3,
            "tags": [
                "heat"
            ],
            "usePreview": 0,
            "username": "elamolo",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "// Conway's Game of Life\n// https://iquilezles.org/articles/gameoflife\n//\n// State based simulation. Buffer A contains the simulated world,\n// and it reads and writes to itself to perform the simulation.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4( texelFetch( iChannel0, ivec2(fragCoord), 0 ).xyzw );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// I implemented three variants of the algorithm with different\n// interpretations:\n//\n// VARIANT = 0: traditional\n// VARIANT = 1: box fiter\n// VARIANT = 2: high pass filter\n#define VARIANT 0\n\nfloat Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? texelFetch(iChannel0, p, 0 ).w : texelFetch(iChannel0, p, 0 ).w;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n    \n#if VARIANT==0\n    float d0 = 0.5;\n    float d1 = 0.125;\n    float d2 = 0.0;\n\n\t\n    float k = 0.0;\n    float x = 0.0;\n    int n = 5;\n    \n    for(int i=-n;i<=n;i++){\n        for(int j=-n;j<=n;j++){\n            x = x+texture(iChannel1, vec2(float(i+n)+0.5,float(j+n)+0.5)/float(2*n+1)).x;\n            }\n        }\n    \n    for(int i=-n;i<=n;i++){\n        for(int j=-n;j<=n;j++){\n            k = k + Cell(px+ivec2(int(i),int(j)))*(1.0/x)*texture(iChannel1, vec2(float(i+n)+0.5,float(j+n)+0.5)/float(2*n+1)).x;        \n            }\n        }\n        \n    /*    \n    float k =    d2*Cell(px+ivec2(-5,-5)) + d1*Cell(px+ivec2(0,-5)) + d2*Cell(px+ivec2(5,-5))\n        +  d1*Cell(px+ivec2(-5, 0))+ d0*Cell(px)               +  d1*Cell(px+ivec2(5, 0))\n        + d2*Cell(px+ivec2(-5, 5)) +  d1*Cell(px+ivec2(0, 5)) + d2*Cell(px+ivec2(5, 5));\n          */  \n    float e = Cell(px);\n    float f = k;\n    \n#endif\n    \n\n    if( iFrame==0 ) f = 100.0*step(0.99, hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1)));\n    \n    float fx = fragCoord.x-iMouse.x;\n    float fy = fragCoord.y-iMouse.y;\n    vec4 m = iMouse;\n    if (sign(m.z)>0.0){\n    f = f + 10.0*(1.0-step(10.0, (fx*fx+fy*fy)));\n    }\n\t\n\tfragColor = vec4( texture(iChannel2,vec2(f/4.0,0.5)).xyz, f );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}