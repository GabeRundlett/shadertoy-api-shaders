{
    "Shader": {
        "info": {
            "date": "1486659030",
            "description": "Colliding balls (lots)",
            "flags": 32,
            "hasliked": 0,
            "id": "MsfyRn",
            "likes": 45,
            "name": "More Balls",
            "published": 3,
            "tags": [
                "raytracing",
                "dynamics",
                "collisions"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1400
        },
        "renderpass": [
            {
                "code": "// \"More Balls\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Box shape changes with time; brief periodic gravity reversals; mouse controls \n// rotation axis direction.\n\nfloat PrBoxDf (vec3 p, vec3 b);\nmat3 QtToRMat (vec4 q);\nvec4 Loadv4 (int idVar);\nvec3 HsvToRgb (vec3 c);\n\n#define S_BIG  1  // big/small system - must also change in buffer shaders\n#if S_BIG\nconst int nBall = 512;\n#else\nconst int nBall = 216;\n#endif\n\nvec3 vnBall, rdSign, ltDir, hbSize, vnBlk;\nfloat dstFar;\nint idObj, idBall;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec4 sLen, rsLen;\n  vec3 eWid;\n  float dMin, d;\n  dMin = dstFar;\n  sLen = vec4 (hbSize - 0.5, 0.);\n  rsLen = vec4 (sLen.xyz * rdSign, 0.);\n  eWid = vec3 (0.04);\n  d = min (min (\n     PrBoxDf (p - rsLen.xww, eWid + sLen.wyz),\n     PrBoxDf (p - rsLen.wyw, eWid + sLen.xwz)),\n     PrBoxDf (p - rsLen.wwz, eWid + sLen.xyw));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  p = abs (p);\n  d = min (min (\n     PrBoxDf (p - sLen.wyz, eWid + sLen.xww),\n     PrBoxDf (p - sLen.xwz, eWid + sLen.wyw)),\n     PrBoxDf (p - sLen.xyw, eWid + sLen.wwz));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 60; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec4 p;\n  vec3 u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    u = ro - p.xyz;\n    rad = 0.46 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n        idBall = n;\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat BallChqr (int idBall, vec3 vnBall)\n{\n  vec3 u;\n  u = vnBall * QtToRMat (Loadv4 (4 + 4 * idBall + 2));\n  return step (0., sign (u.y) * sign (u.z) * atan (u.x, u.y));\n}\n\nfloat BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u;\n  float dMin, dn, df;\n  dMin = dstFar;\n  v = ro / rd;\n  tp = (hbSize - 0.44) / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    vnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return dMin;\n}\n\nfloat BlkHitSil (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp;\n  float dn, df;\n  v = ro / rd;\n  tp = (hbSize - 0.44) / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  return (df > 0. && dn < df) ? dn : dstFar;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, col2, vn, w;\n  float dstBall, dstObj, c, spec;\n  dstBall = BallHit (ro, rd);\n  rdSign = sign (rd);\n  dstObj = ObjRay (ro, rd);\n  if (min (dstBall, dstObj) < dstFar) {\n    if (dstBall < dstObj) {\n      vn = vnBall;\n      c = 33. * float (idBall) / float (nBall);\n      col = HsvToRgb (vec3 (mod (c, 1.), 1. - 0.05 * mod (c, 8.),\n         1. - 0.05 * mod (c, 13.)));\n      c = mod (c + 33./2., 33.);\n      col2 = HsvToRgb (vec3 (mod (c, 1.), 1. - 0.1 * mod (c, 8.),\n         1. - 0.05 * mod (c, 13.)));\n      col = mix (col, col2, BallChqr (idBall, vnBall));\n      spec = 0.5;\n    } else if (dstObj < dstFar) {\n      ro += rd * dstObj;\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n        w = smoothstep (0., 0.07, abs (fract (5. * ro / hbSize + 0.5) - 0.5));\n        col = vec3 (mix (vec3 (0.4, 0.5, 0.5), vec3 (0.6, 0.6, 0.5),\n           dot (abs (vn) * w.yzx * w.zxy, vec3 (1.))));\n      } else if (idObj == 2) col = vec3 (0.6, 0.6, 0.5);\n      spec = 0.2;\n    }\n    col = col * (0.3 + 0.7 * max (dot (vn, ltDir), 0.)) +\n       spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.);\n    if (BlkHit (ro, rd) < dstFar) col = mix (col,\n       vec3 (0.7, 0.7, 0.75) * (0.2 + 0.8 * max (dot (vnBlk, ltDir), 0.)) +\n       0.1 * pow (max (0., dot (ltDir, reflect (rd, vnBlk))), 64.),\n       pow (1. - abs (dot (rd, vnBlk)), 4.));\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 qtVu;\n  vec3 col, rd, ro;\n  vec2 canvas, uv, ut;\n  float b;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  hbSize = Loadv4 (0).xyz;\n  qtVu = Loadv4 (1);\n  vuMat = QtToRMat (qtVu);\n  b = length (hbSize);\n  dstFar = 10. * b;\n  rd = normalize (vec3 (uv, 6.6)) * vuMat;\n  ro = vec3 (0., 0., - 6. * b) * vuMat;\n  ltDir = normalize (vec3 (1., 2., -1.)) * vuMat;\n  if (BlkHitSil (ro, rd) < dstFar) col = ShowScene (ro, rd);\n  else col = vec3 (0., 0., 0.2 + 0.1 * uv.y);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return textureLod (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize, 0.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"More Balls\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nvec3 QtToEul (vec4 q);\nmat3 LpStepMat (vec3 a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define S_BIG  1\n#if S_BIG\nconst int nBall = 512;\n#else\nconst int nBall = 216;\n#endif\n\nvec4 qtVu;\nvec3 hbSize;\nfloat nStep;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rad)\n{\n  vec4 p, drw;\n  vec3 rmN, vmN, wmN, dr, dv, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, grav, rSep, radN, radAv,\n     fc, ft, ms, h, dt;\n  fOvlap = 1000.;\n  fricN = 5.;\n  fricS = 1.;\n  fricSW = 5.;\n  fricT = 0.5;\n  fDamp = 0.01;\n  grav = 1.5 * (1. - 2.5 * SmoothBump (0.5, 0.55, 0.01, mod (nStep / 2000., 1.)));\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  rad = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  ms = rad * rad * rad;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    rmN = p.xyz;\n    radN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    radAv = 0.5 * (rad + radN);\n    if (n != mId && rSep < radAv) {\n      fc = fOvlap * (radAv / rSep - 1.);\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((rad * wm + radN * wmN) / (rad + radN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  radAv = 0.5 * (rad + 1.);\n  drw = vec4 ((hbSize - abs (rm)) * (1. - 2. * step (0., rm)), 0.);\n  for (int nf = 0; nf < 3; nf ++) {\n    dr = (nf == 1) ? drw.wyw : ((nf == 0) ? drw.xww : drw.wwz);\n    rSep = length (dr);\n    if (rSep < radAv) {\n      fc = fOvlap * (radAv / rSep - 1.);\n      dv = vm;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross (wm, dr);\n      ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  am -= vec3 (0., grav, 0.) * QtToRMat (qtVu) + fDamp * vm;\n  dt = 0.01;\n  vm += dt * am / ms;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * ms * rad);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rad)\n{\n  vec3 e;\n  float mIdf, nbEdge;\n  nbEdge = floor (pow (float (nBall), 1./3.) + 0.1);\n  mIdf = float (mId);\n  rm = 0.9 * (floor (vec3 (mod (mIdf, nbEdge),\n      mod (mIdf, nbEdge * nbEdge) / nbEdge,\n      mIdf / (nbEdge * nbEdge))) - 0.5 * (nbEdge - 1.));\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  rad = 1. - 0.3 * Hashff (mIdf + 0.1);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool doInit)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (doInit) {\n    qtVu = EulToQt (vec3 (0., 0.5 * pi, 0.));\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, p, qm;\n  vec3 rm, vm, wm, euAng;\n  vec2 iFrag;\n  float tCur, tCurP, rad, szFac;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 4) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    OrientVu (qtVu, mPtr, mPtrP, true);\n  } else {\n    qtVu = Loadv4 (1);\n    mPtrP = Loadv4 (2);\n    stDat = Loadv4 (3);\n    nStep = stDat.x;\n    tCurP = stDat.y;\n    ++ nStep;\n    euAng = QtToEul (qtVu);\n    euAng.z += 0.001 * pi;\n    if (mPtrP.z < 0.) euAng.x += 0.00055 * pi;\n    qtVu = EulToQt (euAng);\n    OrientVu (qtVu, mPtr, mPtrP, false);\n  }\n  hbSize = vec3 (0.8 * floor (pow (float (nBall), 1./3.)));\n  szFac = 1. + 0.3 * sin (2. * pi * 0.0005 * nStep);\n  hbSize.z *= szFac;\n  hbSize.xy /= sqrt (szFac);\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, rad);\n    else Step (mId, rm, vm, qm, wm, rad);\n  }\n  if (pxId == 0) stDat = vec4 (hbSize, 0.);\n  else if (pxId == 1) stDat = qtVu;\n  else if (pxId == 2) stDat = mPtrP;\n  else if (pxId == 3) stDat = vec4 (nStep, tCur, 0., 0.);\n  else {\n    mId = pxId - (4 + 4 * mId);\n    p = (mId <= 1) ? ((mId == 0) ? vec4 (rm, rad) : vec4 (vm, 0.)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nvec3 QtToEul (vec4 q)\n{\n  vec3 e;\n  float s, t;\n  t = dot (q.xy, q.xy);\n  s = 2. * sqrt (max (t * (1. - t), 0.));\n  e.y = atan (s, 1. - 2. * t);\n  if (s != 0.) e.xz = \n     vec2 (atan (q.x * q.z + q.y * q.w, q.x * q.w - q.y * q.z),\n           atan (q.x * q.z - q.y * q.w, q.x * q.w + q.y * q.z));\n  else e.xz = vec2 (2. * atan (q.z, q.w), 0.);\n  return e;\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return textureLod (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize, 0.0);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"More Balls\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nvec3 QtToEul (vec4 q);\nmat3 LpStepMat (vec3 a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define S_BIG  1\n#if S_BIG\nconst int nBall = 512;\n#else\nconst int nBall = 216;\n#endif\n\nvec4 qtVu;\nvec3 hbSize;\nfloat nStep;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rad)\n{\n  vec4 p, drw;\n  vec3 rmN, vmN, wmN, dr, dv, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, grav, rSep, radN, radAv,\n     fc, ft, ms, h, dt;\n  fOvlap = 1000.;\n  fricN = 5.;\n  fricS = 1.;\n  fricSW = 5.;\n  fricT = 0.5;\n  fDamp = 0.01;\n  grav = 1.5 * (1. - 2.5 * SmoothBump (0.5, 0.55, 0.01, mod (nStep / 2000., 1.)));\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  rad = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  ms = rad * rad * rad;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    rmN = p.xyz;\n    radN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    radAv = 0.5 * (rad + radN);\n    if (n != mId && rSep < radAv) {\n      fc = fOvlap * (radAv / rSep - 1.);\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((rad * wm + radN * wmN) / (rad + radN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  radAv = 0.5 * (rad + 1.);\n  drw = vec4 ((hbSize - abs (rm)) * (1. - 2. * step (0., rm)), 0.);\n  for (int nf = 0; nf < 3; nf ++) {\n    dr = (nf == 1) ? drw.wyw : ((nf == 0) ? drw.xww : drw.wwz);\n    rSep = length (dr);\n    if (rSep < radAv) {\n      fc = fOvlap * (radAv / rSep - 1.);\n      dv = vm;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross (wm, dr);\n      ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  am -= vec3 (0., grav, 0.) * QtToRMat (qtVu) + fDamp * vm;\n  dt = 0.01;\n  vm += dt * am / ms;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * ms * rad);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rad)\n{\n  vec3 e;\n  float mIdf, nbEdge;\n  nbEdge = floor (pow (float (nBall), 1./3.) + 0.1);\n  mIdf = float (mId);\n  rm = 0.9 * (floor (vec3 (mod (mIdf, nbEdge),\n      mod (mIdf, nbEdge * nbEdge) / nbEdge,\n      mIdf / (nbEdge * nbEdge))) - 0.5 * (nbEdge - 1.));\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  rad = 1. - 0.3 * Hashff (mIdf + 0.1);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool doInit)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (doInit) {\n    qtVu = EulToQt (vec3 (0., 0.5 * pi, 0.));\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, p, qm;\n  vec3 rm, vm, wm, euAng;\n  vec2 iFrag;\n  float tCur, tCurP, rad, szFac;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 4) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    OrientVu (qtVu, mPtr, mPtrP, true);\n  } else {\n    qtVu = Loadv4 (1);\n    mPtrP = Loadv4 (2);\n    stDat = Loadv4 (3);\n    nStep = stDat.x;\n    tCurP = stDat.y;\n    ++ nStep;\n    euAng = QtToEul (qtVu);\n    euAng.z += 0.001 * pi;\n    if (mPtrP.z < 0.) euAng.x += 0.00055 * pi;\n    qtVu = EulToQt (euAng);\n    OrientVu (qtVu, mPtr, mPtrP, false);\n  }\n  hbSize = vec3 (0.8 * floor (pow (float (nBall), 1./3.)));\n  szFac = 1. + 0.3 * sin (2. * pi * 0.0005 * nStep);\n  hbSize.z *= szFac;\n  hbSize.xy /= sqrt (szFac);\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, rad);\n    else Step (mId, rm, vm, qm, wm, rad);\n  }\n  if (pxId == 0) stDat = vec4 (hbSize, 0.);\n  else if (pxId == 1) stDat = qtVu;\n  else if (pxId == 2) stDat = mPtrP;\n  else if (pxId == 3) stDat = vec4 (nStep, tCur, 0., 0.);\n  else {\n    mId = pxId - (4 + 4 * mId);\n    p = (mId <= 1) ? ((mId == 0) ? vec4 (rm, rad) : vec4 (vm, 0.)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nvec3 QtToEul (vec4 q)\n{\n  vec3 e;\n  float s, t;\n  t = dot (q.xy, q.xy);\n  s = 2. * sqrt (max (t * (1. - t), 0.));\n  e.y = atan (s, 1. - 2. * t);\n  if (s != 0.) e.xz = \n     vec2 (atan (q.x * q.z + q.y * q.w, q.x * q.w - q.y * q.z),\n           atan (q.x * q.z - q.y * q.w, q.x * q.w + q.y * q.z));\n  else e.xz = vec2 (2. * atan (q.z, q.w), 0.);\n  return e;\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return textureLod (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize,0.0);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"More Balls\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nvec3 QtToEul (vec4 q);\nmat3 LpStepMat (vec3 a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define S_BIG  1\n#if S_BIG\nconst int nBall = 512;\n#else\nconst int nBall = 216;\n#endif\n\nvec4 qtVu;\nvec3 hbSize;\nfloat nStep;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rad)\n{\n  vec4 p, drw;\n  vec3 rmN, vmN, wmN, dr, dv, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, grav, rSep, radN, radAv,\n     fc, ft, ms, h, dt;\n  fOvlap = 1000.;\n  fricN = 5.;\n  fricS = 1.;\n  fricSW = 5.;\n  fricT = 0.5;\n  fDamp = 0.01;\n  grav = 1.5 * (1. - 2.5 * SmoothBump (0.5, 0.55, 0.01, mod (nStep / 2000., 1.)));\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  rad = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  ms = rad * rad * rad;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    rmN = p.xyz;\n    radN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    radAv = 0.5 * (rad + radN);\n    if (n != mId && rSep < radAv) {\n      fc = fOvlap * (radAv / rSep - 1.);\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((rad * wm + radN * wmN) / (rad + radN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  radAv = 0.5 * (rad + 1.);\n  drw = vec4 ((hbSize - abs (rm)) * (1. - 2. * step (0., rm)), 0.);\n  for (int nf = 0; nf < 3; nf ++) {\n    dr = (nf == 1) ? drw.wyw : ((nf == 0) ? drw.xww : drw.wwz);\n    rSep = length (dr);\n    if (rSep < radAv) {\n      fc = fOvlap * (radAv / rSep - 1.);\n      dv = vm;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross (wm, dr);\n      ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  am -= vec3 (0., grav, 0.) * QtToRMat (qtVu) + fDamp * vm;\n  dt = 0.01;\n  vm += dt * am / ms;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * ms * rad);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rad)\n{\n  vec3 e;\n  float mIdf, nbEdge;\n  nbEdge = floor (pow (float (nBall), 1./3.) + 0.1);\n  mIdf = float (mId);\n  rm = 0.9 * (floor (vec3 (mod (mIdf, nbEdge),\n      mod (mIdf, nbEdge * nbEdge) / nbEdge,\n      mIdf / (nbEdge * nbEdge))) - 0.5 * (nbEdge - 1.));\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  rad = 1. - 0.3 * Hashff (mIdf + 0.1);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool doInit)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (doInit) {\n    qtVu = EulToQt (vec3 (0., 0.5 * pi, 0.));\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, p, qm;\n  vec3 rm, vm, wm, euAng;\n  vec2 iFrag;\n  float tCur, tCurP, rad, szFac;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 4) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    OrientVu (qtVu, mPtr, mPtrP, true);\n  } else {\n    qtVu = Loadv4 (1);\n    mPtrP = Loadv4 (2);\n    stDat = Loadv4 (3);\n    nStep = stDat.x;\n    tCurP = stDat.y;\n    ++ nStep;\n    euAng = QtToEul (qtVu);\n    euAng.z += 0.001 * pi;\n    if (mPtrP.z < 0.) euAng.x += 0.00055 * pi;\n    qtVu = EulToQt (euAng);\n    OrientVu (qtVu, mPtr, mPtrP, false);\n  }\n  hbSize = vec3 (0.8 * floor (pow (float (nBall), 1./3.)));\n  szFac = 1. + 0.3 * sin (2. * pi * 0.0005 * nStep);\n  hbSize.z *= szFac;\n  hbSize.xy /= sqrt (szFac);\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, rad);\n    else Step (mId, rm, vm, qm, wm, rad);\n  }\n  if (pxId == 0) stDat = vec4 (hbSize, 0.);\n  else if (pxId == 1) stDat = qtVu;\n  else if (pxId == 2) stDat = mPtrP;\n  else if (pxId == 3) stDat = vec4 (nStep, tCur, 0., 0.);\n  else {\n    mId = pxId - (4 + 4 * mId);\n    p = (mId <= 1) ? ((mId == 0) ? vec4 (rm, rad) : vec4 (vm, 0.)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nvec3 QtToEul (vec4 q)\n{\n  vec3 e;\n  float s, t;\n  t = dot (q.xy, q.xy);\n  s = 2. * sqrt (max (t * (1. - t), 0.));\n  e.y = atan (s, 1. - 2. * t);\n  if (s != 0.) e.xz = \n     vec2 (atan (q.x * q.z + q.y * q.w, q.x * q.w - q.y * q.z),\n           atan (q.x * q.z - q.y * q.w, q.x * q.w + q.y * q.z));\n  else e.xz = vec2 (2. * atan (q.z, q.w), 0.);\n  return e;\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return textureLod(txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize,0.0);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"More Balls\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nvec3 QtToEul (vec4 q);\nmat3 LpStepMat (vec3 a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define S_BIG  1\n#if S_BIG\nconst int nBall = 512;\n#else\nconst int nBall = 216;\n#endif\n\nvec4 qtVu;\nvec3 hbSize;\nfloat nStep;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rad)\n{\n  vec4 p, drw;\n  vec3 rmN, vmN, wmN, dr, dv, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, grav, rSep, radN, radAv,\n     fc, ft, ms, h, dt;\n  fOvlap = 1000.;\n  fricN = 5.;\n  fricS = 1.;\n  fricSW = 5.;\n  fricT = 0.5;\n  fDamp = 0.01;\n  grav = 1.5 * (1. - 2.5 * SmoothBump (0.5, 0.55, 0.01, mod (nStep / 2000., 1.)));\n  p = Loadv4 (4 + 4 * mId);\n  rm = p.xyz;\n  rad = p.w;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  ms = rad * rad * rad;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 + 4 * n);\n    rmN = p.xyz;\n    radN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    radAv = 0.5 * (rad + radN);\n    if (n != mId && rSep < radAv) {\n      fc = fOvlap * (radAv / rSep - 1.);\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      dv = vm - vmN;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross ((rad * wm + radN * wmN) / (rad + radN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  radAv = 0.5 * (rad + 1.);\n  drw = vec4 ((hbSize - abs (rm)) * (1. - 2. * step (0., rm)), 0.);\n  for (int nf = 0; nf < 3; nf ++) {\n    dr = (nf == 1) ? drw.wyw : ((nf == 0) ? drw.xww : drw.wwz);\n    rSep = length (dr);\n    if (rSep < radAv) {\n      fc = fOvlap * (radAv / rSep - 1.);\n      dv = vm;\n      h = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * h, 0.);\n      am += fc * dr;\n      dv -= h * dr + cross (wm, dr);\n      ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n  }\n  am -= vec3 (0., grav, 0.) * QtToRMat (qtVu) + fDamp * vm;\n  dt = 0.01;\n  vm += dt * am / ms;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * ms * rad);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float rad)\n{\n  vec3 e;\n  float mIdf, nbEdge;\n  nbEdge = floor (pow (float (nBall), 1./3.) + 0.1);\n  mIdf = float (mId);\n  rm = 0.9 * (floor (vec3 (mod (mIdf, nbEdge),\n      mod (mIdf, nbEdge * nbEdge) / nbEdge,\n      mIdf / (nbEdge * nbEdge))) - 0.5 * (nbEdge - 1.));\n  vm = 2. * normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3),\n     Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = 2.5 * e;\n  rad = 1. - 0.3 * Hashff (mIdf + 0.1);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool doInit)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (doInit) {\n    qtVu = EulToQt (vec3 (0., 0.5 * pi, 0.));\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, p, qm;\n  vec3 rm, vm, wm, euAng;\n  vec2 iFrag;\n  float tCur, tCurP, rad, szFac;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 4) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    OrientVu (qtVu, mPtr, mPtrP, true);\n  } else {\n    qtVu = Loadv4 (1);\n    mPtrP = Loadv4 (2);\n    stDat = Loadv4 (3);\n    nStep = stDat.x;\n    tCurP = stDat.y;\n    ++ nStep;\n    euAng = QtToEul (qtVu);\n    euAng.z += 0.001 * pi;\n    if (mPtrP.z < 0.) euAng.x += 0.00055 * pi;\n    qtVu = EulToQt (euAng);\n    OrientVu (qtVu, mPtr, mPtrP, false);\n  }\n  hbSize = vec3 (0.8 * floor (pow (float (nBall), 1./3.)));\n  szFac = 1. + 0.3 * sin (2. * pi * 0.0005 * nStep);\n  hbSize.z *= szFac;\n  hbSize.xy /= sqrt (szFac);\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, rad);\n    else Step (mId, rm, vm, qm, wm, rad);\n  }\n  if (pxId == 0) stDat = vec4 (hbSize, 0.);\n  else if (pxId == 1) stDat = qtVu;\n  else if (pxId == 2) stDat = mPtrP;\n  else if (pxId == 3) stDat = vec4 (nStep, tCur, 0., 0.);\n  else {\n    mId = pxId - (4 + 4 * mId);\n    p = (mId <= 1) ? ((mId == 0) ? vec4 (rm, rad) : vec4 (vm, 0.)) :\n       ((mId == 2) ? qm : vec4 (wm, 0.));\n  }\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nvec3 QtToEul (vec4 q)\n{\n  vec3 e;\n  float s, t;\n  t = dot (q.xy, q.xy);\n  s = 2. * sqrt (max (t * (1. - t), 0.));\n  e.y = atan (s, 1. - 2. * t);\n  if (s != 0.) e.xz = \n     vec2 (atan (q.x * q.z + q.y * q.w, q.x * q.w - q.y * q.z),\n           atan (q.x * q.z - q.y * q.w, q.x * q.w + q.y * q.z));\n  else e.xz = vec2 (2. * atan (q.z, q.w), 0.);\n  return e;\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return textureLod (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize, 0.0);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}