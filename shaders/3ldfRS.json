{
    "Shader": {
        "info": {
            "date": "1612974732",
            "description": "Visualization showing panini projection top compared to planar projection bottom. Click to change field of view.\ntop = 180 deg fov,\nbottom = 90 deg fov.",
            "flags": 0,
            "hasliked": 0,
            "id": "3ldfRS",
            "likes": 6,
            "name": "2D Panini Projection Visualizer",
            "published": 3,
            "tags": [
                "visualization",
                "projection",
                "panini"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 569
        },
        "renderpass": [
            {
                "code": "/*Top is painini projection, red shows the projection cylinder.\nBottom is planar projection, red shows the projection plane.\n\nClick to change field of view.\ntop = 180 deg fov,\nbottom = 90 deg fov.\n\nCredit to TinyTexel for the Panini projection code https://www.shadertoy.com/view/Wt3fzB*/\n\n\n//more sample lines = slower\n#define SAMPLES 10\n\n\n#define PI 3.141592653589793\n\n\n//create color interpolation value from distance field\n#define dlv(d) clamp(1.-(d)*iResolution.y*.5,0.,1.)\n\n//blend color a to b based on b.w*c\n#define blend(a,b,c) mix(a,b,(b).w*(c))\n\n\n//draw 2d line from a to b at uv\nvec4 line(vec4 bgCol, vec2 uv, vec2 a, vec2 b, float sz, vec4 lineCol) {\n    vec2 d = uv-a, c = b-a;\n    return blend(bgCol, lineCol,\n        dlv(length(d-c*clamp(dot(d,c)/dot(c,c),0.,1.))-sz));\n}\n\n\nfloat twave(float x) {\n    return 1.-abs(fract(x)-.5)*2.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\n    //2d drawing(back to front)\n    vec4 col = vec2(.05,1).xxxy;//grey background\n    \n    //middle divider line\n    col = blend(col,vec2(.5,1).xxxy, dlv(abs(uv.y)-.01));\n    \n    //projection field of view angle in degrees\n    float FIELD_OF_VIEW = 100.+twave(iTime*.2)*79.;\n    if (iMouse.z > 0.) FIELD_OF_VIEW = 90.+90.*iMouse.y/iResolution.y;\n    \n    //panini projection\n    float fovRad = FIELD_OF_VIEW*.5*PI/180.;\n    const vec2 paniniOrigin = vec2(0.,.2);\n    \n    for (float x = -1.; x <= 1.+1e-6; x += 2./float(SAMPLES-1)) {\n        //ray direction\n        float d = 1., d2 = d*d;\n        float h = x;\n        float v = 0.;\n        {\n            float fo = PI*.5 - fovRad;\n            if (fo == 0.) fo = 1e-6;\n\n            float f = cos(fo)/sin(fo) * 2.0;\n            float f2 = f*f;\n\n            float b = (sqrt(max(0.0, pow(d+d2,2.)*(f2+f2*f2))) - (d*f+f)) / (d2+d2*f2-1.0);\n            h *= b*(.25+.75*fovRad/(PI*.5));\n        }\n        \n\n        float h2 = h*h;\n\n        float k = h2/pow(d+1.0,2.);\n        float k2 = k*k;\n\n        float discr = max(0.0, k2*d2 - (k+1.0)*(k*d2-1.0));\n\n        float cosPhi = (-k*d+sqrt(discr))/(k+1.0);\n        float S = (d+1.0)/(d+cosPhi);\n        float tanTheta = v/S;\n\n        float sinPhi = sqrt(max(0.0, 1.0-pow(cosPhi,2.)));\n        if(x < 0.0) sinPhi *= -1.0;\n\n        float s = inversesqrt(1.0+pow(tanTheta,2.));\n\n        vec2 rd = normalize(vec2(sinPhi, cosPhi));\n    \n        float rx = x*fovRad;\n        //rd = vec2(sin(rx),cos(rx));\n        \n        //draw ray line\n        col = line(col,uv, paniniOrigin,paniniOrigin+rd*.5, .01, vec4(1.,.6,.2,1));\n    }\n    \n    //draw panini projection cylinder\n    vec2 cylPos = uv-paniniOrigin;\n    col = blend(col,vec4(1,0,0,1),\n        dlv(max((abs(atan(cylPos.x,cylPos.y))-fovRad),abs(length(cylPos)-.5)-.015)));    \n    \n    \n    //standard planar projection\n    float fovTangent = tan((90.-.5*FIELD_OF_VIEW)*PI/180.);\n    const vec2 planarOrigin = vec2(0.,-.8);\n    vec2 pleft, pright;\n    \n    for (float x = -1.; x <= 1.+1e-6; x += 2./float(SAMPLES-1)) {\n        vec2 rd = normalize(vec2(x,fovTangent));//ray direction\n        \n        //map to plane\n        float pdst = (planarOrigin.y-(-.3))/-rd.y;\n        if (x <= -1.) pleft = planarOrigin+rd*pdst;\n        else pright = planarOrigin+rd*pdst;\n        \n        //draw ray line\n        col = line(col,uv, planarOrigin,planarOrigin+rd*pdst, .01, vec4(1.,.6,.2,1));\n    }\n    \n    //draw planar projection plane\n    col = line(col,uv, pleft,pright, .015, vec4(1,0,0,1));\n         \n        \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}