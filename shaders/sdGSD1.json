{
    "Shader": {
        "info": {
            "date": "1634556006",
            "description": "[url]https://inktober.com/[/url]\n#inktober2021 themes: [img]https://i.imgur.com/QjhAdpd.png[/img]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "sdGSD1",
            "likes": 18,
            "name": " Fab18 #inktober2021 \"moon\"",
            "published": 3,
            "tags": [
                "procedural",
                "swirl",
                "texture",
                "planet",
                "loopless",
                "jupiter",
                "inktober2021"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 477
        },
        "renderpass": [
            {
                "code": "// reuse \"swirls on sphere\"  https://shadertoy.com/view/ssGSDh\n\n#define H(p)       fract(sin((p)*mat3(127.1,311.7, 74.7,  269.5,183.3,246.1,  113.5,271.9,124.6))*43758.5453123)\n#define R(p,a,r) ( mix( a*dot(p,a), p, cos(r) ) + sin(r)*cross(p,a) )\n#define hue(v)     vec4( .6 + .6 * cos( 6.3*(v)  + vec3(0,23,21)  ) , 1 )\n#define S(v)       smoothstep( 0., -6./R.y, v )\n#define shad(P)    vec4(vec3( .2 + .8* max(0., dot(P,vec3(1,.5,1)))), 1)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, S,\n         U = 2.* ( 2.*u - R ) / R.y;\n\n    O-=O;\n    float r = length(U), y, l=9., t = -iTime; int i,k;\n    vec3 P;\n#define moon(d,v,w,h)                                         \\\n        S = d* vec2(2.*cos(v*t), .2*sin(v*t) );               \\\n        if ( r > 1. || S.y < 0.)                              \\\n            if ( length( S = (U-S)/w ) < 1.)                  \\\n                P = vec3( S, sqrt(1.-dot(S,S)) ),             \\\n                O +=    S( length(S) - 1. )                   \\\n                      * shad(P) * (.7+.3*hue(h)) \n    moon(1., 1.,.1,.0);\n    moon(2.,.4,.07,.5);\n    moon(3.,.2,.05,.3);\n    moon(4.,.15,.03,.0);\n    moon(5.,.1,.03,.5);\n    \n    if ( r > 1. ) return;\n    \n    vec3 P0 = vec3( U, sqrt(1.-r*r) ),         // raytracing point in sphere\n         I,F, H,D,A;\n         P = 4.*P0;\n         P.xz *= mat2(cos( .2*iTime + vec4(0,11,33,0) )); // planet rotation\n         I = floor(P), F = fract(P);           // coords in 3D grid\n\n#define dist2seed  \\\n        D = vec3( k%3, (k/3)%3, k/9 ) -1.;     /* cell offset         */  \\\n        D += H(I+D)-.5;                        /* random seed point   */  \\\n        A = normalize(I+D);                                               \\\n        D = 4.*A - I;                          /* project it on sphere ( for even radius ) */ \\\n        r = length(F-D);                       /* distance to seed    */\n\n    for ( k = 0; k < 27; k++) {                // visit neighbor cells to find closest seed point\n        dist2seed;\n     // P = R( F-D, A, 10.*smoothstep(.5,0.,r) ) + D+I; // shouldn't we blend effects ?\n        r < l ? l = r, i = k : i;              // keep closest dot \n     }\n    k = i;\n    dist2seed;\n    y = atan(P.y,length(P.xz));                                   // latitude ( to tune swirl direction & amplitude )\n    y = 4.*cos(4.*y);\n    P = R( F-D, A, y * smoothstep(.5,0.,r) ) + D+I;               // rotate coords around seed point\n       \n // O = vec4(smoothstep(12./R.y,0., l-.2) ); return;              // test: plot seed points\n    \n    S = vec2( atan(P.z,P.x) - .1*iTime, atan(P.y,length(P.xz)) ); // surface coordinates\n//  S = vec2(acos(U.x/sqrt(1.-U.y*U.y)) , asin(U.y) );            // debug\n    O += (1.-O.a) * mix( \n          smoothstep( .8, .2, texture(iChannel0, S*vec2(1,3) ) )  // swirled texture\n        * (.5+.5*hue(abs(U.y*2./3.14)))                           // color\n        , vec4(.7,.8,.9,0), 1.-abs(P0).z )                        // atmosphere\n        * S( length(U)-1.)                                        // antialiasing\n        * 1.5*shad(P0);                                           // shading\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}