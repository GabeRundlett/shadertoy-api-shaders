{
    "Shader": {
        "info": {
            "date": "1372213661",
            "description": "A simple flower (made in a rush really). I'm not very sure about the colors. It probably needs bump, a second layer of petals, some pistils, leaves, and a lady bug. Will do next time!",
            "flags": 0,
            "hasliked": 0,
            "id": "4dlGD7",
            "likes": 82,
            "name": "Flower",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "distancefield"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 12788
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*157.0;\n\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+157.0), hash(n+158.0),f.x),f.y);\n}\n\nconst mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*noise( p ); p = m2*p*2.02;\n    f += 0.2500*noise( p ); p = m2*p*2.03;\n    f += 0.1250*noise( p ); p = m2*p*2.01;\n    f += 0.0625*noise( p );\n\n    return f/0.9375;\n}\n\n//----------------------------------------------------------------\n\nvec2 sdSegment( vec3 a, vec3 b, vec3 p )\n{\n\tvec3 pa = p - a;\n\tvec3 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\t\n\treturn vec2( length( pa - ba*h ), h );\n}\n\nfloat smin( float a, float b )\n{\n    float k = 0.01;\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 map( vec3 p )\n{\n\tvec3 op = p;\n\t{\n\tfloat an = 0.35;\n\tfloat co = cos( an );\n\tfloat si = sin( an );\n\tmat2  ma = mat2( co, -si, si, co );\n\tp.xy = ma*p.xy;\n\t}\n\t\n\tp.y -= 4.0;\n\n    float d = length( (p-vec3(0.0,-0.1,0.0))*vec3(1.0,3.0,1.0)) - 0.4;\n\tvec2 res = vec2( d/3.0, 1.0 );\n\t\n\n\tif( p.y>0.0 )\n\t{\n\n\t// palito\n\tvec3 pp = p;\n\t\t\n\t\t//vec3 q = p - vec3(0.0,-0.25,0.0);\n\t\tvec3 q = (p-vec3(0.0,-0.15,0.0))*vec3(1.0,1.5,1.0);\n\t\tpp.y = length(q);\n\t\t#if 1\n\t\tpp.x = 0.35*0.5*atan( q.x, q.z );\n\t\tpp.z = 0.35*acos( q.y/length(q) );\n\t\t#else\n\t\t//pp.xz *= 1.0 + 2.0*length(p.xz)/(0.5+p.y);\n\t\tpp.xz -= normalize(pp.xz) * p.y * 0.5;\n\t\t\n\t\t#endif\n\t\n\tpp.xz = (mod(20.0*(pp.xz+0.5),1.0) - 0.5)/20.0;\n\t\n\t\t\n\t\tfloat hh = 0.0;\n\tvec2 h = sdSegment( vec3(0,0.0,0.0), vec3(0.0,0.5+hh,0.0), pp );\n\tfloat sr = 0.01 + 0.001*smoothstep( 0.9,0.99,h.y );\n\td = h.x - sr;\n\td *= 0.5;\n\tres.x = smin( d, res.x );\n\t}\n\n\tp.xz = abs(p.xz);\n\n\t\n\tfor( int i=0; i<4; i++ )\n\t{\n\t\tfloat an = 6.2831*float(i)/14.0;\n\t\tfloat id = an;\n\t\tfloat co = cos( an );\n\t\tfloat si = sin( an );\n\t\tmat2  ma = mat2( co, -si, si, co );\n\n\t\tvec2  r = ma*p.xz;//-vec2(1.0,0.0));\n\t\tvec3  q = vec3( r.x, p.y, r.y );\n\n\t\tan = 0.02*sin(10.0*an);\n\n\t\tco = cos(0.2+an);\n\t\tsi = sin(0.2+an);\n\t\tq.xy = mat2( co, -si, si, co )*q.xy;\n\n\t\tfloat ss = 1.0 + 0.1*sin(171.0*an);\n\t\tq.x *= ss;\n\t\tq.x -= 1.0;\n\t\tq.y -= 0.15*q.x*(1.0-q.x);\n\t\t\n        float ra = 1.0 - 0.3*sin(1.57*q.x);\n\t\td = 0.05*(length( q*vec3(1.0,20.0,4.0*ra) ) - 1.0*0.8);\n\t\t\n        if( d<res.x ) res = vec2( d, 2.0 );\n\t}\n\t\n\t{\n    p = op;\t\n\tfloat an = 0.35*clamp( p.y/3.8, 0.0, 1.0 );\n\tfloat co = cos( an );\n\tfloat si = sin( an );\n\tmat2  ma = mat2( co, -si, si, co );\n\tp.xy = ma*p.xy;\n\n\tvec2 h = sdSegment( vec3(0,0.0,0.0), vec3(0.0,4.0-0.2,0.0), p );\n\td = h.x - 0.07;\n    if( d<res.x ) res = vec2( d, 3.0 );\n\t}\n\n\treturn res;\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 10.0;\n\tfloat precis = 0.001;\n    float h = 1.0;\n    float t = 0.0;\n\tfloat d = 0.0;\n    float m = 1.0;\n    for( int i=0; i<100; i++ )\n    {\n        if( h<precis || t>maxd ) break;\n        t += h;\n\t    vec2 res = map( ro+rd*t );\n        h = res.x;\n\t\td = res.y;\n\t\tm = res.y;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec3( t, d, m );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.002,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n\tfloat h = 1.0;\n    for( int i=0; i<50; i++ )\n    {\n        h = map(ro + rd*t).x;\n        res = min( res, k*h/t );\n\t\tt += clamp( h, 0.02, 2.0/50.0 );\n\t\tif( res<0.01 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\n\nfloat occlusion( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    for( int aoi=0; aoi<16; aoi++ )\n    {\n\t\tvec3 aopos = -1.0+2.0*hash3(float(aoi)*213.47);\n\t\taopos *= sign( dot(aopos,nor) );\n\t\taopos = pos + aopos*0.2;\n        float dd = clamp( map( aopos ).x, 0.0, 1.0 );\n        totao += dd;\n    }\n\ttotao /= 16.0;\n\t\n    return clamp( totao*8.0, 0.0, 1.0 );\n}\n\n\nvec3 lig = normalize(vec3(0.5,0.35,-0.7));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n\n    //-----------------------------------------------------\n    // animate\n    //-----------------------------------------------------\n\t\n\tfloat ctime = iTime;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\t\n\tfloat an = 3.5 + 0.05*ctime - 6.2831*(m.x-0.5);\n\n    vec3  ta = vec3(-1.0,3.5,0.0);\n\tvec3  ro = ta + 1.1*vec3(2.0*sin(an),1.5,2.0*cos(an));\n\tfloat rr = 0.0*sin(0.04*iTime) ;\n\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(rr),cos(rr),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = vec3(1.0);\n\n\tcol = texture( iChannel0, rd ).yxz;\n\tcol = pow( col, vec3(2.0,2.0,2.2) )*6.0;\n\t\n\t// raymarch\n    vec3 tmat = intersect(ro,rd);\n    if( tmat.z>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n\t\t\n        // materials\n\t\tvec4 mate = vec4(0.0);// col, spec\n\t\tvec2 mate2 = vec2(0.0);\n\n        if( tmat.z<1.5 )\n\t\t{\n\t\t\tfloat an = 0.35;\n\t\t\tfloat co = cos( an );\n\t\t\tfloat si = sin( an );\n\t\t\tmat2  ma = mat2( co, -si, si, co );\n\t\t\tvec3 uvw = pos;\n\t\t\tuvw.xy = ma*pos.xy;\n\t\t\t\n\t\t\tmate = vec4(0.9,0.15,0.1,0.8);\n\t\t\tfloat ff = 1.0 - smoothstep( 0.1, 0.3, length(uvw.xz) );\n\t\t\tmate.xyz = mix( mate.xyz, vec3(0.7,0.1,0.0), ff );\n            mate.xyz *= 0.5;\n\n\t\t}\n\t\telse if( tmat.z<2.5 )\n\t\t{\n\t\t\tmate = vec4(0.6,0.6,0.6,0.8);\n\t\t\t\n\t\t\tfloat an = 0.35;\n\t\t\tfloat co = cos( an );\n\t\t\tfloat si = sin( an );\n\t\t\tmat2  ma = mat2( co, -si, si, co );\n\t\t\tvec3 uvw = pos;\n\t\t\tuvw.xy = ma*pos.xy;\n\n\n\t\t\tfloat a = atan( uvw.z, uvw.x );\n\t\t\tfloat r = length( uvw.xz );\n\t\t\t\n\t\t\tfloat rr = smoothstep( 0.0, 1.0, 0.5 - 0.5*cos(1.0*14.0*a) );\n\t\t\t\n\t\t\tfloat ll = 1.0-smoothstep( 0.5, 1.3, r + 0.16*rr);\n\t\t\t\n            mate.xyz = mix( mate.xyz, vec3(0.4,0.3,0.1), ll );\n\n            float mo = noise( 10.0*vec2(8.0*a,0.3*r) );\t\t\t\n\t\t\t\n\t\t\tmate.xyz -= 0.2*mo*(1.0-smoothstep(0.4,1.5,r));\n\t\t\t\n\t\t\tmo = mix( 0.0, 1.0-mo*mo, smoothstep(0.5,1.0,r) );\n\t\t\tmate = mix( mate, vec4(0.7,0.4,0.0,0.0), 0.1*mo );\n\n\n\t\t\t// borders\n\t\t\n\t\t\tfloat nv = noise( 8.0*vec2(4.0*a,0.1*r) );\t\t\t\n\t\t\trr = smoothstep( 1.4,1.8,r + 0.5*nv);\n\t\t\tmate = mix( mate, 0.2*vec4(0.6,0.2,0.3,0.0), rr );\n\n\t\t\t// dots\n\t\t\tfloat sp = clamp((r-0.8)*5.0,0.0,1.0)*smoothstep(0.6,0.9,fbm( 64.0*uvw.xz ))*smoothstep(0.6,0.7,nor.y);;\n\t\t\tmate.xyz -= vec3(0.4,0.6,0.8)*sp*0.3*(1.0-rr);\n\t\t\tmate.xyz = max( mate.xyz, 0.0 );\n\n\t\t\tmate2.x = 2.0*(1.0-ll);\n\t\t\tmate2.x *= 1.0 + smoothstep( 0.0, 2.0, 0.5 - 0.5*cos(1.0*14.0*a) );\n\t\t\t\t\n\t\t\t// more face occ...\n\t\t\tmate.xyz *= clamp(r*2.0,0.0,1.0);\n            mate.xyz *= 0.6;\n\t\t}\n\t\telse if( tmat.z<3.5 )\n\t\t{\n\t\t\tmate = 0.3*vec4(0.02,0.1,0.0,0.2);\n\t\t\tfloat e = pow( max(1.0+dot( rd, nor ),0.0), 1.0 );\n\t\t\t\n\t\t\tmate.xyz += vec3(e)*0.2*vec3(0.8,1.0,0.5);\n\t\t}\n\t\t\n\t\t// lighting\n\t\tfloat occ = occlusion( pos, nor );\n        float amb = 0.5 + 0.5*nor.y;\n\t\tfloat bou = clamp(-nor.y,0.0,1.0);\n\t\tfloat dif = max(dot(nor,lig),0.0);\n        float bac = max(0.3 + 0.7*dot(nor,-lig),0.0);\n\t\tfloat sha = 0.0; if( dif>0.01 ) sha=softshadow( pos+0.001*nor, lig, 0.005, 64.0 );\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 3.0 );\n        float spe = max( 0.0, pow( clamp( dot(lig,ref), 0.0, 1.0), 16.0 ) );\n\t\tfloat bif = clamp(0.4+0.6*dot(-nor,lig),0.0,1.0);\n\t\n\t\t\n\t\t// lights\n\t\tvec3 brdf = vec3(0.0);\n        brdf += 8.0*dif*vec3(1.20,0.90,0.50)*pow(vec3(sha),vec3(1.0,1.2,1.5))*(0.8+0.2*occ);\n        brdf += 1.0*bou*vec3(0.10,0.20,0.10)*occ;\n\t\tbrdf += 1.4*amb*vec3(0.10,0.25,0.40)*occ*(0.5+0.5*nor.y);\n\t\tbrdf += 1.0*bac*vec3(0.40,0.35,0.30)*occ;\n        brdf += 1.0*fre*vec3(1.00,1.00,1.00)*occ*2.0*mate.w*(0.5+0.5*dif*sha);\n\t\tbrdf += 1.0*spe*vec3(1.00,1.00,1.00)*occ*1.0*sha;\n\t\tbrdf += 1.0*bif*vec3(1.80,1.50,0.70)*occ*0.2*mate.xyz*mate2.x;//*(0.8+0.2*sha*dif);\n\n        // surface-light interaction\n\t\tcol = mate.xyz* brdf + vec3(2.5)*mate.w*spe*sha;\n        \n        col = pow(col,vec3(0.8,0.9,1.0));\n\t}\n\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\t\n\t// vigneting\n    col *= 0.7 + 0.3*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.2 );\n\n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}