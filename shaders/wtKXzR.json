{
    "Shader": {
        "info": {
            "date": "1582365425",
            "description": "Provide distorded electrycity field",
            "flags": 0,
            "hasliked": 0,
            "id": "wtKXzR",
            "likes": 5,
            "name": "Alien Fuel",
            "published": 3,
            "tags": [
                "2d",
                "plasma",
                "glow"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 434
        },
        "renderpass": [
            {
                "code": "#define pi acos(-1.)\n\nvec2 rand(vec2 uv){\n    uv.x += 0.0004;\n    uv.y += 0.0007;\n    uv.x = floor(uv.x / 0.001) * 0.001;\n    uv.y = floor(uv.y / 0.001) * 0.001;\n    uv += vec2(13., 63.);\n    uv.x = fract(sin(uv.x * 10. * uv.y * uv.y)  * 438.5453);\n    uv.y = fract(cos(uv.x * uv.x * 10. * uv.y)  * 561.5453);\n    return uv;\n}\n\nvec2 uvtransform(vec2 uv, float strength){\n    float clsz = 0.01; // cellsize\n    //vec2 nwuv = float(int(uv / clsz)) * clsz;\n    int X = int(uv.x / clsz);\n    int Y = int(uv.y / clsz);\n    vec2 nwuv = vec2(float(X), float(Y)) * clsz;\n    vec2 A = mix(rand(nwuv + vec2(0., 0.)  ), rand(nwuv + vec2(clsz, 0.)  ), (uv - nwuv).x / clsz);\n    /*vec2 A = mix(\n        rand(vec2(float(X), float(Y))), \n        rand(vec2(float(X + 1), float(Y))), \n        (uv - nwuv).x / clsz\n    );*/\n    vec2 B = mix(rand(nwuv + vec2(0., clsz)), rand(nwuv + vec2(clsz, clsz)), (uv - nwuv).x / clsz);\n    vec2 ans = mix(A, B, (uv - nwuv).y / clsz);\n    return uv + (ans - vec2(0.5)) * 2. * strength;\n}\n\nconst float freq = 120.;\n\nfloat rand(float x){\n    return fract(sin(x) * 43758.5453);\n}\n\nfloat f(float x){\n    x *= 100.;\n    return (2. + sin(x / 10.)) / (2. + cos(x / 10.)) / 20.;\n}\n\nfloat g(float x){\n    x *= 80.;\n    return pow(\n        (2. + sin(x / 10.)) / (2. + cos(x / 20.))\n    \t, 2.) /\n        2. / 40.;\n}\n\nfloat strange_func(float x){\n    float maxx = pow((exp(1.) - 1.), 0.1);\n    x *= maxx;\n    return (exp(1.) * log(pow(x, 10.) + 1.) / (pow(x, 10.) + 1.)) / \n           (exp(1.) * log(pow(maxx, 10.) + 1.) / (pow(maxx, 10.) + 1.));\n}\n\nfloat res(float x, float t){\n    //x /= iResolution.x;\n    return mix(f(x - 20. * t) + g(x + 30. * t), f(-20. * t) + g(30. * t), strange_func(abs(x - 0.5) * 2.));\n}\n\nvec4 grad(float x){\n    //vec3 col = vec3(200., 0., 200.) / 256.;\n    vec3 col = vec3(68., 27., 85.) / 256.;\n    float cntrblur = 0.005;\n    float bordblur = 0.05;\n    if (abs(x) < cntrblur){\n    \treturn vec4(mix(vec3(1.), col, abs(x) / cntrblur), 1.);\n    } else {\n        return vec4(mix(col, vec3(0.), (abs(x) - cntrblur) / bordblur), 1.);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv = uvtransform(uv, 0.01);\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float t = iTime / 100.;\n    \n    /*fragColor = vec4(\n    \tvec3(sign(mix(A, B, uv.x * 20. - floor(uv.x * 20.)) / 5. - uv.y)),\n        1.\n    );*/\n    \n    vec2 cent = vec2(iResolution.x / iResolution.y / 2., 0.5);\n    float r = 0.1;\n    vec2 cn = uv - cent;\n    float ag = (atan(cn.y, cn.x) + pi) / pi / 2.;// + iTime / 1000.;\n    float y = length(cn) - r;\n    \n    float outr = 0.3;\n    \n    float block = floor(ag * freq);\n    float timeShift = floor(iTime * 8.) * 0.3;\n    float A = rand(block + timeShift);\n    float B = rand(mod(block + 1., freq) + timeShift);\n    \n    if (length(cn) < outr){\n        fragColor = vec4(vec3(\n            1. - smoothstep(-0.01, 0.01, y - res(ag, t))\n        ), 1.);\n    } else {\n        if (res(ag, t) > 0.1){\n            fragColor = grad(mix(A, B, ag * freq - block) / 20. - y + outr);\n        }\n    }\n    \n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    /*fragColor = vec4(vec3(\n        smoothstep(-0.01, 0.01, uv.y - res(uv.x, t))\n    ), 1.);*/\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}