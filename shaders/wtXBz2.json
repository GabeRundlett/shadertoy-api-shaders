{
    "Shader": {
        "info": {
            "date": "1597169080",
            "description": "License CC0: Double ended truchet hextiling\nDecided to experiment a bit with double ended truchet with triangle tiles stacked inside hex tiles.\nInspired by work done by BigWings and Shane",
            "flags": 0,
            "hasliked": 0,
            "id": "wtXBz2",
            "likes": 5,
            "name": "Double ended truchet hex tiling",
            "published": 3,
            "tags": [
                "2d",
                "truchet",
                "hex",
                "double"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 360
        },
        "renderpass": [
            {
                "code": "// License CC0: Double ended truchet hextiling\n//  Decided to experiment a bit with double ended truchet with triangle tiles stacked inside hext iles.\n//  Inspired by work done by BigWings and Shane\n    \n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define ORT(p)          vec2((p).y, -(p).x)\n\nconst vec2 sz       = vec2(1.0, sqrt(3.0));\nconst vec2 hsz      = 0.5*sz;\nconst float is3     = 1.0/sqrt(3.0);\nconst vec2 cdir     = normalize(vec2(1.0, is3));\nconst vec2 flipy    = vec2(1.0, -1.0);\n\nconst vec2 coords[6] = vec2[6](\n  is3*cdir*1.0/3.0,\n  is3*cdir*2.0/3.0,\n  vec2(0.5, is3/6.0),\n  vec2(0.5, -is3/6.0),\n  is3*cdir*2.0/3.0*flipy,\n  is3*cdir*1.0/3.0*flipy\n  );\n\nconst vec2 dcoords[6] = vec2[6](\n  ORT(cdir),\n  ORT(cdir),\n  vec2(-1.0, 0.0),\n  vec2(-1.0, 0.0),\n  ORT(-cdir*flipy),\n  ORT(-cdir*flipy)\n  );\n\nconst int noCorners = 15;\nconst int corners[15*6] = int[15*6](\n  0, 1, 2, 3, 4, 5, \n  0, 1, 2, 4, 3, 5, \n  0, 1, 2, 5, 3, 4, \n  0, 2, 1, 3, 4, 5, \n  0, 2, 1, 4, 3, 5, \n  0, 2, 1, 5, 3, 4, \n  0, 3, 1, 2, 4, 5, \n  0, 3, 1, 4, 2, 5, \n  0, 3, 1, 5, 2, 4, \n  0, 4, 1, 2, 3, 5, \n  0, 4, 1, 3, 2, 5, \n  0, 4, 1, 5, 2, 3, \n  0, 5, 1, 2, 3, 4, \n  0, 5, 1, 3, 2, 4, \n  0, 5, 1, 4, 2, 3\n  );\n\nfloat hash(vec3 r)  { \n  return fract(sin(dot(r.xy,vec2(1.38984*sin(r.z),1.13233*cos(r.z))))*653758.5453); \n}\n\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = mix(p2, p1, vec2(dot(p1, p1) < dot(p2, p2)));\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)/2.0;\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return p.x*vec2(cos(p.y), sin(p.y));\n}\n\n// https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\nvec3 alphaBlend(vec3 back, vec4 front) {\n  vec3 colb = back.xyz;\n  vec3 colf = front.xyz;\n  vec3 xyz = mix(colb, colf.xyz, front.w);\n  return xyz;\n}\n\nfloat dot2(vec2 v) { return dot(v,v); }\n    \n// IQ Bezier: https://www.shadertoy.com/view/MlKcDD\nfloat bezier(vec2 pos, vec2 A, vec2 B, vec2 C) {    \n  const float sqrt3 = sqrt(3.0);\n  vec2 a = B - A;\n  vec2 b = A - 2.0*B + C;\n  vec2 c = a * 2.0;\n  vec2 d = A - pos;\n\n  float kk = 1.0/dot(b,b);\n  float kx = kk * dot(a,b);\n  float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;\n  float kz = kk * dot(d,a);      \n\n  float res = 0.0;\n\n  float p = ky - kx*kx;\n  float p3 = p*p*p;\n  float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n  float h = q*q + 4.0*p3;\n\n  if(h>=0.0) {   // 1 root\n      h = sqrt(h);\n      vec2 x = (vec2(h,-h)-q)/2.0;\n      vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n      float t = clamp(uv.x+uv.y-kx, 0.0, 1.0);\n      res = dot2(d+(c+b*t)*t);\n  } else {   // 3 roots\n      float z = sqrt(-p);\n      float v = acos(q/(p*z*2.0))/3.0;\n      float m = cos(v);\n      float n = sin(v)*sqrt3;\n      vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0);\n      res = min(dot2(d+(c+b*t.x)*t.x), dot2(d+(c+b*t.y)*t.y));\n      // the third root cannot be the closest. See https://www.shadertoy.com/view/4dsfRS\n      // res = min(res,dot2(d+(c+b*t.z)*t.z));\n  }\n  \n  return sqrt(res);\n}\n\nfloat bezier2(vec2 p, float f, vec2 p0, vec2 dp0, vec2 p1, vec2 dp1) {\n  float dist = length(p0 - p1);\n  float hdist = 0.5*f*dist;\n  vec2 mp0 = p0 + hdist*dp0;\n  vec2 mp1 = p1 + hdist*dp1;\n  vec2 jp = (mp0 + mp1)*0.5;\n  float d0 = bezier(p, p0, mp0, jp);\n  float d1 = bezier(p, p1, mp1, jp);\n  \n  float d = d0;\n  d = min(d, d1);\n  return d;\n}\n\nvec3 color(vec2 p, float s, float aa, vec3 col) {\n  vec2 hp = p/s;\n  vec2 hn = hextile(hp);\n  \n  vec2 pp = toPolar(hp);\n  float pn = mod1(pp.y, TAU/6.0);\n  vec2 tp = toRect(pp);\n\n  pn = mod(pn+3.0, 6.0);\n  vec3 nn = vec3(hn, pn);\n\n  float r = hash(nn);\n  int sel = int(float(noCorners)*r);\n  int off = sel*6;\n\n  const vec3 scol = vec3(0.25);\n  const vec3 bcol = vec3(1.0);\n  const float sw = 0.05;\n\n  for (int i = 0; i < 3; ++i) {\n    int c0 = corners[off + i*2 + 0];\n    int c1 = corners[off + i*2 + 1];\n    \n    int c = max(c0, c1) - min(c0, c1);\n    \n    vec2 p0 = coords[c0];\n    vec2 p1 = coords[c1];\n\n    vec2 dp0 = dcoords[c0];\n    vec2 dp1 = dcoords[c1];\n    \n    float mi = 0.5;    \n    float mx = 0.5;    \n    \n    float rr = fract(r*27.0*float(i+1));\n    switch(c) {\n      case 1:\n        mx = 1.75;\n        break;\n      case 2:\n        mx = .95;\n        break;\n      case 3:\n        mx = 1.5;\n        break;\n      case 4:\n        mx = 0.75;\n        break;\n      case 5:\n        mx = 1.95;\n        break;\n      default:\n        break;\n    }\n    \n    float f = mix(mi, mx, rr);\n    \n    float dd = (bezier2(tp, f, p0, dp0, p1, dp1)-0.01)*s;\n    \n    vec4 sc = vec4(scol, smoothstep(-sw, sw, -dd));\n    vec4 bc = vec4(bcol, smoothstep(-aa, aa, -dd));\n\n    col = alphaBlend(col, sc);\n    col = alphaBlend(col, bc);\n  }\n  \n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  float s = 0.45;\n  float aa = 2.0/RESOLUTION.y;\n  vec3 n;\n  vec3 col = vec3(0.0);\n  p += TIME*0.1;\n  col = color(p, s, aa, col);\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  vec3 col = effect(p, q);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}