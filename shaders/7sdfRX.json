{
    "Shader": {
        "info": {
            "date": "1656951248",
            "description": "By https://github.com/FabulousCodingFox",
            "flags": 0,
            "hasliked": 0,
            "id": "7sdfRX",
            "likes": 0,
            "name": "RayMarching - Sphere",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "FabulousCodingFox",
            "viewed": 52
        },
        "renderpass": [
            {
                "code": "#define MAX_DISTANCE 100.\n#define SURFACE_DISTANCE .01\n\n////////////////////////////////////////////////////////////////\n\n#define OBJECT Object(vec3(0, 1, 6), 1.)\n\nstruct Object{\n    vec3 pos;\n    float radius;\n};\n\nfloat dist(vec3 pos, Object obj){\n    return length(pos-obj.pos)-obj.radius;\n}\n\n////////////////////////////////////////////////////////////////\n\nfloat getDistance(vec3 position){\n    return min(position.y, dist(position, OBJECT));\n}\n\nstruct Ray{\n    vec3 origin, direction;\n};\n\nvec4 rayMarch(Ray ray){\n\tfloat distanceFromOrigin=0.;\n    while(true){\n    \tvec3 position = ray.origin + ray.direction * distanceFromOrigin;\n        float dist = getDistance(position);\n        distanceFromOrigin += dist;\n        if(distanceFromOrigin>MAX_DISTANCE || dist<SURFACE_DISTANCE) break;\n    }\n    return vec4(ray.origin + ray.direction * distanceFromOrigin, distanceFromOrigin);\n}\n\nvec3 getNormal(vec3 position){\n\tfloat dist = getDistance(position);\n    vec2 e = vec2(.01, 0);\n    vec3 normal = dist - vec3(\n        getDistance(position-e.xyy),\n        getDistance(position-e.yxy),\n        getDistance(position-e.yyx));\n    return normalize(normal);\n}\n\nfloat getLight(vec3 position){\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 light = normalize(lightPos-position);\n    vec3 normal = getNormal(position);\n    float dif = clamp(dot(normal, light), 0., 1.);\n    vec4 dist = rayMarch(Ray(position+normal*SURFACE_DISTANCE*2., light));\n    if(dist.w<length(lightPos-position)) dif *= .1;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    Ray ray = Ray(vec3(0, 1, 0), normalize(vec3(uv.x, uv.y, 1)));\n    vec4 result = rayMarch(ray);\n    float dif = getLight(result.xyz);\n    vec3 col = vec3(dif);\n    col = pow(col, vec3(.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}