{
    "Shader": {
        "info": {
            "date": "1490209856",
            "description": "This should make debugging shaders somewhat easier.\n\nThe 0th version was smarter and skipped leading zeros, but compile times for loops with breaks and continue are ridiculous.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsfyDl",
            "likes": 15,
            "name": "Draw floats and ints",
            "published": 3,
            "tags": [
                "draw",
                "debug",
                "int",
                "float",
                "debugging",
                "write"
            ],
            "usePreview": 1,
            "username": "ChuckNorris",
            "viewed": 1443
        },
        "renderpass": [
            {
                "code": "// This code is released into the public domain.\n// If you need a license instead, consider this CC0, MIT or BSD licensed, take your pick.\n\n// Remember to set iChannel3 to the font texture\n\n// If you want to print digits larger than 99999, increase MAX_DIGITS\n\n#define MAX_DIGITS    5\n#define BASE         10\n#define DIGIT_WIDTH  20.0\n#define DIGIT_HEIGHT 20.0\n\n#define PLUS_SIGN  vec2(11.0, 13.0)\n#define MINUS_SIGN vec2(13.0, 13.0)\n#define DOT        vec2(14.0, 13.0)\n\nint idiv(int a, int b){\n    // If you encounter precision loss, this is probably the reason.\n    return int(float(a)/float(b));\n}\n\nint imod(int a, int b){\n    return a - idiv(a, b)*b;\n}\n\n// draw a character where p is bottom left\nfloat draw_char(vec2 p, vec2 char_position){\n    vec2 uv = (gl_FragCoord.xy - p)/vec2(DIGIT_WIDTH, DIGIT_HEIGHT);\n    if (uv.x >= 0.0 && uv.x <= 1.0 && uv.y >= 0.0 && uv.y <= 1.0){\n        return texture(iChannel3, (uv + char_position)/16.0).r;\n    }\n    return 0.0;\n}\n\n// draw a digit between 0-9\nfloat draw_digit(vec2 p, int digit){\n    return draw_char(p, vec2(float(digit), 12.0));\n}\n\n// draw an unsigned integer\nfloat draw_uint(vec2 p, int number){\n    number = abs(number);\n    \n    // we draw numbers from right to left because we get digits in that order\n    p.x += float(MAX_DIGITS - 1)*DIGIT_WIDTH;\n    \n    float color = 0.0;\n    \n    // decompose number into digits\n    for (int i = 0; i < MAX_DIGITS; i++){\n        int digit = imod(number, BASE);\n        number = idiv(number, BASE);\n        \n        color += draw_digit(p, digit);\n        \n        p.x -= DIGIT_WIDTH;\n    }\n    \n    return color;\n}\n\n// draw an unsigned integer with a sign in front\nfloat draw_uint_with_sign(vec2 p, int number, bool negative){\n    // draw sign\n    float color = draw_char(p, negative ? MINUS_SIGN : PLUS_SIGN);\n    p.x += DIGIT_WIDTH;\n    \n    // draw uint\n    color += draw_uint(p, number);\n    \n    return color;\n}\n\nfloat draw_int(vec2 p, int number){\n    return draw_uint_with_sign(p, number, number < 0);\n}\n\nfloat draw_float(vec2 p, float f){\n    float color = draw_uint_with_sign(p, int(f), f < 0.0);\n    p.x += float(MAX_DIGITS + 1)*DIGIT_WIDTH;\n    \n    // draw dot\n    color += draw_char(p, DOT);\n    p.x += DIGIT_WIDTH;\n    \n    // remove integer part\n    f -= float(int(f));\n    // shift fractional part into integer part\n    f *= pow(float(BASE), float(MAX_DIGITS));\n    \n    // draw fractional part\n    color += draw_uint(p, int(f));\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float color = 0.0;\n    \n    // bottom left of text\n    vec2 position = vec2(0.0);\n    \n    color += draw_float(position, iTime);\n    \n    position.y += DIGIT_HEIGHT;\n    \n    color += draw_float(position, 3.14159265358979);\n    \n    position.y += DIGIT_HEIGHT;\n    \n    color += draw_int(position, -12345);\n    \n    fragColor = vec4(color);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}