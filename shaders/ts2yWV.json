{
    "Shader": {
        "info": {
            "date": "1587378205",
            "description": "Ungolfed version of GregRostami's [url]https://www.shadertoy.com/view/3sjcDV[/url], derived from vahidk's [url]https://www.shadertoy.com/view/tdSyDG[/url].\n\nyoshin4004's original: [url]https://twitter.com/yosshin4004/status/1251357672504360966[/url]",
            "flags": 16,
            "hasliked": 0,
            "id": "ts2yWV",
            "likes": 15,
            "name": "Rainbow Temple, Ungolfed",
            "published": 3,
            "tags": [
                "raymarching",
                "tunnel",
                "ungolf"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 974
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Rainbow Temple, Ungolfed. Matthew Arcus, mla, 2020.\n//\n// Ungolfed and rationalized version of GregRostami's Rainbow Temple:\n// https://www.shadertoy.com/view/3sjcDV, which is derived from vahidk's\n// Infinite Tunnel: https://www.shadertoy.com/view/tdSyDG which is derived\n// from yoshin4004's original: https://twitter.com/yosshin4004/status/1251357672504360966\n//\n// <mouse>: look around\n// f: floor\n// l: change light direction\n// v: vary sphere overlap\n// z: move along z axis\n//\n// Logic is mostly the same, have dinked with the lighting a little.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n\nfloat PI = 3.14159;\n\nvec3 transform(vec3 p) {\n  if (iMouse.x > 0.0) {\n    // Full range of rotation across the screen.\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  return p;\n}\n\nconst int CHAR_F = 70;\nconst int CHAR_L = 76;\nconst int CHAR_V = 86;\nconst int CHAR_Z = 90;\n\nbool key(int key) {\n  return texelFetch(iChannel3,ivec2(key,2),0).x != 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  // Orthographic projection - this is the ray direction\n  vec3 d = vec3((2.0*fragCoord-iResolution.xy)/iResolution.y, 1);\n  d = transform(d);\n  vec3 p = vec3(0); // Ray marching origin\n  if (!key(CHAR_Z)) p.z = 0.2*iTime;\n  vec3 q,p0 = p;\n  vec3 lightdir = vec3(1,1,1);\n  if (key(CHAR_L)) lightdir.xz = rotate(lightdir.xz,0.123*iTime);\n  for (int i = 0; i < 120; i++) {\n    float lfactor = 0.5;\n    float overlap = 0.65;\n    if (key(CHAR_V)) overlap += 0.1*sin(0.1*iTime);\n    float floorheight = 0.3;\n    float s = overlap-length(fract(p+0.5)-0.5);\n    if (!key(CHAR_F)) s = min(s, p.y + floorheight);\n    p += lfactor*d*s;\n    if (i == 80) {\n      // We must have hit the surface by now.\n      q = p; // Remember position\n      p -= d*.01; // Back up a little to stop self-shadowing\n      d = lightdir; // Light direction (for shadows)\n    }\n  }\n  ivec3 u = ivec3(q*5e2); // u in [0..255]\n  u = u.yzx^u.zxy;             // Mix up for chequer effect\n  u &= 255;\n  vec3 col = vec3(u)/255.0;\n  col *= 0.25*(length(p-q) + 0.9);\n  col += 0.1*(length(p-p0));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}