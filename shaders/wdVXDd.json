{
    "Shader": {
        "info": {
            "date": "1575381340",
            "description": "pythagorean tree",
            "flags": 0,
            "hasliked": 0,
            "id": "wdVXDd",
            "likes": 11,
            "name": "Pythagorean Tree",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "Hei149",
            "viewed": 509
        },
        "renderpass": [
            {
                "code": "#define rect(uv,b) length(max( abs(uv) - (b), 0.))\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    uv *= 0.25;\n    uv.y += 0.15;\n    vec3 col = vec3(0.0);\n    float d = rect(uv, vec2(0.05));\n    col += smoothstep(0.001, 0.0, d);\n\t\n    for(float i = 0.0; i < 8.; ++i){\n        uv.x = abs(uv.x);\n        uv -= vec2(0.05, 0.1);\n        uv += vec2(-uv.y, uv.x);\n        d = rect(uv, vec2(0.05));\n        col += smoothstep(1.0 / iResolution.y, 0.00, d / sqrt(2.));\n    }\n    \n    fragColor = vec4(col, 1.0);  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}