{
    "Shader": {
        "info": {
            "date": "1555632891",
            "description": "Polyshapes",
            "flags": 0,
            "hasliked": 0,
            "id": "3ts3z8",
            "likes": 5,
            "name": "Polyshapes",
            "published": 3,
            "tags": [
                "polyshapes"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 386
        },
        "renderpass": [
            {
                "code": "//Do not redistribute.\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))/2.0+GR)*iTime+100.0)\n#define saw(x) (acos(cos(x))/PI)\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n#define carpet_floor(x) (floor(x)+smoothstep(.9, 1.,(fract(x))))\n\nvoid ray_ray(in vec3 eye, in vec3 ray1, in vec3 p1, in vec3 ray2, out float t1, out float t2){\n    \n\n    float a = dot(ray1,ray1);\n    float b = dot(ray1,ray2);\n    float c = dot(ray2,ray2);\n    float d = dot(ray1,eye-p1);\n    float e = dot(eye-p1,ray2);\n\n    t1 = (b*e-c*d)/(a*c-b*b);\n    t2 = (a*e-b*d)/(a*c-b*b);\n}\n\n\n\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n\t//vec3 eye = vec3(0.0, 0.0, 3.0);\n\tvec3 eye = vec3(cos(iTime), sin(iTime*.5), sin(iTime))*2.0;\n    vec3 look = vec3(0.0, 0.0, 0.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 foward = normalize(look-eye);\n    vec3 right = normalize(cross(foward, up));\n    up = normalize(cross(right, foward));\n    vec3 ray = normalize(foward+uv.x*right+uv.y*up);\n    \n    fragColor = vec4(0.0);\n    \n \tconst float outerCount = 6.0;\n \tconst float innerCount = 6.0;\n        \n    float map = 0.0;\n    float sum = 0.0;\n    \n    for(float i = 0.0; i < outerCount; i+=1.0)\n    {\n        \n        float theta1 = i/outerCount*PI;\n        \n        for(float j = 0.0; j < innerCount; j+=1.0)\n        {\n            \n            float theta2 = j/innerCount*PI*2.;\n\n            \n            float omega1 = theta1+PI/innerCount*(carpet_floor(time));\n            float omega2 = theta2+PI/outerCount*carpet_floor(time);//*sign(cos(i*PI));\n            \n       \t \tvec3 p1 = vec3(cos(omega1)*sin(omega2),\n                           sin(omega1)*sin(omega2),\n                           cos(omega2));\n                           \n            \n            omega2 += PI/outerCount*2.;\n       \t \tvec3 p2 = vec3(cos(omega1)*sin(omega2),\n                           sin(omega1)*sin(omega2),\n                           cos(omega2));\n            \n            omega2 -= PI/outerCount*2.;\n            omega1 += PI/outerCount;\n       \t \tvec3 p3 = vec3(cos(omega1)*sin(omega2),\n                           sin(omega1)*sin(omega2),\n                           cos(omega2));\n            \n            \n            float t1;\n            float t2;\n            vec3 ray2 = normalize(p2-p1);\n            \n            ray_ray(eye, ray, p1, ray2, t1, t2);\n            \n            float dist = length((eye+ray*t1)-(p1+ray2*t2));\n            \n            float lineWidth = 5.0/min(iResolution.x, iResolution.y);\n            \n            float lineLength = length(p2-p1);\n            \n            \n                float sides = (1.0-smoothstep(0.0, lineWidth, dist));\n                float ends = (1.0-smoothstep(1.-lineWidth, 1., (t2)/lineLength))*(1.0-smoothstep(1.-lineWidth, 1., 1.-(t2)/lineLength));\n                float line = sides*ends;\n                \n                map += line*(1.0+i/innerCount+j/outerCount)/2.0;\n                sum += 1.0*line;\n            \n            ray2 = normalize(p3-p1);\n            \n            ray_ray(eye, ray, p1, ray2, t1, t2);\n            \n            dist = length((eye+ray*t1)-(p1+ray2*t2));\n            \n            lineLength = length(p3-p1);\n            \n            \n                sides = (1.0-smoothstep(0.0, lineWidth, dist));\n                ends = (1.0-smoothstep(1.-lineWidth, 1., (t2)/lineLength))*(1.0-smoothstep(1.-lineWidth, 1., 1.-(t2)/lineLength));\n                line = sides*ends;\n                \n                map += line*(1.0+i/innerCount+j/outerCount)/2.0;\n                sum += 1.0*line;\n        }\n    }\n\tfragColor = vec4(flux(PI*map/sum+time), 1.0)+clamp(sum-1., 0.0, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}