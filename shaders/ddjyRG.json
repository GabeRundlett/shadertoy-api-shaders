{
    "Shader": {
        "info": {
            "date": "1687875027",
            "description": "2d experiment canvas",
            "flags": 0,
            "hasliked": 0,
            "id": "ddjyRG",
            "likes": 1,
            "name": "2d canvas",
            "published": 3,
            "tags": [
                "2d",
                "experiment"
            ],
            "usePreview": 0,
            "username": "silica163",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define rot2D(a) mat2(sin(a),cos(a),-cos(a),sin(a))\n\nfloat polygon(vec2 uv,vec2 p,float r,float n){\n    uv -= p;\n    n = floor(n);\n    \n    float pa = PI-atan(uv.x,uv.y);      // position angle\n    float sa = PI/n;                 // side angle\n    float id = (pa - mod(pa,2.*sa)) / (2.*sa) ;// side id [0,1,2,3,...]\n    float ra = id * (2.*sa) + sa;       // rotate angle\n    float ir = cos(sa)*r;            // inner radius\n    float sl = sin(sa)*r;            // half side length\n    \n    uv = rot2D(ra)*uv;\n    uv += vec2(-ir,0);\n    \n    if(uv.x < 0.)return uv.x;\n    \n    return length(vec2(uv.x,uv.y - clamp(uv.y,-sl,sl)));\n}\n\nfloat pattern0(vec2 uv){\n    float c = 0.;\n    vec2 p = uv*1.;\n    vec2 q = vec2(0);\n    mat2 r = rot2D(PI/7.);\n    \n    for(float i = 0.;i<4.;i++){\n        p = r * p;\n        p *= 1.4;\n        p += q;\n        c += sin(p.x*PI + iTime)*cos(p.y*PI+iTime);\n        q = vec2(c,cos(p.y*PI+iTime)+c) + cos(p*PI);\n    }\n    return c;\n}\n\nfloat w(float x,float a,float s,float offset){\n// https://www.desmos.com/calculator/ut86yzbnj6\n    float S = pow(a,s);\n    return sin(x*S+offset)/S;\n}\n\nfloat pattern1(vec2 uv){\n    float c = 0.;\n    float repeat = 8.;\n    float s = 1.6;// scale factor\n    float t = iTime*.3;\n    vec2 p = uv*5.;\n    \n    \n    for(float i = 0.;i < repeat;i++){\n        c += w(p.x+w(p.y+w(p.x,s,i,t*i),s,i,t-i),s,i,t*i*2.);\n        p = rot2D(PI/5.)*p;\n        p-=cos(c);\n        //p.x = p.x + c;\n        //p.y = p.y + c;\n        //p += uv.yx*rot2D(PI/(i+.01));\n    }\n    //c = w(uv.x,s,3.,iTime)+.5;\n    c = c*.2+.5;\n    \n    return c;\n}\n\nfloat pattern2(vec2 uv){\n    float c = 0.;\n    float repeat = 8.;\n    float s = 1.6;// scale factor\n    float t = iTime*.3;\n    vec2 p = uv*2.;\n    vec2 q = vec2(0);\n    \n    \n    for(float i = 0.;i < repeat;i++){\n        q.x = w(p.x,s,i,t+q.y);\n        q.y = w(p.y,s,i,t+q.x);\n        c += w(q.x+w(q.y+w(q.x,s,i,t*i),s,i,t-i),s,i,t*i*2.);\n        \n        p = rot2D(PI/7.)*p;\n        p -= cos(q);\n        q.x += p.x;\n        q.y += p.y;\n        //p += uv.yx*rot2D(PI/(i+.01));\n    }\n    //c = w(uv.x,s,3.,iTime)+.5;\n    c = .5+c*.2;\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    //uv *= 2.;\n\n    vec3 c = vec3(0);\n    //c+= smoothstep(10./iResolution.y,.0,polygon(uv,vec2(0),.5,3.));\n    //c = mod(c,.2)*5.;\n    //c += pattern0(uv);\n    \n    c += mix(vec3(.4,.1,1),vec3(.4,1,.4),pattern2(uv));\n    \n    fragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}