{
    "Shader": {
        "info": {
            "date": "1456421039",
            "description": "my interpretation of the Tame Impala [url=https://www.youtube.com/watch?v=NMRhx71bGo4&list=PL81_CtYCym28qkVe3nVMRG7hMR5_Ky3Hf]album cover[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "MsG3DK",
            "likes": 42,
            "name": "Tame Impala - Currents",
            "published": 3,
            "tags": [
                "2d",
                "cover",
                "album",
                "tameimpala",
                "currents"
            ],
            "usePreview": 0,
            "username": "s23b",
            "viewed": 1328
        },
        "renderpass": [
            {
                "code": "#define SMOOTH 1\n\n#define TAU 6.28318530718\n\nfloat hash(vec2 uv) {\n    float f = fract(cos(sin(dot(uv, vec2(.009123898, .00231233))) * 48.512353) * 11111.5452313);\n    return f;\n}\n\nfloat noise(vec2 uv) {\n    vec2 fuv = floor(uv);\n    vec4 cell = vec4(\n        hash(fuv + vec2(0, 0)),\n        hash(fuv + vec2(0, 1)),\n        hash(fuv + vec2(1, 0)),\n        hash(fuv + vec2(1, 1))\n    );\n    \n    #if SMOOTH\n    vec2 axis = mix(cell.xz, cell.yw, smoothstep(0., 1., fract(uv.y)));\n    return mix(axis.x, axis.y, smoothstep(0., 1., fract(uv.x)));\n    #else\n    vec2 axis = mix(cell.xz, cell.yw, fract(uv.y));\n    return mix(axis.x, axis.y, fract(uv.x));\n\t#endif\n}\n\nfloat fbm(vec2 uv) {\n    float f = 0.;\n    float r = 1.;\n    #if SMOOTH\n    for (int i = 0; i < 3; ++i) {\n    #else\n    for (int i = 0; i < 8; ++i) {\n    #endif\n        f += noise((uv += vec2(-1, 1) * iTime / 16.) * r) / (r *= 2.);\n    }\n    return f / (1. - 1. / r);\n}\n\nvec4 createBall(vec2 uv) {\n    float f = smoothstep(0.5, 1.4, distance(uv, vec2(-.1, .1))) * .5;\n    f += smoothstep(.0, .9, 1.3- distance(uv, vec2(-.3, .3))) * .5;\n    f += smoothstep(.1, .5, .5- distance(uv, vec2(-.4, .4)));\n    f += smoothstep(.1, .5, .4- distance(uv, vec2(.2, .6)));\n    f *= 1. - smoothstep(.95, 1., distance(uv, vec2(.0, .0)));\n    return vec4(f, f, f, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 ball = vec2(.2, -.4);\n    ball.y += sin(iTime * 4.) / 40.;\n    float r = .2;\n    \n    // create distorted version of the space\n    vec2 distuv = uv * vec2(150, 130) + vec2(0, 20);\n    distuv *= distance(uv, vec2(1.5, -2)) / 3.;\n    \n    // add distortion for the ball\n    distuv.x += smoothstep(1. - r * 1.5, 1., 1. - distance(uv, ball - vec2(.1, 0))) * 15.;\n    \n    // calculate distortion level from distance to lower right corner\n    float t = smoothstep(0., 1., 1. - distance(uv * .5, vec2(.4, -.85)));\n    \n    // add noise to distortion weighted by distortion level\n    distuv += (fbm(uv * 2.) - .5) * t * 100.;\n    \n    // calculate stripes\n    float f = sin(distuv.x + distuv.y);\n    \n    // calculate distance from distorted diagonal\n    float d = (distuv.x + distuv.y) / TAU;\n    \n    if (abs(uv.x) > 1. || abs(uv.y) > 1. ) { // outside boundaries\n        fragColor = vec4(0);\n    } else if (d < .5 && d > - 1.) { // inside red line\n        float grad = min(1., (.75 - abs(d + .25)) * 5.);\n\t\tfragColor = vec4(mix(vec3(.92,.16,.20), vec3(.93, .64, .17), -uv.y) * grad, 1.);\n    } else { // lines\n        float spot = clamp(3. - distance(uv * vec2(1, 2), vec2(-1, -1)), 0., 1.);\n\t\tfragColor = vec4(vec3(.8, .68, .82) * f * spot, 1.);\n    }\n    \n    // create ball color\n    vec4 b = createBall((uv - ball) / r);\n    \n    // create ball mask\n    float mask = 1. - smoothstep(r - .002, r + .01, distance(uv, ball));\n    mask *= smoothstep(-1.2, -.9, d);\n    \n    // add ball\n    fragColor = mix(fragColor, b, mask);\n    \n    // add a noise\n    fragColor.rgb -= noise(uv * 300. + fract(iTime) * 10000.) / 5.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}