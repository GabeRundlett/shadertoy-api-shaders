{
    "Shader": {
        "info": {
            "date": "1722439738",
            "description": "from https://www.shadertoy.com/view/4fByDm",
            "flags": 0,
            "hasliked": 0,
            "id": "MfjyDw",
            "likes": 2,
            "name": " colorful ripple ",
            "published": 3,
            "tags": [
                "color",
                "rotate"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 80
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nconst float displace = 1.;\nconst float gridSize = 6.;\nconst int layers = 1;\nconst float detail = 3.0;\nconst float wave = 1.0;\n\nvec2 rotate(vec2 v, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return v * mat2(c, -s, s, c);\n}\n\nvec3 coordToHex(vec2 coord, float scale, float angle) {\n  \n    vec2 c = rotate(coord, angle);\n\n    float q = (1.0 / 3.0 * sqrt(3.0) * c.x - 1.0 / 3.0 * c.y) * scale;\n    float r = 2.0 / 3.0 * c.y * scale;\n    return vec3(q, r, -q - r);\n}\n\nvec3 hexToCell(vec3 hex, float m) {\n    hex.x+=2.*cos(iTime);\n  hex.y+=2.*sin(iTime);\n    return sin(hex / m) * 2.0 - 1.0;\n}\n\nfloat absMax(vec3 v) {\n    return max(max(abs(v.x), abs(v.y)), abs(v.z));\n}\n\nfloat nsin(float value) {\n    return sin(value * 2.0 * PI) * 0.5 + 0.5;\n}\n\nfloat hexToFloat(vec3 hex, float amt) {\n    return mix(absMax(hex), 1.0 - length(hex) / sqrt(3.0), amt);\n}\n\nfloat calc(vec3 hex, float time, float len) {\n    float value = 0.0;\n    for (int i = 0; i < layers; i++) {\n        vec3 cell = hexToCell(hex, 1.0);\n        value += nsin(hexToFloat(cell, nsin(len * wave + time + float(i) / float(layers))) * detail + nsin(time * 0.5));\n    }\n    return value / float(layers);\n}\n\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n\n      vec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\n\n\t uv+= (cPos/cLength)*cos(cLength*12.0-iTime*4.0) * 0.03;\n    float t = iTime * 0.02;\n    float t3 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 1.2;\n\tfloat si = sin(t3);\n\tfloat co = cos(t3);\n\tmat2 ma = mat2(co, si, -si, co);\n    vec3 col;\n  \n\t\n    uv*=ma;\n    uv+= rotate(uv,iTime);\n    \n    float len = 1.0 - length(uv+rotate(uv,iTime)) * 0.03;\n    float zoom = nsin(t * 0.1) + len * 10.0;\n    float angle = 2.0 * PI * nsin(t * 1.05);\n  \n    vec3 hex = coordToHex(uv*ma, gridSize * zoom, angle);\n \n    for (int i = 0; i < 21; i++) {\n       \n  \n        float t2 = t + float(i) * displace;\n        hex[i] += 0.2;\n        col[i] = pow(calc(hex, t * displace, len), 5.0) * (0.2 + 0.8 * sin(PI * len * 0.5)) * 2.0 - 1.0;\n    }\n    fragColor = vec4(col, 1.0);\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor+= vec4(happy_star(uv, anim) * vec3(0.35,0.2,2.55)*1., 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}