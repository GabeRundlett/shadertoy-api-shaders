{
    "Shader": {
        "info": {
            "date": "1520343299",
            "description": "symbol / alpha tower remix",
            "flags": 32,
            "hasliked": 0,
            "id": "lddcDS",
            "likes": 3,
            "name": "Genius",
            "published": 3,
            "tags": [
                "raymarch",
                "sdf",
                "remix",
                "symbol",
                "svg"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 532
        },
        "renderpass": [
            {
                "code": "// Genius - 06/03/2018 - alpha tower + Symbol remix :)\n\n// lighting etc. by IQ\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define AA 1   // make this 1 is your machine is too slow\n\n#define PI 3.1415926\n#define DEG2RAD ((PI * 2.0) / 360.0)\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n//------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\n\n// Repeat only a few times: from indices <start> to <stop> (similar to above, but more flexible)\nfloat pModInterval1(inout float p, float size, float start, float stop) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p+halfsize, size) - halfsize;\n\tif (c > stop) { //yes, this might not be the best thing numerically.\n\t\tp += size*(c - stop);\n\t\tc = stop;\n\t}\n\tif (c <start) {\n\t\tp += size*(c - start);\n\t\tc = start;\n\t}\n\treturn c;\n}\n\n\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.0*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.0)) c = abs(c);\n\treturn c;\n}\n\n\n//---------------------------------------------------------\nvec3 rotateX(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(p.x, ca * p.y - sa * p.z, sa * p.y + ca * p.z);\n}\nvec3 rotateY(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca * p.x + sa * p.z, p.y, -sa * p.x + ca * p.z);\n}\nvec3 rotateZ(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca * p.x - sa * p.y, sa * p.x + ca * p.y, p.z);\n}\n\n\n#define XP 0.0\n#define ZP 0.0\n\n//------------------------------------------------------------------\n// old alpha tower version...\nconst vec3 p01 = vec3(XP+0.0,5.95, ZP+0.0);\n\nvec4 SampleDistTexture(vec2 texuv)\n{\n    texuv.y+=1.5;\n    float aspect = iResolution.x/iResolution.y;\n    texuv.y *= aspect*0.6;\n    return texture(iChannel0,texuv) + vec4(0.0, 0.0, 0.0, 0.00001);\n}\n\n\n\n// alpha tower remix\nvec2 map( in vec3 pos )\n{\n\tvec2 res = vec2( sdPlane(pos), 1.0 ); \t\t\t// floor (checker)\n    pos.x -= 2.0;\n    pos.x += sin(iTime*1.2)*2.0;\n    pos.z += cos(iTime*1.2)*2.0;\n    pos = rotateY(pos,iTime*0.61);\n    pModPolar(pos.xz,4.0);\n    pos.y *= 0.5;\n    pos.y += 1.4;\n    \n    pos.x -= 1.0+sin(iTime*0.718)*1.0;\n\n\tvec3 r1;\n    \n    r1 = pos-p01;\n    float d3 = sdCylinder(r1,vec2(3.80,5.0));\n    float d1 = sdCylinder(r1,vec2(4.0,6.0));\n\tvec4 _c = SampleDistTexture( vec2(atan(r1.x,r1.z), r1.y) / PI);\n    float sDistField = _c.w - 0.5;//+1.0/256.0;\n    d1 = max(sDistField,d1);\n    d1-= 0.1;\n    d1*=0.25;\n    float cval = 62.0+(pos.y*2.5);\t//purple grad\n    d1 = opS(d1,d3);\n    res = opU(res, vec2( d1, cval)  );\n\treturn res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 30.0;\n       \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<100; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n    /*\n\tvec3 eps = vec3( 0.0005, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n\t*/\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            float f = mod( floor(0.5*pos.z) + floor(0.5*pos.x), 2.0);\n            f+= 0.3;\n            col = 0.1 + 0.9*f*vec3(0.45,0.55,0.35);\n        }\n#if 1\n        // lighting        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.4, 0.7, -0.6) );\n//\t\tvec3  lig = normalize( vec3(0.5, 0.4, -0.1) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),4.0);\n        \n        dif *= softshadow( pos, lig, 0.01, 2.5 );\n        dom *= softshadow( pos, ref, 0.01, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n\t\tlin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;\n        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n#endif\n    \tcol = mix( col, vec3(0.05,0.05,0.05), 1.0-exp( -0.0001*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n    if (iMouse.z<0.5)\n        mo = vec2((180.0 * DEG2RAD)/6.0,0.0);\n    \n\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n\t\t// camera\t\n        //vec3 ro = vec3( 6.5*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 6.5*sin(0.1*time + 6.0*mo.x) );\n        \n\t\tfloat ang = 0.0 * DEG2RAD;        \n        vec3 ro = vec3( 9.5*cos(ang+(6.0*mo.x)), 6.0 + 5.0*mo.y, 9.5*sin(ang+(6.0*mo.x)) );\n        vec3 ta = vec3( 0.0, 1.5, 0.0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Sometimes It Snows In April - Del 04/03/2018\n\n// improved version of https://www.shadertoy.com/view/MlVSWc\n// === SVG Player ====      short spec: https://www.w3.org/TR/2008/REC-SVGTiny12-20081222/paths.html\n\n#define N 20.  // splines discretization. Lower it on slow GPUs\n// absolute main SVG commands\n#define M(x,y)             x0 = _x = x;   y0 = _y = y;\n#define L(x,y)             d = min(d, line(uv, vec2(_x,_y), vec2(x,y)) ); _x=x,_y=y;\n#define C(x1,y1,x2,y2,x,y) d = min(d, bezier(uv, vec2(_x,_y), vec2(x1,y1),vec2(x2,y2), vec2(x,y)) ); _x=x,_y=y; \n#define H(x)               d = min(d, line(uv, vec2(_x,_y), vec2(x,_y)) ); _x=x;\n#define V(y)               d = min(d, line(uv, vec2(_x,_y), vec2(_x,y)) ); _y=y;\n#define Z                  d = min(d, line(uv, vec2(_x,_y), vec2(x0,y0)) );\n// relative main SVG commands\n#define m(x,y)             M(_x+x,_y+y)\n#define l(x,y)             L(_x+x,_y+y)\n#define c(x1,y1,x2,y2,x,y) C(_x+x1,_y+y1,_x+x2,_y+y2,_x+x,_y+y)\n#define h(x)               H(_x+x)\n#define v(y)               V(_y+y)\n#define z                  Z\n\n#define style(f,c)         fill=f; S=1.; COL = mod(vec4((c)/65536,(c)/256,c,1),256.)/255.;\n#define path(cmd)          d = 1e38; cmd; draw(d,O);\n\nfloat bezier(vec2,vec2,vec2,vec2,vec2);\nfloat line(vec2,vec2,vec2);\nvoid  draw(float,inout vec4);\nconst float FILL=1., CONTOUR=0.;\nvec4 COL = vec4(0); float fill=FILL, S=1., contrast=1.;  // style state\nfloat d = 1e38;   // global to allow unique distance field\n\nconst float Xoff = 100.0;\nconst float Yoff = -50.0;\n\n// === SVG drawing ===============================================================\nvoid SVG(vec2 uv, inout vec4 O) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv *= 1080.;                             // scaling\n    \n    \n    //float zoom = sin(iTime*2.0)*200.0;\n    //uv *= (zoom+1000.0);\n    \n    contrast = 1.;\n\n    path( style(FILL,0x904030)\n         \n        //M(984.0,557.0)\n        M(283.0+Xoff, Yoff)\n        l(-4.0,-2.0)\n        c(-27.0,37.0,-58.0,66.0,-94.0,85.0)\n        c(-35.0, 20.0, -76.0, 30.0, -121.0, 30.0)\n        l(-137.0,2.0)\n        l(1.0,-145.0)\n        h(38.0)\n        l(24.0, 24.0)\n        v(-121.0)\n        l(-28.0, 29.0)\n        h(-34.0)\n        v(-176.0)\n        l(54.0, 40.0)\n        l(-91.0, -181.0)\n        l(-93.0, 181.0)\n        l(56.0, -40.0)\n        v(176.0)\n        h(-42.0)\n        l(-26.0, -27.0)\n        v(119.0)\n        l(24.0, -24.0)\n        h(44.0)\n        v(145.0)\n        h(-30.0)\n        c(-9.0, -1.0, -34.0, -3.0, -73.0, -6.0)\n        c(-39.0, -4.0, -69.0, -11.0, -88.0, -20.0)\n        c(-43.0, -14.0, -75.0, -30.0, -97.0, -48.0)\n        c(-22.0, -19.0, -33.0, -40.0, -33.0, -64.0)\n        c(0.0, -23.0, 5.0, -41.0, 14.0, -52.0)\n        c(10.0, -11.0, 27.0, -17.0, 51.0, -17.0)\n        c(31.0, 0.0, 45.0, 16.0, 42.0, 49.0)\n        c(-4.0, 9.0, -12.0, 16.0, -24.0, 19.0)\n        c(4.0, -6.0, 6.0, -13.0, 6.0, -20.0)\n        c(0.0, -8.0, -2.0, -15.0, -7.0, -22.0)\n        l(-7.0, -6.0)\n        c(-6.0, -2.0, -12.0, -3.0, -17.0, -3.0)\n        c(0.0, 0.0, -10.0, 1.0, -15.0, 3.0)        //s(-10.0, 1.0, -15.0, 3.0)\n        c(-13.0, 4.0, -19.0, 14.0, -19.0, 31.0)\n        c(0.0, 15.0, 9.0, 27.0, 28.0, 35.0)\n        c(5.0, 2.0, 14.0, 4.0, 25.0, 5.0)\n        c(21.0, 0.0, 39.0, -12.0, 53.0, -36.0)\n        l(4.0, -21.0)\n        c(0.0, -30.0, -23.0, -50.0, -69.0, -60.0)\n        c(-32.0, 0.0, -56.0, 8.0, -73.0, 23.0)\n        c(-8.0,8.0, -25.0, 39.0, -25.0, 71.0)\t\t//s(-25.0, 39.0, -25.0, 71.0)\n        c(0.0, 23.0, 7.0, 44.0, 21.0, 65.0)\n        c(15.0, 20.0, 38.0, 40.0, 70.0, 59.0)\n        c(48.0, 34.0, 115.0, 57.0, 201.0, 69.0)\n        c(-60.0, 37.0, -90.0, 89.0, -90.0, 154.0)\n        c(0.0, 37.0, 11.0, 73.0, 33.0, 106.0)\n        l(2.0, 3.0)\n        l(4.0, 5.0)\n        c(37.0, 49.0, 86.0, 73.0, 147.0, 73.0)\n        c(50.0, 0.0, 93.0, -18.0, 131.0, -55.0)\n        c(36.0, -36.0, 55.0, -79.0, 55.0, -130.0)\n        c(0.0, -64.0, -26.0, -115.0, -78.0, -153.0)\n        c(59.0, 0.0, 113.0, 9.0, 159.0, 28.0)\n        c(48.0, 19.0, 87.0, 46.0, 118.0, 81.0)\n        l(-14.0, -47.0)\n        c(-10.0, -34.0, -15.0, -67.0, -15.0, -99.0)\n        c(0.0, -52.0, 13.0, -97.0, 39.0, -135.0)\n        z\n        // these c->s conversions are screwy for the circle...\n        M(Xoff, Yoff+324.0)\n        c(0.0, 30.0, -11.0, 56.0, -33.0, 78.0)\n        c(0.0,3.0, -48.0, 33.0, -79.0, 33.0)\t\t//s(-48.0, 33.0, -79.0, 33.0)\n        c(-36.0, 0.0, -64.0, -13.0, -83.0, -38.0)\n        l(-6.0, -8.0)\n        c(-15.0, -20.0, -22.0, -41.0, -22.0, -64.0)\n        c(0.0, -16.0, 2.0, -30.0, 7.0, -42.0)\n        c(0.0,0.0, 13.0, -24.0, 25.0, -37.0)\t\t\t        //s(13.0, -24.0, 25.0, -37.0)\n        c(22.0, -22.0, 48.0, -33.0, 79.0, -33.0)\n        c(22.0,0.0, 58.0, 11.0, 79.0, 32.0)\t\t\t\t\t//s(58.0, 11.0, 79.0, 32.0)\n        c(22.0, 22.0, 33.0, 48.0, 33.0, 79.0)\n        z\n    )\n}\n\n// --- spline interpolation ( inspired from revers https://www.shadertoy.com/view/MlGSz3 )\nvec2 interpolate(vec2 G1, vec2 G2, vec2 G3, vec2 G4, float t)\n{\n    vec2 A = G4-G1 + 3.*(G2-G3),\n         B = 3.*(G1-2.*G2+G3),\n         C = 3.*(G2-G1),\n         D = G1;\n    return t * (t * (t * A + B) + C) + D;\n}\n\n\nfloat line(vec2 p, vec2 a, vec2 b) \n{\n\tvec2 pa = p - a, ba = b - a,\n\t     d = pa - ba * clamp(dot(pa, ba) / dot(ba, ba) , 0., 1.); // distance to segment\n    if  ( (a.y>p.y) != (b.y>p.y) &&\n           pa.x < ba.x * pa.y / ba.y ) S = -S;     // track interior vs exterior\n\treturn dot(d,d); //length(d);                  // optimization by deferring sqrt\n}\n// interior detection (sign S): ( thanks TimoKinnunen https://www.shadertoy.com/view/4lySWd )\n// see http://web.archive.org/web/20161116163747/https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html - previously on https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\nfloat bezier( vec2 uv, vec2 A, vec2 B, vec2 C, vec2 D)    \n{\n    //float d = 1e5;                               // for global field\n    vec2 p = A;\n    for (float t = 1.; t <= N; t++) {\n        vec2 q = interpolate(A, B, C, D, t/N);\n        float l = line(uv, p, q);\n        d = min(d, l );\n\t\tp = q;\n\t}\n\treturn d;\n}\n\nvoid draw(float d, inout vec4 O) \n{\n    //if (iMouse.w>0.5)\n    //{\n        // distance field...\n        if (S>0.0)\n        {\n            d = sqrt(d);\n            d+=1.0;\n            d*=0.01;\n            O = vec4(0.5+(d*S));\n        }\n        return;\n    //}\n    //d = min(sqrt(d)*contrast*2.,1.);             // optimization by deferring sqrt here\n    //O = mix(COL, O, fill>0. ? .5+.5*S*d : d);    // paint \n    \n}\n\nvoid mainImage(out vec4 O, vec2 U) \n{\n    \n    vec2 R = iResolution.xy;\n    \n    //if (iFrame>0)\n    if ( texture(iChannel0,.5/R).xy == R )     // init or rescale\n    {     // init or rescale\n        O = texture(iChannel0, U/R);\n        return;\n    }\n    if (U==vec2(.5)) { O = vec4(R,1.0,1.0); return; }\n    \n    \n    \n    //if (iFrame>0)\n    //{\n    //    O = texture(iChannel0, U/iResolution.xy);\n    //    return;\n    //}\n    \n    O = vec4(0);\n\tU = ( U -.5*iResolution.xy ) / iResolution.y;\n    \n    //float scale = 0.5+sin(iTime)*0.5;\n    //scale += 1.0;\n    //U *= scale;\n\tSVG( U, O );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}