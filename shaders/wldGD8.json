{
    "Shader": {
        "info": {
            "date": "1576231342",
            "description": "After the apocalypse... (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "wldGD8",
            "likes": 6,
            "name": "Planet Reboot",
            "published": 3,
            "tags": [
                "voronoi",
                "terrain",
                "life",
                "tube",
                "kinematics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 476
        },
        "renderpass": [
            {
                "code": "// \"Planet Reboot\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvoid HexVorInit ();\nvec2 HexVor (vec2 p);\nmat3 StdVuMat (float el, float az);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nvec2 Noisev2v2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nvec2 arcLimV[2];\nfloat tCur, tCyc, dstFar, rBase, rIn, sLoopV[2], aLoopV[2], rLoop, armP, kMin, rBilGrnd, szVeg;\nint idObj;\nconst int idArm = 1, idArmE = 2, idCylL = 3, idCylU = 4, idVeg = 5, idGrnd = 6;\nconst float nArm = 6.;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 sv;\n  float dMin, d, s, sLoop, aLoop, t, r, h, hVeg;\n  dMin = dstFar;\n  q = p;\n  r = length (q.xz);\n  h = 0.;\n  if (r < rBilGrnd) {\n    sv = HexVor (0.5 * q.xz + 0.05 * Noisev2v2 (4. * q.xz));\n    h += 0.2 * (smoothstep (0.01 + 0.01 * sv.y, 0.1 + 0.03 * sv.y, sv.x) - 1.) *\n       (1. - smoothstep (0.8, 1., r / rBilGrnd));\n  }\n  q = p;\n  d = 0.5 * (q.y - h - 1.5e-3 * r * r);\n  DMIN (idGrnd);\n  p.y -= rIn + 0.15;\n  for (float k = 0.; k < nArm / 2.; k ++) {\n    q = p;\n    q.xz = Rot2D (q.xz, (2. * pi / nArm) * k);\n    if (k == armP) {\n      sLoop = sLoopV[0];\n      aLoop = aLoopV[0];\n    } else {\n      sLoop = sLoopV[1];\n      aLoop = aLoopV[1];\n    }\n    q.xy = Rot2D (vec2 (rBase - abs (q.x), q.y - rLoop * sLoop), aLoop - 0.5 * pi);\n    s = mod ((64. / aLoop) * atan (q.y, - q.x) / pi + 0.5, 1.);\n    r = length (vec2 (length (q.xy) - rLoop * sLoop, q.z)) - rIn;\n    d = max (r - 0.02 * SmoothBump (0.25, 0.75, 0.1, s), - r - 0.15);\n    d = 0.8 * max (d, dot (vec2 (q.x, abs (q.y)), ((k == armP) ? arcLimV[0] : arcLimV[1])));\n    if (d < dMin) {\n      dMin = d;\n      idObj = idArm;\n      qHit = q;\n      kMin = k;\n    }\n    q.xy = Rot2D (q.xy, aLoop) - vec2 (- rLoop * sLoop, 0.27);\n    d = max (PrRoundCylDf (q.xzy, rIn + 0.03, 0.1, 0.3), rIn - 0.15 - length (q.xz));\n    if (d < dMin) kMin = k;\n    DMIN (idArmE);\n  }\n  q = p;\n  d = PrRoundCylDf (q.xzy, rBase + 0.05, 0.15, rIn + 0.1);\n  DMIN (idCylL);\n  q = p;\n  q.y -= 3. * rIn;\n  d = PrRoundCylDf (q.xzy, 0.5 * rBase, 0.1, 3. * rIn);\n  DMIN (idCylU);\n  hVeg = 0.03 + 0.22 * szVeg;\n  q = p - vec3 (10.9, -0.3 + hVeg, 9.9);\n  d = PrCylDf (q.xzy, 0.03, hVeg);\n  q.y -= hVeg;\n  q.xz = abs (q.xz) - max (0.08 * (1. + szVeg) - 0.1, 0.02);\n  d = min (d, PrSphDf (q, 0.05 * (1. + szVeg)));\n  DMIN (idVeg);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.03;\n  for (int j = VAR_ZERO; j < 20; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (3. * h, 0.05, 0.3);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, sunCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  q = 0.01 * (ro.xz + 16. * tCur + ((128. - ro.y) / rd.y) * rd.xz);\n  ff = Fbm2 (q);\n  f = smoothstep (0.2, 0.8, ff);\n  fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n  clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n     smoothstep (0., 0.05, abs (fd)));\n  col = mix (vec3 (0.4, 0.5, 0.8), clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  sd = clamp (dot (sunDir, rd), 0., 1.);\n  sunCol = 2. * vec3 (1., 0.8, 0.7) * pow (sd, 1024.) + vec3 (1., 0.4, 0.2) * pow (sd, 256.);\n  return 0.5 * col + 0.5 * Maxv3 (col) * vec3 (1., 0., 0.) + sunCol;\n}\n\nvec4 ObjCol (vec3 ro, vec3 rd, float dstObj)\n{\n  vec4 col4;\n  vec3 vn;\n  vec2 sv;\n  float nDotL, sh, s, a;\n  vn = ObjNf (ro);\n  nDotL = max (dot (vn, sunDir), 0.);\n  if (idObj == idArm) {\n    col4 = vec4 (0.9, 0.9, 1., 0.2);\n    if (length (vec2 (length (qHit.xy) - rLoop *\n       ((kMin == armP) ? sLoopV[0] : sLoopV[1]), qHit.z)) < rIn - 0.01)\n       col4 = vec4 (0.6 + 0.4 * sin (512. * atan (qHit.y, - qHit.x) + 5. * tCur), 0., 0., -1.);\n    nDotL *= nDotL;\n  } else if (idObj == idArmE) {\n    col4 = vec4 (0.8, 0.7, 0.8, 0.1);\n    nDotL *= nDotL;\n  } else if (idObj == idCylL) {\n    col4 = vec4 (0.8, 0.8, 0.7, 0.1);\n  } else if (idObj == idCylU) {\n    col4 = vec4 (0.8, 0.8, 0.7, 0.1);\n    a = atan (ro.z, - ro.x) / (2. * pi);\n    if (abs (vn.y) < 0.01) col4.rgb *= 0.9 + 0.1 * sin (60. * pi * a);\n    s = length (Rot2D (ro.xz, 2. * pi * (floor (6. * a + 0.5) / 6.)) + vec2 (0.7, 0.)) - rIn;\n    if (s < 0.) {\n      if (s < -0.1) col4 = vec4 (0.6 + 0.4 * sin (5. * tCur), 0., 0., -1.);\n      else col4.rgb *= 0.7;\n    }\n  } else if (idObj == idVeg) {\n    col4 = vec4 (0., 0.6, 0., 0.1);\n  } else if (idObj == idGrnd) {\n    s = Fbm2 (16. * ro.xz);\n    col4 = mix (vec4 (0.4, 0.4, 0.45, 0.05), vec4 (0.5, 0.3, 0.1, 0.) *\n       (0.9 + 0.2 * smoothstep (0.5, 0.6, s)), smoothstep (0.35, 0.4, s));\n    vn = VaryNf (8. * ro, vn, 2. - 1.5 * smoothstep (0.2, 0.5, dstObj / dstFar));\n    nDotL = max (dot (vn, sunDir), 0.);\n    s = length (ro.xz);\n    if (s > 0.8 * rBilGrnd) {\n      sv = HexVor (0.5 * ro.xz + 0.05 * Noisev2v2 (4. * ro.xz));\n      col4 *= mix (0.6 + 0.4 * smoothstep (0.01 + 0.01 * sv.y, 0.1 + 0.03 * sv.y, sv.x), 1.,\n         smoothstep (0.3, 0.8, s / dstFar));\n    } else col4 *= 0.5 + 0.5 * smoothstep (-0.2, -0.02, ro.y - 1.5e-3 * s * s);\n  }\n  if (col4.a >= 0.) {\n    sh = min (ObjSShadow (ro, sunDir), 1. - 0.3 * smoothstep (0.4, 0.6,\n       Fbm2 (0.1 * ro.xz + 0.2 * tCur)));\n    col4.rgb = col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n  }\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, colR;\n  float dstObj;\n  int idObjP;\n  bool doRefl;\n  rIn = 0.3;\n  rBase = 2.8;\n  rLoop = 6.;\n  tCyc = 8.;\n  armP = floor (mod (tCur / tCyc, nArm / 2.));\n  sLoopV[0] = 1./3. + 100. * pow (1. - SmoothBump (0.25, 0.75, 0.22, mod (tCur / tCyc, 1.)), 2.);\n  sLoopV[1] = 1./3. + 100.;\n  for (int k = 0; k < 2; k ++) {\n    aLoopV[k] = 0.25 * pi / sLoopV[k];\n    arcLimV[k] = sin (aLoopV[k] + vec2 (0., 0.5 * pi));\n  }\n  szVeg = SmoothBump (0.25, 0.75, 0.2, mod (tCur / 10., 1.));\n  HexVorInit ();\n  doRefl = false;\n  rBilGrnd = 25.;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    idObjP = idObj;\n    ro += dstObj * rd;\n    col4 = ObjCol (ro, rd, dstObj);\n    if (col4.a >= 0. && idObjP != idVeg && idObjP != idGrnd) doRefl = true;\n    col = col4.rgb;\n  } else {\n    col = SkyCol (ro, rd);\n  }\n  if (doRefl) {\n    rd = reflect (rd, ObjNf (ro));\n    ro += 0.01 * rd;\n    rBilGrnd = 5.;\n    dstObj = ObjRay (ro, rd);\n    if (dstObj < dstFar) {\n      ro += dstObj * rd;\n      colR = ObjCol (ro, rd, dstObj).rgb;\n    } else {\n      colR = SkyCol (ro, rd);\n    }\n    col = mix (col, 0.9 * colR, 0.6);\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv;\n  float el, az, zmFac, t, tSmooth;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = -0.05 * pi + pi * mPtr.y;\n  } else {\n    t = mod (0.01 * tCur, 2.);\n    tSmooth = (floor (32. * t) + smoothstep (0.8, 1., mod (32. * t, 1.))) / 32.;\n    az = 2.5 * pi * (0.5 - abs (tSmooth - 1.));\n    el = -0.05 * pi - 0.14 * pi * (0.5 + 0.5 * cos (2. * az));\n  }\n  el = clamp (el, -0.4 * pi, -0.02 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -25.);\n  zmFac = 3. + 0.6 * el;\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 100.;\n  sunDir = normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec2 gVec[7], hVec[7];\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec2 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.5;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * sin (a + vec2 (0.5 * pi, 0.)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec2 (SmoothMin (sd.y, sd.z, 0.1) - sd.x, Hashfv2 (udm.zw));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nvec2 Noisev2v2 (vec2 p)\n{\n  return vec2 (Noisefv2 (p), Noisefv2 (p + vec2 (17., 23.)));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}