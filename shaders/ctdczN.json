{
    "Shader": {
        "info": {
            "date": "1698955556",
            "description": ":)",
            "flags": 0,
            "hasliked": 0,
            "id": "ctdczN",
            "likes": 0,
            "name": "twisted tetrahedron",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "stereographic",
                "hypersphere"
            ],
            "usePreview": 0,
            "username": "cyperus",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License.\n//\n// \"twisted tetrahedron\"\n//\n// created by Colling Patrik (cyperus) in 2023\n//\n// DOCUMENTATION:\n//  - https://people.maths.ox.ac.uk/trefethen/lightning.html\n// \n////////////////////////////////////////////////////////////////////////////////\n\n// ray casting bounding shape\nconst float CAM_DIST = 6.;\nconst float CAM_FLE = 1.3;\nconst float BBOX_RADIUS = 8.;\nconst float RAY_MIN_DIST = 0.;\nconst float RAY_MAX_DIST = CAM_DIST+1.1*BBOX_RADIUS;\n\n// ray march\nconst int MAX_MARCHING_STEPS = 600;\nfloat RAY_STEP_FACTOR3 = 0.333;\nconst float RAY_PRECISION = 0.00001;\n\n// teraheder\nconst int PS_f= 4;\nconst int PS_e_f= 3;\nconst float PS_a0 = 8.;\n\n// torus\nconst float J1_sh_a0 = -1.0;\nconst float J1_sh_a1 = -0.4;\nconst int   J1_sh_f1 = 2*PS_e_f;\nfloat J1_sh_pa1 = 0.03;\nconst int   J1_to_c1 = 4*PS_e_f;\nconst int   J1_to_f1 = 2*PS_e_f;\nconst float J1_to_pa1 = 0.;\n\n// texture\nconst int   TEX_MODE = 1; // 0: white, 1: stripes, 2: normal, 3: tetra_cell_id\nconst bool  TEX_UV_ON = true;\nconst float TEX_UV_SHARPNESS = 0.00000001;\nconst vec2  TEX_UV_SUBDIV = vec2(1*PS_e_f, 1*PS_e_f);\n\n// fog\nconst bool  FOG_ON = true;\nconst float FOG_DENSITY = 0.003;\n\nfloat map(in vec3 p, out vec4 mat) {   \n    //// sdf's\n    float rxy = 0., au = 0.0, av = 0.0;\n    float cell_id = 0., sr = 0.; //sig(sr): sens of rotation, abs(sr) : number edges per face\n    vec2 z = vec2(0.);\n    \n    // stereographic 4D, rotation\n    p = rot4Dz( p, iTime/20., sqrt(abs(PS_a0)));\n    float a_y = 2.*PI* iTime/30.; p.zx = cmul(p.zx, vec2(cos(a_y),sin(a_y)));\n    float a_z = -2.*PI* iTime/30.; p.xy = cmul(p.xy, vec2(cos(a_z),sin(a_z)));\n           \n    //// map platonic solid cells to one cell\n    vec3 pn = normalize(p); \n  \n    // projection from n cells to 1 cell. \n    pn = tetra_cells(pn, cell_id, sr);\n    \n    // invers stereographic projection\n    z = pn.xy/(1.-pn.z);\n    z = cTeraPolyArc2disk(z);\n\n    /// r-polygon-distribution\n    vec2 e = vec2(sqrt(2.), 0.5);\n    float en = 1.+( (PS_a0<0.?e.x:e.y)-1. )*smoothstep(1.,5., abs(PS_a0));        \n    float r = length(z); vec2 zn = z/r;\n    z = dist(r, en) * zn;   \n\n    /// stereograpic projection    \n    pn = sp(vec3(z,sr));\n\n    /// scale radius\n    p = length(p) * pn;\n    \n    float fracu = 1.0;\n    ////fractal level 0: Torus\n    au = atan(p.y, p.x);\n    rxy = length(p.xy); \n    z = vec2(rxy, p.z);\n    z = cmul(z,z); z.x -= PS_a0;\n    \n    ////fractal level 1: 2Djulia realaxis-translation,fraction,rotation\n    float sh1 = J1_sh_a0;\n    float to1 = au*float(J1_to_c1)/float(J1_to_f1);\n    sh1 += J1_sh_a1*(1.-pulsecollision(float(J1_sh_f1),au/PI, J1_sh_pa1, 0.5));\n    to1 += J1_to_pa1;  \n    z = crpt(z, to1, float(J1_to_f1), sh1);\n    fracu *= float(J1_sh_f1);\n\n    // distance estimation\n    float d = log(length(z));\n    \n    //st_assert( d != INF, 0 ); // Show the +INF singularity.\n    if (d == INF) {d = 1.;} // Step through the singularity.\n    \n    mat.x = cell_id; mat.yz = z; mat.w = au *fracu; // platonic solid cell_id, metatorus complex plane, metatorus angle_u\n    return d;\n}\n\nfloat intersect(in vec3 ro, in vec3 rd, out vec4 rescol, in float px) {\n    float res = -1.0; // init no intersection\n    \n    // bounding shape BB\n    vec2 dis = isphere( ro, rd , abs(BBOX_RADIUS));\n    \n    if( dis.y<0.0 ) return -1.0; // check BB behind came\n\n    dis.x = max( dis.x, RAY_MIN_DIST ); // check min ray length\n    dis.y = min( dis.y, RAY_MAX_DIST ); // check max ray length\n\n    // raymarch signed distance field\n    vec4 trap; // data from surface intersection point\n    \n\tfloat fh = RAY_STEP_FACTOR3;\n    float t = dis.x; // ray starts at boundingbox\n    for( int i=0; i<MAX_MARCHING_STEPS; i++  ) // max steps\n    { \n        vec3 pos = ro + rd*t;\n        float th = RAY_PRECISION * px * t; //th = 0.0001; // minimal bound surface hit\n        float h = map( pos, trap );\n        if( t>dis.y || h<th ) break; // ray outside BB or hit.\n        t += h*fh; // distance\n    }\n    if( t<dis.y ) // ray inside BB\n    {\n        rescol = trap;\n        res = t;\n    }\n    return res;\n}\n\nvec3 calcNormal( in vec3 p, in float prec ) {\n    vec4 tmp; // dummie\n    vec2 e = vec2( prec, 0. );\n    return normalize(vec3(\n\t\tmap(p+e.xyy,tmp) - map(p-e.xyy,tmp),\n\t\tmap(p+e.yxy,tmp) - map(p-e.yxy,tmp),\n\t\tmap(p+e.yyx,tmp) - map(p-e.yyx,tmp) )\n    \t);\n}\n\nvec3 transform(in vec3 p, in float time) {\n\t// camera transformation\n\tif (iMouse.x > 0.0)\n\t{\n        vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\t\tp.yz = crot(p.yz,-PI*m.y);\n\t\tp.zx = crot(p.zx,-PI*m.x);\n\t}\n\tp.xz = crot(p.xz,- 0.1 * time);\n\treturn p.xyz;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // slider mapping\n    RAY_STEP_FACTOR3 = (0.5-0.0001)* pow(RAY_STEP_FACTOR3, 3.) + 0.0001;\n    \n    // time modulation\n    J1_sh_pa1 *= iTime;\n   \n    // normalized coords\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    // camera viewport --> worldspace\n    vec3 ro = vec3(0,0,-CAM_DIST);\n    vec3 rd = vec3(-uv.x,uv.y,CAM_FLE);\n    \t ro = transform(ro,iTime);\n\t     rd = normalize(transform(rd,iTime));\n\n    // ray\n    vec4 mat = vec4(0.0); // material-data: vec4(float cell_id, vec2 complex plane, float angle-u)\n    float px = 2.0/( iResolution.y*CAM_FLE );\n    float t = intersect( ro, rd, mat, px ); // distance hit ray surface\n    \n    // color\n    vec3 col_sun = vec3(1.,1.,0.8);\n    vec3 col_sky = vec3(0.8,0.8,1.);  \n    vec3 col_nebula = (rd.y>0. ? 1. : 0.96) * srgb2rgb(texture(iChannel0, vec3(rd.x,abs(rd.y),rd.z)).rgb);\n    // background-color    \n    vec3 bg_col = col_sky * col_nebula;\n\n    vec3 col = vec3(1,1,0); // init, test-color\n    // no hit -> sky\n    if (t < 0.0) {\n        col = bg_col;\n    }\n    // hit -> object surface\n    else {\n    \t// surface properties\n        vec3 p = ro + rd * t;\n        vec3 n = calcNormal( p, 0.001);        \n        // object id\n        float obj_id = mat.x;\n        // uv-coords\n        vec2 mat_uv;\n        mat_uv.x = 0.5*mat.w/PI;\n        mat_uv.y = atan(mat.z,mat.y)/PI;\n        // uv-texture\n        col = (TEX_MODE == 1) ? h2rgb(abs(mat_uv.y))       // stripes\n            : (TEX_MODE == 2) ? 0.6*n+vec3(0.4)            // normal\n            : (TEX_MODE == 3) ? h2rgb(obj_id/float(PS_f))  // tetra_cell_id\n            : vec3(1.);\n        col *= 2.; // light emitter\n        // uv-grid (TODO: not orthogonal!)\n        if(TEX_UV_ON) {\n            mat_uv *= PI*TEX_UV_SUBDIV;\n            col *= 0.5+ 0.5*smoothstep(-TEX_UV_SHARPNESS,TEX_UV_SHARPNESS, sin(mat_uv.x)*sin(mat_uv.y) );\n        }        \n        // lighting\n        // point_light\n        vec3 point_lo = vec3(0, -10000, 0);\n        vec3 point_ld = normalize(point_lo - p);\n        // cubemap light\n        vec3 col_nebula_ref = srgb2rgb(texture(iChannel0, reflect(rd, n)).rgb);\n        // Phong: ambient- diffuse- specular- light reflections\n        col = 0.25 * col * col_sky\n            + 0.25 * col * col_nebula_ref\n            + 0.25 * col * col_sun * clamp(dot(point_ld, n), 0., 1.)\n            + 0.25 * col * col_sun * pow(clamp(dot(reflect(point_ld, n), -rd), 0., 1.), 10.);\n        // fresnel\n        col += pow(clamp(1. - dot(n, -rd), 0., 1.), 5.) * 0.4 * bg_col;\n    }\n    // fog\n    if(FOG_ON) col = mix(col, bg_col, 1.0 - exp(-FOG_DENSITY * pow(t,3.)));\n    // gamma correction\n    fragColor = vec4(rgb2srgb(col),1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 20,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// consts\nconst float PI = abs(atan(0.,-1.));\nconst float INF = abs(1./0.);\nconst float NAN = abs(0./0.);\n\n/// 1D transformations\nfloat pulsecollision(in float pf, in float x, in float x0, in float pw) {\n    /*\n    x  : periodic in [0,1]\n    x0 : offset\n    pw : pulse width in [0,1]\n    pf : pulse frequency \n    */\n    float ntriw_p = abs( fract( pf*(x - x0) )-0.5); // x_normalized triangle wave function moving in +x_direction\n    float ntriw_n = abs( fract( pf*(x + x0) )-0.5); // x_normalized triangle wave function moving in -x_direction\n    float pp = smoothstep( 0.5*pw, 0., ntriw_p );   // pulse moves in +x_direction\n    float pn = smoothstep( 0.5*pw, 0., ntriw_n );   // pulse moves in -x_direction\n    return (pp+pn);                                 // smooth superposition\n}\n\n/// 2D transformations\n/// complex\nvec2 cmul(vec2 za,vec2 zb){\n    return za*mat2(zb.x,-zb.y,zb.yx);}\n\nvec2 crot(vec2 z,float a){\n    return cmul(vec2(cos(a),sin(a)),z);}\n\nvec2 cinv(vec2 z){\n    return z*vec2(1,-1)/dot(z,z);}\n    \nvec2 cdiv(vec2 z, vec2 w){\n    return cmul(z,cinv(w));}\n\nvec2 cpow(vec2 z, float q){\n    float r=pow(length(z), q);\n\tfloat a=q*atan(z.y,z.x);\n    return vec2(r*cos(a),r*sin(a));}\n\nvec2 cpow(vec2 z, int n){\n  float r = length(z);\n  float theta = atan(z.y,z.x);\n  return pow(r,float(n))*normalize(vec2(cos(float(n)*theta),sin(float(n)*theta)));}\n\nvec2 crpt(vec2 z, float a, float p, float x0){\n  /* (z*e^ia)^p-x0 */\n  return cpow( cmul(z, vec2(cos(-a),sin(-a))),p) - vec2(x0, 0.);}\n\nvec2 cTeraPolyArc2disk(vec2 z) {\n    // https://people.maths.ox.ac.uk/trefethen/lightning.html\n    const int NUM_j = 15; // poles\n    const vec2[NUM_j] rf = vec2[]\n    (vec2(-0.4534, -0.8913)\n    ,vec2( 0.5001,  0.8660)\n    ,vec2(-1.0000,  0.0001)\n    ,vec2( 0.5008, -0.8656)\n    ,vec2(-0.5452,  0.8383)\n    ,vec2( 0.1901,  0.9818)\n    ,vec2( 0.9875, -0.1576)\n    ,vec2(-0.9856, -0.1691)\n    ,vec2( 0.4224, -0.9064)\n    ,vec2( 0.5738,  0.8190)\n    ,vec2(-0.9995,  0.0311)\n    ,vec2( 0.4858,  0.8741)\n    ,vec2( 0.5760, -0.8175)\n    ,vec2(-1.0000, -0.0061)\n    ,vec2( 0.4959, -0.8684));\n    \n    const vec2[NUM_j] rw = vec2[]\n    (vec2( 0.2728,  0.0   )  \n    ,vec2( 0.0003,  0.0126)\n    ,vec2(-0.0016, -0.0121)\n    ,vec2(-0.0172,  0.0324)\n    ,vec2( 0.1417, -0.4629)\n    ,vec2(-0.4681, -0.2288)\n    ,vec2(-0.2433,  0.2822)\n    ,vec2( 0.1996, -0.0082)\n    ,vec2( 0.2884, -0.0353)\n    ,vec2(-0.0666,  0.1824)\n    ,vec2(-0.0357, -0.1136)\n    ,vec2(-0.1091,  0.0396)\n    ,vec2(-0.0831,  0.2627)\n    ,vec2( 0.0598, -0.0284)\n    ,vec2( 0.0597,  0.0760));\n\n    const vec2[NUM_j] rz = vec2[]\n    (vec2(-0.239570, -0.459171)\n    ,vec2( 0.354172,  0.611300)\n    ,vec2(-0.706487,  0.001072)\n    ,vec2( 0.356785, -0.606740)\n    ,vec2(-0.277869,  0.437059)\n    ,vec2( 0.047259,  0.573454)\n    ,vec2( 0.515842, -0.066306)\n    ,vec2(-0.591622, -0.166501)\n    ,vec2( 0.221135, -0.605193)\n    ,vec2( 0.413545,  0.494105)\n    ,vec2(-0.671697,  0.057599)\n    ,vec2( 0.309337,  0.611574)\n    ,vec2( 0.414577, -0.491758)\n    ,vec2(-0.695342, -0.019940)\n    ,vec2( 0.334074, -0.612218));\n\n    // polynomial barycentric representation\n    vec2 zn = vec2(0.); vec2 zd = vec2(0.);       \n    for(int j = 0; j<NUM_j; j++)\n    {\n        vec2 zj = cdiv( rw[j], (z-rz[j]));\n        zd += zj; // sum denominator\n        zn += cmul(rf[j], zj); // sum nominator\n    }\n    return cdiv(zn, zd);;\n}\n\n/// 4D transformation\nvec3 rot4Dz(in vec3 p, in float t, in float r_inv){\n    float a = 2.*PI*t;\n    p /= r_inv;\n    float rn = length(p);\n    float rn2 = dot(rn,rn);\n    vec2 zw = cmul(vec2(2.*p.z, rn2-1.),vec2(cos(a),sin(a)));\n    p = vec3(2.*p.xy,zw.x)/(rn2+1.-zw.y);\n    \n    return r_inv * p;\n}\n\n// map spherical platonic solid pyramidal-face-cells to one cell located at -z-axis.\nvec3 tetra_cells(in vec3 p, out float cell_id, out float sr){\n\t//// tetrahedron (bounded by a cube)\n\t// cells: A,B,C,D\n\t// cell walls defined by the face_normal\n    bool nBA = dot(vec3( 1., 0.,-1.),p)>=0.;\n\tbool nCA = dot(vec3( 0., 1.,-1.),p)>=0.;\n\tbool nDA = dot(vec3( 1., 1., 0.),p)>=0.;\n\tbool nCB = dot(vec3(-1., 1., 0.),p)>=0.;\n\tbool nDB = dot(vec3( 0., 1., 1.),p)>=0.;\n\tbool nDC = dot(vec3( 1., 0., 1.),p)>=0.;\n    \n    // map n-cells to 1-cell by rotation\n    // rotation angles\n    const float a45 = PI/4.;             // 45° \n    const float a35 = atan(sqrt(8.))/2.; // 35.264°\n    const float a30 = PI/6.;             // 30°\n    \n    const vec2 ei_a45 = vec2(cos(a45), sin(a45));\n    const vec2 ei_a35 = vec2(cos(a35), sin(a35));\n    const vec2 ei_a30 = vec2(cos(a30), sin(a30));\n    \n    vec2 ei_y = ei_a45;   \n    vec2 ei_x = ei_a35;\n    vec2 ei_z = ei_a30;\n    // symmetries\n    if(nBA && nCA && nDA) //inside cell A\n\t{\n\t\tcell_id =  0.;\n        ei_x.y *= -1.; // a = -35.264°\n\t}\n\telse if( nCB && nDB && !nBA) //inside cell B\n\t{\n\t\tcell_id =  1.;\n\t\tei_y   *= -1.; // a = -3.*45°\n        ei_x.y *= -1.; // a = -35.264°\n\t}\n\telse if(!nCA && !nCB && nDC) //inside cell C\n\t{\n\t\tcell_id =  2.;\n\t\tei_y.x *= -1.; // a = +3.*45°\n\t\tei_z.y *= -1.; // a = -30°\n\t}\n\telse if(!nDA && !nDB && !nDC)//inside cell D\n\t{\n\t\tcell_id =  3.;\n\t\tei_y.y *= -1.; // a = -45°\n\t\tei_z.y *= -1.; // a = -30°\n\t}\n\tp.zx = cmul(p.zx,ei_y); // y-axis\n\tp.yz = cmul(p.yz,ei_x); // x-axis\n\tp.xy = cmul(p.xy,ei_z); // z-axis\n\t// 3 edges per face, non cyclic\n\tsr = 3.;\n    return p;\n}\n\n// stereographic projection \nfloat sig(float x) {\n    return x < 0. ? -1. : +1.; \n    }\n\nfloat dist(float x, float e) {\n    // e in [0., +inf]\n    return sign(x)*abs( pow(sign(x)*x, abs(e)) );\n    //return sign(x)*abs( pow(abs(x), abs(e)) );\n    }\n   \nvec2 r_poly_dist(vec2 z, vec2 e, float sh_a) {   \n    /// r-polygon-distribution\n    float r = length(z); z = (r<0.)? vec2(0) : z/r; \n    float d0 = 0.5 *abs(e.y-e.x);\n    float e2 = e.x + d0 + d0 * (2.*smoothstep(-1., 1., -sh_a) - 1.);\n    return dist(r, e2) * z;\n}   \n\nvec3 sp(vec3 zsr){\n    vec2 z = zsr.xy; float sr = zsr.z;\n    // stereopraphic projection (complex plane to unit sphere)\n    float zz = dot(z,z); vec3 pn;\n    if (bool(sig(sr))) {// north pole\n        pn = vec3(2. * z.x,  2. * z.y, -1. + zz);\n        }\n    else { // south pol\n        z = cinv(z);\n        pn = vec3(2. * z.x, -2. * z.y,  1. - zz);\n        }\n    pn /= 1.+zz;\n    return pn;\n}\n\nvec3 spb(vec3 zsr) {\n    vec2 z = zsr.xy; float sr = zsr.z;\n    // inverse stereograpic projection\n    float k = 2./(1.+dot(z,z)); vec3 pn;\n    if (bool(sig(sr))) {// north pole\n        pn = vec3(k*z, k-1.); }\n    else { // south pol\n        z = cinv(z);\n        pn = vec3(k*z, -(k-1.)); }\n    return pn;\n}\n\n// bb\nvec2 isphere(in vec3 ro, in vec3 rd, in float r) {\n    // https://iquilezles.org/articles/intersectors/\n\tfloat b = dot(ro,rd);\n\tfloat c = dot(ro,ro) - r*r;\n    float h = b*b - c;   \n    if( h<0.0 ) return vec2(-1.0);\n    h = sqrt( h );\n    return -b + vec2(-h,h);\n}\n\n// colorspace transformations\nvec3 h2rgb(float h){\n    vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return rgb*rgb*(3.0-2.0*rgb); /* cubic smoothing */\n}\n\nvec3 hsv2rgb(float h, float s, float v){     \n    return v * mix( vec3(1.0), h2rgb(h), s); /* hue, saturation, value */\n}\n\n// srgb <--> rgb (linear)\nvec3 srgb2rgb(vec3 col) {\n    return pow(col, vec3(2.2));\n}\n\nvec3 rgb2srgb(vec3 col) {\n    return pow(col, vec3(1./2.2));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}