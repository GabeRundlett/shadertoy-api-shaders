{
    "Shader": {
        "info": {
            "date": "1637776756",
            "description": "Simple harmonograph. Not as cool as Xls3zf by eiffie. Uses anti-aliasing without the time-skip trick from oneshade's comment on slV3Wh.",
            "flags": 32,
            "hasliked": 0,
            "id": "ftyGDm",
            "likes": 3,
            "name": "harmonograph",
            "published": 3,
            "tags": [
                "pendulum",
                "harmonograph",
                "blackburnpendulum"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 325
        },
        "renderpass": [
            {
                "code": "// Image\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv  = fragCoord / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Buffer A\n\n#define PI 3.1415926535897932384626433\n#define draw(dist, color) col = max(col, color * smoothstep(2.0 / iResolution.y, 0.0, dist))\n\nfloat pendulum(float t, vec4 param) {\n    // https://en.wikipedia.org/wiki/Harmonograph\n    // vec4 -> (amplitude, frequency, phase, damping)  \n    return param.x * sin(t * param.y + param.z) * exp(-t * param.w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.y;\n    vec2 oo = iResolution.xy / iResolution.y / 2.0; // center\n    \n    vec3 col = texture(iChannel0, fragCoord / iResolution.xy).xyz;\n    vec3 rnd = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4));\n    \n    float t = iTime;\n    vec4 p1 = vec4(0.15, 2, 3.0 * PI / 2.0, 0.005);\n    vec4 p2 = vec4(0.25, 4, PI, 0.005);\n    vec4 p3 = vec4(0.15, 7, PI / 2.0, 0.0005);\n    vec4 p4 = vec4(0.25, 5, PI / 2.0, 0.0015);\n    vec2 point = vec2(\n        pendulum(t, p1) + pendulum(t, p2),\n        pendulum(t, p3) + pendulum(t, p4)\n    ) + oo;\n    \n    col = draw(length(uv - point) - 0.015, rnd);\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}