{
    "Shader": {
        "info": {
            "date": "1551325695",
            "description": "testing the fft fluid from rory618's shader https://www.shadertoy.com/view/wdBGWG, click with mouse to create currents",
            "flags": 32,
            "hasliked": 0,
            "id": "WslXDN",
            "likes": 9,
            "name": "2d fft fluid sim",
            "published": 3,
            "tags": [
                "2d",
                "fluid",
                "fourier",
                "transform"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 1019
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    //center and scale fixed resolution\n    vec2 cu = RES/R.xy;\n    if (cu.x < cu.y) cu = vec2(u.x-R.x*.3*((R.x/R.y)-(RES.x/RES.y)),u.y)*cu.y;\n    else cu = vec2(u.x,u.y-R.y*((RES.x/RES.y)/(R.x/R.y)-1.)*.5)*cu.x;\n    if (min(cu.x,cu.y) < 0. || cu.x > RES.x || cu.y > RES.y) {\n        o = vec4(0);\n        return;\n    }\n        \n    STATE;\n    if (fstate == 3) {\n        //display velocity magnitude\n        o = vec4(pow(length(textureLod(iChannel0,cu/R.xy,0.).xz)*.2,.5));\n    } else discard;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*Buf A - Multi-pass fast fourier transform with horizontal+vertical passes then inverse, fluid simulation operations are done in frequency space.\nOutputs:\nxy - X velocity as complex number c where length(c) is frequency amplitude and atan(c.y,c.x) is phase\nzw - Y velocity as complex number\n*/\n\n//complex number operations\nvec2 cmul(vec2 a, vec2 b) {\n    return b*mat2(a,-a.y,a.x);\n}\nvec2 cexp(vec2 a) {\n    return exp(a.x)*vec2(cos(a.y),sin(a.y));\n}\n#define cph(y) vec2(cos(y),sin(y))\n\nvoid mainImage(out vec4 o, in vec2 u)\n{\n    if (u.x > RES.x || u.y > RES.y) return;\n    \n    STATE;\n    \n    //initialize velocities from image\n    if (iFrame < 20) {\n        o = (pow(texelFetch(iChannel3,ivec2(u),0),vec4(1./2.2))*2.-1.)*10.*vec4(1,0,1,0);\n        return;\n    }\n    \n    //fourier transform, based on FabriceNeyret2's code https://www.shadertoy.com/view/4dGGz1\n    float ar = RES[axis], st = 0., ss = (float(dir)*2.-1.)*2.*PI*floor(u[axis])/ar;\n    int iar = int(ar);\n    vec2 vx = vec2(0), vy = vec2(0);\n    ivec2 p = ivec2(u);\n    p[axis] = 0;\n    if (fstate == 0) {\n        //offset samples by velocity on first step of fourier transform, this powers the fluid movement\n        for (int i = 0; i < iar; i++) {\n            vec4 ts = textureLod(iChannel0,mod(vec2(p)+.5-texelFetch(iChannel0,p,0).xz,RES)/R.xy,0.);\n            vec2 f = cph(st);\n            vx += cmul(ts.xy,f);\n            vy += cmul(ts.zw,f);\n            st += ss;\n            p[axis]++;\n        }\n    } else {\n        for (int i = 0; i < iar; i++) {\n            vec4 ts = texelFetch(iChannel0,p,0);\n            vec2 f = cph(st);\n            vx += cmul(ts.xy,f);\n            vy += cmul(ts.zw,f);\n            st += ss;\n            p[axis]++;\n        }\n    }\n    vx = cmul(vx,cph(PI));\n    vy = cmul(vy,cph(PI));\n    \n    if (dir == 1) {\n        vx /= ar;\n        vy /= ar;\n    }\n    \n    //apply fluid operations in frequency space\n    if (fstate == 1) {\n        vec2 cu = mod(u+RES*.5,RES)-RES*.5;\n        \n        //mass conservation more info here http://www.dgp.toronto.edu/people/stam/reality/Research/pdf/jgt01.pdf\n        if (length(cu) > 0.) {\n            vec2 rv = vec2(vx.x,vy.x),\n                iv = vec2(vx.y,vy.y),\n                ncu = normalize(cu);\n            float rl = length(rv), il = length(iv);\n            rv -= ncu*dot(ncu,rv);\n            iv -= ncu*dot(ncu,iv);\n            rv *= rl/(1e-6+length(rv));\n            iv *= il/(1e-6+length(iv));\n            vx = vec2(rv.x,iv.x);\n            vy = vec2(rv.y,iv.y);\n        }\n    }\n        \n    //add forces in real space\n    if (fstate == 3) {\n        if (iMouse.z > 0.) {\n            vec2 f = u/RES-iMouse.xy/R.xy;\n            f = (u-RES*.5)*-.05*max(0.,1.-length(f)*10.);\n            vx.x += f.x;\n            vy.x += f.y;\n        }\n        vx.y = 0.;\n        vy.y = 0.;\n    }\n    o = vec4(vx,vy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define PI 3.14159265358979\n#define R iResolution\n\n//fluid simuation resolution\n#define RES vec2(256,256)\n\n//fourier transform state, axis 0 = x axis, axis 1 = y axis, dir 0 = fft, dir 1 = ifft\n#define STATE int fstate = iFrame%4, axis = fstate%2, dir = fstate/2\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}