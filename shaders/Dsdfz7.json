{
    "Shader": {
        "info": {
            "date": "1697146792",
            "description": "a simple circular slider for your input needs\n",
            "flags": 32,
            "hasliked": 0,
            "id": "Dsdfz7",
            "likes": 2,
            "name": "circular slider",
            "published": 3,
            "tags": [
                "mouse",
                "sdf",
                "input"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "//features:\n//relative mouse position taken into account\n//offsets properly resolve\n//center dead zone\n//tunable parameters (see common)\n//color picker as an example use\n\nvec3 hsvToRgb(vec3 hsv){ //hsv.x = hue, hsv.y = saturation, hsv.z = value\n    vec3 col = vec3(hsv.x, hsv.x + 2.0/3.0, hsv.x + 4.0/3.0); //inputs for r, g, and b\n    col = clamp(abs(mod(col*2.0, 2.0)-1.0)*3.0 - 1.0, 0.0, 1.0)*hsv.z*hsv.y + hsv.z - hsv.z*hsv.y; //hue function (graph it on desmos)\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //make sure your mouse coordinates in buffer A are in uv coords\n    vec2 uv = (fragCoord - iResolution.xy/2.0)/iResolution.y;\n    float pxunit = 1.0/iResolution.y; //the size of a pixel for blending\n\n    //angle of slider\n    float a = texelFetch(iChannel0, ivec2(0,0), 0).x;\n    //position of slider handle\n    vec2 pos = vec2(cos(a),sin(a))*sliderRadius;\n    \n    vec3 col = mix(vec3(0.8),vec3(1),float(abs(mod(uv.x,0.1) - mod(uv.y,0.1)) > 0.05));\n    float innerdist = sliderWidth - abs(length(uv) - sliderRadius);\n    float handledist = sliderWidth - distance(uv,pos);\n    col = mix(col, hsvToRgb(vec3(atan(uv.y,uv.x)/2.0/PI,1.0,1.0)), smoothstep(0.0, pxunit, innerdist)); //slider background\n    col = mix(col, vec3(0.2), smoothstep(0.0, pxunit, 0.002-abs(innerdist))); //slider border\n    col = mix(col, hsvToRgb(vec3(a/2.0/PI,1.0,1.0)), smoothstep(0.0, pxunit, handledist)); //handle\n    col = mix(col, vec3(0.2), smoothstep(0.0, pxunit, 0.002-abs(handledist))); //handle border\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = vec4(0);\n    //x: angle of slider (radians)\n    //y: initial offset (radians)\n    //z: handle is held (bool)\n    if (floor(fragCoord) == vec2(0,0)){\n        vec4 prevdata = texelFetch(iChannel0, ivec2(0,0), 0); //previous slider pos\n        if (iMouse.w > 0.0){ //setup on click\n            vec2 m = (iMouse.zw - iResolution.xy/2.0)/iResolution.y; //last click pos in uv coords\n            if (distance(m,vec2(cos(prevdata.x), sin(prevdata.x))*sliderRadius) <= sliderWidth){\n                vec2 d = normalize(m);\n                data.y = atan(d.y,d.x) - prevdata.x;\n                data.x = prevdata.x;\n                data.z = 1.0;\n            }\n        }\n        if (iMouse.z > 0.0 && (prevdata.z == 1.0 || data.z == 1.0)){ //update while held\n            data.z = 1.0;\n            data.y = iMouse.w > 0.0 ? data.y : prevdata.y;\n            vec2 m = (iMouse.xy - iResolution.xy/2.0)/iResolution.y;\n            float r1 = length(m);\n            vec2 d = m/r1; //direction from (0,0) to mouse in uv coords\n            if (r1 < sliderRadius-sliderWidth && doDeadZone) { //creates center dead zone\n                data.x = prevdata.x;\n            } else {\n                vec2 h = vec2(cos(prevdata.x + data.y),sin(prevdata.x + data.y))*r1;\n                vec2 p = vec2(cos(prevdata.x),sin(prevdata.x))*sliderRadius;\n                data.x = atan(d.y,d.x);\n                if (distance(h,p) > sliderWidth){ //keeps the handle under the cursor\n                    if (sliderWidth - abs(r1 - sliderRadius) < 0.0){ //cursor isn't on the track\n                        data.y = 0.0;\n                    } else { //don't ask\n                        float o = acos((r1*r1 + p.x*p.x + p.y*p.y - sliderWidth*sliderWidth)/(2.0*r1*sliderRadius));\n                        data.y = sign(dot(vec2(-p.y,p.x),h))*o;\n                    }\n                }\n                data.x -= data.y;\n            }\n        } else { //store when not clicked\n            data.z = 0.0;\n            data.x = prevdata.x;\n        }\n        if (iFrame == 0) data.x = sliderInitialValue; //set initial value\n    }\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float sliderWidth = 0.1;\nconst float sliderRadius = 0.35;\nconst bool doDeadZone = false;\nconst float sliderInitialValue = 1.5;\n#define PI 3.14159",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}