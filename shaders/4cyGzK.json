{
    "Shader": {
        "info": {
            "date": "1712945910",
            "description": "playing with luminance structure more",
            "flags": 0,
            "hasliked": 0,
            "id": "4cyGzK",
            "likes": 6,
            "name": "orb field bibo 2",
            "published": 3,
            "tags": [
                "glsl",
                "raytrace"
            ],
            "usePreview": 0,
            "username": "cabbibo",
            "viewed": 96
        },
        "renderpass": [
            {
                "code": "// Fork of \"orb field bibo\" by None. https://shadertoy.com/view/-1\n// 2024-04-12 18:18:14\n\n\n// ALL TAKEN FROM IQs AMAZING SITE / TUTORIALS / SHADERS:\n// https://iquilezles.org/www/index.htm\n// https://www.shadertoy.com/user/iq\n\n\nconst float MAX_TRACE_DISTANCE = 1000.0;           // max trace distance\nconst float INTERSECTION_PRECISION = .4;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS =10;\n\n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}\n                                 \n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat triNoise3D(in vec3 p, in float spd)\n{\n    float z=1.4;\n\tfloat rz = 0.;\n    vec3 bp = p;\n\tfor (float i=0.; i<=3.; i++ )\n\t{\n        vec3 dg = tri3(bp*2.);\n        p += (dg+iTime*.1*spd);\n\n        bp *= 1.8;\n\t\tz *= 1.5;\n\t\tp *= 1.2;\n        //p.xz*= m2;\n        \n        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;\n        bp += 0.14;\n\t}\n\treturn rz;\n}\n\nfloat posToFloat( vec3 p ){\n \n    float f = triNoise3D( p * .5, 1.3 );\n    return f;\n    \n}\n\nvoid buildBasis( in vec3 dir , in vec3 up , out vec3 x , out vec3 y , out vec3 z ){\n    \n\n //vec3( 0. , 1. , 0. );\n  //vec3  upVector = normalize( centerOfCircle );// vec3( 0. , 1. , 0. );\n  float upVectorProj = dot( up , dir );\n  vec3  upVectorPara = upVectorProj * dir;\n  vec3  upVectorPerp = up - upVectorPara;\n\n  vec3 basisX = normalize( upVectorPerp );\n  vec3 basisY = cross( dir , basisX );\n    \n    \n  x = basisX;\n  y = basisY;\n  z = dir;\n    \n}\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*iTime * .01;\n\tcamPos = vec3(3.5*sin(an),2.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n// ROTATION FUNCTIONS TAKEN FROM\n//https://www.shadertoy.com/view/XsSSzG\nmat3 xrotate(float t) {\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrotate(float t) {\n\treturn mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrotate(float t) {\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\n\nmat3 fullRotate( vec3 r ){\n \n   return xrotate( r.x ) * yrotate( r.y ) * zrotate( r.z );\n    \n}\n\nfloat rotatedBox( vec3 p , vec3 rot , vec3 size , float rad ){\n    \n    vec3 q = fullRotate( rot ) * p;\n    return udRoundBox( q , size , rad );\n    \n    \n}\n\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\n\nvec3 opRep( vec3 p,  vec3 s )\n{\n    vec3 q = p - s*round(p/s);\n    return q;\n}\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n    pos = opRep( pos , vec3(5.));\n   \tvec2 res = vec2( rotatedBox( pos , vec3( iTime * .05 + 1., iTime * .02 + 2. , iTime * .03  ), vec3( 0.7 ) , .1 ) , 1.0 );\n   \n     res.x += triNoise3D(pos* .1,1.1) * 1.3;\n   //vec2 res2 = vec2( sdPlane( pos - vec3( 0. , -1. , 0. )), 0.0 );\n   \t//vec2 res2 = vec2( sdSphere( pos - vec3( 0. , 0. , 0. ) , .5 ), 0.0 );\n    //res = opU( res ,  res2 );\n   \treturn res;\n    \n}\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n\n#define STEPS 50\nfloat fogCube( vec3 ro , vec3 rd , vec3 n ){\n \n    float lum = 1.;\n    for( int i = 0; i < STEPS; i++ ){\n        vec3 p = ro + rd * .01  * float( i );\n        lum += posToFloat( p );// + sin( p.y * 3. ) + sin( p.z * 5.);\n    }\n    \n    return lum;\n    \n    \n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\nvec3 hsv(float h, float s, float v)\n{\n  return mix( vec3( 1.0 ), clamp( ( abs( fract(\n    h + vec3( 3.0, 2.0, 1.0 ) / 3.0 ) * 6.0 - 3.0 ) - 1.0 ), 0.0, 1.0 ), s ) * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    vec2 res = calcIntersection( ro , rd  );\n\n\n    vec3 col = vec3( 0. );\n    \n    if( res.y > -.5 ){\n        \n        vec3 pos = ro + rd * res.x;\n        vec3 norm = calcNormal( pos );\n        \n       \tvec3 lightPos = vec3( 5. , 5. , 5. );\n        \n        lightPos -= pos;\n        lightPos = normalize( lightPos );\n        \n        vec3 refl = reflect( lightPos , norm );\n        \n        float eyeMatch = max( 0. , dot( refl , rd ) );\n        eyeMatch = 0.0;\n       \n        float lamb =max( 0.0 , dot( lightPos , norm ));\n        \n        lamb *= 2.;\n        \n        float lum = fogCube( pos , rd , norm );\n        \n        lum *= 1.2;\n       // col = norm * .5 + .5;\n      \n        float lu = max( 0.0 , -dot( lightPos , norm ));\n        \n        vec3 nCol = hsv( posToFloat( pos) + .3 , .4 , 1.);\n        nCol *=pow( lum / 20. , min( 5. , 1./eyeMatch) ) * eyeMatch;\n        \n        vec3 col2 = hsv( posToFloat( pos) + .6, .6, .4);\n        nCol += lamb * col2 * pow( lum / 20. , min( 5. , 1./eyeMatch) ) * ( 1. - eyeMatch );\n        \n        vec3 col3 = hsv( posToFloat( pos) + .6, .9, .2);\n        nCol += col3 * pow( lum / 20. , min( 5. , 1./eyeMatch) ) * ( 1. - lamb );\n        \n       // nCol +=  vec3( .2 ) * ( 1. - eyeMatch );\n       // nCol *= hsv( abs(sin(lum * .1)) , .5 , 1. );\n        \n        //nCol += pow( eyeMatch , 10. ) * vec3( 1. );//hsv( eyeMatch * 1. , .5 , 1. );\n        col += nCol;\n        \n        \n    }\n\n    fragColor = vec4( col , 1. );\n\n\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}