{
    "Shader": {
        "info": {
            "date": "1677803086",
            "description": "Possibly a new technique for drawing hyperbolas. This is a specific case of a more generalized midset algorithm I am exploring. Other easy shapes to draw are ellipses and parabolas.\n[url=https://www.shadertoy.com/playlist/fXjyRd]GEOMETRY PLAYLIST[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "Wlj3WV",
            "likes": 2,
            "name": "Hyperbolas",
            "published": 3,
            "tags": [
                "math",
                "conic",
                "hyperbola",
                "midset"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "/// by Dom Mandy in 2023\n\n\nconst float pi = 3.1415926535897932384626433832795;\n\n\nstruct Curve {\n    vec2 p;\n    float d;\n};\n\n\nvec2 rotate(vec2 p, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 R = mat2(c, -s, s, c);\n    return R * p;\n}\n\n\nCurve dCircle(vec2 uv, Curve circle) {\n    vec2 p = uv - circle.p;\n    circle.d = length(p) - circle.d;\n    \n\treturn circle;\n}\n\n\nvec2 pClose(vec2 uv, Curve curve) {\n    return max(curve.d, 0.) * normalize(curve.p - uv);\n}\n\n\nCurve dMidset(vec2 uv, Curve midset, Curve a, Curve b) {\n    vec2 u = uv - midset.p;\n    vec2 p = pClose(u, a);\n    vec2 q = pClose(u, b);\n    vec2 hypotenuse = p + q;\n    vec2 adjacent = normalize(p - q);\n    midset.d = 0.5 * dot(hypotenuse, adjacent);\n    \n    return midset;\n}\n\n\nCurve dHyperbola(vec2 uv, Curve hyperbola) {\n    const float center = .5;\n    \n    uv *= sign(uv.x);\n    \n    float delta = mix(0., sqrt(2.) - 1., hyperbola.d);\n        \n    Curve big;\n    big.d = mix(2., 0., hyperbola.d);\n    big.p.x = center - delta - big.d;\n    big = dCircle(uv, big);\n    \n    Curve small;\n    small.p.x = center + delta;\n    small.d = distance(uv, small.p);\n    \n    hyperbola = dMidset(uv, hyperbola, small, big);\n    \n    return hyperbola;\n}\n\n\n/*\ndraw antialiased point with minimum pixel size\n*/\nfloat draw(float sd, float r) {\n    float up = min(iResolution.x, iResolution.y);\n    \n    float d = abs(sd) * up;\n  \tfloat aa = fwidth(d);\n    \n    const float scale = 1. / 360.;\n    r *= up * scale;\n    \n    float a = smoothstep(-aa, aa, r - d);\n    \n   \treturn a;\n}\n\n\nfloat waveStep(float t) {\n    return .5 + .5 * sin(t * pi);\n}\n\n\nfloat pulseStep(float t, float c) {\n    return floor(mod(t, c)) + smoothstep(0., 1., fract(t));\n}\n\n\nvec2 circleStep(float t) {\n    const float k = .75 * pi;\n    t *= k;\n    return vec2(sin(t), cos(t));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // origin at center, +-1 on vertical axis\n    vec2 uv = 2. * (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    // pulsed animation \n    float t = pulseStep(.5 * iTime, 2.);\n    // distance between axis aligned hyperbolas\n    const float major = 2. / (1. + sqrt(5.));\n    uv /= major;\n    // spinning\n    const float k = -.75 * pi;\n    uv = rotate(uv, t * k);\n    // direction the hyperbola is facing\n    vec2 v = circleStep(t);\n    \n    // amount the mouth of the hyperbola is open\n    Curve hyperbola;\n    hyperbola.d = waveStep(t);\n    // distance calculations\n    float dCriss = dHyperbola(uv, hyperbola).d;\n    hyperbola.d *= -1.;\n    hyperbola.d += 1.;\n    uv = uv.yx;\n    uv.x *= -1.;\n    float dCross = dHyperbola(uv, hyperbola).d;\n    float d = min(dCriss, dCross) * major;\n    \n    // coloring\n    const vec3 b = vec3(0., .1262, .3015);\n    const vec3 y = vec3(1., .9169, .2731);\n    float a = draw(d, 3.);\n    vec3 color = mix(b, y, a);\n    \n    // Output to screen\n    fragColor.rgb = color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}