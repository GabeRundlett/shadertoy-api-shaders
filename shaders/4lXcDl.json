{
    "Shader": {
        "info": {
            "date": "1506873460",
            "description": "press mouse to get an intuition on what green shows.\nas long as magenta circles are very close, all is fine.\n\njust a very quick test on trigonometry precision, scale and rotation directions.\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4lXcDl",
            "likes": 1,
            "name": "difference of 2 identities",
            "published": 3,
            "tags": [
                "acos",
                "precision",
                "mirror",
                "rotation",
                "inverse",
                "error",
                "trigonometry",
                "identity"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 496
        },
        "renderpass": [
            {
                "code": "//there are 2 fast small ways to define a mat2 \"rotation\" matrix.\n//they are NOT identical matrices;\n//r2() rotates,\n//m3() mirrors on a half-rotated axis.\n//\n//As long as you apply the matrix only once, these behave near identically\n//, which is shown in this shader\n//\n//BUT:\n//r2(a)*r2( a)==r2(a+a)          is a doubled rotation        \n//r2(a)*r2(-a)==r2(a-a)==r3( 0.) rotates back and forth,the inverse to r2(a) is r2(-a);\n//r3(a)*m3( a)         ==r3( 0.) rotates back and forth,r3(a) is is its own inverse.\n//\n//functions that are their own inverse are sometimes faster\n//functions that are their own inverse are always more confusing to use.\n// because they oscillate or ring all over the place between 2 tangents \n//  while not converging.\n\n//positive rotation is counterclockwise.\n//full rotation is acos(-1.)*2; //in radians.\nmat2 r2(float r){float c=cos(r),s=sin(r);return mat2(c,-s,s,c);}\n//Below is shorter and easier to change in rotation direction (flip 1 sign).\n//Above is common, below is not as common \"identity\"\n// Different order of operations makes tiny different rounding errors.\n//  Differential is highlighted in green.\n#define m3(r) mat2(sin(vec4(acos(0.),0,0,0)+r))\n\n//planar zoom.\n#define ViewZoom 3.\n//sub-pixel blur\n#define fsaa 14./min(iResolution.x,iResolution.y)\n//View Frame\n#define fra(u) (u-.5*iResolution.xy)*ViewZoom/iResolution.y\n\nvoid mainImage( out vec4 fragColor,vec2 u ){\n  u=fra(u); \n    \n vec3 c=vec3(0);\n  c.r=length(u-vec2(1,0)*r2( iTime));\n  c.b=length(u-vec2(1,0)*m3( iTime));\n if(iMouse.z>0.)\n  c.b=length(u-vec2(1,0)*m3(-iTime));//negate one angle.\n\n c.g=c.r-c.b;\n c.rb=fract(c.rb);\n c.g=fract(c.g);//exaggerates a tiny differential between the 2.\n\n fragColor = vec4(c,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}