{
    "Shader": {
        "info": {
            "date": "1684166743",
            "description": "wanted to see how far i could go if i used a buffer as a \"palette\" for an image; came out pretty neat i think",
            "flags": 32,
            "hasliked": 0,
            "id": "Dty3zG",
            "likes": 2,
            "name": "dynamic gradient map (epic style",
            "published": 3,
            "tags": [
                "2d",
                "filter",
                "palette",
                "gradientmap"
            ],
            "usePreview": 1,
            "username": "oatmealine",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "#define SAMPLES 256\n\n// https://stackoverflow.com/a/28873770\nfloat gray(vec3 color) {\n    return (min(color.r, min(color.g, color.b)) + max(color.r, max(color.g, color.b))) * 0.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 tex = texture(iChannel0, uv);\n    \n    // this produces a kind of sinewave over the screen -\n    // this determines where on the Y axis the palette (our buffer)\n    // will be sampled\n    float sampOffset = uv.y + sin(uv.x * 1.9 + iTime * 0.2) * 0.2;\n    \n    // for a \"pure\" palette shader, this should be left at an\n    // arbitrarily high value - however, setting this to 1\n    // means values too far from the palette will instead be\n    // white. this produces a very cool effect! so i kept it\n    float minDist = 1.;\n    vec3 minCol = vec3(1.0);\n    \n    // go through our palette buffer, sampling values\n    for (int i = 0; i < SAMPLES; i++) {\n        // [0 - SAMPLES] -> [0.0 - 1.0]\n        float a = float(i) / float(SAMPLES);\n        // sample\n        vec3 palette = texture(iChannel1, vec2(a, sampOffset)).rgb;\n        // measure distance\n        vec3 diff = abs(palette - tex.rgb);\n        float dist = diff.r + diff.g + diff.b;\n        \n        if (dist < minDist) {\n            minDist = dist;\n            minCol = palette;\n        }\n        \n        // silly no-if version i tried. looks wacky but interesting\n        //minCol = mix(minCol, palette, clamp(dist - minDist, 0.0, 1.0));\n    }\n    \n    //fragColor = vec4(vec3(sampOffset), 1.0);\n    //fragColor = texture(iChannel1, uv);\n    fragColor = vec4(minCol, tex.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// literally just a modified ver of the default shader lmfao\n// could be replaced w/ a plasma for cooler effect? potentially...\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord + iMouse.xy) / iResolution.xy;\n    uv.y += sin(uv.x + iTime) * 2.0;\n    uv.y *= 2.0;\n\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}