{
    "Shader": {
        "info": {
            "date": "1719555691",
            "description": "Stage Lights that slowly changes in color",
            "flags": 0,
            "hasliked": 0,
            "id": "XXcXW2",
            "likes": 1,
            "name": "Stage Lights",
            "published": 3,
            "tags": [
                "lights",
                "moving",
                "stage",
                "show",
                "circularcolorful"
            ],
            "usePreview": 0,
            "username": "mr_vero",
            "viewed": 104
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time-based animation factor\n    float time = iTime * 0.2;\n\n    // Define points in a 3x3 grid\n    vec2 points[9] = vec2[](\n        vec2(0.0, 0.0), vec2(0.5, 0.0), vec2(1.0, 0.0),\n        vec2(0.0, 0.5), vec2(0.5, 0.5), vec2(1.0, 0.5),\n        vec2(0.0, 1.0), vec2(0.5, 1.0), vec2(1.0, 1.0)\n    );\n\n    // Dynamically changing colors based on time\n    vec3 colors[9] = vec3[](\n        vec3(sin(time), cos(time), sin(time + 2.0)),\n        vec3(sin(time + 1.0), cos(time + 1.0), sin(time + 3.0)),\n        vec3(sin(time + 2.0), cos(time + 2.0), sin(time + 4.0)),\n        vec3(sin(time + 3.0), cos(time + 3.0), sin(time + 5.0)),\n        vec3(sin(time + 4.0), cos(time + 4.0), sin(time + 6.0)),\n        vec3(sin(time + 5.0), cos(time + 5.0), sin(time + 7.0)),\n        vec3(sin(time + 6.0), cos(time + 6.0), sin(time + 8.0)),\n        vec3(sin(time + 7.0), cos(time + 7.0), sin(time + 9.0)),\n        vec3(sin(time + 8.0), cos(time + 8.0), sin(time + 10.0))\n    );\n\n    // Simple distance-based color blending\n    vec3 color = vec3(0.0);\n    float totalWeight = 0.0;\n    for(int i = 0; i < 6; i++) {\n        float dist = distance(uv, points[i]);\n        float weight = 1.0 / (dist + 0.01); // Avoid division by zero\n        color += colors[i] * weight;\n        totalWeight += weight;\n    }\n    color /= totalWeight;\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}