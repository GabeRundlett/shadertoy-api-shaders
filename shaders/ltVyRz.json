{
    "Shader": {
        "info": {
            "date": "1535883038",
            "description": "A simple water caustics shader which draws random vertical and horizontal lines. Its transparency varies depending on the uv's distance from a desired point.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltVyRz",
            "likes": 4,
            "name": "Water Caustics",
            "published": 3,
            "tags": [
                "random",
                "caustics"
            ],
            "usePreview": 0,
            "username": "RKB2000",
            "viewed": 851
        },
        "renderpass": [
            {
                "code": "//1D random value number generator\nfloat random1D(float p, float seed) \n{\n    return fract(sin(p) * seed);\n}\n\n//Plots the lines with a given direction and height\nfloat plot(vec2 uv, float base, float eqa) \n{\n    return smoothstep(eqa + 0.4 * abs(sin(uv.x + uv.y + iTime)), eqa, base) -\n        smoothstep(eqa, eqa - 0.4 * abs(cos(uv.x + uv.y + iTime)), base);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    \n    //Scale factor\n    uv *= 10.0;\n    \n    //Creates tiles and moves them through time\n    vec2 i_uv = floor(vec2(uv.x + iTime * 0.02, uv.y + iTime * 0.23));\n    vec2 f_uv = fract(vec2(uv.x + iTime * 0.02, uv.y + iTime * 0.23));\n    \n    //Equation for the vertical lines\n    float eqaX = mix(random1D(i_uv.y, i_uv.x * 134785.543), \n                     random1D(i_uv.y + 1.0, i_uv.x * 134785.543), \n                     smoothstep(0.,1.,f_uv.y));\n    \n    //Equation for the horizontal lines\n    float eqaY = mix(random1D(i_uv.x, i_uv.y * 53325.345), \n                     random1D(i_uv.x + 1.0, i_uv.y * 53325.345), \n                     smoothstep(0.,1.0,f_uv.x));\n    \n    //Background texture\n    vec4 col = texture(iChannel0, uv);\n    \n    //Adds transparency to minimise the visual artefacts\n    vec2 alpha = 0.6 - abs(vec2(0.5) - f_uv);\n    \n    //Adds the lines onto the background\n    col += alpha.x * 0.6 * plot(uv, eqaX, f_uv.x);\n    col += alpha.y * 0.6 * plot(uv, eqaY, f_uv.y);\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}