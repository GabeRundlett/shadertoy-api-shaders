{
    "Shader": {
        "info": {
            "date": "1490477650",
            "description": "#4 - Epicycloid",
            "flags": 0,
            "hasliked": 0,
            "id": "XdScRR",
            "likes": 6,
            "name": "[ Famous curves ] - #4",
            "published": 3,
            "tags": [
                "2d",
                "rotation",
                "parametric",
                "epicycloid",
                "geometryblending"
            ],
            "usePreview": 0,
            "username": "Yrai",
            "viewed": 666
        },
        "renderpass": [
            {
                "code": "\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n/*\n   Epicycloid facts:\n  ----------------\n\t- (a) There are four curves which are closely related: epicycloid, epitrochoid, hypocycloid, and\n\t\t  the hypotrochoid. They are all traced by a point P on a circle of radius b which rolls\n          around a fixed circle of radius a.\n\t- (b) For an epicycloid, the circle of radius b rolls on the outside of the circle of radius a. The\n          point P is on the edge of the circle of radius b.\n\t- (c) If a = b: cardioid.\n    - (d) If a = 2b, nephroid.\n*/\n\n#define res_            iResolution\n#define time_           iTime\n#define trace_len_      222\n#define eps_            2.\n\n#define crot(a)  mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvec2  domain(vec2 uv, float s);\nvec2  parametric(float t);\nfloat trace(vec2 p, float t);\nfloat _union_soft(float a, float b, float r);\n\nvoid mainImage(out vec4 o, vec2 f) {\n\tvec2 p = domain(f, 5.);\n  \tp *= crot(time_*.2);\n    \n    // t -> [0., 5.]\n    float t = time_;\n    \n    // Astroid traces\n    float dtrace = smoothstep(0.08, 0.001, trace(p, t));\n    float dtrace_s0 = smoothstep(0.16, 0.001, trace(p, t));\n    \n    // Axis\n    float ax = min(\n        smoothstep(0., 0.02, abs(p.x)),\n        smoothstep(0., 0.02, abs(p.y))\n    );\n    // Origin\n    float org = smoothstep(0.09, 0., length(p)-.01);\n    \n    // Palette \n    vec3 gray   = vec3(.2);\n    vec3 white  = vec3(5.);\n    \n    // Shading\n    vec3 c  = vec3(0.);\n    c = mix(c, gray, fract(1.-ax));\n    c = mix(c, white, org);\n    \n    c = mix(c, vec3(0., 0.3, 1.), dtrace_s0);\n    c = mix(c, gray, dtrace*p.x);\n    c = mix(c, vec3(.1, 1.3, .1), dtrace*abs(p.y)*length(p));\n    c = mix(c, vec3(.1, 1.3, .1), dtrace*-abs(p.y)*length(p));\n    \n    c.b += dtrace_s0;\n    \n    \n    o = vec4(c, 1.);\n}\n\nfloat _union_soft(float a, float b, float r) {\n\tfloat e = max(r - abs(a - b), 0.);\n\treturn min(a, b) - e*e*0.25/r;\n}\n\nvec2 parametric(float t) {\n\tfloat a = 2.;\n    float b = 1.2;\n    return vec2( (a+b)*cos(t) - b*cos((a/b + 1.) * t), (a+b)*sin(t) - b*sin((a/b + 1.) * t) );\n}\n\nfloat trace(vec2 p, float t) {\n    float d = 1e10;\n    float e = 0.;\n    for(int i = 0; i < trace_len_; i++) {\n    \td  = _union_soft(d, distance(p, parametric(t-e)), sin(time_)*.5);\n        e += eps_; \n    }\n    return d;\n}\n\nvec2 domain(vec2 uv, float s) {\n    return (2. * uv.xy - res_.xy) / res_.y * s;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}