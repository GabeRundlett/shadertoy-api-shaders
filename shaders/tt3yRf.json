{
    "Shader": {
        "info": {
            "date": "1609821079",
            "description": "working towards a playable game of some sort.",
            "flags": 32,
            "hasliked": 0,
            "id": "tt3yRf",
            "likes": 9,
            "name": "Ess d'Eff runner two",
            "published": 3,
            "tags": [
                "game",
                "sdf"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 295
        },
        "renderpass": [
            {
                "code": "// Fork of \"ess de eff runner 1\" by elenzil. https://shadertoy.com/view/3ldyzM\n// 2021-01-02 16:41:48\n\n#ifdef GRIMOIRE\n#include <common.glsl>\n#endif\n\n\nfloat gMyTime = 0.0;\n\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    ivec2 IJ = ivec2(XY);\n    \n    gMyTime = iTime * 3.14159 * 2.0;\n\n    float smallRes = min(iResolution.x, iResolution.y);\n\n    vec2  p = (XY - iResolution.xy * 0.5) / smallRes * 2.0;\n    float d = sdScene(p, gMyTime);\n\n    float c = 0.0;\n    vec3  rgb = vec3(c);\n\n    rgb += 0.5 * smoothstep(3.0 / smallRes, 0.0, d);\n //   rgb += sin(d * 80.0) * 0.03;\n    \n    for (int n = 0; n < numBalls; ++n) {\n        float ballT = float(n) / float(numBalls);\n        vec2 part1 = texelFetch(iChannel0, ivec2(n, 0), 0).xy;\n        float bc = smoothstep(1.0 / smallRes, 0.0, length(part1 - p) - ballRad(ballT));\n        rgb.r += bc * 0.3;\n        rgb.g += bc * 0.5;\n        rgb.b += bc * 0.9;\n    }\n\n\n    RGBA.rgba = vec4(rgb, 1.0);\n}\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n * The SDF is defined here in Common so that it can be accessed\n * from both the buffer using the SDF as input for stateful dynamics\n * and by the main display pass.\n *\n * I originally had the SDF computed in a buffer,\n * but I worried that all the texture-sampling calls were slowing\n * things down compared to just calling into the code again.\n *\n * A huge advantage of not computing the SDF in a buffer is that\n * when it's in a buffer you can't access SDF values which are off-screen.\n *\n * A disadvantage of having the SDF in Common is that it precludes\n * the possibility of a stateful SDF. for example one in which the\n * player of a game is able to modify the terrain.\n *\n */\n\n\nconst float PI        = 3.14159265259;\nconst float PI2       = (PI * 2.0);\n\nconst int numBalls = 13;\nconst float ballRadMin = 0.03;\nconst float ballRadMax = 0.07;\n\n// polynomial smooth min (k = 0.1);\nfloat sminCubic( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nconst float epsilonGradient = 0.0001;\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat opUnion( float d1, float d2 ) {  return min(d1,d2); }\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\nfloat opSubtraction2( float d1, float d2 ) { return max(d1,-d2); }\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdAnnulus(in vec2 p, in float r1, in float r2) {\n    return opSubtraction2(sdCircle(p, r2), sdCircle(p, r1));\n}\n\nfloat sdPentagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n}\n\nfloat sdAnnularPentagon(in vec2 p, in float r1, in float r2) {\n    return opSubtraction2(sdPentagon(p, r2), sdPentagon(p, r1));\n}\n\nmat2 rot2(float radians) {\n    float s = sin(radians);\n    float c = cos(radians);\n    return mat2(s, c, -c, s);\n}\n\nfloat sdScene(in vec2 p, in float time) {\n    float width = 0.03;\n\n    float d = 1e9;\n\n    float circRad = 0.8 + sin(time * 0.11) * 0.1;\n    d = opUnion(d, -sdCircle(p, circRad));\n\n    mat2 r2   = rot2(sin(time * 0.3211) * 0.2);\n    float circRad2 = 0.2;\n    d = opSubtraction2(d, sdCircle(abs(r2 * p) - circRad * 0.7 + sin(time * 0.02 + 2.0) * 0.2, circRad2));\n\n    mat2 r1   = rot2(time * -0.1);\n    mat2 r3   = rot2(time * -0.1 * 3.0);\n    vec2 sep  = vec2(sin(time * 0.121) * 0.5, 0.0);\n    vec2 sep2 = vec2(0.0, cos(time * 0.121) * 0.15);\n\n    float pentRad = 0.2;\n    float pr;\n    float w1 = (sin(time * 0.31) * 0.5 + 0.5) * 0.15;\n\n    pr = pentRad;// - 0.2 * (sin(gMyTime * 0.2) * 0.5 + 0.5);\n    float da = sdAnnularPentagon((p + sep + sep2) * r1, pr - 0.001 - w1, pr);\n\n    pr = pentRad ; // - 0.2 * (cos(gMyTime * 0.2) * 0.5 + 0.5);\n    float db = sdAnnularPentagon((p - sep - sep2) * r3, pr - 0.001 - w1, pr);\n    \n    float dc = sminCubic(da, db, 0.1);\n  \n    d = min(d, dc);\n    \n    return d;\n}\n\nvec2 gradScene(in vec2 p, in float time, in float d_at_p) {\n    float dex = sdScene(p + vec2(epsilonGradient, 0.0), time);\n    float dey = sdScene(p + vec2(0.0, epsilonGradient), time);\n    return vec2(dex - d_at_p, dey - d_at_p);\n}\n\n\n///////////////////////////////////////////\n\nfloat ballRad(float t) {\n    return mix(ballRadMin, ballRadMax, t);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/////////////////////////\n// this buffer is the dynamics, based on the SDF\n\n#ifdef GRIMOIRE\n#include <common.glsl>\n#endif\n\nfloat gMyTime = 0.0;\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    gMyTime = iTime * 3.14159 * 2.0;\n    float smallRes = min(iResolution.x, iResolution.y);\n\n    ivec2 IJ = ivec2(XY);\n    \n    if (IJ.x >= numBalls || IJ.y > 0) {\n        discard;\n    }\n    \n    vec2 p;\n    vec2 v;\n    \n    float ballT = XY.x / float(numBalls);\n    \n    float offX = (XY.x - float(numBalls) * 0.5) * 100.0 / smallRes;\n        \n    if (iMouse.z > 0.0) {\n        p  = (iMouse.xy - iResolution.xy * 0.5) / smallRes * 2.0;\n        p.x += offX;\n        v  = vec2(0.0);\n    }\n    else {\n        if (iFrame > 1) {\n            // fetch last value\n            vec4 pv = texelFetch(iChannel0, IJ, 0);\n\n            p = pv.xy;\n            v = pv.zw;\n        }\n        else {\n            p = vec2(offX, 1.0);\n            v = vec2(0.0);\n        }\n        \n        float smallRes = min(iResolution.x, iResolution.y);\n\n        // normalize euler integration to at least 60 Hz\n        const float fixedDT = 1.0 / 30.0;\n        float steps = round(iTimeDelta / fixedDT);\n\n        steps = max(steps, 1.0);\n\n        float dt = iTimeDelta / steps;\n\n        float n = 0.0;\n        while (n < steps) {\n            ivec2 pij = ivec2((iResolution.xy + p * smallRes) / 2.0);\n\n            \n            // and advance\n            vec4 sdfInfo = texelFetch(iChannel1, pij, 0);\n            float d   = sdScene(p, gMyTime);\n            vec2 grd  = gradScene(p, gMyTime, d);\n            float gm  = length(grd);\n            vec2 grdNorm = grd/gm;\n            vec2 tang    = vec2(-grd.y, grd.x);\n\n            v = tang * 12000.0 * 1.0;\n            // add in a little physics variation per-particle to keep them separated\n            v *= (1.0 + XY.x * -0.03);\n            p += dt  * v;\n\n            p -= (d - ballRad(ballT)) * grdNorm;\n\n            n += 1.0;\n        }\n\n    }\n    \n   // p.x = 1.0;\n    \n    RGBA = vec4(p, v);\n}\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}