{
    "Shader": {
        "info": {
            "date": "1719633271",
            "description": "just messing around with the parent project",
            "flags": 0,
            "hasliked": 0,
            "id": "X33SDX",
            "likes": 4,
            "name": "Fork cellnoise tetrismegi 504",
            "published": 3,
            "tags": [
                "cellularnoise"
            ],
            "usePreview": 0,
            "username": "tetrismegistus",
            "viewed": 126
        },
        "renderpass": [
            {
                "code": "float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;    \n    vec3 blue = vec3(0.455,0.537,0.753);\n    vec3 orange = vec3(0.961,0.318,0.035);\n    vec3 offWhite = vec3(0.941,0.918,0.776);\n    \n    vec3 verGrad = mix(orange, blue, uv.y);\n    vec3 horGrad = mix(offWhite, blue, uv.x);\n    vec3 mixGrad = mix(mix(offWhite,blue, .1 + uv.x * sin(iTime) + uv.y * cos(iTime)), mix(verGrad, horGrad, -abs(sin(iTime + uv.x) * .5)), uv.x * uv.y);    \n        \n    vec3 color = vec3(0.0);\n    uv *= 10.;\n    vec2 pos = vec2(uv);\n\n    \n\n    vec2 i_uv = floor(uv);\n    vec2 f_uv = fract(uv);\n\n    float m_dist = 1.; \n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x),float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 point = vec2(random2(i_uv + neighbor));\n\n\t\t\t// Animate the point\n            point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n\n\t\t\t// Vector between the pixel and the point\n            vec2 diff = neighbor + point - f_uv;\n\n            // Distance to the point\n            float dist = length(diff);\n\n            // Keep the closer distance\n            m_dist = smoothstep(m_dist, dist, .9);\n        }\n    }\n\n    // Draw the min distance (distance field)\n    color += m_dist;\n\n    // Show isolines\n    //color -= step(.7,abs(sin(50.0*m_dist)))*.3;\n\n    // Output to screen    \n    \n    color -= vec3(smoothstep(.7,abs(sin(27.0*m_dist)), .1)*.5, 1.0, 1.0);\n    color += mixGrad;\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}