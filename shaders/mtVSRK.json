{
    "Shader": {
        "info": {
            "date": "1686222577",
            "description": "周易卦随机",
            "flags": 0,
            "hasliked": 0,
            "id": "mtVSRK",
            "likes": 11,
            "name": "patterns,zhouyi,yi,Hexagrams ",
            "published": 3,
            "tags": [
                "patterns",
                "zhouyi",
                "yi",
                "hexagrams"
            ],
            "usePreview": 0,
            "username": "yufengjie",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "\nconst float w = 0.8; // 爻的宽度\nconst float h = 0.1; // 爻的高度\nconst float yinGap = 0.2; // 阴爻中间的间距\nconst float gap = 0.1; // 爻的间距\n\nfloat random(float seed) {\n  return fract(sin(seed) * 4563.5421);\n}\n\nfloat genCorner(vec2 D, vec2 st) {\n  vec2 halfS = smoothstep(D - vec2(0.01), D, st);\n  vec2 halfE = smoothstep(D, D + vec2(0.01), st);\n  vec2 c = halfS - halfE;\n  return c.x + c.y;\n}\n\nfloat genBound(vec2 st) {\n  float lb = genCorner(vec2(0.0), st);\n  float rt = genCorner(vec2(1.0), st);\n  return lb + rt;\n}\n\nfloat SMOOTH(float D, float d) {\n  return smoothstep(D - 0.01, D + 0.01, d);\n}\n\nfloat rect(vec2 st, float l, float r, float t, float b) {\n  float v = SMOOTH(b, st.y) - SMOOTH(t, st.y);\n  float h = SMOOTH(l, st.x) - SMOOTH(r, st.x);\n  return v * h;\n}\n\nfloat geneYao(vec2 st, bool yang) {\n  if(yang) {\n    return rect(st, 0.0, w, h, 0.0);\n  } else {\n    float l = rect(st, 0.0, w * 0.5 - yinGap * 0.5, h, 0.0);\n    float r = rect(st, w * 0.5 + yinGap * 0.5, w, h, 0.0);\n    return l + r;\n  }\n}\n\nfloat geneYi(vec2 st, bool y1, bool y2, bool y3) {\n  float W = w;\n  float H = h * 3.0 + gap * 2.0;\n  vec2 t = vec2(W * 0.5, H * 0.5);\n  st -= 0.5;\n  st += t;\n\n  float yao1 = geneYao(st, y1);\n  st.y -= gap + h;\n  float yao2 = geneYao(st, y2);\n  st.y -= gap + h;\n  float yao3 = geneYao(st, y3);\n  st.y -= gap + h;\n  return yao1 + yao2 + yao3;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 st = fragCoord.xy / iResolution.xx;\n  vec3 color = vec3(0.0);\n\n  float col = 10.0;\n\n  st *= col;\n\n  vec2 ipos = floor(st);\n  st = fract(st);\n  float b = genBound(st);\n  \n  float t = floor(iTime * 3.);\n\n  bool y1 = random(ipos.x + ipos.y + 11.13 + t) > 0.5;\n  bool y2 = random(ipos.x + ipos.y + 23.77 + t) > 0.5;\n  bool y3 = random(ipos.x + ipos.y + 51.67 + t) > 0.5;\n\n  float yi = geneYi(st, y1, y2, y3);\n\n  color += yi;\n  color += b;\n\n  fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}