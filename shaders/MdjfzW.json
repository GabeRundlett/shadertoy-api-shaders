{
    "Shader": {
        "info": {
            "date": "1499825795",
            "description": "The maths may be a bit off in the spectrogram.\n\nFrame rate is deliberately chopped as the spectrogram calculation is expensive.  The GPU scheduler on my system (and perhaps on yours) is not very bright so this helps keep the webpage responsive.",
            "flags": 8,
            "hasliked": 0,
            "id": "MdjfzW",
            "likes": 4,
            "name": "Sound Experiment 2017-07-11",
            "published": 3,
            "tags": [
                "sound"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 701
        },
        "renderpass": [
            {
                "code": "/*\nSound Experiment\nCopyright 2017 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\n\nfloat wave(float t) { return sin(2.*pi*fract(t)); }\n\nfloat synth(float freq, float freq2, float time) {\n\n    float freq3 = freq2 + 0.25;\n\n    float v = 0.;\n\n    for (float n=1.; n<5.; n+=1.00+0.002) {\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq2*time));\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq3*time));\n    }\n    return v;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n\n    float c = 261.63;\n    \n    vec2 v = vec2(0.);\n    \n    v.x += synth(c*2., c*2./8., time);\n    v.y += synth(c*2., c*2./8., time+1.2);\n\n    v *= max(1.-exp(-time),0.);\n\n    return vec2(v);\n}\n\n/*******************************/\n\nvec2 spectrogram(float windowmax, float time, float freq) {\n    vec2 sum = vec2(0.);\n    float window = windowmax;\n    float samplerate = iSampleRate/6.;\n    for (float trel = -window; trel <= window; trel+=1./samplerate) {\n        // Cosine window\n        float w = (0.5+0.5*cos(trel/window*pi))/samplerate/window;\n        float samp = dot(vec2(1.),mainSound(0,time+trel));\n        sum += w*vec2(cos(trel*freq*2.*pi),sin(trel*2.*pi))*samp;\n    }\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame%30!=0) discard;\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(0.5,0.);\n    fragColor.b = 0.;\n    fragColor.rgb = 5.*vec3(10.,3.2,1.)*\n        length(spectrogram(0.1*sqrt(uv.y), uv.x*4.+iTime, uv.y*4000.));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nSound Experiment\nCopyright 2017 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\n\nfloat wave(float t) { return sin(2.*pi*fract(t)); }\n\nfloat synth(float freq, float freq2, float time) {\n\n    float freq3 = freq2 + 0.25;\n\n    float v = 0.;\n\n    for (float n=1.; n<5.; n+=1.00+0.002) {\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq2*time));\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq3*time));\n    }\n    return v;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n\n    float c = 261.63;\n    \n    vec2 v = vec2(0.);\n    \n    v.x += synth(c*2., c*2./8., time);\n    v.y += synth(c*2., c*2./8., time+1.2);\n\n    v *= max(1.-exp(-time),0.);\n\n    return vec2(v);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}