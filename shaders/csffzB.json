{
    "Shader": {
        "info": {
            "date": "1688859284",
            "description": "License:\n- GPL v3\n\nBased Upon:\n- aleklesovoi CRT TV Shader Shadertoy Example (https://www.shadertoy.com/view/DldXWS)\n- Natron OpenFX-Misc (/openfx-misc/Distortion/DistortionModel.cpp)\n- Blender Tracking Brown-Conrady Distortion Model (https://archive.blen",
            "flags": 0,
            "hasliked": 0,
            "id": "csffzB",
            "likes": 1,
            "name": "Panotools Lens Distortion",
            "published": 3,
            "tags": [
                "distortion",
                "lens",
                "panotools"
            ],
            "usePreview": 1,
            "username": "KartaVR",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "// Panotools Lens Distortion\n\n// Open-Source License:\n// GPL v3\n\n// Fragment Shader Based Upon:\n// aleklesovoi's \"CRT TV Shader\" Shadertoy Example (https://www.shadertoy.com/view/DldXWS)\n// Natron OpenFX-Misc (/openfx-misc/Distortion/DistortionModel.cpp)\n// Blender Tracking Brown-Conrady Distortion Model (https://archive.blender.org/developer/D9037)\n\nvec2 PanotoolsDistortion(in vec2 uv)\n{\n    // Distortion\n    float a = 0.0;\n    float b = 0.346;\n    float c = 0.0;\n\n    // Center Offset\n    float cx = 0.0;\n    float cy = 0.0;\n\n    vec2 offset = vec2(cx / iResolution.x, cy / iResolution.y);\n\n    // Panotools uses UV coordinates with a [-1:1] range\n    uv = ((uv + offset) * 2.0) - 1.0;\n\n    // Compute the distortion\n    float x2 = uv.x * uv.x;\n    float y2 = uv.y * uv.y;\n\n    float r2 = x2 + y2;\n    float d = 1.0 - (a + b + c);\n    float r = sqrt(r2);\n    float scale = (a * r2 + c) * r + b * r2 + d;\n\n    uv.x *= scale;\n    uv.y *= scale;\n\n    // Transform the UV coordinates back to a [0:1] range\n    uv = (uv * 0.5) + 0.5;\n\n    return uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Use a \"Screen Space\" UV Coordinate [0;1] range\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Apply the lens distortion\n    uv = PanotoolsDistortion(uv);\n    vec3 result = texture(iChannel0, uv).rgb;\n\n    // Return the final output\n    fragColor = vec4(result, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}