{
    "Shader": {
        "info": {
            "date": "1689235372",
            "description": "dithering schema using barycentric coordinates, with more comments and cleaned up a bit with a bit more control. \nI bet noone can figure out what this is used for lol. Maybe I'll make a demo at some point.",
            "flags": 0,
            "hasliked": 0,
            "id": "DdlBWf",
            "likes": 5,
            "name": "barycentric dithering (Cleanup)",
            "published": 3,
            "tags": [
                "dither",
                "barycentric",
                "hash"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "/*\nThis shows how to dither a Barycentric coordinate system. \nI played around with a bunch of variations and performance tested them. \nsee https://www.shadertoy.com/view/msXfWs\n\nThis is a cleaned up and slightly improved version of dud31 original idea \n(https://www.shadertoy.com/view/DdlBDX)\n*/\n\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins. May 2018\n// https://www.shadertoy.com/view/XdGfRR\n#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UIF (1.0 / float(0xffffffffU))\nfloat hash12C(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * UI2;\n\tuint n = (q.x ^ q.y) * UI0;\n\treturn float(n) * UIF;\n}\n\n// valve edition (slightly modified to be a true 12 dither)\n// http://alex.vlachos.com/graphics/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf\n// input in pixels (ie not normalized uv)\nfloat ScreenSpaceDither12(vec2 vScreenPos) {\n    float vDither = dot( vec2( 171.0, 231.0 ), vScreenPos.xy + iTime); \n    return fract( vDither / 103.0);\n}\n\nfloat deter(vec2 a, vec2 b) { \n    return a.x*b.y - a.y*b.x; \n}\n\nvec3 bary(vec2 a, vec2 b, vec2 c, vec2 p) {\n    float ar = deter(b - a, c - a);\n    float w = deter(b - a, p - a) / ar;\n    float v = deter(a - c, p - c) / ar;\n    vec3 s = vec3(1.0 - v - w, v, w);\n    return s;\n}\n\nvec2 rot(vec2 v, float th) {\n    return vec2(v.x*cos(th) - v.y*sin(th), v.x*sin(th) + v.y*cos(th));\n}\n\n// a is 0-1 and contrast is 1-inf with 1 being original contrast\nvec3 smoothContrast(vec3 a, float contrast) {\n    vec3 powA = vec3(pow(a.x, contrast), pow(a.y, contrast), pow(a.z, contrast));\n    return powA/(powA.x + powA.y + powA.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UV coords centered on screen\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    // coordinates of corner\n\tvec2 v_a = vec2(1.5,1.0)*cos(iTime + vec2(0.0,1.0) + 0.0 );\n\tvec2 v_b = vec2(1.5,1.0)*cos(iTime + vec2(0.0,1.0) + 1.5 );\n\tvec2 v_c = vec2(1.5,1.0)*cos(iTime + vec2(0.0,1.0) + 3.0 );\n    \n    // 1.- distance to corner\n    vec3 cDist = bary(v_a, v_b, v_c, p);\n    \n    // black mask for outside of triangle\n    float mask = step(0., cDist.x) * step(0., cDist.y) * step(0., cDist.z);\n    \n    // change contrast value\n    float contrast = 2.0;\n    cDist = smoothContrast(cDist, contrast); \n        \n    // noise pattern with range 0-1\n    //float rnd = hash12C(p); // random dither\n    float rnd = ScreenSpaceDither12(fragCoord.xy); // valve animated dither\n    // smooth contrast creates artifacts in the dither. Clamp on the dither removes it\n    rnd = clamp(rnd, 0.01, 0.99); \n    \n    //apply float dither to three values of cDist\n    vec3 col;\n    if (cDist.x > rnd) {\n        col = vec3(1, 0, 0);\n    } else if (1.-cDist.z > rnd) {\n        col = vec3(0, 1, 0);\n    } else {\n        col = vec3(0, 0, 1);\n    }    \n    \n    // apply mask\n    col = col * mask;\n    \n\tfragColor = vec4(col, 1.);\n    \n    // test if all three values togethere are still 1.\n    float sumCheck = fract(col.x + col.y + col.z);\n    //fragColor = vec4(sumCheck);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}