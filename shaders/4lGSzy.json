{
    "Shader": {
        "info": {
            "date": "1484744941",
            "description": "Just a basic 2D audio visualizer. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "4lGSzy",
            "likes": 27,
            "name": "Basic audio visualizer",
            "published": 3,
            "tags": [
                "2d",
                "visualizer"
            ],
            "usePreview": 0,
            "username": "Lallis",
            "viewed": 3143
        },
        "renderpass": [
            {
                "code": "#define time iTime\n\nfloat noise3D(vec3 p)\n{\n\treturn fract(sin(dot(p ,vec3(12.9898,78.233,12.7378))) * 43758.5453)*2.0-1.0;\n}\n\nvec3 mixc(vec3 col1, vec3 col2, float v)\n{\n    v = clamp(v,0.0,1.0);\n    return col1+v*(col2-col1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv*2.0-1.0;\n    p.x*=iResolution.x/iResolution.y;\n    p.y+=0.5;\n    \n    vec3 col = vec3(0.0);\n    vec3 ref = vec3(0.0);\n   \n    float nBands = 64.0;\n    float i = floor(uv.x*nBands);\n    float f = fract(uv.x*nBands);\n    float band = i/nBands;\n    band *= band*band;\n    band = band*0.995;\n    band += 0.005;\n    float s = texture( iChannel0, vec2(band,0.25) ).x;\n    \n    /* Gradient colors and amount here */\n    const int nColors = 4;\n    vec3 colors[nColors];  \n    colors[0] = vec3(0.0,0.0,1.0);\n    colors[1] = vec3(0.0,1.0,1.0);\n    colors[2] = vec3(1.0,1.0,0.0);\n    colors[3] = vec3(1.0,0.0,0.0);\n    \n    vec3 gradCol = colors[0];\n    float n = float(nColors)-1.0;\n    for(int i = 1; i < nColors; i++)\n    {\n\t\tgradCol = mixc(gradCol,colors[i],(s-float(i-1)/n)*n);\n    }\n      \n    col += vec3(1.0-smoothstep(0.0,0.01,p.y-s*1.5));\n    col *= gradCol;\n\n    ref += vec3(1.0-smoothstep(0.0,-0.01,p.y+s*1.5));\n    ref*= gradCol*smoothstep(-0.5,0.5,p.y);\n    \n    col = mix(ref,col,smoothstep(-0.01,0.01,p.y));\n\n    col *= smoothstep(0.125,0.375,f);\n    col *= smoothstep(0.875,0.625,f);\n\n    col = clamp(col, 0.0, 1.0);\n\n    float dither = noise3D(vec3(p,time))*2.0/256.0;\n    col += dither;\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}