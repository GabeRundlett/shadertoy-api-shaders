{
    "Shader": {
        "info": {
            "date": "1694034555",
            "description": "signed distanced shapes",
            "flags": 0,
            "hasliked": 0,
            "id": "dtBfWW",
            "likes": 1,
            "name": "signed distanced shapes",
            "published": 3,
            "tags": [
                "sdshape"
            ],
            "usePreview": 0,
            "username": "parweb",
            "viewed": 102
        },
        "renderpass": [
            {
                "code": "// \"ShaderToy Tutorial - Ray Marching for Dummies!\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/PGtv-dBi2wE\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat Capsule(vec3 position, vec3 bottom, vec3 top, float radius) {\n    vec3 size = top - bottom;\n    vec3 dist = position - bottom;\n    \n    float cylinder = dot(size, dist) / dot(size, size);\n    cylinder = clamp(cylinder, 0., 1.);\n    \n    vec3 capsule = bottom + cylinder * size;\n    \n    return length(position - capsule) - radius;\n}\n\nfloat Torus(vec3 position, vec2 radius) {    \n    float base = length(position.xz) - radius.x;\n    return length(vec2(base, position.y))-radius.y;\n}\n\nfloat Box(vec3 position, vec3 size) {    \n    return length(max(abs(position) - size, 0.));\n}\n\nfloat Plane(vec3 position) {    \n    return position.y;\n}\n\nfloat Sphere(vec3 position, vec4 size) {\n    return length(position - size.xyz) - size.w;\n}\n\nfloat GetDist(vec3 position) {\n    float plane = Plane(position-vec3(0, -1, 0));\n    \n    float sphere = Sphere(position-vec3(4, .5, 3), vec4(0, 1, 6, 1));\n    float capsule = Capsule(position, vec3(2, 1, 6), vec3(0, 2, 6), sin(iTime)+1.);\n    float torus = Torus(position-vec3(0, .5, 6), vec2(2, .2));\n    float box = Box(position-vec3(-2, 1, 3), vec3(.2, 1, .2));\n    \n    float scene = plane;\n    \n    scene = min(scene, capsule);\n    scene = min(scene, torus);\n    scene = min(scene, sphere);\n    scene = min(scene, box);\n    \n    return scene;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 3, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1.5, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}