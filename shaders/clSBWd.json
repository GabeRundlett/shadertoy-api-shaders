{
    "Shader": {
        "info": {
            "date": "1694704048",
            "description": "Analytic solution of Hooke's law for spring system with 3 springs.\nSee springSystemModel() which takes state of the current spring and two neighbours and calculates advanced state. ",
            "flags": 32,
            "hasliked": 0,
            "id": "clSBWd",
            "likes": 15,
            "name": "2D Physics (analytic springs)",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "physics",
                "analytic",
                "spring",
                "law",
                "hookes"
            ],
            "usePreview": 0,
            "username": "TDM",
            "viewed": 458
        },
        "renderpass": [
            {
                "code": "/*\n * \"2D Physics (analytic springs)\" by Alexander Alekseev aka TDM - 2023\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * Contact: tdmaav@gmail.com\n */\n\nconst vec3 COLOR = vec3(72, 143, 240) / 255.;\n\nfloat line(vec2 p, vec2 p0, vec2 p1, float w) {\n    vec2 d = p1 - p0;\n    float t = clamp(dot(d,p-p0) / dot(d,d), 0.0,1.0);\n    vec2 proj = p0 + d * t;\n    float dist = length(p - proj);\n    return step(dist-w,0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 mouse = iMouse.xy / iResolution.xy * 2.0 - 1.0;\n    mouse.x *= iResolution.x / iResolution.y;\n    mouse.y = 0.0;\n    \n    vec3 c = vec3(1.0);\n        \n    // objects\n    for(int i = 0; i < NUM_OBJECTS-1; i++) {\n        vec2 body = getBody(iChannel0, i);\n        vec2 b1 = getBody(iChannel0, i+1);\n        vec2 pos_ss0 = toScreenspace(i,body.x);\n        vec2 pos_ss1 = toScreenspace(i+1,b1.x);\n        \n        float ba = line(uv,pos_ss0,pos_ss1,BALL_SIZE);\n        c = mix(c,COLOR,ba);\n        \n        vec2 mid = (pos_ss0 + pos_ss1) * 0.5;\n        ba = line(uv,\n            mid,\n            mid+vec2(0.0,-2.0),\n            BALL_SIZE);\n        c = mix(c,COLOR,ba * 0.2 - min(uv.y,0.0)*0.005);\n    }\n    \n    // final\n\tfragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n * \"2D Physics (analytic springs)\" by Alexander Alekseev aka TDM - 2023\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * Contact: tdmaav@gmail.com \n */\n \nconst int NUM_OBJECTS = 64;\nconst float OBJECTS_GAP = 0.5 * (8.0 / float(NUM_OBJECTS));\nconst float BALL_SIZE = OBJECTS_GAP / 2.0;\n\n/*\n * Dynamics\n */\n \nconst float k = 100.0;\nconst float damp = 0.45;\n\nvec2 springSystemModel(float t, vec2 b0, vec2 b1, vec2 b2) {\n    float rh = sqrt(3.*k);\n    float rp = sqrt(k);\n    \n    vec2 CH = vec2(b0.x - (b1.x+b2.x)/2., \n                  (b0.y - (b1.y+b2.y)/2.) / rh);\n    vec2 CP = vec2((b1.x+b2.x)/2.,\n                   (b1.y+b2.y)/(2.*rp));\n                   \n    vec2 exph = vec2(cos(rh*t), sin(rh*t));\n    vec2 expp = vec2(cos(rp*t), sin(rp*t));\n       \n    float x  = dot(CH, exph) + \n               dot(CP, expp);\n    float dx = dot(CH, rh*exph.yx*vec2(-1.0,1.0)) + \n               dot(CP, rp*expp.yx*vec2(-1.0,1.0));\n    \n    return vec2(x,dx) * exp(-t * damp); // new state\n}\n\n/*\n * body\n */\n\nvec2 getBody(sampler2D buf, int i) {\n    return texelFetch(buf, ivec2(i,0), 0).xy;\n}\n\nvoid initBody(int id, inout vec2 body) {\n    body = vec2(0.0);\n}\n\n/*\n * store\n */\n\nvoid storeBody(in int id, in vec2 b, inout vec4 col, in vec2 uv) {\n    col = vec4(b,0.0,0.0);\n}\n\n/**\n * coords\n */\n \nvec2 toScreenspace(int id, float y) {\n    float x = -float(NUM_OBJECTS-1) * 0.5 * OBJECTS_GAP + \n    float(id) * OBJECTS_GAP;\n    return vec2(x,y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/*\n * \"2D Physics (analytic springs)\" by Alexander Alekseev aka TDM - 2023\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * Contact: tdmaav@gmail.com \n */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    int id = int(fragCoord.x);\n    if(id >= NUM_OBJECTS) discard;\n    \n    // load    \n    vec2 body = getBody(iChannel0, id);\n    if(iFrame == 0) {\n        initBody(id, body); // init\n    } else {\n    \n        float dt = iTimeDelta;\n\n        // mouse\n        if(iMouse.z > 0.5) {\n            vec2 mouse = iMouse.xy / iResolution.xy * 2.0 - 1.0;\n            mouse.x *= iResolution.x / iResolution.y;\n            vec2 pos_ss = toScreenspace(id,body.x);\n            vec2 dir = pos_ss.xy - mouse;\n\n            float t = abs(dir.x);\n            body.y += -k * 0.5 * dt * smoothstep(0.2,0.0,t);\n        }\n\n        // spring\n        vec2 bl = getBody(iChannel0, id-1);\n        vec2 br = getBody(iChannel0, id+1);\n        body = springSystemModel(dt, body, bl, br);\n    }\n    \n    // store\n    storeBody(id, body, fragColor, fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n * \"2D Physics (analytic springs)\" by Alexander Alekseev aka TDM - 2023\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * Contact: tdmaav@gmail.com \n */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    int id = int(fragCoord.x);\n    if(id >= NUM_OBJECTS) discard;     \n    float dt = iTimeDelta;\n\n    // spring\n    vec2 body = getBody(iChannel0, id);\n    vec2 bl = getBody(iChannel0, id-1);\n    vec2 br = getBody(iChannel0, id+1);\n    body = springSystemModel(dt, body, bl, br);\n        \n    // store\n    storeBody(id, body, fragColor, fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}