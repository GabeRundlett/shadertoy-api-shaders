{
    "Shader": {
        "info": {
            "date": "1674937780",
            "description": "Make sure the music is playing :)",
            "flags": 64,
            "hasliked": 0,
            "id": "DtfXzB",
            "likes": 40,
            "name": "They Walk",
            "published": 3,
            "tags": [
                "audiovisual",
                "walk",
                "person",
                "dude"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 1449
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define rn 64.0\n\n//https://www.shadertoy.com/view/4tGXzt\nfloat getFreq(float x) {\n\treturn texture(iChannel0, vec2(floor(x * rn + 1.) / rn, 0)).x;\n}\n\nfloat getFreq_smooth(float x) {\n\tfloat index = floor(x * rn) / rn;\n    float next = floor(x * rn + 1.0) / rn;\n\treturn mix(getFreq(index), getFreq(next), smoothstep(0.0, 1.0, fract(x * rn)));\n}\n\nvec3 hsv2rgb(in vec3 c) {\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb);\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat seg(vec3 p, vec3 a, vec3 b) {\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h );\n}\n\nvec3 ori() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    float r = 5.5;\n    float a = 0.25 * iTime;\n    vec3 ro = vec3(r * cos(a), 2. + 0.5 * cos(iTime), r * sin(a));\n    ro = mix(ro, vec3(4, 2, 2.*cos(a)), .5+.5*thc(4.,0.125*iTime));\n   // float a = iTime;\n  //  ro.yz *= rot(-m.y*3.14+1.);\n  //  ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\n#define strideHeight 0.2 \n\n#define hipWidth 0.125\n#define hipHeight 0.82\n\n#define shoulderWidth 0.23\n\n#define neckHipLength 0.55\n#define hipKneeLength 0.4\n#define kneeFootLength 0.45\n\n// https://iquilezles.org/articles/simpleik/\nvec2 solve(vec2 p, float r1, float r2) {\n    float h = dot(p,p);\n    float w = h + r1*r1 - r2*r2;\n    float s = max(4.0*r1*r1*h - w*w,0.0);\n    return (w*p + vec2(-p.y,p.x)*sqrt(s)) * 0.5/h;\n}\n\nvec3 getKnee(vec3 hip, vec3 foot, vec3 toe, float rot) {\n    // Basis for plane, erot determines which plane we use\n    vec3 vy = normalize(hip - foot);\n    vec3 toeDir = foot - toe;\n    //toeDir = erot(toe, vy, rot); // uncomment if using rot\n    vec3 vx = normalize(toeDir - dot(toeDir, vy) / dot(vy, vy) * vy);\n    \n    // 2D positions in plane spanned by vx, vy\n    // (vFoot = vec2(0))\n    vec2 vHip = vec2(0, length(hip - foot));\n    vec2 vKnee = solve(vHip, kneeFootLength, hipKneeLength);\n    return foot + vKnee.x * vx + vKnee.y * vy;\n}\n\nfloat stride(float offset) {\n    float t = mod(iTime + offset, 2.);\n    float mt = min(t, 1.);\n    // 0.02 was boneRadius. hacky\n    return 0.02 + strideHeight * pow(4. * mt * (1.-mt), 2.);\n}\n\nvec2 map(vec3 p) { \n    float t = iTime;\n    float ct = cos(pi*t);\n    float st = sin(pi*t);\n    float c2t = cos(2.*pi*t);\n    float s2t = sin(2.*pi*t);\n\n    // Mix between cut space, regular space, reflected space\n    float mx  = .5 - .5 * ths(8., 0.08 * pi+ 0.25 * iTime);\n    float mx2 = .5 - .5 * ths(4., 0.08 * pi+ 0.5 * iTime);\n    \n    //float o = 2.*pi/3. + t;\n    //vec3 off = normalize(.5+.5*thc(4., 0.25 * p + vec3(-o,0,o)));\n    //p = erot(p, off, pi);\n    \n    // Plane offset (needs to be here!)\n    float y = 0.02 * dot(p.xz, p.xz); \n    \n    p.y = mix(p.y, abs(p.y) + 0.005, mx2);\n\n    // Cut p.xz into grid\n    float sc = mix(2.5, 4., 1.-mx2);\n    p.xz = mix(p.xz, mod(p.xz - 0.5 * sc, sc) - 0.5 * sc, mx);\n        \n    // \"Plane\" distance  \n    float zClamp = clamp(2.*p.z, -pi, pi);\n    float terrain = 1. - thc(4., zClamp);\n    terrain *= 0.5 + 0.5 * cos(p.z + t) * cos(p.x + t);\n    p.y += y;// mix(-0.25, 1., mx2) * y; //thc(3., 0. *x + 0.25 * pi * t) * y; //x=p.x\n    float pd = p.y;\n    pd += mix(0.5 * terrain, 0., mx);\n    \n    // -- positions --\n    vec3 hip = vec3(0, hipHeight - 0.04*s2t, 0);\n    vec3 hipL = hip - vec3(-0.05*ct, -0.025*st, hipWidth);\n    vec3 hipR = hip + vec3(-0.05*ct, -0.025*st, hipWidth);\n    vec3 footL = vec3( 0.3*ct, stride(0.), -0.2);\n    vec3 footR = vec3(-0.3*ct, stride(1.),  0.2);    \n    vec3 toeOffset = vec3(0.14, 0, 0);\n    vec3 toeL = footL - toeOffset;\n    vec3 toeR = footR - toeOffset;\n    vec3 kneeL = getKnee(hipL, footL, toeL, 0.);\n    vec3 kneeR = getKnee(hipR, footR, toeR, 0.);\n    \n    vec3 neck = hip + vec3(0.05*c2t, neckHipLength, 0.05*st);\n    vec3 head = neck + vec3(0.05*ct, 0.31, 0);\n    vec3 shoulderL = neck + vec3(-0.05*ct, -0.05*st, shoulderWidth);\n    vec3 shoulderR = neck - vec3(-0.05*ct, -0.05*st, shoulderWidth);\n    \n    float eaL = -pi/2.-0.4*pi*ct;\n    float eaR = -pi/2.+0.4*pi*ct;\n    vec3 elbowL = shoulderL + vec3(0.3*cos(eaL), 0.3*sin(eaL),  0.14);\n    vec3 elbowR = shoulderR + vec3(0.3*cos(eaR), 0.3*sin(eaR), -0.14);\n    eaL -= 0.4*pi*(.25+.5*st);\n    eaR -= 0.4*pi*(.25+.5*st);\n    vec3 handL = elbowL + vec3(0.3*cos(eaL), 0.3*sin(eaL),  0.09);\n    vec3 handR = elbowR + vec3(0.3*cos(eaR), 0.3*sin(eaR), -0.09);\n    \n    vec3 eyeL = head + vec3(-0.08, 0, -0.05);\n    vec3 eyeR = head + vec3(-0.08, 0, 0.05);\n    \n    // -- distances --  \n    float boneRadius = mix(0.04, 0.2, 1.-mx2);\n    \n    float headDist = length(p - head) - 0.1;\n    float headNeckDist = seg(p, head, neck) - boneRadius;\n    float neckHipDist = seg(p, neck, hip) - boneRadius;\n    float shoulderDist = seg(p, shoulderL, shoulderR) - boneRadius;  \n    vec2 shoulderElbowDist = vec2(seg(p,shoulderL,elbowL), seg(p,shoulderR,elbowR)) - boneRadius;\n    vec2 elbowHandDist = vec2(seg(p,elbowL,handL), seg(p,elbowR,handR)) - boneRadius;\n    vec2 handDist = vec2(length(p-handL), length(p-handR)) - boneRadius;\n    \n    float hipDist = seg(p, hipL, hipR) - 0.02;\n    vec2 hipKneeDist  = vec2(seg(p,hipL,kneeL),  seg(p,hipR,kneeR))  - boneRadius;\n    vec2 kneeFootDist = vec2(seg(p,kneeL,footL), seg(p,kneeR,footR)) - boneRadius;\n    vec2 footToeDist  = vec2(seg(p,footL,toeL),  seg(p,footR,toeR))  - boneRadius;\n\n    vec2 eyeDist = vec2(length(p-eyeL), length(p-eyeR)) - 0.025;\n\n    // -- min distance --\n    // smooth amount\n    float sa = mix(0.2, 0.4, mx2);\n    \n    // body distance\n    float bd = hipDist;\n    bd = smin(bd, smin(hipKneeDist.x, hipKneeDist.y, 0.5*sa),sa);\n    bd = smin(bd, min(kneeFootDist.x, kneeFootDist.y),sa);\n    bd = smin(bd, min(footToeDist.x, footToeDist.y),0.5*sa);\n \n    bd = smin(bd, neckHipDist,sa);\n    bd = smin(bd, headDist, sa);\n    \n    // arms dist\n    float ad = shoulderDist;\n    ad = smin(ad, min(shoulderElbowDist.x, shoulderElbowDist.y), 0.5*sa);\n    ad = smin(ad, min(elbowHandDist.x, elbowHandDist.y), 0.5*sa);\n    ad = smin(ad, min(handDist.x, handDist.y), 0.75*sa);\n    bd = smin(bd, ad, 0.25*sa);\n    \n    float ed = min(eyeDist.x, eyeDist.y);\n    \n    // -- return values --\n    if (ed < bd)\n        return vec2(ed, 0.25);\n    if (bd < pd)\n        return vec2(bd, 0.5);\n    \n    return vec2(pd, 1);\n}\n\nvec3 march(vec3 ro, vec3 rd, float z) {\t\n    float d = 0.;\n    float s = sign(z);\n    int steps = 0;\n    float mat = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * d;\n        vec2 m = map(p);\n        m.x *= 0.9 + 0.1 * hash(hash(p.x,p.z), p.y); // for glow\n        if (s != sign(m.x)) { z *= 0.5; s = sign(m.x); }\n        if (abs(m.x) < SURF_DIST || d > MAX_DIST) {\n            steps = i + 1;\n            mat = m.y;\n            break;\n        }\n        d += m.x * z; \n    }   \n    return vec3(min(d, MAX_DIST), steps, mat);\n}\n\nvec3 norm(vec3 p) {\n\tfloat d = map(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 dir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat AO(in vec3 p, in vec3 n) {\n\tfloat occ = 0.;\n    float sc = 1.;\n    for (float i = 0.; i < 5.; i++) {\n        float h = 0.015 + 0.015 * i;\n        float d = map(p+h*n).x;\n        occ += (h-d)*sc;\n        sc *= 0.95;\n    }\n    return clamp(1. - 3.*occ, 0., 1.);\n}\n\nfloat shadow(in vec3 ro, in vec3 rd) {\n    float res = 1.;\n    float t = SURF_DIST;\n    for (int i=0; i<24; i++)\n    {\n\t\tfloat h = map(ro + rd * t).x;\n        float s = clamp(32. * h / t, 0., 1.);\n        res = min(res, s);\n        t += clamp(h, 0.01, 0.2);\n        if(res<SURF_DIST || t>MAX_DIST ) break;\n    }\n    res = clamp(res, 0.0, 1.0);\n    return smoothstep(0., 1., res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = ori();\n    \n    float zoomMix = tanh(0.15 * iTime);\n    float zm = mix(5.6, 1.6, zoomMix);\n    float aimHeight = mix(1.5, 1.15, zoomMix);\n    vec3 rd = dir(uv, ro, vec3(0,aimHeight,0), zm);\n    vec3 col = vec3(0);\n   \n    // wish this was better but works okay!\n    float fr = getFreq_smooth(0.5);\n    vec3 myCol = hsv2rgb(vec3(2.*fr, 0.25 + 0.5 * fr, 1.));\n   \n    vec3 m = march(ro, rd, 1.);  \n    float d = m.x;    \n    vec3 p = ro + rd * d;\n    if (d<MAX_DIST) {        \n        vec3 n = norm(p);\n        vec3 r = reflect(rd, n);        \n\n        vec3 ld = normalize(vec3(1,2,3));\n        float dif  = dot(n,  ld)*.5+.5;\n        float spec = pow(dif, 16.);\n        float fres = pow(1. + dot(rd, n),  5.);\n     \n        col = vec3(dif);    \n        col = mix(col, vec3(1), fres);\n        //col *= exp(-0.75 * length(p.xz));\n        \n       \n        if (m.z == 1.) { \n            float xmot = 0.25 * pi * (iTime -.25*sin(2.*pi * iTime)/pi);\n            col *= 0.75 + 0.25 * abs(step(mod(2.*(p.x - xmot), 1.), 0.5) \n                                   - step(mod(2.*p.z,1.), 0.5));         \n        }\n        \n        //col += 0.3/cosh(length(p.xz));\n        if (m.z == 0.5) {\n            vec3 tx = texture(iChannel2, n).rgb;\n            n = abs(n);\n            vec3 c1 = texture(iChannel1, .5+.5*p.xy).rgb;\n            vec3 c2 = texture(iChannel1, .5+.5*p.yz).rgb;\n            vec3 c3 = texture(iChannel1, .5+.5*p.zx).rgb;\n            vec3 c = c1 * n.z + c2 * n.x + c3 * n.y;\n            \n            //col *= 4. * tx * c;\n            col *= c;\n            col *= vec3(.82+.18*thc(4.,36.*p.x-4.*iTime));\n        }\n        \n        float sh = shadow(p + 20. * SURF_DIST * n, ld);\n        col = mix(col, 0.9 * col * (.5+.5*myCol), 1.-sh);            \n    }\n    \n    col *= 1./cosh(0.5*length(p.xz));\n    \n    // this causes annoying black dots! idk why!!!! :?uiwerwoenrikwun\n    col = mix(col, myCol, 1.-exp(-0.01*m.y));\n    \n    // this looks cool too\n    /*\n    float k = 2. / iResolution.y;\n    float s = smoothstep(-k, k, -0.1 + abs(uv.y - 0.4*cos(0.5*uv.x+iTime)));\n    vec3 col2 = mix(col, vec3(1), 1.-exp(-0.1 * length(p.xz)));\n    col = mix(col, col2, 1.-s);\n    //*/\n    \n    col = tanh(1.4*col);\n    //col = pow(col, vec3(1./2.2));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32109,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/justinhawkes/neverafter?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Thanks to (everyone I've copied code + ideas from):\n// TheArtOfCode - raymarching\n//  BlackleMori - hash, erot\n//      Sizertz - AO, shadow\n//        NuSan - materials\n//        Tater - raymarching\n//         Leon - raymarching hash trick\n//           iq - pal, smin, most things!\n\n#define tau 6.2831853071\n#define pi 3.1415926535\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define pal(a,b) .5+.5*cos(2.*pi*(a+b))\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat h21(vec2 a) { return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123); }\nfloat mlength(vec2 uv) { return max(abs(uv.x), abs(uv.y)); }\nfloat mlength(vec3 uv) { return max(max(abs(uv.x), abs(uv.y)), abs(uv.z)); }\n\n// Maybe remove this\nfloat sfloor(float a, float b) { return floor(b-.5)+.5+.5*tanh(a*(fract(b-.5)-.5))/tanh(.5*a); }\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}