{
    "Shader": {
        "info": {
            "date": "1671282273",
            "description": "Simple particle simulation from four basic oscillations: wide swaying, flocking and swelling, mild swimming, and \"turbulence\".\nImage is a composite of the colored particles and their voronoi cells. It is then blurred by averaging and shifted.",
            "flags": 32,
            "hasliked": 0,
            "id": "Ds2SzG",
            "likes": 5,
            "name": "gay farts",
            "published": 3,
            "tags": [
                "voronoi",
                "blur",
                "particle"
            ],
            "usePreview": 0,
            "username": "nickbrick",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Lots of things to twiddle, have fun\nfloat hash( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uint(0x7fffffffU))/float(0x7fffffff);\n}\n\n//HSV (hue, saturation, value) to RGB.\n//Sources: https://gist.github.com/yiwenl/745bfea7f04c456e0101, https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\n#define saturate(v) clamp(v,0.,1.)\nvec3 hsv2rgb(vec3 c){\n\tvec4 K=vec4(1.,2./3.,1./3.,3.);\n\treturn c.z*mix(K.xxx,saturate(abs(fract(c.x+K.xyz)*6.-K.w)-K.x),c.y);\n}\n\n// https://math.stackexchange.com/a/2430837\n// https://graphtoy.com/?f1(x,t)=atan(%20cos(t)*sin(x)%20/%20(1.0-cos(t)*cos(x))%20)%20/%20cos(t)&v1=true&f2(x,t)=&v2=false&f3(x,t)=&v3=false&f4(x,t)=&v4=false&f5(x,t)=&v5=false&f6(x,t)=&v6=false&grid=1&coords=0,0,12\nfloat smoothSaw(float x){\n    #define STEEP 0.7\n    return (1.2 + atan(STEEP * sin(x) / (1.0 - STEEP * cos(x))) / STEEP) / 2.4;\n}\n\n#define N 333u\nvec2 simulateParticle(uint i){\n    #define FLOCKAMP 0.8 \n    #define FLOCKFREQ 0.5 \n    #define SWAYAMP 0.3\n    #define SWAYFREQ 0.1\n    #define FART 0.1\n    #define side(i) (mod(float(i), 2.0) * 2.0 - 1.0)\n    #define TAU 6.283185307\n    float sway = SWAYAMP * sin(iTime * SWAYFREQ) + (iResolution.x / iResolution.y) / 2.0;\n    float flockNorm =  smoothSaw(iTime * FLOCKFREQ);\n    // seeding\n    float n  = hash(i);\n    float n1 = hash(i + 1u);\n    vec2 p = vec2(float(i) / float(N), n * 0.5 + 0.5);\n    // farting\n    p += vec2(sin(mod(iTime, 360.0) * pow(flockNorm, 4.0) * FART + TAU * n),\n              cos(mod(iTime, 360.0) * pow(flockNorm, 4.0) * FART + TAU * n)) *\n              side(i) * flockNorm * 0.008;\n    // swimming\n    p += vec2(sin(iTime + TAU * n ),\n              cos(iTime + TAU * n1)) * 0.2;\n    // flocking\n    p *= vec2(side(i) * FLOCKAMP * flockNorm, 1.0);\n    // swaying\n    p += vec2(sway, -0.21);\n    return p;\n}\n\nvec2 getNearestParticle(vec2 uv){\n    float d = 1000.0;\n    uint id = 0u;\n    for (uint i = 0u; i < N; i++)\n        {\n            vec2 p = simulateParticle(i);\n            if (length(uv - p) < d){\n                d = min(d, length(uv - p));\n                id = i;\n            }\n        }\n    return vec2(d, float(id)); //(distance, id)\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    #define SIZE 0.002\n    #define FADE 0.975\n    #define CELL 0.004\n    #define GAY 0.69\n    #define BLUR 1\n    #define DRIFT ivec2(0 * int(iResolution.x) / 1000, 2 * int(iResolution.y) / 500)\n    #define getCol(offset) (texelFetch(iChannel0, ivec2(fragCoord)+offset+DRIFT, 0).rgb)\n\n    vec2 uv = fragCoord / min(iResolution.x, iResolution.y);\n    vec2 n = getNearestParticle(uv);\n    float d = n.x;\n    uint i = uint(n.y);\n    vec3 rgb0 = getCol(ivec2(0, 0));\n\n    if (BLUR > 0){\n        for (int x = -BLUR; x <= BLUR; x++)\n            for (int y = -BLUR; y <= BLUR; y++)\n            {\n                if (x == 0 && y == 0) continue;\n                rgb0 += getCol(ivec2(x, y));\n            }\n        rgb0 /= float((2 * BLUR + 1) * (2 * BLUR + 1) - 0);\n    }\n    \n    rgb0 *= FADE;\n    \n    float h = GAY * (sin(hash(i) + iTime + 6.28 * hash(i)) * 0.5 + 0.5);\n    vec3 rgb = hsv2rgb(vec3(h, GAY, 1.0));\n    rgb *= max(CELL, step(d, SIZE));\n    fragColor = vec4(rgb0 + rgb, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}