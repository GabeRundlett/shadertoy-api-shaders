{
    "Shader": {
        "info": {
            "date": "1719707837",
            "description": "like google material design or something",
            "flags": 34,
            "hasliked": 0,
            "id": "l3dSWX",
            "likes": 1,
            "name": "weird realtime shadows experimen",
            "published": 3,
            "tags": [
                "shadow"
            ],
            "usePreview": 0,
            "username": "andylovescode",
            "viewed": 221
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float light_height = texture(iChannel0,uv).x;\n    float texture_height = texture(iChannel1, uv).x;\n    \n    float light = 1.0 - (light_height - texture_height) * 0.5;\n    \n    //light = light_height;\n    //light = texture_height;\n    \n    vec3 surfaceColor = vec3(158. / 255., 169. / 255., 255. / 255.);\n    \n    surfaceColor += (1. - surfaceColor) * texture_height;\n        \n    surfaceColor = surfaceColor * light;\n    \n    fragColor = vec4(surfaceColor, 1.);\n    \n    //fragColor = vec4(light, light, light, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float light(vec2 fragCoord, float texture_height, vec2 dir, float slope) {\n    float rate = 1.;\n    float light_height = texture(iChannel0, (fragCoord - dir * rate) / iResolution.xy).x - slope * rate;\n\n    if (light_height > texture_height) {\n        texture_height = light_height;\n    }\n    \n    return texture_height;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float texture_height = texture(iChannel1, uv).x;\n    \n    texture_height = light(fragCoord, texture_height, vec2(1., -1.), 0.05);\n\n    // Mouse light\n    //texture_height = light(fragCoord, texture_height, normalize(fragCoord - iMouse.xy), 0.05);\n    \n    // Fake AO hack\n    float around_depth = 0.3;\n\n    texture_height = light(fragCoord, texture_height, vec2(-1., 0.), around_depth);\n    texture_height = light(fragCoord, texture_height, vec2(0., 1.), around_depth);\n    texture_height = light(fragCoord, texture_height, vec2(1., 0.), around_depth);\n    texture_height = light(fragCoord, texture_height, vec2(0., -1.), around_depth);\n        \n    fragColor = vec4(texture_height, 0., 0., 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float height = 0.;\n    \n    float time = iTime;\n    \n    vec2 coord = ((fragCoord) / 50.0) + time;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    height = round(uv.y * 2.) / 4.;\n    \n    if (sin(coord.x) * sin(coord.y) > 0.4) {\n        height = 1.;\n    }\n    \n    vec2 from_center = fragCoord - (iResolution.xy / 2.);\n    float dist = distance(from_center, vec2(0.));\n    \n    if (dist > 100. && dist < 200.) {\n        //height = 0.;\n    } else {\n        //height = 1.;\n    }\n    \n    if (texture(iChannel0, fragCoord / iResolution.xy).z > iMouse.y / iResolution.y) {\n        height = 1.;\n    } else {\n        height = 0.;\n    }\n    \n    fragColor = vec4(height,height,height,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}