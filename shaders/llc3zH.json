{
    "Shader": {
        "info": {
            "date": "1467897800",
            "description": "An illustrative example of the fixed point algorithm used, among other things, to find the zero of a function. Furthermore, the color point in the x-axis have the x value (such that f(x)=x) coded in his color. ",
            "flags": 0,
            "hasliked": 0,
            "id": "llc3zH",
            "likes": 6,
            "name": "Minimalist iteration",
            "published": 3,
            "tags": [
                "mathsfixedpointminimalistblackandwhiteiteration"
            ],
            "usePreview": 0,
            "username": "josemorval",
            "viewed": 832
        },
        "renderpass": [
            {
                "code": "#define WHITECOL vec4(1.0,1.0,1.0,1.0)\n#define WIDTH 0.01\n#define NUM_ITER 10\n\n//Draw line function\nfloat drawLine(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p-a;\n  \tvec2 ba = b-a;\n    float h = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    float d = length(pa-ba*h);\n    return  smoothstep(0.0,WIDTH,d-0.001);  \n}\n\n//Draw circle function\nfloat drawCircle(vec2 p, float radii){\n  return smoothstep(0.00,0.0005,p.x*p.x+p.y*p.y-radii*radii);\n}\n\n//[-res.x/res.y,res.x/res.y]x[-1,1] to [0,1]x[0,1] coordinates\nvec2 getOriginalCoord(vec2 p){\n    p.x*=iResolution.y/iResolution.x;\n    return (p+1.0)/2.0;\n}\n\n\n//Fixed point function\nfloat fun(float x){\n\treturn 0.6*sin(3.0*x); \n}\n\nvec4 mainColor(vec2 p){\n   \n  //Initial point\n  float x = 1.0*sin(0.3*iTime);\n  \n  float res = 1.0;\n  \n  //First evaluation x_{1} = f(x_0)\n  vec2 current = vec2(x,fun(x));\n  res=min(res,drawLine(p,vec2(x,0.0),current));\n  vec2 next;\n  \n  //Iteration prrocess x_{n+1} = f(x_n)\n  for(int i=0;i<NUM_ITER;i++){\n  \t\n  \tnext = vec2(current.y,current.y);  \n   \tres=min(res,drawLine(p,current,next));\n    current = next;\n    \n    //Main evaluation\n    next = vec2(current.x,fun(current.x));\n    \n    res = min(res,drawLine(p,current,next));\n    current = next;\n  }\n\n\n  res = min(res,smoothstep(0.0,2.0*WIDTH,abs(p.y-fun(p.x))));\n  res = min(res,smoothstep(0.0,0.5*WIDTH,abs(p.y-p.x)));\n  \n  //Circle with the fixed point coded in its color\n  //In case of non convergence, the color is still showed\n  //with the information of the last iteration point\n  float cir = 1.0-drawCircle(p-vec2(x,0.0),0.01);\n  vec4 colorCir = vec4(getOriginalCoord(current),0.0,1.0);\n  return mix(res*WHITECOL,cir*colorCir,cir);\n  \n}\t\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = -1.0+2.0*fragCoord.xy / iResolution.xy;\n\tp.x*=iResolution.x/iResolution.y;\n    fragColor = mainColor(p);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}