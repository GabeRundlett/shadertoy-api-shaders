{
    "Shader": {
        "info": {
            "date": "1622609765",
            "description": "Wanted to know what higher degree bezier curves look like. I find it hard to believe thats a polynomial.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tf3zl",
            "likes": 8,
            "name": "Decic Bezier Curve",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "plot",
                "dash",
                "parametric",
                "decic"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "// Hue to RGB function from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(hue) 0.6 + 0.6 * cos(6.3 * hue + vec3(0.0, 23.0, 21.0))\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nfloat anim(in float seed) {\n    float a = Hash11(seed * 193.84 + 673.48);\n    float b = Hash11(seed * 348.46 + 183.37);\n    float c = Hash11(seed * 275.35 + 741.69);\n    return 2.0 * sin(iTime * a + b) * c;\n}\n\nvec2 decicBezier(in vec2 a, in vec2 b, in vec2 c, in vec2 d, in vec2 e, in vec2 f, in vec2 g, in vec2 h, in vec2 i, in vec2 j, in vec2 k, in float t) {\n    float tInv = 1.0 - t;\n    return a * tInv * tInv * tInv * tInv * tInv * tInv * tInv * tInv * tInv * tInv +\n           10.0 * b * tInv * tInv * tInv * tInv * tInv * tInv * tInv * tInv * tInv * t +\n           45.0 * c * tInv * tInv * tInv * tInv * tInv * tInv * tInv * tInv * t * t +\n           120.0 * d * tInv * tInv * tInv * tInv * tInv * tInv * tInv * t * t * t +\n           210.0 * e * tInv * tInv * tInv * tInv * tInv * tInv * t * t * t * t +\n           252.0 * f * tInv * tInv * tInv * tInv * tInv * t * t * t * t * t +\n           210.0 * g * tInv * tInv * tInv * tInv * t * t * t * t * t * t +\n           120.0 * h * tInv * tInv * tInv * t * t * t * t * t * t * t +\n           45.0 * i * tInv * tInv * t * t * t * t * t * t * t * t +\n           10.0 * j * tInv * t * t * t * t * t * t * t * t * t +\n           k * t * t * t * t * t * t * t * t * t * t;\n\n    /*\n    vec2 a1 = mix( a,  b, t), a2 = mix( b,  c, t), a3 = mix( c,  d, t), a4 = mix( d,  e, t), a5 = mix( e,  f, t), a6 = mix( f,  g, t), a7 = mix( g,  h, t), a8 = mix( h,  i, t), a9 = mix( i,  j, t), a10 = mix( j,  k, t);\n    vec2 b1 = mix(a1, a2, t), b2 = mix(a2, a3, t), b3 = mix(a3, a4, t), b4 = mix(a4, a5, t), b5 = mix(a5, a6, t), b6 = mix(a6, a7, t), b7 = mix(a7, a8, t), b8 = mix(a8, a9, t), b9 = mix(a9, a10, t);\n    vec2 c1 = mix(b1, b2, t), c2 = mix(b2, b3, t), c3 = mix(b3, b4, t), c4 = mix(b4, b5, t), c5 = mix(b5, b6, t), c6 = mix(b6, b7, t), c7 = mix(b7, b8, t), c8 = mix(b8, b9, t);\n    vec2 d1 = mix(c1, c2, t), d2 = mix(c2, c3, t), d3 = mix(c3, c4, t), d4 = mix(c4, c5, t), d5 = mix(c5, c6, t), d6 = mix(c6, c7, t), d7 = mix(c7, c8, t);\n    vec2 e1 = mix(d1, d2, t), e2 = mix(d2, d3, t), e3 = mix(d3, d4, t), e4 = mix(d4, d5, t), e5 = mix(d5, d6, t), e6 = mix(d6, d7, t);\n    vec2 f1 = mix(e1, e2, t), f2 = mix(e2, e3, t), f3 = mix(e3, e4, t), f4 = mix(e4, e5, t), f5 = mix(e5, e6, t);\n    vec2 g1 = mix(f1, f2, t), g2 = mix(f2, f3, t), g3 = mix(f3, f4, t), g4 = mix(f4, f5, t);\n    vec2 h1 = mix(g1, g2, t), h2 = mix(g2, g3, t), h3 = mix(g3, g4, t);\n    vec2 i1 = mix(h1, h2, t), i2 = mix(h2, h3, t);\n    return mix(i1, i2, t);\n    */\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec2 a = vec2(anim( 1.0) * 3.0, anim( 2.0));\n    vec2 b = vec2(anim( 3.0) * 3.0, anim( 4.0));\n    vec2 c = vec2(anim( 5.0) * 3.0, anim( 6.0));\n    vec2 d = vec2(anim( 7.0) * 3.0, anim( 8.0));\n    vec2 e = vec2(anim( 9.0) * 3.0, anim(10.0));\n    vec2 f = vec2(anim(11.0) * 3.0, anim(12.0));\n    vec2 g = vec2(anim(13.0) * 3.0, anim(14.0));\n    vec2 h = vec2(anim(15.0) * 3.0, anim(16.0));\n    vec2 i = vec2(anim(17.0) * 3.0, anim(18.0));\n    vec2 j = vec2(anim(19.0) * 3.0, anim(20.0));\n    vec2 k = vec2(anim(21.0) * 3.0, anim(22.0));\n\n    bool dash = true;\n    vec2 prevPos = a;\n    for (float t=0.01; t < 1.01; t += 0.01) {\n        vec2 curPos = decicBezier(a, b, c, d, e, f, g, h, i, j, k, t);\n        if (dash) color = mix(color, hue2rgb(t + iTime), smoothstep(unit, 0.0, sdLine(uv, prevPos, curPos)));\n        prevPos = curPos;\n        dash = !dash;\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}