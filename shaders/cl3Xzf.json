{
    "Shader": {
        "info": {
            "date": "1685629705",
            "description": "dynamic background",
            "flags": 0,
            "hasliked": 0,
            "id": "cl3Xzf",
            "likes": 3,
            "name": "Bake S",
            "published": 3,
            "tags": [
                "raymarching",
                "background",
                "cineshader",
                "sdf3"
            ],
            "usePreview": 0,
            "username": "chenxianming",
            "viewed": 1654
        },
        "renderpass": [
            {
                "code": "// rotation\nmat2 n(float a) {\n  float b = sin(a), c = cos(a);\n  return mat2(c, b, -b, c);\n}\nconst mat2 L = mat2(-1.1, -.4, .3, 1);\n// fbm\nfloat M(in vec2 a) {\n  a *= L;\n  return cos(a.x + .18975) * sin(a.y + .494516) + .161525;\n}\n// material\nfloat o(in vec2 d, in float e) {\n  float f = 0.;\n  for (int a = 0; a < 7; a++) {\n    float b = pow(2., float(a));\n    d *= n(float(a));\n    float c = pow(b, -e);\n    c = smoothstep(0., .05, c), f += c * M(b * d * n(float(a)));\n  }\n  return f;\n}\n// repetition\nvec2 p(inout vec2 a, vec2 b) {\n  vec2 c = b * .5, d = floor((a + c) / b);\n  a.y -= mod(d.x, 2.) * .02, a = mod(a + c, b) - c;\n  return d;\n}\n// sphere ( ellipse attached )\nfloat r(vec3 b) {\n  b.y += 1.6;\n  float c = length(b) - 2.;\n  return c;\n}\n// ellipse\nfloat z(vec3 b) {\n  vec3 a = b;\n  vec2 c = p(a.xz, vec2(.04, .032));\n  a.y -= .6, a.y += distance(a.y, r(b)) - .014,\n      a.yz *=\n      n(iTime * .7 * atan(abs(c.x - iTime * 2.), abs(c.y - iTime * 2.)));\n  float d = length(vec3(a.x * .7, a.y * 2., a.z)) - .014;\n  return d;\n}\n// sdf\nfloat g(vec3 b) {\n  vec3 c = b;\n  float a = 5.;\n  a = min(a, r(c)), a = min(a, z(c));\n  return a;\n}\n// calcNormal (IQ)\nvec3 A(in vec3 b) {\n  vec2 a = vec2(1, -1) * .5773;\n  return normalize(a.xyy * g(b + a.xyy * 5e-4) + a.yyx * g(b + a.yyx * 5e-4) +\n                   a.yxy * g(b + a.yxy * 5e-4) + a.xxx * g(b + a.xxx * 5e-4));\n}\n\nfloat q(vec2 a, vec2 d) {\n  a.y /= iResolution.y / iResolution.x;\n  vec2 b = p(a, d);\n  float c = 0.;\n  c += smoothstep(.021, .02, length(a) - .02) * .05;\n  float e = mod(b.x, 2.) > 0. && mod(b.y, 2.) > 0. ? 0. : .015;\n  c = mix(c, 0., smoothstep(e, 0., length(a) - e));\n  return c;\n}\n\nvoid mainImage(out vec4 U, in vec2 V) {\n  // initial ro, rd global matrix (IQ)\n  vec2 a = V.xy / iResolution.xy, m = a;\n  a = (a - .5) * 2., a.x *= iResolution.x / iResolution.y;\n  vec3 e = vec3(0), C = vec3(0, 0, 0);\n  e = vec3(0, .6, -1);\n  vec3 f = normalize(C - e), l = normalize(cross(f, vec3(0, 1, 0))),\n       D = normalize(cross(l, f)), s = vec3(0),\n       c = normalize(a.x * l + a.y * D + 2.5 * f);\n  float h = 0.;\n  // smoothly\n  for (int E = 0; E < 32; ++E) {\n    vec3 F = e + c * h;\n    float N = g(F);\n    h += N * .666667;\n  }\n  vec3 i = vec3(0), j = normalize(vec3(0, .05, .3)), G = normalize(j - c),\n       t = normalize(vec3(-10.5, .05, -2.5)), H = normalize(t - c),\n       u = normalize(vec3(.7, .05, 2)), I = normalize(u - c);\n  t.yz *= n(-iTime * .1), j.xy *= n(iTime * .6), u.xy *= n(iTime * .5);\n  // integrated lights\n  if (h < 5.) {\n    vec3 d = e + h * c, b = A(d);\n    float J = o(vec2(o(b.xz * 15., cos(iTime))), .9),\n          k = clamp(dot(b, vec3(.4, 1, -.5)), 0., 1.),\n          v = pow(clamp(dot(b, G), 0., 1.), 150.);\n    v *= k;\n    float w = pow(clamp(dot(b, H), .2, 2.), 250.);\n    w *= k;\n    float x = pow(clamp(dot(b, I), .2, 2.), 80.);\n    x *= k;\n    float O = dot(b, vec3(0, 0, 0));\n    vec3 K = vec3(.7, .1, .09) * 3. + vec3(sin(atan(a.x, a.y)),\n                                           cos(atan(a.x, a.y)),\n                                           sin(atan(a.x, a.y))),\n         P = .7 + .3 * cos(iTime * .1 + a.yxy + vec3(6, 2, 4)),\n         Q = v * vec3(1, .91, .37), R = w * vec3(.19, 7e-3, .63),\n         S = x * vec3(1, .1, .2);\n    if (g(d) == r(d))\n      float W = q(b.xz + J, vec2(3e-3, 3e-3));\n    else if (g(d) == z(d)) {\n      float T = q(b.xy, vec2(.05, .07));\n      i = T * .05 + Q + R + S + K * O + vec3(5e-3) * K * k + P * vec3(.015),\n      i *= pow(k, 3.);\n    }\n  }\n  i = i * 2.5, i += .02 * cos(iTime * .5 + a.xyx + vec3(0, 2, 4)), s += i,\n  s *= mix( // after mask\n      1. - smoothstep(0., .1, length(vec2(m.x * .8, m.y) - vec2(.4, .5)) - .4),\n      1., step(m.y, .5)),\n  U = vec4(s, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}