{
    "Shader": {
        "info": {
            "date": "1627795485",
            "description": "Drivers were messed up leading to any raymarching to become a glitched mess, finally fixed it and verified by writing this with the new  working driver :)",
            "flags": 0,
            "hasliked": 0,
            "id": "7tSSWm",
            "likes": 5,
            "name": "Box Fractal",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "3d",
                "raymarch",
                "kifs"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "\n#define time (iTime+80.)\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\n//https://iquilezles.org/articles/distfunctions\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n  p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nvec4 map(vec3 p) {\n    float rtime = time*0.1;\n    for(int i=0;i<5;i++){\n    p = abs(p)-0.2;\n    p.xz *= r2d(rtime);\n    p.yz *= r2d(rtime);\n    }\n    float d = sdBoxFrame(p,vec3(1.),0.05);\n    p.xz *= r2d((3.14159/180.)*45.);\n    p.yz *= r2d((3.14159/180.)*45.);\n    d = min(d,sdBoxFrame(p,vec3(1.),0.05));\n    //float d = length(p)-0.5;\n    return vec4(p,d);\n}\n\nvec2 RM(vec3 ro, vec3 rd) {\n    float dO,ii;\n    for (int i=0;i<250;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p).w;\n        dO += dS;\n        ii += 0.13;\n        if (dO > 1000. || dS < 0.001) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1. + 2. * (fragCoord/iResolution.xy);\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv.x *= ar;\n    float rtime = time*0.1;\n    float size = sin(time*0.1)*0.5+0.5;\n    vec2 ouv = uv;\n    for (int i=0;i<30;i++) {\n        uv = abs(uv)-size*1.;\n        uv.xy *= r2d(rtime*0.4+2.1);\n    }\n    uv = mix(uv,ouv,sin(time*0.055)*0.5+0.5);\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0.,0.,-5.);\n    vec3 rd = normalize(vec3(uv,1.));\n    float rt = time*0.1;\n    ro.xy *= r2d(rt);\n    rd.xy *= r2d(rt);\n    ro.xz *= r2d(rt);\n    rd.xz *= r2d(rt);\n    vec2 d = RM(ro,rd);\n    col = vec3(d.x*0.05);\n    col.r += sin(col.r*100.)*0.2;\n    if (d.x > 999.) {\n        col = vec3(sin(d.y+3.4)*1.);\n    }\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}