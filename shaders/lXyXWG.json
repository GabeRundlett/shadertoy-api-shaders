{
    "Shader": {
        "info": {
            "date": "1722894478",
            "description": "your ripples make ripples",
            "flags": 0,
            "hasliked": 0,
            "id": "lXyXWG",
            "likes": 2,
            "name": "spiral ripples",
            "published": 3,
            "tags": [
                "2d",
                "spiral",
                "interference"
            ],
            "usePreview": 0,
            "username": "spac",
            "viewed": 80
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318530717958647693\n#define E   2.71828182845904523536\n#define X   vec3(1.0,0.0,0.0)\n#define Y   vec3(0.0,1.0,0.0)\n#define Z   vec3(0.0,0.0,1.0)\n\n\nvec3 rgb(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 iexp(float theta) {\n    return vec2(cos(theta), sin(theta));\n}\n\nfloat sin2(float x) {\n    float y = sin(x);\n    return y*y;\n}\nfloat cos2(float x) {\n    float y = cos(x);\n    return y*y;\n}\n#define dot2(x) dot((x), (x))\nfloat sig(float t) {\n    float y0 = 1.0 - exp(-t*t);\n    float y1 = exp(-(1.0-t)*(1.0-t));\n    return mix(y0, y1, t);\n}\nfloat ss(float t) {\n    return 3.0*t*t - 2.0*t*t*t;\n}\n\nfloat sd_rings(vec2 p, vec2 c, float r, float t, out float alpha) {\n    vec2 d = p-c;\n    float l = (r+length(d)) / r;\n    float theta = fract(atan(d.y, d.x)/(TAU) + 0.5 + 1.5*t);\n    float skew  = 1.0 + 3.5*ss(abs(theta));\n    //float skew = 1.0;\n    //theta =  theta*(1.0-theta);\n    //return 2.0*(fract(d-t)-0.5);\n    float f = sin((sqrt(l*skew)-t)*TAU);\n    //return sign(f) * f*f;\n    alpha = 1.0;\n    alpha *= 1.0-exp(-dot2(c-p)/0.1);\n    alpha *= ss(1.0 - abs(1.0-2.0*theta));\n    return f;\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.0 - vec2(1.0);\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(uv.xyx+vec3(0,2,4));\n    col = vec3(0.5);\n\n    // Output to screen\n    \n    float t = 0.0025* (4.0*iTime -sin(iTime) );\n    float s = 0.0;\n    float density = 0.0;\n    #define N_POINTS 6.0\n    for (float i = 0.0; i < N_POINTS; i += 1.0) {\n        float d = i/(N_POINTS);\n        float r = (fract(1.0*t+d));\n        vec2 c = 1.25*r*iexp(2.5*(sqrt(r)-d)*TAU) + 0.75*vec2(sin(1.88*d*TAU), 0.0);\n        c *= exp(r);\n        float alpha;\n        float sd = sd_rings(uv, c, 0.5+0.5*(1.0-r), 2.0*(t+d+0.5*r), alpha);\n        alpha *= 4.0*(1.0-r)*r;\n        s += alpha*sd;\n        density += alpha;\n    }\n    s /= density;\n    s *= s;\n    float h = 0.25*(s + density);\n    vec3 tangent   = (vec3(1.0, 0.0, iResolution.y*dFdx(h)));\n    vec3 cotangent = (vec3(0.0, 1.0, iResolution.y*dFdy(h)));\n    vec3 normal    = normalize(cross(tangent, cotangent));\n\n    \n    vec3 l = normalize(vec3(2.5*iexp(0.25*t+iMouse.x/iResolution.x*TAU), 0.5+3.0*iMouse.y/iResolution.y) - vec3(uv, h));\n    float diffuse = max(0.0, dot(normal, l));\n    float ambient = (1.0-s);\n    float specular = pow( max( 0.0, dot(normal, normalize(Z + l)) ), 16.0);\n\n    fragColor.z = 1.0;\n    vec3 blend = vec3(0.1, 0.25, 1.0);\n    blend /= dot(blend, vec3(1.0));\n    fragColor.xyz = blend.x*vec3(0.345,0.365,0.996)*ambient + blend.y*diffuse + blend.z*specular;\n    //fragColor = s * vec4(col,1.0) + 0.0*spec*vec4(col.zxy*col.zxy, 1.0);\n\n    // fragColor.xyz = mix(fragColor.xyz, 0.5-0.5*normal, 0.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}