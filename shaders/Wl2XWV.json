{
    "Shader": {
        "info": {
            "date": "1570169489",
            "description": "3C: Cotton Candy Clouds\nModified from IQ's clouds: https://www.shadertoy.com/view/XslGRr*/",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl2XWV",
            "likes": 32,
            "name": "3C",
            "published": 3,
            "tags": [
                "3d",
                "clouds"
            ],
            "usePreview": 0,
            "username": "zxxuan1001",
            "viewed": 1131
        },
        "renderpass": [
            {
                "code": "#define PI 3.1416\n#define MAX_STEP 80\n#define EPSILON 0.01\n#define SUN_DIR vec3(-1.0,0.0,-2.0)\n#define SUN_COLOR vec3(0.7,0.4,0.3)\n#define SUN_GLOW vec3(0.7,0.5,0.5)\n#define SKY_COLOR vec3(0.7,0.8,0.9)\n#define CLOUD_SHADOW vec3(0.5,0.2,0.2)\n#define CLOUD_COLOR vec3(1.0)\n\nfloat hash1(in vec2 uv) {\n    return 2.0*texture(iChannel0, uv/64.0).r - 1.0;\n}\n\nfloat smoothNoise(in vec3 p) {\n    vec2 luv = fract(p.xz); //range from 0.0 to 1.0\n    vec2 id = floor(p.xz); //the integer part of uv, 0, 1, 2\n    luv = luv*luv*(3.0 - 2.0*luv); //similar to smoothstep\n    \n    //get values from the cordinates of a square\n    float bl = hash1(id);\n    float br = hash1(id + vec2(1.0, 0.0));\n    float tl = hash1(id + vec2(0.0, 1.0));\n    float tr = hash1(id + vec2(1.0, 1.0));\n    \n    float b = mix(bl, br, luv.x); //interpolate between bl and br\n    float t = mix(tl, tr, luv.x); //interpolate between tl and tr\n    \n    return mix(b, t, luv.y);\n}\n\nvec3 rotZ(in float rad, in vec3 pos)\n{\n    mat2 rot = mat2(cos(rad), -sin(rad), sin(rad), cos(rad));\n    pos.xy = rot*pos.xy;\n    return pos;\n}\n\nvec3 path(in vec3 pos)\n{\n    float a = sin(iTime*0.2)*0.12*PI;\n    pos = rotZ(a, pos);\n    return pos;\n}\n\nmat3 getCamera( in vec3 ta, in vec3 ro )\n{\n    vec3 ww = normalize(ta-ro);\n    vec3 up = vec3(0.0,1.0,0.0);\n    up = path(up);\n    vec3 uu = normalize(cross(ww, up));\n    vec3 vv = normalize(cross(uu,ww));\n    return mat3(uu,vv,ww);\n}\n\nmat2 m2 = mat2(0.8, 0.6, -0.6, 0.8);\nfloat map4(in vec3 p)\n{\n    float scale = 0.8;\n    p *= scale;\n    vec3 q = p - vec3(0.0,0.1,1.0)*iTime;\n    float f = 0.0;\n    float amp = 0.5;\n    for (int i = 0; i < 4; i++)\n    {\n        f += amp*smoothNoise( q );\n        q.xz = m2*q.xz;\n        q *= 2.02;\n        amp *= 0.5;\n    }\n    return 2.2 * f;\n}\n\nfloat cloudIntersect(in vec3 p) {\n    float f = map4(p);\n    return f - p.y;\n}\n\nvec4 raymarch( in vec3 ro, in vec3 rd, in vec3 bgcol )\n{\n\tvec4 sum = vec4(0.0);\n\tfloat t = 0.0;\n    \n    /*from iq's clouds: https://www.shadertoy.com/view/XslGRr*/\n    for(int i=0; i<MAX_STEP; i++) \n    { \n        vec3  pos = ro + t*rd; \n        float den = cloudIntersect( pos ); \n        \n        //early quit for better performance, some treaks on pos.y range\n        if ( pos.y < -2.0 || pos.y > 3.5 || sum.a > 0.99) break; \n        \n        if (den > EPSILON)\n        {\n            //base color\n            vec4 col = vec4( mix( CLOUD_COLOR, CLOUD_SHADOW, den ), den );\n            \n            //brighter towards the sun\n            float dif =  clamp((den - cloudIntersect(pos+0.5*normalize(SUN_DIR))), 0.0, 1.0 ); \n            vec3 lin = SUN_COLOR*dif;   \n            col.xyz += lin;\n            \n            //mix with background according to distance\n            col.xyz = mix( bgcol, col.xyz, exp(-0.01*t*t) );\n            \n            // front to back blending    \n            col.a *= 0.5;\n            col.rgb *= col.a;\n            sum += col*(1.0-sum.a); \n        }\n        t += max(0.08,0.03*t); \n    } \n    return sum;\n}\n\nvec3 render( in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord.xy)/ iResolution.y;\n    \n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    //vec3 ro = vec3(2.0*sin(mouse.x*6.28),mouse.y+0.1,2.0*cos(mouse.x*6.28));\n    //vec3 ta = vec3(0.0,0.2,0.0);\n    \n    vec3 ro = vec3(0.0, 0.4, 0.0);\n    vec3 ta = ro + vec3(0.0, -0.1, -1.0);\n    \n    mat3 cam = getCamera(ta,ro);\n    vec3 rd = normalize(cam*(vec3(uv,1.0)));\n    \n    vec3 sunDir = normalize(SUN_DIR);\n    float sun = max(dot(sunDir, rd),0.0);\n    vec3 skyCol = vec3(0.0);\n    \n    skyCol += mix(SUN_GLOW, SKY_COLOR, 2.0*abs(rd.y));//horizontal brightness\n    skyCol += 0.3*SUN_COLOR*pow(sun, 64.0);\n    skyCol += 0.5*SUN_GLOW*pow(sun, 16.0);\n    \n    vec4 cloudCol = raymarch(ro, rd, skyCol);\n    col = skyCol*(1.0-cloudCol.a) + cloudCol.xyz; \n    \n    col += 0.3*SUN_GLOW*pow(sun, 8.0); //adding extra sun glow\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = render(fragCoord);\n    col = pow( col, vec3(1.0/2.2));\n    // vignetting        \n    vec2 q = fragCoord/iResolution.xy;\n    col *= 0.5 + 0.5*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.65);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}