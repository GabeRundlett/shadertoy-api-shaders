{
    "Shader": {
        "info": {
            "date": "1714405339",
            "description": "This is based off of branchless raymarching example. Then I use phong-based lighiting with normals stored per voxel. It gives a nice look. However, I still want to add more lighting techniques like shadows reflections, AO, ect. ",
            "flags": 32,
            "hasliked": 0,
            "id": "lfdXRl",
            "likes": 6,
            "name": "Per-Voxel Lighting",
            "published": 3,
            "tags": [
                "phong",
                "lighting",
                "voxel",
                "pervoxel"
            ],
            "usePreview": 0,
            "username": "capslpop",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 0.8);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * iResolution.y / iResolution.x;\n\tvec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n    //2.0 * sin(iTime * 2.7)\n\tvec3 rayPos = vec3(0.0, 0.0, -28.0*2.0);\n\t\t\n\trayPos.xz = rotate2d(rayPos.xz, (iMouse.x/iResolution.x)*14.0);\n\trayDir.xz = rotate2d(rayDir.xz, (iMouse.x/iResolution.x)*14.0);\n\t\n    rayPos += vec3(volumeSize)/2.0;\n    \n\tivec3 mapPos = ivec3(floor(rayPos + 0.));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\n\tvec4 color;\n\n    voxel vox;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) \n    {\n        vox = getVoxel(iChannel0, ivec3(mapPos), ivec2(iChannelResolution[0].xy));\n        \n        // todo: make it so when the ray leaves the volume it breaks the loop\n        if (all(lessThan(mapPos, volumeSize)) && all(greaterThan(mapPos, ivec3(0.0))))\n        {\n            if (vox.color.a > 0.1)\n            {\n                //fragColor = vec4(vox.normal/2.0 + 0.5, 1.0); // vox.color;\n                fragColor = vox.color * vox.light * 3.5 + color;\n                return;\n            } else\n            {\n                color.rgb += vox.light.rgb * 0.003;\n            }\n        }\n\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\t\n\t\t\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\t}\n\t\n\n\tfragColor.rgb = color.rgb + texture( iChannel1, rayDir ).rgb;\n\t//fragColor.rgb = vec3(0.1 * noiseDeriv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int MAX_RAY_STEPS = 128*2*4;\n\n// size of the volume -- cant be bigger than the max about of pixels in the buffer\n// I set it manually for simplicity\nconst ivec3 volumeSize = ivec3(64);\n\n// from Unorm Vec4 Packing \nuint packUnorm4x8(in vec4 unpacked)\n{\n    uvec4 utex = uvec4(unpacked * 255.0);\n    return ((utex.x << 24) | (utex.y << 16) | (utex.z << 8) | (utex.w));\n}\n// from whkrmrgks0 the other function was not working on other devices\nvec4 unpackUnorm4x8(uint cram){\n    uvec4 haz = uvec4(cram);\n    const uvec4 shift = uvec4(24,16,8,0);\n    haz = haz>>shift&0xFFu;\n    return vec4(haz)/255.;\n}\n\nstruct voxel\n{\n    // color of the voxel\n    vec4 color;\n    \n    // light color\n    vec4 light;\n    \n    // normal vector\n    vec3 normal;\n    \n    // the type of matterial it is\n    int matterial;\n};\n\n// first two positions are xy on buffer then which face of the cube map is z\nvec4 getPos(sampler2D buffer, ivec3 pos, ivec2 res)\n{\n    int c = pos.x + volumeSize.y * pos.y + volumeSize.z * volumeSize.y * pos.z;\n    \n    ivec2 d = ivec2(c%int(res.x), c/int(res.x));\n    \n    return texelFetch(buffer, d, 0);\n    }\n\n// this intakes the fragment position and outputs the correct voxel coord\nvec3 getPos(vec2 fragCoord, ivec2 res)\n{\n    int c = int(fragCoord.x) + int(fragCoord.y) * res.x;\n    \n    vec3 pos = vec3(c%volumeSize.x, (c/volumeSize.x)%volumeSize.y, c/(volumeSize.x*volumeSize.y));\n\n    return pos;\n}\n\nvoxel getVoxel(sampler2D buffer, ivec3 pos, ivec2 res)\n{\n    vec4 info = getPos(buffer, pos, res);\n\n    voxel v;\n    v.color = unpackUnorm4x8(floatBitsToUint(info.r));\n    v.light = unpackUnorm4x8(floatBitsToUint(info.g));\n    vec4 t = unpackUnorm4x8(floatBitsToUint(info.b));\n    v.normal = 2.0*t.rgb - 1.0;\n    v.matterial = int(t.a * 255.0);\n    \n    return v;\n}\n\nvec4 saveVoxel(voxel v)\n{\n    vec4 info;\n    info.r = uintBitsToFloat(packUnorm4x8(v.color));\n    info.g = uintBitsToFloat(packUnorm4x8(v.light));\n    info.b = uintBitsToFloat(packUnorm4x8(vec4((v.normal+1.0)/2.0, float(v.matterial)*255.0)));\n    \n    return info;\n}\n\nvec2 rotate2d(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\nstruct mattirial\n{\n    float shinniness;\n};\n\nmattirial matir[5] = mattirial[]\n(\nmattirial(32.0), // 0 nutral mattirial highly difused \nmattirial(32.0), // 1 very smooth object\nmattirial(32.0), // 2 mirror\nmattirial(32.0), // \nmattirial(32.0)\n);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// dave\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat sunRay(vec3 rayPos, vec3 rayDir)\n{\n    ivec3 mapPos = ivec3(floor(rayPos));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\n\tvec3 color;\n\n    voxel vox;\n    \n    // step out of yourself\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    \n    //mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    //sideDist += vec3(mask) * deltaDist;\n    //mapPos += ivec3(vec3(mask)) * rayStep;\n    //mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    //sideDist += vec3(mask) * deltaDist;\n    //mapPos += ivec3(vec3(mask)) * rayStep;\n    //mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    //sideDist += vec3(mask) * deltaDist;\n    //mapPos += ivec3(vec3(mask)) * rayStep;\n    \n    float opacity = 0.0;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) \n    {\n        vox = getVoxel(iChannel0, ivec3(mapPos), ivec2(iChannelResolution[0].xy));\n        if (any(greaterThanEqual(mapPos, volumeSize)) || any(lessThanEqual(mapPos, ivec3(0.0))))\n        {\n            return opacity;\n        }\n        if (vox.color.a > 0.1)\n        {\n            opacity += 0.05;\n            if (opacity > 0.1)\n            {\n                return opacity;\n            }\n        }\n\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\t\n\t\t\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\t}\n    \n    return opacity;\n}\n\n\nvec3 rayCast(vec3 rayPos, vec3 rayDir)\n{\n    ivec3 mapPos = ivec3(floor(rayPos));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\n\tvec3 color;\n\n    voxel vox;\n    \n    // step out of yourself\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) \n    {\n        vox = getVoxel(iChannel0, ivec3(mapPos), ivec2(iChannelResolution[0].xy));\n        if (any(greaterThanEqual(mapPos, volumeSize)) || any(lessThanEqual(mapPos, ivec3(0.0))))\n        {\n            break;\n        }\n        if (vox.color.a > 0.1)\n        {\n            return clamp(vec3(vox.color.rgb * vox.light.rgb * 2.0) + color, 0.0, 1.0);\n        } else\n        {\n            // volumetric lighting \n            //color.rgb += vox.light.rgb * 0.003;\n        }\n\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\t\n\t\t\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\t}\n    \n    return clamp(texture( iChannel1, rayDir).rgb + color, 0.0, 1.0);\n}\n\n\nvec3 calculatePhong(vec3 normal, vec3 lightDir, vec3 viewDir, vec3 ambientColor, vec3 diffuseColor, vec3 specularColor, float shininess) {\n    // Normalize vectors\n    vec3 N = normalize(normal);\n    vec3 L = normalize(lightDir);\n    vec3 V = normalize(viewDir);\n\n    // Calculate reflection vector\n    vec3 R = reflect(-L, N);\n\n    // Ambient component\n    vec3 ambient = ambientColor;\n\n    // Diffuse component\n    float diffuseIntensity = max(dot(N, L), 0.0);\n    vec3 diffuse = diffuseIntensity * diffuseColor;\n\n    // Specular component\n    float specularIntensity = pow(max(dot(R, V), 0.0), shininess);\n    vec3 specular = specularIntensity * specularColor;\n\n    return ambient + diffuse + specular;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 cameraDir = vec3(0.0, 0.0, 0.8);\n\tvec3 rayDir = cameraDir;\n\trayDir.xz = rotate2d(rayDir.xz, (iMouse.x/iResolution.x)*14.0);\n    \n    //2.0 * sin(iTime * 2.7)\n    vec3 rayPos = vec3(0.0, 0.0, -28.0*2.0);\n    rayPos.xz = rotate2d(rayPos.xz, (iMouse.x/iResolution.x)*14.0);\n    rayPos += vec3(volumeSize)/2.0;\n\n    vec3 pos = getPos(fragCoord, ivec2(iResolution.xy));\n\n    \n    //temp\n    rayDir = normalize(pos - rayPos);\n    \n    voxel v;\n   \n    \n    \n    // init the set up of the scene\n    if (iTime < 0.1)\n    {\n        if (pos.y > float(volumeSize.y) - 6.0)\n        {\n            if (mod(pos.x, 8.0) == 0.0)\n            {\n                v.color = vec4(0.875,0.682,0.345,1.0);\n            \n                v.normal = normalize(vec3(0.0, -1.0, 0.0) + hash32(fragCoord) - 0.5); // ; // add some roughfness to the surface\n                v.matterial = 1;\n            \n                v.color.rgb -=  hash12(fragCoord)*0.02;\n            }\n        }\n    \n        if (pos.y < 4.0)\n        {\n            v.color = vec4(0.247,0.129,0.129,1.0);\n            \n            v.normal = normalize(vec3(0.0, 1.0, 0.0) + hash32(fragCoord) - 0.5); // ; // add some roughfness to the surface\n            v.matterial = 1;\n            \n            v.color.rgb -=  hash12(fragCoord)*0.02;\n        }\n        \n        if (distance(pos, vec3(volumeSize/2) - vec3(0.0, 10.0, 0.0)) < 10.0)\n        {\n            v.color = vec4(0.396,0.498,0.702, 1.0);\n            \n            //v.light = vec4(1.0);\n            v.normal = normalize(pos - vec3(volumeSize/2) ); // + 2.0*hash32(fragCoord) - 1.0 add some roughfness to the surface\n            v.matterial = 0;\n            \n            v.color.rgb -=  hash12(fragCoord)*0.02;\n\n        }\n\n\n        if (pos.z >= float(volumeSize.z) - 3.0)\n        {\n            v.color = vec4(0.5, 0.5, 0.5, 1.0);\n            v.normal = vec3(0.0, 0.0, -1.0); // + (hash32(fragCoord) - 0.5)*0.01;\n            v.matterial = 4;\n        }\n        \n        if (pos.z <= 3.0)\n        {\n            v.color = vec4(0.5, 0.5, 0.5, 0.0);\n            v.normal = vec3(0.0, 0.0, 1.0); // + (hash32(fragCoord) - 0.5)*0.01;\n            v.matterial = 4;\n        }\n        \n        \n        fragColor = saveVoxel(v);\n        return;\n    }\n    \n    v = getVoxel(iChannel0, ivec3(pos), ivec2(iResolution.xy));\n    \n    if (pos.x <= 3.0)\n    {\n        v.color = vec4(0.925,0.871,0.675,1.0); //texture(iChannel2, pos.zy/vec2(volumeSize.zy)) * 0.5;\n        v.normal = vec3(0.0, 1.0, 0.0);\n        v.matterial = 0;\n        //fragColor = saveVoxel(v);\n        //return;\n    }\n    \n    \n    vec3 sunDirection = normalize(vec3(0.5, 0.5, 0.5)); // Example direction to the sun\n    sunDirection.xy = rotate2d(sunDirection.xy,iMouse.y*0.03);\n    \n    vec3 ambientColor = vec3(0.5); // Example ambient light color\n    vec3 diffuseColor = vec3(0.05); // Example diffuse light color\n    vec3 specularColor = vec3(0.1); // Example specular light color\n    float shininess = 35.0; // Example shininess factor\n    \n    if (v.color.a > 0.1)\n    {\n        v.light.rgb = calculatePhong(v.normal, sunDirection, -rayDir, ambientColor, diffuseColor, specularColor, matir[v.matterial].shinniness);\n        v.light.rgb -= sunRay(pos, sunDirection);\n    } else\n    {\n        float inSun = sunRay(pos, sunDirection);\n        if (inSun <= 0.1)\n        {\n            v.light = vec4(1.0, 1.0, 1.0, 0.01);\n        } else\n        {\n            v.light.rgb = vec3(0.0);\n        }\n    }\n    \n    v.light.rgb -= sunRay(pos, sunDirection);\n    \n    if (v.matterial == 4)\n    {\n        // then it is a mirror\n        \n        // temp fix\n        if (pos.z < 5.0)\n        {\n            pos.z += 1.0;\n        }\n        \n        // super sample the mirror - idea by ig-rd5923\n        v.light.rgb =  \n            rayCast(pos, reflect(normalize(pos + vec3(0.0, 0.0, 0.0) - rayPos), v.normal))/4.0 + \n            rayCast(pos, reflect(normalize(pos + vec3(0.5, 0.0, 0.0) - rayPos), v.normal))/4.0 + \n            rayCast(pos, reflect(normalize(pos + vec3(0.0, 0.5, 0.0) - rayPos), v.normal))/4.0 + \n            rayCast(pos, reflect(normalize(pos + vec3(0.5, 0.5, 0.0) - rayPos), v.normal))/4.0;\n    }\n    \n    fragColor = saveVoxel(v);\n    return; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}