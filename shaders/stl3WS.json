{
    "Shader": {
        "info": {
            "date": "1622763949",
            "description": "Very bored today, spent too long on this. Its super messy but I wanna get better at it! Maybe I'll check out midi next? ",
            "flags": 8,
            "hasliked": 0,
            "id": "stl3WS",
            "likes": 19,
            "name": "A lil tune (GPU music)",
            "published": 3,
            "tags": [
                "2d",
                "sound",
                "gpusound"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 474
        },
        "renderpass": [
            {
                "code": "\n// Cole Peterson\n\n\n// I really want to get better at audio programming because its rly fun!\n// This code is rllyy messyy\n \n// Also, changing the bpm will break everything.\n\n#define scl 27.\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv2 = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec2 uv = u / R;\n    \n    if(cos(iTime*.8) > 0.9){\n        uv.x -= 0.5;\n        uv.x = -abs(uv.x);\n    }\n    \n    if(-cos(iTime*.5) > 0.){\n        uv -= .5;\n        uv *= (1. + cos(cBeat(iTime*4.))*.6);\n        uv += .5;\n    }\n    \n    if(-sin(iTime*.6) > 0.3){\n        uv -= .5;\n        uv *= rot(cos(cBeat(iTime*2.))*.4);\n        uv += .5;\n    }\n    \n    vec2 id = floor(uv * scl);\n    \n    if(-sin(iTime*.7) > 0.7){\n        uv.x += iTime*0.2 * sign(mod(id.y, 2.) - 1.);\n    }\n    \n    id = floor(uv * scl);\n    vec2 id2 = floor(uv * scl*4.);\n    vec2 ruv = fract(uv * scl);\n    \n    vec3 col = vec3(0.0);\n    \n    float tt = 33.*(id.x*14. + id.y*22.);\n    \n    col += .4 + .4*cos(vec3(.8, .2, 1.2)*tt);\n    \n    vec2 rnd = hash22(id*333. + cBeat(iTime*2.));\n    \n    vec2 rnd2 = hash22(id2*633. + cQuarter(iTime));\n    \n    if(iTime < 1.8)\n        rnd.x = 0.;\n    \n    if(rnd2.x < .3){\n        col += 0.2;\n    }\n    \n    if(rnd.x < .7){\n        col *= 0.;\n    }\n    \n    col += .3*max(1. - iTime*.7, 0.);\n    \n    col = mix(col, vec3(.25), step(.83, abs(uv2.x)));\n    col = mix(col, vec3(.2), step(.46, abs(uv2.y)));\n    \n    f = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n\n\n\n// Constants\nconst float pi = 3.1415;\nconst float BPM = 60.0;\n\nconst float bd = BPM / 60.;\nconst float qd = bd / 4.;\n\n\n\n\n\n// Timing\nfloat beat(float t){\n    return mod(t, 60. / BPM);\n}\n\nfloat beat_id(float t){\n    return mod(floor(BPM*t / 60.), 4.);\n}\n\nfloat cBeat(float t){\n   return floor(BPM*t / 60.);\n}\n\n\nfloat quarter(float t){\n    return mod(BPM*t / 60., .25);\n}\n\nfloat quarter_id(float t){\n    return mod(floor(4. * BPM*t / 60.), 4.);\n}\n\nfloat cQuarter(float t){\n   return floor(4.*BPM*t / 60.);\n}\n\nfloat bar(float t){\n    return mod(t, 2. * (60. / BPM));\n}\n\nfloat cBar(float t){\n    return floor(8.*BPM*t / 60.);\n}\n\n\n// Note stuff\nconst float baseFreq = 110.0; // A1\nconst float d12thRootOf2 = pow(2.0, 1.0 / 12.0);\n\n\n// Get the note but also change pitch of everything sometimes for variety \nfloat note(float k, float t){\n    \n    float h = 2., wha = 0.;\n    \n    if(mod(cBeat(.5*t+bd), 2.) > 0. && cBeat(t) >= 32.){\n        h = 4.;\n        \n        wha = mod(floor(.5*BPM*(t-bd*2.) / 60.), h);\n    }\n    else{\n        wha = mod(floor(.5*BPM*(t-bd*2.) / 60.), h);\n    }\n    k += wha*3.0;\n\n    return baseFreq * pow(d12thRootOf2, k);\n}\n\n\n\n// Waveforms\nfloat sine(float t, float hz, float k){\n    return sin(hz*t*pi*2. + k);\n}\n\nfloat tri(float t, float hz, float k){\n    return (2. / pi) * asin(sin(2.*pi*t*hz + k));\n}\n\nfloat sqr(float t, float hz, float k){\n    return sign(sin(2.*pi*t*hz + k)) * 0.5;\n}\n\n\n// noise\nfloat nse(float t){\n    return fract(120.0*sin(t*1000.0));\n}\n\nvec2 hash22(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n\nfloat tick(float t){\n    return nse(t*999.) * exp(-t*40.);\n}\n\n// Metronome sound\nfloat blip(float t, float hz, float k){\n    return (1. - exp(-t*40.)) * sine(t, hz, 0.0) * exp(-t * k);\n}\n\n\n\n// Utility functions\nfloat dist1(float s, float d){\n \treturn clamp(d * s, -1., 1.);   \n}\nvec2 dist2(vec2 s, float d){\n \treturn clamp(d * s, vec2(-1.0), vec2(1.0));   \n}\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\n// My attempt at some drum sounds\nvec2 snare(float t){\n    vec2 s = exp(-t*23.) * hash22(iSampleRate * vec2(t, t*1.423)) * 2.0 - 1.0; \n    s = dist2(s, 1.3) * .85;\n    s += .5*dist1(exp(-t*28.) * sine(t, 200., 0.), 4.2);\n    return s * 0.5;\n}\n\nvec2 kick(float t){\n    vec2 s = vec2(0);\n    s += 1.1*dist2(exp(-t*25.) * vec2(sine(t, 75., 0.)), 2.1);\n    s += .6 * exp(-t*15.) * vec2(sine(t, 70., 0.));\n    return s;\n}\n\nvec2 hat(float t){\n    vec2 s = sqrt(t*7.) * exp(-t*38.) * hash22(iSampleRate * vec2(t, t*1.423)) * 2.0 - 1.0; \n    s = dist2(s, 1.1) * .85;\n    return s * 0.7;\n}\n\n// Add sound on a quarter beat\nvec2 onQ(float t, float n, vec2 s){\n    vec2 ms = vec2(0);\n\n    if(quarter_id(t) == n){\n        ms += s;\n    }\n    return ms;\n}\n\n\n// Make song\nvec2 snd(float t){\n    vec2 ms = vec2(0);\n    \n    ms += .6*onQ(t, 0., vec2(kick(beat(t))));\n    ms += .6*onQ(t, 2., vec2(snare(beat(t - qd*2.))));\n    \n    if(beat_id(t*2.) > 1.){\n        ms += .9 * onQ(t, 1., vec2(kick(beat(t - qd))));\n    }\n    \n    if(beat_id(t) > 1. && cQuarter(t) >= 16.){\n        ms += .37*onQ(t, 2., .22*vec2(sqr(beat(t - 2.*qd), note(12., t), 0.),\n        sqr(beat(t - 2.*qd), note(12., t) + 4., 0.)));\n        \n        ms += .2*onQ(t, 2., .22*vec2(tri(beat(t - 2.*qd), note(0., t), 0.),\n        tri(beat(t - 2.*qd), note(0., t) + 4., 0.)));\n    }\n    \n    if(cQuarter(t) >= 8.){\n        ms += onQ(t, 0., .4*vec2(tri(beat(t), note(-12., t), 0.)));\n        ms += onQ(t, 0., .13*vec2(sine(beat(t), note(0., t), 0.)));\n        \n        if(beat_id(t*2.) > 1.)\n            ms += 2.6*onQ(t, 1., .1*vec2(tri(beat(t + bd), note(10., t), 0.)));\n        \n        //if(beat_id((t+bd*2.)) > 2.)\n            //ms += 2.2*onQ(t, 3., .1*vec2(tri(beat(t - qd*2.), note(12., t), 0.)));\n        \n        ms += onQ(t, 2., .3*vec2(tri(beat(t - qd*2.), note(0., t), 0.)));\n        \n        if(beat_id(t*2.) > 1.){\n            ms += .36*onQ(t, 3., vec2(tri(beat(t - 3.*qd), note(-2., t), 0.),\n            tri(beat(t - 3.*qd), note(-2., t) + 2., 0.)));\n            ms += 1.1*onQ(t, 3., vec2(blip(beat(t - qd*3.), 400., 16.)));\n        }\n        \n        ms += .43*onQ(t, 1., vec2(hat(beat(t - qd))));\n        ms += .43*onQ(t, 3., vec2(hat(beat(t - qd*3.))));\n        \n        ms += 1.3*onQ(t, 3., vec2(blip(beat(t - qd*3.), 200., 16.)));\n    }\n    return ms;\n\n}\n\nvec2 mainSound( int samp, float time ){\n    vec2 ms = snd(time);\n    \n    //return clamp(ms * 1.2, -0.95, 0.95) * .6;\n    return ms * .7;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}