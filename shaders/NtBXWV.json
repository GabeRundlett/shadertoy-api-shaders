{
    "Shader": {
        "info": {
            "date": "1628589976",
            "description": "My first shadertoy XD",
            "flags": 0,
            "hasliked": 0,
            "id": "NtBXWV",
            "likes": 15,
            "name": "Magic Portal",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Delincoter",
            "viewed": 924
        },
        "renderpass": [
            {
                "code": "//noise funtion abstract from https://www.shadertoy.com/view/4sc3z2\nvec3 hash33(vec3 p3)\n{\n\tvec3 MOD3 = vec3(.1031, .11369, .13787);\n\tp3 = fract(p3* MOD3);\n\tp3 += dot(p3, p3.yxz + 19.19);\n\treturn -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x + p3.z)*p3.y, (p3.y + p3.z)*p3.x));\n}\n\nfloat simplex_noise(vec3 p)\n{\n\tconst float K1 = 0.333333333;\n\tconst float K2 = 0.166666667;\n\n\tvec3 i = floor(p + (p.x + p.y + p.z) * K1);\n\tvec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n\n\tvec3 e = step(vec3(0, 0, 0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n\tvec3 d1 = d0 - (i1 - 1.0 * K2);\n\tvec3 d2 = d0 - (i2 - 2.0 * K2);\n\tvec3 d3 = d0 - (1.0 - 3.0 * K2);\n\n\tvec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n\tvec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n\n\treturn dot(vec4(31.316, 31.316, 31.316, 31.316), n);\n}\n\n\n\nfloat render(vec2 uv)\n{\n    float side = smoothstep(0.5, 0.3, length(uv));\n    float center = smoothstep(0.1, 0.0, length(uv));\n    vec3 rd = vec3(uv, 0.);\n\n    float t = pow(iTime+0.5,5.)*0.001;\n\n    float n2 = simplex_noise((rd*t+t) * (1. / length(rd*t+rd)));\n    \n    if(iTime>1.5)\n    {\n        n2 = simplex_noise((rd*t+t) * (1. / length(rd*t+rd))+(iTime-1.5));\n    }\n    \n    \n    float flare = smoothstep(0.,1.,0.002 / length(rd*length(rd)*n2))*side;\n    \n    flare = flare-center*clamp((iTime-1.5)*10.,0.,5.);\n    \n    return flare;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    \n    vec3 col = vec3(0.102,0.5,1.)*2.;\n    col *= render(uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}