{
    "Shader": {
        "info": {
            "date": "1594060018",
            "description": "Small sound experiment, might try to add more to it later",
            "flags": 8,
            "hasliked": 0,
            "id": "WtByDR",
            "likes": 11,
            "name": "Chords Experiment",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "audio",
                "synthesis",
                "synth",
                "saw",
                "song",
                "sawtooth",
                "gpusound",
                "chords"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 467
        },
        "renderpass": [
            {
                "code": "// From https://www.shadertoy.com/view/ltfSRr\nfloat message(vec2 uv) {\n\tuv -= vec2(1.0, 10.0);\n\tif ((uv.x < 0.0) || (uv.x >= 32.0) || (uv.y < 0.0) || (uv.y >= 3.0)) return -1.0;\n\tint i = 1, bit = int(exp2(floor(32.0 - uv.x)));\n\tif (int(uv.y) == 2) i = 928473456 / bit;\n\tif (int(uv.y) == 1) i = 626348112 / bit;\n\tif (int(uv.y) == 0) i = 1735745872 / bit;\n\treturn float(i - 2 * (i / 2));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tif (iResolution.y < 2000.0) {\n\t\tfloat c = message(fragCoord / 8.0);\n\t\tif (c >= 0.0){\n\t\t\tfragColor = vec4(c);\n\t\t\treturn;\n\t\t}\n\t}\n\tvec2 uv = fragCoord / iResolution.xy;\n\tfragColor = vec4(uv, 0.5 + 0.5 * mod(iTime, 0.25), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415926;\n\n// MIDI note to frequency formula\nfloat noteFreq(float note) {\n\treturn 440.0 * exp2(floor(note - 69.0) / 12.0);\n}\n\n// From https://www.shadertoy.com/view/llByWR\nfloat sawtooth(float time, float x) {\n    // Smooth harsh attack\n    float smoothAttack = min(1.0, time * 50.0);\n\treturn (1.0 - 2.0 * acos((1.0 - time) * -cos(x / 2.0)) / PI) * (2.0 * atan(sin(x / 2.0) / time) / PI) * smoothAttack;\n}\n\nfloat arpeggiate(float time, float baseNote, float range, float notesPerSecond, float repeat) {\n\treturn mod(floor(time / notesPerSecond), repeat) * range + baseNote;\n}\n\nvec2 mainSound(in int samp, float time) {\n\t\n\tconst float phaseOffset = 0.01;\n\n\tfloat bass = arpeggiate(time, 69.0, 3.0, 2.0, 2.0);\n\tfloat low = arpeggiate(time, 81.0, 3.0, 2.0, 2.0);\n\tfloat mid = arpeggiate(time, 85.0, 2.0, 1.0, 4.0);\n\tfloat high = arpeggiate(time, 93.0, 3.0, 2.0, 2.0);\n\tfloat higher = arpeggiate(time, 97.0, 2.0, 1.0, 4.0);\n\tif (mod(floor(time / 16.0), 2.0) != 0.0) {\n\t\tbass = arpeggiate(time, 69.0, 2.0, 2.0, 2.0);\n\t\tlow = arpeggiate(time, 81.0, 2.0, 2.0, 2.0);\n\t\tmid = arpeggiate(time, 81.0, 2.0, 2.0, 4.0);\n\t\thigh = arpeggiate(time, 93.0, 2.0, 2.0, 2.0);\n\t\thigher = arpeggiate(time, 105.0, 2.4, 0.25, 4.0);\n\t}\n\t\n\tfloat[] notes = float[] (bass, low, mid, high, higher);\n\tfloat[] amplitudes = float[] (1.2, 1.0, 1.2, 0.6, 0.3);\n\t\n    vec2 result = vec2(0.0);\n\t\n\tfor (int i = 0; i < notes.length(); i++) {\n\t\tfloat repeat = mod(time, 0.25) * (5.0 - cos(time) * 2.0);\n\t\tif (i == 0) {\n\t\t\trepeat = mod(time, 0.125) * (2.0 - cos(time));\n\t\t}\n\t\trepeat = min(repeat, 0.7 + cos(time * 0.25) * 0.3);\n        \n\t\tfloat offsetLeft = sin(float(i)) * phaseOffset;\n\t\tresult.x += sawtooth(repeat, (time + offsetLeft) * noteFreq(notes[i])) * amplitudes[i];\n        \n\t\tfloat offsetRight = cos(float(i)) * phaseOffset;\n\t\tresult.y += sawtooth(repeat, (time + offsetRight) * noteFreq(notes[i])) * amplitudes[i];\n\t}\n    \n\treturn result / float(notes.length());\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}