{
    "Shader": {
        "info": {
            "date": "1678841669",
            "description": "A calibration screen which can be used to help identify the right workaround for the sRGB != Gamma problem.\nIf you can't see anything of the test images in the center, sorry about that, I'll have to make another screen for choosing black point offset!",
            "flags": 0,
            "hasliked": 0,
            "id": "ddKGRV",
            "likes": 3,
            "name": "sRGB vs Gamma calibration screen",
            "published": 3,
            "tags": [
                "gamma",
                "calibration",
                "srgb",
                "srgbvspow"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 420
        },
        "renderpass": [
            {
                "code": "\nvec3 srgb_decode (vec3 e) {\n  return mix(e/12.92,pow((e+.055)/1.055,vec3(2.4)),lessThan(vec3(.04045),e));\n}\n\nvec3 srgb_encode (vec3 v) {\n  return mix(12.92*v,1.055*pow(v,vec3(.41666))-.055,lessThan(vec3(.0031308),v));\n}\n\nconst uint[] S_message0_l0 =\n  STRING32(28, C,h,o,o,s,e,_,t,h,e,_,m,o,d,e,_,i,n,_,w,h,i,c,h,_,t,h,e,_,_,_,_);\nconst uint[] S_message0_l1 =\n  STRING32(27, i,m,a,g,e,s,_,b,e,l,o,w,_,b,e,s,t,_,m,a,t,c,h,_,t,h,e,_,_,_,_,_);\nconst uint[] S_message0_l2 =\n  STRING32(17, c,o,r,r,e,c,t,_,e,x,a,m,p,l,e,s,pe,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_);\nconst uint[] S_select =\n  STRING32(17, M,a,k,e,_,a,_,s,e,l,e,c,t,i,o,n,em,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_);\nconst uint[] S_message1_l0 =\n  STRING32(29, T,r,y,_,t,o,_,m,a,t,c,h,_,v,i,s,i,b,l,e,_,l,e,v,e,l,_,o,f,_,_,_);\nconst uint[] S_message1_l1 =\n  STRING32(32, d,e,t,a,i,l,cm,_,n,o,t,_,r,e,l,a,t,i,v,e,_,b,r,i,g,h,t,n,e,s,s,pe);\n\nconst uint[] S_correct =\n  STRING16(7, C,o,r,r,e,c,t,_,_,_,_,_,_,_,_,_);\nconst uint[] S_incorrect =\n  STRING16(9, I,n,c,o,r,r,e,c,t,_,_,_,_,_,_,_);\nconst uint[] S_details =\n  STRING16(7, D,e,t,a,i,l,s,_,_,_,_,_,_,_,_,_);\nconst uint[] S_artifacts =\n  STRING16(9, A,r,t,i,f,a,c,t,s,_,_,_,_,_,_,_);\nconst uint[] S_srgb =\n  STRING16(4, s,R,G,B,_,_,_,_,_,_,_,_,_,_,_,_);\nconst uint[] S_gamma =\n  STRING16(5, G,a,m,m,a,_,_,_,_,_,_,_,_,_,_,_);\n\nvec3 testimgA (vec2 v) {\n  if(maxv(abs(v))>.48)return vec3(.002);\n  if(v.y<-.42) return .004*mix(vec3(1,0,0),vec3(0,.297,0),.5+v.x);\n  return .004*exp(-dot(v,v)*20.)*texture(iChannel0,v*.12+vec2(.72,.39)).rgb;\n}\n\nvec3 testimgB (vec2 v) {\n  if(maxv(abs(v))>.48)return vec3(.008);\n  //float b=.003;\n  //return .00005+.04*b*floor(texture(iChannel0,v*.05+vec2(.882,.446)).ggg/b);\n  float b=.006;\n  return .00005+.02*b*floor(abs(texture(iChannel0,v*.2+vec2(.45,.899)).ggg-.98)/b);\n}\n\nvoid mainImage( out vec4 fragout, in vec2 f ) {\n  vec2 R=iResolution.xy;\n  vec2 uv=(f+f-R)/minv(R*vec2(1,4./3.));\n  vec2 u=uv*2.-.5+vec2(2,1.56);\n  vec3 col=vec3(0.);\n  int mode=int(floor((iMouse.x-1.)/R.x*2.));\n  for(int i=0;i<8;i++) {\n    vec2 ui;\n    if(i==0)ui=u-.5*vec2(0,0);\n    if(i==1)ui=u-.5*vec2(0,2);\n    if(i==2)ui=u-.5*vec2(0,4);\n    if(i==3)ui=u-.5*vec2(2,2);\n    if(i==4)ui=u-.5*vec2(4,2);\n    if(i==5)ui=u-.5*vec2(6,0);\n    if(i==6)ui=u-.5*vec2(6,2);\n    if(i==7)ui=u-.5*vec2(6,4);\n    vec2 v = ui*6./5.;\n    if(max(abs(v.x),abs(v.y))>.5) continue;\n    if(i==0)col=pow(srgb_encode(testimgA(v)),vec3(2.2))*4.;\n    if(i==1)col=testimgA(v)*4.;\n    if(i==2)col=srgb_decode(pow(testimgA(v),vec3(1./2.2)))*4.;\n    if(i==3)col=testimgA(v);\n    if(i==4)col=testimgB(v);\n    if(i==5)col=pow(srgb_encode(testimgB(v)),vec3(2.2))*4.;\n    if(i==6)col=testimgB(v)*4.;\n    if(i==7)col=srgb_decode(pow(testimgB(v),vec3(1./2.2)))*4.;\n  }\n  float w=.10*smoothstep(0.,1.,((abs(u.x*2.-3.)-1.8)*2.));\n  if(mode==0)col+=srgb_decode(vec3(w));\n  if(mode==1)col+=pow(w,2.2);\n  \n  float txt=0.,txt2=0.;\n  vec2 tsz=vec2(1,-2)*.05;\n  u+=.04;\n  txt2+=draw_string(iChannel1,(u-.5*vec2(1.6,4.5))/tsz+.5-vec2(0,0),S_message0_l0);\n  txt2+=draw_string(iChannel1,(u-.5*vec2(1.6,4.5))/tsz+.5-vec2(0,1),S_message0_l1);\n  txt2+=draw_string(iChannel1,(u-.5*vec2(1.6,4.5))/tsz+.5-vec2(0,2),S_message0_l2);\n  txt2+=.5*draw_string(iChannel1,(u-.5*vec2(1.6,0.5))/tsz+.5-vec2(0,0),S_message1_l0);\n  txt2+=.5*draw_string(iChannel1,(u-.5*vec2(1.6,0.5))/tsz+.5-vec2(0,1),S_message1_l1);\n  if(mode<0)\n  txt2+=draw_string(iChannel1,(u-.5*vec2(1.6,2.0))/tsz+.5-vec2(0,2),S_select);\n  txt+=txt2;\n  txt+=.05*draw_string(iChannel1,(u-.5*vec2(1.5,3.))/tsz+.5,S_details);\n  txt+=.03*draw_string(iChannel1,(u-.5*vec2(3.5,3.))/tsz+.5,S_artifacts);\n  txt+=.4*draw_string(iChannel1,(u-.5*vec2(-.5,3.))/tsz+.5,S_correct);\n  txt+=.4*draw_string(iChannel1,(u-.5*vec2(5.5,3.))/tsz+.5,S_correct);\n  txt+=.4*draw_string(iChannel1,(u-.5*vec2(-.5,1.))/tsz+.5,S_incorrect);\n  txt+=.4*draw_string(iChannel1,(u-.5*vec2(5.5,1.))/tsz+.5,S_incorrect);\n  txt+=.4*draw_string(iChannel1,(u-.5*vec2(-.5,5.))/tsz+.5,S_incorrect);\n  txt+=.4*draw_string(iChannel1,(u-.5*vec2(5.5,5.))/tsz+.5,S_incorrect);\n  col+=.1*txt;\n  fragout.rgb=srgb_encode(vec3(.4*txt2));\n  if(mode==0)fragout.rgb=srgb_encode(col);\n  if(mode==1)fragout.rgb=pow(col,vec3(1./2.2));\n  for(int i=0;i<2;i++) {\n    u=(uv*3.-vec2(-.5+float(i),1.))*2.2;\n    if(abs(u.x)>1.||abs(u.y)>.25)continue;\n    float txt=0.;\n    vec2 tsz=vec2(1,-2)*.2;\n    if(i==0)txt+=draw_string(iChannel1,u/tsz+vec2(2.,.5), S_srgb);\n    if(i==1)txt+=draw_string(iChannel1,u/tsz+vec2(2.5,.5), S_gamma);\n    col=vec3(.2*txt+.1);\n    if(i!=mode)col*=.1;\n    else col*=vec3(.3,.2,1);\n    fragout.rgb=srgb_encode(col);\n  }\n  fragout+=texelFetch(iChannel2,ivec2(f)%ivec2(256),0).r/128.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n\nGLSL character printing library for octaviogood font texture.\nhttps://www.shadertoy.com/view/Wd2SDt\n\n*/\n\nconst struct CCDS_T {\n  uint\n    _,   em,  dq,  ha,  ds,  mo,  am,  sq,  lp,  rp,  as,  pl,  cm,  hm,  pe,  sl,\n    _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9,  co,  sc,  lt,  eq,  gt,  qm,\n    at,   A,   B,   C,   D,   E,   F,   G,   H,   I,   J,   K,   L,   M,   N,   O,\n     P,   Q,   R,   S,   T,   U,   V,   W,   X,   Y,   Z,  lb,  bs,  rb,  up,  un,\n    bt,   a,   b,   c,   d,   e,   f,   g,   h,   i,   j,   k,   l,   m,   n,   o,\n     p,   q,   r,   s,   t,   u,   v,   w,   x,   y,   z,  lc,  ba,  rc,  ti, _U0,\n   alp, bet, gam, del, eps, the, lam,  mu,  xi,  pi, rho, sig, tau, phi, psi, ome,\n   Gam, Del, The, Lam,  Pi, Sig, Phi, Psi, Ome, inf,flor,ring,intg,pdrv, nab,sqrt,\n   _U1, iem, cen, pou, cur, yen, bba, sec, dia, cop, fem, lda, not, _U2, reg, mac,\n   deg, pms, su2, su3, acu, mic, pil, mid, ced, su1, mas, rda, v14, v12, v34, iqm,\n    AG,  AA,  AC,  AT,  AD,  AR,  AE,  CC,  EG,  EA,  EC,  ED,  IG,  IA,  IC,  ID,\n   Eth,  NT,  OG,  OA,  OC,  OT,  OD, mul,  OS,  UG,  UA,  UC,  UD,  YA, Tho, Sha,\n    aG,  aA,  aC,  aT,  aD,  aR,  ae,  cC,  eG,  eA,  eC,  eD,  iG,  iA,  iC,  iD,\n   eth,  nT,  oG,  oA,  oC,  oT,  oD, div,  oS,  uG,  uA,  uC,  uD,  yA, yho,  yD,  \n  _nul;\n} CCDS = CCDS_T(\n  0x20u,0x21u,0x22u,0x23u,0x24u,0x25u,0x26u,0x27u,0x28u,0x29u,0x2au,0x2bu,0x2cu,0x2du,0x2eu,0x2fu,\n  0x30u,0x31u,0x32u,0x33u,0x34u,0x35u,0x36u,0x37u,0x38u,0x39u,0x3au,0x3bu,0x3cu,0x3du,0x3eu,0x3fu,\n  0x40u,0x41u,0x42u,0x43u,0x44u,0x45u,0x46u,0x47u,0x48u,0x49u,0x4au,0x4bu,0x4cu,0x4du,0x4eu,0x4fu,\n  0x50u,0x51u,0x52u,0x53u,0x54u,0x55u,0x56u,0x57u,0x58u,0x59u,0x5au,0x5bu,0x5cu,0x5du,0x5eu,0x5fu,\n  0x60u,0x61u,0x62u,0x63u,0x64u,0x65u,0x66u,0x67u,0x68u,0x69u,0x6au,0x6bu,0x6cu,0x6du,0x6eu,0x6fu,\n  0x70u,0x71u,0x72u,0x73u,0x74u,0x75u,0x76u,0x77u,0x78u,0x79u,0x7au,0x7bu,0x7cu,0x7du,0x7eu,0x7fu,\n  0x80u,0x81u,0x82u,0x83u,0x84u,0x85u,0x86u,0x87u,0x88u,0x89u,0x8au,0x8bu,0x8cu,0x8du,0x8eu,0x8fu,\n  0x90u,0x91u,0x92u,0x93u,0x94u,0x95u,0x96u,0x97u,0x98u,0x99u,0x9au,0x9bu,0x9cu,0x9du,0x9eu,0x9fu,\n  0xa0u,0xa1u,0xa2u,0xa3u,0xa4u,0xa5u,0xa6u,0xa7u,0xa8u,0xa9u,0xaau,0xabu,0xacu,0xadu,0xaeu,0xafu,\n  0xb0u,0xb1u,0xb2u,0xb3u,0xb4u,0xb5u,0xb6u,0xb7u,0xb8u,0xb9u,0xbau,0xbbu,0xbcu,0xbdu,0xbeu,0xbfu,\n  0xc0u,0xc1u,0xc2u,0xc3u,0xc4u,0xc5u,0xc6u,0xc7u,0xc8u,0xc9u,0xcau,0xcbu,0xccu,0xcdu,0xceu,0xcfu,\n  0xd0u,0xd1u,0xd2u,0xd3u,0xd4u,0xd5u,0xd6u,0xd7u,0xd8u,0xd9u,0xdau,0xdbu,0xdcu,0xddu,0xdeu,0xdfu,\n  0xe0u,0xe1u,0xe2u,0xe3u,0xe4u,0xe5u,0xe6u,0xe7u,0xe8u,0xe9u,0xeau,0xebu,0xecu,0xedu,0xeeu,0xefu,\n  0xf0u,0xf1u,0xf2u,0xf3u,0xf4u,0xf5u,0xf6u,0xf7u,0xf8u,0xf9u,0xfau,0xfbu,0xfcu,0xfdu,0xfeu,0xffu,\n0x7fu);\n\n#define U4CHAR4(a,b,c,d) ((CCDS.a)+(CCDS.b<<8)+(CCDS.c<<16)+(CCDS.d<<24))\n\n#define STRING16(n,\\\n  a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af)\\\n    uint[](uint(n), \\\n      U4CHAR4(a0,a1,a2,a3),U4CHAR4(a4,a5,a6,a7),U4CHAR4(a8,a9,aa,ab),U4CHAR4(ac,ad,ae,af) )\n\n#define STRING32(n,\\\n  a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af,\\\n  b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,ba,bb,bc,bd,be,bf)\\\n    uint[](uint(n), \\\n      U4CHAR4(a0,a1,a2,a3),U4CHAR4(a4,a5,a6,a7),U4CHAR4(a8,a9,aa,ab),U4CHAR4(ac,ad,ae,af),\\\n      U4CHAR4(b0,b1,b2,b3),U4CHAR4(b4,b5,b6,b7),U4CHAR4(b8,b9,ba,bb),U4CHAR4(bc,bd,be,bf) )\n\n#define STRING64(n,\\\n  a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af,\\\n  b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,ba,bb,bc,bd,be,bf,\\\n  c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,ca,cb,cc,cd,ce,cf,\\\n  d0,d1,d2,d3,d4,d5,d6,d7,d8,d9,da,db,dc,dd,de,df)\\\n    uint[](uint(n), \\\n      U4CHAR4(a0,a1,a2,a3),U4CHAR4(a4,a5,a6,a7),U4CHAR4(a8,a9,aa,ab),U4CHAR4(ac,ad,ae,af),\\\n      U4CHAR4(b0,b1,b2,b3),U4CHAR4(b4,b5,b6,b7),U4CHAR4(b8,b9,ba,bb),U4CHAR4(bc,bd,be,bf),\\\n      U4CHAR4(c0,c1,c2,c3),U4CHAR4(c4,c5,c6,c7),U4CHAR4(c8,c9,ca,cb),U4CHAR4(cc,cd,ce,cf),\\\n      U4CHAR4(d0,d1,d2,d3),U4CHAR4(d4,d5,d6,d7),U4CHAR4(d8,d9,da,db),U4CHAR4(dc,dd,de,df))\n\n#define STRING80(n,\\\n  a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,aa,ab,ac,ad,ae,af,\\\n  b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,ba,bb,bc,bd,be,bf,\\\n  c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,ca,cb,cc,cd,ce,cf,\\\n  d0,d1,d2,d3,d4,d5,d6,d7,d8,d9,da,db,dc,dd,de,df,\\\n  e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,ea,eb,ec,ed,ee,ef)\\\n    uint[](uint(n), \\\n      U4CHAR4(a0,a1,a2,a3),U4CHAR4(a4,a5,a6,a7),U4CHAR4(a8,a9,aa,ab),U4CHAR4(ac,ad,ae,af),\\\n      U4CHAR4(b0,b1,b2,b3),U4CHAR4(b4,b5,b6,b7),U4CHAR4(b8,b9,ba,bb),U4CHAR4(bc,bd,be,bf),\\\n      U4CHAR4(c0,c1,c2,c3),U4CHAR4(c4,c5,c6,c7),U4CHAR4(c8,c9,ca,cb),U4CHAR4(cc,cd,ce,cf),\\\n      U4CHAR4(d0,d1,d2,d3),U4CHAR4(d4,d5,d6,d7),U4CHAR4(d8,d9,da,db),U4CHAR4(dc,dd,de,df),\\\n      U4CHAR4(e0,e1,e2,e3),U4CHAR4(e4,e5,e6,e7),U4CHAR4(e8,e9,ea,eb),U4CHAR4(ec,ed,ee,ef))\n\n#define DEF_DRAW_STRING(N) \\\nfloat draw_string (sampler2D sampler,                    \\\n                   in vec2 uv, const uint[1+N] string) { \\\n  int i = int(uv.x);                                     \\\n  int strlen = min(int(string[0]),N*4);                  \\\n  if (uv.x<0.||i>=strlen) return 0.;                     \\\n  int code = int( (string[i/4+1]>>((i%4)*8)) &0xFFu);    \\\n  if (uv.y<0.||uv.y>1.) return 0.;                       \\\n  uv.x=fract(uv.x)/2.+.25; uv.y=1.-uv.y;                 \\\n  uv+=vec2(code%16,15-code/16);                          \\\n  return texture(sampler, uv/16.).r;                   }\nDEF_DRAW_STRING(4)\nDEF_DRAW_STRING(8)\nDEF_DRAW_STRING(16)\nDEF_DRAW_STRING(20)\n#undef DEF_DRAW_STRING\n\nfloat maxv (vec2 x) { return max(x.x,x.y); }\nfloat minv (vec2 x) { return min(x.x,x.y); }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}