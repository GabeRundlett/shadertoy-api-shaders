{
    "Shader": {
        "info": {
            "date": "1596767779",
            "description": "Posting old shader. Use mouse for effect",
            "flags": 32,
            "hasliked": 0,
            "id": "wd3XRf",
            "likes": 27,
            "name": "Stringy mouse fun fun",
            "published": 3,
            "tags": [
                "mouse",
                "reaction"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 539
        },
        "renderpass": [
            {
                "code": "vec2 R;\n\nvec4 t(vec2 p){\n    return texture(iChannel1, p);   \n}\nfloat height(vec2 p){\n    return t(p).x;\n}\nvec3 Bumpyyyyyyyyyyyyyyyyyyyyyyyyyyyyy(vec2 uv, float strength){\n    float h = 0.002;\n    vec3 p = t(uv).xyz; \n    float dx = height(uv) - height(uv + vec2(h, .0));\n    float dy = height(uv) - height(uv + vec2(0., h));\n    return normalize( vec3(0., 0., -1.) + vec3(dx, dy, 0.)*strength);\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u )\n{\n    R = iResolution.xy;\n    vec2 uv = u / R;\n    vec2 cuv =  vec2(u.xy - 0.5*R.xy)/R.y; \n\t\n    vec3 lp = vec3(0., 0., -1.0); \n    vec3 sp = vec3(cuv, 0.0); \n    vec3 ro = vec3(0, 0, -1.0); \n    vec3 rd = normalize(sp - ro);\n    vec3 ld = lp - sp;\n    \n    float dist = max(length(ld), 0.001);\n    ld /= dist;\n    vec3 objCol = t(uv).xyz;\n    \n    vec3 norm = Bumpyyyyyyyyyyyyyyyyyyyyyyyyyyyyy(uv, 12.0);\n  \t\n    float dif = max(dot(norm, ld), 0.);  \n    float spec = pow(max(dot( reflect(-ld, norm), -rd), 0.), 16.); \n    \n    float falloff = 1.5/(1. + dist*0.15 + dist*dist*2.15);\n    \n    vec3 col = (objCol*(dif + .5) + vec3(0.5, 0.6, 0.7)*spec*1.4)*falloff;\n   \n    f = vec4(col, 0.);\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 R;\nvec4 t(vec2 p){\n    return texture(iChannel0, p/R);   \n}\n\nvec2 hash22(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec2 m = vec2(iMouse.xy / R) - 0.5;\n    m.x *= R.x / R.y;\n    m *= .35;\n    vec2 dir = t(u).xy;\n   \n    vec2 up = t(u+vec2(.0, 1.)).xy;\n    vec2 dwn = t(u+vec2(.0, -1.)).xy;\n    vec2 lft = t(u+vec2(-1.0, 0.)).xy;\n    vec2 rgt = t(u+vec2(1.0, 0.)).xy;\n    \n    vec2 upl = t(u+vec2(-1.0, 1.)).xy;\n    vec2 upr = t(u+vec2(1.0, 1.)).xy;\n    vec2 dwnl = t(u+vec2(-1.0, -1.)).xy;\n    vec2 dwnr = t(u+vec2(1.0, -1.)).xy;\n    \n    vec2 sum = (up + dwn + lft + rgt + upl + upr + dwnl + dwnr);\n    \n    float div = dot(dir, (sum));\n    vec3 r = normalize(cross(vec3(dir,1.0), vec3(sum, 1.0)));\n    \n    \n    dir = normalize(sum-div*.09-r.z);\n    dir += hash22(u)*.01;\n   \n    //dir += .02;\n    \n    if(iFrame < 2){\n    \tdir = vec2(1);\n    }\n    \n    float d = length(uv - m);\n    if(iMouse.z > 0.0){\n        vec2 val = exp2(-d*25.)*hash22(u);\n        dir += val; \n    }\n    \n    //dir=mix(dir, hash22(u), .01);\n    \n    f = vec4(dir, 0., 00.);\n    \n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 R;\n\n\nvec4 t(vec2 p){\n    return texture(iChannel0, p);   \n}\n\nvoid mainImage( out vec4 f, in vec2 u )\n{\n    R = iResolution.xy;\n    vec2 uv = u/R;\n    \n    uv-=0.5;\n    uv*=0.35;\n    uv+=0.5;\n    \n    vec4 bA = t(uv);\n    \n    \n    vec2 dir = bA.xy;\n    float div = bA.z;\n    float vel = bA.w;\n    \n    \n    vec3 col = vec3(sin(dir)*sin(dir), 0.8);\n    \n    \n \tf = vec4(col, 0.);   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}