{
    "Shader": {
        "info": {
            "date": "1667148411",
            "description": "More extended hexagonal Truchet tilings (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "msj3RR",
            "likes": 22,
            "name": "Truchet Nets",
            "published": 3,
            "tags": [
                "truchet",
                "path"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "// \"Truchet Nets\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec2 HexMidEdge (vec2 p);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat SmoothMax (float a, float b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv3 (vec3 p);\nfloat Noiseff (float p);\n\nvec3 cId, ltDir;\nvec2 cMid, gSize;\nfloat tCur, dstFar, cDir, cType, tWid, rc, ac, spd, dGlow;\nint idObj;\nbool isPano;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat Ddot (vec2 p)\n{\n  return dot (p, p);\n}\n\nfloat TruchDist (vec2 p)\n{ // (from \"Twisted Passages\")\n  vec2 pc, pc1, pc2;\n  float d, d1, d2;\n  if (cType == 1. || cType == 3.) {\n    if (cDir != 0.) p = 0.5 * vec2 (p.x - cDir * sqrt3 * p.y, cDir * sqrt3 * p.x + p.y);\n    pc1 = vec2 (sqrt3/2. * sign (p.x), 0.);\n    pc2 = vec2 (sqrt3 * sign (p.x), 0.);\n    d1 = sqrt (Ddot (p - pc1));\n    d2 = abs (sqrt (Ddot (p - pc2)) - 1.5);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = (d == d1) ? 0.: 1.5;\n  } else if (cType == 2. || cType == 4.) {\n    pc1 = - vec2 (0., cDir);\n    pc2 = vec2 (sqrt3/2. * sign (p.x), 0.5 * cDir);\n    d1 = Ddot (p - pc1);\n    d2 = Ddot (p - pc2);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = 0.5;\n    d = abs (sqrt (d) - rc);\n  }\n  pc = p - pc;\n  ac = - atan (pc.y, - pc.x) / (2. * pi) + 0.5;\n  if (cType == 2. && cId.x - cId.z < 0.) ac = - ac;\n  return d;\n}\n\nbool OnTrk (vec2 w)\n{\n  vec2 wp, wm;\n  float cxz;\n  bool czo, offTrk;\n  if (mod (cId.y, 4.) == 0.) {\n    cxz = cId.x - cId.z;\n    czo = (mod (cId.z, 2.) == 1.);\n    wm = Rot2Cs (w, sin (- pi / 3. + vec2 (0.5 * pi, 0.))) - vec2 (0., 0.3);\n    wp = Rot2Cs (w, sin (pi / 3. + vec2 (0.5 * pi, 0.)));\n    offTrk = (cxz == -2. && wm.y > 0. || ! czo && (abs (cxz) == 2. || cxz == -3. && w.y > -0.3 ||\n       cxz == -1. && wm.y > 0. || cxz == 1. && wm.y < 0.) || czo && (cxz == -3. ||\n       cxz == 0. && wp.x > 0. || cxz == 1. && wm.x < 0. || cxz == 2. && wm.y < 0.));\n  } else offTrk = true;\n  return ! offTrk;\n}\n\nvoid SetCConf ()\n{\n  float h, cxz;\n  cMid = HexToPix (cId.xz * gSize.x);\n  h = Hashfv3 (cId);\n  if (Hashfv3 (17.11 * cId) > 0.4 || cId.y != 0.) {\n    cDir = floor (3. * h) - 1.;\n    cType = 3.;\n  } else {\n    cDir = 2. * floor (2. * h) - 1.;\n    cType = 4.;\n  }\n  if (mod (cId.y, 4.) == 0.) {\n    cxz = cId.x - cId.z;\n    if (cxz == 0.) cType = 1.;\n    else if (abs (cxz) == 1.) cType = mod (cId.x, 2.) + 1.;\n    else if (abs (cxz) == 2. || cxz == -3.) cType = 2.;\n    if (cType <= 2.) cDir = 2. * mod (cId.x, 2.) - 1.;\n  }\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d, dt;\n  dMin = dstFar;\n  p = vec3 ((p.xz - cMid) / gSize.x, p.y / gSize.y - (cId.y + 0.5)).xzy;\n  dt = TruchDist (p.xz);\n  d = PrRoundBox2Df (vec2 (dt, p.y), vec2 (0.04, 0.006), 0.005);\n  DMIN (1);\n  d = SmoothMax (length (HexMidEdge (p.xz)) - 0.08,\n     - PrBox2Df (vec2 (dt, p.y - 0.14), vec2 (0.05, 0.15)), 0.01);\n  DMIN (2);\n  if (cType <= 2. && rc != 0. && OnTrk (p.xz)) {\n    d = PrCylDf (vec3 (dt, p.y - 0.12, fract (6. * (rc * ac - spd * tCur)) - 0.5).xzy,\n       0.25 * tWid, 0.12);\n    DMIN (3);\n    if (idObj == 3) dGlow = min (dGlow, dMin);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec4 vri, hv;\n  vec3 vf, p, cIdP;\n  vec2 edN[3], pM, s;\n  float dHit, d, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.y == 0.) rd.y = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.001;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = vec4 (gSize.x / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2])),\n     1. / rd.y);\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / gSize.x;\n  pM = HexToPix (PixToHex (ro.xz / gSize.x));\n  cIdP = vec3 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    cId = vec3 (PixToHex (p.xz / gSize.x), floor (p.y / gSize.y)).xzy;\n    if (cId != cIdP) {\n      cIdP = cId;\n      SetCConf ();\n    }\n    hv = vec4 ((vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))),\n       gSize.y * (cId.y + step (0., rd.y))) * vri;\n    s = vec2 (Minv3 (hv.xyz), dHit + abs (hv.w - p.y * vri.w));\n    d = ObjDf (p);\n    if (dHit + d < min (s.x, s.y)) {\n      dHit += d;\n    } else if (s.x < s.y) {\n      dHit = s.x + eps;\n      pM += sqrt3 * ((s.x == hv.x) ? edN[0] : ((s.x == hv.y) ? edN[1] : edN[2]));\n    } else {\n      dHit = s.y + eps;\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn;\n  vec2 w;\n  float dstObj, nDotL, a, dt;\n  bgCol = vec3 (0.1, 0.05, 0.);\n  dGlow = dstFar;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col4 = vec4 (0.9, 0.8, 0.2, 0.2);\n      w = (ro.xz - cMid) / gSize.x;\n      if (vn.y > 0. && cType <= 2. && rc != 0. && OnTrk (w)) {\n        a = 6. * (rc * ac - spd * tCur);\n        dt = TruchDist (w);\n        col4 *= 1. - 0.3 * max (step (dt, 0.25 * tWid) * step (0.4, fract (24. * a)),\n           step (length (vec2 (dt, fract (a) - 0.5)), 0.26 * tWid));\n      }\n    } else if (idObj == 2) {\n      col4 = vec4 (0.8, 0.6, 0.2, 0.2);\n    } else if (idObj == 3) {\n      col4 = vec4 (0.5, 0.5, 0.8, -1.);\n    }\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (idObj == 1) nDotL *= nDotL;\n    if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.2 * max (- dot (rd, vn), 0.) + 0.8 * nDotL) +\n       col4.a * pow (max (dot (reflect (ltDir, vn), rd), 0.), 32.);\n    else col = col4.rgb * (0.5 + 0.5 * max (- dot (rd, vn), 0.));\n    if (! isPano) col = mix (col, bgCol, smoothstep (0.4, 1., dstObj / dstFar));\n  } else {\n    col = bgCol;\n  }\n  if (dstObj >= dstFar || idObj != 3) col = mix (col, vec3 (0.5, 0.5, 0.8),\n     0.9 * exp (- 32. * dGlow) * (1. - 0.5 * Noiseff (tCur)));\n  return clamp (col, 0., 1.);\n}\n\n#define N_WIN  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv, mMid[N_WIN], ut[N_WIN], mSize, msw;\n  float el, az, zmFac, asp, sr;\n  int vuId, regId;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mSize = (1./5.) * vec2 (asp, 1.);\n  mMid[0] = (1. - mSize.y) * vec2 (asp, 1.);\n  for (int k = 0; k < N_WIN; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    for (int k = 0; k < N_WIN; k ++) {\n      msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n      if (Maxv2 (abs (msw)) < mSize.y) {\n        regId = k + 1;\n        msw /= 2. * mSize.y;\n        break;\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  for (int k = 0; k < N_WIN; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuId = k + 1;\n      break;\n    }\n  }\n  if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  isPano = (vuId > 0);\n  az = pi / 3.;\n  el = 0.;\n  if (mPtr.z > 0. && vuId == regId) {\n    az += 2. * pi * msw.x;\n    el += 0.5 * pi * msw.y;\n  } else if (! isPano) {\n    az -= 0.6 * pi * sin (0.03 * pi * tCur);\n    el -= 0.2 * pi * sin (0.05 * pi * tCur);\n  }\n  el = clamp (el, -0.3 * pi, 0.3 * pi);\n  vuMat = StdVuMat (el, az);\n  gSize = vec2 (2., 1.);\n  tWid = 0.12;\n  spd = 0.03;\n  ro = vec3 (0., 1.01, 0.5 * tCur);\n  ro.xz = Rot2D (ro.xz, - pi / 3.) + vec2 (0.9);\n  zmFac = isPano ? 0.4 : 2.;\n  uv /= zmFac;\n  dstFar = 60.;\n  ltDir = vuMat * normalize (vec3 (1., 0.8, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi));\n    rd = vuMat * normalize (isPano ? vec3 (2. * sin (uvv.x / asp + vec2 (0., 0.5 * pi)), uvv.y).xzy : \n       vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  for (int k = 0; k < N_WIN; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 3.) col = vec3 (0.3, 0.7, 0.3);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec2 HexMidEdge (vec2 p)\n{\n  vec2 p1, p2;\n  p = abs (p);\n  p1 = p + vec2 (- sqrt3/2., 0.);\n  p2 = p + vec2 (- sqrt3/4., -0.75);\n  return (length (p1) < length (p2)) ? p1 : p2;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}