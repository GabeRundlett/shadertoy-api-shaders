{
    "Shader": {
        "info": {
            "date": "1620100728",
            "description": "A retake on the intersection with a trilinear isosurface. Much simpler and neater, there is even some symmetry.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssSXWh",
            "likes": 7,
            "name": "Trilinear Isosurface Refactored",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "ray",
                "raycasting",
                "intersection",
                "isosurface",
                "trilinear",
                "refactored"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "vec4 solveCubic(in float a, in float b, in float c, in float d) {\n    float aa = a * a, bb = b * b;\n\n    float denom = 3.0 * aa;\n    float inflect = b / (3.0 * a);\n\n    float p = c / a - bb / denom;\n    float q = bb * b / (13.5 * aa * a) - b * c / denom + d / a;\n    float ppp = p * p * p, qq = q * q;\n\n    float p2 = abs(p);\n    float v1 = 1.5 / p * q;\n\n    vec4 roots = vec4(0.0, 0.0, 0.0, 1.0);\n    if (qq * 0.25 + ppp / 27.0 > 0.0) {\n        float v2 = v1 * sqrt(3.0 / p2);\n        if (p < 0.0) roots[0] = sign(q) * cosh(acosh(v2 * -sign(q)) / 3.0);\n        else roots[0] = sinh(asinh(v2) / 3.0);\n        roots[0] = -2.0 * sqrt(p2 / 3.0) * roots[0] - inflect;\n    }\n\n    else {\n        float ac = acos(v1 * sqrt(-3.0 / p)) / 3.0; // 0π/3,       2π/3,               4π/3\n        roots = vec4(2.0 * sqrt(-p / 3.0) * cos(vec3(ac, ac - 2.09439510239, ac - 4.18879020479)) - inflect, 3.0);\n    }\n\n    return roots;\n}\n\nvec4 solveCubic2(in float a, in float b, in float c, in float d) {\n    vec4 roots = solveCubic(d, c, b, a);\n    roots.x = 1.0 / roots.x;\n    if (roots.w > 1.0) roots.yz = 1.0 / roots.yz;\n    return roots;\n}\n\n// Intersection\nvec4 iTrilinearIsoSurf(in vec3 ro, in vec3 rd, in float a, in float b, in float c, in float d, in float e, in float f, in float g, in float h) {\n    vec4 ka = vec4(-a + b + c - d + e - f - g + h, a - b - c + d, a - b - e + f, a - c - e + g);\n    vec3 kb = vec3(b, c, e) - a;\n\n    vec3 oo = ro.xxy * ro.yzz;\n    vec3 dd = rd.xxy * rd.yzz;\n\n    float t3 = ka.x * rd.x * rd.y * rd.z;\n    float t2 = dot(ro.zyx, dd) * ka.x + dot(ka.yzw, dd);\n    float t1 = dot(ka, vec4(dot(oo, rd.zyx), dot(ro.xy, rd.yx), dot(ro.xz, rd.zx), dot(ro.yz, rd.zy))) + dot(kb, rd);\n    float t0 = ka.x * ro.x * ro.y * ro.z + dot(ka.yzw, oo) + dot(kb, ro) + a;\n\n    return solveCubic2(t3, t2, t1, t0);\n}\n\n// Normal\nvec3 nTrilinearIsoSurf(in vec3 p, in float a, in float b, in float c, in float d, in float e, in float f, in float g, in float h) {\n    vec4 k = vec4(-a + b + c - d + e - f - g + h, a - b - c + d, a - b - e + f, a - c - e + g);\n    return normalize(k.x * p.yxx * p.zzy + k.yyz * p.yxx + k.zww * p.zzy + vec3(b, c, e) - a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = ivec2(iMouse) == ivec2(0) ? vec2(0.0) : (iMouse.xy - center) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 7.0);//1.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Environment map\n    fragColor = texture(iChannel0, rd);\n\n    float a = sin(time * 0.5) * 2.0;\n    float b = -cos(time);\n    float c = cos(time * 1.25);\n    float d = sin(time * 2.0) * 0.5;\n    float e = cos(time * 0.5) * 1.5;\n    float f = -sin(time * 1.5) * 0.25;\n    float g = sin(time);\n    float h = cos(time) * 0.75;\n\n    // Render\n    vec4 hit = iTrilinearIsoSurf(ro + 0.5, rd, a, b, c, d, e, f, g, h);\n\n    vec3 hitPos;\n    float t = -1.0;\n    for (int n=0; n < int(hit.w); n++) {\n        vec3 posCandid = ro + rd * hit[n];\n        float tCandid = hit[n];\n        if (tCandid > 0.0 && (t < 0.0 ? true : tCandid < t) && all(lessThan(abs(posCandid), vec3(2.0)))) {\n            hitPos = posCandid;\n            t = tCandid;\n        }\n    }\n\n    if (t > 0.0) {\n        vec3 hitPos = ro + rd * t;\n        vec3 n = nTrilinearIsoSurf(hitPos + 0.5, a, b, c, d, e, f, g, h);\n        float diff = abs(dot(n, -rd));\n        float checkers = mod(dot(floor(hitPos), vec3(1.0)), 2.0);\n        fragColor = mix(vec4(0.5 + 0.5 * checkers, 0.0, 0.0, 1.0), texture(iChannel0, reflect(-rd, n)), 0.25);\n        fragColor.rgb *= diff;\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.75));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}