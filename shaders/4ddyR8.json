{
    "Shader": {
        "info": {
            "date": "1517950218",
            "description": "Adapted an old shader of mine to seamlessly tile making a 2001 style monolith flight.\nOrganised chaos, is fun!",
            "flags": 96,
            "hasliked": 0,
            "id": "4ddyR8",
            "likes": 30,
            "name": "It's full of stars...",
            "published": 3,
            "tags": [
                "2d",
                "space",
                "2001",
                "odyssey",
                "monolith"
            ],
            "usePreview": 1,
            "username": "Dave_Hoskins",
            "viewed": 1587
        },
        "renderpass": [
            {
                "code": "// It's full of stars...\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://www.shadertoy.com/view/4ddyR8\n// By David Hoskins.\n\n//#define SEEIN2D \n\nvec3 get2Dplanes(vec2 uv, vec2 p)\n{\n\n\tfloat f  = 1., g =f;    \n\tfor( int i = 0; i < 25; i++) \n\t{\n\t\tfloat d = dot(uv,uv);\n\t\tuv = (vec2( uv.x, -uv.y ) / d) + p; \n\t\tuv.x =  abs(uv.x);\n\t\tf = max( f, (dot(uv-p,uv*.5 -p) ));\n\t\tg = min( g, sin(dot(uv+p,uv+p))+1.);\n\t}\n\tf = abs(-log(f/8.)/3.5);\n\tg = abs(-log(g/5.)/5.3);\n    g *= g;\n\tvec3 col = vec3(min(vec3(g, g*f, f), 1.0));\n    col *= col;\n\n    //  Fade in...\n    return max(vec3(col-smoothstep(4.0, 0.0, iTime)), 0.0);\n    \n}\n\n// Design function...\nvec2 choose(float i)\n{\n    float g = i*2.12;\n    vec2 p;\n    \n\tp.x = -.2+sin(g * .3)*sin(g * .17) * 4. + sin(g * .3);\n\tp.y = (1.0-cos(g * .632))*sin(g * .131)*1.2-cos(g * .3);\n\n\treturn p;    \n}\n\nvec3 starPlane(vec2 uv)\n{\n\n\n\tvec3 col, col2;\n    uv*= .25;\n\n    float i = floor(uv.y);\n    uv.y \t= fract(uv.y);\n    vec2 p = choose(i);\n    \n    col = get2Dplanes(uv*2., p);\n    p = choose(i-1.);\n   \tcol2 = get2Dplanes(uv*2.+vec2(0,2), p);\n    col = mix (col2, col, uv.y);\n    return col;\n}    \n\nvoid mainImage( out vec4 fragColor, in vec2 cor )\n{\n    vec3 col = vec3(0);\n    vec3 outCol = vec3(0.0);\n#ifdef SEEIN2D\n    vec2 uv = ((-iResolution.x+2.0 * cor.xy) / iResolution.y);\n\toutCol = starPlane(uv+vec2(0.0,iTime));\n\n#else\n    \n    if (clipTime(iTime))\n    {\n        outCol = texelFetch(iChannel1, ivec2(cor), 0).xyz;\n    }else\n    {\n    \n    // Sub-sampling...\n    for (float ax = 0.0; ax < 1.0; ax+=.5)\n    {\n    for (float ay = 0.0; ay < 1.0; ay+=.5)\n    {\n        vec2 uv = ((-iResolution.xy+2.0 * (cor + vec2(ax, ay))) / iResolution.y);\n\n        vec3 dir = normalize(vec3(uv, 1.8-dot(uv,uv)*.25));\n            if (iTime < 10.) dir.xy = dir.yx;\n        \n        // Mirror the horizon, shifted a little bit to remove some horizon aliasing...\n        float f = abs(dir.y);\n        \n        float d = .25/f;\n        uv = vec2(0, iTime*6.) + dir.xz* d;\n\n        // Two distinct images for upper and lower...\n        if (dir.y < 0.)\n            col = starPlane(uv-2.3);\n        else\n            col = starPlane(uv+3.3);\n\n        col += col;\n        if (uv.y < -iTime+4.) col = vec3(0);\n        col *= smoothstep(0.0, .025, abs(dir.y));\n        col *= smoothstep(1.75, .5, (abs(dir.y)+abs(dir.x)));\n        \n        outCol += col;\n    }\n    }\n           outCol /= 4.0;\n    }\n\t               \n\n#endif\n\n    fragColor = vec4((outCol),1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 18312,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/nam-phan-17/david-julyan-scores-the"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://www.shadertoy.com/view/4ddyR8\n// By David Hoskins.\n\n\n// Add noise to the triangles to make it a little clearer...\n#define ADD_DITHER\n\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define randValues vec2(0.01, 0.005)\n\nvec4 col = vec4(0.0);\nvec2 uv;\nconst vec4 INV_SCALE  = vec4(.96, 1.1, .96,1.1)/256.0;\nvec2 fcoord;\n\n//========================================================================\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec2 noise(float p)\n{\n\tfloat f = fract(p);\n    p = floor(p);\n\tf = f*f*(3.0-2.0*f);\n    return mix(hash21(p), hash21(p+1.0), f)-.5;\n}\n\nfloat noise1(float p)\n{\n\tfloat f = fract(p);\n    p = floor(p);\n\tf = f*f*(3.0-2.0*f);\n    return mix(hash11(p), hash11(p+1.0), f)-.5;\n}\n\n  \n\n\n//========================================================================\nvec4 unpackCoord(uint u) \n{\n    return vec4(u & 255U, (u>>8U)&255U, (u>>16U)&255U, (u>>24U) & 255U) * INV_SCALE;\n}\n\n//========================================================================\nvec4 unpackColour(uint u) \n{\n   return vec4(u & 255U, (u>>8U)&255U, (u>>16U)&255U, (u>>24U) & 255U) / 255.;\n}\n\n//========================================================================\nvoid Tri(uint pA, uint pB, uint pCol)\n{\n\tvec2 pos = uv;\n\tvec4 u1 = unpackCoord(pA);\n    vec4 u2 = unpackCoord(pB);\n\tvec2 a = u1.xy;\n    vec2 b = u1.zw;\n    vec2 c = u2.xy;\n\n#ifdef ADD_DITHER\n\tpos += hash22(fcoord) * randValues.x - randValues.y;\n#endif\n\n\t// Triangle test...\n\tvec2 as = pos-a;\n\tvec2 bs = pos-b;\n\tif  ( (b.x-a.x)*as.y-(b.y-a.y)*as.x > 0.0 &&\n\t\t  (a.x-c.x)*as.y-(a.y-c.y)*as.x > 0.0 &&\n    \t  (c.x-b.x)*bs.y-(c.y-b.y)*bs.x > 0.0)\n\t{\n\t\tvec4 c1 = unpackColour(pCol);\n\t\t\n\t\t\tcol.xyz = mix (col.xyz, c1.xyz, c1.w);\n\t}\n}\nmat2 rot2D(float a)\n{\n    return mat2(sin(a), cos(a), -cos(a), sin(a));\n}\n//========================================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if (!clipTime(iTime)) discard;\n    // I know, right?.... :)\n    fcoord = fragCoord;\n\tuv = fragCoord.xy / iResolution.y;\n    uv +=vec2(-0.15, .07);\n\t\n\n\t\n    float sh = iTime+8.;\n    sh *= (sh+7.);\n    \n    uv+= noise(sh)*vec2(.05, .02);\n    \n    float r = noise1(sh*.2+9.);\n    vec2 cen = vec2(.6, -3.);\n    uv = rot2D(r*.03+3.12/2.) * (uv-cen)+cen;\n    uv.x *=.7 ;\n\t\n\tTri(2429117142U, 5928U,847539000U);\n\tTri(795023407U, 8498U,992585213U);\n\tTri(1640879957U, 61599U,959929590U);\n\tTri(1794081574U, 56285U,978681085U);\n\tTri(2308205710U, 31272U,990922744U);\n\tTri(471606045U, 29035U,967370237U);\n\tTri(4230610792U, 28143U,508957420U);\n\tTri(900125877U, 44243U,1002240508U);\n\tTri(3837804473U, 26518U,939124989U);\n\tTri(3384053884U, 54957U,1006501121U);\n\tTri(690107177U, 5945U,963489789U);\n\tTri(4285071235U, 60536U,998793679U);\n\tTri(878584137U, 13913U,1004926454U);\n\tTri(2653207589U, 26296U,716606901U);\n\tTri(1028264750U, 25929U,1002295293U);\n\tTri(1253486472U, 41666U,1001258750U);\n\tTri(3949713882U, 20345U,604585208U);\n\tTri(1787328624U, 35978U,1005297918U);\n\tTri(3011422913U, 20919U,1004666366U);\n\tTri(2329790504U, 54072U,736359152U);\n\tTri(4225912063U, 63181U,842600460U);\n\tTri(2430165157U, 44947U,989593341U);\n\tTri(1287097750U, 50881U,989265662U);\n\tTri(1160263695U, 28708U,973080062U);\n\tTri(2074432441U, 26514U,797180667U);\n\tTri(2700330123U, 59887U,545523225U);\n\tTri(4199131589U, 21177U,999030013U);\n\tTri(1233536406U, 15758U,913195499U);\n\tTri(4283039669U, 19155U,989782269U);\n\tTri(3533325627U, 24633U,991291134U);\n\tTri(3278150346U, 25268U,989593341U);\n\tTri(1842903272U, 15065U,997131781U);\n\tTri(773054267U, 37032U,520618616U);\n\tTri(2636558119U, 42799U,1006553337U);\n\tTri(599667643U, 8652U,984807973U);\n\tTri(1697878837U, 49511U,989789678U);\n\tTri(2133512360U, 25164U,998212093U);\n\tTri(3921267926U, 52158U,995935485U);\n\tTri(1131699863U, 13959U,602664972U);\n\tTri(575616848U, 13915U,1006566910U);\n\tTri(2660480709U, 20918U,1006435837U);\n\tTri(3513702304U, 22663U,997626110U);\n\tTri(416332474U, 40950U,908591711U);\n\tTri(3520506099U, 38103U,859847519U);\n\tTri(2182876652U, 3207U,976027650U);\n\tTri(3837910738U, 32468U,977097982U);\n\tTri(4280745781U, 37946U,946490608U);\n\tTri(3359554925U, 42355U,950092545U);\n\tTri(1586717317U, 30895U,965829366U);\n\tTri(3771909336U, 52163U,990552829U);\n\tTri(1466452814U, 34405U,951766769U);\n\tTri(3210750263U, 37671U,822013481U);\n\tTri(3500408728U, 65458U,954434426U);\n\tTri(4242042863U, 30250U,633453054U);\n\tTri(2457497749U, 28786U,984265726U);\n\tTri(739921681U, 26665U,990446077U);\n\tTri(1893884636U, 28313U,615575542U);\n\tTri(2840306286U, 16188U,990444797U);\n\tTri(1245666104U, 49542U,1004338686U);\n\tTri(1606171564U, 57222U,990179325U);\n\tTri(505165356U, 10539U,1006566909U);\n\tTri(709318968U, 30795U,996144637U);\n\tTri(2110503616U, 35291U,1001217278U);\n\tTri(2771240523U, 43076U,998308093U);\n\tTri(1477535533U, 10520U,989987070U);\n\tTri(4283018888U, 64063U,978146399U);\n\tTri(1253196202U, 26272U,1005184509U);\n\tTri(740050959U, 27942U,990315006U);\n\tTri(743058479U, 14154U,988450094U);\n\tTri(4270508492U, 35273U,989921282U);\n\tTri(1662268449U, 12309U,989856510U);\n\tTri(1512845585U, 27936U,989855998U);\n\tTri(1213688973U, 4949U,990326784U);\n\tTri(1901508063U, 30191U,532675836U);\n\tTri(2861493601U, 60785U,820112602U);\n\tTri(649821880U, 7114U,639982851U);\n\tTri(3274494768U, 56278U,942756281U);\n\tTri(1111418981U, 57752U,957378558U);\n\tTri(4291259697U, 65411U,819707642U);\n\tTri(514218927U, 9913U,995633155U);\n\tTri(934592199U, 58843U,738472306U);\n\tTri(2861001389U, 30591U,860756477U);\n\tTri(4289527761U, 55741U,995562563U);\n\tTri(1881166124U, 15374U,989921790U);\n\tTri(341020510U, 8413U,562189569U);\n\tTri(2686681696U, 21572U,989462270U);\n\tTri(4118828432U, 22648U,970180861U);\n\tTri(3010347585U, 24378U,989920766U);\n\tTri(2532214255U, 30400U,996439024U);\n\tTri(479405699U, 11413U,1005452837U);\n\tTri(691607349U, 7214U,1003288830U);\n\tTri(985688502U, 28665U,991559680U);\n\tTri(2791590998U, 38729U,987561725U);\n\tTri(4268269505U, 22709U,972946941U);\n\tTri(936984143U, 63445U,519827196U);\n\tTri(3802847668U, 53656U,1006236157U);\n\tTri(1775770569U, 28619U,993527038U);\n\tTri(927187390U, 37050U,587071229U);\n\tTri(1763403050U, 16676U,990643966U);\n\tTri(1899271224U, 31844U,1006501373U);\n\tTri(2103338574U, 50244U,1006567165U);\n\tTri(2762206076U, 61604U,973100449U);\n\tTri(1286004900U, 35779U,956235261U);\n\tTri(2019125121U, 12375U,993078819U);\n\tTri(63639035U, 1271U,705167517U);\n\tTri(442121046U, 6509U,912547349U);\n\tTri(3634162601U, 57800U,992215046U);\n\tTri(3953542911U, 55447U,806817793U);\n\tTri(1356080582U, 28369U,995164926U);\n\tTri(1966120529U, 25457U,1006501373U);\n\tTri(4082218344U, 16896U,989987073U);\n\tTri(2637461035U, 39460U,873335753U);\n\tTri(1482357943U, 64988U,739970826U);\n\tTri(527969654U, 12450U,963528192U);\n\tTri(3040651054U, 57651U,943166389U);\n\tTri(825715347U, 14995U,980114946U);\n\tTri(1814995017U, 44924U,989789950U);\n\tTri(3242425952U, 19773U,987758077U);\n\tTri(441668663U, 45926U,792723198U);\n\tTri(3529034554U, 54855U,1001637113U);\n\tTri(1054946246U, 27344U,991691517U);\n\tTri(740117774U, 28203U,989922045U);\n\tTri(3296310845U, 52559U,698046535U);\n\tTri(2520425836U, 28469U,1006501374U);\n\tTri(1759213243U, 57817U,928871927U);\n\tTri(4272287154U, 52605U,751551935U);\n\tTri(558785107U, 13918U,897360891U);\n\tTri(3479958937U, 13776U,518389502U);\n\tTri(1790405778U, 27112U,995533607U);\n\tTri(1221406931U, 14021U,997524222U);\n\tTri(47679888U, 4581U,990773504U);\n\tTri(2864053100U, 64121U,534700797U);\n\tTri(1537368734U, 25003U,1006501623U);\n\tTri(1733462887U, 13688U,995512066U);\n\tTri(3536768470U, 52417U,1006436094U);\n\tTri(2983437015U, 43721U,1005256446U);\n\tTri(3077287264U, 50773U,983480497U);\n\tTri(1701531994U, 27758U,970708979U);\n\tTri(1750115454U, 11374U,991760641U);\n\tTri(1731957248U, 31774U,982626326U);\n\tTri(625367608U, 33616U,990051837U);\n\tTri(2774848043U, 51802U,620554621U);\n\tTri(509232694U, 25178U,661013245U);\n\tTri(3361315676U, 39764U,993396481U);\n\tTri(402977U, 50066U,989922625U);\n\tTri(3425295965U, 44584U,541750268U);\n\tTri(3148070803U, 54450U,1006566877U);\n\tTri(3079192484U, 43424U,985175810U);\n\tTri(562392526U, 17868U,991560194U);\n\tTri(2348356498U, 6001U,757927680U);\n\tTri(4035504298U, 15762U,788529530U);\n\tTri(2571445236U, 7423U,995035646U);\n\tTri(2381477342U, 41150U,629576189U);\n\tTri(1835810713U, 14462U,814649618U);\n\tTri(309864741U, 10167U,993212929U);\n\tTri(1127839834U, 33898U,822084093U);\n\tTri(3149513898U, 54447U,687067435U);\n\tTri(2778632102U, 35734U,992740347U);\n\tTri(1716601440U, 10061U,944134527U);\n\tTri(2307318311U, 61232U,574175746U);\n\tTri(3948974830U, 33261U,860973821U);\n\tTri(4208114729U, 64839U,915369379U);\n\tTri(1245630765U, 41320U,889061117U);\n\tTri(3766020154U, 64617U,1003134649U);\n\tTri(3381507496U, 23705U,587794942U);\n\tTri(78398118U, 19918U,974062082U);\n\tTri(3785021371U, 50334U,839124067U);\n\tTri(3276063426U, 40774U,600681217U);\n\tTri(4225207027U, 65472U,993600577U);\n\tTri(3015104161U, 55488U,975053313U);\n\tTri(4241990760U, 64655U,547793902U);\n\tTri(3755737028U, 65495U,877605571U);\n\tTri(546269547U, 52026U,973146116U);\n\tTri(975077188U, 31567U,991560192U);\n\tTri(2485713703U, 44853U,760768714U);\n\tTri(1975531456U, 4515U,678253829U);\n\tTri(3626044745U, 12586U,990445570U);\n\tTri(2422255223U, 2906U,993736456U);\n\tTri(1438158119U, 46038U,553582333U);\n\tTri(864374670U, 23498U,515718212U);\n\tTri(2522574921U, 19494U,989987082U);\n\tTri(1145843523U, 26676U,996644094U);\n\tTri(3259608157U, 30252U,1001938177U);\n\tTri(4147836376U, 54115U,765760422U);\n\tTri(1618436462U, 39507U,977682607U);\n\tTri(3124480422U, 48041U,535022284U);\n\tTri(4002015527U, 62782U,778781780U);\n\tTri(4292619583U, 65333U,685296126U);\n\tTri(2320409210U, 32666U,995244637U);\n\tTri(1787646651U, 21115U,251287806U);\n\tTri(897018266U, 14259U,995703300U);\n\tTri(2497576945U, 8925U,990576641U);\n\tTri(2296684013U, 27115U,986185213U);\n\tTri(1061061941U, 43369U,754908926U);\n\tTri(3441666136U, 9795U,738065918U);\n\tTri(3284511925U, 54193U,687797884U);\n\tTri(1138626815U, 6058U,991297538U);\n\tTri(3515073881U, 64041U,607670653U);\n\tTri(3477645811U, 43403U,167837943U);\n\tTri(1370910647U, 19904U,892483529U);\n\tTri(2686698542U, 38964U,832151671U);\n\tTri(1855348655U, 13441U,998263081U);\n\tTri(816317656U, 900U,559809282U);\n\tTri(2586424615U, 45483U,945641610U);\n\tTri(8140319U, 21020U,989921538U);\n\tTri(4249459233U, 53534U,893921295U);\n\tTri(4069035934U, 61530U,1000714224U);\n\tTri(4187999629U, 60988U,748130483U);\n\tTri(71256106U, 896U,991822336U);\n\tTri(2912067520U, 26551U,1006567165U);\n\tTri(3005665353U, 46401U,889655375U);\n\tTri(1287024521U, 28328U,957546754U);\n\tTri(4206624729U, 48868U,991236899U);\n\tTri(926299735U, 3640U,990648065U);\n\tTri(59061287U, 12451U,842994177U);\n\tTri(4289128645U, 59259U,535080117U);\n\tTri(1532909000U, 9921U,995965184U);\n\tTri(2112906216U, 39912U,999073534U);\n\tTri(1719228792U, 26732U,901482424U);\n\tTri(676285018U, 11868U,561425914U);\n\tTri(1219394127U, 28364U,184879095U);\n\tTri(3008280394U, 50002U,1006567089U);\n\tTri(2925577310U, 48038U,184877595U);\n\tTri(2187339215U, 4751U,993798144U);\n\tTri(1118981028U, 47756U,931490477U);\n\tTri(2216675665U, 45397U,521672448U);\n\tTri(1636074586U, 30339U,641159898U);\n\tTri(3389668765U, 52231U,521805601U);\n\tTri(2260775102U, 39394U,980572244U);\n\tTri(2237629148U, 33487U,989724414U);\n\tTri(3668049877U, 53476U,892613188U);\n\tTri(4283808291U, 65317U,991035685U);\n\tTri(3503606730U, 53957U,1006501629U);\n\tTri(3060425279U, 20775U,908794137U);\n\tTri(639777359U, 2843U,989987330U);\n\tTri(1277814052U, 2630U,976695296U);\n\tTri(3173112425U, 32296U,925443647U);\n\tTri(768219449U, 11325U,527390978U);\n\tTri(459020323U, 6173U,687998424U);\n\tTri(982715772U, 53321U,504693263U);\n\tTri(4096261986U, 48934U,895769701U);\n\tTri(1548336548U, 19017U,572719391U);\n\tTri(2096424137U, 65492U,976362826U);\n\tTri(3651652549U, 26929U,524750866U);\n\tTri(2490095456U, 37271U,979136932U);\n\tTri(2933895358U, 55772U,977487235U);\n\tTri(3560037696U, 52536U,923996216U);\n\tTri(1670658232U, 6063U,893859086U);\n\tTri(2830555103U, 46306U,996826997U);\n\tTri(3738227663U, 55969U,918400211U);\n\tTri(3547056485U, 55117U,997751474U);\n\tTri(3663062825U, 65382U,267974811U);\n\tTri(2192225145U, 40355U,994535161U);\n\tTri(3262158754U, 25947U,914127496U);\n\tTri(440901154U, 43308U,994265424U);\n\n\n    float n = (1.2+sin(iTime*.2-2.)*.4);\n    n += sin(iTime*10.)*.2;\n\tfragColor = vec4(min(col.xyz* n, 1.0), 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool clipTime(float t)\n{\n   return (t >5.0 && t < 11. || t > 20. && t < 24.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}