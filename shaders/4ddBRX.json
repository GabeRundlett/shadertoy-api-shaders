{
    "Shader": {
        "info": {
            "date": "1526161373",
            "description": "It's raining pixels!\n\nWith a bit more thinking I could have done this (in this form) probably without buffers, but then again I was aiming for more elaborate particles at first",
            "flags": 32,
            "hasliked": 0,
            "id": "4ddBRX",
            "likes": 24,
            "name": "Pixeldripping",
            "published": 3,
            "tags": [
                "particles",
                "imageeffect",
                "trails",
                "pixelsfalling"
            ],
            "usePreview": 0,
            "username": "Wumpf",
            "viewed": 1850
        },
        "renderpass": [
            {
                "code": "#define NUM_PARTICLES 200\n#define PIXEL_SCALE_HALF 1.0\n\nvec2 uv;\nvec2 uvSquare;\n\nfloat drawParticle(vec3 particlePosVel)\n{\n    vec2 toParticle = (particlePosVel.xy - uv) * iResolution.xy;\n    vec2 toParticleAbs = abs(toParticle);\n    \n    bvec2 particleSquare = lessThan(toParticleAbs, vec2(PIXEL_SCALE_HALF));\n    \n    float particleness = float(all(particleSquare));\n    if(particleSquare.x && toParticle.y < 0.0)\n    {\n\t\tfloat trail = 700.* particlePosVel.z / (-toParticle.y);\n        particleness += min(trail, 1.0) * 0.8f;\n    }\n    \n    return particleness;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord/iResolution.xy;\n    \n  \tfragColor = texture(iChannel0, uv);\n    if(fragColor.a == 0.0)\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    \n    vec3 fallingPixels = vec3(0.0);\n    for (int i=0; i<NUM_PARTICLES; ++i)\n    {\n        vec3 particlePosVel = texelFetch(iChannel1, ivec2(i, 0), 0).xyz;\n        vec3 particleColor = texelFetch(iChannel1, ivec2(i, 1), 0).rgb;\n        fragColor.rgb = mix(fragColor.rgb, particleColor, drawParticle(particlePosVel));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define NUM_PARTICLES 200\n#define PIXEL_SCALE_HALF 1.0\n\nfloat rand(float n)\n{\n    return fract(sin(n) * 43758.5453123);\n}\nvec2 particleSpawnPos(int frame, int particleIdx)\n{\n    float seed = float(frame) + float(particleIdx) / float(NUM_PARTICLES);\n    vec2 pos;\n    pos.x = rand(seed);\n    pos.y = rand(pos.x + seed);\n    return floor(pos * iResolution.xy + vec2(0.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (iFrame < 10)\n    {\n        fragColor = texture(iChannel2, uv);\n        return;\n    }\n    \n    fragColor = texture(iChannel0, uv);\n    \n    for (int i=0; i<NUM_PARTICLES; ++i)\n    {\n        vec2 particlePos = texelFetch(iChannel1, ivec2(i, 0), 0).xy;\n        if(particlePos.y <= 0.0f) // Particle dies, so does a pixel in the background.\n        {\n            vec2 particleSpawnSite = particleSpawnPos(iFrame, i);\n            vec2 toSpawnSite = abs(particleSpawnSite - fragCoord);\n            if (all(lessThan(toSpawnSite, vec2(PIXEL_SCALE_HALF))) )\n            {\n                fragColor.a = 0.0; // Mask out via alpha, so next pass can still write\n                return;\n            }\n        }\n            \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define NUM_PARTICLES 200\n#define PIXEL_SCALE_HALF 1.0\n\nfloat rand(float n)\n{\n    return fract(sin(n) * 43758.5453123);\n}\nvec2 particleSpawnPos(int frame, int particleIdx)\n{\n    float seed = float(frame) + float(particleIdx) / float(NUM_PARTICLES);\n    vec2 pos;\n    pos.x = rand(seed);\n    pos.y = rand(pos.x + seed);\n    return floor(pos * iResolution.xy + vec2(0.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 10)\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    \n    ivec2 fragCoordInt = ivec2(fragCoord.x, fragCoord.y);\n    if(fragCoordInt.y > 2 || fragCoordInt.x >= NUM_PARTICLES)\n    \treturn;\n\n    int particleIdx = fragCoordInt.x;\n    \n    vec3 particlePos =   texelFetch(iChannel0, ivec2(particleIdx, 0), 0).xyz;\n    vec3 particleColor = texelFetch(iChannel0, ivec2(particleIdx, 1), 0).rgb;\n    \n    // just do all the simulation here and decide what we're actually writing in the end - easier that way\n    \n    // Particle dead, respawn new\n    if(particlePos.y <= 0.0f)\n    {\n\t\tparticlePos.xy = particleSpawnPos(iFrame, particleIdx) / iResolution.xy;\n        particlePos.z = 0.0;\n        // Would actually like average color of \"pixel\" area, but sampled pos should do as well..\n        particleColor = textureLod(iChannel1, particlePos.xy, 0.0).rgb;\n    }\n    // Animate particle, could \n    else\n    {\n        particlePos.z += iTimeDelta*0.008;\n\t\tparticlePos.y -= particlePos.z; // todo: square speed, falling and stuff.\n    }\n    \n    \n    // We are a pos pixel!\n    if(fragCoordInt.y == 0)\n        fragColor = vec4(particlePos, 1.0);\n    // We are a color pixel\n    else\n        fragColor = vec4(particleColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}