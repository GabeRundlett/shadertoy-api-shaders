{
    "Shader": {
        "info": {
            "date": "1696847539",
            "description": "Hexagonal tilings of the third kind. See code for more details & for controls (a,c,d,g,x,z,mouse,up,down).\n\nSee: [url]https://en.wikipedia.org/wiki/Hexagonal_tiling#Monohedral_convex_hexagonal_tilings[/url]",
            "flags": 48,
            "hasliked": 0,
            "id": "Dt3GzB",
            "likes": 27,
            "name": "Type 3 Hexagonal Tilings",
            "published": 3,
            "tags": [
                "deformation",
                "hexagon",
                "tilings",
                "parquet"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "// Type 3 Hexagonal Tilings\n//\n// There are three types of hexagonal tile that tile the plane\n// isohedrally (every tile vertex is the same). Type 3 is based\n// on a hexagon grid and is symmetric under 120Â° rotations. The\n// tiling is essentially a (3,6) irregular snub dual, with a\n// control vertex for each rhomoboidal fundamental region with a line\n// from the control point to 3 of the vertices of the fundamental\n// region. Rotational symmetry then does the rest.\n//\n// Easier to see than to explain - 'g' shows underlying grid, 'z' \n// zooms in a little.\n//\n// Moving the control point as we go across the screen produces\n// a parquet deformation effect. The default vertex position is\n// either set automatically in animation mode, or can be set by the\n// mouse. Note that some mouse positions can result in incomplete\n// drawing of the tiling.\n//\n// <mouse>: if not in animation mode, click & drag control point\n// <up/down>: zoom in/out\n// a: toggle animation mode\n// c: toggle random coloring\n// d: toggle parquet deformation\n// g: show grid\n// x: show control point\n// z: zoom in\n\nint wind(vec2 p, vec2 q, vec2 r) {\n  // NR winding number computation, extending ray\n  // vertically, not that it matters much here.\n  q -= p; r -= p; // Relative to p\n  float t = determinant(mat2(q,r));\n  if (q.x <= 0.0) {\n    if (r.x > 0.0 && t > 0.0) return 1;\n  } else {\n    if (r.x <= 0.0 && t < 0.0) return -1;\n  }\n  return 0;\n}\n\nconst float X = 1.732050808; // sqrt(3)\nconst float Y = 0.577350269; // 1/sqrt(3)\nconst mat2 M = 0.5*mat2(1,-X,1,X);\nconst mat2 Minv = Y*mat2(X,X,-1,1);\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  setscale();\n  vec2 p = map(fragCoord);\n  vec2 p0 = p;\n  float px = 1.4*2.0*scale/iResolution.y;\n  p.x += 1.0;\n  p *= M; // Convert to square grid\n  ivec3 ix = ivec3(floor(p),0); // Remember cell in grid\n  p -= floor(p);\n  p *= Minv; // Back to triangles\n  p.x -= 1.0;\n\n  vec2 A = vec2(0,Y);\n  vec2 B = vec2(0,-Y);\n  vec2 C = vec2(1,0);\n  vec2 D = vec2(-1,0);\n  vec2 E = -vec2(1.0/3.0,0);\n  vec2 F = -E;\n  vec2 G = getselection(0);\n  if (!key(CHAR_A)) {\n    // Animation\n    vec2 q = 0.1*iTime*vec2(1,0.618);\n    //q += 0.01*p0;\n    q = 2.0*fract(q);\n    q = min(q,2.0-q);\n    q *= Minv;\n    q.x -= 1.0;\n    G = q;\n  }\n  if (!key(CHAR_D)) G += 0.01*p0*Minv;\n  vec2 H = E+rotate(G-E,TWOPI/3.0);\n  vec2 I = E+rotate(G-E,2.0*TWOPI/3.0);\n  vec2 J = F+rotate(G-F,TWOPI/3.0);\n  vec2 K = F+rotate(G-F,2.0*TWOPI/3.0);\n  vec2 O = F+vec2(-1,Y);\n  vec2 M = vec2(1,-1)*O;\n  vec2 Q = -O;\n  vec2 S = -M;\n  \n  int k;\n  k = wind(p,D,I)+wind(p,I,E)+wind(p,E,H)+wind(p,H,O)+wind(p,O,D);\n  if (k > 0) { ix.z = 1; }\n  k = wind(p,O,H)+wind(p,H,A)+wind(p,A,O);\n  if (k > 0) { ix.x--; ix.z = 2; }\n  k = wind(p,A,K)+wind(p,K,S)+wind(p,S,A);\n  if (k > 0) { ix.y++; ix.z = 1; }\n  k = wind(p,S,K)+wind(p,K,F)+wind(p,F,J)+wind(p,J,C);\n  if (k > 0) { ix.z = 2; }\n  k = wind(p,C,J)+wind(p,J,Q)+wind(p,Q,C);\n  if (k > 0) { ix.x++; }\n  k = wind(p,Q,J)+wind(p,J,F)+wind(p,F,G)+wind(p,G,B)+wind(p,B,Q);\n  if (k > 0) { ix.x++; ix.z = 1; }\n  k = wind(p,B,G)+wind(p,G,E)+wind(p,E,I)+wind(p,I,M)+wind(p,M,B);\n  if (k > 0) { ix.y--; ix.z = 2; }\n  k = wind(p,M,I)+wind(p,I,D)+wind(p,D,M);\n  if (k > 0) { ix.y--; }\n  vec3 col = vec3(1,1,0.8);\n  if (!key(CHAR_C)) col = hsv2rgb(rand(ix),0.5,0.8);\n\n  float d = 1e8; \n  d = min(d,segment(p,B,G));\n  d = min(d,segment(p,C,J));\n  d = min(d,segment(p,D,I));\n  d = min(d,segment(p,E,G));\n  d = min(d,segment(p,E,H));\n  d = min(d,segment(p,E,I));\n  d = min(d,segment(p,F,G));\n  d = min(d,segment(p,F,K));\n  d = min(d,segment(p,F,J));\n  d = min(d,segment(p,A,K));\n  d = min(d,segment(p,A,H));\n  d = min(d,segment(p,H,O));\n  d = min(d,segment(p,I,M));\n  d = min(d,segment(p,J,Q));\n  d = min(d,segment(p,K,S));\n\n  // Lines for G outside the rhombus\n  // This also needs extra colouring.\n  d = min(d,segment(p,S,C+G-B));\n  d = min(d,segment(p,S+F-E,C+G-B));\n  d = min(d,segment(p,Q,Q+I-E));\n  d = min(d,segment(p,Q+F-S,Q+I-E));\n  \n  // Next six just fill some potential gaps\n  d = min(d,segment(p,B,B+rotate(G-B,TWOPI/3.0)));\n  d = min(d,segment(p,B,B+rotate(G-B,2.0*TWOPI/3.0)));\n  d = min(d,segment(p,C,C+rotate(J-C,TWOPI/3.0)));\n  d = min(d,segment(p,C,C+rotate(J-C,2.0*TWOPI/3.0)));\n  d = min(d,segment(p,D,D+rotate(I-D,TWOPI/3.0)));\n  d = min(d,segment(p,D,D+rotate(I-D,2.0*TWOPI/3.0)));\n  col *= smoothstep(0.0,px,d-0.01);\n  if (key(CHAR_G)) {\n    // Show grid\n    d = 1e8;\n    d = min(d,line(p,A,C));\n    d = min(d,line(p,C,B));\n    d = min(d,line(p,B,D));\n    d = min(d,line(p,D,A));\n    col *= smoothstep(0.0,px,d);\n  }\n  if (!key(CHAR_X)) {\n    // Show control point\n    float d = distance(p0,G);\n    col *= smoothstep(0.0,px,d-0.05);\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nfloat scale = 1.5;\nconst float PI = 3.1415927;\nconst float TWOPI = 2.0*PI;\n\n#define map(screen) (scale*(2.0*screen-iResolution.xy)/iResolution.y)\n\nint nselections = 1;\nvec2 initselection(int i) {\n  if (i == 0) return vec2(0.0);\n  return vec2(0);\n}\n\n#define getselection(i) (texelFetch(iChannel2,ivec2((i)+1,3),0).xy)\n#define setscale() \\\n  (scale *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP))), \\\n   scale *= key(CHAR_Z) ? 2.0 : 4.0)\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);       \n  return v * mix(vec3(1.0),rgb,s);\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  return length(p-b*h);\n}\n\nint idiv(int a,int b) {\n  return a >= 0 ? a/b : -((-a+b-1)/b);\n}\n\nint imod(int a, int b) {\n  int d = idiv(a,b);\n  return a-d*b;\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x += 0x12345678u;\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat rand(ivec2 p) {\n  uint h = ihash(uint(p.x)^ihash(uint(p.y)));\n  return float(h)/exp2(32.0);\n}\n\nfloat rand(ivec3 p) {\n  uint h = ihash(uint(p.x));\n  h = ihash(uint(p.y)^h);\n  h = ihash(uint(p.z)^h);\n  return float(h)/exp2(32.0);\n}\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n\nconst int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\n// const int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\n// const int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\nconst int CHAR_K = 75;\n// const int CHAR_L = 76;\nconst int CHAR_M = 77;\n// const int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  setscale();\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2 && key(i)) {\n    // Record mouse position when key pressed\n    t = vec4(iMouse.xy,0,iTime);\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse now down\n        for (int i = nselections; i >= 1; i--) {\n          // Select topmost item (assume drawn 1..N)\n          vec2 p = texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < scale*0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        // Clear selection if mouse up.\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0 || t.z != 1234.0) {\n      t.xyz = vec3(initselection(i-1),1234); // Current coordinates\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i && iMouse.z > 0.0) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}