{
    "Shader": {
        "info": {
            "date": "1617374478",
            "description": "Use function to determine next spot to look and if that spot is lit then lit me too.",
            "flags": 32,
            "hasliked": 0,
            "id": "fdBGDW",
            "likes": 1,
            "name": "Trail 1.4",
            "published": 3,
            "tags": [
                "fractals",
                "buffer"
            ],
            "usePreview": 0,
            "username": "Leasel",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = SI(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 T(float x, float y)\n{\n    return vec2(x*x - y*y, 2.*x*y)*0.0001 + vec2(x,y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fgi )\n{\n    fgi -= iResolution.xy*0.5;\n    vec2 tfgi = T(fgi.x, fgi.y);\n    \n    fgi += iResolution.xy*0.5;\n    tfgi += iResolution.xy*0.5;\n    fragColor = vec4(SI(tfgi).x == 1. ? RCooling : SI(fgi).x);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nfloat Rand(float t)\n{\n    return fract(600.*(sin(mod(t, 50000.))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = distance(iMouse.xy, fragCoord) < 5. || Rand(fragCoord.x * fragCoord.y + iTime + iDate.w)-0.999 > 0.0008? vec4(1.) : SI(fragCoord)*Cooling;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SI(uv) texelFetch(iChannel0, ivec2(uv), 0)\n#define OI(uv) texelFetch(iChannel1, ivec2(uv), 0)\n#define S(uv) texelFetch(iChannel0, uv, 0)\n\n#define Cooling 0.95\n#define RCooling 1./Cooling",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}