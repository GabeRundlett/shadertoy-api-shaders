{
    "Shader": {
        "info": {
            "date": "1654320767",
            "description": "[url=https://www.shadertoy.com/view/NsVyRz]Apollonian Fractal[/url], but with DOF.\nThanks to coyote for trimming this down further",
            "flags": 96,
            "hasliked": 0,
            "id": "fdKcRz",
            "likes": 35,
            "name": "Space Station [494 chars]",
            "published": 3,
            "tags": [
                "fractal",
                "dof",
                "bokeh",
                "golf"
            ],
            "usePreview": 0,
            "username": "Xor",
            "viewed": 898
        },
        "renderpass": [
            {
                "code": "/*\n    \"Space Station\" by @XorDev\n    \n    310 char version: shadertoy.com/view/NsVyRz\n    Based on Shane's Apollonian Fractal: shadertoy.com/view/4d2BW1\n    \n    Twigl: bit.ly/3xgtDUD\n    -14 thanks to coyote\n    \n    <512 Chars playlist: shadertoy.com/playlist/N3SyzR\n*/\n//Bokeh pass\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Resolution, center coordinates and variable for iteration\n    vec2 r=iResolution.xy, u=(I+I-r).xx/2e3, i=r/r;\n    //Iterate with \"i\" approximating the sqrt of the number of iterations.\n    for(O-=O; i.x<16.; i+=1./i)\n        //Rotate sample point with golden angle\n        u *= mat2(0,.061,1.413, 0)-.737,\n        //Add sample to total (weighted towards brightness)\n        O += texture(iChannel0,I/r+u*i/r);\n    \n    //Compute average\n    O=sqrt(O)*.1;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 29079,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/1985music1985/scars?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n    \"Space Station\" by @XorDev\n    \n    Based on Shane's Apollonian Fractal: https://www.shadertoy.com/view/4d2BW1\n    \n    Twigl: https://bit.ly/3xgtDUD\n*/\nvoid mainImage(out vec4 O, vec2 I)\n{\n    float i=0.,e,j,s,t=iTime;\n    //Resolution for scaling\n    vec3 r = iResolution,\n    //Position and transformed vector\n    p = r-r,v;\n    \n    //Clear color\n    for(O-=O;\n\n        //Scroll forward\n        v = p+t/r,\n        \n        //Rotate view\n        v.xy *= mat2(sin(t*.1+vec4(0,11,33,0))),\n        //Center\n        v--,\n        i++<2e2;\n\n        \n        //Shadow tracing after 100 iterations\n        i>1e2 ?\n            //Step forward in vec3(1,1,1) direction\n            p += e+=1e-5,\n            //Add lighting\n            O += e\n        :\n            //Add fog and step forward\n            O+=vec4(5,6,9, p+=(vec3(I+I,r)-r)/r.x*e )/1e2*e\n    )\n    //Apollonian fractal\n    for(j=s=4.;j++<11.;e=length(v*=e)/s-p.z/4e2)\n            s*=e=1.5/dot(v=mod(--v,2.)-1.,v);\n    O=min(O*O*O,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}