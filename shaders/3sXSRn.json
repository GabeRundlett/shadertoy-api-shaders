{
    "Shader": {
        "info": {
            "date": "1550481804",
            "description": "Tiny ray tracer for demonstration",
            "flags": 0,
            "hasliked": 0,
            "id": "3sXSRn",
            "likes": 4,
            "name": "Tiny ray tracer",
            "published": 3,
            "tags": [
                "raytracer",
                "teaching"
            ],
            "usePreview": 0,
            "username": "koiava",
            "viewed": 356
        },
        "renderpass": [
            {
                "code": "struct Sphere { vec3 o; float r; };\t\t\t\t\t\t\t\t\t\t\t\t//define struct for a Sphere object\nstruct Ray { vec3 o; vec3 d; };\t\t\t\t\t\t\t\t\t\t\t\t\t//define struct for a ray\n\nbool intersectSphere(in Sphere s, in Ray r, out float t){\t\t\t\t\t\t//function calculates ray-sphere intersection\n    r.o -= s.o;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//move both sphere and ray to the origin\n    float a = 1., b = 2.*dot(r.o,r.d), c = dot(r.o,r.o) - s.r*s.r;\t\t\t\t//a, b, c coefficients of quadric aquation\n    float d = b*b-4.*a*c;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//discriminant of quadric aquation\n    if(d<=0.) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//we hit background\n        return false;\n    } else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//we hit sphere\n        float root0 = (-b - sqrt(d)) / 2.*a, root1 = (-b + sqrt(d)) / 2.*a;\t\t//roots of quadric aquation\n\t\tt = min(root0, root1);\t\t\t\t\t\t\t\t\t\t\t\t\t//we need closest hit\n        return true;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\t\t\t\t\t\t//we get fragment coordinate and we should set its color\n    vec2 uv = fragCoord/iResolution.xy-vec2(.5);\t\t\t\t\t\t\t\t//screen coordinate from [-0.5, 0.5] range\n    uv.x *= iResolution.x/iResolution.y;\t\t\t\t\t\t\t\t\t\t//take screen aspect ratio into account\n    Ray r = Ray(vec3(uv, 5.0), vec3(0.0, 0.0, -1.));\t\t\t\t\t\t\t//Ray origin and direction\n    Sphere s = Sphere(vec3(.0), 0.3);\t\t\t\t\t\t\t\t\t\t\t//radius of the sphere. origin is at 0\n\tfloat t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    if(!intersectSphere(s, r, t)) {\t\t\t\t\t\t\t\t\t\t\t\t//we hit background\n        fragColor = vec4(vec3(0.),1.);\n    } else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//we hit sphere\n        vec3 l = normalize(vec3(sin(iTime), 1.0, sin(iTime*1.2345)));\t\t\t//moving light direction\n        vec3 p = r.o+r.d*t, n = normalize(p-s.o);\t\t\t\t\t\t\t\t//intersection point and surface normal\n        vec3 lambert = vec3(.5, .5, .95) * (1.0/3.1415926);\t\t\t\t\t\t//lambertian reflection model and bit of ambient light\n        vec3 h = normalize(l + (-r.d));\t\t\t\t\t\t\t\t\t\t\t//half vector between light and view\n        float s = iMouse.x/64.0;\t\t\t\t\t\t\t\t\t\t\t\t//surface shininess parameter\n        vec3 blinn = vec3(pow(max(0.0, dot(n, h)), s));\t\t\t\t\t\t\t//Blinn-Phong specular reflection model\n        blinn *= (s + 2.0)/(8.0*3.14159265);\t\t\t\t\t\t\t\t\t//normalization factor\n        vec3 rad = (lambert + blinn) * max(0.0, dot(n, l)) * 2.0;\t\t\t\t\t\t//BRDF and cosine factor\n    \tfragColor = vec4(rad,1.);\t\t\t\t\t\t\t\t\t\t\t\t//store final color\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}