{
    "Shader": {
        "info": {
            "date": "1575195390",
            "description": "Glowy SDF with animated signed distance fields.",
            "flags": 0,
            "hasliked": 0,
            "id": "3sKXW3",
            "likes": 2,
            "name": "SDF: Cross",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "Spaxe",
            "viewed": 591
        },
        "renderpass": [
            {
                "code": "// thanks iq\nfloat sdX( in vec2 p, in float l, in float r )\n{\n    p = abs(p);\n    return length(p-clamp(p.x+p.y,0.0,l*1.414235)*0.5) - r;\n}\n\nfloat prettySDF ( float sdf, float animOffset ) {\n  float scale = 50.;\n  float boundary = 1. / scale;\n  float d = fract(animOffset) / scale;\n    \n  float sdf2;\n  if (sdf > 0.)\n  \tsdf2 = abs(sdf - d);\n  else if (sdf < 0.)\n    sdf2 = -abs(sdf - d);\n    \n  return\n    smoothstep(boundary, -boundary, abs(sdf)) +\n    step(-sdf, 0.) * smoothstep(1., 0., sdf2) * 0.5 -\n    step( sdf, 0.) * smoothstep(1., 0., sdf2) * 0.5 +\n    smoothstep(0., 1., fract(sdf2 / boundary)) * 0.1;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = uvCenter(fragCoord, iResolution.xy);\n    \n  float sdf = sdX(uv, 0.4, 0.1);\n    \n  sdf = prettySDF(sdf, iTime);\n  vec3 pos = rgb(248, 176, 48);  \n  vec3 c = max(sdf, 0.) * vec3(0.5) + -min(sdf, 0.) * pos;\n    \n  fragColor = vec4(c, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// returns uv with (0, 0) at the center with equal xy unit lengths\nvec2 uvCenter( vec2 coord, vec2 res )\n{\n  float minScreen = min(res.x, res.y);\n  float maxScreen = max(res.x, res.y);\n    \n  vec2 offset = vec2(res.x * 0.5, res.y * 0.5);    \n  return (coord.xy - offset) / minScreen;\n}\n\n// set rgb colour with 8-bit integers\nvec3 rgb ( int r, int g, int b ) {\n  return vec3(r, g, b) * 0.00392156863;\n}\n\n// rotate around z-axis\nmat2 rotate ( float a ) {\n  float r = radians(a);\n  float cosr = cos(r);\n  float sinr = sin(r);\n  return mat2(cosr, sinr,\n              -sinr, cosr);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}