{
    "Shader": {
        "info": {
            "date": "1656511724",
            "description": "camera:   left: flat perspective      right: anti-cylindrical perspective\n                key ↑↓ : opening           mouse.y:  focus distance ( better > .5 )\nscene:     top: straight ribbon        bottom: cylindrical ribbon    mid: cyl ribbon around (0,Z)",
            "flags": 48,
            "hasliked": 0,
            "id": "NdtBDN",
            "likes": 1,
            "name": "cameras: photo vs antipanoramic",
            "published": 3,
            "tags": [
                "projection",
                "perspective",
                "cameras",
                "cylindrical"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "// WIP. test of \"anti-panoramic\" camera, rotating around a fix LookAt at distance F\n// mid screen: horizontal cylinder + balls around (0,0,Z).\n// variant of panoramic camera https://shadertoy.com/view/ftffWN\n\n#define T(U)    ( V = smoothstep(0.,-.05,abs(fract(U)-.5) -.5 ),    \\\n                  vec4( texture(iChannel0, U).rgb * V.x*V.y,        \\\n                        smoothstep(0.,-1.5*fwidth(U).y, abs((U).y-.5) -.5 ) \\\n                )     ) // pattern\n#define rot(a)    mat2(cos( a + vec4(0,11,33,0)))\n#define blend(T)  O = O* (1.- (m=T.w)) + T , m>.5 ? z=min(z,l) :z, m=0.\n\nvoid mainImage(out vec4 O, vec2 u)\n{\n    O-=O;\n    vec2  R = iResolution.xy, V,\n          U = ( 2.*u - R ) / R.x,                   // normalized screen coordinates\n          M = iMouse.xy/R;\n    if ( int(u) ==int(R)/2 ) { O = vec4(1,0,0,1); return; } // red separator\n    \n    float Z = 8.,F = Z, H = 1.5,                    // Z: object distance\n          a,b,c,d, l,m=0.,z=1e9,                    // F: anticylindrical focus distance\n          W = iMouse.z > 1e4 ? .38/ M.x : 1.;       // 1/W: camera opening\n    W = 1./max(0.,texelFetch(iChannel1,ivec2(0),0).y );\n    vec3  P0 = vec3(0,0,0), P, D = vec3( U , W );   // ray direction: left: flat perspective\n#if 1\n    if (D.x>0.) {                                   //                right: cylindrical perspective (panorama)\n          a = U.x/W;\n          D.xz = W* vec2(sin(a),cos(a));\n          if (abs(a) > 3.14/2.) O.r+=.5;            // view > 180° : mid-red alert\n          if (abs(a) > 3.14)    O.r+=.5;            // view > 360° : red alert\n       }\n#endif\n    D = normalize(D);\n    \n    if (iMouse.z > 0.)\n#if 0\n        D.yz *= rot( 1.57*(2.*M.y-1.) ),\n        D.xz *= rot( 1.57*(2.*M.x-1.) );\n#else\n        F *= 1.+ (2.*M.y-1.);\n#endif\n\n#if 1\n    if (D.x>0.) P0.xz = vec2(0,F) - F*D.xz;         // anticylindrical camera\n#endif   \n\n    P = ( H - sign(D.y)*P0.y ) * D/abs(D.y) + P0;   // --- roof + floor\n    if ( P.y > 0. )                                 // draw roof square grid\n        O +=   T(P.xz+vec2(.5,0) ) \n             * vec4(0,1,1,0) * exp(-P.z/Z);         // color + darkening with z\n \n    if ( P.y < 0. )                                 // draw floor polar grid\n        O +=  T(vec2(Z*atan(P.x,P.z),Z*log(length(P.xz)))+vec2(.5,0) )\n             * vec4(1,.5,0,0) * exp(-P.z/Z);        // color + darkening with z\n    \n                                                    // --- ribbons\n    l = (Z-P0.z)/abs(D.z), P = l* D +P0;            // draw flat ribbon \n    if ( abs(P.y-1.) < .5 && P.z>0. )   \n        blend( T(P.xy-.5) );                        // with mapped texture\n    \n    \n    a = dot(D.xz,D.xz), b = dot(P0.xz,D.xz), c = dot(P0.xz,P0.xz) -Z*Z,\n    d = b*b - a*c;\n    if (d>0.) {\n        l = ( -b +  sqrt(d) )/ a , P = l* D + P0;\n     // P = Z* D/length(D.xz) + P0;                 // draw cylindrical ribbon\n        if ( abs(P.y+1.) < .5 )                     // with mapped texture\n            blend( T(vec2(Z*atan(P.x,P.z),P.y+2.)-.5) );  \n    }\n    \n    float  t = 10.,s; c = 1., d=0.; P=P0;           // --- red balls\n   // P.y+= 5.;\n    for ( ; c > 0. && t > .01 && d < z; c -= .04 ) {        // march scene\n        //a = mod( atan(P.x,P.z), 6.28/16. ),\n        for( a = 0.; a < 6.29; a += 6.28/16. )\n            t = min(t, length( vec3(4.*cos(a),round(P.y),Z+4.*sin(a)) - P ) -.2 ); \n     // t =  min(s=length(mod(P,10.) -5.)-1.,P.y+5.), // distance to objects\n        d += t = max(s=t, abs(P.y)-H);\n        P += t*D; }                                 // sphere-tracing step\n    if (t<.01) { O = vec4(c,0,0,1); return; }       // coloring & shading\n\n\n    P0.z -= Z; Z = 2.;                              // --- small cylindrical ribbon\n    a = dot(D.xz,D.xz), b = dot(P0.xz,D.xz), c = dot(P0.xz,P0.xz) -Z*Z,\n    d = b*b - a*c;\n    if (d>0.) {\n        P = ( -b - sqrt(d) )/ a * D + P0;           // draw small cylindrical ribbon\n        if ( abs(P.y) < .5 )                        // with mapped texture\n            blend( T(vec2(Z*atan(P.x,P.z),P.y+1.)-.5) ); \n    }\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keyClick(a)   ( texelFetch(iChannel3,ivec2(a,1),0).x > 0.)\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = texelFetch(iChannel0,ivec2(U),0);\n    if (iFrame==0) O.xy = vec2(0,1);\n    if keyClick(38) O.x++, O.y *= 1.1;\n    if keyClick(40) O.x--, O.y /= 1.1;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}