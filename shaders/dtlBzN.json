{
    "Shader": {
        "info": {
            "date": "1692712898",
            "description": "Inspired by \"Space = Ruang\"",
            "flags": 0,
            "hasliked": 0,
            "id": "dtlBzN",
            "likes": 2,
            "name": "Ruang",
            "published": 3,
            "tags": [
                "glsl",
                "zhonk",
                "zhonkvision",
                "vjloop"
            ],
            "usePreview": 0,
            "username": "zhonkvision",
            "viewed": 163
        },
        "renderpass": [
            {
                "code": "vec3 palette(float d) {\n    vec3 purple = vec3(0.6, 0.4, 0.8); // Purple\n    vec3 pink = vec3(0.9, 0.4, 0.6);   // Pink\n    return mix(purple, pink, d);\n}\n\nvec2 rotate(vec2 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat2(c, s, -s, c);\n}\n\nfloat map(vec3 p) {\n    float angle = iTime * 0.1; // Adjust modulation speed\n    for (int i = 0; i < 5; ++i) { // Increase iterations\n        float t = angle;\n        p.xz = rotate(p.xz, t);\n        p.xy = rotate(p.xy, t * 0.2); // Adjust rotation\n        p.xz = abs(p.xz);\n        p.xz -= 0.2;\n    }\n    \n    float ruang = length(p.xy) - abs(sin(p.z * 1.0 + iTime * 0.75)) * 0.15; // ruang\n    \n    return ruang;\n}\n\nvec4 rm(vec3 ro, vec3 rd) {\n    float t = 0.2;\n    vec3 col = vec3(0.0);\n    float d;\n    for (float i = 0.0; i < 64.0; i++) {\n        vec3 p = ro + rd * t;\n        d = map(p) * 0.5;\n        if (d < 0.02) {\n            break;\n        }\n        if (d > 200.0) {\n            break;\n        }\n        col += palette(length(p) * 0.1) / (400.0 * d);\n        t += d;\n    }\n    return vec4(col, 1.0 / (d * 200.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - (iResolution.xy / 2.0)) / iResolution.x;\n    vec3 ro = vec3(0.0, 0.0, -50.0);\n    ro.xz = rotate(ro.xz, iTime * 0.5); // Adjust rotation speed\n    vec3 cf = normalize(-ro);\n    vec3 cs = normalize(cross(cf, vec3(0.0, 1.0, 0.0)));\n    vec3 cu = normalize(cross(cf, cs));\n    \n    vec3 uuv = ro + cf * 3.0 + uv.x * cs + uv.y * cu;\n    \n    vec3 rd = normalize(uuv - ro);\n    \n    vec4 col = rm(ro, rd);\n    \n    fragColor = col;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}