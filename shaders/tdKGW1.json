{
    "Shader": {
        "info": {
            "date": "1570125859",
            "description": "I'm hooked",
            "flags": 0,
            "hasliked": 0,
            "id": "tdKGW1",
            "likes": 12,
            "name": "Shadertober 03 - Bait",
            "published": 3,
            "tags": [
                "raymarching",
                "worm",
                "inktober",
                "shadertober",
                "bait",
                "backwardscaptain",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 44958
        },
        "renderpass": [
            {
                "code": "#define AA 2\n\n//gotta love iq and his wonderful website of knowledge\nfloat sub(float d1, float d2){return max(-d1,d2);}\n\nfloat smin(float d1, float d2, float k)\n{\n    float h = clamp(0.5+0.5*(d2-d1)/k,0.0,1.0);\n    return mix(d2,d1,h)-k*h*(1.0-h);\n}\n\nfloat elipsoid(vec3 pos, vec3 rad)\n{\n    float k0=length(pos/rad);\n    float k1 = length(pos/rad/rad);\n    \n    return k0*(k0-1.0)/k1;\n}\n\nfloat capsule(vec3 p, float h, float r)\n{\n    p.y-=clamp(p.y,0.0,h);\n    return length(p)-r;\n}\n\n\nvec2 map(vec3 pos)   \n{\n    float mat = -1.;\n    vec3 wormPos = pos+vec3(0.,1.5+sin(iTime/2.)*.2,0.);\n    vec3 hookPos = wormPos-vec3(-0.3,.55,0);\n    float w = elipsoid(wormPos+vec3(wormPos.z*.3,abs(wormPos.z)*.1,0.)*sin(iTime-wormPos.z),vec3(.3,.3+fract(wormPos.z*5.)/20.,4.25));\n    float hb = elipsoid(hookPos+vec3(-0.3,-.4,0.),vec3(.7,.8,10.));\n    float ht = elipsoid(hookPos+vec3(-.3,-.15,0.),vec3(.8,0.9,0.1));\n    float base = sub(hb,ht);\n    float top = capsule(hookPos+vec3(.35,.0,0.),3.,.1+.05*hookPos.y/2.);\n    float hook = smin(base,top,.2);\n    \n    float line = capsule(hookPos+vec3(0.35,-3.0,0.),10.,.02);\n    \n    vec3 mp = mod(pos+vec3(-5.,-iTime,0.),vec3(30.,4,30.))-.5;\n    \n    float bubble = min(length(pos+vec3(-3,-30.+mod(-iTime*5.,220.),0))-.25,\n                    length(pos+vec3(0,-90.+mod(-iTime*3.,130.),8))-.15);\n    bubble=min(bubble,length(pos+vec3(5.,-90.+mod(-iTime*4.,180.),-8))-.2);\n    float d = min(min(w,hook),line);\n    d=min(d,bubble);\n    \n    if(d==w)mat=1.;\n    else if(d==hook)mat=2.;\n    else if(d==line)mat=3.;\n    else if(d==bubble)mat=4.;\n    \n    return vec2(d,mat);\n}\n\nvec3 normal(vec3 p)\n{\n    float eps = 0.005;\n    return normalize(vec3(\n        map(vec3(p.x+eps,p.y,p.z)).x-map(vec3(p.x-eps,p.y,p.z)).x,\n        map(vec3(p.x,p.y+eps,p.z)).x-map(vec3(p.x,p.y-eps,p.z)).x,\n        map(vec3(p.x,p.y,p.z+eps)).x-map(vec3(p.x,p.y,p.z-eps)).x\n    ));\n}\n\nfloat castShadow(in vec3 ro, in vec3 rd)\n{\n    float res = 1.0;\n    float t = 0.0001;\n    for(int i=0;i<128;i++)\n    {\n        \n        vec3 pos = ro+t*rd;\n        vec2 h = map(pos);\n        \n        res= min(res, 18.0*h.x/t);\n        if(h.x<0.0001)break;\n        t+=h.x;\n        if(t>20.0)break;\n        \n    }\n    \n    return clamp(res,0.,1.);\n}\n\nvec2 ray(vec3 ro, vec3 rd)\n{\n    \n    float t = 0.0;\n    float m =0.0;\n    int bounces = 128;\n    float max_dist = 30.0;\n    for(int i=0;i<bounces;i++)\n    {\n        vec3 pos = ro+t*rd;\n        vec2 h = map(pos);\n        m=h.y;\n        if(h.x<0.0001)\n        {\n            break;\n        }\n        t+=h.x/2.;\n        if(t>max_dist)break;\n    }\n    \n    if(t>max_dist)t=-1.;\n    \n    return vec2(t,m);\n    \n}\n\nvec3 color(vec3 p, vec3 n, vec2 r)\n{\n    vec3 col = vec3(0.);\n    vec3 mate=vec3(0.);\n    if(r.y<1.5)mate=vec3(0.7,.1,.3)*.6;\n    else if(r.y<2.5)\n    {\n        mate=vec3(1.,1.,2.);\n    }\n    else if(r.y<3.5)mate=vec3(.1);\n    else if(r.y<4.5)mate=vec3(0.3,0.3,4.5);\n    vec3 sun_dir = normalize(vec3(.5,2.,0.2));\n    float sun_dif = clamp(dot(n,sun_dir),0.0,1.0);\n    float sun_sha = castShadow(p+n*0.001,sun_dir);\n    float sky_dif = clamp(0.5+0.5*dot(n,vec3(0.,1.,0.)),0.,1.);\n    \n    col=mate*vec3(1.0,3.0,2.0)*sun_dif*sun_sha;\n    col+=mate*vec3(0.1,0.1,0.3)*sky_dif;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float d = 0.0;\n    vec3 tot=vec3(0.0);\n    for(int ii=0;ii<AA;ii++)\n    {\n        for(int jj=0;jj<AA;jj++)\n        {\n            vec2 offset = vec2(float(ii),float(jj))/float(AA);\n            \n            vec2 uv = (2.*(fragCoord+offset)-iResolution.xy)/iResolution.y;\n            \n            float time = iTime/10.;\n            vec3 ro = vec3(sin(time)*-10.,1.,cos(time)*-9.);\n            vec3 ta = vec3(0.,-.5,0.);\n\n            vec3 ww = normalize(ta-ro);\n\n            vec3 uu = normalize(cross(ww,vec3(0,1,0)));\n            vec3 vv = normalize(cross(uu,ww));\n\n            vec3 rd = normalize(uv.x*uu+uv.y*vv+2.*ww);\n\n            vec2 r = ray(ro,rd);\n            d=r.x;\n\n            vec3 p = ro+rd*r.x;\n\n            vec3 n =normal(p);\n\n            vec3 col = vec3(0.0,0,1.6-p.y)*(.8+sin(sin(p.x)+cos(p.y*20.+iTime-uv.x*5.))*vec3(.1));\n\n            if(r.x>0.0)\n            {\n                col=color(p,n,r);\n\n                if(r.y==2.||r.y==4.)\n                {\n                    rd = reflect(rd,n);\n                    ro=p+n*.001;\n                    r = ray(ro,rd);\n                    p=ro+r.x*rd;\n                    vec3 c = color(p,normal(p),r);\n                    if(r.x>0.)col+=c;\n                    else col+=c/4.;\n                }\n\n            }\n\n\t\t    col=pow(col,vec3(.454545));\n            tot+=col;\n        }\n    }\n\n    tot/=float(AA*AA);\n    fragColor = vec4(tot,normalize(d));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}