{
    "Shader": {
        "info": {
            "date": "1635466128",
            "description": "mouse interactive neon city life",
            "flags": 32,
            "hasliked": 0,
            "id": "NdyXDt",
            "likes": 49,
            "name": "Taste of Noise 14c",
            "published": 3,
            "tags": [
                "weird"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 6702
        },
        "renderpass": [
            {
                "code": "// taste of noise 14c by leon denise 2021/10/29\n// thanks to Inigo Quilez, David Hoskins, NuSan, Fabrice Neyret, Blackle and many others\n// licensed under hippie love conspiracy\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // result of Buffer A\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n// rotation matrix\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n#define repeat(p,r) (mod(p,r)-r/2.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// taste of noise 14c by leon denise 2021/10/29\n// thanks to Inigo Quilez, David Hoskins, NuSan, Fabrice Neyret, Blackle and many others\n// licensed under hippie love conspiracy\n\n// global variable\nfloat material;\nvec3 rng;\nvec2 mouse;\n\n// geometry\nfloat map (vec3 p)\n{\n    // hold space coordinates\n    vec3 pp = p;\n    \n    // distances\n    float scene = 1000.;\n    float shape = 1000.;\n    \n    // parameters\n    vec3 angle = vec3(1.+mouse.x,2.+mouse.y,3);\n    float range = .2;\n    \n    // shiny material\n    material = -1.;\n    \n    // amplitude of kifs\n    float a = 1.;\n    float falloff = 1.55+.05*mouse.y;\n    \n    // kifs (kaleidoscopic iterated function)\n    const float count = 12.;\n    for (float index = 0.; index < count; ++index)\n    {\n        // rotate more and more\n        p.xz *= rot(angle.y/a);\n        \n        // fold and translate\n        p = abs(p)-range*a;\n        \n        // combine to scene\n        scene = min(scene, max(p.x, max(p.y, p.z)));\n        \n        // falloff\n        a /= falloff;\n    }\n    \n    // invert volume\n    scene = -scene;\n    \n    // lines\n    p = pp;\n    p.xz *= rot(mouse.x);\n    p.yz *= rot(mouse.y);\n    p = repeat(p, .1);\n    shape = min(scene, length(p.xz)-.001*rng.x);\n    \n    // lines material and combine to scene\n    material = shape < scene ? 1. : material;\n    scene = min(shape, scene);\n    \n    return scene;\n}\n\nvec3 color (vec3 pos, vec3 ray, vec3 normal)\n{    \n    vec3 color = vec3(0.);\n    \n    // lines\n    if (material > 0.)\n    {\n        // color palette by Inigo Quilez (https://iquilezles.org/articles/palettes)\n        color = .5+.5*cos(vec3(0, .3, .6)*6.+length(pos)*20.+mouse.x);\n    }\n\n    return color;\n}\n\n// sdf estimator\nfloat raymarch (inout vec3 pos, vec3 ray, float dither, float count)\n{\n    // shoot rays\n    for (float index = count; index > 0.; --index)\n    {\n        // volume estimation\n        float dist = map(pos);\n        \n        // hit volume\n        if (dist < 0.001)\n        {\n            // return steps ratio\n            return index / count;\n        }\n        \n        // dithering\n        dist *= 0.9 + .1 * dither;\n        \n        // ray march\n        pos += ray * dist;\n    }\n    \n    // no volume\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    \n    // reset color\n    fragColor = vec4(0,0,0,1);\n    \n    // white noise\n    vec3 seed = vec3(gl_FragCoord.xy, iTime);\n    rng = hash33(seed);\n    \n    // mouse interaction\n    mouse = 8.*iMouse.xy/iResolution.xy;\n    \n    vec3 rng3 = hash33(seed+78.);\n    \n    // camera coordinates\n    vec3 eye = vec3(0,-0.1,0.1);\n    vec3 at = vec3(0,0,.3);\n    vec3 z = normalize(at-eye);\n    vec3 x = normalize(cross(z, vec3(0,1,0)));\n    vec3 y = cross(x, z);\n    vec3 ray = normalize(z + uv.x * x + uv.y * y);\n    vec3 pos = eye + ray * .1;\n    \n    // raymarching\n    float shade = raymarch(pos, ray, rng.z, 30.);\n\n    // hit volume\n    if (shade > 0.)\n    {\n        // compute normal by NuSan (https://www.shadertoy.com/view/3sBGzV)\n        vec2 off=vec2(0.001,0);\n        vec3 normal = normalize(map(pos)-vec3(map(pos-off.xyy), map(pos-off.yxy), map(pos-off.yyx)));\n\n        // coloring\n        fragColor.rgb += color(pos, ray, normal) * shade; \n        \n        // reflection bounce\n        ray = reflect(ray, normal);\n        \n        // Blackle (https://suricrasia.online/demoscene/functions/)\n        rng3 = normalize(tan(rng3*2.-1.));\n        \n        // jitter blur\n        ray = normalize(ray + rng3);\n        \n        // avoid self collision\n        pos += ray * .01;\n        \n        // shot rays\n        shade = raymarch(pos, ray, rng.z, 20.);\n        \n        // hit neon grid\n        if (material > 0. && shade > 0.)\n        {\n            // coloring\n            normal = normalize(map(pos)-vec3(map(pos-off.xyy), map(pos-off.yxy), map(pos-off.yyx)));\n            fragColor.rgb += color(pos, ray, normal) * shade;\n        }\n    }\n    \n    // temporal buffer\n    float fade = 0.001;\n    fade += step(0.5, iMouse.z);\n    vec4 frame = texture(iChannel0, gl_FragCoord.xy/iResolution.xy);\n    fragColor.rgb = max(fragColor.rgb, frame.rgb - fade);\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}