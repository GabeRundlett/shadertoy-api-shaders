{
    "Shader": {
        "info": {
            "date": "1704328932",
            "description": "Quick test chart I made to test my printer, you can export an OpenEXR",
            "flags": 32,
            "hasliked": 0,
            "id": "4fS3z1",
            "likes": 2,
            "name": "Color Test Chart",
            "published": 3,
            "tags": [
                "test",
                "pixel",
                "space",
                "correction",
                "monitor",
                "value",
                "pattern",
                "matrix",
                "ink",
                "character",
                "srgb",
                "profile",
                "calib",
                "ccm",
                "icc"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "// See Buffer A for test pattern and OpenEXR export\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// To export an OpenEXR, click the little image icon in the bottom right of the Shadertoy editor\n\n// Box Filter Anti-Aliasing Samples (0: No AA, 1: 3x3, 2: 5x5...)\n#define AA 0\n\nvoid testImage(out vec4 testColor, in vec2 testCoord) {\n    testColor = vec4(0.0, 0.0, 0.0, 1.0); // black background\n    //testColor = vec4(1.0, 1.0, 1.0, 1.0); // white background\n\n    if(length(vec2(-0.750,  0.750) - testCoord) < 0.1) testColor.rgb = vec3( 0.250,  0.000,  0.000);\n    if(length(vec2(-0.750,  0.500) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.250,  0.000);\n    if(length(vec2(-0.750,  0.250) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.000,  0.250);\n    if(length(vec2(-0.750,  0.000) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.250,  0.250);\n    if(length(vec2(-0.750, -0.250) - testCoord) < 0.1) testColor.rgb = vec3( 0.250,  0.000,  0.250);\n    if(length(vec2(-0.750, -0.500) - testCoord) < 0.1) testColor.rgb = vec3( 0.250,  0.250,  0.000);\n    if(length(vec2(-0.750, -0.750) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.000,  0.000);\n\n    if(length(vec2(-0.500,  0.750) - testCoord) < 0.1) testColor.rgb = vec3( 0.500,  0.000,  0.000);\n    if(length(vec2(-0.500,  0.500) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.500,  0.000);\n    if(length(vec2(-0.500,  0.250) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.000,  0.500);\n    if(length(vec2(-0.500,  0.000) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.500,  0.500);\n    if(length(vec2(-0.500, -0.250) - testCoord) < 0.1) testColor.rgb = vec3( 0.500,  0.000,  0.500);\n    if(length(vec2(-0.500, -0.500) - testCoord) < 0.1) testColor.rgb = vec3( 0.500,  0.500,  0.000);\n    if(length(vec2(-0.500, -0.750) - testCoord) < 0.1) testColor.rgb = vec3( 0.167,  0.167,  0.167);\n\n    if(length(vec2(-0.250,  0.750) - testCoord) < 0.1) testColor.rgb = vec3( 0.750,  0.000,  0.000);\n    if(length(vec2(-0.250,  0.500) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.750,  0.000);\n    if(length(vec2(-0.250,  0.250) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.000,  0.750);\n    if(length(vec2(-0.250,  0.000) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.750,  0.750);\n    if(length(vec2(-0.250, -0.250) - testCoord) < 0.1) testColor.rgb = vec3( 0.750,  0.000,  0.750);\n    if(length(vec2(-0.250, -0.500) - testCoord) < 0.1) testColor.rgb = vec3( 0.750,  0.750,  0.000);\n    if(length(vec2(-0.250, -0.750) - testCoord) < 0.1) testColor.rgb = vec3( 0.333,  0.333,  0.333);\n\n    if(length(vec2( 0.000,  0.750) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  0.000,  0.000);\n    if(length(vec2( 0.000,  0.500) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  1.000,  0.000);\n    if(length(vec2( 0.000,  0.250) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  0.000,  1.000);\n    if(length(vec2( 0.000,  0.000) - testCoord) < 0.1) testColor.rgb = vec3( 0.000,  1.000,  1.000);\n    if(length(vec2( 0.000, -0.250) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  0.000,  1.000);\n    if(length(vec2( 0.000, -0.500) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  1.000,  0.000);\n    if(length(vec2( 0.000, -0.750) - testCoord) < 0.1) testColor.rgb = vec3( 0.500,  0.500,  0.500);\n\n    if(length(vec2( 0.250,  0.750) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  0.250,  0.250);\n    if(length(vec2( 0.250,  0.500) - testCoord) < 0.1) testColor.rgb = vec3( 0.250,  1.000,  0.250);\n    if(length(vec2( 0.250,  0.250) - testCoord) < 0.1) testColor.rgb = vec3( 0.250,  0.250,  1.000);\n    if(length(vec2( 0.250,  0.000) - testCoord) < 0.1) testColor.rgb = vec3( 0.250,  1.000,  1.000);\n    if(length(vec2( 0.250, -0.250) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  0.250,  1.000);\n    if(length(vec2( 0.250, -0.500) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  1.000,  0.250);\n    if(length(vec2( 0.250, -0.750) - testCoord) < 0.1) testColor.rgb = vec3( 0.667,  0.667,  0.667);\n\n    if(length(vec2( 0.500,  0.750) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  0.500,  0.500);\n    if(length(vec2( 0.500,  0.500) - testCoord) < 0.1) testColor.rgb = vec3( 0.500,  1.000,  0.500);\n    if(length(vec2( 0.500,  0.250) - testCoord) < 0.1) testColor.rgb = vec3( 0.500,  0.500,  1.000);\n    if(length(vec2( 0.500,  0.000) - testCoord) < 0.1) testColor.rgb = vec3( 0.500,  1.000,  1.000);\n    if(length(vec2( 0.500, -0.250) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  0.500,  1.000);\n    if(length(vec2( 0.500, -0.500) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  1.000,  0.500);\n    if(length(vec2( 0.500, -0.750) - testCoord) < 0.1) testColor.rgb = vec3( 0.833,  0.833,  0.833);\n\n    if(length(vec2( 0.750,  0.750) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  0.750,  0.750);\n    if(length(vec2( 0.750,  0.500) - testCoord) < 0.1) testColor.rgb = vec3( 0.750,  1.000,  0.750);\n    if(length(vec2( 0.750,  0.250) - testCoord) < 0.1) testColor.rgb = vec3( 0.750,  0.750,  1.000);\n    if(length(vec2( 0.750,  0.000) - testCoord) < 0.1) testColor.rgb = vec3( 0.750,  1.000,  1.000);\n    if(length(vec2( 0.750, -0.250) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  0.750,  1.000);\n    if(length(vec2( 0.750, -0.500) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  1.000,  0.750);\n    if(length(vec2( 0.750, -0.750) - testCoord) < 0.1) testColor.rgb = vec3( 1.000,  1.000,  1.000);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    //vec2 uv = (fragCoord-0.5*iResolution.xy)/(0.5*iResolution.y);\n\n    for(int i = -AA; i <= AA; i++) {\n        for(int j = -AA; j <= AA; j++) {\n            vec4 testColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n            vec2 testCoord = ((fragCoord+(vec2(i, j)/float(2*AA+1)))-0.5*iResolution.xy)/(0.5*iResolution.y);\n\n            testImage(testColor, testCoord);\n\n            fragColor += vec4(testColor.rgb, 1.0);\n        }\n    }\n\n    fragColor = vec4(fragColor.a != 0.0 ? fragColor.rgb / fragColor.a : fragColor.rgb, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}