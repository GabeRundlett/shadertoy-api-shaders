{
    "Shader": {
        "info": {
            "date": "1630180222",
            "description": "My shader from the 2021 Chaos Constructions Shader jam.\n\n[url]https://www.youtube.com/watch?v=gcoDX7bonX0[/url]",
            "flags": 64,
            "hasliked": 0,
            "id": "7sc3zj",
            "likes": 14,
            "name": "Disk Reconfigurator [Livecode]",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "jam",
                "bonzomatic",
                "livecode",
                "shaderjam"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "\n#define fGlobalTime iTime\n#define STEPS 128.0\n#define MDIST 2000.0\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pmod(p,x) (mod(p,x)-0.5*(x))\n#define fft1 texelFetch( iChannel0, ivec2(1,0), 0 ).x*0.08\n#define fft2 texelFetch( iChannel0, ivec2(128,0), 0 ).x*0.04\n#define fft3 texelFetch( iChannel0, ivec2(25,0), 0 ).x*0.02\nvec3 glow = vec3(0);\nvec3 cam = vec3(0);\nbool bnc = false;\nvoid mo(inout vec2 p){if(p.y<p.x) p = p.yx;}\nvoid boxFold(inout vec3 z, vec3 r){\n  z = clamp(z,-r,r)*2.0-z;\n}\nfloat frame (vec3 p, vec3 s, float r){\n  p = abs(p)-s;\n  mo(p.xz);\n  mo(p.zy);\n  p.z=max(0.,p.z);\n  return length(p)-r; \n}\nfloat ext(vec3 p, float s, float h){\n  vec2 b = vec2(s,abs(p.y)-h);\n  return min(max(b.x,b.y),0.)+length(max(b,0.));\n}\n\nfloat disks(vec3 p, float t){\n  float m = 1.0+fft1*20.0;\n  float id = floor(p.y/m)+0.5;\n  p.y = pmod(p.y, m);\n  float width = 5.0-id*0.1;\n  \n  p.zx*=rot(id*3.0*t*0.1);\n  p.zx = abs(p.zx)-6.0+sin(t*2.5);\n  float a = length(p.xz)-width;\n  a = ext(p,a,0.3);\n  a-=0.15;\n  return a;\n}\nvec2 map(vec3 p){\n  float t= mod(fGlobalTime,999.0);\n  vec3 po = p;\n  vec2 a = vec2(1);\n  vec2 b = vec2(2);\n  \n  \n   //FANCY ROT\n  float tt = pow(fract(t*2.2),3.0)+floor(t*2.2);\n  p.xy*=rot(tt*pi/3.0);\n  p.zx*=rot(-tt*pi/3.0);\n  p.yz*=rot(-tt*pi/3.0);\n  \n  p = abs(p)-40.0-fft2*1000.0;\n  \n  p.yz*=rot(-0.4);\n  p.zx*=rot(-0.4);\n  p.xy*=rot(0.4);\n   //FANCY ROT\n // float tt = pow(fract(t*1.5),3.0)+floor(t*1.5);\n  p.xy*=rot(tt*pi/3.0);\n  p.zx*=rot(-tt*pi/3.0);\n  p.yz*=rot(tt*pi/3.0);\n \n  \n  //DISKS\n  a.x = disks(p,t);\n  a.x*=0.6;\n  a.y = 1.0;\n  glow+=0.1/(0.1+a.x*a.x)*vec3(0.75,0.3,0.1);\n  \n  \n  //FRAME\n  p.zx*=rot(t);\n  b.x = frame(p,vec3(15,200,15),0.75);\n  glow+=0.1/(0.1+b.x*b.x)*vec3(0.4,0.23,0.6);\n  b.y = 2.0;\n  a =(a.x<b.x)?a:b;\n  \n  //SPHERE \n  p = po;\n  \n  p.xy*=rot(-tt*pi/16.0);\n  p.zx*=rot(-tt*pi/16.0);\n  p.yz*=rot(-tt*pi/16.0);\n  \n  \n  boxFold(p,vec3(110.0));\n  b.x = length(p)-40.0;\n  p.zx*=rot(-t*0.75);\n  p*=0.1;\n  float disp = sin(p.x)*sin(p.y)*sin(p.z);\n\n  b.y = 3.0;\n  glow+=0.3/(0.1+b.x*b.x)*\n  mix(vec3(0,0.2,0.6),vec3(0.600,0.102,0.392),clamp(length(po/300.0),0.0,1.0));\n  b.x+=disp*(1.5+fft3*200.0);\n  a =(a.x<b.x)?a:b;\n  \n  //POLE\n  p = po;\n  b.y = 5.0;\n  p.zx = pmod(p.zx,600.0);\n  p.xy = pmod(p.xy,600.0);\n  p.yz = pmod(p.yz+300.0,600.0);\n  b.x = length(p.zx)-20.0;\n  b.x = min(b.x,length(p.xy)-20.0);\n  b.x = min(b.x,length(p.yz)-20.0);\n  //glow+=\n  if(!bnc)a =(a.x<b.x)?a:b;\n  \n  a.x = max(a.x,-(length(po-cam)-35.0));\n\n  return a;\n}\nvec3 norm(vec3 p){\n  vec2 e = vec2(0.01,0);\n  return normalize(map(p).x-vec3(\n  map(p-e.xyy).x,\n  map(p-e.yxy).x,\n  map(p-e.yyx).x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n  vec3 col = vec3(0);\n  float t= mod(fGlobalTime,999.0);\n  vec3 ro = vec3(0,20.0+sin(t)*70.0,-70.0)*2.2;\n  ro.zx*=rot(t*0.2);\n  cam = ro;\n  vec3 lk = vec3(0,10,0);\n  vec3 f = normalize(lk-ro);\n  vec3 r = normalize(cross(vec3(0,1,0),f));\n  vec3 rd = normalize(f*0.65+uv.x*r+uv.y*cross(f,r));\n  vec3 p = ro;\n  vec2 d;\n  float shad, dO;\n  bool hit = false;\n  //bool bnc = false;\n  for(float i = 0.0; i<STEPS; i++){\n    p = ro+rd*dO;\n    d = map(p);\n    \n    if(abs(d.x)<0.005){\n      if(!bnc&&d.y==3.0){\n        vec3 n = norm(p);\n        ro = p+n*0.05;\n        rd = n;\n        dO = 0.0;\n        bnc = true;\n      }\n      else{\n        hit = true;\n      shad = i/STEPS;\n      break;\n      }\n    }\n    if(dO>MDIST){\n      dO=MDIST;\n      break;\n    }\n    dO+=d.x*0.8;\n  }\n  col+=glow*0.1;\n  \n  if(hit){\n    \n    vec3 ld = vec3(-1,1,1);\n    float shadow = 1.0;\n    for(float h = 0.4;h<100.0;){\n      float dd = map(p+ld*h).x;\n      if(dd<0.1){shadow = 0.; break;}\n      h+=dd*0.9;\n      shadow = min(shadow,dd*3.0);\n    }\n    shadow = max(0.4,shadow);\n    \n    vec3 n = norm(p);\n    //col = vec3(shad);\n    col += vec3(length(n*0.5+0.5))*0.6;\n    col *=shadow;\n    \n    if(d.y==5.0)col = glow*3.0;\n  }\n  \n  //if(bnc) col = 1.0-col;\n\tfragColor = vec4(col,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 28011,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/syntheofficial/moonstone"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}