{
    "Shader": {
        "info": {
            "date": "1600206834",
            "description": "Based on https://www.shadertoy.com/view/Md3XRM I added some more parameters and used a texture to mutate the DNA. ",
            "flags": 0,
            "hasliked": 0,
            "id": "wt2fWd",
            "likes": 3,
            "name": "[NERDDISCO] DNA Mutation",
            "published": 3,
            "tags": [
                "texture",
                "dna",
                "mutation",
                "nerddisco"
            ],
            "usePreview": 0,
            "username": "TimPietrusky",
            "viewed": 464
        },
        "renderpass": [
            {
                "code": "// Based on https://www.shadertoy.com/view/Md3XRM\n\nfloat FULL_SIZE = 2.0;\nfloat EDGE_SIZE = 0.2;\nfloat PAIR_SIZE = .2;\nfloat position_x = 100.0;\nfloat position_y = 100.0;\nfloat movement_speed = 0.5;\nfloat mutation_width = .11;\nfloat mutation_length = 30.0;\n\nvec3 n3(vec3 n)\n{\n \treturn fract(cos(dot(n,vec3(813,12,376)))*vec3(901.81,827.46,615.79));   \n}\nvec3 model(vec3 p)\n{\n    float A = p.z/3.0 + iTime * movement_speed;\n    vec3 R = vec3(cos(A),sin(A),0);\n    vec3 C = vec3(mod(p.xy+8.,16.)-8.+R.yx*vec2(1,-1),fract(p.z)-0.5);\n    \n    float H = min(length(C.xy+R.xy*FULL_SIZE),length(C.xy-R.xy*FULL_SIZE))*0.5-EDGE_SIZE;\n    float P = max(length(vec2(dot(C.xy,R.yx*vec2(1,-1)),C.z))-PAIR_SIZE,length(C.xy)-FULL_SIZE);\n    \n    float T = FULL_SIZE+0.01+2.*EDGE_SIZE-length(C.xy);\n    return vec3(min(H,P),T,P);  \n}\n\nvec3 normal(vec3 p)\n{\n \tvec2 N = vec2(-0.04, 0.04);\n\n \treturn normalize(model(p+N.xyy).x*N.xyy+model(p+N.yxy).x*N.yxy+\n                     model(p+N.yyx).x*N.yyx+model(p+N.xxx).x*N.xxx);\n}\n\nvec4 raymarch(vec3 p, vec3 d)\n{\n    vec4 M = vec4(p+d*2.0,0);\n \tfor(int i = 0; i<100;i++)\n    {\n        float S = model(M.xyz).x;\n    \tM += vec4(d,1) * S;\n        if (S < mutation_width || M.w > mutation_length) break;\n    }\n    return M;\n}\n\nvec3 color(vec3 p, vec3 d) {\n    vec2 M = model(p).yz;\n    \n    vec4 textureColor = texture(iChannel0, M.xy);\n\n    return textureColor.rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 position = vec2(position_x, position_y);\n    \n    vec2 A = position.xy / iResolution.xy * vec2(2,1) * 3.1416;\n    vec3 D = vec3(cos(A.x)*sin(A.y),sin(A.x)*sin(A.y),cos(A.y));\n    D = mix(vec3(1,0,0),D,ceil((A.x+A.y)/10.0));\n    vec3 P = D*12.0-vec3(0,0,iTime*movement_speed);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 textureColor = texture(iChannel0, uv.xy);\n    \n    vec3 X = normalize(-D);\n    vec3 Y = normalize(cross(X,vec3(0,0,1)));\n    vec3 Z = normalize(cross(X,Y));\n    \n\tvec2 UV = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    vec3 R = normalize(mat3(X,Y,Z) * vec3(1,UV));\n    \n    vec4 M = raymarch(P,R);\n    vec3 C = mix(color(M.xyz,R),textureColor.rgb,smoothstep(0.5,1.0,M.w/50.0));\n\tfragColor = vec4(C,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}