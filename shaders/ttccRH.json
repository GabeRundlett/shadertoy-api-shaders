{
    "Shader": {
        "info": {
            "date": "1608474967",
            "description": "Nova fractal in \"Mandelbrot\" mode, use the mouse to use the \"Julia\" mode.\n\n - https://darkeclipz.blogspot.com/2020/12/nova-fractals.html\n - (edit) method for smooth iter: https://mathr.co.uk/blog/2013-06-22_distance_estimation_for_newton_fractals.html",
            "flags": 0,
            "hasliked": 0,
            "id": "ttccRH",
            "likes": 21,
            "name": "Nova fractal",
            "published": 3,
            "tags": [
                "fractal",
                "nova"
            ],
            "usePreview": 0,
            "username": "darkeclipz",
            "viewed": 1406
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define C fragCoord                           \n#define M iMouse\n#define mouseDown iMouse.z > .0\n\nvec3 magma(float t) { // from Mattz\n    const vec3 c0 = vec3(-0.002136485053939582, -0.000749655052795221, -0.005386127855323933);\n    const vec3 c1 = vec3(0.2516605407371642, 0.6775232436837668, 2.494026599312351);\n    const vec3 c2 = vec3(8.353717279216625, -3.577719514958484, 0.3144679030132573);\n    const vec3 c3 = vec3(-27.66873308576866, 14.26473078096533, -13.64921318813922);\n    const vec3 c4 = vec3(52.17613981234068, -27.94360607168351, 12.94416944238394);\n    const vec3 c5 = vec3(-50.76852536473588, 29.04658282127291, 4.23415299384598);\n    const vec3 c6 = vec3(18.65570506591883, -11.48977351997711, -5.601961508734096);\n    t *= 2.; if(t >= 1.) { t = 2. - t; }\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); } // from iq\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 cpow( vec2 z, float n ) { float r = length( z ); float a = atan( z.y, z.x ); \n                               return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\n\nfloat map(vec2 z, vec2 c, float n) {\n    float i=0., p = 3.0; // Degree\n    vec2 z_prev = vec2(0);\n    if(mouseDown) c = 0.75*(2.*M.xy-R)/R.y - vec2(0.5, 0); // Julia mode\n    else          z = vec2(1,0);                           // Mandelbrot mode at fixed point\n    for(i=0.; i < n; i++) {\n        z_prev = z;\n        z = z - cdiv(cpow(z, p) - vec2(1, 0), cmul(vec2(p, 0), cpow(z, p-1.0))) + c;\n        if(abs(dot(z-z_prev, z-z_prev)) < 0.0001)\n            break;\n\t}   \n    return i/n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 0.75*(2.*C-R)/R.y - vec2(0.5, 0);\n    float t = map(uv, uv, 64.);\n    fragColor = vec4(magma(t),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}