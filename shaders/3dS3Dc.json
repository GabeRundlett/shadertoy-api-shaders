{
    "Shader": {
        "info": {
            "date": "1550322689",
            "description": "Soil texture shader used in procedural world generation\nhttps://github.com/BynaryCobweb/world/",
            "flags": 0,
            "hasliked": 0,
            "id": "3dS3Dc",
            "likes": 1,
            "name": "Soil texture",
            "published": 3,
            "tags": [
                "texture",
                "dirt",
                "soil"
            ],
            "usePreview": 0,
            "username": "BynaryCobweb",
            "viewed": 542
        },
        "renderpass": [
            {
                "code": "#define PI 3.14\n\n#define VORONOI_SPACE 0.01\n#define JITTER_MAX 0.012\n\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n/// 2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nvec3 getSoilColor(float x) {\n    vec3 a = vec3(0.15, 0.05, 0.03);\n    vec3 b = vec3(0.1, 0.05, 0.02);\n    vec3 c = vec3(0.3, 0.3, 0.2);\n    vec3 d = vec3(0.8, 0.8, 0.5);\n    vec3 col = a + b * cos(2. * PI * (c * x + d));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / 500.0;\n    \n   \tint xcount = int(1. / VORONOI_SPACE);\n    int ycount = int(1. / VORONOI_SPACE);\n    int ox = int(uv.x * float(xcount));\n    int oy = int(uv.y * float(ycount));\n    \n    vec2 pos;\n   \tfloat dist = 1000.0;\n    \n    for (int i = -2; i < 2; ++i) {\n        for (int j = -2; j < 2; ++j) {\n            vec2 upos = vec2(ox + i, oy + j);\n            vec2 p = (upos * VORONOI_SPACE + hash22(upos) * JITTER_MAX);\n            float d = distance(uv, p);\n            \n            if (d < dist) {\n                pos = p;\n                dist = d;\n            }\n        }\n    }\n    // Output to screen\n    float val = 1.0 - clamp(dist / (VORONOI_SPACE * 3.), 0.0, 1.0);\n    val = val * val;\n    \n    // TODO Use palette instead of hash to create a variation in color\n    fragColor = vec4(getSoilColor(hash12(pos * 1000.0)) * val,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}