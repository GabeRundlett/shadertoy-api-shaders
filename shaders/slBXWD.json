{
    "Shader": {
        "info": {
            "date": "1627671898",
            "description": "Another variation of KilledByAPixel's Voxel Fractal:\n[url]https://www.shadertoy.com/view/NlB3Rz[/url]\nRain code from P_Malin's SmallStars\n[url]https://www.shadertoy.com/view/Ml2XDt[/code]",
            "flags": 64,
            "hasliked": 0,
            "id": "slBXWD",
            "likes": 15,
            "name": "XOR Towers in Rain V3",
            "published": 3,
            "tags": [
                "3d",
                "voxel",
                "fog",
                "rain",
                "city",
                "lights"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "// Fork of \"XOR Towers in Fog & Rain\" by GregRostami. https://shadertoy.com/view/7lsXR2\n// Thanks to P_Malin's SmallStars code for the rain.\n// Place a \"//\" in front of each line with a \"*\" in the comments to turn that feature off. \n\nvoid mainImage(out vec4 o, vec2 u)\n{\n     vec2 R = iResolution.xy;\n    ivec4 b = ivec4(o -= o);                   // Initialize b=0\n    float t = .1*iTime, B, h, z, i=0.;\n     vec4 g;\n            \n    u =\n        (2. + cos(t)) *                        // * Camera push in/out \n        (u+u-R)/R.y                            //   Center coordinates\n        * mat2( cos( vec4(0,33,55,0) - .1*t))  // * Rotate camera\n        ;\n        \n    z = (h = cos(B = ceil(atan(u.x, u.y) * 2e2))) / dot(u,u);  //Variables for Rain\n    \n    for (;i<3.;)\n    g += pow(texture(iChannel2,.5*u + .1*sin(t/.1+(i+=.04)+3.*u) ),g-g+8.); // Ground ghosts\n            \n    for (; (b.x^b.y^b.z)%99 > b.z-8 ; )        // The XOR function for towers!!\n        b = ivec4(u * o.a + 2e2\n                + vec2(7,30)*t                 // * Move camera (x,y)\n                , o+=.1 );                     // Increment layer\n                \n    o =\n        o.a < 8.1 ? .1+sin(t/.1)*vec4(b%32 & b.x%9 & b.z%9) :  // * Blinking lights\n        o/80. - .02 *                                          // * Distance fog\n        vec4(b%3)                                              // * Building colors\n        + .2*(o.a > 17. ? vec4( int(.5+sin(float(b.x/2 + b.y + 2*b.z))) & b.x & b.y & int(.5+sin(4.*o.a-3.4)) ) : g-g) // * Windows\n        + (o.a > 50. ? g*vec4(.15,.4,1,0) : g-g)               // * Ground ghosts\n        + .06*texture( iChannel1, .02*u - .03*t ).r            // * Moving fog\n        + .01*max(exp(fract(h * B - z + t+t) * -1e2) / z,0.)   // * Rain\n        ;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 27906,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/hanangobran/violin-crying-rain"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}