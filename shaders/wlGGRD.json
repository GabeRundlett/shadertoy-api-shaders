{
    "Shader": {
        "info": {
            "date": "1581150332",
            "description": "water, sky, nice sunshine, and stuff.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlGGRD",
            "likes": 12,
            "name": "by the water",
            "published": 3,
            "tags": [
                "reflection",
                "water",
                "transparent"
            ],
            "usePreview": 0,
            "username": "zxxuan1001",
            "viewed": 677
        },
        "renderpass": [
            {
                "code": "#define EPSILON 0.0001\n#define SUN_COLOR vec3(1.2, 1.1, 0.8) \n#define SUN_POS vec3(500.0, 160.0, 400.0)\n#define SUN_DIR vec3(0.0,0.8,0.0)\n#define SUN_GLOW vec3(1.2,0.6,0.3)\n#define SKY_COLOR vec3(0.5,0.7,1.0)\n#define OCEAN_COLOR vec3(0.04, 0.2, 0.6)\n#define CLOUD_COLOR vec3(1.0)\n#define MAX_STEP 60\n#define MAX_DIST 30.0\n#define AA 1\n\nfloat noise(in vec2 uv) {\n    return texture(iChannel0, uv/64.0).r;\n}\n\nfloat smoothNoise(in vec2 uv) {\n    vec2 luv = fract(uv); //range from 0.0 to 1.0\n    vec2 id = floor(uv); //the integer part of uv, 0, 1, 2\n    luv = luv*luv*(3.0 - 2.0*luv); //similar to smoothstep\n    \n    //get values from the cordinates of a square\n    float bl = noise(id);\n    float br = noise(id + vec2(1.0, 0.0));\n    float tl = noise(id + vec2(0.0, 1.0));\n    float tr = noise(id + vec2(1.0, 1.0));\n    \n    float b = mix(bl, br, luv.x); //interpolate between bl and br\n    float t = mix(tl, tr, luv.x); //interpolate between tl and tr\n    \n    return mix(b, t, luv.y);\n}\n\nfloat fbm4(in vec2 uv) {\n    float amp = 0.5;\n    float f = 2.0;\n    float h = 0.0;\n    float a = 0.0;\n    for (int i = 0; i < 4; i++){\n        h += amp * smoothNoise(uv*f);\n        a += amp;\n        amp *= 0.5;\n        f *= 2.0;\n    }\n    \n    h /= a;\n    return h;\n}\n\nfloat smoothUnion( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat displacement (vec3 p) \n{\n    return sin(-p.y*0.8);\n}\n\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\nconst vec3 SCALE = vec3(18.0, 12.0, 15.0);\nvec4 stuff(vec3 p) {\n    float t = sin(iTime*0.5 + p.x * 0.22 + p.z * 0.13 + p.y * 0.15);\n    p = p - vec3(6.0, 0.8+t*t, 6.0);\n    //vec3 q = p - SCALE * clamp(round(p/SCALE), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\n    //vec2 id = vec2(floor(q.x/5.0 - 2.5),floor(q.z/5.0 - 2.5));\n    //float fid = id.x*13.3 + id.y*5.7;\n    //float wr = 1.2+0.5*sin(fid);\n    \n    float wr = 1.2;\n    float d = sphereSDF(p, wr) + displacement(p);\n    d *= 0.5;\n    return vec4(d, 3.0, 0.0, 1.0);\n}\n\nvec4 sdUnion(vec4 d1, vec4 d2)\n{\n    return (d1.x<d2.x)? d1:d2;\n}\n\nfloat wave(in vec3 p) \n{\n    float t = iTime * 0.5;\n    float hi = 0.0;\n    hi += 0.15*smoothNoise(vec2(p.x*3.0 + t, p.z*2.5 + t));\n    hi += 0.13*smoothNoise(vec2(p.x*2.2 - 1.5*t, 0.0));\n    hi += 0.11*smoothNoise(vec2(p.x*2.2 - t, p.z*3.2 - t));\n    //hi += 0.001*texture(iChannel0, p.xz*3.0).r;\n    return hi;\n}\n\nvec4 water(in vec3 p, float h) {\n    \n    float hi = wave(p);\n    h += 0.15*hi;\n    float d = p.y - h;\n    return vec4(d, 1.0, 1.0, 0.0);\n}\n\nvec2 rot2D(in vec2 xy, float d)\n{\n    float c = cos(d);\n    float s = sin(d);\n    return vec2(xy.x * c - xy.y * s, xy.x * s + xy.y * c);\n}\n\nvec4 land(in vec3 p, float h) {\n    float hi = 0.0;\n    float wave = 0.8*sin(-p.x*0.1) + 0.8*sin(-p.z*0.17);\n    \n    vec2 xy = rot2D(p.xz, -0.8); \n    //hi += 0.005*smoothNoise(vec2(xy.x*17.37, xy.y*5.5)); //a bit of a sand pattern\n    \n    h += wave ;\n    h += hi;\n    h -= 0.008*texture(iChannel1, p.xz*0.7).r; \n    float d = p.y - h;\n    return vec4(d, 2.0, 0.0, 0.0);\n}\n\nvec4 map(in vec3 p) {\n    vec4 res = vec4(0.0); //distance, material, reflect, refract\n    //p.z -= 1.5;\n    vec4 d0 = land(p, -0.5);\n    vec4 d1 = stuff(p);\n    vec4 d2 = water(p, -0.4);\n    res = sdUnion(d0, d1);\n    res = sdUnion(res, d2); \n    \n    return res;\n}\n\nfloat castRayB(in vec3 ro, in vec3 rd) {\n   float t = 0.01;\n   for ( int i = 0; i < 30; ++i )\n   {\n       vec3 pos = ro + t * rd;\n       vec4 h = stuff( pos );\n       if ( h.x < EPSILON) return t;\n       t += h.x;\n       if (t > MAX_DIST) return MAX_DIST;\n   } \n   return MAX_DIST;\n}\n\nvec4 castRay(in vec3 ro, in vec3 rd)\n{\n   float t = 0.01;\n   vec3 m = vec3(0.0);\n   float tMax = MAX_DIST;\n\n   for ( int i = 0; i < MAX_STEP; ++i )\n   {\n       vec3 pos = ro + t * rd;\n       vec4 h = map( pos );\n       m = h.yzw;\n       if ( h.x < EPSILON * t ||  t > tMax)\n       {\n           break;\n       }\n       t += h.x;\n   } \n    \n   if ( t>tMax )\n   {\n       m = vec3(-1.0);\n   }\n   return vec4(t,m);\n}\n\nvec3 getNormal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON, p.y, p.z)).x - map(vec3(p.x - EPSILON, p.y, p.z)).x,\n        map(vec3(p.x, p.y + EPSILON, p.z)).x - map(vec3(p.x, p.y - EPSILON, p.z)).x,\n        map(vec3(p.x, p.y, p.z + EPSILON)).x - map(vec3(p.x, p.y, p.z - EPSILON)).x\n    ));\n}\n\n\nvec3 sky2D(vec3 skyColor, vec3 cloudColor, vec2 uv) {\n    vec3 col = vec3(0.0);\n    float t = iTime * 0.1;\n    float n1 = fbm4(vec2(uv.x + t, uv.y - t));\n    col = mix( skyColor, cloudColor, smoothstep(0.2, 0.8, n1));\n    return col;\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor)\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<4; i++ )\n    {\n        float h = 0.01 + 0.16*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = map( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.8;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 calcSky(vec3 ro, vec3 rd) {\n    //from IQ.\n    const float SC = 1e5;\n    //Trace out to a distant XZ plane.\n    float dist = (SC - ro.y)/rd.y; \n    vec2 p = (ro + dist*rd).xz;\n    \n    vec3 sunDir = normalize(SUN_POS - ro);\n    float sun = max(dot(sunDir, rd), 0.0);\n    float core = smoothstep(0.98, 1.0, sun);\n    \n    vec3 skyCol = vec3(0.0);\n    vec3 cloudCol = CLOUD_COLOR;\n    \n    \n    skyCol += 0.5*SUN_COLOR*pow(core, 64.0);\n    skyCol += 0.8*SUN_GLOW*pow(sun, 32.0);\n    skyCol += mix(SUN_GLOW, SKY_COLOR, 2.0*abs(rd.y));//horizontal brightness\n       \n    skyCol = sky2D(skyCol, cloudCol, p*1.2/SC);\n    float grad = smoothstep(0.0, 0.1, rd.y);\n    skyCol = mix(SUN_GLOW, skyCol, grad);\n    return skyCol;\n}\n\nvec3 calcLighting(in vec3 ro, in vec3 rd, in vec4 hit) {\n    vec3 outCol = vec3(0.0);\n    vec3 hitPoint = ro + hit.x * rd;\n    vec3 sunDir = normalize(SUN_POS - ro);\n    vec3 nor = getNormal(hitPoint);\n    \n    // draw water color \n    vec3 waterCol = vec3(0.0);\n    \n    // water reflection\n    vec3 refDir = normalize(reflect(rd, nor));\n    vec3 reflectCol = calcSky(hitPoint, refDir);\n    \n    // water specular\n    vec3 H = normalize(sunDir - rd);\n    float RN = max(dot(H, nor), 0.0);\n    float spec = 0.8*pow(RN, 32.0);\n    vec3 specCol = (SUN_COLOR + SUN_GLOW) * spec; \n    \n    // water flare \n    float rnd = 2.0*noise(vec2(hitPoint.x * 3.4738, hitPoint.z * 7.7319));\n    rnd *= 1.0-exp(-0.2*hit.x);\n    specCol +=  rnd * spec;\n     \n    // water diffuse \n    float diff = max(dot(sunDir, nor), 0.0); \n    vec3 diffCol = SUN_COLOR  * OCEAN_COLOR;\n    \n    // fresnel\n    float fresnel = 1.0 - max(dot(nor,-rd),0.0);\n    fresnel = pow(fresnel,3.0);\n    waterCol = mix(diffCol, specCol + reflectCol, fresnel); \n    \n    // land\n    vec3 landDiff = SUN_GLOW * diff;\n    \n    //refract \n    float refractRatio = 0.75;\n    vec3 refractDir = normalize(refract(rd, nor, refractRatio));\n    vec3 refractCol = calcSky(hitPoint, refractDir);\n    \n    //reflect\n    float t = castRayB(hitPoint, refDir);\n    if (t < MAX_DIST) {\n        waterCol *= vec3(1.0, 0.92, 0.92); //fake reflection\n    }\n    \n    \n    if (hit.y == 1.0) {\n        outCol = waterCol;\n    } else {\n        // wet area\n        float w0 = smoothstep(-0.3, -0.15-0.1*rnd, hitPoint.y);\n        outCol = mix(landDiff*0.5, landDiff, w0);\n\n        float w1 = smoothstep(-0.4, -0.2, hitPoint.y);\n        outCol = mix(waterCol, outCol, w1);\n    }  \n    \n    outCol = mix(outCol, refractCol , hit.w);\n    return outCol;\n}\n\nmat3 getCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr), 0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec3 render(in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv -= 0.5; // translate to the center of the screen\n    uv.x *= iResolution.x / iResolution.y; // restore aspect ratio\n    vec2 mouse = vec2(0.0);\n    mouse = iMouse.xy/iResolution.xy;\n   \n    //define camera\n    float t = iTime * 0.1;\n    vec3 ro = vec3(0.0, 0.0, 0.0);\n    vec3 ta = vec3(cos(mouse.x * 6.28 + t), mouse.y*2.0, sin(mouse.x * 6.28 + t));\n    mat3 cam = getCamera(ro, ta, 0.0);\n    vec3 rd = normalize(cam * vec3(uv, 1.0));\n    rd = normalize(rd);\n    vec3 bgCol = calcSky(ro, rd);\n \tvec3 outCol = vec3(0.0);\n    outCol = bgCol;\n    \n    vec4 hit = castRay(ro, rd);\n    vec3 pos = ro + hit.x * rd;\n    vec3 nor = getNormal(pos);\n    \n    if (hit.x < MAX_DIST) {\n        outCol = calcLighting(ro, rd, hit);\n        // fog\n        outCol = mix( outCol, SUN_GLOW, 1.0 - exp( -0.008 * hit.x * hit.x ) );\n    }\n    return outCol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 pixCol = vec3(0.0);\n    vec2 offset = vec2(0.0);\n    \n#if AA>1\n    for (float y = 0.0; y < float(AA); ++y)\n    {\n        for (float x = 0.0; x < float(AA); ++x)\n        {\n            offset = -0.5 + vec2(x, y) / float(AA);\n\n        \tpixCol += render(fragCoord+offset);\n        }\n    }\n    pixCol /= float(AA*AA);\n#else\n    pixCol += render(fragCoord);\n#endif\n    \n    // tone mapping\n   \t//float exposure = 1.0;\n    //pixCol = 1.0 - exp(-pixCol * exposure);\n    \n    // gamma\n    pixCol = pow( pixCol, vec3(0.4546));\n    \n    // vignetting        \n    vec2 q = fragCoord/iResolution.xy;\n    pixCol *= 0.5 + 0.5*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.3);\n    fragColor = vec4(pixCol, 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}