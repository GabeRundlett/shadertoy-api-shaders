{
    "Shader": {
        "info": {
            "date": "1673812733",
            "description": "Simple tunnel that reacts to music.",
            "flags": 36,
            "hasliked": 0,
            "id": "DtSGWy",
            "likes": 2,
            "name": "Moosic tunnel",
            "published": 3,
            "tags": [
                "soundcloud"
            ],
            "usePreview": 0,
            "username": "Iliana",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "\n\nfloat angle(vec2 v1, vec2 v2)\n{\n    return dot(normalize(v1), normalize(v2));\n}\n\nfloat map(float v, float imin, float imax, float omin, float omax)\n{\n    float idelta = imax - imin;\n    float odelta = omax - omin;\n    return ((v - imin) / idelta) * odelta + omin;\n}\n \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 r = iResolution;\n    vec3 p = r/r + vec3(0.,0.,iTime*2.);\n\n    float c = 0.;\n    float grow = 2.;\n    float distFromCenter = length(iResolution.xy/2. - fragCoord);\n    float count = 200.;\n\n    for (float i = 1. + fract(iTime*3.)*grow; i<count; i+=grow)\n    {\n        float findex = (count-i)/count * float(BUFF_SIZE);\n        int index = int(round(findex));\n        float vol = readData1(iChannel0, index, 1);\n        vec4 height1 = readData4(iChannel0, index, 0);\n        vec4 height2 = readData4(iChannel0, index+1, 0);\n        vec4 height = height1 + height2 / 2.;\n\n\n\n        float n = i/count+iTime*0.2;\n        vec2 pos = vec2(noise(vec2(n, -n)), noise(vec2(-n,n)))*500.-iResolution.xy/4.;\n        float ag = (i * 0.05) - (iTime * 0.1) + 5.*angle(vec2(0.,1.),fragCoord - iResolution.xy/2. - pos);\n\n        float distFromOffset = length(iResolution.xy/2. - fragCoord + pos) +\n            noise(vec2(-n/grow-iTime*.01, ag*3.5-iTime)) * 1. *\n            length(iResolution.xy/2. - fragCoord + pos) + \n            height.a*-200.;\n        c = 1.- abs(2.* clamp(distFromOffset*0.1 -i, 0., 1.) - 1.);\n        float f = clamp(map(distFromOffset, 0., length(iResolution.xy)*0.3, 0., 1.), 0., 1.);\n        \n        fragColor += vec4((0.2+height.r)*c*f,(1.-height.b)*c*f,(1.-height.g)*c*f, 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BUFF_SIZE 200\n\n\n#ifndef PI\n#define PI 3.141592653589\n#endif\n\n\n\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n    float fl = floor(p);\n    float fc = fract(p);\n    return mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nivec2 divmod(int v1, int v2)\n{\n    int m = v1 % v2;\n    int d = (v1 - m) / v2;\n    return ivec2(d, m);\n}\n\nint coordToIndex(vec2 coord)\n{\n    return int(floor(coord.x)) * int(floor(coord.y));\n}\n\nfloat rect(float width, float height, float left, vec2 uv)\n{\n    if (uv.x >= left && uv.x < (left + width) && uv.y <= height) return 1.;\n    return 0.;\n}\n\nvoid arrange(float count, float index, out float width, out float left)\n{\n    width = 1. / count;\n    left = width * index;\n}\n\n#define getLevel(x, channel) (texelFetch(channel, ivec2(int(x*512.), 0), 0).r)\nfloat getVol(float samples, sampler2D channel) {\n    float avg = 0.;\n    for (float i = 0.; i < samples; i++) avg += getLevel(i/samples, channel); \n    return avg / samples;\n}\n\nfloat readBuffer(sampler2D tex, vec3 res, int index, int row, int channel)\n{\n    vec4 v = texelFetch(tex, ivec2(index, row), 0);\n    switch (channel)\n    {\n        case 0:\n        return v.r;\n        case 1:\n        return v.g;\n        case 2:\n        return v.b;\n        case 3:\n        return v.a;\n        default:\n        return 1.;\n    }\n}\n\n\nvec4 writeBuffer(vec4 col, vec2 fragCoord, int index, int row, vec3 res, int channel, float value)\n{\n    if (floor(fragCoord.x) == float(index) && floor(fragCoord.y) == float(row))\n    {\n        switch (channel)\n        {\n            case 0:\n                col.r = value;\n            break;\n            case 1:\n                col.g = value;\n            break;\n            case 2:\n                col.b = value;\n            break;\n            case 3:\n                col.a = value;\n            break;\n            default:\n            break;\n        }\n    }\n    return col;\n}\n\n\nfloat readData1(sampler2D tex, int id, int row) {\n    return texelFetch(tex, ivec2(id,row), 0).r;\n}\nvec3 readData3(sampler2D tex, int id, int row) {\n    return texelFetch(tex, ivec2(id,row), 0).rgb;\n}\nvec4 readData4(sampler2D tex, int id, int row) {\n    return texelFetch(tex, ivec2(id,row), 0);\n}\nvec4 writeData(vec4 col, vec2 fragCoord, int id, int row, float value) {\n    if (floor(fragCoord.x) == float(id) && floor(fragCoord.y) == float(row))\n        col.r = value;\n        \n    return col;\n}\nvec4 writeData(vec4 col, vec2 fragCoord, int id, int row, vec3 value) {\n    if (floor(fragCoord.x) == float(id) && floor(fragCoord.y) == float(row))\n        col.rgb = value.rgb;\n        \n    return col;\n}\nvec4 writeData(vec4 col, vec2 fragCoord, int id, int row, vec4 value) {\n    if (floor(fragCoord.x) == float(id) && floor(fragCoord.y) == float(row))\n        col = value;\n        \n    return col;\n}\n\n\n// Convert vec4 to float[4]\nfloat[4] toArr(vec4 values)\n{\n    float res[4];\n    res[0]=values.r;\n    res[1]=values.g;\n    res[2]=values.b;\n    res[3]=values.a;\n    return res;\n}\n\n\n// Convert float[4] to vec4\nvec4 toVec(float arr[4])\n{\n    return vec4(arr[0],arr[1],arr[2],arr[3]);\n}\n\n// Data for transmission\nstruct Data\n{\n    float volume;\n    vec4 bands;\n    vec4 lastBands;\n    vec4 averages;\n    vec4 correctedFac;\n    vec4 mins;\n    vec4 maxs;\n};\n\n\n// Read data\nData readData(sampler2D tex, vec2 invRes, int row, int offset) {\n\tData data;\n    data.volume = readData1(tex, offset+0, row);\n    data.bands = readData4(tex, offset+1, row);\n    data.lastBands = readData4(tex, offset+2, row);\n    data.averages = readData4(tex, offset+3, row);\n    data.correctedFac = readData4(tex, offset+4, row);\n    data.mins = readData4(tex, offset+5, row);\n    data.maxs = readData4(tex, offset+6, row);\n    return data;\n}\n\n// Write data\nvec4 writeData(vec4 col, vec2 fragCoord, Data data, int row, int offset) {\n    col = writeData(col, fragCoord.xy, offset+0, row, data.volume);\n    col = writeData(col, fragCoord.xy, offset+1, row, data.bands);\n    col = writeData(col, fragCoord.xy, offset+2, row, data.lastBands);\n    col = writeData(col, fragCoord.xy, offset+3, row, data.averages);\n    col = writeData(col, fragCoord.xy, offset+4, row, data.correctedFac);\n    col = writeData(col, fragCoord.xy, offset+5, row, data.mins);\n    col = writeData(col, fragCoord.xy, offset+6, row, data.maxs);\n    return col;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\n#define logX(x,a,c) (1./(exp(-a*(x-c))+1.))\nfloat logisticAmp(float amp){\n   float c = .88, a = 20.;  \n   return (logX(amp, a, c) - logX(0.0, a, c)) / (logX(1.0, a, c) - logX(0.0, a, c));\n}\nfloat getPitch(float freq, float octave){\n   freq = pow(2., freq)   * 261.;\n   freq = pow(2., octave) * freq / 12000.;\n   return logisticAmp(getLevel(freq, iChannel1));\n}\n\nfloat getVol(float samples) {\n    float avg = 0.5;\n    for (float i = 0.; i < samples; ++i) avg += getLevel(i/samples, iChannel1);\n    return avg / samples;\n}\n\nfloat hash13(vec3 p3) {\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n// --------------------------------------------------------------\n\n// Sample audio from a start freq to end freq (0.0 - 1.0) at *samples* positions\nfloat sampleAvg(float start, float end, float samples, bool mode)\n{\n    float delta = (end - start) / samples;\n    float res = 0.001;\n    if (!mode)\n    {\n    \n        for (float i = start; i < end; i+= delta)\n        {\n            res += getPitch(i, 0.7);\n        }\n        return res / samples;\n    }\n    else\n    {\n        for (float i = start; i < end; i+= delta)\n        {\n            res = max(getPitch(i, 0.7), res);\n        }\n        return res;\n    }\n}\n\n// Compute the minimums for each band with smoothing\nvoid computeMins(inout float mins[4], float bands[4], float avgs[4], float fsmooth)\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        mins[i] = min((mins[i]*fsmooth + avgs[i]) / (fsmooth + 1.), bands[i]);\n    }\n}\n\n// Compute the maximums for each dand with smoothing\nvoid computeMaxs(inout float maxs[4], float bands[4], float avgs[4], float fsmooth)\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        maxs[i] = max((maxs[i]*fsmooth + avgs[i]) / (fsmooth + 1.), bands[i]);\n    }\n}\n\n// Compute averages with smoothing\nvoid computeAverages(inout float avgs[4], float bands[4], float fsmooth)\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        //avgs[i] = smoothstep(avgs[i],bands[i], 0.1);\n        avgs[i] = (avgs[i]*fsmooth + bands[i]) / (fsmooth + 1.);\n    }\n}\n\n// Get thresholds by two methods and make a ratio between the two.\n// Method 1:\n// Use a position between the min and max as the threshold\n// min ........... max\n//             ^\n//             Threshold\n//\n// Method 2:\n// Use the average as the threshold.\nfloat[4] getThresholds(float mins[4], float maxs[4], float avgs[4], float minmaxRatio, float avgsRatio)\n{\n    float res[4];\n    for (int i = 0; i < 4; ++i)\n    {\n        float thresh = smoothstep(mins[i], maxs[i], minmaxRatio);\n        res[i] = smoothstep(thresh, avgs[i], avgsRatio);\n    }\n    return res;\n}\n\n\n// If under threshold, return 0.0, if over, return 1.0\nvoid setCorrectedFacs(out float facs[4], float thresh[4], float bands[4])\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        facs[i] = 0.;\n        if (bands[i] > thresh[i]) facs[i] = 1.;\n    }\n}\n\n\n// Scale the band from 0.0 to 1.0 according to min and max\nvoid setScales(out float facs[4], float bands[4], float mins[4], float maxs[4])\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        facs[i] = (bands[i] - mins[i]) / (maxs[i] - mins[i]);\n    }\n}\n\n\n// If instant peek is found, apply it to the output\nvoid applyDerivative(inout float facs[4], float lastBands[4], float bands[4], float fsmooth)\n{\n    for (int i = 0; i < 4; ++i)\n    {\n        if (lastBands[i] < bands[i])\n        {\n            float delta = bands[i] - lastBands[i];\n            facs[i] += delta * fsmooth;\n        }\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // Read data\n    vec2 invRes = vec2(1.) / iResolution.xy;\n    Data data = readData(iChannel1, invRes, 0, BUFF_SIZE+1);\n    \n    // Run only once per frame\n    if (fragCoord.y > .5 && fragCoord.x > 0.5)\n    {\n        fragColor = writeData(fragColor, fragCoord, data, 0,BUFF_SIZE+1);\n        return; // Returns if this is not the first pixel\n    }\n    \n    // Frequency separators (0.0-1.0)\n    float s1 = 0.1;\n    float s2 = 0.5;\n    float s3 = 0.8;\n\n    \n    // Get global volume\n    data.volume = getVol(30.);\n    data.lastBands = data.bands;\n    \n    // Get bands from audio\n    float bands[4] = toArr(data.bands);\n    bands[0] = sampleAvg(0.,s1, 5.,true)/(data.volume*.5);\n    bands[1] = sampleAvg(s1,s2, 10.,true)/(data.volume*0.3);\n    bands[2] = sampleAvg(s2,s3, 15.,true)/(data.volume*.2);\n    bands[3] = sampleAvg(s3,1., 20.,true)/(data.volume*.1);\n    \n    // Get values from last frame\n    float[4] mins = toArr(data.mins);\n    float[4] maxs = toArr(data.maxs);\n    float[4] avgs = toArr(data.averages);\n    float[4] lastBands = toArr(data.lastBands);\n    \n    \n    // Compute the new values\n    computeAverages(avgs, bands, 20.);\n    computeMins(mins, bands, avgs, 20.);\n    computeMaxs(maxs, bands, avgs, 20.);\n    \n    // Get thresholds for bands\n    float thresh[4] = getThresholds(mins, maxs, avgs, 0.1, 0.4);\n    \n    // Get factors calculated from thresholds\n    float facs[4];\n    setCorrectedFacs(facs, thresh, bands);\n    applyDerivative(facs, lastBands, bands, 5.);\n    \n    // Get factors scaled from 0.0 to 1.0 from min and max\n    float facs2[4];\n    setScales(facs2, bands, mins, maxs);\n    \n\n    // Update data\n    data.bands = toVec(bands);\n    data.mins = toVec(mins);\n    data.maxs = toVec(maxs);\n    data.averages = toVec(avgs);\n    \n    // If global volume is close to zero, prevent x / ~0 = almost infinity;\n    for (int i = 0; i < 4; ++i)\n    {\n        if (data.volume < 0.8) facs[i] = smoothstep(facs[i], 0., data.volume/.8);\n    }\n    \n    // Set new corrected data band\n    data.correctedFac = toVec(facs) * toVec(facs2);\n    \n    // Write data\n    fragColor = writeData(fragColor, fragCoord, data, 0,BUFF_SIZE+1);\n\n\n    vec2 uv = fragCoord / iResolution.xy;\n    int index = int(floor(fragCoord.x));\n    //fragColor = writeBuffer(fragColor, fragCoord, index, iResolution, 0, getVol(512., iChannel0));\n    if (iFrame % 1 == 0)\n    {\n        // First sample sends the latest input\n        if (index == BUFF_SIZE-1)\n        {\n            fragColor = writeData(fragColor, fragCoord.xy, index, 0, data.correctedFac);\n            fragColor = writeData(fragColor, fragCoord.xy, index, 0, vec4(data.correctedFac.rgb,getVol(512.)));\n        }\n        // Ignore anything after last\n        else if (index < BUFF_SIZE)\n        {\n            vec4 last = readData4(iChannel0, index + 1, 0);\n            fragColor = writeData(fragColor, fragCoord.xy, index, 0, last);\n            float vol = readData1(iChannel0, index, 1);\n            fragColor = writeData(fragColor, fragCoord.xy, index, 1, vol);\n        }\n    }\n    else\n    {\n        vec4 l = readData4(iChannel0, index, 0);\n        fragColor = writeData(fragColor, fragCoord.xy, index, 0, l);\n        float v = readData1(iChannel0, index, 1);\n        fragColor = writeData(fragColor, fragCoord.xy, index, 1, v);\n    }\n    //fragColor = writeBuffer(fragColor, fragCoord.xy, index, iResolution, 0, 1.);\n    //fragColor = writeBuffer(fragColor, fragCoord.xy, index, iResolution, 3, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}