{
    "Shader": {
        "info": {
            "date": "1576175240",
            "description": "Band swirl",
            "flags": 32,
            "hasliked": 0,
            "id": "3ltGD8",
            "likes": 1,
            "name": "[I3D'20] Band swirl stretch",
            "published": 3,
            "tags": [
                "i3d20"
            ],
            "usePreview": 0,
            "username": "I3D20_23",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 base = texture(iChannel0,uv);\n    \n    vec4 c_color = texture(iChannel0,uv);\n    int width = 1;\n    float diff = 0.0;\n    for (int i = -width; i <= width; i++) {\n        for (int j = -width; j <= width; j++) {\n            vec4 color = texture(iChannel0,uv + vec2(i, j)/iResolution.xy);\n            if (color != c_color) {\n                diff += 0.2;\n            }\n        } \n    }\n   \t\n    fragColor = vec4(base.rgb - vec3(diff),0.0);\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float log_step()\n{\n    return sqrt(3.0);\n}\n\nconst float extent = 12.0;\n\nvec2 panning()\n{\n  return - 0.25 * extent * vec2(sin(iTime*0.1),cos(iTime*0.1));    \n}\n\nvec2 uv(vec2 p) \n{\n    vec2 ctr  = vec2(extent/2.0*iResolution.x/iResolution.y, extent/2.0);\n    vec2 rctr = ctr + panning();\n\n    float tm = iTime * 0.2;\n    p = p - rctr;\n    vec2 pr = vec2(p.x * cos(tm) - p.y * sin(tm), p.x * sin(tm) + p.y * cos(tm));\n    p = pr + rctr;\n    \n    vec2 dt  = vec2(ctr-p);\n    \n    const float R = 0.4 * extent;    \n    float r = length(dt);\n    float a = atan(dt.y,dt.x) + (sin(tm*1.1)*0.13) * r;\n    return r * vec2(cos(a),sin(a));\n}\n\nvec2 d(vec2 p) \n{\n    //return vec2(8.0 * log_step()); // uncomment to reveal original stretch    \n\n    float delta = 0.1;\n    vec2  dudx  = ( uv(p - vec2(delta,0.0)) - uv(p + vec2(delta,0.0)) ) * 0.5 / delta;\n    vec2  dudy  = ( uv(p - vec2(0.0,delta)) - uv(p + vec2(0.0,delta)) ) * 0.5 / delta;\n    float du    = 1.0 * log_step() / (0.000001 + length(vec2(dudx.x,dudy.x)));\n    float dv    = 1.0 * log_step() / (0.000001 + length(vec2(dudx.y,dudy.y)));\n\n    du = pow(du,1.7);\n    dv = pow(dv,1.7);\n    \n    //float du = log_step() / (1.0 - 0.2*abs(dot(dudx,dudy)));\n    //float dv = du;\n    \n    du = clamp(du,log_step(),8.0*log_step());\n    dv = clamp(dv,log_step(),8.0*log_step());\n    \n    return vec2(du,dv);\n}\n\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\n#define keyToggle(ascii) (texelFetch(iChannel0,ivec2(ascii,2),0).x > 0.)\n#define keyDown(ascii)   (texelFetch(iChannel0,ivec2(ascii,1),0).x > 0.)\n#define keyClick(ascii)  (texelFetch(iChannel0,ivec2(ascii,0),0).x > 0.)\n\n// keyboard mapping\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\n\n//////////////////////////\n// forward declarations //\n//////////////////////////\n\nvec4 getRandomColor(uvec4 id);\n\nfloat spacing(float d);\nint getLocalID(float u, float d, out float ctr);\nuvec4 getGlobalID(int localID, float d);\nfloat getLocalIDCenter(uint id, float d);\n\nfloat quantize(float d);\nfloat up(float d);\nfloat down(float d);\nfloat interpolate(float d);\n\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\nfloat quantize(float d) {\n    return pow(log_step(),floor(log(d)/log(log_step())));\n}\n\nint d2level(float d) {\n    return int(floor(log(d)/log(log_step())));\n}\n\nfloat level2d(int level) {\n  return pow(log_step(),round(float(level)));\n}\n\nfloat interpolate(float d) {\n    int   level   = d2level(d);\n    float df      = level2d(level);\n    float dc      = level2d(level-1);    \n    float linear  = (d - df) / (df - dc) / log_step();\n    return smoothstep(0.0,1.0,linear);\n}\n\nfloat spacing(float d) {\n    return 1.0/d;   \n}\n\nfloat shift(float d) {\n    return d ;\n}\n\nfloat id2Lborder(int id, float d) {\n    return (float(id) +       (shift(d) / spacing(d)) ) * spacing(d);\n}\n\nfloat id2center(int id, float d) {\n    return (float(id) + 0.5 + (shift(d) / spacing(d)) ) * spacing(d);\n}\n\nint u2id(float u, float d) {\n    return int(floor( u / spacing(d) - (shift(d) / spacing(d)) ));\n}\n\nint u2closestLBorderId(float u, float d) {\n    int lid = u2id(u, d);\n    if (u < id2center(lid, d)) {\n        return lid;\n    } else {\n        return lid+1;\n    }\n}\n\nfloat u2closestBorder (float u, float d) {\n    return id2Lborder(u2closestLBorderId(u,d), d);\n}\n\n/**********************************************/\n\nint getLocalID(float u, float d, out float ctr) {\n  // fine and coarse densities\n  int   level = d2level(d);\n  float df    = level2d(level  );\n  float dc    = level2d(level-1);\n  // enclosing band id\n  int   lid     = u2id(u, df); \n  // get the borders of the fine band\n  float lf_brdr = id2Lborder(lid, df);\n  float rf_brdr = id2Lborder(lid+1, df);\n  // get the closest coarser band borders\n  float lc_brdr = u2closestBorder(lf_brdr, dc);\n  float rc_brdr = u2closestBorder(rf_brdr, dc);\n  // interpolate between fine and coarse borders\n  float a     = interpolate(d);\n  float left  = lf_brdr * a + lc_brdr * (1.0 - a);\n  float right = rf_brdr * a + rc_brdr * (1.0 - a);    \n  // adjust enclosing band after interpolation\n  if      (u < left ) lid--;\n  else if (u > right) lid++;\n\n  if (abs(left - right) < 0.5 * spacing(df)) {\n    ctr = -99999.0;\n  } else {\n    ctr = (left + right)/2.0;\n  }\n\n  return lid;\n}\n\n/**********************************************/\n\nuvec4 setId(uvec4 id,uint bit) // 128 bits IDs\n{\n    if (bit > 127u) return id;\n    if (bit < 64u) {\n        if (bit < 32u) { // 0 - 31 (w) LSBs\n            return uvec4(id.x,id.y,id.z,id.w | (1u << bit));\n        } else {         // 32 - 63 (x)\n            return uvec4(id.x,id.y,id.z | (1u << (bit-32u)),id.w);            \n        }\n    } else {\n        if (bit < 96u) { // 64 - 95 (x)\n            return uvec4(id.x,id.y | (1u << (bit-64u)),id.z,id.w);            \n        } else {         // 96 - 127 (x) MSBs\n            return uvec4(id.x | (1u << (bit-96u)),id.y,id.z,id.w);            \n        }\n    }\n}\n\n/**********************************************/\n\nuvec4 getGlobalID(int lid, float d) {\n  uvec4 gid = uvec4(0u);\n  int start_level = d2level(d);\n  for (int level = start_level; level > 0; level--) {\n    float df      = level2d(level);\n    float dc      = level2d(level-1);\n    float lf_brdr = id2Lborder(lid  , df);\n    float rf_brdr = id2Lborder(lid+1, df);\n    // get the closest borders on the coarse bands\n    int lid_brdr = u2closestLBorderId(lf_brdr, dc);\n    int rid_brdr = u2closestLBorderId(rf_brdr, dc);\n    if (lid_brdr == rid_brdr) {\n      // this band is closing between parents, tag in ID (lower 96 bits)\n      gid = setId(gid,uint(96 - level));\n      lid  = u2id(lf_brdr, dc);\n      if (level == start_level) {\n        // the start band is appearing\n        //gid.x = uint(lid_brdr);\n        //return uvec4(0);\n      }\n    } else {\n      // move up to parent\n      lid  = lid_brdr;\n        \n    }      \n  }\n  // parent ids go into the most significant 32 bits\n  gid.x = uint(lid);\n  return gid;\n}\n\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\nvec4 getRandomColor(uvec4 id) {\n    vec3 tmp = vec3(fract(float(id.x^id.w)/213789.0), fract(float(id.y^1489u)/348789.0), fract(float(id.z^2789u)/5689.0));\n    for (int i = 0; i < 16; i++) {\n      tmp = fract(vec3(13.14159265359,1.41421356237,6.62607004) * tmp.zyx + tmp.yxz / vec3(13.14159265359,1.41421356237,6.62607004));\n    }\n    return vec4(tmp, 1.0);\n}\n\n///////////////////////\n\nuint numBits(uint v) {\n    uint n = 0u;\n    while (v > 0u) {\n        n += v & 1u;\n        v = v >> 1u;\n    }\n    return n;\n}\n\nvec4 draw(vec2 p) {\n          \n    p = p + panning();\n    \n    float ctr = 0.0;\n   \n    vec2 uvp = vec2(extent*2.0) + uv(p);\n    vec2 dp  = d(p);\n    \n    int lidA = getLocalID(uvp.x, dp.x, ctr);\n    int lidB = getLocalID(uvp.y, dp.y, ctr);\n    \n    uvec4 gidA = getGlobalID(lidA, dp.x);\n    uvec4 gidB = getGlobalID(lidB, dp.y);\n    \n    return vec4(getRandomColor(gidA).xyz,0.0);\n        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec2 p = extent * fragCoord / iResolution.y ;\n    fragColor = draw( p );\n    \n    //fragColor = vec4(uv( p ) / 50.0,0.0,0.0);\n    //fragColor = vec4(d( p ) / 10.0,0.0,0.0);\n}\n\n/**********************************************/\n/**********************************************/\n/**********************************************/\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}