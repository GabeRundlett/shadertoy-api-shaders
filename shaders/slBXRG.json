{
    "Shader": {
        "info": {
            "date": "1627912419",
            "description": "t",
            "flags": 0,
            "hasliked": 0,
            "id": "slBXRG",
            "likes": 0,
            "name": "Rectangle A-A",
            "published": 3,
            "tags": [
                "aliasing",
                "antialiasing",
                "rectangle",
                "aa",
                "help"
            ],
            "usePreview": 0,
            "username": "modesty",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "#define linearstep(edge0, edge1, x) clamp((x - (edge0)) / (edge1 - (edge0)), 0.0, 1.0)\n\nfloat box(in vec2 _st, in vec2 _size, vec2 aa, vec3 color, inout vec3 pixel){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size, _size+aa, _st);\n        uv *= smoothstep(_size, _size+aa, vec2(1.0)-_st);\n    float res = uv.x*uv.y;\n    if (res > 0.) {\n        pixel = color;   \n    }\n    return res;\n}\n\nfloat stationary(vec2 st, vec3 color, inout vec3 pixel) {\n    float res = 0.;\n    vec2 aa = vec2(0.01);\n    // top\n    res = max(res, box(st - vec2(0.0, 0.225), vec2(0.35, 0.150), aa, color, pixel));\n    // right\n    res = max(res, box(st - vec2(0.17, 0.0), vec2(0.2, 0.60), aa, color, pixel));\n    // bottom\n    res = max(res, box(st - vec2(0.0, -0.225), vec2(0.35, 0.150), aa, color, pixel));\n    // left\n    res = max(res, box(st - vec2(-0.17, 0.0), vec2(0.2, 0.60), aa, color, pixel));\n    if (res >0.) {\n        pixel = color;    \n    }\n\n    return res;\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}      \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = 2. * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n    \n    // increase the value to receive smaller uv\n    float sizeNumber = 10.;\n    \n    uv *= vec2(sizeNumber);\n    \n    // rotation to see the issue with AA(anti-aliasing)\n    uv = rotate2d(iTime) * uv;\n    \n    uv += vec2(0.5);\n    \n    // some articles (ex: http://jeremt.github.io/pages/anti-aliased_shapes_in_glsl.html \n    // suggests to use fWidth function to get the scale, can't do it with this rectangle which has shadow \n    // and emtpiness inside\n    highp vec2 uvPixel = fwidth(uv);\n    \n    vec3 col = vec3(1.);\n    \n    float on = 0.0;\n    vec3 pixel = vec3(0.0);\n\n    vec2 stShadow = uv*0.7;\n    stShadow += 0.15;\n\n    on = max(on, stationary(stShadow, vec3(0.0), col));\n    on = max(on, stationary(uv, vec3(0.0, 1.0, 0.0), col));\n            \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}