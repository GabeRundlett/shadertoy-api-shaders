{
    "Shader": {
        "info": {
            "date": "1629454571",
            "description": " Log Spherical Map Test - link in comments, pretty good explanation and examples. I tried this once before but didn't understand tiling and the basics - so taking a second look at uses and examples to put in the toolbox.\n\n(mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "7d33zM",
            "likes": 20,
            "name": "Marched Log Spherical",
            "published": 3,
            "tags": [
                "2d",
                "raymarching",
                "warp",
                "truchet",
                "spherical",
                "polar"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 460
        },
        "renderpass": [
            {
                "code": "/**\n    Log Spherical Mapping / Log Polar Coords\n    @byt3_m3chanic 08/20/21\n    \n    Found this post online and started to try some of\n    it out in 2D and 3D. I hope I got this kind\n    of right.. some guessing about a few of the\n    numbers used. (mouseable)\n\n    also I need to branch out into other tile systems,\n    truchets are easy to set up - but what are other good\n    examples with square tiled grids.\n    \n    https://www.osar.fr/notes/logspherical/\n    \n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n\n#define PI          3.14159265359\n#define PI2         6.28318530718\n\n#define MAX_DIST    30.00\n#define MIN_DIST    0.001\n\nfloat hash21(vec2 a){ return fract(sin(dot(a, vec2(27.609, 57.583)))*43758.5453); }\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\n//@iq https://iquilezles.org/articles/palettes\nvec3 hue(float t){ \n    vec3 d = vec3(0.110,0.584,0.949);\n    return .45+.4*cos( PI2*t*vec3(.95,.97,.88)*d ); \n}\n\n//@iq cylinder\t\nfloat box(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nconst float sz = 2.;\nconst float hl = sz*.5;\nconst vec2 boxSize = vec2(sz*.465 ,.25);\nconst float density = 16.;\n\n//global\nvec3 hit,ghp;\nvec2 cellId,gid;\nfloat lpscale,movement;\nmat2 turn;\n\nvec2 map(vec3 q){\n    vec2 res = vec2(1e5,0.);\n\n    vec2 p = q.xz;\n    p*=turn;\n    float r = length(p);\n\tp = vec2(log(r), atan(p.y, p.x));\n\n\tp *= lpscale;\n\tfloat mul = r/lpscale;\n    p.y -= hl;\n    \n    p.x += .0 + movement;\n    \n    vec2 id = floor((p+hl)/sz) - 1.5;\n    p = mod(p+hl,sz)-hl;\n\n    vec3 lp = vec3(p.x, max(0.0, q.y/mul), p.y);\n    \n    float bx = box(lp,boxSize.xyx)-.035;\n    if(bx<res.x) {\n        res = vec2(bx*mul,2.);\n        gid = id;\n        ghp = lp;\n    }\n   \n    return res;\n}\n\n// Tetrahedron technique @iq\n// https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float t)\n{\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\nvec3 truchet(vec2 vuv) {\n\n    float px = fwidth(length(vuv)/PI);\n\n    vec2 id   = cellId;\n    vec2 grid = vuv;\n    \n    float hs = hash21(id);\n    if(hs>.5) grid.x*=-1.;\n    \n    vec3 h = vec3(0); \n    vec3 bc = vec3(1);\n    \n    float chk = mod(id.y + id.x,2.) * 2. - 1.;\n\n    vec2 d2 = vec2(length(grid-hl), length(grid+hl));\n    vec2 gx = d2.x<d2.y? vec2(grid-hl) : vec2(grid+hl);\n\n    float circle = length(gx)-hl;\n    float circle2 = abs(abs(circle)-.125)-(.085+.065*sin(vuv.x*3.25) );\n    circle2=abs(abs(circle2)-.04)-.02;\n    circle2=smoothstep(-px,px,circle2);\n    \n    // color flip for every other one and then ones \n    // thats are flipped by the hash\n    circle=(chk>0.^^ hs>.5) ? smoothstep(-px,px,circle) : smoothstep(px,-px,circle);\n    \n    vec2 sx = abs(grid)-hl;\n    float cbx = length(sx)-.35;\n    cbx=abs(abs(cbx)-.075)-(.025+.015*sin(vuv.x*3.25));\n    cbx=smoothstep(px,-px,cbx);\n    h = mix(h, bc, min(circle2,circle));\n    h = mix(h, bc, cbx);\n    return h;\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    // pre-cal\n    lpscale = floor(density)/PI;\n    movement = iTime*lpscale * .123;\n    turn = rot(T*5.*PI/180.);\n    //\n    \n    \n    vec2 uv = (2.* F.xy-R.xy)/max(R.x,R.y);\n\n    vec3 ro = vec3(0, 0, 8);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    \n    // mouse //\n    float x = M.xy==vec2(0) ? 0. : -(M.y/R.y*.25-.125)*PI;\n    float y = M.xy==vec2(0) ? 0. : -(M.x/R.x*.5-.25)*PI;\n    mat2 rx =rot((-.75+.2*sin(T*.1))+x);\n    mat2 ry =rot((.8*sin(T*.3))+y);\n    ro.zy*=rx;rd.zy*=rx;\n    ro.xz*=ry;rd.xz*=ry;\n\n    vec3 C = vec3(0);\n    float m = 0.;\n    float d = 0.;\n    vec3 p = ro;\n    \n    for(int i=0;i<100;i++)\n    {\n        p = ro + rd * d;\n        vec2 ray = map(p);\n        if(abs(ray.x)<MIN_DIST*d||d>MAX_DIST)break;\n        d += i<64? ray.x*.5: ray.x;\n        m  = ray.y;\n    } \n\n    hit = ghp;\n    cellId = gid;\n    \n    float alpha = 0.;\n    if(d<MAX_DIST)\n    {\n        vec3 n = normal(p,d);\n        vec3 lpos =  vec3(0,8,.5)*lpscale;\n        vec3 l = normalize(lpos-p);\n\n        float diff = clamp(dot(n,l),0.,1.);\n        vec3 view = normalize(p - ro);\n        vec3 ret = reflect(normalize(lpos), n);\n        float spec =  0.75 * pow(max(dot(view, ret), 0.), 24.);\n\n        vec3 h = vec3(.05);\n  \n        if(m==2.) h = truchet(hit.xz)* hue(cellId.x*.1);\n\n        C = h * diff + spec;\n    }\n    C = mix(vec3(.0),C,exp(-.0015*d*d*d));\n    \n    C=pow(C, vec3(.4545));\n    // Output to screen\n    O = vec4(C,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}