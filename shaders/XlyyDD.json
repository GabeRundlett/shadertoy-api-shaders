{
    "Shader": {
        "info": {
            "date": "1536182503",
            "description": "Coded live on twitch stream in Bonzomatic, and tidied/ported to shadertoy.\nUnedited Bonzomatic shader here: [url]https://gist.github.com/willkirkby/9f8dbeeab1f583db332338230c68d40e[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XlyyDD",
            "likes": 27,
            "name": "[twitch] Gears of Time",
            "published": 3,
            "tags": [
                "gears",
                "pastel"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 2426
        },
        "renderpass": [
            {
                "code": "#define pi acos(-1.)\n#define tau (pi*2.)\n\n#define saturate(a) clamp(a,0.,1.)\n\nfloat tooth(float x, float offset, float scale)\n{\n    return saturate((abs(x-.5)-offset)*scale)*.12;\n}\n\nvec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\nvec3 pal(vec3 a, vec3 b, vec3 c, vec3 d, float t)\n{\n    return a+b*cos(tau*(c*t+d));\n}\n\nvec3 rainbow(float t)\n{\n    return pal(\n        vec3(.5),\n        vec3(.5),\n        vec3(1),\n        vec3(0,1,2)/3.,\n        t\n    );\n}\n\nvec4 plasma(vec2 uv)\n{\n    return vec4(rainbow(fract(atan(uv.x, uv.y) / tau)), 1);\n}\n\nfloat tick(float time)\n{\n    float t = saturate(fract(time)*3.);\n    const float k = 2.;\n    return (sin(mix(-k,k,t))/sin(k))*.5+.5;\n}\n\nconst float DEPTH_EXPONENT = 1.15;\nconst float ATTENUATION = .2;\nconst float SPIRAL_RADIUS = .3;\nconst float FLIGHT_SPEED = 3.;\nconst float GEAR_THICKNESS = .2;\nconst float SPIRAL_PERIOD_SCALE = .4;\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 screenUv = fragCoord.xy / iResolution.xy;\n\n    vec2 baseUv = gl_FragCoord.xy / iResolution.xy - .5;\n    baseUv.x *= iResolution.x / iResolution.y;\n    baseUv *= .65;\n    baseUv.y -= .05;\n\n    out_color = vec4(1,0,0,1);\n\n    for (int i = 20; i >= 0; --i)\n    {\n        vec2 uv = baseUv;\n        vec2 uv2 = baseUv;\n        float depth = float(i) - fract(iTime*FLIGHT_SPEED);\n        float depth2 = depth + GEAR_THICKNESS;\n\n        uv *= pow(DEPTH_EXPONENT, depth);\n        uv2 *= pow(DEPTH_EXPONENT, depth2);\n\n        uv -= vec2(\n            sin(depth*SPIRAL_PERIOD_SCALE),\n            cos(depth*SPIRAL_PERIOD_SCALE)-1.\n        )*SPIRAL_RADIUS;\n        uv2 -= vec2(\n            sin(depth2*SPIRAL_PERIOD_SCALE),\n            cos(depth2*SPIRAL_PERIOD_SCALE)-1.\n        )*SPIRAL_RADIUS;\n\n        vec2 uvWithoutRotation = uv;\n\n        uv = rotate(uv, -tick(iTime+depth*.1) * (tau / 12.));\n\n        float a = atan(uv.x, uv.y) / tau;\n        float gear1 = (length(uv) - .8) + tooth(fract(a * 12.), .175, 8.);\n        float gear2 = (length(uv) - .83) + tooth(fract(a * 12.), .23, 8.);\n        float gear3 = (length(uv2) - .8) + tooth(fract(a * 12.), .175, 8.);\n\n        vec4 color = vec4(0);\n        if (gear1 > 0.)\n        {\n            color = mix(\n                vec4(rainbow(depth*.1),1),\n                vec4(rainbow(depth*.1)*.6,1),\n                saturate(gear2*30.+.5)\n            );\n        }\n        else if (gear3 > 0.)\n        {\n            color = vec4(rainbow(depth*.1)*.1,1);\n        }\n        color = saturate(color);\n\n        out_color = mix(out_color, color, color.a) * pow(.997, depth*depth);\n    }\n    out_color = pow(out_color, vec4(.4));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}