{
    "Shader": {
        "info": {
            "date": "1523539442",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "MdGcDc",
            "likes": 8,
            "name": "VoxelRayCaster",
            "published": 3,
            "tags": [
                "voxel"
            ],
            "usePreview": 0,
            "username": "menackni",
            "viewed": 813
        },
        "renderpass": [
            {
                "code": "//perlin noise from here https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n//rayCast from here https://www.shadertoy.com/view/4tlfDn\n\nfloat rayMaxDis(){return 84.0;}\nfloat noisePower(){return 184.0;}\n\nfloat seed=42.0;\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(.0, .0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(.0, .0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0);\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0;\n  vec4 gy = abs(gx) - .5;\n  vec4 tx = floor(gx + .5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159-.85373472095314 * \n  vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xyx).xy;\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P);\n  vec3 Pi1 = mod(Pi0+1.0, seed);\n       Pi0 = mod(Pi0, seed);\n  vec3 Pf0 = fract(P);\n  vec3 Pf1 = Pf0-1.0;\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - .5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(.0, gx0) - .5);\n  gy0 -= sz0 * (step(.0, gy0) - .5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - .5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(.0));\n  gx1 -= sz1 * (step(.0, gx1) - .5);\n  gy1 -= sz1 * (step(.0, gy1) - .5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = inversesqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = inversesqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nvec4 map(in vec3 p){\n    float n=cnoise(vec2(p.x/87.0,p.z/87.0));\n\tfloat nn=0.0;\n\tnn=n*(n*2.0*noisePower());\n\tfloat minus=60.0;\n\tif((p.y*4.0)-minus>nn){\n\t    vec4(0.0,0.0,0.0,0.0);\n\t    if((p.y)<=17.0){\n\t\t    float m=0.0;\n            m=cnoise(vec2((p.x+(0.9*iTime*5.0))/3.0,p.z/3.0));\n            return vec4(mix(0.4,m/2.0,0.4),mix(0.7,m,0.1),1.0,1.0);\n\t    }\n\t}else if((p.y)<=18.0){\n\t\tif(((p.y+4.0)*4.0)-minus>nn){\n            float m=cnoise(vec2(p.x/3.0,p.z/3.0));\n            return vec4(mix(1.0,m,0.1),mix(1.0,m,0.1),mix(0.6,m,0.1),1.0);\n\t\t}else{\n            float m=cnoise(vec2((p.x+100.0)/3.0,p.z/3.0));\n            return vec4(mix(0.5,m,0.1),mix(0.5,m,0.1),mix(0.5,m,0.1),1.0);\n\t\t}\n\t}else{\n\t    if(((p.y+1.0)*4.0)-minus>nn){\n            float m=cnoise(vec2(p.x/7.0,p.z/7.0));\n            return vec4(mix(0.1,m,0.1),mix(0.7,m,0.1),mix(0.2,m,0.1),1.0);\n\t\t}else \n\t\tif(((p.y+4.0)*4.0)-minus>nn){\n            float m=cnoise(vec2(p.x/3.0,p.z/3.0));\n            return vec4(mix(0.7,m,0.1),mix(0.6,m,0.1),mix(0.1,m,0.1),1.0);\n\t\t}else{\n            float m=cnoise(vec2((p.x-100.0)/3.0,p.z/3.0));\n            return vec4(mix(0.5,m,0.1),mix(0.5,m,0.1),mix(0.5,m,0.1),1.0);\n\t\t}\n\t}\n    return vec4(0.0,0.0,0.0,0.0);\n}\n\nvec4 clouds(in vec3 eye,in vec3 ray) {\n    if(ray.y<.0){\n        return vec4(0,0,1,1);\n    }\n    vec3 pos = floor(eye);\n    vec3 ri = 1.0 / ray;\n    vec3 rs = sign(ray);\n    vec3 ris = ri * rs;\n    vec3 dis = (pos - eye + 0.5 + rs * 0.5) * ri;\n    vec3 dim = vec3(.0);\n    float accamulate=.0;\n    \n    \n    for(int i=0;i<8;i++){\n        if(length(eye-pos)>8.0){\n            break;\n        }\n        if(accamulate>=1.0){\n           break;\n        }\n        \n        float nois=cnoise(vec3(pos.x+(iTime),pos.y,pos.z)/32.0);\n        accamulate+=nois/2.0;\n        \n        nois=cnoise(vec3(pos.x+(iTime),pos.y,pos.z)/4.0);\n        accamulate+=nois/4.0;\n        \n        dim = step(dis, dis.yzx);\n\t\tdim *= (1.0 - dim.zxy);\n        \n        dis += dim * ris;\n        pos += floor(dim * rs);\n    }\n\n\treturn vec4(mix(0.0,accamulate,ray.y),mix(0.0,accamulate,ray.y),1.0,1.0);\n}\n\nvec4 castRay(in vec3 eye,in vec3 ray,in float mDis) {\n    vec3 pos = floor(eye);\n    vec3 ri = 1.0 / ray;\n    vec3 rs = sign(ray);\n    vec3 ris = ri * rs;\n    vec3 dis = (pos - eye + 0.5 + rs * 0.5) * ri;\n    \n    vec3 dim = vec3(0.0);\n    for (float i = 0.0; i < mDis*2.0; ++i) {\n        if(length(eye-pos)>mDis){\n            break;\n        }\n        if(map(pos).w>0.0){\n            return map(pos);\n        }\n    \n        dim = step(dis, dis.yzx);\n\t\tdim *= (1.0 - dim.zxy);\n        dis += dim * ris;\n        pos += dim * rs;\n    }\n\n\treturn clouds(pos,ray);\n}\n\nmat2 rot2(float a){\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    vec3 r1=vec3(uv.x,uv.y,1.0);\n    vec3 r=r1;\n         r.yz*=rot2(sin(iTime*0.35)/4.0);\n         r.xz*=rot2(sin(iTime*0.35)/8.0);\n    \n    vec3 o=vec3(sin(iTime*1.0)/2.0,0,iTime*8.0);\n    \n    float n=cnoise(vec2(o.x/87.0,o.z/87.0));\n    float nn=n*(n*1.0*noisePower());               \n    o=vec3(o.x,20.0+nn,o.z);\n    \n    fragColor=castRay(o, r, rayMaxDis());\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}