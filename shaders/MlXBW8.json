{
    "Shader": {
        "info": {
            "date": "1514023318",
            "description": "a voxel buffer with colour and alpha channel",
            "flags": 32,
            "hasliked": 0,
            "id": "MlXBW8",
            "likes": 5,
            "name": "voxel buffer",
            "published": 3,
            "tags": [
                "3d",
                "voxel",
                "buffer"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 690
        },
        "renderpass": [
            {
                "code": "#define rot(spin) mat2(sin(spin),cos(spin),cos(spin),-sin(spin))\n\nvec2 iBox( in vec3 ro, in vec3 rd, in float rad ) \n{\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    \n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\n\t//vec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n\treturn vec2(max(tN,0.0), tF);\n}\n\nvec2 from3dto2d(vec3 p, float res) {\n    float pixel = p.x+p.y*res+p.z*res*res;\n    vec2 coord = vec2(0);\n    coord.x = mod(pixel,iResolution.x);\n    coord.y = mod(floor(pixel/iResolution.x),iResolution.y);\n    return coord;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float res = floor(pow(iResolution.x*iResolution.y,1.0/3.0));\n    \n    vec4 pos1 = texelFetch(iChannel0,ivec2(0,0),0);\n    vec4 pos2 = texelFetch(iChannel0,ivec2(1,0),0);\n    \n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 pos = vec3(0.0,0.0,-res*0.7);\n    vec3 dir = normalize(vec3(uv,1.0));\n    dir.yz *= rot(-iMouse.y/iResolution.y*3.14);\n    pos.yz *= rot(-iMouse.y/iResolution.y*3.14);\n    dir.xz *= rot(-iMouse.x/iResolution.x*6.28);\n    pos.xz *= rot(-iMouse.x/iResolution.x*6.28);\n    pos += res*0.5;\n    vec2 box = iBox(pos-res*0.5,dir,res*0.5-1.0);\n    pos += dir*box.x;\n    vec3 floorpos = floor(pos);\n    vec3 signdir = sign(dir);\n    vec3 invdir = 1.0/(abs(dir)+0.0001);\n    vec3 mask;\n    vec3 dists = abs(-signdir*0.5-0.5+pos-floorpos)*invdir;\n    float colorsize = 0.0;\n    fragColor = vec4(0.0);\n    float dist = box.x;\n    \n    float visibility = 1.0;\n    \n    float maxdist = length(vec3(res*2.0));\n\n    float trans = 0.0;\n    \n    while(dist < box.y) {\n        mask = vec3(lessThanEqual(dists,min(dists.yzx,dists.zxy)));\n        float len = dot(mask,dists)/dot(mask,vec3(1));\n        \n        dist += len;\n        vec4 data = texelFetch(iChannel1,ivec2(from3dto2d(floorpos,res)),0);\n        data.a*=len;\n        fragColor.xyz += data.xyz*data.a*(1.0-trans);\n        trans += data.a*(1.0-trans);\n        \n        pos += len*dir;\n        floorpos += mask*signdir;\n        dists -= len;\n        dists += mask*invdir;\n    }\n    \n    fragColor += vec4(abs(uv*0.3),0.5,1)*(1.0-trans);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define length2(x) dot(x,x)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    if (coord.y == 0) {\n        if (coord.x < 2) {\n            vec3 pos = texelFetch(iChannel0, coord, 0).xyz;\n            vec3 pos2;\n            if (coord.x == 0)\n            \tpos2 = texelFetch(iChannel0, ivec2(1,0), 0).xyz;\n            else\n                pos2 = texelFetch(iChannel0, ivec2(0,0), 0).xyz;\n            \n            vec3 velocity = texelFetch(iChannel0, coord+ivec2(2,0), 0).xyz;\n            \n            vec3 gravdir = normalize(pos2-pos)/max(length2(pos2-pos),0.5)*0.001;\n            velocity += gravdir;\n            \n            pos += velocity*2.0;\n            fragColor = vec4(pos,0);\n            if (iFrame == 0) {\n                if (coord.x == 0)\n                \tfragColor = vec4(-1,-1,0,0);\n                if (coord.x == 1)\n                \tfragColor = vec4(0,0,0,0);\n            }\n            return;\n        }\n        if (coord.x < 4) {\n            vec3 pos;\n            vec3 pos2;\n            if (coord.x == 2) {\n                pos  = texelFetch(iChannel0, ivec2(0,0), 0).xyz;\n            \tpos2 = texelFetch(iChannel0, ivec2(1,0), 0).xyz;\n        \t} else {\n                pos  = texelFetch(iChannel0, ivec2(1,0), 0).xyz;\n                pos2 = texelFetch(iChannel0, ivec2(0,0), 0).xyz;\n            }\n            \n            vec3 velocity = texelFetch(iChannel0, coord, 0).xyz;\n            \n            vec3 gravdir = normalize(pos2-pos)/clamp(length2(pos2-pos),0.5,2.0)*0.001;\n            velocity += gravdir*2.0;\n            \n            fragColor = vec4(velocity,0);\n            if (iFrame == 0) {\n                if (coord.x == 2)\n                \tfragColor = vec4(0.02,-0.01,0.02,0);\n                if (coord.x == 3)\n                \tfragColor = vec4(-0.01,0.02,-0.03,0);\n            }\n        }\n        if (coord.x == 4) {\n            fragColor = texelFetch(iChannel0,ivec2(4,0),0);\n            if (length2(iResolution-texelFetch(iChannel0,ivec2(4,0),0).xyz)>1.0) {\n                fragColor = vec4(iResolution,1);\n            } else {\n                fragColor.a = max(fragColor.a-0.3,0.0);\n            }\n            \n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define length2(x) dot(x,x)\n//line sdf by iq\nfloat line( vec3 p, vec3 a, vec3 b ) \n{\n    vec3 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec3 from2dto3d(vec2 p, float res) {\n    float pixel = p.x+p.y*iResolution.x;\n    vec3 coord = vec3(0);\n    coord.x = mod(pixel,res);\n    coord.y = mod(floor(pixel/res),res);\n    coord.z = floor(pixel/res/res);\n    return coord;\n}\n\nvec2 from3dto2d(vec3 p, float res) {\n    float pixel = p.x+p.y*res+p.z*res*res;\n    vec2 coord = vec2(0);\n    coord.x = mod(pixel,iResolution.x);\n    coord.y = mod(floor(pixel/iResolution.x),iResolution.y);\n    return coord;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if (texelFetch(iChannel0,ivec2(4,0),0).a > 0.5) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    vec2 fcoord = fragCoord-0.5;\n    \n    float res = floor(pow(iResolution.x*iResolution.y,1.0/3.0));\n    \n    vec3 coord = from2dto3d(fcoord, res);\n    \n    vec3 uv = (coord*2.0-res)/res*5.0;\n    \n    fragColor.xyz = mod(coord,2.0);\n    \n    vec3 pos1 = texelFetch(iChannel0,ivec2(0,0),0).xyz;\n    vec3 pos2 = texelFetch(iChannel0,ivec2(1,0),0).xyz;\n    vec3 dir1 = texelFetch(iChannel0,ivec2(2,0),0).xyz;\n    vec3 dir2 = texelFetch(iChannel0,ivec2(3,0),0).xyz;\n    \n    fragColor = clamp(1.0-vec4(line(uv+pos1*0.5+pos2*0.5,pos1,pos2)*4.0),0.0,1.0);\n    \n    coord += 1.0;\n    \n    if (any(greaterThan(coord,vec3(res-1.0)))||any(lessThan(coord,vec3(0)))) discard;\n    \n    fragColor = clamp(fragColor\n        +texelFetch(iChannel1,ivec2(from3dto2d(coord,res)),0)*vec4(0.9,0.85,0.8,0.9),0.0,1.0);\n    \n    /*vec2 uv = (fragCoord.xy*2.0-iResolution.xy) / iResolution.y*2.0;\n    \n    vec2 pos = abs(mod(iTime*vec2(1.0,0.42),2.0)-1.0)*2.0-1.0;\n    \n    vec4 pos1 = texelFetch(iChannel0,ivec2(0,0),0);\n    vec4 pos2 = texelFetch(iChannel0,ivec2(1,0),0);\n    \n    uv += pos1.xy*0.5+pos2.xy*0.5;\n    \n\tfragColor = clamp(1.0-vec4(line(uv,pos1.xy,pos2.xy)*10.0),0.0,1.0);\n\tfragColor = fragColor*0.125+texelFetch(iChannel1,ivec2(fragCoord+(pos1.zw+pos2.zw)*100.0),0)*vec4(0.9925,0.99,0.985,0.98);*/\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}