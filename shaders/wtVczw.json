{
    "Shader": {
        "info": {
            "date": "1610727383",
            "description": "I'm going be using this to model sdfs\nSo I decided to release it",
            "flags": 0,
            "hasliked": 0,
            "id": "wtVczw",
            "likes": 24,
            "name": "My sdf tests",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "shadow",
                "modelling",
                "noiseless"
            ],
            "usePreview": 0,
            "username": "TheNosiriN",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "\nfloat column(vec3 p, float l, float r)\n{\n    float r2 = r*2.0;\n    float r12 = (r+r2)/2.0;\n    float cb = cube(p, vec3(r2, r12/1.25, r2));\n    cb = max(cb, -(length(vec3(p.x-r12, p.y+r12, p.z-r12))-(r2/1.25)) );\n    cb = max(cb, -(length(vec3(p.x+r12, p.y+r12, p.z-r12))-(r2/1.25)) );\n    cb = max(cb, -(length(vec3(p.x-r12, p.y+r12, p.z+r12))-(r2/1.25)) );\n    cb = max(cb, -(length(vec3(p.x+r12, p.y+r12, p.z+r12))-(r2/1.25)) );\n    \n    float cy = cyl(p+vec3(0,l/2.0,0), l/2.0, r);\n    cy = max(cy, -boundingBox(vec3(p.x, p.y+l/2.0, p.z), vec3(r/1.25, l/2.0, r/1.25), 0.25));\n    \n    cb = min(cb, cy);\n    \n    return cb;\n}\n\n\n\n\nfloat tower(vec3 p, float scale)\n{\n    p /= scale;\n    float h = 5.0;\n    float r = 1.0;\n    float rt = r/1.5;\n    \n    //main body\n    float bd = cone(p, h, r, rt);\n    \n    //windows\n    vec3 wnp = p;\n    float wnc = 1.0;\n    float wnh = r*0.2;\n    float wnw = wnh/2.0;\n    float c = pModPolar(wnp.xz, 3.0);\n    wnp.y -= h/2.0;\n    c = pModInterval1(wnp.y, (h*wnh*2.5), -2.0, 0.0);\n    wnp.y -= h*wnh;\n    float wn = cube(wnp, vec3(r*2.0, wnh, wnw));\n    float frame = max(-wn, cube(wnp, vec3(rt+wnw*2.0, wnh*1.5, wnw*1.5)));\n    \n    //arc\n    vec3 arcp = p;\n    float arcw = r/10.0;\n    float arcr = arcw*(h/2.0);\n    c = pModPolar(arcp.xz, 10.0);\n    arcp.y -= h - arcr*4.5;\n    arcp.y /= 3.0;\n    arcp.x -= rt+arcr;\n    vec3 arccylp = arcp+vec3(-arcr,arcr,0);\n    float arccyl = length(arccylp)-(arcr*2.25);\n    float arc = max(-arccyl, cube(arcp, vec3(arcr,arcr*1.5,arcw)));\n    \n    //top body\n    vec3 bd2p = p;\n    bd2p.y -= h;\n    float bd2r = rt+arcr*2.0;\n    float bd2 = cyl(bd2p, h/40.0, bd2r);\n    \n    //bars\n    vec3 barp = bd2p;\n    c = pModPolar(barp.xz, 40.0);\n    barp.x -= bd2r;\n    float bar = cyl(barp-vec3(0,wnh*1.25,0), wnh*1.25, rt/40.0);\n    vec3 bar2p = bd2p;\n    bar2p.y -= (wnh*2.5)/1.5;\n    c = pModInterval1(bar2p.y, (wnh*2.5)/4.0, 0.0, 1.0);\n    float bar2 = torus(bar2p, vec2(bd2r,rt/40.0));\n    \n    //house\n    vec3 hsp = bd2p;\n    float hsph = wnh*2.5;\n    float hspr = bd2r/2.0;\n    hsp.y -= hsph/1.8;\n    float hs = octagon(hsp, hsph/2.0, hspr);\n    c = pModPolar(hsp.xz, 8.0);\n    hsp.x -= hspr*0.95;\n    hsp.y += hsph/2.0;\n    float hbar = cyl(hsp, hsph*2.0, hspr/10.0);\n    vec3 rfp = bd2p;\n    rfp.y -= hsph*1.8;\n    float roof = max(length(rfp)-hspr*1.2, -cube(rfp+vec3(0,hsph*1.25,0), vec3(hspr*1.3)));\n    rfp.y -= hspr*1.2;\n    roof = minr(roof, cyl(rfp, h/10.0, hspr/20.0), hspr/2.0);\n    \n    \n    //comp\n    bd = max(bd, -wn);\n    bd = min(bd, frame);\n    bd = minr(bd, arc, arcr/2.0);\n    bd2 = min(bd2, min(bar, bar2));\n    bd2 = min(bd2, min(hs, min(hbar, roof)));\n    bd = min(bd, bd2);\n    \n    return bd*scale;\n}\n\n\n\nfloat fbm(vec2 p, int oct)\n{\n    float d = 0.0;\n    float a = 1.0;\n    p *= 0.05;\n    float dist = pow(smoothstep(0.5, 1.0, 1.0-(length(p)-0.1)), 5.0);\n    for (int i=0; i<oct; i++){\n        //do we really need perlin noise??\n        float n = textureLod(iChannel0, p, 0.0).r;\n        d += n * a * dist;\n        p = M2*p*2.0+dist*0.5;\n        a *= 0.5;\n    }\n    return d;\n}\n\n\n\n\nfloat idk(vec3 p, vec3 n)\n{\n    p *= 0.01;\n    float f = 0.0;\n    f += 0.5000 * triplanarMap(iChannel0, p, n, 1.0).r; p = M3*p*2.02+f*0.5;\n    f += 0.2500 * triplanarMap(iChannel0, p, n, 1.0).r; p = M3*p*2.03+f*0.5;\n    f += 0.1250 * triplanarMap(iChannel0, p, n, 1.0).r;\n    return (f/0.875);\n}\n\n\n\n\nfloat scene(vec3 p)\n{\n    float d = MAX_DIST;\n    p *= 2.0;\n    float cb = max(p.y-pow(fbm(p.xz, 3), 0.5)*3.0, length(p)-10.0);\n    cb = min(cb, tower(p-vec3(0,6,0),1.0));\n    //tower(p, 1.0);//column(p, 10.0, 1.0);\n    //float cb = p.y - (idk(p, vec3(0,1,0))*10.0);\n    \n    //float cb = floor(length(p)*20.0)/20.0-8.0;\n    \n    d = min(d, cb/2.);\n    return d;\n}\n\n\n\n\nfloat raymarch(vec3 eye, vec3 dir)\n{\n    float depth = 0.0;\n    float info = 0.0;\n    float stepsf = float(MAX_MARCHING_STEPS);\n    for (int i=0; i<MAX_MARCHING_STEPS && depth<MAX_DIST; i++){\n        vec3 p = eye + depth * dir;\n        info = scene(p);\n        if (abs(info) < EPSILON * depth)break;\n        depth += info * remap(float(i),0.0,stepsf,0.1,1.0);\n    }\n    return depth;\n}\n\n\n\n\nfloat shadow(vec3 eye, vec3 dir) {\n    float res = 1.0;\n    float depth = 0.0;\n    float ph = 1e10;\n    for( int i=0; i<32 && depth<MAX_DIST; i++ ){\n     \tvec3 p = eye + dir * depth;\n        float h = scene(p);\n        if (h < 0.0){ return 0.0; }\n        \n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, 10.0*d/max(0.0,depth-y) );\n        \n        depth += h;\n    }\n\n    return res;\n}\n\n\n\n\n\n\n\nvec3 normal(vec3 p)\n{\n \tvec3 P = vec3(-4, 4, 0) * EPSILON;\n \treturn normalize(\n        scene(p+P.xyy) * \n        P.xyy + scene(p+P.yxy) * \n        P.yxy + scene(p+P.yyx) * \n        P.yyx + scene(p+P.xxx) * \n        P.xxx\n    );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 eye = rotateCamera(30.0, iMouse.xy/iResolution.xy, iMouse);\n    \n    //vec3 eye = vec3(10.0, 20.0, -200.0);\n    vec3 lookAt = vec3(0.0, 0.0, 0.0);\n    vec3 light = normalize(vec3(0.0, 0.25, 1.0));\n    \n    mat4 viewToWorld = viewMatrix(eye, lookAt, vec3(0.0, 1.0, 0.0));\n    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 worldDir = (viewToWorld * vec4(dir, 0.0)).xyz;\n    \n    vec3 col = vec3(0);\n    \n    float dist = raymarch(eye, worldDir);\n    vec3 P = eye + worldDir * dist;\n    vec3 N = normal(P);\n    float shading = saturate(dot(N, light));\n    if (shading >= 0.0){ shading *= shadow(P,light); }\n    \n    col += (shading+0.5)*(dist/MAX_DIST);\n    if (dist >= MAX_DIST){ col = vec3(0.5); }\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    col *= 0.3 + 0.8*pow(32.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y),0.2);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int MAX_MARCHING_STEPS = 256;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 50.0;\nconst float EPSILON = 0.001;\n\n\n\n\n#define PI 3.1415972\n#define dot2(x) dot(x,x)\n#define M2 mat2(0.8,-0.6,0.6,0.8)\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define M3 mat3(0.00,0.80,0.60,-0.80,0.36,-0.48,-0.60,-0.48,0.64)\n\n\n\n\n\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\n\n\nvec3 rotateCamera(float len, vec2 m, vec4 mouse)\n{\n    float phi = m.x * PI * 2.0;\n    if(mouse.x < 0.5){\n        phi = PI * 0.1;\n    }\n    \n    float psi = m.y * PI;\n    if(mouse.y < 0.5){\n        psi = 0.33 * PI;\n    }\n    return len * vec3(cos(phi)*sin(psi), cos(psi), sin(phi)*sin(psi));\n}\n\n\n\n\n//functions from: http://mercury.sexy/hg_sdf/\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.0*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.0;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.0;\n\tp = vec2(cos(a), sin(a))*r;\n\tif (abs(c) >= (repetitions/2.0)) c = abs(c);\n\treturn c;\n}\nfloat pModInterval1(inout float p, float size, float start, float stop) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p+halfsize, size) - halfsize;\n\tif (c > stop) {\n\t\tp += size*(c - stop);\n\t\tc = stop;\n\t}\n\tif (c <start) {\n\t\tp += size*(c - start);\n\t\tc = start;\n\t}\n\treturn c;\n}\nfloat minr(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n//\n\n\n\n\n\nfloat cyl(vec3 p, float h, float r)\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r, h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat cylside(vec3 p, float h, float r)\n{\n  vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(r, h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat boundingBox( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nfloat cube(vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat cone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\nfloat torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n//Frabrice's octagon: https://www.shadertoy.com/view/4sKfD3\nfloat octagon(vec3 p, float h, float r)\n{\n    vec3 a = abs(p);\n    float t = max(a.x,a.z) -r;\n    t = max(t,(a.x+a.z)/1.41 -r);\n    t = max(t,a.y -h);\n    return t;\n}\n\n\n\n\n\n\nvec3 triplanarMap(sampler2D tex, vec3 p, vec3 n, float scale)\n{\n    p *= scale;\n    \n    return  (texture(tex,p.xy).rgb*n.z*n.z\n            +texture(tex,p.zy).rgb*n.x*n.x\n            +texture(tex,p.xz).rgb*n.y*n.y);\n}\n\n\n\nfloat remap(float val, float OldMin, float OldMax, float NewMin, float NewMax){\n    return (((val - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}