{
    "Shader": {
        "info": {
            "date": "1676526201",
            "description": "Distance to a Hyperbola, which is just the y(x)=k/x curve rotated 45 degrees. See [url]https://www.shadertoy.com/view/ftcyW8[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "DtjXDG",
            "likes": 30,
            "name": "Hyperbola - distance",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "hyperbola"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1147
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2023 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a Hyerbola, which is just the y(x)=k/x curve rotated 45 degrees.\n//\n// Minimizing the distance squared D² = (x-t)²+(y-k/t)² produces\n//\n// t⁴ - xt³ + kyt - k² = 0\n//\n// which can be solved with the quartic formula, as described in Wikipedia:\n// https://en.wikipedia.org/wiki/Quartic_equation. I followed the \n// section \"Summary of Ferrari's method\" and simplified a lot of things\n// (complex branches to reals, trigonometrics, constant unfolding, etc)\n// until I got this expression.\n//\n// Based on https://www.shadertoy.com/view/ftcyW8\n//\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n// and iquilezles.org/articles/distfunctions2d\n\n\nfloat sdHyberbola( in vec2 p, in float k, in float he ) // k in (0,inf)\n{\n    // symmetry and rotation\n    p = abs(p);\n    p = vec2(p.x-p.y,p.x+p.y)/sqrt(2.0);\n\n    // distance to y(x)=k/x by finding t in such that t⁴ - xt³ + kyt - k² = 0\n    float x2 = p.x*p.x/16.0;\n    float y2 = p.y*p.y/16.0;\n    float r = k*(4.0*k - p.x*p.y)/12.0;\n    float q = (x2 - y2)*k*k;\n    float h = q*q + r*r*r;\n    float u;\n    if( h<0.0 )\n    {\n        float m = sqrt(-r);\n        u = m*cos( acos(q/(r*m))/3.0 );\n    }\n    else\n    {\n        float m = pow(sqrt(h)-q,1.0/3.0);\n        u = (m - r/m)/2.0;\n    }\n    float w = sqrt( u + x2 );\n    float b = k*p.y - x2*p.x*2.0;\n    float t = p.x/4.0 - w + sqrt( 2.0*x2 - u + b/w/4.0 );\n\n    // comment this line out for an infinite hyperbola\n    t = max(t,sqrt(he*he*0.5+k)-he/sqrt(2.0));\n\n    // distance from t\n    float d = length( p-vec2(t,k/t) );\n\n    // sign\n    return p.x*p.y < k ? d : -d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    const float scale = 3.0;\n    \n\tvec2  p = scale*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2  m = scale*(2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float px = scale*2.0/iResolution.y;\n    \n    // animate hyperbola\n    float an = smoothstep(-0.2,0.2,sin(iTime*0.5+0.2));\n    float k = 3.0 + 2.98*sin(iTime*1.0);\n    float h = 0.8 + 5.0*an;\n\n    // distance\n    float d = sdHyberbola(p,k,h);\n    \n    // colorize\n    const vec3 colA = vec3(0.90,0.60,0.3);\n    const vec3 colB = vec3(0.65,0.85,1.0);\n    vec3 col = mix( colA, (d>0.0) ? colA : colB, an );\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.7 + 0.2*cos(50.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,3.0*px,abs(d)) );\n    \n     // mouse\n    if( iMouse.z>0.001 )\n    {\n        float d = sdHyberbola(m, k,h);\n        float l = length(p-m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 2.0*px, abs(l-abs(d))-0.005));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 2.0*px, l-0.05));\n    }\n    \n\tfragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}