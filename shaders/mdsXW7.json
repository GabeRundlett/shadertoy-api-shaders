{
    "Shader": {
        "info": {
            "date": "1669060826",
            "description": "clock i guess time is in UTC (universal time coordinated)",
            "flags": 0,
            "hasliked": 0,
            "id": "mdsXW7",
            "likes": 1,
            "name": "simple clock #2",
            "published": 3,
            "tags": [
                "clock"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "const float n_tau = 6.283185;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_pix_coo_nor = ( fragCoord.xy - iResolution.xy*0.5) / iResolution.y;\n    //matrix rotation \n    float n_rot_radia = n_tau/4.;\n\n    float n_angle_nor = (atan( o_pix_coo_nor.x , o_pix_coo_nor.y)+(n_tau/2.))/n_tau;\n    \n    float n_dist_center = length(o_pix_coo_nor);\n    \n    float n_dist_angle = smoothstep(n_dist_center, n_dist_center, n_angle_nor);\n    \n    float n_t_yea = floor(iDate.x);//year-1\n    float n_t_mon = floor(iDate.y);//month-1\n    float n_t_day = floor(iDate.z);//day-1\n    float n_t_sec = floor(iDate.w);//secs since midnight\n    float n_t_min_nor = fract(n_t_sec/60./60.);\n    float n_t_hou = floor(n_t_sec/60./60.);\n    float n_rot_nor = 0.0;\n    float n_ang_sec_nor = mod(-(1./60.)*n_t_sec+n_rot_nor,1.);\n    float n_ang_min_nor = mod(-n_t_min_nor+n_rot_nor,1.);\n    float n_ang_hou_nor = mod(-(1./24.)*n_t_hou+n_rot_nor,1.);\n    \n    float n_radius_sec = min(0.5, n_dist_center);\n    float n_radius_min = min(0.25, n_dist_center);\n    float n_radius_hou = min(0.1, n_dist_center);\n\n    float n_dist2_sec = length( o_pix_coo_nor - vec2(\n        n_radius_sec * cos(n_ang_sec_nor*n_tau),\n        n_radius_sec * sin(n_ang_sec_nor*n_tau)\n    ));\n    n_dist2_sec = sqrt(n_dist2_sec);\n    float n_dist2_min = length( o_pix_coo_nor - vec2(\n        n_radius_min * cos(n_ang_min_nor*n_tau),\n        n_radius_min * sin(n_ang_min_nor*n_tau)\n    ));\n    n_dist2_min = sqrt(n_dist2_min);\n    \n    float n_dist2_hou = length( o_pix_coo_nor - vec2(\n        n_radius_hou * cos(n_ang_hou_nor*n_tau),\n        n_radius_hou * sin(n_ang_hou_nor*n_tau)\n    ));\n    \n    n_dist2_hou = sqrt(n_dist2_hou);\n    \n    fragColor = vec4(\n        n_dist2_sec*5.,\n        n_dist2_min*5.,\n        n_dist2_hou*5., \n        1.\n    );\n    \n    \n }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}