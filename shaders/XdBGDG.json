{
    "Shader": {
        "info": {
            "date": "1392656432",
            "description": "I've always liked this old-school voxel stuff, but is it useful?\n2D integer voxel traversal culled from Graphics Gems IV:-\nhttps://webdocs.cs.ualberta.ca/~graphics/books/GraphicsGems/gemsiv/vox_traverse.c\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XdBGDG",
            "likes": 43,
            "name": "Integer voxel traversal",
            "published": 3,
            "tags": [
                "2d",
                "ray",
                "voxel",
                "traversal"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 3055
        },
        "renderpass": [
            {
                "code": "// Integer voxel traversal\n\n// From Graphics Gems IV \n// \"Voxel Traversal along a 3D Line\" ðŸ‘€\n// https://www.realtimerendering.com/resources/GraphicsGems/gemsiv/vox_traverse.c\n#define RES 128.0\n\n//===================================================================================\nfloat visitVoxel (vec2 uv, ivec2 pos)\n{\n\tivec2 pix = ivec2(uv * RES);\n\treturn float((pix == pos));\n}\n\n//===================================================================================\nfloat Line2D(vec2 uv, ivec2 pos, ivec2 dir)  \n{  \n\tfloat c = 0.0;\n\tivec2 s, a, b;\n\t\n    s = sign(dir);\n    dir = abs(dir);\n\n\tb = dir + dir;\n\tint e   = dir.y - dir.x;\n    int len = (dir.x + dir.y);\n\t// This is the traversal...\n    for (int i = 0; i < len; i++)\n\t{\n\t\tc += visitVoxel(uv, pos);\n\t\tif (e < 0)\n\t\t{  \n\t\t\tpos.x += s.x;  \n\t\t\te += b.y;\n\t\t}  \n\t\telse\n\t\t{  \n\t\t\tpos.y += s.y;  \n\t\t\te -= b.x;\n\t\t}  \n    } \n\treturn c;\n} \n\n\n//===================================================================================\n// This is the 3D voxel version...\nfloat Line3D(vec2 uv, ivec3 pos, ivec3 dir)  \n{  \n    float c = 0.0;\n\tivec3 s, a, b;\n\t\n    s = sign(dir);\n\n    a = abs(dir);\n\n\tb = a + a;\n\tivec3 e  = ivec3(a.y-a.x,  a.z-a.x, a.y-a.z);\n\t\n    int len = (a.x + a.y);\n\t// This is the traversal...\n    for (int i = 0; i < len; i++)\n\t{\n\t\tc += visitVoxel(uv, pos.xy);  \n\t\tif ( e.x < 0 )\n\t\t{  \n\t\t\tif ( e.y < 0 )\n\t\t\t{  \n\t\t\t\tpos.x += s.x;  \n\t\t\t\te.x += b.y;\n\t\t\t\te.y += b.z;  \n\t\t\t}  \n\t\t\telse\n\t\t\t{  \n\t\t\t\tpos.z += s.z;  \n\t\t\t\te.y -= b.x;\n\t\t\t\te.z += b.y;  \n\t\t\t}  \n\t\t}  \n\t\telse\n\t\t{  \n\t\t\tif ( e.z < 0 )\n\t\t\t{  \n\t\t\t\tpos.z += s.z;  \n\t\t\t\te.y -= b.x;\n\t\t\t\te.z += b.y;  \n\t\t\t}  \n\t\t\telse\n\t\t\t{  \n\t\t\t\tpos.y += s.y;  \n\t\t\t\te.x -= b.x;\n\t\t\t\te.z -= b.z;  \n            }  \n\t\t}  \n    } \n\treturn c;\n} \n\n//===================================================================================\nvoid mainImage( out vec4 colour, in vec2 coord )\n{\n    coord.xy+=.01;\n\tvec2 uv = coord.xy / iResolution.x;\n\tvec2 gr = coord.xy;\n\tfloat aspect = iResolution.y / iResolution.x;\n\tvec2 pixel = vec2(1.0);\n\tpixel.y *= aspect;\n\tgr.y    *= aspect;\n    \n\n\tvec2 gridXY  = step(pixel,  mod(gr, iResolution.xy/RES)) * .75;\n\tvec3 backCol = vec3(gridXY.x*gridXY.y) * vec3(.5)+.15;\n\n\tfloat ang = iTime*2.;\n\t\n\tivec2 beg = ivec2(RES*.5, RES*iResolution.y/iResolution.x *.5);\n    float len = RES*.25;\n    // Spin a line...\n\tivec2 dxy = ivec2(floor(vec2(sin(ang)*len, cos(ang)*len)));\n    // ...dxy includes length of ray\n\t\n\tfloat col = Line2D(uv, beg, dxy);\n//    float col = Line3D(uv, ivec3(beg.x, beg.y, 0), ivec3(dxy.x, dxy.y, 0));\n\t\n\tcolour = vec4(min(backCol+backCol*col*2.0, 1.0), 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}