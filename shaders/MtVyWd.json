{
    "Shader": {
        "info": {
            "date": "1538242458",
            "description": "Mouse to add third charge",
            "flags": 0,
            "hasliked": 0,
            "id": "MtVyWd",
            "likes": 35,
            "name": "Dipole",
            "published": 3,
            "tags": [
                "physics",
                "fields"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 2321
        },
        "renderpass": [
            {
                "code": "#define W 2. // frequency of wiggles\n#define Q 20. // how many wigglers\n#define I 2   // how many bones in each wiggler\n\n\n\nvec2 mouse;\nvec2 hash(vec2 p) // Dave H\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nfloat L (vec2 p, vec2 a, vec2 b, float c) {\n    vec2 ab = b-a;\n    float l = dot(p-a,ab)/dot(ab,ab);\n    p += 0.005*normalize(vec2(-1,1)*ab.yx)*sin(c+W*l);\n    return length(p-a-ab*clamp(l,0.,1.));\n}\nvec2 Z (vec2 U) {\n\tvec2 \n        A = U-0.2*vec2(sin(.5*iTime),cos(.5*iTime)),\n        B = U-0.3*vec2(cos(.321*iTime),sin(.321*iTime)),\n        C = U-mouse;\n    vec2 F = vec2(0);\n    F -= A/dot(A,A)/length(A);\n    F += B/dot(B,B)/length(B);\n    if (iMouse.z > 0.) F += C/dot(C,C)/length(C);\n    return F;\n}\n\nfloat S (vec2 U, vec2 V) {\n    float d = 1e3;\n    V = floor(V*Q+0.5)/Q;\n    vec2 h = hash(V);\n    V += 0.5*(h*2.-1.)/Q;\n    V += 0.5*vec2(sin(iTime+10.*h.y),cos(iTime+10.*h.x))/Q;\n    vec2 z,v = V;\n    for (int i = 0; i < I; i++) {\n        z = Z (V);\n    \tv += 2.*normalize(z)/Q/float(I);\n        d = min(d, 1.5*float(3+i)/float(I+1)*L(U,V,v,-25.*iTime+W*float(i)+100.*h.x));\n        V = v;\n    }\n    return smoothstep(0.02,0.,d);\n}\nfloat E (vec2 U) {\n\tvec2 V = U;\n    float d = 0.;\n    for (int x = -2; x<= 2; x++)\n    for (int y = -2; y<= 2; y++)\n   \t    d += S(U,V + vec2(x,y)/Q);\n    return d;\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 R = iResolution.xy;\n    mouse = iMouse.xy;\n    U = 2.*(U-0.5*R)/R.y;\n    mouse = 2.*(mouse-0.5*R)/R.y;\n    \n    C = vec4(vec3(sin(0.3*vec3(1,2,3)*E(U))),1);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}