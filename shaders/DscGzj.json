{
    "Shader": {
        "info": {
            "date": "1677506833",
            "description": "Recreation of a gif i saw in a chat. It can be regarded as a visualization of a geometric series in the complex numbers.\nhttps://en.wikipedia.org/wiki/Geometric_series\n\nThe ratio of the size of two neighbouring squares is the golden ratio.",
            "flags": 0,
            "hasliked": 0,
            "id": "DscGzj",
            "likes": 22,
            "name": "Complex geometric series",
            "published": 3,
            "tags": [
                "2d",
                "animation",
                "goldenratio",
                "fibonacci",
                "series"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 307
        },
        "renderpass": [
            {
                "code": "const vec3 dot_col = vec3(0);\nconst vec3 circ_col = vec3(0,1,0);\nconst vec3 line_col = vec3(0);\nconst vec3 bg_col = vec3(1);\n\nconst float dot_size = .004;\nconst float line_width = .003;\n\nconst float zoom = 2.;\n\nconst float pi = 3.1415925;\nconst float phi = 1.6180339;\n\nconst float shrink_factor = phi;\n\nmat2 rot(float t){\n\treturn mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nfloat sdBox(vec2 p, float a){\n    vec2 d = abs(p)-a;\n    return abs(length(max(d,0.0)) + min(max(d.x,d.y),0.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tfloat border = 2./iResolution.x;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv -= .5;\n    uv.y *= iResolution.y / iResolution.x;\n\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tmouse -= .5;\n    mouse.y *= iResolution.y / iResolution.x;\n\n\tborder *= zoom;\n\tuv *= zoom;\n\tmouse *= zoom;\n\n\tvec3 color = bg_col;\n\n\tfloat line_dis = 1e38;\n\tfloat point_dis = 1e38;\n\tfloat circ_dis = 1e38;\n\n\tfloat side_length = .1;\n\tvec2 dir = vec2(1,1);\n\tfloat base_radius = shrink_factor/(shrink_factor * shrink_factor - 1.); // this is 1 if shrink_factor is phi\n\tvec2 corner = - dir * 2. * side_length * shrink_factor * base_radius; // put corner of biggest square such that the middle of the circle is (0,0)\n\n\tfloat r0 = 2. * side_length * length(dir) * base_radius;\n\n\tcirc_dis = min(circ_dis, abs(length(uv) - r0) - line_width);\n    \n    float t0 = mod(iTime*.4,4.);\n    float t1 = mix(0.,0.25,smoothstep(0.,1.,t0));\n    t1 = mix(t1,.5,smoothstep(1.,2.,t0));\n    t1 = mix(t1,.75,smoothstep(2.,3.,t0));\n    t1 = mix(t1,1.,smoothstep(3.,4.,t0));\n\n\tfor(int i=0;i<16;i++){\n\t\tline_dis = min(line_dis, sdBox(uv - corner - dir * side_length, side_length) - line_width);\n\t\tpoint_dis = min(point_dis, distance(uv, corner) - dot_size);\n\n\t\tcorner += 2. * dir * side_length;\n\n\t\tside_length /= shrink_factor;\n\t\tdir *= rot(pi / 2.);\n\n\t\tuv -= corner;\n        \n\t\tuv *= rot(t1 * 2. * pi);\n\t\tuv += corner;\n\t}\n\n\t//color = mix(dot_col, color, smoothstep(-border/2., border/2., point_dis));\n\tcolor = mix(circ_col, color, smoothstep(-border/2., border/2., circ_dis));\n    color = mix(line_col, color, smoothstep(-border/2., border/2., line_dis));\n\n\tfragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}