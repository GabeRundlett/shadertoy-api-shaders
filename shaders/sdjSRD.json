{
    "Shader": {
        "info": {
            "date": "1619814429",
            "description": "A bit more challenging but this was one of my few successful attempts at analytic multivariable minimization with anything other than a paraboloid. Should work in 3D if you replace vec2s with vec3s. Now much more compact and efficient.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdjSRD",
            "likes": 16,
            "name": "Closest Points - Bezier & Line",
            "published": 3,
            "tags": [
                "bezier",
                "line",
                "cubic",
                "quadratic",
                "points",
                "closest"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "void update(in vec2 a, in vec2 b, inout vec4 pair, inout float comp, inout bool init) {\n    vec2 ba = b - a; float comp2 = dot(ba, ba);\n    if (init ? (comp2 < comp) : true) { pair = vec4(a, b); comp = comp2; init = true; }\n}\n\n// Evaluates the parametric equation for a bezier curve\n// a(1 - t)^2 + 2b(1 - t)t + ct^2\nvec2 posBezier(in vec2 a, in vec2 b, in vec2 c, in float t) {\n    float tInv = 1.0 - t;\n    return a * tInv * tInv + b * 2.0 * t * tInv + c * t * t;\n}\n\n// Solves for the closest point on a bezier curve\nvec2 closestOnBezier(in vec2 p, in vec2 v1, in vec2 v2, in vec2 v3) {\n    vec2 c1 = p - v1;\n    vec2 c2 = 2.0 * v2 - v3 - v1;\n    vec2 c3 = v1 - v2;\n\n    float t3 = dot(c2, c2);\n    float t2 = dot(c3, c2) * 3.0 / t3;\n    float t1 = (dot(c1, c2) + 2.0 * dot(c3, c3)) / t3;\n    float t0 = dot(c1, c3) / t3;\n\n    float t22 = t2 * t2;\n    vec2 pq = vec2(t1 - t22 / 3.0, t22 * t2 / 13.5 - t2 * t1 / 3.0 + t0);\n    float ppp = pq.x * pq.x * pq.x, qq = pq.y * pq.y;\n\n    float p2 = abs(pq.x);\n    float r1 = 1.5 / pq.x * pq.y;\n\n    if (qq * 0.25 + ppp / 27.0 > 0.0) {\n        float r2 = r1 * sqrt(3.0 / p2), root;\n        if (pq.x < 0.0) root = sign(pq.y) * cosh(acosh(r2 * -sign(pq.y)) / 3.0);\n        else root = sinh(asinh(r2) / 3.0);\n        root = clamp(-2.0 * sqrt(p2 / 3.0) * root - t2 / 3.0, 0.0, 1.0);\n        return posBezier(v1, v2, v3, root);\n    }\n\n    else {\n        float ac = acos(r1 * sqrt(-3.0 / pq.x)) / 3.0;\n        vec2 roots = clamp(2.0 * sqrt(-pq.x / 3.0) * cos(vec2(ac, ac - 4.18879020479)) - t2 / 3.0, 0.0, 1.0);\n        vec2 p1 = posBezier(v1, v2, v3, roots.x), c1 = p - p1;\n        vec2 p2 = posBezier(v1, v2, v3, roots.y), c2 = p - p2;\n        float d1 = dot(c1, c1), d2 = dot(c2, c2);\n        return d1 < d2 ? p1 : p2;\n    }\n}\n\nvec4 closestPointsBezierLine(in vec2 ba, in vec2 bb, in vec2 bc, in vec2 la, in vec2 lb) {\n    vec2 p = ba - 2.0 * bb + bc, q = 2.0 * (bb - ba), r = la - lb, s = ba - la;\n    float c1 = dot(p, p), c2 = 2.0 * dot(p, q), c3 = 2.0 * dot(p, s) + dot(q, q), c4 = dot(r, r),\n          c5 = 2.0 * dot(p, r), c6 = 2.0 * dot(r, q), c7 = 2.0 * dot(q, s), c8 = 2.0 * dot(r, s);\n\n    // Cubic coefficients\n    float a = 4.0 * c1 - c5 * c5 / c4;\n    float b = (3.0 * c2 - 1.5 * c5 * c6 / c4) / a;\n    float c = (2.0 * c3 - (c5 * c8 + 0.5 * c6 * c6) / c4) / a;\n    float d = (c7 - 0.5 * c6 * c8 / c4) / a;\n\n    // Solve for the x coordinate of the minima (cubic solving based on https://en.wikipedia.org/wiki/Cubic_equation)\n    float inflect = b / 3.0, denom = 2.0 * c4, bSq = b * b;\n    vec2 pq = vec2(c - bSq / 3.0, bSq * b / 13.5 - b * c / 3.0 + d);\n    float ppp = pq.x * pq.x * pq.x, qq = pq.y * pq.y;\n\n    float p2 = abs(pq.x);\n    float v1 = 1.5 / pq.x * pq.y;\n\n    vec4 pair; float comp; bool init;\n    if (qq * 0.25 + ppp / 27.0 > 0.0) {\n        float v2 = v1 * sqrt(3.0 / p2), x, y;\n        if (pq.x < 0.0) x = sign(pq.y) * cosh(acosh(v2 * -sign(pq.y)) / 3.0);\n        else x = sinh(asinh(v2) / 3.0);\n        x = -2.0 * sqrt(p2 / 3.0) * x - inflect, y = -((c5 * x + c6) * x + c8) / denom;\n        if (x >= 0.0 && x <= 1.0 && y >= 0.0 && y <= 1.0) update(posBezier(ba, bb, bc, x), la - r * y, pair, comp, init);\n    }\n\n    else {\n        float ac = acos(v1 * sqrt(-3.0 / pq.x)) / 3.0, m = 2.0 * sqrt(-pq.x / 3.0);\n        float x1 = m * cos(ac                ) - inflect, y1 = -((c5 * x1 + c6) * x1 + c8) / denom;\n        if (x1 >= 0.0 && x1 <= 1.0 && y1 >= 0.0 && y1 <= 1.0) update(posBezier(ba, bb, bc, x1), la - r * y1, pair, comp, init);\n        float x2 = m * cos(ac - 2.09439510239) - inflect, y2 = -((c5 * x2 + c6) * x2 + c8) / denom;\n        if (x2 >= 0.0 && x2 <= 1.0 && y2 >= 0.0 && y2 <= 1.0) update(posBezier(ba, bb, bc, x2), la - r * y2, pair, comp, init);\n        float x3 = m * cos(ac - 4.18879020479) - inflect, y3 = -((c5 * x3 + c6) * x3 + c8) / denom;\n        if (x3 >= 0.0 && x3 <= 1.0 && y3 >= 0.0 && y3 <= 1.0) update(posBezier(ba, bb, bc, x3), la - r * y3, pair, comp, init);\n    }\n\n    // Minimize along the boundary (0, 0) --> (1, 0) --> (1, 1) --> (0, 1)\n    update(ba, la - r * clamp(dot(la - ba, r) / c4, 0.0, 1.0), pair, comp, init);\n    update(bc, la - r * clamp(dot(la - bc, r) / c4, 0.0, 1.0), pair, comp, init);\n    update(la, closestOnBezier(la, ba, bb, bc), pair, comp, init);\n    update(lb, closestOnBezier(lb, ba, bb, bc), pair, comp, init);\n\n    return pair;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    float t1 = iTime * 0.5, t2 = iTime, t3 = iTime * 1.25;\n\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    // Bezier control points\n    vec2 ba = vec2(c2, s3) * 0.5;\n    vec2 bb = vec2(s1, s2) * 0.5;\n    vec2 bc = vec2(c3, c1) * 0.5;\n\n    // Line control points\n    vec2 la = vec2(s2, c3) * 0.5;\n    vec2 lb = vec2(s3, c1) * 0.5;\n\n    float d = min(length(uv - closestOnBezier(uv, ba, bb, bc)), sdLine(uv, la, lb));\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(280.0 * d);\n\n    // Lines between control points\n    color = mix(color, vec3(0.0, 0.0, 1.0), smoothstep(unit, 0.0, sdLine(uv, ba, bb) - 0.002));\n    color = mix(color, vec3(0.0, 0.0, 1.0), smoothstep(unit, 0.0, sdLine(uv, bb, bc) - 0.002));\n\n    // Bezier curve\n\tcolor = mix(color, vec3(1.0), smoothstep(unit, 0.0, abs(d) - 0.002));\n\n    // Bezier control points\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - ba) - 0.015));\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - bb) - 0.015));\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - bc) - 0.015));\n\n    // Line control points\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - la) - 0.015));\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - lb) - 0.015));\n\n    // Closest points\n    vec4 closest = closestPointsBezierLine(ba, bb, bc, la, lb);\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, length(uv - closest.xy) - 0.015));\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, length(uv - closest.zw) - 0.015));\n\n    // Shortest segment between\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, sdLine(uv, closest.xy, closest.zw) - 0.002));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}