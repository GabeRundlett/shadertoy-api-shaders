{
    "Shader": {
        "info": {
            "date": "1685019158",
            "description": "Bouncing Rainbow Ball",
            "flags": 8,
            "hasliked": 0,
            "id": "mlcXzH",
            "likes": 4,
            "name": "Bouncing Rainbow Ball",
            "published": 3,
            "tags": [
                "ball",
                "rainbow",
                "bouncing"
            ],
            "usePreview": 0,
            "username": "jtb1977",
            "viewed": 198
        },
        "renderpass": [
            {
                "code": "vec3 rgb(float lng) {\n  float h = mod(6.0 * lng / DOUBLE_PI, 6.0);\n  float x = 1.0 - abs(mod(h, 2.0) - 1.0);\n  if (h < 1.0)\n    return vec3(1.0, x, 0.0);\n  if (h < 2.0)\n    return vec3(x, 1.0, 0.0);\n  if (h < 3.0)\n    return vec3(0.0, 1.0, x);\n  if (h < 4.0)\n    return vec3(0.0, x, 1.0);\n  if (h < 5.0)\n    return vec3(x, 0.0, 1.0);\n  return vec3(1.0, 0.0, x);\n}\n\nvec2 circleDistance(in vec2 cur, in vec2 origin, in float size) {\n    float aspect = iResolution.x / iResolution.y;\n    return (cur - origin) / size * vec2(aspect, 1.0);\n}\n\nvec2 inverseProject(in vec2 circle) {\n    float cosC = sqrt(1.0 - pow(length(circle), 2.0));\n    float lat = circle.y * HALF_PI;\n    float lng = atan(circle.x / cosC);\n    return vec2(lat, lng);\n}\n\nvec3 rainbowBall(in vec2 cur, in vec2 origin, in float size, in float latBase) {\n    vec2 circle = circleDistance(cur, origin, size);\n    if (length(circle) > 1.0) return vec3(0.0);\n    vec2 latLng = inverseProject(circle);\n    float lng = latLng[1] + latBase;\n    float shade = sqrt(1.0 - pow(length(circle), 2.0));\n    float p = mod(latLng[0], PARALLEL) < 0.015 || mod(latLng[1] + latBase, PARALLEL) < 0.015 ? 0.8 : 1.0;\n    return p * shade * rgb(lng);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 scaled = fragCoord / iResolution.xy;\n    float xRange = 0.5 - 0.3 * iResolution.y / iResolution.x;\n    vec2 origin1 = vec2(0.5, 0.3) + vec2(xRange * cos(X_SPEED * PI * iTime), 0.3 * abs(sin(Y_SPEED * PI *iTime)));\n    float size = 0.2 + 0.1 * sin(iTime);\n    vec3 rb = rainbowBall(scaled, origin1, size, mod(iTime, DOUBLE_PI));\n    if (length(rb) > 0.)\n        fragColor = vec4(rb, 1.0);\n    else\n        fragColor = vec4(0.2 + 0.2 * sin(iTime), scaled.y < 0.3 ? 0.3 : 0.2, 0.2, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 note(float freq, float time, float fade) {\n    return vec2(sin(DOUBLE_PI * freq * time) * exp(-fade*time));\n}\n\nvec2 fullNote(float freq, float time, float fade, int count) {\n    vec2 total = vec2(0.);\n    for (int i = 0; i < count; i++)\n        total += note(freq * float(i+1), time, fade) * pow(0.5, float(i));\n    return total;\n}\n\nvec2 mainSound( int samp, float time ) {\n    float deltaSinceYBounce = mod(time * Y_SPEED, 1.);\n    int d1 = int(3. - 2. * cos(time * Y_SPEED / 8.));\n    vec2 n1 = fullNote(55., deltaSinceYBounce, 4., d1);\n    \n    float delta2 = mod(deltaSinceYBounce + 0.5, 1.);\n    int d2 = int(2. - 2. * cos(time * Y_SPEED / 4.));\n    vec2 n2 = 0.2 * fullNote(55. * pow(2.,.25), delta2, 8., d2);\n\n    float yBounceTime = time - deltaSinceYBounce;\n    float xBounceRelPos = 0.5 + 0.5 * cos(X_SPEED * PI * yBounceTime);\n    vec2 stereo = vec2(1. - xBounceRelPos, xBounceRelPos);\n\n    return n1 * stereo + n2;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "const float PI = 3.1415926535;\nconst float DOUBLE_PI = PI * 2.;\nconst float HALF_PI = PI / 2.;\nconst float PARALLEL = PI / 12.;\nconst float BPM = 120.;\nconst float Y_SPEED = BPM / 60.;\n\nconst float X_SPEED = 0.5;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}