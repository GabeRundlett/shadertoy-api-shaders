{
    "Shader": {
        "info": {
            "date": "1544005873",
            "description": "Original: Star Nest by Pablo Andrioli (user “Kali” on Shadertoy). \n\nhttps://www.shadertoy.com/view/XlfGRj\n\nStar Nest by Pablo Andrioli (user “Kali” on Shadertoy). \n\n\nhttps://www.defold.com/tutorials/shadertoy/#_the_modified_star_nest_shader\n\n",
            "flags": 64,
            "hasliked": 0,
            "id": "MlKfDy",
            "likes": 12,
            "name": "Modified Star Nest ",
            "published": 3,
            "tags": [
                "startnest"
            ],
            "usePreview": 0,
            "username": "RaduBT",
            "viewed": 1154
        },
        "renderpass": [
            {
                "code": "// Star Nest by Pablo Roman Andrioli\n\n// This content is under the MIT License.\n\n#define iterations 20\n#define formuparam 0.53\n\n#define volsteps 23\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\t\n    \n    vec2 pr = fragCoord.xy/iResolution.xy;\n\n    vec3 col = texture( iChannel0, pr ).xyz;\n    //vec3 col = texelFetch( iChannel0, ivec2(fragCoord-0.5), 0 ).xyz;\n    \n    //col *= 0.08 + 0.6*pow( 16.0*pr.x*pr.y*(1.0-pr.x)*(1.0-pr.y), 0.05 );\n    \n    float fft = 0.5 + 0.6 *(((texture( iChannel0, vec2(uv.y+5.0, 5.0) ).x)) * 2.51);\n\tfloat time=iTime*speed+1.025;\n\t//mouse rotation\n\tfloat a1=.5+iMouse.x/iResolution.x*2.;\n\tfloat a2=.8+iMouse.y/iResolution.y*2.;\n\tmat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n\tmat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n\tdir.xz*=rot1;\n\tdir.xy*=rot2;\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\tfrom.xz*=rot1;\n\tfrom.xy*=rot2;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.5*fft;\n\tvec3 v=vec3(0.)*1.2*fft;\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*fft*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\tv+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01*fft,1.);\t\n\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 20496,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/user-678908875/lp-when-im-over-you-live-at"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}