{
    "Shader": {
        "info": {
            "date": "1700117781",
            "description": "A an arabesque knot pattern with gamelan music.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "dtVyWR",
            "likes": 9,
            "name": "Gamelan synthesizer",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "rug",
                "gamelan"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return\n        abs(fract((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 1.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1;\n    vec2 t2 = vec2(0.);\n    bool b = uv.x>uv.y;\n        \n    for(int k = 0; k < 6; k++){\n\n        //uv.x -= t1_(floor(uv),floor(uv));\n        //uv -= triwave1_(uv);\n\n        //if(uv.y<0.) //amazing pattern!\n        uv =\n            abs(.5+uv+t2)\n        ;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*1.5)-.5)/1.5;\n\n        b =\n            uv.y>uv.x\n        ;\n        if(b)\n        uv =\n            uv.yx\n        ;\n        t2 =\n            -triangle_wave(uv-.5)\n        ;\n        uv =\n            t2-triangle_wave(uv.yx)\n        ;\n        //if(uv.x<-.25)\n        col =\n            vec3(col.zx,max(uv.x-uv.y,0.))\n            //vec3(col.zx*sign(t2.y-t2.x),max(uv.x-uv.y,0.))\n        ;\n        uv +=\n            float(uv.x>uv.y)/1.5\n            //float(uv.x>uv.y&&t2.x>t2.y)/1.5\n            //float(t2.x>t2.y)/1.5\n            //float(uv.x-uv.y)/1.5\n        ;\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float mod1(float a, float b){\n    return\n        mod(a,b)\n        //mod(a+mod(a,b+3.),b)\n    ;\n}\n\n\nvoid distort(inout float a, inout float b){\n    for(float i = 1.; i < mod(floor(a/b),3.); i++){\n        a /= 2.;\n        a += mod1(floor(a/2.),b)*i;\n    }\n}\n\n\nfloat fmod(float a, float b){\n    //distort(a,b);\n    a +=\n        floor(mod1(b/2.,2.))\n    ;\n    /*\n    for(float i = 1.; i < mod(floor(a),8.); i++){\n        a += mod(floor(a/8.),b)*i;\n    }\n    */\n    return\n        mod(mod(floor(a),b)*mod(floor(a/(b)),b),b)\n    ;\n}\n\nfloat prime_rhythm(float time){\n    //time += mod(time,5.)-mod(time,3.);\n    return\n        (1.+fmod(time/4.,2.))/(1.+fmod(time,2.))\n    ;\n}\n\n//change the notes without changing the rhythm\nfloat fmod1(float a, float b){\n    return\n        //fmod(a,b)\n        fmod(a+floor(a/4./4.),b)\n        //max(fmod(a+floor(a/4./4.),b),fmod(a+floor(-a/4./4.),b))\n        //fmod(a,b-fmod(a/2.,2.))\n        //fmod(floor(a)*5.,b+fmod(floor(a/8.)*3.,b))\n    ;\n}\n\n#define fract1(a) (1.-fract(-a)*fract(-a))\n//#define fract1(a) pow(1.-fract(-a)*fract(-a),1.+log(2.)-log(2.-fract(a)*fract(a)))\n//#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\n\nvec2 sitar2(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+a*a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      -log(1./2.+(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 sitar5(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./2.+a*a/2.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 sitar6(vec2 a, vec2 nb){\n    return a*a/16./2.*abs((.5*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -(a/4.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 gamelan(vec2 a, vec2 nb){\na *= a;\nreturn\na/16./2.*abs((1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  + .5*(1./4.+a*a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))/2. \n;\n}\n\nvec2 instrument1(vec2 a, vec2 nb, int instrument){\nvec2 sitar =\n  sitar5(a,nb)\n  //sitar2(a,nb)\n  //log(1./4.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y*2.)))/2.))\n  //a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  //-log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.))) \n  \n  ,gamelan = gamelan(a,nb)-gamelan(a,nb/2.)/2.-gamelan(a,nb/4.)/4.\n  ,gamelan1 = a/16./2.*abs(exp(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.)))\n  ,oud = a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n  ,steel_drum = a/16./4.*abs(log(1./2.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n      + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))      \n  ,guitar = a/16./8.*abs(\n      log(1./2.+a*abs(1./8.-.125/2.*abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))))\n      -log(1./2.+a*abs(1./8.-.5*abs(1./2.-vec2(fract1(nb.x*.998),fract1(nb.y)))))\n  )\n  ,synth_drum = a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))*4.))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.)))\n  ;\n  \n  \n  switch(instrument){\n  case 1:return\n      gamelan\n      //gamelan1\n  ;\n  case 2:return oud;\n  case 3:return steel_drum;\n  case 4:return guitar;\n  case 5:return synth_drum;\n  default:\n  return\n\n      sitar\n      \n      //steel_drum\n      \n      //oud\n      \n      //piano\n      //a/16./2.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      //+.5*log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.      \n      \n\n      //a/16.*abs(log(1.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      //+log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))/2.      \n      \n      //a/16.*abs(1./4.+log(1.+a*abs(abs(.5-vec2(fract1(nb.x/2.*.998),fract1(nb.y/2.)))/2.))\n      //+log(1./4.+a*abs(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.  \n      \n      //a/16.*abs(1./4.+log(1.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.))\n      //+log(1./4.+a*abs(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/4.)))/2.   \n      \n      //gamelan\n\n      //gamelan 2\n      //a/16.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      //-.125*log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))/2.      \n  \n      //hurdy-gurdy\n      //((abs(log(1./8.+log(1.+a)*abs(1./16.-abs(.5-vec2(fract1(nb.x*.998*4.),fract1(nb.y*4.)))/2.))-log(1./8.+log(1.+a)*abs(1./16.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))))\n\n      //log(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))*a)\n      \n      //abs(log(abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a/2.))/2.\n      //abs(1.+log(abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a/2.))/2.\n      \n      //log(a*abs(1./4.-abs(.5-vec2(fract1(nb.x+.5),fract1(nb.y*2.)))))\n  ;\n  }\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument,float duration,float attack){\n  \n  float s1 =\n      8.,\n  tempo1 =\n      //1.\n      //divide by prime numbers to get an interesting rhythm\n      prime_rhythm(time/2.)/prime_rhythm(time/4.+4.)\n  ,\n  tempo2=prime_rhythm(time+7.),\n  t = s1*time/4./tempo1,\n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 = fmod(t4,2.),\n  t5 = t*2./tempo2,\n  t3 = (1.+fmod(t5,2.)),\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod(t6+mod(t6/8.,3.)-mod(t6/8.,2.),s1/2.)/2.),\n  m2 =\n      1. + fmod1(t/t3/2.,s1/2.);\n  vec2\n  a= vec2(\n      //-log(fract(t/tempo2)/4.)*4.\n      //-log(fract(t/2./prime_rhythm(time+14.))*fract(t/prime_rhythm(time+7.))/8.)*4.\n      \n      //sitar / gamelan\n      //abs(1.-log(1./64./4.+fract1(t/2./prime_rhythm(time+14.))/4.)),abs(1.-log(1./64./4.+fract1(t/prime_rhythm(time+7.))/4.))\n      \n      //steel drum / oud\n      //-log(attack+fract1(t/2./prime_rhythm(time+14.))/8./duration),-log(attack+fract1(t/tempo2)/8./duration)\n      -log(attack+fract1(t/tempo2)/8./duration)\n      //hurdy-gurdy\n      //(1.-log(1./32.+abs(1./32.-fract1(t/2./prime_rhythm(time+14.))*2.))),(1.-log(1./32.+abs(1./32.-fract1(t/prime_rhythm(time+7.)))))\n\n  ),\n  nb = vec2(\n      t*pow(2.,(m3+m2-t1*4.-fmod(t/16.,2.)*4.)/7.+scale)*tempo1\n      //t*pow(2.,(m3-m2*2.+t1)/7.+6.5)*tempo1\n      \n      //airhorn remix\n      //abs(t*(pow(2.,(m3+m2-t1*4.)/7.+7.5)*tempo1/2.)-a/16.)*2.\n  );\n  return\n      instrument1(a,nb,instrument)\n      //instrument1(a,nb,6)+instrument1(a,nb,instrument)\n  ;\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument,float duration){\n    return mainSound1(samp,time,scale,instrument,duration,1./64.*8.);\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument){\n    return mainSound1(samp,time,scale,instrument,1.);\n}\n\nvec2 violin(int a,float b,float scale,int instrument,float duration,float attack){\n    return\n        (mainSound1(a,b,scale,instrument,duration,attack)-mainSound1(a,b,scale,instrument,duration/2.,attack))\n        -(mainSound1(a,b,scale-1.,instrument,duration,attack)-mainSound1(a,b,scale-1.,instrument,duration/2.,attack))\n    ;\n}\n\nvec2 sitar(int a,float b,float scale,int instrument,float duration,float attack){\n    return\n        (mainSound1(a,b,scale,instrument,duration,attack*8.)-mainSound1(a,b,scale,instrument,duration/2.,attack*8.))\n        -(mainSound1(a,b,scale-1.,instrument,duration,attack)-mainSound1(a,b,scale-1.,instrument,duration/2.,attack))\n    ;\n}\n\nvec2 mainSound(int a,float b){\n    return\n        \n        //tabla drum\n        //(mainSound1(a,b,6.5,1,1./4.)/2./4.+mainSound1(a,b,5.5,1,1./8.))\n        \n        //abs(mainSound1(a,b,6.0,1,1.)-mainSound1(a,b,6.0,1,1.))\n        \n        //gamelan\n        //mainSound1(a,b,6.5,1,1./2.)\n        (mainSound1(a,b,6.+3./7.,1,1.)+2.*mainSound1(a,b,7.+3./7.,4,1./2.))\n        \n        //sitar(a,b,6.25,6,1./3.,1./64./4./4.)\n        //violin(a,b,6.5,6,1./4.,1./64./2.)\n        \n        //using sitar2\n        //(mainSound1(a,b,5.5,6,1./2.)-mainSound1(a,b,4.5,6,2.))\n        \n        //sounds like sitar (using oud)\n        //abs(mainSound1(a,b,7.25,2,1./2.)-mainSound1(a,b,6.25,2,1.)/2.)\n        \n        //mainSound1(a,b,5.5,5,2.)\n\n        \n        //oud remix\n        //(mainSound1(a,b,7.,2)+mainSound1(a,b/2.,6.,2))/2.;\n        \n        //cymbal remix\n        //abs(mainSound1(a,b,7.,3,1./4.)-mainSound1(a,b,6.5,3,1./4.))/2.;\n        \n        //gong remix (with oud)\n        //abs(mainSound1(a,b,7.,1)-mainSound1(a,b,6.5,1))/2.;\n        \n        //echo\n        //abs(mainSound1(a,b,6.5,1)+mainSound1(a,b+1./16.,5.5,1))\n        \n        //(mainSound1(a,b,7.5,1)+mainSound1(a,b,6.5,1)+mainSound1(a,b,5.5,1))/3.\n        //(mainSound1(a,b,7.5,1)+mainSound1(a,b/2.,7.5,1)+mainSound1(a,b/4.,7.5,1))/3.\n        //mainSound1(a,b,6.5,1)+mainSound1(a,b/2.,6.5,1)/2.+mainSound1(a,b/4.,6.5,1)/4.+mainSound1(a,b/8.,6.5,1)/8.\n    ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}