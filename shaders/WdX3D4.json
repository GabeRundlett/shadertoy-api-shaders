{
    "Shader": {
        "info": {
            "date": "1546171896",
            "description": "just testing",
            "flags": 0,
            "hasliked": 0,
            "id": "WdX3D4",
            "likes": 13,
            "name": "simple night sky test 2",
            "published": 3,
            "tags": [
                "sky",
                "stars",
                "nebula",
                "night"
            ],
            "usePreview": 0,
            "username": "uqone",
            "viewed": 1306
        },
        "renderpass": [
            {
                "code": "float hash( const in float n ) {\n\treturn fract(sin(n)*4378.5453);\n}\n\nfloat pnoise(in vec3 o) \n{\n\tvec3 p = floor(o);\n\tvec3 fr = fract(o);\n\t\t\n\tfloat n = p.x + p.y*57.0 + p.z * 1009.0;\n\n\tfloat a = hash(n+  0.0);\n\tfloat b = hash(n+  1.0);\n\tfloat c = hash(n+ 57.0);\n\tfloat d = hash(n+ 58.0);\n\t\n\tfloat e = hash(n+  0.0 + 1009.0);\n\tfloat f = hash(n+  1.0 + 1009.0);\n\tfloat g = hash(n+ 57.0 + 1009.0);\n\tfloat h = hash(n+ 58.0 + 1009.0);\n\t\n\t\n\tvec3 fr2 = fr * fr;\n\tvec3 fr3 = fr2 * fr;\n\t\n\tvec3 t = 3.0 * fr2 - 2.0 * fr3;\n\t\n\tfloat u = t.x;\n\tfloat v = t.y;\n\tfloat w = t.z;\n\n\t// this last bit should be refactored to the same form as the rest :)\n\tfloat res1 = a + (b-a)*u +(c-a)*v + (a-b+d-c)*u*v;\n\tfloat res2 = e + (f-e)*u +(g-e)*v + (e-f+h-g)*u*v;\n\t\n\tfloat res = res1 * (1.0- w) + res2 * (w);\n\t\n\treturn res;\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\nfloat SmoothNoise( vec3 p )\n{\n    float f;\n    f  = 0.5000*pnoise( p ); p = m*p*2.02;\n    f += 0.2500*pnoise( p ); \n\t\n    return f * (1.0 / (0.5000 + 0.2500));\n}\n\n// 2D rotation function\nmat2 rot2D(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec3 getNebula(in vec3 from, in vec3 dir, float level, float power) \n{\n    vec3 color = vec3(0.0);\n    float nebula = pow(SmoothNoise(dir+3.0), 12.0);\n    \n    if (nebula > 0.0)\n    {\n    \tvec3 pos = (dir.xyz + dir.xzy + dir.zyx) / 3.0;\n    \tvec3 randc = vec3(SmoothNoise( dir.xyz*10.0*level));\n\t\tcolor = nebula * randc;\n    }\n\n\treturn pow(color*2.25, vec3(power));\n}\n\nvec3 getStars(in vec3 from, in vec3 dir, float power) \n{\n\tvec3 color = vec3(pow(SmoothNoise(dir*320.0), 16.0));\n\treturn pow(color*2.25, vec3(power));\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n\tvec2 uv = gl_FragCoord.xy / iResolution.xy;\n\tvec2 uvo=(uv-.5)*2.;\n\tvec2 oriuv=uv;\n\tuv=uv*2.-1.;\n\tuv.y*=iResolution.y/iResolution.x;\n\tuv.y-=.03;\n\tvec2 mouse=(iMouse.xy/iResolution.xy-.5)*3.;\n\tmouse.y-=2.;\n\tif (iMouse.z<1.) mouse=vec2(0.,-2.);\n\tvec3 dir=normalize(vec3(uv,.8));\n\tmat2 camrot1=rot2D(mouse.y);\n\tmat2 camrot2=rot2D(mouse.x);\n\tdir.yz*=camrot1;\n\tdir.xy*=camrot2;\n    dir = normalize(dir);\n\tvec3 from=vec3(0.0);\n    \n    vec3 color=clamp(getNebula(from, dir, 1.0, 0.5) * 1.5, 0.0, 1.0) * vec3(0.0, 0.0, 1.0);\n    vec3 color2=clamp(getNebula(from, dir, 2.0, 0.5) * 1.5, 0.0, 1.0) * vec3(0.0, 1.0, 1.0);\n\t\n    vec3 color3=clamp(getNebula(from, -dir, 2.0, 0.5) * 0.9, 0.0, 1.0) * vec3(1.0, 0.0, 0.0);\n    vec3 color4=clamp(getNebula(from, -dir, 3.0, 0.5) * 0.7, 0.0, 1.0) * vec3(1.0, 1.0, 0.0);\n    \n    vec3 color5=clamp(getNebula(from, dir.yxz+dir.yzx, 1.5, 0.5) * 0.9, 0.0, 1.0) * vec3(0.0, 1.0, 0.0);\n    vec3 color6=clamp(getNebula(from, dir.yxz+dir.yzx, 2.5, 0.5) * 0.7, 0.0, 1.0) * vec3(0.333, 0.333, 0.333);\n    \n    vec3 colorStars=clamp(getStars(from, dir, 0.9), 0.0, 1.0);\n    color = color + color2 + color3 + color4 + color5 + color6 + colorStars;\n\tcolor=clamp(color,vec3(0.0),vec3(1.0));\n    color = pow(color, vec3(1.2));\n\tfragColor = vec4(color,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}