{
    "Shader": {
        "info": {
            "date": "1507822283",
            "description": "Cubemap to ERP conversion",
            "flags": 0,
            "hasliked": 0,
            "id": "4tByRm",
            "likes": 4,
            "name": "Cubemap to ERP Conversion",
            "published": 3,
            "tags": [
                "cubemap",
                "environmentmap",
                "equirectangular",
                "erp"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 1042
        },
        "renderpass": [
            {
                "code": "#define PI  (3.14159265359) // pi\n#define PIH (1.57079632679) // half pi\n\n#define COMPACT (1)\n\n#if (COMPACT)\n#define DIR dir_compact\t\n#else\n#define DIR dir\t\n#endif\n\n/* Based on:\n** http://paulbourke.net/miscellaneous/cubemaps/\n**\n** Returns a sampling direction for given pixel coordinates\n** This can obviously be written in a more compact way, but\n** the purpose here is to illustrate the transformation in\n** a clear and easy to follow narrative.\n*/\nvec3 dir(vec2 p)\n{\n    /* First calculate spherical coords (theta, phi, R) on\n\t** 2D plane.\n\t** The mapping is simple:\n\t**\n\t** pixel coords    normalized     spherical coords\n\t** [0:w, 0:h]  ->  [-1:1,-1:1] -> [-pi:pi, -pi/2:pi/2]\n\t*/    \n    vec2 uv = p / iResolution.xy * 2. - 1.;\n    uv.x *= PI;  // phi\n    uv.y *= PIH; // theta\n        \n    /* Calculate a direction from spherical coords:\n\t** R = 1\n    ** x = R sin(phi) cos(theta)\n\t** y = R sin(phi) sin(theta)\n\t** z = R cos(phi)\n\t*/\n    return vec3(cos(uv.x)*cos(uv.y)\n              , sin(uv.y)\n              , sin(uv.x)*cos(uv.y));\n}\n\nvec3 dir_compact(vec2 p)\n{\n    #define r iResolution.xy\n    vec2 s = (p/r*2.-1.) * vec2(PI,PIH); // Spherical coords\n    vec4 t = vec4(sin(s), cos(s));       // Precalculated sin/cos values\n    return t.zyx * vec3(t.w, 1, t.w);    // Conversion to direction\n}\n\nvoid mainImage(out vec4 c, in vec2 p)\n{\n    c = vec4(texture(iChannel0, DIR(p)).xyz, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}