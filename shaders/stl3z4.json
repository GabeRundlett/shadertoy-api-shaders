{
    "Shader": {
        "info": {
            "date": "1621693784",
            "description": "So not 100% fidelity to the bonzomatic but close enough. Can find original glsl here :  https://github.com/totetmatt/shader_summary/blob/main/shader_file_sources/shadow_demoparty_2021/sender_shadow_totetmatt.glsl\n \n",
            "flags": 64,
            "hasliked": 0,
            "id": "stl3z4",
            "likes": 5,
            "name": "大龙猫 - Offworld Colony",
            "published": 3,
            "tags": [
                "jam",
                "demoparty"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 375
        },
        "renderpass": [
            {
                "code": "\n/*\nShader done as a Jam for the Shadow Demoparty 2021.\n\nCheck the others : Evvvvil, z0rg, NuSan, ponk and lamogui that also participated and performed great compo !!!\n\nAlso thanks and cheers to the folks : evvvvil, flopine, psenough, FMS_cat, yx, cosamentale, blackle, antic0re, wrighter, rimina and all the other that I forgot :) \n*/\nvec4 texNoise(vec2 uv,sampler2D tex ){ float f = 0.; f+=texture(tex, uv*.125).r*.5; f+=texture(tex,uv*.25).r*.25; //Funciton simulating the perlin noise texture we have in Bonzomatic shader editor, written by yx\n                       f+=texture(tex,uv*.5).r*.125; f+=texture(tex,uv*1.).r*.125; f=pow(f,1.2);return vec4(f*.45+.05);}\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\n#define fGlobalTime iTime\nfloat box(vec3 p,vec3 b){\n    vec3 q= abs(p)-b;\n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n}\nvec2 sdf(vec3 p){\n   vec3 op = p;\n   float bt = fract(iTime*.01); // This should be fftIntegrated\n  \n   p += vec3(6,3.,-0.0); // Offset the planet, to have some composition\n   p.xy *= rot(-.785); // Rotation of the planet, yes it's cheap trick and not correct but it works\n  \n  float tt = texNoise(vec2(atan(p.x,p.z),p.y)*.025+bt,iChannel2).r; // TexNoise to have the planet geology\n \n \n  float ttt = texture(iChannel1,fract(vec2(atan(p.x,p.z)+tt*6.+fGlobalTime))).r *.15; // Blyatiful\n/*                                ^----^           ^        ^       ^---- So the whole turns around the planet\n                                  ^                ^        ^------------ This will shift the line, with the noise texture, creating a nice effect\n                                  ^                ^--------------------- Spherical projection (as I phrase it, sorry if it's not correct)\n                                  ^-------------------------------------- This is not needed on bonzomatic as the fftTexture is wrapped repeat                        \n*/\n   tt = floor(tt*100.)/100.; // Create the stairs geology effect\n  \n  vec2 h;\n\n  h.x = length(p)-5.-tt; // That's a sphere with the displacement\n  h.y = 1.-(ttt); // Ok here is the dirty secret, When the fft pass a threshold, it will trigger later the glow\n  \n  vec2 t; // Boring stuff, that utlimately finished as a space Auror Borealis\n   \n  op.x -=2.;\n   op.z = mod(op.z,5.)-2.5;\n   op.y +=sin(op.z*5.+bt);\n   op.xy *=rot(fGlobalTime);\n   op.xz *=rot(floor(bt*20.)*1.33);\n  t.x = box(op,vec3(.9)); // Yeah, a cube as a start, was it necessary ? LOL.\n  t.y = 2.;\n  \n  h = t.x < h.x ? t:h;\n  \n  h.y = max(h.y,.1);\n  return h;\n  }\n  \n/* Normal Routine */\nvec2 nv=vec2(-.005,.005);\n#define q(s) s*sdf(p+s).x\nvec3 norm(vec3 p){return normalize(q(nv.xyy)+q(nv.yyx)+q(nv.yxy)+q(nv.xxx));}\n/* End Normal Routine */\n\n// Da Iq Palette color\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(.0,.3,.7)));}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   \n   // The raymarch init\n   vec3 ro=vec3(.0,.0,-7.),rd=normalize(vec3(uv,1.)),rp=ro;\n   vec3 light = vec3(1.,2.,-3.);\n   \n   float bt = texture(iChannel1,vec2(.2)).r*.1; // did I mention I like to abuse texNoise and texFFT ? \n   float tt = texture(iChannel1,vec2(floor(abs(uv.x)*100.)/100.)).r*.01; // in a unreasonable manner ? \n   tt =sqrt(tt)*3.; \n  \n   vec3 col= vec3(tt)*pal(tt*1.); // The background\n  vec3 acc = vec3(0.); // The glow accumulator \n  \n  for(float i=0.;i<=69.;i++){ // LETS MARCH !\n      vec2 d = sdf(rp); // Get the dist\n      \n     if(d.y <=.92){ // Remember the texture trick ? Here we are \n     // This will accumulate only when fft is high enough, like most of us ?\n       acc += pal(d.y*1.2+fGlobalTime*.1)*max(0.,exp(10.*-abs(d.x))/(25.-d.y*20.))*exp(-abs(i/20.));\n       \n     } \n     if(d.y == 2.) { // The right auror borealis\n       \n        acc += vec3(.1,.8,.4)*max(0.,exp(1.*-abs(d.x))/(39.));\n        d.x  = max(0.1,abs(d.x));\n      }\n    \n      rp +=rd*d.x;\n      if(d.x <=.001){ // march to something\n           // Yolo  simple lighting \n           vec3 n = norm(rp);\n           float fre  = pow(1.-dot(-rd,n),5.);\n           if(d.y <=1.){ // only light the planet\n             col = fre*vec3(.1,.5,.8)+vec3(.3)*max(0.,dot(n,normalize(light-rp)));\n             break; // Don't forget to break \n           } \n        }\n    \n    }\n   \n  col+=acc; // add the glow\n  fragColor = vec4(col,1.0); // See you space cowboy\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 27190,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/bubba-zen/07-track-7"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}