{
    "Shader": {
        "info": {
            "date": "1482165551",
            "description": "Basic stateful mouse interaction. Click on the lamp to grab it and move it around.",
            "flags": 32,
            "hasliked": 0,
            "id": "Xl3Gz2",
            "likes": 10,
            "name": "Room with Lamp",
            "published": 3,
            "tags": [
                "mouse",
                "interactive",
                "stateful"
            ],
            "usePreview": 0,
            "username": "glk7",
            "viewed": 779
        },
        "renderpass": [
            {
                "code": "// Created by genis sole - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\nconst float PI = 3.141592;\n\nconst vec3 cam = vec3(-14.0, 14.0, -14.0);\nconst vec3 lamp = vec3(1.0, 4.0, 1.0);\nconst vec3 room = vec3(15.0); \n\n\nconst vec2 POSITION = vec2(1.0, 0.0);\nconst vec2 LIGHT = vec2(2.0, 0.0);\n\n\nbool IRayAABox(in vec3 ro, in vec3 rd, in vec3 invrd, in vec3 b, \n               out vec3 p0, out vec3 p1) \n{\n    vec3 t0 = (-b - ro) * invrd;\n    vec3 t1 = (b - ro) * invrd;\n\n    vec3 tmin = min(t0, t1);\n    vec3 tmax = max(t0, t1);\n    \n    float fmin = max(max(tmin.x, tmin.y), tmin.z);\n    float fmax = min(min(tmax.x, tmax.y), tmax.z);\n    \n    p0 = ro + rd*fmin;\n    p1 = ro + rd*fmax;\n    return fmax >= fmin;   \n}\n\nvec3 AABoxNormal(vec3 b, vec3 p) \n{\n    return step(1e-5, abs(p + b)) - step(1e-5, abs(p - b));\n}\n\n\nfloat dAABoxCorners(vec3 b, vec3 p)\n{\n\tvec3 n1 = abs(b - p);\n    vec3 n2 = abs(b + p);\n    \n    vec3 m1 = 1.0 - step(1e-5, n1);\n    vec3 m2 = 1.0 - step(1e-5, n2);\n    \n    n1 = n1 + m1*1e5;\n    n2 = n2 + m2*1e5;\n    \n    float d1 = min(min(n1.x, n1.y), n1.z);\n    float d2 = min(min(n2.x, n2.y), n2.z);\n    \n    return min(d1, d2);\n       \n}\n\n\nfloat udBox( vec3 p, vec3 b ) {\n  return length(max(abs(p)-b,0.0));\n}\n\n#define load(P) texture(iChannel1, (P + 0.5) / iChannelResolution[1].xy, -100.0)\n\nvec4 getLight() {\n\treturn load(LIGHT);   \n}\n\nvec3 getPosition() {\n\treturn load(POSITION).xyz;   \n}\n\nvec3 Render(in vec3 ro, in vec3 rd, in vec3 invrd) {\n    const vec3 lb = lamp;\n    const vec3 rb = room;\n    \n    vec3 p0 = vec3(0.0);\n    vec3 p1 = vec3(0.0);\n    \n    vec4 light = getLight();\n    \n    float i = light.w/(4.0*PI);\n    vec3 lc = light.rgb;\n\n    vec3 lp = load(POSITION).xyz;\n    \n    if (IRayAABox(ro - lp, rd, invrd, lb, p0, p1)) {\n        vec3 n = AABoxNormal(lb, p0);\n    \tfloat lcd = dAABoxCorners(lb, p0);\n        \n    \treturn lc * i * smoothstep(0.19, 0.21, lcd);\n    } \n    \n    IRayAABox(ro, rd, invrd, rb, p0, p1);\n    float rcd = dAABoxCorners(rb, p1);\n    vec3 n = -AABoxNormal(rb, p1);\n    \n    float ldis = udBox(p1 - lp, lb) + 2.0;\n    \n\n    vec3 ldir = normalize(lb - p1);\n    \n    float li = i/(ldis*ldis);\n    vec3 dif = li*lc * max(0.0, dot(n, ldir));\n    \n    \n    return dif;\n}\n\nvoid Camera(in vec2 fragCoord, out vec3 ro, out vec3 rd) \n{\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n\n    vec2 m = vec2(PI*0.25, PI*0.2);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cos(m.y), sin(m.y), 0.0, -sin(m.y), cos(m.y));\n    mat3 rotY = mat3(cos(m.x), 0.0, -sin(m.x), 0.0, 1.0, 0.0, sin(m.x), 0.0, cos(m.x));\n    \n    mat3 t = rotY * rotX;\n    \n    ro = t * vec3(0.0);\n    ro = cam + ro;\n\n    rd = t * rd;\n    \n    rd = normalize(rd);\n}\n\nvec3 dither(vec2 p, vec3 color) {\n\tfloat l = (color.r + color.g + color.b);\n    \n    //Dave_Haskins hash: https://www.shadertoy.com/view/4djSRW\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    float h = fract((p3.x + p3.y) * p3.z);\n    \n    return color + smoothstep(0.0, 0.3, l) * h * 0.02;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 ro = vec3(0.0);\n    vec3 rd = vec3(0.0);\n    \n    Camera(fragCoord, ro, rd);\n    vec3 invrd = 1.0 / rd;\n\n    \n    vec3 color = Render(ro, rd, invrd);\n    \n    fragColor = vec4(dither(fragCoord, pow(color, vec3(0.4545))), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by genis sole - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\nconst float PI = 3.141592;\n\nconst vec3 cam = vec3(-14.0, 14.0, -14.0);\nconst vec3 lamp = vec3(1.0, 4.0, 1.0);\nconst vec3 room = vec3(15.0);\n\nconst vec2 POSITION = vec2(1.0, 0.0);\nconst vec2 LIGHT = vec2(2.0, 0.0);\n\nconst vec2 MOUSE = vec2(0.0, 1.0);\nconst vec2 CLICK = vec2(1.0, 1.0);\nconst vec2 SELECTION = vec2(2.0, 1.0);\nconst vec2 RESOLUTION = vec2(3.0, 1.0);\n\n#define store(P, V) if (all(equal(fragCoord, P + 0.5))) fragColor = V\n#define load(P) texture(iChannel1, (P + 0.5) / iChannelResolution[1].xy, -100.0)\n\n\nvec3 AABoxNormal(vec3 b, vec3 p) \n{\n    return step(1e-5, abs(p + b)) - step(1e-5, abs(p - b));\n}\n\nbool IRayAABox(in vec3 ro, in vec3 rd, in vec3 invrd, in vec3 b, \n               out vec3 p0, out vec3 p1) \n{\n    vec3 t0 = (-b - ro) * invrd;\n    vec3 t1 = (b - ro) * invrd;\n\n    vec3 tmin = min(t0, t1);\n    vec3 tmax = max(t0, t1);\n    \n    float fmin = max(max(tmin.x, tmin.y), tmin.z);\n    float fmax = min(min(tmax.x, tmax.y), tmax.z);\n    \n    p0 = ro + rd*fmin;\n    p1 = ro + rd*fmax;\n    return fmax >= fmin;   \n}\n\nvoid Camera(in vec2 fragCoord, out vec3 ro, out vec3 rd) \n{\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n\n    vec2 m = vec2(PI*0.25, PI*0.2);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cos(m.y), sin(m.y), 0.0, -sin(m.y), cos(m.y));\n    mat3 rotY = mat3(cos(m.x), 0.0, -sin(m.x), 0.0, 1.0, 0.0, sin(m.x), 0.0, cos(m.x));\n    \n    mat3 t = rotY * rotX;\n    \n    ro = t * vec3(0.0);\n    ro = cam + ro;\n\n    rd = t * rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = load(fragCoord - 0.5);\n    \n    vec2 resolution = load(RESOLUTION).xy;\n    store(RESOLUTION, vec4(iResolution.xy, 0.0, 0.0));\n    \n    \n    if (iTime == 0.0 || iFrame == 0 || any(notEqual(iResolution.xy, resolution))) {\n    \tstore(POSITION, vec4(0.0));\n        store(LIGHT, vec4(0.01, 0.1, 1.0, 100.0));\n   \t\tstore(MOUSE, vec4(-1.0));\n        store(CLICK, vec4(0.0));\n        store(SELECTION, vec4(0.0));\n        \n        return;\n    }\n    \n    vec3 ro = vec3(0.0);\n    vec3 rd = vec3(0.0);\n    Camera(iMouse.xy, ro, rd);\n    \n    vec3 p0 = vec3(0.0);\n    vec3 p1 = vec3(0.0);\n    \n    vec3 lp = load(POSITION).xyz;\n    \n    vec4 mouse = load(MOUSE);\n    store(MOUSE, iMouse);\n    float selection = load(SELECTION).x;\n    \n    if (iMouse.w > 0.0) {\n        if (IRayAABox(ro - lp, rd, 1.0/rd, lamp, p0, p1)) {\n            store(LIGHT, vec4(0.01, 0.1, 1.0, 100.0).bgra);\n            store(SELECTION, vec4(1.0));\n            selection = 1.0;\n        }\n    }\n    else if (iMouse.z < 0.0) {\n        if (selection == 1.0) {\n            store(LIGHT, vec4(0.01, 0.1, 1.0, 100.0));\n            store(SELECTION, vec4(0.0));\n            selection = 0.0;\n        }\n    }\n\n    if (selection == 1.0) {\n        IRayAABox(ro, rd, 1.0/rd, room, p0, p1);\n        vec3 n = -AABoxNormal(room, p1);\n        p1 += n*lamp*1.5;\n        p1 = max(-room+lamp*1.5, p1);\n        lp += (p1 - lp) * iTimeDelta * 2.0;\n        store(POSITION, vec4(lp, 0.0));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}