{
    "Shader": {
        "info": {
            "date": "1584130898",
            "description": "Simple depth aware blur",
            "flags": 32,
            "hasliked": 0,
            "id": "wdXyzH",
            "likes": 3,
            "name": "Simple Depth Aware Blur",
            "published": 3,
            "tags": [
                "blur"
            ],
            "usePreview": 1,
            "username": "BeardThings",
            "viewed": 695
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float sampleCount=0.0;\n    \n    vec4 colorSamples=vec4(0.0);\n    \n    vec4 centerSample=texelFetch(iChannel0,ivec2(fragCoord),0);\n    for(int y=-5;y<=0;y++)\n    {\n        for(int x=-5;x<=0;x++)\n        {\n            vec4 sample1=texelFetch(iChannel0,ivec2(fragCoord)+ivec2(x,y),0);\n            vec4 sample2=texelFetch(iChannel0,ivec2(fragCoord)-ivec2(x,y),0);\n            \n            float dzdt1=sample1.z-centerSample.z;\n            float dzdt2=centerSample.z-sample2.z;\n            \n            const float epsilon=0.1;\n            float lowestdzdt=min(abs(dzdt1),abs(dzdt2));\n\t\t\tfloat weight1=lowestdzdt==abs(dzdt1)?1.0:0.0;\n            float weight2=lowestdzdt==abs(dzdt2)?1.0:0.0;\n            \n            if(weight1==0.0)\n            {\n                weight1=abs(lowestdzdt-abs(dzdt1))<epsilon?1.0:0.0;\n            }\n            else if(weight2==0.0)\n            {\n                weight2=abs(lowestdzdt-abs(dzdt2))<epsilon?1.0:0.0;\n            }\n            \n            colorSamples+=sample1*weight1+sample2*weight2;\n            sampleCount+=weight1+weight2;\n        }\n    }\n        \n    // Output to screen\n    fragColor = colorSamples/sampleCount;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float SDF(vec3 p)\n{\n    float s1=length(p)-0.1;\n    float s2=length(p-vec3(-0.2,0.0,0.2))-0.1;\n    return min(s1,s2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,0.0,10000.0);\n    \n    vec2 uv=fragCoord/iResolution.xy*2.0-1.0;\n    \n    vec3 dr=normalize(uv.x*vec3(1.0,0.0,0.0)+uv.y*vec3(0.0,1.0,0.0)+vec3(0.0,0.0,1.0));\n    vec3 o=vec3(0.0,0.0,-0.2);\n    float d=0.0;\n    for(int i=0;i<64;i++)\n    {\n        vec3 p=o+dr*d;\n        float s=SDF(o+dr*d);\n        if(s<0.001)\n        {\n            vec2 uv=normalize(p.xz);\n            vec4 color=texture(iChannel0,uv);\n            \n            fragColor=vec4(color.xyz*(p.z>0.1?10.0:1.0),p.z);\n            break;\n        }\n        d+=s;\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}