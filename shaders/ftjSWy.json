{
    "Shader": {
        "info": {
            "date": "1628580687",
            "description": "Quadtrees - how do they work? Obviously not the way I'm doing it - but looking for some golfing help. Is this Brute Force? Is there a better way? ",
            "flags": 0,
            "hasliked": 0,
            "id": "ftjSWy",
            "likes": 18,
            "name": "Quadtree Octahedrons",
            "published": 3,
            "tags": [
                "raymarching",
                "quadtree",
                "branching"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 441
        },
        "renderpass": [
            {
                "code": "/**\n    Quadtree Octahedrons\n    @byt3_m3chanic | 08/09/21\n    \n    I dont know how to break space down and do the\n    quad tree thing - so doing some brute force \n    attempts.\n\n*/\n\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\nmat2 rot (float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21( vec2 p ) { return fract(sin(dot(p,vec2(23.43,84.21))) *4832.3234); }\n//@iq\nfloat octa( vec3 p, float s) {\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nmat2 r45,r22;\nvec3 hit,hitPoint;\nvec2 gid,sid;\nfloat time,srnd,grnd;\nvec2 sc = vec2(.0),ssc,gsc;\n\nvec2 map(vec3 p) {\n    p.y+=5.;\n    p.x+=time;\n    vec2 res = vec2(1e5,0);\n    \n    sc = vec2(.25);\n    vec2 bsize = vec2(1.);\n    \n    vec2 id = floor(p.xz*sc) + .5;    \n    vec2 r = p.xz - id/(sc);\n    vec3 q = vec3(r.x,p.y,r.y);\n\n    float rnd = hash21(id);\n    float tn=-1.;\n    if(rnd>.5){\n       sc*=2.;\n       id = floor(q.xz*(sc)) + .5;    \n       r = q.xz - id/(sc);\n       q = vec3(r.x,p.y,r.y);\n       rnd = hash21(id+rnd);\n       tn=0.;\n       if(rnd>.5){\n           sc*=2.;\n           id = floor(q.xz*(sc)) + .5;    \n           r = q.xz - id/(sc);\n           q = vec3(r.x,p.y,r.y);\n           rnd = hash21(id+rnd);\n           if(rnd>.5){\n               sc*=2.;\n               id = floor(q.xz*(sc)) + .5;    \n               r = q.xz - id/(sc);\n               q = vec3(r.x,p.y,r.y);\n               rnd = hash21(id+rnd);\n               if(rnd>.5){\n                   sc*=2.;\n                   id = floor(q.xz*(sc)) + .5;    \n                   r = q.xz - id/(sc);\n                   q = vec3(r.x,p.y,r.y);\n                   rnd = hash21(id+rnd);\n                   tn=1.;\n               }\n           }\n       }\n    }\n    vec3 qs=q;\n    q.xz*=rot(rnd*T*1.5);\n\n    bsize = .375/sc.xx;\n    float b1 = octa(q-vec3(0,bsize.y,0),bsize.x);\n    \n    if(tn==0.){\n        q.xz*=r45;\n        b1 = min(octa(q-vec3(0,bsize.y,0),bsize.x),b1);\n    }\n    if(tn==-1.){\n        q.xz*=r22;\n        b1 = min(octa(q-vec3(0,bsize.y,0),bsize.x),b1);\n        q.xz*=r22;\n        b1 = min(octa(q-vec3(0,bsize.y,0),bsize.x),b1);\n    }\n    \n    if(b1<res.x) {\n        res = vec2(b1,2.);\n    \thit=q;\n        gid=id;\n        grnd=rnd;\n        gsc=sc;\n    }\n\n    float d9 = p.y;\n    if(d9<res.x) {\n        res = vec2(d9,1.);\n    \thit=qs;\n        gid=id;\n        grnd=rnd;\n    }\n    return res;\n}\n\nvec3 normal(vec3 p, float t, float mindist)\n{\n    float e = mindist*t;\n    vec2 h = vec2(1.0,-1.0);\n    return normalize( h.xyy*map( p + h.xyy*e).x + \n\t\t\t\t\t  h.yyx*map( p + h.yyx*e).x + \n\t\t\t\t\t  h.yxy*map( p + h.yxy*e).x + \n\t\t\t\t\t  h.xxx*map( p + h.xxx*e).x );\n}\n\nvec3 hue(float t)\n{ \n    vec3 d = vec3(0.220,0.961,0.875);\n    return .375 + .375*cos(PI2*t*(vec3(.985,.98,.95)+d)); \n}\n\nvec3 render(vec3 p, vec3 rd, vec3 ro, float d, float m, inout vec3 n, inout float fresnel)\n{\n    n = normal(p,d,1.01);\n    vec3 lpos =  vec3(5,4,1);\n    vec3 l = normalize(lpos-p);\n\n    float diff = clamp(dot(n,l),0.,1.);\n    \n    fresnel = pow(clamp(1.+dot(rd, n), 0., 1.), 3.);\n    fresnel = mix(.01, .7, fresnel);\n        \n    float shdw = 1.;\n    float t=.0;\n    for(float i=.0;i<24.;i++)\n    {\n        float h = map(p + l*t).x;\n        if( h<1e-4 ) { shdw = 0.; break; }\n        shdw = min(shdw, 18.*h/t);\n        t += h;\n        if( shdw<.01 || t>64. ) break;\n    }\n    diff = mix(diff,diff*shdw,.4);\n\n    vec3 h = vec3(0.914,0.984,0.973);\n    if(m==1.) {\n        float cir = length(hitPoint.xz)-(.15/ssc.x);\n        float of =(.045/ssc.x);\n        float ox =(.015/ssc.x);\n        cir=abs(abs(abs(cir)-of)-of)-ox;\n        cir = smoothstep(.001,.0011,cir);\n        h=mix(vec3(0.561,0.639,0.627),h,1.-cir);\n    }\n\n    if(m==2.) {\n        h=hue(((srnd+fresnel)+hitPoint.z*.05)*3.);\n    }\n    return diff*h;//mix(h,h*shdw,.6);\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    // precal\n    time = T*.35;\n    r45=rot(45.*PI/180.);\n    r22=rot(30.*PI/180.);\n    //\n    \n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n\n    float zoom = 3.;\n    //orthographic camera\n    vec3 ro = vec3(uv*zoom,-zoom);\n    vec3 rd = vec3(0,0,1.);\n\n    mat2 rx = rot(-0.58539816339);\n    mat2 ry = rot(-0.78539816339);\n    ro.yz *= rx;\n    rd.yz *= rx;\n    ro.xz *= ry;\n    rd.xz *= ry;\n\n    vec3 C = vec3(0);\n    vec3  p = ro + rd;\n    float atten = 1.;\n    float k = 1.;\n    float d = 0.;\n    for(int i=0;i<125;i++)\n    {\n        vec2 ray = map(p);\n        vec3 n=vec3(0);\n        float m = ray.y;\n\n        d = ray.x*.5;\n        p += rd * d *k;\n        \n        if (d*d < 1e-6) {\n            hitPoint = hit;\n            sid = gid;\n            ssc = gsc;\n            srnd=grnd;\n            float fresnel=0.;\n            C+=render(p,rd,ro,d,ray.y,n,fresnel)*atten;\n            if(m==1.)break;\n            \n            atten *= .65;\n            p += rd*.025;\n            k = sign(map(p).x);\n            \n            vec3 rr = vec3(0);\n            if(int(F.x)%3 != int(F.y)%3) {\n                rr = refract(rd,n,.45);\n                rd=mix(rr,rd,.9-fresnel);\n            }else{\n                vec3 rr=reflect(-rd,n);\n                rd=mix(rr,rd, vec3(.8)-fresnel);\n                p+=n*.05;\n            }\n  \n        } \n       \n        if(distance(p,rd)>75.) { break; }\n    }\n\n    C = pow(C, vec3(.4545));\n    O = vec4(C,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}