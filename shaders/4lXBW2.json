{
    "Shader": {
        "info": {
            "date": "1514310111",
            "description": "Verifying my understanding of \"godrays\" as a 2D post-processing effect. It seems to be correct. I have yet to try it out in a more complex scene.",
            "flags": 32,
            "hasliked": 0,
            "id": "4lXBW2",
            "likes": 4,
            "name": "crepuscular rays",
            "published": 3,
            "tags": [
                "2d",
                "postprocessing",
                "godrays"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 929
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// crepuscular rays - testing godrays\n//\n// Copyright 2017 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// buffer A - draw the sun and occluders\n// image - apply the radial blur sampling from buffer-A to \"spread\" the godrays\n\nconst int SAMPLES = 64;\nconst float STRENGTH = -.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uvRaw = uv;\n    uv = uv * 2. - 1.;\n    float illumDecay = 1.;\n    float decay = .98;\n\n    vec3 rays = vec3 (.0);\n    float scale = .0;\n    for (int i = 0; i < SAMPLES; ++i) {\n        vec2 dir = uv + .2 * vec2 (cos (iTime)/aspect, sin(iTime));\n        scale = (float (i) / float (SAMPLES)) * STRENGTH;\n        vec2 coord = (fragCoord / iChannelResolution[0].xy) + dir * scale;\n        vec3 col = texture (iChannel0, coord).rgb;\n        col *= illumDecay;\n        illumDecay *= decay;\n        rays += col;\n    }\n    rays /= float (SAMPLES);\n\n    vec3 col1 = texture (iChannel0, fragCoord / iChannelResolution[0].xy).rgb;\n    vec3 col2 = rays;\n    vec3 col = mix (col1, col2, .5);\n    //col = col / (1. + col); // using tonemapping here does not look too good\n    col = sqrt (col);\n    col.rgb *= .2 + .8 * pow (16. * uvRaw.x * uvRaw.y * (1. - uvRaw.x) * (1. - uvRaw.y), .3);\n\n    if (uv.x > .0)\n\t    fragColor = vec4 (col, 1.0);\n    else\n        fragColor = vec4 (rays, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// crepuscular rays - testing godrays\n//\n// Copyright 2017 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nfloat opUnion (in float a, in float b)\n{\n\treturn max (a, b);\n}\n\nfloat opIntersection (in float a, in float b)\n{\n\treturn min (a, b);\n}\n\nfloat sdBall (in vec2 p, in float r, in float blur)\n{\n\treturn smoothstep (.025, .025 - blur, length (p) - r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= aspect;\n\n    float sun = sdBall (uv + .2 * vec2 (cos (iTime), sin(iTime)), .15, .0125);\n    float occluder = sdBall (uv + vec2 (-.3, .0), .25, .0125);\n    occluder += sdBall (uv + vec2 (.4, .0), .2, .0125);\n    occluder += sdBall (uv + vec2 (.1, .4), .05, .0125);\n    occluder += sdBall (uv + vec2 (.0, -.3), .05, .0125);\n    float result = sun - occluder;\n\n    vec3 col = vec3 (.05, .0, .1);\n    col += mix (vec3(.0), vec3(1., .975, .2), result);\n\tfragColor = vec4 (col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}