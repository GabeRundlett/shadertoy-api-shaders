{
    "Shader": {
        "info": {
            "date": "1670407029",
            "description": "programmed in 60hz",
            "flags": 32,
            "hasliked": 0,
            "id": "cd2XWm",
            "likes": 1,
            "name": "last frame kernel: #1",
            "published": 3,
            "tags": [
                "template"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 137
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_trpino_nooffset = (fragCoord.xy)/ iResolution.xy;\n    vec2 o_trmono_nooffset = (iMouse.xy)/ iResolution.xy;\n    fragColor = texture(iChannel0, o_trpino_nooffset);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define n_size_max_a_o_col_last_krnl const 1000;\nfloat f_n_rand(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 o_trpino_nooffset = (fragCoord.xy)/ iResolution.xy;\n    vec2 o_trmono_nooffset = (iMouse.xy)/ iResolution.xy;\n    \n    vec4 o_col_last = texture(iChannel0, o_trpino_nooffset);\n    \n    vec2 o_trpino = (fragCoord.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trmono = (iMouse.xy - iResolution.xy*0.5)/ iResolution.y;\n    if(iMouse.w == 0.0){\n        float n_t = floor(iTime * 1.0);\n        float n_t_x = fract(n_t/5.)-.5;\n        float n_t_y = fract(n_t/10.)-.5;\n        o_trmono = vec2(\n            n_t_x*2.,\n            n_t_y\n            //(f_n_rand(n_t)-0.5)*2.,\n            //f_n_rand(n_t*3.33)-0.5\n        );\n    }\n    vec2 o_scale = vec2(0.4);\n    vec2 o_fragCoord_scaled = ((fragCoord.xy)*o_scale);\n    vec2 o_iResolution_scaled = (iResolution.xy * o_scale);\n\n    vec2 o_fragCoord_scaled_floor = floor(o_fragCoord_scaled);\n    vec2 o_iResolution_scaled_floor = floor(o_iResolution_scaled);\n    vec2 o_fragCoord_scaled_fract = fract(o_fragCoord_scaled);\n    vec2 o_iResolution_scaled_fract = fract(o_iResolution_scaled);\n    \n    vec2 o_trpino_scldfloor = (o_fragCoord_scaled_floor.xy - o_iResolution_scaled_floor.xy*0.5)/ o_iResolution_scaled_floor.y;\n    \n    vec2 o_scale_kernel = vec2(\n        3.,\n        3.\n    );\n    float n_size_kernel = o_scale_kernel.x * o_scale_kernel.y;\n    //vec4[3] a_o_col_last_krnl = vec4[3];\n    //vec3[32] palette = vec3[32];\n    \n    vec4 a_o_col_last_krnl[100];\n    \n    vec4 a_o_sum_xaxis[100];// 100 is static , because a varbiable as array size is not working 'array size must be a constant integer expression'...\n    vec4 a_o_sum_xaxis_nor[100];// 100 is static , because a varbiable as array size is not working 'array size must be a constant integer expression'...\n    vec4 a_o_sum_yaxis[100];// 100 is static , because a varbiable as array size is not working 'array size must be a constant integer expression'...\n    vec4 a_o_sum_yaxis_nor[100];// 100 is static , because a varbiable as array size is not working 'array size must be a constant integer expression'...\n    vec4 o_kernel_sum = vec4(0.0);\n    int n_index_a_o_col_last_krnl = 0;\n    for(float n_y = 0.0; n_y < o_scale_kernel.y; n_y+=1.){\n        for(float n_x = 0.0; n_x < o_scale_kernel.x; n_x+=1.){\n            int n_index_a_o_sum_xaxis = int(n_x);\n            int n_index_a_o_sum_yaxis = int(n_y);\n\n            vec2 o_speed = vec2(0.0);\n            vec2 o = vec2(\n               floor(n_x - floor(o_scale_kernel.x/2.)),\n               floor(n_y - floor(o_scale_kernel.y/2.)) \n            ) + o_speed;\n            vec2 o_off = vec2(\n                o.x * (1./o_iResolution_scaled_floor.x),\n                o.y * (1./o_iResolution_scaled_floor.y)\n            );\n            vec4 o_col_last_on_kernel = texture(iChannel0, o_trpino_nooffset+o_off);\n            o_kernel_sum += o_col_last_on_kernel;\n\n            a_o_sum_xaxis[n_index_a_o_sum_xaxis] += o_col_last_on_kernel;\n            a_o_sum_xaxis_nor[n_index_a_o_sum_xaxis]+= (o_col_last_on_kernel / o_scale_kernel.x);\n            a_o_sum_yaxis[n_index_a_o_sum_yaxis] += o_col_last_on_kernel;\n            a_o_sum_yaxis_nor[n_index_a_o_sum_yaxis]+= (o_col_last_on_kernel / o_scale_kernel.y);\n            \n            n_index_a_o_col_last_krnl+=1;\n            a_o_col_last_krnl[n_index_a_o_col_last_krnl] = o_col_last_on_kernel;\n        }\n    }\n    vec4 o_kernel_sum_nor = o_kernel_sum / (o_scale_kernel.x*o_scale_kernel.y);\n    \n    float n_index = floor(o_fragCoord_scaled_floor.y * o_iResolution_scaled_floor.x + o_fragCoord_scaled_floor.x);\n    float n_index_nor = n_index / (o_iResolution_scaled_floor.x * o_iResolution_scaled_floor.y);\n    \n    if(iFrame == 0){\n        fragColor = vec4((f_n_rand(float(n_index))));\n    }else{\n        if(mod(float(iFrame), 1.) > 1.){\n            fragColor = o_col_last;\n        }else{\n            float n = 0.5;\n\n            fragColor = vec4(\n               ((a_o_sum_yaxis_nor[0].x)*1.1)\n            );\n            if(o_kernel_sum_nor.x > 1.){\n                //fragColor = vec4(f_n_rand(iTime)*0.01);\n                fragColor = vec4(o_kernel_sum_nor.x*0.2);\n            }\n            float n_fact = 0.1;\n            float n_rand = f_n_rand(iTime)*n_fact+n_fact;\n            float n_rand2 = f_n_rand(iTime)*n_fact+n_fact;\n            n = 0.2;\n            if(\n                a_o_sum_xaxis_nor[0].x < n\n                ||\n                a_o_sum_xaxis_nor[2].x < n\n                \n            ){\n                fragColor = vec4(n_rand2*1.);\n            }\n            if(floor(o_kernel_sum_nor.x*100.) == floor(o_col_last.x*100.)){\n                fragColor = o_col_last;\n            }\n            //if(o_kernel_sum_nor.x > 0.9){\n            //    fragColor = vec4(f_n_rand(floor(iTime*10.)));\n            //}\n\n            //vec4 o_col_delta_last = abs(fragColor - o_col_last);\n            //fragColor = o_col_delta_last*o_col_delta_last;\n            \n        }\n    \n    }\n    \n    //float n_thresh = (sin(iTime*0.2)*0.5+0.5);\n    float n_thresh = 0.3;\n    //if(iMouse.w == 0.0){\n    //    n_thresh = 1.-(float(mod(iTime, 20.)))*0.1;\n    //}\n    float n_dist = length(o_trpino-o_trmono);\n    if(n_dist< n_thresh){\n        float n_dist_nor = n_dist/n_thresh;\n        //fragColor = vec4(sin(n_dist*6.2831)*0.5+0.5);\n        //fragColor = mix(o_col_last, fragColor,n_dist);\n        //fragColor = mix(o_col_last, fragColor,2.*n_dist_nor);\n        //fragColor = mix(fragColor, vec4(f_n_rand(n_dist)), 0.9);\n        //fragColor = vec4(f_n_rand(fragCoord.x*fragCoord.y));\n        fragColor = vec4(sqrt(n_dist_nor));\n\n    }\n    \n    fragColor = (fragColor);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}