{
    "Shader": {
        "info": {
            "date": "1434888465",
            "description": "Shader used on http://www.thebookofshaders.com/08 and in http://patriciogonzalezvivo.github.io/tangram-sandbox/tangram.html?styles/matrix",
            "flags": 0,
            "hasliked": 0,
            "id": "MlfXzN",
            "likes": 45,
            "name": "Matrix",
            "published": 3,
            "tags": [
                "random",
                "matrix"
            ],
            "usePreview": 0,
            "username": "patriciogv",
            "viewed": 5403
        },
        "renderpass": [
            {
                "code": "// Copyright Patricio Gonzalez Vivo, 2015 - http://patriciogonzalezvivo.com/\n// I am the sole copyright owner of this Work.\n//\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n\nfloat random(in float x){\n    return fract(sin(x)*43758.5453);\n}\n\nfloat random(in vec2 st){\n    return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat randomChar(in vec2 outer,in vec2 inner){\n    float grid = 5.;\n    vec2 margin = vec2(.2,.05);\n    float seed = 23.;\n    vec2 borders = step(margin,inner)*step(margin,1.-inner);\n    return step(.5,random(outer*seed+floor(inner*grid))) * borders.x * borders.y;\n}\n\nvec3 matrix(in vec2 st){\n    float rows = 50.0;\n    vec2 ipos = floor(st*rows)+vec2(1.,0.);\n\n    ipos += vec2(.0,floor(iTime*20.*random(ipos.x)));\n\n    vec2 fpos = fract(st*rows);\n    vec2 center = (.5-fpos);\n\n    float pct = random(ipos);\n    float glow = (1.-dot(center,center)*3.)*2.0;\n\n    return vec3(randomChar(ipos,fpos) * pct * glow);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 st = fragCoord.xy / iResolution.xy;\n    st.y *= iResolution.y/iResolution.x;\n\n\tfragColor = vec4(matrix(st),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}