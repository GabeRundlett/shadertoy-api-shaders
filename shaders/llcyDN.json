{
    "Shader": {
        "info": {
            "date": "1532697764",
            "description": "Try holding a yellow post-it near the centre of the webcam view. You should see a twisted image of you holding the post-it forever. The chroma-key effect could use some work.",
            "flags": 2,
            "hasliked": 0,
            "id": "llcyDN",
            "likes": 1,
            "name": "Droste Effect",
            "published": 3,
            "tags": [
                "droste",
                "webcam"
            ],
            "usePreview": 0,
            "username": "_polymath",
            "viewed": 937
        },
        "renderpass": [
            {
                "code": "// edit these to adjust the chroma key effect sensitivity:\n\n// minimum amount of red and green to consider 'yellow'\n#define MINRG 0.1\n// how different the red and green channels can be (after adjusting for the next line)\n#define MAXRGRATIO 1.3\n// 0.9 here means 'red should be 90% of green'\n#define ASSUMEDRGRATIO 0.9\n// the maximum blue:red ratio allowed in yellow pixels\n#define MAXB 0.2\n// a black point, subtracted from values before processing\n#define BLACK 0.2\n// maybe I should add gamma?\n\n// + and - are different twist directions; delete it for no twist\n#define TWISTDIR +\n\n// decrease this number if you have a large post-it\n#define MAGFACTOR 3.2\n\n// edit this only if mathematics stops working\n// caution: on that day a bad shader is the least of your problems\n#define TAU 6.28318530718\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) offset to centre the origin\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    \n    // start by scaling out a bit - the effect only works if it's infinite\n    // in both in and out directions. we're only calculating 'in', so\n    // this basically means we start from a bit 'out' and hope it's out enough\n    uv *= pow(MAGFACTOR, -3.0);\n    \n    // this is the 'twist' effect\n    #ifdef TWISTDIR\n    \tuv *= (TWISTDIR(atan(uv.y, uv.x) / TAU) + 0.5) * (MAGFACTOR - 1.0) + 1.0;\n    #endif\n  \n    // we iterate in a bunch of times\n    //because the effect is supposed to be infinite\n    for (float i = 0.0; i < 20.0; ++i) {\n        // see what's on the camera...\n    \tvec4 cam = texture(iChannel0, uv+0.5);\n        // attempt to detect yellow things,\n        // obviously change the channels if you want a different chroma key\n        cam -= BLACK;\n        if (cam.r > MINRG\n            && cam.r * ASSUMEDRGRATIO / cam.g < MAXRGRATIO\n            && cam.g / cam.r * ASSUMEDRGRATIO < MAXRGRATIO\n            && cam.b < MAXB * cam.r) {\n            // yellow object detected - we don't know what goes here,\n            // so zoom out and try again\n            vec2 nextUv = uv * MAGFACTOR;\n            // if that puts us on a pixel of the image\n            // at the next zoom level, switch to that pixel\n            // and see if THAT'S yellow in the next loop\n            if (nextUv.x >= -0.5 && nextUv.x <= 0.5 &&\n                nextUv.y >= -0.5 && nextUv.y <= 0.5) {\n                uv = nextUv;\n                continue;\n            }\n        }\n        // normil pixel - render the camera output and stop iterating\n        fragColor = cam + BLACK;\n        return;\n    }\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}