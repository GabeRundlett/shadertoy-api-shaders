{
    "Shader": {
        "info": {
            "date": "1500054725",
            "description": "Ported Kynd's Reactive Buffer Experiment to shadertoy. Reset frame to 0 to restart",
            "flags": 32,
            "hasliked": 0,
            "id": "Xd2fWR",
            "likes": 29,
            "name": "Kynd Reactive Buffers",
            "published": 3,
            "tags": [
                "feedback",
                "buffers",
                "kynd"
            ],
            "usePreview": 0,
            "username": "aferriss",
            "viewed": 1532
        },
        "renderpass": [
            {
                "code": "//Written by kynd\n//ported from https://github.com/kynd/reactive_buffers_experiment\n//BufA = wave shader\n//BufB = noise shader\n//BufC = force shader\n//BufD = tint shader\n\nvec4 mixColor(vec4 c0, vec4 c1, float r) {\n  return max(c0, mix(vec4(0.0), c1, r));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n  vec2 uv = fragCoord.xy / iResolution.xy;\n\n  vec2 coord = vec2(uv.x, 1.0 - uv.y);\n  vec4 tSamp = texture(iChannel0, coord);\n  vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n  color = mixColor(color, vec4(0.1, 0.1, 0.2, 1.0), tSamp.r);\n  color = mixColor(color, vec4(0.8, 0.0, 0.0, 1.0), tSamp.g);\n  color = mixColor(color, vec4(0.9, 0.98, 0.98, 1.0), tSamp.b);\n  float v = pow(color.r * 0.2126 + color.g * 0.7152 + color.b * 0.0722, 1.5);\n\n  fragColor = tSamp;///vec4(v,v,v,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//wave\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n    \n  vec4 color;\n  vec4 samp = texture(iChannel0, uv);\n  vec4 tSamp = texture(iChannel1, uv);\n  float t = float(iFrame) * 0.0001;\n  float va = samp.r + sin(tSamp.r + t) * 0.01 - sin(tSamp.b + t) * 0.01;\n\n  vec2 d[4];\n  d[0] = vec2(-1.0, -0.0);\n  d[1] = vec2(0.0, -1.0);\n  d[2] = vec2(1.0, 0.0);\n  d[3] = vec2(-0.0, 1.0);\n\n  float vb = 0.0;\n  for (int i = 0; i < 4; i ++) {\n    vb += texture(iChannel0, uv + (d[i]) / iResolution.xy * 2.0).r;\n  }\n\n  float vc = samp.g;\n  samp.b = va * 2.0 + 0.1 * (vb - va *4.0) - vc;\n  color = clamp(samp.brga, vec4(0.0), vec4(1.0));\n\n  fragColor = color;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//noise\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < 6; i++) {\n        value += amplitud * noise(st);\n        st *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 dims = iResolution.xy;\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec4 color;\n  vec2 coord = uv * dims / 5002.0 + vec2(float(iFrame)) * 0.00005;\n  float n = coord.x > 512.0 ? 0.0 : 1.0;\n  float r = clamp(fbm(coord * 64.0),0.0, 1.0);\n  float g = clamp(fbm(coord * 32.0 + vec2(123.4)), 0.0, 1.0);\n  float b = clamp(fbm(coord + vec2(1234.5)), 0.0, 1.0);\n  color = vec4(r, g, b, 1.0);\n  fragColor = color;\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//force\n\nvec4 init() {\n  vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n  return color;\n}\n\nvec4 update(vec2 uv) {\n  \n  vec4 color;\n  vec2 d[4];\n  vec4 nSamp = texture(iChannel1, uv);\n  vec2 dist = (nSamp.rg - 0.5)*0.5;\n  d[0] = vec2(-1.0, 0.0);\n  d[1] = vec2(0.0, -1.0);\n  d[2] = vec2(1.0, 0.1);\n  d[3] = vec2(-0.0, 1.0);\n\n  float xd = 0.0;\n  float yd = 0.0;\n  for (int i = 0; i < 4; i ++) {\n    vec4 wSamp = texture(iChannel0, uv + d[i] / iResolution.xy);\n    xd += wSamp.r * d[i].x;\n    yd += wSamp.r * d[i].y;\n  }\n\n  color = vec4(0.5 + xd * 2.025 + dist.r, 0.5 + yd * 2.025 + dist.g, 0.5, 1.0);\n  return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec4 color;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n  if (float(iFrame) == 0.0) {\n    color = init();\n  } else {\n    color = update(uv);\n  }\n  fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//tint\nvec4 init(vec2 uv) {\n  vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n  \n  if (uv.y < 0.01) {\n    color.r = 1.0;\n  } else if (uv.y < 0.02) {\n    color.g = 1.0;\n  } else if (uv.y < 0.03) {\n    color.b = 1.0;\n  }\n\n  return color;\n}\n\n\nvec4 update(vec2 uv, vec2 dims) {\n  vec4 color;\n  vec2 d[4];\n  d[0] = vec2(-1.0, -0.0);\n  d[1] = vec2(0.0, -1.0);\n  d[2] = vec2(1.0, 0.0);\n  d[3] = vec2(-0.0, 1.0);\n    \n  vec4 fSamp = texture(iChannel2, uv);\n  vec2 force = (fSamp.rg - 0.5) * 8.0;\n  vec4 samp = texture(iChannel0, uv + force / dims);\n  vec4 wSamp = texture(iChannel1, uv + force / dims);\n\n  vec4 dSamp[4];\n  vec4 wdSamp[4];\n  for (int i = 0; i < 4; i ++) {\n    dSamp[i] = texture(iChannel0, uv + (d[i] + force) / dims);\n    wdSamp[i] = texture(iChannel1, uv + (d[i] + force) / dims);\n  }\n\n  color = samp;\n  for (int i = 0; i < 3; i ++) {\n    float v = samp[i] * (wSamp.r - 0.5);\n    float vd = 0.0;\n    for (int j = 0; j < 4; j ++) {\n      float vt = dSamp[j][i] * (wdSamp[j].r - 0.5);\n      vd += (v - vt) * 0.5;\n    }\n    color[i] += vd;\n  }\n\n  color = clamp(color, vec4(0.0), vec4(1.0));\n  if (distance(color, vec4(1.0)) < 0.9) {\n    color = vec4(0.0, 0.0, 0.0, 1.0);\n  }\n\n  return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec4 color;\n  vec2 dims = iResolution.xy;\n  vec2 uv = fragCoord.xy / iResolution.xy;\n\n    \n  if (float(iFrame) == 0.0) {\n    color = init(uv);\n  } else {\n    color = update(uv, dims);\n  }\n  fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}