{
    "Shader": {
        "info": {
            "date": "1453455587",
            "description": "SmoothLife is a family of rules created by Stephan Rafler. It was designed as a continuous version of Conway's Game of Life - using floating point values instead of integers. [url]http://www.conwaylife.com/wiki/SmoothLife[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "Msy3RD",
            "likes": 78,
            "name": "SmoothLife gliders",
            "published": 3,
            "tags": [
                "automata",
                "continuous",
                "smoothlife"
            ],
            "usePreview": 1,
            "username": "davidar",
            "viewed": 10306
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// based on <https://git.io/vz29Q>\n// ---------------------------------------------\n// smoothglider (discrete time stepping 2D)\nconst float ra = 12.0;         // outer radius\nconst float rr = 3.0;          // ratio of radii\nconst float b1 = 0.278;        // birth1\nconst float b2 = 0.365;        // birth2\nconst float s1 = 0.267;        // survival1\nconst float s2 = 0.445;        // survival2\nconst float alpha_n = 0.028;   // sigmoid width for outer fullness\nconst float alpha_m = 0.147;   // sigmoid width for inner fullness\n// ---------------------------------------------\n\nfloat sigma1(float x,float a,float alpha) \n{ \n    return 1.0 / ( 1.0 + exp( -(x-a)*4.0/alpha ) );\n}\n\nfloat sigma2(float x,float a,float b,float alpha)\n{\n    return sigma1(x,a,alpha) \n        * ( 1.0-sigma1(x,b,alpha) );\n}\n\nfloat sigma_m(float x,float y,float m,float alpha)\n{\n    return x * ( 1.0-sigma1(m,0.5,alpha) ) \n        + y * sigma1(m,0.5,alpha);\n}\n\n// the transition function\n// (n = outer fullness, m = inner fullness)\nfloat s(float n,float m)\n{\n    return sigma2( n, sigma_m(b1,s1,m,alpha_m), \n        sigma_m(b2,s2,m,alpha_m), alpha_n );\n}\n\nfloat ramp_step(float x,float a,float ea)\n{\n    return clamp((x-a)/ea + 0.5,0.0,1.0);\n}\n\n// 1 out, 3 in... <https://www.shadertoy.com/view/4djSRW>\n#define MOD3 vec3(.1031,.11369,.13787)\nfloat hash13(vec3 p3) {\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.x + p3.y)*p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // inner radius:\n    const float rb = ra/rr;\n    // area of annulus:\n    const float PI = 3.14159265358979;\n    const float AREA_OUTER = PI * (ra*ra - rb*rb);\n    const float AREA_INNER = PI * rb * rb;\n    \n    // how full are the annulus and inner disk?\n    float outf = 0.0, inf = 0.0;\n    for(float dx=-ra; dx<=ra; dx++) for(float dy=-ra; dy<=ra; dy++)\n    {\n        float r = sqrt(float(dx*dx + dy*dy));\n        vec2 txy = mod((fragCoord + vec2(dx,dy)) / iResolution.xy, 1.);\n        float val = texture(iChannel0, txy).x; \n        inf  += val * ramp_step(-r,-rb,1.0);\n        outf += val * ramp_step(-r,-ra,1.0) \n                    * ramp_step(r,rb,1.0);\n    }\n    outf /= AREA_OUTER; // normalize by area\n    inf /= AREA_INNER; // normalize by area\n    \n    float c = s(outf,inf); // discrete time step\n    if(iFrame < 10 || iMouse.z > 0.)\n        //c = hash13(vec3(fragCoord,iFrame)) - texture(iChannel1, uv).x + 0.5;\n        c = hash13(vec3(fragCoord,iFrame)) * 0.75;\n    fragColor = vec4(c,c,c,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}