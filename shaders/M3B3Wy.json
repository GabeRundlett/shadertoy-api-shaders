{
    "Shader": {
        "info": {
            "date": "1724467098",
            "description": "hydrogen orbitals\nmouse x controls the distance from the proton\nmouse y controls the density accumulation function",
            "flags": 0,
            "hasliked": 0,
            "id": "M3B3Wy",
            "likes": 0,
            "name": "Molecular Orbital Tracer",
            "published": 3,
            "tags": [
                "orbitals"
            ],
            "usePreview": 0,
            "username": "willwombell",
            "viewed": 84
        },
        "renderpass": [
            {
                "code": "// Fork of \"Molecular Orbital Slicer\" by willwombell. https://shadertoy.com/view/XXB3zG\n// 2024-02-24 20:11:21\n\n// Constants\n#define PI 3.1415926535897932384626433832795\n#define PHI 1.618\n#define PLAY true\n\n// Define quantum numbers for the desired hydrogen orbital\n\n// Principal quantum number\nconst int n = 11;\n// Azimuthal quantum number\nconst int l = 7;\n// Magnetic quantum number\nconst int m = 2;\n\n// Factorial function\nfloat factorial(float n) {\n    float result = 1.0;\n    for (int i = 2; i <= int(n); ++i) {\n        result *= float(i);\n    }\n    return result;\n}\n\nfloat P(int l, int m, float x) {\n    // Initial values for P_0^0 and P_1^1\n    float P00 = 1.0;\n    float P11 = sqrt(1.0 - x * x);\n    \n    // Directly return for base cases\n    if (l == 0 && m == 0) return P00;\n    if (l == 1 && m == 0) return x;\n    if (l == 1 && m == 1) return P11;\n\n    // Recurrence relation to compute P_l^0(x)\n    float Plm1m1 = x; // P_1^0\n    float Pl = 0.0;\n    for (int i = 2; i <= l; i++) {\n        Pl = ((2.0 * float(i) - 1.0) * x * Plm1m1 - (float(i) - 1.0) * P00) / float(i);\n        if (i < l) {\n            P00 = Plm1m1;\n            Plm1m1 = Pl;\n        }\n    }\n\n    // For m == 0, we already have the result\n    if (m == 0) return Pl;\n\n    // Compute P_l^m(x) using the recurrence relation\n    float Pmm = P11;\n    if (m > 1) {\n        for (int i = 2; i <= m; i++) {\n            Pmm = sqrt(1.0 - x * x) * sqrt(2.0 * float(i) - 1.0) * Pmm;\n        }\n    }\n    if (l == m) return Pmm;\n\n    // Compute P_l^m when l > m\n    float Plm1 = x * sqrt(2.0 * float(m) + 1.0) * Pmm;\n    if (l == m + 1) return Plm1;\n\n    float Plm = 0.0;\n    for (int i = m + 2; i <= l; i++) {\n        Plm = (x * sqrt(2.0 * float(i) - 1.0) * Plm1 - sqrt(float(i + m - 1)) / sqrt(float(i - m - 1)) * Pmm) / sqrt(float(i - m));\n        Pmm = Plm1;\n        Plm1 = Plm;\n    }\n\n    return Plm;\n}\n\n// Normalization constant for spherical harmonics\nfloat K(int l, int m) {\n    return sqrt((2.0 * float(l) + 1.0) / (4.0 * PI) * factorial(float(l - abs(m))) / factorial(float(l + abs(m))));\n}\n\n// Spherical Harmonics\nvec2 Y(int l, int m, float theta, float phi) {\n    float normalization = K(l, m);\n    float plm = P(l, abs(m), cos(theta));\n    return vec2(normalization * plm * cos(float(m) * phi), normalization * plm * sin(float(m) * phi));\n}\n\n// Generalized Laguerre Polynomials\nfloat L(int n, int alpha, float x) {\n    if (n == 0) return 1.0;\n    if (n == 1) return 1.0 + float(alpha) - x;\n    float Lnm1 = 1.0;\n    float Ln = 1.0 + float(alpha) - x;\n    for (int i = 2; i <= n; i++) {\n        float Lnp1 = ((2.0 * float(i) - 1.0 + float(alpha) - x) * Ln - float(i - 1 + alpha) * Lnm1) / float(i);\n        Lnm1 = Ln;\n        Ln = Lnp1;\n    }\n    return Ln;\n}\n\n// Radial part of the hydrogen atom orbital wavefunction\nfloat R(int n, int l, float r) {\n    float rho = 2.0 * r / float(n);\n    int alpha = 2 * l + 1;\n    float normalization = sqrt(pow(2.0 / float(n), 3.0) * factorial(float(n - l - 1)) / (2.0 * float(n) * factorial(float(n + l))));\n    return normalization * exp(-rho / 2.0) * pow(rho, float(l)) * L(n - l - 1, alpha, rho);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized screen coordinates\n    vec2 uv = 10.*(fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 ms = 4.5*((iMouse.xy - 0.5 * iResolution.xy) / iResolution.y + vec2(.5));\n    \n    if (iMouse.xy == vec2(0)) ms = vec2(3.,3.);\n    \n    float scale = pow(float(n*n*l*m), exp((1.1)));\n    float t = iTime;\n    \n    // Time-dependent orbiting camera position\n    float camRadius = exp(ms.x); // Radius of the camera orbit\n    float camAngle = iTime * 0.1; // Orbit speed\n    vec3 camPos = vec3(cos(camAngle) * camRadius / 2., cos(camAngle*PHI) / 5., sin(camAngle) * camRadius);\n    \n    // Target point the camera looks at\n    vec3 target = vec3(0.0, 0.0, 0.0);\n    \n    // Compute ray direction for each pixel\n    vec3 forward = normalize(target - camPos); // Forward direction\n    vec3 right = normalize(cross(vec3(0.0, 1.0+sin(t)/7., 0.0+cos(t)/7.), forward)); // Right direction\n    vec3 up = cross(forward, right); // Up direction\n    vec3 rayDir = normalize(forward + uv.x * right + uv.y * up); // Adjusted ray direction\n    \n    // Marching parameters\n    float marchStep = 1.*exp(ms.y)+0.09; // Step size\n    float maxDistance = 170.0*exp(ms.y); // Maximum distance to march\n    float accumulatedDensity = 0.0; // Accumulate density along the ray\n    \n    \n\n    // Raymarching loop\n    for (float t = 0.0; t < maxDistance; t += marchStep) {\n        vec3 samplePoint = camPos + t * rayDir; // Current point along the ray\n        vec3 rtp = c2s(samplePoint); // Convert to spherical coordinates\n        \n        // Calculate wavefunction components at the sample point\n        vec2 ylm = Y(l, m, rtp.y, rtp.z);\n        float radial = R(n, l, rtp.x);\n        float probabilityDensity = radial * radial * (ylm.x * ylm.x + ylm.y * ylm.y);\n        \n        // Accumulate the density\n        accumulatedDensity += scale*marchStep*probabilityDensity/log(1.+t+ms.y)/100.;// * marchStep;\n    }\n\n    // Map the accumulated density to color\n    vec3 color = vec3(accumulatedDensity);\n    vec3 tphi = vec3(t, t*PHI, t/PHI);\n\n    // Apply a colormap or threshold as needed to visualize the density\n    fragColor = vec4(pow(cos(color*vec3(2.,3.,7.)+tphi)*.5+.5, vec3(1.)), 1.0);\n    //fragColor = vec4(pow((log(color+1.)), vec3(1.)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 c2s(vec3 cartesian) {\n    float x = cartesian.x;\n    float y = cartesian.y;\n    float z = cartesian.z;\n    \n    float r = length(cartesian); // Radial distance\n    float theta = r > 0.0 ? acos(z / r) : 0.0; // Polar angle, with a check to avoid division by zero\n    float phi = atan(y, x); // Azimuthal angle\n    return vec3(r, theta, phi);\n}\n\nvec3 s2c(float r, float theta, float phi) {\n    float x = r * sin(phi) * cos(theta);\n    float y = r * sin(phi) * sin(theta);\n    float z = r * cos(phi);\n    return vec3(x, y, z);\n}\n\n// Function to create a rotation matrix that aligns y-axis to a given vector\nmat4 alignVector(vec3 source, vec3 target) {\n    vec3 x = cross(source, target); // Rotation axis\n    float angle = acos(dot(source, normalize(target))); // Angle between vectors\n\n    // Create a rotation matrix around axis 'x' by angle 'angle'\n    vec3 axis = normalize(x);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat4(\n        oc * axis.x * axis.x + c,          oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0,\n        oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, 0.0,\n        oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,          0.0,\n        0.0,                               0.0,                                0.0,                               1.0\n    );\n}\n\n// Function to create a rotation matrix that aligns y-axis to a given vector\nmat4 alignYAxisToVector(vec3 targetNormal) {\n    vec3 yAxis = vec3(0.0, 1.0, 0.0);\n    vec3 x = cross(yAxis, targetNormal); // Rotation axis\n    float angle = acos(dot(yAxis, normalize(targetNormal))); // Angle between vectors\n\n    // Create a rotation matrix around axis 'x' by angle 'angle'\n    vec3 axis = normalize(x);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat4(\n        oc * axis.x * axis.x + c,          oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0,\n        oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, 0.0,\n        oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,          0.0,\n        0.0,                               0.0,                                0.0,                               1.0\n    );\n}\n\n// Function to apply rotation followed by translation to map y-axis to a given normal\nvec3 transformPoint(vec3 point, vec3 targetNormal, vec3 translation) {\n    mat4 rotationMatrix = alignYAxisToVector(normalize(targetNormal));\n    mat4 translationMatrix = mat4(\n        1.0, 0.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 0.0,\n        0.0, 0.0, 1.0, 0.0,\n        translation.x, translation.y, translation.z, 1.0\n    );\n\n    // Combine rotation and translation\n    mat4 transform = translationMatrix * rotationMatrix;\n\n    // Apply transformation\n    vec4 transformedPoint = transform * vec4(point, 1.0);\n    return transformedPoint.xyz;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}