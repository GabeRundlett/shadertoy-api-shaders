{
    "Shader": {
        "info": {
            "date": "1624659976",
            "description": "It's possible to implement rotational symmetry without any trigonometric functions with a binary search on the axes. For any n, if you write n in binary, then it requires the number of digits of n plus the number of 1s minus 1 conditional assignments.",
            "flags": 0,
            "hasliked": 0,
            "id": "sljGDy",
            "likes": 3,
            "name": "Rotational symmetry - no trig",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "circle",
                "distance"
            ],
            "usePreview": 0,
            "username": "been_jamming",
            "viewed": 405
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Signed distance to a disk\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n//Shift points on one side of an axis\nvec2 fold(vec2 p, vec2 axis, mat2 rotation){\n    return dot(p, axis) > 0.0 ? rotation*p : p;\n}\n\n//Shift a point into the first quadrant (different than abs, but same in this context)\nvec2 fold4(vec2 p){\n    p = p.y < 0.0 ? -p : p;\n    p = p.x < 0.0 ? vec2(p.y, -p.x) : p;\n    \n    return p;\n}\n\nvec2 fold12(vec2 p){\n    //It's better to fold everything into the first quadrant first assuming\n    //the number of slices is divisible by 4\n    p = fold4(p);\n    //Then the first quadrant is split into 3\n    p = fold(p, vec2(-0.8660254, 0.5), mat2(0.5, -0.8660254, 0.8660254, 0.5));\n    p = fold(p, vec2(-0.5, 0.8660254), mat2(0.8660254, -0.5, 0.5, 0.8660254));\n    return p;\n}\n\nfloat sdCircle( in vec2 p) \n{\n    p = fold12(p);\n    return length(p - vec2(0.965926, 0.258819)*0.75) - 0.15;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n\tfloat d = sdCircle(p);\n    \n\t// coloring\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d = sdCircle(m);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}