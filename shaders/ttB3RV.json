{
    "Shader": {
        "info": {
            "date": "1560442092",
            "description": "Inspired by various torus implementations, I tried this.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttB3RV",
            "likes": 42,
            "name": "cables",
            "published": 3,
            "tags": [
                "raymarching",
                "torus",
                "cables"
            ],
            "usePreview": 0,
            "username": "yuntaRobo",
            "viewed": 1279
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926;\nconst float E = 0.003;\n\n\nmat2 rotate2D(float r)\n{\n    return mat2(cos(r), -sin(r), sin(r), cos(r));\n}\n\nvec2 de(vec3 p)\n{\n    vec2 o = vec2(100.0, 0.0);\n    vec3 p_ = p;\n    \n    // trasition\n    float trasition = smoothstep(0.0, 1.0, mod((iTime - 3.0), 4.0)) + floor((iTime - 3.0) * 0.25);\n    trasition *= PI * 0.5;\n    p.xy *= rotate2D(trasition * 2.0);\n    p.yz *= rotate2D(trasition);\n    p.xz *= rotate2D(iTime * 0.35);\n\n    // y-axis repetition\n    p.y += atan(p.z, p.x) * 0.5 * 4.0;\n    p.y = mod(p.y, PI) - PI * 0.5;\n\n    // many torus !\n    float r = atan(p.x, p.z) * 4.0;\n    const int ite = 23;\n    for (int i = 0; i < ite; i++)\n    {\n        r += 1.0 / float(ite) * PI * 2.0;\n        float s = 0.5 + sin(float(i) * 1.618 * PI * 2.0) * 0.25;\n        s += sin(iTime + float(i)) * 0.2;\n\n        vec2 q = vec2(length(p.xz) + cos(r) * s - 3.0, p.y + sin(r) * s);\n        float d = length(q) - 0.06;\n        \n        if (d < o.x)\n        {\n            o.x = d;\n            o.y = float(i);\n        }\n    }\n\n    return o;\n}\n\n// iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p)\n{\n    float h = E;\n    vec2 k = vec2(1.0, -1.0);\n    return normalize(\n            k.xyy * de(p + k.xyy * h).x + \n            k.yyx * de(p + k.yyx * h).x + \n            k.yxy * de(p + k.yxy * h).x + \n            k.xxx * de(p + k.xxx * h).x\n        );\n}\n\nvoid trace(vec3 ro, vec3 rd, inout vec3 color)\n{\n    vec3 ro_ = ro;\n    \n    float ad = 0.0;\n    for (int i = 0; i < 128; i++)\n    {\n        vec2 res = de(ro) * 0.5;\n        ro += rd * res.x;\n        ad += res.x;\n        \n        if (res.x < E)\n        {\n            // light direction\n            vec3 ld = normalize(vec3(1.0, 1.0, 0.5));\n            \n            // normal\n            vec3 n = normal(ro);\n            \n            // albedo\n            color = mix(vec3(1.0, 0.5, 0.2), vec3(0.2, 0.6, 1.0) * 2.5, fract(res.y * 1.618));\n            color = mix(color, vec3(10.0, 0.0, 0.0), pow(fract((res.y + 10.5) * 1.618), 10.0));\n            \n            // diffuse\n            color *= pow(dot(n, ld) * 0.5 + 0.5, 3.0);\n            \n            // specular\n            vec3 h = normalize(ld + normalize(ro_ - ro));\n            color += pow(max(dot(h, n), 0.0), 20.0) * 2.5;\n            \n            // ao\n            float rim = float(i) / (128.0 - 1.0);\n            color *= exp(-rim * rim * 30.0) * 0.5;\n            \n            // fog\n            color *= exp(-ad * ad * 0.01);\n\n            return;\n        }\n        else if (ad > 25.0)\n        {\n            break;\n        }\n    }\n    \n    // background\n//    color = vec3(1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    // ray\n    vec3 ro = vec3(0.0, 0.0, 8.5);\n    vec3 rd = normalize(vec3(p, -1.5));\n\n    // ray marching\n    trace(ro, rd, color);\n    \n    // gamma correction\n    color = pow(color, vec3(0.454545));\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}