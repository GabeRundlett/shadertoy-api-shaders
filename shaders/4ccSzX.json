{
    "Shader": {
        "info": {
            "date": "1714207412",
            "description": "Reverse engineering of the [url=https://www.pouet.net/prod.php?which=96536]Remnants 256 bytes demo[/url] from gopher (Alcatraz).",
            "flags": 0,
            "hasliked": 0,
            "id": "4ccSzX",
            "likes": 19,
            "name": "Remnants full demo",
            "published": 3,
            "tags": [
                "fractal",
                "raymarch",
                "demoscene",
                "256",
                "alcatraz",
                "remnants"
            ],
            "usePreview": 0,
            "username": "ockiller",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 42.0\n#define EPSILON 1.0 / 42.0\n\nvec2 rotate(vec2 v, float r) {\n/*\n\tfloat c = cos(r), s = sin(r);\n\tmat2 rot = mat2(c, -s, s, c);\n\treturn rot * v;\n/*/\n\t// Approximation used in the demo, where for small angles, cos(r) ~= 1.0 and sin(r) ~= r\n\t// It simplfies into this\n\treturn v + v.yx * vec2(r, -r);\n//*/\n}\n\nvoid mainImage(OUT(vec4, fragColor), vec2 fragCoord) {\n\tfloat time = mod(iTime / 16.0, 6.0);\n\tint shot = int(time); // current camera shot\n\n\tvec3 pos = vec3(-69.0, -6.25, 24.0); // starting position\n\tpos.y += float(shot);\n\tpos.z -= 4.0 * time;\n\n\tfragCoord.y -= 0.1 * iResolution.y; // look down a bit\n\tvec3 dir = vec3((2.0 * fragCoord - iResolution.xy) / iResolution.y, -1.0);\n\tdir.x *= 0.75;\n\n\t// camera behave slightly differently on even and odd shots\n\tif ((shot & 1) != 0) {\n\t\tpos.y += float(shot) + 4.0 * (time - float(shot));\n\t\tdir = vec3(-dir.z, dir.yx);\n\t}\n\n\t// fractal gets slighly modified each shot\n\tfloat fract_rot = 0.417 + 0.0095 * float(shot);\n\n\tfloat l;\n\tfor (l = 0.0; l < MAX_STEPS; l++) {\n\t\t// The fractal\n\t\tvec3 v = pos;\n\t\tfloat rayStep = shot < 4 ? pos.y : 0.0; // ceiling is popped-off in the first 4 shots\n\t\tfor (float i = 100.0; i > 0.5; i *= fract_rot) {\n\t\t\tvec2 r = rotate(v.xz, 0.198);\n\t\t\tv.x = r.x; v.z = r.y;\n\t\t\tv = 0.79 * i - abs(mod(v, 2.0 * i) - i);\n\t\t\trayStep = max(rayStep, min(v.x, min(v.y, v.z)));\n\t\t}\n\n\t\tif (rayStep < EPSILON)\n\t\t\tbreak;\n\n\t\tpos += 0.6 * rayStep * dir;\n\t}\n\n\tfragColor = vec4(vec3(l / MAX_STEPS), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define OUT(_type, _var) out _type _var",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}