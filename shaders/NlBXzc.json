{
    "Shader": {
        "info": {
            "date": "1628193276",
            "description": "mouse control\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NlBXzc",
            "likes": 13,
            "name": "paper cut 3",
            "published": 3,
            "tags": [
                "moebiustransform"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/7ljSzV\n\n#define rot(a)    mat2( cos(a+vec4(0,11,33,0)) )     // rotation                  \nvec3 M;\n\nvec2 transform( vec2 P ) {           // --- mapping distortion on the plane ---\n // P += .5*sin(P.yx/2.) + 2.*cos(P.yx/8.),          // sinwave disto\n    P /= 50.;\n    vec2 z = P - vec2(-1,0);  P.x -= .5;             // Moebius transform\n    P *= mat2(z,-z.y,z.x) / dot(P,P);    \n                     // offset   spiral, zoom             phase     spiraling\n    P =   log(length(P+=.5))*vec2(.5, -1)  + atan(P.y, P.x)/6.3 * vec2(5, 1);        \n\treturn P * 50.; \n}\n\nfloat scene( vec3 q ) {              // --- scene SDF -------------\n    q.yz *= rot( .5+6.*M.y),                         // rotations\n    q.xz *= rot( 2.-6.*M.x);\n    float t = 9.,s, a,j; vec2 e = vec2(.1,0);\n    vec2 P = transform(q.xz), Q;\n    j = length( P.x - vec2(transform(q.xz+e).x,transform(q.xz+e.yx).x) ),\n    a = P.x/8. + iTime;\n    Q = mod(P+4.,8.)-4., \n    P = floor((P+4.)/8.),\n    s = Q.y-3., \n // s = mod(P.x,2.) < 1. ? Q.y-3. : Q.y+3., // try mod(P.x+P.y // flip direction. -3. for border continuity\n    P = abs(Q),\n    s /= sqrt(j)*3.,                                           // scale amplitude with cell size\n    q.y -= max(P.x,P.y)<3. ? .6*s*sin(a) : 0., // variant: .5*s*(-1.+.3*sin(a)) \n // max(P.x,P.y)<3. && P.x > 3.*abs(cos(a)) ? t=1. :           // WIP: preserve flip length\n                   t = min(t,  abs(q.y)-.05 );\n    return t;\n}\n//  abs(q.y) < dy+.05 && max(P.x,P.y)<3. && P.x > 3.*abs(cos(a)) ? t = 1. : // WIP: preserve flip length \n//                 t = min(t,  abs(q.y - (max(P.x,P.y)<3. ? dy : 0.) )-.05  );\n\n\nvoid mainImage(out vec4 O, vec2 U) { // --- ray-marching ------------\n    float t=9.;\n    vec2  P;\n    vec3  R = iResolution, // e = vec3(1,-1,0), X=e.xzz, Y=e.zxz, Z=e.zzx,\n          D = normalize(vec3( U+U, -3.5*R.y ) - R ),         // ray direction\n          p = 90./R, q;                                      // marching point along ray \n      //  M =  iMouse.xyz/R -.5,\n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(8,4,0)/1e2*cos(iTime+vec3(0,11,0));\n     \n    for ( O-=O ; O.x < 1. && t > .01 ; O+=.01 )              // march ray\n        t = min(9., scene(p)),\n        t = min(t, scene(p+.5*t*D)),                         // to handle discontinuities\n        p += .5*t*D;                                         // step forward = dist to obj          \n\n    O = 1.5*(1.-O);\n // O = 2.*exp(-2.*O);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}