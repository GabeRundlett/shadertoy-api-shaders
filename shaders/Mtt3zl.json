{
    "Shader": {
        "info": {
            "date": "1471015478",
            "description": "trying to see if I can use smoothmin to make a pretty looking explosion",
            "flags": 0,
            "hasliked": 0,
            "id": "Mtt3zl",
            "likes": 16,
            "name": "meteor shower",
            "published": 3,
            "tags": [
                "noise",
                "raytrace",
                "smoothmin"
            ],
            "usePreview": 0,
            "username": "cabbibo",
            "viewed": 1063
        },
        "renderpass": [
            {
                "code": "// The MINIMIZED version of https://www.shadertoy.com/view/Xl2XWt\n\n\nconst float MAX_TRACE_DISTANCE = 3.0;           // max trace distance\nconst float INTERSECTION_PRECISION = 0.001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 100;\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n\treturn (d1.x<d2.x) ? d1 : d2;   \n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\nvec2 smin( vec2 a, vec2 b, float k )\n{\n    float h = clamp( 0.5+0.5*(b.x-a.x)/k, 0.0, 1.0 );\n    vec2 m = mix( b, a, h ); \n    return vec2( m.x - k*h*(1.0-h) , m.y );\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( vec3 x )\n{\n    // The noise function returns a value in the range -1.0f -> 1.0f\n\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f       = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    return mix(mix(mix( hash(n+0.0), hash(n+1.0),f.x),\n                   mix( hash(n+57.0), hash(n+58.0),f.x),f.y),\n               \t\tmix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n}\n\n\n\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n    \n    float cycleVal =.7;// mod( iTime , 6. )/6.;\n    float astPos = .8 - cycleVal;\n    vec2 planet = vec2( sdSphere( pos - vec3( -.5 , -.3 , -0.4 ) , .8 ) , 1. ); \n    vec2 asteroid = vec2( sdSphere( pos - vec3( .3 , .2 , 0.1 ) * astPos * 6. , .3 ) , 2. );\n\n    \n   \tvec2 resFlat = opU( planet, asteroid );\n    vec2 resSmooth = smin( planet, asteroid , cycleVal * .3 );\n    float blendDif = resSmooth.x - resFlat.x;\n    \n    vec2 res = resFlat;\n    \n    res.x += cycleVal * 5. * (noise( (pos + cycleVal) * 10. ) + .6 * noise( (pos - cycleVal) * 30. ) + .3 * noise( (pos + cycleVal) * 60. )) * blendDif;\n    res.y = resSmooth.y;\n    \n    return res;\n    \n}\n\n\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\n\nvec3 astroidCol( vec3 pos , vec3 norm ){\n    \n float light = dot( norm , normalize(vec3( -1 , -1,.3)));\n    \n   vec3 col = texture( iChannel0 , pos.xy ).xyz;\n   vec3 col2 = texture( iChannel1 , pos.xy * 2. ).xyz;\n    \n   vec3 lCol =.4* max(0. , light ) * vec3( 2. , .5 , .5 );\n   return 1.4 * ( .3 * length(col2) * length( col2 ) + (lCol)); //+ vec3( .6 , .2 , .2 ))); \n    \n}\n\nvec3 planetCol( vec3 pos , vec3 norm ){\n \n   float light = dot( norm , normalize(vec3( 1 , 1,0)));\n    \n   vec3 col = texture( iChannel0 , pos.xy + vec2( iTime * .01 , 0.)).xyz;\n   //vec3 col2 = texture( iChannel1 , pos.xy * .3 ).xyz;\n    \n   vec3 lCol = light * vec3( 1. , .5 , .2 );\n   return 2. * (col * col + (lCol + vec3( .2 , .2 , .2 ))) ;\n    \n    \n}\n\n\nvec3 render( vec2 res , vec3 ro , vec3 rd ){\n   \n\n  vec3 color = vec3( 0. );\n    \n  vec3 lightPos = vec3( 1. , 4. , 3. );\n    \n    \n  if( res.y > -.5 ){\n      \n    vec3 pos = ro + rd * res.x;\n    vec3 norm = calcNormal( pos );\n      \n    vec3 lightDir = normalize( lightPos - pos );\n    \n    float match = max( 0. , dot( lightDir , norm ));\n      \n    float splodVal = max(0.,.5 - abs(1.5 -res.y)); \n      \n      \n    vec3 pCol = planetCol( pos , norm );\n      \n    vec3 aCol = astroidCol( pos , norm );\n      \n    vec3 impactCol = vec3( 1. , 0. , 0.) * match * .5 + 2.*vec3( .6 , .4 , 0. ) * splodVal * match;\n      \n    color = mix( pCol , aCol , max( res.y-1. , 0.) );\n    color = mix( color, impactCol , max(splodVal * splodVal * 10. ,0.));\n      \n\t//color = aCol;\n        \n        \n  }\n   \n  return color;\n    \n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n\n    vec3 ro = vec3( sin( iTime) * .5, 0., 2.);\n    vec3 ta = vec3( 0. , 0. , 0. );\n    \n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    vec2 res = calcIntersection( ro , rd  );\n\n\t\n    vec3 color = render( res , ro , rd );\n    \n\tfragColor = vec4(color,1.0);\n\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}