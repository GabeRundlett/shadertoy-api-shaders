{
    "Shader": {
        "info": {
            "date": "1518640128",
            "description": "a WIP shader im working on",
            "flags": 0,
            "hasliked": 0,
            "id": "ls3cWH",
            "likes": 8,
            "name": "Hightmap based shadows (WIP)",
            "published": 3,
            "tags": [
                "shading",
                "sky",
                "shadows",
                "diffuse",
                "based",
                "hightmap"
            ],
            "usePreview": 1,
            "username": "robobo1221",
            "viewed": 1067
        },
        "renderpass": [
            {
                "code": "vec3 getTexture(vec2 uv){\n\treturn texture(iChannel0, uv).rgb;\n}\n\nfloat getHeightmap(vec2 uv){\n    const float inv3 = 1.0 / 3.0;\n    \n\treturn dot(getTexture(uv), vec3(inv3));\n}\n\nvec3 getNormal(vec2 uv){\n    const float epsilon    = 0.004;\n    const float invEpsilon = 1.0 / epsilon;\n    \n\tfloat centerHeight = getHeightmap(uv);\n    float horizontal   = getHeightmap(uv + vec2(epsilon, 0.0));\n    float vertical     = getHeightmap(uv + vec2(0.0, epsilon));\n    \n    float dh = (centerHeight - horizontal) * invEpsilon;\n    float dv = (centerHeight - vertical)   * invEpsilon;\n    \n    return normalize(vec3(dh, dv, 1.0));\n}\n\nfloat getShadow(vec2 uv, vec3 lp){\n    const int steps = 64;\n    const float invSteps = 1.0 / float(steps);\n    \n\tvec3 inc = lp * invSteps;\n    float heightmap = getHeightmap(uv);\n    vec3 position = vec3(uv, heightmap);\n    \n    float shadow = 1.0;\n    \n    for (int i = 0; i < steps && position.z < 1.0; i++){\n        position += inc;\n        float offsetHightmap = getHeightmap(position.xy);\n        \n        if (offsetHightmap > position.z)\n        {\n            return 0.0;\n        }\n\n    }\n    return 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv /= uv.y - 1.0;\n    \n    vec2 uvlp = iMouse.xy/iResolution.xy * 2.0 - 1.0;\n    uvlp /= uvlp.y - 1.0;\n    \n    vec3 lightPos = normalize(vec3(uvlp, 1.0));\n    vec3 normal = getNormal(uv);\n    vec3 albedo = vec3(1.0);\n    \n    float diffuse = clamp(dot(lightPos, normal), 0.0, 1.0);\n    float shadows = getShadow(uv, lightPos);\n    \n    vec3 skylight = vec3(0.3, 0.5, 0.8);\n    vec3 sunlight = vec3(0.8, 0.6, 0.5) * 4.0;\n\n    vec3 color = vec3(albedo * (diffuse * shadows * sunlight + skylight));\n    color = pow(color, vec3(2.2));\n    color /= color + 1.0;\n    color = pow(color, vec3(1.0 / 2.2));\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}