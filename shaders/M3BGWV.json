{
    "Shader": {
        "info": {
            "date": "1708889223",
            "description": "DAY WITH CIRCLES",
            "flags": 0,
            "hasliked": 0,
            "id": "M3BGWV",
            "likes": 3,
            "name": "STARFIELD SCENE",
            "published": 3,
            "tags": [
                "stars",
                "night"
            ],
            "usePreview": 0,
            "username": "archon",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "//CONSTELLATIONS BY Scintoth\n//The rest, this shader is for you to use in your eminecraft java shaders, you will have a very beautiful night\n#define MOD3 vec3(.1031,.11369,.13787)\n#define MOONPOS vec2(5.3, .8)\n#define S(a,b,t) smoothstep(a,b,t);\n\nfloat distLine(vec2 p, vec2 a, vec2 b){\n    vec2 pa = (p - a) / 2.0;\n    vec2 ba = (b - a) / 2.0;\n    float t = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * t);\n}\n\nfloat noiseFloat(vec2 p){\n    p = fract(p * vec2(213.53, 970.19));\n    p = p + dot(p, p+548.23);\n    return fract(p.x * p.y);\n}\n\nvec2 noiseVector(vec2 p){\n    float n = noiseFloat(p);\n    return vec2(n, noiseFloat(p+n) * 10.0);\n}\n\nvec2 GetPos(vec2 id, vec2 offsets){\n    // Increase the size of randomly generated positions\n    vec2 n = noiseVector(id + offsets) * 100.0 * ((iDate.w + 8000.0 + iTime) / 50000.0);\n    return (sin(n) * 0.9) + offsets;\n}\n\nfloat Line(vec2 p, vec2 a, vec2 b){\n    float d = distLine(p, a, b);\n    float m = smoothstep(0.15, 0.01, d * 10.0);\n    m = m * smoothstep(0.9, 0.32, length(a-b));\n    return m;\n}\n\nfloat Constellation(vec2 uv) {\n    float m = 0.0;\n    \n    vec2 star1Position = vec2(0., 0.0);\n    vec2 star2Position = vec2(0.2, 0.4);\n    vec2 star3Position = vec2(0.1, 0.5);\n    vec2 star4Position = vec2(0.3, 0.6);\n    vec2 star5Position = vec2(0.8, 0.5);\n    \n    // New star positions\n    vec2 star6Position = vec2(0.4, 0.7);\n    vec2 star7Position = vec2(1., .8);\n\n    m += Line(uv, star1Position, star2Position);\n    m += Line(uv, star2Position, star3Position);\n    m += Line(uv, star3Position, star4Position);\n    m += Line(uv, star4Position, star5Position);\n    m += Line(uv, star4Position, star6Position); // Connect star 4 to star 6\n    m += Line(uv, star5Position, star7Position);\n    \n    // Add more stars and lines to form constellations\n    \n    return m;\n}\n\nfloat hash12(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 15.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat circ(vec2 uv, vec2 pos, float radius, float blur) {\n    float t = cos(sin(iTime));\n    float dist = length(uv - pos * t);\n    return S(radius + blur, radius - blur, dist);\n}\n\nvec4 moon(vec2 uv) {\n    float d = length(uv);\n    float t = iTime;\n    t /= 1.;\n    float angle = radians(360.0) + t * radians(60.0);\n    mat2 rotate = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    uv = rotate * uv;\n    float c = circ(uv, MOONPOS, .8, .1 * d);\n    uv.x *= .19/d;\n    c *= 1. - circ(uv, MOONPOS + vec2(.03), .07, .001) * .95;\n    vec4 col = vec4(c);\n    col.rgb *= .8;\n    return col;\n}\n\nfloat Star(vec2 uv, float flare) {\n    float d = length(uv);\n    float m = 0.05 / d;\n    float rays = max(0.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n    m += rays * flare;\n    rays = max(0.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n    m += rays * 0.3 * flare;\n    m *= smoothstep(1.0, 0.2, d);\n    return m;\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p * vec2(123.34, 456.21));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\nfloat stars(vec2 uv, float t) {\n    t *= 3.;\n    float n1 = hash12(uv * 10000.);\n    float n2 = hash12(uv * 11234.);\n    float alpha1 = pow(n1, 20.);\n    float alpha2 = pow(n2, 20.);\n    float twinkle = sin((uv.x - t + cos(uv.y * 20. + t)) * 10.);\n    twinkle *= cos((uv.y * .234 - t * 3.24 + sin(uv.x * 12.3 + t * .243)) * 7.34);\n    twinkle = (twinkle + 1.) / 2.;\n    return alpha1 * alpha2 * twinkle;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= 8.0;\n    float t = cos(sin(iTime));\n    t *= 0.8;\n\n    vec3 col = vec3(0);\n    col += stars(uv, t);\n\n    vec2 gv = fract(uv) - 0.5;\n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            vec2 offs = vec2(x, y);\n            vec2 id = floor(uv);\n            float n = Hash21(id + offs);\n            float size = n * 1.12 * t;\n            vec3 color = sin(vec3(1.0, 0.9, 0.3) * fract(n * 3434.5) * 123.0) * 0.5 + 0.6;\n            color += 0.6;\n            float stars = Star(gv - offs - vec2(n - 0.5, fract(n * 341.0)) + 0.1, 1.0);\n            col += stars * size * color;\n        }\n    }\n\n    vec4 moonColor = moon(uv);\n\n    if (moonColor.a > 0.1) {\n        col += vec3(0.1, 0.1, 0.1) + moonColor.rgb;\n        col += vec3(0.1, 0.1, 0.1);\n    }\n    \n    col += Constellation(uv); // Add the contribution of constellations\n\n    // Implementation of the distLine function and generation of random constellations\n    float m = 0.0;\n    uv = uv * 10.0;\n    gv = fract(uv) - 0.5;\n    vec2 id = floor(uv);\n    \n    vec2 p[9];\n    \n    int i = 0;\n    for(float y = -1.0; y<=1.0; y++){\n        for(float x = -1.0; x<=1.0; x++){\n            p[i++] = GetPos(id, vec2(x, y));\n        }\n    }\n    \n    for(int i=0; i<9; i++){\n        m = m + Line(gv, p[4], p[i]);\n        \n        vec2 j = (p[i] - gv) * 2.0;\n        float sparkle = 0.1/dot(j, j) * (50.0 / (8000.0 + iTime));\n      \n        m = m + sparkle * (sin(((8000.0 + iTime)+p[i].x)* 0.5)*0.5 + 0.9);\n    }\n    \n    m = m + Line(gv, p[7], p[3]);\n    m = m + Line(gv, p[1], p[5]);\n    m = m + Line(gv, p[7], p[3]);\n    m = m + Line(gv, p[7], p[5]);\n    \n    col += vec3(m * 0.28, m * 0.28, m * 0.4); \n\n    fragColor = vec4(col, 0.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}