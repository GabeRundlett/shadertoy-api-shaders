{
    "Shader": {
        "info": {
            "date": "1589660626",
            "description": "License CC0: Abstract Galaxy\nBeen working on scifi shaders, while this is not \"realistic\" looking I find it nice to look at\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3sBBRw",
            "likes": 6,
            "name": "Abstract galaxy",
            "published": 3,
            "tags": [
                "2d",
                "fbm"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 467
        },
        "renderpass": [
            {
                "code": "// License CC0: Abstract Galaxy\n//\tBeen working on scifi shaders, while this is not \"realistic\" looking I find it nice to look at\n#define PI           3.141592654\n#define TAU          (2.0*PI)\n\n#define TIME         (iTime*0.2)\n#define RESOLUTION   iResolution\n\n#define LESS(a,b,c) mix(a,b,step(0.,c))\n\n#define SABS(x,k)    LESS((.5/k)*x*x+k*.5,abs(x),abs(x)-k)\n\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return p.x*vec2(cos(p.y), sin(p.y));\n}\n\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nfloat noise1(vec2 p) {\n  float s = 1.0;\n\n  p *= tanh(0.1*length(p));\n\n  float a = cos(p.x);\n  float b = cos(p.y);\n\n  float c = cos(p.x*sqrt(3.5));\n  float d = cos(p.y*sqrt(1.5));\n\n  return a*b*c*d;\n}\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nfloat galaxy(vec2 p, float a, float z) {\n  vec2 pp = toPolar(p);\n  pp.y += pp.x*3.0 + a;\n  p = toRect(pp);\n  \n  p *= z;\n  \n  return noise1(p);\n}\n\nfloat height(vec2 p) {\n  p *= 0.75;\n  float s = 0.0;\n  float a = 1.0;\n  float f = 15.0;\n  float d = 0.0;\n  for (int i = 0; i < 3; ++i) {\n    float g = a*galaxy(p, -0.5*TIME + TIME*(0.2*pow(float(i), 1.0)), f);\n    s += g;\n    a *= sqrt(0.5);\n    f *= sqrt(2.0);\n    d += a;\n  }\n  \n  float l = length(p);\n  \n  return SABS((-0.25+ s/d), 0.5)*exp(-5.5*l*l);\n}\n\nvec3 normal(vec2 p) {\n  vec2 eps = vec2(0.000125, 0.0);\n  \n  vec3 n;\n  \n  n.x = height(p - eps.xy) - height(p + eps.xy);\n  n.y = 2.0*eps.x;\n  n.z = height(p - eps.yx) - height(p + eps.yx);\n  \n  return normalize(n);\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(0.75)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n \n  vec3 lp1 = vec3(-2.0, 0.5, 2.0);\n  vec3 ld1 = normalize(lp1 - vec3(p.x, 0.0, p.y));\n  vec3 lp2 = vec3(2.0, 0.5, 2.0);\n  vec3 ld2 = normalize(lp2 - vec3(p.x, 0.0, p.y));\n\n  float l = length(p);\n  float tl = tanh(l);\n\n  float h = height(p);\n  float th = tanh(h);\n  vec3 n = normal(p);\n  \n  float diff1 = max(dot(ld1, n), 0.0);\n  float diff2 = max(dot(ld2, n), 0.0);\n\n  vec3 col = vec3(0.0);\n  col += vec3(0.5, 0.5, 0.75)*h;\n  col += 0.5*pow(diff1, 10.0);\n  col += 0.25*pow(diff2, 2.0);\n  col += pow(vec3(0.5)*h, n.y*1.75*(mix(vec3(0.5, 1.0, 1.5), vec3(0.5, 1.0, 1.5).zyx, 1.25*tl)));\n  col += 0.9*vec3(1.0, 0.9, 0.75)*exp(-10.0*l*l);\n\n  col = postProcess(col, q);\n\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}