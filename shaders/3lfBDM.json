{
    "Shader": {
        "info": {
            "date": "1596822609",
            "description": "source tutorial : https://www.youtube.com/watch?v=ZlNnrpM0TRg\nsimple onet : https://play.google.com/store/apps/details?id=com.BigBUFF.OnetIconConnect\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3lfBDM",
            "likes": 0,
            "name": "5. Making Face",
            "published": 3,
            "tags": [
                "makingface"
            ],
            "usePreview": 0,
            "username": "altera0",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "#define S(a , b , t ) smoothstep( a , b , t )\n#define sat(x) clamp( x, 0.0f , 1.0f )\n\n\n// -------------------------------------------------\n// 리맵01\n// -------------------------------------------------\nfloat remap01 ( float a , float b , float v ) {\n\t// 이게 단순히 비율을 구하는 것 뿐만이 아니라,\n    // 로컬 좌표를 , ( 0 ~ 1)의 월드 UV로 사상시키는 의미도 담고 있다.\n    return sat( ( v - a ) / ( b - a ) );\n}\n\n// -------------------------------------------------\n// 리맵\n// -------------------------------------------------\nfloat remap( float a , float b , float c , float d , float value ) {\n    //return (value - a) / ( b - a ) * ( d - c ) + c;\n    return remap01( a , b , value ) * ( d - c ) + c;\n}\n\n// -------------------------------------------------\n// within함수 ( 리맵 01 함수의 vec2 버젼이다. )\n// -------------------------------------------------\nvec2 within( vec2 uv , vec4 rect ) {\n\t// remap01과 마찬가지로, UV를 사상 시키는 의미를 담고 있다.\n    return ( uv - rect.xy ) / ( rect.zw - rect.xy );   \n}\n\n\n\n// -------------------------------------------------\n// 눈\n// -------------------------------------------------\nvec4 Eye( vec2 uv ) {\n    // 이미 uv가 넘어 올때, 어떤 구역 [ ~ ] 안에서 사상되어 있는 상태이다.\n    // within 함수에서 이미 계산되어 있는 상태이다.\n    // 즉 자기 자신의 중점을 ( 0 , 0 )으로 생각하고 자기 자신만 계산하면 된다.\n    \n\tuv -= 0.5f;\n    float d = length(uv);\n\n    \n    vec4 irisCol = vec4( 0.3f, 0.5f, 1.0f , 1.0f );\n    \n    // 눈의 전체 동그라미\n    vec4 col = mix( vec4(1.0f) , irisCol , S( 0.1f , 0.7f , d ) * 0.5f );\n    \n    // 눈동자 전체의 감싸는 동그라미\n    // 뒷쪽의 sat는 그림자까지 표시해주기 위한 테크닉이다.\n    col.rgb *= 1.0f - S(0.45, 0.5f , d ) * 0.5f * sat ( -uv.y - uv.x ); // 중점에서 0.5이상 떨어진 곳만 둥글게 만든다.\n    \n    \n    // 눈동자 검은색 부분\n    col.rgb = mix( col.rgb , vec3(0.0f), S(0.3f , 0.28f, d ) );\n    \n    // 눈동자 파란색 부분\n    irisCol.rgb *= 1.0f + S(0.3f, 0.05f, d );\n    col.rgb = mix( col.rgb , irisCol.rgb , S( 0.28f, 0.25f , d ) );\n    \n    \n\t// 눈동자 파란색 부분 안의 다시 검은 부분    \n    col.rgb = mix( col.rgb ,vec3(0.0f) , S( 0.16f, 0.14f , d ) );\n\n    \n    // eys High Light\n    float highLight = S( 0.1f , 0.09f , length( uv -vec2(-0.15f, 0.15f)));\n    highLight += S( 0.07f , 0.05f , length( uv + vec2( -0.08, 0.08 )));\n    \n    col.rgb = mix( col.rgb, vec3(1.0f), highLight );\n    col.a = S( 0.5f , 0.45f , d );\n    \n    \n    return col;\n}\n\n\n// -------------------------------------------------\n// 입\n// -------------------------------------------------\nvec4 Mouth( vec2 uv ) {\n    uv -= 0.5f;\n    vec4 col = vec4( 0.5f, 0.18f, 0.05f, 1.0f );\n    \n    uv.y *=1.5f;\n    uv.y -= uv.x * uv.x * 2.0f;\n    \n    float d = length(uv );\n    col.a = S( 0.5f , 0.48f, d );\n    \n    float td = length( uv - vec2(0.0f, 0.6f));\n\n    // 이빨에 약간의 다크 셰도우를 준다.\n    vec3 toothCol = vec3(1.0f) * S( 0.6f , 0.35f ,d );\n    \n    \n    // 거리에 따른 이빨의 색깔 합성.\n    col.rgb = mix( col.rgb, toothCol , S(0.4f, 0.37f ,td ) );\n    \n    // 혀\n    td = length(uv + vec2(0.0f, 0.5f ));\n    col.rgb = mix( col.rgb, vec3(1.0f, 0.05f, 0.05f ), S(0.5f, 0.2f,td));\n    \n    \n    return col;\n}\n\n// -------------------------------------------------\n// 머리\n// -------------------------------------------------\nvec4 Head( vec2 uv ) {\n \tvec4 col = vec4(0.9f , 0.65f, 0.1f, 1.0f);\n    \n    float d = length(uv);\n    \n    col.a = S(0.5f , 0.49f , d );\n    \n    \n    // 중심에서 시작해서 끝으로 갈수록 떨어지는 Fall Off\n    float edgeShader = remap01( 0.35f , 0.5f , d );\n    edgeShader = edgeShader * edgeShader;\n    col.rgb *= 1.0f -  edgeShader * 0.5f;\n    \n    \n    // 외곽선 테두리 ( 이건 자기가 찾아 놓은 값 대입 한 것 )\n    col.rgb = mix( col.rgb, vec3(0.6f, 0.3f, 0.1f), S(0.47f ,0.48f , d) );\n\n    \n    // 하이라이트\n    float highlight = S(0.41f, 0.405f, d );\n    highlight *= remap( 0.41f , -0.1f , 0.75f , 0.0f , uv.y );\n    col.rgb = mix( col.rgb, vec3(1.0f), highlight );\n    \n    // 오른쪽 볼 하이라이트\n    d = length( uv - vec2(0.25f, -0.2f) );\n    float cheek = S(0.2f, 0.01f, d ) * 0.4f;\n    cheek *= S(0.17f, 0.16f , d );\n    \n    \n    col.rgb = mix( col.rgb, vec3(1.0f,0.1f , 0.1f), cheek );\n    \n    \n    \n    return col;\n}\n\n\n// -------------------------------------------------\n// 얼굴\n// -------------------------------------------------\nvec4 Smiley( vec2 uv ) {\n    vec4 col = vec4(0);\n    \n    // 이게 좌우 대칭을 만들어 준다.\n    uv.x = abs( uv.x );\n    \n    vec4 head = Head(uv);\n    \n    // 여기에서 눈의 uv를 리맵화 한다. 인간이 알아 보기 쉽도록\n    vec4 eye = Eye( within( uv, vec4( 0.03, -0.1f , 0.35f , 0.25f) ) );\n    vec4 mouth = Mouth( within( uv, vec4( -0.3f, -0.4f, 0.3f, -0.1f) ) );\n    \n    // 이거 섞어주는 순서가 중요하다.\n    col = mix( col , head , head.a ); // 헤드의 알파값으로 섞는다.\n    col = mix ( col , eye , eye.a );\n    col = mix ( col, mouth, mouth.a );\n    \n    return col;\n}\n\n    \n// -------------------------------------------------\n// 메인\n// -------------------------------------------------\nvoid mainImage( out vec4 fragColor , in vec2 fragCoord ) {\n \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5f;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    \n    \n\tfragColor = Smiley(uv );    \n    \n    //fragColor =  vec4(0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}