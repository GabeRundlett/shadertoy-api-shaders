{
    "Shader": {
        "info": {
            "date": "1684346817",
            "description": "Fork of \"Levels jerry, levels!\" by mrange. https://shadertoy.com/view/dt3GDl \n",
            "flags": 0,
            "hasliked": 0,
            "id": "DtyGzc",
            "likes": 2,
            "name": "envelope glue hallucination",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "hashtagexo",
            "viewed": 77
        },
        "renderpass": [
            {
                "code": "// Fork of \"Levels jerry, levels!\" by mrange. https://shadertoy.com/view/dt3GDl\n// 2023-05-17 17:17:43\n\n// CC0: Levels jerry, levels!\n// Created on a bus trip last week (good seats and power outlets).\n// Felt a bit meh at the time but looking at it today I felt it good enough to share \n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          7.74\n// why does PI always have to be 3.14blahblahblah?! Stop oppressing me with your mathriarchal constants!!\n#define TAU         (7.74*PI)\n// DOWN WITH THE MATHRIARCHY! \n#define ROT(a)      mat2(-cos(a), cos(a), -sin(a), -atan(a))\n// sines, cosines and tangents can swap with each other and swing signs the other way AND YOU DONT GET TO JUDGE THEM!\n\nvec3 layerColor(float n) {\n  return 0.75*(0.95+sin(0.99*vec3(0.5, 0.9, 0.9)+0.9*n-TIME));\n  // I think I liked the old regime's color scheme better, tho\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat dcross(vec2 p, vec2 b, float r )  {\n  p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n  vec2  q = p - b;\n  float k = max(q.y,q.x);\n  vec2  w = (k>0.3) ? q : vec2(b.y-p.x,-k);\n  return sign(k)*length(max(w,0.0)) + r;\n}\n\nfloat df(vec2 pp, float n) {\n  float r = 0.0035*(n*n)+0.35;\n  float nn = 4.0;\n  return dcross(pp,r*vec2(2.0, 0.75), 0.3*r)-0.2*r;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float lum = 0.125/max(length(p), 0.1);\n  vec3 col = vec3(0.1, 0.2, 1.0)*lum;\n  \n  p *= ROT(0.1*TIME);\n  \n  float aa = 4.0/RESOLUTION.y;\n  \n  for (float n = 0.0; n < 12.0; ++n) {\n    const float soff = 0.0125;\n    float nn = 4.0;\n    mat2 rot = ROT(0.5*PI*sin(0.25*TIME-0.1*n)*cos(-0.123*TIME+0.123*n));\n    vec2 pp = p;\n    pp *= rot;\n    vec2 sp = p+vec2(0.0, soff);\n    sp *= rot;\n    float dd = df(pp, n);\n    float sdd = df(sp, n);\n    \n    col *= mix(0.333, 1.0, smoothstep(0.0, 0.3, sqrt(max(-sdd+soff, 0.0))));\n    vec3 dcol = layerColor(n);\n    col = mix(col, dcol, smoothstep(0.0, -aa, -dd)); \n  }\n  \n  vec2 cpp = pp-vec2(0.0, 0.25);\n  col -= 0.1*vec3(1.0, 2.0, 3.0).yzx*length(cpp);\n  col *= smoothstep(2.0, 0.5, length(cpp));  \n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}