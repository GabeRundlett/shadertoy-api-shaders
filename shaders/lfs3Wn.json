{
    "Shader": {
        "info": {
            "date": "1702964329",
            "description": "A rug with a green and gold flower pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "lfs3Wn",
            "likes": 18,
            "name": "Green and gold flower rug",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "carpet",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nconst float scale = 1.5;\n\nvoid transform(inout vec2 uv, inout vec2 t2){\n        t2 = triangle_wave(uv+.5);\n        uv =\n            t2-triangle_wave(uv.yx)-fract(t2/2.)\n        ;\n        //{t2.x = (t2.x+1.5*sign(t2.y-t2.x)); }\n        //{uv.x = (uv.x+1.5*sign(uv.y-uv.x)); }\n        //{t2.y = (t2.y+1.*sign(t2.y-t2.x)); }\n\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    vec2 t2 = vec2(0.);\n    vec3 col1 = col;\n    float c1=0.;\n    for(int k = 0; k < 15; k++){\n        float warp_scale = 16.;\n        vec2 warp =\n            //abs(.5-fract(uv*3.))*3.\n            //abs(.5-fract(t2*3.))*3.\n            vec2(sin((t2.x)*warp_scale),cos((t2.y)*warp_scale))\n            //vec2(sin((uv.x)*warp_scale),cos((uv.y)*warp_scale))\n        ;\n        uv.y -= 1./4.;\n\n        uv = (uv+t2)/scale;\n        \n        uv = (fract(vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n        col.x =\n            max(length(uv-t2-c1)/3.,col.x);\n        \n        ;\n        if(k>1)\n        warp = warp*warp/warp_scale;\n        else\n        warp = vec2(0);\n\n        vec2 uv_1 =\n            uv + warp.yx\n        ,\n        t2_1=\n            t2 + warp.yx\n        ;\n        vec3 col_1 = col;\n        transform(uv,t2);\n\n        transform(uv_1,t2_1);\n        //uv_1 = rotate(uv_1,t2.x*2.);\n        //t2_1 = rotate(t2_1,t2.x*2.);\n        \n        c1 =\n            max(abs(uv_1.y+uv_1.x)/2.,c1)\n            //max(abs(uv_1.y-uv_1.x),c1)\n        ;\n        c1 =\n            max(1.-abs(2.*c1-1.),c1/4.)\n        ;\n        col.x =\n            max(length(uv_1-t2_1-c1)/3.,col.x)\n\n        ;\n        //if(uv.y>-.25)\n        col =\n            abs(col-(1.-(c1*col.x)));\n        col1 =\n            abs(col1*c1-col-1.).yzx\n            //abs(col1*c1*sign(t2.y-t2.x)/2.-col-1.).yzx\n            //abs(col1*c1-col+sign(t2.x-t2.y)).yzx\n        ;\n    }\n    return col1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 2.*8.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.xy += iTime/t1/12./2.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n    fragColor = vec4(col1/2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/DddBD4\n\nint collatz(int initial, int steps){\n    //makes some interesting rhythms\n    for(int i = 0; i < steps; i++){\n        if(initial%2==0) initial /= 2;\n        else initial = initial*3+1;\n    }\n    return initial;\n}\nfloat collatz(float initial, float steps){\n    return float(collatz(int(initial),int(steps)));\n}\n\nfloat fibonacci(float nthNumber_) {\n        int nthNumber = int(nthNumber_);\n        int previouspreviousNumber, previousNumber = 0, currentNumber = 1;\n        for (int i = 1; i < nthNumber ; i++) {\n\n            previouspreviousNumber = previousNumber;\n\n            previousNumber = currentNumber;\n\n            currentNumber = previouspreviousNumber + previousNumber;\n\n        }\n        return float(currentNumber);\n}\n\nfloat mod1(float a,float b){\n\n    //a += collatz(a/8./2.,b)*4.;\n    //a += mod(a/8.,2.) - mod(a/8.,3.);\n    \n    return \n        mod(a,b)\n        //mod(a+floor(a/4.),b)\n        //mod(a-mod(a,5.)+mod(a,4.),b)\n        //mod(a+mod(a+mod(-a,3.),5.)+mod(a+mod(-a,5.),3.),b)\n        //mod(a+floor(floor(a/8.)/3.)-floor(floor(a/8.)/2.),b)\n        //mod(a+3.*floor(floor(a)/3.),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    \n    //a *= (mod(a/8.,3.)-mod(a/8.,2.));\n\n    \n    //a += (mod(a/8.,3.)-mod(a/8.,2.));\n    \n    //a += floor(16.*fractal(vec2(floor(a),floor(a/2.))).y);\n    \n    float\n    t1 = mod1(floor(b/2.),2.),\n    a1 =\n        floor(a/4.+floor(a/4./4.)+t1),\n    a2 = mod1(a1,3.),\n    a3 =\n        //mod(a1,4.+a2)\n        //mod1(a1+a1*sign(1.-t1),4.)\n        mod1(a1,4.)\n    ;\n    \n    return\n        //abs(mod(a1-mod(a1,3.+t1)-mod(a1,4.+t1),b+t1)-t1)\n        //mod(a1-mod(a1,3.+t1)-mod(a1,4.+t1),b)\n        //mod1(a1*sign(1.-t1)-a2-a3,b)\n        //floor(mod(a,b)-mod(a/2.,b)+1.)\n        mod1(a1-a2-a3,b)\n    ;\n}\n\nfloat prime_rhythm(float time){\n    \n    //time += mod(time,5.)-mod(time,3.);\n    //time += mod(time/8.,2.) - mod(time/8.,3.);\n    //time += collatz(time/4.,8.)*2.;\n    \n    return (1.+fmod(time/4.,2.))/(1.+fmod(time/2.,2.));\n}\n\nfloat fmod1(float a, float b){\n    //a += collatz(a,mod(a,b))*2.;\n    \n    //a += collatz(mod(floor(a),4.)+floor(a/8.),4.);\n    \n    //a += ((mod(a/2.,3.)-mod(a/2.,5.)));\n    \n    //a += fibonacci(mod(floor(a),64.));\n    //a -= floor((a)/8./8./2.);\n    //a += prime_rhythm(a);\n    return fmod(a+4.,b);\n}\n\n\n//oud\n//#define fract1(a) (1.-pow(fract(-a),1./(2.-fract(-a))))\n\n//gamelan\n#define fract1(a) (1.-pow(fract(-a),2.))\n\n//#define fract1(a) fract(a)*fract(a)\n\n//#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n//#define fract1(a) pow(fract(a),1.+atan(2.)-atan(1.+fract(a)))\n\n//#define fract1(a) log(1.+fract(a)*fract(a))/log(2.)\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\nvec2 banjo(vec2 a, vec2 nb){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./6.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,6./4.));\n}\n\nvec2 harp(vec2 a, vec2 nb){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,2.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.));\n}\n\nvec2 synth_drum(vec2 a, vec2 nb,float m2){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./m2)\n  + synth(1./8.,a,1./4.,1.,nb*2.,m2/4.));\n}\n\nvec2 oud(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 steel_drum(vec2 a, vec2 nb){\nreturn a/16./4.*abs(synth(1./2.,a,1./8.,1.,nb*4.,1.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.))\n;\n}\n\nvec2 gamelan(vec2 a, vec2 nb){\nreturn\na/16./4.*abs(synth(1./4.,a,1./8.,1.,nb*2.,1./2.)\n  +.5*synth(1./4.,a,1./4.,1.,nb*2.,1./2.)) \n;\n}\n\nvec2 mainSound1(int samp, float time,float scale,float duration){\n  //time += collatz(time,mod(time,8.));\n  \n  //time += mod(time/8.,2.) - mod(time/8.,3.);\n  \n  //time += prime_rhythm(time*8.);\n  float s1 =\n      8.,\n  tempo1 =\n      prime_rhythm(time/16.)*2./prime_rhythm(time/4./16.)*2.\n  ,\n  t = s1*time/4./tempo1,\n  t4 = t/prime_rhythm(time/32.+11.),\n  t1 =\n       fmod(t4,2.)\n       //fmod(t4+fmod(t4/2.,2.),2.)\n  ,\n\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 =\n      (1.+fmod(t5,2.))\n      //(1.+fmod(t5+fmod(t5/2.,2.),2.))\n  ,\n\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod1(t6,s1/2.)/2.),\n  m2 =\n      1. + fmod1(t/t3/2.+mod(floor(time/4.),2.),s1/2.);\n      //1. + fmod1(t/t3/2.+fmod1(time,8.),s1/2.)\n  ;\n  vec2 a=\n      //vec2(log(fract(t/2./prime_rhythm(time+14.))/8.)*log(fract(t/prime_rhythm(time+7.))/8.))\n      //vec2((1.-log(fract(t/2./prime_rhythm(time+14.))/2.))*(1.-log(fract(t/prime_rhythm(time+7.))/4.)))\n      -vec2((log(1./64.+fract1(t/2./prime_rhythm(time+14.))/2./duration)),(log(1./64.+fract1(t/prime_rhythm(time+7.))/4./duration)))\n  ,\n  nb =\n      t*vec2(pow(2.,(m3+m2-t1*4.)/7.+scale),pow(2.,(m3+m2-t1*4.)/7.+scale))*tempo1\n      //vec2(t*pow(2.,(m3+m2-t1*4.*sign(1.-t3))/7.+6.)*tempo1)\n  ;\n  return\n      //log(abs(.5-vec2(fract1(nb.x+.5),fract1(nb.y)))*a)\n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb.x+.5),fract(nb.y)))*a))\n      //abs(log(a*abs(1./4.-abs(.5-vec2(fract1(nb.x+.5),fract1(nb.y*2.))))))\n      \n      //sitar\n      //a/16./2.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      //+.5*log(1./4.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*.998/2.),fract1(nb.y/2.)))/2.)))   \n      \n      //banjo\n      //banjo(a,nb)\n      \n      //synth drum\n      //a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))*2.))\n      //+ log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))\n\n      //oud\n      oud(a,nb)\n\n      //harp\n      //a/16./4.*abs(\n      //synth(1./4.,a,1./8.,1.,nb*4.,2.)\n      //+ synth(1./8.,a,1./4.,1.,nb*2.,1./2.))\n  ;\n}\n\nvec2 mainSound1(int samp, float time,float scale){\n    return mainSound1(samp,time,scale,1.);\n}\n\nvec2 mainSound(int a,float b){\n    //b += mod(-b,3.)+mod(b,5.);\n    return\n        //sounds like sitar (using oud)\n        //abs(mainSound1(a,b,6.5,1./2.)-mainSound1(a,b,7.5)/2.)\n        \n        //abs(mainSound1(a,b,6.5,1.))\n        \n        abs(mainSound1(a,b*2.,3.25,1./2.)/2.+mainSound1(a,b*2.,5.25,1.)+mainSound1(a,b*2.,7.25,1./2.)/2.)/2.\n        \n        //sqrt(mainSound1(a,b*2.,5.25,1.)*mainSound1(a,b*2.,6.25,1.))\n        \n        //abs(mainSound1(a,b,7.,2.)/4.+mainSound1(a,b,6.,1./2.))\n\n        //abs(mainSound1(a,b*2.,7.)-mainSound1(a,b,6.))\n        //abs(mainSound1(a,b,6.)-mainSound1(a,b,7.)/4.)\n        //(mainSound1(a,b,6.)+mainSound1(a,b/2.,5.))/2.\n    ;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}