{
    "Shader": {
        "info": {
            "date": "1640451849",
            "description": "Create a base image consisting of concentric rectangles, then apply a twisting effect to it.",
            "flags": 32,
            "hasliked": 0,
            "id": "ftGXDz",
            "likes": 0,
            "name": "Twisting concentric rectangles",
            "published": 3,
            "tags": [
                "polar",
                "twist"
            ],
            "usePreview": 0,
            "username": "akb74",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "// Here's where we try and apply interesting effect(s)/math/art to the base image\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    // Normalized pixel coordinates (from 0 to 1)\n\tvec2 normalized = fragCoord.xy / iResolution.xy;\n    \n    vec2 fromCenter = normalized - vec2(0.5, 0.5);\n\n    // Convert to polar coordinates\n    float distance = sqrt((fromCenter.x * fromCenter.x) + (fromCenter.y * fromCenter.y));\n    float angle = atan(fromCenter.x, fromCenter.y);\n\n    // Mess with the angle\n    angle = angle + (sin(iTime * 0.5) * distance * 2.0);\n\n    // Convert back to cartesian coordinates\n    fromCenter = vec2(distance * cos(angle), distance * sin(angle));\n    vec2 uv = fromCenter + vec2(0.5, 0.5);\n\n    // Display the (distorted) base image\n    vec4 col = texture(iChannel0, uv);\n    fragColor = vec4(col.rgb, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// An attempt to copy u/camilleroux's base image, but making a complete mess of shapes and colors\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 normalized = fragCoord / iResolution.xy;\n\n    vec2 fromCenter = normalized - vec2(0.5, 0.5);\n    float rectRadius = max(abs(fromCenter.x), abs(fromCenter.y));\n    int band = int(ceil(16.0 * rectRadius));\n    \n    const float brightness = 0.7;\n    vec3 col;\n    \n    switch(band) {\n    case 4:\n    case 8:\n        col = brightness * vec3(1.0, 1.0, 1.0);\n        break;\n    case 3:\n    case 7:\n        col = brightness * vec3(0, 1.0, 1.0);\n        break;\n    case 2:\n    case 6:\n        col = brightness * vec3(1.0, 0.0, 0.0);\n        break;\n    case 1:\n    case 5:\n        col = brightness * vec3(1.0, 0.5, 0);\n        break;\n    default:\n        col = vec3(0.80, 0.80, 0.80);\n    }\n\n    // Output to screen\n    fragColor = vec4(col ,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}