{
    "Shader": {
        "info": {
            "date": "1693664287",
            "description": "Trying to replicate the ffmpeg test video. Generate it with:\nffmpeg -f lavfi -i testsrc2=size=1280x720:rate=60 -f lavfi -i aevalsrc=\"sin(0*2*PI*t)\" output.webm",
            "flags": 0,
            "hasliked": 0,
            "id": "clBfzR",
            "likes": 1,
            "name": "ffmpeg",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "silentsiege",
            "viewed": 56
        },
        "renderpass": [
            {
                "code": "const vec3 GREY = vec3(.5);\nconst vec3 PURPLE = vec3(138.,26.,253.)/255.;\nconst vec3 RED = vec3(254.,24.,0.)/255.;\nconst vec3 GREEN = vec3(1.,232.,0.)/255.;\nconst vec3 YELLOW = vec3(255.,240.,0.)/255.;\nconst vec3 BLUE = vec3(0.,15., 255.)/255.;\nconst vec3 MAGENTA = vec3(254.,39.,255.)/255.;\nconst vec3 CYAN = vec3(1.,231.,255.)/255.;\n\nconst float pi = acos(-1.);\n\nfloat thetaX(float x)\n{\n    \n    float aa = 1. / iResolution.x;\n    return smoothstep(-aa, aa, x);\n}\n\nfloat thetaY(float y)\n{\n    \n    float aa = 1. / iResolution.y;\n    return smoothstep(-aa, aa, y);\n}\n\nfloat clock(float angle, vec2 uv1)\n{\n    if (max(abs(uv1.x), abs(uv1.y)) > 10.25) return 0.;\n    \n    vec2 hand = vec2(cos(angle), sin(angle));\n    hand *= 1. / max(abs(hand.x), abs(hand.y)) * .25 / 21.;\n    float alpha = 0.;\n    for (float i = 1.5; i < 21.; i += 2.)\n    {\n        vec2 d = uv1 - hand*i;\n        alpha += thetaY(1./180. - abs(d.x)) * thetaY(1./180. - abs(d.y));\n    }\n\n    return alpha;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 color;\n    float time = iTime;\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    {\n        vec3 bg = RED;\n        if (uv.x >= 1./6.) bg = GREEN;\n        if (uv.x >= 2./6.) bg = YELLOW;\n        if (uv.x >= 3./6.) bg = BLUE;\n        if (uv.x >= 4./6.) bg = MAGENTA;\n        if (uv.x >= 5./6.) bg = CYAN;\n\n        color = bg;\n    }\n    \n    {\n        float rpos = fract(uv.x + time/12.);\n        float alpha = fract(6.*rpos);\n\n        vec3 rainbow = mix(RED, YELLOW, alpha);\n        if (rpos >= 1./6.) rainbow = mix(YELLOW, GREEN, alpha);\n        if (rpos >= 2./6.) rainbow = mix(GREEN, CYAN, alpha);\n        if (rpos >= 3./6.) rainbow = mix(CYAN, BLUE, alpha);\n        if (rpos >= 4./6.) rainbow = mix(BLUE, MAGENTA, alpha);\n        if (rpos >= 5./6.) rainbow = mix(MAGENTA, RED, alpha);\n\n        float bar0 = abs(fract(.25*uv.x + time / 4.) - .5)*2.*44./45.;\n        float bar1 = bar0 + 1./45.;\n\n        color = mix(color, rainbow, thetaY(uv.y-bar0)*thetaY(bar1-uv.y));\n    }\n    \n    {\n        float loop = mod(trunc(time), 4.);\n        float pos = 1.-2.*abs(fract(time)-.5);\n        vec2 uv1 = (uv - vec2(.25))*vec2(aspect, 1.);\n        \n        float extent = mix(1./240., .25, pos);\n        vec2 w = vec2(extent, 1./90.);\n        if (loop == 1.) w = w.yx;\n        if (loop == 3.) w = w.xx;\n        float alpha = thetaY(w.x-abs(uv1.x)) * thetaY(w.y-abs(uv1.y));\n        if (loop == 2.) alpha = min(alpha + thetaY(w.x-abs(uv1.y)) * thetaY(w.y-abs(uv1.x)), 1.);\n        \n        color = mix(color, GREY, alpha);\n    }\n    \n    {\n        vec2 uv1 = (uv - vec2(.75))*vec2(aspect, 1.);\n        float angle = .75*pi - 2.*pi*fract(time/64.);\n        float alpha = clock(angle, uv1);\n        color = mix(color, vec3(189.,179.,63.)/255., alpha);\n        \n        \n        angle = .75*pi - 2.*pi*fract(time/16.);\n        alpha = clock(angle, uv1);\n        color = mix(color, vec3(195., 86., 195.)/255., alpha);\n        \n        angle = .75*pi - 2.*pi*fract(time/4.);\n        alpha = clock(angle, uv1);\n        color = mix(color, vec3(57.,177.,193.)/255., alpha);\n    }\n    \n    if (abs(uv.x-3./4.) < 1./8. && abs(uv.y-1./4.) < 1./8.)\n    {\n        vec2 uv1 = (uv - vec2(5./8., 3./8.))/vec2(1.,aspect)*4.*20.;\n        uv1.y *= -1.;\n        vec2 t = trunc(uv1);\n        if ((t.y+1.)*iResolution.x < 20.*iResolution.y && mod(t.x + t.y, 2.) == 0.)\n        {\n            // pcg3d, see https://www.shadertoy.com/view/XlGcRh\n            uvec3 v = floatBitsToUint(vec3(uv1, time));\n            v = v * 12829u + 47989u;\n\n            v.x += v.y*v.z;\n            v.y += v.z*v.x;\n            v.z += v.x*v.y;\n\n            v.x += v.y*v.z;\n            v.y += v.z*v.x;\n            v.z += v.x*v.y;\n\n            v >>= 16u;\n            color = mix(color, vec3(0., 220., 170.)/255., float(v.x) / float(0xffffu));\n        }\n    }\n    \n    {\n        vec2 v = 233./vec2(55., 89.);\n        \n        vec2 d = abs(mod(time/v, 2.) - 1.);\n        d.x = 1. - d.x;\n        \n        float alpha = thetaY(uv.y-mix(0., 1.-1./90., d.y)) * thetaY(mix(1./90., 1., d.y)-uv.y);\n        float tmp = 1./90. / aspect;\n        \n        alpha *= thetaX(uv.x-mix(0., 1.-tmp, d.x)) * thetaX(mix(tmp, 1., d.x)-uv.x);\n\n        color = mix(color, PURPLE, alpha);\n    }\n    \n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}