{
    "Shader": {
        "info": {
            "date": "1701583292",
            "description": "Playing around with some of the techniques discussed here: https://iquilezles.org/articles/ftrapsgeometric/",
            "flags": 0,
            "hasliked": 0,
            "id": "clcBD2",
            "likes": 8,
            "name": "julia-flame",
            "published": 3,
            "tags": [
                "fractal",
                "julia"
            ],
            "usePreview": 0,
            "username": "LydianLights",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "const float MAX_ITER = 80.0;\nconst float AA_STR = 1.0;\nconst float AA_MAX = 6.0;\n\nvec3 palette(in float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5) - 0.15;\n    vec3 b = vec3(0.5, 0.5, 0.5) + 0.15;\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.4, 0.6, 0.7);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nstruct Result {\n    float iterations;\n    float d;\n};\n\nResult map(in vec2 z, in vec2 c) {\n    Result r;\n    r.d = 9999.0;\n    \n    for (r.iterations = 0.0; r.iterations < MAX_ITER; r.iterations++) {\n        z = cplxSquare(z) + c;\n        \n        float t = 0.05 * iTime;\n        float d = 0.1 / (z.x * sin(t) + z.y * cos(t));\n        if (d < r.d) {\n            r.d = d;\n        }\n    }\n    return r;\n}\n\nvec3 mainPass(in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    uv *= 0.95;\n    \n    float t = 0.5 * iTime;\n    vec2 c = vec2(-0.8, 0.16);\n    c += 0.01 * vec2(cos(t), sin(t));\n    Result r = map(uv, c);\n    \n    vec3 color = palette(atan(r.d));\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = mainPass(fragCoord);\n    \n    // adaptive AA\n    float aaLevel = min(floor(AA_STR * dot2(fwidth(color))), AA_MAX);\n    for (float i = 1.0; i <= AA_MAX; i++) {\n        if (i > aaLevel) break;\n        color += mainPass(fragCoord + hash21(i) - 0.5);\n    }\n    color /= (aaLevel + 1.0);\n    color = gamma(color);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float dot2(vec2 v) { return dot(v, v); }\nfloat dot2(vec3 v) { return dot(v, v); }\n\nvec2 cplxSquare(vec2 c) {\n    return vec2(c.x * c.x - c.y * c.y, 2.0 * c.x * c.y);\n}\n\nvec3 gamma(in vec3 color) {\n    return pow(max(color, 0.0), vec3(1.0 / 2.2));\n}\n\nvec2 hash21(float p) {\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}