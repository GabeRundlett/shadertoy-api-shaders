{
    "Shader": {
        "info": {
            "date": "1510492545",
            "description": "Dynamic art",
            "flags": 0,
            "hasliked": 0,
            "id": "XtByDt",
            "likes": 8,
            "name": "Wave Room",
            "published": 3,
            "tags": [
                "waves"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 796
        },
        "renderpass": [
            {
                "code": "// \"Wave Room\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qnBlk[2], bSize, vnBall;\nfloat dstFar, tCur, tWav;\nint idObj;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;  q.y -= bSize.y - 0.15;\n  d = PrSphDf (q, 0.15);\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = p;\n  q.z = abs (q.z) - bSize.z;\n  d = max (PrBoxDf (q, vec3 (bSize.xy - 0.1, 0.03)), - PrBox2Df (q.xy, bSize.xy - 0.15));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  q = p;\n  q.x = abs (q.x) - bSize.x;\n  d = max (PrBoxDf (q, vec3 (0.03, bSize.yz - 0.1)), - PrBox2Df (q.zy, bSize.zy - 0.15));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 60; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec2 BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    qnBlk[0] = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    qnBlk[1] = - sign (rd) * step (tp, tp.zxy) * step (tp, tp.yzx);\n  }\n  return vec2 (dMin, df);\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec3 p, u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  rad = 0.2 * bSize.y;\n  p = vec3 (0., - bSize.y + 2. * rad, 0.);\n  u = ro - p;\n  b = dot (rd, u);\n  w = b * b - dot (u, u) + rad * rad;\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    if (d > 0. && d < dMin) {\n      dMin = d;\n      vnBall = (u + d * rd) / rad;\n    }\n  }\n  return dMin;\n}\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 t;\n  float wFreq, wAmp, ht;\n  wFreq = 1.;\n  wAmp = 1.;\n  ht = 0.;\n  for (int j = 0; j < 3; j ++) {\n    p *= qRot;\n    t = tWav * vec2 (1., -1.);\n    t4 = (p.xyxy + t.xxyy) * wFreq;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    ht += wAmp * dot (pow (1. - sqrt (v4.xz * v4.yw), vec2 (8.)), vec2 (1.));\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return ht;\n}\n\nvec3 WaveNf (vec2 p)\n{\n  vec3 vn;\n  vec2 e = vec2 (0.01, 0.);\n  p *= 0.4;\n  vn.xz = 0.2 * (WaveHt (p) - vec2 (WaveHt (p + e.xy), WaveHt (p + e.yx)));\n  vn.y = e.x;\n  return normalize (vn);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, vnb, col, ltDirB;\n  vec2 dBlock, q;\n  float dstObj, dstBall, spec, glit;\n  tWav = 0.1 * tCur + 10.;\n  ltDirB = ltDir;\n  dstBall = BallHit (ro, rd);\n  if (dstBall < dstFar) {\n    ro += dstBall * rd;\n    rd = reflect (rd, vnBall);\n    ltDirB = reflect (ltDirB, vnBall);\n    ro += 0.01 * rd;\n  }\n  dBlock = BlkHit (ro, rd, bSize);\n  dstObj = ObjRay (ro, rd);\n  glit = 0.;\n  spec = 0.1;\n  if (dstObj < dBlock.y) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    if (idObj == 1) col = vec3 (1., 1., 0.9) * (0.6 - 0.4 * dot (rd, vn));\n    else if (idObj == 2) col = vec3 (0.3, 0.2, 0.);\n  } else {\n    vnb = qnBlk[1];\n    ro += rd * dBlock.y;\n    if (vnb.y > 0.) {\n      vn = vnb;\n      col = mix (vec3 (0.8, 0.4, 0.2), vec3 (0.5, 0.25, 0.1),\n         Fbm2 (vec2 (50., 5.) * ro.xz)) *\n         (0.6 + 0.4 * smoothstep (0.03, 0.08, mod (10. * ro.x, 1.)));\n      col *= 0.6 + 0.4 * smoothstep (0.05, 0.15, length (ro.xz) / bSize.x);\n    } else if (vnb.y < 0.) {\n      col = vec3 (0.7, 0.7, 0.8) * (0.7 + 0.3 * smoothstep (0., 0.15, length (ro.xz) / bSize.x));\n      vn = VaryNf (50. * ro, vnb, 1.);\n    } else {\n      q = (abs (vnb.z) == 1.) ? ro.xy : ro.zy;\n      if (abs (q.x) > bSize.x - 0.15 || abs (q.y) > bSize.y - 0.15) {\n        col = vec3 (0.6, 0.6, 0.55);\n        vn = VaryNf (50. * ro, vnb, 1.);\n      } else {\n        col = vec3 (0.8, 0.6, 0.1);\n        glit = 1.;\n        if (abs (vnb.z) == 1.) {\n          vn = WaveNf (10. * q).xzy;\n          vn.z *= sign (vnb.z);\n        } else {\n          vn = WaveNf (10. * q).yxz;\n          vn.x *= sign (vnb.x);\n        }\n      }\n    }\n    if (glit > 0.) {\n      glit = 1000. * step (0.01, max (0., dot (vn, ltDirB))) *\n         pow (max (0., dot (ltDirB, reflect (rd, vn))), 16.) *\n         pow (1. - 0.6 * abs (dot (normalize (ltDirB - rd), VaryNf (1000. * ro, vn, 2.))), 8.);\n      col = glit * vec3 (1., 1., 0.5) + col * (0.2 + 0.8 * max (dot (vn, ltDirB), 0.));\n    } else {\n      col = col * (0.5 + 0.5 * max (dot (vn, ltDir), 0.)) +\n         spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n    }\n  }\n  return clamp (col, 0., 1.);  \n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 5.;\n  bSize = vec3 (2., 1., 2.);\n  ro = vec3 (0., 0., -0.9 * bSize.z);\n  rd = normalize (vec3 (uv, 3.));\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.7 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.25 * pi, 0.25 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * rd;\n  ro = vuMat * ro;\n  ltDir = normalize (vec3 (0., -0.5, -1.));\n  ltDir = vuMat * ltDir;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}