{
    "Shader": {
        "info": {
            "date": "1635196878",
            "description": "[url]https://inktober.com/[/url]\n#inktober2021 themes: [img]https://i.imgur.com/QjhAdpd.png[/img]\n",
            "flags": 32,
            "hasliked": 0,
            "id": "7sySDG",
            "likes": 21,
            "name": "Fab26 #inktober2021 \"connect\"",
            "published": 3,
            "tags": [
                "2d",
                "short",
                "inktober2021"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 312
        },
        "renderpass": [
            {
                "code": "#define S(v)     smoothstep( 15./R.y, 0., v )\n#define C(C)     S( length(F-C) -.1 )\n\nfloat L(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    return length(p - b * clamp(dot(p, b) / dot(b, b), 0., 1.) );                                  // dist to segment\n}\n\nvoid mainImage(out vec4 O, vec2 u ) \n{\n    vec2  R = iResolution.xy,\n          U = 10.* u / R.y, I,F,D;     \n    if ( mod(U.x,2.) >= 1. ) U.y += .5; \n    I = floor(U), F = fract(U);\n    D = I + d*floor(iTime);  \n\n    O =  ( C(vec2(0,.5)) + C(vec2(1,0)) + C(1.) )              // dots\n        * vec4(.8,.8,0,1);\n        \n    float v = sign(H(D).x-.5),                                 // current and previous step\n         _v = sign(H(D-d).x-.5);\n    v = mix( _v, v, min(1.,2.*fract(iTime)) );                 // transition\n    v = L( F, vec2(0,.5), vec2(1,.5+.5*v ));\n    O +=  (1.-O.a) *  S(v);                                    // draw connectors\n    if ( T(I)>0. ) O.r += (1.-O.a) * S(v/5.); // (.06/v-.2);   // red glow along flux\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 O, vec2 I ) \n{\n    if (I.x>18. || I.y > 11. ) return;\n    if ( iFrame==0 || fract(iTime)<.1 ) { O-=O; return; }\n    \n    I-=.5;\n    bool i = mod(I.x,2.)>0.;\n    vec2 D = I + d*floor(iTime);\n            \n    if ( I==vec2(0,5) ) O.z = 1.;                        // flux source\n    else { \n        O.z = T(I);                                      // previous state\n#define C(Y,i) if( H( D - vec2(1,Y) ).x < .5 == i ) O.z += T( I - vec2(1,Y) )\n        C( 0, i );                                       // test the 2 upstream connectors. \n        C( i?1:-1, !i );                                 // if connected, propagate flux.\n    }  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define H(p)   fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n#define T(I)   texelFetch(iChannel0, ivec2(I), 0).z\n\nvec2  d = 1./vec2(1024,2048); // random seed offset along time. pow2 for robustness",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}