{
    "Shader": {
        "info": {
            "date": "1688381540",
            "description": "Nice walk through a never ending simple tunnel that changes color with time.\nIntended to work as a wallpaper, so no excessive attention is drawn.\nThis is my first public creation, so all comments to help me optimize it are more than welcome. ",
            "flags": 0,
            "hasliked": 0,
            "id": "ds2cD3",
            "likes": 5,
            "name": "Advancing tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "calm",
                "wallpaper"
            ],
            "usePreview": 0,
            "username": "eudaimon",
            "viewed": 122
        },
        "renderpass": [
            {
                "code": "#define SPEED 1.\n#define DARKEN 2.5\n\nfloat grid (vec2 uv) {\n    //uv -= vec2(0,0.5);\n    float steepVP=iResolution.x / iResolution.y; // steepness of viewport diagonals\n    float uvSteep=abs(uv.x/uv.y);\n    float c;\n    float dist;\n    if (uvSteep > steepVP) { //vertical walls\n        \n        c=abs(uv.x)/steepVP / DARKEN;\n    }\n    else { // horizontal walls\n        c=abs(uv.y) / DARKEN;\n    }\n    dist=1./c+iTime*SPEED;\n    c*=step(0.8, fract(dist)); // percentage of the wall that stays black (to create the illusion of rings)\n    \n    //float dE=abs(uvSteep - steepVP ); //distance to edge\n    \n    return c;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates uv from (-1,-1) to (1,1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/ iResolution.y;\n    \n    //paint according to distance to center\n    //float d =  length(uv)/2.;\n    //vec3 col = vec3 (d, d, d);\n    \n    float col = grid(uv);\n    float r=col*(0.5 + sin(iTime)/2.);\n    float g=col*(0.5 + sin(iTime*2.)/2.);\n    float b=col*(0.5 + sin(iTime*1.5)/2.);\n    \n    // Output to screen\n    \n    \n    fragColor = vec4(r,g,b,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}