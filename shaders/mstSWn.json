{
    "Shader": {
        "info": {
            "date": "1679652922",
            "description": "c1:用shadertoy的语言写一个有raymarch的锤子模型\nc2:往前面的代码加上phong光照",
            "flags": 0,
            "hasliked": 0,
            "id": "mstSWn",
            "likes": 0,
            "name": "ChatGPT's \"Hammer\"",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "phong",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "sskmg",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "// Shadertoy link: https://www.shadertoy.com/view/3l3fDc\n\nvec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n\nfloat phong(vec3 pos, vec3 normal, vec3 viewDir, float shininess) {\n    vec3 lightReflect = reflect(lightDir, normal);\n    float specAngle = max(dot(lightReflect, viewDir), 0.0);\n    float specular = pow(specAngle, shininess);\n    float diffuse = max(dot(normal, lightDir), 0.0);\n    return diffuse + specular;\n}\n\nfloat sceneSDF(vec3 pos)\n{\n    float sphereSDF = length(pos - vec3(0.0, 0.0, 1.0)) - 0.5;\n    float boxSDF = max(abs(pos.x), max(abs(pos.y), abs(pos.z - 1.5))) - 0.5;\n    return max(sphereSDF, -boxSDF);\n}\n\nvec3 getNormal(vec3 pos)\n{\n    vec2 e = vec2(0.001, 0.0);\n    vec3 n = vec3(\n        sceneSDF(pos + e.xyy) - sceneSDF(pos - e.xyy),\n        sceneSDF(pos + e.yxy) - sceneSDF(pos - e.yxy),\n        sceneSDF(pos + e.yyx) - sceneSDF(pos - e.yyx)\n    );\n    return normalize(n);\n}\n\nvec3 raymarch(vec3 ro, vec3 rd)\n{\n    float maxDist = 50.0;\n    float minDist = 0.001;\n    float dist = 0.0;\n    vec3 pos = ro;\n    for(int i = 0; i < 100; i++)\n    {\n        dist = sceneSDF(pos);\n        if(dist < minDist)\n        {\n            vec3 normal = getNormal(pos);\n            vec3 viewDir = normalize(-pos);\n            float shininess = 32.0;\n            float phongValue = phong(pos, normal, viewDir, shininess);\n            return vec3(phongValue) * 0.8 + vec3(0.2, 0.3, 1.0) * 0.2;\n        }\n        if(dist > maxDist) break;\n        pos += rd * dist;\n    }\n    return vec3(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    vec3 ro = vec3(0.0, 0.0, -2.0);\n    vec3 rd = normalize(vec3(p, 1.0));\n    vec3 color = raymarch(ro, rd);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}