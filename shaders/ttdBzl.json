{
    "Shader": {
        "info": {
            "date": "1613310785",
            "description": "Terraced landscape with gliders and varying fog (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "ttdBzl",
            "likes": 14,
            "name": "Misty Terraces",
            "published": 3,
            "tags": [
                "terrain",
                "fog",
                "glider",
                "flight"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 364
        },
        "renderpass": [
            {
                "code": "// \"Misty Terraces\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat BumpFbm3 (vec3 p);\nfloat Hashfv3 (vec3 p);\nvec2 Noisev2v4 (vec4 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define AA  0   // (= 0/1) optional antialiasing\n\nmat3 flyerMat[3], flMat;\nvec3 flyerPos[3], qHit, flPos, trkA, trkF, sunDir, noiseDisp;\nfloat tCur, dstFar, grhtMax, fogAmp, fogTop;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GrndHtS (vec2 p)\n{\n  p = vec2 (p.x + p.y, p.x - p.y) / sqrt(2.);\n  return grhtMax * Fbm2 (0.1 * p);\n}\n\nfloat GrndHt (vec2 p)\n{\n  float h, hh, nf, nl;\n  p = vec2 (p.x + p.y, p.x - p.y) / sqrt(2.);\n  nf = 0.5;\n  p = (floor (nf * p) +  smoothstep (0.2, 1., mod (nf * p, 1.))) / nf;\n  hh = Fbm2 (0.1 * p);\n  nl = 32.;\n  h = grhtMax * (floor (nl * hh) + smoothstep (0.4, 0.6, mod (nl * hh, 1.))) / nl + 0.05 * hh;\n  return h;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.1, 0.5 * h);\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy), GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    h = p.y - GrndHt (p.xz);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, a, szFac;\n  szFac = 1.3;\n  a = 0.22 * pi;\n  dMin = dstFar / szFac;\n  for (int k = VAR_ZERO; k < 3; k ++) {\n    q = flyerMat[k] * (p - flyerPos[k]) / szFac;\n    q.x = abs (q.x);\n    q.z += 0.25;\n    qq = q;\n    qq.xy = Rot2D (vec2 (abs (qq.x), qq.y), - a);\n    d = abs (max (max (abs (Rot2D (vec2 (abs (Rot2D (vec2 (qq.x, qq.z - 1.1), -0.012 * pi).x), qq.y), a).y) -\n       0.002, 0.), max (dot (q.xz, sin (0.15 * pi + vec2 (0.5 * pi, 0.))) - 0.5, - q.z - 0.5))) - 0.002;\n    DMINQ (1 + k);\n  }\n  return szFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0005, -0.0005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  return mix (vec3 (0.3, 0.4, 0.8), vec3 (0.7, 0.7, 0.8), pow (1. - max (rd.y, 0.), 8.));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, p, clCol;\n  float fd, f, ff;\n  if (rd.y > 0.) {\n    p = 0.01 * (rd * (100. - ro.y) / max (rd.y, 0.0001) + ro + 4. * tCur);\n    ff = Fbm2 (p.xz);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (p.xz + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.8) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    fd = smoothstep (0.01, 0.1, rd.y);\n    col = mix (mix (vec3 (0.7, 0.7, 0.75), vec3 (0.5, 0.6, 0.9), 0.3 + 0.7 * fd),\n       clCol, 0.1 + 0.9 * f * fd) + 0.2 * vec3 (1., 1., 0.9) * pow (max (dot (rd, sunDir), 0.), 2048.);\n    col = mix (col, SkyBg (rd), pow (1. - max (rd.y, 0.), 8.));\n  } else col = SkyBg (rd);\n  return col;\n}\n\nfloat FogHt (vec2 p)\n{\n  mat2 qRot;\n  vec4 t4;\n  vec2 q, t, tw;\n  float a, h;\n  qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  q = p + vec2 (0., 0.05 * tCur);\n  a = 1.;\n  h = 0.;\n  tw = 0.05 * tCur * vec2 (1., -1.);\n  for (int j = 0; j < 5; j ++) {\n    q *= 2. * qRot;\n    t4 = abs (sin (2. * (q.xyxy + tw.xxyy) + 2. * Noisev2v4 (t4).xxyy - 1.));\n    t4 = (1. - t4) * (t4 + sqrt (1. - t4 * t4));\n    t = 1. - sqrt (t4.xz * t4.yw);\n    t *= t;\n    h += a * dot (t, t);\n    a *= 0.5;\n  }\n  return fogTop - 0.5 * h;\n}\n\nfloat FogDens (vec3 p)\n{\n  return fogAmp * (0.2 + 0.8 * smoothstep (0., 1., 1. - p.y / fogTop)) *\n     BumpFbm3 (0.03 * (p + noiseDisp)) * smoothstep (0., 1., FogHt (0.1 * p.xz) - p.y);\n}\n\nvec3 FogCol (vec3 col, vec3 ro, vec3 rd, float dHit)\n{  // updated from \"Sailing Home\"\n  float s, ds, f, fn;\n  s = 1.;\n  ds = 1.;\n  fn = FogDens (ro + s * rd);\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    s += ds;\n    f = fn;\n    fn = FogDens (ro + (s + 0.5 * ds * Hashfv3 (16. * rd)) * rd);\n    col = mix (col, vec3 (0.9, 0.9, 0.95) * (1. - clamp (f - fn, 0., 1.)),\n       min (f * (1. - smoothstep (0.3 * dHit, dHit, s)), 1.));\n    if (s > dHit) break;\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 roo, col, c, vn;\n  float dstGrnd, dstObj, sh, df;\n  noiseDisp = 0.02 * vec3 (-1., 0., 1.) * tCur + 0.5 * sin (vec3 (0.2, 0.1, 0.3) * pi * tCur);\n  fogAmp = 0.2 + 0.8 * SmoothBump (0.25, 0.75, 0.22, mod (0.03 * tCur, 1.));\n  fogTop = grhtMax + 3.;\n  roo = ro;\n  dstGrnd = GrndRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (min (dstObj, dstGrnd) < dstFar) {\n    if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      c = vec3 (0.3, 0.3, 1.);\n      col = (idObj == 1) ? c : ((idObj == 2) ? c.gbr : c.brg);\n      col = mix (col, 1. - col, smoothstep (0.02, 0.04, abs (length (vec2 (qHit.xz - vec2 (0.3, -0.1))) - 0.17)) *\n        (1. - smoothstep (0.95, 0.97, qHit.z)));\n      vn = ObjNf (ro);\n      sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n    } else if (dstGrnd < dstFar) {\n      ro += dstGrnd * rd;\n      df = dstGrnd / dstFar;\n      vn = GrndNf (ro);\n      vn = VaryNf ((1. + 4. * smoothstep (0.8, 0.9, vn.y)) * ro, vn, 1. - smoothstep (0.3, 0.7, df));\n      col = mix (vec3 (0.8, 0.7, 0.4) * (1. - 0.15 * (1. - smoothstep (0.3, 0.7, df)) *\n         smoothstep (0.4, 0.45, abs (mod (16. * ro.y, 1.) - 0.5))), vec3 (0.4, 1., 0.4), smoothstep (0.8, 0.9, vn.y));\n      col *= 0.4 + 0.6 * smoothstep (0.1, 0.9, ro.y / grhtMax);\n      col *= 1. - 0.3 * Fbm2 (128. * ro.xz);\n      sh = GrndSShadow (ro + 0.01 * vn, sunDir);\n    }\n    col *= 0.2 + 0.2 * max (dot (vn, normalize (vec3 (- sunDir.xz, 0.).xzy)), 0.) +\n       0.8 * sh * max (dot (vn, sunDir), 0.);\n    col = mix (col, SkyBg (rd), pow (df, 8.));\n  } else {\n    col = SkyCol (ro, rd);\n  }\n  col = FogCol (col, roo, rd, min (dstGrnd, dstObj));\n  return clamp (col, 0., 1.);\n}\n\nvec3 GlareCol (vec3 rd, vec3 sd, vec2 uv)\n{\n  vec3 col, e;\n  vec2 sa, hax;\n  e = vec3 (1., 0., -1.);\n  hax = vec2 (0.5 * sqrt (3.), 0.5);\n  uv *= 2.;\n  col = vec3 (0.);\n  if (sd.z > 0.) {\n    sa = uv + 0.3 * sd.xy;\n    col = 0.1 * pow (sd.z, 8.) * (1.5 * e.xyy * max (dot (normalize (rd + vec3 (0., 0.3, 0.)), sunDir), 0.) +\n       e.xxy * (1. - smoothstep (0.11, 0.12, max (abs (sa.y), max (abs (dot (sa, hax)), abs (dot (sa, hax * e.xz)))))) +\n       e.xyx * SmoothBump (0.32, 0.4, 0.04, length (uv - 0.7 * sd.xy)) +\n       0.8 * e.yxx * SmoothBump (0.72, 0.8, 0.04, length (uv + sd.xy)));\n  }\n  return col;\n}\n\nvec3 TrkPath (float t)\n{\n  return vec3 (dot (trkA, sin (trkF * t)), 0., t);\n}\n\nvec3 TrkVel (float t)\n{\n  return vec3 (dot (trkF * trkA, cos (trkF * t)), 0., 1.);\n}\n\nvec3 TrkAcc (float t)\n{\n  return vec3 (dot (trkF * trkF * trkA, - sin (trkF * t)), 0., 0.);\n}\n\nvoid FlyerPM (float t, int isOb)\n{\n  vec3 vel, va, flVd;\n  vec2 cs;\n  float oRl;\n  flPos = TrkPath (t);\n  vel = TrkVel (t);\n  va = cross (TrkAcc (t), vel) / length (vel);\n  flVd = normalize (vel);\n  oRl = ((isOb > 0) ? 5. : 10.) * length (va) * sign (va.y);\n  cs = sin (oRl + vec2 (0.5 * pi, 0.));\n  flMat = mat3 (cs.x, - cs.y, 0., cs.y, cs.x, 0., 0., 0., 1.) *\n     mat3 (flVd.z, 0., flVd.x, 0., 1., 0., - flVd.x, 0., flVd.z);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, flyVel, vDir, hSum, t, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.07 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  el = clamp (el, -0.3 * pi, 0.3 * pi);\n  grhtMax = 11.;\n  flyVel = 2.;\n  trkA = 0.2 * vec3 (1.9, 2.9, 4.3);\n  trkF = vec3 (0.23, 0.17, 0.13);\n  vDir = sign (0.5 * pi - abs (az));\n  for (int k = VAR_ZERO; k < 3; k ++) {\n    t = flyVel * tCur + vDir * (8. + 5. * float (k));\n    FlyerPM (t, 0);\n    flyerMat[k] = flMat;\n    flyerPos[k] = flPos;\n    flyerPos[k].x += 0.5 * sin (0.1 * pi * t);\n    hSum = 0.;\n    for (float j = float (VAR_ZERO); j < 7.; j ++) hSum += GrndHtS (TrkPath (t + vDir * (j - 1.)).xz);\n    flyerPos[k].y = grhtMax - 2. + hSum / 7.;\n  }\n  t = flyVel * tCur;\n  FlyerPM (t, 1);\n  ro = flPos;\n  hSum = 0.;\n  for (float j = float (VAR_ZERO); j < 7.; j ++) hSum += GrndHtS (TrkPath (t + 1.5 * vDir * (j - 1.)).xz);\n  ro.y = grhtMax + hSum / 7.;\n  vuMat = StdVuMat (el, az);\n  sunDir = normalize (vec3 (0., 1.3, -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.6 * pi * sin (0.02 * pi * tCur));\n  zmFac = 3.;\n  dstFar = 120.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    rd = (vuMat * rd) * flMat;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  col += GlareCol ((vuMat * normalize (vec3 (uv, zmFac))) * flMat, (flMat * sunDir) * vuMat, uv);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat PerBumpf (float p)\n{\n  return 0.5 * smoothstep (0., 0.5, abs (fract (p) - 0.5));\n}\n\nvec3 PerBumpv3 (vec3 p)\n{\n  return 0.5 * smoothstep (0., 0.5, abs (fract (p) - 0.5));\n}\n\nfloat BumpFbm3 (vec3 p)\n{  // from \"Energy Temple\"\n  vec3 q;\n  float a, f;\n  a = 1.;\n  f = 0.;\n  q = p;\n  for (int j = 0; j < 4; j ++) {\n    p += PerBumpv3 (q + PerBumpv3 (q).yzx);\n    p *= 1.5;\n    f += a * (PerBumpf (p.z + PerBumpf (p.x + PerBumpf (p.y))));\n    q = 2. * q + 0.5;\n    a *= 0.75;\n  }\n  return f;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + vec4 (0., 1., 57., 58.)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nvec2 Noisev2v4 (vec4 p)\n{\n  vec4 ip, fp, t1, t2;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t1 = Hashv4f (dot (ip.xy, vec2 (1., 57.)));\n  t2 = Hashv4f (dot (ip.zw, vec2 (1., 57.)));\n  return vec2 (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n               mix (mix (t2.x, t2.y, fp.z), mix (t2.z, t2.w, fp.z), fp.w));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}