{
    "Shader": {
        "info": {
            "date": "1586613863",
            "description": "Correctly ray marching a cat mesh, meow.",
            "flags": 32,
            "hasliked": 0,
            "id": "wdjyWh",
            "likes": 4,
            "name": "Meow Final",
            "published": 3,
            "tags": [
                "triangles",
                "marching",
                "graph",
                "mesh"
            ],
            "usePreview": 1,
            "username": "michael0884",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "//Graph is in Buf A, graph traversal is in Buf B\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n    fragColor = texel(ch1, pos);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define size iResolution.xy\n#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n#define N ivec2(6,108)\n#define sN ivec2(32,3)\n#define dt 0.\n\n#define maxN 2048\n\n#define loop(x) for(int i = min(0, iFrame); i < x; i++)\n\nconst int tot_n = N.x*N.y;\n\nivec2 i2xy(ivec3 sid)\n{\n    return sN*ivec2(sid.x%N.x, sid.x/N.x) + sid.yz;\n}\n\nivec3 xy2i(ivec2 p)\n{\n    ivec2 pi = p/sN;\n    return ivec3(pi.x + pi.y*N.x, p.x%sN.x, p.y%sN.y);\n}\n\nfloat toF(vec4 A, int i)\n{\n    return (i<4)?mod(A[i], float(maxN)):(A[i%4]/float(maxN));\n}\n\nint toI(vec4 A, int i)\n{\n    return (i<4)?(int(A[i])%maxN):(int(A[i%4])/maxN);\n}\n\nfloat F(float d)\n{\n    return 1./(0.1*d*d+1.) - 1.*exp(-1.*d);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nconst int k = 1664525;  \n\nivec4 hash( ivec4 x )\n{\n    x = ((x>>8)^x.wxyz)*k;\n    x = ((x>>8)^x.wxyz)*k;\n    x = ((x>>8)^x.wxyz)*k;\n    x = ((x>>8)^x.wxyz)*k;\n    return ivec4(x);\n}\n\n#define link0 32\n\nconst float PHI = 0.5*(sqrt(5.) + 1.);\n\nvec2 inverseSF( vec3 p, float n ) \n{\n    float m = 1.0 - 1.0/n;\n    \n    float phi = min(atan(p.y, p.x), PI), cosTheta = p.z;\n    \n    float k  = max(2.0, floor( log(n * PI * sqrt(5.0) * (1.0 - cosTheta*cosTheta))/ log(PHI+1.0)));\n    float Fk = pow(PHI, k)/sqrt(5.0);\n    vec2  F  = vec2( round(Fk), round(Fk * PHI) ); // k, k+1\n\n    vec2 ka = 2.0*F/n;\n    vec2 kb = 2.0*PI*( fract((F+1.0)*PHI) - (PHI-1.0) );    \n    \n    mat2 iB = mat2( ka.y, -ka.x, \n                    kb.y, -kb.x ) / (ka.y*kb.x - ka.x*kb.y);\n    \n    vec2 c = floor( iB * vec2(phi, cosTheta - m));\n    float d = 8.0;\n    float j = 0.0;\n    for( int s=0; s<4; s++ ) \n    {\n        vec2 uv = vec2( float(s-2*(s/2)), float(s/2) );\n        \n        float i = round(dot(F, uv + c)); // all quantities are ingeters (can take a round() for extra safety)\n        \n        float phi = 2.0*PI*fract(i*PHI);\n        float cosTheta = m - 2.0*i/n;\n        float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n        \n        vec3 q = vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, cosTheta );\n        float squaredDistance = dot(q-p, q-p);\n        if (squaredDistance < d) \n        {\n            d = squaredDistance;\n            j = i;\n        }\n    }\n    return vec2( j, sqrt(d) );\n}\n\nvec4 iSF( vec3 p, float n ) \n{\n    float m = 1.0 - 1.0/n;\n    \n    float phi = min(atan(p.y, p.x), PI), cosTheta = p.z;\n    \n    float k  = max(2.0, floor( log(n * PI * sqrt(5.0) * (1.0 - cosTheta*cosTheta))/ log(PHI+1.0)));\n    float Fk = pow(PHI, k)/sqrt(5.0);\n    vec2  F  = vec2( round(Fk), round(Fk * PHI) ); // k, k+1\n\n    vec2 ka = 2.0*F/n;\n    vec2 kb = 2.0*PI*( fract((F+1.0)*PHI) - (PHI-1.0) );    \n    \n    mat2 iB = mat2( ka.y, -ka.x, \n                    kb.y, -kb.x ) / (ka.y*kb.x - ka.x*kb.y);\n    \n    vec2 c = floor( iB * vec2(phi, cosTheta - m));\n    float d = 8.0;\n    float j = 0.0;\n    vec4 o;\n    for( int s=0; s<4; s++ ) \n    {\n        vec2 uv = vec2( float(s-2*(s/2)), float(s/2) );\n        \n        o[s] = dot(F, uv + c); \n    }\n    return o;\n}\n\nvec3 fibonacci_sphere(int i, int n)\n{\n    vec2 pt = vec2(2.*PI*mod((float(i))/PHI, 1.), acos(1. - float(2*i+1)/float(n)));\n    return vec3(cos(pt.x)*sin(pt.y), sin(pt.x)*sin(pt.y), cos(pt.y)); \n}\n\n    \nstruct object\n{\n    int id;\n    vec3 X;\n    float bR;\n    vec3 a;\n    vec3 b;\n    vec3 c;\n};\n\nvec3 qtransform(vec4 q, vec3 v)\n{ \n\treturn v + 2.0*cross(cross(v, q.xyz) + q.w*v, q.xyz);\n} \n\n//intersection with the bisector plane\nfloat rayBisectDist(vec3 p, vec3 d, vec3 a, vec3 b)\n{\n    vec3 n = b - a;\n    float D = length(n);\n    float cosnd = dot(n, d)/D; //ray plane normal angle cosine\n    float l = D*.5 - dot(p - a, n)/D;\n    float t = l/cosnd; //ray parameter\n    return (cosnd>0.)?t:1e10;\n}\n\nfloat dirBisectDist(vec3 d, vec3 a, vec3 b, float G)\n{\n    float cosnd = dot(normalize(b - a), d); //ray plane normal angle cosine\n    return (cosnd>0.)?(distance(a,b)*.5)*max(1./cosnd - G, 1.):1e10;\n}\n\n//iq's triangle sdf \nfloat dot2( vec3 v ) { return dot(v,v); }\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 ac = a - c; vec3 pc = p - c;\n  vec3 nor = cross( ba, ac );\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat bisectDist(vec3 p, vec3 a, vec3 b)\n{\n    return distance(a,b)*0.5 - dot(p - a, normalize(b - a));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//triangle and triangle neighbor directional graph buffer \n\nvec3[] vertecies = vec3[](\nvec3(-995.8304  ,  75.5037  ,   -608.4150),\nvec3(-992.0101  ,  115.6586 ,    -568.2448),\nvec3(-948.9031  ,  122.7461 ,    -586.1746),\nvec3(-808.0504  ,  82.2768  ,   -504.0376),\nvec3(-829.8732  ,  90.4546  ,   -495.4801),\nvec3(-815.5106  ,  55.3138  ,   -483.6030),\nvec3(-827.6768  ,  4.7252   ,   -550.7932),\nvec3(-926.4594  ,  -11.3236 ,    -509.0985),\nvec3(-924.9203  ,  4.9779   ,   -555.2147),\nvec3(-699.9360  ,  47.5303  ,   -579.6901),\nvec3(-725.3939  ,  13.6954  ,   -604.4670),\nvec3(-739.4488  ,  72.5684  ,   -610.5344),\nvec3(-1034.0753 ,  -11.3236 ,    -534.3847),\nvec3(-1060.0525 ,  17.3272  ,   -541.3537),\nvec3(-1038.5428 ,  29.1891  ,   -575.5334),\nvec3(-1000.9319 ,  78.8761  ,   -383.3885),\nvec3(-930.1043  ,  71.7035  ,   -351.5857),\nvec3(-920.2565  ,  109.7136 ,    -404.0531),\nvec3(-702.3473  ,  16.8526  ,    -571.5159),\nvec3(-728.9493  ,  -11.3236 ,    -558.9595),\nvec3(-724.4047  ,  -11.3236 ,    -589.9592),\nvec3(-717.2055  ,  41.9075  ,   -502.3305),\nvec3(-735.5786  ,  47.5303  ,   -491.1331),\nvec3(-733.9127  ,  18.3676  ,   -496.1548),\nvec3(-733.9399  ,  96.2936  ,   -552.8721),\nvec3(-694.6128  ,  66.2405  ,   -544.0293),\nvec3(-727.1962  ,  94.3858  ,   -574.8710),\nvec3(-925.7615  ,  126.6104 ,    -513.3122),\nvec3(-853.2005  ,  115.3310 ,    -545.4424),\nvec3(-894.0300  ,  131.5131 ,    -564.8028),\nvec3(-790.0053  ,  -4.9984  ,   -523.5698),\nvec3(-788.1220  ,  -4.3065  ,   -488.5588),\nvec3(-795.1429  ,  6.2171   ,   -449.4353),\nvec3(-840.2600  ,  20.1157  ,   -360.7992),\nvec3(-841.6091  ,  -1.1064  ,   -353.7490),\nvec3(-798.4716  ,  -11.3236 ,    -394.9299),\nvec3(-836.6793  ,  74.1277  ,   -450.3682),\nvec3(-832.0030  ,  64.3311  ,   -416.8673),\nvec3(-815.2516  ,  34.6305  ,   -481.9950),\nvec3(-832.3073  ,  9.2289   ,   -452.2656),\nvec3(-789.5191  ,  55.1783  ,   -621.8122),\nvec3(-795.7584  ,  20.4113  ,   -616.7018),\nvec3(-853.6783  ,  -11.3236 ,    -657.0101),\nvec3(-814.8730  ,  -5.0179  ,   -583.5240),\nvec3(-1012.5013 ,  -11.3236 ,    -419.7687),\nvec3(-990.1320  ,  -1.7048  ,   -373.5935),\nvec3(-1004.2960 ,  44.1512  ,   -365.5110),\nvec3(-855.9658  ,  10.3450  ,   -380.9660),\nvec3(-803.1211  ,  -11.3236 ,    -401.7929),\nvec3(-906.3935  ,  -0.5085  ,   -358.5250),\nvec3(-957.7062  ,  114.9286 ,    -436.9630),\nvec3(-977.6108  ,  130.2673 ,    -533.3871),\nvec3(-738.3090  ,  5.0845   ,   -507.1984),\nvec3(-709.8657  ,  -11.3236 ,    -526.8616),\nvec3(-710.5553  ,  1.5324   ,   -511.1166),\nvec3(-747.3311  ,  0.0296   ,   -472.9264),\nvec3(-749.3085  ,  11.8466  ,   -475.1376),\nvec3(-792.2325  ,  17.3739  ,   -396.8396),\nvec3(-878.4414  ,  35.7717  ,   -642.8316),\nvec3(-989.6032  ,  17.0865  ,   -621.6263),\nvec3(-944.0946  ,  58.0384  ,   -642.5948),\nvec3(-851.3480  ,  63.6161  ,   -648.0112),\nvec3(-785.4418  ,  72.5684  ,   -496.2609),\nvec3(-793.9230  ,  105.7400 ,    -489.6239),\nvec3(-805.3693  ,  49.2849  ,   -493.7585),\nvec3(-707.0358  ,  66.2405  ,   -513.1634),\nvec3(-781.2529  ,  20.6106  ,   -610.5267),\nvec3(-752.0867  ,  49.2849  ,   -626.1438),\nvec3(-764.1007  ,  4.7729   ,   -624.7463),\nvec3(-782.7896  ,  109.1638 ,    -561.5859),\nvec3(-755.0754  ,  109.5690 ,    -604.1262),\nvec3(-778.0606  ,  97.3133  ,   -596.8195),\nvec3(-1035.4617 ,  94.9357  ,   -465.6595),\nvec3(-962.6334  ,  117.6223 ,    -475.3002),\nvec3(-1042.7870 ,  48.9679  ,   -403.3333),\nvec3(-1073.9026 ,  52.3123  ,   -485.0486),\nvec3(-1056.9429 ,  9.7043   ,   -458.5848),\nvec3(-768.6208  ,  -8.2751  ,   -504.6131),\nvec3(-771.2246  ,  5.6477   ,   -497.4490),\nvec3(-706.1431  ,  -11.3236 ,    -536.1108),\nvec3(-695.7332  ,  1.5324   ,   -547.9435),\nvec3(-699.7588  ,  -1.4693  ,   -532.1415),\nvec3(-703.2778  ,  44.4115  ,   -511.2145),\nvec3(-690.5525  ,  44.4115  ,   -542.8315),\nvec3(-806.4027  ,  26.4766  ,   -417.1291),\nvec3(-779.1372  ,  17.1613  ,   -493.2779),\nvec3(-882.1035  ,  74.7240  ,   -366.3839),\nvec3(-821.3383  ,  74.7946  ,   -638.8068),\nvec3(-867.0529  ,  24.4554  ,   -668.6847),\nvec3(-784.6449  ,  106.3202 ,    -578.2576),\nvec3(-831.2065  ,  104.9587 ,    -620.3184),\nvec3(-783.5483  ,  7.4472   ,   -469.5750),\nvec3(-764.3502  ,  -11.3236 ,    -481.8925),\nvec3(-792.4278  ,  -8.2995  ,   -418.0562),\nvec3(-743.1558  ,  106.7015 ,    -584.4225),\nvec3(-685.2125  ,  17.4394  ,   -530.0173),\nvec3(-697.9792  ,  37.3655  ,   -539.4918),\nvec3(-690.5497  ,  17.4394  ,   -516.7567),\nvec3(-712.0912  ,  13.6706  ,   -585.8790),\nvec3(-996.4185  ,  -11.3236 ,    -539.4856),\nvec3(-1024.4155 ,  0.8627   ,   -577.6360),\nvec3(-798.4020  ,  1.7822   ,   -616.4513),\nvec3(-829.1520  ,  -11.3236 ,    -598.7313),\nvec3(-873.5256  ,  -0.4193  ,   -622.8918),\nvec3(-728.0101  ,  64.0319  ,   -495.0735),\nvec3(-744.3813  ,  95.5499  ,   -520.9390),\nvec3(-761.2942  ,  88.9008  ,   -508.1789),\nvec3(-781.7170  ,  26.8159  ,   -493.0542),\nvec3(-901.6669  ,  -11.3236 ,    -398.2102),\nvec3(-767.1221  ,  11.5533  ,   -493.6247),\nvec3(-751.5170  ,  13.1415  ,   -492.4418),\nvec3(-780.6548  ,  14.4846  ,   -472.4714),\nvec3(-1060.7682 ,  61.4407  ,   -446.4903),\nvec3(-1051.7577 ,  95.4428  ,   -514.2819),\nvec3(-1039.2488 ,  61.4143  ,   -568.5452),\nvec3(-854.7079  ,  94.0548  ,   -504.5181),\nvec3(-929.0150  ,  119.9958 ,    -442.1982),\nvec3(-864.1474  ,  97.4144  ,   -420.7776),\nvec3(-870.3384  ,  96.9634  ,   -459.3782),\nvec3(-780.8250  ,  4.2498   ,   -601.9772),\nvec3(-741.7265  ,  -11.3236 ,    -599.0881),\nvec3(-721.0571  ,  7.8997   ,   -601.0405),\nvec3(-703.8851  ,  -1.0353  ,   -617.8672),\nvec3(-942.1671  ,  7.3515   ,   -341.2048),\nvec3(-921.3945  ,  19.8009  ,   -333.6794),\nvec3(-943.1711  ,  -11.3236 ,    -350.5991),\nvec3(-838.6180  ,  27.0678  ,   -411.9889),\nvec3(-863.2388  ,  18.6852  ,   -406.0000),\nvec3(-814.4047  ,  16.0976  ,   -411.6389),\nvec3(-694.4426  ,  41.9075  ,   -558.8868),\nvec3(-710.5289  ,  22.1320  ,   -509.3748),\nvec3(-706.3202  ,  37.3655  ,   -518.7678),\nvec3(-696.0511  ,  42.0174  ,   -536.3110),\nvec3(-1036.4375 ,  -11.3236 ,    -459.7409),\nvec3(-770.0264  ,  106.7015 ,    -517.6603),\nvec3(-792.2722  ,  109.5690 ,    -511.7077),\nvec3(-779.3687  ,  119.6276 ,    -475.8542),\nvec3(-758.4063  ,  103.6384 ,    -502.1507),\nvec3(-784.4563  ,  107.8258 ,    -494.3299),\nvec3(-783.4283  ,  78.5575  ,   -513.7649),\nvec3(-883.1703  ,  -3.6364  ,   -655.2727),\nvec3(-730.2901  ,  88.9008  ,   -585.2112),\nvec3(-697.2075  ,  64.0319  ,   -571.6052),\nvec3(-750.1225  ,  78.5575  ,   -596.5160),\nvec3(-737.4004  ,  107.8258 ,    -611.2444),\nvec3(-724.0314  ,  103.6384 ,    -587.5582),\nvec3(-782.6500  ,  -11.3236 ,    -570.2200),\nvec3(-900.4669  ,  96.2424  ,   -633.2571),\nvec3(-897.0970  ,  120.3056 ,    -610.5399),\nvec3(-833.9095  ,  115.4948 ,    -598.8503),\nvec3(-853.0287  ,  122.5423 ,    -581.7062),\nvec3(-759.3208  ,  -11.3236 ,    -457.8283),\nvec3(-742.3607  ,  -11.3236 ,    -526.3356),\nvec3(-694.5074  ,  22.1320  ,   -549.1814),\nvec3(-839.2968  ,  22.8362  ,   -391.3108),\nvec3(-820.5211  ,  30.1974  ,   -389.5576),\nvec3(-829.5941  ,  38.5166  ,   -409.1643),\nvec3(-836.8793  ,  47.4207  ,   -386.5396),\nvec3(-869.9812  ,  46.1542  ,   -482.3823),\nvec3(-890.2067  ,  70.0660  ,   -483.5094),\nvec3(-909.9105  ,  98.4824  ,   -473.5333),\nvec3(-937.6815  ,  103.8339 ,    -483.5974),\nvec3(-804.8950  ,  95.6823  ,   -518.2141),\nvec3(-829.9017  ,  105.1277 ,    -539.1833),\nvec3(-733.7024  ,  -11.3236 ,    -611.5656),\nvec3(-738.7223  ,  10.7529  ,   -610.3510),\nvec3(-720.5469  ,  -9.4244  ,   -620.4963),\nvec3(-945.2722  ,  87.9113  ,   -629.4183),\nvec3(-995.0536  ,  46.6390  ,   -622.5880),\nvec3(-707.1171  ,  0.0891   ,   -521.4265),\nvec3(-701.2590  ,  1.7814   ,   -528.7713),\nvec3(-696.3574  ,  18.3020  ,   -516.0935),\nvec3(-705.5143  ,  32.6190  ,   -518.7469),\nvec3(-746.8992  ,  89.1834  ,   -623.5667),\nvec3(-774.1794  ,  85.3090  ,   -610.5543),\nvec3(-749.5588  ,  79.4633  ,   -607.6957),\nvec3(-735.9028  ,  86.8596  ,   -621.5189),\nvec3(-796.1419  ,  90.7038  ,   -608.0107),\nvec3(-1030.2487 ,  110.2389 ,    -493.4697),\nvec3(-984.0498  ,  122.4129 ,    -486.0958),\nvec3(-1026.7104 ,  102.5003 ,    -546.5026),\nvec3(-790.7665  ,  79.4633  ,   -505.3118),\nvec3(-790.4939  ,  86.8596  ,   -485.8827),\nvec3(-772.3555  ,  -4.7332  ,   -484.7859),\nvec3(-770.9318  ,  12.4502  ,   -486.0145),\nvec3(-896.9176  ,  -11.3236 ,    -454.9405),\nvec3(-770.0953  ,  -11.3236 ,    -537.9039),\nvec3(-692.3391  ,  11.6189  ,   -522.3785),\nvec3(-688.5785  ,  13.9763  ,   -545.0641),\nvec3(-874.0591  ,  -11.3236 ,    -597.7254),\nvec3(-950.8364  ,  118.9327 ,    -489.5284),\nvec3(-830.0552  ,  34.2774  ,   -389.5935),\nvec3(-711.2487  ,  -11.3236 ,    -613.0066),\nvec3(-704.1648  ,  -6.0835  ,   -597.8587),\nvec3(-806.8093  ,  28.4912  ,   -497.3588),\nvec3(-697.3834  ,  32.6190  ,   -538.9485),\nvec3(-1069.4880 ,  24.5603  ,   -494.2723),\nvec3(-973.8975  ,  -1.5557  ,   -607.4702),\nvec3(-997.2460  ,  -11.3236 ,    -558.3713),\nvec3(-688.9415  ,  18.3020  ,   -534.5188),\nvec3(-871.4866  ,  -11.3236 ,    -650.8430),\nvec3(-793.2932  ,  109.4704 ,    -565.8134),\nvec3(-800.0500  ,  103.8140 ,    -523.6841),\nvec3(-736.8707  ,  111.9007 ,    -616.0329),\nvec3(-729.2321  ,  106.4699 ,    -623.9708),\nvec3(-720.9323  ,  119.6276 ,    -621.0443),\nvec3(-800.4397  ,  14.8650  ,   -433.0968),\nvec3(-710.6121  ,  -11.3236 ,    -601.5969),\nvec3(-736.1279  ,  -4.1757  ,   -606.0648),\nvec3(-783.3688  ,  5.3768   ,   -498.0137),\nvec3(-703.4008  ,  13.9763  ,   -508.2369),\nvec3(-787.3816  ,  106.4699 ,    -479.4933),\nvec3(-869.6447  ,  -11.3236 ,    -352.0651),\nvec3(-849.2291  ,  -11.3236 ,    -613.3991),\nvec3(-715.2297  ,  1.1529   ,    -625.7358),\nvec3(-843.8202  ,  -11.3236 ,    -359.5085),\nvec3(-892.2355  ,  102.2551 ,    -392.7515),\nvec3(-748.9401  ,  -11.3236 ,    -575.4650),\nvec3(-778.8455  ,  -11.3236 ,    -431.0151),\nvec3(-922.5539  ,  -11.3236 ,    -344.4546));\n\n\nint triz = 459;\n\n    \nint[] triangles = int[](459, 460, 461,\n\n\n462, 463, 464, \n465, 466, 467, \n468, 469, 470, \n471, 472, 473, \n474, 475, 476, \n477, 478, 479, \n480, 481, 482, \n483, 484, 485, \n486, 487, 488, \n489, 490, 491, \n492, 493, 494, \n495, 496, 497, \n498, 466, 465, \n499, 500, 501, \n465, 467, 502, \n503, 504, 505, \n506, 507, 508, \n476, 509, 474, \n486, 488, 510, \n511, 512, 513, \n514, 515, 516, \n517, 518, 519, \n519, 520, 517, \n521, 522, 523, \n484, 483, 524, \n525, 526, 527, \n528, 529, 530, \n526, 525, 499, \n531, 474, 532, \n533, 534, 535, \n536, 537, 489, \n538, 539, 540, \n524, 541, 542, \n496, 543, 544, \n545, 475, 492, \n546, 547, 520, \n548, 530, 549, \n550, 551, 552, \n552, 491, 550, \n462, 523, 522, \n553, 528, 483, \n493, 492, 475, \n554, 555, 556, \n557, 469, 468, \n466, 558, 467, \n518, 559, 473, \n560, 561, 501, \n562, 518, 517, \n470, 469, 526, \n528, 553, 529, \n563, 564, 565, \n521, 566, 481, \n508, 567, 506, \n568, 481, 566, \n569, 570, 543, \n571, 572, 534, \n573, 472, 572, \n574, 487, 486, \n575, 576, 577, \n578, 527, 579, \n580, 557, 581, \n505, 582, 583, \n493, 583, 584, \n498, 585, 586, \n507, 506, 587, \n477, 468, 588, \n542, 484, 524, \n480, 482, 589, \n590, 556, 591, \n497, 496, 544, \n566, 521, 523, \n471, 592, 472, \n593, 594, 595, \n596, 597, 598, \n599, 562, 517, \n547, 499, 501, \n600, 601, 470, \n602, 603, 604, \n579, 605, 578, \n502, 578, 605, \n549, 606, 607, \n548, 608, 609, \n610, 611, 511, \n539, 538, 477, \n477, 588, 612, \n613, 614, 587, \n615, 587, 543, \n543, 496, 615, \n616, 615, 496, \n495, 617, 618, \n619, 620, 575, \n621, 622, 574, \n594, 593, 528, \n623, 624, 625, \n461, 626, 459, \n627, 519, 518, \n513, 628, 629, \n630, 631, 589, \n632, 633, 529, \n603, 634, 635, \n636, 546, 549, \n526, 499, 636, \n510, 637, 638, \n573, 639, 460, \n492, 616, 545, \n614, 516, 515, \n640, 641, 521, \n521, 563, 565, \n576, 575, 476, \n576, 545, 616, \n544, 537, 568, \n642, 643, 537, \n537, 643, 568, \n491, 490, 550, \n498, 586, 644, \n502, 605, 465, \n536, 489, 645, \n646, 513, 629, \n647, 646, 540, \n502, 467, 648, \n574, 649, 620, \n618, 617, 574, \n510, 488, 461, \n607, 609, 608, \n512, 511, 611, \n517, 547, 599, \n520, 547, 517, \n509, 532, 474, \n620, 532, 509, \n650, 613, 615, \n613, 586, 585, \n505, 583, 475, \n475, 583, 493, \n469, 625, 624, \n526, 469, 624, \n651, 581, 652, \n623, 625, 651, \n653, 497, 566, \n462, 464, 523, \n591, 556, 555, \n612, 588, 654, \n475, 474, 505, \n533, 474, 531, \n590, 591, 541, \n631, 480, 589, \n534, 572, 472, \n655, 535, 534, \n656, 467, 657, \n467, 656, 648, \n656, 657, 471, \n511, 513, 482, \n515, 569, 614, \n646, 647, 658, \n612, 654, 658, \n524, 564, 563, \n563, 541, 524, \n501, 599, 547, \n562, 599, 659, \n596, 595, 597, \n595, 594, 522, \n470, 526, 632, \n633, 632, 526, \n543, 570, 544, \n490, 544, 570, \n537, 536, 642, \n602, 600, 470, \n470, 635, 634, \n639, 637, 510, \n531, 572, 571, \n492, 614, 650, \n614, 613, 650, \n596, 565, 564, \n564, 528, 593, \n660, 609, 487, \n487, 661, 660, \n662, 663, 635, \n664, 529, 553, \n604, 600, 602, \n483, 485, 553, \n491, 498, 489, \n585, 498, 665, \n598, 565, 596, \n521, 565, 598, \n538, 540, 628, \n661, 622, 621, \n594, 621, 522, \n484, 542, 601, \n601, 485, 484, \n466, 498, 644, \n617, 464, 463, \n497, 617, 495, \n652, 479, 666, \n510, 638, 486, \n486, 649, 574, \n533, 505, 474, \n505, 533, 503, \n516, 494, 514, \n624, 667, 527, \n624, 527, 526, \n490, 668, 544, \n489, 668, 490, \n636, 549, 530, \n529, 633, 530, \n589, 482, 513, \n513, 646, 669, \n518, 562, 656, \n559, 518, 656, \n460, 459, 573, \n473, 627, 518, \n499, 525, 500, \n578, 502, 500, \n606, 549, 520, \n546, 520, 549, \n630, 669, 646, \n646, 554, 556, \n665, 587, 585, \n552, 587, 665, \n494, 516, 492, \n614, 492, 516, \n635, 663, 603, \n603, 664, 604, \n597, 670, 641, \n641, 640, 597, \n652, 581, 557, \n652, 557, 479, \n520, 519, 606, \n459, 626, 519, \n477, 612, 539, \n540, 539, 647, \n671, 508, 507, \n499, 547, 546, \n499, 546, 636, \n659, 672, 562, \n562, 648, 656, \n465, 489, 498, \n645, 489, 465, \n581, 673, 580, \n673, 581, 651, \n561, 502, 648, \n560, 502, 561, \n667, 624, 623, \n576, 496, 495, \n616, 496, 576, \n567, 644, 586, \n506, 567, 586, \n643, 570, 569, \n643, 642, 550, \n609, 607, 488, \n609, 488, 487, \n588, 601, 542, \n588, 542, 555, \n493, 674, 494, \n584, 674, 493, \n531, 532, 638, \n638, 649, 486, \n476, 675, 576, \n475, 675, 476, \n600, 485, 601, \n485, 600, 604, \n510, 460, 639, \n461, 460, 510, \n514, 511, 515, \n515, 511, 569, \n543, 614, 569, \n614, 543, 587, \n579, 676, 605, \n575, 509, 476, \n509, 575, 620, \n551, 677, 552, \n636, 633, 526, \n636, 530, 633, \n535, 503, 533, \n541, 563, 480, \n590, 541, 480, \n630, 556, 590, \n630, 646, 556, \n528, 660, 661, \n530, 548, 528, \n477, 538, 478, \n607, 608, 549, \n549, 608, 548, \n482, 481, 568, \n482, 568, 511, \n501, 500, 560, \n500, 502, 560, \n582, 505, 504, \n503, 584, 504, \n617, 497, 464, \n523, 464, 497, \n544, 668, 537, \n489, 537, 668, \n615, 585, 587, \n585, 615, 613, \n641, 522, 521, \n641, 670, 522, \n618, 619, 495, \n495, 577, 576, \n661, 621, 594, \n661, 594, 528, \n557, 477, 479, \n557, 468, 477, \n630, 589, 669, \n513, 669, 589, \n501, 659, 599, \n506, 586, 613, \n506, 613, 587, \n635, 470, 632, \n635, 632, 662, \n463, 462, 621, \n522, 621, 462, \n497, 653, 523, \n566, 523, 653, \n671, 678, 508, \n567, 508, 678, \n492, 650, 616, \n615, 616, 650, \n491, 552, 665, \n491, 665, 498, \n569, 511, 568, \n568, 643, 569, \n470, 601, 468, \n588, 468, 601, \n667, 623, 579, \n579, 527, 667, \n470, 634, 602, \n634, 603, 602, \n598, 597, 640, \n598, 640, 521, \n655, 472, 592, \n472, 655, 534, \n587, 552, 507, \n507, 552, 677, \n461, 607, 606, \n607, 461, 488, \n529, 662, 632, \n662, 529, 664, \n610, 514, 494, \n511, 514, 610, \n620, 618, 574, \n619, 618, 620, \n469, 673, 625, \n625, 673, 651, \n628, 512, 538, \n628, 513, 512, \n656, 471, 559, \n473, 559, 471, \n637, 639, 572, \n572, 639, 573, \n487, 574, 622, \n661, 487, 622, \n531, 571, 533, \n533, 571, 534, \n612, 647, 539, \n647, 612, 658, \n574, 463, 621, \n463, 574, 617, \n562, 672, 648, \n475, 545, 675, \n675, 545, 576, \n651, 652, 666, \n467, 558, 657, \n469, 580, 673, \n469, 557, 580, \n503, 535, 592, \n535, 655, 592, \n572, 531, 637, \n638, 637, 531, \n583, 582, 584, \n582, 504, 584, \n568, 566, 544, \n544, 566, 497, \n595, 596, 593, \n596, 564, 593, \n553, 604, 664, \n553, 485, 604, \n500, 525, 578, \n527, 578, 525, \n524, 483, 564, \n528, 564, 483, \n591, 542, 541, \n555, 542, 591, \n473, 573, 459, \n472, 573, 473, \n609, 660, 548, \n548, 660, 528, \n570, 550, 490, \n575, 577, 619, \n495, 619, 577, \n590, 631, 630, \n590, 480, 631, \n646, 629, 540, \n628, 540, 629, \n551, 550, 642, \n554, 646, 658, \n555, 554, 658, \n658, 654, 555, \n654, 588, 555, \n620, 649, 532, \n638, 532, 649, \n481, 563, 521, \n563, 481, 480, \n670, 597, 595, \n670, 595, 522, \n664, 603, 663, \n662, 664, 663, \n606, 626, 461, \n626, 606, 519, \n459, 627, 473, \n519, 627, 459, \n605, 645, 465);\n\nconst vec3 shift = vec3(-908.0101  ,  64.0319  ,   -495.0735);\nconst float scale = 150.;\n\nobject obj; vec3 vertex;\nvec4 lnk0, lnk1;  \nvec4 d0, d1;\n\nfloat sdObj(vec3 p, in object o)\n{\n    return udTriangle(p, o.a, o.b, o.c) - 0.002;\n}\n\nvec4 objNorm(vec3 p, float dx, in object o) {\n\tconst vec3 k = vec3(1,-1,0);\n\treturn   (k.xyyx*sdObj(p + k.xyy*dx, o) +\n\t\t\t k.yyxx*sdObj(p + k.yyx*dx, o) +\n\t\t\t k.yxyx*sdObj(p + k.yxy*dx, o) +\n\t\t\t k.xxxx*sdObj(p + k.xxx*dx, o))/vec4(4.*dx,4.*dx,4.*dx,4.);\n}\n\nvoid insertion_sort(float t, int id)\n{\n    if(d0.x > t)\n    {\n        d1 = vec4(d0.w, d1.xyz); d0 = vec4(t, d0.xyz);\n        lnk1 = vec4(lnk0.w, lnk1.xyz); lnk0 = vec4(id, lnk0.xyz);\n    } else if(d0.y > t)\n    {\n        d1 = vec4(d0.w, d1.xyz); d0.yzw = vec3(t, d0.yz); \n        lnk1 = vec4(lnk0.w, lnk1.xyz); lnk0.yzw = vec3(id, lnk0.yz);\n    } else if(d0.z > t)\n    {\n        d1 = vec4(d0.w, d1.xyz); d0.zw = vec2(t, d0.z); \n        lnk1 = vec4(lnk0.w, lnk1.xyz); lnk0.zw = vec2(id, lnk0.z);\n    }else if(d0.w > t)\n    {\n        d1 = vec4(d0.w, d1.xyz); d0.w = t; \n        lnk1 = vec4(lnk0.w,lnk1.xyz); lnk0.w = float(id); \n    }else if(d1.x > t)\n    {\n        d1 = vec4(t, d1.xyz);\n        lnk1 = vec4(id, lnk1.xyz);\n    }else if(d1.y > t)\n    {\n        d1.yzw = vec3(t, d1.yz);\n        lnk1.yzw = vec3(id, lnk1.yz);\n    }else if(d1.z > t)\n    {\n        d1.zw = vec2(t, d1.z);\n        lnk1.zw = vec2(id, lnk1.z);\n    }else if(d1.w > t)\n    {\n        d1.w = t;\n        lnk1.w = float(id);\n    }\n}\n\nfloat dangle;\n/*\n#define dpd 5\nconst float GA =2.46;\nconst mat2 rot = mat2(cos(GA),sin(GA),-sin(GA),cos(GA));\n\nivec2 idb[dpd];\nvec2 db[dpd];\n\n//sort 2 closest bisector planes in dpd directions\nvoid direction_sort(vec3 dir, in object o)\n{\n    vec3 pdir = normalize(cross(dir, vec3(0,0,1)));\n    vec3 tdir = normalize(cross(dir, pdir));\n    vec2 angle=vec2(0,1./sqrt(float(dpd)));\n    float rad=1.;\n\tfor (int j=0;j<dpd;j++)\n    {  \n        if(any(equal(ivec2(o.id),idb[j]))) continue;\n        rad += 1./rad;\n\t    angle*=rot;\n        vec3 cdir = normalize(dir + dangle*(angle.x*pdir + angle.y*tdir));\n        float t = dirBisectDist(cdir, obj.X, o.X);\n        if(t < db[j].x)\n        {\n            db[j] = vec2(t,db[j].x);\n            idb[j] = vec2(o.id,idb[j].x);\n        } \n        else if(t < db[j].y)\n        {\n            db[j].y = t;\n            idb[j].y = o.id;\n        }    \n    }\n}\n\nvoid insert()\n{\n    for (int j=0;j<dpd;j++)\n    {\n\t\t        \n    }\n}*/\n\nint ID; float avgR; float bd; vec3 dir;\n\nobject getObject(int id)\n{\n    object o;\n    if(id == maxN-1) id = 0;\n    \n    vec4 a = texel(ch0, i2xy(ivec3(id, 0, 0))); \n    o.X = a.xyz; o.bR = a.w;\n    o.a = texel(ch0, i2xy(ivec3(id, 1, 0))).xyz;\n    o.b = texel(ch0, i2xy(ivec3(id, 2, 0))).xyz;\n    o.c = texel(ch0, i2xy(ivec3(id, 3, 0))).xyz;\n    \n    o.id = id;\n    return o;\n}\n\nvec4 saveObject(int i)\n{\n    switch(i)\n    {\n    case 0:  \n        return vec4(obj.X, obj.bR);\n    case 1:\n        return vec4(obj.a, 0.);\n    case 2:\n        return vec4(obj.b, 0.);\n    case 3:\n        return vec4(obj.c, 0.);\n    }\n}\n\nvoid sort(int idtemp, int R, int T);\nvoid sortlinks(int id, int R, int R0, int T);\nvoid sortneighbors(int id, int R, int T);\nvoid sortrandom(int id, int R, int T);\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    ivec2 p = ivec2(floor(pos));\n    if(any(greaterThan(p, sN*N-1)) || iFrame>400) discard;\n   \n    ivec3 sid = xy2i(p); ID = sid.x;\n    vertex = texel(ch0, i2xy(ivec3(ID, 4, 0))).xyz;\n    obj = getObject(ID);\n   \tif(sid.z == 0) //object computation\n    {    \n        if(sid.y < 4) //object buffer\n        { \n            obj.X = (obj.a + obj.b + obj.c)/3.; \n            \n            //bounding sphere\n            obj.bR = max(distance(obj.X, obj.a),\n                     max(distance(obj.X, obj.b), \n                         distance(obj.X, obj.c)));\n            \n            if(iFrame<1 && ID < 418) //initial conditions\n            { \n                obj.a = vertecies[triangles[ID*3]-triz]/scale;\n                obj.b = vertecies[triangles[ID*3+1]-triz]/scale;\n                obj.c = vertecies[triangles[ID*3+2]-triz]/scale;\n\n                obj.a -= shift/scale;\n                obj.b -= shift/scale;\n                obj.c -= shift/scale;\n\n                obj.a = obj.a.xzy;\n                obj.b = obj.b.xzy;\n                obj.c = obj.c.xzy;\n            } \n            \n            U = saveObject(sid.y);\n        }\n        else if(sid.y == 4)//vertex buffer\n        {   \n            if(iFrame==2) //initial conditions\n            {\n                if(ID < 418)\n                {\n                    vertex = obj.X;  \n                }\n                else if(ID < 418 + 218)\n                {\n                    vertex = (vertecies[ID - 418] - shift)/scale;  \n            \t\tvertex = vertex.xzy;\n                }\n            }    \n            \n            U = vec4(vertex, 0);\n        }\n    }\n    else //graph computation\n    {\n        dangle = 0.5*distance(fibonacci_sphere(0, link0), fibonacci_sphere(1, link0)); \n        d0 = vec4(1e6); d1 = vec4(1e6);\n        lnk0 = vec4(maxN-1); lnk1 = vec4(maxN-1);\n        \n        dir = fibonacci_sphere(sid.y, link0);\n        vec4 nb = texel(ch0, i2xy(ivec3(ID, sid.y, 1)));\n        vec3 nbo = texel(ch0, i2xy(ivec3(toI(nb, 0), 4, 0))).xyz;\n        bd = dirBisectDist(dir, vertex, nbo, 0.);\n       \n        sortlinks(ID, sid.y, sid.y, sid.z);\n        \n        sortneighbors(ID, sid.y, sid.z);\n        \n        sortrandom(ID, sid.y, sid.z);\n        \n        U = lnk0 + lnk1*float(maxN);\n    }\n}\n\n\nbool iscoincidence(int id)\n{\n    return (id == maxN-1) || \n           any(equal(lnk0,vec4(id))) || \n           any(equal(lnk1,vec4(id)));\n}\n\nfloat bisectmarch(vec3 p, vec3 d, float D, in object o)\n{\n    p += d*D*0.005;\n    float DE = 1e10; float td = 0.;\n    for(int i = 0; i < 5; i++)\n    {\n        float sd = sdObj(p, o);\n        p += sd*d;\n        DE = min(sd, DE);\n        td+= sd;\n        if(td > D || sd < 0.001) break;\n    }\n    return DE;\n}\n\nvoid sort(int idtemp, int R, int T) //sort closest objects in N directions\n{\n    if(iscoincidence(idtemp)) return; //particle already sorted\n    float t = 1e10;\n    dir = fibonacci_sphere(R, link0);\n    switch(T)\n    {\n    case 1: //sort by bisector distance\n        if(idtemp == ID) return;\n        vec3 vpos = texel(ch0, i2xy(ivec3(idtemp, 4, 0))).xyz;\n      \n        vec2 pa = iMouse.xy/size;\n        t = dirBisectDist(dir, vertex, vpos, 0.5*dangle);\n        \n        if(t < 0.) return;\n        break;\n    case 2: //sort by sdf distance to this bisector line\n        object o = getObject(idtemp);\n       \n        bd = min(abs(bd), 3.);\n        float f = bd; float ii = 0.;\n        for(; f > 0.;) //find closest point on ray\n        {\n            float dd = 0.9*sdObj(vertex + f*dir, o) - 5.*f*dangle;\n            if(dd < 0.01) \n            {\n                t = bd - f + 0.1*dd;\n                break;\n            }\n            ii++;\n            f-=dd;\n        }\n        if(f <= 0. || ii > 5.) return;\n        break;\n    }\n    \n    insertion_sort(t, idtemp);\n}\n\nvoid sortlinks(int id, int R, int R0, int T)\n{\n    vec4 nb = texel(ch0, i2xy(ivec3(id, R, T)));\n    for(int i = min(0, iFrame); i<8; i++) \n        sort(toI(nb, i), R0, T);\n}\n\nvoid sortneighbors(int id, int R, int T)\n{\n    vec4 d4 = iSF(dir, float(link0));\n    for(int i = min(0, iFrame); i < 4; i++)\n    {\n         vec4 nb = texel(ch0, i2xy(ivec3(id, int(d4[i]), 1)));\n    \t for(int j = min(0, iFrame); j < 2; j++) \n         {\n            int nbid = toI(nb, j);\n            if(nbid == maxN-1) break;\n         \tsortlinks(nbid, (32*iFrame+8*j+i)%link0, R, T); \n         }\n    }  \n}\n\nvoid sortrandom(int id, int R, int T)\n{\n    for(int i = min(0, iFrame); i<5; i++) sort(int(float(tot_n)*hash13(vec3(iFrame, id, i))), R, T);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//prev closest triangle buffer\n//render\n\nfloat sdObj(vec3 p, in object o)\n{\n    float d = distance(p, o.X) - o.bR;\n    if(d > o.bR) return d;\n    return udTriangle(p, o.a, o.b, o.c) - 0.002;\n}\n\nobject getObject(int id)\n{\n    object o;\n    if(id == maxN-1) return o;\n    vec4 a = texel(ch0, i2xy(ivec3(id, 0, 0))); \n    o.X = a.xyz; o.bR = a.w;\n    o.a = texel(ch0, i2xy(ivec3(id, 1, 0))).xyz;\n    o.b = texel(ch0, i2xy(ivec3(id, 2, 0))).xyz;\n    o.c = texel(ch0, i2xy(ivec3(id, 3, 0))).xyz;\n    o.id = id;\n    return o;\n}\n\nfloat sdObjID(vec3 p, int id)\n{\n    vec4 X = texel(ch0, i2xy(ivec3(id, 0, 0)));\n    float d = distance(p, X.xyz) - X.w;\n    if(d > X.w || id > tot_n) return d;\n    return mix(udTriangle(p, texel(ch0, i2xy(ivec3(id, 1, 0))).xyz,\n                      \t texel(ch0, i2xy(ivec3(id, 2, 0))).xyz,\n                         texel(ch0, i2xy(ivec3(id, 3, 0))).xyz) - 0.002, d, clamp(d/X.w, 0., 1.));\n}\n\nstruct vtx\n{\n    vec3 X;\n    int id;\n};\n\nvtx getVertex(vec3 p, int i)\n{\n    vtx a;\n    a.X = p;\n    a.id = i;\n    return a;\n}\n\nvoid findClosest(vec3 p, inout vtx co, int mit)\n{    \n    float t = distance(p, co.X); \n    for(int s = min(0,iFrame); s < mit; s++)\n    {\n    \tint pid = co.id;\n        int dir = int(inverseSF(normalize(p - co.X), float(link0)).x);\n        vec4 nb = texel(ch0, i2xy(ivec3(co.id, dir%link0, 1)));\n        for(int i = min(0,iFrame); i<4; i++)\n        {\n            vec3 vpos = texel(ch0, i2xy(ivec3(toI(nb, i), 4, 0))).xyz;\n            float tt = distance(p, vpos);\n            if(tt < t)\n            {\n                t = tt;\n                co = getVertex(vpos, toI(nb, i));\n            }\n        }   \n        \n        if(pid == co.id) break;\n    }\n}\n\n#define maxd 20.\n#define mind 0.003\n#define maxs 64\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\nfloat map(vec3 p, vec3 d, inout vtx co)\n{\n    //find closest vertex\n    findClosest(p, co, 5);\n \t\n    float DE = distance(co.X, p) - 0.001;\n    float a = 1. + 0.15*clamp(dot(normalize(p - co.X), d), -1., 0.);\n    \n    //compute sdf in this direction to the vertex\n    int dir = int(inverseSF(normalize(p - co.X), float(link0)).x);\n    vec4 nb = texel(ch0, i2xy(ivec3(co.id, dir%link0, 2)));\n    for(int i = 0; i < 5; i++)\n    {\n        DE = min(DE, sdObjID( p, toI(nb, i)));\n    }\n    \n    return min(a*DE, p.z+0.5);\n}\n\nvec4 calcNormal(vec3 p, float dx, in vtx co) {\n\tconst vec3 k = vec3(1,-1,0);\n\treturn   (k.xyyx*map(p + k.xyy*dx, vec3(0,0,1), co) +\n\t\t\t k.yyxx*map(p + k.yyx*dx,vec3(0,0,1), co) +\n\t\t\t k.yxyx*map(p + k.yxy*dx,vec3(0,0,1), co) +\n\t\t\t k.xxxx*map(p + k.xxx*dx,vec3(0,0,1), co))/vec4(4.*dx,4.*dx,4.*dx,4.);\n}\n\nvec3 col(vec3 p, in vtx co)\n{\n    //voronoi neighbors projected on the sphere surface\n    float t = 1e10;\n    vec3 D = normalize(p - co.X);\n    int cid = co.id;\n    int dir = int(inverseSF(D, float(link0)).x);\n    vec4 nb = texel(ch0, i2xy(ivec3(co.id, dir%link0, 1)));\n    for(int i = min(0,iFrame); i<0; i++)\n    {\n        vec3 vpos = texel(ch0, i2xy(ivec3(toI(nb, i), 4, 0))).xyz;\n        float tt = dirBisectDist(D, co.X, vpos, 0.);\n        if(tt < t)\n        {\n            t = tt;\n            cid = toI(nb, i);\n        }\n    }   \n   \n    return 0.5 + 0.5 * sin(vec3(1,2,3)*float(cid));\n}\n\n\n//voronoi diagram ray marching\nvec4 rayMarch(vec3 p, vec3 d, inout vtx co)\n{    \n    float td = 0.; float DE = 1e10;\n    for(int i = min(0, iFrame); i < maxs; i++)\n    {\n        //march\n        DE = map(p, d, co);\n        \n        p += DE*d;\n        td += DE;\n        \n        //outide of the scene\n        if(td > maxd) return vec4(p, -1.);\n        //has hit the surface\n        if(DE < mind*td)\n        {\n            p += - mind*td*d;\n            break;\n        }\n    }\n    return vec4(p, DE);\n}\n\nfloat shadow_march(vec4 pos, vec4 dir, float distance2light, float light_angle, inout vtx co)\n{\n\tfloat light_visibility = 1.;\n\tfloat ph = 1e5;\n    float td = dir.w;\n\tpos.w = map(pos.xyz, dir.xyz, co);\n\tfor (int i = min(0, iFrame); i < 20; i++) \n    {\n\t\tdir.w += pos.w;\n\t\tpos.xyz += pos.w*dir.xyz;\n\t\tpos.w = map(pos.xyz, dir.xyz, co);\n\t\tfloat y = pos.w*pos.w/(2.0*ph);\n        float d = (pos.w+ph)*0.5;\n\t\tfloat angle = d/(max(0.00001,dir.w-y-td)*light_angle);\n        light_visibility = min(light_visibility, angle);\n\t\tph = pos.w;\n\t\tif(dir.w >= distance2light) break;\n\t\tif(dir.w > maxd || pos.w < mind*dir.w) return 0.;\n    }\n\treturn 0.5 - 0.5*cos(PI*light_visibility);\n}\n\n\n#define FOV 2.\nmat3 getRot(vec2 a)\n{\n    \n   mat3 theta_rot = mat3(1, 0, 0,\n                         0, cos(a.y), sin(a.y),\n                         0, -sin(a.y), cos(a.y)); \n        \n   mat3 phi_rot = mat3(cos(a.x), sin(a.x), 0,\n        \t\t       -sin(a.x), cos(a.x), 0,\n        \t\t        0, 0, 1); \n   return transpose(phi_rot*theta_rot);\n}\n\nvec3 getRay(vec2 angles, vec2 pos)\n{\n    mat3 camera = getRot(angles);\n    return normalize(transpose(camera)*vec3(FOV*pos.x, FOV*pos.y, 1.));\n}\n\n\n#define ldir vec3(cos(iTime*0.1)*sin(PI*0.4),sin(iTime*0.1)*sin(PI*0.4), cos(PI*0.4))\n\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 HDRmapping(vec3 color, float exposure)\n{\n\t// Exposure tone mapping\n    vec3 mapped = ACESFilm(color * exposure);\n    // Gamma correction \n    return pow(mapped, vec3(1.0 / 2.2));\n}\n\nconst float Br = 0.0025;\nconst float Bm = 0.0003;\nconst float g =  0.9800;\nconst vec3 nitrogen = vec3(0.650, 0.570, 0.475);\nconst vec3 Kr = Br / pow(nitrogen, vec3(4.0));\nconst vec3 Km = Bm / pow(nitrogen, vec3(0.84));\n\nvec3 sky_color(in vec3 pos)\n{\n\t// Atmosphere Scattering\n\tvec3 fsun = ldir.xzy;\n\tfloat brightnees = exp(-sqrt(pow(abs(min(5.*(pos.y-0.1),0.)),2.)+0.1));\n\tif(pos.y < 0.)\n\t{\n\t\tpos.y = 0.;\n\t\tpos.xyz = normalize(pos.xyz);\n\t}\n    float mu = dot(normalize(pos), normalize(fsun));\n\t\n\tvec3 extinction = mix(exp(-exp(-((pos.y + fsun.y * 4.0) * (exp(-pos.y * 16.0) + 0.1) / 80.0) / Br) * (exp(-pos.y * 16.0) + 0.1) * Kr / Br) * exp(-pos.y * exp(-pos.y * 8.0 ) * 4.0) * exp(-pos.y * 2.0) * 4.0, vec3(1.0 - exp(fsun.y)) * 0.2, -fsun.y * 0.2 + 0.5);\n\tvec3 sky_col = brightnees* 3.0 / (8.0 * 3.14) * (1.0 + mu * mu) * (Kr + Km * (1.0 - g * g) / (2.0 + g * g) / pow(1.0 + g * g - 2.0 * g * mu, 1.5)) / (Br + Bm) * extinction;\n\tsky_col = 0.4*clamp(sky_col,0.,10.);\n\treturn pow(sky_col,vec3(1./1.5)); \n}\n\nvec3 ambient_sky_color(in vec3 pos)\n{\n\tfloat y = pos.y;\n\tpos.xyz = normalize(vec3(1,0,0));\n\treturn sky_color(pos)*exp(-abs(y));\n}\n\nvec4 ambient_occlusion(in vec4 pos, in vec4 norm, in vec4 dir, in vtx co)\n{\t\n\tvec3 pos0 = pos.xyz;\n\tvec3 ambient_color = ambient_sky_color(norm.xyz);\n\tpos.xyz += 0.03*dir.w*norm.xyz;\n    pos.w = map(pos.xyz,  dir.xyz, co);\n\tpos.xyz += pos.w*norm.xyz;\n\tnorm.w = length(pos0 - pos.xyz);\n\tfloat occlusion_angle = clamp(pos.w/norm.w,0.,1.);\n\treturn vec4(ambient_color,1.)*(0.5-cos(3.14159265*occlusion_angle)*0.5);\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    vec2 uv = (pos - size*0.5)/size.y;\n    vec2 angles = (iMouse.z>0.)?(iMouse.xy/iResolution.xy)*vec2(2.*PI, PI):vec2(-0.3*iTime, PI*0.55);\n    \n    vec3 d = getRay(angles, uv);\n    vec3 p = 0.*texel(ch0, i2xy(ivec3(94, 4, 0))).xyz-2.*getRay(angles, vec2(0.));\n    vec4 prev = pixel(ch1, pos);\n    if(iFrame < 1) prev.w = 0.;\n    int cid = int(prev.w)%tot_n;\n    vtx co = getVertex(texel(ch0, i2xy(ivec3(cid, 4, 0))).xyz,cid);\n    findClosest(p, co, 16);\n    cid = co.id;\n    \n    vec4 rm = rayMarch(p, d, co);\n    float td = distance(rm.xyz, p);\n    if(rm.w >= 0.) //hit object\n    {\n        vec3 color = 0.75+0.5*col(rm.xyz, co);\n    \tvec3 n = normalize(calcNormal(rm.xyz, mind*td,co).xyz);\n        vec4 ao = ambient_occlusion(rm, vec4(n, rm.w), vec4(d, td), co);\n        float sh = shadow_march(vec4(rm.xyz+n*td*mind, rm.w), vec4(ldir,td), 10., 0.12, co);\n        U.xyz = color*(sh*sky_color(ldir.xzy)*max(dot(ldir, n),0.) + ao.xyz);\n    }\n    else //background\n    {\n        U.xyz = sky_color(d.xzy);\n    }\n    \n    U.xyz = HDRmapping(U.xyz, 0.5);\n    U.w = float(cid);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}