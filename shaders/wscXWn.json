{
    "Shader": {
        "info": {
            "date": "1571805247",
            "description": "Rolling through the hills",
            "flags": 0,
            "hasliked": 0,
            "id": "wscXWn",
            "likes": 11,
            "name": "Shadertober 20 - Tread",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "tread",
                "backwardscaptain"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 495
        },
        "renderpass": [
            {
                "code": "#define T iTime*2.\n\nvec2 map(vec3 p)\n{\n    float m = 0., r;\n    vec3 cp = p+vec3(0,cos(p.z/3.),-T);\n    vec3 scp = cp;\n    scp.xy*=rot(PI/2.);\n    scp.xz*=rot(iTime*1.5);\n\n    vec2 ap = vec2(atan(scp.y,scp.x),length(scp));\n    \n    vec3 tcp = scp;\n    float bx = box(tcp,vec3(1,.05,.05));\n    for(float i=0.;i<4.;i++){\n    \ttcp.xz*=rot(PI/4.*i);\n        bx=min(bx,box(tcp,vec3(1,.05,.05)));\n    }\n    \n\tfloat s = torus(scp,vec2(1,.2));\n    float ss = length(scp)-.1;\n    bx=max(bx,-ss);\n    float c = capsule(cp+vec3(0,1.,-.65),vec3(0),vec3(0,0,-100),.6);\n    float f = cp.y+1.;\n    float tr =max(f,-c);\n    f=smin(f,tr,1.);\n    r=min(s,f);\n    r=min(r,bx);\n    if(r==s)m=1.;\n    else if(r==bx)m=3.;\n    else if(r>=c)m=2.;\n    return vec2(r,m);\n}\n\nvec2 ray(vec3 ro, vec3 rd)\n{\n    float t=0., m=0.;\n    \n    for(int i=0;i<128;i++)\n    {\n        vec3 p = ro+rd*t;\n        vec2 s = map(p);\n        m=s.y;\n        if(abs(s.x)<0.0001)break;\n        t+=s.x/2.;\n        if(t>MAX_DIST){t=-1.;break;}\n    }\n    \n    return vec2(t,m);\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e=vec2(0.00005,0);\n    return normalize(vec3(\n        map(p+e.xyy).x-map(p-e.xyy).x,\n        map(p+e.yxy).x-map(p-e.yxy).x,\n        map(p+e.yyx).x-map(p-e.yyx).x\n        ));\n}\n\nvoid mainImage( out vec4 c, in vec2 f)\n{\n    vec2 uv = (2.*f-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(4,3,10.+T);\n    vec3 ta = vec3(2,0,T);\n    vec3 rd = cam(ro,ta,uv);\n    \n    vec2 r = ray(ro,rd);\n    vec2 suv = uv+vec2(-1.5,-.75);\n    float at = atan(suv.y,suv.x);\n    vec3 col = vec3(0.2,.9,2.5)*(rd.y+.3)+(1.+cos(at*10.+iTime))/40.;\n\n    if(r.x>0.)\n    {\n        vec3 mate = vec3(0.1,.2,.1);\n        if(r.y>.5&&r.y<1.5)mate=vec3(0.01);\n        else if(r.y==2.)mate=vec3(.3);\n        else if(r.y==3.)mate=vec3(.8);\n        vec3 p = ro+rd*r.x;\n        vec3 n = normal(p);\n        vec3 s = normalize(vec3(.5,.4,-.2));\n        float dif = clamp(dot(s,n),0.,1.);\n        float sky = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.,1.);\n        float bou = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.,1.);\n        float sha = step(ray(p+n*0.0001,s).x,0.);\n        col=mate*dif*sha;\n        col+=mate*vec3(0.3,.3,.5)*sky;\n        col+=mate*vec3(0.2,.2,.4)*bou;\n    }\n    col=pow(col,vec3(0.454545));\n\tc.rgb=col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_DIST 100.0\n#define PI 3.1415927\n\nmat2 rot(float x)\n{\n    float s = sin(x);\n    float c = cos(x);\n    return mat2(c,-s,s,c);\n}\n\n//thanks to iq for sharing this knowledge on his website\nfloat torus(vec3 p, vec2 t)\n{\n    vec2 b = vec2(length(p.xz)-t.x,p.y);\n    return length(b)-t.y;\n}\n\nfloat capsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return length(pa-ba*h)-r;\n}\n\nfloat box(vec3 p, vec3 d)\n{\n  vec3 q = abs(p) - d;\n  return min(max(q.x,max(q.y,q.z)),0.0)+length(max(q,0.0));\n}\n\nfloat smin(float d1, float d2, float k)\n{\n    float h = clamp(0.5+0.5*(d2-d1)/k,0.0,1.0);\n    return mix(d2,d1,h)-k*h*(1.0-h);\n}\n\nvec3 cam(vec3 ro, vec3 ta, vec2 uv)\n{\n    vec3 cf = normalize(ta-ro);\n    vec3 cu = normalize(cross(cf,vec3(0,1,0)));\n    vec3 cr = normalize(cross(cu,cf));\n    return normalize(uv.x*cu+uv.y*cr+2.*cf);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}