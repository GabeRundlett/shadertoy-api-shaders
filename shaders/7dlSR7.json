{
    "Shader": {
        "info": {
            "date": "1618427035",
            "description": "Ooh, natural soft shadows!",
            "flags": 32,
            "hasliked": 0,
            "id": "7dlSR7",
            "likes": 5,
            "name": "Progressive Lighting 2D",
            "published": 3,
            "tags": [
                "2d",
                "raymarching",
                "lighting",
                "progressive"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    fragColor.rgb /= (fragColor.w + 1.0) / 20.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct Shape {\n    float dist;\n    vec3 refl;\n    vec3 emit;\n};\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash31(in vec3 p) {\n\tp = fract(p * 0.1031);\n    p += dot(p, p.yzx + 33.33);\n    return fract((p.x + p.y) * p.z);\n}\n\nShape add(in Shape a, in Shape b) {\n    if (a.dist < b.dist) return a;\n    return b;\n}\n\nShape sub(in Shape a, in Shape b) {\n    if (a.dist > -b.dist) return a;\n    return Shape(-b.dist, b.refl, b.emit);\n}\n\nShape inter(in Shape a, in Shape b) {\n    if (a.dist > b.dist) return a;\n    return b;\n}\n\nShape map(in vec2 p) {\n    return add(Shape(length(p - vec2(-0.25)) - 0.25, vec3(0.0), vec3(0.0)),\n           add(Shape(length(p - vec2(0.25)) - 0.02, vec3(0.0), vec3(1.0)),\n           Shape(max(abs(p.x - 0.4) - 0.2, abs(p.y - 0.15) - 0.05), vec3(0.0), vec3(0.0))));\n}\n\nvec2 getNormal(in vec2 p) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec2(map(p + e.xy).dist - map(p - e.xy).dist,\n                          map(p + e.yx).dist - map(p - e.yx).dist));\n}\n\nvec3 trace(in vec2 ro, in vec2 rd) {\n    float t = 0.0;\n    for (int i=0; i < 100; i++) {\n        vec2 p = ro + rd * t;\n        Shape scene = map(p);\n        if (scene.dist < 0.001) {\n            return scene.emit;\n        }\n\n        if (t > 10.0) {\n            break;\n        }\n\n        t += scene.dist;\n    }\n\n    return vec3(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 rd = sin(Hash31(vec3(uv * 100.0, iFrame)) * 6.28 + vec2(1.57, 0.0));\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    fragColor += vec4(trace(uv, rd) + 0.01 * step(0.0, -map(uv).dist), 1.0);\n    if (iMouse.z > 0.0) fragColor = vec4(0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}