{
    "Shader": {
        "info": {
            "date": "1563258435",
            "description": "one wave for boom only begin time!",
            "flags": 0,
            "hasliked": 0,
            "id": "tlXSW7",
            "likes": 1,
            "name": "Boom Wave",
            "published": 3,
            "tags": [
                "wave"
            ],
            "usePreview": 0,
            "username": "owlwisp",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "//因为平台适配提出的接口\n\n//常量\n\n#define kUv  (fragCoord.xy / iResolution.xy)\n//控制波浪发起点的UV位置\n#define kPos  vec2(0.5, 0.5)\n\n//波浪的倾斜度\n#define kRate vec2(1., 1.)\n#define cTime iTime\n//波浪宽度\n#define kWaveWidth 0.2\n#define PI 3.1415\n#define kSpeed 1.\n#define KScreenRatio  iResolution.x /  iResolution.y\n#define kStrong 0.004\n#define kWaveLen 1.0\n#define kWaveStrong 0.04\n#define kMixLen 0.02\n\nvec2 getDv(vec2 uv, vec2 center){\n    vec2 dv = center - uv;\n\n    dv.x *= KScreenRatio;\n    dv.x /= kRate.x;\n    dv.y /=  kRate.y;\n\n    return dv ;\n}\n\nvec2 getUv(vec2 dv, vec2 center){\n    \n    dv.y *= kRate.y;\n    dv.x *= kRate.x ;\n    dv.x /= KScreenRatio ;\n    vec2 uv = center - dv;\n\n    return uv ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = kUv;  \n\tvec2 dv = getDv( uv , kPos);\n    float dis = length(dv);\n\n\tfloat time = dis - iTime *kSpeed ;\n    \n\tif (time >  -kWaveWidth && time < 0.  && dis < kWaveLen ){\n\n        float rate = ( abs (time) /  kWaveWidth );\n        float ta = rate *  PI;\n        \n       \tfloat len = sin(ta) * kWaveStrong  ;\n\t\t\n        //递减函数 将 波浪递减到0 , 这里可以考虑用2次函数做递减\n      \tlen *=  (kWaveLen - dis);\n\n\t\tvec2 wave = vec2(0.);\n\n    \t// 根据角度算出新的dv\n\t\tvec2 newDv = vec2(len + dv.x , len + dv.y);\n        \n        wave.x = (dv.x / dis) * (dis + len);\n        wave.y = (dv.y / dis) * (dis + len);\n        vec2 newUv = getUv( wave, kPos);\n\n        vec4 color = texture(iChannel0, newUv);\n\t\t\n        //当波浪最贴近正常uv点图像时做插值 or 混合\n        if(time > - kMixLen  || time <  kMixLen -kWaveWidth   ){\n            \n            vec4 color2 = texture(iChannel0, uv);\n           \tcolor =  mix(color ,color2, 0.75 );\n        }\n        \n        //按照波顶递减增加光强\n\n       vec3 light = color.rgb; \n        \n        //\n        float rateStrong = smoothstep(0.0, .5, (rate > 0.5 ? 1.0 - rate: rate));\n        color .rgb = color.rgb +  (kStrong + rateStrong * 0.2) * light;\n        fragColor = color;\n\n       \n    }else{\n         vec4 color = texture(iChannel0, uv);\n       \t fragColor = color;\n    } \n\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}