{
    "Shader": {
        "info": {
            "date": "1610374496",
            "description": "Silktato",
            "flags": 32,
            "hasliked": 0,
            "id": "ttKyRR",
            "likes": 21,
            "name": "Day 391",
            "published": 3,
            "tags": [
                "silk",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 691
        },
        "renderpass": [
            {
                "code": "\n// shadows and smoothops from iq\n\n// FXAA from mudlord?\n\n// cyclic noise from nimitz\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    col = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    \n    col = pow(col,vec3(1.05,1.,0.9 + dot(uv,uv)*0.05));\n    \n    \n    col = mix(col,smoothstep(0.,1.,col*vec3(1.4,0.9,1.)*1.1),0.25);\n    \n    col *= 1.3;\n    col = mix(acesFilm(col), col, 0.);\n    \n    \n    col = mix(col,col*col*0.4,dot(uv,uv));\n    //col *= 1. - dot(uv,uv*0.4)*2.;\n    \n    col = pow(col,vec3(0.454545));\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n// shadows and smoothops from iq\n\n// FXAA from mudlord?\n\n// cyclic noise from nimitz\n\nvoid mainImagea( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    col = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    \n    col = pow(col,vec3(1.05,1.,0.9 + dot(uv,uv)*0.05));\n    \n    \n    col = mix(col,smoothstep(0.,1.,col*vec3(1.4,0.9,1.)*1.1),0.25);\n    \n    col *= 1.3;\n    col = mix(col,smoothstep(0.,1.,col*1.1),0.35);\n    \n    col = mix(acesFilm(col), col, 0.2);\n    \n    \n    col = mix(col,col*col*0.4,dot(uv,uv));\n    //col *= 1. - dot(uv,uv*0.4)*2.;\n    \n    col = pow(col,vec3(0.454545));\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nvec2 dmin(vec2 d, float db, float dbid){return d.x < db ? d : vec2(db,dbid);}\nvec2 dmin(vec2 d, vec2 b){return d.x < b.x ? d : b;}\n\nfloat wallNoise = 0.;\nfloat wallNoiseB = 0.;\n\nfloat T = 0.;\nfloat tid = 0.;\n\n\n\nvec3 uvJello = vec3(0);\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\n\nvec2 sdSilk(vec3 p){\n    p.x += 0.;\n    \n    float wall = -p.z;\n\n    float n = cyclicNoise( p*vec3(0.6,1,1), iTime);\n    \n    \n    float d = 10e5;\n    if(iMouse.z > 0.){\n        p.xy -= gmuv.xy*5.; \n        d = length(p) - 1.6;\n    }\n    \n    \n    d = opSmoothUnion( d, wall, .9 );\n    \n    d -= n*1.6;\n\n    return vec2(d, ID_SILK);\n}\n\n\nvec2 map(vec3 p){\n    vec2 d = vec2(10e5);\n    //vec2 dwall = sdWall(p); \n    vec2 dsilk = sdSilk(p);\n\n    d = dmin(d, dsilk);\n    \n    return d;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t).x;\n        if( h<0.001 )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h*0.4;\n    }\n    return res;\n}\n\nvec3 getNormal(vec3 p, float precis){\n      vec3 n = vec3(0.0);\n    for( int i=0; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*precis).x;\n    }\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    T = iTime*.35 + texture(iChannel0,fragCoord.xy/8.).x/100.;\n   \n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 muv = (iMouse.xy)/iResolution.xy;\n    \n    gmuv = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    \n    \n    muv = muv*2. - 1.;\n    if (muv.x < -0.85){\n        muv -= muv;\n    }\n    \n    vec3 ro = vec3(0);\n    \n    ro.z -= 1.;    \n    ro *= 1.9;\n    \n    \n    vec3 lookAt = vec3(0);\n    \n    //lookAt.z += muv.x*0.3;\n    lookAt.y += muv.y;\n    \n    \n    vec3 rd = getRd(ro, lookAt, uv, 5.);\n    \n    ro -= rd*6.;\n    \n    vec3 col = vec3(0);\n    \n    \n    vec3 p = ro;\n    float t = 0.; bool hit = false;\n    vec2 d;\n    \n    vec3 atten = vec3(1.);\n    \n    \n    vec3 hitCol = vec3(0);\n    \n    int maxIters = 250;\n    \n    \n    vec3 reflalbedo = mix(ambientCol, lightCol,0.5);\n    for(int i = 0; i < maxIters; i++){\n\n        p = ro + rd*(t += d.x*stepSz);\n        d = map(p);\n\n        if(d.x < eps){\n            hit = true;\n            break;\n        }\n\n    }\n\n    \n    vec3 n = getNormal(p,eps*0.5);\n                    \n    {\n        #define AO(n,a) clamp(map(p + normalize(mix(n,lDir,0.6))*a).x/a, 0., 1.)\n        #define SSS(n,a) clamp( 1.*map(p + normalize(n)*a).x/a, 0., 1.)\n        \n        float aoo = AO(n,0.5);\n        float ao = aoo*AO(n,0.2)*AO(n,0.04)*AO(n,1.54)*1.;\n        \n        float SSS = SSS(vec3(-1.,.5,0.9),1.9)*1.*SSS(vec3(-4.,2.,0.2),5.)*1.;//*AO(lDir,0.5)*AO(-n,0.9);\n\n        vec3 halfV = normalize(lDir - rd);\n        float fres = pow(1.-max(dot(-rd, n),0.0001),3.);\n        float spec = pow(max(dot(n,halfV),0.),8.);\n        float diff = dot(n,lDir);\n                     \n        vec3 albedo = vec3(0.);\n        vec3 sssalbedo = vec3(0.);\n        \n        \n        float shad = softshadow( p, lDir, 0.01, 20., 2.);\n        \n        shad = min(shad,diff);\n        \n        vec3 colSilk = vec3(0);\n        {\n            map(p);\n            albedo = silkCol;\n            \n            albedo -= albedo;\n            \n            vec3 r = reflect(rd,n);\n            \n            float fact = pow(length(sin(n*2.)*0.5 + 0.5),4.)/sqrt(49.); \n            float factb = pow(length(sin(r*2. + n*2. + 4. + iTime*0.)*0.5 + 0.5),1.)/sqrt(3.); \n            float factc = pow(length(sin(r*5. + n*2. + 4. + iTime*0.)*0.5 + 0.5),1.)/sqrt(3.); \n            \n            factb = clamp(factb,0.,1.);\n            factc = clamp(factc,0.,1.);\n            albedo += mix( silkCol, vec3(0) + ambientCol*0.3 + silkCol*silkCol*silkCol*0.15,factb);;\n            albedo = mix( albedo, vec3(0) + ambientCol*0.1 + silkCol*silkCol*0.2,pow(factc,1.)*1.);;\n            \n            \n            \n            albedo += lightCol*8.*(1.-pow(factb,.03));\n            \n            //albedo = mix(lightCol*8.,albedo*0.,pow(factb,.03));;\n            \n            //albedo = mix(albedo,sssSilkCol,SSS);\n            \n            //colSilk = albedo;\n            colSilk = albedo*lightCol;\n\n            //colSilk = mix(colSilk, reflalbedo, clamp(fres + spec,0.,1.)*ao*0.3);\n            ao = max(ao,0.);\n            shad = max(shad,0.);\n            \n            \n            colSilk = mix((colSilk + colSilk*ambientCol)*0.5, colSilk, ao);\n            colSilk = mix((colSilk + colSilk*ambientCol)*0.5,colSilk, shad);\n            \n            \n        }\n        hitCol += colSilk*float(floor(d.y) == ID_SILK);\n\n        \n        \n        //hitCol = mix(hitCol, hitCol + hitCol*ambientCol, shad);\n    \n    }\n    \n    if(hit)\n        col += hitCol*atten;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nfloat FXAAamt = 1.;\n\n\n\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n    vec2 p = fragCoord.xy/iResolution.xy;\n    vec2 pp = 1. / iResolution.xy;\n    vec4 color = texture(iChannel0, vec2(fragCoord.xy * pp));\n    vec3 luma = vec3(.299, 0.587, 0.114);\n    \n    float lumaNW = dot(texture(iChannel0, (fragCoord.xy + vec2(-1.0, -1.0)*FXAAamt) * pp).xyz, luma);\n    float lumaNE = dot(texture(iChannel0, (fragCoord.xy + vec2(1.0, -1.0)*FXAAamt) * pp).xyz, luma);\n    float lumaSW = dot(texture(iChannel0, (fragCoord.xy + vec2(-1.0, 1.0)*FXAAamt) * pp).xyz, luma);\n    float lumaSE = dot(texture(iChannel0, (fragCoord.xy + vec2(1.0, 1.0)*FXAAamt) * pp).xyz, luma);\n    float lumaM  = dot(color.xyz,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n    vec2 dir = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)), ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\n\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * (1.0/8.0)), (1.0/128.0));\n\n    float rcpDirMin = 2.5 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(8.0, 8.0),\n              max(vec2(-8.0, -8.0),\n              dir * rcpDirMin)) * pp;\n\n    vec3 rgbA = 0.5 * (\n        texture(iChannel0, fragCoord.xy * pp + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture(iChannel0, fragCoord.xy * pp + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture(iChannel0, fragCoord.xy * pp + dir * -0.5).xyz +\n        texture(iChannel0, fragCoord.xy * pp + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax)){\n        fragColor = vec4(rgbA, color.w);\n    } else {\n        fragColor = vec4(rgbB, color.w);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define ID_SILK 1.\n\n#define stepSz 0.4\n#define eps 0.0006\n\n#define ambientCol vec3(0.5,0.5,0.5)\n#define lightCol vec3(0.9,0.8,0.8)*1.\n#define lDir normalize(vec3(-4.5,1,-1.))\n#define silkCol vec3(0.24,0.15,0.14)*5.\n#define sssSilkCol vec3(0.9,0.3,0.3)*0.\n\n\n#define pi acos(-1.)\n\n\n\n#define pmod(p,a) mod(p - 0.5*a,a) - 0.5*a\n\nvec2 gmuv;\n\nvec3 getRd(inout vec3 ro, vec3 lookAt, vec2 uv, float sc){\n    vec3 dir = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0,1,0),dir)); \n    vec3 up = normalize(cross(dir, right));    \n    ro += right*uv.x*sc;\n    ro += up*uv.y*sc;\n    return dir;\n}\n\n\nfloat eass(float p, float g) {\n    float s = p*0.45;\n    for(float i = 0.; i < g; i++){\n    \ts = smoothstep(0.,1.,s);\n    }\n    return s;\n}\n\nvec3 acesFilm(const vec3 x) {\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return clamp((x * (a * x + b)) / (x * (c * x + d ) + e), 0.0, 1.0);\n}\n\n\nmat3 getOrthogonalBasis(vec3 direction){\n    direction = normalize(direction);\n    vec3 right = normalize(cross(vec3(0,1,0),direction));\n    vec3 up = normalize(cross(direction, right));\n    return mat3(right,up,direction);\n}\n\nfloat cyclicNoise(vec3 p, float time){\n    float noise = 0.;\n    \n    // These are the variables. I renamed them from the original by nimitz\n    // So they are more similar to the terms used be other types of noise\n    float amp = 1.;\n    const float gain = 0.55;\n    const float lacunarity = 1.4;\n    const int octaves = 4;\n    \n    \n    \n    \n    const float warp = 0.45;    \n    float warpTrk = 1.4 ;\n    const float warpTrkGain = 1.25;\n    \n    // Step 1: Get a simple arbitrary rotation, defined by the direction.\n    vec3 seed = vec3(-1,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n    \n        // Step 2: Do some domain warping, Similar to fbm. Optional.\n        \n        p += sin((p.zxy + vec3(-sin(time)*0.1,time*0.25,time*0.4))*warpTrk - 2.*warpTrk)*warp; \n    \n        // Step 3: Calculate a noise value. \n        // This works in a way vaguely similar to Perlin/Simplex noise,\n        // but instead of in a square/triangle lattice, it is done in a sine wave.\n            \n        //noise += sin(dot(cos(p), sin(p.zyx)))*amp;\n        \n        float f = sin(dot(cos(p), sin(p.zyx)));\n        //f = sign(f)*pow(abs(f),1.);\n        noise += f*amp;\n        \n        \n        // Step 4: Rotate and scale. \n        \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    return (noise*0.25 + 0.5);\n\n    //return 1. - abs(noise)*0.5;\n}\n\n\nfloat cyclicNoiseB(vec3 p, float time){\n    float noise = 0.;\n    \n    // These are the variables. I renamed them from the original by nimitz\n    // So they are more similar to the terms used be other types of noise\n    float amp = 1.;\n    const float gain = 0.9;\n    const float lacunarity = 1.2;\n    const int octaves = 2;\n    \n    const float warp = .45;    \n    float warpTrk = 1.2 ;\n    const float warpTrkGain = 1.5;\n    \n    // Step 1: Get a simple arbitrary rotation, defined by the direction.\n    vec3 seed = vec3(-4,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n    \n        // Step 2: Do some domain warping, Similar to fbm. Optional.\n        \n        p += sin(p.zxy*warpTrk - 2.*warpTrk)*warp; \n    \n        // Step 3: Calculate a noise value. \n        // This works in a way vaguely similar to Perlin/Simplex noise,\n        // but instead of in a square/triangle lattice, it is done in a sine wave.\n        \n        noise += sin(dot(cos(p), sin(p.zxy )))*amp;\n        \n        // Step 4: Rotate and scale. \n        \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    \n    //return 1. - abs(noise)*0.5;\n    return (noise*0.25 + 0.5);\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}