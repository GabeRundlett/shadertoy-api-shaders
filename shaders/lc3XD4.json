{
    "Shader": {
        "info": {
            "date": "1714252961",
            "description": "I was watching low quality anime and made an OBS shader filter that makes it a bit sharper, didn't use it at the end, because this is good for blurred video but not as good at compressed one (better but not worth the hustle).",
            "flags": 0,
            "hasliked": 0,
            "id": "lc3XD4",
            "likes": 4,
            "name": "Outline Sharpener",
            "published": 3,
            "tags": [
                "sharpen",
                "outline"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 155
        },
        "renderpass": [
            {
                "code": "const int k = 2;\nconst float s = 1.5;\n\n// Fetch\nvec3 f(vec2 p, vec2 o) {\n    return texture(iChannel0, p + o / vec2(textureSize(iChannel0, 0))).rgb;\n}\n\n// Variance\nfloat v(vec2 p, vec3 c) {\n    float v = 0.0;\n    float t = 0.0;\n    for (int x = -k; x <= k; ++x) {\n        for (int y = -k; y <= k; ++y) {\n            vec2 o = vec2(x, y);\n            v += length(c - f(p, o));\n            t += 1.0;\n        }\n    }\n    return v / t;\n}\n\n// Gaussian Blur\nvec3 g(vec2 p) {\n    vec3 c = vec3(0, 0, 0);\n    float t = 0.0;\n    for (int x = -k; x <= k; ++x) {\n        for (int y = -k; y <= k; ++y) {\n            vec2 o = vec2(x, y);\n            float w = 0.4 / (s * exp(dot(o, o) / (2.0 * s * s)));\n            c += f(p, o) * w;\n            t += w;\n        }\n    }\n    return c / t;\n}\n\n#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439  // 1.0/SQRT_OF_2PI\n#define INV_PI 0.31830988618379067153776752674503\nvec3 sdn(vec2 p, vec3 gv)\n{\n    float vv = min(1.0, pow(v(p, gv) * 4.0, 2.0) * 32.0);\n    float sigma = 2.0; \n    float kSigma = 2.0; \n    float threshold = 0.2 * (0.4 + 1.0 - vv);\n    float radius = round(kSigma * sigma);\n    float radQ = radius * radius;\n\n    float invSigmaQx2 = .5 / (sigma * sigma);      // 1.0 / (sigma^2 * 2.0)\n    float invSigmaQx2PI = INV_PI * invSigmaQx2;    // 1.0 / (sqrt(PI) * sigma)\n\n    float invThresholdSqx2 = .5 / (threshold * threshold);     // 1.0 / (sigma^2 * 2.0)\n    float invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;   // 1.0 / (sqrt(2*PI) * sigma)\n\n    vec3 centrPx = f(p, vec2(0, 0));\n\n    float zBuff = 0.0;\n    vec3 aBuff = vec3(0.0, 0.0, 0.0);\n\n    for (int x = 1 - int(radius); x < int(radius); x++) \n    {\n        int pt = int(sqrt(radQ - float(x * x)));\n        for (int y = -pt; y <= pt; y++) {\n            vec2 d = vec2(x, y);\n            float blurFactor = exp(-dot(d, d) * invSigmaQx2) * invSigmaQx2PI;\n            vec3 walkPx = f(p, d);\n            vec3 dC = walkPx - centrPx;\n            float deltaFactor = exp(-dot(dC, dC) * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;\n            zBuff += deltaFactor;\n            aBuff += deltaFactor * walkPx;\n        }\n    }\n    return aBuff / zBuff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord / iResolution.xy;\n    vec3 fv = f(p, vec2(0, 0));\n    vec3 gv = g(p);\n    vec3 sdnv = sdn(p, gv);\n    vec3 c = sdnv * 2.0 - gv;\n    fragColor = vec4(c, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}