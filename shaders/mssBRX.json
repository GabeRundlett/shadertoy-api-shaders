{
    "Shader": {
        "info": {
            "date": "1689019961",
            "description": "Blending between f^n(uv) and f^(n+1)(uv), n+=1 every \"period\" seconds.",
            "flags": 0,
            "hasliked": 0,
            "id": "mssBRX",
            "likes": 2,
            "name": "Recursive appearance",
            "published": 3,
            "tags": [
                "recursivegrid"
            ],
            "usePreview": 0,
            "username": "Elyades",
            "viewed": 127
        },
        "renderpass": [
            {
                "code": "vec3 palette1( float t ) {\n    //by Inigo Quilez\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.4);\n    vec3 c = vec3(0.5,0.4,0.6);\n    vec3 d = vec3(0.5,iTime*1.5,0.5);\n\n    return vec3(a + b*cos(6.28318530718*(c*(t) + d)));\n}\n\nvec3 palette2( float t ) {\n    //by Inigo Quilez\n    vec3 a = vec3(0.5,0.6,0.5);\n    vec3 b = vec3(0.5,0.4,0.25+0.25*cos(iTime*3.0));\n    vec3 c = vec3(1.0,0.3+0.2*sin(iTime),1.2);\n    vec3 d = vec3(0.5+0.5*cos(iTime/3.0)*1.0,0.1,0.8);\n\n    return vec3(a + b*cos(6.28318530718*(c*(t) + d)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy - 0.5)*50.0;\n    vec3 color = vec3(0.0);\n    \n    float period = 2.0;\n    int currentIndex = int(iTime/period);\n    \n    float dummy;\n    for (int i = 0; i <= currentIndex; i++)\n    {\n        dummy = uv.x;\n        uv.x = uv.y;\n        uv.y = -dummy;\n    }\n    vec2 nextuv1;\n    nextuv1 = tan(-uv);\n    \n    vec2 nextuv2;\n    nextuv2.x = uv.y;\n    nextuv2.y = -uv.x;\n    \n    vec2 nextuv = 0.4*nextuv1 + 0.6*nextuv2;\n    \n    float weight = pow(sin(iTime/(period*(1.5+0.3*sin(3.14*iTime/5.0)))),2.0);\n    uv = (1.0-weight)*uv + weight*nextuv;\n    \n    \n    color += palette1(length(uv))/2.0;\n    color.rg += abs(cos(uv))/3.0;\n    color.b += palette2(cos(iTime/(period*5.0))).z;\n    \n    \n    \n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}