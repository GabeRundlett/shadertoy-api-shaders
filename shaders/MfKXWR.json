{
    "Shader": {
        "info": {
            "date": "1715057631",
            "description": "The blend modes from paint.net",
            "flags": 0,
            "hasliked": 0,
            "id": "MfKXWR",
            "likes": 2,
            "name": "Paint.net Blend Modes",
            "published": 3,
            "tags": [
                "blend",
                "blendmode"
            ],
            "usePreview": 0,
            "username": "LudoCrypt",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "vec4 blendAdd(vec4 baseColor, vec4 blendColor) {\n    return baseColor + blendColor;\n}\n\nvec4 blendBurn(vec4 baseColor, vec4 blendColor) {\n    return 1.0 - (1.0 - baseColor) / blendColor;\n}\n\nvec4 blendDark(vec4 baseColor, vec4 blendColor) {\n    return min(baseColor, blendColor);\n}\n\nvec4 blendDiff(vec4 baseColor, vec4 blendColor) {\n    vec4 result = baseColor - blendColor;\n    return abs(result);\n}\n\nvec4 blendDodge(vec4 baseColor, vec4 blendColor) {\n    return baseColor / (1.0 - blendColor);\n}\n\nvec4 blendGlow(vec4 baseColor, vec4 blendColor) {\n    return (blendColor * blendColor) / (1.0 - baseColor);\n}\n\nvec4 blendLight(vec4 baseColor, vec4 blendColor) {\n    return max(baseColor, blendColor);\n}\n\nvec4 blendMul(vec4 baseColor, vec4 blendColor) {\n    return baseColor * blendColor;\n}\n\nvec4 blendNeg(vec4 baseColor, vec4 blendColor) {\n    return 1.0 - abs(1.0 - blendColor - baseColor);\n}\n\nvec4 blendOverlay(vec4 baseColor, vec4 blendColor) {\n    vec3 result = vec3(0.0);\n    for (int i = 0; i < 3; i++) {\n        if (baseColor[i] < 0.5)\n            result[i] = 2.0 * blendColor[i] * baseColor[i];\n        else\n            result[i] = 1.0 - 2.0 * (1.0 - blendColor[i]) * (1.0 - baseColor[i]);\n    }\n    return vec4(result, 1.0);\n}\n\nvec4 blendReflect(vec4 baseColor, vec4 blendColor) {\n    return (baseColor * baseColor) / (1.0 - blendColor);\n}\n\nvec4 blendScreen(vec4 baseColor, vec4 blendColor) {\n    return 1.0 - (1.0 - baseColor) * (1.0 - blendColor);\n}\n\nvec4 blendModes(float t, vec4 a, vec4 b) {\n    float blendTime = 1.0;\n    float totalTime = mod(t, blendTime * 12.0);\n    int mode = int(totalTime / blendTime);\n\n    vec4 resultColor;\n    switch (mode) {\n        case 0:\n            resultColor = blendAdd(a, b);\n            break;\n        case 1:\n            resultColor = blendBurn(a, b);\n            break;\n        case 2:\n            resultColor = blendDark(a, b);\n            break;\n        case 3:\n            resultColor = blendDiff(a, b);\n            break;\n        case 4:\n            resultColor = blendDodge(a, b);\n            break;\n        case 5:\n            resultColor = blendGlow(a, b);\n            break;\n        case 6:\n            resultColor = blendLight(a, b);\n            break;\n        case 7:\n            resultColor = blendMul(a, b);\n            break;\n        case 8:\n            resultColor = blendNeg(a, b);\n            break;\n        case 9:\n            resultColor = blendOverlay(a, b);\n            break;\n        case 10:\n            resultColor = blendReflect(a, b);\n            break;\n        case 11:\n            resultColor = blendScreen(a, b);\n            break;\n    }\n    \n    return resultColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 colorA = texture(iChannel0, uv);\n    vec4 colorB = texture(iChannel1, uv);\n\n    vec4 resultColor = blendModes(iTime, colorA, colorB);\n\n    fragColor = resultColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}