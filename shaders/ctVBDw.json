{
    "Shader": {
        "info": {
            "date": "1702152552",
            "description": "Finding the self-intersection point of a cubic bezier curve.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctVBDw",
            "likes": 15,
            "name": "Cubic Bezier Self Intersection",
            "published": 3,
            "tags": [
                "bezier",
                "intersection",
                "curve",
                "cubic",
                "selfintersection"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "// See https://www.desmos.com/calculator/huylfpq6ek\nbool cubicBezierSelfIntersection(in vec2 a, in vec2 b, in vec2 c, in vec2 d, out vec2 t) {\n    vec2 A = a - 3.0 * b + 3.0 * c - d;\n    vec2 B = a - 2.0 * b + c;\n    vec2 C = a - b;\n\n    float u = A.x * B.y - A.y * B.x;\n    float v = B.x * C.y - B.y * C.x;\n    float w = A.x * C.y - A.y * C.x;\n\n    float dis = 4.0 * u * v - w * w;\n    if (dis < 0.0) return false;\n    dis = sqrt(3.0 * dis);\n    t = vec2(w + dis, w - dis) / (2.0 * u);\n    return true;\n}\n\nvec2 cubicBezierPoint(in vec2 a, in vec2 b, in vec2 c, in vec2 d, in float t) {\n     return mix(mix(mix(a, b, t), mix(b, c, t), t), mix(mix(b, c, t), mix(c, d, t), t), t);\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    p -= a, b -= a;\n    return length(p - b * clamp(dot(p, b) / dot(b, b), 0.0, 1.0));\n}\n\n#define paint(sdf, color) fragColor.rgb = mix(fragColor.rgb, color, smoothstep(unit, 0.0, sdf))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 *  iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    float time = iTime * 0.25;\n    float t1 = time * 0.5, t2 = time, t3 = time * 1.25;\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n    vec2 a = vec2(c2 * 2.0, s3 - 0.5);\n    vec2 b = vec2(-2.0, 1.0);\n    vec2 c = vec2(2.0, 1.0);\n    vec2 d = vec2(s2 * 2.0, c3 - 0.5);\n\n    paint(sdLine(uv, a, b), vec3(0.0, 0.0, 1.0));\n    paint(sdLine(uv, b, c), vec3(0.0, 0.0, 1.0));\n    paint(sdLine(uv, c, d), vec3(0.0, 0.0, 1.0));\n\n    vec2 p0 = a;\n    vec2 to = uv - a;\n    float sqr = dot(to, to);\n    for (float t = 0.02; t < 1.0; t += 0.02) {\n        vec2 p1 = cubicBezierPoint(a, b, c, d, t);\n        vec2 pa = uv - p0, ba = p1 - p0;\n        vec2 to = pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n        sqr = min(sqr, dot(to, to));\n        p0 = p1;\n    }\n\n    paint(sqrt(sqr), vec3(1.0, 0.8, 0.0));\n\n    paint(length(uv - a) - 0.05, vec3(1.0, 0.0, 0.0));\n    paint(length(uv - b) - 0.05, vec3(1.0, 0.0, 0.0));\n    paint(length(uv - c) - 0.05, vec3(1.0, 0.0, 0.0));\n    paint(length(uv - d) - 0.05, vec3(1.0, 0.0, 0.0));\n\n    vec2 t;\n    if (cubicBezierSelfIntersection(a, b, c, d, t)) {\n        if (t.x >= 0.0 && t.x <= 1.0 && t.y >= 0.0 && t.y <= 1.0) {\n            vec2 x = cubicBezierPoint(a, b, c, d, t.x);\n            paint(abs(length(uv - x) - 0.07), vec3(1.0));\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}