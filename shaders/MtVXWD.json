{
    "Shader": {
        "info": {
            "date": "1484496271",
            "description": "Object highlight example.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtVXWD",
            "likes": 5,
            "name": "Object highlight",
            "published": 3,
            "tags": [
                "sphere",
                "sample",
                "highlight"
            ],
            "usePreview": 0,
            "username": "mlkn",
            "viewed": 620
        },
        "renderpass": [
            {
                "code": "// highlight parameters\nconst float waveHeight = 0.5;\nconst float waveSpeed = 0.5;\nconst float wavePause = 0.8;\nconst vec3 highlightCol = vec3(0.7, 0.7, 0.9);\n\n// scene parameters\nconst float highlightRadius = 0.43;\nconst float sRadius = 0.4;\n\nconst vec3 lightPos = vec3(1.3, 1.4, 2.5);\nconst vec3 viewerPos = vec3(0., 0., 4.);\nconst vec3 ambientCol = vec3(0.2, 0.2, 0.4);\nconst vec3 lightCol = vec3(0.35, 0.2, 0.2);\n\nvec3 computeSpherePos(vec2 p, vec2 center, float r)\n{\n    vec2 local = p - center;\n    return vec3(local, sqrt(r * r - dot(local, local)));\n}\n\nvec2 computeSphereMapCoord(vec3 c, float r)\n{\n    return vec2(atan(c.z, c.x), acos(c.y / r));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord / iResolution.xy;\n    p.x *= iResolution.x / iResolution.y;\n \n    vec2 sCenter = 0.5 * vec2(iResolution.x/iResolution.y, 1.);\n    \n    vec3 sPos = computeSpherePos(p, sCenter, sRadius);\n    vec3 sNorm = normalize(sPos);\n    vec3 lightDir = normalize(lightPos - sPos);\n    \n    float cosIncidence = dot(lightDir, sNorm);\n    float diffuse = clamp(cosIncidence, 0., 1.);\n    \n    vec3 refl = reflect(lightDir, sNorm);\n    vec3 viewDir = normalize(sPos - viewerPos);\n\n    float specularTerm = clamp(dot(viewDir, refl), 0., 1.);\n    float specular = pow(specularTerm, 4.);\n\n    vec3 map = texture(iChannel0, computeSphereMapCoord(sPos, sRadius)).xyz;\n    vec3 col = ambientCol * map + lightCol * (diffuse + specular);\n\n    float inBackground = dot(p - sCenter, p - sCenter) - sRadius * sRadius;\n    col *= inBackground > 0.0 ? vec3(0.66, 0.83, 0.55) : vec3(1);\n\n    vec3 highlightPos = computeSpherePos(p, sCenter, highlightRadius);\n    float wave = mod(highlightPos.y - iTime * waveSpeed, waveHeight + wavePause); // [0, h+p]\n\twave = max(0., wave - wavePause) / waveHeight; // [0, 1]\n\n\tif (dot(p - sCenter, p - sCenter) < highlightRadius * highlightRadius) {\n        col = mix(col, highlightCol, wave / 3.);\n    }\n \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}