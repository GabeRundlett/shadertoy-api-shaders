{
    "Shader": {
        "info": {
            "date": "1530648162",
            "description": "Trying to fake a nebula, using some code from BigWIngs for the stars\nYou may have to reload for the music to get in synth.",
            "flags": 32,
            "hasliked": 0,
            "id": "lsyfWy",
            "likes": 6,
            "name": "NebulaIterations",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "parallax",
                "volumetrics"
            ],
            "usePreview": 1,
            "username": "felipunkerito",
            "viewed": 2108
        },
        "renderpass": [
            {
                "code": "#define STEPS       128\n#define FAR         10.\n#define PI acos( -1.0 )\n//#define PROCEDURAL\n#define HASHSCALE .1031\n\nmat2 rot( float a )\n{\n\n\treturn mat2( cos( a ), -sin( a ),\n               \t sin( a ),  cos( a )\n               );\n\n}\n\n/*\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n*/\n\n// https://www.shadertoy.com/view/4djSRW\n\nfloat hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// iq's\n\n#ifdef PROCEDURAL\n\nfloat noise( in vec3 x )\n{\n    \n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\n#else\n\nfloat noise( in vec3 x )\n{\n\n\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\n    vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n    vec2 rg = textureLod( iChannel1, (uv+ 0.5)/256.0, 0.0 ).yx;\n    return mix( rg.x, rg.y, f.z );\n    \n}\n\n#endif\n\nfloat fbm( in vec3 p )\n{\n\n    float wav = texture( iChannel2, vec2( 0.0, 0.25 ) ).x;\n    float fre = texture( iChannel2, vec2( 0.0, 0.15 ) ).x;\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02; p -= iTime * 0.5 + wav;\n    f += 0.2500 * noise( p ); p *= 2.03; p += iTime * 0.4 + fre;\n    f += 0.1250 * noise( p ); p *= 2.01; p -= iTime * 0.5 + wav;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\nfloat map( vec3 p )\n{\n\n    //return p.y + 1.0 * fbm( p + iTime * 0.2 );\n\t//float f = 1.7 - length( p ) * fbm( p );\n    \n    //p.zy *= rot( iTime * 0.1 );\n    \n    p.z -= iTime * 0.5;\n    \n    float f = fbm( p );\n    \n    return f;\n    \n}\n\nfloat ray( vec3 ro, vec3 rd, out float den )\n{\n\n    float t = 0.0, maxD = 0.0, d = 1.0; den = 0.0;\n    \n    for( int i = 0; i < STEPS; ++i )\n    {\n        \n        vec3 p = ro + rd * t;\n    \n        den = d * ( map( p ) * t * t * 0.025 );\n        //den = map( p );\n        maxD = maxD < den ? den : maxD;\n        \n        if( maxD > 1.0 || t > FAR ) break;\n        \n        // https://www.shadertoy.com/view/MscXRH\n        t += max( maxD*.1, .05 );\n        \n        //t += 0.05;\n    \n    }\n    \n    den = maxD;\n    \n    return t;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd, vec2 uv )\n{\n\n    float den = 0.0;\n    float t = ray( ro, rd, den );\n    \n    vec3 p = ro + rd * t;\n\n    vec3 col = mix( vec3( 0 ), mix( vec3( 0.4, fbm( p ), 0.2 ), vec3( fbm( p ) + 0.9, 0.9, 0.5 ), den ), den * .5 );\n    //vec3 col = mix( vec3( 1 ), colB, den );\n    \n    col *= sqrt( col );\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    vec2 p = fragCoord / iResolution.xy;\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    /*\n    vec3 ro = 3.0 * vec3( sin( mou.x * 2.0 * PI ), 0.0, cos( -mou.x * 2.0 * PI ) );\n    vec3 ww = normalize( vec3( 0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0, 1, 0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    */\n    vec3 ro = vec3( mou.x, mou.y, 2.5 );\n    vec3 rd = normalize( vec3( uv, -1.0 ) );\n    /*ro.zy *= rot( -mou.y * 6.28 );\n    rd.zy *= rot( -mou.y * 6.28 );\n    ro.xy *= rot( mou.x * 6.28 );\n    rd.xy *= rot( mou.x * 6.28 );*/\n    \n    ro.zy *= rot( -iTime * 0.1 );\n    rd.zy *= rot( -iTime * 0.1 );\n    ro.xy *= rot( -iTime * 0.1 );\n    rd.xy *= rot( -iTime * 0.1 );\n    \n    float den = 0.0, t = ray( ro, rd, den );\n    \n    vec3 poi = ro + rd * t;\n    \n    vec3 col = shad( ro, rd, uv );\n    \n    vec3 sta = texture( iChannel0, p ).rgb;\n    \n    sta += col;\n    \n    // Output to screen\n    fragColor = vec4(sta,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The Universe Within - by Martijn Steinrucken aka BigWings 2018\n// Email:countfrolic@gmail.com Twitter:@The_ArtOfCode\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// After listening to an interview with Michael Pollan on the Joe Rogan\n// podcast I got interested in mystic experiences that people seem to\n// have when using certain psycoactive substances. \n//\n// For best results, watch fullscreen, with music, in a dark room.\n// \n// I had an unused 'blockchain effect' lying around and used it as\n// a base for this effect. Uncomment the SIMPLE define to see where\n// this came from.\n// \n// Use the mouse to get some 3d parallax.\n\n// Music - Terrence McKenna Mashup - Jason Burruss Remixes\n// https://soundcloud.com/jason-burruss-remixes/terrence-mckenna-mashup\n//\n// YouTube video of this effect:\n// https://youtu.be/GAhu4ngQa48\n//\n// YouTube Tutorial for this effect:\n// https://youtu.be/3CycKKJiwis\n\n\n#define S(a, b, t) smoothstep(a, b, t)\n#define NUM_LAYERS 4.\n\n//#define SIMPLE\n\n\nfloat N21(vec2 p)\n{\t// Dave Hoskins - https://www.shadertoy.com/view/4djSRW\n\tvec3 p3  = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 GetPos(vec2 id, vec2 offs, float t) {\n    float n = N21(id+offs);\n    float n1 = fract(n*10.);\n    float n2 = fract(n*100.);\n    float a = t+n;\n    return offs + vec2(sin(a*n1), cos(a*n2))*.4;\n}\n\nfloat GetT(vec2 ro, vec2 rd, vec2 p) {\n\treturn dot(p-ro, rd); \n}\n\nfloat NetLayer(vec2 st, float n, float t) {\n    vec2 id = floor(st)+n;\n\n    st = fract(st)-.5;\n   \n    vec2 p[9];\n    int i=0;\n    for(float y=-1.; y<=1.; y++) {\n    \tfor(float x=-1.; x<=1.; x++) {\n            p[i++] = GetPos(id, vec2(x,y), t);\n    \t}\n    }\n    \n    float m = 0.;\n    float sparkle = 0.;\n    \n    for(int i=0; i<9; i++) {\n\n        float d = length(st-p[i]);\n\n        float s = (.005/(d*d));\n        s *= S(1., .7, d);\n        float pulse = sin((fract(p[i].x)+fract(p[i].y)+t)*5.)*.4+.5;\n        pulse = pow(pulse, 20.);\n\n        s *= pulse;\n        sparkle += s;\n    }\n    \n    \n    float sPhase = (sin(t+n)+sin(t*.1))*.05+.5;\n    sPhase += pow(sin(t*.1)*.5+.5, 50.)*5.;\n    m += sparkle*sPhase;//(*.5+.5);\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n\tvec2 M = iMouse.xy/iResolution.xy-.5;\n    \n    float t = -iTime*.1;\n    \n    float s = sin(t);\n    float c = cos(t);\n    mat2 rot = mat2(c, -s, s, c);\n    vec2 st = uv*rot;  \n\tM *= -rot*.1;\n    \n    float m = 0.;\n    for(float i=0.; i<1.; i+=1./NUM_LAYERS) {\n        float z = fract(t+i);\n        float size = mix(15., 1., z);\n        float fade = S(0., .6, z)*S(1., .8, z);\n        \n        m += fade * NetLayer(st*size-M*z, i, iTime * 0.05);\n    }\n    \n\tfloat fft  = texelFetch( iChannel2, ivec2(.7,0), 0 ).x;\n    float glow = -length(uv)+.05+fft*0.05;\n   \n    vec3 baseCol = vec3(s, cos(t*.4), -sin(t*.24))*.4+.6;\n    vec3 col = baseCol*m;\n    col += baseCol*glow;\n    \n    #ifdef SIMPLE\n    uv *= 10.;\n    col = vec3(1)*NetLayer(uv, 0., iTime);\n    uv = fract(uv);\n    //if(uv.x>.98 || uv.y>.98) col += 1.;\n    #else\n    col *= 1.-dot(uv,uv);\n    t = mod(iTime, 230.);\n    col *= S(0., 20., t)*S(224., 200., t);\n    #endif\n    \n    fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}