{
    "Shader": {
        "info": {
            "date": "1630915638",
            "description": "tribute to https://iquilezles.org/articles/normalsSDF/normalsSDF.htm\nvariant of variant\n( Funny: the fork link above is wrong. seems to be shader#0000 :-p )",
            "flags": 0,
            "hasliked": 0,
            "id": "sdt3Dl",
            "likes": 14,
            "name": "diamond in tetrahedron in cube",
            "published": 3,
            "tags": [
                "raymarching",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 421
        },
        "renderpass": [
            {
                "code": "// Fork of spalmer's https://shadertoy.com/view/Ndt3WX\n// minor modification of Fabrice's https://shadertoy.com/view/7s33Df\n\n#define rot(a)     mat2(cos(a+vec4(0,11,33,0)))               // rotation                  \n#define tri(D)     min( D(x,y,z), min( D(y,z,x), D(z,x,y) ) ) // apply D in 3 orientation xyz, yzx, zxy\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,s,c,e,l; \n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -3.5*R.y) - R),             // ray direction\n          p = 7./R, q,a,                                      // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(20,8,0)/1e2*cos(iTime+vec3(0,11,0)); // auto thumbnail\n     \n    for (O=vec4(1); O.x > 0. && t > .01; O-=.01)\n        q = p,\n        q.yz *= rot(.5-6.*M.y),                               // rotations\n        q.xz *= rot(2.-6.*M.x),\n        a = abs(q),\n        c = max(a.x,max(a.y,a.z))-1.,                         // cube\n#define A(x,y,z) vec3(x,y,z)/sqrt(3.)\n#define D(x,y,z) dot(q,A(x,y,z))\n#define C(x,y,z) length( abs(vec2(q.x,q.y)) - 1.)\n        t = min(t, e = max(tri(C)-.01, c)),                   // cube edges\n#define P(x,y,z) length(q - max(0.,D(x,y,z))*A(x,y,z))\n       // t = min(t, l = max(min(min(P(1,1,-1),P(1,-1,1)),min(P(-1,1,1),P(-1,-1,-1))) -.1 , c ) ), // tetra axes\n#define C0(x,y,z) length(vec2(q.x,q.y))\n       t = min(t, l = max(tri(C0)-.01, c-.5)),                // green cross\n#define T(x,y,z) length(vec2( (q.x-q.z)*.7, q.y-1.) )\n#define Te(x,y,z) min( T(x,y,z), T(x,y*-1.,z*-1.) )\n        t = min(t, max( tri(Te) -.05, c)),                    // tetrahedron\n#define T0(x,y,z) length( vec2( (abs(q.x-q.z)-1.)*.7, q.y ))\n#define T0e(x,y,z) min( T0(x,y,z), T0(x,y,z*-1.) )\n        t = min(t, s = max(  tri(T0e) -.025 , c)),            // red diamond\n       // t = min(t, -sqrt(1./3.) + max(max(D(1,1,-1),D(1,-1,1)),max(D(-1,1,1),D(-1,-1,-1)))), // tetrahedron\n        p += t*D;                                             // step forward = dist to obj          \n\n    if (t==e) O.rg *=.7;                                      // coloring\n    if (t==s) O.gb *= 0.;\n    if (t==l) O.rb *= 0.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}