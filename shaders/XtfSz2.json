{
    "Shader": {
        "info": {
            "date": "1437849019",
            "description": "From http://patriciogonzalezvivo.com/2015/thebookofshaders/10/",
            "flags": 0,
            "hasliked": 0,
            "id": "XtfSz2",
            "likes": 10,
            "name": "Random Defrag",
            "published": 3,
            "tags": [
                "random",
                "serial"
            ],
            "usePreview": 0,
            "username": "patriciogv",
            "viewed": 1399
        },
        "renderpass": [
            {
                "code": "// Copyright Patricio Gonzalez Vivo, 2015 - http://patriciogonzalezvivo.com/\n// I am the sole copyright owner of this Work.\n//\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n\nfloat random (in float x) { return fract(sin(x)*1e4); }\nfloat random (in vec2 _st) { return fract(sin(dot(_st.xy, vec2(12.9898,78.233)))* 43758.5453123);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 st = fragCoord.xy / iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n\n    // Grid\n    vec2 grid = vec2(50.0,30.);\n    st *= grid;\n\n    vec2 ipos = floor(st);  // integer\n    \n    vec2 vel = floor(vec2(iTime*10.)); // time\n    vel *= vec2(-1.,0.); // direction\n\n    vel *= (step(1., mod(ipos.y,2.0))-0.5)*2.; // Oposite directions\n    vel *= random(ipos.y); // random speed\n    \n    // 100%\n    float totalCells = grid.x*grid.y;\n    float t = mod(iTime*max(grid.x,grid.y)+floor(1.0+iTime*iMouse.y),totalCells);\n    vec2 head = vec2(mod(t,grid.x), floor(t/grid.x));\n\n    vec2 offset = vec2(0.1,0.);\n\n    vec3 color = vec3(1.0);\n    color *= step(grid.y-head.y,ipos.y);                                // Y\n    color += (1.0-step(head.x,ipos.x))*step(grid.y-head.y,ipos.y+1.);   // X\n    color = clamp(color,vec3(0.),vec3(1.));\n\n    // Assign a random value base on the integer coord\n    color.r *= random(floor(st+vel+offset));\n    color.g *= random(floor(st+vel));\n    color.b *= random(floor(st+vel-offset));\n\n    color = smoothstep(0.,.5+iMouse.x/iResolution.x*.5,color*color); // smooth\n    color = step(0.5+iMouse.x/iResolution.x*0.5,color); // threshold\n\n    //  Margin\n    color *= step(.1,fract(st.x+vel.x))*step(.1,fract(st.y+vel.y));\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}