{
    "Shader": {
        "info": {
            "date": "1618073024",
            "description": "First Time Implementation of Reflection. ",
            "flags": 0,
            "hasliked": 0,
            "id": "sdj3Dc",
            "likes": 5,
            "name": "大龙猫 - Reflect Test",
            "published": 3,
            "tags": [
                "reflect"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "#define fGlobalTime iTime\nmat2 rot(float a){\n    float c=cos(a),s=sin(a);\n     return mat2(c,-s,s,c);\n     }\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n  p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat sdBox(vec3 p,vec3 b){\n    vec3 q = abs(p)-b;\n    return length(max(q,vec3(.0))) + min(max(max(q.x,q.y),q.z),.0);\n  }\nvec2 mmin(vec2 a,vec2 b){ return a.x<b.x ? a:b;}\nvec2 sdf (vec3 p){\n  vec3 bp= p;\n\n  vec3 bbp= bp;\n  bbp.xz*=rot(-fGlobalTime*.3);\n    bbp.zy*=rot(-fGlobalTime*.3);\n  vec2 h = vec2(sdBoxFrame(bbp,vec3(1.),.125),1.0);\n  vec2 bbox = vec2(-sdBox(p,vec3(10.)),3.);\n  h = mmin(h,bbox);\n  \n  \n  bp.xz *=rot(fGlobalTime);\n  float bb = 1000.;\n  for(float i=.0;i<4.;i++){\n    bp.xy= abs(bp.xy)-.5*i;\n    bp.xz = bp.x < bp.z ? bp.xz:bp.zx;\n    bp*=1.2;\n    bp.xy*=rot(.415*i*3.);\n    bb = -min(bb,sdBox(bp,vec3(.50,.5,.55))/1.5);\n  }\n vec3 pppp = p;\n  pppp.xz *=rot(fGlobalTime*.5);\n   pppp.xy *=rot(fGlobalTime*.5);\n  vec2 t = vec2(length(abs(abs(pppp)-1.5)-1.5)-.5,2.);\n  t.x = max(t.x,-bb); \n  h = mmin(h,t);\n  return h;\n}\nvec2 nv = vec2(.0001,.0);\nvec3 norm(vec3 p){\n    float d= sdf(p).x;\n    return normalize(vec3(d-sdf(p-nv.xyy).x,d-sdf(p-nv.yxy).x,d-sdf(p-nv.yyx).x));\n  }\nvec2 raym(vec3 ro,vec3 rd,float stp,inout vec3 rp,inout bool bounce){\n     float td=0.01;\n     for(float i=0.; i<=stp;i++){\n          vec2 d = sdf(rp);\n          td+=d.x;\n          rp+=rd*d.x*.7;\n          if(d.x <= 0.00001){\n            if(d.y ==2.){\n                bounce = true;\n          \n                rd = reflect(rd,norm(rp));\n                rp+=rd*.00001;\n                \n            } else {\n             return vec2(td,d.y);\n              }\n          }\n       }\n     return vec2(td,-1.);\n   }\n vec3 pal(float t){\n  return vec3(.2,.5,.7)+vec3(.7,.2,.5)*cos(2.*3.1415*(1.*t+vec3(.3,.4,.6)));\n   }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy) / iResolution.y;\n    \n    vec2 puv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\nvec3 col = vec3(.1);\n  vec3 ro = vec3(-0.5,.5,-4.);\n  ro.xy *=rot(fGlobalTime*.33);\n  bool bounce = false;\n  vec3 rd=vec3(uv,1.0),rp=ro+rd*.001;\n  vec2 d  = raym(ro,rd,69.*2.,rp,bounce);\n  vec3 light = vec3(5.,5.,-5.);\n  light = abs(light)-10.5;\n  light.xz *=rot(fGlobalTime*2.);\n  light.y = sin(fGlobalTime*2.)*10.;\n  if(d.y >0.){\n      if(d.y == 1.){\n       \n      vec3 n = norm(rp);\n      float lmb = max(0.,dot(normalize(light),n));\n      float dlight = length(rp-light)/5.;\n        if(bounce) {lmb=lmb*2.;}\n        float qq = max(rp.y/10.0,.0);\n      col =pal(length(qq*.5)*dlight+fGlobalTime)*lmb/dlight*2.;\n      \n      }  if(d.y == 3.){\n       \n      vec3 n = norm(rp);\n      float lmb = max(0.,dot(normalize(light),n));\n      float dlight = length(rp-light)/5.;\n        if(bounce) {lmb=lmb*2.;}\n        float qq = max(rp.y/10.0,.0);\n      col =col/dlight+vec3(.7,.0,.5)*lmb/dlight*2.;\n       // if(bounce) {col = pal(length(qq)+fGlobalTime)*lmb/dlight*2.;}\n      } \n       if(bounce) { \n        col = pow(col,vec3(1.5));\n         }\n    }\n\n\n   \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}