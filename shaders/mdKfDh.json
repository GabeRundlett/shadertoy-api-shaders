{
    "Shader": {
        "info": {
            "date": "1698257412",
            "description": "Click to explore! Uses the same formula as the Julia/Mandelbrot set, but with the pentation hyperoperation. \nn²↑₅ + i = nⁿ↑₄+i instead of n²↑₃ + i = nⁿ↑₂ + i = n*n+i\n[url=https://www.shadertoy.com/playlist/s3BcD1]FRACTAL PLAYLIST[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "mdKfDh",
            "likes": 4,
            "name": "Julia Pentation Fractal Explorer",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "math",
                "mandelbrot",
                "interactive",
                "orbit",
                "quadratic",
                "iteration",
                "trap",
                "chaotic",
                "fractional",
                "hyperoperation",
                "pentation"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "/// by Dom Mandy in 2023\n\n\n/*\nComplex differential multiplication\n*/\nvec2 M(vec2 a, vec2 b) { \n    return vec2( \n        dot(a, vec2(b.x, -b.y)), \n        dot(a, b.yx)\n    ); \n}\nmat2 M(mat2 a, mat2 b) {\n    return mat2(\n        M(a[0], b[0]),\n        M(a[0], b[1]) + M(a[1], b[0])\n    );\n}\n\n\nvoid mainImage(out vec4 o, vec2 i) {\n    // fixed point f(1 + 0i) = 1 + 0i\n    mat2 z, a = mat2(vec2(1, 0), vec2(0));\n    \n    vec2 w, t, r = iResolution.xy,\n         m = 2. * iMouse.xy - r;\n    \n    // mandelbrot condition\n    z[0] = t = i = (i + i - r) / r.x;\n    // derivative of a variable is 1\n    z[1] = vec2(1);\n    \n    // julia iteration\n    float j, f, k = 9.;\n    for (m /= r.x; j++ < 99.; f < k ? k = f, t = z[0] : t) {\n        // n²↑₅ pentation is n^n^n..., n times.\n        // fractional iteration by taylor\n        // expansion around the fixed point.\n        mat2 c = z - a;\n        z += M(M(c, c), z) \n           + M(M(z, c) * 6. + z * 3.,\n               M(M(c, c), c) / 6.);\n        w = z[0];\n        \n        // controls\n        z[0] += mix(i, m, max(0., sign(iMouse.z)));\n        \n        // escape condition\n        f = dot(z[0], z[0]);\n        if (f > 4.) break;\n    }\n    \n    // proportional to distance\n    float d = log(sqrt(f)) * sqrt(f / dot(z[1], z[1])),\n          // grid\n          g = smoothstep(0., 4., length(cos(w))),\n          // hue angle\n          h = atan(t.y, t.x);\n\n    // color mapping\n    vec3 v = vec3(h - 2.1, h, h + 2.1);\n    \n    o = vec4(.5 + .5 * cos(v), 1.);\n    o = smoothstep(.1, .0, o * d + .1 * g);\n}\n\n\n/*\nREFERENCES\n\ndomain warping\n\ngcgac 2022\nhttps://www.shadertoy.com/view/NtyfWD\n\ndistance\n\niq 2013\nhttps://www.shadertoy.com/view/lsX3W4\n\norbit traps\n\nDeltaT 2023\nhttps://www.shadertoy.com/view/csSyzy\n\nathibaul 2021\nhttps://www.shadertoy.com/view/fdt3zX\n\npiotrekli 2016\nhttps://www.shadertoy.com/view/4lK3Dc\n\nKramin 2015\nhttps://www.shadertoy.com/view/4st3Wn\n\nrefactoring\n\nshadertoyjiang & FabriceNeyret2 2023\nhttps://www.shadertoy.com/view/DdcBWX\n\nSnoopethDuckDuck 2023\nhttps://www.shadertoy.com/view/cs3BRj\n*/\n\n\n/*\nFURTHER READING\n\nhyperoperations\n\nhttps://en.wikipedia.org/wiki/Pentation\nhttps://en.wikipedia.org/wiki/Iterated_function#Fractional_iterates_and_flows,_and_negative_iterates\n\nfractals\n\nhttps://en.wikipedia.org/wiki/Julia_set\nhttps://en.wikipedia.org/wiki/Mandelbrot_set\nhttps://en.wikipedia.org/wiki/Bifurcation_diagram\nhttps://en.wikipedia.org/wiki/Orbit_trap#Point_based\n\ncolor mapping\n\nhttps://en.wikipedia.org/wiki/Color_wheel\nhttps://en.wikipedia.org/wiki/Versine#Definitions\nhttps://en.wikipedia.org/wiki/Spectral_sensitivity\nhttps://en.wikipedia.org/wiki/Argument_(complex_analysis)\n\ndifferentials\n\nhttps://en.wikipedia.org/wiki/Product_rule\nhttps://en.wikipedia.org/wiki/Gradient_descent\nhttps://en.wikipedia.org/wiki/Newton%27s_method\nhttps://en.wikipedia.org/wiki/Householder%27s_method\nhttps://en.wikipedia.org/wiki/Automatic_differentiation\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}