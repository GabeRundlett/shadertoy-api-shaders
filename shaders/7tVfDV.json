{
    "Shader": {
        "info": {
            "date": "1665318232",
            "description": "CC0: Happy sunday accident\nWas tinkering a bit with an earlier and this popped out.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7tVfDV",
            "likes": 20,
            "name": "Happy sunday accident",
            "published": 3,
            "tags": [
                "raymarch",
                "accidents"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "// CC0: Happy sunday accident\n//  Was tinkering a bit with an earlier and this popped out\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#define TOLERANCE       0.0005\n#define MAX_RAY_LENGTH  10.0\n#define MAX_RAY_MARCHES 60\n#define NORM_OFF        0.005\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst float hoff = 0.;\n\nconst vec3 skyCol     = HSV2RGB(vec3(hoff+0.57, 0.90, 0.25));\nconst vec3 skylineCol = HSV2RGB(vec3(hoff+0.02, 0.95, 0.5));\nconst vec3 sunCol     = HSV2RGB(vec3(hoff+0.07, 0.95, 0.5));\nconst vec3 diffCol1   = HSV2RGB(vec3(hoff+0.60, 0.90, 0.5));\nconst vec3 diffCol2   = HSV2RGB(vec3(hoff+0.90, 0.90, 0.5));\n\nconst vec3 sunDir1    = normalize(vec3(0., 0.05, -1.0));\n\nconst float lpf = 5.0; \nconst vec3 lightPos1  = lpf*vec3(+1.0, 2.0, 3.0);\nconst vec3 lightPos2  = lpf*vec3(-1.0, 2.0, 3.0);\n  \n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat dcross(vec2 p, vec2 b, float r)  {\n  p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n  vec2  q = p - b;\n  float k = max(q.y,q.x);\n  vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);\n  return sign(k)*length(max(w,0.0)) + r;\n}\n\n\nvec3 render0(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  float sf = 1.0001-max(dot(sunDir1, rd), 0.0);\n  col += skyCol*pow((1.0-abs(rd.y)), 8.0);\n  col += (mix(0.0025, 0.125, tanh_approx(.005/sf))/abs(rd.y))*skylineCol;\n  sf *= sf;\n  col += sunCol*0.00005/sf;\n\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), 6.0));\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += vec3(4.0)*skyCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += vec3(0.8)*skyCol*exp(-0.5*max(db, 0.0));\n  }\n\n  return clamp(col, 0.0, 10.0);;\n}\n\nfloat df(vec3 p) {\n  vec3 p0 = p;\n  p0.xy *= ROT(0.2*p0.z-0.1*TIME);\n  return -dcross(p0.xy, vec2(2.5, 1.5), 0.5);\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float initt) {\n  float t = initt;\n  float tol = TOLERANCE;\n  for (int i = 0; i < MAX_RAY_MARCHES; ++i) {\n    if (t > MAX_RAY_LENGTH) {\n      t = MAX_RAY_LENGTH;    \n      break;\n    }\n    float d = df(ro + rd*t);\n    if (d < TOLERANCE) {\n      break;\n    }\n    t += d;\n  }\n  return t;\n}\n\nvec3 boxCol(vec3 col, vec3 nsp, vec3 ro, vec3 rd, vec3 nnor, vec3 nrcol) {\n  float nfre  = 1.0+dot(rd, nnor);\n  nfre        *= nfre;\n\n  vec3 nld1   = normalize(lightPos1-nsp); \n  vec3 nld2   = normalize(lightPos2-nsp); \n\n  float ndif1 = max(dot(nld1, nnor), 0.0);\n  ndif1       *= ndif1;\n\n  float ndif2 = max(dot(nld2, nnor), 0.0);\n  ndif2       *= ndif2;\n\n  vec3 scol = vec3(0.0);\n  scol += diffCol1*ndif1;\n  scol += diffCol2*ndif2;\n  scol += 0.1*(skyCol+skylineCol);\n  scol += nrcol*0.75*mix(vec3(0.25), vec3(0.5, 0.5, 1.0), nfre);\n\n  vec3 pp = nsp-ro;\n\n  col = mix(col, scol, smoothstep(90.0, 20.0, dot(pp, pp)));\n  \n  return col;\n}\n\nvec3 render1(vec3 ro, vec3 rd) {\n  vec3 skyCol = render0(ro, rd);\n  vec3 col = skyCol;\n\n  float nt    = rayMarch(ro, rd, .0); \n  if (nt < MAX_RAY_LENGTH) {\n    vec3 nsp    = ro + rd*nt;\n    vec3 nnor   = normal(nsp);\n\n    vec3 nref   = reflect(rd, nnor);\n    float nrt   = rayMarch(nsp, nref, 0.2);\n    vec3 nrcol  = render0(nsp, nref);\n    \n    if (nrt < MAX_RAY_LENGTH) {\n      vec3 nrsp   = nsp + nref*nrt;\n      vec3 nrnor  = normal(nrsp);\n      vec3 nrref  = reflect(nref, nrnor);\n      nrcol = boxCol(nrcol, nrsp, ro, nref, nrnor, render0(nrsp, nrref));\n    }\n\n    col = boxCol(col, nsp, ro, rd, nnor, nrcol);\n  }\n\n  return col;\n}\n\nvec3 effect(vec2 p) {\n  const float fov = tan(TAU/(6.-0.5));\n  const vec3 up = vec3(0.0, 1.0, 0.0);\n  const vec3 ro = vec3(0.0, 0.0, 5.0);\n  const vec3 la = vec3(0.0, 0.0, 0.);\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww));\n  vec3 vv = cross(ww,uu);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  vec3 col = render1(ro, rd);\n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p);\n  // Stupid tricks I learnt, saturates the colors\n  col -= 0.04*vec3(1.0, 2.0, 2.0);\n  col = aces_approx(col); \n  col = sRGB(col);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}