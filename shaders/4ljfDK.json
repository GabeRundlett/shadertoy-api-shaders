{
    "Shader": {
        "info": {
            "date": "1517249215",
            "description": "Bug wanders autonomously; use the buttons to take control",
            "flags": 32,
            "hasliked": 0,
            "id": "4ljfDK",
            "likes": 11,
            "name": "Controllable Hexapod",
            "published": 3,
            "tags": [
                "interactive",
                "robot",
                "bug",
                "gait"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 637
        },
        "renderpass": [
            {
                "code": "// \"Controllable Hexapod\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define REFLECT 0 // optional reflection\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrEllips2Df (vec3 p, vec2 r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nvec4 buDat1[6], buDat2[6];\nvec3 footPos[6], bdyPos, sunDir, qHit;\nfloat tCur, dstFar, bdyRadH, bdyRadV, legRad, legLen, bdyHt, walkDir;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvoid BugGeom ()\n{\n  vec3 fp;\n  float dr, dxz, dy, a;\n  for (int m = 0; m < 6; m ++) {\n    fp = footPos[m];\n    dr = length (fp.xz);\n    fp /= legLen;\n    a = pi * float (2 * m + 1) / 6.;\n    buDat1[m].xyz = bdyRadH * vec3 (cos (a), 0., sin (a));\n    buDat1[m].w = - atan (fp.z, fp.x);\n    dxz = 0.5 * dr + bdyHt * sqrt (1. / dot (fp, fp) - 0.25);\n    dy = sqrt (legLen * legLen - dxz * dxz);\n    buDat2[m].xy = vec2 (dxz, dy);\n    buDat2[m].z = atan (dxz, dy);\n    dxz = dr - dxz;\n    buDat2[m].w = atan (dxz, - sqrt (legLen * legLen - dxz * dxz));\n  }\n}\n\nfloat BugDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d;\n  dMin = dstFar;\n  for (int m = 0; m < 6; m ++) {\n    qq = p - buDat1[m].xyz;\n    qq.xz = Rot2D (qq.xz, buDat1[m].w);\n    q = qq;\n    q.xy = Rot2D (q.xy, buDat2[m].z);\n    q.y -= 0.5 * legLen;\n    d = PrCylDf (q.xzy, legRad * (0.75 - 0.5 * q.y / legLen), 0.5 * legLen);\n    DMINQ (1);\n    q.y -= 0.5 * legLen;\n    d = PrSphDf (q, 0.7 * legRad);\n    DMINQ (3);\n    q = qq;\n    q.xy = Rot2D (q.xy - buDat2[m].xy, buDat2[m].w);\n    q.y -= 0.5 * legLen;\n    d = PrCylDf (q.xzy, 0.5 * legRad * (0.75 - 0.5 * q.y / legLen), 0.5 * legLen);\n    DMINQ (2);\n  }\n  q = p;\n  q.xz = Rot2D (q.xz, pi / 6.);\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * atan (q.z, - q.x) / (2. * pi) + 0.5) / 6.));\n  q.xy -= vec2 (- bdyRadH - 0.1 * legRad, 0.1 * legRad);\n  d = PrSphDf (q, 1.6 * legRad);\n  DMINQ (3);\n  q = p;\n  d = PrEllips2Df (q.xzy, vec2 (bdyRadH + legRad, bdyRadV));\n  DMINQ (4);\n  q -= vec3 (0.7 * bdyRadH, 0.6 * bdyRadV, 0.);\n  d = PrEllips2Df (q.xzy, vec2 (0.4 * bdyRadH, 0.7 * bdyRadV));\n  DMINQ (5);\n  q.z = abs (q.z) + 0.1 * bdyRadH;\n  q.x -= -0.1 * bdyRadH;\n  q.yz = Rot2D (q.yz, -1.25 * pi);\n  q.xy = Rot2D (q.xy, -0.1 * pi);\n  q.y -= -0.65 * bdyRadH;\n  d = PrCylDf (q.xzy, 0.05 * bdyRadH * (0.55 + 0.7 * q.y / bdyRadH), 0.65 * bdyRadH);\n  DMINQ (6);\n  q = p;\n  q.z = abs (q.z) - 0.15 * bdyRadH;\n  q.xy -= bdyRadH * vec2 (0.95, 0.35);\n  d = PrSphDf (q, 0.1 * bdyRadH);\n  DMINQ (7);\n  dMin *= 0.95;\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  p -= bdyPos;\n  d = PrCylDf (p.xzy, 2.2, 1.);\n  if (d < 0.1) {\n    p.xz = Rot2D (p.xz, - walkDir);\n    dMin = BugDf (p);\n  } else dMin = d;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d, tol;\n  tol = 0.0005;\n  dHit = 0.;\n  for (int j = 0; j < 80; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < tol || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += min (0.05, 3. * h);\n    if (sh < 0.001) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  if (rd.y >= 0.) {\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * (1. - max (rd.y, 0.)) +\n       0.1 * pow (max (dot (rd, sunDir), 0.), 16.);\n    col = mix (col, vec3 (0.8), clamp (0.2 + Fbm2 (0.1 *\n       (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.001))) * rd.y, 0., 1.));\n  } else {\n    ro -= (ro.y / rd.y) * rd;\n    col = 0.7 * mix (vec3 (0.3, 0.4, 0.1), vec3 (0.4, 0.5, 0.2), Noisefv2 (256. * ro.xz)) *\n         (1. - 0.3 * Fbm2 (16. * ro.xz));\n    col *= (0.5 + 0.5 * max (dot (VaryNf (8. * ro, vec3 (0., 1., 0.), 2.), sunDir), 0.));\n  }\n  return col;\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, int wgSel)\n{\n  vec4 wgBx[4], w1, w2;\n  vec2 s;\n  float asp, d, w;\n  bool isCol;\n  asp = canvas.x / canvas.y;\n  w1 = vec4 (0.42 * asp, -0.35, 0.025, 0.);\n  w2 = vec4 (0.06, 0., 0., 0.);\n  wgBx[0] = w1 + w2.yxzw;\n  wgBx[1] = w1 - w2.yxzw;\n  wgBx[2] = w1 - w2;\n  wgBx[3] = w1 + w2;\n  for (int k = 0; k < 4; k ++) {\n    s = 0.5 * uv - wgBx[k].xy;\n    w = (length (s) - wgBx[k].z) * canvas.y;\n    isCol = false;\n    if (w < 1.5) {\n      isCol = (abs (w) < 1.5);\n      if (! isCol) {\n        if (k == 0) d = max (abs (s.x) + s.y, -2. * s.y);\n        else if (k == 1) d = max (abs (s.x), abs (s.y));\n        else if (k == 2) d = max (abs (s.y) - s.x, 2. * s.x);\n        else if (k == 3) d = max (abs (s.y) + s.x, -2. * s.x);\n        isCol = (d < 0.4 * wgBx[k].z);\n      }\n    }\n    if (isCol) col = mix (col, (k == wgSel) ? vec3 (1., 1., 0.5) : vec3 (1., 0.5, 0.3), 0.7);\n  }\n  return col;\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4;\n  if (idObj == 1) col4 = vec4 (0.8, 0., 0., 0.2) *\n     (0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.02, mod (16. * qHit.y, 1.)));\n  else if (idObj == 2) col4 = vec4 (0.8, 0.3, 0., 0.2) *\n     (0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.02, mod (16. * qHit.y, 1.)));\n  else if (idObj == 3) col4 = vec4 (0.7, 0.7, 0., 0.2);\n  else if (idObj == 4) col4 = vec4 (0.7, 0.6, 0., 0.3) *\n     (1. - 0.2 * Fbm2 (8. * qHit.xz)) *\n     (0.9 + 0.1 * SmoothBump (0.1, 0.9, 0.02, mod (8. * qHit.z, 1.)));\n  else if (idObj == 5) col4 = vec4 (0., 0.8, 0.1, 0.3) * mix (1.,\n     0.2 + 0.8 * smoothstep (0.01, 0.02, abs (qHit.y)), step (0.3 * bdyRadH, qHit.x));\n  else if (idObj == 6) col4 = vec4 (0.8, 0., 0.8, 0.2) *\n     (0.5 + 0.5 * SmoothBump (0.2, 0.8, 0.05, mod (32. * qHit.y, 1.)));\n  else if (idObj == 7) col4 = mix (vec4 (0.1, 0.1, 0.8, 0.1), vec4 (0.8, 0.8, 0.8, 0.3),\n     smoothstep (0.03, 0.035, length (vec2 (qHit.y - 0.02, qHit.z))));\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, ror;\n  float dstObj, sh;\n  BugGeom ();\n  dstObj = ObjRay (ro, rd);\n#if REFLECT\n  if (dstObj >= dstFar && rd.y < 0.) {\n    ror = ro + (- ro.y / rd.y) * rd;\n    if (length (mod (0.4 * ror.xz + 0.5, 1.) - 0.5) < 0.45) {\n      rd = reflect (rd, vec3 (0., 1., 0.));\n      ro = ror + 0.01 * rd;\n      dstObj = ObjRay (ro, rd);\n    }\n  }\n#endif\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = ObjCol ();\n    sh = ObjSShadow (ro, sunDir);\n    col = col4.rgb * (0.3 + 0.7 * sh * max (dot (vn, sunDir), 0.)) +\n       col4.a * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.);\n  } else {\n    sh = 1.;\n    if (rd.y < 0. && - ro.y / rd.y < dstFar) sh = ObjSShadow (ro + (- ro.y / rd.y) * rd, sunDir);\n    col = sh * BgCol (ro, rd);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  int wgSel;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  bdyRadV = 0.3;\n  legLen = 0.85;\n  legRad = 0.08;\n  for (int k = 0; k < 6; k ++) {\n    stDat = Loadv4 (k);\n    footPos[k] = stDat.xyz;\n  }\n  stDat = Loadv4 (6);\n  bdyPos = stDat.xyz;  walkDir = stDat.w;\n  stDat = Loadv4 (9);\n  bdyRadH = stDat.y;  bdyHt = stDat.z;\n  stDat = Loadv4 (10);\n  az = stDat.x;  el = stDat.y;  wgSel = int (stDat.z);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 5.));\n  ro = vec3 (bdyPos.x, 0.5 * bdyPos.y, bdyPos.z) + vuMat * vec3 (0., 0., -10);\n  dstFar = 30.;\n  sunDir = normalize (vec3 (1., 2., -1.));\n  col = ShowScene (ro, rd);\n  col = ShowWg (uv, canvas, col, wgSel);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrEllips2Df (vec3 p, vec2 r)\n{\n  return (length (p / r.xxy) - 1.) * min (r.x, r.y);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Controllable Hexapod\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 footPos[6], bdyPos;\nfloat bdyRadH, bdyHt, footSpeedV, footDir, stepCount, stepLim, \n   wkPhase, wkChange, walking, walkDir, turnDir, turnDirN;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvoid Step ()\n{\n  vec2 b;\n  float stepLimM, walkSpeed, turnSpeed, c, s, u, mm, a;\n  stepLimM = 64.;\n  walkSpeed = 0.8 / stepLimM;\n  turnSpeed = 0.5 * walkSpeed;\n  if (stepCount == 0.) {\n    if (wkChange != 0. && (wkPhase == 0. || wkPhase == 2.)) {\n      ++ wkPhase;\n      wkChange = 0.;\n    }\n    if (wkPhase == 2. && turnDir != turnDirN) {\n      ++ wkPhase;\n      wkChange = 1.;\n    }\n    if (wkPhase == 1. || wkPhase == 4.) walking = 1. - walking;\n    stepLim = stepLimM;\n    if (wkPhase == 1. || wkPhase == 3.) stepLim *= 0.5;\n    else if (wkPhase == 0. || wkPhase == 4.) stepLim = 0.;\n    if (stepLim > 0.) {\n      footSpeedV = 0.6 * bdyHt / (stepLim * 0.5);\n      if (wkPhase == 1. || wkPhase == 3.) footSpeedV *= 0.5;\n    }\n    if (wkPhase == 1.) {\n      turnDir = turnDirN;\n      footDir = 1.;\n    } else footDir = - footDir;\n    if (wkPhase == 4.) {\n      wkPhase = 0.;\n      turnDir = 0.;\n    }\n    if (wkPhase == 1. || wkPhase == 3.) ++ wkPhase;\n    stepCount = stepLim;\n  }\n  if (stepLim > 0.) {\n    -- stepCount;\n    if (turnDir == 0.) {\n      bdyPos.xz += walkSpeed * vec2 (cos (walkDir), sin (walkDir));\n    } else {\n      walkDir = mod (walkDir + turnSpeed * turnDir, 2. * pi);\n      c = cos (turnSpeed * turnDir);\n      s = sin (turnSpeed * turnDir);\n    }\n    for (int m = 0; m < 6; m ++) {\n      mm = float (m);\n      u = footDir * (2. * mod (mm, 2.) - 1.);\n      if (u > 0.) footPos[m].y += footSpeedV * sign (stepLim * 0.5 - 0.5 - stepCount);\n      if (turnDir == 0.) {\n        footPos[m].x += u * walkSpeed;\n      } else {\n        a = pi * (2. * mm + 1.) / 6.;\n        b = bdyRadH * vec2 (cos (a), sin (a));\n        footPos[m].xz = Rot2Cs (footPos[m].xz + b, vec2 (c, u * s)) - b;\n      }      \n    }\n  }\n}\n\nvoid Init ()\n{\n  float footDist, a;\n  bdyRadH = 0.8;\n  bdyHt = 0.6;\n  bdyPos = vec3 (0., bdyHt, 0.);\n  footDist = 0.9;\n  for (int m = 0; m < 6; m ++) {\n    a = pi * (2. * float (m) + 1.) / 6.;\n    footPos[m].xz = footDist * vec2 (cos (a), sin (a));\n    footPos[m].y = - bdyHt;\n  }\n  footSpeedV = 0.;\n  footDir = 0.;\n  stepCount = 0.;\n  stepLim = 0.;\n  wkPhase = 0.;\n  wkChange = 0.;\n  walking = 0.;\n  walkDir = - 0.5 * pi;\n  turnDir = 0.;\n  turnDirN = 0.;\n}\n\nvoid SetMode (int m)\n{\n  if (m == 0) {\n    turnDirN = 0.;\n    if (walking == 0.) wkChange = 1.;\n  } else if (m == 1) {\n    turnDirN = 0.;\n    if (walking != 0.) wkChange = 1.;\n  } else if (m == 2) {\n    turnDirN = 1.;\n    if (turnDir != turnDirN && walking == 0.) wkChange = 1.;\n  } else if (m == 3) {\n    turnDirN = -1.;\n    if (turnDir != turnDirN && walking == 0.) wkChange = 1.;\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[4], mPtr, mPtrP, stDat, w1, w2;\n  vec2 canvas, iFrag;\n  float tCur, asp, el, az, autMode, tChMode;\n  int pxId, wgSel, wgReg, im;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 12) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  wgReg = -2;\n  doInit = false;\n  autMode = 1.;\n  tChMode = tCur;\n  if (iFrame <= 5) {\n    mPtrP = mPtr;\n    az = 0.;\n    el = 0.;\n    wgSel = -1;\n    doInit = true;\n  } else {\n    for (int k = 0; k < 6; k ++) {\n      stDat = Loadv4 (k);\n      footPos[k] = stDat.xyz;\n    }\n    stDat = Loadv4 (6);\n    bdyPos = stDat.xyz;  walkDir = stDat.w;\n    stDat = Loadv4 (7);\n    walking = stDat.x;  footDir = stDat.y;  turnDir = stDat.z;  turnDirN = stDat.w;\n    stDat = Loadv4 (8);\n    stepCount = stDat.x;  stepLim = stDat.y;  wkPhase = stDat.z;  wkChange = stDat.w;\n    stDat = Loadv4 (9);\n    footSpeedV = stDat.x;  bdyRadH = stDat.y;  bdyHt = stDat.z;  tChMode = stDat.w;\n    stDat = Loadv4 (10);\n    az = stDat.x;  el = stDat.y;  wgSel = int (stDat.z);  autMode = stDat.w;\n    mPtrP = Loadv4 (11);\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    w1 = vec4 (0.42 * asp, -0.35, 0.025, 0.);\n    w2 = vec4 (0.06, 0., 0., 0.);\n    wgBx[0] = w1 + w2.yxzw;\n    wgBx[1] = w1 - w2.yxzw;\n    wgBx[2] = w1 - w2;\n    wgBx[3] = w1 + w2;\n    for (int k = 0; k < 4; k ++) {\n      if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) < wgBx[k].z) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n    az = 0.02 * pi * tCur;\n    el = -0.2 * pi + 0.1 * pi * sin (0.011 * 2. * pi * tCur);\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {   \n      az = 2. * pi * mPtr.x;\n      el = -0.1 * pi + pi * mPtr.y;\n      el = clamp (el, -0.4 * pi, -0.1 * pi);\n    }\n  } else if (mPtrP.z <= 0.) {\n    autMode = 0.;\n    tChMode = tCur + 10.;\n    SetMode (wgSel);\n  }\n  if (tCur > tChMode) autMode = 1.;\n  if (autMode != 0. && tCur > tChMode) {\n    tChMode = tCur + 2.;\n    im = int (100. * Hashff (17. * tChMode));\n    tChMode += 3. * Hashff (23. * tChMode);\n    if (im < 60) im = 0;\n    else if (im < 75) im = 2;\n    else if (im < 90) im = 3;\n    else im = 1;\n    SetMode (im);\n  }\n  if (doInit) Init ();\n  else Step ();\n  if (pxId < 6) {\n    for (int k = 0; k < 6; k ++) {\n      if (pxId == k) stDat = vec4 (footPos[k], 0.);\n    }\n  }\n  else if (pxId == 6) stDat = vec4 (bdyPos, walkDir);\n  else if (pxId == 7) stDat = vec4 (walking, footDir, turnDir, turnDirN);\n  else if (pxId == 8) stDat = vec4 (stepCount, stepLim, wkPhase, wkChange);\n  else if (pxId == 9) stDat = vec4 (footSpeedV, bdyRadH, bdyHt, tChMode);\n  else if (pxId == 10) stDat = vec4 (az, el, float (wgSel), autMode);\n  else if (pxId == 11) stDat = mPtr;\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}