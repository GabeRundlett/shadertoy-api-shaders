{
    "Shader": {
        "info": {
            "date": "1686278356",
            "description": "Each color channel is a different sphere rotating on a different axis.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtGSRt",
            "likes": 3,
            "name": "Fork 3 Rotating dontriskit 209",
            "published": 3,
            "tags": [
                "sphere",
                "rotation",
                "roll",
                "yaw",
                "pitch",
                "3drotation"
            ],
            "usePreview": 0,
            "username": "dontriskit",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "const float PI = 3.141592; \nconst float R = 1.;    // sphere radius\nconst float r = 0.09;  // circles radius\nconst float d = 0.1;   // circles distance\nconst vec3 a0 = vec3(0.); // starting angles (pitch, yaw, roll)\nconst vec3 speed = vec3(.5, .5, .5); // pitch, yaw, roll\n\nvec3 pitch(vec3 uv, float rad){\n    float c = cos(rad);\n    float s = sin(rad);\n    return vec3(uv.x,\n                c*uv.y - s*uv.z,\n                s*uv.y + c*uv.z);\n}\n\nvec3 yaw(vec3 uv, float rad){\n    float c = cos(rad);\n    float s = sin(rad);\n    return vec3(c*uv.x + s*uv.z,\n                uv.y,\n               -s*uv.x + c*uv.z);\n}\n\nvec3 roll(vec3 uv, float rad){\n    float c = cos(rad);\n    float s = sin(rad);\n    return vec3(c*uv.x - s*uv.y,\n                s*uv.x + c*uv.y,\n                uv.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    float z = sqrt( max(0., R*R - (uv0.x)*(uv0.x) - (uv0.y)*(uv0.y)) ); \n    vec3 uv = vec3(uv0, z); // virtually creating a Z axis\n    \n    vec3 angle = a0 + vec3(speed * iTime);\n    vec3 uv_r = vec3(pitch(uv, angle.x));\n    vec3 uv_g = vec3(  yaw(uv, angle.y));\n    vec3 uv_b = vec3( roll(uv, angle.z));\n    \n    float lr = length(mod(uv_r + r, 2.*d) - r);\n    float lg = length(mod(uv_g + r, 2.*d) - r);\n    float lb = length(mod(uv_b + r, 2.*d) - r);\n    vec3 l = vec3(lr, lg, lb);\n\n    vec3 pixel = smoothstep(3./iResolution.y, 0., l-r) * smoothstep(0., 3./iResolution.y, R - length(uv.xy) );\n    fragColor = vec4(pixel, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}