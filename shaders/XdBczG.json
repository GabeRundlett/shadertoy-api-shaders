{
    "Shader": {
        "info": {
            "date": "1492506856",
            "description": "mouse to tune cyclicity scale.\nTexture chosen in BufA:main.   You can pause then drag mouse to keep a texture.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "XdBczG",
            "likes": 4,
            "name": "autocorrelation",
            "published": 3,
            "tags": [
                "noise",
                "autocorrelation"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 670
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if (max(U.x,U.y)/iResolution.y<.2) {              // bottom-left snippet\n        O = texture(iChannel0,U/iResolution.y/.2);\n        if (max(U.x,U.y)+.5>=floor(.2*iResolution.y)) O=vec4(1,0,0,0);\n        return; \n    }\n    vec2 M = iMouse.xy; if (length(M)<10.) M = vec2(iResolution.x); // cyclicity scale\n\n    float N = M.x, s=0., \n          m = texelFetch(iChannel0,ivec2(0,U.y), 0).w, // mean for the line on [0,N[\n          v = texelFetch(iChannel0,ivec2(0,U.y), 0).z; // variancen for the line on [0,N[\n    \n    for( float x = 0.; x < N; x++)\n        s +=   ( texelFetch(iChannel0,ivec2(mod(x+N/2.,N),U.y), 0).x - m )\n             * ( texelFetch(iChannel0,ivec2(mod(x+U.x ,N),U.y), 0).x - m );\n \n    s /= N;                                            // covariance\n    s /= v;                                            // correlation\n    s = sqrt(s);                                       // sqrt( correlation ) \n    \n    O = vec4(sqrt(s));                                 // gamma correction for visual display\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash( uint n ) { // from https://www.shadertoy.com/view/llGSzw  Base: Hugo Elias. ToFloat: https://iquilezles.org/articles/sfrand\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.;\n}\n\nvec4 noise(vec2 U) {\n    U-=.5; \n    return vec4( hash(uint(U.x+iResolution.x*U.y)) );  // white noise\n}\n\nvec4 bluenoise(vec2 U) {                               // blue noise\n#define V(i,j)  noise(U+vec2(i,j))\n  //U=floor(U/8.); \n    vec4 N = 8./9.* noise( U ) \n           - 1./9.*( V(-1,-1)+V(0,-1)+V(1,-1) +V(-1,0)+V(1,0) +V(-1,1)+V(0,1)+V(1,1) );  \n    return N*2. + .5;   // or *1 to avoid saturation at the price of low contrast\n}\n\nvec4 image(vec2 U, sampler2D T) {\n    return texture(T, U/iResolution.xy);                // image\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float t = mod(floor(iTime),5.);\n    \n    O =   t==0. ? noise(U)                       // white noise\n        : t==1. ? bluenoise(U)                   // blue noise\n        : t==2. ? image(U, iChannel0)            // image\n        : t==3. ? image(U, iChannel1)            // image\n        :         image(U, iChannel2);           // image\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// copy A in B, store line average in B[0,y].w and variance in B[0,y].z\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = texelFetch(iChannel0, ivec2(U), 0); // copy A\n    \n    if (U.x==.5) {\n    \tvec2 M = iMouse.xy; if (length(M)<10.) M = vec2(iResolution.x); // cyclicity scale\n    \tfloat N = M.x, t,m1=0.,m2=0.;\n\n        for( float x = 0.; x < N; x++) {\n            t = texelFetch(iChannel0,ivec2(x,U.y), 0).x;\n        \tm1 += t;           // 1st moment\n            m2 += t*t;         // 2nd moment\n        }\n\n        m1 /= N; m2 /= N;\n        O.w = m1;              // mean on [0,N[\n        O.z = (m2-m1*m1);      // variance on [0,N[\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}