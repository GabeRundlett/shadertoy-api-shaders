{
    "Shader": {
        "info": {
            "date": "1456901152",
            "description": "Showing how polynomial smin() is not associative, but how exponential smin() is. Yellow: smin(smin(a,b),c). Blue: smin(a,smin(b,c). Gray: min(min(a,b),c).",
            "flags": 0,
            "hasliked": 0,
            "id": "XdyGWt",
            "likes": 23,
            "name": "smin - associative",
            "published": 3,
            "tags": [
                "2d",
                "smin",
                "smoothmin",
                "smoothminimum",
                "minimum"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1927
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2016 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Showing how polynomial smin() is not associative, but how\n// the exponential smin() is:\n//\n// Yellow: smin(smin(a,b),c)\n// Blue:   smin(a,smin(b,c)\n// Gray:   min(min(a,b),c).\n//\n// When the polynomial smin() is used, the yellow and blue graphs don't match, showing\n// it's not associative. However, when the exponential is used, the blue graph perfectly\n// overalps the yellow one, showing it is associative.\n\n\n// more info: \n//\n// https://iquilezles.org/articles/smin\n// https://iquilezles.org/articles/distance\n\n\n\nfloat smin( float a, float b )\n{\n    if( fract(iTime/3.0)>0.5 )\n    {\n        // polynomial \n        const float k = 0.5;\n        float h = clamp(0.5+0.5*(b-a)/k,0.0,1.0);\n        return mix(b,a,h) - k*h*(1.0-h);\n    }\n    else\n    {\n        // exponential\n        const float k = 4.0/0.5;\n        return -log2(exp2(-k*a)+exp2(-k*b))/k;\n    }\n}\n\nfloat ya( float x ) { return 0.8*sin(5.0*x); }\nfloat yb( float x ) { return exp(-5.0*x*x); }\nfloat yc( float x ) { return 0.5 + 0.5*x; }\n\nfloat func1( float x ) { return  min( min(ya(x),yb(x)),yc(x));}\nfloat func2( float x ) { return smin(smin(ya(x),yb(x)),yc(x));}\nfloat func3( float x ) { return smin(ya(x),smin(yb(x), yc(x)));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec3 tot = vec3(0.0);\n    \n    float t = 3.0/iResolution.y;\n    float eps = 0.0001;\n    \n    for( int i=0; i<4; i++ )\n    {\n        vec2  p = (-iResolution.xy + 2.0*(fragCoord+vec2(float(i)/8.0,0.0)))/iResolution.y;\n        \n        vec3 col = vec3( 0.13 );\n\n        {\n        float y = func1( p.x );\n        float dy = (y - func1( p.x+eps ))/eps;\n        float d = abs(p.y-y) / sqrt(1.0+dy*dy);\n        col = mix( col, vec3(0.5,0.5,0.5), 1.0-smoothstep( 0.0, t, d ) );\n        }\n        {\n        float y = func2( p.x );\n        float dy = (y - func2( p.x+eps ))/eps;\n        float d = abs(p.y-y) / sqrt(1.0+dy*dy);\n        col = mix( col, vec3(1.0,1.0,0.0), 1.0-smoothstep( 0.0, t, d ) );\n        }\n        {\n        float y = func3( p.x );\n        float dy = (y - func3( p.x+eps ))/eps;\n        float d = abs(p.y-y) / sqrt(1.0+dy*dy);\n        col = mix( col, vec3(0.0,0.3,0.8), 1.0-smoothstep( 0.0, t, d ) );\n        }\n        \n        tot += col;\n    }\n    \n    tot /= 4.0;\n    \n    fragColor = vec4( tot, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}