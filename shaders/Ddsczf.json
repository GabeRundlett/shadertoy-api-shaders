{
    "Shader": {
        "info": {
            "date": "1687058123",
            "description": "This shader uses the random() and noise() functions to create Perlin noise, which is then used to calculate the colour of each pixel.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ddsczf",
            "likes": 0,
            "name": "My Perlin noise",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "saboofa",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "float random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix(mix(random(i + vec2(0.0,0.0)), \n                   random(i + vec2(1.0,0.0)), u.x),\n               mix(random(i + vec2(0.0,1.0)), \n                   random(i + vec2(1.0,1.0)), u.x), u.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 st = fragCoord.xy / iResolution.xy;\n    vec3 color = vec3(0.0);\n\n    st *= 10.0;\n    float n = 0.0;\n    for (int i = 0; i < 5; i++) {\n        n += noise(st);\n        st *= 2.0;\n    }\n    color.r = sin(n * 2.0 * 3.14159) * 0.5 + 0.5;\n    color.g = sin((n + 0.5) * 2.0 * 3.14159) * 0.5 + 0.5;\n    color.b = sin((n + 1.0) * 2.0 * 3.14159) * 0.5 + 0.5;\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}