{
    "Shader": {
        "info": {
            "date": "1493452479",
            "description": "BuildMIPmap in GLSL.\n\nevery 8 sec, show the pyramid.",
            "flags": 32,
            "hasliked": 0,
            "id": "ld2yzd",
            "likes": 1,
            "name": "video MIPmap",
            "published": 3,
            "tags": [
                "mipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 612
        },
        "renderpass": [
            {
                "code": "// --- reconstruct MIPmap value\n\nvec4 mipmap(vec2 U, float l) {\n    vec2 VR = texelFetch(iChannel0, ivec2(0), 0).zw,     // video resolution\n         SR = iResolution.xy;\n    U = (U*SR).yx / SR ;                                 // rotate back to horizontal\n    float z = exp2(-floor(l));\n#define M(z)  texture( iChannel0, U*(z) + vec2( VR.y/SR.x *2.*(1.-(z)), 0) )\n    return mix( M(z), M(z/2.), fract(l) );\n}\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= iResolution.xy;\n    float t = mod(iTime,16.); t = min(t,16.-t);    // animate LOD\n    \n    if (t>7.)\n        O = texture(iChannel0, U);                       // display MIPmap pyramid\n    else {\n        O = mipmap(U,t);                                 // display MIPmapped image\n\n        U = (U*iResolution.xy) - texelFetch(iChannel0, ivec2(0), 0).zw;\n        if (max(U.x,U.y)>0.) O -=O;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- source image\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 VR = iChannelResolution[0].xy;   // video resolution ( 400 x 300 )\n    if ( iResolution.y < 200. ) VR /= 2.; // for icon view\n    \n    O = texture(iChannel0, U / VR );\n    \n    if (U==vec2(.5)) O.zw = VR;           // keep video resolution\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- build MIPmap pyramid\n// ( note that there is 1 frame delay per MIPmap level )\n\n#define T(i,j) texelFetch(iChannel0, ivec2(2.*U)+ivec2(i,j),0)\n//#define T(i,j) texelFetch(iChannel0, ivec2(2.*U.yx)+ivec2(i,j),0) // fun compact variant\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 VR = texelFetch(iChannel1, ivec2(0), 0).zw; // video resolution\n    \n    if (U.x<VR.y) \n        O = texelFetch(iChannel1, ivec2(U.yx), 0);   // original image (rotated to vertical to save space)\n    else {\n        U.x -= VR.y;                                 // filtering cascade\n        O =   ( T(0,0)+T(1,0)+T(0,1)+T(1,1) ) /4.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}