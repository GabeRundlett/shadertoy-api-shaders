{
    "Shader": {
        "info": {
            "date": "1701714899",
            "description": "A soft clip that generalizes 3 commonly used soft clip functions (tanh, exp, Reinhard).",
            "flags": 0,
            "hasliked": 0,
            "id": "dt3fWl",
            "likes": 12,
            "name": "GeneralizedSoftClip",
            "published": 3,
            "tags": [
                "function",
                "tonemapping",
                "clip",
                "transfer"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n// https://twitter.com/Mirko_Salm\n\n/*\n    A soft clip that generalizes 3 commonly used soft clip functions (tanh, exp, Reinhard):\n    \n                   1\n    1 + ------------------------\n        (1 - exp(x / s)) * s - 1\n    \n    \n    s = 1/2 ->   tanh(x) // blue\n    \n    s =   1 -> 1-exp(-x) // green\n    \n    s = inf ->   x/(x+1) // red\n    \n    \n    related: \n    \n            https://www.shadertoy.com/view/wdtfRS | SoftClip\n            https://www.shadertoy.com/view/tltyR2 | SoftClip2\n*/\n\nfloat ExpClip (float x) { return 1.0 - exp(-x); }\nfloat Reinhard(float x) { return x / (x + 1.0); }\n\n// s: [0.5, inf] | s = 0.5 -> tanh(x) | s = 1.0 -> 1-exp(-x) | s = inf -> x/(x+1)\nfloat GeneralizedSoftClip(float x, float s)\n{\n    return 1.0 + 1.0 / ((1.0 - exp(x / s)) * s - 1.0);\n}\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{    \n    vec2 tex = uv0;\n    tex -= iResolution.yy * vec2(0.125, 0.25);\n    tex /= iResolution.xx * 0.25;\n\n    vec3 col = vec3(0.0);\n    \n\tcol = mix(vec3(1.0), vec3(0.9  ),  Grid(tex.xy * 4.0, 0.0));        \n\tcol = mix(      col, vec3(0.5  ),  Grid(tex.xy * 1.0, 0.0));        \n\tcol = mix(      col, vec3(0.125), Cross(tex.xy * 1.0, 0.0)); \t\n    \n    \n    // relevant plotting code:\n    \n    // grey - special case references\n    col = mix(col, vec3(0.5), Graph(    tanh(tex.x) -tex.y, 4.) * 0.35);  \n    col = mix(col, vec3(0.5), Graph( ExpClip(tex.x) -tex.y, 4.) * 0.35);  \n    col = mix(col, vec3(0.5), Graph(Reinhard(tex.x) -tex.y, 4.) * 0.35);      \n    \n    // blue - tanh\n    col = mix(col, vec3(0.125, 0.5, 1.0), Graph(GeneralizedSoftClip(tex.x,    0.5) -tex.y, 1.));  \n    // green - exp\n    col = mix(col, vec3(0.125, 1.0, 0.5), Graph(GeneralizedSoftClip(tex.x,    1.0) -tex.y, 1.));\n    // red - Reinhard\n    col = mix(col, vec3(1.0, 0.125, 0.5), Graph(GeneralizedSoftClip(tex.x, 1024.0) -tex.y, 1.));\n    \n    // black - animated curve\n    {\n        float t = clamp(sin(iTime) * 0.5 + 0.5, 0.0, 1.0);\n        \n        float s = clamp(1.0/(1.0 - t) - 0.5, 0.5, 4096.0);\n        \n        col = mix(col, vec3(0.0, 0.0, 0.0), Graph(GeneralizedSoftClip(tex.x, s) -tex.y, 0.25));\n    }\n    \n    #if 1\n    vec2 s = (uv0/iResolution.xy*2.0-1.0);\n    s.x = 1.0-Pow2(s.x);    s.y = 1.0-Pow2(s.y);\n    col *= mix(1.0, 0.4, Pow2(1.0-sqrt(s.x*s.y)));\n    #endif\n    \n    outCol = vec4(GammaEncode(clamp01(col)), 1.0);    \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define Frame float(iFrame)\n#define Time iTime\n#define PixelCount iResolution.xy\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define rsqrt inversesqrt\n\nconst float Pi = 3.14159265359;\nconst float Pi05 = Pi * 0.5;\nconst float Pi2  = Pi * 2.0;\nconst float RcpPi= 1.0 / Pi;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nvec2 GammaEncode(vec2 x) {return pow(x, vec2(1.0 / 2.2));}\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\nvec4 GammaEncode(vec4 x) {return pow(x, vec4(1.0 / 2.2));}\n\nfloat ddxyLen(float v) { return length(vec2(dFdx(v), dFdy(v))); }\nfloat ddxyRcpLen(float v) { return rsqrt( Pow2(dFdx(v)) + Pow2(dFdy(v)) ); }\n\n\nfloat rescale(float v) { return v * ddxyRcpLen(v); }\n\nfloat Graph(float f, float b)\n{\n    return clamp01(1.0 - (abs(rescale(f))-0.5-b)); \n}\n\n\nfloat Line(float u, float b) { return Graph(u, b); }\nfloat Lines(float u, float b) { return Graph(sin(u * Pi), b); }\n\nfloat Grid(vec2 uv, float b)\n{\n    float xl = Lines(uv.x, b);    \n    float yl = Lines(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Cross(vec2 uv, float b)\n{\n    float xl = Line(uv.x, b);    \n    float yl = Line(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Dot(vec2 sp, vec2 dp, float dr)\n{\n    float v = length(sp - dp) - dr;\n    \n    if(v > dr) return 0.0;\n    \n    v *= ddxyRcpLen(v);\n    v = 1.0 - clamp(v * 1.0, 0.0, 1.0);\n    \n    return v;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}