{
    "Shader": {
        "info": {
            "date": "1585000959",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "tdfcRS",
            "likes": 15,
            "name": "Day 96",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 95\" by jeyko. https://shadertoy.com/view/wssyDM\n// 2020-03-23 18:49:46\n\n// Fork of \"Day 94\" by jeyko. https://shadertoy.com/view/tdXcWM\n// 2020-03-23 10:08:54\n\n// thx to evvvvil and nusan for some of the techniques here\n// radial blur and chromatic abberation in this buffer\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n\n    // Radial blur\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5),3.)*0.1;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),2.)*4.3;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.97;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor = radial*85.; \n    //fragColor.r *= 1. + uv.x*0.8;\n    //fragColor.g *= 1. + uv.y*0.7;\n    //fragColor.b *= 1. + uv.y*0.7;\n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.4);\n    //1fragColor *= 18.;\n    \n    \n    fragColor = max(fragColor, 0.);\n    fragColor = pow(fragColor, vec4(0.4545 + dot(uvn,uvn)*0.2));\n    fragColor *= 1. - dot(uvn,uvn)*0.9\n        ;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define dmin(a,b) a.x<b.x ? a : b\n\n#define pi (acos(-1.))\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x)) \n#define pmod(p,x) mod(p,x) - 0.5*x\n\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\nvec3 glow = vec3(0);\nvec3 glowb = vec3(0);\nvec3 att = vec3(1);\nfloat side = 1.;\n\nfloat sdBox(vec3 p, vec3 s){\n\tp = abs(p) - s;\n    return length(max(p,0.0)) + min(max(p.x, max(p.y,p.z)),0.);\n}\n\n\nvec2 o(vec3 p){\n    vec2 d = vec2(10e7);\n    \n    //p.xy *= rot(0.25*pi);\n    p = abs(p);\n    float dBox = sdBox(p, vec3(0.1,0.5,0.7));\n    p.x -= 1.75;\n    float dBoxb = sdBox(p, vec3(0.08,0.8,.5));\n    \n    p = abs(p);\n    p.y -= 1.45;\n    \n    p.xy *= rot(0.5*pi);\n    float dBoxc = sdBox(p, vec3(0.16, 0.15,6.5));\n    \n    \n    p.y -= 0.4;\n    p.z -= 0.7;\n    p = abs(p);\n    \n    p.x -= 0.05;\n    p.z -= 0.15;\n    float dBoxg = max(p.x,p.z);\n\t\n    d = dmin(d, vec2(dBox, 5.));\n    d = dmin(d, vec2(dBoxb, 21.));\n    d = dmin(d, vec2(dBoxc, 7.));;\n    d = dmin(d, vec2(dBoxg, 21.));\n    \n    return d;\n}\nfloat mmmm;\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n\n    vec3 q = p;\n    float wave = pow(abs(sin(q.z*0.2+iTime*1.5)), 200.);\n    float waveb = pow(abs(sin( 0.75*(q.z*0.2+iTime))), 400.);\n    float modD = 32.;\n    \n    p.xz -= modD*0.5;\n    vec2 id = floor(p.xz/modD);\n    p.xz = pmod(p.xz,modD);\n    p.z -= modD*0.2;\n    \n    \n    float mt = sin(iTime*1. + id.x + sin(id.y)*0.4 + id.y*0.4);\n    mmmm = pow(abs(mt), 0.125)*sign(mt)*0.2;\n    \n    vec3 cc = vec3(0.7 + mmmm*2.,.9,0.9);\n    for(float i = 0.; i< 5.; i++){\n\n        if(i < 3.)\n        \tif(p.x < p.z) {p.xz = p.zx;}\n\n    \tp = abs(p);        \n        p.xy *= rot(0.25*pi);\n        p.x -= 1.5 ;\n        p.t -= 3.5  ;\n        p.z -= 4.5;\n        if(i == 3.){\n            vec3 z = p;\n            z += 0.4;\n            z = abs(z);\n            z -= waveb*0.2;\n            z = abs(z);\n            float dp = max(z.x,z.y) - 0.05;\n            d = dmin(d, vec2(abs(dp) + 0.01, 0.));\n            dp = max(dp, 0.);\n            vec3 ccc = pal(1.,1.,vec3(0.8,2.2,2.5),0.5,0.5 + iTime + q.z);\n            \n            \n            //glowb += 0.001/(0.001 + dp*dp*6.)*ccc*att;\n            //glowb += 0.155/(0.40 + dp*dp*dp*dp*(10000. - wave*10000.))*ccc*att;\n            //glowb += 0.155/(0.40 + dp*dp*dp*dp*(10000. - 5000.))*ccc*att;\n            glowb += 0.155/(1.80 + dp*dp*dp*dp*(10000. - 5000.))*ccc*att;\n            //glowb += 0.001/(0.001 + dp*dp*6.)*pal(0.5,0.5,vec3(0.87,0.4,0.5), 0.5,3.5 + 1.*iTime)*att;\n        \n        }\n        \n    }\n    \n    \n    float md = 0.23;\n    vec3 h = p;\n    h = pmod(h, md);\n    float dpg = sdBox(h,vec3(md*0.1));\n    //d = dmin(d, vec2(abs(dpg) + 0.2, 0.));\n    dpg = max(dpg, 0.);\n    //glowb += 0.001/(0.01 + dpg*dpg*20.)*pal(0.5,0.5,vec3(0.87,0.4,0.5), 0.5,3.5 + 0.*iTime)*att*wave;\n    glowb += 0.001/(0.01 + dpg*dpg*20.)*pal(0.5,0.5,vec3(0.87,0.4,0.5), 0.5,3.5 + 0.*iTime)*att*wave;\n    \n    \n    \n    \n    //p.x += 2.;\n    //p.x -= sin(iTime);\n    \n    vec2 dO = o(p);\n    \n    float dBall = length(p) - 0.1;\n    \n    d = dmin(d, dO);\n    \n    q = abs(q);\n    q.y -=6.;\n    \n    //d = dmin(d, vec2(abs(q.y) - 0.1, 21.));\n    d.x *= 1.;\n    d.x *= 0.7;\n    glow += exp(-max(d.x, 0.)*10.)*att*2.;\n    \n    return d;\n}\n\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d = map(ro);\n    \n    if(d.x < 0.3)\n        ro += rd*0.05;\n    \n    hit = false; t = 0.; p = ro;\n    \n    for(float i = 0.; i< 150.; i++){\n    \td = map(p);\n        d.x *= side;\n        if(d.x < 0.0001){\n        \thit = true;\n        }\n        if(t > 40.){\n        \tbreak;\n        }\n    \tt += d.x;\n        p = ro + rd*t;\n    }\n    return d;\n}\n\nvec3 getRd(vec3 ro,vec3 lookAt,vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up = normalize(cross(dir, right));\n\treturn normalize(dir + (right*uv.x + up*uv.y)*0.6);\n}\nvec3 getRdIso(inout vec3 ro,vec3 lookAt,vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n    \n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up = normalize(cross(dir, right));\n    \n    ro += (right*uv.x + up*uv.y)*6.;\n\treturn dir;\n}\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.0001,0.);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\nvec3 getNormala(vec3 p){\n\tvec2 t = vec2(0.0004,0.);\n\treturn normalize(-vec3(\n    \tmap(p - t.xyy).x - map(p + t.xyy).x ,\n    \tmap(p - t.yxy).x - map(p + t.yxy).x ,\n    \tmap(p - t.yyx).x - map(p + t.yyx).x \n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\tvec2 uvn = uv;\n    uv *= 1. + dot(uv,uv)*0.7;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0);\n    \n    ro.xy += vec2(cos(iTime*0.6), sin(iTime*0.5)*0.1)*0.4;\n    \n    \n    float mp = 0.5;\n    ro.xy -= mp;\n    ro.x += iMouse.x/iResolution.y*mp;\n    ro.y += iMouse.y/iResolution.y*mp;\n    \n    ro.z -= 10.;\n    ro.z += iTime*5.;\n    \n    vec3 lookAt = vec3(0,0,ro.z + 3.3);\n    \n    vec3 rd = getRd(ro, lookAt, uv);\n    rd.xy *= rot(-cos(iTime*0.75)*0.1);\n    \n    \n    vec3 p; float t; bool hit; float tA;\n\tfloat tF;\n    side = sign(map(ro).x);\n    vec2 d;\n    int iters = 1;\n    float fres;\n    for(int i = 0; i < iters; i++){\n        d = march(ro, rd, p, t, hit);\n        \n        if(i == 0) \n            tF = t;\n        tA = max(t, tA);\n        if(hit){\n\t\t\tvec3 n = getNormal(p)*side;\n\t\t\tvec3 l = normalize(vec3(1));\n            \n            float diff = max(dot(n,l), 0.);\n            float spec = pow(max(dot(reflect(l, -rd),n),0.), 20.);\n            fres = pow(1. - max(dot(n,-rd), 0.), 5.);\n            #define ao(j) clamp(map(p + n*j).x/j, 0., 1.)\n            #define sss(j) smoothstep(0., 1.,map(p + l*j).x/j)\n            \n            \n            float a = ao(0.4)*ao(0.1)*ao(0.2);\n            //a = max(a, 0.4);\n    \t\t\t\t        \n            vec3 lCol = vec3(0.4,0.7,1.);\n            if(d.y > 10.){\n                vec3 refl = (spec*0.05*vec3(0.2,0.1,0.4) + pow(fres, 1.)*0.09*pal(1.,1.,vec3(0.8,2.2,2.5),0.5,0.5 + dot(n, -rd) *30. + iTime))*att;\n               \n                col += refl*0.1;\n                att *= vec3(0.4,0.5,0.6)*0.1;\n            } else if(d.y > 5.){\n                \n                vec3 refl = (pow(fres, 1.) + 0.005)*0.09*pal(1.,1.,vec3(0.8,2.2,2.5),0.5,0.5 + dot(n, -rd) *30. + iTime)*att;\n                col += refl*a;\n                ro = p;\n            \tbreak;\n            } else {\n                vec3 refl = pow(fres, 1.)*2.5*pal(1.,1.,vec3(1.8,2.2,2.5),0.5,0.5 + dot(n, -rd) *0.6 + sin(iTime)*0.1 + 3.4)*att;\n                col += 6.*refl*((0.10 + diff*1.*fres)*att + spec*0.4*lCol)*att*a;\n            \tbreak;\n            }\n            #define FOG vec3(0.05 + mmmm*0.,0.10,0.28)*0.04\n            if (i == iters - 1){\n    \t\t\tcol = mix(col, FOG*att, smoothstep(0.,1.,tA*0.015));\n            }\n\n        }\n    \n    }\n    col = mix(col, FOG*0.06, pow(smoothstep(0.,1.,tF*0.025 + pow(fres,7.)*2. - 0.0), 1.4));\n    \n    \n    col += glowb*0.002;\n    \n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}