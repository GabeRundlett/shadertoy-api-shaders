{
    "Shader": {
        "info": {
            "date": "1628957736",
            "description": "Entry from Névoke 2021.\nNo particular point, just wanted to step ahead and participate to something :)\nCompletly crapy code, not optimized or not correct use of fct, but yolo.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "fs33Rr",
            "likes": 11,
            "name": "[Névoke 2021]  Ouate Zeu Feuque",
            "published": 3,
            "tags": [
                "4k",
                "evoke",
                "nvoke"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 456
        },
        "renderpass": [
            {
                "code": "/*\n\nThanks the Shader Showdown Scene folks for all the fun ! \n*_ flopine, evvvvil, ps, wrighter, NuSan, yx, rimina, alien, anticore, monsieursoleil, cosamentale, aldroid, deancoderand and all other I forgot T_T _*\n\nThanks yx for the blossom !  \n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n  vec4 pframe = texture(iChannel0,fragCoord.xy/iResolution.xy);\n    // Output to screen\n    fragColor = vec4(pframe.xyz/pframe.a,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat box(vec3 p,vec3 b){\n    vec3 q=abs(p)-b;\n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n}\nfloat diam(vec3 p,float s){\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*sqrt(1./3.33333);\n}\nvec3 op;\nfloat gidz;\nfloat gg;\n\nvec2 sdf(vec3 p){\n \n    vec3 opp=p;\n    p.z +=1.;\n    gidz= floor(p.z);\n    p.z = fract(p.z);\n    float l=1.;\n    p.xy*=rot(.785*gidz*.5);\n    p.x +=sin(gidz)*.5;\n    float g = 1.;\n    for(float i=0.;i<=4.;i++){\n        p =abs(p)-1.5;\n        p*=1.1;\n        p.xy*=rot(.785);\n        l*=1.1;\n        g = min(g,clamp(tan(p.x*10.2)*asin(sin(p.z*50.9)*.5)*sin(p.y*7.95),-.0,.6)/l);\n    }\n    vec3 ppp =p;\n    float ll = l;\n    float g2 = 1.;\n    float g3 = g;\n    for(float i=0.;i<=10.;i++){\n        ppp = abs(ppp)-vec3(.1,.2,.3);\n        ppp -= vec3(.1,10.,.4);\n        ppp.xyz = ppp.xzy;\n        ppp*=1.3;\n        ll*=1.3;\n        ppp.xy*=rot(-.3785*i);\n        ppp.xy = ppp.x < ppp.y ? ppp.yx:ppp.xy;\n        g2 = min(g2,sin(ppp.x)*sin(ppp.y)+cos(ppp.z)/ll);\n        g = min(g,g2+clamp(sin(ppp.x*10.2)*asin(sin(ppp.z*50.9)*.5)*tan(ppp.x*5.55-ppp.y*7.95),-.1,.6)/ll);\n        g3 = min(g3,clamp(sin(ppp.x*10.2)*asin(sin(ppp.z*50.9)*.5)*tan(ppp.x*5.55-ppp.y*7.95),-.05,.6)/ll);\n    \n    }\n    gg=g;\n    vec2 h;\n    h.x = max(box(p,vec3(1.,1.,1.+g*.1)),box(p,vec3(1.,1.,.97)));\n    h.x = abs(h.x)-.01;\n    h.y = 1.+g3;\n    op =p;\n    vec4 pp = vec4(p,1.);\n    for(float i=0.;i<=4.;i++){\n        pp.xyz =abs(pp.xyz)-.5;\n        h.x = max(h.x,-box(pp.xyz,vec3(.3)));\n        float li = .45*pp.a;\n        if(abs(pp.x)>li && abs(pp.y)>li) h.y = 2.;\n        if(abs(pp.y)>li && abs(pp.z)>li) h.y = 2.;\n        if(abs(pp.x)>li && abs(pp.z)>li) h.y=   2.;\n    }\n    h.x /=l;\n\n    vec2 t;\n    t.x = abs(length(opp.xy-vec2(-.25,.25))-.1)-.01;\n    t.y = 3.;\n    h=  t.x < h.x ? t:h;\n    return h;\n  \n}\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(0.,.1,.2)));}\n\nvec2 nv=vec2(.00035,-.00035);\nvec3 norm(vec3 p){return normalize(\n                        nv.xyy*sdf(nv.xyy+p).x+\n                        nv.yxy*sdf(nv.yxy+p).x+\n                        nv.yyx*sdf(nv.yyx+p).x+\n                        nv.xxx*sdf(nv.xxx+p).x\n);}\n\nfloat focusDistance = .55;\nfloat blurAmount = 0.0050;\n\nvec2 hash22(vec2 p) {\n\tp = fract(p * vec2(6.159, 7.853));\n    p += dot(p.yx, p.xy +  vec2(35.511, 7.584));\n\treturn fract(vec2(p.x * p.y * 195.714, p.x * p.y * 174.78));\n}\nfloat ao(vec3 rp, vec3 n, float q){\n     return (sdf(rp+n*q).x/q);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    vec2 uv = vec2(gl_FragCoord.x / iResolution.x, gl_FragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    uv= (-iResolution.xy + 2.0*(gl_FragCoord.xy +  normalize(tan(hash22(uv+iTime))))) / iResolution.y;\n\n    vec3 col =vec3(.1);\n    vec3 ro = blurAmount*vec3(vec2(-0.1,-.2)-1.0 + 2.0*normalize(tan(hash22(vec2(iFrame)))) ,-0.2);\n    vec3 rt = vec3(0.,.5,10.0);\n    vec3 z = normalize(rt-ro);\n    vec3 x = cross(z,vec3(0.,-1.,0.));\n    vec3 y = cross(z,x);\n  \n    vec3 rd = normalize(mat3(x,y,z)*normalize(vec3(uv,1.1)*focusDistance - ro));\n    vec3 rp= ro;\n    vec3 light =vec3(3.,-3,-5.);\n\n    vec3 acc =vec3(0.);\n\n    float i;\n  for(i=0.;i<=128.;i++){\n      vec3 zcol = pal(gidz*.3);\n      vec2 d = sdf(rp);\n\n       if(d.y >=2. ){\n        if (d.y == 3.) {\n            acc += (1.-i/256.)*pal(gidz*.3)*max(0.001,exp(10.*-abs(d.x))/(100.-step(.9,sin(rp.z*100.))*95.));\n        } else {\n             acc += pal(gidz*.3)*max(0.001,exp(5.*-abs(d.x))/(15.+sin(rp.x*500.)*10.));\n        }\n            d.x = max(0.0005,abs(d.x));\n        }    \n\n        rp +=d.x *rd;\n        if(d.x <=0.0001){\n\n        vec3 n = norm(rp);\n\n        if(d.y < 1.01-fract(sin(length(rp)*100.+sin(atan(uv.x,uv.y))))*.05) zcol= vec3(.1);\n        col = zcol*max(dot(normalize(light-rp),n+fract(d.y)*.1),-0.1)+(1.-zcol)*.9*pow(max(dot(normalize(ro-rp),reflect(-normalize(light),n)),0.),8.);\n\n\n\n        float aot = ao(rp,n,.1)+ao(rp,n,5.5)+ao(rp,n,10.5);\n        col *= aot/i ;\n\n        break;\n     }\n  }\n  vec4 pframe = vec4(texture(iChannel0,fragCoord.xy/iResolution.xy));\n  col +=acc;\n\tcol +=pframe.xyz;\n   \n    \n\tfragColor = vec4(col,pframe.a+1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}