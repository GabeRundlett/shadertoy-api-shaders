{
    "Shader": {
        "info": {
            "date": "1654190953",
            "description": "The Eyebat is exploring the cave.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sdcDX",
            "likes": 10,
            "name": "Eyebat",
            "published": 3,
            "tags": [
                "eyebat"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "// Raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define MAX_STEPS 64\n#define MAX_DIST 32.\n#define SURF_DIST .001\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define MATERIAL0 0\n#define MATERIAL1 1\n#define MATERIAL2 2\n#define SPEED 7.0\n#define ZERO (min(iFrame,0))\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\n// by Dave_Hoskins\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p) {\n    p = p*mat2(127.1,311.7,269.5,183.3);\n    p = -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n    return sin(p*6.283);\n}\n\nfloat perlin_noise(vec2 p) {\n    vec2 pi = floor(p);\n    vec2 pf = p - pi;\n    \n    // interpolation\n    vec2 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    float f00 = dot(hash22(pi + vec2(0.0, 0.0)), pf - vec2(0.0, 0.0));\n    float f01 = dot(hash22(pi + vec2(0.0, 1.0)), pf - vec2(0.0, 1.0));\n    float f10 = dot(hash22(pi + vec2(1.0, 0.0)), pf - vec2(1.0, 0.0));\n    float f11 = dot(hash22(pi + vec2(1.0, 1.0)), pf - vec2(1.0, 1.0));\n    \n    // mixing top & bottom edges\n    float xm1 = mix(f00, f10, w.x);\n    float xm2 = mix(f01, f11, w.x);\n    \n    // mixing to point\n    float ym = mix(xm1, xm2, w.y); \n    \n    return ym;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\n\nfloat feather(vec3 p) {\n    float k = 0.03;\n    p.x = abs(p.x);\n    p.y+=0.1;\n    p.z-=0.1;\n    p.xz*=Rot(radians(sin(iTime*10.0)*10.0));\n    p.xy*=Rot(radians(-20.0));\n    p.x-=1.2;\n    vec3 prevP = p;\n    \n    // feather\n    p.y*=mix(2.0,0.6,smoothstep(-1.0,1.0,p.x));\n    float d = sdBox(p,vec3(0.7,0.4,0.01))-0.03;\n    \n    p = prevP;\n    p.x-=0.9;\n    p.xy*=Rot(radians(-18.0));\n    float d2 = sdBox(p,vec3(0.35,0.6,0.01))-0.03;\n    float rad = radians(18.0);\n    p.x = abs(p.x)-0.2;\n    float mask = dot(p,vec3(cos(rad),sin(rad),0.0));\n    d2 = max(mask,d2);\n    p = prevP;\n    p.x-=0.9;\n    p.xy*=Rot(radians(-18.0));\n    p.x*=0.8;\n    d2 = max(-(length(p-vec3(0.0,-0.7,0.0))-0.3),d2);\n    \n    d = smin(d,d2,k);\n    \n    p = prevP;\n    p.x-=1.2;\n    p.y-=0.2;\n    p.xy*=Rot(radians(-50.0));\n    d2 = sdBox(p,vec3(0.35,0.6,0.01))-0.03;\n    rad = radians(18.0);\n    p.x = abs(p.x)-0.2;\n    mask = dot(p,vec3(cos(rad),sin(rad),0.0));\n    d2 = max(mask,d2);\n    p = prevP;\n    p.x-=1.2;\n    p.y-=0.2;\n    p.xy*=Rot(radians(-50.0));\n    p.x*=0.8;\n    d2 = max(-(length(p-vec3(0.0,-0.7,0.0))-0.3),d2);\n    \n    d = smin(d,d2,k);\n    \n    p = prevP;\n    d2 = sdCone(p-vec3(0.75,0.85,.0),vec2(0.03,0.12),0.3);\n    d = smin(d,d2,k+0.02);\n    \n    return d*0.6;\n}\n\nfloat tail(vec3 p){\n    p.yz*=Rot(radians(sin(-iTime*3.0)*20.0));\n    vec3 prevP = p;\n    p = prevP;\n    float d = sdRoundedCylinder(p-vec3(.0,-1.0,.0),0.05,0.1,0.3);\n    \n    p.xy*=Rot(radians(180.0));\n    float d2 = sdCone(p-vec3(.0,1.7,.0),vec2(0.05,0.15),0.5);\n    d = smin(d,d2,0.2);\n    return d;\n}\n\nvec2 eyeBat(vec3 p){\n    vec3 prevP = p;\n    \n    // body part\n    float d = length(p) - 0.7;\n    float rad = radians(abs(sin(iTime*5.0)*10.0+20.0));\n    p.y = abs(p.y)-0.1;\n    float d2 = dot(p,vec3(0.0,cos(rad),sin(rad)));\n    d2 = max(p.z+0.1,d2);\n    d = max(-d2,d);\n    \n    // horn\n    p = prevP;\n    p.x = abs(p.x)-0.3;\n    p.yz*=Rot(radians(-15.0));\n    d2 = sdCone(p-vec3(0.0,1.1,-.1),vec2(0.03,0.15),0.5);\n    d = smin(d,d2,0.1);\n    \n    p = prevP;\n    \n    // feather\n    d2 = feather(p);\n    d = smin(d,d2,0.2);\n     \n    // tail\n    d2 = tail(p);\n    d = smin(d,d2,0.2);\n    \n    // eyeball\n    d2 = length(p) - 0.68;\n    \n    return combine(vec2(d,MATERIAL0),vec2(d2,MATERIAL2));\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    p.z-=iTime*10.0;\n    float n = perlin_noise(p.xz*0.3)*3.0;\n    p.xy+=n;\n    \n    float d = -length(p.xy) + 8.0;\n    \n    p = prevP;\n    return combine(eyeBat(p),vec2(d*0.6,MATERIAL1));\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n\n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n                \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<3; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    float h = 1.0;\n    for( int i=0; i<48; i++ )\n    {\n        h = GetDist(ro + rd*t).x;\n        res = min( res, smoothstep(0.0,1.0,k*h/t) );\n        t += clamp( h, 0.025, 1.0 );\n        if( h<0.001 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(p.x,p.y,-2));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    //float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float shadow = softshadow(p,rd,0.05, 32.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(0.5)*diff*shadow*occ;\n    diffCol += col*vec3(0.3,0.7,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.5,0.7,0.5)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 20.); // spec\n\n    return diffCol;\n}\n\nvec3 tex(vec3 p,vec3 col){\n    vec2 uv = p.xy;\n    uv*=5.0;\n    vec2 grid = abs(fract(uv - 0.5) - 0.5) / fwidth(uv);\n    float line = min(grid.x, grid.y);\n    float gridd = 0.5 - min(line, 1.0);\n    return mix(vec3(0.0),vec3(1.0),S(gridd,-0.2));\n}\n\nvec3 eyeTex(vec3 p,vec3 col){\n    vec2 uv = p.xy;\n    uv.x+=sin(iTime*2.0)*0.2;\n    float d = length(uv)-0.35;\n    col = mix(vec3(1.0,0.95,0.9),vec3(0.0),S(d,0.0));\n    d = length(uv)-0.2;\n    col =  mix(col,vec3(0.3),S(d,0.0));\n    d = length(uv-vec2(-0.15,0.23))-0.05;\n    return mix(col,vec3(2.0),S(d,0.0)); \n}\n\nvec3 reflectMaterial(vec3 p, vec3 rd, vec3 n) {\n    vec3 r = reflect(rd,n);   \n    vec3 refTex = tex(p,vec3(max(0.55,r.x)))+(r*sin(iTime)*0.5);\n    return refTex;\n}\n\nvec3 fractalTex(vec3 p, vec3 col, float deg, float thickness, float b){\n    vec2 uv = p.xy;\n    uv*=0.2;\n    uv = fract(uv)-0.5;\n    float dd = 10.0;\n    \n    for(float i = 0.; i<7.0; i++){\n        uv = abs(uv)-(0.01*i)-0.2;\n        float rad = radians(50.0*i+deg);\n        float n = dot(uv,vec2(sin(rad),cos(rad)));\n        dd = min(dd,abs(n)-thickness);\n    }\n    \n    col = mix(col,vec3(0.9,0.5,0.3)+sin(0.5*iTime+(uv.x+uv.y+p.z)),S(dd,b));\n    return col;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n\n    if(mat == MATERIAL0){\n        float perl = perlin_noise(p.xy*3.5)*0.1;\n        float nn = hash12(p.xy*8.0)*0.3;\n        col = mix(vec3(0.3,0.4,0.3),vec3(0.2,0.3,0.2),p.y);\n        col = fractalTex(p*1.2,col,10.0,0.01,-0.01)*0.5;\n        col = diffuseMaterial(n,rd,p,col+perl+nn);\n    } else if(mat == MATERIAL1) {\n        float nn = hash12(p.xy*8.0)*0.3;\n        col = reflectMaterial(p,rd,n)*vec3(0.6,0.3,0.0);\n        col = diffuseMaterial(n,rd,p,col+nn)+fractalTex(p,col,iTime*10.0,0.025,-0.03)*0.5;\n    } else if(mat == MATERIAL2){\n        col = eyeTex(p,col);\n        col = diffuseMaterial(n,rd,p,col);\n    }\n    \n    float dd = abs(length(p.xy)-0.1)-0.0001;\n    col *= 1.0 + 0.5*cos(200.0*dd);\n    \n    return col;\n}\n\n// https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e),0.0,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float t = iTime*SPEED;\n    vec3 ro = vec3(0,0.0,-5.0);\n \n    vec2 m =  iMouse.xy/iResolution.xy;\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(3.0,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        if(mod(iTime,30.0)<15.0){\n            ro.xz *= Rot(radians(sin(iTime*0.5)*30.0));\n        } else {\n            ro.yz *= Rot(radians(sin(iTime*0.5)*30.0));\n        }\n    }\n \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n        col *= exp( -0.000005*d.x*d.x*d.x*d.x );//fog\n    } else {\n        col = vec3(0.0);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n    \n    col = ACESFilm(col);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}