{
    "Shader": {
        "info": {
            "date": "1585251961",
            "description": "Just a quick doodle :)\n\nInspired by the works of Matt Taylor https://www.instagram.com/emty01/",
            "flags": 0,
            "hasliked": 0,
            "id": "WslyzX",
            "likes": 137,
            "name": "Impossible Ring",
            "published": 3,
            "tags": [
                "escher",
                "impossible"
            ],
            "usePreview": 1,
            "username": "yx",
            "viewed": 4259
        },
        "renderpass": [
            {
                "code": "#define pi (acos(-1.))\n#define tau (pi*2.)\n\nmat2 rotate(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdBox( vec3 p, vec3 b, float r )\n{\n    vec3 d = abs(p) - (b-r);\n    return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0)-r;\n}\n\nfloat sdRect( vec2 p, vec2 b, float r )\n{\n    vec2 d = abs(p) - (b-r);\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0)-r;\n}\n\nfloat scene(vec3 p)\n{\n    float flip = step(gl_FragCoord.x,iResolution.x*.5)*2.-1.;\n    float time = flip*iTime;\n    \n    p.yz *= rotate(pi*.25*flip);\n    \n    vec3 a = vec3(\n\t\tlength(p.xz),\n        p.y,\n        atan(p.x,p.z)\n\t);\n    \n    a.z = fract((a.z/tau)*8.+time)-.5;\n    a.x -= 1.;\n    a.xy = abs(a.xy)-.25;\n    \n    float r = .02;\n    float d = min(\n        sdBox(a,vec3(.2,.2,.4),r),\n        sdRect(a.xy,vec2(.15),r)\n    );\n    return d;\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\n\tvec3 color = vec3(.2,.1,.9);\n\n    float t=0.;\n    float k=0.;\n    for(int i=0;i<100;++i)\n    {\n        k = scene(cam+dir*t);\n        t += k;\n        if (abs(k) < .001)\n            break;\n    }\n\n    if (abs(k) < .001)\n    {\n        vec3 h = cam+dir*t;\n        vec2 o = vec2(.001, 0);\n        vec3 n = normalize(vec3(\n            scene(h+o.xyy)-scene(h-o.xyy),\n            scene(h+o.yxy)-scene(h-o.yxy),\n            scene(h+o.yyx)-scene(h-o.yyx)\n        ));\n\n        float A = .1;\n        float B = scene(h+n*A);\n        float fakeAO = clamp(B/A,0.,1.);\n        fakeAO = pow(fakeAO,.6)*.5+.5;\n\n        float light = 0.;\n        vec3 lightDir = normalize(vec3(1,4,-4));\n        \n        // wrap diffuse\n        light += dot(n,lightDir)*.7+.3;\n\t\t\n        // specular\n        vec3 H = normalize(lightDir+dir);\n\t\tfloat NdotH = dot(n, H);\n\t\tlight += pow(max(NdotH,0.), 3.)*30.;\n\n        return light * fakeAO * color;\n    }\n    \n    float gradient = pow(.8,dot(cam.xy,cam.xy));\n    return mix(color,vec3(1),gradient);\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy-.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 cam = vec3(uv*3.,-5.);\n    vec3 dir = vec3(0,0,1);\n\n    out_color.rgb = pow(trace(cam,dir),vec3(.45));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}