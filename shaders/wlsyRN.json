{
    "Shader": {
        "info": {
            "date": "1591597133",
            "description": "Path tracing practice",
            "flags": 32,
            "hasliked": 0,
            "id": "wlsyRN",
            "likes": 9,
            "name": "Shining Jacks",
            "published": 3,
            "tags": [
                "raymarching",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 425
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n    \n    \n    fragColor = vec4(pow(col, vec3(0.45)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FOV 1.9\n#define FOCAL_DIST 7.\n#define LENS_DIST 1.\n#define APERTURE 0.1\n#define MAXSTEP 100\n#define TOL 0.01\n#define MAXDIST 100.\n#define EPS 0.02\n#define BOUNCES 8\n#define SCATTER_FACTOR 0.1\n#define SHARP 4.\n#define RADIUS 0.6\n#define RINGRAD 3.\n#define RINGPERIOD 6.\n#define PERIOD 3.2\n#define HEIGHT 0.7\n#define PI 3.1415926\n#define RENDERS_PER_FRAME 3\n#define SKYCOL vec3(0.0, 0.0, 0.0)\n#define ATMOSPHERE_TRANSMISSION 0.9\n    \nvec2 condmin(in vec2 d1, in vec2 d2) {\n    return vec2(min(d1.x, d2.x), mix(d1.y, d2.y, step(d2.x, d1.x)));\n}\n\nvec2 map(in vec3 ro) {\n    vec2 d = vec2(1e10, 0);\n    ro.z = 5.-abs(-ro.z+5.);\n    d = condmin(d, vec2(ro.z, 1));\n    ro.xy = mod(ro.xy+0.5*PERIOD, PERIOD)-0.5*PERIOD;\n    float metadist = length(ro-vec3(0, 0, HEIGHT))-RADIUS*1.2;\n    for (int i=0; i<2; i++) {\n        for (int j=0; j<2; j++) {\n            float otherdist = length(ro - vec3(i*2-1, j*2-1, HEIGHT))-RADIUS;\n            metadist = -log(exp(-SHARP * metadist) + exp(-SHARP * otherdist))/SHARP;\n        }\n    }\n    d = condmin(d, vec2(metadist, 2.));\n    return d;\n}\n\nvec3 getnormal(vec3 ro) {\n    vec2 d = vec2(TOL, 0.0);\n    return normalize(vec3(\n        map(ro+d.xyy).x-map(ro-d.xyy).x,\n        map(ro+d.yxy).x-map(ro-d.yxy).x,\n        map(ro+d.yyx).x-map(ro-d.yyx).x));\n}\n\nvec2 raymarch(in vec3 eye, in vec3 rd) {\n    \n    float t = 0.0;\n    for (int i=0; i<MAXSTEP; i++) {\n        vec3 pos = eye + rd*t;\n        vec2 dist = map(pos);\n        t += dist.x;\n        if (abs(dist.x) < TOL) {\n            return vec2(t, dist.y);\n        } else if (t > MAXDIST) break;\n    }\n    return vec2(t, 0.);\n}\n\nuint seed;\n\nuint wang_hash()\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n\nfloat GetRandom()\n{\n    return float(wang_hash()) / 4294967296.0;\n}\n\nvec2 GetRandom2(){return vec2(GetRandom(), GetRandom());}\n\nvec3 randnorm() {\n    vec2 utheta = GetRandom2() * 2. - 1.;\n    utheta.y *= PI;\n    float rho = sqrt(1.-utheta.x * utheta.x);\n    return vec3(cos(utheta.y)*rho, sin(utheta.y)*rho, utheta.x);\n}\n\nvec3 pathtrace(in vec3 eye, in vec3 rd) {\n    vec3 col = vec3(0.);\n    vec3 thru = vec3(1.);\n    for (int i=0; i<BOUNCES; i++) {\n        vec2 d = raymarch(eye, rd);\n        thru *= pow(ATMOSPHERE_TRANSMISSION, d.x);\n        if (d.y < 0.5) {\n            col += thru * SKYCOL;\n            break;\n        }\n        eye = eye + d.x * rd;\n        vec3 n = getnormal(eye);\n        vec3 nr = randnorm();\n        vec3 nref = reflect(rd, n);\n\t\tnr = mix(nref, normalize(n + nr), SCATTER_FACTOR);\n        vec3 albedo = vec3(1.);\n        vec3 emissive = vec3(0.);\n        if (d.y < 1.5) {\n            albedo = vec3(0.3, 0.7, 0.9);\n        } else if (d.y < 2.5) {\n            float fac = 1.-smoothstep(0., RADIUS+0.5, length(mod(eye.xy+0.5*PERIOD, PERIOD)-0.5*PERIOD));\n            vec2 id = floor(eye.xy/PERIOD + 0.5);\n            id = mod(id, RINGPERIOD)-RINGPERIOD*0.5;\n            float fac2 = length(id) - RINGRAD;\n            fac2 = max(0., 1.-fac2*fac2);\n            fac *= fac2;\n            albedo = vec3(0.6, 0.9, 0.5);\n            emissive = fac * 10.*vec3(0.4, 0.1, 0.0);\n        }\n        \n        col += thru * emissive;\n        thru *= albedo;\n        \n        float maxthru = max(thru.x, max(thru.y, thru.z));\n        if (GetRandom() > maxthru) {\n            break;\n        }\n        thru *= 1.0/maxthru;\n        \n        rd = nr;\n        eye += EPS * rd;\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    seed = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);\n    //camera position\n\tfloat mouseY = iMouse.y < 1. ? 0.5 : (1.0-1.15*iMouse.y/iResolution.y) * 0.5 * PI;\n    float mouseX = iMouse.x < 1. ? 0.25 : -(iMouse.x/iResolution.x) * 2. * PI;\n    vec3 eyeo = 7.*vec3(cos(mouseX) * cos(mouseY), sin(mouseX) * cos(mouseY), sin(mouseY));\n    vec3 w = -normalize(eyeo);\n    vec3 u = normalize(cross(w, vec3(0., 0., 1.)));\n    vec3 v = cross(u, w);\n    vec4 oldCol = texture(iChannel0, fragCoord/iResolution.xy);\n    bool dirty = iMouse.z > 1. || iMouse.w > 1. || iFrame == 0;\n    float oldWeight = oldCol.w;\n    //if (dirty) {\n    //    fragColor = vec4(pathtrace(eye, rd, 0.), 1.);\n    //} else {\n    if (dirty) oldWeight = 0.0;\n        for (int i=0; i<RENDERS_PER_FRAME; i++) {\n            fragCoord += GetRandom2() - 0.5;\n    \n            vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.x * FOV;\n            vec2 c = cos(uv);\n            vec2 s = sin(uv);\n            vec3 rd = normalize(s.x * c.y * u + s.y * v + c.x * c.y * w);\n            vec3 focalPt = eyeo + rd * FOCAL_DIST;\n            vec2 rtheta = GetRandom2();\n            float sampledist = sqrt(rtheta.x);\n            vec2 xy = APERTURE * sampledist * vec2(sin(rtheta.y), cos(rtheta.y));\n            vec3 eye = eyeo + LENS_DIST * rd + u * xy.x + v * xy.y;\n            rd = normalize(focalPt - eye);\n            vec3 col = pathtrace(eye, rd);\n            float newWeight = oldWeight + 1.0;\n            oldCol.xyz = (oldCol.xyz * oldWeight + col) / newWeight;\n            oldWeight = newWeight;\n        }\n        fragColor = vec4(oldCol.xyz,oldWeight);\n    //}\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}