{
    "Shader": {
        "info": {
            "date": "1694800734",
            "description": "The world famous piano-playing graphics card continues his recital by playing \"Maple Leaf Rag\" by Scott Joplin.",
            "flags": 40,
            "hasliked": 0,
            "id": "ddtyzH",
            "likes": 23,
            "name": "GPU Plays the Piano - 2",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "audio",
                "piano",
                "ragtime"
            ],
            "usePreview": 1,
            "username": "pikachuchujelly",
            "viewed": 666
        },
        "renderpass": [
            {
                "code": "#define HUGE 1000000.0\n#define PI 3.14159265359\n\nbool isNotePlaying(int note)\n{\n    //return false;\n    return texelFetch(iChannel1, ivec2(note, 0), 0).r != 0.;\n}\n\n// computes the ray direction of a screen pixel\nvec3 perspectiveRay(vec2 pixel)\n{\n      float x = -1.0 + 2.0*(pixel.x / iResolution.x);\n      float z = -1.0 + 2.0*(pixel.y / iResolution.y);\n      z *= iResolution.y / iResolution.x;  // aspect ratio\n      float y = 1.0;\n      return normalize(vec3(x,y,z));\n}\n\n// rotation about the z axis\nvec3 rotateYaw(vec3 v, float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec3(v.x * c - v.y * s, v.y * c + v.x * s, v.z);\n}\n\n// rotation about the x axis\nvec3 rotatePitch(vec3 v, float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec3(v.x, v.y * c - v.z * s, v.z * c + v.y * s);\n}\n\n// rotation about the y axis\nvec3 rotateRoll(vec3 v, float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec3(v.x * c - v.y * s, v.y, v.z * c + v.x * s);\n}\n\nvec3 lightDir = normalize(vec3(1,1,-1.5));\n\nfloat calcLight(vec3 normal, vec3 rd, float shininess)\n{\n    float ambient  = 0.5;\n    float diffuse  = max(dot(-lightDir,normal), 0.0);\n    float specular = max(dot(-lightDir,reflect(rd, normal)), 0.0);\n    specular *= specular*specular*specular*specular*specular*specular*specular*specular;\n    return ambient + diffuse + specular * shininess;\n}\n\n// subtracts distance b from a\nfloat sdfSubtract(float a, float b)\n{\n    return max(a, -b);\n}\n\n// based on Inigo Quilez's SDF functions\nfloat sdfBox(vec3 p, vec3 center, vec3 b)\n{\n    vec3 q = abs(p-center) - b;\n    return length(max(q,0.0)) + min(max(max(q.x,q.y),q.z),0.0);\n}\n\n// like sdfBox, but specifying minimum and maximum bounds\nfloat sdfBoxBounds(vec3 p, vec3 bmin, vec3 bmax)\n{\n    return sdfBox(p, .5*(bmin+bmax), .5*(bmax-bmin));\n}\n\nint whiteKeyToNote(float key)\n{\n    int octave = int(floor(key / 7.));\n    key = mod(key, 7.);\n    int note = int(key) * 2;\n    if (key >= 3.)\n        note--;\n    return octave * 12 + note + 39;\n}\n\nint blackKeyToNote(float key)\n{\n    int octave = int(floor(key / 7.));\n    key = mod(key, 7.);\n    int note = int(key) * 2 + 1;\n    if (key >= 2.)\n        note--;\n    return octave * 12 + note + 39;\n}\n\nfloat sdfBlackKey(vec3 p, float key)\n{\n    key = clamp(key, -23., 26.);\n    // if this is the spot between B-C or E-F with no black key, choose the closest black key instead\n    if (mod(key,7.) == 2. || mod(key,7.) == 6.)\n        key += fract(p.x) >= .5 ? 1. : -1.;\n    int note = blackKeyToNote(key);\n    float z = isNotePlaying(note) ? .1 : .5;\n    return sdfBox(p, vec3(key+.5,1.,z), vec3(.25, 1., .5));\n}\n\nfloat sdfWhiteKey(vec3 p, float key)\n{\n    key = clamp(key, -23., 28.);\n    int note = whiteKeyToNote(key);\n    float z = isNotePlaying(note) ? -.5 : 0.;\n    return sdfBox(p, vec3(key,0.,z), vec3(.45, 2., .5))-.05;\n}\n\nfloat sdfWhiteKeys(vec3 p)\n{\n    float key = round(p.x);  // get nearest key\n    //return sdfWhiteKey(p, key);\n    // If key is pressed, we need to SDF the neighboring keys as well.\n    float a = sdfWhiteKey(p, key - 1.);\n    float b = sdfWhiteKey(p, key);\n    float c = sdfWhiteKey(p, key + 1.);\n    return min(min(a, b), c);\n}\n\nfloat sdfBlackKeys(vec3 p)\n{\n    float key = round(p.x-.5);  // get nearest key\n    return sdfBlackKey(p, key);\n}\n\nfloat globalSdf(vec3 p, out vec3 color)\n{\n    vec3 bmin = vec3(-25.5, -2.5, -4);\n    vec3 bmax = vec3(30, 30, 4);\n    color = vec3(.1,.1,.1);\n    float d;\n    float dCutout;\n\n    d = sdfBoxBounds(p, bmin, bmax);\n    // middle part\n    d = min(d, sdfBoxBounds(p, bmin + vec3(1, 10, -20), bmax + vec3(-1, -1, 15)));\n    // back of piano body\n    d = min(d, sdfBoxBounds(p, bmin + vec3(0, 9, 8+13), bmax + vec3(0, 0, 15)));\n    // left leg\n    d = min(d, sdfBox(p, vec3(bmin.x+3., bmin.y+3., -4 - 10), vec3(1, 1, 10)));\n    // right leg\n    d = min(d, sdfBox(p, vec3(bmax.x-3., bmin.y-3., -4 - 10), vec3(1, 1, 10)));\n    // cut out keyboard area\n    bmin.y--;bmax.z++;\n    bmin.x += 2.;\n    bmax.x -= 2.;\n    bmax.y = 2.;\n    bmin.z = -.5;\n    dCutout = sdfBox(p, .5*(bmin+bmax), .5*(bmax-bmin));\n    d = sdfSubtract(d, dCutout);\n\n    if (dCutout < 0.)  // optimization: only SDF the keys if we're in the cutout\n    {\n        float dBlack = sdfBlackKeys(p);\n        d = min(d, dBlack);\n        float dWhite = sdfWhiteKeys(p);\n        if (dWhite <= d)\n            color = vec3(.8, .8, .8);\n        d = min(d, dWhite);\n    }\n    return d;\n}\n\nvec3 calcNormal(vec3 p, float d)\n{\n    float e = 0.0001;\n    vec3 dummy;\n    vec3 n = vec3(\n        globalSdf(p + vec3(e,0,0), dummy),\n        globalSdf(p + vec3(0,e,0), dummy),\n        globalSdf(p + vec3(0,0,e), dummy));\n    return normalize(n - d);\n}\n\n// basic environment mapping with a cubemap texture\nvec4 env(vec3 rd)\n{\n    return texture(iChannel0, rd.xzy * vec3(1,1,-1));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 ro;  // ray origin\n    vec3 rd;  // ray direction\n    float yaw = PI/8.;\n    float pitch = -PI/8.;\n\n    ro = vec3(18, -18, 15);\n\n    rd = perspectiveRay(fragCoord);\n    rd = rotateYaw(rotatePitch(rd, pitch), yaw);\n\n    fragColor = env(rd);\n\n    // ray march the piano\n    float t = 0.;\n    for (int i = 0; i < 30; i++)\n    {\n        vec3 p = ro + rd * t;\n        vec4 color;\n        float d = globalSdf(p, color.rgb);\n        if (d < 0.05)\n        {\n            vec3 normal = calcNormal(p, d);\n            vec3 refl = reflect(rd, normal);\n            color = mix(color, env(refl), 0.25);\n            fragColor.rgb = color.rgb * calcLight(normal, rd, 0.5);\n            break;\n        }\n        t += d;\n        if (t > 100.)\n            break;\n    }\n    //fragColor = texture(iChannel1, vec2(fragCoord.x / iResolution.x, 0));\n    \n    // fade out\n    float time = iTime;\n    if (time >= 177.0)\n        fragColor.rgb = mix(fragColor.rgb, vec3(0), (time - 177.0) / 3.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"It's never right to play ragtime fast!\" - Scott Joplin\n// ...but here in ShaderToy, we're only allowed 3 minutes of music :)\n#define BPM 98.0\n\n#define BEAT (60./BPM)     // length of a quarter note in seconds\n#define MEASURE (2.*BEAT)  // length of a measure (2/4 time)\n\nfloat timeTrack(float time)\n{\n    time -= .5;  // pickup measure\n    if (time >= 16.*MEASURE)\n    {\n        time -= 16.*MEASURE;\n        if (time >= 15.*MEASURE) time += MEASURE;  // 2nd ending\n    }\n    if (time >= 33.*MEASURE)\n    {\n        time -= 16.*MEASURE;\n        if (time >= 32.*MEASURE) time += MEASURE;  // 2nd ending\n    }\n    if (time >= 34.*MEASURE)\n    {\n        time -= 34.*MEASURE;  // back to the beginning\n        if (time >= 15.*MEASURE) time = 50.*MEASURE + time - 15.*MEASURE;  // to trio\n    }\n    if (time >= 67.*MEASURE)\n    {\n        time = 51.*MEASURE + time - 67.*MEASURE;  // repeat trio\n        if (time >= 66.*MEASURE) time = 67.*MEASURE + time - 66.*MEASURE;  // 2nd ending\n    }\n    if (time >= 84.*MEASURE)\n    {\n        time = 68.*MEASURE + time - 84.*MEASURE;\n        if (time >= 83.*MEASURE) time += MEASURE;  // 2nd ending\n    }\n\n    return time;\n}\n\n// Right hand\n#define CHANNEL1 \\\nDYN(F) \\\n/*1*/  R(.25) N(.25,Gs4) CHORD2(.25,Ds4,Ds5) N(.25,Gs4) N(.25,C5) CHORD2(.5,Ds4,Ds5) N(.25,G4) \\\n/*2*/  CHORD2(.25,Ds4,Ds5) N(.25,G4) N(.25,As4) CHORD2(1.25,Ds4,Ds5) \\\n/*3*/  R(.25) N(.25,Gs4) CHORD2(.25,Ds4,Ds5) N(.25,Gs4) N(.25,C5) CHORD2(.5,Ds4,Ds5) N(.25,G4) \\\n/*4*/  CHORD2(.25,Ds4,Ds5) N(.25,G4) N(.25,As4) CHORD2(.5,Ds4,Ds5) R(.5) CHORD2(.25,Ds4,Ds5) \\\n/*5*/  R(.25) N(.25,Gs4) N(.25,B4) CHORD2(.25,E4,E5) R(.25) CHORD2(.25,Ds4,Ds5) R(.25) CHORD2(.25,Ds4,Ds5) \\\n/*6*/  R(.25) N(.25,Gs4) N(.25,B4) CHORD2(.25,E4,E5) R(.25) CHORD2(.25,Ds4,Ds5) R(.5) \\\n/*7*/  DYN(P) R(2.) \\\n/*8*/  R(.25) N(.25,Gs4) N(.25,B4) N(.25,Gs5) R(.25) N(.25,Gs5) N(.25,B5) N(.25,Gs6) \\\n/*9*/  CRESC(2.,MF,F) CHORD2(.5,Gs5,Gs6) CHORD2(.5,Gs5,Gs6) CHORD2(.5,Gs5,Gs6) CHORD2(.25,Gs5,Gs6) CHORD2(.5,Gs5,Gs6) \\\n/*10*/ N(.25,Ds6) N(.25,F6) N(.25,C6) N(.25,Ds6) CHORD2(.5,Gs5,F6) CHORD2(.5,E5,Gs5) \\\n/*11*/ N(.25,As5) CHORD2(.25,E5,B5) N(.25,Gs5) N(.25,As5) CHORD2(.5,Ds5,C6) N(.25,Gs5) \\\n/*12*/ CHORD2(.25,Ds5,C6) N(.25,Gs5) CHORD2(.5,Ds5,As5) CHORD2(.5,Ds5,Gs5) R(.25) CHORD2(.75,Gs4,Gs5) \\\n/*13*/ CHORD2(.5,Gs4,Gs5) CHORD2(.5,Gs4,Gs5) CHORD2(.25,Gs4,Gs5) CHORD2(.5,Gs4,Gs5) \\\n/*14*/ N(.25,Ds5) CHORD2(.25,Gs4,F5) N(.25,C5) N(.25,Ds5) CHORD2(.5,Gs4,F5) CHORD2(.5,E4,Gs4) \\\n/*15*/ N(.25,As4) CHORD2(.25,E4,B4) N(.25,Gs4) N(.25,As4) CHORD2(.5,Ds4,C5) N(.25,Gs4) \\\n/*16 - 1st ending*/ CHORD2(.25,Ds4,C5) N(.25,Gs4) CHORD2(.5,Ds4,As4) CHORD2(.5,Ds4,Gs4) R(.5) \\\n/*17 - 2nd ending*/ CHORD2(.25,Ds4,C5) N(.25,Gs4) CHORD2(.5,Ds4,As4) CHORD2(.5,Ds4,Gs4) R(.5) \\\n/*18*/ DYN(F) R(.25) N(.25,G5) CHORD2(.25,Ds5,Ds6) N(.25,G5) N(.25,As5) CHORD2(.5,D5,D6) N(.25,G5) \\\n/*19*/ CRESC(2.,F,MF) CHORD2(.25,Cs5,Cs6) N(.25,G5) N(.25,As5) CHORD2(.5,C5,C6) N(.25,Ds5) CHORD2(.25,As4,As5) N(.25,Ds5) \\\n/*20*/ R(.25) N(.25,C5) CHORD2(.25,Gs4,Gs5) N(.25,C5) N(.25,Ds5) CHORD2(.5,F4,F5) N(.25,C5) \\\n/*21*/ CHORD2(.25,Gs4,Gs5) N(.25,C5) N(.25,Ds5) CHORD2(.5,F4,F5) N(.25,C5) CHORD2(.5,F4,F5) \\\n/*22*/ DYN(F) R(.25) N(.25,Ds5) CHORD2(.25,G4,G5) N(.25,As4) N(.25,Cs5) CHORD2(.5,F4,F5) N(.25,Ds5) \\\n/*23*/ CRESC(2.,F,MF) CHORD2(.25,G4,G5) N(.25,As4) N(.25,Cs5) CHORD2(.5,F4,F5) N(.25,Cs5) CHORD2(.5,F4,F5) \\\n/*24*/ R(.25) N(.25,C5) CHORD2(.25,Gs4,Gs5) N(.25,C5) N(.25,Ds5) CHORD2(.5,F4,F5) N(.25,C5) \\\n/*25*/ CHORD2(.25,Gs4,Gs5) N(.25,C5) N(.25,Ds5) CHORD2(.5,F4,F5) N(.25,C5) CHORD2(.5,F4,F5) \\\n/*26*/ DYN(F) R(.25) N(.25,G5) CHORD2(.25,Ds5,Ds6) N(.25,G5) N(.25,As5) CHORD2(.5,D5,D6) N(.25,G5) \\\n/*27*/ CRESC(2.,F,MP) CHORD2(.25,Cs5,Cs6) N(.25,G5) N(.25,As5) CHORD2(.5,C5,C6) N(.25,Ds5) CHORD2(.25,As4,As5) N(.25,Ds5) \\\n/*28*/ R(.25) N(.25,C5) CHORD2(.25,Gs4,Gs5) N(.25,C5) N(.25,Ds5) CHORD2(.5,F4,F5) N(.25,C5) \\\n/*29*/ CRESC(2.,MP,F) CHORD2(.5,Gs4,Gs5) CHORD2(.5,Gs4,Gs5) CHORD2(.5,G4,G5) CHORD2(.5,Fs4,Fs5) \\\n/*30*/ R(.25) N(.25,F4) N(.25,A4) N(.25,C5) N(.25,F5) N(.25,C5) N(.25,A4) N(.25,F4) \\\n/*31*/ R(.25) N(.25,F4) N(.25,As4) N(.25,Cs5) CHORD2(.5,F4,F5) CHORD3(.5,F4,As4,Cs5) \\\n/*32*/ CHORD4(.5,D4,F4,Gs4,C5) R(.25) CHORD4(.25,D4,F4,Gs4,C5) R(.25) CHORD2(.5,Cs4,As4) N(.25,Ds4) \\\n/*33 - 1st ending*/ CHORD2(.5,C4,Gs4) CHORD2(.5,Ds4,Ds5) CHORD2(.5,Ds4,Ds5) CHORD2(.5,Ds4,Ds5) \\\n/*34 - 2nd ending*/ CRESC(2.,F,FF) R(.25) N(.25,Gs4) N(.25,C5) N(.25,Ds5) CHORD2(.5,Gs4,Gs5) R(.5) \\\nAT(50.*2.) \\\n/*50*/ DYN(F) CHORD2(.25,Ds4,C5) N(.25,Gs4) CHORD2(.5,Ds4,As4) CHORD2(.5,Ds4,Gs4) CHORD2(.5,Gs4,Gs5) \\\n/* Trio */ \\\n/*51*/ DYN(MF) CHORD4(.75,Gs4,C5,Ds5,Gs5) CHORD4(.5,As4,C5,Ds5,Gs5) CHORD2(.25,C5,Ds5) N(.5,As4) \\\n/*52*/ CRESC(2.,MF,MP) CHORD4(.75,Gs4,C5,Ds5,Gs5) CHORD4(.5,As4,C5,Ds5,Gs5) CHORD2(.25,C5,Ds5) N(.25,As4) CHORD2(.25,C5,Ds5) \\\n/*53*/ N(.25,Gs4) N(.25,Cs5) N(.25,As4) N(.25,Cs5) N(.25,F5) N(.25,Gs4) N(.25,Cs5) N(.25,F5) \\\n/*54*/ CRESC(2.,MP,MF) N(.25,As4) N(.25,Cs5) N(.25,F5) N(.5,Gs4) N(.25,F5) N(.25,As4) N(.25,F5) \\\n/*55*/ CHORD4(.75,Gs4,C5,Ds5,Gs5) CHORD4(.5,As4,C5,Ds5,Gs5) CHORD2(.25,C5,Ds5) N(.5,As4) \\\n/*56*/ CRESC(2.,MF,MP) CHORD4(.75,Gs4,C5,Ds5,Gs5) CHORD4(.5,As4,C5,Ds5,Gs5) CHORD2(.25,C5,Ds5) N(.25,As4) CHORD2(.25,C5,Ds5) \\\n/*57*/ N(.25,Gs4) N(.25,Cs5) N(.25,As4) N(.25,Cs5) N(.25,F5) N(.25,Gs4) N(.25,Cs5) N(.25,F5) \\\n/*58*/ CRESC(2.,MP,MF) N(.25,As4) N(.25,Cs5) N(.25,F5) N(.5,Gs4) N(.25,F5) N(.25,A4) CHORD2(.25,Ds5,F5) \\\n/*59*/ CHORD4(.75,As4,D5,F5,As5) CHORD4(.5,C5,D5,F5,As5) CHORD2(.25,D5,F5) N(.5,C5) \\\n/*60*/ CHORD4(.75,As4,D5,F5,As5) CHORD4(.5,C5,D5,F5,As5) CHORD2(.25,D5,F5) N(.25,C5) CHORD2(.25,D5,F5) \\\n/*61*/ CRESC(4.,MF,F) R(.25) N(.25,Ds5) CHORD2(.25,As4,As5) N(.25,Ds5) N(.25,Fs5) CHORD2(.5,C5,C6) N(.25,Ds5) \\\n/*62*/ CHORD2(.25,As4,As5) N(.25,Ds5) N(.25,Fs5) CHORD2(.5,C5,C6) N(.25,Ds5) CHORD2(.5,As4,As5) \\\n/*63*/ DYN(FF) CHORD3(.5,Cs5,E5,Cs6) CHORD3(.5,Cs5,E5,Cs6) CRESC(1.,FF,F) CHORD3(.5,C5,E5,C6) CHORD3(.5,As4,E5,As5) \\\n/*64*/ CHORD2(.25,Gs4,F5) N(.25,Cs5) N(.25,Ds5) CHORD2(.5,As4,Fs5) N(.25,As4) CHORD2(.5,Gs4,F5) \\\n/*65*/ CRESC(2.,F,MF) CHORD2(.25,G4,F5) N(.25,Cs5) N(.25,Ds5) CHORD2(.5,Fs4,F5) N(.25,C5) CHORD2(.25,G4,Ds5) CHORD2(.5,F4,Cs5) \\\n/*66 - 1st ending*/ DYN(FF) CHORD2(.5,Gs4,Gs5) N(.25,F5) CHORD2(.25,Gs4,Gs5) N(.25,F5) CHORD2(.25,Gs4,Gs5) N(.25,F5) \\\n/*67 - 2nd ending*/ /*CHORD2(.25,F4,Cs5)*/ R(.25) N(.25,Cs5) N(.25,F5) N(.25,Gs5) CHORD2(.5,Cs5,Cs6) R(.5) \\\n/*68*/ DYN(F) CHORD2(.5,Gs4,Gs5) CHORD2(.5,Gs4,F5) CHORD2(.5,Gs4,Gs5) CHORD2(.5,Gs4,F5) \\\n/*69*/ CHORD2(.5,F5,Gs5) CHORD2(.25,F5,As5) CHORD2(.5,F5,C6) N(.25,As5) N(.25,Gs5) N(.25,F5) \\\n/*70*/ N(.25,Ds5) N(.5,F5) CHORD2(1.25,Gs4,C5) \\\n/*71*/ R(.25) N(.25,Ds5) CHORD2(.25,Gs4,F5) N(.25,C5) N(.25,Ds5) CHORD2(.5,Gs4,F5) N(.25,C5) \\\n/*72*/ CHORD2(.5,G4,Ds5) N(.25,F5) CHORD2(1.25,G4,As4) \\\n/*73*/ R(.25) N(.25,Cs5) CHORD2(.25,G4,F5) N(.25,As4) N(.25,Cs5) CHORD2(.5,G4,F5) CRESC(4.25,P,F) CHORD2(.5,Gs4,C5) \\\n/*74*/ N(.25,Ds5) CHORD2(.25,Gs4,F5) N(.25,C5) N(.25,Ds5) CHORD2(.5,Gs4,F5) CHORD2(.5,Gs4,C5) \\\n/*75*/ N(.25,Ds5) CHORD2(.25,Gs4,F5) N(.25,C5) N(.25,Ds5) CHORD2(.5,Gs4,F5) N(.25,Ds5) \\\n/*76*/ CHORD2(.5,Gs4,Gs5) CHORD2(.5,Gs4,F5) CHORD2(.5,Gs4,Gs5) CHORD2(.5,Gs4,F5) \\\n/*77*/ CHORD2(.5,F5,Gs5) CHORD2(.25,F5,As5) CHORD2(.5,F5,C6) N(.25,As5) N(.25,Gs5) N(.25,F5) \\\n/*78*/ N(.5,Gs5) N(.5,F5) N(.25,Ds5) N(.5,Gs5) CHORD2(.5,Gs4,C5) \\\n/*79*/ N(.25,Ds5) CHORD2(.25,Gs4,F5) N(.25,C5) N(.25,Ds5) CHORD2(.5,Gs4,F5) CHORD2(.5,F4,Gs4) \\\n/*80*/ N(.25,As4) CHORD2(.5,F4,Gs4) CHORD2(.5,E4,Gs4) CHORD2(.25,E4,As4) CHORD2(.5,Ds4,Gs4) \\\n/*81*/ N(.25,As4) CHORD2(.25,Ds4,C5) N(.25,Gs4) N(.25,As4) CHORD2(.5,Ds4,C5) CHORD2(.5,D4,Gs4) \\\n/*82*/ N(.25,As4) CHORD2(.25,D4,C5) N(.25,Gs4) R(.25) CHORD2(.5,Cs4,As4) N(.25,Ds4) \\\n/*83 - 1st ending*/ CHORD2(.5,C4,Gs4) CHORD2(.5,Ds4,Ds5) CHORD2(.5,Ds4,Ds5) CHORD2(.5,Ds4,Ds5) \\\n/*84 - 2nd ending*/ CHORD2(.5,C4,Gs4) DYN(FF) CHORD3(.5,G4,Cs5,Ds5) CHORD4(.5,Gs4,C5,Ds5,Gs5) \\\n\n// Left hand\n#define CHANNEL2 \\\nAT(-0.5) \\\nDYN(F) \\\nCHORD2(.5,Ds2,Ds3) \\\n/*1*/  CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C3) CHORD3(.5,Ds3,Gs3,C3) CHORD2(.5,A2,A3) \\\n/*2*/  CHORD2(.5,As2,As3) CHORD3(.5,Ds3,G3,Cs3) CHORD3(.5,Ds3,G3,Cs3) CHORD2(.5,Ds2,Ds3) \\\n/*3*/  CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C3) CHORD3(.5,Ds3,Gs3,C3) CHORD2(.5,A2,A3) \\\n/*4*/  CHORD2(.5,As2,As3) CHORD3(.5,Ds3,G3,Cs3) CHORD3(.5,Ds3,G3,Cs3) CHORD2(.5,Ds2,Ds3) \\\n/*5*/  CHORD2(1.,E2,E3) CHORD2(.5,Ds2,Ds3) CHORD2(.5,Ds2,Ds3) \\\n/*6*/  CHORD2(1.,E2,E3) CHORD2(.5,Ds2,Ds3) R(.5) \\\n/*7*/  DYN(P) N(.25,Gs1) N(.25,Gs2) N(.25,B2) N(.25,Gs3) N(.25,Gs2) N(.25,Gs3) N(.25,B3) N(.25,Gs4) \\\n/*8*/  CRESC(2.,P,MF) N(.25,Gs3) R(.75) N(.25,Gs4) R(.75) \\\n/*9*/  CRESC(2.,MF,F) CHORD4(.5,D4,F4,Gs4,B4) CHORD4(.5,D4,F4,Gs4,B4) CHORD4(.5,D4,F4,Gs4,B4) CHORD4(.5,D4,F4,Gs4,B4) \\\n/*10*/ CHORD3(.5,Ds4,Gs4,C5) CHORD3(.5,Ds4,Gs4,C5) CHORD3(.5,Ds4,Gs4,C5) CHORD3(.5,Ds4,Gs4,C5) \\\n/*11*/ CHORD3(.5,E4,Gs4,B4) CHORD3(.5,E4,Gs4,B4) CHORD3(.5,Ds4,Gs4,C5) CHORD3(.5,Ds4,Gs4,C5) \\\n/*12*/ CHORD3(.5,Ds4,Gs4,C5) CHORD3(.5,Ds4,G4,Cs5) CHORD2(.5,Gs4,C5) R(.5) \\\n/*13*/ CHORD4(.5,D3,F3,Gs3,B3) CHORD4(.5,D3,F3,Gs3,B3) CHORD4(.5,D3,F3,Gs3,B3) CHORD4(.5,D3,F3,Gs3,B3) \\\n/*14*/ CHORD3(.5,Ds3,Gs3,C4) CHORD3(.5,Ds3,Gs3,C4) CHORD3(.5,Ds3,Gs3,C4) CHORD3(.5,Ds3,Gs3,C4) \\\n/*15*/ CHORD3(.5,E3,Gs3,B3) CHORD3(.5,E3,Gs3,B3) CHORD3(.5,Ds3,Gs3,C4) CHORD3(.5,Ds3,Gs3,C4) \\\n/*16 - 1st ending*/ CHORD3(.5,Ds3,Gs3,C4) CHORD3(.5,Ds3,G3,Cs4) CHORD2(.5,Gs3,C4) CHORD2(.5,Ds2,Ds3) \\\n/*17 - 2nd ending*/ CHORD3(.5,Ds3,Gs3,C4) CHORD3(.5,Ds3,G3,Cs4) CHORD2(.5,Gs3,C4) CHORD2(.5,A2,A3) \\\n/*18*/ DYN(F) CHORD2(.5,As2,As3) CHORD3(.5,Ds3,G3,Ds4) CHORD2(.5,Ds2,Ds3) CHORD3(.5,Ds3,G3,Ds4) \\\n/*19*/ CRESC(2.,F,MF) CHORD2(.5,As2,As3) CHORD3(.5,Ds3,G3,Ds4) CHORD2(.5,Ds2,Ds3) CHORD2(.5,G2,G3) \\\n/*20*/ CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,Ds3,Ds3) CHORD3(.5,Ds3,Gs3,C4) \\\n/*21*/ CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,Gs2,Gs3) CHORD2(.5,A2,A3) \\\n/*22*/ DYN(F) CHORD2(.5,As2,As3) CHORD3(.5,Ds3,G3,Ds4) CHORD2(.5,Ds2,Ds3) CHORD3(.5,Ds3,G3,Ds4) \\\n/*23*/ CRESC(2.,F,MF) CHORD2(.5,As2,As3) CHORD3(.5,Ds3,G3,Ds4) CHORD2(.5,As2,As3) CHORD2(.5,B2,B3) \\\n/*24*/ CHORD2(.5,C3,C4)   CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,Ds2,Ds3) CHORD3(.5,Ds3,Gs3,C4) \\\n/*25*/ CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,Gs2,Gs3) CHORD2(.5,A2,A3) \\\n/*26*/ DYN(F) CHORD2(.5,As2,As3) CHORD3(.5,Ds3,G3,Ds4) CHORD2(.5,Ds2,Ds3) CHORD3(.5,Ds3,G3,Ds4) \\\n/*27*/ CRESC(2.,F,MP) CRESC(2.,F,MF) CHORD2(.5,As2,As3) CHORD3(.5,Ds3,G3,Ds4) CHORD2(.5,Ds2,Ds3) CHORD2(.5,G2,G3) \\\n/*28*/ CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,Ds3,Ds3) CHORD3(.5,Ds3,Gs3,C4) \\\n/*29*/ CRESC(2.,MP,F) CHORD2(.5,Gs2,Gs3) CHORD2(.5,Gs2,Gs3)    CHORD2(.5,G2,G3)   CHORD2(.5,Fs2,Fs3) \\\n/*30*/ CHORD2(.5,F2,F3)   CHORD2(.5,F2,F3)      CHORD2(.5,A2,A3)   CHORD2(.5,A2,A3) \\\n/*31*/ CHORD2(.5,As2,As3) CHORD3(.5,F3,As3,Cs4) CHORD3(.5,F3,As3,Cs4) CHORD3(.5,F3,As3,Cs4) \\\n/*32*/ CHORD3(.5,As2,F3,As3) CHORD3(.5,As2,F3,As3) CHORD2(.5,Ds2,Ds3) CHORD2(.5,G2,G3) \\\n/*33 - 1st ending*/ CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C4) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,A2,A3) \\\n/*34 - 2nd ending*/ CRESC(2.,F,FF) CHORD2(.5,Gs2,Gs3) CHORD3(.5,Gs3,C4,Ds4) CHORD3(.5,Gs3,C4,Ds4) CHORD2(.5,Ds2,Ds3) \\\nAT(50.*2.) \\\n/*50*/ DYN(F) CHORD3(.5,Ds3,Gs3,C4) CHORD3(.5,Ds3,G3,Cs4) CHORD2(.5,Gs3,C4) R(.5) \\\n/* Trio */ \\\n/*51*/ DYN(MF) CHORD2(.5,Ds2,Ds3) CHORD3(.5,Gs3,C4,Fs4) CHORD2(.5,Fs2,Fs3) CHORD3(.5,Gs3,C4,Fs4) \\\n/*52*/ CRESC(2.,MF,MP) CHORD2(.5,Fs2,Fs3) CHORD3(.5,Gs3,C4,Fs4) CHORD2(.5,Ds2,Ds3) CHORD2(.5,C2,C3) \\\n/*53*/ CHORD2(.5,Cs2,Cs3) CHORD3(.5,Gs3,Cs4,F4) CHORD2(.5,Gs2,Gs3) CHORD3(.5,Gs3,Cs4,F4) \\\n/*54*/ CRESC(2.,MP,MF) CHORD2(.5,F2,F3)   CHORD3(.5,Gs3,Cs4,F4) CHORD2(.5,Cs2,Cs3) CHORD2(.5,D2,D3) \\\n/*55*/ CHORD2(.5,Ds2,Ds3) CHORD3(.5,Gs3,C4,Fs4) CHORD2(.5,Fs2,Fs3) CHORD3(.5,Gs3,C4,Fs4) \\\n/*56*/ CRESC(2.,MF,MP) CHORD2(.5,Fs2,Fs3) CHORD3(.5,Gs3,C4,Fs4) CHORD2(.5,Ds2,Ds3) CHORD2(.5,C2,C3) \\\n/*57*/ CHORD2(.5,Cs2,Cs3) CHORD3(.5,Gs3,Cs4,F4) CHORD2(.5,Gs2,Gs3) CHORD3(.5,Gs3,Cs4,F4) \\\n/*58*/ CRESC(2.,MP,MF) CHORD2(.5,F2,F3)   CHORD3(.5,Gs3,Cs4,F4) CHORD2(.5,Cs2,Cs3) CHORD2(.5,C2,C3) \\\n/*59*/ CHORD2(.5,As1,As2) CHORD3(.5,As3,D4,Gs4) CHORD2(.5,D2,D3)   CHORD3(.5,As3,D4,Gs4) \\\n/*60*/ CHORD2(.5,F2,F3)   CHORD3(.5,As3,D4,Gs4) CHORD2(.5,As2,As3) CHORD3(.5,As3,D4,Gs4) \\\n/*61*/ CRESC(4.,MF,F) CHORD2(.5,Ds2,Ds3) CHORD3(.5,As3,Ds4,Fs4) CHORD2(.5,Fs2,Fs3) CHORD3(.5,As3,Ds4,Fs4) \\\n/*62*/ CHORD2(.5,Ds2,Ds3) CHORD3(.5,As3,Ds4,Fs4) CHORD2(.5,Fs2,Fs3) CHORD3(.5,As3,Ds4,Fs4) \\\n/*63*/ DYN(FF) N(.25,G3) N(.5,As3) N(.25,Cs4) CRESC(1.,FF,F) N(.25,E4) N(.25,Cs4) N(.25,As3) N(.25,G3) \\\n/*64*/ CHORD2(.5,Gs2,Gs3) CHORD3(.5,Gs3,Cs4,F4) N(.5,As2) CHORD3(.5,Gs3,As3,D4) \\\n/*65*/ CRESC(2.,F,MF) CHORD3(.5,Ds3,As3,Cs4) CHORD3(.5,Ds3,As3,Cs4) CHORD2(.5,Gs3,C4) CHORD2(.5,Gs3,C4) \\\n/*66 - 1st ending*/ CHORD2(.5,Cs3,Cs4) CHORD3(.5,Gs3,Cs4,F4) DYN(FF) CHORD3(.5,Gs3,Cs4,F4) CHORD2(.5,D2,D3) \\\n/*67 - 2nd ending*/ CHORD2(.5,Cs3,Cs4) CHORD2(.5,Gs2,Gs3) CHORD2(.5,Cs2,Cs3) CHORD2(.5,C3,C4) \\\n/*68*/ DYN(F) CHORD2(.5,Cs3,Cs4) CHORD3(.5,Gs3,Cs4,F4) CHORD3(.5,Gs3,Cs4,F4) CHORD2(.5,C3,C4) \\\n/*69*/ CHORD2(.5,Cs3,Cs4) CHORD3(.5,Gs3,Cs4,F4) CHORD2(.5,As2,As3) CHORD2(.5,B2,B3) \\\n/*70*/ CHORD2(.5,C3,C4)   CHORD3(.5,Gs3,C4,Ds4) CHORD3(.5,Gs3,C4,Ds4) CHORD2(.5,Ds2,Ds3) \\\n/*71*/ CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,Ds2,Ds3) CHORD2(.5,A2,A3) \\\n/*72*/ CHORD2(.5,As2,As3) CHORD3(.5,Ds3,G3,Ds4) CHORD2(.5,Ds2,Ds3) CHORD2(.5,A2,A3) \\\n/*73*/ CHORD2(.5,As2,As3) CHORD3(.5,Ds3,G3,Cs4) CHORD2(.5,Ds2,Ds3) CHORD2(.5,G2,G3) \\\n/*74*/ CRESC(4.,P,F) CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,Ds2,Ds3) CHORD3(.5,Ds3,Gs3,C4) \\\n/*75*/ CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,As2,As3) CHORD2(.5,C3,C4) \\\n/*76*/ CHORD2(.5,Cs3,Cs4) CHORD3(.5,Gs3,Cs4,F4) CHORD3(.5,Gs3,Cs4,F4) CHORD2(.5,C3,C4) \\\n/*77*/ CHORD2(.5,Cs3,Cs4) CHORD3(.5,Gs3,Cs4,F4) CHORD2(.5,As2,As3) CHORD2(.5,B2,B3) \\\n/*78*/ CHORD2(.5,C3,C4)   CHORD3(.5,Gs3,C4,Ds4) CHORD3(.5,Gs3,C4,Ds4) CHORD2(.5,Ds2,Ds3) \\\n/*79*/ CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,Ds2,Ds3) CHORD3(.5,Ds3,Gs3,C4) \\\n/*80*/ CHORD2(.5,Cs2,Cs3) CHORD2(.5,Cs2,Cs3)    CHORD2(.5,As1,As2) CHORD2(.5,D2,D3) \\\n/*81*/ CHORD2(.5,Ds2,Ds3) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,Ds2,Ds3) CHORD2(.5,E2,E3) \\\n/*82*/ CHORD2(.5,F2,F3)   CHORD2(.5,F2,F3)      CHORD2(.5,G2,G3)   CHORD2(.5,G2,G3) \\\n/*83 - 1st ending*/ CHORD2(.5,Gs2,Gs3) CHORD3(.5,Ds3,Gs3,C4) CHORD2(.5,As2,As3) CHORD2(.5,Cs3,Cs4) \\\n/*84 - 2nd ending*/ CHORD2(.5,Gs2,Gs3) DYN(FF) CHORD2(.5,Ds2,Ds3) CHORD2(.5,Gs1,Gs2) \\\nR(1000.) N(.5,C3)  // Notes get stuck with some Intel graphics cards. Adding a random note at the end fixes this problem somehow?",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/**\n * To determine if a note is being played, sample this buffer texture at (note, 0).\n * If the red component is 1, the note is being played. If it is 0, the note is not being played.\n */\n\n// piano note indexes\n#define A0 0\n#define As0 1\n#define B0 2\n#define C1 3\n#define Cs1 4\n#define D1 5\n#define Ds1 6\n#define E1 7\n#define F1 8\n#define Fs1 9\n#define G1 10\n#define Gs1 11\n#define A1 12\n#define As1 13\n#define B1 14\n#define C2 15\n#define Cs2 16\n#define D2 17\n#define Ds2 18\n#define E2 19\n#define F2 20\n#define Fs2 21\n#define G2 22\n#define Gs2 23\n#define A2 24\n#define As2 25\n#define B2 26\n#define C3 27\n#define Cs3 28\n#define D3 29\n#define Ds3 30\n#define E3 31\n#define F3 32\n#define Fs3 33\n#define G3 34\n#define Gs3 35\n#define A3 36\n#define As3 37\n#define B3 38\n#define C4 39\n#define Cs4 40\n#define D4 41\n#define Ds4 42\n#define E4 43\n#define F4 44\n#define Fs4 45\n#define G4 46\n#define Gs4 47\n#define A4 48\n#define As4 49\n#define B4 50\n#define C5 51\n#define Cs5 52\n#define D5 53\n#define Ds5 54\n#define E5 55\n#define F5 56\n#define Fs5 57\n#define G5 58\n#define Gs5 59\n#define A5 60\n#define As5 61\n#define B5 62\n#define C6 63\n#define Cs6 64\n#define D6 65\n#define Ds6 66\n#define E6 67\n#define F6 68\n#define Fs6 69\n#define G6 70\n#define Gs6 71\n#define A6 72\n#define As6 73\n#define B6 74\n#define C7 75\n#define Cs7 76\n#define D7 77\n#define Ds7 78\n#define E7 79\n#define F7 80\n#define Fs7 81\n#define G7 82\n#define Gs7 83\n#define A7 84\n#define As7 85\n#define B7 86\n#define C8 87\n\n#define TEST\n\n#ifdef TEST\n#define N(len, pitch) noteA=(t>=x&&t<x+len*.8*60.0/BPM)?pitch:noteA;x+=len*60.0/BPM;\n#else\n#define N(len, pitch) if(note==pitch&&t>=x&&t<x+len*0.8*60.0/BPM)return true; x+=len*60.0/BPM;\n#endif\n#define R(len) x+=len*60.0/BPM;\n\n#define AT(time) x=time*60.0/BPM;\n\n#define GRACE(a)        x-=0.05*60.0/BPM;N(0.05,a)\n#define GRACE2(a, b)    x-=0.10*60.0/BPM;N(0.05,a)N(0.05,b)\n#define GRACE3(a, b, c) x-=0.15*60.0/BPM;N(0.05,a)N(0.05,b)N(0.05,c)\n#ifdef TEST\n#define CHORD2(len, a, b) \\\n    noteA=(t>=x&&t<x+len*.8*60.0/BPM)?a:noteA; \\\n    noteB=(t>=x&&t<x+len*.8*60.0/BPM)?b:noteB; \\\n    x+=len*60.0/BPM;\n#define CHORD3(len, a, b, c) \\\n    noteA=(t>=x&&t<x+len*.8*60.0/BPM)?a:noteA; \\\n    noteB=(t>=x&&t<x+len*.8*60.0/BPM)?b:noteB; \\\n    noteC=(t>=x&&t<x+len*.8*60.0/BPM)?c:noteC; \\\n    x+=len*60.0/BPM;\n#define CHORD4(len, a, b, c, d) \\\n    noteA=(t>=x&&t<x+len*.8*60.0/BPM)?a:noteA; \\\n    noteB=(t>=x&&t<x+len*.8*60.0/BPM)?b:noteB; \\\n    noteC=(t>=x&&t<x+len*.8*60.0/BPM)?c:noteC; \\\n    noteD=(t>=x&&t<x+len*.8*60.0/BPM)?d:noteD; \\\n    x+=len*60.0/BPM;\n#else\n#define CHORD2(len, a, b)       N(len, a) x-=len*60.0/BPM; N(len, b)\n#define CHORD3(len, a, b, c)    N(len, a) x-=len*60.0/BPM; N(len, b) x-=len*60.0/BPM; N(len, c)\n#define CHORD4(len, a, b, c, d) N(len, a) x-=len*60.0/BPM; N(len, b) x-=len*60.0/BPM; N(len, c) x-=len*60.0/BPM; N(len, d)\n#endif\n\n// unused\n#define DYN(volume)\n#define CRESC(len, start, end)\n\nbool isNotePlayingCh1(float t, int note)\n{\n    float x = 0.;\n    int noteA = -1;\n    int noteB = -1;\n    int noteC = -1;\n    int noteD = -1;\n\n    CHANNEL1\n\n#ifdef TEST\n    return note == noteA || note == noteB || note == noteC || note == noteD;\n#else\n    return false;\n#endif\n}\n\nbool isNotePlayingCh2(float t, int note)\n{\n    float x = 0.;\n    int noteA = -1;\n    int noteB = -1;\n    int noteC = -1;\n    int noteD = -1;\n\n    CHANNEL2\n\n#ifdef TEST\n    return note == noteA || note == noteB || note == noteC || note == noteD;\n#else\n    return false;\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int note = int(fragCoord.x);\n    float t = iTime + iTimeDelta;  // Frames tend to render a bit late, so compensate based on the frame rate.\n    t = timeTrack(t);\n    fragColor = vec4(0);\n    if (fragCoord.y <= 1.)\n        fragColor.r = (isNotePlayingCh1(t, note) || isNotePlayingCh2(t, note)) ? 1. : 0.;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Note frequencies\n\n#define FREQ_C(oct)  (16.35*exp2(float(oct)))\n#define FREQ_Cs(oct) (17.32*exp2(float(oct)))\n#define FREQ_D(oct)  (18.35*exp2(float(oct)))\n#define FREQ_Ds(oct) (19.45*exp2(float(oct)))\n#define FREQ_E(oct)  (20.60*exp2(float(oct)))\n#define FREQ_F(oct)  (21.83*exp2(float(oct)))\n#define FREQ_Fs(oct) (23.12*exp2(float(oct)))\n#define FREQ_G(oct)  (24.50*exp2(float(oct)))\n#define FREQ_Gs(oct) (25.96*exp2(float(oct)))\n#define FREQ_A(oct)  (27.50*exp2(float(oct)))\n#define FREQ_As(oct) (29.14*exp2(float(oct)))\n#define FREQ_B(oct)  (30.87*exp2(float(oct)))\n\n#define PI 3.14159265359\n\nfloat attenuate(float t)\n{\n    return exp2(-8.0*t);\n}\n\n// The built-in sin function has some precision issues at large x values, which results in\n// annoying high pitched buzzing sounds. Keeping x within 0 and 2pi fixes that.\nfloat better_sin(float x)\n{\n    return sin(mod(x, 2.0*PI));\n}\n\n// This doesn't sound exactly like a piano, but it's good enough for me!\nfloat piano(float time,float freq)\n{\n    float sampleX = 0.;\n    int maxHarm = 7;\n    if (freq > 800.0) maxHarm = 5;  // make high notes less bright\n    if (freq > 1600.0) maxHarm = 3;\n    for (int i = 1; i <= maxHarm; i++)\n        sampleX += better_sin(PI*2.0 * freq * float(i) * time) / float(i);\n    return sampleX;\n}\n\n// note\n#define N(len, note) note=(t>=x)?x:note;x+=len*60.0/BPM;\n// rest\n#define R(len) x+=len*(60.0/BPM);\n\n#define GRACE(a)        x-=0.05*(60.0/BPM);N(0.05,a)\n#define GRACE2(a, b)    x-=0.10*(60.0/BPM);N(0.05,a)N(0.05,b)\n#define GRACE3(a, b, c) x-=0.15*(60.0/BPM);N(0.05,a)N(0.05,b)N(0.05,c)\n#define CHORD2(len, a, b)       N(len, a) x-=len*60.0/BPM; N(len, b)\n#define CHORD3(len, a, b, c)    N(len, a) x-=len*60.0/BPM; N(len, b) x-=len*60.0/BPM; N(len, c)\n#define CHORD4(len, a, b, c, d) N(len, a) x-=len*60.0/BPM; N(len, b) x-=len*60.0/BPM; N(len, c) x-=len*60.0/BPM; N(len, d)\n\n#define AT(time) x=time*60.0/BPM;\n\n// Dynamics\n#define PP 0.1\n#define P  0.2\n#define MP 0.25\n#define MF 0.5\n#define F  0.65\n#define FF 1.0\n#define DYN(d) if(t>=x)volume=d;\n#define CRESC(len, a, b) if (t>=x)volume=mix(a, b, min(1.0,(t-x)/((len)*60.0/BPM)));\n\n#define PLAYNOTES(note, freq) if(note>-10.)a+=piano(t-note,freq)*volume*attenuate(t-note);\n\nfloat channel1(float t)\n{\n    float x = 0.0;\n    float a = 0.0;\n    // I tried using an array here, but it was too slow, and this managed to be faster somehow.\n    float A3=-10.,Ds3=-10.,\n          C4=-10.,Cs4=-10.,D4=-10.,Ds4=-10.,E4=-10.,F4=-10.,Fs4=-10.,G4=-10.,Gs4=-10.,A4=-10.,As4=-10.,B4=-10.,\n          C5=-10.,Cs5=-10.,D5=-10.,Ds5=-10.,E5=-10.,F5=-10.,Fs5=-10.,G5=-10.,Gs5=-10.,A5=-10.,As5=-10.,B5=-10.,\n          C6=-10.,Cs6=-10.,D6=-10.,Ds6=-10.,E6=-10.,F6=-10.,Fs6=-10.,G6=-10.,Gs6=-10.,A6=-10.,As6=-10.,B6=-10.,\n          C7=-10.,D7=-10.,E7=-10.;\n    float volume = 0.0;\n\n    CHANNEL1\n\n    PLAYNOTES(A3,  FREQ_A(3))\n    PLAYNOTES(Ds3, FREQ_Ds(3))\n    PLAYNOTES(C4,  FREQ_C(4))\n    PLAYNOTES(Cs4, FREQ_Cs(4))\n    PLAYNOTES(D4,  FREQ_D(4))\n    PLAYNOTES(Ds4, FREQ_Ds(4))\n    PLAYNOTES(E4,  FREQ_E(4))\n    PLAYNOTES(F4,  FREQ_F(4))\n    PLAYNOTES(Fs4, FREQ_Fs(4))\n    PLAYNOTES(G4,  FREQ_G(4))\n    PLAYNOTES(Gs4, FREQ_Gs(4))\n    PLAYNOTES(A4,  FREQ_A(4))\n    PLAYNOTES(As4, FREQ_As(4))\n    PLAYNOTES(B4,  FREQ_B(4))\n    PLAYNOTES(C5,  FREQ_C(5))\n    PLAYNOTES(Cs5, FREQ_Cs(5))\n    PLAYNOTES(D5,  FREQ_D(5))\n    PLAYNOTES(Ds5, FREQ_Ds(5))\n    PLAYNOTES(E5,  FREQ_E(5))\n    PLAYNOTES(F5,  FREQ_F(5))\n    PLAYNOTES(Fs5, FREQ_Fs(5))\n    PLAYNOTES(G5,  FREQ_G(5))\n    PLAYNOTES(Gs5, FREQ_Gs(5))\n    PLAYNOTES(A5,  FREQ_A(5))\n    PLAYNOTES(As5, FREQ_As(5))\n    PLAYNOTES(B5,  FREQ_B(5))\n    PLAYNOTES(C6,  FREQ_C(6))\n    PLAYNOTES(Cs6, FREQ_Cs(6))\n    PLAYNOTES(D6,  FREQ_D(6))\n    PLAYNOTES(Ds6, FREQ_Ds(6))\n    PLAYNOTES(E6,  FREQ_E(6))\n    PLAYNOTES(F6,  FREQ_F(6))\n    PLAYNOTES(Fs6, FREQ_Fs(6))\n    PLAYNOTES(G6,  FREQ_G(6))\n    PLAYNOTES(Gs6, FREQ_Gs(6))\n    PLAYNOTES(A6,  FREQ_A(6))\n    PLAYNOTES(As6, FREQ_As(6))\n    PLAYNOTES(B6,  FREQ_B(6))\n    PLAYNOTES(C7,  FREQ_C(7))\n    PLAYNOTES(D7,  FREQ_D(7))\n    PLAYNOTES(E7,  FREQ_E(7))\n\n    return a;\n}\n\nfloat channel2(float t)\n{\n    float x = 0.0;\n    float a = 0.0;\n    float volume = 0.0;\n\n    // I tried using an array here, but it was too slow, and this managed to be faster somehow.\n    float Gs1=-10.,A1=-10.,As1=-10.,\n          C2=-10.,Cs2=-10.,D2=-10.,Ds2=-10.,E2=-10.,F2=-10.,Fs2=-10.,G2=-10.,Gs2=-10.,A2=-10.,As2=-10.,B2=-10.,\n          C3=-10.,Cs3=-10.,D3=-10.,Ds3=-10.,E3=-10.,F3=-10.,Fs3=-10.,G3=-10.,Gs3=-10.,A3=-10.,As3=-10.,B3=-10.,\n          C4=-10.,Cs4=-10.,D4=-10.,Ds4=-10.,E4=-10.,F4=-10.,Fs4=-10.,G4=-10.,Gs4=-10.,B4=-10.,\n          C5=-10.,Cs5=-10.,Ds5=-10.,E5=-10.;\n\n    CHANNEL2\n\n    PLAYNOTES(Gs1, FREQ_Gs(1))\n    PLAYNOTES(A1,  FREQ_A(1))\n    PLAYNOTES(As1, FREQ_As(1))\n    PLAYNOTES(C2,  FREQ_C(2))\n    PLAYNOTES(Cs2, FREQ_Cs(2))\n    PLAYNOTES(D2,  FREQ_D(2))\n    PLAYNOTES(Ds2, FREQ_Ds(2))\n    PLAYNOTES(E2,  FREQ_E(2))\n    PLAYNOTES(F2,  FREQ_F(2))\n    PLAYNOTES(Fs2, FREQ_Fs(2))\n    PLAYNOTES(G2,  FREQ_G(2))\n    PLAYNOTES(Gs2, FREQ_Gs(2))\n    PLAYNOTES(A2,  FREQ_A(2))\n    PLAYNOTES(As2, FREQ_As(2))\n    PLAYNOTES(B2,  FREQ_B(2))\n    PLAYNOTES(C3,  FREQ_C(3))\n    PLAYNOTES(Cs3, FREQ_Cs(3))\n    PLAYNOTES(D3,  FREQ_D(3))\n    PLAYNOTES(Ds3, FREQ_Ds(3))\n    PLAYNOTES(E3,  FREQ_E(3))\n    PLAYNOTES(F3,  FREQ_F(3))\n    PLAYNOTES(Fs3, FREQ_Fs(3))\n    PLAYNOTES(G3,  FREQ_G(3))\n    PLAYNOTES(Gs3, FREQ_Gs(3))\n    PLAYNOTES(A3,  FREQ_A(3))\n    PLAYNOTES(As3, FREQ_As(3))\n    PLAYNOTES(B3,  FREQ_B(3))\n    PLAYNOTES(C4,  FREQ_C(4))\n    PLAYNOTES(Cs4, FREQ_Cs(4))\n    PLAYNOTES(D4,  FREQ_D(4))\n    PLAYNOTES(Ds4, FREQ_Ds(4))\n    PLAYNOTES(E4,  FREQ_E(4))\n    PLAYNOTES(F4,  FREQ_F(4))\n    PLAYNOTES(Fs4, FREQ_Fs(4))\n    PLAYNOTES(G4,  FREQ_G(4))\n    PLAYNOTES(Gs4, FREQ_Gs(4))\n    PLAYNOTES(B4,  FREQ_B(4))\n    PLAYNOTES(C5,  FREQ_C(5))\n    PLAYNOTES(Cs5, FREQ_Cs(5))\n    PLAYNOTES(Ds5, FREQ_Ds(5))\n    PLAYNOTES(E5,  FREQ_E(5))\n\n    return a;\n}\n\nvec2 mainSound( int samp, float time )\n{\n    time = timeTrack(time);\n\n    vec2 sound = vec2(0);\n\n    float right = channel1(time) * 0.25;\n    float left = channel2(time) * 0.25;\n\n    // mix the channels\n    sound += left * vec2(0.7, 0.3);\n    sound += right * vec2(0.3, 0.7);\n    \n    return sound;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}