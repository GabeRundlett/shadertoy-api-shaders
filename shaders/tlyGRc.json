{
    "Shader": {
        "info": {
            "date": "1579471362",
            "description": "once upon a time when i first saw the internals of a kaleidoscope, i wondered what would happen if the mirrors in it were arranged in a pentagon and not a triangle/square, so i coded this little thing up to answer that question.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlyGRc",
            "likes": 2,
            "name": "weird kaleidoscope",
            "published": 3,
            "tags": [
                "2d",
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "unnick",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "#define res iResolution\n#define TAU 6.283185\n\nvoid mainImage(out vec4 col, in vec2 _pos) {\n    //get [-1,1] position\n    vec2 pos = (_pos*2. - res.xy) / res.y;\n    \n    //the number of sides\n    float numSides = iMouse.z > .5 ? iMouse.x/iResolution.x * 6. + 3. : sin(iTime * .3) + 4.;\n    \n    //ray direction, pos, and z\n    vec2 rd = pos * 4.;\n    vec2 ro = vec2(0);\n    float z = 0.;\n    \n    //attenuation factor (see line 52)\n    float att = 1.;\n    \n    for(int bounce = 0; bounce < 16; bounce++) {\n        //the normal and the distance to the nearest line that intersects with the ray\n        float fd = 100000.;\n        vec2 fnorm;\n        \n        //check all lines (mirrors) in an ngon for intersections\n        for(int line = 0; line < int(ceil(numSides)); line++) {\n            float a = float(line) / numSides;\n            \n            //get the origin, direction, and normal of a line\n            vec2 lo = vec2(sin(a * TAU), cos(a * TAU));\n            vec2 ld = vec2(cos(a * TAU), -sin(a * TAU));\n            vec2 norm = ld.yx * vec2(1,-1);\n            \n            //back-face culling (that also prevents a ray from hitting the same line twice)\n            if(dot(norm, rd) > 0.) continue;\n            \n            //get the distance to the intersection\n            float dist = (inverse(mat2(rd, ld)) * (lo - ro)).x;\n            \n            if(dist > -.0001 && dist < fd) {fd = dist; fnorm = norm;}\n        }\n        \n        //if the ray exits the kaleidoscope before it hits the mirror,\n        //move ray origin as far as it can go before it exits.\n        if(z + fd > 1.) {\n            ro += rd * (1. - z);\n            break;\n        }\n        \n        //increase z by the distance to the mirror\n        z += fd;\n        //move ray origin to the intersection\n        ro += rd * fd;\n        //reflect ray direction\n        rd = reflect(rd,fnorm);\n        //attenuate the reflected light a bit\n        att *= .9;\n    }\n    \n    //texture lookup\n    col = texture(iChannel1, rd) * att;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}