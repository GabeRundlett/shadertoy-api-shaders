{
    "Shader": {
        "info": {
            "date": "1721138153",
            "description": "it's searching for sins and cosines in your soul...",
            "flags": 8,
            "hasliked": 0,
            "id": "lcfcDN",
            "likes": 14,
            "name": "Rageye",
            "published": 3,
            "tags": [
                "flame",
                "eye",
                "iris",
                "pupil",
                "sclera"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 221
        },
        "renderpass": [
            {
                "code": "vec2 hash21(float n) {\n    return fract(sin(vec2(n, n + 1.0)) * vec2(43758.5453123, 22578.1459123)) * 2.0 - 1.0;\n}\n\nfloat hash11(float n) {\n    return fract(sin(n) * 43758.5453123) * 2.0 - 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y) * 0.7;\n    float f = length(fwidth(uv)) * 4.5;\n\n    float anim = smoothstep(0.85, 0.92, abs(sin(iTime * 0.5)));\n    \n    float a = 0.04 - hash11(iTime) * anim * 0.01;\n    uv = cos(a) * uv + sin(a) * vec2(-uv.y, uv.x);\n    uv -= vec2(0.06, 0.3);\n    \n    uv += normalize(hash21(iTime)) * 0.01 * anim;\n    \n    float BLINK = smoothstep(0.0, 0.1, abs(sin(iTime * 0.5))) * 0.7 + 0.4 - anim * 0.1; // + anim * 0.8 for creepy result\n    float sclera = distance(uv * vec2(0.5, -0.85 / BLINK), vec2(0)) - 0.5;\n    sclera = max(sclera, distance(uv * vec2(0.18, -1.0 / BLINK), vec2(-0.15, 0.4 / BLINK)) - 0.3);\n    float sclera_mask = smoothstep(f, 0.0, sclera);\n    \n    vec2 IRIS_POS = vec2(-0.05, -0.4) - normalize(hash21(-iTime * 0.7)) * 0.01 * anim;\n    float iris = distance(uv, IRIS_POS) - 0.3 + anim * 0.1;\n    float iris_mask = smoothstep(f, 0.0, iris) * sclera_mask;\n    float iris_angle = abs(atan(uv.y - IRIS_POS.y, uv.x - IRIS_POS.x));\n    \n    \n    vec3 sclera_col = vec3(1) * smoothstep(f, 0.0, sclera);\n    sclera_col -= max(vec3(0), sin(iris * iris * 2.0 - vec3(0.015, 0.421, 0.585))) * (1.0 - iris_mask); // Sclera Color\n    vec3 col = sclera_col; \n    col -= max(vec3(0), 1.0 - vec3(0.193,0.562,0.890) - iris) * iris_mask; // Iris Color\n    col += (0.5 + col) * smoothstep(-0.1, 0.05, iris) * iris_mask; // Iris Glow\n    col -= smoothstep(-0.12, -0.2, iris); // Pupil\n    col -= 0.4 * smoothstep(-0.05, 0.05, sclera); // Sclera Darken\n    col += cos(iris_angle * 11.0 + cos(iris_angle * 18.0 - iris * 38.0 + iTime * 2.1)) * cos(iris_angle * 12.0) * iris_mask * 0.2; // Iris Texture\n    col = max(vec3(0), col);\n    col += vec3(0.063,0.396,0.655) * (1.0 - sclera_mask); // Background\n    col += vec3(1.000,0.366,0.318) * 0.013 / max(0.001, sclera * sclera) * sclera * (1.0 - sclera_mask); // Glow\n    col *= smoothstep(0.7, 0.5, 0.013 / max(0.0001, sclera)) + sclera_mask; // Eye Darks?\n    col -= smoothstep(0.1, 0.2, 0.013 / max(0.0001, sclera)) * (1.0 - sclera_mask) * max(0.0, -sin(uv.y * 13.0 + uv.x * (2.0 + uv.x))) * (0.5 - 0.5 * uv.x); // Eye Lashes\n    col += 0.0035 / max(0.001, sclera) * (1.0 - sclera_mask + smoothstep(0.7, 0.5, 0.013 / max(0.0001, sclera))) * (0.5 + 0.5 * uv.x);\n    col = clamp(col, vec3(0), vec3(1));\n    \n    // Try messing with these lines, it produces cool results\n    col = 1.0 - col;\n    if (sin(iTime * 0.5) >= 0.0)\n        col = dot(col, col) * (1.0 - col);\n    col = dot(col, col) * (1.0 - col);\n    col = dot(col, col) * (uv.x * 0.5 + 0.95 - col);\n    col *= 1.0 + anim * 0.25; // anim * 0.6 for more intensity\n    col = dot(col, col) * (1.0 - col);\n    col = pow(col, vec3(1.0 + anim * 2.0));\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float noise(vec2 p) {\n    return smoothstep(-0.5, 0.9, sin((p.x - p.y) * 555.0) * sin(p.y * 1444.0)) - 0.4;\n}\n\nfloat fabric(vec2 p) {\n    const mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\n    float f = 0.0;\n    f += 0.4 * noise(p); p = m * p;\n    f += 0.3 * noise(p); p = m * p;\n    f += 0.2 * noise(p); p = m * p;\n    f += 0.1 * noise(p);\n    return f;\n}\n\n\nvec2 mainSound(int samp, float t) {\n    float anim = smoothstep(0.85, 0.99, abs(sin(t * 0.5)));\n    float s = fabric(vec2(0, t) * (0.09 + sqrt(anim) / t * 0.1));\n    return vec2(s) * 0.4;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}