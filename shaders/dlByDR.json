{
    "Shader": {
        "info": {
            "date": "1691645837",
            "description": "An arabesque knot pattern.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "dlByDR",
            "likes": 5,
            "name": "Arabesque knots 5 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "knot",
                "arabesque"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 191
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n        //min(abs(f1((a1)*(a2.x+a2.y))-.5),abs(f1((1.-a1/2.)*(a2.x+a2.y))-.5))\n    ;\n}\n\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 1.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1;\n    vec2 t2 = vec2(0.);\n    for(int k = 0; k < 6; k++){\n        //uv.x += 1./4.;\n        \n        uv =\n            abs(.5+uv+t2)\n            //abs(.5+uv+t2)*sign(uv.y/1.5-uv.x)\n        ;\n        //uv = -(fract(vec2(uv+vec2(.5,1.5))*3.)-.5)/3.;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*3.)-.5)/3.;\n        \n        if(k%3 == 0) uv += .5; else uv /= 1.5;\n        bool b = uv.y>uv.x;\n        if(\n            b\n            //b||t2.y<t2.x&&!b\n            //b&&t2.y>t2.x\n            //b&&t2.y<t2.x\n        ) uv = uv.yx;\n        //else col = col.yzx;\n        //else k -= 1;\n        t2 =\n            -triangle_wave(uv-.5)\n            //-triangle_wave(uv-.5)-floor(t2)\n        ;\n        uv =\n            t2-triangle_wave(uv.yx)\n        ;\n        //if(b||t2.y<t2.x)\n        col =\n            vec3(col.zx,max(uv.x-uv.y,0.))\n            //vec3(col.xy,max(uv.x-uv.y,col.z)).yzx\n            //abs(vec3(col.zx,max(uv.x-uv.y,-col.y)))\n        ;\n        //uv += triwave1_((uv+iTime));\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float m1(float a, float b, float c){\n    return floor(floor(floor(a)/b)/c);\n}\n\nfloat mod1(float a,float b){\n    return \n        mod(a,b)\n        //mod(a+mod(a,3.)-mod(a,5.),b)\n    ;\n}\n\nvoid distort(inout float a, inout float b){\n    for(float i = 1.; i < mod(floor(a/b),3.); i++){\n        a /= 2.;\n        a += mod1(floor(a/2.),b);\n    }\n}\n\nfloat fmod(float a, float b){\n    //distort(a,b);\n    \n    //a *= (1.+mod(floor(a/8.),2.));\n    //a += m1(a/8.,5.+b,3.+b);\n    //a += mod(b/2.,2.);\n    return\n        mod1(mod1(8.+floor(a/8.),b*2.+floor(b*a)-floor(a/8.)),b)\n        //mod(mod(8.+floor(a/2.),8.+floor(a)),b)\n        //mod(floor(a/b-mod(a/8.,2.)+mod(a/8.,3.)),b)\n        //mod(floor(a/2.),b)*mod(floor(a/b)*floor(a/b),b/2.)\n        //mod(floor(8./b+a*b/8./2.),b)\n        //mod(mod(floor(8./b+a*b/8./2.),b+floor(a/8./2.)),b)\n        //mod(mod(8.+floor(a/8.+b/8.),b*2.+floor(b*a+8./b)-floor(a/8.+8./b)),b)\n    ;\n}\n\n#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n\nvec2 mainSound1(int samp, float time,float scale){\n  time /= 2.;\n  float s1 =\n      8.,\n  s2 = 8.,\n  t = time/4.,\n  m1 = fmod(t*8.,s1/2.),\n  p1 = pow(2.,m1)\n  ;\n  t = \n      s1*pow(2.,fmod(t*16.+m1,2.))*t/(1.+fmod(floor(t*4.),2.))\n      //s1*pow(2.,fmod(t*8.+m1,3.))*t;\n  ;\n\n  float\n  m3 =\n      floor(fmod(time*8.*p1,s1/2.)/2.)\n  ;\n  float m2 =\n      1. + fmod(t*8.,s1/2.)\n      //1. + fmod((t+floor(t/8.))*8.,s1/2.)\n  ;\n  float a=\n      //128.*pow((1.-sqrt(fract(t)/2.))/2.,2.)\n      //pow(log(fract(t)/8.),2.)\n      \n      //gamelan\n      pow(log(.125+fract(t)/4.),2.)\n\n      \n  ;\n  float nb = time*pow(2.,(m3+m2-m1)/7.+scale);\n  return\n      //abs(.5-vec2(fract(nb*.998),fract(nb)))*a\n      \n      //gamelan\n      a/16./2.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb*4.*.998),fract1(nb*4.)))/2.))\n      +.5*log(1./4.+a*abs(1./4.-abs(.5-vec2(fract1(nb*2.*.998),fract1(nb*2.)))/2.)))   \n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      //log(1./8.+a*abs(1./8.-abs(.5-vec2(fract(nb*.998),fract(nb/2.)))))\n      \n      //log(1.+abs(a/32.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      //abs(.5-abs(.5-vec2(fract(nb*.998),fract(nb)))*a)\n  ;\n}\n\nvec2 mainSound(int a,float b){\n    return\n    //mainSound1(a,b,8.);\n    \n    //abs(mainSound1(a,b,8.)-mainSound1(a,b,8.5)/4.)\n\n    (mainSound1(a,b,8.)+mainSound1(a*2,b/2.,8.)+mainSound1(a*4,b/4.,8.))/3.\n    //(mainSound1(a,b*2.,6.)+mainSound1(a,b*4.,4.))/2.;\n    //mainSound1(a,b,8.)+mainSound1(a,b*2.,8.)/2.+mainSound1(a,b*4.,8.)/4.+mainSound1(a,b/8.,8.)/8.;\n    ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}