{
    "Shader": {
        "info": {
            "date": "1633416357",
            "description": "rotating 2d area lights by Ori Hanegby,\ninspired by the thread here: https://www.facebook.com/groups/shadertoy/posts/954364335144593\n",
            "flags": 0,
            "hasliked": 0,
            "id": "fscXzS",
            "likes": 30,
            "name": "rotating 2d area lights lines",
            "published": 3,
            "tags": [
                "lighting",
                "arealights"
            ],
            "usePreview": 0,
            "username": "ohanegby",
            "viewed": 704
        },
        "renderpass": [
            {
                "code": "// Rotating Area Lights Lines\n// By Ori Hanegby\n// Inspired by this thread: \n// https://www.facebook.com/groups/shadertoy/posts/954364335144593\n// Line segment code from iq's tutorials: https://iquilezles.org/articles/distfunctions2d\n// Tone mapping code from here: https://www.shadertoy.com/view/7scXD4\n\n\nfloat line_segment(in vec2 p, in vec2 a, in vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn length(pa - h * ba);\n}\n\n\n// In order to calculate the area light I'm treating the line area as continous line of infinite directional light sources\n// To calculate how much light each point (uv) receives I'm using two factors: the distance from the line to the point and the integration of \n// all the sin(angle) between the point and the light sources on the line. The integral between angles b and a on the line segment have an easy solution\n// -cos(b)+cos(a) \n// cos(b) and cos(a) are given by the dot products between the two edges on of the line that are stored in l1 and l2\n// the integral result is multiplied by hh which gives control of the light intensity relative to the distance from the line\n// In order to know which side of the line the point resides on I'm using cross product where the sign of the z component indicates the direction\nvec2 area_light_intensity(vec2 p, vec2 v1, vec2 v2, float diffusePower, float shinePower)\n{  \n    vec2 areaLine = normalize(v2-v1);\n    float l1 = dot(normalize(p-v1),areaLine);\n    float l2 = dot(normalize(p-v2),areaLine);\n    vec3 crs=cross(vec3(p-v1,0.),vec3(areaLine,0.));\n    float d = line_segment(p,v1,v2);\n    float hh=max(0.,pow(max(0.01,shinePower-d),4.5));\n    float c=(-l2 + l1)*hh;\n    return vec2(pow(c,diffusePower),crs.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv =  (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv*=6.;\n    float t=0.;\n    float c=0.;\n    vec3 col=vec3(0.);\n    for (int i=0; i<3; i++){\n        t+=1.;\n        float angle = iTime/10. + t*5.;\n\n        vec2 line = vec2(sin(angle),cos(angle));\n        float s=1.6;    \n        vec2 v1 = -line*s;\n        vec2 v2 = line*s;  \n        vec2 disp = vec2(sin(t*2.1),cos(t*2.1))*2.;\n        v1 += disp;\n        v2 += disp;\n        vec2 intes_w_sign=area_light_intensity(uv, v1, v2, 1., 5.);\n        float intens=intes_w_sign.x/pow(2.,7.);\n        vec3 tCol = intes_w_sign.y>0.?vec3(1.0,0.25,0.05) * intens:\n        vec3(1.0,0.12,0.02) * intens/5.;        \n        col += tCol;\n    }\n\n    \n    col = col / (1. + col); // Tone mapping\n    col = sqrt(col); // Gamma\n    \n    fragColor = vec4(col, 1);       \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}