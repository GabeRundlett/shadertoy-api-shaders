{
    "Shader": {
        "info": {
            "date": "1447170108",
            "description": "Test for shorter starfield. This one is based on texture advection.\nI'm sure it's possible to do nicer + shorter ;-)",
            "flags": 0,
            "hasliked": 0,
            "id": "4tBSWd",
            "likes": 5,
            "name": "star field 2 ",
            "published": 3,
            "tags": [
                "texture",
                "advection",
                "starfield",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1400
        },
        "renderpass": [
            {
                "code": "// Test for shorter starfield. \n// This one is based on texture advection and image-based stars.\n// see also https://www.shadertoy.com/results?query=starfield&sort=newest\n\n\nfloat D=8., Z=3.;               // D: duration of advection layers, Z: zoom factor\n\n#define M(U,t) 1.3*length( texture(iChannel0, U/exp2(t) ) - .5 )\n                                //  variant: U/exp2(t)+P.x, to randomise more the layers\n    \nvoid mainImage( out vec4 o,  vec2 U )\n{\n    o = vec4(0.0);\n    U = U / iResolution.xy - .5;\n\n    // --- prepare the timings and weightings of the 3  texture layers\n\n    vec3 P = vec3(-1,0,1)/3., T,\n         t = fract( iTime/D + P +.5 )-.5,  // layer time\n         w = .5+.5*cos(6.28*t);                  // layer weight\n    t = t*D+Z;  \n    \n    // --- prepare the 3 texture layers\n\n    T.x = M(U,t.x),  T.y = M(-U,t.y),  T.z = M(U.yx,t.z); // avoid using same U for all layers\n    //T = sin(100.*U.x/exp2(t3))+sin(100.*U.y/exp2(t3));  // try this for obvious pattern\n    T = smoothstep(.9,1.,T);    // try without this to see base noise (and play with D)\n    \n    // --- texture advection: cyclical weighted  sum\n\n    o += dot(w,T);\n    // o.rgb = w*T;             // try this alternative to see the 3 layers of texture advection\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}