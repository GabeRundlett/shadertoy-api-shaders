{
    "Shader": {
        "info": {
            "date": "1397250804",
            "description": "Was playing around with a physically reasonable rainbow palette function, so I decided to dump it into my classic Sine Puke, famous for being a five-minute test function endlessly copypasted on glsl.heroku.org. Please steal this and make lots of rainbows!",
            "flags": 0,
            "hasliked": 0,
            "id": "4dXXzN",
            "likes": 37,
            "name": "Sine Puke II",
            "published": 3,
            "tags": [
                "sine",
                "rainbow",
                "puke",
                "copypasterfavourites"
            ],
            "usePreview": 0,
            "username": "WAHa_06x36",
            "viewed": 2180
        },
        "renderpass": [
            {
                "code": "// Sine Puke II, by WAHa.06x36.\n// Same as my original Sine Puke, but with more rainbow, and less \"newp\".\n\n// Based on code by Spektre posted at http://stackoverflow.com/questions/3407942/rgb-values-of-visible-spectrum\nvec3 spectral_colour(float l) // RGB <0,1> <- lambda l <400,700> [nm]\n{\n\tfloat r=0.0,g=0.0,b=0.0;\n         if ((l>=400.0)&&(l<410.0)) { float t=(l-400.0)/(410.0-400.0); r=    +(0.33*t)-(0.20*t*t); }\n    else if ((l>=410.0)&&(l<475.0)) { float t=(l-410.0)/(475.0-410.0); r=0.14         -(0.13*t*t); }\n    else if ((l>=545.0)&&(l<595.0)) { float t=(l-545.0)/(595.0-545.0); r=    +(1.98*t)-(     t*t); }\n    else if ((l>=595.0)&&(l<650.0)) { float t=(l-595.0)/(650.0-595.0); r=0.98+(0.06*t)-(0.40*t*t); }\n    else if ((l>=650.0)&&(l<700.0)) { float t=(l-650.0)/(700.0-650.0); r=0.65-(0.84*t)+(0.20*t*t); }\n         if ((l>=415.0)&&(l<475.0)) { float t=(l-415.0)/(475.0-415.0); g=             +(0.80*t*t); }\n    else if ((l>=475.0)&&(l<590.0)) { float t=(l-475.0)/(590.0-475.0); g=0.8 +(0.76*t)-(0.80*t*t); }\n    else if ((l>=585.0)&&(l<639.0)) { float t=(l-585.0)/(639.0-585.0); g=0.82-(0.80*t)           ; }\n         if ((l>=400.0)&&(l<475.0)) { float t=(l-400.0)/(475.0-400.0); b=    +(2.20*t)-(1.50*t*t); }\n    else if ((l>=475.0)&&(l<560.0)) { float t=(l-475.0)/(560.0-475.0); b=0.7 -(     t)+(0.30*t*t); }\n\n\treturn vec3(r,g,b);\n}\n\nvec3 spectral_palette(float x) { return spectral_colour(x*300.0+400.0); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p=(2.0*fragCoord.xy-iResolution.xy)/max(iResolution.x,iResolution.y);\n\tfor(int i=1;i<50;i++)\n\t{\n\t\tp=p+vec2(\n\t\t\t0.6/float(i)*sin(float(i)*p.y+iTime+0.3*float(i))+1.0,\n\t\t\t0.6/float(i)*sin(float(i)*p.x+iTime+0.3*float(i+10))-1.4\n\t\t);\n\t}\n\tvec3 col=spectral_palette(p.x-48.5);\n\tfragColor=vec4(pow(col,vec3(1.0/2.2)),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}