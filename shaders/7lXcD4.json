{
    "Shader": {
        "info": {
            "date": "1648189703",
            "description": "My first attempt at a path tracing/GI renderer. ",
            "flags": 32,
            "hasliked": 0,
            "id": "7lXcD4",
            "likes": 6,
            "name": "Basic pathtracer. Menger fractal",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fast",
                "exact"
            ],
            "usePreview": 0,
            "username": "El_Sargo",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv)/float(iFrame);\n    fragColor = smoothstep(0.,.17,col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define rotations\n\n//Heavy performance impact \n#define raymarchSteps 100\n//\n#define ZERO min(iFrame, 0)\n\n//SDF stuff....\nconst float pi = 3.14159265359;\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdSphere(vec3 p, float r){\n    return length(p) -r;\n}\n\nmat2 rotate(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s,\n                -s, c);\n}\nvec3 trans(vec3 p, float s){\n        //Mirror\n        p = abs(p)-1.*s;\n        p *= -1.;\n        //Reflect column\n        p.xy = ((p.x - p.y > 0.) ? p.yx : p.xy);  \n        p.zy = ((p.z - p.y > 0.) ? p.yz : p.zy);  \n\n        //construct column\n        p.y = (abs(p.y-0.5*s)-0.5*s);\n        \n        return p;\n}\n\n// yes you can use a loop, but I wanted controll over the rotations\nvec4 map(vec3 p) {\n\n    const float scale = 260.;\n\n    p*= scale;\n    \n    #ifdef rotations\n    p = trans(p, 27.*9.);\n    p.xy *= rotate(13.2);\n    p = trans(p, 27.*3.);\n    p.zy *= rotate(1.2);\n    p = trans(p, 27.);\n    p.xz *= rotate(13.12);\n    p = trans(p, 9.);\n    p.yz *= rotate(1.12);\n    p = trans(p, 3.);\n    p.yz *= rotate(6.12);\n    p = trans(p, 1.);\n    #else\n    p = trans(p, 27.*9.);\n    p = trans(p, 27.*3.);\n    p = trans(p, 27.);\n    p = trans(p, 9.);\n    p = trans(p, 3.);\n    p = trans(p, 1.);\n    \n    #endif\n\n    return vec4(sdBox(p, vec3(.5))/scale - 0.005, p);\n}\n\nvec3 calcNormal( in vec3 p )\n{\n    const float h = 0.0001;\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*h).x;\n    }\n    return normalize(n);\n}\n\n\n\nfloat intersection(vec3 ro, vec3 rd){\n    float dist;\n    float T;\n    for (int i = 0; i < raymarchSteps; i++){\n        dist = map(ro+rd*T).x;\n        T+=dist;\n        if (dist < 0.00001 || dist > 2.)\n            break;\n    }\n    \n    return T;\n\n}\n\nconst vec3 sun = normalize(vec3(1.3,1.,2.1));\nconst vec3 amb = vec3(0.7,0.8,0.9);\nconst vec3 suc = vec3(.6,0.5,0.3);\n//Dosn't actually need an array, just makes it easer to use many materials\n// Pbr also wasn't implemented\nconst vec3[] colors = vec3[](amb,vec3(0.2,0.3,0.2));\n\n//A realy crappy random function\nfloat hash(vec2 uv){\n    return fract(sin(dot(vec3(uv+iTimeDelta,iTime), vec3(12.9898, 78.233, 40.1231))) * 43758.5453);\n}\n//Random direction\nvec3 hash3(vec2 uv){\n    vec3 r = vec3(\n        hash(uv+2.513521*iTime),\n        hash(uv+2520.235-iTime),\n        hash(uv+124.124/iTime)\n    );\n    \n    r -= 0.5;\n    \n    return normalize(r);\n}\n\n\n\n//iq\nvec2 boxIntersection( in vec3 ro, in vec3 rd, vec3 boxSize, out vec3 outNormal ) \n{\n    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(-1.0); // no intersection\n    outNormal = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n    return vec2( tN, tF );\n}\n\n\nstruct world {\n    int  id;\n    vec3 pos;\n    vec3 nor;\n    float dis;\n};\n\nworld wolrdIntersect(vec3 ro, vec3 rd){\n    vec3 nor = vec3(0);\n    float d = 10e10;\n    int id = 0;\n    //fractal\n    {\n        float md = intersection(ro,rd);\n        if (map(ro+rd*md).x < 0.1 && md < d){\n            id = 1;\n            nor = calcNormal(ro+rd*md);\n            d = md;\n        }\n    }\n    return world(id,ro+d*rd,nor, d);\n}\n\n//Trace a path away from the shape and return 1 if we hit nothing\nfloat getShadow(vec3 p, vec3 rd){\n    rd = normalize(rd+ hash3(rd.xz*p.yz)*0.1);\n    p+=0.001*rd;\n    return wolrdIntersect(p, rd).id == 0 ? 1. : 0.;\n}\n\n//Shadow ray in a random direction\nfloat getAmbiance(vec3 p, int i){\n    vec3 rd = hash3(p.xz*abs(p.yz)+p.xy+float(i*i));\n    \n    return getShadow(p+0.001*rd,rd);\n}\n\nstruct ligt {\n    vec3 scl;\n    float sha;\n    float amb;\n};\nvec3 render(vec3 ro, vec3 rd){\n    vec3 dir = rd;\n    vec3 p = ro;\n    //GI bounces\n    const int iter = 1;\n    \n    ligt[iter] lig;\n    //Get light\n    for (int i=0;i<iter;i++){\n\n        world w = wolrdIntersect(p, dir);\n        float sha = getShadow(w.pos, sun);\n\n        //Colors\n        if (w.id==0){\n            if (i==0)\n                //Sky\n                return amb*0.2;\n             else {\n                break;\n            }\n        }\n        \n        float am = 0.;\n        for(int a=0;a<4;a++){\n            am += getAmbiance(w.pos,a)/2.;\n        }\n        \n        lig[i] = ligt(colors[w.id], sha, am);\n        \n        dir = hash3(dir.xz+w.pos.yz);\n        dir *= -sign(dot(w.nor,dir));\n        p = w.pos;\n\n    }\n    vec3 col = vec3(0);\n    for (int i=iter-1;i>-1;i--) {\n    \n         vec3 scl = lig[i].scl;\n         float sha = lig[i].sha;\n         float am = lig[i].amb;\n         \n          //prevoius bounce\n          col = col*scl+\n                //sun light\n                scl*sha*suc+\n                //ambient light\n                scl*am*amb;\n\n    }\n    \n    return col;\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 o = hash3(uv).xz/iResolution.xy*0.5;\n    vec3 rd = normalize(vec3(\n            (uv-0.5)*vec2(1.,iResolution.y/iResolution.x)+o,\n            1.));\n            \n    rd.xz *= rotate(0.02);\n    rd.yz *= rotate(0.03);\n\n    vec3 ro = vec3(0,-0.2,-1.5);\n\n    vec3 col = render(ro,rd);\n    \n    vec3 prev = texture(iChannel0, uv).xyz;\n    \n    col += prev;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}