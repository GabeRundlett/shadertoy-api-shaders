{
    "Shader": {
        "info": {
            "date": "1670951196",
            "description": "template",
            "flags": 0,
            "hasliked": 0,
            "id": "DdSXWK",
            "likes": 8,
            "name": "oled display",
            "published": 3,
            "tags": [
                "template"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 363
        },
        "renderpass": [
            {
                "code": "float f_n_dist_redled(\n    vec2 o\n){\n    float n_tau = 6.2831;\n    float n_angle = n_tau/8.;\n    vec2 o_rotated = vec2(\n        cos(n_angle)*o.x+-sin(n_angle)*o.y, \n        sin(n_angle)*o.x+cos(n_angle)*o.y\n    );\n    \n    float n = length(o_rotated*o_rotated);\n    float n_intensity = 4.;\n    n = pow((pow(abs(o_rotated.x), n_intensity))+(pow(abs(o_rotated.y), n_intensity)), 1./n_intensity);\n    n = smoothstep(0.2, 0.23, n);\n    \n    float n_dist_circle = length(o_rotated)*3.;//glow\n    n = n * n_dist_circle;\n    return 1.-n;\n}\nfloat f_n_dist_greenled(\n    vec2 o\n){\n    float n_tau = 6.2831;\n    float n_angle = n_tau/8.;\n    vec2 o_rotated = vec2(\n        (cos(n_angle)*o.x+-sin(n_angle)*o.y), \n        (sin(n_angle)*o.x+cos(n_angle)*o.y)*1.2\n    );\n    \n    float n = length(o_rotated);\n    n = smoothstep(0.2, 0.23, n);\n    //n = max(abs(o_rotated.x), abs(o_rotated.y));\n    return 1.-n;\n    //return 1.-length(o)*2.;\n}\nfloat f_n_dist_blueled(\n    vec2 o\n){\n    float n_tau = 6.2831;\n    float n_angle = n_tau/8.;\n    vec2 o_rotated = vec2(\n        cos(n_angle)*o.x+-sin(n_angle)*o.y, \n        sin(n_angle)*o.x+cos(n_angle)*o.y\n    );\n    \n    float n = length(o_rotated*o_rotated);\n    float n_intensity = 8.;\n    n = pow((pow(abs(o_rotated.x), n_intensity))+(pow(abs(o_rotated.y), n_intensity)), 1./n_intensity);\n    n = smoothstep(0.3, 0.33, n);\n    \n    float n_dist_circle = length(o_rotated)*2.;//glow\n    n = n * n_dist_circle;\n    return 1.-n;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 o_trpino = (fragCoord.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trpino_nooffset = (fragCoord.xy )/ iResolution.y;\n    vec2 o_trmono = (iMouse.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trmono_nooffset = (iMouse.xy )/ iResolution.y;\n\n    vec2 o_scale = vec2(0.09);\n    \n    if(iMouse.z == 0.0){\n        o_trmono = vec2(sin(iTime), cos(iTime)*0.2);\n    }\n    if(o_trpino.x > o_trmono.x){\n        o_scale = vec2(o_trmono.y);\n    }\n    \n\n\n    vec2 o_fragCoord_scaled = ((fragCoord.xy)*o_scale);\n    vec2 o_iResolution_scaled = (iResolution.xy * o_scale);\n    vec2 o_trpino_scaled = (o_fragCoord_scaled.xy - o_iResolution_scaled.xy*0.5)/ o_iResolution_scaled.y;\n    vec2 o_trpino_nooffset_scaled = (o_fragCoord_scaled.xy)/ o_iResolution_scaled.xy;\n    \n    vec2 o_fragCoord_scaled_floor = floor(o_fragCoord_scaled);\n    vec2 o_iResolution_scaled_floor = floor(o_iResolution_scaled);\n    vec2 o_fragCoord_scaled_fract = fract(o_fragCoord_scaled);\n    vec2 o_iResolution_scaled_fract = fract(o_iResolution_scaled);\n       \n    vec2 o_pixels_per_coord = vec2(iResolution.xy*(vec2(1.)/o_scale.xy));\n    vec2 o = iResolution.xy/o_iResolution_scaled;\n    \n    o_fragCoord_scaled = ((fragCoord.xy+vec2(mod(o_fragCoord_scaled_floor.y, 2.)*o.x*0.5, 0.))*o_scale);\n    o_iResolution_scaled = (iResolution.xy * o_scale);\n\n    o_fragCoord_scaled_floor = floor(o_fragCoord_scaled);\n    o_iResolution_scaled_floor = floor(o_iResolution_scaled);\n    o_fragCoord_scaled_fract = fract(o_fragCoord_scaled);\n    o_iResolution_scaled_fract = fract(o_iResolution_scaled);\n    \n        \n    o_trpino_scaled = (o_fragCoord_scaled_floor.xy - o_iResolution_scaled_floor.xy*0.5)/ o_iResolution_scaled_floor.y;\n    o_trpino_nooffset_scaled = (o_fragCoord_scaled_floor.xy)/ o_iResolution_scaled_floor.xy;\n\n    float n_index = floor(o_fragCoord_scaled_floor.y * o_iResolution_scaled_floor.x + o_fragCoord_scaled_floor.x);\n    float n_index_nor = n_index / (o_iResolution_scaled_floor.x * o_iResolution_scaled_floor.y);\n    \n    float b_red = float(\n        bool(mod(o_fragCoord_scaled_floor.y,2.))\n        &&\n        bool(mod(o_fragCoord_scaled_floor.x+float(mod(o_fragCoord_scaled_floor.y,4.)<=1.),2.))\n    );\n    float b_blue = float(\n        bool(mod(o_fragCoord_scaled_floor.y,2.))\n        &&\n        bool(1.-b_red)\n    );\n    float b_green = float(\n        bool(mod(o_fragCoord_scaled_floor.y+1.,2.))\n    );\n    float b_green_rotated = float (\n     bool(b_green)\n     &&\n     bool(mod(o_fragCoord_scaled_floor.x,2.))\n    );\n    \n    float n_dist = length(o_fragCoord_scaled_fract-vec2(0.5));//shape\n\n    n_dist = sqrt(n_dist);\n    n_dist = 1.-n_dist;\n    n_dist -= (1.*b_red+1.*b_green+1.*b_blue);//size\n    n_dist *= (.8*b_red+0.5*b_green+1.0*b_blue);//brightness\n    \n    vec4 o_col_texture = texture(iChannel0, o_trpino_nooffset_scaled);\n    \n    vec2 o_led = o_fragCoord_scaled_fract-vec2(0.5);\n    \n    float n_tau = 6.2831;\n    float n_angle = n_tau/4.;\n    o_led = vec2(\n        cos(b_green_rotated*n_angle)*o_led.x+-sin(b_green_rotated*n_angle)*o_led.y, \n        sin(b_green_rotated*n_angle)*o_led.x+cos(b_green_rotated*n_angle)*o_led.y\n    );\n    \n    //o_col_texture *= o_col_texture; //gamma for stronger effect\n    fragColor = vec4(\n        o_col_texture.r*f_n_dist_redled(o_led)*b_red,\n        o_col_texture.g*f_n_dist_greenled(o_led)*b_green,\n        o_col_texture.b*f_n_dist_blueled(o_led)*b_blue,\n        1.\n    );\n    //fragColor = sqrt(fragColor);\n    \n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}