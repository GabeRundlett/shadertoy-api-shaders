{
    "Shader": {
        "info": {
            "date": "1473687880",
            "description": "Advance PVRTC : 4bpp.cost me 2.5 days : 1 day, reference articles to write Encoder,Data Encoder,Pixel Shader Decoder.1 day,try 14 methods to test \"Fast Data Store\",sign the \"Data Format\".0.5 day,Debug and Sign Format.Note:Buffer use half float!!!",
            "flags": 32,
            "hasliked": 0,
            "id": "ltV3zD",
            "likes": 19,
            "name": "My Little Daughter[PVRTC]",
            "published": 3,
            "tags": [
                "image",
                "life",
                "picture",
                "love",
                "girl",
                "daughter",
                "advance",
                "pvrtc"
            ],
            "usePreview": 0,
            "username": "834144373",
            "viewed": 2138
        },
        "renderpass": [
            {
                "code": "/***************************************************************************************\n1. Buffer A,B,C is Fast Store Data,I am sure the \"Fast Store Method\" is very fast complied\n   on the windows,and my android.It's the fast of my tested 14 methods.\n\n2. Buffer D is PVRTC \"Pixel Shader Decoder\",is also fast run on my windows.\n\n3. The Image is Simple Weight Blur to correct the color offset.\n\nNote: For some reason,I reference to the Windows10 Chrome 51.0.2704.106 Standard,\n\tso please make sure your browser version is newest!\n\tAnd make sure your GPU's driver is updated.\n\tBest to use your modern GPU.:)\n****************************************************************************************/\nconst vec2 Offset = vec2(1.,1.);\nvoid mainImage( out vec4 col,in vec2 u )\n{\n    u -= floor(vec2(0.25,0.06)*iResolution.xy);\n    u = u/iResolution.y*145.;\n    \n    /*Here Thanks for @coyote,the \"col\" is not inited at first when some pixels \n    * early return,so some system like Mac and Linux will be appear random value.\n\t*/\n    col = vec4(0,0,0,1);\n    if(u.x<2. || u.x>126. || u.y<0. || u.y > 127.)return;\n    col =  texture(iChannel3,u/iResolution.xy,0.)*4.;\n    col += texture(iChannel3,(u+vec2(0.,Offset.y))  /iResolution.xy,0.)*2.;\n    col += texture(iChannel3,(u+vec2(Offset.x,0.))  /iResolution.xy,0.)*2.;\n    col += texture(iChannel3,(u+vec2(Offset.x,Offset.y))  /iResolution.xy,0.);\n    col += texture(iChannel3,(u+vec2(Offset.x,-Offset.y)) /iResolution.xy,0.);\n    col += texture(iChannel3,(u+vec2(-Offset.x,Offset.y)) /iResolution.xy,0.);\n    col += texture(iChannel3,(u+vec2(-Offset.x,-Offset.y))/iResolution.xy,0.);\n    col += texture(iChannel3,(u+vec2(-Offset.x,0.)) /iResolution.xy,0.)*2.;\n\tcol += texture(iChannel3,(u+vec2(0.,-Offset.y)) /iResolution.xy,0.)*2.;\n\tcol /= 16.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 args = vec3(0.);\nvec3 c = vec3(0.);\nvoid B(vec3 a){\n\tif(args.r==args.g++)c.rgb=args.b<2.? mod(a,2048.): mod(floor(a/2048.),2048.);\n}\n\nvoid mainImage( out vec4 col,in vec2 u )\n{\n    col = texture(iChannel0,u/iResolution.xy);\n    u -= 0.5;\n    vec2 uv = vec2(0.);\n    uv = floor(u/4.);\n    if(uv.x >= 11. || uv.y >= 32.){discard;return;}\n    if(iFrame > 10) return;\n    args.r = uv.x * 32. + uv.y;\n    args.b = mod(u.x,4.); \n\n\tB(vec3(572927,1691375,982776));\n\tB(vec3(268477,1689167,851455));\n\tB(vec3(266320,944965,4176));\n\tB(vec3(301205,1555941,673093));\n\tB(vec3(437615,1830838,1023851));\n\tB(vec3(812863,1830911,1048575));\n\tB(vec3(881599,1898494,1048559));\n\tB(vec3(915391,1966079,1048575));\n\tB(vec3(949247,1966079,1048575));\n\tB(vec3(949247,1966079,1048575));\n\tB(vec3(915391,1966079,1048575));\n\tB(vec3(881599,1830847,1048491));\n\tB(vec3(848831,1830911,1048575));\n\tB(vec3(848831,1832959,1048575));\n\tB(vec3(816043,1832954,1032191));\n\tB(vec3(715686,1765369,749487));\n\tB(vec3(582506,1499050,431702));\n\tB(vec3(582527,1298303,1026986));\n\tB(vec3(582523,1232830,1048575));\n\tB(vec3(581498,1232826,764863));\n\tB(vec3(580394,1232762,764911));\n\tB(vec3(479977,1228522,431787));\n\tB(vec3(443924,1160772,20822));\n\tB(vec3(442860,1021071,36944));\n\tB(vec3(476712,1154186,57588));\n\tB(vec3(476728,1154250,57568));\n\tB(vec3(442856,1154186,41120));\n\tB(vec3(441812,1021061,37024));\n\tB(vec3(442856,1154186,41056));\n\tB(vec3(543294,1291610,304288));\n\tB(vec3(611967,1557935,633253));\n\tB(vec3(811711,1758650,785150));\n\tB(vec3(811839,1828795,1028031));\n\tB(vec3(811839,1826745,764927));\n\tB(vec3(201856,1830852,42239));\n\tB(vec3(66585,672154,611601));\n\tB(vec3(266324,1283173,370021));\n\tB(vec3(336074,1763057,739926));\n\tB(vec3(540079,1832958,1027947));\n\tB(vec3(881535,1966079,1048575));\n\tB(vec3(916479,1966079,1048575));\n\tB(vec3(916479,1966079,1048575));\n\tB(vec3(882623,1966079,1048575));\n\tB(vec3(881583,1830847,1048511));\n\tB(vec3(848831,1765375,1048575));\n\tB(vec3(816063,1765375,1048575));\n\tB(vec3(782270,1765375,1048575));\n\tB(vec3(681898,1566682,633594));\n\tB(vec3(582590,1300399,698793));\n\tB(vec3(582591,1234879,1043114));\n\tB(vec3(582591,1234879,1048575));\n\tB(vec3(582591,1300415,1048575));\n\tB(vec3(582527,1300415,1048575));\n\tB(vec3(547626,1232750,699134));\n\tB(vec3(477801,1160793,698794));\n\tB(vec3(476719,1156330,748181));\n\tB(vec3(543274,1221998,785151));\n\tB(vec3(577147,1226238,1047535));\n\tB(vec3(477758,1224111,1048319));\n\tB(vec3(442874,1224030,654010));\n\tB(vec3(476718,1221871,715434));\n\tB(vec3(543279,1226170,703210));\n\tB(vec3(613051,1558010,786431));\n\tB(vec3(746154,1758718,716799));\n\tB(vec3(811819,1828798,720638));\n\tB(vec3(846719,1828799,983039));\n\tB(vec3(402757,1828752,44799));\n\tB(vec3(66565,1008528,135268));\n\tB(vec3(200789,737685,87381));\n\tB(vec3(267353,938565,611669));\n\tB(vec3(268432,1215573,102500));\n\tB(vec3(302278,1832944,722434));\n\tB(vec3(335007,1832950,995103));\n\tB(vec3(576063,1966079,1048447));\n\tB(vec3(915386,1966079,1048575));\n\tB(vec3(881594,1832942,782334));\n\tB(vec3(848831,1830911,1048575));\n\tB(vec3(848831,1765375,1048575));\n\tB(vec3(816063,1765375,1048575));\n\tB(vec3(681898,1566698,699135));\n\tB(vec3(582506,1234874,961194));\n\tB(vec3(582527,1232831,1048559));\n\tB(vec3(582587,1234878,1048575));\n\tB(vec3(582511,1300411,1028015));\n\tB(vec3(581483,1300410,764843));\n\tB(vec3(546538,1230570,962490));\n\tB(vec3(578214,1226342,699050));\n\tB(vec3(544383,1224047,698965));\n\tB(vec3(577130,1224046,786431));\n\tB(vec3(578175,1293819,1043371));\n\tB(vec3(612027,1293822,1044479));\n\tB(vec3(579243,1293822,1048559));\n\tB(vec3(578154,1226111,1028015));\n\tB(vec3(578175,1291695,1026991));\n\tB(vec3(613055,1558010,699050));\n\tB(vec3(746154,1693167,715519));\n\tB(vec3(742015,1828799,1031999));\n\tB(vec3(879551,1830907,1028095));\n\tB(vec3(536981,1693525,371455));\n\tB(vec3(133246,1143754,611669));\n\tB(vec3(133184,1283392,37088));\n\tB(vec3(133125,602449,332033));\n\tB(vec3(199749,870993,349525));\n\tB(vec3(267369,873046,349541));\n\tB(vec3(268456,938571,305320));\n\tB(vec3(335040,1287312,82000));\n\tB(vec3(335046,1832880,722690));\n\tB(vec3(401631,1830839,995103));\n\tB(vec3(745215,1765375,1048511));\n\tB(vec3(816063,1765375,1048575));\n\tB(vec3(749498,1765374,1048575));\n\tB(vec3(583589,1566698,715775));\n\tB(vec3(548714,1234858,699034));\n\tB(vec3(515967,1165183,1048298));\n\tB(vec3(548735,1165183,1048575));\n\tB(vec3(548735,1230719,982782));\n\tB(vec3(547646,1230575,982762));\n\tB(vec3(545514,1162922,699049));\n\tB(vec3(545386,1224170,632213));\n\tB(vec3(578175,1224059,1026730));\n\tB(vec3(478746,1223914,769722));\n\tB(vec3(478762,1226085,681558));\n\tB(vec3(545322,1226154,1028011));\n\tB(vec3(578154,1228266,699306));\n\tB(vec3(578154,1226090,699050));\n\tB(vec3(578154,1422571,966570));\n\tB(vec3(678527,1558015,719530));\n\tB(vec3(745130,1560047,1048575));\n\tB(vec3(744171,1828862,697833));\n\tB(vec3(879551,1830906,720895));\n\tB(vec3(300225,1759057,392703));\n\tB(vec3(267401,1008550,364865));\n\tB(vec3(302326,1008553,415082));\n\tB(vec3(167012,943001,120025));\n\tB(vec3(200798,604631,615781));\n\tB(vec3(200795,739926,884157));\n\tB(vec3(201883,873142,1011310));\n\tB(vec3(201886,940694,617070));\n\tB(vec3(269549,940699,374197));\n\tB(vec3(302292,873039,324852));\n\tB(vec3(401600,1429156,81984));\n\tB(vec3(401607,1566641,985863));\n\tB(vec3(437631,1564539,1015663));\n\tB(vec3(545526,1499113,711659));\n\tB(vec3(445103,1165178,1027738));\n\tB(vec3(446207,1167295,1032127));\n\tB(vec3(515967,1167231,1048575));\n\tB(vec3(515967,1099583,982762));\n\tB(vec3(481087,1031919,983038));\n\tB(vec3(447210,1027754,699050));\n\tB(vec3(545455,1226234,764586));\n\tB(vec3(578175,1226175,1032122));\n\tB(vec3(477653,1223898,699055));\n\tB(vec3(477657,1025110,349525));\n\tB(vec3(477653,1156261,349786));\n\tB(vec3(544234,1158314,616026));\n\tB(vec3(578026,1291418,703162));\n\tB(vec3(578110,1555818,699045));\n\tB(vec3(744063,1558015,1048575));\n\tB(vec3(745110,1557994,770047));\n\tB(vec3(809706,1761130,744447));\n\tB(vec3(845695,1828799,715498));\n\tB(vec3(538074,1826719,655359));\n\tB(vec3(335125,1213589,332102));\n\tB(vec3(302358,1211380,476694));\n\tB(vec3(168002,1143776,412507));\n\tB(vec3(133141,469349,410693));\n\tB(vec3(134229,602517,415318));\n\tB(vec3(133204,604584,90401));\n\tB(vec3(33814,602532,661014));\n\tB(vec3(32790,469333,608521));\n\tB(vec3(33813,604629,678506));\n\tB(vec3(133201,606804,349525));\n\tB(vec3(67668,604549,283732));\n\tB(vec3(133200,604484,16464));\n\tB(vec3(133120,742084,16448));\n\tB(vec3(132100,748497,65793));\n\tB(vec3(200792,949394,152146));\n\tB(vec3(303314,1160884,213858));\n\tB(vec3(302283,1230582,1007435));\n\tB(vec3(472511,1163007,1032127));\n\tB(vec3(546490,1226366,1048575));\n\tB(vec3(579262,1424879,716522));\n\tB(vec3(579258,1424894,781307));\n\tB(vec3(544297,1226154,370330));\n\tB(vec3(477674,1223898,633253));\n\tB(vec3(477654,1223834,370085));\n\tB(vec3(577002,1422438,698714));\n\tB(vec3(677359,1490154,764587));\n\tB(vec3(678463,1557887,1047294));\n\tB(vec3(745083,1557950,1048575));\n\tB(vec3(744021,1557913,700142));\n\tB(vec3(739966,1689194,936383));\n\tB(vec3(810731,1759102,1048511));\n\tB(vec3(745279,1830906,1048495));\n\tB(vec3(302372,1213576,16448));\n\tB(vec3(200833,873168,344449));\n\tB(vec3(167038,1012624,328965));\n\tB(vec3(267432,1555934,654846));\n\tB(vec3(66560,1217664,16592));\n\tB(vec3(32788,336101,0));\n\tB(vec3(53,334043,354313));\n\tB(vec3(5,334017,349396));\n\tB(vec3(20,133190,267284));\n\tB(vec3(20,202965,24656));\n\tB(vec3(17,334036,333077));\n\tB(vec3(24,200778,20561));\n\tB(vec3(40,331914,41120));\n\tB(vec3(33852,401615,61600));\n\tB(vec3(66612,403789,53472));\n\tB(vec3(32784,602436,32896));\n\tB(vec3(32789,672149,344385));\n\tB(vec3(166981,942800,87381));\n\tB(vec3(301186,1291764,477014));\n\tB(vec3(436527,1424886,1007451));\n\tB(vec3(575039,1492479,1048511));\n\tB(vec3(613054,1560174,715515));\n\tB(vec3(613050,1562238,781034));\n\tB(vec3(612991,1562222,715498));\n\tB(vec3(677434,1560046,699066));\n\tB(vec3(711215,1558010,1026730));\n\tB(vec3(745135,1560058,1032191));\n\tB(vec3(745134,1558011,1032127));\n\tB(vec3(745087,1560047,715691));\n\tB(vec3(670191,1553894,987306));\n\tB(vec3(740950,1758974,1032111));\n\tB(vec3(845695,1830906,764650));\n\tB(vec3(267393,1215728,393541));\n\tB(vec3(199786,940890,682518));\n\tB(vec3(133221,942954,25768));\n\tB(vec3(168003,1560176,985867));\n\tB(vec3(133127,1486145,859935));\n\tB(vec3(32769,606672,21604));\n\tB(vec3(5,133202,333072));\n\tB(vec3(2,334016,394005));\n\tB(vec3(13,200835,272408));\n\tB(vec3(9,200786,74033));\n\tB(vec3(0,336080,16));\n\tB(vec3(0,403792,131585));\n\tB(vec3(16,602452,148034));\n\tB(vec3(32794,602470,677190));\n\tB(vec3(133158,403834,506542));\n\tB(vec3(67643,469354,1010526));\n\tB(vec3(133177,602458,370154));\n\tB(vec3(133157,602457,120293));\n\tB(vec3(133149,602438,284761));\n\tB(vec3(201876,739782,292197));\n\tB(vec3(336069,1488240,348497));\n\tB(vec3(437535,1560178,1007447));\n\tB(vec3(711359,1763071,1048575));\n\tB(vec3(812863,1763071,1048575));\n\tB(vec3(746238,1761007,715759));\n\tB(vec3(746234,1761006,715498));\n\tB(vec3(779002,1693438,715691));\n\tB(vec3(746234,1693422,715498));\n\tB(vec3(746239,1761022,781291));\n\tB(vec3(604565,1553892,327702));\n\tB(vec3(671230,1689194,1048149));\n\tB(vec3(811839,1828794,719611));\n\tB(vec3(401690,1691349,65781));\n\tB(vec3(134264,940895,42068));\n\tB(vec3(167036,871071,127473));\n\tB(vec3(165976,737863,45489));\n\tB(vec3(32768,600388,36944));\n\tB(vec3(32824,1680525,32832));\n\tB(vec3(32831,1817935,324832));\n\tB(vec3(135295,1820063,916989));\n\tB(vec3(337151,1822207,982782));\n\tB(vec3(571839,1822207,1048575));\n\tB(vec3(739903,1822207,1048575));\n\tB(vec3(807487,1822207,1048575));\n\tB(vec3(737707,1752442,1048559));\n\tB(vec3(200785,1475408,105135));\n\tB(vec3(66598,403821,414020));\n\tB(vec3(66605,336107,633242));\n\tB(vec3(67631,471397,957399));\n\tB(vec3(168039,604601,1026987));\n\tB(vec3(200870,672238,686783));\n\tB(vec3(268442,739910,896670));\n\tB(vec3(269557,942798,389557));\n\tB(vec3(303312,1010517,106708));\n\tB(vec3(436483,1693360,459352));\n\tB(vec3(437567,1828735,1015599));\n\tB(vec3(847743,1830783,1048575));\n\tB(vec3(847743,1828671,1048575));\n\tB(vec3(846719,1828607,1048575));\n\tB(vec3(846655,1761023,1048575));\n\tB(vec3(846655,1828607,1048575));\n\tB(vec3(567616,1410193,327680));\n\tB(vec3(703999,1691386,720889));\n\tB(vec3(811839,1761150,981759));\n\tB(vec3(536981,1691348,103935));\n\tB(vec3(265307,1006459,1026709));\n\tB(vec3(165952,938656,396063));\n\tB(vec3(199800,1545116,16385));\n\tB(vec3(167039,1746111,982521));\n\tB(vec3(839231,1815807,1048575));\n\tB(vec3(875135,1817983,1048575));\n\tB(vec3(875115,1820090,1028079));\n\tB(vec3(875115,1820154,1028015));\n\tB(vec3(875115,1820154,1026991));\n\tB(vec3(874091,1820154,1028015));\n\tB(vec3(807546,1820089,760747));\n\tB(vec3(434410,1815781,662423));\n\tB(vec3(133120,1407813,355162));\n\tB(vec3(33814,401781,738560));\n\tB(vec3(66618,403819,682606));\n\tB(vec3(133182,403802,699050));\n\tB(vec3(66583,471381,762597));\n\tB(vec3(134237,604569,824950));\n\tB(vec3(134219,672344,1035171));\n\tB(vec3(267417,741994,453049));\n\tB(vec3(303323,1010533,940951));\n\tB(vec3(403749,1012623,326073));\n\tB(vec3(437569,1560048,65600));\n\tB(vec3(436543,1830651,1011483));\n\tB(vec3(879423,1828607,1048575));\n\tB(vec3(879423,1828606,1044479));\n\tB(vec3(879338,1828606,1044463));\n\tB(vec3(846591,1828602,764843));\n\tB(vec3(467262,1758932,0));\n\tB(vec3(744170,1761125,436991));\n\tB(vec3(811839,1759099,1030827));\n\tB(vec3(132096,1689296,393215));\n\tB(vec3(32768,735808,257));\n\tB(vec3(132158,1545102,32832));\n\tB(vec3(569663,1746047,1048574));\n\tB(vec3(840255,1815743,1048575));\n\tB(vec3(841343,1815807,1048575));\n\tB(vec3(874111,1815855,1048575));\n\tB(vec3(874111,1815855,982782));\n\tB(vec3(874090,1817962,715434));\n\tB(vec3(841323,1817962,699050));\n\tB(vec3(805354,1815914,699054));\n\tB(vec3(568677,1748133,704186));\n\tB(vec3(133120,1281110,327156));\n\tB(vec3(66581,467157,344320));\n\tB(vec3(32821,336103,350548));\n\tB(vec3(33829,334057,353621));\n\tB(vec3(32814,338294,941911));\n\tB(vec3(67631,403798,760810));\n    col = vec4(c,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 args = vec3(0.);\nvec3 c = vec3(0.);\nvoid B(vec3 a){\n\tif(args.r==args.g++)c.rgb=args.b<2.? mod(a,2048.): mod(floor(a/2048.),2048.);\n}\n\nvoid mainImage( out vec4 col,in vec2 u )\n{\n    col = texture(iChannel0,u/iResolution.xy);\n    u -= 0.5;\n    vec2 uv = vec2(0.);\n    uv = floor(u/4.);\n    if( uv.x<10.|| uv.x>= 22.|| uv.y>= 32.){discard;return;}\n    if(iFrame > 10) return;\n    args.r = uv.x * 32.+ uv.y;\n    args.g += 341.;\n    args.b = mod(u.x,4.);\n\t\n\tB(vec3(33809,602552,172260));\n\tB(vec3(32826,602539,682526));\n\tB(vec3(134245,739966,156781));\n\tB(vec3(168062,674407,700126));\n\tB(vec3(269542,945061,420330));\n\tB(vec3(403817,1014751,358810));\n\tB(vec3(437569,1555872,98464));\n\tB(vec3(472427,1758714,1011483));\n\tB(vec3(810518,1826421,699307));\n\tB(vec3(843354,1758694,699034));\n\tB(vec3(843387,1758714,699050));\n\tB(vec3(398527,1689279,868372));\n\tB(vec3(744190,1691370,391935));\n\tB(vec3(811903,1758974,1048575));\n\tB(vec3(165888,1691333,327679));\n\tB(vec3(199743,1543071,385088));\n\tB(vec3(702847,1680511,1048575));\n\tB(vec3(701787,1678458,1048575));\n\tB(vec3(701823,1748143,1027931));\n\tB(vec3(840255,1815807,1048575));\n\tB(vec3(841343,1750335,1048575));\n\tB(vec3(841327,1750331,1048575));\n\tB(vec3(841322,1817962,768687));\n\tB(vec3(841326,1752366,720895));\n\tB(vec3(803242,1748138,436906));\n\tB(vec3(166976,1541029,655018));\n\tB(vec3(66565,674384,332097));\n\tB(vec3(32789,334045,370005));\n\tB(vec3(33821,334037,611925));\n\tB(vec3(66602,336102,629466));\n\tB(vec3(33813,334042,620970));\n\tB(vec3(7,336228,758629));\n\tB(vec3(32815,403838,1031034));\n\tB(vec3(33829,403819,391678));\n\tB(vec3(66605,471458,941655));\n\tB(vec3(168046,606822,946075));\n\tB(vec3(269534,742105,976634));\n\tB(vec3(304398,947109,973478));\n\tB(vec3(439721,1148057,649914));\n\tB(vec3(438598,1483940,409664));\n\tB(vec3(573950,1686703,965291));\n\tB(vec3(810542,1754350,982782));\n\tB(vec3(810623,1754470,371113));\n\tB(vec3(570815,1555967,1004800));\n\tB(vec3(810794,1691386,983039));\n\tB(vec3(745279,1691390,764843));\n\tB(vec3(567509,1756890,720895));\n\tB(vec3(737723,1748158,1048234));\n\tB(vec3(805375,1680506,1028095));\n\tB(vec3(564416,1743962,704511));\n\tB(vec3(566527,1746111,1048144));\n\tB(vec3(840255,1748223,1048575));\n\tB(vec3(804282,1815802,744299));\n\tB(vec3(840246,1820141,190182));\n\tB(vec3(841326,1818042,699046));\n\tB(vec3(841322,1754542,719803));\n\tB(vec3(736682,1682601,371370));\n\tB(vec3(165972,1471301,360362));\n\tB(vec3(66565,602453,345153));\n\tB(vec3(66587,336230,744022));\n\tB(vec3(32789,336233,386485));\n\tB(vec3(32795,336101,1005397));\n\tB(vec3(33849,336238,386486));\n\tB(vec3(66602,336215,686505));\n\tB(vec3(32787,403829,677209));\n\tB(vec3(66603,604650,1027935));\n\tB(vec3(134231,606805,895662));\n\tB(vec3(134235,674405,953178));\n\tB(vec3(268527,877414,679578));\n\tB(vec3(303413,947102,439933));\n\tB(vec3(404843,1017017,497317));\n\tB(vec3(303360,1016968,128189));\n\tB(vec3(338223,1483946,744017));\n\tB(vec3(709183,1688831,1048575));\n\tB(vec3(843391,1756666,638719));\n\tB(vec3(604671,1551866,1021440));\n\tB(vec3(744165,1691354,458751));\n\tB(vec3(743167,1691391,1043029));\n\tB(vec3(805313,1691349,720895));\n\tB(vec3(840255,1815807,1026986));\n\tB(vec3(802218,1746037,416362));\n\tB(vec3(597220,1735552,442026));\n\tB(vec3(734591,1813695,1048490));\n\tB(vec3(804250,1748155,983039));\n\tB(vec3(734506,1813678,33881));\n\tB(vec3(875135,1822331,1048575));\n\tB(vec3(876202,1822330,1032191));\n\tB(vec3(842367,1820154,699306));\n\tB(vec3(567514,1682586,720810));\n\tB(vec3(400534,1272473,596486));\n\tB(vec3(166997,936336,365994));\n\tB(vec3(66597,331929,327680));\n\tB(vec3(66587,336229,742997));\n\tB(vec3(33829,336105,453053));\n\tB(vec3(32790,202921,677525));\n\tB(vec3(32813,336234,895610));\n\tB(vec3(66602,338262,715242));\n\tB(vec3(67609,336234,632166));\n\tB(vec3(134234,604645,698970));\n\tB(vec3(169142,608926,457082));\n\tB(vec3(202989,676502,891557));\n\tB(vec3(270649,877479,350699));\n\tB(vec3(305511,1014778,748187));\n\tB(vec3(338287,1016926,785022));\n\tB(vec3(270613,1213413,672144));\n\tB(vec3(572911,1691125,748454));\n\tB(vec3(844479,1761022,720895));\n\tB(vec3(604671,1551786,677120));\n\tB(vec3(742058,1556079,982783));\n\tB(vec3(744191,1691375,982697));\n\tB(vec3(805333,1691348,43775));\n\tB(vec3(840234,1817957,765610));\n\tB(vec3(802218,1743850,365909));\n\tB(vec3(662762,1801184,370175));\n\tB(vec3(870902,1815806,720895));\n\tB(vec3(803217,1813657,366250));\n\tB(vec3(838126,1817962,697942));\n\tB(vec3(875134,1955518,719611));\n\tB(vec3(877290,1957546,699131));\n\tB(vec3(842367,1822202,715435));\n\tB(vec3(433289,1748101,715711));\n\tB(vec3(199750,934288,327760));\n\tB(vec3(165909,936356,27226));\n\tB(vec3(33813,401637,415125));\n\tB(vec3(33813,334046,354650));\n\tB(vec3(32791,334069,480917));\n\tB(vec3(32826,334063,704111));\n\tB(vec3(32806,334057,435673));\n\tB(vec3(66619,403818,686941));\n\tB(vec3(134246,473581,440942));\n\tB(vec3(135337,473578,699050));\n\tB(vec3(169190,674486,502170));\n\tB(vec3(270634,746414,458431));\n\tB(vec3(270617,744345,714409));\n\tB(vec3(271738,879515,683675));\n\tB(vec3(339371,1148085,481686));\n\tB(vec3(337152,1217733,387769));\n\tB(vec3(437626,1418470,628053));\n\tB(vec3(710335,1763071,1048495));\n\tB(vec3(570815,1549674,693504));\n\tB(vec3(742079,1556094,699391));\n\tB(vec3(744191,1691387,1043391));\n\tB(vec3(840210,1756901,392959));\n\tB(vec3(840233,1817945,367194));\n\tB(vec3(838139,1813695,1026730));\n\tB(vec3(597246,1809572,5727));\n\tB(vec3(874047,1817978,1048575));\n\tB(vec3(802117,1817930,720895));\n\tB(vec3(700735,1955327,950848));\n\tB(vec3(943851,1957626,1048575));\n\tB(vec3(878315,1957626,966575));\n\tB(vec3(876223,1824383,1047471));\n\tB(vec3(468223,1818015,983039));\n\tB(vec3(199744,1680452,53749));\n\tB(vec3(133161,602451,334081));\n\tB(vec3(65558,467178,687722));\n\tB(vec3(32790,333989,435561));\n\tB(vec3(33814,336089,453290));\n\tB(vec3(32806,334073,419161));\n\tB(vec3(67627,336239,1032047));\n\tB(vec3(67620,405934,649725));\n\tB(vec3(134237,606834,695895));\n\tB(vec3(201978,606831,700139));\n\tB(vec3(202990,611034,961242));\n\tB(vec3(270618,746422,694762));\n\tB(vec3(304495,746394,769471));\n\tB(vec3(271721,746343,651263));\n\tB(vec3(304490,947179,965534));\n\tB(vec3(338297,1219786,1021674));\n\tB(vec3(304430,1287402,698689));\n\tB(vec3(676479,1826554,744106));\n\tB(vec3(534910,1479850,726272));\n\tB(vec3(706107,1553903,700351));\n\tB(vec3(744191,1691390,786431));\n\tB(vec3(738704,1756820,393215));\n\tB(vec3(804287,1748139,961109));\n\tB(vec3(803222,1748138,786430));\n\tB(vec3(565487,1746047,671745));\n\tB(vec3(873023,1820090,720895));\n\tB(vec3(870905,1820063,983039));\n\tB(vec3(872939,1955446,1011610));\n\tB(vec3(876202,1955450,700335));\n\tB(vec3(877306,1824362,715498));\n\tB(vec3(876202,1824378,699371));\n\tB(vec3(806374,1820149,1026975));\n\tB(vec3(568639,1748075,1032043));\n\tB(vec3(133152,1545101,62713));\n\tB(vec3(66566,602464,328001));\n\tB(vec3(66570,331926,661013));\n\tB(vec3(66587,336101,742949));\n\tB(vec3(66597,336090,453305));\n\tB(vec3(67625,336235,682394));\n\tB(vec3(134255,473595,1044139));\n\tB(vec3(169146,608926,654062));\n\tB(vec3(169199,608938,763817));\n\tB(vec3(269599,676654,982971));\n\tB(vec3(270683,879513,714618));\n\tB(vec3(271703,879529,448121));\n\tB(vec3(305502,879514,1022826));\n\tB(vec3(339350,947182,703147));\n\tB(vec3(440810,1219823,683695));\n\tB(vec3(540138,1420709,456318));\n\tB(vec3(710335,1758718,1026746));\n\tB(vec3(535914,1477797,393216));\n\tB(vec3(673326,1691302,785146));\n\tB(vec3(745215,1758975,719855));\n\tB(vec3(532613,1689216,393215));\n\tB(vec3(702831,1746046,1022549));\n\tB(vec3(804282,1813662,699135));\n\tB(vec3(803263,1817855,1044153));\n\tB(vec3(875130,1820078,720895));\n\tB(vec3(875195,1820095,1048575));\n\tB(vec3(875130,1820139,719610));\n\tB(vec3(876223,1822191,981754));\n\tB(vec3(876223,1822207,982782));\n\tB(vec3(840234,1820138,704190));\n\tB(vec3(567570,1748134,632425));\n\tB(vec3(533723,1540969,681561));\n\tB(vec3(668971,1540986,764843));\n\tB(vec3(166015,1206943,946095));\n\tB(vec3(132128,1475469,57588));\n\tB(vec3(66565,670033,328000));\n\tB(vec3(66591,403813,988950));\n\tB(vec3(134250,471470,703162));\n\tB(vec3(135341,604766,633526));\n\tB(vec3(169131,608957,977830));\n\tB(vec3(269630,744279,950127));\n\tB(vec3(269595,746425,763625));\n\tB(vec3(271718,746410,436634));\n\tB(vec3(305511,879530,488878));\n\tB(vec3(305499,879533,779897));\n\tB(vec3(405910,949354,506542));\n\tB(vec3(439786,1219834,715369));\n\tB(vec3(608894,1558137,388094));\n\tB(vec3(811711,1824442,720895));\n\tB(vec3(433471,1414330,655360));\n\tB(vec3(742079,1556079,720895));\n\tB(vec3(741034,1691365,764862));\n\tB(vec3(301184,1689225,65535));\n\tB(vec3(433343,1676202,1009925));\n\tB(vec3(839167,1815807,1048575));\n\tB(vec3(874111,1820031,1048575));\n\tB(vec3(876223,1820079,1048575));\n\tB(vec3(876223,1820095,1048575));\n\tB(vec3(876223,1820159,1032191));\n\tB(vec3(876223,1820159,1048575));\n\tB(vec3(875114,1820154,699327));\n\tB(vec3(838122,1817957,350890));\n\tB(vec3(301191,1545394,982698));\n\tB(vec3(165930,1412064,658015));\n\tB(vec3(567510,1405606,681706));\n\tB(vec3(534783,1477557,656646));\n\tB(vec3(737727,1682622,1048575));\n\tB(vec3(132159,1547215,983039));\n\tB(vec3(134240,1543069,123381));\n\tB(vec3(134235,604662,742933));\n\tB(vec3(201966,608923,637550));\n\tB(vec3(202982,676606,785082));\n\tB(vec3(270614,611030,420458));\n\tB(vec3(270615,746405,763801));\n\tB(vec3(270655,746427,966254));\n\tB(vec3(305514,879526,978666));\n\tB(vec3(338283,947178,749163));\n\tB(vec3(405925,1019034,632238));\n\tB(vec3(439807,1222077,718485));\n\tB(vec3(571777,1490410,458751));\n\tB(vec3(441919,1756671,1027862));\n\tB(vec3(433402,1281194,655445));\n\tB(vec3(674411,1556090,786431));\n\tB(vec3(535898,1553892,350575));\n\tB(vec3(470458,1551835,1048511));\n\tB(vec3(300203,1541041,655744));\n\tB(vec3(736639,1815743,1032127));\n\tB(vec3(874111,1820031,1048575));\n\tB(vec3(876223,1885631,1048575));\n\tB(vec3(908991,1885631,1048575));\n\tB(vec3(876223,1820159,1048319));\n\tB(vec3(876223,1820159,1048575));\n\tB(vec3(874090,1820074,715706));\n\tB(vec3(737770,1813670,353706));\n\tB(vec3(268420,1545344,54458));\n\tB(vec3(62,1211301,349184));\n\tB(vec3(568618,1409945,633599));\n\tB(vec3(468223,1477562,655360));\n\tB(vec3(739823,1682619,1048575));\n\tB(vec3(806399,1680574,1044399));\n\tB(vec3(772607,1680575,1048575));\n\tB(vec3(333993,1680479,654847));\n\tB(vec3(269525,1276837,361877));\n\tB(vec3(303390,877414,940630));\n\tB(vec3(271721,877481,431783));\n\tB(vec3(270702,678762,677477));\n\tB(vec3(271722,744294,371370));\n\tB(vec3(270619,879573,1006234));\n\tB(vec3(338293,1019054,439657));\n\tB(vec3(439711,1219942,973269));\n\tB(vec3(576042,1424878,1048511));\n\tB(vec3(437589,1490389,663363));\n\tB(vec3(541247,1693311,1043029));\n\tB(vec3(300202,1209322,655445));\n\tB(vec3(434454,1416566,720895));\n\tB(vec3(400637,1211364,17429));\n\tB(vec3(571882,1416426,768958));\n\tB(vec3(166976,1006425,59813));\n\tB(vec3(300203,1809398,727638));\n\tB(vec3(738751,1817854,1048575));\n\tB(vec3(875135,1820095,1048575));\n\tB(vec3(908991,1885695,1048575));\n\tB(vec3(908991,1885695,1048575));\n\tB(vec3(908991,1885695,1048575));\n\tB(vec3(874106,1820143,720895));\n\tB(vec3(839210,1815929,431593));\n\tB(vec3(400515,1547410,1027061));\n\tB(vec3(133247,1407871,980164));\n\tB(vec3(602409,1541022,720635));\n\tB(vec3(535870,1543082,431505));\n\tB(vec3(737706,1678442,720895));\n\tB(vec3(736602,1678310,678506));\n\tB(vec3(670102,1743861,744283));\n\tB(vec3(571802,1678325,744283));\n\tB(vec3(536934,1409961,674650));\n\tB(vec3(403834,1143710,370073));\n\tB(vec3(304441,1145838,386532));\n\tB(vec3(304487,1014889,710614));\n\tB(vec3(339311,1014874,1027758));\n\tB(vec3(339390,1150111,653754));\n\tB(vec3(404911,1150127,702905));\n\tB(vec3(471463,1221993,1043375));\n\tB(vec3(336086,1215653,677274));\n\tB(vec3(201902,1217706,675840));\n\tB(vec3(577151,1756671,720890));\n\tB(vec3(199786,940902,720896));\n\tB(vec3(266368,1279109,458667));\n\tB(vec3(132139,1547642,693505));\n\tB(vec3(470377,1281194,896767));\n\tB(vec3(267429,938710,694933));\n\tB(vec3(134208,1137248,21589));\n\tB(vec3(266351,1743850,1006406));\n\tB(vec3(738751,1817982,1048575));\n\tB(vec3(875135,1822207,1048575));\n\tB(vec3(877247,1887743,1048575));\n    col = vec4(c,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 args = vec3(0.);\nvec3 c = vec3(0.);\nvoid B(vec3 a){\n\tif(args.r==args.g++)c.rgb=args.b<2.? mod(a,2048.): mod(floor(a/2048.),2048.);\n}\n\nvoid mainImage( out vec4 col,in vec2 u )\n{\n    col = texture(iChannel0,u/iResolution.xy);\n    u -= 0.5;\n    vec2 uv = vec2(0.);\n    uv = floor(u/4.);\n    if(uv.x<21.|| uv.x>= 32.|| uv.y>= 32.){discard;return;}\n    if(iFrame > 10) return;\n    args.r = uv.x * 32. + uv.y;\n    args.g += 682.;\n    args.b = mod(u.x,4.) ; \n\n\tB(vec3(908991,1887743,1048575));\n\tB(vec3(840239,1820154,720895));\n\tB(vec3(669019,1748198,1011306));\n\tB(vec3(398470,1674145,596506));\n\tB(vec3(333959,1538929,994842));\n\tB(vec3(400513,1676256,461579));\n\tB(vec3(400529,1407840,394758));\n\tB(vec3(469221,1475497,431762));\n\tB(vec3(536937,1409961,432790));\n\tB(vec3(570730,1409962,435878));\n\tB(vec3(570789,1409961,370342));\n\tB(vec3(471462,1276841,629402));\n\tB(vec3(437610,1145786,760730));\n\tB(vec3(437594,1148022,752507));\n\tB(vec3(437594,1215670,752491));\n\tB(vec3(268490,1150115,933486));\n\tB(vec3(202998,1147989,666150));\n\tB(vec3(438678,1219799,456678));\n\tB(vec3(439727,1217690,433054));\n\tB(vec3(269504,1147990,720569));\n\tB(vec3(269567,1560170,693824));\n\tB(vec3(745151,1756794,1048575));\n\tB(vec3(266373,942997,329216));\n\tB(vec3(167013,672334,370985));\n\tB(vec3(267430,1141669,415577));\n\tB(vec3(268502,1141669,940634));\n\tB(vec3(200857,938701,703082));\n\tB(vec3(133162,471430,678209));\n\tB(vec3(66560,934356,32784));\n\tB(vec3(133147,1543073,658246));\n\tB(vec3(566507,1815722,1010603));\n\tB(vec3(804267,1820010,1028015));\n\tB(vec3(839163,1820094,1044415));\n\tB(vec3(840235,1820058,962479));\n\tB(vec3(568639,1815710,568765));\n\tB(vec3(434415,1475423,911528));\n\tB(vec3(469227,1538922,961965));\n\tB(vec3(469205,1475417,630445));\n\tB(vec3(434407,1274617,689477));\n\tB(vec3(399451,1405690,1028015));\n\tB(vec3(400534,1274533,945774));\n\tB(vec3(434389,1206933,349850));\n\tB(vec3(401625,1008342,353633));\n\tB(vec3(402719,1010535,682613));\n\tB(vec3(336155,942935,883386));\n\tB(vec3(337174,942933,616809));\n\tB(vec3(304440,1143693,38293));\n\tB(vec3(270619,1145751,637108));\n\tB(vec3(437621,1215673,761694));\n\tB(vec3(438674,1217698,619942));\n\tB(vec3(437670,1287409,898518));\n\tB(vec3(337197,1217672,330409));\n\tB(vec3(540159,1691263,982762));\n\tB(vec3(811775,1760954,720895));\n\tB(vec3(335061,1141673,393216));\n\tB(vec3(167001,604650,500052));\n\tB(vec3(134238,672357,678434));\n\tB(vec3(200873,739913,327101));\n\tB(vec3(32775,672245,434533));\n\tB(vec3(66580,672200,57464));\n\tB(vec3(22,336197,333121));\n\tB(vec3(4,336069,36980));\n\tB(vec3(1,999760,65792));\n\tB(vec3(131093,1540833,399621));\n\tB(vec3(432229,1743781,678491));\n\tB(vec3(566486,1678245,416346));\n\tB(vec3(533738,1543029,678486));\n\tB(vec3(265238,1274546,1011290));\n\tB(vec3(199682,1202789,662042));\n\tB(vec3(199761,1135060,411206));\n\tB(vec3(200804,868760,33089));\n\tB(vec3(266348,604511,385424));\n\tB(vec3(266333,672215,373169));\n\tB(vec3(268445,739911,29812));\n\tB(vec3(267434,674375,554036));\n\tB(vec3(302324,1211276,54421));\n\tB(vec3(303390,1143687,307424));\n\tB(vec3(337174,1143733,745133));\n\tB(vec3(336169,1143706,365463));\n\tB(vec3(337207,1145834,944489));\n\tB(vec3(438709,1217685,419674));\n\tB(vec3(438690,1420658,899296));\n\tB(vec3(437585,1217702,1030307));\n\tB(vec3(438718,1691258,765413));\n\tB(vec3(745215,1758847,1048575));\n\tB(vec3(812799,1760958,1048575));\n\tB(vec3(301221,938681,327680));\n\tB(vec3(267454,940759,880222));\n\tB(vec3(168100,940781,124405));\n\tB(vec3(201878,672373,743062));\n\tB(vec3(168109,737894,601438));\n\tB(vec3(66598,602538,505256));\n\tB(vec3(20,336197,289113));\n\tB(vec3(6,133201,395333));\n\tB(vec3(4,133186,13348));\n\tB(vec3(0,133185,4112));\n\tB(vec3(65536,733392,16464));\n\tB(vec3(132102,999761,329030));\n\tB(vec3(66596,934229,87321));\n\tB(vec3(199805,467151,304288));\n\tB(vec3(132126,467163,652725));\n\tB(vec3(132121,467158,357749));\n\tB(vec3(133145,467158,354661));\n\tB(vec3(166998,604565,545877));\n\tB(vec3(201913,940701,383385));\n\tB(vec3(268527,942827,899561));\n\tB(vec3(269525,1010549,1007470));\n\tB(vec3(303381,1143701,415575));\n\tB(vec3(337197,877339,435877));\n\tB(vec3(403802,944999,419509));\n\tB(vec3(437622,1145749,612970));\n\tB(vec3(437614,1213423,718566));\n\tB(vec3(538026,1418489,1027690));\n\tB(vec3(539029,1283237,695654));\n\tB(vec3(472495,1551743,980434));\n\tB(vec3(743019,1758843,977579));\n\tB(vec3(844458,1758842,765871));\n\tB(vec3(844479,1826490,764587));\n\tB(vec3(168022,737893,655360));\n\tB(vec3(268523,873113,891558));\n\tB(vec3(336169,945077,744106));\n\tB(vec3(269535,1010582,876111));\n\tB(vec3(201913,945055,636276));\n\tB(vec3(201913,940909,382438));\n\tB(vec3(33849,674398,652457));\n\tB(vec3(52,606797,53472));\n\tB(vec3(20,604617,37072));\n\tB(vec3(61,333983,370081));\n\tB(vec3(42,333974,616888));\n\tB(vec3(66590,336091,320981));\n\tB(vec3(32789,401637,678505));\n\tB(vec3(32789,401537,333398));\n\tB(vec3(32788,268437,349524));\n\tB(vec3(66597,469321,25957));\n\tB(vec3(133182,604511,452069));\n\tB(vec3(200821,672253,1040106));\n\tB(vec3(134264,873038,123539));\n\tB(vec3(168062,875151,324832));\n\tB(vec3(267455,940767,588020));\n\tB(vec3(337181,944987,391673));\n\tB(vec3(337179,1143702,616889));\n\tB(vec3(437613,1145785,744094));\n\tB(vec3(438653,1213437,712310));\n\tB(vec3(571802,1213414,962234));\n\tB(vec3(470306,1281121,682666));\n\tB(vec3(437627,1551610,882145));\n\tB(vec3(708159,1689070,782011));\n\tB(vec3(810682,1756650,700335));\n\tB(vec3(843370,1756586,715498));\n\tB(vec3(844479,1824249,435881));\n\tB(vec3(134230,672228,655360));\n\tB(vec3(201892,739941,415061));\n\tB(vec3(268443,942945,939859));\n\tB(vec3(302319,942939,966527));\n\tB(vec3(201913,942942,325881));\n\tB(vec3(168106,875198,521202));\n\tB(vec3(201883,875250,995179));\n\tB(vec3(167003,742050,749422));\n\tB(vec3(133142,471461,399642));\n\tB(vec3(32829,333982,431686));\n\tB(vec3(32814,333978,653813));\n\tB(vec3(32810,336091,637369));\n\tB(vec3(32830,333999,715257));\n\tB(vec3(132125,469210,370346));\n\tB(vec3(133147,600439,961897));\n\tB(vec3(133206,670069,745327));\n\tB(vec3(134246,604597,1028015));\n\tB(vec3(168102,739961,760731));\n\tB(vec3(201894,875189,748443));\n\tB(vec3(302330,875198,760747));\n\tB(vec3(337182,940774,699050));\n\tB(vec3(336166,942822,944762));\n\tB(vec3(436537,1211305,645525));\n\tB(vec3(437615,1281007,915957));\n\tB(vec3(437510,1278902,745327));\n\tB(vec3(470349,1547417,104090));\n\tB(vec3(536957,1551517,232733));\n\tB(vec3(605631,1686959,782014));\n\tB(vec3(745130,1691114,765951));\n\tB(vec3(777919,1754538,699050));\n\tB(vec3(844479,1756607,1048575));\n\tB(vec3(844479,1756602,962239));\n\tB(vec3(267413,672341,327680));\n\tB(vec3(234665,604634,419173));\n\tB(vec3(268438,741990,682662));\n\tB(vec3(302295,875173,714362));\n\tB(vec3(302330,940778,683614));\n\tB(vec3(302299,1010519,900858));\n\tB(vec3(302298,940774,683373));\n\tB(vec3(134245,739929,353701));\n\tB(vec3(133142,403793,349268));\n\tB(vec3(32775,333985,929049));\n\tB(vec3(32791,333973,662046));\n\tB(vec3(66602,333993,612953));\n\tB(vec3(66602,336105,694954));\n\tB(vec3(32779,401623,896425));\n\tB(vec3(33815,469348,925229));\n\tB(vec3(133126,471393,744287));\n\tB(vec3(134225,672368,465691));\n\tB(vec3(134257,873128,411207));\n\tB(vec3(201912,942830,186070));\n\tB(vec3(201917,942815,389858));\n\tB(vec3(269562,1209246,633080));\n\tB(vec3(436527,1209215,981738));\n\tB(vec3(401618,1211314,999290));\n\tB(vec3(401644,1278877,182922));\n\tB(vec3(470321,1481832,601461));\n\tB(vec3(436543,1551535,914915));\n\tB(vec3(740927,1686975,1048571));\n\tB(vec3(777915,1689022,1048575));\n\tB(vec3(777918,1623471,715519));\n\tB(vec3(777903,1689018,1043178));\n\tB(vec3(843455,1756591,1048575));\n\tB(vec3(843455,1756666,699050));\n\tB(vec3(268470,873069,655360));\n\tB(vec3(268471,938621,973534));\n\tB(vec3(302330,940717,777179));\n\tB(vec3(402731,942826,965358));\n\tB(vec3(435498,942826,699311));\n\tB(vec3(336175,875163,719273));\n\tB(vec3(302334,940703,916653));\n\tB(vec3(302318,938603,719613));\n\tB(vec3(199787,938586,895738));\n\tB(vec3(133178,868767,637368));\n\tB(vec3(133173,868765,382373));\n\tB(vec3(65592,735597,169622));\n\tB(vec3(66596,670041,169622));\n\tB(vec3(66616,735566,119249));\n\tB(vec3(133165,737695,390629));\n\tB(vec3(133231,871007,572857));\n\tB(vec3(268539,940670,962238));\n\tB(vec3(435487,1008374,1027007));\n\tB(vec3(335007,940727,999295));\n\tB(vec3(335015,1008374,1011519));\n\tB(vec3(401641,1141497,498587));\n\tB(vec3(401614,1209155,307622));\n\tB(vec3(435440,1479800,482861));\n\tB(vec3(469310,1551503,386775));\n\tB(vec3(570751,1553663,1048573));\n\tB(vec3(743023,1619258,1048575));\n\tB(vec3(744063,1621375,1048575));\n\tB(vec3(776831,1686895,982783));\n\tB(vec3(776815,1621307,1048574));\n\tB(vec3(776811,1621354,966651));\n\tB(vec3(809578,1754554,764843));\n\tB(vec3(843455,1756666,699050));\n\tB(vec3(302298,1141493,721152));\n\tB(vec3(268422,940705,722459));\n\tB(vec3(267413,938613,478027));\n\tB(vec3(268442,873061,415318));\n\tB(vec3(268456,940714,172630));\n\tB(vec3(268456,940714,172449));\n\tB(vec3(267432,1008362,172706));\n\tB(vec3(268453,1008361,365973));\n\tB(vec3(335062,1008357,677205));\n\tB(vec3(336086,1010405,678490));\n\tB(vec3(400598,942821,744026));\n\tB(vec3(334998,942821,415558));\n\tB(vec3(333957,942820,411210));\n\tB(vec3(333925,940713,416346));\n\tB(vec3(333974,1006249,698022));\n\tB(vec3(400533,1141481,431766));\n\tB(vec3(400533,1010521,168598));\n\tB(vec3(434340,1145737,32917));\n\tB(vec3(433317,1217677,383192));\n\tB(vec3(469241,1287326,382437));\n\tB(vec3(435454,1418399,652773));\n\tB(vec3(434431,1418415,981240));\n\tB(vec3(606654,1553790,1048574));\n\tB(vec3(741951,1555902,1044479));\n\tB(vec3(743035,1555902,1044463));\n\tB(vec3(743035,1555886,715755));\n\tB(vec3(744063,1621375,1048575));\n\tB(vec3(776815,1686907,1032127));\n\tB(vec3(776810,1754474,699119));\n\tB(vec3(776814,1621359,699066));\n\tB(vec3(744046,1689007,982778));\n\tB(vec3(810687,1756666,720895));\n\tB(vec3(268526,1209227,548864));\n\tB(vec3(336095,1141611,900541));\n\tB(vec3(436498,1213429,1011310));\n\tB(vec3(471409,1558108,362134));\n\tB(vec3(536953,1697629,382406));\n\tB(vec3(470398,1763167,653793));\n\tB(vec3(538047,1763167,915962));\n\tB(vec3(573951,1763247,982782));\n\tB(vec3(608831,1763263,1048575));\n\tB(vec3(676479,1763263,1048575));\n\tB(vec3(710335,1763263,1048575));\n\tB(vec3(711359,1830847,1048575));\n\tB(vec3(711407,1763199,1048575));\n\tB(vec3(574015,1494783,1048495));\n\tB(vec3(574015,1429247,1048575));\n\tB(vec3(576191,1429247,1048575));\n\tB(vec3(577215,1496831,1048575));\n\tB(vec3(578235,1562366,1044463));\n\tB(vec3(611003,1560190,1043435));\n\tB(vec3(676479,1560175,1043435));\n\tB(vec3(710271,1560191,1048575));\n\tB(vec3(744127,1558015,1048575));\n\tB(vec3(744127,1558015,1048575));\n\tB(vec3(744127,1558015,1048575));\n\tB(vec3(744127,1558015,1048575));\n\tB(vec3(744122,1555967,785407));\n\tB(vec3(744123,1689082,700331));\n\tB(vec3(810687,1754607,1048575));\n\tB(vec3(810682,1756654,719614));\n\tB(vec3(810687,1754554,1026987));\n\tB(vec3(810683,1689023,1048575));\n\tB(vec3(810687,1756667,699071));\n\tB(vec3(571838,1760991,385488));\n\tB(vec3(538047,1763183,916985));\n\tB(vec3(609919,1828799,1048574));\n\tB(vec3(847743,1830847,1048575));\n\tB(vec3(881599,1832958,1044463));\n\tB(vec3(881599,1832959,1048575));\n\tB(vec3(881599,1832959,1048575));\n\tB(vec3(881599,1830911,1048575));\n\tB(vec3(881583,1830847,1048575));\n\tB(vec3(881583,1830843,1032127));\n\tB(vec3(848831,1830907,1048575));\n\tB(vec3(881599,1830847,1048575));\n\tB(vec3(813914,1830826,699375));\n\tB(vec3(713498,1562358,748378));\n\tB(vec3(713515,1562363,1032111));\n\tB(vec3(747391,1564410,1032127));\n\tB(vec3(747391,1627903,1048575));\n\tB(vec3(746287,1562367,1048575));\n\tB(vec3(745179,1560186,1028011));\n\tB(vec3(745195,1560186,1011567));\n\tB(vec3(745195,1560186,1028015));\n\tB(vec3(745151,1558015,1048490));\n\tB(vec3(744123,1558014,1044463));\n\tB(vec3(745147,1558014,1044463));\n\tB(vec3(745151,1623551,1048575));\n\tB(vec3(744122,1689070,715499));\n\tB(vec3(744123,1689086,715754));\n\tB(vec3(810683,1756671,1048575));\n\tB(vec3(844479,1756671,1048575));\n\tB(vec3(843450,1822206,715514));\n\tB(vec3(843450,1822190,715499));\n\tB(vec3(809595,1754618,699114));\n    col = vec4(c,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/************************************\n\nPVRTC \"Pixel Shader Decoder\"\n\n************************************/\nstruct Data{\n\tvec3 ColA;\n    vec3 ColB;\n};\nstruct Modulation{\n\tfloat PartI;\n    float PartII;\n    float PartIII;\n};\nvec3 ReadBuffer(vec2 u){\n    vec2 uv = u/iResolution.xy;\n    vec3 col = texture(iChannel0,uv,0.).rgb;\n\tcol = max(col,texture(iChannel1,uv,0.).rgb);\n    col = max(col,texture(iChannel2,uv,0.).rgb);\n    return col;\n}\nvec3 ConbineBytes(vec2 u){\n    float offset = floor(mod(floor(u.x),4.)/2.)*4.-2.;\n    vec3 bytesXYZ = vec3(0.);\n    bytesXYZ = offset < 0. ? \n        ReadBuffer(u) + ReadBuffer(u - vec2(offset,0.))*2048. :\n    \tReadBuffer(u)*2048. + ReadBuffer(u - vec2(offset,0.));\n    return bytesXYZ;\n}\n\nModulation modulate;\nData data[4];\n\nvoid GetModulation(vec2 u){\n\tvec3 xyz = ConbineBytes(u);\n    \txyz.xy = mod(xyz.xy,64.);\n    modulate.PartI   = xyz.x;\n    modulate.PartII  = xyz.y;\n    modulate.PartIII = xyz.z;\n}\nData DataDecode(vec3 xyz){\n\tData temp;\n    vec2 xy = floor(xyz.xy/64.);\n    temp.ColA.r = floor(xy.x/512.);\n    temp.ColA.g = mod(floor(xy.x/16.),32.);\n    temp.ColA.b = mod(xy.x,16.);\n    \ttemp.ColA *= vec3(8,8,16.);\n    temp.ColB.r = floor(xy.y/1024.);\n    temp.ColB.g = mod(floor(xy.y/32.),32.);\n    temp.ColB.b = mod(xy.y,32.);\n    \ttemp.ColB *= 8.;\n\treturn temp;\n}\nvoid GetData(vec2 u){\n    vec2 xyOffset = (floor(mod(u,4.)/2.)-1.)*4.;\n    vec2 u00 = u + xyOffset;\n    vec2 u10 = u + vec2(xyOffset.x+4.,0.);\n    vec2 u01 = u + vec2(0.,xyOffset.y+4.);\n    vec2 u11 = u + xyOffset + 4.;\n    data[0] = DataDecode(ConbineBytes(u00));\n    data[1] = DataDecode(ConbineBytes(u10));\n    data[2] = DataDecode(ConbineBytes(u01));\n    data[3] = DataDecode(ConbineBytes(u11));\n}\nfloat WeightDecode(vec2 xyIndex){\n\tfloat index = xyIndex.y*4.+xyIndex.x;\n    float weight = 0.;\n    index < 10. ?\n    \tweight = mod(floor(modulate.PartIII/exp2(2.*index)),4.) :\n    index < 13. ?\n    \tweight = mod(floor(modulate.PartII/exp2(2.*(index-10.))),4.)\n    :\n    \tweight = mod(floor(modulate.PartI/exp2(2.*(index-13.))),4.);\n    return weight;\n}\nvoid mainImage( out vec4 col,in vec2 u )\n{\n\t\n    col = texture(iChannel3,u/iResolution.xy);\n    if(iFrame > 10) return;\n    if(u.x>127. || u.y > 128.)return;\n    GetModulation(u);\n    GetData(u);\n    \n    mat4 BiLiner_Factors[4];\n    BiLiner_Factors[0] = mat4(\n    \t4, 4, 4, 4,\n\t\t2, 6, 2, 6,\n\t\t8, 0, 8, 0,\n\t\t6, 2, 6, 2);\n    BiLiner_Factors[1] = mat4(\n        2, 2, 6, 6, \n\t\t1, 3, 3, 9, \n\t\t4, 0, 12, 0,\n\t\t3, 1, 9, 3 );\n    BiLiner_Factors[2] = mat4(\n        8, 8, 0, 0,\n\t\t4, 12, 0, 0,\n\t\t16, 0, 0, 0,\n\t\t12, 4, 0, 0);\n    BiLiner_Factors[3] = mat4(\n        8, 8, 0, 0,\n\t\t4, 12, 0, 0,\n\t\t16, 0, 0, 0,\n\t\t12, 4, 0, 0);\n    vec3 ColorA = vec3(0.),ColorB = vec3(0.);\n    vec4 biliner = vec4(0.);\n\tvec2 xyIndex = mod((u-0.5),4.);\t\n    for(int y = 0;y<4;y++)\n        for(int x = 0;x<4;x++)\n        \tif(float(y) == xyIndex.y && float(x) == xyIndex.x)\n                biliner = BiLiner_Factors[y][x];\n    for(int n=0;n<4;n++){\n    \tColorA +=  data[n].ColA * biliner[n];\n        ColorB +=  data[n].ColB * biliner[n];}\n    \n    vec2 RGBWeight[4];\n    RGBWeight[0] = vec2(8, 0);\n    RGBWeight[1] = vec2(5, 3);\n    RGBWeight[2] = vec2(3, 5);\n    RGBWeight[3] = vec2(0, 8);\n \t\n    float modulaValue = WeightDecode(xyIndex);\n    \n    vec2 weight = vec2(0.);\n    for(int i = 0;i<4;i++)\n    \tif(float(i) == modulaValue)\n  \t\t\tweight = RGBWeight[i];\n    \n    col.rgb = ColorA*weight.x + ColorB*weight.y;\n    \n    col = vec4(col.rgb/32768.,0.); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}