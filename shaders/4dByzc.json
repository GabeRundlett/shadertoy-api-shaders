{
    "Shader": {
        "info": {
            "date": "1493053540",
            "description": "Correlation between Noise(P) and Noise(P0) in 1 band of Perlin noise (noise cell = 20x20 pixels).\nStats cumulate realizations through time.\nRight: 10^correlation-1.\nBottom left: current Noise(P)",
            "flags": 32,
            "hasliked": 0,
            "id": "4dByzc",
            "likes": 2,
            "name": "Perlin noise correlation",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "correlation"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 669
        },
        "renderpass": [
            {
                "code": "//#define P0 (20.*(.5+vec2(13,11))) // reference location\n#define P0 (iResolution.x > 400. ? 20.*(.5+vec2(13,11)) : 20.*(.5+vec2(5)) ) // reference location\n\n\n// --- fonts from https://www.shadertoy.com/view/llySRh\n\nvec4 char(vec2 p, int c) { // access to the image of ascii code c\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n    //if (p.x<.25|| p.x>.75 || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5); // strange bug\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) );\n}\n\nvec4 pInt(vec2 p, float n) { //  display int4\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(p - vec2(-.5,0), 45 ),\n        n = -n;\n\n    for (float i = 3.; i>=0.; i--) \n        n /= 10.,\n        v += char(p - vec2(.5*i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// --- display correlation\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n         O = texelFetch(iChannel0, ivec2(U),0);      // E(P), E(P²), E(P.P0)\n    vec4 P = texelFetch(iChannel0, ivec2(P0),0);     // E(P0), E(P0²)\n    float N = float(iFrame),\n          EX = O.r/N, EY = P.r/N, EX2 = O.g/N, EY2 = P.g/N, EXY = O.b/N,\n          VX = EX2-EX*EX, VY = EY2-EY*EY,\n          c = (EXY-EX*EY)/sqrt(VX*VY);\n\n    //O = O/sqrt(N) + step(length(U-P0),4.); return; // check location        \n    \n    O = c * vec4(1,0,-1,0);\n    \n    if (U.x == P0.x+.5) O.g++;\n    if (U.x > P0.x) O = pow(vec4(10.),O)-1.;\n    if (U.x > P0.x && U.y < .75*P0.y) O = texelFetch(iChannel1, ivec2(U),0);\n\n#if 0                                                // test: show moments\n    O-=O;\n    //O.r = 14.*sqrt(EX);\n    O.r = 4.*sqrt(VX);\n#endif\n\n    if (O.r>=1. || O.g>=1.) O.g++;                   // test overshoot\n    O += pInt( (U/iResolution.y-vec2(.1))*16., N).r; // display N\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- generate Perlin noise ( 1 realisation per time step)\n\n// --- noise from from IQ's https://www.shadertoy.com/view/XdXGW8\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p+iTime)*43758.5453123);\n}\n\n\nfloat noise(  vec2 p )\n{\n    vec2 i = floor( p ), f = fract( p ), u = f*f*(3.-2.*f);\n    return mix( mix( dot( hash( i + vec2(0,0) ), f - vec2(0,0) ), \n                     dot( hash( i + vec2(1,0) ), f - vec2(1,0) ), u.x),\n                mix( dot( hash( i + vec2(0,1) ), f - vec2(0,1) ), \n                     dot( hash( i + vec2(1,1) ), f - vec2(1,1) ), u.x), u.y);\n}\n// ---\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = vec2(360);\n    O  = noise (U / 20.) * vec4(1,0,-1,0);  // O.r only used for computations\n    // if (O.r>=1. || O.g>=1.) O.g++;\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- computes moments, and commoment with location P0\n\n//#define P0 (20.*(.5+vec2(13,11))) // reference location\n#define P0 (iResolution.x > 400. ? 20.*(.5+vec2(13,11)) : 20.*(.5+vec2(5)) ) // reference location\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O = texelFetch(iChannel0, ivec2(U),0);\n\n    float v1 = texelFetch(iChannel1, ivec2(U),0).r,\n          v0 = texelFetch(iChannel1, ivec2(P0),0).r;\n    O.r += v1;\n    O.g += v1*v1;\n    O.b += v1*v0;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}