{
    "Shader": {
        "info": {
            "date": "1457383802",
            "description": "find the correlation between the noise texture channels.\nSpoiler: (37,17)\nParallel version of https://www.shadertoy.com/view/XddSRn , 256 x faster.",
            "flags": 32,
            "hasliked": 0,
            "id": "4stXzn",
            "likes": 2,
            "name": "correlation detector //",
            "published": 3,
            "tags": [
                "noise",
                "correlation",
                "parallel"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 923
        },
        "renderpass": [
            {
                "code": "// parallele version of https://www.shadertoy.com/view/XddSRn\n\n// Find the correlation between the noise texture channels.\n// G = R+(37,17)\n// No correlations between G and B\n// A = B+(37,17)\n// More explaination here: https://www.shadertoy.com/view/Ms3SRr\n// Test the correlations here: https://www.shadertoy.com/view/XstSRn.\n\nint Digit(vec2 p, float n) { // display digit\n    int i=int(p.y), b=int(exp2(floor(30.-p.x-n*3.)));\n    i = ( p.x<0.||p.x>3.? 0:\n    i==5? 972980223: i==4? 690407533: i==3? 704642687: i==2? 696556137:i==1? 972881535: 0 )/b;\n \treturn i-i/2*2;\n}\n\nfloat displayN(float v, vec2 i) {\n    i/=12.; \n    for (float n=2.; n>=0.; n--) { \n        if ((i.x-=4.)<3.) return float(Digit(i,floor(mod(v/pow(10.,n),10.))));     \n    }\n    return 0.;\n}\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    float f = float(iFrame), s=0.;\n    vec2 R = iResolution.xy,\n       ofs = vec2(mod(f,256.),floor(U.y));\n     //ofs = vec2(mod(f,256.),floor(f/256.));\n    vec4 C = texture(iChannel0,.5/R);\n\tU /= R;\n    O = texture(iChannel1,U); //  return; // <<<<<\n    \n    if (C.xy!=vec2(0.)) { \n        if (length(U-.5)<.2)  O++; else O.g = texture(iChannel0,U+C.xy/256.).g;\n        O += displayN(C.x,U*800.);\n        O += displayN(C.y,(U-vec2(.3,0))*800.);\n    } else {\n        O += displayN(ofs.x,U*800.);\n        O += displayN(888.,(U-vec2(.3,0))*800.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// choose the channels to test.\n// treat 256 vertical offsets in // , and 256 along time.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float f = float(iFrame);\n    vec2 ofs = vec2(mod(f,256.),floor(U.y));    // floor(U.y) not acts as integer !\n  //vec2 ofs = vec2(mod(f,256.),floor(f/256.)); // must opt for nearest.\n    float v0 = texture(iChannel0, U/256.).r,\n          v1 = texture(iChannel0, (U+ofs)/256.).g;\n\n    O = vec4(v0,v1,abs(v0-v1),0);   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define N 256\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if (iFrame==0) O-=O; else O = texture(iChannel1,U/iResolution.xy);\n    if (U.x != .5) return; \n    \n    float f = float(iFrame), s=0.;\n    vec2 ofs = vec2(mod(f,256.),floor(U.y));\n  //vec2 ofs = vec2(mod(f,256.),floor(f/256.));\n    \n    for (int i=0; i<N; i++)\n        s += texture(iChannel0,(.5+vec2(i,ofs.y))/iResolution.xy).z;\n   if (s==0.) O = vec4(ofs,0,0);     \n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 O,  vec2 U )\n{\n    if (iFrame==0) O-=O; else O = texture(iChannel0,U/iResolution.xy);\n    if (U != vec2(.5)) return; \n    \n    float f = float(iFrame), s=0.;\n    vec2 R = iResolution.xy,\n       ofs = vec2(mod(f,256.),floor(U.y));\n     //ofs = vec2(mod(f,256.),floor(f/256.));\n    vec4 C=O-O;\n    for (int i=0; i<256; i++) {\n        C = texture(iChannel0,(vec2(0,i)+.5)/R);\n        if (C.xy!=vec2(0.)) { O=C; break; }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}