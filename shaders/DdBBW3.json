{
    "Shader": {
        "info": {
            "date": "1690190128",
            "description": "A particle image transition effect using FBM.",
            "flags": 0,
            "hasliked": 0,
            "id": "DdBBW3",
            "likes": 1,
            "name": "FBM Particle Image Transition",
            "published": 3,
            "tags": [
                "fbm",
                "transition"
            ],
            "usePreview": 1,
            "username": "alphardex",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "const float PI=3.14159265359;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x){\n    return x-floor(x*(1./289.))*289.;\n}\n\nvec4 mod289(vec4 x){\n    return x-floor(x*(1./289.))*289.;\n}\n\nvec4 permute(vec4 x){\n    return mod289(((x*34.)+1.)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159-.85373472095314*r;\n}\n\nfloat snoise(vec3 v)\n{\n    const vec2 C=vec2(1./6.,1./3.);\n    const vec4 D=vec4(0.,.5,1.,2.);\n    \n    // First corner\n    vec3 i=floor(v+dot(v,C.yyy));\n    vec3 x0=v-i+dot(i,C.xxx);\n    \n    // Other corners\n    vec3 g=step(x0.yzx,x0.xyz);\n    vec3 l=1.-g;\n    vec3 i1=min(g.xyz,l.zxy);\n    vec3 i2=max(g.xyz,l.zxy);\n    \n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1=x0-i1+C.xxx;\n    vec3 x2=x0-i2+C.yyy;// 2.0*C.x = 1/3 = C.y\n    vec3 x3=x0-D.yyy;// -1.0+3.0*C.x = -0.5 = -D.y\n    \n    // Permutations\n    i=mod289(i);\n    vec4 p=permute(permute(permute(\n                i.z+vec4(0.,i1.z,i2.z,1.))\n                +i.y+vec4(0.,i1.y,i2.y,1.))\n                +i.x+vec4(0.,i1.x,i2.x,1.));\n                \n                // Gradients: 7x7 points over a square, mapped onto an octahedron.\n                // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n                float n_=.142857142857;// 1.0/7.0\n                vec3 ns=n_*D.wyz-D.xzx;\n                \n                vec4 j=p-49.*floor(p*ns.z*ns.z);//  mod(p,7*7)\n                \n                vec4 x_=floor(j*ns.z);\n                vec4 y_=floor(j-7.*x_);// mod(j,N)\n                \n                vec4 x=x_*ns.x+ns.yyyy;\n                vec4 y=y_*ns.x+ns.yyyy;\n                vec4 h=1.-abs(x)-abs(y);\n                \n                vec4 b0=vec4(x.xy,y.xy);\n                vec4 b1=vec4(x.zw,y.zw);\n                \n                //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n                //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n                vec4 s0=floor(b0)*2.+1.;\n                vec4 s1=floor(b1)*2.+1.;\n                vec4 sh=-step(h,vec4(0.));\n                \n                vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;\n                vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;\n                \n                vec3 p0=vec3(a0.xy,h.x);\n                vec3 p1=vec3(a0.zw,h.y);\n                vec3 p2=vec3(a1.xy,h.z);\n                vec3 p3=vec3(a1.zw,h.w);\n                \n                //Normalise gradients\n                vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));\n                p0*=norm.x;\n                p1*=norm.y;\n                p2*=norm.z;\n                p3*=norm.w;\n                \n                // Mix final noise value\n                vec4 m=max(.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.);\n                m=m*m;\n                return 42.*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),\n                dot(p2,x2),dot(p3,x3)));\n            }\n            \n            float fbm(vec3 p,float progress){\n                float value=0.;\n                float amplitude=1.;\n                float frequency=1.;\n                float lacunarity=2.;\n                float persistance=.5;\n                // float scale=1.;\n                // float scale=600.;\n                float scale=mix(0.,600.,progress);\n                int octaves=10;\n                \n                for(int i=0;i<octaves;i++){\n                    float noiseVal=snoise(p*frequency*scale);\n                    \n                    value+=amplitude*noiseVal;\n                    frequency*=lacunarity;\n                    amplitude*=persistance;\n                }\n                \n                return value;\n            }\n            \n            vec4 getFromColor(vec2 uv){\n                return texture(iChannel0,uv);\n            }\n            \n            float remap(float a,float b,float c,float d,float t)\n            {\n                return clamp((t-a)/(b-a),0.,1.)*(d-c)+c;\n            }\n            \n            vec4 transition(vec2 uv){\n                // float progress=iMouse.x/iResolution.x;\n                float progress=abs(sin(iTime*.5));\n                \n                float ratio=iResolution.x/iResolution.y;\n                \n                vec2 p=uv;\n                p-=.5;\n                p.x*=ratio;\n                float noise=fbm(vec3(p,0.),progress);\n                noise=remap(-1.,1.,0.,1.,noise);\n                float pr=smoothstep(progress-.01,progress,noise);\n                pr*=step(.1,1.-progress);\n                \n                return mix(\n                    getFromColor(uv),\n                    vec4(0.),\n                    pr\n                );\n            }\n            \n            void mainImage(out vec4 fragColor,in vec2 fragCoord){\n                vec2 uv=fragCoord/iResolution.xy;\n                \n                vec4 col=transition(uv);\n                \n                fragColor=col;\n            }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}