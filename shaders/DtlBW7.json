{
    "Shader": {
        "info": {
            "date": "1693031796",
            "description": "Code by Flopine | Edited version by Zhonk Vision\n",
            "flags": 64,
            "hasliked": 0,
            "id": "DtlBW7",
            "likes": 3,
            "name": "BINTANG HITAM",
            "published": 3,
            "tags": [
                "glsl",
                "zhonk",
                "zhonkvision",
                "vjloop"
            ],
            "usePreview": 0,
            "username": "zhonkvision",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "// Code by Flopine | Edited version by Zhonk Vision\n// AN AUDIO REACTIVE SHADER, play the sound in iChannel0\n\n#define ITER 64.\n#define PI 3.141592\n#define megabass (texture(iChannel0, vec2(0.001,0.25)).x)\n\n// Parameters to control the bintang shape\nuniform float shipLength; // Length of the bintang\nuniform float shipWidth;  // Width of the bintang\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(x,vec2(12.4,14.1)))*1245.4);}\n// Modify a 2D vector by rotating its components around the origin\nvec2 moda(vec2 p, float per)\n{\n    float a = atan(p.y, p.x);\n    float l = length(p);\n    a = mod(a-per/2., per)-per/4.;\n    return vec2(cos(a),sin(a))*l;\n}\n\n// Generate a 2x2 rotation matrix based on an angle\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n// Define a sphere shape centered at the origin\nfloat sphe (vec3 p, float r)\n{return length(p)-r;}\n\n// Define a cylinder shape centered at the origin along the x-y plane\nfloat cyl (vec2 p, float r)\n{return length(p)-r;}\n\n// Create a complex structure resembling needles or spikes\nfloat needles(vec3 p)\n{\n    vec3 pp = p;\n    float l_needle = 0.8 - clamp(megabass,0.,0.75);\n    \n    p.xz = moda(p.xz, 2.*PI/7.);\n    float n1 = cyl(p.yz,0.1-p.x*l_needle);\n    \n    p = pp;\n    p.y = abs(p.y);\n    p.y -= 0.1;\n    p.xz = moda(p.xz, 2.*PI/7.);\n    p.xy *= rot(PI/4.5);\n\n    float n2 = cyl(p.yz,0.1-p.x*l_needle);\n    \n    p = pp;\n    float n3 = cyl(p.xz, 0.1-abs(p.y)*l_needle);\n    \n    // Adjust the bintang shape here\n    float alienShip = sphe(p, shipLength) - shipWidth;\n    \n    return min(n3, min(n2, min(n1, alienShip)));\n}\n// Create a combined shape with a spiky ball and needles\nfloat spikyball (vec3 p)\n{\n    p.y -= iTime;\n    p.xz *= rot(iTime);\n    p.yz *= rot(iTime*0.5);\n    float s = sphe(p,.1);\n    return smin(s, needles(p), 2.);\n}\n\n// Define a complex room-like environment using trigonometric functions\nfloat room(vec3 p)\n{\n    p += sin(p.yzx - cos(p.zxy));\n    p += sin(p.yzx/0.5 + cos(p.zxy)/200.)*.5;\n    return -length(p.xz) + 5.;\n}\n\n// Combine the spiky ball and room shapes using the minimum function\nfloat SDF (vec3 p)\n{ \n    return min(spikyball(p),room(p));\n}\n\n// Main rendering function to calculate pixel color and shading\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // Generate a dither value based on pixel coordinates\n    float dither = hash21(uv);\n    \n    // Define the camera ray origin and direction\n    vec3 ro = vec3(0.001,0.001+iTime,-3.); \n    vec3 p = ro;\n    vec3 dir = normalize(vec3(uv, 1.));\n    \n    // Initialize shading intensity\n    float shad = 0.;\n    \n    // Raymarching loop\n    for (float i = 0.; i<ITER; i++)\n    {\n        // Calculate signed distance to the scene\n        float d = SDF(p);\n        // Break loop if very close to the surface\n        if(d<0.001)\n        {\n        \tshad = i/ITER;\n            break;\n        }\n        // Adjust distance with dither for randomness\n        d *= 0.9+dither*0.1;\n        // Move along the ray\n        p+=d*dir;\n    }    \n    \n    // Calculate shading color\n    vec3 c = vec3 (shad);\n    \n    // Apply gamma correction and assign color to pixel\n    fragColor = vec4(pow(c,vec3(1.5)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34540,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/oslated/ben-kaczor-alternation-kcz?si=24faeb12faab4ea0accefefabfb21afb&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}