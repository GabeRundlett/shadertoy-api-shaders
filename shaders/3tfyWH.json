{
    "Shader": {
        "info": {
            "date": "1591906902",
            "description": "This is based on my [url=https://www.shadertoy.com/view/tlXyz7#]\"Cratered desert planet\"[/url] shader. It's a small planet with several continents and oceans with moving water.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tfyWH",
            "likes": 2,
            "name": "Continents and oceans",
            "published": 3,
            "tags": [
                "raymarching",
                "planet"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "//this is based on https://www.shadertoy.com/view/4tcGDr\n\nconst int MAX_MARCHING_STEPS = 1000;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 1000.0;\nconst float EPSILON = 0.0001;\n\nconst float planet_size = 10000.0;\n\n\nconst float scale = EPSILON*100.0; //to prevent rendering artifacts\n\nvec3 final_color;\n\nvec3 surface_color(vec3 p)\n{\n    p /= scale*100.0;\n    float color1 = length(sin(p/2.0+sin(p.zxy/11.0+sin(p/17.0))))/5.0;\n    return vec3(color1*2.0,color1,color1);\n}\n\nvec3 water_color(vec3 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy)/10.0;\n    // Time varying pixel color\n    vec2 col = (uv*10.0);\n    for(float i = 1.0; i <6.0; i++){\n        uv += col;\n        col = cos(uv.yx*i+fragCoord.z);\n    }\n    // Output to screen\n    return vec3(col,1.0)/2.0;\n}\n\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\n\nfloat carve(vec3 p,float size) {\n    //p += sin(p/size);\n    //p += (sin(p.x+p.y+p.z));\n    //p *= (sin((p.x+p.y+p.z)/1000.0))+1.5;\n    //p += (sin(p.x*5.0)*cos(p.y*5.0)+cos(p.z*5.0))/(6.0+sin(length(p*2.0)/2.0));\n\t//size += sin((p.x+p.y+p.z));\n    //p += sin(p/size);\n    return sin(p.x)+sin(p.y)+sin(p.z);\n}\n\n\nfloat dunes1(vec3 p,float distortion){\n    p *= distortion;\n\treturn sin((p.x/3.0+p.y/5.0+p.z/11.0))/distortion;\n}\n\nfloat dunes(vec3 p,float distortion){\n\treturn dunes1(p,distortion) + dunes1(p.zxy,distortion);\n}\n\nfloat planet_surface(vec3 p){\n return length(p)-planet_size+dunes(p,0.2)*0.05;\n}\n\nfloat caves(vec3 p,float iterations){\n    //p += sin(p/17.0);\n    p /= 100.0;\n    float to_return = carve(p,1.0);\n    for(float i = 2.0; i <iterations; i++){\n        p += p.yzx+sin(p/i);\n        //p += sin(p)-cos(p);\n        p /= i;\n        to_return += carve(p,i);\n    }\n    return to_return-length(sin(p));\n}\n\n\nfloat sceneSDF(vec3 p) {\n    p /= scale;\n    float thing1 = max(planet_surface(p),-caves(p,5.0));\n    vec3 p2 = sin((p)/200.0+vec3(iTime*3.0))*100.0;\n    float p1 = length(p2);\n    float thing2 = planet_surface(p) + 100.0+p1;\n    float result = min(thing1, thing2);\n    //float result = sceneSDF1(p/1000.0+sceneSDF1(p/1000.0));\n    if(result == thing1){\n    \tfinal_color = surface_color(p*scale);\n    }\n    else if(result == thing2){\n    \tfinal_color = water_color(p*scale);\n    }\n    return result*scale;\n}\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON*depth) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    lightPos = eye;\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0,\n                          2.0,\n                          4.0);\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    //vec3 light2Pos = vec3(2.0 * sin(0.37),\n    //                      2.0 * cos(0.37),\n    //                      2.0);\n    //vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    //color += phongContribForLight(k_d, k_s, alpha, p, eye,\n    //                              light2Pos,\n    //                              light2Intensity);    \n    return color;\n}\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n    float speed = 10.0;\n    vec3 eye = scale*(1.2+.2*sin(iTime))*vec3(sin(iTime/speed), sin(iTime/speed), cos(iTime/speed))*planet_size;\n    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = viewToWorld * viewDir;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    \n    // Use the surface normal as the ambient color of the material\n    vec3 K_a = final_color;\n    vec3 K_d = K_a;\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}