{
    "Shader": {
        "info": {
            "date": "1721052366",
            "description": "fork from baretto",
            "flags": 0,
            "hasliked": 0,
            "id": "XcXcWH",
            "likes": 0,
            "name": "Fork Fluted Gla eigilnikol 320",
            "published": 3,
            "tags": [
                "glass",
                "flutedglass"
            ],
            "usePreview": 0,
            "username": "eigilnikolajsen",
            "viewed": 90
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Define the custom uniforms as constants or use ShaderToy's UI for uniforms\n    const float u_numSegments = 10.0; // Number of segments\n    const float u_inputOutputRatio = 1.2; // Ratio between input and output segments\n    const float u_overlap = 0.6; // Overlap between segments\n    const float u_light_strength = 0.2;\n\n    // Calculate UV coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float segmentWidth = 1.0 / u_numSegments;\n    float inputSegmentWidth = segmentWidth * u_inputOutputRatio;\n    float overlapWidth = segmentWidth * u_overlap;\n\n    // Determine which segment we are in\n    float segmentIndex = floor(uv.x / segmentWidth);\n    float segmentStart = segmentIndex * segmentWidth;\n    float segmentEnd = segmentStart + segmentWidth;\n\n    // Calculate the local uv within the segment\n    float localUVx = (uv.x - segmentStart) / segmentWidth;\n\n    // Apply log compression to the x coordinate within the segment\n    float compressedX = log(1.0 + localUVx * 9.0) / log(10.0);\n\n    // Calculate the corresponding input UV\n    float inputSegmentStart = segmentIndex * (inputSegmentWidth - overlapWidth);\n    vec2 inputUV = vec2(inputSegmentStart + compressedX * inputSegmentWidth, uv.y);\n\n    // Get the color from the input image\n    vec4 color = texture(iChannel0, inputUV);\n\n    // Apply the vertical gradient\n    float gradientMidpoint = 0.8;\n    float gradientStrength = smoothstep(gradientMidpoint, 1.0, uv.y);\n    color = mix(color, vec4(0.0, 0.0, 0.0, 0.5), gradientStrength*0.5);\n    \n    // Apply the black gradient on the right side of each segment\n    float rightGradientStrength = smoothstep(0.8, 1.0, localUVx);\n    color = mix(color, vec4(0.0, 0.0, 0.0, rightGradientStrength), rightGradientStrength*u_light_strength);\n\n    // Apply the white gradient on the left side of each segment\n    float leftGradientStrength = smoothstep(0.1, 0.0, localUVx);\n    color = mix(color, vec4(1.0, 1.0, 1.0, leftGradientStrength), leftGradientStrength*u_light_strength);\n\n    \n    fragColor = color;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}