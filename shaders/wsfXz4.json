{
    "Shader": {
        "info": {
            "date": "1550703479",
            "description": "I stream shader creation every Wednesday at 9pm UK time, over at [url]https://twitch.tv/lunasorcery[/url]\nCome and watch a show!\n\nOr watch the VOD for this shader here: [url]https://www.twitch.tv/videos/384007580[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wsfXz4",
            "likes": 19,
            "name": "[twitch] Toroidal",
            "published": 3,
            "tags": [
                "sdf",
                "raymarcher",
                "livecoding",
                "twitch"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 1492
        },
        "renderpass": [
            {
                "code": "/*\n\tThis shader was created live on stream!\n\tYou can watch the VOD here: https://www.twitch.tv/videos/384007580\n\n\tI use the Bonzomatic tool by Gargaj/Conspiracy:\n\thttps://github.com/Gargaj/Bonzomatic\n\n\tWednesdays around 9pm UK time I stream at https://twitch.tv/lunasorcery\n\tCome and watch a show!\n\n\t~yx\n*/\n\n#define pi acos(-1.)\n#define tau (pi*2.)\n\nvec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\nfloat sdBox(vec3 p, vec3 r)\n{\n    p=abs(p)-r;\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat sdXor(float a, float b)\n{\n    return min(max(a,-b),max(-a,b));\n}\n\nfloat scene2(vec3 p)\n{\n    p=abs(p)-.3+sin(iTime)*.1;\n    p=abs(p)-.1;\n    p=abs(p);\n    return max(p.x,p.y)-.05;\n\n    return sdBox(p,vec3(.3));\n}\n\nconst float REP = 9.;\n\nfloat scene3(vec3 p)\n{\n    vec3 cell = floor((p-REP)/(REP*2.));\n    p = mod(p-REP,REP*2.)-REP;\n    p.xz = rotate(p.xz, iTime+cell.x+cell.y/2.+cell.z/4.);\n    vec3 a=vec3(\n        length(p.xz)-6.,\n        p.y,\n        atan(p.x,p.z)/tau\n    );\n    a.xy = rotate(a.xy, iTime);\n    return max(sdXor(p.x,p.z),scene2(a));\n}\n\nfloat scene4(vec3 p)\n{\n    return min(\n        scene3(p),\n        scene3(p+vec3(REP))\n    );\n}\n\nfloat scene(vec3 p)\n{\n    // experimental mirroring thing\n    //p = abs(mod(p,REP*4.)-REP*2.);\n\n    return min(\n        scene4(p.xyz),\n        min(\n            scene4(p.yzx+vec3(0,0,REP)),\n            scene4(p.zxy+vec3(REP,0,0))\n        )\n    );\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy-.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 cam = vec3(0,0,-9);\n    vec3 dir = normalize(vec3(uv, 1));\n\n    cam.yz = rotate(cam.yz, .5);\n    dir.yz = rotate(dir.yz, .5);\n    cam.xz = rotate(cam.xz, pi/4.);\n    dir.xz = rotate(dir.xz, pi/4.);\n\n    float time = iTime*.25;\n    cam.y += REP*.25;\n    cam.z = -(time/pi)*REP*2.;\n    cam.x = sin(time)*REP;\n    dir.xy = rotate(dir.xy, sin(time*.3)*5.);\n    dir.xz = rotate(dir.xz, cos(time*.1)*3.5);\n\n    float t = 0.;\n    float k = 0.;\n    for (int i=0;i<100;++i) {\n        k=scene(cam+dir*t);\n        t+=k;\n        if(abs(k)<.001)\n        {\n            break;\n        }\n    }\n\n    vec3 h = cam+dir*t;\n    vec2 o = vec2(.001, 0);\n    vec3 n = normalize(vec3(\n        scene(h+o.xyy)-scene(h-o.xyy),\n        scene(h+o.yxy)-scene(h-o.yxy),\n        scene(h+o.yyx)-scene(h-o.yyx)\n    ));\n\n    float fog = dot(-dir,n) * pow(.96, t);\n\n    n.xz = rotate(n.xz, -cos(time*.1)*3.5);\n    n.xy = rotate(n.xy, -sin(time*.3)*5.);\n    float light = pow(n.x*.5+.5,4.);\n\n    out_color.rgb = vec3(0);\n    out_color.rgb += mix(vec3(0,0,0.02), vec3(.1,.2,1), fog);\n    out_color.rgb += mix(vec3(0,0,0), vec3(.1,1.3,1.7), light*fog);\n    out_color *= 1.3-dot(uv,uv);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}