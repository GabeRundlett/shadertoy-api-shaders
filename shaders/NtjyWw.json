{
    "Shader": {
        "info": {
            "date": "1649779909",
            "description": "convenient trivial variant of IQ's https://shadertoy.com/view/XlXcW4  eating vec3.\nAny scalings and signing work. padding 0 as extra seeds is ok.\n\nsee also: vec2→float https://www.shadertoy.com/view/fsKBzw",
            "flags": 0,
            "hasliked": 0,
            "id": "NtjyWw",
            "likes": 17,
            "name": "Integer Hash - II - vec3→vec3",
            "published": 3,
            "tags": [
                "2d",
                "hash"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 923
        },
        "renderpass": [
            {
                "code": "// Fork of \"Integer Hash - II\" by iq. https://shadertoy.com/view/XlXcW4\n\n// 2017 Inigo Quilez\n\n// Based on https://www.shadertoy.com/view/4tfyW4, but simpler and faster\n//\n// See these too: \n//\n// - https://www.shadertoy.com/view/llGSzw\n// - https://www.shadertoy.com/view/XlXcW4\n// - https://www.shadertoy.com/view/4tXyWN\n//\n// Not testes for uniformity, stratification, periodicity or whatever. Use (or not!) at your own risk\n\n\n  const uint k = 1103515245U;  // GLIB C\n//const uint k = 134775813U;   // Delphi and Turbo Pascal\n//const uint k = 20170906U;    // Today's date (use three days ago's dateif you want a prime)\n//const uint k = 1664525U;     // Numerical Recipes\n\nvec3 uhash3( uvec3 x )         // iq version\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)/float(0xffffffffU);\n}\n\n\nvec3 hash( vec3 f )            // $FaN: vec3 to vec3. any scaling. f.z=0 seed is ok.\n{ \n    return uhash3( floatBitsToUint(f) );\n // return uhash3( uvec3( floatBitsToUint(f.x),\n //                       floatBitsToUint(f.y),\n //                       floatBitsToUint(f.z) ) );\n}\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy/2.,\n         U = ( 2.* u - R ) / R.y;\n         \n    O.rgb = hash(1e-5*vec3(U,iTime));  // histograms are ok whatever the scaling\n // O.rgb = hash(1e 5*vec3(U,iTime));\n // O.rgb = hash(     vec3(U,iTime));\n // O = vec4( hash(vec3(U,0)).r );     // 0 extra seed is ok\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}