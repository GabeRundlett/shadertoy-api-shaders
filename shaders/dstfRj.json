{
    "Shader": {
        "info": {
            "date": "1697412630",
            "description": "fractal tutorial",
            "flags": 0,
            "hasliked": 0,
            "id": "dstfRj",
            "likes": 1,
            "name": "test-shader-1",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "deinondaemon",
            "viewed": 136
        },
        "renderpass": [
            {
                "code": "vec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // sample shader gradient\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    for (float i = 0.0; i < 3.0; i++) {\n    \n        uv = fract(uv * 1.75) -.5;\n\n        float d = length(uv) * exp(-length(uv0));\n        vec3 col = palette(\n            length(uv0) + i *.4 + iTime*.5, \n            vec3(.5, .5, .5), \n            vec3(.5, .5, .5), \n            vec3(1.0, 1.0, .5), \n            vec3(.8, .6, .5)\n        );\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n        d = pow(.01/d, 1.4);\n\n        finalColor += col * d;\n\n  \n   }  \n   \n   fragColor = vec4(finalColor, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}