{
    "Shader": {
        "info": {
            "date": "1699092357",
            "description": "License CC0: Dawn at a distant world II\nA few years ago I did \"Dawn at a distant world\"\nThe height field is still good I think but the old shader had lots of aliasing.\nTried to fix some of them",
            "flags": 96,
            "hasliked": 0,
            "id": "dltyWr",
            "likes": 51,
            "name": "Dawn at a distant world II",
            "published": 3,
            "tags": [
                "terrain",
                "fbm"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 606
        },
        "renderpass": [
            {
                "code": "// License CC0: Dawn at a distant world [REMASTERED]\n//  A few years ago I did \"Dawn at a distant world\"\n//  The height field is still good I think but the old shader had \n//  lots of aliasing.\n//  I learnt a few tricks since that time though and applied some of them\n//  I think it improved the shader a fair bit even though some aliasing remains\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 q = fragCoord.xy/iResolution.xy;\n  fragColor = texture(iChannel1, q);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 35170,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/mikeoldfieldofficial/mike-oldfield-let-there-be?in=user-837937811/sets/mike-oldfield-official&si=99bd68bdd3d843ff9260ff7e75ffa886&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// License CC0: Dawn at a distant world [REMASTERED]\n//  A few years ago I did \"Dawn at a distant world\"\n//  The height field is still good I think but the old shader had \n//  lots of aliasing.\n//  I learnt a few tricks since that time though and applied some of them\n//  I think it improved the shader a fair bit even though some aliasing remains\n\n    \n#define PI  3.141592654\n#define TAU (2.0*PI)\n\n#define TOLERANCE       1E-3\n#define MAX_ITER        40\n#define MIN_DISTANCE    0.01\n#define MAX_DISTANCE    9.0\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst vec3  skyCol1       = vec3(0.35, 0.45, 0.6);\nconst vec3  skyCol2       = vec3(0.0);\nconst vec3  skyCol3       = pow(skyCol1, vec3(0.25));\nconst vec3  sunCol1       = vec3(1.0,0.6,0.4);\nconst vec3  sunCol2       = vec3(1.0,0.9,0.7);\nconst vec3  smallSunCol1  = vec3(1.0,0.5,0.25)*0.5;\nconst vec3  smallSunCol2  = vec3(1.0,0.5,0.25)*0.5;\nconst vec3  mountainColor = sqrt(vec3(0.95, 0.65, 0.45));\nconst vec4  planet        = vec4(80.0, -20.0, 100.0, 50.0)*1000.0;\nconst vec3  ringsNormal   = normalize(vec3(1.0, 1.25, 0.0));\nconst vec4  rings         = vec4(ringsNormal, -dot(ringsNormal, planet.xyz));\n\nvec2 mod2_1(inout vec2 p) {\n  vec2 c = floor(p + 0.5);\n  p = fract(p + 0.5) - 0.5;\n  return c;\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat egg(vec2 p, float ra, float rb) {\n  const float k = sqrt(3.0);\n  p.x = abs(p.x);\n  float r = ra - rb;\n  return ((p.y<0.0)       ? length(vec2(p.x,  p.y    )) - r :\n          (k*(p.x+r)<p.y) ? length(vec2(p.x,  p.y-k*r)) :\n                              length(vec2(p.x+r,p.y    )) - 2.0*r) - rb;\n}\n\nvec2 hash(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return -1. + 2.*fract (sin (p)*43758.5453123);\n}\n\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nvec2 raySphere(vec3 ro, vec3 rd, vec4 sphere) {\n  vec3 center = sphere.xyz;\n  float radius = sphere.w;\n  vec3 m = ro - center.xyz;\n  float b = dot(m, rd);\n  float c = dot(m, m) - radius*radius;\n  if(c > 0.0 && b > 0.0) return vec2(-1.0, -1.0);\n  float discr = b * b - c;\n  if(discr < 0.0) return vec2(-1.0);\n  float normalMultiplier = 1.0;\n  float s = sqrt(discr);\n  float t0 = -b - s;\n  float t1 = -b + s;;\n  return vec2(t0, t1);\n}\n\nfloat noise1(vec2 p) {\n  vec2 n = mod2_1(p);\n  vec2 hh = hash(sqrt(2.0)*(n+1000.0));\n  hh.x *= hh.y;\n  \n  const float r = 0.225;\n \n  float d = circle(p, 2.0*r);\n  \n  float h = hh.x*smoothstep(0.0, r, -d);\n\n  return h*0.25;\n}\n\nfloat noise2(vec2 p) {\n  vec2 n = mod2_1(p);\n  vec2 hh = hash(sqrt(2.0)*(n+1000.0));\n  hh.x *= hh.y;\n\n  p *= ROT(TAU*hh.y);\n  const float r = 0.45;\n \n  float d = egg(p, 0.75*r, 0.5*r*abs(hh.y));\n  \n  float h = -abs(hh.x)*(smoothstep(0.0, r, -2.0*d)-0.3*smoothstep(0.0, 0.2*r, -d));\n\n  return h*0.275;\n}\n\nfloat height(vec2 p, int mx) {\n  const float aa   = 0.45;\n  const float oo   = 3.93;\n  const float near = 0.25;\n  const float far  = 0.65;\n  const mat2 pp   = 2.03*ROT(1.2);\n  \n  float a = 1.0;\n  float o = 0.2;\n  float s = 0.075*sin(p.x+p.y);\n  float d = 0.0;\n  \n  int i = 0;\n  for (; i < 4;++i) {\n    float nn = a*noise2(p);\n    s += nn;\n    d += abs(a);\n    p += o;\n    a *= aa;\n    p *= pp;\n    o *= oo;\n  }\n\n  \n  for (; i < mx; ++i) {\n    float nn = a*noise1(p);\n    s += nn;\n    d += abs(a);\n    p += o;\n    a *= aa;\n    o *= oo;\n    p *= pp;\n  }\n \n\n  float hid = (s/d);\n  \n  return hid;\n}\n\nfloat height(vec2 p) {\n  return height(p, 6);\n}\n\nfloat hiheight(vec2 p) {\n  return height(p, 8);\n}\n  \nvec3 normal(vec2 p, float aa) {\n  vec2 eps = vec2(aa, 0.0);\n  \n  vec3 n;\n  \n  n.x = (hiheight(p - eps.xy) - hiheight(p + eps.xy));\n  n.y = 2.0*eps.x;\n  n.z = (hiheight(p - eps.yx) - hiheight(p + eps.yx));\n  \n  return normalize(n);\n}\n\nfloat march(vec3 ro, vec3 rd, float id, out int max_iter) {\n  float dt = 0.1;\n  float d = id;\n  for (int i = 0; i < MAX_ITER; ++i) {\n    vec3 p = ro + d*rd;\n    float h = height(p.xz);\n    if (d > MAX_DISTANCE) {\n      max_iter = i;\n      return MAX_DISTANCE;\n    }\n    float hd = p.y - h;\n    if (hd < TOLERANCE) {\n      max_iter = i;\n      return d;\n    }\n    dt = max(hd, TOLERANCE);\n    d += dt;\n  }\n  \n  max_iter = MAX_ITER;\n  return d;\n}\n\nvec3 sunDirection() {\n  return normalize(vec3(-0.5, 0.085, 1.0));\n}\n\nvec3 smallSunDirection() {\n  return normalize(vec3(-0.2, -0.05, 1.0));\n}\n\nvec3 rocketDirection() {\n  return normalize(vec3(0.0, -0.2+mod(iTime, 90.0)*0.0125, 1.0));\n}\n\nfloat psin(float f) {\n  return 0.5 + 0.5*sin(f);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  vec3 sunDir = sunDirection();\n  vec3 smallSunDir = smallSunDirection();\n\n  float sunDot = max(dot(rd, sunDir), 0.0);\n  float smallSunDot = max(dot(rd, smallSunDir), 0.0);\n  \n  float angle = atan(rd.y, length(rd.xz))*2.0/PI;\n\n  vec3 skyCol = mix(mix(skyCol1, skyCol2, smoothstep(0.0 , 1.0, 5.0*angle)), skyCol3, smoothstep(0.0, 1.0, -5.0*angle));\n  \n  vec3 sunCol = 0.5*sunCol1*pow(sunDot, 20.0) + 8.0*sunCol2*pow(sunDot, 2000.0);\n  vec3 smallSunCol = 0.5*smallSunCol1*pow(smallSunDot, 200.0) + 8.0*smallSunCol2*pow(smallSunDot, 20000.0);\n\n  vec3 dust = pow(sunCol2*mountainColor, vec3(1.75))*smoothstep(0.05, -0.1, rd.y)*0.5;\n\n  vec2 si = raySphere(ro, rd, planet);\n  float pi = rayPlane(ro, rd, rings);\n  \n  float dustTransparency = smoothstep(-0.075, 0.0, rd.y);\n  \n  vec3 planetSurface = ro + si.x*rd;\n  vec3 planetNormal = normalize(planetSurface - planet.xyz);\n  float planetDiff = max(dot(planetNormal, sunDir), 0.0);\n  float planetBorder = max(dot(planetNormal, -rd), 0.0);\n  float planetLat = (planetSurface.x+planetSurface.y)*0.0005;\n  vec3 planetCol = mix(1.3*vec3(0.9, 0.8, 0.7), 0.3*vec3(0.9, 0.8, 0.7), pow(psin(planetLat+1.0)*psin(sqrt(2.0)*planetLat+2.0)*psin(sqrt(3.5)*planetLat+3.0), 0.5));\n\n  vec3 ringsSurface = ro + pi*rd;\n\n  vec3 rocketDir = rocketDirection();\n  float rocketDot = max(dot(rd, rocketDir), 0.0);\n  float rocketDot2 = max(dot(normalize(rd.xz), normalize(rocketDir.xz)), 0.0);\n  vec3 rocketCol = vec3(0.25)*(3.0*smoothstep(-1.0, 1.0, psin(iTime*15.0*TAU))*pow(rocketDot, 70000.0) + smoothstep(-0.25, 0.0, rd.y - rocketDir.y)*step(rd.y, rocketDir.y)*pow(rocketDot2, 1000000.0))*dustTransparency;\n\n  float borderTransparency = smoothstep(0.0, 0.1, planetBorder);\n  \n  float ringsDist = length(ringsSurface - planet.xyz)*1.0;\n  float ringsPeriod = ringsDist*0.001;\n  const float ringsMax = 150000.0*0.655;\n  const float ringsMin = 100000.0*0.666;\n  float ringsMul = pow(psin(ringsPeriod+1.0)*psin(sqrt(0.5)*ringsPeriod+2.0)*psin(sqrt(0.45)*ringsPeriod+4.0)*psin(sqrt(0.35)*ringsPeriod+5.0), 0.25);\n  float ringsMix = psin(ringsPeriod*10.0)*psin(ringsPeriod*10.0*sqrt(2.0))*(1.0 - smoothstep(50000.0, 200000.0, pi));\n//  float ringsDiff = max(-dot(rings.xyz, sunDir), 0.0);\n\n  vec3 ringsCol = mix(vec3(0.125), 0.75*mountainColor, ringsMix)*step(-pi, 0.0)*step(ringsDist, ringsMax)*step(-ringsDist, -ringsMin)*ringsMul;\n  \n  vec3 final = vec3(0.0);\n    \n  final += ringsCol*(step(pi, si.x) + step(si.x, 0.0));\n  \n  final += step(0.0, si.x)*pow(planetDiff, 0.75)*mix(planetCol, ringsCol, 0.0)*dustTransparency*borderTransparency + ringsCol*(1.0 - borderTransparency);\n\n  final += skyCol + sunCol + smallSunCol + dust + rocketCol;\n\n  return final;\n}\n\nvec3 getColor(vec3 ro, vec3 rd, vec3 nrd) {\n  int max_iter = 0;\n  vec3 skyCol = skyColor(ro, rd);\n  vec3 col = vec3(0);\n  \n  float id = (0.125 - ro.y)/rd.y;\n  \n  if (id > 0.0)   {\n    float d = march(ro, rd, id, max_iter);\n    vec3 sunDir = sunDirection();\n    vec3 osunDir = sunDir*vec3(-1.0, .0, -1.0);\n    vec3 p = ro + d*rd;\n    vec3 np = ro + d*nrd;\n    float aaf = smoothstep(0.0, 0.45, -rd.y);\n    float aa = sqrt(8.0)*distance(np, p)/max(aaf, 1E-3);\n    vec3 normal = normal(p.xz, aa);\n    \n    float amb = 0.2;\n\n    float dif1 = max(0.0, dot(sunDir, normal));\n    vec3 shd1 = sunCol2*mix(amb, 1.0, pow(dif1, 0.75));\n\n    float dif2 = max(0.0, dot(osunDir, normal));\n    vec3 shd2 = sunCol1*mix(amb, 1.0, pow(dif2, 0.75));\n\n    vec3 ref = reflect(rd, normal);\n    vec3 rcol = skyColor(p, ref);\n\n    col = mountainColor*amb*skyCol3;\n    col += mix(shd1, shd2, -0.5)*mountainColor;   \n    float fre = 1.0+dot(normal, rd);\n    fre *= fre;\n    fre *= fre;\n    col += rcol*fre*0.5;\n    col += p.y;\n    col = tanh(col);\n    //col.x += 1.0-aaf;\n    col = mix(col, skyCol, smoothstep(0.5*MAX_DISTANCE, 1.*MAX_DISTANCE, d));\n  } else {\n    col = skyCol;\n  }\n  return col;\n}\n\nvec3 effect(vec2 p) {\n  vec2 np = p+1.0/iResolution.y;\n  float off = 0.5*iTime;\n\n  vec3 ro  = vec3(0.5, 1.0-0.25, -2.0 + off);\n  vec3 la  = ro + vec3(0.0, -0.00,  2.0);\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww));\n  vec3 vv = normalize(cross(ww, uu));\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.0*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + 2.0*ww);\n\n  vec3 col = getColor(ro, rd, nrd);\n\n  float f = sqrt(max(iTime-length(p+vec2(0.0, 1.0)), 0.0));\n  col *= smoothstep(0.25, 4.0, f);\n\n  return col;\n  \n}\nconst vec3  luma        = vec3(0.299, 0.587, 0.114);\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 q = fragCoord.xy/iResolution.xy;\n  vec2 p = -1.0 + 2.0*q;\n  p.x *= iResolution.x/iResolution.y;\n  \n  vec3 col = effect(p);\n\n  const int c = 2;\n  vec2 AA = 3.0/iResolution.xy;\n  vec2 start = q-float(c)*AA;\n  vec3 bcol = vec3(0); \n  for (int y = -c; y <= c; ++y) {\n    vec2 pp = start;\n    for (int x = -c; x <= c; ++x) {\n      vec3 fcol = texture(iChannel0, pp).xyz;\n      bcol += fcol;\n      pp.x += AA.x;\n    }\n\n    start.y += AA.y;\n  }\n  \n  bcol /= float((2*c+1)*(2*c+1));\n  bcol = clamp(bcol, 0.0, 10.0);\n  vec4 pcol = texture(iChannel0, q);\n  float blum = min(min(pcol.x, pcol.y), pcol.z);\n  float bm = 0.5*smoothstep(0.5, 0.85, blum);\n  col = mix(col, 1.05*bcol, bm);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}