{
    "Shader": {
        "info": {
            "date": "1667947055",
            "description": "Testing inverse trigonometry functions, compare x and acos(cos(x)) etc. Text shows function values at mouse. 'x' for native sin, cos, tan.",
            "flags": 16,
            "hasliked": 0,
            "id": "msSGRc",
            "likes": 7,
            "name": "Inverse Trig Accuracy I",
            "published": 3,
            "tags": [
                "atan",
                "acos",
                "precision",
                "trigonometry",
                "asin"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Inverse Trig Function Accuracy, mla 2022.\n//\n////////////////////////////////////////////////////////////////////////////////\n//\n// Inverse trig function errors.\n\n// Red channel:   absolute error in acos(cos(x))\n// Green channel: absolute error in asin(sin(x))\n// Blue channel:  absolute error in atan(tan(x))\n//\n// sin and cos calculated by accurate functions, press 'x' to use the\n// native functions - be warned, the result on Intel isn't pretty.\n//\n// Note that acos and asin are significantly less accurate than atan\n// (on Nvidia, Pixel 4a and Intel anyway, very much so on Intel).\n//\n// Horizontal scale is 0..π/2. Vertical scale is ±1e-4 on all platforms.\n//\n// Numeric display shows the main trig functions evaluated at the mouse position\n// and compared with the more accurate myxxx functions. We also compute the inverse\n// functions for comparison with the original theta.\n//\n//         mycos(theta)       mysin(theta)       mytan(theta)\n//         cos(theta)         sin(theta)         tan(theta)\n// theta   acos(mycos(theta)) asin(mysin(theta)) atan(mytan(theta))\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// mycos and mysin have been checked on CPU & agree to a few ulps with\n// builtin functions in range [0..pi/2] (ulp error is larger when result is\n// closer to zero, but absolute error is fine). It's possibly worth using\n// sin(pi/2-x) for cos(x) in upper half of range, but there isn't a lot in it.\n\nfloat mycos(float x) {\n  int N = 12;\n  float x2 = x*x, y = 1.0;\n  for (int n = N; n > 0; n-=2) {\n    y = 1.0-x2*y/float(n*(n-1));\n  }\n  return y;\n}\n\n\nfloat mysin(float x) {\n  int N = 10;\n  float x2 = x*x, y = 1.0;\n  for (int n = N; n > 0; n-=2) {\n    y = 1.0-x2*y/float(n*(n+1));\n  }\n  return x*y;\n}\n\n// https://www.shadertoy.com/view/4sBfRd\nvec2 char(vec2 p, int c) {\n  // Compute uv for font texture.\n  // p is [0,1] coordinates in square character\n  return (p + vec2(c,15-c/16))/16.0;\n}\n\nfloat hud(vec2 fragCoord, float theta) {\n  const int digits = 7;\n  const int nrows = 15, ncols = 4;\n  // Table structure\n  vec2 cellsize = iResolution.xy/vec2(ncols,nrows);\n  ivec2 cellindex = ivec2(fragCoord/cellsize);\n  float fsize = cellsize.y; // \"Font size\" = line height in pixels\n  int column = cellindex.x;\n  int row = cellindex.y;\n  vec2 p = mod(fragCoord,cellsize)/fsize;\n  // Get coords for mipmap scaling - p and uv have discontinuities\n  vec2 uvscale = 0.5*fragCoord/(16.0*fsize);   // 0.5 to sharpen a little\n  vec2 dx = dFdx(uvscale), dy = dFdy(uvscale); // Calculate early\n  float x;\n  float cost = cos(theta);\n  float mycost = mycos(theta);\n  float sint = sin(theta);\n  float mysint = mysin(theta);\n  float mytant = mysint/mycost;\n  if (column == 0) {\n    if (row == 0) x = theta;\n    else return 0.0;\n  } else if (column == 1) {\n    if (row == 1) x = cost;\n    else if (row == 2) x = mycost;\n    else if (row == 0) x = acos(mycost);\n    else return 0.0;\n  } else if (column == 2) {\n    if (row == 1) x = sint;\n    else if (row == 2) x = mysint;\n    else if (row == 0) x = asin(mysint);\n    else return 0.0;\n  } else if (column == 3) {\n    if (row == 1) x = tan(theta);\n    else if (row == 2) x = mytant;\n    else if (row == 0) x = atan(mytant);\n    else return 0.0;\n  } else {\n    return 0.0;\n  }\n\n  // Draw the character\n  vec4 metrics = vec4(0.25,0.75,0,1);\n  float charwidth = metrics.y-metrics.x;\n  float colwidth = cellsize.x/fsize-1.0; // Cell width in chars, with padding\n  int charpos = int(p.x/charwidth);\n  vec2 uv = vec2(0);\n  int c = floatchar(x,digits,charpos); // Get character at charpos, 0 if out of range\n  if (c < 0) return 0.0;\n  float charstart = charwidth*float(charpos); // character start\n  uv = char(vec2(p.x-charstart+metrics.x,p.y),c);\n  vec4 t = textureGrad(iChannel0,uv,dx,dy);\n  return t.x;  \n}\n\nbool comp(float y, float r) { return (0.0 < y) == (y < r); }\n\n// Possibly better implementations of acos and asin.\nfloat acos2(float x) { return atan(1.0/(x*inversesqrt(1.0-x*x))); }\nfloat asin2(float x) { return atan(x*inversesqrt(1.0-x*x)); }\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  float xmouse = 0.1*iTime;\n  float scale = 1e-4;\n  if (iMouse.x > 10.0) {\n    xmouse = iMouse.x/iResolution.x;\n    //scale = exp(-10.0*iMouse.y/iResolution.y);\n  }\n  xmouse = 0.5*PI*fract(xmouse);\n  //float check = max(0.1,-iTime);\n  //if (abs(cos(check)-mycos(check)) < 1e-6) scale = 1e-6;\n  float x = 0.5*PI*fragCoord.x/iResolution.x;\n  float y = scale * (2.0*fragCoord.y-iResolution.y)/iResolution.y;\n  float cosx = mycos(x), sinx = mysin(x), tanx = sinx/cosx;\n  if (key(CHAR_X)) {\n    cosx = cos(x), sinx = sin(x), tanx = tan(x);\n  }\n  float t0 = x-acos(cosx);\n  float t1 = x-asin(sinx);\n  float t2 = x-atan(tanx);\n  vec3 col = vec3(comp(y,t0),comp(y,t1),comp(y,t2));\n\n  col = mix(col,vec3(1),hud(fragCoord,xmouse)); \n  \n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.141592654;\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\n// const int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\n// const int KEY_UP = 38;\n// const int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\n// const int CHAR_A = 65;\n// const int CHAR_B = 66;\n// const int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\n// const int CHAR_F = 70;\n// const int CHAR_G = 71;\n// const int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\n// const int CHAR_R = 82;\n// const int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\n// const int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n\n// Wrapper for division to allow emulation of GPU style division\n// on CPU, not that this makes much difference to result.\nfloat fdiv(float x, float y) { return x/y; }\n\n// If we've found the character for the target index, return it.\n#define CHAR(c) { if (index++ == cindex) return(c); }\n#define SIGN(x) { if ((x) < 0.0) CHAR(MINUS) else CHAR(SPACE) } \n\n// Format x to digits precision and return the character at cindex,\n// or -1 if cindex is out of range.\nint floatchar(float x, int digits, int cindex) {\n  if (cindex < 0 || cindex > digits+6) return -1;\n  int index = 0;\n  const float pmax = 1e15; //  Large power of 10 with a nice representation\n  const int emax = 15; // Exponent of pmax\n  const float pow10[] = float[]( 1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8 );\n  const int SPACE = 0x20, ZERO = 0x30, POINT = 0x2e, MINUS = 0x2d, PLUS = 0x2b;\n  const int A = 0x61, E = 0x65, F = 0x66, I = 0x69, N = 0x6e;\n  if (isinf(x)) {\n    SIGN(x);\n    CHAR(I); CHAR(N); CHAR(F);\n  } else if (isnan(x)) {\n    // Maybe show the bits\n    if (floatBitsToInt(x) < 0) CHAR(MINUS);\n    CHAR(N); CHAR(A); CHAR(N);\n  } else if (x == 0.0) {\n    SIGN(x);\n    CHAR(ZERO);\n  } else {\n    SIGN(x);\n    x = abs(x);\n    int exp = 0; // Compute exponent here\n    float llimit = pow10[digits-2], ulimit = 10.0*llimit;\n    // Now put x in the range llimit <= x <= ulimit\n    // This is a delicate business if we aren't to\n    // lose too much precision\n    while (x > llimit*pmax) { x /= pmax; exp += emax; }\n    while (x < fdiv(ulimit,pmax)) { x *= pmax; exp -= emax; }\n    if (x >= ulimit) {\n      float p = 1.0;\n      while (fdiv(x,p) > ulimit) {\n        exp++; p *= 10.0;\n      }\n      x = fdiv(x,p);\n    } else if (x < llimit) {\n      float p = 1.0;\n      while (x*p < llimit) {\n        exp--;  p *= 10.0;\n      }\n      x *= p;\n    }\n    assert(!isinf(x));\n    assert(!isnan(x));\n    assert(x >= llimit);\n    assert(x <= ulimit); // Equality is possible!\n    // Round to an integer which has exactly the significant figures we want.\n    int n = int(round(x));\n    if (n == int(ulimit)) {\n      // Just in case the round has taken us the wrong way\n      n /= 10; exp++;\n    }\n    assert(n >= int(llimit));\n    assert(n < int(ulimit));\n    // Now we have a correctly rounded integer representation together\n    // with the correct exponent. The rest is just formatting.\n\n    // See if we want to use exponent notation\n    int e = 0;\n    if (exp <= -digits-4) {\n      e = exp+digits-1;\n      exp = -digits+1;\n    } else if (exp > 0) {\n      e = exp+digits-1;\n      exp = -digits+1;\n    }\n    while(n%10 == 0 && exp < 0) {\n      // Remove trailing zeros\n      n /= 10; exp++;\n    }\n    int m = 1, i = exp+1;\n    while (10*m <= n) { m *= 10; i++; }\n    // i is number of characters in front of decimal point\n    if (i <= 0) {\n      CHAR(ZERO);\n      CHAR(POINT);\n      // Add leading digits for 0 < x < 1\n      while(i < 0) {\n        CHAR(ZERO); i++;\n      }\n    }\n    while(m != 0) {\n      CHAR(ZERO+n/m%10);\n      m /= 10; i--;\n      // Don't print trailing point!\n      if (i == 0 && m != 0) CHAR(POINT);\n    }\n    if (e != 0) {\n      CHAR(E);\n      CHAR(e < 0 ? MINUS : PLUS);\n      e = abs(e);\n      CHAR(ZERO+e/10); CHAR(ZERO+e%10); \n    }\n  }\n  return -1;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}