{
    "Shader": {
        "info": {
            "date": "1461841394",
            "description": "Please Classify This Approach (And no.. stupid is not a classification..)\nI came up with it trying to write a shorter version of: https://www.shadertoy.com/view/MtjGz3",
            "flags": 0,
            "hasliked": 0,
            "id": "XdtXDX",
            "likes": 1,
            "name": "Please Classify This Approach",
            "published": 3,
            "tags": [
                "pleaseclassifythisapproach"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 542
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS .001\n\n#define time ((saw(float(__LINE__))*.001+1.0)*iTime/PI/PI)\n#define saw(x) (acos(cos(x))/PI)\n#define cosaw(x) (asin(cos(x))/PI+.5)\n#define stair floor\n#define jag fract\n\nvec2 SinCos( const in float x )\n{\nreturn vec2(sin(x), cos(x));\n}\nvec2 rotatez( const in vec2 vPos, const in vec2 vSinCos )\n{\n\treturn vPos.xy * mat2(vSinCos.yx, -vSinCos.x, vSinCos.y);\n}\n\nvec2 rotatez( const in vec2 vPos, const in float fAngle )\n{\n\treturn rotatez( vPos, SinCos(fAngle) );\n}\nvec2 tree(vec2 uv)\n{\n    const float max_additional_turns = 5.0;\n    float turns = 2.0+max_additional_turns*saw(PI*PI*time/max_additional_turns);//mod(floor(iTime), max_additional_turns);\n    float theta = atan(uv.y, uv.x);\n\n    float rot = float(int((theta/PI*.5+.5)*turns))/turns;\n\n    vec2 xy = rotatez(uv.xy, PI*2.0*(rot)+1.0*PI/turns);\n    \n    //xy = sign(xy)*log(abs(xy));\n    //return vec2(saw(theta*turns+PI*stair(xy.x*1.0)), 1.0-jag(xy.x*4.0));\n    //return vec2(saw(xy.y*turns+PI*stair(xy.x*1.0)), 1.0-jag(xy.x*4.0));\n    return vec2((xy.y*turns), (xy.x*turns));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float scale = (2.0+sin(time))*PI;\n    uv = uv*scale-scale/2.0;\n    uv += sin(vec2(time, time/PI*E*GR))*scale*.125;\n    uv.x *= iResolution.x/iResolution.y;\n    float r = length(uv);\n    uv = normalize(uv)/log(r);\n    uv += sin(vec2(time, time/PI*E*GR))*scale;\n\n    uv = cosaw(tree(uv))*2.0-1.0;\n    uv = cosaw(tree(uv)); \n\t\n    fragColor = vec4(uv, 0.0, 1.0)*clamp(abs(1.0-r*r), 0.0, 1.0);\n    fragColor = texture(iChannel0, uv)*clamp(abs(1.0-r*r), 0.0, 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}