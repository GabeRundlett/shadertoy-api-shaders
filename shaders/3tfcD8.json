{
    "Shader": {
        "info": {
            "date": "1592098105",
            "description": "I'm compiling different anamorohic post processing effects shaders I found all over shadertoy. With links to the makers.\nCurrent Status: I'm yet to find proper bloom.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tfcD8",
            "likes": 26,
            "name": "anamorphic effects",
            "published": 3,
            "tags": [
                "flare",
                "chromaticabberation",
                "cinematic",
                "anamorphic"
            ],
            "usePreview": 0,
            "username": "TheNosiriN",
            "viewed": 1914
        },
        "renderpass": [
            {
                "code": "float NoiseSeed;\nfloat randomFloat(){\n  NoiseSeed = sin(NoiseSeed) * 84522.13219145687;\n  return fract(NoiseSeed);\n}\n\nfloat SCurve (float value, float amount, float correction) {\n\n\tfloat curve = 1.0; \n\n    if (value < 0.5)\n    {\n\n        curve = pow(value, amount) * pow(2.0, amount) * 0.5; \n    }\n        \n    else\n    { \t\n    \tcurve = 1.0 - pow(1.0 - value, amount) * pow(2.0, amount) * 0.5; \n    }\n\n    return pow(curve, correction);\n}\n\n\n\n\n//ACES tonemapping from: https://www.shadertoy.com/view/wl2SDt\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\n\n\n\n//Chromatic Abberation from: https://www.shadertoy.com/view/XlKczz\nvec3 chromaticAbberation(sampler2D tex, vec2 uv, float amount)\n{\n    float aberrationAmount = amount/10.0;\n   \tvec2 distFromCenter = uv - 0.5;\n\n    // stronger aberration near the edges by raising to power 3\n    vec2 aberrated = aberrationAmount * pow(distFromCenter, vec2(3.0, 3.0));\n    \n    vec3 color = vec3(0.0);\n    \n    for (int i = 1; i <= 8; i++)\n    {\n        float weight = 1.0 / pow(2.0, float(i));\n        color.r += texture(tex, uv - float(i) * aberrated).r * weight;\n        color.b += texture(tex, uv + float(i) * aberrated).b * weight;\n    }\n    \n    color.g = texture(tex, uv).g * 0.9961; // 0.9961 = weight(1)+weight(2)+...+weight(8);\n    \n    return color;\n}\n\n\n\n\n//film grain from: https://www.shadertoy.com/view/wl2SDt\nvec3 filmGrain()\n{\n    return vec3(0.9 + randomFloat()*0.15);\n}\n\n\n\n\n//Sigmoid Contrast from: https://www.shadertoy.com/view/MlXGRf\nvec3 contrast(vec3 color)\n{\n    return vec3(SCurve(color.r, 3.0, 1.0), \n                SCurve(color.g, 4.0, 0.7), \n                SCurve(color.b, 2.6, 0.6)\n               );\n}\n\n\n\n\n//anamorphic-ish flares from: https://www.shadertoy.com/view/MlsfRl\nvec3 flares(sampler2D tex, vec2 uv, float threshold, float intensity, float stretch, float brightness)\n{\n    threshold = 1.0 - threshold;\n    \n    vec3 hdr = texture(tex, uv).rgb;\n    hdr = vec3(floor(threshold+pow(hdr.r, 1.0)));\n    \n    float d = intensity; //200.;\n    float c = intensity*stretch; //100.;\n    \n    \n    //horizontal\n    for (float i=c; i>-1.0; i--)\n    {\n        float texL = texture(tex, uv+vec2(i/d, 0.0)).r;\n        float texR = texture(tex, uv-vec2(i/d, 0.0)).r;\n        hdr += floor(threshold+pow(max(texL,texR), 4.0))*(1.0-i/c);\n    }\n    \n    //vertical\n    for (float i=c/2.0; i>-1.0; i--)\n    {\n        float texU = texture(tex, uv+vec2(0.0, i/d)).r;\n        float texD = texture(tex, uv-vec2(0.0, i/d)).r;\n        hdr += floor(threshold+pow(max(texU,texD), 40.0))*(1.0-i/c) * 0.25;\n    }\n    \n    hdr *= vec3(0.5,0.4,1.0); //tint\n    \n\treturn hdr*brightness;\n}\n\n\n\n\n//glow from: https://www.shadertoy.com/view/XslGDr (unused but useful)\nvec3 samplef(vec2 tc, vec3 color)\n{\n\treturn pow(color, vec3(2.2, 2.2, 2.2));\n}\n\nvec3 highlights(vec3 pixel, float thres)\n{\n\tfloat val = (pixel.x + pixel.y + pixel.z) / 3.0;\n\treturn pixel * smoothstep(thres - 0.1, thres + 0.1, val);\n}\n\nvec3 hsample(vec3 color, vec2 tc)\n{\n\treturn highlights(samplef(tc, color), 0.6);\n}\n\nvec3 blur(vec3 col, vec2 tc, float offs)\n{\n\tvec4 xoffs = offs * vec4(-2.0, -1.0, 1.0, 2.0) / iResolution.x;\n\tvec4 yoffs = offs * vec4(-2.0, -1.0, 1.0, 2.0) / iResolution.y;\n\t\n\tvec3 color = vec3(0.0, 0.0, 0.0);\n\tcolor += hsample(col, tc + vec2(xoffs.x, yoffs.x)) * 0.00366;\n\tcolor += hsample(col, tc + vec2(xoffs.y, yoffs.x)) * 0.01465;\n\tcolor += hsample(col, tc + vec2(    0.0, yoffs.x)) * 0.02564;\n\tcolor += hsample(col, tc + vec2(xoffs.z, yoffs.x)) * 0.01465;\n\tcolor += hsample(col, tc + vec2(xoffs.w, yoffs.x)) * 0.00366;\n\t\n\tcolor += hsample(col, tc + vec2(xoffs.x, yoffs.y)) * 0.01465;\n\tcolor += hsample(col, tc + vec2(xoffs.y, yoffs.y)) * 0.05861;\n\tcolor += hsample(col, tc + vec2(    0.0, yoffs.y)) * 0.09524;\n\tcolor += hsample(col, tc + vec2(xoffs.z, yoffs.y)) * 0.05861;\n\tcolor += hsample(col, tc + vec2(xoffs.w, yoffs.y)) * 0.01465;\n\t\n\tcolor += hsample(col, tc + vec2(xoffs.x, 0.0)) * 0.02564;\n\tcolor += hsample(col, tc + vec2(xoffs.y, 0.0)) * 0.09524;\n\tcolor += hsample(col, tc + vec2(    0.0, 0.0)) * 0.15018;\n\tcolor += hsample(col, tc + vec2(xoffs.z, 0.0)) * 0.09524;\n\tcolor += hsample(col, tc + vec2(xoffs.w, 0.0)) * 0.02564;\n\t\n\tcolor += hsample(col, tc + vec2(xoffs.x, yoffs.z)) * 0.01465;\n\tcolor += hsample(col, tc + vec2(xoffs.y, yoffs.z)) * 0.05861;\n\tcolor += hsample(col, tc + vec2(    0.0, yoffs.z)) * 0.09524;\n\tcolor += hsample(col, tc + vec2(xoffs.z, yoffs.z)) * 0.05861;\n\tcolor += hsample(col, tc + vec2(xoffs.w, yoffs.z)) * 0.01465;\n\t\n\tcolor += hsample(col, tc + vec2(xoffs.x, yoffs.w)) * 0.00366;\n\tcolor += hsample(col, tc + vec2(xoffs.y, yoffs.w)) * 0.01465;\n\tcolor += hsample(col, tc + vec2(    0.0, yoffs.w)) * 0.02564;\n\tcolor += hsample(col, tc + vec2(xoffs.z, yoffs.w)) * 0.01465;\n\tcolor += hsample(col, tc + vec2(xoffs.w, yoffs.w)) * 0.00366;\n\n\treturn color;\n}\n\nvec3 glow(vec3 col, vec2 uv)\n{\n    vec3 color = blur(col, uv, 2.0);\n\tcolor += blur(col, uv, 3.0);\n\tcolor += blur(col, uv, 5.0);\n\tcolor += blur(col, uv, 7.0);\n\tcolor /= 4.0;\n\t\n\tcolor += samplef(uv, col);\n    \n    return color;\n}\n\n\n\n\n//margins from: https://www.shadertoy.com/view/wl2SDt\nvec3 margins(vec3 color, vec2 uv, float marginSize)\n{\n    if(uv.y < marginSize || uv.y > 1.0-marginSize)\n    {\n        return vec3(0.0);\n    }else{\n        return color;\n    }\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec3 color = texture(iChannel0, uv).xyz;\n    \n    \n    //chromatic abberation\n    color = chromaticAbberation(iChannel0, uv, 0.8);\n    \n    \n    //film grain\n    color *= filmGrain();\n    \n    \n    //ACES Tonemapping\n  \tcolor = ACESFilm(color);\n    \n    \n    //contrast\n    color = contrast(color) * 0.9;\n    \n    \n    //flare\n    color += flares(iChannel0, uv, 0.9, 200.0, 0.5, 0.06);\n    \n    \n    //margins\n    color = margins(color, uv, 0.1);\n    \n    \n    //output\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}