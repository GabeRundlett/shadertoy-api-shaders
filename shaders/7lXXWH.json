{
    "Shader": {
        "info": {
            "date": "1625741193",
            "description": "Testing volume raycasting",
            "flags": 0,
            "hasliked": 0,
            "id": "7lXXWH",
            "likes": 1,
            "name": "VolumeRayCastTest",
            "published": 3,
            "tags": [
                "volume",
                "raycast"
            ],
            "usePreview": 0,
            "username": "alfy",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "\n\nvec3 camera_rd(vec3 camera_p, vec3 camera_t, float camera_fov_h, vec2 uv, vec2 resolution_uv) {\n    vec3 t_p = camera_t - camera_p;\n    float length_t_p = length(t_p);\n    \n    t_p = normalize(t_p);\n    vec3 x_axis = normalize(cross(t_p, vec3(0.,-1.,0.)));\n    vec3 y_axis = normalize(cross(t_p, x_axis));\n    \n    \n    float length_x_axis = tan(camera_fov_h/2.0) * length_t_p;\n    float length_y_axis = resolution_uv.y/resolution_uv.x * length_x_axis;\n    \n    vec3 rayTarget = camera_t + x_axis * (uv.x / resolution_uv.x * length_x_axis) + y_axis * (uv.y / resolution_uv.y * length_y_axis);\n    \n    \n    return normalize(rayTarget - camera_p);\n}\n\n\n\nbool iAABB(in vec3 ro, in vec3 rd, in vec3 minBound, in vec3 maxBound)\n{\n    float tmin = (minBound.x - ro.x) / rd.x; \n    float tmax = (maxBound.x - ro.x) / rd.x; \n \n    if (tmin > tmax) {\n        //swap\n        float t = tmin;\n        tmin = tmax;\n        tmax = t;\n    } \n \n    float tymin = (minBound.y - ro.y) / rd.y; \n    float tymax = (maxBound.y - ro.y) / rd.y; \n \n    if (tymin > tymax) {\n        //swap\n        float ty = tymin;\n        tymin = tymax;\n        tymax = ty;\n    }\n \n    if ((tmin > tymax) || (tymin > tmax)) \n        return false; \n \n    if (tymin > tmin) \n        tmin = tymin; \n \n    if (tymax < tmax) \n        tmax = tymax; \n \n    float tzmin = (minBound.z - ro.z) / rd.z; \n    float tzmax = (maxBound.z - ro.z) / rd.z; \n \n    if (tzmin > tzmax) {\n        //swap\n        float tz = tzmin;\n        tzmin = tzmax;\n        tzmax = tz;\n    }\n \n    if ((tmin > tzmax) || (tzmin > tmax)) \n        return false; \n \n    if (tzmin > tmin) \n        tmin = tzmin; \n \n    if (tzmax < tmax) \n        tmax = tzmax; \n \n    return true; \n}\n\nbool iBox( in vec3 ro, in vec3 rd, in vec3 rad, out float tNear, out float tFar ) \n{\n    // convert from ray to box space\n\t//vec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\t//vec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return false;\n\n\t//vec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    // convert to ray space\n\t\n\t//nor = (txi * vec4(nor,0.0)).xyz;\n    \n    tNear = tN;\n    tFar = tF;\n\n\treturn true;\n}\n\n\nfloat noiseNew( in vec3 x )\n{\n    return texture( iChannel0, x/32.0 ).x;    // <---------- Sample a 3D texture!\n}\n\n\nvec3 average(vec3 nearPoint, vec3 farPoint, float steps) {\n    vec3 col = vec3(0.);\n    \n    vec3 d = farPoint - nearPoint;\n    float t = 0.;\n    for (float i=0.0; i < steps; i++) {\n        vec3 p = nearPoint + (i/steps) * d;\n        float density = noiseNew(p*10.);\n        //if (density > 0.5) {\n        //    t+=1.;\n        //}\n        t += density * (1.-length(p)*1.);\n    }\n    \n    return vec3(t/steps*2.);\n}\n\n\n\nvec3 volRayCast(vec3 ro, vec3 rd)\n{\n    float tN,tF;\n    bool inter = iBox(ro, rd, vec3(1.), tN, tF);\n    \n    if (inter){\n        vec3 nearPoint = ro + tN*rd;\n        vec3 farPoint = ro + tF*rd;\n        //float d = distance(nearPoint, farPoint);\n        //return vec3(d/6.);\n        return average(nearPoint, farPoint, 100.);\n    }\n    \n    return vec3(0.);\n\n}\n\n\nbool iCloud(in vec3 ro, in vec3 rd, out float nearInt)\n{\n    float epsilon = 0.01;\n    nearInt = 100000.; //Big Number\n    float tN,tF;\n    bool inter = iBox(ro, rd, vec3(1.), tN, tF);\n    \n    for (float t = tN; t < tF; t += epsilon) {\n        vec3 p = ro + t * rd;\n        float density = noiseNew(p*2.);\n        if (density > 0.8) {\n            nearInt = t;\n            return true;\n        }\n    }\n    return false;\n}\n\n\nvec3 pointNormal(vec3 p, vec3 rd)\n{\n    float epsilone = 0.001;\n    \n    float tX;\n    vec3 roX = p + vec3(epsilone, 0., 0.);\n    iCloud(roX, rd, tX);\n    vec3 pX = roX + rd * tX;\n    \n    float tY;\n    vec3 roY = p + vec3(0., epsilone, 0.);\n    iCloud(roY, rd, tY);\n    vec3 pY = roY + rd * tY;\n    \n    float tZ;\n    vec3 roZ = p + vec3(0., 0., epsilone);\n    iCloud(roZ, rd, tZ);\n    vec3 pZ = roZ + rd * tZ;\n    \n    vec3 x = normalize(pX - p);\n    vec3 y = normalize(pY - p);\n    vec3 z = normalize(pZ - p);\n    \n    return cross(x, y);\n\n}\n\nvec3 getShading(vec3 p, vec3 n) {\n    vec3 light1_p = vec3(10.,10.,10.);\n    \n    vec3 col;\n    \n    col += clamp(0.,1.,dot(n, normalize(light1_p-p)));\n    \n    return col;\n}\n\n\nvec3 rayTrace(vec3 ro, vec3 rd)\n{\n    vec3 light1_p = vec3(10.,10.,10.);\n    \n    float t = 0.;\n    bool i = iCloud(ro, rd, t);\n    if (i) {\n        vec3 p = ro + rd * t;\n        vec3 n = pointNormal(p, rd);\n        return getShading(p, n);\n    }\n    return vec3(0.);\n}\n\n\nvec3 rotateY(float a, float r, float h)\n{\n    return vec3(\n        sin(a) * r,\n        h,\n        cos(a) * r\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //move origin to center, iResolution.y range -1.0 to 1.0\n    vec2 uv = (fragCoord-(iResolution.xy*0.5))/iResolution.y;\n    vec2 resolution_uv = iResolution.xy/iResolution.y*0.5;\n    vec2 mouse_uv = (iMouse.xy-(iResolution.xy*0.5))/iResolution.y;\n    \n    vec3 camera_p = rotateY(iTime*0.5, 5., 2.5);//vec3(10.,10.,10.);\n    vec3 camera_t = vec3(0.,0.,0.);\n    float camera_fov_h = 0.785; //45degrees\n    \n    vec3 rd = camera_rd(camera_p, camera_t, camera_fov_h, uv, resolution_uv);\n    \n    //vec3 col = volRayCast(camera_p, rd);\n    vec3 col = rayTrace(camera_p, rd);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}