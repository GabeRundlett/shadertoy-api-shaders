{
    "Shader": {
        "info": {
            "date": "1705781743",
            "description": "Warp in space time",
            "flags": 1,
            "hasliked": 0,
            "id": "4ffXDf",
            "likes": 6,
            "name": "Galaxy Sphere Warp ",
            "published": 3,
            "tags": [
                "galaxy"
            ],
            "usePreview": 0,
            "username": "EthanZappa",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "/*originals https://www.shadertoy.com/view/dlyfWc https://www.shadertoy.com/view/XlfGRj https://www.shadertoy.com/view/MdXSzS*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nfloat random2D(vec2 v, float seed)\n{\n    return fract(sin(dot(v , vec2(7.5912,3.89273)))*4293.12978 * seed);\n}\n\n\n\nfloat PerlinNoise(vec2 v, vec2 movDir, float speed2, float seed)\n{\n    v += movDir * iTime*speed2;\n    vec2 v_Floor = floor(v);\n    vec2 v_1_0 = v_Floor + vec2(1.0,0.0);\n    vec2 v_0_1 = v_Floor + vec2(0.0,1.0);\n    vec2 v_1_1 = v_Floor + vec2(1.0,1.0);\n   \n    vec2 lerp = fract(v);\n   \n    float positiveCos = (cos(iTime)+ 1.0) * 10.0 ;\n    vec2 smoothLerp =  lerp * lerp * (3.0 - 2.0 * lerp);\n   \n    float noise_Floor = random2D(v_Floor , seed);\n    float noise_1_0 = random2D(v_1_0 , seed);\n    float noise_0_1 = random2D(v_0_1 , seed);\n    float noise_1_1 = random2D(v_1_1 , seed);\n   \n    float noise_Final_0 = mix(noise_Floor, noise_1_0, smoothLerp.x);\n    float noise_Final_1 = mix(noise_0_1, noise_1_1, smoothLerp.x );\n   \n    return mix(noise_Final_0, noise_Final_1, smoothLerp.y );\n   \n}\n\n\nfloat NoiseDensity(vec2 v, vec2 movDir, float speed2, float seed, float amplitudeChange,\nint octaves,  float clarity,float ratioOfDensity, float amountOfDensity)\n{\n    float density = 0.0;\n    float amplitude = 1.0;\n   \n    for(int i = 0; i < octaves; i++)\n    {\n       density+= PerlinNoise(v * pow(clarity, float(i)),movDir, speed2, seed) * amplitude;\n       amplitude *=  amplitudeChange;\n    }\n   \n    return ratioOfDensity * (density + amountOfDensity);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.05),sin(iTime*0.05),-sin(iTime*0.05),cos(iTime*0.05));// the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\nfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\na*=a*a; // add contrast\nif (r>6) fade*=1.2-dm; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v*.02,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\nuv.y*=iResolution.y/iResolution.x;\n    float t = iTime * 1.1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .27)) * 2.2;\nfloat si = tan(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n    uv*=ma;\nvec3 dir=vec3(uv*zoom,1.);\nfloat time=iTime*speed+.25;\nvec2 originalUv = uv;\n    vec2 uv_1 = uv *  2.0;\n    vec2 uv_2 = uv * 10.0;\n   \n    vec2 uv_3 = uv * 4.0;\n\n    float clouds_1 = NoiseDensity(uv_1, vec2(1.0,1.0),0.1,  7.3223213, -0.8, 8, 2.0,\n    2.3, -0.6);\n    float clouds_2 = NoiseDensity(uv_2,  vec2(10.0,1.0),0.2, 91.3223213, -0.8, 8, 2.0,\n    3.3, -0.3);\n   \n    float clouds_3 = NoiseDensity(uv_3,  vec2(1.0,1.0),0.3, 72.3223213, -0.8, 8, 2.0,\n    1.0, -0.5);\n   \n    float clouds_1_2 = clouds_1 *clouds_2;\n    vec3 skyCol = mix(vec3(1.0,0.75,1.0), vec3(1.0,1.55,1.0), originalUv.y) ;\n    vec3 col;\n    vec3 cloudCol_1 = vec3(1.0,1.05,0.1);\n   \n    vec3 cloudCol_3 = vec3(1.0, 0.0,2.0);\n    col = mix( skyCol, cloudCol_1, clouds_1_2);\n    col = mix(col, cloudCol_3,clouds_3);\n//mouse rotation\nfloat a1=.5+iMouse.x/iResolution.x*2.;\nfloat a2=.8+iMouse.y/iResolution.y*2.;\nmat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\nmat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n\nvec3 from=vec3(1.,.5,0.5);\nfrom+=vec3(time*2.,time,-2.);\nfrom.xz*=rot1;\nfrom.xy*=rot2;\n\nmainVR(fragColor, fragCoord, from, dir);\n    fragColor*=vec4(col,1.);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}