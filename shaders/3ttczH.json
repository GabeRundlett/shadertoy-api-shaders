{
    "Shader": {
        "info": {
            "date": "1608493029",
            "description": "It randomly places the alphabet received from the keyboard.",
            "flags": 48,
            "hasliked": 0,
            "id": "3ttczH",
            "likes": 0,
            "name": "Random Letters",
            "published": 3,
            "tags": [
                "keyboard",
                "letter"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The MIT License\n// Copyright Â© 2020 IWBTShyGuy\n\nconst vec2 LETTER_SIZE = vec2(0.05);\n\nbool isKeyPressed(int ascii) {\n    return texelFetch(iChannel2, ivec2(ascii, 1), 0).x > 0.0;\n}\n\nfloat prerandom(in vec2 c) {\n    vec2 gen = vec2(114.514, 191.9810);\n    return fract(gen.x * sin(gen.y * c.x + c.y));\n}\n\nfloat random(in vec2 c) {\n    return prerandom(vec2(\n        prerandom(c),\n        prerandom(c.yx)\n    ));\n}\n\nstruct Character {\n    int code;\n    vec2 origin;\n    vec2 size;\n    vec4 color;\n};\n\nCharacter newChar(in int code, in vec2 origin, in vec2 size, in vec4 color) {\n    Character c;\n    c.code = code;\n    c.origin = origin;\n    c.size = size;\n    c.color = color;\n    return c;\n}\n\nbool drawLetter(out vec4 fragColor, in vec2 uv, in Character c) {\n    vec2 st = (uv - c.origin) / c.size;\n    if (st.x < 0.0 || 1.0 < st.x || st.y < 0.0 || 1.0 < st.y) return false;\n    \n    int a = c.code / 16 + 1;\n    int b = c.code % 16;\n    vec2 base = vec2(float(b), 16.0 - float(a)) / 16.0;\n\n    vec4 color = texture(iChannel0, st / 16.0 + base);\n    if (color.x < 0.5) return false;\n    \n    fragColor = c.color;\n    return true;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float asp = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.y;\n    if (iFrame == 0) fragColor = vec4(vec3(0.0), 1.0);\n    else fragColor = texture(iChannel1, uv / vec2(asp, 1.0));\n    for (int key = 65; key < 65 + 26; key++) {\n        if (isKeyPressed(key)) {\n            float t = iTime + float(key) * sqrt(2.0);\n            vec2 o = vec2(t , t + 1.0);\n            o = vec2(\n                (asp - LETTER_SIZE.x) * random(o),\n                (1.0 - LETTER_SIZE.y) * random(o.yx)\n            );\n            vec3 color = vec3(iTime) + vec3(0.2, 0.3, 0.4);\n            color = 0.5 + 0.5 * vec3(random(color.yz), random(color.zx), random(color.xy));\n            Character c = newChar(key, o, LETTER_SIZE, vec4(color, 1.0));\n            vec4 col;\n            if(drawLetter(col, uv, c)) fragColor = col;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}