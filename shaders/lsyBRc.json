{
    "Shader": {
        "info": {
            "date": "1529841056",
            "description": "Enya! \nPVRTC II is also block compression\nhum...PVRTC II is  \"PowerVR Imagination\" second version of texture compression.And it's also a trade secret just like ATC.\nThe company hasn't made it public,and no public source code how to decode it.",
            "flags": 96,
            "hasliked": 0,
            "id": "lsyBRc",
            "likes": 8,
            "name": "Enya! (PVRTCII 2bpp)",
            "published": 3,
            "tags": [
                "compression",
                "image",
                "decode",
                "pvrtcii"
            ],
            "usePreview": 0,
            "username": "834144373",
            "viewed": 968
        },
        "renderpass": [
            {
                "code": "/********************************************\n    Enya! (PVRTCII 2bpp).glsl webgl2.0 Created by 834144373\n    2018.6.24\n\tPS：834144373 is TNWX or 恬纳微晰 or 祝元洪\n*********************************************/\n/*\n\tThis \"Enya\" Texture Compression technology is used by PVRTCII\n\tAnd it's 2bpp now with higher PSNR!\n\t1. BufA,BufB is fast store full 16bit float into 32bit float buffer,\n\t(note: here use 16bit per component,because PVRTCII is not custom design)\n\t2. BufC is PVRTCII 2bpp Decoder,\n\t3. Image is show result.\n\nNOTE: PVRTCII is \"PowerVR Imagination\" second version of texture compression.\n\t  And it's also a trade secret just like ATC.The company hasn't made it public,\n\t  and no public source code how to decode it.\n\nIf you want to know more about GPU Texture Compression,\n\t\tthe below Texture Compression Can help you.:)\n------------------------------------------------------------------------\n------------------>All About Image Decompresion<------------------ \n\t\t\thttps://www.shadertoy.com/playlist/7scBzN\n------------------------------------------------------------------------\nPVRTCII        2bpp : https://www.shadertoy.com/view/lsyBRc by 834144373\nETC2 and ETC1  4bpp : https://www.shadertoy.com/view/4sKBD1 by 834144373 (higher PSNR)\nS3TC(custom)   4bpp : https://www.shadertoy.com/view/XsycRW by 834144373\nATC            4bpp : https://www.shadertoy.com/view/lt2fRz by 834144373\nDXT1           4bpp : https://www.shadertoy.com/view/MtBfRR by 834144373\nBC4            4bpp : https://www.shadertoy.com/view/Xlffz2 by 834144373\nShaderToyTC I  1bpp : https://www.shadertoy.com/view/MtyGzV by 834144373\nPVRTC          4bpp : https://www.shadertoy.com/view/ltV3zD by 834144373\nYUV Special    2bpp : https://www.shadertoy.com/view/XlGGzh by 834144373\n...more Confidentiality Texture Compression will be coming soon and GIF!!!\n------------------------------------------------------------------------\n\nNode : Yes! You didn't read the wrong words!\n       more Confidentiality Texture Compression will be coming soon!!!\n\t   Crack Crack and Crack!!!\n\n----->hum...but it seems that I have no more sparetime to...:( \n*/\n\nvoid mainImage( out vec4 c, in vec2 u )\n{\n \n    c -= c ;\n    vec3 R = iResolution;\n    u = vec2(u.x,R.y-u.y);\n\tu -= R.xy*vec2(0.34,0.07);\n    u /= R.y*R.xy/256.;\n    if(u.x>0.&& u.y>0.){\n\t\tc = texture(iChannel0,u);\n    }\n    else \n        c = vec4(0.4);\n}\n/*\n\t------------------Shader Story------------------\n\t\n\t\n\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 14996,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/teresa_tsz/may-it-be-enya"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "highp ivec2 SV_DispatchThreadID = ivec2(0,0);\nhighp int Double_pixelID = 0;\nhighp vec4 col = vec4(0.,0.,0.,0.);\nint i = 0;\n//pass !\nvoid A(uvec4 data){\n    \n    if(Double_pixelID == i++){\n        if((SV_DispatchThreadID.x & 0x1) == 0){\n        \tcol.xy = unpackSnorm2x16(data.s);\n    \t\tcol.zw = unpackSnorm2x16(data.t);\n        }\n        else{\n        \tcol.xy = unpackSnorm2x16(data.p);\n    \t\tcol.zw = unpackSnorm2x16(data.q);\n        }\n    }\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    SV_DispatchThreadID = ivec2(floor(U-0.5));\n    if(SV_DispatchThreadID.x >= 18 || SV_DispatchThreadID.y >= 56){\n    \tC = vec4(1./3.,0.,0.,0.);\n        return;\n    }\n    if(iFrame > 2){\n    \tC = texture(iChannel0,U/iResolution.xy);\n        discard;\n    }\n    //1个像素存一个数据块\n    //9 x 56, 9为其中2个像素存2个块数据\n    //像素ID编号\n    Double_pixelID = (SV_DispatchThreadID.x>>1) + (SV_DispatchThreadID.y*9); \n    //-------------------------------------------\n    A(uvec4(0xFEEEFF55u,0xE64C49A7u,0xFFEFFF05u,0xE22C2D07u));\n\tA(uvec4(0xFFEFFF01u,0xE20C41A7u,0xFFEFFF41u,0xE24C2D07u));\n\tA(uvec4(0xFFEFFF45u,0xE24C2D07u,0xFFAFFF51u,0xE24C418Bu));\n\tA(uvec4(0x20B2F7Bu,0xFF131441u,0x0u,0xF71C1042u));\n\tA(uvec4(0x1u,0xFFDD1443u,0xF4E0FE55u,0x90628821u));\n\tA(uvec4(0x40505FFu,0x904218A5u,0xF4E4FD05u,0xCDCC20A3u));\n\tA(uvec4(0xFFEEFF01u,0xE24C294Bu,0xDF6FFF01u,0xE20CC16Du));\n\tA(uvec4(0xFFFFFF00u,0x7C966766u,0xAFAFFF01u,0xEE6D55EDu));\n\tA(uvec4(0x105FF01u,0xF6F1664Du,0x9060FF01u,0xEA4C6A4Du));\n\tA(uvec4(0x4000FDFAu,0xE28F628Fu,0xB9A9FFFFu,0xE26E728Fu));\n\tA(uvec4(0x464AFFFFu,0xE24E664Fu,0xA9FEFFFEu,0xE68F6EAFu));\n\tA(uvec4(0xFFAFDDEFu,0xE64E7B33u,0xB6F7FFEu,0xE68F1CA3u));\n\tA(uvec4(0xF0300001u,0x94411042u,0xB6640001u,0x94421041u));\n\tA(uvec4(0x810001u,0x94631463u,0x54A5A4A4u,0x904224E9u));\n\tA(uvec4(0x65A0100u,0x94621885u,0x501090D0u,0xA5461C85u));\n\tA(uvec4(0x52465AAFu,0xE6733147u,0xF2C6EEFBu,0xD20D418Bu));\n\tA(uvec4(0x3FCFF0FFu,0xDE2E55ECu,0xF0BAF7Fu,0xEE8F6E8Fu));\n\tA(uvec4(0xA0819904u,0xEA8F6A8Fu,0x16191FB8u,0xEA8E6E4Du));\n\tA(uvec4(0xA8A4A550u,0xEAD0626Fu,0xABAB6AAEu,0xEAB166AFu));\n\tA(uvec4(0xFDAE6655u,0xE69066B1u,0xFFEEFEFBu,0xEAB06ED1u));\n\tA(uvec4(0x7FFFFFFEu,0xE6B01861u,0x10107u,0xD6701463u));\n\tA(uvec4(0x1060A4A0u,0x94631021u,0xBCAD2E7Eu,0x8C200C23u));\n\tA(uvec4(0x59010000u,0x98841043u,0xFE6C6A67u,0x98841065u));\n\tA(uvec4(0x79298761u,0x98840C21u,0xE9D5243u,0x94421043u));\n\tA(uvec4(0x2880E1A7u,0xB14724C5u,0xB5FA9F4u,0xCDED3147u));\n\tA(uvec4(0x6F6AA9AAu,0xEAB24DEBu,0xFA22A5ADu,0xEAB06AB1u));\n\tA(uvec4(0xFFECFDE3u,0xEEB06E8Fu,0x70B061Bu,0xEED16E8Fu));\n\tA(uvec4(0xA8A4A9A4u,0xEEF26691u,0x6A5A4658u,0xEEF36AD3u));\n\tA(uvec4(0xF5E8E5F8u,0xEAD26AD1u,0xFFFFFFFEu,0xEAD228E5u));\n\tA(uvec4(0x31F1F7Eu,0xEAD31021u,0x90904000u,0x90200823u));\n\tA(uvec4(0x5AAEA851u,0x90420C21u,0x1059A74u,0x90630C21u));\n\tA(uvec4(0x5569BEAEu,0x94850C43u,0xF58555EBu,0x94840C63u));\n\tA(uvec4(0x2F1ACADAu,0x98841063u,0x60A10C2Du,0x94631043u));\n\tA(uvec4(0x786C40C1u,0x98621463u,0xEB6A1505u,0xA4C51841u));\n\tA(uvec4(0xA45F5B5u,0xAD261C83u,0xE9AAEAE8u,0xEED2314Bu));\n\tA(uvec4(0x5FAFFFEEu,0xEEF26ED3u,0x65AA161Bu,0xEED06ED1u));\n\tA(uvec4(0xF8F4F8F8u,0xEEF366D1u,0x9A6B1BAEu,0xEF156F13u));\n\tA(uvec4(0xFAF9F8D1u,0xEEF46F15u,0x2FEFFFFFu,0xF2F41041u));\n\tA(uvec4(0x100003u,0xA9250823u,0xA4B0D081u,0x8C420C21u));\n\tA(uvec4(0xE1965654u,0x8C220821u,0xB0E5801u,0x8C420823u));\n\tA(uvec4(0xF8909040u,0x90840C43u,0x661B6EBAu,0x94850C43u));\n\tA(uvec4(0xBA804043u,0x98841063u,0x479A5A00u,0x98841063u));\n\tA(uvec4(0x9594A6A2u,0x98820C21u,0x3475499u,0x9C821483u));\n\tA(uvec4(0x5151216u,0x9CA41063u,0xC0C0A0A5u,0xDE702D27u));\n\tA(uvec4(0xFEEEFFFFu,0xF3147FD5u,0xAFBF6BA7u,0xF2F272B1u));\n\tA(uvec4(0xE490E4E4u,0xF3146AD3u,0xFBAB9B5Bu,0xEF157315u));\n\tA(uvec4(0xFFEAFBEAu,0xF33566D3u,0x31B0B2Fu,0xE2B10821u));\n\tA(uvec4(0xC0000000u,0x90820C23u,0x58606490u,0x90220421u));\n\tA(uvec4(0x8589EAE7u,0x8C420821u,0x5B299A5Au,0x8C420841u));\n\tA(uvec4(0x545A6FBEu,0x94848843u,0xA890A6AEu,0x94840C43u));\n\tA(uvec4(0xD68B969Bu,0x98851063u,0x5D5E1614u,0x9CC51043u));\n\tA(uvec4(0x90800410u,0x94641063u,0xFC1C0E07u,0x98831862u));\n\tA(uvec4(0xD5E43430u,0x94831063u,0x1114001u,0xD20D1065u));\n\tA(uvec4(0xFDFDFFFBu,0xEF1428C3u,0xAFAFAFAEu,0xF3146EF1u));\n\tA(uvec4(0xE9F4F8E5u,0xEEF366B3u,0xFBDBFACBu,0xF3366F35u));\n\tA(uvec4(0xFFFFFFFFu,0xF3368000u,0x1130207u,0xD6718821u));\n\tA(uvec4(0xB1D0A0C0u,0x90630821u,0xFAE6DA94u,0x88210421u));\n\tA(uvec4(0x28BF2F53u,0x84200823u,0xD4101458u,0x8C430401u));\n\tA(uvec4(0x46064155u,0x90830843u,0x47ADF8E5u,0x94850C63u));\n\tA(uvec4(0x74A0418Au,0x98A41065u,0x277B7D35u,0x90631043u));\n\tA(uvec4(0x90906091u,0x94830C43u,0x2835DDE8u,0x94840C43u));\n\tA(uvec4(0xBABA1B5Bu,0x9CC51463u,0x8681B07u,0xA0C51463u));\n\tA(uvec4(0xE0E0F4F4u,0xF7562D29u,0xEFFFBFAFu,0xF3147313u));\n\tA(uvec4(0x5EB9A9A4u,0xEF146AF3u,0xFEFDFDEFu,0xF3577B37u));\n\tA(uvec4(0x2F7F7FFFu,0xF3560001u,0x1u,0xB5690822u));\n\tA(uvec4(0x64505552u,0x8C420421u,0x604056ECu,0x88220401u));\n\tA(uvec4(0x6A65621Au,0x88420421u,0x1E292CE1u,0x8C420843u));\n\tA(uvec4(0xB12030C3u,0x8C640C43u,0xE1424106u,0x98A50C65u));\n\tA(uvec4(0xE66AAEB9u,0x98A51063u,0x165A52A7u,0x98A40C43u));\n\tA(uvec4(0x65B5B871u,0x90630C41u,0x5C5A5554u,0x94830C23u));\n\tA(uvec4(0x34716CFDu,0x98841083u,0x69312031u,0xB56924C7u));\n\tA(uvec4(0x8111C0C1u,0xF79628E7u,0xFFFFFFFFu,0xF3146AD0u));\n\tA(uvec4(0xA7AF67AEu,0xEAD37FB9u,0xF9E6FAEAu,0xF7786F15u));\n\tA(uvec4(0xB1F0F3Eu,0xEF360401u,0xB0E00000u,0x84210821u));\n\tA(uvec4(0xE99D26A4u,0x8C420401u,0xE966EA98u,0x88420421u));\n\tA(uvec4(0x36AE5F7Fu,0x88210823u,0x9400115Bu,0x8C420421u));\n\tA(uvec4(0x35DDFCF0u,0x8C630C43u,0x2EA970D2u,0x94A51065u));\n\tA(uvec4(0x3B98659Bu,0x98841063u,0x1914094Cu,0x94830C43u));\n\tA(uvec4(0x15102460u,0x94840C43u,0x45148865u,0x94840C43u));\n\tA(uvec4(0x3EBA66A0u,0x94A50C43u,0x66B5B87Cu,0xA0C51063u));\n\tA(uvec4(0x1E2A0A06u,0xEAF31C83u,0xFFFDFFFFu,0xF7561C83u));\n\tA(uvec4(0xFEF2BEAEu,0xF3367F99u,0xFFA7F6E3u,0xF356EF57u));\n\tA(uvec4(0x107060Au,0xF3570843u,0x50605060u,0x8C420401u));\n\tA(uvec4(0xA9F5F7EDu,0x84210421u,0x78A6A7AAu,0x88210421u));\n\tA(uvec4(0x6A665668u,0x88410001u,0x64965594u,0x8C630821u));\n\tA(uvec4(0xC5568624u,0x94830843u,0x1B6D1F1Eu,0x90840C63u));\n\tA(uvec4(0x2519075Eu,0x98A41063u,0x6A39EAA5u,0x90631043u));\n\tA(uvec4(0x5F775A13u,0x90631063u,0x12220414u,0x90630C43u));\n\tA(uvec4(0xFDEDBFFBu,0x98A51063u,0x12329C7Cu,0x94630C43u));\n\tA(uvec4(0x21732D28u,0xD66F28E5u,0xFDFCFDFDu,0xF7553969u));\n\tA(uvec4(0xF6E5FAF2u,0xF3367357u,0xBFFFFFFFu,0xF3570001u));\n\tA(uvec4(0x110003u,0xCE2F0421u,0xA0A01000u,0x88200823u));\n\tA(uvec4(0x79C8E669u,0x88420401u,0xBDEAE65Bu,0x84210401u));\n\tA(uvec4(0x55164118u,0x8C420421u,0x420E0E54u,0x90840C43u));\n\tA(uvec4(0x5992D284u,0x90630C43u,0x4B5D1D2Au,0x90840821u));\n\tA(uvec4(0x40151515u,0x94841063u,0x165D22F1u,0x94630C43u));\n\tA(uvec4(0x44582228u,0x90620C43u,0xA0708845u,0x90840C63u));\n\tA(uvec4(0x1363F4F4u,0x98C51485u,0x50201C1Du,0x90630C43u));\n\tA(uvec4(0x100448u,0xEF1520E7u,0xFEFCFDFDu,0xF735626Du));\n\tA(uvec4(0xF6F1F1F0u,0xF3367337u,0x3FBF3FFFu,0xF3570443u));\n\tA(uvec4(0x90500000u,0x84230801u,0xAEAD34D0u,0x88210421u));\n\tA(uvec4(0x39EBDF6Eu,0x84010001u,0xB990B1CAu,0x90410C41u));\n\tA(uvec4(0xD49A9A24u,0x8C630401u,0xB1B0706u,0x98851463u));\n\tA(uvec4(0xC1458514u,0x94A50821u,0xA1A090Bu,0xA0A40C43u));\n\tA(uvec4(0x14104000u,0x98A31063u,0x4619060Du,0x94840C43u));\n\tA(uvec4(0x40501011u,0x90830C43u,0x4B5AD290u,0x94840C43u));\n\tA(uvec4(0x5B1FDB8Au,0x94850C43u,0x7030804u,0x94849085u));\n\tA(uvec4(0x8100u,0xEF141885u,0xFDFEFEFDu,0xF3346AAFu));\n\tA(uvec4(0xFBDBFACAu,0xF7577355u,0x1F3F2F3Fu,0xEB360001u));\n\tA(uvec4(0xA090A0A0u,0x88210821u,0xA5556996u,0x88210401u));\n\tA(uvec4(0xA695D658u,0x8C400003u,0x2F7F3EFEu,0x90620821u));\n\tA(uvec4(0x4924C9A4u,0x98820823u,0x178A430Bu,0xA0C520A5u));\n\tA(uvec4(0xD080C180u,0xA0A40843u,0xF1E0E1Bu,0xA4C41043u));\n\tA(uvec4(0x3D652824u,0x9C841063u,0xCD998E4Cu,0x94A40C43u));\n\tA(uvec4(0x71F0F03u,0x8C420C42u,0x6AAF2F2Cu,0x90840843u));\n\tA(uvec4(0xD8E86A5Cu,0x94A50821u,0x2071B8ADu,0x98A50C65u));\n\tA(uvec4(0x10100500u,0xB16A98A5u,0xFDFCFFFDu,0xEEF31C83u));\n\tA(uvec4(0xFBDBFBCAu,0xF7567337u,0xF2F1F2Eu,0xEB3714A5u));\n\tA(uvec4(0x905074B0u,0x90830401u,0x15265568u,0x84210401u));\n\tA(uvec4(0xC924B8E0u,0x90620821u,0xF3F0F3Fu,0x90410C21u));\n\tA(uvec4(0xC6198919u,0xB1041043u,0x3D776B2Bu,0xA8C528C3u));\n\tA(uvec4(0xF0D0E1C0u,0xA8E50823u,0xCB1F8F0Fu,0xA8C51485u));\n\tA(uvec4(0xE9FBBEFBu,0x9CC41041u,0x859927B9u,0x98A618A5u));\n\tA(uvec4(0x2E2D1F1Fu,0x90840C43u,0x4C08D290u,0x94A51085u));\n\tA(uvec4(0xD5511460u,0x90840C63u,0xB1E0343u,0x90840843u));\n\tA(uvec4(0x0u,0xC64C18A4u,0xFCF4FCFDu,0xEEF31C83u));\n\tA(uvec4(0xFFFFFFFEu,0xEF356ED1u,0xB1F0B1Eu,0xF33624C5u));\n\tA(uvec4(0xB4F0B0E1u,0x88000001u,0x154A9655u,0x88420401u));\n\tA(uvec4(0xA69C8D59u,0x94620C21u,0x8606020Au,0xA8C21063u));\n\tA(uvec4(0xE3DED78Du,0xB5031461u,0x5E292966u,0xB5063905u));\n\tA(uvec4(0xF8F1F0E1u,0xB0E50001u,0xD39BCA4Fu,0xB94920A5u));\n\tA(uvec4(0xD4D3D0A3u,0xD1A93507u,0x42134507u,0xB5271885u));\n\tA(uvec4(0x2A220D6Eu,0x94A618A7u,0x29907030u,0x9CC71085u));\n\tA(uvec4(0x386A166u,0x90A40C43u,0x55956A2Eu,0x94A50C43u));\n\tA(uvec4(0x1A1A0100u,0x9CA50423u,0xF4F0F8F1u,0xF2F324A3u));\n\tA(uvec4(0xFFFFFBEFu,0xEF367F99u,0x4B0B070Eu,0xF7571061u));\n\tA(uvec4(0xB1E5F9F4u,0x8C210001u,0x46574616u,0x8C420001u));\n\tA(uvec4(0x6CF1B1D6u,0x98620C41u,0xE081D146u,0xB5041041u));\n\tA(uvec4(0xB8F3B3C7u,0xBD251883u,0x6FAE5E6Eu,0xC5662083u));\n\tA(uvec4(0xFCF4FCF1u,0xB9060821u,0xE1D6E1C7u,0xC16824C5u));\n\tA(uvec4(0xF9FAF8E5u,0xDE0B3527u,0x2B5F171Au,0xC98A1065u));\n\tA(uvec4(0x2B695BAAu,0xA8E714A3u,0x7C58F3D8u,0x94A418A6u));\n\tA(uvec4(0x53538008u,0x98A61063u,0xF476551u,0x90840843u));\n\tA(uvec4(0x51D1E1Du,0x9CA41063u,0xF4F0F4F1u,0xF2F31CA3u));\n\tA(uvec4(0xAFFFFFFFu,0xEAF328A1u,0x1853534Eu,0xDA910C21u));\n\tA(uvec4(0x508070C0u,0x90621043u,0xA0400000u,0x90620401u));\n\tA(uvec4(0xB6F6F7Du,0x9C810401u,0x2FBC78E0u,0xACC30821u));\n\tA(uvec4(0xE6DCECB4u,0xC9862C83u,0x2F7F2FAFu,0xC14620A5u));\n\tA(uvec4(0xBDF8BCF9u,0xC5671883u,0xE4A1E192u,0xD62E28A5u));\n\tA(uvec4(0xB4FAF4FBu,0xE24D5DEDu,0xD7DB1B9Fu,0xCDAB3507u));\n\tA(uvec4(0x7CB86D6Du,0xB1061063u,0x2555A5C4u,0x94641083u));\n\tA(uvec4(0x3C16090Cu,0x90830C62u,0x5A06667Eu,0x90851065u));\n\tA(uvec4(0x1C290604u,0x9CC71083u,0xFCF0FCF1u,0xF2F31C83u));\n\tA(uvec4(0x271B0BAFu,0xFF5845EDu,0x11545119u,0xCA0F1063u));\n\tA(uvec4(0xC480C000u,0x88410821u,0x64B164A3u,0x90420421u));\n\tA(uvec4(0xF7EDA60Bu,0xACE330C3u,0xFFEF9B2Eu,0xD5A82861u));\n\tA(uvec4(0xDB9FA5C6u,0xE1E955C9u,0x1F7E1E3Eu,0xBD251881u));\n\tA(uvec4(0x2F6D2FBCu,0xD5C92CC3u,0xFBFCEDA5u,0xD9EC3905u));\n\tA(uvec4(0xFCF9BCE9u,0xF2F4522Fu,0xCB9BC6CBu,0xF2F449ABu));\n\tA(uvec4(0x3CB73C79u,0xC16728C5u,0x24500804u,0x98C51063u));\n\tA(uvec4(0x688A0B1u,0x8C410001u,0xB8A99A98u,0x90A61463u));\n\tA(uvec4(0x1A1A1634u,0xA5071065u,0xFDFCF9F9u,0xEAF128E5u));\n\tA(uvec4(0x1F1F0B0Fu,0xEAF32D05u,0xE4A46821u,0x8C420001u));\n\tA(uvec4(0xA76BD6C8u,0x8C610401u,0x60F0B498u,0x90410C43u));\n\tA(uvec4(0x2E194496u,0xC5661021u,0xE0E4FEFEu,0xE60A20A5u));\n\tA(uvec4(0xFFDFDF8Eu,0xEE8C664Bu,0xDE3F3F7Fu,0xDDEA38E3u));\n\tA(uvec4(0x9F1F0E2Fu,0xEEAE6A6Fu,0x7FB936E9u,0xF2B05A0Bu));\n\tA(uvec4(0xA9F8FCF8u,0xF7585A11u,0xE99FCF4Fu,0xE6B35A2Fu));\n\tA(uvec4(0x78B37CF3u,0xE66F3525u,0xB4F0B0B1u,0x98A41885u));\n\tA(uvec4(0xF3180C06u,0x98A61084u,0x69F8E4B0u,0x94850C63u));\n\tA(uvec4(0xA92F0B2Bu,0x9CE618A9u,0xF0E0F8E8u,0xF7352D03u));\n\tA(uvec4(0x2F7F3F3Eu,0xE6B318A3u,0x10909080u,0xAD450C43u));\n\tA(uvec4(0x5564A4A2u,0x88210001u,0xD0D1D081u,0xAD041041u));\n\tA(uvec4(0x9A9BFFBEu,0xEA293505u,0x7F0F0141u,0xC9A824A3u));\n\tA(uvec4(0xFCE4FEFFu,0xEEAE55E9u,0xFBDFCBBFu,0xF2D172B1u));\n\tA(uvec4(0x1F6EAEBEu,0xF71376AFu,0x266FBEu,0xEED13927u));\n\tA(uvec4(0xE0400015u,0xFFDB4DCBu,0x1F0A8081u,0xFB7B5E73u));\n\tA(uvec4(0xBDF97CF3u,0xF3154529u,0x909060A0u,0xB5481063u));\n\tA(uvec4(0x2929D6EAu,0x9CE80C65u,0xF6EB5EABu,0x9CE71085u));\n\tA(uvec4(0x1A3B55A5u,0x98A51CC9u,0xE0D1E1C5u,0xF73424E5u));\n\tA(uvec4(0x8B1F0F2Eu,0xEF3520C5u,0xF3CE0B09u,0x98831063u));\n\tA(uvec4(0x4114020u,0x84230401u,0xE0D0E0C0u,0xC9650821u));\n\tA(uvec4(0xD24A061Au,0xC5660C41u,0x6A2E04D1u,0x9CA30801u));\n\tA(uvec4(0xB4E8FFF7u,0xE6073CE5u,0xFAFEFBFEu,0xF7137EC9u));\n\tA(uvec4(0xAF5F0B1Eu,0xFF566EADu,0xBADA851u,0xEA8E2441u));\n\tA(uvec4(0x85FFF5u,0xF2D14989u,0xF9EAFFFFu,0xFF9A664Fu));\n\tA(uvec4(0xBFEFBEF9u,0xFB79726Bu,0x50505050u,0xBD890401u));\n\tA(uvec4(0xFAF6A667u,0x9CC714A7u,0x87518818u,0xA1081485u));\n\tA(uvec4(0x47477271u,0xA9491CC7u,0xD091C0C0u,0xFB54A4C5u));\n\tA(uvec4(0x7B8F070Au,0xEF162905u,0xB09A8E5u,0x9CC41043u));\n\tA(uvec4(0x18301431u,0x84010001u,0xF4D0E0D0u,0xCD871443u));\n\tA(uvec4(0xD6D7E3C7u,0xBD4524A3u,0x6586556Au,0xA9480401u));\n\tA(uvec4(0x1B1E4790u,0xB5020801u,0xF8E4F9EAu,0xF7387A49u));\n\tA(uvec4(0x7FEFFFFFu,0xFF996E09u,0x68915106u,0xF2F12CA1u));\n\tA(uvec4(0xF1A51504u,0xC5EF0421u,0x9095E4E4u,0xFB764105u));\n\tA(uvec4(0xFFFFFFFFu,0xFF9B7E29u,0x1020000u,0xD9C71CA5u));\n\tA(uvec4(0xD180E0F0u,0x98C618A7u,0x170B460Bu,0x9CC714A5u));\n\tA(uvec4(0x1A3D0E1Du,0xA1071CC7u,0xD0D0E0C1u,0xF31328E5u));\n\tA(uvec4(0x3F7F6FAFu,0xF3354169u,0x19A0520Fu,0x94840421u));\n\tA(uvec4(0x4211618u,0x88220001u,0xFCF4F8E1u,0xC1661461u));\n\tA(uvec4(0x6F5F9696u,0xC1252483u,0xAE9E9272u,0xB9471C61u));\n\tA(uvec4(0x1A6A1A2Au,0xC0C30401u,0xF8E4F8E4u,0xF7565DA7u));\n\tA(uvec4(0x6B5F2BAEu,0xFFFF72D5u,0x50D072A8u,0xEA6E40E5u));\n\tA(uvec4(0x40CC90F0u,0xDA733DACu,0x480A8343u,0xFF7B76F5u));\n\tA(uvec4(0xE5D5FAFEu,0xFFFF7F77u,0x7170203u,0xEA0B24A3u));\n\tA(uvec4(0xF8F8E9E8u,0x98A50045u,0xFFEBEB9Au,0x9CC61485u));\n\tA(uvec4(0x2F371825u,0x9CA51063u,0xF0D0E0D0u,0xF735A4C5u));\n\tA(uvec4(0x5F9F3F7Fu,0xEF157FD8u,0x316030Du,0xC5EA1063u));\n\tA(uvec4(0x100011u,0x9CE60401u,0xFCF8FCF9u,0xC96620C5u));\n\tA(uvec4(0x6BAFFFAEu,0xCD874D85u,0x35EBBFAEu,0xC54651A9u));\n\tA(uvec4(0x716162Au,0xC12328C5u,0xF9E4F8E4u,0xF7595965u));\n\tA(uvec4(0x6B9F9B9Eu,0xFFBD7337u,0xAD290551u,0xE2085569u));\n\tA(uvec4(0xF6914140u,0xFB576A71u,0xB1B1A19u,0xFB9C7759u));\n\tA(uvec4(0xE0D0F4D4u,0xFFDE7B79u,0xB1B071Au,0xFAD02CA3u));\n\tA(uvec4(0xD090F0F0u,0x9CA50843u,0x1B5B479Eu,0x9CC51485u));\n\tA(uvec4(0x18B52DBEu,0x94831065u,0xF4E0F4F0u,0xF3141CA3u));\n\tA(uvec4(0xEADAE6FBu,0xFF9A7357u,0x13170603u,0xCA2C1C83u));\n\tA(uvec4(0xD090C001u,0x84640423u,0xFCF7FCF9u,0xC9672CC3u));\n\tA(uvec4(0xABAF8B9Eu,0xD1A74D89u,0x454686F0u,0xD1EA5189u));\n\tA(uvec4(0x116031Bu,0xC5253925u,0xF9E8F9E8u,0xFB7A5967u));\n\tA(uvec4(0x1B1F5B5Fu,0xFFBC7B7Bu,0xB9A5BBBAu,0xF7587713u));\n\tA(uvec4(0x1C20AAFEu,0xFF567715u,0x31B0B1Fu,0xFB7A7759u));\n\tA(uvec4(0xE5D4E5D0u,0xFFFF7F57u,0xB1F0B1Eu,0xF2B13905u));\n\tA(uvec4(0xF4F0E4A1u,0x9CA40023u,0x965A0606u,0xA1071885u));\n\tA(uvec4(0x62431044u,0x94411483u,0xFCF0F8F1u,0xEF131C83u));\n\tA(uvec4(0xFFFFFFCBu,0xF3567757u,0x575B1316u,0xFB781041u));\n\tA(uvec4(0x80101041u,0xA9290803u,0xFEF5FCF3u,0xC9872D25u));\n\tA(uvec4(0xF66BEFCFu,0xD9C859E9u,0x5A6A5656u,0xD9C84D67u));\n\tA(uvec4(0x0u,0xD5A73D47u,0xFDF8F9F8u,0xFB9A61A9u));\n\tA(uvec4(0xABAFAB5Eu,0xFFBD7799u,0x182515A4u,0xFF597317u));\n\tA(uvec4(0x30F0C09Cu,0xF7167714u,0x5B580306u,0xFB7A7F79u));\n\tA(uvec4(0xF1D1E5D4u,0xFFBC7F99u,0x571B071Eu,0xFB373505u));\n\tA(uvec4(0x24A095E0u,0x9C8220E9u,0x806898Au,0x9CC518A5u));\n\tA(uvec4(0x10E1F1D0u,0xA4E41041u,0xFFFCFCF5u,0xF7352483u));\n\tA(uvec4(0xFEFBFFFEu,0xF3377FFBu,0x2F6F1B5Eu,0xFB781041u));\n\tA(uvec4(0xF4E0F0C0u,0xD9A80001u,0x4B3F4BB7u,0xC58A4D89u));\n\tA(uvec4(0x9194E9C6u,0xDDE859A9u,0x565B5B5Au,0xDDC751A9u));\n\tA(uvec4(0x35751511u,0xC54534C3u,0xBDFCFDF9u,0xFB7A7F11u));\n\tA(uvec4(0xD68A9A9Au,0xFFDE7FBBu,0x1176972u,0xF7367715u));\n\tA(uvec4(0x0u,0xF7567736u,0x5E6CAA9Cu,0xFF9B7B79u));\n\tA(uvec4(0xF1D6F2D0u,0xFF9B7F99u,0x1B6F5B5Au,0xF3361463u));\n\tA(uvec4(0xB4B5F4A0u,0x98821841u,0x3030013u,0xA92818A5u));\n\tA(uvec4(0xF8D0D010u,0xF3361041u,0xFFFFFFFEu,0xF75530A1u));\n\tA(uvec4(0xFDF8FEEAu,0xF3566F35u,0xBFFF3F7Fu,0xF79914E7u));\n\tA(uvec4(0xEAFCBCF0u,0xD58740E3u,0x8B9EA75Fu,0xCE0E3D47u));\n\tA(uvec4(0x464A9244u,0xE5C659C9u,0xE6AA6A5Au,0xEA295589u));\n\tA(uvec4(0x98B164B1u,0xD1874125u,0xE58A9AACu,0xFF797737u));\n\tA(uvec4(0x93FFFBCAu,0xFF9C7B7Bu,0x1010102u,0xFFB87715u));\n\tA(uvec4(0xD4909454u,0xFF7A7B37u,0x4F2E1E6Du,0xFF9B7F9Bu));\n\tA(uvec4(0xE080E0C0u,0xFFFE7F79u,0x70F0B1Eu,0xEAB3294Bu));\n\tA(uvec4(0xF4F0F8F1u,0x98830801u,0x5E3E0F1Bu,0x9CA31065u));\n\tA(uvec4(0xFCF7FEF4u,0xF35549A5u,0xF6FBFFFu,0xF7357735u));\n    //-------------------------------------------\n    C = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n\t18x56\n*/\nhighp ivec2 SV_DispatchThreadID = ivec2(0,0);\nhighp int Double_pixelID = 0;\nhighp vec4 col = vec4(0.,0.,0.,0.);\nint i = 252;\n\n//pass !\nvoid A(uvec4 data){\n    \n    if(Double_pixelID == i++){\n        if((SV_DispatchThreadID.x & 0x1) == 0){\n        \tcol.xy = unpackSnorm2x16(data.s);\n    \t\tcol.zw = unpackSnorm2x16(data.t);\n        }\n        else{\n        \tcol.xy = unpackSnorm2x16(data.p);\n    \t\tcol.zw = unpackSnorm2x16(data.q);\n        }\n    }\n}\n\nvoid mainImage( out vec4 C, in vec2 U)\n{\n    SV_DispatchThreadID = ivec2(floor(U-0.5));\n    if(SV_DispatchThreadID.x >= 18 || SV_DispatchThreadID.y >= 56){\n    \tC = vec4(1./3.,0.,0.,0.);\n        return;\n    }\n    if(iFrame > 2){\n    \tC = texture(iChannel1,U/iResolution.xy);\n        discard;\n    }\n    //1个像素存一个数据块\n    //9 x 56, 9为其中2个像素存2个块数据\n    //像素ID编号\n    Double_pixelID = (SV_DispatchThreadID.x>>1) + (SV_DispatchThreadID.y*9); \n    //------------------------------------\n \tA(uvec4(0xF9E4F9F8u,0xF3577335u,0x2F7F7FFFu,0xF7795D87u));\n\tA(uvec4(0x904090D4u,0xDE6F59CBu,0xF1F4F4Eu,0xE62E24C5u));\n\tA(uvec4(0x6AEA4E1Au,0xE1C765C9u,0xB9D0E5D4u,0xF6EE6A6Bu));\n\tA(uvec4(0x9A418052u,0xE1E95187u,0xFEF9F9E6u,0xFF997F55u));\n\tA(uvec4(0xFBDB9286u,0xFFDE7F99u,0x61F22011u,0xFAF27AF1u));\n\tA(uvec4(0xD695E191u,0xFF997B59u,0xFFAF6F1Eu,0xFF9B7F79u));\n\tA(uvec4(0xFFD6F5C0u,0xFF987F79u,0x217020Bu,0xF3391CC5u));\n\tA(uvec4(0x24B4F4B1u,0x9C820C41u,0x305420u,0x9CC31483u));\n\tA(uvec4(0xFCF2F6E8u,0xF756A8E5u,0x2B6F2F0Eu,0xF7567313u));\n\tA(uvec4(0xFAF4F8E4u,0xF3577335u,0x71F0F3Eu,0xF77851A7u));\n\tA(uvec4(0xD0809080u,0xFED0560Fu,0x31B070Fu,0xDE6F1863u));\n\tA(uvec4(0xE9E8EAA8u,0xEA4BE167u,0x3FBE7FEAu,0xF2AD6209u));\n\tA(uvec4(0x8090A8ACu,0xF28B5147u,0xFFFFFFFEu,0xFF78660Bu));\n\tA(uvec4(0xE5C2E2EFu,0xFFBC7715u,0xB5F4342u,0xFB1472AFu));\n\tA(uvec4(0x969A9689u,0xFF797F77u,0xF9FFFF8Eu,0xFF9A7FBBu));\n\tA(uvec4(0xFFFFFFFFu,0xFB795A0Au,0x2130203u,0xF7591485u));\n\tA(uvec4(0x10102010u,0x9C831883u,0xC0000001u,0xE2D218A3u));\n\tA(uvec4(0xFEEEFFFDu,0xF756458Bu,0xF1F062Bu,0xF7567335u));\n\tA(uvec4(0xFFFFFFFAu,0xF7785E91u,0x130207u,0xF31455A9u));\n\tA(uvec4(0xF0D0E080u,0xFB13664Du,0x1023030Au,0xCD6A0001u));\n\tA(uvec4(0xE490E4E4u,0xEE8C5965u,0x1B1F2F7Eu,0xF2AD5DE9u));\n\tA(uvec4(0x50000001u,0xEA0555A9u,0x86ADFFFEu,0xFF7A76EFu));\n\tA(uvec4(0x5ABFEBDEu,0xFF9A7F9Bu,0xF2F0F1Eu,0xFF367AF1u));\n\tA(uvec4(0xA9549598u,0xFFBB7F55u,0xF7E9F9F8u,0xFF797BBDu));\n\tA(uvec4(0xFFFFFFFEu,0xFB9A1801u,0x1130203u,0xEED420A5u));\n\tA(uvec4(0x64301431u,0x9CE61485u,0x6F4E7DE1u,0xD22D3149u));\n\tA(uvec4(0xF0E0F9FAu,0xF7563149u,0xBFBF6F6Fu,0xF3357F51u));\n\tA(uvec4(0xFFFFFFFEu,0xF3575EB3u,0x2130003u,0xF33759C9u));\n\tA(uvec4(0xF0E0F0D0u,0xF6F3620Bu,0xC3930013u,0xE6B19401u));\n\tA(uvec4(0xF0E0F4E0u,0xDDC830A3u,0x4FAFAF6Au,0xEE8B34A3u));\n\tA(uvec4(0x6A254554u,0xD58955A7u,0x8B5E8A4Au,0xFB985DA9u));\n\tA(uvec4(0xEB5A964Eu,0xFFBD7F79u,0xBFAE2F2Fu,0xFF9A6EF1u));\n\tA(uvec4(0xF9F5F8A4u,0xFF7776ADu,0xEFEFFFEEu,0xFF9A7F99u));\n\tA(uvec4(0xFFFFFFFEu,0xFB7965A3u,0x42434142u,0xF3371885u));\n\tA(uvec4(0x9050A0B0u,0xAD290C63u,0x5A691578u,0xA4E60023u));\n\tA(uvec4(0x7CF5F8F0u,0xF7570801u,0xA9EFFFFFu,0xF7559041u));\n\tA(uvec4(0xFFFFFFFFu,0xF7771064u,0x471B0303u,0xEF3755C9u));\n\tA(uvec4(0xE0D0E0D0u,0xFF3659C9u,0x4F1F878Bu,0xEED41801u));\n\tA(uvec4(0x9192E4D3u,0xC1452C83u,0x60B0B0Eu,0xF64B4105u));\n\tA(uvec4(0xE0B0ACB8u,0xE1663CA5u,0xBAA2EE9Fu,0xFA8F65CBu));\n\tA(uvec4(0x101EBEFu,0xFF7A7EF5u,0xF5841FBFu,0xF7396253u));\n\tA(uvec4(0xF8E5F8F4u,0xFF78768Bu,0xEBDFEFCEu,0xFF9A7B79u));\n\tA(uvec4(0xFFFFFFFFu,0xFB797F0Eu,0x471B8247u,0xEEF51C85u));\n\tA(uvec4(0xE8E9240u,0x80010843u,0x451A1B6Au,0xAD480001u));\n\tA(uvec4(0xFFFDFCB4u,0xEEF545ABu,0x3030300u,0xCDEC8C40u));\n\tA(uvec4(0xFAFAFAFBu,0xF3577357u,0x1B1F1B5Au,0xF77838C3u));\n\tA(uvec4(0xE1D0E2D0u,0xEA6D59C9u,0xFFFF1F2Fu,0xF7161421u));\n\tA(uvec4(0x302u,0xE2522483u,0xD0408548u,0xCDE74947u));\n\tA(uvec4(0xE7E71401u,0xD1073863u,0xBF6B14B9u,0xED8D50C5u));\n\tA(uvec4(0xFFEEF445u,0xFB186A0Fu,0xDB9FBFFEu,0xFB797737u));\n\tA(uvec4(0xA2D1E1E3u,0xFB797757u,0x6A4A9B9Fu,0xFF997F79u));\n\tA(uvec4(0xE1C0F9EEu,0xFFBC7B79u,0x1B1F0B1Au,0xEEF53D05u));\n\tA(uvec4(0x20300D3Cu,0xA92910A5u,0x4000u,0xE6B31CC7u));\n\tA(uvec4(0xFFFEFFFFu,0xE6D4E66Du,0x3170303u,0xE2918821u));\n\tA(uvec4(0xFAFAFAC5u,0xF3577757u,0xBF3F1F2Fu,0xFB9A3525u));\n\tA(uvec4(0x4599285u,0xE1E45167u,0xF5EDFFFEu,0xF71672AFu));\n\tA(uvec4(0xF0F0302u,0xF2F51421u,0x5050A081u,0xC1063D05u));\n\tA(uvec4(0xE1415A1Fu,0xF6AD6A2Bu,0xEBE0F9BBu,0xF6AF7A8Fu));\n\tA(uvec4(0x27EEBFFEu,0xFF787B59u,0xFCEBA6C7u,0xFB797F99u));\n\tA(uvec4(0xDAAB9FAFu,0xFB797799u,0x4B2E0608u,0xFF997F99u));\n\tA(uvec4(0xE4C0E0C1u,0xFF9C7B79u,0xFFAF6F6Eu,0xF3586E09u));\n\tA(uvec4(0x5114040u,0xC1051463u,0xF4E5D000u,0xE2B31065u));\n\tA(uvec4(0xFFFFFFFEu,0xE6D40001u,0x3170307u,0xDE4F8821u));\n\tA(uvec4(0xF6F9F6E9u,0xF7577357u,0xFFFAFFFFu,0xF779FBB7u));\n\tA(uvec4(0x2030000u,0xFFDC5187u,0xE0E0F0D4u,0xEA6E6A6Du));\n\tA(uvec4(0xFFEF2F2Fu,0xF3180001u,0x0u,0xF2D538C5u));\n\tA(uvec4(0x94E0E0C0u,0xDE0A6A4Du,0x446BAFAEu,0xF712624Du));\n\tA(uvec4(0xD9AAEADFu,0xFB787B77u,0xAF0E469Au,0xFB7A7B79u));\n\tA(uvec4(0xF991E0D4u,0xFF997B79u,0xEA7E7EAAu,0xFF797757u));\n\tA(uvec4(0xEA9EEBD8u,0xFB9A7779u,0xEEEAEFEFu,0xFB797F9Du));\n\tA(uvec4(0xCF7F8F1Bu,0xF337AD05u,0xEFEFFBE5u,0xF3387F79u));\n\tA(uvec4(0xFFFFFFFEu,0xEAD37A2Du,0x2130307u,0xD60D8421u));\n\tA(uvec4(0xFFFFFFFFu,0xF7570842u,0xFFEFFFFFu,0xF7782CC5u));\n\tA(uvec4(0xB1F0307u,0xFB9A55A9u,0x2430A091u,0xEA6B6A4Bu));\n\tA(uvec4(0xF9F9FFFEu,0xF3175E6Du,0xF0F4302u,0xFB5930C5u));\n\tA(uvec4(0xE9F9F9B4u,0xD9C94D03u,0xFBFF8F1Cu,0xEEB16EB3u));\n\tA(uvec4(0xFCAB1686u,0xFB587737u,0x9B9B9B9Eu,0xFFBA7B79u));\n\tA(uvec4(0x2FEEFFFDu,0xFB797B57u,0xBAE4B1CBu,0xFB9A7759u));\n\tA(uvec4(0xEEFAFAB8u,0xFB797F9Bu,0xF2D2F2FEu,0xFB9B7779u));\n\tA(uvec4(0xCF7FCF6Fu,0xF75928E5u,0xFFFFFFEEu,0xF7584E4Fu));\n\tA(uvec4(0xBFEFFFFFu,0xE6B37E6Du,0x1120103u,0xEF120401u));\n\tA(uvec4(0xFFFFFFFFu,0xF7570C20u,0xEFFFFFFFu,0xF7787FBBu));\n\tA(uvec4(0x2F2F0F0Eu,0xFBBB5E0Bu,0x40947131u,0xE6296209u));\n\tA(uvec4(0xD090E4E8u,0xF316624Du,0xFFFF7F3Fu,0xF75A5654u));\n\tA(uvec4(0xA3A2A8A4u,0xF6F244A1u,0xFEEEFBEEu,0xEED07F95u));\n\tA(uvec4(0xFFFDFDFFu,0xFB587714u,0xBA87964Bu,0xFFBA7F79u));\n\tA(uvec4(0xA492971Eu,0xFF797357u,0x15566AAAu,0xFF9B7B79u));\n\tA(uvec4(0x154491B4u,0xFF7A7B79u,0xF4F4F8D0u,0xFB7AFB9Bu));\n\tA(uvec4(0xCF9FCF6Fu,0xFB79418Bu,0xFFFFFFFEu,0xF3370001u));\n\tA(uvec4(0x6FBF6FBFu,0xEAD37EEFu,0x110001u,0xEF560001u));\n\tA(uvec4(0xFFFFFFFFu,0xF3570C42u,0xEFEFEFFEu,0xF777779Bu));\n\tA(uvec4(0xFFFFFF7Fu,0xFB9A662Cu,0x3010000u,0xEF125E0Au));\n\tA(uvec4(0xE530D090u,0xDE2A622Bu,0xE8A9FFFFu,0xF75A7B7Bu));\n\tA(uvec4(0x7F2F4F4Fu,0xFF7A5E0Fu,0xFCEDFFFFu,0xF6D15945u));\n\tA(uvec4(0xEBFFEB9Fu,0xFF787FB9u,0x966F6FBEu,0xFB586A8Fu));\n\tA(uvec4(0xDEA1A195u,0xF7577B79u,0x1020114u,0xFF9C7B79u));\n\tA(uvec4(0xE4549994u,0xF79A7B59u,0xFFEEBEFFu,0xFB7A7F79u));\n\tA(uvec4(0xDBDFCF9Fu,0xFB793947u,0xFBDFFFFEu,0xF3167315u));\n\tA(uvec4(0x7F7F6FBEu,0xE691722Bu,0x110001u,0xF7550001u));\n\tA(uvec4(0xFFFFFFFFu,0xF7788840u,0xABBFAFBFu,0xF7787777u));\n\tA(uvec4(0xEAEAFFFEu,0xF7997757u,0x3F1F0F07u,0xFB785E0Au));\n\tA(uvec4(0x24745C74u,0xE2295DE9u,0xF9F5F5D5u,0xF3166EF1u));\n\tA(uvec4(0xD4C2FAFBu,0xFB9C7B59u,0xFF6F83D2u,0xFF7972D3u));\n\tA(uvec4(0x3FBE3EABu,0xFB7A4D69u,0xE4E4A490u,0xEEAE5DC9u));\n\tA(uvec4(0xEFAFBBABu,0xF7377B57u,0x7170203u,0xFB7A7B79u));\n\tA(uvec4(0xF5D0F5D4u,0xFB797B59u,0xFFFFFFFEu,0xFB7A51EDu));\n\tA(uvec4(0xE7DFEBCFu,0xF7583505u,0xFFEFFFEEu,0xF2F566D3u));\n\tA(uvec4(0x6F7F6F7Fu,0xE26E6DC9u,0x110001u,0xF3350001u));\n\tA(uvec4(0xFFFFFFFFu,0xF7780822u,0xBFEFABABu,0xF7787377u));\n\tA(uvec4(0xEAABEFBFu,0xF7777FBBu,0xFFFFFF7Fu,0xF7BA5EB2u));\n\tA(uvec4(0x67525450u,0xFB334D43u,0x75F0B0E0u,0xF2F27311u));\n\tA(uvec4(0x51409050u,0xFF9C7B17u,0xFFACFEFFu,0xFFBC7FFFu));\n\tA(uvec4(0x3FBF3FFFu,0xFBBD418Bu,0xF8F4B8A4u,0xDDE95163u));\n\tA(uvec4(0xD69ACEDFu,0xF3357315u,0x5757575Au,0xFB7A7B57u));\n\tA(uvec4(0xF5E6F5E8u,0xFB587757u,0xFFFFFFFEu,0xF7790001u));\n\tA(uvec4(0xF3DBF3CFu,0xFB5849CBu,0xFBFFEBFEu,0xEAD27B77u));\n\tA(uvec4(0xAB7F6F7Fu,0xDE2C5967u,0x110001u,0xF3350001u));\n\tA(uvec4(0xFFFFFFFFu,0xF7780422u,0xFFFFEFFFu,0xF7787799u));\n\tA(uvec4(0xFFFFFFFFu,0xF778EB14u,0x3FFFFFFEu,0xFB9AAD49u));\n\tA(uvec4(0xE0D2ABAEu,0xE22A0001u,0x7FBFBFFAu,0xEA8C61E5u));\n\tA(uvec4(0x69692580u,0xF3167B15u,0xF4F0F4F5u,0xFFBC7FFFu));\n\tA(uvec4(0x3F7F3F7Fu,0xFF9C3947u,0x90F0B4F4u,0xD9C85187u));\n\tA(uvec4(0xE6DAE6CAu,0xF2F26EAFu,0xB1F5B4Au,0xF7387B57u));\n\tA(uvec4(0x9091E5D5u,0xF7387757u,0xFFFFFFFFu,0xF7577FB3u));\n\tA(uvec4(0xF6F2F2DBu,0xF6F53107u,0x2F3F37EFu,0xEAB17AD1u));\n\tA(uvec4(0xA9A4A9A8u,0xEE0A3D47u,0x110001u,0xF7350001u));\n\tA(uvec4(0xFFFFFFFFu,0xF7780822u,0xFFFFFFFEu,0xF7782D27u));\n\tA(uvec4(0xF6FBFFFu,0xFB990C41u,0x13Fu,0xEB130C43u));\n\tA(uvec4(0x80C0u,0xA8C40022u,0x6F6F6FBEu,0xF2AD4123u));\n\tA(uvec4(0xB4B0B890u,0xF7157F57u,0xF9E6F4F1u,0xFFBDFFFFu));\n\tA(uvec4(0x3FBF3F7Fu,0xFFBC4145u,0x40u,0xE66E51A9u));\n\tA(uvec4(0xA4A4E8A4u,0xE68F6E6Du,0x4A1D578Fu,0xF7367315u));\n\tA(uvec4(0x91014140u,0xFF7A7737u,0x3FBE3FFFu,0xF3157F73u));\n\tA(uvec4(0xF9F1F6F1u,0xF3143D29u,0xDB9F4F2Fu,0xE62D622Du));\n\tA(uvec4(0xBFBEAEA9u,0xDE0A4127u,0x110001u,0xFB350001u));\n\tA(uvec4(0xFFFFFFFFu,0xF7780442u,0xFFFFFFFEu,0xFB990001u));\n\tA(uvec4(0x217070Fu,0xF3550823u,0x0u,0x88400420u));\n\tA(uvec4(0x0u,0xA98F0401u,0xBDBCAEBDu,0xD9E91883u));\n\tA(uvec4(0xF9E9F9F5u,0xFB167F31u,0xF0F0F03u,0xFFFEFFBCu));\n\tA(uvec4(0x3FBF3FBFu,0xFFBD3929u,0xA4A05410u,0xD5EA4965u));\n\tA(uvec4(0x2666590u,0xE64C622Bu,0xA0949044u,0xEEF46EF1u));\n\tA(uvec4(0xE6C6E586u,0xFB597715u,0xEFBFBFBFu,0xF2F251A9u));\n\tA(uvec4(0xACB3BCF3u,0xEED245ADu,0xF5E6E68Au,0xE22C65CBu));\n\tA(uvec4(0xBFBFBFBEu,0xE20B2041u,0x110001u,0xFB550001u));\n\tA(uvec4(0xFFFFFFFFu,0xF3780422u,0x2FAFBFFFu,0xFFBA0841u));\n\tA(uvec4(0x1u,0x80000820u,0x1F1E1010u,0x84210842u));\n\tA(uvec4(0x0u,0x931F0001u,0xBCF8BCB9u,0xCD650C43u));\n\tA(uvec4(0xFEFEFEFAu,0xF7157F07u,0x5F5F5F5Eu,0xFFFFFF9Bu));\n\tA(uvec4(0x7FFF7FFFu,0xFFBD28E1u,0x40509091u,0xDE2C4547u));\n\tA(uvec4(0xBFBA1A0Bu,0xE66D664Du,0xA559080u,0xE6B06A8Fu));\n\tA(uvec4(0xE091D1C7u,0xFF577315u,0xFFFFFFFFu,0xE69039CDu));\n\tA(uvec4(0xBCB8BCB9u,0xE66F3907u,0xFAF6F9F0u,0xE66E7A8Fu));\n\tA(uvec4(0xAFBFAFBFu,0xE20A3D05u,0x0u,0xFF550000u));\n\tA(uvec4(0xFFFFFFFFu,0xF7781082u,0x31F0F2Fu,0xF3361063u));\n\tA(uvec4(0xE0A0B020u,0x88210023u,0x1A3F0F3Fu,0x84210841u));\n\tA(uvec4(0x0u,0x80EC0401u,0xFCF8FCB5u,0xD1850403u));\n\tA(uvec4(0x4F6FBFFFu,0xF7377715u,0x2F6E5F6Eu,0xFFDEFB9Bu));\n\tA(uvec4(0x7FFF7FFFu,0xFFBD4123u,0x100001u,0xD22C3D47u));\n\tA(uvec4(0xFDFDFFFEu,0xEA8F55A7u,0x1A1B1A1Au,0xE6F26A6Du));\n\tA(uvec4(0xF8E4F5D4u,0xF2F3626Fu,0x3FFFBFFFu,0xE69049EDu));\n\tA(uvec4(0xFFFCFDBDu,0xE64E4127u,0xFBCBEBEAu,0xEA8E664Du));\n\tA(uvec4(0xBFBFBFBEu,0xD9C92483u,0x110001u,0xF7350001u));\n\tA(uvec4(0xBFFFFFFFu,0xF7560001u,0x20102u,0xFFD90C43u));\n\tA(uvec4(0x9090D091u,0x88210421u,0x1F3E0F3Bu,0x84210403u));\n\tA(uvec4(0x1u,0x808E0021u,0xFCF8FCF9u,0xD1A60001u));\n\tA(uvec4(0xB1F0B1Eu,0xFFFD72F3u,0xF8E0E4EDu,0xFFBC7FFFu));\n\tA(uvec4(0x7FFF7FFFu,0xFFBD4547u,0x0u,0xF7BC4146u));\n\tA(uvec4(0xF4F4F8F8u,0xEAB14105u,0x1B5B1B5Au,0xEED46A8Fu));\n\tA(uvec4(0xF0E0E4E0u,0xEEB159C9u,0x3FBF3FBFu,0xDE4E4989u));\n\tA(uvec4(0xFFFDFFFDu,0xEE6E41ADu,0xFFFFFFFFu,0xE24D624Cu));\n\tA(uvec4(0xAFBFAFBFu,0xDDC83905u,0x110001u,0xFF328001u));\n\tA(uvec4(0x1F3F3FFFu,0xF3561063u,0x90400001u,0x80000843u));\n\tA(uvec4(0x5B6A6450u,0x88420001u,0x1DA96E6Fu,0x84210421u));\n\tA(uvec4(0x11A0000u,0x80220001u,0xF8F4FCF9u,0xD9C80823u));\n\tA(uvec4(0xB1F0B0Fu,0xFFB87715u,0xFDF8F9D5u,0xFFBD7B9Bu));\n\tA(uvec4(0x7FFFBFFFu,0xFBBC3CE7u,0x0u,0xFF9F3D44u));\n\tA(uvec4(0xC090E0E1u,0xEEF24967u,0xB1F1B5Eu,0xEED5666Du));\n\tA(uvec4(0xE0D0E0D0u,0xE24D59C9u,0x2B3B2B2Fu,0xE24E4569u));\n\tA(uvec4(0xBFFFFFFFu,0xEA6E49CBu,0x5F7E7F3Fu,0xE22C76D1u));\n\tA(uvec4(0xAFBEAFBEu,0xD9A83D25u,0x110001u,0xFF760001u));\n\tA(uvec4(0x31B0B1Fu,0xF7380C41u,0x4030A051u,0x88410843u));\n\tA(uvec4(0x98BAAA59u,0x84220001u,0x340E2Bu,0x84220423u));\n\tA(uvec4(0x1u,0xD9E90001u,0xF8F0F8F0u,0xDDE70C23u));\n\tA(uvec4(0xB0B0B0Eu,0xFF9872F3u,0xF9F8F9F8u,0xFFBD7B9Bu));\n\tA(uvec4(0x7FFF7FFFu,0xFFBD3CE3u,0x0u,0xD2143D26u));\n\tA(uvec4(0xA8508440u,0xE24E4D89u,0x1B1F0B1Eu,0xEAD4664Fu));\n\tA(uvec4(0xE0E0F0D0u,0xD9EA59C9u,0xCF3F9B2Fu,0xE22C3927u));\n\tA(uvec4(0xFFFFFFFFu,0xE20C3D29u,0xDB97CE6Fu,0xE22C662Du));\n\tA(uvec4(0xAFBFAFBEu,0xD9C93D05u,0x110001u,0xFF940001u));\n\tA(uvec4(0x2130207u,0xE7581063u,0x50202040u,0x88420421u));\n\tA(uvec4(0xA9E59918u,0x84210003u,0xB9A85A22u,0x84220001u));\n\tA(uvec4(0xA290000u,0x84200003u,0xFCF0F8F0u,0xD9C80821u));\n\tA(uvec4(0xB1F0B0Eu,0xF7346ED1u,0xF0F4FDE9u,0xFFBC7FBDu));\n\tA(uvec4(0x3FBF3FFFu,0xFFBDC569u,0x100001u,0xEAD04147u));\n\tA(uvec4(0xF8F4F8F4u,0xE6704925u,0x6AAB6A6Eu,0xEAB1624Du));\n\tA(uvec4(0xF0D1E0C0u,0xD9EB55CBu,0xCF6FCF6Eu,0xD9EA28C5u));\n\tA(uvec4(0xBFFFFFFFu,0xE1EA4DA9u,0xA79EE79Au,0xE22D620Bu));\n\tA(uvec4(0xAFAEAFBEu,0xDDE94927u,0x110001u,0xFF510001u));\n\tA(uvec4(0x2130203u,0xFFFE1063u,0x60E06020u,0x84210003u));\n\tA(uvec4(0xA494A9A4u,0x84220021u,0xA9A895D2u,0x84200423u));\n\tA(uvec4(0x5150500u,0x80030421u,0xFCF4FCF5u,0xD5A70003u));\n\tA(uvec4(0x70B071Au,0xFF756EB1u,0xF0F0F4F9u,0xFBBD7FDDu));\n\tA(uvec4(0x3F7F3FBFu,0xFFBC4147u,0x0u,0xEF164547u));\n\tA(uvec4(0xF4E0F4F4u,0xE6904D67u,0x57475656u,0xEED4624Fu));\n\tA(uvec4(0xF4E0F4E0u,0xDDEA4DA9u,0xCB9FDFAFu,0xCD872CC5u));\n\tA(uvec4(0xAF6FEFEAu,0xD9C9622Du,0xD584A696u,0xE64E5DEBu));\n\tA(uvec4(0xFFFFBFBFu,0xD5A8C505u,0x1120001u,0xE20A0001u));\n\tA(uvec4(0x1130103u,0xFFFF0823u,0x60506060u,0x88430001u));\n\tA(uvec4(0x14051u,0x84230423u,0xA5696B66u,0x84220021u));\n\tA(uvec4(0x9260504u,0x84210023u,0xFCF8FCF5u,0xD1A70401u));\n\tA(uvec4(0xB0B0B0Au,0xFB546AB1u,0xF9F9FDD5u,0xFB9C7B9Bu));\n\tA(uvec4(0x3F7F3F7Fu,0xFFBD4569u,0x40000u,0xBCE24547u));\n\tA(uvec4(0xE4E0F4E0u,0xE24F4D89u,0x1B5B5B4Au,0xE66F5A0Du));\n\tA(uvec4(0xBDE5E5E0u,0xD5A951A9u,0xE3DFD7CFu,0xC9672CE5u));\n\tA(uvec4(0x8B1B076Bu,0xDDE95DEBu,0xE4449584u,0xE20A5DEBu));\n\tA(uvec4(0xBF3F3F7Fu,0xD5C9D5A8u,0x2130103u,0xD1C80421u));\n\tA(uvec4(0x1130103u,0xFFFD0843u,0xE090A0A0u,0x84210001u));\n\tA(uvec4(0x6A6A9A00u,0x84220001u,0x9AEAA0E4u,0x84210423u));\n\tA(uvec4(0x15150514u,0x84240021u,0xF8F8FCF9u,0xD1860C45u));\n\tA(uvec4(0xAB0F0B0Eu,0xF7126691u,0xF9C4F9D8u,0xFF9D779Bu));\n\tA(uvec4(0x3F7F3F7Fu,0xFBBC4527u,0xA4E01484u,0xC54749A9u));\n\tA(uvec4(0xF5E5E4E0u,0xD1EA4547u,0x2BAF2B1Eu,0xDE0D59CBu));\n\tA(uvec4(0x95579690u,0xD18659EBu,0xF2DAF3CAu,0xCD8828A3u));\n\tA(uvec4(0x1F5F0B1Fu,0xDDEA59EBu,0xFBFCFACDu,0xD9E959C9u));\n\tA(uvec4(0xFFFFFFFEu,0xD5A81447u,0x2130203u,0xD1E80421u));\n\tA(uvec4(0x1130103u,0xE79B0C43u,0x706060B0u,0x84220001u));\n\tA(uvec4(0x2A60C36Eu,0x84210423u,0xF8E87924u,0x84220001u));\n\tA(uvec4(0x59691964u,0x80210001u,0xD0E1u,0xA8C40001u));\n\tA(uvec4(0xFEEFEFAFu,0xDE4F24C7u,0xFFFFFBCAu,0xFB9C7F9Du));\n\tA(uvec4(0x3F3F3F7Fu,0xFFBD4DCDu,0xF4F4F8F1u,0xC9884925u));\n\tA(uvec4(0xE6D6EAEAu,0xD1AA4989u,0xD75B061Bu,0xD9C955CBu));\n\tA(uvec4(0xBA90A696u,0xD5C95589u,0xF6F2F2E7u,0xD1A824C5u));\n\tA(uvec4(0x1B9F1B0Eu,0xDDE955A9u,0xF3DDE6EDu,0xD9C955C9u));\n\tA(uvec4(0xFFFFFFFEu,0xD5C82421u,0x2130203u,0xD1A80023u));\n\tA(uvec4(0x1130103u,0xFBFF0821u,0xA090A0u,0x84000423u));\n\tA(uvec4(0xA6AD6Fu,0x80000423u,0xF0EFEFEFu,0x84210421u));\n\tA(uvec4(0x1F4E4357u,0x84220001u,0x2A0500u,0x80000001u));\n\tA(uvec4(0xC0C0F0F5u,0xDA510823u,0xFFFFFFFEu,0xF77B0001u));\n\tA(uvec4(0x3F7F3F7Fu,0xFB9CB129u,0x7FFFF0F0u,0xC98955EAu));\n\tA(uvec4(0xAAAA6FC6u,0xC5674D89u,0xE5F2F4E3u,0xD5A955CBu));\n\tA(uvec4(0xFFFFFFFFu,0xD18828C7u,0xF9F3F9F3u,0xD5A820A5u));\n\tA(uvec4(0xFF0F1B2Fu,0xD9C955C9u,0xFFF0E4E2u,0xD1A855A8u));\n\tA(uvec4(0xFFFFFFFFu,0xD9C87A09u,0x2130203u,0xD1870001u));\n\tA(uvec4(0x3030303u,0xCAB80422u,0x0u,0xFAD18000u));\n\tA(uvec4(0x0u,0xE2B58000u,0xAB8AA081u,0x84218003u));\n\tA(uvec4(0x8551113Du,0x80008023u,0x0u,0xD22F0000u));\n\tA(uvec4(0x200001u,0x80000001u,0xF8E8FFFFu,0xF77B0001u));\n\tA(uvec4(0x3F6F3F7Fu,0xFFBD8801u,0xFEFEFFFEu,0xC988A4A4u));\n\tA(uvec4(0x6B6BA7A6u,0xC567CD89u,0xAAA9A994u,0xD9C84169u));\n\tA(uvec4(0xAEBEFEFEu,0xD5A84147u,0xFCF2FCF2u,0xD5C824C5u));\n\tA(uvec4(0xFFEFFFFFu,0xD1883D05u,0xFFEFFFFFu,0x7A746433u));\n\tA(uvec4(0xAFEFBFFFu,0xD5A910C9u,0x2160203u,0xFF0E0001u));\n    //------------------------------------\n    C = col + texelFetch(iChannel0,SV_DispatchThreadID,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*********************************************************\n\tEnya (PVRTCII 2bpp) Decoder\nPVRTCII is also Block Compression and it's new enhance version PVRTCI,\n\nNote: License by 834144373, CC3.0-署名（BY）-非商业性使用（NC）-相同方式共享（SA）\n\nAbout knowledge:\n\tA short about PVRTCI/II Specification and data data layout\n[1]https://s3.amazonaws.com/pvr-sdk-live/sdk-documentation/PVRTC Specification and User Guide.pdf\n\n\tTexture Compression using Low-Frequency Signal Modulation by Simon Fenney\n[2]http://cdn2.imgtec.com/documentation/PVRTextureCompression.pdf \n\nNote: PVRTCII is \"PowerVR Imagination\" second version of texture compression.\n\t  And it's also a trade secret just like ATC.The company hasn't made it public,\n\t  and no public source code how to decode it.\n**********************************************************/\n/*\n  ----------------------->PVRTC II Data Format<---------------------------\n  MSB                                                                    LSB\n  |   63    |62 ColorA 48|  47  |46 ColorB 33|  32  |31                  0|\n  -----------------------------------------------------------------------\n  |Opacity 1|  R5-G5-B5  |hard 1|  R5-G5-B4  |Mode 1|  Modulation Data 32|\n*/\n//-----------------------------------------------\n/*\n\tSo we can easy get the 64bits into 2x32 block parts,like below:\n\n  ----->Block Part 1<------\n  MSB                   LSB\n  |31                    0|\n  ------------------------\n  |  Modulation Data 32  |\n\n  ----------------->Block Part 2<---------------------\n  MSB                                                LSB\n  |31                                                 0|\n  ----------------------------------------------------\n  |Opacity 1|  R5-G5-B5  |hard 1|  R5-G5-B4  | Mode 1 |\n*/\n#define R iResolution.xy\nconst ivec2 IMAGE_SIZE = ivec2(144,224);\nconst ivec2 BLOCK_SIZE = ivec2(8,4);\nstruct BlockData{\n\tuint block_part_1; //低位 (LSB)\n    uint block_part_2; //高位 (MSB)\n};\nstruct BlockInfo{\n    uint  Mod;    // Modulation\n    uvec3 ColorA; // High Frequency image\n    uvec3 ColorB; // Low  Frequency image\n    uint  Mode;   // Mode\n    uint  Hard;   // Hard Transition Flag\n    uint  Opacity;// Opacity Flag\n};\n/*\n\t The Block Size is WidthxHeight: 8x4\n*/\nBlockData GetBlock(ivec2 U,bool useScale){\n    BlockData blockdata;\n    ivec2 scaleSize = useScale ? BLOCK_SIZE : ivec2(1);\n    vec4 values = texelFetch(iChannel0,U/scaleSize,0);//x,y,z,w 16,16,16,16\n\tblockdata.block_part_1 = packSnorm2x16(values.st);\n    blockdata.block_part_2 = packSnorm2x16(values.pq);\n    return blockdata;\n}\n\nBlockInfo GetBlockInfo(ivec2 U,bool useBilnear){\n\tBlockData blockdata = GetBlock(U,useBilnear);\n\tBlockInfo blockinfo;\n    //U &= ivec2(7,3);\n    //int pixeID_local = U.y * 8 + U.x;\n    blockinfo.Mod      = blockdata.block_part_1;\n    \n    blockinfo.Mode     = blockdata.block_part_2 & 1u;\n    \n    blockinfo.ColorB.b = (blockdata.block_part_2 & 30u ) | ((blockdata.block_part_2 >> 4)&1u);\n    blockinfo.ColorB.g = (blockdata.block_part_2 >> 5 ) & 31u;\n    blockinfo.ColorB.r = (blockdata.block_part_2 >> 10) & 31u;\n    \n    blockinfo.Hard     = (blockdata.block_part_2 >> 15) & 1u;\n    \n    blockinfo.ColorA.b = (blockdata.block_part_2 >> 16) & 31u;\n    blockinfo.ColorA.g = (blockdata.block_part_2 >> 21) & 31u;\n    blockinfo.ColorA.r = (blockdata.block_part_2 >> 26) & 31u;\n\t/*\n\t\tNote: we don't need Opacity now for direct decode RGB situation   \n    */\n    //blockinfo.Opacity  = (blockdata.block_part_2 >> 31) & 1u;\n    //we make ColorA-555 and ColorB-554 to RGB-888\n    blockinfo.ColorA = (blockinfo.ColorA << 3) | (blockinfo.ColorA>>2);\n    blockinfo.ColorB = (blockinfo.ColorB << 3);\n    return blockinfo;\n}\n/*\n  These are P,Q,R,S which represent as adjacent Block.\n\tR   S\n\n\tP   Q\n*/\n/*\n\t___________________________________________________________________________________________\n   |Modulation Flag Value | Hard Transition Flag |             Value Mode\t\t\t\t\t\t|\n   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t |\n   |\t      0                       0                  Standard Bilinear, 1bpp modulation\t\t|\n   |\t      1 \t\t\t\t      0 \t         Standard Bilinear, interpolated modulation\t|\n   |\t      0 \t\t\t          1 \t\t      Non-interpolated, 1bpp modulation\t\t\t|\n   |\t      1 \t\t\t          1 \t\t      Non-interpolated, interpolated modulation\t|\n   |__________________________________________________________________________________________|\n*/\n\n\n\nconst float[4] ReplaceValues = float[4]( 0., 3., 5., 8. );\n#define GetModValue(U) int(texelFetch(iChannel1,U,0).a)\n#define GetInterpolateValue(U)  ReplaceValues[GetModValue(U)]\nvec4 DecodePVRTCII_2bpp(ivec2 U){\n    vec4 Color = vec4(0.);\n    \n    ivec2 regionCoord = U & (BLOCK_SIZE - 1); \n    int regionpixelID = regionCoord.x + regionCoord.y * BLOCK_SIZE.x;\n    \n    //----------------------------------------------\n    /*\n\t\t__________________________________________________\n       |Custom Modulation Mode |    Mod Situation         | \n       |\t\t\t\t\t\t\t\t\t\t\t\t   |\n       |\t      0                   1bpp Only            | \n       |\t      1 \t\t\t  H and V Only interpolated|\t       \n       |\t      2\t\t\t      H-Only interpolated\t  |\t   \n       |\t      3 \t\t\t  V-Only interpolated\t  | \t\t   \n       |_________________________________________________|\n\n\t*/\n    BlockInfo pixelInfo = GetBlockInfo(U,true);\n    uint ChessboardPixelMod = 0u; \n    int ModulationMode = 0;\n    //Do interpolate for Modulation\n    if(pixelInfo.Mode == 1u){\n        //init at first H and V Only interpolated\n        ModulationMode = 1;\n        //Select H or V Only interpolated\n        if((pixelInfo.Mod & 1u) == 1u){\n            if((pixelInfo.Mod & (0x1u << 20)) >= 1u){\n            \t//V-Only interpolated\n                ModulationMode = 3;\n            }\n            else{\n            \t//H-Only interpolated\n                ModulationMode = 2;\n            }\n            \n            /*\n\t\t\t\tCreate an extra bit for the centre pixel so that it looks like\n\t\t\t\twe have 2 actual bits for this texel. It makes later coding much easier.\n\t\t\t*/\n            if((pixelInfo.Mod & (0x1u << 21)) >= 1u){\n                // set it to produce code for 1.0\n            \tpixelInfo.Mod |= (0x1u << 21);\n            }\n            else{\n                // clear it to produce 0.0 code\n            \tpixelInfo.Mod &= ~(0x1u << 20);\n            }\n    \t}\n\n        if ((pixelInfo.Mod & 0x2u) >= 1u){\n            pixelInfo.Mod |=   0x1u; /*set it*/\n        }\n        else\n        {\n            pixelInfo.Mod = pixelInfo.Mod & (~ 0x1u); /*clear it*/\n        }\n        //这儿我们采用 \"棋盘法\" 存储Modulation值,(Here we use \"Chessboard method\" to get value)\n        //The mod values layout like this:\n        /*\n          x --> 0\t1\t2\t3\t4\t5\t6\t7\n         -------------------------------------   \tNote: 0-15 is ChessboardID,the * is ignore pixel.\n          y 0|\t0\t*\t1\t*\t2\t*\t3\t*\n             |   \n            1|\t*\t4\t*\t5\t*\t6\t*\t7\n             |\n            2|\t8\t*\t9\t*\t10\t*\t11\t*\n             |\n            3|\t*\t12\t*\t13\t*\t14\t*\t15\n\n\t\t*/\n        if (((regionCoord.x+regionCoord.y) & 1) == 0){\n            int ChessboardID = \n                (BLOCK_SIZE.x>>1) * regionCoord.y + ((regionCoord.x - (regionCoord.y&1))>>1);\n        \tChessboardPixelMod = (pixelInfo.Mod >> (ChessboardID * 2)) & 0x3u;\n        }\n        \n\t}\n    else{\n    \tChessboardPixelMod = ((pixelInfo.Mod >> regionpixelID) & 0x1u)*0x3u;\n    }\n    //Store interpolated modulation Value\n    Color.a = float(ChessboardPixelMod);\n    \n    //-----------------------------------------------\n    if(iFrame == 0){\n        if(U.x < IMAGE_SIZE.x/BLOCK_SIZE.x){\n    \t\tBlockInfo P = GetBlockInfo(U,false);\n    \t\tColor.rgb = vec3(P.ColorA);\n        }\n        else{\n        \tBlockInfo P = GetBlockInfo(U - ivec2(IMAGE_SIZE.x/BLOCK_SIZE.x,0),false);\n    \t\tColor.rgb = vec3(P.ColorB);\n        }\n\t}\n    else if(iFrame == 1){\n\t\tif(U.x >= IMAGE_SIZE.x)\n            return Color;\n        vec2 useScale = iFrame == 1 ? vec2(BLOCK_SIZE) : vec2(1.);\n    \tvec3 colA = texture(iChannel1,(vec2(U)+0.5)/R/useScale).rgb;\n\t\tvec3 colB = texture(iChannel1,(vec2(U+ivec2(IMAGE_SIZE.x,0))+0.5)/R/useScale).rgb;\n        //Decode\n\t\tint modValues = 0;\n        float interpolateValue = 0.;\n        //Standard Bilinear, 1bpp modulation\n        if(pixelInfo.Mode == 0u && pixelInfo.Hard == 0u){\n            interpolateValue = GetInterpolateValue(U);\n            Color.rgb = mix(colB,colA,interpolateValue/8.);\n        }\n        //Standard Bilinear, interpolated modulation\n        else if(pixelInfo.Mode == 1u && pixelInfo.Hard == 0u){\n\t\t\tconst ivec2 OFFSET = ivec2(1,0); \n            //1bpp Only\n            if(((regionCoord.x + regionCoord.y) & 1) == 0){\n            \tinterpolateValue = GetInterpolateValue(U);\n                Color.rgb = mix(colB,colA,interpolateValue/8.);\n            }\n            //H and V Only interpolated\n            else if(ModulationMode == 1){\n            \tinterpolateValue = (\n                      GetInterpolateValue(U+OFFSET.xy) \n                    + GetInterpolateValue(U+OFFSET.yx)\n                    + GetInterpolateValue(U-OFFSET.xy)\n                    + GetInterpolateValue(U-OFFSET.yx)\n                    + 2.\n            \t)/4.;\n           \t\tColor.rgb = mix(colB,colA,interpolateValue/8.);\n\t\t\t}\n            //H-Only interpolated\n            else if(ModulationMode == 2){\n\t\t\t\tinterpolateValue = (\n                      GetInterpolateValue(U+OFFSET.xy) \n                    + GetInterpolateValue(U-OFFSET.xy)\n                    + 1.\n            \t)/2.;\n           \t\tColor.rgb = mix(colB,colA,interpolateValue/8.);\n\t\t\t}\n            //V-Only interpolated\n            else{//ModulationMode == 3\n            \tinterpolateValue = (\n                    + GetInterpolateValue(U+OFFSET.yx)\n                    + GetInterpolateValue(U-OFFSET.yx)\n                    + 1.\n            \t)/2.;\n                Color.rgb = mix(colB,colA,interpolateValue/8.);\n            }\n            \n\t\t}\n        //Non-interpolated, 1bpp modulation\t\n        else if(pixelInfo.Mode == 0u && pixelInfo.Hard == 1u){\n            interpolateValue = GetInterpolateValue(U);\n            Color.rgb = mix(vec3(pixelInfo.ColorB),vec3(pixelInfo.ColorA),interpolateValue/8.);\n        }\n        //Non-interpolated, interpolated modulation\n        else { //if(pixelInfo.Mode == 0u && pixelInfo.Hard == 0u){\n            const ivec2 OFFSET = ivec2(1,0); \n            //1bpp Only\n            if(((regionCoord.x + regionCoord.y) & 1) == 0){\n            \tinterpolateValue = GetInterpolateValue(U);\n            \tColor.rgb = mix(vec3(pixelInfo.ColorB),vec3(pixelInfo.ColorA),interpolateValue/8.);\n            }\n            //H and V Only interpolated\n            else if(ModulationMode == 1){\n            \tinterpolateValue = (\n                      GetInterpolateValue(U+OFFSET.xy) \n                    + GetInterpolateValue(U+OFFSET.yx)\n                    + GetInterpolateValue(U-OFFSET.xy)\n                    + GetInterpolateValue(U-OFFSET.yx)\n                    + 2.\n            \t)/4.;\n            \tColor.rgb = mix(vec3(pixelInfo.ColorB),vec3(pixelInfo.ColorA),interpolateValue/8.);\n            }\n            //H-Only interpolated\n            else if(ModulationMode == 2){\n\t\t\t\tinterpolateValue = (\n                      GetInterpolateValue(U+OFFSET.xy) \n                    + GetInterpolateValue(U-OFFSET.xy)\n                    + 1.\n            \t)/2.;\n            \tColor.rgb = mix(vec3(pixelInfo.ColorB),vec3(pixelInfo.ColorA),interpolateValue/8.);\n            }\n            //V-Only interpolated\n            else{//ModulationMode == 3\n            \tinterpolateValue = (\n                    + GetInterpolateValue(U+OFFSET.yx)\n                    + GetInterpolateValue(U-OFFSET.yx)\n                    + 1.\n            \t)/2.;\n            \tColor.rgb = mix(vec3(pixelInfo.ColorB),vec3(pixelInfo.ColorA),interpolateValue/8.);\n            }\n        }\n        Color.rgb /= 256.;\n    }\n    else{\n    \tColor.rgb = texture(iChannel1,(vec2(U)+0.5)/R).rgb;\n    }\n\treturn Color;\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    ivec2 iU = ivec2(floor(U - 0.5));\n    if(any(greaterThan (iU,ivec2(143.,223)))){\n    \tC = vec4(0.4);\n        return;\n    }\n    vec4 col = DecodePVRTCII_2bpp(iU);\n    C = col;\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}