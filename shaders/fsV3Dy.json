{
    "Shader": {
        "info": {
            "date": "1632131261",
            "description": "Switch CubeA:#def to test Britney vs White noise, etc \n\nisolate tiles following one given signal values in 8x8 tiles, 4 channels, 4 faces of a CubeMap.\nuse MIPmap to count the bits in this.\n( Coding-decoding locations in CubeMaps is always a nightmare )",
            "flags": 0,
            "hasliked": 0,
            "id": "fsV3Dy",
            "likes": 11,
            "name": "instant histogramming",
            "published": 3,
            "tags": [
                "histogram",
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 537
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    int  v = int( 1024.*(U.x-.5)/R.x ),   // histogram value stored in:\n         f = (v/256 + 5 ) %6,             //    face \n         c = (v%256)/64,                  //    color field\n         t =  v%64,                       //    tile id\n         x = t%8, y = t/8;                //    tile coords\n    if (f>2) x = 7-x;\n    vec3 V = vec3( 2.* (vec2(x,7-y)+.5)/8. - 1., // location in cubeMap\n                   f > 2 ? -1 : 1 \n                );\n    if (f==0) V.y = -V.y;\n    if (f==3) V.x = -V.x;\n    f = f%3; if (f==2) V.z=-V.z;\n    V = f==0 ? V.xzy : f==2 ? V.zyx : V; \n    O = vec4( U.y/R.y/64. < textureLod(iChannel0, V ,7.)[c] ) ;\n    \n    U = (2.*U-R)/R;if (U.x>0.&&U.y>0.) U.y=1.-U.y, O += texture(iChannel0,vec3(2.*U-1.,-1));\n // O = texture(iChannel0, vec3(2.*U/R - 1.,1) ) / 1023.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "   #define T(U)  texture(iChannel0, (U)/128.).r   // Britney\n// #define T(U)  texture(iChannel1, (U+iMouse.xy/R)/256.).r // white noise with interpolation offset\n// #define T(U)  texture(iChannel2, (U)/1024.).r  // Blue noise\n\nvoid mainCubemap( out vec4 O, vec2 U,  vec3 C, vec3 D )\n{\n    ivec2 I = ivec2(U)/128;                                      // tile bi-Id\n    vec3 A = abs(D);\n    int  f = A.x > A.y ? A.x > A.z ? 0 : 2 : A.y > A.z ? 1 : 2,  // faceId\n         s = I.x + 8*I.y,                                        // tile Id\n         i = int(1023.* T( mod(U,128.) ) );                      // discretize signal\n    if ( D[f] < 0. ) f += 3;                                     // full face Id.\n    O = f<4 ? vec4( equal( ivec4(i), s + 64*ivec4(0,1,2,3) + 256*f )) // isolate one value within 256                                \n            : vec4(T(U/R*128.),0,0,0);                           //  2 useless : free to show the image ! \n // O = .5*vec4(  ( s + 64*ivec4(0,1,2,3) + 256*f) );    // cubeMap calibration\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "#define R iResolution.xy",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}