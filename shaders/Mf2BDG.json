{
    "Shader": {
        "info": {
            "date": "1725654620",
            "description": "parameterization of dodecahedron faces. id, polar coordinates (here, used for displacement & colors).",
            "flags": 0,
            "hasliked": 0,
            "id": "Mf2BDG",
            "likes": 31,
            "name": "penta sphere 4",
            "published": 3,
            "tags": [
                "3d",
                "spheretracing",
                "dodecahedron",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "// from https://shadertoy.com/view/lc2BDG\n// from colored faces https://shadertoy.com/view/lcSfWG\n// from base https://shadertoy.com/view/XfSfDy\n\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))               // rotation \n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n        \nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9., a,f,d,l,c, s=.628, w=radians(116.565);\n    vec3  R = iResolution, \n          A = vec3( sin(w),0, cos(w) ),                   // North hemisphere axis (1st pie)\n          B = vec3( sin(w)*cos(s),sin(w)*sin(s), -cos(w) ), // South hemisphere axis (1st pie)\n          D = normalize(vec3(U+U, -8.*R.y) - R ),          // ray direction\n          p = vec3(0,0,15), q,q0,                             // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5 :           // comment for no mouse cam\n                 vec3( .15,.07,0) * cos(.3*iTime + vec3(0,11,0)); \n          \n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.01 )         // --- march scene\n        q = p,\n        q.yz *= rot(-6.*M.y),                              // rotations\n        q.xz *= rot(-6.*M.x-1.57),\n        q0=q,\n        a = atan(q.y,q.x),                                 // 5-pie symmetry\n        f =  mod( a+s,s+s ) - s,\n        q.xy = length(q.xy)*cos( f +vec2(0,11) ),          // fold to 1st pie\n        \n        c = sign(q.z), f = l = length(q.xy),               // dist to pole\n        d = length(q-A), d<l ? l = d, c = -round(1.+fract(a/6.28)*5.) : c, // dist to North hemisphere axes\n        d = min( length(q-B),length(q-B*vec3(1,-1,1)) ),   // dist to South hemisphere axes // why 2 lengthes ? // length(p-A)) \n        d<l ? l = d, c = round(1.+fract((a+5.*s)/6.28)*5.) : c,  // â†’ c = face id, l = min dist to axis\n\n        c > 0. ? q.xy *= rot(s*sign(q.y)) :U,              // polar parameterisation of faces\n        f == l ? q.xy = q0.xy *sign(c)\n               : q.xz *= rot(w*sign(c)),\n        a = atan(q.y,q.x),       \n \n        t = length(q)- 1.2 + .2*cos(4.*l) +.03*cos(20.*a), // face displacement\n        \n        p += .5*t*D;                                       // step forward = dist to obj   \n       \n   O *= O * 1.2;                                           // color scheme   \n           \n   O *= hue (a/6.3);                                       // face coloring\n// O = vec4(abs(c)/5., c>0, c<0, 0);                       // debug: faceId \n   O = mix( O, f==l ? vec4(0) : hue( c/5. ), smoothstep(1.,-1.,(l-.2)/fwidth(l)) ); // color discs\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}