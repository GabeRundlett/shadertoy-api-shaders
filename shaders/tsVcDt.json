{
    "Shader": {
        "info": {
            "date": "1604089953",
            "description": "POV: It is a Friday (the day before Halloween) and you are struck inside the last period of school and have literally nothing else to do because you are done. Was gonna enable shading but the school computer couldn't compile it in the required 2 seconds.",
            "flags": 48,
            "hasliked": 0,
            "id": "tsVcDt",
            "likes": 5,
            "name": "Spooky Nebula",
            "published": 3,
            "tags": [
                "raymarch",
                "dither",
                "volumetric",
                "volumetric",
                "raymarcher",
                "nebula",
                "halloween",
                "spooky",
                "slow",
                "multipass",
                "nonrealtime"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "// ^^^ Switch Between Buffer A, B, and C ^^^\n// Buffer A is Rendering and Settings\n// Buffer B is for Exporting a 32-Bit Float OpenEXR using the Button on the Bottom of the Editor\n\n// Zi7ar21's Spooky Nebula --- October 30th, 2020\n// Happy Halloween!\n\n// I Deem You Allowed to Use My Code even Commercially and Even Modify it as Long as:\n// You keep this disclaimer.\n// You do not modify the terms\n\n// You do not have to keep my credits, however I kindly ask you to leave them here in the source.\n\n// If this Code is Being Reused Entirely,\n// Then the Original and Possibly Updated Version Can be Found Here:\n// https://www.shadertoy.com/view/tsVcDt\n// Fork of \"Starry Nebula\" by Zi7ar21. https://www.shadertoy.com/view/tsGyRm\n// October 10th, 2020\n\n// Learn the Basics of Raymarching Like I Did Here:\n// https://youtu.be/PGtv-dBi2wE\n\n// LoicVDB's Improvements\n// Fork of \"cscsdc\" by loicvdb. https://shadertoy.com/view/wlSfRt --- 2020-09-08 19:37:55\n// Fork of \"dsdfqdf\" by loicvdb. https://www.shadertoy.com/view/tdGyRm --- 2020-10-11\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ^^^ Switch Between Buffer A, B, and C ^^^\n// This is for Rendering and Settings\n\n// ##### COMMON VALUES #####\n\n// Change these Parameters to Your Liking!\n// Maximum Number of Marches,\n// You want it to limit the raymarcher before the max distance parameter or it will look bad.\n#define MAX_MARCHES 64\n\n// Redundant for this idk if the max marches are large and you see ugly stuff then increase this\n#define MAX_DISTANCE 6.0\n\n// fBm Number of Octaves (Detail)\n#define NUM_OCTAVES 12\n\n// Size of Steps, smaller means more sampling over depth but also means more computation.\n// Increase max marches if the scene goes invisible.\n#define STEP_SIZE 0.1\n\n// Camera's FOV\n#define FOV 2.0\n\n// Uncomment to enable rotation matrix for rotating camera, currently too slow\n//#define ROTATION_MATRIX\n\n// If you march less rays, the nebula will appear darker. Bump this up to make it brighter again.\n#define DENSITY 0.25\n\n// Tiles, more means easier on the Hardware\n#if HW_PERFORMANCE==0\n#define TILES 15\n#else\n#define TILES 5 // Set to 1 if you have a computer that can handle it so it will render faster\n#endif          // (most shouldn't time out, except for like Intel HD Graphics)\n// So kindly made by LoicVDB uwu\n\n// Amount of distortion to apply\n#define DISTORT_AMOUNT 2.5\n\n// Oof ugly mess below watch out lol\n\nbool isKeyPressed(int KEY){\n    return texelFetch( iChannel3, ivec2(KEY,0), 0 ).x > 0.5;\n}\n\n// ##### NOISE #####\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n// 2D Noise for Dithering\nfloat hash13(vec3 p3){\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// fBm Noise\nfloat fbm(vec3 x){\n    float v = 0.0;\n    float a = 0.5;\n    for (int i = 0; i < NUM_OCTAVES; ++i){\n        v += a * noise(x);\n        x = x * 2.0;\n        a *= 0.5;\n    }\n    return v;\n}\n\n// Colors\nvec3 rgb2hsv(vec3 c){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Nebula Noise\nvec3 nebulanoise(vec3 raypos){\n    float mainnoise = fbm(raypos+(fbm(raypos+vec3(1.0, 0.0, 0.0))*DISTORT_AMOUNT));\n    float subnoise = fbm(raypos+vec3(1.0, 0.0, 0.0));\n    float density = clamp(((mainnoise*12.0)-(subnoise*8.0))-pow(distance(vec3(0.0),raypos),2.0), 0.0, 1.0);\n    vec3 rgb = hsv2rgb(rgb2hsv(vec3(density))+vec3((mainnoise/1.35)+0.6, 0.85, 0.0));\n    return rgb;\n}\n\n// ##### RAYMARCHING #####\n\n/*vec3 directLight(vec3 raypos){\n    vec3 LightColor = vec3(1.0);\n    vec3 LightDirection = normalize(vec3(0.5));\n    float distorigin=0.0;\n    vec3 density=vec3(0.0);\n    vec3 raydirmod = LightDirection;\n    vec3 attenuation = vec3(1.0);\n    for(int i=0; i<4; i++) {\n        raypos = raypos + raydirmod;\n        density = nebulanoise(raypos)*DENSITY*2.0;\n        vec3 absorbance = exp(-hsv2rgb(rgb2hsv(density)+vec3(0.5, 0.0, 0.0)));\n        attenuation *= absorbance;\n    }\n    return LightColor*attenuation;\n}*/\n\n// Compute/March the Ray\nvec3 raymarch(vec3 camerapos, vec3 raydir, vec2 coord){\n    float distorigin=0.0;\n    vec3 densityadd=vec3(0.0);\n    vec3 density=vec3(0.0);\n    vec3 raypos = camerapos;\n    vec3 raydirmod = (raydir*(hash13(vec3(coord, iFrame))+1.0))*STEP_SIZE;\n    vec3 outCol = vec3(0.);\n    vec3 attenuation = vec3(1.0);\n    for(int i=0; i<MAX_MARCHES; i++) {\n        raypos = raypos + raydirmod;\n        densityadd = nebulanoise(raypos)*DENSITY;\n        density = vec3(density+densityadd);\n        vec3 absorbance = exp(-density*STEP_SIZE);\n        vec3 transmittance = 1.-absorbance;\n        outCol += attenuation * transmittance; //* directLight(raypos); // For now we'll just consider that the\n        attenuation *= absorbance;                                    // volume recieves light in all cases\n        distorigin = raypos.z-camerapos.z;\n        if(distorigin>MAX_DISTANCE) break;\n    }\n    return outCol+vec3(texture(iChannel1, coord/iResolution.xy))*attenuation;\n}\n\n// ##### RENDERING #####\n\n// Render the Image\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Camera Orientation\n    //vec3 camerapos = vec3((iMouse.x/iResolution.x)-0.5, (iMouse.y/iResolution.y)-0.5, -3.0);\n    vec3 camerapos = vec3(0.0, 0.0, -4.0);\n    #ifdef ROTATION_MATRIX\n        // Torture courtesey of Michael0884, Can someone make the Z axis \"up\" like in Blender\n        float xrot = 0.0;\n        float yrot = 0.0;\n        float zrot = 0.0;\n        vec3 xdir = vec3(cos(yrot)*cos(zrot),-cos(yrot)*sin(zrot),sin(yrot));\n        vec3 ydir = vec3(cos(xrot)*sin(zrot)+sin(xrot)*sin(yrot)*cos(zrot),\n                         cos(xrot)*cos(zrot)-sin(xrot)*sin(yrot)*sin(zrot),-sin(xrot)*cos(yrot));\n        vec3 zdir = vec3(sin(xrot)*sin(zrot)-cos(xrot)*sin(yrot)*cos(zrot),\n                         sin(xrot)*cos(zrot)+cos(xrot)*sin(yrot)*sin(zrot),cos(xrot)*cos(yrot));\n    #endif\n    #ifndef ROTATION_MATRIX\n        vec3 xdir = vec3(1.0,0.0,0.0);\n        vec3 ydir = vec3(0.0,1.0,0.0);\n        vec3 zdir = vec3(0.0,0.0,1.0);\n    #endif\n    \n    // LoicVDB: I store the number of samples in the alpha channel\n    // LoicVDB: take the previous color and sample count (black and 0 if on first frame)\n    vec4 oldFragColor = vec4(0.);\n    if(iFrame != 0) oldFragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    // LoicVDB:I put it in the fragColor var because I want to keep it even if it's not in a tile\n    fragColor = oldFragColor;\n    \n    // LoicVDB's Hyper Epic Tiles Function\n    int index = int(fragCoord.x/iResolution.x*float(TILES))\n              + int(fragCoord.y/iResolution.y*float(TILES))*TILES;\n    if(iFrame-(TILES*TILES*(iFrame/(TILES*TILES))) != index) return;\n\n    // Undistorted Normalized Pixel Coordinates (From 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.x;\n    vec2 uvd = fragCoord/iResolution.xy;\n    vec3 raydir = normalize(FOV*(uv.x*xdir + uv.y*ydir) + zdir);\n    vec3 raymarched = raymarch(camerapos, raydir, vec2(fragCoord));\n\n    // LoicVDB: add the color and increase the sample count\n    fragColor += vec4(raymarched, 1.0);\n    if(isKeyPressed(32)){\n        fragColor.rgba = vec4(0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ^^^ Switch Between Buffer A, B, and C ^^^\n// This is for Exporting a 32-Bit Float OpenEXR using the Button on the Bottom of the Editor\n\nvec3 acesFilm(const vec3 x){\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // LoicVDB: take the color from the A buffer\n    vec4 texel = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    // LoicVDB: divide it by the sample count (the alpha channel)\n    vec3 color = (texel.a == 0. ? vec3(0.) : texel.rgb / texel.a);\n    \n    // Output to screen\n    fragColor = vec4(acesFilm(color), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Star Background\n// This is to render stars\n\n// Blackbody Coloration from http://glslsandbox.com/e#40525.0\nvec3 blackbody(float Temp){\n    vec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n    col.y = 100.04 * log(Temp) - 623.6;\n    if (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n        col.z = 194.18 * log(Temp) - 1448.6;\n        col = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n        return col;\n}\n\n// Noise\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    fragColor = vec4((vec3(clamp(hash12(fragCoord)-0.95, 0.0, 1.0))*blackbody((hash12(fragCoord)-0.99)*1000000.0))*(hash12(fragCoord*2.0)*8.0), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}