{
    "Shader": {
        "info": {
            "date": "1415186636",
            "description": "Just a little experiment, to try mimic one of my LED watch.\n\nNote: The two bars on the left represent hours, the two on the right minutes. LEDs in the first bar count for 6, LEDs in the third bar count for 10; LEDs in the 2 other bars count for 1. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "MdjXRt",
            "likes": 2,
            "name": "LED Watch [Barcode]",
            "published": 3,
            "tags": [
                "led",
                "watch"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "// LED watch: the two bars on the left represent hours, the two on the\n// right minutes. LEDs in the first bar count for 6, LEDs in the third\n// bar count for 10; LEDs in the 2 other bars count for 1.\n\n#define M_PI 3.1415926535897932384626433832795\n#define VERTICAL\n#define HSV2RGB_FAST\n\nfloat boxDist (in vec2 p, in vec2 b) {\n\treturn length (max (abs (p) - b, 0.0));\n}\n\nfloat boxDist (in vec2 p, in vec3 b) {\n\treturn length (max (abs (p) - b.xy + b.z, 0.0)) - b.z;\n}\n\nvec3 hsv2rgb (in vec3 hsv) {\n\t#ifdef HSV2RGB_SAFE\n\thsv.yz = clamp (hsv.yz, 0.0, 1.0);\n\t#endif\n\t#ifdef HSV2RGB_FAST\n\treturn hsv.z * (1.0 + 0.5 * hsv.y * (cos (2.0 * M_PI * (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0))) - 1.0));\n\t#else\n\treturn hsv.z * (1.0 + hsv.y * clamp (abs (fract (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) - 2.0, -1.0, 0.0));\n\t#endif\n}\n\nfloat rand (in vec2 seed) {\n\treturn fract (sin (dot (seed, vec2 (12.9898, 78.233))) * 137.5453);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Get the fragment's position in the watch space\n\t#ifndef VERTICAL\n\tvec2 frag = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.x;\n\t#else\n\tvec2 frag = (2.0 * fragCoord.yx - iResolution.yx) / iResolution.y;\n\t#endif\n\tfrag *= 1.0 - vec2 (0.02, 0.04) * cos (frag.yx * 2.0) * max (0.0, 50.0 * sin (iTime * M_PI * 2.0 / 5.0) - 49.0);\n\t#ifndef VERTICAL\n\tfrag *= 8.0;\n\t#else\n\tfrag *= vec2 (6.0, -6.0);\n\t#endif\n\n\t// Define the panel and the border\n\tvec3 panelSize = vec3 (5.0, 2.2, 1.0);\n\tfloat panelDist = -boxDist (frag, panelSize);\n\tfloat borderDist = boxDist (frag, panelSize + 0.1);\n\n\t// Define the LEDs\n\tvec2 led = frag;\n\tled.x -= 0.5;\n\tvec2 ledId = floor (led);\n\tfloat random = rand (ledId);\n\tfloat ledThresholdBar2 = step (-1.5, ledId.y);\n\tfloat ledThresholdBar4 = step (0.5, ledId.y);\n\tfloat ledTimeModulo = 10.0 - 4.0 * ledThresholdBar2 - 2.0 * ledThresholdBar4;\n\tfloat ledMode = max (0.0, cos (iTime * 0.5));\n\tfloat ledIntensity = mix (0.8 * step (ledId.x + 6.0, mod (iDate.w / (60.0 + 540.0 * ledThresholdBar2 + 3000.0 * step (-0.5, ledId.y) + 18000.0 * ledThresholdBar4), ledTimeModulo)), 0.5 + 0.5 * cos (random + random * iTime + iTime), ledMode);\n\tfloat ledDist = boxDist (fract (led) - 0.5, vec2 (0.2, 0.03));\n\n\t// Create everything (panel, casing, small indicator and LEDs)\n\tvec3 color = vec3 (0.2, 0.2, 0.2) * (0.7 + 0.3 * cos (frag.x * M_PI / panelSize.x)) * smoothstep (0.1, 0.15, panelDist) * smoothstep (0.2, 0.25, abs (fract (frag.y) - 0.5));\n\tcolor += (0.4 + 0.2 * cos (frag.x + frag.y + iTime)) * smoothstep (0.1, 0.0, max (borderDist, panelDist));\n\tcolor += 0.3 * smoothstep (0.05, 0.0, boxDist (frag + vec2 (0.0, 1.9), vec3 (0.04, 0.1, 0.04)));\n\tcolor += mix (vec3 (0.1) * smoothstep (0.025, 0.0, ledDist), hsv2rgb (vec3 (random + iTime * 0.1, ledMode, 1.0)) * smoothstep (0.25, 0.0, ledDist), ledIntensity) * step (-4.5, frag.x) * step (5.5 - ledTimeModulo, -frag.x) * step (-2.0, -abs (frag.y));\n\n\t// Get the fragment's position in the background tile space\n\t#ifndef VERTICAL\n\tfrag = 15.0 * fragCoord.xy / iResolution.x;\n\t#else\n\tfrag = 15.0 * fragCoord.yx / iResolution.y;\n\t#endif\n\tfrag -= vec2 (iTime, sin (iTime));\n\n\t// Create the background tiles\n\trandom = rand (floor (frag));\n\tcolor += hsv2rgb (vec3 (random, 1.0, 1.0)) * smoothstep (0.6, 0.0, length (fract (frag) - 0.5)) * (0.2 + 0.2 * cos (random + random * iTime + iTime)) * smoothstep (0.0, 0.2, borderDist);\n\n\t// Set the fragment color\n\tfragColor = vec4 (color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}