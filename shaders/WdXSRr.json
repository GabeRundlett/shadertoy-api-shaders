{
    "Shader": {
        "info": {
            "date": "1550399306",
            "description": "Wanted to see if I could use a live feed from my webcam to create cells in GoL.\nA single edge detection matrix wasn't quite cutting it, so I had to upgrade to Sobel, which seems to work well.\nNeeds good light and contrast to work.",
            "flags": 34,
            "hasliked": 0,
            "id": "WdXSRr",
            "likes": 24,
            "name": "ConwayCam",
            "published": 3,
            "tags": [
                "sobel",
                "webcam",
                "gameoflife",
                "convolutionkernel",
                "celluarautomata"
            ],
            "usePreview": 0,
            "username": "Blokatt",
            "viewed": 1947
        },
        "renderpass": [
            {
                "code": "/*\n    ConwayCam by @blokatt\n    17/02/19\n\n\tWEBCAM REQUIRED!\n\tFull resolution can be enabled in the 'Common' tab.\n\n\t○○○○○\n\t○○•○○ \n\t○○○•○\n\t○•••○\n\t○○○○○\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv *= RESOLUTION;\n\tfragColor = texture(iChannel0, uv + .5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define RESOLUTION 0.5\n#define SOBEL_THICKNESS 0.75\n\nfloat luma(vec3 c){\n\treturn 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Cellular automata\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;   \n    \n    float alive = (round(texture(iChannel0, uv).r));     \n    vec2 derivative = vec2(dFdx(uv.x), dFdy(uv.y));    \n    vec4 pixel = vec4(derivative.x, derivative.y, 0., -derivative.y);\n    \n    float neighbours = round(\n        texture(iChannel0, uv - pixel.xz).r +\n        texture(iChannel0, uv - pixel.xy).r +\n        texture(iChannel0, uv - pixel.zy).r +\n        texture(iChannel0, uv + pixel.xw).r +\n        texture(iChannel0, uv + pixel.xz).r +\n        texture(iChannel0, uv + pixel.xy).r +\n        texture(iChannel0, uv + pixel.zy).r +       \n        texture(iChannel0, uv - pixel.xw).r\n    );    \n    \n    alive = min(1., float(!bool(alive) && (abs(3. - neighbours) < .001)) + (alive * float(neighbours >= 2. && neighbours <= 3.)));   \n    fragColor = vec4(vec3(alive), 1.0); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Blur + image source\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy - (1. - RESOLUTION) / 2.) * (1. / RESOLUTION);\n    vec2 derivative = vec2(dFdx(uv.x), dFdy(uv.y));    \n    vec4 pixel = vec4(derivative.x, derivative.y, 0., -derivative.y);\n    \n\tfragColor = (\n        texture(iChannel0, uv - pixel.xz) * 2. +\n        texture(iChannel0, uv - pixel.xy) * 1.  +\n        texture(iChannel0, uv - pixel.zy) * 2. +\n        texture(iChannel0, uv + pixel.xw) * 1.  +\n        texture(iChannel0, uv + pixel.xz) * 2. +\n        texture(iChannel0, uv + pixel.xy) * 1.  +\n        texture(iChannel0, uv + pixel.zy) * 2. +       \n        texture(iChannel0, uv - pixel.xw) * 1.  +\n        texture(iChannel0, uv) * 4.) /  16.;     \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Sobel\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;       \n    vec2 derivative = vec2(dFdx(uv.x), dFdy(uv.y)) * SOBEL_THICKNESS;    \n    vec4 pixel = vec4(derivative.x, derivative.y, 0., -derivative.y);\n    \n    vec4 sumVertical =\n        texture(iChannel1, uv - pixel.xz) * -2. +\n        texture(iChannel1, uv - pixel.xy) * -1.  +\n        texture(iChannel1, uv - pixel.zy) * 0. +\n        texture(iChannel1, uv + pixel.xw) * 1.  +\n        texture(iChannel1, uv + pixel.xz) * 2. +\n        texture(iChannel1, uv + pixel.xy) * 1.  +\n        texture(iChannel1, uv + pixel.zy) * 0. +       \n        texture(iChannel1, uv - pixel.xw) * -1.  +\n        texture(iChannel1, uv) * 0.;\n    \n    vec4 sumHorizontal =\n        texture(iChannel1, uv - pixel.xz) * 0. +\n        texture(iChannel1, uv - pixel.xy) * -1.  +\n        texture(iChannel1, uv - pixel.zy) * -2. +\n        texture(iChannel1, uv + pixel.xw) * -1.  +\n        texture(iChannel1, uv + pixel.xz) * 0. +\n        texture(iChannel1, uv + pixel.xy) * 1.  +\n        texture(iChannel1, uv + pixel.zy) * 2. +       \n        texture(iChannel1, uv - pixel.xw) * 1.  +\n        texture(iChannel1, uv) * 0.;     \n              \n   \tfragColor = texture(iChannel0, uv) + step(.28, luma(sqrt(sumVertical * sumVertical + sumHorizontal * sumHorizontal).rgb));    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}