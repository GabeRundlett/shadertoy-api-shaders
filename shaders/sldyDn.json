{
    "Shader": {
        "info": {
            "date": "1659615906",
            "description": "inspired by reference:  https://twitter.com/kineticgraphics/status/1537861671296741376\n\nimproving https://www.shadertoy.com/view/7ldyRH\nimproving https://www.shadertoy.com/view/slccz7",
            "flags": 0,
            "hasliked": 0,
            "id": "sldyDn",
            "likes": 11,
            "name": "Textured Nested Block 3",
            "published": 3,
            "tags": [
                "raytracing",
                "short",
                "golf",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "// Thanks to FabriceNeyret2 for the inspiration + golfing\n\n// vec3: 783 (-3 R(a), -4 bias)\n#define E(x)     .1 * sin( k = min(0., x) *2e2 ) / (k - .1)\n\n#define S(n)                             \\\n    s = exp2(T+i)/4.,                    \\\n    c = (f - W/s).n + L,                 \\\n    k = c.x/D.n.x,                       \\\n    M = abs(v = k * D.n - c),            \\\n    Z = texture(iChannel0, .5*v.yz + .5, -1.) \\\n         * vec4(u+ .3*L.n, 1)            \\\n         * exp(.6-.1*s*k),               \\\n        M.y < u && M.z < u               \\\n        && k > 0.                        \\\n        && C.w < Z.w                     \\\n      ? C = Z : C,\n\n#define B(v, j)                      \\\n    P.v += E(m=j-i-T),               \\\n    f = -u-2.*vec3(--l/4,l/2&1,l&1), \\\n    f.v += 50. * m - k / 4.,         \\\n    S(xyz) S(yxz) S(zyx)\n\n#define A           \\\n    for ( i=-u      \\\n        ; l=8       \\\n        , B(x, .2 ) \\\n          B(z, .55) \\\n          B(y, .5 ) \\\n          B(y, .7 ) \\\n          B(x, .45) \\\n          B(z, .65) \\\n          B(x, .75) \\\n          ++i<6.    \\\n        ; )         \\\n        ;\n\n#define R(a) mat2(cos(a+vec4(0,11,33,0)))\n#define r(v) v.xy *= R(M.x); v.xz *= R(M.y);\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    int   l;\n    float k, i, m,\n          s = iTime / 5.,\n          T = fract(s),\n          u = 1.;\n    vec4  Z;\n    vec3  c, v, f,\n          W = iResolution,\n          P = W/W    , //   vec3(1, 1, 1)\n          L = P/W.zxy, // ~ vec3(1, 0, 0)\n          D = vec3(U+U,0) - W.xyy,\n          M = iMouse.z>0. ? iMouse.xyz/W.xyy-.5 : W-W;\n    D.xy *= R((floor(s) + min(u,1e2*T*T) + E(.1-T))/.955); // 1./.955 ~ 2. * pi / 6.\n    D = D / vec3(1.77,3,1.1) / W.x   * mat3(-1,-1,1, 1,-1,1, 0,2,1);\n    r(D) r(P)\n    A C -= C; W = P; A\n\n    //s = iResolution.x; T = U.x/s;\n    //if (abs(U.x-fract(iTime/5.)*s)<1.) C = vec4(1,0,0,1); // T = T from above\n    //if (abs(U.y-iResolution.y/6.)<1.) C = vec4(1); // y = 0\n    //if (abs(U.y-iResolution.y/6.*4.)<1.) C = vec4(1); // y = 1\n    //C.r += float(abs(E(-T)*iResolution.y*10.+iResolution.y/6.-U.y) < 1.); // Sinc bounce\n    //C.r += float(abs(smoothstep(.0,.1,T)*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Smoothstep ease\n    //C.g += float(abs((min(1.,1e2*T*T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic ease\n    //C.b += float(abs((min(1.,1e2*T*T) + E(.1-T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic start + Sinc bounce ~ C1 continuous loop\n}\n\n/*\n// simplify fog, move square scale into square: 794\n#define R(a)     mat2(cos(a+vec4(0,11,33,0)))\n#define V        vec3\n#define E(x)     .1 * sin( k = min(0., x) *2e2 ) / (k - .1)\n\n#define S(n)                             \\\n    s = exp2(T+i)/4.,                    \\\n    c = (f - R/s).n + L,                 \\\n    k = c.x/D.n.x,                       \\\n    M = abs(v = k * D.n - c),            \\\n    Z = texture(iChannel0, .5*v.yz + .5) \\\n         * vec4(u+ .3*L.n, 1)            \\\n         * exp(.6-.1*s*k),               \\\n        M.y < u && M.z < u               \\\n        && k > 0.                        \\\n        && C.w < Z.w                     \\\n      ? C = Z : C,\n\n#define B(v, j)                     \\\n    P.v += E(m=j-i-T),              \\\n    f = -u-2.*V(--l/4&1,l/2&1,l&1), \\\n    f.v += 50. * m - k / 4.,        \\\n    S(xyz) S(yxz) S(zyx)\n\n#define A           \\\n    for ( i=-u      \\\n        ; l=8       \\\n        , B(x, .2 ) \\\n          B(z, .55) \\\n          B(y, .5 ) \\\n          B(y, .7 ) \\\n          B(x, .45) \\\n          B(z, .65) \\\n          B(x, .75) \\\n          ++i<6.    \\\n        ; )         \\\n        ;\n\n#define r(v) v.xy *= R(M.x); v.xz *= R(M.y);\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    int   l;\n    float k, i, m,\n          s = iTime / 5.,\n          T = fract(s),\n          u = 1.;\n    vec4  Z;\n    V     c, v, f,\n          R = iResolution,\n          P = R/R,\n          L = V(1,0,0),\n          D = V(U+U,0) - R.xyy,\n          M = iMouse.z>0. ? iMouse.xyz/R.xyy-.5 : R-R;\n    D.xy *= R((floor(s) + min(u,1e2*T*T) + E(.1-T))/.955); // 1./.955 ~ 2. * pi / 6.\n    D = normalize(D / sqrt(V(2, 6, .8)) * mat3(-1,-1,1, 1,-1,1, 0,2,1));\n    r(D) r(P)\n    A C -= C; R = P; A\n\n    //s = iResolution.x; T = U.x/s;\n    //if (abs(U.x-fract(iTime/5.)*s)<1.) C = vec4(1,0,0,1); // T = T from above\n    //if (abs(U.y-iResolution.y/6.)<1.) C = vec4(1); // y = 0\n    //if (abs(U.y-iResolution.y/6.*4.)<1.) C = vec4(1); // y = 1\n    //C.r += float(abs(E(-T)*iResolution.y*10.+iResolution.y/6.-U.y) < 1.); // Sinc bounce\n    //C.r += float(abs(smoothstep(.0,.1,T)*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Smoothstep ease\n    //C.g += float(abs((min(1.,1e2*T*T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic ease\n    //C.b += float(abs((min(1.,1e2*T*T) + E(.1-T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic start + Sinc bounce ~ C1 continuous loop\n}\n*/\n\n/*\n// reduce uses of block scale, replace \"1.\" with constant: 797\n#define R(a)     mat2(cos(a+vec4(0,11,33,0)))\n#define V        vec3\n#define E(x)     .1 * sin( k = min(0., x) *2e2 ) / (k - .1)\n\n#define S(n)                             \\\n    c = (f - R/s).n + L,                 \\\n    k = c.x/D.n.x,                       \\\n    M = abs(v = k * D.n - c),            \\\n    Z = texture(iChannel0, .5*v.yz + .5) \\\n         * vec4(u+ .3*L.n, 1)            \\\n         * exp(.6-.1*s*length(c+v)),     \\\n        M.y < u && M.z < u               \\\n        && k > 0.                        \\\n        && C.w < Z.w                     \\\n      ? C = Z : C,\n\n#define B(v, j)                     \\\n    P.v += E(m=j-i-T),              \\\n    f = -u-2.*V(--l/4&1,l/2&1,l&1), \\\n    f.v += 50. * m - k / 4.,        \\\n    S(xyz) S(yxz) S(zyx)\n\n#define A \\\n    for ( s = exp2(T)/4., i=-u ; ++i<6. ; ) \\\n        l=8,      \\\n        B(x, .2 ) \\\n        B(z, .55) \\\n        B(y, .5 ) \\\n        B(y, .7 ) \\\n        B(x, .45) \\\n        B(z, .65) \\\n        B(x, .75) \\\n        s+=s;\n\n#define r(v) v.xy *= R(M.x); v.xz *= R(M.y);\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    int   l;\n    float k, i, m,\n          s = iTime / 5.,\n          T = fract(s),\n          u = 1.;\n    vec4  Z;\n    V     c, v, f,\n          R = iResolution,\n          P = R/R,\n          L = V(1,0,0),\n          D = V(U+U,0) - R.xyy,\n          M = iMouse.z>0. ? iMouse.xyz/R.xyy-.5 : R-R;\n    D.xy *= R((floor(s) + min(u,1e2*T*T) + E(.1-T))/.955); // 1./.955 ~ 2. * pi / 6.\n    D /= sqrt(V(2, 6, .8));\n    D *= mat3(-1,-1,1, 1,-1,1, 0,2,1);\n    r(D) r(P)\n    A C -= C; R = P; A\n\n    //s = iResolution.x; T = U.x/s;\n    //if (abs(U.x-fract(iTime/5.)*s)<1.) C = vec4(1,0,0,1); // T = T from above\n    //if (abs(U.y-iResolution.y/6.)<1.) C = vec4(1); // y = 0\n    //if (abs(U.y-iResolution.y/6.*4.)<1.) C = vec4(1); // y = 1\n    //C.r += float(abs(E(-T)*iResolution.y*10.+iResolution.y/6.-U.y) < 1.); // Sinc bounce\n    //C.r += float(abs(smoothstep(.0,.1,T)*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Smoothstep ease\n    //C.g += float(abs((min(1.,1e2*T*T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic ease\n    //C.b += float(abs((min(1.,1e2*T*T) + E(.1-T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic start + Sinc bounce ~ C1 continuous loop\n}\n*/\n\n/*\n// packed block center, block as expression: 798\n#define R(a)     mat2(cos(a+vec4(0,11,33,0)))\n#define V        vec3\n#define E(x)     .1 * sin( k = min(0., x) *2e2 ) / (k - .1)\n\n#define S(n)                               \\\n    c = (s*f - R).n + s*L,                 \\\n    k = c.x/D.n.x,                         \\\n    M = abs(v = k * D.n - c),              \\\n    Z = texture(iChannel0, .5/s*v.yz + .5) \\\n         * vec4(1.+ .3*L.n, 1)             \\\n         * exp(.6-.1*length(c+v)),         \\\n        M.y < s && M.z < s                 \\\n        && k > 0.                          \\\n        && C.w < Z.w                       \\\n      ? C = Z : C,\n\n#define B(v, j)                      \\\n    P.v += E(m=j-i-T),               \\\n    f = -1.-2.*V(--l/4&1,l/2&1,l&1), \\\n    f.v += 50. * m - k / 4.,         \\\n    S(xyz) S(yxz) S(zyx)\n\n#define A \\\n    for ( s = exp2(T)/4., i=-1. ; ++i<6. ; ) \\\n        l=8,      \\\n        B(x, .2 ) \\\n        B(z, .55) \\\n        B(y, .5 ) \\\n        B(y, .7 ) \\\n        B(x, .45) \\\n        B(z, .65) \\\n        B(x, .75) \\\n        s+=s;\n\n#define r(v) v.xy *= R(M.x); v.xz *= R(M.y);\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    int   l;\n    float k, i, m,\n          s = iTime / 5.,\n          T = fract(s);\n    vec4  Z;\n    V     c, v, f,\n          R = iResolution,\n          P = R/R,\n          L = V(1,0,0),\n          D = V(U+U,0) - R.xyy,\n          M = iMouse.z>0. ? iMouse.xyz/R.xyy-.5 : R-R;\n    D.xy *= R((floor(s) + min(1.,1e2*T*T) + E(.1-T))/.955); // 1./.955 ~ 2. * pi / 6.\n    D /= sqrt(V(2, 6, .8));\n    D *= mat3(-1,-1,1, 1,-1,1, 0,2,1);\n    r(D) r(P)\n    A C -= C; R = P; A\n\n    //s = iResolution.x; T = U.x/s;\n    //if (abs(U.x-fract(iTime/5.)*s)<1.) C = vec4(1,0,0,1); // T = T from above\n    //if (abs(U.y-iResolution.y/6.)<1.) C = vec4(1); // y = 0\n    //if (abs(U.y-iResolution.y/6.*4.)<1.) C = vec4(1); // y = 1\n    //C.r += float(abs(E(-T)*iResolution.y*10.+iResolution.y/6.-U.y) < 1.); // Sinc bounce\n    //C.r += float(abs(smoothstep(.0,.1,T)*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Smoothstep ease\n    //C.g += float(abs((min(1.,1e2*T*T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic ease\n    //C.b += float(abs((min(1.,1e2*T*T) + E(.1-T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic start + Sinc bounce ~ C1 continuous loop\n}\n*/\n\n/*\n// more golfing by Fabrice + even more golfing + uniform ease: 819\n#define R(a)     mat2(cos(a+vec4(0,11,33,0)))\n#define V        vec3\n#define E(x)     .1 * sin( k = min(0., x) *2e2 ) / (k - .1)\n\n#define S(n)                               \\\n    c = (s*f - R).n + s*L,                 \\\n    k = c.x/D.n.x,                         \\\n    M = abs(v = k * D.n - c),              \\\n    Z = texture(iChannel0, .5/s*v.yz + .5) \\\n         * vec4(1.+ .3*L.n, 1) * exp(.6-.1*length(c+v)), \\\n        M.y < s && M.z < s                 \\\n        && k > 0.                          \\\n        && C.w < Z.w                       \\\n      ? C = Z : C;\n\n#define B(a,b,c, v, j)                      \\\n    P.v += E(m=j-i-T),                      \\\n    f = -V(a,b,c); f.v += 50. * m - k / 4., \\\n    S(xyz) S(yxz) S(zyx)\n\n#define A \\\n    for ( s = exp2(T)/4., i=-1. ; ++i<6. ; s+=s ) \\\n    { \\\n        B(3,3,3, x, .2 ) \\\n        B(1,3,3, x, .45) \\\n        B(3,1,3, y, .5 ) \\\n        B(3,3,1, z, .55) \\\n        B(3,1,1, y, .7 ) \\\n        B(1,3,1, z, .65) \\\n        B(1,1,3, x, .75) \\\n    }\n\n#define r(v) v.xy *= R(M.x); v.xz *= R(M.y);\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    float k, i, m,\n          s = iTime / 5.,\n          T = fract(s);\n    vec4  Z;\n    V     c, v, f,\n          R = iResolution,\n          P = R/R,\n          L = V(1,0,0),\n          D = V(U+U,0) - R.xyy,\n          M = iMouse.z>0. ? iMouse.xyz/R.xyy-.5 : R-R;\n    D.xy *= R((floor(s) + min(1.,1e2*T*T) + E(.1-T))/.955); // 1./.955 ~ 2. * pi / 6.\n    D /= sqrt(V(2, 6, .8));\n    D *= mat3(-1,-1,1, 1,-1,1, 0,2,1);\n    r(D) r(P)\n    A C -= C; R = P; A\n\n    //s = iResolution.x; T = U.x/s;\n    //if (abs(U.x-fract(iTime/5.)*s)<1.) C = vec4(1,0,0,1); // T = T from above\n    //if (abs(U.y-iResolution.y/6.)<1.) C = vec4(1); // y = 0\n    //if (abs(U.y-iResolution.y/6.*4.)<1.) C = vec4(1); // y = 1\n    //C.r += float(abs(E(-T)*iResolution.y*10.+iResolution.y/6.-U.y) < 1.); // Sinc bounce\n    //C.r += float(abs(smoothstep(.0,.1,T)*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Smoothstep ease\n    //C.g += float(abs((min(1.,1e2*T*T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic ease\n    //C.b += float(abs((min(1.,1e2*T*T) + E(.1-T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic start + Sinc bounce ~ C1 continuous loop\n}\n*/\n\n/*\n// non-bouncy camera turn: 798\n#define R(a)     mat2(cos(a+vec4(0,11,33,0)))\n#define V        vec3\n\n#define S(n)                               \\\n    c = (s*f - R).n + s*L,                 \\\n    k = c.x/D.n.x,                         \\\n    M = abs(v = k * D.n - c),              \\\n    Z = texture(iChannel0, .5/s*v.yz + .5) \\\n         * vec4(1.+ .3*L.n, 1) * exp(.6-.1*length(c+v)), \\\n        M.y < s && M.z < s                 \\\n        && k > 0.                          \\\n        && C.w < Z.w                       \\\n      ? C = Z : C;\n\n#define B(a,b,c, v, j)                                      \\\n    P.v += .1 * sin(k = min(0., m = j-i-T)*2e2) / (k - .1), \\\n    f = -V(a,b,c); f.v += 50. * m - k / 4.,                 \\\n    S(xyz) S(yxz) S(zyx)\n\n#define A \\\n    for ( s = exp2(T)/4., i=-1. ; ++i<6. ; s+=s ) \\\n    { \\\n        B(3,3,3, x, .2 ) \\\n        B(1,3,3, x, .45) \\\n        B(3,1,3, y, .5 ) \\\n        B(3,3,1, z, .55) \\\n        B(3,1,1, y, .7 ) \\\n        B(1,3,1, z, .65) \\\n        B(1,1,3, x, .75) \\\n    }\n\n#define r(v) v.xy *= R(M.x); v.xz *= R(M.y);\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    float k, i, m,\n          s = iTime / 5.,\n          T = fract(s);\n    vec4  Z;\n    V     c, v, f,\n          R = iResolution,\n          P = R/R,\n          L = V(1,0,0),\n          D = V(U+U,0) - R.xyy,\n          M = iMouse.z>0. ? iMouse.xyz/R.xyy-.5 : R-R;\n    D.xy *= R((\n        floor(s)\n        + smoothstep(0., .1, T)\n    )/.955); // 1./.955 ~ 2. * pi / 6.\n    D /= sqrt(V(1, 3, .4));\n    D *= mat3(-1,-1,1, 1,-1,1, 0,2,1);\n    r(D) r(P)\n    A C -= C; R = P; A\n}\n*/\n\n/*\n// streamline ease and ensure C1 continuity: 866\n#define R(a)     mat2(cos(a+vec4(0,11,33,0)))\n#define V        vec3\n#define E(x) (k = min(0., x)*19., k==0. ? 0. : .1 * sin(k) / (k - .1))\n\n#define S(n)                               \\\n    c = (s*f - R).n + V(s,0,0),            \\\n    v = c.x/D.n.x * D.n - c,               \\\n    Z = texture(iChannel0, .5/s*v.yz + .5) \\\n         * vec4(1.+ .3*V(1,0,0).n, 1) * exp(.6-.1*length(c+v)), \\\n        abs(v.y) < s &&  abs(v.z) < s      \\\n        && dot(c+v, D.n) > 0.              \\\n        && C.w < Z.w                       \\\n      ? C = Z : C;\n\n#define B(a,b,c, v, j)                          \\\n    P.v += E((j-i-T) / .1),                     \\\n    f = -V(a,b,c); f.v += 50. * max(0., j-i-T), \\\n    S(xyz) S(yxz) S(zyx)\n\n#define A \\\n    for ( s = exp2(T)/4., i=-1. ; ++i<6. ; s+=s ) \\\n    { \\\n        B(3,3,3, x, .2 ) \\\n        B(1,3,3, x, .45) \\\n        B(3,1,3, y, .5 ) \\\n        B(3,3,1, z, .55) \\\n        B(3,1,1, y, .7 ) \\\n        B(1,3,1, z, .65) \\\n        B(1,1,3, x, .75) \\\n    }\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    float s, i, k,\n          T = fract(iTime / 5.);\n    vec4  Z;\n    V     c, v, f,\n          R = iResolution,\n          P = V(1),\n          D = V(U+U,0) - R.xyy,\n          M = iMouse.z>0. ? iMouse.xyz/R.xyy-.5 : V(0);\n    D.xy *= R((floor(iTime/5.) + min(1.,1e2*T*T) + E(1.-T/.1))/.955); // 1./.955 ~ 2. * pi / 6.\n    D /= sqrt(V(2, 6, .8));\n    D *= mat3(-1,-1,1, 1,-1,1, 0,2,1);\n    D.xy *= R(M.x); P.xy *= R(M.x);\n    D.xz *= R(M.y); P.xz *= R(M.y);\n    A C -= C; R = P; A\n\n    //s = iResolution.x; T = U.x/s;\n    //if (abs(U.x-fract(iTime/5.)*s)<1.) C = vec4(1,0,0,1); // T = T from above\n    //if (abs(U.y-iResolution.y/6.)<1.) C = vec4(1); // y = 0\n    //if (abs(U.y-iResolution.y/6.*4.)<1.) C = vec4(1); // y = 1\n    //C.r = float(abs(E(-T)*iResolution.y*10.+iResolution.y/6.-U.y) < 1.); // Sinc bounce\n    //C.r += float(abs(smoothstep(.0,.1,T)*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Smoothstep ease\n    //C.g += float(abs((min(1.,1e2*T*T))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic ease\n    //C.b += float(abs((min(1.,1e2*T*T) + E(1.-T/.1))*iResolution.y/2.+iResolution.y/6.-U.y) < 1.); // Quadratic start + Sinc bounce ~ C1 continuous loop\n}\n*/\n\n/*\n// remove phase loop: 887\n#define R(a)     mat2(cos(a+vec4(0,11,33,0)))\n#define V        vec3\n#define sinc(x) ( x==0. ? 0. : sin(x) / (x - .1) )\n\n#define S(n)                               \\\n    c = ( s*f - R ) n + V(s,0,0),          \\\n    d = D n,                               \\\n    v = c.x/d.x * d - c,                   \\\n    Z = texture(iChannel0, .5/s*v.yz + .5) \\\n         * vec4(1.+ .3*V(1,0,0)n, 1) * exp(.6-.1*length(c+v)), \\\n        abs(v.y) < s &&  abs(v.z) < s      \\\n        && dot(c+v, d ) > 0.               \\\n        && C.w < Z.w                       \\\n      ? C = Z : C;\n\n#define B(a,b,c, v, j)                          \\\n    P.v += .1* sinc( min(0., j-i-T) *2e2 ),     \\\n    f = -V(a,b,c); f.v += 50. * max(0., j-i-T), \\\n    S(.xyz) S(.yxz) S(.zyx)                     \\\n\n#define A \\\n    for ( s = exp2(T)/4., i=-1. ; ++i<6. ; s+=s ) \\\n    { \\\n        B(3,3,3, x, .2 ) \\\n        B(1,3,3, x, .45) \\\n        B(3,1,3, y, .5 ) \\\n        B(3,3,1, z, .55) \\\n        B(3,1,1, y, .7 ) \\\n        B(1,3,1, z, .65) \\\n        B(1,1,3, x, .75) \\\n    } \\\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    float s, i,\n          T = fract(iTime / 5.);\n    vec4  Z;\n    V     c, v, f, d,\n          R = iResolution,\n          P = V(1),\n          D = V(U+U,0) - R.xyy,\n          M = iMouse.z>0. ? iMouse.xyz/R.xyy-.5 : V(0);\n    D.xy *= R(( floor(iTime/5.) + smoothstep(.0,.1,T) + .1*sinc(min(0., .1-T) *20.) )/6.*6.283 );\n    D /= sqrt(V(2, 6, .8));\n    D *= mat3(-1,-1,1, 1,-1,1, 0,2,1);\n    D.xy *= R(M.x); P.xy *= R(M.x);\n    D.xz *= R(M.y); P.xz *= R(M.y);\n    A C -= C; R = P; A\n}\n*/\n\n/*\n// B(a,b,c, ...): 898\n#define R(a)     mat2(cos(a+vec4(0,11,33,0)))\n#define V        vec3\n#define sinc(x) ( x==0. ? 0. : sin(x) / (x - .1) )\n\n#define S(n)                               \\\n    c = ( s*f - P ) n + V(s,0,0),          \\\n    d = D n,                               \\\n    v = c.x/d.x * d - c,                   \\\n    Z = texture(iChannel0, .5/s*v.yz + .5) \\\n         * vec4(1.+ .3*V(1,0,0)n, 1) * exp(.6-.1*length(c+v)), \\\n        abs(v.y) < s &&  abs(v.z) < s      \\\n        && dot(c+v, d ) > 0.               \\\n        && C.w < Z.w                       \\\n      ? C = Z : C;\n\n#define B(a,b,c, v, j)                            \\\n    if (p == 0)                                   \\\n        P.v += .1* sinc( min(0., j-i-t) *2e2 ) ;    \\\n    else                                          \\\n    {                                             \\\n        f = -V(a,b,c); f.v += 50. * max(0., j-i-t), \\\n        S(.xyz) S(.yxz) S(.zyx)                   \\\n    }\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    float s, i,\n          T = fract(iTime / 5.);\n    vec4  Z;\n    V     c, v, f, d,\n          R = iResolution,\n          P = V(1),\n          D = V(U+U,0) - R.xyy,\n          M = iMouse.z>0. ? iMouse.xyz/R.xyy-.5 : V(0);\n    D.xy *= R(( floor(iTime/5.) + smoothstep(.0,.1,T) + .1*sinc(min(0., .1-T) *20.) )/6.*6.283 );\n    D /= sqrt(V(2, 6, .8));\n    D *= mat3(-1,-1,1, 1,-1,1, 0,2,1);\n    D.xy *= R(M.x); P.xy *= R(M.x);\n    D.xz *= R(M.y); P.xz *= R(M.y);\n    for ( int p=0 ; p<2 ; ++p )\n    for ( s = exp2(T)/4., i=-1. ; ++i<6. ; s+=s )\n    {\n        B(3,3,3, x, .2 )\n        B(1,3,3, x, .45)\n        B(3,1,3, y, .5 )\n        B(3,3,1, z, .55)\n        B(3,1,1, y, .65)\n        B(1,3,1, z, .7 )\n        B(1,1,3, x, .75)\n    }\n}\n*/\n\n/*\n// using phase macros: 907\n#define R(a)     mat2(cos(a+vec4(0,11,33,0)))\n#define V        vec3\n#define sinc(x) ( x==0. ? 0. : sin(x) / (x - .1) )\n\n#define S(n)                               \\\n    c = ( s*f - P ) n + V(s,0,0),          \\\n    d = D n,                               \\\n    v = c.x/d.x * d - c,                   \\\n    Z = texture(iChannel0, .5/s*v.yz + .5) \\\n         * vec4(1.+ .3*V(1,0,0)n, 1) * exp(.6-.1*length(c+v)), \\\n        abs(v.y) < s &&  abs(v.z) < s      \\\n        && dot(c+v, d ) > 0.               \\\n        && C.w < Z.w                       \\\n      ? C = Z : C,\n\n#define A(B) \\\n    for ( s = exp2(T)/4., i=-1. ; ++i<6. ; s+=s ) \\\n        B((3,3,3), x, .2 ) \\\n        B((1,3,3), x, .45) \\\n        B((3,1,3), y, .5 ) \\\n        B((3,3,1), z, .55) \\\n        B((3,1,1), y, .65) \\\n        B((1,3,1), z, .7 ) \\\n        B((1,1,3), x, .75) \\\n        0; \\\n\n#define P(c, v, j) \\\n    P.v += .1* sinc( min(0., j-i-T) *2e2 ), \\\n\n#define Q(c, v, j) \\\n    f = -V c, f.v += 50. * max(0., j-i-T), \\\n    S(.xyz) S(.yxz) S(.zyx)                \\\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    float s, i,\n          T = fract(iTime / 5.);\n    vec4  Z;\n    V     c, v, f, d,\n          R = iResolution,\n          P = V(1),\n          D = V(U+U,0) - R.xyy,\n          M = iMouse.z>0. ? iMouse.xyz/R.xyy-.5 : V(0);\n    D.xy *= R(( floor(iTime/5.) + smoothstep(.0,.1,T) + .1*sinc(min(0., .1-T) *20.) )/6.*6.283 );\n    D /= sqrt(V(2, 6, .8));\n    D *= mat3(-1,-1,1, 1,-1,1, 0,2,1);\n    D.xy *= R(M.x); P.xy *= R(M.x);\n    D.xz *= R(M.y); P.xz *= R(M.y);\n    A(P)\n    A(Q)\n}\n*/\n\n/*\n// initial: 1028\n#define R(a) mat2(cos(a+vec4(0,11,33,0)))\n\n#define sinc(x) (x==0. ? 0. : sin(x) / (x - .1))\n\n#define S(f, n) \\\n{ \\\n    c = (s*(f) - ro - sk) n + vec3(s,0,0); \\\n    v = c.x / (rd n).x * rd n - c; \\\n    vec4 t = texture(iChannel0, .5/s*v.yz + .5) * vec4(1. + .3*vec3(1,0,0) n, 1) * exp(-.1*(length(c+v)-6.)); \\\n    if ( \\\n        abs(v.y) < s && \\\n        abs(v.z) < s && \\\n        dot(c+v, rd n) > 0. && \\\n        C.w < t.w \\\n    ) \\\n        C = t; \\\n} \\\n\n#define A(f) \\\n    S(f, .xyz) \\\n    S(f, .yxz) \\\n    S(f, .zyx) \\\n\n#define B(c, v, i) \\\n    if (p == 0) sk += sinc(min(0., i - t) * 2e2) * .1 * vec3 v; \\\n    else { A(-vec3 c + o * vec3 v * max(0., i - t)) } \\\n\nvoid mainImage(out vec4 C, vec2 O)\n{\n    float\n        t, s, i,\n        o = 50.,\n        T = fract(iTime / 5.);\n    vec3\n        c, v,\n        R = iResolution,\n        ro = vec3(1),\n        sk = vec3(0),\n        rd = vec3(O+O,0) - R.xyy,\n        M = iMouse.z>0. ? iMouse.xyz/R.xyy-.5 : vec3(0);\n    rd.xy *= R((floor(iTime / 5.) + smoothstep(.0, .1, T) + .1 * sinc(min(0., .1 - T) * 20.))/6.*6.283);\n    rd /= sqrt(vec3(2, 6, .8));\n    rd *= mat3(-1,-1,1, 1,-1,1, 0,2,1);\n    rd.xy *= R(M.x);\n    ro.xy *= R(M.x);\n    rd.xz *= R(M.y);\n    ro.xz *= R(M.y);\n    for (int p=0 ; p<2 ; ++p)\n    for (s = exp2(T) / 4., i=0. ; t=i-1.+T, i<=5. ; s*=2., ++i)\n    {\n        B((3,3,3), (1,0,0), .2 )\n        B((1,3,3), (1,0,0), .45)\n        B((3,1,3), (0,1,0), .5 )\n        B((3,3,1), (0,0,1), .55)\n        B((3,1,1), (0,1,0), .65)\n        B((1,3,1), (0,0,1), .7 )\n        B((1,1,3), (1,0,0), .75)\n    }\n}\n*/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}