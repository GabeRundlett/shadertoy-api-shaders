{
    "Shader": {
        "info": {
            "date": "1502532159",
            "description": "Used in an intro of mine. ",
            "flags": 0,
            "hasliked": 0,
            "id": "4djBDc",
            "likes": 15,
            "name": "Shadow Fractal",
            "published": 3,
            "tags": [
                "raymarchfractal3dshadow"
            ],
            "usePreview": 0,
            "username": "mu6k",
            "viewed": 794
        },
        "renderpass": [
            {
                "code": "/*by musk License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. */\n\nfloat dfpart(vec3 pos, float rep,float interp){\n    vec3 rep3 = vec3(rep,rep,rep);\n\tpos = mod(pos+rep3,rep3*2.0)-rep3;\n    float d=rep;\n    /*d = min(d,length(pos.xy));\n    d = min(d,length(pos.yz));\n    d = min(d,length(pos.zx));\n    return rep*.5-d;*/\n    return rep*(1.15+interp*.27)-length(pos);\n}\n\nfloat hash(vec2 v){\n\treturn fract(fract(sin(dot(v,vec2(51.651244215,2.141625)*7.12311)*412.1234)*517.5126751)*711.123173173+iTime);\n}\n\nfloat df(vec3 pos){\n    float interp = cos(iTime*0.1);\n    interp = interp*interp*interp;\n    float d = 0.0,e=16.0;\n    for (float i=.0; i<4.; i++){\n    \td = max(d,dfpart(pos,e,interp));\n        if (d>e*.125) break;\n        e*=.2712;\n    }\n    return d;\n}\n\nvec3 nf(vec3 p){\n    vec2 e = vec2(.0,.001);\n    float c = df(p);\n    return normalize(vec3(df(p-e.yxx)-df(p+e.yxx),df(p-e.xyx)-df(p+e.xyx),df(p-e.xxy)-df(p+e.xxy)));\n}\n\nvoid rot(inout vec2 v,float a){\n\tfloat c=cos(a),s=sin(a);\n    v*=mat2(c,s,-s,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.yy - vec2(.85,.5);\n    float t = iTime + hash(uv)/60.0;\n    vec3 p = sin(vec3(t*.172, t*.271, t*.314)*2.0)+t;\n    float luv = length(uv);\n    vec3 dir = normalize(vec3(uv.xy,1.0-luv*luv*.6));\n    \n    vec3 lightp = vec3(t) + normalize(sin(p*.1))*5.0 + dir*15.0;\n    \n    rot(dir.xy,t*.1);\n    rot(dir.yz,t*.05);\n    rot(dir.zx,t*.025);\n    p+=dir*hash(uv)*.1;\n    float it;\n    \n    for(float i=0.0; i<100.0; i+=1.){\n    \tfloat d = df(p);\n        p+=d*dir;\n        it = i;\n        if (d<.01){\n        \tbreak;\n        }\n    }\n    \n    vec3 d2 = normalize(lightp-p);\n    float td = .01;\n    vec3 p2 = p+d2*(td+td*hash(uv));\n    float occlusion = 1.0;\n    float mtd = distance(lightp,p);\n    \n    for(float i=0.0; i<100.0;i++){\n        float d = df(p2);\n    \tp2 += d*d2;\n        td += d;\n        if (td>mtd || occlusion<.0) break;\n        occlusion = min(occlusion,d/(td*.05));\n    }\n    occlusion=max(occlusion,0.0);\n    \n    float diffuse = dot(nf(p),-d2)*.5+.5;\n    vec3 lcolor = vec3(.9,.3,.1)*.5;\n    vec3 color= diffuse*lcolor/(1.0+mtd*mtd*.0005)*4.0*occlusion+lcolor/(1.0+mtd*mtd*.0005)*.5;\n    color += (vec3(1)-lcolor)*(td*.001+occlusion+it/200.0)*.5;\n\tcolor *= (1.0-length(uv));\n    color = vec3(1.8)*color/(vec3(1)+color);\n    color = pow(color,vec3(0.8));\n\n    //color = nf(p)*.5+.5;\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}