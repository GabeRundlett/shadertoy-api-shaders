{
    "Shader": {
        "info": {
            "date": "1643074314",
            "description": "Using implicit bezier curves and winding counting.\n- No Signed Distance Fields or Textures\n- No Polygon Approximation or Tessellation\n- No Trigonometry, Roots or Division (only Add, Subtract, Multiply and Compare)",
            "flags": 0,
            "hasliked": 0,
            "id": "fsXcDj",
            "likes": 1,
            "name": "Resolution Indep. Font Rendering",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "text",
                "font",
                "glyph"
            ],
            "usePreview": 0,
            "username": "Lichtso",
            "viewed": 39
        },
        "renderpass": [
            {
                "code": "const int poly_line_indices[] = int[](\n    0, 12, 26, 31, 35, 39, 48, 56, 76, 85, 93, 106, 110, 126, 135\n);\nconst int integral_quadratic_indices[] = int[](\n    0, 0, 33, 45, 45, 45, 72, 96, 117, 144, 168, 186, 186, 204, 228\n);\nconst vec4 bounding_boxes[] = vec4[](\n    vec4(-5.2301006, -4.155522, -0.53051275, 0.8848333),\n    vec4(-3.8505735, -2.953155, -0.54987454, 0.5498745),\n    vec4(-3.6801898, -3.125475, 0.101649344, 0.41531014),\n    vec4(-2.679186, -2.5184834, -0.53051275, 0.9758336),\n    vec4(-2.177716, -2.0170133, -0.53051275, 0.9758336),\n    vec4(-1.7352993, -0.7604338, -0.54987454, 0.5498745),\n    vec4(-1.568788, -0.92694515, -0.41531017, 0.41337395),\n    vec4(-0.10794192, 1.6743098, -0.53051275, 0.8848333),\n    vec4(1.8127465, 2.787612, -0.54987454, 0.5498745),\n    vec4(1.9792578, 2.6211007, -0.41531017, 0.41337395),\n    vec4(3.069326, 3.68019, -0.53051275, 0.5498745),\n    vec4(3.8786483, 4.039351, -0.53051275, 0.9758336),\n    vec4(4.3210645, 5.2543025, -0.54987454, 0.9758336),\n    vec4(4.487576, 5.0936, -0.41531017, 0.41531014)\n);\nconst vec2 poly_line_vertices[] = vec2[](\n    vec2(-5.0655255, 0.13553244),\n    vec2(-5.0655255, -0.53051275),\n    vec2(-5.2301006, -0.53051275),\n    vec2(-5.2301006, 0.8848333),\n    vec2(-5.0655255, 0.8848333),\n    vec2(-5.0655255, 0.28268194),\n    vec2(-4.320097, 0.28268194),\n    vec2(-4.320097, 0.8848333),\n    vec2(-4.155522, 0.8848333),\n    vec2(-4.155522, -0.53051275),\n    vec2(-4.320097, -0.53051275),\n    vec2(-4.320097, 0.13553244),\n\n    vec2(-3.6840622, -0.029042661),\n    vec2(-3.5896735, -0.31269276),\n    vec2(-3.3374865, -0.40950164),\n    vec2(-2.9986553, -0.33786306),\n    vec2(-2.9986553, -0.48114023),\n    vec2(-3.159842, -0.53390104),\n    vec2(-3.343295, -0.54987454),\n    vec2(-3.7145572, -0.40659738),\n    vec2(-3.8505735, -0.008712828),\n    vec2(-3.724238, 0.3988526),\n    vec2(-3.3849227, 0.5498745),\n    vec2(-3.069326, 0.41869843),\n    vec2(-2.953155, 0.07260662),\n    vec2(-2.953155, -0.029042661),\n\n    vec2(-3.1932411, 0.33447468),\n    vec2(-3.386859, 0.41531014),\n    vec2(-3.5906417, 0.3320545),\n    vec2(-3.6801898, 0.101649344),\n    vec2(-3.125475, 0.101649344),\n\n    vec2(-2.5184834, -0.53051275),\n    vec2(-2.679186, -0.53051275),\n    vec2(-2.679186, 0.9758336),\n    vec2(-2.5184834, 0.9758336),\n    \n    vec2(-2.0170133, -0.53051275),\n    vec2(-2.177716, -0.53051275),\n    vec2(-2.177716, 0.9758336),\n    vec2(-2.0170133, 0.9758336),\n    \n    vec2(-0.89112586, -0.40417713),\n    vec2(-1.252223, -0.54987454),\n    vec2(-1.5048943, -0.4830764),\n    vec2(-1.6752778, -0.29139477),\n    vec2(-1.7352993, 0.00096803904),\n    vec2(-1.6055754, 0.40514517),\n    vec2(-1.2454464, 0.5498745),\n    vec2(-0.8916099, 0.40175688),\n    vec2(-0.7604338, 0.00096803904),\n    \n    vec2(-1.0087487, 0.30833632),\n    vec2(-1.2502868, 0.41337395),\n    vec2(-1.4884367, 0.3097884),\n    vec2(-1.568788, 0.00096803904),\n    vec2(-1.4874686, -0.30882037),\n    vec2(-1.2483506, -0.41531017),\n    vec2(-1.0087487, -0.30930442),\n    vec2(-0.92694515, 0.00096803904),\n\n    vec2(1.2957871, -0.53051275),\n    vec2(1.1331481, -0.53051275),\n    vec2(0.84756184, 0.41724628),\n    vec2(0.8020617, 0.5760129),\n    vec2(0.77592325, 0.69121546),\n    vec2(0.70815706, 0.41143775),\n    vec2(0.43128362, -0.53051275),\n    vec2(0.26864466, -0.53051275),\n    vec2(-0.10794192, 0.8848333),\n    vec2(0.06631409, 0.8848333),\n    vec2(0.28994262, 0.010648966),\n    vec2(0.35770884, -0.32237363),\n    vec2(0.43515596, 0.024202228),\n    vec2(0.6887952, 0.8848333),\n    vec2(0.8630513, 0.8848333),\n    vec2(1.1292758, 0.016457498),\n    vec2(1.207691, -0.32237363),\n    vec2(1.2773933, 0.012585163),\n    vec2(1.5000538, 0.8848333),\n    vec2(1.6743098, 0.8848333),\n    \n    vec2(2.65692, -0.40417713),\n    vec2(2.2958229, -0.54987454),\n    vec2(2.0431516, -0.4830764),\n    vec2(1.872768, -0.29139477),\n    vec2(1.8127465, 0.00096803904),\n    vec2(1.9424704, 0.40514517),\n    vec2(2.3025994, 0.5498745),\n    vec2(2.656436, 0.40175688),\n    vec2(2.787612, 0.00096803904),\n    \n    vec2(2.539297, 0.30833632),\n    vec2(2.297759, 0.41337395),\n    vec2(2.0596092, 0.3097884),\n    vec2(1.9792578, 0.00096803904),\n    vec2(2.0605772, -0.30882037),\n    vec2(2.2996953, -0.41531017),\n    vec2(2.539297, -0.30930442),\n    vec2(2.6211007, 0.00096803904),\n    \n    vec2(3.657924, 0.38917172),\n    vec2(3.5417533, 0.40369308),\n    vec2(3.3215132, 0.29913944),\n    vec2(3.2300286, 0.03872353),\n    vec2(3.2300286, -0.53051275),\n    vec2(3.069326, -0.53051275),\n    vec2(3.069326, 0.53051275),\n    vec2(3.2019541, 0.53051275),\n    vec2(3.220348, 0.33399063),\n    vec2(3.2280924, 0.33399063),\n    vec2(3.3704016, 0.49372536),\n    vec2(3.5533705, 0.5498745),\n    vec2(3.68019, 0.5382574),\n    \n    vec2(4.039351, -0.53051275),\n    vec2(3.8786483, -0.53051275),\n    vec2(3.8786483, 0.9758336),\n    vec2(4.039351, 0.9758336),\n    \n    vec2(5.1236105, -0.53051275),\n    vec2(5.1023126, -0.38820368),\n    vec2(5.1023126, -0.38820368),\n    vec2(5.0936, -0.38820368),\n    vec2(4.760577, -0.54987454),\n    vec2(4.4367514, -0.40756547),\n    vec2(4.3210645, -0.002904296),\n    vec2(4.4372354, 0.40466112),\n    vec2(4.760577, 0.5498745),\n    vec2(5.0916634, 0.39304405),\n    vec2(5.1042485, 0.39304405),\n    vec2(5.097472, 0.46952313),\n    vec2(5.0936, 0.5440659),\n    vec2(5.0936, 0.9758336),\n    vec2(5.2543025, 0.9758336),\n    vec2(5.2543025, -0.53051275),\n\n    vec2(5.018573, 0.31898528),\n    vec2(4.7789707, 0.41531014),\n    vec2(4.562603, 0.30543202),\n    vec2(4.487576, -0.004840493),\n    vec2(4.562119, -0.31172466),\n    vec2(4.7809067, -0.41531017),\n    vec2(5.019541, -0.32576194),\n    vec2(5.0936, -0.03678739),\n    vec2(5.0936, -0.002904296)\n);\nconst vec2 integral_quadratic_matrices[] = vec2[](\n    vec2(-5.767591, -27.656614),\n    vec2(-9.30595, 9.30595),\n    vec2(44.27364, -106.87728),\n    vec2(-48.314133, 56.213684),\n    vec2(-25.638512, 36.771015),\n    vec2(59.37336, -112.33714),\n    vec2(5.7162185, 8.174142),\n    vec2(-0, 5.835948),\n    vec2(13.958951, -27.60246),\n    vec2(23.849854, -27.079853),\n    vec2(6.1485887, -6.1485887),\n    vec2(5.687438, -16.017065),\n    vec2(42.33459, -64.42505),\n    vec2(11.488934, -17.441748),\n    vec2(0.29763636, -5.803997),\n    vec2(-14.178002, 40.59878),\n    vec2(-5.253987, 13.861995),\n    vec2(-4.6529856, 4.6529856),\n    vec2(4.1918836, 10.339556),\n    vec2(0, 5.014386),\n    vec2(-7.6233416, 12.064125),\n    vec2(19.052977, -21.694002),\n    vec2(4.6952868, -4.6952868),\n    vec2(-3.9277878, 10.549345),\n    vec2(30.478893, -48.38722),\n    vec2(7.9154167, -12.575057),\n    vec2(0, 3.8979697),\n    vec2(16.965117, -44.274746),\n    vec2(4.1372786, -11.489334),\n    vec2(3.9276154, -3.9276154),\n    vec2(3.8378408, -20.268791),\n    vec2(0, -4.2508802),\n    vec2(6.979481, -11.014948),\n\n    vec2(-23.14503, 19.007309),\n    vec2(-7.945852, 7.945852),\n    vec2(-6.6611867, 19.031975),\n    vec2(-46.12148, 69.98227),\n    vec2(-14.756631, 22.604902),\n    vec2(-0, 6.579387),\n    vec2(32.242718, -85.24145),\n    vec2(8.280659, -22.916239),\n    vec2(-7.5585065, 8.90651),\n    vec2(4.9883723, -34.458755),\n    vec2(-0, -7.825484),\n    vec2(-12.011216, 19.154243),\n\n    vec2(-2.394436, 9.191482),\n    vec2(-4.4688535, 12.092194),\n    vec2(-3.9577122, 3.9577122),\n    vec2(3.7124188, -0.30603904),\n    vec2(0, 4.491141),\n    vec2(-6.751391, 10.728838),\n    vec2(8.544583, -11.343913),\n    vec2(4.340182, -4.340182),\n    vec2(-3.8901958, 10.799646),\n    vec2(13.376852, -20.842669),\n    vec2(7.708671, -12.008842),\n    vec2(0, 3.8543348),\n    vec2(22.55237, -50.46369),\n    vec2(12.423305, -29.084017),\n    vec2(5.9708924, -5.9708924),\n    vec2(15.740951, -37.93779),\n    vec2(6.834916, -19.613235),\n    vec2(11.292459, -17.433977),\n    vec2(8.231879, -23.415102),\n    vec2(0, -7.0269556),\n    vec2(14.970468, -26.580221),\n    vec2(-2.2941115, -0.47997475),\n    vec2(-4.340182, 4.340182),\n    vec2(3.8931875, -10.756727),\n    vec2(-5.8185143, 9.089731),\n    vec2(-7.651572, 11.948443),\n    vec2(0, -3.8543386),\n\n    vec2(10.858854, -29.38295),\n    vec2(6.2813697, -18.726707),\n    vec2(-4.872464, 4.872464),\n    vec2(3.990654, -13.946008),\n    vec2(-0, -6.337193),\n    vec2(-9.653854, 14.569618),\n    vec2(-4.8118258, 1.8763415),\n    vec2(-6.260377, 6.260377),\n    vec2(-4.87559, 14.395984),\n    vec2(-11.331361, 17.209127),\n    vec2(-12.224414, 18.570583),\n    vec2(-0, 4.9424057),\n    vec2(-4.8852353, 17.2166),\n    vec2(-6.343952, 18.56837),\n    vec2(4.8955607, -4.8955607),\n    vec2(3.917808, 1.9622259),\n    vec2(-0, 6.337195),\n    vec2(9.433451, -14.3237915),\n    vec2(10.9208555, -13.820854),\n    vec2(6.3371944, -6.3371944),\n    vec2(4.83931, -14.22988),\n    vec2(19.291685, -29.39209),\n    vec2(12.29719, -18.738573),\n    vec2(-0, -4.918875),\n\n    vec2(-50.265797, 124.8237),\n    vec2(40.186108, -97.91827),\n    vec2(-5.3769984, 20.376049),\n    vec2(42.785408, -96.50252),\n    vec2(-37.71725, 85.16798),\n    vec2(-11.680177, 19.71029),\n    vec2(-15.402008, 31.95038),\n    vec2(38.004105, -74.34684),\n    vec2(-5.6071687, 16.61382),\n    vec2(17.880787, -32.315742),\n    vec2(-61.103138, 110.62884),\n    vec2(-15.436579, 22.51168),\n    vec2(31.259554, -63.03037),\n    vec2(-47.311268, 103.58303),\n    vec2(7.8852043, -25.089302),\n    vec2(-231.57082, 272.34253),\n    vec2(242.9053, -291.97696),\n    vec2(63.793343, -66.246956),\n    vec2(-169.56493, 421.19437),\n    vec2(172.60904, -435.50574),\n    vec2(55.76587, -124.80949),\n\n    vec2(13.4612665, -33.71219),\n    vec2(-4.4688554, 12.092198),\n    vec2(-3.9577105, 3.9577105),\n    vec2(3.7124188, -16.24082),\n    vec2(0, 4.4911427),\n    vec2(-6.7513943, 10.728843),\n    vec2(-6.8545766, 4.055248),\n    vec2(4.34018, -4.34018),\n    vec2(-3.890194, 10.799642),\n    vec2(-13.973866, 21.765255),\n    vec2(7.708671, -12.008842),\n    vec2(0, 3.8543348),\n    vec2(-21.526018, 52.72758),\n    vec2(12.423267, -29.083931),\n    vec2(5.970875, -5.970875),\n    vec2(-8.509665, 31.650919),\n    vec2(6.8349266, -19.613264),\n    vec2(11.292476, -17.434004),\n    vec2(8.231886, 1.5168693),\n    vec2(0, -7.0269666),\n    vec2(14.970478, -26.580263),\n    vec2(13.105054, -15.879139),\n    vec2(-4.340182, 4.340182),\n    vec2(3.8931856, -10.756725),\n    vec2(21.329638, -33.30393),\n    vec2(-7.6515803, 11.948457),\n    vec2(0, -3.8543413),\n\n    vec2(-11.427734, 37.060265),\n    vec2(6.2813697, -18.726707),\n    vec2(-4.872464, 4.872464),\n    vec2(3.9906576, 8.538649),\n    vec2(-0, -6.3371987),\n    vec2(-9.653864, 14.569632),\n    vec2(17.400269, -20.33575),\n    vec2(-6.260374, 6.260374),\n    vec2(-4.8755803, 14.39597),\n    vec2(32.041435, -48.680172),\n    vec2(-12.22442, 18.570591),\n    vec2(-0, 4.9424114),\n    vec2(17.623446, -48.66496),\n    vec2(-6.3439693, 18.56842),\n    vec2(4.8955774, -4.8955774),\n    vec2(3.9178097, -20.52245),\n    vec2(-0, 6.3372006),\n    vec2(9.433458, -14.323797),\n    vec2(-11.563796, 8.663797),\n    vec2(6.3371944, -6.3371944),\n    vec2(4.8393173, -14.229887),\n    vec2(-24.339354, 37.0933),\n    vec2(12.297213, -18.738607),\n    vec2(-0, -4.918877),\n\n    vec2(-26.459057, 17.665958),\n    vec2(10.028728, -10.028728),\n    vec2(-14.870171, 32.679848),\n    vec2(-59.276894, 88.18401),\n    vec2(19.513826, -30.091417),\n    vec2(-11.1247015, 26.808731),\n    vec2(-22.435646, 58.742504),\n    vec2(7.3324723, -18.26329),\n    vec2(-6.4159245, 6.4159245),\n    vec2(3.8611133, 20.903004),\n    vec2(-0, -7.76664),\n    vec2(-9.564469, 16.36027),\n    vec2(107.70914, -134.5089),\n    vec2(-19.864588, 19.864588),\n    vec2(-90.05256, 158.91638),\n    vec2(47.3333, -135.22139),\n    vec2(0, 14.150186),\n    vec2(-86.08016, 154.47284),\n\n    vec2(3.5061731, -27.428738),\n    vec2(0, 4.632119),\n    vec2(-6.3763084, 9.778909),\n    vec2(-19.855566, 17.068903),\n    vec2(4.826918, -4.826918),\n    vec2(-3.861525, 10.747941),\n    vec2(-37.195732, 57.794834),\n    vec2(8.608002, -13.372577),\n    vec2(0, 3.811668),\n    vec2(-19.249578, 57.600815),\n    vec2(4.688808, -13.332799),\n    vec2(3.8116581, -3.8116581),\n    vec2(3.863944, 16.860497),\n    vec2(0, -4.8044744),\n    vec2(7.0269628, -10.932634),\n    vec2(24.181885, -26.583086),\n    vec2(-4.5107665, 4.5107665),\n    vec2(3.106224, -9.291638),\n\n    vec2(-30.072351, 27.063007),\n    vec2(6.9326353, -6.9326353),\n    vec2(4.9888844, -14.642735),\n    vec2(-60.201214, 90.85136),\n    vec2(13.415086, -20.250391),\n    vec2(-0, -4.918875),\n    vec2(-31.820099, 92.633),\n    vec2(7.3081646, -20.636719),\n    vec2(-4.9901643, 4.9901643),\n    vec2(3.7797248, 28.02543),\n    vec2(-0, -7.075059),\n    vec2(-9.100968, 13.931931),\n    vec2(32.003834, -35.315395),\n    vec2(-6.0762587, 6.0762587),\n    vec2(-4.7327695, 15.114315),\n    vec2(67.89029, -96.869194),\n    vec2(-13.328548, 19.020353),\n    vec2(-0, 4.433321),\n    vec2(32.067608, -99.84519),\n    vec2(-6.0631266, 19.565872),\n    vec2(5.0143833, -5.0143833),\n    vec2(4.6378407, -35.774822),\n    vec2(-0, 6.076246),\n    vec2(11.167185, -16.192387)\n);\n/*const vec2 integral_quadratic_vertices[] = vec2[](\n    vec2(-3.7145572, -0.40659738),\n    vec2(-3.5785406, -0.54987454),\n    vec2(-3.343295, -0.54987454),\n    vec2(-3.8505735, -0.008712828),\n    vec2(-3.8505735, -0.2633202),\n    vec2(-3.7145572, -0.40659738),\n    vec2(-3.724238, 0.3988526),\n    vec2(-3.8505735, 0.24783075),\n    vec2(-3.8505735, -0.008712828),\n    vec2(-3.3849227, 0.5498745),\n    vec2(-3.5979023, 0.5498745),\n    vec2(-3.724238, 0.3988526),\n    vec2(-3.069326, 0.41869843),\n    vec2(-3.1854966, 0.5498745),\n    vec2(-3.3849227, 0.5498745),\n    vec2(-2.953155, 0.07260662),\n    vec2(-2.953155, 0.28752238),\n    vec2(-3.069326, 0.41869843),\n    vec2(-3.5896735, -0.31269276),\n    vec2(-3.6792219, -0.21588385),\n    vec2(-3.6840622, -0.029042661),\n    vec2(-3.3374865, -0.40950164),\n    vec2(-3.5001254, -0.40950164),\n    vec2(-3.5896735, -0.31269276),\n    vec2(-2.9986553, -0.33786306),\n    vec2(-3.1661348, -0.40950164),\n    vec2(-3.3374865, -0.40950164),\n    vec2(-3.159842, -0.53390104),\n    vec2(-3.083847, -0.5179276),\n    vec2(-2.9986553, -0.48114023),\n    vec2(-3.343295, -0.54987454),\n    vec2(-3.235837, -0.54987454),\n    vec2(-3.159842, -0.53390104),\n    vec2(-3.5906417, 0.3320545),\n    vec2(-3.5146468, 0.41531014),\n    vec2(-3.386859, 0.41531014),\n    vec2(-3.6801898, 0.101649344),\n    vec2(-3.6666367, 0.24879885),\n    vec2(-3.5906417, 0.3320545),\n    vec2(-3.1932411, 0.33447468),\n    vec2(-3.125475, 0.25363928),\n    vec2(-3.125475, 0.101649344),\n    vec2(-3.386859, 0.41531014),\n    vec2(-3.2610073, 0.41531014),\n    vec2(-3.1932411, 0.33447468),\n    vec2(-0.89112586, -0.40417713),\n    vec2(-0.7604338, -0.25847977),\n    vec2(-0.7604338, 0.00096803904),\n    vec2(-1.252223, -0.54987454),\n    vec2(-1.0218179, -0.54987454),\n    vec2(-0.89112586, -0.40417713),\n    vec2(-1.5048943, -0.4830764),\n    vec2(-1.3945321, -0.54987454),\n    vec2(-1.252223, -0.54987454),\n    vec2(-1.6752778, -0.29139477),\n    vec2(-1.6152563, -0.41627824),\n    vec2(-1.5048943, -0.4830764),\n    vec2(-1.7352993, 0.00096803904),\n    vec2(-1.7352993, -0.16651133),\n    vec2(-1.6752778, -0.29139477),\n    vec2(-1.6055754, 0.40514517),\n    vec2(-1.7352993, 0.2604159),\n    vec2(-1.7352993, 0.00096803904),\n    vec2(-1.2454464, 0.5498745),\n    vec2(-1.4758515, 0.5498745),\n    vec2(-1.6055754, 0.40514517),\n    vec2(-0.8916099, 0.40175688),\n    vec2(-1.0227859, 0.5498745),\n    vec2(-1.2454464, 0.5498745),\n    vec2(-0.7604338, 0.00096803904),\n    vec2(-0.7604338, 0.25363928),\n    vec2(-0.8916099, 0.40175688),\n    vec2(-1.4874686, -0.30882037),\n    vec2(-1.568788, -0.20233062),\n    vec2(-1.568788, 0.00096803904),\n    vec2(-1.2483506, -0.41531017),\n    vec2(-1.4061491, -0.41531017),\n    vec2(-1.4874686, -0.30882037),\n    vec2(-1.0087487, -0.30930442),\n    vec2(-1.0905521, -0.41531017),\n    vec2(-1.2483506, -0.41531017),\n    vec2(-0.92694515, 0.00096803904),\n    vec2(-0.92694515, -0.20329869),\n    vec2(-1.0087487, -0.30930442),\n    vec2(-1.0087487, 0.30833632),\n    vec2(-0.92694515, 0.20329863),\n    vec2(-0.92694515, 0.00096803904),\n    vec2(-1.2502868, 0.41337395),\n    vec2(-1.0905521, 0.41337395),\n    vec2(-1.0087487, 0.30833632),\n    vec2(-1.4884367, 0.3097884),\n    vec2(-1.4080853, 0.41337395),\n    vec2(-1.2502868, 0.41337395),\n    vec2(-1.568788, 0.00096803904),\n    vec2(-1.568788, 0.20620292),\n    vec2(-1.4884367, 0.3097884),\n    vec2(0.8020617, 0.5760129),\n    vec2(0.827232, 0.4801721),\n    vec2(0.84756184, 0.41724628),\n    vec2(0.77592325, 0.69121546),\n    vec2(0.77689135, 0.6718537),\n    vec2(0.8020617, 0.5760129),\n    vec2(0.70815706, 0.41143775),\n    vec2(0.7546253, 0.56342775),\n    vec2(0.77592325, 0.69121546),\n    vec2(0.35770884, -0.32237363),\n    vec2(0.33641088, -0.17328793),\n    vec2(0.28994262, 0.010648966),\n    vec2(0.43515596, 0.024202228),\n    vec2(0.38384727, -0.14521337),\n    vec2(0.35770884, -0.32237363),\n    vec2(1.207691, -0.32237363),\n    vec2(1.175744, -0.1335963),\n    vec2(1.1292758, 0.016457498),\n    vec2(1.2773933, 0.012585163),\n    vec2(1.2260846, -0.184905),\n    vec2(1.207691, -0.32237363),\n    vec2(2.65692, -0.40417713),\n    vec2(2.787612, -0.25847977),\n    vec2(2.787612, 0.00096803904),\n    vec2(2.2958229, -0.54987454),\n    vec2(2.526228, -0.54987454),\n    vec2(2.65692, -0.40417713),\n    vec2(2.0431516, -0.4830764),\n    vec2(2.153514, -0.54987454),\n    vec2(2.2958229, -0.54987454),\n    vec2(1.872768, -0.29139477),\n    vec2(1.9327896, -0.41627824),\n    vec2(2.0431516, -0.4830764),\n    vec2(1.8127465, 0.00096803904),\n    vec2(1.8127465, -0.16651133),\n    vec2(1.872768, -0.29139477),\n    vec2(1.9424704, 0.40514517),\n    vec2(1.8127465, 0.2604159),\n    vec2(1.8127465, 0.00096803904),\n    vec2(2.3025994, 0.5498745),\n    vec2(2.0721943, 0.5498745),\n    vec2(1.9424704, 0.40514517),\n    vec2(2.656436, 0.40175688),\n    vec2(2.52526, 0.5498745),\n    vec2(2.3025994, 0.5498745),\n    vec2(2.787612, 0.00096803904),\n    vec2(2.787612, 0.25363928),\n    vec2(2.656436, 0.40175688),\n    vec2(2.0605772, -0.30882037),\n    vec2(1.9792578, -0.20233062),\n    vec2(1.9792578, 0.00096803904),\n    vec2(2.2996953, -0.41531017),\n    vec2(2.1418967, -0.41531017),\n    vec2(2.0605772, -0.30882037),\n    vec2(2.539297, -0.30930442),\n    vec2(2.4574938, -0.41531017),\n    vec2(2.2996953, -0.41531017),\n    vec2(2.6211007, 0.00096803904),\n    vec2(2.6211007, -0.20329869),\n    vec2(2.539297, -0.30930442),\n    vec2(2.539297, 0.30833632),\n    vec2(2.6211007, 0.20329863),\n    vec2(2.6211007, 0.00096803904),\n    vec2(2.297759, 0.41337395),\n    vec2(2.4574938, 0.41337395),\n    vec2(2.539297, 0.30833632),\n    vec2(2.0596092, 0.3097884),\n    vec2(2.1399605, 0.41337395),\n    vec2(2.297759, 0.41337395),\n    vec2(1.9792578, 0.00096803904),\n    vec2(1.9792578, 0.20620292),\n    vec2(2.0596092, 0.3097884),\n    vec2(3.68019, 0.5382574),\n    vec2(3.6240408, 0.5498745),\n    vec2(3.5533705, 0.5498745),\n    vec2(3.5417533, 0.40369308),\n    vec2(3.592094, 0.40369308),\n    vec2(3.657924, 0.38917172),\n    vec2(3.3215132, 0.29913944),\n    vec2(3.4129975, 0.40369308),\n    vec2(3.5417533, 0.40369308),\n    vec2(3.2300286, 0.03872353),\n    vec2(3.2300286, 0.19458586),\n    vec2(3.3215132, 0.29913944),\n    vec2(3.3704016, 0.49372536),\n    vec2(3.2871459, 0.43757617),\n    vec2(3.2280924, 0.33399063),\n    vec2(3.5533705, 0.5498745),\n    vec2(3.4536572, 0.5498745),\n    vec2(3.3704016, 0.49372536),\n    vec2(4.760577, -0.54987454),\n    vec2(4.9822693, -0.54987454),\n    vec2(5.0936, -0.38820368),\n    vec2(4.4367514, -0.40756547),\n    vec2(4.552438, -0.54987454),\n    vec2(4.760577, -0.54987454),\n    vec2(4.3210645, -0.002904296),\n    vec2(4.3210645, -0.26525638),\n    vec2(4.4367514, -0.40756547),\n    vec2(4.4372354, 0.40466112),\n    vec2(4.3210645, 0.2594478),\n    vec2(4.3210645, -0.002904296),\n    vec2(4.760577, 0.5498745),\n    vec2(4.553406, 0.5498745),\n    vec2(4.4372354, 0.40466112),\n    vec2(5.0916634, 0.39304405),\n    vec2(4.976461, 0.5498745),\n    vec2(4.760577, 0.5498745),\n    vec2(5.019541, -0.32576194),\n    vec2(4.9454823, -0.41531017),\n    vec2(4.7809067, -0.41531017),\n    vec2(5.0936, -0.03678739),\n    vec2(5.0936, -0.23621371),\n    vec2(5.019541, -0.32576194),\n    vec2(5.018573, 0.31898528),\n    vec2(5.0936, 0.22266042),\n    vec2(5.0936, -0.002904296),\n    vec2(4.7789707, 0.41531014),\n    vec2(4.943546, 0.41531014),\n    vec2(5.018573, 0.31898528),\n    vec2(4.562603, 0.30543202),\n    vec2(4.6376295, 0.41531014),\n    vec2(4.7789707, 0.41531014),\n    vec2(4.487576, -0.004840493),\n    vec2(4.487576, 0.19555396),\n    vec2(4.562603, 0.30543202),\n    vec2(4.562119, -0.31172466),\n    vec2(4.487576, -0.20813915),\n    vec2(4.487576, -0.004840493),\n    vec2(4.7809067, -0.41531017),\n    vec2(4.6366615, -0.41531017),\n    vec2(4.562119, -0.31172466)\n);*/\n\n// https://en.wikipedia.org/wiki/Barycentric_coordinate_system#Conversion_between_barycentric_and_Cartesian_coordinates\n\n/*vec3 cartesian_to_barycentric(vec2 vertex_a, vec2 vertex_b, vec2 vertex_c, vec2 point) {\n    vec2 c_to_a = vertex_a - vertex_c;\n    vec2 c_to_b = vertex_b - vertex_c;\n    vec2 c_to_p = point    - vertex_c;\n    vec3 bary;\n    bary.x =   determinant(mat2(c_to_p, c_to_b));\n    bary.y =   determinant(mat2(c_to_a, c_to_p));\n    bary.xy /= determinant(mat2(c_to_a, c_to_b));\n    bary.z = 1.0 - bary.x - bary.y;\n    return bary;\n}*/\n\n/*vec3 cartesian_to_barycentric(vec2 vertex_a, vec2 vertex_b, vec2 vertex_c, vec2 point) {\n    float double_signed_area = vertex_a.x * (vertex_b.y - vertex_c.y) + vertex_b.x * (vertex_c.y - vertex_a.y) + vertex_c.x * (vertex_a.y - vertex_b.y);\n    mat3 matrix = mat3(\n        vertex_b.x * vertex_c.y - vertex_c.x * vertex_b.y, vertex_b.y - vertex_c.y, vertex_c.x - vertex_b.x,\n        vertex_c.x * vertex_a.y - vertex_a.x * vertex_c.y, vertex_c.y - vertex_a.y, vertex_a.x - vertex_c.x,\n        vertex_a.x * vertex_b.y - vertex_b.x * vertex_a.y, vertex_a.y - vertex_b.y, vertex_b.x - vertex_a.x\n    );\n    return vec3(1.0, point.x, point.y) * matrix / double_signed_area;\n}*/\n\nvec3 cartesian_to_barycentric(int triangle_index, vec2 point) {\n    /* Preprocessing which already happend:\n    float double_signed_area = vertex_a.x * (vertex_b.y - vertex_c.y) + vertex_b.x * (vertex_c.y - vertex_a.y) + vertex_c.x * (vertex_a.y - vertex_b.y);\n    float scale = 1.0 / double_signed_area;\n    vec2 offset = vec2(vertex_b.x * vertex_c.y - vertex_c.x * vertex_b.y, vertex_c.x * vertex_a.y - vertex_a.x * vertex_c.y) * scale;\n    vec2 dir_x = vec2(vertex_b.y - vertex_c.y, vertex_c.y - vertex_a.y) * scale;\n    vec2 dir_y = vec2(vertex_c.x - vertex_b.x, vertex_a.x - vertex_c.x) * scale;*/\n    vec2 offset = integral_quadratic_matrices[triangle_index];\n    vec2 dir_x = integral_quadratic_matrices[triangle_index + 1];\n    vec2 dir_y = integral_quadratic_matrices[triangle_index + 2];\n    vec2 bary = offset + point.x * dir_x + point.y * dir_y;\n    return vec3(bary, 1.0 - bary.x - bary.y);\n}\n\nbool side_of_line(vec2 vertex_a, vec2 vertex_b, vec2 point) {\n    // vec2 normal = (vertex_b - vertex_a).yx * vec2(-1.0, 1.0);\n    vec2 normal = vec2(vertex_a.y - vertex_b.y, vertex_b.x - vertex_a.x);\n    return dot(normal, point - vertex_a) >= 0.0;\n}\n\n/*bool is_cartesian_point_in_triangle(vec2 vertex_a, vec2 vertex_b, vec2 vertex_c, vec2 point) {\n    return side_of_line(vertex_a, vertex_b, point) &&\n           side_of_line(vertex_b, vertex_c, point) &&\n           side_of_line(vertex_c, vertex_a, point);\n}*/\n\n/*bool is_barycentric_point_in_triangle(vec3 bary) {\n    return bary.x > 0.0 && bary.y > 0.0 && bary.z > 0.0;\n}*/\n\nbool side_of_implicit_curve(vec3 bary) {\n    // vec2 weights = bary.x * vec2(1.0, 1.0) + bary.y * vec2(0.5, 0.0) + bary.z * vec2(0.0, 0.0);\n    vec2 weights = bary.xx;\n    weights.x += bary.y * 0.5;\n    return weights.x * weights.x - weights.y <= 0.0;\n}\n\nvoid count_winding(inout int counter, vec2 vertex_a, vec2 vertex_b, vec2 point) {\n    /*if(vertex_a.y == vertex_b.y)\n        return;\n    if(vertex_a.y <= point.y) {\n        if(vertex_b.y > point.y && side_of_line(vertex_a, vertex_b, point))\n            ++counter;\n    } else {\n        if(vertex_b.y <= point.y && !side_of_line(vertex_a, vertex_b, point))\n            --counter;\n    }*/\n    if(vertex_a.y <= point.y)\n        counter += int(vertex_b.y > point.y && side_of_line(vertex_a, vertex_b, point));\n    else\n        counter -= int(vertex_b.y <= point.y && !side_of_line(vertex_a, vertex_b, point));\n}\n\nvoid polygon_point_winding(inout int counter, int start_index, int end_index, vec2 point) {\n    // https://web.archive.org/web/20130126163405/http://geomalgorithms.com/a03-_inclusion.html\n    // https://towardsdatascience.com/is-the-point-inside-the-polygon-574b86472119\n    vec2 first_vertex = poly_line_vertices[start_index];\n    vec2 prev_vertex = first_vertex;\n    for(int index = start_index + 1; index < end_index; ++index) {\n        vec2 next_vertex = poly_line_vertices[index];\n        count_winding(counter, prev_vertex, next_vertex, point);\n        prev_vertex = next_vertex;\n    }\n    count_winding(counter, prev_vertex, first_vertex, point);\n}\n\nbool sample_coverage(vec2 point) {\n    int counter = 0;\n    for(int shape_index = 0; shape_index < poly_line_indices.length(); ++shape_index) {\n        vec4 bounding_box = bounding_boxes[shape_index];\n        if(bounding_box[0] > point.x || bounding_box[1] < point.x)\n            continue;\n\n        // Line Segments\n        polygon_point_winding(counter, poly_line_indices[shape_index], poly_line_indices[shape_index + 1], point);\n\n        // Bezier Curves\n        for(int curve_index = integral_quadratic_indices[shape_index]; curve_index < integral_quadratic_indices[shape_index + 1]; curve_index += 3) {\n            vec3 bary = cartesian_to_barycentric(curve_index, point);\n            if(bary.y > 0.0 && side_of_implicit_curve(bary))\n                ++counter;\n        }\n    }\n    return (counter & 1) == 1;\n}\n\nconst vec2 multi_samples[] = vec2[](\n    // vec2(0.0,  0.0)\n    vec2(-1.0 / 6.0,  0.5),\n    vec2(0.5, 1.0 / 6.0),\n    vec2(1.0 / 6.0,  -0.5),\n    vec2(-0.5, -1.0 / 6.0)\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float scale_factor = 12.0;\n    vec2 point = (fragCoord / iResolution.xy - vec2(0.5));\n    point.y *= iResolution.y / iResolution.x;\n    // point.xy -= (iMouse.xy - iResolution.xy * 0.5) / iResolution.x;\n    point.xy *= scale_factor;\n    point.y += sin(point.x - iTime);\n    \n    // Multisample anti-aliasing (MSAA)\n    int coverage_sum = 0;\n    vec2 sample_size = vec2(scale_factor) / iResolution.xx;\n    for(int sample_index = 0; sample_index < multi_samples.length(); ++sample_index) {\n        if(sample_coverage(point + multi_samples[sample_index] * sample_size))\n            ++coverage_sum;\n    }\n    fragColor.rgb = vec3(float(coverage_sum) / float(multi_samples.length()));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}