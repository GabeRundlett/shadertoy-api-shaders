{
    "Shader": {
        "info": {
            "date": "1674614564",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "dtsXWr",
            "likes": 10,
            "name": "Randomized Dithering Experiment",
            "published": 3,
            "tags": [
                "color",
                "random",
                "dither",
                "image"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 281
        },
        "renderpass": [
            {
                "code": "// 0=disable, 1=enable\n#define RANDOM_DITHER 1\n\n#define Hex(c) vec3(c >> 16, c >> 8 & 255, c & 255) / 255.\nconst vec3[] palette = vec3[](\n    Hex(0x000000),\n    Hex(0x626262),\n    Hex(0x898989),\n    Hex(0xADADAD),\n    Hex(0xFFFFFF),\n    Hex(0x9F4E44),\n    Hex(0xCB7E75),\n    Hex(0x6D5412),\n    Hex(0xA1683C),\n    Hex(0xC9D487),\n    Hex(0x9AE29B),\n    Hex(0x5CAB5E),\n    Hex(0x6ABFC6),\n    Hex(0x887ECB),\n    Hex(0x50459B),\n    Hex(0xA057A3)\n);\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash21(in vec2 p) {\n    vec3 p3 = fract(p.xyx * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 imgColor = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n\n    //fwidth(length(imgColor)) > 1e-6\n\n    if (RANDOM_DITHER == 1) {// && fwidth(length(imgColor)) > 1e-6) {\n        // Calculate a similarity metric between the pixel color and\n        // each color in the palette\n        float[palette.length()] M;\n        float total = 0.0;\n        for (int i=0; i < palette.length(); i++) {\n            vec3 palColor = palette[i];\n            float m = 1.0 - max(abs(palColor.x - imgColor.x), max(abs(palColor.y - imgColor.y), abs(palColor.z - imgColor.z)));\n            M[i] = m;\n            total += m;\n        }\n\n        // Weight the chances toward more likely matches\n        float totalM = total;\n        total = 0.0;\n        for (int i=0; i < palette.length(); i++) {\n            float pickChance = M[i] / totalM;\n            pickChance = pow(pickChance, 20.0);\n            M[i] = pickChance;\n            total += pickChance;\n        }\n\n        // Select palette color\n        float rand = Hash21(fragCoord);\n        float low = 0.0;\n        for (int i=0; i < palette.length(); i++) {\n            vec3 palColor = palette[i];\n            float pickChance = M[i] / total;\n            float high = low + pickChance;\n            if (rand >= low && rand <= high) {\n                fragColor = vec4(palColor, 1.0);\n                break;\n            }\n\n            low = high;\n        }\n    } else {\n        float bestM = 0.0;\n        for (int i=0; i < palette.length(); i++) {\n            vec3 palColor = palette[i];\n            float m = 1.0 - max(abs(palColor.x - imgColor.x), max(abs(palColor.y - imgColor.y), abs(palColor.z - imgColor.z)));\n            if (m > bestM) {\n                fragColor = vec4(palColor, 1.0);\n                bestM = m;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}