{
    "Shader": {
        "info": {
            "date": "1549690412",
            "description": "Trying some fake fluid mechanics and pseudo stochastic particles.",
            "flags": 32,
            "hasliked": 0,
            "id": "wdS3Rd",
            "likes": 5,
            "name": "DiffusionOne",
            "published": 3,
            "tags": [
                "2d",
                "simulation"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord / iResolution.xy;\n\n    fragColor = texture( iChannel0, uv );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define dt 0.4\n#define dx dt * 0.5\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n\nfloat hash( vec2 uv )\n{\n\n\treturn fract( sin( uv.x * 2423.24 + uv.y * 7366.31 ) * 3221.32 );\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat noise( vec2 uv )\n{\n\n\tvec2 id = floor( uv );\n\tvec2 lv = fract( uv );\n\n\tlv *= lv * ( 3.0 - 2.0 * lv );\n\n\tvec2 t = vec2( hash( id + vec2( 0, 1 ) ), hash( id + vec2( 1 ) ) );\n    vec2 b = vec2( hash( id ), hash( id + vec2( 1, 0 ) ) );\n\n    float tM = mix( t.x, t.y, lv.x );\n    float bM = mix( b.x, b.y, lv.x );\n\n\tfloat fin = mix( bM, tM, lv.y );\n\n\treturn fin;\n\n}\n\nfloat fbm( vec2 uv )\n{\n\n\tfloat amp = 1.0, fre = 1.0, res = 0.0, div = 0.0;\n\n\tfor( int i = 0; i < 7; ++i )\n\t{\n\n\t\tres += amp * noise( uv * fre + iTime );\n\t\tdiv += amp;\n\t\tamp *= 0.9;\n\t\tfre *= 2.0;\n\n\t}\n\n\tres /= div;\n\n\treturn res;\n}\n\nfloat cir( float r, vec2 uv )\n{\n\n\treturn smoothstep( r, r - 0.005, length( uv ) );\n\n}\n\nfloat cur( vec2 uv )\n{\n    \n    float xpi = 1.0 / iResolution.x;\n    float ypi = 1.0 / iResolution.y;\n    \n    float x = uv.x;\n    float y = uv.y;\n    \n    float top = texture( iChannel0, vec2( x, y + ypi ) ).r;\n    float lef = texture( iChannel0, vec2( x - xpi, y ) ).r;\n    float rig = texture( iChannel0, vec2( x + xpi, y ) ).r;\n    float dow = texture( iChannel0, vec2( x, y - ypi ) ).r;\n    \n    float dY = ( top - dow ) * 0.5;\n    float dX = ( rig - lef ) * 0.5;\n    \n    return dX * dY;\n}\n\nvec2 vor( vec2 uv )\n{\n    \n    vec2 pre = uv;\n    \n    float xpi = 1.0 / iResolution.x;\n    float ypi = 1.0 / iResolution.y;\n    \n    float x = uv.x;\n    float y = uv.y;\n\n    vec2 dir = vec2( 0 );\n    dir.y = ( cur( vec2( x, y + ypi ) ) ) - ( cur( vec2( x, y - ypi ) ) );\n    dir.x = ( cur( vec2( x + xpi, y ) ) ) - ( cur( vec2( x - xpi, y ) ) );\n    \n    dir = normalize( dir );\n    \n    if( length( dir ) > 0.0 )\n    \n    uv -= dt * 10.0 * cur( uv ) * dir;\n    \n    return uv;\n    \n}\n\nvec2 div( vec2 uv )\n{\n\n\tfloat x = 1.0 / iResolution.x;\n\tfloat y = 1.0 / iResolution.y;\n\n    float top = texture( iChannel0, vec2( uv.x, uv.y + y ) ).r;\n    float tor = texture( iChannel0, vec2( uv.x + x, uv.y + y ) ).r;\n    float tol = texture( iChannel0, vec2( uv.x - x, uv.y + y ) ).r;\n    float cen = texture( iChannel0, uv ).r;\n    float rig = texture( iChannel0, vec2( uv.x + x, uv.y ) ).r;\n    float bot = texture( iChannel0, vec2( uv.x, uv.y - y ) ).r;\n    float lef = texture( iChannel0, vec2( uv.x - x, uv.y ) ).r;\n    float bor = texture( iChannel0, vec2( uv.x + x, uv.y - y ) ).r;\n    float bol = texture( iChannel0, vec2( uv.x - x, uv.y - y ) ).r;\n\n    float dY = ( ( top ) - ( bot ) );\n    float dXY = ( tor ) - ( bol );\n    float dX = ( ( rig ) - ( lef ) );\n    float dYX = ( bor ) - ( tol );\n    float lar = dXY - dYX;\n    float lal = dYX - dXY;\n    float ce = lar - lal;\n\n    return vec2( dX, dY ) * 0.5; \n\n}\n\nvec2 pre( vec2 uv )\n{\n\n    uv -= dt * dx * ( div( uv ) );\n\n    return uv;\n\n}\n\nvec2 vel( vec2 uv )\n{\n\n\tvec2 pr = pre( uv );\n\tvec2 die = div( uv );\n\n\tuv += dt * dx * die - pr;\n\n\treturn uv;\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = fragCoord.xy / iResolution.y;\n    vec2 c = ( -iResolution.xy + 2.0 * fragCoord.xy ) / iResolution.y;\n\n    vec2 mou = iMouse.xy / iResolution.y;\n\n    float x = 1.0 / iResolution.x;\n    float y = 1.0 / iResolution.y;\n\n    float fmu = 2.8;\n    \n    uv -= dt * dx * vel( uv );\n\n    vec4 cam = texture( iChannel1, uv );\n    vec4 cen = texture( iChannel0, uv );\n    vec4 top = texture( iChannel0, vec2( uv.x, uv.y + y ) );\n    vec4 rig = texture( iChannel0, vec2( uv.x + x, uv.y ) );\n    vec4 bot = texture( iChannel0, vec2( uv.x, uv.y - y ) );\n    vec4 lef = texture( iChannel0, vec2( uv.x - x, uv.y ) );\n\n    vec4 col = vec4( 0 ); float r = 0.005, mul = 3.0;\n    \n    bool flag = true;\n    \n    for( int i = 0; i < 1000; ++i )\n    {\n    \n        vec2 n = hash22( vec2( i ) );\n        //vec2 pO = sin( n * ( iTime * 1.0 ) );\n        vec2 pO = ( -iResolution.xy * sin( n * ( iTime * 0.8 ) + iDate.z ) ) / iResolution.y;\n     \n        float d = cir( r, c - pO ); \n        \n        if( flag == true && cir( r, c - pO ) > 0.1 && iFrame > 50 )\n        \n        col += 1.0 * vec4( noise( uv * mul * iTime ),\n                     \t   noise( uv * mul * iTime + 1.0 ),\n                  \t \t   noise( uv * mul * iTime + 2.0 ),\n                           1\n                         );\n        \n        if( flag == false && cir( r, c - pO ) > 0.1 && iFrame > 50 )\n        {\n        \n            col -= 0.5;\n            \n        }\n        \n        if( iFrame > 500 && uv.x > 0.1 && uv.y > 0.1 && uv.x < 0.9 && uv.y < 0.9 )\n        \n            col = clamp( col, -0.5, 1.0 );\n        \n        else\n        {\n        \n            col = clamp( col, 0.0, 0.8 );\n        \n        }\n        \n        if( iFrame % 5 == 1 ) \n        flag = !flag;\n        \n    }\n    \n    if( cir( 0.05, p - mou ) > 0.1 && iMouse.z > 0.1 ) \n        col += 1.3 * vec4( noise( uv * mul * iTime ),\n                           noise( uv * mul * iTime + 1.0 ),\n                           noise( uv * mul * iTime + 2.0 ),\n                           1\n                         );\n        //col = clamp( col - 0.1, -0.10, 1.0 );\n\n    vec4 dif = 0.25 * ( lef + rig + bot + top ) - cen;\n    \n    dif += col;\n\n    fragColor = texture( iChannel0, uv ) + dif;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}