{
    "Shader": {
        "info": {
            "date": "1553422359",
            "description": "3D knit pattern",
            "flags": 0,
            "hasliked": 0,
            "id": "tsBSDz",
            "likes": 9,
            "name": "Knit",
            "published": 3,
            "tags": [
                "loop",
                "knot",
                "weave",
                "knit"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 469
        },
        "renderpass": [
            {
                "code": "// \"Knit\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// 3D knit pattern (earlier 2D version is FabriceNeyret2's \"Weaving\")\n\nfloat PrTorus4Df (vec3 p, float ri, float rc);\nvec2 Rot2D (vec2 q, float a);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir;\nvec2 bSize, cId;\nfloat dstFar, tCur, cDiam;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  p.y -= 0.5;\n  q = p;\n  q += vec3 ((q.z + abs (q.x) > 0.25) ? vec2 (0., -0.25) :\n     vec2 (((q.x > 0.) ? -0.5 : 0.5), 0.25), -0.25 * q.z * q.z).xzy;\n  d = PrTorus4Df (q.xzy, 0.035, 0.5 * cDiam);\n  DMIN (1);\n  q = p;\n  q.z -= cDiam;\n  q += vec3 ((q.z + abs (q.x) > 0.25) ? vec2 (0., -0.25) :\n     vec2 (((q.x > 0.) ? -0.5 : 0.5), 0.25), -0.25 * q.z * q.z).xzy;\n  d = PrTorus4Df (q.xzy, 0.035, 0.5 * cDiam);\n  DMIN (2);\n  q = p;\n  q.z += cDiam;\n  q += vec3 ((q.z + abs (q.x) > 0.25) ? vec2 (0., -0.25) :\n     vec2 (((q.x > 0.) ? -0.5 : 0.5), 0.25), -0.25 * q.z * q.z).xzy;\n  d = PrTorus4Df (q.xzy, 0.035, 0.5 * cDiam);\n  DMIN (2);\n  return 0.7 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi;\n  vec2 s;\n  float dHit, d, eps;\n  eps = 0.0005;\n  dHit = eps;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  ro.xz /= bSize;\n  rd.xz /= bSize;\n  rdi.xz = 1. / rd.xz;\n  for (int j = 0; j < 180; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p.xz);\n    s = (cId + step (0., rd.xz) - p.xz) * rdi.xz;\n    d = min (ObjDf (vec3 (bSize * (p.xz - cId - 0.5), p.y).xzy), abs (min (s.x, s.y)) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  p.xz -= bSize * (cId + 0.5);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec2 FlatCvHt (vec2 p)\n{\n  float d, h;\n  p = mod (p, vec2 (1., 2. * cDiam)) - 0.5 * vec2 (1., 2. * cDiam);\n  d = length (p + ((p.y + abs (p.x) > 0.25) ? vec2 (0., -0.25) :\n     vec2 (((p.x > 0.) ? -0.5 : 0.5), 0.25))) - 0.5 * cDiam;\n  h = 0.6 * (1. - smoothstep (-0.01, 0.01, abs (d) - 0.05)) * (1. + 2. * p.y * p.y);\n  return vec2 (h, d);\n}\n\nvec3 FlrCol (vec2 p, vec3 col)\n{\n  vec3 c;\n  vec2 w, w1, w2;\n  p += 0.2 * sin (0.5 * tCur + vec2 (0.5 * pi, 0.));\n  w1 = FlatCvHt (p);\n  w2 = FlatCvHt (p + vec2 (0., cDiam));\n  if (w1.x > w2.x) {\n    c = vec3 (0.7, 0.65, 0.);\n    w = w1;\n  } else {\n    c = vec3 (0.7, 0.7, 0.75);\n    w = w2;\n  }\n  c *= w.x * (0.2 + 0.8 * cos (0.5 * pi * w.y / 0.06));\n  col = max (c, col);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, bgCol;\n  float dstObj, dstFlr, nDotL;\n  cDiam = sqrt (0.5);\n  bSize = vec2 (1., 2. * cDiam);\n  dstObj = ObjRay (ro, rd);\n  bgCol = vec3 (0.8, 0.5, 0.6) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    col = (idObj == 1) ? vec3 (0.7, 0.65, 0.) : vec3 (0.7, 0.7, 0.75);\n    vn = ObjNf (ro);\n    vn = VaryNf (128. * ro, vn, 0.3);\n    nDotL = max (dot (vn, ltDir), 0.);\n    col = col * (0.2 + 0.8 * nDotL * nDotL) +\n       0.3 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    col = mix (col, bgCol, smoothstep (0.5, 1., dstObj / dstFar));\n  } else if (rd.y < 0.) {\n    dstFlr = - ro.y / rd.y;\n    if (dstFlr < dstFar) {\n      ro += dstFlr * rd;\n      col = FlrCol (ro.xz, bgCol);\n      col = mix (col, bgCol, smoothstep (0.5, 1., dstFlr / dstFar));\n    } else col = bgCol;\n  } else {\n    col = bgCol;\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.25 * pi;\n  if (mPtr.z > 0.) {\n    az += 1.5 * pi * mPtr.x;\n    el += 0.6 * pi * mPtr.y;\n  } else {\n    az -= 0.01 * pi * tCur;\n    el -= 0.15 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.5 * pi, -0.1 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -10.);\n  dstFar = 40.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 5.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.9)), 1.);\n}\n\nfloat PrTorus4Df (vec3 p, float ri, float rc)\n{\n  vec2 q;\n  q = vec2 (length (p.xy) - rc, p.z);\n  q *= q;\n  return sqrt (sqrt (dot (q * q, vec2 (1.)))) - ri;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}