{
    "Shader": {
        "info": {
            "date": "1676729489",
            "description": "Inspired by this video : https://youtu.be/RTB5XhjbgZA",
            "flags": 0,
            "hasliked": 0,
            "id": "DtjSW3",
            "likes": 1,
            "name": "Segmented Displays",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Karp",
            "viewed": 137
        },
        "renderpass": [
            {
                "code": "//Reminder\nfloat SegmentedNumber(float value, vec2 uv, float thickness, float AA)\n{\n    float result;\n    float line;\n    \n    if(abs(mod(value - 1.,3.)) > .5)\n    {\n        //_ -> 1 4 7 \n        line = sdLine(uv, vec2(-.15,-.4), vec2(.15,-.4)) - thickness;\n        result = mix(result, 1., step(line, 0.));\n    }\n    \n    if(value > 1.5 && abs(value-7.) > .5)\n    {\n        //- -> 0 1 7 \n        line = sdLine(uv, vec2(-.15,.0), vec2(.15,.0)) - thickness;\n        result = mix(result, 1., step(line, 0.));\n    }\n    \n    if(abs(value-1.)>.5 && abs(value-4.)>.5)\n    {\n        //- top\n        line = sdLine(uv, vec2(-.15,.4), vec2(.15,.4)) - thickness;\n        result = mix(result, 1., step(line, 0.));\n    }\n    \n    if(abs(value-2.)>1.5 && abs(value-7.)>.5)\n    {\n        //|- top\n        line = sdLine(uv, vec2(-.2,.05), vec2(-.2,.35)) - thickness;\n        result = mix(result, 1., step(line, 0.));\n    }\n    \n    if(mod(value + 1.,2.)>.5 && abs(value-4.)>.5)\n    {\n        //|-\n        line = sdLine(uv, vec2(-.2,-.05), vec2(-.2,-.35)) - thickness;\n        result = mix(result, 1., step(line, 0.));\n    }\n    \n    if(abs(value-5.5)>.75)\n    {\n        //-| top\n        line = sdLine(uv, vec2(.2,.05), vec2(.2,.35)) - thickness;\n        result = mix(result, 1., step(line, 0.));\n    }\n    \n    if(abs(value-2.)>.5)\n    {\n        //-|\n        line = sdLine(uv, vec2(.2,-.05), vec2(.2,-.35)) - thickness;\n        result = mix(result, 1., step(line, 0.));\n    }\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UV manipulation\n    vec2 uv = AspectRatioUV(fragCoord.xy, iResolution.xy);\n    uv *= 0.5;\n    \n    //Parameter\n    float time = iTime;\n    float value = floor(mod(iTime, 10.));\n    float value2 = floor(mod(iTime/10., 10.));\n    float thickness = .025;\n    float AA = .1;\n    \n    //Visu\n    vec3 pix = vec3(0.2);\n    float line;\n    \n    pix = mix(pix, vec3(.8), SegmentedNumber(value, uv + vec2(-.3,.0), thickness, AA));\n    pix = mix(pix, vec3(.8), SegmentedNumber(value2, uv + vec2(.3,.0), thickness, AA));\n    \n\tfragColor = vec4(pix, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Constant\n#define PI  3.14159265359\n#define TAU 6.28318530717\n\n//Color\n#define black   vec3(0.0)\n#define grey    vec3(0.5)\n#define white   vec3(1.0)\n//\n#define red     vec3(1.0,0.0,0.0)\n#define green   vec3(0.0,1.0,0.0)\n#define blue    vec3(0.0,0.0,1.0)\n//\n#define cyan    vec3(0.0,1.0,1.0)\n#define yellow  vec3(1.0,1.0,0.0)\n#define magenta vec3(1.0,0.0,1.0)\n\n///Inigo Quilez Signed Distance Field\n//https://iquilezles.org/articles/distfunctions2d\n///Playlist shadertoy SDF : \n//https://www.shadertoy.com/playlist/MXdSRf&from=36&num=12\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n///UV (TextCoord)\nvec2 CenterUV(vec2 fragCoord, vec2 resolution)\n{\n    ///Centering Operation\n\tvec2 uv = vec2( fragCoord.xy - 0.5 * resolution.xy );\n\t// [0, iResolution.x] -> [-0.5*iResolution.x, 0.5*iResolution.x]\n\t// [0, iResolution.y] -> [-0.5*iResolution.y, 0.5*iResolution.y]\n    return uv;\n}\nvec2 FullScreenUV(vec2 fragCoord, vec2 resolution)\n{\t\n    vec2 uv = CenterUV(fragCoord.xy, resolution);\n    uv = 2.0 * uv.xy / resolution.xy;\n\t// [-iResolution.x/2, iResolution.x/2] -> [-1.0, 1.0]\n    // [-iResolution.y/2, iResolution.y/2] -> [-1.0, 1.0]\n    \n    return uv;\n}\nvec2 AspectRatioUV(vec2 fragCoord, vec2 resolution)\n{\t\n    vec2 uv = CenterUV(fragCoord.xy, resolution);\n\tuv = 2.0 * uv.xy / resolution.y;\n    // AspectRatio = 1920/1080 = 1.778\n    // [-iResolution.x/2, iResolution.x/2] ->[-1.778, 1.778]\n\t// [-iResolution.y/2, iResolution.y/2] ->[-1, 1]\n    return uv;\n}\nvec2 RotateUV(vec2 uv, float angle)\n{\t\n    //angle in degree (TAU = 2PI = 360 degrees)\n\tangle = angle * PI / 180.0;\n    return uv * mat2( cos(angle), sin(angle),\n                     -sin(angle), cos(angle));\n}\n\n///COLOR\nvec3 Color255(int R, int G, int B)\n{\n    float rat = 1.0/255.0;\n    return vec3(float(R)*rat, float(G)*rat, float(B)*rat);\n}\n//Sources: https://gist.github.com/yiwenl/745bfea7f04c456e0101, https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 HSV2RGB(vec3 c){\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n//Source: https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 RGB2HSV(vec3 c){\n\tvec4 K=vec4(0.,-1./3.,2./3.,-1.),\n\t     p=mix(vec4(c.bg ,K.wz),vec4(c.gb,K.xy ),step(c.b,c.g)),\n\t     q=mix(vec4(p.xyw,c.r ),vec4(c.r ,p.yzx),step(p.x,c.r));\n\tfloat d=q.x-min(q.w,q.y),\n\t      e=1e-10;\n\treturn vec3(abs(q.z+(q.w-q.y)/(6.*d+e)),d/(q.x+e),q.x);\n}\nvec3 HueShiftcolor(vec3 c, float shift)\n{\n    c = RGB2HSV(c);\n    c = vec3(mod(c.x + shift,1.), c.yz);\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//Maths\nfloat clamp01(float value) {return clamp(value,0.0,1.0);}\nfloat saturate(float value) {return clamp(value,0.0,1.0);}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}