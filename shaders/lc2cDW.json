{
    "Shader": {
        "info": {
            "date": "1722363018",
            "description": "fractal generated from a ball bouncing around starting with 0 velocity at the position of the pixel. Click with the mouse to show the path of the ball at that point.",
            "flags": 0,
            "hasliked": 0,
            "id": "lc2cDW",
            "likes": 3,
            "name": "bouncing ball chaos fractal",
            "published": 3,
            "tags": [
                "fractal",
                "circle",
                "ball",
                "chaos",
                "physics",
                "quartic",
                "bouncingball",
                "differential",
                "divider"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 87
        },
        "renderpass": [
            {
                "code": "#define G -9.81\n#define BOUNCES 6\n#define ENERGY_LOSS 0.\n\nvec2 getPos(vec2 p0, vec2 v0, float t) {\n    return vec2(0.,G)*t*t*.5 + v0*t + p0;\n}\nvec2 getVel(vec2 v0, float t) {\n    return vec2(0.,G)*t + v0;\n}\nvec2 getNormal(vec2 p) {\n    return -normalize(p);\n}\nfloat getTravelTime(vec2 p, vec2 v) {\n    float a = G*G*.25;\n    float b = G*v.y;\n    float c = v.x*v.x+v.y*v.y+G*p.y;\n    float d = 2.*v.x*p.x+2.*v.y*p.y;\n    float e = p.x*p.x+p.y*p.y-1.;\n    \n    vec4 roots;\n    int nroots = solveQuartic(a, b, c, d, e, roots);\n    \n    float t = -1.;\n    for (int n = 0; n < nroots; n++) {\n        float root = roots[n];\n        if ((root <= t || t < 0.) && root > 0.) {\n            t = root;\n        }\n    }\n    \n    return t;\n}\nbool getInPath(vec2 p, vec2 v, vec2 uv, float tmax, inout vec2 prevp) {\n    const float density = .02;\n    float thickness = 3./iResolution.y;\n    float t = 0.;\n    \n    while (t < tmax && t >= 0.) {\n        vec2 newp = getPos(p, v, t);\n        if (dline(uv, prevp, newp) < thickness) {\n            return true;\n        }\n        t += density;\n        prevp = newp;\n    }\n    \n    if (dline(uv, prevp, getPos(p, v, tmax)) < thickness) {\n        return true;\n    }\n    \n    return false;\n}\nvec2 getPos(vec2 p, vec2 v, inout bool outside) {\n    outside = length(p)>1.?true:false;\n    \n    for (int i = 0; i < BOUNCES; i++) {\n        float t = getTravelTime(p, v);\n        \n        if (t <= 0. || length(p) > 1. || outside) {\n            outside = true;\n            break;\n        }\n        vec2 newp = getPos(p, v, t);\n        \n        vec2 newv = getVel(v, t);\n        float r = length(newv);\n        vec2 normal = getNormal(newp);\n        newv = reflect(newv/r,normal)*r*(1.-ENERGY_LOSS);\n        \n        p = newp + normal*1e-5;\n        v = newv;\n    }\n    \n    return p;\n}\nvoid tracePath(vec2 p, vec2 v, vec2 uv, inout bool inCurve) {\n    inCurve = false;\n    vec2 prevp = p;\n    \n    for (int i = 0; i < BOUNCES; i++) {\n        float t = getTravelTime(p, v);\n        \n        if (t <= 0. || length(p) > 1.) {\n            break;\n        }\n        if (!inCurve) if(getInPath(p, v, uv, t, prevp)) inCurve = true;\n        vec2 newp = getPos(p, v, t);\n        \n        vec2 newv = getVel(v, t);\n        float r = length(newv);\n        vec2 normal = getNormal(newp);\n        newv = reflect(newv/r,normal)*r*(1.-ENERGY_LOSS);\n        \n        p = newp + normal*1e-5;\n        v = newv;\n    }\n}\nvec3 getCol(vec2 p) {\n    float angle = (atan(abs(p.x), p.y) + 3.14159265358979)/(3.14159265358979*2.0);\n    vec3 col = hsv_to_rgb(vec3(mod(-angle*720.,360.),.75,.75));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    uv *= 2.333;\n    vec2 m = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    m *= 2.333;\n    \n    bool outside;\n    vec2 p = getPos(uv, vec2(1e-7), outside);\n    \n    bool inCurve = false;\n    float t;\n    if (iMouse.z > .5) tracePath(m, vec2(1e-7), uv, inCurve);\n    \n    vec3 col = vec3(0.);\n    if (!outside) {\n        col = getCol(p);\n    } else {\n        float rad = 1.-step(.01, abs(1.1-length(uv)));\n        col = getCol(uv)*rad;\n    }\n    \n    if (inCurve) col = vec3(1.);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 hsv_to_rgb(vec3 hsv) {\n    float C = hsv.z*hsv.y;\n    float X = C*(1.-abs(mod(hsv.x/60.,2.)-1.));\n    float m = hsv.z-C;\n    \n    vec3 rgb = vec3(C,X,0.);\n    if (hsv.x <= 120. && hsv.x >= 60.) {\n        rgb = vec3(X,C,0.);\n    } else if (hsv.x <= 180. && hsv.x >= 120.) {\n        rgb = vec3(0.,C,X);\n    } else if (hsv.x <= 240. && hsv.x >= 180.) {\n        rgb = vec3(0.,X,C);\n    } else if (hsv.x <= 300. && hsv.x >= 240.) {\n        rgb = vec3(X,0.,C);\n    } else if (hsv.x <= 360. && hsv.x >= 300.) {\n        rgb = vec3(C,0.,X);\n    }\n    rgb += m;\n    \n    return rgb;\n}\n\nfloat cbrt(in float x) { return sign(x) * pow(abs(x), 1.0 / 3.0); }\nint solveQuartic(in float a, in float b, in float c, in float d, in float e, inout vec4 roots) {\n    b /= a; c /= a; d /= a; e /= a; // Divide by leading coefficient to make it 1\n\n    // Depress the quartic to x^4 + px^2 + qx + r by substituting x-b/4a\n    // This can be found by substituting x+u and the solving for the value\n    // of u that makes the t^3 term go away\n    float bb = b * b;\n    float p = (8.0 * c - 3.0 * bb) / 8.0;\n    float q = (8.0 * d - 4.0 * c * b + bb * b) / 8.0;\n    float r = (256.0 * e - 64.0 * d * b + 16.0 * c * bb - 3.0 * bb * bb) / 256.0;\n    int n = 0; // Root counter\n\n    // Solve for a root to (t^2)^3 + 2p(t^2)^2 + (p^2 - 4r)(t^2) - q^2 which resolves the\n    // system of equations relating the product of two quadratics to the depressed quartic\n    float ra =  2.0 * p;\n    float rb =  p * p - 4.0 * r;\n    float rc = -q * q;\n\n    // Depress using the method above\n    float ru = ra / 3.0;\n    float rp = rb - ra * ru;\n    float rq = rc - (rb - 2.0 * ra * ra / 9.0) * ru;\n\n    float lambda;\n    float rh = 0.25 * rq * rq + rp * rp * rp / 27.0;\n    if (rh > 0.0) { // Use Cardano's formula in the case of one real root\n        rh = sqrt(rh);\n        float ro = -0.5 * rq;\n        lambda = cbrt(ro - rh) + cbrt(ro + rh) - ru;\n    }\n\n    else { // Use complex arithmetic in the case of three real roots\n        float rm = sqrt(-rp / 3.0);\n        lambda = -2.0 * rm * sin(asin(1.5 * rq / (rp * rm)) / 3.0) - ru;\n    }\n\n    // Newton iteration to fix numerical problems (using Horners method)\n    // Suggested by @NinjaKoala\n    for(int i=0; i < 6; i++) {\n        float a_2 = ra + lambda;\n        float a_1 = rb + lambda * a_2;\n        float b_2 = a_2 + lambda;\n\n        float f = rc + lambda * a_1; // Evaluation of λ^3 + ra * λ^2 + rb * λ + rc\n        float f1 = a_1 + lambda * b_2; // Derivative\n\n        lambda -= f / f1; // Newton iteration step\n    }\n\n    // Solve two quadratics factored from the quartic using the cubic root\n    if (lambda < 0.0) return n;\n    float t = sqrt(lambda); // Because we solved for t^2 but want t\n    float alpha = 2.0 * q / t, beta = lambda + ra;\n\n    float u = 0.25 * b;\n    t *= 0.5;\n\n    float z = -alpha - beta;\n    if (z > 0.0) {\n        z = sqrt(z) * 0.5;\n        float h = +t - u;\n        roots.xy = vec2(h + z, h - z);\n        n += 2;\n    }\n\n    float w = +alpha - beta;\n    if (w > 0.0) {\n        w = sqrt(w) * 0.5;\n        float h = -t - u;\n        roots.zw = vec2(h + w, h - w);\n        if (n == 0) roots.xy = roots.zw;\n        n += 2;\n    }\n\n    return n;\n}\n\nfloat dline( vec2 p, vec2 a, vec2 b ) {\n    vec2 v = a, w = b;\n    \n    float l2 = pow(distance(w, v), 2.);\n    if(l2 == 0.0) return distance(p, v);\n    \n    float t = clamp(dot(p - v, w - v) / l2, 0., 1.);\n    vec2 j = v + t * (w - v);\n    \n    return distance(p, j);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}