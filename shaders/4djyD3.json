{
    "Shader": {
        "info": {
            "date": "1494114132",
            "description": "Understanding Perlin Noise 1D",
            "flags": 0,
            "hasliked": 0,
            "id": "4djyD3",
            "likes": 11,
            "name": "Understanding Perlin Noise 1D",
            "published": 3,
            "tags": [
                "perlin"
            ],
            "usePreview": 0,
            "username": "fscur",
            "viewed": 943
        },
        "renderpass": [
            {
                "code": "//http://flafla2.github.io/2014/08/09/perlinnoise.html\n//https://web.archive.org/web/20160530124230/http://freespace.virgin.net/hugo.elias/models/m_perlin.htm\n//http://eastfarthing.com/blog/2015-04-21-noise/\n//https://www.youtube.com/watch?v=Or19ilef4wE\n//https://www.youtube.com/watch?v=MJ3bvCkHJtE\n\n//https://www.shadertoy.com/view/4djSRW\n//#define HASHSCALE1 .1031\n#define HASHSCALE1 443.8975\n\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat lerp(float a, float b, float t)\n{\n\treturn a + t * (b - a);\n}\n\nfloat noise(float p)\n{\n\tfloat i = floor(p);\n    float f = fract(p);\n    \n    float t = f * f * (3.0 - 2.0 * f);\n    \n    return lerp(f * hash11(i), (f - 1.0) * hash11(i + 1.0), t);\n}\n\nfloat fbm(float x, float persistence, int octaves) \n{\n    float total = 0.0;\n    float maxValue = 0.0;\n    float amplitude = 1.0;\n    float frequency = 1.0;\n    \n    for(int i=0; i<octaves;++i)\n    {\n        total += noise(x * frequency) * amplitude;\n        maxValue += amplitude;\n        amplitude *= persistence;\n        frequency *= 2.0;\n    }\n    \n    return (total/maxValue);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x = (fragCoord.x / iResolution.x) * 2.0 - 1.0;\n    x += iTime * 0.1;\n    \n\tfloat y = (fbm(x, 0.5, 4) + 0.5) * iResolution.y;\n    \n    float contour = 1.0 - smoothstep(0.0, 2.0, abs(fragCoord.y - y));\n    \n    vec3 color = vec3(contour);\n    \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}