{
    "Shader": {
        "info": {
            "date": "1533136887",
            "description": "[ variant using cubeMap: 1024x1024 => MIPmap no longer bugged :-) ]\nCompute moments and covariant matrix of Van Damme in order to track him. \nNB: we track the flesh parts: see bottom inset.  Top inset: Recentered rescaled.\nAlmost free using MIPmap.",
            "flags": 0,
            "hasliked": 0,
            "id": "XlcyR2",
            "likes": 24,
            "name": "tracking van damme(almost free)2",
            "published": 3,
            "tags": [
                "tracking",
                "quadratic",
                "integration",
                "fitting",
                "moments",
                "covariant",
                "gpmipmap",
                "gpcubemaps"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1160
        },
        "renderpass": [
            {
                "code": "// cubemap variant of https://shadertoy.com/view/lllBRf\n// Because cubemap = 6x 1024 x 1024  =>  MIPMAP no longer bugged :-)\n// Use example: https://www.shadertoy.com/view/Xlcczj\n\n// See comments in CubeMap\n\n// --- tracking a grouped object using the moments in the image\n// almost free version (thanks MIPmap) of https://shadertoy.com/view/XtG3WK\n\n#define F0(U) vec3( 1 , 1.-2.*(U).yx )           // to index the 6 faces\n#define F1(U) vec3( 2.*(U).x-1. , 1 , 2.*(U).y -1. )\n#define F2(U) vec3( 2.*(U).x-1. , 1. -2.*(U).y , 1 )\n\n#define A(D)  textureLod(iChannel0, D, 99.)      // get the sum on the whole image\n    \nvoid mainImage( out vec4 O,  vec2 U )\n{\n    float I = A(vec3(0,1,0)).z, r, det;          // I average\n    vec2  R = iResolution.xy, u = U / R,\n          M = A(vec3(0,1,0)).xy / I,             // shape barycenter: E(x),E(y)\n         M2 = A(vec3(0,0,1)).xy / I;             // M2 matrix: E(xx), E(yy)\n          r = A(vec3(0,0,1)).z  / I;             //            E(xy)\n    M *= R, M2 *= R*R, r *= R.x*R.y;\n    \n\tM2 = M2 - M*M; r = r - M.x*M.y;              // centered moments\n  //mat2 cov = mat2(M2.x, r, r, M2.y),           // covariant matrix\n  //    icov = inverse( cov );\n    det = M2.x*M2.y-r*r ;\n    mat2 icov = mat2(M2.y, -r, -r, M2.x) / det;  // inverse\n    \n    O = texture(iChannel0, F0(u) );                           // draw image\n    u *= 5.; if (fract(u)==u) O = texture(iChannel0, F0(u)).aaaa; // draw stencil (flech)\n    U -= M;  if (dot( U, icov * U ) < 5. ) O.r++;             // draw covariant ellips ( quadratic form )\t\n    u.y-=4.; if (u.x<1.&&u.y>0.) O = texture(iChannel0, F0(M/R+(u-.5)*6.*(sqrt(M2.x)+sqrt(M2.y))/2./sqrt(R.x*R.y)) ).aaaa;\n}                                                             // recentered rescaled",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Computing all the image moments and store in the cubeMap faces.\n// Why cubeMaps ?\n// - 6 textures in 1\n// - 1024 x 1024. Meaning,  MIPmap no longer bugged !\n//   ( MIPmap of rectangles is a bit bugged on linux, and horribly bugged on Windows ).\n// All the G.P.MIPmap algo are now at hand ! https://www.shadertoy.com/results?query=gpmipmap\n//\n// Still, attention: only half-floats are stored.\n// - I had to recondition the dynamics in [0,1] or it was totally wrong\n// - shaking is due to precision loss.\n\nvoid mainCubemap( out vec4 O, vec2 U, vec3 C, vec3 D )\n{\n    // --- part indentical on the 6 faces\n\n    U /= iResolution.xy;\n    O  = texture(iChannel0, U );           // source image\n    float v = 5.*max(0., O.r - O.g );      // stencil to analyze ( ~= flech )\n\n    \n    // --- part specific to each of the 6 faces. https://www.shadertoy.com/view/Xlcczj\n    \n    vec3 A = abs(D); // seek for max direction: i = invmax(abs(D[i]))\n    int i=0; \n    float      M = A.x; \n    if (A.y>M) M = A.y, i=1;\n    if (A.z>M) M = A.z, i=2;\n    int  faceID = i + 3* int(D[i]<0.);\n    \n    if (faceID==0) // --- raw image\n        O.a = v;   // ( redundant )\n    if (faceID==1) // --- compute M1 moments E(x),E(y) and M0=E(I) in ultimate MIPmap LOD. (M1 to be normalized by M0) \n        O = vec4( U, 1, 0 ) * v;\n    if (faceID==2) // --- compute M2 matrix E(xx),E(yy),E(xy) in ultimate MIPmap LOD (to be normalized by Imean)  \n        O = vec4( U*U, U.x*U.y, 0 ) * v;   \n    if (faceID>2)  // --- don't need last faces \n        O -= O;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            }
        ],
        "ver": "0.1"
    }
}