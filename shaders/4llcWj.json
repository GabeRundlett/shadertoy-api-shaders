{
    "Shader": {
        "info": {
            "date": "1506449607",
            "description": "Based on  [url=https://www.shadertoy.com/view/MsSfWc] Volumetric Stanford Bunny 5  [/url] Mainly data modification.\nVolume created from CT data, filled and axis aligned, using a variant of RLE compression.",
            "flags": 32,
            "hasliked": 0,
            "id": "4llcWj",
            "likes": 30,
            "name": "8bit Stanford Bunny",
            "published": 3,
            "tags": [
                "voxel",
                "volumetricrendering",
                "stanfordbunny"
            ],
            "usePreview": 0,
            "username": "CPU",
            "viewed": 1527
        },
        "renderpass": [
            {
                "code": "// To avoid the OpenGL array bug as in https://www.shadertoy.com/view/ls2BRt \n// (investigated here https://www.shadertoy.com/view/4sBBWy) \n// + for performance, store 3D array in BufA with band gard to avoid modulo-leaks.\n// Then xy interpolation is provided by hardware, only z still to be done.\n// Bunny data from SebH https://www.shadertoy.com/view/MdlyDs\n\n// Here: adding normals precomputation to https://www.shadertoy.com/view/MdSfWc\n\n#define voxelB(x,y,z) ( min(x,min(y,z)) >= 0. && max(x,max(y,z)) < 32.    \\\n            ? texture(iChannel0, (1.5+vec2(x,y)+33.*vec2(int(z)%8,int(z)/8))/iResolution.xy ) \\\n            : vec4(0) )   \n\n#define voxel(x,y,z) mix( voxelB(x,y, z), voxelB(x,y, z+1.), fract(z) )\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvec3 screen( vec3 s, vec3 d ){\treturn s + d - s * d;}\n\nvoid mainImage( out vec4 O,vec2 U )\n{\n    int t=(iFrame>>6)&7;\n    //if(t==3){ O = texelFetch(iChannel0,ivec2(U),0).aaaa;  return;  }          // debug: show density data\n    //if(t==7){ O = .5+.5*texelFetch(iChannel0,ivec2(U),0); return;  }          // debug: show normals data\n    U = 1.7* ( (U+U - iResolution.xy) / iResolution.y);\n    vec3 C = vec3(U,1); C.yz *= rot(.78); C.xz *= rot(-iTime);     // for optional envmap\n    O -= O; \n    float stry=1.; \n    for (float i=-1.4; i<1.; i+=.3/16.) {  // step .3 for Nyquist\n        vec3 P = vec3( U, i); \n        P.yz *= rot(.78);\n        P.xz *= rot(-iTime);\n        vec3 A = abs(P);  if (max(A.x,max(A.y/1.8,A.z))>1.) continue;  // optimization - A.y mod\n        P = 16.*(P+1.);\n        vec4 V = voxel( P.x , P.z, P.y/stry  ); // .a = density, .xyz = gradient\n        vec3 col = vec3(.3,0,0) + vec3(.5) *clamp(dot(V.xyz,normalize(vec3(0,0,1))),0.,1.);\n     // vec3 col = texture( iChannel1, reflect(C,V.xzy) ).rgb;     // variant: envmap\n        col+=.2*texture( iChannel1, reflect(C,V.xzy) ).rgb;     // variant: envmap\n\n        O += (1.-O.a) * V.a * vec4( col, 1) ;\n    }\n    ivec2 q=ivec2(floor(U*2.)); vec3 b=.2+.1*vec3(abs(q.x+q.y)%2); // checker\n    O += (1.-O.a) * vec4(b,1);                               // background\n    vec2 u=U/.07;\n    float z=mod(iTime*1.,32.);\n    O=vec4(screen(  voxel( u.x+16.+26., u.y+16., z ).aaa,O.rgb)  ,1); \n    vec3 n=voxel( u.x+16.-26., u.y+16., z ).rgb; \n    n.rgb=.5+.5*n.rgb;\n    n=clamp(n,0.,1.);\n    if(n.r!=.5)O=vec4(screen(n ,O.rgb),1); \n    vec2 c=max(vec2(0),vec2(1)-abs(u/.2));\n    O.r+=length(c)*.2;\n}    \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Stores (once) the density array in texture in .a, with band gards to avoid wrap, precomputes (once) the gradients in .xyz\n\n//#define voxel(x,y,z) float( ( packedBunny[ (x) + (y)*32 ] >> (z) ) % 2u )\n\nfloat voxel(int x,int y,int z){ \n      // Simple RLE volume decompression by cpu 2017. Density Values 0 & 255 are suffixed with a run-length.\n      // The bytes are then packed into uints. This function decodes the stream until the required byte is available. \t\n      // Compression ratio is over 4:1 for this model.\n      z=max(0,31-z); uint b,i=uint(x+(y<<5)+(z<<10) ), s=0u, d=0u;\n      const uint cmp[]=uint[](0x13900u,0x2011fu,0x601b3u,0xc46031eu,0x5d451e00u,0xc1d0002u,0x1e001f88u,0x24538u,0x421031du,0x11e00u,0xff00ffu,0xd0848u,0x176b161eu,0x5a051d00u,0x1d000970u,0x1f5d18u,0xd1c021du,0x1021e00u,0x19135200u,0x9e261e00u,0x51d001bu,0x12a391u,0x88bd1b1du,0x3b1d000bu,0x251d0u,0x7f79031cu,0x101d0010u,0x1e001044u,0xff000204u,0x2600ff00u,0x1e001a2fu,0xca062u,0x63df351du,0xf1c0004u,0x37c7a7u,0xc955021cu,0x201d0070u,0x1d005181u,0x183d09u,0x313011du,0x9141200u,0x20a00u,0xf7d5413u,0xcc261d00u,0x1c001e98u,0xbdd64b02u,0x21c002fu,0x29c5dc3eu,0x55011c00u,0x1196edu,0xb597081cu,0x1b1d0034u,0x1e00205du,0xff000305u,0x500ff00u,0x1e001134u,0x18283u,0x18da6c1du,0xf54a1d00u,0x1c000361u,0x2abee428u,0xbb111c00u,0x17cf2u,0xed8f071bu,0x1b000192u,0x65c86403u,0x11200u,0x8f3c0109u,0x28120033u,0x800011eu,0x114f19u,0x41a34c12u,0x507000cu,0x12000218u,0xa3d8ae1cu,0x600043fu,0x1130002u,0xe5ed8d27u,0x1a00086du,0xe9650e01u,0x468efu,0xf86b041bu,0x1c0030d3u,0x50cfad0du,0x251c0002u,0x12762u,0x2041du,0x10e300ffu,0x5d1e0006u,0x631e005eu,0x1d0006bfu,0x23ec5eu,0x5efc591du,0xfb4a1d00u,0x1c000da8u,0x41e1f63eu,0xed311c00u,0x180f9u,0xfedb231bu,0x1120098u,0xb7130900u,0x12007cf4u,0x51d10u,0xcc810707u,0x1e120049u,0x1b416688u,0x1040003u,0x1e8341u,0xda8f0712u,0x1579c5e1u,0x36120400u,0x25130006u,0xfafbd082u,0x3001aa9u,0x14000801u,0xa3471501u,0xc9cfcf7u,0x1d061a00u,0x4ae8fd98u,0xbd1c1c00u,0x357cfu,0x1c4a211cu,0x11d0001u,0xe300ff00u,0x1e002912u,0x59f29u,0x1adc321du,0xf53d1d00u,0x481d003du,0x1d0066fcu,0x9401ff5cu,0x691c0002u,0xfc201ffu,0xff6a1c00u,0x36e401u,0xf8fd5f1cu,0x441c0066u,0x81fef5u,0x4060613u,0x24050001u,0x74fddbu,0x54482713u,0xd3853u,0xe5a20c03u,0x2313004au,0xdee4d19cu,0x20027a1u,0x20a15401u,0x61031300u,0x1fff9d8u,0x29c6fdu,0x8491802u,0x61081400u,0xfefee3b7u,0x10012b3u,0x11303u,0x6d350615u,0xec01ffcau,0x1000150u,0xa180002u,0x4abbb633u,0x171c0002u,0x11432u,0x101011eu,0x11d0001u,0x1e000202u,0xff000102u,0x17f00u,0x12a021eu,0x82071d00u,0xe1d0015u,0x1d003ec0u,0x65dc19u,0x86ef2e1du,0xfb4d1d00u,0x661d00a2u,0x4befeu,0x1ff711cu,0x1c0010d7u,0xec01ff6fu,0x621c002bu,0x54f9feu,0x4040115u,0xf8440400u,0x140064feu,0x5b452007u,0x2001142u,0x5cfede21u,0x4c0b1400u,0xa8dfd99fu,0xb01002fu,0x4aeea9u,0x96260114u,0xfe01fff1u,0x70083dd2u,0x150035c2u,0xf6a82c02u,0x3ec902ffu,0x1358b5fu,0x79171600u,0x7be9fee3u,0xd4b7f73u,0x48051700u,0x858abfb9u,0x1256589u,0x25011700u,0x96968e78u,0x83c79u,0x8f570518u,0x467e9a9cu,0x218000du,0x969a8746u,0xa3f75u,0x84703019u,0x3275f7cu,0x48131900u,0xe37545bu,0x19021a00u,0x1102226u,0x4011b00u,0xff000103u,0x1073e00u,0x14271e00u,0x4a011d00u,0x41d0041u,0x1d007173u,0x29ca60fu,0xcf231c00u,0x1c0007bbu,0x10d3e935u,0xf7451c00u,0x1c001ae2u,0x25edfd54u,0xfe571c00u,0x170033f6u,0x3000302u,0x45fcfd50u,0x28051600u,0x113d4bu,0xfff84101u,0x16006901u,0xd5b44f07u,0xf36058b0u,0x39b01ffu,0x2a011500u,0x1fffab3u,0xfffadaf4u,0x2cd701u,0xda450216u,0xfffe02ffu,0x891f402u,0x51021600u,0xfd04ffe9u,0x17003ed9u,0xfffc8703u,0x68def04u,0xf33f1700u,0xadf504ffu,0x2017000eu,0xf104ffe5u,0x17000a9eu,0xfffec70bu,0x6ddffc02u,0x1170002u,0xfafbf482u,0x2fb2edu,0xdfbd2719u,0xa63bedbu,0x33011900u,0x1b62877au,0x10011b00u,0x11320u,0x37d00ffu,0xc1e0005u,0x1f1e000fu,0x31d001eu,0x1333du,0x4d65091cu,0x131c0002u,0x57590u,0x9ec4251cu,0x3e1c000cu,0x1acbebu,0x1000219u,0xf4fe6301u,0xd18004fu,0xc85c4233u,0x11c002ffu,0x76141700u,0xfffef7d7u,0x65fa02u,0xf35e0417u,0x13ce05ffu,0xd8191700u,0x71fc05ffu,0x99011700u,0xed306ffu,0xfe5d1700u,0x28f305ffu,0xf8351700u,0x28f305ffu,0xe4171700u,0x14de05ffu,0xa9031700u,0xadfe04ffu,0x39180004u,0xf103ffecu,0x3190064u,0xf5fcee72u,0x1a0022b3u,0xacc07408u,0x1b000345u,0x62b320au,0xfd00ff00u,0x1e000102u,0x1d000913u,0x12e4808u,0x730d1b00u,0x13ebdd9u,0x90111900u,0xda02fff1u,0x3180026u,0x3fffa83u,0x799feu,0xffc80817u,0x2ce805u,0xffd10917u,0x6ffe05u,0xffbe0617u,0xac506u,0xff960116u,0x24f006u,0xfffd5d17u,0x1eee05u,0xfff32e17u,0x11df05u,0xffbd0c17u,0x7cc05u,0xffe13618u,0x3b704u,0xf9630118u,0x83fc02ffu,0xb90c1a00u,0x32d4fdfeu,0xbb371b00u,0x55dc2u,0x2f21011bu,0xff0009u,0x71d00ffu,0x1b000d18u,0xce9a3001u,0x44fb3u,0xfecd2c19u,0x54ea02ffu,0x4170001u,0x4fffe9fu,0x170028d8u,0x5ffdb13u,0x17dfeu,0xffec2316u,0x6b606u,0xffef2916u,0x10d806u,0xffe22016u,0x1aea06u,0xffc00e16u,0x18e806u,0xfe860316u,0xbd105ffu,0xe83b1700u,0x6c705ffu,0x76071700u,0xca04ffedu,0xc180006u,0x3fffa76u,0x190005c3u,0x2ffd013u,0x187fdu,0xfdf66a1au,0x1b002ed7u,0x55b17d0du,0x61c0003u,0xff000415u,0xe01fb00u,0x31b25u,0x202010fu,0xb010700u,0xcfddb659u,0xd001077u,0x15181406u,0x4000108u,0xf17d1102u,0x96f803ffu,0x30b000cu,0x3748401fu,0x300071bu,0xe63f0b01u,0x5bf605ffu,0x390a0b00u,0x33586d64u,0x2000315u,0xfb701503u,0xac306ffu,0x49100a00u,0x45697f7au,0x200071fu,0xfe921a04u,0x27ef06ffu,0x4c110a00u,0x4a6d837eu,0x2000822u,0xff971102u,0x44fa07u,0x72440e0au,0x1d446576u,0x6030004u,0x6fffe89u,0xa0056fcu,0x5c542f06u,0x10f314eu,0xfa5c0400u,0x59fc06ffu,0x11010a00u,0x1329322au,0x29050002u,0xf806ffe7u,0x10b0042u,0x2070907u,0xa6070600u,0xee05fffeu,0x37170026u,0xe705ffdbu,0x317001au,0x4ffd857u,0x180014e2u,0xffee5005u,0x9c603u,0xfea50819u,0x75fc01ffu,0x331a0001u,0x17b9f4cbu,0x26011b00u,0xff002258u,0x1607ee00u,0x2101615u,0xf010300u,0x1c060c16u,0x6232bu,0x703f0c0du,0x285f7972u,0x1d05040eu,0x906b6f54u,0x93dbe3cfu,0x70b0024u,0xd0c99a41u,0x3e71aeccu,0x95531b1eu,0xfffde6beu,0x23c8fd03u,0x87200a00u,0xeff5f2d8u,0x467aafd8u,0xe5bd813cu,0x86fe06ffu,0x1080001u,0xfdeeac38u,0xd0edfbfeu,0x9754679fu,0x7fff4d0u,0x80012d7u,0xf5be4903u,0xf6fd02ffu,0x6678b0deu,0xfffad6a4u,0x47fb07u,0xc24f0408u,0xfe02fff6u,0x70b2e1f8u,0xf8c79a63u,0x7608ffu,0xbb490308u,0x1fffef4u,0xa0daf5fdu,0x9e784a56u,0x9608ffedu,0x36010800u,0xfbfae7a0u,0x70c1ebf8u,0x51401828u,0x9f08ffbeu,0x69170900u,0xe4e9e4c2u,0x83384c7u,0x6d120e02u,0x8407fffdu,0x25030900u,0x9ea49a6du,0xb3978u,0xffe01f04u,0x59fe06u,0x2c15020au,0x71e3233u,0x7b020500u,0xfc05fffbu,0x10c0047u,0x8000201u,0xfffcb113u,0x41fb04u,0xfeaf2218u,0x2cef03ffu,0xe8321900u,0x8ab03ffu,0x87051900u,0x2ccffcf4u,0x5c111b00u,0x1e002b74u,0xff0001u,0x20290u,0x3c1e041cu,0x13232434u,0x5030406u,0x4142316u,0x3a061000u,0xacb4bb8du,0x3a486da4u,0xb09c5033u,0x313e5790u,0xb00041cu,0xe7a13503u,0xf6faf9f9u,0x999bb5d6u,0xf3faf4c7u,0xd2e8ebe5u,0xa001b82u,0xfee88a16u,0xeffc04ffu,0xfff6d7dau,0x20bafb07u,0x3b010800u,0x6fffdcau,0xfef2f6feu,0x8bfe08ffu,0x4070001u,0x8ffe45fu,0xafffbfdu,0x70015ddu,0xffef7205u,0xafffe09u,0x7004dfbu,0xfff17506u,0xfffdfe08u,0x700820bu,0xffee6c04u,0xfef6f908u,0xa20affu,0xe2590307u,0xdffc07ffu,0xfcf5efcfu,0xa508ffu,0xf9be3208u,0xe5fd05ffu,0xbbb385a8u,0x8808ffd3u,0x6e0c0800u,0xfffef7cfu,0xe5fbfe01u,0x432952a5u,0xffed5340u,0x9005e07u,0xcea75817u,0x8cc6dbd9u,0x3020e3fu,0xfd8f0503u,0x5d06ffu,0x381a060au,0x1c3d544au,0x1a050004u,0x5fffec0u,0x20d0068u,0x8000103u,0x4ffc92bu,0x190050fcu,0x2fff950u,0x13c3feu,0xfec00d19u,0x2e9cecu,0x4f86301bu,0x21d000au,0x8f00ff00u,0x463c1402u,0x161c232du,0x9070709u,0x2080bu,0xa44a0b10u,0xb6c0d7d6u,0x676f86a7u,0x899e896au,0x11853u,0xd6680b0du,0xfe01fffau,0xeaf7fdfdu,0xf9e7dfe4u,0xa3e1f8fdu,0x1134eu,0xd650030au,0xfe07fffdu,0xfd05fffeu,0x651bbefu,0xab180900u,0xe912fffau,0x8000871u,0x14ffde3bu,0x70052ebu,0xfff05c01u,0xbbe15u,0xf5680106u,0x31f015ffu,0x67010600u,0xfc15fff5u,0x106005bu,0x15fff361u,0x7006dfdu,0x15ffed4fu,0x7005cf7u,0xaffd12au,0xeb0afffdu,0xa07003cu,0x7fff182u,0xe1d6f1feu,0xfffad9e0u,0x2de406u,0xe2901e08u,0x3fffef9u,0x5991dcfau,0x92545851u,0xf005fff2u,0x11090037u,0xd9ba8146u,0x54a1ccdeu,0x3020517u,0xe1720d04u,0x43f604ffu,0x5010a00u,0x2b3b391au,0x6000313u,0xfff77108u,0x2ee803u,0xffd92019u,0x91effd01u,0x4190007u,0x5ab9e88au,0x191b0015u,0x12252u,0x18e00ffu,0x2321150cu,0x2090f10u,0x13000101u,0xad621c02u,0x9cb4bcc0u,0x5f5b7699u,0x2a4b4c58u,0xb0e0006u,0xfef3be51u,0xfdfe01ffu,0xedf0fafcu,0xeaedeeedu,0x1b7bceu,0xe16f0b0cu,0xf50efffeu,0x233b0u,0xffdf470au,0x40cffd11u,0x93060900u,0xd113fffcu,0x1608002au,0xfe14ffc5u,0x7000fa8u,0x15ffe027u,0x70050f3u,0x15ffe62eu,0x690feu,0xffe62f06u,0xfab16u,0xffe32906u,0x11a716u,0xffd61b06u,0x77ffb15u,0xaf0a0600u,0x55e915ffu,0x1060002u,0x14fff05au,0x140c9u,0xf0960f07u,0xf807fffeu,0xe6e2d9e7u,0x3fff7ebu,0x459c3fbu,0x6b180800u,0xfef6dcbau,0xdaf5fdfeu,0x4d3b5e98u,0x9e6c5f5cu,0xc8f3f8deu,0x900076eu,0x62301c05u,0x6d9baba0u,0x4123bu,0x3040101u,0xd37e1103u,0x355b5ddu,0x8010c00u,0x20a0du,0xa0430108u,0x1a679fu,0x2f4a131bu,0x1c00010bu,0xff000106u,0x3017200u,0x10101u,0x260f0317u,0x67837642u,0x1d385f64u,0x10b1319u,0x26040f00u,0xecdab064u,0xf4f5fcfbu,0xc5cad7efu,0x2f76a7b6u,0x80c0003u,0xfff3c35au,0x62d5fa0du,0x20a000du,0xfffee25au,0x1591ef10u,0xc3130900u,0x8ef813ffu,0x3f080009u,0xf114fff0u,0x107004du,0x15fffd7cu,0x60005aeu,0x16ffa004u,0x60020e9u,0x16ffab06u,0x60043fbu,0x16ffa704u,0x60053fdu,0x16ff9a02u,0x6004afcu,0xfffe7e01u,0x25ed15u,0xfff64f07u,0x8bc15u,0xffc41607u,0x56f714u,0xec540108u,0x19bc13ffu,0x6e090900u,0xfefdf9d7u,0xf4fe04ffu,0xe2c9bbdeu,0xc3dbdddcu,0x1125bb0u,0x3c060900u,0xd4aca68eu,0xa7cae2e6u,0x221c3d72u,0x343a3340u,0xa21201bu,0x12020b00u,0x3420131eu,0x40c1a2eu,0x6050800u,0xff0001u,0x80201aeu,0x11141c13u,0x1050fu,0x54431214u,0xc5b0895du,0x94babbbdu,0x3944455du,0xd000112u,0xdc9b2c01u,0xfffef6eeu,0xeff6fe05u,0x69b7e6efu,0x380c0018u,0xffffbc7u,0x33cb6f8u,0xc3180900u,0xfe11fffeu,0x14cdau,0xfffa6008u,0x28d614u,0xffae0607u,0x298fe15u,0xe01c0600u,0x18e016ffu,0xf1300600u,0x47fa16ffu,0xf4350600u,0x7817ffu,0xfff02d06u,0x6009117u,0x17ffe820u,0x1106008bu,0xfc16ffd6u,0x506005du,0xe416ffaeu,0x59070024u,0xfc14fff6u,0x7000385u,0xfffeb611u,0x18bdfe12u,0xd03b0900u,0xfe09fffdu,0xfefef9fau,0xbaf3fefeu,0x30a002eu,0xfcf6be41u,0xf4f7f4f7u,0xb3dae9eeu,0x9aa06f83u,0x1a6099aau,0x31020c00u,0x7291b48eu,0x3c4e6973u,0x106132cu,0x70c0908u,0x10e0001u,0x16151b0au,0x5121au,0x102011cu,0x3e00ff00u,0xf130d03u,0x2190006u,0x665b3c14u,0x72a50u,0x2d0b0116u,0xbcb89c67u,0x174277a0u,0x12000106u,0xc2a35008u,0xf9f5ecd7u,0xc6e3eff4u,0x666c7d9eu,0xd000537u,0xfeea790au,0xfcfe0affu,0x3089e3fbu,0x40a0005u,0x10fff26fu,0x1181defdu,0xeb3f0900u,0x8df913ffu,0x7070007u,0xf315ffadu,0x27070053u,0xc416ffebu,0x5806000au,0xf416fffcu,0x79060033u,0x7218ffu,0x18ff8006u,0x780600a3u,0x2ba18ffu,0xfe650500u,0x2b617ffu,0xfa440500u,0x9117ffu,0xffe82006u,0x4af816u,0xffac0506u,0xcb716u,0xfff04707u,0x37e214u,0xfb9a0808u,0x57e812ffu,0x20090002u,0x7fffaaeu,0xddf1f9fdu,0xe6e5d5b8u,0x44fabdcu,0x9b1d0b00u,0xf6f9f8e2u,0xaedff3f7u,0xe2c4c6bu,0x2b343521u,0xd00010bu,0xa376360du,0x93c0d1c6u,0x1800053eu,0x664f2006u,0xa325au,0x707031bu,0x5fd0002u,0x2101710u,0x10011800u,0xa39e7d3bu,0x23486u,0x9c390316u,0xf5f8f4dau,0x1192e0u,0xc4520c15u,0xfb04fff6u,0x6155ddau,0x1100001u,0xfde89b29u,0xecfe06ffu,0x6b7ba2c6u,0xc000c50u,0xfdc93801u,0xf2fc0dffu,0xf50aau,0xfec11f0au,0xadf111ffu,0x4080027u,0x13fffc8au,0x10b6feu,0xffe62407u,0x174fb15u,0xfd5d0600u,0x10d616ffu,0xff930600u,0x38f817u,0xffb30205u,0x5007318u,0x18ffb702u,0x40001a5u,0x18ffaf01u,0x50003bdu,0xbd18ffa0u,0x80050003u,0x9f18ffu,0xfffb4d06u,0x56fb16u,0xffdb1606u,0x10c416u,0xfe840106u,0x46ee14ffu,0xdc230800u,0x7af813ffu,0x1080003u,0xaffe95fu,0xe5cff2fbu,0xd5f9fbf8u,0xa000c7du,0xfad95805u,0xcbfd06ffu,0x341b486au,0x26686c5bu,0x20c0003u,0xfbe37c2du,0xe2fe03ffu,0x4000257u,0x10000101u,0xd5994d07u,0x7dd2eaeau,0x118000fu,0x4b46290du,0xde000d34u,0x1b000101u,0x6e4d2504u,0x12560u,0x88370617u,0xf4f9f0d5u,0x160022beu,0xfce48b1du,0x6ef904ffu,0x2130001u,0xfffbb734u,0x327c407u,0x5c051100u,0x8fffed9u,0x6885d1fcu,0x114c65u,0xed76070cu,0xfcfd0cffu,0x67b9f2fbu,0x560a0018u,0xf812fff2u,0x8002bbeu,0x15ffca0fu,0x7000bb0u,0x15fff940u,0x70060f8u,0xcd17ff80u,0x105000eu,0xf717ffadu,0x505003au,0x7218ffcau,0xd1070500u,0x9218ffu,0xffcb0505u,0x19818u,0xffbe0304u,0x5008918u,0x17ffa501u,0x6006dfeu,0x16fffe6eu,0x60035f1u,0x16ffed29u,0x60008b1u,0x15ffa504u,0x8003deeu,0x13ffef3au,0x37ff7u,0xf4850408u,0xe5f50affu,0x1ffeed9u,0x79e4fdfeu,0xa0a000cu,0x8fff176u,0x23316ff8u,0x71758247u,0xc000438u,0xfcbc5908u,0xec006ffu,0x20300u,0x991c0111u,0xfefdfae9u,0x4fe3fcu,0x6c410c18u,0x4378847eu,0x11c0005u,0x501bf00u,0xe1b0005u,0x9e9f7d48u,0x17000759u,0xf0b0540cu,0xf102fffeu,0x2150059u,0xfff1a230u,0xac006u,0xdb5e0613u,0xf307fffeu,0x912003au,0xaffef75u,0x4b3a42b6u,0xc000e3cu,0xfff4880au,0xe9ecfd0bu,0x64b5ebf1u,0x5d0a0014u,0xf712fff7u,0x80017adu,0x14ffc30bu,0x386fbu,0xfff63a07u,0x33e815u,0x16ff7e07u,0x396feu,0xffb30205u,0x14d317u,0xffd30805u,0x30f017u,0xffdc0d05u,0x3ff917u,0xffd90c05u,0x41fa17u,0xffd10805u,0x36f617u,0xffb80205u,0x22e717u,0x17ff8206u,0x6000bc7u,0x15fff235u,0x182fdu,0xffae0606u,0x26d815u,0xffee3d08u,0x153e013u,0x80040800u,0xe00afff7u,0xfce8dad3u,0x48c2edfau,0xb0a0003u,0x8fff986u,0x232062fcu,0x43656e39u,0xc00011du,0xffe9870du,0x17dc07u,0x11000103u,0xf2ab4607u,0xfe02fffeu,0x17ef8u,0x8d510e17u,0x6d8ca39bu,0x21a000fu,0x10604u,0x10703bfu,0x3f0f1a00u,0x64a7966fu,0x13170008u,0xfdebb86bu,0x67f402ffu,0x39031500u,0x6fff9b1u,0x13000ed3u,0xffe3760cu,0x39f708u,0xf78b0a12u,0x107e0affu,0x312120cu,0x72020c00u,0xe20bfff7u,0xb4b0a8b3u,0x43781u,0xffe52e0au,0xfffefe0eu,0x59dbfb01u,0x4080003u,0xdb14ff9cu,0x2e080034u,0xfe14ffeeu,0x7000bacu,0xf116ff79u,0x306003eu,0xfe16ffb8u,0x500017du,0x17ffd80cu,0x50006b4u,0x17ffe312u,0x5000dc5u,0x17ffe515u,0x50010c4u,0x17ffdd0fu,0x5000bb5u,0x16ffc004u,0x28cfeu,0x16ff8406u,0x7005ff7u,0x15fff234u,0x7002ad9u,0x14ffad06u,0x579f5u,0xffea3b08u,0x94effe11u,0x3090013u,0x9fff773u,0xd2b7bffeu,0xbadfe5d0u,0xb001263u,0xfffa8c0bu,0xf3af008u,0x31351c1bu,0xd000314u,0xfff8960fu,0x9b607u,0xc8710e15u,0x2fffef3u,0x51e4fcu,0x4b180217u,0x78aabc8du,0x1a000642u,0x1080f03u,0x403bf00u,0x24091b00u,0x48968d55u,0x12170002u,0xf5d8a864u,0x3de102ffu,0x48061500u,0x6fff7b5u,0x130004a7u,0xffeb8710u,0x19e108u,0xfa910812u,0x43f909ffu,0xf65d1200u,0x62ad0bffu,0x2640384bu,0x210b0008u,0xfd0cffd8u,0xdfdaedf7u,0xe69c1u,0xfe980409u,0xdcfd11ffu,0x8000664u,0x13ffed29u,0x3eccfdu,0xfffe6d08u,0x88cf714u,0x9020500u,0xfe15ffb6u,0x4001dc1u,0xeb442002u,0x3ae316ffu,0x530a0400u,0x16fff67cu,0x40049efu,0xf9906a12u,0x43f116ffu,0x5e0c0400u,0x16fff073u,0x40030e8u,0xcb342802u,0x19cd16ffu,0x6030500u,0xfd15ff7eu,0x70009a1u,0x14fff02eu,0x15aebu,0xffa80507u,0x15a1f413u,0xe4320900u,0xfffb0bffu,0xf3f8fe02u,0x2992ddu,0xe358020au,0x7df409ffu,0x88abbb9au,0x1114976u,0x52030b00u,0xbc08ffeau,0xb0e050cu,0x10509u,0xeb6d040eu,0x5cf806ffu,0x4f061600u,0xfffdf4beu,0xa5edfd01u,0x1170011u,0xbc854f15u,0x13458eu,0x410021bu,0xd01dd00u,0x18636a30u,0x380c1800u,0xfbe2b373u,0xfa1f7u,0xad4f0715u,0x4fffbe6u,0x140059f6u,0xffef8008u,0x4ad08u,0xf46a0312u,0x16dd09ffu,0x4d011100u,0xf80affeau,0x3101d59u,0xc000103u,0xcffd923u,0x60adc7dfu,0x62a51u,0xfe93020au,0xecfe0effu,0x5409eceu,0xe31a0900u,0xf1fd11ffu,0x12daau,0x56070206u,0xf013fffbu,0x5000d82u,0xc76c4904u,0xcafe14ffu,0x2b050028u,0xfffde2cau,0x14eec15u,0xf55e0400u,0xf416fffdu,0x400036au,0x17fffc79u,0x46ff4u,0xfcf76504u,0x5bee16ffu,0x2d040002u,0xfff5e3d0u,0x37d315u,0x7f550505u,0xf714ffadu,0x60019a1u,0xeb2e0e04u,0xd0fa12ffu,0x8000559u,0x10ffa003u,0x72c7eefbu,0x2e0a0017u,0xfd0affddu,0x1fffde9u,0x4983a6efu,0xa000114u,0xffce4401u,0x8240d109u,0xd165ba0u,0x2b0e0004u,0xfd07ffc9u,0x6020173u,0x38120001u,0x5fffecdu,0x16001fd9u,0xe9a22901u,0xc9f1fcfau,0x1800025bu,0x7763390bu,0x3194bu,0xdf00011cu,0x25391906u,0x3180002u,0xcb9d5c1eu,0x149cde8u,0x31031500u,0xfff6ce84u,0x1fd304u,0xdd5f0314u,0xfd06fffdu,0x1130067u,0x9ffe94fu,0x120003a7u,0xaffdf3du,0x118dcu,0xffbf1210u,0x6187f90bu,0x11151u,0xfffa630du,0xf0f5f90cu,0x10d2d9du,0xb030900u,0xfa10ffbcu,0x1861afu,0x7d612108u,0xf411fff4u,0xa68c5u,0xecb61506u,0xfe12fff7u,0x2baeedu,0xfffc5d06u,0x58d3fa15u,0x97050002u,0xe6fe16ffu,0x5000573u,0xfe16ffaau,0x572eau,0x16ff9405u,0x361ddfcu,0xfc5a0500u,0xecfd14ffu,0x60035b4u,0xf3f5c015u,0xe9fe11ffu,0xf6abdu,0x6a722907u,0xee10ffe4u,0x1246eaeu,0x4030800u,0xefffe89u,0x1f4ea8fdu,0x230b0004u,0xf50affd5u,0xc5fdf4c5u,0x10929u,0xffce3c0du,0x5919a209u,0x11002b7fu,0xfffdbc2cu,0x38ef06u,0x13000102u,0xfff59c1fu,0x699fd04u,0x750e1700u,0xe8f6f8dfu,0x19001ea4u,0x545d3004u,0xfe000c36u,0x40c04u,0x632e081au,0x1272a88du,0x1d011600u,0xf7dda15du,0x8ef4fefeu,0x3140006u,0xfff7cc59u,0x2eee06u,0xffe84014u,0x6dfe08u,0xffc01613u,0x3af0au,0xfa790311u,0x2ade0affu,0x2181bu,0xffdd260eu,0xcccbfc0bu,0x35ac4u,0x2e20010au,0xffffd87u,0x236e6u,0xd9cc4609u,0x9211fff3u,0x7000216u,0x14ffcc13u,0xb3cc5u,0xfffa4f07u,0x1c61da14u,0x81060001u,0x76d015ffu,0x600032fu,0xfa14ff90u,0x33780c3u,0xff7c0600u,0x69acf014u,0x6000226u,0x13fff94au,0xe397deau,0xc2100700u,0x3cd713ffu,0x8000110u,0xe6d3bb37u,0xea910ffu,0x130a0001u,0xfff45a25u,0x55f90eu,0xfca50b0eu,0x9deb09ffu,0xcacf5deu,0xa81f0f00u,0xfe07fffbu,0x542e0885u,0x1a110018u,0x6fffaa8u,0x160020dfu,0xffe47e18u,0x16df204u,0x43041700u,0xbed1d6a9u,0x1a000a65u,0x1721270eu,0xff0003u,0x2309011cu,0x11d4848u,0x3e101700u,0xedd4a271u,0x3cbbebu,0xe6aa3516u,0xfe04fffbu,0x140013c8u,0xfffdc31eu,0x53fb07u,0xfd8f0313u,0x19309ffu,0xe5271200u,0xfc40affu,0xf000308u,0xfffc7c06u,0xaa9ef50au,0xc002785u,0xe3876723u,0xc2fd0effu,0x270a0018u,0xfffefac3u,0x69fd10u,0xfd970409u,0x9a13ffu,0xffe01c09u,0x19314u,0xfff53a08u,0x4ef713u,0xfff94809u,0x18bd13u,0xfff63f09u,0x88513u,0xffdb1c09u,0x29913u,0xf87c0309u,0x1af12ffu,0xa0140a00u,0xfffdedefu,0x19f0fu,0x4146120bu,0xfb0effc1u,0x460f005du,0x8fffedbu,0xe9c598eeu,0xf0013abu,0xfed64c04u,0x8dfd06ffu,0x12351714u,0x55031100u,0x5fffddau,0x11fc6u,0xb7420515u,0xfe01fff8u,0x3ac5f4u,0xa56d1e19u,0x12163a3u,0xa011a00u,0xff000109u,0x5011e00u,0x10a0bu,0x5e260c19u,0x58909b88u,0x15000110u,0xca9b3a07u,0xfbfdfaf0u,0x82ea2f0u,0x5b061300u,0x6fffcd2u,0x42da2fbu,0xd73d1200u,0xd408fffeu,0x11001459u,0xfffa8d04u,0x388df009u,0x10f0002u,0xaffbf18u,0x73c0dffdu,0x70c001du,0xf09a6e3eu,0xc0fa0dffu,0x50a0029u,0xfefada5eu,0x96fe0fffu,0x31090009u,0x12fffed0u,0x120c7u,0xf5710207u,0x2bc813ffu,0x7070003u,0x12fffc95u,0x1085fbu,0xfda00a08u,0x25ce12ffu,0x7080001u,0x12fffb98u,0x9000383u,0xffee6402u,0x4a112u,0xfaad1b0au,0x19d311ffu,0x39010a00u,0xffebe5bdu,0x341de0fu,0x23020a00u,0xfff16135u,0xd51c80eu,0x8f0c0d00u,0xf109fff4u,0x88d8ece5u,0xe000d4eu,0xffe4720eu,0x50b4ee07u,0x1f27323du,0xa0f0003u,0xfdfbd05au,0xe4fafcfdu,0x95ab0u,0x10102u,0xb3450611u,0x769dbbcau,0x165461u,0x391f0317u,0x8031431u,0xff0009u,0x170a015au,0x241f1f21u,0x11226u,0x50330814u,0xc8b59977u,0x89c6d6d4u,0xb13001au,0xf6eede83u,0x3fffefcu,0x46bdffdu,0x4d021100u,0xf809fff0u,0x110012b2u,0xfffe9610u,0x36ddfe09u,0x2b100001u,0xfa0bffc9u,0x11251b6u,0x1d050b00u,0xfff08b42u,0x9aebfe0cu,0x900042fu,0xe1ad4907u,0xf30ffff6u,0x8002794u,0xf7b63601u,0xd3fd11ffu,0x7000465u,0xffe56e07u,0x7be1fe12u,0xf070008u,0x12fff18au,0x245b5f4u,0x95120700u,0xfc11fff2u,0xa57c1u,0xeb850f08u,0x64e411ffu,0x509000fu,0xfffbce59u,0x65ceb10u,0x8b1c0a00u,0xffffae3u,0x2cadfcu,0x7a2c020au,0xfffeb9cu,0x576e7u,0x1309010au,0xefffe9fu,0xca4f7u,0xffe53c0du,0xfdfefd0bu,0x99ff6u,0xdc5f030du,0xfe07fffcu,0xd1b592d4u,0x15acfu,0x7b2e030eu,0xf9e8d3b8u,0x66ed03ffu,0x49451b08u,0x411000eu,0x6f3c2e21u,0x98ecebbcu,0x1020014u,0x2160001u,0x16615419u,0x1011d00u,0x3e00ff00u,0x65441e07u,0x15000f51u,0x4c2e1607u,0xf0d2a070u,0x582effau,0x932a1300u,0xfbf3e2c4u,0x2ee205ffu,0x9e081200u,0xfe01fffau,0xe1ecf6fcu,0xfbfae0d9u,0x1c120063u,0xf701ffd7u,0xaab1c2dbu,0xdbafaaa8u,0x10e9ffeu,0xed3d1000u,0xa3d701ffu,0xa39d9693u,0xf8b9a9a8u,0x185ba9edu,0x40c0001u,0xfffa7d15u,0x9499df01u,0xaba8a19au,0xfff2b2adu,0xb5f1fe01u,0x900013fu,0x8a511d02u,0x1fffed6u,0x9f99b1f6u,0xb1afaca5u,0x3fffccau,0xeb3fcu,0xbb6c1609u,0x3fffae7u,0xa9a3a3d9u,0xedbbb3afu,0x3aee05ffu,0x37030800u,0xfffce7a2u,0xfefdfa01u,0xada9b0f4u,0xfcd1b8b3u,0x4ef705ffu,0x4b060800u,0x1fff4b8u,0x2fffafcu,0xb1adbffbu,0xffe9bdb5u,0xfffefc01u,0x26d2fe02u,0x4b070800u,0x1fff1b7u,0x2fffbf8u,0xb3b0c7fcu,0xfdf4c1b7u,0xe803fffbu,0x8000260u,0xe49f3c04u,0xfffefcfcu,0xb0bbf702u,0xf7c5b9b4u,0xf003fffdu,0x9000c85u,0xc2711e01u,0x2fffeeeu,0xabacdefeu,0xedc2b8b2u,0x52eb04ffu,0x36060b00u,0xfff7c37bu,0xa1afeb02u,0xb8b2aba6u,0xfd04ffdeu,0xb000fafu,0xe2661b07u,0xb6fa01ffu,0xa39d9692u,0xfecdada9u,0x38f004ffu,0xc0200d00u,0x8fb8fafdu,0x9c96928cu,0xfffcc6a2u,0x4bfa04u,0xf98b070du,0xddf601ffu,0x928b97b7u,0x5ffe9a8u,0xe0033f3u,0xfef8c831u,0xe9fa01ffu,0xfde3cfcdu,0xfff4d5fbu,0xec202u,0x6a26010eu,0xfeeec798u,0x2fffefeu,0xa65b29bcu,0x120040b5u,0x96461705u,0xe2fefbddu,0x902003fu,0x1500010fu,0xa97c2e06u,0x1c000250u,0x10902u,0x12000ffu,0x11b0001u,0x504f240au,0x416001au,0x4b2a190eu,0xacaf9e7bu,0x13000e86u,0x75522502u,0xa4a2978au,0xaba9a09fu,0x1b13003au,0x828c8f72u,0x33455a70u,0x6baa773au,0x43120001u,0x1d356788u,0x505080fu,0x94962d07u,0x10000320u,0x29845b03u,0x1000104u,0x4030201u,0x96ad760eu,0x32667u,0x88700d0eu,0x2000238u,0x4040301u,0xb3af6c08u,0x24f9bb2u,0x8010b00u,0x648d7e2cu,0x101000du,0x5050402u,0xb6af8518u,0x189fb4b7u,0xf010a00u,0x82806233u,0x2033484u,0xa060503u,0xb5b3a646u,0x3faeb7b8u,0x2e060a00u,0x5e557a60u,0x3085f76u,0x1c070604u,0xb2a7ab7eu,0x42a9b5b7u,0x420d0a00u,0x6e516573u,0x412748cu,0x40090605u,0x9d696f99u,0x2698b0b4u,0x3c0c0a00u,0x7255516fu,0x5167589u,0x680c0706u,0x9f775581u,0x35ba6b3u,0x2a050a00u,0x7a665f5eu,0x50d6281u,0x6f0e0706u,0xb0916a7du,0x1286acu,0x693c100cu,0x3478847au,0x7050405u,0x7582540bu,0x6ca2ada6u,0x20c0002u,0x7f785115u,0x3020a47u,0x37070504u,0xa3ab938cu,0x10819au,0x7232030du,0x2001268u,0x5030201u,0x979d831eu,0x29899392u,0x691c0e00u,0x31666u,0x16020103u,0x89878a73u,0x31878du,0x735a0e0eu,0x71a3c5du,0x3f080101u,0x85838381u,0x207e87u,0x6434020eu,0x4e676f6du,0x7338282cu,0x80756975u,0xa6581u,0x3b21050fu,0x71726a55u,0x52757672u,0x514c2d15u,0x112001fu,0x5e3c1c08u,0x175e706eu,0x5040200u,0xf011600u,0x11c3c29u,0x21d00u,0x2eu);    \n      while(true){\n           b=(cmp[s>>2]>>(s&3u)*8u)&255u; s++; \n           if(b==0u || b==255u){\n              d+=(cmp[s>>2]>>(s&3u)*8u)&255u; s++; \n              if(d>i)break; \n              }else{ \n              if(d==i)break;  \n              d++; \n           \t  }\n           }\n      return float(b)/255.;                              \n      } \n                              \n\n#define T(i,j,k) texelFetch(iChannel0, U + ivec2(i,j) + z2xy(k), 0 ) .a\n\n#define z2xy(z) (   U.x+33*z <  0    ? ivec2( 33*7,-33)   \\\n                  : U.x+33*z >= 33*8 ? ivec2(-33*7, 33)   \\\n                  :                    ivec2( 33*z,  0) )\n    \nvoid mainImage( out vec4 O,vec2 V )\n{\n    ivec2 U = ivec2(V), M = U%33, T=U/33, D=ivec2(1,0);\n    O = iFrame == 0  &&  M.x*M.y != 0\n         ? vec4( voxel( M.x-1 , M.y-1 , T.x + T.y*8 ) ) // band guard at 1+33.k\n         : texelFetch(iChannel0,U,0);\n    \n    if (iFrame == 1) {                                  // normals\n        vec3 C = vec3(0), F = 1./vec3(4,2,4);  // separable filtering kernel\n        for (int j = -1; j <= 1; j++ )\n            for (int i = -1; i <= 1; i++ )\n                C +=  vec3( T( 1, i, j ) - T(-1, i, j ),\n                            T( i, 1, j ) - T( i,-1, j ),\n                            T( i, j, 1 ) - T( i, j,-1 ) \n                          ) * F[1+i] * F[1+j]; // weighting kernel\n             O.xyz = - normalize(C+1e-5);\n         }           \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}