{
    "Shader": {
        "info": {
            "date": "1612885808",
            "description": "Blue noise by mutually-repulsing Worley dots.\n- Red: Worley dots    \n- Blue: average of 8 neighbor dots\n- Green: mouse.x interpolate between\nIndeed, 100% average (=blue) is too ordered for blue noise !  Or better (and cheaper) on triangle grid ?\nTry #41.",
            "flags": 0,
            "hasliked": 0,
            "id": "3ldfD7",
            "likes": 9,
            "name": "Worley blue noise",
            "published": 3,
            "tags": [
                "worley",
                "sampling",
                "bluenoise"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define hash2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n\n\n\nvec4 Worley0(vec2 U) {\n    vec2 I = floor(U), P,I1,N;\n    \n    float m = 1e5, l;\n    int k,c;\n    for ( k=0; k<9; k++) {\n        I1 = I + vec2(k%3,k/3)-1.;   \n        P = I1 + hash2(I1)-.5;                      // random dot in the current neighbor cell\n        l = dot(P-U,P-U);\n        if (l<m)  m=l, c=k, N=P;\n      }\n    return vec4(m, N, k);                           // closest point, its coordinates, its local id\n}\n\n\nvec4 Worley(vec2 U, float a) {\n    vec2 I = floor(U), P,P0, N, I1,I2;\n    \n    float m = 1e5, l;\n    int k,c;\n    for ( k=0; k<9; k++) {\n        I1 = I + vec2(k%3,k/3)-1.;\n#if 0                                               // classical Worley:\n        P = I1 + hash2(I1)-.5;                      // random dot in the current neighbor cell\n#else\n        P-=P;                                       // averaged Worley:\n        for (int j=0; j<9; j += j==3?2:1 ) {\n            I2 = I1+vec2(j%3,j/3)-1.;\n            P += I2 +hash2(I2)-.5;                  // dot = average neighbor random dots\n        }\n        P /= 8.;\n#  if 1    \n        P0 = I1 + hash2(I1)-.5;\n        P = mix( P0, P,  a);                        // interpolates between both.\n     // P = P0  + a*( P - P0 );                     // neighbors apply force a ( equivalent !)\n     // P = P0  + a*( P - P0 )*smoothstep(1.,0.,length(P-P0)); // force decreasing with distance.\n#  endif\n#endif\n        l = dot(P-U,P-U);\n        if (l<m)  m=l, c=k, N=P;\n      }\n    return vec4(m, N, k);                           // closest point, its coordinates, its local id\n}\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 15.* ( u - .5*R ) / R.y;\n         \n    float  a = iMouse.x==0. ? .5+.5*sin(iTime) : iMouse.x/iResolution.x,\n          d0 = sqrt( Worley(U,0.).x ),              // classical Worley\n          d2 = sqrt( Worley(U,1.).x ),              // average of 8-neighborh\n          d1 = sqrt( Worley(U,a ).x );              // interpolation between both\n\n    O = smoothstep(22./R.y,0., vec4( d0,d1,d2,0 )-.15 ) *vec4(.5,1,1,1);\n  //O = 5. - vec4( d0,d1,d2,0 ) *R.y/15. ;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}