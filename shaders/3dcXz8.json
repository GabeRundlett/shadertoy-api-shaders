{
    "Shader": {
        "info": {
            "date": "1571730663",
            "description": "Inktober, but with shaders.\n\nThis one feels unsuccessful to me (theme wise) but I kinda like where it ended up.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dcXz8",
            "likes": 0,
            "name": "shadetober #17 (ornament)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 295
        },
        "renderpass": [
            {
                "code": "#define NUMBEADS 10\n#define PI2 6.283\nvec3 path(float t) {\n    // I wanted a spiral of beads that would chase each other around\n    // (i.e. by doing something like opTwist) but I couldn't get it\n    // looking right, settled for this spiral-y effect where the beads\n    // end up intersecting, so I just used soft min to have them glob\n    // together without discontinuities which ended up looking interesting\n    float k = .2;\n    vec3 p = vec3(cos(t) * (1. - abs(sin(t*k))), sin(t*k) * 1.2, sin(t) * (1. - abs(sin(t*k))));\n    return p;\n}\n\nfloat sdSphere(vec3 p, float t) {\n    return length(p - path(t)) - .1;\n}\n\nfloat sdGround(vec3 p) {\n    return p.y + 1.5;\n}\n\n//https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat map(vec3 p ) {\n    // this seems like it could be sped up, NUMBEADS impacts performance more than I expected\n    float dist = sdGround(p);\n    for(int i = 0; i < NUMBEADS; i++) {\n        float slice = float(i)/float(NUMBEADS);\n        dist = smin(dist, sdSphere(p, iTime + slice * PI2), .5);\n    }\n\treturn dist;\n}\n\nvec3 grad(vec3 p) {\n    vec2 eps = vec2(.001,0.);\n    return normalize(map(p) - vec3(map(p - eps.xyy), map(p - eps.yxy), map(p-eps.yyx)));\n}\n\nvec3 march(vec3 ro, vec3 rd) {\n    float t = 0.;\n    vec3 p;\n    for (int i = 0; i < 100; i++) {\n        p = ro + rd * t;\n        float d = map(p);\n        if (d < 0.001 || t > 100.) break;\n        t += d;\n    }\n    return p;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow(vec3 ro, vec3 rd, float k) {\n    // start the ray a little bit away from\n    // the surface to avoid self intersection\n    float t = .1;\n    float result = 1.;\n    for (int i = 0; i < 10; i++) {\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        result = min(result, k * d / t);\n        if (result < 0.001) {\n            return 0.0;\n        }\n        t += d;\n        if(t>10.){break;}\n    }\n    return result;\n}\n\nvec3 light(vec3 p, vec3 c, vec3 ld) {\n    vec3 n = grad(p);\n    float incid = dot(n, ld);\n    vec3 diffuse = c * incid;\n    // this shadow calculation also slows things down a lot (it's doing \n    // the ray march a second time from the initial contact point), \n    // wonder if there's a way to speed that up as well\n    diffuse *= shadow(p, ld, 4.);\n    return diffuse;\n}\n\n// basic y rotation used for moving the lights around\nmat3 roty(float a) {\n    return mat3(\n        cos(a), 0., -sin(a),\n        0., 1., 0.,\n        sin(a), 0., cos(a));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0., 0., 2.);\n    vec3 rd = normalize(vec3(uv, -1.));\n\n    // scene has a red and green light that rotate around the ornament\n    vec3 ld2 = normalize(vec3(-.45, .2, .45));\n    vec3 ld3 = normalize(vec3(.0, .2, -.45));\n    ld2 *= roty(iTime * .21);\n    ld3 *= roty(iTime * .21);\n    \n    // march and do lighting calcs\n    vec3 p = march(ro, rd);\n    vec3 col = light(p, vec3(16, 233, 25)/255., ld2);\n    col += light(p, vec3(227, 21, 25)/255., ld3);\n    \n    // iq's gamma\n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}