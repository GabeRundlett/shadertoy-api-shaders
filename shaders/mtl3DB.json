{
    "Shader": {
        "info": {
            "date": "1672623949",
            "description": "monogram/sigil\nd\n  a\n    n\nw/ alternative style \"n\" or \"N\", not sure which is better...",
            "flags": 0,
            "hasliked": 0,
            "id": "mtl3DB",
            "likes": 16,
            "name": "monogram/sigil",
            "published": 3,
            "tags": [
                "sdf",
                "sigil",
                "dan",
                "monogram"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "const float sixto = 1.0 / 6.0;\n\nfloat sdMonogram(vec2 p, float t, vec4 dann) {\n    float d = 1.0;\n    // d\n    if (bool(dann.x)) {\n        d = sdSegment(p, vec2(0, -1.0 * sixto), vec2(0, +3.0 * sixto), t);\n        d = opUnion(d, opOnion(sdBox(p + vec2(+sixto, 0), vec2(sixto)), t));\n    }\n    // a\n    if (bool(dann.y)) {\n        d = opUnion(d, sdSegment(p, vec2(-1.0 * sixto, 1.0 * sixto), vec2(-1.0 * sixto, 2.0 * sixto), t));\n        d = opUnion(d, sdSegment(p, vec2(-1.0 * sixto, 2.0 * sixto), vec2(1.0 * sixto, 2.0 * sixto), t));\n        d = opUnion(d, sdSegment(p, vec2(1.0 * sixto, 2.0 * sixto), vec2(1.0 * sixto, 0.0 * sixto), t));\n        d = opUnion(d, opOnion(sdBox(p + vec2(0, +sixto), vec2(sixto)), t));\n    }\n    // n\n    if (bool(dann.z)) {\n        d = opUnion(d, sdSegment(p, vec2(0, 0), vec2(0.0, -3.0 * sixto), t));\n        d = opUnion(d, sdSegment(p, vec2(0, -sixto), vec2(2.0 * sixto,  (bool(dann.w) ? -1.0 : -3.0) * sixto), t));\n        d = opUnion(d, sdSegment(p, vec2(2.0 * sixto, -3.0 * sixto), vec2(2.0 * sixto, -sixto), t));\n    }\n    return d;\n}\n\nfloat sdSigil(vec2 p, float t, vec4 dann) {\n    float d = sdMonogram(p + vec2(sixto, -4.0 * sixto), t, dann);\n    d = opUnion(d, sdMonogram(rotmat2(radians(090.0)) * p + vec2(sixto, -4.0 * sixto), t, dann));\n    d = opUnion(d, sdMonogram(rotmat2(radians(180.0)) * p + vec2(sixto, -4.0 * sixto), t, dann));\n    d = opUnion(d, sdMonogram(rotmat2(radians(270.0)) * p + vec2(sixto, -4.0 * sixto), t, dann));\n    return d;\n}\n\nfloat scene(vec2 p) {\n    float t = 0.125 * sixto;\n    float y = abs(-cos(iTime / 2.0) * 5.0);\n    p = rotmat2(iTime / 3.0) * p;\n    return sdSigil(p, t, vec4(y > 1.0, y > 2.0 , y > 3.0, y > 4.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\t// uv\n    vec2 p = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 q = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    p *= 3.0;\n    q *= 3.0;\n    \n    // dist\n    float d = scene(p);\n    \n    // color\n    vec3 col = vec3(0);\n    vec3 rnd = 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4));\n  \n    col = vec3(1.0) - sign(d) * vec3(0.65);\n\tcol *= 1.0 - exp(-24.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(240.0 * d);\n    \n    if (iMouse.z > 0.001) {\n        float d = scene(q);\n        col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - q) - abs(d)) - 0.0005));\n        col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, length(p - q) - 0.0015));\n    }\n    \n    float aa = 2.0 / iResolution.y;\n    col = max(col, rnd * smoothstep(aa, 0.0, d));\n    \n    // output\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rotmat2(float angle) {\n    float c = cos(angle), s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\n//// signed distance functions\n////// ------------------------------------------------\n////// https://iquilezles.org/articles/distfunctions/\n////// https://iquilezles.org/articles/distfunctions2d/\n////// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nfloat opUnion(float d1, float d2) {\n    // https://iquilezles.org/articles/distfunctions/\n    return min(d1, d2); \n}\n\nfloat opOnion(in float sdf, in float thickness) {\n    // https://iquilezles.org/articles/distfunctions/\n    return abs(sdf) - thickness;\n}\n\nfloat sdSegment(vec2 p, vec2 a, vec2 b, float r) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\n////// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n////// https://iquilezles.org/articles/distfunctions/\n////// https://iquilezles.org/articles/distfunctions2d/\n////// ------------------------------------------------\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}