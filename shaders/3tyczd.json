{
    "Shader": {
        "info": {
            "date": "1611535267",
            "description": "Cubic equation solver.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tyczd",
            "likes": 6,
            "name": "Cubic Equation Solver",
            "published": 3,
            "tags": [
                "math",
                "solver",
                "cubic",
                "equation"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "/*\nI wrote a cubic solver!\nNow using the complex solution (culling complex roots though).\n\nI heavily referenced the wikipedia article (its pretty good in my opinion):\nhttps://en.wikipedia.org/wiki/Cubic_equation\n\nAlso good video by Mathologer:\nhttps://www.youtube.com/watch?v=N-KXStupwsc\n\nThe solver is in the common tab.\nCubic solver in python: https://repl.it/@hathnoname/Cubic-Equation-Solver#main.py\nCubic solver on desmos: https://www.desmos.com/calculator/he38d6zfdd\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float a = sin(iTime) * 2.0;\n    float b = sin(iTime) * 5.0;\n    float c = cos(iTime * 0.75);\n    float d = sin(iTime * 0.5);\n\n    float f = a * uv.x * uv.x * uv.x + b * uv.x * uv.x + c * uv.x + d;\n    float g = 3.0 * a * uv.x * uv.x + 2.0 * b * uv.x + c; // Derivative for DE\n    color.r += smoothstep(unit, 0.0, abs(uv.y - f) / sqrt(1.0 + g * g));\n    color.b += smoothstep(unit, 0.0, abs(uv.y));\n\n    vec3 roots;\n    int nroots = solveCubic(a, b, c, d, roots);\n    for (int n=0; n < nroots; n++) {\n        color += smoothstep(unit, 0.0, length(uv - vec2(roots[n], 0.0)) - 0.05);\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec2 eta = vec2(-0.5, sqrt(0.75));\nint solveCubic(in float a, in float b, in float c, in float d, out vec3 roots) {\n    float h = 18.0 * a * b * c * d - 4.0 * b * b * b * d + b * b * c * c - 4.0 * a * c * c * c - 27.0 * a * a * d * d;\n\n    b /= a, c /= a, d /= a;\n    float d0 = b * b - 3.0 * c;\n    float d1 = (2.0 * b * b - 9.0 * c) * b + 27.0 * d;\n    float q = d1 * d1 - 4.0 * d0 * d0 * d0, j = sqrt(abs(q));\n\n    vec2 C = q < 0.0 ? vec2(d1, j) : vec2(d1 + j, 0.0);\n    if (abs(C.x) + abs(C.y) < 1e-3) C = vec2(d1 - j, 0.0);\n    float t = atan(C.y, C.x) / 3.0, r = pow(0.25 * dot(C, C), 1.0 / 6.0);\n    C = vec2(cos(t), sin(t));\n\n    float w = -d0 / r - r;\n    roots.x = (C.x * w - b) / 3.0;\n    roots.y = (dot(vec2(C.x, -C.y), eta) * w - b) / 3.0;\n    if (h > 0.0) roots.z = (dot(C, eta) * w - b) / 3.0;\n    else if (abs(dot(C.yx, eta)) < abs(C.y)) roots.x = roots.y;\n\n    return h < 0.0 ? 1 : 3;\n}\n\n/*\nint solveCubic(in float a, in float b, in float c, in float d, out vec3 roots) {\n    float aa = a * a, bb = b * b;\n\n    float denom = 3.0 * aa;\n    float inflect = b / (3.0 * a);\n\n    float p = c / a - bb / denom;\n    float q = bb * b / (13.5 * aa * a) - b * c / denom + d / a;\n    float ppp = p * p * p, qq = q * q;\n\n    float p2 = abs(p);\n    float v1 = 1.5 / p * q;\n\n    if (qq * 0.25 + ppp / 27.0 > 0.0) {\n        float v2 = v1 * sqrt(3.0 / p2);\n        if (p < 0.0) roots[0] = sign(q) * cosh(acosh(v2 * -sign(q)) / 3.0);\n        else roots[0] = sinh(asinh(v2) / 3.0);\n        roots[0] = -2.0 * sqrt(p2 / 3.0) * roots[0] - inflect;\n        return 1;\n    }\n\n    else {\n        float ac = acos(v1 * sqrt(-3.0 / p)) / 3.0; // 0π/3,       2π/3,               4π/3\n        roots = 2.0 * sqrt(-p / 3.0) * cos(vec3(ac, ac - 2.09439510239, ac - 4.18879020479)) - inflect;\n        return 3;\n    }\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}