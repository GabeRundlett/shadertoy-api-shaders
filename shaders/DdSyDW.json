{
    "Shader": {
        "info": {
            "date": "1687695843",
            "description": "Inspired by \"Thousand miles of rivers and mountains\" and Guilin scenery.",
            "flags": 0,
            "hasliked": 0,
            "id": "DdSyDW",
            "likes": 33,
            "name": "Chinese Ink-wash Painting II",
            "published": 3,
            "tags": [
                "3d",
                "mountain",
                "chinese",
                "paining"
            ],
            "usePreview": 0,
            "username": "Delincoter",
            "viewed": 682
        },
        "renderpass": [
            {
                "code": "//noise funtion abstract from https://www.shadertoy.com/view/ldc3RB\n//RayMarch funtion abstract from https://www.shadertoy.com/view/WtGXDD\n\n#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nvec2 hash22(vec2 p)\n{\n    p = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)));\n    \n    //return normalize(-1.0 + 2.0 * fract(sin(p)*43758.5453123));\n    return -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n}\n\nfloat noise(vec2 p)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n    \n    vec2 i = floor(p + (p.x + p.y) * K1);\n    \n    vec2 a = p - (i - (i.x + i.y) * K2);\n    vec2 o = (a.x < a.y) ? vec2(0.0, 1.0) : vec2(1.0, 0.0);\n    vec2 b = a - (o - K2);\n    vec2 c = a - (1.0 - 2.0 * K2);\n    \n    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n    vec3 n = h * h * h * h * vec3(dot(a, hash22(i)), dot(b, hash22(i + o)), dot(c, hash22(i + 1.0)));\n     \n    return dot(vec3(70.0, 70.0, 70.0), n);\n}\n\nfloat noise_itself(vec2 p)\n{\n    float f = 0.;\n    p *= 8.;\n    f += 1.0000 * noise(p); p = 6.0 * p;\n    f += 0.1000 * noise(p); p = 4.0 * p;\n    f += 0.0100 * noise(p); p = 3.0 * p;\n    //f += 0.001 * noise(p); \n    return f;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat GetDist(vec3 p) {\n    float d = p.y+4.;\n    p.z -= iTime;\n    float h = max(0., noise_itself(p.xz*0.01+13.7)); \n    h = pow(h, 1.6)*8.;\n    d -= h;\n    \n    return d*0.3;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = vec2(-.05, -0.5);\n    if(iMouse.z > 0.) m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.y = max(ro.y, -1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n    \n    float sun = S(0.998,1.,dot(normalize(rd), normalize(vec3(0.,0.5,-1.))));\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        \n        vec3 lightDir = normalize(vec3(0.0, .5,-.5));\n\n        float fre = max(0.,dot(n, normalize(ro-p)));\n        fre = pow(fre,.125);\n        fre = S(0.8,0.85,fre);\n        fre = mix(fre, 1., S(-0.0, -4., p.y));\n        \n        float heigh = S(-4., 0., p.y);\n        col = mix(vec3(0.6588,0.5176,0.2824), vec3(0.3059, 0.4627, 0.633), heigh)*fre;\n        \n        heigh = S(-4.1, -3.9, p.y);\n        col = mix(vec3(0.6,0.55,0.2)*S(0.,15., d), col, heigh);\n        \n        sun = .0;\n    }\n    \n    col = mix(col, vec3(0.6588,0.5176,0.2824)*1.5, S(0.,100., d));\n    \n    col = mix(col, vec3(1.,0.4,0.), sun);\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}