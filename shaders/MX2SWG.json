{
    "Shader": {
        "info": {
            "date": "1711031640",
            "description": "so it begins......\n\nfrom: https://youtu.be/khblXafu7iA?si=CDNHO6VDkX_eoXHY",
            "flags": 0,
            "hasliked": 0,
            "id": "MX2SWG",
            "likes": 3,
            "name": "Raymarching Tutorial cool",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "johnCavatelli",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "// cosine based palette : https://iquilezles.org/articles/palettes/\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.33, 0.67);\n    \n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdSphere(vec3 p, float s){\n    return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 b){\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat smin(float f1, float f2, float k){\n    float h = max( k - abs(f1-f2), 0.0)/k;\n    return min(f1,f2) - h*h*h*k*(1./6.);\n}\n\nmat2 rot2D(float angle){\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat map(vec3 p){\n    vec3 spherePos = vec3(sin(iTime)*4.,0,0);\n    float sphere = sdSphere(p - spherePos, 1.);\n    \n    //infinite space zone-------------\n    vec3 q = p;//input point copy\n    q.y -= iTime * .4;\n    q = fract(q) -  .5;//space repitition\n    \n    //float box = sdBox(q, vec3((sin(iTime) * .2)));\n    float box = sdBox(q, vec3(.1));\n    //--that ends our infinite space zone event----\n    \n    \n    float ground = p.y + .75;\n    \n    \n    return min(ground, smin(sphere, box, 2.));\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    //initialization\n    vec3 ro = vec3(0,0,-5);\n    vec3 rd = normalize(vec3(uv,1));\n    vec3 col = vec3(0);\n\n    float t = 0.;// total ditance traveled\n    \n    \n    m.y -= 1.;//don't let it clip through the ground plane\n    //vertical camera rotation\n    ro.yz *= rot2D(-m.y);\n    rd.yz *= rot2D(-m.y);\n    \n    \n    //horizontal camera rotation\n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n    \n    \n    int i;\n    for(i = 0; i < 80; i ++){\n        vec3 p = ro + rd * t;//position along the ray\n        \n        float d = map(p);//then compute distance to all objects \n        \n        t += d; // march the ray\n        \n        if( d < 0.001 || t > 100.){break;}//break if too close or far\n    }\n    \n    col = palette(t * 0.05 + float(i) * .02);//color based on distance\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}