{
    "Shader": {
        "info": {
            "date": "1680631842",
            "description": "attempt at floyd-steinberg via recursive buffer gone wrong. messing around with the values is quite fun. look out for the division by zero dead pixels",
            "flags": 32,
            "hasliked": 0,
            "id": "ddySzz",
            "likes": 0,
            "name": "floyd-steinberg tf potion",
            "published": 3,
            "tags": [
                "2d",
                "dither",
                "palette",
                "floydsteinberg"
            ],
            "usePreview": 1,
            "username": "oatmealine",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec4 buf = texture(iChannel0, fragCoord / iResolution.xy);\n  int idx = int(floor(buf.a * float(PALETTE_SIZE)));\n  fragColor = vec4(colors[idx], 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define SIMPLE_PALETTE\n\nfloat gray(vec3 color) {\n  return (min(color.r, min(color.g, color.b)) + max(color.r, max(color.g, color.b))) * 0.5;\n}\n\n#ifdef SIMPLE_PALETTE\nint getPalette(vec3 col) {\n  float g = clamp(gray(col), 0.0, 0.99);\n  return int(floor(g * float(PALETTE_SIZE)));\n}\n#else\nint getPalette(vec3 col) {\n  // comparasion\n  float minDist = 9e9;\n  int newCol;\n\n  for (int i = 0; i < PALETTE_SIZE; i++) {\n    vec3 compareCol = colors[i];\n\n    vec3 distVec = abs(col - compareCol);\n    float dist = (distVec.r + distVec.g + distVec.b) / 3.0;\n\n    if (dist < minDist) {\n      newCol = i;\n      minDist = dist;\n    }\n  }\n\n  return newCol;\n}\n#endif\n\nfloat fsin(float a) {\n  return sin(a) * 0.5 + 0.5;\n}\n\nvec3 hs(vec3 c, float s){\n  vec3 m=vec3(cos(s),s=sin(s)*.5774,-s);\n  return c*mat3(m+=(1.-m.x)/3.,m.zxy,m.yzx);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord / iResolution.xy;\n\n  vec4 tex = texture(iChannel1, uv);\n  vec4 tex2 = texture(iChannel0, uv);\n  \n  float angle = iTime * 0.8 + uv.y * PI + uv.x * PI;\n  float amp = 2.0 + fsin(iTime * 1.7 + uv.y * PI + uv.x * PI) * 2.0;\n  \n  vec4 left = texture(iChannel0,     uv + dir(angle + PI,       amp) / iResolution.xy);\n  vec4 top = texture(iChannel0,      uv + dir(angle + -PI*0.5,  amp) / iResolution.xy);\n  vec4 topleft = texture(iChannel0,  uv + dir(angle + -PI*0.75, amp) / iResolution.xy);\n  vec4 topright = texture(iChannel0, uv + dir(angle + -PI*0.25, amp) / iResolution.xy);\n  \n  vec3 adjTex = tex.rgb +\n    (left.rgb     * 7./16. +\n    topright.rgb * 3./16. +\n    top.rgb      * 5./16. +\n    topleft.rgb  * 1./16.);\n\n  int colIdx = getPalette(adjTex);\n  vec3 col = colors[colIdx];\n  vec3 error = abs(tex.rgb - col);\n\n  fragColor = vec4(abs(error / (col + 0.02) / hs(1.0 - tex2.rgb, iTime * 0.2 - uv.y - uv.x) * 0.3), float(colIdx) / float(PALETTE_SIZE));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.1415926538\n\n#define RGB(r,g,b) (vec3(r,g,b) / 255.0)\n\n#define PALETTE_SIZE 16\nvec3 colors[PALETTE_SIZE] = vec3[](\n  RGB(77,  0,   76 ),\n  RGB(143, 0,   118),\n  RGB(199, 0,   131),\n  RGB(245, 0,   120),\n  RGB(255, 71,  100),\n  RGB(255, 147, 147),\n  RGB(255, 213, 204),\n  RGB(255, 243, 240),\n  RGB(0,   7,   40 ),\n  RGB(0,   80,  96 ),\n  RGB(0,   187, 255),\n  RGB(7,   94,  0  ),\n  RGB(80,  199, 0  ),\n  RGB(136, 230, 86 ),\n  RGB(70, 20, 50),\n  RGB(145, 70, 100)\n);\n\nvec2 dir(float angle, float amp) {\n  return vec2(cos(angle) * amp, sin(angle) * amp);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}