{
    "Shader": {
        "info": {
            "date": "1674934228",
            "description": "A globally lit scene with a phong shaded sphere. Supports ambient lighting and a main directional light.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctfSRS",
            "likes": 2,
            "name": "Simple Phong Raymarch Template",
            "published": 3,
            "tags": [
                "raymarched",
                "sphere"
            ],
            "usePreview": 0,
            "username": "Bricktronic",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "const float EPS = 0.001;\nconst vec3 lightDir = vec3(0.5, 1, 0.25);\nconst vec3 lightColor = vec3(1.0, 1.0, 1.0);\nconst vec3 ambient = vec3(0.0, 0.0, 0.0);\n\nvec3 cameraPos;\n\nstruct Ray\n{\n    vec3 Pos;\n    vec3 Dir;\n    vec4 Color;\n    float Offset;\n};\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdSphere( vec3 p, vec3 p2, float s )\n{\n      return length(p - p2)-s;\n}\n\n// https://www.shadertoy.com/view/4lVXRm\nmat3 camRotation( vec2 m )\n{\n    m.y = -m.y;\n    \n    vec2 s = sin(m);\n    vec2 c = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, c.y, s.y, 0.0, -s.y, c.y);\n    mat3 rotY = mat3(c.x, 0.0, -s.x, 0.0, 1.0, 0.0, s.x, 0.0, c.x);\n    \n    return rotY * rotX;\n}\n\nfloat sceneDist(in vec3 p)\n{\n    return sdSphere(p, vec3(0, 0, 0), 1.0);\n}\n\n// https://michaelwalczyk.com/blog-ray-marching.html\nvec3 sceneNormal(in vec3 p)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = sceneDist(p + small_step.xyy) - sceneDist(p - small_step.xyy);\n    float gradient_y = sceneDist(p + small_step.yxy) - sceneDist(p - small_step.yxy);\n    float gradient_z = sceneDist(p + small_step.yyx) - sceneDist(p - small_step.yyx);\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\n\n// https://learnopengl.com/Lighting/Basic-Lighting\nvec3 lightScene(in vec3 pos)\n{  \n    // Diffuse\n    vec3 norm = normalize(sceneNormal(pos));\n    float diff = max(dot(norm, lightDir), 0.0);\n    vec3 diffuse = diff * lightColor;\n    \n    // Specular\n    vec3 viewDir = normalize(cameraPos - pos);\n    vec3 reflectDir = reflect(-lightDir, norm);\n\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\n    vec3 specular = 0.002 * spec * lightColor;  \n\n    return (ambient + diffuse + specular);\n}\n\nvoid march(inout Ray ray)\n{\n    float totalDist = 0.0;\n    for(int i = 0; i < 100; i++)\n    {\n        float dist = sceneDist(ray.Pos);\n        \n        if(dist < EPS)\n        {\n           ray.Color = vec4(vec3(1, 1, 1) * lightScene(ray.Pos), 1);\n           break;\n        }\n        \n        float travel = min(dist, 0.025);\n        ray.Pos += ray.Dir * (travel * ray.Offset);\n        totalDist += travel;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float div = (iResolution.x / iResolution.y);\n    vec2 sUV = vec2((uv.x * div) - 0.4, uv.y);\n    \n    float rot = iTime * 0.2;\n    cameraPos = vec3(-sin(rot) * 2.0, 0, -cos(rot) * 2.0);\n    mat3 cameraDir = camRotation(-vec2(rot, 0));\n    \n    Ray ray;\n    ray.Pos = cameraPos;\n    ray.Dir = vec3((sUV * 2.0 - 1.0), 1) * cameraDir;\n    ray.Dir = normalize(ray.Dir);\n    ray.Offset = (length(texture(iChannel0, uv * 1.0)) * 0.1) + 1.0;\n    ray.Color = vec4(ambient, 1);\n    \n    march(ray);\n    \n    fragColor = vec4(ray.Color.xyz,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}