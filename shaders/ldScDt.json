{
    "Shader": {
        "info": {
            "date": "1494322363",
            "description": "Flight over voronian icescape (mouse enabled)",
            "flags": 0,
            "hasliked": 0,
            "id": "ldScDt",
            "likes": 10,
            "name": "Pack Ice",
            "published": 3,
            "tags": [
                "voronoi",
                "ocean",
                "ice",
                "flight"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 720
        },
        "renderpass": [
            {
                "code": "// \"Pack Ice\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\n\nmat3 flyerMat[2], flMat;\nvec3 flyerPos[2], flPos, qHit, qHitTransObj, sunDir;\nfloat tCur, dstFar, flyVel, fusLen, wSpan;\nint idObj, idObjGrp;\nconst int idFus = 11, idPipe = 12, idWing = 13, idStrut = 14, idHstab = 15,\n   idFin = 16, idLeg = 17, idAxl = 18, idWhl = 19, idNose = 20, idCkpit = 21,\n   idPlt = 22;\nconst float pi = 3.14159;\n\nfloat VorDist (vec2 p)\n{\n  vec3 dv;\n  vec2 ip, fp, g, b;\n  ip = floor (p);\n  fp = fract (p);\n  dv = vec3 (8.);\n  b.x = 0.;\n  for (float gy = -1.; gy <= 1.; gy ++) {\n    for (float gx = -1.; gx <= 1.; gx ++) {\n      g = vec2 (gx, gy);\n      dv.z = length (g + 0.9 * Hashv2v2 (ip + g) - fp);\n      b.y = step (dv.z, dv.y) * (dv.z - dv.y);\n      dv.xy += b + step (dv.z, dv.x) * (dv.zx - dv.xy - b);\n    }\n  }\n  return dv.y - dv.x;\n}\n\nfloat GrndHt (vec2 p)\n{\n  float s;\n  s = Noisefv2 (0.3 * p.yx);\n  p += 1.5 * sin (2. * pi * s) +\n     0.1 * sin (2. * pi * Noisefv2 (2. * p.xy));\n  return 2. * smoothstep (0.2, 0.35 + 0.3 * s, VorDist (0.03 * p));\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.3, 0.35 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  float h;\n  h = GrndHt (p.xz);\n  vec2 e = vec2 (0.01, 0.);\n  return normalize (vec3 (h - GrndHt (p.xz + e.xy), e.x,\n     h - GrndHt (p.xz + e.yx)));\n}\n\nfloat FlyerDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  float d, wr;\n  q = p;\n  wr = -0.2 + q.z / fusLen;\n  d = PrRoundBoxDf (q, vec3 (0.07 * (1. - 0.8 * wr * wr),\n     0.11 * (1. - 0.6 * wr * wr), 1.) * fusLen, 0.05 * fusLen);\n  q -= vec3 (0., 0.1, 0.3) * fusLen;\n  d = max (d, - PrRoundBoxDf (q, vec3 (0.05, 0.1, 0.15) * fusLen,\n     0.03 * fusLen)); \n  if (d < dMin) { dMin = min (dMin, d);  idObj = idObjGrp + idFus;  qHit = q; }\n  q = p;  q -= vec3 (0., 0.08, 0.3) * fusLen;\n  d = PrRoundBoxDf (q, vec3 (0.05, 0.02, 0.15) * fusLen, 0.03 * fusLen); \n  if (d < dMin) { dMin = min (dMin, d);  idObj = idObjGrp + idCkpit;  qHit = q; }\n  q = p;  q.z = abs (q.z - 0.33 * fusLen) - 0.08 * fusLen;\n  q -= vec3 (0., 0.17, 0.) * fusLen;\n  d = PrSphDf (q, 0.04 * fusLen); \n  if (d < dMin) { dMin = min (dMin, d);  idObj = idObjGrp + idPlt;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0.03, 0.8);\n  q.x = abs (q.x) - 0.1 * fusLen;\n  d = PrCapsDf (q, 0.02 * fusLen, 0.15 * fusLen);\n  if (d < dMin) { dMin = min (dMin, d);  idObj = idObjGrp + idPipe;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0.03, 1.05);\n  d = PrCapsDf (q, 0.05 * fusLen, 0.02 * fusLen);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + idNose;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0.09, 0.2);\n  qq = q;  qq.y = abs (qq.y) - 0.21 * fusLen;\n  wr = q.x / wSpan;\n  d = PrFlatCylDf (qq.zyx, 0.24 * (1. - 0.2 * wr * wr) * fusLen,\n     0.01 * (1. - 0.8 * wr * wr) * fusLen, wSpan);\n  if (d < dMin) { dMin = min (dMin, d);  idObj = idObjGrp + idWing;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0.09, 0.25);\n  q.xz = abs (q.xz) - fusLen * vec2 (0.5, 0.1);\n  d = PrCylDf (q.xzy, 0.01 * fusLen, 0.21 * fusLen);\n  if (d < dMin) { dMin = min (dMin, d);  idObj = idObjGrp + idStrut;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0.15, 0.25);\n  q.x = abs (q.x) - 0.1 * fusLen;\n  d = PrCylDf (q.xzy, 0.01 * fusLen, 0.15 * fusLen);\n  if (d < dMin) { dMin = min (dMin, d);  idObj = idObjGrp + idStrut;  qHit = q; }\n  float tSpan = 0.35 * wSpan;\n  q = p - fusLen * vec3 (0., 0., - 0.9);\n  wr = q.x / tSpan;\n  d = PrFlatCylDf (q.zyx, 0.15 * (1. - 0.25 * wr * wr) * fusLen,\n     0.007 * (1. - 0.2 * wr * wr) * fusLen, tSpan);\n  q.x = abs (q.x);\n  d = max (d, 0.02 * fusLen - 1.5 * q.x - q.z);\n  if (d < dMin) { dMin = min (dMin, d);  idObj = idObjGrp + idHstab;  qHit = q; }\n  float fSpan = 0.32 * wSpan;\n  q = p - fusLen * vec3 (0., 0., - 0.87);\n  q.yz = Rot2D (q.yz, 0.15);\n  wr = q.y / fSpan;\n  d = PrFlatCylDf (q.zxy, 0.15 * (1. - 0.3 * wr * wr) * fusLen,\n     0.007 * (1. - 0.3 * wr * wr) * fusLen, fSpan);\n  d = max (d, - q.y);\n  if (d < dMin) { dMin = min (dMin, d);  idObj = idObjGrp + idFin;  qHit = q; }\n  q = p - fusLen * vec3 (0., -0.25, 0.5);\n  q.x = abs (q.x) - 0.14 * fusLen;\n  q.xy = Rot2D (q.xy, -0.55);  q.yz = Rot2D (q.yz, 0.15);\n  d = PrCylDf (q.xzy, 0.013 * fusLen, 0.12 * fusLen);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + idLeg;  qHit = q; }\n  q = p - fusLen * vec3 (0., -0.34, 0.515);\n  q.x = abs (q.x) - 0.22 * fusLen;\n  d = PrCylDf (q.yzx, 0.01 * fusLen, 0.035 * fusLen);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + idAxl;  qHit = q; }\n  q.x -= 0.01 * fusLen;\n  d = PrCylDf (q.yzx, 0.1 * fusLen, 0.015 * fusLen);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + idWhl;  qHit = q; }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  idObjGrp = 1 * 256;\n  dMin = FlyerDf (flyerMat[0] * (p - flyerPos[0]), dMin);\n  idObjGrp = 2 * 256;\n  dMin = FlyerDf (flyerMat[1] * (p - flyerPos[1]), dMin);\n  return 0.9 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat PropelDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p - fusLen * vec3 (0., 0.02, 1.07);\n  d = PrCylDf (q, 0.3 * fusLen, 0.007 * fusLen);\n  if (d < dMin) { dMin = d;  qHitTransObj = q; }\n  return dMin;\n}\n\nfloat TransObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  dMin = PropelDf (flyerMat[0] * (p - flyerPos[0]), dMin);\n  dMin = PropelDf (flyerMat[1] * (p - flyerPos[1]), dMin);\n  return dMin;\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 30; j ++) {\n    d = TransObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec4 FlyerCol (int ig, int id, vec3 n)\n{\n  vec3 col, qqHit, nn;\n  float spec, b;\n  spec = 0.2;\n  qqHit = qHit / fusLen;\n  col = (ig == 2) ? vec3 (1., 0., 0.) : vec3 (0., 1., 0.);\n  if (id == idFus) {\n    qqHit.yz -= vec2 (-0.1, -0.7);\n    col = mix (vec3 (0.5, 0.5, 1.), col,\n       (1. - SmoothBump (0.06, 0.09, 0.01, length (qqHit.yz))) *\n       (1. - SmoothBump (-0.01, 0.03, 0.01, length (qqHit.yz))));\n    if (n.z > 0.9 && qqHit.y < -0.03) col *= 0.3;\n  } else if (id == idWing) {\n    b = wSpan / (8. * fusLen);\n    b = mod (qqHit.x + 0.5 * b, b) - 0.5 * b;\n    col *= 1. + 0.1 * SmoothBump (-0.01, 0.01, 0.002, b);\n    if (qqHit.y * n.y > 0.) {\n      qqHit.x = abs (qqHit.x) - 0.8;\n      qqHit.z -= 0.03;\n      col *= mix (vec3 (0.5, 0.5, 1.), col,\n         (1. - SmoothBump (0.08, 0.12, 0.01, length (qqHit.xz))) *\n         (1. - SmoothBump (-0.01, 0.03, 0.01, length (qqHit.xz))));\n    }\n  } else if (id == idFin || id == idHstab) {\n    col *= 1. - 0.6 * SmoothBump (-0.062, -0.052, 0.002, qqHit.z);\n  } else if (id == idPipe || id == idNose) {\n    col = vec3 (0.8, 0.8, 0.);\n    spec = 0.4;\n  } else if (id == idStrut || id == idLeg) {\n    col = 0.6 * col + vec3 (0.4);\n  } else if (id == idAxl) {\n    col = vec3 (0.3, 0.2, 0.);\n  } else if (id == idCkpit) {\n    col = vec3 (0.2, 0.15, 0.05);\n  } else if (id == idPlt) {\n    col = vec3 (0.1, 0.07, 0.);\n    if (n.z > 0.7) {\n      col *= 2.;\n      qqHit.x = abs (qqHit.x) - 0.015 * fusLen;\n      col *= (1. - 0.9 * SmoothBump (0.003, 0.01, 0.001, length (qqHit.xy)));\n    }\n  } else if (id == idWhl) {\n    if (length (qqHit.yz) < 0.07) col = vec3 (0.4, 0.4, 0.4);\n    else {\n      col = vec3 (0.02);\n      spec = 0.;\n    }\n  }\n  return vec4 (col, spec);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02 * fusLen;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.03 * fusLen;\n    if (sh < 0.05) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.15;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  rd.y = abs (rd.y);\n  ro.xz += 2. * tCur;\n  sd = max (dot (rd, sunDir), 0.);\n  col = vec3 (0.1, 0.2, 0.5) + 0.2 * pow (1. - max (rd.y, 0.), 8.) +\n     0.35 * pow (sd, 8.) + 0.65 * min (pow (sd, 256.), 0.3);\n  f = Fbm2 (0.05 * (ro.xz + rd.xz * (50. - ro.y) / rd.y));\n  col = mix (col, vec3 (1.), clamp (0.1 + 0.8 * f * rd.y, 0., 1.));\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col, colW, roo;\n  float dstObj, dstGrnd, dstWat, dstPropel, sh;\n  int ig, id;\n  bool isRefl;\n  roo = ro;\n  dstGrnd = GrndRay (ro, rd);\n  dstWat = (rd.y < 0.) ? - ro.y / rd.y - 0.1 : dstFar;\n  dstObj = ObjRay (ro, rd);\n  dstPropel = TransObjRay (ro, rd);\n  if (min (dstObj, dstGrnd) < dstPropel) dstPropel = dstFar;\n  isRefl = false;\n  if (dstWat < min (min (dstGrnd, dstObj), dstFar)) {\n    ro += rd * dstWat;\n    roo = ro;\n    vn = VaryNf (0.8 * ro, vec3 (0., 1., 0.), 0.1);\n    rd = reflect (rd, vn);\n    ro += 0.1 * rd;\n    dstGrnd = GrndRay (ro, rd);\n    dstObj = ObjRay (ro, rd);\n    isRefl = true;\n  }\n  if (dstObj < min (dstGrnd, dstFar)) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    ig = idObj / 256;\n    id = idObj - 256 * ig;\n    col4 = FlyerCol (ig, id, ((ig == 2) ? flyerMat[1] : flyerMat[0]) * vn);\n    if (idObj == 256 + idWing || idObj == 256 + idHstab) {\n      vn.yz = Rot2D (vn.yz, -0.6 * qHit.z / fusLen);\n      vn = VaryNf (100. * ro, vn, 0.05);\n    } else if (idObj == 256 + idFin) {\n      vn.xz = Rot2D (vn.xz, -0.6 * qHit.z / fusLen);\n    }\n    sh = ObjSShadow (ro, sunDir);\n    col = col4.rgb * (0.2 + 0.2 * max (dot (vn.xz, - normalize (sunDir.xz)), 0.) +\n       0.6 * sh * max (dot (vn, sunDir), 0.)) +\n       sh * col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.);\n  } else if (dstGrnd < dstFar) {\n    ro += dstGrnd * rd;\n    vn = VaryNf (2.3 * ro, GrndNf (ro), 2.);\n    vn = VaryNf (15. * ro.zyx, vn, 0.5);\n    sh = GrndSShadow (ro, sunDir);\n    col = vec3 (1.);\n    col = col * (0.1 + 0.2 * max (dot (vn.xz, - normalize (sunDir.xz)), 0.) +\n       0.1 * max (vn.y, 0.) + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       sh * 0.3 * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.);\n    col = mix (col, SkyCol (roo, rd), max (pow (dstGrnd / dstFar, 4.) - 0.1, 0.));\n  } else col = SkyCol (ro, rd);\n  if (isRefl) col *= 0.95;\n  if (dstPropel < dstFar) col = vec3 (0.1) * (1. - 0.3 * SmoothBump (0.25, 0.27,\n     0.006, length (qHitTransObj.xy) / fusLen)) + 0.7 * col;\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvec3 TrackPath (float z)\n{\n  return vec3 (30. * sin (0.035 * z) * sin (0.012 * z) * cos (0.01 * z) +\n     26. * sin (0.0032 * z),\n     4.5 + 2. * SmoothBump (0.4, 0.7, 0.1, mod (0.006 * z, 1.)), z);\n}\n\nvoid FlyerPM (float t, float vu)\n{\n  vec3 fpF, fpB, vel, acc, va, ort, cr, sr;\n  float vy, dt, rlFac;\n  dt = 0.2;\n  flPos = TrackPath (t * flyVel);\n  fpF = TrackPath ((t + dt) * flyVel);\n  fpB = TrackPath ((t - dt) * flyVel);\n  vel = (fpF - fpB) / (2. * dt);\n  vy = vel.y;\n  vel.y = 0.;\n  acc = (fpF - 2. * flPos + fpB) / (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) / length (vel);\n  vel.y = vy;\n  rlFac = (vu == 0.) ? 0.3 : 0.5;\n  ort = vec3 (0., atan (vel.z, vel.x) - 0.5 * pi,\n     rlFac * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  flMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvec3 GlareCol (vec3 rd, vec3 sd, vec2 uv)\n{\n  vec3 col;\n  vec3 e = vec3 (1., 0., 0.);\n  if (sd.z > 0.) col = 0.05 * pow (sd.z, 8.) *\n     (1.5 * e.xyy * max (dot (normalize (rd + vec3 (0., 0.3, 0.)), sunDir), 0.) +\n      e.xxy * SmoothBump (0.04, 0.07, 0.07, length (uv - sd.xy)) +\n      e.xyx * SmoothBump (0.15, 0.2, 0.07, length (uv - 0.5 * sd.xy)) +\n      e.yxx * SmoothBump (1., 1.2, 0.07, length (uv + sd.xy)));\n  else col = vec3 (0.);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, u, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, f, s;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  sunDir = normalize (vec3 (1., 1., -1.));\n  dstFar = 300.;\n  fusLen = 0.7;\n  wSpan = 1.2 * fusLen;\n  flyVel = 5.;\n  FlyerPM (tCur + 3., 1.);\n  flyerPos[0] = flPos;  flyerPos[0].x -= 3.;\n  flyerMat[0] = flMat;\n  FlyerPM (tCur + 3.5, 1.);\n  flyerPos[1] = flPos;  flyerPos[1].x += 3.;\n  flyerMat[1] = flMat;\n  rd = normalize (vec3 (uv, 2.));\n  if (mPtr.z > 0.) {\n    FlyerPM (tCur + 3.25, 0.);\n    ro = flPos;\n    az = clamp (-1.5 * pi * mPtr.x, - pi, pi);\n    el = clamp (-1.3 * pi * mPtr.y, - 0.25 * pi, 0.25 * pi);\n    ori = vec2 (el, az);\n    ca = cos (ori);\n    sa = sin (ori);\n    vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n            mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n    rd = rd * vuMat * flMat;\n  } else {\n    s = mod (0.02 * tCur, 2.);\n    FlyerPM (tCur + 4. * SmoothBump (0.3, 0.8, 0.15, mod (s, 1.)), 0.);\n    ro = flPos;\n    ro.y += sin (0.1 * tCur);\n    vd = normalize (flyerPos[0] + SmoothBump (0.95, 1.95, 0.05, s) *\n       (flyerPos[1] - flyerPos[0]) - ro);\n    u = - vd.y * vd;\n    f = 1. / sqrt (1. - vd.y * vd.y);\n    vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n    rd = vuMat * rd;\n  }\n  col = ShowScene (ro, rd) + GlareCol (rd, vuMat * sunDir, 1.5 * uv);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x / rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2),\n     dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) -\n     Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}