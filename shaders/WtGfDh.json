{
    "Shader": {
        "info": {
            "date": "1614222741",
            "description": "Random walk (brownian motion) implies integration to know particle position as a function of time, but a recursive solution can provide a qualitatively and statistically equivalent result.\n\nFull description in source.\n\nMouse control.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGfDh",
            "likes": 4,
            "name": "Fast implicit random walk",
            "published": 3,
            "tags": [
                "random",
                "brownian"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 397
        },
        "renderpass": [
            {
                "code": "/*\n\nFast implicit random walk\nCreated by Theron Tarigo, 2021\nhttps://www.shadertoy.com/view/WtGfDh\n\nRandom walk (brownian motion) implies integration to know particle position as\na function of time, but a recursive solution can provide a qualitatively and\nstatistically equivalent result.\n\nComparison:\n  Top: simple integration (slow)\n  Bottom: optimized solution\n\nMouse x to change seeds.\n\n*/\n\nfloat randwalk_dumb (int i, uint seed) {\n  float x = 0.;\n  for (int j=0; j<i; j++) {\n    x+= rnd2_gaussian(uint(j)+0xda6cu*seed).x;\n  }\n  return x;\n}\n\nfloat randwalk_fast (int i, uint seed) {\n  float x = 0.;\n  for (int j=1; j<20; j++) {\n    uint n = uint(i)>>j;\n    uint k = uint(i)-(uint(n)<<j);\n    float l = 1.-abs(1.-float(k)*exp2(-float(j))*2.);\n    x+=rnd2_gaussian(((2u*n+1u)<<(j-1))+0xda6cu*seed).x*l*exp2(.5*float(j)-1.);\n  }\n  return x;\n}\n\nvoid mainImage( out vec4 fd, in vec2 fc ) {\n\n  fd = vec4(0.);\n\n  vec3 col = vec3(0.);\n\n  vec2 uv = fc/iResolution.xy;\n  \n  uint s = uint(iMouse.x);\n  \n  // top\n  PLOT_CONTINUOUS(col, uv, mat2(0,.5,1,.5), mat2(0,-1,800,1),\n    vec3(1), 1, 1, 1., randwalk_dumb(int(x), s+128u)/100.);\n\n  // bottom\n  PLOT_CONTINUOUS(col, uv, mat2(0,0,1,.5), mat2(0,-1,800,1),\n    vec3(1), 1, 1, 1., randwalk_fast(int(x), s)/100.);\n  \n#if 0 // (visually) compare statistics\n  uint seed = uint(fc.x)+uint(iResolution.x*round(fc.y));\n  int n = 37*int(1.+fc.y/iResolution.y*8.);\n  float r = randwalk_fast(n, seed);\n  if (uv.x>.5) r = randwalk_dumb(n, seed);\n  col = vec3(r*r*.0003);\n#endif\n\n  // Convert to Gamma=2.2 and output to screen\n  fd.rgb = pow(col, vec3(1./2.2));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n//////  COMPLEX ARITHMETIC  ///////////////////////////////////////////////////\nconst float pi = 3.1415927;\nvec2 compmul(vec2 a, vec2 b){return vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);}\nvec2 compsin(float x){return vec2(cos(x),sin(x));}\nvec2 compinv(vec2 a){return vec2(1,-1)*a/dot(a,a);}\nfloat comparg(vec2 a){return atan(a.y,a.x);}\nvec2 comppow(vec2 a, float n){return compsin(comparg(a)*n)*pow(dot(a,a),n/2.);}\nvec2 compconj(vec2 a){return vec2(a.x,-a.y);}\n\nvec4 compmul(vec4 a, vec2 b){return vec4(compmul(a.xy,b),compmul(a.zw,b));}\n\n// https://www.shadertoy.com/view/WttXWX\n// --- triple32 from Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nvec2 rnd2_gaussian(uint seed) {\n  uint r = triple32(seed);\n  uvec2 r2 = (uvec2(r)>>uvec2(0,16))&0xFFFFu;\n  vec2 U = vec2(r2+1u)/float(0x10000u);\n  U = sqrt(abs(2.*log(U.x)))*compsin(2.*pi*U.y);\n  return U;\n}\n\n// https://www.shadertoy.com/view/3t3XWf by ttg\nvoid PLOT_CONTINUOUS_CHECK_ARGS(inout vec3 fcolor, vec2 fcoord, mat2 window,\n  mat2 domain, vec3 color, int side, int blend, float linewidth) {}\n#define PLOT_CONTINUOUS(_fcolor, _Afcoord, _Awindow, \\\n  _Adomain, _Acolor, _Aside, _Ablend, _Alinewidth, _function) \\\n  { \\\n    PLOT_CONTINUOUS_CHECK_ARGS(_fcolor, _Afcoord, _Awindow, \\\n      _Adomain, _Acolor, _Aside, _Ablend, _Alinewidth); \\\n    vec2 _fcoord = (_Afcoord); \\\n    mat2 _window = (_Awindow); \\\n    mat2 _domain = (_Adomain); \\\n    vec3 _color = (_Acolor); \\\n    int _side = (_Aside); \\\n    int _blend = (_Ablend); \\\n    float _alinewidth = (_Alinewidth); \\\n    vec2 _rcoord = _fcoord-_window[0]; \\\n    vec2 _res = _window[1]/(_domain[1]-_domain[0])/ \\\n        vec2(dFdx(_fcoord.x),dFdy(_fcoord.y)); \\\n    float _linerpa = min(10.,(_alinewidth*_res.x)*.5); \\\n    float _linerp = max(.5,_linerpa); \\\n    if (all(bvec4(greaterThan(_rcoord,vec2(0)), \\\n                  lessThan(_rcoord,_window[1])))) { \\\n      float _pixmixsum = 0.; \\\n      int _passes = 0; \\\n      if (_side==0) _passes = min(10,int(floor(_linerp))); \\\n      vec2 _x = _rcoord/_window[1]*(_domain[1]-_domain[0])+_domain[0]; \\\n      float _ylast; \\\n      for (int _i = -_passes-1; _i <= _passes; _i++) { \\\n        float offset = float(_i) ; \\\n        vec2 _x = _x + vec2(1,0)*offset/_res; \\\n        float _dx = .5/_res.x; \\\n        float _y1, _y2, _ddx; \\\n        float x = _x.x+_dx; _y1 = (_function); \\\n        _y2 = _ylast; _ylast = _y1; \\\n        if (_i==-_passes-1) continue; \\\n        _ddx = ((_y1-_y2)/(_dx*2.))*_res.y/_res.x; \\\n        float _y = (_y1+_y2)/2.; \\\n        float hdiff = (_y-_x.y) *_res.y; \\\n        if (_side==0) hdiff = \\\n          .7*(abs(hdiff)+.5-_linerp*sqrt(1.-pow(offset/_linerp,2.))); \\\n        float pixmix = hdiff/sqrt(1.+_ddx*_ddx); \\\n        if (_side!=0) pixmix = pixmix*sign(float(_side))+0.5; \\\n        if (_side==0) pixmix = 1.-pixmix; \\\n        pixmix = clamp(pixmix,0.,1.); \\\n        if (_blend==1 && _side==0) pixmix /= sqrt(1.+_ddx*_ddx); \\\n        if (_passes!=0 && abs(_i)==_passes) pixmix *= fract(_linerp); \\\n        if (_side==0) pixmix *= \\\n          1./(1.+max(0.,_linerp-2.)/pow(1.+_ddx*_ddx,2.0)); \\\n        _pixmixsum += pixmix; \\\n      } \\\n      if (_blend!=1) _pixmixsum = clamp(_pixmixsum,0.,1.); \\\n      if (_side==0 && _linerpa<.5) _pixmixsum*=max(0.,_linerpa*2.); \\\n      if (_blend==0) _fcolor = mix( _fcolor, _color, _pixmixsum ); \\\n      if (_blend==1) _fcolor = _fcolor + _color*_pixmixsum; \\\n      if (_blend==2) _fcolor = _fcolor * mix( vec3(1.), _color, _pixmixsum ); \\\n      _fcolor = max(vec3(0.), _fcolor); \\\n    } \\\n  }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}