{
    "Shader": {
        "info": {
            "date": "1687370974",
            "description": "Colored layers are fun",
            "flags": 0,
            "hasliked": 0,
            "id": "csfcWS",
            "likes": 6,
            "name": "Tapestry 6",
            "published": 3,
            "tags": [
                "ifs"
            ],
            "usePreview": 0,
            "username": "iterati",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "float sheen( in float d, in float x )\n{\n    return 1. - smoothstep(0.0, x, abs(d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.x;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    vec3 col = vec3(0.);\n    float d = 0.;\n    \n    float r = sawT(iTime, 7.) * 0.5 + 0.25;\n    float color = sinT(iTime, 60.);\n\n    float x = ampT(iTime, 36., 4., 3.) * 0.2 + 1.2;\n    uv.x += (sinT(iTime, 45.) - 0.5) * 0.5 * x;\n    uv.y += (sinT(iTime + (45. * PI), 45.) - 0.5) * 0.5 * x;\n\n    const float iterations = 8.;\n    for (float i = 0.0; i < iterations; i++) {\n        float rot = (i + 1.) * PI * 0.25;\n        float xx = (ampT(iTime, 63., 4., 3.) - 0.5) * 0.5 * ((iterations - i) / iterations);\n        uv = fract(rotate(uv, rot) * (x + xx)) - 0.5;\n        float vu = floor(uv.x) + floor(uv.y);\n        d = sdStar(uv, r, 4, 4.);\n        d = sheen(d, (0.0025 * (i + 1.) * (x + xx)));\n        float cc = (1. - sawT(iTime, 29.)) * 3.;\n        col = palette(mod(color + (i * cc * (1. / iterations)), 1.0));\n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926538\n\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.333, 0.667);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sinT( in float t, in float l )\n{\n    return (sin(((t * 2. * PI) / l) + (0.5 * PI)) * 0.5) + 0.5;\n}\n\nfloat sawT( in float t, in float l )\n{\n    return abs((mod(t / l, 1.) - 0.5) * 2.0);\n}\n\nfloat ampT( in float t, float l, float a, float b)\n{\n    return abs(cos((t / l) * a * 2. * PI) * cos((t / l) * b * 2. * PI) * 0.5 - 0.5);\n}\n\nfloat sdStar(in vec2 p, in float r, in int n, in float m)\n{\n    // next 4 lines can be precomputed for a given shape\n    float an = PI/float(n);\n    float en = PI/m;  // m is between 2 and n\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) for regular polygon\n\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nint _N = 2;\n#define mainImage mainImage0(out vec4 O, vec2 U);        \\\nvoid mainImage(out vec4 O, vec2 U) {                     \\\n    vec4 o; O = vec4(0);                                 \\\n    for (int k=0; k < _N*_N; k++ )                       \\\n      { mainImage0(o,U+vec2(k%_N-_N/2,k/_N-_N/2)/float(_N)); O += o; }  \\\n    O /= float(_N*_N);                                   \\\n    O = pow( O, vec4(1./2.2) );        /* to sRGB */     \\\n} \\\nvoid mainImage0",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}