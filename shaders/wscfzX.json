{
    "Shader": {
        "info": {
            "date": "1605655352",
            "description": "Remake for this one https://www.shadertoy.com/view/Xdsfzj \nA bit refactored with more detailed options and tweaks and no buffers",
            "flags": 64,
            "hasliked": 0,
            "id": "wscfzX",
            "likes": 4,
            "name": "Sound visualizer with hexagons",
            "published": 3,
            "tags": [
                "sound",
                "visualizer",
                "geometry"
            ],
            "usePreview": 0,
            "username": "levonchic",
            "viewed": 474
        },
        "renderpass": [
            {
                "code": "// MIT License (c) bitrate16\n// Decorative settings\n#define BAR_HEIGHT        0.75        // Bar height (0.0 ~ 1.0)\n#define BAR_PERIOD        8           // Bar stepping\n#define BAR_WIDTH         8           // Bar height\n#define BAR_COLOR         vec4(1.0)   // Bar colors\n\t\t\t\t\t\t\t\t\t  // Triangle color\n#define BG_TRIANGLE       vec4(-.065) \n\t\t\t\t\t\t\t\t\t  // Primary background color\n#define BG_COL            vec4(0.065) \n\t\t\t\t\t\t\t\t\t  // Secondary background color\n#define BG_NCOL           vec4(0.005) \n#define BG_GRADIENT_START 0.49        // Gradient effect start value\n#define BG_GRADIENT_SCALE 0.45        // Gradient effect scale\n\n// Input settings\n#define IN_SOUND          0.25        // Sound probe coord (0.25 - Frequences, 0.75 - Raw wave)\n#define IN_TRIANGLE       0.25        // Sound probe for triangle shake (0.25 - Frequences, 0.75 - Raw wave)\n#define IN_TRIANGLE_HOR   0.0         // Sound x probe for triangle shake (For x)\n#define IN_TRIANGLE_SCALE 0.8         // Scale of triangle shake\n\n// Hexagonal prefences\n#define HEX_0_SPEED  1.0 // Speed of Hexagon 0 (Inner)\n#define HEX_1_SPEED -0.5 // Speed of Hexagon 1\n#define HEX_2_SPEED  0.6 // ...\n#define HEX_3_SPEED -0.7 // ...\n#define HEX_4_SPEED  0.8 // ...\n#define HEX_5_SPEED -0.9 // ...\n#define HEX_6_SPEED  1.0 // ...\n#define HEX_7_SPEED -1.1 // ...\n\n// Left/Right alignment\nfloat signv(vec2 p1, vec2 p2, vec2 p3) {\n    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nbool inTriangle(vec2 p, vec2 pos, float d) {\n    float side2 = d * 0.866025405;\n    vec2 v1 = vec2(pos.x,         pos.y + d);\n    vec2 v2 = vec2(pos.x - side2, pos.y - d / 2.0);\n    vec2 v3 = vec2(pos.x + side2, pos.y - d / 2.0);\n    \n    bool b1, b2, b3;\n    b1 = signv(p, v1, v2) < 0.0;\n    b2 = signv(p, v2, v3) < 0.0;\n    b3 = signv(p, v3, v1) < 0.0;\n    \n    return (b1 == b2) && (b2 == b3);\n}\n\nbool inHexagon(vec2 p, vec2 pos, float d, float a) {\n    float x_ = pos.x - p.x;\n    float y_ = pos.y - p.y;\n    float s_ = sin(a);\n    float c_ = cos(a);\n    float dx = abs(x_ * c_ - y_ * s_)/d;\n    float dy = abs(x_ * s_ + y_ * c_)/d;\n    float ar = 0.25 * sqrt(3.0);\n    return (dy <= ar) && (ar * dx + 0.25 * dy <= 0.5 * ar);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = iResolution.xy * 0.5;\n    float centerLength = length(center);\n    float maxResolution = min(iResolution.x, iResolution.y);\n    \n    // Background: 8 hex + triangle + vingette\n    fragColor = vec4(BG_GRADIENT_START - length(fragCoord.xy - center) / centerLength * BG_GRADIENT_SCALE);\n    \n    // 1/3 of maximal dimension of iResolution\n    float d = 0.333 * maxResolution;\n    if(inTriangle(fragCoord, center, d * (0.9 + IN_TRIANGLE_SCALE * texture(iChannel0, vec2(IN_TRIANGLE_HOR, IN_TRIANGLE)).x))) \n        fragColor += BG_TRIANGLE;\n    if(inHexagon(fragCoord, center, d, iTime * HEX_0_SPEED))\n        fragColor += BG_COL;\n    else if(inHexagon(fragCoord, center, d * 2.0, iTime * HEX_1_SPEED))\n        fragColor += BG_NCOL;\n    else if(inHexagon(fragCoord, center, d * 3.0, iTime  * HEX_2_SPEED))\n        fragColor += BG_COL;\n    else if(inHexagon(fragCoord, center, d * 4.0, iTime * HEX_3_SPEED))\n        fragColor += BG_NCOL;\n    else if(inHexagon(fragCoord, center, d * 5.0, iTime  * HEX_4_SPEED))\n        fragColor += BG_COL;\n    else if(inHexagon(fragCoord, center, d * 6.0, iTime * HEX_5_SPEED))\n        fragColor += BG_NCOL;\n    else if(inHexagon(fragCoord, center, d * 7.0, iTime  * HEX_6_SPEED))\n        fragColor += BG_COL;\n    else if(inHexagon(fragCoord, center, d * 8.0, iTime * HEX_7_SPEED))\n        fragColor += BG_NCOL;\n    \n    // Locate bars\n    int ifragX = int(fragCoord.x) - BAR_WIDTH / 2;\n\tint ifragXmod = (ifragX + (BAR_PERIOD + BAR_WIDTH)) % (BAR_PERIOD + BAR_WIDTH);\n    \n    float barXfrag = float(ifragX - ifragXmod);\n    float value = texture(iChannel0, vec2(barXfrag / iResolution.x, IN_SOUND)).x;\n    float res2y = iResolution.y * 0.5;\n        // ifragXmod < BAR_WIDTH && \n    if (ifragXmod < BAR_WIDTH && abs(res2y - fragCoord.y) / res2y < value * BAR_HEIGHT)\n        fragColor += BAR_COLOR;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 24630,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/itzmusicfree/rarkid-moonlapse"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}