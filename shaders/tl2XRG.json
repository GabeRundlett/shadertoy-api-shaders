{
    "Shader": {
        "info": {
            "date": "1566339491",
            "description": "Based on [url=https://www.shadertoy.com/view/4tlGD2]my old kaleidoscope shader[/url]. I feel like when you see these patterns animating it's harder to appreciate the symmetry and intricacy - so what if I printed each one out onto a piece of fabric?\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tl2XRG",
            "likes": 31,
            "name": "textile patterns",
            "published": 3,
            "tags": [
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 1018
        },
        "renderpass": [
            {
                "code": "float seed = 0.; // initial seed, set to 0 to get a seed based on the current time & date\n\nconst float tau = 6.2831853;\n\nvec3 GeneratePattern( float seed, vec2 uv, vec2 duvdx, vec2 duvdy )\n{\n    float r = 1.0;\n    float a = seed*.1;\n    float c = cos(a)*r;\n    float s = sin(a)*r;\n    float q = fract((seed*.2/tau)/3.)*3.;\n    for ( int i=0; i<30; i++ )\n    {\n    \t//uv = abs(uv);\n        \n        // higher period symmetry\n        float t = atan(uv.x,uv.y);\n\t\tt *= q;\n        t = abs(fract(t*.5+.5)*2.0-1.0);\n        t /= q;\n        //q = q+.001;\n        uv = length(uv)*vec2(sin(t),cos(t));\n        \n        uv -= .7;\n        uv = uv*c + s*uv.yx*vec2(1,-1);\n    }\n\n\t// pixellate to make it look like tiles\n//    uv = floor(uv*27.)/27.;\n//    vec3 tap = textureLod( iChannel0, uv*vec2(1,-1)+.5, 0.0 ).rgb;\n    \n    vec3 tap = textureGrad( iChannel0, uv*vec2(1,-1)+.5, duvdx, duvdy ).rgb;\n\n    // quantize the colour to get polygonal shapes\n//    tap = floor(tap*6.999)/6.;\n    \n    vec3 col = .5+.5*sin(seed+vec3(13,17,23)*tap);\n    \n    // quantize the colour to get polygonal shapes\n    float shades = 4.;\n    col = floor(col*(shades+.999))/shades;\n    \n    return col;\n}\n\n    \nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    if ( seed == 0. )\n    {\n        // randomize based on timestamp\n        uvec4 date = uvec4(ivec4(floor(iDate)));\n        date.w /= 3600u; // randomize once per hour\n        // can't do a dot product!?\n        date *= uvec4(372*24,31*24,24,1);\n        seed = float( (date.x+date.y+date.z+date.w) * 2654435770u )/exp2(32.);\n        seed = -50.*seed;\n    }\n    \n    vec3 ray = vec3( (fragCoord-iResolution.xy*.5)/iResolution.y, 1. );\n    ray = normalize(ray);\n    \n    vec3 camK = normalize(vec3(3.*sin(iTime*.1),3.*cos(iTime*.0618),5));\n    vec3 camI = normalize(cross(vec3(0,1,0),camK));\n    vec3 camJ = cross(camK,camI);\n    ray = ray.x*camI + ray.y*camJ + ray.z*camK;\n    \n    float t = 5./ray.z;\n    \n    vec2 uv = ray.xy*t;\n    \n    uv /= 3.;\n    uv += vec2(.2,.1)*iTime;\n    float _seed = seed + floor(uv.x) + 5.*floor(uv.y); // floor(iTime*.3+10.0);\n    \n    float size = 5.;\n    vec2 wrapuv = (fract(uv)-.5)*size;\n    uv *= size;\n    \n    fragColour.rgb = GeneratePattern( _seed, wrapuv, dFdx(uv), dFdy(uv) );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}