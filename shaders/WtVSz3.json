{
    "Shader": {
        "info": {
            "date": "1583260803",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "WtVSz3",
            "likes": 11,
            "name": "Day 75",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 20.;\n    float scale = 0.00 + pow(dot(uvn,uvn),1.)*0.04;\n    float chromAb = dot(uvn,uvn)*7.;\n    vec2 offs = vec2(0) + texture(iChannel1, uv + iTime*4.).xz*0.0;\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.99;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.x += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.y += texture(iChannel0, target).y;\n    \tradial.z += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    \n    \n    \n    radial /= steps;\n    \n    fragColor = texture(iChannel0, uv)*0.6 + radial*0.4; \n    \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.);\n    fragColor *= 1.4;\n    //fragColor = pow(fragColor, vec4(0.45));\n\t\n    float duvuv = dot(uvn,uvn);\n    \n    fragColor = pow(fragColor, vec4(0.59 + duvuv));\n    \n    fragColor *= 1. - duvuv;\n    \n    //fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.5);\n    //fragColor *= 1. - dot(uvn,uvn)*2.;\n    \n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\nvec3 glowB = vec3(0);\nfloat side = 1.;\n#define dmin(a,b) a.x < b.x ? a : b\n    \n#define pmod(p, x) mod(p,x) - 0.5*x\nvec3 attenuation = vec3(1);\n\nfloat chebyshevl(vec3 p){\n\treturn max(p.x, max(p.y, p.z));\n}\n\nfloat manhattanl(vec3 p){\n\treturn abs(p.x) + abs(p.y) + abs(p.z);\n}\n\n\nfloat lpnorm(vec3 p, float s){\n    return pow(\n        (\n         pow(abs(p.x),s)+\n         pow(abs(p.y),s)+\n         pow(abs(p.z),s)), \n        1.0/s);\n}\n\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define pal(a,b,c,d,e) ((a) + (b)*sin(tau*((c)*(d) + (e))))\n// from hg sdf\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*pi/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n    \n    \n    for(int i = 0; i < 0; i++){\n    \tp = abs(p);\n        p.xy *= rot(0.3);\n        p.yz *= rot(0.5*pi);\n        p.y += 0.2;\n    }\n    \n    const float modD = 10.;\n    \n    vec3 q = p;\n    \n    float a = pow(abs(sin(q.z*0.01+ q.x*0.001 + iTime*0.6)), 2000.)*2.*smoothstep(0.,1.,length(q.xy)*0.14)*1.;\n    p.xy -= normalize(p.xy)*a*0.2;\n    \n    p.xy *= rot(p.z*0.014);\n    //p.z = pmod(p.z,modD);\n    \n    float reps = 3.;\n    \n    vec3 pC = vec3(atan(p.y,p.x)/tau,length(p.xy),p.z);\n    \n    //float id = floor(pC.x/reps);\n    \n    float i = pModPolar(p.xy, 3.);\n    \n    #define WID 0.6\n    \n    \n    #define modDB vec3(4.,4.,10.)\n    \n    float id = floor(p.z/modDB.z);\n    \n    \n    p.x -= WID ;\n    p = pmod(p, modDB);\n    \n    \n    \n    //float dCubez = length(p) - 0.4;\n    \n    \n    p = abs(p);\n    float dCubez = min(\n    \tmax(p.y, p.z),\n        max(p.y, p.x)\n    );\n    \n    \n    dCubez = min(dCubez, max(p.x,p.z)) - 0.3 ;\n    \n    \n    \n    \n    d = dmin(d, vec2(dCubez,1.));\n    \n    vec3 j = p;\n    \n    j = abs(j);\n    j -= 0.8;\n    j.xy -= 0.2;\n    j.yz *= rot(0.1 + sin(iTime)*0.4);\n    //j.xy *= rot(3.5);\n    j = abs(j);\n    \n    dCubez = max(j.x, j.z) - 0.06;\n    \n    \n    \n    d = dmin(d, vec2(dCubez,3.));\n    \n    p -= 0.5;\n    d = dmin(d, vec2(max(p.x, max(p.z, p.y)),0.));\n    \n    p += 0.5;\n    p.xy *= rot(sin(iTime*0.4)*0.1 + 0.4);\n    p = pmod(p, 0.6);\n    \n    \n    \n    \n    dCubez = max(p.x,p.z);\n    dCubez = min(dCubez,max(p.y,p.x));\n    \n    //d = dmin(d, vec2(dCubez, 4.) );\n    \n    float b = pow(abs(sin(q.z*0.1+ q.x*0.1 + sin(q.x*0.04 + iTime*0.4) + sin(q.y*0.01 + iTime) + sin((q.x + q.z + q.y)*1.)*0.5 + iTime*0.5)), 7000.)*2.*smoothstep(0.,1.,length(q.xy)*0.04)*4.;\n    //float b = pow(abs(sin( sin(q.x*0.01 + iTime*0.4) +  sin(q.y*0.05 + iTime*0.8) +  sin(q.z*0.02 + iTime*0.8) + q.z*0.01   + iTime*0.2)), 7000.)*2.*smoothstep(0.,1.,length(q.xy)*0.14)*1.;\n    \n    \n    vec3 c = pal(0.8,0.8,vec3(0.5,0.2,0.2),0.1,0.3);\n    vec3 cb = pal(0.8,0.8,vec3(0.2,0.6,0.9),1.1,2.9);\n    c = max(c, 0.);\n    glowB += exp(-max(dCubez, 0.)*500.)*a*9.*c;\n    \n    glowB += exp(-max(dCubez, 0.)*500.)*b*9.*cb;\n    \n    \n    //d.x *= 0.3;\n    d.x *= 0.9;\n    return d;\n}\n\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d = vec2(10e6);\n\n    hit = false; t = 0.; p = ro;\n    for(int i = 0; i < 250; i++){\n    \td = map(p);\n        d.x *= side;\n        glow += exp(-max(d.x, 0.)*200.);\n        \n        if(d.x < 0.001 ){\n        \thit = true;\n            break;\n        }\n        if (t > 70.)\n            break;\n        \n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    return d;\n}\n    \nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.001,0);\n    return normalize(map(p).x - vec3(\n    \tmap(p-t.xyy).x,\n    \tmap(p-t.yxy).x,\n    \tmap(p-t.yyx).x\n    ));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 1. + dot(uv,uv)*0.8;\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0);\n    \n    ro.z += iTime*6. - sin(iTime)*3.;\n    \n    ro.x += sin(iTime*0.4)*0.1;\n    ro.y += cos(iTime*0.2)*0.1;\n    \n    vec3 rd = normalize(vec3(uv,1.5 + sin(iTime)*0.0));\n    \n    rd.xz *= rot(0.3*iMouse.x/iResolution.x - 0.15);\n    rd.xz *= rot(sin(iTime*0.4)*0.2);\n    rd.xy *= rot(sin(iTime*0.15)*1.5);\n    rd.yz *= rot(sin(iTime*0.15)*0.1);\n    \n    //ro.xy += texture(iChannel0,2.*(uv + iTime)*256.).xy*0.01;\n    ro -= rd*texture(iChannel0,2.*(uv + iTime)*256.).x*1.4; // reduce banding\n    \n    #define fogD 0.007\n    \n    #define fogC vec3(1.5,1.5,1.6)\n    \n    vec3 p; float t; bool hit; bool hitAtLeastOnce = false;\n    float maxT;\n    float firstT;\n    vec2 d;\n    \n    for(int i =0; i < 3 + min(iFrame,0); i++){\n    \td = march(ro, rd, p , t, hit);\n        maxT = max(maxT, t);\n        if(i == 0)\n            firstT = t;\n        if(!hit)\n            break;\n        if(hit)\n            hitAtLeastOnce = true;\n        \n        \n        vec3 n = getNormal(p)*side;\n        \n        float fres = pow(1. - max(dot(n ,-rd),0.), 5.);\n        //rd = reflect(rd, n);\n        \n        if(d.y == 1.){\n        \trd = refract(rd, n + sin(p.x*10. + p.y*10. + p.z*10.)*0.02, 0.9);\n        \t//attenuation *= vec3(0.7,0.9,0.9)*0.8;\n            //attenuation *= vec3(0.7,0.9,0.9)*(0.5 + fres*0.6);\n            attenuation *= vec3(0.5,0.7,0.8)*(0.8 + fres*0.6);\n            //attenuation *= vec3(0.8,0.96,0.78)*(0.5 + fres*0.4)*1.1;\n            side *= -1.;\n    \t\tcol += mix(\n                (glow + glowB*0.3 )*0.03*(0.9 ),\n            \tfogC,\n                smoothstep(0.,1.,t*fogD)\n            )*attenuation*0.4;\t\n        }\n        if(d.y == 0.){\n        \trd = reflect(rd, n);\n            //side *= -1.;\n        \tattenuation *= fres*0.2;\n    \t\t//col += attenuation;\t\n        }\n        if(d.y == 3.){\n        \trd = reflect(rd, n);\n            //side *= -1.;\n            \n            attenuation *= vec3(0.5,0.4,0.3)*1.8; \n                \n        \trd = reflect(rd, n);\n            //side *= -1.;\n    \t\tcol += mix(\n                (glow + glowB*0.1)*0.03*(0.9 ),\n            \tfogC,\n                smoothstep(0.,1.,t*fogD)\n            )*attenuation;\n            \n        \t//attenuation *= fres*0.9;\n    \t\t//col += attenuation;\t\n        }\n    \tro = p + rd*0.1;\n        //col += glow*0.01*attenuation*(1.);\t\n\t\t\n    }\n    \n    \n    col = mix(col, fogC, smoothstep(0.,1.,firstT*fogD));\n    \n    col = max(col, 0.);\n    col *= 1.;\n    \n    col = smoothstep(0.,1.,col)*1.;    col += glowB*0.001;\t\n    \n    //col += mix(col, vec3(0.6), smoothstep(0.,1.,firstT*0.004))*attenuation;\n    \n    col *= 1.;\n\n    \n    \n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}