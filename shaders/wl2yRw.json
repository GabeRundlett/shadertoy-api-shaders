{
    "Shader": {
        "info": {
            "date": "1594021007",
            "description": "One of my first shaders, experimenting with fBm noise.",
            "flags": 0,
            "hasliked": 0,
            "id": "wl2yRw",
            "likes": 1,
            "name": "Mystify",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "noise",
                "fbm",
                "trippy"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "#define NUM_OCTAVES 8\n#define pi 3.14159265\n\nfloat mod289(float x){return x-floor(x*(1.0/289.0))*289.0;}\nvec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}\nvec4 perm(vec4 x){return mod289(((x*34.0)+1.0)*x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p-a;\n    d = d*d*(3.0-2.0*d);\n    vec4 b = a.xxyy+vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy+b.zzww);\n    vec4 c = k2+a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c+1.0);\n    vec4 o1 = fract(k3*(1.0/41.0));\n    vec4 o2 = fract(k4*(1.0/41.0));\n    vec4 o3 = o2*d.z+o1*(1.0-d.z);\n    vec2 o4 = o3.yw*d.x+o3.xz*(1.0-d.x);\n    return o4.y*d.y+o4.x*(1.0-d.y);\n}\n\n// 2D fBm Noise, basically justs adds noise, scales it by 2, adds it back with 1/2 the effect, and repeat.\nfloat fbm(vec3 x){\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tfor (int i = 0; i < NUM_OCTAVES; i++){\n\t\tv += a*noise(x);\n\t\tx = x*2.0;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n// Draw Image\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Normalized Pixel Coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.x;\n\n    // Time Varying Pixel Color\n    vec3 col = vec3(fbm(vec3(uv*4.0*(sin(iTime*pi)+8.0), (iTime*0.25)+0.0)),\n                    fbm(vec3(uv*4.0*(sin(iTime*pi)+8.0), (iTime*0.25)+1.0)),\n                    fbm(vec3(uv*4.0*(sin(iTime*pi)+8.0), (iTime*0.25)+2.0)));\n\n    // Output to Screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}