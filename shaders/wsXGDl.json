{
    "Shader": {
        "info": {
            "date": "1547773064",
            "description": "Modulus space using ray marching!",
            "flags": 0,
            "hasliked": 0,
            "id": "wsXGDl",
            "likes": 1,
            "name": "Ray marching tutorial",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "CharmingSalmon",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST  100.\n#define SURF_DIST .1\n\nfloat GetDist(vec3 p) {\n\tvec4 s = vec4(2, 3, 3, 1);\n    \n    float sphereDist = length(mod(abs(p), 6.0) - s.xyz) - s.w;\n    float planeDist = p.y;\n    float d = sphereDist;\n    return d;\n}\nfloat RayMarch(vec3 ro, vec3 rd) {\n \tfloat dO = 0.; // how far have we marched\n    \n    for ( int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n \tfloat d = GetDist(p);\n    vec2 e = vec2(.0001, 0);\n    \n    //less than epsilon difference to get slope, a derivative approximation\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(-iMouse.x/120.),cos(-iMouse.y/60.)) * 2.;\n    vec3 l  = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    vec3 dif = vec3(clamp(dot(n, l), 0., 1.));\n    float d = RayMarch(p + n*SURF_DIST*2., l);\n    if(d <= length(lightPos-p)) dif *= vec3(1., 0.1, 0.1);\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(.5);\n    \n    //ray origin\n    vec3 ro = vec3(( -iMouse.x + 300.)/10., 1., (iMouse.y - 0.5)/10.);\n    vec3 rd = normalize(vec3(uv.x,uv.y - .8, 1.)); //ray direction\n\n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    vec3 dif = GetLight(p);\n   \n    col = dif;\n    \n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}