{
    "Shader": {
        "info": {
            "date": "1456255717",
            "description": "based on OMGClouds, for use as a skybox in interface",
            "flags": 1,
            "hasliked": 0,
            "id": "lsVGWG",
            "likes": 7,
            "name": "OMGSky",
            "published": 3,
            "tags": [
                "skybox",
                "vr"
            ],
            "usePreview": 1,
            "username": "jherico",
            "viewed": 1427
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2013\n// Turbulence and Day/Night cycle added by Michael Olson - OMGparticles/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Volumetric clouds. It performs level of detail (LOD) for faster rendering and antialiasing\n\nfloat fTurbulence = 0.35;\n\n\nvec3 vNightColor   = vec3(.15, 0.3, 0.6);\nvec3 vHorizonColor = vec3(0.6, 0.3, 0.4);\nvec3 vDayColor     = vec3(0.7,0.8,1);\n\nvec3 vSunColor     = vec3(1.0,0.8,0.6);\nvec3 vSunRimColor  = vec3(1.0,0.66,0.33);\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec4 rg = texture( iChannel0, (uv+ 0.5)/256.0, -100.0 );\n\treturn (-1.0+2.0*mix( rg.g, rg.r, f.z ));\n}\n\n\n\n\nvec4 render( in vec3 ro, in vec3 rd )\n{\n    float fSunSpeed = 0.35 * iTime;\n    vec3 sundir = normalize( vec3(cos(fSunSpeed),sin(fSunSpeed),0.0) );\n\tfloat sun = clamp( dot(sundir,rd), 0.0, 1.0 );\n    \n    float fSunHeight = sundir.y;\n    \n    // below this height will be full night color\n    float fNightHeight = -0.8;\n    // above this height will be full day color\n    float fDayHeight   = 0.3;\n    \n    float fHorizonLength = fDayHeight - fNightHeight;\n    float fInverseHL = 1.0 / fHorizonLength;\n    float fHalfHorizonLength = fHorizonLength / 2.0;\n    float fInverseHHL = 1.0 / fHalfHorizonLength;\n    float fMidPoint = fNightHeight + fHalfHorizonLength;\n    \n    float fNightContrib = clamp((fSunHeight - fMidPoint) * (-fInverseHHL), 0.0, 1.0);\n    float fHorizonContrib = -clamp(abs((fSunHeight - fMidPoint) * (-fInverseHHL)), 0.0, 1.0) + 1.0;\n    float fDayContrib = clamp((fSunHeight - fMidPoint) * ( fInverseHHL), 0.0, 1.0);\n    \n    // sky color\n    vec3 vSkyColor = vec3(0.0);\n    vSkyColor += mix(vec3(0.0),   vNightColor, fNightContrib);   // Night\n    vSkyColor += mix(vec3(0.0), vHorizonColor, fHorizonContrib); // Horizon\n    vSkyColor += mix(vec3(0.0),     vDayColor, fDayContrib);     // Day\n    \n\tvec3 col = vSkyColor;\n    \n    // atmosphere brighter near horizon\n    col -= clamp(rd.y, 0.0, 0.5);\n    \n    // draw sun\n\tcol += 0.4 * vSunRimColor * pow( sun,    4.0 );\n\tcol += 1.0 * vSunColor    * pow( sun, 2000.0 );\n    \n    // stars\n    float fStarSpeed = -fSunSpeed * 0.5;\n    \n    float fStarContrib = clamp((fSunHeight - fDayHeight) * (-fInverseHL), 0.0, 1.0);\n    \n    vec3 vStarDir = rd * mat3( vec3(cos(fStarSpeed), -sin(fStarSpeed), 0.0),\n                               vec3(sin(fStarSpeed),  cos(fStarSpeed), 0.0),\n                               vec3(0.0,             0.0,            1.0));\n                              \n    col += pow((texture(iChannel0, vStarDir.xy).r + texture(iChannel0, vStarDir.zy).r) * 0.5, 42.0) * fStarContrib * 40.0;\n    return vec4( col, 1.0 );\n}\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/ iResolution.y;\n\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    // camera\n    vec3 ro = 4.0*normalize(vec3(sin(6.28*m.x + 1.5), 0.4 * m.y, cos(6.28*m.x + 1.5)));\n\tvec3 ta = vec3(0.0, -1.0, 0.0);\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    // ray\n    vec3 rd = ca * normalize( vec3(p.xy,1.5));\n    \n    fragColor = render( ro, rd );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    fragColor = render( fragRayOri, fragRayDir );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}