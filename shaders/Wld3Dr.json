{
    "Shader": {
        "info": {
            "date": "1576062440",
            "description": "ffixing some things",
            "flags": 32,
            "hasliked": 0,
            "id": "Wld3Dr",
            "likes": 15,
            "name": "BALL LATTICE",
            "published": 3,
            "tags": [
                "lattice"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 559
        },
        "renderpass": [
            {
                "code": "const float zoom=100.;\n\nvec3 drawBall(vec2 pos,vec2 uv,vec2 pix){\n    #ifdef GRID_DEBUG\n    vec2 pixelpos=floor(pos/pix);\n    vec2 pixeluv=floor(uv/pix);\n    if(length(pos-uv)<BALL_RADIUS&&any(equal(pixelpos,pixeluv)))return vec3(0,1,0);\n    return vec3(0);\n    #else\n    vec2 l=(pos-uv)/BALL_RADIUS;\n    float d=min(dot(l,l),1.);\n    return vec3(sqrt(1.-d));\n    #endif\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord)/iResolution.y*zoom;\n    ivec2 pos=ivec2(floor(uv));\n    \n    fragColor=vec4(0);\n    vec2 pix=vec2(zoom/iResolution.y);\n    \n    for(int x=-1;x<=1;x++)\n    for(int y=-1;y<=1;y++){\n        vec2 data=tf(iChannel0,pos+ivec2(x,y)).xy;\n        if(!all(equal(data,vec2(0))))fragColor.rgb+=drawBall(data.xy,uv,pix);\n    }\n    vec2 k=mod(uv,1.);\n    \n    #ifdef GRID_DEBUG\n    if(any(lessThan(k,pix)))fragColor.rgb+=vec3(1,0,0);\n    #endif\n    if(dot(uv,floor_normal)-floor_dist<0.)fragColor=vec4(1,0,0,0);\n\tif(dot(uv,wall_normal)-wall_dist<0.)fragColor=vec4(1,0,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void swap(ivec2 pos,inout vec4 ball){\n\tfor(int x=-1;x<=1;x++)\n    for(int y=-1;y<=1;y++){\n        if(x==0&&y==0)continue;\n    \tvec4 neig=tf(iChannel0,pos+ivec2(x,y));\n    \tif(all(equal(neig.xy,vec2(0))))continue;\n    \n    \tivec2 neigcell=ivec2(neig.xy);\n    \tif(all(equal(neigcell,pos))){\n    \t    ball=neig;\n    \t\tbreak;\n    \t}\n    }\n}\n\n\nvoid collide_planes(inout vec4 ball){\n\tfloat floor_planed=dot(ball.xy,floor_normal)-floor_dist-BALL_RADIUS;\n    float wall_planed=dot(ball.xy,wall_normal)-wall_dist-BALL_RADIUS;\n    \n    if(floor_planed<0.){\n        ball.xy-=floor_planed*floor_normal;\n        ball.zw-=dot(ball.zw,floor_normal)*floor_normal*(1.+PLANE_BOUNCYNESS);\n    }\n    if(wall_planed<0.){\n        ball.xy-=wall_planed*wall_normal;\n        ball.zw-=dot(ball.zw,wall_normal)*wall_normal*(1.+PLANE_BOUNCYNESS);\n    }\n}\nvoid physics(ivec2 pos,inout vec4 ball){\n    //GRAVITY\n    ball.zw+=g*dt;\n    \n    //HEAT\n    ball.zw+=(hash23(vec3(pos,iTime))*2.-1.)*TEMPERATURE;\n    \n    \n    for(int x=2;x>=-2;x--)\n    for(int y=2;y>=-2;y--){\n        if(x==0&&y==0)continue;\n        vec4 neig=tf(iChannel0,pos+ivec2(x,y));\n        if(all(equal(neig.xy,vec2(0))))continue;\n        \n        ivec2 neigcell=ivec2(neig.xy);\n        \n        if(length(ball.xy-neig.xy)<BALL_RADIUS*2.){\n            //EACH OTHER COLISION\n            vec2 dir=normalize(ball.xy-neig.xy);\n            ball.xy=neig.xy+dir*BALL_RADIUS*2.;\n            \n            #ifdef ELASTIC_COLISION\n            ball.zw-=dot(ball.zw-neig.zw,dir)*dir*BALL_BOUNCYNESS;\n            #else\n            ball.zw-=dot(ball.zw,dir)*dir*(1.+BALL_BOUNCYNESS);\n        \t#endif\n        }\n    }\n    \n    //INTEGRATE\n    vec2 movement=ball.zw*dt;\n    //speed limit to avoid \"desintegration\"\n    if(dot(movement,movement)>1.)movement=normalize(movement);\n    ball.zw=movement/dt;\n    ball.xy+=movement;\n    \n    //WALL AND FLOOR COLLISION\n    collide_planes(ball);\n}\n\nvoid mainImage( out vec4 o, in vec2 c){\n    ivec2 pos=ivec2(c);\n    vec4 ball=tf(iChannel0,pos);\n    \n    ivec2 ballcell=ivec2(ball.xy);\n    \n    if(!all(equal(ballcell,pos)))ball*=0.;\n    \n    if(iFrame!=0)if(all(equal(ball.xy,vec2(0)))){\n        swap(pos,ball);\n        o=ball;\n        return;\n    }\n    \n    physics(pos,ball);\n    \n    o=ball;\n    \n    if(iFrame==0){\n        o=vec4(0,0,0,0);\n        int grid=(int(c.x)&1)|(int(c.y)&1);\n        if(dot(c.xy,floor_normal)-floor_dist>BALL_RADIUS)\n        \tif(dot(c.xy,wall_normal)-wall_dist>BALL_RADIUS)\n       \t\t\tif(grid==0)o=vec4(c,0,0);\n    \t//if(all(equal(c,vec2(6.5,6.5))))o=vec4(6.5,6.5,2,0);\n        //if(all(equal(c,vec2(10.5,6.5))))o=vec4(10.5,6.5,0,0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define tf(a,b) texelFetch(a,b,0)\n//#define GRID_DEBUG\n//#define ELASTIC_COLISION\n//ELASTIC COLISION is experimental\n\nfloat BALL_RADIUS=0.5/sqrt(2.)+0.5;\n// MUST BE BETWEEN 1./sqrt(2.) and 1\n\nfloat dt=1./60.;\n\nvec2 g=vec2(0,-9.8);\n\n//FLOOR\nvec2 floor_normal=normalize(vec2(0,1));//plane normal\nfloat floor_dist=1.; //plane constant\n\n//WALL\nvec2 wall_normal=normalize(vec2(1,0));//plane normal\nfloat wall_dist=1.; //plane constant\n\nfloat BALL_BOUNCYNESS=0.;\t//diferent for elastic and other colision\n\t\t\t\t\t\t\t//between 0 and 1\nfloat PLANE_BOUNCYNESS=1.;\t//between 0 and 1\nfloat TEMPERATURE=0.03;\n\n\n\n\nvec2 hash23(vec3 p3){\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}