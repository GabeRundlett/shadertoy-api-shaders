{
    "Shader": {
        "info": {
            "date": "1624813070",
            "description": "Made some improvements to this shader. Amazing idea NuSan!",
            "flags": 32,
            "hasliked": 0,
            "id": "NtSGDc",
            "likes": 44,
            "name": "Refractive Accumulation",
            "published": 3,
            "tags": [
                "translucency",
                "laser",
                "live",
                "chromab"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 1203
        },
        "renderpass": [
            {
                "code": "// Coded live during livecode.demozoo.org Release Party\n// on https://www.twitch.tv/psenough\n// comments have been added after the live and code is a bit cleanner\n// original file is here: https://lezanu.fr/LiveCode/RefractiveIndex.glsl\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec3 col=texture(iChannel0, fragCoord.xy / iResolution.xy).xyz;\n  \n     \n  \n\tfragColor = vec4(tanh(6.0*col), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define time (iTime*0.1 + 5.0)\n\n// rotation function\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);  \n}\n\n// Box SDF\nfloat box(vec3 p, vec3 s) {\n  p=abs(p)-s;\n  return max(p.x, max(p.y,p.z));\n}\n\n// capsule SDF\nfloat caps(vec3 p, vec3 p1, vec3 p2, float s) {\n  vec3 pa=p-p1;\n  vec3 pb=p2-p1;\n  float prog=dot(pa,pb)/dot(pb,pb);\n  prog=clamp(prog, 0., 1.);\n  return length(p1+pb*prog-p)-s;\n}\n\n// to switch between the 2 scenes\nint scene = 0;\n\n// first SDF function with the refractive geometry\nfloat map(vec3 p) {\n  \n  // sphere in cube\n  vec3 p2=p;\n  float t=time*0.1;\n  p2.yz *= rot(t);\n  p2.yx *= rot(t*1.3);\n  float d4 = max(box(p2, vec3(3)),1.2-length(p));\n  \n  // KIFS with spheres and cubes\n  vec3 pb = p;\n  float d2=10000.;\n  for(float i=0.; i<3.; ++i) {\n    float t=time*0.03 + i;\n    p.yz *= rot(t+i);\n    p.yx *= rot(t*1.3);\n    d2 = min(d2, length(p) - 0.47);\n    p=abs(p);\n    p-=0.9;\n  }\n  \n  \n  float d = box(p, vec3(0.4,0.4,0.4));\n  \n  d=min(d,d2);\n  //d=d2;\n    \n  if(scene==0) d=d4;\n  //d=d4;\n  \n  return d;\n}\n\n// we will have a maximum of 10 bounces of the laser\n#define pcount 10\nvec3 points[pcount];\nint pid=1;\n\nfloat atm=0.;\n// second SDF function with both refractive geometry and the laser geometry\nfloat map2(vec3 p) {\n  \n  // get refractive geometry\n  float d = map(p);\n  \n  // loop over laser's collisions, insert it into the SDF and accumulate laser's light\n  float d2=10000.;\n  for(int i=0; i<pid-1; ++i) {\n  \n    // one capsule per laser part\n    float d3 = caps(p, points[i], points[i+1], 0.01);\n    \n    // I use the smoothstep to have more contrast between lit and unlit part of the geometry\n    atm += 0.013/(0.05+abs(d3)) * smoothstep(4.,0.3,d3);\n    \n    d2=min(d2,d3);\n  }\n  \n  \n  return min(abs(d),d2);\n}\n\nfloat rnd(vec2 uv) {\n  return fract(dot(sin(uv*452.714+uv.yx*547.524),vec2(352.887)));  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n  \n  // change scene every 10s\n  scene = int(mod(floor(time/10.),2.));\n  \n  // first raymarching to get the laser collisions\n  vec3 s2=vec3(10,0,0);\n  vec3 r2=normalize(vec3(-1,sin(float(time))*0.1,0));\n  \n  // get a random refractive index different per pixel\n  float ior = (rnd(uv+fract(iTime*.1))-0.5);\n  //ior = (fract(gl_FragCoord.y/3.)-.5);\n  float id=ior*2.;\n  // compute index of refraction associated color \n  vec3 diff=1.3-vec3(1.+id,0.45+abs(id),1.-id);\n      \n  vec3 p2=s2;\n  points[0]=p2;\n  pid=1;\n  float side=1.;\n  for(int i=0; i<60; ++i) {\n    // we use only refractive geometry SDF\n    float d=abs(map(p2));\n    if(d<0.001) {\n      // when laser collide with something, store the collision point into the list\n      points[pid] = p2;\n      pid+=1;\n      if(pid>=pcount-1) break;\n      \n      // and we compute the refracted direction\n      vec2 off=vec2(0.01,0);\n      vec3 n2=side*normalize(d-vec3(map(p2-off.xyy), map(p2-off.yxy), map(p2-off.yyx)));\n      //r2=reflect(r2,n2);\n      vec3 r3=refract(r2,n2,1.-side*(0.3 + 0.1*ior));\n      if(dot(r3,r3)<0.5) r3=reflect(r2,n2);\n      r2=r3;\n      side=-side;\n      d=0.1;\n    }\n    if(d>100.0) break;\n    p2+=r2*d;\n  }\n  points[pid]=p2+r2*1000.;\n  ++pid;\n  \n  // second raymarching, what we will see on screen\n  vec3 s=vec3(0,0,-10);\n  vec3 r=normalize(vec3(uv, 1));\n  \n  // dithering noise to eliminate some banding\n  float mumu = mix(rnd(-uv+fract(float(iFrame)*.1)),1.,0.9);\n  vec3 p=s;\n  float side2=1.;\n  for(int i=0; i<90; ++i) {\n    float d=abs(map2(p));\n    if(d<0.001) {\n      // collision, compute refracted direction\n      // we use same per-pixel color and index of refraction than laser's raymarch\n      // it's not 100% correct but hey, it looks good\n      vec2 off=vec2(0.01,0);\n      vec3 n=side2*normalize(d-vec3(map(p-off.xyy), map(p-off.yxy), map(p-off.yyx)));\n      vec3 r3=refract(r,n,1.-side2*(0.3 + 0.1*ior));\n      if(dot(r3,r3)<0.5) r3=reflect(r,n);\n      r=r3;\n      \n      side2=-side2;\n      d=0.1;\n      //break;\n    }\n    if(d>100.0) break;\n    p+=r*d*mumu;\n  }\n    \n  vec3 col=vec3(0);\n  col += diff*atm;\n  \n  /*\n  // original shader was doing gamma here but in shadertoy we can do it in post-effect and it's better\n  col=smoothstep(0.01,0.9,col);\n  col=pow(col, vec3(0.4545));\n  */\n  \n  // use previous frame to have a feedback effect and try to reduce the noise a bit\n  vec4 prev=texture(iChannel0, fragCoord.xy / iResolution.xy);\n  prev.w*=0.98;\n  // you can try putting 0.95 instead for lot less noise but also more blurry image\n  vec4 col1 = vec4(prev.xyz*prev.w, prev.w) + vec4(col,1.0);\n  fragColor = vec4(col1.xyz/col1.w, col1.w);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}