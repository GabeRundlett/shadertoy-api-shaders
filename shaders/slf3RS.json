{
    "Shader": {
        "info": {
            "date": "1622294429",
            "description": "saw this concrete wall pattern in a book about soviet metro stations, started out trying to replicate it ended up with this.",
            "flags": 0,
            "hasliked": 0,
            "id": "slf3RS",
            "likes": 15,
            "name": "triangle thing",
            "published": 3,
            "tags": [
                "grid",
                "triangle"
            ],
            "usePreview": 0,
            "username": "laney",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "vec4 m;\n\nconst float h = 0.9;\nconst mat2 skew = mat2( 1.0, 0.5/h, 0.0, 1.0/h) ;\nconst mat2 unskew = mat2( 1.0, -0.5, 0.0, h);\n\nvec4 tri_grid2(vec2 uv, const float peakY , const float peakZ, float seam_comp) {\n\n  uv *= skew;\n\n  // repeat\n  uv = fract(uv);\n  vec2 seamv = min(abs(uv),abs(uv-1.0));\n  float seam = min(seamv.x,seamv.y);\n  \n  // up or down triangle\n  float d = uv.x-uv.y; \n  seam = min(abs(d),seam);\n  d = sign(d);\n\n  // local coordinates\n  uv *= unskew;\n  uv.y*=d;\n  uv+= d>0.0 ? vec2(-0.5,.0) : vec2(0.0,h);\n  \n  // faces\n  vec2 vs1 = normalize(vec2(1.0,peakY));\n  vec2 vs2 = normalize(vec2(-1.0,peakY));\n\n  float s1 = dot(uv-vec2(-0.5,0.0),vec2(vs1.y,-vs1.x));\n  float s2 = dot(uv-vec2(.5,0.0),vec2(vs2.y,-vs2.x));\n\n  vec4 normal;\n  if(s1>0.0 && s2<0.0) {\n    normal=vec4(normalize(cross(vec3(vs1,peakZ),vec3(vs2,peakZ))),1.0);\n    seam = min(s1,seam);\n    seam = min(-s2,seam);\n  } else if(uv.x < 0.0) {\n    normal=vec4(normalize(cross(vec3(vec2(0.0,-1.0),peakZ),vec3(vs1,peakZ))),0.0);\n    seam = min(-s1,seam);\n    seam = min(-uv.x,seam);\n  } else {\n    normal=vec4(normalize(cross(vec3(vs2,peakZ),vec3(vec2(0.0,-1.0),peakZ))),0.0);\n    seam = min(uv.x,seam);\n    seam = min(s2,seam);\n  }\n\n  normal.y*=d;\n  return vec4(mix(vec3(0.0,0.0,0.3),normal.xyz,smoothstep(0.0,seam_comp,seam)),normal.w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 *  iResolution.xy) / iResolution.y;\n    m = iMouse / iResolution.xyxy;\n \n    float w = 4.0*pow(sin(\n      (1.0+length(uv.x*cos(iTime*0.5)*3.0+uv.y*sin(iTime*0.7)*2.0))\n      -0.2*iTime),8.0);\n\n    vec2 uvs = uv*skew;\n    vec2 grid = (uvs.x-uvs.y) > 0.0 ? vec2(8.0,0.01) : vec2(24.0,0.03);\n\n    vec4 normal = tri_grid2(uv*grid.x, w, 0.6*sin(0.5-length(uv*2.0)+iTime*0.2), grid.y);\n\n    vec3 lightDir = normalize(vec3(sin(iTime*0.5)*50.0, cos(iTime*0.7)*30.0, 100.0));\n\n    vec3 c = normal.w >0.0 ? vec3(1,0.24,0.2) : vec3(1.0);\n    fragColor = vec4(vec3(dot(normal.xyz,lightDir))* c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}