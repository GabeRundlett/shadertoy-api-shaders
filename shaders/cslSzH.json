{
    "Shader": {
        "info": {
            "date": "1668509374",
            "description": "Playing around with [url]https://www.shadertoy.com/view/dsXSzH[/url] by @hzh98",
            "flags": 0,
            "hasliked": 0,
            "id": "cslSzH",
            "likes": 14,
            "name": "3D Perlin Noise Contours",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "contours"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "// Just playing around with https://www.shadertoy.com/view/dsXSzH by @hzh9\nfloat linewidth = 1.0; // Line width in pixels\n\n// Code by @hzh98\n#define HASH_LUT_SIZE 256\n#define inc(x) (x+1)%HASH_LUT_SIZE\n\n// Hash lookup table as defined by Ken Perlin.\n// This is a randomly arranged array of all numbers from 0-255 inclusive.\nconst int p[2*HASH_LUT_SIZE] = int[2*HASH_LUT_SIZE](151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180); \n\n#define clamp(x,y,z) (min(max(x,y),z)) // As per spec\n//#define clamp(x,y,z) (max(min(x,z),y)) // Consistent with Nvidia\n\nfloat FadeSmooth(float x) {\n    float t = clamp(0.0, 1.0, x); // Wrong order of params!\n    float t_2 = t * t;\n    float res = t_2 * t * (6.0*t_2 - 15.0*t + 10.0);\n    return res;\n}\n#if defined clamp\n#undef clamp\n#endif\n\n// pick a random vector\nfloat Grad(int hash, float x, float y, float z) {\n    int h = hash & 15;                                    \n    float u = h < 8 /* 0b1000 */ ? x : y;                \n    \n    float v;                                             \n    \n    if(h < 4 /* 0b0100 */)                               \n        v = y;\n    else if(h == 12 /* 0b1100 */ || h == 14 /* 0b1110*/) \n        v = x;\n    else                                                 \n        v = z;\n    \n    return ((h&1) == 0 ? u : -u)+((h&2) == 0 ? v : -v); \n}\n\nfloat PerliNoise3D(float x, float y, float z) {\n    int xi = int(floor(x)) & 255;                           \n    int yi = int(floor(y)) & 255;                              \n    int zi = int(floor(z)) & 255;                           \n    float xf = fract(x);\n    float yf = fract(y);\n    float zf = fract(z);\n    \n    float u = FadeSmooth(xf);\n    float v = FadeSmooth(yf);\n    float w = FadeSmooth(zf);\n    \n    int aaa, aba, aab, abb, baa, bba, bab, bbb;\n    aaa = p[p[p[    xi ]+    yi ]+    zi ];\n    aba = p[p[p[    xi ]+inc(yi)]+    zi ];\n    aab = p[p[p[    xi ]+    yi ]+inc(zi)];\n    abb = p[p[p[    xi ]+inc(yi)]+inc(zi)];\n    baa = p[p[p[inc(xi)]+    yi ]+    zi ];\n    bba = p[p[p[inc(xi)]+inc(yi)]+    zi ];\n    bab = p[p[p[inc(xi)]+    yi ]+inc(zi)];\n    bbb = p[p[p[inc(xi)]+inc(yi)]+inc(zi)];\n   \n    float x1, x2, y1, y2;\n    x1 = mix(Grad(aaa, xf, yf, zf), Grad(baa, xf-1.0, yf, zf), u);                                     \n    x2 = mix(Grad(aba, xf, yf-1.0, zf), Grad(bba, xf-1.0, yf-1.0, zf), u);\n    y1 = mix(x1, x2, v);\n\n    x1 = mix(Grad(aab, xf, yf, zf-1.0), Grad(bab, xf-1.0, yf, zf-1.0), u);\n    x2 = mix(Grad(abb, xf, yf-1.0, zf-1.0), Grad(bbb, xf-1.0, yf-1.0, zf-1.0), u);\n    y2 = mix (x1, x2, v);\n    \n    return (mix(y1, y2, w)+1.0)/2.0; \n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Mostly @mla code\n    vec3 aacol = vec3(0);\n    int N = 1; // set N=2 for MSAA, though it's not really needed here.\n    for (int i = 0; i < N*N; i++) {\n      vec2 uv = 5.0*(2.0*fragCoord + vec2(i/N,i%N) -iResolution.xy) / iResolution.y;\n      vec2 noise_uv = uv + 0.5*vec2(iTime,0.0);\n    \n      float res = PerliNoise3D(noise_uv.x,noise_uv.y, 0.1*iTime);\n      float px = length(vec2(dFdx(res),dFdy(res)));\n      if (iMouse.z > 0.0) px = 0.8*fwidth(length(res)); // fwidth not so nice here.\n      float ncontours = round(12.0/linewidth);\n      if (iResolution.x > 800.0) ncontours *= 2.0;\n      float res0 = round(ncontours*res)/ncontours;\n      vec3 col = h2rgb(res-1.0/6.0);     \n      col *= smoothstep(0.0,px,abs(res-res0)-0.5*(linewidth-1.0)*px);\n      aacol += col;\n    }\n    aacol /= float(N*N);\n    aacol = pow(aacol,vec3(0.4545));\n    fragColor = vec4(aacol,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}