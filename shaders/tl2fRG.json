{
    "Shader": {
        "info": {
            "date": "1599252931",
            "description": "Some minimalist/bauhaus stuff.\n\nbtw Im still making stuff outside of here, just not shaders, if anyone's wondering. d: ",
            "flags": 0,
            "hasliked": 0,
            "id": "tl2fRG",
            "likes": 10,
            "name": "Day 258",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 351
        },
        "renderpass": [
            {
                "code": "\nvec4 noise(float t){return texture(iChannel0,vec2(floor(t), floor(t))/256.);}\nvec4 valueNoise(vec2 t, float w){\n    vec2 fr = fract(t);\n\treturn \n        mix(\n            mix( \n                texture(iChannel0,vec2(floor(t.x), floor(t.y))/256.),\n                texture(iChannel0,vec2(floor(t.x), floor(t.y) + 1.)/256.),\n            \tsmoothstep(0.,1.,fr.y)\n            ),\n            mix( \n                texture(iChannel0,vec2(floor(t.x) + 1.,floor(t.y))/256.),\n                texture(iChannel0,vec2(floor(t.x) + 1.,floor(t.y) + 1.)/256.),\n            \tsmoothstep(0.,1.,fr.y)\n            ),\n            smoothstep(0.,1.,pow(fr.x, w)));\n}\nvec4 fbm(vec2 uv){\n\tvec4 n = vec4(0);\n    uv *= iResolution.xy/vec2(800.,450.);\n\tn += valueNoise(uv*60.,0.1);\n    n += valueNoise(uv*1700.,0.1)*0.5;\n    n += valueNoise(uv*10.,1.1)*0.1;\n    n -= valueNoise(uv*10. + 4.,0.1)*1.;\n    n -= valueNoise(uv*20.,0.5)*0.2;\n    \n    \n    //n = valueNoise(uv*3.,19.9)*1.;\n    n = max(n, 0.);\n    return n;\n}\n\n\n// ----------\n\nfloat sdTri( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\nfloat sdBox( in vec2 p, in vec2 q )\n{\n    p = abs(p) - q;\n    return max(p.y,p.x);\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\n#define xor(a,b,c) min(max(a,-b), max(-a + c,b))\n#define pi acos(-1.)\n#define rmod(a,uv,md,amt) max(a, -abs(mod(atan((uv).y,(uv).x),md*pi) - md*pi*0.5) + md*pi*amt)\n\n#define rot(j) mat2(cos(j),-sin(j),sin(j),cos(j))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 0.5;\n    uv *= rot(0.25*pi);\n\n    vec3 col = vec3(0);\n\n    float d = 10e6;\n    \n    vec2 A = vec2(0.04,0.1);\n    vec2 B = vec2(0.3,0.3);\n    \n    vec2 offs = vec2(0.04,0.0);\n    \n    //d = min(d,abs(length(uv - vec2(-0.1,0.1)) - 0.02) - 0.0001);\n    d = min(d,sdLine( uv, A*10. , -B*1.5) - 0.0);\n    \n    \n    offs = vec2(-0.47,0.0);\n    \n    d = min(d,sdLine( uv, A*10. - offs , -B*3. - offs) - 0.0);\n    \n    \n    //d = min(d,sdLine( uv, -vec2(A.x,A.y + 0.005)*10. , vec2(B.x + 0.1,B.y)*2.) - 0.023);\n    \n    \n    offs -= offs;\n    //d = min(d,sdLine( uv, A -offs, B -offs) - 0.001);\n    \n    A *= rot(0.75*pi);\n    B *= rot(0.75*pi);\n    offs -= vec2(0.1,0.04);\n    //d = min(d,sdLine( uv, A -offs, B -offs) - 0.001);\n    \n    A *= rot(0.5*pi);\n    B *= rot(0.5*pi);\n    offs -= vec2(0.,-.08);\n    //d = min(d,sdLine( uv, A -offs, B -offs) - 0.001);\n    \n    offs = vec2(0.03,-0.01);\n    //d = min(d,sdLine( uv, A -offs, B -offs) - 0.001);\n    \n    \n    \n    vec2 p = vec2(-0.1,0.);\n    //d = xor(d, rmod(abs(length(uv-p) - 0.1) - 0.001,uv-p,1./4.,0.2) ,dFdx(uv.x)*2. );\n    \n    \n    \n    //d = min(d,abs(length(uv - 0.3) - 0.1) - 0.04);\n         \n    d = xor(d, (length(uv-vec2(0.1,0.)) - 0.15), 0.004);\n    \n    d = xor(d, (length(uv-vec2(-0.2,-0.)) - 0.2), 0.01);\n    \n    \n    d = xor(d, -sdBox( uv*rot(0.25*pi), vec2(0.2,0.2) ), 0.01 );\n    \n    \n    col = mix(col,vec3(1),smoothstep(dFdx(uv.x)*2.,0.,d + dFdx(uv.x)*0.));\n\n    \n\tvec4 f = smoothstep(0.,1.,fbm(uv*50.));\n\tvec4 g = smoothstep(0.,1.,fbm(uv*60. - 0.4));\n    \n    f.x = pow(f.x, 5.);\n    \n    float n = 0.;\n    n += f.x*.5;\n    n += pow(f.y,7.)*2.5;\n    n += pow(f.z,6.)*2.5;\n    n += pow(f.w,3.)*0.1;\n        \n    n += pow(g.x,6.)*3.;\n    n += pow(g.y,4.)*1.;\n    n += pow(g.z,4.)*1.;\n        \n    \n    n = min(n,0.5);\n    \n    \n    col = max(col,0.002);\n    \n    if(col.x > 0.1){\n        col -= n*1.7;\n        //col -= pow(g,5.)*2.5;\n        //col -= pow(g,2.)*.9;\n    }\n    else{\n        col += pow(n,2.)*0.1;\n    \t//col += f*4.;\n    \n    }    \n    \n    col *= vec3(1.06,0.98,0.9);\n\t\n    \n    col = pow(col,vec3(0.4545));\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}