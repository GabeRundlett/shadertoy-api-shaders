{
    "Shader": {
        "info": {
            "date": "1613412624",
            "description": "A simple PBR ray march shader",
            "flags": 0,
            "hasliked": 0,
            "id": "3l3BDj",
            "likes": 1,
            "name": "PBR Ray Marcher",
            "published": 3,
            "tags": [
                "raymarhcingpbr"
            ],
            "usePreview": 0,
            "username": "ArenaGrenade",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat sdSphere( vec3 p, vec3 c, float r ) {\n    return length(p - c) - r;\n}\n\nfloat sdPlane( vec3 p, float height ) {\n    return p.y - height;\n} \n\nfloat sdScene( vec3 p ) {\n    float sphere = sdSphere(p, vec3(0, 0, 6), 1.0);\n    float plane = sdPlane(p, -1.0); \n    return min(sphere, plane);\n}\n\nfloat castRay( vec3 ro, vec3 rd ) {\n    float d0 = 0.0;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + d0 * rd;\n        float dS = sdScene(p);\n        \n        d0 += dS;        \n        if ( dS <= SURF_DIST || d0 >= MAX_DIST ) break;\n    }\n    \n    return d0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, -1.0);\n    vec3 rd = vec3(uv, 1.0);\n    \n    float d = castRay(ro, rd);\n\n    vec3 col = vec3(d / 8.0);\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}