{
    "Shader": {
        "info": {
            "date": "1563537275",
            "description": "Just a simple 2D DCT visualization",
            "flags": 32,
            "hasliked": 0,
            "id": "ttfXR2",
            "likes": 3,
            "name": "DCT Visualization",
            "published": 3,
            "tags": [
                "dct",
                "jpeg"
            ],
            "usePreview": 0,
            "username": "boysx",
            "viewed": 752
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float pi = 3.1415927;\n\nfloat a(float x)\n{\n    if(x < .5)\n        return 1./sqrt(2.);\n    \n    return 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 blkpos = mod(fragCoord,float(BLOCK_SIZE))-.5;\n    vec3 sum;\n    \n    for(int y = 0; y < 8; y++)\n        for(int x = 0; x < 8; x++)\n            sum += texture(iChannel0,(fragCoord-blkpos+vec2(x,y))/iResolution.xy).rgb\n            \t* cos(pi*blkpos.x*(float(x)+0.5)/float(BLOCK_SIZE))\n            \t* cos(pi*blkpos.y*(float(y)+0.5)/float(BLOCK_SIZE));\n    \n#if ABS_VALUE == 0\n    fragColor = vec4(sum,1.0);\n#else\n    fragColor = vec4(abs(sum),1.0);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BLOCK_SIZE 8\n#define ABS_VALUE 1 // Set this to one to see negative values, thanks to @pyBlob for remainding me",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}