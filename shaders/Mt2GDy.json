{
    "Shader": {
        "info": {
            "date": "1432212828",
            "description": "split screen into subscreen",
            "flags": 0,
            "hasliked": 0,
            "id": "Mt2GDy",
            "likes": 4,
            "name": "Split screen",
            "published": 3,
            "tags": [
                "utility"
            ],
            "usePreview": 1,
            "username": "mart_p",
            "viewed": 1409
        },
        "renderpass": [
            {
                "code": "int\t\tcolumn\t\t\t= 1;\nint\t\trow\t\t\t\t= 1;\nfloat \tborderSize  \t= 1.0;\nint\t\tactualScreen\t= 0;\nint\t\tscreenActif\t\t= 0;\nvec4  \tborderColor\t\t= vec4(0.0);\nvec3\tsubResolution\t= vec3(0.0);\n\nvoid        display(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2    uv = fragCoord.xy / subResolution.xy;\n\n   \tif (actualScreen == screenActif)\n        fragColor = vec4(1.0);\n    else\n\t    fragColor = texture(iChannel0, -uv);\n}\n\nvoid    splitScreen(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2    newFragCoord = fragCoord;\n    vec3    newResolution = iResolution - borderSize;\n    vec2    subFragCoord = vec2( mod(newFragCoord.x, newResolution.x / float(column)),\n                                 mod(newFragCoord.y, newResolution.y / float(row))) - borderSize;\n    subResolution = vec3(newResolution.x / float(column),\n                         newResolution.y / float(row),\n                         newResolution.z) - borderSize;\n    int actualColumn = int(newFragCoord.x / (subResolution.x + borderSize) + 1.0);\n    int actualRow = int((newResolution.y - newFragCoord.y) / (subResolution.y + borderSize));\n    actualScreen = actualRow * column + actualColumn;\n\n    int tactualColumn = int(iMouse.x / subResolution.x + 1.0);\n    int tactualRow = int((iResolution.y - iMouse.y) / subResolution.y);\n    screenActif = tactualRow * column + tactualColumn;\n\n    if (subFragCoord.x > 0.0 && subFragCoord.x < subResolution.x\n        && subFragCoord.y > 0.0 && subFragCoord.y < subResolution.y) {\n        display(fragColor, subFragCoord);\n    } else {\n        fragColor = borderColor;\n    }\n}\n\nvoid    mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \t// DEMO\n    if (iTime < 5.0)\n        column = int(iTime) + 1;\n    else if (iTime < 10.0)\n        column = int(10.0 - iTime) + 1;\n    else if (iTime < 15.0) {\n        row = int(iTime - 10.0) + 1;\n    } else if (iTime < 20.0) {\n     \trow = int(20.0 - iTime) + 1;   \n    } else if (iTime < 25.0) {\n    \tcolumn = int(iTime - 20.0) + 1;\n        row = int(iTime - 20.0) + 1;\n    } else if (iTime < 30.0) {\n    \tcolumn = int(30.0 - iTime) + 1;\n        row = int(30.0 - iTime) + 1;\n    } else {\n     \tcolumn = 3;\n        row = 3;\n    }\n    // !DEMO\n     splitScreen(fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}