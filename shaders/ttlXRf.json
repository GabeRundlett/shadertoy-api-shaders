{
    "Shader": {
        "info": {
            "date": "1563810787",
            "description": "Shadertoy port of our windows 4k intro.\n1st @ Nordlicht 2019\nCode by Virgill & KK,\nmusic by Virgill\n\nhttps://www.pouet.net/prod.php?which=82169\n\nhttps://www.youtube.com/watch?v=jw-nC5bINFc",
            "flags": 96,
            "hasliked": 0,
            "id": "ttlXRf",
            "likes": 232,
            "name": "in my crawl space",
            "published": 3,
            "tags": [
                "4k",
                "demoscene",
                "volumetric",
                "pathtracing",
                "madtracing"
            ],
            "usePreview": 1,
            "username": "Virgill",
            "viewed": 12063
        },
        "renderpass": [
            {
                "code": "// \"in my crawl space\"\n// Shadertoy port of our windows 4k intro:\n\n// https://www.pouet.net/prod.php?which=82169\n\n// https://www.youtube.com/watch?v=jw-nC5bINFc\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = (fragCoord.xy/iResolution.xy);\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 19112,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/virgill/4klang-in-my-crawl-space"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 scatter =vec3(0.);\nfloat sp = 2.0833;\nvec3 lpos1=vec3(0); vec3 lpos2=vec3(0);\nvec3 lpos3=vec3(0, 1, 0);\n\nfloat time =0.;\nfloat kk=0.;\nvoid dmin(inout vec3 d, float x, float y, float z)\n{\n\tif( x < d.x ) d = vec3(x, y, z);\n}\n\n// method by iq/shane\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p);\n\tp-=ip;\n\tvec3 s=vec3(7, 157, 113);\n\tvec4 h=vec4(0, s.yz, s.y+s.z)+dot(ip, s);\n\tp=p*p*(3.-2.*p);\n\th=mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);\n\th.xy=mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\nfloat hash11(float p)\n{\n\tp = fract(p * .1031);\n\tp *= p + 19.19;\n\tp *= p + p;\n\treturn fract(p);\n}\n\n// method by fizzer\nvec3 hashHs(vec3 n, float seed)\n{\n\tfloat u = hash11(78.233+seed);\n\tfloat v = hash11(10.873+seed);\n\tfloat a = 6.2831853 * v;\n\tu = 2.0*u - 1.0;\n\treturn normalize(n+vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u));\n}\n\nvoid pR(inout vec2 p, float a)\n{\n\tp = cos(a)*p+sin(a)*vec2(p.y, -p.x);\n}\n\nfloat sdRoundBox(vec3 p, vec3 b, float r)\n{\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, 0.0)) - r;\n}\n\nfloat pattern(vec2 p)\n{\n\tp.x += 5.5;\n\tp.y *= 2.;\n\tp = floor(p);\n\tif( iTime>160./sp*kk&&iTime<192./sp ) p.y += floor(iTime*sp/2.)*17.;\n\tp = floor(p);\n\treturn (sin(p.x*p.y) > .8) ? 2. : .9;\n}\n\nfloat vines(vec3 p, float s, float t)\n{\n\tp.x=abs(p.x)+t*.1;\n\tpR(p.yz, p.x*1.); p=abs(p); p.yz -= .06*s;\n\tpR(p.yz, p.x*-3.); p=abs(p); p.yz -= .05*s;\n\tpR(p.yz, p.x*5.+t); p=abs(p); p.yz -= .04*(s*.5+.5);\n\treturn length(p.yz);\n}\n\nvec3 map(vec3 p, bool flag)\n{\n\tfloat wallnoise = (noise(83.*p)+noise(17.*p))*noise(7.*p);\n\tvec3 d = vec3(1, 0, 0);\n\n\tfloat sd1 = length(p+lpos1)-.4;\n\tfloat sd2 = length(p+lpos2)-.4;\n\tfloat waves = 0.;\n\tif( iTime > 48./sp) waves=0.03;\t\t\t\t\t\t\n\tdmin(d, 1.49+kk*2.5-abs(p.x+0.01*wallnoise), .99-0.5*wallnoise, 0.); \n\tif( kk>0. ) {\n\t\tdmin(d, 1.2+p.y, pattern(p.xz)-.6*wallnoise, 0.); \t\n\n\t\tdmin(d,\n\t\t\tmax(vines(p+vec3(0, 0, 2), .5+5./(1.+p.x*p.x*2.), iTime)-.02,\n\t\t\t\tmax(\n\t\t\t\t\tabs(p.x)-3.,\n\t\t\t\t\t3.5-(iTime-77.)*.25+max(iTime-192./sp, 0.)*2.+sin(p.y*20.)*sin(p.z*10.) - abs(p.x)\n\t\t\t\t)\n\t\t\t),.1, .2);\n\n\t\tvec3 q=p.yxz;\n\t\tq.z=fract(q.z/3.-.2)*3.-1.5;\n\t\tq.y=abs(q.y)-3.5;\n\t\tq.x -= 6.;\n\t\tdmin(d,vines(q, 1.3+20./(1.+q.x*q.x*.45), 0.)-.05,.1, .2);\n\t}\n\telse {\n\t\tdmin(d, .8-waves*sin(8.*p.z+time)*sin(6.*p.x+1.6*time+sin(2.*p.z))+p.y, .25, waves);\n\t\tdmin(d, 0.75-p.z, .8*sin(20.*p.x), 0.); \t\n\t\tdmin(d, 0.8-p.y, pattern(p.xz)-.6*wallnoise, 0.); \t\n\t}\n\tfloat amp = 0.;\n\tif( iTime > 96./sp &&fract(iTime*sp/4.)<=0.75+kk )  amp=abs(sin(20.*p.z));\n\tif( iTime>96./sp && flag && fract(iTime*sp/4.)<=0.75+kk )\n\t{\n\t\tscatter += max(-(sd1-1.2), 0.)*.06*vec3(0, 1, 1); \n\t\tscatter += max(-(sd2-1.2), 0.)*.06*vec3(2, 1, 0);\n\t}\n\n\tif( iTime>32./sp )\n\t{\n\t\tdmin(d,sd1,.07+amp,-1.);\n\t\tdmin(d,sd2,.07+amp,1.); \n\t}\n\n\tvec3 q = abs(p);\n\tif (iTime>24./sp&&fract(iTime*sp/8.)>=0.924-kk&&(iTime<60./sp||iTime>64./sp))\n\t{\n\t\tq.x -= 1.49+kk*2.4;\n\t\tq.y -= .4+.4*sin(time)*(1.-kk)+kk*.4;\n\t\tdmin(d, length(q.xy)-.015, 2., -.4);\n\t}\n\n\tif( iTime>64./sp)\n\t\tif( iTime<192./sp)\n\t\t{\n\t\t\tq=p+vec3(0, 0, 2.);\n\t\t\tpR(q.xy, 0.33*time);\n\t\t\tpR(q.xz, 0.4*time);\n\t\t\tfloat rb=sdRoundBox(q, vec3(.48), .08);\n\t\t\tdmin(d, rb, -.7+1.9*abs(sin(10.*q.x+10.*q.y)), 0.);\n\t\t}\n\t\telse\n\t\t\tdmin(d, length(p+vec3(0, 0, 2))-.5, .07+amp, 0.);\n\treturn d;\n}\n\nvec3 normal(vec3 p)\n{\n\tvec2 e = vec2(0,.0001);\n\treturn normalize(map(p, false).x-vec3(map(p - e.yxx, false).x, map(p - e.xyx, false).x, map(p - e.xxy, false).x));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\ttime=iTime*1.;\n\tkk = step(128., iTime*sp);\n\tif( fract(iTime*sp/8.)<.75 )\n\t{\n\t\ttime += fract(-iTime*sp)+17.*ceil(iTime*sp);\n\t\tkk = step(156., iTime*sp);\n\t}\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(0);\n\tif( uv.y>.11 && uv.y<.89 )\n\t{\n\t\tfloat t1 = 0., t2 = 0., t3=0., seed = 0.;\n\t\tvec3 ro1 = vec3(0, 0, -2.5-kk*(1.+max(159.-iTime*sp, 0.)+max(iTime*sp-192., 0.)*.1)),\n\t\t\t rd1 = normalize(vec3((2.*fragCoord.xy-iResolution.xy)/iResolution.x, 1));\n\n\t\tif( iTime>160./sp&&iTime<192./sp)\n\t\t{\n\t\t\tvec2 ca=sin(vec2(.35, .47)*(iTime+fract(-iTime/8.*sp)+42.*ceil(iTime/8.*sp)))*vec2(1., .3);\n\t\t\tpR(ro1.zy, ca.y); pR(rd1.zy, ca.y);\t\n\t\t\tpR(ro1.xz, ca.x); pR(rd1.xz, ca.x);\t\n\t\t}\n        \n\t\tro1.z-=2.5;\n\t\tlpos1 = vec3(1.*cos(time), .3*sin(time), 2.+sin(0.5*time));\t\n\t\tlpos2 = vec3(1.2*cos(0.3*time), .4*sin(0.4*time), 2.+sin(0.2*time));\n\t\tlpos3=vec3(sin(0.5*time), 1, 0);\n\t\tif( kk>0. )\n\t\t{\n\t\t\tlpos1 = vec3(3, 0, 2);\n\t\t\tlpos2 = vec3(-3, 0, 2);\n\t\t\tlpos3=vec3(0, -1, 0);\n\t\t}\n\t\tseed=uv.x*uv.y+uv.y+uv.x+fract(iTime);\n\t\tvec3 scol=vec3(0), m1, m2, m3, ro2, rd2, nor1, nor2, pos1, pos2, pos3;\n\n\t\tfor( int i = 0; i < 150; i++ )\n\t\t{\n\t\t\tseed=32.+seed*fract(seed);\n\t\t\tpos1 = ro1+rd1*t1;\n\t\t\tm1 = map(pos1, true);\n\t\t\tt1+=0.2*(m1.x);\n\n\t\t\tif( m1.x<0.001 )\n\t\t\t{\n\t\t\t\tscol+= vec3(1.+m1.z, 1., 1.-m1.z)*step(1., m1.y)*(150.-float(i))*(m1.z==.03 ? vec3(.6, .8, 1.) : vec3(1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos2=pos1+mix(lpos3, hashHs(lpos3, seed), 0.15)*t2; \n\t\t\tm2 = map(pos2, false);\n\t\t\tt2+=m2.x;\n\n\t\t\tif( m2.y>=1.&&m2.z==0. )\n\t\t\t\tscol+=(.5+5.*m1.x*noise(7.*pos1+mix(vec3(iTime), vec3(0, -iTime, 0), kk)));\t\n\t\t}\n\n\t\tnor1 = normal(pos1);\n\t\tm1.y=clamp(m1.y, 0., 1.);\n\t\tt2=0.;\n\t\tfor( int i = 1; i < 100; i++ )\n\t\t{\n\t\t\tseed=32.+seed*fract(seed);\n\t\t\trd2 = mix(reflect(rd1, nor1), hashHs(nor1, seed), m1.y);\n\t\t\tpos2 = pos1+ rd2*t2;\n\t\t\tm2 = map(pos2, false);\n\t\t\tt2+=0.2*m2.x;\n\t\t\tscol += vec3(1.+m2.z, 1., 1.-m2.z)*step(1., m2.y)*(m1.z==.03 ? vec3(.6, .8, 1.) : vec3(1));\n\n\t\t}\n\n\t\tscol=clamp(.009*scol+.06*scatter, 0., 1.) * clamp((236. / sp - iTime) / 8., 0., 1.);;\n\n\t\tfragColor =mix(scol.xyzz, texture(iChannel0, uv), pow(.0001, iTimeDelta));\n\t}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}