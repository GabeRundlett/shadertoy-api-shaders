{
    "Shader": {
        "info": {
            "date": "1689067982",
            "description": "CC0: Tuesday infinite zoom\n  Inspired by some twitter art (can't find it again) I wanted to try it\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mdfBzs",
            "likes": 40,
            "name": "Tuesday infinite zoom",
            "published": 3,
            "tags": [
                "zoom"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 519
        },
        "renderpass": [
            {
                "code": "// CC0: Tuesday infinite zoom\n//  Inspired by some twitter art (can't find it again) I wanted to try it\n\nconst float rep  = 7.0;\nconst float per  = 16.0;\nconst float zoom = log2(1.2);\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n#define REV(x)      exp2((x)*zoom)\n#define FWD(x)      (log2(x)/zoom)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define SCA(a)      vec2(sin(a), cos(a))\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat modPolar(inout vec2 p, float repetitions) {\n  float angle = TAU/repetitions;\n  float a = atan(p.y, p.x) + angle/2.;\n  float r = length(p);\n  float c = floor(a/angle);\n  a = mod(a,angle) - angle/2.;\n  p = vec2(cos(a), sin(a))*r;\n  // For an odd number of repetitions, fix cell index of the cell in -x direction\n  // (cell index would be e.g. -5 and 5 in the two halves of the cell):\n  if (abs(c) >= (repetitions/2.0)) c = abs(c);\n  return c;\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  vec2 op = p;\n  p *= ROT(0.05*TIME);\n\n  vec2 zp = p;\n  float tm = TIME+14.0*TAU;\n  float ctm = floor(tm);\n  float ftm = fract(tm);\n  float z = REV(ftm);\n  zp /= z;\n  float np = modPolar(zp, rep);\n  float x = zp.x;\n  float n = floor(FWD(abs(x)));\n  float x0 = REV(n);\n  float x1 = REV(n+1.0);\n  n -= ctm;\n\n  float m = (x0+x1)*0.5;\n  float w = x1-x0;\n\n\n  float aa = 4.0/RESOLUTION.y;\n\n  float dz = abs(zp.x-m) - w*0.45;\n  dz *= z;\n  \n  vec2 ap = p;\n  vec2 cp0 = p;\n  vec2 cp1 = p;\n  float ltm = TIME+TAU*14.0;\n  float mp = mod(n, 2.0*per)/per;\n  mp = mix(mp, 2.0-mp, step(1.0, mp));\n  float ntm = ltm*(mp-0.55);\n  ap *= ROT(ntm);\n  ap.y = abs(ap.y);\n  const float a = PI*0.75;\n  const vec2 sca = SCA(a);\n  float da = dot(ap,sca);\n  float a0 = PI-a+ntm;\n  float a1 = PI+a+ntm;\n  cp0 *= ROT(a0);\n  mod1(a0, TAU/rep);\n  cp0 -= vec2(z*m/cos(a0),0.0);\n  cp1 *= ROT(a1); \n  mod1(a1, TAU/rep);\n  cp1 -= vec2(z*m/cos(a1),0.0);\n  float dc0 = length(cp0)-w*0.49*z;\n  float dc1 = length(cp1)-w*0.49*z;\n  float dc = min(dc0, dc1);\n  \n  float d = max(da, dz);\n\n  vec3 col = vec3(0.0);\n  vec3 ccol = (0.5)*(1.0+cos(1.5*vec3(0., 1.0, 2.0)+(n)+PI*op.x*op.y));\n  vec3 ccol0 = ccol+max(-3.0*dz, 0.0);\n  vec3 ccol1 = ccol0*ccol0*0.075;\n  vec3 ccol2 = ccol+max(2.0*sqrt(max(-dc, 0.0)), 0.0);\n  ccol2 = sqrt(ccol2);\n\n  col = mix(col, ccol1, smoothstep(0.0, -aa, dz));\n  col = mix(col, ccol0, smoothstep(0.0, -aa, d));\n  col = mix(col, ccol2, smoothstep(0.0, -aa, dc));\n  col *= smoothstep(0.025, 0.075, length(op));\n  col *= smoothstep(1.5, 0.75, length(pp));\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}