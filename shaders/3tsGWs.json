{
    "Shader": {
        "info": {
            "date": "1558447570",
            "description": "Demonstrate various Runge-Kutta methods for numerically integrating ordinary differential equations. Click or drag to change the initial value for the ODE. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3tsGWs",
            "likes": 22,
            "name": "Runge-Kutta Demonstration",
            "published": 3,
            "tags": [
                "math",
                "differential",
                "rungekutta",
                "ode"
            ],
            "usePreview": 0,
            "username": "tpfto",
            "viewed": 1035
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019-2020 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Demonstrate various Runge-Kutta methods (https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods) for numerically solving an ODE\n// partly forked from https://www.shadertoy.com/view/Xlf3zl by Inigo Quilez\n\n// colors\n\n#define BG vec3(0.992, 0.965, 0.89)\n#define CC vec3(0.165, 0.631, 0.596)\n\n// some constants\n\n#define PI 3.14159265359\n\n// XY range of the display.\n\n#define DISP_SCALE 6.0 \n\n// select equation\n\n#define EQUATION 4\n\n#if (EQUATION == 1)\n\n// ODE for Lotka-Volterra equations, https://en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equations\n\nvec2 rhs( float t, vec2 p )\n{\n    float x = p.x, y = p.y;\n    const float al = 2.0/3.0, be = 4.0/3.0, gm = 1.0, de = 1.0; // parameters\n    \n    return vec2(x * (al - be * y), y * (de * x - gm));\n}\n\n#elif (EQUATION == 2)\n\n// ODE for Brusselator equations, https://en.wikipedia.org/wiki/Brusselator\n\nvec2 rhs( float t, vec2 p )\n{\n    float x = p.x, y = p.y;\n    const float a = 0.6, b = 1.3; // parameters\n    \n    return vec2(a + x * (x * y - b - 1.0), (b - x * y) * x);\n}\n\n#elif (EQUATION == 3)\n\n// ODE for Duffing equation, https://en.wikipedia.org/wiki/Duffing_equation\n\nvec2 rhs( float t, vec2 p )\n{\n    float x = p.x, y = p.y;\n    const float al = 1.0, be = -1.0, gm = 0.3, de = 0.25, om = 1.0; // parameters\n    \n    return vec2(y, x * (al + be * x * x) + de * y + gm * cos(om * t));\n}\n\n#elif (EQUATION == 4)\n\n// ODE for Van der Pol oscillator, https://en.wikipedia.org/wiki/Van_der_Pol_oscillator\n\nvec2 rhs( float t, vec2 p )\n{\n    float x = p.x, y = p.y;\n    const float mu = 1.2; // parameters\n    \n    return vec2(y, mu * y * (1.0 - x * x) - x);\n}\n\n#else\n\n// circle\n\nvec2 rhs( float t, vec2 p )\n{    \n    return vec2(-p.y, p.x);\n}\n\n#endif\n\n// squared line segment distance\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a, ba = b - a;\n    vec2 v = pa - ba * clamp( dot(pa, ba)/dot(ba, ba), 0.0, 1.0 );\n\treturn dot(v, v);\n}\n\n// maximum number of steps\n\n#define MAXSTEPS 500\n\n// method choice\n\n#define METHOD 3\n\n#if (METHOD == 1)\n\n// Use the (explicit) midpoint method/modified Euler method (https://en.wikipedia.org/wiki/Midpoint_method) to solve the ODE\n\nfloat rk2( vec2 ic, float tmax, vec2 p )\n{\n    float h = tmax/float(MAXSTEPS); // stepsize\n\n\tfloat t = 0.0;\n    vec2 a = ic, b = a;\n    float d = dot( p - a, p - a );\n    \n    for( int i = 0; i < MAXSTEPS; i++ )\n    {\n        vec2 b1 = b + 0.5 * h * rhs(t, b);\n        b = b + h * rhs(t + 0.5 * h, b1);\n\n        d = min( d, sdSegment( p, a, b ) );        \n\t\tt += h; a = b;\n\t}\n    \n\treturn sqrt(d);\n}\n\n#elif (METHOD == 2)\n\n// constants for Runge-Kutta-Gill\n\n/*\n#define C1 1.0/(2.0 + sqrt(2.0))\n#define C2 1.0 + sqrt(0.5)\n*/\n\n#define C1 0.292893218813\n#define C2 1.70710678119\n\n// Use the Runge-Kutta-Gill method to solve the ODE; https://doi.org/10.1017/S0305004100026414\n\nfloat rkg( vec2 ic, float tmax, vec2 p )\n{\n    float h = tmax/float(MAXSTEPS); // stepsize\n\n\tfloat t = 0.0;\n    vec2 a = ic, b = a, q = vec2(0.0);\n    float d = dot( p - a, p - a );\n    \n    for( int i = 0; i < MAXSTEPS; i++ )\n    {\n        // stage 1\n        vec2 bk = h * rhs(t, b);\n        vec2 br = 0.5 * (bk - 2.0 * q);\n        b += br;\n        q += 3.0 * br - 0.5 * bk;\n        \n        // stage 2\n        t += 0.5 * h;\n        bk = h * rhs(t, b);\n        br = C1 * (bk - q);\n        b += br;\n        q += 3.0 * br - C1 * bk;\n        \n        // stage 3\n        bk = h * rhs(t, b);\n        br = C2 * (bk - q);\n        b += br;\n        q += 3.0 * br - C2 * bk;\n        \n        // stage 4\n        t += 0.5 * h;\n        bk = h * rhs(t, b);\n        br = (bk - 2.0 * q)/6.0;\n        b += br;\n        q += 3.0 * br - 0.5 * bk;\n\n        d = min( d, sdSegment( p, a, b ) );        \n\t\ta = b;\n\t}\n    \n\treturn sqrt(d);\n}\n\n#elif (METHOD == 3)\n\n#define C3 1.0/3.0\n\n// Use Blum's variant of the classical Runge-Kutta method to solve the ODE; https://doi.org/10.1090/S0025-5718-1962-0145661-4\n\nfloat rkc( vec2 ic, float tmax, vec2 p )\n{\n    float h = tmax/float(MAXSTEPS); // stepsize\n\n\tfloat t = 0.0;\n    vec2 a = ic, b = a, q = vec2(0.0);\n    float d = dot( p - a, p - a );\n    \n    for( int i = 0; i < MAXSTEPS; i++ )\n    {\n        // stage 1\n        vec2 bk = h * rhs(t, b);\n        vec2 br = 0.5 * (bk - 2.0 * q);\n        b += br;\n        q = 3.0 * br - 0.5 * (bk - 2.0 * q);\n        \n        // stage 2\n        t += 0.5 * h;\n        bk = h * rhs(t, b);\n        br = 0.5 * (bk - q);\n        b += br;\n        q = -br - C3 * q + 0.5 * bk;\n        \n        // stage 3\n        bk = h * rhs(t, b) - 0.5 * bk;\n        br = bk;\n        b += br;\n        q -= br;\n        \n        // stage 4\n        t += 0.5 * h;\n        bk = h * rhs(t, b) + 2.0 * bk;\n        br = 0.5 * C3 * (bk + 6.0 * q);\n        b += br;\n        q = 3.0 * (br - 0.5 * C3 * (bk + 6.0 * q));\n\n        d = min( d, sdSegment( p, a, b ) );        \n\t\ta = b;\n\t}\n    \n\treturn sqrt(d);\n}\n\n#else\n\n// Use the (explicit, forward) Euler method (https://en.wikipedia.org/wiki/Euler_method) to solve the ODE\n\nfloat euler( vec2 ic, float tmax, vec2 p )\n{\n    float h = tmax/float(MAXSTEPS); // stepsize\n\n\tfloat t = 0.0;\n    vec2 a = ic, b = a;\n    float d = dot( p - a, p - a );\n    \n    for( int i = 0; i < MAXSTEPS; i++ )\n    {\n        b = b + h * rhs(t, b);\n\n        d = min( d, sdSegment( p, a, b ) );        \n\t\tt += h; a = b;\n\t}\n    \n\treturn sqrt(d);\n}\n\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ep = 6.0/iResolution.y;\n    vec2 aspect = iResolution.xy / iResolution.y;\n    vec2 p = ( fragCoord / iResolution.y ) - 0.5 * aspect;\n    p *= DISP_SCALE;\n    \n    vec2 ic = vec2(2.7, 1.1); // initial condition\n    float tmax = 20.0; // end of integration interval\n    \n    if (iMouse.xy != vec2(0.0))  // select initial condition with mouse\n    {\n        ic = ( iMouse.xy / iResolution.y ) - 0.5 * aspect;\n        ic *= DISP_SCALE;\n    }\n\n    #if (METHOD == 1)\n    float d = rk2(ic, tmax, p); // midpoint method\n    #elif (METHOD == 2)\n    float d = rkg(ic, tmax, p); // Runge-Kutta-Gill method\n    #elif (METHOD == 3)\n    float d = rkc(ic, tmax, p); // classical Runge-Kutta method\n    #else\n    float d = euler(ic, tmax, p); // Euler method\n    #endif\n        \n    vec3 col = BG;\n    col *= 1.0 - 0.03 * smoothstep(-0.3, 0.3, sin( 120.0 * d )); // constant distance contours\n    \n    // show solution\n    col = mix(CC, col, smoothstep(0.0, ep, d));\n    \n    // show initial point\n    col = mix(CC, col, smoothstep(0.0, ep, distance(ic, p) - 3.0 * ep));\n    \n    col *= 1.0 - 0.4 * length(fragCoord/iResolution.xy - 0.3); // vignetting\n\n\tfragColor = vec4( col, 1.0 );\n}\n\n/*\n\nThis is prolly my last shader for a good while.\nI had wanted to test myself on whether I can come up with stuff featuring interesting and/or nontrivial functionality\nin a language I have no previous experience with, once or twice every day for a few weeks, while working mostly on a smartphone.\n\nI will let others determine whether this little experiment was successful. It certainly was an interesting trip for me.\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}