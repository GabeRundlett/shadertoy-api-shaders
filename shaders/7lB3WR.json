{
    "Shader": {
        "info": {
            "date": "1623685236",
            "description": "potaterrino",
            "flags": 32,
            "hasliked": 0,
            "id": "7lB3WR",
            "likes": 27,
            "name": "Day 543",
            "published": 3,
            "tags": [
                "dots",
                "mograph",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 514
        },
        "renderpass": [
            {
                "code": "// hueshift from https://www.shadertoy.com/view/MsjXRt\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    //fragCoord += 650.*noise(vec3(uv*0.5,5.))/iResolution.xy;\n    col = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n\n    //col += smoothstep(0.,5.,max(noise(vec3(uv*2.,5.)) - 0.5,0.))*0.25;\n    \n    \n    float n1d = texelFetch(iChannel2,ivec2(mod(fragCoord + vec2(float(iFrame),0.),256.)),0).x;\n    vec3 n  = texelFetch(iChannel2,ivec2(mod(fragCoord + n1d*200. ,256.)),0).xyz;\n    \n    \n    //C = smoothstep(0.,1.,C);z\n    \n    //col.xyz = pow(max(col.xyz,0.), vec3(0.55) + n*0.1);\n    \n    \n    \n    col = pow(max(col,0.),vec3(0.4545));\n\n    col.xyz += smoothstep(0.5,0.,length(col))*n*0.1;\n    \n    col.xyz -= smoothstep(0.4,1.,length(col))*n*0.1;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pmod(p,a) mod(p,a) - 0.5*a\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pi radians(90.)\n#define iTime (iTime + 20.)\n\nfloat sdBox(vec2 p, vec2 s){p = abs(p) - s; return max(p.x,p.y);}\n\n\n\nfloat text(vec2 p, float[4] chars, float spacing, float s, bool isAbs, float absWidth, float opacity, bool scrobble) {\n\tp *= s;  \n    \n    p.x *= 1. - spacing;\n    vec2 id = floor(p*8.*2.);\n    p = mod(p,1./16.);\n    p.x = p.x/(1. - spacing) + 1./16./8.;\n    float char = chars[int(id.x) ];\n    char -= 32. ;\n    float t;\n    if(abs(id.y) < 1. && id.x >= 0. && id.x < 4.  && char < 200.){\n        vec4 letter = texture(iChannel3,p + vec2(mod(char,16.),-floor(char/16.) )/16.);\n        t = letter.w - opacity;\n        if(abs(p.x-1./16./2.)>1./16./2.)\n            t = 10e4;\n    \n        t /= s*10.1;\n    } else {\n        t = 10e5;\n    \n\t }\n    if (isAbs)\n        t = abs(t) - absWidth;\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(1,1.,0.9);\n    vec3 c = vec3(0.4,0.41,0.4)*0.;\n    vec3 cb = vec3(0.,0.7,0.3);\n    \n    vec2 md = vec2(0.1,0.2);    \n    {\n        vec2 p = uv;\n        \n        p.x += iTime*0.1;\n        \n        vec2 id = floor(p/md);\n        p = pmod(p,md);\n        \n        float die = fract(sin(id.x*10.*sin(id.y*10.) + cos(id.x*6.)*id.y + id.x));\n        if (die < 0.35){\n            p = pmod(p,md.x/4.);\n            //float d = length(p) - 0.003 + sin(die*20. + iTime*5.)*0.002;\n            p = abs(p)*rot(0.5*pi);\n            float d = sdBox(p,vec2(0.004,0.003+ sin(die*20. + iTime*5.)*0.002));\n            \n            \n            col = mix(col,c,smoothstep(fwidth(d),0.,d));\n            \n        } else if (die < 0.6){\n            //p = abs(p);\n            p[int(die*2000. + iTime)%2] -= 0.4;\n            float d = sdBox(p,vec2(0.07))+ sin(die*20. + iTime*5.)*0.0;\n            d = abs(d);\n            d = pmod(d + iTime*0.,0.01);\n            col = mix(col,cb,smoothstep(fwidth(uv.y),0.,d));\n        } else if (die < 0.8){\n            //p = pmod(p,md.x/4.);\n            //float d = sdBox(p,vec2(0.003));\n            float d = abs(p.x);\n            //d = min(d,abs(p.y));\n            //d -= 0.00;\n            //col = vec3(0);\n            //col = mix(col,1.-col,smoothstep(fwidth(uv.y),0.,d));\n        }\n    }\n    {\n        md = md.yx;\n        md.x *= 1.;\n        vec2 p = uv;\n        \n        p.x += iTime*0.1;\n        \n        vec2 id = floor(p/md);\n        p = pmod(p,md);\n        \n        float die = fract(sin(id.x*10.*sin(id.y*10.) + cos(id.x*6.)*id.y + id.x));\n        if (die < 0.35){\n            p = pmod(p,md.x/4.);\n            float d = length(p) - 0.003 + sin(die*20. + iTime*5.)*0.002;\n            col = mix(col,c,smoothstep(fwidth(d),0.,d));\n            \n        } else if (die < 0.5){\n            col -= col*1. - vec3(0.,0.4,0.2);\n        }\n    \n    }\n    \n    {\n        for(float i = 0.; i < 250.; i++){\n            float sp = (1. + sin(i*114.5)*0.5)*0.1;\n            float T = iTime + sin(iTime + i)*0.5;\n            vec2 p = uv + vec2(-1.5 + mod(T*sp,1.)*4.,sin(i*4.5 + T*0.1));\n            float s = 0.2 + sin(i)*0.1;\n            s *= 0.5;\n            float d = 10e4;\n            \n            if(sp < 0.1){\n                d = length(p) - s;\n\n                d = pmod(abs(d),0.01);\n                d = max(d,length(p) - s);\n                d = abs(d) - 0.002;\n\n            } else if (sp < 0.14) {\n                float outer = length(p) - s;\n                \n                p = pmod(p,0.01);\n                d = length(p) - 0.003;\n\n                //d = pmod(abs(d),0.01);\n                //d = abs(d) - 0.002;\n                d = max(d,outer);\n            } else {\n                //float outer = length(p) - s;\n                \n                d = length(p) - s;\n\n                //d = max(d,outer);\n            }\n            \n            col = mix(col,c,smoothstep(fwidth(uv.y),0.,d));\n        \n        }\n    \n    }\n    {\n        for(float i = 0.; i < 10.; i++){\n            float t = iTime + sin(iTime + i);\n            float sp = (1. + sin(i*114.5)*0.5)*0.1;\n            vec2 p = uv + vec2(-1.5 + mod(t*sp,1.)*4.,sin(i*4.5 + t*0.));\n            p *= 2. + sin(i);\n            float d = text(p, float[4](114.,130.,133.,120.), -0.5 , 0.2 , false, 0., 0.54 , false);\n            \n            vec3 cc = vec3(0);\n            col = mix(col,cc,smoothstep(fwidth(d)*(1.-step(0.01,d)),0.,d));\n\n        }\n        //vec2 p = uv;\n        \n    \n    }\n    \n    \n    {\n        if(abs(uv.y) > 0.45)\n            col = 1.-length(col)*vec3(1);\n    \n    }\n    {\n        vec2 p = uv;\n        p.x += iTime;\n        p.x = pmod(p.x,15.);\n        \n        float sz = .1;\n        //p.y = abs(p.y);\n        p *= rot(0.5*pi);\n        float d = abs(p.x);\n        d = max(pmod(d,sz*(0.25 + 0.01)),abs(p.x - sz*0.5 ) - sz);\n        //col = mix(col,vec3(1,1,1.) - col*(0.5+0.5*vec3(0.5,0.6,0.9)), smoothstep(fwidth(uv.y),0.,d));\n        \n    \n    }\n    vec3 ccc = col.zyx;\n    \n    //ccc -= 1.;\n    //ccc.zx *= rot(5.4);\n    ccc = HueShift ( ccc, -.2).xyz;\n    //ccc += 1.;\n    col = mix(col,ccc, smoothstep(0.8,0.85,sin(iTime*0.5 + uv.x*0.25)));\n        \n    col = mix(col,col.xzy, smoothstep(0.7,0.76,sin(iTime*0.5 + 3. + uv.x*0.25)));\n        \n    \n    col = pow(col,vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 HueShift (in vec3 Color, in float Shift)\n{\n    vec3 P = vec3(0.55735)*dot(vec3(0.55735),Color);\n    \n    vec3 U = Color-P;\n    \n    vec3 V = cross(vec3(0.55735),U);    \n\n    Color = U*cos(Shift*6.2832) + V*sin(Shift*6.2832) + P;\n    \n    return vec4(Color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}