{
    "Shader": {
        "info": {
            "date": "1719588479",
            "description": "continuing to learn about grids",
            "flags": 0,
            "hasliked": 0,
            "id": "XXtXWj",
            "likes": 4,
            "name": "two step",
            "published": 3,
            "tags": [
                "grid",
                "learning"
            ],
            "usePreview": 0,
            "username": "tetrismegistus",
            "viewed": 129
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979323846\n#define iTime (iTime + sin(iTime*PI*2. - PI)/(2.*PI))\n\nvec2 rotate2D(vec2 _st, float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 l = _st-vec2(0.5);\n    return 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n}\n\nvec4 tile(vec2 _st, float _zoom){\n    // returns space (xy) and column row info (zw)\n    _st *= _zoom;\n    float col = floor(_st.x);\n    float row = floor(_st.y);   \n    if (mod(row, 2.0) == 0.0 && mod(floor(iTime), 3.0) == 1.0) {\n        _st.x += mod(iTime, 2.0);\n    } else if (mod(col, 2.0) == 0.0 && mod(floor(iTime), 3.0) != 1.0) {\n        _st.y += mod(iTime, 2.0);\n    }\n    return vec4(fract(_st), int(floor(_st.x)), int(floor(_st.y)));\n}\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 color = vec3(0.0);\n    \n    // Define gradient colors\n    vec3 blue = vec3(0.455,0.537,0.753);\n    vec3 orange = vec3(0.961,0.318,0.035);\n    vec3 offWhite = vec3(0.941,0.918,0.776);\n\n    // Get the grid and local coordinates within each cell\n    vec4 grid = tile(uv, 10.0);\n    vec2 localUV = grid.xy;\n\n    // Calculate the gradient for the local coordinates\n    vec3 verGrad = mix(orange, blue, localUV.y);\n    vec3 horGrad = mix(offWhite, blue, localUV.x);\n    vec3 mixGrad = mix(mix(offWhite, blue, .1 + localUV.x * sin(iTime) + localUV.y * cos(iTime)), \n                       mix(verGrad, horGrad, -abs(sin(iTime + localUV.x) * .5)), uv.x * uv.y);\n\n    // Apply the gradient to the circles\n    color = mixGrad * box(localUV, vec2(0.9, .9), .025);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}