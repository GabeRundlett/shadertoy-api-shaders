{
    "Shader": {
        "info": {
            "date": "1594695385",
            "description": "some new shitty way to fake reflections in this extremely specific circumstance",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt2yzG",
            "likes": 27,
            "name": "Best Friend Cube",
            "published": 3,
            "tags": [
                "bep"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 580
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat GaborNoise(vec3 p, float z, float k) {\n    // https://www.shadertoy.com/view/wsBfzK\n    float d=0.,s=1.,m=0., a;\n    for(float i=0.; i<5.; i++) {\n        vec3 q = p*s, g=fract(floor(q)*vec3(123.34,233.53,314.15));\n    \tg += dot(g, g+23.234);\n\t\ta = fract(g.x*g.y)*1e3 +z*(mod(g.x+g.y, 2.)-1.); // add vorticity\n        q = (fract(q)-.5);\n        //random rotation in 3d. the +.1 is to fix the rare case that g == vec3(0)\n        //https://suricrasia.online/demoscene/functions/#rndrot\n        q = erot(q, normalize(tan(g+.1)), a);\n        d += sin(q.x*10.+z)*smoothstep(.25, .0, dot(q,q))/s;\n        p = erot(p,normalize(vec3(-1,1,0)),atan(sqrt(2.)))+i; //rotate along the magic angle\n        m += 1./s;\n        s *= k; \n    }\n    return d/m;\n}\n\nfloat super(vec3 p) {\n    return sqrt(length(p*p));\n}\n\nfloat super(vec2 p) {\n    return sqrt(length(p*p));\n}\n\nfloat box(vec3 p, vec3 d) {\n    vec3 q = abs(p)-d;\n    return super(max(q,0.))+min(0.,max(q.x,max(q.y,q.z)));\n}\n\nfloat box(vec2 p, vec2 d, float es) {\n    vec2 q = abs(p)-d;\n    vec2 qq = max(q,0.);\n    return mix(super(qq),length(qq),es) +min(0.,max(q.x,q.y));\n}\n\nvec3 distorted_p;\nfloat plate;\nfloat bx;\nfloat bump;\nfloat scene(vec3 p) {\n    float plateangle = atan(p.x,p.y);\n    \n    //different noise for each dimension\n    vec3 distort = vec3(0);\n    distort.x += GaborNoise(p/2., iTime*3., 1.15)*.3;\n    distort.y += GaborNoise(p/2.+10., iTime*3., 1.15)*.3;\n    distort.z += GaborNoise(p/2.+20., iTime*3., 1.15)*.3;\n\n    float es = smoothstep(0.,.3,GaborNoise(p*2., 0., 1.15));\n    plate = box(vec2(p.z+1.6,length(p.xy)), vec2(0.1,2.5+sin(plateangle*23.)*.004 -abs(es)*.001 ), es*.8+.2 )-.07;\n    plate = min(plate, box(vec2(p.z+6.6,length(p.xy)),vec2(5.,.8-abs(es)*.001),0. ));\n\n    p += distort;\n\n    distorted_p = p;\n    vec3 ap = abs(p);\n    bump = min(ap.x,min(ap.y,ap.z));\n    bump = smoothstep(0.,.1,bump);\n    bx = box(p,vec3(1))-.3-bump*.05;\n    return min(bx,plate);\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nfloat bayer(vec2 fragCoord) {\n    return texelFetch(iChannel0, ivec2(fragCoord) % 8, 0).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 cam = normalize(vec3(1.5,uv));\n    vec3 init = vec3(-10.,0,-0.5);\n    \n    float yrot = 0.5;\n    float zrot = iTime*.2;\n    if (iMouse.z > 0.) {\n        yrot += -4.*mouse.y;\n        zrot = 4.*mouse.x;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    init = erot(init, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n    init = erot(init, vec3(0,0,1), zrot);\n    \n    vec3 p = init;\n    bool hit = false;\n    float dist;\n    for (int i = 0; i < 250 && !hit; i++) {\n        dist = scene(p);\n        hit = dist*dist < 1e-6;\n        p+=dist*cam*.8;\n        if (distance(p,init)>50.) break;\n    }\n    bool pl = dist == plate;\n    float lbx = bx;\n    float lb = bump;\n    vec3 local_coords = distorted_p;\n    vec3 n = norm(p);\n    vec3 r = reflect(cam,n);\n    float ss = smoothstep(-.05,.05,scene(p+vec3(.05)/sqrt(3.)));\n    float rao = smoothstep(-.2,.1,scene(p+r*.1)) * smoothstep(-.4,.1,scene(p+n*.1));\n    float tex = GaborNoise(local_coords*3., 0., 1.5)+.5;\n    float diff = mix(length(asin(sin(n*2.)*.9)*0.5+0.5)/sqrt(3.),ss,.2)+.1;\n    float spec1 = length(asin(sin(r*4.)*.9)*0.5+0.5)/sqrt(3.);\n    float spec2 = length(asin(sin(r*3.)*.9)*0.5+0.5)/sqrt(3.);\n    float specpow = mix(2.,5.,tex);\n    float frens = 1.-pow(dot(cam,n),2.)*0.98;\n\n    vec3 col1 = vec3(0.7,0.3,0.4)*diff + pow(spec2,specpow)*frens*.5;\n    vec3 col2 = vec3(0.7)*(ss*.8+.2) + pow(spec1*1.1,40.)*frens + spec1*frens*.3;\n\n    float bgdot = length(asin(sin(cam*3.5)*.8)*0.4+0.6)/sqrt(3.);\n    vec3 bg = vec3(.2,.2,.3) * bgdot*bgdot + pow(bgdot, 10.)*2.;\n    \n    float tex2 = smoothstep(0.1,.8,GaborNoise(p*4., 0., 1.2));\n    vec3 bounce = p+r*lbx*(2.-tex2);\n    float rao2 = smoothstep(-lbx,lbx,scene(bounce));\n    vec3 bouncecol = mix(vec3(.7,.3,0.4), vec3(.8), smoothstep(-.8,.8,bounce.x*bounce.y*bounce.z));\n    vec3 pedistal = vec3(.1)*spec1 + pow(spec1, 10.-tex2*2.);\n    if (n.z>.99) pedistal = mix(bouncecol*frens*.4, pedistal, rao2);\n    \n    vec3 col = mix(col1,col2,smoothstep(-.05,.05,local_coords.x*local_coords.y*local_coords.z));\n    col *= lb*.3+.7;\n    if (pl) col = pedistal;\n    fragColor.xyz = hit ? rao*col : bg;\n    fragColor *= 1.- dot(uv,uv)*.6;\n    fragColor = sqrt(smoothstep(-.01, 1.1, fragColor));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}