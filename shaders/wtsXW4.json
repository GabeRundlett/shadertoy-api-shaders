{
    "Shader": {
        "info": {
            "date": "1563033631",
            "description": "Single background I made in a low resolution few years ago that I wanted to an animted high res one.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtsXW4",
            "likes": 2,
            "name": "Planets vectorial",
            "published": 3,
            "tags": [
                "space",
                "planets",
                "vectorial"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat sat(float a)\n{\n    return clamp(a, 0.,1.);\n}\n\nfloat rand(vec2 co){\n  return sat(fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453));\n}\n\nfloat drawExcentric(vec2 uv, float aRad, float bRad, vec2 excent)\n{\n    float luv = length(uv);\n    \n  \treturn float(length(uv - excent) > bRad && luv < aRad);\n}\n\nfloat drawCircle(vec2 uv, float rad)\n{\n    return float(length(uv) < rad);\n}\n\nfloat drawLight(vec2 uv, float sz)\n{\n    return float(sat(-(length(uv) - sz)));\n}\n\nvec4 drawPlanet(vec2 uv, float radius, float subRadius, vec2 excentricDir)\n{\n    float isOnPlanet = float(length(uv) < radius);\n    \n    vec3 col = vec3(float(drawExcentric(uv, radius,subRadius,excentricDir * (radius - subRadius)) > 0.5));\n    \n    col = col * (0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n    return vec4(col, isOnPlanet);\n}\n\nfloat drawDim(vec2 uv, float sz, float strength)\n{\n    return pow(sat(length(uv/sz)), strength);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col;\n    \n    vec2 bgPos = vec2(0.,0.1);\n    \n    col = vec3(1.)*(max(rand(uv),0.99)-0.99)*100.*0.8* length(uv);\n\n    col += pow(sat(1.-length(uv*.5-bgPos)),5.9)*vec3(129, 116, 242)/255.; // background\n    col *= drawDim(uv*vec2(1.,0.5)-vec2(0.3,-0.1), 0.25, 1.5);\n    \n\n    \n    vec4 planetA = drawPlanet(uv + vec2(-0.21,-0.0), 0.17, 0.16, 0.8*normalize(vec2(1.,-0.2)));\n    float orbitTime = iTime * 0.5;\n    \n    \n    \n    \n    vec2 bPos = vec2(-(sin(orbitTime)*0.5-0.21), 0.);\n    \n    vec2 bDir = bgPos - bPos;\n    \n    float bRad = 0.1*(cos(orbitTime) * 0.3 + 0.7);\n    vec4 planetB = drawPlanet(uv - bPos, bRad, sat(bRad-0.1*bRad), normalize(-bDir));\n    \n    \n    \n    \n    \n    if (planetA.w > 0.)\n        col = planetA.xyz;\n    if (!(bRad < 0.05 && planetA.w > 0.) )\n    \tcol = (planetB.xyz*planetB.w)+col - vec3(0.1)*planetB.w;//mix((planetB.xyz*planetB.w)+col, (planetB.xyz*(1.-planetB.w))*col, 0.5);\n    \n    vec3 colFlare = vec3(89, 202, 247)/255.;\n    col += colFlare*drawLight((uv-bgPos)*vec2(0.5,2.5), 0.5);  \n    col += colFlare*drawLight((uv-bgPos)*vec2(0.9,100.5), 0.5);\n    col += mix(colFlare, vec3(1.),0.9)*drawLight((uv-bgPos)*vec2(0.2,3.5), 0.5);\n    \n    col += mix(colFlare, vec3(1.),0.9)*drawLight((uv-bgPos)*vec2(0.2,3.5), 1.5)*0.1;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx;\n\n    uv -= vec2(0.5) * (iResolution.xy / iResolution.xx);\n    \n    vec3 col;\n\n   \tcol = rdr(uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}