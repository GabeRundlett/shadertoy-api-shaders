{
    "Shader": {
        "info": {
            "date": "1470799905",
            "description": "A procedural reproduction of the 80s chrome logo effect.\nThis was meant for distance field font rendering, emulated here by a weird animated distance field.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtcGzs",
            "likes": 17,
            "name": "80s chrome effect",
            "published": 3,
            "tags": [
                "2d",
                "80s",
                "chrome",
                "cyberspace"
            ],
            "usePreview": 0,
            "username": "nuclear",
            "viewed": 1532
        },
        "renderpass": [
            {
                "code": "const float smoothness = 0.015;\nconst float bevel_size = 0.1;\n\nconst float horiz_scale = 10.0;\nconst vec3 mid_color = vec3(0.133, 0.006, 0.612);\nconst vec3 horiz_color = vec3(0.612, 0.006, 1.0);\nconst vec3 fog_color = vec3(0.01, 0.01, 0.01);\n\n\nfloat glyph_dist(in vec2 pt);\nvoid gradcurves(float t, out float over, out float under);\nvec3 backdrop(in vec2 pt);\nfloat fbm4(float p);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    vec2 pt = (uv * 2.0 - 1.0) * vec2(aspect, 1.0) * 1.0;\n    \n    float dist = glyph_dist(pt);\n    float dfdu = glyph_dist(pt + vec2(0.01, 0.0)) - dist;\n    float dfdv = glyph_dist(pt + vec2(0.0, 0.01)) - dist;\n    vec2 grad = normalize(vec2(dfdu, -dfdv));\n\n    float val = smoothstep(-smoothness, smoothness, dist);\n    float bevel = smoothstep(bevel_size - smoothness, bevel_size + smoothness, dist);\n    \n    // --- face gradients ---\n\tfloat t = uv.y;\n\n\tfloat c_over, c_under;\n\tfloat tlow = min(2.0 * t, 1.0);\n\tgradcurves(tlow, c_over, c_under);\n\tvec3 color_low = vec3(c_over, c_under, c_over * 0.5);\n\n\tfloat thigh = max(2.0 * t - 1.0, 0.0);\n\tgradcurves(thigh, c_over, c_under);\n\tvec3 color_high = vec3(c_under, c_under, c_over);\n\n\tvec3 face_color = mix(color_low, color_high, step(0.5, t));\n\n    // --- bevel gradients ---\n\tfloat bv_shade = mod(1.0 * dot(grad, normalize(vec2(0.1, 1.0))) * 0.5 + 0.5, 1.0);\n\n\tgradcurves(1.0 - bv_shade, c_over, c_under);\n\tvec3 bv_color = vec3(c_under, c_under, c_over);\n    \n    vec3 color = mix(bv_color, face_color, bevel);\n\tfragColor = vec4(mix(backdrop(pt), color, val), 1.0);\n}\n\n// emulate what you'd get from the distance field glyphmap\nfloat glyph_dist(in vec2 pt)\n{\n    float angle = atan(pt.y, pt.x) - iTime * 0.1;\n    float len = length(pt);\n    float rad = 1.0 - len;\n    \n    float theta = angle + sin(iTime - len * 10.0) * 0.2;\n    \n    return rad - abs(sin(theta * 2.5)) * 0.6;\n}\n\n\n#define HALF_PI 1.570796326794897\n\nvoid gradcurves(float t, out float over, out float under)\n{\n    over = cos(t * HALF_PI);\n    under = cos(t * HALF_PI + HALF_PI) + 1.0;\n}\n\nvec3 sky_grad(float t)\n{\n\treturn mix(horiz_color, mid_color, t - 0.8);\n}\n\nvec3 grid(in vec2 pt)\n{\n    float z = 1.0 + abs(pt.y) * 6.0;\n    float x = pt.x / z;\n    float y = abs(pt.y) / z;\n    float val = max(sin(x * 100.0), sin(y * 900.0));\n    \n    float col_t = smoothstep(2.0, 4.5, z);\n    vec3 col = mix(fog_color, vec3(1.0, 0.2, 1.0), col_t);\n    \n    return step(0.22, -pt.y) * val * smoothstep(0.9, 0.95, val) * col;\n}\n\nvec3 backdrop(in vec2 pt)\n{\n    //return grid(pt);\n    vec3 color = sky_grad(pt.y * 2.0);\n\n    float horiz = pt.y + fbm4(pt.x * 1.8) * 0.1;\n\n    return mix(fog_color, color, smoothstep(0.025, 0.03, horiz)) + grid(pt);\n}\n\nfloat cnoise(vec2 p);\n\nfloat fbm4(float p)\n{\n    float res = 0.0;\n    float freq = 1.0;\n    float scale = 1.0;\n    \n    for(int i=0; i<4; i++) {\n        res += cnoise(vec2(p * freq, 0.0)) * scale;\n        freq *= 2.0;\n        scale *= 0.5;\n    }\n    return res;\n}\n\n//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylor_inv_sqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic perlin noise\nfloat cnoise(vec2 p)\n{\n  vec4 pi = floor(p.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 pf = fract(p.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  pi = mod289(pi); // To avoid truncation effects in permutation\n  vec4 ix = pi.xzxz;\n  vec4 iy = pi.yyww;\n  vec4 fx = pf.xzxz;\n  vec4 fy = pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylor_inv_sqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}