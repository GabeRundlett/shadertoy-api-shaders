{
    "Shader": {
        "info": {
            "date": "1721283796",
            "description": "sources  https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/McscRS",
            "flags": 1,
            "hasliked": 0,
            "id": "lcsczB",
            "likes": 2,
            "name": "grow up",
            "published": 3,
            "tags": [
                "fractal",
                "moving",
                "infinite"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 110
        },
        "renderpass": [
            {
                "code": "\n\nconst vec3 BLACK = vec3(0,0,0);\nconst vec3 WHITE = vec3(1,1,1);\nconst vec3 RED = vec3(1,0,0);\n\nint murmur_32_scramble(int k) {\n    k *= 0xcc9e2d51;\n    k = (k << 15) | (k >> 17);\n    k *= 0x1b873593;\n    return k;\n}\n\n\nint murmur3_32(int x, int y, int seed)\n{\n    int h = seed ^ murmur_32_scramble(x);\n    h = (h << 13) | (h >> 19);\n    h = h * 5 + 0xe6546b64;\n    h ^= murmur_32_scramble(y);\n    h = (h << 13) | (h >> 19);\n    h = h * 5 + 0xe6546b64;\n    /* Finalize. */\n\th ^= 2;\n\th ^= h >> 16;\n\th *= 0x85ebca6b;\n\th ^= h >> 13;\n\th *= 0xc2b2ae35;\n\th ^= h >> 16;\n\treturn h;\n}\n\nvec4 distort(vec2 start, float power) {\n    float dTime = iTime + 1.5*sin(iTime*0.2);\n    vec2 centre = vec2(\n       sin(dTime*0.93) *1.5,\n       cos(dTime*0.62)\n    ) * 2.8;\n    vec2 rel = start - centre;\n    float dist = 3.0*(sin(iTime*3.91)+1.5)*length(rel) - 3.0;\n    float effect = (1.0+0.5*sin(iTime*0.1))/(1.0+pow(dist,2.0));\n    float mult = 1.0 + 0.125*(0.5+cos(dist))/(pow(dist,2.0)+1.0);\n    rel = rel * mult;\n    float len = length(rel);\n    float ang = atan(rel.y, rel.x) + effect * sin(iTime*1.2);\n    rel = vec2(cos(ang), sin(ang))*len;\n    return vec4(rel + centre, effect, 0.5);\n}\n\nvec4 distort2(vec2 start, float power) {\n  float dx = sin(start.x+iTime*1.1) + cos(start.y+iTime*1.3);\n  float dy = cos(start.x+iTime*1.7) - sin(start.y+iTime*1.9);\n  vec2 bonk = vec2(dx, dy);\n  return vec4(bonk * power + start, length(bonk*power), atan(dx,dy));\n}\n\nvec3 lerp(vec3 a, vec3 b, float x) {\n  return a + (b-a) * x;\n}\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n            p.xy*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.3-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n   \n    vec2 uv2 = 6.0 * (fragCoord.xy/iResolution.xy -0.5)\n      *vec2(iResolution.x/iResolution.y, 1.0);\n    float spin = 0.4 + 1.1 * sin(iTime*10.10);\n  \n\n    vec4 pos = distort(uv2, 2.0*sin(iTime*10.13));\n    vec2 gpos = abs(fract(pos.xy*12.0)-0.5);\n  \n\n    float d = max(uv.x,uv.y) *100.0-(iTime)*1.0;\n    vec3 color =vec3(d, d, d);\n\n      \n      \n\tvec3 dir=vec3(uv*zoom,iTime*0.05)-color;\n\tfloat time=iTime*speed+.25;\n\n\t//mouse rotation\n\n\tvec3 from=vec3(1.,.5,0.5);\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}