{
    "Shader": {
        "info": {
            "date": "1695694529",
            "description": "double pendulum",
            "flags": 32,
            "hasliked": 0,
            "id": "ms3yDB",
            "likes": 6,
            "name": "double pendulum",
            "published": 3,
            "tags": [
                "doublependulum"
            ],
            "usePreview": 0,
            "username": "Dolfun",
            "viewed": 136
        },
        "renderpass": [
            {
                "code": "const float r0 = 0.025;\nconst float r1 = r0 * sqrt(m1);\nconst float r2 = r0 * sqrt(m2);\nconst float thk = 0.0025;\nvec3 draw_pendulum(vec3 color, vec2 uv, vec4 state) {\n    float th1 = state.x, th2 = state.y, w1 = state.z, w2 = state.w;\n    vec2 pos1 = l1 * vec2(sin(th1), -cos(th1));\n    vec2 pos2 = pos1 + l2 * vec2(sin(th2), -cos(th2));\n    color = mix(vec3(0.9), color, smoothstep(0.0, aa, sdf_circle(uv, 0.01)));\n    color = mix(vec3(0.9), color, smoothstep(0.0, aa, sdf_circle(uv - pos1, r1)));\n    color = mix(vec3(0.9), color, smoothstep(0.0, aa, sdf_circle(uv - pos2, r2)));\n    color = mix(vec3(0.9), color, smoothstep(0.0, aa, sdf_seg(uv, vec2(0.0), pos1, thk)));\n    color = mix(vec3(0.9), color, smoothstep(0.0, aa, sdf_seg(uv, pos1, pos2, thk)));\n    return color;\n}\n\nvec3 draw_energy_bar(vec3 color, vec2 uv, vec4 state) {\n    float E0 = energy(state_0);\n    float E = energy(state);\n    float val = 0.1 * (E - E0) / abs(E0) + 0.5;\n    val = clamp(val, 0.0, 1.0);\n    float r = 0.02;\n    vec2 dim = vec2(0.01, 0.3);\n    vec2 pos = vec2(0.0, -(1.0-val)*dim.y);\n    float box = smoothstep(0.0, aa, sdf_box(uv-pos, dim*vec2(1.0, val)));\n    float border = smoothstep(0.0, aa, sdf_hollow_box(uv, dim+r, 0.0025));\n    vec2 v = vec2(dim.x+r*0.5, 0.0);\n    float line = smoothstep(0.0, aa, sdf_seg(uv,-v,v, 0.0025));\n    color = mix(vec3(0.9), color, box);\n    color = mix(vec3(0.9), color, border);\n    color = mix(vec3(0.9), color, line);\n    return color;\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    vec2 uv = (frag_coord * 2.0 - iResolution.xy) / iResolution.y;\n    vec4 state = fetch(iChannel0, STATE_ADDR);\n    \n    vec3 color = vec3(0.2);\n    color = draw_pendulum(color, uv, state);\n    if (iMouse.z > 0.0) color = draw_energy_bar(color, uv - vec2(-1.5, 0.0), state);\n    \n    vec3 trail = fetch(iChannel1, frag_coord).rgb;\n    color += trail;\n    \n    frag_color = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 f(vec4 state) {\n    float th1 = state.x, th2 = state.y, w1 = state.z, w2 = state.w;\n    float cth = cos(th1-th2), sth = sin(th1-th2);\n    float den = m1+m2*sth*sth;\n    float a1 = (m2*g*sin(th2)*cth-m2*sth*(l1*w1*w1*cth+l2*w2*w2)-(m1+m2)*g*sin(th1))/(l1*den);\n    float a2 = ((m1+m2)*(l1*w1*w1*sth-g*sin(th2)+g*sin(th1)*cth)+m2*l2*w2*w2*sth*cth)/(l2*den);\n    a1 -= damping * w1;\n    a2 -= damping * w2;\n    return vec4(w1, w2, a1, a2);\n}\n\nvec4 simple_integrate(vec4 state, float h) {\n    return state + h * f(state);\n}\n\nvec4 rk_integrate(vec4 state, float h) {\n    vec4 k1 = h*f(state);\n    vec4 k2 = h*f(state + 0.5*k1);\n    vec4 k3 = h*f(state + 0.5*k2);\n    vec4 k4 = h*f(state + k3);\n    return state + (k1+2.0*k2+2.0*k3+k4)/6.0;\n}\n\nvoid mainImage(out vec4 state, in vec2 frag_coord) {\n    if (to_store(frag_coord, STATE_ADDR)) {\n        state = state_0;\n    } else if (to_store(frag_coord, PREV_STATE_ADDR)) {\n        state = state_0;\n    }\n    if (iFrame > 0) {\n        if (to_store(frag_coord, STATE_ADDR)) {\n            state = fetch(iChannel0, STATE_ADDR);\n            float dt = iTimeDelta;\n            state = rk_integrate(state, dt);\n        } else if (to_store(frag_coord, PREV_STATE_ADDR)) {\n            state = fetch(iChannel0, STATE_ADDR);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define fetch(buf, addr) texelFetch(buf, ivec2(addr), 0)\n#define to_store(buf_pos, addr) (ivec2(buf_pos) == addr)\n\nconst ivec2 STATE_ADDR = ivec2(0, 0);\nconst ivec2 PREV_STATE_ADDR = ivec2(1, 0);\nconst float pi = 3.14159265359;\nconst float l1 = 0.4;\nconst float l2 = 0.5;\nconst float g = 9.81;\nconst float m1 = 1.0;\nconst float m2 = 1.0;\nconst vec4 state_0 = vec4(0.5*pi, 1.5*pi, 0.0, -10.0);\nconst float damping = 0.0;\n\n// anti-aliasing\nconst float aa = 0.0025;\n\nfloat energy(vec4 state) {\n    float th1 = state.x, th2 = state.y, w1 = state.z, w2 = state.w;\n    float T = 0.5*((m1+m2)*l1*l1*w1*w1+m2*l2*l2*w2*w2+m2*l1*l2*w1*w2*cos(th1-th2));\n    float V = -(m1+m2)*g*l1*cos(th1)-m2*g*l2*cos(th2);\n    return T + V;\n}\n\nfloat sdf_circle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdf_seg(vec2 p, vec2 a, vec2 b, float r) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba*h) - r;\n}\n\nfloat sdf_box(vec2 p, vec2 b) {\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdf_hollow_box(vec2 p, vec2 b, float r) {\n    return abs(sdf_box(p, b)) - r;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 pos(vec4 state) {\n    float th1 = state.x, th2 = state.y;\n    return vec2(l1*sin(th1)+l2*sin(th2), -l1*cos(th1)-l2*cos(th2));\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    vec2 uv = (frag_coord * 2.0 - iResolution.xy) / iResolution.y;\n    float dt = iTimeDelta;\n    vec2 curr = pos(fetch(iChannel0, STATE_ADDR));\n    vec2 prev = pos(fetch(iChannel0, PREV_STATE_ADDR));\n    float t = smoothstep(0.0, aa, sdf_seg(uv, curr, prev, 0.005));\n    \n    vec3 color = fetch(iChannel1, frag_coord).rgb;\n    if (color.x > 0.0) color -= 0.1 * dt;\n    color = mix(vec3(0.4), color, t);\n    \n    frag_color = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}