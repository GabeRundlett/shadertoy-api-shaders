{
    "Shader": {
        "info": {
            "date": "1689100972",
            "description": "Visualizing some vector fields (VFs) in the plane.\nAll VFs have a zero at (0,0).\nAll VFs and their linear interpolations are visible at some point.\nbuffer B; VFs.\nbuffer A: pixel particle system.",
            "flags": 32,
            "hasliked": 0,
            "id": "cdfBDS",
            "likes": 3,
            "name": "One Zero Fields",
            "published": 3,
            "tags": [
                "visualization",
                "colors",
                "rainbow",
                "vectorfield"
            ],
            "usePreview": 0,
            "username": "theott",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = A(uv).xyz;\n    \n    // Glow\n    float d = sqrt3 - length(col);\n    //col *= pow(0.9 / d, 1.01);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 U = (2.*fragCoord - iResolution.xy)/iResolution.y; // -1,1\n    vec2 V = fragCoord/iResolution.xy; // [0,1\n\n    vec2 field = B(V).xy; // get vector field \n    vec4 pre = A(V - 0.001 * field); // use vector field as gradient\n\n    vec3 col = pow3(clamp(pre.xyz,0.,.99),1.004); // color attenuation\n    \n    // Grid of points * Time varying pixel color * twinkle\n    float interval = 0.23;\n    vec2 UGrid = mod(U + interval * 0.5, interval);\n    float d = length(UGrid - vec2(interval*0.5));\n    vec3 grid = vec3(smoothstep(0.99, 1.0, (sqrt2 - d) / sqrt2));\n    vec3 palette = 0.5 + 0.5*cos(iTime+V.xyx+vec3(0,2,4));\n    float twinkle = map(sin(iTime/3.), -1.,1., 0.3, 1.);\n    col +=  grid * normalize(palette);// * twinkle;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//methods from https://www.shadertoy.com/view/3tBGzh\n#define A(U) texture(iChannel0, U)\n#define B(U) texture(iChannel1, U)\n#define C(U) texture(iChannel2, U)\n\nconst float sqrt2 = 1.4142135623730951;\nconst float sqrt3 = 1.7320508075688772;\n\n\n//utility functions\nmat2 rot(float a){\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat unipolar(float x){\n    return map(x,-1.,1.,0.,1.);\n}\n\nvec2 unipolar2(vec2 u){\n    return vec2(unipolar(u.x), unipolar(u.y));\n}\n\nvec3 pow3(vec3 u, float a){\n    return vec3(pow(u.x,a), pow(u.y,a), pow(u.z,a));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float freqPlus(float T){\n    // positive part of a sine\n    float t = iTime / 20.0;\n    return clamp(step(0.0, sin(T*t)), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n   float t = iTime / 20.0;\n\n   vec2 pos = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n   //pos += 0.5 * vec2(sin(t), sin(t*0.5));\n   \n   float x = pos.x;\n   float y = pos.y;\n   \n   // some vector fields\n   vec2 outVF = pos;\n   vec2 inVF = -pos;\n   vec2 rotVF = vec2(-y,x);\n   vec2 hyperbolaVF = vec2(x,-y);\n   vec2 rightVF = vec2(x*x + y*y, 0);\n   vec2 touchingCirclesVFA = vec2(x*x - y*y, 2.0 * x* y);\n   vec2 touchingCirclesVFB = vec2(-x*x + y*y, -2.0 * x* y);\n    \n   // interpolate between vector fields\n   vec2 VF =\n   freqPlus(1.0)  * inVF +\n   freqPlus(2.0)  * rotVF +\n   freqPlus(4.0)  * touchingCirclesVFA +\n   freqPlus(8.0)  * hyperbolaVF +\n   freqPlus(16.0) * rightVF;\n   \n   fragColor = vec4(VF,0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}