{
    "Shader": {
        "info": {
            "date": "1463843910",
            "description": "Win8",
            "flags": 96,
            "hasliked": 0,
            "id": "4sVSDz",
            "likes": 0,
            "name": "Win8",
            "published": 3,
            "tags": [
                "win8"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 sample = texture(iChannel0, uv);\n    fragColor = sample; return;\n    fragColor = vec4(sample.a); return;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS (16.0/max(iResolution.x,iResolution.y))\n\n#define time ((saw(float(__LINE__))+1.0)*iTime)\n#define ZOOM exp(4.0*sin(time))\n#define saw(x) (acos(cos(x))/PI)\n#define sphereN(uv) (normalize(vec3((uv).xy, sqrt(clamp(1.0-length((uv)), 0.0, 1.0)))))\n#define storeUV(uv0,uv1,uv2) (mat3(uv0.xy,0.0,uv1.xy,0.0,uv2.xy,0.0))\n#define detail (smoothstep(0.0,EPS,magnification))\n\nfloat seedling;\n\nfloat audio_freq( in sampler2D channel, in float f) { return texture( channel, vec2(f, 0.25) ).x; }\nfloat audio_ampl( in sampler2D channel, in float t) { return texture( channel, vec2(t, 0.75) ).x; }\n\nvec2 SinCos( const in float x ) { return vec2(sin(x), cos(x)); }\nvec2 rotatez( const in vec2 vPos, const in vec2 vSinCos ) { return vPos.xy * mat2(vSinCos.yx, -vSinCos.x, vSinCos.y);}\nvec2 rotatez( const in vec2 vPos, const in float fAngle ) { return rotatez( vPos, SinCos(fAngle) ); }\nfloat cross( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nvec2 tree(vec2 uv)\n{\n    float turns = 5.0;\n    uv = rotatez(uv.xy, PI/(1.0*turns)).xy;\n    float theta = atan(uv.y, uv.x);\n    \n    float rot = float(((theta/PI*.5+.5)*turns))/turns;\n    \n    vec2 xy = rotatez(uv.xy, \n                      PI*2.0*(rot)+PI/turns).xy;\n    \n    xy = sign(xy)*log(abs(xy));\n    \n    return vec2(saw(theta*turns), saw(xy.x*turns));\n}\n\nvoid init(inout vec2 uv, float scale, inout float magnification, vec2 offset)\n{\n    uv = uv*scale-scale/2.0;\n    uv.x *= iResolution.x/iResolution.y;\n    uv += offset;\n    float r = length(uv);\n    uv = normalize(uv)/(log(r+E)-1.0);\n}\n\nvoid transform(inout vec2 uv, float scale, inout float magnification, vec2 offset)\n{\n    vec2 uv0 = uv;\n    uv = uv*scale-scale/2.0;\n    uv += offset;\n    uv = tree(uv);\n    uv = uv*detail+(1.0-detail)*uv0;\n}\n\nfloat magnify(vec2 uv0, vec2 uv1, vec2 uv2, mat3 lastUV)\n{\n    vec2 x1 = lastUV[1].xy-lastUV[0].xy;\n    vec2 y1 = lastUV[2].xy-lastUV[0].xy;\n    \n    vec2 x2 = uv1-uv0;\n    vec2 y2 = uv2-uv0;\n    \n    float a1 = cross(vec3(x1.xy, 0.0),  vec3(y1.xy, 0.0)).z;\n    float a2 = cross(vec3(x2.xy, 0.0),  vec3(y2.xy, 0.0)).z;\n    \n    float z = abs(a2/a1);\n    \n    return z;\n}\n\nfloat lowAverage()\n{\n    const int iters = 32;\n    float sum = 0.0;\n    \n    float last = length(texture(iChannel0, vec2(0.0, 0.75)));\n    float next;\n    for(int i = 1; i < iters; i++)\n    {\n        next = length(texture(iChannel0, vec2(float(i)/float(iters), 0.75)).r);\n        sum += last;//pow(abs(last-next), 1.0);\n        last = next;\n    }\n    return sum/float(iters);\n}\n\n\n//-----------------SIMPLEX-----------------\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n    const float F3 =  0.3333333;\n    const float G3 =  0.1666667;\n    \n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    \n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    \n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n    \n    vec4 w, d;\n    \n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    \n    w = max(0.6 - w, 0.0);\n    \n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    \n    w *= w;\n    w *= w;\n    d *= w;\n    \n    return dot(d, vec4(52.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float magnification = 1.0;\n    float scale, r;\n    \n    mat3 lastUV = mat3(0.0);\n    \n    vec2 uv0 = fragCoord.xy / iResolution.xy;\n  \tvec4 sample = texture(iChannel1, uv0);\n    vec2 uv1 = (fragCoord.xy+vec2(1.0, 0.0)) / iResolution.xy;\n    vec2 uv2 = (fragCoord.xy+vec2(0.0, 1.0)) / iResolution.xy;\n    lastUV = storeUV(uv0,uv1,uv2);\n    \n    float height = lowAverage();\n    \n   \tconst int max_i = 8;\n    int last_i;\n    float depth = 0.0;\n    seedling = time*2.0*PI+height*9.0*PI;\n    \n    scale = (5.5-height*5.0);\n    vec2 offset = sin(vec2(seedling, seedling/PI*E*GR)/4.0)*scale*.5;\n\n    init(uv0, scale, magnification, offset);\n    init(uv1, scale, magnification, offset);\n    init(uv2, scale, magnification, offset);\n    \n    for(int i = 0; i < max_i; i++)\n    {\n        last_i = i;\n    \tfloat freq = audio_freq(iChannel0, float(i)/float(max_i));\n        seedling += (1.0-freq*height)/PI*float(i+1)/float(max_i);\n        scale = 1.0;\n        offset = sin(vec2(seedling+time/PI*E*GR, seedling/PI*E*GR+time)/4.0)/2.0;\n    \ttransform(uv0, scale, magnification, offset); \n    \ttransform(uv1, scale, magnification, offset); \n    \ttransform(uv2, scale, magnification, offset); \n        \n        magnification = min(magnification, sqrt(magnification/magnify(uv0, uv1, uv2, lastUV)));\n        float delta = sphereN(uv0.xy*2.0-1.0).z;\n        lastUV = storeUV(uv0,uv1,uv2);\n    \tfloat ampl = audio_ampl(iChannel0, length(uv0*2.0-1.0));\n        depth += ampl*magnification*freq;\n        \n    }\n    //fragColor = vec4(magnification); return;\n    //fragColor = vec4(uv0, 0.0, 1.0); return;\n    \n    float ifsPowed = pow(magnification, 1.0/float(last_i+1));\n    //fragColor = vec4(ifsPowed); return;\n    \n    float sound = texture(iChannel0, saw(uv0*PI+fragCoord.xy/iResolution.xy*PI)).x;\n    //fragColor = vec4(vec3(sound), 1.0);return;\n    \n    float silence = smoothstep(0.24, .25, (sound));\n    \n    //I don't know why this works or how it seems to scale. \n    if(ifsPowed/3.0 > .23*silence) //I suppose 1/3rd the depth of the map is discarded.\n    {\n        fragColor = vec4(sample.rgb*silence, ifsPowed);// = 0.0;\n        return;\n    }\n    \n    //depth /= float(max_i);\n    float shift = time+height*5.0*PI;\n\n    float stripes = simplex3d(vec3(depth*1.0, sound, ifsPowed))*5.0*PI;\n    float black = smoothstep(0.0, .15, saw(stripes-shift));\n    float white = smoothstep(0.85, 1.0, saw(stripes-shift));\n    vec3 final = (\n        vec3(saw(stripes+shift),\n             saw(4.0*PI/3.0+stripes+shift),\n             saw(2.0*PI/3.0+stripes+shift)\n            )\n    )*black+white;\n\n    fragColor = vec4(saw((depth)));\n    fragColor = vec4(final+sound, 1.0);\n    fragColor = vec4(final*silence, 1.0)+sample*(1.0-ifsPowed);\n    fragColor.a = ifsPowed;\n    fragColor *= silence;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 3344,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ahmet-kilic/deep-house-summer-mix-2014-1"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//-----------------USEFUL-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n#define time ((saw(float(__LINE__))+.5)*(iTime/PI+12345.12345))\n#define saw(x) (acos(cos(x))/PI)\n\n\n//-----------------SIMPLEX-----------------\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n    const float F3 =  0.3333333;\n    const float G3 =  0.1666667;\n    \n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    \n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    \n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n    \n    vec4 w, d;\n    \n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    \n    w = max(0.6 - w, 0.0);\n    \n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    \n    w *= w;\n    w *= w;\n    d *= w;\n    \n    return dot(d, vec4(52.0));\n}\n\n//-----------------RENDER-----------------\n\nvec2 spiral(vec2 uv)\n{\n    float turns = 2.0;//+saw(time*1.1234)*4.0;\n    float r = pow(log(length(uv)+1.), 1.175);\n    float theta = atan(uv.y, uv.x)*turns-r*PI;\n    return vec2(saw(r*PI+iTime), saw(theta));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = fragCoord/iResolution.xy;\n    vec4 sample0 = texture(iChannel0, uv0);\n    \n    vec2 uv = uv0;\n    \n    float scale = 2.0*PI;\n    \n    float variety = simplex3d(vec3(uv*4.0, time));\n    \n    float recursion1 = clamp(saw(time+variety)*3.0-2.0, 0.0, 1.0);\n    float recursion2 = clamp(saw(time+variety)*3.0-2.0, 0.0, 1.0);\n    \n    uv = ((spiral(scale*(spiral(scale*((uv)*2.0-1.0))*2.0-1.0))*2.0-1.0)*recursion1+(1.0-recursion1)*(uv*2.0-1.0))\n        \t*(1.0-recursion2)+recursion2*(saw(uv*PI*(5.0+sin(time)*5.0))*2.0-1.0);\n    \n    vec2 direction = uv*iResolution.xy/60.0;\n    \n    vec4 sample = texture(iChannel0, uv0+direction/iResolution.xy*sample0.a);\n    \n    fragColor = (sample)*sample0.a+sample0*(1.0-sample0.a);\n    \n    float stripes = time;\n    float black = smoothstep(0.0, .15, saw(stripes));\n    float white = smoothstep(0.85, 1.0, saw(stripes));\n    vec3 final = (\n        vec3(saw(stripes*PI*2.0),\n             saw(4.0*PI/3.0+stripes*PI*2.0),\n             saw(2.0*PI/3.0+stripes*PI*2.0)\n            )\n    )*black+white;\n    \n    \n    fragColor.rgb = (fragColor.rgb-1.0/30.0)*sample0.a+fragColor.rgb*(1.0-sample0.a);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}