{
    "Shader": {
        "info": {
            "date": "1553550154",
            "description": "Variant on [url]https://www.shadertoy.com/view/Ws2XWz[/url] with each 'circle' a uniform colour.\n\nMouse to changes spiral angle.",
            "flags": 0,
            "hasliked": 0,
            "id": "3sSSD1",
            "likes": 20,
            "name": "Complex Atanh Circle Spiral 2",
            "published": 3,
            "tags": [
                "circles",
                "spiral",
                "complex",
                "atanh"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 693
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// Complex atanh generating a spiral of hexagonally touching 'circles'.\n////////////////////////////////////////////////////////////////////////////////\n\nfloat A = 3.0, B = 17.0; // Rotation angle is atan(B,A)\nfloat scale = 2.0;\nfloat PI = 3.14159;\n\n// Complex functions\nvec2 cmul(vec2 z, vec2 w) {\n  return mat2(z,-z.y,z.x)*w;\n}\n\nvec2 cinv(vec2 z) {\n  float t = dot(z,z);\n  return vec2(z.x,-z.y)/t;\n}\n\nvec2 cdiv(vec2 z, vec2 w) {\n  return cmul(z,cinv(w));\n}\n\nvec2 clog(vec2 z) {\n  float r = length(z);\n  return vec2(log(r),atan(z.y,z.x));\n}\n\n// Inverse hyperbolic tangent \nvec2 catanh(vec2 z) {\n  return 0.5*clog(cdiv(vec2(1,0)+z,vec2(1,0)-z));\n}\n\n// Iq's hsv function, but just for hue.\nvec3 h2rgb(float h ) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\n// Shane's distance function showing the hexagonal cells.\nfloat dist(vec2 p){\n  float d0 = length(p);\n  p = abs(p);\n  float d1 = max(p.y*.8660254 + p.x*.5, p.x) + .025;\n  return mix(d0,d1,0.5-0.5*cos(0.2*PI*iTime));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  float X = sqrt(3.0);\n  vec2 z = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  z *= scale;\n\n  if (iMouse.x > 0.0) {\n    // Get angle from mouse position\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    m *= 20.0;\n    A = floor(m.x), B = floor(m.y);\n  }\n  vec2 rot = vec2(X*A,B);\n  // Some alternative functions\n  //z = clog(z);\n  //z = 2.0*(3.0*catanh(z) - 2.0*catanh(cmul(vec2(cos(0.1*iTime),sin(0.1*iTime)), z)));\n  //vec2 delta1 = (1.0-cos(0.15*iTime))*vec2(sin(0.25*iTime),cos(0.25*iTime));\n  //vec2 delta2 = vec2(3.0*sin(0.3*iTime),1.5*sin(0.2*iTime));\n  //vec2 delta3 = vec2(0);\n  //z = clog(z+delta1) - clog(z+delta2) + clog(z+delta3);\n  z = 2.0*catanh(z+vec2(0,1))+2.0*catanh(-z+vec2(0,1));\n  z /= PI;\n  float eps = length(rot)*fwidth(z.x);\n  z = cmul(rot,z);\n  z += iTime*vec2(1,0);\n  // Divide into regions, 2 across, 2*sqrt(3) high\n  z.y /= X;\n  vec2 index = round(z);\n  z -= index;\n  z.y *= X;\n  // z now relative to centre of region\n  vec2 P = vec2(1,X); // upper right corner of region\n  // Alternate regions are reversed left to right\n  bool flip = mod(index.x + index.y, 2.0) == 0.0;\n  if (flip) z.x = -z.x;\n  bool lower = dot(z,P) < 0.0;\n  // Adjust indexes\n  if (flip == lower) index.x++;\n  if (lower) index.y--;\n  // Lower half of region has circle centred on lower left corner\n  //float r = lower ? distance(-0.5*P,z) : distance(0.5*P,z);\n  float r = lower ? dist(-0.5*P - z) : dist(0.5*P - z);\n  float h = index.y/(2.0*(A==0.0 ? 1.0 : A)); // Color for row\n  vec3 col = h2rgb(h);\n  col = mix(col,vec3(0.01),r);\n  col = mix(col,vec3(0.05),smoothstep(-eps,eps,r-1.0));\n  // Uncomment next line to see fundamental regions\n  //col *= 0.8+0.2*smoothstep(0.05-eps,0.05+eps,min(0.5-abs(z.x),0.5*X-abs(z.y)));\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}