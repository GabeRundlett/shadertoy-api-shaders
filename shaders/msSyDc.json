{
    "Shader": {
        "info": {
            "date": "1692491684",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n\nsimple truchet - mouseable polar warp",
            "flags": 0,
            "hasliked": 0,
            "id": "msSyDc",
            "likes": 24,
            "name": "Year of Truchets #052",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "truchet"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 295
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #052\n    08/19/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n    see all https://www.shadertoy.com/user/byt3_m3chanic/sort=newest\n    \n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n#define PI          3.141592653\n#define PI2         6.283185307\n#define hue(a) .55 + .45 * sin(PI * (a+T*.5)  * vec3(1.,.75,.25) + vec3(0.051,0.663,0.973));\n\nfloat tspeed=0.,tmod=0.,ga1=0.,ga2=0.,ga3=0.,ga4=0.;\nfloat db = 2.;\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21(vec2 a) {return fract(sin(dot(a,vec2(27.609,57.583)))*43758.5453);}\nfloat lsp(float b, float e, float t){return clamp((t-b)/(e-b),0.,1.); }\nfloat eoc(float t){return (t = t-1.)*t*t+1.; }\nfloat box(vec2 p, vec2 b){ vec2 d = abs(p)-b;return length(max(d,0.))+min(max(d.x,d.y),0.);}\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n    mat2 r45 = rot(.785398);\n    mat2 r4z = rot(-.785398);\n    tspeed = T*.5;\n    tmod = mod(tspeed,12.);\n    \n    float t1 = lsp(00.,02.,tmod);\n    float t2 = lsp(03.,05.,tmod);\n    float t3 = lsp(06.,08.,tmod);\n    float t4 = lsp(09.,11.,tmod);\n    \n    t1 = eoc(t1); t1 = t1*t1*t1;\n    t2 = eoc(t2); t2 = t2*t2*t2;\n    t3 = eoc(t3); t3 = t3*t3*t3;\n    t4 = eoc(t4); t4 = t4*t4*t4;\n    \n    ga1 = (t1*db)-(t3*db);\n    ga2 = (t2*db)-(t4*db);\n    ga3 = (t2*db)-(t3*db);\n    ga4 = (t3*db)-(t4*db);\n    \n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y);\n    vec2 vv = uv;\n\n    if(vv.x<.0) { uv*=5.; } else { uv.x-=.5; }\n\n    // mouse //\n    float x = M.xy==vec2(0) ? ga1 : ga1-(M.y/R.y*.5-.25);\n    float y = M.xy==vec2(0) ? ga2 : ga2-(M.x/R.x*.5-.25);\n\n    uv *= rot(T*.1+y+(M.y/R.y)*PI2);\n    \n    if(vv.x>.0) uv = vec2(log(length(uv)), atan(uv.y, uv.x))*.955;\n\n    //other good values//2.546;//1.273;//.955;//.636;//.3175;\n    \n    uv.x+=x+(M.x/R.x)*PI2;\n\n    float px = fwidth(uv.x); \n\n    // background patterns\n    float sc = vv.x>0. ? 5. : 15.;\n    vec2 f = fract((uv+vec2(T*.1,0))*sc)-.5;\n\n    float bp= length(f.x)-.25;\n    vec3  C = mix(vec3(.005),vec3(0.05),smoothstep(px,-px,bp));\n\n    vec2 id = floor(uv), q = fract(uv)-.5;\n    float hs = hash21(id.xy);\n    float ck = mod(id.x+id.y,2.)*2.-1.;\n    \n    if(hs>.5) q = vec2(-q.y,q); \n\n    float wd = .015, mv = .15+.1*sin(ga3+ga4);\n    vec2 q2 = q;\n\n    vec2 pq = length(q.xy-vec2(-.5,.5))<length(q.xy+vec2(-.5,.5))? q.xy-vec2(-.5,.5) : q.yx+vec2(-.5,.5);\n  \n    pq *= r45;\n    q2 *= r45;\n \n    // main pattern\n    float d = length(pq.x);\n    d=abs(d)-mv;\n\n    // posts\n    float b = length(abs(q)-.5)-(mv*1.5);\n    d = min(b,d);\n    d = max(d,-(b+.075));\n    float md = d;\n    \n    d=abs(d)-wd;\n    \n    // grid lines\n    float d2 = abs(max(abs(q.x),abs(q.y))-.5)-.01;\n    d2 = max(d2,-(b+.05));\n    vec3 clr = vec3(.4);\n    vec2 dq =q*r4z;\n    dq.x+=T*.1;\n    dq=fract(dq*5.)-.5;\n\n    vec3 clh = hue(uv.x*.3);\n    vec3 clx = (dq.x*dq.y>0.) ? clh : vec3(.0025);\n    \n    // color mixdown\n    C = mix(C,vec3(.15),smoothstep(px,-px,d2));\n\n    C = mix(C,C*.35,smoothstep(.075+px,-px,d-.015));\n    C = mix(C,clr,smoothstep(px,-px,d));\n    C = mix(C,vec3(.0025),smoothstep(px,-px,md));\n    C = mix(C,clx,smoothstep(px,-px,md+.075));\n    if(vv.x >-.004 && vv.x<.004) C=vec3(.2);\n    // gamma and output\n    C = pow(C,vec3(.4545));\n    O = vec4(C,1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}