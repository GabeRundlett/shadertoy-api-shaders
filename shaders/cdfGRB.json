{
    "Shader": {
        "info": {
            "date": "1666296421",
            "description": "another basic mario",
            "flags": 0,
            "hasliked": 0,
            "id": "cdfGRB",
            "likes": 5,
            "name": "another basic mario",
            "published": 3,
            "tags": [
                "anotherbasicmario"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "///*----por jorgeflores\n///---20-oct-2022\n///---referencia el grande comunidad de shadertoy\n\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n///----leeer mario\nconst int MARIO_BITMAP[256] = int[](\n6,6,6,6,1,1,1,1,1,1,1,1,6,6,6,6,\n6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,6,\n6,6,6,0,0,0,0,3,3,3,3,5,3,6,6,6,\n6,6,0,3,0,3,3,3,3,3,3,5,3,3,3,6,\n6,6,0,3,0,0,3,3,3,3,3,3,5,3,3,3,\n6,6,0,0,3,3,3,3,3,3,5,5,5,5,5,6,\n6,6,6,6,3,3,3,3,3,3,3,3,3,3,6,6,\n6,6,6,1,1,2,1,1,1,1,2,1,6,6,6,6,\n6,6,1,1,1,2,1,1,1,1,2,1,1,1,6,6,\n6,1,1,1,1,2,2,2,2,2,2,1,1,1,1,6,\n6,3,3,1,2,4,2,2,2,2,4,2,1,3,3,6,\n6,3,3,3,2,2,2,2,2,2,2,2,3,3,3,6,\n6,3,3,2,2,2,2,2,2,2,2,2,2,3,3,6,\n6,6,6,2,2,2,6,6,6,6,2,2,2,6,6,6,\n6,6,0,0,0,6,6,6,6,6,6,0,0,0,6,6,\n6,0,0,0,0,6,6,6,6,6,6,0,0,0,0,6\n);\n\nint readMarioBitMap(in vec2 uv) \n{ return MARIO_BITMAP[int(uv.y) * 16 + int(uv.x)]; }\n\nvec4 mario(in vec2 uv)\n{   switch (readMarioBitMap(uv)) \n     {  case 0: return vec4(0.627, 0.408, 0.0,1.0);\n        case 1: return vec4(1.0,0.0,0.0,1.0);\n        case 2: return vec4(0,0.698,0.922,1.0);\n        case 3: return vec4(0.976,0.804,0.541,1.0);\n        case 4: return vec4(0.976,0.957,0,1.0);\n        case 5: return vec4(0,0,0,1.0);\n        default: return vec4(0);\n    }\n}\n\nvec4 GetColorMario(int opc) \n{   vec4 col=vec4(0.0);\n    switch(opc)\n     {\n        case 0: return vec4(0.627, 0.408, 0.0,1.0);\n        case 1: return vec4(1.0,0.0,0.0,1.0);\n        case 2: return vec4(0,0.698,0.922,1.0);\n        case 3: return vec4(0.976,0.804,0.541,1.0);\n        case 4: return vec4(0.976,0.957,0,1.0);\n        case 5: return vec4(0,0,0,1.0);\n        default: return vec4(0);\n    }\n    return  col;\n}\n\n\nfloat[256] Ladrillo= float[256](\n0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,\n0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,\n0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,\n1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,\n0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,\n0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,\n0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,\n1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,\n0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,\n0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,\n0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,\n1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,\n0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,\n0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,\n0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,\n1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.\n);\n\nfloat[256] Bloque00= float[256](\n0.,2.,2.,2.,2.,2.,2.,2.,2.,2.,2.,2.,2.,2.,2.,0.,\n2.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,3.,0.,\n2.,1.,1.,0.,1.,1.,1.,1.,1.,1.,1.,1.,0.,1.,3.,0.,\n2.,1.,1.,0.,1.,1.,1.,1.,1.,1.,1.,1.,0.,1.,3.,0.,\n2.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,3.,0.,\n2.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,3.,0.,\n2.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,3.,0.,\n2.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,3.,0.,\n2.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,3.,0.,\n2.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,3.,0.,\n2.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,3.,0.,\n2.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,3.,0.,\n2.,1.,1.,0.,1.,1.,1.,1.,1.,1.,1.,1.,0.,1.,3.,0.,\n2.,1.,1.,0.,1.,1.,1.,1.,1.,1.,1.,1.,0.,1.,3.,0.,\n2.,3.,3.,3.,3.,3.,3.,3.,3.,3.,3.,3.,3.,3.,3.,0.,\n0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.\n);\n\nfloat[256] Bloque01= float[256](\n2.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,\n0.,2.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,1.,\n0.,0.,2.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,1.,1.,\n0.,0.,0.,2.,0.,0.,0.,0.,0.,0.,0.,0.,1.,1.,1.,1.,\n0.,0.,0.,0.,2.,0.,0.,0.,0.,0.,0.,1.,1.,1.,1.,1.,\n0.,0.,0.,0.,3.,3.,3.,3.,3.,3.,1.,1.,1.,1.,1.,1.,\n0.,0.,0.,0.,3.,3.,3.,3.,3.,3.,1.,1.,1.,1.,1.,1.,\n0.,0.,0.,0.,3.,3.,3.,3.,3.,3.,1.,1.,1.,1.,1.,1.,\n0.,0.,0.,0.,3.,3.,3.,3.,3.,3.,1.,1.,1.,1.,1.,1.,\n0.,0.,0.,0.,3.,3.,3.,3.,3.,3.,1.,1.,1.,1.,1.,1.,\n0.,0.,0.,0.,3.,3.,3.,3.,3.,3.,2.,1.,1.,1.,1.,1.,\n0.,0.,0.,0.,1.,1.,1.,1.,1.,1.,1.,2.,1.,1.,1.,1.,\n0.,0.,0.,1.,1.,1.,1.,1.,1.,1.,1.,1.,2.,1.,1.,1.,\n0.,0.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,2.,1.,1.,\n0.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,2.,1.,\n1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,1.,2.\n);\n\nvec3 RGB3(float r ,float g, float b)\n{ return vec3(r/255.,g/255.,b/255.);}\n\nvec3 GetColorLadrillo(int opc)\n{   switch(opc)\n    {   case 0:return RGB3(224., 95., 16.);\n        case 1:return RGB3(0.,0.,15.);\n        case 2:return RGB3(0.,0.,0.);\n    }\n    return vec3(1.0);\n}\n\nvec3 GetColorBloque00(int opc)\n{   switch(opc)\n    {   case 0:return RGB3(0.,0.,0.);\n        case 1:return RGB3(209.,107.,32.);\n        case 2:return RGB3(255.,178.,132.);\n        case 3:return RGB3(179.,113.,63.);\n    }\n    return vec3(1.0);\n}\n\nvec3 GetColorBloque01(int opc)\n{   switch(opc)\n    {   case 0:return RGB3(243.,173.,121.);\n        case 1:return RGB3(6.,0.,0.);\n        case 2:return RGB3(182.,106.,48.);\n        case 3:return RGB3(209.,107.,32.);\n    }\n    return vec3(1.0);\n}\n\nvec3 PonerLadrillo(vec2 uv, ivec2 pos, vec3 col)\n{   int opc;\n    ivec2 pix = ivec2(uv*256.)+ivec2(-pos.x*16,-16*pos.y);\n     pix.y=-pix.y+15;\n    if (min(pix.x, pix.y) >= 0 && max(pix.x, pix.y) < 16) \n    {   opc=int( Ladrillo[pix.x+pix.y*16] );    \n        col=GetColorLadrillo(opc); \n    }\n    return col;\n}\n\n\nvec3 PonerBloque00(vec2 uv, ivec2 pos, vec3 col)\n{\n    int opc;\n    ivec2 pix = ivec2(uv*256.)+ivec2(-pos.x*16,-16*pos.y);\n     pix.y=-pix.y+15;\n    if (min(pix.x, pix.y) >= 0 && max(pix.x, pix.y) < 16) \n    {   opc=int( Bloque00[pix.x+pix.y*16] );    \n        col=GetColorBloque00(opc); \n    }\n    return col;\n}\n\nvec3 PonerBloque01(vec2 uv, ivec2 pos, vec3 col)\n{   int opc;\n    ivec2 pix = ivec2(uv*256.)+ivec2(-pos.x*16,-16*pos.y);\n     pix.y=-pix.y+15;\n     \n    if (min(pix.x, pix.y) >= 0 && max(pix.x, pix.y) < 16) \n    {   opc=int( Bloque01[pix.x+pix.y*16] );    \n        col=GetColorBloque01(opc); \n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/max(iResolution.x,iResolution.y)*1.0;  ///original\n    vec3 col=RGB3(96.,148.,252.);\n    \n   \n    float inct=mod(iTime,16.);\n    int incy=8;\n    \n    int incx=int(-floor(mod(iTime,16.))* 16.0);\n    ivec2 pix = ivec2(uv*256.)+ivec2( incx,-16*incy);\n    int opc;\n    \n    \n    if (min(pix.x, pix.y) >= 0 && max(pix.x, pix.y) < 16) \n    {\n        opc=int( Ladrillo[pix.x+pix.y*16] );    \n        col=GetColorLadrillo(opc);\n    } else {\n        if(-pix.y>16*6)\n        {\n            col=vec3(0.0);\n        }\n        else\n        { col=RGB3(96.,148.,252.); }\n        \n    }\n    \n    for(int j=0;j<16;j++)\n    { col= PonerLadrillo(uv,ivec2(j,2),col);}\n    \n    col= PonerBloque00(uv,ivec2(6,3),col);\n    col= PonerBloque00(uv,ivec2(7,3),col);\n    col= PonerBloque00(uv,ivec2(8,4),col);\n    col= PonerBloque01(uv,ivec2(9,4),col);\n    col= PonerBloque01(uv,ivec2(10,4),col);\n    \n    \n    int posx=int(floor(abs(3.*16.0*sin(iTime*3.0))));\n    \n     pix = ivec2(uv*256.)+ivec2(-3*16,-16*3-posx );\n    if (min(pix.x, pix.y) >= 0 && max(pix.x, pix.y) < 16) \n    {\n        pix.y=-pix.y+15;\n        opc=int( MARIO_BITMAP[pix.x+pix.y*16] );\n        vec4 fcol=GetColorMario(opc);\n         if (fcol.w == 1.0) \n         col=fcol.xyz;\n    }\n    \n    float d2= sdCircle(uv-vec2(0.7,0.5), 0.05 );\n    \n    if(1.0*sin(iTime*10.0)>0.0)\n    {\n        uv.x-=0.1;uv.y-=0.05;\n        float d1a= sdSegment(uv, vec2(0.0,0.0), vec2(0.5,0.5) );\n        float d1b= sdSegment(uv, vec2(0.0,0.5), vec2(0.5,0.0) );\n        col= DrawFigSolo(vec3(1.0,0.0,0.0), col, abs(d1a)-0.01);\n        col= DrawFigSolo(vec3(1.0,0.0,0.0), col, abs(d1b)-0.01);\n    }   \n    col= DrawFigBorde(vec3(1.0,1.0,0.0), col, d2);\n    \n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}