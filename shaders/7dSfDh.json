{
    "Shader": {
        "info": {
            "date": "1646098150",
            "description": "i struggle with backgrounds a bit. looks best in fullscreen + it almost looks handdrawn which is nice",
            "flags": 0,
            "hasliked": 0,
            "id": "7dSfDh",
            "likes": 10,
            "name": "fraccy fractal",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 262
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nmat2 Rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\n/*\n//#define tabs(x) 1.-min(vec2(0), abs(x - 0.1))\nvec2 tabs(vec2 uv) {\n    vec2 m = min(vec2(0), abs(uv) - 0.1);\n    return sqrt(uv * uv * (1. - m));\n}\n//#define tabs(x) sqrt(x * x * (1. - min(vec2(0), abs(x) - vec2(3)))\n//*/\n\nvec2 tabs(vec2 x, float m, float o) {\n    return abs(x) + m * thc(0.01, 2.5 * abs(x) + o);\n}\n\n//rename the original mainImage to render\nvoid render( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 ouv = uv;\n    \n    uv.y += 0.03 * cos(iTime);\n    \n    float r = 0.4;\n    float th = 0.01;\n    \n    uv *= 1.54;\n\n    float d = 1.;//length(uv);\n    float k = 1. / iResolution.y;\n    float s = smoothstep(-k, k, -abs(d - r) + th);\n    \n    float m = 0.25;\n    float n = 8.;\n    float a = -0.2 * iTime;\n    for (float i = 0.; i < n; i++) {\n        if (d >= r + th) {\n            a += 0.2 * iTime;\n            uv *= Rot(2. * pi * i / n + a);\n            uv = tabs(uv, 0.5 * (1. + thc(4., 2. * pi * i / n + 0.5 * iTime)) * m, 2. * pi * i / n) - m;\n            d = length(uv);\n            s = smoothstep(-k, k, -abs(d - r) + th);\n            \n        } \n        \n        m *= 0.5;\n        r += 0.04;\n        r *= 0.5;\n    }\n    \n    vec3 col = vec3(s);\n    col *= 2. * exp(-2.1 * pow(dot(ouv, ouv), 0.125));\n    vec3 e = vec3(1);\n    vec3 orange = pal(-ouv.y * 0.1 + length(uv) * 0.4- 0.025, e, e, e, 0.8 * vec3(0,1,2)/3.);\n    col *= orange;\n    col += 0.13;\n    //if (col.x <= 0.15)\n     //   col += (0.56-exp(-3. * length(ouv))) * pal(0.0, e, e, e, 0.8 * vec3(0,1,2)/3.);\n    if (col.x <= 0.13) {\n        float val = 0.12 + 0.12 * thc(16.,51. * ouv.y + cos(4.* ouv.x + iTime));\n        //col += val;\n       // col *= 0.7 * orange;\n        //col = mix(vec3(0.13), col, smoothstep(0.4 - val, 0.6 + val, length(ouv)));\n    }\n    fragColor = vec4(col,1.0);\n}\n\n#define AA 3.0\nvoid mainImage(out vec4 O,vec2 C){\n    float px=1./AA,i,j;vec4 cl2,cl;\n    if(AA==1.){render(cl,C);O=cl;return;}\n    for(i=0.;i<AA;i++){for(j=0.;j<AA;j++){\n    vec2 C2 = vec2(C.x+px*i,C.y+px*j);\n    render(cl2,C2);cl+=cl2;\n    //If the shader has global variables they need to be reset here\n    }}cl/=AA*AA;O=cl;\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}