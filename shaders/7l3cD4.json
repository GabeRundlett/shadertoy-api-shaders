{
    "Shader": {
        "info": {
            "date": "1659814349",
            "description": "procedural vein generator made for my procedural eye (https://www.shadertoy.com/view/NtccWN)",
            "flags": 0,
            "hasliked": 0,
            "id": "7l3cD4",
            "likes": 4,
            "name": "vein generator",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "Artemis152",
            "viewed": 358
        },
        "renderpass": [
            {
                "code": "#define THIC 0.3\n\nvec2 rotate(vec2 v, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * v;\n}\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n    float fl = floor(p);\n    float fc = fract(p);\n    return mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat getLine(vec2 uv, vec2 offset, float rot)\n{\n    //rot = radians(rot);\n    uv = rotate(uv, radians(rot));\n    uv *= 20.;\n    uv += offset;\n    float n = noise(uv*vec2(.9, .4));\n    uv.y += n - .4;\n\n    float col = smoothstep(THIC, -.15, abs(uv.y));\n        \n    return col;\n}\n\nfloat getVein(vec2 uv)\n{\n    float rot = iTime * 20.;\n    \n    float f = 0.;\n    \n    for(float i = 0.; i < 65.; i += 0.9)\n    {\n        f += getLine(uv, vec2(.5 + i, noise(i) * 35. - 25.), rot + (i*15.9)/1.43);\n    }\n    \n    f = min(f, 1.);\n    \n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5* iResolution.xy) / iResolution.y;\n    \n    vec3 col = mix(vec3(.4, 0.,0.), vec3(.6, 0.1, .13), getVein(uv)) * 1.4;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}