{
    "Shader": {
        "info": {
            "date": "1705077001",
            "description": "Closed-form expressions for quintic Hermite splines.\nPlotted are kernels for 4-tap (red) and 6-tap (green) versions.",
            "flags": 0,
            "hasliked": 0,
            "id": "XflXz7",
            "likes": 5,
            "name": "Quintic Hermite spline",
            "published": 3,
            "tags": [
                "spline",
                "interpolation",
                "quintic",
                "hermite"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 242
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Hermite spline interpolates a function on interval\n// given the values of the function and several of its\n// derivatives at interval's endpoints. Probably the\n// most well-known example is https://en.wikipedia.org/wiki/Cubic_Hermite_spline.\n// Alternatively, you can use several discrete samples (taps)\n// of the function to compute the approximations of\n// the derivatives using finite differences method\n// (https://en.wikipedia.org/wiki/Finite_difference_coefficient)\n// and use those to construct the Hermite spline (e.g. Catmull-Rom\n// spline is this construction for Cubic Hermite spline).\n// \n// This shader provides expressions for quintic Hermite spline\n// in both \"derivatives\" and \"taps\" formulations (as well as\n// corresponding kernels).\n//\n// Both 4-taps and 6-taps versions are provided.\n// NOTE: given that quintic Hermite spline has 6 degrees\n// of freedom (its 6 inputs: values f, f', f'' at both endpoints),\n// it is surprising that a valid expression can be obtained\n// using only 4 taps, and that it does not devolve into a Catmull-Rom\n// spline. Still not sure what this version actually is. Both 4-taps\n// and 6-taps versions are C2-continuous, unless I'm mistaken.\n// No further analysis (e.g. order of accuracy) has been carried out.\n// Edit: added some data on order of accuracy, see the shader comments.\n\n// Basis functions H0..H5 for expressing Hermite spline as\n//     H0(t)*f(0)+H1(t)*f'(0)+H2(t)*f''(0)+H3(t)*f(1)+H4(t)*f'(1)+H5(t)*f''(1)\n// see e.g. https://www.rose-hulman.edu/~finn/CCLI/Notes/day09.pdf\n// Note that\n//     H5(t)= H0(1-t)\n//     H4(t)=-H1(1-t)\n//     H3(t)= H2(1-t)\nvoid quintic_basis(float t,out float H[6])\n{\n    H[0]=1.0+t*t*t*(-10.0+t*(15.0+t*-6.0));\n    H[1]=t*(1.0+t*t*(-6.0+t*(8.0+t*-3.0)));\n    H[2]=t*t*(0.5+t*(-1.5+t*(1.5+t*-0.5)));\n    H[3]=t*t*t*(0.5+t*(-1.0+t*0.5));\n    H[4]=t*t*t*(-4.0+t*(7.0+t*-3.0));\n    H[5]=t*t*t*(10.0+t*(-15.0+t*6.0));\n}\n\n// Weights W0..W3 for 4-taps (P0..P3) quintic Hermite spline:\n//     W0(t)*P0+W1(t)*P1+W2(t)*P2+W3(t)*P3\nvoid quintic4(float t,out float W[4])\n{\n    W[0]=t*(-0.5+t*(0.5+t*(1.5+t*(-2.5+t*1.0))));\n    W[1]=1.0+t*t*(-1.0+t*(-4.5+t*(7.5+t*-3.0)));\n    W[2]=t*(0.5+t*(0.5+t*(4.5+t*(-7.5+t*3.0))));\n    W[3]=t*t*t*(-1.5+t*(2.5+t*-1.0));\n}\n\n// quintic4 expressed as a filter kernel. Returns\n//     quintic4(abs(t))[1],   for abs(t)<=1,\n//     quintic4(abs(t)-1)[0], for 1<abs(t)<=2,\n//     0,                     tor abs(t)>2.\nfloat quintic4_kernel(float t)\n{\n    t=abs(t);\n    if(t>=2.0) return 0.0;\n    return t<=1.0?\n        1.0+t*t*(-1.0+t*(-4.5+t*(7.5+t*-3.0))):\n        -4.0+t*(18.0+t*(-29.0+t*(21.5+t*(-7.5+t*1.0))));\n}\n\n// Weights W0..W5 for 6-taps (P0..P5) quintic Hermite spline:\n//     W0(t)*P0+W1(t)*P1+W2(t)*P2+W3(t)*P3+W4(t)*P4+W5(t)*P5\nvoid quintic6(float t,out float W[6])\n{\n    W[0]=t*(2.0+t*(-1.0+t*(-9.0+t*(13.0+t*-5.0))))/24.0;\n    W[1]=t*(-16.0+t*(16.0+t*(39.0+t*(-64.0+t*25.0))))/24.0;\n    W[2]=(12.0+t*t*(-15.0+t*(-35.0+t*(63.0+t*-25.0))))/12.0;\n    W[3]=t*(8.0+t*(8.0+t*(33.0+t*(-62.0+t*25.0))))/12.0;\n    W[4]=t*(-2.0+t*(-1.0+t*(-33.0+t*(61.0+t*-25.0))))/24.0;\n    W[5]=t*t*t*(7.0+t*(-12.0+t*5.0))/24.0;\n}\n\n// quintic6 expressed as a filter kernel. Returns\n//     quintic6(abs(t))[2],   for abs(t)<=1,\n//     quintic6(abs(t)-1)[1], for 1<abs(t)<=2,\n//     quintic6(abs(t)-2)[0], for 2<abs(t)<=3,\n//     0,                     tor abs(t)>3.\nfloat quintic6_kernel(float t)\n{\n    t=abs(t);\n    if(t>=3.0) return 0.0;\n    return\n         t<=1.0?(12.0+t*t*(-15.0+t*(-35.0+t*(63.0+t*-25.0))))/12.0:\n        (t<=2.0?(-96.0+t*(450.0+t*(-735.0+t*(545.0+t*(-189.0+t*25.0)))))/24.0:\n                (432.0+t*(-918.0+t*(765.0+t*(-313.0+t*(63.0+t*-5.0)))))/24.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy=3.0*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    xy.y=(xy.y+1.0)/4.0;\n    vec3 col=vec3(0.25);\n    float d;\n    d=xy.y-quintic4_kernel(xy.x);\n    col+=vec3(0.7,0.2,0.2)*smoothstep(1.5*fwidth(d),0.0,abs(d));\n    d=xy.y-quintic6_kernel(xy.x);\n    col+=vec3(0.2,0.7,0.2)*smoothstep(1.5*fwidth(d),0.0,abs(d));\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}