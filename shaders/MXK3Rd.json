{
    "Shader": {
        "info": {
            "date": "1718144226",
            "description": "A simulation of slime mold inspired by Sebastian Lague's video on slime mold and ant colony simulation \nhttps://www.youtube.com/watch?v=X-iSQQgOd1A",
            "flags": 32,
            "hasliked": 0,
            "id": "MXK3Rd",
            "likes": 9,
            "name": "Slime Mold 0 - DJ",
            "published": 3,
            "tags": [
                "simulation",
                "slimemold",
                "slimemold"
            ],
            "usePreview": 0,
            "username": "DjBlueBear",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "const int KEY_1 = 49;\nconst int KEY_2 = 50;\nconst int KEY_3 = 51;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 bufferA = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 bufferB = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    vec4 bufferC = texelFetch(iChannel2, ivec2(fragCoord), 0);\n\n    fragColor = vec4(bufferB.x + bufferB.y, pow(bufferC.w / maxTrail, 0.5), pow(bufferA.w / maxTrail, 0.5), 0.0);\n    //fragColor = bufferA;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct agent{\n    vec2 pos;\n    float angle;\n};\n\nconst float seedOffset = 0.0;\n\nconst uint agentNum = 1000u;\n\nconst float decayRate = 1.01;//keep above 1, 1.03 is good\n\nconst float agentTrailWeight = 1.0;\n\nconst float sensorSize = 1.0;//keep low for good preformance\n\nconst float sensorForwardBias = 2.0;\n\nconst float sensorDistance = 16.0;//higher values create a denser network of agents\n\nconst float sensorGap = 2.0;\n\nconst float randomWalk = 0.1;\n\nconst float trailSize = 1.0;//keep above 0.1 or it will die in the brain\n\nconst float angleLimit = 4.0;//this is not in degrees or radians, it is not a measure of angle, check the code to see what it is\n//the higher this number is the narrower the angle the agents can move ( keep at 16.0) (<- don't listen to them)\nconst vec2 startingPos = vec2(0.5,0.5);\n\nconst float startingRad = 1.0;\n\nconst float maxInfluence = 8.0;//the maximum ammount trails affect the path of the agents\n\nconst float cookieSize = 4.0;\n\nconst float cookieWeight = 800.0;\n\nconst float maxTrail = 16.0;\n\n//Paramaters ^^^^^^^^^^^^^^^^^^^^\n\nconst float pi = 3.141592653;\nconst float deg2Rad = pi / 180.0;\n\nuint hash(inout uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\nfloat rand(inout uint seed)\n{\n    return fract(float(hash(seed))/ 4294967296.0);//4294967296 2 ^ 32 / 32 bit unsigned integer limit\n}\n\nfloat randNorm(inout uint seed)\n{   \n    float theta = 2.0 * pi * rand(seed);\n    float rho = sqrt( -2.0 * log(rand(seed)));\n    return rho * cos(theta);\n}\n\nvec3 randVec3(inout uint seed)\n{\n    float rand0 = rand(seed);\n    float rand1 = rand(seed);\n    float rand2 = rand(seed);\n\n    return vec3(rand0, rand1, rand2);\n}\n\nvec3 randVec3Norm(inout uint seed)\n{\n    float rand0 = randNorm(seed);\n    float rand1 = randNorm(seed);\n    float rand2 = randNorm(seed);\n\n    return normalize(vec3(rand0, rand1, rand2));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nvec2 loopCheck(in vec2 p)\n{\n    return mod(p, iResolution.xy);\n}\n// xy agent pos, z agent angle, w trail,\nvoid updateAgent(inout agent current, inout uint seed)\n{\n    float angle = current.angle;\n\n    vec2 forward = vec2(cos(angle), sin(angle));\n\n    vec2 right = vec2(forward.y, -forward.x);\n\n    current.pos += forward;\n    \n    current.pos = mod(current.pos, iResolution.xy);\n    \n    vec2 pos = current.pos;\n    \n    vec2 forwardOffset = forward * (sensorDistance + sensorForwardBias);\n    vec2 rightOffset = right * sensorGap + forward * sensorDistance;\n    vec2 leftOffset = -right * sensorGap + forward * sensorDistance;\n\n    float forwardSample = 0.0;\n    float rightSample = 0.0;\n    float leftSample = 0.0;\n\n    float sensorCount = 0.0;\n    for(float x = -sensorSize / 2.0; x < sensorSize / 2.0; x+= max(1.0, sensorSize / 8.0))\n    {\n        for(float y = -sensorSize / 2.0; y < sensorSize / 2.0; y+= max(1.0, sensorSize / 8.0))\n        {\n            sensorCount += 1.0;\n            forwardSample += texelFetch(iChannel0, ivec2(floor(loopCheck(pos + forwardOffset + vec2(x,y)))), 0).w;\n            rightSample += texelFetch(iChannel0, ivec2(floor(loopCheck(pos + rightOffset + vec2(x,y)))), 0).w;\n            leftSample += texelFetch(iChannel0, ivec2(floor(loopCheck(pos + leftOffset + vec2(x,y)))), 0).w;\n            forwardSample -= texelFetch(iChannel2, ivec2(floor(loopCheck(pos + forwardOffset + vec2(x,y)))), 0).w;\n            rightSample -= texelFetch(iChannel2, ivec2(floor(loopCheck(pos + rightOffset + vec2(x,y)))), 0).w;\n            leftSample -= texelFetch(iChannel2, ivec2(floor(loopCheck(pos + leftOffset + vec2(x,y)))), 0).w;\n        }\n    }\n\n    forwardSample /= sensorCount;\n    rightSample /= sensorCount;\n    leftSample /= sensorCount;\n    \n    float forwardWeight = 1.0 + min(forwardSample, maxInfluence); \n\n    float rightWeight = min(rightSample, maxInfluence) - min(leftSample, maxInfluence);\n\n    float randomAngle = (rand(seed) * 2.0 - 1.0) * pi * randomWalk;\n\n    current.angle -= clamp(rightWeight / forwardWeight, -pi / (1.0 + angleLimit), pi / (1.0 + angleLimit)) + randomAngle;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float safeFrame = mod(float(iFrame + 1) + iDate.w, 1000.0);//(to avoid overflow of the seed)\n    uint seed = uint((fragCoord.x * iResolution.y + fragCoord.y) * safeFrame + seedOffset);\n    \n    uint id = uint(floor(fragCoord.y) * iResolution.x + floor(fragCoord.x));\n\n    vec4 buffer = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 bufferB = texelFetch(iChannel1, ivec2(fragCoord), 0);\n\n    float trail = buffer.w / decayRate;\n\n    if(distance(fragCoord, iMouse.xy) <= cookieSize)\n    {\n        trail += cookieWeight;\n    }\n    \n    if(bufferB.x > 0.0)\n    {\n        trail += agentTrailWeight;\n    }\n    \n    if(iFrame == 1)\n    {\n        trail += 0.01;\n    }\n    \n    trail = min(trail, maxTrail);\n\n    if(id > agentNum)\n    {\n        fragColor = vec4(0.0,0.0,0.0,trail);\n        return;\n    }\n\n    if(iFrame == 1)\n    {\n        float angle = rand(seed) * pi * 2.0;\n        float dist = sqrt(rand(seed)) * startingRad;\n        vec2 pos = vec2(dist * cos(angle),dist * sin(angle)) + startingPos * iResolution.xy;\n        fragColor = vec4(pos,rand(seed) * 2.0 * pi,1.0);\n        return;\n    }\n    \n    agent current = agent(buffer.xy, buffer.z);\n\n    updateAgent(current, seed);\n\n    fragColor = vec4(current.pos,current.angle,trail);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )//this entire buffer (so far [maybe i dont update this comment]) is used to store agent locations\n{\n    fragColor = vec4(0.0);\n    \n    vec4 buffer0 = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 buffer1 = texelFetch(iChannel1, ivec2(fragCoord), 0);\n      \n    if(buffer0.w > 0.0)\n    {\n        for(uint i = 0u; i < agentNum; i++)\n        {\n            float x = mod(float(i), iResolution.x);\n            float y = floor(float(i) / iResolution.x);\n            vec2 pos = texelFetch(iChannel0, ivec2(x,y), 0).xy;\n        \n            if(distance(pos, fragCoord) <= trailSize)\n            {\n                fragColor = vec4(1.0,0.0,0.0,0.0);\n            }\n        }\n    }\n    \n    if(buffer1.w > 0.0)\n    {\n        for(uint i = 0u; i < agentNum; i++)\n        {\n            float x = mod(float(i), iResolution.x);\n            float y = floor(float(i) / iResolution.x);\n            vec2 pos = texelFetch(iChannel1, ivec2(x,y), 0).xy;\n        \n            if(distance(pos, fragCoord) <= trailSize)\n            {\n                fragColor = vec4(0.0,1.0,0.0,0.0);\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvec2 loopCheck(in vec2 p)\n{\n    return mod(p, iResolution.xy);\n}\n// xy agent pos, z agent angle, w trail,\nvoid updateAgent(inout agent current, inout uint seed)\n{\n    float angle = current.angle;\n\n    vec2 forward = vec2(cos(angle), sin(angle));\n\n    vec2 right = vec2(forward.y, -forward.x);\n\n    current.pos += forward;\n    \n    current.pos = mod(current.pos, iResolution.xy);\n    \n    vec2 pos = current.pos;\n    \n    vec2 forwardOffset = forward * (sensorDistance + sensorForwardBias);\n    vec2 rightOffset = right * sensorGap + forward * sensorDistance;\n    vec2 leftOffset = -right * sensorGap + forward * sensorDistance;\n\n    float forwardSample = 0.0;\n    float rightSample = 0.0;\n    float leftSample = 0.0;\n\n    float sensorCount = 0.0;\n    for(float x = -sensorSize / 2.0; x < sensorSize / 2.0; x+= max(1.0, sensorSize / 8.0))\n    {\n        for(float y = -sensorSize / 2.0; y < sensorSize / 2.0; y+= max(1.0, sensorSize / 8.0))\n        {\n            sensorCount += 1.0;\n            forwardSample += texelFetch(iChannel0, ivec2(floor(loopCheck(pos + forwardOffset + vec2(x,y)))), 0).w;\n            rightSample += texelFetch(iChannel0, ivec2(floor(loopCheck(pos + rightOffset + vec2(x,y)))), 0).w;\n            leftSample += texelFetch(iChannel0, ivec2(floor(loopCheck(pos + leftOffset + vec2(x,y)))), 0).w;\n            forwardSample -= texelFetch(iChannel2, ivec2(floor(loopCheck(pos + forwardOffset + vec2(x,y)))), 0).w;\n            rightSample -= texelFetch(iChannel2, ivec2(floor(loopCheck(pos + rightOffset + vec2(x,y)))), 0).w;\n            leftSample -= texelFetch(iChannel2, ivec2(floor(loopCheck(pos + leftOffset + vec2(x,y)))), 0).w;\n        }\n    }\n\n    forwardSample /= sensorCount;\n    rightSample /= sensorCount;\n    leftSample /= sensorCount;\n    \n    float forwardWeight = 1.0 + min(forwardSample, maxInfluence); \n\n    float rightWeight = min(rightSample, maxInfluence) - min(leftSample, maxInfluence);\n\n    float randomAngle = (rand(seed) * 2.0 - 1.0) * pi * randomWalk;\n\n    current.angle -= clamp(rightWeight / forwardWeight, -pi / (1.0 + angleLimit), pi / (1.0 + angleLimit)) + randomAngle;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float safeFrame = mod(float(iFrame + 1) + iDate.w, 1000.0);//(to avoid overflow of the seed)\n    uint seed = uint((fragCoord.x * iResolution.y + fragCoord.y) * safeFrame + seedOffset);\n    \n    uint id = uint(floor(fragCoord.y) * iResolution.x + floor(fragCoord.x));\n\n    vec4 buffer = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 bufferB = texelFetch(iChannel1, ivec2(fragCoord), 0);\n\n    float trail = buffer.w / decayRate;\n\n    if(distance(fragCoord, iMouse.xy) <= cookieSize)\n    {\n        trail += cookieWeight;\n    }\n    \n    if(bufferB.y > 0.0)\n    {\n        trail += agentTrailWeight;\n    }\n    \n    if(iFrame == 1)\n    {\n        trail += 0.01;\n    }\n    \n    trail = min(trail, maxTrail);\n\n    if(id > agentNum)\n    {\n        fragColor = vec4(0.0,0.0,0.0,trail);\n        return;\n    }\n\n    if(iFrame == 1)\n    {\n        float angle = rand(seed) * pi * 2.0;\n        float dist = sqrt(rand(seed)) * startingRad;\n        vec2 pos = vec2(dist * cos(angle),dist * sin(angle)) + startingPos * iResolution.xy;\n        fragColor = vec4(pos,rand(seed) * 2.0 * pi,1.0);\n        return;\n    }\n    \n    agent current = agent(buffer.xy, buffer.z);\n\n    updateAgent(current, seed);\n\n    fragColor = vec4(current.pos,current.angle,trail);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}