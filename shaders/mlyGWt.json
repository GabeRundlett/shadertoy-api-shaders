{
    "Shader": {
        "info": {
            "date": "1684852158",
            "description": "Replacing e^x in tanh with 2^x makes it cheaper. I've used it to make \"thc3\" which can create triangle-like waves, cos and soft square/pulse waves. It's a bit expensive but cool\n\nhttps://www.desmos.com/calculator/of9a6fkocv",
            "flags": 0,
            "hasliked": 0,
            "id": "mlyGWt",
            "likes": 7,
            "name": "Multi-Wave",
            "published": 3,
            "tags": [
                "wave",
                "function",
                "periodic",
                "squarewave",
                "trianglewave",
                "pulsewave"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "#define res iResolution.xy\n#define ss(a) smoothstep(-1./res.y, 1./res.y, a)\n\n#define tanh2(a) ((exp2(a)-1.)/(exp2(a)+1.))\n#define atanh2(a) log2((1.+a)/(1.-(a)))\n\n// Cheapest, soft square wave, use only with high a (>8 or so), \n// or if you don't mind not oscillating to +-1\n#define thc0(a, x) tanh2(a*cos(x))\n\n// More correct wave, hits +-1\n// a~=0 is cos (but breaks at a=0)\n// a>0 is soft square wave\n#define thc1(a, x) tanh2(a*cos(x))/tanh2(a)\n\n// Probably not worth using this over thc1, it's about 2x more \n// expensive and very similar (unless you want to vary between tri, square)\n// Same as thc3 but can't change pulse width\n#define thc2(a, x) tanh2((a)*atanh2(cos(x)))\n\n// Has pulse wave, great control, is expensive (not much more than thc2)\n// a>0 controls sharpness \n// o in [-1,1] controls pulse width\n// a=.6, o=0 is \"triangle\", \n// a=1,  o=0 is cos, \n// a>1,  o=0 is soft square\n// a>1,  o!=0 is soft pulse\n#define thc3(a, o, x) tanh2((a)*(atanh2(cos(x))-atanh2(o)))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * res) / res.y;    \n    float t = iTime;\n    \n    vec2 pSqu1  = 0.5 * vec2(thc1(8., t),        0.1);\n    vec2 pSqu2  = 0.5 * vec2(thc2(2.8, t),       0.0);\n    vec2 pPulse = 0.5 * vec2(thc3(2.8, 0.5, t), -0.1);\n    vec2 pTri   = 0.5 * vec2(thc3(0.6, 0., t),  -0.2);\n    \n    float sSqu1  = ss(0.02 - length(uv - pSqu1));\n    float sSqu2  = ss(0.02 - length(uv - pSqu2));\n    float sPulse = ss(0.02 - length(uv - pPulse));\n    float sTri   = ss(0.02 - length(uv - pTri)); \n    \n    vec3 col = vec3(0);\n    col = mix(col, vec3(1,.5,.5), sSqu1);\n    col = mix(col, vec3(.5,1,.5), sSqu2);\n    col = mix(col, vec3(.5,.5,1), sPulse);\n    col = mix(col, vec3(.9),      sTri);\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}