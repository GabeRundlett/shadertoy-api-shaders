{
    "Shader": {
        "info": {
            "date": "1658033876",
            "description": "Two colour sequence generators that tend to quickly get decent coverage over the spectrum of possible colours.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssVBDR",
            "likes": 1,
            "name": "Random colour sequences",
            "published": 3,
            "tags": [
                "color",
                "random",
                "palette",
                "sequence",
                "pseudorandom"
            ],
            "usePreview": 0,
            "username": "zithral",
            "viewed": 359
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float y = fragCoord.y - 0.5*iResolution.y;\n    float x = floor(fragCoord.x / 15. /* stripe width */);\n    \n    // Pseudorandom colour generation\n    // (With a bias making consecutive colours quite different.)\n    if (y > 0.) {\n        // Approach 1: ints and relative primes.\n        int i = int(x);\n        ivec3 col = i * ivec3(158, 2*156, 3*159);\n        col = col % ivec3(255, 253, 256); // skips some channel values\n        fragColor = vec4(vec3(col)/255., 1.0);\n    } else {\n        // Approach 2: floats, phi, and powers.\n        vec3 col = vec3(1.61803398875);\n        col = fract(col) * vec3(x,x,x);\n        col = fract(col) * vec3(1,x,x);\n        col = fract(col) * vec3(1,1,x);\n        //col = vec3(phi*i, phi*i*i, phi*i*i*i); // has precision issues\n        fragColor = vec4(fract(col), 1.0);\n    }    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}