{
    "Shader": {
        "info": {
            "date": "1519533719",
            "description": "fractal brownian motion",
            "flags": 0,
            "hasliked": 0,
            "id": "Mscyz2",
            "likes": 0,
            "name": "Sea at Night",
            "published": 3,
            "tags": [
                "raymarch",
                "sdf",
                "fbm"
            ],
            "usePreview": 1,
            "username": "felipunkerito",
            "viewed": 1818
        },
        "renderpass": [
            {
                "code": "#define EPS 0.001\n#define FAR 100.0\n#define STEPS 256\nconst float PI = 3.14159265359;\n\n// Move the mouse for rotation and light position\n\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n\nfloat noise( in vec3 x )\n{\n\n    vec3 p = floor( x );\n    vec3 z = fract( x );\n    \n    z *= z * z * ( 3.0 - 2.0 * z );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float i = hash( n + 210.0 );\n    float j = hash( n + 211.0 );\n    float k = hash( n + 250.0 );\n    float l = hash( n + 251.0 );\n    \n    float res = mix( mix( mix ( a, b, z.x ), mix( c, d, z.x ), z.y ),\n                     mix( mix ( e, f, z.x ), mix( g, h, z.x ), z.y ), \n                     z.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\nfloat fbm( in vec3 p )\n{\n\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02;\n    f += 0.2500 * noise( p ); p *= 2.03;\n    f += 0.1250 * noise( p ); p *= 2.01;\n    f += 0.0625 * noise( p );\n    f += 0.0317 * noise( p );\n    f += 0.0150 * noise( p );\n    return f / 0.9375;\n    \n}\n\n\nfloat map( vec3 p )\n{\n\n    float t = fbm( p + ( iTime * 0.1 ) );\n    \n    float sea = p.y + sin( noise( p + ( iTime * 0.2 ) ) ) * t ;\n    \n    /*\n\t\n\tp.y -= 5.0; \n    \n    float sph = length( p ) - 1.;\n    \n    if( sph < sea ) sea = sph;\n\n\t*/\n    \n    return sea;\n    \n}\n\nvec3 grad( vec3 p )\n{\n\n\tvec2 e = vec2( 0.0, EPS ); \n    vec3 n = vec3( map( p + e.xyy ) - map( p - e.xyy ),\n                   map( p + e.yxy ) - map( p - e.yxy ),\n                   map( p + e.yyx ) - map( p - e.yyx )\n    \t\t\t   );\n    return n;\n    \n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n        \n        float h = map( ro + rd * t );\n        \n        if( h < 0.001 ) return 0.0;\n        res = min( res, 4.0 * h / t );\n        t += h;\n    \n    }\n    \n    return res;\n    \n}\n\nvec3 randomSphereDir(vec2 rnd)\n{\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\n\nvec3 randomHemisphereDir(vec3 dir, float i)\n{\n\tvec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff )\n{\n\tconst int nbIte = 32;\n    const float nbIteInv = 1./float(nbIte);\n    const float rad = 1.-1.*nbIteInv; //Hemispherical factor (self occlusion correction)\n    \n\tfloat ao = 0.0;\n    \n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l; // mix direction with the normal\n        \t\t\t\t\t\t\t\t\t\t\t\t\t    // for self occlusion problems!\n        \n        ao += (l - max(map( p + rd ),0.)) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\n\nvec3 shade( vec3 ro, vec3 rd, float t )\n{\n\n    vec3 p = ro + rd * t;\n    vec3 n = normalize( grad( p ) );\n    \n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n    \n    vec3 lig = normalize( vec3( sin( iTime * 0.2 ), 0.8, cos( iTime * 0.2 ) ) );\n    vec3 blig = vec3( -lig.x, -lig.y, -lig.z );\n    vec3 ligO = normalize( vec3( m.x, m.y, 0.6 ) );\n    vec3 ref = reflect( rd, n );\n    \n    // AO from XT95 at: https://www.shadertoy.com/view/4sdGWN \n    \n    float a = ambientOcclusion( p, n, 4.0, 2.0 );\n    float dif = max( 0.0, dot( n, lig ) );\n    float difO = max( 0.0, dot( n, ligO ) );\n    float con = 1.0;\n    float sha = softShadows( p, lig );\n    float shaO = softShadows( p, ligO );\n    float spe = pow( clamp( dot( lig, ref ), 0.0, 1.0 ), 16.0 );\n    float speO = pow( clamp( dot( ligO, ref ), 0.0, 1.0 ), 16.0 );\n    float amb = 0.5 + 0.5 * n.y;\n    float bac = max( 0.0, 0.2 + 0.8 * dot( n, blig ) );\n    float rim = pow( 1.0 + dot(n, rd), 2.0 );\n    \n    vec3 col = con * vec3( 0.1, 0.15, 0.2 );\n    col += amb * vec3( 0.1, 0.15, 0.2 );\n    col += dif * vec3( 1.0, 0.97, 0.85 ) * sha;\n    col += difO * vec3( 1.0, 0.97, 0.85 ) * shaO;\n    col += bac * vec3( 1.0, 0.97, 0.85 ) * bac;\n    \n    col = sqrt( col );\n    col *= 0.6;\n    \n    col += 0.1 * rim;\n    col += 1.0 * spe;\n    col *= 0.1 + vec3( 0.1, 0.2, .4 );\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.xy;\n\tuv.x *= iResolution.x / iResolution.y;\n    \n        vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n    \n    float an = 1.1 + 0.05*(iTime-10.0) - 7.0*m.x;\n\n\tvec3 ro = vec3(10.5*sin(an),10.0,10.5*cos(an));\n    vec3 ta = vec3(0.0,2.0,0.0);\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( uv.x*uu + uv.y*vv + 1.5*ww );;\n    \n    float t = 0.0; float d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = 0.5 * map( ro + rd * t );\n        \n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n        \n    }\n    \n    // Time varying pixel color\n    vec3 tex = texture( iChannel0, uv ).xyz;\n    vec3 col = d < EPS ? shade( ro, rd, t ) : mix( vec3( 0.1 ), tex * vec3( 0.4 ), uv.y + 0.1 );\n\n    // Output to screen\n    fragColor = vec4( col,1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}