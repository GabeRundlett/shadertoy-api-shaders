{
    "Shader": {
        "info": {
            "date": "1633458015",
            "description": "It's pretty simple for the moment, but I'll improve on it soon enough, I want to add a few more fractals, and controls with the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdtXzS",
            "likes": 6,
            "name": "pohl's fractals",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "zoom",
                "dynamic"
            ],
            "usePreview": 0,
            "username": "pohl",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "vec3 hsv_to_rgb( in float hue, in float sat, in float val )\n{\n    float chroma = val * sat;\n    float mini = val - chroma;\n    float tmp = chroma * (1.0 - abs(mod(hue / 60.0, 2.0) - 1.0));\n    \n    if (hue >= 0.0 && hue < 60.0)\n        return vec3(chroma + mini, tmp + mini, mini);\n    else if (hue >= 60.0 && hue < 120.0)\n\t\treturn vec3(tmp + mini, chroma + mini, mini);\n\telse if (hue >= 120.0 && hue < 180.0)\n\t\treturn vec3(mini, chroma + mini, tmp + mini);\n\telse if (hue >= 180.0 && hue < 240.0)\n\t\treturn vec3(mini, tmp + mini, chroma + mini);\n\telse if (hue >= 240.0 && hue < 300.0)\n\t\treturn vec3(tmp + mini, mini, chroma + mini);\n\telse if (hue >= 300.0 && hue < 360.0)\n\t\treturn vec3(chroma + mini, mini, tmp + mini);\n\telse\n\t\treturn vec3(mini, mini, mini);\n}\n\n\nvec2 get_world_coord(in vec2 pixel_coord, in vec2 screen_coord, in vec2 screen_size)\n{\n    vec2 result;\n    \n    result.x = screen_coord.x + (pixel_coord.x * screen_size.x) - screen_size.x / 2.0;\n    result.y = screen_coord.y + (pixel_coord.y * screen_size.y) - screen_size.y / 2.0;\n    return result;\n}\n\nfloat get_percentage(vec2 world_coord, float max_iterations)\n{\n    vec2 z = world_coord;\n    vec2 tmp;\n    int  current_count = 0;\n    \n    while (z.x * z.x + z.y * z.y <= 4.0 && current_count < int(max_iterations))\n    {\n        z = glynn_run(z, vec2(-0.2, 0.0));\n        current_count++;\n    }\n    if (current_count == int(max_iterations))\n        return (-1.0);\n    return (float(current_count) / max_iterations);\n}\n\n/*float get_percentage(vec2 world_coord, float max_iterations)\n{\n    vec2 z = vec2(0);\n    vec2 tmp;\n    int  current_count = 0;\n    \n    while (z.x * z.x + z.y * z.y <= 4.0 && current_count < int(max_iterations))\n    {\n        tmp.x = z.x * z.x - z.y * z.y + world_coord.x;\n        tmp.y = z.x * z.y * 2.0 + world_coord.y;\n        z = tmp;\n        current_count++;\n    }\n    if (current_count == int(max_iterations))\n        return (-1.0);\n    return (float(current_count) / max_iterations);\n}*/\n\nvec3 get_color(in float percentage, in float saturation, in float value)\n{\n    if (percentage == -1.0)\n        return vec3(0);\n    return hsv_to_rgb(percentage * 360.0, saturation, value);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time_percent = cos(iTime / 4.0) / 2.0 + 0.5;\n    float init_iterations = 10.0;\n    float goal_iterations = 200.0;\n    float curr_iterations = mix(goal_iterations, init_iterations, time_percent);;\n    float init_screen_width = 3.8;\n    float goal_screen_width = 0.5;\n    float curr_screen_width = mix(goal_screen_width, init_screen_width, time_percent);\n    vec2  init_screen_coord = vec2(.25, 0.0);\n    vec2  goal_screen_coord = vec2(.25, .5);\n    vec2  curr_screen_coord = mix(goal_screen_coord, init_screen_coord, time_percent);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 pixel_coord = fragCoord/iResolution.xy;\n    float aspect_ratio = iResolution.y / iResolution.x;\n    \n    vec2 screen_width = vec2(curr_screen_width, curr_screen_width * aspect_ratio);\n    \n    vec2 world_coord = get_world_coord(pixel_coord, curr_screen_coord, screen_width);\n\n    float percentage = get_percentage(world_coord, curr_iterations);\n    \n    vec3 color = get_color(percentage, 1.0, 1.0);\n    \n    // Time varying pixel color\n    //vec3 col = vec3(0.5 + 0.5 * cos(iTime), .5, 0);\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* complex math functions */\n\nvec2 cx_sqrt(vec2 a) {\n    float r = sqrt(a.x*a.x+a.y*a.y);\n    float rpart = sqrt(0.5*(r+a.x));\n    float ipart = sqrt(0.5*(r-a.x));\n    if (a.y < 0.0) ipart = -ipart;\n    return vec2(rpart,ipart);\n}\n\nfloat cx_mag(in vec2 c) {\n    return sqrt(c.x * c.x + c.y * c.y);\n}\n\nvec2 cx_mul(in vec2 a, in vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 cx_pow(in vec2 c, int p) {\n    vec2 tmp = vec2(1.0,0.0) ;\n    for (int i = 0; i < p; ++i) {\n        c = cx_mul(tmp, c);\n    }\n    return c;\n}\n\nvec2 glynn_run(in vec2 old_z, in vec2 julia)\n{\n    vec2 new_z = cx_mul(old_z, cx_sqrt(old_z)) + julia;\n    return new_z;\n}\n\nvec2 julia_run(in vec2 old_z, in vec2 julia)\n{\n    vec2 new_z = cx_pow(old_z, 2) + julia;\n    return new_z;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}