{
    "Shader": {
        "info": {
            "date": "1576600284",
            "description": "Is it the shortest code ?\n\nNB: 2 totally different approaches implemented inside. Shorter solution might seed from any.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttd3D7",
            "likes": 8,
            "name": "circle packing (127 chars)",
            "published": 3,
            "tags": [
                "tiling",
                "hexagonal",
                "short",
                "onetweet",
                "codegolfing"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 648
        },
        "renderpass": [
            {
                "code": "// (2) === totally different approach than (1). slightly less precise. ==========\n\n#define D  length( mod( U += T/2. , T ) - R )             //\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.yy/8., T = vec2( 2, 3.5 )*R, U=u;\n    O = 1.- .5* abs( min( D, D ) -R.yyyy );\n}/*\n\n        \n        \n        \n        \n// --- 134 chars\n\n#define D  length( mod( U += T, T+T ) - 1. )           //\n#define mainImage(O,u)                                  \\\n    vec2 R = iResolution.xy/8., T = vec2( 1, 1.72 ),    \\\n         U = u / R.y;                                   \\\n         O += 1.- R.y/2.* abs( min( D, D ) -.99 )      /*\n\n\n\n\n\n// --- 135 chars  ( ok on windows ? )\n\n#define D abs( length( mod( U += T, T+T ) -.5 ) -.495 ) //\n#define mainImage(O,u)                                   \\\n    vec2 R = iResolution.xy, T = vec2( .5, .86 ),        \\\n         U = 4. * u / R.y;                               \\\n         O += 1.- R.y/8.* min( D, D )                   /*\n\n\n\n\n\n// --- 141 chars\n\n#define D(p) abs( length( mod( p+U, T+T ) -.5 ) -.495 ) //\n#define mainImage(O,u)                                   \\\n    vec2 R = iResolution.xy, T = vec2(.5,.86),           \\\n         U = 4. * u / R.y;                               \\\n         O += 1.- R.y/8.* min( D(), D(T) )              /*\n\n\n\n\n// --- 156 chars\n\n#define D(u,v) abs(length( vec2(fract(u+U.x),mod(v+U.y,1.73)) -.5 ) -.494 ) //\n#define mainImage(O,u)                            \\\n    vec2 R = iResolution.xy,  U = 4. * u / R.y;   \\\n         O += 1.- R.y/8.* min( D(,), D(.5,.87) ) /*\n\n\n\n\n\n// --- 160 chars\n\n#define D max(0.,1.- R/8.* abs(length(vec2(fract(V.x),mod(V.y,1.73))-.5) -.493 )) //\n#define mainImage(O,u)                             \\\n    float R = iResolution.y;                       \\\n    vec2  V  = 4. * u / R;    O += D;              \\\n          V += vec2(.5,.87);  O += D              /*\n\n\n\n\n\n// --- 167 chars\n\n#define D ( V.y = mod(V.y,1.73) ) < 1.? max(0.,1.- R.y/8.* abs(length(fract(V)-.5) -.493 )) : 0.//\n#define mainImage(O,u)                             \\\n    vec2 R = iResolution.xy, U = 4. * u / R.y,     \\\n         V = U;              O += D;               \\\n         V = U+vec2(.5,.87); O += D               /*\n\n\n\n\n\n// (1) === using hexa stuff from https://shadertoy.com/view/wldGD7 =============\n\n// --- 186 chars\n\n#define D(d) length( M * floor( d + inverse(M) *U ) - U )   //\n#define mainImage(O,u)                                       \\\n    mat2 M = mat2( 1, 0, .5, .87 );                          \\\n    vec2 R = iResolution.xy,                                 \\\n         U = 4. * u / R.y;                                   \\\n    O += 1.- R.y/8.* abs( min(min( D(O.xw), D()    ),        \\\n                              min( D(O.wx), D(R/R) )) -.5 ) /*\n\n\n\n\n\n// #define D(x,y) length( M* vec2(x,y) + M* floor( inverse(M) *U ) - U )\n//                 min(min( D(0,0), D(1,1) ), min( D(1,0), D(0,1) ) )\n\n\n\n// --- 189 chars \n\n#define D(d) length( d - U + M * floor( inverse(M) *U ) )    //\n#define mainImage(O,u)                                        \\\n    mat2 M = mat2( 1, 0, .5, .87 );                           \\\n    vec2 R = iResolution.xy,                                  \\\n         U = 4. * u / R.y;                                    \\\n    O += 1.- R.y/8.* abs( min(min( D(), D(M*O.aa) ), /* M[0]+M[1] * / \\\n                              min( D(M[0]), D(M[1]) )) -.5 ) /*\n\n\n\n\n\n// --- 193 chars\n\n#define D(d) length( d - U + mat2(I,T) * floor( mat2(I,-.58,1.15) *U ) ) //\n#define mainImage(O,u)                                         \\\n    vec2 R = iResolution.xy,                                   \\\n         U = 4. * u / R.y,                                     \\\n         T = vec2( .5, .87 ), I = O.wx;                        \\\n    O += 1.- R.y/8.* abs( min(min(D(),D(I+T)),                 \\\n                              min(D(I),D(T))) -.5 )           /*\n\n\n\n\n\n// --- 216 chars\n        \n#define D(d) length(d-U)                                      //\n#define mainImage(O,u)                                         \\\n    vec2 R = iResolution.xy,                                   \\\n         U = u / R.y * 4.,                                     \\\n         T = vec2( .5, .87 ),       /* sqrt(3)/2 * /            \\\n         I = vec2(1,0),                                         \\\n         H = mat2(I,-.58,1.15) * U; /* -1/sqrt(3),2/sqrt(3) * / \\\n                                                               \\\n    U -= mat2(I,T) *floor(H);                                  \\\n    O += smoothstep(6./R.y, 0., abs( min(min(D(),D(I+T)),      \\\n                                         min(D(I),D(T)))-.5) )/*\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}