{
    "Shader": {
        "info": {
            "date": "1658302714",
            "description": "normal (gradient) of a signed distance function. Click for SDF visualization.",
            "flags": 0,
            "hasliked": 0,
            "id": "fdGfWh",
            "likes": 3,
            "name": "SD gradient",
            "published": 3,
            "tags": [
                "signeddistancefield"
            ],
            "usePreview": 0,
            "username": "kosmonaut",
            "viewed": 173
        },
        "renderpass": [
            {
                "code": "//#define SD_POINT\n\n//#define vis0\n//#define vis1\n\nfloat sdFunc(vec2 fragPos)\n{\n\n    #ifdef SD_POINT\n    \n    return length(point * iResolution.xy - fragPos) - (80. + 40.*sin(iTime*0.5));\n    \n    #endif\n    \n    float sdf_angle = 1. + iTime / 2.;\n    \n    fragPos -= vec2(0.5, 0.5) * iResolution.xy;\n    fragPos *= mat2(cos(sdf_angle),-sin(sdf_angle),sin(sdf_angle),cos(sdf_angle)); \n    fragPos -= vec2(0.0, -0.2) * iResolution.xy;\n    vec2 d = abs(fragPos) - vec2(110.,20.); \n    \n    float rect = min(max(d.x,d.y),0.0) + length(max(d,0.0)); \n    \n    vec2 d2 = abs(fragPos) - vec2(20.,110.); \n    float rect2 = min(max(d2.x,d2.y),0.0) + length(max(d2,0.0));\n    \n    float circle = distance(fragPos, vec2(150., 150.)) - 60.;\n    circle = min(circle, distance(fragPos, vec2(-150, 150.)) - 120.);\n    \n    \n \treturn min(min(rect, circle), rect2);\n    \n}\n\nvec4 colorFunc( vec2 fragCoord )\n{\n    vec4 color;\n    float sd = sdFunc(fragCoord);\n    \n    float eps = 0.1;\n    \n    vec2 normal = vec2(sd - sdFunc(fragCoord - vec2(eps, 0)), sd - sdFunc(fragCoord - vec2(0, eps)));\n    normal = normalize(normal);\n    \n    // fix the normal to 0.1\n    //normal = (normal + vec2(1,1))*.5;\n    vec2 grad = normal;\n    //grad = (grad + vec2(1,1))*.5;\n    \n    #ifdef vis0\n    color = vec4(1,1,1,1);\n    if(sd < 0.) \n    {\n        color = vec4(0.4,0.4,1,1);\n    }\n    return color;\n    #endif\n    \n    #ifdef vis1\n    color = vec4( abs(sd / max(iResolution.x, iResolution.y))*10. );\n    if(sd < 0.)\n    color = vec4(color.r, 0, 0, 1);\n    return color;\n    #endif\n    \n    if(iMouse.z > 0.)\n    {\n        color = vec4( fract(sd / max(iResolution.x, iResolution.y) * 20.) );\n    }\n    else\n    {\n        color = vec4(grad,0,1);\n    }\n    \n    if(sd < 0.) \n    {\n        color = vec4(0.4,0.4,1,1);\n    }\n   \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = colorFunc(fragCoord);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}