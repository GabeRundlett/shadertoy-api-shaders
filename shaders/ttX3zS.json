{
    "Shader": {
        "info": {
            "date": "1556666081",
            "description": "anti-aliasing experiment. was very adamant about breaking things up into separate functions for organization and it seems to have helped.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttX3zS",
            "likes": 10,
            "name": "circle jam",
            "published": 3,
            "tags": [
                "circles",
                "antialiasing"
            ],
            "usePreview": 0,
            "username": "benhardy",
            "viewed": 600
        },
        "renderpass": [
            {
                "code": "\nfloat holegrid(vec2 pos, float ang, float zoom, vec2 delta) {\n    \n    vec2 tr1 = vec2(cos(ang), -sin(ang));\n    vec2 tr2 = vec2(sin(ang), cos(ang));\n    pos *= zoom;\n    pos += delta;\n    pos = vec2(\n        pos.x * tr1.x + pos.y * tr1.y,\n        pos.x * tr2.x + pos.y * tr2.y\n    );\n    //pos.y *= (1.0 + pos.y * pos.y * 0.03);\n    float dt = max(0.0, fract(iTime) * 2.0 - 1.0);\n    int row = int(floor(pos.y + 0.5));\n    int isRowZero = 1- min(row*row, 1);\n    float dt2 = max(0.0, fract(iTime + 0.5) * 2.0 - 1.0);\n    int col = int(floor(pos.x + 0.5));\n    int isColZero = 1- min(col*col, 1);\n    pos.x += float(isRowZero) * dt;\n    pos.y += float(isColZero) * dt2;\n    // Time varying pixel color\n    pos = mod(pos + 0.5, 1.0) -0.5;\n    float d = length(pos);\n    return 1.0-floor(clamp(d* 6.0 - 1.9, 0.0, 1.0));\n}\nvec3 calc(vec2 pos) {\n    float completion = 6.283185307179586 * iTime / 15.0;\n    float ang = completion;\n    float zoom = 3.0;\n    vec2 delta = vec2(cos(completion), sin(completion));\n    float d = holegrid(pos, ang, zoom, delta);\n    vec3 col1 = vec3(d, d, d);\n    \n    float ang2 = completion / 4.0;\n    float zoom2 = 12.0 + sin(completion);\n    vec2 delta2 = vec2(0.0, 0.0);\n    float d2 = holegrid(pos, ang2, zoom2, delta2);\n    vec3 col2 = vec3(1.0, d2, d2);\n    return min(col1, col2);\n}\nvec2 pixelToLocal(vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.y = uv.y * iResolution.y / iResolution.x;\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0,0,0);\n    for (int dy = 0; dy < 4; dy++) {\n        \n\t    for (int dx = 0; dx < 4; dx++) {\n        \tvec2 delta = vec2(float(dx)/4.0, float(dy)/4.0);\n\t\t    vec2 uv = pixelToLocal(fragCoord+delta);\n                \n\t\t\tcol += calc(uv);\n        }\n    }\n    fragColor = vec4(col / 16.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}