{
    "Shader": {
        "info": {
            "date": "1578437927",
            "description": "Nightvision shader protype intended for HX.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wtK3zW",
            "likes": 1,
            "name": "HX Nightvision Prototype",
            "published": 3,
            "tags": [
                "hx"
            ],
            "usePreview": 0,
            "username": "hanfling",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "\n// Center at 0, Right at 1. Integration between 0 and 1/2.\nfloat BoxNearestRight( float OneCenter, float OneRight, float TwoCenter, float TwoRight )\n{\n    return 0.5*OneCenter*TwoCenter;\n}\n\n// Left at -1, Center at 0. Integration between -1/2 and 0.\nfloat BoxNearestLeft( float OneLeft, float OneCenter, float TwoLeft, float TwoCenter )\n{\n    return 0.5*OneCenter*TwoCenter;\n}\n\n\n// Left at -1, Center at 0. Integration between -1/2 and 0.\nfloat TentNearestLeft( float OneLeft, float OneCenter, float TwoLeft, float TwoCenter )\n{\n    float Result = 0.0;\n\n    Result += (1.0/8.0)*OneLeft*TwoLeft;\n    Result += (3.0/8.0)*OneCenter*TwoCenter;\n\n    return Result;\n}\n\n// Center at 0, Right at 1. Integration between 0 and 1/2.\nfloat TentNearestRight( float OneCenter, float OneRight, float TwoCenter, float TwoRight )\n{\n    float Result = 0.0;\n    \n    Result = TentNearestLeft( OneRight, OneCenter, TwoRight, TwoCenter );\n    \n    return Result;\n}\n\n\n// Left at -1, Center at 0. Integration between -1/2 and 0.\nfloat TentLinearLeft( float OneLeft, float OneCenter, float TwoLeft, float TwoCenter )\n{\n    float Result = 0.0;\n\n    Result += (1.0/12.0)*OneLeft*TwoLeft;\n    Result += (1.0/12.0)*OneLeft*TwoCenter;\n    Result += (1.0/12.0)*OneCenter*TwoLeft;\n    Result += (3.0/12.0)*OneCenter*TwoCenter;\n\n    return Result;\n}\n\n// Center at 0, Right at 1. Integration between 0 and 1/2.\nfloat TentLinearRight( float OneCenter, float OneRight, float TwoCenter, float TwoRight )\n{\n    float Result = 0.0;\n    \n    Result = TentLinearLeft( OneRight, OneCenter, TwoRight, TwoCenter );\n    \n    return Result;\n}\n\n// This works more in the sense of a \"spectrum\", which RGB colors are NOT.\nvec3 TentLinearMultiplyColors( vec3 ColorOne, vec3 ColorTwo )\n{\n    vec3 Result = vec3(0.0);\n    \n    // Left of Red.\n    Result.r += BoxNearestLeft( ColorOne.r, ColorOne.r, ColorTwo.r, ColorTwo.r );\n\n    // Right of Red.\n    Result.r += TentLinearRight( ColorOne.r, ColorOne.g, ColorTwo.r, ColorTwo.g );\n\n    // Left of Green.\n    Result.g += TentLinearLeft( ColorOne.r, ColorOne.g, ColorTwo.r, ColorTwo.g );\n\n    // Right of Green.\n    Result.g += TentLinearRight( ColorOne.g, ColorOne.b, ColorTwo.g, ColorTwo.b );\n\n    // Left of Blue.\n    Result.b += TentLinearLeft( ColorOne.g, ColorOne.b, ColorTwo.g, ColorTwo.b );\n\n    // Right of Blue.\n    Result.b += BoxNearestRight( ColorOne.b, ColorOne.b, ColorTwo.b, ColorTwo.b );\n\n\treturn Result;\n}\n\n// Code below assumes Weights sum up to 1.\nvec3 LuminancePreservingClamp( vec3 Color, vec3 Weights ) // !! LuminancePreservingMax\n{\n\t// We need two passes to fully spread.\n\tfor ( int Pass=0; Pass<2; Pass++ )\n\t{\n\t\t// How much a channel is abve 1.0.\n\t\tvec3 Extend = max( vec3(0.0), Color-vec3(1.0) );\n\n\t\t// Relative luminance a component can surrender.\n\t\tvec3 LuminanceExtend = Extend*Weights;\n\n\t\t//\n\t\t// We will be distributing channel a into the two other\n\t\t// channels b and c. We will be using the Weight b on\n\t\t// channel c and vice versa. Before applying the weights\n\t\t// we need to normalize, as the sum of weight b and c\n\t\t// is not one.\n\t\t//\n\t\t// Note that Weight_a+Weight_b equals 1-Weights_c\n\t\t//\n\t\tvec3 NormalizedExtend = LuminanceExtend/(vec3(1.0)-Weights);\n\n#if 1\n\t\tColor += Weights.brg*NormalizedExtend.gbr + Weights.gbr*NormalizedExtend.brg; // Cross product, but with +.\n#else\n\t\t// Spread Red into Green and Blue.\n\t\tColor.g += Weights.b/(Weights.g+Weights.b)*LuminanceExtend.r;\n\t\tColor.b += Weights.g/(Weights.g+Weights.b)*LuminanceExtend.r;\n\n\t\t// Spread Green into Blue and Red.\n\t\tColor.b += Weights.r/(Weights.b+Weights.r)*LuminanceExtend.g;\n\t\tColor.r += Weights.b/(Weights.b+Weights.r)*LuminanceExtend.g;\n\n\t\t// Spread Blue into Red and Green.\n\t\tColor.r += Weights.g/(Weights.r+Weights.g)*LuminanceExtend.b;\n\t\tColor.g += Weights.r/(Weights.r+Weights.g)*LuminanceExtend.b;\n#endif\n\n\t}\n\n\treturn clamp( Color, 0.0, 1.0 );\n}\n\nconst vec3 Rec709LuminanceWeights = vec3( 0.2126, 0.7152, 0.0722 );\n\nvec3 RelativeLuminancePreservingClampRec709( vec3 Color )\n{\n\treturn LuminancePreservingClamp( Color, Rec709LuminanceWeights );\n}\n\nvoid mainImage( out vec4 FragColor, in vec2 FragCoord )\n{\n\t// Normalized pixel coordinates (from 0 to 1)\n    vec2 NormalizedScreenCoords = FragCoord/iResolution.xy;\n\n    vec3 ColorOne = vec3(0.0,1.0,0.0);\n\n    vec3 ColorTwo = texture(iChannel0,NormalizedScreenCoords).rgb;\n\n    vec3 Result = TentLinearMultiplyColors( ColorOne, ColorTwo );\n    \n    Result *= 5.0 + 4.0*sin(iTime);\n   \n    Result = RelativeLuminancePreservingClampRec709( Result );\n\n    FragColor = vec4(Result, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}