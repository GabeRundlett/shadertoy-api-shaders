{
    "Shader": {
        "info": {
            "date": "1690199821",
            "description": "Simpler verions of Triplanar mapping using only a single texture lookup, that dithering to hid it's hard edges. ",
            "flags": 0,
            "hasliked": 0,
            "id": "cdBfD3",
            "likes": 6,
            "name": "Uniplanar (Dithered)",
            "published": 3,
            "tags": [
                "3d",
                "triplanar",
                "sphere",
                "dither",
                "mapping",
                "boxmap",
                "uniplanar"
            ],
            "usePreview": 1,
            "username": "gehtsiegarnixan",
            "viewed": 698
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2023 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/* This is using dither to make a triplanar mapping variant with one \ntexture sample. So it would be Uniplanar mapping then. \n\nThere is a little bit of flickering in the resulting image, I would \nrecomend using TAA to blend it with past frames which makes this \neffect basically visually the same as the triplanar mapping. \n\nTo see how Dither \"Interpolation\" works see this demo:\nhttps://www.shadertoy.com/view/dsjBzh\n\nSee here for a performance test between Uni, Bi, TriPlanar\nhttps://www.shadertoy.com/view/cs2BD3\n*/\n\n// number of previous frames looked at for AA effect also hides dithering\n#define AA 1\n\n// Enable debug grid where the two mappings blend with each other\n//#define SHOWBLEND\n\n//1 no contrast, higher values increase contrast\n#define Contrast 16.\n\n// valve edition (slightly modified to be a true 12 dither)\n// http://alex.vlachos.com/graphics/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf\n// input in pixels (ie not normalized uv)\nfloat ScreenSpaceDither12(vec2 vScreenPos, float time)\n{\n    float vDither = dot( vec2( 171.0, 231.0 ), vScreenPos.xy + time); \n    return fract( vDither / 103.0);\n}\n\n// Increases the steepness of Alpha while preserving 0-1 range and 1 sum\n// See 2 value example (https://www.desmos.com/calculator/dpxa6mytnv)\nvec3 smoothContrast(vec3 alpha, float contrast) {\n    // increase steepness using power\n    vec3 powAlpha = pow(alpha, vec3(contrast));\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha.x + powAlpha.y + powAlpha.z);\n}\n\nvec4 uniplanar( sampler2D sam, vec3 normal, vec3 position, vec2 fragCoord, float contrast, int tOffset) {\n    vec2 uvX = position.yz;\n    vec2 uvY = position.zx;\n    vec2 uvZ = position.xy;\n\n    vec3 alpha = abs(normal); // Alpha Mask for blending\n    \n    alpha = smoothContrast(alpha, contrast); // increase contrast\n    \n    // sample dither\n    float dither = ScreenSpaceDither12(fragCoord, iTime-float(tOffset));\n    \n    // smooth contrast creates artifacts in the dither. Clamp on the dither removes it\n    dither = clamp(dither, 0.01, 0.99);\n\n    // Mip caculation as the automatic ones don't work\n    vec3 duvwdx = dFdx(position);\n    vec3 duvwdy = dFdy(position);\n    \n    // uvs for derivatives Mips\n    vec2 duvdx; \n    vec2 duvdy;\n\n    // \"interpolate\" the UVs using dither\n    vec2 uv;\n    if (alpha.x > dither) {\n        uv = uvX;\n        duvdx = duvwdx.yz; // how is this thing allowed?\n        duvdy = duvwdy.yz;\n    } else if (1.-alpha.z > dither) {\n        uv = uvY;\n        duvdx = duvwdx.zx;\n        duvdy = duvwdy.zx;\t\n    } else {\n        uv = uvZ;\n        duvdx = duvwdx.xy;\n        duvdy = duvwdy.xy;\n    } \n    \n    // texture sample\n    vec4 col = textureGrad( sam, uv, duvdx, duvdy);\n    \n    #ifdef SHOWBLEND\n    float lineThickness = 0.05; // must be smaller than 0.1\n    vec3 mask = step(abs(alpha - 0.1), vec3(lineThickness));\n    return vec4(max(mask, col.xyz), col.w);\n    #else\n    return col;\n    #endif\n}\n\n// _______________Ray Marching section (copied from iq)________________\n// The MIT License\n// Copyright © 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat map( in vec3 p )\n{\n\tfloat d = length(p-vec3(0.0,1.0,0.0))-1.0;\n    d = smin( d, p.y, 1.0 );\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos, in float eps )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*eps;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        int tOffset = m+n;\n#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        int tOffset = 0;\n#endif\n        \n        // camera movement\t        \n        vec3 ro; // camera pos\n        float dist = 2.5;\n        // If the mouse was not clicked, animate;\n        if (iMouse.x > 0.0) {\n            // Scale mouse coords to 0-1 range of screen\n            vec2 mouse = iMouse.xy / iResolution.xy;\n            \n            float dist = 2.0 + mouse.y * 4.0;\n            float angle = mouse.x * 6.283 * 1.25;\n            \n             // Calculate direction clockwise\n            vec2 direction = vec2(sin(angle), cos(angle));\n            ro = vec3(sin(angle)* dist, 2.0, cos(angle)* dist) ;\n        \n        } else {        \n            // Animated \n            float an = 0.2*iTime;\n            ro = vec3( 2.5*sin(an), 2.0, 2.5*cos(an) );\n        }\n        \n        \n        vec3 ta = vec3( 0.0, 1.0, 0.0 ); // camera target\n        // camera matrix\n        vec3 ww = normalize( ta - ro );\n        vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n        vec3 vv = normalize( cross(uu,ww));\n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        float tmax = dist+8.0;\n        float t = dist-2.;\n        for( int i=0; i<128; i++ )\n        {\n            vec3 pos = ro + rd*t;\n            float h = map(pos);\n            if( h<0.001 ) break;\n            t += h;\n            if( t>tmax ) break;\n        }\n        \n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + rd*t;\n            vec3 nor = calcNormal( pos, 0.001 );\n            float occ = clamp(0.4 + 0.6*nor.y, 0.0, 1.0);\n            col = uniplanar(iChannel0, nor, 0.5*pos, fragCoord, Contrast, tOffset).xyz;\n            col = col*col;\n            col *= occ;\n            col *= 2.0;\n            col *= 1.0-smoothstep(1.0,6.0,length(pos.xz));\n        }\n        // to gamma space\n        col = sqrt( col );\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}