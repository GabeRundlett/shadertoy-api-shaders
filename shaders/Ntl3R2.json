{
    "Shader": {
        "info": {
            "date": "1622814953",
            "description": "Made this logo for my job update. The code has some unused parts, I will clean them up later. Soft shadow implementation inspired by athibauâ€™s shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ntl3R2",
            "likes": 0,
            "name": "Resolution Games Logo",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "arda",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 20.\n#define SURF_DIST .01\n#define DEG_TO_RAD 0.0174533\n#define ROUNDING 0.04\n#define EULER 2.71828182846\n#define PI 3.1415\n\n//Primitive SDFs\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n//Operations\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\n\nfloat opRounding(float d,float h )\n{\n    return d - h;\n}\n\n//Transformation Matrices\n\nmat4 TMatrix(vec3 t)\n{\n    return mat4(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1);\n}\n\nmat4 SMatrix(vec3 s)\n{\n    return mat4(s.x,0,0,0,0,s.y,0,0,0,0,s.z,0,0,0,0,1);\n}\n\nmat4 RMatrix(vec3 r)\n{\n    mat4 rX = mat4(1,0,0,0,\n                   0,cos(r.x),sin(r.x),0,\n                   0,-sin(r.x),cos(r.x),0,\n                   0,0,0,1\n                  );\n    mat4 rY = mat4(cos(r.y),0,-sin(r.y),0,\n                   0,1,0,0,\n                   sin(r.y),0,cos(r.y),0,\n                   0,0,0,1\n                  );\n    mat4 rZ = mat4(cos(r.z),-sin(r.z),0,0,\n                   sin(r.z),cos(r.z),0,0,\n                   0,0,1,0,\n                   0,0,0,1\n                  );\n    return rZ*rY*rX;\n}\n\nmat4 IMatrix()\n{\n    return mat4(1,0,0,0,\n                0,1,0,0,\n                0,0,1,0,\n                0,0,0,1\n               );\n}\n\n//Input\n\nvec2 GetMousePos()\n{\n    float x = iMouse.x/iResolution.x;\n    float y = iMouse.y/iResolution.y;\n    return (vec2(x,y)-0.5)*2.0;\n}\n\n//Scene\n\nfloat SceneSDF(vec3 p)\n{\n\tvec3 s = vec3(0, 1, 0);\n    vec2 m = GetMousePos();\n    vec4 mp = vec4(p,1);\n    mp *= TMatrix(-s.xyz)*RMatrix(vec3(45,45,-90)*DEG_TO_RAD);\n    \n    float planeDist = p.y + 1.0;\n    float box1 = sdBox(mp.xyz,vec3(1.0));\n    float box3 = sdBox(mp.xyz,vec3(0.4));\n    float box5 = sdBox(mp.xyz,vec3(0.2));\n    mp *= TMatrix(vec3(-0.66,0.66,0.66));\n    float box2 = sdBox(mp.xyz,vec3(1.0));\n    float box4 = sdBox(mp.xyz,vec3(0.7));\n    \n    float LogoDist = opSubtraction(box2,box1);\n    LogoDist = opUnion(LogoDist,box3);\n    LogoDist = opSubtraction(box4,LogoDist);\n    LogoDist = opUnion(LogoDist,box5);\n    \n    //float d = min(LogoDist, planeDist);\n    float d = LogoDist;\n    return d;\n}\n\n//Raymarch\n\nfloat GetDist(vec3 p) {\n    return SceneSDF(p);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat calculateObstruction(vec3 pos, vec3 lpos, float lrad)\n{\n    vec3 toLight = normalize(lpos-pos);\n    float distToLight = length(lpos-pos);\n    float d, t=lrad*0.1;\n    float obstruction=0.;\n    for(int j=0; j<16; j++)\n    {\n        d = SceneSDF(pos + t*toLight);\n        obstruction = max((-d)*distToLight/(2.0*lrad*t), obstruction);\n        if(obstruction >= 1.){break;}\n        t += max(d, lrad*t/distToLight);\n        if(t >= distToLight) break;\n    }\n    return clamp(obstruction, 0.,1.);\n}\n\nvec3 GetPointLight(vec3 p,vec3 c,vec3 pos, float r) {\n    \n    vec3 l = normalize(pos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.0);\n    float d = RayMarch(p+n*SURF_DIST*2.,l);\n    dif *= exp(1.0-length(pos-p)); //Light Falloff\n    if(d<length(pos-p))\n    {\n    float ob = 1.0-calculateObstruction(p,pos,r);\n    dif *= ob;\n    }\n    \n    return dif*c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,1,-6);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    //Camera Anim\n    float animT = fract(iTime*0.12);\n    animT = cos((2.0*animT+1.0)*PI)*0.5+0.5;\n    float rs = 1.0/(1.0+pow(EULER,-50.0*(animT-0.2)));\n    mat4 rotAnimMx = RMatrix(vec3(0,(1.0-rs)*180.0*DEG_TO_RAD,0));\n    ro = (vec4(ro,1)*rotAnimMx).xyz;\n    rd = (vec4(rd,1)*rotAnimMx).xyz;\n    \n    //InOut\n    float et = pow(cos(animT),200.0);\n    mat4 transAnimMx = TMatrix(vec3(0,et*4.0,0));\n    ro = (vec4(ro,1)*transAnimMx).xyz;\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n        \n    col += GetPointLight(p,vec3(1.0,0.7,0.0),vec3(-3.0,3.0,-4.0),0.8)*10.0;\n    col += GetPointLight(p,vec3(1.0,0.25,0.0),vec3(4.0,1.0,-4.0),0.2)*15.0;\n    col += GetPointLight(p,vec3(1.0,0.7,0.1),vec3(0.0,4.0,-6.0),0.5)*30.0;\n    \n    col *= (1.0-et);\n            \n    col += pow(col, vec3(.4545));\t// gamma correction\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}