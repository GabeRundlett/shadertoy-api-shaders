{
    "Shader": {
        "info": {
            "date": "1727200439",
            "description": "not soviet Union",
            "flags": 0,
            "hasliked": 0,
            "id": "MXBcD1",
            "likes": 3,
            "name": "not soviet union",
            "published": 3,
            "tags": [
                "color",
                "flag"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 89
        },
        "renderpass": [
            {
                "code": "// colormap\nvec3 palette(float t) {\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.);\n    vec3 d = vec3(0.563,0.416,0.457 + .2*sin(0.4*iTime));\n    \n    return a + b*cos( 6.28 * c * (t+d)); // A + B * cos ( 2pi * (Cx + D) )\n}\n#define PI 3.14159265359 \nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n#define time iTime\n#define resolution iResolution.xy\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n\n// used to rotate domain of noise function\nconst mat2 rot = mat2( 0.80,  0.60, -0.60,  0.80 );\n\n\nuniform vec2 mouse;\n\n\nbool star5(vec2 pos ,float r ,float rotation)\n{\n\tfloat gg = 5.0;\n\tpos.x -= 0.85;\n\tpos.x  +=  rotation;\n\tfloat t5 = PI / gg;\n\tfloat PI2 =  PI * 2.0;\n\tfloat ttt = mod(pos.x * PI2, 1.0/ gg * PI2 ) ;\n\tfloat res =  ttt  <  t5 ?  r * cos(PI2 / gg) / cos (PI2 / gg - ttt) : r * cos(PI2 / gg) / cos(ttt);\n\treturn pos.y <  res;\n}\n\nvec3 drawStar(vec2 position,vec2 starCenter,float rotation,float size)\n{\n\tposition.x+=2.5;\n\tposition.y+=1.0;\n\tvec2 kk = position -  starCenter;\n\treturn star5(vec2(atan(kk.y, kk.x)/(2.0*PI),length(kk)),size,rotation) ? vec3(250.0/256.0 ,244.0/256.0 ,8.0/256.0) : vec3(0.0);\n}\n\nvec3 flag(vec2 position) \n{\n\t\n\tbool valid = abs(position.x) <= 1.5 && abs(position.y) <= 1.0;\n\tvec3 res = vec3(0.0);\n\tres += valid ? vec3(244.0/255.0,0.0/255.0,2.0/255.0) : vec3(0.0, 0.0, 0.0);\n\t\n\tvec2 spos = vec2(atan(position.x, position.y), length(position));\n\t\n\tspos.y *= 3.;\n\tspos = spos.y*vec2(sin(spos.x), cos(spos.x));\n\tres += drawStar(spos,vec2(0.0,sqrt(5.)),1.0,1.0);\n\t\n\t\n\t\n\n\t\n\treturn res;\n}\n\n\n\n// fast implementation of fBM\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.500000*noise( p + 0.1 * sin(iTime ) + 0.2 * iTime); p = rot*p*2.02;\n    f += 0.031250*noise( p  ); p = rot*p*2.01;\n    f += 0.250000*noise( p ); p = rot*p*2.03;\n    f += 0.125000*noise( p + 0.1 * sin(iTime) + 0.2 * iTime ); p = rot*p*2.01;\n    f += 0.062500*noise( p + 0.3 * sin(iTime) ); p = rot*p*2.04;\n    f += 0.015625*noise( p );\n    return f/0.96875;\n}\n\n// nested fBM\nfloat pattern( vec2 p ) {\n    return fbm( p + fbm( p + fbm(p) ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 position = 2.0*( gl_FragCoord.xy - 0.5*resolution.xy ) / resolution.y;\n\n\tvec2 wave = vec2(sin(5.0*position.x+time) + 0.3*sin(position.y*7.0), sin(5.0*position.x+time));\n\t\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    vec3 col = palette(pattern(uv));\n    fragColor = vec4(col+flag(1.*position + 0.05 ),1.0);\n    fragColor*= vec4(flag(1.*position + 0.05 )*col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}