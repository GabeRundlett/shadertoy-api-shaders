{
    "Shader": {
        "info": {
            "date": "1726533746",
            "description": "Yet another one of these, yet another improvement I made by figuring out the fastest way I can see to do glsl targeted spn network cipher inspired feistel like block hashing. Made by Rik Riesmeijer, (CC0: copyright free).",
            "flags": 0,
            "hasliked": 0,
            "id": "4XXczs",
            "likes": 1,
            "name": "Simple iHash11 By RikR [133 Ch.]",
            "published": 3,
            "tags": [
                "test",
                "noise",
                "monochrome",
                "hash",
                "cc0",
                "short",
                "onetweet",
                "pseudo",
                "integer",
                "codegolf",
                "index",
                "free",
                "copyrightfree",
                "ihash11",
                "hashmap"
            ],
            "usePreview": 0,
            "username": "rikr",
            "viewed": 53
        },
        "renderpass": [
            {
                "code": "// Succinct Integer Hash11 By Rik Riesmeijer (CC0), No citation required.\nint h(int x) { return (0x37354953 ^ x) * x * (x ^ 0x28433481); }\n\nvoid mainImage(out vec4 c, vec2 v) {\n    c = vec4(h(int(v.x) ^ h(int(v.y)))) / vec4(~0u) + 0.5;\n}\n\n// ----------------------\n// Additional versions:\n// Better naming + bonus AAAAA version...\n// ----------------------\n// For full naming copy the lines below:\n// - The first is ihash11 the other is to get monochrome rgba color for ease of use.\n// int ihash11(int x) { return (0x37354953 ^ x) * x * (x ^ 0x28433481); }\n// vec4 monohash21(vec2 v) { return vec4(ihash11(int(v.x) ^ ihash11(int(v.y)))) / vec4(~0u) + 0.5; }\n//\n// I call this more than triple A hashing:   ;)\n// ----------------------\n// int AAA(int A) { return (0xAAAAAA ^ A) * A * (A ^ 0xAAAA); }\n//\n// void mainImage(out vec4 AAAAAA, vec2 AA) {\n//     int AAAA = int(AA.x), AAAAA = int(AA.y);\n//    AAAAAA = vec4(AAA(AAAA ^ AAA(AAAAA))) / vec4(0xAAAAAAAAU >> 1U | 0xAAAAAAAAU) + 0.5;\n// }\n//\n// -----+The End+--------\n// Made by Rik Riesmeijer \n// Free of copyright (CC0)\n// -----+~~~~~~~+--------\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}