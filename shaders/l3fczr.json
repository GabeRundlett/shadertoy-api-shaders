{
    "Shader": {
        "info": {
            "date": "1725727352",
            "description": "originals https://www.shadertoy.com/view/XXyGzh https://www.shadertoy.com/view/M3Xczn and starnest",
            "flags": 1,
            "hasliked": 0,
            "id": "l3fczr",
            "likes": 15,
            "name": "new colorful galaxy",
            "published": 3,
            "tags": [
                "galaxy",
                "stars",
                "universe"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 423
        },
        "renderpass": [
            {
                "code": "\n#define iterations 13\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define time iTime\n\n#define PI 3.141592\n#define TWOPI 6.283184\n\n#define R2D 180.0/PI*\n#define D2R PI/180.0* \n\nmat2 rotMat(in float r){float c = cos(r);float s = sin(r);return mat2(c,-s,s,c);}\n\n//fract -> -0.5 -> ABS  : coordinate absolute Looping\nfloat abs1d(in float x){return abs(fract(x)-0.5);}\nvec2 abs2d(in vec2 v){return abs(fract(v)-0.5);}\nfloat cos1d(float p){ return cos(p*TWOPI)*0.25+0.25;}\nfloat sin1d(float p){ return sin(p*TWOPI)*0.25+0.25;}\n\n#define OC 15.0\nvec3 Oilnoise(in vec2 pos, in vec3 RGB)\n{\n    vec2 q = vec2(0.0);\n    float result = 0.0;\n    \n    float s = 2.2;\n    float gain = 0.44;\n    vec2 aPos = abs2d(pos)*0.5;//add pos\n\n    for(float i = 0.0; i < OC; i++)\n    {\n        pos *= rotMat(D2R 30.);\n        float time = (sin(iTime)*0.5+0.5)*0.2+iTime*0.8;\n        q =  pos * s + time;\n        q =  pos * s + aPos + time;\n        q = vec2(cos(q));\n\n        result += sin1d(dot(q, vec2(0.3))) * gain;\n\n        s *= 1.07;\n        aPos += cos(smoothstep(0.0,0.15,q));\n        aPos*= rotMat(D2R 5.0);\n        aPos*= 1.232; \n    }\n    \n    result = pow(result,4.504);\n    return clamp( RGB / abs1d(dot(q, vec2(-0.240,0.000)))*.5 / result, vec3(0.0), vec3(1.0));\n}\n\n\nfloat easeFade(float x)\n{\n    return 1.-(2.*x-1.)*(2.*x-1.)*(2.*x-1.)*(2.*x-1.);\n}\nfloat holeFade(float t, float life, float lo)//lifeOffset\n{\n    return easeFade(mod(t-lo,life)/life);\n}\nvec2 getPos(float t, float life, float offset, float lo)\n{\n    return vec2(cos(offset+floor((t-lo)/life)*life)*iResolution.x/2.,\n    sin(2.*offset+floor((t-lo)/life)*life)*iResolution.y/2.);\n\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n            p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01) );// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.3-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 o =fragColor;\n    vec2 u =fragCoord;\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    \n     vec2 st = (fragCoord/iResolution.xy);\n            st.x = ((st.x - 0.5) *(iResolution.x / iResolution.y)) + 0.5;\n    float stMask = step(0.0, st.x * (1.0-st.x));\n\n\n    //st-=.5; //st move centor. Oil noise sampling base to 0.0 coordinate\n    st*=3.;\n    \n    vec3 rgb = vec3(0.30, .8, 1.200);\n    \n    \n    //berelium, 2024-06-07 - anti-aliasing\n    float AA = 1.0;\n    vec2 pix = 1.0 / iResolution.xy;\n    vec2 aaST = vec2(0.0);\n    vec3 col;\n    for(float i = 0.0; i < AA; i++) \n    {\n        for(float j = 0.0; j < AA; j++) \n        {\n            aaST = st + pix * vec2( (i+0.5)/AA, (j+0.5)/AA );\n            col += Oilnoise(aaST, rgb);\n        }\n    \n    }\n    \n    col /= AA * AA;\n\tuv.y*=iResolution.y/iResolution.x;\n    vec2 v = iResolution.xy, \n         w,\n         k = u = .2*(u+u-v)/v.y;    \n         \n    o = vec4(1,2,3,0);\n     \n    for (float a = .5, t = iTime*0.21, i; \n         ++i < 19.; \n         o += (1.+ cos(vec4(0,1,3,0)+t)) \n           / length((1.+i*dot(v,v)) * sin(w*3.-9.*u.yx+t))\n         )  \n        v = cos(++t - 7.*u*pow(a += .03, i)) - 5.*u,         \n        u *= mat2(cos(i+t*.02 - vec4(0,11,33,0))),\n        u += .005 * tanh(40.*dot(u,u)*cos(1e2*u.yx+t))\n           + .2 * a * u\n           + .003 * cos(t+4.*exp(-.01*dot(o,o))),      \n        w = u / (1. -2.*dot(u,u));\n              \n    o = pow(o = 1.-sqrt(exp(-o*o*o/2e2)), .3*o/o) \n      - dot(k-=u,k) / 250.;\n\tvec3 dir=vec3(uv*zoom,1.);\n\nvec2  resolution = iResolution.xy;\n\t\n    // Initialize color and texture accumulators\n    vec4 color = vec4(1.0, 2.0, 3.0, 0.0);\n    vec4 baseColor = color;\n    \n    // Initialize time and amplitude variables\n\n    float amplitude = 0.5;\n  vec2 coord = fragCoord * 2. - iResolution.xy;\n    // Normalized pixel coordinates (from 0 to 1)\n \n    \n    \n    float holeSize = iResolution.y/10.;\n    float holeLife = 2.;\n    \n    \n    vec3 final;\n    for (int i = 0; i<45; i++) {\n        vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(float(i),2.*float(i)+4.,4.*float(i)+16.));\n\n        float s = holeSize;\n        float lifeOffset = float(i)/2.;\n\n        vec2 pos = getPos(iTime, holeLife, float(i)*4.5,lifeOffset);\n\n        float d = distance(coord,pos)/s;\n        d = 1./d-.1;\n        \n        final += mix(vec3(0),col, d)*holeFade(iTime,holeLife,lifeOffset);\n    }\n\n     \n    vec2 uv2 = tanh(uv);\n     uv2*=10.;\n   \n    // Final color adjustment for visual output\n    \n\tvec3 from=vec3(1.,.5,0.5);\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n    \n  fragColor*=vec4(final*vec3(0.4,1.,1.)+o.xyz,1.);\n     \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}