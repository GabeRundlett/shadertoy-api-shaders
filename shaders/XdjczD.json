{
    "Shader": {
        "info": {
            "date": "1491455067",
            "description": "Started playing with an old mandelbrot shader and turned it into a visualizer inspired by Waveshaper",
            "flags": 32,
            "hasliked": 0,
            "id": "XdjczD",
            "likes": 4,
            "name": "Musical Mandelbrot",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "mandelbrot",
                "music",
                "visualizer"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 1123
        },
        "renderpass": [
            {
                "code": "vec4 toGrayScale(vec4 col){\n    float result = (col.x + col.y + col.z) / 3.0;\n    return vec4(result);\n}\n\nvec2 uv(vec2 coords){\n    return coords.xy / iResolution.xy;\n}\n\nfloat vertSobel(vec2 coords){\n    if(coords.x == 1.0 || coords.x == iResolution.x || coords.y == iResolution.y || coords.y == 1.0){\n        return 0.0;\n    }\n    else {\n       float upLeft = -toGrayScale(texture(iChannel1, uv(vec2(coords.x - 1.0, coords.y + 1.0)))).x;\n        float left = -2.0 * toGrayScale(texture(iChannel1, uv(vec2(coords.x - 1.0, coords.y)))).x;\n        float bLeft = -toGrayScale(texture(iChannel1, uv(vec2(coords.x - 1.0, coords.y - 1.0)))).x;\n        float upRight = toGrayScale(texture(iChannel1, uv(vec2(coords.x + 1.0, coords.y + 1.0)))).x;\n        float right = 2.0 * toGrayScale(texture(iChannel1, uv(vec2(coords.x + 1.0, coords.y)))).x;\n        float bRight = toGrayScale(texture(iChannel1, uv(vec2(coords.x + 1.0, coords.y - 1.0)))).x;\n        float total = (upLeft + left + bLeft + upRight + right + bRight) / 6.0;\n        return total;\n    }\n}\n\nfloat horizSobel(vec2 coords){\n    if(coords.x == 1.0 || coords.x == iResolution.x || coords.y == iResolution.y || coords.y == 1.0){\n        return 0.0;\n    }\n    else {\n       float upLeft = -toGrayScale(texture(iChannel1, uv(vec2(coords.x - 1.0, coords.y + 1.0)))).x;\n        float up = -2.0 * toGrayScale(texture(iChannel1, uv(vec2(coords.x, coords.y + 1.0)))).x;\n        float bLeft = -toGrayScale(texture(iChannel1, uv(vec2(coords.x - 1.0, coords.y - 1.0)))).x;\n        float upRight = toGrayScale(texture(iChannel1, uv(vec2(coords.x + 1.0, coords.y + 1.0)))).x;\n        float b = 2.0 * toGrayScale(texture(iChannel1, uv(vec2(coords.x, coords.y - 1.0)))).x;\n        float bRight = toGrayScale(texture(iChannel1, uv(vec2(coords.x + 1.0, coords.y - 1.0)))).x;\n        float total = (upLeft + up + bLeft + upRight + b + bRight) / 6.0;\n        return total;\n    }\n}\n\nconst float pi = 3.14159;\n\nvec3 getCol(vec2 v){\n    vec3 result;\n    float theta = atan(v.y / v.x);\n    result.x = exp(-(theta + pi / 4.0) * (theta + pi / 4.0) * 4.0);\n    result.y = exp(-theta * theta * 4.0);\n    result.z = exp(-(theta - pi / 4.0) * (theta - pi / 4.0) * 4.0);\n    return result;\n}\n\nvec3 sobel(vec2 coords){\n    vec2 helper;\n    helper.x = horizSobel(coords);\n    helper.y = vertSobel(coords);\n    float shade = length(helper);\n    vec3 col = getCol(helper);\n    return shade * col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x = fragCoord.x / iResolution.x;\n    vec3 col = sobel(fragCoord);\n\tfragColor = vec4(pow(col.x, .3),pow(col.y,.3),pow(col.z,.3), 1.0);\n    fragColor.xyz = fragColor.zzz;\n    fragColor.x *= exp(-(x - .8) * (x - .8) * 32.0);\n    fragColor.y *= exp(-(x - .65) * (x - .65) * 32.0);\n    fragColor.z *= exp(-(x - .5) * (x - .5) * 32.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 complexSquare(vec2 num){\n    return vec2(num.x * num.x - num.y * num.y, 2.0 * num.x * num.y);\n}\n\nvec2 mandelbrot(float time, vec2 coords){\n    vec4 sequence = vec4(0.0);\n    for(int n = 0; n < int(time * 80.); n++){\n        sequence.zw = sequence.xy;\n        if(n == 0){\n            sequence.xy += coords;\n        }\n        else {\n            sequence.xy = complexSquare(sequence.zw) + coords;\n        }\n    }\n    return sequence.xy;\n}\n\nvec2 derivMandelbrot(float time, vec2 coords){\n    return (mandelbrot(time + iTimeDelta, coords) - mandelbrot(time, coords)) / iTimeDelta;\n}\n\nvec2 coordAdjust(vec4 box, vec2 coords){\n    coords.xy /= iResolution.xy;\n    coords.x *= box.z - box.x;\n    coords.y *= box.w - box.y;\n    coords.xy += box.xy; \n    return coords;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float xmax = iResolution.x;\n    float ymax = iResolution.y;\n    vec4 box = vec4(-2.0, -0.5 * xmax / ymax, .5, 0.5 * xmax / ymax); \n    vec2 uv = coordAdjust(box, fragCoord);\n    float sound = texture(iChannel0, vec2(.8 * (1. - fragCoord.x / iResolution.x), .2)).x;\n    vec2 col = derivMandelbrot(0.25 - 0.5 * pow(sound, 2.0+2.0*sound), uv);\n\tfragColor = col.xyyx; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 21,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}