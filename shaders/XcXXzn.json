{
    "Shader": {
        "info": {
            "date": "1704824743",
            "description": "Comparison of Schlick's approximation (gray) to the exact Fresnel factor (green) for equal mixture of s- and p-polarized light.\nRed and blue are factors for pure-s and pure-p light respect.\nRelative refractive index varies from 1 (~air) to 2.5 (~diamond).",
            "flags": 0,
            "hasliked": 0,
            "id": "XcXXzn",
            "likes": 12,
            "name": "Schlick vs Fresnel",
            "published": 3,
            "tags": [
                "reflection",
                "refraction",
                "optics",
                "fresnel",
                "schlick"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 430
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Comparison of Schlick's approximation to the\n// exact Fresnel factor for equal mixture of s- and\n// p-polarized light.\n\n// https://en.wikipedia.org/wiki/Schlick%27s_approximation\nfloat schlick(float n,float theta)\n{\n    float r=(1.0-n)/(1.0+n);\n    return mix(pow(1.0-cos(theta),5.0),1.0,r*r);\n}\n\n// https://en.wikipedia.org/wiki/Fresnel_equation\n// NOTE: not actually a good way to calculate it in practice,\n// due to robustness/accuracy/performance issues,\n// but it'll serve for this plot.\n// P is the split between s- and p-polarized light.\nfloat fresnel(float n,float theta,float P)\n{\n    float phi=asin(sin(theta)/n);\n    float rs=-sin(theta-phi)/sin(theta+phi);\n    float rp=+tan(theta-phi)/tan(theta+phi);\n    return mix(rs*rs,rp*rp,P);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    float m=2.5; // Max. refractive index.\n    float n=mix(1.0,m,0.5+0.5*sin(0.25*iTime));\n    vec2 xy=fragCoord/iResolution.xy;\n    float a=3.14159265358979*xy.x/2.0;\n    float y=schlick(n,a);\n    float d=xy.y-y;\n    vec3 col=vec3(0.25);\n    col+=vec3(0.7)*smoothstep(1.5*fwidth(d),0.0,abs(d));\n    y=fresnel(n,a,0.5);\n    d=xy.y-y;\n    col+=vec3(0.4,0.8,0.4)*smoothstep(1.5*fwidth(d),0.0,abs(d));\n    y=fresnel(n,a,0.0);\n    d=xy.y-y;\n    col+=vec3(0.6,0.2,0.2)*smoothstep(1.5*fwidth(d),0.0,abs(d));\n    y=fresnel(n,a,1.0);\n    d=xy.y-y;\n    col+=vec3(0.2,0.2,0.6)*smoothstep(1.5*fwidth(d),0.0,abs(d));\n    if(xy.y>15.0/16.0)\n    {\n        float t=fract(m*xy.x);\n        col+=0.25*smoothstep(0.0,0.01,t*(1.0-t));\n        col.z+=0.25*smoothstep(n+0.01,n-0.01,m*xy.x);\n    }\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}