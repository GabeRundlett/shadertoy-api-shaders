{
    "Shader": {
        "info": {
            "date": "1707143472",
            "description": "UI Test 8",
            "flags": 0,
            "hasliked": 0,
            "id": "43l3z8",
            "likes": 26,
            "name": "UI Test 8",
            "published": 3,
            "tags": [
                "ui",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 885
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 128\n#define MAX_DIST 128.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define seg_0 0\n#define seg_1 1\n#define seg_2 2\n#define seg_3 3\n#define seg_4 4\n#define seg_5 5\n#define seg_6 6\n#define seg_7 7\n#define seg_8 8\n#define seg_9 9\n\nfloat random (vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nfloat segBase(vec2 p){\n    vec2 prevP = p;\n    \n    float size = 0.02;\n    float padding = 0.05;\n\n    float w = padding*3.0;\n    float h = padding*5.0;\n\n    p = mod(p,0.05)-0.025;\n    float thickness = 0.005;\n    float gridMask = min(abs(p.x)-thickness,abs(p.y)-thickness);\n    \n    p = prevP;\n    float d = B(p,vec2(w*0.5,h*0.5));\n    float a = radians(40.0);\n    p.x = abs(p.x)-0.11;\n    p.y = abs(p.y)-0.06;\n    float d2 = dot(p,vec2(cos(a),sin(a)));\n    d = max(d2,d);\n    return d;\n}\n\nfloat seg0(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    float mask = B(p,vec2(size,size*2.7));\n    d = max(-mask,d);\n    return d;\n}\n\nfloat seg1(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y+=size;\n    float mask = B(p,vec2(size*2.,size*3.7));\n    d = max(-mask,d);\n    \n    p = prevP;\n    \n    p.x+=size*1.9;\n    p.y-=size*3.2;\n    mask = B(p,vec2(size,size+0.01));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg2(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x-=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg3(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y = abs(p.y);\n    p.x+=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x+=0.06;\n    mask = B(p,vec2(size,size+0.01));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg4(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    \n    p.x+=size;\n    p.y+=0.08;\n    float mask = B(p,vec2(size*2.,size*2.0));\n    d = max(-mask,d);\n\n    p = prevP;\n    \n    p.y-=0.08;\n    mask = B(p,vec2(size,size*2.0));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg5(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x-=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x+=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg6(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x-=size;\n    p.y-=0.05;\n    float mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.y+=0.05;\n    mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg7(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.x+=size;\n    p.y+=size;\n    float mask = B(p,vec2(size*2.,size*3.7));\n    d = max(-mask,d);\n    return d;\n}\n\nfloat seg8(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y = abs(p.y);\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat seg9(vec2 p){\n    vec2 prevP = p;\n    float d = segBase(p);\n    float size = 0.03;\n    p.y-=0.05;\n    float mask = B(p,vec2(size,size));\n    d = max(-mask,d);\n\n    p = prevP;\n    p.x+=size;\n    p.y+=0.05;\n    mask = B(p,vec2(size*2.,size));\n    d = max(-mask,d);\n    \n    return d;\n}\n\nfloat checkChar(int targetChar, int char){\n    return 1.-abs(sign(float(targetChar) - float(char)));\n}\n\nfloat drawFont(vec2 p, int char){\n    p.x*=0.55;\n    float d = seg0(p)*checkChar(seg_0,char);\n    d += seg1(p)*checkChar(seg_1,char);\n    d += seg2(p)*checkChar(seg_2,char);\n    d += seg3(p)*checkChar(seg_3,char);\n    d += seg4(p)*checkChar(seg_4,char);\n    d += seg5(p)*checkChar(seg_5,char);\n    d += seg6(p)*checkChar(seg_6,char);\n    d += seg7(p)*checkChar(seg_7,char);\n    d += seg8(p)*checkChar(seg_8,char);\n    d += seg9(p)*checkChar(seg_9,char);\n    \n    return d;\n}\n\nfloat pattern1(vec3 p, float n){\n    vec3 prevP = p;\n    float d =drawFont(p.xy*vec2(0.15,0.135),int(mod(9.+iTime*n,10.0)));\n    d = max((abs(p.z)-0.1),d);\n    return d;\n}\n\nfloat pattern2(vec3 p, float n){\n    vec3 prevP = p;\n    float d = drawFont((p.xy*0.3)-vec2(-0.15,0.15),int(mod(8.+iTime*n*1.,10.0)));\n    float d2 = drawFont((p.xy*0.3)-vec2(0.15,0.15),int(mod(7.+iTime*n*1.2,10.0)));\n    d = min(d,d2);\n    d2 = drawFont((p.xy*0.3)-vec2(-0.15,-0.15),int(mod(5.+iTime*n*1.5,10.0)));\n    d = min(d,d2);\n    d2 = drawFont((p.xy*0.3)-vec2(0.15,-0.15),int(mod(3.+iTime*n*1.3,10.0)));\n    d = min(d,d2);\n    \n    d = max((abs(p.z)-0.1),d);\n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    \n    vec3 prevP = p;\n    p.y-=0.5*iTime;\n    vec2 id = floor(p.xy*0.5);\n    p.z-=3.;\n    p.xy = mod(p.xy,2.0)-1.0;\n    float n = random(id);\n    \n    float t = iTime*2.;\n    float d = 10.;\n    if(n<0.5){\n        d = pattern1(p,n);\n    } else {\n        d = pattern2(p,n);\n    }\n\n    return vec2(d,0.0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(15,-10,1));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff;\n    diffCol += col*vec3(0.5)*bounceDiff;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.); // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    col = diffuseMaterial(n,rd,p,vec3(0.1));\n    return col;\n}\n\nfloat dots(vec2 p){\n    vec2 prevP = p;\n    p.x = abs(p.x)-0.008;\n    p.y = abs(p.y)-0.007;\n    float d = length(p)-0.001;\n    p = prevP;\n    float d2 =  length(p)-0.001;\n    d = min(d,d2);\n    return d;\n}\n\nfloat circleUI(vec2 p){\n    vec2 prevP = p;\n    \n    p*=Rot(radians(20.*iTime));\n    p = DF(p,vec2(20.));\n    p-=vec2(0.25);\n    \n    p*=Rot(radians(45.));\n    float d = B(p,vec2(0.002,0.01));\n    \n    p = prevP;\n    p*=Rot(radians(20.*iTime));\n    p = DF(p,vec2(2.));\n    p*=Rot(radians(45.));\n    d = max(-B(p,vec2(0.04,1.)),d);\n    \n    p = prevP;\n    \n    float d2 = abs(length(p)-0.4)-0.001;\n    p*=Rot(radians(120.*sin(iTime*0.5)));\n    p = DF(p,vec2(1.3));\n    p*=Rot(radians(45.));\n    d2 = max(-B(p,vec2(0.1,1.)),d2);\n    p = prevP;\n    p*=Rot(radians(120.*sin(iTime*0.5)));\n    d2 = max(p.x,d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    d2 = abs(length(p)-0.28)-0.001;\n    p*=Rot(radians(-150.*sin(iTime*0.3)));\n    p = DF(p,vec2(1.));\n    p*=Rot(radians(45.));\n    d2 = max(-B(p,vec2(0.02,1.)),d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(20.*iTime));\n    p = DF(p,vec2(2.));\n    p-=vec2(0.25);\n    p*=Rot(radians(45.));\n    d2 = Tri(p,vec2(0.01));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(-5.*iTime));\n    p = DF(p,vec2(18.));\n    p-=vec2(0.22);\n    p*=Rot(radians(45.));\n    d2 = dots(p);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat centerUI(vec2 p){\n    vec2 prevP = p;\n    \n    p+=0.015;\n    p.y-=iTime*0.05;\n    p =mod(p,0.03)-0.015;\n    float d = length(p)-0.0012;\n    p = prevP;\n    p = abs(p)-0.08;\n    float a = radians(45.);\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    \n    p = prevP;\n    p.x = abs(p.x)-0.16;\n    float d2 = length(p)-0.005;\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(120.*sin(iTime*0.2)));\n    d2 = abs(length(p)-0.18)-0.004;\n    d2 = max(abs(p.y)-0.08,d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(-100.*sin(iTime*0.4)));\n    p.y = abs(p.y)-0.23;\n    d2 = Tri(p,vec2(0.01));\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat sideGuageUI(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.002,0.25));\n    p.x-=0.012;\n    p.y = abs(p.y)-0.09;\n    \n    float d2 = B(p,vec2(0.012,0.003));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x-=0.012;\n    p.y = abs(p.y)-0.247;\n    d2 = B(p,vec2(0.012,0.003));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x-=0.006;\n    p.y+=iTime*0.05;\n    p.y = mod(p.y,0.016)-0.008;\n    d2 = B(p,vec2(0.006,0.001));\n    d2 = max((abs(prevP.y)-0.25),d2);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat stripesBoxUI(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.12,0.015));\n    \n    p*=Rot(radians(40.));\n    p.x-=iTime*0.03;\n    p.x = mod(p.x,0.02)-0.01;\n    float d2 = abs(p.x)-0.004;\n    d = max(d2,d);\n    \n    p = prevP;\n    d2 = abs(B(p,vec2(0.13,0.025)))-0.0001;\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat drawUI(vec2 p){\n    vec2 prevP = p;\n   \n    float d = circleUI(p);\n    float d2 = centerUI(p);\n    d = min(d,d2);\n    p.x = abs(p.x)-0.7;\n    d2 = sideGuageUI(p);\n    d = min(d,d2);\n    p = prevP;\n    p.x+=0.5;\n    p.y-=0.35;\n    d2 = stripesBoxUI(p);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x-=0.5;\n    p.y+=0.35;\n    p.x*=-1.0;\n    d2 = stripesBoxUI(p);\n    d = min(d,d2);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.35);\n    ro.yz *= Rot(radians(-45.0));\n    ro.xy *= Rot(radians(15.));\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(0.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n    \n    float ud = drawUI(uv);\n    col = mix(col,vec3(1.),S(ud,0.0));\n    \n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}