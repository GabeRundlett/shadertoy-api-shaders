{
    "Shader": {
        "info": {
            "date": "1587410697",
            "description": "mouse controls camera\nsimplified from  blackle's \"access control\" https://www.shadertoy.com/view/ttG3R1\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tdBcW3",
            "likes": 13,
            "name": "chain link fence SDF",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "// Simplified version of \"access control\" by blackle https://shadertoy.com/view/ttG3R1\n// to isolate the chain link fence SDF ( + add mouse rotation ).\n// ( And accidentally created a nice background effect :-p )\n\n\n#define rot(a)  mat2(cos(m.x + vec4(0,11,33,0)))     // $Fab from https://www.shadertoy.com/view/XlsyWX\n\nfloat linedist(float x, float y, float w) {\n // return length( vec2( x, y )); // same for abs(y) // $Fab just an helix\n\treturn length( vec2( x, max( 0., abs(y)-w) ));   // $Fab https://www.desmos.com/calculator/j8v2sxntdt\n}\n\nfloat scene(vec3 p) {\n    float s = 1.25,\n         mx = 1e9;\n\n    p.z +=  floor(p.y/s) *1.5707;\n    p.y = ( fract(p.y/s) -.5 ) *s;\n    \n    for (float i = -1.; i <= 1.; i++) // $Fab: left turn, main branches, right turn\n    // float i = -1.;                 // $Fab: to test each part\n    {\n        vec3   g = p + vec3(0., i*s, i*1.5707 );\n        float d1 = linedist(g.x, g.y, .2) - .5,\n        //greets to FabriceNeyret2 https://www.shadertoy.com/view/XsdBW8\n              d2 = abs( sin( atan(g.y,g.x)/2.-g.z ) ) * min(1.,length(g.xy)), // $Fab: helix\n               d = length(vec2(d1,d2)) / sqrt(2.) -.05;\n        mx = min(d,mx);\n    }\n    return mx;\n}\n\nvec3 norm(vec3 p) { \n\tmat3 k = mat3(p,p,p) - mat3(0.001); // $Fab: cool way to generate neighborh points !\n\treturn normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])) );\n}\n\nfloat scene_col(vec2 uv) {\n    vec2 m = length(iMouse.xy)==0. ? vec2(0)\n             : (2.*iMouse.xy/iResolution.xy -1.)*1.57;\n\tvec3 cam = normalize(vec3(1.6,uv)),\n        init = vec3(-35,0,3), \n           p = init;\n    cam.xy *= rot(m.x);                 // $Fab: mouse rotates cam\n    cam.xz *= rot(m.y);\n    \n\tfor (int i = 0; i < 50; i++) {\n\t\tfloat dist = scene(p);\n\t\tif (dist < 0.003 || distance(p,init) > 100.) break;\n\t\tp += dist*cam;\n\t}\n\n\tvec3 n = norm(p);\n\tfloat fakediff = length( sin(n*3.) *.5+.5 ) / sqrt(3.),\n\t       fakeref = pow( length( sin(reflect(cam,n)*4.) *.5+.5 ) / sqrt(3.), 10.),\n\t        bright = .6;\n\treturn fakediff*bright + fakeref*1.5;\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n \tvec2 R = iResolution.xy,\n         U = (u - R*.5) / R.y; \n\tO = vec4( scene_col(U) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}