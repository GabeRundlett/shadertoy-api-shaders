{
    "Shader": {
        "info": {
            "date": "1659840904",
            "description": "was messing around with something to do backgrounds for rays that escape in a simple raytracer\n\nnoticed that there's an iDate uninform in shadertoy, used that for seeding a base color",
            "flags": 0,
            "hasliked": 0,
            "id": "NldyDN",
            "likes": 1,
            "name": "SphericalD",
            "published": 3,
            "tags": [
                "hash",
                "date",
                "sphericalcamera"
            ],
            "usePreview": 0,
            "username": "0xBAMA",
            "viewed": 72
        },
        "renderpass": [
            {
                "code": "#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x)) \n// from wrighter https://www.shadertoy.com/view/WlfyRs\nvec3 GetRdSpherical ( vec2 uv ) {\n    // polar coords\n    uv = vec2(atan(uv.y,uv.x),length(uv));\n    uv += 0.5;\n    uv.y *= 3.141592;\n    // parametrized sphere\n    return vec3(cos(uv.y)*cos(uv.x),sin(uv.y),cos(uv.y)*sin(uv.x));\n}\n\nuint WangHash ( inout uint seed ) {\n\tseed = uint( seed ^ uint( 61 ) ) ^ uint( seed >> uint( 16 ) );\n\tseed *= uint( 9 );\n\tseed = seed ^ ( seed >> 4 );\n\tseed *= uint( 0x27d4eb2d );\n\tseed = seed ^ ( seed >> 15 );\n\treturn seed;\n}\nfloat RandomFloat ( inout uint wangState ) { return float( WangHash( wangState ) ) / 4294967296.0; }\nvec3 DateBasedColor () {\n    uint seed = uint( iDate.x ) + 451u * uint( iDate.y ) + 1984u * uint( iDate.z );\n    return vec3( RandomFloat( seed ), RandomFloat( seed ), RandomFloat( seed ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = ( fragCoord / iResolution.xy ) - 0.5;\n    vec3 dir = GetRdSpherical( uv );\n    dir.xy = rot( iDate.a ) * dir.xy;\n    dir.yz = rot( iDate.a * 1.618 ) * dir.yz;\n    // compute a color\n    vec3 base = DateBasedColor();\n    vec3 color = vec3( base.r, 0.0, 0.0 ) * abs( dot( dir, vec3( 0.0, 1.0, 0.0 ) ) ) +\n                 vec3( 0.0, base.g, base.b ) * sin( 5.0 * dot( dir, vec3( 1.0, 0.0, 0.0 ) ) ) +\n                 vec3( 0.0, 0.0, base.b ) * abs( cos( dot( dir, vec3( 0.0, 0.0, 1.0 ) ) * 4.0 ) );\n    fragColor = vec4( color, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}