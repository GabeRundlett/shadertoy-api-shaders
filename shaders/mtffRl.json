{
    "Shader": {
        "info": {
            "date": "1693325434",
            "description": "My Test_01",
            "flags": 0,
            "hasliked": 0,
            "id": "mtffRl",
            "likes": 0,
            "name": "Motion Noise",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "Weirdo",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "vec2 direction = vec2(1.0, 1.0);\nfloat speed = 5.0;\n\nfloat rand(vec2 uv){\n    return fract(sin(dot(uv, vec2(12.985489, 5.889))) * 155894.);\n}\n\nfloat noise(vec2 uv){\n    vec2 i_uv = floor(uv);  //取整数\n    vec2 d_uv = fract(uv);  //取小数\n    d_uv = d_uv*d_uv*(3.-2.*d_uv); //smoothstep\n    \n    float shade_x0 = mix(rand(i_uv), rand(i_uv + vec2(1.,0.)), d_uv.x);\n    float shade_x1 = mix(rand(i_uv+vec2(0., 1.)), rand(i_uv + vec2(1.,1.)), d_uv.x);\n    float shade = mix(shade_x0, shade_x1, d_uv.y);\n    \n    return shade * shade;\n    \n}\n\nfloat motion_noise(vec2 uv, float s){\n    float shade;\n    shade = noise(uv + iTime * direction * speed * s) * max(0., cos(iTime));\n    shade += 0.5 * noise(uv) * max(0., cos(iTime));\n    \n    float addition_wave = noise(uv + direction * speed * s * 1.5 * sin(iTime));\n    \n    shade += addition_wave * max(0., cos(iTime));\n    \n    return shade * .4;\n}\n\nfloat recursive_noise(vec2 uv){\n    return motion_noise(uv + motion_noise(uv + motion_noise(uv, 0.3), 0.2), 0.5);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //vec3 col = vec3(noise(uv * vec2(10., 1.) + vec2(iTime, 0.)));\n    vec3 col = vec3(recursive_noise(uv * vec2(10., 10.)));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}