{
    "Shader": {
        "info": {
            "date": "1660899924",
            "description": "grabbed from https://shadertoy.com/view/sldyWl\ndata from https://github.com/harry7557558/Graphics/blob/master/fitting/neural-earth.ipynb\nmouse.y = depth in/out Earth",
            "flags": 0,
            "hasliked": 0,
            "id": "7tVyzR",
            "likes": 22,
            "name": "Earth from neural network",
            "published": 3,
            "tags": [
                "earth",
                "neural"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "// Earth Color neural network https://github.com/harry7557558/Graphics/blob/master/fitting/neural-earth.ipynb\n// grabbed from https://shadertoy.com/view/sldyWl\n\n#define rot(a)      mat2(cos(a+vec4(0,11,33,0))) \n\nvoid mainImage(out vec4 O, vec2 U) {\n    vec2 R = iResolution.xy;\n    U = ( U+U - R ) / R.y;\n    vec3 P = vec3(U,sqrt(1.-dot(U,U)));      // 3D location\n    P.yz *= rot(.5);                         // rotations\n    P.xz *= rot(-iTime);\n    if (iMouse.z > 0.) P *= 2.*iMouse.y/R.y; // mouse.y = depth in/out Earth\n    O.rgb = mapEarth(P.zxy);                 // Earth 3D texture\n // O /= length(O.rgb);                      // chrominance + sat. only\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Earth Color neural network https://github.com/harry7557558/Graphics/blob/master/fitting/neural-earth.ipynb\n// grabbed from https://shadertoy.com/view/sldyWl\n\n/* Siren neural network. cf  https://www.vincentsitzmann.com/siren/    https://medium.com/@sallyrobotics.blog/sirens-implicit-neural-representations-with-periodic-activation-functions-f425c7f710fa\n   Hidden layers:     sine activation\n   Last hidden layer: sigmoid activation\n   Output layer:      sigmoid activation\n*/\n\n#define sigmoid(x)     1./(1.+exp(-(x)))\n//#define sigmoid(x)   clamp(x+.5,0.,1.)\n//#define sigmoid(x)   .5+.5*sin(x)\n\nvec3 mapEarth(vec3 q) { // 491 coefficients\n  vec4   p = vec4(q,1),\n  // (12, 3) (12,)\n       v00 = sin( mat4(2.18,2.07,-.05,.04 , -1.16,2.08,1.81,-.2  , -.05,.05,-.81,-.96 , .59,-.09,-.03,-.77) *p ),\n       v01 = sin( mat4(-.53,.36,.87,-1.57 , -1.84,-2.31,-.71,1.15, .53,.02,-1.08,-.41 , .16,.15,-.68,-.43 ) *p ),\n       v02 = sin( mat4(.75,-2.02,-.46,2.03, -.64,1.16,-.56,-.29  , .75,.47,-.6,-.91   , -.69,-.53,.98,-.8 ) *p ),\n  // (12, 12) (12,)\n       v10 = sin( mat4(-1.98,2.1,-.12,-.7,-.17,.55,.35,-1.75,-.92,-.03,-.79,1.02,.21,-1.14,.01,1.08)*v00 + mat4(-.27,2.59,-.41,.37,-1.55,-.59,-1.15,.88,.8,.8,0,.19,.22,1.48,.66,.49            )*v01 + mat4(-1.7,-1.18,1.5,.63,-1.35,1.04,-.39,-.32,.68,2.29,-.28,-.68,-2.15,-1.66,-.37,-1.34)*v02 + vec4(-.22,-.5,-.02,1.34) ),\n       v11 = sin( mat4(1.09,1.62,-.72,2.4,.74,-.86,2.04,-.07,.65,-.85,1.16,.34,-1.85,1.28,1.14,.3  )*v00 + mat4(2.43,-2.37,1.71,-2.44,-.74,.51,-1.83,1.02,-.28,-.2,-2.83,1.08,-1.04,.83,.33,1.27)*v01 + mat4(.05,-.43,-.77,1.04,1.77,1.44,-2.19,1.4,-3.9,1.1,1.22,1.57,.48,.55,2.61,1.01      )*v02 + vec4(-.4,.69,-2.1,-.43)  ),\n       v12 = sin( mat4(-.15,.75,1.32,-.29,-.18,.21,.01,-2.14,.95,-1.85,1.95,-2.53,.94,.54,1.2,1.19 )*v00 + mat4(.31,-.66,1.91,-1.75,.87,-1.56,1.28,1.72,-.07,-1.4,-1.21,-.07,.96,-.56,-.28,1.24) *v01 + mat4(.93,-1.07,2.83,-1.15,-1.29,1.83,1.59,-.15,2.55,-1.7,-2.03,-2.1,.26,-.5,1.05,-.01 )*v02 + vec4(-1.11,.33,3.23,2.4) ),\n  // (12, 12) (12,)\n       v20 = sin( mat4(-1.22,1.04,-.4,.05,.61,-1.16,-1.25,-.9,-.41,-.48,-1.4,.6,-1.37,.45,-.1,-1.82)*v10 + mat4(-.53,-1.64,1.07,-.02,1.93,.9,.55,-2.21,1.2,1.01,-.92,-.92,.46,.11,-1.88,-2.65    )*v11 + mat4(-1.03,.62,-1.22,-.89,-2.27,-.92,-.59,.02,-.43,-1.38,2.93,1.32,2.02,.84,-.57,.91)*v12 + vec4(-.6,.73,-1.59,.64)    ),\n       v21 = sin( mat4(-3.2,.97,-.82,-.94,.42,-.26,-1.6,1.28,-.26,-2.17,.28,1.62,1.6,-.63,-1.1,.57 )*v10 + mat4(.81,1.76,-1.23,-1.59,-1.88,-.75,-.9,.13,-2.21,1.07,-.39,-1.54,-3.04,.5,-.56,-2.26)*v11 + mat4(-.98,-.73,.83,-2.97,-1.61,-.3,1.55,-2.04,1.46,.09,-.13,.88,-.18,.5,-.43,-.2    )*v12 + vec4(-.08,-2.18,-1.3,1.15) ),\n       v22 = sin( mat4(2,.27,.01,-.38,-.11,-.9,.38,-1.35,.3,3.89,-.1,.9,-1.36,-.66,-.52,-.22       )*v10 + mat4(-.09,-.52,.42,.15,2.85,.16,-.53,-1.15,.27,.32,.81,1.42,-.6,-.22,1.11,2.13        )*v11 + mat4(-1.96,-1.06,.06,.68,-.58,-1.41,.43,.43,-1.77,-.66,-1.72,-1.22,.19,1.11,1.15,.24)*v12 + vec4(.05,.85,-.72,-1.05)   ),\n  // (8, 12) (8,)\n       v30 = sigmoid( mat4(3.74,2.98,-2.85,1.67,2.69,2.42,-2,2.01,-6.28,-1.99,4.83,-1.36,-5.06,-3.07,1.08,-6.41)*v20 + mat4(-2.42,-.87,1.32,-.82,1.25,-6.41,-.49,-5.09,-.04,-.47,3.35,6.26,-3.75,-5.87,3.62,-3.36 )*v21 + mat4(-4.54,.41,-1.18,-3.14,-8.28,-.79,7.43,-2.98,8.06,-2.25,3.2,.48,-7.99,-3.18,1.12,-7.99  )*v22 + vec4(5.54,1.15,-2.06,2.02)),\n       v31 = sigmoid( mat4(4.2,-6.97,1.37,2.04,3.42,.97,4.22,1.71,-6.85,2.56,-4,-2.37,-2.77,-2.33,.46,-1.98    )*v20 + mat4(-2.43,1.87,-2.57,-1.06,-6.1,3.38,-2.83,-2.97,.16,9.4,-4.07,-.43,-4.72,4.07,-3.46,-3.17)*v21 + mat4(-1.52,5.93,-1.74,-.6,-3.53,-1.03,-2.08,-1.59,-2.03,6.98,-.7,-.64,-5.34,2.52,-2.22,-2.92)*v22 + vec4(.07,-4.84,.67,.98)   );\n  // (3, 8) (3,)\n  return vec3( sigmoid( dot(vec4(-.93,-3.13,1.01,-1.07),v30) + dot(vec4(-1.65,2.54,-1.78,5.45),v31) +.43 ),\n               sigmoid( dot(vec4(-.26,-2.16,.86,-.87)  ,v30) + dot(vec4(-1.08,2.09,-1.23,3.8) ,v31) +.01 ),\n               sigmoid( dot(vec4(1.31,-1.13,.97,-.65)  ,v30) + dot(vec4(-.61,1.37,-1.19,2.14) ,v31) -.71 )\n             );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}