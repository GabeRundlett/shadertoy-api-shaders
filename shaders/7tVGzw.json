{
    "Shader": {
        "info": {
            "date": "1637406725",
            "description": "Long time...",
            "flags": 0,
            "hasliked": 0,
            "id": "7tVGzw",
            "likes": 8,
            "name": "3D trunchet",
            "published": 3,
            "tags": [
                "trunchet"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 IWBTShyGuy\n\n#define rotation3D(n, t) mat3( \\\n    cos(t) + n.x * n.x * (1.0 - cos(t)), n.x * n.y * (1.0 - cos(t)) + n.z * sin(t), n.z * n.x * (1.0 - cos(t)) - n.y * sin(t), \\\n    n.x * n.y * (1.0 - cos(t)) - n.z * sin(t), cos(t) + n.y * n.y * (1.0 - cos(t)), n.y * n.z * (1.0 - cos(t)) + n.x * sin(t), \\\n    n.z * n.x * (1.0 - cos(t)) + n.y * sin(t), n.y * n.z * (1.0 - cos(t)) - n.x * sin(t), cos(t) + n.z * n.z * (1.0 - cos(t))  \\\n)\n\nconst mat3 T0 = rotation3D(normalize(vec3(0, 1, -1)), PI);\nconst mat3 T1 = rotation3D(normalize(vec3(1, 0, 1)), PI);\nconst mat3 T2 = rotation3D(normalize(vec3(0, 1, 1)), PI);\n\n// hexahedron group\nconst mat3[] S = mat3[](\n    mat3(1, 0, 0, 0, 1, 0, 0, 0, 1),\n    T2,\n    T1,\n    T2 * T1,\n    T1 * T2,\n    T2 * T1 * T2,\n    T0,\n    T2 * T0,\n    T1 * T0,\n    T2 * T1 * T0,\n    T1 * T2 * T0,\n    T2 * T1 * T2 * T0,\n    T0 * T1,\n    T2 * T0 * T1,\n    T1 * T0 * T1,\n    T2 * T1 * T0 * T1,\n    T1 * T2 * T0 * T1,\n    T2 * T1 * T2 * T0 * T1,\n    T0 * T1 * T2,\n    T2 * T0 * T1 * T2,\n    T1 * T0 * T1 * T2,\n    T2 * T1 * T0 * T1 * T2,\n    T1 * T2 * T0 * T1 * T2,\n    T2 * T1 * T2 * T0 * T1 * T2\n);\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\nvec3 normalTorus(vec3 p, vec2 t) {\n    vec2 q = t.x * normalize(p.xz);\n    return normalize(p - vec3(q.x, 0, q.y));\n}\n\nfloat sdist(in vec3 p, in vec3 q, out vec3 normal, out uint index) {\n    float rand = hash13(floor(p + q));\n    index = uint(rand * 24.0);\n    p = mod(p, 1.0);\n    p = S[index] * (p - 0.5) + 0.5;\n    float dist = sdTorus((p - vec3(0, 0, 0.5)).yzx, vec2(0.5, 0.05));\n    normal = normalTorus((p - vec3(0, 0, 0.5)).yzx, vec2(0.5, 0.05)).zxy;\n    float dist1 = sdTorus((p - vec3(1, 1, 0.5)).yzx, vec2(0.5, 0.05));\n    if (dist > dist1) {\n        dist = dist1;\n        normal = normalTorus((p - vec3(1, 1, 0.5)).yzx, vec2(0.5, 0.05)).zxy;\n    }\n    dist1 = length(p.xy - vec2(0.5)) - 0.05;\n    if (dist > dist1) {\n        dist = dist1;\n        normal = vec3(normalize(p.xy - vec2(0.5)), 0.0);\n    }\n    return dist;\n}\n\nvoid mainImage0(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 theta = vec2(0.15, 0.25) * iTime;\n    theta.y = sin(theta.y);\n    Camera camera = newCamera(\n        vec3(0, 0, -iTime * 0.5),\n        vec3(cos(theta.x) * cos(theta.y), sin(theta.y), sin(theta.x) * cos(theta.y)),\n        vec3(0, 1, 0),\n        PI / 4.0,\n        iResolution.x / iResolution.y\n    );\n    Ray ray = cameraRay(camera, fragCoord / iResolution.xy);\n\n    vec3 p = fract(ray.origin);\n    vec3 q = floor(ray.origin);\n    vec3 normal = vec3(0);\n    uint index;\n    for (int i = 0; i < 100; i++) {\n        float dist = sdist(p, q, normal, index);\n        if (dist < 0.00001) break;\n        p += dist * ray.direction;\n    }\n    normal = inverse(S[index]) * normal;\n\n    float c = 0.0;\n    float rDist = length(p);\n    if (rDist < 12.0) {\n        c = -dot(normal, ray.direction);\n    }\n    fragColor = vec4(c, c, c, clamp(rDist, 0.0, 12.0));\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    mainImage0(O,U);\n    \n// smart anti-aliasing\n// reference: https://shadertoyunofficial.wordpress.com/2021/03/09/advanced-tricks/\n\n// If defined, Activate AA, level: 2 or 3\n#define AA 2\n\n// If defined, visualize anti-aliased pixels.\n//#define VISUALIZE_AA\n#ifdef AA\n    if (fwidth(O.w) > 0.1) {\n        vec4 o;\n#if (AA == 2)\n        for (int k = 0; k < 4; k++) {\n              mainImage0(o,U + (vec2(k % 2, k / 2) - 0.5) / 1.5);\n              O += o;\n        }\n        O /= 5.0;\n#elif (AA == 3)\n        for (int k = 0; k < 9; k += k == 3 ? 2 : 1 ) {\n              mainImage0(o, U + vec2(k % 3 - 1, k / 3 - 1) / 3.0);\n              O += o;\n        }\n        O /= 9.0;\n#endif\n#ifdef VISUALIZE_AA\n        O = vec4(1);\n    } else {\n        O = vec4(0,0,0,1);\n#endif\n    }\n#endif\n\n    O.w = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.141592653;\n\nstruct Camera {\n    vec3 position;\n    vec3 direction;\n    vec3 up_direction; // not require dot(direction, up_direction) == 0\n    float fov;\n    float aspect; // x / y\n};\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nCamera newCamera(vec3 position, vec3 direction, vec3 up_direction, float fov, float aspect) {\n    Camera camera;\n    camera.position = position;\n    camera.direction = direction;\n    camera.up_direction = up_direction;\n    camera.fov = fov;\n    camera.aspect = aspect;\n    return camera;\n}\n\n// perspective camera ray, uv = fragCoord / iResolution.xy\n// cf: https://qiita.com/aa_debdeb/items/301dfc54788f1219b554\nRay cameraRay(in Camera camera, in vec2 uv) {\n    uv = uv * 2.0 - 1.0;\n    float radian = camera.fov;\n    float h = tan(radian * 0.5);\n    float w = h * camera.aspect;\n    vec3 right = normalize(cross(camera.direction, camera.up_direction));\n    vec3 up = normalize(cross(right, camera.direction));\n    vec3 direction = normalize(right * w * uv.x + up * h * uv.y + camera.direction);\n    Ray ray;\n    ray.origin = camera.position;\n    ray.direction = direction;\n    return ray;\n}\n\n\n// Hash without Sine https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}