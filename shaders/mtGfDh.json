{
    "Shader": {
        "info": {
            "date": "1702022234",
            "description": "A Christmas gift for the best girl in the world.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtGfDh",
            "likes": 10,
            "name": "Heart_For_LJM",
            "published": 3,
            "tags": [
                "heart"
            ],
            "usePreview": 0,
            "username": "tbx",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653\n#define COUNT 20.0\n\nfloat line(vec2 st, float width)\n{\n    return smoothstep(width, 0.0, abs(st.y - st.x));\n}\n\nfloat drawCoord(vec2 uv)\n{\n   float x = distance(vec2(uv.x, 0.0), vec2(0.0, 0.0));\n   float y = distance(vec2(0.0, uv.y), vec2(0.0, 0.0));\n   \n   return 1e-3 / x + 1e-3 / y;\n}\n\nfloat sphere(vec2 coord, vec2 p, float radius)\n{\n    float d = distance(p, coord);\n    d = abs(d - radius);\n    return 1e-3 / d;\n}\n\nfloat sphereShape(vec2 coord, vec2 p, float radius)\n{\n    float d = distance(p, coord);\n    d /= radius;\n    d = 1.0 - d;\n    d = clamp(d * 24.0, 0.0, 1.0);\n    return d;\n}\n\nfloat net(vec2 coord)\n{\n    float xline = cos(coord.x * PI * COUNT);\n    xline = step(1.0 - 1e-1, xline);\n    \n    float yline = cos(coord.y * PI * COUNT);\n    yline = step(1.0 - 1e-1, yline);\n    \n    return xline + yline;\n}\n\nfloat QuadrantIV(vec2 coord, float warp)\n{\n    float f = step(0.0, -coord.x);\n    f *= step(0.0, coord.y);\n    return abs(warp - f);\n}\n\nfloat QuadrantII(vec2 coord, float warp)\n{\n    float f = step(0.0, coord.x);\n    f *= step(0.0, -coord.y);\n    return abs(warp - f);\n}\n\nfloat getX(float i)\n{\n    float r = acos(i);\n    return r;\n}\n\n// Heart curve suggested by IQ, improved by Dave_Hoskins.\nfloat heart(vec2 p) {\n    // Center it more, vertically:\n    p.y += 0.6;\n    // This offset reduces artifacts on the center vertical axis.\n    const float offset = 0.3;\n    // (x^2+(1.2*y-sqrt(abs(x)))^2âˆ’1)\n    float k = 1.2 * p.y - sqrt(abs(p.x) + offset);\n    float r = p.x * p.x + k * k - 1.0;\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float asp = iResolution.x / iResolution.y;\n    \n    vec2 coord = uv * 2.0 - 1.0;\n    \n    vec2 aspCoord = vec2(coord.x * asp, coord.y);\n    \n    vec3 col = vec3(0.0);\n    \n    col += net(aspCoord) * 0.125;\n    \n    col += drawCoord(coord);\n    aspCoord *= 1.5;\n    \n    //https://www.shadertoy.com/view/XsfGRn\n    //Thanks to IQ\n    float tt = mod(iTime, 1.5)/1.5;\n    float ss = pow(tt, 0.2) * 0.5 + 0.5;\n    ss = 1.0 + ss * 0.5 * sin(tt * 6.2831 * 3.0 + aspCoord.y * 0.5) * exp(-tt * 4.0);\n    aspCoord *= vec2(0.5, 1.5) + ss * vec2(0.5,-0.5);\n    \n    col += vec3(abs(1e-1/heart(aspCoord)) * vec3(1.0, 0.2, 0.2));\n    /*\n    float time = iTime * 0.5;\n    float animate = tan(time + abs(sin(time)));\n    float f = clamp(animate - aspCoord.y, 0.0, 1.0);\n    \n    col += f * clamp(1.0 - heart(aspCoord), 0.0, 1.0) * vec3(1.0, 0.2, 0.2);\n    */\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}