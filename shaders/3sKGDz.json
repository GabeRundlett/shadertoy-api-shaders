{
    "Shader": {
        "info": {
            "date": "1570888794",
            "description": "idk",
            "flags": 32,
            "hasliked": 0,
            "id": "3sKGDz",
            "likes": 8,
            "name": "Raytraced Columns",
            "published": 3,
            "tags": [
                "ray",
                "marching",
                "column"
            ],
            "usePreview": 0,
            "username": "Angramme",
            "viewed": 459
        },
        "renderpass": [
            {
                "code": "vec3 at(vec2 uv){\n    return textureLod(iChannel0, uv, 0.).xyz;\n}\n\n//antialiasing\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0);\n    \n    vec2 px = 1./iResolution.xy;\n    \n    const float N = 0.;\n    for(float x=-N; x<=N; x++){\n        for(float y=-N; y<=N; y++){\n            col += at(uv + vec2(x,y)*px)/(abs(x)+abs(y)+1.);\n        }\n    }\n    //col /= pow(N*2.+1., 2.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "precision highp float;\n\n#define MAX_STEPS 400\n#define MIN_DIST .01\n#define MAX_DIST 50.\n\n#define M_PI 3.1415926535897932384626433832795\n#define COLUMN_CUTS 16.\n\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat Column(vec3 p){\n    float central = sdCylinder(p, vec2(.3, 2.));\n    \n    const float r = M_PI*2. / COLUMN_CUTS;\n    float a = atan(p.z,p.x);\n    a = floor(a/r)*r + r*.5;\n    \n    float cutin = sdCylinder(\n        p -vec3(cos(a)*.35, 0, sin(a)*.35), \n        vec2(.07, 2.1));\n      \n    \n    return max(central, -cutin);\n}\n\nfloat GetDist(vec3 p){\n    float plane = p.y + .75;\n    float sphere = distance(vec3(0, -.25, 3), p) - .5;\n    \n    \n    const float size = 6.;\n    vec3 pos = vec3(0, 1, 0);\n    pos.xz += floor(p.xz/size)*size;\n    pos.xz += size * .5;\n    \n    \n    //float cyli = Column(p -vec3(1.5, 1, 3));\n    float cyli = Column(p -pos -vec3(0,sin(iTime+pos.x*.15+pos.z*.1),0));\n    \n    return min(min(plane, sphere), cyli);\n}\n\nfloat SoftShadow(vec3 lo, vec3 ld, float k, float maxd){\n    float s = 1.;\n    for(float d0=0.; d0<maxd; ){\n        vec3 p = lo + ld*d0;\n        float d = GetDist(p);\n        if(d<MIN_DIST)return 0.;\n        d0 += d;\n        s = min(s, d*k/d0);\n    }\n    return s;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float d0 = 0.;\n    for(int i = 0; i<MAX_STEPS; i++){\n        vec3 p = d0 * rd + ro;\n        float d = GetDist(p);\n        \n        d0 += d;\n        if(d < MIN_DIST || d0 > MAX_DIST)break;\n    }\n    return d0;\n}\n\nvec3 GetNormal(vec3 p){\n    //vec2 eps = vec2(MIN_DIST + 0.001, 0);\n    vec2 eps = vec2(.001, 0);\n    return (vec3(\n        GetDist(p+eps.xyy),\n        GetDist(p+eps.yxy),\n        GetDist(p+eps.yyx)\n        ) - GetDist(p)) / eps.x;\n}\n\nvec3 GetSky(vec3 d){\n    return vec3(.8-d.y, .8-d.y, 1.);\n}\n\n\nstruct Material{\n    vec3 color;\n    vec2 refl;\n    float shininess;\n};\n\nMaterial GetMaterial(vec3 p){\n    //return ((p.y < -.72) ? ( Material(vec3(1), vec2(.6, .2)) ) : ( Material(vec3(1), vec2(0))) );\n    if(p.y < -.74){\n        return Material(\n            vec3( mod(dot(floor(p.xz/6.), vec2(1)), 2.) == 0. ? 1. : .5 ), \n            vec2(.3, .02),\n            20.\n        );\n    }else{\n        return Material(\n            vec3(.9,1.,1.), \n            //vec2(0), \n            vec2(.2,.02),\n            300.);\n    }\n}\n\nvec3 ComputeMaterial(vec3 p, vec3 n, vec3 rd, Material M){\n    vec3 color = vec3(0);\n    \n    vec3[] lights = vec3[](\n        vec3(250, 150, -200), vec3(1., .7, .7)\n        );\n    \n    M.color *= mix(.95, 1.05, textureLod(iChannel0, p*5., 0.).x);\n    \n    for(int i=0; i<lights.length(); i+=2){\n        vec3 lp = lights[i];\n        vec3 lc = lights[i+1];\n        vec3 ldiff = lp - p;\n        float ldist = length(ldiff);\n        vec3 L = ldiff / ldist;\n        //float shadow = RayMarch(p + n*MIN_DIST*1.5, L) > MAX_DIST ? 1. : .0;\n        float shadow = SoftShadow(p + n*MIN_DIST*1.5, L, 16., ldist);\n        \n        //diffuse\n        color += max(0., dot(n, L)) * lc * M.color * shadow;\n        \n        //specular\n        color += .5 * min(pow(max(0., dot(reflect(L, n), rd)), M.shininess),1.) * lc * shadow * M.color;\n    }\n\t\n    \n    //sky\n    color += (max(0., dot(vec3(0,1,0), n))*.5+.5)*vec3(.05,.05,.1) * M.color;\n    \n    //sky reflection\n    color += max(0., dot(vec3(0,-1,0), n)) *vec3(.08,.05,.02) * M.color;\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 m = iMouse / iResolution.xxxx;\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n    vec3 col = vec3(0);\n    \n    float a;\n    vec3 ro;\n    if(m.z > 0.){\n        float xr = -m.x * 2.*M_PI + M_PI;\n        ro = vec3(cos(xr) * 6., 2.5+m.y*-5., sin(xr) * 6. + 2.);\n    }else{\n        a = iTime * .2;\n        ro = vec3(sin(a) * 6., 2., cos(a) * 6. + 2.);\n    }\n    \n    vec3 lookat = vec3(.5,.5,3);\n    vec3 ww = normalize(lookat - ro);\n    vec3 uu = -normalize(cross(ww, vec3(0,1,0)));\n    vec3 vv = -normalize(cross(uu, ww));\n    vec3 rd = normalize(vec3(uv.x * uu + uv.y * vv + 1. * ww));\n    \n    float d = RayMarch(ro, rd);\n    \n    if(d < MAX_DIST){\n        \n        vec3 p = ro + rd*d;\n        vec3 n = GetNormal(p);\n        \n        n += textureLod(iChannel0, p*.5, 0.).xyz * .02;\n        //n = normalize(n);\n        \n        Material M = GetMaterial(p);\n\n        col += ComputeMaterial(p, n, rd, M);\n        \n        \n\t\t//reflecions\n        if(M.refl.x + M.refl.y > 0.){\n            vec3 r = reflect(rd, n);\n            float d2 = RayMarch(p + n * MIN_DIST*1.5, r);\n            vec3 p2 = p + r * d2;\n            vec3 n2 = GetNormal(p2);\n            Material M2 = GetMaterial(p2);\n\n            col += ComputeMaterial(p2, n2, r, M2)\n                * mix(M.refl.x, M.refl.y, max(0., dot(-rd, n)))\n                * M.color;\n        }\n\t\t\n        \n        //fog\n        float f = min(1., 1. / (pow(d*.01,2.) *4.*M_PI));\n        col = (1.-f)*GetSky(rd) + f*col;\n    }else{\n        \n        col += GetSky(rd);\n    }\n    \n    float gamma = 2.2;\n    col = pow(col, vec3(1.0/gamma));\n        \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}