{
    "Shader": {
        "info": {
            "date": "1474489123",
            "description": "trying some stuff wiff circles",
            "flags": 0,
            "hasliked": 0,
            "id": "MtG3D1",
            "likes": 0,
            "name": "Sono's Cirlcles",
            "published": 3,
            "tags": [
                "circles"
            ],
            "usePreview": 0,
            "username": "sonofbryce",
            "viewed": 493
        },
        "renderpass": [
            {
                "code": "#define CIRCLE_COUNT 12\t\t\t// number of circles drawn\n#define RING_COUNT 15\t\t\t// number of rings drawn\n\nvec2 r;\n\nfloat drawCircle(vec2 center, float radius)\n{\n    return 1.0 - smoothstep(0.0, radius, length(r - center));\n}\n\nvec3 drawRing(float circleRadius, float gap, float speed, float radius)\n{\n    vec3 color = vec3(0,0,0);\n    for (int i=0; i < CIRCLE_COUNT; i++ )\n    {\n        float j = float(i);\n\n        vec2 center = vec2( sin( (j * gap) + (iTime * speed)) * radius,\n                           cos( (j * gap) + (iTime * speed) ) * radius);\n        color += vec3(drawCircle(center, circleRadius));\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    r =  2.0 * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 color = vec3(0,0,0);\n    float alpha = 1.0;\n    \n    float speed = 1.0 + sin(iTime * 0.001) * 2.0;\n    float radius = 0.1 + ( (1.0 + sin(iTime * speed)) * 0.1);\n    float gap = 6.28 / float(CIRCLE_COUNT);\n    \n    float circleRadius = 0.0 + ( (1.0 + sin(iTime * speed)) * 0.1);\n    \n    //color += drawRing(circleRadius, gap, speed, radius);\n    \n    //color += drawRing(circleRadius, gap, speed, radius + 0.5);\n    \n    //color += drawRing(circleRadius, gap, speed, radius + 1.0);\n    \n    for (int i=0; i < RING_COUNT; i++)\n    {\n        float j = float(i) + 1.0;\n        float p = float(i+4) / float(RING_COUNT);\n        \n        float iRadius = radius + (j * (0.01 + ( (1.0+sin(iTime * speed)) * 0.2)) );\n        iRadius = radius + (radius * (j * j)) / j;\n        float iSpeed = speed * (j * 0.1);\n        float iCircleRadius = (circleRadius + (j * 0.025));\n        iCircleRadius =  0.01 + sin(circleRadius * j) * 0.5;\n        //iCircleRadius = (j * j) * 0.0025;\n        //iCircleRadius /= j;\n        //iCircleRadius = (circleRadius * 0.25) * (iRadius) * j;\n        \n        color += drawRing(iCircleRadius, gap, iSpeed, iRadius) * p;\n        \n    }\n    \n    \n    fragColor = vec4(color, alpha);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}