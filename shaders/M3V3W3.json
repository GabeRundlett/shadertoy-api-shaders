{
    "Shader": {
        "info": {
            "date": "1718345838",
            "description": "Add a rotating rainbow border around the content.",
            "flags": 0,
            "hasliked": 0,
            "id": "M3V3W3",
            "likes": 4,
            "name": "Rainbow Border",
            "published": 3,
            "tags": [
                "2d",
                "effect",
                "rainbow",
                "gaming"
            ],
            "usePreview": 0,
            "username": "megabits_mzq",
            "viewed": 133
        },
        "renderpass": [
            {
                "code": "#define TWO_PI 6.28318530718\n\nvec3 hsb2rgb(vec3 c){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0);\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n\nfloat drawRoundedRect(in float longSide, in float shortSide, in float differenceXY, float circleDistanceAlongShortSide) {\n    if (longSide < 0.) {\n        differenceXY = -differenceXY;\n    }\n\n    if (abs(longSide) < abs(differenceXY) + circleDistanceAlongShortSide) {\n        // Space between the circle along the longSide.\n        // Always use the longest distance possible to cover the space.\n        longSide = 0. - circleDistanceAlongShortSide;\n    } else {\n        // Increase the circle distance along the longSide by differenceXY.\n        longSide -= differenceXY;\n    }\n\n    if (abs(shortSide) < circleDistanceAlongShortSide) {\n        // Space between the circle along the shortSide.\n        // Same as above.\n        shortSide = 0. - circleDistanceAlongShortSide;\n    }\n\n    float rawDistanceToCenter = length(abs(vec2(longSide, shortSide)) - circleDistanceAlongShortSide);\n    return rawDistanceToCenter;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{      \n    float spaceSize = 50.;\n    float blur = 0.9;\n    float cornerRadius = 40.;\n    float saturation = 1.0;\n    float rotationSpeed = 1.0;\n    float rainbowCount = 1.;\n\n    vec2 resizeVector = vec2((iResolution.x - spaceSize) / iResolution.x, (iResolution.y - spaceSize) / iResolution.y);\n    vec2 resizedResolution = iResolution.xy * resizeVector;\n    // Move the coordinate zero to the center.\n    vec2 centeredCoordinate = gl_FragCoord.xy - resizedResolution / 2. / resizeVector;\n    \n    float circleDistanceAlongShortSide = min(resizedResolution.x, resizedResolution.y) / 2. - cornerRadius;\n\n    float differenceXY = (resizedResolution.x - resizedResolution.y) / 2.;\n    vec3 mask = vec3(0.);\n    if (differenceXY > 0.) {\n        // The resolution is wider than it is tall.\n        float distanceToCenter = drawRoundedRect(centeredCoordinate.x, centeredCoordinate.y, differenceXY, circleDistanceAlongShortSide);\n        float relativeDistanceToCenter = log(distanceToCenter / (resizedResolution.y / 2. - circleDistanceAlongShortSide));\n        mask = vec3(smoothstep(0., blur, relativeDistanceToCenter));\n    } else {\n        // The resolution is taller than it is wide.\n        differenceXY = abs(differenceXY);\n        float distanceToCenter = drawRoundedRect(centeredCoordinate.y, centeredCoordinate.x, differenceXY, circleDistanceAlongShortSide);\n        float relativeDistanceToCenter = log(distanceToCenter / (resizedResolution.x / 2. - circleDistanceAlongShortSide));\n        mask = vec3(smoothstep(0., blur, relativeDistanceToCenter));\n    }\n    \n    // Color background.\n    \n    vec2 uv = gl_FragCoord.xy/iResolution.xy;\n\n    // Use polar coordinates instead of cartesian.\n    vec2 toCenter = vec2(0.5) - uv;\n    float angle = atan(toCenter.y,toCenter.x) + iTime * rotationSpeed;\n    float radius = length(toCenter) * saturation;\n\n    // Map the angle (-PI to PI) to the Hue (from 0 to 1) and the Saturation to the radius\n    vec3 color = hsb2rgb(vec3((angle/TWO_PI) * rainbowCount, radius, 1.0));\n    vec4 camera = texture(iChannel0, vec2(uv.x, uv.y)); \n    fragColor = mix(camera, vec4(color, 1.0), mask.x);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}