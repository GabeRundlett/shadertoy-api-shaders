{
    "Shader": {
        "info": {
            "date": "1471911959",
            "description": "A single point light source, repeated infinitely along the X and Z axis using a modulo.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xtc3DX",
            "likes": 17,
            "name": "Infinite Light",
            "published": 3,
            "tags": [
                "light",
                "repetition",
                "raymarcher",
                "floor",
                "infinite"
            ],
            "usePreview": 0,
            "username": "jackdavenport",
            "viewed": 1057
        },
        "renderpass": [
            {
                "code": "float dstScene(vec3 ori, vec3 p) {\n \n    float disp = texture(iChannel1, p.xz/5.).x * .02;\n    float dist = p.y+disp;\n    \n    vec3 sv = vec3(2.,1.5,ori.z+9.)-p;\n    disp = texture(iChannel1,asin(normalize(sv).xy)/3.14159+.5).x*.03;\n   \tdist = min(dist, length(sv)-(1.5+disp));\n    \n    return dist;\n    \n}\n\nvec3 getLightVector(vec3 p) {\n \n    p.x -= 10.;\n    p.xz = mod(p.xz, vec2(20.));\n    \n    return vec3(10.,1.,10.)-p;\n    \n}\n\nvec3 calcNormal(vec3 ori, vec3 p) {\n\tvec2 e = vec2(.001,0.);\n    vec3 n = vec3(dstScene(ori,p+e.xyy)-dstScene(ori,p-e.xyy),\n                  dstScene(ori,p+e.yxy)-dstScene(ori,p-e.yxy),\n                  dstScene(ori,p+e.yyx)-dstScene(ori,p-e.yyx));\n    return normalize(n);\n}\n\nfloat raymarch(vec3 ori, vec3 dir) {\n\tfloat t = 0.;\n    for(int i = 0; i < 256; i++) {\n    \tfloat dst = dstScene(ori,ori+dir*t);\n        if(dst < .001*t || dst > 256.)\n            break;\n        t += dst * .75;\n    }\n    return t;\n}\n\nfloat softshadow( in vec3 eye, in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<64; i++ )\n    {\n\t\tfloat h = dstScene( eye, ro + rd*t );\n        res = min( res, 64.0*h/t );\n        t += clamp( h, 0.01, 0.40 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ori = vec3(0.,5.,-3.+iTime*5.);\n    vec3 dir = vec3(uv, 1.);\n    \n    vec3 f = normalize(vec3(5.*sin((iTime+2.5)*.5),0.,ori.z+8.5) - ori);\n    vec3 u = normalize(cross(f, vec3(0.,1.,0.)));\n    vec3 v = normalize(cross(u, f));\n    \n    dir = mat3(u,v,f) * dir;\n    dir = normalize(dir);\n   \t\n    float t = raymarch(ori,dir);\n    \n    vec3 col = texture(iChannel0, dir).xyz;\n    if(t < 256.) {\n    \tvec3 p = ori+dir*t;\n        vec3 n = calcNormal(ori,p);\n        vec3 r = normalize(reflect(dir,n));\n        \n        vec3 lv = getLightVector(p);\n        vec3 ld = normalize(lv);\n\n        float a = 1.-(length(lv)/10.);\n        float d = max(dot(ld,n),0.) * a;\n        float s = pow(max(dot(ld,r),0.), 60.) * a;\n\n        float sh = softshadow(ori,p,ld,.01,length(lv));\n        d *= sh;\n        s *= sh;\n        \n        vec2 uv = p.xz/5.;\n        if(p.y > .1) {\n        \tuv = asin(n.xy)/3.14159+.5;  \n        }\n        col = texture(iChannel1, uv).xyz*(.25+d)+s;\n        \n        vec3 rc = texture(iChannel0, r).xyz;\n        float f = 1.-pow(max(-dot(dir,n),0.),.35);\n        col = mix(col, rc, mix(.05,.5,f));\n    }\n    \n\tfragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}