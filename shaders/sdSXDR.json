{
    "Shader": {
        "info": {
            "date": "1619996750",
            "description": "I need to spend some time making a simpler version for just the first intersection (I doubt I'll beat iq though :D).",
            "flags": 0,
            "hasliked": 0,
            "id": "sdSXDR",
            "likes": 6,
            "name": "Tanglecube Ray Intersection",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "ray",
                "raycasting",
                "intersection",
                "tanglcube"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 143
        },
        "renderpass": [
            {
                "code": "struct Hit4 {\n    int numHits;\n    vec4 hits;\n};\n\n// Quartic solver I made here: https://www.shadertoy.com/view/fsB3Wt\nint solveQuartic(in float a, in float b, in float c, in float d, in float e, inout vec4 roots) {\n    b /= a; c /= a; d /= a; e /= a; // Divide by leading coefficient to make it 1\n\n    float bb = b * b;\n    float p = c - 0.375 * bb;\n    float q = d - 0.5 * b * c + 0.125 * bb * b;\n    float r = e - 0.25 * b * d + 0.0625 * bb * c - 0.01171875 * bb * bb;\n    int n = 0;\n\n    // Solve for an arbitary root to x^3 + 2px^2 + (p^2 - 4r)x - q^2\n    float ra = 2.0 * p;\n    float rb = p * p - 4.0 * r;\n    float rc = -q * q;\n\n    float raa = ra * ra;\n    float inflect = ra / 3.0;\n\n    float rp = rb - raa / 3.0;\n    float rq = raa * ra / 13.5 - ra * rb / 3.0 + rc;\n    float rppp = rp * rp * rp, rqq = rq * rq;\n\n    float p2 = abs(rp);\n    float v1 = 1.5 / rp * rq;\n\n    float lambda;\n    if (rqq * 0.25 + rppp / 27.0 > 0.0) {\n        float v2 = v1 * sqrt(3.0 / p2);\n        if (rp < 0.0) lambda = sign(rq) * cosh(acosh(v2 * -sign(rq)) / 3.0);\n        else lambda = sinh(asinh(v2) / 3.0);\n        lambda = -sqrt(p2 / 3.0) * lambda;\n    }\n\n    else lambda = sqrt(-rp / 3.0) * cos(acos(v1 * sqrt(-3.0 / rp)) / 3.0);\n    lambda = 2.0 * lambda - inflect;\n\n    // Solve two quadratic equations (checking for negative sqrts which should be complex)\n    if (lambda < 0.0) return n;\n    float sqrtLambda = sqrt(lambda);\n\n    float pLambda = p + lambda, qLambda = q / sqrtLambda;\n    float offs = 0.25 * b;\n\n    float foo = lambda - 2.0 * (pLambda + qLambda);\n    float bar = lambda - 2.0 * (pLambda - qLambda);\n\n    if (foo >= 0.0) {\n        roots.xy = (vec2(1.0, -1.0) * sqrt(foo) + sqrtLambda) * 0.5 - offs;\n        n += 2;\n    }\n\n    if (bar >= 0.0) {\n        vec2 others = (vec2(1.0, -1.0) * sqrt(bar) - sqrtLambda) * 0.5 - offs;\n        if (n > 0) roots.zw = others;\n        else roots.xy = others;\n        n += 2;\n    }\n\n    return n;\n}\n\n// Relying on reverse coefficients trick for now\nint solveQuartic2(in float a, in float b, in float c, in float d, in float e, inout vec4 roots) {\n    int nroots = solveQuartic(e, d, c, b, a, roots);\n    if (nroots == 0) return 0;\n    if (nroots == 2) roots.xy = 1.0 / roots.xy;\n    if (nroots == 4) roots = 1.0 / roots;\n    return nroots;\n}\n\n// Intersection\nHit4 iTangleCube(in vec3 ro, in vec3 rd, in float size, in float iso) {\n    ro /= size, rd /= size;\n    vec3 oo = ro * ro, od = ro * rd, dd = rd * rd;\n\n    float a =       dot(dd, dd);\n    float b = 4.0 * dot(od, dd);\n    float c = 6.0 * dot(oo, dd) - 1.25 * dot(rd, rd);\n    float d = 4.0 * dot(oo, od) - 2.50 * dot(ro, rd);\n    float e =       dot(oo, oo) - 1.25 * dot(ro, ro) + 0.6875 - 0.0625 * iso;\n\n    vec4 roots;\n    int numRoots = solveQuartic2(a, b, c, d, e, roots);\n\n    return  Hit4(numRoots, roots);\n}\n\n// Normal\nvec3 nTangleCube(in vec3 p, in float size, in float iso) {\n    p /= size;\n    return normalize(1.6 * p * p * p - p);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = ivec2(iMouse) == ivec2(0) ? vec2(0.0) : (iMouse.xy - center) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Environment map\n    fragColor = texture(iChannel0, rd);\n\n    float size = 1.25 + 0.25 * cos(iTime);\n    float iso = sin(iTime) * 5.0;\n\n    // Find the closest hit in front of the camera\n    Hit4 hit = iTangleCube(ro, rd, size, iso);\n    float t = -1.0;\n    vec3 hitPos;\n    for (int n=0; n < int(hit.numHits); n++) {\n        vec3 hitCandid = ro + rd * hit.hits[n];\n        if (hit.hits[n] > 0.0 && (t < 0.0 ? true : hit.hits[n] < t)) {\n            t = hit.hits[n];\n            hitPos = hitCandid;\n        }\n    }\n\n    // Render the shape if hitting\n    if (t > 0.0) {\n        vec3 n = nTangleCube(hitPos, size, iso);\n        float diff = abs(dot(n, -rd));\n        float checkers = mod(dot(floor(hitPos / size * 3.0), vec3(1.0)), 2.0);\n        fragColor = mix(vec4(0.5 + 0.5 * checkers, 0.0, 0.0, 1.0), texture(iChannel0, reflect(-rd, n)), 0.25);\n        fragColor.rgb *= diff;\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.75));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}