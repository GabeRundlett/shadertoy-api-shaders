{
    "Shader": {
        "info": {
            "date": "1544449992",
            "description": "Procedural texturing with analytical AA, inspired by work of Inigo Quilez(https://iquilezles.org/articles/filterableprocedurals/filterableprocedurals.htm). There are some cut corners, but all basic formulas should be mathematically correct.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lyBWd",
            "likes": 7,
            "name": "Road Crossing with Analytical AA",
            "published": 3,
            "tags": [
                "procedural",
                "antialiasing",
                "aa",
                "analytical",
                "texturing"
            ],
            "usePreview": 0,
            "username": "sopyer",
            "viewed": 613
        },
        "renderpass": [
            {
                "code": "// Based on https://www.shadertoy.com/view/XlcSz2\n// Procedural texturing with analytical AA\n// Uses basic box kernel with texture space axis aligned max screen space derivative kernel shape.\n\n\n// The MIT License\n// Copyright © 2019 Mykhailo Parfeniuk\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// The MIT License\n// Copyright © 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfloat saturate(float x)\n{\n    return clamp(x, 0.0, 1.0);\n}\n\n// Sampled vector functions\n\nfloat line(in float x)\n{\n    return ((x>0.0) && (x<1.0)) ? 1.0 : 0.0;\n}\n\nfloat dash(in float u, in float p)\n{\n    float frp_u = u - floor(u);\n    return line(frp_u/p);\n}\n\nfloat crossing(in float u, in float v)\n{\n    float l_u = line(u);\n    float l_v = line(v);\n    return l_u+l_v-l_u*l_v;\n}\n\nfloat rect(in float u, in float v)\n{\n    float l_u = line(u);\n    float l_v = line(v);\n    return l_u*l_v;\n}\n\n// Analytical AA vector functions\n\nfloat lineBox(in vec2 d_u)\n{\n    float u = d_u.x;\n    float du = d_u.y;\n    // analytical integral (box filter)\n    return (saturate(u+0.5*du) - saturate(u-0.5*du))/du;\n}\n\nfloat dashBox( in vec2 d_u, in float p )\n{\n    float u = d_u.x;\n    float du = d_u.y;\n    float frac_u = u - floor(u);\n    float p0 = frac_u-0.5*du;\n    float p1 = frac_u+0.5*du;\n    float flp1 = floor(p1);\n    float flp0 = floor(p0); \n    float frp1 = p1-floor(p1);\n    float frp0 = p0-floor(p0); \n    return p*((flp1-flp0) + (saturate(frp1/p)-saturate(frp0/p)))/du;\n}\n\nfloat crossingBox(in vec2 d_u, in vec2 d_v)\n{\n    float l_u = lineBox(d_u);\n    float l_v = lineBox(d_v);\n    return l_u+l_v-l_u*l_v;\n}\n\nfloat rectBox(in vec2 d_u, in vec2 d_v)\n{\n    float l_u = lineBox(d_u);\n    float l_v = lineBox(d_v);\n    return l_u*l_v;\n}\n\n// Helpers\n\nvec2 tranScale(vec2 dual, float s, float t)\n{\n    return vec2((dual.x + t)*s, dual.y*s);\n}\n\nfloat tranScale(float v, float s, float t)\n{\n    return (v + t)*s;\n}\n\nvec3 bg = vec3(0.25, 1.0, 0.0);\nvec3 grey = vec3(0.1);\nvec3 white = vec3(1);\n\n// --- AA Box filtered version ---\n\nvec3 aaBoxFilteredTexture( in vec2 p, in vec2 ddx, in vec2 ddy )\n{\n    vec3 color;\n    vec2 max_dd = max(ddx, ddy);\n    vec2 dual_u = vec2(p.x, max_dd.x);\n    vec2 dual_v = vec2(p.y, max_dd.y);\n    float f, pattern;\n    \n    // background\n    color = mix(bg, white, crossingBox(tranScale(dual_u, 0.5/6.75, 6.75), tranScale(dual_v, 0.5/6.75, 6.75)));\n    color = mix(color, grey, crossingBox(tranScale(dual_u, 0.5/6.45, 6.45), tranScale(dual_v, 0.5/6.45, 6.45)));\n    \n    // centerlines, just add as patterns do not intersect due to filter\n    f = 1.0-rectBox(tranScale(dual_u, 0.5/6.45, 6.45), tranScale(dual_v, 0.5/6.45, 6.45));\n    pattern = f * (lineBox(tranScale(dual_u, 1.0/0.2, 0.3)) +\n                   lineBox(tranScale(dual_v, 1.0/0.2, 0.3)) +\n                   lineBox(tranScale(dual_u, 1.0/0.2, -0.1)) +\n                   lineBox(tranScale(dual_v, 1.0/0.2, -0.1)) );\n\t// dashed, just add as patterns do not intersect due to filter\n    f = 1.0-rectBox(tranScale(dual_u, 0.5/10.7, 10.7), tranScale(dual_v, 0.5/10.7, 10.7));\n    pattern += f * (lineBox(tranScale(dual_u, 1.0/0.15, 3.45))*dashBox(tranScale(dual_v, 1.0/2.0, 1.0), 0.6) +\n                    lineBox(tranScale(dual_v, 1.0/0.15, 3.45))*dashBox(tranScale(dual_u, 1.0/2.0, 1.0), 0.6) +\n                    lineBox(tranScale(dual_u, 1.0/0.15, -3.3))*dashBox(tranScale(dual_v, 1.0/2.0, 1.0), 0.6) +\n                    lineBox(tranScale(dual_v, 1.0/0.15, -3.3))*dashBox(tranScale(dual_u, 1.0/2.0, 1.0), 0.6));\n    // stop lines, add again\n    pattern += rectBox(tranScale(dual_u, 1.0/0.4, -9.55), tranScale(dual_v, 1.0/5.55, -0.6)) +\n               rectBox(tranScale(dual_u, 1.0/0.4,  10.05), tranScale(dual_v, 1.0/5.55, -0.6)) +\n               rectBox(tranScale(dual_u, 1.0/0.4, -9.55), tranScale(dual_v, 1.0/5.55, 6.15)) +\n               rectBox(tranScale(dual_u, 1.0/0.4,  10.05), tranScale(dual_v, 1.0/5.55, 6.15)) +\n               rectBox(tranScale(dual_v, 1.0/0.4, -9.55), tranScale(dual_u, 1.0/5.55, -0.6)) +\n               rectBox(tranScale(dual_v, 1.0/0.4,  10.05), tranScale(dual_u, 1.0/5.55, -0.6)) +\n               rectBox(tranScale(dual_v, 1.0/0.4, -9.55), tranScale(dual_u, 1.0/5.55, 6.15)) +\n               rectBox(tranScale(dual_v, 1.0/0.4,  10.05), tranScale(dual_u, 1.0/5.55, 6.15));\n    // pedestrian crossing, add again\n    pattern += rectBox(tranScale(dual_v, 1.0/2.0,  9.05), tranScale(dual_u, 1.0/5.55, 6.15))*dashBox(tranScale(dual_u, 1.0/0.6, 5.925), 0.5) +\n               rectBox(tranScale(dual_v, 1.0/2.0,  9.05), tranScale(dual_u, 1.0/5.55, -0.6))*dashBox(tranScale(dual_u, 1.0/0.6, -0.825), 0.5) +\n               rectBox(tranScale(dual_v, 1.0/2.0,  -7.05), tranScale(dual_u, 1.0/5.55, 6.15))*dashBox(tranScale(dual_u, 1.0/0.6, 5.925), 0.5) +\n               rectBox(tranScale(dual_v, 1.0/2.0,  -7.05), tranScale(dual_u, 1.0/5.55, -0.6))*dashBox(tranScale(dual_u, 1.0/0.6, -0.825), 0.5) +\n               rectBox(tranScale(dual_u, 1.0/2.0,  9.05), tranScale(dual_v, 1.0/5.55, 6.15))*dashBox(tranScale(dual_v, 1.0/0.6, 5.925), 0.5) +\n               rectBox(tranScale(dual_u, 1.0/2.0,  9.05), tranScale(dual_v, 1.0/5.55, -0.6))*dashBox(tranScale(dual_v, 1.0/0.6, -0.825), 0.5) +\n               rectBox(tranScale(dual_u, 1.0/2.0,  -7.05), tranScale(dual_v, 1.0/5.55, 6.15))*dashBox(tranScale(dual_v, 1.0/0.6, 5.925), 0.5) +\n               rectBox(tranScale(dual_u, 1.0/2.0,  -7.05), tranScale(dual_v, 1.0/5.55, -0.6))*dashBox(tranScale(dual_v, 1.0/0.6, -0.825), 0.5);\n    color = mix(color, white, pattern);\n\n    return color;\n}\n\n// --- sampled version ---\n\nvec3 sampledTexture( in vec2 p )\n{\n    vec3 color;    \n    float u = p.x;\n    float v = p.y;\n    float f, pattern;\n\n        // background\n    color = mix(bg, white, crossing(tranScale(u, 0.5/6.75, 6.75), tranScale(v, 0.5/6.75, 6.75)));\n    color = mix(color, grey, crossing(tranScale(u, 0.5/6.45, 6.45), tranScale(v, 0.5/6.45, 6.45)));\n    \n    // centerlines, just add as patterns do not intersect due to filter\n    f = 1.0-rect(tranScale(u, 0.5/6.45, 6.45), tranScale(v, 0.5/6.45, 6.45));\n    pattern = f * (line(tranScale(u, 1.0/0.2, 0.3)) +\n                   line(tranScale(v, 1.0/0.2, 0.3)) +\n                   line(tranScale(u, 1.0/0.2, -0.1)) +\n                   line(tranScale(v, 1.0/0.2, -0.1)) );\n\t// dashed, just add as patterns do not intersect due to filter\n    f = 1.0-rect(tranScale(u, 0.5/10.7, 10.7), tranScale(v, 0.5/10.7, 10.7));\n    pattern += f * (line(tranScale(u, 1.0/0.15, 3.45))*dash(tranScale(v, 1.0/2.0, 1.0), 0.6) +\n                    line(tranScale(v, 1.0/0.15, 3.45))*dash(tranScale(u, 1.0/2.0, 1.0), 0.6) +\n                    line(tranScale(u, 1.0/0.15, -3.3))*dash(tranScale(v, 1.0/2.0, 1.0), 0.6) +\n                    line(tranScale(v, 1.0/0.15, -3.3))*dash(tranScale(u, 1.0/2.0, 1.0), 0.6));\n    // stop lines, add again\n    pattern += rect(tranScale(u, 1.0/0.4, -9.55), tranScale(v, 1.0/5.55, -0.6)) +\n               rect(tranScale(u, 1.0/0.4,  10.05), tranScale(v, 1.0/5.55, -0.6)) +\n               rect(tranScale(u, 1.0/0.4, -9.55), tranScale(v, 1.0/5.55, 6.15)) +\n               rect(tranScale(u, 1.0/0.4,  10.05), tranScale(v, 1.0/5.55, 6.15)) +\n               rect(tranScale(v, 1.0/0.4, -9.55), tranScale(u, 1.0/5.55, -0.6)) +\n               rect(tranScale(v, 1.0/0.4,  10.05), tranScale(u, 1.0/5.55, -0.6)) +\n               rect(tranScale(v, 1.0/0.4, -9.55), tranScale(u, 1.0/5.55, 6.15)) +\n               rect(tranScale(v, 1.0/0.4,  10.05), tranScale(u, 1.0/5.55, 6.15));\n    // pedestrian crossing, add again\n    pattern += rect(tranScale(v, 1.0/2.0,  9.05), tranScale(u, 1.0/5.55, 6.15))*dash(tranScale(u, 1.0/0.6, 5.925), 0.5) +\n               rect(tranScale(v, 1.0/2.0,  9.05), tranScale(u, 1.0/5.55, -0.6))*dash(tranScale(u, 1.0/0.6, -0.825), 0.5) +\n               rect(tranScale(v, 1.0/2.0,  -7.05), tranScale(u, 1.0/5.55, 6.15))*dash(tranScale(u, 1.0/0.6, 5.925), 0.5) +\n               rect(tranScale(v, 1.0/2.0,  -7.05), tranScale(u, 1.0/5.55, -0.6))*dash(tranScale(u, 1.0/0.6, -0.825), 0.5) +\n               rect(tranScale(u, 1.0/2.0,  9.05), tranScale(v, 1.0/5.55, 6.15))*dash(tranScale(v, 1.0/0.6, 5.925), 0.5) +\n               rect(tranScale(u, 1.0/2.0,  9.05), tranScale(v, 1.0/5.55, -0.6))*dash(tranScale(v, 1.0/0.6, -0.825), 0.5) +\n               rect(tranScale(u, 1.0/2.0,  -7.05), tranScale(v, 1.0/5.55, 6.15))*dash(tranScale(v, 1.0/0.6, 5.925), 0.5) +\n               rect(tranScale(u, 1.0/2.0,  -7.05), tranScale(v, 1.0/5.55, -0.6))*dash(tranScale(v, 1.0/0.6, -0.825), 0.5);\n    color = mix(color, white, pattern);\n\n    return color;\n}\n\n// Helpers\n\nvec2 toUV( in vec3 pos )\n{\n\treturn pos.xz;\n}\n\n\nvoid calcCamera( out vec3 ro, out vec3 ta )\n{\n\tfloat an = 0.1*iTime;//0.1*sin(3.0*iTime);\n\tro = vec3( 6.0*cos(an), 200.0*abs(0.5-0.5*sin(2.1005*an))+1.05, 6.0*sin(an) );\n    ta = vec3( 0.0, 1.0, 0.0 );\n}\n\nvoid calcRayForPixel( in vec2 pix, out vec3 resRo, out vec3 resRd )\n{\n\tvec2 p = (-iResolution.xy + 2.0*pix) / iResolution.y;\n\t\n     // camera movement\t\n\tvec3 ro, ta;\n\tcalcCamera( ro, ta );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\t\n\tresRo = ro;\n\tresRd = rd;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;\n\t\n\tvec3 ro, rd, ddx_ro, ddx_rd, ddy_ro, ddy_rd;\n\tcalcRayForPixel( fragCoord + vec2(0.0,0.0), ro, rd );\n\tcalcRayForPixel( fragCoord + vec2(1.0,0.0), ddx_ro, ddx_rd );\n\tcalcRayForPixel( fragCoord + vec2(0.0,1.0), ddy_ro, ddy_rd );\n\t\t\n    \n\tvec3 col = vec3(0.9);\n    \n    // intersect plane\n\tfloat t = (0.01-ro.y)/rd.y;\n\tif( t>0.0 )\n\t{\n\t\tvec3 nor = vec3(0.0,1.0,0.0); \n\t\tvec3 pos = ro + t*rd;\n        \n#if 1\n\t\t// -----------------------------------------------------------------------\n        // compute ray differentials by intersecting the tangent plane to the  \n        // surface.\t\t\n\t\t// -----------------------------------------------------------------------\n\n\t\t// computer ray differentials\n\t\tvec3 ddx_pos = ddx_ro - ddx_rd*dot(ddx_ro-pos,nor)/dot(ddx_rd,nor);\n\t\tvec3 ddy_pos = ddy_ro - ddy_rd*dot(ddy_ro-pos,nor)/dot(ddy_rd,nor);\n\n\t\t// calc texture sampling footprint\t\t\n\t\tvec2     uv = toUV(     pos );\n\t\tvec2 ddx_uv = toUV( ddx_pos ) - uv;\n\t\tvec2 ddy_uv = toUV( ddy_pos ) - uv;\n#else\n\t\t// -----------------------------------------------------------------------\n        // Because we are in the GPU, we do have access to differentials directly\n        // This wouldn't be the case in a regular raytrace.\n\t\t// It wouldn't work as well in shaders doing interleaved calculations in\n\t\t// pixels (such as some of the 3D/stereo shaders here in Shadertoy)\n\t\t// -----------------------------------------------------------------------\n\t\tvec2 uvw = toUV( pos );\n\n\t\t// calc texture sampling footprint\t\t\n\t\tvec2 ddx_uvw = dFdx( uvw ); \n        vec2 ddy_uvw = dFdy( uvw ); \n#endif\n\n        // Texture\n        if( p.x<0.0 ) col = vec3(1.0)*sampledTexture( uv );\n        else          col = vec3(1.0)*aaBoxFilteredTexture( uv, abs(ddx_uv), abs(ddy_uv) );\n\t}\n\t\n\tcol *= smoothstep( 1.0, 2.0, abs(p.x)/(2.0/iResolution.y) );\n\n    // \"gamma correction\"\t\n\tcol = pow( col, vec3(0.4545) );\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}