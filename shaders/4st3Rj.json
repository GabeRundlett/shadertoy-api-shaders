{
    "Shader": {
        "info": {
            "date": "1450880278",
            "description": "A fast way to generate a screen space procedural noise",
            "flags": 0,
            "hasliked": 0,
            "id": "4st3Rj",
            "likes": 4,
            "name": "Procedural noise generator",
            "published": 3,
            "tags": [
                "noiserandomprocedural"
            ],
            "usePreview": 0,
            "username": "BiiG",
            "viewed": 892
        },
        "renderpass": [
            {
                "code": "//\n// Example implementation of a fast procedural noise\n// https://oneoverzerosite.wordpress.com/2015/12/23/procedural-noise-generation-in-a-pixel-shader/\n//\n// Created by Guillaume Carrez\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float cZoomFactor = 1.0;\n    \n    fragCoord.xy = floor(fragCoord.xy/cZoomFactor)*cZoomFactor;\n    // Seed will be based on pixel coord, works pretty well for 1080p\n\tfloat seed = (fragCoord.x+0.5) * (fragCoord.y+1.0);\n\n    \n    // Compute 2 frequency perturbations\n    float noise = seed * (1.0-(1.0/127.0));\t\t\t// 1st octave\n\tnoise *= fract ( noise * (1.0/127.0) );\t\t\t// 2nd\n\tnoise = fract ( noise );\n    \n    \n    seed = (fragCoord.x+0.5) * (fragCoord.y+1.0);\n    noise = fract ( sin(seed) * 43758.5453123);\n\n    // Add some time update\n\t//noise = fract(noise+iTime);\n    \n    \n    \n\n    // Output result as a grey scale value\n\tfragColor = vec4(noise,noise,noise,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}