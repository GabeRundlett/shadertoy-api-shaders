{
    "Shader": {
        "info": {
            "date": "1723083218",
            "description": "ring animate on ring ",
            "flags": 0,
            "hasliked": 0,
            "id": "XcjcDc",
            "likes": 1,
            "name": "ring animate on ring ",
            "published": 3,
            "tags": [
                "ring"
            ],
            "usePreview": 0,
            "username": "571574085",
            "viewed": 88
        },
        "renderpass": [
            {
                "code": "// 蓝光光环着色器  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )  \n{  \n    // 将像素坐标归一化（从0到1）  \n    vec2 uv = fragCoord / iResolution.xy;  \n    \n    // 将坐标系统中心化  \n    uv = uv * 2.0 - 1.0; // 将坐标范围从[-1, 1]转换  \n    uv.x *= iResolution.x / iResolution.y; // 根据屏幕宽高比调整x坐标  \n    \n    // 计算与中心的距离  \n    float dist = length(uv); // 计算从中心到当前点的距离  \n    \n    // 创建基础光环  \n    float ring = smoothstep(0.5, 0.4, dist) * smoothstep(0.3, 0.4, dist);   \n    // 使用平滑过渡函数生成光环的形状  \n    \n    // 为光环增加一些变化  \n    float ring2 = 0.1 * sin(atan(uv.y, uv.x) * 10.0 + iTime * 2.0) + ring;   \n    ring2 *=ring;\n    // 利用角度和时间增加光环的波动效果  \n    \n    // 创建颜色渐变  \n    vec3 col =   vec3(0.1, 0.4, 0.8) * ring2;   \n    // 基础颜色 + 根据ring变化的渐变颜色  \n    \n    // 增加一些动态效果  \n    float angle = iTime; // 你可以根据需要调整这个角度  \n\n\n    // 使用旋转后的坐标进行计算  \n    col += 0.25 * sin(iTime + uv.x * 10.0) * sin(iTime + uv.y * 10.0) * ring;  \n    // 在颜色中加入基于时间的动态变化  \n    \n    // 输出到屏幕  \n    fragColor = vec4(col, 1.0); // 生成最终的颜色输出，透明度为1.0  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}