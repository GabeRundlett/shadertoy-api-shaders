{
    "Shader": {
        "info": {
            "date": "1597701361",
            "description": "This article helped to overcome the annoying problem with glitchy surfaces. The problem was in `mod` operator, which made SDF discontinuous: http://connorahaskins.com/menger_sponge.html",
            "flags": 0,
            "hasliked": 0,
            "id": "3tXfW2",
            "likes": 4,
            "name": "Repared Menger z",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 430
        },
        "renderpass": [
            {
                "code": "// \"RayMarching starting point\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 200\n#define MAX_DIST 200.\n#define SURF_DIST .0001\n\n#define S smoothstep\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\n\nfloat random (float x) {\n    return fract(12345.67 * sin(x * 654.24));\n}\n\n\n\nfloat GetDist(vec3 p) {\n    \n\n\n    vec3 ps = p;\n    ps.y += iTime * -.4;\n    float sInterval = .2;\n    ps.xz += vec2(.1, 0.) * Rot(99.123 * random(floor((ps.y) / sInterval)));\n    //ps.xz *= 1. + 0.5 * random(floor((ps.y) / sInterval));\n    ps = mod(ps + sInterval / 2., sInterval) - sInterval / 2.;\n    float spheres = length(ps)-0.003;\n\n    p.y += iTime * 1.;\n    \n    p.xz = abs(p.xz);\n    p.xz *= Rot(p.y / 3.);\n    //p.xz *= Rot(sin(iTime / 10.));\n    p.xz += 0.69 * sin(iTime * 0.4 / vec2(1.7, 1.1));\n\n    \n\n    //p.z = abs(p.z);\n    //p.z += 0.1 * sin(iTime / 1.4);\n    //p.z -= 0.1 * sin(iTime);\n\n    float box = sdBox(p, vec3(4.4));\n    float box2 = sdBox(p, vec3(0.1, 0.1, 200000.));\n        \n    \n    float hole = 9999999990.;\n\n    float holiness = 1.258;//2. + 2. * (0.5 + 0.5 * sin(p.y + iTime));\n    float iterations = 5.;\n    for (float axes = 0.; axes <= 2.; axes++) {\n        p = p.zxy;\n\t    vec3 pm = p;\n   \t\tfor (float i = 1.; i <= iterations; i++) {\n            pm *= i;\n            pm += 1.;\n        \tpm.xy = mod(pm.xy, 2.);\n            pm -= 1.;\n\t\t    hole = min(hole, sdBox(pm, vec3(1./holiness/i, 1./holiness/i, 9999999999.)) / i);\n\t    }\n    }\n    \n    //hole /= 2. * iterations;\n    //hole *= 3.9;\n    \n    return min(spheres, max(0., -hole));\n    //return max(box, hole);\n    //return hole;\n}\n\n\n\n\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\n\n//float sdBox( in vec2 p, in vec2 b )\n//{\n//    vec2 d = abs(p)-b;\n//    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n//}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    //vec2 size = vec2(0.1, 0.1);\n    //uv = abs(uv);\n    //uv -= size;\n    //uv *= 10.;\n    \n    //uv = mod(uv + 0.2, 0.4);\n    //uv -= 0.2;\n    //uv *= Rot(3.1415 / 4.);\n    \n    //float col = 5. * sdBox(uv, size);\n    //col = fract(col);\n    \n    //fragColor = vec4(vec3(col), 1.0);\n\n    \n    ///////////////////////////////////////////////////\n    \n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    //vec3 ro = vec3(-0.0, -2.0, -0.0);\n    vec3 ro = vec3(.0, .0, .0);\n    vec3 camDir = vec3(0.001, 1., 0);\n    \n    //camDir.yz *= Rot(-m.y*3.14+1.);\n    //camDir.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, ro + camDir, 1.);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n    \t//float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n    \t//col += dif;\n\t    //col = pow(col, vec3(.4545));\t// gamma correction\n        //col = n / 2. + 0.5;\n        //col *= n.x;\n        col = vec3(1.5 / d);\n    }\n    \n    \n    fragColor = vec4(vec3(col), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}