{
    "Shader": {
        "info": {
            "date": "1686136505",
            "description": "Idea: https://www.youtube.com/watch?v=EQl4ODOsTMQ\nYes I am very aware that most of this code looks like someone fighting the machine and themselves for too long and that would be correct.\nIt should be possible to use the sound tab in place of soundcloud.",
            "flags": 96,
            "hasliked": 0,
            "id": "Dt3XWj",
            "likes": 21,
            "name": "boykisser",
            "published": 3,
            "tags": [
                "music",
                "meme",
                "boykisser"
            ],
            "usePreview": 1,
            "username": "Sunpy",
            "viewed": 564
        },
        "renderpass": [
            {
                "code": "#define ETA 1.57078\n#define PI 3.14155\n#define TAU 6.2831\n\n#define SEED 0.12345679\n\nconst int ORDER_STEP[] = int[](1,0,1,2,2,2);\nconst int ORDER_SPIN[] = int[](-3,4,3,5);\n\nconst float TIME_STEP = 60./110.; // BPM is 110\nconst float TIME_SPIN = 60./110./2.;\n\nfloat rand (vec2 p) {\n    return fract(sin(dot(p.xy,\n                         vec2(6.8245,7.1248)))*\n        9.1283);\n}\n\nfloat particle(vec2 uv, float identifier, vec2 anchor, vec2 velocity, float creationTime, float time) {\n    float particleTime = max(0., time - creationTime);\n\n    float size = 1.-max(.9, particleTime); // max(0., 1. - particleTime) * .1; //.1 - (max(0.8,0.9) - .8) * 5. *.1;//max(0., clamp(particleTime, .01, .4));\n\n    vec2 velocityOffset = velocity * particleTime;\n    vec2 gravityOffset = vec2(0.,.4) * pow(particleTime, 1.798);\n    \n    vec2 point = anchor + velocityOffset + gravityOffset;\n    \n    float dist = distance(uv, point);\n    float hit = smoothstep(size, 0., dist);\n    \n    return hit;\n}\n\n#define C(c) U.x-=.5; v+= char(U,64+c)\nfloat char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return 0.;\n\treturn textureGrad( iChannel2, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) ).r;\n}\n\nmat2 rot(in float a){\n    return mat2(cos(a),-sin(a),\n                sin(a),cos(a));\n}\n\nbool shouldDisplayError() {\n    return iChannelTime[1] < 0.001 && iTime > 2. && iTime < 45.;\n}\n\nfloat displayError(vec2 uv) {\n    vec2 U = (uv - vec2(-1.3, .6))*64.0/6.;\n    float v = 0.;\n    C(6);C(37);C(52);C(35);C(40);C(41);C(46);C(39);C(-32);C(33);C(53);C(36);C(41);C(47);C(-32);C(38);C(50);C(47);C(45);C(-32);C(51);C(47);C(53);C(46);C(36);C(35);C(44);C(47);C(53);C(36);C(-32);C(41);C(51);C(-32);C(52);C(33);C(43);C(41);C(46);C(39);C(-32);C(41);C(52);C(51);C(-32);C(52);C(41);C(45);C(37);C(-18);C(-18);C(-18);\n    \n    U = (uv - vec2(-.4, -.6))*64.0/6.;\n    C(16);C(44);C(37);C(33);C(51);C(37);C(-32);C(55);C(33);C(41);C(52);C(-32);C(-6);C(-23);\n    \n    for (float t = 0.; t < 1.; t+=.1) {\n        v += step(distance(uv * rot((iTime + t) * TAU * 1.1 + cos((iTime + t) * PI)), vec2(.16)), .02);\n    }\n    \n    return v;\n}\n\nfloat img(sampler2D channel, vec2 pos, int index)\n{\n    ivec2 coord = ivec2(max(min(pos, vec2(1.)), vec2(0.)) * 200.);\n    coord.x += (index / 3) * 255;\n    vec3 t = texelFetch(channel, coord, 0).rgb;\n    \n    return t[index % 3];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 col = vec3(0.);\n    \n    if (shouldDisplayError()) {\n        fragColor = vec4(vec3(displayError(uv)), 1.0);\n        return;\n    }\n    \n    float time = max(.001, iChannelTime[1]); // .001 to fix visual error caused by negative time?\n    // loop\n    time = mod(time, 88.*TIME_STEP);\n    \n    int index = -1;\n    float flip = sign(sin(time * PI / TIME_STEP));\n\n    float order_progress = fract(time / TIME_STEP); //mod(time, TIME_STEP) / TIME_STEP;\n    index = ORDER_STEP[int(order_progress * float(ORDER_STEP.length()))];\n    \n    if (time < 8.*TIME_STEP) {\n        index = 5;\n        flip = 1.;\n    }\n    if (time < 7.*TIME_STEP)\n        index = -1;\n    \n    uv *= .8;\n    uv.y += .238;\n\n    if (time > 30.*TIME_STEP) {\n    \n        if (time > 30.3*TIME_STEP) {\n            float zoom_progress = sin((min(time,31.3*TIME_STEP)-30.3*TIME_STEP) * PI);\n            //uv.y -= .238 * zoom_progress;\n            uv /= mix(1., .6, zoom_progress);\n        }\n    \n        if (time < 31.*TIME_STEP) {\n            index = 2;\n            flip = -1.;\n        } else if (time < 32.*TIME_STEP) {\n            order_progress = fract(time / TIME_SPIN);\n            index = ORDER_SPIN[int(order_progress * float(ORDER_SPIN.length()))];\n            flip = -1. * float(sign(index));\n            index *= sign(index);\n        }\n    }\n    \n    if (time > 55.*TIME_STEP) {\n        if (time < 56.*TIME_STEP) {\n            index = 2;\n            flip = 1.;\n        } else if(time < 63.*TIME_STEP) {\n            index = 5;\n            flip = 1.;\n        } else if(time < 64.*TIME_STEP) {\n            order_progress = fract(time / TIME_SPIN);\n            index = ORDER_SPIN[int(order_progress * float(ORDER_SPIN.length()))];\n            flip = -1. * float(sign(index));\n            index *= sign(index);\n        }\n        \n        // zoom\n        float zoom_progress = clamp(floor((time-54.15*TIME_STEP)) / 4., 0., 1.);\n        \n        if (time > 64.*TIME_STEP) {\n            zoom_progress = max(0., 65.*TIME_STEP-time);\n        }\n        \n        uv /= mix(1., 1.7, zoom_progress);\n    }\n    \n    if (index >= 0) {\n        col += img(iChannel0, vec2(flip, 1.) * uv / 2. + vec2(.5), index);\n        \n        if (time < 32.*TIME_STEP) {\n            index = 2;\n            flip = -1.;\n        }\n        \n        if (time > 31.*TIME_STEP) {\n            col += img(iChannel0, vec2(flip, 1.) * uv / 2. + vec2(.5) + vec2(.8, -.1), index);\n            col += img(iChannel0, vec2(flip, 1.) * uv / 2. + vec2(.5) + vec2(-.8, -.1), index);\n        }\n    }\n    \n    // summon the demons\n    if (time > 65.*TIME_STEP) {\n        // first beat\n        if (time < 67.*TIME_STEP)\n            col += max(0., cos((time - 65.*TIME_STEP) * 3.));\n        \n        if (time > 67.*TIME_STEP) { // particles\n            //col += 1.;\n            for (float i = 0.0; i < 16.; i++) {\n                float seed = SEED + floor(i / 16. + time / 2.);\n                vec2 anchor = vec2(rand(vec2(seed, i)) * 4. - 2., -1.);\n                vec2 velocity = vec2(mix(-.5, .5, rand(vec2(seed+.1, i))), mix(1., 2., rand(vec2(i, seed))));\n\n                float creationTime = time - fract(i / 16. + time / 2.);\n                if (creationTime < 67.*TIME_STEP) {\n                    continue;\n                }\n\n                col.r += particle(uv, 0., anchor, velocity, creationTime, time);\n            }\n        }\n    \n        col.r += max(0., -uv.y - fract(time / TIME_STEP / 2. + TIME_STEP));\n    }\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 33560,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/super-346844965/the-penis-eek"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int img0[] = int[](2778205984,26607914,194053526,35327629,35197037,68358509,309068289,308808722,308678417,50401808,403641438,386864221,403510622,420287837,436999773,453711452,453711707,470423387,470488922,487200602,487200857,487200857,470423641,470488922,453711961,437000026,437000027,420222811,420288347,403576411,386864732,357696009,50927119,353244754,117572362,373752065,403248398,353244734,389749513,537400334,336467767,372647173,704779278,336402228,405941250,771888140,336336944,405680130,822219788,336140846,151136002,319363629,50472707,455804418,654578184,875234314,34285572,755184683,771896628,788673843,822228274,839005233,855782448,889336879,906114093,705167916,641218562,103561218,956441608,570822183,304429570,973218052,520426277,371407618,1023548676,436475938,421674243,1006901253,402921763,874724101,841169416,807613456,790900502,757410586,707143966,184952354,606349590,17699076,589702916,51057923,556344324,34281474,539697668,67246850,537133826,453123885,67306498,523050755,84091138,523181315,100803073,506469379,84091393,271718916,553782273,419694083,184749619,84744195,238294788,352652035,386074126,168037685,285414407,221648131,285870596,335745539,16911414,219089410,369168643,151391031,654510866,151391031,654510357,134679095,755172889,117901872,738395164,117901873,704840478,117901619,671351327,101189685,688063262,101189685,704905502,84543285,104213537,773850378,67831093,70529312,740164364,70451973,706544396,34341950,553781277,34341950,369167655,17695292,402918693,187695673,403112961,187564599,50463236,134682883,204276007,688063496,33688659,704710148,67243345,1196503298,1229932623,1229932878,1263422030,369243468,100732747,386145537,470355529,239605765,386341896,486740552,273160199,419961605,436604999,84217864,134284871,252189190,71762697,16910082,252123653,117572691,252123656,117572436,151129864,55775239,235341571,268896770,117637716,151195143,55840775,218629890,285542915,117638227,167906823,89264645,235341570,318966275,100861266,184749575,106042114,268829955,352454915,100861521,100929797,122754562,285476355,122754827,335676932,156243976,906101254,923273807,939724367,1246710095,1246644814,1263422030,1263356749,838997837,419828557,290264324,352590088,520425037,189535238,302522630,587402060,172757258,252519171,268765772,235867905,235211596,185863171,84413772,152440070,202444365,273483545,102501135,168824652,223085344,208734737,175245585,158533651,108332565,59966743,406);\nconst int img1[] = int[](2761494304,160695082,227347599,35196300,51842673,152571505,236326761,253038438,269815654,286462053,286462053,286462053,303173733,303173733,303173733,319885413,319885413,319885413,303108197,319819878,319819878,319819878,319819878,336531558,336531558,319754342,336466023,336466023,336466023,336466023,353177703,336466022,336466023,336466023,336466533,353179488,353179233,406720786,420288010,369825595,372972810,487003659,369890367,469893633,403182914,453116418,419894595,373497602,436404481,356655362,402718980,389883394,704780548,738342965,704908337,170798594,822224394,33818669,855778311,151127596,872555013,184681772,906108677,218235948,939662852,235078187,939662596,251855148,956439556,268566828,973216516,453185838,304954369,1006705155,419631917,304954625,1023547395,318964009,1040324355,302187048,1057101571,318964263,1073878275,318964519,1073878019,318899239,1023808260,318964264,1023939075,35259401,285414403,168246281,318964502,1024134915,68422917,251794179,268712717,570623505,302266895,553781007,889258260,118232323,807084035,134944259,807149059,151656451,773856513,134748419,740432644,16914947,436406532,503589158,419629570,486876713,386075394,470164779,369298179,436740909,352520963,302523183,335743245,269099568,335742735,235675953,117704963,322048771,219024385,117639427,288560385,219089667,288565251,185666052,255141635,169019909,238429699,152373510,67249411,134680112,587400984,221381378,85592072,33694212,118033460,604177947,118033461,587400476,118098487,16908571,171320070,623183370,84674869,154413856,807208204,84674611,50735643,84739890,17506848,68028210,104734245,522454030,87425287,237175567,87757826,86180368,369427714,34604344,33883936,33626119,34604338,16910621,33751299,151264003,34669350,50465817,671220996,34669350,117641497,36120321,471335186,36054787,504824082,36120321,1192624402,17957160,20727318,20727573,20727828,860899603,357569538,302324737,470290000,223286021,369499144,487001420,206312967,486801921,239802119,268901382,223085061,252123911,117507157,167841799,55906055,16909827,167841796,39259655,235406851,235342338,84083543,151195144,56037126,235341315,268830979,100795223,151195399,56037381,252118275,16910595,139661314,252052994,302123524,84084818,151261190,122884866,302319106,352454403,100861778,67310340,139597315,318965251,139597577,352454147,156310022,173094409,1229993991,1246710352,1246710351,1263422287,1280199502,855775053,402986061,290265601,402921989,470485325,139204358,369630729,570755148,155980810,319561478,218434636,286199042,134680140,236064258,252514636,290196500,169217294,202313805,256706330,225381391,191957777,158468626,141756692,91686166,1046);\nconst int img2[] = int[](2726694694,176031271,192613244,226036859,242749049,257491740,240650264,167838227,236129880,252841815,252841814,269553749,286265430,286265429,286265429,286265429,286265429,302977109,286199893,286134614,286134614,302846294,302846294,302846294,289867528,251990030,286069059,289934084,285345030,289934594,302123010,306580994,302123010,289607938,302123011,306058754,302123010,322639874,302123010,322444034,302123010,322313474,318899970,455941634,318899970,455876354,318899715,455745794,335676675,438968834,335676930,438838274,335676930,422126594,335741700,421996034,654448136,16849191,671290884,688010789,704789025,721566495,721567259,721566749,738343455,738342689,755119650,755119139,788673315,788670254,788669234,537332259,270544899,822222086,403117087,387854595,838997766,386079262,454898434,839128323,352459550,84027909,638202142,807339266,67313935,471150367,757072899,67246107,739640072,67375903,688918020,67374884,688591875,50662949,33822722,220669444,50462978,50534658,204023044,436339205,570688515,33884971,100801537,153952260,620823045,137240069,637600006,120593413,654442758,103881476,687997190,87038724,503578886,436472065,386729009,319031559,269484600,285412108,185860665,402854406,135725363,436409859,119079216,402855427,352585037,72358145,72429315,72559875,55978755,39331844,22554883,777595906,861155671,743584850,726598916,50790658,570493006,190915684,324343813,274012168,84083714,273683715,33752322,34083591,34021947,100995333,100934458,574299139,469895426,469904699,1245465148,1228753213,423512381,335613962,252320062,339612675,252248833,339416325,352786691,419632441,339023623,319363078,355664641,386203905,138153481,386402818,154930441,386468098,171707401,201918722,201918977,151128891,167840777,201523461,134415681,184683273,218235395,134349636,167971593,54726151,17106946,184748803,71437830,201918211,251988483,134350401,184749064,104861700,235341571,285346563,134415936,235012355,285346308,184748095,134483714,138285826,285346307,335807237,134416702,352981762,84085310,402986499,873073214,923143230,1228753213,1228753213,1228753469,771824189,755308349,369758781,272438785,352459782,520359485,205329668,335815171,604113725,188551941,285810947,285543229,252447490,218500413,219089666,117902910,185731589,34213438,152373511,152243518,205456665,52234004,101976640,85264738,51840867,35128678,25428611);\nconst int img3[] = int[](2693075492,192873504,241107225,257493524,274140434,290787089,290787343,307499279,307433998,324211214,324145933,307434253,307434253,67245069,336400972,306841090,84022540,322766599,402789388,336335672,322247426,469964043,336335667,321986051,520230156,336335409,305013251,587339020,352981805,321659907,620893451,369759019,321529346,671225098,352981801,321399042,704779530,352981799,338045698,738333961,352916517,321268738,755111177,352916261,321138178,771888393,336139044,321138434,805442569,336139043,321007874,822220040,386273827,790835458,790835458,790770178,790770178,790770178,773993218,773993218,773993218,773993218,50408963,268709410,50468358,84422178,50467855,303967778,773980675,33755168,237186338,757203459,17042724,16843299,203760389,523239684,17042214,67174693,187047175,453250088,237439528,153688325,386207783,304547882,120264196,335811623,321455404,86774533,318969129,355075372,70127875,285349163,19333935,53422083,654508583,52953392,19997955,620889128,604177498,570688858,537134427,102302273,155066116,503580437,135335485,322706692,486738444,201791547,440212227,436407556,235084605,742266884,775885830,759239429,289543171,335614474,638259012,755174983,33620232,939724092,906169407,872614466,822347847,755369547,738460752,755237203,106180694,89271041,22031363,620889863,621086549,67240523,621216771,17107272,486736643,172360709,84214018,256711938,520292099,553785930,570563144,1061568326,1212154881,205408061,302064898,487132223,188747779,251797257,386337601,201524740,386076227,201524741,352652356,184681991,100860485,101127685,21302018,352781827,218236423,100860227,335806722,268568072,319292996,318899720,100794686,101192456,20780034,319292930,385943048,100860219,101126919,37426946,319227394,167904775,37553924,319227139,167970310,84017992,67308807,167970564,50528835,235275523,151061762,54464002,84018434,251792902,171904514,251986947,268569859,67308350,168038148,188616963,50397443,302977282,352783422,238884107,386210053,1211975741,1228687677,1245399356,423316027,389754881,372977922,356135427,339358467,322581762,305804802,289027842,272250882,255473667,436346371,17108538,419764225,168234810,402984193,202314298,289019400,336464143,135270458,238752273,286459665,101911611,188420117,236455188,68487484,104664091,153027350,35128382,58853154);\nconst int img4[] = int[](2809925415,192087836,258870640,292229484,325653099,322961704,339544865,339415069,339350554,339285529,322573849,339285784,339285784,322639639,339351319,322639894,339417110,339482389,339482644,339482644,339548179,356259859,339613714,339613714,339613714,339679249,118097681,51320127,118953301,356974849,356455954,356261134,355935244,339028233,33630473,721884211,721818678,755504183,872879155,33821741,321468417,304561668,287588613,270681603,270682114,253774338,253644034,236932354,236932354,220089858,220024834,219959299,236671235,236671234,236671234,219959554,236671234,236605954,101142787,1359154957,235670275,235032835,1342377738,269029122,285363971,1275400455,285676034,923469830,319099906,318976540,168367621,335752969,772222212,738464515,721814274,721622020,704972034,704779269,671353090,721490694,654576130,201473543,990455299,604245506,268581385,957030916,369430530,923535618,336072450,906758404,336203266,856623107,302976002,839911172,286460162,823199492,269813762,789710341,253167618,789710341,236455938,772998406,33882370,67570969,16919573,67570721,84028182,50793246,169620759,907477512,34081052,136132119,873922825,841090848,807601953,790890019,774112293,790823719,824247079,857735720,910636360,33891665,593044304,654442838,822544447,906038076,1127891770,1245005625,1345277491,1328304172,1311591982,1328369452,1328303916,1345081388,1260999211,1277625604,1327891206,1194609204,1211385399,1194674228,1228097589,1244875059,1261521713,1261521713,1261521969,1261521713,1261521713,1261521713,439438129,372321795,321990151,67181063,288493825,33692932,254939140,252321539,520293938,238161420,134418948,254938382,134418436,271715089,117771269,254937364,17171976,118949378,102174258,204604953,68945177,68946226,120717855,72615197,22348831,41485090,24773241);\nconst int img5[] = int[](2759397415,16843804,241961585,292098154,308810088,308744807,322570532,322571296,322572062,322572571,339219481,339220246,402720779,554308666,251925306,305797121,419499780,302121271,402787589,352453940,402787586,16843522,352453933,419564546,103156482,184685826,268572675,352454433,419564290,152900098,167908610,352459266,352454938,419563779,169350914,134354434,419568130,352520981,419563522,202578690,117576963,486676994,352455698,419563011,202513922,100865282,537008386,369233167,436339970,219029762,84022786,587340034,369233165,436339714,218899458,67245570,620894466,369233164,419562498,218834434,67245570,654448898,369233162,419561987,218704130,33691394,704715010,386010377,402784770,201992706,33691394,704780290,386010122,419561730,201992706,16914178,721557506,386010122,721557509,386010122,721558274,369298187,738335234,839060235,168569858,755118339,822282509,151923970,755118338,805439248,50472963,805438738,33761283,805437973,33760518,805438228,17045523,788661012,17043994,236859161,790167812,790498336,773720610,67701028,119942673,755763976,235276071,69807370,755372295,319226667,53160965,721687304,336069165,19802883,704779528,1092947206,1076040706,1042421250,1025644546,1008867586,992090370,1445075459,1394955556,1328107815,1227770668,1110787377,960314936,843396672,67250759,738264130,961098056,893662786,776613704,793390666,860368969,721553733,604309314,54592516,726803719,927138310,369624115,419694083,369232177,403047429,523108866,16974338,553845251,33693481,570623237,100869159,740827651,757604867,1344807681,1311460906,688136235,587865900,604512301,671359276,369374763,486610984,201459718,419764517,218302215,386341155,235014152,386341664,251791368,151129633,134747911,170723074,369625346,84019208,151127858,134747656,33686786,134416429,118035976,153881090,369625090,184681993,134351148,101193480,153881346,386402051,201459207,117574188,83955976,201459207,117639724,100863751,218236676,117574444,100864007,235014145,100863019,218370055,220925698,302319362,285411844,117640490,84153603,237638149,386008579,237638667,436339716,254416646,287979528,1328167173,1328172842,1328238123,1328172842,522866474,489303554,472526340,352393731,402922026,388633605,335943941,419763243,288035593,167842053,271257867,151130118,237703181,134417674,204148495,117770254,170593555,202639133,85854252,103549209,119211295,69207341,53347359,22151969,41353763,374);\n\n#define img img0\n\n// Yea.. I couldnt find out how to pass dynamic arrays so im just copy pasting to force the compiler >.>\nfloat sampleImg0(ivec2 texelCoord, ivec2 offset) {\n    int width = (img[0] >> (2<<3)) & 0xFF;\n    \n    texelCoord -= ivec2((img[0] >> (0<<3)) & 0xFF, (img[0] >> (1<<3)) & 0xFF) + offset;\n    \n    if (texelCoord.x <= 0 || texelCoord.x > width) {\n        return 0.;\n    }\n    \n    int index = texelCoord.y * width + texelCoord.x;\n    for (int ii = 1; ii < img.length(); ii++) {\n        for (int i = 0; i < 4; i++) {\n            index -= (img[ii] >> (i<<3)) & 0xFF;\n            if (index < 0) {\n                return float(i % 2);\n            }\n        }\n    }\n    \n    return 0.;\n}\n\n#undef img\n#define img img1\n\nfloat sampleImg1(ivec2 texelCoord, ivec2 offset) {\n    int width = (img[0] >> (2<<3)) & 0xFF;\n    \n    texelCoord -= ivec2((img[0] >> (0<<3)) & 0xFF, (img[0] >> (1<<3)) & 0xFF) + offset;\n    \n    if (texelCoord.x <= 0 || texelCoord.x > width) {\n        return 0.;\n    }\n    \n    int index = texelCoord.y * width + texelCoord.x;\n    for (int ii = 1; ii < img.length(); ii++) {\n        for (int i = 0; i < 4; i++) {\n            index -= (img[ii] >> (i<<3)) & 0xFF;\n            if (index < 0) {\n                return float(i % 2);\n            }\n        }\n    }\n    \n    return 0.;\n}\n\n#undef img\n#define img img2\n\nfloat sampleImg2(ivec2 texelCoord, ivec2 offset) {\n    int width = (img[0] >> (2<<3)) & 0xFF;\n    \n    texelCoord -= ivec2((img[0] >> (0<<3)) & 0xFF, (img[0] >> (1<<3)) & 0xFF) + offset;\n    \n    if (texelCoord.x <= 0 || texelCoord.x > width) {\n        return 0.;\n    }\n    \n    int index = texelCoord.y * width + texelCoord.x;\n    for (int ii = 1; ii < img.length(); ii++) {\n        for (int i = 0; i < 4; i++) {\n            index -= (img[ii] >> (i<<3)) & 0xFF;\n            if (index < 0) {\n                return float(i % 2);\n            }\n        }\n    }\n    \n    return 0.;\n}\n\n#undef img\n#define img img3\n\nfloat sampleImg3(ivec2 texelCoord, ivec2 offset) {\n    int width = (img[0] >> (2<<3)) & 0xFF;\n    \n    texelCoord -= ivec2((img[0] >> (0<<3)) & 0xFF, (img[0] >> (1<<3)) & 0xFF) + offset;\n    \n    if (texelCoord.x <= 0 || texelCoord.x > width) {\n        return 0.;\n    }\n    \n    int index = texelCoord.y * width + texelCoord.x;\n    for (int ii = 1; ii < img.length(); ii++) {\n        for (int i = 0; i < 4; i++) {\n            index -= (img[ii] >> (i<<3)) & 0xFF;\n            if (index < 0) {\n                return float(i % 2);\n            }\n        }\n    }\n    \n    return 0.;\n}\n\n#undef img\n#define img img4\n\nfloat sampleImg4(ivec2 texelCoord, ivec2 offset) {\n    int width = (img[0] >> (2<<3)) & 0xFF;\n    \n    texelCoord -= ivec2((img[0] >> (0<<3)) & 0xFF, (img[0] >> (1<<3)) & 0xFF) + offset;\n    \n    if (texelCoord.x <= 0 || texelCoord.x > width) {\n        return 0.;\n    }\n    \n    int index = texelCoord.y * width + texelCoord.x;\n    for (int ii = 1; ii < img.length(); ii++) {\n        for (int i = 0; i < 4; i++) {\n            index -= (img[ii] >> (i<<3)) & 0xFF;\n            if (index < 0) {\n                return float(i % 2);\n            }\n        }\n    }\n    \n    return 0.;\n}\n\n#undef img\n#define img img5\n\nfloat sampleImg5(ivec2 texelCoord, ivec2 offset) {\n    int width = (img[0] >> (2<<3)) & 0xFF;\n    \n    texelCoord -= ivec2((img[0] >> (0<<3)) & 0xFF, (img[0] >> (1<<3)) & 0xFF) + offset;\n    \n    if (texelCoord.x <= 0 || texelCoord.x > width) {\n        return 0.;\n    }\n    \n    int index = texelCoord.y * width + texelCoord.x;\n    for (int ii = 1; ii < img.length(); ii++) {\n        for (int i = 0; i < 4; i++) {\n            index -= (img[ii] >> (i<<3)) & 0xFF;\n            if (index < 0) {\n                return float(i % 2);\n            }\n        }\n    }\n    \n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 texelCoord = ivec2(fragCoord);\n    \n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    if (iFrame == 0) { // cache\n        col.r += sampleImg0(texelCoord, ivec2(0));\n        col.g += sampleImg1(texelCoord, ivec2(0));\n        col.b += sampleImg2(texelCoord, ivec2(0));\n\n        col.r += sampleImg3(texelCoord, ivec2(255, 0));\n        col.g += sampleImg4(texelCoord, ivec2(255, 0));\n        col.b += sampleImg5(texelCoord, ivec2(255, 0));\n        \n        col = min(max(col, vec4(0.)), vec4(1.));\n    }\n    \n    fragColor = col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}