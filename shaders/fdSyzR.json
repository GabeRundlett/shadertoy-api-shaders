{
    "Shader": {
        "info": {
            "date": "1643469324",
            "description": "Livecoding shader performed during \"montre moi ton code\" event at la Gaité Lyrique in Paris 20 January 2021\nhttps://gaite-lyrique.net/en/event/no-lab-montre-moi-ton-code",
            "flags": 0,
            "hasliked": 0,
            "id": "fdSyzR",
            "likes": 6,
            "name": "Livecoding NOLAB - GaitéLyrique ",
            "published": 3,
            "tags": [
                "livecoding",
                "live",
                "gaitelyrique",
                "nolab",
                "montremoitoncode"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.) \n\nmat2 r2d(float a) { float c= cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n\tfloat fov = (sin(iTime*.25)*.3+.5)*2.;\n\tvec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n\tvec3 u = normalize(cross(rd, r));\n\treturn normalize(rd+(r*uv.x+u*uv.y)*fov);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n\tif (a.x < b.x)\n\t\treturn a;\n\treturn b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n\tvec3 l =abs(p)-s;\n\treturn max(l.x, max(l.y, l.z));\n}\n\nvec2 map(vec3 p)\n{\n\tvec2 acc = vec2(1000., -1.);\n\tp.xy *= r2d(p.z*.05*length(p.xy)*.2);\n\n\tvec3 pshape = p;\n\tfloat repay = 10.;\n\tfloat repa = 5.;\n\tfloat repz = 20.;\n\tfloat idz = floor((pshape.z+repz*.5)/repz);\n\tpshape.z = mod(pshape.z+iTime*20.+repz*.5, repz)-repz*.5;\n\tpshape.y = mod(pshape.y+repay*.5, repay)-repay*.5;\n\tpshape.x += (sin(iTime+pshape.y*2.)+iTime);\n\tpshape.x = mod(pshape.x+repa*.5,repa)-repa*.5;\n\t//pshape.xy *= r2d(-.1*sign(p.x)+idz+iTime*.5);\n\tfloat shape = mix(_cube(pshape, vec3(.3*(sin(iTime)*.2+.5), 1., .1)), \n\tlength(pshape)-.5, \n\tsin(idz+iTime*.2));\n\tacc = _min(acc, vec2(shape, 0.));\n\n\tvec3 pshape2 = p+vec3(0.,0.,iTime*13.);\n\tvec3 rep2 = vec3(5.);\n\tpshape2 = mod(pshape2+rep2*.5, rep2)-rep2*.5;\n\tfloat shape2 = _cube(pshape2, vec3(.1));\n\tacc = _min(acc, vec2(shape2, 0.));\n\n\treturn acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n\tvec2 e = vec2(0.01, 0.);\n\treturn normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n\taccCol = vec3(0.);\n\tvec3 p = ro;\n\tfor (int i =0 ; i < 64; ++i)\n\t{\n\t\tvec2 res = map(p);\n\t\tif (res.x < 0.01)\n\t\t\treturn vec3(res.x, distance(p, ro), res.y);\n\t\taccCol += vec3(1., .2, .5*(sin(p.z*10.)*.5+.5)).zyx*(1.-sat(res.x/1.5))*.02;\n\t\tp+=rd*res.x;\n\t}\n\treturn vec3(-1.);\n}\n\nvec3 rdr(vec2 uv)\n{\n\tvec3 col = vec3(0.);\n\n\t\n\tvec3 ro = vec3(1.,sin(iTime),-15.);\n\tvec3 ta = vec3(0.,sin(iTime*.0125)*14.,0.);\n\tvec3 rd = normalize(ta-ro);\n\n\trd = getCam(rd, uv);\n\tvec3 res = trace(ro, rd, 128);\n\tif (res.y > 0.)\n\t{\n\t\tvec3 p = ro+rd*res.y;\n\t\tvec3 n = getNorm(p, res.x);\n\t\tcol = n*.5+.5;\n\t\tcol = vec3(0.8,0.4,0.3)*(1.-sat(res.y/30.));\n\t}\n\tcol += accCol;\n\treturn col;\n}\nfloat _sqr(vec2 uv, vec2 s)\n{\n\tvec2 l = abs(uv)-s;\n\treturn max(l.x, l.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.xx;\n\tvec2 ouv = uv;\n\n\tuv -= vec2(.0);\n\tfloat a = atan(uv.y, uv.x);\n\tfloat stp = 3.14159265*2./(3.+mod(floor(iTime*.5), 5.));\n\tfloat b = mod(a+stp*.5,stp)-stp*.5;\n\tuv = vec2(sin(b), cos(b))*length(uv);\n\n\n\tvec3 col = rdr(uv);\n\n\tvec2 coords = mix(uv, ouv, sin(iTime))+vec2(iTime*.1,0.)*.1;\n\tfloat rep = .3;\n\tcoords.x = mod(coords.x+rep*.5, rep)-rep*.5;\nfloat shape = _sqr(coords, vec2(.05,.2));\ncol = mix(col, col.zxy, 1.-sat(shape*400.));\ncol = pow(col, vec3(1.));\ncol.xy *= r2d(iTime*1.5);\ncol.xz *= r2d(-iTime*1.25);\n\tfragColor = vec4(col*5., 1.0);\n\t//gl_FragColor = vec4(gl_FragCoord.xy / iResolution, cos(iTime), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}