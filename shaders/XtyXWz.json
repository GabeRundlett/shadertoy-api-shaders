{
    "Shader": {
        "info": {
            "date": "1483750638",
            "description": "pulsing ifs. control the iteration offset with a mouse click and drag.\nfog is dynamically set based on iteration count, decrease for higher fps",
            "flags": 0,
            "hasliked": 0,
            "id": "XtyXWz",
            "likes": 18,
            "name": "kifs-variant",
            "published": 3,
            "tags": [
                "raymarch",
                "ifs"
            ],
            "usePreview": 0,
            "username": "nshelton",
            "viewed": 800
        },
        "renderpass": [
            {
                "code": "//#define MAX_ITER 20\n#define MAX_ITER 50\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nmat3 ir;\n\nfloat DE(vec3 p) \n{\n\tvec3 p_o = p;\n    float d = 1e10;\n    \n    float s = 1.; //sin(iTime /60.0) / 10.0 + 0.6;\n    vec3 t = vec3(0.1 + 0.2 * iMouse.xy/iResolution.xy, 0.1 + 0.1 * sin(iTime/200.));\n    \n    \n    vec3 dim = vec3(0.01, 0.9, 0.02);\n    \n    for ( int i = 0; i < 6; i ++)\n    {\n        p -= t*s;\n        p = (ir * (p-t/s));\n        \n     \td = min\t(d, udBox(p*s, dim/s  )/s ) ;\n\n \t\tp = abs(p);\n        \n        float circleSize = 0.03 * (sin(iTime + length(p_o) * 5.) ) + 0.01;\n        d = min(d, length(p - t) - circleSize/s);\n        s *= s;\n\t\t\n    }\n\n\n    return d;\n}\n\n\nfloat lighting( in vec3 ro, in vec3 rd)\n{\n    float res = 1.0;\n    float t = 0.01;\n    \n    float k = 12.0;\n    \n    for( int i = 0; i < 2; i++ )\n    {\n        float h = DE(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        \n        res = min( res,k * h/t );\n        t += h;\n    }\n    return res;\n}\n\nvec3 gradient(vec3 p) {\n\tvec2 e = vec2(0., 0.0001);\n\n\treturn normalize(\n\t\tvec3(\n\t\t\tDE(p+e.yxx) - DE(p-e.yxx),\n\t\t\tDE(p+e.xyx) - DE(p-e.xyx),\n\t\t\tDE(p+e.xxy) - DE(p-e.xxy)\n\t\t)\n\t);\n}\n\n\n\n\n//https://iquilezles.org/articles/fog\nvec3 applyFog( in vec3  rgb,      // original color of the pixel\n               in float distance, // camera to point distance\n               in vec3  rayDir,   // camera to point vector\n               in vec3  sunDir )  // sun light direction\n{\n    float b = .9 + 20.0 / float(MAX_ITER);\n    float fogAmount = 1.0 - exp( -distance*b );\n    float sunAmount = max( dot( rayDir, sunDir ), 0.0 );\n    vec3  fogColor  = mix( vec3(0.1,0.1,0.0), \n                           vec3(1.0,0.9,0.7),\n                           pow(sunAmount,8.0) );\n    return mix( rgb, fogColor, fogAmount );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n    \n    vec3 cam = vec3(0,0, - sin(iTime /32. ) - 2.0);\n    vec3 ray = normalize( vec3(uv, 1.0));\n    \n    vec3 color = vec3(0.1, 0.1, 0.2);\n    vec3 p;\n    float depth = 0.0;\n    bool hit = false;\n    float iter = 0.0;\n    \n    float fog = 0.0;\n    vec3 sun = normalize( vec3(1,1,1));\n\n    ir = rotationMatrix(normalize(vec3(sin(iTime/50.0),sin(iTime/100.0),sin(iTime/150.0))), 1.5 + iTime/30.0);\n    \n    mat3 mv = rotationMatrix(vec3(0,1,0), iTime/10.0);\n        \n    cam = mv * cam;\n    ray = mv * ray;\n        \n    for( int i= 0; i < MAX_ITER; i ++) {\n        p = depth * ray + cam;\n        float dist = DE(p);\n        \n  \n        \tdepth += dist;\n         \n        \n        if ( dist < 0.001)\n        {\n        \thit = true;\n            break;\n        }\n        \n        iter ++;\n    }\n    float fakeAO = 1.0 - iter / float(MAX_ITER);    \n    vec3 n = gradient(p);\n    \n\n    if (hit) {\n    \tcolor = vec3(fakeAO + dot(-ray,n) / 2.0);\n    }\n\n    \n   //color *= fakeAO;\n    \n\tcolor = applyFog(color, depth, ray, sun) ;\n    \n    color *= vec3(1.0 - fog);\n    \n    color = pow(color, vec3(0.7));\n\n    \n\tfragColor = vec4(color ,1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}