{
    "Shader": {
        "info": {
            "date": "1584136113",
            "description": "poto",
            "flags": 32,
            "hasliked": 0,
            "id": "WdfczH",
            "likes": 19,
            "name": "Day 85",
            "published": 3,
            "tags": [
                "mdmtjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 84\" by jeyko. https://shadertoy.com/view/Wssczn\n// 2020-03-13 10:52:05\n\n// radial blur and chromatic abberation in this buffer\n// thx iq for pallette and hg-sdf for polarMod\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5),4.)*0.7;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),1.)*6.1;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.97;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor = radial*1.5; \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.3);\n    //1fragColor *= 18.;\n    fragColor = max(fragColor, 0.);\n    fragColor = pow(fragColor, vec4(0.4545 + dot(uvn,uvn)*1.));\n    fragColor *= 1. - dot(uvn,uvn)*0.6;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\n#define dmin(a, b) a.x < b.x ? a : b\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define iTime (iTime + 3.6)\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n\nvec3 att = vec3(1);\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n#define pmod(p,x) mod(p,x) - 0.5*x\nvec4 valueNoise(float t){\n\treturn mix(texture(iChannel0,vec2(floor(t)/256.)),texture(iChannel0,vec2(floor(t) + 1.)/256.), smoothstep(0.,1.,fract(t)));\n}\n// The \"Stairs\" flavour produces n-1 steps of a staircase:\n// much less stupid version by paniq\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\n\nfloat sdRhombus(vec3 p, vec3 s){\n\t\n    \n    p = abs(p) - s;\n    \n    float d = max(p.z, max(p.x, p.y));\n    \n    \n    d = max(d, dot(p.yx + s.yx*0.5, normalize(vec2(1.))));\n    d = max(d, dot(p.yz + s.yz*0.5, normalize(vec2(1.))));\n    //d = max(d - s.x*0., -dot(p.z,p.x));\n    //d \n    \n    \n    return d;\n}\n\n// Similar to fOpUnionRound, but more lipschitz-y at acute angles\n// (and less so at 90 degrees). Useful when fudging around too much\n// by MediaMolecule, from Alex Evans' siggraph slides\nfloat fOpUnionSoft(float a, float b, float r) {\n\tfloat e = max(r - abs(a - b), 0.);\n\treturn min(a, b) - e*e*0.25/r;\n}\n\n// The \"Round\" variant uses a quarter-circle to join the two objects smoothly:\nfloat fOpUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat sdBox( vec3 p, vec3 s )\n{\n    p = abs(p) - s;\n    return max(p.x, max(p.y, p.z));\n}\n\nfloat sdThangiPong(vec3 p){\n    float mmm = sin(iTime);\n\n    mmm = sign(mmm)*pow(abs(mmm), 5.);\n    \n    \n    \n    p = abs(p);\n    //p.xy *= rot(0.5);\n    //p -= 0.1;\n    \n    p.xz *= rot(mmm*PI);\n    \n    p -= vec3(0,0.14 + mmm*0.05,0);\n    float d = sdRhombus(p , vec3(0.03));\n    \n    //glow += exp(-d*200.);\n    \n    glow += 0.5/(0.009+ d*d*1000.)*vec3(0.5,0.43,0.7);\n    \n    p.xz *= rot(0.25*PI);\n    \n    float n = fOpUnionStairs(d, sdRhombus(p - vec3(0,0.0 + 0.0,0), -vec3(0.006)), 0.04,4.);\n    d = min(d, n);\n    //fOpUnionStairs\n    return d;\n}\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e7);\n    \n    float dd = length(p) - 0.1;\n    \n    \n    \n    vec3 ccc = vec3(0.,0.4,1.);\n    \n    ccc *= 1. + pow(abs(sin(p.z + iTime+ cos(p.y + iTime*0.5)) ), 20.);\n    \n    float dG = max(max(abs(p.x), abs(p.z)) - 0.3, abs(p.y) - 0.011);\n    \n    vec3 q = abs(p);\n    \n    q.xz -= 0.34;\n    \n    float dR = sdRhombus(q, vec3(0.04));\n    \n    \n    float dLamp = sdThangiPong(q);\n    \n    d = dmin(d, vec2(dLamp, 1.));\n    \n    \n    float dP = max(max(abs(p.x), abs(p.z)) - 0.01, (p.y) + 0.25);\n\n    \n    const float height = 0.5;\n    const float width = 0.08;\n    \n    float dTot = sdBox( p, vec3(width*0.9,height,width*0.9) );\n    float dTotUp = sdVerticalCapsule( p - vec3(0,height*1.,0), height*0.05, width*1. );\n    \n    \n    vec3 l = p;\n    \n\n    //p = abs(p);\n    \n    vec3 m = p;\n    vec3 o = p;\n    o = abs(o);\n    o.xz -= 0.1;\n    float dTotDown = sdRhombus( o - vec3(0,height*0.,0), vec3(width*0.) );\n\t\n    o = abs(o);\n    o = p;\n    //o.xz *= rot(0.25*PI);\n    o.y -= height*0.7;\n    float dInGrain = length(o.xy) - 0.05;\n    float hb = height*0.9;\n    m.y -= hb;\n    float dInGrainB = length(m.yz - vec2(0,0.)) - 0.02;\n    \n    d = dmin(d, vec2(abs(dInGrainB + 0.03) + 0.0, 1.));\n    \n    m = abs(m);\n    m.zx *= rot(0.6);\n    m.z -= 0.02;\n    m.y = pmod(m.y + hb, 0.1);\n    \n    \n    m.z += 0.01;\n    //m.xz *= rot(0.3);\n    \n    //float dInGrainC = length(m.yz - vec2(0,0.)) - 0.02;\n    float dInGrainC = max(abs(m.y), abs(m.z)) - 0.02;\n    \n    //dInGrainC = max(dInGrainC, -abs(m.y) + 0.004);\n    //float dInGrainC = length(m.yz - vec2(0,0.)) - 0.02;\n    \n    //d = dmin(d, vec2(abs(dInGrainC + 0.016) + 0.0, 1.));\n    \n    glow += 0.8/(0.04 + dInGrainB*dInGrainB*dInGrainB*dInGrainB*20050.)*ccc;\n\n    \n    dInGrain = min(dInGrain, \n                   max(\n                       max(abs(p.x)- 0.015, abs(p.z)- 0.2),\n                      p.y - 0.4\n                      )\n                  );\n    dInGrain = max(dInGrain,-length(o.xy) + 0.03);\n    \n    \n    dTot = fOpUnionSoft(dTot, dTotUp, 0.1);\n    dTot = fOpUnionRound(dTot, dTotDown, 0.2);\n    \n    \n    float dTotIn = dTot + 0.02;\n    \n    dTotIn = max(dTotIn + 0.03,dInGrain);\n    glow += 0.03/(0.001 + dTotIn*dTotIn*dTotIn*2050.)*ccc;\n    \n    dTot = min(max(dTot,-dInGrain), dTotIn);\n    dTot = max(dTot,-dInGrainB);\n    dTot = min(max(dTot,-dInGrainC), dTotIn);\n    \n    \n    p = l;\n    \n    dP = fOpUnionStairs(dG, dP, 0.25,6.);\n    \n    dP = min(dP,fOpUnionStairs(dG, dR, 0.09,6.));\n    \n    \n    \n    d = dmin(d, vec2(dP, 6.));\n    d = dmin(d, vec2(dR, 1.));\n    d = dmin(d, vec2(dTot, 1.));\n    //d = dmin(d, vec2(dTotUp, 1.));\n    \n    \n    vec3 u = p;\n    \n\tpModPolar(u.xz, 3.);\n    \n    float hhh = 0.6;\n    u += hhh/2.;\n    u = pmod(u, hhh);\n    \n    u = abs(u);\n    //u.yx *= rot(0.9);\n    \n    u = abs(u) - 0.02;\n    \n    u.y += pow(abs(sin(l.z + iTime + cos(l.y*0.4 + iTime*0.4 ) + sin(l.x*1.2 + iTime*0.6 ))), 10.)*0.1;\n    \n    float dGrid = min(min(max(u.y,u.x),\n                     \tmax(u.z,u.x)\n                     ),\n                     max(u.y,u.z)\n                     );\n    \n    //dGrid = max(dGrid, min(u.y, -length(p.xz) + 0.9));\n    float dBalls = max(u.y,max(u.x, u.z));\n    \n    glow += 0.03/(0.001 + dBalls*dBalls*dBalls*2050.)*vec3(0.,0.4,1.);\n\n    \n    d = dmin(d, vec2(dGrid, 1.));\n    d = dmin(d, vec2(dBalls, 1.));\n    \n    \n    vec3 c = vec3(1);\n    //glow += 0.3/(0.1 + d.x*d.x)*c;\n\td.x *= 0.6;\n    return d;\n}\nfloat dith;\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d = vec2(10e7);\n\n    p = ro; t = 0.; hit = false;\n    for(int i = 0; i < 120 + min(0, iFrame) ; i++){\n    \td = map(p);\n        d.x *= dith;\n        \n    \t//glow += exp(-d.x*20.);\n        if(d.x < 0.001){\n        \thit = true;\n            break;\n        }\n        \n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    \n    return d;\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n    vec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0),dir ));\n\tvec3 up = normalize(cross(dir, right));\n    return normalize(dir + right*uv.x + up*uv.y);\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t= vec2(0.001,0);\n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    //\n\t//uv *= 1. - dot(uv,uv)*0.2;\n    uv *= 1. + dot(uv,uv)*0.2;\n    \n    uv.xy *= rot(sin((iTime - 3.6))*0.2);\n    \n    vec3 col = vec3(0);\n\n    dith = mix(0.76,1., texture(iChannel0, 20.*uv*256.).x);\n    vec3 ro = vec3(0);\n    \n    \n    float n = pow(valueNoise(iTime*1.).x, 2.);\n    float nb = valueNoise(iTime*1./2.).x;\n    float zoom = 0.9 + n*1.;\n    //ro.xz += vec2(sin(iTime*0.5),cos(iTime*0.5))*zoom;\n    n *= 1.;\n    ro.xz += vec2(sin( nb*6.14*1.5),cos( nb*6.14*1.5))*zoom;\n    \n    ro.y += 0.3;\n    \n    vec3 lookAt = vec3(0,ro.y,0.);\n    lookAt.y += -0.5 + valueNoise(iTime*1./2.).x;\n    vec3 rd = getRd(ro, lookAt, uv);\n    //rd.yz *= rot(iTime);\n    \n    vec3 p; float t; bool hit;\n    float side = 1.;\n    float tA;\n    \n    for(int i = 0; i < 1; i ++){\n    \tvec2 d = march(ro, rd, p, t, hit);\n    \tvec3 n = getNormal(p);\n        \n        vec3 ld = normalize(vec3(1));\n        vec3 h = normalize(ld - n);\n        \n        float diff = max(dot(n, ld), 0.);\n        float spec = pow(max(dot(n, -h), 0.), 20.);\n        float fres = pow(1. - max(dot(n, -rd), 0.), 5.);\n        \n        //col += fres*0.04*vec3(0,0.5,1);\n        col += diff*fres*0.03*vec3(0.8,0.2,0.7);\n        \n        col += spec*0.06*vec3(0,0.5,1);\n        \n        if (d.y == 6.){\n        \n        }\n        tA = t;\n    }\n        \n    col += glow*0.006;\n    \n    \n    col = mix(col, vec3(0.4,0.4,0.7)*2.4, pow(smoothstep(0.,1.,tA*0.043), 1.6));\n\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}