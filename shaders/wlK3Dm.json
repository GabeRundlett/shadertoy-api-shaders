{
    "Shader": {
        "info": {
            "date": "1579131482",
            "description": "More random sims with voronoi particle tracking! \n[url]JAVASCRIPT: H=location.host;E=(H?window:opener).Effect;P=E.prototype;if(!E.P)E.P=P.Paint;P.Paint=function(...A){for(i=0;i<8;i++)E.P.apply(this,A);};if(!H)close();[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "wlK3Dm",
            "likes": 38,
            "name": "Lightning flow",
            "published": 3,
            "tags": [
                "particles",
                "what"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 1288
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 pos )\n{\n\tvec4 particle = texel(ch0, pos);\n    float distr = gauss(pos - particle.xy, prad);\n    vec4 flow = 0.7*texel(ch1, pos);\n    fragColor = vec4(flow.x*flow.x*vec3(0.23,0.15,1.), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//voronoi particle tracking \n\n//loop the vector\nvec2 loop_d(vec2 pos)\n{\n\treturn mod(pos + size*0.5, size) - size*0.5;\n}\n\n//loop the space\nvec2 loop(vec2 pos)\n{\n\treturn mod(pos, size);\n}\n\n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = texel(ch0, loop(pos+dx));\n    //check if the stored neighbouring particle is closer to this position \n    if(length(loop_d(Unb.xy - pos)) < length(loop_d(U.xy - pos)))\n    {\n        U = Unb; //copy the particle info\n    }\n}\n\nvoid CheckRadius(inout vec4 U, vec2 pos, float r)\n{\n    Check(U, pos, vec2(-r,0));\n    Check(U, pos, vec2(r,0));\n    Check(U, pos, vec2(0,-r));\n    Check(U, pos, vec2(0,r));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    vec2 muv = iMouse.xy/size;\n   \n    //this pixel value\n    U = texel(ch0, pos);\n    \n    //check neighbours \n    CheckRadius(U, pos, 1.);\n    CheckRadius(U, pos, 2.);\n    CheckRadius(U, pos, 3.);\n    CheckRadius(U, pos, 4.);\n    CheckRadius(U, pos, 5.);\n    CheckRadius(U, pos, 6.);\n    CheckRadius(U, pos, 7.);\n    CheckRadius(U, pos, 8.);\n   \n    U.xy = loop(U.xy);\n    \n    //cell cloning \n   // if(length(U.xy - pos) > 7.)\n    //\tU.xy += 1.*(hash22(pos)-0.5);\n\n    //syncronizing the particles with the flow\n    \n    vec2 vel0 = pspeed*vec2(cos(U.z), sin(U.z));\n    vec4 F =  pixel(ch1, U.xy);\n    vec2 vel1 = F.yz;\n    float dangl =3.3*angle_between(vel0,vel1);\n    U.z += dt*(dangl+0.7*fbm(1.5*(U.w), 0.07*float(iFrame)*dt));\n    U.w += dt*0.4;\n \n    vec2 pvel = pspeed*vec2(cos(U.z), sin(U.z));\n    \n    //update the particle\n    U.xy += dt*pvel;\n    \n    U.xy = loop(U.xy);\n    \n    \n    if((iMouse.z > 0. && length(iMouse.xy - pos) < 30.) || (length(size.xy*vec2(0.3,0.5) - pos) < 40. || (length(size.xy*vec2(0.7,0.5) - pos) < 40.)))\n    {\n        U.xy = vec2(pdens*round(pos.x/pdens),pdens*round(pos.y/pdens));\n        U.zw = vec2(2.,2.)*PI*(hash22(U.xy) - 0.5);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//simulation variables\n#define dt 0.25\n#define prad 0.5\n#define decay 0.14\n\n//particle speed\nfloat pspeed =20.;\n\n\n#define pdens 2.\n//definitions\n#define size iResolution.xy\n#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n#define texel(a, p) texelFetch(a, ivec2(p-0.5), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n//hash functions\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p) - 0.5;\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat nbase(float x)\n{\n    return mix(hash11(floor(x)),hash11(ceil(x)), fract(x));\n}\n\nfloat fbm(float x, float t)\n{\n    float a = 1., b = 1., c = 0.;\n    for(int i = 0; i < 3; i++)\n    {\n        c += a*nbase(b*x + t);\n        a *= 2.5;\n        b *= 4.5;\n    }\n    return c;\n}\n\n//functions\nfloat gauss(vec2 x, float r)\n{\n    return exp(-pow(length(x)/r,2.));\n}\nfloat gauss(float x, float r)\n{\n    return exp(-pow(x/r,2.));\n}\n   \n\n//a rainbow colormap from Matlab\nfloat interpolate(float val, float y0, float x0, float y1, float x1) \n{\n    return (val-x0)*(y1-y0)/(x1-x0) + y0;\n}\n\nfloat base(float val) \n{\n    if ( val <= -0.75 ) return 0.0;\n    else if ( val <= -0.25 ) return interpolate( val, 0.0, -0.75, 1.0, -0.25 );\n    else if ( val <= 0.25 ) return 1.0;\n    else if ( val <= 0.75 ) return interpolate( val, 1.0, 0.25, 0.0, 0.75 );\n    else return 0.0;\n}\n\nvec3 jet_colormap(float v)\n{\n    return vec3(base(v - 0.5),base(v),base(v + 0.5));\n}\n\nvec3 jet_range(float v, float a, float b)\n{\n    return jet_colormap(2.*clamp((v-a)/(b-a),0.,1.) - 1.);\n}\n\n//Laplacian operator\nvec4 Laplace(sampler2D ch, vec2 p)\n{\n    vec3 dx = vec3(-1,0.,1);\n    return texel(ch, p+dx.xy)+texel(ch, p+dx.yx)+texel(ch, p+dx.zy)+texel(ch, p+dx.yz)-4.*texel(ch, p);\n}\n\n//Gradient\nvec2 Grad(sampler2D ch, vec2 p)\n{\n    vec3 dx = vec3(-1,0.,1);\n    return vec2(length(texel(ch, p+dx.zy)),length(texel(ch, p+dx.yz))) - length(texel(ch, p));\n}\n\n\nfloat angle_between(vec2 a,vec2 b)\n{\n    return atan(a.x*b.y-a.y*b.x,dot(a,b));\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//saving and diffusing the velocity trails \n\nfloat sdtrail(vec2 p)\n{\n    float de = 1e10;\n    for(float x = -2.; x <= 2.; x+=1.)\n        for(float y = -2.; y <= 2.; y+=1.)\n        {\n            vec4 particle = texel(ch0, p+vec2(x,y));\n   \t\t    vec2 pvel = pspeed*vec2(cos(particle.z), sin(particle.z));\n            de = min(de, sdLine(p, particle.xy, particle.xy - dt*pvel));\n        }\n    \n    return de;\n}\n\nfloat trail(vec2 p)\n{\n    return gauss(sdtrail(p), prad);\n}\n\nvoid mainImage( out vec4 Q, in vec2 p )\n{\n    Q = texel(ch1, p);\n   \n    //diffusion equation\n    Q += 0.1*dt*Laplace(ch1, p);\n    \n    vec4 particle = texel(ch0, p);\n    \n    vec2 pvel = pspeed*vec2(cos(particle.z), sin(particle.z));\n    float distr = exp(-0.02*particle.w) * trail(p);\n    \n  \n    \n    //velocity depositing\n    Q += dt*vec4(1., pvel.x, pvel.y, 1.)*distr;\n        \n    //decay\n    Q += -dt*decay*Q;\n    \n    if(iFrame < 1) Q = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//voronoi particle tracking \n\n//loop the vector\nvec2 loop_d(vec2 pos)\n{\n\treturn mod(pos + size*0.5, size) - size*0.5;\n}\n\n//loop the space\nvec2 loop(vec2 pos)\n{\n\treturn mod(pos, size);\n}\n\n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = texel(ch0, loop(pos+dx));\n    //check if the stored neighbouring particle is closer to this position \n    if(length(loop_d(Unb.xy - pos)) < length(loop_d(U.xy - pos)))\n    {\n        U = Unb; //copy the particle info\n    }\n}\n\nvoid CheckRadius(inout vec4 U, vec2 pos, float r)\n{\n    Check(U, pos, vec2(-r,0));\n    Check(U, pos, vec2(r,0));\n    Check(U, pos, vec2(0,-r));\n    Check(U, pos, vec2(0,r));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    vec2 muv = iMouse.xy/size;\n   \n    //this pixel value\n    U = texel(ch0, pos);\n    \n    //check neighbours \n    CheckRadius(U, pos, 1.);\n    CheckRadius(U, pos, 2.);\n    CheckRadius(U, pos, 3.);\n    CheckRadius(U, pos, 4.);\n    CheckRadius(U, pos, 5.);\n    CheckRadius(U, pos, 6.);\n    CheckRadius(U, pos, 7.);\n    CheckRadius(U, pos, 8.);\n   \n    U.xy = loop(U.xy);\n    \n    //cell cloning \n   // if(length(U.xy - pos) > 7.)\n    //\tU.xy += 1.*(hash22(pos)-0.5);\n\n    //syncronizing the particles with the flow\n    \n    vec2 vel0 = pspeed*vec2(cos(U.z), sin(U.z));\n    vec4 F =  pixel(ch1, U.xy);\n    vec2 vel1 = F.yz;\n    float dangl =3.3*angle_between(vel0,vel1);\n    U.z += dt*(dangl+0.7*fbm(1.5*(U.w), 0.07*float(iFrame)*dt));\n    U.w += dt*0.4;\n \n    vec2 pvel = pspeed*vec2(cos(U.z), sin(U.z));\n    \n    //update the particle\n    U.xy += dt*pvel;\n    \n    U.xy = loop(U.xy);\n    \n    \n    if((iMouse.z > 0. && length(iMouse.xy - pos) < 30.) || (length(size.xy*vec2(0.3,0.5) - pos) < 40. || (length(size.xy*vec2(0.7,0.5) - pos) < 40.)))\n    {\n        U.xy = vec2(pdens*round(pos.x/pdens),pdens*round(pos.y/pdens));\n        U.zw = vec2(2.,2.)*PI*(hash22(U.xy) - 0.5);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//saving and diffusing the velocity trails \n\nfloat sdtrail(vec2 p)\n{\n    float de = 1e10;\n    for(float x = -2.; x <= 2.; x+=1.)\n        for(float y = -2.; y <= 2.; y+=1.)\n        {\n            vec4 particle = texel(ch0, p+vec2(x,y));\n   \t\t    vec2 pvel = pspeed*vec2(cos(particle.z), sin(particle.z));\n            de = min(de, sdLine(p, particle.xy, particle.xy - dt*pvel));\n        }\n    \n    return de;\n}\n\nfloat trail(vec2 p)\n{\n    return gauss(sdtrail(p), prad);\n}\n\nvoid mainImage( out vec4 Q, in vec2 p )\n{\n    Q = texel(ch1, p);\n   \n    //diffusion equation\n    Q += 0.1*dt*Laplace(ch1, p);\n    \n    vec4 particle = texel(ch0, p);\n    \n    vec2 pvel = pspeed*vec2(cos(particle.z), sin(particle.z));\n    float distr = exp(-0.02*particle.w) * trail(p);\n    \n  \n    \n    //velocity depositing\n    Q += dt*vec4(1., pvel.x, pvel.y, 1.)*distr;\n        \n    //decay\n    Q += -dt*decay*Q;\n    \n    if(iFrame < 1) Q = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}