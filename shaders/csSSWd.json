{
    "Shader": {
        "info": {
            "date": "1671053902",
            "description": "By nsf, all I did was add mouse functionality. Click-drag for selection box",
            "flags": 0,
            "hasliked": 0,
            "id": "csSSWd",
            "likes": 10,
            "name": "Mouseable selection rectangle",
            "published": 3,
            "tags": [
                "2d",
                "effect",
                "animation",
                "rectangle",
                "outline",
                "selection"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 m = iMouse.xyzw/iResolution.xyxy;\n    \n    if(m.z <= 0.)\n    {\n        m.xy = vec2(0.5);\n        m.zw = 0.5+vec2(sin(iTime), cos(iTime))*0.5;\n    }\n    \n    m.zw = abs(m.zw);\n    \n    // rect boundaries\n    vec2 rectMin = m.xy;\n    vec2 rectMax = m.zw;\n    \n    if(rectMin.x>rectMax.x)\n    {\n        rectMin.x += rectMax.x;\n        rectMax.x = rectMin.x-rectMax.x;\n        rectMin.x = rectMin.x-rectMax.x;\n    }\n    \n    if(rectMin.y>rectMax.y)\n    {\n        rectMin.y += rectMax.y;\n        rectMax.y = rectMin.y-rectMax.y;\n        rectMin.y = rectMin.y-rectMax.y;\n    }\n    \n    // some people prefer \"min + (max - min) / 2\", but for floating point UV space it\n    // doesn't matter\n    vec2 center = (rectMin + rectMax) / 2.;\n    vec2 halfSize = center - rectMin;\n    vec2 fw = fwidth(uv);\n    \n    vec2 dist = abs(uv - center);\n    \n    float col = 0.0;\n    if (all(lessThan(dist, halfSize)) && any(greaterThan(dist, halfSize - fw))) {\n        // for pixel here I could use fragCoord.xy, but on textures you don't have it\n        // using fwidth is a tricky way to operate in screenspace sizes on all surfaces\n        // of course it's an approximation, but it's a pretty good one, here, uncomment this \n        // line to try fragCoord, it gives almost the same result:\n        //vec2 pixel = fragCoord.xy;\n        vec2 pixel = uv / fw;\n        float aspect = halfSize.y / halfSize.x;\n        float dir = (dist.x * aspect > dist.y) ?\n              -sign(uv.x - center.x) : sign(uv.y - center.y);\n        float dash = step(0.5, fract((pixel.x + pixel.y) * dir / 10.0 + iTime));\n        col = mix(1.0, 0.0, dash);\n    }\n    \n\tfragColor = vec4(col, col, col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}