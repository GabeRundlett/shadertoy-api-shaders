{
    "Shader": {
        "info": {
            "date": "1618049906",
            "description": "https://www.youtube.com/watch?v=euWx4bt-HPg",
            "flags": 64,
            "hasliked": 0,
            "id": "3t3yRl",
            "likes": 4,
            "name": "Shamosis - Dinopwaur",
            "published": 3,
            "tags": [
                "trance",
                "goa",
                "boomboom"
            ],
            "usePreview": 1,
            "username": "z0rg",
            "viewed": 429
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define FFT(p) pow(texelFetch(iChannel0, ivec2(int(p), 0), 0)*.45, vec4(4.5))\n\nfloat lenny(vec2 v)\n{\n  return abs(v.x)+abs(v.y); \n}\n#define sat(a) clamp(a, 0.,1.)\nmat2 r2d(float a) \n{\n  float ca = cos(a);\n  float sa = sin(a);\n  \n  return mat2(ca,-sa, sa, ca);\n}\nvec2 _sub(vec2 a, vec2 b)\n{\n  if (a.x > -b.x)\n    return a;\n  return b;\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n  if (a.x < b.x)\n    return a;\n  return b;\n}\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\n// power smooth min (k = 8);\nfloat _smin( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\n\nvec3 getDir(vec3 rd, vec2 uv)\n{\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 u = normalize(cross(r, rd));\n  \n  return rd+ r * uv.x + u * uv.y;\n}\n\nfloat rhombus(vec3 p, float sz)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-sz)*0.577;\n}\n\n\nvec2 map(vec3 p)\n{\n  float beat = FFT(5).x*3.;\n  vec2 cyl = vec2(sdCylinder(p, vec3(1., 1., 1.)), 0.);\n  vec3 p2 = p;\n  p2.xz += vec2(sin(beat), cos(beat))*4.;\n  vec2 sph = vec2(length(p2)-2.5*max(FFT(55).x, 0.007)*70., 0.);\n  p2 = p+vec3(1.);\n  vec2 sph2 = vec2(rhombus(p2, 5.5*max(FFT(205).x, 0.005)*70.), 0.);\n  return _min(_min(sph2, sph), cyl);\n  vec2 fl = vec2(p.y, 1.);\n  return _min(cyl, fl);\n}\n\nvec3 calcNormal( in vec3 p, in float t )\n{\n    float e = 0.001*t;\n\n    vec2 h = vec2(1.0,-1.0)*0.5773;\n    return normalize( h.xyy*map( p + h.xyy*e ).x + \n\t\t\t\t\t  h.yyx*map( p + h.yyx*e ).x + \n\t\t\t\t\t  h.yxy*map( p + h.yxy*e ).x + \n\t\t\t\t\t  h.xxx*map( p + h.xxx*e ).x );\n}\n\nvec3 checkerBoard(vec2 uv)\n{\n  uv.y+=iTime*5.;\n  float sz = 1.5;\n  float x = mod(uv.x, sz)-sz*.5;\n  float y = mod(uv.y, sz)-sz*.5;\n  x = sat(x*200.);\n  float res = mix(x, 1.-x, sat(y*200.));\n  return vec3(res);\n}\n\nvec3 grad(vec2 uv)\n{\n  vec3 col;\n  vec3 blue = vec3(157., 200., 255.)/255.;\n  vec3 yellow = vec3(255, 241., 187.)/255.;\n  vec3 red = vec3(255., 190., 191.)/255.;\n  \n  float sz = 19.;\n  \n  if (uv.y < 0.)\n  {\n    return mix(yellow, red, sat(-uv.y*sz));\n  }\n  \n  \n  return mix(yellow, blue, sat(uv.y*sz));\n}\n\nfloat sig(vec2 uv)\n{\n  float attenBorder = 1.;\n  float t = iTime;// iTime;\n  float tst = sin(abs(uv.x)*5.+t)*.002;\n  return uv.y -.01- (attenBorder*sat(FFT(abs(uv.x*.005)).x*5.))*.05-tst;//*(1.-sat(abs(uv.x*2.)), 5.);\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col;\n  col = vec3(0.123, 0.07, 0.15);\n\n  vec3 rgb = pow(grad(uv), vec3(1.45));\n  rgb.x *= .6+sat(FFT(uv.x*.1).x)*100.;\n  \n  vec2 ouv = uv;\n  uv = vec2(atan(uv.y, uv.x), length(uv));\n  float ln = abs(sig(uv))-.00001;\n\n    col = mix(col, rgb, 1.-sat(ln*800.));\n    col += rgb *pow(1.-sat(ln*10.), 5.);\n\n  \n  for (int i = 0; i < 8; ++i)\n  {\n    float fi = float(i);\n    \n    vec2 uvt = ouv * r2d(fi);\n    uvt = vec2(atan(uvt.y, uvt.x), length(uvt));\n    float ln2 = abs(sig(uvt*fi/8.))-.00001*fi*fi;\n    \n    col += .3*rgb *pow(1.-sat(ln2*950.), 5.);\n\n  }\n  \n\n  return col;\n}\n\n\n\nvec2 myPixel(vec2 uv, float k)\n{\n  vec2 pxuv = uv/k;\n  pxuv = vec2(int(pxuv.x), int(pxuv.y))*k;\n  return pxuv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-vec2(.5)*iResolution.xy)/iResolution.xx;\n uv *= .2;\n  \n  \n  \n  float rep = 1.+(sin(iTime*.5) < 0. ? 1. : sat(FFT(5).x*50.));\n  \n  if (false)//iTime > 78.8)\n  {\n  \n  float rep2 = .1*sin(iTime*.5);\n  uv *= r2d(sin(iTime+length(uv)*145.));\n  uv.x = mod(uv.x, rep2)-.5*rep2;\n  }\n  uv *= r2d(-3.14159265/2.);\n  uv *= mod(-iTime, 2.);\n  float r = 0.05/(sin(iTime));\n  uv *= r2d(mod(length(uv), r)/r);\n  \n  vec2 uv2 = uv;\n  uv2.x = (mod(atan(uv.y, uv.x), rep)-.5*rep)*.1;\n  uv2.y = FFT(abs(uv.y)).x+length(uv)*(mod(iTime*.5, 2.5))+sin(iTime)*.05;\n  \n  uv2 = myPixel(uv2, 0.01*sin(iTime*.5));\n  \n  vec3 col =rdr(uv2)*.7;\n  col += rdr(uv)*.1*(sin(iTime*.2)*.5+.5);\n\tcol *= .5+rdr(uv*.2);\n    float a = atan(uv.y, uv.x);\n    col = mix(col, mix(col.zyx, col, 0.), sat(sin(uv.x*15.+iTime)+.1*sin(length(uv-a*3.14159265*2.-iTime))));\n  col = pow(col, vec3(1.45));\n  vec3 txt;// = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n  col *= mix(vec3(1.), vec3(5.), txt.x);\n  //col *= sat(iTime-2.);\n  col *= 1.-sat(iTime-502.);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 25177,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/shamosis/shamosis-dinopwaur"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}