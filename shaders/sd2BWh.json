{
    "Shader": {
        "info": {
            "date": "1646430801",
            "description": "No ray-marching, no 3D.\nWorley/Voronoi seed-per-cell + Jacobian for back to screenspace.\nTODO:  adaptive neighborhood for grazing angles.  try other shape.\nMouse controls camera.",
            "flags": 0,
            "hasliked": 0,
            "id": "sd2BWh",
            "likes": 28,
            "name": "sea of balls: fake 3D",
            "published": 3,
            "tags": [
                "voronoi",
                "worley",
                "short",
                "loopless"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 440
        },
        "renderpass": [
            {
                "code": "// utils from https://www.shadertoy.com/view/llySRh\n//#define rot(a)   mat2(cos(a+vec4(0,11,33,0)))                          // rotation\n#define rot(a)   mat2(cos(a+1.57*vec4(0,-1,1,0)))                        // rotation\n#define H(p)     fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\n\nvoid mainImage(out vec4 O, vec2 u)    // --- renderer\n{\n    float t=9.; \n    vec3  R = iResolution, N, e = vec3(1,-1,0)/1e2, \n          D = normalize(vec3((u+u-R.xy)/R.y, -2.)),   // ray direction\n          p = vec3(0,0,15), q,                        // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(10,12,0)/1e2*cos(.3*iTime+vec3(0,11,0))+vec3(0,.12,0),\n          X = vec3(1,0,0), Y = vec3(0,0,1), U;\n\n    X.yz *= rot(.5-6.3*M.y),                          // quad rotation\n    X.xz *= rot(-6.3*M.x),\n    Y.yz *= rot(.5-6.3*M.y),                      \n    Y.xz *= rot(-6.3*M.x);\n    U =  inverse(mat3(X,Y,D)) * p;                    // solve plane intersection: (u,v,lambda).\n    q = p + U.z*D;                                    // 3D hit point \n    O-=O;\n    if (abs(U.x)>5. || abs(U.y)>8. || U.z>0. ) return;\n    mat2 J = inverse( mat2(dFdx(U.xy),dFdy(U.xy)) *R.y/U.z); // Jacobian but keep perspective scaling\n    vec2 Jz = vec2(dFdx(U.z),dFdy(U.z)); float z,zl=1e9;\n    vec2 I = floor(U.xy), F = fract(U.xy), o,_I,u0; // --- get closest object on the quad\n    float d, l=9.;\n    for( int k=0; k < 9; k++ )                        // find closest seed within neihbors\n        o = vec2(k%3,k/3) -1.,                        // offset to cur neighbor cell\n        u = J* ( o + H(I+o) - F ),                    // offset to seed + back to screen space\n        d = length( u ),                              // screen-space closest (and thus, sphere SDF )\n        z = dot(u,Jz), z < zl && d<.3 ? zl=z, l = d, u0=u, _I = I+o : I; \n     // z = dot(u,Jz), z < zl ? zl=z, u0=u,l=d,  O =  mix(O,hue(H(I+o).x),smoothstep( 1.5,0., (l- .3)/fwidth(l) )) : O; return;\n     // O = d < .4 ? mix(O, hue(H(I+o).x), smoothstep( 1.5,0., (d- .3)/fwidth(d) ) ) : O; return;\n     // d < l ? l = d, u0=u, _I = I+o : I;            // keep closest dist + its id.\n    if (l<9.) O =  smoothstep( 1.5,0., (l- .3)/fwidth(l) )  // draw sphere\n                 * hue(H(_I).x);                            // coloring from ID\n    u = u0/.3;\n    float b = asin(u.y), a = acos( u.x/cos(b) );      // sphere coordinates\n    p = vec3(cos(b)*cos(a), cos(b)*sin(a), sin(b));\n    O *= .2+.8*max(0.,dot(p,vec3(.58)));              // ball shading (as is, could be alot simpler )\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}