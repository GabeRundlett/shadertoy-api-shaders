{
    "Shader": {
        "info": {
            "date": "1564379346",
            "description": "Use the mouse to pan around\n\nDoes anyone know how to fix the issues where it runs out of floating point precision and looks all pixelated at the end?",
            "flags": 0,
            "hasliked": 0,
            "id": "tllSWj",
            "likes": 10,
            "name": "Simple Smooth Mandelbrot Zoom",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "zoom"
            ],
            "usePreview": 0,
            "username": "snerp",
            "viewed": 4030
        },
        "renderpass": [
            {
                "code": "// set samples from 1-16 for quality selection\nconst int samples = 16;\n// set iterations from 1000 for speed to 3000 for completeness\nconst int iterations = 3000;\n\nvec2 complexMult(vec2 a, vec2 b) {\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nfloat testMandelbrot(vec2 coord) {\n\tvec2 testPoint = vec2(0,0);\n\tfor (int i = 0; i < iterations; i++){\n\t\ttestPoint = complexMult(testPoint,testPoint) + coord;\n        float ndot = dot(testPoint,testPoint);\n\t\tif (ndot > 7.0) {\n            float sl = float(i) - log2(log2(ndot))+4.0;\n\t\t\treturn sl*.0025;\n\t\t}\n\t}\n\treturn 0.0;\n}\n\nvec4 mapColor(float mcol) {\n    return vec4(0.5 + 0.5*cos(2.7+mcol*30.0 + vec3(0.0,.6,1.0)),1.0);\n}\nconst float offsetsD = .5;\nconst float offsetsD2 = .25;\nconst float offsetsD3 = .125;\nconst float offsetsD4 = .075;\nconst vec2 offsets[16] = vec2[](\n    vec2(-offsetsD,-offsetsD),\n    vec2(offsetsD,offsetsD),\n    vec2(-offsetsD,offsetsD),\n    vec2(offsetsD,-offsetsD),\n    vec2(-offsetsD2,-offsetsD2),\n    vec2(offsetsD2,offsetsD2),\n    vec2(-offsetsD2,offsetsD2),\n    vec2(offsetsD2,-offsetsD2),\n    vec2(-offsetsD3,-offsetsD3),\n    vec2(offsetsD3,offsetsD3),\n    vec2(-offsetsD3,offsetsD3),\n    vec2(offsetsD3,-offsetsD3),\n    vec2(-offsetsD4,-offsetsD4),\n    vec2(offsetsD4,offsetsD4),\n    vec2(-offsetsD4,offsetsD4),\n    vec2(offsetsD4,-offsetsD4)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    //const vec2 zoomP = vec2(-.7451544,.1861545);\n    const vec2 zoomP = vec2(-.7451544,.1853);\n    const float zoomTime = 70.0;\n    float tTime = 9.0 + abs(mod(iTime+zoomTime,zoomTime*2.0)-zoomTime);\n    tTime = (145.5/(.0005*pow(tTime,5.0)));\n    vec2 aspect = vec2(1,iResolution.y/iResolution.x);\n    vec2 mouse = iMouse.xy/iResolution.x;\n    \n    vec4 outs = vec4(0.0);\n    \n    for(int i = 0; i < samples; i++) {        \n        vec2 fragment = (fragCoord+offsets[i])/iResolution.x;    \n        vec2 uv = (zoomP + tTime * (fragment - mouse));\n        outs += mapColor(testMandelbrot(uv));\n    }\n\tfragColor = outs/float(samples);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}