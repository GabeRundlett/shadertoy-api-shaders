{
    "Shader": {
        "info": {
            "date": "1609948629",
            "description": ":octopus:",
            "flags": 0,
            "hasliked": 0,
            "id": "3ldyD2",
            "likes": 12,
            "name": "- twist -",
            "published": 3,
            "tags": [
                "sdf",
                "twist",
                "spiky"
            ],
            "usePreview": 0,
            "username": "anahit_movsesyan",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "#define EPS 0.001\n#define MAX_DIST 20.\n\nfloat sdTorus(vec3 pos) {\n  \treturn length(vec2(length(pos.xz) - 0.85, pos.y)) - 0.2;  \n}\n\nvec3 twistX(vec3 p, float k) {\n    float c = cos(k * p.x);\n    float s = sin(k * p.x);\n    return vec3(mat2(c, -s, s, c) * p.yz, p.x);\n}\n\nfloat calcDist(vec3 pos) {\n    float t = iTime / 1.5;\n    float d1 = sdTorus(0.3 * twistX(pos, 2.5 * cos(t)));\n    float d2 = sdTorus(0.3 * twistX(pos.yxz, 5.5 * sin(t)));\n\n    float morphK = 2.5;\n    return -log(exp(-morphK * d1) + exp(-morphK * d2)) / morphK;\n}\n\nfloat rayMarch(vec3 rayO, vec3 rayD) {\n    float distFromO = 0.;\n    for (int i = 0; i < 100; ++i) {\n\t    float dS = calcDist(rayO + rayD * distFromO);\n        distFromO += dS;\n        if (dS < EPS || distFromO > MAX_DIST) break;\n    }\n    \n    return distFromO;\n}\n\nvec3 calcNormal(vec3 pos) {\n    float d = calcDist(pos);\n\treturn normalize(vec3(d - calcDist(pos - vec3(EPS, 0,  0 )),\n\t\t\t\t\t  \t  d - calcDist(pos - vec3( 0, EPS, 0 )),\n\t\t\t\t\t   \t  d - calcDist(pos - vec3( 0,  0, EPS))));\n}\n\nvec3 calcLight(vec3 fragPos, vec3 lightPos, vec3 lightCol, vec3 camDir) {    \n\tvec3 normal = calcNormal(fragPos);\n    vec3 lightDir = normalize(lightPos - fragPos);\n    \n    vec3 ambient = vec3(0.13);\n    vec3 diffuse = vec3(max(dot(normal, lightDir), 0.0));\n    \n    return lightCol * (ambient + clamp(diffuse, 0.2, 1.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 xy = (fragCoord.xy - iResolution.xy / 2.) / min(iResolution.x, iResolution.y);\n    \n    vec3 camPos = vec3(0, 0, -10);\n\tvec3 camDir = normalize(vec3(xy, 1.));\n    \n    float dist = rayMarch(camPos, camDir);\n    \n    vec3 col = vec3(0.26, 0.28, 0.3);\n    \n    if (dist < MAX_DIST) { \n        col = calcLight(camPos + dist * camDir, \n                        vec3(5, 0, -15), \n                        vec3(0.89, 0.95, 1.), \n                        camDir);\n    } \n    \n\tfragColor = vec4(pow(col, vec3(1.4)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}