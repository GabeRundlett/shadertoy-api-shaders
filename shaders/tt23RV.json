{
    "Shader": {
        "info": {
            "date": "1560330971",
            "description": "colors experiment",
            "flags": 32,
            "hasliked": 0,
            "id": "tt23RV",
            "likes": 6,
            "name": "color batch",
            "published": 3,
            "tags": [
                "colors",
                "motionblur",
                "rotation"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 524
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);      \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SIZE 30.\n#define LAYERS 5.\n\n#define SF SIZE/min(iResolution.x,iResolution.y)*1.5\n#define SS(l,s) smoothstep(SF,-SF,l-s)\n\n#define hue(h) clamp( abs( fract(h + vec4(3,2,1,0)/3.) * 6. - 3.) -1. , 0., 1.)\n#define rand1(p) fract(sin(p* 78.233)* 43758.5453) \n\nmat2 rot (float a){\n\tfloat ca = cos(a);\n    float sa = sin(a);\n    return mat2(ca,-sa,sa,ca);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    vec2 ouv = fragCoord/iResolution.xy;\n\n    \n    float m = 0.;\n    vec3 col = vec3(1.);\n    for(float i=0.;i<LAYERS;i++){\n        vec2 iuv = uv;\n    \tiuv *= rot(iTime*(.2 + i*.04) );\n    \n        vec2 guv = iuv*SIZE;\n        vec2 gid = floor(guv);\n        \n        float iF = rand1(i);\n\n        vec2 offSet = vec2(rand1(gid.x*iF + gid.y*2000.*iF), rand1(gid.y*iF + gid.x*1000.*iF))*.5 -.25;\n\n        guv = fract(guv) - .5 - offSet;\n\n        float l = length(guv);\n\n        float pSize = rand1(gid.x*iF + gid.y*7000.*iF)*.05 + .05;\n        float showWeight = sqrt(length(uv))*.5;\n        float showFactor = rand1(gid.x*100.*iF+gid.y*200.*iF) > showWeight ? 1. : 0.;\n        float im = smoothstep(pSize, pSize-SF, l) * showFactor;  \n        \n        if(im > 0.){\n        \tcol = hue(rand1(gid.x*iF + gid.y*2000.*iF)).rgb;\n        }\n        \n        m += im;\n    }\n    m = min(m, 1.);\n       \n    vec3 backCol = texture(iChannel0, ouv).rgb*.995;\n       \n    col = mix(backCol, col, m);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}