{
    "Shader": {
        "info": {
            "date": "1629631763",
            "description": "Casually falling off an infinite tower has a vibe for some godforbid reason... i am not here to question why. Im just here to create the vibe.\n\nImprovements could have been made if i made resolution a variable instead of fixing the y resolution to 64",
            "flags": 0,
            "hasliked": 0,
            "id": "fd3GD8",
            "likes": 6,
            "name": "Falling off",
            "published": 3,
            "tags": [
                "sunset",
                "rain",
                "city"
            ],
            "usePreview": 0,
            "username": "Daizuukee",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "#define topSky vec3(0.2235, 0.0667, 0.2549)\n#define bottomSky vec3(0.1765, 0.1373, 0.3608)\n#define sunCol vec3(0.4471, 0.4039, 0.1412)\n#define sunPos vec2(iResolution.x/iResolution.y/2.,0.4)\n#define cityBack vec3(0.8353, 0.8275, 0.6471)\n#define cityFront vec3(0.3569, 0.2118, 0.4078)\n#define rainSpeed 1.5\n#define fallSpeed 3.5\n#define rainColor vec3(0.451, 0.6431, 0.702)\n#define cityRandomness 0.5\n#define colors 12.\n#define height 8.\n#define zoom 3.\n\nbool Glass(vec2 pos) {\n    return fract(pos.y) < 2./64. || \n    fract(pos.y + 0.1) < 1./64. || \n    fract(pos.y - 0.1) < 1./64. || \n    fract(pos.x*2. - 0.5) < 1./64.;\n}\n\nvec4 ground(vec2 pos) {\n    for(float i = 0.; i < 22.; i+=2.) {\n        vec4 c = texture(iChannel0,vec2(pos.x,i/64.));\n        if((1.-c.r)/64.*height > pos.y-sin(iTime/4.)/64.-i/64.)\n            return vec4(((cityBack - cityFront) * i/24. + cityFront) * (1.-(texture(iChannel0,vec2(i/64.+pos.x*100.)).r*cityRandomness)),1.);\n    }\n    return vec4(0);\n}\n\nvec4 background(vec2 pos) {\n    vec3 back = (topSky-bottomSky)*pos.y+bottomSky;\n    back += sunCol*(0.1/distance(pos,sunPos));\n    vec4 ground = ground(pos);\n    if(ground.a > 0.) {\n        back = (back - ground.rgb) * min(1.,0.25 + distance(pos,sunPos) / 3.) + ground.rgb;\n    }\n    return vec4(back,1);\n}\n\nvec4 rain(vec2 pos) {\n    for(float i = 1.; i < rainSpeed * 4.; i++) {\n        vec4 tex = texture(iChannel0, pos / vec2(4.,1.) + floor(vec2(0,iTime*rainSpeed)*64.)/64. - vec2(0,i)/64.);\n        if(tex.g < 0.01 && int(pos.x * iResolution.x)%2 != 0)\n            return vec4(rainColor * 1./i,1);\n    }\n    return vec4(0);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv=floor(fragCoord/iResolution.yy*(64.*zoom))/(64.*zoom);\n    uv *= zoom;\n    uv -= vec2(iResolution.x/iResolution.y/2.,0.5) * (zoom-1.);\n    if(uv.y>0. && uv.y < 1.) {\n        fragColor = background(uv);\n\n        if(Glass(uv - vec2(floor(iResolution.x/iResolution.y/2.*64.)/64.,0.5) - floor(vec2(0,iTime*fallSpeed)*64.)/64.)) {\n            fragColor = vec4(0,0,0,1);\n        }\n        if(Glass(uv - vec2(floor(iResolution.x/iResolution.y/2.*64.+2.)/64.,0.5 - 1./64.) - floor(vec2(0,iTime*fallSpeed)*64.)/64.)) {\n            fragColor -= vec4(0.1,0.1,0.1,0);\n        }\n        fragColor += rain(floor(vec2(uv.x - uv.y*0.5, uv.y + uv.x*0.5)*64.)/64.);\n        fragColor.xyz = floor(fragColor.xyz*colors)/colors;\n    } else {\n        fragColor = vec4(0,0,0,1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}