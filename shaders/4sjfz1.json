{
    "Shader": {
        "info": {
            "date": "1499525640",
            "description": "mouse.x is best on the left border zooms source texture\nmouse.y increases Binomial Coefficients up to \"maxCoefficients\", which seems to \"truncate\" at >33, so that is an upper limit. \niGlobalTime shuffles an offset. \n\njust read the shader comments.",
            "flags": 0,
            "hasliked": 0,
            "id": "4sjfz1",
            "likes": 5,
            "name": "Mystery Curves 33rdDeg iterative",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "texture",
                "curves",
                "spline",
                "polynomial",
                "uniform",
                "factorial",
                "pascal",
                "nchoosek",
                "noverk",
                "combination",
                "binominal",
                "coefficient"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 908
        },
        "renderpass": [
            {
                "code": "//parent: https://www.shadertoy.com/view/MlSSRD\n//self  : https://www.shadertoy.com/view/4sjfz1\n/*\nto be clear; \nmouse.x moving to the right does NOT increase number of coefficients.\nmouse.x moving  it just makes the line longer that you interpolate over.\n... and that line goes over a grid of iChanel0 Noise, resulting in\n... displaying a list of zoomed out polinimials over .x\n... that have lack continuity where they touch.\nyou will see pesrodoc corners along .x, with a period set by mouse.x\n\nmouse.y scales number of ponynomials, up to a 33rd degree bezier spline!\n\n\nMouse.x makes most sense on the left end of the view.\nMouse.x scales over the texture, zooming out, \n... which gets more noticable on the further zoomed out right side\n... while pausing time and keeping Mouse.y=e constant \n... by uncommenting line 100 to \"e=3.;\" for quintic polynnomials.\nScaling with Mouse.x, setting [s] scale, gives the illusion of higher coefficients \n... with higher first derivatives, but it just repediately bilinearily interpolates \n... over the same tesselated zoomed out texture MULTIPLE TIMES (better non-colinearily).\n\nMouse.y increases number of polynomial coefficients.\nThe factors to the ccoefficients are random, \n... and the smaller ones of 10 random factors are often \"barely noticable\"\n\nLine 95 overwrites \"mouse up\" case with a circular mouse.xy movement.\n\nThis is a more general iterative version of \nhttps://www.shadertoy.com/view/MlSSRD\nthat allows for much higher order polynomials = more polynomial coefficients.\nDownside is that it calculates \"n choose k\"==yChooseX() AND 2*pow() \n...for each coefficient's itteration within cv(), see https://en.wikipedia.org/wiki/Combination\n\nif (quintic polynomial is enough)\n https://www.shadertoy.com/view/MlSSRD\n saves you some energy over this more general solution.\n\nAll planar bezier splines are equivalent to bilinear interplation.\n... This just quantizes a buffer for it (using iChannel0, which could also be less \"random\"), \n... which is a good compromise, lower precision for speed. See\nhttps://blog.demofox.org/2016/02/22/gpu-texture-sampler-bezier-curve-evaluation/\n\nmodify the iChannel0-buffer or rand() to something with a good inverse for more control, \nor make a convergent evolutionary algorythm to make it find what your bias desires.\n*/\n\n//upper limit of maximum polynomial coefficients, range [1..33];\n#define maxCoefficients 33.\n//The upper limit of 33 is due to uint address space and float precision constrains.\n//The 34th line of pascals triangle simply has too large values in it,\n//and too big differentials nearby.\n//And with more than 10 coefficients, the smaller ones fade into subaltern-status anyways.\n\n//a hash function.\nfloat rand(vec2 co){return fract(sin(dot(co.xy,vec2(12.9898,78.233)))*43758.5453);}\n\n//openGlES syntax for this is explained nowhere.\nconst uint u0=uint(0);\nconst uint u1=uint(1);\n\n//return product of 1*2*3*...*a == \"(a)!\"\n//uint  fac(uint  a){uint  r=uint(1);for(uint  i=uint(1);i<a;i++){r*=i;}return r;}\n//float fac(float a){float r=     1.;for(float i=     1.;i<a;i++){r*=i;}return r;}\n\n// yChooseX() == NoverK , but y addresses the line and x addresses the column\n//and there may be some unintuitive offset by 0 due to indexing from 0???\n//(after aligning the triangle to the left)\n//\n//get https://en.wikipedia.org/wiki/Binomial_coefficient\n//== values of pascals triangle, with modular arithmetic of type uint\n// .x is the number of polynomials, .y is the nth polynomual, .y domain is [[0] .. [.x]] (mirror symmetry of pascals triangle)\n//\"yChooseX\" is favored over \"N Choose K\" is vavored over \"N over K\" namespace \n//this way a.xy addresses line and column of pascals triangle, \n//... as it is most commonly written with a horizontal \"fundament\" (arbitiarily).\n//return fac(n)/(fac(k)*fac((n-k))=(n,k).BinominalCoefficient=[a].value of PascalTriangle.\nuint yChooseX(uint y,uint k){uint r=uint(1);if(k>y-k)k=y-k;//k=k>y-k?y-k:k;\n for(uint j=u1;j<=k;j++,y--){if(u0==y%j)r=r*y/j;//assumes division before multiplication\n                        else if(u0==r%j)r=r/j*y;//assumes division before multiplication\n                        else            r=(r*y)/j;//order of operations is essential to keep values small.\n }return r;}//https://stackoverflow.com/questions/35121401/binomial-coefficient-in-c-program-explanation\n//precision/overflow limits are untested\n//, i think it roughly does a polynomial of -1 than the address space in bits without any overflow?\n//and if 3 of 33 polynomials have an overflow error\n//, that is a diminished neglible fraction fo an error for many implementations.\n//\n//data type wrappers: (uint used above for performance and [chinese remainders] of large factorials.\n//return fac(y)/(fac(y)*fac((y-n))=a.BinominalCoefficient=[a].value of PascalTriangle.\nuint yChooseX(uvec2 a){return yChooseX(a.x,a.y);}\n//int  yChooseX(int x,int y){return int(yChooseX(uint(x),uint(y)));}//some parsers fail to make this non-ambiguous\nfloat yChooseX(vec2 a){return float(yChooseX(uvec2(abs(a))));}\nfloat yChooseX(float x,float y){return float(yChooseX(uint(x),uint(y)));}\n\n#define cvv(a) texture(iChannel0,pixelOffset + vec2(a/ s,0.)).xyz\n\nvec3 cv(vec2 pixelOffset,vec2 percent,float s,float e){vec3 r=vec3(0);\n e=min(e,maxCoefficients);//limiting the maximum number of iterations below makes sense, saves time and energy.\n //e=3.; //overwrite [e] with [3.] to make it a quinic polynomial; a+b*x+c*x*x+d*x*x*x\n for(float j=0.;j<=e;j++){r+=yChooseX(e,j)*cvv(j)*pow(1.-percent.x,e-j)*pow(percent.x,j);}\n return r;\n //unrolled example for e=3 == quintic polynomial as of https://www.shadertoy.com/view/MlSSRD\n /*   return yChooseX(e,0.)*cvv(0.)*pow(1.-percent.x,i-0.)*pow(percent.x,e-3.)+ \n           yChooseX(e,1.)*cvv(1.)*pow(1.-percent.x,e-1.)*pow(percent.x,e-2.)+ \n           yChooseX(e,2.)*cvv(2.)*pow(1.-percent.x,e-2.)*pow(percent.x,e-1.)+ \n           yChooseX(e,3.)*cvv(3.)*pow(1.-percent.x,e-3.)*pow(percent.x,e-0.);\n /**/\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t \n    float time = floor(iTime);\n    vec2 o=vec2(\n        rand(vec2(time*7.23, time*3.14)),\n        rand(vec2(time*2.19, time*28.28)));//random offset.\n    vec2 p=fragCoord/iResolution.xy;  \n    vec2 m=iMouse.xy;//if(any(lessThan(m/iResolution.xy,vec2(.01))))\n    if(iMouse.z<=0.)m=iResolution.xy*(vec2(sin(iTime*.01),cos(iTime*.01))*.5+.5);\n    float s=iResolution.x*2./m.x+.01;//scaling\n    float e=m.y*maxCoefficients/iResolution.y+10.;//degree of polynomial (number of iterations)\n    \n    //mouse debug overwrites\n    //e=3.;\n    e=floor(e);//integer exponents make more sense for polynomial coefficients.\n    o=floor(o*s)/s+(.5+p.x)/s;\n    \n    vec3 curveValues=cv(o,p,s,e);\n    fragColor = vec4(step(p.y, curveValues), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}