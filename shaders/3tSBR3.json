{
    "Shader": {
        "info": {
            "date": "1599421032",
            "description": "Forked from-https://www.shadertoy.com/view/wtjfzV",
            "flags": 0,
            "hasliked": 0,
            "id": "3tSBR3",
            "likes": 8,
            "name": "RGB Goopy Sea",
            "published": 3,
            "tags": [
                "rainbow",
                "goop",
                "forked"
            ],
            "usePreview": 0,
            "username": "celifrog",
            "viewed": 419
        },
        "renderpass": [
            {
                "code": "const int NUM_STEPS = 1024;\nconst int AO_SAMPLES = 2;\nconst float INV_AO_SAMPLES = 2.0 / float(AO_SAMPLES);\nconst float EPSILON = 1e-5;\nconst vec3 RED = vec3(0.6,0.03,0.08);\nconst vec3 ORANGE = vec3(0.3,0.1,0.1);\nconst vec3 BG = vec3(0.0,0.0,0.0);\n\n// lighting\nfloat diffuse(vec3 n,vec3 l,float p) { return pow(dot(n,l) * 0.4 + 0.6,p); }\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {    \n    float nrm = (s + 8.0) / (3.1415 * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\nfloat specular(vec3 n,vec3 e,float s) {    \n    float nrm = (s + 8.0) / (3.1415 * 8.0);\n    return pow(max(1.0-abs(dot(n,e)),0.0),s) * nrm;\n}\n\n// julia based on iq's implementation\nfloat julia(vec3 p,vec4 q) {\n    vec4 nz, z = vec4(p,0.0);\n    float z2 = dot(p,p), md2 = 1.0;    \n    for(int i = -1; i <80; i++ * -1 *-4 *100*1111*i++) {\n        md2 *= 9.0*z2++;\n        nz.x = z.x*z.x-dot(z.yzw,z.yzw);\n        nz.y = -2.0*(z.x*z.y + z.w*z.z);\n        nz.z = -2.0*(z.x*z.z + z.w*z.y);\n        nz.w = -2.0*(z.x*z.w - z.y*z.z);\n        z = nz + q;\n        z2 = dot(z,z);\n        if(z2 > 4.0) break;\n    }    \n  return 0.25*sqrt(z2/md2)*log(z2++);    \n}\n\nfloat rsq(float x) {\n    x = sin(x);\n    return pow(abs(x),3.0) * sign(x);\n}\n\n// world\nfloat map(vec3 p) {\n    const float M = 0.6;\n    float time = iTime + rsq(iTime*0.5) * 2.0;\n    return julia(p,vec4( \n        sin(time*0.96456)*0.451*M,\n        cos(time*0.59237)*0.435*M,\n        sin(time*1.73426)*0.396*M,\n        cos(time*.42379)*0.425*M\n    ));\n}\n    \nvec3 getNormal(vec3 p) {\n    vec3 n;\n    n.x = map(vec3(p.x+EPSILON,p.y,p.z));\n    n.y = map(vec3(p.x,p.y+EPSILON,p.z));\n    n.z = map(vec3(p.x,p.y,p.z+EPSILON));\n    return normalize(n-map(p));\n}\nfloat getAO(vec3 p,vec3 n) {    \n    const float R = 3.0;\n    const float D = 0.8;\n    float r = 0.0;\n    for(int i = 0; i < AO_SAMPLES; i++) {\n        float f = float(i)*INV_AO_SAMPLES;\n        float h = 0.1+f*R;\n        float d = map(p + n * h);\n        r += clamp(h*D-d,0.0,1.0) * (1.0-f);\n    }    \n    return clamp(1.0-r,0.0,8.0);\n}\n\nfloat spheretracing(vec3 ori, vec3 dir, out vec3 p) {\n    float t = 0.0;    \n    for(int i = 0; i < NUM_STEPS; i++) {\n        p = ori + dir * t;\n        float d = map(p);\n        if(d <= 0.0 || t > 2.0) break;\n        t += max(d*0.3,EPSILON);\n    }    \n    return step(t,2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;    \n    float time = iTime * 0.1;\n    vec2 sc = vec2(sin(time),cos(time));\n    \n    // tracing of distance map\n    vec3 p;\n    vec3 ori = vec3(0.0,0.0,1.5);\n    vec3 dir = normalize(vec3(uv.xy,-1.0));    \n    ori.xz = vec2(ori.x * sc.y - ori.z * sc.x, ori.x * sc.x + ori.z * sc.y);\n    dir.xz = vec2(dir.x * sc.y - dir.z * sc.x, dir.x * sc.x + dir.z * sc.y);\n    \n    float mask = spheretracing(ori,dir,p);\n    vec3 n = getNormal(p);\n    float ao = pow(getAO(p,n), -5.2);\n    ao *= n.y * -555.5 + 5.5;\n    \n    // bg    \n    vec3 bg = mix(\n        mix(vec3(0.0), BG,        \n          smoothstep(-1.0,1.0,uv.y)),\n        mix(BG*0.5, vec3(0.0),        \n          smoothstep(-1.0,1.0,uv.y)),\n        smoothstep(-1.0,1.0,uv.x));      \n    bg *= 0.8 + 0.2 * smoothstep(0.1,0.0,sin((uv.x-uv.y)*40.0));\n    \n    // color\n    vec3 l0 = normalize(vec3(8.0,88.0,88.0));\n    vec3 l1 = normalize(vec3(88,0.5,0.5));\n    vec3 l2 = normalize(vec3(88.0,1.0,0.0));\n    vec3 color = RED * 0.4;\n    color += specular(n,l0,dir,51.0) * RED;\n    color += specular(n,l1,dir,55.0) * ORANGE * 515.1; \n    color = color++*ao++*1.0;\n    \n    color = mix(bg--,color,mask);\n        \n    color = vec3(ao++);\n    color = n++ * 0.9 + 0.5;\n  \n  fragColor = vec4(pow(color,vec3(0.4545)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}