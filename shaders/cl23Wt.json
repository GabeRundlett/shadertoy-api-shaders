{
    "Shader": {
        "info": {
            "date": "1674136888",
            "description": "finally learnt how to curl noise",
            "flags": 32,
            "hasliked": 0,
            "id": "cl23Wt",
            "likes": 131,
            "name": "Curling Smoke",
            "published": 3,
            "tags": [
                "curl",
                "smoke",
                "gyroid"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 3827
        },
        "renderpass": [
            {
                "code": "\n// Curling Smoke by Leon Denise 2023-01-19\n\n// finally learnt how to curl noise\n\n// from Pete Werner article:\n// http://petewerner.blogspot.com/2015/02/intro-to-curl-noise.html\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // noise\n    vec3 blu = texture(iChannel1, fragCoord/1024.).rgb;\n    \n    // frame\n    vec3 color = texture(iChannel0, uv).rgb;\n    \n    // normal\n    vec2 e = vec2(pow(blu.x, 3.)*0.084,0);\n    #define T(u) texture(iChannel0, uv+u).r\n    vec3 normal = vec3(\n        T(e.xy)-T(-e.xy), \n        T(-e.yx)-T(e.yx),\n        color.r*.1);\n    if (abs(normal.x) + abs(normal.y) + abs(normal.z) > .001)\n        normal = normalize(normal);\n             \n    // shade\n    color *= dot(normal, normalize(vec3(0,1,1)))*.5+.5;\n    \n    fragColor = vec4(color,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Curling Smoke\n\n// finally learnt how to curl noise\n\n// from Pete Werner article:\n// http://petewerner.blogspot.com/2015/02/intro-to-curl-noise.html\n\n#define R iResolution.xy\nfloat gyroid (vec3 p) { return dot(sin(p),cos(p.yzx)); }\nfloat noise (vec3 p)\n{\n    float result = 0., a = .5;\n    float count = R.y < 500. ? 6. : 8.;\n    for (float i = 0.; i < count; ++i, a/=2.)\n    {\n        p.z += iTime*.1;//+result*.5;\n        result += abs(gyroid(p/a))*a;\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    // coordinates\n    vec2 uv = fragCoord/R.xy;\n    vec2 p = (2.*fragCoord-R.xy)/R.y;\n    vec2 offset = vec2(0);\n    \n    // curl\n    vec2 e = vec2(.01,0);\n    vec3 pos = vec3(p, length(p)*.5);\n    float x = (noise(pos+e.yxy)-noise(pos-e.yxy))/(2.*e.x);\n    float y = (noise(pos+e.xyy)-noise(pos-e.xyy))/(2.*e.x);\n    vec2 curl = vec2(x,-y);\n\n    // force fields\n    offset += curl;\n    offset -= normalize(p) * sin(iTime*2.-length(p)*6.);\n\n    // displace buffer sampler coordinates\n    uv += offset*.002*vec2(R.y/R.x, 1);\n    vec3 frame = texture(iChannel0, uv).rgb;\n    \n    // spawn from edge\n    bool spawn = fragCoord.x < 1. || fragCoord.x > R.x - 1.\n        || fragCoord.y < 1. || fragCoord.y > R.y - 1.;\n    \n    // spawn at first frame\n    spawn = spawn || iFrame < 1;\n    \n    // color palette\n    // https://iquilezles.org/articles/palettes\n    if (spawn) color = .5+.5*cos(vec3(1,2,3)*5.5+iTime+(uv.x+uv.y)*6.);\n    \n    // buffer\n    else color = max(color, frame);\n    \n    fragColor = vec4(color,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}