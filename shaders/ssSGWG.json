{
    "Shader": {
        "info": {
            "date": "1617866427",
            "description": "A straight path across a turning disc/sphere is curved relative to it.\n[url=https://en.wikipedia.org/wiki/Coriolis_force]https://en.wikipedia.org/wiki/Coriolis_force[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "ssSGWG",
            "likes": 8,
            "name": "Coriolis Effect",
            "published": 3,
            "tags": [
                "effect",
                "path",
                "weather",
                "curved",
                "coriolis"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "#define rate 3.14\n#define radius 2.0\n\n// http://marcodiiga.github.io/radial-lens-undistortion-filtering\nvec2 barrelDistort(in vec2 p, in vec2 alpha) {\n    return p / (1.0 - alpha * dot(p, p));\n}\n\n// Triangle wave\nfloat twave(in float x, in float s) {\n    s *= 2.0; x /= s;\n    float frac = fract(x);\n    float w = abs(round(frac) - frac);\n    return w * s;\n}\n\n// Drawing utilities\nvoid drawPoint(in vec2 pos, in float size, in vec3 pointColor, in vec2 p, in float unit, inout vec3 color) {\n    color = mix(color, pointColor, smoothstep(unit, 0.0, length(p - pos) - size));\n}\n\nvoid drawLine(in vec2 a, in vec2 b, in float thickness, in vec3 lineColor, in vec2 p, in float unit, inout vec3 color) {\n    vec2 pa = p - a, ba = b - a;\n    color = mix(color, lineColor, smoothstep(unit, 0.0, length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - thickness));\n}\n\n// Hashes from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash21(in vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat snoise(in vec2 p) {\n    vec2 cell = floor(p);\n    vec2 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float bl = Hash21(cell);\n    float br = Hash21(cell + vec2(1.0, 0.0));\n    float tl = Hash21(cell + vec2(0.0, 1.0));\n    float tr = Hash21(cell + 1.0);\n\n    return mix(mix(bl, br, local.x), mix(tl, tr, local.x), local.y);\n}\n\nvec3 map(in vec2 p, in float unit) {\n    p *= 5.0;\n\n    float n = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (int o=0; o < 5; o++) {\n        n += snoise(p) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        p *= 2.0;\n    }\n\n    n /= tscale;\n    return mix(vec3(0.0, 0.0, 1.0 - n), mix(vec3(0.0, 1.0, 0.0), vec3(0.8, 0.4, 0.0), n * n), smoothstep(0.5 - unit, 0.5 + unit, n));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float time = radius - twave(iTime, 2.0 * radius);\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    float unit = 8.0 / iResolution.y;\n\n    // Trig\n    float r = time * rate;\n    float c = cos(r), s = sin(r);\n    mat2 rot = mat2(c, s, -s, c);\n\n    // Rotate globe\n    uv *= rot;\n    drawPoint(vec2(0.0), radius, map(barrelDistort(uv * 0.4, vec2(0.75)), unit), uv, unit, fragColor.rgb);\n\n    // Path\n    vec2 prev; bool first = true;\n    float tStep = 2.0 * radius / 100.0;\n    for (float t=-radius; t < radius + tStep; t += tStep) {\n        float tr = t * rate;\n        c = cos(tr), s = sin(tr);\n        vec2 cur = vec2(t, 0.0) * mat2(c, s, -s, c);\n        if (first) first = false;\n        else drawLine(prev, cur, 0.01, vec3(1.0, 0.0, 0.0), uv, unit, fragColor.rgb);\n        prev = cur;\n    }\n\n    // Draw point\n    uv *= transpose(rot);\n    drawPoint(vec2(time, 0.0), 0.1, vec3(1.0), uv, unit, fragColor.rgb);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}