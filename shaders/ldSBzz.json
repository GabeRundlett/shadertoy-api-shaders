{
    "Shader": {
        "info": {
            "date": "1499104443",
            "description": "Rocks in shallow water (mouse enabled)",
            "flags": 0,
            "hasliked": 0,
            "id": "ldSBzz",
            "likes": 13,
            "name": "Voronoi Rocks",
            "published": 3,
            "tags": [
                "voronoi",
                "reflection",
                "waves",
                "water",
                "rocks",
                "foam"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1119
        },
        "renderpass": [
            {
                "code": "// \"Voronoi Rocks\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\n\nvec3 sunDir, waterDisp, cloudDisp;\nvec2 gVec[7], hVec[7];\nfloat dstFar, dstObj, tCur;\nconst float pi = 3.14159;\n\n#define SQRT3 1.73205\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 vc;\n  float d;\n  vc = HexVor (p.xz);\n  d = p.y - max (SmoothMin (0.6, SmoothMax (0., vc.x, 0.6), 0.3) *\n     (1. + vc.w) * (1. - dot (vc.yz, vc.yz)), 0.) *\n     (1. - smoothstep (0.8, 1., dstObj / dstFar));\n  return 0.5 * d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy),\n     ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat WaveHt (vec3 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4, ta4, v4;\n  vec2 q2, t2, v2;\n  float wFreq, wAmp, pRough, ht;\n  wFreq = 0.5;  wAmp = 0.1;  pRough = 5.;\n  q2 = p.xz + waterDisp.xz;\n  ht = 0.;\n  for (int j = 0; j < 3; j ++) {\n    t2 = 0.6 * tCur * vec2 (1., -1.);\n    t4 = vec4 (q2 + t2.xx, q2 + t2.yy) * wFreq;\n    t2 = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * vec4 (t2.xx, t2.yy) - 1.;\n    ta4 = abs (sin (t4));\n    v4 = (1. - ta4) * (ta4 + abs (cos (t4)));\n    v2 = pow (1. - sqrt (v4.xz * v4.yw), vec2 (pRough));\n    ht += (v2.x + v2.y) * wAmp;\n    q2 *= qRot;  wFreq *= 2.;  wAmp *= 0.25;\n    pRough = 0.8 * pRough + 0.2;\n  }\n  return 0.2 + ht;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  dHit = dstFar;\n  if (rd.y < 0.) {\n    s = 0.;\n    sLo = 0.;\n    for (int j = 0; j < 80; j ++) {\n      p = ro + s * rd;\n      h = p.y - WaveHt (p);\n      if (h < 0.) break;\n      sLo = s;\n      s += max (0.3, h) + 0.005 * s;\n      if (s > dstFar) break;\n    }\n    if (h < 0.) {\n      sHi = s;\n      for (int j = 0; j < 5; j ++) {\n        s = 0.5 * (sLo + sHi);\n        p = ro + s * rd;\n        h = step (0., p.y - WaveHt (p));\n        sLo += h * (s - sLo);\n        sHi += (1. - h) * (s - sHi);\n      }\n      dHit = sHi;\n    }\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.01, 0.005 * d * d), 0.);\n  float ht = WaveHt (p);\n  return normalize (vec3 (ht - WaveHt (p + e.xyy), e.x, ht - WaveHt (p + e.yyx)));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  ro.x += 0.5 * tCur;\n  f = Fbm2 (0.05 * (rd.xz * (100. - ro.y) / rd.y + ro.xz));\n  sd = pow (max (dot (rd, sunDir), 0.), 64.);\n  col = vec3 (0.1, 0.2, 0.5) + 0.1 * pow (1. - max (rd.y, 0.), 4.) +\n     (0.35 * sd + 0.65 * min (pow (sd, 4.), 0.3)) * vec3 (1., 1., 0.3);\n  return mix (col, vec3 (0.85), clamp (f * rd.y + 0.1, 0., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 vc;\n  vec3 vn, col;\n  float dstWat, s;\n  bool waterRefl;\n  HexVorInit ();\n  dstObj = ObjRay (ro, rd);\n  dstWat = WaveRay (ro, rd);\n  waterRefl = (dstWat < min (dstFar, dstObj));\n  if (waterRefl) {\n    ro += rd * dstWat;\n    rd = reflect (rd, WaveNf (ro, dstWat));\n    ro += 0.1 * rd;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vc = HexVor (ro.xz);\n    vn = VaryNf (16. * ro, ObjNf (ro), 10.);\n    s = Noisefv3 (8. * (1. + vc.w) * ro);\n    if (ro.y > 0.05) col = mix (vec3 (0.3, 0.45, 0.3) * (0.8 + 0.4 * vc.w),\n       vec3 (0.5 * (1. + 0.2 * vc.w), 0.6, 0.6),\n       smoothstep (0.3, 0.5, s) * smoothstep (0.3, 0.4, ro.y)) * (1. - 0.1 * s) *\n       (0.6 + 0.4 * smoothstep (0.3, 0.5, ro.y));\n    else col = vec3 (0.);\n    col = col * (0.2 + 0.8 * max (dot (vn, sunDir), 0.) +\n       0.2 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.));\n  } else col = SkyCol (ro, rd);\n  if (waterRefl) {\n    col = mix (mix (vec3 (0.1, 0.15, 0.1), vec3 (0.1, 0.1, 0.12),\n       smoothstep (0.4, 0.6, Fbm2 (10. * ro.xz))),\n       0.8 * col, 1. - pow (abs (rd.y), 3.));\n    col = mix (col, vec3 (0.7), pow (clamp (WaveHt (ro) +\n       0.75 * Fbm3 (2. * ro), 0., 1.), 8.));\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.3 * pi * sin (0.03 * pi * tCur);\n  el = -0.3 * pi + 0.15 * pi * sin (0.022 * pi * tCur);\n  if (mPtr.z > 0.) {\n    el = clamp (el + pi * mPtr.y, -0.4 * pi, 0.4 * pi);\n    az = az + 2.5 * pi * mPtr.x;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 2.5));\n  ro.z = 0.3 * tCur;\n  ro.y = 4.;\n  dstFar = 50.;\n  sunDir = normalize (vec3 (1., 1., -1.));\n  waterDisp = 0.1 * tCur * vec3 (1., 0., 1.);\n  cloudDisp = 0.5 * tCur * vec3 (1., 0., 0.);\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2),\n     dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p = 2. * p.yzx;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}