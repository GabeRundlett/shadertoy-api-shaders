{
    "Shader": {
        "info": {
            "date": "1491942165",
            "description": "This lets you explore all possible quadratic equations of a Galois field. Click inside the sliders on the right to change the parameters.\n\nIn these fields, all functions of x can be represented as polynomials. As you can see, this is not true in general.",
            "flags": 32,
            "hasliked": 0,
            "id": "XsScD1",
            "likes": 7,
            "name": "Functions on Galois Fields",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "culdevu",
            "viewed": 639
        },
        "renderpass": [
            {
                "code": "// MODE 1: Rainbow\n// MODE 2: Greyscale\n// MODE 3: Just the zeros of the equation\n#define RENDER_MODE 1\n\n// For a Galios field, this number must be a prime\n// (or prime power). This ensures that multiplicative\n// inverses exist for all non-zero elements\nconst float nef = 1./3.;\nconst int numEl = 97;\nconst float numElf = float(numEl);\n\n// shoutouts to the amazing tool at\n//   http://dev.thi.ng/gradients/\n// for generating these color palettes\nvec3 color(float t)\n{\n    vec3 a = vec3(0.500, 0.500, 0.500);\n    vec3 b = vec3(0.508, 0.508, 0.500);\n    vec3 c = vec3(1.000, 1.000, 1.000);\n    vec3 d = vec3(0.000, 0.333, 0.667);\n    \n    vec3 ret = a + b * cos(2.0 * 3.14159 * (c * t + d));\n    return clamp(ret, 0.0, 1.0);\n}\n\nfloat absCircular(float t)\n{\n    float a = floor(t + 0.5);\n    return mod(abs(a - t), 1.0);\n}\n\nint m(int x)\n{\n\tint n = x/numEl;\n    return x - n * numEl;\n}\n\nint func(int x, int y)\n{\n    int a = int(numElf * texture(iChannel0, vec2(0.5, 1.0/6.0 - 1.0/12.0)).x);\n    int b = int(numElf * texture(iChannel0, vec2(0.5, 2.0/6.0 - 1.0/12.0)).x);\n    int c = int(numElf * texture(iChannel0, vec2(0.5, 3.0/6.0 - 1.0/12.0)).x);\n    int d = int(numElf * texture(iChannel0, vec2(0.5, 4.0/6.0 - 1.0/12.0)).x);\n    int e = int(numElf * texture(iChannel0, vec2(0.5, 5.0/6.0 - 1.0/12.0)).x);\n    int f = int(numElf * texture(iChannel0, vec2(0.5, 6.0/6.0 - 1.0/12.0)).x);\n    \n    return m(a*x*x + b*x + c*x*y + d*y*y + e*y + f);\n}\n\n// This was going to be used to show the difference between the Gallios \n// field and the real-valued function of the same equation, but I couldn't\n// get it to look nice. If you want to take a crack at it, be my guest.\nfloat funcReal(float x, float y)\n{\n    float a = numElf * texture(iChannel0, vec2(0.5, 1.0/6.0 - 1.0/12.0)).x;\n    float b = numElf * texture(iChannel0, vec2(0.5, 2.0/6.0 - 1.0/12.0)).x;\n    float c = numElf * texture(iChannel0, vec2(0.5, 3.0/6.0 - 1.0/12.0)).x;\n    float d = numElf * texture(iChannel0, vec2(0.5, 4.0/6.0 - 1.0/12.0)).x;\n    float e = numElf * texture(iChannel0, vec2(0.5, 5.0/6.0 - 1.0/12.0)).x;\n    float f = numElf * texture(iChannel0, vec2(0.5, 6.0/6.0 - 1.0/12.0)).x;\n    \n    return 2.0* mod(a*x*x + b*x + c*x*y + d*y*y + e*y + f, numElf) /  \n            length( vec2( 2.0*a*x + b*y + d, 2.0*c*y + b*x + e ) );\n}\n\nvec3 drawFunction(vec2 p)\n{   \n    vec3 final;\n    \n    int x = int(p.x * numElf);\n    int y = int(p.y * numElf);\n    \n    int f = func(x, y);\n    float diff = float(f) / numElf;\n    final = color(diff);\n    \n    if (RENDER_MODE == 2)\n        final = vec3(diff);\n    if (RENDER_MODE == 3)\n    {\n        final = vec3(0);\n\n        if (f == 0)\n            final = vec3(1,1,1);\n    }\n    \n    return final;\n}\n\nvec3 drawSidebar(vec2 p)\n{\n    p.x -= 1.0;\n    p.x *= iResolution.y / iResolution.x;\n    \n    float t = texture(iChannel0,p).x;\n    vec3 final = vec3(0.85,0.85,0.85);\n    \n    final = mix(color(1.0), final, pow(smoothstep(0.0, 0.004, absCircular(p.x - t)), 3.0));\n    final = mix(color(0.4), final, pow(smoothstep(0.0, 0.04, absCircular(p.y*6.0)), 3.0));\n    \n    return final;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat frameWidth = iResolution.y / numElf;\n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec3 final = vec3(0,0,0);\n    \n    if (uv.x > 1.0)\n        final = drawSidebar(uv);\n    else\n        final = drawFunction(uv);\n    \n\tfragColor = vec4(final,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tfloat final = texture(iChannel0, fragCoord.xy / iResolution.xy).x;\n    \n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec2 mouse = iMouse.xy / iResolution.y;\n    mouse.x -= 1.0;\n    mouse.x *= iResolution.y / iResolution.x;\n    \n    float sliderNumMouse = floor(mouse.y * 6.0);\n    float sliderNumUV = floor(uv.y * 6.0);\n    if (mouse.x >= 0.0 && sliderNumMouse == sliderNumUV)\n    {\n        final = mouse.x;\n    }\n    \n    final = clamp(final, 0.0, 1.0);\n    \n    fragColor = vec4(final);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}