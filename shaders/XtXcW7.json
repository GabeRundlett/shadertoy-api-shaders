{
    "Shader": {
        "info": {
            "date": "1700957757",
            "description": "Teaching my son about fractals",
            "flags": 32,
            "hasliked": 0,
            "id": "XtXcW7",
            "likes": 0,
            "name": "JhericoMandelbrotTest",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "jherico",
            "viewed": 124
        },
        "renderpass": [
            {
                "code": "const float B = 2.0;\nconst float iterations = 400.0;\n\nvec2 madelbrot(vec2 z, vec2 c) {\n\treturn vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n}\n\nfloat d2(vec2 a, vec2 b) {\n    return 0.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //fragColor = abs(vec4(pixelToDevice(fragCoord, iResolution.xy), 0.0, 1.0));\n    //return;\n    vec4 offsetAndZoom = texelFetch( iChannel0, ivec2(0, 0), 0);\n    vec2 offset = offsetAndZoom.xy;\n    float zoom = offsetAndZoom.z;\n    vec2 pixelCoords = pixelToDevice(fragCoord.xy, iResolution.xy);\n    vec2 c = pixelCoords / zoom;\n    c += offset;\n    vec2 z = vec2(0.0);\n\n    float count = 0.0;\n    for (float i = iterations; i > 0.0; i -= 1.0) {\n        z = madelbrot(z, c);\n        if( dot(z,z)>(B*B) ) {\n        \tcount = i;\n            break;\n        }\n    }\n    \n\n    if ( count == 0.0) {\n//\t\tfragColor = vec4(vec2(count / iterations),0.5+0.5*sin(iTime),1.0);\n        fragColor = vec4(vec2(0.0), offsetAndZoom.x, 1.0);\n    } else {\n        vec3 color = hue2rgb(count / iterations);\n\t\tfragColor = vec4(color,1.0);\n    }\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Numbers are based on JavaScript key codes: https://keycode.info/\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvec2 handleKeyboard(vec2 offset) {\n    float velocity = 1. / 100.; // This will cause offset to change by 0.01 each time an arrow key is pressed\n    \n    // texelFetch(iChannel1, ivec2(KEY, 0), 0).x will return a value of one if key is pressed, zero if not pressed\n    vec2 left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x * vec2(-1, 0);\n    vec2 up = texelFetch(iChannel1, ivec2(KEY_UP,0), 0).x * vec2(0, 1);\n    vec2 right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * vec2(1, 0);\n    vec2 down = texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).x * vec2(0, -1);\n    \n    offset += (left + up + right + down) * velocity;\n\n    return offset;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Return the offset value from the last frame (zero if it's first frame)\n    vec4 offsetAndZoom = texelFetch( iChannel0, ivec2(0, 0), 0).xyzw;\n    if (offsetAndZoom.z == 0.0) {\n        fragColor = vec4(0, 0, 0.4, 0);\n    } else {\n        vec2 muv = pixelToDevice(iMouse.xy, iResolution.xy);\n        float zoom = offsetAndZoom.z;\n        vec2 pos = offsetAndZoom.xy;\n\n        if (iMouse.w > 0.01) {\n            offsetAndZoom.xy += (muv * 0.5) / zoom;\n            offsetAndZoom.z *= 1.1;\n        }\n\n\n     \n        offsetAndZoom.w = abs(muv.x);\n\n        // Pass in the offset of the last frame and return a new offset based on keyboard input\n        // offset = handleKeyboard(offset);\n        fragColor = offsetAndZoom;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 pixelToDevice( vec2 a, vec2 resolution )\n{\n    vec2 muv = a / resolution.xy;\n    float ratio = resolution.x / resolution.y;\n    muv -= 0.5;\n    muv *= 2.0;\n    muv.x *= ratio;\n    return muv;\n}\n\n\n//Hue to RGB (red, green, blue).\n//Source: https://github.com/tobspr/GLSL-Color-Spaces/blob/master/ColorSpaces.inc.glsl\n#ifndef saturate\n#define saturate(v) clamp(v,0.,1.)\n//      clamp(v,0.,1.)\n#endif\nvec3 hue2rgb(float hue){\n\thue=fract(hue);\n\treturn saturate(vec3(\n\t\tabs(hue*6.-3.)-1.,\n\t\t2.-abs(hue*6.-2.),\n\t\t2.-abs(hue*6.-4.)\n\t));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}