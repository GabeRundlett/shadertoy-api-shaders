{
    "Shader": {
        "info": {
            "date": "1369815533",
            "description": "Orbit trap coloring for noise-based iterations. Totally improvised.",
            "flags": 0,
            "hasliked": 0,
            "id": "4sXGDN",
            "likes": 19,
            "name": "Iterations - coral",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "noise",
                "orbit"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 5504
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n// Other \"Iterations\" shaders:\n//\n// \"trigonometric\"   : https://www.shadertoy.com/view/Mdl3RH\n// \"trigonometric 2\" : https://www.shadertoy.com/view/Wss3zB\n// \"circles\"         : https://www.shadertoy.com/view/MdVGWR\n// \"coral\"           : https://www.shadertoy.com/view/4sXGDN\n// \"guts\"            : https://www.shadertoy.com/view/MssGW4\n// \"inversion\"       : https://www.shadertoy.com/view/XdXGDS\n// \"inversion 2\"     : https://www.shadertoy.com/view/4t3SzN\n// \"shiny\"           : https://www.shadertoy.com/view/MslXz8\n// \"worms\"           : https://www.shadertoy.com/view/ldl3W4\n// \"stripes\"         : https://www.shadertoy.com/view/wlsfRn\n\n#define AA 2\n\n// define this for slow machines - uses dFdx to approximatge derivatives\n//#define LOW_QUALITY\n\nfloat hash( vec2 p )\n{\n    vec2 q  = 50.0*fract( p*0.3183099 );\n    return -1.0+2.0*fract( (q.x+2.0)*(q.y+5.0)*(q.x+q.y) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvec2 iterate( in vec2 p, in vec4 t )\n{\n\tfloat an  = noise(13.0*p)*3.1416;\n\t      an += noise(10.0*p)*3.1416;\n\t\n\treturn p + 0.01*vec2(cos(an),sin(an));\n}\n\nvec2 doPattern( in vec2 p, in vec4 t )\n{\n    vec2 z = p;\n    vec2 s = vec2(0.0);\n    for( int i=0; i<100; i++ ) \n    {\n        z = iterate( z, t );\n\n        float d = dot( z-p, z-p ); \n        s.x += abs(p.x-z.x);\n        s.y = max( s.y, d );\n    }\n    s.x /= 100.0;\n\treturn s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 t = 0.15*iTime*vec4( 1.0, -1.5, 1.2, -1.6 ) + vec4(0.0,2.0,3.0,1.0);\n\n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int jj=0; jj<AA; jj++ )\n    for( int ii=0; ii<AA; ii++ )\n    #else\n    int ii = 0, jj = 0;\n    #endif\n    {\n        vec2 off = vec2(float(ii),float(jj))/float(AA);\n\n#ifdef LOW_QUALITY\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+off)) / iResolution.y;\n        p *= 0.85 * (3.0+2.0*cos(3.1*iTime/10.0));\n\n        vec2 s = doPattern(p,t);\n\n        vec3 nor = normalize( vec3( dFdx(s.x), 0.001, dFdy(s.x) ) );\n#else\n\n        vec2 pc = (-iResolution.xy + 2.0*(fragCoord+vec2(0,0)+off)) / iResolution.y;\n        vec2 px = (-iResolution.xy + 2.0*(fragCoord+vec2(1,0)+off)) / iResolution.y;\n        vec2 py = (-iResolution.xy + 2.0*(fragCoord+vec2(0,1)+off)) / iResolution.y;\n            \n        pc *= 0.85 * (3.0+2.0*cos(3.1*iTime/10.0));\n        px *= 0.85 * (3.0+2.0*cos(3.1*iTime/10.0));\n        py *= 0.85 * (3.0+2.0*cos(3.1*iTime/10.0));\n\n        vec2 sc = doPattern(pc,t);\n        vec2 sx = doPattern(px,t);\n        vec2 sy = doPattern(py,t);\n\n        vec3 nor = normalize( vec3( sx.x-sc.x, 0.001, sy.x-sc.x ) );\n        \n\t\tvec2 s = sc;        \n        vec2 p = pc;\n#endif        \n        vec3 col = 0.5 + 0.5*cos( s.y*3.2 + 0.5+vec3(4.5,2.4,1.5) );\n        col *= s.x*4.0;\n        col -= vec3(0.2)*dot( nor, vec3(0.7,0.1,0.7) );\n\t\tcol *= 1.4*s.y;\n        col = sqrt(col)-0.16;\n        col += 0.3*s.x*s.y*noise(p*100.0 + 40.0*s.y);\n        col *= vec3(1.0,1.,1.4);\n\n        \n        tot += col;\n    }\n    tot = tot/float(AA*AA);\n\n    vec2 q = fragCoord / iResolution.xy;\n    tot *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n\tfragColor = vec4( tot, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}