{
    "Shader": {
        "info": {
            "date": "1702492813",
            "description": "golfing 2327 chars \"3DKIFS spacecoral remix\" by iterationsteppa. https://shadertoy.com/view/ldS3zh\nremix of kali's de bird, after bird was in soup with coliflowers and condiments and an eel",
            "flags": 0,
            "hasliked": 0,
            "id": "wsVcWw",
            "likes": 26,
            "name": "3DKIFS spacecoral - golf",
            "published": 3,
            "tags": [
                "fractal",
                "kifs"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 318
        },
        "renderpass": [
            {
                "code": "// golfing 2327 chars \"3DKIFS spacecoral remix\" by iterationsteppa. https://shadertoy.com/view/ldS3zh\n// 2020-10-18 16:00:03\n// http://www.fractalforums.com/movies-showcase-%28rate-my-movie%29/very-rare-deep-sea-fractal-creature/\n//kali gl code rmxed\n\n#define R(a)            mat2(cos( a + vec4(0,11,33,0)))\n#define N               normalize\n#define v               vec3\n\nfloat M(v p) {                                                     // === scene map()\n\tp = p.zxy;                                                     // global orientation\n\tp.xy *= R( 1.5 + sin(iTime*.5) *.5 );                          // oscillation\n\tp.x *= .75;\n\tfloat s = 1., i,\n          t = iTime * 1.3,                                         // Speed\n          a =  sin(t)*.175 +  1.73;                                // RotAngle\n    v     A = N(   v(.5,-.05,-.5)                                  // RotVector\n                 + v(sin(1.),sin(t*.133),cos(t*.2)) * .45          // aniso * Amplitude\n               );\n\tp += sin( p*3.+t*6. ) *.04;\n\n\tfor ( ; i++ < 24.; )                                           // Iterations\n\t\tp.xy = abs(p.xy),\n        s *= 1.27,\n\t\tp -= v(1.2,1.95,.6) / s,                                   // Julia / Scale\n        p  = mix( A*dot(p,A), p, cos(a) ) - sin(a)*cross(p,A);     // rot3( p, A, -a )\n\n\treturn length(p)*.9;\n}\n\nvoid mainImage( out vec4 O, vec2 u )                               // === render scene\n{\n\tfloat l,i, e = .0125, d = e;\n    v     R = iResolution, \n\t      P = v(0,-.7,-20),                                        // ray start at camera pos\n\t      D = N( v( u+u - R.xy , 1.4*R.x ) ),                      // ray direction\n          L =-N( v(1,2,1) ),                                       // light direction\n          n, E; E.y = e;\n\tD.yz *= R(-.5);                                                // rotate camera\n\tP.yz *= R(-.5);\n\n\tfor ( ; i++ < 70. && d >= e && l < 50. ;  )                    // --- raymarch(from,dir) \n\t\tl += d = M( P += d*D );\n        \n    P -= e*D;                                                      // --- light(p, D)\t\n    n =  N( v (  M(P +E.yxx) - M(P -E.yxx),                        // normal(p)\n                 M(P +E.xyx) - M(P -E.xyx),\n                 M(P +E.xxy) - M(P -E.xxy)\n          )   );\n\ti =            max(0., dot(L ,-n) )                            // diffuse\n        + .5* pow( max(0., dot(D, -reflect(L,n)) ) , 30. )         // specular\n        +.15*      max(0., dot(D,-n));\t                           // diffuse from cam\n    O = vec4( // d < eps ?\n                   mix( .5, i, exp(-pow(l/21.,3.5)) )              // fog\n              // : .5 // backg\n            );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}