{
    "Shader": {
        "info": {
            "date": "1721604320",
            "description": "A bunch of wobbly lines spinning around the canvas.",
            "flags": 0,
            "hasliked": 0,
            "id": "XfsyWj",
            "likes": 4,
            "name": "Wobble Lines",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "repetition"
            ],
            "usePreview": 0,
            "username": "draradech",
            "viewed": 94
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define LINES 13.\n#define iTime (iTime + 54.)\n\nfloat hash(float v)\n{\n    return fract(sin(v) * 5897.);\n}\n\nfloat frand(vec2 c)\n{\n    return hash(c.x + 983. * hash(c.y + 911. * hash(iDate.w)));\n}\n\nfloat wobbleline(vec2 p1, vec2 p2, float w, float n, vec2 p)\n{\n    vec2 l = p1 - p2;\n    float ll = dot(l, l);\n    float t = clamp(dot(p - p1, p2 - p1) / ll, 0., 1.);\n    w = w * (2. + cos(n * 2. * PI * t)) / 3.;\n    vec2 proj = p1 + t * (p2 - p1);\n    return distance(p, proj) - w;\n}\n\nvec2 rotate(float a, vec2 p)\n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * p;\n}\n\nvec2 translate(vec2 t, vec2 p)\n{\n    return p + t;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // small side is -1 to 1\n    vec2 uv = (2. * fragCoord - iResolution.xy) / min(iResolution.yy, iResolution.xx);\n    \n    // 1/2 antialiasing width\n    float aaw = 1.5 / iResolution.y;\n    \n    // background is 30% brightness (-1. -> 100%, 1. -> 0%)\n    float d = .4 * aaw; \n    \n    // slowly rotate whole canvas\n    uv = rotate(iTime / 3., uv);\n    \n    // line endpoints before transformations\n    vec2 p1 = vec2(-.8, 0.);\n    vec2 p2 = vec2(.8, 0.);\n    \n    // line repetition\n    for (float i = 0.; i < LINES; i++)\n    {\n        // translation vector\n        vec2 t = vec2(sin(5. * iTime / 10.) * 0.8 / LINES, sin(7. * iTime / 10.) * 0.8 / LINES) * i;\n        // rotation angle\n        float a = 2. * PI / LINES * i * sin(3. * iTime / 10.);\n        // SDF\n        d = min(d, wobbleline(p1, p2, .02, 20., translate(t, rotate(a, uv))));\n    }\n    \n    // SDF 0 is centerline for aa\n    float b = smoothstep(aaw, -aaw, d);\n    \n    // shadertoy default colors\n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n    \n    // noise (to hide color banding in the background)\n    float n = frand(fragCoord);\n    \n    // output\n    fragColor = vec4(b * col + .05 * n, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}