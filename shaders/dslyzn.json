{
    "Shader": {
        "info": {
            "date": "1686528209",
            "description": "5px waterfall",
            "flags": 0,
            "hasliked": 0,
            "id": "dslyzn",
            "likes": 0,
            "name": "Barcode waterfall",
            "published": 3,
            "tags": [
                "pixel"
            ],
            "usePreview": 0,
            "username": "nhobb",
            "viewed": 137
        },
        "renderpass": [
            {
                "code": "\n\nfloat PIXEL = 5.;\n\n\n/* uv from -1 to 1 but stepped by a pixel resolution*/\n/* horizontally goes further than -1, 1 because it's wider */\nvec2 pixelCoord(vec2 fragCoord) {\n  int ix = int(floor(fragCoord.x / PIXEL));\n  int iy = int(floor(fragCoord.y / PIXEL));\n  float scaling = iResolution.y / PIXEL;\n  vec2 center = vec2(iResolution.x / iResolution.y, 1.0);\n  float x = float(ix)/scaling*2.0 - center.x;\n  float y = float(iy)/scaling*2.0 - center.y;\n  return vec2(x,y);\n}\n\n\n/* noise and hash from https://www.shadertoy.com/view/4dS3Wd */\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = pixelCoord(fragCoord);\n\n    float bg = 0.9*step(0.4,noise((uv.y-floor(iTime*2.)/PIXEL/2.)*1132.23))+0.7;\n\n    \n    vec3 col = bg*vec3(0.8);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}