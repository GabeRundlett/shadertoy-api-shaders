{
    "Shader": {
        "info": {
            "date": "1685847605",
            "description": "[url]https://youtu.be/f4s1h2YETNY[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "ctcSDs",
            "likes": 1,
            "name": "ohoho1d",
            "published": 3,
            "tags": [
                "fractal",
                "sdf",
                "tutorial",
                "intro",
                "repetition",
                "code",
                "youtube",
                "tuto",
                "creative"
            ],
            "usePreview": 0,
            "username": "dmteam",
            "viewed": 147
        },
        "renderpass": [
            {
                "code": "vec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.2, 0.5);   // Mauve\n    vec3 b = vec3(1.0, 1.0, 0.0);   // Jaune\n    vec3 c = vec3(0.0, 1.0, 0.0);   // Vert\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        float t = length(uv0) + i * 0.2 + sin(iTime * 0.5) * 0.2;\n\n        vec3 col = palette(t);\n\n        // Ajout des formes triangulaires qui bougent\n        float triangleSize = 0.1;  // Taille des triangles\n        vec2 trianglePos = vec2(0.3, 0.5);  // Position initiale des triangles\n        vec2 translatedUV = uv - trianglePos;\n        float triangleMask = smoothstep(triangleSize, triangleSize + 0.01, abs(translatedUV.x) + abs(translatedUV.y));\n\n        d = sin(d * 8.0 + iTime) / 8.0;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += mix(col, vec3(1.0), triangleMask) * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}