{
    "Shader": {
        "info": {
            "date": "1584315251",
            "description": "Another diamond cubic, inspired by [url]https://www.shadertoy.com/view/lsG3RG[/url] by kqyrt and using some code from [url]https://www.shadertoy.com/view/WdsyzH[/url] by Axioplase.\n\nNow with controls: see code.",
            "flags": 48,
            "hasliked": 0,
            "id": "tdlcRN",
            "likes": 10,
            "name": "Another Diamond Cubic",
            "published": 3,
            "tags": [
                "diamond",
                "monochrome",
                "cubic"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 473
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Diamond Cubic structure\n//\n// Each 2x2x2 region is divided into 8 cubic cells, alternately type 0 and type 1\n// Type 0 has an atom at alternating corners and at the centre, the central\n// atom has a bond with each corner atom. Type 1 has an atom at the other set\n// of alternating corners and is otherwise empty. The corner atoms overlap\n// between cells.\n//\n// Controls:\n// <mouse>: rotate\n// <up>/<down>: move in/out\n// <left>/<right>: fog distance\n// i: apply inversion\n// s: swap cell types\n// r: show fundamental region\n//\n// For further details, see:\n// https://en.wikipedia.org/wiki/Diamond_cubic\n//\n// Another nice diamond cubic shader:\n// https://www.shadertoy.com/view/lsG3RG by kqyrt\n//\n// This shader uses some code from;\n// https://www.shadertoy.com/view/WdsyzH[/url] by Axioplase\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.14159;\nint maxsteps = 200;\nfloat maxdist = 15.0;\nfloat pradius = 0.3;  // Point radius\nfloat lradius = 0.1;  // Line radius\nbool dorotate = true; // Autorotate\nbool doinvert = true;\nbool doswap = false;\nbool showregion = false;\n\nfloat segment(vec3 p, vec3 a, vec3 b) {\n  vec3 pa = p - a;\n  vec3 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nfloat point(vec3 p, vec3 q) {\n  return distance(p,q);\n}\n\nfloat cell0(vec3 p, out int type) {\n  vec3 p0 = vec3(0);\n  vec3 p1 = vec3(1,1,1);\n  vec3 p2 = vec3(-1,-1,1);\n  vec3 p3 = vec3(1,-1,-1);\n  vec3 p4 = vec3(-1,1,-1);\n  type = 0;\n  float d = 1e8, d0 = d;\n  d = min(d, point(p,p0)-pradius);\n  d = min(d, point(p,p1)-pradius);\n  d = min(d, point(p,p2)-pradius);\n  d = min(d, point(p,p3)-pradius);\n  d = min(d, point(p,p4)-pradius);\n  if (d < d0) { d0 = d; type = 1; }\n  d = min(d, segment(p,p0,p1)-lradius);\n  d = min(d, segment(p,p0,p2)-lradius);\n  d = min(d, segment(p,p0,p3)-lradius);\n  d = min(d, segment(p,p0,p4)-lradius);\n  if (d < d0) { d0 = d; type = 2; }\n  return d;\n}\n\nfloat cell1(vec3 p, out int type) {\n  vec3 p1 = vec3(-1,1,1);\n  vec3 p2 = vec3(1,-1,1);\n  vec3 p3 = vec3(1,1,-1);\n  vec3 p4 = vec3(-1,-1,-1);\n  type = 0;\n  float d = 1e8, d0 = d;\n  d = min(d, point(p,p1)-pradius);\n  d = min(d, point(p,p2)-pradius);\n  d = min(d, point(p,p3)-pradius);\n  d = min(d, point(p,p4)-pradius);\n  if (d < d0) { d0 = d; type = 1; }\n  return d;\n}\n\nfloat getdist(vec3 p, out int type) {\n  float k = 1.0;\n  if (doinvert) {\n    k = 0.3*dot(p,p);\n    p /= k;\n  }\n  if (!showregion) {\n    // Space division into 4x4x4 cubes\n    p = mod(p+1.0,4.0)-2.0; // [-1,+3] -> [-2,+2]\n  }\n  // Parity of cell index\n  int celltype = (int(p.x < 0.0)+int(p.y < 0.0)+int(p.z < 0.0)) % 2;\n  if (doswap) celltype = 1-celltype;\n  // mod not used for next step to preserve fundamental region.\n  p += 1.0-2.0*step(0.0,p); // x -> x < 0 ? x+1 : x-1\n  return k*(celltype == 0 ? cell0(p,type) : cell1(p,type));\n}\n\nfloat getdist(vec3 p) {\n  int type;\n  return getdist(p,type);\n}\n\nfloat march(vec3 ro, vec3 rd) {\n  float t = 0.0;\n  float precis = 0.0005;\n  for(int i = 0; i < maxsteps; i++) {\n    vec3 p = ro + t*rd;\n    float d = getdist(p);\n    // Longer distance estimates with inversion are\n    // inaccurate, so clamp to avoid overstepping.\n    if (doinvert) d = min(d,1.0);\n    t += 0.6*d;\n    if (t > maxdist || abs(d) < t*precis) break;\n  }\n  return t;\n}\n\nvec3 getnormal(vec3 p) {\n  float d = getdist(p);\n  vec2 e = vec2(0.001, 0);\n  vec3 n = d - vec3(getdist(p-e.xyy),\n                    getdist(p-e.yxy),\n                    getdist(p-e.yyx));\n  return normalize(n);\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  if (dorotate) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.1);\n  }\n  return p;\n}\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return v * mix( vec3(1.0), rgb, s);\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_I = 73;\nconst int CHAR_M = 77;\nconst int CHAR_O = 79;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_X = 88;\nconst int CHAR_Z = 90;\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nbool key(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec2 m = iMouse.xy/iResolution.y;\n  vec3 ro = vec3(0,0,-4);\n  vec3 rd = normalize(vec3(uv,2));\n  vec3 light = normalize(vec3(1,2,3));\n  doinvert = key(CHAR_I);\n  showregion = key(CHAR_R);\n  doswap = key(CHAR_S);\n  maxdist = 10.0*(exp(0.1*float(keycount(KEY_RIGHT)-keycount(KEY_LEFT))));\n  ro.z += 0.25*float(keycount(KEY_UP)-keycount(KEY_DOWN));\n  ro = transform(ro);\n  rd = transform(rd);\n  float t = march(ro, rd);\n  vec3 basecol = hsv2rgb(0.1+0.01*iTime,1.0,1.0); //vec3(1,0.5,0);\n  vec3 col = mix(vec3(1),basecol,0.75);\n  if (t < maxdist) {\n    vec3 p = ro+t*rd;\n    int type;\n    getdist(p,type);\n    vec3 n = getnormal(p);\n    float diffuse = mix(1.0,dot(n,light),0.5);\n    float intensity = type == 1 ? 0.5 : 1.0;\n    vec3 c = diffuse*intensity*basecol;\n    float fog = t/maxdist;\n    col = mix(c,col,fog);\n  }\n    \n  col = pow(col,vec3(0.4545));\t// gamma correction\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else   \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0) {\n      t = vec4(0);\n    } else {\n      t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n        \n#endif           \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}