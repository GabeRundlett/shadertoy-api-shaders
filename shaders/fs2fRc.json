{
    "Shader": {
        "info": {
            "date": "1678414365",
            "description": "z to undo",
            "flags": 48,
            "hasliked": 0,
            "id": "fs2fRc",
            "likes": 49,
            "name": "Paint in shadertoy",
            "published": 3,
            "tags": [
                "paint"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 1197
        },
        "renderpass": [
            {
                "code": "//!!!!!!spaghetti code alert!!!!!!\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    float slider = texelFetch( iChannel0, ivec2(0, 0),0 ).x;\n    vec2 sampler = texelFetch( iChannel0, ivec2(0, 0),0 ).zw;\n    float alphaPos = texelFetch( iChannel0, ivec2(0, 0),0 ).y;\n    float widthPos = texelFetch( iChannel0, ivec2(1, 0),0 ).x;\n    int tool = int(texelFetch( iChannel0, ivec2(1, 0),0 ).y);\n    vec4 canvasCol = texelFetch( iChannel1, ivec2(fragCoord),0 );\n    vec4 editCol = texelFetch( iChannel2, ivec2(fragCoord),0 );\n    float pxunit = ceil(0.005/(1.0/iResolution.y))*1.0/iResolution.y; //the width to guarentee all lines are the same thickness\n    float minWidth = 5.0/iResolution.y;\n    float maxWidth = floor(0.05/(1.0/iResolution.y))*(1.0/iResolution.y);\n    float maxX = iResolution.x/iResolution.y;\n    \n    vec3 background = vec3(0.6,0.6,0.65);\n    vec3 panel = vec3(0.85,0.86,0.87);\n    vec3 border = vec3(0.05,0.05,0.1);\n    vec3 white = vec3(1);\n    \n    vec3 col = background;\n    \n    \n    //ui code\n    vec4 colorPickArea = vec4(0.05, 0.5, 0.5, 0.95);\n    vec4 slideArea = vec4(0.53, colorPickArea.y, 0.57, colorPickArea.w);\n    vec4 sliderArea = vec4(slideArea.x, slider-0.01, slideArea.z, slider+0.01);\n    vec4 colorPickerArea = vec4(sampler.x - 0.02, sampler.y - 0.02, sampler.x + 0.02, sampler.y + 0.02);\n    vec4 pickedColorArea = vec4(slideArea.x, colorPickArea.w, slideArea.z, slideArea.z - slideArea.x);\n    vec4 alphaArea = vec4(colorPickArea.x, 0.43, slideArea.z, 0.47);\n    vec4 alphaSlider = vec4(alphaPos-0.01, alphaArea.y, alphaPos+0.01, alphaArea.w);\n    vec4 strokeSlideBoundingBox = vec4(colorPickArea.x, 0.33, slideArea.z-0.01, 0.4);\n    vec4 drawingArea = vec4(0.65, 0.05, maxX - 0.05, 0.95);\n    vec4 toolBoxArea = vec4(0.03, 0.03, 0.6, 0.97);\n    vec4 toolOutline = vec4(0, 0, 0.1, 0.1);\n    \n    vec2 brushPos = vec2(0.06, 0.2);\n    vec2 eraserPos = vec2(0.19, 0.2);\n    vec2 bucketPos = vec2(0.32, 0.2);\n    vec2 eyedropperPos = vec2(0.45, 0.2);\n    \n    float hue = map(slideArea.yw, slider);\n    float sat = map(colorPickArea.xz, sampler.x);\n    float val = map(colorPickArea.yw, sampler.y);\n    float alpha = map(alphaArea.xz, alphaPos);\n    float width = mix(minWidth/2.0, maxWidth/2.0, map(strokeSlideBoundingBox.xz, widthPos)); \n    \n    //toolbox frame\n    if (inArea(toolBoxArea + vec2(-pxunit,pxunit).xxyy, uv)){\n        if (!inArea(toolBoxArea, uv)){\n            col = border;\n        } else {\n            col = panel;\n        }\n    }\n    //color pick area\n    if (inArea(colorPickArea + vec2(-pxunit,pxunit).xxyy, uv)) {\n        col = border;\n        if (inArea(colorPickArea, uv)) {\n            col = hsvToRgb(vec3(hue, map(colorPickArea.xz, uv.x), map(colorPickArea.yw, uv.y)));\n        }\n    }\n    //slide area\n    if (inArea(slideArea + vec2(-pxunit,pxunit).xxyy, uv)) {\n        col = border;\n        if (inArea(slideArea, uv)) {\n            col = hsvToRgb(vec3(map(slideArea.yw, uv.y),1.0,1.0));\n        }\n    }\n    //slider\n    if (inArea(sliderArea + vec2(-pxunit,pxunit).xxyy*2.0, uv)){\n        col = border;\n        if (inArea(sliderArea + vec2(-pxunit,pxunit).xxyy, uv)){\n            col = hsvToRgb(vec3(hue,1.0,1.0));\n        }\n    }\n    //color picker\n    if (inArea(colorPickerArea + vec2(-pxunit,pxunit).xxyy, uv)){\n        col = border;\n        if (inArea(colorPickerArea, uv)){\n            col = hsvToRgb(vec3(hue, sat, val));\n        }\n    }\n    //picked color area\n    if (inArea(pickedColorArea + vec2(-pxunit,pxunit).xxyy, uv)){\n        col = border;\n        if (inArea(pickedColorArea, uv)){\n            \n        }\n    }\n    //alpha area\n    if (inArea(alphaArea + vec2(-pxunit,pxunit).xxyy, uv)) {\n        col = border;\n        if (inArea(alphaArea, uv)) {\n            bool xStripe = mod(uv.x*40.0, 2.0) - 1.0 > 0.0;\n            bool yStripe = mod(uv.y*40.0, 2.0) - 1.0 > 0.0;\n            vec3 grid = (xStripe || yStripe) && !(xStripe && yStripe) ? panel : white;\n            col = mix(hsvToRgb(vec3(hue, sat, val)), grid, map(alphaArea.zx, uv.x));\n        }\n    }\n    //alpha slider\n    if (inArea(alphaSlider + vec2(-pxunit,pxunit).xxyy, uv)) {\n        col = border;\n        if (inArea(alphaSlider, uv)) {\n            bool xStripe = mod((uv.x - alphaSlider.x)*80.0, 2.0) - 1.0 > 0.0;\n            bool yStripe = mod(uv.y*80.0, 2.0) - 1.0 > 0.0;\n            vec3 grid = vec3((xStripe || yStripe) && !(xStripe && yStripe) ? 0.8 : 1.0);\n            col = mix(hsvToRgb(vec3(hue, sat, val)), grid, map(alphaArea.zx, alphaPos));\n            \n        }\n    }\n    //stroke width slider\n    if (inArea(strokeSlideBoundingBox.x-minWidth/2.0 - pxunit, strokeSlideBoundingBox.y, strokeSlideBoundingBox.z+maxWidth/2.0 + pxunit, strokeSlideBoundingBox.w, uv)) {\n        vec2 maxOrigin = vec2(strokeSlideBoundingBox.z, (strokeSlideBoundingBox.y + strokeSlideBoundingBox.w)/2.0);\n        vec2 minOrigin = vec2(strokeSlideBoundingBox.x, (strokeSlideBoundingBox.y + strokeSlideBoundingBox.w)/2.0);\n        float d = distToArc(270.0, 90.0, maxWidth/2.0, maxOrigin, uv);\n        d = min(d, distToArc(90.0, 270.0, minWidth/2.0, minOrigin, uv));\n        d = min(d, distToSegment(minOrigin + vec2(0,minWidth/2.0), maxOrigin + vec2(0, maxWidth/2.0), uv));\n        d = min(d, distToSegment(minOrigin - vec2(0,minWidth/2.0), maxOrigin - vec2(0, maxWidth/2.0), uv));\n        d = min(d, distance(vec2(widthPos, maxOrigin.y), uv) - mix(minWidth, maxWidth, map(minOrigin.x, maxOrigin.x, widthPos))/2.0);\n        col = mix(border, panel, smoothstep(-pxunit/2.0, 0.0, d-pxunit/1.5));\n    }\n    //canvas area\n    if (inArea(drawingArea + vec2(-pxunit,pxunit).xxyy, uv)){\n        col = border;\n        if (inArea(drawingArea, uv)){\n            vec3 grid = mod(floor(uv.x*40.0), 2.0) + mod(floor(uv.y*40.0), 2.0) == 1.0 ? panel : white;\n            col = mixrgba(mixrgba(editCol, canvasCol), vec4(grid, 1)).rgb;\n        }\n    }\n    //brush\n    if (inArea(toolOutline + vec2(-pxunit,pxunit).xxyy + brushPos.xyxy, uv)){\n        col = tool == 0 ? white : border;\n        if (inArea(toolOutline + brushPos.xyxy, uv)){\n            col = panel;\n            vec2 icoUv = map(brushPos.xyxy + vec4(0,0,toolOutline.zw), uv)*2.0-1.0;\n            float icoPixel = pxunit/toolOutline.w*2.0;\n            vec4 icoCol = brushIcon(icoUv, icoPixel);\n            col = mix(col, icoCol.rgb, icoCol.a);\n        }\n    }\n    //eraser\n    if (inArea(toolOutline + vec2(-pxunit,pxunit).xxyy + eraserPos.xyxy, uv)){\n        col = tool == 1 ? white : border;\n        if (inArea(toolOutline + eraserPos.xyxy, uv)){\n            col = panel;\n            vec2 icoUv = map(eraserPos.xyxy + vec4(0,0,toolOutline.zw), uv)*2.0-1.0;\n            float icoPixel = pxunit/toolOutline.w*2.0;\n            vec4 icoCol = eraserIcon(icoUv, icoPixel);\n            col = mix(col, icoCol.rgb, icoCol.a);\n        }\n    }\n    //bucket\n    if (inArea(toolOutline + vec2(-pxunit,pxunit).xxyy + bucketPos.xyxy, uv)){\n        col = tool == 2 ? white : border;\n        if (inArea(toolOutline + bucketPos.xyxy, uv)){\n            col = panel;\n            vec2 icoUv = map(bucketPos.xyxy + vec4(0,0,toolOutline.zw), uv)*2.0-1.0;\n            float icoPixel = pxunit/toolOutline.w*2.0;\n            vec4 icoCol = bucketIcon(icoUv, icoPixel);\n            col = mix(col, icoCol.rgb, icoCol.a);\n        }\n    }\n    //eyedropper\n    if (inArea(toolOutline + vec2(-pxunit,pxunit).xxyy + eyedropperPos.xyxy, uv)){\n        col = tool == 3 ? white : border;\n        if (inArea(toolOutline + eyedropperPos.xyxy, uv)){\n            col = panel;\n            vec2 icoUv = map(eyedropperPos.xyxy + vec4(0,0,toolOutline.zw), uv)*2.0-1.0;\n            float icoPixel = pxunit/toolOutline.w*2.0;\n            vec4 icoCol = eyedropperIcon(icoUv, icoPixel);\n            col = mix(col, icoCol.rgb, icoCol.a);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//ui control and global data\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(0)) { //pixel (0,0)\n        vec4 m = vec4(iMouse.xy/iResolution.y, abs(iMouse.zw)/iResolution.y); //normalize mouse coords\n        vec4 sampledCol = vec4(0);\n        float maxX = iResolution.x/iResolution.y;\n        vec4 drawingArea = vec4(0.65, 0.05, maxX - 0.05, 0.95);\n        \n        if (iMouse.z > 0.0 && int(texelFetch( iChannel0, ivec2(1, 0),0 ).y) == 3 &&\n            m.x >= drawingArea.x && m.x <= drawingArea.z && m.y >= drawingArea.y && m.y <= drawingArea.w) \n        {\n            sampledCol = mixrgba(texelFetch( iChannel2, ivec2(iMouse.xy),0 ), texelFetch( iChannel1, ivec2(iMouse.xy),0 ));\n            sampledCol = vec4(rgbToHsv(sampledCol.rgb),sampledCol.a);\n            \n            vec4 colorPickArea = vec4(0.05, 0.5, 0.5, 0.95);\n            vec4 slideArea = vec4(0.53, colorPickArea.y, 0.57, colorPickArea.w);\n            vec4 alphaArea = vec4(colorPickArea.x, 0.43, slideArea.z, 0.47);\n            \n            //hue\n            col.x = (colorPickArea.w - colorPickArea.y)*sampledCol.x + colorPickArea.y;\n            //alpha\n            col.y = (alphaArea.z - alphaArea.x)*sampledCol.a + alphaArea.x;\n            //colorpicker\n            col.zw = (colorPickArea.zw - colorPickArea.xy)*sampledCol.yz + colorPickArea.xy;\n        } else {\n            //hue\n            if (m.z >= 0.53 && m.w >= 0.5 && m.z <= 0.57 && m.w <= 0.95 && iMouse.z > 0.0) { //check if last mouse click was in slider area & mouse is clicked\n                col.x = clamp(m.y,0.5,0.95); //move slider, restrained to area\n            } else {\n                col.x = texelFetch( iChannel0, ivec2(0, 0),0 ).x; //leave slider position unchanged\n                col.x = clamp(col.x,0.5,0.95); //fixes starting position\n            }\n\n            //alpha\n            if (m.z >= 0.05 && m.w >= 0.43 && m.z <= 0.57 && m.w <= 0.47 && iMouse.z > 0.0){\n                col.y = clamp(m.x,0.05,0.57);\n            } else {\n                col.y = texelFetch( iChannel0, ivec2(0, 0),0 ).y;\n                col.y = clamp(col.y,0.05,0.57);\n            }\n\n            //colorpicker\n            if (m.z > 0.05 && m.z < 0.5 && m.w > 0.5 && m.w < 0.95 && iMouse.z > 0.0){\n                col.zw = vec2(clamp(m.x, 0.05, 0.5), clamp(m.y, 0.5, 0.95));\n            } else {\n                col.zw = texelFetch( iChannel0, ivec2(0, 0),0 ).zw;\n                col.zw = vec2(clamp(col.z, 0.05, 0.5), clamp(col.w, 0.5, 0.95));\n            }\n            \n            if (iFrame == 0){\n                col.zw = vec2(0.5, 0.95);\n                col.y = 0.57;\n            }\n        }\n    }\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec4 m = vec4(iMouse.xy/iResolution.y, abs(iMouse.zw)/iResolution.y);\n        //brush width\n        if (m.z >= 0.05 && m.w >= 0.33 && m.z <= 0.57 && m.w <= 0.4 && iMouse.z > 0.0) {\n            col.x = clamp(m.x,0.05,0.57); \n        } else {\n            col.x = texelFetch( iChannel0, ivec2(1, 0),0 ).x; \n            col.x = clamp(col.x,0.05,0.57);\n        }\n        //tool\n        if (m.z >= 0.06 && m.w >= 0.2 && m.z <= 0.16 && m.w <= 0.3 && iMouse.z > 0.0) {\n            col.y = 0.0; \n        } else if (m.z >= 0.19 && m.w >= 0.2 && m.z <= 0.29 && m.w <= 0.3 && iMouse.z > 0.0){\n            col.y = 1.0;\n        } else if (m.z >= 0.32 && m.w >= 0.2 && m.z <= 0.42 && m.w <= 0.3 && iMouse.z > 0.0){\n            col.y = 2.0;\n        } else if (m.z >= 0.45 && m.w >= 0.2 && m.z <= 0.55 && m.w <= 0.3 && iMouse.z > 0.0){\n            col.y = 3.0;\n        } else {\n            col.y = texelFetch( iChannel0, ivec2(1, 0),0 ).y;\n        }\n        //paint\n        \n        //canvas mouse position (-1,-1) = not on canvas / not held\n        col.zw = m.xy;\n    }\n    if (floor(fragCoord) == vec2(2,0)) {\n        col.xy = texelFetch( iChannel0, ivec2(1, 0),0 ).zw;\n        if (iFrame == 0) col.xy = iMouse.xy;\n        col.z = iMouse.z >= 0.0 ? 1.0 : 0.0;\n        col.w = texelFetch( iChannel0, ivec2(2, 0),0 ).z;\n    }\n    if (floor(fragCoord) == vec2(3,0)) {\n        col.x = iResolution.x;\n        col.y = texelFetch( iChannel0, ivec2(3, 0),0 ).x;\n        col.z = col.y/col.x; \n        col.w = col.y != col.x ? 1.0 : 0.0;\n    }\n    if (floor(fragCoord) == vec2(5,0)){ //clicked color\n        vec4 lastClickedColor = texelFetch(iChannel0, ivec2(5, 0),0 );\n        if (sign(iMouse.w) == 1.0){\n            col = texelFetch(iChannel1, ivec2(iMouse.xy),0);\n        } else {\n            col = lastClickedColor;\n        }\n    }\n    if (floor(fragCoord) == vec2(6,0)){ //current color\n        float slider = texelFetch( iChannel0, ivec2(0, 0),0 ).x;\n        vec2 sampler = texelFetch( iChannel0, ivec2(0, 0),0 ).zw;\n        float alphaPos = texelFetch( iChannel0, ivec2(0, 0),0 ).y;\n        float maxX = iResolution.x/iResolution.y;\n        vec4 drawingArea = vec4(0.65, 0.05, maxX - 0.05, 0.95);\n\n        float hue = map(0.5, 0.95, slider);\n        float sat = map(0.05, 0.5, sampler.x);\n        float val = map(0.5, 0.95, sampler.y);\n        float alpha = map(0.05, 0.57, alphaPos);\n        col = vec4(hsvToRgb(vec3(hue, sat, val)), alpha);\n    }\n    if (floor(fragCoord) == vec2(7,0)){ //brush width\n        float minWidth = 5.0/iResolution.y;\n        float maxWidth = floor(0.05/(1.0/iResolution.y))*(1.0/iResolution.y);\n        float widthPos = texelFetch( iChannel0, ivec2(1, 0),0 ).x;\n        col.r = mix(minWidth/2.0, maxWidth/2.0, map(0.05, 0.57, widthPos));\n    }\n    if (floor(fragCoord) == vec2(8,0)){ //z down\n        col.x = texelFetch( iChannel3, ivec2(90,0),0 ).x;\n        col.y = texelFetch( iChannel0, ivec2(8,0),0 ).x;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//returns a rgb color given a hue, saturation, value color\n//https://en.wikipedia.org/wiki/HSL_and_HSV#/media/File:HSV-RGB-comparison.svg\nvec3 hsvToRgb(vec3 hsv){ //hsv.x = hue, hsv.y = saturation, hsv.z = value\n    vec3 col = vec3(hsv.x, hsv.x + 2.0/3.0, hsv.x + 4.0/3.0); //inputs for r, g, and b\n    col = clamp(abs(mod(col*2.0, 2.0)-1.0)*3.0 - 1.0, 0.0, 1.0)*hsv.z*hsv.y + hsv.z - hsv.z*hsv.y; //hue function (graph it on desmos)\n    return col;\n}\n\n//returns a hue, saturation, value color given a rgb color\n//https://www.rapidtables.com/convert/color/rgb-to-hsv.html\nvec3 rgbToHsv(vec3 rgb){\n    vec3 hsv = vec3(0);\n    float maxC = max(max(rgb.r,rgb.g),rgb.b);\n    float minC = min(min(rgb.r,rgb.g),rgb.b);\n    float delta = maxC - minC;\n    if (maxC == rgb.r) hsv.x = mod((rgb.g - rgb.b)/delta,6.0)/6.0;\n    if (maxC == rgb.g) hsv.x = (rgb.b - rgb.r)/(delta*6.0) + 1.0/3.0;\n    if (maxC == rgb.b) hsv.x = (rgb.r - rgb.g)/(delta*6.0) + 2.0/3.0;\n    hsv.y = delta/maxC;\n    hsv.z = maxC;\n    return hsv;\n}\n\nvec4 mixrgba(vec4 s, vec4 d){ //s on top, d on bottom\n    if (s.a < 0.0){\n        return vec4(d.rgb, max(d.a+s.a, 0.0));\n    }\n    float a = s.a + d.a*(1.0-s.a);\n    if (a == 0.0){\n        return vec4(0.0);\n    } \n    vec3 c = s.rgb*s.a + d.rgb*d.a*(1.0-s.a);\n    return vec4(c/a, a);\n}\n\n//returns if a coord is within an aabb area\nbool inArea(float startx, float starty, float endx, float endy, vec2 uv){\n    return uv.x >= startx && uv.y >= starty && uv.x <= endx && uv.y <= endy;\n}\n\n//returns if a coord is within an aabb area\nbool inArea(vec4 aabb, vec2 uv){\n    return uv.x >= aabb.x && uv.y >= aabb.y && uv.x <= aabb.z && uv.y <= aabb.w;\n}\n\n//returns 1 - 0 where start is 0 and end is 1\nfloat map(float start, float end, float uv){\n    return (uv - start)/(end-start);\n}\n\n//returns 1 - 0 where start is 0 and end is 1\nfloat map(vec2 range, float uv){\n    return (uv - range.x)/(range.y-range.x);\n}\n\n//returns 1 - 0 where start is 0 and end is 1\nvec2 map(vec4 range, vec2 uv){\n    return (uv - range.xy)/(range.zw-range.xy);\n}\n\nvec2 closestPointOnLineSegment(vec2 a, vec2 b, vec2 p) {\n    vec2 ab = b - a;\n    float t = dot(p - a, ab) / dot(ab, ab);\n    return a + clamp(t,0.0,1.0) * ab; \n}\n\nfloat distToSegment(vec2 a, vec2 b, vec2 uv){\n    vec2 p = closestPointOnLineSegment(a,b, uv);\n    return length(uv - p);\n}\n\nfloat distToArc(float sa, float ea, float r, vec2 o, vec2 p){\n    sa = mod(mod(sa,360.0) + 360.0, 360.0);\n    ea = mod(mod(ea,360.0) + 360.0, 360.0);\n    p -= o;\n    float a = mod(mod(degrees(atan(p.y,p.x)),360.0) + 360.0, 360.0);\n    \n    //https://stackoverflow.com/questions/12234574/calculating-if-an-angle-is-between-two-angles\n    if ((sa < ea) ? (sa <= a && a <= ea) : (sa <= a || a <= ea)){\n        return abs(r - length(p));\n    }\n    \n    vec2 p1 = vec2(cos(radians(sa)), sin(radians(sa)))*r;\n    vec2 p2 = vec2(cos(radians(ea)), sin(radians(ea)))*r;\n    return min(distance(p1, p), distance(p2, p));\n}\n\n//returns an icon of a brush\nvec4 brushIcon(vec2 uv, float pxunit){\n    vec4 col = vec4(0,0,0,0);\n    float d = distToSegment(vec2(-0.85, -0.6), vec2(-0.85,-0.85), uv);\n    d = min(d, distToSegment(vec2(-0.6, -0.85), vec2(-0.85,-0.85), uv));\n    d = min(d, distToSegment(vec2(-0.65, -0.25), vec2(0.55,0.75), uv));\n    d = min(d, distToSegment(vec2(-0.25, -0.65), vec2(0.75, 0.55), uv));\n    d = min(d, distToArc(300.0, 150.0, 0.15, vec2(0.6, 0.6), uv));\n    d = min(d, distToArc(270.0, 180.0, 0.25, vec2(-0.6, -0.6), uv));\n    col.a = mix(1.0, 0.0, smoothstep(-pxunit/2.0, 0.0, d-pxunit/1.5));\n    return col;\n}\n\n//returns an icon of an eraser\nvec4 eraserIcon(vec2 uv, float pxunit){\n    vec4 col = vec4(0,0,0,0);\n    float d = distToSegment(vec2(0.8,0.25), vec2(0.0, -0.6), uv);\n    d = min(d, distToSegment(vec2(0.0, -0.6), vec2(-0.9,-0.6), uv));\n    d = min(d, distToSegment(vec2(-0.9,-0.6), vec2(-0.75,-0.1), uv));\n    d = min(d, distToSegment(vec2(0.0,0.6), vec2(-0.75,-0.1), uv));\n    d = min(d, distToSegment(vec2(0.0,0.6), vec2(0.9,0.6), uv));\n    d = min(d, distToSegment(vec2(0.8,0.25), vec2(0.9,0.6), uv));\n    col.a = mix(1.0, 0.0, smoothstep(-pxunit/2.0, 0.0, d-pxunit/1.5));\n    return col;\n}\n\n//returns an icon of an bucket\nvec4 bucketIcon(vec2 uv, float pxunit){\n    vec4 col = vec4(0,0,0,0);\n    float d = distToSegment(vec2(-0.15,-0.85), vec2(0.53, -0.17), uv);\n    d = min(d, distToSegment(vec2(-0.3,-0.85), vec2(-0.15,-0.85), uv));\n    d = min(d, distToSegment(vec2(-0.3,-0.85), vec2(-0.85, -0.3), uv));\n    d = min(d, distToSegment(vec2(-0.85, -0.3), vec2(-0.85,-0.2), uv));\n    d = min(d, distToSegment(vec2(-0.25, 0.45), vec2(-0.85,-0.2), uv));\n    d = min(d, distToSegment(vec2(0.05, 0.3), vec2(0.53, -0.17), uv));\n    d = min(d, distToSegment(vec2(-0.4, 0.6), vec2(-0.4, 0.3), uv));\n    d = min(d, distToArc(0.0, 180.0, 0.15, vec2(-0.25, 0.6), uv));\n    d = min(d, distToSegment(vec2(-0.1, 0.0), vec2(-0.1, 0.6), uv));\n    d = min(d, distToArc(135.0, 45.0, 0.2, vec2(0.6, -0.6), uv));\n    d = min(d, distToSegment(vec2(0.45, -0.45), vec2(0.6, -0.25), uv));\n    d = min(d, distToSegment(vec2(0.75, -0.45), vec2(0.6, -0.25), uv));\n    col.a = mix(1.0, 0.0, smoothstep(-pxunit/2.0, 0.0, d-pxunit/1.5));\n    return col;\n}\n\n//returns an icon of an eyedropper\nvec4 eyedropperIcon(vec2 uv, float pxunit){\n    vec4 col = vec4(0,0,0,0);\n    float d = distToSegment(vec2(0.75, 0.4), vec2(0.5, 0.15), uv);\n    d = min(d, distToSegment(vec2(0.4, 0.75), vec2(0.15, 0.5), uv));\n    d = min(d, distToArc(310.0, 135.0, 0.25, vec2(0.6, 0.6), uv));\n    d = min(d, distToSegment(vec2(0.0, 0.65), vec2(0.15, 0.5), uv));\n    d = min(d, distToSegment(vec2(0.65, 0.0), vec2(0.5, 0.15), uv));\n    d = min(d, distToSegment(vec2(0.65, 0.0), vec2(0.4, -0.2), uv));\n    d = min(d, distToSegment(vec2(0.0, 0.65), vec2(-0.2, 0.4), uv));\n    d = min(d, distToSegment(vec2(0.4, -0.2), vec2(-0.2, 0.4), uv));\n    d = min(d, distToArc(135.0, 200.0, 0.2, vec2(-0.55, -0.55), uv));\n    d = min(d, distToArc(250.0, 310.0, 0.2, vec2(-0.55, -0.55), uv));\n    d = min(d, distToArc(135.0, 310.0, 0.1, vec2(-0.7, -0.7), uv));\n    d = min(d, distToSegment(vec2(-0.7, -0.4), vec2(-0.1, 0.2), uv));\n    d = min(d, distToSegment(vec2(-0.4, -0.7), vec2(0.2, -0.1), uv));\n    col.a = mix(1.0, 0.0, smoothstep(-pxunit/2.0, 0.0, d-pxunit/1.5));\n    return col;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//main canvas \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //apply c on mousedown\n    float rescale = texelFetch( iChannel0, ivec2(3, 0),0 ).z;\n    vec4 col = texelFetch( iChannel1, ivec2(fragCoord*rescale),0 );\n    vec4 drawingCol = texelFetch( iChannel2, ivec2(fragCoord*rescale),0 );\n    bool mouseDown = sign(iMouse.w) == 1.0;\n    \n    if (mouseDown){\n        col = mixrgba(drawingCol, col);\n    }\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//pending strokes\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //clear on mousedown\n    float rescale = texelFetch( iChannel0, ivec2(3, 0),0 ).z;\n    vec4 col = texelFetch( iChannel1, ivec2(fragCoord*rescale),0 );\n    vec4 rgba = texelFetch(iChannel0, ivec2(6, 0),0);\n    float width = texelFetch(iChannel0, ivec2(7, 0),0).x;\n    \n    int tool = int(texelFetch( iChannel0, ivec2(1, 0),0 ).y);\n    \n    vec2 mousePos = texelFetch( iChannel0, ivec2(1, 0),0 ).zw;\n    vec4 m = vec4(iMouse.xy/iResolution.y, abs(iMouse.zw)/iResolution.y);\n    vec2 lastMousePos = texelFetch( iChannel0, ivec2(2, 0),0 ).xy;\n    bool lastWasClicked = texelFetch( iChannel0, ivec2(2, 0),0 ).w == 1.0;\n    bool mouseDown = sign(iMouse.w) == 1.0;\n    \n    float maxX = iResolution.x/iResolution.y;\n    vec4 drawingArea = vec4(0.65, 0.05, maxX - 0.05, 0.95);\n    \n    if (mouseDown) col = vec4(0);\n    \n    bool zdown = texelFetch( iChannel0, ivec2(8,0),0 ).x == 1.0;\n    \n    vec2 uv = fragCoord/iResolution.y;\n    float d = lastWasClicked ? distToSegment(lastMousePos, mousePos, uv) : distance(mousePos, uv);\n    if (tool == 0){ //brush\n        if (d < width && lastWasClicked){\n            col = rgba;\n        }\n    } else if (tool == 1){ //eraser\n        if (d < width && lastWasClicked){\n            col = vec4(0, 0, 0, -rgba.a);\n        }\n    } else if (tool == 2){ //fill\n        if (inArea(drawingArea,m.xy)){\n            col = abs(texelFetch( iChannel2, ivec2(fragCoord),0));\n        }\n    }\n    \n    if (zdown) col = vec4(0);\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//fills\n\nbool sampleBuffer(ivec2 uv, vec4 rgba){\n    return mixrgba(texelFetch(iChannel3, uv, 0), texelFetch(iChannel1, uv, 0)) == rgba;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    bool isfill = texelFetch( iChannel0, ivec2(1, 0),0 ).y == 2.0;\n    bool mousedown = texelFetch( iChannel0, ivec2(4, 0),0 ).x == 1.0;\n    bool zdown = texelFetch( iChannel0, ivec2(8,0),0 ).x == 1.0;\n    bool lastWasClicked = texelFetch( iChannel0, ivec2(2, 0),0 ).w == 1.0;\n    \n    ivec2 o = ivec2(1,0);\n    ivec2 c = ivec2(fragCoord);\n    ivec2 m = ivec2(iMouse.xy);\n    \n    vec4 mouse = vec4(iMouse.xy/iResolution.y, abs(iMouse.zw)/iResolution.y);\n    float maxX = iResolution.x/iResolution.y;\n    vec4 drawingArea = vec4(0.65, 0.05, maxX - 0.05, 0.95);\n   \n    vec4 col = texelFetch(iChannel2, c, 0);\n    \n    if (isfill && inArea(drawingArea,fragCoord/iResolution.y) && inArea(drawingArea,mouse.xy)){\n        if (!(mousedown || zdown)){ \n            vec4 rgba = texelFetch(iChannel0, ivec2(6, 0),0);\n            vec4 clickedColor = texelFetch(iChannel0, ivec2(5, 0),0);\n\n            bool cx = sampleBuffer(c + o.xy, rgba);\n            bool cy = sampleBuffer(c + o.yx, rgba);\n            bool cnx = sampleBuffer(c - o.xy, rgba);\n            bool cny = sampleBuffer(c - o.yx, rgba);\n\n            bool sx = sign(texelFetch(iChannel2, c + o.xy, 0).r) == -1.0;\n            bool sy = sign(texelFetch(iChannel2, c + o.yx, 0).r) == -1.0;\n            bool snx = sign(texelFetch(iChannel2, c - o.xy, 0).r) == -1.0;\n            bool sny = sign(texelFetch(iChannel2, c - o.yx, 0).r) == -1.0;\n\n            if (c == m && lastWasClicked){\n                col = rgba;\n                col.r = -abs(col.r);\n            } else if (sampleBuffer(c,clickedColor)){ \n                if (sx && cx){\n                    col = rgba;\n                } else if (sy && cy){\n                    col = rgba;\n                } else if (snx && cnx){\n                    col = rgba;\n                } else if (sny && cny){\n                    col = rgba;\n                }\n                col.r = -abs(col.r);\n            }\n        }\n    }\n    \n    if (mousedown || zdown || !isfill) col = vec4(0);\n            \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}