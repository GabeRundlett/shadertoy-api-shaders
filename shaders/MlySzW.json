{
    "Shader": {
        "info": {
            "date": "1483253692",
            "description": "A totally innocent Snapchat message.",
            "flags": 32,
            "hasliked": 0,
            "id": "MlySzW",
            "likes": 32,
            "name": "An innocent message",
            "published": 3,
            "tags": [
                "raymarcher",
                "message",
                "snapchat"
            ],
            "usePreview": 0,
            "username": "jackdavenport",
            "viewed": 5632
        },
        "renderpass": [
            {
                "code": "// An innocent message - by Jack Davenport\n// All credit is written above the relevant code.\n// You can use any of this code as long as you do the same.\n// Enjoy the shader! :)\n\n// Main Image: UI\n\n// Thnx FabriceNeyret2!\n// Source: https://www.shadertoy.com/view/ltcXzs\nvec4 char(vec2 p, float c) {\n    if (p.x<0.|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn texture( iChannel1, p/16. + fract( floor(vec2(c, 15.999-c/16.)) / 16. ) );\n}\n\n#define T mod(iTime, 10.)\n#define PI 3.14159265359\n#define chr(c) ch = char(uv, c); fragColor.xyz = mix(fragColor.xyz, tint, ch.x); uv.x -= .5;\n\nvec2 rot2D(vec2 p, float angle) {\n    angle = radians(angle);\n    float s = sin(angle), c = cos(angle);\n    return mat2(c,s,-s,c)*p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n    \n    uv = fragCoord/iResolution.y;\n    uv *= 14.;\n    uv.x -= 5.;\n    uv.y -= 2.;\n    \n    float aspect = iResolution.x/iResolution.y;\n    vec2 dir = iResolution.xy-vec2(15.,15.)-fragCoord;\n    float dst = length(dir)-(aspect*7.); dir = normalize(dir);\n    if(dst <= 0.) {\n        fragColor.xyz *= .45;\n        dir = rot2D(dir, -90.);\n        float prog = clamp(1.-T/10.,0.,1.)*2.-1.;\n        if(atan(dir.y, dir.x) < PI*prog && dst > -5.) {\n            fragColor.xyz = vec3(1.);\n        }\n    }\n    \n    if(uv.y < 1.2 && uv.y > -.2) {\n        fragColor.xyz *= .45; // the famous snapchat black bar\n    }\n    \n    vec4 ch;\n    vec3 tint = vec3(1.);\n    chr(87.); // this is what us programmers call \"a sentence\"\n    chr(114.);\n    chr(111.);\n    chr(116.);\n    chr(101.);\n    chr(32.);\n    chr(109.);\n    chr(121.);\n    chr(32.);\n    chr(102.);\n    chr(105.);\n    chr(114.);\n    chr(115.);\n    chr(116.);\n    chr(32.);\n    chr(114.);\n    chr(97.);\n    chr(121.);\n    chr(109.);\n    chr(97.);\n    chr(114.);\n    chr(99.);\n    chr(104.);\n    chr(101.);\n    chr(114.);\n    chr(32.);\n    chr(29.);\n    chr(29.);\n    chr(29.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// An innocent message - by Jack Davenport\n// All credit is written above the relevant code.\n// You can use any of this code as long as you do the same.\n// Enjoy the shader! :)\n\n// Buffer A: Main raymarching\n\n#define T mod(iTime,10.)\n\n#define MAX_ITER 512\n#define MIN_DIST .001\n#define SHADOW_BIAS .01\n\n#define LIGHT_DIR vec3(0.639602, 0.426401, -0.639602)\n#define LIGHT_COL vec3(1.,.99,.8)\n\nvec2 rot2D(vec2 p, float angle);\n\nfloat dstSphere(vec3 p, vec3 pos, float r) {\n    return length(pos-p)-r;\n}\nfloat dstFloor(vec3 p, float y) {\n    return p.y-y;\n}\n\n// Distance functions by iq\n// Source: https://iquilezles.org/articles/distfunctions\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat dstScene(vec3 p) {\n    float dst = min(dstSphere(p, vec3(0.,0.,4.), 1.),\n               dstFloor(p, -1.));\n    vec3 q = p - vec3(6.,.4,0.); q.xz = rot2D(q.xz, -20.+45.*T); q.xy = rot2D(q.xy, 45.);\n    dst = min(dst, udBox(q,vec3(1.)));\n    q = p - vec3(0.,0.,-6.); q.xz = rot2D(q.xz, 75.*T); q.x += sin(q.y*5.);\n    dst = min(dst, sdHexPrism(q,vec2(1.,.4)));\n    dst = min(dst, udBox(p-vec3(-6.,1.,0.),vec3(.5,2.,2.)));\n    return dst;\n}\n\nvec2 raymarch(vec3 ro, vec3 rd) {\n    float t  = 0.;\n    float id = -1.;\n    for(int i = 0; i < MAX_ITER; i++) {\n        float scn = dstScene(ro+rd*t);\n        if(scn < MIN_DIST) {\n            id = 0.;\n            break;\n        }\n        t += scn * .75;\n    }\n    return vec2(t,id);\n}\n\nvec3 calcNormal(vec3 p, float t) {\n    vec2 e = vec2(.001,0.);\n    vec3 n = vec3(dstScene(p+e.xyy)-dstScene(p-e.xyy),\n                  dstScene(p+e.yxy)-dstScene(p-e.yxy),\n                  dstScene(p+e.yyx)-dstScene(p-e.yyx));\n    return normalize(n);\n}\n\n// Soft shadows by iq\n// Source: https://www.shadertoy.com/view/Xds3zN\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<48; i++ )\n    {\n\t\tfloat h = dstScene( ro + rd*t );\n        res = min( res, 32.0*h/t );\n        t += clamp( h, 0.02, 0.40 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcLighting(vec3 col, vec3 p, vec3 n, vec3 r, float shine) {\n    float d = max(dot(LIGHT_DIR,n),0.);\n    float s = pow(max(dot(LIGHT_DIR,r),0.),shine);\n    float a = softshadow(p, LIGHT_DIR, SHADOW_BIAS, 1000.);\n    d *= a; s *= a;\n    \n    return (col*LIGHT_COL*d)+(LIGHT_COL*s);\n}\n\nvec3 shade(vec3 ro, vec3 rd) {\n    vec3 col = vec3(.4,.6,.9);\n    vec2 scn = raymarch(ro, rd);\n    if(scn.y == 0.) {\n        vec3 p = ro+rd*scn.x;\n        vec3 n = calcNormal(p,scn.x);\n        vec3 r = normalize(reflect(rd, n));\n        \n        col = vec3(1.,0.,0.);\n        float shine = 30.;\n        if(p.y < -.99) {\n            vec3 tex = (1.-texture(iChannel0,p.xz).xyz);\n            col = tex*vec3(1.);\n            shine = mix(5.,60.,tex.x);\n        } else if(p.x < -5.) {\n            col = texture(iChannel1, (p.zy+vec2(1.7,.9))*.3).xyz;\n        }\n        col = calcLighting(col, p, n, r, shine);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    vec3 ro = vec3(0.,0.,0.);\n    vec3 rd = vec3(uv,1.);\n    \n    float camRot = (smoothstep(1.,3.,T)*90.)+(smoothstep(4.5,6.,T)*90.)+(smoothstep(8.25,9.,T)*90.);\n    camRot += sin(T*5.)*3.;\n    rd.xz = rot2D(rd.xz, -camRot);\n    rd.yz = rot2D(rd.yz, 2.*cos(T*15.));\n    \n    fragColor.xyz = shade(ro, normalize(rd));\n    fragColor.w   = 1.;\n}\n\nvec2 rot2D(vec2 p, float angle) {\n    angle = radians(angle);\n    float s = sin(angle), c = cos(angle);\n    return mat2(c,s,-s,c)*p;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// An innocent message - by Jack Davenport\n// All credit is written above the relevant code.\n// You can use any of this code as long as you do the same.\n// Enjoy the shader! :)\n\n// Buffer B: 'Send Nudes' texture\n// Could've done this by raymarching the font texture, but decided to cheat instead :P\n\n// Thnx FabriceNeyret2!\n// Source: https://www.shadertoy.com/view/ltcXzs\nvec4 char(vec2 p, float c) {\n    if (p.x<0.|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn texture( iChannel0, p/16. + fract( floor(vec2(c, 15.999-c/16.)) / 16. ) );\n}\n\n#define chr(c) ch = char(uv, c); fragColor.xyz = mix(fragColor.xyz, tint, ch.x); uv.x -= .5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.y;\n    uv *= 1.6;\n    uv.x += .05;\n    uv.y -= .65;\n    \n    vec4 ch;\n    vec3 tint = vec3(1.,.25,.5);\n    fragColor = vec4(1.,1.,1.,1.);\n    \n    uv.x -= .25;\n    chr(83.);\n    chr(69.);\n    chr(78.);\n    chr(68.);\n    uv.x += 2.25; uv.y += .7;\n    chr(78.);\n    chr(85.);\n    chr(68.);\n    chr(69.);\n    chr(83.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}