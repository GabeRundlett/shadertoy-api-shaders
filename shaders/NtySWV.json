{
    "Shader": {
        "info": {
            "date": "1641329589",
            "description": "another 2d drawing",
            "flags": 0,
            "hasliked": 0,
            "id": "NtySWV",
            "likes": 3,
            "name": "another 2d drawing",
            "published": 3,
            "tags": [
                "another2ddrawing"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBordeR(vec3 pColObj, vec3 colOut, float distObj, float r )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-r,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0)); return colOut;}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\nvec3 DrawFigRB(vec3 pColObj, vec3 colOut, float distObj, float r )\n{  colOut = mix(colOut,pColObj ,S2( distObj-r,0.0)); return colOut; }\n\nvec3 DrawFigDelgado(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj-0.001,0.0)); return colOut; }\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\n\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n//float dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nvec3 FiguraUno(vec2 p, vec3 col)\n{   vec2 p0=p;\n    float d0= sdCircle( p-vec2(0.0,1.3), 1.0 )    ;\n    float d1=sdBox(p-vec2(0.0,0.0), vec2(1.0,1.5) );\n    \n    //ojo \n    float d2a= sdCircle( p-vec2(0.0,0.9), 0.8 );\n    float d2b= sdCircle( p-vec2(0.0,0.9), 0.75 );\n    float d2c= sdCircle( p-vec2(0.0,0.9), 0.4 );\n    float d2d= sdBox(p-vec2(0.0,0.3), vec2(1.0,0.5) );\n    d2a=differenceSDF(d2a,d2d);\n    d2b=differenceSDF(d2b,d2d);\n    d2c=differenceSDF(d2c,d2d);\n    \n    vec2 p3=Rotate(p-vec2(1.,0.0), vec2(-1.0,0.0), radians(45.0*sin(iTime)) );\n    float d3a=sdBox(p3-vec2(0.5,0.0), vec2(2.0,0.5) );\n    float d3b= sdTriangleIsosceles(p3-vec2(-1.0,-1.0), vec2(0.5,0.7) );\n    float d3c= sdTriangleIsosceles(p3-vec2(-0.2,-1.3), vec2(0.45,1.0) );\n    float d3d= sdTriangleIsosceles(p3-vec2(0.5,-0.8), vec2(0.45,0.5) );\n    float d3e= sdTriangleIsosceles(p3-vec2(1.3,-1.5), vec2(0.45,1.2) );\n    float d3f= sdTriangleIsosceles(p3-vec2(2.0,-1.8), vec2(0.25,1.5) );\n    \n    float d3g= sdCircle( p3-vec2(-0.3,0.1), 0.25 );\n    float d3h= sdCircle( p3-vec2(-1.0,0.1), 0.15 );\n    \n    d0= unionSDF(d0, d1);\n    \n    float d4a=sdBox(p-vec2(0.0,-2.5), vec2(0.5,1.0) );\n    col= DrawFigBorde(vec3(1.0,0.5,0.8), col,d4a );\n    col= DrawFigBorde(vec3(1.0,0.5,0.3), col,d0 );\n    \n    //ojo\n    col= DrawFigBorde(vec3(0.0), col,d2a );\n    col= DrawFigBorde(vec3(1.0), col,d2b );\n    col= DrawFigBorde(vec3(0.0), col,d2c );\n    col= DrawFigBorde(vec3(0.5,0.5,0.3), col,d3a);\n    col= DrawFigBorde(vec3(1.0), col,d3b);\n    col= DrawFigBorde(vec3(1.0), col,d3c);\n    col= DrawFigBorde(vec3(1.0), col,d3d);\n    col= DrawFigBorde(vec3(1.0), col,d3e);\n    col= DrawFigBorde(vec3(1.0), col,d3f);\n    col= DrawFigBorde(vec3(0.5,0.6,0.4), col,d3g);\n    col= DrawFigBorde(vec3(0.8,0.6,0.4), col,d3h);    \n    return col;\n}\n\nvec3 HacerPuerta(vec2 p, vec3 col)\n{   vec2 p0=p;\n    p.y-=1.5;\n    float d0= sdCircle(p-vec2(0.0,1.3), 1.0 )    ;\n    float d1=sdBox(p-vec2(0.0,0.5), vec2(1.0,1.0) );\n    float d1a=sdBox(p-vec2(0.0,0.5), vec2(0.05,1.0) );\n    p=p0;\n    float r1, r2,he ;\n    r1=3.5;\n    r2=1.0;\n    he=1.5;\n    float d2= sdTrapezoid( p,r1,r2,he);\n    col= DrawFigBorde(vec3(0.5), col,d0);\n    col= DrawFigBorde(vec3(0.5), col,d1);\n    col= DrawFigBorde(vec3(0.0), col,d1a);\n    col= DrawFigBorde(vec3(0.3,0.3,0.3), col,d2);\n    return col;\n}\n    \n    \nvec3 HacerChico(vec2 p, vec3 col)\n{   vec2 p0=p;    \n    //cabeza\n    float d1a= sdCircle( p-vec2(0.0,0.9), 0.5 );\n    //ojo\n    p.x=abs(p.x)-0.2;\n    float d1b= sdCircle( p-vec2(0.0,0.9), 0.1 );\n    //boca\n    p=p0;\n    float d2a= sdCircle( p-vec2(0.0,0.7), 0.2 );\n    float d2b=sdBox(p-vec2(0.0,0.9), vec2(0.27,0.2) );\n    d2a=differenceSDF(d2a,d2b);\n    \n    //sombrero\n    float d3a= sdTriangleIsosceles(vec2(p.x, -p.y)-vec2(0.0,-2.0), vec2(0.7,0.8) );\n    //pansa\n    float d4a=sdBox(p-vec2(0.0,-0.3), vec2(0.5,0.7) );\n    \n    \n    p.y+=0.8;\n    p.x-=0.2;\n    //brazo izq\n    vec2 v0A = vec2(-0.8,0.9);\n    vec2 v1A = vec2(-1.3,0.9);\n    vec2 v2A = vec2(-0.5,-0.3);\n    float b1 =abs( sdBezier( p, v0A,v1A,v2A ))-0.08; \n    \n    p.x=p0.x+0.25;\n    //brazo der\n    vec2 v0B = vec2(0.5,0.9);\n    vec2 v1B = vec2(1.3,0.5);\n    vec2 v2B = vec2(1.4,1.8);\n    float b2 =abs( sdBezier( p-vec2(0.3,0.2), v0B,v1B,v2B ))-0.08; \n    \n    //pierna\n    p.y+=0.8;\n    p.x-=0.8;\n    vec2 v0C = vec2(-0.8,0.9);\n    vec2 v1C = vec2(0.0,0.9);\n    vec2 v2C = vec2(-0.5,-0.3);\n    float b3 =abs( sdBezier( p, v0C,v1C,v2C ))-0.08; \n    \n    //pierna\n    p=p0;\n    p.y+=1.7;\n    p.x-=1.2;\n    vec2 v0D = vec2(-0.8,0.9);\n    vec2 v1D = vec2(0.0,0.9);\n    vec2 v2D = vec2(-0.5,-0.3);\n    float b4 =abs( sdBezier( p, v0D,v1D,v2D ))-0.08; \n    \n    col= DrawFigBorde(vec3(0.5), col,abs(d1a));\n    col= DrawFigBorde(vec3(0.0), col,d1b);\n    col= DrawFigBorde(vec3(0.0), col,d2a);\n    col= DrawFigBorde(vec3(0.0), col,abs(d3a)-0.03);\n    col= DrawFigBorde(vec3(0.0), col,abs(d4a)-0.01);\n    col= DrawFigBorde(vec3(0.0), col, b1+0.05 );\n    col= DrawFigBorde(vec3(0.0), col, b2+0.05 );\n    col= DrawFigBorde(vec3(0.0), col, b3+0.05 );\n    col= DrawFigBorde(vec3(0.0), col, b4+0.05 );\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=3.0;\n    uv*=esc;\n    vec2 uv0=uv;\n    vec3 col=vec3(0.0,0.1,0.8);\n    \n    col=pow(col,  vec3(0.554545));\n    col= HacerPuerta(uv-vec2(0.0,0.7),col);\n    col= HacerChico(uv-vec2(-1.0,0.2),col);\n    uv.y-=2.0;\n    col= FiguraUno(uv-vec2(-4.0,0.0), col);\n    col= FiguraUno(vec2(-uv.x,uv.y)-vec2(-4.0,0.0), col);\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//https://www.shadertoy.com/view/MlKcDD\n//referencia Iq\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n\n// signed distance to a quadratic bezier\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n    float sgn = 0.0;\n\n    float p  = ky - kx*kx;\n    float q  = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float p3 = p*p*p;\n    float q2 = q*q;\n    float h  = q2 + 4.0*p3;\n\n    if( h>=0.0 ) \n    {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n\n        #if 0\n        // When p≈0 and p<0, h-q has catastrophic cancelation. So, we do\n        // h=√(q²+4p³)=q·√(1+4p³/q²)=q·√(1+w) instead. Now we approximate\n        // √ by a linear Taylor expansion into h≈q(1+½w) so that the q's\n        // cancel each other in h-q. Expanding and simplifying further we\n        // get x=vec2(p³/q,-p³/q-q). And using a second degree Taylor\n        // expansion instead: x=vec2(k,-k-q) with k=(1-p³/q²)·p³/q\n        if( abs(p)<0.001 )\n        {\n            float k = p3/q;              // linear approx\n          //float k = (1.0-p3/q2)*p3/q;  // quadratic approx \n            x = vec2(k,-k-q);  \n        }\n        #endif\n\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        vec2  q = d+(c+b*t)*t;\n        res = dot2(q);\n    \tsgn = cross2(c+2.0*b*t,q);\n    }\n    else \n    {   // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q/(p*z*2.0))/3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0 );\n        vec2  qx=d+(c+b*t.x)*t.x; float dx=dot2(qx), sx = cross2(c+2.0*b*t.x,qx);\n        vec2  qy=d+(c+b*t.y)*t.y; float dy=dot2(qy), sy = cross2(c+2.0*b*t.y,qy);\n        if( dx<dy ) { res=dx; sgn=sx; } else {res=dy; sgn=sy; }\n    }\n    \n    return sqrt( res )*sign(sgn);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}