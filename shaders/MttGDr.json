{
    "Shader": {
        "info": {
            "date": "1468874311",
            "description": "4 worlds. At new game, 3 seconds to go play fullscreen if you wish (so different !).\nReach exit, avoid red trap.\nClick bottom icons then lemmings to make walkers, diggers, boxers, stair-makers, bombers, stoppers,.\nIf world0 too hard, change bufA:20 O.z",
            "flags": 96,
            "hasliked": 0,
            "id": "MttGDr",
            "likes": 51,
            "name": "[SH16C] Lemmingsoid",
            "published": 3,
            "tags": [
                "game",
                "lemmings"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 7576
        },
        "renderpass": [
            {
                "code": "// === display\n\n// music from http://downloads.khinsider.com/game-soundtracks/album/lemmings-oh-no-more-lemmings-original-game-rip\n\n#define N 10.                                       // nb lemmings\n#define B 6.                                        // nb buttons\n#define S 2.                                        // lemmings size factor\nfloat DIG=1., BOX=2., STAIRS=3., BOMB=4., STOP=5., FALL=-1.;  // functions\n\n#define T(dx,dy) texture(iChannel1, (vec2(dx,dy)+.5)/R) // read object data\n\nvec4 icon(float i, vec2 V) {                        // --- draw function's icon\n    float d0 =  V.y-V.x, d1 = V.y+V.x;              // diagonals of quadrants\n    return vec4(  i==DIG    ? d0>0. && d1>0.\n                : i==BOX    ? d0>0. && d1<0. \n                : i==STAIRS ? abs(d0)<3.\n                : i==BOMB   ? length(V)<5.\n                : i==STOP   ? abs(V.x)<2.\n                : false ) ;\n}\n\n// ( note that sprites+digits = 37% of total shader length (all buffers) ! )\nvec4 lem(float m, vec2 p /*, float s*/) {             // animated lemming sprite\n    p = floor(p+vec2(4,5)); //if (s<0.) p.x = 6.-p.x; // from https://www.shadertoy.com/view/XldGW8\n    int i=int(p.y), b=int(exp2(2.*p.x)), t = int(mod(8.*iTime,8.)), tt=t-t/4*4;\n    i = ( p.x<-1.||p.x>9.? 0:   // 0 7 for walker\n      m==STOP ?                                       // stopper\n            i==9? 0x02A00: i==8? 0x0AA80: i==7? 0x0AFC0: i==6? 0xC0F03: i==5? 0xFF5FF: i==4? 0x00500: i==3? 0x00500: i==2? 0x01540: i==1? 0x01040: i==0? 0x0F0F0: 0\n    : m==FALL ?                                       // fall\n      tt==0? i==9? 0x0050: i==8? 0x00D4: i==7? 0x03F4: i==6? 0x0CA3: i==5? 0x03AC: i==4? 0x00A0: i==3? 0x00A0: i==2? 0x03A3: i==1? 0x0C2C: i==0? 0x0000: 0\n    : tt==1? i==9? 0x0044: i==8? 0x00D4: i==7? 0x03F0: i==6? 0x00A0: i==5? 0x0FAF: i==4? 0x00A0: i==3? 0x00A0: i==2? 0x0FA0: i==1? 0x002F: i==0? 0x0000: 0\n    : tt==2? i==9? 0x0050: i==8? 0x00D4: i==7? 0x03F4: i==6? 0x00A0: i==5? 0x03AC: i==4? 0x0CA3: i==3? 0x0CA0: i==2? 0x03A0: i==1? 0x002C: i==0? 0x0003: 0\n    :        i==9? 0x0044: i==8? 0x00D4: i==7? 0x03F4: i==6? 0x00A0: i==5? 0x0FAF: i==4? 0x00A0: i==3? 0x00A0: i==2? 0x0FAF: i==1? 0x0020: i==0? 0x0000: 0\n    :                                                 // walker sprite by default\n      t==0?\ti==9? 0x0000: i==8? 0x0194: i==7? 0x00D4: i==6? 0x03F0: i==5? 0x00B0: i==4? 0x00B0: i==3? 0x00B0: i==2? 0x00A0: i==1? 0x00AC: i==0? 0x00F0: 0 \n\t: t==1?\ti==9? 0x0110: i==8? 0x0094: i==7? 0x00D4: i==6? 0x03F0: i==5? 0x00B0: i==4? 0x00AC: i==3? 0x0CAC: i==2? 0x0CA0: i==1? 0x0328: i==0? 0x003C: 0\n\t: t==2?\ti==9? 0x0000: i==8? 0x0044: i==7? 0x0094: i==6? 0x00D0: i==5? 0x03F0: i==4? 0x00BC: i==3? 0x00AC: i==2? 0x02AF: i==1? 0x02A8: i==0? 0x0F0F: 0\n\t: t==3?\ti==9? 0x0000: i==8? 0x0090: i==7? 0x01D4: i==6? 0x03F4: i==5? 0x00B0: i==4? 0x00B0: i==3? 0x00AC: i==2? 0x00A0: i==1? 0x02AB: i==0? 0x03C3: 0\n\t: t==4?\ti==9? 0x0000: i==8? 0x0194: i==7? 0x00D4: i==6? 0x03F4: i==5? 0x00B0: i==4? 0x00E0: i==3? 0x00B0: i==2? 0x00A0: i==1? 0x00AC: i==0? 0x00F0: 0\n\t: t==5?\ti==9? 0x0110: i==8? 0x0094: i==7? 0x00D4: i==6? 0x03F0: i==5? 0x00B0: i==4? 0x00E0: i==3? 0x0CE0: i==2? 0x0CA0: i==1? 0x0328: i==0? 0x003C: 0\n\t: t==6?\ti==9? 0x0000: i==8? 0x0044: i==7? 0x0094: i==6? 0x00D0: i==5? 0x03F0: i==4? 0x00E0: i==3? 0x00E0: i==2? 0x03A0: i==1? 0x02A8: i==0? 0x0F0F: 0\n\t:     \ti==9? 0x0000: i==8? 0x0090: i==7? 0x01D4: i==6? 0x03F4: i==5? 0x00B0: i==4? 0x00B0: i==3? 0x00E0: i==2? 0x00A0: i==1? 0x02AB: i==0? 0x03C3: 0\n         )/b;\n \ti = i-i/4*4;                                      // 2bits pixel = palette 0,1,2,3\n    return ( i==2? vec4(64,64,224,0): i==1? vec4(0,176,0,0): i==3? vec4(240,208,208,0) : vec4(0) )/255.;\n}\n\nfloat D(vec2 p, float n) { // from https://www.shadertoy.com/view/MlXXzH\n    p = floor(p);\n    int i=int(p.y), b=int(exp2(floor(30.-p.x-n*3.)));\n    i = ( p.x<1.||p.x>3.? 0:\n    i==5? 972980223: i==4? 690407533: i==3? 704642687: i==2? 696556137:i==1? 972881535: 0 )/b;\n \treturn float(i-i/2*2);\n}\n\nvoid mainImage( out vec4 O,  vec2 U )\n{    \n    vec2 R = iResolution.xy;\n    vec4 G = texture(iChannel0,.5/R);             // game state\n    O = texture(iChannel0,U/R);\n    if (O.a>=0.) O *= vec4(.1,1,.1,1);              // --- display background\n    else { float g = .8+.2*sin(3.*iDate.w);         // glow\n           if (O.a==-2.) O = vec4(g,0,0,0);         // trap\n           else          O = g*vec4(1,1.2,1.5,0);   // exit\n         }\n    \n    float dead=0., win=0., m;\n    for (float i=0.; i<N; i++) {                    // --- display lemmings\n        vec4 P = T(i,0);   \n        vec2 W = U-P.xy-vec2(0,5)*S, V=abs(W); W.x*=P.z;\n        float t = T(i,1).a, f = T(i,1).z;           // timer, fall flag\n        if (V.x<6.*S && V.y<5.*S) // 3 5\n          //O = vec4(P.a,t*.1,1.-P.a,0);\n          //O = vec4(0,t*.1,1,0) + icon(P.a,W);\n            O += lem(f==0.?P.a:-1., W/S)            // animated sprite\n              //+ icon(P.a,W)                       // +function icon     \n                + (t>0.&&t<60.? D(W*vec2(P.z,1)-vec2(P.z>0.?2:-6,4),floor(t/6.7)): 0.);// +timer\n        if (P.x==-100.) dead++;                     // get demography\n        if (P.x==-101.) win++;\n    }\n\n#define Spos 450.    \n\tif (abs(U.y-11.)<9. && mod(U.x-.5-Spos,8.)!=0.) // --- display score\n        if       (U.x > Spos && U.x < Spos+8.*win)  O=vec4(1,.4,.4,0);\n        else  if (U.x < Spos && U.x > Spos-8.*dead) O=vec4(.3);\n  //if (dead+win==N && U.y>20.)                     \n    if (G.a < 0.)                                   // all out: end\n        O += .4*(.5+.5*sin(3.*iDate.w)); \n        \n    for (float i=0.; i<B; i++) {                    // --- display buttons\n        vec4 P = T(i+1.,2);    \n        vec2 W = U-P.xy-vec2(0,10), V=abs(W);\n        if (V.x<10. && V.y<9.)\n            m = T(0,2).a,                           // current mode\n            O = vec4(m==i,0,m!=i,0) + icon(i,W);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 4210,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/fabricen/lemmings-1"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === map\n\n#define N 10.                                       // nb lemmings\n#define B 6.                                        // nb buttons\n#define S 2.                                        // lemmings size factor\nfloat DIG=1., BOX=2., STAIRS=3., BOMB=4., STOP=5.;  // functions\n\n#define T(i,j) texture(iChannel1,(vec2(i,j)+.5)/R) // read object data\n#define fillbox(rx,ry,v) {V=abs(U-P.xy-vec2(0,5)*S); if(V.x<rx*S && V.y<ry*S) O=vec4(v);}\n#define fillbox0(X,Y,v)  {V=abs(U-vec2(X,Y)*R+vec2(15,-15)); if(max(V.x,V.y)<15.) O=vec4(v);}\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2 R = iResolution.xy,V;\n    vec4 G = texture(iChannel0,.5/R);             // game state\n    O = texture(iChannel0,U/R);                   // prev background\n\n    if (U==vec2(.5)) {                              // game state\n        if (iFrame<10) \n            O = vec4(0,0, 0,iFrame);                // 0,0, world, clock\n        else {\n            O.a++;                                  // per-level iFrame\n            if (O.a > 0.) {\n                float alive=N;                      // get demography\n                for (float i=0.; i<N; i++) { \n                    vec4 P = T(i,0);   \n                    if (P.x==-100.||P.x==-101.) alive--;\n                   }\n                 if (alive==0.) { O.a = -250., O.z=mod(O.z+1.,4.); }  // next world (after pause)\n            }   }\n        return; \n    }\n    if (G.a >= 0. && G.a < 200.) {                      // --- create map\n        U -= vec2(0,20); R -= vec2(0,20);\n        if (G.z==0.) {\n            O.a = float(textureLod(iChannel2,U/R,4.).x > .5); // terrain mask\n            O = texture(iChannel2,U/R) * O.a; \n            fillbox0(.99,.3,  -1);                      // exit\n            fillbox0(.932,.3,  0);                      // (cleanup at its left)\n            fillbox0(.99,.005,-2);                      // trap\n        }\n        else  if (G.z==1.) {\n            O.a = float(textureLod(iChannel3,U/R,4.).x < .6); // terrain mask\n            O = texture(iChannel3,U/R) * O.a;\n            if (R.y-U.y<20.) O = vec4(0);               // cleanup top\n            fillbox0(.99,.3,  -1);                      // exit\n            fillbox0(.932,.3,  0);                      // (cleanup at its left)\n            fillbox0(.99,.005,-2);                      // trap\n        }\n        else  if (G.z==2.) {\n            O.a = float(textureLod(iChannel3,U/R,4.).x > .6); // terrain mask\n            O = texture(iChannel3,U/R) * O.a;\n            fillbox0(.99,.3,  -1);                      // exit\n            fillbox0(.932,.3,  0);                      // (cleanup at its left)\n            fillbox0(.5,.005, -2);                      // trap\n        }\n        else {\n            O = vec4(length(U/R-.5)>.4);                // sphere world\n            if (R.y-U.y<20.) O = vec4(0);               // cleanup top\n            fillbox0(.5,.5,  -1);                       // exit\n        }\n        U = 2.*U/R-1.;\n        if (max(abs(U.x),-U.y)>.99) O = vec4(1);        // frame borders\n        return;\n    }\n                                        \n    float t = mod(float(iFrame),4.);                // --- modif by lemmings\n    if (t>0.) return;                               // functions are slow\n    \n    for (float i=0.; i<N; i++) {                    // check each lemming\n        vec4 P = T(i,0);\n    \t\n        if      (P.a==DIG)                          // is miner \n            fillbox(4.,6.,0)                        //    dig\n        else if (P.a==BOX)                          // is boxer \n            fillbox(4.,5.,0)                        //    carve\n        else if (P.a==STOP)                         // is stopper \n            fillbox(2.,5.,.01)                      //    be wall\n        else if (P.a==STAIRS) {                     // is stairs maker \n            V = U-P.xy; V.x*= P.z;\n            if (V.x>0. && V.x<4.*S && V.y==1.) O = vec4(1); // put step\n        }\n        else if (P.a==BOMB && T(i,1).a==0.) {       // is bomber at end \n            float l = length(U-P.xy-vec2(0,5)*S);\n            if (l<25.) O = vec4(0);                 //    explode\n        }\n        \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// === lemmings and buttons\n\n#define N 10.                                      // nb lemmings\n#define B 6.                                       // nb buttons\n#define S 2.                                       // lemmings size factor\nfloat DIG=1., BOX=2., STAIRS=3., BOMB=4., STOP=5.; // functions\n\n#define M(dx,dy) texture(iChannel1, (O.xy+vec2(dx,dy))/R).a // read map\n#define T(U,dx,dy) texture(iChannel0, (U+vec2(dx,dy))/R)    // read object data\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2 R = iResolution.xy;\n    vec4 G = texture(iChannel1,.5/R);            // game state\n    \n    if (G.a==0.) {                                 // --- initializations\n        if (U.y == .5 && U.x < N+1.)                   // is lemming Id :\n            O = vec4(floor(R/2.)-80.+U.x*31., 1,0);    //    pos, dir, mode\n        else if (U.y == 1.5 && U.x < N+1.)             // continuing :\n            O = vec4(0);                               //    .a = counter\n        else if (U.y == 2.5 && U.x < B+2.)             // is button Id :\n            O = vec4(100.+U.x*30.,2.,U.x-1.5,U.x>1.?10:0); // pos, Id N \t\t   \n        return;                                        // #0.a = current mode \n    }\n    \n    O = T(U,0,0);                                 // current object (lemming/button)\n    vec2 M = iMouse.xy,V;\n    \n    if ( U == vec2(0,2)+.5 )\n        if (iMouse.z>0. && M.y<20.) {             // --- user choose a mode\n            float n = abs(M.x-100.)/30.-1.;\n            if (n>0. && n<B+1.) O.a = floor(n);\n        }\n            \n    if (U.y > 1.5 || U.x > N+.5) return;          // not a lemming Id\n\n    float t = mod(float(iFrame),4.),              // --- mouse & timers\n          m =  T(.5,0,2).a;                       // current mode\n\n    if (t==0.)\n      if (U.y ==1.5 )\n         { if (O.a>0.)  O.a--; }                  // tick down\n      else if (T(U,0,1).a==0.) {                  // time ended\n           if (O.a==BOMB) O = vec4(-100);         // if bomber, dead\n           O.a=0.;                                // back to walker\n       }\n    \n    V = abs(M - (U.y==.5 ? O :T(U,0,-1)).xy - vec2(0,5)*S);\n    if (iMouse.z>0. && V.x<3.*S && V.y<5.*S)      // click in object BBox\n      if (U.y==.5)                                // lemmings flags#1\n        O.a = m;                                  // user changes lemmings mode \n      else                                        // lemmings flags#2\n        O.a = m==0.||m==STOP ? 1e9 : 60.;         // set counter (stopper = endless)\n\n    if (U.y == 1.5) {\n         O.xy= T(U,0,-1).xy; O.z = M(0,-1)+M(0,-2)>0.?0.:1.; // fall flag\n         return;                                  // no more to do with flags#2  \n    }\n                                                  // --- motion\n    if ( M(0,-1)==0. ) {\n        O.y--;                                    // falling\n        if ( M(0,-1)==0.) {if(O.a!=BOMB) O.a=0.;} // true fall: reset to walker\n\t\telse if (O.a==DIG) O.x += O.z;            // Digger false fall\n    }\n    else { \n        if (O.a>0. && t>0.) return;               // functions are slow\n        float dy0=-3., dy1=1e9;                   // can we go forward ?\n        for (float y=-2.; y<10.*S; y++)           // floor slope\n            if (M(O.z, y)>0.) dy0=y;              // highest matter\n        for (float y=0.; y<10.*S; y++)            // corridor height\n            if (M(O.z, y+dy0+1.)>0.) { dy1=y+dy0+1.; break; }\n        if (O.a==STAIRS) dy1--;                   // stairs maker needs 1 more.\n        if (dy1-dy0>9. && dy0<3.)                 // corridor high enough to go & not too steppy\n            if (dy0>-3.)                    \n                  O.xy += vec2(O.z, dy0);         // go ( horiz, up, down )\n            else  O.xy += vec2(O.z, -1);          // fall              \n        else {\n            O.z = -O.z;                           // swap direction\n            if (O.a==STAIRS) O.a = 0.;            // if stair maker, back to walker\n        }\n       }\n   if      ( M(0,5.*S)==-1.) O = vec4(-101);      // found the exit: win\n   else if ( M(0,5.*S)==-2.) O = vec4(-100);      // found a trap: dead\n   else { \n           V=abs(O.xy*2./R-1.); \n           if (O.x>-100. && max(V.x,V.y)>1.5) O = vec4(-100);  // got out of frame: dead\n        }\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}