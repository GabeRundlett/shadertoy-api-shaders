{
    "Shader": {
        "info": {
            "date": "1695546718",
            "description": "Calculates the perceived luminance as described by this stackoverflow comment:\nhttps://stackoverflow.com/a/56678483\n\nThen blur the lightest values using a separated Gaussian Blur.\nLightness threshold adjustable in \"Buffer A\", blurAmount in \"Image\"\n",
            "flags": 32,
            "hasliked": 0,
            "id": "Dd3yDX",
            "likes": 1,
            "name": "Bloom (Gaussian Blur)",
            "published": 3,
            "tags": [
                "luminance",
                "gray",
                "grey"
            ],
            "usePreview": 0,
            "username": "Kampfhund",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord /iResolution.xy;\n    \n    //Adjust the amount of bloom here\n    float bloomAmount = 0.5;\n    \n    vec4 color = texture(iChannel0, uv) * bloomAmount + texture(iChannel1, uv);\n    \n    fragColor = color;\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sRGBtoLin(float colorChannel)\n{\n    //This converts a gamma encoded RGB to a linear value.\n    \n    if(colorChannel <= 0.04045)\n    {\n        return colorChannel / 12.92;\n    }\n    else\n    {\n        return pow(((colorChannel + 0.055) / 1.055), 2.4);\n    }\n}\n\nfloat lumToPerLight(float luminance)\n{\n    //This transforms the luminance value to the perceptual lightness as seen by humans\n    if(luminance <= 216.0/24389.0)\n    {\n        return luminance * (24389.0/27.0);\n    }\n    else\n    {\n        return pow(luminance, (1.0 / 3.0)) * 116.0 - 16.0;\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 color = texture(iChannel0, uv);\n    \n    //This calculates the luminance\n    float lum = (0.2126 * sRGBtoLin(color.r) + 0.7152 * sRGBtoLin(color.g) + 0.0722 * sRGBtoLin(color.b));\n    float perLight = lumToPerLight(lum) / 100.0;\n    \n    \n    //Adjust the lightness threshold here\n    if(perLight >= 0.85)\n    {\n    fragColor = vec4(perLight, perLight, perLight, 1.0);\n    }\n    else\n    {\n    fragColor = vec4(0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float kernelSize = 9.0;\n    //the -1.0 only if it's an odd number I think idk haven't tested\n    float halfKernelSize = (kernelSize-1.0) / 2.0;\n    \n    float[] gaussian = float[] (1.0, 8.0, 28.0, 56.0, 70.0, 56.0, 28.0, 8.0, 1.0);\n    //sum of all the values in the array\n    float sum = 256.0;\n    \n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0); \n    vec2 currentCoordinate = vec2(0.0, 0.0);\n    \n    for(float i = -halfKernelSize; i <= halfKernelSize; i++)\n    {\n        currentCoordinate = vec2(fragCoord.x + i, fragCoord.y);\n        color.r += texture(iChannel0, currentCoordinate / iResolution.xy).r * gaussian[int(i+halfKernelSize)];\n        color.g += texture(iChannel0, currentCoordinate / iResolution.xy).g * gaussian[int(i+halfKernelSize)];\n        color.b += texture(iChannel0, currentCoordinate / iResolution.xy).b * gaussian[int(i+halfKernelSize)];\n    }\n    \n    color = vec4(color.r / sum, color.g / sum, color.b / sum, 1.0);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float kernelSize = 9.0;\n    //the -1.0 only if it's an odd number I think idk haven't tested\n    float halfKernelSize = (kernelSize-1.0) / 2.0;\n    \n    float[] gaussian = float[] (1.0, 8.0, 28.0, 56.0, 70.0, 56.0, 28.0, 8.0, 1.0);\n    //sum of all the values in the array\n    float sum = 256.0;\n    \n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0); \n    vec2 currentCoordinate = vec2(0.0, 0.0);\n    \n    for(float i = -halfKernelSize; i <= halfKernelSize; i++)\n    {\n        currentCoordinate = vec2(fragCoord.x, fragCoord.y + i);\n        color.r += texture(iChannel0, currentCoordinate / iResolution.xy).r * gaussian[int(i+halfKernelSize)];\n        color.g += texture(iChannel0, currentCoordinate / iResolution.xy).g * gaussian[int(i+halfKernelSize)];\n        color.b += texture(iChannel0, currentCoordinate / iResolution.xy).b * gaussian[int(i+halfKernelSize)];\n    }\n    \n    color = vec4(color.r / sum, color.g / sum, color.b / sum, 1.0);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}