{
    "Shader": {
        "info": {
            "date": "1646325528",
            "description": "an orb",
            "flags": 0,
            "hasliked": 0,
            "id": "fdjBWD",
            "likes": 10,
            "name": "Glowing Orb",
            "published": 3,
            "tags": [
                "sphere",
                "volumes"
            ],
            "usePreview": 0,
            "username": "lwswl",
            "viewed": 622
        },
        "renderpass": [
            {
                "code": "float sphere(vec3 p, float r){\n    return length(p)-r;\n}\nfloat SDF(vec3 p){\n    float d=sphere(p,1.);\n    return d;\n}\n\n\nvec2 ray(vec3 o, vec3 d){\n    float depth = 0.001;\n    float density=0.;\n    float surface=-1.;\n    for (int i = 0; i < 256; i++) {\n        float t = SDF(o + depth * d);\n        if(t<-0.01){\n            depth-=t;\n            density-=t;\n        }\n        else{\n            depth+=t;\n            if(t<0.02){\n                surface=depth;\n                depth+=0.0201;\n            }\n        }\n        if(depth>30.)break;\n        \n    }\n    return vec2(density*0.4,surface);\n}\nvec3 normal(vec3 p){\n    float e=0.02;\n    return normalize(vec3(SDF(vec3(p.x+e,p.yz))-SDF(vec3(p.x-e,p.yz)),\n                SDF(vec3(p.x,p.y+e,p.z))-SDF(vec3(p.x,p.y-e,p.z)),\n                SDF(vec3(p.xy,p.z+e))-SDF(vec3(p.xy,p.z-e))));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy-0.5)*normalize(iResolution.xy);\n    vec3 col=vec3(0.9,0.8,uv.y*0.6+0.8);\n    vec3 o=vec3(15.*sin(iTime),0,15.*cos(iTime));\n    vec3 d=normalize(vec3(uv,3));\n    vec3 T=normalize(-o);\n    vec3 UP=vec3(0,1,0);\n    vec3 A=cross(T,UP);\n    \n    d*=mat3(A,UP,T);\n    \n    vec2 r=ray(o,d);\n    col-=vec3(r.x);\n    if(r.y>0.){\n        vec3 p=o+d*r.y;\n        vec3 N=normal(p);\n        col+=dot(N,vec3(0,0.5,0.2))*vec3(1,0,1)*(N*0.5+0.5);\n        col+=dot(N,vec3(0,-0.5,0))*vec3(0,0,1);\n        \n    }\n    fragColor.rgb=col;\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}