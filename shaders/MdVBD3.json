{
    "Shader": {
        "info": {
            "date": "1530872270",
            "description": "Colliding torii (automatic restart, mouseable)",
            "flags": 32,
            "hasliked": 0,
            "id": "MdVBD3",
            "likes": 13,
            "name": "Bouncing Rings",
            "published": 3,
            "tags": [
                "collision",
                "hexagon",
                "dynamics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 615
        },
        "renderpass": [
            {
                "code": "// \"Bouncing Rings\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrTorusDf (vec3 p, float ri, float rc);\nmat3 QtToRMat (vec4 q);\nfloat Fbm2 (vec2 p);\nvec4 Loadv4 (int idVar);\n\nvec3 qHit, ltDir;\nfloat dstFar, ringRad;\nint idObj;\nconst int nObj = 9;\nconst int nSphObj = 15;\nconst float pi = 3.14159, sqrt3 = 1.73205;\n\nfloat ObjDf (vec3 p)\n{\n  return PrTorusDf (p, 0.5, ringRad - 0.5);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  mat3 mRot;\n  vec3 rm, rdm, q;\n  float dHit, dMin, d, tol;\n  tol = 0.0005;\n  dMin = dstFar;\n  for (int n = 0; n < nObj; n ++) {\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    rm = (ro - Loadv4 (4 * n).xyz) * mRot;\n    rdm = rd * mRot;\n    dHit = 0.;\n    for (int j = 0; j < 120; j ++) {\n      q = rm + dHit * rdm;\n      d = ObjDf (rm + dHit * rdm);\n      dHit += d;\n      if (d < tol || dHit > dstFar) break;\n    }\n    if (d < tol && dHit < dMin) {\n      dMin = dHit;\n      qHit = q;\n      idObj = n;\n    }\n  }\n  return dMin;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  mat3 mRot;\n  vec4 v;\n  vec3 vn;\n  vec2 e = vec2 (0.0002, -0.0002);\n  mRot = QtToRMat (Loadv4 (4 * idObj + 2));\n  p = (p - Loadv4 (4 * idObj).xyz) * mRot;\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  vn = normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n  return mRot * vn;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  mat3 mRot;\n  vec3 rm, rdm;\n  float sh, d, h;\n  sh = 1.;\n  for (int n = 0; n < nObj; n ++) {\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    rm = (ro - Loadv4 (4 * n).xyz) * mRot;\n    rdm = rd * mRot;\n    d = 0.02;\n    for (int j = 0; j < 20; j ++) {\n      h = ObjDf (rm + d * rdm);\n      sh = min (sh, smoothstep (0., 0.05 * d, h));\n      d += clamp (3. * h, 0.1, 1.);\n      if (sh < 0.05) break;\n    }\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd, float sh)\n{\n  vec3 vn, col;\n  if (rd.y < 0.) {\n    ro -= (ro.y / rd.y) * rd;\n    col = mix (vec3 (0.3, 0.3, 0.4), vec3 (0.4, 0.5, 0.4), Fbm2 (8. * ro.xz));\n    vn = vec3 (0., 1., 0.);\n    col *= 0.3 + 0.7 * sh * max (dot (vn, ltDir), 0.);\n    col = mix (col, vec3 (0., 0., 0.3), min (0.003 * length (ro.xz), 1.));\n  } else col = vec3 (0., 0., 0.3);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  vec2 p, ip;\n  float dstFlr, dstObj, dEdge, c, spec, sh;\n  bool useBg;\n  ringRad = Loadv4 (4 * nObj).z;\n  dstFlr = (rd.y < 0.) ? - (ro.y - 0.5) / rd.y : dstFar;\n  dstObj = ObjRay (ro, rd);\n  useBg = false;\n  if (min (dstObj, dstFlr) < dstFar) {\n    if (dstFlr < dstObj) {\n      ro += rd * dstFlr;\n      vn = vec3 (0., 1., 0.);\n      useBg = true;\n    } else {\n      ro += rd * dstObj;\n      vn = ObjNf (ro);\n      p = vec2 (atan (qHit.z, ringRad - 0.5 - length (qHit.xy)),\n         atan (qHit.y, - qHit.x)) / pi + 1.;\n      p *= 6. * vec2 (sqrt3/2., (ringRad - 0.5) / 0.5);\n      ip = PixToHex (p);\n      dEdge = HexEdgeDist (p - HexToPix (ip));\n      c = mod (dot (mod (2. * ip + ip.yx, 3.), vec2 (1., 2.)), 3.);\n      col = vec3 (1., 1., 0.);\n      if (c == 1.) col = col.xzz;\n      else if (c == 2.) col = col.zxz;\n      col = mix (vec3 (0., 0., 1.), col, smoothstep (0.05, 0.1, dEdge));\n      spec = 0.3;\n    }\n  } else useBg = true;\n  sh = (min (dstObj, dstFlr) < dstFar) ? ObjSShadow (ro, ltDir) : 1.;\n  if (! useBg) col = col * (0.2 +  0.1 * max (dot (normalize (- ltDir.xz), vn.xz), 0.) +\n     0.8 * sh * max (dot (vn, ltDir), 0.)) +\n     spec * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  else col = BgCol (ro, rd, sh);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 col, rd, ro;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 100.;\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    el += 2. * mPtr.y;\n    az += pi * mPtr.x;\n  }\n  el = clamp (el, -0.45 * pi, -0.05 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 3.));\n  ro = vec3 (0., 0., -40.);\n  ro = vuMat * ro;\n  ltDir = normalize (vec3 (1., 2., -1.));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Bouncing Rings\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nfloat todCur, nStep, ringRad;\nconst int nObj = 9;\nconst int nSphObj = 15;\nconst float txRow = 128.;\nconst float pi = 3.14159;\n\nvec3 RSph (float s)\n{\n  vec3 r;\n  float a;\n  a = 2. * pi * s / 15.;\n  r = vec3 ((ringRad - 0.5) * cos (a), (ringRad - 0.5) * sin (a), 0.);\n  return r;\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 1., fricT = 2., fricS = 10.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, rMom;\n  float farSep, rSep, grav, dt;\n  grav = 10.;\n  dt = 0.01;\n  rm = Loadv4 (4 * mId).xyz;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = 2. * ringRad + 2.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nObj; n ++) {\n    rmN = Loadv4 (4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 * n + 2));\n      wmN = Loadv4 (4 * n + 3).xyz;\n      for (int j1 = 0; j1 < nSphObj; j1 ++) {\n        rts = mRot * RSph (float (j1));\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = 0; j2 < nSphObj; j2 ++) {\n          rtsN = mRotN * RSph (float (j2));\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  rMom = vec3 (0.);\n  for (int j = 0; j < nSphObj; j ++) {\n    rts = RSph (float (j));\n    rMom += dot (rts, rts) - rts * rts + 1./6.;\n    rts = mRot * rts;\n    dr = rm + rts;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rts));\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  rMom /= float (nSphObj);\n  wam = mRot * (wam * mRot / rMom);\n  am.y -=  grav;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  float b = 2. * Hashff (todCur + float (mId)) - 1.;\n  rm = vec3 (5. * (mod (float (mId), 3.) - 1.), 6., 5. * (floor (float (mId) / 3.) - 1.));\n  qm = EulToQt (vec3 (0.1 * b, 0., 0.));\n  vm = vec3 (- 3. * rm.xz / max (0.1, length (rm.xz)), 0.).xzy;\n  wm = vec3 (0.2, 0.2, 3.) * b;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float tCur, mxStep;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nObj + 1) discard;\n  tCur = iTime;\n  todCur = iDate.w;\n  mId = (pxId < 4 * nObj) ? mId = pxId / 4 : -1;\n  doInit = false;\n  mxStep = 1800.;\n  if (iFrame <= 5) {\n    doInit = true;\n    ringRad = 2.;\n  } else {\n    stDat = Loadv4 (4 * nObj);\n    nStep = stDat.x;\n    ringRad = stDat.z;\n    ++ nStep;\n    if (nStep > mxStep) doInit = true;\n  }\n  if (doInit) {\n    nStep = 0.;\n  }\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n    kp = 4 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = qm;\n    else if (pxId == kp + 3) stDat = vec4 (wm, 0.);\n  } else stDat = vec4 (nStep, mxStep, ringRad, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}