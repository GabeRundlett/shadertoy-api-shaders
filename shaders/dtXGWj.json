{
    "Shader": {
        "info": {
            "date": "1672396541",
            "description": "CC0: Trippy rectangles\nContinuation of last night trippy effects\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dtXGWj",
            "likes": 32,
            "name": "Trippy rectangles",
            "published": 3,
            "tags": [
                "2d",
                "trippy"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "// CC0: Trippy rectangles\n//  Continuation of last night trippy effects\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float ExpBy = log2(1.2);\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat forward(float n) {\n  return exp2(ExpBy*n);\n}\n\nfloat reverse(float n) {\n  return log2(n)/ExpBy;\n}\n\nvec2 cell(float n) {\n  float n2  = forward(n);\n  float pn2 = forward(n-1.0);\n  float m   = (n2+pn2)*0.5;\n  float w   = (n2-pn2)*0.5;\n  return vec2(m, w);\n}\n\nvec2 df(vec2 p, float aa) {\n  float tm = TIME;\n  float m = fract(tm);\n  float f = floor(tm);\n  float z = forward(m);\n  \n  vec2 p0 = p;\n  p0 /= z;\n  vec2 sp0 = sign(p0);\n  p0 = abs(p0);\n\n  float l0x = p0.x;\n  float n0x = ceil(reverse(l0x));\n  vec2 c0x  = cell(n0x); \n\n\n  float l0y = p0.y;\n  float n0y = ceil(reverse(l0y));\n  vec2 c0y  = cell(n0y); \n\n\n  vec2 p1 = vec2(p0.x, p0.y);\n  vec2 o1 = vec2(c0x.x, c0y.x);\n  vec2 c1 = vec2(c0x.y, c0y.y);\n  p1 -= o1;\n  \n  float r1 = 0.5*aa/z;\n\n  vec2 p2 = p1;\n  vec2 c2 = c1;\n  float n2 = 0.0; \n  \n  if (c1.x < c1.y) {\n    float f2 = floor(c1.y/c1.x);\n    c2 = vec2(c1.x, c1.y/f2);\n    if (fract(0.5*f2) < 0.5) {\n      p2.y -= -c2.y;\n    }\n    \n    n2 = mod1(p2.y, 2.0*c2.y);\n  } else if (c1.x > c1.y){\n    float f2 = floor(c1.x/c1.y);\n    c2 = vec2(c1.x/f2, c1.y);\n    if (fract(0.5*f2) < 0.5) {\n      p2.x -= -c2.x;\n    }\n\n    n2 = mod1(p2.x, 2.0*c2.x);\n  }\n  float h0 = hash(n2+vec2(n0x, n0y)-vec2(f)+vec2(sp0.x, sp0.y));\n  \n  float d2 = box(p2, c2-2.0*r1)-r1;\n  \n  float d = d2;\n  d *= z;\n\n  return vec2(d, h0);\n}\n\nvec4 effect(vec2 p, float hue) {\n  float aa = 2.0/RESOLUTION.y;\n  vec2 d2 = df(p, aa);\n\n  vec3 col = vec3(0.0);\n  vec3 bcol = hsv2rgb(vec3(fract(hue+0.3*d2.y), 0.85, 1.0));\n  return vec4(bcol, smoothstep(aa, -aa, d2.x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 ppp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float hue = -length(p)+0.1*TIME; \n\n  vec2 pp = p;\n  vec3 col = vec3(0.0);\n  vec4 col0 = effect(pp, hue);\n  col = mix(col, col0.xyz, col0.w);\n\n  col += hsv2rgb(vec3(hue, 0.66, 4.0))*mix(1.0, 0.0, tanh_approx(2.0*sqrt(length(p))));\n  col *= smoothstep(1.5, 0.5, length(ppp));\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}