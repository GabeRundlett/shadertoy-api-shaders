{
    "Shader": {
        "info": {
            "date": "1609135020",
            "description": "I was inspired by hyperbolic geometry and created a similar effect by repeating radial cells in exponential fashion.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtdcW4",
            "likes": 9,
            "name": "Hyperbolic  Rainbows",
            "published": 3,
            "tags": [
                "fractal",
                "radial",
                "pi",
                "polar",
                "cineshader",
                "hyperpolic"
            ],
            "usePreview": 0,
            "username": "nbardy",
            "viewed": 7662
        },
        "renderpass": [
            {
                "code": "// A simple way to create color variation in a cheap way (yes, trigonometrics ARE cheap\n// in the GPU, don't try to be smart and use a triangle wave instead).\n\n// See https://iquilezles.org/articles/palettes for more information\n\n// ****************\n// Helper functions\n// ****************\n\n// pallette \nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n#define HASHSCALE1 443.8975\n\n// random functions lib\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat lerp(float a, float b, float t)\n{\n\treturn a + t * (b - a);\n}\n\nfloat noise(float p)\n{\n\tfloat i = floor(p);\n    float f = fract(p);\n    \n    float t = f * f * (3.0 - 2.0 * f);\n    \n    return lerp(f * hash11(i), (f - 1.0) * hash11(i + 1.0), t);\n}\n\nfloat fbm(float x, float persistence, int octaves) \n{\n    float total = 0.0;\n    float maxValue = 0.0;\n    float amplitude = 1.0;\n    float frequency = 1.0;\n    \n    for(int i=0; i<16;++i)\n    {\n        total += noise(x * frequency) * amplitude;\n        maxValue += amplitude;\n        amplitude *= persistence;\n        frequency *= 2.0;\n    }\n    \n    return (total/maxValue);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float pi = 3.1415926;\n    float res = max(iResolution.x, iResolution.y);\n    \n    // Center and normalize our coordinate system    \n    vec2 uv = (fragCoord - .5*iResolution.xy) / res;\n    \n\n    float r = length(uv - vec2(0.0,0.0));\n    float theta = atan(uv.y, uv.x);\n    float thetanorm = (theta + pi)/(2.0*pi);\n\n    // Shift r domain for aesthetics\n    r = r + 0.1;\n    r *= 1.0;\n    float i = floor(r*r*370.0 + 0.02) + 1.0;\n    \n    float at = sin(iTime*0.007 + 0.4) * 0.2 + 1.2;\n    // Add distortion to rings  \n    float rt = at*173.0 + 500.0;\n    float tfbm = fbm(((theta+20.0) + 20.0), 0.54, 16)*2.0 + 0.8;\n    float rfbm = fbm(r +rt, 0.54, 16)*4.0 + 0.8;\n    //r *= clamp(tfbm,0.3,1.0);\n    //r *= clamp(rfbm,0.8,1.0);\n    r *= rfbm;\n    r *= tfbm;\n    \n    i = floor(r*r*r*370.0) ;\n    float i2 = pow(i,2.0) +1.0;\n    \n    float pct = fract(thetanorm*i2*2.0);\n    \n    // Flip \n    pct = abs(mod(i,2.) - pct);\n    \n    \n    \n    float row = floor(thetanorm*i2*2.0);    \n    float k = (row+1.0)*(i+1.0)/200.0;\n    // get random color for each cell\n    vec3 color1 = vec3(hash11(k+1.0),hash11(k+2.0),hash11(k+3.0));\n    vec3 color2 = vec3(hash11(k+5.0),hash11(k+6.0),hash11(k+7.0));\n    \n    float cfbm = fbm(i/4.0, 2.0, 2) + 0.5;;\n    float t = sin(iTime*5.0 + cfbm*99.0)*0.5 + 0.5;\n \n    vec3 color = mix(color1, color2, t);\n    \n   \n\n    \n    // Color option: Pallette blending\n    // Todo change color to be picked random for each tile \n    //vec3 c1 = pal( pct, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n    // vec3 c2 = pal( pct, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );  \n    // vec3 color = mix(c1,c2,t);\n    // vec3 color = vec3(pct); vec3 color = vec3(hash);\n    //vec3 color = \n    // Clip\n\n    // Output to screen\n    fragColor = vec4(color*pct,.0);\n\n\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}