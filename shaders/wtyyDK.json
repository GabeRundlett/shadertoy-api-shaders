{
    "Shader": {
        "info": {
            "date": "1611795231",
            "description": "Path Tracing a scene with Ray-Marching.",
            "flags": 32,
            "hasliked": 0,
            "id": "wtyyDK",
            "likes": 6,
            "name": "Ray-Marching: Path Tracing",
            "published": 3,
            "tags": [
                "raymarching",
                "raymarch",
                "raymarcher",
                "pathtrace",
                "pathtracing",
                "pathtracer",
                "path"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "// Common contains adjustable parameters and RNG functions\n// Buffer A contains the Path-Tracer\n// Buffer B contains an image export\n// This contains the output to the screen\n\n// Ray-Marching: Path Tracing by Zi7ar21 --- January 27th, 2020\n// Last Updated: January 27th, 2020 22:30 Mountain Time\n\n// If you didn't find this on ShaderToy there may be an updated version at:\n// https://www.shadertoy.com/view/wtyyDK\n// A messy experimental version can be found at:\n// https://www.shadertoy.com/view/tlVyWK\n\n// Michael0884 fixed this like a lot, check him out:\n// https://www.shadertoy.com/user/michael0884\n\n// Also check out LoicVDB:\n// https://www.shadertoy.com/user/loicvdb\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This contains adjustable parameters and RNG functions\n\n// Camera Settings\n#define camerafov 1.0\n#define camerapos vec3(0.0, 0.0, -2.0)\n\n// Adjustable Path-Tracing Settings\n#define maxbounces 128\n#define maxmarches 1024\n#define collisiondist 1e-4\n#define scenesize 8.0\n#define ditherradius 1.0\n\n// Adujustable Fractal Settings\n#define iterations 4\n#define power 8.0\n\n// PBR Theory (Albedo, Normal, Metallic, Roughness)\n// https://learnopengl.com/PBR/Theory\n\n// Material (Albedo, Roughness)\nvec4 materialproperties(int material){\n    if(material == 0){\n        return vec4(vec3(1.0, 1.0, 0.5), 0.25);\n    }\n    if(material == 1){\n        return vec4(vec3(0.5, 0.5, 1.0), 0.125);\n    }\n    return vec4(0.0);\n}\n\n// Constants (ShaderToy uses Single Precision which can represent Pi as 3.14159265 whilst Double Precision\n// can encode pi as 3.141592653589793, who knows maybe in the future ShaderToy will support Double so why not\n// include the 3589793)\n#define pi 3.141592653589793\n#define twopi pi*2.0\n\n// High-Quality Random Numbers from Michael0884, proper demo: https://www.shadertoy.com/view/wltcRS\nuint ns;\n#define INIT_RNG ns = 185730U*uint(iFrame)+uint(fragCoord.x + fragCoord.y*iResolution.x);\nvoid pcg(){\n    uint state = ns*747796405u+2891336453u;\n    uint word = ((state>>((state>>28u)+4u))^state)*277803737u;\n    ns = (word>>22u)^word;\n}\n\nfloat rand(){pcg(); return float(ns)/float(0xffffffffu);}\nvec2 rand2(){return vec2(rand(), rand());}\nvec3 rand3(){return vec3(rand(), rand(), rand());}\nvec4 rand4(){return vec4(rand(), rand(), rand(), rand());}\n\n// Nor3alized Random also from Michael0884: https://www.shadertoy.com/view/WttyWX\nvec2 nrand2(float sigma, vec2 mean){vec2 Z = rand2(); return mean+sigma*sqrt(-2.0*log(Z.x))*vec2(cos(twopi*Z.y),sin(twopi*Z.y));}\nvec3 nrand3(float sigma, vec3 mean){vec4 Z = rand4(); return mean+sigma*sqrt(-2.0*log(Z.xxy))*vec3(cos(twopi*Z.z), sin(twopi*Z.z), cos(twopi*Z.w));}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This contains the Path-Tracer\n\n// Simple Scene Distance Estimator\n/*float DE(vec3 pos){\n    float sphere = length(pos)-0.5;\n    float plane = pos.y+0.25;\n    return min(plane, sphere);\n}*/\n\n// Mandelbulb Distance Estimator\nfloat mandelbulb(vec3 pos){\n    pos = vec3(pos.x, pos.z, pos.y);\n\tvec3 z = pos;\n\tfloat dr = 1.0;\n\tfloat r = 0.0;\n\tfor (int i = 0; i < iterations; i++){\n\t\tr = length(z);\n\t\tif(r > 4.0){break;}\n\t\t// Convert to Polar Coordinates\n\t\tfloat theta = acos(z.z/r);\n\t\tfloat phi = atan(z.y,z.x);\n\t\tdr =  pow(r, power-1.0)*power*dr+1.0;\n\t\t// Scale and Rotate the Point\n\t\tfloat zr = pow(r, power);\n\t\ttheta = theta*power;\n\t\tphi = phi*power;\n\t\t// Convert Back to Cartesian Coordinates\n\t\tz = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n\t\tz+=pos;\n\t}\n\treturn 0.5*log(r)*r/dr;\n}\n\n// Infinite Plane Distance Estimator\nfloat plane(vec3 pos){\n    float plane = pos.y+0.5;\n    return plane;\n}\n\n// Nearest Distance Estimator\nfloat DE(vec3 pos){\n    float DE1 = mandelbulb(pos);\n    float DE2 = plane(pos);\n    return min(DE1, DE2);\n}\n\n// Tetrahedron Normal Function\n/*vec3 normal(vec3 pos){\n    float normprecision = collisiondist*0.1;\n    vec2 k = vec2(1.0, -1.0);\n    return normalize(k.xyy*DE(pos+k.xyy*normprecision)+\n                     k.yyx*DE(pos+k.yyx*normprecision)+\n                     k.yxy*DE(pos+k.yxy*normprecision)+\n                     k.xxx*DE(pos+k.xxx*normprecision));\n}*/\n\n// Forward and Central Differences Normal Function (Alternate Option, Slower)\nvec3 normal(vec3 pos){\n    const vec2 diff = vec2(collisiondist*0.1, 0.0);\n    return normalize(vec3(DE(pos+diff.xyy)-DE(pos-diff.xyy),\n                          DE(pos+diff.yxy)-DE(pos-diff.yxy),\n                          DE(pos+diff.yyx)-DE(pos-diff.yyx)));\n}\n\n// Path-Tracing\nvec3 raymarch(vec3 pathdir, vec3 pathorig){\n    vec3 pathpos = pathorig;\n    vec3 surfnormal;\n    float distest;\n    int bounces = 0;\n    vec3 closestpos = pathpos;\n    vec3 outCol = vec3(1.0);\n    for(int i = 0; i < maxmarches; i++){\n        // Check if the path is done\n        if(length(pathpos) > scenesize) {return outCol*texture(iChannel1, pathdir).rgb;}\n        if(bounces > maxbounces){break;}\n\n        // Find the distance to the scene\n        distest = DE(pathpos);\n\n        // Michael0884: Closest Non-Colliding Position\n        if(distest > collisiondist){closestpos = pathpos;}\n\n        // Bounce the Path if it hits something\n        if(distest < collisiondist){\n            int object = 0;\n            if(mandelbulb(pathpos) < plane(pathpos)){object = 0;}\n            else{object = 1;}\n            vec4 matprops = materialproperties(object);\n            outCol *= matprops.rgb;\n            surfnormal = normal(pathpos);\n            pathpos = closestpos;\n            pathdir = reflect(pathdir, normalize(nrand3(matprops.w, surfnormal)));\n            bounces++;\n        }\n\n        // Otherwise just keep going\n        else{pathpos += pathdir*distest;}  \n    }\n    return vec3(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Progressive Rendering\n    vec4 oldFragColor = vec4(0.0);\n    if(iFrame != 0){oldFragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);}\n    fragColor = oldFragColor;\n\n    // Initialize RNG\n    INIT_RNG;\n\n    // Screen UV Coordinates, centered on [0.0, 0.0] and extends to 1.0 x or y, so that it looks fine no matter the aspect ratio.\n    vec2 uv = 2.0*((fragCoord.xy+nrand2(ditherradius*0.5, vec2(0.0)))-0.5*iResolution.xy)/max(iResolution.x, iResolution.y);\n\n    // Rotation Matrix\n    mat3 rotmat = mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);\n\n    // Direction of the path\n    vec3 pathdir = normalize(camerafov*(uv.x*rotmat[0]+uv.y*rotmat[1])+rotmat[2]);\n\n    // Run the Path-Tracing\n    vec3 raymarched = raymarch(pathdir, camerapos);\n\n    fragColor += vec4(max(vec3(0.0), raymarched), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This contains an image export\n\n// Along the bottom at the right of this editor, there is a little image icon.\n// If you click it, ShaderToy will save a 32-Bit Floating Point OpenEXR Image.\n// A 32-Bit OpenEXR is much better for editing than saving an 8-BPC PNG Image.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec4 texel = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec3 color = (texel.a == 0.0 ? vec3(0.0) : texel.rgb/texel.a);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}