{
    "Shader": {
        "info": {
            "date": "1511133157",
            "description": "Triangles",
            "flags": 0,
            "hasliked": 0,
            "id": "XtXBzN",
            "likes": 23,
            "name": "Triangle Grid #",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "marian42",
            "viewed": 1504
        },
        "renderpass": [
            {
                "code": "const float pi = 3.14159265359;\nconst float triangleScale = 0.816497161855865; // ratio of edge length and height\nconst float period = 30.0;\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 getTriangleCoords(vec2 uv) {\n    uv.y /= triangleScale;\n    vec2 triangleCoords = floor(uv);\n    triangleCoords.x *= 2.0;\n    float mody = floor(mod(triangleCoords.y, 2.0));\n    vec2 local = vec2(fract(uv.x + mody * 0.5) - 0.5, fract(uv.y));\n    if (local.y > abs(local.x) * 2.0) {\n        triangleCoords.x += local.x < 0.0 ? 1.0 : -1.0;\n    }\n    if (local.x >= 0.0 && mody == 0.0) {\n        triangleCoords.x += 2.0;\n    }\n    return triangleCoords;\n}\n\nfloat getColor(vec2 uv) {\n    uv /= 40.0;\n    vec2 triangle = getTriangleCoords(uv);\n     \n    float angle = floor(6.0 * rand(triangle + 0.1)) / 3.0 * pi;\n    vec2 direction = vec2(sin(angle), cos(angle));\n    float projected = dot(direction, uv);    \n    float progress = fract(iTime / period + rand(triangle + 0.2) + projected * 0.8 / period);\n    \n    return progress > 0.5 ? rand(triangle) : rand(triangle + 0.3);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n\tconst float samples = 2.0;\n    float value = 0.0;\n    \n    for (float x = 0.0; x < 1.0; x += 1.0 / samples) {\n        for (float y = 0.0; y < 1.0; y += 1.0 / samples) {\n\t\t\tvalue += getColor(fragCoord + vec2(x, y));\n        }\n    }    \n    value /= pow(samples, 2.0);\n    \n    value *= 0.4;\n    \n\tfragColor = vec4(value);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}