{
    "Shader": {
        "info": {
            "date": "1576697130",
            "description": "lighting",
            "flags": 0,
            "hasliked": 0,
            "id": "3dVSz3",
            "likes": 0,
            "name": "Directional Spot Lighting",
            "published": 3,
            "tags": [
                "lighting"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "const float DirectPercentage = 1.0;\n\nconst float PI = 3.1415926535;\nconst vec3 BoxCenter = vec3(0.0,-0.75,0.0);\n\nfloat map(vec3 p)\n{   \n    float sdf=length(max(abs(p-BoxCenter)-vec3(1.0,0.1,1.0), 0.0));\n    sdf=min(sdf,length(p-vec3(0.0,-0.3,sin(iTime)*0.35))-0.1);\n    \n    return sdf;\n}\n\nvec3 brdf(vec3 v, vec3 ld, vec3 n)\n{\n    vec3 diffuseBRDF = vec3(1.0)/PI; // lambert\n    \n    return diffuseBRDF*max(dot(ld,n),0.0);\n}\n\nfloat directFalloff(vec3 sp, vec3 sd, vec3 p, float innerAngle, float outerAngle)\n{\n    float lf = 0.65;\n    \n    // Create a virtual spotlight at a constant distance from the point.\n    // This creates a cylinder for the spotlight but also allows us\n    // to keep the same light falloff. (If we used the distance to the project point, our falloff would be linear\n    // which would require us to match the falloff curve of the other spotlight paths)\n    vec3 pp=sp+sd*dot(p-sp,sd);\n\tvec3 vp=pp-sd*lf;\n    vec3 vp2p=normalize(p-vp);\n    \n    float cosOuter = cos(outerAngle);\n    float cosInner = cos(innerAngle);\n    float cylinder=1.0-(dot(sd,vp2p)-cosInner)/min(cosOuter-cosInner,-0.0001);\n    return max(cylinder,0.0);\n}\n\nfloat spotFalloff(vec3 sp, vec3 sd, vec3 p, float innerAngle, float outerAngle)\n{   \n    float cosOuter = cos(outerAngle);\n    float cosInner = cos(innerAngle);\n    \n    float nearClip=step(0.0,dot(p-sp,sd));\n    \n    float attenuation = 0.0;\n    if(DirectPercentage == 0.0)\n    {\n    \tvec3 sp2p=normalize(p-sp);\n    \n    \tfloat cone=1.0-(dot(sd,sp2p)-cosInner)/min(cosOuter-cosInner,-0.00000001);\n        attenuation=max(cone,0.0);\n    }\n    else if(DirectPercentage < 1.0)\n    {\n        float innerTanSqr = 1.0/(cosInner*cosInner)-1.0;\n    \tfloat outerTanSqr = 1.0/(cosOuter*cosOuter)-1.0;\n    \tfloat lf = 0.65;\n        \n  \n    \tfloat invPercentage=1.0/max(1.0-DirectPercentage,0.01);\n    \n    \tfloat dn = (lf*DirectPercentage)*invPercentage;\n    \tvec3 vp=sp-sd*dn;\n    \tvec3 vp2p=normalize(p-vp);\n    \n    \tcosOuter=inversesqrt(outerTanSqr+invPercentage*invPercentage)*invPercentage;\n    \tcosInner=inversesqrt(innerTanSqr+invPercentage*invPercentage)*invPercentage;\n    \tfloat cone=1.0-(dot(sd,vp2p)-cosInner)/min(cosOuter-cosInner,-0.00000001);\n        attenuation=max(cone,0.0);\n    }\n    else\n    {\n        attenuation=directFalloff(sp,sd,p,innerAngle,outerAngle);\n    }\n    \n    return min(attenuation*nearClip,1.0);\n}\n\nvec3 light(vec3 v, vec3 p, vec3 n)\n{\n    vec3 accum = vec3(0.0);\n    \n    // directional\n\tconst vec3 ld=normalize(vec3(0.5,1.0,-0.5));\n    const float sunLum=100.0;\n    accum += brdf(v,ld,n)*sunLum;\n    \n    // spot\n    const vec3 sd=vec3(0.0,-1.0,0.0);\n    const vec3 sp=vec3(0.0,0.0,0.0);\n    const float spotLum=2000.0;\n    \n    accum += brdf(v,-sd,n) * spotFalloff(sp,sd,p,0.0,PI/6.0)*spotLum;\n    \n    vec3 ambient = brdf(v,n,n)*pow(textureLod(iChannel0,n,6.0),vec4(2.2)).rgb*1000.0;\n    \n    // TODO: Do some better exposure remapping\n    const float maxLum = spotLum;\n    return (accum+ambient)/maxLum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    vec2 rot=iMouse.xy/iResolution.xy;\n    rot.x=2.0*PI*rot.x;\n    rot.y=PI/4.0*rot.y;\n    \n    vec3 o=vec3(cos(rot.x)*cos(rot.y),sin(rot.y),sin(rot.x)*cos(rot.y))*1.5f;\n    vec3 f=normalize(BoxCenter-o);\n    vec3 r=normalize(cross(vec3(0.0,1.0,0.0),f));\n    vec3 u=normalize(cross(f,r));\n    \n    float a=iResolution.y/iResolution.x;\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    vec3 dir=normalize(f+r*uv.x*a+u*uv.y);\n    \n    fragColor = texture(iChannel1,dir);\n    \n    float dist=0.0;\n    for(int i=0;i<32;i++)\n    {\n        vec3 p=o+dir*dist;\n       \tfloat sdf=map(p);\n        if(sdf<0.01)\n        {\n            vec2 off=vec2(0.001,0.0);\n            vec3 n=normalize(vec3(map(p+off.xyy)-sdf,map(p+off.yxy)-sdf,map(p+off.yyx)-sdf));\n\n            fragColor=pow(vec4(light(dir,p,n), 1.0), vec4(1.0/2.2)); // gamma correction\n            break;\n        }\n        dist+=sdf;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}