{
    "Shader": {
        "info": {
            "date": "1573026356",
            "description": "The album cover from Emil Rottmayer's last album \"Reset/Momentum\"\nYep I did not clean the code yet :p",
            "flags": 0,
            "hasliked": 0,
            "id": "wscSDB",
            "likes": 4,
            "name": "Emil Rottmayer - Reset/Momentum",
            "published": 3,
            "tags": [
                "2d",
                "abstract",
                "synthwave"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265;\nvec3 blue = vec3(19.,33.,149.)/255.;\n\nmat2 r2d(float a) { float sa = sin(a);float ca = cos(a); return mat2(ca, sa, -sa, ca); }\n\nfloat lenny(vec2 v)\n{\n  return abs(v.x)+abs(v.y);\n}\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}\n\nfloat _sub(float a, float b)\n{\n  return max(a,-b);\n}\n\nfloat _union(float a, float b)\n{\n  return max(a,b);\n}\n\nfloat sdf_cir(vec2 uv, float r)\n{\n  return length(uv)-r;\n}\n\nfloat sdf_rect(vec2 uv, vec2 sz)\n{\n  vec2 r = abs(uv)-sz;\n  return max(r.x,r.y);\n}\n\nfloat rdrCir(vec2 uv, float r, float th)\n{\n  float col= sat(1.-_sub(sdf_cir(uv, r),sdf_cir(uv,r-th))/0.005);\n col += abs(uv.y)-(sin(25.*uv.x+iTime)*0.2+0.2)*0.1;\nreturn col;\n}\n\nvec3 rdrChroma(vec2 uv)\n{\n  float r = length(uv)*0.15;\n//  uv = uv+vec2(sin(iTime),cos(iTime))*0.2;\n  vec3 col;\n\n  col.r = rdrCir(uv+uv*r,0.1,0.01);\n  col.g = rdrCir(uv,0.1,0.01);\n  col.b = rdrCir(uv-uv*r,0.1,0.01);\n  return col;\n}\n\nbool inTriangle(vec2 A, vec2 B, vec2 C, vec2 P, float thick)\n{\n  vec2 v0 = C - A ;\n  vec2 v1 = B - A ;\n  vec2 v2 = P - A; // Compute dot products\n  float dot00 = dot(v0, v0) ;\n  float dot01 = dot(v0, v1) ;\n  float  dot02 = dot(v0, v2) ;\n  float dot11 = dot(v1, v1) ;\n  float dot12 = dot(v1, v2) ;\n  // Compute barycentric coordinates\n  float invDenom = 1. / (dot00 * dot11 - dot01 * dot01) ;\n  float u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n   float v = (dot00 * dot12 - dot01 * dot02) * invDenom ;\n   // Check if point is in triangle return\n   ;\n   return (u >= 0.) && (v >= 0.) && (u + v < 1.) &&\n   (u<thick||v<thick||(u+v)>1.-thick);\n}\n\nfloat curve(float a)\n{\n  return max(mod(iTime,10.)/10.,0.5)*(sin(iTime+a*102.4)*0.5+0.5)*((sin(a*5.-iTime*15.)*0.3+0.3)+(sin((iTime+a)*13.5)*0.5+0.5));\n}\n\nvec3 mix3(vec3 a, vec3 b, vec3 c, float f)\n{\n\n  vec3 gradA = mix(a, b, sat(f*2.));\n  vec3 gradB = mix(gradA, c, sat(f-0.5)*2.);\n  return gradB;\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col;\n\ncol = mix(blue,vec3(0.),abs(uv.y)*0.5);\n  if (uv.y <0.)\n  col = mix(vec3(0.),blue,pow(-uv.y,.5)*.5);\n\n  vec2 posT= vec2(0.,-0.6);\n  float rT = 1.2;//1.7+float(mod(iTime,0.25*sin(iTime)));\n  float aT = (PI*2.)/3.;\n  float offA = 0.;//iTime;\n\n  vec2 A = vec2(rT*sin(aT*1.+offA),rT *cos(aT*1.+offA))-posT;//+vec2(0.,0.1*sin(iTime));\nvec2 B = vec2(rT*sin(aT*2.+offA),rT *cos(aT*2.+offA))-posT;\nvec2 C = vec2(rT*sin(aT*3.+offA),rT *cos(aT*3.+offA))-posT;\n\nvec2 posT2= vec2(0.,0.6);\nfloat angleB = 3.14159265;\nvec2 A2 = vec2(rT*sin(aT*1.+angleB),rT *cos(aT*1.+angleB))-posT2;//+vec2(0.,0.1*sin(iTime));\nvec2 B2 = vec2(rT*sin(aT*2.+angleB),rT *cos(aT*2.+angleB))-posT2;\nvec2 C2 = vec2(rT*sin(aT*3.+angleB),rT *cos(aT*3.+angleB))-posT2;\n\n    float cirSpeed = .2;\n    vec2 cirPos = vec2(1.,2.5)+vec2(sin(iTime*cirSpeed), cos(iTime*cirSpeed))*0.5;\n        vec2 ciruv = uv - cirPos;\n      float inCir = sat(1.-sat(sdf_cir(ciruv, .5))*10000.);\n    \n    vec3 cirBaseCol = blue*0.3;\n    vec3 cirHaloCol = (vec3(136.,234.,255.)/210.)*pow(length(ciruv-vec2(1.5,2.)*0.15),1.2)*pow(length(ciruv-vec2(-.5,2.5)*0.15),1.2)*(length(ciruv)+0.6)+0.15*sat(dot(ciruv,-cirPos));\n    col = mix(col, cirBaseCol+cirHaloCol, inCir);\n    \n    uv.y *= 1.2;\nif(inTriangle(A,B,C,uv,1.))\n  col = mix3(vec3(0.),blue,vec3(136.,234.,255.)/210.,abs(uv.y*0.7));\nif(inTriangle(A2,B2,C2,uv,1.))\n  col += mix3(vec3(0.),blue,vec3(204.,247.,255.)/210.,abs(uv.y))*float(mod(abs(uv.y+iTime*0.05),0.07)<0.01);\n    \n\n  return col;\n}\n\n\t\t\t\t//normpdf function gives us a Guassian distribution for each blur iteration; \n//this is equivalent of multiplying by hard #s 0.16,0.15,0.12,0.09, etc. in code above\n\t\t\t\tfloat normpdf(float x, float sigma)\n\t\t\t\t{\n\t\t\t\t\treturn 0.39894*exp(-0.5*x*x / (sigma*sigma)) / sigma;\n\t\t\t\t}\n\t\t\t\tvec3 blur(vec2 uv, float blurAmount) {\n\t\t\t\t\t//get our base color...\n\t\t\t\t\tvec3 col = rdr(uv);\n\t\t\t\t\t//total width/height of our blur \"grid\":\n\t\t\t\t\tconst int mSize = 11;\n\t\t\t\t\t//this gives the number of times we'll iterate our blur on each side \n\t\t\t\t\t//(up,down,left,right) of our uv coordinate;\n\t\t\t\t\t//NOTE that this needs to be a const or you'll get errors about unrolling for loops\n\t\t\t\t\tconst int iter = (mSize - 1) / 2;\n\t\t\t\t\t//run loops to do the equivalent of what's written out line by line above\n\t\t\t\t\t//(number of blur iterations can be easily sized up and down this way)\n\t\t\t\t\tfor (int i = -iter; i <= iter; ++i) {\n\t\t\t\t\t\tfor (int j = -iter; j <= iter; ++j) {\n\t\t\t\t\t\t\tcol += rdr(vec2(uv.x + float(i) * blurAmount, uv.y + float(j) * blurAmount)) * normpdf(float(i), 7.);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//return blurred color\n\t\t\t\t\treturn col / float(mSize-2);\n\t\t\t\t}\n\nvec3 rdrClean(vec2 uv)\n{\n    return blur(uv, .0008);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv = uv-(iResolution.xy/iResolution.xx)*0.5;\n    uv -= vec2(-0.1,-0.05);\nuv*=8.;\n    uv *= r2d(-0.4);\n vec3 col;// = vec3(length(uv));\n    \n    \n col += rdrClean(uv);\ncol = pow(col, vec3(1./1.5));\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}