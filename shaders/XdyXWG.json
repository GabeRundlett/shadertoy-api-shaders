{
    "Shader": {
        "info": {
            "date": "1466169806",
            "description": "SSS Blob",
            "flags": 0,
            "hasliked": 0,
            "id": "XdyXWG",
            "likes": 4,
            "name": "SSS Blob",
            "published": 3,
            "tags": [
                "sss",
                "blob"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 594
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nmat3 RotX(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\t// get rotation matrix near x\nmat3 RotY(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\t// get rotation matrix near y\nmat3 RotZ(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\t// get rotation matrix near z\n\nmat3 m;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// matrice sx * y * z\n\nconst vec3 mat = vec3(1,0.52,0);\t\t\t\t\t\t\t\t\t// color material\n\nfloat pattern(vec3 p)\n{\n\tp = fract(p) - 0.5;\t\t\t\t\t\t\t\t\t\t\t\t// 2d repeat\n\treturn length(vec4(p,1));\t\t\t\t\t\t\t\t\t\t// sphere \n}\n\nfloat effect(vec3 p) \n{\n\tp *= m;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// rotation xyz of p for one time here to reduce the calculation \n    float d = min(\t\t\t\t\t\t\t\t\t\t\t\t\t// min quad pattern with rotationnal layer\n\t\t\t\t\tmin(\n\t\t\t\t\t\tpattern(p), \t\t\t\t\t\t\t\t// pattern rotate near xyz one time\n\t\t\t\t\t\tpattern(p*m)), \t\t\t\t\t\t\t\t// pattern rotate near xyz two time\n\t\t\t\t\t\tpattern(p*m*m));\t\t\t\t\t\t\t// pattern rotate near xyz three time\n    return d/0.94; \t\t\t\t\t\t\t\t\t\t\t\t\t// reduce weight value with factor\n}\n\nvec4 df(vec3 p)\n{\n\tfloat dist = 1.-effect(p*0.2);\t\t\t\t\t\t\t\t\t// 3d pattern\n\tfloat lsp = length(p) - 5.;\t\t\t\t\t\t\t\t\t\t// sphere\n\tfloat sp = max(-lsp - -1.26, lsp) + dist * 5.;\t\t\t\t\t// empty sphere + pattern\n    return vec4(sp, vec3(step(dist, 0.54)));\t\t\t\t\t\t// df, df color strip\n}\n\nvec3 nor( vec3 p , vec3 e)\n{\n\treturn normalize(vec3(\t\t\t\t\t\t\t\t\t\t\t// normalized differenciate value along x, y and z for get normal at surf point\n\t    df(p+e.xyy).x - df(p-e.xyy).x,\t\t\t\t\t\t\t\t// diffenrencial over x fo surf point\n\t    df(p+e.yxy).x - df(p-e.yxy).x,\t\t\t\t\t\t\t\t// diffenrencial over y fo surf point\n\t    df(p+e.yyx).x - df(p-e.yyx).x ));\t\t\t\t\t\t\t// diffenrencial over z fo surf point\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = nor(p,\tvec3( 0.0001, 0, 0)); \t\t\t\t\t\t\t// precise normale at surf point\n\treturn df(p - n * s).x/s;\t\t\t\t\t\t\t\t\t\t// ratio between df step and constant step\n}\n\nvec2 shade(vec3 ro, vec3 rd, float d, vec3 lp, float li)\n{\n\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t// surface point\n\tvec3 ld = normalize(lp-p); \t\t\t\t\t\t\t\t\t\t// light dir\n\tvec3 n = nor(p, vec3( 0.0001, 0, 0));\t\t\t\t\t\t\t// normal at surface point\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t// reflected ray dir at surf point \n\tfloat amb = 0.6; \t\t\t\t\t\t\t\t\t\t\t\t// ambiance factor\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\t// diffuse\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \t\t\t// fresnel\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.);\t\t// specular\n\tfloat sss = 1. - SubDensity(p, 0.5); \t\t\t\t\t\t\t// sub density of df\n\treturn vec2(\n        (diff + fre + spe) * amb * li, \t\t\t\t\t\t\t\t// ambiant diffuse + fresenl + specular => out\n        (diff + fre + sss) * amb * li + spe \t\t\t\t\t\t// ambient diffuse + fresnel + subsurface => in\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*0.05;\t\t\t\t\t\t\t\t\t// time for rotation matrices used by pattern in line 24\n    mat3 mx = RotX(-7.*(sin(time*2.)*.5+.5));\t\t\t\t\t \t// rotation matrice near axis x\n    mat3 my = RotY(-5.*(sin(time*1.5)*.5+.5));\t\t\t\t\t\t// rotation matrice near axis y\n    mat3 mz = RotZ(-3.*(sin(time)*.5+.5));\t\t\t\t\t\t\t// rotation matrice near axis z\n    m = mx*my*mz;\t\t\t\t\t\t\t\t\t\t\t\t\t// matrice sx * y * z\n    \n    vec2 g = fragCoord.xy;\t\t\t\t\t\t\t\t\t\t\t// pixel coord\n    vec2 si = iResolution.xy;\t\t\t\t\t\t\t\t\t\t// size of the creen\n\n\ttime = iTime * 0.5;\t\t\t\t\t\t\t\t\t\t// time for cam\n\t\n    float cam_e = 1.52; \t\t\t\t\t\t\t\t\t\t\t// cam elevation\n    float cam_d = 6.6; \t\t\t\t\t\t\t\t\t\t\t\t// cam distance to origin\n    \n    if (iMouse.z > 0.) \t\t\t\t\t\t\t\t\t\t\t\t// if mouse click on sreen\n    {\n        cam_d = 10. * iMouse.x/si.x;\t\t\t\t\t\t\t\t// cam distance range 0 to 10\n        cam_e = 5. * iMouse.y/si.y;\t\t\t\t\t\t\t\t\t// cam elevation range 0 to 5\n    }\n    \n    vec3 cu = vec3(0,1,0);\t\t\t\t\t\t\t\t\t\t\t// cam up\n  \tvec3 cv = vec3(0,0,0); \t\t\t\t\t\t\t\t\t\t\t// cam center view located on the center of the ball\n    \t\n    vec3 col = vec3(0.); \t\t\t\t\t\t\t\t\t\t\t// pixel color to out\n    \n    vec3 ro = vec3(-sin(0.), sin(cam_e), cos(0.))*cam_d; \t\t\t// ray origin\n\tvec3 lpi = vec3(-sin(time), sin(cam_e), cos(time))*0.3;\t\t\t// light point in ball\n\n  \tvec3 rov = normalize(cv-ro);\t\t\t\t\t\t\t\t\t// dir from ray origin to cam view center => axis z\n    vec3 u = normalize(cross(cu,rov));\t\t\t\t\t\t\t\t// perpendicular dir to plane fromed by cam up and rov => axis x\n  \tvec3 v = cross(rov,u);\t\t\t\t\t\t\t\t\t\t\t// perpendicular dir to plane fromed by u and rov => axis y\n  \tvec2 uv = (g+g-si)/si.y;\t\t\t\t\t\t\t\t\t\t// pixel coord in centered into the screen with screen ratio ( range -si.x/s.y to si.x/si.y for the x)\n    vec3 rd = normalize(rov + uv.x*u + uv.y*v);\t\t\t\t\t\t// ray dir of the current pixel in 3d\n    \n\tfloat md = 20.;\t\t\t\t\t\t\t\t\t\t\t\t\t// mas distance\n    float s = 1.;\t\t\t\t\t\t\t\t\t\t\t\t\t// ray marching step value ( radius of each sphere from df alogn ray marching)\n    float d = 0.;\t\t\t\t\t\t\t\t\t\t\t\t\t// distance from df to cam origine substepped by ray marching algo \n    for(int i=0;i<250;i++)\t\t\t\t\t\t\t\t\t\t\t// 250 iterations\n    {      \n        if (s<0.025*log(d*d/s/500.)||s>md) break;\t\t\t\t\t// one break condition when we are close df or when we are far of the df\n        s = df(ro+rd*d).x;\t\t\t\t\t\t\t\t\t\t\t// radius of the sphere to df from ray point ( ro + rd *d => ray origin + ray direction * distance ) \n        d += s * 0.2;\t\t\t\t\t\t\t\t\t\t\t\t// sub stepping of the df for improved the float precision of the df on pc with double its not necessary\n    }\n    \n    if (d<md)\t\t\t\t\t\t\t\t\t\t\t\t\t\t// if distance ot the df is less than max distance, so ray dir is on df\n    {\n\t\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t// surf point\n\t\tfor (float i = 0.; i < 1.; i+=0.1)\t\t\t\t\t\t\t// sub surface iteration \n\t\t\tcol = mix(col, shade(p, rd, i, lpi, i).y * mat, i);\t\t// sub shade a dfiferent level of trnsparance with i\n        col = mix(col, shade(ro, rd, d, ro, 1.).x * (mat+0.3), 0.7);// add shade for external reflectivity\n       \tcol = min(col, df(p).yzw);\t\t\t\t\t\t\t\t\t// add pattern strip\n    }\n    \n\tfragColor.rgb = col;\t\t\t\t\t\t\t\t\t\t\t// write pixel color to the gpu buffer\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}