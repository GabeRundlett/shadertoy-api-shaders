{
    "Shader": {
        "info": {
            "date": "1720507688",
            "description": "Liquid Enlightenment  visualizer",
            "flags": 32,
            "hasliked": 0,
            "id": "XXVXDK",
            "likes": 4,
            "name": "Liquid Enlightenment",
            "published": 3,
            "tags": [
                "raymarching",
                "tunnel",
                "ifs",
                "cyber"
            ],
            "usePreview": 0,
            "username": "orblivius",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "//\n//  Liquid Enlightenment\n//  by Orblivius, world's greatest recombinator!\n//\n//  Sources: https://shadertoy.com/view/MXKXWy, https://www.shadertoy.com/view/Mcf3Wf\n//\n\n#define PI 3.141592\n#define TWO_PI 6.28\n\n#define TIMESCALE 0.5\n\n#define BLUR_STRENGTH 5.\n#define BLUR_RANGE 2.3\n\n#define UI_COLOR vec4(0.5, 0.8, 1.0, 1.0)\n\n#define R iResolution.xy\n#define M iMouse\n#define H(a) (cos(radians(vec3(0, 60, 120))+(a)*6.2832)*.5+.5)  // hue\n#define N(r) ((abs(r) > 1.) ? 1./(2.*sign(r)-(r)): r)  // range +/-2 to value on number line\n// radial blur\n\n\nfloat hash12(vec2 x)\n{\n \treturn fract(sin(dot(x, vec2(43.5287, 41.12871))) * 523.582);   \n}\n\nvec2 hash21(float x)\n{\n \treturn fract(sin(x * vec2(24.0181, 52.1984)) * 5081.4972);   \n}\n\nfloat hash11(float x)\n{\n \treturn fract(sin(x * 42.146291) * 4215.4827);   \n}\n\nvec2 hash22(vec2 x)\n{\n \treturn fract(sin(x * mat2x2(24.4372, 12.47864, 32.3874, 29.4873)) * 4762.832);  \n}\n\nmat2x2 rotationMatrix(in float angle)\n{\n \treturn mat2x2(-cos(angle), sin(angle), -sin(angle), -cos(angle));   \n}\n\n//Blur function\nvec4 blurr(in sampler2D sampler, in vec2 fragCoord, in vec2 resolution)\n{\n    vec2 uv = fragCoord / resolution;\n    float blurStrength = distance(uv, vec2(0.3));\n    blurStrength = pow(blurStrength, BLUR_RANGE) * (resolution.x / 100.0) * BLUR_STRENGTH;\n    vec4 sum = vec4(0.0);\n    vec2 pixelSize = vec2(1.0) / resolution;\n\tfor (float x = -1.0; x <= 1.0; x += 1.0)\n    {\n     \tfor (float y = -1.0; y <= 1.0; y += 1.0)\n        {\n            sum += texture(sampler, uv + vec2(x, y) * pixelSize * blurStrength);\n        }\n    }\n\n    return sum / 9.0;\n}\n\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 u = U/R;\n    vec3 c = texture(iChannel0, u).rgb*.7;\n    vec4 k = vec4(0);\n    float l = 20.,  // loop size\n          j = 1./l, // increment size\n          a = length((U+U-R)/R.y*2.), // mipmap aa\n          b = j*9., // brightnes\n          p = sign(M.y/R.y-.5),\n          i = j;\n    \n    for (; i<=1.; i+=j) {\n          k = .1 * blurr(iChannel1, mix(u, vec2(.5),p-i*p), iResolution.xy);\n           k += .2*texture(iChannel0, mix(u, vec2(.5), p-i*p), a);\n          c += b * H(i+.2) * sqrt(i) * (k.rgb + .1 - i*.2);\n    }\n    c.r += .2-a*.1;\n    C = vec4(tanh(c*c*c), 1);\n \n  vec2 uv2 = U/iResolution.xy;\n    \n \n}\n\n  ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\n//  Liquid Enlightenment\n//  by Orblivius, world's greatest recombinator!\n//\n//  Sources: https://shadertoy.com/view/MXKXWy, https://www.shadertoy.com/view/Mcf3Wf\n//\n\n#define TMIN .8+.1*snd\n#define TMAX 20.\n#define EPS .001\n#define ITR 80.\n#define ID_NONE -1.4\n#define ID_BOX 1.\n#define TAU (3.1415926*2.)\nfloat snd = 0.;\n\nmat2 rot(float t){\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\nfloat sdBox(in vec3 p, in vec3 box) {\n   vec3 d = abs(p) - box;\n   return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nvec3 aces(vec3 x) {\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvec2 rotateUV(vec2 uv, float angle) {\n    angle = angle*TAU;\n    mat2 matrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    return matrix * uv;\n}\n\n\nvec3 hueShift(vec3 col, float shift) {\n    vec3 m = vec3(cos(shift), -sin(shift) * .57735, 0);\n    m = vec3(m.xy, -m.y) + (1. - m.x) * .33333;\n    return mat3(m, m.zxy, m.yzx) * col;\n}\nvec2 intersect(float i, vec3 p){\n    vec2 res = vec2(ID_NONE, 20.);\n    vec2 obj;\n    \n  \n    vec3 p_o = p;\n    p = mod(p, 2.)-1.;\n    for(int i = 0;i <6;i++){\n        p = abs(p)-1.19;\n        p.xy = rot(-2.32)*p.xy;\n        p = abs(p)-0.2;\n        p.yz = rot(-.23+.2*snd)*p.yz;\n       \n        p *= 1.25;\n    }\n    obj = vec2(ID_BOX, sdBox(p,vec3(1., .5, .5)));\n    if(obj.y < res.y)res = obj;\n\n\n    return res;\n}\n\nvec3 genNormal(vec3 p){\n    vec2 e = vec2(EPS, 0.);\n    return normalize(vec3(  intersect(0.,p+e.xyy).y-intersect(0.,p-e.xyy).y, \n                                              intersect(0.,p+e.yxy).y-intersect(0.,p-e.yxy).y, \n                                              intersect(0.,p+e.yyx).y-intersect(0.,p-e.yyx).y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 p = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0., 0.,-iTime*.5);\n   \n    vec3 rd = vec3(p, -1.);\n    rd = normalize(rd);\n    \n    vec3 ray;\n    float t = TMIN;\n    vec3 col = vec3(0.);\n    float s = 0.;\n    for(float i = 0.;i < ITR;i++){\n     snd  = 0.34* (texture(iChannel0,vec2(i,0.15)).r + \n                texture(iChannel0,vec2(i+0.1,0.15)).r);\n       \n     \n        ray = ro+rd*t;\n      \n        vec2 obj = intersect(i/ITR, ray);\n        \n        if(obj.x == ID_BOX){\n            if(obj.y < EPS){\n                col += .4*i*vec3(.1, .2, .3);\n                 col = hueShift((col),t*1.5);\n                 \n               \n                break;\n            }\n            \n        }\n        \n        if(t > TMAX) break;\n        t += .7*obj.y;\n    }\n \n    // Time varying pixel color\n    // Output to screen\n    fragColor = vec4(hueShift(col,iTime*.1),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}