{
    "Shader": {
        "info": {
            "date": "1638372228",
            "description": "little wolf-lobito",
            "flags": 0,
            "hasliked": 0,
            "id": "NtV3WV",
            "likes": 8,
            "name": "little wolf-lobito",
            "published": 3,
            "tags": [
                "2d",
                "draw",
                "littlewolf",
                "lobito"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//little wolf-lobito-1-dic-2021\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n//#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n//#define S2(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S(d,b) smoothstep(8.*antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(6.*antialiasing(0.85),b,d)\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0));\nreturn colOut;\n}\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{   p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{   vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nvec3 HacerOjos(vec2 p, vec3 colOut, vec3 colIn)\n{   float d1= sdCircle( p-vec2(0.0,-1.70),0.07 );\n    float d2=sdBox(p-vec2(0.1,-1.9), vec2(0.15,0.005) );\n    colOut= DrawFig(colIn, colOut,d1);\n    colOut= DrawFig(colIn, colOut,d2);\n    return colOut;\n}\n\nvec3 HacerOreja(vec2 p, float ang, vec3 colOut, vec3 colIn)\n{ ///Oreja\n   p= rotatev2(p,ang);\n   float r1=0.25;\n   float r2=0.0001;\n   float h=0.3;\n   float d5= sdTrapezoid(p-vec2(0.5,1.0),r1,r2,h);\n   colOut= DrawFigBorde(colIn, colOut,d5); \n    return colOut;\n}\n   \n\nvec3 HacerRostro2d(vec2 p, vec3 col)\n{    vec2 p0=p;  \n    //oreja der\n    col= HacerOreja(p,radians(45.0),col, vec3(0.7));\n    col= HacerOreja(p*1.2-vec2(0.15,0.0),radians(45.0),col, vec3(0.2));\n    //oreja izq\n    p.x+=0.9;\n    p.y-=0.15;\n    col= HacerOreja(p,radians(15.0),col, vec3(0.7));\n    col= HacerOreja(p*1.2-vec2(0.12,0.0),radians(15.0),col, vec3(0.2)); //izq\n    p=p0;\n    \n    //Cuello\n    float d6= sdBox(p-vec2(0.0,-1.4), vec2(0.2,0.8) );\n   col= DrawFigBorde(vec3(0.4), col,d6);\n   \n    //cabeza\n   p= rotatev2(p,radians(25.0));\n   float d1=sdCircle(p*vec2(0.8,1.6)-vec2(0.0,0.0), 1.0 );\n   col= DrawFigBorde(vec3(0.5), col,d1);\n   p=p0;\n      \n   float angN=10.*sin(iTime);\n   //nariz 1 y boca\n   float r1,r2,h;\n   r1=0.3;\n   r2=0.3;\n   h=1.0;\n   p= rotatev2(p,radians(220.0+angN));\n   float d2=sdUnevenCapsule(p-vec2(0.1,0.4),r1,r2,h);\n   float d3=sdUnevenCapsule(p-vec2(-0.2,0.4),r1,r2,h);\n   col= DrawFigBorde(vec3(0.6), col,d3); //boca\n   col= DrawFigBorde(vec3(0.4), col,d2); //nariz\n   \n   //nariz 2\n   p=p0;\n   p= rotatev2(p,radians(220.0+angN));\n   float d4=sdCircle(p*vec2(0.6,1.2)-vec2(0.05,1.85), 0.15);\n   col= DrawFig(vec3(0.0), col,d4); //nariz 2\n   p=p0;\n   p= rotatev2(p-vec2(-1.1,-1.15),radians(220.0));\n   col= HacerOjos(p-vec2(0.3,0.05),col, vec3(0.1));\n   col= HacerOjos(vec2(-p.x,p.y)-vec2(0.5,-0.1),col, vec3(0.1));\n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=2.0;\n    uv*=esc;\n    vec3  col=vec3(0.45,0.7,1.0)-uv.y*0.5/esc;\n    col= HacerRostro2d(uv-vec2(0.0,0.8),col);\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}