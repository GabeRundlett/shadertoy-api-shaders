{
    "Shader": {
        "info": {
            "date": "1608051516",
            "description": "Basic structure for running image kernels, demonstrating 'Sobel' edge detection",
            "flags": 2,
            "hasliked": 0,
            "id": "WsGBWc",
            "likes": 6,
            "name": "Edge Detection (Sobel)",
            "published": 3,
            "tags": [
                "video",
                "edgedetection",
                "image"
            ],
            "usePreview": 0,
            "username": "itgaz",
            "viewed": 460
        },
        "renderpass": [
            {
                "code": "/*\nCopyright 2020 Gareth Francis\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \nBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT \nSHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE \nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\n// column major\nmat3 kSobelHorizontalR = mat3(1, 2, 1,\n                             0, 0, 0,\n                             -1, -2, -1);\nmat3 kSobelVerticalD = mat3(-1, 0, 1,\n                           -2, 0, 2,\n                           -1, 0, 1);\nmat3 kSobelHorizontalL = mat3(-1, -2, -1,\n                             0, 0, 0,\n                             1, 2, 1);\nmat3 kSobelVerticalU = mat3(1, 0, -1,\n                           2, 0, -2,\n                           1, 0, -1);\n\nvec4 greyScale( vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Read pixel from webcam\n    vec4 px = texture(iChannel0, uv);\n    \n    // Weighted greyscale\n    float grey = (px.r * 0.2126) + (px.g * 0.7152) + (px.b * 0.0722);\n    return vec4(grey,grey,grey,1.0);\n}\n\nfloat magPX( vec2 fragCoord ) { \n  return greyScale(fragCoord).r;\n}\n\n// Sample a 3x3 matrix of pixels, centered on fragCoord\nmat3 sample3x3(vec2 fragCoord) {\n  // Sample the image (column-major)\n  mat3 pixels = mat3(\n    magPX(fragCoord + vec2(-1,1)), magPX(fragCoord + vec2(-1,0)), magPX(fragCoord + vec2(-1,-1)),\n    magPX(fragCoord + vec2(0,1)), magPX(fragCoord + vec2(0,0)), magPX(fragCoord + vec2(0,-1)),\n    magPX(fragCoord + vec2(1,1)), magPX(fragCoord + vec2(1,0)), magPX(fragCoord + vec2(1,-1))\n  );\n  return pixels;\n}\n\n// Apply a 3x3 kernel to a pixel matrix\nmat3 kernel3x3( mat3 pixels, mat3 kernel ) {\n  // Multiply samples by matrix, componentwise (* is matrix mult)\n  return matrixCompMult(pixels, kernel);\n}\n  \n// Sum a pixel matrix\nfloat sum3x3(mat3 pixels) {\n  // Sum and return\n  return pixels[0][0] + pixels[0][1] + pixels[0][2] +\n         pixels[1][0] + pixels[1][1] + pixels[1][2] +\n         pixels[2][0] + pixels[2][1] + pixels[2][2];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Sample (greyscale)\n    mat3 px = sample3x3(fragCoord);\n    \n    // Edge detect\n    mat3 edgeHR = kernel3x3(px, kSobelHorizontalR);\n    mat3 edgeVD = kernel3x3(px, kSobelVerticalD);\n    mat3 edgeHL = kernel3x3(px, kSobelHorizontalL);\n    mat3 edgeVU = kernel3x3(px, kSobelVerticalU);\n\n    // Sum pixels\n    float i = length(sum3x3(edgeHR)) + length(sum3x3(edgeVD)) + length(sum3x3(edgeHL) + length(sum3x3(edgeVU)));\n    \n    // Discard some noise\n    if( i < 0.5 ) i = 0.0;\n\n    // Output to screen\n    fragColor = vec4(i,i,i,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}