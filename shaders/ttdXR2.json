{
    "Shader": {
        "info": {
            "date": "1581382106",
            "description": "Demonstrates how a Fourier domain representation of an image may be encoded into only two levels and still reproduce line drawings.\nLeft: Input\nCenter: Fourier transform's sign encoded into 0 and 1\nRight: Reverse Fourier transform Result of Center",
            "flags": 32,
            "hasliked": 0,
            "id": "ttdXR2",
            "likes": 6,
            "name": "Binary Fourier Image",
            "published": 3,
            "tags": [
                "fourier"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 643
        },
        "renderpass": [
            {
                "code": "void mainImage (out vec4 v, vec2 d) {\n  vec2 R = iResolution.xy;\n  vec2 uv = d/R;\n  float nx = 3.;\n  int n = int(floor(uv.x*nx));\n  uv.x = fract(uv.x*nx);\n  uv = .5+(uv-.5)/vec2(1.,R.x/R.y/nx);\n  v = vec4(0.);\n  if (all(lessThan(abs(uv-.5),vec2(.5)))) {\n    // Dot products: (Visual) Intensity is square of (EM wave) amplitude\n    if(n==0) { vec2 f = texture(iChannel0, uv*float(imgsize)/R).xy; v.rgb = vec3(dot(f,f)); }\n    if(n==1) { vec2 f = texture(iChannel1, uv*float(imgsize)/R).xy; v.rgb = vec3(f*f,0.); }\n    if(n==2) { vec2 f = texture(iChannel2, uv*float(imgsize)/R).xy; v.rgb = vec3(dot(f,f)); }\n  }\n  v*=.25;\n  v = pow(v,vec4(1./2.2));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Buffer A: Source image\n\nvoid mainImage (out vec4 v, vec2 d) {\n  v = vec4(0.);\n  if (any(greaterThan(ivec2(d),ivec2(imgsize)-1))) return;\n  vec2 uv = d/float(imgsize);\n  if (uv.x<.5) uv = 1.-uv;\n  float f = pow(texture(iChannel0, .05*uv).r, 2.2);\n  \n  // Make antialiased line contours\n  f = clamp(.75-1.*abs(f-.03)/fwidth(f),0.,1.)*.01/fwidth(f);\n\n  if (isnan(f)) f = 0.;\n  f = sqrt(f); // amplitude is sqrt of intensity\n  v = vec4(1,0,0,0)*f;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Buffer B: Complex Fourier transform of Buffer A\n\nvoid mainImage (out vec4 v, vec2 d) {\n  if (any(greaterThan(ivec2(d),ivec2(imgsize)-1))) discard;\n\n#ifndef METHOD_2\n\n  // Easier to understand: compute the Fourier transform one block at a time\n  BLOCKBAIL\n  v.xy += fourier(iChannel1, float(imgsize+1)-d, scale);\n\n#else\n\n  // Faster? : split sampling of the input over many frames\n  v = texelFetch(iChannel0, ivec2(d), 0);\n  v.zw += fourier_method2(iChannel1, float(imgsize+1)-d, scale, iFrame);\n  int nframes = m2subsample*m2subsample;\n  if (iFrame%nframes==0) {\n    // swap and reset\n    v.xy = v.zw; v.zw = vec2(0.);\n  }\n  if (iFrame<nframes) {\n    // first run: show progress\n    v.xy = v.zw;\n  }\n\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#ifdef HW_PERFORMANCE\nconst int imgsize = 384;\n#else\nconst int imgsize = 192;\n#endif\n\nint m1blocksize = (1<<5);\n\n// turn off METHOD_2 for the original form of the shader\n#define METHOD_2\nint m2subsample = (1<<3);\n\nbool blocktest (ivec2 d, int frame) {\n    ivec2 s = ivec2(m1blocksize);\n    int b = d.x/s.x+imgsize/s.x*(d.y/s.y);\n    return (b==frame%(imgsize*imgsize/(s.x*s.y)));\n}\n\n#define BLOCKBAIL \\\n  if (blocktest(ivec2(d),iFrame-1)) { v=texelFetch(iChannel0,ivec2(d),0); return; } \\\n  if (!blocktest(ivec2(d),iFrame)) discard;\n\nvec2 fourier(sampler2D samp, vec2 d, float scale) {\n  vec2 v = vec2(0.);\n  d-=float(imgsize/2);\n  for (int iy=0; iy<imgsize; iy++) {\n    for (int ix=0; ix<imgsize; ix++) {\n      ivec2 i = ivec2(ix,iy);\n      float a = scale*2.*3.1415927*dot(floor(d),vec2(i-imgsize/2))/float(imgsize);\n      v += mat2(cos(a),sin(a),-sin(a),cos(a))*texelFetch(samp, i, 0).xy;\n    }\n  }\n  return v/float(imgsize)*scale;\n}\n\nvec2 fourier_method2(sampler2D samp, vec2 d, float scale, int frame) {\n  vec2 v = vec2(0.);\n  d-=float(imgsize/2);\n  ivec2 s = ivec2(m2subsample);\n  for (int iy=0; iy<imgsize; iy+=s.y) {\n    for (int ix=0; ix<imgsize; ix+=s.x) {\n      ivec2 i = ivec2(ix+frame%s.x,iy+(frame/s.x)%s.y);\n      float a = scale*2.*3.1415927*dot(floor(d),vec2(i-imgsize/2))/float(imgsize);\n      v += mat2(cos(a),sin(a),-sin(a),cos(a))*texelFetch(samp, i, 0).xy;\n    }\n  }\n  return v/float(imgsize)*scale;\n}\n\nconst float scale = 128./float(imgsize);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Buffer C: Apply Two-value Thresholding to value from Buffer B\n\nvoid mainImage (out vec4 v, vec2 d) {\n\n  vec2 f = texelFetch(iChannel1, ivec2(d), 0).xy;\n\n//  v.xy = f; // plain fourier transform (complex)\n    \n  float fb = f.x;\n\n  // real component only, discretized into two values\n  // (with antialiasing of edges)\n  v.xy = vec2(1,0)*clamp(fb/fwidth(fb)+.5,0.,1.);\n\n//  v.xy = vec2(1,0)*(.5+.5*sign(fb)); // (no antialiasing)\n\n//  v.xy = .5*normalize(f); // (something else to try)\n\n  // Limit to a circle to avoid cross fringes along axes\n  // (with antialiasing of edges)\n  v.xy*= clamp(float(imgsize)/2.-length(d-float(imgsize)/2.+.5),0.,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Buffer D: Inverse Fourier transform of Buffer C\n\nvoid mainImage (out vec4 v, vec2 d) {\n  if (any(greaterThan(ivec2(d),ivec2(imgsize)-1))) discard;\n\n#ifndef METHOD_2\n\n  // Easier to understand: compute the Fourier transform one block at a time\n  BLOCKBAIL\n  v.xy += fourier(iChannel1, float(imgsize+1)-d, scale);\n\n#else\n\n  // Faster? : split sampling of the input over many frames\n  int nframes = m2subsample*m2subsample;\n  if (iFrame<nframes) {\n    v.xy = vec2(0.); return;\n  }\n  v = texelFetch(iChannel0, ivec2(d), 0);\n  v.zw += fourier_method2(iChannel1, float(imgsize+1)-d, scale, iFrame);\n  if (iFrame%nframes==0) {\n    // swap and reset\n    v.xy = v.zw; v.zw = vec2(0.);\n  }\n  if (iFrame<nframes*2) {\n    // first run: show progress\n    v.xy = v.zw;\n  }\n\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}