{
    "Shader": {
        "info": {
            "date": "1416782906",
            "description": "Integrating uv coordinates given a noise flow texture.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldjXD3",
            "likes": 46,
            "name": "Texture flow III",
            "published": 3,
            "tags": [
                "2d",
                "texture"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3559
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2014 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\nvec4 texture0( in vec2 x )\n{\n    //return texture( iChannel0, x );\n    vec2 res = iChannelResolution[0].xy;\n    vec2 u = x*res - 0.5;\n    vec2 p = floor(u);\n    vec2 f = fract(u);\n    f = f*f*(3.0-2.0*f);    \n    vec4 a = texture( iChannel0, (p+vec2(0.5,0.5))/res, -64.0 );\n\tvec4 b = texture( iChannel0, (p+vec2(1.5,0.5))/res, -64.0 );\n\tvec4 c = texture( iChannel0, (p+vec2(0.5,1.5))/res, -64.0 );\n\tvec4 d = texture( iChannel0, (p+vec2(1.5,1.5))/res, -64.0 );\n    return mix(mix(a,b,f.x), mix(c,d,f.x),f.y);\n}\n    \nvec2 flow( vec2 uv, in mat2 m )\n{\n    for( int i=0; i<50; i++ )\n        uv += 0.00015 * m * (-1.0+2.0*texture0(0.5*uv).xz);\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n    // animate\n    float an = 0.5*iTime;\n    float co = cos(an);\n    float si = sin(an);\n    mat2  ma = mat2( co, -si, si, co );\n\n    // orbit, distance and distance gradient\n    vec2 uva = 0.05*(p + vec2(1.0,0.0)/iResolution.xy);\n\tvec2 uvb = 0.05*(p + vec2(0.0,1.0)/iResolution.xy);\n\tvec2 uvc = 0.05*p;\n\tvec2 nuva = flow( uva, ma );\n\tvec2 nuvb = flow( uvb, ma );\n\tvec2 nuvc = flow( uvc, ma );\n    float fa = length(nuva-uva)*95.0;\n    float fb = length(nuvb-uvb)*95.0;\n    float fc = length(nuvc-uvc)*95.0;\n    vec3 nor = normalize( vec3((fa-fc)*iResolution.x,1.0,(fb-fc)*iResolution.y ) );\n\n    // material\n  \tvec3 col = 0.2 + 0.8*texture(iChannel1, 50.0*nuvc).xyz;\n    col *= 1.0 + 0.15*nor;\n    float ss, sw;\n    ss = sin(6000.0*nuvc.x); sw = fwidth(ss); col *= 0.5 + 0.5*smoothstep(-sw,sw,ss+0.95);\n    ss = sin(6000.0*nuvc.y); sw = fwidth(ss); col *= 0.5 + 0.5*smoothstep(-sw,sw,ss+0.95);\n    \n    // ilumination\n    vec3 lig = normalize( vec3( 1.0,1.0,-0.4 ) );\n    col *= vec3(0.7,0.8,0.9) + vec3(0.6,0.5,0.4)*clamp( dot(nor,lig), 0.0, 1.0 );    \n    col += 0.40*pow( nor.y, 4.0 );\n    col += 0.15*pow( nor.y, 2.0 );\n    col *= sqrt( fc*fc*fc );\n \n    // postpro\n    col = 1.5*pow( col+vec3(0.0,0.0,0.015), vec3(0.6,0.8,1.0) );\n    col *= 0.5 + 0.5*sqrt( 16.0*p.x*p.y*(1.0-p.x)*(1.0-p.y) );\n\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}