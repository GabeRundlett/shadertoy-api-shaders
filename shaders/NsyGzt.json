{
    "Shader": {
        "info": {
            "date": "1631912893",
            "description": "Wanted to create something like this :octopus:\nhttps://33.media.tumblr.com/416c868980813011c098e56e8e81f28a/tumblr_nff3dhnTrO1qz6f9yo1_r2_500.gif",
            "flags": 0,
            "hasliked": 0,
            "id": "NsyGzt",
            "likes": 12,
            "name": "- swallow -",
            "published": 3,
            "tags": [
                "sdf",
                "bird",
                "walls",
                "swallow"
            ],
            "usePreview": 0,
            "username": "anahit_movsesyan",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415\n\nvec2 rotate(vec2 p, float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(c, s, -s, c) * p;\n}\n\nfloat smoothMin(float a, float b, float k) {\n    return -log2(exp2(-k * a) + exp2(-k * b)) / k;\n}\n\nfloat sdfFw(float d) {\n    return smoothstep(0., fwidth(d) * 1.5 * 720. / iResolution.y, d);\n}\n\nfloat sdf(float d) {\n    return smoothstep(0., .002 * 720. / iResolution.y, d);\n}\n\nfloat sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdLine(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba * h);\n}\n\nfloat sdWing(vec2 q) {\n    q = rotate(q, ((sin(iTime * 15.) + 0.5) / 3.5) + PI / 1.85);\n    q.x -= sin(q.y * 22. + 1.5) * 0.01 + sin(q.y * 25. + iTime * 15.) * 0.004;\n    return sdLine(q, vec2(0., -0.45), vec2(0)) - 0.05 * smoothstep(-0.23, 0., q.y);\n}\n\nfloat sdTail(vec2 q) {\n    float f = 5. * smoothstep(0.8, -1.9, 2. * sin(iTime*1.5));\n    q = rotate(q, f / 60. + PI / 2.25);\n    q.x -= sin(q.y * 7. + 1.) * 0.005 + sin(q.y * 15.) * 0.003;\n    return sdLine(q, vec2(0., -0.35), vec2(0)) - 0.035 * smoothstep(-0.23, 0., q.y);\n}\n\nfloat sdHead(vec2 p) {\n    float d, d1;\n    \n    // head\n    vec2 q = p - vec2(0.17, -0.045);\n    d = sdCircle(q, 0.045);\n    \n    q = p - vec2(0.205, -0.0415);\n    d1 = sdCircle(q, 0.03);\n    d = smoothMin(d, d1, 180.);\n    \n    // nose\n    q = p - vec2(0.2125, -0.055);\n    q = rotate(q, -PI / 3.5);\n    q.x -= sin(q.y * 0.01 + 1.) * 0.005 + sin(q.y * 0.01) * 0.005;\n    d1 = sdLine(q, vec2(0., -0.03), vec2(0)) - 0.0175 * smoothstep(-0.03, 0., q.y);\n    d = min(d, d1);\n    \n    // eye\n    q = p - vec2(0.21, -0.05);\n    d1 = sdCircle(q, 0.008);\n    d = max(d, -d1);\n    \n    return d;\n}\n    \nfloat sdBird(vec2 p) {\n    float d = sdHead(p);\n    \n    // tail\n    vec2 q = p - vec2(0.08, -0.045);\n    float d1 = sdTail(q);\n    d = min(d, d1);\n    \n    q = p - vec2(0.08, -0.05);\n    q.y *= -1.;\n    d1 = sdTail(q);\n    d = min(d, d1);\n    \n    // wings\n    q = p - vec2(0.105, -0.015);\n    d1 = sdWing(q);\n    d = min(d, d1);\n    \n    q = p - vec2(0.105, -0.075);\n    q.y *= -1.;\n    d1 = sdWing(q);\n    d = min(d, d1);\n\n    return d;\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.x * 6. + vec3(0., 4., 2.), 6.) - 3.) - 1., 0., 1.);\n\treturn c.z * mix(vec3(1.), rgb, c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2. * fragCoord - iResolution.xy)/ max(iResolution.x, iResolution.y);\n    uv.y += sin(iTime * 1.55) / 5.;\n    \n    float signF = (step(fract(iTime / 3.) * 2. - 1., 0.) * 2. - 1.);\n    float bla = signF * (uv.x / 3. + fract(iTime / 1.5) * 2. - 1.);\n   \n    uv = rotate(uv, sin(iTime * 1.55 + PI / 3.5) / 7.);       \n    \n    float fd = mix(1. - sdfFw(smoothMin(sdCircle(uv, 0.06), -bla, 8.)),\n                   sdf(smoothMin(sdBird(uv * 1.1), 1., 8.)),\n                   sdfFw(bla));\n    \n    fd = mix(fd, sdf(smoothMin(sdHead(uv * 1.1), bla + .001, 18.)), fd * sdfFw(bla));\n    \n    vec3 c = vec3(sin(iTime / 5.) * 0.5 + 0.5, 0.8, 0.2);\n    fragColor = vec4((fd + 0.2) * (hsv2rgb(c) + 0.6), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}