{
    "Shader": {
        "info": {
            "date": "1585433512",
            "description": "Archimedean polyhedra & duals given the Leonardo treatment.\n\nThe duals are nicer (change over with 'd' key). 't' allows either auto cycling or polyhedron selection with <left>, <right>. Other controls see code.\n\nRecompile to change angles P,Q,R.",
            "flags": 48,
            "hasliked": 0,
            "id": "3sXyWS",
            "likes": 20,
            "name": "Leonardo Polyhedra",
            "published": 3,
            "tags": [
                "dual",
                "polyhedra",
                "leonardo"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 406
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Matthew Arcus, 2020\n//\n// Leonardo Polyhedra - Archimedean Polyhedra & Duals.\n//\n// Controls:\n// <mouse>: rotation\n// <up>/<down>: move in/out\n// <page up>/<page down>: cycle through polyhedra (if 't' pressed)\n// <left>/<right>: change width of Leonardo frame\n// d: show dual or normal polyhedron\n// f: show fundamental region\n// x: swap Q and R angles\n// s: soft shadow\n// t: cycle through polyhedra\n// a: ambient occlusion\n// r: autorotation\n// c: slice at x = 0\n// l: leonardo effect\n// e: show all dual edges\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// The fundamental triangle:\n// (2,2,x): prism\n// (2,3,3): tetrahedron\n// (2,3,4): cube\n// (2,3,5): icosahedron\n\nint P = 2, Q = 3, R = 5;\n\n// Number of iterations of folding loop\n// 5 iterations is enough to get up to (2 3 5) or (2 2 10)\nint NFOLDS = 5;\n\nfloat AA = 1.0;\n\nfloat lwidth = 0.04; // Width of Leonardo frame\nbool dorotate = true;\nbool doleonardo = true;\nbool dodualfaces = false;\nbool dofaces = false;\nbool swap = false;\nbool region = true;\nbool slice = true;\n\nconst vec3 Face0Color = vec3(0.8,0,0);\nconst vec3 Face1Color = vec3(0.8,0.7,0);\nconst vec3 Face2Color = vec3(0.1,0,0.6);\nconst vec3 SnubColor = vec3(0,0.5,0.0);\nconst vec3 DualColor0 = vec3(0.7,0.7,0.1);\nconst vec3 DualColor1 = vec3(0.1,0.1,0.1);\n\nvec3 colors[] = vec3[]\n  (Face0Color,\n   Face1Color,\n   Face2Color,\n   SnubColor,\n   DualColor0,\n   DualColor1,\n   vec3(1));\n\nconst float PI\t= 3.14159265359;\nconst float TWOPI = 2.0 * PI;\n\nbool alert = false;\nvoid assert(bool test) {\n  if (!test) alert = true;\n}\n\n// Approximate equality. Used for assertion checks.\nbool eq(float a, float b) {\n  return abs(a-b) < 1e-4;\n}\n\nfloat edgedistance(vec3 pos, vec3 X) {\n  //assert(eq(length(X),1.0));  // Use dot(X,X)?\n  return length(pos-dot(pos,X)*X);\n}\n\nfloat raydistance(vec3 pos, vec3 q, vec3 r) {\n  float s = max(0.0, dot(pos-q,r));\n  return distance(pos,q+s*r);\n}\n\n// Perpendicular distance from p to segment ab\nfloat segment(vec3 p, vec3 a, vec3 b) {\n  vec3 pa = p - a;\n  vec3 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nfloat linedist(vec3 pos, vec3 a, vec3 b) {\n  vec3 pa = pos - a;\n  vec3 ba = b - a;\n  float h = dot(pa, ba) / dot(ba, ba);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nfloat max3(float a, float b, float c) {\n  return max(a,max(b,c));\n}\n\nfloat min3(float a, float b, float c) {\n  return min(a,min(b,c));\n}\n\n// Geometric globals\n\n// A,B,C are the mirror planes\n// a,b,c are triangle corners or trihedron edge vectors or face normals\nvec3 A,B,C,a,b,c;\nvec3 tri2bary;\n\n// Could use a matrix here\nvec3 applybary(vec3 bary, vec3 p, vec3 q, vec3 r) {\n  return bary.x*p+bary.y*q+bary.z*r;\n}\n\nvec3 refla(vec3 p) { return p - 2.0*dot(p,A)*A; } // Fold about A plane\nvec3 reflb(vec3 p) { return p - 2.0*dot(p,B)*B; } // Fold about B plane\nvec3 reflc(vec3 p) { return p - 2.0*dot(p,C)*C; } // Fold about C plane\n\n// Planes are represented as vec4s: (a,b,c,d) where p = (x,y,z) is\n// in plane just when (x,y,z,-1).(a,b,c,d) = 0\n\n// For our vec4 plane representations\nvec4 refla(vec4 p) { return vec4(refla(p.xyz),p.w); }\nvec4 reflb(vec4 p) { return vec4(reflb(p.xyz),p.w); }\nvec4 reflc(vec4 p) { return vec4(reflc(p.xyz),p.w); }\n\nvoid init() {\n  if (swap) {\n    int t = Q; Q = R; R = t;\n  }\n  // Setup folding planes\n  float p = PI/float(P);\n  float q = PI/float(Q);\n  float r = PI/float(R);\n  A = vec3(1,0,0);\n  // A.B = -cos(p)\n  B = vec3(-cos(p),sin(p),0);\n  // A.C = -cos(r)\n  float x = -cos(r);\n  // B.C = -cos(q) = cos(p)cos(r) + y sin(p)\n  float y = -(cos(p)*cos(r)+cos(q))/sin(p);\n  // |C| = 1\n  float z = sqrt(1.0-x*x-y*y);\n  C = vec3(x,y,z);\n  a = cross(B,C);\n  b = cross(C,A);\n  c = cross(A,B);\n  // Weights to convert trilinear (distance from region planes) to barycentric\n  // (weighted sum of triangle vertices).\n  tri2bary = vec3(length(a),length(b),length(c));\n  a = normalize(a);\n  b = normalize(b);\n  c = normalize(c);\n}\n\n// Could use an ivec3 and count different types of flip\nvec3 fold(vec3 pos, out int flips) {\n  // We want to know the number of actual reflections made\n  // so keep track of that in flips.\n  flips = 0;\n  for (int i = 0; i < NFOLDS; i++) {\n    float k = dot(pos,A);\n    flips += int(k < 0.0);\n    pos -= 2.0*min(0.0,k)*A;\n    k = dot(pos,B);\n    flips += int(k < 0.0);\n    pos -= 2.0*min(0.0,k)*B;\n    k = dot(pos,C);\n    flips += int(k < 0.0);\n    pos -= 2.0*min(0.0,k)*C;\n  }\n  return pos;\n}\n\nvec3 fold(vec3 pos) {\n  int flips;\n  return fold(pos,flips);\n}\n\n  // p is the \"triangle point\"\n// pa,pb,pc is its reflection in the 3 walls\nvec3 p,pa,pb,pc;\n\n// These vec4s represent planes, xyz is a normal,\n// w is -ve distance from the origin, so we can find\n// distance of p from plane q with dot(vec4(p,1),q):\n//\n// aplane, bplane, cplane are the face planes\n// adjacent regions (across planes A,B,C respectively).\n\nvec4 aplane, bplane, cplane;\n\nvoid initp(vec3 tri) {\n  p = applybary(tri2bary*tri,a,b,c);\n  if (true) {\n    float scale = min3(edgedistance(p,A),\n                       edgedistance(p,B),\n                       edgedistance(p,C));\n    p /= scale;\n  }\n  aplane = vec4(a,dot(p,a)); // Face planes\n  bplane = vec4(b,dot(p,b));\n  cplane = vec4(c,dot(p,c));\n  pa = refla(p);\n  pb = reflb(p);\n  pc = reflc(p);\n}\n\nvec3 aa,bb,cc;\nvec3 a0,a1,b0,b1,c0,c1;\nvec3 paa,pbb,pcc;\nvec3 ab,ac,ba,bc,ca,cb;\n\nvoid scenesetup() {\n  aa = a/dot(p,a);\n  bb = b/dot(p,b);\n  cc = c/dot(p,c);\n\n  a0 = refla(reflb(p));\n  a1 = refla(reflc(p));\n  b0 = reflb(reflc(p));\n  b1 = reflb(refla(p));\n  c0 = reflc(refla(p));\n  c1 = reflc(reflb(p));\n\n  paa = normalize(pa); //pa/dot(pa,pa);\n  pbb = normalize(pb); //pb/dot(pb,pb);\n  pcc = normalize(pc); //pc/dot(pc,pc);\n\n#if 1\n  // These vectors give a cut at right angles to the\n  // face, rather than the edge planes.\n  ba = normalize(cross(a,cross(a,b)));\n  ca = normalize(cross(a,cross(a,c)));\n  ab = normalize(cross(b,cross(b,a)));\n  cb = normalize(cross(b,cross(b,c)));\n  ac = normalize(cross(c,cross(c,a)));\n  bc = normalize(cross(c,cross(c,b)));\n#else\n  ba = normalize(a-b);\n  ca = normalize(a-c);\n  ab = normalize(b-a);\n  cb = normalize(b-c);\n  ac = normalize(c-a);\n  bc = normalize(c-b);\n#endif  \n}\n\nfloat leonardo(float d, float da, float dba, float dca) {\n  float d1 = da; \n  d1 = max(d1,-da-lwidth); // The inner plane - now we have a 'plate'\n  d1 = max(d1,max(-dba,-dca)); // A single face\n  d = min(d,max(d1,dba-lwidth));\n  d = min(d,max(d1,dca-lwidth));\n  return d;\n}\n\nfloat faces(vec3 pos) {\n  vec4 pos4 = vec4(pos,-1);\n  // Signed distance from 3 planes\n  float d = 1e8;\n  float da = dot(pos4,aplane); // The main plane\n  float db = dot(pos4,bplane);\n  float dc = dot(pos4,cplane);\n  if (!doleonardo) return max(da,max(db,dc));\n  float dba = dot(pos-p,ba), dca = dot(pos-p,ca);\n  d = leonardo(d,da,dba,dca);\n  float dcb = dot(pos-p,cb), dab = dot(pos-p,ab);\n  d = leonardo(d,db,dcb,dab);\n  float dac = dot(pos-p,ac), dbc = dot(pos-p,bc);\n  d = leonardo(d,dc,dac,dbc);\n  return d;\n}\n\nvec3 triplanar(vec3 p, vec3 n, sampler2D samp) {\n  vec3 texX = texture(samp, p.zy).xyz;\n  vec3 texY = texture(samp, p.xz).xyz;\n  vec3 texZ = texture(samp, p.xy).xyz;\n  return texX * n.x + texY * n.y + texZ * n.z;\n}\n\nfloat colorfaces(vec3 pos, vec3 n, inout vec3 col) {\n  vec4 pos4 = vec4(pos,-1);\n  // Distance from 3 planes\n  float d0, d = -1e8;\n  d0 = dot(pos4,aplane);\n  if (d0 > d) { d = d0; col = colors[0]; }\n  d0 = dot(pos4,bplane);\n  if (d0 > d) { d = d0; col = colors[1]; }\n  d0 = dot(pos4,cplane);\n  if (d0 > d) { d = d0; col = colors[2]; }\n  n = fold(n);\n  //col *= length(triplanar(pos,n,iChannel2).rgb);\n  col = triplanar(pos,n,iChannel2).rgb;\n  //col *= length(texture(iChannel2,pos.xy).rgb);\n  return d;\n}\n\nvoid colorfaces0(vec3 pos, inout float d, inout int col) {\n  vec4 pos4 = vec4(pos,-1);\n  // Distance from 3 planes\n  if (abs(dot(pos4,aplane)) < 1e-4) col = 0;\n  if (abs(dot(pos4,bplane)) < 1e-4) col = 1;\n  if (abs(dot(pos4,cplane)) < 1e-4) col = 2;\n  col = 3;\n}\n\nbool alledges = true;\n\nfloat dualfaces(vec3 pos) {\n  //assert(eq(length(p),1.0));\n  float r = 1.0/length(p);\n  float d = 1e8; // Nice 'n' easy, p defines surface\n  float d0 = dot(pos,p)-r;\n  if (!doleonardo) return d0;\n  // The 'Leonardo look' - clip by a plane parallel to faceplane\n  // This should really be a plane orthogonal to dual face.\n  float eps = 1e-3;\n#if 0\n  vec3 xplane = normalize(cross(p,cross(p,A)));\n  vec3 yplane = normalize(cross(p,cross(p,B)));\n  vec3 zplane = normalize(cross(p,cross(p,C)));\n#else\n  vec3 xplane = A;\n  vec3 yplane = B;\n  vec3 zplane = C;\n#endif\n  if (alledges || dot(p,A) > eps) d = min(d,max(d0,dot(pos,xplane)-lwidth));\n  if (alledges || dot(p,B) > eps) d = min(d,max(d0,dot(pos,yplane)-lwidth));\n  if (alledges || dot(p,C) > eps) d = min(d,max(d0,dot(pos,zplane)-lwidth));\n  d = max(d,-d0-lwidth);\n  return d;\n}\n\nfloat colordualfaces(vec3 pos, vec3 n, bool parity, inout vec3 col) {\n  n = fold(n);\n  col = triplanar(pos,n,iChannel2);\n  //col = texture(iChannel2,pos.xy).rgb;\n  return dualfaces(pos);\n}\n\nfloat scene(vec3 pos) {\n  float d = 1e8;\n  if (dodualfaces) d = min(d,dualfaces(pos));\n  if (dofaces) d = min(d,faces(pos));\n  return d;\n}\n\nfloat colorscene(vec3 pos, vec3 n, bool parity, out vec3 col) {\n  float d = 1e8, d0;\n  vec3 col0;\n  if (dodualfaces) {\n    d0 = colordualfaces(pos,n,parity,col0);\n    if (d0 < d) { d = d0; col = col0; }\n  }\n  if (dofaces) {\n    d0 = colorfaces(pos,n,col0);\n    if (d0 < d) { d = d0; col = col0; }\n  }\n  return d;\n}\n\nfloat polyhedron(vec3 pos) {\n  vec3 pos0 = pos;\n  pos = fold(pos);\n  float d = 1e8;\n  d = min(d,scene(pos));\n  if (region) {\n    d = max(d,dot(pos0,A));\n    d = max(d,dot(pos0,B));\n    d = max(d,dot(pos0,C));\n  }\n  return d;\n}\n\nvec3 getColor(vec3 pos,vec3 n){\n  vec3 pos0 = pos;\n  int flips;\n  pos = fold(pos,flips);\n  vec3 col = vec3(0,0,1);\n  float d = colorscene(pos,n,flips%2==0,col);\n  if (region) {\n    float d0 = d;\n    d = max(d,dot(pos0,A));\n    d = max(d,dot(pos0,B));\n    d = max(d,dot(pos0,C));\n    if (d != d0) col = colors[6];\n  }\n  return col;\n}\n\n//-------------------------------------------------\n//From https://www.shadertoy.com/view/XtXGRS#\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nfloat map(in vec3 p) {\n  float d = polyhedron(p);\n  if (slice) d = max(d,p.x);\n  return d;\n}\n\n// We should be able to do this analytically from the plane hit.\nvec3 calcNormal(in vec3 p) {\n  const vec2 e = vec2(0.001, 0.0);\n  return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                        map(p + e.yxy) - map(p - e.yxy),\n                        map(p + e.yyx) - map(p - e.yyx)));\n}\n\nfloat maxdist = 5.0;\nfloat march(in vec3 ro, in vec3 rd) {\n  const float precis = 0.001;\n  float t = 0.1;\n  float res = -1.0;\n  for (int i = 0; i < 100; i++) {\n    if (t > maxdist) return -1.0;\n    float h = map(ro+rd*t);\n    h = min(h,0.5);\n    t += 0.8*h;\n    if (h < precis) break;\n  }\n  return t;\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  if (dorotate) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.1);\n  }\n  return p;\n}\n\nvec3 circuit[] = vec3[]\n  (vec3(1,1,1),vec3(1,1,1),vec3(1,0,0),vec3(1,0,0),\n   vec3(1,1,0),vec3(1,1,0),vec3(0,1,0),vec3(0,1,0),\n   vec3(0,1,1),vec3(0,1,1),vec3(0,0,1),vec3(0,0,1),\n   vec3(1,0,1),vec3(1,0,1),vec3(1,0,0),vec3(1,0,0));\n\nconst int nsteps = circuit.length();\n\nvec3 gettri(float t) {\n  int i = int(floor(t))%nsteps;\n  return mix(circuit[i],circuit[(i+1)%nsteps],mod(t,1.0));\n}\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_X = 88;\nconst int CHAR_Z = 90;\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nbool key(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\n// softshadow from iq.\nfloat softshadow(vec3 ro, vec3 rd, float mint, float tmax, float w) {\n  float t = mint;\n  float res = 1.0;\n  for (int i = 0; i < 200; i++) {\n    float h = map(ro + t*rd);\n    res = min(res, h/(w*t));\n    t += clamp(h, 0.01*t, max(0.5,0.1*t));\n    if (res < -1.0 || t > tmax) break;\n  }\n  res = max(res,-1.0); // clamp to [-1,1]\n  res = 0.25*(1.0+res)*(1.0+res)*(2.0-res); // smoothstep\n  return res;\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor, float t ){\n  float dd, hr, totao = 0.0;\n  float sca = 1.0;\n  vec3 aopos; \n  for( int aoi=0; aoi<5; aoi++ ) {\n    hr = 0.005 + 0.05*float(aoi);\n    aopos =  nor * hr + pos;\n    totao += -(map(aopos)-hr)*sca;\n    sca *= 0.75;\n  }\n  return clamp( 1.0 - 4.0*totao, 0.0, 1.0 );\n}\n\nint mymod(int n, int m) {\n  // glsl % undefined for -ve arguments\n  if (n < 0) return m-1-(-n-1)%m;\n  else return n%m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  bool doao = !key(CHAR_A);\n  bool doshadow = !key(CHAR_S);\n  doleonardo = !key(CHAR_L);\n  dorotate = !key(CHAR_R);\n  dodualfaces = !key(CHAR_D);\n  dofaces = !dodualfaces;\n  swap = key(CHAR_X);\n  region = key(CHAR_F);\n  slice = key(CHAR_C);\n  alledges = key(CHAR_E);\n  vec2 p = fragCoord.xy / iResolution.xy;\n  float camera = 3.0;\n  camera *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));  \n  lwidth *= exp(0.1*float(keycount(KEY_RIGHT)-keycount(KEY_LEFT)));\n  maxdist = camera + 2.0;\n  vec3 ro = vec3(0.0, 0.0, -camera);\n  ro = transform(ro);\n  vec3 li = normalize(vec3(0.5, 2.8, -3.0));\n  li = transform(li);\n  li = normalize(li);\n  init();\n  int tindex = keycount(KEY_PAGE_UP)-keycount(KEY_PAGE_DOWN);\n  vec3 tri = !key(CHAR_T) ? gettri(0.25*iTime) : circuit[mymod(2*tindex,nsteps)];\n  initp(tri);\n  scenesetup();\n  vec3 aacol = vec3(0);\n  vec3 bgcol = vec3(0.2 - 0.2*p.y);\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      vec2 p = (2.0*(fragCoord+vec2(i,j)/AA) - iResolution.xy)/iResolution.y;\n      vec3 col = bgcol;\n      vec3 rd = vec3(p, 3.0);\n      rd = transform(rd);\n      rd = normalize(rd);\n      float t = march(ro, rd);\n      if (t > 0.0) {\n        vec3 pos = ro + t * rd;\n        vec3 n = calcNormal(pos);\n        float ambient = 0.2;\n        float ao = !doao ? 1.0 : calcAO(pos,n,t);\n        float softshadow = !doshadow ? 1.0 : softshadow(pos,li,0.1,4.0,0.01);\n        float diffuse = clamp(dot(n, li), 0.0, 1.0);\n        col = getColor(pos,n) * (ambient*ao+diffuse*softshadow);\n        //col = mix(col,bgcol,0.4*t/maxdist);\n      }\n      aacol += col;\n    }\n  }\n  aacol = pow(aacol/(AA*AA), vec3(0.4545));\n  if (alert) aacol.x = 1.0;\n  fragColor = vec4(aacol, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0) {\n      t = vec4(0);\n    } else {\n      t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}