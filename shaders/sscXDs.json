{
    "Shader": {
        "info": {
            "date": "1634160002",
            "description": "Smooth-min/smooth-max functions, but with independent controls for the smoothing radius of each element.",
            "flags": 0,
            "hasliked": 0,
            "id": "sscXDs",
            "likes": 8,
            "name": "Asymmetric smooth-abs",
            "published": 3,
            "tags": [
                "sdf",
                "smooth",
                "smin",
                "smax",
                "sabs"
            ],
            "usePreview": 0,
            "username": "athibaul",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "// By Alexis THIBAULT\n// Stemmed from a question by Fabrice Neyret: \n// https://www.facebook.com/groups/shadertoy/permalink/961319301115763/\n\nfloat sabs(float x, float a, float b){\n    // Asymmetric smooth-abs\n    \n    // For -b < x < a the graph is a tilted quarter of an ellipse\n    // Coincides with abs() for x < -b or x > a\n    \n    float d = x/2.;\n    float det = a*b + 2.*(a-b)*d - 2.*d*d;\n    \n    float mu = (x > -b && x<a) ?\n     2.*(a*a*(b+d) + b*b*(a-d) - sqrt(2.)*a*b*sqrt(det))/(a*a+b*b)\n     : abs(x);\n    \n    return mu;\n}\n\nfloat smin(float d1, float d2, float r1, float r2)\n{\n    // Asymmetric smooth-min\n    // The zero-set of perpendicular planes is an elliptic surface with radii (r1, r2)\n    \n    return 0.5*(d1+d2 - sabs(d1-d2, r1, r2));\n}\n\nfloat smax(float d1, float d2, float r1, float r2)\n{\n    // Asymmetric smooth-max\n    // The zero-set of perpendicular planes is an elliptic surface with radii (r1, r2)\n    \n    return 0.5*(d1+d2 + sabs(d1-d2, r1, r2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float r1 = 0.5 + 0.4*sin(iTime);\n    float r2 = 0.5 + 0.4*cos(1.62*iTime);\n    float d = smin(uv.x, uv.y, r1, r2) + 0.5;\n    \n    \n    \n    // coloring by iq : https://www.shadertoy.com/view/fd3SRf\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.4,0.7,0.85);\n    //vec3 col = (d<0.0) ? vec3(0.5) : vec3(1.0);\n    col *= 1.0 - exp(-7.0*abs(d));\n\tcol *= 0.9 + 0.1*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}