{
    "Shader": {
        "info": {
            "date": "1641947353",
            "description": "Monotonically rises with angle, but doesn't use trig. Output is in [0.0, 1.0]. A fast and cheap way to order points correctly without actually computing the angles and with very little error.\n\n(r,g,b): (error * 100, pseudoangle, atan)",
            "flags": 0,
            "hasliked": 0,
            "id": "Ndc3Dn",
            "likes": 4,
            "name": "Fast cheap pseudoangle",
            "published": 3,
            "tags": [
                "angle",
                "pseudoangle"
            ],
            "usePreview": 0,
            "username": "mkennan",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "#define PI  acos(-1.0)\n#define TAU (2.0 * PI)\n\nfloat pseudoAngle(float y, float x) {\n  float d = 0.25 * x / (abs(x) + abs(y));\n  if (y > 0.0)\n    return 0.75 - d;\n  return 0.25 + d;\n}\nfloat pseudoAngle(vec2 v) { return pseudoAngle(v.y, v.x); }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2  uv  = fragCoord.xy / iResolution.xy - 0.5;\n  float soo = pseudoAngle(uv);             // g: pseudoangle\n  float ang = atan(uv.y,uv.x) / TAU + 0.5; // b: atan\n  float dif = abs(soo - ang) * 100.0;      // r: error * 100\n  \n                          fragColor = vec4(0.0, soo, 0.0, 1.0);\n  if (iFrame % 600 > 200) fragColor = vec4(0.0, 0.0, ang, 1.0);\n  if (iFrame % 600 > 400) fragColor = vec4(dif, 0.0, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}