{
    "Shader": {
        "info": {
            "date": "1725532994",
            "description": "A way to create radii on a (composite) SDF shape without using smooth min. More precise radius application. For this to work, radius R > 0.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xc2BDK",
            "likes": 0,
            "name": "SDF concave corner radius",
            "published": 3,
            "tags": [
                "sdf",
                "convex",
                "smooth",
                "shape",
                "corner",
                "radius",
                "concave",
                "inner"
            ],
            "usePreview": 0,
            "username": "aidanwyber",
            "viewed": 68
        },
        "renderpass": [
            {
                "code": "#define AA 2\n\n#define PI             3.14159265358979323846264\n#define TAU            6.28318530717958647692528\n#define SQRT_2         1.41421356237309504880169\n#define PHI            1.61803398874989484820459\n#define E              2.71828182845904523536028\n\nfloat sdBox( in vec2 p, in vec2 b ) {\n    // iq's 2d primitives:\n    // https://iquilezles.org/articles/distfunctions2d/\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nconst float T = 1./10.;\nfloat sdCross(in vec2 pos) {\n    float r = mix(0.5, 0.1, 0.5 + 0.5 * sin(iTime));\n    float ext = 2.75;\n    float w = 1.;\n    vec2 b = vec2(w, ext) * 0.5;\n    vec2 shapes = vec2(\n        sdBox(pos, b.xy - r) - r,\n        sdBox(pos, b.yx - r) - r\n    );\n    vec2 minShapesWithAdditionalRadius = min(shapes - r, vec2(0.));\n    float sd = -(length(minShapesWithAdditionalRadius) - r);\n    return sd;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 aaCol = vec3(0.);\n    for (int AAx = 0; AAx < AA; AAx++) {\n        for (int AAy = 0; AAy < AA; AAy++) {\n            vec2 aa = vec2(AAx, AAy) / float(AA);\n            \n            vec2 uv = (fragCoord + aa) / iResolution.xy;\n            vec2 pos = (fragCoord + aa - iResolution.xy * 0.5) / iResolution.y * 2.;\n            \n            pos *= 1.5;\n            pos *= mat2(0.7071, -0.7071, 0.7071, 0.7071);\n            \n            float sd = sdCross(pos);\n            \n            float m = 0.5 * sd + 0.5;//step(0., sd);\n                        \n            vec3 col = vec3(1.);\n            \n            float hairLine = 1. - step(0., abs(sd) - 3./iResolution.y);\n                        \n            float line = 1. - step(0., abs(sd) - T);\n            \n            col = mix(col, vec3(0.000,0.071,0.278), line);\n            col = clamp(col, 0., 1.);\n            col = mix(col, vec3(0.000,0.384,1.000), hairLine);\n            \n            aaCol += col;\n        }\n    }\n    aaCol /= float(AA * AA);\n    \n    fragColor = vec4(aaCol, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}