{
    "Shader": {
        "info": {
            "date": "1462205298",
            "description": "A few fish and lots of optical effects (mouse enabled)",
            "flags": 0,
            "hasliked": 0,
            "id": "4dtSDs",
            "likes": 8,
            "name": "A Few Fish",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "refraction",
                "optics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 820
        },
        "renderpass": [
            {
                "code": "// \"A Few Fish\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Fbm2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Length4 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\n\nconst float pi = 3.14159;\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nvec3 fishP, qHit, sunDir, waterDisp;\nfloat dstFar, tCur, bowlRad, bowlHt, fishLen, angTail, angFin, posMth;\nbool inBowl, chkBowl;\nint idObj;\nconst int idVWall = 1, idHWall = 2, idTbl = 3, idBowl = 4, idFBdy = 11,\n  idTail = 12, idFin = 13, idEye = 14;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  vec2 p;\n  if (rd.y >= 0.) {\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - rd.y, 8.) +\n       0.35 * pow (max (dot (rd, sunDir), 0.), 6.);\n    col = mix (col, vec3 (1.), clamp (0.1 +\n       0.8 * Fbm2 (0.01 * tCur + 3. * rd.xz / max (rd.y, 0.001)) * rd.y, 0., 1.));\n  } else {\n    p = ro.xz - (ro.y + 2. * bowlRad - 1.) * rd.xz / rd.y;\n    col = 0.6 * mix (vec3 (0.4, 0.5, 0.1), vec3 (0.5, 0.6, 0.2),\n       Fbm2 (0.11 * p)) * (1. - 0.05 * Noisefv2 (5. * p));\n    col = mix (col, vec3 (0.35, 0.45, 0.65), pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nvec4 HexGrdCol (vec2 p)\n{\n  p *= 0.85;\n  p.y /= sqrt (0.75);\n  p.x += 0.5 * mod (floor (p.y), 2.);\n  p = abs ((fract (p) - 0.5));\n  return mix (vec4 (0.8, 0.8, 0.6, 0.1), vec4 (0.5, 0.5, 0.4, 0.4),\n     smoothstep (0.05, 0.1, abs (p.x + max (p.x, 1.5 * p.y) - 1.)));\n}\n\nvec3 WoodCol (vec3 p, vec3 n)\n{\n  float f;\n  p *= 4.;\n  f = dot (vec3 (Fbm2 (p.yz * vec2 (1., 0.1)),\n     Fbm2 (p.zx * vec2 (1., 0.1)), Fbm2 (p.yx * vec2 (1., 0.1))), abs (n));\n  return mix (vec3 (0.7, 0.4, 0.3), vec3 (0.4, 0.25, 0.2), f);\n}\n\nfloat WaterHt (vec3 p)\n{\n  float ht, w, wb;\n  wb = 1.414;\n  p *= 0.05;\n  ht = 0.;\n  w = wb;\n  for (int j = 0; j < 4; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    p += waterDisp;\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return 0.1 * ht;\n}\n\nvec3 WaterNf (vec3 p)\n{\n  float h;\n  const vec2 e = vec2 (0.001, 0.);\n  h = WaterHt (p);\n  return normalize (vec3 (h - WaterHt (p + e.xyy), e.x, h - WaterHt (p + e.yyx)));\n}\n\nfloat TableDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, d1, d2, br, bl, sFac;\n  sFac = 2.5;  br = 1.6 * sFac;  bl = 1.1 * sFac;\n  p.y -= - 2.2 * sFac - 0.01 * br;\n  q = p;  q.y -= - 0.55 * br;\n  d = PrCylDf (q.xzy, 0.5 * br, 0.03 * br);\n  q = p;  q.y -= - 1.4 * bl;\n  d1 = PrCylDf (q.xzy, 0.07 * br, 0.6 * bl);\n  q.y -= - 0.6 * bl;\n  d2 = max (PrCylDf (q.xzy, 0.5 * br, 0.15 * br * (1. -\n     0.7 * smoothstep (0.2 * br, 0.35 * br, length (p.xz)))), -0.05 * br - q.y);\n  d = min (d, min (d1, d2));\n  if (d < dMin) { dMin = d;  idObj = idTbl;  qHit = q; }\n  return dMin;\n}\n\nfloat BowlWlDf (vec3 p, float dMin)\n{\n  float d, db;\n  db = Length4 (vec2 (length (p.xz), p.y));\n  d = inBowl ? max (max (db - 1.03 * bowlRad, p.y - bowlHt),\n     - max (db - bowlRad, p.y - bowlHt)) : max (db - bowlRad, p.y - bowlHt);\n  if (d < dMin) { dMin = d;  qHit = p;  idObj = idBowl; }\n  return dMin;\n}\n\nfloat FishDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, wr, tr, u, dTail;\n  q = p;  q.x = abs (q.x);  q -= fishLen * vec3 (0.12, 0.1, 0.9);\n  d = PrSphDf (q, 0.05 * fishLen);\n  if (d < dMin) { dMin = d;  idObj = idEye;  qHit = q; }\n  q = p;\n  wr = q.z / fishLen;\n  if (wr > 0.5) {\n    u = (wr - 0.5) / 0.5;  tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) / 1.5, -1., 1.);  u *= u;\n    tr = 0.17 - u * (0.33 - 0.13 * u); \n  }\n  q.y *= 0.5;\n  d = PrCapsDf (q, 1.1 * tr * fishLen, fishLen);\n  q.y *= 2.;  q.z -= posMth * fishLen;\n  d = max (d, - PrCylDf (q.yzx, 0.03 * fishLen, 0.1 * fishLen));\n  if (d < dMin + 0.01 * fishLen) {\n    dMin = SmoothMin (dMin, d, 0.01 * fishLen);  idObj = idFBdy;  qHit = q;\n  }\n  q = p;  q.z -= -0.9 * fishLen;  q.y *= 0.1;\n  wr = q.z / (0.4 * fishLen);\n  if (wr > 0.5) {\n    u = (wr - 0.5) / 0.5;  tr = 0.17 - 0.05 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) / 1.5, -1., 1.);  u *= u;  tr = 0.17 - u * 0.34; \n  }\n  dTail = PrCylDf (q, 0.13 * tr * fishLen, 0.6 * fishLen);\n  d = max (dTail, 0.15 * fishLen - q.z);\n  if (d < dMin + 0.01 * fishLen) {\n    dMin = SmoothMin (dMin, d, 0.01 * fishLen);  idObj = idTail;  qHit = q;\n  }\n  q.z -= 0.15 * fishLen;\n  q.xz = Rot2D (q.xz, angTail);\n  d = max (PrCylDf (q, 0.13 * tr * fishLen, 0.6 * fishLen), q.z);\n  if (d < dMin) { dMin = d;  idObj = idTail;  qHit = q; }\n  q = p;  q.y *= 0.5;  q.z -= -0.75 * fishLen;\n  d = max (PrCylDf (q.xzy, 0.022 * fishLen, 0.11 * fishLen), dTail);\n  if (d < dMin) { dMin = d;  idObj = idTail;  qHit = 0.2 * q; }\n  q = p;  q.x = abs (q.x) - 0.18 * fishLen;  q.y *= 0.1;  q.z -= 0.4 * fishLen;\n  q.xz = Rot2D (q.xz, angFin);\n  wr = q.z / (0.2 * fishLen);\n  if (wr > 0.5) {\n    u = (wr - 0.5) / 0.5;  tr = 0.17 - 0.01 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) / 1.5, -1., 1.);  u *= u;  tr = 0.17 - u * 0.34; \n  }\n  q.z -= 0.3 * fishLen;\n  d = PrCylDf (q, 0.12 * tr * fishLen, 0.5 * fishLen);\n  if (d < dMin + 0.005 * fishLen) {\n    dMin = SmoothMin (dMin, d, 0.005 * fishLen);  idObj = idFin;  qHit = q;\n  }\n  return 0.75 * dMin;\n}\n\nfloat BowlExtDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  q = p;  q.y -= -2.72 * bowlRad + 11.2;  q.z -= 1.15 * bowlRad;\n  d = PrBoxDf (q, vec3 (2.4, 1.33, 0.01) * bowlRad);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idVWall; }\n  q = p;  q -= vec3 (0., -2. * bowlRad + 1., 1.2 * bowlRad);\n  d = max (PrCylDf (q.xzy, 2.4 * bowlRad, 0.01 * bowlRad), q.z + 0.2);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idHWall; }\n  q = p;  q.y -= - bowlHt + 5.1;\n  dMin = TableDf (q, dMin);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, s;\n  dMin = dstFar;\n  if (chkBowl) dMin = BowlWlDf (p, dMin);\n  else if (inBowl) {\n    q = p;\n    s = 2. * step (fishP.y, q.y) - 1.;\n    q.xz = Rot2D (q.xz, s * fishP.z);\n    q.xz = Rot2D (q.xz, 2. * pi *\n       (floor (5. * atan (q.z, - q.x) / (2. * pi)) + 0.5) / 5.);\n    q.x -= fishP.x;\n    q.y = abs (q.y - fishP.y) - 0.4 * bowlHt;\n    q.yz *= s;\n    dMin = FishDf (q, dMin);\n  } else dMin = BowlExtDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.2, 0.1 * d);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 FishCol ()\n{\n  vec3 col, c1, c2;\n  c1 = vec3 (0.1, 0.1, 1.);\n  c2 = vec3 (1., 0.2, 0.2);\n  qHit *= 20. / fishLen;\n  if (idObj == idEye) {\n    col = mix (vec3 (0.1, 1., 0.1), vec3 (1., 1., 0.), step (0.5, qHit.z));\n  } else if (idObj == idFBdy) {\n    col = mix (c2, c1, 0.5 * (1. + sin (4. * qHit.y)));\n    if (qHit.y > 2.) col = mix (col, c2,\n       SmoothBump (-0.5, 0.5, 0.2, abs (qHit.x)));\n    else if (qHit.y < -2.) col = mix (col, c1,\n       SmoothBump (-0.5, 0.5, 0.2, abs (qHit.x)));\n  } else if (idObj == idTail || idObj == idFin) {\n    col = mix (c2, c1, 0.5 * (1. + sin (40. * qHit.y)));\n  }\n  return col;\n}\n\nvec4 ObjCol (vec3 n)\n{\n  vec4 col;\n  if (idObj == idVWall) col = HexGrdCol (qHit.xy);\n  else if (idObj == idHWall) col = HexGrdCol (qHit.xz);\n  else if (idObj == idTbl) col = vec4 (WoodCol (qHit, n), 0.2);\n  else col = vec4 (FishCol (), 1.);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 roW, rdW, rdd, vn, vnW, colD, colR, col, qHitBowl, reflCol;\n  float dstHit, dstBowl, dstBowlW, yLim, dif, sh, frnlFac, eta;\n  int idObjT, hitBowl;\n  bool bWallHit;\n  eta = 1.33;\n  yLim = 0.999 * bowlHt;\n  inBowl = false;\n  chkBowl = true;\n  dstBowl = ObjRay (ro, rd);\n  hitBowl = -1;\n  if (dstBowl < dstFar) {\n    hitBowl = idObj;\n    qHitBowl = qHit;\n  }\n  chkBowl = false;\n  dstHit = ObjRay (ro, rd);\n  roW = ro;  rdW = rd;\n  dstBowlW = dstBowl;\n  reflCol = vec3 (1.);\n  frnlFac = 0.;\n  bWallHit = (dstBowl < dstHit && hitBowl > 0);\n  if (bWallHit) {\n    ro += dstBowl * rd;\n    chkBowl = true;\n    vn = (qHitBowl.y < yLim) ? ObjNf (ro) : WaterNf (qHitBowl);\n    vnW = vn;\n    frnlFac = (qHitBowl.y > - yLim) ? abs (dot (rd, vn)) : 0.;\n    rd = refract (rd, vn, 1. / eta);\n    ro += 0.01 * rd;\n    inBowl = true;\n    dstBowl = ObjRay (ro, rd);\n    hitBowl = -1;\n    if (dstBowl < dstFar) {\n      hitBowl = idObj;\n      qHitBowl = qHit;\n    }\n    chkBowl = false;\n    dstHit = ObjRay (ro, rd);\n    if (dstBowl < dstHit && hitBowl > 0) {\n      ro += dstBowl * rd;\n      chkBowl = true;\n      vn = (qHitBowl.y < yLim) ? ObjNf (ro) : - WaterNf (qHitBowl);\n      rdd = refract (rd, vn, eta);\n      if (length (rdd) > 0.) {\n        rd = rdd;\n        reflCol *= vec3 (0.9, 1., 0.9);\n        inBowl = false;\n      } else rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      chkBowl = false;\n      dstHit = ObjRay (ro, rd);\n    }\n  }\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    chkBowl = false;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    objCol = ObjCol (vn);\n    dif = max (dot (vn, sunDir), 0.);\n    sh = (idObj < idFBdy) ? ObjSShadow (ro, sunDir) : 1.;\n    colD = reflCol * (objCol.rgb * (0.2 + 0.8 * dif * sh +\n       objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.)));\n  } else colD = reflCol * BgCol (ro, rd);\n  colR = vec3 (0.);\n  reflCol = vec3 (1.);\n  if (bWallHit) {\n    ro = roW + dstBowlW * rdW;\n    rd = (frnlFac > 0.) ? reflect (rdW, vnW) : rdW;\n    ro += 0.01 * rd;\n    inBowl = false;\n    chkBowl = false;\n    dstHit = ObjRay (ro, rd);\n    if (dstHit < dstFar) {\n      ro += rd * dstHit;\n      idObjT = idObj;\n      vn = ObjNf (ro);\n      idObj = idObjT;\n      objCol = ObjCol (vn);\n      dif = max (dot (vn, sunDir), 0.);\n      sh = ObjSShadow (ro, sunDir);\n      colR = reflCol * (objCol.rgb * (0.2 + 0.8 * dif * sh +\n         objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.)));\n    } else colR = reflCol * BgCol (ro, rd);\n  }\n  frnlFac = (eta != 1. && frnlFac > 0.) ? 1. - pow (frnlFac, 4.) : 0.;\n  col = mix (colD, colR, smoothstep (0.98, 1., frnlFac));\n  col = pow (clamp (col, 0., 1.), vec3 (0.8));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 80.;\n  bowlRad = 5.;\n  bowlHt = 2.5;\n  fishP = vec3 (-0.6 * bowlRad, bowlHt * (-0.2 + 0.4 * sin (0.077 * 0.5 * tCur)),\n     0.5 * tCur);\n  fishLen = 0.25 * bowlRad;\n  angTail = 0.1 * pi * sin (5. * tCur);\n  angFin = pi * (0.8 + 0.1 * sin (2.5 * tCur));\n  posMth = 1.04 + 0.01 * sin (5. * tCur);\n  waterDisp = 0.1 * tCur * vec3 (1., 0., 1.);\n  el = 0.;\n  az = 0.;\n  if (mPtr.z > 0.) {\n    zmFac = 5.5;\n    el = clamp (el - 3. * mPtr.y, -1.4, 1.1);\n    az = clamp (az - 3. * mPtr.x, -1.5, 1.5);\n  } else {\n    zmFac = clamp (3. + 0.4 * tCur, 3., 7.);\n    el -= pi * (-0.15 + 0.6 * SmoothBump (0.25, 0.75, 0.25,\n       mod (0.071 * tCur + 0.4 * pi, 2. * pi) / (2. * pi)));\n    az += 0.5 * pi * (1. - 0.5 * abs (el)) * sin (0.21 * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * vec3 (0., 0., -40.);\n  sunDir = vuMat * normalize (vec3 (-0.2, 0.2, -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Length4 (vec2 p)\n{\n  p *= p;\n  p *= p;\n  return pow (p.x + p.y, 1./4.);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}