{
    "Shader": {
        "info": {
            "date": "1621872034",
            "description": "2 hour coding\nhttps://www.youtube.com/watch?v=LlR4BXY3cWg",
            "flags": 0,
            "hasliked": 0,
            "id": "stfGDn",
            "likes": 6,
            "name": "Jewel room",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 460
        },
        "renderpass": [
            {
                "code": "//Copyright (c) 2021 Butadiene\n//Released under the MIT license\n//https://opensource.org/licenses/mit-license.php\n\n#define T iTime\n\nconst float PI = 3.141592;\n\nmat2 rot(float r){\n  return mat2(cos(r),sin(r),-sin(r),cos(r));\n}\n\nfloat box2d(vec2 p,vec2 s){\n  vec2 q = abs(p);\n  vec2 m = max(s-q,0.);\n  return length(max(q-s,0.))-min(m.x,m.y);\n}\n\nfloat crobox(vec3 p,float sca){\n  float dx = box2d(p.yz,vec2(sca));\n  float dy = box2d(p.xz,vec2(sca));\n  float dz = box2d(p.xy,vec2(sca));\n  return min(min(dx,dy),dz);\n}\n\nfloat box(vec3 p,vec3 s){\n  vec3 q = abs(p);\n  vec3 m = max(s-q,0.);\n  return length(max(q-s,0.))-min(m.z,min(m.x,m.y));\n}\n\nfloat ease(float t,float k){\n  return -exp(-1.0*mod(t,k))+floor(t/k);\n}\n\nvec4 nanika(vec3 p){\n  float kt =T;/// 2.*ease(time*2.,3.);\n  p.xz *= rot(kt);\n  p.yz *= rot(kt);\n  vec3 acol = vec3(0.);\n  float sct = 0.23;\n  vec3 col1 = vec3(0.6,0.6,0.2);\n  vec3 col2 = vec3(0.2,0.6,0.6);\n  vec3 col3 = vec3(0.6,0.6,0.2);\n  for(int i = 0;i<8;i++){\n    p = abs(p)-0.2;\n    p.xy *= rot(sct);\n    p.xz *= rot(sct);\n    p.yz *= rot(sct);\n    if(p.x<p.y&&p.x<p.z){acol += col1;}\n    else if(p.y<p.z){acol += col2;}\n    else{acol += col3;}\n  }\n  \n  float d = length(p)-0.2;\n  d = crobox(p,0.05);\n  vec3 col =1.*acol*exp(-3.0*d);\n  return vec4(col,d);\n}\n\nvec4 yuka(vec3 p,float t){\n  p.y -= 0.;\n  p.z += T*10.;\n  float k = 1.5;\n  float sc = k*40.;\n  float rsc = 0.2;\n  \n  p.y = -abs(p.y);\n  \n  float xzmod = 80.0;\n  p.xz = mod(p.xz,xzmod)-0.5*xzmod;\n  vec3 acol = vec3(0);\n  for(int i = 0;i<7;i++){\n    p.xz = abs(p.xz)-sc;\n    sc *= 0.5;\n    p.xy *= rot(rsc);\n    p.zy *= rot(rsc);\n    p.xz *= rot(0.3);\n    if(p.x<p.z){ acol += vec3(0.2,0.6,0.8);}\n    else{acol += vec3(0.6,0.2,0.5); }\n  }\n  \n\n  float size = k*0.5-0.1;\n  float d = box(p,vec3(size,10.,size));\n  vec3 col = vec3(0);\n  return vec4(2.2*acol*exp(-1.0*d)*exp(-0.08*t),d);\n}\n\nvec4 dist(vec3 p,float totalt){\n  float k = 0.6;\n  //p = mod(p,k)-0.5*k;\n  float scy = 1.0;\n  vec4 yukad = yuka(p*scy,totalt)/scy;\n  float scn = 0.6;\n  vec4 nanikad = nanika(p*scn);\n  float d = min(nanikad.w/scn,yukad.w);\n  vec3 col = nanikad.xyz;\n  col += yukad.xyz;\n  return vec4(col,d);\n}\n\nvec3 gn(vec3 p){\n  vec2 e = vec2(0.001,0.);\n  return normalize(vec3(\n    dist(p+e.xyy,1.).w-dist(p-e.xyy,1.).w,\n    dist(p+e.yxy,1.).w-dist(p-e.yxy,1.).w,\n    dist(p+e.yyx,1.).w-dist(p-e.yyx,1.).w\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){vec2 r=iResolution.xy,p=(fragCoord.xy*2.-r)/min(r.x,r.y);\nvec2 uv = gl_FragCoord.xy/r;\n\nfloat ra = 14.0;\nfloat kt = T*0.3;\nvec3 ro = vec3(ra*cos(kt),6.,ra*sin(kt));\nvec3 ta = vec3(0);\n\nvec3 cdir = normalize(ta-ro);\nvec3 side = cross(cdir,vec3(0,1,0));\nvec3 up = cross(side,cdir);\nvec3 rd = normalize(side*p.x+cdir*0.8+up*p.y);\n\nfloat d,t= 0.;\nfloat es = 0.0001;\nvec3 ac = vec3(0.);\nfor(int i = 0;i<76;i++){\n  vec4 rsd = dist(ro+rd*t,t);\n  d = rsd.w;\n  t += d;\n  ac += rsd.xyz;\n  if(d<es)break;\n}\n\nvec3 col = vec3(0);\ncol = ac*0.01;\n\nif(yuka(ro+rd*t,1.).w<es){\n  vec3 sro =ro;\n  vec3 srd =rd;\n  vec3 sp = ro+rd*t;\n  vec3 normal = gn(sp);\n  rd = reflect(rd,normal);\n  ro = sp;\n  t = 0.01;\n  ac = vec3(0.);\n  for(int i = 0;i<36;i++){\n    vec4 rsd = dist(ro+rd*t,length(rd*t+sp));\n    d = rsd.w;\n    t += d;\n    \n    ac += rsd.xyz;\n    if(d<es)break;\n  }\n  col += 0.01*ac;\n}\n\n\n\nfloat et = 0.1/abs(uv.y*4.-ease(uv.x*16.,4.));\ncol = 1.2*pow(col,vec3(1.2));\nfragColor=vec4(col,1);}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}