{
    "Shader": {
        "info": {
            "date": "1598719315",
            "description": "Basic Noise",
            "flags": 0,
            "hasliked": 0,
            "id": "wljfWz",
            "likes": 23,
            "name": "Basic Warped 2D Noise KurganCPC",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "kurganpsp",
            "viewed": 615
        },
        "renderpass": [
            {
                "code": "/*\tStandard Warped Noise\n\t---------------------\n\n\tLoosely based on the original by Shadertoy user \"jackdavenport.\"\n\thttps://www.shadertoy.com/view/Mt2SzR\n\n\tIn keeping with the concept of the original, this was also coded straight off the top of my head.\n\n*/\n\n// Virtually the same as your original function, just in more compact (and possibly less reliable) form.\nfloat smoothNoise(vec2 p) {\n\t\n\tvec2 f = fract(p); p-=f; f *= f*(3.-f-f); \n    \n    return dot(mat2(fract(sin(vec4(0, 1, 27, 28) + p.x+p.y*27.) * 1e5))*vec2(1.-f.y,f.y), vec2(1.-f.x, f.x));\n\n}\n\n// Also the same as the original, but with one less layer.\nfloat fractalNoise(vec2 p) {\n    \n    return smoothNoise(p)*0.5333 + smoothNoise(p*2.)*0.2667 + smoothNoise(p*4.)*0.1333 + smoothNoise(p*8.)*0.0667;\n    \n    // Similar version with fewer layers. The highlighting sample distance would need to be tweaked.\n    //return smoothNoise(p)*0.57 + smoothNoise(p*2.45)*0.28 + smoothNoise(p*6.)*0.15;\n    \n    // Even fewer layers, but the sample distance would need to be tweaked.\n    //return smoothNoise(p)*0.65 + smoothNoise(p*4.)*0.35;\n    \n}\n\n// Standard noise warping. Call the noise function, then feed a variation of the result\n// into itself. Rinse and repeat, etc. Completely made up on the spot, but keeping your \n// original concept in mind, which involved combining noise layers travelling in opposing\n// directions.\nfloat warpedNoise(vec2 p) {\n    \n    vec2 m = vec2(iTime, -iTime)*.5;//vec2(sin(iTime*0.5), cos(iTime*0.5));\n    float x = fractalNoise(p + m);\n    float y = fractalNoise(p + m.yx + x);\n    float z = fractalNoise(p - m - x + y);\n    return fractalNoise(p + vec2(x, y) + vec2(y, z) + vec2(z, x) + length(vec3(x, y, z))*0.25);\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Screen coordinates. Using division by a scalar, namely \"iResolution.y,\" for aspect correctness.\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    // Take two noise function samples near one another.\n    float n = warpedNoise(uv * 6.);\n    float n2 = warpedNoise(uv * 6. + 0.02);\n    \n    // Highlighting - Effective, but not a substitute for bump mapping.\n    //\n    // Use a sample distance variation to produce some cheap and nasty highlighting. The process \n    // is vaguely related to directional derivative lighting, which in turn is mildly connected to \n    // Calculus from First Principles.\n    float bump = max(n2 - n, 0.)/.02*.7071;\n    float bump2 = max(n - n2, 0.)/.02*.7071;\n    \n    // Ramping the bump values up.\n    bump = bump*bump*.5 + pow(bump, 4.)*.5;\n    bump2 = bump2*bump2*.5 + pow(bump2, 4.)*.5;\n    \n    // Produce a color based on the original noise function, then add the highlights.\n\n    // Liquid glass, wax or ice, with sun glow?\n    //vec3 col = vec3(n*n)*(vec3(.25, .5, 1.)*bump*.2 + vec3(1., .4, .2)*bump2*.2 + .5);\n    // Fake jade.\n    //vec3 col = vec3(n*n*0.7, n, n*n*0.4)*n*n*(vec3(0.25, 0.5, 1.)*bump*.2 + vec3(1)*bump2*.2 + .75);\n    // Cheap fire palette.\n    //vec3 col = pow(vec3(1.5, 1, 1)*n, vec3(2, 5, 24))*.8 + vec3(0.25, 0.5, 1.)*(bump + bump2)*.05;\n    // Not sure. :)\n    vec3 col = n*n*(vec3(1, .7, .6)*vec3(bump, (bump + bump2)*.4, bump2)*.2 + .5);\n    // etc.\n        \n\tfragColor = vec4(sqrt(max(col, 0.)), 1.); // Rough gamma correction.\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}