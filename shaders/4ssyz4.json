{
    "Shader": {
        "info": {
            "date": "1487786770",
            "description": "fun with circles...",
            "flags": 32,
            "hasliked": 0,
            "id": "4ssyz4",
            "likes": 34,
            "name": "circles and planes",
            "published": 3,
            "tags": [
                "circle",
                "halftone",
                "crosshatch",
                "layers"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 1437
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// halftone circles experiment\n\n#define Res (iResolution.xy)\n#define Res1 (iChannelResolution[1].xy)\n#define PI 3.14159265358979\n\nvec4 getCol(vec2 pos)\n{\n    return texture(iChannel0,pos/iResolution.xy);\n}\n\nvec4 getRand(vec2 pos)\n{\n    return texture(iChannel1,pos/Res1);\n}\n\nfloat getVal(vec2 pos)\n{\n    return dot(getCol(pos).xyz,vec3(.3333));\n}\n\nfloat quantize(float v, int num)\n{\n    return floor(v*float(num)+.5)/float(num);\n}\n\nfloat tri01(float x)\n{\n    float m=mod(x+1.,2.);\n    return (1.-m)*2.*step(1.,m)+m;\n}\n\nfloat fillFunc(float x, float f, float smth)\n{\n\treturn clamp((f-tri01(x))/smth+.33,0.,1.);\n}\n\nfloat htPattern(vec2 pos, int lnum)\n{\n    //int AngNum = int(pow(iMouse.x/Res.x,2.)*64.);\n    float p;\n    float sc = 1.;\n    float b0=getVal(pos);\n    float bq=quantize(b0,lnum);\n    float b=bq*float(lnum);\n    float db=b0*float(lnum)-b;\n    float d=1.-.5+iMouse.y/Res.y;\n    d=1.;\n    if(iMouse.y==0.) d=1.2;\n    d*=1.*(1.-(b+.3*float(lnum))/1.3/float(lnum));\n    float ang=-(float(lnum-1)-b-.5+.0)/float(lnum)/**3.121*/*PI;\n    vec2 dir = vec2(cos(ang),sin(ang));\n    vec2 dir2 = vec2(cos(ang*3.),sin(ang*3.));\n    \n    float s;\n    \n    float l=length(pos+getRand(pos).xy*0.-Res.xy*.5-dir2*Res.y*.4)*d;\n\n    // lines equally thick - just get closer for darker regions\n    p = 1.-1.7*exp(-cos(l)*cos(l)*1./d/d);\n\n    // \n\t//p = fillFunc(l/1.6, bq*.5+.5, .4);\n    \n    return p;\n}\n                \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #define SampNum 24\n    #define Quant (3+int(sqrt(iResolution.x/1920.)*10.))\n    #define Spread 7.\n\tvec2 pos=fragCoord;\n\tfloat b = quantize(getVal(pos),Quant);\n    float ao=0.;\n    float ao2=0.;\n    float spread = Spread*sqrt(Res.x/600.);\n    for(int i=0;i<SampNum;i++)\n    {\n        vec2 delta = texture(iChannel1,(pos+vec2(0,123*i))/Res1).xy*2.-1.;\n\t    // lets spread slightly off axis\n    \t// so we get the impression of a diffuse lightsource from upper left\n        // and lets take 2 diffuse light sources\n        vec2 delta1=delta+vec2(-.5,.3)*.7;    // from upper right\n        vec2 delta2=delta+vec2(.7,.5)*.7;     // from upper left\n        \n        float b1 = quantize(getVal(pos+spread*delta1),Quant);\n        float b2 = quantize(getVal(pos+spread*delta2),Quant);\n        if(b1>b) ao+=(1.-length(delta1))+1.;\n        if(b2>b) ao2+=(1.-length(delta2))+1.;\n        //if(b2>b) ao+=1.;\n    }\n    ao/=float(SampNum);\n    ao2/=float(SampNum);\n\n    vec3 col1=vec3(1.5,1., .5);\n    vec3 col2=vec3( .5,1.,1.5);\n    \n    float rand=getRand(pos*vec2(1.3,.15)).x-.5+getRand(pos*vec2(.15,1.3)).x-.5;\n    rand=0.;\n    \n\tfragColor = vec4(0)+(\n        +.45*vec4(col1,1)*(1.-.4*ao)\n        +.55*vec4(col2,1)*(1.-.4*ao2)\n                        )*(.8+.3*b)*(.6+.1*rand+.4*htPattern(pos,Quant));\n\t//fragColor = vec4(0)+(1.-.5*ao)*(.3+.7*htPattern(pos,Quant));\n\n    vec2 c=(fragCoord.xy-.5*Res)/Res.x;\n    float vign=clamp(1.2-1.*dot(c,c),0.,1.);\n    fragColor*=vign;\n\t//fragColor = texture(iChannel0,fragCoord/Res);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// smoothing in X\n\n#define Res  iResolution.xy\n#define Res0 iChannelResolution[0].xy\n\nvec2 TC(vec2 c)\n{\n    //all image visible on screen\n    float sc=min(Res.x/Res0.x,Res.y/Res0.y)*.95;\n    \n    //one axis of image fully visible on screen\n    //float sc=max(Res.x/Res0.x,Res.y/Res0.y);\n    \n    //compromise of the 2 above cases\n    //float sc=mix(Res.x/Res0.x,Res.y/Res0.y,.5);\n    \n    return (c-Res*.5)/sc+Res0*.5;\n}\n\nvec4 getVal(vec2 c) {\n    vec2 uv=TC(c)/Res0.xy;\n    if(uv.x<.0 || uv.y<.0 || uv.x>1. || uv.y>1.) return vec4(.5);\n    return texture(iChannel0,uv); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c=vec4(0);\n    float n=0.;\n#define W 2\n    for(int i=-W;i<=W;i++)\n    {\n        float fact=1.-.5*float(i)/float(W+1);\n        c+=fact*getVal(fragCoord+vec2(float(i),0)*Res.x/Res0.x);\n        n+=fact;\n    }\n    fragColor = c/n;\n    // no vid tex in next pass so put its size on pixel 0,0\n    if(floor(fragCoord.x)==0. && floor(fragCoord.y)==0.) fragColor.xy=Res0;\n    //fragColor = getVal(fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// smoothing in Y\n\n#define Res  iResolution.xy\n\nvec4 getVal(vec2 c) {\n    vec2 uv=c/Res.xy;\n    if(uv.x<.0 || uv.y<.0 || uv.x>1. || uv.y>1.) return vec4(.5);\n    return texture(iChannel0,uv); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // no vid tex here so get its size on pixel 0,0 from previous pass\n    vec2 Res0 = getVal(vec2(0.5,0.5)).xy;\n    vec4 c=vec4(0);\n    float n=0.;\n#define W 2\n    for(int i=-W;i<=W;i++)\n    {\n        float fact=1.-.5*float(i)/float(W+1);\n        c+=fact*getVal(fragCoord+vec2(0,float(i))*Res.x/Res0.x);\n        n+=fact;\n    }\n    fragColor = c/n;\n    //fragColor = getVal(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}