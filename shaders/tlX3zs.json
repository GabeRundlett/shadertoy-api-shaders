{
    "Shader": {
        "info": {
            "date": "1557304132",
            "description": "Its amazing how many different systems produce the same patterns...\nI made this after hours of experimenting. not sure what it is. It involves advection along gradients and reaction diffusion",
            "flags": 32,
            "hasliked": 0,
            "id": "tlX3zs",
            "likes": 122,
            "name": "Lattice Reaction",
            "published": 3,
            "tags": [
                "diffusion",
                "advection",
                "reaction"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 3433
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define D(U) texture(iChannel0, (U)/R)\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n\t   Q = 3.*D(U);\n    float d = 0.1;\n    float a = -0.1, si = sin(a), co = cos(a);\n    mat2 m = mat2(co,-si,si,co);\n    vec2 \n        n = m*vec2(0,1),\n        e = m*vec2(1,0),\n        s = m*vec2(0,-1),\n        w = m*vec2(-1,0);\n    for (float i = 0.; i < 15.; i++) {\n    \tQ += d*D(U+i*n)*exp(-.2*i);\n    \tQ += d*D(U-i*e)*exp(-.2*i);\n    \tQ += d*D(U+i*s)*exp(-.2*i);\n    \tQ += d*D(U-i*w)*exp(-.2*i);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texture(iChannel0, (U)/R)\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    for (int i = 0; i < 5; i++) {\n        vec4 a = A(U);\n        U -= a.x*a.zw;\n    }\n    Q = A(U);\n    vec4 \n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0)),\n        a = A(U+vec2(1,1)),\n        b = A(U+vec2(1,-1)),\n        c = A(U-vec2(1,1)),\n        d = A(U-vec2(1,-1)),\n        dQ = 0.125*(n+e+s+w+a+b+c+d)-Q;\n    Q = A(U);\n    Q += vec4(0.5,1,1,1)*dQ;\n    float x = .1*Q.y*Q.x*(1.-Q.x);\n    Q.x = Q.x+x-0.00+(e.z*e.x-w.z*w.x+n.w*n.x-s.w*s.x);\n    Q.y = Q.y-x+0.04*Q.y*(1.-Q.y);\n    Q.xy = max(Q.xy,0.);\n    Q.zw = Q.zw - .025*vec2(e.y-w.y,n.y-s.y);\n    if (U.x < 1. || U.y < 1. || R.x-U.x<1. || R.y-U.y<1.)Q.x*=0.;\n    if (iMouse.z>0.&&length(iMouse.xy-U)<40.)Q*=0.;\n    if (iFrame < 1) Q = vec4(exp(-.1*length(U-0.5*R)),1,0,0);\n  \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texture(iChannel0, (U)/R)\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    for (int i = 0; i < 5; i++) {\n        vec4 a = A(U);\n        U -= a.x*a.zw;\n    }\n    Q = A(U);\n    vec4 \n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0)),\n        a = A(U+vec2(1,1)),\n        b = A(U+vec2(1,-1)),\n        c = A(U-vec2(1,1)),\n        d = A(U-vec2(1,-1)),\n        dQ = 0.125*(n+e+s+w+a+b+c+d)-Q;\n    Q = A(U);\n    Q += vec4(0.5,1,1,1)*dQ;\n    float x = .1*Q.y*Q.x*(1.-Q.x);\n    Q.x = Q.x+x-0.00+(e.z*e.x-w.z*w.x+n.w*n.x-s.w*s.x);\n    Q.y = Q.y-x+0.04*Q.y*(1.-Q.y);\n    Q.xy = max(Q.xy,0.);\n    Q.zw = Q.zw - .025*vec2(e.y-w.y,n.y-s.y);\n    if (U.x < 1. || U.y < 1. || R.x-U.x<1. || R.y-U.y<1.)Q.x*=0.;\n    if (iMouse.z>0.&&length(iMouse.xy-U)<40.)Q*=0.;\n    if (iFrame < 1) Q = vec4(exp(-.1*length(U-0.5*R)),1,0,0);\n  \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texture(iChannel0, (U)/R)\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    for (int i = 0; i < 5; i++) {\n        vec4 a = A(U);\n        U -= a.x*a.zw;\n    }\n    Q = A(U);\n    vec4 \n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0)),\n        a = A(U+vec2(1,1)),\n        b = A(U+vec2(1,-1)),\n        c = A(U-vec2(1,1)),\n        d = A(U-vec2(1,-1)),\n        dQ = 0.125*(n+e+s+w+a+b+c+d)-Q;\n    Q = A(U);\n    Q += vec4(0.5,1,1,1)*dQ;\n    float x = .1*Q.y*Q.x*(1.-Q.x);\n    Q.x = Q.x+x-0.00+(e.z*e.x-w.z*w.x+n.w*n.x-s.w*s.x);\n    Q.y = Q.y-x+0.04*Q.y*(1.-Q.y);\n    Q.xy = max(Q.xy,0.);\n    Q.zw = Q.zw - .025*vec2(e.y-w.y,n.y-s.y);\n    if (U.x < 1. || U.y < 1. || R.x-U.x<1. || R.y-U.y<1.)Q.x*=0.;\n    if (iMouse.z>0.&&length(iMouse.xy-U)<40.)Q*=0.;\n    if (iFrame < 1) Q = vec4(exp(-.1*length(U-0.5*R)),1,0,0);\n  \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R iResolution.xy\nfloat A (vec2 U) {\n\treturn -10.*texture(iChannel0, U/R).x;\n}\nfloat ln (vec3 p, vec3 a, vec3 b) {return length(p-a-(b-a)*dot(p-a,b-a)/dot(b-a,b-a));}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n   vec3 p = vec3(.5*R,-R.x);\n   vec3 d = normalize(p-vec3(U,0));\n   vec3 li = vec3(1.3*R,.3*R.x);\n   p += d*dot(-p,vec3(0,0,1))/dot(d,vec3(0,0,1));\n   for (int i = 0; i < 10; i++) {\n   \tp += .6*d*(p.z-A(p.xy));\n   }\n   vec3 q = li;\n   vec3 c = normalize(p-li);\n   for (int i = 0; i < 40; i++) {\n    q += .6*c*(q.z-A(q.xy));\n   }\n    U = p.xy;\n    float \n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0));\n   float a = A(U);\n   vec3 g = normalize(vec3(e-w,n-s,-1));\n   vec3 r = reflect(d,g);\n   Q = (0.6+0.4*sin((.2*iTime)+(a)*(1.+.1*vec4(1,2,3,4))));\n    float o = ln( li, p, p+r );\n    float len = length(q-p);\n    float h = 0.5+0.5*dot(normalize(p-li),g);\n   Q *= h*(exp(-.04*o)*6.+0.3*exp(-.001*o))*(exp(-.3*len));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}