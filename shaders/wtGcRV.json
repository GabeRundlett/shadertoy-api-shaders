{
    "Shader": {
        "info": {
            "date": "1611330958",
            "description": "effects of vertigo and psychedelic. ",
            "flags": 0,
            "hasliked": 0,
            "id": "wtGcRV",
            "likes": 5,
            "name": "high on vertigo",
            "published": 3,
            "tags": [
                "noise",
                "mix",
                "time",
                "color",
                "random",
                "rotate",
                "pi",
                "psychedelic",
                "generative",
                "code",
                "smoothstep",
                "scale",
                "step",
                "offset",
                "creative",
                "freq"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n\nfloat random (in float x) {\n    return fract(sin(x)*1e4);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    \n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    // vec2 u = f*f*(3.0-2.0*f);\n    vec2 u = f*f*(3.0-15.*abs(tan(iTime*2.))*f);\n    u += smoothstep(0.,0.5,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat randomSerie(float x, float freq, float t) {\n    return step(.8,random( floor(x*freq)-floor(t) ));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 st = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.y, iResolution.x);    vec3 color = vec3(1.0);\n        // move space from the center to the vec2(0.0)\n    st -= vec2(random(0.5));\n    // rotate the space\n    st = rotate2d( sin(cos(iTime))*PI*(abs(cos(iTime))/1e2+1.)) * st/0.8;\n        st = scale( vec2(sin(iTime)+1.0) ) * st/5.;\n    // move it back to the original place\n    st += vec2(random(0.5));\n    \n    // Scale the coordinate system to see\n    // some noise in action\n    vec2 pos = vec2(st*10.0*smoothstep(0.,0.5,abs(sin(iTime))));\n    float freq = random(1.);\n    float t = random(10.);\n   float offset = 0.0005+random(0.5);\n        // Use the noise function\n\nfloat n = noise(pos);\n    color = vec3(randomSerie(st.x*n*1e1, freq*200., n*t+offset),\n                 randomSerie(atan(st.x,st.y), freq*100., n/t),\n                 randomSerie(tan(st.y), freq*1000.*cos(iTime), t-offset));\n    color/= vec3(n);\n    color*=vec3(n)*1e2;\n    \n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}