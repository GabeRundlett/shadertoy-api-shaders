{
    "Shader": {
        "info": {
            "date": "1706005517",
            "description": "A simple implementation of the effect over a fast moving environment of popcorn shaped objects, implemented for Genuary 2024 #3.",
            "flags": 32,
            "hasliked": 0,
            "id": "4cSXRR",
            "likes": 1,
            "name": "Popcorn Droste",
            "published": 3,
            "tags": [
                "droste"
            ],
            "usePreview": 0,
            "username": "crocidb",
            "viewed": 163
        },
        "renderpass": [
            {
                "code": "/*\n * Genuary 2024 #3\n *\n * A simple implementation of the effect over a fast moving environment of popcorn shaped objects.\n *\n */\n\nconst vec3 colors[4] = vec3[](\n    vec3(0.482,0.827,0.917),\n    vec3(0.631,0.933,0.741),\n    vec3(0.964,0.968,0.768),\n    vec3(0.964,0.839,0.839));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.xy) - .5;\n\n    vec3 col;\n\n    vec2 iuv = uv;\n\n    for (int i=0; i < 24; i++)\n    {\n        float v = 0.5 / (float(i+1) / 1.0);\n        if (abs(uv.x) <= v && abs(uv.y) <= v)\n        {\n            iuv = uv*float(i+1);\n            col = texture(iChannel0, iuv + .5).xyz;\n            col *= colors[(i+int(iTime * 1.2))%4];\n\n            float c = pow(1.0 - clamp(0.0, 1.0, (float(i)/24.0)), 5.0);\n            col = mix(vec3(0.0, 0.0, 0.0), col, c);\n        }\n    }\n\n    if (abs(uv.x) <= .003 && abs(uv.y) <= .42)\n    {\n        col = colors[(int(iTime * 1.2))%4];\n    }\n\n\n    col.xyz = pow(col.xyz, vec3(0.735));\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_STEPS\t\t\t200\n#define MAX_DIST\t\t\t20.0\n#define SURFACE_DIST\t\t0.001\n\nfloat sdfSphere(vec3 p, float s){ return length(p)-s; }\n\nvec4 map(vec3 p)\n{\n    vec3 sp = vec3(0.5,0.5,0.5) + ((texture(iChannel0, round(p.yz * 2.0) * .1)).xyz-.5) * .2;\n    float s = sdfSphere(mod(abs(p),vec3(1.0))-sp,0.07);\n    s-=+ (texture(iChannel0, (p.xy + iTime * .1) * 0.2).r) * .03;\n\n    return vec4(s, p);\n}\n\nvec3 normal(vec3 p)\n{\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for(int i=(min(iFrame,0)); i<4; i++)\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+0.0001*e).x;\n    }\n    return normalize(n);\n}\n\nvec4 march(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    vec3 p;\n    vec4 obj;\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        p = ro + t * rd;\n        obj = map(p);\n        if (abs(obj.x) < SURFACE_DIST || abs(t) > MAX_DIST) break;\n        t += obj.x;\n    }\n    obj.x = t;\n    return obj;\n}\n\nvec3 render(vec4 obj, vec2 uv, vec3 ro, vec3 rd)\n{\n    vec3 background = vec3(0.4);\n    vec3 col = background;\n\n    if (obj.x < MAX_DIST)\n    {\n        col = vec3(1.0);\n\n        vec3 n = normal(obj.yzw);\n        vec3 light_dir = normalize(ro - obj.yzw);\n        vec3 refd = reflect(rd, n);\n        float diff = max(0.0, dot(light_dir, n));\n        col += diff * background;\n\n        col = mix(background, col, pow(1.0-min(length(obj.yzw - ro),MAX_DIST)/MAX_DIST,2.6));\n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord - .5 * iResolution.xy) / iResolution.y);\n\n    vec3 col;\n\n    float angularspeed = iTime * 1.5 + sin(iTime * 1.5) * 1.4;\n    float cas = cos(angularspeed);\n    float sas = sin(angularspeed);\n    uv = mat2(vec2(cas, -sas), vec2(sas, cas)) * (uv);\n\n    vec2 uv2 = (fragCoord / iResolution.xy) - .5;\n    if (abs(uv2.x) > .25 || abs(uv2.y) > .25)\n    {\n        vec3 ro = vec3(0.0,cos(iTime*10.2 + sin(iTime * 6.2) * 0.5)*.3,-sin(iTime*.5) * 8.0);\n        vec3 rd = normalize(vec3(uv.x * 1.3, uv.y * 1.3, 1.0));\n        vec4 obj = march(ro, rd);\n        col = render(obj, uv, ro, rd);\n        col *=.2;\n        col += texture(iChannel1, (fragCoord / iResolution.xy)).xyz * .8;\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}