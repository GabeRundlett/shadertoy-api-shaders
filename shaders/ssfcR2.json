{
    "Shader": {
        "info": {
            "date": "1642366819",
            "description": "space, volume, repeat",
            "flags": 0,
            "hasliked": 0,
            "id": "ssfcR2",
            "likes": 18,
            "name": "kifings tubes with a twist",
            "published": 3,
            "tags": [
                "yes"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 399
        },
        "renderpass": [
            {
                "code": "// are we arrived yet?\n// kifings tubes with a twist\n// leon denise 2022 01 16\n\n// smooth union by Inigo Quilez\n// https://iquilezles.org/articles/distfunctions\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n    \n// rotation matrix\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n// repetition domain\n#define repeat(p,r) (mod(p+r/2.,r)-r/2.)\n\n// geometry\nfloat map(vec3 p)\n{\n    vec3 pp = p;\n    float dist = 100.;\n    p.z += iTime * .1; // translate\n    float cell = .7; // size of repetition\n    float pz = floor(p.z/cell); // index of cell in line\n    p.z = repeat(p.z, cell); // repeat space z\n    p.z *= mix(-1., 1., step(0.5, mod(p.z, 2.))); // mirror z per cell in line\n    float d = length(p); // distance from origin\n    float t = iTime * .1; // time rotation\n    const float count = 6.; // number of shapes\n    float a = 1.; // amplitude of falloff\n    for (float i = 0.; i < count; ++i) { // kifing\n        p.yz *= rot(t); // twist\n        p.yx *= rot(t); // twist\n        p = abs(p)-(.05+d*.2)*a; // fold space\n        dist = smin(dist, length(p.xz)-(.01+d*.1)*a, (.01+d*.8)*a); // smoothly add tube\n        a /= 2.; // falloff curve\n    }\n    return abs(dist)-.0001; // shell volume\n}\n\nvoid mainImage( out vec4 color, in vec2 coordinate )\n{\n    // coodinates\n    vec2 pixel = (coordinate - iResolution.xy / 2.) / iResolution.y;\n    vec3 eye = vec3(0,0,-1.);\n    vec3 ray = normalize(vec3(pixel, 1.5));\n    vec3 pos = eye + ray * .5; // start ahead, carve volume\n    \n    // raymarch\n    const float count = 30.;\n    float i = 0.;\n    for (i = count; i > 0.; --i) {\n        float dist = map(pos);\n        if (dist < .0001) break;\n        pos += ray * dist;\n    }\n    \n    // coloring\n    float shade = i/count;\n    // Inigo Quilez color palette (https://iquilezles.org/articles/palettes)\n    vec3 tint = .9 + .1 * cos(vec3(.0, .3, .6) * 6.283 + shade * 6. + pos.z * 18. + 2.);\n    color = vec4(tint * shade,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}