{
    "Shader": {
        "info": {
            "date": "1578414428",
            "description": "Shader",
            "flags": 0,
            "hasliked": 0,
            "id": "WlV3zW",
            "likes": 0,
            "name": "Shader1.1.2",
            "published": 3,
            "tags": [
                "shader"
            ],
            "usePreview": 0,
            "username": "Ditya_M",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\nfloat capDist(vec3  p,vec3  a,vec3  b,float r){\nvec3 ab = b-a;\nvec3 ap = p-a;\nfloat t = dot(ab,ap)/dot(ab,ab);\nt = clamp(t,0.,1.);\nvec3 c = a + t* ab;\nreturn length(p-c) -r;\n}\nfloat torusDist(vec3 p ,vec3 o,vec2 r){\nvec3 c = p-o;\nvec2 x = vec2((length(c.xz)- r.x),c.y);\n   return length(x) -r.y;\n}\nfloat getDist(vec3 p){\nvec4 sphere = vec4(0,0.5,1.5,0.5);\n vec3 plane = vec3(0,0,0);\n    float ds = length(p-sphere.xyz) - sphere.w;\n    float td = torusDist(p,vec3(0,0.5,1.5),vec2(0.8,0.1));\n    float dp = p.y - plane.y;\n   return min(ds, min(dp,td));\n    \n    \n}\nfloat rayMarching(vec3 ro,vec3 rd){\n    float dO= 0.0;\n    for(int i = 0;i<MAX_STEPS;i++){\n        vec3 p = ro + dO*rd;\n        float ds = getDist(p);\n        dO += ds;\n        if(dO>MAX_DIST || ds < SURF_DIST){\n            break;\n        }\n    }\n    return dO;\n}\nvec3 getnormal(vec3 p){\n    float d = getDist(p);\n    vec2 e = vec2(0.01,0.0);\n    vec3 n = d - vec3( getDist(p- e.xyy), \n                       getDist(p- e.yxy),\n                       getDist(p- e.yxx));\n    return normalize(n);\n}\nfloat getLight(vec3 p){\n    vec3 lightO = vec3(0,4,2);\n    lightO.xz += vec2(cos(iTime),sin(iTime))*2.0;\n    vec3 n = getnormal(p);\n    vec3 ray =  normalize(lightO-p);\n    float light = clamp(dot(ray,n),0.0,1.0);\n    float d = rayMarching(p +n*SURF_DIST*6.0,ray);\n    if(d < length(lightO-p)) light *= 0.1;\n    return light;\n}\n  void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    vec3 rayO = vec3(0.0,1.5,-2.0);\n    vec3 rayDir = vec3(uv.x,uv.y-0.2,1);\n    float d = rayMarching(rayO,rayDir);\n    vec3 p = rayO + rayDir*d;\n    d /= 3.0;\n    float light = getLight(p);\n      vec3 col = vec3(0.8,0.8,0.9);\n      if(light < 0.) {\n      col = vec3(0.0,0.2,0.9);\n       light = 1.0;\n  }\n     col *= light;\n     fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}