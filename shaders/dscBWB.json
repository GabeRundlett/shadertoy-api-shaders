{
    "Shader": {
        "info": {
            "date": "1697579195",
            "description": "Mandelbrot",
            "flags": 0,
            "hasliked": 0,
            "id": "dscBWB",
            "likes": 2,
            "name": "Mandelbrot___",
            "published": 3,
            "tags": [
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "danzabarr",
            "viewed": 131
        },
        "renderpass": [
            {
                "code": "\nconst float ITERATIONS = 250.0;\n\n\n// Convert a vec3 from hsv to rgb colour space\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nfloat mandelbrot(float r, float i)\n{\n    float zr = 0.0;\n    float zi = 0.0;\n    float n = 0.0;\n    while(zr * zr + zi * zi <= 4.0 && n < ITERATIONS)\n    {\n\n        float temp = zr * zr - zi * zi;\n        zi = zr * zi + zi * zr + i;\n        zr = temp + r;\n\n        n += 1.0;\n    }\n\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;  // Centered and aspect-corrected\n\n\n    z /= iTime;\n    z += vec2(-1.0, -.3);\n\n    float m = mandelbrot(z.x, z.y);\n    float c = 1.0 - m / ITERATIONS;\n\n    vec3 hsv = vec3(pow(c, 2.2), 1.0, c);\n\n    vec3 col = hsv2rgb(hsv);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}