{
    "Shader": {
        "info": {
            "date": "1573202046",
            "description": "a modified version of https://www.shadertoy.com/view/4dcyW7\ncredit to https://www.shadertoy.com/user/FraglessPlayer",
            "flags": 32,
            "hasliked": 0,
            "id": "WdGSzz",
            "likes": 26,
            "name": "Retro sun modified",
            "published": 3,
            "tags": [
                "sun",
                "80s",
                "retro"
            ],
            "usePreview": 0,
            "username": "JennySchub",
            "viewed": 3565
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision highp float;\n#endif\n\nuniform sampler2D backbuffer;\nuniform float time;\nuniform vec2 resolution;\n\n\n#define usePixelation false\n#define flickerFreq 1400.\n#define flickerSpeed 30.\n#define flickerIntensity .1\n#define motionblur .3\n\n#define iters 70\n#define minDst .001\n#define lineWidth .2\n#define lineCountX 35.\n#define lineCountY 50./3.\n#define speed 6.\n\n#define pixelsize .2\n\n#define gridColor vec3(.2,.05,1.)\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat noise(vec2 seed) {\n return fract(sin(dot(seed, vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat getHeight(vec2 uv) {\n    float time = iTime;\n uv+=.5;\n uv.y-=time*speed;\n float y1 = floor(uv.y);\n float y2 = floor(uv.y+1.);\n float x1 = floor(uv.x) ;\n float x2 = floor(uv.x+1.);\n float iX1 =mix(noise(vec2(x1, y1)), noise(vec2(x2, y1)),fract(uv.x));\n float iX2 =mix(noise(vec2(x1, y2)), noise(vec2(x2, y2)),fract(uv.x));\n return mix(iX1, iX2, fract(uv.y) );\n}\n\nfloat getDistance(vec3 p) {\n return p.z-(1.-cos(p.x*15.))*.03*getHeight(vec2(p.x*lineCountX, p.y*lineCountY));\n}\n\nfloat getGridColor(vec2 uv){\n    float time = iTime;\n float zoom =1., col;\n  vec3  cam = vec3(0.,\n     1.,\n     .1),\n        lookat = vec3(0.),\n        fwd = normalize(lookat-cam),\n        //r = normalize(cross(fwd, vec3(0.,1.,0.))),\n       // u = cross(fwd, r),\n       u=normalize(cross(fwd, vec3(1.,0.,0.))),\n       r=cross(u,fwd),\n       c = cam + fwd*zoom,\n       i = c+r*uv.x+u*uv.y,\n       ray = normalize(i-cam);\n float distSur,\n        distOrigin=0.;\n\n vec3 p = cam;\n for(int i=0; i<iters; i++){\n    distSur = getDistance(p);\n    if(distOrigin>2.) break;\n    if(distSur<minDst) {\n     float lineW=lineWidth*distOrigin;\n     float xLines=smoothstep(lineW,0.,abs(fract(p.x*lineCountX)-.5));\n     float yLines=smoothstep(lineW*2.,0.,abs(fract(p.y*lineCountY-time*speed)-.5));\n     col+=max(xLines, yLines);\n     break;\n    }\n  p+=ray * distSur;\n  distOrigin+=distSur;\n }\n return max(0.,col-(distOrigin*.8));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    vec3 resolution = iResolution;\n  float val=0.;//(texture2D(backbuffer,vec2(0.)).r);\n    float sunHeight = sin(time*.1)*.1+.1;\n\n  //val=val<=0.?.5:val-.5;\n  vec3 last=texture(backbuffer,\n   vec2(floor(gl_FragCoord.xy*(usePixelation?pixelsize:1.))/resolution.xy/(usePixelation?pixelsize:1.))\n  ).rgb;\n  vec2 R = resolution.xy,\n  uv = ( gl_FragCoord.xy - .5* R ) / R.y + .5;\n\n  uv.y-=sunHeight;\n  uv.x+=val*.2;\n\n    // sun\n    float dist =2.5*length(uv-vec2(0.5,0.5));\n    float divisions = 50.0;\n\n\n    //float pattern = tri(fract(( uv.y + 0.5)* 20.0), 2.0/  divisions, divisionsShift)- (-uv.y + 0.26) * 0.85;\n    float pattern = (sin(uv.y*divisions*10. - time*2.)*1.2+uv.y*8.3)*uv.y-1.5+\n     sin(uv.x*20.+time*5.)*.01;\n    float sunOutline = smoothstep( 0.0,-0.0315, max( dist - 0.315, -pattern)) ;\n\n    vec3 c = sunOutline * mix(vec3( 4.0, 0.0, 0.2), vec3(1.0, 1.1, 0.0), uv.y);\n\n    // glow\n    float glow = max(0.0, 1.0 - dist * 1.25);\n    glow = min(glow * glow * glow, 0.325);\n    c += glow * vec3(1.5, 0.3, (.2+ 1.0)) * 1.1;\n\n    uv-=.5;\n\n    uv.y+=sunHeight;\n\n  uv.y+=.18;\n  if(uv.y<0.1)\n     c+=getGridColor(uv)*4.*gridColor;\n    float p=.1;\n     fragColor=1.0*(\n       1.3+sin(time*flickerSpeed+uv.y*flickerFreq)*flickerIntensity\n      )*vec4(\n\t   //vec3(mix(c, last,motionblur))\n\t   c\n      ,1.0);\n     float scanline=smoothstep(1.-.2/flickerFreq,1.,sin(time*flickerSpeed*.1+uv.y*4.));\n\t fragColor*=scanline*.2+1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}