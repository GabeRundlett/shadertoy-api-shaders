{
    "Shader": {
        "info": {
            "date": "1590690266",
            "description": "Not very computing/hardware optimised but doing the stuff. It's very simple and the code is not very dark as you can see in other shaders, but it could be shorter maybe. No user interactions.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsBBWG",
            "likes": 1,
            "name": "Shorter version of my blackhole",
            "published": 3,
            "tags": [
                "simple",
                "ray",
                "marching",
                "galaxy",
                "blackhole",
                "short"
            ],
            "usePreview": 0,
            "username": "Leria",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "//Free for all use\n\n#define PI \t\t\t\t\t3.1415926\n#define RADIUS\t\t\t\t16.\n#define RAY_TRACING \t\t0\n#define GRAV_CONST\t\t\t6.674\n#define STEP\t\t\t\t0.05\n\nstruct Ray\n{\n    vec3 origin; //origin\n    vec3 dir; //direction of the ray\n};\n\nstruct BlackHole\n{\n    vec3 pos; //position\n    float mass; //blackhole mass\n    float inner_radius; //inner radius\n    float accretion_disk_radius; //accretion disk\n};\n\nBlackHole bh;\n\nvec3 ray_interpolation(Ray r, float t) \n{\n \treturn (r.origin + r.dir*t);   \n}\n\nvoid set_black_hole(vec3 pos, float mass,\n                         float radius, float inner_rad, \n                         float disk_rad)\n{\n \tbh = BlackHole(pos, mass, inner_rad, disk_rad);\n}\n\nvoid space_time_bending(inout Ray r, inout vec3 p, float s)\n{    \n\n    vec3 bh_vec = bh.pos - p;\n    float d = dot(bh_vec,bh_vec);\n    vec3 res = normalize(bh_vec) * (GRAV_CONST*bh.mass)/(d);\n        \n    r.dir = normalize(r.dir + s*res);\n}\n\nvec2 polar_coord(vec3 p)\n{\n    float phi = atan(p.x, p.z); //angle\n    float d_rad = length(vec2(p.x, p.z)); //delta radius\n    return vec2(d_rad*cos(phi), d_rad*sin(phi));\n}\n                 \nvoid ray_march_scene(Ray r, float k, inout vec3 c)\n{        \n    vec3 p = ray_interpolation(r, k*fract(1e4*sin(1e4*dot(r.dir, vec3(1., 7.1, 13.3)))));\n    \n    float s = 0.;\n     \n    for(s; s < 2000.; s++)\n    {               \n        vec2 nu = polar_coord(p-bh.pos);\n        \n        if((length(nu) - bh.inner_radius >= 0.) && (length(nu)-bh.accretion_disk_radius <= 0.) && (distance(p.y, bh.pos.y) < .2))\n        {\n            vec4 tex = texture(iChannel0, p/8.+0.01*iTime);\n            float coef = length(p-bh.pos);\n        \tc += 2.*(1./coef)*tex.r*vec3(0.6, 0.3, 0.2);\n        }\n        \n        p += r.dir*k;\n        space_time_bending(r, p, k); //comment this line to see what's behind\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec3 cam = vec3(0., 2., 30.);\n    bh = BlackHole(vec3(0., 0., -15.), 200./iResolution.y, 4., RADIUS);\n    \n    vec2 uv = (2.0*(fragCoord)-iResolution.xy)/iResolution.y;\n    \n    vec3 color = vec3(0.);\n\n    vec3 ray_dir = vec3(uv, -1.);\n    bh.pos = normalize(vec3(-10, 20., bh.pos.z));\n    ray_march_scene(Ray(cam, normalize(ray_dir)), STEP, color);\n    \n    fragColor = vec4(color, 1.);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}