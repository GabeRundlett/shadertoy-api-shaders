{
    "Shader": {
        "info": {
            "date": "1632782379",
            "description": "...",
            "flags": 0,
            "hasliked": 0,
            "id": "sstXz4",
            "likes": 0,
            "name": "Evangelion Leliel Angel",
            "published": 3,
            "tags": [
                "waves"
            ],
            "usePreview": 0,
            "username": "boddiul",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "const vec3  eye      = vec3 ( 0, 0, 3 );\nconst vec3  light    = vec3  ( 0.0, 3.0, 5.0 );\nconst int   maxSteps = 120;\nconst float eps      = 0.01;\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nvec3 my_mod( vec3 p, float m) {\n    return p - m * round(p / m);\n}\n\nfloat dSphere ( vec3 p, in vec3 c )\n{\n\treturn length(p-c) - 1.0;////length ( my_mod(p, 5.0) - c ) - 1.0;\n}\n\nfloat dObj ( vec3 p )\n{\n\n    //p.x = sin(p.x);\n    \n    //p.y = sin(p.y);\n    \n    //return length(p)-1.0;\n    \n    int n = 0;\n\n\n    /*if (mod(p.x,2.0)<1.0)\n        {p=vec3(0.0,p.z,p.y);}\n        \n        \n     \n    \n    return length(p) - 1.0;*/\n    \n    /*\n    if (p.x>0.0 )\n        return length(p)-10.0;//return length(p) - 1.0;\n    else\n    {\n        \n    }*/\n    \n    \n    \n    if (p.x<-5.0)\n    {\n        return -iTime-sin(p.x*2.0+p.y*2.0);\n    }\n    else\n    {\n        if (length(p)<10.0 )\n            return sin(p.x+iTime/2.0+p.y-p.z)+10.0*cos(iTime*p.x+p.y-p.z);\n        else\n            return length(p)-10.0;\n    \n    }\n    \n    \n    \n    \n    \n    \n    /*\n    vec3 +1 = vec3(10,10,10);\n\tvec3 a2 = vec3(-10,-10,10);\n\tvec3 a3 = vec3(10,-10,-10);\n\tvec3 a4 = vec3(-10,10,-10);\n    vec3 cc;\n    vec3 z = p;\n    int Iterations = 100;\n    float Scale = 0.5;\n\tint n = 0;\n\tfloat dist, d;\n\twhile (n < Iterations) {\n\t\t cc = a1; dist = length(z-a1);\n\t        d = length(z-a2); if (d < dist) { cc = a2; dist=d; }\n\t\t d = length(z-a3); if (d < dist) { cc = a3; dist=d; }\n\t\t d = length(z-a4); if (d < dist) { cc = a4; dist=d; }\n\t\tz = Scale*z-cc*(Scale-1.0);\n\t\tn++;\n\t}\n\n\treturn length(z) * pow(Scale, float(-n));*/\n    \n    /*\n    int Iterations = 100;\n    float Scale = 0.5;\n    vec3 Offset;\n    vec3 z = p;\n    float r;\n    int n = 0;\n    while (n < Iterations) {\n       if(z.x+z.y<0.0) z.xy = -z.yx; // fold 1\n       if(z.x+z.z<0.0) z.xz = -z.zx; // fold 2\n       if(z.y+z.z<0.0) z.zy = -z.yz; // fold 3\t\n       z = z*Scale - Offset*(Scale-1.0);\n       n++;\n    }\n    return (length(z) ) * pow(Scale, -float(n));\n    */\n\n}\nfloat length8 ( in vec2 p )\n{\n    return pow ( pow ( p.x, 8.0 ) + pow ( p.y, 8.0 ), 1.0/ 8.0 );\n}\n\nfloat length8 ( in vec3 p )\n{\n    return pow ( pow ( p.x, 8.0 ) + pow ( p.y, 8.0 ) + pow ( p.z, 8.0 ), 1.0/ 8.0 );\n}\n\n\nfloat dTorus ( vec3 p, vec2 t )\n{\n\tvec2\tq = vec2 ( length8 ( p.xz ) - t.x, p.y );\n\t\n\treturn length8 ( q ) - t.y;\n}\n\nfloat smin ( float a, float b, float k )\n{\n\tfloat res = exp ( -k*a ) + exp ( -k*b );\n\treturn -log ( res ) / k;\n}\n\nfloat sdf ( in vec3 p )\n{\n    //return dSphere ( p, vec3 ( 0, 0, 0 ) );\n    //return dBox ( p, vec3 ( 0.5, 0.2, 0.7 ) );\n\treturn dTorus ( p, vec2 ( 0.73, 0.5 ) );\n}\n\nfloat sdf ( in vec3 p, in mat3 m )\n{\n   vec3 q = m * p;\n   q += 30.0-min(iTime,20.0) ;\n    \n    //return dSphere ( q, vec3 ( 0, 0, 0 ) );\n    return dObj ( q);\n    //return dBox ( q, vec3 ( 0.5, 0.2, 0.7 ) );\n\t//return smin ( dTorus ( q, vec2 ( 0.73, 0.4 ) ),  dSphere ( q, vec3 ( 1, 0, 0 ) ), 7.0 );\n}\n\nvec3 trace ( in vec3 from, in vec3 dir, out bool hit, in mat3 m )\n{\n\tvec3\tp         = from;\n\tfloat\ttotalDist = 0.0;\n\t\n\thit = false;\n\t\n\tfor ( int steps = 0; steps < maxSteps; steps++ )\n\t{\n\t\tfloat\tdist = sdf ( p, m );\n        \n\t\tif ( dist < 0.01 )\n\t\t{\n\t\t\thit = true;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\ttotalDist += dist;\n\t\t\n\t\tif ( totalDist > 100.0 )\n\t\t\tbreak;\n\t\t\t\n\t\tp += dist * dir;\n\t}\n\t\n\treturn p;\n}\n\nvec3 generateNormal ( vec3 z, float d, in mat3 m )\n{\n    float e   = max (d * 0.5, eps );\n    float dx1 = sdf(z + vec3(e, 0, 0), m);\n    float dx2 = sdf(z - vec3(e, 0, 0), m);\n    float dy1 = sdf(z + vec3(0, e, 0), m);\n    float dy2 = sdf(z - vec3(0, e, 0), m);\n    float dz1 = sdf(z + vec3(0, 0, e), m);\n    float dz2 = sdf(z - vec3(0, 0, e), m);\n    \n    return normalize ( vec3 ( dx1 - dx2, dy1 - dy2, dz1 - dz2 ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n        // Normalized pixel coordinates (from 0 to 1)\n    bool hit;\n\tvec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\n    mat3 m     = rotateX ( 6.0*mouse.y ) * rotateY ( 6.0*mouse.x);\n    vec2 scale = 9.0 * iResolution.xy / max ( iResolution.x, iResolution.y ) ;\n    vec2 uv    = scale * ( fragCoord/iResolution.xy - vec2 ( 0.5 ) );\n\tvec3 dir   = normalize ( vec3 ( uv, 0 ) - eye );\n    vec4 color = vec4 ( 0, 0, 0, 1 );\n    vec3 p     = trace ( eye, dir, hit, m );\n\n\n\tif ( hit )\n\t{\n\t\tvec3  l  = normalize        ( light - p );\n        vec3  v  = normalize        ( eye - p );\n\t\tvec3  n  = generateNormal   ( p, 0.001, m );\n\t\tfloat nl = max ( 0.0, dot ( n, l ) );\n        vec3  h  = normalize ( l + v );\n        float hn = max ( 0.0, dot ( h, n ) );\n        float sp = pow ( hn, 150.0 );\n\t\t\n\t\tcolor = 0.5*vec4 ( nl ) + 0.5 * sp * vec4 ( 0, 1, 0, 1 );\n\t} \n\n    // Output to screen\n    fragColor = color;\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}