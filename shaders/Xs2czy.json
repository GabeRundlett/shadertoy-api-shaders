{
    "Shader": {
        "info": {
            "date": "1492612096",
            "description": "You can change the difficulty in the bufA code. by default it's medium\nI haven't been able to win in hard mode...",
            "flags": 96,
            "hasliked": 0,
            "id": "Xs2czy",
            "likes": 41,
            "name": "TicTacToe: Can you beat me ?",
            "published": 3,
            "tags": [
                "game",
                "ia",
                "tic",
                "tac",
                "toe"
            ],
            "usePreview": 0,
            "username": "Himred",
            "viewed": 1716
        },
        "renderpass": [
            {
                "code": "// Again another Playable Tic Tac Toe\n//\n// The IA is not prefect on purpose\n// Otherwise humans cannot win and that's not fun to play\n// You can beat the IA ;)\n//\n// This is my first mini game, coded as an exercice for a bigger stuff later\n//\n// As usual, I used some lines of code from:\n//\n// The line function from https://www.shadertoy.com/view/lsGXRK by jpweiyi \n// The Load/Save functions from iq game\n// The circle function from https://www.shadertoy.com/view/ltBXRc by phil\n\n\n// You can change difficulty in bufA code\n\n#define PLAYER vec2(4)\n#define STATE vec2(6)\n#define HUMAN 1.\n#define BOT -1.\n#define FULL 2.\n#define FREE 0.\n\n#define BLUE vec3(0.05, 0.15, 1.0)\n#define RED vec3(0.7, 0.15, 0.05)\n#define GREEN vec3(0.05, 0.7, 0.15)\n#define WHITE vec3(0.4)\n\n// Set this to 1 for sinus flag effect (dizziness guaranted)\n#define SINEFFECT 0\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n  \tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix( mix(rand(b),rand(b + d.yx), f.x),mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\n\nvec3 line(vec2 p, vec2 a, vec2 b,vec3 c)\n{\n     p += noise(p*20.0+iTime*5.) * 0.01;\n     vec2 a2b = b - a;\n     vec2 a2p = p - a;     \n     float h = clamp( dot(a2p,a2b)/dot(a2b,a2b), 0.0, 1.0 );\n     vec2 p1 = mix( a, b, h );\n     float t = length( p - p1 );\n     return c*.01/t;\n    \n}\n\nmat2 rotate2d(float angle)\n{\n    return mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n}\n\nfloat variation(vec2 v1, vec2 v2, float strength, float speed) {\n\treturn sin(\n        dot(normalize(v1), normalize(v2)) * strength + iTime * speed\n    ) / 100.0;\n}\n\nvec3 paintCircle (vec2 uv, vec2 center, float rad, float width) {\n    \n    vec2 diff = center-uv;\n    float len = length(diff);\n\n    len += variation(diff, vec2(0.0, 1.0), 5.0, 2.0);\n    len -= variation(diff, vec2(1.0, 0.0), 5.0, 2.0);\n    \n    float circle = smoothstep(rad-width, rad, len) - smoothstep(rad, rad+width, len);\n    return vec3(circle);\n}\n   \nvec3 Circle(vec2 uv,vec2 p,float r)\n{\n    vec3 color;\n    color=paintCircle(uv, p, r, 0.025);\n    vec2 v = rotate2d(iTime) * uv;\n    color*=vec3(v.x, v.y, 0.7-v.y*v.x);\n    color += paintCircle(uv, p, r, 0.01);\n    return color;\n}\n\nvec4 LoadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy );\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    vec3 col=vec3(0);\n    vec3 border;\n    \n    // loading vars from buffer\n    float player=LoadValue(PLAYER).x;\n    float state=LoadValue(STATE).x;\n    \n    // uv lazy translation & resize\n    uv.x-=0.33333;\n    if(SINEFFECT==1) uv.x+=0.05*sin(3.*uv.y+iTime);\n    vec2 p=floor(uv*3.);\n    \n    // Drawing circles and crosses\n    if(p.x>=0. && p.y>=0. && p.x<=2. && p.y<=2.)\n    {\n    \tfloat v=LoadValue(p).x;\n    \tif(v==BOT) col=Circle(uv,vec2(p/3.+0.1666),0.12);\n        if(v==HUMAN) col=line(uv,p/3.+vec2(0.08,0.08),p/3.+vec2(0.27,0.25),RED);\n        if(v==HUMAN) col+=line(uv,p/3.+vec2(0.08,0.24),p/3.+vec2(0.27,0.08),RED);\n    }\n    \n    // Drawing grid\n    if(state==FREE) border=BLUE;\n    if(state==HUMAN) border=GREEN;\n    if(state==BOT) border=RED;\n    if(state==FULL) border=WHITE;\n    \n    \n    col+=line(uv,vec2(.66666,0),vec2(0.6666,1),border);\n    col+=line(uv,vec2(.33333,0),vec2(0.3333,1),border);\n    col+=line(uv,vec2(1,0),vec2(1,1),border);\n    col+=line(uv,vec2(0,0),vec2(0,1),border);\n    col+=line(uv,vec2(0,0.3333),vec2(1,0.3333),border);\n    col+=line(uv,vec2(0,0.6666),vec2(1,0.6666),border);\n    col+=line(uv,vec2(0,0.01),vec2(1,0.01),border);\n    col+=line(uv,vec2(0,0.999),vec2(1,0.999),border);\n    \n    // Presenting color to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 8053,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/joevr/meditation-zen-music"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PLAYER vec2(4)\n#define MOUSE vec2(5)\n#define STATE vec2(6)\n#define HUMAN 1.\n#define HOLD 2.\n#define BOT -1.\n#define FREE 0.\n#define FULL 2.\n\n\nfloat data[9];\nfloat tab[9];\n\nfloat player;\nfloat mouse;\nfloat state;\n\n// Game difficulty (1=Easy, 2=Medium, 3=Hard)\n#define DIFFICULTY 2\n\n//----------------------------------------------------------------------------------------------\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\n\nvec4 LoadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy );\n}\n\n//----------------------------------------------------------------------------------------------\nvoid StoreValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\n//----------------------------------------------------------------------------------------------\n\nvoid LoadData(void)\n{\n\tplayer = LoadValue(PLAYER).x;\n\tmouse = LoadValue(MOUSE).x;\n    state = LoadValue(STATE).x;\n\tfor(int x=0;x<3;x++)\n\t\tfor(int y=0;y<3;y++)\n\t\t\tdata[3*x+y]=LoadValue(vec2(x,y)).x;\n}\n\n//----------------------------------------------------------------------------------------------\nvoid InitData(void)\n{\n\tplayer=HUMAN;\n\tmouse=0.;\n    state=0.;\n\tfor(int x=0;x<3;x++)\n\t\tfor(int y=0;y<3;y++)\n\t\t\tdata[3*x+y]=FREE;\n}\n\n//----------------------------------------------------------------------------------------------\nfloat GetData(float x,float y)\n{\n\treturn data[int(3.*x+y)];\n}\n\n\n//----------------------------------------------------------------------------------------------\nvoid SetData(float x,float y,float v)\n{\n\tdata[int(3.*x+y)]=v;\n}\n\n//----------------------------------------------------------------------------------------------\nfloat GetTab(float x,float y)\n{\n\treturn tab[int(3.*x+y)];\n}\n\n\n//----------------------------------------------------------------------------------------------\nvoid SetTab(float x,float y,float v)\n{\n\ttab[int(3.*x+y)]=v;\n}\n\n\nbool Full(void)\n{\n\tfor(float x=0.;x<3.;x++)\n        for(float y=0.;y<3.;y++)\n            if(GetData(x,y)==FREE) return false;\n            \n     return true;\n}\n\nbool Win(float play)\n{\n    if(GetData(0.,0.)+GetData(0.,1.)+GetData(0.,2.)==3.*play) return true;\n    if(GetData(1.,0.)+GetData(1.,1.)+GetData(1.,2.)==3.*play) return true;\n    if(GetData(2.,0.)+GetData(2.,1.)+GetData(2.,2.)==3.*play) return true;\n    \n    if(GetData(0.,0.)+GetData(1.,0.)+GetData(2.,0.)==3.*play) return true;\n    if(GetData(0.,1.)+GetData(1.,1.)+GetData(2.,1.)==3.*play) return true;\n    if(GetData(0.,2.)+GetData(1.,2.)+GetData(2.,2.)==3.*play) return true;\n    \n    if(GetData(0.,0.)+GetData(1.,1.)+GetData(2.,2.)==3.*play) return true;\n    if(GetData(0.,2.)+GetData(1.,1.)+GetData(2.,0.)==3.*play) return true;\n    \n    return false;\n}\n \nbool WinTab(float play)\n{\n    if(GetTab(0.,0.)+GetTab(0.,1.)+GetTab(0.,2.)==3.*play) return true;\n    if(GetTab(1.,0.)+GetTab(1.,1.)+GetTab(1.,2.)==3.*play) return true;\n    if(GetTab(2.,0.)+GetTab(2.,1.)+GetTab(2.,2.)==3.*play) return true;\n\n    if(GetTab(0.,0.)+GetTab(1.,0.)+GetTab(2.,0.)==3.*play) return true;\n    if(GetTab(0.,1.)+GetTab(1.,1.)+GetTab(2.,1.)==3.*play) return true;\n    if(GetTab(0.,2.)+GetTab(1.,2.)+GetTab(2.,2.)==3.*play) return true;\n\n    if(GetTab(0.,0.)+GetTab(1.,1.)+GetTab(2.,2.)==3.*play) return true;\n    if(GetTab(0.,2.)+GetTab(1.,1.)+GetTab(2.,0.)==3.*play) return true;\n\n    \n    return false;\n}\n\nfloat Corner(vec2 p)\n{\n\tfloat m=0.;\n    for(float a=-2.;a<2.;a++) \n    {\n        if(p.x+a>=0. && p.x+a<3. && GetData(p.x+a,p.y)==HUMAN) m++;\n        if(p.y+a>=0. && p.y+a<3. && GetData(p.x,p.y+a)==HUMAN) m++;\n    }\n        \n    return m;\n}\n\n//----------------------------------------------------------------------------------------------\nvec2 IA(void)\n{\n\t// Copy data to tab\n    for(float x=0.;x<3.;x++)\n        for(float y=0.;y<3.;y++)\n            SetTab(x,y,GetData(x,y));\n           \n    // Win position\n\tfor(float x=0.;x<3.;x++)\n        for(float y=0.;y<3.;y++)\n            if(GetTab(x,y)==FREE)\n            {\n                SetTab(x,y,BOT);\n                if(WinTab(BOT)) return vec2(x,y);\n                SetTab(x,y,FREE);\n            }\n\n    // Block position\n\tfor(float x=0.;x<3.;x++)\n        for(float y=0.;y<3.;y++)\n            if(GetTab(x,y)==FREE)\n            {\n                SetTab(x,y,HUMAN);\n                if(WinTab(HUMAN)) return vec2(x,y);\n                SetTab(x,y,FREE);\n            }\n\n    // Ok no obvious move\n    \n    // Special Dave_Hoskins (opposite corners)\n    if((DIFFICULTY>2 && GetData(0.,0.)==HUMAN && GetData(2.,2.)==HUMAN) || (GetData(0.,2.)==HUMAN && GetData(2.,0.)==HUMAN))\n    {\n        if(GetData(2.,1.)==FREE) return vec2(2,1);\n        if(GetData(1.,2.)==FREE) return vec2(1,2);\n        if(GetData(1.,0.)==FREE) return vec2(1,0);\n        if(GetData(0.,1.)==FREE) return vec2(0,1);\n    }\n    \n    // prefer center if possible\n    if(DIFFICULTY>1 && GetData(1.,1.)==FREE) return vec2(1);\n    \n    // Corners with most blocking\n    if(DIFFICULTY>2)\n    {\n    \tfloat maxi=0.;\n    \tfloat m=0.;\n    \tvec2 ret=vec2(-1);\n    \n    \tif(GetData(0.,0.)==FREE) m=Corner(vec2(0,0));\n    \tif(m>maxi) {maxi=m;ret=vec2(0,0);}\n    \n    \tif(GetData(0.,2.)==FREE) m=Corner(vec2(0,2));\n    \tif(m>maxi) {maxi=m;ret=vec2(0,2);}\n    \n    \tif(GetData(2.,0.)==FREE) m=Corner(vec2(2,0));\n    \tif(m>maxi) {maxi=m;ret=vec2(2,0);}\n    \n    \tif(GetData(2.,2.)==FREE) m=Corner(vec2(2,2));\n    \tif(m>maxi) {maxi=m;ret=vec2(2,2);}\n    \n    \tif(ret.x>-1.) return ret;\n    }\n   \n    if(DIFFICULTY>1)\n    {\n    \t// Or Simply corners\n    \tif(GetData(0.,0.)==FREE) return vec2(0.,0.);\n    \tif(GetData(0.,2.)==FREE) return vec2(0.,2.);\n    \tif(GetData(2.,0.)==FREE) return vec2(2.,0.);\n    \tif(GetData(2.,2.)==FREE) return vec2(2.,2.);\n    }\n      \n    // Otherwise choose first free\n    // That's why humans can win\n    // If I implemented minimax algo game would be boring\n    for(float x=0.;x<3.;x++)\n        for(float y=0.;y<3.;y++)\n            if(GetData(x,y)==FREE) return vec2(x,y);\n    \n}\n\n//----------------------------------------------------------------------------------------------\nint Game()\n{\n    LoadData();\n        \n    if(state!=FREE && mouse!=iMouse.z && iMouse.z>0.)\n    {\n     InitData();\n     player=HOLD;\n    }\n     \n    if(state==FREE && mouse!=iMouse.z && iMouse.z>0. && player==HUMAN) \n    {\n        vec2 uv = iMouse.xy/iResolution.y;\n        uv.x-=0.33333;\n        vec2 p=floor(uv*3.);\n        if(GetData(p.x,p.y)==FREE && p.x>=0. && p.x<=2. && p.y>=0. && p.y<=2.)\n        {\n            SetData(p.x,p.y,player);\n            if(Win(HUMAN)) state=HUMAN;\n            player=-player;\n        }\n    }\n    \n    if(state==FREE && player==BOT && !Full())\n    {\n        vec2 p=IA();\n        SetData(p.x,p.y,BOT);\n        if(Win(BOT)) state=BOT;\n        player=-player;\n    }\n    \n    if(state==FREE && Full()) state=FULL;\n    if(state==FREE && player==HOLD && mouse!=iMouse.z && iMouse.z>0.) player=HUMAN;\n    \nreturn 0;   \n}\n//----------------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    if( fragCoord.x > 14.0 || fragCoord.y>14.0 ) discard;\n \n \tif(iFrame==0) InitData(); else Game();\n    \t\n    // Saving vars\n    StoreValue(PLAYER,vec4(player),fragColor,fragCoord );\n    StoreValue(MOUSE,vec4(iMouse.z),fragColor,fragCoord );\n    StoreValue(STATE,vec4(state),fragColor,fragCoord );\n    \n    // Saving Array\n    for(float x=0.;x<3.;x++)\n\t\tfor(float y=0.;y<3.;y++)\n            StoreValue(vec2(x,y),vec4(GetData(x,y)),fragColor,fragCoord );\n                       \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}