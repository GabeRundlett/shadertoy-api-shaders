{
    "Shader": {
        "info": {
            "date": "1708099585",
            "description": "having fun. egg boing",
            "flags": 0,
            "hasliked": 0,
            "id": "lXS3RR",
            "likes": 0,
            "name": "egg boing",
            "published": 3,
            "tags": [
                "eggboing"
            ],
            "usePreview": 0,
            "username": "Trixelized",
            "viewed": 60
        },
        "renderpass": [
            {
                "code": "#define iters 80\n#define minDist 0.001\n#define maxDist 4.000\n\nvec2 march(vec3 pos, vec3 dir) {\n\n    float dist = minDist;\n    \n    for (int i = 0; i < iters; i++) {\n        \n        // Distance for current iteration only!\n        vec3 cur = pos + dir * dist;\n        float d = 0.0;\n        \n        \n        // THESE LINES FUCK IT UP BIGTIME\n        float dAmt = smoothstep(-0.2, 0.8, sin(iTime * 0.25 * 3.141)) * 0.5;\n        cur.x += dAmt * sin(iTime + float(i));\n        cur.z += dAmt * cos(iTime + float(i));\n        cur.y += dAmt * cos(iTime + float(i));\n        \n        \n        d = max(d, sdBox(cur, vec3(0.5)));\n        d = max(d, -sdBox(cur + vec3(-0.25, -0.25, 0.25), vec3(0.5)));\n        d = min(d, sdSphere(cur + vec3(-0.25, -0.25 * abs(sin(iTime * 3.0)), 0.25), 0.25));\n        d = min(d, abs(cur.y + 0.5));\n        \n        dist += d;\n        \n        if (d < minDist) return vec2(dist, i);\n        if (d > maxDist) return vec2(dist, i);\n    }\n    \n    return vec2(dist, iters);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Set the UV\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    uv.x *= (iResolution.x / iResolution.y);\n    \n    // Camera position and ray direction\n    vec3 camPos = vec3(0.0, 0.125, -2.0);\n    vec3 rayDir = normalize(vec3(uv.xy, 1.0));\n    \n    vec2 dist = march(camPos, rayDir);\n    vec3 wPos = camPos + rayDir * dist.x;\n    \n    vec3 sunDir = normalize(vec3(sin(iTime), 0.5, cos(iTime)));\n    float shadow = march(wPos + sunDir * minDist, sunDir).x;\n    shadow = 0.2 + 0.8 * step(maxDist, shadow);\n    \n    fragColor = vec4(vec3(dist.y / float(iters)) * shadow, 1.0);\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://iquilezles.org/articles/distfunctions/\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}