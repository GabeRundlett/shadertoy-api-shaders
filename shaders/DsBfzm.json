{
    "Shader": {
        "info": {
            "date": "1689548070",
            "description": "this is a test",
            "flags": 8,
            "hasliked": 0,
            "id": "DsBfzm",
            "likes": 25,
            "name": "Starfield (again)",
            "published": 3,
            "tags": [
                "stars"
            ],
            "usePreview": 0,
            "username": "cedricl",
            "viewed": 776
        },
        "renderpass": [
            {
                "code": "float rand2(vec2 co) { return fract(sin(dot(co, vec2(12.9898, 70.233))) * 43758.5453); }\nvec2 Rot(vec2 p, float th) { return vec2(p.x*cos(th)-p.y*sin(th), p.x*sin(th)+p.y*cos(th)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; \n    vec3 r = normalize(vec3(Rot(uv - vec2(.5, .5 + .35*sin(.157 * iTime)), .4 * sin(.3 * iTime)), 1.));\n    fragColor = vec4(0,0,0,1);\n    \n    for(float a = 0.015; a < .3; a += .012)\n    {\n        float k = -a / r.y;\n        vec2 m = (k * r.xz * vec2(10., 20.3 * a)) - vec2(23. * rand2(vec2(a)) , sign(r.y) * .15 * iTime);\n        vec3 col2 = vec3(rand2(floor(m * 60.)) < .97);       \n        float p = smoothstep(.8, .9, (1. - 2. * length(fract(m * 60.) - vec2(.5))));\n        col2 = p * smoothstep(.5, .3, col2) / pow(abs(k), .9);\n        float p2 = 1. - 2. * length(fract(m * 3.) - vec2(.5));\n        col2 += pow(p2, 2.) * vec3(.3,0,.3) * rand2(floor(m * 3.));        \n        fragColor.xyz = max(fragColor.xyz, pow(abs(r.y), .4) * col2 / (20. * a + 1.));\n    }\n    \n    fragColor.xyz += 1.3 * (1. - 1.4 * abs(r.x)) * (pow(1. - abs(r.y), 2.) * vec3(.0, .2, .8) + pow(1. - abs(r.y), 40.4) * vec3(.1, .7, .95));\n    fragColor.xyz += .9 * pow(1. - 2. * length(r.xy), 6.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float wf(float t, float ramp, float pulse) { return 2. * ((smoothstep(0., ramp, fract(t)) - smoothstep(ramp + pulse, 1., fract(t))) - .5); }\nfloat PSin(float t) { return .5 + .5 * sin(t); }\nfloat S(float time) { return wf(55. * time, .3 * PSin(.3*time) + .02, .5) \n                            + wf(55.3 * time, .15 * PSin(.3*time) + .02, .5) \n                            + wf(55. * (4./3.) * time, .15 * PSin(.3*time) + .05, .5); }\n\nvec2 mainSound( int samp, float time )\n{\n    return .05*vec2( S(time) + .5*S(time-.7), S(time + .3) + .5*S(time - .4));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}