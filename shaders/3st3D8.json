{
    "Shader": {
        "info": {
            "date": "1568382846",
            "description": "add shear to cornusammonis reaction-diffusion [url]https://shadertoy.com/view/XdcXDN[/url]. \nTry fullscreen. Paint with mouse controls. Test BuffA:#def T.\nBest with plugin ShT accel.\nNB: is also paradoxical texture advection pattern (advect but keep same)",
            "flags": 32,
            "hasliked": 0,
            "id": "3st3D8",
            "likes": 26,
            "name": "Reaction-Diffusion with shear",
            "published": 3,
            "tags": [
                "simulation",
                "diffusion",
                "reaction",
                "fitzhugh",
                "nagumo",
                "textureadvection",
                "paradoxical"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 896
        },
        "renderpass": [
            {
                "code": "// Fork of \"Fitzhugh-Nagumo\" by cornusammonis. https://shadertoy.com/view/XdcXDN\n// change: adding shear, use basic rendering.\n\nvoid mainImage( out vec4 O, vec2 U ){\n    O = texelFetch(iChannel0, ivec2(U), 0).rrrr;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Fork of \"Fitzhugh-Nagumo\" by cornusammonis. https://shadertoy.com/view/XdcXDN\n// - just replaced texture access by T(U) to introduce  shear\n// - option: adding noise along time (commented by default)\n\n#define T(U) texture( iChannel0, U -.1/60.* vec2(.5*sin(6.28*((U).y-.5)),.5*cos(6.28*((U).x-.5))), 0.)\n//#define T(U) texture( iChannel0, U -.1/60.* vec2(.5*sin(6.28*((U).y-.5)), 0), 0.)\n//#define T(U) texture( iChannel0, U ) // base still cornusammonis case\n\n/*\n\tA Fitzhugh-Nagumo reaction-diffusion system. \n\tSee this paper for additional information: \n\t\t\n\thttp://arxiv.org/pdf/patt-sol/9401002.pdf\n\n\tA large timestep is used to make the system evolve at an interactive rate when limited to 60 FPS.\n    The system is unstable using a large timestep with simple Euler integration, so instead it is \n    updated with an exponentially-weighted moving average of the gradient (with time constant tc).\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float _K0 = -20.0/6.0; // center weight\n    const float _K1 = 4.0/6.0; // edge-neighbors\n    const float _K2 = 1.0/6.0; // vertex-neighbors\n    const float timestep = .7;\n    const float a0 = -0.1;\n    const float a1 = 2.0;\n    const float epsilon = 0.05;\n    const float delta = 4.0;\n    const float k1 = 1.0;\n    const float k2 = 0.0;\n    const float k3 = 1.0;\n    const float tc = 0.8;\n\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 vUv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    // 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    vec4 uv =    T(vUv);\n    vec4 uv_n =  T(vUv+n);\n    vec4 uv_e =  T(vUv+e);\n    vec4 uv_s =  T(vUv+s);\n    vec4 uv_w =  T(vUv+w);\n    vec4 uv_nw = T(vUv+nw);\n    vec4 uv_sw = T(vUv+sw);\n    vec4 uv_ne = T(vUv+ne);\n    vec4 uv_se = T(vUv+se);\n\n    // laplacian of all components\n    vec4 lapl  = _K0*uv + _K1*(uv_n + uv_e + uv_w + uv_s) + _K2*(uv_nw + uv_sw + uv_ne + uv_se);\n\n    float a = uv.x;\n    float b = uv.y;\n    float c = uv.z;\n    float d = uv.w;\n    \n    float d_a = k1*a - k2*a*a - a*a*a - b + lapl.x;\n    float d_b = epsilon*(k3*a - a1*b - a0) + delta*lapl.y;\n\tc = tc * c + (1.0 - tc) * d_a;\n\td = tc * d + (1.0 - tc) * d_b;\n\n    a = a + timestep * c;\n    b = b + timestep * d;\n    \n    if (iMouse.z > 0.0) {\n    \tfloat mLen = length(iMouse.xy - fragCoord.xy);\n    \ta += exp(-mLen * mLen / 100.0);\n    }\n    \n    // initialize with noise\n    if(iFrame<30) {\n        fragColor = -0.5 + texture(iChannel1, vUv);\n    } else {\n        fragColor = clamp(vec4(a, b, c, d), -1., 1.);\n      //fragColor += 2./60.* ( -0.5 + texture(iChannel1, vUv-iTime) );\n    }\n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}