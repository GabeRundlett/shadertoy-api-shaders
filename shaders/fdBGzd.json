{
    "Shader": {
        "info": {
            "date": "1617799196",
            "description": "A surprisingly good P/P formula for Tixy\n\nTuxy engine is forked from @Xor https://www.shadertoy.com/view/3dtBDN\n256-byte intro for PC-DOS: https://www.youtube.com/watch?v=uV5qEeMlLrQ",
            "flags": 0,
            "hasliked": 0,
            "id": "fdBGzd",
            "likes": 1,
            "name": "Tixy Land - Kaleidoscope",
            "published": 3,
            "tags": [
                "tixykaleidoscope"
            ],
            "usePreview": 0,
            "username": "ern0",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "// Forked from https://www.shadertoy.com/view/3dtBDN\n//   by https://www.shadertoy.com/user/Xor\n//\n// Formula by ern0\n//   sin(t*(x-7.5)*(y-7.5)/66)\n//   https://tixy.land/?code=sin%28t*%28x-7.5%29*%28y-7.5%29%2F66%29%2F%2F%65%72%6e%30\n// 256-byte intro (capture): \n//   https://www.youtube.com/watch?v=uV5qEeMlLrQ\n\n//Recreated @aemkey's \"Tixy Land\" in ShaderToy using shader syntax.\n//Play around with the original here: https://tixy.land\n\n// You can fiddle with dot count here:\n#define count 16.\n#define center ((count-1.)/2.)\n\n#define tixy(t,i,x,y) sin(t*(x-center)*(y-center)/66.)\n\n//#define tixy(t,i,x,y) (x-7.5+sin(t)*5.)*(x-7.5+sin(t)*5.)+(y-7.5+cos(t*1.7)*5.)*(y-7.5+cos(t*1.7)*5.)-8.\n\n\n//Render with the result:\nvoid mainImage( out vec4 color, in vec2 coord )\n{\n    float s = 1.2/iResolution.y;\n    vec2 u = (coord-.5*iResolution.xy)*s;\n    u.y = -u.y;\n    \n    float square = step(abs(u.x),.5)*step(abs(u.y),.5);\n    vec2 cell = floor((u+.5)*count);\n    float index = cell.x+cell.y*count;\n    float tixel = float(tixy(iTime,index,cell.x,cell.y));\n    \n    float dist = length(fract(u*count)-.5)*count/.5;\n    float radius = count*min(abs(tixel),1.);\n    \n    vec3 col = tixel<0. ? vec3(255,34,68)/255. : vec3(1);\n    col *= clamp((radius-dist)/s/count/count/2.,0.,1.)*square;\n\n    color = vec4(col,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}