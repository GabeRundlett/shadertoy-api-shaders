{
    "Shader": {
        "info": {
            "date": "1506082242",
            "description": "arrow keys move\ndrag mouse to look around.\nklick left to show surface normals\nklick right to show diffuse\nklick up/down to change floor",
            "flags": 48,
            "hasliked": 0,
            "id": "lllcRl",
            "likes": 3,
            "name": "infinite collision forest",
            "published": 3,
            "tags": [
                "collision",
                "gradient",
                "forest",
                "4d",
                "lipschitz",
                "infinite",
                "move",
                "walk",
                "continuity"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 1142
        },
        "renderpass": [
            {
                "code": "/*\nAll the code moved to BuffA, \n A buffer is needed for for positions and rotations.\n The renderer needs the same distance field as \"collision detection\" needs for buffers.\n Therefore these 2 codepages merge to the same code page.\n*/\n\nvec4 tf(ivec2 coord){return texelFetch(iChannel0,coord,0);}\n\nvoid mainImage( out vec4 o, in vec2 u )\n{ o=tf(ivec2(u));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//tweak performance here:\n\n//max view distance, far clippig sphere\n#define zFar 1000.\n//max raymarch iterations\n#define iterMarch 50.\n//epsilon heuristic tollerance >0\n#define eps .001\n//https://en.wikipedia.org/wiki/Heuristic\n\n//stress test collision with discontinity.\n//#define MakeDiscontinuous\n\n\n\n\n/* Tiny Movement Collision\nparent3: 4 BuffABCD    : https://www.shadertoy.com/view/XtXyW4\nparent2: 2 BuffAB      : https://www.shadertoy.com/view/4tfcRf  \nparent1: feature crunch: https://www.shadertoy.com/view/4dSBzW (used to be 2 buffers, is now 1)\nself   : 1 BuffA       : https://www.shadertoy.com/view/lllcRl\n/\nFamily history shows how someone unintntionally proves a new concept. \n and 2 others extract that and remove all the less novel parts.\n/\nKnown issues (super simplifications):\n Camera needs a workover. botfixed in a parent, \n  but i fail to implement it here, as its no small fix.\n  looks like it needs a reboot.\n Distance field is (lipschitz-)discontinuous, intentionally\n  Good colision detection still works witth a discontoinuous gradient.\n I accidentally made this 4 dimensional\n  Here the distance field has .w=0 (ignores 4th domain), it is up to you to change that:\n  https://www.youtube.com/watch?v=vZp0ETdD37E\n There is no Jump() towards +.y\n Falling() towards -.y is linear over time, should be quadratic gravity.\n Rotation got simplifid so much in parent1, it got \"partially broken\":\n  Euler rotation order seems very wrong here, but is not too noticable.\n  Uses euler rotation, should not use Euler rotation.\nTo do (not included yet);\n Checkerboard tiling pattern\n Offset rotating camera that never collideswith a wall \n  and that never has a wall between camerapos and camera target, by re-Using softshadow()\n  https://www.shadertoy.com/view/4dSBzW\n Include libraries\n  use libraries to make a better distance field.\n  dynamicEps()\n   https://www.shadertoy.com/results?query=DynamicEps\n  AutomaticDifferentiation()\n   https://www.shadertoy.com/results?query=automatic+differentiation\n   https://www.shadertoy.com/results?query=derivative+arithmetic\n  noise()\n   better with first AutomaticDifferentiation() and fract() scaling?\n  kelvinToRgb() blackBodyColor\n  nonVR2VR()  \n   https://www.shadertoy.com/view/XtfcRX\n  compose() \n   https://www.shadertoy.com/view/4tscRf\n   https://www.shadertoy.com/results?query=composi\n Bounding volume stuff\n  https://www.shadertoy.com/results?query=boundi\n  https://www.shadertoy.com/results?query=lighthouse  (see comments)\n reflect()\n  https://www.shadertoy.com/view/4td3Dj\n scatter() glass() TraceVolume()\n  https://www.shadertoy.com/results?query=glass\n  https://www.shadertoy.com/results?query=transpar\n  https://www.shadertoy.com/results?query=xRay\n  https://www.shadertoy.com/results?query=cloud\n hdr() high dynamic range\n General4d()\n  https://www.shadertoy.com/results?query=polychora\n  https://www.shadertoy.com/results?query=hyper\n  https://www.shadertoy.com/results?query=fibration\n  https://www.shadertoy.com/results?query=tag%3D4d\n  https://www.shadertoy.com/results?query=stereograp\n  https://www.shadertoy.com/results?query=s4\n  https://www.youtube.com/results?search_query=introduction+4d+space   (4d intro)\n  https://www.youtube.com/watch?v=LOVzytir7bM                          (4d exhibition)\n  https://www.youtube.com/results?search_query=hypercube+stereographic (4d youtube)\n Game4d() \n  https://www.youtube.com/watch?v=Tzyws5ZkSYg                          (4d Tetris)\n  https://www.youtube.com/watch?v=8IUnqm8j4BE                          (4d Snake)\n  https://www.youtube.com/user/MiegakureGame/videos                    (4d Rpg)\n hyperbolic()   stuff\n  https://www.youtube.com/results?q=hyperrogue&sp=CAJQFA%253D%253D  (hyperbolic Rogue)\n  https://www.youtube.com/watch?v=ztsi0CLxmjw                       (hyperbolic VR)\n  https://www.youtube.com/watch?v=MTfviv_aZYI                       (hyperbolic VR)\n  https://www.youtube.com/watch?v=F7yLL5fJxT4            (boolean && hyperbolic VR)\n Add in-world buttons and sliders that buffer gradients.\n  Make a 3d UI, and then Hide the 3d ui along a 4th domain\n  ,so it does not obstruct your field of view too much AND is in-world\n dynamicScaling()\n  https://www.youtube.com/watch?v=6NsI6XgzSn8\n relativity()\n  https://www.shadertoy.com/view/ldBSDt\n  http://gamelab.mit.edu/games/a-slower-speed-of-light/\n Vehicles\n  http://wiki.secondlife.com/wiki/Linden_Vehicle_Tutorial\n  Wallwalker()\n   ollj.turboherz.de/walking-on-walls-with-a-saddle-on\n   https://www.google.com/search?q=Wall+walker+second+life\n*/\n\n\n/* df(p) Sets a distance_field gradient; \nif(    df(p)  == 0. ){ [p] is  on  a surface.}\nif(    df(p)  < eps ){ [p] touches a surface.} //[eps] is a bit like \"air pressure\"\nif(abs(df(p)) < eps ){ [p] is near a surface.} //can also be below it\n https://iquilezles.org/articles/distfunctions\n mercury.sexy/hg_sdf/\nShould return distance of [p] to an implicit surface or at least an upper boudndary:\n https://en.wikipedia.org/wiki/Gradient\n https://en.wikipedia.org/wiki/Contour_line\n https://en.wikipedia.org/wiki/Upper_and_lower_bounds\n https://en.wikipedia.org/wiki/Signed_distance_function\n https://iquilezles.org/www/index.htm\nShould be continuous, its first derivative should be continuous (over all domains)\n https://en.wikipedia.org/wiki/Continuity\n https://en.wikipedia.org/wiki/Lipschitz_continuity\n*/\n\nfloat df(vec4 p)\n{vec2 q = mod(p.xz,10.0)-5.0\n;float columns=length(q)-1.\n;float ground=(sin(p.x)+sin(p.z))*(iMouse.y/iResolution.y*5.+.2)\n#ifdef MakeDiscontinuous\n;ground=floor(ground)//making floor discontinuous stress tests the collision detection.\n#endif\n;ground=ground*.5+p.y\n;return min(ground,columns);\n}\n\nfloat df(vec3  p){return df(vec4(p,0));}//a 3d variant of the above. .w flattened to .z\nfloat df(vec2  p){return df(vec3(p,0));}//a 2d variant of the above, .z flattened to .y\nfloat df(float p){return df(vec2(p,0));}//a 1d variant of the above, .y flattened to .x\n\nfloat dfd1(float p,float d){float e=eps*d\n;return normalize(float(df(p+e)-df(p-e)))\n;return sign(float(df(p+e)-df(p-e)));}//normalize gradient over 1 domains==sign()\nvec2 dfd1(vec2 p,float d){vec2 e=vec2(eps*d,0)\n;return normalize(vec2(df(p+e.xy)-df(p-e.xy),//normalize gradient over 2 domains\n                       df(p+e.yx)-df(p-e.yx)));}\nvec3 dfd1(vec3 p,float d){vec2 e=vec2(eps*d,0)\n;return normalize(vec3(df(p+e.xyy)-df(p-e.xyy),//normalize gradient over 3 domains\n                       df(p+e.yxy)-df(p-e.yxy),\n                       df(p+e.yyx)-df(p-e.yyx)));}\n//return normal at p, == first derivative of distance field\nvec4 dfd1(vec4 p,float d){vec2 e=vec2(eps*d,0)\n;return normalize(vec4(df(p+e.xyyy)-df(p-e.xyyy),//normalize gradient over 4 domains\n                       df(p+e.yxyy)-df(p-e.yxyy),\n                       df(p+e.yyxy)-df(p-e.yyxy),\n                       df(p+e.yyyx)-df(p-e.yyyx)));}\n//modify epsilon;\n#define dfd1(a) dfd1(a,.01) \n\n\n//get buffered data (lowest line of pixels)\nvec4 tf(float x){return texelFetch(iChannel0,ivec2(x,0),0);}\n//get keyboard input\nfloat tf1(int x){return texelFetch(iChannel1,ivec2(x,0),0).x;}\n\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n//This camera rotation is barely functional, but \"good enough\"\nvec3 rotatecam(vec3 dir)\n{vec4 rotation=tf(5.)\n;dir.xy*=rot(rotation.y*sin(rotation.x))\n;dir.yz*=rot(rotation.y*cos(rotation.x))\n;dir.xz*=rot(rotation.x)\n;return dir;}\n\n\nvec3 rotatecamB(vec3 dir) {\n    vec4 rotation = tf(5.);//getbuffer(2,0);\n    \n    \n    //dir.xy *= rot(rotation.y);\n    dir.yz *= rot(rotation.y);\n    dir.xz *= rot(rotation.x);\n    \n    \n    \n    return dir;\n}\n\n#define iu(c,f) else if(u.x-.5==c){if(!b){o=vec4(c,f);return;}o=tf(c)\n#define iv(c,f) iu(c,f);o.xyz=rotatecam(f); \n\nvoid move( out vec4 o, in vec2 u ){\n;bool b=all(equal(tf(6.),vec4(1)))\n;if(u.x==.5\n){if(!b){o = vec4(0,10,0,1);return;\n }o=texelFetch(iChannel0,ivec2(0),0)\n ;vec3 h=o.xyz,f=vec3(0,-3,0)//head and feet offset to camera\n ;h.y-=clamp(df(h+f),-.1,.1)\n ;vec2 m=vec2(tf1(39)-tf1(37)//left-right\n             ,tf1(38)-tf1(40)//up  -down\n )*iTimeDelta*3.*mat2(normalize(tf(2.).xz),normalize(tf(4.).xz))\n ;if(df(h+vec3(m,0.0).xzy)>0.5//head collider\n )h.xz+=m;o.xyz=h;return;//push camera back\n}if (all(equal(u,vec2(1.5,0.5)))\n){o=iMouse/iResolution.xyxy;\n}iv(2.,vec3(1,0,0))//rotate around 3 axes.\n}iv(3.,vec3(0,1,0))\n}iv(4.,vec3(0,0,1))\n}iu(5.,vec3(0))\n ;vec4 l=tf(1.)*iResolution.xyxy,d=vec4(0)//mouseLast,mouseDelta\n ;if(all(greaterThan(min(l,iMouse),vec4(0)))\n ){d =iMouse-l;\n }o.x-=d.x*0.02\n ;o.y=clamp(o.y-d.y*.01,-1.5,1.5);\n}else if(u.x==6.5)o=vec4(1);}\n\n#define u5(a) ((a)*.5+.5)\n\n#define gthv greaterThan(h,vec2\n#define floatbool2 );return float(b.x==b.y);}\nfloat checkerBool (vec2 h){h=fract(h);return float(h.x>.5==h.y>.5);}\n//checkerBool2() might be faster than checkerBool() //xy are independent\nbvec2 rov(bvec2 a){return a.yx;}\nbvec3 rov(bvec3 a){return a.yzx;}\nbvec4 rov(bvec4 a){return a.ywzx;}\nfloat checkerBool2(vec2 h)\n {bvec2 b=greaterThan(fract(h),vec2(.5));\n  bool t=all(equal(b,rov(b)));\n  return float(t);}\n\nvoid render(out vec4 o, in vec2 u )\n{u= (u.xy * 2.0 - iResolution.xy) / iResolution.y\n;vec3 p = tf(0.).xyz\n;vec3 dir=normalize(vec3(u,1))*mat3(tf(2.).xyz,tf(3.).xyz,tf(4.).xyz)\n;float d,l\n;for(float i=.0;i< iterMarch;i++)\n {l=df(p)\n ;d+=l\n ;p+=dir*l\n ;if(d>zFar||l<.01)break;\n}\n if(d<=zFar)\n{vec3 normals  =dfd1(p)//surface normals, gradient first derivativ\n;vec3 curvature=dfd1(normals);//surfae curvatuve, gradient second derivative\n;vec3 rainbow=sin(p);//diffuse https://www.google.de/search?q=unicorn+puking+rainbows\n float mf=iMouse.x/iResolution.x;//blending depends on where you las klicked.\n o=vec4(u5(mix(normals,rainbow,mf)),1.);\n //o=vec4(sin(p)*.5+.5,1);//rainbow olored walls\n}}\n\nvoid mainImage( out vec4 o, in vec2 u ){\n if(u.y<.6)move(o,u);\n else render(o,u);\n}\n\n/*  ^\n    |\n   38\n<-37,39->\n   40\n    |\n    v    arrow key codes */",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}