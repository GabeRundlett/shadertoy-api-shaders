{
    "Shader": {
        "info": {
            "date": "1667020434",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "Ddl3Ds",
            "likes": 7,
            "name": "Fractal mosaic 34 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    vec3 col = vec3(0.);\n        \n    vec2 uv = (fragCoord)/iResolution.y/4.0;\n    \n    uv += vec2(iTime/2.0,iTime/3.0)/16.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/4.;\n    vec2 uv1 = uv;\n    for(int k = 0; k < 6; k++){ \n        vec2 offset =\n            vec2(uv.x*2.+.5,uv.y*2.)\n        ;\n        //offset += floor(uv.x-uv.y)/8.;\n        uv =\n            abs(fract(uv.yx-offset)-.5)\n            //abs(fract(uv.yx/1.5-offset)-.5)\n            //abs(fract(uv.yx+offset)*fract(uv.yx-offset)-.5)\n        ;\n        if(uv.y > uv.x) col = vec3(col.yz,abs(uv.x-uv.y));\n    }\n    \n    fragColor = vec4(min(col*2.,vec3(1.)),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod2(float a, float b){\n    return mod(floor(a),b)*b;\n}\n\nfloat fmod1(float a, float b){\n    //a += floor(a/pow(2.,fmod2(a/2.,2.)));\n    //a += fmod2(a,4.);\n    //a += pow(b,mod(floor(a/b),2.));\n    //divide by prime numbers to get interesting rhythms\n    \n    /*\n    for(float i = 1.; i < mod(floor(a),8.); i++){\n        a += mod(floor(a/2.),b)*i;\n        a *= 1.+mod(floor(a)*2.,2.);\n        i /= 1.+mod(floor(a)*2.,2.);\n    }\n    */\n    \n    \n    float a1 = floor(a);\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/8.),2.);\n    return\n        mod(floor(a),b)\n        //mod(floor(a)*floor(a/b),b)\n        //max(mod(floor(a+floor(a/8./8.))*floor(a),b),mod(floor(a),b))\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod1(a,b)\n        //floor(fmod1(a,b*2.)*fmod1(a*2.,b*2.)/b/2./2.)\n    ;\n}\n\n\n//#define fmod(a, b) mod(mod(floor((a)),floor(1.+(a)/5.)),b)\n//#define fmod(x,y) mod(floor((x)/(1.+mod(floor((x)/8.),2.))),y)\n//#define fmod(x,y) mod(floor(floor(x)+floor((x)/8.)/8.),y)\n\n#define fmod1(x,y) mod(floor((x)+mod(floor((x)/y),y)),y)\n#define fmod2(x,y) mod(floor(x-floor((x)/y)),y)\n#define fmod3(x,y) mod(floor(x)+mod(floor(x*2.),y)*2.,y)\n#define fmod4(x,y) mod(floor(x+mod(floor((x)/y)/y,y)),y)\n#define fmod5(t,d) mod((1.+floor(t+d))*(floor(t*2.+d/2.)),d)\n#define fmax(x,y,z) max(fmod(x,z),fmod(y,z))\n#define fmax1(x,y) max(mod(floor((x)/2.),y),mod(floor(x),y))\n#define floor1(x) floor(x)*pow(floor(mod((x)/4.,3.)),2.)\n\n\n\nvec2 mainSound(int samp, float t){\n  float tempo = 1.;\n  t /= tempo;\n  //t = t*(1. + fmod(t*8./2.,2.))/2.;\n  \n  float s1 =\n      8.,\n  t1 = floor(t*s1+floor(t/s1))/s1;\n  t = t + t1;\n  \n  t /=\n      (1.+fmod(t/2.,2.))\n      //(1.+fmod(t/2.+t1*s1,2.))\n      //(1.+fmod(t*pow(2.,fmod(t/4.,3.)),2.))\n      //(1.+fmod(t/2.+floor(t/s1),2.))\n      //(1.+fmod(floor(floor(t*s1+floor(t/s1))/s1/2.),2.))\n  ;\n  float m3 =\n      fmod(t,s1)\n      //fmod(t+floor(t*8.)/8.,s1)\n  ;\n  t *=\n      (1.+fmod(t*s1,2.))\n      //(1.+fmod(floor(t*s1)*floor(t/s1),2.))\n      //(1.+fmod(floor(t*s1)+floor(t/s1),2.))\n  ;\n      \n  float a=\n      32.*sqrt(fract(-t)/2.)\n      //pow(2.-log(fract(t)/2.),2.)\n      //sqrt(fract(-t)*fract(-t*2.)/2.)*.2\n      //log(1.+fract(-t))*.2\n      //sqrt((1.-sqrt(fract(t))))*.2\n  ,\n\n  nb = t*tempo*pow(2.,(m3)/5.+7.);\n\n  return\n      abs(.5-vec2(fract(nb*.998),fract(nb)))*a\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      \n      //vec2(fract(t*nb*.998*m1),fract(t*nb*m1))*a\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}