{
    "Shader": {
        "info": {
            "date": "1587575862",
            "description": "Another modification of my [url=https://www.shadertoy.com/view/3s2cW3]\"Marbled landscape\"[/url] fractal.\n\nClick and drag the mouse to zoom in!",
            "flags": 0,
            "hasliked": 0,
            "id": "3dffzn",
            "likes": 1,
            "name": "Suminagashi",
            "published": 3,
            "tags": [
                "fractal",
                "marbling",
                "suminagashi"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 370
        },
        "renderpass": [
            {
                "code": "\n//This parameter changes the magnification.\nconst float mag = 9.0;\nconst float distortion_scale = mag*mag;\n\nconst int GREEN = 0;\nconst int BLUE = 1;\nconst int GRAY = 2;\nconst int YELLOW = 3;\nconst int WHITE = 4;\nconst int FOREST_GREEN = 5;\nconst int LIGHTBLUE = 6;\nconst int SKYBLUE = 7;\nconst int SNOW = 8;\nconst int WHITESMOKE = 9;\nconst int LIGHTGRAY = 10;\nconst int LIME = 11;\nconst int LIGHTYELLOW = 12;\nconst int BEIGE = 13;\nconst int SAND = 14;\nconst int TAN = 15;\nconst int ORANGE = 16;\nconst int RED = 17;\nconst int BLACK = 18;\nconst int DARKGRAY = 19;\nconst int ORANGERED = 20;\n\nconst int FOREST_BIOME = 5;\n\n//this function is from https://www.shadertoy.com/view/4djSRW\nint hash12(vec2 p,float num_colors)\n{\n    //set the number of colors to be randomly generated\n    \n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return int(floor(fract((p3.x + p3.y) * p3.z)*num_colors));\n}\n    \nint magnify(vec2 fragCoord,float mag,float num_colors){\n    return hash12(floor(fragCoord/pow(3.0,mag)),num_colors);\n}\n\nivec4 get_neighbors(vec2 fragCoord,float mag,float colors){\n\treturn ivec4(magnify(fragCoord+vec2(0,1),mag,colors),\n        magnify(fragCoord+vec2(1,0),mag,colors),\n        magnify(fragCoord-vec2(0,1),mag,colors),\n        magnify(fragCoord-vec2(1,0),mag,colors));\n}\n\n\nbool is_next_to(int color,ivec4 neighbors){\n\treturn (neighbors.x == color)\n        || (neighbors.y == color)\n        || (neighbors.z == color)\n        || (neighbors.w == color);\n}\n\nvec3 rgb(float r,float g,float b){\n\treturn vec3(r,g,b)/255.0;\n}\n\nvec3 get_color(int color){\n    if(color == BLUE){\n    \treturn vec3(0.149,0.141,0.912);\n   \t}\n    else if(color == GREEN){\n    \treturn vec3(0.000,0.833,0.224);\n   \t}\n    else if(color == FOREST_GREEN){\n    \treturn rgb(34.0,139.0,34.0);\n   \t}\n    else if(color == WHITE){\n    \treturn vec3(1.0,1.0,1.0);\n   \t}\n    else if(color == GRAY){\n    \treturn vec3(192.0,192.0,192.0)/255.0;\n    }\n    else if(color == YELLOW){\n    \treturn vec3(1.0,1.0,0.0);\n   \t}\n    else if(color == LIGHTBLUE){\n    \treturn rgb(173.0,216.0,230.0);\n   \t}\n    else if(color == SKYBLUE){\n    \treturn rgb(135.0,206.0,235.0);\n    }\n    else if(color == SNOW){\n    \treturn rgb(255.0,250.0,250.0);\n    }\n    else if(color == WHITESMOKE){\n    \treturn rgb(245.0,245.0,245.0);\n    }\n    else if(color == LIGHTGRAY){\n    \treturn rgb(211.0,211.0,211.0);\n    }\n    else if(color == LIME){\n    \treturn rgb(0.0,255.0,0.0);\n    }\n    else if(color == LIGHTYELLOW){\n    \treturn rgb(255.0,255.0,153.0);\n    }\n    else if(color == BEIGE){\n    \treturn rgb(245.0,245.0,220.0);\n    }\n    else if(color == TAN){\n    \treturn rgb(210.,180.,140.);\n    }\n    else if(color == ORANGE){\n    \treturn vec3(255,127,80)/255.0;\n    }\n    else if(color == RED){\n    \treturn vec3(1.0,0.0,0.0);\n   \t}\n    else if(color == DARKGRAY){\n    \treturn rgb(128.0,128.0,128.0);\n    }\n    else if(color == ORANGERED){\n    \treturn rgb(255.0,69.0,0.0);\n    }\n}\n\n\nint forest_biome(inout int color1, ivec4 neighbors){\n\tint BLUE = 0;\n    int GREEN = 1;\n    int YELLOW = 2;\n    int GRAY = 3;\n    int FOREST_GREEN = 4;\n    int WHITE = 5;\n    return (color1 == BLUE && is_next_to(GREEN,neighbors))\n        ? GREEN\n    :(color1 == YELLOW)\n        ? GREEN\n    :(color1 == WHITE && is_next_to(FOREST_GREEN,neighbors))\n        ? FOREST_GREEN\n    :(color1 == GRAY && is_next_to(GREEN,neighbors))\n        ? WHITE\n    :(color1 == GREEN && is_next_to(YELLOW,neighbors))\n        ? WHITE\n    :(color1 == GREEN && is_next_to(WHITE,neighbors))\n        ? FOREST_GREEN\n    :(color1 == FOREST_GREEN && is_next_to(GREEN,neighbors))\n        ? GREEN\n    :color1;\n\n}\n\n\nvoid biome(inout int color1, ivec4 neighbors,int biome){\n    color1 = forest_biome(color1,neighbors);\n}\n\nint biome(in vec2 fragCoord,float mag,float zoom,int colors[6],int biome1){\n    fragCoord *= zoom;\n\n    \n    float num_colors = float(colors.length());\n    float warp = 50.0;\n    float avg = (warp*(mag));\n    fragCoord += vec2(sin(fragCoord.y/avg),sin(fragCoord.x/avg))*mag*mag;\n\n    int color1 = magnify(fragCoord,mag,num_colors);\n    \n    ivec4 neighbors;\n    \n    while(mag > 1.0){\n        avg =(warp*(mag));\n        fragCoord += vec2(sin((fragCoord.y)/avg+iTime)*(3.0+sin(fragCoord.y/warp)*2.0),sin(fragCoord.x/avg+iTime)*(3.0+sin(fragCoord.x/warp)*2.0))*mag*mag;\n\n        neighbors = get_neighbors(fragCoord,mag,num_colors);\n    biome(color1, neighbors,biome1);\n    mag -= 1.0;\n    }\n    return colors[int(color1)];;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = mag*(((iMouse.x-iMouse.y)*2.0+iResolution.x)/iResolution.x);\n    fragCoord *= zoom;\n    fragCoord = fragCoord + floor(iTime*50.0)*vec2(mag,0.0);\n\n    //choose the biome here\n\tint biome = biome(fragCoord,mag,1.0,int[](BLUE,GREEN,YELLOW,GRAY,FOREST_GREEN,WHITE),FOREST_BIOME);\n    \n    fragColor = vec4(get_color(biome),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}