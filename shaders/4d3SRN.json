{
    "Shader": {
        "info": {
            "date": "1457830061",
            "description": "Simple plasma cube. ",
            "flags": 64,
            "hasliked": 0,
            "id": "4d3SRN",
            "likes": 24,
            "name": "Plasma cube",
            "published": 3,
            "tags": [
                "cube",
                "plasma",
                "rm"
            ],
            "usePreview": 0,
            "username": "patu",
            "viewed": 3050
        },
        "renderpass": [
            {
                "code": "// ShaderToy extension for Chrome:\n// http://bit.ly/shadertoy-plugin\n\nconst vec3 BOX = vec3(1.0);\nconst float PI = 3.14159265;\nconst vec3 e = vec3(0.02,0,0);\n\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 d = abs(p) - b;\n  return min(max(d.x ,max(d.y, d.z)), 0.0) +\n         length(max(d, 0.0));\n}\n\nmat3 rotationZ(float k) {\n    return mat3( // rotationZ matrix;\n        vec3(cos(k), -sin(k), 0.0),\n        vec3(sin(k), cos(k), 0.0),\n        vec3(0.0, 0.0, 1.0)\n    );  \n}\n    \n    \nmat3 rotationX (float k) {\n    return  mat3( // rotationX matrix;\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, cos(k * 1.2), -sin(k * 1.2)),\n        vec3(0.0, sin(k * 1.2), cos(k * 1.2))        \n    ); \n}\n\nvec4 cubePlasma (vec2 coord, vec3 p) {\n    \n    float \n        k = iTime * 3.0,\n        as = 4.78207464329,\n    \tfd = 12.18910931609,\n    \tas1 = 2.839499561581 / 24.0 + sin(k) * 0.02,\n    \tfd2 = 2.188989119604,\n    \tps = -5.624243766069,\n    \tps2 = 9.393007904291,\n    \tp1 = sin(k / ps) * 4.0,\n    \tp2 = sin(k / fd) * 3.0,\n    \tt3 = sin(k / fd2) + cos(as1),\n        t4 = sin(k / ps);    \n    \n    coord.x = floor(coord.x * 16.0) / 16.0;\n    coord.y = floor(coord.y * 16.0) / 16.0;\n    \n    float x = sin(p1 + coord.x) * sin(p2 + coord.y) + sin(t3 + coord.x) * sin(t4 + coord.y) * -p.x;\n    \n    float r = (0.87 + sin((x / as1 ) / 8.0) + sin(x / as1)) / 2.0;\n    float g = (0.42 + sin(x / as1)) / 2.0; \n    float b = (0.77 + sin(x / as1 )) + sin(coord.y / as1) / 14.0;\n\n    if (\n        coord.y <= -0.9 || coord.y >= 0.9 ||\n        coord.x <= -0.9 || coord.x >= 0.9    \n    ) { \n        r += 2.;  \n        b += 2.; \n        g += 2.; \n    }\n    \n  \n    vec4 color = vec4(vec3(r, g, b) * 2.0, 1.0);\n     \n    return color;\n    \n}\n\nvec4 boxmap( in vec3 p, in float k ) {\n    vec3 m = pow( abs(p), vec3(k) );\n\tvec4 x = cubePlasma(p.yz, p);\n\tvec4 y = cubePlasma(p.zx, p);\n\tvec4 z = cubePlasma(p.xy, p);\n\treturn (x * m.x + y * m.y + z * m.z) / (m.x + m.y + m.z);\n}\n\nvec2 distance_to_obj(in vec3 p) {\n    return vec2(sdBox(p, vec3(1.)), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    \n  \tconst float maxd = 20.0; //Max depth\n  \t\n    vec2 vPos = fragCoord.xy/iResolution.xy - 0.5;\n    vec2 ovPos = vPos;\n    \n    vec2 d = vec2(0.5, 0.0);    \n    \n    fragColor = vec4(0.0);\n    \n  \tvec3 c, p, N, vuv, vrp, prp;    \n        \n    float \n        k = iTime,\n    \tf = 1.0, // ray start\n    \tmx,\n        my;\n    \n    k = iTime * 1.7;\n\n    float glow = 0.0;\n\n    vPos.x += sin(vPos.y * 2. + k) / 48.;\n\t\n    // Camera setup.\n    vuv = vec3(0, -1., 0.); \n    prp = vec3(3.\n        //sin(k) * 6.3,\n        //sin(k) * 5.2,\n        //cos(k) * 6.\n    ); //cam position\n    \n    vrp = vec3(0);\n     \n    // Camera setup.\n    \n    vec3 vpn = normalize(vrp - prp);\n    vec3 u = normalize(cross(vuv, vpn));\n    vec3 v = cross(vpn, u);\n    vec3 vcv = (prp + vpn);\n    vec3 scrCoord = vcv + vPos.x * u * iResolution.x / iResolution.y + vPos.y * v;\n    vec3 scp = normalize(scrCoord - prp);\n\n    // Raymarching.\n    float minDist = 140.;\n    for (int i = 0; i < 32; i++) {\t\n      \n        if ((abs(d.x) < .01) || (f > maxd)) break;\n   \n        f += d.x;\n        p = prp + scp * f;    \n        p = p * rotationZ(k) * rotationX(k);\n        d = distance_to_obj(p);\n        if (i < 6) {\n        \tminDist = min(minDist, d.x * 7.);\n        }\n        //minDist += min(minDist, d.x * 3.) / 2.;\n        if (i < 6) glow = pow( 1. / minDist, 0.8);\n    }  \n  \n    if (f < maxd){\n\n        if (d.y == 1.0) c = boxmap( p, 34.0 ).xyz;\n      \n        vec3 n = vec3(\n            d.x - distance_to_obj(p - e.xyy).x,\n            d.x - distance_to_obj(p - e.yxy).x,\n            d.x - distance_to_obj(p - e.yyx).x\n        );\n    \n        N = normalize(n);\n\t\tvec3 L = vec3(8.5 , 1.0, 8.0 );\n        float b = abs(dot(N, normalize(prp - p + L)));\n\t\t\n        fragColor += vec4(max((b * c + pow(b, 64.0)) * (1.0 - f *.01), 0.0), 1.0);\n        \n        \n  \t} else {\n        \n        fragColor = vec4(vec3(normalize(scp) / 2.), 0.) + glow;\n    }\n}\t \n \t\t\t\t    ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 2418,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/decrunch/aceman-munch-your-lunch"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}