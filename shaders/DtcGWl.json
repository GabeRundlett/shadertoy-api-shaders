{
    "Shader": {
        "info": {
            "date": "1683282533",
            "description": "Soddy Circles (or Apollonian Gasket) used to construct multiple varifocal mirrors (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "DtcGWl",
            "likes": 37,
            "name": "Soddy's Mirror",
            "published": 3,
            "tags": [
                "reflection",
                "apollonian",
                "android",
                "bumpmap",
                "gasket",
                "soddy"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "// \"Soddy's Mirror\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// Based on \"Shaded Gasket\"\n\n#define AA  1  // (= 0/1)\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRndBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 HsvToRgb (vec3 c);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nmat3 StdVuMat (float el, float az);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_CIRC  3  // odd value (>= 3)\n\nvec3 limCirc[N_CIRC + 1], invCirc[N_CIRC + 1], sunDir, msOrg;\nvec2 rAngHCs, rAngACs, rAngShCs;\nfloat tCur, dstFar, msDep, mDskRad, frmWid, mirFac;\nint idObj;\nbool isRefl, isSh, oneFace;\nconst int idFrm = 1, idRob = 2, idEye = 3;\nconst int maxIt = 64;\nconst float pi = 3.1415927;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nstruct Mob {\n  vec2 a, b, c, d;\n};\n\nvec2 CMul (vec2 a1, vec2 a2)\n{\n  return vec2 (a1.x * a2.x - a1.y * a2.y, a1.x * a2.y + a1.y * a2.x);\n}\n\nvec2 CConj (vec2 a)\n{\n  return vec2 (a.x, - a.y);\n}\n\nfloat CModSq (vec2 a)\n{\n  return a.x * a.x + a.y * a.y;\n}\n\nvec2 CDiv (vec2 a1, vec2 a2)\n{\n  return CMul (a1, CConj (a2)) / CModSq (a2);\n}\n\nvec2 MobOp (Mob m, vec2 z)\n{\n  return CDiv (CMul (z, m.a) + m.b, CMul (z, m.c) + m.d);\n}\n\nMob MobInv (Mob m)\n{\n  return Mob (m.d, - m.b, - m.c, m.a);\n}\n\nMob MobProd (Mob m1, Mob m2)\n{\n  return Mob (CMul (m1.a, m2.a) + CMul (m1.b, m2.c), CMul (m1.a, m2.b) + CMul (m1.b, m2.d),\n     CMul (m1.c, m2.a) + CMul (m1.d, m2.c), CMul (m1.c, m2.b) + CMul (m1.d, m2.d));\n}\n\nvec3 MobToCirc (Mob m, vec3 c)\n{\n  vec2 z;\n  z = MobOp (m, c.xy - CDiv (vec2 (c.z * c.z, 0.), CConj (c.xy + CDiv (m.d, m.c))));\n  return vec3 (z, length (z - MobOp (m, c.xy + vec2 (c.z, 0.))));\n}\n\nMob CircToMob (vec3 c)\n{\n  Mob m;\n  m = Mob (vec2 (c.z, 0.), c.xy, vec2 (0.), vec2 (1., 0.));\n  return MobProd (MobProd (m, Mob (vec2 (0.), vec2 (1., 0.), vec2 (1., 0.), vec2 (0.))),\n     Mob (m.d, m.b * vec2 (-1., 1.), m.c, m.a));\n}\n\nvoid CircInit ()\n{\n  float a, r, rs;\n  a = pi / float (N_CIRC);\n  r = 1. / cos (a);\n  rs = sqrt (r * r - 1.);\n  for (int j = 0; j < N_CIRC; j ++) {\n    limCirc[j] = vec3 (sin (2. * a * float (j) - vec2 (0.5 * pi, 0.)) * r, rs) * (r - rs);\n    invCirc[j] = vec3 (sin (2. * a * float (j) + vec2 (0.5 * pi, 0.)) * r, rs);\n  }\n  limCirc[N_CIRC] = vec3 (0., 0., 1.);\n  invCirc[N_CIRC] = vec3 (0., 0., r - rs);\n}\n\n#define DDOT(x) dot ((x), (x))\n\nvec4 PCirc (vec2 p, vec2 pm)\n{\n  Mob mm, m;\n  vec3 g, gi, w;\n  vec2 z, cm;\n  float eps;\n  bool done;\n  eps = 1e-9;\n  CircInit ();\n  z = p;\n  mm = Mob (vec2 (1., 0.), vec2 (0.), vec2 (0.), vec2 (1., 0.));\n  if (DDOT (pm) > 0.0005 && DDOT (pm) < 1.) {\n    cm = pm * vec2 (-1., 1.) / DDOT (pm);\n    m = CircToMob (vec3 (cm, sqrt (DDOT (cm) - 1.)));\n    z = MobOp (m, z);\n    mm = MobProd (m, mm);\n  }\n  for (int it = VAR_ZERO; it < maxIt; it ++) {\n    done = true;\n    for (int j = 0; j <= N_CIRC; j ++) {\n      gi = invCirc[j];\n      if (DDOT (z - gi.xy * vec2 (1., -1.)) < gi.z * gi.z) {\n        g = gi;\n        done = false;\n        break;\n      }\n    }\n    if (! done) {\n      if (g.x == 0.) g.x = eps;\n      m = CircToMob (g);\n      z = MobOp (m, z);\n      mm = MobProd (m, mm);\n    } else break;\n  }\n  mm = MobInv (mm);\n  if (CModSq (mm.c) == 0.) mm.c = vec2 (eps, 0.);\n  w.z = 1.;\n  for (int j = 0; j <= N_CIRC; j ++) {\n    g = MobToCirc (mm, limCirc[j]);\n    if (g.z > 0. && g.z < 1.) {\n      w.xy = (p - g.xy) / g.z;\n      w.z = DDOT (w.xy);\n      if (w.z < 1.) break;\n    }\n  }\n  return vec4 (w, g.z);\n}\n\nfloat RobDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, szFac;\n  p.xz = vec2 (- p.z, p.x);\n  szFac = 0.2;\n  p /= szFac;\n  dMin /= szFac;\n  p.yz = Rot2Cs (p.yz, rAngShCs);\n  q = p; \n  q.y -= 2.3;\n  d = max (PrSphDf (q, 0.85), - q.y);\n  q.y -= -0.08;\n  d = min (d, PrCylDf (q.xzy, 0.75, 0.1));\n  q = p;\n  q.y -= 1.55;\n  d = min (d, PrRoundCylDf (q.xzy, 0.62, 0.28, 0.42));\n  q = p;  \n  q.xz = Rot2Cs (q.xz, rAngHCs);\n  q.x = abs (q.x) - 0.3;\n  q.y -= 3.1;\n  q.xy = Rot2Cs (q.xy, CosSin (0.2 * pi));\n  q.y -= 0.25;\n  d = min (d, PrRoundCylDf (q.xzy, 0.02, 0.04, 0.26));\n  q = p;\n  q.x = abs (q.x);\n  q.xy -= vec2 (1.05, 2.1);\n  q.yz = Rot2Cs (q.yz, rAngACs);\n  q.y -= -0.5;\n  d = min (d, PrRoundCylDf (q.xzy, 0.05, 0.15, 0.45));\n  q = p;\n  q.x = abs (q.x);\n  q.xy -= vec2 (0.4, 0.475);\n  d = min (d, PrRoundCylDf (q.xzy, 0.1, 0.15, 0.4));\n  DMIN (idRob);\n  q = p;\n  q.xz = Rot2Cs (q.xz, rAngHCs);\n  q.x = abs (q.x);\n  q -= vec3 (0.4, 2.7, 0.6);\n  d = PrSphDf (q, 0.15);\n  DMIN (idEye);\n  return szFac * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r;\n  dMin = dstFar;\n  q = p;\n  q.y -= msOrg.y;\n  r = length (q.xy) - mDskRad;\n  if (! isRefl) {\n    d = max (abs (r - frmWid) - frmWid, abs (q.z) - msDep);\n    DMIN (idFrm);\n    q = p;\n    q.y -= 0.2 * frmWid;\n    d = PrRndBoxDf (q, vec3 (0.5, 0.2 * frmWid, msDep), 0.01);\n    DMIN (idFrm);\n  }\n  if (isSh && ! oneFace) {\n    d = max (r, abs (q.z) - 0.1);\n    DMIN (idFrm);\n  }\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (13. * ((length (q.xz) > 0.) ? atan (q.z, - q.x) /\n     (2. * pi) : 0.)) + 0.5) / 13.);\n  q.x += 1.5;\n  dMin = RobDf (q, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0001, -0.0001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  isSh = true;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.02 * d, h));\n    d += max (h, 0.02);\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  isSh = false;\n  return 0.6 + 0.4 * sh;\n}\n\nfloat CylHit (vec3 ro, vec3 rd, float cylRad, float cylLen)\n{\n  vec3 s;\n  float dMin, d, a, b, w, srdz;\n  dMin = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - cylRad * cylRad);\n  if (w > 0.) {\n    srdz = sign (rd.z);\n    if (a > 0.) {\n      d = - b - sqrt (w);\n      if (d > 0.) {\n        d /= a;\n        s = ro + d * rd;\n      } else s.z = cylLen;\n    } else s.z = cylLen;\n    if (abs (s.z) < cylLen) {\n      dMin = d;\n    } else if (srdz * ro.z < - cylLen) {\n      d = - (srdz * ro.z + cylLen) / abs (rd.z);\n      if (d > 0.) {\n        s = ro + d * rd;\n        if (length (s.xy) < cylRad) {\n          dMin = d;\n        }\n      }\n    }\n  }\n  return dMin;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  vec2 w, e;\n  float sd, f;\n  e = vec2 (0.01, 0.);\n  if (rd.y == 0.) rd.y = 1e-3;\n  if (rd.y > 0.) {\n    ro.xz += 2. * tCur;\n    sd = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * (1. - rd.y) +\n       0.1 * pow (sd, 16.) + 0.2 * pow (sd, 256.);\n    f = Fbm2 (0.02 * (ro.xz + rd.xz * (100. - ro.y) / rd.y));\n    col = mix (col, vec3 (1.), clamp (0.2 + 1.6 * f * rd.y, 0., 1.));\n  } else {\n    ro -= (ro.y / rd.y) * rd;\n    w = 4. * ro.xz;\n    f = Fbm2 (w);\n    col = mix (vec3 (0.3, 0.4, 0.1), vec3 (0.4, 0.5, 0.2), 2. * f) * (1. - 0.1 * Noisefv2 (w));\n    vn = normalize (vec3 (f - vec2 (Fbm2 (w + e.xy), Fbm2 (w + e.yx)), 0.05)).xzy;\n    col *= 0.1 + 0.9 * max (dot (vn, sunDir), 0.);\n    col = mix (col, vec3 (0.45, 0.55, 0.7), pow (1. + rd.y, 64.));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 p4;\n  vec3 col, vn;\n  vec2 p;\n  float dstObj, dstMir, sh, nDotL, sz;\n  bool needSh;\n  dstMir = CylHit (ro - msOrg, rd, mDskRad, 0.9 * msDep);\n  isRefl = false;\n  isSh = false;\n  sz = sign (rd.z);\n  for (int k = 0; k < 2; k ++) {\n    dstObj = ObjRay (ro, rd);\n    if (k == 0 && (dstMir < min (dstObj, dstFar) && (! oneFace || sz > 0.))) {\n      ro += dstMir * rd;\n      p = (ro.xy - msOrg.xy) / mDskRad;\n      p4 = PCirc (vec2 (- p.y, p.x), vec2 (0.));\n      p = mirFac * p4.xy;\n      vn = sz * vec3 (vec2 (- p.y, p.x), sqrt (1. - dot (p, p)));\n      rd = reflect (rd, vn);\n      ro += 0.001 * rd;\n      isRefl = true;\n    } else break;\n  }\n  needSh = false;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idFrm) {\n      vn = VaryNf (128. * ro, vn, 1.);\n      col = vec3 (0.6, 0.6, 0.7);\n    } else if (idObj == idRob) {\n      col = HsvToRgb (vec3 (fract (floor (13. * (atan (ro.z, - ro.x) / (2. * pi))) / 13. +\n         0.25), 0.8, 1.));\n    } else if (idObj == idEye) {\n      col = vec3 (1., 1., 0.8);\n    }\n    nDotL = max (dot (vn, sunDir), 0.);\n    needSh = true;\n  } else {\n    col = BgCol (ro, rd);\n    if (rd.y < 0.) {\n      ro -= (ro.y / rd.y) * rd;\n      isRefl = false;\n      vn = vec3 (0., 1., 0.);\n      needSh = true;\n    }\n  }\n  sh = (needSh) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n  if (dstObj < dstFar) col *= (0.2 + 0.2 * max (dot (vn, sunDir * vec3 (-1., 1., -1.)), 0.) +\n     0.8 * sh * nDotL * nDotL);\n  else if (rd.y < 0.) col *= sh;\n  if (isRefl) col = mix (col, HsvToRgb (vec3 (fract (0.75 - 0.9 * log2 (p4.w) /\n     log2 (float (maxIt))), 1., 1.)), 0.1 * smoothstep (0., 0.05, abs (mirFac)));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float az, el, zmFac, sr, t, rAngA;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el -= 0.5 * pi * mPtr.y;\n  } else {\n    t = 0.05 * tCur;\n    az = 0.15 * pi * SmoothBump (0.25, 0.75, 0.2, fract (t)) * sign (mod (t, 2.) - 1.);\n  }\n  el = clamp (el, -0.3 * pi, 0.01 * pi);\n  vuMat = StdVuMat (el, az);\n  oneFace = false;\n  t = 0.06 * tCur;\n  mirFac = 0.7 * SmoothBump (0.25, 0.75, 0.22, fract (t)) * sign (mod (t, 2.) - 1.);\n  t = mod (0.3 * tCur, 1.);\n  rAngHCs = CosSin (0.2 * pi * sin (2. * pi * t));\n  rAngA = 2. * pi * (0.5 - abs (t - 0.5));\n  rAngACs = CosSin (rAngA);\n  rAngShCs = CosSin (0.1 * (rAngA - 0.5 * pi));\n  mDskRad = 1.;\n  frmWid = 0.02;\n  msDep = 0.1;\n  msOrg = vec3 (0., mDskRad + frmWid, 0.);\n  zmFac = 4.;\n  ro = vuMat * vec3 (0., 0.6 * msOrg.y, -7.);\n  sunDir = normalize (vec3 (-1., 2., -1.));\n  dstFar = 50.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRndBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1.,\n     0., 1.), c.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}