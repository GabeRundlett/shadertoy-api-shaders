{
    "Shader": {
        "info": {
            "date": "1694665174",
            "description": "Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?",
            "flags": 0,
            "hasliked": 0,
            "id": "md3yRr",
            "likes": 0,
            "name": "Puzzle 2 milana 142",
            "published": 3,
            "tags": [
                "circle"
            ],
            "usePreview": 0,
            "username": "milana",
            "viewed": 128
        },
        "renderpass": [
            {
                "code": "/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\n\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n            \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    \n    uvCenter = rotatePoint2d(uvCenter, vec2(0.0, 0.0), iTime);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);  \n    \n    float time = sin(iTime * 2.5) * 0.75;\n\n    radius *= time * triangle(a / 4.f, 10.f, 2.f);\n    radius += 150.f;\n    \n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n\t\n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n\tvec4 layer2 = circle(uv, center, radius, red);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\nfloat triangle(float x, float freq, float amp) {\n    float modTerm = mod((x * freq), amp);\n    float halfAmp = 0.5f * amp;\n    return abs(modTerm - halfAmp);\n}\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}