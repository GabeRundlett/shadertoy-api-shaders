{
    "Shader": {
        "info": {
            "date": "1482189284",
            "description": "Learning deformation feedback technique described in [url=http://iquilezles.org/articles/feedbackfx/feedbackfx.htm]Ingo Quilez' tutorial[/url]. This shader is heavily based on his [url=https://www.shadertoy.com/view/Xdd3DB]demo shader[/url].",
            "flags": 32,
            "hasliked": 0,
            "id": "4ldXDl",
            "likes": 9,
            "name": "Deform Feedback Fun",
            "published": 3,
            "tags": [
                "2d",
                "deformation",
                "feedback"
            ],
            "usePreview": 1,
            "username": "revers",
            "viewed": 906
        },
        "renderpass": [
            {
                "code": "/**\n * Created by Kamil Kolaczynski (revers) - 2016\n *\n * Licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n *\n * I'm experimenting with deformation feedback effect described in Inigo Quilez' tutorial\n * [ https://iquilezles.org/articles/feedbackfxl ]\n *\n * This shader is based on:\n * - \"Deformation Feedback\" by iq [ https://www.shadertoy.com/view/Xdd3DB ]\n *\n * The shader was created and exported from Synthclipse (http://synthclipse.sourceforge.net/)\n */\nconst float Zoom = 0.102326;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 q = fragCoord / iResolution.xy;\n\tvec2 uv = q * 2.0 - 1.0;\n\n\tvec3 col = texture(iChannel0, 0.5 + (q - 0.5) * (1.0 - 2.0 * Zoom)).xyz;\n              \n\t// brightness\n\tcol = clamp(col * 2.4, 0.0, 1.0);\n    \n    // vignette by iq\n\tcol *= 0.4 + 0.6 * pow((uv.x + 1.0) * (uv.y + 1.0) * (uv.x - 1.0) * (uv.y - 1.0), 0.8);\n    \n    // top and bottom stirpes\n    col = mix(col, vec3(0.0), smoothstep(0.85, 0.855, abs(uv.y)));\n\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\n * Created by Kamil Kolaczynski (revers) - 2016\n *\n * Licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n *\n * I'm experimenting with deformation feedback effect described in Inigo Quilez' tutorial\n * [ https://iquilezles.org/articles/feedbackfxl ]\n *\n * This shader is based on:\n * - \"Deformation Feedback\" by iq [ https://www.shadertoy.com/view/Xdd3DB ]\n *\n * The shader was created and exported from Synthclipse (http://synthclipse.sourceforge.net/)\n */\n\n// Anti-aliasing\n#define ENABLE_AA\n\nconst bool AspectCorrection = false;\n\nconst float FrameWidth = 0.2;\nconst float Shift = 0.566396;\nconst float NormalFactor = 58.0;\nconst vec3 LightDir = vec3(-0.08969711, -0.3682716, 0.92538136);\n\nvec2 rot(vec2 p, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\n\treturn vec2(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\nvec2 linestep(vec2 v, float a, float b) {\n\tv = clamp(v, a, b);\n\treturn (v - a) / (b - a);\n}\n\nvec3 color(vec2 uv) {\n\treturn texture(iChannel1, uv).xyz;\n}\n\nfloat luma(vec2 uv) {\n\tvec3 col = color(uv);\n\n\treturn dot(col, vec3(0.2126, 0.7152, 0.0722));\n}\n\nvec3 pointLights(vec3 pos, vec3 nor, vec3 mat) {\n\tvec3 brdf = vec3(0.0);\n\n\tvec3 lpos = vec3(sin(iTime), cos(iTime), 1.0 + sin(iTime));\n\tvec3 lig = lpos - pos;\n\tfloat lint = length(lig); // light intensity\n\tlig /= lint;\n\n\tfloat dif = max(dot(nor, lig), 0.0);\n\n\tvec3 ref = reflect(-lig, nor);\n\tvec3 rd = vec3(0.0, 0.0, -1.0);\n\n\tfloat spe = pow(max(dot(ref, -rd), 0.0), 32.0);\n\n\tbrdf += 0.1 * vec3(1.0, 0.965, 0.471) * dif * mat;\n\tbrdf += 1.5 * vec3(1.0) * spe;\n\n\treturn brdf * (1.0 - smoothstep(0.0, 3.3, lint));\n}\n\nvec3 shade(vec2 p) {\n\tvec2 e = vec2(0.0003, 0.0);\n\n\tvec2 grad = vec2(\n\t\t\tluma(p + e.xy) - luma(p - e.xy),\n\t\t\tluma(p + e.yx) - luma(p - e.yx))\n\t\t\t/ (2.0 * e.xx);\n\n\tvec3 nor = vec3(grad, NormalFactor);\n\n\t{ // Frame\n\t\tfloat ar = AspectCorrection ? (iResolution.x / iResolution.y) : 1.0;\n\t\tvec2 q = abs(abs(p) - vec2(ar, 1.0));\n\t\tvec2 qn = linestep(q, 0.0, FrameWidth);\n\n\t\tvec2 frame = cos(2.0 * 3.141592 * qn * 1.0) * 0.5 + 0.5;\n\t\tframe = 0.4 + frame * 0.6;\n\n\t\tframe -= smoothstep(0.86, 0.87, qn) * 4.0;\n\n\t\tconst float factor = 50.0;\n\n\t\tfloat k = step(FrameWidth, q.x);\n\t\tfloat m = step(q.y, q.x);\n\t\tnor.x += mix(frame.x, 0.0, max(m, k)) * factor;\n\n\t\tk = step(FrameWidth, q.y);\n\t\tm = step(q.x, q.y);\n\t\tnor.y += mix(frame.y, 0.0, max(m, k)) * factor;\n\t}\n\tnor = normalize(nor);\n\n\tfloat dif = max(dot(nor, LightDir), 0.0);\n\n\tvec3 mat = color(p);\n\tvec3 brdf = vec3(0.0);\n\n\tbrdf += dif * vec3(1.0, 0.9, 0.8) * mat;\n\tbrdf += pointLights(vec3(p, 0.0), nor, mat);\n\n\tvec3 col = clamp(brdf, 0.0, 1.0);\n\treturn col;\n}\n\nvec3 render(vec2 p) {\n\tvec3 col = vec3(0.0);\n\tfloat ar = AspectCorrection ? (iResolution.x / iResolution.y) : 1.0;\n\tvec2 k = vec2(ar, 1.0) - FrameWidth;\n\n\tif (all(lessThan(abs(p), k))) {\n\t\tvec2 q = p * (1.0 / k);\n\t\tq = rot(q, iTime * 0.5);\n\t\tq = q * 0.5 + Shift;\n\n\t\tq = q / dot(q, q) + cos(iTime + vec2(0.0, 2.0));\n\t\tcol = 0.7 * texture(iChannel0, fract(q)).xyz;\n\t} else {\n\t\tcol = shade(p);\n\t}\n\treturn col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 coord = fragCoord / iResolution.xy;\n\tvec2 p = coord * 2.0 - 1.0;\n    \n    float ar = AspectCorrection ? (iResolution.x / iResolution.y) : 1.0;\n\tp.x *= ar;\n\n#ifdef ENABLE_AA\n    vec2 eps = 1.0 / iResolution.xy;\n    \n\tvec3 col1 = render(p - vec2(eps.x, 0.0));\n\tvec3 col2 = render(p + vec2(eps.x, 0.0));\n\tvec3 col3 = render(p - vec2(0.0, eps.y));\n\tvec3 col4 = render(p + vec2(0.0, eps.y));\n\tvec3 col = (col1 + col2 + col3 + col4) / 4.0;\n#else\n    vec3 col = render(p);\n#endif\n\tfragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}