{
    "Shader": {
        "info": {
            "date": "1607854384",
            "description": "Mouse move black hole.\nInteractive version of [url]https://shadertoy.com/view/wdt3zM[/url]\nSimulates (slow) rays trajectory around a blackhole along a 2D slice.\nPhysics adapted from set111's 3D black hole [url]https://www.shadertoy.com/view/tsBXW3[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "wdGfWy",
            "likes": 17,
            "name": "light trajectory - 2D blackhole2",
            "published": 3,
            "tags": [
                "simulation",
                "blackhole",
                "physics",
                "optics",
                "relativity"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 514
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/wdt3zM\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O-=O; \n    vec2 U = ( 2.*u - R ) / R.y, P, _P,\n         C = T(vec2(0,N)).xy;\n    O += .3*S( length(U-C) - .625*Size );    // draw BH photon sphere. why .625 ? \n    \n    float d = 1e5, i_=-1., i=0., j, v;\n    for (i=0.; i < N; i ++ ) {\n        for (P.x=-99.,j=0.; j < min(L,float(iFrame)); j ++ ) {\n            _P = P; P = T(vec2(j,i)).xy,\n            v = line( U, _P, P);\n            if ( v < d ) d = v, i_ = i;\n            v = dot(P-C,P-C);\n            if ( v < .01 ) break;\n        }\n    }   \n   if (i_>=0.) O += S( sqrt(d) -0./R.y ) * hue(i_/R.y);\n\n    \n    O = sqrt( O );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 u ) // --- simulates trajectories\n{\n    vec2 M = iMouse.xy; \n    if ( M != vec2(0) ) M = ( 2.*iMouse.xy - R ) / R.y;\n    M += .002* cos(12.*iTime+vec2(0,11));\n    if (u==vec2(.5,N+.5)) O.xy = M;\n    if ( u.y > N ) return;                    // simulates only N lines\n\n    if (u.x==.5) { \n        O = vec4( -R.x/R.y,                   // init position\n                   u.y/N *2.-1., // + 2e-4 * sin(12.*iTime),\n                   1,0);                      // init dir\n        return;\n    }\n                                              // --simulates physics\n    O = T(u-vec2(1,0));  // previous state.  O.xy = pos, O.zw = dir (normalized)\n    // Physics adapted from set111's 3D black hole https://www.shadertoy.com/view/tsBXW3\n    vec2 D = O.xy - M;\n    float r = length(D);                      // distance to BH\n    float d  = min( .92,// * abs(O.y /O.w) ,  // conservative distance to disk (y==0)   \n                   min( r*.5,                 // limit step size far from to BH \n                        r*.1 + .05*r*r/Size   // limit step size close to BH ← winner for r<5\n                  )   );\n    float F = Size * .625 /(r*r);             // bending force\n    O.zw = normalize( O.zw - d * F* D/r );    // bend ray towards BH\n    O.xy += d * O.zw;                \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define Size .6               // size of BH ( Schwarzschild radius or photon sphere ? )\n#define N    72.              // number of ray trajectories\n#define L    60.              // max segments per trajectory\n#define R    iResolution.xy\n\n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n\n// utils from https://www.shadertoy.com/view/llySRh\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b),                  // proj coord on line\n          c = clamp(h, 0., 1.);\n    p -= b * h; return h==c ? dot(p,p): 1e5;          // dist² to segment\n}\n\n#define S(v) smoothstep( 3./R.y, 0., v)\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}