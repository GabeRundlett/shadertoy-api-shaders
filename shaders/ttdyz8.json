{
    "Shader": {
        "info": {
            "date": "1608521935",
            "description": "地球のようだ。ー三上寛\n\nView from geosynchronous orbit over the equator of an earth-like planet.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttdyz8",
            "likes": 0,
            "name": "Solitary Planet",
            "published": 3,
            "tags": [
                "sphere"
            ],
            "usePreview": 0,
            "username": "redmenace07",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "const mediump vec3 diffuse = vec3(0.0, 1.0, 1.0);\nconst mediump vec3 ambient = vec3(0.1);\nconst mediump float shininess = 2.0;\nconst mediump float specularFraction = 0.1;\nconst mediump float angularFrequency = 0.10471975511966;\nconst mediump float epsilon = 0.1;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mediump float dimension = min(iResolution.x, iResolution.y);\n    mediump float maxDimension = max(iResolution.x, iResolution.y);\n    mediump float radius = 0.3 * dimension;\n    mediump float dist = 6.0 * radius;\n\n    vec2 uv = fragCoord - iResolution.xy * 0.5;\n    float apparentR = length(uv);\n\n    mediump float xi = atan(apparentR / dist);\n    float perspective = 1.0 + radius / dist * (1.0 - sin(xi));\n    float actualR = apparentR / perspective;\n\n    highp float z = sqrt(radius * radius - actualR * actualR) * step(actualR, radius);\n    vec3 position = vec3(uv / perspective, z);\n    vec3 normal = normalize(position);\n\n    float angle = angularFrequency * iTime;\n    float cosTime = cos(angle);\n    float sinTime = sin(angle);\n    vec3 light = vec3(\n        sinTime,\n        -0.398749068925246 * cosTime,\n        -0.917060074385124 * cosTime\n        );\n\n    vec3 view = normalize(position - vec3(0.0, 0.0, dist + radius));\n    vec3 reflected = reflect(light, normal);\n    float specular = pow(clamp(dot(-reflected, view), 0.0, 1.0), shininess);\n\n    vec3 diffusePlusSpecular = (1.0 + specularFraction * specular) * clamp(dot(-light, normal), 0.0, 1.0) * diffuse;\n\n    vec3 color = clamp(diffusePlusSpecular + ambient, 0.0, 1.0);\n\n    float theta = acos(position.y / radius);\n    float phi = atan(position.x / z);\n    vec2 textureCoord = vec2(phi, theta) / 3.141592653589793 + vec2(0.5, 0.0);\n    vec2 spaceCoord = fragCoord / dimension - vec2(angle, 0.0);\n\n    vec4 planetContrib = step(actualR, radius) * vec4(color, 1.0) * texture(iChannel0, textureCoord);\n\n    vec2 starCenter = iResolution.xy * 0.5 + vec2(angle, 0.0) * 2.1 * dimension;\n\n    vec4 bgContrib = 0.2 * step(radius, actualR) * texture(iChannel1, (fragCoord - starCenter)/maxDimension);\n    highp vec4 opaqueContrib = planetContrib + bgContrib;\n\n    highp vec3 atmosphereColor = clamp(dot(-light, normal), 0.0, 1.0) * vec3(1.0);\n    mediump float maxThickness = 2.0 * sqrt(1.0 + 2.0/epsilon);\n\n    highp float atmosphereAlpha = clamp(1.0/maxThickness * min(maxThickness, radius / z), 0.0, 1.0) * (1.0 - smoothstep(radius, radius * (1.0 + epsilon), actualR));\n\n    highp vec4 unclamped = vec4(mix(opaqueContrib.rgb, atmosphereColor, atmosphereAlpha), 1.0);\n    fragColor = clamp(unclamped, vec4(0.0), vec4(1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}