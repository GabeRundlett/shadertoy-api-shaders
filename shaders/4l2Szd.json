{
    "Shader": {
        "info": {
            "date": "1445940743",
            "description": "Simple 2D lighting in a procedural tile map. (Click to move the light freely.)",
            "flags": 0,
            "hasliked": 0,
            "id": "4l2Szd",
            "likes": 29,
            "name": "Dark corridors",
            "published": 3,
            "tags": [
                "2d",
                "light"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 1301
        },
        "renderpass": [
            {
                "code": "// Rendering parameters\n#define MAZE_DENSITY\t0.5\n#define MAZE_ZOOM\t\t5.0\n#define TEXTURE_ZOOM\t0.25\n#define RAY_LENGTH\t\t5.0\n#define FADE_POWER\t\t1.5\n#define AMBIENT\t\t\t0.0\n\n// Animation parameters\n#define LIGHT_SPEED_X\t\t1.7\n#define LIGHT_MOVE_X\t\t3.0\n#define LIGHT_MOVE_Y\t\t4.3\n#define LIGHT_FREQUENCY_X\t0.2\n#define LIGHT_FREQUENCY_Y1\t0.3\n#define LIGHT_FREQUENCY_Y2\t0.5\n#define FADE_VARIATION\t\t0.2\n#define FADE_FREQUENCY\t\t3.0\n\n// Math constants\n#define SQRT2\t1.41421356237\n#define DELTA\t0.001\n\n// Animation formulas\n#define LIGHT_Y(t) LIGHT_MOVE_Y * cos (LIGHT_FREQUENCY_Y1 * (t)) * cos (LIGHT_FREQUENCY_Y2 * (t))\n#define LIGHT_DY(t) LIGHT_MOVE_Y * (LIGHT_FREQUENCY_Y1 * sin (LIGHT_FREQUENCY_Y1 * (t)) * cos (LIGHT_FREQUENCY_Y2 * (t)) + LIGHT_FREQUENCY_Y2 * cos (LIGHT_FREQUENCY_Y1 * (t)) * sin (LIGHT_FREQUENCY_Y2 *(t)))\n\n// PRNG\nfloat rand (in vec2 seed) {\n\treturn fract (11.0 * sin (3.0 * seed.x + 5.0 * seed.y));\n}\n\n// Check whether there is a wall on a given tile edge\nfloat wallCheck (in vec2 p) {\n\tvec2 tile = floor (p + 0.5);\n\tfloat wall = step (1.0 - MAZE_DENSITY, rand (tile));\n\twall *= step (max (1.0, abs (LIGHT_DY (tile.x))), abs (LIGHT_Y (tile.x) - tile.y));\n\treturn wall;\n}\n\n// Return the distance to the nearest wall\nfloat wallDistance (in vec2 rayOrigin, in vec2 rayDirection) {\n\n\t// Launch the ray\n\tvec2 raySign = sign (rayDirection);\n\tvec2 rayInv = 1.0 / rayDirection;\n\tfloat rayLength = 0.0;\n\tvec2 rayLengthNext = (0.5 * raySign - fract (rayOrigin + 0.5) + 0.5) * rayInv;\n\tfor (float rayStep = 0.0; rayStep < RAY_LENGTH * SQRT2; ++rayStep) {\n\n\t\t// Reach the edge of the tile\n\t\trayLength = min (rayLengthNext.x, rayLengthNext.y);\n\t\tvec2 hitNormal = step (rayLengthNext.xy, rayLengthNext.yx) * raySign;\n\n\t\t// Check whether we hit a wall\n\t\tif (wallCheck (rayOrigin + rayLength * rayDirection + hitNormal * 0.5) > 0.5) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// Next tile\n\t\trayLengthNext += hitNormal * rayInv;\n\t}\n\n\t// Return the distance to the hit point\n\treturn rayLength;\n}\n\n// Main function\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Define the coordinates\n\tfloat cameraX = LIGHT_SPEED_X * iTime;\n\tvec2 rayOrigin = MAZE_ZOOM * (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\trayOrigin.x += cameraX;\n\n\t// Lighting\n\tvec2 lightPosition;\n\tif (iMouse.z < 0.5) {\n\t\tlightPosition.x = cameraX + LIGHT_MOVE_X * cos (LIGHT_FREQUENCY_X * iTime);\n\t\tlightPosition.y = LIGHT_Y (lightPosition.x);\n\t} else {\n\t\tlightPosition = MAZE_ZOOM * (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\t\tlightPosition.x += cameraX;\n\t}\n\tvec2 lightDirection = lightPosition - rayOrigin;\n\tfloat lightDistance = length (lightDirection);\n\tfloat lightIntensity = pow (max (0.0, 1.0 - lightDistance / RAY_LENGTH), FADE_POWER + FADE_VARIATION * cos (FADE_FREQUENCY * iTime));\n\tif (wallCheck (rayOrigin) < 0.5) {\n\n\t\t// Corridor\n\t\tif (lightDistance < RAY_LENGTH) {\n\t\t\tlightIntensity *= step (lightDistance + DELTA, wallDistance (rayOrigin, lightDirection / lightDistance));\n\t\t}\n\t\tfragColor = texture (iChannel0, rayOrigin * TEXTURE_ZOOM);\n\t} else {\n\n\t\t// Wall\n\t\tfragColor = texture (iChannel1, rayOrigin * TEXTURE_ZOOM);\n\t}\n\tfragColor *= mix (lightIntensity, 1.0, AMBIENT);\n\tfragColor += smoothstep (0.2, 0.0, lightDistance) * step (0.2, rand (vec2 (iTime)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}