{
    "Shader": {
        "info": {
            "date": "1583079831",
            "description": "Mouse over some different areas of the Mandelbrot set to see the corresponding Julia set.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tGXRy",
            "likes": 1,
            "name": "Mandelbrot&Julia Explorer (SS9)",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "shadersundays"
            ],
            "usePreview": 0,
            "username": "angelo12",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "#define AA 2\n#define ZOOMTOGGLE 0\n#define OFFSETX -1.1\n#define OFFSETY -0.2\n\n/*\n\tShader Sundays! (9/52) \n\t\"Mandelbrot&Julia Explorer\"\n\t\n\tThe inspiration for this shader came from watching this very cool video from numberphile\n\tWhere they explain the relationship between the Mandelbrot & Julia set, I wanted to see \n\tit for myself so here it is. There's some hacked in zoom I thought to put in last min,\n\tbecause you can't have a mandelbrot set without zoom. The color gradient I got from the \n\trecent IQ shader. \n\t\n\tNumberphile vid:\n\thttps://youtu.be/FFftmWSzgmk\n\tIQ Mandelbrot Shader:\n\thttps://www.shadertoy.com/view/ttVSDW\n*/\n\nvec2\nsquare(vec2 Z)\n{\n    //a^2 - b^2 + 2abi\n    return vec2(Z.x* Z.x - Z.y * Z.y, 2.0*Z.x*Z.y);\n}\n\nfloat\nmandelbrot(vec2 uv, const int max_steps, float zoom, vec2 offset)\n{\n    float res = -1.0;\n    vec2 C = uv*zoom + offset;\n    vec2 Z  = vec2(0.0);\n\n    for(int i = 0; i < max_steps; ++i)\n    {\n        Z = square(Z) + C;\n\n        if(length(Z) > 2.0)\n        {\n            res = float(i);\n            break;\n        }\n    }\n\n    return res;\n}\n\nfloat\njulia(vec2 uv, const int max_steps, float zoom, vec2 offset)\n{\n    float res = -1.0;\n    vec2 C = offset;\n    vec2 Z = uv;\n\n    for(int i = 0; i < max_steps; ++i)\n    {\n        Z = square(Z) + C;\n\n        if(length(Z) > 2.0)\n        {\n            res = float(i);\n            break;\n        }\n    }\n\n    return res;\n}\n\nvoid\nmainImage(out vec4 fragColor, in vec2 fragPos)\n{\n    //Setup\n    float time = iTime / 10.0;\n    float AR = iResolution.x / iResolution.y;\n    vec3 col = vec3(0.0);\n    vec3 tot = vec3(0.0);\n    vec2 mouse = (iMouse.xy - 0.5*iResolution.xy) / iResolution.y;\n    \n    //SS AA loop\n    for(int i = 0; i < AA; ++i)\n    for(int j = 0; j < AA; ++j)\n    {\n        vec2 offset = vec2(i, j) / float(AA) - 0.5;\n\t\t\n        vec2 muv = ((fragPos + offset) - 0.5*iResolution.xy ) / iResolution.y;\n        vec2 uv = ((fragPos + offset)) / iResolution.xy;\n\t\t\n        //Minimap setup\n        vec2 uv2 = uv;\n        uv2.x = 1.0 - uv2.x;\n        uv2 *= vec2(2.6, 2.6);\n        vec2 id = floor(uv2);\n        uv2 = vec2(1.0 - uv2.x, uv2.y);\n        vec2 juv = (fract(uv2) - 0.5);\n        juv.x *= AR;     \n\t\tfloat inJulia = saturate(1.0 - id.y) * saturate(1.0 - id.x); \n        float inMandelbrot = 1.0 - inJulia;\n        \t\t\n        //Zoom \n        const int max_steps = 500;\n        float zoom = 1.0;\n        #if ZOOMTOGGLE\n        zoom = (sin(time)* 0.5 + 0.5)*float(ZOOMTOGGLE);\n        #endif\n        \n        //Offset and Mouse movement\n        vec2 mov = vec2(OFFSETX, OFFSETY);\n        vec2 movement = mov + mouse.xy;\n\n    \t//Num Steps for Mandelbrot and Julia\n        float mI = mandelbrot(muv, max_steps, zoom, mov );        \n        float jI = julia(juv, max_steps, zoom, movement);\n\t\t\n        //Applying mandelbrot and julia colors\n        col += (mI<0.0) ? vec3(0.0) : 0.5 + 0.5*cos( pow(zoom,0.22)*mI*0.05 + vec3(7.0,2.0,3.0));\n        col *= inMandelbrot;\n        col += (jI<0.0) ? vec3(0.0) : (0.5 + 0.5*cos( pow(zoom,0.21)*jI*0.05 + vec3(2.0,2.0,5.0))) * inJulia;     \n        \n        //Mouse markers\n        col += (length(muv - mouse.xy) < 0.005) ? vec3(1.0) : vec3(0.0);\n        col += (length(juv - mouse.xy) < 0.01) ? vec3(1.0) * inJulia : vec3(0.0) ;\n\n        tot += col;\n    }\n    tot /= float(AA*AA);\n\n    GAMMA(tot);\n    fragColor = vec4(tot, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define INV_GAMMA  0.454545\n#define M_PI acos(-1.0)\n#define M_TAU M_PI*2.0\n\n//Comment this out if running this file on shadertoy\n#define SHADERTOY \n\n//------------------------------------------------------------------------------------\n//----------------------------------SDF Shaping functions-----------------------------\nfloat\nsdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat \nsdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n//------------------------------------------------------------------------------------\n//----------------------------------SDF Joining functions-----------------------------\n#define UOP(dist, ID) res = uop(res, vec2(dist, ID))\nvec2\nuop(vec2 a, vec2 b)\n{\n    return (a.x < b.x) ? a : b;\n}\n\n//------------------------------------------------------------------------------------\n//----------------------------------Rotation functions--------------------------------\nvec2 \nrotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\n//------------------------------------------------------------------------------------\n//----------------------------------Noise functions-----------------------------------\nfloat\nhash(float seed)\n{\n    uvec2 p = floatBitsToUint(vec2(seed+=.1,seed+=.1));\n    p = 1103515245U*((p >> 1U)^(p.yx));\n    uint h32 = 1103515245U*((p.x)^(p.y>>3U));\n    uint n = h32^(h32 >> 16);\n    return float(n)/float(0xffffffffU);\n}\n\n//------------------------------------------------------------------------------------\n//----------------------------------Camera functions------------------------------\nmat3\nSetCamera(vec3 ro, vec3 ta, float roll)\n{\n    vec3 f, temp, r, u;\n    f = normalize(ta - ro);\n    temp = normalize(vec3(sin(roll), cos(roll), 0.0));\n    r = normalize(cross(temp, f));\n    u = normalize(cross(f, r));\n\n    return mat3(r, u, f);\n}\n\n//------------------------------------------------------------------------------------\n//----------------------------------Path Trace functions------------------------------\nvec3\nCosineWeightedRay(vec3 N, float seed)\n{\n    float u = hash(seed + 70.93);\n    float v = hash(seed + 21.43);\n\n    float a = M_TAU*v;\n    u = 2.0*u - 1.0;\n\n    return(normalize(N + vec3(sqrt(1.0 - u*u)*vec2(cos(a), sin(a)), u)));\n}\n\n//--------------------------------------------------------------------------------------\n//----------------------------------Post processing functions----------------------------\n#define GAMMA(col) col = pow(col, vec3(INV_GAMMA))\n\n\n//---------------------------------------------------------------------------------------- \n//----------------------------------Basic functions---------------------------------------\n#ifdef SHADERTOY\n#define saturate(col) clamp(col, 0.0, 1.0)\n#endif\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}