{
    "Shader": {
        "info": {
            "date": "1571761791",
            "description": "Night view of \"Reflecting Ben-Hur Balls\" using a racetrack arena (spherical greyhounds chasing a glowing lure?); mouse selects, rotates, zooms.",
            "flags": 32,
            "hasliked": 0,
            "id": "tscSDn",
            "likes": 11,
            "name": "Racetrack",
            "published": 3,
            "tags": [
                "collision",
                "ball",
                "bounce",
                "dynamics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 481
        },
        "renderpass": [
            {
                "code": "// \"Racetrack\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Night view of \"Reflecting Ben-Hur Balls\" using a racetrack arena\n// (spherical greyhounds chasing a glowing lure?); mouse selects, rotates, zooms.\n\n#define AA  0   // optional antialiasing\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nmat3 QtToRMat (vec4 q);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nconst int nBall = 120;\nconst float nLev = 7.;\n\nvec3 rLead, rMid, vnBall, bSize, sbSize;\nfloat tCur, dstFar;\nint idBall, idObj;\nconst int idFlr = 1, idPlat = 2, idTier = 3, idWal = 4;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, h;\n  dMin = dstFar;\n  d = PrFlatCylDf ((p - vec3 (0., 0.5, 0.)).xzy, bSize.x, bSize.z, 0.01);\n  DMIN (idFlr);\n  d = PrFlatCylDf ((p - vec3 (0., 0.5 + 0.5 * sbSize.y, 0.)).xzy, 0.5 + sbSize.x,\n     0.5 + sbSize.z, 0.5 * sbSize.y);\n  DMIN (idPlat);\n  d = dMin;\n  for (float nh = 0.; nh < nLev; nh ++) \n     d = min (d, PrFlatCylDf ((p - vec3 (0., (nh + 1.) * bSize.y + 0.5, 0.)).xzy,\n        bSize.x, bSize.z - 0.5 + nh * bSize.y, bSize.y));\n  d = max (PrFlatCylDf ((p - vec3 (0., 0.5 * (nLev * bSize.y + 0.5), 0.)).xzy,\n     bSize.x, bSize.z + nLev * bSize.y - 0.25, 0.5 * (nLev * bSize.y + 0.5)), - d);\n  DMIN (idTier);\n  h = 0.5 * (nLev * bSize.y + 0.5) + 3. * bSize.y;\n  d = max (PrFlatCylDf ((p - vec3 (0., h, 0.)).xzy, bSize.x, bSize.z + nLev * bSize.y + 0.5, h),\n     - PrFlatCylDf (p.xzy, bSize.x, bSize.z + nLev * bSize.y - 0.5, 0.));\n  q = p;\n  q.y -= h + 3. * bSize.y;\n  if (d < bSize.x - 0.5 - abs (q.x)) {\n    q.x = mod (q.x + 1.28, 2.56) - 1.28;\n  } else {\n    q.x = abs (q.x) - bSize.x;\n    q.xz = Rot2D (q.xz, 2. * pi / 128.);\n    q.xz = Rot2D (q.xz, 2. * pi * (floor (64. * atan (q.z, - q.x) / (2. * pi)) + 0.5) / 64.);\n    q.x = q.z;\n  }\n  d = max (d, - max (PrFlatCylDf (q.yxz, 2. * bSize.y, 0.7, 0.), - q.y - bSize.y));\n  DMIN (idWal);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0005, -0.0005);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec4 p;\n  vec3 u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 * n);\n    u = ro - p.xyz;\n    rad = 0.47 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n        idBall = n;\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat BallHitSh (vec3 ro, vec3 rd, float rng)\n{\n  vec4 p;\n  vec3 rs, u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 * n);\n    u = ro - p.xyz;\n    rad = 0.47 * p.w;\n    b = dot (rd, u);\n    w = b * b - dot (u, u) + rad * rad;\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) dMin = d;\n    }\n  }\n  return 0.5 + 0.5 * smoothstep (0., rng, dMin);\n}\n\nfloat BallChqr (int idBall, vec3 vnBall)\n{\n  vec3 u;\n  vec2 a;\n  u = vnBall * QtToRMat (Loadv4 (4 * idBall + 2));\n  a = mod (floor (8. * vec2 (atan (u.x, u.y), asin (u.z)) / pi), 2.) - 0.5;\n  return 0.6 + 0.4 * step (0., sign (a.x) * sign (a.y));\n}\n\nvec3 BallCol ()\n{\n  float c;\n  c = 33. * float (idBall) / float (nBall);\n  return HsvToRgb (vec3 (mod (c, 1.), 1. - 0.1 * mod (c, 8.),\n     1. - 0.05 * mod (c, 13.))) * BallChqr (idBall, vnBall);\n}\n\nfloat ShGrid (vec2 p, vec2 g)\n{\n  vec2 s;\n  p *= g;\n  s = smoothstep (0.04, 0.06, abs (fract (p + 0.5) - 0.5));\n  return 0.9 + 0.1 * s.x * s.y;\n}\n\nfloat ShStagGrid (vec2 p, vec2 g)\n{\n  p *= g;\n  if (2. * floor (0.5 * floor (p.y)) != floor (p.y)) p.x += 0.5;\n  return ShGrid (p / g, vec2 (1.));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  ro.xz += 2. * tCur;\n  col = vec3 (0.1, 0.2, 0.4) + 0.2 * (1. - max (rd.y, 0.));\n  col = 0.3 * mix (col, vec3 (0.9, 0.9, 1.), clamp (0.2 + Fbm2 (0.05 *\n     (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.001))) * rd.y, 0., 1.));\n  return col * smoothstep (0., 0.2, rd.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 roo, rdo, ltPos, ltVec, ltAx, glVec, col, colB, colL, vn, q, ws;\n  vec2 cg;\n  float dstObj, dstBall, sh, c, ltFacL, ltFacB, s;\n  bool isRefl, isVert, isSky, noGrd;\n  ltPos = vec3 (0., 60., 0.);\n  ltAx = normalize (ltPos - rMid);\n  roo = ro;\n  rdo = rd;\n  dstObj = ObjRay (ro, rd);\n  dstBall = BallHit (ro, rd);\n  isRefl = false;\n  isSky = false;\n  noGrd = false;\n  if (dstBall < min (dstObj, dstFar)) {\n    isRefl = true;\n    colB = BallCol ();\n    ro += dstBall * rd;\n    rd = reflect (rd, vnBall);\n    ltVec = normalize (ltPos - ro);\n    ltFacB = dot (ltVec, ltAx);\n    ltFacL = dot (ltVec, rd);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n    dstBall = BallHit (ro, rd);\n  }\n  if (min (dstBall, dstObj) < dstFar) {\n    if (dstObj < dstBall) {\n      ro += rd * dstObj;\n      vn = ObjNf (ro);\n      if (idObj == idFlr) {\n        col4 = vec4 (vec3 (0.4, 0.35, 0.2) - 0.1 * Fbm2 (16. * ro.xz), 0.);\n        vn = VaryNf (4. * ro, vn, 1.);\n      } else {\n        isVert = (abs (vn.y) < 0.01);\n        if (idObj == idPlat || idObj == idWal || idObj == idTier) {\n          q = ro;\n          ws = (idObj == idPlat) ? sbSize + vec3 (0.5, 0., 0.) : bSize;\n          if (abs (q.x) < ws.x) {\n            cg = (isVert) ? q.xy : q.xz;\n          } else {\n            q.x -= ws.x * sign (q.x);\n            cg = vec2 (4. * ws.z * atan (q.z, q.x) / pi, ((isVert) ? q.y : length (q.xz)));\n            if (idObj == idPlat && ! isVert && cg.y < 1.) noGrd = true;\n          }\n          s = 0.;\n          if (idObj == idPlat) {\n            col4 = vec4 (0.6, 0.6, 0.7, 0.1);\n            c = (isVert) ? ShGrid (cg - vec2 (0., 0.5) * sbSize.y, vec2 (1.)) : ShGrid (cg, vec2 (1.));\n            if (isVert) {\n              s = abs (ro.y - 0.4 - sbSize.y) - 0.05;\n              if (s < 0.) col4.rgb = vec3 (0., 0., 1.);\n            } else {\n              s = abs (length (vec2 (ro.x - (sbSize.x + 0.5) * sign (ro.x), ro.z)) - 2.) - 0.1;\n              if (s < 0.) col4.rgb = vec3 (0., 1., 0.);\n            }\n          } else if (idObj == idWal)  {\n            col4 = vec4 (0.8, 0.5, 0.2, 0.05);\n            c = (isVert) ? ShStagGrid (cg, vec2 (1., 2.)) : ShGrid (cg / bSize.y, vec2 (1.));\n            s = abs (ro.y - (2. * nLev - 0.5) * bSize.y + 0.35) - 0.15;\n            if (s < 0.) col4.rgb = vec3 (1. , 0., 0.);\n          } else if (idObj == idTier) {\n            col4 = (floor (mod (ro.y / bSize.y + 0.55, 2.)) == 0.) ? vec4 (0.65, 0.62, 0.62, 0.) :\n               vec4 (0.62, 0.65, 0.62, 0.);\n            c = (isVert) ? ShGrid ((cg - vec2 (0., 0.5)) / bSize.y, vec2 (1.)) : ShGrid (cg / bSize.y, vec2 (1.));\n            s = abs (mod (ro.y / bSize.y + 0.55, 1.) - 0.85) - 0.05;\n            if (s < 0.) col4.rgb = vec3 (0., 0., 1.);\n          }\n          if (s < 0.) col4 = vec4 (col4.rgb * (0.9 - 0.6 * smoothstep (-0.02, 0., s)), -1.);\n        }\n        if (col4.a >= 0.) {\n          if (! noGrd) col4.rgb *= c;\n          col4.rgb *= 1. - 0.2 * Fbm2 (4. * cg);\n        } else {\n          if (idObj == idPlat) vn = VaryNf (8. * ro, vn, 0.5);\n        }\n      }\n      ltVec = normalize (ltPos - ro);\n      sh = min (BallHitSh (ro + 0.01 * ltVec, ltVec, 10.), ObjSShadow (ro + 0.01 * ltVec, ltVec));\n      if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, ltVec), 0.)) +\n         col4.a * sh * step (0.95, sh) * pow (max (0., dot (ltVec, reflect (rd, vn))), 32.);\n      else col = col4.rgb;\n    } else {\n      ro += dstBall * rd;\n      vn = vnBall;\n      col = BallCol ();\n      ltVec = normalize (ltPos - ro);\n      sh = ObjSShadow (ro + 0.01 * ltVec, ltVec);\n      col = col * (0.2 + 0.8 * sh * max (dot (vn, ltVec), 0.));\n    }\n  } else {\n    if (rd.y < 0.) {\n      dstObj = - ro.y / rd.y;\n      ro += dstObj * rd;\n      col4 = vec4 (mix (vec3 (0.2, 0.3, 0.2), vec3 (0.4, 0.4, 0.2), Noisefv2 (256. * ro.xz)) *\n        (1. - 0.2 * Fbm2 (0.25 * ro.zx)), 0.);\n      ltVec = normalize (ltPos - ro);\n      sh = (dstObj < dstFar) ? ObjSShadow (ro + 0.01 * ltVec, ltVec) : 1.;\n      col = col4.rgb * smoothstep (0.3, 0.7, sh) * sh * ltVec.y;\n    } else {\n      col = SkyCol (ro, rd);\n      isSky = true;\n    }\n  }\n  if (! isSky && col4.a >= 0.) col *= 0.2 + 0.8 * smoothstep (0.8, 0.95, dot (ltVec, ltAx));\n  glVec = rLead - roo;\n  s = length (glVec);\n  if (s < min (dstBall, dstObj)) col += 0.5 * vec3 (0.1, 0.2, 1.) * \n     pow (max (dot (rdo, glVec / s), 0.), 4096.);\n  if (isRefl) {\n    colB *= 0.2 + 0.8 * smoothstep (0.8, 0.95, ltFacB);\n    col = mix (col, colB, 0.4);\n    colL = 0.3 * vec3 (1., 1., 0.5) * pow (max (ltFacL, 0.), 16.);\n    col += colL;\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define N_VU 5\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, stDat;\n  vec3 rd, ro, vd, vuPos[2], col;\n  vec2 mMid[N_VU], ut[N_VU], mSize, canvas, uv, uvv, um, ori, ca, sa;\n  float nVu, az, el, zmFac, vuMode, centMode, smMode, sr, asp, zmMul, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  stDat = Loadv4 (4 * nBall + 6);\n  mPtr.xyz = stDat.xyz;\n  vuMode = stDat.w;\n  nVu = float (N_VU);\n  centMode = (vuMode >= 0.) ? vuMode : mod (floor (tCur / 30.), nVu);\n  asp = canvas.x / canvas.y;\n  mSize = vec2 (asp / nVu, 1. / (nVu + 1.));\n  for (int k = 0; k < N_VU; k ++) {\n    mMid[k] = - vec2 (mSize.x / mSize.y, -1.) + vec2 (2. * (float (k) + 1.), -1.) * mSize;\n    ut[k] = abs (uv - mMid[k]) - mSize;\n  }\n  smMode = -1.;\n  for (int k = 0; k < N_VU; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      smMode = float (k);\n      break;\n    }\n  }\n  if (smMode >= 0.) {\n    vuMode = smMode;\n  } else {\n    vuMode = centMode;\n    uv.y += mSize.y;\n    uv /= 1. - mSize.y;\n  }\n  rMid = Loadv4 (4 * nBall).xyz;\n  rLead = Loadv4 (4 * nBall + 1).xyz;\n  bSize = Loadv4 (4 * nBall + 2).xyz;\n  sbSize = Loadv4 (4 * nBall + 3).xyz;\n  vuPos[0] = Loadv4 (4 * nBall + 4).xyz;\n  vuPos[1] = Loadv4 (4 * nBall + 5).xyz;\n  dstFar = 150.;\n  zmMul = 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    if (mPtr.y > 0.5 - 1. / (nVu + 1.)) {\n      if (vuMode == centMode) {\n        f = 4. * (mPtr.y - 1.25 * (0.5 - 1. / (nVu + 1.)));\n        zmMul += ((f > 0.) ? 8. : 2.) * f;\n      }\n    } else {\n      if (smMode == -1. || vuMode == centMode) {\n        az += 2. * pi * mPtr.x;\n        el += pi * mPtr.y;\n      }\n    }\n  }\n  if (vuMode == 0.) {\n    ro = vec3 (-20. * normalize (rMid.xz), 20.).xzy;\n    vd = normalize (rMid - ro);\n    zmFac = 4. + 3. * zmMul;\n  } else if (vuMode == 1. || vuMode == 2.) {\n    ro = (vuMode == 1.) ? vuPos[0] : vuPos[1];\n    ro.y = 5.;\n    ro.y += 0.2 * Noisefv2 (0.5 * ro.xz);\n    vd = normalize (rMid - ro);\n    zmFac = 1.5 + 2. * zmMul;\n  } else if (vuMode == 3.) {\n    ro = vec3 (0., 10., 0.);\n    vd = normalize (rLead - ro);\n    zmFac = 1.2 + 1.8 * zmMul;\n  } else if (vuMode == 4.) {\n    ro = vec3 (0., 0., -80.);\n    vd = normalize (rMid - ro);\n    az -= 1.5 * pi + 0.03 * pi * tCur;\n    el -= 0.3 * pi;\n    zmFac = 1.5 + 1.2 * zmMul;\n  }\n  if (vuMode == 4.) el = clamp (el, -0.5 * pi, -0.05 * pi);\n  else el = clamp (el, -0.5 * pi, 0.4 * pi);\n  ori = vec2 (el + asin (vd.y), az + 0.5 * pi - atan (vd.z, vd.x));\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  if (vuMode == 4.) ro = vuMat * ro;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  col = clamp (col, 0., 1.);\n  for (int k = 0; k < N_VU; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0. && min (abs (ut[k].x), abs (ut[k].y)) * canvas.y < 3.)\n       col = (float (k) == centMode) ? vec3 (0.6, 0.6, 0.3) : vec3 (0.3, 0.3, 0.6);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  float d;\n  d = length (p.xy - vec2 (clamp (p.x, - rhi, rhi), 0.)) - rlo;\n  if (h > 0.) d = max (d, abs (p.z) - h);\n  return d;\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Racetrack\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nfloat Noisefv2 (vec2 p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBall = 120;\nconst float nLev = 7.;\n\nvec3 bSize, sbSize, rLead;\nfloat todCur, stSize;\nconst float pi = 3.14159;\n\nvoid CollFc (float rSep, float szAv, vec3 dr, vec3 dv, vec3 dw, inout vec3 am, inout vec3 wam)\n{\n  float fc, drv, ft, fOvlap, fricN, fricS, fricSW, fricT;\n  fOvlap = 1000.;\n  fricN = 5.;\n  fricS = 0.05;\n  fricSW = 1.;\n  fricT = 0.5;\n  fc = fOvlap * (szAv / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  fc = max (fc - fricN * drv, 0.);\n  am += fc * dr;\n  dv -= drv * dr + cross (dw, dr);\n  ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n  am -= ft * dv;\n  wam += (ft / rSep) * cross (dr, dv);\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm,\n   out float sz)\n{\n  vec4 p;\n  vec3 rmN, vmN, wmN, dr, am, wam;\n  float fDamp, fAttr, grav, rSep, szN, szAv, ft, ms, drv, dt, fnh;\n  fAttr = 0.2;\n  fDamp = 0.005;\n  grav = 12.;\n  p = Loadv4 (4 * mId);\n  rm = p.xyz;\n  sz = p.w;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  ms = sz * sz * sz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) {\n    p = Loadv4 (4 * n);\n    rmN = p.xyz;\n    szN = p.w;\n    dr = rm - rmN;\n    rSep = length (dr);\n    szAv = 0.5 * (sz + szN);\n    if (n != mId && rSep < szAv) {\n      vmN = Loadv4 (4 * n + 1).xyz;\n      wmN = Loadv4 (4 * n + 3).xyz;\n      CollFc (rSep, szAv, dr, vm - vmN, (sz * wm + szN * wmN) / (sz + szN), am, wam);\n    }\n  }\n  szAv = 0.5 * (sz + 1.);\n  dr = vec3 (0., rm.y + 0.05 * (Noisefv2 (2. * rm.xz) - 0.5), 0.);\n  rSep = dr.y;\n  if (rSep < szAv) {\n    CollFc (rSep, szAv, dr, vm, wm, am, wam);\n  }\n  for (float nh = 0.; nh < nLev; nh ++) {\n    dr.y = max (abs (rm.y) - bSize.y * (nh + 1.), 0.);\n    if (abs (rm.x) < bSize.x) {\n      dr.xz = vec2 (0., min ((abs (rm.z) - bSize.z - bSize.y * nh), 0.) * sign (rm.z));\n    } else {\n      dr.xz = rm.xz - vec2 (bSize.x * sign (rm.x), 0.);\n      dr.xz = vec2 (min (length (dr.xz) - bSize.z - bSize.y * nh, 0.) * normalize (dr.xz));\n    }\n    rSep = length (dr);\n    if (rSep < szAv) {\n      CollFc (rSep, szAv, dr, vm, wm, am, wam);\n    }\n  }\n  dr.y = 0.;\n  if (abs (rm.x) < bSize.x) {\n    dr.xz = vec2 (0., min ((abs (rm.z) - bSize.z - bSize.y * nLev), 0.) * sign (rm.z));\n  } else {\n    dr.xz = rm.xz - vec2 (bSize.x * sign (rm.x), 0.);\n    dr.xz = vec2 (min (length (dr.xz) - bSize.z - bSize.y * nLev, 0.) * normalize (dr.xz));\n  }\n  rSep = length (dr);\n  if (rSep < szAv) {\n    CollFc (rSep, szAv, dr, vm, wm, am, wam);\n  }\n  dr.y = max (abs (rm.y) - sbSize.y, 0.);\n  if (abs (rm.x) < sbSize.x) {\n    dr.xz = vec2 (0., max (abs (rm.z) - sbSize.z, 0.) * sign (rm.z));\n  } else {\n    dr.xz = rm.xz - vec2 (sbSize.x * sign (rm.x), 0.);\n    dr.xz = vec2 (max (length (dr.xz) - sbSize.z, 0.) * normalize (dr.xz));\n  }\n  rSep = length (dr);\n  if (rSep < szAv) {\n    CollFc (rSep, szAv, dr, vm, wm, am, wam);\n  }\n  am += fAttr * (rLead - rm);\n  am.y -= grav * ms;\n  am -= fDamp * vm;\n  dt = 0.01;\n  vm += dt * am / ms;\n  rm += dt * vm;\n  wm += dt * wam / (0.1 * ms * sz);\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm, out float sz)\n{\n  vec3 e;\n  vec2 nbEdge;\n  float mIdf;\n  nbEdge.y = 5.;\n  nbEdge.x = (float (nBall) + nbEdge.y - 1.) / nbEdge.y;\n  mIdf = float (mId);\n  rm.xz = 1.1 * vec2 (floor (mIdf / nbEdge.y) - 0.5 * (nbEdge.x - 1.), mod (mIdf, nbEdge.y) + 8.);\n  rm.y = 1.;\n  vm = 2. * normalize (vec3 (Hashff (mIdf + todCur), 0., Hashff (mIdf + todCur)) - 0.5);\n  e = normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6)));\n  qm = EulToQt (e);\n  wm = vec3 (0.);\n  sz = 1. - 0.1 * Hashff (mIdf + 0.1);\n}\n\nvec3 TrkPos (float t)\n{\n  vec3 p;\n  float b, r, a;\n  t *= 0.1;\n  b = 2. * sbSize.x;\n  r = sbSize.z + 6.;\n  t = mod (t, 2. * (b + pi * r));\n  p = vec3 (0., 2.5, 0.);\n  a = -1.;\n  if (t < 0.5 * pi * r) {\n    a = t / r;\n    p.x = 0.5 * b;\n  } else if (t < 0.5 * pi * r + b) {\n    p.xz = vec2 (0.5 * b + 0.5 * pi * r - t, r);\n  } else if (t < 1.5 * pi * r + b) {\n    a = 0.5 * pi + (t - 0.5 * pi * r - b) / r;\n    p.x = -0.5 * b;\n  } else if (t < 1.5 * pi * r + 2. * b) {\n    p.xz = vec2 (-1.5 * b - 1.5 * pi * r + t, - r);\n  } else {\n    a = 1.5 * pi + (t - 1.5 * pi * r - 2. * b) / r;\n    p.x = 0.5 * b;\n  }\n  if (a >= 0.) p.xz += r * sin (a + vec2 (0.5 * pi, 0.));\n  return p;\n}\n\nconst float txRow = 128.;\n\n#define N_VU 5\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, p, qm;\n  vec3 rm, vm, wm, rMid, vuPos[2];\n  vec2 canvas, iFrag;\n  float sz, tCur, tMouse, nStep, nVu, vuMode;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBall + 8) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  if (pxId < 4 * nBall) mId = pxId / 4;\n  else mId = -1;\n  doInit = false;\n  if (iFrame <= 5) {\n    bSize = vec3 (10.5, 1.25, 20.5);\n    sbSize = vec3 (6.5, bSize.y, 6.5);\n    nStep = 0.;\n    doInit = true;\n    mPtrP = mPtr;\n    vuMode = -1.;\n    tMouse = tCur;\n  } else {\n    stDat = Loadv4 (4 * nBall);\n    rMid = stDat.xyz;\n    nStep = stDat.w;\n    ++ nStep;\n    rLead = Loadv4 (4 * nBall + 1).xyz;\n    bSize = Loadv4 (4 * nBall + 2).xyz;\n    sbSize = Loadv4 (4 * nBall + 3).xyz;\n    stDat = Loadv4 (4 * nBall + 6);\n    mPtrP.xyz = stDat.xyz;\n    vuMode = stDat.w;\n    stDat = Loadv4 (4 * nBall + 7);\n    tMouse = stDat.x;\n  }\n  nVu = float (N_VU);\n  if (mPtr.z > 0.) {\n    if (mPtr.y > 0.5 - (1. / (nVu + 1.))) vuMode = floor (nVu * clamp (mPtr.x + 0.5, 0., 0.99));\n    tMouse = tCur;\n  } else if (tCur - tMouse > 20.) vuMode = -1.;\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, qm, wm, sz);\n    else Step (mId, rm, vm, qm, wm, sz);\n  }\n  rLead = TrkPos (nStep);\n  vuPos[0] = TrkPos (nStep + 100.);\n  vuPos[0].y = 3. + 0.3 * sin (0.03 * 2. * pi * tCur);\n  vuPos[1] = TrkPos (nStep - 200.);\n  vuPos[1].y = vuPos[0].y;\n  if (pxId == 4 * nBall) {\n    rMid = vec3 (0.);\n    for (int n = 0; n < nBall; n ++) rMid += Loadv4 (4 * n).xyz;\n    rMid /= float (nBall);\n  }\n  if (pxId < 4 * nBall) {\n    kp = pxId - 4 * mId;\n    if      (kp == 0) p = vec4 (rm, sz);\n    else if (kp == 1) p = vec4 (vm, 0.);\n    else if (kp == 2) p = qm;\n    else if (kp == 3) p = vec4 (wm, 0.);\n    stDat = p;\n  } else {\n    kp = pxId - 4 * nBall;\n    if      (kp == 0) stDat = vec4 (rMid, nStep);\n    else if (kp == 1) stDat = vec4 (rLead, 0.);\n    else if (kp == 2) stDat = vec4 (bSize, 0.);\n    else if (kp == 3) stDat = vec4 (sbSize, 0.);\n    else if (kp == 4) stDat = vec4 (vuPos[0], 0.);\n    else if (kp == 5) stDat = vec4 (vuPos[1], 0.);\n    else if (kp == 6) stDat = vec4 (mPtr.xyz, vuMode);\n    else if (kp == 7) stDat = vec4 (tMouse, 0., 0., 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}