{
    "Shader": {
        "info": {
            "date": "1698865543",
            "description": "finally attempted it properly... not that the result is any good.",
            "flags": 32,
            "hasliked": 0,
            "id": "dsVczc",
            "likes": 2,
            "name": "raytracing͏",
            "published": 3,
            "tags": [
                "thing"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U ){\n\n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    O = texture(iChannel0, uv);\n    \n    O = O/(1.+O);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define DEPTH 5\n#define OBJECT_COUNT 5\n\nconst vec3 up = vec3(0, 1, 0);\n\nstruct material\n{\n    float metallic;\n    float roughness;\n    float specular;\n    vec3 col;\n    \n};\n\nstruct sphere\n{\n    vec3 pos;\n    float radius;\n    material mat;\n};\n\nstruct box\n{\n    vec3 pos;\n    vec3 up; // Length of up is scale\n    material mat;\n};\n\nstruct plane\n{\n    vec3 pos;\n    vec3 normal;\n    material mat;\n};\n\nstruct rayHit\n{\n    float t1;\n    float t2;\n    vec3 pos;\n    vec3 normal;\n    vec3 incoming;\n    vec3 reflection;\n    bool hit;\n    vec3 origin;\n    material mat;\n};\n\nconst float pi = 3.14159;\nfloat cameraFarPlane = 1e8;\nfloat fieldOfView = 2.;\nfloat mouseSensitivity = 2.;\n\n\n\n\n// Materials //\n\n    const material testBlue = material(\n        0.0,                // Metallic \n        0.0,               // Roughness\n        0.5,              // Specular\n        vec3(.1, .3, .8) // Colour\n    );\n\n\n    const material testRed = material(\n        0.0,                // Metallic \n        0.5,               // Roughness\n        0.1,              // Specular\n        vec3(.8, .2, .2) // Colour\n    );\n\n    const material testGreen = material(\n        1.,                 // Metallic \n        0.,                // Roughness\n        0.2,              // Specular\n        vec3(.1, .6, .3) // Colour\n    );\n\n    const material testRandom = material(\n        1.0,                   // Metallic \n        0.2,                  // Roughness\n        0.5,                 // Specular\n        vec3(0.2, 0.0, 0.7) // Colour\n    );\n\n\n\n\n// Geometry //\n        \n    sphere sp1 = sphere(\n        vec3(-1, 0, 0), // Position\n        .5,            // Radius\n        testBlue      // Material\n    );\n    \n    box bo1 = box(\n        vec3(1, 0, 0),          // Position\n        normalize(vec3(1))*.5, // Up\n        testBlue              // Material\n    );\n    \n    plane pl1 = plane(\n        vec3(0, -1, 0), // Position\n        vec3(0, 1, 0), // Normal\n        testRed       // Material\n    );\n\n    box bo2 = box(\n        vec3(2, 0, 0),         // Position\n        normalize(vec3(1))*.5,// Up\n        testGreen            // Material\n    );\n    \n    sphere sp2 = sphere(\n        vec3(1, -3.8, -0.5), // Position\n        3.,                 // Radius\n        testRandom         // Material\n    );\n\n\n\n\n\n// General functions // \n\n//hash by IQ https://www.shadertoy.com/view/XlXcW4\nconst uint k = 1103515245U;\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\n\nvec2 circleSample(uvec3 x){\n    vec2 v,z;\n    for(int i = 0;v=hash(x+uint(v*1e9)).xy, z=v*2.-1., i++<9 && length(z) > 1.;);\n    return z;\n}\n\nmat3 matTowards( vec3 n ){\n    \n    vec3 r = normalize(abs(dot(n, up)) < 1e-2?cross(n, up):cross(n, normalize(vec3(1))));\n    vec3 f = cross(r, n);\n    \n    return mat3(r, f, n); \n}\n\nvec3 cosDist( uvec3 x, vec3 norm ){ // Cosine weighted distribution\n    vec2 u = circleSample(x);\n    return vec3(u, sqrt(1.-u.x*u.x-u.y*u.y)) * matTowards(norm);\n}\n\nvec3 background(float t, vec3 rd)\n{\n\tvec3 light = normalize(vec3(sin(t), 0.6, cos(t)));\n\tfloat sun = max(0.0, dot(rd, light));\n\tfloat sky = max(0.0, dot(rd, vec3(0.0, 1.0, 0.0)));\n\tfloat ground = max(0.0, -dot(rd, vec3(0.0, 1.0, 0.0)));\n\treturn 5.*(\n\t\t(pow(sun, 256.0)+0.2*pow(sun, 2.0))*vec3(2.0, 1.6, 1.0) +\n\t\tpow(ground, 0.5)*vec3(0.4, 0.3, 0.2) +\n\t\tpow(sky, 1.0)*vec3(0.5, 0.6, 0.7));\n}\n\n\n\n\n\n\n\n\n// Intersection functions\n\nrayHit sphereRay(vec3 o, vec3 dirV, sphere sp)\n{    \n    rayHit hit;\n    hit.incoming = dirV;\n\n    float t = dot(sp.pos - o, dirV);\n    vec3 p = o + dirV*t;\n    \n    float y = length(sp.pos - p);\n    \n    hit.t1 = cameraFarPlane;\n    hit.t2 = cameraFarPlane;\n    \n    if (y < sp.radius && t > 0.) //hit && in front of camera\n    {\n        float x = sqrt(sp.radius*sp.radius - y*y);\n        hit.t1 = t-x;\n        hit.t2 = t+x;\n        \n        vec3 p1 = o + dirV*hit.t1;\n        vec3 n = normalize(p1 - sp.pos);\n        hit.normal = n;\n        hit.hit = true;\n        hit.pos = p1;\n        hit.mat = sp.mat;\n        hit.origin = sp.pos;\n    }\n    else if (y < sp.radius)\n    {\n        hit.hit = false;\n    }\n    return hit;\n\n}\n\nrayHit planeRay(vec3 o, vec3 dirV, plane p)\n{\n    rayHit hit;\n    hit.incoming = dirV;\n    hit.hit = false;\n    \n    float dist = -(dot(p.normal, p.pos-o));\n    \n    if (dist > 0.0)\n    {\n        dist /= dot(dirV, -p.normal);\n\n\n        hit.t1 = cameraFarPlane;\n        hit.t2 = cameraFarPlane;\n\n        if (dist > 0.0)\n        {\n            hit.t1 = dist;\n            hit.hit = true;\n            hit.pos = o + hit.t1 * dirV;\n            hit.normal = p.normal;\n            hit.origin = p.pos;\n            hit.mat = p.mat;\n        }\n    }\n    \n    return hit;\n    \n}\n\nrayHit boxRay(vec3 o, vec3 dirV, box b)\n{\n\n    rayHit hit;\n    hit.incoming = dirV;\n    hit.t1 = cameraFarPlane;\n    hit.t2 = cameraFarPlane;\n    hit.hit = false;\n    \n    rayHit tempHits[6];\n    rayHit minHit;\n    \n    float minDist = cameraFarPlane;\n    \n    \n    vec3 dirs[6];\n    dirs[0] = normalize(b.up);\n    dirs[1] = b.up==vec3(0,0,1)?vec3(1, 0, 0):normalize(cross(b.up, vec3(0, 0, 1)));\n    dirs[2] = normalize(cross(b.up, dirs[1]));\n    dirs[3] = -dirs[0];\n    dirs[4] = -dirs[1];\n    dirs[5] = -dirs[2];\n    float scale = length(b.up);\n    \n    for (int i = 0; i<6; i++)\n    {\n        dirs[i] = dirs[i]*(scale-0.001);\n        plane p;\n        p.pos = dirs[i]; p.normal = dirs[i];\n        tempHits[i] = planeRay(o-b.pos, dirV, p);\n                \n    }\n    \n    for (int i = 0; i<6; i++)\n    {\n        rayHit hi = tempHits[i];\n        if (hi.hit \n        &&  max(abs(dot(hi.pos, dirs[0])), \n            max(abs(dot(hi.pos, dirs[1])), \n                abs(dot(hi.pos, dirs[2])))) < (scale*scale))\n        {\n            hit = hi;\n            hit.normal = normalize(hit.normal);\n            hit.pos += b.pos;\n            hit.origin = b.pos;\n        }\n\n    }\n    \n    hit.mat = b.mat;\n    \n    return hit;\n\n}\n\nrayHit pew(vec3 o, vec3 dirV, plane p){\n    return planeRay(o, dirV, p);\n\n}\n\nrayHit pew(vec3 o, vec3 dirV, box b){\n    return boxRay(o, dirV, b);\n}\n\nrayHit pew(vec3 o, vec3 dirV, sphere s){\n    return sphereRay(o, dirV, s);\n}\n\n\nrayHit ray(vec3 o, vec3 dirV, float t){\n\n\n    // Animation //\n    \n    sp1.pos.xy = vec2(cos(t + vec2(0, 11))) * vec2(1, .6) - vec2(1,0);\n    sp1.pos.z = -.5;\n    \n    bo1.up = normalize(vec3(cos(t * vec3(1,3,2)*.4)))*.5;\n    bo1.pos.x += sin(t)*.5;\n    \n    ///////////////\n\n\n\n\n    rayHit hit;\n    hit.incoming = dirV;\n    hit.t1 = cameraFarPlane;\n    hit.t2 = cameraFarPlane;\n    hit.hit = false;\n    \n    rayHit hits[OBJECT_COUNT];\n    \n    \n    // Rendering //\n    \n    hits[0] = pew(o, dirV, sp1);\n    hits[1] = pew(o, dirV, pl1);\n    hits[2] = pew(o, dirV, bo1);\n    hits[3] = pew(o, dirV, bo2);\n    hits[4] = pew(o, dirV, sp2);\n\n\n    ///////////////\n    \n    \n    // Pick the closest hit\n    for (int i = 0; i < OBJECT_COUNT; i++){        \n        if (hits[i].hit && hits[i].t1 < hit.t1) hit = hits[i];\n    } \n    hit.reflection = reflect(hit.incoming, hit.normal);\n    return hit;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define time iTime\n//47.9\n#define bgTime iTime\n\nvoid mainImage( out vec4 O, vec2 U ){\n\n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    vec2 cuv = (2.*U-r)/r.y;\n    vec2 muv = iMouse.xy==vec2(0)?vec2(0):(2.*iMouse.xy-r)/r.y;\n\n        \n    vec3 o = vec3(0, 0, -2.5);\n    \n    vec3 camDir = vec3(sin(muv.x)*cos(muv.y), sin(muv.y), cos(muv.x)*cos(muv.y));\n    \n    vec3 camRight = normalize(cross(up, camDir));\n    vec3 camUp = cross(camDir, camRight);\n    \n    vec3 dirV = normalize(camDir + camRight * cuv.x + camUp * cuv.y);\n    \n    \n    rayHit hit;\n    rayHit hits[DEPTH];\n    \n    vec3 col = vec3(1);\n    vec3 light = vec3(0);\n    \n    for (int i = DEPTH; i-->0;){\n        \n        \n        hit = ray(o, dirV, time);\n        hits[i] = hit;\n\n        if (hit.hit){\n            vec3 h = hash(uvec3(U.y, iFrame, U.x));\n            if (h.x < hit.mat.specular*(1.-pow(dot(hit.normal, -hit.incoming), 5.))){\n                //Specular\n            } else {\n                if (h.y < hit.mat.metallic){\n                    //Metallic\n                    col *= hit.mat.col;\n                } else {\n                    // Dielectric\n                    col *= hit.mat.col;\n                    hit.mat.roughness = 1.;\n                }\n            }\n            \n            if (i == 0) col *= 0.;\n        } else {\n            light = background(bgTime, dirV);\n            break;\n        }\n        \n        o = hit.pos;\n        dirV = mix(hit.reflection, cosDist( uvec3(iFrame, U.y, U.x), hit.normal), hit.mat.roughness);\n    }\n    \n    col *= light;\n    O.xyz = col;\n    \n    \n    \n    \n    hit = hits[DEPTH-1];\n    // Temporal Accumulation\n    \n    if (hit.hit && iFrame > 10){\n        O.w = hash(uvec3((abs(hit.pos + hit.normal + hit.incoming)) * 1e7)).z;\n    } else {\n        O.w = mod(iTime, 1.);\n        \n        O.xyz = background(bgTime, dirV);\n    }\n    \n    vec4 last = texture(iChannel0, uv);\n    float change = float(bool(abs(O.w - last.w)));\n    \n    \n    O.xyz = mix(last.xyz, O.xyz, min(1., mix(change, 1., 0.01)));\n    \n    //O.xyz = vec3(float(bool(last.w - O.w)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}