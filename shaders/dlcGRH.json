{
    "Shader": {
        "info": {
            "date": "1681921939",
            "description": "special thing here is that im stepping in a narrow spiral in view direction. the normal is then calculated from the triangle formed by last 3 step-points.\n...also check 1tweet version (no refl) [url]https://twigl.app/?ol=true&ss=-NTOvYWIEieDpcGD3IMg[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "dlcGRH",
            "likes": 43,
            "name": "tiny code star - spiral stepping",
            "published": 3,
            "tags": [
                "normals",
                "spiral",
                "tiny",
                "octahedra",
                "golfed",
                "twigl"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2023\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// 5 intersecting octahedra\n\n// less than 1 tweet in twigl.app (no cubemap there):\n// https://twigl.app/?ol=true&ss=-NTOvYWIEieDpcGD3IMg\n\n//  explanation of spiral-stepping:\n// ---------------------------------\n//\n//  special thing here is that im stepping in a narrow spiral in view direction\n//  the normal is then calculated from the triangle formed by last 3 step-points\n// \n//  i think it works quite well, and might be even practicable for non-golfed code\n//\n\n\n#define rotate2D(x) mat2(cos(x-1.57*vec4(0,1,-1,0)))\n#define t iTime\n#define r iResolution\n#define FC vec4(c,0,1)\n\nvoid mainImage( out vec4 o, in vec2 c )\n{\n    vec3 z=vec3(0,0,85),q=z,p,u,v;\n    for(float w,d,i=0.;i++<80.;v=u,u=q,q+=(FC.rgb*2.-r.xyx)/r.x*d+vec3(sin(i),cos(i),0)) // sin,cos = spiral offs in x,y\n       for(d=w=6.;w>0.;w-=1.26){\n          p=q;p.xz*=rotate2D(t+w);p.xy*=rotate2D(1.);d=min(d,dot(p+sin(p)*.2,sign(p)*.3)-9.);\n       }\n    u=cross(q-u,q-v); // normal = cross product of 2 triangle edges (last 3 step points u,v,q)\n    o.xyz=texture(iChannel0,reflect(q-z,u)).xyz-u*.1;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}