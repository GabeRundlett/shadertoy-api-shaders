{
    "Shader": {
        "info": {
            "date": "1687206480",
            "description": "A visualization of a quadratic bézier curve with moving points.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdfcD2",
            "likes": 2,
            "name": "Quadratic bézier curve",
            "published": 3,
            "tags": [
                "bzier"
            ],
            "usePreview": 0,
            "username": "Starfish",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "//linear interpolatiion between two points\nvec2 lerp(vec2 p1, vec2 p2, float t){\n    return (1.-t) * p1 + t * p2;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;    \n    float aspectRatio = iResolution.x/iResolution.y;    \n    uv.x *= aspectRatio;\n\n\n    //points to be used for bezier curve calculation, moving over time due to the added vectors\n    vec2 point1 =  vec2(0.2 *aspectRatio, 0.5) + vec2(0.2 * sin(0.3 * iTime + 32.), 0.4 * cos(0.7 * iTime + 79.));\n    vec2 point2 =  vec2(0.5 *aspectRatio, 0.5) + vec2(0.6 * cos(0.4 * iTime + 823.), 0.4 * sin(0.8 * iTime + 9234.)); \n    vec2 point3 =  vec2(0.8 *aspectRatio, 0.5) + vec2(0.2 * sin(0.1 * iTime + 2423.), 0.3 * cos(0.5 * iTime + 2134.));     \n\n    //points along the bezier curve are calculated and checked for distance to current uv coordinates,\n    //then a circular shape is being drawn for each pixel depending on the closest point in the curve.\n    //since a lot of points are being calculated the circles shape into a line.\n    float closestDistance = 10.;\n    for(float i=0.0; i<1.0;i+=0.001){\n\n        vec2 interpolation12 = lerp(point1, point2, i);\n        vec2 interpolation23 = lerp(point2, point3, i);\n\n        vec2 interpolation123 = lerp(interpolation12, interpolation23, i);\n\n        float currentDistance = distance(uv, interpolation123);\n        closestDistance = min(closestDistance, currentDistance);\n    }\n    \n    float lineWidth = 0.0015;\n    vec3 col = vec3(smoothstep(0.0,  2./iResolution.y, closestDistance - lineWidth));\n    \n    //adding some background color\n    col *= vec3(0.2, 0.4, 0.8);\n    \n    //coloring the 3 points used to calculate the curve\n    float pointRadius = 0.02;\n    vec3 pointColor = vec3(0.9, 0.7, 0.);\n    if(smoothstep(0.0, 2./iResolution.y, distance(uv, point1) - pointRadius) == 0.0){\n        col = vec3(1.-smoothstep(0.0, 2./iResolution.y, distance(uv, point1) - pointRadius)) * pointColor;\n    }\n\n    if(smoothstep(0.0, 2./iResolution.y, distance(uv, point2) - pointRadius) == 0.0){\n        col = vec3(1.-smoothstep(0.0, 2./iResolution.y, distance(uv, point2) - pointRadius)) * pointColor;\n    }\n        \n    if(smoothstep(0.0, 2./iResolution.y, distance(uv, point3) - pointRadius) == 0.0){\n        col = vec3(1.-smoothstep(0.0, 2./iResolution.y, distance(uv, point3) - pointRadius)) * pointColor;\n    }\n\n    fragColor = vec4(col,1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}