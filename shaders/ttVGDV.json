{
    "Shader": {
        "info": {
            "date": "1579971245",
            "description": "Comparison of Wang hash & others for pairs - the Wang hash has some artefacts, but a little extra mixing improves things.\n\n[url]https://burtleburtle.net/bob/hash/integer.html[/url]\n[url]https://www.shadertoy.com/view/wlVGWK[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "ttVGDV",
            "likes": 19,
            "name": "Wang, Jenkins & Other Hashes",
            "published": 3,
            "tags": [
                "hash",
                "wang",
                "integer",
                "jenkins",
                "murmur"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 2935
        },
        "renderpass": [
            {
                "code": "int N = 1; // Number of iterations, N = 1000 for benchmark\n#define HASH wellons3\n//#define HASH jenkins\n//#define HASH murmur\n//#define HASH wellons\n//#define HASH wellons3\n\n//Wang\nuint wang(uint a) {\n\ta = (a ^ 61U) ^ (a >> 16U);\n\ta = a * 9U;\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2dU;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\n// Jenkins\nuint jenkins(uint a) {\n    a -= (a<<6);\n    a ^= (a>>17);\n    a -= (a<<9);\n    a ^= (a<<4);\n    a -= (a<<3);\n    a ^= (a<<10);\n    a ^= (a>>15);\n    return a;\n}\n\n// MurmurHash3 finalizer\nuint murmur(uint x) {\n    x ^= x >> 16;\n    x *= 0x85ebca6bU;\n    x ^= x >> 13;\n    x *= 0xc2b2ae35U;\n    x ^= x >> 16;\n    return x;\n}\n\n// Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint wellons(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\n// Chris Wellons 3-round function\n// bias: 0.020888578919738908 = minimal theoretic limit\nuint wellons3(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nfloat hashtest(uint a) {\n    uint hash = a;\n    for (int i = 0; i < N; i++) {\n    \thash = HASH(hash);\n    }\n    return float(hash) / float(0xFFFFFFFFU); // Uniform in [0,1]\n}\n\nvec4 rand4(uint seed){\n    return vec4(hashtest(seed^0x34F85A93U),\n                hashtest(seed^0x85FB93D5U),\n                hashtest(seed^0x6253DF84U),\n                hashtest(seed^0x25FC3625U));\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 uv = U-0.5*iResolution.xy;\n    uint seed = uint(U.x) + (uint(U.y) << 11);\n    // Extra mixing improves Wang hash\n    if (iMouse.z > 0.0) seed *= 257U;\n    O = rand4(seed);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}