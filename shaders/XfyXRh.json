{
    "Shader": {
        "info": {
            "date": "1714748460",
            "description": "The conversion from the linear scale to the decibel scale is demonstrated..",
            "flags": 8,
            "hasliked": 0,
            "id": "XfyXRh",
            "likes": 1,
            "name": "Sound: Decibel Scale Processing",
            "published": 3,
            "tags": [
                "sound",
                "conversion",
                "decibel"
            ],
            "usePreview": 0,
            "username": "taylormatson",
            "viewed": 97
        },
        "renderpass": [
            {
                "code": "// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}\n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\n// https://creativecommons.org/licenses/by-nc/4.0/\n\nvec2 mainSound( int samp, float time )\n{\n    // Initialize variable for setting the output in dB\n    // [-infinity to +6dB]\n    // +6dB = doubling the amplitude\n    //  0dB = unity gain \n    // -6dB = dividing the amplitude in half\n    \n    // A 440 Hz mono wave that attenuates quickly over time\n    float osc = sin(6.2831*440.0*time)*exp(-3.0*time);\n    \n    float processedSignal = dBmonoProcess(osc, -6.);\n    \n    return vec2(processedSignal);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// Receives a mono signal and scales it by the dB value\nfloat dBmonoProcess(float signal, float dB)\n{\n    float monoSig;\n    return monoSig = signal*sqrt(pow(10., dB/20.));\n}\n\n// Receives a stereo signal and scales it by the dB value\nvec2 dBstereoProcess(vec2 signal, float dB)\n{\n    vec2 stereoSig;\n    return stereoSig = signal*sqrt(pow(10., dB/20.));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}