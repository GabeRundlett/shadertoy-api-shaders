{
    "Shader": {
        "info": {
            "date": "1637010423",
            "description": "When the code is sus.",
            "flags": 0,
            "hasliked": 0,
            "id": "fty3RR",
            "likes": 2,
            "name": "Among Us 2D",
            "published": 3,
            "tags": [
                "amongus"
            ],
            "usePreview": 0,
            "username": "SneakySnail600",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "/*\n * \"Among Us 2D\" by Josh O'Hagan aka SneakySnail600 - 2024\n * License Creative Commons ATTRIBUTION 4.0 INTERNATIONAL\n * Contact: joshohagan17@outlook.co.nz\n */\n \nbool inBounds(float coord, float lower, float upper){\n    return coord < upper && coord > lower;\n}\n\nbool inCircle(vec2 uv, float centre_x, float centre_y, float radius){\n    return pow(uv.x - centre_x, 2.0) + pow(uv.y - centre_y, 2.0) < pow(radius, 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col;\n    vec3 col_background = vec3(0, 0, 0);\n    vec3 col_foreground = vec3(1, 0, 0);\n    vec3 col_visor = vec3(0.9);\n    col = col_background;\n    \n    float canvas_left = 0.3;\n    float canvas_right = 0.7;\n    \n    // Pre define some variables to be used inside and outside the canvas.\n    \n    // Legs\n    float leg_top = 0.14;\n    float leg_bottom = 0.0;\n    \n    float left_leg_left = 0.2;\n    float left_leg_right = 0.42;\n    float right_leg_left = 0.58;\n    float right_leg_right = 0.8;\n    \n    // Body\n    float body_bottom = leg_top;\n    float body_top = 0.7;\n    \n    // Head\n    float head_centre_x = 0.5;\n    float head_centre_y = body_top;\n    float head_radius = abs(canvas_left - canvas_right) / 2.0;\n    \n    // Visor\n    float visor_radius = head_radius / 2.0;\n    float visor_centre_x = 0.63;\n    float visor_centre_y = body_top - 0.1;\n    \n    // Visor outline\n    float visor_outline_raidus = visor_radius + 0.02;\n    \n    // Pack\n    float pack_left = canvas_left - 0.1;\n    float pack_right = canvas_left - 0.01;\n    float pack_bottom = leg_top;\n    float pack_top = body_top;\n    \n    // Partition the drawing canvas for most of the body parts.\n    if (inBounds(uv.x, canvas_left, canvas_right)){\n\n        // Legs\n        if (inBounds(uv.y, leg_bottom, leg_top)){\n\n            // Left leg\n            if (inBounds(uv.x, left_leg_left, left_leg_right)){\n                col = col_foreground;\n            }\n\n            // Right leg\n            if (inBounds(uv.x, right_leg_left, right_leg_right)){\n                col = col_foreground;\n            }\n        }\n        \n        // Body\n        if (inBounds(uv.y, body_bottom, body_top)){\n            col = col_foreground;\n        }\n        \n        // Head\n        if (inCircle(uv, head_centre_x, head_centre_y, head_radius)){\n            col = col_foreground;\n        }\n    }\n\n    // Visor outline\n    if (inCircle(uv, visor_centre_x, visor_centre_y, visor_outline_raidus)){\n        col = col_background;\n    }\n    \n    // Visor\n    if (inCircle(uv, visor_centre_x, visor_centre_y, visor_radius)){\n        col = col_visor;\n    }\n    \n    // Pack\n    if (inBounds(uv.x, pack_left, pack_right) &&\n        inBounds(uv.y, pack_bottom, pack_top)){\n        col = col_foreground;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}