{
    "Shader": {
        "info": {
            "date": "1621418323",
            "description": "watched https://www.youtube.com/watch?v=ga1xt5zkmPI\nto port that here clamp() is also needed...took me sometime to figure that out\nthe shape is squared because the kernel has that shape...it's easy to make it not squared\ncode only uses blur convolutions",
            "flags": 48,
            "hasliked": 0,
            "id": "stfGzr",
            "likes": 38,
            "name": "Reaction Diffusion labyrinth",
            "published": 3,
            "tags": [
                "kernel"
            ],
            "usePreview": 1,
            "username": "lomateron",
            "viewed": 688
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 u = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,u);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define A(u) texture(iChannel0,(u)/iResolution.xy)\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec4 a = A(u+vec2(0,0));\n    float b = 0.;\n    \n    //kernel convolution that blurs\n    {\n        float z = 4.;//kernel convolution size\n        float t = z*2.+1.;\n              t = 1./(t*t-1.);\n        float blur = 1./z;\n        for(float i = -z; i<=z;++i){\n        for(float j = -z; j<=z;++j){\n          float s = 0.;\n          for(float i2 = -z; i2<=z;++i2){\n          for(float j2 = -z; j2<=z;++j2){\n          vec2 c = vec2(i2,j2)*blur;\n          s += 1./exp(dot(c,c));\n          }}\n          if(s==0.)s = 1.;\n          vec2 c = -vec2(i,j)*blur;\n          float d = A(u+vec2(i,j)).x;\n          b -= d/s/exp(dot(c,c))*9.;\n        }}\n    }\n    //kernel convolution that blurs a little bit less\n    {\n        float z = 4.;//kernel convolution size\n        float t = z*2.+1.;\n              t = 1./(t*t-1.);\n        float blur = 1.5/z;\n        for(float i = -z; i<=z;++i){\n        for(float j = -z; j<=z;++j){\n          float s = 0.;\n          for(float i2 = -z; i2<=z;++i2){\n          for(float j2 = -z; j2<=z;++j2){\n          vec2 c = vec2(i2,j2)*blur;\n          s += 1./exp(dot(c,c));\n          }}\n          if(s==0.)s = 1.;\n          vec2 c = -vec2(i,j)*blur;\n          float d = A(u+vec2(i,j)).x;\n          b += d/s/exp(dot(c,c))*9.8;\n        }}\n    }\n    b = clamp(b,0.,1.);\n    a = vec4(b,a.xyz);\n\n    if(iMouse.z>0.)\n    {\n        vec2 m1 = 2.*(u-iMouse.xy)/iResolution.y;\n        a *= 1.-+1./exp(pow(max(length(m1)-.1,0.),2.)*111.);\n    }\n    if(iFrame==0)\n    {\n        vec2 m1 = (2.*u-iResolution.xy)/iResolution.y+vec2(.2,0);\n        vec2 m2 = (2.*u-iResolution.xy)/iResolution.y-vec2(.2,0);\n        a += +1./exp(pow(max(length(m1)-.2,0.),2.)*5555.);\n        a += -1./exp(pow(max(length(m2)-.2,0.),2.)*5555.);\n    }\n    float keyA  = texture( iChannel1, vec2(65.5/256.,.25) ).x;\n    if(keyA!=0.)a = texture( iChannel2, u/iResolution.xy);\n    fragColor = a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}