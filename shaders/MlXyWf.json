{
    "Shader": {
        "info": {
            "date": "1506634622",
            "description": "Look for hidden messages",
            "flags": 0,
            "hasliked": 0,
            "id": "MlXyWf",
            "likes": 6,
            "name": "Alphawall",
            "published": 3,
            "tags": [
                "raymarch",
                "text",
                "font"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 597
        },
        "renderpass": [
            {
                "code": "// \"Alphawall\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txFnt iChannel0\n\nfloat Hashfv2 (vec2 p);\n\nvec3 ltDir;\nvec3 qnhTex;\nfloat dstFar, txHtMax;\nconst float pi = 3.14159;\n\nfloat FontTexDf (vec3 p)\n{\n  vec3 tx;\n  float d, s, txHt;\n  int ic;\n  s = Hashfv2 (17. * floor (p.xy)) * 52.;\n  ic = int (mod (s, 26.)) + ((s < 26.) ? 0x61 : 0x41);\n  tx = texture (txFnt, mod ((vec2 (mod (float (ic), 16.),\n     15. - floor (float (ic) / 16.)) + fract (p.xy)) * (1. / 16.), 1.)).gba - 0.5;\n  txHt = (1. - 0.8 * Hashfv2 (31. * floor (p.xy))) * txHtMax;\n  qnhTex = vec3 (tx.r, - tx.g, txHt);\n  d = tx.b + 1. / 256.;\n  d = max (d, abs (p.z) - txHt);\n  return d;\n}\n\nfloat ObjRayT (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 srd, dda, h;\n  float dHit, dLim, d;\n  srd = 1. - 2. * step (0., rd.xz);\n  dda = 1. / (abs (rd.xz) + 0.0001);\n  dHit = max ((abs (ro.y) - txHtMax - 0.02) / (abs (rd.y) + 0.001), 0.);\n  dLim = min ((abs (ro.y) + txHtMax) / (abs (rd.y) + 0.001), dstFar);\n  for (int j = 0; j < 200; j ++) {\n    p = ro + dHit * rd;\n    h = fract (dda * fract (srd * p.xz));\n    d = FontTexDf (p.zxy);\n    dHit += min (d, 0.01 + min (h.x, h.y));\n    if (d < 0.0001 || dHit > dLim) break;\n  }\n  if (d >= 0.0001) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstTxt, sp, s;\n  s = 2. * step (0., rd.y) - 1.;\n  ro.y -= 3. * s;\n  ro.z *= s;\n  rd.z *= s;\n  dstTxt = ObjRayT (ro, rd);\n  col = vec3 (0.);\n  if (dstTxt < dstFar) {\n    ro += rd * dstTxt;\n    if (abs (ro.y) < qnhTex.z - 0.001) {\n      vn = normalize (vec3 (0.00001, qnhTex.xy));\n      col = vec3 (1., 0.5, 0.2);\n      sp = 0.3;\n    } else {\n      vn = vec3 (- sign (ro.y), 0., 0.);\n      col = vec3 (1., 1., 0.);\n      sp = 0.2;\n    }\n  } else {\n    dstTxt = abs (ro.y / rd.y);\n    vn = vec3 (- sign (ro.y), 0., 0.);\n    col = vec3 (0.1, 0.3, 0.5);\n    sp = 0.05;\n  }\n  col = col * (0.3 + 0.7 * max (dot (ltDir, vn), 0.)) +\n     sp * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n  col = mix (col, vec3 (0.05, 0.1, 0.2), pow (min (dstTxt / dstFar, 1.), 5.));\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col, ori, ca, sa;\n  vec2 canvas, uv;\n  float el, az, rl, tCur;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.3 * pi * sin (0.1 * pi * tCur);\n  el = 0.;\n  rl = 0.5 * pi + 2. * pi * sin (0.013 * pi * tCur);\n  if (mPtr.z > 0.) {\n    az -= 3. * pi * mPtr.x;\n    el -= 1.5 * pi * mPtr.y;\n  }\n  rd = normalize (vec3 (uv, 1.5));\n  ro = vec3 (0., 0., -1.);\n  ltDir = normalize (vec3 (0.,  0., 1.));\n  ori = vec3 (el, az, rl);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n          mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.);\n  rd = vuMat * rd;\n  ro = vuMat * ro;\n  ltDir = vuMat * ltDir;\n  ro.z += 4. * tCur;\n  txHtMax = 0.3;\n  dstFar = 200.;\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (clamp (col, 0., 1.), 1.);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}