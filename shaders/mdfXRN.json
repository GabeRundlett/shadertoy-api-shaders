{
    "Shader": {
        "info": {
            "date": "1668561004",
            "description": "Kinda crap two pass unsharp filter.",
            "flags": 34,
            "hasliked": 0,
            "id": "mdfXRN",
            "likes": 0,
            "name": "Unsharp Filter",
            "published": 3,
            "tags": [
                "blur",
                "filter",
                "unsharp"
            ],
            "usePreview": 0,
            "username": "cwfitzgerald",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "float luminance(vec3 v)\n{\n    return dot(v, vec3(0.2126f, 0.7152f, 0.0722f));\n}\n\nvec3 change_luminance(vec3 c_in, float l_out)\n{\n    float l_in = luminance(c_in);\n    return c_in * (l_out / l_in);\n}\n\nvec3 reinhard_extended_luminance(vec3 v, float max_white_l)\n{\n    float l_old = luminance(v);\n    float numerator = l_old * (1.0f + (l_old / (max_white_l * max_white_l)));\n    float l_new = numerator / (1.0f + l_old);\n    return change_luminance(v, l_new);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 self = texture(iChannel1, uv).xyz;\n\n    // Output to screen\n    if (fragCoord.x <= iMouse.x) {\n        vec2 nudge = 1.0/iResolution.xy;\n        vec3 blur = vec3(0.0);\n\n        for (int y = -COUNT; y <= COUNT; ++y) {\n            blur += texture(iChannel0, uv + nudge * vec2(ivec2(0, y))).xyz;\n        }\n\n        blur /= float(COUNT * 2 + 1);\n    \n        float greyscale = pow(dot(self, vec3(0.4, 0.5, 0.1)), 2.2);\n        vec3 adj = (self - blur) * SCALE * greyscale + self;\n        \n        fragColor = vec4(reinhard_extended_luminance(adj, 0.9),1.0);\n    } else {\n        fragColor = vec4(self,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int COUNT = 50;\nconst float SCALE = 1.;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 nudge = 1.0/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 blur = vec3(0.0);\n    \n    for (int x = -COUNT; x <= COUNT; ++x) {\n        blur += texture(iChannel0, uv + nudge * vec2(ivec2(x, 0))).xyz;\n    }\n    \n    blur /= float(COUNT * 2 + 1);\n\n    // Output to screen\n    fragColor = vec4(blur,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}