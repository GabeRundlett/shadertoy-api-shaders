{
    "Shader": {
        "info": {
            "date": "1524157792",
            "description": "Thanks to some hate and some help also it finally works ",
            "flags": 0,
            "hasliked": 0,
            "id": "Xs3BRN",
            "likes": 1,
            "name": "CylinderOne ",
            "published": 3,
            "tags": [
                "3d",
                "sdf"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "#define EPS 0.002\n#define STEPS 1028\n#define FAR 100.0\n#define PI acos( -1.0 )\n#define REFLECTIONS 4\n\nmat2 rot( float a )\n{\n\n    return mat2( cos( a ), -sin( a ),\n                 sin( a ),  cos( a )\n               );\n\n}\n\nfloat modY( vec3 p, float siz )\n{\n\n    float hal = siz * 0.5;\n    return mod( p.y , siz ) - hal;\n\n}\n\nfloat rand( float h )\n{\n\n    return fract( sin( h * 78.43 ) * 6483.933 );\n\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec2 map( vec3 p )\n{\n\n\t// set size of domain\n    float tileSize = 1.0;\n\t// get ID for each domain\n    vec3 id=vec3(int(p.x/tileSize),int(p.y/tileSize),int(p.z/tileSize));\n\t// domain repition\n    \n    p = mod(p,tileSize)-tileSize*0.5;\n\t// rotation, based on ID    \n    p.xy *= rot( id.x + id.y + id.z + iTime);\n    p.zy *= rot( id.x + id.y + id.z + iTime);\n    //p.x += iTime;\n    \n    return vec2( sdCappedCylinder( p, vec2( 0.1, 0.2 ) ), 0.0 );\n\n\n}\n\nvec3 norm( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy ).x - map( p - e.xyy ).x,\n                            map( p + e.yxy ).x - map( p - e.yxy ).x,\n                            map( p + e.yyx ).x - map( p - e.yyx ).x\n                          ) );\n\n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    float t = 0.0;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = 0.5 * map( ro + rd * t ).x;\n        if( d < EPS || t > FAR ) break;\n        t += d;\n    \n    }\n    \n    return t;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd )\n{\n\n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    return n;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    \n    float siz = 4.0;\n    \n    float x = sin( iTime ) * 0.2;\n    \n    //uv *= rot( fract( sin( id.x ) * 78.5 ) * 399.0 ); \n    \n    //uv += vec2( 0.0, x );\n    \n    //uv.y += fract( sin( id.x * 758.4 ) * 683.9 ); \n    //uv += fract( uv ) - 0.5;\n    \n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    vec3 ro = 0.5 * vec3( sin( mou.x * PI * 2.0 ), iTime, cos( -mou.x * PI * 2.0 ) );\n    \n    \n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    \n    vec3 col = vec3( 0.0 );\n    \n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    \n    if( map( p ).y == 0.0 )\n        \n    for( int i = 0; i < REFLECTIONS; i++ )\n    {\n\n        p = p + ro * 0.05;\n        p += EPS * rd;\n        ro = p + rd * 0.01;\n        rd = reflect( rd, n );\n\n        col += d < EPS ? shad( ro, rd ) * 0.3 : vec3( 0.0 );\n        \n    }\n\n    // Time varying pixel color\n    //col = d < EPS ? shad( ro, rd ) : vec3( 0.0 );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}