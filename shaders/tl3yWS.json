{
    "Shader": {
        "info": {
            "date": "1609794062",
            "description": "Drag the mouse over the canvas to change parameters. If the canvas is white, it's dead, rewind backward to try again",
            "flags": 32,
            "hasliked": 0,
            "id": "tl3yWS",
            "likes": 3,
            "name": "Tea tray",
            "published": 3,
            "tags": [
                "reactiondiffusion"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 340
        },
        "renderpass": [
            {
                "code": "//IMG\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    uv.x-=(iResolution.x-iResolution.y)/iResolution.y / 2.;\n    fragColor = vec4(smoothstep(.3,.7,texture(iChannel1, uv).r));\n    fragColor = vec4(texture(iChannel1, uv).brga);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//A\n#define TIMESTEP 1.\n\n#define GRID (step(.45,length(mod(uv,1./RC)*RC-.5)))\n#define F (0.12  + .01 * (iMouse.y/iResolution.y-.5))\n#define K (0.054  + .01 * (iMouse.x/iResolution.x-.5))\n#define Da (1.)\n#define Db (.3*smoothstep(0.,5.,iTime))\n#define RADIUS 8.\n\nvec2 p2d(vec2 polar) {\n    float alpha = polar.x;\n    float R = polar.y;\n    float x = sin(alpha) * R;\n    float y = cos(alpha) * R;\n    return vec2(x, y);\n}\n\nvec2 d2p(vec2 decart) {\n    float alpha = atan(decart.x, decart.y);\n    float R = length(decart);\n    return vec2(alpha, R);\n}\n\nvec2 snowflakeSymmetry(vec2 p, float rays){\n\tvec2 ar = d2p(p);\n\tfloat astep = 2. * 3.1415 / rays;\n\tfloat a = ar.x, r = ar.y;\n\ta = mod(a, astep);\n\ta -= astep / 2.;\n\ta = abs(a);\n\tp = p2d(vec2(a, r));\t\n\treturn p;\n}\n\nfloat rnd(float x) {return fract(54321.987 * sin(987.12345 * x));}\n\nvoid getVal(vec2 p, out vec2 val, out float diff_a, out float diff_b) {\n  vec2 r = iResolution.xy;\n  vec2 uv = p / r;\n  uv -= .5;\n  uv = snowflakeSymmetry(uv,3.);\n  if(length(uv)>.48) {\n      diff_a=diff_b=0.;\n      return;\n  }\n  uv += .5;\n  //p = uv*r;\n        \n  val = texture(iChannel0, uv).xy;\n  vec2 neigh_val_a = vec2(0.);\n  vec2 neigh_val_b = vec2(0.);\n  vec2 k_anisotropy = abs(normalize(uv-vec2(.5)));\n  if(uv.x<.5)k_anisotropy = k_anisotropy.yx;\n  float k_sum = 0.;\n  for(float i = -RADIUS; i <= RADIUS; i++){\n      for(float j = -RADIUS; j <= RADIUS; j++){\n          if(i==0. || j==0.) continue;\n          if(length(vec2(i,j))>.8*RADIUS) continue;\n          vec2 k = vec2(1.);\n          k_sum += k.x+k.y;\n          vec2 pij = p+vec2(i,j);\n          neigh_val_a += texture(iChannel0, (pij) / r).x * k;\n          neigh_val_b += texture(iChannel0, (pij) / r).y * k;\n      }\n  }\n  neigh_val_a /= k_sum;\n  neigh_val_b /= k_sum;\n  diff_a = (-val.x+neigh_val_a.x+neigh_val_a.y)/2.;\n  diff_b = (-val.y+neigh_val_b.x+neigh_val_b.y)/2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy) / iResolution.y;\n    \n    vec3 colour = vec3(0.0);\n    if (iFrame < 1) {\n        colour = vec3(rnd(uv.x+uv.y*.0001));\n    } else {\n     \tvec2 val;\n        float diff_a, diff_b;\n        getVal(fragCoord.xy, val, diff_a, diff_b);\n        \n        vec2 delta;\n \t\tdelta.x = Da * diff_a - val.x * val.y * val.y + F * (1.0 - val.x);\n  \t\tdelta.y = Db * diff_b + val.x * val.y * val.y - (K + F) * val.y;\n        \n        colour = vec3(val + delta * TIMESTEP, 0.0);\n        colour = clamp(colour, -1., 1.);\n    }\n    \n    fragColor = vec4(colour,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//B\n#define res iResolution.xy\n\nmat2 rot(float a){float s=sin(a),c=cos(a);return mat2(c,-s,s,c);}\n\nfloat dist(vec3 p){\n\tp.y += .2*texture(iChannel0, (p.xz)*vec2(.25,.25)+vec2(.5)).r;\n    float sp = length(p+vec3(0.,5.,0.))-2.;\n    return sp;\n}\n\nvec3 norm(vec3 p){\n    vec2 e = vec2(.01,0.);\n\treturn normalize(vec3(\n    \tdist(p+e.xyy)-dist(p-e.xyy),\n    \tdist(p+e.yxy)-dist(p-e.yxy),\n        dist(p+e.yyx)-dist(p-e.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 FC )\n{\n    float d=0., e, i;\n    vec3 p,rd=normalize(vec3((FC*2.-res)/res.xy,2.));\n    rd.yz*=rot(3.1415/2.);\n    for(i=0.;i++<99.;){\n        p = d*rd;\n        d+=e=dist(p);\n        if(e<.01)break;\n    }\n    //p.xz*=rot(iTime*.1);\n    fragColor = 4.*vec4(vec3(dot(norm(p),vec3(1.)))*.2+.6,1.);\n    fragColor += texture(iChannel1, norm(p));\n    fragColor /= 5.;\n    fragColor /= i/3.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}