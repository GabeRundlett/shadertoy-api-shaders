{
    "Shader": {
        "info": {
            "date": "1593690860",
            "description": "Having fun with interference patterns",
            "flags": 0,
            "hasliked": 0,
            "id": "ttfcWl",
            "likes": 1,
            "name": "Interference cinÃ©tique",
            "published": 3,
            "tags": [
                "interference",
                "optical",
                "vasarely"
            ],
            "usePreview": 0,
            "username": "ciphered",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "//\n// Just having some fun\n//\n\n#define PI \t\t3.1415926\n#define PI2\t\t1.5707963\n\n#define rot(a)   mat2( cos(a), -sin(a), sin(a), cos(a) )\n#define rand(n)  fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453)\n\n\n// @author Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord - .5*iResolution.xy)  / iResolution.y;\n    \n    // time for easier sequencing\n    float t = iTime / 60.0;\n \tfloat c = 0.0;\n    \n   \tvec2 smpos = vec2(-.2, .2);\n    if (t > .5) smpos+= vec2(cos(iTime), sin(iTime)) * .1 * (min(.7, t)-.5)/.2;\n    \n    // drawing circles\n    float l = (length(uv - smpos) - (cos(iTime*.1)*.5 + .7)) * 250.0;\n    float id = floor(l / PI + PI2) + floor(iTime * floor(mod(t*.5, .1) * 18.));\n    float r = hash11(id);\n    \n    \n    c = cos(l) * r;\n    \n    \n    // drawing circles\n    vec2 smpos2 = vec2(-.2 + cos(iTime) * .2, -.2 + sin(iTime) * .2);\n    if (t>.15) {\n        float rt = min(t-.15, .25) / .25;\n        smpos2 = (smpos2 + vec2(.4, .2) * rt) * rot(iTime * .5 * rt);\n    }\n    l = (length(uv - smpos2) - (cos(iTime*.2)*.5 + .7)) * 250.0;\n    id = floor(l / PI + PI2) + floor(iTime * floor(mod(t*.5, .1) * 18.));\n    r = hash11(id);\n    \n    \n    c+= cos(l) * r * clamp(cos(iTime) - .6, .4, .8);\n    \n    \n    if (t > .75) {\n    \t// drawing circles\n        vec2 smpos3 = vec2(2. + cos(iTime) * .4, 2. + sin(iTime) * .2);\n        l = (length(uv - smpos3) - (cos(iTime*.2)*.5 + .7)) * 250.0;\n        id = floor(l / PI + PI2) + floor(iTime * floor(mod(t*.5, .1) * 18.));\n        r = hash11(id);\n\n\n        c+= cos(l) * r * clamp(cos(iTime) - .6, .4, .8) * (t-.5)/.5;   \n    }\n  \n    \n    vec2 dr = smpos - smpos2;\n    float a = atan(dr.y, dr.x);\n    vec2 ruv = (uv - vec2(-.2, .2)) * rot(-a + PI*.5);\n    \n\tc*=.4 + .8 * smoothstep(.04, .01, abs(ruv.x));\n    \n    if (t>.25) {\n    \tc = mix(1.-c, c, cos((t-.25)*20.)*.5+.5);   \n    }\n    \n    // Output to screen\n    fragColor = c * vec4(1., 1., 0.92, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}