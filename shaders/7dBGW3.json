{
    "Shader": {
        "info": {
            "date": "1618012741",
            "description": "Directly inspired by: https://www.youtube.com/watch?v=ldnEHycw40E\n\nclick to reset position",
            "flags": 32,
            "hasliked": 0,
            "id": "7dBGW3",
            "likes": 5,
            "name": "Double Pendulum Butterfly Effect",
            "published": 3,
            "tags": [
                "2d",
                "chaos",
                "pendulum",
                "doublependulum"
            ],
            "usePreview": 0,
            "username": "DJDoomz",
            "viewed": 381
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n\nfloat lineseg(vec2 u, vec2 s, vec2 e)\n{\n    //shift coords to 0,0\n    vec2 l1 = u-s;\n    vec2 e2 = e-s;\n    //formula to find nearest projection of u on se\n    vec2 l2 = e2*(clamp( dot(l1,e2) /(dot(e2,e2)), 0., 1. ) );\n    \n    return 1.-smoothstep(.0,.02,length(l1-l2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 10.4*(fragCoord-.5*iResolution.xy)/iResolution.x;\n\n    vec3 col = vec3(0);\n    \n    for(float i = 0.; i < 250.; i++)\n    {\n        vec4 p = texelFetch(iChannel0, ivec2(i,0), 0);\n\n        float x = 1.5*sin(p.x);\n        float y = -1.5*cos(p.x);\n        float x2 = x + 1.5*sin(p.y);\n        float y2 = y - 1.5*cos(p.y);\n        \n        vec3 c = 0.5 + .5 * sin(i*PI/125.0+vec3(-PI,0,PI)/1.5);\n\n        c *= .2;\n        \n        col += c*lineseg(uv, vec2(0), vec2(x,y));\n        col += c*lineseg(uv, vec2(x,y), vec2(x2,y2));\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//need to store for each pendulum:\n//theta1, theta2, v1, v2\n//x       y       z   w\n\n//https://www.myphysicslab.com/pendulum/double-pendulum-en.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 p = texelFetch(iChannel0, ivec2(fragCoord),0);\n    \n    //reset every 15 secs\n    if(iMouse.z > 0.5 || iFrame <= 1)\n    {\n        float x1 = fragCoord.x/iResolution.x;\n        \n        p = vec4(2.14+fract(x1*.1)+iTime,1,0,0);\n    }\n    else if(fragCoord.x < 250. && fragCoord.y <= 1.)\n    {\n\n        //update position based on velocities\n        p.x += p.z;\n        p.y += p.w;\n\n        //update velocities\n        float div = (2. + 1. - cos(2.*p.x-2.*p.y));\n\n        p.z += 0.00005*((-G*(2.+1.)*sin(p.x)-G*sin(p.x-2.*p.y)-2.*sin(p.x-p.y)*(p.w*p.w+p.z*cos(p.x-p.y)))/div);\n        p.w += 0.00005*((2.*sin(p.x-p.y)*(p.z*p.z*(2.)+G*(1.+1.)*cos(p.x)+p.w*p.w*cos(p.x-p.y)))/div);\n        \n        //friction...\n        p.zw /= 1.0001;\n        \n    }\n    \n    fragColor = p;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define L 1.\n#define G 6.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}