{
    "Shader": {
        "info": {
            "date": "1706843198",
            "description": "Not sure what this is supposed to be, drag around with the mouse",
            "flags": 0,
            "hasliked": 0,
            "id": "Xf2XDV",
            "likes": 14,
            "name": "Honey, jelly lava",
            "published": 3,
            "tags": [
                "lava",
                "stuff",
                "jelly",
                "honey",
                "slimey"
            ],
            "usePreview": 0,
            "username": "ianertson",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define T ((iTime*0.45)+0.03)\n#define M_PI 3.14159265358979323846264338327950288\n#define TAU (M_PI*2.0)\n#define FUI floatBitsToUint\n#define TINT vec3(0.5176470588235295, 0.03137254901960784, 0.03137254901960784)\n\n// if too high, things starts to look like squares\n#define SMOOTHNESS 1.2\n\nmat2 rot(float a) { float s = sin(a); float c = cos(a); return mat2(c, s, -s, c); }\nvec3 aces(vec3 x) { return clamp((x*(2.51*x+0.03))/(x*(2.43*x+0.59)+0.14),0.0,1.0); }\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\nfloat smin(float a, float b, float k) {float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0); return mix(a, b, h) - k*h*(1.0-h); }\nfloat smax(float a, float b, float k) {return smin(a, b, -k); }\nfloat sgt(in float a, in float b, in float s) {float h = clamp(0.5 + 0.5 * (a - b) / s, 0.0, 1.0); return mix(0.0, 1.0, h*h*(3.0-2.0*h));}\nfloat slt(in float a, in float b, in float s) {float h = clamp(0.5 + 0.5 * (b - a) / s, 0.0, 1.0); return mix(0.0, 1.0, h*h*(3.0-2.0*h));}\n\nfloat hash21(vec2 ip, float seed) {\n  uvec2 p = FUI(ip); uint s = FUI(seed); uvec2 k = ~p + ~s;\n  p ^= p << 17U; p ^= p >> 13U; p ^= p >> 4U;\n  p += (p ^ k) + p * k; p *= 1013U;\n  return float(p.x * k.y + p.y + p.y * k.x + k.y) / float(0xFFFFFFFFU);\n}\n\nfloat noise21(vec2 p, float seed) {\n    vec2 id = floor(p);\n    vec2 lv = fract(p);\n    lv = lv * lv * (3.0 - 2.0 * lv);\n    float I = 0.5;\n    vec4 q1 = vec4(vec2(0, 0), vec2(1, 0));\n    vec4 q2 = vec4(vec2(0, 1), vec2(1, 1));\n    float a = hash21(id + q1.xy, seed);\n    float b = hash21(id + q1.zw, seed);\n    float c = hash21(id + q2.xy, seed);\n    float d = hash21(id + q2.zw, seed);\n    return mix(\n        mix(hash21(id + vec2(0, 0), seed), hash21(id + vec2(1, 0), seed), lv.x),\n        mix(hash21(id + vec2(0, 1), seed), hash21(id + vec2(1, 1), seed), lv.x),lv.y\n    );\n}\n\nstruct VSample {\n  vec2 lat;\n  vec2 off;\n  vec2 diff;\n  vec2 minmax;\n  vec2 sum;\n  vec2 depth;\n  vec2 k;\n  float z;\n};\n\nVSample voro(\nin vec2 p,\nin float seed\n){\n\n  VSample vs = VSample(vec2(0.0), vec2(0.0), vec2(0.0), vec2(0.0), vec2(0.0), vec2(0.0), vec2(0.0), 0.0);\n  float n2 = noise21(p.xy*0.05, 5.880111);\n  p = mix(p, p*1.2, (smoothstep(0.04, 0.7, n2)*(0.5+0.5*cos(T+3.*n2))));\n  float NZ = noise21((0.5*p-3.392189)+vec2(cos(T*0.1), sin(T*0.1+11.18)), 4.4421+seed*0.3928);\n  p += (NZ*2.0-1.0)*0.02;\n  vec2 Pi = floor(p);\n  vec2 Pf = fract(p);\n  vs.minmax.x = 9e29;\n  vs.minmax.y = -vs.minmax.x;\n  float m1 = 1.1895;\n  float m2 = 0.7478;\n  float k1 = 4.59381;\n  float k2 = 77.4828;\n  vs.lat = vec2(0.0);\n  vs.off = vec2(0.0);\n  vs.diff = vec2(0.0);\n  NZ = smoothstep(0.49, 1.0, NZ);\n  float Z = noise21((0.78*p + 10.0*vec2(NZ-sin(T-NZ), NZ+cos(T+NZ)))*0.1, seed+0.213);\n  Z = smoothstep(0.2, 0.6, Z);\n  vs.z = Z;\n  float s1 = mix(0.15, 1.0, NZ) * SMOOTHNESS;\n  float s2 = mix(0.15, 1.0, Z) * SMOOTHNESS;\n  for(int j=-1; j<=1; j++){\n    for(int i=-1; i<=1; i++){\n      vec2 lattice = vec2(float(i),float(j));\n      vec2 coord = Pi+lattice;\n      vec2 offset =  vec2(hash21(coord, (seed+k1)*m1), hash21(coord, (seed+k2)*m2));\n      vec2 diff = ((lattice) + (offset - Pf));\n      float dist = dot(diff,diff);\n      float lt = slt(dist, vs.minmax.x, s1);\n      vs.lat = mix(vs.lat, lattice, slt(dist, vs.minmax.x, 0.25));\n      vs.off = mix(vs.off, offset, lt);\n      vs.diff = mix(vs.diff, diff, lt);\n      vs.minmax.x = smin(dist, vs.minmax.x, s2);\n      vs.minmax.y = smax(dist, vs.minmax.y, s2);\n      vs.depth = mix(vs.depth, (vs.off+vs.off*dist), lt);\n      vs.k = mix(vs.k, (vs.off*dist), lt);\n    }\n  }\n  return vs;\n}\n\n////////////////////////////////////////////////////////\n\nvec3 colorSample(vec2 co, float seed, inout VSample vs) {\n  vec3 col = vec3(0.0);\n  vec2 L = normalize(vec2(1, -2));\n  vs = voro(co, seed);\n  vec2 N = normalize(vs.diff*vs.off);\n  float NdotL = max(0.5, dot(N, L));\n  float AO = max(0.0, sqrt(max(0.0, 1.0 - vs.z)));\n  float spec = pow(NdotL, 16.0)*max(0.0, 1.0-AO);\n  col += (TINT / M_PI + spec) * NdotL;\n  col += 0.1*max(0.0, dot(vs.diff, vs.off));\n  col = mix(col, col*col, AO*0.5);\n  col += 0.25*spec*col * sqrt(vs.z);\n  col = mix(col, (col+0.5)*(0.5*vec3(0, 1, 0.5)), smoothstep(0.8, 1.5, length(vs.off)));\n  col = mix(col, col*TINT, smoothstep(0.5, 2.0, vs.off.x+vs.off.y));\n  col = mix(col, vec3(1, 0.5, 0.1), 3.*smoothstep(0.3, 2.0, vs.depth.y));\n  col = mix(col, vec3(0.0, 0.0, 0.0), smoothstep(0.3, 1.9, vs.depth.x));\n  return max(col*0.96, vec3(NdotL*0.05));\n}\n\nvoid mainImage(out vec4 o, in vec2 fc) {\n  vec3 col = vec3(0.0);\n  vec2 uv = (fc-0.5*R.xy)/R.y;\n  vec4 m = vec4((iMouse.xy-0.5*R.xy)/R.y,iMouse.zw);\n  float zoom = mix(4.0, 16.0, 0.5+0.5*sin(T));\n  vec2 co = uv*zoom;\n  if (m.z < 0.01) {\n  float ang = T*0.25;co -= zoom*2.*vec2(sin(ang), cos(ang));}\n  else {co -= zoom*2.*m.xy;}\n  VSample sa; vec3 a = colorSample(co, 0.311, sa);\n  VSample sb; vec3 b = colorSample(co+0.25*sa.diff+sa.off, 55.4231, sb);\n  VSample sc; vec3 c = colorSample(co+4.0*sb.k, 3.958, sc);\n  col += a * luma(a) * max(vec3(0.0), a - 1.5*luma(b));\n  col += b * luma(b) * max(vec3(0.0), b - 1.5*luma(a));\n  col = mix(col, (col+(a+b))*c, max(0.0, 1.0-400.0*luma(col)));\n  col += col*luma(col);\n  col = aces(col);\n  col = pow(col, vec3(1.0 / 2.2));\n  o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}