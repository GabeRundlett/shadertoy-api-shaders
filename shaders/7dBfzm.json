{
    "Shader": {
        "info": {
            "date": "1645849835",
            "description": "A basic flames shader",
            "flags": 0,
            "hasliked": 0,
            "id": "7dBfzm",
            "likes": 1,
            "name": "FlameShader1",
            "published": 3,
            "tags": [
                "flame",
                "fire",
                "flames"
            ],
            "usePreview": 0,
            "username": "railgunSR",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "/*\nMIT License\n\nCopyright (c) 2022 railgunSR\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n/*\nTHIS MAKES USE OF OPENSIMPLEX2, A NOISE ALGORITHM CREATED BY THE FINE FOLKS \nOVER AT https://github.com/KdotJPG/OpenSimplex2\nPLEASE GIVE THEM SOME LOVE.\n\nTHE FLAME FUNCTION IS ONE CREATED BY ME BLENDING A LOG2 INTO A EXPONENTIAL.\n*/\n\n\nvec4 openSimplex2_ImproveXY(vec3 X);\nfloat flameTex(float x, float y);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // vec4 openVec = openSimplex2_ImproveXY(vec3(uv.x,uv.y,iTime));\n    vec4 openVec = openSimplex2_ImproveXY(vec3(uv.x*3.0,uv.y*3.0 - iTime,0.0));\n\n    float nS = 3.0; //noise scale\n\n    //compose textures\n    float flameXScale = 2.0;\n    float flameYScale = 2.0;\n    float flameVal = flameTex(uv.x*flameXScale-1.0/flameXScale,uv.y*flameYScale-1.0/flameYScale);\n\n    float flameComp1 = flameVal * openSimplex2_ImproveXY(vec3(uv.x * nS              ,uv.y * nS - iTime * 1.0,0.0)).x;\n    nS = 3.0;\n    float flameComp2 = flameVal * openSimplex2_ImproveXY(vec3(uv.x * nS              ,uv.y * nS - iTime * 2.0,0.0)).x;\n    nS = 5.0;\n    float flameComp3 = flameVal * openSimplex2_ImproveXY(vec3(uv.x * nS + iTime * 1.0,uv.y * nS - iTime * 3.0,0.0)).x;\n    float flameComp4 = flameVal * openSimplex2_ImproveXY(vec3(uv.x * nS - iTime * 1.0,uv.y * nS - iTime * 3.0,0.0)).x;\n    nS = 3.0;\n    float flameComp5 = flameVal * openSimplex2_ImproveXY(vec3(uv.x * nS              ,uv.y * nS - iTime * 1.5,0.0)).x;\n    float val = \n    flameVal * 3.0 +\n    flameComp1 * 0.2 +\n    flameComp2 * 0.2 +\n    flameComp3 * 0.2 +\n    flameComp4 * 0.2 +\n    flameComp5 * 0.2\n    ;\n    \n    vec3 color = vec3(\n        min(val*2.0,1.0),\n        min(val*0.8,1.0),\n        min(val*0.2,1.0)\n        );\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}\n\n//\n//custom flame function\n///\n\nfloat flameTex(float x, float y){\n    //flip y\n    float t = 1.0 - y;\n    //calculate vertical component\n    float verticalFlameValue = pow(log(t+1.0),1.4) - step(0.5,t) * (pow((2.0 * (t - 0.5)),3.0) / pow(log(2.0),1.4));\n    //calculate dist along horizontal from vertical component\n    float dist = abs(x-0.5);\n    //want to fade to nothing at dist >= vertical flame value\n    //use exponent to get there\n    //clamp range with min\n    float v = max(2.0 * (verticalFlameValue - dist),0.0);\n    //apply exponent to get value\n    float rVal = pow(v,1.4);\n    return rVal;\n}\n\n\n\n//////////////// K.jpg's Re-oriented 4-Point BCC Noise (OpenSimplex2) ////////////////\n////////////////////// Output: vec4(dF/dx, dF/dy, dF/dz, value) //////////////////////\n\n// Inspired by Stefan Gustavson's noise\nvec4 permute(vec4 t) {\n    return t * (t * 34.0 + 133.0);\n}\n\n// Gradient set is a normalized expanded rhombic dodecahedron\nvec3 grad(float hash) {\n    \n    // Random vertex of a cube, +/- 1 each\n    vec3 cube = mod(floor(hash / vec3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;\n    \n    // Random edge of the three edges connected to that vertex\n    // Also a cuboctahedral vertex\n    // And corresponds to the face of its dual, the rhombic dodecahedron\n    vec3 cuboct = cube;\n    cuboct[int(hash / 16.0)] = 0.0;\n    \n    // In a funky way, pick one of the four points on the rhombic face\n    float type = mod(floor(hash / 8.0), 2.0);\n    vec3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));\n    \n    // Expand it so that the new edges are the same length\n    // as the existing ones\n    vec3 grad = cuboct * 1.22474487139 + rhomb;\n    \n    // To make all gradients the same length, we only need to shorten the\n    // second type of vector. We also put in the whole noise scale constant.\n    // The compiler should reduce it into the existing floats. I think.\n    grad *= (1.0 - 0.042942436724648037 * type) * 32.80201376986577;\n    \n    return grad;\n}\n\n// BCC lattice split up into 2 cube lattices\nvec4 openSimplex2Base(vec3 X) {\n    \n    // First half-lattice, closest edge\n    vec3 v1 = round(X);\n    vec3 d1 = X - v1;\n    vec3 score1 = abs(d1);\n    vec3 dir1 = step(max(score1.yzx, score1.zxy), score1);\n    vec3 v2 = v1 + dir1 * sign(d1);\n    vec3 d2 = X - v2;\n    \n    // Second half-lattice, closest edge\n    vec3 X2 = X + 144.5;\n    vec3 v3 = round(X2);\n    vec3 d3 = X2 - v3;\n    vec3 score2 = abs(d3);\n    vec3 dir2 = step(max(score2.yzx, score2.zxy), score2);\n    vec3 v4 = v3 + dir2 * sign(d3);\n    vec3 d4 = X2 - v4;\n    \n    // Gradient hashes for the four points, two from each half-lattice\n    vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0));\n    hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0));\n    hashes = mod(permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0)), 48.0);\n    \n    // Gradient extrapolations & kernel function\n    vec4 a = max(0.5 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);\n    vec4 aa = a * a; vec4 aaaa = aa * aa;\n    vec3 g1 = grad(hashes.x); vec3 g2 = grad(hashes.y);\n    vec3 g3 = grad(hashes.z); vec3 g4 = grad(hashes.w);\n    vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));\n    \n    // Derivatives of the noise\n    vec3 derivative = -8.0 * mat4x3(d1, d2, d3, d4) * (aa * a * extrapolations)\n        + mat4x3(g1, g2, g3, g4) * aaaa;\n    \n    // Return it all as a vec4\n    return vec4(derivative, dot(aaaa, extrapolations));\n}\n\n// Use this if you don't want Z to look different from X and Y\nvec4 openSimplex2_Conventional(vec3 X) {\n    \n    // Rotate around the main diagonal. Not a skew transform.\n    vec4 result = openSimplex2Base(dot(X, vec3(2.0/3.0)) - X);\n    return vec4(dot(result.xyz, vec3(2.0/3.0)) - result.xyz, result.w);\n}\n\n// Use this if you want to show X and Y in a plane, then use Z for time, vertical, etc.\nvec4 openSimplex2_ImproveXY(vec3 X) {\n    \n    // Rotate so Z points down the main diagonal. Not a skew transform.\n    mat3 orthonormalMap = mat3(\n        0.788675134594813, -0.211324865405187, -0.577350269189626,\n        -0.211324865405187, 0.788675134594813, -0.577350269189626,\n        0.577350269189626, 0.577350269189626, 0.577350269189626);\n    \n    vec4 result = openSimplex2Base(orthonormalMap * X);\n    return vec4(result.xyz * orthonormalMap, result.w);\n}\n\n//////////////////////////////// End noise code ////////////////////////////////",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}