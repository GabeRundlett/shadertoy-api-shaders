{
    "Shader": {
        "info": {
            "date": "1645804168",
            "description": "asd",
            "flags": 0,
            "hasliked": 0,
            "id": "ltyczV",
            "likes": 2,
            "name": "EscherThing123",
            "published": 3,
            "tags": [
                "foo"
            ],
            "usePreview": 0,
            "username": "hyrtsi",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "//\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\nconst float PI\t\t\t\t\t= 3.14159;\nconst float HALF_PI\t\t\t\t= PI * 0.5;\nconst float DBL_PI\t\t\t\t= PI * 2.0;\n\n//\n\n\n/**\n * Rotation matrix around the X axis.\n */\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n/**\n * Rotation matrix around the Z axis.\n */\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n/**\n * Constructive solid geometry intersection operation on SDF-calculated distances.\n */\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\n/**\n * Constructive solid geometry union operation on SDF-calculated distances.\n */\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\n/**\n * Constructive solid geometry difference operation on SDF-calculated distances.\n */\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\nfloat boxSDF( vec3 p, vec3 box)\n{\n  return length(max(abs(p)-box,0.0));\n}\n\n/*\nSphere in origin with radius\nCheck if p is inside it or not\n*/\nfloat sphereSDF(vec3 p, float radius)\n{\n    return length(p) - radius;\n}\n\nfloat cylinderSDF(vec3 p, float h, float r) {\n    // How far inside or outside the cylinder the point is, radially\n    float inOutRadius = length(p.xy) - r;\n    \n    // How far inside or outside the cylinder is, axially aligned with the cylinder\n    float inOutHeight = abs(p.z) - h/2.0;\n    \n    // Assuming p is inside the cylinder, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(inOutRadius, inOutHeight), 0.0);\n\n    // Assuming p is outside the cylinder, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(vec2(inOutRadius, inOutHeight), 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\n/*\np sample point\n\nc repetition constant; test it!\nlarger: more space, smaller: all mashes together\n\nTODO:\nIf you replace any row with just p.*,\nthat row will not be generated\n\nExperiment with that...\n*/\nvec3 opRep(in vec3 p, in float c)\n{\n    return vec3(mod(p.x, 2.0 * c) - c,\n                mod(p.y, 2.0 * c) - c,\n                mod(p.z, 2.0 * c) - c);\n}\n\nfloat sceneSDF(vec3 samplePoint) {    \n    // Slowly spin the whole scene\n    //samplePoint = rotateY(iTime / 2.0) * samplePoint;\n        \n    float sideLen = 0.5;\n    float lenMulti = 8.0;\n    vec3 box = vec3(sideLen * lenMulti, sideLen, sideLen);\n    vec3 box2 = vec3(sideLen, sideLen * lenMulti, sideLen);\n    vec3 box3 = vec3(sideLen, sideLen, sideLen * lenMulti);\n\n    //vec2( 0.5*sdSphere(    pos-vec3(-2.0,0.25,-1.0), 0.2 ) + 0.03*sin(50.0*pos.x)*sin(50.0*pos.y)*sin(50.0*pos.z), 65.0 ) );\n    \n    float c = 4.0;      \n    \n\tfloat bar1 = boxSDF(opRep(samplePoint, c), box);\n    float bar2 = boxSDF(opRep(samplePoint, c), box2);\n    float bar3 = boxSDF(opRep(samplePoint, c), box3);\n    \n    float escher = unionSDF(bar1, unionSDF(bar2, bar3));\n        \n    return escher;\n   \n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end)\n{\n\tfloat depth = start;\n    \n    for (int i = 0; i < MAX_MARCHING_STEPS; i++)\n    {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        \n        // If the distance is less than some limit,\n        // the signed function has changed its sign or \"close enough\"\n        // of being inside something\n        if (dist < EPSILON)\n        {\n            return depth;\n        }\n        \n        // Else not hit anything\n        depth += dist;\n        if (depth >= end)\n        {\n            return end;\n        }     \n    }\n\n    return end;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord)\n{\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 estimateNormal(vec3 p)\n{\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity)\n{\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye)\n{\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0, 2.0, 4.0);\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0, 2.0, 2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec3 v = vec3(0.0, 0.0, -11.0 * t);\n    mat3 cam = rotateY(radians(18.0)) * rotateX(radians(18.0));\n\n    vec3 viewDir = rayDirection(45.0 + 8.0 * t, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0.0, 0.0, 1700.0) + v;\n    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = cam * viewToWorld * viewDir;\n    \n    float dist = shortestDistanceToSurface(eye,worldDir,MIN_DIST,MAX_DIST);\n    if (dist > MAX_DIST-EPSILON)\n    {\n        // no hit\n        fragColor = vec4(0.0,0.0,0.0,0.0);\n        return;\n    }\n        \n    // Else color the thing with its color\n\t// The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    \n    //vec3 K_a = vec3(0.2, 0.2, 0.2);\n   \t//vec3 K_d = vec3(0.7, 0.2, 0.2);\n    \n    // Extra:\n    // Use the surface normal as the ambient color of the material\n    vec3 K_a = (estimateNormal(p) + vec3(1.0)) / 2.0;\n    vec3 K_d = K_a;\n\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}