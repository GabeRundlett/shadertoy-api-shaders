{
    "Shader": {
        "info": {
            "date": "1578319795",
            "description": " ",
            "flags": 0,
            "hasliked": 0,
            "id": "3lK3RR",
            "likes": 24,
            "name": "Translucency Rendering",
            "published": 3,
            "tags": [
                "translucency",
                "translucent"
            ],
            "usePreview": 0,
            "username": "ikuto",
            "viewed": 755
        },
        "renderpass": [
            {
                "code": "#define AA 2\n\nstruct Material\n{\n    vec3 \tdiffuseAlbedo;\n    vec3 \tspecularAlbedo;\n    float \tspecularPower;\n};\n\nMaterial materials[] = Material[] \n(\n    Material(vec3(0.0, 0.2, 0.2), vec3(0.3), 8.0),\n    Material(vec3(0.2, 0.2, 0.0), vec3(0.3), 8.0),\n    Material(vec3(0.2, 0.0, 0.2), vec3(0.3), 8.0),\n    Material(vec3(0.2, 0.2, 0.2), vec3(0.2), 8.0)\n);\n\nvec2 opU(vec2 a, vec2 b) { return a.x < b.x ? a : b; }\n\n//distance functions from https://iquilezles.org/articles/distfunctions\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nvec2 map(vec3 p)\n{\n    float objID = 0.0;\n    vec2 res = vec2(sdTorus(p-vec3(0.0, 0.0, -2.0), vec2(1.0, 0.3)), objID++);\n    res = opU(res, vec2(sdRoundBox(p-vec3(1.5, 0.0, 0.5), vec3(0.7, 0.7, 0.7), 0.2), objID++));\n    res = opU(res, vec2(sdOctahedron(p-vec3(-1.5, 0.2, 0.5), 1.2), objID++));\n    res = opU(res, vec2(p.y + 1.0, objID++));    \n    return res;\n}\n\nvec3 calculateTransmittance(vec3 ro, vec3 rd, float tmin, float tmax, float atten)\n{\n    const int MAX_DEPTH = 4;\n    float hitPoints[MAX_DEPTH];\n    int depth = 0;\n    \n    for (float t = tmin; t < tmax;)\n    {\n        float h = abs(map(ro + t * rd).x);\n        if (h < 1e-5) { hitPoints[depth++] = t; t += 0.01; };\n        if (depth >= MAX_DEPTH) break;\n        t += h;\n    }\n    \n    float thickness = 0.0;\n    for (int i = 0; i < depth - 1; i += 2) thickness += hitPoints[i+1] - hitPoints[i];\n    \n    return vec3(1.0) * exp(-atten * thickness * thickness);\n}\n\nvec2 rayMarch(vec3 ro, vec3 rd, float tmin, float tmax)\n{\n\tfor (float t = tmin; t < tmax;)\n    {\n        vec3 pos = ro + t * rd;\n        vec2 res = map(pos);\n        \n        float dist = res.x;\n        if (dist < 0.001) return vec2(t, res.y);\n        \n        t += dist;\n    }\n    return vec2(-1.0, -1.0);\n}\n\nvec3 calculateNormal(vec3 p)\n{\n    vec3 dt = vec3(0.001, 0.0, 0.0);\n    return normalize( vec3 ( map(p+dt.xyy).x - map(p-dt.xyy).x,\n    \t\t\t\t\t\t map(p+dt.yxy).x - map(p-dt.yxy).x,\n                             map(p+dt.yyx).x - map(p-dt.yyx).x ) );\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n\tvec3 color = vec3(0.0);\n    \n    vec2 res = rayMarch(ro, rd, 0.01, 20.0);\n    float t = res.x;\n    float objID = res.y;\n    \n    if (objID > -0.5)\n    {\n        vec3 pos = ro + t * rd;\n        vec3 nor = calculateNormal(pos);\n        \n        vec3 lightDir = normalize(vec3(1.0, 1.5, -1.0));\n        vec3 lightColor = vec3(1.0);\n        Material mat = materials[int(objID)];\n        \n        float t = clamp(0.5 + 0.5 * sin(iTime), 0.2, 1.0);\n        vec3 light = t * lightColor * calculateTransmittance(pos+nor*vec3(0.01), lightDir, 0.01, 10.0, 2.0);\n        light += (1.0 - t) * calculateTransmittance(pos+nor*vec3(0.01), rd, 0.01, 10.0, 0.5);\n        color =  light * mat.diffuseAlbedo;\n        color += light * mat.specularAlbedo * pow(max(0.0, dot(reflect(lightDir,nor),rd)), 4.0);\n    }\n    \n    return color;\n}\n\nmat3 lookAt(vec3 eye, vec3 target, vec3 up)\n{\n    vec3 w = normalize(target - eye);\n    vec3 u = normalize(cross(w, up));\n    vec3 v = cross(u, w);\n    return mat3(u, v, -w);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float an = iMouse.z>0.0 ? 10.0*(iMouse.x/iResolution.x-0.5) : 0.0;\n    \n\tvec3 ro = 5.0*vec3(sin(an), 0.3, cos(an));\n    mat3 viewMat = lookAt(ro, vec3(0.0, -1.0, 0.0), vec3(0.0, 1.0, 0.0));\n\n    vec3 color = vec3(0.0);\n    for (int i = 0; i < AA; ++i)\n    {\n        for (int k = 0; k < AA; ++k)\n        {\n            vec2 offset = vec2(float(i)+0.5,float(k)+0.5) / float(AA) - 0.5;\n            vec2 uv = (2.0*(fragCoord+offset)-iResolution.xy)/iResolution.y;    \n    \t    vec3 rd = viewMat * normalize(vec3(uv, -1.5));\n    \t\t\n            color += render(ro, rd);\n        }\n    }\n    \n\tcolor /= float(AA*AA);\n\tcolor = pow(color, vec3(0.4545));\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}