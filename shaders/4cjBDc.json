{
    "Shader": {
        "info": {
            "date": "1725586448",
            "description": "Yet another color picker. Should be pretty easy to copy and paste into your Shadertoy shader. NOTE: shows analytical ambient occlusion, color bleeding and antialiasing.",
            "flags": 32,
            "hasliked": 0,
            "id": "4cjBDc",
            "likes": 76,
            "name": "Basic Color Picker",
            "published": 3,
            "tags": [
                "2d",
                "color",
                "hsv",
                "picker"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1910
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2024 Inigo Quilez\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Yet another basic color picker.\n//    Common tab  : the picker code\n//    Buffer A tab: mouse interaction with picker\n//    Image tab   : a scene using the color from the picker.\n//\n// Bonus: the scene shows analytical ambient occlusion, color\n//        bleeding and antialiasing.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // get color form piker\n\tvec3 color = pow( picker_getRGB(iChannel0), vec3(2.2) );\n\n    // camera\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    const float flen = 2.0;\n\tvec3 ro = vec3(0.0, 0.0, 4.0 );\n\tvec3 rd = normalize( vec3(p,-flen) );\n    \n    // render background\n    vec3 col = vec3(1.0);\n\n    // render plane\n    float t = (-1.0-ro.y)/rd.y;\n    if( t>0.0 )\n    {\n        vec3  pos = ro + t*rd;\n        float l2 = dot(pos,pos);\n        float occ = 1.0+pos.y/(l2*sqrt(l2)); // https://iquilezles.org/articles/sphereao/\n        col = occ*(occ+(1.0-occ)*color);\n    }\n\n    // render sphere\n\tfloat b = dot( ro, rd );\n\tfloat c = dot( ro, ro ) - 1.0;\n\tfloat h = b*b - c;\n\tif( h>0.0 )\n    {\n\t    t = -b-sqrt(h);\n        vec3  pos = ro + t*rd;\n        vec3  nor = normalize(pos);\n        float occ = 0.5+0.5*nor.y; // plane occlusion\n        float d = 1.0-sqrt(max(0.0,1.0-h)); // https://iquilezles.org/articles/spherefunctions\n        float al = clamp( 0.5*iResolution.y*flen*d/t, 0.0, 1.0 );\n        col = mix(col,occ*mix(color,2.0*color*color,max(-nor.y,0.0)),al);\n    }\n    \n    // gamma\n    col = pow( col, vec3(0.4545) );\n\n    // render color picker\n    col = piker_draw( iChannel0, col, fragCoord, iResolution.xy );\n\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This color picker only needs one pixel of storage\n\n//-----------------------------------------------------\n// Private data and helpers (can't encapsulate in GLSL)\n//-----------------------------------------------------\nconst struct Picker\n{\n    vec2  cen; // center\n    float wid; // width\n    float mar; // markers\n}kPicker = Picker(vec2(-1.4,-0.65),0.25,0.03);\n\nfloat c2d_to_h( vec2 p ) { return clamp(0.5+0.5*p.y/kPicker.wid,0.0,1.0); }\nvec2  c2d_to_sv(vec2 p ) { return clamp(0.5+0.5*p/kPicker.wid,0.0,1.0); }\nfloat sdBox( vec2 p, vec2 b ) { vec2 q = abs(p)-b; return min(max(q.x,q.y),0.0) + length(max(q,0.0)); }\nvec3  hsv2rgb(  vec3 c ) { vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 ); return c.z * mix( vec3(1.0), rgb, c.y); }\n\n//-----------------------------------------------------\n// Public API\n//\n//    picker_do()\n//    piker_draw()\n//    picker_getRGB()\n//\n//-----------------------------------------------------\nvec4 picker_do( bool isFirstFrame, sampler2D sam, in vec4 mouse, in vec2 fragCoord, in vec2 resolution )\n{\n    vec2 p = (2.0*mouse.xy-resolution)/resolution.y - kPicker.cen;\n\n    vec4 data = texelFetch(sam,ivec2(0,0),0);\n    if( isFirstFrame ) data = vec4(0.15,0.7,0.9,0.0); // initial color\n\n    if( mouse.w>0.0  ) // on mouse click\n    {\n        if( sdBox(p-vec2(kPicker.wid+kPicker.mar*2.0,0.0), vec2(kPicker.mar,kPicker.wid) )<0.0 ) data.w = 1.0;\n        else if( sdBox(p, vec2(kPicker.wid) )<0.0 ) data.w = 2.0;\n    }\n    if( mouse.z>0.0 ) // on mouse down\n    {\n             if( abs(data.w-1.0)<0.5 ) data.x = c2d_to_h(p);\n        else if( abs(data.w-2.0)<0.5 ) data.yz = c2d_to_sv(p);\n    }\n    else\n    {\n        data.w = 0.0;\n    }\n    \n    return (ivec2(fragCoord)==ivec2(0,0)) ? data : vec4(0.0);\n}\n\nvec3 piker_draw( sampler2D sam, vec3 col, in vec2 fragCoord, in vec2 resolution )\n{\n    vec2 p = (2.0*fragCoord-resolution)/resolution.y - kPicker.cen;\n    float px = 2.0/resolution.y;\n    \n    vec3 hsv = texelFetch(sam,ivec2(0,0),0).xyz;\n    \n    // color\n    {\n    const float kShadow = 256.0;\n    float d1 = sdBox( p-vec2(kPicker.wid+kPicker.mar*2.0,0.0), vec2(kPicker.mar,kPicker.wid) );\n    float d2 = sdBox( p, vec2(kPicker.wid) );\n    float d = min(d1,d2);\n    if( d>0.0) col *= 1.0-0.75/(1.0+kShadow*d);\n    col = mix( col, hsv2rgb(vec3(c2d_to_h(p),1.0,1.0)), smoothstep(1.5*px,0.0,d1) );\n    col = mix( col, hsv2rgb(vec3(hsv.x,c2d_to_sv(p))),  smoothstep(1.5*px,0.0,d2) );\n    }\n    // marks\n    {\n    //vec2 ce1 = kPicker.rad*vec2(cos(6.283185*hsv.x),sin(6.283185*hsv.x));\n    vec2 ce1 = vec2(kPicker.wid+kPicker.mar*2.0,2.0*kPicker.wid*hsv.x-kPicker.wid);\n    vec2 ce2 = 2.0*kPicker.wid*hsv.yz-kPicker.wid;\n    float d = abs( min(length(p-ce1),length(p-ce2))-kPicker.mar)-kPicker.mar*0.3;\n    col = mix( col, vec3(0.0), smoothstep(0.0,-1.5*px,d) );\n    col = mix( col, vec3(1.0), smoothstep(-1.5*px,-3.0*px,d) );\n    }\n\n    return col;\n}\n\nvec3 picker_getRGB( sampler2D sam )\n{\n    return hsv2rgb( texelFetch(sam,ivec2(0,0),0).xyz );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = picker_do( iFrame==0, iChannel0, iMouse, fragCoord, iResolution.xy );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}