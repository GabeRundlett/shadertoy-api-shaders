{
    "Shader": {
        "info": {
            "date": "1686322690",
            "description": "Convert pixel coordinates to containing hex location (in cube coordinates, see https://www.redblobgames.com/grids/hexagons/).",
            "flags": 0,
            "hasliked": 0,
            "id": "dtySDy",
            "likes": 4,
            "name": "(Yet another) pixel2hex",
            "published": 3,
            "tags": [
                "hexagon"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// See https://www.redblobgames.com/grids/hexagons/ for context.\n// The algorithm is nearly equivalent to\n// https://www.redblobgames.com/grids/hexagons/more-pixel-to-hex.html#justin-pombrio\n// but derived independently.\n\n// Returns point on the plane u+v+w=0 from\n// its x,y coordinates in specific\n// Cartesian 2D coordinate system on that plane.\nvec3 pixel2cube(vec2 xy)\n{\n    const float A=1.0/sqrt(3.0),B=1.0/3.0;\n    return mat2x3( // WARNING: column-major!\n        +A,0.0,-A,\n        -B,B+B,-B)*xy;\n}\n\n// Returns containing hexagon location in cube coordinates.\n// May easily return ivec3 instead.\n// WARNING: result has the wrong sign (i.e. the offset\n// from hex center is r+cube_round(r), NOT r-cube_round(r)).\nvec3 cube_round(vec3 uvw)\n{\n#if 0\n    // Concise but may violate constraint q+r+s=0 due to\n    // floating point accuracy, and also inefficient.\n    return round((floor(uvw.zxy-uvw)-floor(uvw-uvw.yzx))/3.0);\n#else\n    float xy=floor(uvw.x-uvw.y);\n    float yz=floor(uvw.y-uvw.z);\n    float zx=floor(uvw.z-uvw.x);\n    float q=round((zx-xy)/3.0);\n    float r=round((xy-yz)/3.0);\n    float s=-q-r;\n    return vec3(q,r,s);\n#endif\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    // Pixel coordinates.\n    vec2 xy=(fragCoord-iResolution.xy/2.0)/iResolution.x;\n    \n    // Scale.\n    xy*=15.0+10.0*sin(0.37*iTime);\n    xy+=10.0*vec2(sin(0.17*iTime),cos(0.17*iTime));\n\n    // Float-point cube coordinates.\n    vec3 uvw=pixel2cube(xy);\n    \n    // Integer cube coordinates.\n    vec3 qrs=cube_round(uvw);\n\n    // Output to screen.\n    fragColor=vec4(0.5*sin(28.0*qrs)+0.5,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}