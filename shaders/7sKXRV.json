{
    "Shader": {
        "info": {
            "date": "1634955755",
            "description": "idk man what even are shaders\n\nFFT Integrated looks like crap since you are only sampling audio at random every frame instead of actually summing all the signal.\n\nAlso soundcloud is ded RIP (soundcloud is back POGGIE WOGGIE)",
            "flags": 96,
            "hasliked": 0,
            "id": "7sKXRV",
            "likes": 11,
            "name": "rehab",
            "published": 3,
            "tags": [
                "rehabilitation"
            ],
            "usePreview": 0,
            "username": "sp4ghet",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "// Bonzo to Shadertoy\n#define v2Resolution iResolution\n#define texFFT iChannel0\n#define time iTime\n#define texFFTIntegrated iChannel1\n#define texNoise iChannel2\n//\n#define saturate(x) clamp(x, 0., 1.)\n#define lofi(x, n) floor((x)*(n)) / (n)\nconst float PI = acos(-1.);\n\nconst vec3 up = vec3(0.,1.,0.);\n\nmat2 r2d(float t){\n    float c = cos(t), s = sin(t);\n    return mat2(c,s,-s,c);\n}\n\nfloat tr(vec3 p, vec2 rr){\n  p.xz *= r2d(time * .2);\n  float x = length(p.xz) - rr.x;\n  float y = p.y;\n  float th = atan(p.z, p.x);\n  vec2 xy = vec2(x,y);\n  float t = floor(time) + 0.5 + 0.5 * cos(PI * exp(-3. * fract(time)));\n  vec2 uv = vec2(th+.3*t, .5*t+atan(xy.y, xy.x));\n  rr.y -= .1 * texture(texNoise, uv).r;\n  xy *= r2d(th * 4.);\n  float disp = .5 * rr.y * sin(3. * time + th);\n  xy.y = abs(xy.y + disp) - rr.y;\n  return length(xy) - rr.y;\n}\n\nvoid chmin(inout vec4 a, in vec4 b){\n    a = abs(a.x) < abs(b.x) ? a : b;\n}\n\n\nfloat glo = 0.;\nfloat vl = 0.;\nvec4 map(vec3 q){\n  vec3 p = q;\n  vec4 d = vec4(1e5, 0,0,0);\n  \n  p -= vec3(-.5,.5,0);\n  p.xz *= r2d(-PI * .15);\n  p.xy *= r2d(-PI * .35);\n  p.yz *= r2d(-PI * .1);\n  float tr1 = tr(p, vec2(1., .15));\n  \n  p.xz *= r2d(PI * .75);\n  float sp = length(p.xz - .005 * p.y*p.y) - .2;\n  float ns = texture(texNoise, p.xy - vec2(0,vl)).r;\n  sp = max(abs(sp), .01);\n  glo += ns * .3 / (sp*sp + .05);\n  chmin(d, vec4(sp, 2, 0, 0));\n  \n  p = q;\n  p -= vec3(.5, -.5, -.25);\n  p.yz *= r2d(-PI * .4);\n  float tr2 = tr(p, vec2(1., .15));\n  float dst = min(tr1, tr2);\n  chmin(d, vec4(dst, 0,0,0));\n  \n  p.xz *= r2d(PI * .5);\n  sp = length(p.xz + .01 * p.y*p.y) - .2;\n  sp = max(abs(sp), .01);\n  ns = texture(texNoise, p.zy + vec2(0,vl)).r;\n  glo += ns * .3 / (sp*sp + .05);\n  chmin(d, vec4(sp, 2, 0, 0));\n  \n  \n  return d;\n}\n\nvec3 normal(vec3 p, vec2 e){\n  return normalize(vec3(\n    map(p + e.xyy).x - map(p - e.xyy).x,\n    map(p + e.yxy).x - map(p - e.yxy).x,\n    map(p + e.yyx).x - map(p - e.yyx).x\n  ));\n}\n\nvec3 grad(float t){\n  t *= 2. * PI;\n  return vec3(\n    .3 + .3 * cos(t),\n    .5 + .5 * cos(t),\n    .7 + .3 * cos(t)\n  );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 pt = uv - 0.5;\n    vec2 aspect = vec2(v2Resolution.y / v2Resolution.x, 1);\n    pt /= aspect;\n\n    pt *= dot(pt,pt) * .5 + 1.;\n\n    vl = texture(texFFTIntegrated, vec2(.01, .5)).r;\n\n    vec3 c = vec3(0);\n    c.rg = smoothstep(vec2(.05), vec2(.01), mod(pt, .1) / .1);\n    c = vec3(max(c.r, c.g));\n\n\n    vec3 ro = vec3(0,0,-5);\n    vec3 fo = vec3(0);\n    vec3 cz = normalize(fo-ro);\n    vec3 cx = normalize(cross(cz, up));\n    vec3 cy = cross(cx, cz);\n    vec3 rd = mat3(cx,cy,cz) * normalize(vec3(pt, 1));\n\n    float t = 0., precis = 1e-5;\n    vec4 d;\n    vec3 p = ro;\n\n    for(int i=0; i<128; i++){\n        p = ro + rd*t;\n        d = map(p);\n        t += d.x * .7;\n        precis = t * .001;\n        if(t > 50. || d.y != 2. && abs(d.x) < precis){\n          break;\n        }\n    }\n\n    vec3 l = normalize(vec3(-1., 2., -.6));\n    if(d.y != 2. && abs(d.x) < precis){\n        vec3 n = normal(p, vec2(precis, -precis));\n        vec3 h = normalize(l-rd);\n        //vec3 a = vec3(.2, .85, .9);\n        vec3 a = grad(abs(dot(n,-rd)));\n        float r0 = 2.;\n        float fre = r0 * pow(1. - abs(dot(n,-rd)), 5.);\n        c = a * max(dot(n,l), .1);\n        c += a * pow(dot(n,h), 15.);\n        c += (1.-a) * fre;\n\n        float ao = 0., sss=0.;\n        for(float aod=0.05; aod<.3; aod+=.05){\n            ao += map(p + n*aod).x / aod;\n            float ssd = aod * 6.;\n            sss += map(p + h*ssd).x / ssd;\n        }\n        c += (1.-a) * .3 * sss * .05 / .3;\n        c *= ao * .05 / .3;\n    }\n\n    float vol = .15 * texture(texFFT, vec2(.01)).r;\n    c += vec3(.9,.2,.2) * (.1 * vol + .001) * glo;\n\n\n    float vig = max(1. - dot(pt,pt), 0.);\n    c *= vig;\n  \n\n    // Output to screen\n    fragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 28194,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/poniyama_com/telecommunication-from-x"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 c = texture(iChannel0, vec2(uv.x,.25));\n    c = .01 * (exp(c) - 1.);\n    vec4 back = texture(iChannel1, uv);\n    fragColor = c + back;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 28195,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/poniyama_com/telecommunication-from-x"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}