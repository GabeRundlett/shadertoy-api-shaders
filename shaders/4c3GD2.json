{
    "Shader": {
        "info": {
            "date": "1712117725",
            "description": "Noise",
            "flags": 0,
            "hasliked": 0,
            "id": "4c3GD2",
            "likes": 2,
            "name": "VoronoiNoiseTest_yl",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "yangle",
            "viewed": 130
        },
        "renderpass": [
            {
                "code": "#define T iTime\n\nfloat N21(vec2 p) {\n  return fract(sin(p.x*131.13+p.y*6574.31231)*5641.3212);\n}\n\n\nvec2 randVec(vec2 value)\n{\n  vec2 vec = vec2(dot(value, vec2(127.1, 337.1)), dot(value, vec2(269.5, 183.3)));\n  vec = -1. + 2. * fract(sin(vec) * 43758.5453123);\n  return vec;\n}\n\nvec2 N22(vec2 p){\n    float a = N21(randVec(p));\n    float b = N21(randVec(p));\n    return vec2(a, b);\n}\n\n// cells\nvec2 voronoi(vec2 uv, float angleOffset, float cellDensity)\n{\n  float Out=0.0;\n  float Cells=0.0;\n  // cellDensity 其实就是 scale\n  vec2 g = floor(uv * cellDensity);  // 格子编号\n  vec2 f = fract(uv * cellDensity);  // 格子周期\n  float t = 8.0;\n  vec3 res = vec3(8.0, 0.0, 0.0);\n  for (int y = -1; y <= 1; y++)\n  {\n    for (int x = -1; x <= 1; x++)\n    {\n      vec2 lattice = vec2(x, y);\n      vec2 dv = lattice + g;  // 周围 9 个格点编号\n      \n      vec2 offset = sin(N22(dv)*T) * .5 + .5;  // 随机偏移\n      // vec2 offset = vec2(sin(dv.y * angleOffset), cos(dv.x * angleOffset)) * 0.5 + 0.5; // 随机偏移\n      float d = distance(lattice + offset, f);\n      if (d < res.x)\n      {\n        res = vec3(d, offset.x, offset.y);\n        Out = res.x;\n        Cells = res.y;\n      }\n    }\n  }\n  return vec2(Out, Cells);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    //vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = vec3(0.);\n    \n    vec2 d = voronoi(uv,1.,10.);\n    \n   \n    col = vec3(d.x);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}