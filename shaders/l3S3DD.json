{
    "Shader": {
        "info": {
            "date": "1708469890",
            "description": "Exact distance to a segment projected onto a unit sphere.\n\n(Distance is a measure of arc length)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "l3S3DD",
            "likes": 8,
            "name": "Distance to Spherical Segment",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "distancefield",
                "sdf",
                "sphere",
                "sphere",
                "primitives",
                "cut"
            ],
            "usePreview": 0,
            "username": "natevm",
            "viewed": 181
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2024 Nate Morrical\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Computes an exact distance to a spherical edge segment, where distance is an arc length angular measure. \n\n// cheaper alternative to acos intrinsic\n// https://developer.download.nvidia.com/cg/acos.html\nfloat swacos(float x) {\n  float negate = float(x < 0.f);\n  x = abs(x);\n  float ret = -0.0187293f;\n  ret = ret * x;\n  ret = ret + 0.0742610f;\n  ret = ret * x;\n  ret = ret - 0.2121144f;\n  ret = ret * x;\n  ret = ret + 1.5707288f;\n  ret = ret * sqrt(1.f-x);\n  ret = ret - 2.f * negate * ret;\n  return negate * 3.14159265358979f + ret;\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n// This function returns just the arc length distance \nfloat udArc(vec3 o, vec3 a, vec3 b)\n{\n    // Compute the normal to the plane defined by A and B (great circle's plane)\n    vec3 n = cross(a, b);\n    n = normalize(n);\n    \n    // project point onto great circle \n    vec3 p = o - dot(o, n) * n;\n    p = normalize(p);\n    \n    // vector tangent to a, pointed inwards to the arc \n    vec3 ta = normalize(cross(n, a));\n    \n    // vector tangent to b, pointed inwards to the arc\n    vec3 tb = normalize(cross(b, n));\n    \n    // To the left or right of the arc\n    float dta = dot(p, ta);\n    float dtb = dot(p, tb);\n    if (dta < 0.f || dtb < 0.f) {\n        return min(swacos(dot(o, a)), swacos(dot(o, b)));\n    }\n    \n    // In the middle of the arc. o to p is the shortest distance.\n    return swacos(dot(o, p));\n}\n\n// ------------------------------------------------------------------------------------\n// below is just code to visualize the distance field\n// ------------------------------------------------------------------------------------\n\nvec2 sdCutHollowSphere( vec3 p, float r, float h, float t )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float w = sqrt(r*r-h*h);\n    \n    float dist = ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                            abs(length(q)-r) ) - t;\n    float ID = 0.f;\n    return vec2(dist, ID);\n}\n\nvec2 sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\tfloat dist = length( pa - ba*h ) - r;\n    float ID = 1.f;\n    return vec2(dist, ID);\n}\n\nvec2 sdSphere( vec3 p, float s )\n{\n    float dist = length(p)-s;\n    float ID = 2.f;\n    return vec2(dist, ID);\n}\n\nvoid getSphere(out vec3 p, out float r) {\n    p = vec3(0.f);\n    r = .5f;\n}\n\nvoid getSegment(out vec3 v1, out vec3 v2) {\n    v1 = cos( iTime*0.5 + vec3(0.0,0.0,2.00) + 0.0 );\n\tv2 = cos( iTime*0.5 + vec3(0.0,0.0,2.00) + 1.5 );\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x < d2.x) ? d1 : d2;\n}\n\nvec2 map( in vec3 pos )\n{   \n    vec2 result = vec2(1e38f, -1.0);\n    \n    // clipped sphere\n    vec3 p; float r;\n    getSphere(p, r);\n    \n    float h = 0.2;\n    float th = 0.005;\n    result = opU(result, sdCutHollowSphere(pos - p, r, h, th));\n    \n    // capsule to represent our line\n    vec3 v1, v2;\n    getSegment(v1, v2);\n    result = opU(result, sdCapsule(pos, v1, v2, .02 ));\n    \n    result = opU(result, sdCapsule(pos, v1, vec3(0.f), .01 ));\n    result = opU(result, sdCapsule(pos, v2, vec3(0.f), .01 ));\n        \n    return result;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<64; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, k*h/t );\n        t += clamp( h, 0.01, 0.10 );\n        if( res<0.002 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ).x );\n}\n    \n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvec3 colormap(float d) {\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0*abs(d));\n    col *= 0.8 + 0.2*cos(120.0*d);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n    float camDist = 1.5f;\n\t//vec3 ro = vec3( camDist*cos(iTime * .2), camDist*sin(iTime * .2),  0.3f);\n    vec3 ro = vec3( 0.0, camDist,  0.5f); // for a still camera\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 2.*ww );\n\n        // raymarch\n        const float tmax = 5.0;\n        float t = 0.0;\n        vec2 h = vec2(1e38f, -1.f);\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            h = map(pos);\n            if( h.x<0.0001 || t>tmax ) break;\n            t += h.x;\n        }\n        \n        // albedo\n        vec3 albedo = vec3(1.0,1.0,1.0);\n        // (if we hit the sphere, compute distance field)\n        if( h.y == 0.0 )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 sphereCenter = vec3(0.f);\n                   \n            vec3 dir = normalize(pos) - sphereCenter;\n            \n            vec3 v1, v2;\n            getSegment(v1, v2);\n            \n            // project edge points to unit sphere\n            v1 = normalize(v1);\n            v2 = normalize(v2);\n            float th = 0.5*(0.5+0.5*cos(iTime*1.1+1.0));\n            float arcLen = udArc(dir, v1, v2) - th;\n            \n            albedo = colormap(arcLen);\n        }\n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            \n            vec3 lig = normalize(ro + vec3(0.f, 0.f, .5f));\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            if( dif>0.001 ) dif *= calcSoftshadow( pos+nor*0.001, lig, 0.001, 1.0, 32.0 );\n            float amb = 0.5 + 0.3*dot(nor,vec3(0.0,1.0,0.0));\n            col = albedo * amb + albedo * dif;\n        }\n\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}