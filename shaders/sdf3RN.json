{
    "Shader": {
        "info": {
            "date": "1615570851",
            "description": "A ring, and it wobbles",
            "flags": 0,
            "hasliked": 0,
            "id": "sdf3RN",
            "likes": 4,
            "name": "Wobbly Ring",
            "published": 3,
            "tags": [
                "ring2d"
            ],
            "usePreview": 0,
            "username": "dh7892",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "\n// Try playing with these parameters\nfloat MAGNITUDE = 1.0/10.0; // How big the perturbation away from a sphere can get\nfloat SPEED = 0.8; // How fast the shape will evolve\nfloat RESOLUTION = 180.0 / 360.0; // Number of perturbations per 360 degrees\nfloat COL = 1.0; // Amount of colour to use\nfloat SMOOTH = 1.0; // Smmothness of perturbation\nfloat WOBBLE = 0.0; // Wobble!\n\n// Other constants\nfloat RADIUS = 0.3;\nvec2 CENTRE = vec2(0.5, 0.5);\nfloat BORDER_THICKNESS = 0.005;\nvec3 RED = vec3(1.0, 0.0, 0.0);\nvec3 BLUE = vec3(0.0, 0.0, 1.0);\nvec3 WHITE = vec3(1.0, 1.0, 1.0);\nvec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n\nfloat rand(float x, float time)\n{\n    float scale = (0.001 + WOBBLE) * mod(time, 1000.0) * 0.001;\n    return fract(sin(x + scale)*100000.0);\n}\n\nvec2 polar(vec2 uv)\n{\n    float r = distance(uv, CENTRE);\n    float theta = degrees(atan(uv.y, uv.x)) * RESOLUTION;\n    return vec2(r, theta);\n}\n\nfloat perturb(float time)\n{\n    return pow(sin(float(SPEED * time)), 2.0);\n}\n\nfloat smoothDist(vec2 uv, float time)\n{\n    // Return the distance from our wobbly ring at a time\n    float dist = distance(uv, CENTRE);\n    float theta = degrees(atan(uv.y, uv.x)) * RESOLUTION;\n    float diff = smoothstep(floor(theta), ceil(theta), theta);\n    \n    float dR = mix(rand(floor(theta), time), rand(ceil(theta), time), diff) * MAGNITUDE;\n    \n    return dist - (dR *perturb(time)) - RADIUS;\n}\n\n\n\nfloat stepDist(vec2 uv, float time)\n{\n    \n    float dist = distance(uv, CENTRE);\n    float theta = floor(degrees(atan(uv.y, uv.x)) * RESOLUTION);\n    \n    float dR = rand(theta, time) * MAGNITUDE;\n    \n    return dist - (dR * perturb(time)) - RADIUS;\n}\n\nfloat borderDist(vec2 uv, float time)\n{\n    return mix(stepDist(uv, time), smoothDist(uv, time), SMOOTH);\n}\n\nvec4 border(float dist)\n{\n    float border = step(BORDER_THICKNESS, abs(dist));\n        \n    vec3 borderColor = mix(BLACK, WHITE, border);\n    return vec4(borderColor, 1.0 - borderColor);\n}\n\n\nvec4 redArea(float dist)\n{    \n    vec4 borderColor = border(dist);\n\n    return mix(vec4(RED, 1.0), vec4(WHITE, 0.0), step(BORDER_THICKNESS,dist));    \n}\n\nvec4 blueArea(float dist)\n{    \n    vec4 borderColor = border(dist);\n\n    return mix(vec4(BLUE, 1.0), vec4(WHITE, 0.0), step(BORDER_THICKNESS,dist));    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float bDist = borderDist(uv, float(iTime));\n    vec4 borderColor = border(bDist);\n    \n    float redDist = borderDist(uv, float(floor(iTime * 10.0)));\n    vec4 red = redArea(redDist);\n    \n    float blueDist = borderDist(uv, float(floor(iTime * 9.0)));\n    vec4 blue = blueArea(blueDist);\n    \n    vec4 col = mix(red, blue, 0.5);\n    col = mix(vec4(WHITE, 1.0), col, COL);\n\n    fragColor = mix(col, borderColor, borderColor.w);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}