{
    "Shader": {
        "info": {
            "date": "1610510153",
            "description": "I'm still learning about colours and how to add them to individual objects. This was me experimenting with colour and displacement maps.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttKcz1",
            "likes": 3,
            "name": "2 pillars (work in progress)",
            "published": 3,
            "tags": [
                "3d",
                "displacement",
                "color",
                "colour",
                "pillars",
                "elemental"
            ],
            "usePreview": 0,
            "username": "intrakits",
            "viewed": 284
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define SURFACE_DIST 0.01\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r, float offX, float offY, float offZ) {\n\ta.x += offX;\n    b.x += offX;\n    \n    a.y += offY;\n    b.y += offY;\n    \n    a.z += offZ;\n    b.z += offZ;\n    \n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n    //line from a to b\n    vec3 ab = b-a;\n    \n    // line from p to a\n    vec3 ap = p-a;\n    \n    // as p approaches a, it will be 1\n    // as p approaches b it will b 0\n    float t = dot(ab,ap) / dot(ab,ab);\n    \n    // clamp values between 0 and 1\n    t= clamp(t,0.,1.);\n    \n    // center point of the capsule\n    // start at a (top of capsule)\n    // go towards b, t steps\n    vec3 c = a + t*ab;\n    \n    float d = length(p-c)-r;\n    \n    return d;\n}\n\nfloat sdTorus(vec3 p, vec2 r){\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat dBox(vec3 p, vec3 s){\n    return length(max(abs(p)-s,0.));\n}\nfloat GetDist(vec3 p){\n    // some test object\n    vec4 sphere = vec4(0,1,6,1);\n    \n    // distance to sphere\n    //--------------------------------\n    // distance to center of sphere: \n    // length(sphere position - camera position)\n    // distance to outside of the sphere:\n    // length(sphere position - camera position) - sphere radius\n   // float ds = length(p-sphere.xyz)-sphere.w;\n    \n    //distance to floor (plane)\n    //this is just height of the origin point passed\n    float xMov = pow(sin((p.x*20. + iTime*pow(sin(iTime*.0001),5.))),8.)*.2;\n    float zMov = pow(cos((p.z*20. + iTime*pow(cos(iTime*.0001),5.))),8.)*.3;\n    float dp =p.y;\n   \n    // cylinder distance\n    float offX = 2.;\n    float offY = 0.;\n    float offZ = 0.;\n    float cyld2 = sdCylinder(p, vec3(0,0,0), vec3(0,2,0), 0.5, offX, offY, offZ);\n    \n    vec2 uv3 = vec2(atan(p.x-offX,p.z-offZ)/(3.14159*2.),p.y/5.)+.5;\n    // cylinder distance\n    offX = 0.;\n    offY = 0.;\n    offZ = 0.;\n    float cyld = sdCylinder(p, vec3(0,0,0), vec3(0,2,0), 0.5, offX, offY, offZ);\n    //displacement map for cylinder\n    //uv for pillar\n    vec2 uv = vec2(atan(p.x,p.z)/(3.14159*2.),p.y/5.)+.5;\n    //uv for ground\n    vec2 uv2 = vec2(p.x/10.,p.z/10.)+.5;\n    \n    \n    \n    float disp = texture(iChannel1,uv).r;\n    float gDisp = texture(iChannel1,uv2).r;\n    float disp3 = texture(iChannel1,uv3).r;\n\n    float d = cyld;\n    disp *= smoothstep(2.,1.8,abs(p.y));\n    disp3 *= smoothstep(2.,1.8,abs(p.y));\n    float disp2 = sin(p.y*4.)*cos(p.x*4.);\n    //disp -= disp2*.6;\n    d-=disp*.3;\n    dp -= gDisp*.5;\n\n    d = min(dp,d);\n    \n    \n    cyld2-=disp3*.3;\n    d = min(cyld2,d);\n    return d;\n}\nfloat RayMarch(vec3 ro, vec3 rd){\n    // distance from origin\n    float dO=0.;\n    // march until max steps is achieved or object hit\n    for(int i=0; i <MAX_STEPS; i++){\n        // current point being evaluated\n        vec3 p = ro + dO*rd;\n        \n        // get distance to seam\n        float ds = GetDist(p);\n        //move origin to new point\n        dO+=ds*.7;\n        if(ds < SURFACE_DIST || dO > MAX_DIST){\n            break;\n        }\n    }\n    return dO;\n}\nvec3 GetNormal(vec3 p){\n    //distance to point being analyzed\n    float d = GetDist(p);\n    \n    //distance to another point along the objects surface that is closeby\n    vec2 e = vec2(0.01,0);\n    \n    //slope between the two points\n    //note: swizzel is the .xxy or .yyx etc\n    vec3 n = d - vec3(\n         GetDist(p-e.xyy),\n         GetDist(p-e.yxy),\n         GetDist(p-e.yyx));\n         \n    return normalize(n);\n    \n}\nfloat GetLight(vec3 p){\n    //position of the light source\n    vec3 lightPos = vec3(0,5,6);\n    \n    lightPos.xz *= Rot(sin(iTime));\n    //light vector\n    vec3 l = normalize(lightPos-p+vec3(4,0,0));\n    \n    //normal of object\n    vec3 n = GetNormal(p);\n    \n    // dot product of the light vector and normal of the point\n    // will give us the amount of lighting to apply to the point\n    // dot() evaluates to values between -1 and 1, so we will clamp it\n    float diff = clamp(dot(n, l),0.,1.);\n    \n    // calculate if point should be a shadow:\n    // raymarch from point being calculated towards light source\n    // if hits surface of something else before the light,\n    // then it must be obstructed and thus is a shadow\n    // the slight offset \"p+n*SURFACE_DIST*1.1\" is needed to ensure the\n    // break condistions in the function are not met too early\n    float d = RayMarch(p+n*SURFACE_DIST*1.1,l);\n    if(d < length(lightPos-p)){\n        diff *= 0.1;\n    }\n    return diff;\n}\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    // origin is now (0,0)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 col = vec3(0);\n    \n    //camera\n    //-----------------\n    // ray origin\n    //controls position\n    vec3 ro = vec3(4,3,1);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    //ray dir\n    //controls rotation\n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    //------------------\n    float d = RayMarch(ro,rd);\n    // position of point\n    // start at ray origin\n    // move d units in the ray direction\n    vec3 p = ro + rd *d;\n    \n    \n    \n    //color objects\n    if(d < MAX_DIST){\n        \n        //get normals\n        vec3 n = abs(GetNormal(p));\n        \n        //floor color\n        float plane = p.y;\n        //uv for ground\n        vec2 uv2 = vec2(p.x/10.,p.z/10.)+.5;\n        float gDisp = texture(iChannel1,uv2).r;\n        plane+= gDisp*.5;\n        col = vec3(plane)*vec3(.5);\n        \n        //stone color\n        // cylinder distance\n        float offX = 0.;\n        float offY = 0.;\n        float offZ = 0.;\n\n        float cyld = sdCylinder(p, vec3(0,0,0), vec3(0,2,0), 0.5, offX, offY, offZ);\n\n        vec3 cyld3 = vec3(1)/vec3(cyld)*(sin(iTime)*.2+.2);\n        col = max(col-cyld3, cyld3 * vec3(.1,0,0));\n        // cylinder distance\n        offX = 2.;\n        offY = 0.;\n        offZ = 0.;\n        float cyldL = sdCylinder(p, vec3(0,0,0), vec3(0,2,0), 0.5, offX, offY, offZ);\n        \n        vec3 cyldL3 = vec3(1)/vec3(cyldL)*(cos(iTime)*.2+.2);;\n        col = max(col-cyldL3, cyldL3* vec3(0,0,.1));\n        //get diffuse lighting\n        float diff = GetLight(p);\n       // col *= vec3(diff);\n        \n\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}