{
    "Shader": {
        "info": {
            "date": "1613401923",
            "description": "coded live on twitch\nhttps://www.twitch.tv/antic0re_",
            "flags": 0,
            "hasliked": 0,
            "id": "wtdfDS",
            "likes": 4,
            "name": "15/02/2021 stream",
            "published": 3,
            "tags": [
                "raymarch",
                "glow",
                "live",
                "stream"
            ],
            "usePreview": 0,
            "username": "anticore",
            "viewed": 349
        },
        "renderpass": [
            {
                "code": "\n\nfloat ni(float x) {\n    //return texture(texFFTIntegrated, x).x;\n    return texelFetch( iChannel0, ivec2(x * 512.,0), 0 ).x * 2.;\n}\n\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n  \n    return mat2(c, s, -s, c);\n}\n\nvec3 rep(vec3 p, vec3 c) {\n    return mod(p + .5 * c, c) - .5 * c;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.) - 0.1;\n}\n\nvec3 a = vec3(0);\n\nfloat sdBlock(vec3 p, vec3 pos) {\n     p += pos;\n     //p.xy *= rot(fGlobalTime);\n     //p.xz *= rot(fGlobalTime);\n  \n    return sdBox(p, vec3(.3, .3, .3));\n}\n\nvec2 sdBlocks(vec3 p) {\n    p.yz *= rot(0.6);\n    p.xz *= rot(-.6);\n    vec3 v = round(p);\n    float d = sdBlock(rep(p, vec3(1., 0., 1.)), vec3(0., 2. + sin(v.z * 10. + v.x * 10. + iTime + ni(0.) * 15.) * 0.04, 0.));\n    if (mod(v.x, 3.) == 0. && mod(v.z, 3.) == 0.) { \n      //a = vec3(1); \n      return vec2(d, 1);\n    }\n    else { \n      a = vec3(sin(v.x * 0.5 + v.z * 0.5 + iTime), cos(v.z * 0.8 + v.x * 0.2 + iTime * 0.5), sin(v.x + iTime)); \n      return vec2(d, 0);\n    }\n}\n\nfloat sdSphere(vec3 p, vec3 pos, float r) {\n    return length(p + pos) - r;\n}\n\nvec2 map(vec3 p) {\n    p += vec3(iTime / 2., 0., 0.);\n    //float box = sdBlocks(p);\n    return sdBlocks(p);\n}\n\nvec3 bg(vec2 uv) {\n    return vec3(0.);\n}\n\nvec3 dirlight(vec3 lp, vec3 lc, vec3 p, vec3 n) {\n    vec3 ld = normalize(lp - p);\n    float diff = max(dot(n, ld), 0.01);\n    return diff * lc;\n}\n\nvec3 spec(vec3 lp, vec3 lc, vec3 p, vec3 n) {\n    vec3 ld = normalize(lp - p);\n    vec3 r = reflect(-ld, n);\n    vec3 v = normalize(-p);\n    float speca = max(dot(r, v), 0.);\n    return pow(speca, 10.) * lc;\n}\n\nvec3 light(vec3 lp, vec3 lc, vec3 p, vec3 n) {\n    vec3 d = dirlight(lp, lc, p, n);\n    float kd = 0.5;\n    vec3 s = spec(lp, lc, p, n);\n    float ks = 0.5;\n  \n    return kd * d + ks * s;\n}\n\nvec3 norm(vec3 p) {\n  float E = 0.01;\n  vec2 k = vec2(1, -1);\n  \n  return normalize(\n    k.xyy * map(p + k.xyy * E).x +\n    k.yyx * map(p + k.yyx * E).x +\n    k.yxy * map(p + k.yxy * E).x +\n    k.xxx * map(p + k.xxx * E).x\n  );\n}\n\nvec3 fog(vec3 c, vec3 fc, float d) {\n  float fa = .5 - exp(-d * 0.01);\n  return mix(c, fc, fa);\n}\n\nvec3 blockcolor(vec3 p, vec3 n) {\n  return light(vec3(20,20,20), vec3(1), p, n) * 0.8 + a * 0.2;\n}\n\nvec3 lightblocksub(vec3 p, vec3 n, float d) {\n  return vec3(0,0,1) * 0.01;\n}\n\nvec3 tr(vec3 ro, vec3 rd, vec2 uv) {\n    float td = 1.;\n    vec2 h;\n  \n    vec3 tbc = vec3(0);\n    vec3 tbg = vec3(0);\n  \n    for (int i = 0; i < 200; i++) {\n      h = map(ro + rd * td);\n      \n      if (h.x > 0.001) {\n        td += h.x;\n      } else {\n          td += 0.01;\n      }\n      \n      \n      if (h.y == 1. && h.x < 0.3 && h.x > 0.0) {\n          tbg += vec3(0.3, 0.1, 0.3) *  0.1;\n      }\n      \n      if (h.x < 0.01) {\n          vec3 ip = ro + rd * td;\n          vec3 inorm = norm(ip);\n        \n          if (h.y == 0.) {\n              //return fog(light(vec3(20,20,20), vec3(1), ip, inorm) * 0.8 + a * 0.2, bg(uv), length(ip)); \n              return (blockcolor(ip, inorm)) + tbc + tbg;\n              //return inorm;\n          } else \n          \n          if (h.y == 1. && h.x < 0.001) {\n              tbc += lightblocksub(ip, inorm, h.x);\n          } else {\n              tbc += 0.05 * inorm + spec(vec3(20,20,20), vec3(1), ip, inorm) * 0.5;\n          } \n      }\n    }\n    \n    return bg(uv) + tbc + tbg;\n}\n\n//void main(void)\n//{\n//  vec2 uv = vec2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y);\n//  uv -= 0.5;\n//  uv /= vec2(v2Resolution.y / v2Resolution.x, 1);\n  \n//  vec3 ro = vec3(0,0,2);\n//  vec3 rd = normalize(vec3(uv, 0) - ro);\n  \n//  out_color = vec4(tr(ro, rd, uv), 1);\n//}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 ro = vec3(0,0,2);\n  vec3 rd = normalize(vec3(uv, 0) - ro);\n\n    // Output to screen\n    fragColor =  vec4(tr(ro, rd, uv), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}