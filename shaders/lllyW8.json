{
    "Shader": {
        "info": {
            "date": "1504653915",
            "description": "Based on Fluid Dynamics - Candle. Don't leave your candles unattended. Use left mouse to place walls, left mouse + space to remove walls and left mouse + A to add more fire.",
            "flags": 48,
            "hasliked": 0,
            "id": "lllyW8",
            "likes": 31,
            "name": "Fluid Dynamics - Housefire",
            "published": 3,
            "tags": [
                "fire",
                "fluid",
                "dynamics",
                "heat",
                "liquid",
                "house",
                "gas"
            ],
            "usePreview": 0,
            "username": "TimoKinnunen",
            "viewed": 1541
        },
        "renderpass": [
            {
                "code": "/////////////////////\n//\n// Fluid Dynamics - Housefire\n// by Timo Kinnunen 2017\n//\n// Based on Fluid Dynamics - Candle by pixartist\n// @ https://www.shadertoy.com/view/4sSBRw\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n///////////////////////\n\nvec2 fc;\nvec2 rres;\nvec2 uv;\n\nfloat noise(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898, 78.233)))* 43758.5453)* 2.0- 1.0;\n}\nfloat simplex(vec2 p) {\n\tfloat f2 = 1.0/ 2.0;\n\tfloat s = (p.x+ p.y)* f2;\n\tint i = int(floor(p.x+ s));\n\tint j = int(floor(p.y+ s));\n\n\tfloat g2 = 1.0/ 4.0;\n\tfloat t = float((i+ j))* g2;\n\tfloat x0 = float(i)- t;\n\tfloat y0 = float(j)- t;\n\tx0 = p.x- x0;\n\ty0 = p.y- y0;\n\tint i1,j1,k1;\n\tint i2,j2,k2;\n\tif(x0>= y0) {\n\t\ti1 = 1;\n\t\tj1 = 0;\n\t\tk1 = 0;\n\t\ti2 = 1;\n\t\tj2 = 1;\n\t\tk2 = 0;\n\t} else {\n\t\ti1 = 0;\n\t\tj1 = 1;\n\t\tk1 = 0;\n\t\ti2 = 1;\n\t\tj2 = 1;\n\t\tk2 = 0;\n\t}\n\tfloat x1 = x0- float(i1)+ g2;\n\tfloat y1 = y0- float(j1)+ g2;\n\tfloat x2 = x0- float(i2)+ 2.0* g2;\n\tfloat y2 = y0- float(j2)+ 2.0* g2;\n\tfloat x3 = x0- 1.0+ 3.0* g2;\n\tfloat y3 = y0- 1.0+ 3.0* g2;\n\tvec2 ijk0 = vec2(i,j);\n\tvec2 ijk1 = vec2(i+ i1,j+ j1);\n\tvec2 ijk2 = vec2(i+ i2,j+ j2);\n\tvec2 ijk3 = vec2(i+ 1,j+ 1);\n\tvec2 gr0 = normalize(vec2(noise(ijk0),noise(ijk0* 2.01)));\n\tvec2 gr1 = normalize(vec2(noise(ijk1),noise(ijk1* 2.01)));\n\tvec2 gr2 = normalize(vec2(noise(ijk2),noise(ijk2* 2.01)));\n\tvec2 gr3 = normalize(vec2(noise(ijk3),noise(ijk3* 2.01)));\n\tfloat n0 = 0.0;\n\tfloat n1 = 0.0;\n\tfloat n2 = 0.0;\n\tfloat n3 = 0.0;\n\tfloat t0 = 0.5- x0* x0- y0* y0;\n\tif(t0>= 0.0) {\n\t\tt0 *= t0;\n\t\tn0 = t0* t0* dot(gr0,vec2(x0,y0));\n\t}\n\tfloat t1 = 0.5- x1* x1- y1* y1;\n\tif(t1>= 0.0) {\n\t\tt1 *= t1;\n\t\tn1 = t1* t1* dot(gr1,vec2(x1,y1));\n\t}\n\tfloat t2 = 0.5- x2* x2- y2* y2;\n\tif(t2>= 0.0) {\n\t\tt2 *= t2;\n\t\tn2 = t2* t2* dot(gr2,vec2(x2,y2));\n\t}\n\tfloat t3 = 0.5- x3* x3- y3* y3;\n\tif(t3>= 0.0) {\n\t\tt3 *= t3;\n\t\tn3 = t3* t3* dot(gr3,vec2(x3,y3));\n\t}\n\treturn 96.0* (n0+ n1+ n2+ n3);\n}\n\nfloat fbm(vec2 p) {\n\tfloat f;\n\tf =  0.50000* simplex(p);p = p* 2.01;\n\tf += 0.25000* simplex(p);p = p* 2.02;\n\tf += 0.12500* simplex(p);p = p* 2.03;\n\tf += 0.06250* simplex(p);p = p* 2.04;\n\tf += 0.03125* simplex(p);p = p* 2.05;\n\tf += 0.015625* simplex(p);\n\treturn f;\n}\nfloat Tonemap_Lottes(float x) {\n    // Lottes 2016, \"Advanced Techniques and Optimization of HDR Color Pipelines\"\n    const float a = 1.6;\n    const float d = 0.977;\n    const float hdrMax = 8.0;\n    const float midIn = 0.18;\n    const float midOut = 0.267;\n\n    // Can be precomputed\n    float b =\n        (-pow(midIn, a) + pow(hdrMax, a) * midOut) /\n        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);\n    float c =\n        (pow(hdrMax, a * d) * pow(midIn, a) - pow(hdrMax, a) * pow(midIn, a * d) * midOut) /\n        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);\n\n    return pow(x, a) / (pow(x, a * d) * b + c);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fc = floor(fragCoord)+ 0.5;\n    rres = 1.0/ floor(iResolution.xy);\n    uv = fc* rres;\n    vec4 src = texture(iChannel0, uv);\n    vec4 prs = texture(iChannel1, uv);\n    float ob = prs.r;\n\tvec4 c = texture(iChannel2, uv);\n    \n\n    vec2 vel = src.xy;\n    float temp = src.b;\n    float amount = clamp(0.5+abs(vel.x)+abs(vel.y)+abs(prs.y),0.0,1.0);\n    float detail = clamp(2.*abs(vel.y)+2048.*abs(prs.y),0.0,1.0);\n    float noise = clamp(2.5*fbm((uv+vel-0.5)*-2.+uv*vec2(850,400)*0.0625-vec2(0,4.0*prs.y+2.0*iDate.w)),-3.5,3.5);\n    float heat = temp* 3.5+ temp* noise* detail* amount;\n\n    fragColor = vec4(heat* 1.823, heat* 0.54, heat* 0.12, 1);\n    fragColor.rgb += vec3(.05,.1,.01+.29*uv.y);\n    fragColor.gb += length(vel) * max(0.0, (1.0 - 0.125*length(fragColor.rgb)));\n\n    float pattern = .625+ .375* fract(floor(fc.x* .5* fc.y* .5)* .5);\n    vec3 obstacleColor = mix(vec3(.1,.09,.04),vec3(.5,.6,.7)*pattern,clamp(4.* ob- 3.,0.,1.));\n    fragColor.rgb = mix(fragColor.rgb,obstacleColor,clamp(ob,0.,1.));\n\n    fragColor.r = Tonemap_Lottes(fragColor.r);\n    fragColor.g = Tonemap_Lottes(fragColor.g);\n    fragColor.b = Tonemap_Lottes(fragColor.b);\n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//ADVECT\n\n// advect func taken from\n// Created by Robert Schuetze - trirop/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define REFLECT_VELOCITY\n\n// Runge-Kutta 4 backward advection\n\n#define h 2.0\nvec2 fc;\nvec2 rres;\nvec2 uv;\n\nvec2 RK4(vec2 p){\n    vec2 r = iResolution.xy;\n    vec2 k1 = texture(iChannel3,p*rres).xy;\n    vec2 k2 = texture(iChannel3,(p-0.5*h*k1)*rres).xy;\n    vec2 k3 = texture(iChannel3,(p-0.5*h*k2)*rres).xy;\n    vec2 k4 = texture(iChannel3,(p-h*k3)*rres).xy;\n    return h/3.*(0.5*k1+k2+k3+0.5*k4);\n   // return texture(iChannel3,p/iResolution.xy).xy * h;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    fc = floor(fragCoord)+ 0.5;\n    rres = 1.0/ floor(iResolution.xy);\n    uv = fc* rres;\n    vec4 src = texture(iChannel3, uv- RK4(fc)* rres);\n    vec2 velocity = src.xy;\n    float temp = src.z;\n    if(distance(uv, vec2(0.5, 0.1)) < 0.02)\n    {\n        temp += 0.08;\n    }\n    vec2 uvn = abs(uv - vec2(0.5)) * 2.0;\n    //damping at screen borders\n  \tfloat isBorder = max(uvn.x, uvn.y);\n    isBorder = smoothstep(0.95, 1.0, isBorder);\n\tfloat dtb = sqrt(1.0 - isBorder);\n    dtb = 0.99 + 0.01 * dtb;\n    //dtb *= float(all(greaterThan(vec3(fragCoord,iResolution.x),vec3(1,1,fragCoord.x+1.0))));\n    velocity *= dtb;\n    temp *= dtb;\n    //obstacles\n    vec4 cb = texture(iChannel1, uv);\n    if(cb.r > 0.0 )\n    {\n        float scale = step(iResolution.x,600.0)+1.0;\n        #ifdef REFLECT_VELOCITY\n        float left   = texture(iChannel1, uv-vec2(-1, 0)*rres).r;\n        float right  = texture(iChannel1, uv-vec2( 1, 0)*rres).r;\n        float top    = texture(iChannel1, uv-vec2(0,  1)*rres).r;\n        float bottom = texture(iChannel1, uv-vec2(0, -1)*rres).r;\n\n        vec3 obstacleNormal = vec3(left - right,bottom - top,0.0625);\n        if(obstacleNormal != vec3(0)) {\n            float mixAmount = clamp(floor((iResolution.x-300.0)/1600.0),0.0,1.0);\n            velocity = mix(velocity, reflect(vec3(-velocity,0), normalize(obstacleNormal)).xy, mixAmount);\n        }\n        #endif\n        velocity *= clamp(1.0+ 0.0625* scale* scale- cb.r,0.0,1.0);\n        temp -= max(-0.5,min(cb.r*cb.r*cb.r*1.5*scale-.75*scale,min(temp*0.125,cb.r*cb.r*0.125)));\n    }\n\t//mouse handling\n\n    if(iMouse.z > 0.0 && distance(iMouse.xy, fragCoord) < 5.0)\n    {\n      // temp += 2.3;\n    }\n   \n    fragColor = vec4(velocity, temp, 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//DIVERGENCE\nint kA=65,kB=66,kC=67,kD=68,kE=69,kF=70,kG=71,kH=72,kI=73,kJ=74,kK=75,kL=76,kM=77,kN=78,kO=79,kP=80,kQ=81,kR=82,kS=83,kT=84,kU=85,kV=86,kW=87,kX=88,kY=89,kZ=90;\nint k0=48,k1=49,k2=50,k3=51,k4=52,k5=53,k6=54,k7=55,k8=56,k9=57;\nint kSpace=32,kLeft=37,kUp=38,kRight=39,kDown=40,kCtrl=17;\nbool ReadKey(int key)\n{\n\tfloat keyVal = texture( iChannel2, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn keyVal > 0.0;\n}\nvec2 fc;\nvec2 rres;\nvec2 uv;\n\nvec4 rd(int x,int y)\n{\n    return texture(iChannel0, uv+ vec2(x,y)* rres);\n}\nfloat fLine(vec2 p, vec2 a, vec2 b) {\n\tvec2 ab = b - a;\n\tfloat t = clamp(dot(p - a, ab) / dot(ab, ab),0.0,1.0);\n\treturn length((ab*t + a) - p);\n}\nfloat fCapsule(vec2 p, vec2 a, vec2 b, float r) {\n\treturn fLine(p, a, b) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fc = floor(fragCoord)+ 0.5;\n    rres = 1.0/ floor(iResolution.xy);\n    uv = fc* rres;\n    vec4 self = texture(iChannel1, uv);\n    if(iTime<2.0||iFrame<2*60||self.w!=1.0){\n        const float s = 0.015;\n        float obstacle = fCapsule(uv, vec2(.10,.03),vec2(.90,.03),s);\n        obstacle = min(obstacle,fCapsule(uv, vec2(.16,.45),vec2(.70,.40),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.70,.09),vec2(.70,.40),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.10,.03),vec2(.10,.42),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.90,.03),vec2(.90,.42),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.16,.09),vec2(.16,.52),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.84,.09),vec2(.84,.52),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.04,.55),vec2(.40,.90),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.96,.58),vec2(.40,.90),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.04,.50),vec2(.40,.80),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.96,.53),vec2(.40,.80),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.04,.45),vec2(.40,.70),s));\n        obstacle = min(obstacle,fCapsule(uv, vec2(.96,.48),vec2(.40,.70),s));\n        fragColor = vec4(float(obstacle < .0)*.96875-.03125*obstacle,0,0,1);\n        return;\n    }\n\n     //DIVERGENCE\n    vec4 left = rd(-1, 0);\n    vec4 right = rd(1, 0);\n    vec4 top = rd(0, 1);\n    vec4 bottom = rd(0, -1);\n        \n    float pressure = (left.x - right.x) + (bottom.y - top.y);\n    float obstacle = self.x;\n    float mouseDist = distance(iMouse.xy* rres, uv);\n\n    if(!ReadKey(kA) && iMouse.z > 0.0 && mouseDist < 0.015)\n    {\n        if(ReadKey(kSpace)) {\n            obstacle *= float(mouseDist >= 0.015);\n        } else {\n            float added = float(mouseDist < 0.015);\n        \tobstacle = max(obstacle, added);\n            pressure *= 1.0 - added;\n        }\n    }\n    if(obstacle > 0.0) {\n        obstacle -= max(0.0,min(rd(0, 0).y*0.125,obstacle*0.125+0.0625));\n    } else {\n        obstacle = 0.0;\n    }\n    \n    \n    fragColor = vec4(obstacle, pressure, 0.0, 1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//PRESSURE\n\n#define SEPARABLY\n\nvec2 fc;\nvec2 rres;\nvec2 uv;\nvec4 result;\n\nvoid rd(int _x, int _y, float _f) {\n    result.z += _f * (texture(iChannel1, uv + vec2(_x,_y)*rres).y + texture(iChannel2, uv + vec2(_x,_y)*rres).z);\n}\nvoid rdv(float _y, float _f) {\n    result.z += _f * texture(iChannel2, uv + vec2(0,_y*rres.y)).y;\n}\nvoid rdh(float _x, float _f) {\n    result.y += _f * (texture(iChannel1, uv + vec2(_x*rres.x,0)).y + texture(iChannel2, uv + vec2(_x*rres.x,0)).z);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fc = floor(fragCoord)+ 0.5;\n    rres = 1.0/ floor(iResolution.xy);\n    uv = fc* rres;\n    result = vec4(0);\n    vec2 c;\n    #ifdef SEPARABLY\nrdv(-5.,0.0095621208074020240530455083671768079511821269989013671875);\nrdv(-4.,0.0284470345375627646500316103583827498368918895721435546875);\nrdv(-3.,0.066420379475014945658273290973738767206668853759765625);\nrdv(-2.,0.12171591812776240415505668579498887993395328521728515625);\nrdv(-1.,0.17505518150597210169649997624219395220279693603515625);\nrdv( 0.,0.19759873109257153345197366434149444103240966796875);\nrdv( 1.,0.17505518150597210169649997624219395220279693603515625);\nrdv( 2.,0.12171591812776240415505668579498887993395328521728515625);\nrdv( 3.,0.066420379475014945658273290973738767206668853759765625);\nrdv( 4.,0.0284470345375627646500316103583827498368918895721435546875);\nrdv( 5.,0.0095621208074020240530455083671768079511821269989013671875);\nrdh(-5.,0.0095621208074020240530455083671768079511821269989013671875);\nrdh(-4.,0.0284470345375627646500316103583827498368918895721435546875);\nrdh(-3.,0.066420379475014945658273290973738767206668853759765625);\nrdh(-2.,0.12171591812776240415505668579498887993395328521728515625);\nrdh(-1.,0.17505518150597210169649997624219395220279693603515625);\nrdh( 0.,0.19759873109257153345197366434149444103240966796875);\nrdh( 1.,0.17505518150597210169649997624219395220279693603515625);\nrdh( 2.,0.12171591812776240415505668579498887993395328521728515625);\nrdh( 3.,0.066420379475014945658273290973738767206668853759765625);\nrdh( 4.,0.0284470345375627646500316103583827498368918895721435546875);\nrdh( 5.,0.0095621208074020240530455083671768079511821269989013671875);\n    #else\n\t\trd(-20, 0, 0.00000000000001048576);\n\t\trd(-19, -1, 0.00000000000020971520);\n\t\trd(-19, 0, 0.00000000000020971520);\n\t\trd(-19, 1, 0.00000000000020971520);\n\t\trd(-18, -2, 0.00000000000199229440);\n\t\trd(-18, -1, 0.00000000000398458880);\n\t\trd(-18, 0, 0.00000000000618659840);\n\t\trd(-18, 1, 0.00000000000398458880);\n\t\trd(-18, 2, 0.00000000000199229440);\n\t\trd(-17, -3, 0.00000000001195376640);\n\t\trd(-17, -2, 0.00000000003586129920);\n\t\trd(-17, -1, 0.00000000007570718720);\n\t\trd(-17, 0, 0.00000000008766095360);\n\t\trd(-17, 1, 0.00000000007570718720);\n\t\trd(-17, 2, 0.00000000003586129920);\n\t\trd(-17, 3, 0.00000000001195376640);\n\t\trd(-16, -4, 0.00000000005080350720);\n\t\trd(-16, -3, 0.00000000020321402880);\n\t\trd(-16, -2, 0.00000000054389637120);\n\t\trd(-16, -1, 0.00000000088457871360);\n\t\trd(-16, 0, 0.00000000107484282880);\n\t\trd(-16, 1, 0.00000000088457871360);\n\t\trd(-16, 2, 0.00000000054389637120);\n\t\trd(-16, 3, 0.00000000020321402880);\n\t\trd(-16, 4, 0.00000000005080350720);\n\t\trd(-15, -5, 0.00000000016257122304);\n\t\trd(-15, -4, 0.00000000081285611520);\n\t\trd(-15, -3, 0.00000000264178237440);\n\t\trd(-15, -2, 0.00000000548677877760);\n\t\trd(-15, -1, 0.00000000857085050880);\n\t\trd(-15, 0, 0.00000000974949187584);\n\t\trd(-15, 1, 0.00000000857085050880);\n\t\trd(-15, 2, 0.00000000548677877760);\n\t\trd(-15, 3, 0.00000000264178237440);\n\t\trd(-15, 4, 0.00000000081285611520);\n\t\trd(-15, 5, 0.00000000016257122304);\n\t\trd(-14, -6, 0.00000000040642805760);\n\t\trd(-14, -5, 0.00000000243856834560);\n\t\trd(-14, -4, 0.00000000934784532480);\n\t\trd(-14, -3, 0.00000002357282734080);\n\t\trd(-14, -2, 0.00000004501190737920);\n\t\trd(-14, -1, 0.00000006482527518720);\n\t\trd(-14, 0, 0.00000007367703920640);\n\t\trd(-14, 1, 0.00000006482527518720);\n\t\trd(-14, 2, 0.00000004501190737920);\n\t\trd(-14, 3, 0.00000002357282734080);\n\t\trd(-14, 4, 0.00000000934784532480);\n\t\trd(-14, 5, 0.00000000243856834560);\n\t\trd(-14, 6, 0.00000000040642805760);\n\t\trd(-13, -7, 0.00000000081285611520);\n\t\trd(-13, -6, 0.00000000568999280640);\n\t\trd(-13, -5, 0.00000002519853957120);\n\t\trd(-13, -4, 0.00000007478276259840);\n\t\trd(-13, -3, 0.00000016907407196160);\n\t\trd(-13, -2, 0.00000029425391370240);\n\t\trd(-13, -1, 0.00000040988269608960);\n\t\trd(-13, 0, 0.00000045540263854080);\n\t\trd(-13, 1, 0.00000040988269608960);\n\t\trd(-13, 2, 0.00000029425391370240);\n\t\trd(-13, 3, 0.00000016907407196160);\n\t\trd(-13, 4, 0.00000007478276259840);\n\t\trd(-13, 5, 0.00000002519853957120);\n\t\trd(-13, 6, 0.00000000568999280640);\n\t\trd(-13, 7, 0.00000000081285611520);\n\t\trd(-12, -8, 0.00000000132089118720);\n\t\trd(-12, -7, 0.00000001056712949760);\n\t\trd(-12, -6, 0.00000005324207554560);\n\t\trd(-12, -5, 0.00000018207976980480);\n\t\trd(-12, -4, 0.00000047694332559360);\n\t\trd(-12, -3, 0.00000097461448212480);\n\t\trd(-12, -2, 0.00000161026796421120);\n\t\trd(-12, -1, 0.00000215975869808640);\n\t\trd(-12, 0, 0.00000238527546654720);\n\t\trd(-12, 1, 0.00000215975869808640);\n\t\trd(-12, 2, 0.00000161026796421120);\n\t\trd(-12, 3, 0.00000097461448212480);\n\t\trd(-12, 4, 0.00000047694332559360);\n\t\trd(-12, 5, 0.00000018207976980480);\n\t\trd(-12, 6, 0.00000005324207554560);\n\t\trd(-12, 7, 0.00000001056712949760);\n\t\trd(-12, 8, 0.00000000132089118720);\n\t\trd(-11, -9, 0.00000000176118824960);\n\t\trd(-11, -8, 0.00000001585069424640);\n\t\trd(-11, -7, 0.00000008982060072960);\n\t\trd(-11, -6, 0.00000034871527342080);\n\t\trd(-11, -5, 0.00000104208153968640);\n\t\trd(-11, -4, 0.00000245238689955840);\n\t\trd(-11, -3, 0.00000470237262643201);\n\t\trd(-11, -2, 0.00000740511920947201);\n\t\trd(-11, -1, 0.00000970997272412161);\n\t\trd(-11, 0, 0.00001060953349160961);\n\t\trd(-11, 1, 0.00000970997272412161);\n\t\trd(-11, 2, 0.00000740511920947201);\n\t\trd(-11, 3, 0.00000470237262643201);\n\t\trd(-11, 4, 0.00000245238689955840);\n\t\trd(-11, 5, 0.00000104208153968640);\n\t\trd(-11, 6, 0.00000034871527342080);\n\t\trd(-11, 7, 0.00000008982060072960);\n\t\trd(-11, 8, 0.00000001585069424640);\n\t\trd(-11, 9, 0.00000000176118824960);\n\t\trd(-10, -10, 0.00000000193730707456);\n\t\trd(-10, -9, 0.00000001937307074560);\n\t\trd(-10, -8, 0.00000012240258334720);\n\t\trd(-10, -7, 0.00000053364003962880);\n\t\trd(-10, -6, 0.00000179905379696640);\n\t\trd(-10, -5, 0.00000481015734730753);\n\t\trd(-10, -4, 0.00001054274381414401);\n\t\trd(-10, -3, 0.00001913463295180802);\n\t\trd(-10, -2, 0.00002915206850150404);\n\t\trd(-10, -1, 0.00003740831580160005);\n\t\trd(-10, 0, 0.00004066530832678917);\n\t\trd(-10, 1, 0.00003740831580160005);\n\t\trd(-10, 2, 0.00002915206850150404);\n\t\trd(-10, 3, 0.00001913463295180802);\n\t\trd(-10, 4, 0.00001054274381414401);\n\t\trd(-10, 5, 0.00000481015734730753);\n\t\trd(-10, 6, 0.00000179905379696640);\n\t\trd(-10, 7, 0.00000053364003962880);\n\t\trd(-10, 8, 0.00000012240258334720);\n\t\trd(-10, 9, 0.00000001937307074560);\n\t\trd(-10, 10, 0.00000000193730707456);\n\t\trd(-9, -11, 0.00000000176118824960);\n\t\trd(-9, -10, 0.00000001937307074560);\n\t\trd(-9, -9, 0.00000013561149521920);\n\t\trd(-9, -8, 0.00000065868440535040);\n\t\trd(-9, -7, 0.00000248503662018560);\n\t\trd(-9, -6, 0.00000747624411955201);\n\t\trd(-9, -5, 0.00001852946157404162);\n\t\trd(-9, -4, 0.00003826357591080965);\n\t\trd(-9, -3, 0.00006673345491763209);\n\t\trd(-9, -2, 0.00009877353345843213);\n\t\trd(-9, -1, 0.00012484237097697295);\n\t\trd(-9, 0, 0.00013488317613998099);\n\t\trd(-9, 1, 0.00012484237097697295);\n\t\trd(-9, 2, 0.00009877353345843213);\n\t\trd(-9, 3, 0.00006673345491763209);\n\t\trd(-9, 4, 0.00003826357591080965);\n\t\trd(-9, 5, 0.00001852946157404162);\n\t\trd(-9, 6, 0.00000747624411955201);\n\t\trd(-9, 7, 0.00000248503662018560);\n\t\trd(-9, 8, 0.00000065868440535040);\n\t\trd(-9, 9, 0.00000013561149521920);\n\t\trd(-9, 10, 0.00000001937307074560);\n\t\trd(-9, 11, 0.00000000176118824960);\n\t\trd(-8, -12, 0.00000000132089118720);\n\t\trd(-8, -11, 0.00000001585069424640);\n\t\trd(-8, -10, 0.00000012240258334720);\n\t\trd(-8, -9, 0.00000065868440535040);\n\t\trd(-8, -8, 0.00000276550584893440);\n\t\trd(-8, -7, 0.00000929907395788801);\n\t\trd(-8, -6, 0.00002586569122775043);\n\t\trd(-8, -5, 0.00006022735457157127);\n\t\trd(-8, -4, 0.00011900172883722254);\n\t\trd(-8, -3, 0.00020066450559467548);\n\t\trd(-8, -2, 0.00029064219076853793);\n\t\trd(-8, -1, 0.00036239509993553966);\n\t\trd(-8, 0, 0.00039008920938741809);\n\t\trd(-8, 1, 0.00036239509993553966);\n\t\trd(-8, 2, 0.00029064219076853793);\n\t\trd(-8, 3, 0.00020066450559467548);\n\t\trd(-8, 4, 0.00011900172883722254);\n\t\trd(-8, 5, 0.00006022735457157127);\n\t\trd(-8, 6, 0.00002586569122775043);\n\t\trd(-8, 7, 0.00000929907395788801);\n\t\trd(-8, 8, 0.00000276550584893440);\n\t\trd(-8, 9, 0.00000065868440535040);\n\t\trd(-8, 10, 0.00000012240258334720);\n\t\trd(-8, 11, 0.00000001585069424640);\n\t\trd(-8, 12, 0.00000000132089118720);\n\t\trd(-7, -13, 0.00000000081285611520);\n\t\trd(-7, -12, 0.00000001056712949760);\n\t\trd(-7, -11, 0.00000008982060072960);\n\t\trd(-7, -10, 0.00000053364003962880);\n\t\trd(-7, -9, 0.00000248503662018560);\n\t\trd(-7, -8, 0.00000929907395788801);\n\t\trd(-7, -7, 0.00002888524848168964);\n\t\trd(-7, -6, 0.00007538061827112969);\n\t\trd(-7, -5, 0.00016754712174919700);\n\t\trd(-7, -4, 0.00031913787795701800);\n\t\trd(-7, -3, 0.00052444135340113979);\n\t\trd(-7, -2, 0.00074569591082188904);\n\t\trd(-7, -1, 0.00092041851992801394);\n\t\trd(-7, 0, 0.00098697287554826369);\n\t\trd(-7, 1, 0.00092041851992801394);\n\t\trd(-7, 2, 0.00074569591082188904);\n\t\trd(-7, 3, 0.00052444135340113979);\n\t\trd(-7, 4, 0.00031913787795701800);\n\t\trd(-7, 5, 0.00016754712174919700);\n\t\trd(-7, 6, 0.00007538061827112969);\n\t\trd(-7, 7, 0.00002888524848168964);\n\t\trd(-7, 8, 0.00000929907395788801);\n\t\trd(-7, 9, 0.00000248503662018560);\n\t\trd(-7, 10, 0.00000053364003962880);\n\t\trd(-7, 11, 0.00000008982060072960);\n\t\trd(-7, 12, 0.00000001056712949760);\n\t\trd(-7, 13, 0.00000000081285611520);\n\t\trd(-6, -14, 0.00000000040642805760);\n\t\trd(-6, -13, 0.00000000568999280640);\n\t\trd(-6, -12, 0.00000005324207554560);\n\t\trd(-6, -11, 0.00000034871527342080);\n\t\trd(-6, -10, 0.00000179905379696640);\n\t\trd(-6, -9, 0.00000747624411955201);\n\t\trd(-6, -8, 0.00002586569122775043);\n\t\trd(-6, -7, 0.00007538061827112969);\n\t\trd(-6, -6, 0.00018763787670650903);\n\t\trd(-6, -5, 0.00040148751813181486);\n\t\trd(-6, -4, 0.00074356663422812247);\n\t\trd(-6, -3, 0.00119596658227937415);\n\t\trd(-6, -2, 0.00167656227361259735);\n\t\trd(-6, -1, 0.00205133385302016255);\n\t\trd(-6, 0, 0.00219408337647698185);\n\t\trd(-6, 1, 0.00205133385302016255);\n\t\trd(-6, 2, 0.00167656227361259735);\n\t\trd(-6, 3, 0.00119596658227937415);\n\t\trd(-6, 4, 0.00074356663422812247);\n\t\trd(-6, 5, 0.00040148751813181486);\n\t\trd(-6, 6, 0.00018763787670650903);\n\t\trd(-6, 7, 0.00007538061827112969);\n\t\trd(-6, 8, 0.00002586569122775043);\n\t\trd(-6, 9, 0.00000747624411955201);\n\t\trd(-6, 10, 0.00000179905379696640);\n\t\trd(-6, 11, 0.00000034871527342080);\n\t\trd(-6, 12, 0.00000005324207554560);\n\t\trd(-6, 13, 0.00000000568999280640);\n\t\trd(-6, 14, 0.00000000040642805760);\n\t\trd(-5, -15, 0.00000000016257122304);\n\t\trd(-5, -14, 0.00000000243856834560);\n\t\trd(-5, -13, 0.00000002519853957120);\n\t\trd(-5, -12, 0.00000018207976980480);\n\t\trd(-5, -11, 0.00000104208153968640);\n\t\trd(-5, -10, 0.00000481015734730753);\n\t\trd(-5, -9, 0.00001852946157404162);\n\t\trd(-5, -8, 0.00006022735457157127);\n\t\trd(-5, -7, 0.00016754712174919700);\n\t\trd(-5, -6, 0.00040148751813181486);\n\t\trd(-5, -5, 0.00083466163077513319);\n\t\trd(-5, -4, 0.00151085647417835683);\n\t\trd(-5, -3, 0.00239043263217008934);\n\t\trd(-5, -2, 0.00331179772304425381);\n\t\trd(-5, -1, 0.00402554513711432180);\n\t\trd(-5, 0, 0.00429525160899379803);\n\t\trd(-5, 1, 0.00402554513711432180);\n\t\trd(-5, 2, 0.00331179772304425381);\n\t\trd(-5, 3, 0.00239043263217008934);\n\t\trd(-5, 4, 0.00151085647417835683);\n\t\trd(-5, 5, 0.00083466163077513319);\n\t\trd(-5, 6, 0.00040148751813181486);\n\t\trd(-5, 7, 0.00016754712174919700);\n\t\trd(-5, 8, 0.00006022735457157127);\n\t\trd(-5, 9, 0.00001852946157404162);\n\t\trd(-5, 10, 0.00000481015734730753);\n\t\trd(-5, 11, 0.00000104208153968640);\n\t\trd(-5, 12, 0.00000018207976980480);\n\t\trd(-5, 13, 0.00000002519853957120);\n\t\trd(-5, 14, 0.00000000243856834560);\n\t\trd(-5, 15, 0.00000000016257122304);\n\t\trd(-4, -16, 0.00000000005080350720);\n\t\trd(-4, -15, 0.00000000081285611520);\n\t\trd(-4, -14, 0.00000000934784532480);\n\t\trd(-4, -13, 0.00000007478276259840);\n\t\trd(-4, -12, 0.00000047694332559360);\n\t\trd(-4, -11, 0.00000245238689955840);\n\t\trd(-4, -10, 0.00001054274381414401);\n\t\trd(-4, -9, 0.00003826357591080965);\n\t\trd(-4, -8, 0.00011900172883722254);\n\t\trd(-4, -7, 0.00031913787795701800);\n\t\trd(-4, -6, 0.00074356663422812247);\n\t\trd(-4, -5, 0.00151085647417835683);\n\t\trd(-4, -4, 0.00268828038597181736);\n\t\trd(-4, -3, 0.00419753533038920174);\n\t\trd(-4, -2, 0.00576434353597317893);\n\t\trd(-4, -1, 0.00696860328276788059);\n\t\trd(-4, 0, 0.00742361732528210895);\n\t\trd(-4, 1, 0.00696860328276788059);\n\t\trd(-4, 2, 0.00576434353597317893);\n\t\trd(-4, 3, 0.00419753533038920174);\n\t\trd(-4, 4, 0.00268828038597181736);\n\t\trd(-4, 5, 0.00151085647417835683);\n\t\trd(-4, 6, 0.00074356663422812247);\n\t\trd(-4, 7, 0.00031913787795701800);\n\t\trd(-4, 8, 0.00011900172883722254);\n\t\trd(-4, 9, 0.00003826357591080965);\n\t\trd(-4, 10, 0.00001054274381414401);\n\t\trd(-4, 11, 0.00000245238689955840);\n\t\trd(-4, 12, 0.00000047694332559360);\n\t\trd(-4, 13, 0.00000007478276259840);\n\t\trd(-4, 14, 0.00000000934784532480);\n\t\trd(-4, 15, 0.00000000081285611520);\n\t\trd(-4, 16, 0.00000000005080350720);\n\t\trd(-3, -17, 0.00000000001195376640);\n\t\trd(-3, -16, 0.00000000020321402880);\n\t\trd(-3, -15, 0.00000000264178237440);\n\t\trd(-3, -14, 0.00000002357282734080);\n\t\trd(-3, -13, 0.00000016907407196160);\n\t\trd(-3, -12, 0.00000097461448212480);\n\t\trd(-3, -11, 0.00000470237262643201);\n\t\trd(-3, -10, 0.00001913463295180802);\n\t\trd(-3, -9, 0.00006673345491763209);\n\t\trd(-3, -8, 0.00020066450559467548);\n\t\trd(-3, -7, 0.00052444135340113979);\n\t\trd(-3, -6, 0.00119596658227937415);\n\t\trd(-3, -5, 0.00239043263217008934);\n\t\trd(-3, -4, 0.00419753533038920174);\n\t\trd(-3, -3, 0.00649185016550523752);\n\t\trd(-3, -2, 0.00885393362780161237);\n\t\trd(-3, -1, 0.01066264029435004188);\n\t\trd(-3, 0, 0.01134262269341861258);\n\t\trd(-3, 1, 0.01066264029435004188);\n\t\trd(-3, 2, 0.00885393362780161237);\n\t\trd(-3, 3, 0.00649185016550523752);\n\t\trd(-3, 4, 0.00419753533038920174);\n\t\trd(-3, 5, 0.00239043263217008934);\n\t\trd(-3, 6, 0.00119596658227937415);\n\t\trd(-3, 7, 0.00052444135340113979);\n\t\trd(-3, 8, 0.00020066450559467548);\n\t\trd(-3, 9, 0.00006673345491763209);\n\t\trd(-3, 10, 0.00001913463295180802);\n\t\trd(-3, 11, 0.00000470237262643201);\n\t\trd(-3, 12, 0.00000097461448212480);\n\t\trd(-3, 13, 0.00000016907407196160);\n\t\trd(-3, 14, 0.00000002357282734080);\n\t\trd(-3, 15, 0.00000000264178237440);\n\t\trd(-3, 16, 0.00000000020321402880);\n\t\trd(-3, 17, 0.00000000001195376640);\n\t\trd(-2, -18, 0.00000000000199229440);\n\t\trd(-2, -17, 0.00000000003586129920);\n\t\trd(-2, -16, 0.00000000054389637120);\n\t\trd(-2, -15, 0.00000000548677877760);\n\t\trd(-2, -14, 0.00000004501190737920);\n\t\trd(-2, -13, 0.00000029425391370240);\n\t\trd(-2, -12, 0.00000161026796421120);\n\t\trd(-2, -11, 0.00000740511920947201);\n\t\trd(-2, -10, 0.00002915206850150404);\n\t\trd(-2, -9, 0.00009877353345843213);\n\t\trd(-2, -8, 0.00029064219076853793);\n\t\trd(-2, -7, 0.00074569591082188904);\n\t\trd(-2, -6, 0.00167656227361259735);\n\t\trd(-2, -5, 0.00331179772304425381);\n\t\trd(-2, -4, 0.00576434353597317893);\n\t\trd(-2, -3, 0.00885393362780161237);\n\t\trd(-2, -2, 0.01202052872924038764);\n\t\trd(-2, -1, 0.01443467047961888468);\n\t\trd(-2, 0, 0.01534280698072925872);\n\t\trd(-2, 1, 0.01443467047961888468);\n\t\trd(-2, 2, 0.01202052872924038764);\n\t\trd(-2, 3, 0.00885393362780161237);\n\t\trd(-2, 4, 0.00576434353597317893);\n\t\trd(-2, 5, 0.00331179772304425381);\n\t\trd(-2, 6, 0.00167656227361259735);\n\t\trd(-2, 7, 0.00074569591082188904);\n\t\trd(-2, 8, 0.00029064219076853793);\n\t\trd(-2, 9, 0.00009877353345843213);\n\t\trd(-2, 10, 0.00002915206850150404);\n\t\trd(-2, 11, 0.00000740511920947201);\n\t\trd(-2, 12, 0.00000161026796421120);\n\t\trd(-2, 13, 0.00000029425391370240);\n\t\trd(-2, 14, 0.00000004501190737920);\n\t\trd(-2, 15, 0.00000000548677877760);\n\t\trd(-2, 16, 0.00000000054389637120);\n\t\trd(-2, 17, 0.00000000003586129920);\n\t\trd(-2, 18, 0.00000000000199229440);\n\t\trd(-1, -19, 0.00000000000020971520);\n\t\trd(-1, -18, 0.00000000000398458880);\n\t\trd(-1, -17, 0.00000000007570718720);\n\t\trd(-1, -16, 0.00000000088457871360);\n\t\trd(-1, -15, 0.00000000857085050880);\n\t\trd(-1, -14, 0.00000006482527518720);\n\t\trd(-1, -13, 0.00000040988269608960);\n\t\trd(-1, -12, 0.00000215975869808640);\n\t\trd(-1, -11, 0.00000970997272412161);\n\t\trd(-1, -10, 0.00003740831580160005);\n\t\trd(-1, -9, 0.00012484237097697295);\n\t\trd(-1, -8, 0.00036239509993553966);\n\t\trd(-1, -7, 0.00092041851992801394);\n\t\trd(-1, -6, 0.00205133385302016255);\n\t\trd(-1, -5, 0.00402554513711432180);\n\t\trd(-1, -4, 0.00696860328276788059);\n\t\trd(-1, -3, 0.01066264029435004188);\n\t\trd(-1, -2, 0.01443467047961888468);\n\t\trd(-1, -1, 0.01730719679732779098);\n\t\trd(-1, 0, 0.01838445356992432500);\n\t\trd(-1, 1, 0.01730719679732779098);\n\t\trd(-1, 2, 0.01443467047961888468);\n\t\trd(-1, 3, 0.01066264029435004188);\n\t\trd(-1, 4, 0.00696860328276788059);\n\t\trd(-1, 5, 0.00402554513711432180);\n\t\trd(-1, 6, 0.00205133385302016255);\n\t\trd(-1, 7, 0.00092041851992801394);\n\t\trd(-1, 8, 0.00036239509993553966);\n\t\trd(-1, 9, 0.00012484237097697295);\n\t\trd(-1, 10, 0.00003740831580160005);\n\t\trd(-1, 11, 0.00000970997272412161);\n\t\trd(-1, 12, 0.00000215975869808640);\n\t\trd(-1, 13, 0.00000040988269608960);\n\t\trd(-1, 14, 0.00000006482527518720);\n\t\trd(-1, 15, 0.00000000857085050880);\n\t\trd(-1, 16, 0.00000000088457871360);\n\t\trd(-1, 17, 0.00000000007570718720);\n\t\trd(-1, 18, 0.00000000000398458880);\n\t\trd(-1, 19, 0.00000000000020971520);\n\t\trd(0, -20, 0.00000000000001048576);\n\t\trd(0, -19, 0.00000000000020971520);\n\t\trd(0, -18, 0.00000000000618659840);\n\t\trd(0, -17, 0.00000000008766095360);\n\t\trd(0, -16, 0.00000000107484282880);\n\t\trd(0, -15, 0.00000000974949187584);\n\t\trd(0, -14, 0.00000007367703920640);\n\t\trd(0, -13, 0.00000045540263854080);\n\t\trd(0, -12, 0.00000238527546654720);\n\t\trd(0, -11, 0.00001060953349160961);\n\t\trd(0, -10, 0.00004066530832678917);\n\t\trd(0, -9, 0.00013488317613998099);\n\t\trd(0, -8, 0.00039008920938741809);\n\t\trd(0, -7, 0.00098697287554826369);\n\t\trd(0, -6, 0.00219408337647698185);\n\t\trd(0, -5, 0.00429525160899379803);\n\t\trd(0, -4, 0.00742361732528210895);\n\t\trd(0, -3, 0.01134262269341861258);\n\t\trd(0, -2, 0.01534280698072925872);\n\t\trd(0, -1, 0.01838445356992432500);\n\t\trd(0, 0, 0.01952703003703118445);\n\t\trd(0, 1, 0.01838445356992432500);\n\t\trd(0, 2, 0.01534280698072925872);\n\t\trd(0, 3, 0.01134262269341861258);\n\t\trd(0, 4, 0.00742361732528210895);\n\t\trd(0, 5, 0.00429525160899379803);\n\t\trd(0, 6, 0.00219408337647698185);\n\t\trd(0, 7, 0.00098697287554826369);\n\t\trd(0, 8, 0.00039008920938741809);\n\t\trd(0, 9, 0.00013488317613998099);\n\t\trd(0, 10, 0.00004066530832678917);\n\t\trd(0, 11, 0.00001060953349160961);\n\t\trd(0, 12, 0.00000238527546654720);\n\t\trd(0, 13, 0.00000045540263854080);\n\t\trd(0, 14, 0.00000007367703920640);\n\t\trd(0, 15, 0.00000000974949187584);\n\t\trd(0, 16, 0.00000000107484282880);\n\t\trd(0, 17, 0.00000000008766095360);\n\t\trd(0, 18, 0.00000000000618659840);\n\t\trd(0, 19, 0.00000000000020971520);\n\t\trd(0, 20, 0.00000000000001048576);\n\t\trd(1, -19, 0.00000000000020971520);\n\t\trd(1, -18, 0.00000000000398458880);\n\t\trd(1, -17, 0.00000000007570718720);\n\t\trd(1, -16, 0.00000000088457871360);\n\t\trd(1, -15, 0.00000000857085050880);\n\t\trd(1, -14, 0.00000006482527518720);\n\t\trd(1, -13, 0.00000040988269608960);\n\t\trd(1, -12, 0.00000215975869808640);\n\t\trd(1, -11, 0.00000970997272412161);\n\t\trd(1, -10, 0.00003740831580160005);\n\t\trd(1, -9, 0.00012484237097697295);\n\t\trd(1, -8, 0.00036239509993553966);\n\t\trd(1, -7, 0.00092041851992801394);\n\t\trd(1, -6, 0.00205133385302016255);\n\t\trd(1, -5, 0.00402554513711432180);\n\t\trd(1, -4, 0.00696860328276788059);\n\t\trd(1, -3, 0.01066264029435004188);\n\t\trd(1, -2, 0.01443467047961888468);\n\t\trd(1, -1, 0.01730719679732779098);\n\t\trd(1, 0, 0.01838445356992432500);\n\t\trd(1, 1, 0.01730719679732779098);\n\t\trd(1, 2, 0.01443467047961888468);\n\t\trd(1, 3, 0.01066264029435004188);\n\t\trd(1, 4, 0.00696860328276788059);\n\t\trd(1, 5, 0.00402554513711432180);\n\t\trd(1, 6, 0.00205133385302016255);\n\t\trd(1, 7, 0.00092041851992801394);\n\t\trd(1, 8, 0.00036239509993553966);\n\t\trd(1, 9, 0.00012484237097697295);\n\t\trd(1, 10, 0.00003740831580160005);\n\t\trd(1, 11, 0.00000970997272412161);\n\t\trd(1, 12, 0.00000215975869808640);\n\t\trd(1, 13, 0.00000040988269608960);\n\t\trd(1, 14, 0.00000006482527518720);\n\t\trd(1, 15, 0.00000000857085050880);\n\t\trd(1, 16, 0.00000000088457871360);\n\t\trd(1, 17, 0.00000000007570718720);\n\t\trd(1, 18, 0.00000000000398458880);\n\t\trd(1, 19, 0.00000000000020971520);\n\t\trd(2, -18, 0.00000000000199229440);\n\t\trd(2, -17, 0.00000000003586129920);\n\t\trd(2, -16, 0.00000000054389637120);\n\t\trd(2, -15, 0.00000000548677877760);\n\t\trd(2, -14, 0.00000004501190737920);\n\t\trd(2, -13, 0.00000029425391370240);\n\t\trd(2, -12, 0.00000161026796421120);\n\t\trd(2, -11, 0.00000740511920947201);\n\t\trd(2, -10, 0.00002915206850150404);\n\t\trd(2, -9, 0.00009877353345843213);\n\t\trd(2, -8, 0.00029064219076853793);\n\t\trd(2, -7, 0.00074569591082188904);\n\t\trd(2, -6, 0.00167656227361259735);\n\t\trd(2, -5, 0.00331179772304425381);\n\t\trd(2, -4, 0.00576434353597317893);\n\t\trd(2, -3, 0.00885393362780161237);\n\t\trd(2, -2, 0.01202052872924038764);\n\t\trd(2, -1, 0.01443467047961888468);\n\t\trd(2, 0, 0.01534280698072925872);\n\t\trd(2, 1, 0.01443467047961888468);\n\t\trd(2, 2, 0.01202052872924038764);\n\t\trd(2, 3, 0.00885393362780161237);\n\t\trd(2, 4, 0.00576434353597317893);\n\t\trd(2, 5, 0.00331179772304425381);\n\t\trd(2, 6, 0.00167656227361259735);\n\t\trd(2, 7, 0.00074569591082188904);\n\t\trd(2, 8, 0.00029064219076853793);\n\t\trd(2, 9, 0.00009877353345843213);\n\t\trd(2, 10, 0.00002915206850150404);\n\t\trd(2, 11, 0.00000740511920947201);\n\t\trd(2, 12, 0.00000161026796421120);\n\t\trd(2, 13, 0.00000029425391370240);\n\t\trd(2, 14, 0.00000004501190737920);\n\t\trd(2, 15, 0.00000000548677877760);\n\t\trd(2, 16, 0.00000000054389637120);\n\t\trd(2, 17, 0.00000000003586129920);\n\t\trd(2, 18, 0.00000000000199229440);\n\t\trd(3, -17, 0.00000000001195376640);\n\t\trd(3, -16, 0.00000000020321402880);\n\t\trd(3, -15, 0.00000000264178237440);\n\t\trd(3, -14, 0.00000002357282734080);\n\t\trd(3, -13, 0.00000016907407196160);\n\t\trd(3, -12, 0.00000097461448212480);\n\t\trd(3, -11, 0.00000470237262643201);\n\t\trd(3, -10, 0.00001913463295180802);\n\t\trd(3, -9, 0.00006673345491763209);\n\t\trd(3, -8, 0.00020066450559467548);\n\t\trd(3, -7, 0.00052444135340113979);\n\t\trd(3, -6, 0.00119596658227937415);\n\t\trd(3, -5, 0.00239043263217008934);\n\t\trd(3, -4, 0.00419753533038920174);\n\t\trd(3, -3, 0.00649185016550523752);\n\t\trd(3, -2, 0.00885393362780161237);\n\t\trd(3, -1, 0.01066264029435004188);\n\t\trd(3, 0, 0.01134262269341861258);\n\t\trd(3, 1, 0.01066264029435004188);\n\t\trd(3, 2, 0.00885393362780161237);\n\t\trd(3, 3, 0.00649185016550523752);\n\t\trd(3, 4, 0.00419753533038920174);\n\t\trd(3, 5, 0.00239043263217008934);\n\t\trd(3, 6, 0.00119596658227937415);\n\t\trd(3, 7, 0.00052444135340113979);\n\t\trd(3, 8, 0.00020066450559467548);\n\t\trd(3, 9, 0.00006673345491763209);\n\t\trd(3, 10, 0.00001913463295180802);\n\t\trd(3, 11, 0.00000470237262643201);\n\t\trd(3, 12, 0.00000097461448212480);\n\t\trd(3, 13, 0.00000016907407196160);\n\t\trd(3, 14, 0.00000002357282734080);\n\t\trd(3, 15, 0.00000000264178237440);\n\t\trd(3, 16, 0.00000000020321402880);\n\t\trd(3, 17, 0.00000000001195376640);\n\t\trd(4, -16, 0.00000000005080350720);\n\t\trd(4, -15, 0.00000000081285611520);\n\t\trd(4, -14, 0.00000000934784532480);\n\t\trd(4, -13, 0.00000007478276259840);\n\t\trd(4, -12, 0.00000047694332559360);\n\t\trd(4, -11, 0.00000245238689955840);\n\t\trd(4, -10, 0.00001054274381414401);\n\t\trd(4, -9, 0.00003826357591080965);\n\t\trd(4, -8, 0.00011900172883722254);\n\t\trd(4, -7, 0.00031913787795701800);\n\t\trd(4, -6, 0.00074356663422812247);\n\t\trd(4, -5, 0.00151085647417835683);\n\t\trd(4, -4, 0.00268828038597181736);\n\t\trd(4, -3, 0.00419753533038920174);\n\t\trd(4, -2, 0.00576434353597317893);\n\t\trd(4, -1, 0.00696860328276788059);\n\t\trd(4, 0, 0.00742361732528210895);\n\t\trd(4, 1, 0.00696860328276788059);\n\t\trd(4, 2, 0.00576434353597317893);\n\t\trd(4, 3, 0.00419753533038920174);\n\t\trd(4, 4, 0.00268828038597181736);\n\t\trd(4, 5, 0.00151085647417835683);\n\t\trd(4, 6, 0.00074356663422812247);\n\t\trd(4, 7, 0.00031913787795701800);\n\t\trd(4, 8, 0.00011900172883722254);\n\t\trd(4, 9, 0.00003826357591080965);\n\t\trd(4, 10, 0.00001054274381414401);\n\t\trd(4, 11, 0.00000245238689955840);\n\t\trd(4, 12, 0.00000047694332559360);\n\t\trd(4, 13, 0.00000007478276259840);\n\t\trd(4, 14, 0.00000000934784532480);\n\t\trd(4, 15, 0.00000000081285611520);\n\t\trd(4, 16, 0.00000000005080350720);\n\t\trd(5, -15, 0.00000000016257122304);\n\t\trd(5, -14, 0.00000000243856834560);\n\t\trd(5, -13, 0.00000002519853957120);\n\t\trd(5, -12, 0.00000018207976980480);\n\t\trd(5, -11, 0.00000104208153968640);\n\t\trd(5, -10, 0.00000481015734730753);\n\t\trd(5, -9, 0.00001852946157404162);\n\t\trd(5, -8, 0.00006022735457157127);\n\t\trd(5, -7, 0.00016754712174919700);\n\t\trd(5, -6, 0.00040148751813181486);\n\t\trd(5, -5, 0.00083466163077513319);\n\t\trd(5, -4, 0.00151085647417835683);\n\t\trd(5, -3, 0.00239043263217008934);\n\t\trd(5, -2, 0.00331179772304425381);\n\t\trd(5, -1, 0.00402554513711432180);\n\t\trd(5, 0, 0.00429525160899379803);\n\t\trd(5, 1, 0.00402554513711432180);\n\t\trd(5, 2, 0.00331179772304425381);\n\t\trd(5, 3, 0.00239043263217008934);\n\t\trd(5, 4, 0.00151085647417835683);\n\t\trd(5, 5, 0.00083466163077513319);\n\t\trd(5, 6, 0.00040148751813181486);\n\t\trd(5, 7, 0.00016754712174919700);\n\t\trd(5, 8, 0.00006022735457157127);\n\t\trd(5, 9, 0.00001852946157404162);\n\t\trd(5, 10, 0.00000481015734730753);\n\t\trd(5, 11, 0.00000104208153968640);\n\t\trd(5, 12, 0.00000018207976980480);\n\t\trd(5, 13, 0.00000002519853957120);\n\t\trd(5, 14, 0.00000000243856834560);\n\t\trd(5, 15, 0.00000000016257122304);\n\t\trd(6, -14, 0.00000000040642805760);\n\t\trd(6, -13, 0.00000000568999280640);\n\t\trd(6, -12, 0.00000005324207554560);\n\t\trd(6, -11, 0.00000034871527342080);\n\t\trd(6, -10, 0.00000179905379696640);\n\t\trd(6, -9, 0.00000747624411955201);\n\t\trd(6, -8, 0.00002586569122775043);\n\t\trd(6, -7, 0.00007538061827112969);\n\t\trd(6, -6, 0.00018763787670650903);\n\t\trd(6, -5, 0.00040148751813181486);\n\t\trd(6, -4, 0.00074356663422812247);\n\t\trd(6, -3, 0.00119596658227937415);\n\t\trd(6, -2, 0.00167656227361259735);\n\t\trd(6, -1, 0.00205133385302016255);\n\t\trd(6, 0, 0.00219408337647698185);\n\t\trd(6, 1, 0.00205133385302016255);\n\t\trd(6, 2, 0.00167656227361259735);\n\t\trd(6, 3, 0.00119596658227937415);\n\t\trd(6, 4, 0.00074356663422812247);\n\t\trd(6, 5, 0.00040148751813181486);\n\t\trd(6, 6, 0.00018763787670650903);\n\t\trd(6, 7, 0.00007538061827112969);\n\t\trd(6, 8, 0.00002586569122775043);\n\t\trd(6, 9, 0.00000747624411955201);\n\t\trd(6, 10, 0.00000179905379696640);\n\t\trd(6, 11, 0.00000034871527342080);\n\t\trd(6, 12, 0.00000005324207554560);\n\t\trd(6, 13, 0.00000000568999280640);\n\t\trd(6, 14, 0.00000000040642805760);\n\t\trd(7, -13, 0.00000000081285611520);\n\t\trd(7, -12, 0.00000001056712949760);\n\t\trd(7, -11, 0.00000008982060072960);\n\t\trd(7, -10, 0.00000053364003962880);\n\t\trd(7, -9, 0.00000248503662018560);\n\t\trd(7, -8, 0.00000929907395788801);\n\t\trd(7, -7, 0.00002888524848168964);\n\t\trd(7, -6, 0.00007538061827112969);\n\t\trd(7, -5, 0.00016754712174919700);\n\t\trd(7, -4, 0.00031913787795701800);\n\t\trd(7, -3, 0.00052444135340113979);\n\t\trd(7, -2, 0.00074569591082188904);\n\t\trd(7, -1, 0.00092041851992801394);\n\t\trd(7, 0, 0.00098697287554826369);\n\t\trd(7, 1, 0.00092041851992801394);\n\t\trd(7, 2, 0.00074569591082188904);\n\t\trd(7, 3, 0.00052444135340113979);\n\t\trd(7, 4, 0.00031913787795701800);\n\t\trd(7, 5, 0.00016754712174919700);\n\t\trd(7, 6, 0.00007538061827112969);\n\t\trd(7, 7, 0.00002888524848168964);\n\t\trd(7, 8, 0.00000929907395788801);\n\t\trd(7, 9, 0.00000248503662018560);\n\t\trd(7, 10, 0.00000053364003962880);\n\t\trd(7, 11, 0.00000008982060072960);\n\t\trd(7, 12, 0.00000001056712949760);\n\t\trd(7, 13, 0.00000000081285611520);\n\t\trd(8, -12, 0.00000000132089118720);\n\t\trd(8, -11, 0.00000001585069424640);\n\t\trd(8, -10, 0.00000012240258334720);\n\t\trd(8, -9, 0.00000065868440535040);\n\t\trd(8, -8, 0.00000276550584893440);\n\t\trd(8, -7, 0.00000929907395788801);\n\t\trd(8, -6, 0.00002586569122775043);\n\t\trd(8, -5, 0.00006022735457157127);\n\t\trd(8, -4, 0.00011900172883722254);\n\t\trd(8, -3, 0.00020066450559467548);\n\t\trd(8, -2, 0.00029064219076853793);\n\t\trd(8, -1, 0.00036239509993553966);\n\t\trd(8, 0, 0.00039008920938741809);\n\t\trd(8, 1, 0.00036239509993553966);\n\t\trd(8, 2, 0.00029064219076853793);\n\t\trd(8, 3, 0.00020066450559467548);\n\t\trd(8, 4, 0.00011900172883722254);\n\t\trd(8, 5, 0.00006022735457157127);\n\t\trd(8, 6, 0.00002586569122775043);\n\t\trd(8, 7, 0.00000929907395788801);\n\t\trd(8, 8, 0.00000276550584893440);\n\t\trd(8, 9, 0.00000065868440535040);\n\t\trd(8, 10, 0.00000012240258334720);\n\t\trd(8, 11, 0.00000001585069424640);\n\t\trd(8, 12, 0.00000000132089118720);\n\t\trd(9, -11, 0.00000000176118824960);\n\t\trd(9, -10, 0.00000001937307074560);\n\t\trd(9, -9, 0.00000013561149521920);\n\t\trd(9, -8, 0.00000065868440535040);\n\t\trd(9, -7, 0.00000248503662018560);\n\t\trd(9, -6, 0.00000747624411955201);\n\t\trd(9, -5, 0.00001852946157404162);\n\t\trd(9, -4, 0.00003826357591080965);\n\t\trd(9, -3, 0.00006673345491763209);\n\t\trd(9, -2, 0.00009877353345843213);\n\t\trd(9, -1, 0.00012484237097697295);\n\t\trd(9, 0, 0.00013488317613998099);\n\t\trd(9, 1, 0.00012484237097697295);\n\t\trd(9, 2, 0.00009877353345843213);\n\t\trd(9, 3, 0.00006673345491763209);\n\t\trd(9, 4, 0.00003826357591080965);\n\t\trd(9, 5, 0.00001852946157404162);\n\t\trd(9, 6, 0.00000747624411955201);\n\t\trd(9, 7, 0.00000248503662018560);\n\t\trd(9, 8, 0.00000065868440535040);\n\t\trd(9, 9, 0.00000013561149521920);\n\t\trd(9, 10, 0.00000001937307074560);\n\t\trd(9, 11, 0.00000000176118824960);\n\t\trd(10, -10, 0.00000000193730707456);\n\t\trd(10, -9, 0.00000001937307074560);\n\t\trd(10, -8, 0.00000012240258334720);\n\t\trd(10, -7, 0.00000053364003962880);\n\t\trd(10, -6, 0.00000179905379696640);\n\t\trd(10, -5, 0.00000481015734730753);\n\t\trd(10, -4, 0.00001054274381414401);\n\t\trd(10, -3, 0.00001913463295180802);\n\t\trd(10, -2, 0.00002915206850150404);\n\t\trd(10, -1, 0.00003740831580160005);\n\t\trd(10, 0, 0.00004066530832678917);\n\t\trd(10, 1, 0.00003740831580160005);\n\t\trd(10, 2, 0.00002915206850150404);\n\t\trd(10, 3, 0.00001913463295180802);\n\t\trd(10, 4, 0.00001054274381414401);\n\t\trd(10, 5, 0.00000481015734730753);\n\t\trd(10, 6, 0.00000179905379696640);\n\t\trd(10, 7, 0.00000053364003962880);\n\t\trd(10, 8, 0.00000012240258334720);\n\t\trd(10, 9, 0.00000001937307074560);\n\t\trd(10, 10, 0.00000000193730707456);\n\t\trd(11, -9, 0.00000000176118824960);\n\t\trd(11, -8, 0.00000001585069424640);\n\t\trd(11, -7, 0.00000008982060072960);\n\t\trd(11, -6, 0.00000034871527342080);\n\t\trd(11, -5, 0.00000104208153968640);\n\t\trd(11, -4, 0.00000245238689955840);\n\t\trd(11, -3, 0.00000470237262643201);\n\t\trd(11, -2, 0.00000740511920947201);\n\t\trd(11, -1, 0.00000970997272412161);\n\t\trd(11, 0, 0.00001060953349160961);\n\t\trd(11, 1, 0.00000970997272412161);\n\t\trd(11, 2, 0.00000740511920947201);\n\t\trd(11, 3, 0.00000470237262643201);\n\t\trd(11, 4, 0.00000245238689955840);\n\t\trd(11, 5, 0.00000104208153968640);\n\t\trd(11, 6, 0.00000034871527342080);\n\t\trd(11, 7, 0.00000008982060072960);\n\t\trd(11, 8, 0.00000001585069424640);\n\t\trd(11, 9, 0.00000000176118824960);\n\t\trd(12, -8, 0.00000000132089118720);\n\t\trd(12, -7, 0.00000001056712949760);\n\t\trd(12, -6, 0.00000005324207554560);\n\t\trd(12, -5, 0.00000018207976980480);\n\t\trd(12, -4, 0.00000047694332559360);\n\t\trd(12, -3, 0.00000097461448212480);\n\t\trd(12, -2, 0.00000161026796421120);\n\t\trd(12, -1, 0.00000215975869808640);\n\t\trd(12, 0, 0.00000238527546654720);\n\t\trd(12, 1, 0.00000215975869808640);\n\t\trd(12, 2, 0.00000161026796421120);\n\t\trd(12, 3, 0.00000097461448212480);\n\t\trd(12, 4, 0.00000047694332559360);\n\t\trd(12, 5, 0.00000018207976980480);\n\t\trd(12, 6, 0.00000005324207554560);\n\t\trd(12, 7, 0.00000001056712949760);\n\t\trd(12, 8, 0.00000000132089118720);\n\t\trd(13, -7, 0.00000000081285611520);\n\t\trd(13, -6, 0.00000000568999280640);\n\t\trd(13, -5, 0.00000002519853957120);\n\t\trd(13, -4, 0.00000007478276259840);\n\t\trd(13, -3, 0.00000016907407196160);\n\t\trd(13, -2, 0.00000029425391370240);\n\t\trd(13, -1, 0.00000040988269608960);\n\t\trd(13, 0, 0.00000045540263854080);\n\t\trd(13, 1, 0.00000040988269608960);\n\t\trd(13, 2, 0.00000029425391370240);\n\t\trd(13, 3, 0.00000016907407196160);\n\t\trd(13, 4, 0.00000007478276259840);\n\t\trd(13, 5, 0.00000002519853957120);\n\t\trd(13, 6, 0.00000000568999280640);\n\t\trd(13, 7, 0.00000000081285611520);\n\t\trd(14, -6, 0.00000000040642805760);\n\t\trd(14, -5, 0.00000000243856834560);\n\t\trd(14, -4, 0.00000000934784532480);\n\t\trd(14, -3, 0.00000002357282734080);\n\t\trd(14, -2, 0.00000004501190737920);\n\t\trd(14, -1, 0.00000006482527518720);\n\t\trd(14, 0, 0.00000007367703920640);\n\t\trd(14, 1, 0.00000006482527518720);\n\t\trd(14, 2, 0.00000004501190737920);\n\t\trd(14, 3, 0.00000002357282734080);\n\t\trd(14, 4, 0.00000000934784532480);\n\t\trd(14, 5, 0.00000000243856834560);\n\t\trd(14, 6, 0.00000000040642805760);\n\t\trd(15, -5, 0.00000000016257122304);\n\t\trd(15, -4, 0.00000000081285611520);\n\t\trd(15, -3, 0.00000000264178237440);\n\t\trd(15, -2, 0.00000000548677877760);\n\t\trd(15, -1, 0.00000000857085050880);\n\t\trd(15, 0, 0.00000000974949187584);\n\t\trd(15, 1, 0.00000000857085050880);\n\t\trd(15, 2, 0.00000000548677877760);\n\t\trd(15, 3, 0.00000000264178237440);\n\t\trd(15, 4, 0.00000000081285611520);\n\t\trd(15, 5, 0.00000000016257122304);\n\t\trd(16, -4, 0.00000000005080350720);\n\t\trd(16, -3, 0.00000000020321402880);\n\t\trd(16, -2, 0.00000000054389637120);\n\t\trd(16, -1, 0.00000000088457871360);\n\t\trd(16, 0, 0.00000000107484282880);\n\t\trd(16, 1, 0.00000000088457871360);\n\t\trd(16, 2, 0.00000000054389637120);\n\t\trd(16, 3, 0.00000000020321402880);\n\t\trd(16, 4, 0.00000000005080350720);\n\t\trd(17, -3, 0.00000000001195376640);\n\t\trd(17, -2, 0.00000000003586129920);\n\t\trd(17, -1, 0.00000000007570718720);\n\t\trd(17, 0, 0.00000000008766095360);\n\t\trd(17, 1, 0.00000000007570718720);\n\t\trd(17, 2, 0.00000000003586129920);\n\t\trd(17, 3, 0.00000000001195376640);\n\t\trd(18, -2, 0.00000000000199229440);\n\t\trd(18, -1, 0.00000000000398458880);\n\t\trd(18, 0, 0.00000000000618659840);\n\t\trd(18, 1, 0.00000000000398458880);\n\t\trd(18, 2, 0.00000000000199229440);\n\t\trd(19, -1, 0.00000000000020971520);\n\t\trd(19, 0, 0.00000000000020971520);\n\t\trd(19, 1, 0.00000000000020971520);\n\t\trd(20, 0, 0.00000000000001048576);\n    #endif\n    fragColor = result;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//GRADIENT SUBTRACTION\nint kA=65,kB=66,kC=67,kD=68,kE=69,kF=70,kG=71,kH=72,kI=73,kJ=74,kK=75,kL=76,kM=77,kN=78,kO=79,kP=80,kQ=81,kR=82,kS=83,kT=84,kU=85,kV=86,kW=87,kX=88,kY=89,kZ=90;\nint k0=48,k1=49,k2=50,k3=51,k4=52,k5=53,k6=54,k7=55,k8=56,k9=57;\nint kSpace=32,kLeft=37,kUp=38,kRight=39,kDown=40,kCtrl=17;\nbool ReadKey(int key)\n{\n\tfloat keyVal = texture( iChannel3, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn keyVal > 0.0;\n}\n\nvec2 fc;\nvec2 rres;\nvec2 uv;\n\nvec4 rd(int x,int y)\n{\n    return texture(iChannel2, (fc+vec2(x,y))* rres);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fc = floor(fragCoord)+ 0.5;\n    rres = 1.0/ floor(iResolution.xy);\n    uv = fc* rres;\n    vec4 self = texture(iChannel0, uv);\n    if(iTime<2.0||iFrame<2*60||self.w!=1.0){\n        fragColor = vec4(0,0,0,1);\n        return;\n    }\n    vec4 left = rd(-1, 0);\n    vec4 right = rd(1, 0);\n    vec4 top = rd(0, 1);\n    vec4 bottom = rd(0, -1);\n    \n    vec2 velAdd = vec2(left.z - right.z, bottom.z - top.z)* 0.5;\n    float temp = self.z;\n    velAdd.y += temp * 0.001*1.;\n    //temp *= 1.0-0.03125*0.03125*0.03125*(1.0+sin((15.47*fragCoord.x+13.03*fragCoord.y)*65.31*iDate.w));\n\n\tif(ReadKey(kA) && iMouse.z > 0.0 && distance(iMouse.xy, fragCoord) < 10.0)\n    {\n        temp += 0.5;\n    }\n    //velAdd.x *= (1.0-0.03125+0.03125*sin((15.47*fragCoord.x+13.03*fragCoord.y)*65.31*iDate.w));\n    velAdd += self.xy;\n\n    fragColor = vec4(velAdd, temp, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}