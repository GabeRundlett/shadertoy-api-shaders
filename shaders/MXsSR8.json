{
    "Shader": {
        "info": {
            "date": "1709152899",
            "description": "A port of the honeycomb shader used by Ladysnakeâ€™s Requiem Minecraft mod, check the code for a link.",
            "flags": 0,
            "hasliked": 0,
            "id": "MXsSR8",
            "likes": 1,
            "name": "Honeycomb (Requiem mod)",
            "published": 3,
            "tags": [
                "minecraft",
                "port",
                "doctor4t"
            ],
            "usePreview": 0,
            "username": "cph101",
            "viewed": 121
        },
        "renderpass": [
            {
                "code": "/*\n    Authors: pyrofab, doctor4t\n    Porter: cph101\n \n    Based on the Requiem mod for Minecraft (https://shorturl.at/cefY0)\n*/\nfloat PI = 3.14159265359;\nfloat TWO_PI = 6.28318530718;\nfloat SIDES = 6.;\n\n// The number of tiles on the vertical axis\nfloat TileCount = 6.0;\nfloat TileRatioX = 0.64;\n\n// Reference to\n// http://thndl.com/square-shaped-shaders.html\n\nfloat hexagon(vec2 st) {\n    // Angle and radius from the current pixel\n    float a = atan(st.x,st.y)+PI;\n    float r = TWO_PI/SIDES;\n\n    // Shaping function that modulate the distance\n    float d = cos(floor(.5+a/r)*r-a)*length(st);\n    return 1.0-smoothstep(.84,.98,d);\n}\n\nfloat linearstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t;\n}\n\nvec2 tile(in vec2 _st, in vec2 shift) {\n    float gapx = (1.-TileRatioX)/2.;\n    vec2 st = fract(_st * vec2(TileCount*TileRatioX,TileCount) + shift);\n    st.x = linearstep(gapx, 1.-gapx, st.x);\n    // Remap the space to -1. to 1.\n    st = st * 2. -1.;\n    return st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 texCoord ) {\n\n    //normalized coords with some cheat\n    vec2 p = gl_FragCoord.xy / iResolution.x; // xy\n\n    //screen proportion\n    float prop = iResolution.x / iResolution.y;\n    //center coords\n    vec2 m = vec2(0.5, 0.5 / prop);\n    //vector from center to current fragment\n    vec2 d = p - m;\n    // distance of pixel from center\n    float r = sqrt(dot(d, d));\n    //amount of effect\n    float Slider = 0.42;\n    float power = ( 2.0 * 3.141592 / (2.0 * sqrt(dot(m, m))) ) *\n    (Slider - 0.5);\n    //radius of 1:1 effect\n    float bind;\n    if (power > 0.0) bind = sqrt(dot(m, m));//stick to corners\n    else {if (prop < 1.0) bind = m.x; else bind = m.y;}//stick to borders\n\n    //Weird formulas\n    vec2 uv;\n    if (power > 0.0)//fisheye\n    uv = m + normalize(d) * tan(r * power) * bind / tan( bind * power);\n    else if (power < 0.0)//antifisheye\n    uv = m + normalize(d) * atan(r * -power * 10.0) * bind / atan(-power * bind * 10.0);\n    else\n    uv = p;//no effect for power = 1.0\n\n    //Second part of cheat\n    //for round effect, not elliptical\n    vec2 st = vec2(uv.x, uv.y * prop);\n    //st.x *= OutSize.x/OutSize.y;\n    float paving = 0.0;\n\n    paving = hexagon(tile(st, vec2(0)));\n    paving += hexagon(tile(st, vec2(0.5)));\n\n    vec3 col = texture(iChannel0, texCoord).rgb;\n    vec3 Gray = vec3(0.3, 0.59, 0.11);\n    float Saturation = 1.4;\n    float Luma = dot(col, Gray);\n    vec3 Chroma = col - Luma;\n    col = (Chroma * Saturation) + Luma * paving;\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}