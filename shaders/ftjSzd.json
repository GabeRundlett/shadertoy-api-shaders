{
    "Shader": {
        "info": {
            "date": "1628404624",
            "description": "just capturing greyscale min/max to determine FG or BG.\ndoesn't work very well.\n\nclick anywhere, then you have one second to get out of the scene, then wait two seconds, then move back into the scene.\n\nI'll try again keying on Hue or Hue + Sat.",
            "flags": 34,
            "hasliked": 0,
            "id": "ftjSzd",
            "likes": 3,
            "name": "bg removal experiment",
            "published": 3,
            "tags": [
                "video"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 593
        },
        "renderpass": [
            {
                "code": "float sdCircle(in vec2 p, in float r) {\n    return length(p) - r;\n}\n\nfloat sdAnnulis(in vec2 p, in float r1, in float r2) {\n    float P = length(p);\n    \n    return max(P - r2, r1 - P);\n}\n\n\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    vec2 UV = XY / RES.xy;\n    \n    float zoom            = 0.95;\n    float worldFromScreen = 2.0 / min(RES.x, RES.y) / zoom;\n    vec2  p               = worldFromScreen * (XY - RES.xy * 0.5);\n    float smoothEps       = worldFromScreen * 1.5;\n\n    RGBA = texture(iChannel1, vec2(1.0 - UV.x, UV.y), 0.0);\n    \n    vec4 control = texelFetch(iChannel0, ivec2(0), 0);\n        \n    float secondsSinceMouseWasReleased = iTime - control.x;\n    float t = secondsSinceMouseWasReleased / clickDelaySeconds;\n    \n    if (t < 3.0) {\n        float theta = atan(p.y, p.x) / (2.0 * pi) + 0.5;\n        \n        float m = smoothstep(smoothEps, -smoothEps, sdAnnulis(p, 0.9, 1.0));\n        \n        if (t > 0.0) {\n            RGBA.r  = mix(RGBA.r , 1.0, smoothstep(-smoothEps, smoothEps, t - theta) * m);\n        }\n        if (t > 1.0) {\n            RGBA.rb = mix(RGBA.rb, vec2(1.0), smoothstep(-smoothEps, smoothEps, t - 1.0 - theta) * m);\n        }\n        if (t > 2.0) {\n            RGBA.rgb = mix(RGBA.rgb, vec3(1.0), smoothstep(-smoothEps, smoothEps, t - 2.0 - theta) * m);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 RGBA, in vec2 XY)\n{\n    ivec2 IJ = ivec2(XY);\n\n    RGBA = texelFetch(iChannel0, IJ, 0);\n    \n    if (IJ == ivec2(0)) {\n        // x = iTime when released\n\n        bool isPressed = iMouse.z > 2.0;\n    \n        if (isPressed) {\n            RGBA.x = iTime;\n        }\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float clickDelaySeconds = 2.0;\nconst float pi                = 3.14159265359;\nconst float LOD               = 20.0;\n\n#define RES iResolution",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// buffer B accumulates min and max values\n\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n    vec4 me  = texture(iChannel1, XY/RES.xy, 0.0);\n    vec4 vid = texture(iChannel2, XY/RES.xy, 0.0);\n    float v = (vid.r + vid.g + vid.b) / 3.0;\n    \n    vec4 control = texelFetch(iChannel0, ivec2(0), 0);        \n    float secondsSinceMouseWasReleased = iTime - control.x;\n    float t = secondsSinceMouseWasReleased / clickDelaySeconds;\n    \n    if (t < 1.0) {\n        RGBA = vec4(1.0) * v;\n    }\n    else if (t < 3.0) {\n        RGBA.r = min(me.r, v);\n        RGBA.g = max(me.g, v);\n    }\n    else {\n        RGBA = me;\n    }\n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// buffer C threshholds incoming value against captured min/max\n\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n    vec4 ref = texture(iChannel1, XY/RES.xy, LOD);\n    vec4 vid = texture(iChannel2, XY/RES.xy, LOD);\n    vec4 bg  = texture(iChannel3, XY/RES.xy, 0.0);\n    float v = (vid.r + vid.g + vid.b) / 3.0;\n\n    vec4 control = texelFetch(iChannel0, ivec2(0), 0);\n    float secondsSinceMouseWasReleased = iTime - control.x;\n    float t = secondsSinceMouseWasReleased / clickDelaySeconds;\n\n    if (t < 3.0) {\n        RGBA = vid;\n    }\n    else {\n    \n        float expandRangeFactor = 2.0;\n    \n        float refMid = (ref.y + ref.x) / 2.0;\n        vec2  refXpd = (ref.xy - refMid) * expandRangeFactor + refMid;\n    \n        bool withinRange = v >= refXpd.x && v <= refXpd.y;\n\n        if (withinRange) {\n            RGBA = bg;\n        }\n        else {\n            RGBA = texture(iChannel2, XY/RES.xy, 0.0);\n\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}