{
    "Shader": {
        "info": {
            "date": "1667477799",
            "description": "It was kind of funny to make !",
            "flags": 0,
            "hasliked": 0,
            "id": "msjGzw",
            "likes": 53,
            "name": "Walk Like an Egyptian",
            "published": 3,
            "tags": [
                "cartoon",
                "parallax",
                "toon",
                "pyramid",
                "desert",
                "dune"
            ],
            "usePreview": 0,
            "username": "XT95",
            "viewed": 710
        },
        "renderpass": [
            {
                "code": "#define sunpos vec2(.5,.25)\n\nfloat clouds(vec2 uv) {\n    uv.x += iTime*.001;\n    float d = fbm( vec3(uv*vec2(4.,10.)*1.1+50., iTime*.01) );\n    d += abs(cos(uv.x*70.)*.5 + cos(uv.x*160.)*.25)*0.07;\n    d += uv.y-1.;\n    return d+.2;\n}\n\nvec4 background(vec2 uv, vec2 p) {\n    vec4 col = vec4(0., 0., 0., 1.);\n    \n    // greenish sky\n    col.rgb = pow( vec3(.5), vec3(5., 2.5*uv.y, 2.*(uv.y*-.1+1.)) );\n    \n    // clouds\n    float c = smoothstep(0.3,.32,clouds(uv));\n    float cs = smoothstep(0.3,.32, clouds(uv - normalize(p-sunpos)*.015));\n    col.rgb += vec3(.5,.4,.3) * c * (1.-cs);\n    col.rgb += vec3(.5,.4,.3)*.75 * c * (cs);\n    \n    // stars\n    col.rgb += vec3(1.) * smoothstep(0.8,1., noise(vec3(uv*300., iTime*.1))) * (1.-c);\n    \n    \n    // sun\n    float d = distance(p, sunpos);\n    col.rgb += vec3(1.) * smoothstep(0.16,.15,d);\n    col.rgb += vec3(1.,1.,.5) * pow(1./(1.+d), 8.)*1.;\n    \n    return col;\n}\n\nvec4 pyramids(vec2 p, float freq, float proba) {\n    vec4 col = vec4(0., 0., 0., 0.);\n\n    float seed = floor(p.x*freq-.5);\n    float h = fract(p.x*freq);\n    float d = -p.y + abs(h-.5)/freq * step(proba,hash1(seed));\n    float m = smoothstep(0.,0.01,d) ;\n    \n    float ds = -p.y + saturate(h-.5)/freq * step(proba,hash1(seed));\n    float ms = smoothstep(0.,0.01,ds) ;\n    \n    col.rgb = vec3(1.,.5,.0) * smoothstep(0.6,.5, fbm(p*vec2(10.,100.)*freq));\n    col.rgb = mix(col.rgb, vec3(1.,.5,.0)*.3, ms);\n    \n    col.rgb *= smoothstep(0.,0.015, abs(d-0.005)); // outline\n    \n    col.rgb = saturate(col.rgb);\n    \n    col.a = max(m, ms);\n    \n    return col * col.a;\n}\n\nfloat moutainsHeight(vec2 p, float amp, float power) {\n    float d = - pow(abs(sin(p.x*5.)*.5+ sin(p.x*2.+2.5)*.25 + sin(p.x*4.+2.)*.125), power) * amp;\n    return d;\n}\n\nvec4 mountains(vec2 p, float amp, float power) {\n    vec4 col = vec4(0., 0., 0., 0.);\n    \n    float h = -p.y + moutainsHeight(p,amp,power);\n    float hs = -p.y +moutainsHeight(p + normalize(p-(sunpos*2.-1.))*.05,amp,power);\n    float d = smoothstep(0.,0.01,h);\n    float ds = smoothstep(0.,0.01,hs);\n    \n    col = vec4(1.,1., 1., 1.) * d;\n    col.rgb *= vec3(1.,.4,.2)*(smoothstep(0.,-1.,ds-d)*.75+.25);\n    col.rgb *= smoothstep(0.,0.02,abs(h-.01)); // outline\n    //col.rgb *= (sin(d*50.+fbm(p*vec2(5.,50.)))*.5+.5)*.5+.5;\n    col.rgb = saturate(col.rgb);\n    return col * col.a;\n}\n\nvec4 cactus(vec2 p, float freq) {\n\n    vec4 col = vec4(0., 0., 0., 0.);\n    \n    \n    vec2 ip = floor(p*freq);\n    vec2 fp = fract(p*freq)-.5;\n    float seed = hash1(ip.x);\n    fp.y = p.y*2. + (seed)*.4;\n    \n    if (hash1(ip.x+1000.) > .3) {\n        return vec4(0.);\n    }\n    \n    float d = line(fp, vec2(0.,-.3), vec2(0.,.3));\n        \n    if (hash1(ip.x+100.) > .5) {\n        fp.x = -fp.x;\n    }\n    \n    if (seed > .25) {\n        d = min(d, line(fp, vec2(0.,0.), vec2(0.3,.0))*1.8);\n        d = min(d, line(fp, vec2(0.3,0.015), vec2(0.3,.2))*1.3);\n    }\n    \n    d = min(d, line(fp, vec2(0.,-.15), vec2(-0.3,-.15))*1.8);\n    d = min(d, line(fp, vec2(-0.3,-.14), vec2(-0.3,.05))*1.3);\n    d = d-p.y*.3 - fbm(p*300.+5.)*.005;\n    \n    \n    col = vec4(vec3(0.4,1.,0.)*.5 * (smoothstep(0.5,.6, fbm(p*vec2(300.,5.)+5.)*.5+.5)*.25+.75), smoothstep(0.1,0.09,d));\n    \n    col.rgb *= vec3(1.) * smoothstep(0.007,0.012, abs(d-.098)); // outline\n    \n    return col * col.a;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 invRes = vec2(1.) / iResolution.xy;\n    vec2 uv = fragCoord * invRes;\n    vec2 p = (2.*fragCoord - iResolution.xy) / iResolution.y;\n    vec2 pp = p;\n    \n    \n    // background\n    vec4 col = background(uv, pp);\n    \n    \n    // layers\n    #define LAYER_SPEED 0.05\n    #define LAYER_COUNT 8\n    vec4 layer[LAYER_COUNT];\n    p.x += iTime*LAYER_SPEED;    layer[0] = mountains(p*vec2(.5,3.)-vec2(0.,.3), .75, 1.2) * vec4(vec3(.25),1.);\n    p.x += iTime*LAYER_SPEED;    layer[1] = pyramids(p-vec2(0.,-.4), 1., .6);\n    p.x += iTime*LAYER_SPEED;    layer[2] = pyramids(p-vec2(0.,-.39), .5, .6);\n    p.x += iTime*LAYER_SPEED;    layer[3] = mountains(p*vec2(.25,2.25)-vec2(10.,-0.5), 1., 1.2);\n    p.x += iTime*LAYER_SPEED;    layer[4] = cactus(p*1.5-vec2(0.,-.7),3.)*1.;\n    p.x += iTime*LAYER_SPEED;    layer[5] = mountains(p*vec2(.25,2.)-vec2(0.,-0.6), 1., 1.2);\n    p.x += iTime*LAYER_SPEED;    layer[6] = mountains(p*vec2(.15,2.)-vec2(1000.,-0.7), 1., 1.2);\n    p.x += iTime*LAYER_SPEED;    layer[7] = cactus(p*.2-vec2(0.,-.0),3.);\n    \n    // merge layers with alpha premultiplied\n    for(int i=0; i<LAYER_COUNT; i++) {\n        col.rgb = col.rgb * (1.-layer[i].a) + layer[i].rgb * (2./(pow(float(i),2.5)+1.));\n    }\n    \n    // flare\n    float d = distance(pp, sunpos);\n    col.rgb += vec3(1.,1.,.5) * pow(1./(1.+d), 3.)*.1;\n    \n    \n    // color grading\n    col.rgb = pow(col.rgb, vec3(1.0,1.5,1.3));\n    \n    // vignetting\n    col.rgb *= pow( uv.x*uv.y*(1.-uv.x)*(1.-uv.y)*100., .1);\n\n    // gamma correction\n    col.rgb = pow(col.rgb, vec3(1./2.2));\n    \n    // output to the screen\n    fragColor = vec4(col.rgb * smoothstep(0.,3., iTime),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265\n#define saturate(x) clamp(x,0.,1.)\n\n\nfloat line( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat hash1( vec2 p )\n{\n    p  = 50.0*fract( p*0.3183099 );\n    return fract( p.x*p.y*(p.x+p.y) );\n}\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 w = fract(x);\n    #if 1\n    vec2 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    #else\n    vec2 u = w*w*(3.0-2.0*w);\n    #endif\n\n    float a = hash1(p+vec2(0,0));\n    float b = hash1(p+vec2(1,0));\n    float c = hash1(p+vec2(0,1));\n    float d = hash1(p+vec2(1,1));\n    \n    return -1.0+2.0*(a + (b-a)*u.x + (c-a)*u.y + (a - b - c + d)*u.x*u.y);\n}\n\nconst mat2 m2 = mat2(  0.80,  0.60,\n                      -0.60,  0.80 );\nfloat fbm(vec2 p) {\n    float f = 1.9;\n    float s = 0.55;\n    float a = 0.0;\n    float b = 0.5;\n    for( int i=0; i<4; i++ )\n    {\n        float n = noise(p);\n        a += b*n;\n        b *= s;\n        p = f*m2*p;\n    }\n\treturn a;\n}\n\nfloat hash1( float n )\n{\n    return fract( n*17.0*fract( n*0.3183099 ) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n    #if 1\n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    #else\n    vec3 u = w*w*(3.0-2.0*w);\n    #endif\n    \n\n\n    float n = p.x + 317.0*p.y + 157.0*p.z;\n    \n    float a = hash1(n+0.0);\n    float b = hash1(n+1.0);\n    float c = hash1(n+317.0);\n    float d = hash1(n+318.0);\n    float e = hash1(n+157.0);\n\tfloat f = hash1(n+158.0);\n    float g = hash1(n+474.0);\n    float h = hash1(n+475.0);\n\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z);\n}\n\nconst mat3 m3  = mat3( 0.00,  0.80,  0.60,\n                      -0.80,  0.36, -0.48,\n                      -0.60, -0.48,  0.64 );\n                      \nfloat fbm(vec3 p) {\n    float f = 1.9;\n    float s = 0.55;\n    float a = 0.0;\n    float b = 0.5;\n    for( int i=0; i<4; i++ )\n    {\n        float n = noise(p);\n        a += b*n;\n        b *= s;\n        p = f*m3*p;\n    }\n\treturn a;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}