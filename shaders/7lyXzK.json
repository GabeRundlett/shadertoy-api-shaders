{
    "Shader": {
        "info": {
            "date": "1641025778",
            "description": "Draw new mass with the mouse. Hold E to erase with the mouse. Try out fullscreen mode. Increasing numHashes improve mass conservation as particles will \"merge\" less often, at the cost of performance.",
            "flags": 48,
            "hasliked": 0,
            "id": "7lyXzK",
            "likes": 9,
            "name": "Viscous ball planet",
            "published": 3,
            "tags": [
                "particles",
                "planet",
                "physics"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/diameter;\n    ivec2 id = ivec2(floor(uv));\n    //ivec2 stripes = id % 2;\n    //fragColor = vec4(vec3(0.1*float(abs(stripes.x-stripes.y))), 1.);\n    fragColor = vec4(0.,0.,0.,1.);\n    vec3 bgcol = vec3(0.);\n    float totalW = 0.01;\n    for (int i=-2; i<=2; i++) {\n        for (int j=-2; j<=2; j++) {\n            ivec2 disp = ivec2(i, j);\n            ivec2 otherid = id+disp;\n            if (otherid.x < 0 || otherid.y < 0 || otherid.x >= particleEdge.x || otherid.y >= particleEdge.y) continue;\n            for (int k=0; k<hashEdge; k++) {\n                for (int l=0; l<hashEdge; l++) {\n                    ivec2 offset = ivec2(k, l);\n                    vec4 state = texelFetch(iChannel0, otherid*hashEdge+offset,0);\n                    if (state.xy == vec2(-1.)) continue;\n                    float dist = length(state.xy-fragCoord);\n                    float W = smoothstep(diameter*2.,0.,dist);\n                    totalW += W;\n                    //fragColor.xyz -= vec3(0.5, state.zw+.5)*smoothstep(diameter+1., diameter, dist);\n                    //fragColor.xyz = abs(fragColor.xyz);\n                    vec2 cd = normalize(state.xy - iResolution.xy*.5);\n                    vec2 angframe = vec2(cd.x*state.w-cd.y*state.z,dot(state.zw, cd));\n                    fragColor.yzx += W*vec3(0.5, angframe+.5);\n                }\n            }\n        }\n    }\n    fragColor.xyz /= totalW;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//grid hashing\n\nvoid mainImage( out vec4 state, in vec2 fragCoord )\n{\n    ivec2 maxIndex = particleEdge * hashEdge;\n    ivec2 ind = ivec2(floor(fragCoord.xy));\n    \n    if (ind.x >= maxIndex.x || ind.y >= maxIndex.y) discard;\n    state = texelFetch(iChannel0, ind, 0);\n    ivec2 id = ind/hashEdge; //cell id\n    if (iMouse.z > 0.) {\n        float mousedist = length(iMouse.xy*float(hashEdge)/diameter-fragCoord);\n        float keystate = texelFetch(iChannel3, ivec2(69.,0),0).x;\n        if (keystate > 0.5 && mousedist < float(hashEdge*drawRadius)) {\n            state = vec4(-1.,-1.,0.,0.);\n        } else if (ind % hashEdge == ivec2(0) && mousedist < float(hashEdge*drawRadius)) {\n            \n            state = vec4(vec2(id) * diameter+diameter*.5, 0.,0.);\n        }\n    }\n    if (iFrame == 0) {\n        //initialization\n        if (ind % (hashEdge) == ivec2(0)) {\n            state = vec4(vec2(id)*diameter+diameter*.5, (noise2D(fragCoord)*2.-1.)*speed);\n        } else {\n\t\t\tstate = vec4(-1., -1., 0., 0.);\n        }\n    } else {\n        //update\n        \n        //particle leaving the cell\n        if (ivec2(floor(state.xy/diameter)) != id) state = vec4(-1., -1., 0., 0.);\n        \n        //particle entering the cell\n        for (int i=-1; i<=1; i++) {\n            for (int j=-1; j<=1; j++) {\n                ivec2 disp = ivec2(i, j);\n                if (disp == ivec2(0)) continue;\n                ivec2 otherid = id + disp;\n                if (otherid.x < 0 || otherid.y < 0 || otherid.x >= particleEdge.x || otherid.y >= particleEdge.y) continue;\n                //check every bin inside the other cell for particles entering this cell\n                for (int k=0; k<hashEdge; k++) {\n                    for (int l=0; l<hashEdge; l++) {\n                        ivec2 offset = ivec2(k, l);\n                        vec4 otherstate = texelFetch(iChannel0, otherid*hashEdge + offset, 0);\n                        ivec2 id2 = ivec2(floor(otherstate.xy/diameter));\n                        if (id2 == id) {\n                            for (int h=0; h<numHashes; h++) {\n                                //receive the particle if this is the right bin\n                                ivec2 hashOffset = hash2D(otherstate.xy+float(h)*12345.);\n                                ivec2 hashInd = id*hashEdge+hashOffset;\n                                vec2 state0 = texelFetch(iChannel0, hashInd, 0).xy;\n                                if (state0 == vec2(-1.)) {\n                                    if (hashInd == ind) {\n                                        state = otherstate;\n                                        return;\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//state update\n\n//x,y = position\n//z,w = velocity\n//x,y are negative if unoccupied\n#define hardstep(h) (step(0., h)*2.-1.)\n\nvoid mainImage( out vec4 state, in vec2 fragCoord )\n{\n    ivec2 maxIndex = particleEdge * hashEdge;\n    ivec2 ind = ivec2(floor(fragCoord.xy));\n    ivec2 id = ind/hashEdge; //cell id\n\n    if (ind.x >= maxIndex.x || ind.y >= maxIndex.y) discard;\n    \n    state = texelFetch(iChannel0, ind, 0);\n    \n    if (state.xy != vec2(-1.)) {\n\n        //collision detection\n        vec2 impulse = vec2(0.);\n        //vec2 push = vec2(0.);\n        //int collisions = 0;\n        for (int i=-2; i<=2; i++) {\n            for (int j=-2; j<=2; j++) {\n                ivec2 disp = ivec2(i, j);\n                if (disp == ivec2(0)) continue;\n                ivec2 otherid = id + disp;\n                if (otherid.x < 0 || otherid.y < 0 || otherid.x >= particleEdge.x || otherid.y >= particleEdge.y) continue;\n                //check every bin inside the other cell for particles entering this cell\n                for (int k=0; k<hashEdge; k++) {\n                    for (int l=0; l<hashEdge; l++) {\n                        ivec2 offset = ivec2(k, l);\n                        vec4 otherstate = texelFetch(iChannel0, otherid*hashEdge + offset, 0);\n                        if (otherstate.xy == vec2(-1.)) continue;\n                        vec2 r = state.xy-otherstate.xy;\n                        //center of mass frame\n                        vec2 v_cm = (state.zw+otherstate.zw)/2.;\n                        vec2 v0 = state.zw-v_cm;\n                        #ifdef gooey\n                        float rn = length(r);\n                        float vproj = dot(v0, r)/rn;\n                        float r2 = 2.*diameter-rn;\n                        float force = mix(0.3*r2-0.1*vproj, -2./(rn*rn), step(0.,-r2));\n                        impulse += r/rn*force;\n                        #else\n                        float vproj = dot(v0, r)/dot(r, r);\n                        if (length(r) < diameter*2.) {\n                            //collisions++;\n                            //move the particles apart\n                            //push += r/20.;\n                            \n                            //compute collision impulse\n                            impulse -= (1.+restitution)*min(0.,vproj)*r;\n                        }\n                        #endif\n                    }\n                }\n            }\n        }\n        \n        state.zw += impulse;\n        vec2 centervec = iResolution.xy/2. - state.xy;\n        float d = length(centervec);\n        float d2 = d*d;\n        float gr2 = gradius*gradius;\n        float g_out = gr2/d2;\n        float g_in = d/gradius;\n        vec2 g = (gravity/gr2 * mix(g_in, g_out, step(gradius, d))/d) * centervec;\n        state.zw += g;\n        //enforce maximum speed\n        float v = length(state.zw);\n        state.zw *= min(v, maxspeed)/v;\n        state.xy += state.zw;\n        \n        #ifdef walls\n        vec2 bounds = diameter*vec2(particleEdge)-1.;\n        if (state.xy != vec2(-1.)) {\n            vec2 sgn = hardstep(state.xy)*hardstep(bounds-state.xy);\n            state.zw *= sgn;\n            state.zw *= mix(restitution, 1., step(0., sgn.x*sgn.y));\n            state.xy = min(state.xy, bounds);\n            state.xy = max(state.xy, 0.);\n        }\n        #endif\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//to turn on blob physics instead of hard collisions:\n#define gooey\n\n//to turn on world boundaries, uncomment:\n//#define walls\n\n//number of bins per cell is hashEdge * hashEdge\n//cannot be greater than diameter\n#define hashEdge 3\n\n//real world scale of the cells (and particles)\n#define diameter 3.\n\n//maximum number of times to try binning a particle\n#define numHashes 3\n\n//number of particles is particleEdge.x * particleEdge.y\n#define particleEdge ivec2(floor(iResolution.xy/diameter))\n\n//starting speed\n#define speed 1.\n//maxspeed must be smaller than diameter\n#define maxspeed 2.9\n#define restitution 0.75\n#define gradius 75.\n\n#ifdef gooey\n#define gravity 5e2\n#define drawRadius 10\n#else\n#define gravity 1e3\n#define drawRadius 10\n#endif\n\n\nvec2 noise2D(vec2 uv) {\n    return fract(3e4*sin((uv)*mat2(1,13.51,73.37,-57.17)));\n}\n\nivec2 hash2D(vec2 uv) {\n    return ivec2(floor(clamp(mod(3e4*sin((uv)*mat2(1,13.51,73.37,-57.17)), float(hashEdge)), 0., float(hashEdge))));\n}\n\nfloat noise1D(float t) {\n    return fract(14950.5*sin(1905.1*t));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}