{
    "Shader": {
        "info": {
            "date": "1643406021",
            "description": "Messing with ideas from Drakyen (forked), and oneshade: https://www.shadertoy.com/view/wtVyRG\n\ncode is very very messy\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ssScWh",
            "likes": 7,
            "name": "Volumetric Thingy",
            "published": 3,
            "tags": [
                "template"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 482
        },
        "renderpass": [
            {
                "code": "#define STEPS 400\n#define MAXDIST 10.\n#define SURFDIST 0.01\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pi 3.14159\n\nvec3 pModSpherical(vec3 p, in vec2 r) {\n    vec2 a = pi / r;\n    float sc = 2.5 + thc(4., 8. * length(p) + iTime);\n    \n    float axz = mod(atan(p.z, p.x) + a.x, 2. * a.x) - a.x;\n    p.xz = length(p.xz) * vec2(thc(sc, axz), ths(sc, axz));\n    \n    float axy = mod(atan(p.y, p.x) + a.y, 2. * a.y) - a.y;\n    p.xy = length(p.xy) * vec2(thc(sc, axy), ths(sc, axy));\n    \n    return p;\n}\n\nfloat box(vec3 pos, vec3 size)\n{\n    vec3 q = abs(pos) - size;\n    return min(max(q.x,max(q.y,q.z)),0.0) + length(max(q,0.0));\n}\n\nfloat scene(vec3 p)\n{\n\n    float time = p.y + 0.5 * iTime;\n    p.xz *= rot(time);\n    //p.yz *= rot(time);\n\n    p = pModSpherical(p, vec2(20. + 10. * thc(2., -time)));//vec2(18. + 8. * thc(2., time), \n                            //  18. + 8. * ths(2., time)));\n    //vec3 q = abs(p - vec3(2.0, 0.0, 0.0)) - 0.1;\n    //float boxes = max(q.x, max(q.y, q.z));\n    \n    float d = length(p - vec3(1.,0,0)) - 0.32;\n    \n   // p.xz *= rot(0.45 * iTime);\n    //float d = box(p, vec3(1.)) - 0.2; \n    \n    return 0.4 * d;\n}\n\nfloat scene2(vec3 p) {\n   // return box(p, vec3(0.4)) - 1.;\n    return length(p) - 1.;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(0.01, 0);\n    float d = scene(p);\n    return normalize(d - vec3(scene(p - e.xyy),scene(p - e.yxy),scene(p - e.yyx)));\n}\n\nfloat march(vec3 ro, vec3 rd, float z)\n{\n    float d = 0.;\n    vec3 p;\n    \n    for(int i = 0; i < STEPS; i++)\n    {\n        p = ro + rd * d;\n        float s = scene(p);\n        s *= z; d += s;\n        if(d > MAXDIST || s < SURFDIST) break;\n    }\n    \n    return d;\n}\n\nvec3 normal2(vec3 p) {\n    vec2 e = vec2(0.01, 0);\n    float d = scene2(p);\n    return normalize(d - vec3(scene2(p - e.xyy),scene2(p - e.yxy),scene2(p - e.yyx)));\n}\n\nfloat march2(vec3 ro, vec3 rd, float z) {\n    float d = 0.;\n    vec3 p;\n    \n    for(int i = 0; i < STEPS; i++) {\n        p = ro + rd * d;\n        float s = scene2(p);\n        s *= z; d += s;\n        if(d > MAXDIST || s < SURFDIST) break;\n    }\n    \n    return d;\n}\n\nvec3 ray(vec3 p, vec3 l, vec2 uv, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec3 pixel(vec3 p, vec3 rd)\n{\n    vec3 n = normal(p);\n    float diffs = dot(n,-rd);\n    float diff = max(diffs,0.);\n    float fres = pow(1. - abs(diffs),4.);\n    float spec = pow(max(dot(reflect(-rd,n),rd),0.),40.);\n    return vec3(1) * (diff + fres) + spec;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0,0,-5);\n    vec3 rd = ray(ro,vec3(0),uv, 1.7);\n    \n    float d0 = march(ro,rd, 1.);\n    vec3 p = ro + rd * d0;\n    vec3 n = normal(p);\n    \n    // this is very scuffed\n    float d1 = march2(0.2 * p + n*0.01, rd, -1.);\n    \n    float dens = 1.5;\n    float foff = 0.5;\n    \n    float thick = clamp(d1 / dens, 0.,1.);\n    thick = smoothstep(0., 1., thick);\n    //thick *= thick;\n    //thick = pow(4. * thick * (1.- thick), 2.);\n    \n    float blend = pow(thick, foff);\n    \n    vec3 background = vec3(1.) + dot(rd,rd) * 2.8;\n    \n    col = vec3(0.4);\n    vec3 e = vec3(1.);\n   // col /= pal(0.2 * iTime - length(p), e, e, e, vec3(0.,0.33,0.66));\n    col = pal(0.32, e, e, e, vec3(0.,0.33,0.66));\n    col = mix(background, col, blend);\n\n    //--------------------------------\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n\nfloat h21 (vec2 a, float sc) {\n    a = mod(a, sc);\n    return fract(sin(dot(a, vec2(12.9898, 78.233)))*43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}