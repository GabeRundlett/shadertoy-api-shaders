{
    "Shader": {
        "info": {
            "date": "1702467398",
            "description": "forked from https://www.shadertoy.com/view/ctffzN by  SnoopethDuckDuck\n- 3D particle simulation in the gravity field of an toroidal tetrahedron.",
            "flags": 32,
            "hasliked": 0,
            "id": "mtVBDy",
            "likes": 9,
            "name": "particles3d toroidal terahedron",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "particles",
                "tetrahedron",
                "buffer"
            ],
            "usePreview": 0,
            "username": "cyperus",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, in vec2 px )\n{\n    O = texelFetch(iChannel0, ivec2(px), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159\n#define R iResolution.xy\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nconst int\n    BUF_PARTICLE_POSITION_PREV = 0,\n    BUF_PARTICLE_POSITION = 1,\n    BUF_PARTICLE_VELOCITY = 2;\n\nconst int PARTICLES_NUM = 32;\nconst float PARTICLE_RADIUS = .03;\n\n// Hash from BlackleMori\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(vec2 a) {\n    int x = FK(a.x), y = FK(a.y);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nfloat sdSphere( vec3 p, float s ) {\n  return length(p)-s;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r ) {\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n// complex\nvec2 cmul(vec2 za,vec2 zb) {\n    return za*mat2(zb.x,-zb.y,zb.yx);\n}\n\nvec2 crot(vec2 z,float a) {\n    return cmul(vec2(cos(a),sin(a)),z);\n}\n\nvec2 cinv(vec2 z) {\n    return z*vec2(1,-1)/dot(z,z);\n}\n    \nvec2 cdiv(vec2 z, vec2 w) {\n    return cmul(z,cinv(w));\n}\n\nvec2 cTeraPolyArc2disk(vec2 z) {\n    // https://people.maths.ox.ac.uk/trefethen/lightning.html\n    const int NUM_j = 15; // poles\n    const vec2[NUM_j] rf = vec2[]\n    (vec2(-0.4534, -0.8913)\n    ,vec2( 0.5001,  0.8660)\n    ,vec2(-1.0000,  0.0001)\n    ,vec2( 0.5008, -0.8656)\n    ,vec2(-0.5452,  0.8383)\n    ,vec2( 0.1901,  0.9818)\n    ,vec2( 0.9875, -0.1576)\n    ,vec2(-0.9856, -0.1691)\n    ,vec2( 0.4224, -0.9064)\n    ,vec2( 0.5738,  0.8190)\n    ,vec2(-0.9995,  0.0311)\n    ,vec2( 0.4858,  0.8741)\n    ,vec2( 0.5760, -0.8175)\n    ,vec2(-1.0000, -0.0061)\n    ,vec2( 0.4959, -0.8684));\n    \n    const vec2[NUM_j] rw = vec2[]\n    (vec2( 0.2728,  0.0   )  \n    ,vec2( 0.0003,  0.0126)\n    ,vec2(-0.0016, -0.0121)\n    ,vec2(-0.0172,  0.0324)\n    ,vec2( 0.1417, -0.4629)\n    ,vec2(-0.4681, -0.2288)\n    ,vec2(-0.2433,  0.2822)\n    ,vec2( 0.1996, -0.0082)\n    ,vec2( 0.2884, -0.0353)\n    ,vec2(-0.0666,  0.1824)\n    ,vec2(-0.0357, -0.1136)\n    ,vec2(-0.1091,  0.0396)\n    ,vec2(-0.0831,  0.2627)\n    ,vec2( 0.0598, -0.0284)\n    ,vec2( 0.0597,  0.0760));\n\n    const vec2[NUM_j] rz = vec2[]\n    (vec2(-0.239570, -0.459171)\n    ,vec2( 0.354172,  0.611300)\n    ,vec2(-0.706487,  0.001072)\n    ,vec2( 0.356785, -0.606740)\n    ,vec2(-0.277869,  0.437059)\n    ,vec2( 0.047259,  0.573454)\n    ,vec2( 0.515842, -0.066306)\n    ,vec2(-0.591622, -0.166501)\n    ,vec2( 0.221135, -0.605193)\n    ,vec2( 0.413545,  0.494105)\n    ,vec2(-0.671697,  0.057599)\n    ,vec2( 0.309337,  0.611574)\n    ,vec2( 0.414577, -0.491758)\n    ,vec2(-0.695342, -0.019940)\n    ,vec2( 0.334074, -0.612218));\n\n    // polynomial barycentric representation\n    vec2 zn = vec2(0.); vec2 zd = vec2(0.);       \n    for(int j = 0; j<NUM_j; j++)\n    {\n        vec2 zj = cdiv( rw[j], (z-rz[j]));\n        zd += zj; // sum denominator\n        zn += cmul(rf[j], zj); // sum nominator\n    }\n    return cdiv(zn, zd);;\n}\n\n// map spherical platonic solid pyramidal-face-cells to one cell located at -z-axis.\nvec3 tetra_cells(in vec3 p, out float cell_id, out float sr) {\n\t//// tetrahedron (bounded by a cube)\n\t// cells: A,B,C,D\n\t// cell walls defined by the face_normal\n    bool nBA = dot(vec3( 1., 0.,-1.),p)>=0.;\n\tbool nCA = dot(vec3( 0., 1.,-1.),p)>=0.;\n\tbool nDA = dot(vec3( 1., 1., 0.),p)>=0.;\n\tbool nCB = dot(vec3(-1., 1., 0.),p)>=0.;\n\tbool nDB = dot(vec3( 0., 1., 1.),p)>=0.;\n\tbool nDC = dot(vec3( 1., 0., 1.),p)>=0.;\n    \n    // map n-cells to 1-cell by rotation\n    // rotation angles\n    const float a45 = PI/4.;             // 45° \n    const float a35 = atan(sqrt(8.))/2.; // 35.264°\n    const float a30 = PI/6.;             // 30°\n    \n    const vec2 ei_a45 = vec2(cos(a45), sin(a45));\n    const vec2 ei_a35 = vec2(cos(a35), sin(a35));\n    const vec2 ei_a30 = vec2(cos(a30), sin(a30));\n    \n    vec2 ei_y = ei_a45;   \n    vec2 ei_x = ei_a35;\n    vec2 ei_z = ei_a30;\n    // symmetries\n    if(nBA && nCA && nDA) //inside cell A\n\t{\n\t\tcell_id =  0.;\n        ei_x.y *= -1.; // a = -35.264°\n\t}\n\telse if( nCB && nDB && !nBA) //inside cell B\n\t{\n\t\tcell_id =  1.;\n\t\tei_y   *= -1.; // a = -3.*45°\n        ei_x.y *= -1.; // a = -35.264°\n\t}\n\telse if(!nCA && !nCB && nDC) //inside cell C\n\t{\n\t\tcell_id =  2.;\n\t\tei_y.x *= -1.; // a = +3.*45°\n\t\tei_z.y *= -1.; // a = -30°\n\t}\n\telse if(!nDA && !nDB && !nDC)//inside cell D\n\t{\n\t\tcell_id =  3.;\n\t\tei_y.y *= -1.; // a = -45°\n\t\tei_z.y *= -1.; // a = -30°\n\t}\n\tp.zx = cmul(p.zx,ei_y); // y-axis\n\tp.yz = cmul(p.yz,ei_x); // x-axis\n\tp.xy = cmul(p.xy,ei_z); // z-axis\n\t// 3 edges per face, non cyclic\n\tsr = 3.;\n    return p;\n}\n\n// stereographic projection \nfloat sig(float x) {\n    return x < 0. ? -1. : +1.; \n}\n\nfloat dist(float x, float e) {\n    // e in [0., +inf]\n    return sign(x)*abs( pow(abs(x), abs(e)) );\n}\n\nvec3 sp(vec3 zsr) {\n    vec2 z = zsr.xy; float sr = zsr.z;\n    // stereopraphic projection (complex plane to unit sphere)\n    float zz = dot(z,z); vec3 pn;\n    if (bool(sig(sr))) {// north pole\n        pn = vec3(2. * z.x,  2. * z.y, -1. + zz);\n        }\n    else { // south pol\n        z = cinv(z);\n        pn = vec3(2. * z.x, -2. * z.y,  1. - zz);\n        }\n    pn /= 1.+zz;\n    return pn;\n}\n\n// data from sdf\nvec4 mat = vec4(0);\n\nfloat map1(in vec3 p, in float time) {\n    p.xy *= rot(.025*time);\n    //// sdf's\n    float rxy = 0., au = 0.0, av = 0.0;\n    float cell_id = 0., sr = 0.;\n    vec2 z = vec2(0.);\n           \n    //// map platonic solid cells to one cell\n    vec3 pn = normalize(p); \n  \n    // projection from n cells to 1 cell. \n    pn = tetra_cells(pn, cell_id, sr);\n    // invers stereographic projection\n    z = pn.xy/(1.-pn.z);\n    // complex plane   \n    z = cTeraPolyArc2disk(z);\n\n    /// r-polygon-distribution\n    vec2 e = vec2(sqrt(2.), 0.5);\n    float en = 1.+( (8.<0.?e.x:e.y)-1. )*smoothstep(1.,5., abs(8.));        \n    float r = length(z); vec2 zn = z/r;\n    z = dist(r, en) * zn;   \n\n    /// stereographic projection    \n    pn = sp(vec3(z,sr));\n\n    /// scale radius\n    p = length(p) * pn;\n    \n    float fracu = 1.0;\n    ////fractal level 0: Torus\n    au = atan(p.y, p.x);\n    rxy = length(p.xy); \n    z = vec2(rxy, p.z);\n    z = cmul(z,z); z.x -= 8.;\n\n    // distance estimation\n    float d = log(length(z));\n    \n    // torus complex plane, torus angle_u, platonic solid cell_id\n    mat.xy = z; // mat.z = au *fracu, mat.w = cell_id;\n    return d;\n}\n\n// color\nvec3 h2rgb(float h) {\n    vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvec3 grad1(vec3 p, float time) {\n\tfloat d = map1(p,time);\n    vec2 e = vec2(.001, 0);\n    vec3 g = d - vec3(\n        map1(p-e.xyy, time),\n        map1(p-e.yxy, time),\n        map1(p-e.yyx, time));    \n    return g;\n}\n\nvoid mainImage( out vec4 O, in vec2 px )\n{\n    //float dt = iTimeDelta; // less jitter, but not reproducible!\n    float dt = 1./50.;\n    ivec2 px_id = ivec2(px);\n    // init\n    if (iFrame < 1) {\n        vec3 p0 = vec3(hash(px), hash(px+.1), hash(px+.2));        \n        if (px_id.y == BUF_PARTICLE_POSITION)     \n            O.xyz = 3. * p0;\n            \n        if (px_id.y == BUF_PARTICLE_VELOCITY)\n            O.xyz = p0.zxy;\n    }\n    // update\n    else {\n        // get previous particle state\n        vec3 p = texelFetch(iChannel0, ivec2(px.x, BUF_PARTICLE_POSITION), 0).xyz;\n        vec3 v = texelFetch(iChannel0, ivec2(px.x, BUF_PARTICLE_VELOCITY), 0).xyz;\n        \n        // get gradientfield at the position of the particle \n        vec3 g = grad1(p, iTime);\n        vec3 n = normalize(g);\n        \n        //if (px_id.y == BUF_PARTICLE_POSITION_PREV) {\n        //    O.xyz = p;\n        //}        \n        if (px_id.y == BUF_PARTICLE_POSITION) {\n            // new position particle\n            p = v * dt + p;\n            \n            // clamp to sphere      \n            //const float r_sphere = 5.;\n            //float l = length(p);\n            //p *= l > r_sphere ? r_sphere / l : 1.;            \n            \n            O.xyz = p;\n        } \n        if (px_id.y == BUF_PARTICLE_VELOCITY) {\n            // collision particle\n            float collision_len = map1(p, iTime) - 4.* PARTICLE_RADIUS;\n            if (collision_len < 0.) {\n                vec3 v_n = dot(v,n)*n;\n                vec3 v_t = v-v_n;\n                v = 0.99*v_n + 1.001*v_t; // damping, amplifying, accumulate energy to escape the surface!\n                v = reflect(v,n);          // bound to surface\n            }    \n            else {\n                // ambient gradientfield --> velocity\n                g *= 4.* 50.* dt;\n                \n                // new particle velocity\n                v = v-g;\n                \n                v.xy = vec2(v.x - g.y\n                           ,v.y + g.x);\n                \n                v.yz = vec2(v.y - g.z\n                           ,v.z + g.y);\n                \n                v *= 0.99; // some drag while freeflying!\n            }\n            O.xyz = v;\n        }\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define EPS .001\n\nvec3 ro;\nvec3 rd;\n\nvec3 particle_coord[PARTICLES_NUM];\nvec3 particle_coord_prev[PARTICLES_NUM];\n\nvoid setOri() {\n    vec2 m = iMouse.xy / R;\n    ro = vec3(0, 0, -8);\n    ro.yz *= rot(-m.y* PI +1.);\n    ro.xz *= rot(-m.x*2.* PI );\n}\n\nvoid setDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n         r = normalize(cross(vec3(0,1,0), f)),\n         u = cross(f,r),\n         c = f*z,\n         i = c + uv.x*r + uv.y*u;\n    rd = normalize(i);\n}\n\nvec2 map(vec3 p) {\n    // max dist\n    float d = 1e5;\n    \n    // geometry    \n    d = min(d, map1(p, iTime)); float mat = 0.;\n    \n    // particles\n    for (int i = 0; i < PARTICLES_NUM; i++) {\n        //float dp = sdCapsule(p, particle_coord[i], particle_coord_prev[i], PARTICLE_RADIUS);\n        float dp = sdSphere( p - particle_coord[i], PARTICLE_RADIUS);\n        if (dp < d) {d = dp; mat = float(i)+1.;}\n    }           \n    return vec2(d, mat); // distance, 1.+particle_id\n}\n\nvec3 march(vec3 ro, vec3 rd, float z) {\t\n    float d = 0.;\n    int steps = 0;\n    float mat = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * d;\n        vec2 m = map(p);\n        m.x *= .9 + .1 * hash(vec2(p.y, hash(p.xz)));\n        if (abs(m.x) < EPS || d > MAX_DIST) {\n            steps = i + 1;\n            mat = m.y; // particle_id\n            break;\n        }\n        d += m.x * 0.25;\n    }   \n    return vec3(min(d, MAX_DIST), steps, mat);\n}\n\nvec3 norm(vec3 p) {\n\tfloat d = map(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x);   \n    return normalize(n);\n}\n\nvoid mainImage( out vec4 O, in vec2 px )\n{\n    vec2 uv = (px - 0.5 * R) / R.y;\n\t\n    setOri();\n    setDir(uv, ro, vec3(0), 1.);\n    \n    vec3 col = vec3(0);\n\n    for (int i = 0; i < PARTICLES_NUM; i++) {\n        particle_coord[i]      = texelFetch(iChannel0, ivec2(i, BUF_PARTICLE_POSITION), 0).xyz;\n        //particle_coord_prev[i] = texelFetch(iChannel0, ivec2(i, BUF_PARTICLE_POSITION_PREV), 0).xyz;\n    }  \n    \n    vec3 m = march(ro, rd, 1.);  \n    float d = m.x;    \n    vec3 p = ro + rd * d;\n\n    if (d<MAX_DIST) {        \n        vec3 n = norm(p); // normal\n        col = m.z == 0. ? vec3(0.5,0,0) \n            : m.z <= float(PARTICLES_NUM) ? h2rgb( (m.z-1.)/float(PARTICLES_NUM) )\n            : vec3(1,1,0); // TEST: color \n        \n         // fresnel\n         col += pow(clamp(1. - dot(n, -rd), 0., 1.), 5.) *vec3(1.); // from inside to conture\n    }  \n    // glow\n    col = max(col, vec3(1.-1./cosh(.01*m.y)));  // from inside && outside to conture\n    \n    \n    // gamma\n    col = sqrt(col);\n    \n    // motion blur (particle ghost tail)\n    #if 0\n    O = .94 * texelFetch(iChannel1, ivec2(px), 0);\n    O = max(O, vec4(col,1));\n    \n    #else\n    O = vec4(col,1);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}