{
    "Shader": {
        "info": {
            "date": "1639242713",
            "description": "Drag to rotate the sphere. However, Nyan will be back by the shortest route!",
            "flags": 32,
            "hasliked": 0,
            "id": "ftdSD7",
            "likes": 3,
            "name": "Nyan will be back. - episode 1",
            "published": 3,
            "tags": [
                "math",
                "rotation"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 218
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2021 IWBTShyGuy\n\nmat3 rotMatrix() {\n    vec4 a = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec4 b = texelFetch(iChannel0, ivec2(1, 0), 0);\n    vec4 c = texelFetch(iChannel0, ivec2(2, 0), 0);\n    return mat3(\n        a[0], a[1], a[2],\n        a[3], b[0], b[1],\n        b[2], b[3], c[0]\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    mat3 mat = rotMatrix();\n    vec3 dir = mat * vec3(0, 0, -1);\n    Camera camera = newCamera(\n        -3.0 * dir,\n        dir,\n        mat * vec3(0, 1, 0),\n        PI / 4.0,\n        iResolution.x / iResolution.y\n    );\n    Ray ray = cameraRay(camera, fragCoord / iResolution.xy);\n\n    float midDist = -dot(ray.origin, ray.direction);\n    float r0 = dot(ray.origin, ray.origin) - midDist * midDist;\n    if (r0 > 1.0) {\n        fragColor = vec4(0, 0, 0, 1);\n        return;\n    }\n    float diff = sqrt(1.0 - r0 * r0);\n    vec3 p = ray.origin + (midDist - diff) * ray.direction;\n    vec3 q = ray.origin + (midDist + diff) * ray.direction;\n\n    vec3 col = vec3(-dot(ray.direction, p));\n    if (p.z > 0.0) {\n        vec2 uv = clamp(p.xy, -1.0, 1.0);\n        uv = uv + 0.5;\n        uv = clamp(uv, 0.0, 0.99);\n        uv.x /= 6.0;\n        col *= texture(iChannel1, uv).xyz;\n    }\n    if (q.z > 0.0) {\n        vec2 uv = clamp(q.xy, -1.0, 1.0);\n        uv = uv + 0.5;\n        uv = clamp(uv, 0.0, 0.99);\n        uv.x /= 6.0;\n        col *= (0.8 + 0.2 * texture(iChannel1, uv).xyz);\n    }\n\n    fragColor = vec4(pow(col, vec3(0.4545)), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.141592653;\n\nstruct Camera {\n    vec3 position;\n    vec3 direction;\n    vec3 up_direction; // not require dot(direction, up_direction) == 0\n    float fov;\n    float aspect; // x / y\n};\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nCamera newCamera(vec3 position, vec3 direction, vec3 up_direction, float fov, float aspect) {\n    Camera camera;\n    camera.position = position;\n    camera.direction = direction;\n    camera.up_direction = up_direction;\n    camera.fov = fov;\n    camera.aspect = aspect;\n    return camera;\n}\n\n// perspective camera ray, uv = fragCoord / iResolution.xy\n// cf: https://qiita.com/aa_debdeb/items/301dfc54788f1219b554\nRay cameraRay(in Camera camera, in vec2 uv) {\n    uv = uv * 2.0 - 1.0;\n    float radian = camera.fov;\n    float h = tan(radian * 0.5);\n    float w = h * camera.aspect;\n    vec3 right = normalize(cross(camera.direction, camera.up_direction));\n    vec3 up = normalize(cross(right, camera.direction));\n    vec3 direction = normalize(right * w * uv.x + up * h * uv.y + camera.direction);\n    Ray ray;\n    ray.origin = camera.position;\n    ray.direction = direction;\n    return ray;\n}\n\nmat3 rot(vec3 axis, float angle) {\n    return mat3(\n        axis[0] * axis[0] * (1.0 - cos(angle)) + cos(angle),\n        axis[0] * axis[1] * (1.0 - cos(angle)) + axis[2] * sin(angle),\n        axis[0] * axis[2] * (1.0 - cos(angle)) - axis[1] * sin(angle),\n        axis[0] * axis[1] * (1.0 - cos(angle)) - axis[2] * sin(angle),\n        axis[1] * axis[1] * (1.0 - cos(angle)) + cos(angle),\n        axis[1] * axis[2] * (1.0 - cos(angle)) + axis[0] * sin(angle),\n        axis[0] * axis[2] * (1.0 - cos(angle)) + axis[1] * sin(angle),\n        axis[1] * axis[2] * (1.0 - cos(angle)) - axis[0] * sin(angle),\n        axis[2] * axis[2] * (1.0 - cos(angle)) + cos(angle)\n    );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// The MIT License\n// Copyright © 2021 IWBTShyGuy\n\n// get the current matrix from texture\nmat3 rotMatrix() {\n    vec4 a = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec4 b = texelFetch(iChannel0, ivec2(1, 0), 0);\n    vec4 c = texelFetch(iChannel0, ivec2(2, 0), 0);\n    return mat3(\n        a[0], a[1], a[2],\n        a[3], b[0], b[1],\n        b[2], b[3], c[0]\n    );\n}\n\nvec4 matrixColor(in mat3 m, in int idx) {\n    switch (idx) {\n        case 0:\n            return vec4(m[0][0], m[0][1], m[0][2], m[1][0]);\n        case 1:\n            return vec4(m[1][1], m[1][2], m[2][0], m[2][1]);\n        case 2:\n            return vec4(m[2][2], 0, 0, 0);\n        default:\n            return vec4(0);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iCoord = ivec2(fragCoord);\n    if (iCoord.y != 0 || iCoord.x > 3) {\n        fragColor = vec4(0);\n        return;\n    } else if (iCoord.x == 3) {\n        fragColor = iMouse;\n        return;\n    } else if (iFrame == 0) {\n        mat3 mat = rot(normalize(vec3(0, 1, 1)), 1.0);\n        fragColor = matrixColor(mat, iCoord.x);\n        return;\n    }\n\n    mat3 mat = rotMatrix();\n    vec4 prevMouse = texelFetch(iChannel0, ivec2(3, 0), 0);\n\n    if (prevMouse.z > 0.0) {\n        // rotation by drag\n        vec2 diff = iMouse.xy - prevMouse.xy;\n        float theta = length(diff);\n        if (theta < 0.1) {\n            fragColor = texelFetch(iChannel0, iCoord, 0);\n            return;\n        }\n        diff /= theta;\n        theta /= (iResolution.y * 0.5);\n        vec3 axis = -diff.y * mat[0] + diff.x * mat[1];\n        mat = rot(axis, -theta) * mat;\n    } else if (\n        // rotation matrix is not identity\n        abs(mat[0][0] - 1.0) >= 1.0e-4 ||\n        abs(mat[1][1] - 1.0) >= 1.0e-4 ||\n        abs(mat[2][2] - 1.0) >= 1.0e-4\n    ) {\n        // calculate axis\n        mat3 m = transpose(mat - mat3(1));\n        vec3 axis_0 = cross(m[0], m[1]);\n        vec3 axis_1 = cross(m[1], m[2]);\n        vec3 axis_2 = cross(m[2], m[0]);\n        vec3 axis = length(axis_0) > length(axis_1) ? axis_0 : axis_1;\n        axis = length(axis) > length(axis_2) ? axis : axis_2;\n        axis = normalize(axis);\n        vec3 axis2 = axis * axis;\n\n        // cosine of angle\n        float co;\n        if (axis2.x < 0.33333) \n            co = (mat[0][0] - axis2.x) / (1.0 - axis2.x);\n        else if (axis2.y < 0.33333) \n            co = (mat[1][1] - axis2.y) / (1.0 - axis2.y);\n        else\n            co = (mat[2][2] - axis2.z) / (1.0 - axis2.z);\n        \n        // sine of angle\n        float si;\n        if (axis2.x > 0.33333) \n            si = (axis.y * axis.z * (1.0 - co) - mat[2][1]) / axis.x;\n        else if (axis2.y > 0.33333) \n            si = (axis.z * axis.x * (1.0 - co) - mat[0][2]) / axis.y;\n        else\n            si = (axis.x * axis.y * (1.0 - co) - mat[1][0]) / axis.z;\n        \n        // Turn slightly in the opposite direction.\n        float theta = acos(clamp(co, -1.0, 1.0)) * sign(si);\n        mat = rot(axis, -theta * 0.05) * mat;\n    }\n\n    // It should be orthogonalized because of the error accumulation.\n    mat[0] = normalize(mat[0]);\n    mat[1] = mat[1] - dot(mat[0], mat[1]) * mat[0];\n    mat[1] = normalize(mat[1]);\n    mat[2] = mat[2] - dot(mat[0], mat[2]) * mat[0] - dot(mat[1], mat[2]) * mat[1];\n    mat[2] = normalize(mat[2]);\n\n    // give the current matrix to texture\n    fragColor = matrixColor(mat, iCoord.x);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}