{
    "Shader": {
        "info": {
            "date": "1695828273",
            "description": "An effort to learn different functions in GLSL. Objective: Find a way to render more than 10 colors for circles without another for loop.\n\n3D camera and original Boheh effect by Martijn Steinrucken aka BigWings : https://www.shadertoy.com/view/MdfBRX\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DllBzX",
            "likes": 1,
            "name": "lights_carousel",
            "published": 3,
            "tags": [
                "3d",
                "bokeh"
            ],
            "usePreview": 0,
            "username": "bronnie",
            "viewed": 150
        },
        "renderpass": [
            {
                "code": "#define S(a, b, t) smoothstep(a,b,t)\n\nfloat rand(float co1, float co2){\n    return fract(sin(dot(vec2(co1,co2), vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n//float rr(float r){\n//    return rand(0., r);\n//}\n\nstruct ray {\n    vec3 o, d;\n};\n\nray GetRay(vec2 uv, vec3 camPos, vec3 lookAt, float zoom) {\n    ray a;\n    a.o = camPos;\n\n    // r and u of pixel on display plane\n    vec3 f = normalize(lookAt - camPos);\n    vec3 r = normalize(cross(vec3(0., 1., 0.), f));\n    vec3 u = cross(f, r);\n    \n    // ray eye -> pixel on plane\n    vec3 c = a.o + zoom*f;\n    vec3 i = c + uv.x*r + uv.y*u;\n    \n    a.d = normalize(i - a.o);\n    \n    return a;\n}\n\n// find closest point on ray to another point outside ray\nvec3 ClosestPoint(ray r, vec3 p) {\n    return r.o + max(0., dot(p - r.o, r.d)) * r.d;\n}\n\n// distance from ray to point\nfloat DistRay(ray r, vec3 p) {\n    return length(p - ClosestPoint(r, p));\n}\n\nvec3 Bokeh(ray r, vec3 p, float size, float blur, vec3 col) {\n    float d = DistRay(r, p);\n    \n    float c = S(size, size*(1.-blur), d);\n    c *= mix(.6, 1., S(size*.8, size, d)); // mix applies operation mainly on size>.7\n    \n    col *= c;\n\n    return col;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 camPos = vec3(0., .2, 0.);\n    //vec3 camPos = vec3(.5 + 2*sin(iTime) ,1.5, .5 + 2*cos(iTime));\n    vec3 lookAt = vec3(.0, .2, 1.);\n    float zoom = 1.;\n    \n    ray r = GetRay(uv, camPos, lookAt, zoom);\n    \n    // draw things\n    float t = iTime*.1;\n    float s = 1./10.;\n    vec3 m = vec3(.0);   // sum up to frame\n    \n    for(float i = .1; i<1.1; i+=s) {\n        float ti = fract(t+i);\n        //float ti = t+i;\n        \n        // loading circle:\n        //vec3 p = vec3(2.*sin(6.3*i), 2.*cos(6.3*i), 20.-100.*ti*exp(-ti*6.));\n        \n        // accelerating\n        vec3 p = vec3(  sin(6.3*i)*.1*exp(3.*ti), \n                        cos(6.3*i)*.1*exp(3.*ti), \n                        (60.)/exp(ti*5.));\n        \n        //orange col: vec3(1.0, .7, .25))\n        //m += Bokeh(r, p, .6, .1, vec3(1.0, .7, .25));\n        \n        m += Bokeh(r, p, .6, .1, vec3(rand(2.,8.*i), rand(i,2.*i), rand(2.*i,1.*i))); \n        m *= 1.02;\n    }\n    \n    \n    \n    //fragColor = vec4(c);\n    fragColor = vec4(m, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}