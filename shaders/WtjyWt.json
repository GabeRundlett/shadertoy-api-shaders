{
    "Shader": {
        "info": {
            "date": "1595718461",
            "description": "Practicing fractal geometry.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtjyWt",
            "likes": 3,
            "name": "M_Sponge",
            "published": 3,
            "tags": [
                "fractal",
                "raymarch",
                "menger",
                "sponge"
            ],
            "usePreview": 0,
            "username": "kstyler",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a){\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nfloat box( vec3 p, vec3 b ) {\n     vec3 d = abs(p) - b;\n     return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat cros(vec3 p){\n    return min(box(p.xyy,vec3(1,1,9999)),min(box(p.xxz,vec3(1,9999,1)),box(p.yyz,vec3(9999,1,1))));\n}\n\nfloat sponge(vec3 p, float size){\n    float res = box(p,vec3(size));\n    float c = 2.*size;\n    float crSiz =3.; \n    for(int i = 0; i < 4; i++){\n      vec3 q = mod(p+0.5*c,c)-0.5*c;\n      float subt = cros(q*(crSiz/size))/(crSiz/size);  \n      res=max(-subt,res);\n      c/=3.;\n      crSiz*=3.;\n    }\n    return res;\n}\nfloat map(vec3 p){\n    return sponge(p,1.7);\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0,0.01);\n    return normalize(vec3(map(p+e.yxx)-map(p-e.yxx),\n                map(p+e.xyx)-map(p-e.xyx),\n                map(p+e.xxy)-map(p-e.xxy))); \n}\n\nvec3 addLight(vec3 lightCol, vec3 lightdir,vec3 rd){\n    vec3 light = vec3(0.);\n    float li = max(dot(lightdir,rd),0.);\n    light+=pow(lightCol,vec3(2))*pow(li,2.);\n    light+=lightCol*pow(li,200.9);\n    return light;\n}\n\nvec3 skyColor(vec3 rd){\n    vec3 outLight = vec3(0.125);\n    outLight+=addLight(10.*vec3(0.7,0.2,0.3),normalize(-vec3(0.2,0.05,0.2)),rd);\n    outLight+=addLight(10.*vec3(0.1,0.3,0.7),normalize(-vec3(-0.2,0.05,-0.2)),rd);\n    return outLight;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.x;\n    vec3 ro = vec3(0.,0.,-11.);\n    vec3 rd = normalize(vec3(uv,1));\n    rd.xy*=rot(iTime/8.);\n    ro.xz*=rot(iTime/8.);\n    rd.xz*=rot(iTime/8.);   \n    vec3 color = vec3(0);\n    vec3 accum = vec3(0);\n    float tot = 0.;\n    for(int i = 0; i<80;i++){\n        vec3 p = ro+rd*tot;\n        float dst = map(p);\n        tot+=dst;\n        vec3 n = normal(p);\n        if(dst>0.01){\n        \tcolor = skyColor(rd)/2.;\n        }\n        else{    \n        \tcolor  = vec3(tot/1000.);    \n        }\n        accum+=color*0.04;\n    }\n    fragColor = vec4(1.-(accum),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}