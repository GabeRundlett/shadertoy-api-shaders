{
    "Shader": {
        "info": {
            "date": "1724956600",
            "description": "enable gridlines (line 54 & 55) to reveal that the piece never moves :)",
            "flags": 0,
            "hasliked": 0,
            "id": "lf2fRh",
            "likes": 2,
            "name": "falling tetromino illusion",
            "published": 3,
            "tags": [
                "2d",
                "illusion",
                "tetris",
                "tetromino"
            ],
            "usePreview": 0,
            "username": "leiaa",
            "viewed": 87
        },
        "renderpass": [
            {
                "code": "float remap(float a, float a1, float a2, float b1, float b2){\n    return (a-a1)/(a2-a1)*(b2-b1)+b1;\n}\n\n//CHANGING COLOUR FOR Z-TETROMINO\nfloat c(float iTime, float os){\n    return remap(abs(1.-2.*fract(iTime+os)), 0., 1., .2, .9);\n}\n\n//INDIVIDUAL SQUARES\nfloat sq(vec2 uv, vec2 id, float os){\n    vec2 center = vec2(0.5+id.x, 0.5+id.y+os);\n    vec2 d = abs(uv - center) - vec2(.5);\n\n    float thickness = 0.06;\n    float outline = max(d.x, d.y);\n    \n    float s = smoothstep(0.0, 0.2*thickness, thickness - abs(outline));\n    \n    if(abs(outline) > 0.059)\n        s += exp(-17.0 * abs(outline));\n        \n    return s;\n}\n\n//Z-TETROMINO\nfloat z(vec2 uv, vec2 id, float os){\n    float shape = 0.0;\n    \n    shape = max(shape, sq(uv, id, os));\n    shape = max(shape, sq(uv, vec2(id.x + 1.0, id.y), os));\n    shape = max(shape, sq(uv, vec2(id.x + 1.0, id.y - 1.0), os));\n    shape = max(shape, sq(uv, vec2(id.x + 2.0, id.y - 1.0), os));\n    \n    return shape;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //SCALING\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv *= 5.68;\n    uv.y -= .21;\n    \n    //BACKGROUND COLOUR\n    vec3 col = vec3(.2, .1, .7);\n    col.rb += .15*(uv.y);\n    \n    //GRID\n    vec2 guv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    //GRIDLINES\n    //if(guv.x > .49 || guv.x < -.49 || guv.y > .49 || guv.y < -.49)\n        //col = vec3(.6);\n    \n    //FALLING Z-TETROMINO\n    float za = z(uv, vec2(-2., 1.), 0.);\n    float zb = z(uv, vec2(-2., 1.), 0.02);\n    float zc = z(uv, vec2(-2., 1.), -0.02); \n    \n    col = mix(col, vec3(c(iTime, -.3)), zc);\n    col = mix(col, vec3(c(iTime, .3)), zb);\n    col = mix(col, vec3(c(iTime, 0.)), za);\n    \n    //OTHER SQUARES\n    vec2 positions[16] = vec2[](\n    vec2(-2., -3.),\n    vec2(-3., -3.),\n    vec2(-4., -3.),\n    vec2(-5., -3.),\n    vec2(-5., -2.),\n    vec2(-4., -2.),\n    vec2(-3., -2.),\n    vec2(-4., -1.),\n    vec2(1., -3.),\n    vec2(1., -2.),\n    vec2(2., -3.),\n    vec2(3., -3.),\n    vec2(4., -3.),\n    vec2(4., -1.),\n    vec2(4., -2.),\n    vec2(3., -2.)\n    );\n\n\n    for (int i = 0; i < 16; i++) {\n        float s = sq(uv, positions[i], 0.);\n        col = mix(col, vec3(1.), s);\n    }\n    \n    //OUTPUT\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}