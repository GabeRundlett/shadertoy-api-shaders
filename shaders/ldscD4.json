{
    "Shader": {
        "info": {
            "date": "1488396215",
            "description": "Squarez",
            "flags": 0,
            "hasliked": 0,
            "id": "ldscD4",
            "likes": 6,
            "name": "Squarez",
            "published": 3,
            "tags": [
                "squarez"
            ],
            "usePreview": 0,
            "username": "voz",
            "viewed": 557
        },
        "renderpass": [
            {
                "code": "//Do not redistribute.\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n//-----------------UTILITY FUNCTIONS--------------\n\nfloat saw(float x)\n{\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\n\nvec4 saw(vec4 x)\n{\n    return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w));\n}\n\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((saw(float(__LINE__)*PI*GR*E))*iTime+1000.0)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))\n#define clip(x) (smoothstep(0.25, .75, x))\n#define TIMES_DETAILED (1.0)\n#define angle(uv) (atan(uv.y, uv.x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n\n#define flux(x) (vec3(cos(x*2.0*PI),cos(4.0*PI/3.0+x*2.0*PI),cos(2.0*PI/3.0+x*2.0*PI))*.5+.5)\n#define circle(x) (vec2(cos((x)*2.0*PI),sin(2.0*PI*(x))))\n\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n#define ZIN (vec3(0.0, 0.0, 1.0))\n\n#define MIN_DIM (min(iResolution.x, iResolution.y))\n\nvec2 remap(vec2 uv, vec4 start, float r1, vec4 end, float r2)\n{\n    \n    vec3 c1 = vec3(start.xy, 0.0);\n    vec3 d1 = vec3(start.zw, 0.0);\n    \n    vec3 c2 = vec3(end.xy, 0.0);\n    vec3 d2 = vec3(end.zw, 0.0);    \n\n    uv = (rotatePoint(vec3((uv+c1.xy)*d1.xy, 0.0), ZIN, r1).xy);\n    uv = (rotatePoint(vec3((uv+c2.xy)*d2.xy, 0.0), ZIN, r2).xy);\n    \n    \n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float scale = 1.0;//4.0*(sin(time)+GR);\n    \n    float aspect = iResolution.x/iResolution.y;\n    uv *= 2.0;\n    uv -= 1.0;\n    \n    vec2 uv0 = uv;\n    \n    const int max_i = 4;\n    \n    float sum = 0.0;\n\tvec2 detail = vec2(1.0);\n    vec2 last = uv;\n    \n    for(int i = 0 ; i < max_i; i++)\n    {\n        \n        float j = float(i)/float(max_i);\n        sum += smoothstep(0.0, 1.0/PI, 1.0-abs(uv.y-saw(uv.x*(1.0+sin(time)))))*sqrt(detail.x*detail.y);\n     \n        \n        vec4 start = vec4(0.0, 0.0, 1.0, 1.0);\n        vec4 end = vec4(circle(j), (2.0/GR-j/GR), 2.0/GR-j/GR);\n        \n        \n        float theta1 = time;\n        float theta2 = theta1+j;\n        vec2 save = uv;\n        detail *= abs(cos(uv*2.0*PI));\n        uv = remap(sin(uv*2.0*PI), start, theta1, end, theta2);\n        \n        last =save;\n    }\n    \n    float map = sum/float(max_i)*5.0;\n    float b = smoothstep(0.0, 1.0/PI/E, saw(map));\n    float w = 1.0-smoothstep(0.0, 1.0/PI/E, saw(map+time));\n\tfragColor = vec4(saw(uv), 0.0, 1.0);\n\tfragColor = vec4(flux(map)*b+w, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}