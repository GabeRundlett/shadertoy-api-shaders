{
    "Shader": {
        "info": {
            "date": "1601434517",
            "description": "Dirac equation visualized with a bunch of toruses\nA Quaternion is the minimal representation of a 3D rotation matrix.\nI asked my professor if spinors were quaternions he said \"No!\" But then I met Ken Wharton and he told me that they're one and the same!!",
            "flags": 32,
            "hasliked": 0,
            "id": "Wsdyzf",
            "likes": 21,
            "name": "Spinor = Quaternion",
            "published": 3,
            "tags": [
                "wave",
                "quantum"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 817
        },
        "renderpass": [
            {
                "code": "Main {\n\tQ = A(U);\n    vec4 \n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0));\n\tQ = mix(Q,0.25*(n+e+s+w),.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texelFetch(iChannel0,ivec2(U),0)\n#define B(U) texture(iChannel1,(U)/R)\n#define C(U) texture(iChannel2,(U)/R)\n#define D(U) texture(iChannel3,(U)/R)\n#define Neighborhood vec4 n = A(U+vec2(0,1)), e = A(U+vec2(1,0)), s = A(U-vec2(0,1)), w = A(U-vec2(1,0)), m = 0.25*(n+e+s+w);\n#define Neighborhood2 vec4 u = B(U+vec2(0,1)), r = B(U+vec2(1,0)), d = B(U-vec2(0,1)), l = B(U-vec2(1,0)), m2 = 0.25*(u+r+d+l);\n\n#define Main void mainImage(out vec4 Q, vec2 U)\n#define dt .05\n#define ei(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define mass .1\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "Main {\n\tQ = A(U);\n    Neighborhood2;\n    \n    vec4 dy = dt*0.5*(u-d);\n    vec4 dx = dt*0.5*(r-l);\n    vec4 dz = vec4(0);\n    \n    Q.x +=  dx.w-dy.z+dz.y;\n    Q.y += -dx.z-dy.w-dz.x;\n    Q.z +=  dx.y+dy.x-dz.w;\n    Q.w += -dx.x+dy.y+dz.z;\n    Q.xy *= ei(-dt*mass);\n    Q.zw *= ei(-dt*mass);\n    float h = .015*dot(U-0.5*R,U-0.5*R);\n    if (iFrame < 1) {Q = .3*vec4(sin(h),cos(h),cos(h),cos(h));}\n    \n    vec2 v = abs(U-0.5*R);\n    if (max(v.x,v.y)>30.) Q *= 0.;\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Main {\n\tQ = A(U);\n    Neighborhood2;\n    \n     vec4 dy = dt*0.5*(u-d);\n    vec4 dx = dt*0.5*(r-l);\n    vec4 dz = vec4(0);\n    \n    Q.x -=  dx.w-dy.z+dz.y;\n    Q.y -= -dx.z-dy.w-dz.x;\n    Q.z -=  dx.y+dy.x-dz.w;\n    Q.w -= -dx.x+dy.y+dz.z;\n    Q.xy *= ei(dt*mass);\n    Q.zw *= ei(dt*mass);\n    \n    if (iFrame < 1) Q = vec4(0);\n    \n    vec2 v = abs(U-0.5*R);\n    if (max(v.x,v.y)>30.) Q *= 0.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fork of \"Dirac Equation\" by wyatt. https://shadertoy.com/view/WdBBR3\n// 2020-09-29 22:55:11\nmat3 qm (vec4 q) { \n    return mat3( 1.-2.*q.y*q.y-2.*q.z*q.z, 2.*q.x*q.y+2.*q.w*q.z, 2.*q.x*q.z-2.*q.w*q.y, 2.*q.x*q.y-2.*q.w*q.z, 1.-2.*q.x*q.x-2.*q.z*q.z, 2.*q.y*q.z+2.*q.w*q.x, 2.*q.x*q.z+2.*q.w*q.y, 2.*q.y*q.z-2.*q.w*q.x, 1.-2.*q.x*q.x-2.*q.y*q.y ); \n}\nfloat cbrt (float a) {\n        return sign(a)*exp(log(abs(a))/3.);\n    }\n    vec2 cbrt (vec2 a) {\n        return vec2(cbrt(a.x),cbrt(a.y));\n    }\n    vec2 cbrti (vec2 v) {\n        float a = length(v);\n        a = exp(log(a)/3.);\n        float theta = atan(v.y/v.x)/3.;\n        return a*vec2(cos(theta), sin(theta));\n    }\n    float cubic (float b, float c, float d) {\n        float p = -b/3.;\n        float q = p*p*p + b*c/6. - 0.5*d;\n        float r = c/3.;\n        float s = r-p*p;\n        float u = q*q + s*s*s;\n        if (u < 0.) {\n            vec2 t = vec2(0., sqrt(-u));\n            vec2 Q = vec2(q, 0.);\n            return (cbrti(Q + t) + cbrti(Q - t)).x + p; \n        } else {\n            float t = sqrt(u);\n            return cbrt(q + t) + cbrt(q - t) + p; \n        }\n    }\n\tbvec4 solve_quartic (in vec4 coe, out vec4 roots) {\n        //https://en.wikipedia.org/wiki/Quartic_function#Ferrari.27s_solution\n        float b = coe.x;float c = coe.y; float d = coe.z; float e = coe.w;\n        float p = c - 3.*b*b/8.;\n        float q = 0.125*b*b*b - 0.5*b*c + d;\n        float r = (-3.*b*b*b*b + 256.*e - 64.*b*d + 16.*b*b*c)/256.;\n        float m = cubic(p, 0.25*p*p - r, -0.125*q*q);\n        if (m<=0.) return bvec4(false);\n        float A = -0.25*b;\n        float B = 0.5*sqrt(2.*m);\n        float C = -2.*p - 2.*m;\n        float D = -sqrt(2.)*q/sqrt(m);\n        float x = 10.;\n        roots = vec4(\n            A + B + 0.5*sqrt(C + D),\n            A + B - 0.5*sqrt(C + D),\n            A - B + 0.5*sqrt(C - D),\n            A - B - 0.5*sqrt(C - D)\n        );\n        return bvec4(vec2(C+D>=0.),vec2(C-D>=0.));\n    }\nfloat absmin(float a, float b) {\n\tif (b>0.) return min(a,b);\n    return a;\n}\nfloat intersect (vec4 coes) {\n    vec4 roots;\n    bvec4 br = solve_quartic(coes, roots);\n\tfloat i = 1e4;\n    if (br.x) i = absmin(i,roots.x);\n    if (br.y) i = absmin(i,roots.y);\n    if (br.z) i = absmin(i,roots.z);\n    if (br.w) i = absmin(i,roots.w);\n    return i;\n}\nvec3 norTorus (vec3 p, vec3 c, vec3 n, vec2 r) {\n\tp = p-c;\n    float z = dot(p,n);\n    vec3 q = p-z*n;\n    q = normalize(q)*r.x;\n    return normalize(p-q);\n}\nvec4 torus (vec3 p, vec3 d, vec3 c, vec3 n, vec2 r) {\n\tfloat dn = dot(d,n);\n    float wn = dot(p-c,n);\n    vec3 s = p-c-wn*n;\n    vec3 q = d - dn*n;\n    float qq = dot(q,q);\n    float sq = dot(s,q);\n    float ss = dot(s,s);\n    float A = (dn*dn+qq)*0.5/r.x;\n    float B = (wn*dn+sq)/r.x;\n    float C = (r.x*r.x-r.y*r.y+wn*wn+ss)*0.5/r.x;\n    return vec4(2.*A*B,B*B+2.*A*C-qq,2.*C*B-2.*sq,C*C-ss)/(A*A);\n    \n}\nfloat plane (vec3 p, vec3 d) {\n\treturn  dot(-p,vec3(0,0,1))/dot(d,vec3(0,0,1));\n}\nvoid mainImage( out vec4 Q, in vec2 U )\n{  \n \n  vec2 u = 2.*(U-0.5*R)/R.y;\n    float ss = sin(.2*iTime)*sin(.2*iTime);\n  vec3 p = vec3(0.5*R,-3.*exp(1.2*ss*ss)),\n         d = normalize(vec3(u,1));\n   if (iMouse.z>0.) p.xy += .1*(iMouse.xy-0.5*R);\n   else d.yz *= ei(-.2);\n   float i = plane(p,d); vec3 q = p+d*i;\n   Q = 0.5+0.5*A(q.xy-0.5);\n    vec3 light = R.xyy*vec3(1,1,-1);\n   bool h = false;\n    for (int x = -3; x <= 3; x++)\n   for (int y = -3; y <= 3; y++)\n    {\n    \tvec4 a = A(q.xy-0.5+vec2(x,y));\n        vec3 w = round(q)+vec3(x,y,0);\n        mat3 m = qm((a)/max(1e-2,length(a)));\n        vec3 s = m[0];\n        float o = intersect(torus(p,d,w, s,vec2(.1+length(a),.1)));\n        if (o < i) { \n            i = o;\n            vec3 k = p+d*o;\n            vec3 n = norTorus(k,w, s,vec2(.1+length(a),.1));\n            k -= w;\n            vec3 v = vec3(dot(k,m[0]),dot(k,m[1]),dot(k,m[2]));\n            vec4 col = vec4(0.7+0.3*clamp(v.y*v.zzz*500.,-1.,1.),1);\n            Q = col*(0.5-0.5*dot(n,normalize(p+d*i-light)));\n        \th = true;\n        }\n    }\n    p = p + i*d;\n    d = normalize(light-p);\n    p += 1e-3*d;\n    i = 1e4;\n    if (!h)\n    for (int x = -1; x <= 1; x++)\n   \tfor (int y = -1; y <= 1; y++)\n    {\n    \tvec4 a = A(p.xy-0.5+vec2(x,y));\n        vec3 w = round(p)+vec3(x,y,0);\n        mat3 m = qm((a)/max(1e-2,length(a)));\n        vec3 s = m[0];\n        float o = intersect(torus(p,d,w, s,vec2(.1+length(a),.1)));\n        if (o < i) {\n            Q *= 0.5;\n            break;\n        }\n    }\n    \n    \n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}