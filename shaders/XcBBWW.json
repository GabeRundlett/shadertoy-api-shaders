{
    "Shader": {
        "info": {
            "date": "1724905810",
            "description": "idk if this is FXAA or SMAA or whatever but screen space methods are still better than TAA\nhold mouse for before/after comparison",
            "flags": 32,
            "hasliked": 0,
            "id": "XcBBWW",
            "likes": 1,
            "name": "Follow Edge Antialiasing?",
            "published": 3,
            "tags": [
                "antialiasing",
                "edge",
                "aa",
                "fxaa",
                "smaa",
                "mlaa"
            ],
            "usePreview": 0,
            "username": "beans_please",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "// fetch color from buffer A\nvec3 fetch(vec2 coord)\n{\n    return texture(iChannel0, coord / iResolution.xy).rgb;\n}\n\n// fetch tangent from buffer B\nvec2 fetch_tangent(vec2 coord)\n{\n    return texture(iChannel1, coord / iResolution.xy).xy;\n}\n\nvec3 view_transform(vec3 col)\n{\n    // avoid any negative values before using power functions\n    col = max(col, 0.);\n    \n    // OETF (Linear BT.709 I-D65 to sRGB 2.2)\n    col = pow(col, vec3(1. / 2.2));\n    col = clamp(col, 0., 1.);\n\n    return col;\n}\n\nvec3 render(vec2 coord)\n{\n    // before/after divider\n    if (iMouse.z > .5)\n    {\n        if (abs(coord.x - iMouse.x) < 1.1)\n        {\n            return vec3(.8, .05, .02);\n        }\n        if (coord.x < iMouse.x)\n        {\n            return fetch(coord);\n        }\n    }\n\n    // keep following the tangent on both sides and average out the\n    // colors along the path\n    vec2 curr_coord = coord;\n    vec3 col = fetch(curr_coord);\n    for (int i = 0; i < 3; i++)\n    {\n        curr_coord += fetch_tangent(curr_coord);\n        col += fetch(curr_coord);\n    }\n    curr_coord = coord;\n    for (int i = 0; i < 3; i++)\n    {\n        curr_coord -= fetch_tangent(curr_coord);\n        col += fetch(curr_coord);\n    }\n    col /= 7.;\n    return col;\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    frag_col = vec4(\n        view_transform(render(frag_coord)),\n        1\n    );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*___________ math & integer utils ____________*/\n\nconst float PI = 3.141592653589793238462643383;\nconst float TAU = 6.283185307179586476925286767;\nconst float PI_OVER_2 = 1.570796326794896619231321692;\nconst float INV_PI = .318309886183790671537767527;\nconst float INV_TAU = .159154943091895335768883763;\n\n#define FUNC_WRAP(T) \\\nT wrap(T v, float start, float end) \\\n{ \\\n    return start + mod(v - start, end - start); \\\n}\n\n#define FUNC_REMAP(T) \\\nT remap(T v, float inp_start, float inp_end, float out_start, float out_end) \\\n{ \\\n    return out_start \\\n        + ((out_end - out_start) / (inp_end - inp_start)) * (v - inp_start); \\\n}\n\n#define FUNC_REMAP_CLAMP(T) \\\nT remap_clamp( \\\n    T v, \\\n    float inp_start, \\\n    float inp_end, \\\n    float out_start, \\\n    float out_end \\\n) \\\n{ \\\n    T t = clamp((v - inp_start) / (inp_end - inp_start), 0., 1.); \\\n    return out_start + t * (out_end - out_start); \\\n}\n\n#define FUNC_REMAP01(T) \\\nT remap01(T v, float inp_start, float inp_end) \\\n{ \\\n    return clamp((v - inp_start) / (inp_end - inp_start), 0., 1.); \\\n}\n\n#define FUNC_LENGTH_SQ(T) \\\nfloat length_sq(T v) \\\n{ \\\n    return dot(v, v); \\\n}\n\n#define FUNC_DIST_SQ(T) \\\nfloat dist_sq(T a, T b) \\\n{ \\\n    a -= b; \\\n    return dot(a, a); \\\n}\n\nFUNC_WRAP(float)\nFUNC_WRAP(vec2)\nFUNC_WRAP(vec3)\nFUNC_WRAP(vec4)\n\nFUNC_REMAP(float)\nFUNC_REMAP(vec2)\nFUNC_REMAP(vec3)\nFUNC_REMAP(vec4)\n\nFUNC_REMAP_CLAMP(float)\nFUNC_REMAP_CLAMP(vec2)\nFUNC_REMAP_CLAMP(vec3)\nFUNC_REMAP_CLAMP(vec4)\n\nFUNC_REMAP01(float)\nFUNC_REMAP01(vec2)\nFUNC_REMAP01(vec3)\nFUNC_REMAP01(vec4)\n\nFUNC_LENGTH_SQ(vec2)\nFUNC_LENGTH_SQ(vec3)\nFUNC_LENGTH_SQ(vec4)\n\nFUNC_DIST_SQ(vec2)\nFUNC_DIST_SQ(vec3)\nFUNC_DIST_SQ(vec4)\n\nfloat chebyshev_dist(vec2 a, vec2 b)\n{\n    return max(abs(a.x - b.x), abs(a.y - b.y));\n}\n\nfloat chebyshev_dist(vec3 a, vec3 b)\n{\n    return max(\n        max(abs(a.x - b.x), abs(a.y - b.y)),\n        abs(a.z - b.z)\n    );\n}\n\nfloat chebyshev_dist(vec4 a, vec4 b)\n{\n    return max(\n        max(\n            max(abs(a.x - b.x), abs(a.y - b.y)),\n            abs(a.z - b.z)\n        ),\n        abs(a.w - b.w)\n    );\n}\n\n#define idiv_ceil(a, b) ((a + b - 1) / b)\n\nint iabs(int v)\n{\n    if (v < 0)\n    {\n        return -v;\n    }\n    return v;\n}\n\nint imin(int a, int b)\n{\n    if (a < b)\n    {\n        return a;\n    }\n    return b;\n}\n\nint imax(int a, int b)\n{\n    if (a > b)\n    {\n        return a;\n    }\n    return b;\n}\n\nint iclamp(int v, int start, int end)\n{\n    if (v < start)\n    {\n        v = start;\n    }\n    if (v > end)\n    {\n        v = end;\n    }\n    return v;\n}\n\nfloat min_component(vec2 v)\n{\n    return min(v.x, v.y);\n}\n\nfloat min_component(vec3 v)\n{\n    return min(min(v.x, v.y), v.z);\n}\n\nfloat min_component(vec4 v)\n{\n    return min(min(min(v.x, v.y), v.z), v.w);\n}\n\nfloat max_component(vec2 v)\n{\n    return max(v.x, v.y);\n}\n\nfloat max_component(vec3 v)\n{\n    return max(max(v.x, v.y), v.z);\n}\n\nfloat max_component(vec4 v)\n{\n    return max(max(max(v.x, v.y), v.z), v.w);\n}\n\nint min_component(ivec2 v)\n{\n    return imin(v.x, v.y);\n}\n\nint min_component(ivec3 v)\n{\n    return imin(imin(v.x, v.y), v.z);\n}\n\nint min_component(ivec4 v)\n{\n    return imin(imin(imin(v.x, v.y), v.z), v.w);\n}\n\nint max_component(ivec2 v)\n{\n    return imax(v.x, v.y);\n}\n\nint max_component(ivec3 v)\n{\n    return imax(imax(v.x, v.y), v.z);\n}\n\nint max_component(ivec4 v)\n{\n    return imax(imax(imax(v.x, v.y), v.z), v.w);\n}\n\nfloat bilinear(\n    float val_bl,\n    float val_tl,\n    float val_tr,\n    float val_br,\n    vec2 offs\n)\n{\n    return mix(\n        mix(val_bl, val_br, offs.x),\n        mix(val_tl, val_tr, offs.x),\n        offs.y\n    );\n}\n\n// credits to AHSEN (https://www.shadertoy.com/user/01000001)\n// https://www.desmos.com/calculator/5d6ph151vi interactive :D\nfloat cubic_interp(float a, float b, float c, float d, float t)\n{\n    float one = t - 1.;\n    float two = t - 2.;\n    float three = t - 3.;\n    return (\n        (-one * two * three * a)\n        + (t * one * two * d)\n        + (3. * t * two * three * b)\n        - (3. * t * one * three * c)\n    ) / 6.;\n}\n\nfloat dist_along_line(vec2 p, vec2 line_start, vec2 line_end)\n{\n    vec2 dir = line_end - line_start;\n    \n    // normalize\n    float len_sqr = dot(dir, dir);\n    if (len_sqr < .0001)\n        return 1e9;\n    dir /= sqrt(len_sqr);\n    \n    return dot(\n        dir,\n        p - line_start\n    );\n}\n\nfloat relative_dist_along_line(vec2 p, vec2 line_start, vec2 line_end)\n{\n    vec2 dir = line_end - line_start;\n    return dot(\n        dir,\n        p - line_start\n    );\n}\n\n// |a| * |b| * sin(theta)\nfloat cross2d(vec2 a, vec2 b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\n// angle from 0 to TAU\nfloat get_angle(vec2 p)\n{\n    float a = atan(p.y, p.x);\n    if (a < 0.)\n    {\n        return a + TAU;\n    }\n    return a;\n}\n\nmat2 rotate_2d(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(\n        c, s,\n        -s, c\n    );\n}\n\nvec2 perpendicular(vec2 v)\n{\n    return vec2(-v.y, v.x);\n}\n\n// s.x=theta\n// s.y=phi\n// (there's no r)\nvec3 spherical_to_cartesian(vec2 s)\n{\n    float sin_theta = sin(s.x);\n    return vec3(\n        sin_theta * cos(s.y),\n        sin_theta * sin(s.y),\n        cos(s.x)\n    );\n}\n\n// s.x=r\n// s.y=theta\n// s.z=phi\nvec3 spherical_to_cartesian(vec3 s)\n{\n    float sin_theta = sin(s.y);\n    return s.x * vec3(\n        sin_theta * cos(s.z),\n        sin_theta * sin(s.z),\n        cos(s.y)\n    );\n}\n\nvec2 screen_to_uv01(vec2 coord, vec2 res)\n{\n    return coord / res;\n}\n\nvec2 screen_to_uv_horizontal(vec2 coord, vec2 res)\n{\n    return (2. * coord - res) / res.x;\n}\n\nvec2 screen_to_uv_vertical(vec2 coord, vec2 res)\n{\n    return (2. * coord - res) / res.y;\n}\n\nvec2 screen_to_uv_fit(vec2 coord, vec2 res)\n{\n    return (2. * coord - res) / min_component(res);\n}\n\nvec2 screen_to_uv_fill(vec2 coord, vec2 res)\n{\n    return (2. * coord - res) / max_component(res);\n}\n\n// * idx starts at 1\nfloat halton(int base, int idx)\n{\n    float result = 0.;\n    float digit_weight = 1.;\n    while (idx > 0)\n    {\n        digit_weight /= float(base);\n        result += float(idx % base) * digit_weight;\n        idx /= base;\n    }\n    return result;\n}\n\n// * idx starts at 1\nvec2 halton_2d(int idx)\n{\n    return vec2(halton(2, idx), halton(3, idx));\n}\n\n// * idx starts at 1\nvec3 halton_3d(int idx)\n{\n    return vec3(halton(2, idx), halton(3, idx), halton(5, idx));\n}\n\n// * idx starts at 1\nvec4 halton_4d(int idx)\n{\n    return vec4(\n        halton(2, idx),\n        halton(3, idx),\n        halton(5, idx),\n        halton(7, idx)\n    );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// this buffer renders some basic 2D shapes with no AA\n\nvec3 render(vec2 coord)\n{\n    vec2 uv = screen_to_uv_fit(coord, iResolution.xy);\n    \n    vec3 col = vec3(.015, .02, .04);\n    if (abs(dot(uv, normalize(vec2(-.06, 1))) - .6) < .01)\n    {\n        col = vec3(.3, .5, .7);\n    }\n    if (abs(sin(uv.x * TAU) - 32. * (uv.y - .1)) < .5)\n    {\n        col = vec3(.8, .6, .2);\n    }\n    \n    if (abs(dot(uv, uv) - .2) < .03)\n    {\n        col = vec3(.3, .6, .1);\n    }\n    if (max(abs(uv.x), abs(uv.y + .15)) < .15)\n    {\n        col = vec3(.8);\n    }\n    \n    return col;\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    vec3 col = render(frag_coord);\n    frag_col = vec4(col, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// this buffer stores a tangent vector for every pixel\n// (calculated with a custom method)\n\nfloat lum(vec3 col)\n{\n    return dot(col, vec3(.3, .5, .2));\n}\n\nvec3 fetch(vec2 coord)\n{\n    return texture(iChannel0, coord / iResolution.xy).rgb;\n}\n\nvec2 fetch_gradient(vec2 coord)\n{\n    return vec2(\n        lum(fetch(coord + vec2(.5, 0))) - lum(fetch(coord + vec2(-.5, 0))),\n        lum(fetch(coord + vec2(0, .5))) - lum(fetch(coord + vec2(0, -.5)))\n    );\n}\n\nvec2 figure_out_tangent(vec2 coord)\n{\n    float lum_center = lum(fetch(coord));\n    float min_lum_diff = 1e9;\n    vec2 dir_with_lowest_lum_diff = vec2(1, 0);\n    \n    for (float angle = 0.; angle < 360.; angle += 10.)\n    {\n        float rad = radians(angle);\n        vec2 dir = vec2(cos(rad), sin(rad));\n        \n        float lum_moved = lum(fetch(coord + dir));\n        float lum_diff = abs(lum_moved - lum_center);\n        if (lum_diff < min_lum_diff)\n        {\n            min_lum_diff = lum_diff;\n            dir_with_lowest_lum_diff = dir;\n        }\n    }\n    \n    return dir_with_lowest_lum_diff;\n}\n\nvec2 figure_out_tangent2(vec2 coord)\n{\n    float lum_center = lum(fetch(coord));\n    float min_lum_diff = 1e9;\n    vec2 dir_with_lowest_lum_diff = vec2(1, 0);\n    \n    vec2 dir = vec2(1, 0);\n    float lum_moved = lum(fetch(coord + dir));\n    float lum_diff = abs(lum_moved - lum_center);\n    if (lum_diff < min_lum_diff)\n    {\n        min_lum_diff = lum_diff;\n        dir_with_lowest_lum_diff = dir;\n    }\n    \n    dir = vec2(1, 1);\n    lum_moved = lum(fetch(coord + dir));\n    lum_diff = abs(lum_moved - lum_center);\n    if (lum_diff < min_lum_diff)\n    {\n        min_lum_diff = lum_diff;\n        dir_with_lowest_lum_diff = dir;\n    }\n    \n    dir = vec2(0, 1);\n    lum_moved = lum(fetch(coord + dir));\n    lum_diff = abs(lum_moved - lum_center);\n    if (lum_diff < min_lum_diff)\n    {\n        min_lum_diff = lum_diff;\n        dir_with_lowest_lum_diff = dir;\n    }\n    \n    dir = vec2(-1, 1);\n    lum_moved = lum(fetch(coord + dir));\n    lum_diff = abs(lum_moved - lum_center);\n    if (lum_diff < min_lum_diff)\n    {\n        min_lum_diff = lum_diff;\n        dir_with_lowest_lum_diff = dir;\n    }\n    \n    dir = vec2(-1, 0);\n    lum_moved = lum(fetch(coord + dir));\n    lum_diff = abs(lum_moved - lum_center);\n    if (lum_diff < min_lum_diff)\n    {\n        min_lum_diff = lum_diff;\n        dir_with_lowest_lum_diff = dir;\n    }\n    \n    dir = vec2(-1, -1);\n    lum_moved = lum(fetch(coord + dir));\n    lum_diff = abs(lum_moved - lum_center);\n    if (lum_diff < min_lum_diff)\n    {\n        min_lum_diff = lum_diff;\n        dir_with_lowest_lum_diff = dir;\n    }\n    \n    dir = vec2(0, -1);\n    lum_moved = lum(fetch(coord + dir));\n    lum_diff = abs(lum_moved - lum_center);\n    if (lum_diff < min_lum_diff)\n    {\n        min_lum_diff = lum_diff;\n        dir_with_lowest_lum_diff = dir;\n    }\n    \n    dir = vec2(1, -1);\n    lum_moved = lum(fetch(coord + dir));\n    lum_diff = abs(lum_moved - lum_center);\n    if (lum_diff < min_lum_diff)\n    {\n        min_lum_diff = lum_diff;\n        dir_with_lowest_lum_diff = dir;\n    }\n    \n    return dir_with_lowest_lum_diff;\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    vec2 tangent = figure_out_tangent2(frag_coord);\n    tangent *= step(.05, length(fetch_gradient(frag_coord)));\n    \n    frag_col = vec4(tangent, 0, 0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}