{
    "Shader": {
        "info": {
            "date": "1495646257",
            "description": "it begins",
            "flags": 0,
            "hasliked": 0,
            "id": "MsffWr",
            "likes": 5,
            "name": "cheerilee cutiemark",
            "published": 3,
            "tags": [
                "pony",
                "mlp",
                "face",
                "flowers",
                "mylittlepony",
                "cutiemark",
                "mark",
                "talent"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 784
        },
        "renderpass": [
            {
                "code": "//self: https://www.shadertoy.com/view/MsffWr\n//cheerilee cutie mark flowers\n//cartoon pony butt for reference: \n//https://vignette3.wikia.nocookie.net/mlp/images/3/3f/Cheerilee%27s_cutie_mark_S1E12.png/revision/latest?cb=20121118163857&format=original\n\n//uncomment below line to show 2d distance fields, aso showing the polar modulo fold borders.\n//#define showFract\n\n#define tau 6.28318530718\n//return cathesian of polar_modulo see: http://mercury.sexy/hg_sdf\nfloat pModPolar(inout vec2 p,float t){float g=tau/t,a=atan(p.y,p.x)+g*.5,r=length(p),\n c=floor(a/g);a=mod(a,g)-g*.5;p=vec2(cos(a),sin(a))*r;if(abs(c)>=t*.5)c=abs(c);return c;}\n//return polar coordinates of carthesian input\nvec2 c2p(vec2 u){return vec2(length(u),atan(u.y,u.x));}\n//return carthesian coordinates of polar input\nvec2 p2c(vec2 u){return vec2(u.x*cos(u.y),u.x*sin(u.y));}\n//#define r2(r) mat2(sin(r+vec4(1,0,0,-1)*asin(1.)))\n//return distance of (p) to ray that starts at (0,0) and has direction (0,-1);\nfloat ils(vec2 p){return mix(abs(p.y),length(p),step(0.,p.x));}\n//rotate p (carthesian) by angle r (full rotation==tau): p=r(p,r);\n#define r(p,r) (cos(r)*p+sin(r)*vec2(-p.y,p.x))\n//r() with offset o;\n//vec2 rOffset(vec2 p,float r,vec2 o){p-=o;return (cos(r)*p+sin(r)*vec2(-p.y,p.x))+o;}\n//return vec3 range [0..1] of 3*8bit color picker values 3*[0..255]\nvec3 bit82vec3(int r,int g,int b){return vec3(r,g,b)/255.;}\n//return framed [u], adjusting aspect ratio, and centering to display.\nvec2 frame(vec2 u){u/=iResolution.xy;u-=.5;\n u.x*=iResolution.x/iResolution.y;u*=2.;\n return u;}\n//return brightness of eyes and mouth \nfloat eyes(vec2 w,float n){\n w=c2p(w);//we branch modify for one polar coordinate, therefore we must transform.\n if(n!=0.)w.y+=2.*n;//rotate whole faces, depenting by \"slice\"\n w.y+=.5*sin(iTime+n);//faces wiggle to sin() pebbles rotate to cos()\n w=p2c(w);\n w.x*=1.2;\n n=pModPolar(w,3.);//eyes and mouth are a 3fold , within 3fold flowers.\n w.x-=.14;\n w=c2p(w);\n w.y+=4.7;//(tricky transform cases to make \"faces\" look half decent, by rotating eyes)\n if(n==1.)w.y+=1.;if(n==0.)w.y-=1.;\n w=p2c(w);\n float blur=4./iResolution.y;\n //max(a,-b) of 2 distances (a,b) returns a distance that is ==(a NOT b)== crescent moon.\n #ifdef showFract\n  return fract(max(length(w)-.08,-length(w-vec2(0,.04))+.1)*19.);}\n #else\n //return smoothstep(blur,-blur,max(length(w)-.1,0.));//debug Ooooooo-face\n return smoothstep(blur,-blur,max(length(w)-.08,-length(w-vec2(0,.04))+.1));}\n #endif\n \nvoid mainImage(out vec4 O,in vec2 U){vec2 m=-frame(U);\n float blur=2./iResolution.y;\n m=r(m,3.);//rotate\n m.y+=.07;//offset\n float n=pModPolar(m,3.);//3 fold symmetry for 3 flowers\n m+=vec2(-.55-n*.055,.1+n*.1);//offset within 3fold; +n* -> 2 flowers are closer together\n #ifdef showFract\n  float d=fract((length(m)-.25)*19.);//yellow flower circle distances.\n #else\n  float d=smoothstep(blur,-blur,length(m)-.25);//yellow flower circle.\n #endif                                    \n m=r(m,.5*cos(iTime+n));//rotate whole flower\n float e=eyes(m,n);\n n=pModPolar(m,8.);//8fold symmetry for pebbles. \n float p=ils(m-vec2(.31,0));//flower pebbles=distance to ray==infiniteLineSegment\n #ifdef showFract\n  p=fract(p*19.);//pink flower pebbles distances\n #else\n  p=smoothstep(blur,-blur,p-.11);//pink flower pebbles \n #endif\n vec3 cBG=bit82vec3(195,111,160);//color background cheerilee cutiemark eye && mouth && body\n vec3 cYe=bit82vec3(247,244,177);//color yellow     cheerilee cutiemark circles\n vec3 cPi=bit82vec3(244,215,227);//color pink       cheerilee cutiemark pebbles\n vec3 r; \n r=mix(cBG,cPi,p);//mix background with pink pebbles\n r=mix(r,cYe,d);//add yellow circles to mix\n #ifdef showFract\n  r=mix(r,1.1*(1.-cBG),e);//add eyes and mouth to mix, tinted green\n #else\n  r=mix(r,cBG,e);//add eyes and mouth to mix \n #endif\n O=vec4(r,1);}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}