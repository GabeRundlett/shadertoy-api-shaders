{
    "Shader": {
        "info": {
            "date": "1465737358",
            "description": "( not perfect yet....)",
            "flags": 0,
            "hasliked": 0,
            "id": "XsKXz3",
            "likes": 10,
            "name": " pavements - hexagonal tiling 6",
            "published": 3,
            "tags": [
                "2d",
                "pattern",
                "tiling",
                "hexagonal",
                "tiles",
                "short",
                "pavment"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1071
        },
        "renderpass": [
            {
                "code": "// relying on hexagonal tiling tutos https://www.shadertoy.com/view/4dKXR3\n//                               and https://www.shadertoy.com/view/XdKXz3\n// from https://www.shadertoy.com/view/4dKXz3\n\nvoid mainImage( out vec4 O, vec2 uv )\n{ \n    vec2 R = iResolution.xy,\n         U = uv = (uv-R/2.)/R.y * 6. *  1.73/2.;  // centered coords\n    \n     U *= mat2(1,-1./1.73, 0,2./1.73);            // conversion to\n    vec3 g = vec3(U,1.-U.x-U.y), g2,              // hexagonal coordinates\n        id = floor(g);                            // cell id\n\n    g = fract(g);                                 // diamond coords\n    if (length(g)>1.) g = 1.-g;                   // barycentric coords\n    g2  = (2.*g-1.);                              // distance to borders\n\n    U = id.xy * mat2(1,.5, 0,1.73/2.);\n    \n    float l00 = length(U-uv),                     // screenspace distance to nodes\n          l10 = length(U+vec2(1,0)-uv), \n          l01 = length(U+vec2(.5,1.73/2.)-uv),\n          l11 = length(U+vec2(1.5,1.73/2.)-uv),\n          l20 = length(U+vec2(2,0)-uv), \n            l = min(min(min(l00, l10), min( l01, l11)),l20); // closest node\n  //vec2 C = U+ ( l==l00 ? vec2(0) : l==l10 ? vec2(1,0) : l==l01 ? vec2(.5,1.73/2.) : l==l11 ? vec2(1.5,1.73/2.) : vec2(2,0)  );\n\n    // --- making fish scales\n    float k = 1.;\n    id += l20<k ? vec3(2,0,0) : l11<k ?  vec3(1,1,0) : l10<k ? vec3(1,0,0) : l01<k ? vec3(0,1,0) : vec3(0);\n    vec2 C = id.xy * mat2(1,.5, 0,1.73/2.);\n    \n    // --- making pavement \n    uv -= C; \n    l = length(uv);\n    float a = atan(uv.y,-uv.x), n=8., \n          u = l, //  .5 + 1.73/2.* tan(2.*asin(l/2.)-3.14/6.),\n         dl = 1.-length(vec2(1,0)+u*vec2(-.5,1.73/2.)); // % of free arclenght \n\n#if 0 // 1: colors  0: grey    \n  //O = vec4(1);\n    O = .5+.5*vec4(mod(id.xy,2.),0,1); \n    O *= abs(sin(3.14*a*(floor(n*l)+n*dl)));\n    O *= abs(sin(3.14*n*l));\n#else    \n  //O += pow(abs(sin(3.14*a*(floor(n*l)+n*dl))),10.) + pow(abs(sin(3.14*n*l)),10.) -O;\n  //O += pow( abs( sin(3.14*a*(floor(n*l)+n*dl)) * sin(3.14*n*l)),2.) -O;\n    O  = pow( abs( sin(3.14*a*(floor(n*l)+n*dl)) * sin(3.14*n*l)),.5) +O-O;\n  //O  = pow( abs( sin(a*(1.+dl*6./3.14)*3.*floor(n*l)) * sin(3.14*n*l)),.5) +O-O;\n  //O  = pow( abs( cos(a*(1.+dl*6./3.14)*(3.*(floor(n*l)+.5))) * sin(3.14*n*l)),.5) +O-O;\n    \n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}