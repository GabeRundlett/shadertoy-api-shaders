{
    "Shader": {
        "info": {
            "date": "1719922887",
            "description": "a simple ray marching shader, it's still not as good as I want it to be so I'll still work on it once in a while\n\nNext on my to do list: fixing reflections (and then rotation and scaling)",
            "flags": 0,
            "hasliked": 0,
            "id": "l3dXRl",
            "likes": 6,
            "name": "xo ray marching",
            "published": 3,
            "tags": [
                "raymarching",
                "infinity",
                "renderer"
            ],
            "usePreview": 0,
            "username": "x_540",
            "viewed": 113
        },
        "renderpass": [
            {
                "code": "float random(float seed) {\n    return(seed * 1324987431871975847412398475858725136458821987253691598259378.29837210571305873140793);\n}\n\nfloat sphereSdf(vec3 sPos, vec3 pos, float radius) {\n    return(distance(pos,sPos)-radius);\n}\n\nfloat icoSdf(vec3 iPos, vec3 pos, float radius) {\n    pos = abs(pos-iPos);\n    return(pos.x+pos.y+pos.z-radius);\n}\n\nvec3 repeat(vec3 pos, vec3 interval) {\n    return(vec3(abs(mod(pos.x,interval.x)),abs(mod(pos.y,interval.y)),abs(mod(pos.z,interval.z)))-(interval/2.0));\n}\n\nfloat blueSdf(vec3 pos) {\n    return(sphereSdf(vec3(-1.0,-1.0,7.5),pos,1.0));\n    /* funky grid sdf: max(-sphereSdf(vec3(0.0,0.0,0.0),repeat(pos,vec3(1.5)),1.0),-pos.z+5.0)\n       some spheres: sphereSdf(vec3(0.0,0.0,5.0),vec3(mod(pos.x,3.0)-1.5,pos.y,abs(pos.z)),1.0)\n       sample scene: min(sphereSdf(vec3(0.0,-1.0,7.5),pos,1.0),pos.y + 2.0)\n    */\n}\n\nfloat redSdf(vec3 pos) {\n    return(sphereSdf(vec3(1.0,-1.0,7.5),pos,1.0));\n}\n\nfloat whiteSdf(vec3 pos) {\n    return(pos.y + 2.0);\n}\n\nfloat lightSdf(vec3 pos) {\n    return(sphereSdf(vec3(0.0,1.0,7.5),pos,1.0));\n}\n\nfloat fullSdf(vec3 pos) {\n    return(min(lightSdf(pos),min(redSdf(pos),min(blueSdf(pos),whiteSdf(pos)))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float distanceTraveled = 0.0;\n    const bool autoMove = false;\n    const float epsilon = 0.001;\n    const float infinity = 100.0;\n    const int itterCount = 1000;\n    const int maxBounces = 25;\n    const float pi = 3.1415926;\n    vec2 cameraAngle = vec2(0.0,0.0);\n    float fov = 2.0943951024;\n    \n    //debug options\n    int debugMode = 0;\n    \n    fragColor = vec4(1.0);\n    \n    vec3 origin;\n    if(autoMove) {\n        origin = 0.9 * vec3(cos(iTime),0.0,sin(iTime));\n    } else {\n        origin = vec3(0.0,0.0,0.0);\n    }\n    \n    vec2 angles = (cameraAngle + vec2(fragCoord / iResolution.xy) - vec2(0.5))*vec2(fov,fov*(iResolution.y/iResolution.x));\n    \n    vec3 direction = vec3(sin(angles.x)*cos(angles.y),sin(angles.y),cos(angles.x)*cos(angles.y));\n    \n    \n    for(int bounce = 0; bounce < maxBounces; bounce++) {\n        int i;\n        float lightDist;\n        float blueDist;\n        float redDist;\n        float whiteDist;\n        float dist;\n        \n        for(i = 0; i < itterCount; i++) {\n            vec3 position = direction * distanceTraveled + origin;\n            \n            lightDist = lightSdf(position);\n            blueDist = blueSdf(position);\n            redDist = redSdf(position);\n            whiteDist = whiteSdf(position);\n            \n            dist = min(lightDist,min(redDist, min(blueDist, whiteDist)));\n\n            distanceTraveled += dist;\n            \n            if(i != 0) {\n                if(dist <= epsilon) {\n                    break;\n                }\n            }\n            if(dist >= infinity) {\n                break;\n            }\n        }\n\n\n        if(dist <= epsilon) {\n            vec3 position = direction * distanceTraveled + origin;\n            \n            if(redDist <= epsilon) {\n                fragColor.xyz *= vec3(1.0,0.1,0.1);\n            } \n            if(blueDist <= epsilon) {\n                fragColor.xyz *= vec3(0.1,0.1,1.0);\n            }\n            \n            if(whiteDist <= epsilon) {\n                fragColor.xyz *= vec3(0.9,0.9,0.9);\n            }\n            \n            \n            if(lightDist <= epsilon) {\n                break;\n            }\n            \n            \n            \n            vec3 normal = normalize(vec3(\n                fullSdf(position + vec3(epsilon,0.0,0.0)) - fullSdf(position - vec3(epsilon,0.0,0.0)),\n                fullSdf(position + vec3(0.0,epsilon,0.0)) - fullSdf(position - vec3(0.0,epsilon,0.0)),\n                fullSdf(position + vec3(0.0,0.0,epsilon)) - fullSdf(position - vec3(0.0,0.0,epsilon))\n            ));\n\n            direction = reflect(direction,normal);\n            origin = position;\n            if(debugMode == 1) {\n                fragColor.xyz = normal;\n                break;\n            }\n            if(debugMode == 2) {\n                fragColor.xyz = direction;\n                break;\n            }\n            continue;\n        } else {\n            fragColor.xyz = fragColor.xyz * vec3(acos(dot(direction, -normalize(vec3(0.0,0.25,1.0))) + epsilon)/pi);\n            break;\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}