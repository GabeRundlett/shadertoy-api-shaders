{
    "Shader": {
        "info": {
            "date": "1572651123",
            "description": "Using the voronoi fluid to make nice lava. Playing with voronoi particle tracking",
            "flags": 48,
            "hasliked": 0,
            "id": "WdtXzs",
            "likes": 119,
            "name": "Lava blaster",
            "published": 3,
            "tags": [
                "fast",
                "fluid",
                "particles",
                "lava"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 3678
        },
        "renderpass": [
            {
                "code": "// Fork of \"Vorofluid\" by michael0884. https://shadertoy.com/view/3sdXRX\n// 2019-11-01 23:20:11\n\n// Fork of \"Voronoi vortex particle fluid\" by michael0884. https://shadertoy.com/view/WdcXzS\n// 2019-10-30 21:27:02\nconst int KEY_UP = 38;\nconst int KEY_DOWN  = 40;\n\nvec4 B(vec2 pos)\n{\n   return SAMPLE(iChannel1, pos, size);\n}\n\n//density and velocity\nvec3 pdensity(vec2 pos)\n{\n   vec4 particle_param = SAMPLE(iChannel0, pos, size);\n   return vec3(particle_param.zw,gauss(pos - particle_param.xy, 0.7*radius));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n   vec3 density = pdensity(pos);\n   vec4 blur = SAMPLE(iChannel1, pos, size);\n    float vorticity = B(pos+vec2(1,0)).y-B(pos-vec2(1,0)).y-B(pos+vec2(0,1)).x+B(pos-vec2(0,1)).x;\n   //fragColor = vec4(SAMPLE(iChannel2, pos, size).xyz  + 0.8*vec3(0.4,0.6,0.9)*vorticity,1.0);\n    if(texelFetch( iChannel2, ivec2(KEY_UP,2), 0 ).x > 0.5)\n    {\n        fragColor = vec4(2.*density.z*(7.*abs(density.xyy)+vec3(0.2, 0.1, 0.1)),1.0);\n        fragColor = vec4(10.*abs(density.xyy) + 30.*vec3(0,0,abs(blur.z)),1.0);\n    }\n    else\n    {\n     \tfloat l1 = 490.*abs(vorticity);\n        float l2 = 1.-l1;\n        fragColor = vec4(vec3(1.,0.3,0.1)*l1 + 0.*vec3(0.1,0.1,0.1)*l2,1.0);\n    }  \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//voronoi particle tracking \n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = SAMPLE(iChannel0, pos+dx, size);\n    vec2 rpos1 = mod(pos-Unb.xy+size*0.5,size) - size*0.5;\n    vec2 rpos2 = mod(pos-U.xy+size*0.5,size) - size*0.5;\n    //check if the stored neighbouring particle is closer to this position \n    if(length(rpos1) < length(rpos2))\n    {\n        U = Unb; //copy the particle info\n    }\n}\n\nvec4 B(vec2 pos)\n{\n   return 5.*SAMPLE(iChannel1, pos, size);\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    U = SAMPLE(iChannel0, pos, size);\n    \n    //check neighbours \n    Check(U, pos, vec2(-1,0));\n    Check(U, pos, vec2(1,0));\n    Check(U, pos, vec2(0,-1));\n    Check(U, pos, vec2(0,1));\n    Check(U, pos, vec2(-1,-1));\n    Check(U, pos, vec2(1,1));\n    Check(U, pos, vec2(1,-1));\n    Check(U, pos, vec2(1,-1));\n    U.xy = mod(U.xy,size); //limit the position to the texture\n    \n    //make new particles by diverging existing ones\n \tif(length(mod(pos-U.xy+size*0.5,size) - size*0.5) > 1./minimal_density)\n    {\n        U.xy = pos;\n    }\n\n    vec2 ppos = U.xy;\n\n    vec2 pressure = vec2(B(ppos+vec2(1,0)).z - B(ppos+vec2(-1,0)).z, B(ppos+vec2(0,1)).z - B(ppos+vec2(0,-1)).z);\n    //mouse interaction\n    if(iMouse.z>0.)\n    {\n        float k = gauss(ppos-iMouse.xy, 25.);\n        U.zw = U.zw*(1.-k) + k*0.2*vec2(cos(0.02*iTime*dt), sin(0.02*iTime*dt));\n    }\n\t\n    #ifdef BLASTER\n     U.zw += 0.002*vec2(cos(0.01*iTime*dt), sin(0.01*iTime*dt))*gauss(ppos-size*vec2(0.5,0.5),8.)*dt;\n    #endif\n    \n    //update the particle\n    U.zw = U.zw*0.9995; // decrease velocity with time\n    U.zw += P*pressure*dt;\n    //smooth velocity\n    vec2 velocity = 0.*B(ppos).xy + U.zw;\n    U.xy += dt*velocity;\n    U.xy = mod(U.xy,size); //limit the position to the texture\n    \n    \n    if(iFrame < 1)\n    {\n      \tif(mod(pos, vec2(1./particle_density)).x < 1. && mod(pos, vec2(1./particle_density)).y < 1.)\n           U = vec4(pos,0.,0.);\n      \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define size iResolution.xy\n#define SAMPLE(a, p, s) texture((a), (p)/s)\n\nfloat gauss(vec2 x, float r)\n{\n    return exp(-pow(length(x)/r,2.));\n}\n#define SPEED\n#define BLASTER\n   \n#define PI 3.14159265\n\n#ifdef SPEED\n//high speed\n    #define dt 8.5\n    #define P 0.01\n#else\n//high precision\n \t#define dt 2.\n    #define P 0.05\n#endif\n\n//how many particles per pixel, 1 is max\n#define particle_density 1.\n#define minimal_density 0.8\n\nconst float radius = 2.0;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 B(vec2 pos)\n{\n   return SAMPLE(iChannel1, pos, size);\n}\n\n//density and velocity\nvec3 pdensity(vec2 pos)\n{\n   vec4 particle_param = SAMPLE(iChannel0, pos, size);\n   return vec3(particle_param.zw,gauss(pos - particle_param.xy, 0.7*radius));\n}\n\nconst vec2 damp = vec2(0.000,0.01);\nconst vec2 ampl = vec2(0.1,1.);\n\nvoid mainImage( out vec4 u, in vec2 pos )\n{\n    vec4 prev_u = SAMPLE(iChannel1, pos, size);\n   \n  \n    vec3 density = pdensity(pos);\n     //exponential rolling average\n      u.xyz =  0.5*density;\n    float div = B(pos+vec2(1,0)).x-B(pos-vec2(1,0)).x+B(pos+vec2(0,1)).y-B(pos-vec2(0,1)).y;\n    u.zw = (1.-0.001)*0.25*(B(pos+vec2(0,1))+B(pos+vec2(1,0))+B(pos-vec2(0,1))+B(pos-vec2(1,0))).zw;\n    u.zw += ampl*vec2(div,density.z);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 B(vec2 pos)\n{\n   return SAMPLE(iChannel1, pos, size);\n}\n\n//density and velocity\nvec3 pdensity(vec2 pos)\n{\n   vec4 particle_param = SAMPLE(iChannel0, pos, size);\n   return vec3(particle_param.zw,gauss(pos - particle_param.xy, 0.7*radius));\n}\n\nconst vec2 damp = vec2(0.000,0.01);\nconst vec2 ampl = vec2(0.1,1.);\n\nvoid mainImage( out vec4 u, in vec2 pos )\n{\n    vec4 prev_u = SAMPLE(iChannel1, pos, size);\n   \n  \n    vec3 density = pdensity(pos);\n     //exponential rolling average\n      u.xyz = 0.5*density;\n    float div = B(pos+vec2(1,0)).x-B(pos-vec2(1,0)).x+B(pos+vec2(0,1)).y-B(pos-vec2(0,1)).y;\n    u.zw = (1.-0.001)*0.25*(B(pos+vec2(0,1))+B(pos+vec2(1,0))+B(pos-vec2(0,1))+B(pos-vec2(1,0))).zw;\n    u.zw += ampl*vec2(div,density.z);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 B(vec2 pos)\n{\n   return SAMPLE(iChannel1, pos, size);\n}\n\n//density and velocity\nvec3 pdensity(vec2 pos)\n{\n   vec4 particle_param = SAMPLE(iChannel0, pos, size);\n   return vec3(particle_param.zw,gauss(pos - particle_param.xy, 0.7*radius));\n}\n\nconst vec2 damp = vec2(0.000,0.01);\nconst vec2 ampl = vec2(0.1,1.);\n\nvoid mainImage( out vec4 u, in vec2 pos )\n{\n    vec4 prev_u = SAMPLE(iChannel1, pos, size);\n   \n  \n    vec3 density = pdensity(pos);\n     //exponential rolling average\n      u.xyz = 0.5*density;\n    float div = B(pos+vec2(1,0)).x-B(pos-vec2(1,0)).x+B(pos+vec2(0,1)).y-B(pos-vec2(0,1)).y;\n    u.zw = (1.-0.001)*0.25*(B(pos+vec2(0,1))+B(pos+vec2(1,0))+B(pos-vec2(0,1))+B(pos-vec2(1,0))).zw;\n    u.zw += ampl*vec2(div,density.z);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}