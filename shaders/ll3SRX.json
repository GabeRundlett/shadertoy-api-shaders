{
    "Shader": {
        "info": {
            "date": "1480776854",
            "description": "foil sheet, test shader",
            "flags": 0,
            "hasliked": 0,
            "id": "ll3SRX",
            "likes": 16,
            "name": "foil",
            "published": 3,
            "tags": [
                "foil"
            ],
            "usePreview": 0,
            "username": "emtower",
            "viewed": 18890
        },
        "renderpass": [
            {
                "code": "// math\nfloat saturate(float x) { return clamp(x,0.0,1.0); }\nfloat mul(vec2 x) { return x.x*x.y; }\n\nmat3 fromEuler(vec3 ang) {\n\tvec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    mat3 m;\n    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x*0.8,a1.y*a2.x*a3.x+a3.y*a1.x*0.8,-a2.y*a3.x*0.8);\n\tm[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n\tm[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x*0.8,a1.x*a3.x-a1.y*a3.y*a2.x*0.8,a2.y*a3.y*0.8);\n\treturn m;\n}\nbool intersectionRayQuad(vec3 o, vec3 d, vec2 size, out vec3 p) {\n    p = o - d * o.z / d.z;\n    return bool(mul(step(abs(p.xy),size)));\n}\n\n// color\nfloat textureHologram(vec2 t, vec3 e) {\n    float r = length(t);\n    t.x += e.x * 0.2;\n    \n    float l3 = smoothstep(0.5,0.52,r);\n    float l0 = smoothstep(0.98,0.97,r) * l3;\n    float l1 = saturate(sin(t.y*40.0)*8.0) * saturate(sin((t.y-t.x)*10.0)*8.0+6.0);\n    float l2 = saturate(sin(t.y*160.0)*8.0) * saturate(sin((t.y+t.x)*40.0)*8.0+6.0);\n    float l4 = smoothstep(0.42,0.4,r) * smoothstep(0.39,0.399,r);\n    float l5 = smoothstep(1.0,0.99,r) * smoothstep(0.97,0.98,r);\n    \n    float sum = 0.0;\n    sum += (1.0-l3) * 0.5;\n    sum += l1 * l0;\n    sum += l2 * l0 * (1.0 - l1) * 0.2;\n    sum += l4 * 0.5;\n    sum += l5;\n    return 0.08;\n}\n\n\n// based on iq's https://www.shadertoy.com/view/MsS3Wc\nvec3 hologram(vec2 p, float sum) {\n    vec3 hue = clamp(abs(mod(p.y*0.15*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0); \n    vec3 gray = vec3(1.8);\n    float sat = (cos(p.y)*0.5+0.5) * (0.2+sum*0.8);\n    return mix(gray,hue,sat);\n}\n\nvec3 getObjectColor(vec3 p, vec3 n, vec3 e) {\n    float sum = textureHologram(p.xy,e);\n    \n    // vec\n    vec2 d = p.xy + (sum * 2.0 - 1.0);\n    d += dot(e,n) * 5.5;\n        \n    // get holo color\n    float bright = saturate(0.6 + sum * 0.4);\n    vec3 color = hologram(d,sum) * bright;\n    color *= pow(max(dot(e,-n),0.0),0.6);\n            \n    // reflection\n    vec3 refl = reflect(e,n) + sum * 0.1; \n    //vec3 color_refl = texture(iChannel0,refl).xyz;\n    //color = mix(color,color_refl,(1.0 - sum) * 0.2);    \n        \n    // lighting\n    n.xz += (sum * 2.0 - 1.0) * 0.6;\n    color += pow(max(dot(e,-normalize(n)),0.0), 20.0) * 0.6;\n        \n    return color;    \n}\n\n// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 iuv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    vec2 uv = iuv;\n    uv.x *= iResolution.x / iResolution.y;    \n    vec2 mouse = iMouse.xy / iResolution.xy * 4.0 - 2.0;\n        \n    // ray\n    vec3 ang = vec3(0.0,sin(iTime)*0.05,cos(iTime*1.5)*0.75);\n    if(iMouse.z > 0.0) ang = vec3(0.0,-mouse.y,mouse.x);\n\tmat3 rot = fromEuler(ang/2.0);\n    \n    vec3 ori = vec3(0.0,0.0,5.0);\n    vec3 dir = normalize(vec3(uv.xy,-3.0));    \n    ori = ori * rot;\n    dir = dir * rot;\n             \n    // color\n    vec3 p;\n    vec3 color = vec3(0.0);\n    if(intersectionRayQuad(ori*1.2,dir,vec2(200.0),p))\n        color = getObjectColor(p,vec3(0.,0.,1.),dir);\n               \n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}