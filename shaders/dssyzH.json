{
    "Shader": {
        "info": {
            "date": "1687708963",
            "description": "All year long I'm going to just focus on truchet tiles and the likes! \nsmoothstep on my sine wave",
            "flags": 0,
            "hasliked": 0,
            "id": "dssyzH",
            "likes": 26,
            "name": "Year of Truchets #043",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "truchet"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "/**\n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #043\n    06/25/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n\n*/\n\n#define R    \t\tiResolution\n#define T \t    \tiTime\n#define M \t    \tiMouse\n\n#define PI          3.1415926\n#define PI2         6.2831853\n\n#define MIN_DIST    1e-3\n#define MAX_DIST 55.\n\n// constants\nconst float size = 1.5;\nconst float hlf = size*.5;\nconst float grid = 1.;\n\nvec3 hit,hitPoint;\nmat2 r45;\nfloat speed;\n\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21( vec2 p ) { return fract(sin(dot(p,vec2(23.43,84.21))) *4832.3234); }\n\n//@iq sdf & extrude\nfloat box( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\nfloat opx(in float sdf, in float pz, in float h){\n    vec2 w = vec2( sdf, abs(pz) - h );\n  \treturn min(max(w.x, w.y), 0.) + length(max(w, 0.));\n}\n\nvec2 map(vec3 pos){\n    vec2 res = vec2(1e5,0);\n    pos-=vec3(1,.1,-speed);\n\n    vec2 uv = pos.xz;\n    vec2 id = vec2(floor((uv.x+hlf)/size)-grid,floor((uv.y+hlf)/size));\n    vec2 q = vec2(uv.x-size*clamp(round(uv.x/size),-grid,grid),mod(uv.y+hlf,size)-hlf);\n    \n    vec3 pp = vec3(q.x,pos.y,q.y);\n    vec3 pr = vec3(pos.xy,q.y);\n    \n    float rnd = hash21(id);\n    if (rnd>.5) q.x = -q.x; \n    rnd = fract(rnd*32.78);\n    \n    float mv = .06+.05*sin(pos.z*.4), mx = mv*1.5;\n    const vec3 b2 = vec3(1.,.15,hlf);\n\n    vec2 spc = vec2(-hlf,.0);\n    vec2 p2 = vec2(length(q+spc),length(q-spc));\n    vec2 pq = p2.x<p2.y? q+spc : q-spc;\n\n    pq *= r45;\n\n    float d = length(pq.x);\n    if(rnd>.675) d = min(length(q.x),length(q.y));\n\n    d = abs(d)-mv;\n\n    float sw = .35+.25*sin(pos.z*.45-T*.75);\n    sw = smoothstep(.2,.5,sw);\n    \n    float pl = length(vec2(abs(q.x)-hlf,q.y))-(mx);\n          pl = min(length(vec2(q.x,abs(q.y)-hlf))-(mx),pl);\n\n    float d3 = opx(d,pos.y-sw,sw);\n    float ct = box(pp,vec3(hlf,5,hlf));\n    d3=max(max(d3,ct),-(pl));\n    if(d3<res.x) {\n        res = vec2(d3,2.);\n        hit = pos-vec3(0,sw,0);\n    }\n    \n    sw += .02;\n    float pole = opx(pl,pos.y-sw, sw);\n    if(pole<res.x) {\n        res = vec2(pole,3.);\n        hit = pos;\n    }\n\n    float gnd = box(pp+vec3(0,b2.y+.05,0),b2);\n    if(gnd<res.x) {\n        res = vec2(gnd,1.);\n        hit = pp;\n    }\n    \n    float wll = box(pr-vec3(8.3,15,0),vec3(.1,17,b2.x));\n    if(wll<res.x) {\n        res = vec2(wll,6.);\n        hit = pos;\n    }\n    \n    float flr = pos.y+.275;\n    if(flr<res.x) {\n        res = vec2(flr,6.);\n        hit = pos;\n    }\n    return res;\n}\n\n//Tetrahedron technique\n//https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float t) {\n    float e = MIN_DIST*t;\n    vec2 h = vec2(1.,-1.)*.5773;\n    return normalize( h.xyy*map( p + h.xyy*e ).x + \n\t\t\t\t\t  h.yyx*map( p + h.yyx*e ).x + \n\t\t\t\t\t  h.yxy*map( p + h.yxy*e ).x + \n\t\t\t\t\t  h.xxx*map( p + h.xxx*e ).x );\n}\n\nvec2 marcher(vec3 ro, vec3 rd) {\n    float d = 0., m = 0.;\n    for(int i=0;i<128;i++){\n        vec2 ray = map(ro + rd * d);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST) break;\n        d += i<64?ray.x*.35:ray.x*.9;\n        m  = ray.y;\n    }\n    return vec2(d,m);\n}\n\n//@iq hsv2rgb\nvec3 hsv2rgb( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.+vec3(0,4,2),6.)-3.)-1., 0., 1. );\n\treturn c.z * mix( vec3(1), rgb, c.y);\n}\n\nvec3 FC = vec3(0.114,0.169,0.227);\nvec4 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, inout float d, vec2 uv, float loop) {\n\n    vec3 C = vec3(0);\n    float m = 0.;\n    vec2 ray = marcher(ro,rd);\n    d=ray.x;m=ray.y;\n    \n    // save globals post march\n    hitPoint = hit;  \n\n    vec3 p = ro + rd * d;\n    if(d<MAX_DIST)\n    {\n             p = ro + rd * d;\n        vec3 n = normal(p,d);\n        vec3 lpos =vec3(-6.,12.,12.);\n        vec3 l = normalize(lpos-p);\n        \n        float diff = clamp(dot(n,l),.09,.99);\n        \n        float shdw = 1.;\n        for( float t=.01; t < 16.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 14.*h/t);\n            t += h;\n            if( shdw<MIN_DIST ) break;\n        }\n        diff = mix(diff,diff*shdw,.65);\n        \n        vec3 h = vec3(.25);\n\n        if(m==1.) {\n            float pz = (p.z+speed);\n            vec3 k = hsv2rgb(vec3(pz*.02,.95,.35));\n            vec2 ft = fract((vec2(p.x,pz)*4.+vec2(T*.2,0))*r45)-.5;\n            float fmod = mod(floor(ft.x),3.);\n            h = mix(k,vec3(.075),fmod==0.?1.:0.);\n            ref = fmod==0.?vec3(0.):k;\n        }\n        if(m==2.) { \n            h = hsv2rgb(vec3(hitPoint.z*.02,1.,.3)); \n            ref = h; \n        }\n        if(m==3.) { h = vec3(.15); ref = h; }\n        if(m==5.) { \n            h = hsv2rgb(vec3(-hitPoint.z*.02,.75,.3)); \n            ref = h; \n        }\n        if(m==6.) { \n            vec3 f = fract((hitPoint+vec3(0,.275,0))*.5)-.5;\n            h = vec3(.65);\n            if(f.x*f.y*f.z>.0)h=vec3(.55);\n            ref = h*.5; \n        }\n        \n        C = (diff*h);\n        if(loop==0.) C = mix(FC,C,exp(-.000015*d*d*d*d));\n         \n        ro = p+n*.001;\n        rd = reflect(rd,n);\n    } \n\n    return vec4(C,d);\n}\n\nmat2 rx,ry;\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    r45 = rot(.78539816);\n    speed = T*1.05; \n\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    vec3 ro = vec3(0,.75,7);\n    vec3 rd = normalize(vec3(uv,-1));\n\n    float x = M.xy==vec2(0) || M.z <0. ? .0 : (M.y/R.y * .4-.2)*PI;\n    float y = M.xy==vec2(0) || M.z <0. ? .0 : (M.x/R.x * .6-.3)*PI;\n\n    float ff = .35+.25*cos(T*.035), fx = .6*sin(T*.065);\n\n    rx = rot(-(.25+ff)-x), ry = rot(-1.85-fx-y);\n    \n    ro.zy *= rx; ro.xz *= ry; \n    rd.zy *= rx; rd.xz *= ry;\n    \n    // reflection loop (@BigWings)\n    vec3 C = vec3(0), ref = vec3(0), fil = vec3(.95);\n    float d =0., a = 0.;\n    \n    // up to 4 is good - 2 average bounce\n    for(float i=0.; i<3.; i++) {\n        vec4 pass = render(ro, rd, ref, d, uv, i);\n        C += pass.rgb*fil;\n        fil*=ref;\n        if(i==0.)a=pass.w;\n    }\n           \n    C = mix(FC,C,exp(-.000015*a*a*a*a));\n    C = pow(C, vec3(.4545));\n    O = vec4(C,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}