{
    "Shader": {
        "info": {
            "date": "1631610882",
            "description": "a",
            "flags": 0,
            "hasliked": 0,
            "id": "7sV3WD",
            "likes": 37,
            "name": "Rectagular Subdivisor",
            "published": 3,
            "tags": [
                "2d",
                "squares",
                "subdivide"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 746
        },
        "renderpass": [
            {
                "code": "//Inspired by the work of @okazz\n//https://twitter.com/okazz_/status/1436332410690441219\n\n//I didn't look at their code but the result is similar enough that I wonder if the\n//algorithm is the same. \n\n//I'm pretty sure there's also a famous painting that looks like this but I can't remember it\n\n#define pi 3.1415926535\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\nfloat h11 (float a) {\n    return fract(sin((a)*12.9898)*43758.5453123);\n}\n//iq palette\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos(2.*pi*(c*t+d));\n}\nfloat box(vec2 p, vec2 b){\n    vec2 d = abs(p)-b;\n    return max(d.x,d.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy;\n    vec2 uv = (fragCoord-0.5*R.xy)/R.y;\n    vec3 col = vec3(0);\n    float t = mod(iTime*1.2,6000.);\n    float px = 1./iResolution.y;\n    \n    //You can remove the R.x/R.y to get a square\n    vec2 xRange = vec2(-0.5,0.5)*R.x/R.y;\n    vec2 yRange = vec2(-0.5,0.5);\n    float id = 0.;\n    float seed = floor(t/6.);\n    float a;\n    \n    \n    //PLAY WITH THESE VARIABLES :D\n    float minSize = 0.015;\n    //float breakSize = 0.04;\n    float iters = 10.;\n    float borderSize = 0.003;\n    float minIters = 1.;\n    \n    //minSize = min(minSize,breakSize);\n    for(float i = 0.;i<iters;i++){\n        float xLength = xRange.y-xRange.x;\n        float yLength = yRange.y-yRange.x;\n        float dividex = h21(vec2(i+id,seed))*(xLength)+xRange.x;\n        float dividey = h21(vec2(i+id,seed))*(yLength)+yRange.x;\n        \n        dividex= clamp(dividex,xRange.x+minSize,xRange.y-minSize);\n        dividey= clamp(dividey,yRange.x+minSize,yRange.y-minSize);\n        \n        float mn = min(length(xRange.x-dividex),length(xRange.y-dividex));\n        mn = min(mn,min(length(yRange.x-dividey),length(yRange.y-dividey)));\n        if(mn<minSize&&i-1.>minIters) break;\n        \n        ////////////////////////////////\n        ////////////////////////////////\n        vec2 diff = vec2(0);\n        if(uv.x<dividex){\n            xRange = vec2(xRange.x,dividex);\n            diff.x+=dividex;\n        }\n        else{\n            xRange = vec2(dividex,xRange.y);\n            diff.x-=dividey;\n        }\n        if(uv.y<dividey){\n            yRange = vec2(yRange.x,dividey);\n            diff.y-=dividex;\n        }\n        else{\n            yRange = vec2(dividey,yRange.y);\n            diff.y+=dividey;\n        }\n\n        id = length(diff+10.0);\n        \n        xLength = xRange.y-xRange.x;\n        yLength = yRange.y-yRange.x;\n        xLength*=1.0-abs(pow(abs(cos(t*pi/6.)),5.0));\n        yLength*=1.0-abs(pow(abs(cos(t*pi/6.)),5.0));\n        vec2 center = vec2((xRange.x+xRange.y)/2.,(yRange.x+yRange.y)/2.);\n        a = box(uv-center,vec2(xLength,yLength)*0.5);\n        //if(h11(id)<0.2)a=0.;\n    }\n    id = h11(id)*1000.0;\n    vec3 e = vec3(0.5);\n    vec3 al = pal(id*0.1,e*1.2,e,e*2.0,vec3(0,0.33,0.66));\n    col = clamp(al,0.,1.);\n    col-=smoothstep(-px,px,a+borderSize);\n   // col = vec3(-a*10.0);\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}