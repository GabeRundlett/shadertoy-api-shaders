{
    "Shader": {
        "info": {
            "date": "1597252618",
            "description": "DNA tracer - Result of improvised live code session on Twitch\nLIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 20:00 Uk time:\nhttps://www.twitch.tv/evvvvil_",
            "flags": 0,
            "hasliked": 0,
            "id": "WtfBzX",
            "likes": 24,
            "name": "[TWITCH] DNA tracer",
            "published": 3,
            "tags": [
                "demoscene",
                "landscape",
                "beam",
                "glow",
                "organic",
                "helix",
                "race",
                "dna",
                "flash",
                "dark",
                "network",
                "fly"
            ],
            "usePreview": 1,
            "username": "evvvvil",
            "viewed": 1189
        },
        "renderpass": [
            {
                "code": "// DNA tracer - Result of an improvised live coding session on Twitch\n// LIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 20:00 Uk time: \n// https://www.twitch.tv/evvvvil_\n\nvec2 z,v,e=vec2(.0035,-.0035);float t,tnoi,tt,b,bb,anim,animInv,g,gg;vec3 np,bp,pp,op,po,no,al,ld;\nfloat bo(vec3 p,vec3 r){p=abs(p)-r; return max(max(p.x,p.y),p.z);}\nmat2 r2(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}\nfloat smin( float d1, float d2, float k ){  float h = max(k-abs(d1-d2),0.0);return min(d1,d2)-h*h*0.25/k; }\nvec4 texNoise(vec2 uv){ float f = 0.; f+=texture(iChannel0, uv*.125).r*.5; f+=texture(iChannel0,uv*.25).r*.25; //MERCURTY SDF LIBRARY IS HERE OFF COURSE: http://mercury.sexy/hg_sdf/\n     f+=texture(iChannel0,uv*.5).r*.125; f+=texture(iChannel0,uv*1.).r*.125; f=pow(f,1.2);return vec4(f*.45+.05);}\nvec2 fb( vec3 p,float size )\n{\n  vec2 h,t=vec2(bo(p,vec3(4)),5);  \n  t.x=abs(t.x)-.55;\n  t.x=max(t.x,abs(p.y)-1.);  \n  t.x=smin(t.x,0.4*length(abs(p.yz+tnoi*1.8)-vec2(0,4.*size))-.6*size,1.);\n  h=vec2(bo(p,vec3(4)),3);  \n  h.x=abs(h.x)-.3;\n  h.x=max(h.x,abs(p.y)-1.5);    \n  t=t.x<h.x?t:h;  \n  h=vec2(bo(p,vec3(3.5)),6);  \n  h.x=abs(h.x)-.7;\n  h.x=max(h.x,abs(p.y)-.5);  \n  h.x=max(h.x,abs(abs(abs(p.z)-2.)-1.)-.5);  \n  h.x=max(h.x,abs(abs(abs(p.x)-2.)-1.)-.5);  \n  t=t.x<h.x?t:h;  \n  h=vec2(.6*length(p.yz)-.1+.0*sin(p.x)*.1,6);\n  pp=op; pp.z=mod(pp.z-tt*20.+35.,100.)-50.;\n  g+=0.1/(0.1+h.x*h.x*(40.-39.9*sin(pp.z*.05+.2*sin(pp.x*.3))));\n  t=t.x<h.x?t:h;\n  return t;\n}\nvec2 mp( vec3 p )\n{\n    np=bp=p;\n    op=p;\n    np.xy*=r2(sin(p.z*.15)*.3);  \n    np.z=mod(np.z+tt*5.,24.)-12.; \n    anim = sin(tt*.5+op.z*.03);\n    animInv = cos(tt*.5+op.z*.03);\n    vec2 h,t=vec2(1000);\n    for(int i=0;i<6;i++){\n        np.xz=abs(np.xz)-vec2(4,6);\n        np.xy*=r2(.17);\n    } \n    tnoi=texNoise(vec2(np.x,dot(np.xz,vec2(.5)))*vec2(.15,.3)).r;\n    t=fb(np,1.); \n    np.xz*=r2(.785*sin(np.z*.2));  \n    h=fb(np.xzy,.9);  \n    t=t.x<h.x?t:h; \n    h=fb((np+vec3(4,-4.5,2.))*3.,0.3);h.x/=3.;\n    t=t.x<h.x?t:h;\n    np.xz*=r2(-.785); \n    h=fb((np+vec3(0,-5,1))*5.,0.0);h.x/=5.;\n    t=t.x<h.x?t:h;\n    bp=p-vec3(0,20,0);\n    bp.xy*=r2(-animInv*2.5+tt);\n    b=sin(bp.z*15.)*0.03;\n    h=vec2(length(abs(bp.xy)-vec2(4,0))-.2-b,3);h.x*=0.8;\n    t=t.x<h.x?t:h;\n    bp.z=mod(bp.z-tt*20.,100.)-50.;\n    h=vec2(length(bp.yz)-.1+abs(bp.x)*.03,6);\n    gg+=0.1/(0.1+h.x*h.x*40.);\n    t=t.x<h.x?t:h;\n    pp=bp; bp.z=mod(bp.z+tt*30.,10.)-5.;\n    h=vec2(length(abs(abs(bp.xy)-vec2(1,0))-vec2(.5,0))-.1+abs(pp.z)*.02,6);\n    h.x=max(h.x,pp.z);\n    g+=0.1/(0.1+h.x*h.x*(4.-3.9*animInv));\n    t=t.x<h.x?t:h;\n    t.x*=0.8; return t;\n}\nvec2 tr( vec3 ro,vec3 rd )\n{\n  vec2 h,t=vec2(0.1);\n  for(int i=0;i<128;i++){\n    h=mp(ro+rd*t.x);\n    if(h.x<.0001||t.x>100.) break;\n    t.x+=h.x;t.y=h.y;\n  }  \n  if(t.x>100.) t.y=0.;\n  return t;\n}\n#define a(d) clamp(mp(po+no*d).x/d,0.,1.)\n#define s(d) smoothstep(0.,1.,mp(po+ld*d).x/d)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);\n  tt=mod(iTime,62.82);\n  vec3 ro=mix(vec3(1),vec3(-1,2,2),ceil(sin(tt)))*vec3(cos(tt*.4+1.)*10.,14.-cos(tt*.5)*5.,-10.),\n  cw=normalize(vec3(0,10,0)-ro),\n  cu=normalize(cross(cw,vec3(0,1,0))),\n  cv=normalize(cross(cu,cw)),\n  rd=mat3(cu,cv,cw)*normalize(vec3(uv,.5)),co,fo;  \n  co=fo=vec3(.1,.12,.13)-length(uv)*.15;\n  ld=normalize(vec3(-.1,.5,.3));\n  z=tr(ro,rd);t=z.x;\n  if(z.y>0.){\n    po=ro+rd*t;\n    no=normalize(e.xyy*mp(po+e.xyy).x+e.yyx*mp(po+e.yyx).x+e.yxy*mp(po+e.yxy).x+e.xxx*mp(po+e.xxx).x);\n    al=mix(vec3(.4,.1,.2),vec3(.1,.2,.4),sin(np*.5)*.5+.5)+tnoi;\n    if(z.y<5.)al=vec3(0);\n    if(z.y>5.)al=vec3(1);\n    float dif=max(0.,dot(no,ld)),\n    fr=pow(1.+dot(no,rd),4.);\n    co=mix(al*(a(.05)*a(.1)+.2)*(dif+s(2.)),fo,min(fr,.5));\n    co=mix(fo,co,exp(-.000005*t*t*t));\n  }  \n  fragColor = vec4(pow(co+g*.2*vec3(.1,.2,.7)+gg*.2,vec3(.45)),1);\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}