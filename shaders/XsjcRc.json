{
    "Shader": {
        "info": {
            "date": "1493138547",
            "description": "Great place for a library",
            "flags": 0,
            "hasliked": 0,
            "id": "XsjcRc",
            "likes": 10,
            "name": "Mount Book",
            "published": 3,
            "tags": [
                "reflection",
                "raymarch",
                "sunset",
                "landscape",
                "mountain",
                "library"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 675
        },
        "renderpass": [
            {
                "code": "// \"Mount Book\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec3 HsvToRgb (vec3 c);\n\nconst float pi = 3.14159;\nvec3 vnCylIn, sunDir;\nvec2 bsa[4];\nfloat tCur, dstFar, bCylRad, bCylHt, spShf, dCylIn, dCylOut, yShift, mntHt;\nint idObj;\nconst int idFrm = 1, idBks = 2, idShlf = 3, idSup = 4, idDr = 5, idMnt = 6;\n\nvoid CylHit (vec3 ro, vec3 rd)\n{\n  vec3 s;\n  float a, ai, b, w, ws, srdy;\n  dCylIn = dstFar;\n  dCylOut = dstFar;\n  vnCylIn = vec3 (0.);\n  ro.y -= yShift;\n  a = dot (rd.xz, rd.xz);\n  b = dot (rd.xz, ro.xz);\n  w = b * b - a * (dot (ro.xz, ro.xz) - bCylRad * bCylRad);\n  if (w > 0.) {\n    ws = sqrt (w);\n    srdy = sign (rd.y);\n    if (a > 0.) {\n      ai =  1. / a;\n      dCylIn = (- b - ws) * ai;\n      dCylOut = (- b + ws) * ai;\n    }\n    if (a > 0.) s = ro + dCylIn * rd;\n    else s.y = bCylHt;\n    if (abs (s.y) < bCylHt) vnCylIn.xz = s.xz / bCylRad;\n    else if (srdy * ro.y < - bCylHt) {\n      dCylIn = - (srdy * ro.y + bCylHt) / abs (rd.y);\n      if (length (ro.xz + dCylIn * rd.xz) < bCylRad) vnCylIn.y = - srdy;\n      else dCylIn = dstFar;\n    } else dCylIn = dstFar;\n    if (dCylIn < dstFar) {\n      if (a > 0.) s = ro + dCylOut * rd;\n      else s.y = bCylHt;\n      if (abs (s.y) > bCylHt && srdy * ro.y < bCylHt)\n         dCylOut = (- srdy * ro.y + bCylHt) / abs (rd.y);\n    }\n  }\n}\n\nfloat MountDf (vec3 p)\n{\n  vec3 q;\n  float a, r, hd, s, rMnt;\n  rMnt = 350.;\n  q = p;\n  a = atan (q.z, q.x) / (2. * pi) + 0.5;\n  r = length (q.xz);\n  s = Fbm2 (vec2 (55. * a, 0.3 * r));\n  q.y -= 0.5 * mntHt;\n  a = mod (a + 0.01 * sin (2. * 2. * pi * q.y / mntHt), 1.);\n  hd = 0.02 * (1. +  0.5 * sin (64. * pi * a) + 1. * sin (25. * pi * a)) +\n     0.1 * (s - 0.5);\n  q.y -= 0.51 * rMnt + hd * mntHt;\n  return max (SmoothMin (max (length (q.xz) - rMnt, - PrTorusDf (q.xzy, rMnt, rMnt)),\n     PrCylDf (p.xzy, 0.3 * rMnt, 0.1), 10.), abs (p.y - 0.5 * mntHt) - 0.5 * mntHt);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, r, a, htShf;\n  dMin = dstFar;\n  d = 0.7 * MountDf (p);\n  if (d < dMin) { dMin = d;  idObj = idMnt; }\n  htShf = 0.05 * spShf;\n  r = length (p.xz);\n  a = (r > 0.) ? atan (p.z, - p.x) / (2. * pi) : 0.;\n  p.y -= yShift;\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * floor (7. * a + 0.5) / 7.);\n  qq = q;\n  q.x += 0.77 * bCylRad;\n  q.xz = abs (q.xz) - vec2 (0.03 * bCylRad, 0.1 * bCylRad);\n  d = PrCylDf (q.xzy, 0.008 * bCylRad, bCylHt + 0.2);\n  if (d < dMin) { dMin = d;  idObj = idSup; }\n  q = qq;\n  d = max (r - 1.2 * bCylRad, abs (abs (p.y) - bCylHt - 0.2) - 0.2);\n  q.z = abs (q.z);\n  if (p.y > 0.) d = max (d,\n     min (- (abs (abs (abs (abs (r / bCylRad - 0.52) - 0.25)) - 0.125) -\n     0.065) * bCylRad, dot (q.xz, bsa[0])));\n  d = min (d, length (vec2 (r - 1.15 * bCylRad,\n     abs (abs (q.y + 0.5 * bCylHt) - 0.2 * bCylHt) - 0.1 * bCylHt)) - 0.1);\n  q.xy += vec2 (1.15 * bCylRad, 1.);\n  d = min (min (d, PrCylDf (q.xzy, 0.3, bCylHt + 1.)),\n     max (abs (r - bCylRad) - 0.1, abs (abs (p.y) - bCylHt + 0.19) - 0.2));\n  if (d < dMin) { dMin = d;  idObj = idFrm; }\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (7. * a) + 0.5) / 7.);\n  q.z = abs (q.z);\n  d = max (max (abs (r - 0.77 * bCylRad) - 0.05 * bCylRad,\n     abs (p.y + 0.1 * bCylHt) - 0.7 * bCylHt), - dot (q.xz, bsa[2]));\n  if (d < dMin) { dMin = d;  idObj = idBks; }\n  d = max (max (max (abs (r - 0.77 * bCylRad) - 0.07 * bCylRad,\n     abs (p.y + 0.1 * bCylHt) - (0.7 * bCylHt + htShf)), - dot (q.xz, bsa[3])),\n     - max (htShf - (abs (mod (p.y + 0.1 * bCylHt + 0.5 * spShf, spShf) -\n     0.5 * spShf)), - dot (q.xz, bsa[2])));\n  if (d < dMin) { dMin = d;  idObj = idShlf; }\n  d = max (max (max (abs (r - bCylRad) - 0.15,\n     abs (p.y + 0.3 * bCylHt) - 0.7 * bCylHt), dot (q.xz, bsa[0])),\n     - max (0.08 - abs (p.y - 0.4 * bCylHt + 0.08), dot (q.xz, bsa[1])));\n  if (d < dMin) { dMin = d;  idObj = idDr; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 FloorCol (vec2 p)\n{\n  return mix (vec3 (0.8, 0.4, 0.2), vec3 (0.5, 0.25, 0.1),\n     Fbm2 (20. * vec2 (1., 0.1) * p.xy)) *\n     (0.5 + 0.5 * SmoothBump (0.03, 0.97, 0.01, mod (3. * p.x, 1.)));\n}\n\nvec3 WoodCol (vec3 p, vec3 n)\n{\n  float f;\n  p *= 4.;\n  f = dot (vec3 (Fbm2 (p.zy * vec2 (1., 0.1)),\n     Fbm2 (p.zx * vec2 (1., 0.1)), Fbm2 (p.xy * vec2 (1., 0.1))), abs (n));\n  return mix (vec3 (0.9, 0.5, 0.3), vec3 (0.55, 0.35, 0.1), f);\n}\n\nfloat ObjSShadowN (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.5;\n    if (sh < 0.05) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nfloat ObjSShadowF (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 1.;\n  for (int j = 0; j < 30; j ++) {\n    h = MountDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 12.;\n    if (sh < 0.05) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, p;\n  float ds, fd, att, attSum, d, sd;\n  p = rd * (200. - ro.y) / max (rd.y, 0.0001);\n  ds = 0.1 * sqrt (length (p));\n  p += ro;\n  fd = 0.002 / (smoothstep (0., 10., ds) + 0.1);\n  p.xz *= fd;\n  p.xz += 0.1 * tCur;\n  att = Fbm2 (p.xz);\n  attSum = att;\n  d = fd;\n  ds *= fd;\n  for (int j = 0; j < 4; j ++) {\n    attSum += Fbm2 (p.xz + d * sunDir.xz);\n    d += ds;\n  }\n  attSum *= 0.3;\n  att *= 0.3;\n  sd = clamp (dot (sunDir, rd), 0., 1.);\n  skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * sd);\n  col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - sd) *\n     max (rd.y - 0.1, 0.)));\n  attSum = 1. - smoothstep (1., 9., attSum);\n  col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.3, 0.3, 0.3), att), attSum) +\n     vec3 (1., 0.4, 0.) * pow (attSum * att, 3.) * (pow (sd, 10.) + 0.5);\n     return col;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float sh;\n  if (rd.y >= 0.) col = SkyCol (ro, rd);\n  else {\n    ro -= (ro.y / rd.y) * rd;\n    col = (0.7 + 0.3 * Fbm2 (0.5 * ro.xz)) * vec3 (0.3, 0.15, 0.);\n    vn = VaryNf (0.1 * ro, vec3 (0., 1., 0.), 10.);\n    sh = ObjSShadowF (ro, sunDir);\n    col *= (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.) +\n       0.1 * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.));\n    col = mix (col, SkyCol (ro, normalize (vec3 (vn.x, 0.1, vn.z))),\n       0.2 * length (col));\n  }\n  return col;\n}\n\nvec3 ObjCol (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, q;\n  vec2 gbBk, bt;\n  float a, r, bh, spec, sh;\n  spec = 0.1;\n  vn = ObjNf (ro);\n  q = ro;\n  r = length (q.xz);\n  a = (r > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.;\n  if (idObj == idMnt) {\n    col = (0.7 + 0.3 * Fbm2 (0.5 * q.xz)) *\n       mix (vec3 (0.3, 0.15, 0.), vec3 (0.3, 0.3, 0.35),\n       q.y / mntHt + 0.2 * Fbm2 (0.2 * q.xz) - 0.1);\n    if (r < 1.21 * bCylRad && vn.y > 0.99) col *= 0.6;\n    if (q.y > 0.5 * mntHt && vn.y > 0.99) vn = VaryNf (1.5 * q, vn, 5.);\n    else if (q.y < 0.1 * mntHt) vn = VaryNf (0.1 * q, vn, 10.);\n    else vn = VaryNf (0.5 * q, vn, 10.);\n  } else if (idObj == idBks) {\n    bt = vec2 (5000. * a, 200. * q.y);\n    a *= (dot (vn.xz, q.xz) > 0.) ? 600. : 500.;\n    gbBk = floor (vec2 (q.y / spShf, a));\n    bh = (0.7 + 0.3 * Fbm2 (gbBk * vec2 (19., 31.))) * spShf;\n    q.y = mod (q.y, spShf);\n    if (q.y < bh) {\n      q.xy = vec2 (2. * mod (a, 1.) - 1., q.y / bh - 0.5);\n      col = vec3 (HsvToRgb (vec3 (Fbm2 (gbBk * vec2 (17., 11.)), 1.,\n         0.7 * SmoothBump (0.08, 0.92, 0.01, 0.55 + 0.45 * q.x))));\n      if (abs (q.x) < 0.3 && abs (q.y) < 0.2 &&\n         Noisefv2 (gbBk * vec2 (19., 31.) + floor (bt)) > 0.7) {\n        col *= 4.;\n      } else {\n        spec = 0.3;\n        vn.xz = Rot2D (vn.xz, q.x);\n      }\n    } else {\n      col = vec3 (0.02);\n      spec = -1.;\n    }\n  } else if (idObj == idShlf) {\n     col = WoodCol (vec3 (5. * (mod (7. * a + 0.5, 1.) - 0.5), ro.y, r), vn);\n  } else if (idObj == idSup) {\n    col = vec3 (0.2, 0.1, 0.);\n  } else if (idObj == idFrm) {\n    if (ro.y < bCylHt + mntHt && r < bCylRad && vn.y > 0.99) {\n       if (r > 0.05 * bCylRad) col = FloorCol (vec2 (42. * a, r));\n       else col = vec3 (0.4, 0.3, 0.1);\n    } else {\n      col = vec3 (0.75, 0.7, 0.7);\n      if (ro.y > yShift + bCylHt + 0.39) {\n        vn = vec3 (0., Rot2D (vec2 (1., 0.), -0.1 * pi * sin (pi *\n           (0.5 - mod (16. * (r / bCylRad - 0.52), 1.)))));\n        vn.xz = Rot2D (vn.xz, 2. * pi * a);\n      }\n      vn = VaryNf (20. * ro, vn, 1.);\n    }\n  } else if (idObj == idDr) {\n    col = vec3 (0.4, 0.4, 0.5);\n  }\n  sh = (idObj != idMnt) ? ObjSShadowN (ro, sunDir) : ObjSShadowF (ro, sunDir);\n  if (spec >= 0.) col *= 0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.) +\n     spec * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n  col = mix (col, SkyCol (ro, normalize (vec3 (vn.x, 0.1, vn.z))), 0.2 * length (col));\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, colR;\n  float cbc[4], dstObj;\n  cbc[0] = 0.4;  cbc[1] = 0.37;  cbc[2] = 0.9;  cbc[3] = 0.85;\n  for (int k = 0; k < 4; k ++) \n     bsa[k] = vec2 (sin (cbc[k] * 2. * pi / 28.), cos (cbc[k] * 2. * pi / 28.));\n  dstObj = ObjRay (ro, rd);\n  col = (dstObj < dstFar) ? ObjCol (ro + rd * dstObj, rd) : BgCol (ro, rd);\n  CylHit (ro, rd);\n  if (dCylIn < min (dstObj, dstFar)) {\n    col *= 0.9;\n    if (dCylOut < min (dstObj, dstFar)) col *= 0.8;\n    ro += dCylIn * rd;\n    rd = reflect (rd, vnCylIn);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n    colR = (dstObj < dstFar) ? ObjCol (ro + rd * dstObj, rd) : BgCol (ro, rd);\n    col = mix (col, colR, smoothstep (0.7, 0.95,\n       1. - pow (abs (dot (rd, vnCylIn)), 5.)));\n  }\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, u, vd;\n  vec2 canvas, uv;\n  float el, az, zmFac, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  mntHt = 100.;\n  bCylRad = 20.;\n  bCylHt = 4.;\n  yShift = bCylHt + 1. + mntHt;\n  spShf = 0.7 * bCylHt / 3.;\n  dstFar = 1000.;\n  az = 0.011 * 2. * pi * tCur;\n  el = 0.5 * pi * (0.4 - 0.3 * sin (0.018 * 2. * pi * tCur));\n  zmFac = 3. + 22. * SmoothBump (0.2, 0.7, 0.1, mod (0.05 * tCur, 1.));\n  if (mPtr.z > 0.) {\n    el = clamp (el - pi * mPtr.y, 0.05, 1.5);\n    az = az - 2.5 * pi * mPtr.x;\n  }\n  ro = 400. * vec3 (cos (el) * cos (az), sin (el), cos (el) * sin (az));\n  vd = normalize (vec3 (0., yShift * pow (zmFac / 25., 0.3), 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (1., 0.5, -1.));\n  fragColor = vec4 (pow (clamp (ShowScene (ro, rd), 0., 1.), vec3 (0.7)), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + vec2 (- q.y, q.x) * sin (a);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 4; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}