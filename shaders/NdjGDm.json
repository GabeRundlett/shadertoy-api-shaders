{
    "Shader": {
        "info": {
            "date": "1617505846",
            "description": "won revision 2021 semifinals. this might be unstable but idk why",
            "flags": 32,
            "hasliked": 0,
            "id": "NdjGDm",
            "likes": 20,
            "name": "Pacman Petri Dish",
            "published": 3,
            "tags": [
                "diffusion",
                "reactiondiffusion",
                "shadershowdown",
                "rd",
                "livecode",
                "revision2021"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 636
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//couldn't fix eyes during the showdown... uncomment to see how it looked at the end of showdown\n#define FIX_EYES\n\nfloat corner(vec2 p) {\n  return length(max(p,0.)) + min(0.,max(p.x,p.y));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat scene(vec3 p) {\n  p.yz += tan(asin(sin(vec2(iTime*3., iTime*2.5)))*.7)*.8;\n  vec2 dir = sign(cos(vec2(iTime*3., iTime*2.5)));\n  p.yz *= dir;\n  p.yz *= -1.;\n  p = erot(p, vec3(1,0,0), radians(-45.));\n  p.z = abs(p.z);\n  p = erot(p, vec3(1,0,0), -abs(sin(iTime*5.)));\n  float wd = length(p.yz) - .3;\n  wd = max(wd, .05- corner(p.yz*vec2(-1,1)));\n  return corner(vec2(wd,abs(p.x)))-.05;\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p) - mat3(0.001);\n  return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nfloat redo(float x) {\n  return 1.-x;\n}\nfloat undo(float x) {\n  return 1.-x;\n}\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n  float k = dot(p-a,b-a)/dot(b-a,b-a);\n  return distance(p,mix(a,b,clamp(k,0.,1.)));\n}\n\nfloat zombiegost(vec2 p) {\n  float bod = linedist(p, vec2(0,-.5), vec2(0,.5));\n  \n  float eyes = length(vec2(abs(p.x)-.2, .5+p.y))-.1;\n  p.x = asin(sin(p.x*40.+floor(iTime)*2.))/40.;\n  float dt = dot(p, vec2(1));\n  dt = max(bod,dt)-.5;\n#ifdef FIX_EYES\n  return max(-eyes,dt);\n#endif\n  return dt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec2 olduv = fragCoord/iResolution.xy;\n  vec2 pixelsize = 1./iResolution.xy;\n  \n  float kr = .055 + length(uv*2.)*.02 - sin(iTime)*.02;\n  float fr = .055;\n  float da = 1.;\n  float db = .1;\n  vec4 past = texture(iChannel0, olduv);\n  past.z = undo(past.z );\n  float scale = 2.5+sin(iTime*3.);\n  vec4 conv = vec4(0);\n  for (int i = -1; i <= 1; i++) {\n  for (int j = -1; j <= 1; j++) {\n    vec4 smpl = texture(iChannel0, olduv + vec2(i,j)*pixelsize*scale);\n    smpl.z = undo(smpl.z);\n    float coeff = (j == 0 && i == 0) ? -1. : ((i == 0 || j == 0 ) ? .2 : .05 );\n    conv += coeff*smpl;\n  }\n  }\n  float olda = past.z;\n  float t = .8;\n  float a = olda + (da*conv.z - olda*past.w*past.w + fr*(1.-olda))*t;\n  float b = past.w + (db*conv.w + olda*past.w*past.w - (fr+kr)*past.w)*t;\n  a = redo(a);\n  b = clamp(b,0.,1.);\n  a = clamp(a,0.,1.);\n  //if (isnan(a) || isinf(a) || isnan(b) || isinf(b)) { a = 0.; b = 1.; }\n  fragColor = vec4(0,a*.5,a,b);\n\n  vec3 cam = normalize(vec3(1,uv));\n  vec3 init = vec3(-4,0,0);\n  vec3 p = init;\n  bool hit = false;\n  for (int i = 0; i < 100; i++ ){\n    float dist = scene(p);\n    hit = dist*dist < 1e-6;\n    p+= dist*cam;\n    if (hit) break;\n  }\n  vec3 n = norm(p);\n  vec3 r = reflect(cam,n);\n  float spec = length(sin(r*3.)*.3+.7)/sqrt(3.);\n  vec3 col = vec3(0.9,.7,.2)*spec + pow(spec,8.);\n  if (hit) {\n    fragColor = vec4(col, 1.);\n  }\n  if (zombiegost(uv*-3. + vec2(asin(sin(iTime*2.)), sin(iTime*2.7)*.5)) < 0.) {\n    fragColor.r = 1.;\n  }\n  if (iFrame == 0) {\n  fragColor = vec4(0,0,0,1);\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}