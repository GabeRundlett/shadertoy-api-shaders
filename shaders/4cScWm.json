{
    "Shader": {
        "info": {
            "date": "1722384723",
            "description": "more daily shaders, this one looks dope on a projector",
            "flags": 0,
            "hasliked": 0,
            "id": "4cScWm",
            "likes": 0,
            "name": "jul302024v2",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 60
        },
        "renderpass": [
            {
                "code": "\nvec3 palette(float t) {\n    vec3 a = vec3(1.000,1.000,1.000);\n    vec3 b = vec3(1.000,1.000,0.584);\n    vec3 c = vec3(1.000,1.000,0.682);\n    vec3 d = vec3(0.000,1.731,1.000);\n    \n    return a + b*cos(6.28318*(c*t+d) );\n}\n\nfloat easeInOutQuad(float t) {\n    return t < 0.5 ? 2.0 * t * t : 1.0 - pow(-2.0 * t + 2.0, 2.0) / 2.0;\n}\n\nfloat loopTime(float t) {\n    float loopDuration = 12.; // 8 seconds forward, 8 seconds backward\n    float halfLoop = loopDuration / 2.0;\n    float loopedTime = mod(t, loopDuration);\n    \n    if (loopedTime < halfLoop) {\n        float normalizedTime = loopedTime / halfLoop;\n        return easeInOutQuad(normalizedTime) * halfLoop;\n    } else {\n        float normalizedTime = (loopedTime - halfLoop) / halfLoop;\n        return halfLoop - easeInOutQuad(normalizedTime) * halfLoop;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y; \n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    float loopedTime = loopTime(iTime);\n    \n    for(float i = 0.0; i <8.0; i++){\n    \n        uv = fract(uv * .7) -0.5;\n        float d = length(uv);\n        vec3 col = palette(loopedTime/99.0 + length(uv0));\n        d = sin(d*.75 + loopedTime/4.5)/8.;\n        d = abs(d);\n        d = .015 / d;\n        finalColor += col * d;\n        \n    }\n    \n    // Add vignette effect\n    vec2 vignetteUV = fragCoord / iResolution.xy;\n    vignetteUV = (vignetteUV - 0.5) * 2.0;\n    float vignette = 1.0 - dot(vignetteUV, vignetteUV);\n    vignette = pow(vignette, 1.5);\n    \n    finalColor *= vignette;\n    \n    // Apply smoothstep to the entire final color\n    finalColor = smoothstep(vec3(.0), vec3(3.0), finalColor);\n    \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}