{
    "Shader": {
        "info": {
            "date": "1628107380",
            "description": "fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "Nt2XRV",
            "likes": 0,
            "name": "FractalPractice01",
            "published": 3,
            "tags": [
                "fractal",
                "sdf"
            ],
            "usePreview": 0,
            "username": "lambmeow",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define resolution iResolution\nfloat c  =0.;\n\nmat2 rot(float f)\n{\n\tfloat s = sin(f), c = cos(f);\n\treturn mat2(c, -s , s, c);\n}\nfloat scene(vec3 p)\n{\n\t\n    for( int i = 0; i<10; ++i){\n        float t = time*.2;\n        p = abs(p -.2);\n        p.xy *= rot(t + c);\n\t\t\n        c -= .1;\n\t}\n\t\n\tfloat thing = max(dot(p , normalize(vec3(45., 0.,-524.))), length(p) - 2.);\n\t\n\treturn max(thing, p.y);\n}\n\n\nvec3 calcnorm(vec3 value)\n{\n    vec3 n = vec3(0);\n    if(length(n - value) == 0.)\n    \treturn vec3(0);\n    for(int i = 0; i < 4; i++)\n    {\n        vec3 eps = 0.001 * (vec3(9 >> i&1, i >> 1 & 1, i & 1) * 2. - 1.);\n        n += eps * scene(value + eps);\n    }\n    return normalize(n);\n}\n\n\nvec4 rc(vec3 ro, vec3 rd)\n{\n\tfloat len = 0.;\n\tfloat closest = 100.;\n\tfor(int i = 0; i < 255; i ++)\n\t{\n\t\tfloat dist = scene(ro + rd * len);\n\t\t\n\t\tclosest = min(closest, dist/.01);\n\t\tif(dist < 0.001)\n\t\t\treturn vec4(ro + rd * len,closest);\n\t\t\n\t\tlen += dist;\n\t\t\n\t\tif(len  > 100. ) \n\t\t\tbreak;\n\t}\n\t\n\treturn vec4(ro + rd * len,closest);\n}\n\nmat3 cam(vec3 pos, vec3 la, vec3 up)\n{\n\tvec3 ww = normalize(la - pos);\n\tvec3 vv = normalize(up);\n\tvec3 uu = normalize(cross(ww, vv));\n\treturn mat3(ww, uu ,vv);\n} \n\n\nvec3 pallete( vec3 pos)\n{\n\tfloat len = length(pos) / 15.;\n\t\n\treturn mix(1.- vec3 (0., 0.5, 0.7), 1.-vec3(1., 0.,10.), len)/100.; \n}\nvec3 color(vec4 pos)\n{\n\tvec3 lightcolor = vec3( 1, 1, 1), lightpos = vec3(0, 4, -4);\n\tvec3 norm = calcnorm(pos.xyz);\n\t\n\treturn pallete(pos.xyz)- (1./(1. + (pos.w * 0.3))) * vec3(0,1,1);\n}\n\nvoid mainImage(out vec4 fc , in vec2 uv)\n{\n\tvec2 r = resolution.xy, u = ((2.*uv) - r)/r.y;\n\t\n\tvec3 ro = vec3(0., 0., -4.);\n\n\tvec3 rd = normalize(vec3(u, 2.0));\n\t\n\n\t\n\tfc = vec4(color(rc(ro,rd) ), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}