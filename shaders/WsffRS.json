{
    "Shader": {
        "info": {
            "date": "1588441792",
            "description": "Wrote this piece on and off over the past two weeks to get back into raymarching :) Water inspired by the sum of sines method in Very fast procedural ocean by afl_ex. It has some continuity bugs, but I'm quite pleased with the result ðŸŒŠ\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WsffRS",
            "likes": 104,
            "name": "Artifact at Sea",
            "published": 3,
            "tags": [
                "raymarch",
                "sdf",
                "water",
                "ocean",
                "glow",
                "night"
            ],
            "usePreview": 1,
            "username": "samlo",
            "viewed": 2483
        },
        "renderpass": [
            {
                "code": "#define time iTime\n\nconst float CAM_FAR = 20.0;\nconst vec3 BACKGROUND = vec3(0.1, 0.1, 0.13);\nconst int WATER_MARCH_ITERATIONS = 12;\nconst int WATER_NORMAL_ITERATIONS = 39;\nconst float PI = 3.14159265359;\n\nconst int NUM_PARTICLES = 20;\nvec4 ppos[NUM_PARTICLES];\n\n// calculated per fragment\nvec3 artifactOffset;\nmat3 artifactRotation;\nvec3 artifactAxis;\nfloat flicker;\nvec3 camFwd;\nvec3 camUp;\n\nfloat rand(float n) {\n    return fract(sin(n) * 43758.5453123);\n}\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\nmat4 viewMatrix (vec3 dir, vec3 up) { \n    vec3 f = normalize(dir);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4( s,   0.0),\n        vec4( u,   0.0),\n        vec4(-f,   0.0),\n        vec4( 0.0, 0.0, 0.0, 1)\n    );\n}\nmat3 rotationAlign(vec3 d, vec3 z) {\n    vec3  v = cross(z, d);\n    float c = dot(z, d);\n    float k = 1.0/(1.0+c);\n    return mat3(v.x*v.x*k + c,     v.y*v.x*k - v.z,    v.z*v.x*k + v.y,\n                v.x*v.y*k + v.z,   v.y*v.y*k + c,      v.z*v.y*k - v.x,\n                v.x*v.z*k - v.y,   v.y*v.z*k + v.x,    v.z*v.z*k + c    );\n}\nfloat intersectPlane(vec3 origin, vec3 direction, vec3 point, vec3 normal) { \n    return clamp(dot(point - origin, normal) / dot(direction, normal), -1.0, 9991999.0); \n}\nvec3 calcRay(vec2 uv, float fov, float aspect) {\n    uv = uv * 2.0 - 1.0;\n    float d = 1.0 / tan(radians(fov) * 0.5);\n    return normalize(vec3(aspect * uv.x, uv.y, d));\n}\nvec2 getWave(vec2 position, vec2 dir, float speed, float frequency, float timeshift) {\n    float x = dot(dir, position) * frequency + timeshift * speed;\n    float wave = exp(sin(x) - 1.0);\n    float dist = wave * cos(x);\n    return vec2(wave, -dist);\n}\nfloat heightmap(vec2 worldPos, int iterations) {\n    const float scale = 0.13;\n    vec2 p = worldPos * scale;\n    vec2 p2 = (artifactOffset.xz - vec2(0.0, 1.0)) * scale;\n    float d = clamp(length(p2 - p) / 0.8, 0.0, 1.0);\n    d = (1.0 - smoothstep(0.0, 1.0, d)) * 0.8;\n    float angle     = 0.0;\n    float freq      = 5.0;\n    float speed     = 2.0;\n    float weight    = 1.9;\n    float wave      = 0.0;\n    float waveScale = 0.0;\n    vec2 dir;\n    vec2 res;\n    for (int i = 0; i < iterations; i++) {\n        dir = vec2(cos(angle), sin(angle));\n        res = getWave(p, dir, speed, freq, time);\n        p += dir * res.y * weight * 0.05;\n        wave += res.x * weight - d;\n        angle += 12.0;\n        waveScale += weight;\n        weight = mix(weight, 0.0, 0.2);\n        freq *= 1.18;\n        speed *= 1.06;\n    }\n    return wave / waveScale;\n}\nvec3 waterNormal(vec2 p, float eps) {\n    vec2 h = vec2(eps, 0.0);\n    #define i WATER_NORMAL_ITERATIONS\n    return normalize(vec3(heightmap(p - h.xy, i) - heightmap(p + h.xy, i),\n                          2.0 * eps,\n                          heightmap(p - h.yx, i) - heightmap(p + h.yx, i)));\n}\nfloat octahedron(vec3 p, float s) {\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\nvoid artifact(vec3 p, inout float curDist, inout vec3 glowColor, inout int id) {\n    p -= artifactOffset;\n    p = artifactRotation * p;\n    float dist = octahedron(p, 1.2);\n    const float glowDist = 4.8;\n    if (dist < glowDist) {\n        float d = dist + rand(dist) * 1.7;\n        glowColor += vec3(0.75, 0.55, 0.45) * clamp(1.0 - pow((d / glowDist), 5.0), 0.0, 1.0) * 0.035 * flicker; // glow\n    }\n    if (dist < curDist) {\n        curDist = dist;\n        id = 1;\n    }\n}\nvoid particles(vec3 p, inout float curDist, inout vec3 glowColor, inout int id) {\n    float t;\n    float angle;\n    float radius;\n    float dist = CAM_FAR;\n    const float glowDist = 0.2;\n    for (int i = 0; i < NUM_PARTICLES; i++) {\n        dist = length(p - ppos[i].xyz) - 0.005;\n        if (dist < glowDist && false) {\n            float d = dist + rand(dist) * 0.5;\n            glowColor += clamp(1.0 - d / glowDist, 0.0, 1.0) * 0.005;\n        }\n        if (dist < curDist) {\n            curDist = dist;\n            id = 2;\n        }\n    }\n}\nfloat objects(vec3 p, inout vec3 glowColor, inout int objId) {\n    float dist = CAM_FAR;\n    artifact(p, dist, glowColor, objId);\n    particles(p, dist, glowColor, objId);\n    return dist;\n}\nfloat artifactDist(vec3 p) {\n    p -= artifactOffset;\n    p = artifactRotation * p;\n    return octahedron(p, 1.2);\n}\nfloat objectsDist(vec3 p) {\n    return artifactDist(p);\n}\nvec3 objectsNormal(vec3 p, float eps) {\n    vec2 h = vec2(eps, 0);\n    #define f artifactDist\n    return normalize(vec3(f(p + h.xyy) - f(p - h.xyy),\n                          f(p + h.yxy) - f(p - h.yxy),\n                          f(p + h.yyx) - f(p - h.yyx)));\n}\nvec3 objectsColor(int id, vec3 normal, vec3 ray) {\n    if (id == 1) { // artifact\n        float l = dot(normal, normalize(vec3(0.0, 1.0, 0.5)));\n        float hl = mix(0.8, 1.5, l * 0.5 + 0.5);\n        return vec3(0.85, 0.65, 0.55) * hl * flicker;\n    }\n    if (id == 2) {\n        return vec3(0.85, 0.65, 0.55) * 1.5;\n    }\n    return vec3(1.0, 1.0, 0.0); // shouldn't happen\n}\nvoid marchObjects(vec3 eye, vec3 ray, float wDepth, inout vec4 color) {\n    float dist = 0.0;\n    int id;\n    vec3 rayPos = eye + ray * dist;\n    vec3 c;\n    float depth = CAM_FAR;\n    vec3 glowColor = vec3(0.0);\n    for (int i = 0; i < 100; i++) {\n        dist = objects(rayPos, color.rgb, id);\n        depth = distance(rayPos, eye);\n        if (depth > wDepth) {\n            break;\n        }\n        if (dist < 0.01) {\n            vec3 normal = objectsNormal(rayPos, 0.01);\n            color = vec4(objectsColor(id, normal, ray), depth);\n            return;\n        }\n        rayPos += ray * dist;\n    }\n}\nvec3 waterColor(vec3 ray, vec3 normal, vec3 p) {\n    vec3 color = vec3(0.0);\n    float fogDist = length(p - vec3(0.0, 0.0, -6.));\n    float dist = 0.0;\n    int objId = 0;\n    vec3 refl = reflect(ray, normal);\n    vec3 rayPos = p + refl * dist;\n    vec3 dir = normalize(artifactOffset - p);\n    if (length(p.xz - artifactOffset.xz) < 8.5 && dot(refl, dir) > -0.25) { // hacky but this way we aren't reflecting on every single fragment\n        for (int i = 0; i < 40; i++) {\n            dist = objects(rayPos, color, objId);\n            if (dist < 0.01) {\n                vec3 objNormal = objectsNormal(rayPos, 0.001);\n                color = objectsColor(objId, objNormal, rayPos);\n                break;\n            }\n            rayPos += refl * dist;    \n        }\n    }\n    float fresnel = (0.04 + 0.9 * (pow(1.0 - max(0.0, dot(-normal, ray)), 7.0)));\n    vec3 lightOffset = artifactOffset - p;\n    float d = length(lightOffset);\n    const float r = 14.0;\n    float atten = clamp(1.0 - (d*d) / (r*r), 0.0, 1.0);\n    atten *= atten;\n    vec3 point = vec3(0.75, 0.55, 0.45) * atten * (1.0 + fresnel) * 0.07;\n    vec3 ambient = vec3(dot(normal, normalize(vec3(0.0, 1.0, 0.5)))) * max(fresnel, 0.06) * vec3(0.1, 0.5, 1.0) * 0.85;\n    float fog = smoothstep(25.0, 6.0, fogDist) / (fogDist * 0.1);\n   \n    return color + (point + ambient) * fog;\n}\nvoid marchWater(vec3 eye, vec3 ray, inout vec4 color) {\n    const vec3 planeNorm = vec3(0.0, 1.0, 0.0);\n    const float depth = 3.0;\n    float ceilDist = intersectPlane(eye, ray, vec3(0.0, 0.0, 0.0), planeNorm);\n    vec3 normal = vec3(0.0);\n    if (dot(planeNorm, ray) > -0.05) {\n        normal = vec3(0.0);\n        color = vec4(vec3(0.0), CAM_FAR);\n        return;\n    }\n    float height = 0.0;\n    vec3 rayPos = eye + ray * ceilDist;\n    for (int i = 0; i < 80; i++) {\n        height = heightmap(rayPos.xz, WATER_MARCH_ITERATIONS) * depth - depth;\n        if (rayPos.y - height < 0.1) {\n            color.w = distance(rayPos, eye);\n            vec3 normPos = (eye + ray * color.w);\n            normal = waterNormal(normPos.xz, 0.005);\n            color.rgb = waterColor(ray, normal, normPos);\n            return;\n        }\n        rayPos += ray * (rayPos.y - height);\n    }\n}\nvec3 march(vec2 uv, vec3 camPos) {\n    mat4 vm = viewMatrix(camFwd, camUp);\n    vec3 ray = (vm * vec4(calcRay(uv, 80.0, iResolution.x / iResolution.y), 1.0)).xyz;\n    vec4 color = vec4(BACKGROUND, CAM_FAR);\n    vec3 waterColor;\n    marchWater(camPos, ray, color);\n    marchObjects(camPos, ray, color.w, color);\n    return color.rgb;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // simulate  particles\n    float pR;\n    float pA;\n    float gen;\n    float t;\n    float loop;\n    float height;\n    vec4 p;\n    const float emitR = 1.7;\n    for (int i = 0; i < NUM_PARTICLES; i++) {\n        t = time * 0.035 + float(i) * 0.07;\n        gen = floor(t);\n        loop = fract(t);\n        pR = rand(gen + float(i)) * emitR;\n        pA = rand(float(i)) * PI * 2.0;\n        p.xz = vec2(cos(pA), sin(pA)) * pR + vec2(0.0, -5.2);\n        height = mix(3.0, 2.3, (abs(pR) / emitR));\n        p.y = mix(-3.5, height, sqrt(loop));\n        //p.w = cos(loop * PI * 2.0) * min(1.0, 1.0 - (loop / 0.9)); // not currently used :(\n        ppos[i] = p;\n    }\n    \n    // artifact animation\n    t = time;\n    float s = sin(t);\n    float c = cos(t);\n    artifactRotation = mat3x3(c,0,s,\n                              0,1,0,\n                             -s,0,c);\n    artifactRotation *= rotationAlign(vec3(0.0, 1.0, 0.0), vec3(sin(t) * 0.2, 1.0, cos(t) * 0.2 + 0.3));\n    artifactOffset = vec3(sin(time) * 0.4, cos(time * 0.5) * 0.3 - 1.7, -6.);\n    flicker = mix(1.0, 1.1, sin(time * 2.0) * 0.5 + 0.5) + noise(time * 4.0) * -0.1 + 0.05;\n\n    // camera animation\n    camFwd = vec3(0.0, 0.7 + noise(time * 0.8 + 4.0) * 0.08 - 0.04, 1.0);\n    camUp = vec3(noise(time * 1.2) * 0.02 - 0.01, 1.0, 0.0);\n\n    // scene\n    vec3 color = march(uv, vec3(0.0, 1.9, 1.0));\n\n    // vignette\n    color -= (length(uv - 0.5) - 0.3) * 0.05;\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}