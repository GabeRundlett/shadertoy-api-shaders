{
    "Shader": {
        "info": {
            "date": "1569740029",
            "description": "3D",
            "flags": 32,
            "hasliked": 0,
            "id": "tsc3RX",
            "likes": 3,
            "name": "snowman_1",
            "published": 3,
            "tags": [
                "3d",
                "snow",
                "snowman"
            ],
            "usePreview": 0,
            "username": "wavebbs",
            "viewed": 464
        },
        "renderpass": [
            {
                "code": "//////////////////////////////////////////////////////////////////////////\n/////bufB mainCamera\n/////bufA post Effectsnowy\n//////////////////////////////////////////////////////////////////////////\n\n\nvec3 blendS(vec2 fragCoord)\n{\n    vec4 snowy = texture(iChannel0,fragCoord/iResolution.xy);\n    \n    vec3 zz = vec3(1.0,0.0,-1.0) * 1.;\n \n    \n    ///blur\n    vec4 maincolor = texture(iChannel1,fragCoord / iResolution.xy );\n    maincolor += texture(iChannel1, (fragCoord + zz.xy) / iResolution.xy );\n    maincolor += texture(iChannel1, (fragCoord + zz.zy) / iResolution.xy );\n    maincolor += texture(iChannel1,(fragCoord + zz.yx) / iResolution.xy);\n    maincolor += texture(iChannel1,(fragCoord + zz.yz) / iResolution.xy);\n     \n    \n    maincolor *= 0.2;\n    \n    snowy.xyz = pow(pow(snowy.xyz,vec3(.1))*1.2,vec3(4));\n    \n    vec3 color = mix(maincolor.xyz,snowy.xyz,snowy.a);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 color = blendS(fragCoord);\n    \n    \n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Fork of \"Snowy\" by HeGu. https://shadertoy.com/view/4dl3R4\n// 2019-09-28 14:30:24\n\n\t\tvec2 mod289(vec2 x) {\n\t\t  return x - floor(x * (1.0 / 289.0)) * 289.0;\n\t\t}\n\n\t\tvec3 mod289(vec3 x) {\n\t\t  \treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n\t\t}\n\t\t\n\t\tvec4 mod289(vec4 x) {\n\t\t  \treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n\t\t}\n\t\t\n\t\tvec3 permute(vec3 x) {\n\t\t  return mod289(((x*34.0)+1.0)*x);\n\t\t}\n\n\t\tvec4 permute(vec4 x) {\n\t\t  return mod((34.0 * x + 1.0) * x, 289.0);\n\t\t}\n\n\t\tvec4 taylorInvSqrt(vec4 r)\n\t\t{\n\t\t  \treturn 1.79284291400159 - 0.85373472095314 * r;\n\t\t}\n\t\t\n\t\tfloat snoise(vec2 v)\n\t\t{\n\t\t\t\tconst vec4 C = vec4(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439);\n\t\t\t\tvec2 i  = floor(v + dot(v, C.yy) );\n\t\t\t\tvec2 x0 = v -   i + dot(i, C.xx);\n\t\t\t\t\n\t\t\t\tvec2 i1;\n\t\t\t\ti1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n\t\t\t\tvec4 x12 = x0.xyxy + C.xxzz;\n\t\t\t\tx12.xy -= i1;\n\t\t\t\t\n\t\t\t\ti = mod289(i); // Avoid truncation effects in permutation\n\t\t\t\tvec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t\t\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\t\t\t\t\n\t\t\t\tvec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n\t\t\t\tm = m*m ;\n\t\t\t\tm = m*m ;\n\t\t\t\t\n\t\t\t\tvec3 x = 2.0 * fract(p * C.www) - 1.0;\n\t\t\t\tvec3 h = abs(x) - 0.5;\n\t\t\t\tvec3 ox = floor(x + 0.5);\n\t\t\t\tvec3 a0 = x - ox;\n\t\t\t\t\n\t\t\t\tm *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\t\t\t\t\n\t\t\t\tvec3 g;\n\t\t\t\tg.x  = a0.x  * x0.x  + h.x  * x0.y;\n\t\t\t\tg.yz = a0.yz * x12.xz + h.yz * x12.yw;\n\n\t\t\t\treturn 130.0 * dot(m, g);\t\t\n\t\t}\n\t\t\n\t\tfloat cellular2x2(vec2 P)\n\t\t{\n\t\t\t\t#define K 0.142857142857 // 1/7\n\t\t\t\t#define K2 0.0714285714285 // K/2\n\t\t\t\t#define jitter 0.8 // jitter 1.0 makes F1 wrong more often\n\t\t\t\t\n\t\t\t\tvec2 Pi = mod(floor(P), 289.0);\n\t\t\t\tvec2 Pf = fract(P);\n\t\t\t\tvec4 Pfx = Pf.x + vec4(-0.5, -1.5, -0.5, -1.5);\n\t\t\t\tvec4 Pfy = Pf.y + vec4(-0.5, -0.5, -1.5, -1.5);\n\t\t\t\tvec4 p = permute(Pi.x + vec4(0.0, 1.0, 0.0, 1.0));\n\t\t\t\tp = permute(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0));\n\t\t\t\tvec4 ox = mod(p, 7.0)*K+K2;\n\t\t\t\tvec4 oy = mod(floor(p*K),7.0)*K+K2;\n\t\t\t\tvec4 dx = Pfx + jitter*ox;\n\t\t\t\tvec4 dy = Pfy + jitter*oy;\n\t\t\t\tvec4 d = dx * dx + dy * dy; // d11, d12, d21 and d22, squared\n\t\t\t\t// Sort out the two smallest distances\n\t\t\t\t\n\t\t\t\t// Cheat and pick only F1\n\t\t\t\td.xy = min(d.xy, d.zw);\n\t\t\t\td.x = min(d.x, d.y);\n\t\t\t\treturn d.x; // F1 duplicated, F2 not computed\n\t\t}\n\n\t\tfloat fbm(vec2 p) {\n \t\t   float f = 0.0;\n    \t\tfloat w = 0.5;\n    \t\tfor (int i = 0; i < 5; i ++) {\n\t\t\t\t\t\tf += w * snoise(p);\n\t\t\t\t\t\tp *= 2.;\n\t\t\t\t\t\tw *= 0.5;\n    \t\t}\n    \t\treturn f;\n\t\t}\n\n\t\tvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\t\t{\n\t\t\t\tfloat speed=2.0;\n\t\t\t\t\n\t\t\t\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\t\t\t\n\t\t\t\tuv.x*=(iResolution.x/iResolution.y);\n\t\t\t\t\n\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tvec2 GA;\n\t\t\t\tGA.x-=iTime*1.8;\n\t\t\t\tGA.y+=iTime*0.9;\n\t\t\t\tGA*=speed;\n\t\t\t\n\t\t\t\tfloat F1=0.0,F2=0.0,F3=0.0,F4=0.0,F5=0.0,N1=0.0,N2=0.0,N3=0.0,N4=0.0,N5=0.0;\n\t\t\t\tfloat A=0.0,A1=0.0,A2=0.0,A3=0.0,A4=0.0,A5=0.0;\n\n\n\t\t\t\t// Attentuation\n\t\t\t\tA = (uv.x-(uv.y*0.3));\n\t\t\t\tA = clamp(A,0.0,1.0);\n\n\t\t\t\t// Snow layers, somewhat like an fbm with worley layers.\n\t\t\t\tF1 = 1.0-cellular2x2((uv+(GA*0.1))*8.0);\t\n\t\t\t\tA1 = 1.0-(A*1.0);\n\t\t\t\tN1 = smoothstep(0.998,1.0,F1)*1.0*A1;\t\n\n\t\t\t\tF2 = 1.0-cellular2x2((uv+(GA*0.2))*6.0);\t\n\t\t\t\tA2 = 1.0-(A*0.8);\n\t\t\t\tN2 = smoothstep(0.995,1.0,F2)*0.85*A2;\t\t\t\t\n\n\t\t\t\tF3 = 1.0-cellular2x2((uv+(GA*0.4))*4.0);\t\n\t\t\t\tA3 = 1.0-(A*0.6);\n\t\t\t\tN3 = smoothstep(0.99,1.0,F3)*0.65*A3;\t\t\t\t\n\n\t\t\t\tF4 = 1.0-cellular2x2((uv+(GA*0.6))*3.0);\t\n\t\t\t\tA4 = 1.0-(A*1.0);\n\t\t\t\tN4 = smoothstep(0.98,1.0,F4)*0.4*A4;\t\t\t\t\n\n\t\t\t\tF5 = 1.0-cellular2x2((uv+(GA))*1.2);\t\n\t\t\t\tA5 = 1.0-(A*1.0);\n\t\t\t\tN5 = smoothstep(0.98,1.0,F5)*0.25*A5;\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\tfloat Snowout=N5+N4+N3+N2+N1;\n\t\t\t\tSnowout = pow(Snowout , 0.85);\t\t\t\t\n\t\t\t\t\n\t\t\t\tfragColor = vec4(Snowout*0.9, Snowout, Snowout*1.1, Snowout)*1.2;\n\n\t\t}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//////////////////////////////////////////////////////////////////////////\n///maincamera\n//////////////////////////////////////////////////////////////////////////\n\n#define PI 3.14159265359\n#define ground 1.0\n#define head 2.0\n#define scarf 3.0\n#define body 4.0\n#define bottom 5.0\n#define tree 6.0\n#define SURF_DIST 0.001\n\nconst int MAX_MARCHING_STEPS = 255;\n///camera near clip\nconst float MIN_DIST = 0.0;\n///camera far clip\nconst float MAX_DIST = 200.0;\nconst float EPSILON = 0.01;\n\n///球\nfloat sphereSDF(vec3 p, float radius) {\n    return length(p) - radius;\n}\n\n///平面\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n///圆环\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n///box\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\n///立着胶囊\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\n///圆头锥桶\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\n///椭圆\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n//-----------------------------------------------------------------------------------------\n/*  ////---------------例子代码---------------\n\trot = rotationAxisAngle(normalize(vec3(1.00000,0.00000,0.000)),iTime/5.);\n     rot *= translate(0.,2.3,0.);\n\t center = (rot*vec4(ro,1.0)).xyz;\n*/\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n\n\nvec2 setD(vec2 result,vec2 d)\n{\n    if(d.x < result.x)\n    {\n        return d;\n    }\n    return result;\n}\n\n///Scene\nvec2 sceneSDF(vec3 ro,vec3 rd) {\n    \n    vec2 result;\n    \n    float d = 1e10;\n    mat4 rot;\n    \n \n    \n    //result = vec2(d,ground);\n\n    \n    \n   \n    \n    \n    ///head\n    vec3 center = ro - vec3(0.0,0.5,0.0);\n    d = min(d,sphereSDF(center,1.0));\n    result = vec2(d,head);//setD(result,vec2(d,head));\n \n\n    ///scarf\n    center = ro - vec3(0.,-0.25,0.);\n    d = min(d,sdTorus(center,vec2(1.1,0.2)));\n    result = setD(result,vec2(d,scarf));\n\t\n    // rot = translate(5.,-1.5,3.);\n    rot = rotationAxisAngle(normalize(vec3(1.00000,2.50000,0.000)),4.5);\n     center = ro - vec3(-1.,-.55,1.);\n    center = (rot*vec4(center,1.0)).xyz;\n   \n\t\n    //center = ro - vec3(3.,-0.25,0.);\n    d = min(d,sdVerticalCapsule(center,0.52,0.25));\n    result = setD(result,vec2(d,scarf));\n    \n    ///body\n    center = ro - vec3(0.,-1.5,0.);\n    d = min(d,sphereSDF(center,1.5));\n    result = setD(result,vec2(d,body));\n\n    \n    ///bottom snow\n     center = ro - vec3(0.,-3.5,0.);\n     d = min(d,sdEllipsoid(center,vec3(15.,1.0,6.)));\n\t result = setD(result,vec2(d,bottom));\n     \n    ///trees\n     center = ro - vec3(45.,-3.5,-75.);\n     d = min(d,sdRoundCone(center,.8,1.8,34.));\n\t result = setD(result,vec2(d,tree));\n    \n     center = ro - vec3(5.,-3.5,-53.);\n     d = min(d,sdRoundCone(center,.8,1.8,26.));\n\t result = setD(result,vec2(d,tree));\n    \n     center = ro - vec3(15.,-3.5,-23.);\n     d = min(d,sdRoundCone(center,.8,1.8,24.));\n\t result = setD(result,vec2(d,tree));\n    \n      center = ro - vec3(0.,-3.5,-105.);\n     d = min(d,sdRoundCone(center,.8,1.8,45.));\n\t result = setD(result,vec2(d,tree));\n    \n    \n     center = ro - vec3(-8.,-3.5,-63.);\n     d = min(d,sdRoundCone(center,.8,1.8,21.));\n\t result = setD(result,vec2(d,tree));\n     \n    \n     center = ro - vec3(-25.,-3.5,-105.);\n     d = min(d,sdRoundCone(center,.8,1.8,35.));\n\t result = setD(result,vec2(d,tree));\n    \n     center = ro - vec3(-45.,-3.5,-150.);\n     d = min(d,sdRoundCone(center,.8,1.8,47.));\n\t result = setD(result,vec2(d,tree));\n\n    \n     center = ro - vec3(25.,-3.5,-160.);\n     d = min(d,sdRoundCone(center,.8,1.8,34.));\n\t result = setD(result,vec2(d,tree));\n\n    \n      center = ro - vec3(55.,-3.5,-120.);\n     d = min(d,sdRoundCone(center,.8,1.8,51.));\n\t result = setD(result,vec2(d,tree));\n       ///Ground\n    \n     center = ro - vec3(0.0,-3.52,0.0);\n     float groundd = min(d,sdPlane(center,normalize(vec4(0.0,1.,0.,0.))));\n     result = setD(result,vec2(groundd,ground));\n    \n    \n     \n    \n     return result;\n\n}\n\n\n\n/**\n * 返回相机的标准化方向向量\n * \n * fieldOfView: 垂直视野的角度\n * size: 输出图像的分辨率\n * fragCoord: 输出图像中的像素坐标\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n\n\n\n\nvec3 rotateX(in vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(p.x, c * p.y - s * p.z, s * p.y + c * p.z);\n}\n\nvec3 rotateY(vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(c * p.x + s * p.z, p.y, -s * p.x + c * p.z);\n}\n\nvec3 rotateZ(vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(c * p.x - s * p.y, s * p.x + c * p.y, p.z);\n}\n\n\nvec3 rotateCamera(vec3 cameraTarget, vec3 ray_start, vec3 ray_dir) {\n\tray_dir.x = -ray_dir.x; // Flip the x coordinate to match the scene data\n\tvec3 target = normalize(cameraTarget - ray_start);\n\tfloat angY = atan(target.z/target.x);\n\tray_dir = rotateY(ray_dir, PI/2. - angY);\n\tfloat angX = atan(target.y/target.z);\n\tray_dir = rotateX(ray_dir, - angX);\n\t#ifdef ANIMATE_CAMERA\n\t\tfloat angZ = smoothstep(0., 1., (time - 5.) * .1) * sin(time * 1.1 + .77) * .05;\n\t\tray_dir = rotateZ(ray_dir, angZ);\n\t#endif\n\treturn ray_dir;\n}\n\n\n/**\n * 返回最短距离函数\n * \n * eye: 射线的起点，可理解为相机\n * marchingDirection: 射线的标准化方向向量\n * start: 从相机开始的最短距离\n * end: 最远距离\n */\nvec2 rayMarch(vec3 eye, vec3 rd) {\n    float depth = MIN_DIST;\n\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        \n        vec2 dist = sceneSDF(eye + depth * rd,rd);\n        \n        if (dist.x < EPSILON || depth > MAX_DIST) {\n            break;\n\t\t\t\n        }\n\n        depth += dist.x;\n      \n    }\n    if (depth > MAX_DIST) {          \n            depth = -1.;\n    }\n    float mat = sceneSDF(eye+rd*depth,rd).y*sign(depth);\n    return vec2(depth,mat);\n}\n            \n/**\n * 对于那些SDF求出来在曲面上的点求标准化的法线向量\n */\nvec3 estimateNormal(vec3 p,vec3 rd) {\n\n    \n    \tvec2 e = vec2(0.01, 0.);\n    float d = sceneSDF(p,rd).x;\n    return normalize(d - vec3(sceneSDF(p-e.xyy,rd).x,\n                    sceneSDF(p-e.yxy,rd).x,\n                    sceneSDF(p-e.yyx,rd).x));\n    \n\n}\n\n\n///shadow pass\nvec3 shadow(vec3 p,vec3 eye,vec3 rd,vec2 dist, vec3 shadowColor ,vec3 L,vec3 N,vec3 V ,vec3 R)\n{\n    \n    vec3 pSurface = p +N * SURF_DIST * 2.;\n\n    vec2 shadowdist = rayMarch(pSurface,L);\n    //float shadow = step(shadowdist.x, 0.);\n    \n\n    \n    //return shadowColor * shadow ;\n    \n    if(shadowdist.x <= .0)\n    {\n        return shadowColor;\n    }\n    \n    return vec3(0.,0.,0.);\n}\n\n\n\t\t/*漫反射  lighting pass (lambert gloss)\n\t\t * k_a: 环境色\n\t\t * k_d: 漫反射颜色\n\t\t * k_s: 镜面颜色\n\t\t * shininess: 光泽系数\nhttps://en.wikipedia.org/wiki/Phong_reflection_model#Description\n\t\t*/\n\n\t\tvec3 lambertLight(vec3 k_d, vec3 p, vec3 eye, vec3 lightPos,\n\t\t\tvec3 lightColor, vec3 rd, vec3 baseColor, vec3 L, vec3 N, vec3 V, vec3 R) {\n\n\n\t\t\t///diffuse\n\t\t\tvec3 diffuse = lightColor * k_d * clamp(dot(N, L), 0., 1.) * baseColor;\n\n\t\t\t\n\n\t\t\treturn diffuse ;\n\t\t}\n\n\n\t\tvec3 specLight(vec3 k_s, float shininess, vec3 p, vec3 eye, vec3 lightPos,\n\t\t\tvec3 lightColor, vec3 rd, vec3 baseColor, vec3 L, vec3 N, vec3 V, vec3 R)\n\t\t{\n\t\t\t///gloss\n\t\t\t\t //Computer specular term\n\t\t\tvec3 specular = lightColor * k_s*pow(clamp(dot(R, V),0.,1.), shininess) ;\n\n\t\t\treturn specular;\n\t\t}\n\n\t\t///lighting pass\n\n\t\tvec3 lighting(vec3 p, vec3 eye, vec3 rd, vec2 dist, vec3 basecolor)\n\t\t{\n\n\t\t\tvec3 lightPos = (vec3(-3.0, 3., 8.0));\n\t\t\tvec3 lightColor = vec3(1.1, 1.1, 1.1);// * 1.1;\n\t\t\t///环境光\n\t\t\tvec3 k_a = vec3(0.1, 0.1, 0.1) * 2.;\n\n\t\t\t///漫发射颜色\n\t\t\tvec3 k_d = vec3(0.9, 0.9, 0.9);\n\n\t\t\t///镜面系数\n\t\t\tvec3 k_s = vec3(1.0, 1.0, 1.0)*0.2;\n\n\t\t\t///阴影颜色\n\t\t\tvec3 shadowColor = vec3(.5, 0.5, 0.5);\n\n\t\t\t////光泽度\n\t\t\tfloat shininess = 9.;\n\n\n\t\t\tvec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n\t\t\tvec3 ambientcolor = ambientLight * k_a;\n\n\t\t\t//vec3 light1Pos = vec3(4.0 * sin(iTime),2.0, 4.0 * cos(iTime));\n\n\n\n\t\t\t\t///法线方向\n\t\t\tvec3 N = estimateNormal(p, rd);\n\t\t\t///光线入射方向\n\t\t\tvec3 L = normalize(lightPos - p);\n\t\t\t///视角方向\n\t\t\tvec3 V = normalize(eye - p);\n\t\t\t///光线镜面反射方向\n\t\t\tvec3 R = normalize(reflect(-L, N));\n            \n\n\t\t\tvec3 diff = lambertLight(k_d, p, eye, lightPos, lightColor, rd, basecolor, L, N, V, R);\n\n\t\t\t///高光部分\n\t\t\tvec3 spec = specLight( k_s, shininess, p, eye, lightPos, lightColor, rd,\n                                  basecolor, L, N, V, R);\n\n \n            ////shadow pass\n\n\t\t\tif (dist.x > 0.)\n\n\t\t\t{\n\t\t\t\tdiff *= shadow(p, eye, rd, dist, shadowColor, L, N, V, R);\n\n\t\t\t}\n\n\n\t\t\tvec3 color = diff + spec+ ambientcolor;\n\n\t\t\treturn color;\n\n\t\t}\n\n\n\n///颜色处理\nvec3 colorprocess(vec3 eye,vec3 dir, vec2 dist,vec2 fragCoord)\n{\n    vec3 color = vec3(1.0,1.0,1.0) ;\n    \n    \n    \n    ///\n    if(dist.y == ground)\n    {\n        color = vec3(.85,.85,.85)*1.5;\n    }\n    else if(dist.y == head)\n    {\n        color = vec3(.85,.85,.85)*2.;\n    }\n    else if(dist.y == scarf)\n    {\n        color = vec3(.97,0.0,0.)*1.5;\n    }\n    else if(dist.y == body)\n    {\n        color = vec3(.85,.85,.85)*1.9;\n    }\n    else if(dist.y == bottom)\n    {\n         color = vec3(.8,.8,.8)*1.7;\n    }\n    else if(dist.y == tree)\n    {\n         color = vec3(.6,.8,.6);\n    }\n  \n    \n    vec3 p = eye + dist.x * dir;\n    \n    color = lighting(p,eye,dir,dist,color);\n    \n    \n   \n    \n    color += 1.0 - pow((1.0 - (dist.x / MAX_DIST)), sqrt(0.01));\n    \n    return color;\n}\n\n///渲染方法\nvec3 render(vec3 eye,vec3 dir,vec2 fragCoord)\n{\n    vec2 dist = rayMarch(eye,dir);\n    vec3 color ;\n    ///sky\n    if(dist.x < 0.  )\n    {\n        \n        vec4 background = texture(iChannel2,fragCoord/iResolution.xy);\n        return background.xyz;\n        /*\n        vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n            //CAMERA \n        float zoom = 0.5;\t\n        vec3 lookat = vec3(0.,2.,0.);\n\n        vec3 F = normalize(lookat-eye);\n        vec3 R = cross(vec3(0,1,0), F);\n        vec3 U = cross(F, R);\n\n\n        vec3 C = eye + F*zoom;\n        vec3 I = C + uv.x*R + uv.y*U;\n\n        vec3 rd = I-eye;\n        color = vec3(0.1, 0.1, 0.1) -0.7*rd.y;\n    \tcolor = mix(color, vec3(0.4, 0.37, 0.4), exp(-rd.y*10.));\n        ///sky\n        //color = color;//vec3(4.,4.,4.);\n\n        return color;\n\t\t*/\n    }\n    \n    ///other\n    color = colorprocess(eye,dir,dist,fragCoord);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dir = rayDirection(60.0, iResolution.xy, fragCoord);\n        //Ray marching\n    //float a = 10.*iMouse.x/iResolution.x;\n    //vec3 dir = vec3(0.,0.,1.);\n    \n    \n    vec3 eye = vec3(0.0, 3.0, 35.0);\n    \n    vec3 color = render(eye, dir,fragCoord);\n   \n\n    \n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fork of \"Snowy\" by HeGu. https://shadertoy.com/view/4dl3R4\n// 2019-09-28 14:30:24\n///background\n////sky box\n\t\tvec2 mod289(vec2 x) {\n\t\t  return x - floor(x * (1.0 / 289.0)) * 289.0;\n\t\t}\n\n\t\tvec3 mod289(vec3 x) {\n\t\t  \treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n\t\t}\n\t\t\n\t\tvec4 mod289(vec4 x) {\n\t\t  \treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n\t\t}\n\t\t\n\t\tvec3 permute(vec3 x) {\n\t\t  return mod289(((x*34.0)+1.0)*x);\n\t\t}\n\n\t\tvec4 permute(vec4 x) {\n\t\t  return mod((34.0 * x + 1.0) * x, 289.0);\n\t\t}\n\n\t\tvec4 taylorInvSqrt(vec4 r)\n\t\t{\n\t\t  \treturn 1.79284291400159 - 0.85373472095314 * r;\n\t\t}\n\t\t\n\t\tfloat snoise(vec2 v)\n\t\t{\n\t\t\t\tconst vec4 C = vec4(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439);\n\t\t\t\tvec2 i  = floor(v + dot(v, C.yy) );\n\t\t\t\tvec2 x0 = v -   i + dot(i, C.xx);\n\t\t\t\t\n\t\t\t\tvec2 i1;\n\t\t\t\ti1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n\t\t\t\tvec4 x12 = x0.xyxy + C.xxzz;\n\t\t\t\tx12.xy -= i1;\n\t\t\t\t\n\t\t\t\ti = mod289(i); // Avoid truncation effects in permutation\n\t\t\t\tvec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t\t\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\t\t\t\t\n\t\t\t\tvec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n\t\t\t\tm = m*m ;\n\t\t\t\tm = m*m ;\n\t\t\t\t\n\t\t\t\tvec3 x = 2.0 * fract(p * C.www) - 1.0;\n\t\t\t\tvec3 h = abs(x) - 0.5;\n\t\t\t\tvec3 ox = floor(x + 0.5);\n\t\t\t\tvec3 a0 = x - ox;\n\t\t\t\t\n\t\t\t\tm *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\t\t\t\t\n\t\t\t\tvec3 g;\n\t\t\t\tg.x  = a0.x  * x0.x  + h.x  * x0.y;\n\t\t\t\tg.yz = a0.yz * x12.xz + h.yz * x12.yw;\n\n\t\t\t\treturn 130.0 * dot(m, g);\t\t\n\t\t}\n\t\t\n\n\n\t\tfloat fbm(vec2 p) {\n \t\t   float f = 0.0;\n    \t\tfloat w = 0.5;\n    \t\tfor (int i = 0; i < 5; i ++) {\n\t\t\t\t\t\tf += w * snoise(p);\n\t\t\t\t\t\tp *= 2.;\n\t\t\t\t\t\tw *= 0.5;\n    \t\t}\n    \t\treturn f;\n\t\t}\n\n\t\tvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\t\t{\n\t\t\t\tfloat speed=2.0;\n\t\t\t\t\n\t\t\t\tvec2 uv = fragCoord.xy / iResolution.xy * 2.;\n\t\t\t\t\n\t\t\t\tuv.x*=(iResolution.x/iResolution.y);\n\t\t\t\t\n\t\t\t\tvec2 suncent=vec2(0.4,1.7);\n\t\t\t\t\n\t\t\t\tfloat suns=(1.01-distance(uv,suncent));\n\t\t\t\tsuns=clamp(0.2+suns,0.0,1.0);\n            \n\t\t\t\tfloat sunsh=smoothstep(0.85,0.95,suns);\n\n\t\t\t\tfloat slope;\n\t\t\t\tslope=0.8+uv.x-(uv.y*2.3);\n\t\t\t\tslope=1.0-smoothstep(0.55,0.0,slope);\t\t\t\t\t\t\t\t\n\t\t\t\tslope *= 0.5;\n            \n\t\t\t\tfloat noise=abs(fbm(uv*1.5));\n\t\t\t\tslope=(noise*0.2)+(slope-((1.0-noise)*slope*0.1))*0.6;\n\t\t\t\tslope=clamp(slope,0.0,1.0);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\tfloat Snowout = 0.35+(slope*(suns+0.3))+(sunsh*0.6);\n\t\t\t\t\n\t\t\t\tfragColor = vec4(Snowout*0.9, Snowout, Snowout*1.1, 1.0);\n\n\t\t}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}