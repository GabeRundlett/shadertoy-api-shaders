{
    "Shader": {
        "info": {
            "date": "1582362336",
            "description": "2d",
            "flags": 0,
            "hasliked": 0,
            "id": "WlGSRw",
            "likes": 1,
            "name": "MyDistortionv1",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "float rand(float x){\n    return fract(sin(x * 100.) * 43758.5453);\n}\n\nvec2 rand(vec2 uv){\n    uv.x += 0.0004;\n    uv.y += 0.0007;\n    uv.x = floor(uv.x / 0.001) * 0.001;\n    uv.y = floor(uv.y / 0.001) * 0.001;\n    uv += vec2(13., 63.);\n    uv.x = fract(sin(uv.x * 10. * uv.y * uv.y)  * 438.5453);\n    uv.y = fract(cos(uv.x * uv.x * 10. * uv.y)  * 561.5453);\n    return uv;\n}\n\nvec2 uvtransform(vec2 uv, float strength){\n    float clsz = 0.5; // cellsize\n    //vec2 nwuv = float(int(uv / clsz)) * clsz;\n    int X = int(uv.x / clsz);\n    int Y = int(uv.y / clsz);\n    vec2 nwuv = vec2(float(X), float(Y)) * clsz;\n    vec2 A = mix(rand(nwuv + vec2(0., 0.)  ), rand(nwuv + vec2(clsz, 0.)  ), (uv - nwuv).x / clsz);\n    /*vec2 A = mix(\n        rand(vec2(float(X), float(Y))), \n        rand(vec2(float(X + 1), float(Y))), \n        (uv - nwuv).x / clsz\n    );*/\n    vec2 B = mix(rand(nwuv + vec2(0., clsz)), rand(nwuv + vec2(clsz, clsz)), (uv - nwuv).x / clsz);\n    vec2 ans = mix(A, B, (uv - nwuv).y / clsz);\n    return uv + (ans - vec2(0.5)) * 2. * strength;\n}\n\nvec2 distortion(vec2 uv, float strength, int power){\n    for (int i = 0; i < power; i++){\n        uv = uvtransform(uv, strength);\n    }\n    return uv;\n}\n\nvec4 something(vec2 uv){\n    vec2 ans = uvtransform(uv + vec2(0., iTime / 20.), 0.7);\n    if (abs(ans.y - 0.5 - iTime / 20.) < 0.1){\n        float f = 1. - smoothstep(0., 0.2, abs(ans.y - 0.5 - iTime / 20.));\n        return vec4(f);\n        return vec4(1.);\n    }\n    return vec4(0.);\n    //ans = (uv - nwuv) / clsz;\n    return vec4(ans, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv.y += iTime / 2.;\n    \n    \n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(rand(uv), .0, .1);\n    fragColor = vec4(distortion(uv, 0.1, 100) - vec2(0., iTime / 2.), 0., 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}