{
    "Shader": {
        "info": {
            "date": "1710458620",
            "description": "Happy Bubbles ^_^",
            "flags": 0,
            "hasliked": 0,
            "id": "NlGSDV",
            "likes": 5,
            "name": "Bubblebubbles",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "rogo1965",
            "viewed": 186
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\nint bubblenr = 99;\nfloat size = 0.3;\nint ink =1;\nint inv =1;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color;\n\tvec2 uv = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n\tuv.x *=  iResolution.x / iResolution.y;\n\n    // background\t \n\tif (inv>0) color = vec3(0.0 + 0.0*uv.y); \n    if (inv<1) color = vec3(0.8 - 0.2*uv.y);\n\n    // bubbles\t\n\tfor( int i=0; i<bubblenr; i++ )\n\t{\n        // bubble seeds\n\t\tfloat pha =      sin(float(i)*546.13+1.0)*0.5 + 0.5;\n\t\tfloat siz = pow( sin(float(i)*651.74+5.0)*0.5 + 0.5, 4.0 );\n\t\tfloat pox =      sin(float(i)*321.55+4.1) * iResolution.x / iResolution.y;\n\nfloat er = 0.5+0.45*sin(iTime+float(i));\nfloat gie = 0.5+0.45*cos(iTime+float(i));\nfloat be = 0.5+0.45*sin(iTime-float(i));\n        // buble size, position and color\n\t\tfloat rad = 0.1 + size*siz;\n\t\tvec2  pos = vec2( pox+sin(1.0*(0.4*iTime+float(i))), -1.0-rad + (2.0+2.0*rad)*mod(pha+0.1*iTime*(0.2+0.8*siz),1.0)+cos(2.0*(0.4*iTime+float(i))));\n\t\tfloat dis = length( uv - pos );\n\t\tvec3  col = mix( vec3(0.94,0.3,0.0), vec3(er,gie,be), 0.5+0.5*sin(float(i)*1.2+1.9));\n\t\tif (ink >0)   col+= 8.0*smoothstep( rad*0.95, rad, dis );\n\t\t\n        // render\n\t\tfloat f = length(uv-pos)/rad;\n\t\tf = sqrt(clamp(1.0-f*f,0.0,1.0));\n\t\tif (inv>0) color += col.zyx *(1.0-smoothstep( rad*0.95, rad, dis )) * f;\n        if (inv<1) color -= col.zyx *(1.0-smoothstep( rad*0.95, rad, dis )) * f;\n\t}\n\n    // vigneting\t\n\t//color *= sqrt(1.5-0.5*length(uv));\n\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}