{
    "Shader": {
        "info": {
            "date": "1725549166",
            "description": "SDF 4D test",
            "flags": 0,
            "hasliked": 0,
            "id": "lf2fWV",
            "likes": 3,
            "name": "Hypersurface 1",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "4d",
                "hyperplane"
            ],
            "usePreview": 0,
            "username": "aidanwyber",
            "viewed": 84
        },
        "renderpass": [
            {
                "code": "precision highp float;\n\n#define MAX_DIST 150.\n#define MAX_ITERS 300\n#define MIN_DIST 0.001\n#define TAU 6.28318530718\n\n\nmat2 rot(in float th) {\n    float c = cos(th), s = sin(th);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdTiger(in vec4 p) {\n    const float r = 0.5;\n    vec2 v3 = vec2(length(p.xy) - r, length(p.zw) - r);\n    return length(v3) - r / 3.;\n}\n\nvec2 cross2(in vec2 a, in vec2 b) { return vec2(a.x * b.y, -b.x * a.y); }\n\nfloat sdLine4(in vec4 p, in vec4 a, in vec4 b) {\n    vec4 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat sd4(in vec4 p) {\n    //return sdTiger(p);\n    //vec4 pmod = (mod(p + 0.5, 1.5) - 0.5);\n    const float r = 0.5;\n    vec4 a = normalize(p*p);\n    vec4 b = normalize(p);\n    return dot(a, b - 0.2);\n}\n\nfloat sdScene(in vec3 pos) {\n    vec2 m = (iMouse.xy - iResolution.xy * 0.5) / iResolution.y * 2.;\n    m = vec2(-0.7, -0.4) + m * 0.05;\n    vec4 p4 = vec4(pos, cos(iTime * 0.5) * 1.);\n    p4.zw *= rot(m.x * TAU);//iTime * 0.6);\n    p4.wx *= rot(m.y * TAU);//iTime * 0.7);\n    p4.xy *= rot(2.);//iTime * 0.8);\n    p4.yz *= rot(1.);//iTime * 0.9);\n    float sd = sd4(p4);\n    return sd;//length(pos) - 0.5;\n}\n\nvec3 calcNormal(in vec3 pos) {\n  // iq's tetrahedron method\n  const float h = 0.001; // replace by an appropriate value\n  const vec2 k = vec2(1., -1.);\n  return normalize(\n    k.xyy * sdScene(pos + k.xyy * h) + \n    k.yyx * sdScene(pos + k.yyx * h) + \n    k.yxy * sdScene(pos + k.yxy * h) + \n    k.xxx * sdScene(pos + k.xxx * h)\n    );\n}\n\nfloat raymarch(vec3 ro, vec3 rd) {\n  float d = 0.;\n  for (int i = 0; i < MAX_ITERS; i++) {\n    float sd = sdScene(ro + rd * d);\n    d += sd;\n    if (sd < MIN_DIST || d > MAX_DIST) break;\n  }\n  if (d > MAX_DIST) return d;//-1.;\n  return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y * 2.;\n    \n    vec3 ro = vec3(pos, -10.);\n    vec3 rd = vec3(0., 0., 1.);\n        \n    float d = raymarch(ro, rd);\n    \n    bool isBackground = d < 0.;\n    if (isBackground) { \n        fragColor = vec4(0., 0., 1., 1.);\n        return;\n    }\n    \n    vec3 hit = ro + d * rd;\n    vec3 n = calcNormal(hit);\n    \n   \n    vec3 ld = vec3(-1., 0.75, -1.);\n    ld.xz = vec2(cos(iTime), sin(iTime));\n    ld = normalize(ld);\n    float spec = max(dot(n, -ld), 0.);\n    spec = mix(spec, 1., 0.2);\n    vec3 reflected = reflect(-ld, n);\n    float refl = max(dot(reflected, rd), 0.);\n    \n    vec3 col = spec * vec3(1.,0.,1.) + refl * vec3(0., 1., 0.) + pow(refl, 300.);\n    col *= 1. - max(dot(n, rd), 0.);\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}