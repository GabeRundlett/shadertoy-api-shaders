{
    "Shader": {
        "info": {
            "date": "1643651500",
            "description": "Experiment with polar coordinates",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws3yRj",
            "likes": 2,
            "name": "Spiral trick",
            "published": 3,
            "tags": [
                "spiral",
                "polar"
            ],
            "usePreview": 0,
            "username": "MarcoF",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535\n\nvec2 cart2pol(vec2 uv) {\n    float r = length(uv);\n    float a = atan(uv.y, uv.x);\n    a = mod(a, PI * 2.0);\n    return vec2(r, a);\n}\n\nfloat spiral(float radius, float angle, float curv, float branches, float size) {\n    float c = sin(radius * curv + angle * branches);\n    //return step(1.0 - size, c);\n    return smoothstep(0., 10. * curv / iResolution.x, c + size - 1.);\n}\n\nvec2 rotate(vec2 original, float angle, vec2 pivot) {\n    mat2 rotation  = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n    vec2 final = original;\n    final -= pivot;\n    final *= rotation;\n    final += pivot;\n    return final;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2.*fragCoord - (fragColor.xy = iResolution.xy) ) / fragColor.y ;\n    \n    vec2 uvRotated = rotate(uv, iTime, vec2(0));\n    \n    vec2 polarUv = cart2pol(uvRotated);\n    \n    float s = spiral(polarUv.x, polarUv.y, 8., 1., 1.);\n    \n    vec3 col = vec3(0);\n    \n    col = vec3(s);\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}