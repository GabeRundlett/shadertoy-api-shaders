{
    "Shader": {
        "info": {
            "date": "1634523954",
            "description": "ship on moon 2d",
            "flags": 0,
            "hasliked": 0,
            "id": "NdySDh",
            "likes": 7,
            "name": "ship on moon 2d",
            "published": 3,
            "tags": [
                "shiponmoon2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "///ship on moon 2d-JFP\n///por jorge2017a2...2021-oct-09\n///referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.05),b,d)\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\nreturn colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n\nvec4 construccion(vec2 uv,vec3 col)\n{\n\n    float d2= sdTriangleIsosceles(vec2(uv.x, -uv.y)-vec2(-14.0,0.0), vec2(2.0,3.0) );\n    float d3=sdBox(uv-vec2(0.0,-7.0), vec2(15.0,2.0) );\n    float d4=sdBox(uv-vec2(11.0,-3.0), vec2(3.0,2.0) );\n    float d5=sdBox(uv-vec2(-9.5,-4.0), vec2(5.0,1.0) );\n    float d6= sdTriangleIsosceles(vec2(uv.x, -uv.y)-vec2(-4.5,3.0), vec2(2.0,3.0) );\n    \n    float dtot=unionSDF(d2, d3);\n    dtot=unionSDF(dtot, d4);\n    dtot=unionSDF(dtot, d5);\n    dtot=unionSDF(dtot, d6);\n    \n    col= DrawFig(vec3(1.0), col, dtot );\n    return  vec4(col,dtot);\n}\n\nvec3 paisajeLineas(vec2 p, vec3 col)\n{   vec2 uv=p;\n    p.y=opRep1D(p.y, 0.025 );\n    float d1= sdBox(p, vec2(16.0,0.0032) );\n    vec4 col4= construccion(uv,col);   \n    float dt=intersectSDF(d1,col4.w);\n    col= DrawFig(vec3(1.0), col, dt);\n    return col;\n}\n\nvec3 casa1(vec2 p, vec3 col)\n{  float d1= sdBox(p-vec2(10.0,-0.7), vec2(1.0,0.25) ); \n   float d2= sdBox(p-vec2(10.0,-0.7), vec2(0.8,0.2) ); \n   vec2 pos=vec2(10.0,0.0);\n   float d3=sdCircle(p-pos, 1.0 );\n   float d4=sdCircle(p-pos, 0.8 );\n   d3= differenceSDF(d3,d1);\n   d4= differenceSDF(d4,d1);\n   d3= differenceSDF(d3, d4);\n   float dif= differenceSDF(d1, d2);\n   col= DrawFig(vec3(1.0), col, dif);\n   col= DrawFig(vec3(1.0), col,d3);  \n   return col;\n}\n\nvec3 nave(vec2 p, vec3 col)\n{  \n    vec2 uv=p;\n    p= rotatev2(p, radians(90.0));\n\n   float d1= sdTriangleIsosceles( p, vec2(1.5,1.5) ) ;\n   float d2= sdTriangleIsosceles( p-vec2(0.0,0.2), vec2(1.1,1.2) ) ;\n   float d3= sdTriangleIsosceles( p-vec2(0.0,0.95), vec2(1.2,1.2) ) ;\n   \n    d1= differenceSDF(d1, d3);\n    d2= differenceSDF(d2, d3);\n   float dif= differenceSDF(d1, d2);\n   \n   col= DrawFig(vec3(1.0), col,dif);\n   vec2 rep=uv;\n   rep.x=mod(uv.x-1.0+iTime*5.0,2.0);\n   float d5= sdBox(rep, vec2(0.5,0.05) );\n   float d6= sdBox(uv-vec2(7.5,0.0), vec2(8.0,0.5) );\n   d5= differenceSDF(d5, d6);\n   \n   float d5b= sdBox(rep, vec2(0.5,0.08) );\n   float d6b= sdBox(uv-vec2(7.5,0.0), vec2(8.0,0.8) );\n   d5b= differenceSDF(d5b, d6b);\n   \n   col= DrawFig(vec3(1.0,1.0,0.0), col,d5b);\n   col= DrawFig(vec3(1.0,0.0,0.0), col,d5);\n   return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    vec3  col=vec3(0.0);\n    uv*=8.0;\n    vec2 uv1=uv;\n    vec2 uv2=uv;\n        \n    col= paisajeLineas(uv, col);\n    col= casa1(uv, col);\n    col= nave(uv-vec2(sin(iTime), cos(iTime)), col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}