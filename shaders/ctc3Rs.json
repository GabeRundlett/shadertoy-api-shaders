{
    "Shader": {
        "info": {
            "date": "1682903570",
            "description": "In this version, we've adjusted the conditions for the red and green waves to be shown by changing the range for uv.y in the if statement. We've also added a buffer on the right side by adjusting the range for uv.x. ",
            "flags": 0,
            "hasliked": 0,
            "id": "ctc3Rs",
            "likes": 0,
            "name": "ECR Colorful Moving Bands",
            "published": 3,
            "tags": [
                "colorful",
                "bands",
                "moving"
            ],
            "usePreview": 0,
            "username": "mbaernestocr",
            "viewed": 109
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // normalize the coordinates to range from -1 to 1\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    \n    // calculate the pixel aspect ratio\n    float aspect = iResolution.x / iResolution.y;\n    \n    // set the wave parameters\n    float time = iTime * 0.5;\n    float freq1 = 1.0;\n    float freq2 = 2.0;\n    float freq3 = 3.0;\n    float amp1 = 0.1;\n    float amp2 = 0.15;\n    float amp3 = 0.2;\n    \n    // calculate the wave values\n    float wave1 = sin(uv.x * freq1 + time) * amp1;\n    float wave2 = sin(uv.x * freq2 + time) * amp2;\n    float wave3 = sin(uv.x * freq3 + time) * amp3;\n    \n    // combine the waves\n    float totalWave = wave1 + wave2 + wave3;\n    \n    // map the value to colors\n    vec3 color = vec3(0.0);\n    if (totalWave < -0.4) {\n        color = vec3(0.1, 0.1, 0.1);\n    } else if (totalWave < 0.0) {\n        color = vec3(0.0, 0.0, 1.0);\n    } else if (totalWave < 0.4) {\n        color = vec3(1.0, 0.0, 0.0);\n    } else {\n        color = vec3(0.1, 0.1, 0.1);\n    }\n    \n    // render the waves\n    if (uv.y < -0.4 || uv.y > 0.4 || uv.x > -aspect + 0.2) {\n        fragColor = vec4(color, 1.0);\n    } else {\n        fragColor = vec4(0.1, 0.1, 0.1, 1.0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}