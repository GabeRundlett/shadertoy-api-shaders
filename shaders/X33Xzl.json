{
    "Shader": {
        "info": {
            "date": "1719389899",
            "description": "mouse control the magnet :-)\nWIP.\nNot sure how right I got the phenomenon:\nmagnet cause offset amount g around the mouse, sucking the beam from it's right destination, plus projecting it on the wrong luminophore/phosphor (and generally straddling on 2 ).",
            "flags": 0,
            "hasliked": 0,
            "id": "X33Xzl",
            "likes": 26,
            "name": "spoil your CRT with a magnet:-) ",
            "published": 3,
            "tags": [
                "crt",
                "short",
                "magnet",
                "trinitron",
                "degauss",
                "phosphorluminophore"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy,\n          U = u/R,                                               // texture coordinates\n          F = 80.* u/R.y, I = floor(F),                          // screen coordinates\n          M = 80.* ( iMouse.z > 0. ? iMouse.xy/R.y               // mouse control or auto-demo\n                                  : (.5+.3*cos(iTime+vec2(0,11)))*R/R.y ),\n          D = normalize(M-F);                                    // direction of magnetic distorsion\n    float w = 80./R.y,                                           // pixel width\n          l = length(M-F) / 30.,                                 // normalized distance to mouse \n          g = smoothstep(1.,0.,l), v,                            // magnetic distortion\n           // 100./dot(M-F,M-F), // variant\n          d = I.x - g*3.*D.x,                                    // offset â†’ (U-g*k) for texture\n          m = smoothstep( w,-w, length(F-I-.5)-.5);              // luminophore/phosphor shape mask\n    vec4  T = texture( iChannel0, U - g/20.*D );  T*T;           // source pixel (beam)  //  U - g*R.y/R/80.*D ?\n    v = mix ( T[ int(d)%3 ], T[ int(d+1.)%3 ], fract(d) );\n    O *= 0.; \n    O[ int(I)%3 ] = v* m;                                        // destination luminophore/phosphor\n// missing the Jacobian somewhere to modulate intensity: ~ length(vec2(dFdx(g),dFdy(g))) ?\n    O *= 1.+ .5* ( smoothstep(.5,0.,abs(l-.5)) - smoothstep(.5,0.,l)); // empirical\n    O = sqrt(O);                                                 // to sRGB\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}