{
    "Shader": {
        "info": {
            "date": "1457667654",
            "description": "This is a burn effects",
            "flags": 32,
            "hasliked": 0,
            "id": "4dtSzH",
            "likes": 6,
            "name": "BurnEffect",
            "published": 3,
            "tags": [
                "2d",
                "burn",
                "effect"
            ],
            "usePreview": 1,
            "username": "Lawliet",
            "viewed": 790
        },
        "renderpass": [
            {
                "code": "/**\n * 2016/3/15\n * Because I am a novice, so the effect and the code quality are not perfect.\n * Welcome to improve.\n *\n * \n */\n\n\nvec4 grid(vec2 fragCoord)\n{\n    vec2 index = ceil(fragCoord * 0.1);\n   \t\n    return vec4(0.7 + 0.5*mod(index.x + index.y, 2.0));\n}\n\nvec4 alphaBlend( vec4 tc, vec4 bc)\n{\n\tvec4 o;\n\to.rgb = bc.rgb * (1.0 - tc.a) + tc.rgb * tc.a;\n\to.a = 1.0 - (1.0 - tc.a) * (1.0 - bc.a);\n\treturn o; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 mainColor = texture(iChannel0,uv);\n    \n    //I don't konw how to draw PerlinNoise,so user this.\n    vec4 noiseColor = texture(iChannel1,uv);\n    \n    float percent = noiseColor.r + mod(iTime,20.0) * 0.1 - 0.8;\n    \n    percent = clamp(percent, 0.0, 1.0);\n    \n    vec4 gradientColor = texture(iChannel2,vec2(1.0 - percent,0));\n    \n    //0.7255-0.8745 1.0-0.0\n    float alpha = clamp((percent - 0.8745) /(0.7255 - 0.8745), 0.0, 1.0);\n    \n   \tfragColor = alphaBlend(gradientColor,mainColor);\n    \n    fragColor.rgb *= alpha;\n    \n    fragColor.a = alpha;\n    \n    fragColor = alphaBlend(fragColor,grid(fragCoord));\n    \n    //fragColor = alphaBlend(texture(iChannel2,uv),grid(fragCoord));\n    \n    //fragColor = alphaBlend(fragColor,vec4(0.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 colors[13];\n    \n    colors[0] = vec4(0.4,0.4,0.4,0.0);\n    colors[1] = vec4(0.102,0.102,0.102,0.0);\n    colors[2] = vec4(0.0,0.0,0.0,1.0);\n    colors[3] = vec4(1.0,0.2,0.0,1.0);\n    colors[4] = vec4(1.0,1.0,0.0,1.0);\n    colors[5] = vec4(1.0,1.0,0.788,1.0);\n    colors[6] = vec4(0.98,0.98,0.35,1.0);\n    colors[7] = vec4(1.0,0.2,0.0,1.0);\n    colors[8] = vec4(0.0,0.0,0.0,1.0);\n    colors[9] = vec4(0.0,0.0,0.0,1.0);\n    colors[10] = vec4(0.4,0.2,0.0,1.0);\n    colors[11] = vec4(1.0,1.0,1.0,0.0);\n    colors[12] = vec4(1.0,1.0,1.0,0.0);\n    \n    //float pos[13] = [0, 32, 70, 71, 72, 73, 74, 75, 78, 95, 105, 158];\n    \n    //Why? I can't write like this\n    //float pos[13] = [0.0, 0.1255, 0.2745, 0.2784, 0.2824, 0.2863, 0.2902, 0.2941, 0.3059, 0.3725, 0.4118, 0.6197, 1.0];\n    \n    float pos[13];\n    \n    pos[0] = 0.0;\n    pos[1] = 0.1255;\n    pos[2] = 0.2745;\n    pos[3] = 0.2784;\n    pos[4] = 0.2824;\n    pos[5] = 0.2863;\n    pos[6] = 0.2902;\n    pos[7] = 0.2941;\n    pos[8] = 0.3059;\n    pos[9] = 0.3725;\n    pos[10] = 0.4118;\n    pos[11] = 0.6197;\n    pos[12] = 1.0;\n    \n    \n    for(int i = 0; i < 12; i++){\n       \tvec4 color1 =  colors[i];\n       \tvec4 color2 =  colors[i + 1];\n        \n        float pos1 = pos[i];\n        float pos2 = pos[i + 1];\n        \n        float percent = (uv.x - pos1) / (pos2-pos1);\n        \n        if(percent >= 0.0 && uv.x <= 1.0 ){\n            fragColor = mix(color1,color2,percent);\n            \n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}