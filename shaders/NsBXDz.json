{
    "Shader": {
        "info": {
            "date": "1619989815",
            "description": "stars - a rejig of the stars here https://www.shadertoy.com/view/MdSSzW by luther, using less texture fetches\nuse mouse to pan around",
            "flags": 0,
            "hasliked": 0,
            "id": "NsBXDz",
            "likes": 5,
            "name": "juststars1",
            "published": 3,
            "tags": [
                "juststars"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "// slight rejig of stars from https://www.shadertoy.com/view/MdSSzW by luther\n// use mouse to pan around\n\n// colour gradient\nvec3 colgrad(float x)\n{    \n    float r = 1.0 - (pow(x, 1.2) * 0.5);\n    float g = (pow(min(1.0, x+0.6), 2.0) * 0.9) - (x * 0.4);    \t\n    float b = (1.9-r) * 0.5;\n    return vec3(r*0.7,g,b) * 1.1;\n}\n\n// voronoi stars - simplified and slightly optimized to use a single texture fetch for the randomness\nvec3 stars(in vec2 pos)\n{\n    vec3 col = vec3(0.0);\n    vec2 n = floor(pos);\n    vec2 f = fract(pos);\n    vec2 dir = sign(f-0.5);\n    for( float j=0.0; j<=1.0; j+=1.0 )\n    {\n   \t\tfor( float i=0.0; i<=1.0; i+=1.0 )    \n\t    {\n            vec2 cell = vec2(i*dir.x,j*dir.y);\n            vec2 p = (n + cell)+0.5;\n            vec4 rnd1 = texture( iChannel0, p/256.0, -100.0 ).xyzw; // random offset,col,brightness\n            float d = length(cell + rnd1.xy - f);                \n\n            // falloff\n            float dist = max(0.1, 1.0 - d);\n            float starfo = pow(dist, 60.0) * 6.5 + pow(dist, 120.0);\n\t        col += colgrad(rnd1.z*1.2) * rnd1.w * starfo;\n        }\n    }\n    return col;\n}\n\nmat2 rot( float th ){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    float zoom = 0.8+sin(iTime)*0.2;\n    uv *= zoom;\n    uv *= rot(iTime*0.05);\n\n    // mouse pan\n    vec2 mousep = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    mousep *= zoom;\n    mousep *= rot(iTime*0.05);\n    uv += vec2(3.1, 1.3)-mousep; // origin\n\n    vec3 col = vec3(0.0);\n    float starscale = 0.5;\n    float starbrightness = 0.6 * (1.0 / pow(zoom, 0.3));\n    for (int i = 0; i < 8; i++)\n    {        \n        col += stars(uv*starscale ) * starbrightness;\n        starbrightness *= .95;// .9\n        starscale *= 1.5;\n        \n    }\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}