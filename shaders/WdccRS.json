{
    "Shader": {
        "info": {
            "date": "1601096328",
            "description": "scholarius suggests that hardware derivatives are evaluated differently on D3D vs OpenGL within 2x2 pixels blocks. this is a test of it, computing dFdxy(diag%n) with n = 2,3,4 from bot to top\nOpenGL/nVidia result: see forum.\nIf you comment give system/gpu",
            "flags": 0,
            "hasliked": 0,
            "id": "WdccRS",
            "likes": 2,
            "name": "sub- 2x2 block dFdx dFdy - 2",
            "published": 3,
            "tags": [
                "glsl"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 788
        },
        "renderpass": [
            {
                "code": "// variant of \"sub- 2x2 block dFdx dFdy\" https://shadertoy.com/view/WddcW7\n\n// warps are generally 4x8 pixels blocks. \n// But a more fundamental GPU organization is the 2x2 block, \n// used for various things, including hardware derivatives \n// ( used to estimate LOD, for instance ).\n// scholarius suggests that hardware derivatives are evaluated differently on D3D vs OpenGL\n// this is a test of it.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2  R = iResolution.xy;\n    float i = 2.+floor(3.*U.y/R.y);  // bottom: %2 = sub-block alternance. then %3, %4\n    vec2 V = mod(U.xy+U.yx-.5,vec2(i));\n    O = .5+.5*vec4( U.x < R.x/2. ? dFdx(V) : dFdy(V) ,0,1) / (i-1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}