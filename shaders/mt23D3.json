{
    "Shader": {
        "info": {
            "date": "1674054819",
            "description": "Sobel operator for webcam feed. Made this with help from GPT-3. Check out my gpt-3 discord bot on my github: https://github.com/Brakistad",
            "flags": 2,
            "hasliked": 0,
            "id": "mt23D3",
            "likes": 0,
            "name": "BraKi - Sobel - Drag Mouse L / R",
            "published": 3,
            "tags": [
                "sobel",
                "webcam",
                "cam",
                "machinevision",
                "vision",
                "variable",
                "gpt3",
                "sobeloperator",
                "gpt",
                "braki"
            ],
            "usePreview": 0,
            "username": "braki",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "#define KERNEL_SIZE 3\n\nuniform sampler2D inputTex;\nfloat threshold;\n\nvec4 convolution(vec2 uv) {\n    vec4 sum = vec4(0.0);\n    vec2 offset;\n    for (int x = -KERNEL_SIZE; x <= KERNEL_SIZE; x++) {\n        for (int y = -KERNEL_SIZE; y <= KERNEL_SIZE; y++) {\n            offset = vec2(x, y) / iResolution.xy;\n            vec4 texel = texture(inputTex, uv + offset);\n            if (x == -1 && y == -1) sum += texel * -1.0;\n            if (x == -1 && y == 0) sum += texel * -2.0;\n            if (x == -1 && y == 1) sum += texel * -1.0;\n            if (x == 0 && y == -1) sum += texel * -2.0;\n            if (x == 0 && y == 0) sum += texel * 4.0;\n            if (x == 0 && y == 1) sum += texel * 2.0;\n            if (x == 1 && y == -1) sum += texel * -1.0;\n            if (x == 1 && y == 0) sum += texel * 2.0;\n            if (x == 1 && y == 1) sum += texel * 1.0;\n        }\n    }\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = convolution(uv);\n    color = (color + 1.0) / 2.0;\n    threshold = iMouse.x / iResolution.x;\n    color.rgb = step(threshold, color.rgb);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}