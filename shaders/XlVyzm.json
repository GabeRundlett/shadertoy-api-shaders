{
    "Shader": {
        "info": {
            "date": "1535575961",
            "description": "Creating a sea from fractional brownian motion nothing really fancy, messy code sorry.\nMake it dance by adding sound to texture 0 of Buffer A.",
            "flags": 32,
            "hasliked": 0,
            "id": "XlVyzm",
            "likes": 11,
            "name": "WaterShader",
            "published": 3,
            "tags": [
                "3d",
                "fbm"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 1403
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = texture( iChannel0, uv );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// EPS defines the epsilon that we use as a minimum for going out of our trace\n// function ray or for defining our shading's function sha 3D treshold\n#define EPS   1e-3\n\n// The STEPS integer stores the number of rays that we shoot at our scene, \n// more means a better resolution(specially at the edges) but it also\n// messes up our frame rate as it means many more calculations\n#define STEPS  256\n\n// The FAR float macro defines where should we stop tracing according to the\n// distance from our camera to the 3D scene\n#define FAR    10.\n\n\n// function with input 1 our Channel, input 2 we define the frequency that we\n// want to sample in two dimensions after we ask only for the x part of the \n// texture as it is a texture it contains 3 values and we only want one float\n// after we multiply by 0.1 to obtain a less strong value for our purposes\n#define WAV texture( iChannel0, vec2( 0.0, 0.75 ) ).x * 0.2\n#define FRE texture( iChannel0, vec2( 0.0, 0.25 ) ).x * 0.2\n\n// We need this for our hash function\n#define HASHSCALE1 .1031\n\n// Dave Hoskin's hash one out two in\nfloat hash(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Divides the 2D space in tiles than those tiles are asigned a random colour\n// than we interpolate using GLSL's mix() function to interpolate to combine\n// the different random values of each tile into a 2D texture.\nfloat noise( vec2 uv )\n{\n    \n    uv += WAV;\n    uv += iTime * 0.7 + FRE;\n    vec2 lv = fract( uv );\n    lv = lv * lv * ( 3.0 - 2.0 * lv );\n    vec2 id = floor( uv );\n    \n    float bl = hash( id );\n    float br = hash( id + vec2( 1, 0 ) );\n    float b = mix( bl, br, lv.x );\n    \n    float tl = hash( id + vec2( 0, 1 ) );\n    float tr = hash( id + vec2( 1 ) );\n    float t = mix( tl, tr, lv.x );\n    \n    float c = mix( b, t, lv.y );\n    \n    return c;\n\n}\n\n\nfloat fbm( vec2 uv )\n{\n\n    const int OCTAVES = 10;\n    \n    uv *= 1.4;\n    \n    float result = 0.0;\n    float m = 0.0;\n    \n    float amplitude = 1.0;\n    float freq = 1.0;\n    \n    for (int i=0; i<OCTAVES; i++)\n    {\n        result += cos( noise( uv * freq ) ) * amplitude; uv += iTime * 0.03;\n        m += amplitude;\n        amplitude *= 0.45; //lacunarity\n        freq *= 2.0; //gain\n    }\n    \n    return result/m;\n\n}\n\nfloat fbmO( vec2 uv )\n{\n\n    const int OCTAVES = 1;\n    \n    uv *= 1.4;\n    \n    float amplitude = 1.0;\n    float freq = 1.0;\n    \n    float result = cos( noise( uv * freq ) ) * amplitude; uv += iTime * 0.03;\n    \n    return result;\n\n}\n\n// Uncomment to see a sphere that goes according to the path\n//#define SPHERE\n\n// Constructs a 2*2 matrix that enables us to rotate in 2D, see:\n// https://thebookofshaders.com/08/ for more information on how to \n// implement this\nmat2 rot( float a )\n{\n\n    return mat2( cos( a ), -sin( a ),\n               \t sin( a ),  cos( a )\n               );\n\n}\n\n// iq's smooth maximum it returns a smoothed version of max, meaning that it\n// gets rid of the discontinuties of the max function see the link below for\n// the smooth min implementation which is in principle the same, here we just\n// apply it to max instead\n// https://iquilezles.org/articles/smin\nfloat smax(float a, float b, float k)\n{\n    \n    return log(exp(k*a)+exp(k*b))/k;\n\n}\n\n// This function returns a mass sum of the noise function we just \n// defined but we assign an amplitude and a frequency\n// https://www.shadertoy.com/view/lsf3zB\nfloat hei( vec2 uv )\n{\n\n    return ( 1.45 + FRE ) * fbm( uv );\n\n}\n\nfloat heiO( vec2 uv )\n{\n\n    return ( 1.45 + FRE ) * fbmO( uv );\n\n}\n\n// https://www.shadertoy.com/view/MlXSWX\n// The path is a 2D sinusoid that varies over time, depending upon the \n// frequencies, and amplitudes.\nvec2 path(in float z)\n{\n    float a = 44.0;\n    float b = a * 0.5;\n    float s = sin(z/a)*cos(z/b); return vec2(s*b, 0.);\n}\n\n// Defines a Signed Distance Function if its inside the surface it returs 0\n// else it returns a positive number, although this is a float that we need \n// to output it is important for our shading to return a 2nd value therefore\n// it is a vec2, this way we can change our shading according to the index \n// that we assign to the SDF\n// https://en.wikipedia.org/wiki/Signed_distance_function\nvec2 map( vec3 p )\n{\n   \n     \n    float c = p.y + hei( p.xz );\n    \n    return vec2( c, 0.0 );\n\n}\n\n// We define the perpendiculars according to sampling the Signed Distance \n// Function and doing Numerical Differentiation aka we find the derivatives\n// https://en.wikipedia.org/wiki/Numerical_differentiation\nvec3 norm( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy ).x - map( p - e.xyy ).x,\n                            map( p + e.yxy ).x - map( p - e.yxy ).x,\n                            map( p + e.yyx ).x - map( p - e.yyx ).x\n                          )\n                    );\n\n}\n\n// We trace a ray from its Ray Origin(ro) and to its Ray Direction(rd) if we\n// get close enough to our Signed Distance Function we stop, this distance is\n// defined by EPS aka epsilon. We also stop if the distance of the ray is more\n// than the defined maximum length aka FAR\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    d = 0.0; float t = 0.0;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        // We make our steps smaller so that we don't get any artifacts from \n        // the raymarching\n        d = 0.5 * map( ro + rd * t ).x;\n        if( abs( d ) < EPS || t > FAR ) break;\n        \n        t += d;\n    \n    }\n    \n    return t;\n\n}\n\n\n// We compute the colours according to different simulated phenomena such as\n// diffuse, ambient, specularity\n// Variable definitions:\n// col = to the output RGB channels we are calculating\n// d = our Signed Distance Function\n// t = our ray's distance\n// p = our point in space\n// n = our numerical gradient aka derivatives aka perpendicular of our surface\n// lig = our lights position, note that we must normalize as we dont want a \n// direction but only a point in space \n// amb = our ambient light, we use our y direction in the normals to fake a \n// sun's parallel rays, in here as we use a geometry that is upside down,\n// meaning the top, we must define a negative ambient and use it when our\n// material's id is the top surface\n// dif = we use the dot product from our normals and our light to get the \n// diffuse component we must use the max function to not get a value less \n// than 0 as this is incorrect\n// spe = our specular component we use the same process of our diffuse \n// component but instead we over load it by the clamp and power functions to \n// get a much brighter result that simulates the bright reflection of a light\n// into a surface\n// col /= vec3( 120.0 / ( 8.0 + t * t * 0.05 ) ); is a fogging function, it\n// takes into accound the ray variable t to get a distance from our camera\nvec3 shad( vec3 ro, vec3 rd )\n{\n\n    float d = 0.0, t = ray( ro, rd, d );\n    vec3 col = vec3( 0 );\n    vec3 p =  ro + rd * t;\n    vec3 n = norm( p );\n    vec3 lig = normalize( vec3( 0.0, 0.5, ( iTime * 0.2 ) + 1.0 ) );\n    lig.y += heiO( ro.xz );\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float ambO = 0.5 + 0.5 * -n.y;\n    float dif = max( 0.0, dot( lig, n ) );\n    float spe = pow( clamp( dot( lig, reflect( rd, n ) ), 0.0, 1.0 ), 16.0 ); \n    \n    float tex = heiO( p.xz );\n    \n    col += 0.5 * vec3( 24, 49, 89 ) / 256.0;\n    \n    vec3 fint = mix( vec3( 1.0 ), vec3( 0 ), tex );\n    vec3 foa = mix( vec3( 0.5 ), vec3( 0 ), hei( p.xz * 7.0 ) );\n    \n    col += 0.3 * dif;\n    col += 0.3 * amb;\n    col += 0.1 * spe;\n    \n    col += -0.05 + fint;\n    col += -0.05 + foa;\n    \n    //col = mix( vec3( 0 ), vec3( 1 ), col );\n    //col -= 1.0;\n\n    //if( col.r >= 0.1 ) col += 0.2;\n    \n    col *= 1.0 / ( 1.0 + t * t * 0.1 );\n    \n    col *= sqrt( col );\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n\n\tvec3 ro = vec3( 0.0, -0.8, iTime * 0.2 );\n    \n    /*\n    // Camera lookat\n    vec3 ww = normalize( vec3( 0 ) - ro );\n    // Camera up\n    vec3 uu = normalize( cross( vec3( 0, 1, 0 ), ww ) );\n    // Camera side\n    vec3 vv = normalize( cross( ww, uu ) );\n    // Add it to the ray direction\n    vec3 rd = normalize( uv.x * uu + uv.y * vv - 1.5 * ww );\n\t*/\n    vec3 rd = normalize( vec3( uv, 1.0 ) );\n    \n    //ro.xy += path( ro.z );\n    //rd.xy *= rot( sin( WAV * 0.2 ) );\n    //rd.xz = rot( path(ro.z).x / -160.0 )*rd.xz;\n    \n    ro.y *= heiO( ro.xz );\n    \n    float d = 0.0, t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    \n    vec3 col = d < EPS ? shad( ro, rd ) : mix( vec3( 0 ), vec3( 0, 0, 0.09 ), uv.y - 0.4 );\n        \n    //vec3 col = vec3( noise( uv * 10.0 ) );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}