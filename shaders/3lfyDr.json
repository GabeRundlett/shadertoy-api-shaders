{
    "Shader": {
        "info": {
            "date": "1592433225",
            "description": "A simple Multibrot fractal shader.\nhttps://en.wikipedia.org/wiki/Multibrot_set",
            "flags": 0,
            "hasliked": 0,
            "id": "3lfyDr",
            "likes": 4,
            "name": "Fractals: Multibrot",
            "published": 3,
            "tags": [
                "fractal",
                "multibrot"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 582
        },
        "renderpass": [
            {
                "code": "// by Nikos Papadopoulos, 4rknova / 2020\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define ANIMATE\n//#define SMOOTH_SHADING\n#define KVAL   (4.0)\n\n#define AA\t    2.\n#define ZOOM    1.4\n#define ITER    48 // Max number of iterations\n#define COL_IN  vec3(0)\n#define T       iTime\n\nvec2 DeMoivre(vec2 p, float e)\n{\n    // Convert to polar coords\n    float r = sqrt(dot(p,p));\n    float t = atan(p.y, p.x);\n   \t// Apply DeMoivre theorem\n    r = pow(r, e);\n    t = e * t;\n    // Convert back to cartesian coords\n    return r * vec2(cos(t), sin(t));\n}\n\nvec3 fractal(vec2 p)\n{    \n\tvec2 z = vec2(0);  \n\n\tfor (int i = 0; i < ITER; ++i) {\n        \n        float k = KVAL;\n        \n        #ifdef ANIMATE\n         k = 1. + mod(iTime * 0.5, 10.);\n        #endif // ANIMATE\n            \n\t\tz = DeMoivre(z, k) + p; \n\n        #ifdef SMOOTH_SHADING\n        // Smooth shading code contributed by Shane\n        float rad = 64.;\n\t\tif (dot(z,z) > rad) {\t     \n\t\t\tfloat s = float(i) - log2(log2(dot(z,z))/(log2(rad)))/log2(k);\n\t\t\treturn vec3(vec3(cos(s + .9), cos(s + .3), cos(s + .2)) * .4 + .6);\n\t\t}        \n        #else\n\t\tif (dot(z,z) > 4.) {\n\t\t\tfloat s = .125662 * float(i);\n\t\t\treturn vec3(vec3(cos(s + .9), cos(s + .3), cos(s + .2)) * .4 + .6);\n\t\t}\n        #endif // SMOOTH_SHADING\n\t}\n\n    return COL_IN;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 c = (fragCoord.xy / iResolution.xy * 2. - 1.)\n\t\t   * vec2(iResolution.x / iResolution.y, 1)\n\t\t   * ZOOM - vec2(.5,0.);\n\n    vec3 col = vec3(0);\n    \n#ifdef AA\n    // Antialiasing via supersampling\n    float e = 1. / min(iResolution.y , iResolution.x);    \n    for (float i = -AA; i < AA; ++i) {\n        for (float j = -AA; j < AA; ++j) {\n    \t\tcol += fractal(c + ZOOM * vec2(i, j) * (e/AA)) / (4.*AA*AA);\n        }\n    }\n#else\n    col = fractal(c);\n#endif /* AA */\n\n\tfragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}