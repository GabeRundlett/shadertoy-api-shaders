{
    "Shader": {
        "info": {
            "date": "1675179021",
            "description": "h",
            "flags": 64,
            "hasliked": 0,
            "id": "ctfXRs",
            "likes": 40,
            "name": "Torus Grid Distorter",
            "published": 3,
            "tags": [
                "grid",
                "torus",
                "funkytunes"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 434
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define t iTime\n#define TEST 8.\n\n//https://www.shadertoy.com/view/sslGzN\nconst float Semitone  = 1.05946309436; //12 notes between an octave, octave is 2, so a semitone is 2^(1/12)\n\nfloat KeyToFrequency(float n){\n    return pow(Semitone,(n-8.))*440./48000.;\n}\n\nvec3 ori() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    float r = mix(100., 12., tanh(.2*t));\n    vec3 ro = vec3(r*cos(.8*t), cos(1.7 * t), r*sin(.8*t));\n    //ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nvec2 map(vec3 p) {\n\n    // Torus (thin)\n    vec3 p1 = p;\n    p1.xy *= rot(0.5 * t);\n    p1.yz *= rot(0.215 * t);\n    float d1 = length(p1.xy) - 0.5;\n    float td = length(vec2(p1.z,d1));\n   \n    // Sphere\n    float sd = length(p) - 1.25;\n \n    // Mix between stuff\n    float mx = .5 + .5 * thc(5., 0. * length(p) + 0.5 * t);\n    float mx2 = .5 + .5 * thc(5., 0. * length(p) + 0.4 * t);\n    \n    // Scale a grid using distance functions\n    // (this is a mess and I don't understand it)\n    // sc also used for color\n    float sc = smin(td, sd, 1.).y;\n    sc *= 0.25 * TEST;\n    sc -= 0.5 * mix(td, sd, mix(0., 2., mx2));    \n    \n    p.yz *= rot(0.4 * t);\n    \n    // Mix between 3D sphere grid and 2D column grid\n    vec3 p2 = mod(p - 0.5 * sc, sc) - 0.5 * sc;    \n    float d = mix(length(p2) + 0.2 * sc, \n                  length(p2.xz) + 0.12 * sc, \n                  mx);\n    \n    // Oscillate sphere in centre\n    // float band = KeyToFrequency(14.); //<- was supposed to use this\n    float s = texture(iChannel1, vec2(14., 0.25)).x;\n    d = min(d, length(p) - 2. * s);\n    \n    // Restrict shape to sphere\n    d = smax(d, length(p) - 10., 1.);\n\n    // Cut out sphere around camera (didnt work for hollow shapes)\n    //float camd = length(p - ori()) - 2.2;\n    //d = -smin(-d, camd, 0.5).x;\n    \n    return vec2(d, sc);\n}\n\nvec3 march(vec3 ro, vec3 rd, float z) {\t\n    float d = 0.;\n    float s = sign(z);\n    int steps = 0;\n    float mat = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * d;\n        vec2 m = map(p);\n        // use hash to hide artifacts\n        m.x *= 0.7 + 0.3 * hash(hash(p.x,p.z), p.y);\n        if (s != sign(m.x)) { z *= 0.5; s = sign(m.x); }\n        if (abs(m.x) < SURF_DIST || d > MAX_DIST) {\n            steps = i + 1;\n            mat = m.y;\n            break;\n        }\n        d += m.x * z; \n    }   \n    return vec3(min(d, MAX_DIST), steps, mat);\n}\n\nvec3 norm(vec3 p) {\n\tfloat d = map(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 dir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat AO(in vec3 p, in vec3 n) {\n\tfloat occ = 0.;\n    float sc = 1.;\n    for (float i = 0.; i < 5.; i++) {\n        float h = 0.015 + 0.015 * i;\n        float d = map(p+h*n).x;\n        occ += (h-d)*sc;\n        sc *= 0.95;\n    }\n    return clamp(1. - 3.*occ, 0., 1.);\n}\n\nfloat shadow(in vec3 ro, in vec3 rd) {\n    float res = 1.;\n    float t = SURF_DIST;\n    for (int i=0; i<24; i++)\n    {\n\t\tfloat h = map(ro + rd * t).x;\n        float s = clamp(32. * h / t, 0., 1.);\n        res = min(res, s);\n        t += clamp(h, 0.01, 0.2);\n        if(res<SURF_DIST || t>MAX_DIST ) break;\n    }\n    res = clamp(res, 0.0, 1.0);\n    return smoothstep(0., 1., res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = ori();\n    \n    vec3 rd = dir(uv, ro, vec3(0), 1.6);\n    vec3 col = vec3(0);\n   \n    vec3 m = march(ro, rd, 1.);  \n    float d = m.x;    \n    vec3 p = ro + rd * d;\n    float l = length(p);\n    \n    vec3 bg = vec3(244,242,199)/255.;\n    \n    if (d<MAX_DIST) {        \n        vec3 n = norm(p);        \n\n        vec3 ld = -normalize(p);\n        float dif  = dot(n,  ld)*.5+.5;\n        float spec = pow(dif, 40.);\n        float fres = pow(1. + dot(rd,n),  5.);\n    \n        // Texture (maybe looks better without)\n        vec3 an = abs(n);\n        vec3 c1 = texture(iChannel0, 0.14 * p.xy).rgb;\n        vec3 c2 = texture(iChannel0, 0.14 * p.yz).rgb;\n        vec3 c3 = texture(iChannel0, 0.14 * p.zx).rgb;\n        col = an.z*c1+an.x*c2+an.y*c3;\n\n        // Shadow\n        float sd = shadow(p + 10. * SURF_DIST * n, ld);\n        col *= .5+.5*sd;\n        \n        // Specular\n        col = clamp(col + spec, 0., 1.);\n        \n        // Ambient occlusion (used incorrectly)\n        float ao = AO(p + 10. * SURF_DIST * n, n);\n        col = mix(col, vec3(1,0.5,0), .2+.2*thc(4.,8.*ao));\n        \n        // Fresnel (within 3.9-20. length from origin, was buggy)\n        float s = smoothstep(3.9, 5., l);// * (1.-smoothstep(14.,20., l));\n        col = mix(col, bg, s * fres);\n    }\n    else \n       col = bg;\n   \n    float xp = exp(-0.077 * l);\n    vec3 pl = pal(.5*log(l) + .73 + xp*m.z + (1.-xp)*vec3(.5,1,2)/3.);\n    col = mix(col, pl, xp);\n    col = 1. - col;\n    col = pow(col, vec3(1./2.2)); // gamma correction\n    col = 1. - col;  \n\n    // tanh causes artifacts\n    float o = 2.*pi/3.;\n    vec3 off = 0.4 * tanh(0.2 * t) * cos(t + vec3(-o,o,0));\n    col = tanh(vec3(.1,0,0) + (vec3(3.5,3.35,2.5)+off)*col);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 32134,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/floatingpoints/lesalpx-extended?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Thanks to (everyone I've copied code + ideas from):\n// TheArtOfCode - raymarching\n//  BlackleMori - hash, erot\n//      Sizertz - AO, shadow\n//        NuSan - materials\n//        Tater - raymarching\n//         Leon - raymarching hash trick\n//           iq - pal, smin, most things!\n\n#define tau 6.2831853071\n#define pi 3.1415926535\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n//#define pal(a,b) .5+.5*cos(2.*pi*(a+b))\n#define pal(a) .5+.5*cos(2.*pi*(a))\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat h21(vec2 a) { return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123); }\nfloat mlength(vec2 uv) { return max(abs(uv.x), abs(uv.y)); }\nfloat mlength(vec3 uv) { return max(max(abs(uv.x), abs(uv.y)), abs(uv.z)); }\n\n// Maybe remove this\nfloat sfloor(float a, float b) { return floor(b-.5)+.5+.5*tanh(a*(fract(b-.5)-.5))/tanh(.5*a); }\n\nvec2 smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return vec2(mix(b, a, h) - k * h * (1. - h), h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}