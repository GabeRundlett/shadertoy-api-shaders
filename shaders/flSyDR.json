{
    "Shader": {
        "info": {
            "date": "1649420496",
            "description": ":)",
            "flags": 0,
            "hasliked": 0,
            "id": "flSyDR",
            "likes": 4,
            "name": "Mirrored tiles pattern",
            "published": 3,
            "tags": [
                "hue",
                "pattern",
                "mirrored",
                "tiles",
                "psy"
            ],
            "usePreview": 0,
            "username": "fyisic123",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "#define hue(v) ( .6 + .6 * cos( 2.*PI*(v) + vec3(0,-2.*PI/3.,2.*PI/3.) ) )\n#define PI 3.14159265359\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\nfloat getRect(in vec2 uv, in float size, in float innerSize)\n{\n    return (-1. * (sign(length(max(abs(uv)-vec2(size),0.0)))) + sign(length(max(abs(uv)-vec2(innerSize),0.0))));\n}\n\nfloat getErect(in vec2 uv, in float size, in float thickness)\n{\n    float p = getRect(uv, size, size - thickness);\n    float s = size * 0.5;    \n    float s2 = s - thickness;\n    \n    p += getRect(uv-size, s, s2);    \n    p += getRect(uv+size, s, s2);\n    p += getRect(uv+vec2(-size,size), s, s2);\n    p += getRect(uv+vec2(size , -size), s, s2);\n    return p;\n    \n}\n\nfloat getCircle(in vec2 uv, in float size, in float thickness)\n{\n    return smoothstep(thickness, 0., abs(length(uv)-size));\n\n}\nfloat getECircle(in vec2 uv, in float size, in float thickness)\n{\n    float p = getCircle(uv, size, thickness);\n    float s = size * 0.5;            \n    p += getCircle(uv-size, s, thickness);    \n    p += getCircle(uv+size, s, thickness);\n    p += getCircle(uv+vec2(-size,size), s, thickness);\n    p += getCircle(uv+vec2(size , -size), s, thickness);\n    return p;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float T = iTime;\n    vec2 uv = (fragCoord.xy -.5 * iResolution.xy) /iResolution.y;\n    \n    \n    vec2 screenUV = uv;\n\n    uv *= 8. + (2. * sin(T*0.1)); // zoom   \n    uv *= Rot(length(screenUV )* .2); // twist\n    uv *= Rot(T * -.05); // general rot\n    uv *= pow(length(screenUV), -.2); // \"fov\"    \n    \n    vec2 ID = floor(uv);\n    vec2 gv = fract(uv) -.5;    \n    vec3 col = vec3(0);  \n    \n    \n    if (mod(ID.x, 2.) == 0.)  // mirrors grid\n        gv.x *= -1.;\n    if (mod(ID.y, 2.) == 0.)\n        gv.y *= -1.;\n    \n    \n    // pattern\n    float p = 0.; \n    float p2 =0.;\n    float posSpeed = T * 0.5;\n    vec2 posRot = vec2(cos(posSpeed + sin(posSpeed)), sin(posSpeed + cos(posSpeed*.5))); // center position of pattern\n    vec2 pos = gv + (posRot * (0.6 + (0.3 * sin(T * .5))));\n    mat2 RotMatrix = Rot(asin(sin(T * 0.2)));\n    float thickness = 22. / iResolution.y;\n    for(float i=1.; i > 0.01; i *= .8 + (.1 * sin(T * .9)))\n    {\n        float scale = 0.75 * i;\n        float darkness = pow(i, 2.);\n        p += (getErect(pos, scale, thickness) * darkness);\n        p2 += (getECircle(pos, scale, thickness) * darkness);\n        pos *= RotMatrix;\n    }\n      \n    p = mix(p, p2,0.6 * abs(asin(sin(T * .1))));\n    vec3 pCol = (hue((p * .7) + (T * .1) + length(screenUV *.5)) *p);\n    \n    \n    // background \n    uv *= 3.;\n    uv *= Rot(T);    \n    gv *= Rot(abs(dot(uv.x + uv.y * sin(T), length(gv))) + T);    \n    float bg = pow(length(gv + 3. * .5) * .3, 4.);                    \n    vec3 bgCol = hue(bg * 24.) *bg * .25; \n    float bgLum = (bgCol.r + bgCol.g + bgCol.b) / 3.;    \n    bgCol = mix(bgCol, vec3(bgLum), 0.15);\n      \n      \n      \n    col +=  bgCol+ pCol;           \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}