{
    "Shader": {
        "info": {
            "date": "1614872902",
            "description": "Port of Cave Story transition shader I made a while ago in Unity to Shadertoy",
            "flags": 0,
            "hasliked": 0,
            "id": "wlKfzc",
            "likes": 14,
            "name": "Cave Story Transition",
            "published": 3,
            "tags": [
                "cavestory"
            ],
            "usePreview": 1,
            "username": "CelestialAmber",
            "viewed": 933
        },
        "renderpass": [
            {
                "code": "\n//The range of time encompassing the animation.\n//fadeTimer (\"Fade Time\",Range(-1.25,2.25)) = 0\nfloat fadeTimer = 0.0;\n#define fadeType 1\nfloat gridWidth = 28.0, gridHeight = 15.0;\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float time = iTime*2.0;\n    \n    fadeTimer = mod(time,3.5) - 1.25;\n    \n    //Inverse the ranges so that the fade in animation is before the fade out animation\n    if(fadeTimer > .5) fadeTimer -= 1.75;\n    else fadeTimer += 1.75;\n    \n    vec4 outcol;\n    //Scale the uvs to integers to scale directly with the equation.\n    vec2 posI =  vec2(uv.x * gridWidth * 2.0,uv.y * gridHeight * 2.0);\n    //modulo the position to clamp it to repeat the pattern.\n    vec2 pos = mod(posI,2.0) - vec2(1.0,1.0);\n    float size;\n    \n    posI = vec2(floor(posI.x/2.0)/gridWidth,floor(posI.y/2.0)/gridHeight); //Floor the values to round them to the value for the square they're in\n    \n    switch(fadeType){\n    case 0: //Vertical Fade\n    size = pow(fadeTimer - posI.y,3.0);\n    break;\n    case 1: //Horizontal Fade\n    size = pow(fadeTimer - posI.x,3.0);\n    break;\n    case 2: //Center Fade\n    size = pow(fadeTimer - (abs(posI.x - 0.5) + abs(posI.y - 0.5)),3.0);\n    break;\n    }\n    \n    //Get absolute value to keep in positive range\n    size = abs(size);\n    \n    outcol = texture(iChannel0,uv);\n    \n    //Absolute value method for expressing the area of a rotatable square.\n    if(abs(pos.x) + abs(pos.y) < size){\n        outcol =  vec4(0,0,0,1);   \n    }\n    \n    fragColor = outcol;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}