{
    "Shader": {
        "info": {
            "date": "1718687839",
            "description": "copypast\n/*origianls https://www.shadertoy.com/view/lslyRn  https://www.shadertoy.com/view/4X3SRN https://www.shadertoy.com/view/MXy3WR https://www.shadertoy.com/view/MdXSzS*/\nplease restore your previous account or send past shaders by email",
            "flags": 0,
            "hasliked": 0,
            "id": "M3cSz4",
            "likes": 2,
            "name": "other combination space",
            "published": 3,
            "tags": [
                "space",
                "galaxy",
                "universe",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 362
        },
        "renderpass": [
            {
                "code": "/*origianls https://www.shadertoy.com/view/lslyRn  https://www.shadertoy.com/view/4X3SRN https://www.shadertoy.com/view/MXy3WR https://www.shadertoy.com/view/MdXSzS*/\n#define LAYER 1.\nvec3 palette (float t){\n    vec3 a = vec3 ( 0.698,0.500,0.500 );\n    vec3 b = vec3 ( 0.358,0.222,0.300 );\n    vec3 c = vec3 ( 0.308,0.028,0.528 );\n    vec3 d = vec3 ( -0.112,0.333,0.998 );\n\n    return a + b*cos(6.28318*(c*t+d));\n}\n#define F4 0.309016994374947451\nvec3  mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4  mod289(vec4 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4  permute(vec4 x) {return mod289(((x*34.0)+1.0)*x);}\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec4  taylorInvSqrt(vec4 r) {return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise3D(vec3 v){\n  const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy;\n  vec3 x3 = x0 - D.yyy;\n\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n           \n  float n_ = 0.142857142857;\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n  \n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  \n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\nmat2 rot(in float t)\n{\n    return mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nvec3 Star(in vec2 uv, in float n)\n{\n    vec2 uv0 = uv;\n\n    vec3 color = vec3(0.0);\n    vec3 finalcolor = vec3(0.0);\n    for (float i = 0.0; i < 3.0; i++) {\n        float rand_time = iTime*n;\n        uv = rot(0.5*rand_time)*uv;\n        \n        float d = smoothstep(-1.0,1.0,abs(sdStar5(uv,0.4,0.4)-0.2)-0.1);\n        float d1 = fract(5.0*(sdStar5(uv,0.4,0.4)-0.3));\n        vec3 col = palette(length(uv) + 0.8*i+ rand_time*0.4 + n );\n        \n        d = sin(d*8.0 + rand_time + 0.2*i)/8.0;\n        d = abs(d);\n\n        d = 0.01/d;\n        color += 0.5*col*d;\n        color += 0.1*col*d1;      \n    }\n    float rays = max(0.0,1.0 - abs(uv0.x*uv0.y*2000.0));\n    finalcolor = color*rays*1.0;\n    uv0 = uv0 * rot(3.1415/4.0);\n    rays = max(0.0,1.0 - abs(uv0.x*uv0.y*1000.0));\n    finalcolor += color*rays*0.5;\n    finalcolor *= smoothstep(0.2,0.02,length(uv0));\n    return finalcolor;\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,456.821));\n    p += dot(p,p+45.32);\n    return fract(p.x*p.y);\n}\n\nvec3 starlayer(in vec2 uv)\n{\n    vec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);\n    vec3 col = vec3 (0.0);\n    for (int y = -1; y <= 1; y++){\n        for (int x = -1; x <= 1; x++){\n            vec2 offs = vec2(x,y);\n            float n = Hash21(id+offs);\n            col += Star(gv-vec2(n-0.5,fract(n*34.0)-0.5)-offs,n);\n            col *= sin(iTime*2.0+n*6.28)*0.5+1.0;\n        }\n    }\n    // if (gv.x>0.48 || gv.y>0.48) col.r = 1.0;\n    return col;\n}\n#define iterations 13\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n  \n    uv = uv*5.0;\n    float t = 0.02*iTime;\n    \tvec2 uv2 = (fragCoord.xy / iResolution.xy) - .5;\n    vec3 col = vec3(0.0);\n    float t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv2.xy) + .07)) * 2.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\tmat2 ma = mat2(co, si, -si, co);\nfloat s2=0.1,fade=1.;\nvec3 dir=vec3(uv*zoom,1.);\n    vec3 from=vec3(1.,.5,0.5);\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s2*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s2,s2*s2,s2*s2*s2*s2)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts2+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\t\t\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv2, 0.0);\n\t\t\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv2.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv2.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv2);\n\tv1 *= smoothstep(.7, .0, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.9, .0, len);\n\t\n\tvec3 col2 = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\n    vec4 diffuse = vec4(0.);\n    \n    for(float i,d;i++<1e2;)\n        diffuse += (\n            cos(\n                snoise3D(\n                    (\n                        vec3(fragCoord.xy, 1.0) * 2.- vec3(iResolution.xyy)\n                    ) /\n                    iResolution.y * i * .1 +\n                    iTime*1.0\n                ) +\n                i +\n                vec4(1.,2.,2.,0.0)\n            )\n        )/10.;\n    \n    for (float i = 0.0; i < LAYER; i+=1./LAYER) {\n        float deapth = fract(i+t);\n        float fade = deapth*smoothstep(1.0,0.9,deapth);\n        float sacle = mix (3.0,0.5,deapth);\n        \n        col += starlayer(uv*ma*sacle*rot(t)+i*456.0)*fade;\n    }\n\n    \n    fragColor = vec4 (col2*diffuse.xyz , 1 );\nfragColor+= vec4(v*.01,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}