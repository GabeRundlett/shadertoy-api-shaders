{
    "Shader": {
        "info": {
            "date": "1630582661",
            "description": "Playing around with Voronoi",
            "flags": 0,
            "hasliked": 0,
            "id": "fst3WS",
            "likes": 6,
            "name": "Fork Voronoi test",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "light",
                "polygon"
            ],
            "usePreview": 0,
            "username": "sky8948",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "vec2 r2D(vec2 p)\n{\n    return vec2(fract(sin(dot(p, vec2(92.51, 65.19)))*4981.32),\n                fract(sin(dot(p, vec2(23.34, 15.28)))*6981.32));\n}\n\n#define PI 3.141592\n\nfloat polygon(vec2 p, float s)\n{\n    float a = ceil(s*(atan(-p.y, -p.x)/PI+1.)*.5);\n    float n = 2.*PI/s;\n    float t = n*a-n*.5;\n    return mix(dot(p, vec2(cos(t), sin(t))), length(p), .3);\n}\n\nfloat voronoi(vec2 p, float s)\n{\n    vec2 i = floor(p*s);\n    vec2 current = i + fract(p*s);\n    float min_dist = 1.;\n    for (int y = -1; y <= 1; y++)\n    {\n        for (int x = -1; x <= 1; x++)\n        {\n            vec2 neighbor = i + vec2(x, y);\n            vec2 point = r2D(neighbor);\n            point = 0.5 + 0.5*sin(iTime*.5 + 6.*point);\n            float dist = polygon(neighbor+point - current, 3.);\n            min_dist = min(min_dist, dist);\n        }\n    }\n    return min_dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y*2.-1.;\n    vec2 e = vec2(.01, .0);\n    \n    float s = 2.;\n    float vor = 1.-voronoi(uv, s);\n    float dx = 1.-voronoi(uv-e.xy, s);\n    float dy = 1.-voronoi(uv-e.yx, s);\n    dx = (dx-vor)/e.x;\n    dy = (dy-vor)/e.x;\n    \n    float t = iTime;\n    vec3 n = normalize(vec3(dx, dy, 1.));\n    vec3 lp = vec3(cos(t), sin(t), .5)*2.;\n    vec3 ld = normalize(lp-vec3(uv, 0.));\n    vec3 ed = normalize(vec3(0., .0, 1.)-vec3(uv, 0.));\n    vec3 hd = normalize(ld + ed);\n    float sl = pow(max(dot(hd,n), 0.),4.);\n    float oc = clamp(pow((vor), 2.), 0., 1.);\n    float amb = (1.-vor)*.5;\n    float diff = max(dot(n, ld), 0.)*.75;\n    float l = oc*diff+amb+sl;\n    \n    vec3 col = vec3(0.);\n    col += l*texture(iChannel0, normalize(reflect(vec3(0., .0, 1.), n))).rgb;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}