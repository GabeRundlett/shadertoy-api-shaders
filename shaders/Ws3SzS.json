{
    "Shader": {
        "info": {
            "date": "1572213599",
            "description": "Playing with voronoi particle tracking #3",
            "flags": 32,
            "hasliked": 0,
            "id": "Ws3SzS",
            "likes": 7,
            "name": "Firework waves",
            "published": 3,
            "tags": [
                "fast",
                "particles"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 535
        },
        "renderpass": [
            {
                "code": "// Fork of \"Hellflame\" by michael0884. https://shadertoy.com/view/3d3SRS\n// 2019-10-27 20:38:34\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n    \n   vec4 density = 1.3*SAMPLE(iChannel1, pos, size);\n    fragColor = vec4(sin(2.*density.x*vec3(0.4,0.2,1.1)) +sin(5.*vec3(0.7,0.7,1.)*density.y),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//voronoi particle tracking \n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = SAMPLE(iChannel0, pos+dx, size);\n    //check if the stored neighbouring particle is closer to this position \n    if(length(Unb.xy - pos) < length(U.xy - pos))\n    {\n        U = Unb; //copy the particle info\n    }\n}\n\nvec4 B(vec2 pos)\n{\n   return 5.*SAMPLE(iChannel1, pos, size);\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    U = SAMPLE(iChannel0, pos, size);\n    \n    //check neighbours \n    Check(U, pos, vec2(-1,0));\n    Check(U, pos, vec2(1,0));\n    Check(U, pos, vec2(0,-1));\n    Check(U, pos, vec2(0,1));\n    \n    //small divergence\n    vec2 ppos = 0.999*U.xy+0.001*pos.xy;\n    \n    vec4 Bdx = B(ppos+vec2(1,0)) - B(ppos-vec2(1,0)); \n    vec4 Bdy = B(ppos+vec2(0,1)) - B(ppos-vec2(0,1));\n    \n    //update the particle\n    U.xy -= dt*(vec2(Bdx.x - Bdx.y, Bdy.x - Bdy.y) +vec2(0.,0.45));\n    \n    \n    if(iFrame < 1)\n    {\n        U = vec4(30.*floor(pos.x/30.)+60.*sin(pos.x),30.*floor(pos.y/30.)-10.*cos(pos.y+pos.y),1.,1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define size iResolution.xy\n#define SAMPLE(a, p, s) texture((a), (p)/s)\n\nfloat gauss(vec2 x, float r)\n{\n    return exp(-pow(length(x)/r,2.));\n}\n   \n#define PI 3.14159265\n#define dt 0.6\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//solve the dampened poisson equation\nconst float radius = 1.5;\n\nvec4 pdensity(vec2 pos)\n{\n   vec4 particle_param = SAMPLE(iChannel0, pos, size);\n   return vec4(particle_param.zw,1.,1.)*gauss(pos - particle_param.xy, radius);\n}\n\nvec4 B(vec2 pos)\n{\n   return SAMPLE(iChannel1, pos, size);\n}\n\nconst vec4 damp = vec4(0.005,0.05,0.001,0.001);\nconst vec4 ampl = vec4(0.05,0.05,0.001,0.001);\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    vec4 density = pdensity(pos);\n    U = (1.-damp)*0.25*(B(pos+vec2(0,1))+B(pos+vec2(1,0))+B(pos-vec2(0,1))+B(pos-vec2(1,0)));\n    U += density*ampl;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}