{
    "Shader": {
        "info": {
            "date": "1541476984",
            "description": "Gradually develops a pickover attractor.  Hit spacebar to reset.  Does not detect window resize.  Hit spacebar after window resize",
            "flags": 48,
            "hasliked": 0,
            "id": "ltcBDs",
            "likes": 10,
            "name": "naive pickover attractor",
            "published": 3,
            "tags": [
                "fractal",
                "attractor",
                "feedback"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 744
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float val = clamp(1.0 - decode_color(texture(iChannel0, uv).rgb), 0.0, 1.0);\n    // Time varying pixel color\n    vec3 col = vec3(val);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float spaceness = texture(iChannel2, vec2(32.0/256.0, 0.0)).r;\n    // whether spacebar is being pressed\n    if (spaceness > 0.5 || iTime < 0.5) {\n        fragColor = vec4(encode_color(0.0), 1.0);\n        return;\n    }\n    vec2 last_val = vec2(decode_color(texture(iChannel0, vec2(0.0)).rgb),\n                         decode_color(texture(iChannel0, vec2(1.0)).rgb));\n    for (int i = 0; i < 500; ++i) {\n      last_val = vec2(sin(a * last_val.y) + c * cos(a * last_val.x),\n                          sin(b * last_val.x) + d * cos(b * last_val.y));\n    }\n    vec3 col =\n        mix(encode_color(last_val.x), encode_color(last_val.y), step(2.0 * fragCoord.x, iResolution.x));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float a=-1.24458046630025;\nconst float b=-1.5191834103316;\nconst float c=-1.81590817030519;\nconst float d=-1.90866735205054;\n\nconst float inv_basis = 0.00390625; // 1.0 / 256.0\n\nfloat decode_color(in vec3 rgb) {\n    return 4.0 *(rgb.r + inv_basis * (rgb.g + inv_basis * rgb.b)) - 2.0;\n}\n\nvec3 encode_color(in float val) {\n    float x = 0.5 + 0.25 * val;\n    vec3 color_out = vec3(0.0);\n    \n    float remain = mod(x, inv_basis);\n    color_out.r = x - remain;\n    \n    x = 256.0 * remain;\n    remain = mod(x, inv_basis);\n    color_out.g = x - remain;\n    color_out.g = 256.0 * remain;\n    \n    return color_out;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float spaceness = texture(iChannel2, vec2(32.0/256.0, 0.0)).r;\n    // whether spacebar is being pressed\n    if (spaceness > 0.5 || iTime < 0.5) {\n        fragColor = vec4(encode_color(0.0), 1.0);\n        return;\n    }\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 coord = 3.0 * (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float last_color = decode_color(texture(iChannel1, uv).rgb);\n    \n    vec2 iter_val = vec2(decode_color(texture(iChannel0, vec2(0.0)).rgb),\n                         decode_color(texture(iChannel0, vec2(1.0)).rgb));\n    \n    float rampsize = 6.0 / iResolution.y;\n    \n    float curr_color = clamp(1.0 - length(coord - iter_val) / rampsize, 0.0, 1.0);\n    vec2 last_val = iter_val;\n    \n    for (int i = 0; i < 500; ++i) {\n      last_val = vec2(sin(a * last_val.y) + c * cos(a * last_val.x),\n                          sin(b * last_val.x) + d * cos(b * last_val.y));\n        curr_color = curr_color + \n            clamp(1.0 - length(coord - last_val) / rampsize, 0.0, 1.0);\n    }\n    \n    vec3 col_out = encode_color(curr_color + 0.99 * last_color);\n    fragColor = vec4(col_out,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}