{
    "Shader": {
        "info": {
            "date": "1500585820",
            "description": "This is a prototype for a POI indicator system.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdSBWm",
            "likes": 0,
            "name": "Digital Cell",
            "published": 3,
            "tags": [
                "2d",
                "random",
                "glow",
                "organic",
                "ui",
                "cell",
                "poi"
            ],
            "usePreview": 0,
            "username": "cdata",
            "viewed": 496
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\nfloat quadraticInOut(float t) {\n  float p = 2.0 * t * t;\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\n}\n\nfloat cubicOut(float t) {\n  float f = t - 1.0;\n  return f * f * f + 1.0;\n}\n\nvec4 circle(vec2 uv, vec2 center, float radius) {\n    vec2 pos = uv - center;\n    float dist = radius - length(pos);\n    float circle = step(0.0, dist);\n    \n    return vec4(circle);\n}\n\nfloat random(float index) {\n    float row = mod(index, 1.0);\n    float col = (mod(index, 100.0) - row) / 100.0;\n    vec2 samplePos = vec2(col, row);\n    \n    return texture(iChannel0, samplePos).r;\n}\n\nfloat tick(float duration) {\n    return mod(iTime, duration) / duration;\n}\n\nvec2 interpolate(vec2 start, vec2 end, float ease) {\n    return start * (1.0 - ease) + end * ease;\n}\n\nfloat interpolate(float start, float end, float ease) {\n    return start * (1.0 - ease) + end * ease;\n}\n\nvec2 nucleusPosition() {\n    float interval = 5.0;\n    float index = floor(iTime / interval) * 2.0;\n    \n    vec2 pos0 = vec2(random(index), random(index + 1.0)) * 0.2 + 0.4;\n    vec2 pos1 = vec2(random(index + 2.0), random(index + 3.0)) * 0.2 + 0.4;\n    \n    float ease = quadraticInOut(tick(interval));\n    \n    return interpolate(pos0, pos1, ease);\n}\n\nfloat nucleusSize() {\n    float interval = 1.75;\n    float index = floor(iTime / interval) * 3.0;\n    float ease = quadraticInOut(tick(interval));\n    float third = 1.0/3.0;\n    \n    float radius0 = random(index) / 25.0 + third;\n    float radius1 = random(index + 3.0) / 25.0 + third;\n    \n    return interpolate(radius0, radius1, ease);\n}\n\nfloat circularInnerGlow(vec2 uv, vec2 center, float radius) {\n   \tvec2 pos = uv - center;\n   \treturn (1.0 - step(radius, length(pos))) * length(pos); \n}\n\nvec4 cellWall(vec2 uv) {\n    vec2 innerPos = vec2(\n        sin(iTime / 5.0 * PI),\n        cos(iTime / 7.0 * PI)) * 0.01 + 0.5;\n    \n    vec4 outerline = circle(\n        uv,\n        vec2(0.5),\n        0.5);\n\n    vec4 innerline = circle(\n        uv,\n        innerPos,\n        0.475);\n    \n    return outerline - innerline;\n}\n\nfloat pulse(vec2 uv) {\n    float interval = 2.0;\n    float time = tick(interval);\n    float ease = cubicOut(time);\n    \n    float radius = 0.5 * ease;\n    vec2 pos = vec2(0.5);\n    float dist = distance(uv, pos);\n    \n    vec4 shape = circle(uv, pos, radius);\n    \n    float glow = step(dist, radius) * dist * 2.0;\n    float alpha = 1.0 - ease;\n    \n    float thickness = (0.5 - length(uv - pos)) * 3.0;\n    float background = \n        (length(circle(uv, pos, 0.5)) + thickness) * 0.25;\n    \n    return glow * alpha + background;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pos = nucleusPosition();\n    float size = nucleusSize();\n    \n    vec4 nucleus = circle(\n        uv,\n        pos,\n        size);\n    \n    vec4 color = vec4(uv, 0.5 + 0.5 * sin(iTime), 1.0);\n    vec4 wall = cellWall(uv);\n    vec4 cell = nucleus + wall;\n    float glow = circularInnerGlow(uv, pos, size);\n    \n    fragColor =\n        mix(cell * color, cell, 0.6) +\n        wall * 0.2 +\n        glow * 0.75 +\n        max(pulse(uv) - length(cell), 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}