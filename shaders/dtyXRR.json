{
    "Shader": {
        "info": {
            "date": "1685892048",
            "description": "Random math again, until the result looks beautiful",
            "flags": 0,
            "hasliked": 0,
            "id": "dtyXRR",
            "likes": 2,
            "name": "Bald Polnareff Spiral Fractal",
            "published": 3,
            "tags": [
                "fractal",
                "circles",
                "spiral"
            ],
            "usePreview": 0,
            "username": "BaldPolnareff",
            "viewed": 163
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize coordinates\n    vec2 p = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Calculate distance from the center\n    float radius = length(p);\n\n    // Create a time-dependent wave effect\n    float wave = sin(iTime * 1.5 + radius * 1.0);\n    p *= 2.8*mat2(cos(iTime), sin(iTime), -sin(iTime), cos(iTime));\n    p *= 1.5;\n    float f = 1.;\n\n    for (float i = 1.2; i <= 2.5; i++) {\n        p = fract(abs(p) / dot(p, p) - 0.38);\n        f *= fract(dot(1.*p, p));\n\n        wave += f * sin(iTime * i + radius * i * 5.0) * 0.2 / i;\n        wave /= cos(iTime * i + radius * i * 5.0) * 2.4;\n    \n        // Apply distortion to the coordinates\n        vec2 distortedUV = vec2(p.x/3. + wave * 1.1, p.y - wave * .5);\n\n        // Calculate color based on the distorted coordinates\n        vec3 color = vec3(distortedUV, 0.5 + 2. * f * i * sin(iTime));\n\n    fragColor = vec4(.3*color.x, .7*color.y, sin(.2*color.z + iTime * 0.1), 1.0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}