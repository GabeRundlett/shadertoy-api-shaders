{
    "Shader": {
        "info": {
            "date": "1636067523",
            "description": "Based on a molecular dynamics final project and improvements to 7dyXDy. Color maps z-position and collision. Inner and outer rings are the initialization radius and boundary potential. Lacks efficiency, anti-aliasing, and z-ordering...",
            "flags": 32,
            "hasliked": 0,
            "id": "stcGWH",
            "likes": 9,
            "name": "elastic collision 3D",
            "published": 3,
            "tags": [
                "collision",
                "simulation",
                "gravity",
                "mass",
                "elastic",
                "boundary",
                "potentialfield",
                "velovity"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 431
        },
        "renderpass": [
            {
                "code": "// Image\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.y;\n    uv.x -= (iResolution.x / iResolution.y - 1.0) / 2.0;\n    \n    iResolution.x / iResolution.y / 2.0;\n\n    vec3 col = vec3(0);\n    for (int j = 0; j < N; j++) {\n        vec4 pos = texelFetch(iChannel0, ivec2(j, IPOS), 0);\n        vec4 prop = texelFetch(iChannel0, ivec2(j, IPRP), 0);\n        if (distance(uv, pos.xy) < prop.y) {\n            col = 1.0 - pos.zzz;\n            col = prop.z == 1.0 ? mix(col, vec3(1, 0, 0), 1.0) : col;\n        }\n    }\n\n    float d = distance(uv, vec2(0.5));\n    if (RADI - RADP <= d && d <= RADI + RADP) col = mix(col, vec3(0, 1, 1), 0.5);\n    if (RADB - RADP <= d && d <= RADB + RADP) col = mix(col, vec3(1, 0, 1), 0.5);\n\n    fragColor = vec4(col, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Common\n\n/////// buffer data row index: position\n#define IPOS 0\n/////// buffer data row index: velocity\n#define IVEL 1\n/////// buffer data channel row index: properties (mass, radius, & collision)\n#define IPRP 2\n/////// buffer data row index: end of data\n#define IEND 3\n/////// number of particles\n#define N 1280 / 16\n/////// particle mass\n#define M 0.005\n/////// gravitational constant\n#define G 1.000\n/////// softening\n#define S 0.100\n/////// boundary potential factor\n#define K 25.0\n/////// boundary potential sphere position\n#define POSB vec3(0.5)\n/////// boundary potential sphere radius\n#define RADB 0.40\n/////// initialization sphere radius\n#define RADI 0.20\n/////// particle radius\n#define RADP 0.005\n/////// maximum particle mass\n#define MPMASS 100.0\n/////// maximum particle radius\n#define MPRADI 0.015\n/////// maximum particle initial velocity\n#define MPVELO 0.050\n\nfloat random(vec2 seed) {\n    // https://thebookofshaders.com/10/\n    return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 random3(vec2 seed) {\n    return vec3(random(seed.xy), random(seed.yx), random(seed.xx));\n}\n\nvec3 force_gravity(ivec2 i, vec3 pos, sampler2D iChannel) {\n    // https://developer.nvidia.com/gpugems/gpugems3/part-v-physics-simulation/chapter-31-fast-n-body-simulation-cuda\n    vec3 f = vec3(0);\n    for (int j = 0; j < N; j++) {\n        vec3 r = texelFetch(iChannel, ivec2(j, IPOS), 0).xyz - pos.xyz;\n        f += M * r / pow(pow(length(r), 2.0) + S * S, 1.5);\n    }\n    return G * M * f;\n}\n\nvec3 force_boundary(vec3 pos) {\n    float r = distance(pos, POSB);\n    return r >= RADB ? -2.0 * K * (r - RADB) * (pos - vec3(0.5)) : vec3(0);\n}\n\nvec3 forces(ivec2 iv, vec3 pos, sampler2D iChannel) {\n    return force_gravity(iv, pos, iChannel) + force_boundary(pos);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Buffer A\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2  uv = fragCoord;\n    ivec2 iv = ivec2(uv);\n\n    vec4 fcol = vec4(0);\n    if (iv.x < N && iv.y < IEND) {\n        if (iFrame == 0) {\n            // initialize\n            /****/ if (iv.y == IPOS) {\n                // https://math.stackexchange.com/a/1585996\n                vec3 pos = 1.0 - 2.0 * random3(uv + iTime);\n                pos = normalize(pos) * RADI + vec3(0.5);\n                fcol = vec4(pos, 0);\n            } else if (iv.y == IVEL) {\n                vec3 vel = random3(uv.yx + iDate.xy + iTime).xyz;\n                vel.x *= random(uv.xy + iDate.xy + iTime) < 0.5 ? -1.0 : +1.0;\n                vel.y *= random(uv.yx + iDate.xy + iTime) < 0.5 ? -1.0 : +1.0;\n                vel.z *= random(uv.yy + iDate.xy + iTime) < 0.5 ? -1.0 : +1.0;\n                fcol.xyz = vel * MPVELO;\n            } else if (iv.y == IPRP) {\n                fcol.x = MPMASS * random(uv.xy + iDate.xy + iTime); // mass\n                fcol.y = fcol.x / MPMASS * MPRADI;                  // radius\n            }\n        } else {\n            // collisions\n            bool cll = false;\n            vec3 pos1 = texelFetch(iChannel0, ivec2(iv.x, IPOS), 0).xyz;\n            vec3 vel1 = texelFetch(iChannel0, ivec2(iv.x, IVEL), 0).xyz;\n            vec4 prop1 = texelFetch(iChannel0, ivec2(iv.x, IPRP), 0);\n            float mass1 = prop1.x;\n            float radius1 = prop1.y;\n            for (int j = 0; j < N; j++) {\n                if (iv.x != j) {\n                    vec3 pos2 = texelFetch(iChannel0, ivec2(j, IPOS), 0).xyz;\n                    vec3 vel2 = texelFetch(iChannel0, ivec2(j, IVEL), 0).xyz;\n                    vec4 prop2 = texelFetch(iChannel0, ivec2(j, IPRP), 0);\n                    float mass2 = prop2.x;\n                    float radius2 = prop2.y;\n                    float d = distance(pos1, pos2);\n                    if (d < radius1 + radius2) {\n                        vec3 n = normalize(pos1 - pos2);\n                        pos1 += n * (radius1 + radius2 - d);\n                        if (dot(pos2 - pos1, vel1) > 0.0) { \n                            // https://en.wikipedia.org/wiki/Elastic_collision#Two-dimensional_collision_with_two_moving_objects\n                            vel1 -= (2.0 * mass2 / (mass1 + mass2)) * (dot(vel1 - vel2, pos1 - pos2) / length(pos1 - pos2)) * (pos1 - pos2);\n                            // https://en.wikipedia.org/wiki/Specular_reflection#Vector_formulation\n                            vel1 -= 2.0 * dot(vel1, n) * n;\n                        }\n                        cll = true;\n                        break;\n                    }\n                }\n            }\n            // potential fields\n            // https://en.wikipedia.org/wiki/Verlet_integration\n            // fpos = pos + vel * dt + 0.5 * forces(pos) * dt ** 2\n            // fvel = vel + 0.5 * (f + forces(fpos)) * dt\n            vec3 pos = pos1;\n            vec3 vel = vel1;\n            vec3 ff1 = forces(iv, pos, iChannel0);\n            pos += vel * iTimeDelta + 0.5 * ff1 * iTimeDelta * iTimeDelta;\n            /****/ if (iv.y == IPOS) {\n                fcol = vec4(pos, 0);\n            } else if (iv.y == IVEL) {\n                vel += 0.5 * (ff1 + forces(iv, pos, iChannel0)) * iTimeDelta;\n                fcol = vec4(vel, 0);\n            } else if (iv.y == IPRP) {\n                fcol = vec4(prop1.x, prop1.y, int(cll), 0);\n            }\n        }\n    }\n\n    fragColor = fcol;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}