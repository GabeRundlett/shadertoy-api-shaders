{
    "Shader": {
        "info": {
            "date": "1427911036",
            "description": "developed a small stateless adsr function. Tiny 56-bar demo to go with it.",
            "flags": 24,
            "hasliked": 0,
            "id": "MdfSW7",
            "likes": 42,
            "name": "Sound ADSR Demo",
            "published": 3,
            "tags": [
                "sound",
                "adsr"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 1953
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "\n#define pi2 6.283185307179586\n\nfloat hz(float c) {\n    return 13.75 * pow(2.0, (c+3.0)/12.0);\n}\n\n// returns note index, fract\nvec2 seq(float t, float s) {    \n    return vec2(floor(t/s),mod(t, s));\n}\n\nfloat index(float a, float b, float x) {\n    return mix(a, b, step(1.0,x));\n}\n\nfloat index(float a, float b, float c, float x) {\n    return index(index(a, b, x),c,x-1.0);\n}\n\nfloat index(float a, float b, float c, float d, float x) {\n    return index(index(a, b, x),index(c, d,x-2.0),x-1.0);\n}\n\nfloat sqrosc(float p) {\n\treturn step(fract(p),0.5)*2.0-1.0;\n}\n\nfloat sinosc(float p) {\n    return sin(pi2*p);\n}\n\nfloat sawosc(float p) {\n    return 1.0 - 2.0*fract(p);\n}\n\nfloat triosc(float p) {\n    return 1.0 - abs(2.0 - 4.0 * fract(p + 0.25));\n}\n \n// normalizes arguments so the sum is 1\nvec4 normsum(vec4 p) {\n    return p / (p.x+p.y+p.z+p.w);\n}\n\n// v = vec4(attack,decay,hold,release), s = sustain amplitude\nfloat adsr(float t, vec4 v, float s) {\n    v.xyw = max(vec3(2.2e-05),v.xyw);\n    // attack term\n    float ta = t/v.x;\n    // decay / sustain amplitude term\n    float td = max(s, 1.0-(t-v.x)*(1.0-s)/v.y);\n    // length / release term\n    float tr = (1.0 - max(0.0,t-(v.x+v.y+v.z))/v.w);\n    return max(0.0, min(ta, tr*td));\n}\n\nfloat pops(float t) {\n    vec2 a = seq(t,1.0/4.0);\n    a.x = mod(a.x,3.0);\n    \n    vec3 r = vec3(0.0,-2.0,7.0);\n    \n    float q = index(r.x, r.y, r.z, a.x);\n    \n    vec2 w = seq(t,1.0/4.0);\n    float n = 30.0+24.0+q+12.0*mod(floor(w.x*0.5),2.0);\n    \n    float vib_f = hz(0.3*sinosc(4.0*t));\n    \n    return triosc(hz(n)*t + vib_f)\n        * adsr(w.y,vec4(0.01,0.1,0.0,0.2),0.3) * 0.5;\n}\n\nfloat lead(float t) {\n    vec2 a = seq(t,2.0);\n    a.x = mod(a.x,4.0);\n    \n    vec4 r = vec4(0.0,2.0,3.0,0.0);\n    \n    float q = index(r.x, r.y, r.z, r.w, a.x);\n    \n    vec2 w = seq(t,2.0);\n    float n = 30.0+24.0+q;\n    \n    float amp = adsr(w.y,vec4(1.0,0.0,0.0,1.0),1.0);\n    float vib_f = hz(amp*0.5*sinosc(5.0*t));\n    \n    return sinosc(hz(n)*t + vib_f)\n        * amp;\n}\n\n// returns note, amp\nfloat bassline(float t) {\n    vec2 a = seq(t,2.0);\n    a.x = mod(a.x,4.0);\n    \n    vec4 r = vec4(0.0,-2.0,-7.0,3.0);\n    \n    float q = index(r.x, r.y, r.z, r.w, a.x);\n    \n    vec2 w = seq(t,1.0/4.0);\n    float n = 30.0+q+12.0*mod(floor(w.x*0.5),2.0);\n    \n    return triosc(hz(n)*t)\n        * adsr(w.y,vec4(0.001,0.0,0.0,0.2),1.0);\n}\n\nvec2 music(float t) {\n    vec2 q = seq(t,8.0);\n    q.x = mod(q.x,7.0);\n    \n    vec2 s = vec2(bassline(t));\n    \n    s += lead(t)*vec2(0.75,0.25)*step(1.0,q.x);\n    \n    // 4-tap delay\n    float delay = 0.256;\n    float d_f = 0.75;\n    float d_t = t - 24.0;\n    float p_amp = step(3.0,q.x);\n    s += pops(d_t)*p_amp;\n    \n    return vec2( s/3.0 );\n}\n\nvec2 mainSound( in int samp,float t) {\n    Random rng = seed(123);\n    const int N = 256;\n    float spread = 6.0;\n    vec2 o = vec2(0.0);\n    float va = 1.0/float(N);\n    for (int i = 0; i < N; ++i) {\n        float d = float(i+1) / float(N);\n        d *= random(rng);\n        float q = d*10.0/spread;\n        o += music(max(0.0, t - d)) * (exp(q/(1.0+q*q))-1.0)*2.0;\n    }\n    o *= va*2.0;\n    o += mix(o, music(t), 0.3);\n    return o;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// random number generator library (https://www.shadertoy.com/view/ssGXDd)\n// by Leonard Ritter (@leonard_ritter)\n\n// based on https://www.shadertoy.com/view/MdcfDj\n// license: https://unlicense.org/\n\n// comment out for faster but lower quality hashing\n#define RNGL_HIGH_QUALITY\n\nstruct Random { uint s0; uint s1; };\n\n// constructors; note that constructors are wilfully unique,\n// i.e. calling a different constructor with the same arguments will not\n// necessarily produce the same state.\nuint uhash(uint a, uint b);\nRandom seed(uint s) { return Random(s, uhash(0x1ef7c663u, s)); }\nRandom seed(uvec2 s) { return Random(s.y, uhash(s.x, s.y)); }\nRandom seed(Random a, uint b) { return Random(b, uhash(a.s1, b)); }\nRandom seed(Random a, uvec2 b) { return seed(a, uhash(b.x, b.y)); }\nRandom seed(Random a, uvec3 b) { return seed(a, uhash(uhash(b.x, b.y), b.z)); }\nRandom seed(Random a, uvec4 b) { return seed(a, uhash(uhash(b.x, b.y), uhash(b.z, b.w))); }\nRandom seed(uvec3 s) { return seed(seed(s.xy), s.z); }\nRandom seed(uvec4 s) { return seed(seed(s.xy), s.zw); }\nRandom seed(int s) { return seed(uint(s)); }\nRandom seed(ivec2 s) { return seed(uvec2(s)); }\nRandom seed(ivec3 s) { return seed(uvec3(s)); }\nRandom seed(ivec4 s) { return seed(uvec4(s)); }\nRandom seed(Random a, int b) { return seed(a, uint(b)); }\nRandom seed(Random a, ivec2 b) { return seed(a, uvec2(b)); }\nRandom seed(Random a, ivec3 b) { return seed(a, uvec3(b)); }\nRandom seed(Random a, ivec4 b) { return seed(a, uvec4(b)); }\nRandom seed(float s) { return seed(floatBitsToUint(s)); }\nRandom seed(vec2 s) { return seed(floatBitsToUint(s)); }\nRandom seed(vec3 s) { return seed(floatBitsToUint(s)); }\nRandom seed(vec4 s) { return seed(floatBitsToUint(s)); }\nRandom seed(Random a, float b) { return seed(a, floatBitsToUint(b)); }\nRandom seed(Random a, vec2 b) { return seed(a, floatBitsToUint(b)); }\nRandom seed(Random a, vec3 b) { return seed(a, floatBitsToUint(b)); }\nRandom seed(Random a, vec4 b) { return seed(a, floatBitsToUint(b)); }\n\n// fundamental functions to fetch a new random number\n// the last static call to the rng will be optimized out\nuint urandom(inout Random rng) {\n    uint last = rng.s1;\n    uint next = uhash(rng.s0, rng.s1);\n    rng.s0 = rng.s1; rng.s1 = next;\n    return last;\n}\nuvec2 urandom2(inout Random rng) { return uvec2(urandom(rng),urandom(rng)); }\nuvec3 urandom3(inout Random rng) { return uvec3(urandom2(rng),urandom(rng)); }\nuvec4 urandom4(inout Random rng) { return uvec4(urandom2(rng),urandom2(rng)); }\nint irandom(inout Random rng) { return int(urandom(rng)); }\nivec2 irandom2(inout Random rng) { return ivec2(urandom2(rng)); }\nivec3 irandom3(inout Random rng) { return ivec3(urandom3(rng)); }\nivec4 irandom4(inout Random rng) { return ivec4(urandom4(rng)); }\n\nfloat unorm(uint n);\nfloat random(inout Random rng) { return unorm(urandom(rng)); }\nvec2 random2(inout Random rng) { return vec2(random(rng),random(rng)); }\nvec3 random3(inout Random rng) { return vec3(random2(rng),random(rng)); }\nvec4 random4(inout Random rng) { return vec4(random2(rng),random2(rng)); }\n\n// ranged random value < maximum value\nint range(inout Random rng, int mn, int mx) { return mn + (irandom(rng) % (mx - mn)); }\nivec2 range(inout Random rng, ivec2 mn, ivec2 mx) { return mn + (irandom2(rng) % (mx - mn)); }\nivec3 range(inout Random rng, ivec3 mn, ivec3 mx) { return mn + (irandom3(rng) % (mx - mn)); }\nivec4 range(inout Random rng, ivec4 mn, ivec4 mx) { return mn + (irandom4(rng) % (mx - mn)); }\nuint range(inout Random rng, uint mn, uint mx) { return mn + (urandom(rng) % (mx - mn)); }\nuvec2 range(inout Random rng, uvec2 mn, uvec2 mx) { return mn + (urandom2(rng) % (mx - mn)); }\nuvec3 range(inout Random rng, uvec3 mn, uvec3 mx) { return mn + (urandom3(rng) % (mx - mn)); }\nuvec4 range(inout Random rng, uvec4 mn, uvec4 mx) { return mn + (urandom4(rng) % (mx - mn)); }\nfloat range(inout Random rng, float mn, float mx) { float x=random(rng); return mn*(1.0-x) + mx*x; }\nvec2 range(inout Random rng, vec2 mn, vec2 mx) { vec2 x=random2(rng); return mn*(1.0-x) + mx*x; }\nvec3 range(inout Random rng, vec3 mn, vec3 mx) { vec3 x=random3(rng); return mn*(1.0-x) + mx*x; }\nvec4 range(inout Random rng, vec4 mn, vec4 mx) { vec4 x=random4(rng); return mn*(1.0-x) + mx*x; }\n\n// marshalling functions for storage in image buffer and rng replay\nvec2 marshal(Random a) { return uintBitsToFloat(uvec2(a.s0,a.s1)); }\nRandom unmarshal(vec2 a) { uvec2 u = floatBitsToUint(a); return Random(u.x, u.y); }\n\n//// specific distributions\n\n// normal/gaussian distribution\n// see https://en.wikipedia.org/wiki/Normal_distribution\nfloat gaussian(inout Random rng, float mu, float sigma) {\n    vec2 q = random2(rng);\n    float g2rad = sqrt(-2.0 * (log(1.0 - q.y)));\n    float z = cos(q.x*6.28318530718) * g2rad;\n    return mu + z * sigma;\n}\n\n// triangular distribution\n// see https://en.wikipedia.org/wiki/Triangular_distribution\n// mode is a mixing argument in the range 0..1\nfloat triangular(inout Random rng, float low, float high, float mode) {\n    float u = random(rng);\n    if (u > mode) {\n        return high + (low - high) * (sqrt ((1.0 - u) * (1.0 - mode)));\n    } else {\n        return low + (high - low) * (sqrt (u * mode));\n    }\n}\nfloat triangular(inout Random rng, float low, float high) { return triangular(rng, low, high, 0.5); }\n\n// after https://www.shadertoy.com/view/4t2SDh\n// triangle distribution in the range -0.5 .. 1.5\nfloat triangle(inout Random rng) {\n    float u = random(rng);\n    float o = u * 2.0 - 1.0;\n    return max(-1.0, o / sqrt(abs(o))) - sign(o) + 0.5;\n}\n\n//// geometric & euclidean distributions\n\n// uniformly random point on the edge of a unit circle\n// produces 2d normal vector as well\nvec2 uniform_circle_edge (inout Random rng) {\n    float u = random(rng);\n    float phi = 6.28318530718*u;\n    return vec2(cos(phi),sin(phi));\n}\n\n// uniformly random point in unit circle\nvec2 uniform_circle_area (inout Random rng) {\n    return uniform_circle_edge(rng)*sqrt(random(rng));\n}\n\n// gaussian random point in unit circle\nvec2 gaussian_circle_area (inout Random rng, float k) {\n    return uniform_circle_edge(rng)*sqrt(-k*log(random(rng)));\n}\nvec2 gaussian_circle_area (inout Random rng) { return gaussian_circle_area(rng, 0.5); }\n\n// barycentric coordinates of a uniformly random point within a triangle\nvec3 uniform_triangle_area (inout Random rng) {\n    vec2 u = random2(rng);\n    if (u.x + u.y > 1.0) {\n        u = 1.0 - u;\n    }\n    return vec3(u.x, u.y, 1.0-u.x-u.y);\n}\n\n// uniformly random on the surface of a sphere\n// produces normal vectors as well\nvec3 uniform_sphere_area (inout Random rng) {\n    vec2 u = random2(rng);\n    float phi = 6.28318530718*u.x;\n    float rho_c = 2.0 * u.y - 1.0;\n    float rho_s = sqrt(1.0 - (rho_c * rho_c));\n    return vec3(rho_s * cos(phi), rho_s * sin(phi), rho_c);\n}\n\n// uniformly random within the volume of a sphere\nvec3 uniform_sphere_volume (inout Random rng) {\n    return uniform_sphere_area(rng) * pow(random(rng), 1.0/3.0);\n}\n\n// barycentric coordinates of a uniformly random point within a 3-simplex\n// based on \"Generating Random Points in a Tetrahedron\" by Rocchini et al\nvec4 uniform_simplex_volume (inout Random rng) {\n    vec3 u = random3(rng);\n    if(u.x + u.y > 1.0) {\n        u = 1.0 - u;\n    }\n    if(u.y + u.z > 1.0) {\n        u.yz = vec2(1.0 - u.z, 1.0 - u.x - u.y);\n    } else if(u.x + u.y + u.z > 1.0) {\n        u.xz = vec2(1.0 - u.y - u.z, u.x + u.y + u.z - 1.0);\n    }\n    return vec4(1.0 - u.x - u.y - u.z, u); \n}\n\n\n/////////////////////////////////////////////////////////////////////////\n\n// if it turns out that you are unhappy with the distribution or performance\n// it is possible to exchange this function without changing the interface\nuint uhash(uint a, uint b) { \n    uint x = ((a * 1597334673U) ^ (b * 3812015801U));\n#ifdef RNGL_HIGH_QUALITY\n    // from https://nullprogram.com/blog/2018/07/31/\n    x = x ^ (x >> 16u);\n    x = x * 0x7feb352du;\n    x = x ^ (x >> 15u);\n    x = x * 0x846ca68bu;\n    x = x ^ (x >> 16u);\n#else\n    x = x * 0x7feb352du;\n    x = x ^ (x >> 15u);\n    x = x * 0x846ca68bu;\n#endif\n    return x;\n}\nfloat unorm(uint n) { return float(n) * (1.0 / float(0xffffffffU)); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}