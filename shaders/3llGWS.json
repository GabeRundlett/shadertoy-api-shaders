{
    "Shader": {
        "info": {
            "date": "1557476291",
            "description": "Better than iron...",
            "flags": 0,
            "hasliked": 0,
            "id": "3llGWS",
            "likes": 7,
            "name": "Unobtainium Throne",
            "published": 3,
            "tags": [
                "sword",
                "metal",
                "chair",
                "fibonacci",
                "royal"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 581
        },
        "renderpass": [
            {
                "code": "// \"Unobtainium Throne\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nvec4 SphFib (vec3 v, float n);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv3 (vec3 p);\nfloat Noiseff (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir;\nfloat dstFar, tCur;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec4 f4;\n  vec3 q, uf;\n  float dMin, d, db, dc, rad, len, s;\n  dMin = dstFar;\n  rad = 1.2;\n  len = 0.3;\n  q = p;\n  q.y = - q.y;\n  q = q.xzy;\n  q.z *= clamp (1. + 0.05 * q.z, 0.5, 1.5);\n  q.z -= 0.2 * dot (q.xy, q.xy);\n  dc = 0.54 * rad - length (q.xy - vec2 (0., -0.6 * rad));\n  d = SmoothMax (PrSphDf (q, rad), dc, 0.02);\n  db = d;\n  DMIN (1);\n  f4 = SphFib (normalize (q), 800.);\n  uf = f4.yzw;\n  len *= 1. - step (uf.y, -0.05) * (1. - step (0.55, abs (uf.x)));\n  if (len > 0.) {\n    q = RotToDir (uf, vec3 (0., 0., 1.), q - uf);\n    s = Hashfv3 (41. * uf);\n    len *= 1. - 0.1 * s;\n    q.z -= -1. + rad + len;\n    q.xy = Rot2D (q.xy, 2. * pi * s);\n    d = PrRoundBoxDf (q, vec3 (0.02, 0.005, len), 0.02);\n    q.z -= 0.5 * len;\n    d = min (d, PrCylDf (q.zyx, 0.02, 0.3 * len));\n  }\n  d = max (d, dc);\n  DMIN (2);\n  q = p;\n  q.y -= - 1.4;\n  d = SmoothMin (db, PrCylDf (q.xzy, 0.8 * (1. - 0.15 * q.y / 0.35), 0.35), 0.1);\n  DMIN (1);\n  q.y -= -0.4;\n  d = PrCylDf (q.xzy, 2.5, 0.05);\n  DMIN (3);\n  return 0.15 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 250; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  vec2 vf;\n  float dstObj, spec, nDotL, r, sh;\n  int idObjP;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    if (idObj == 1) {\n      r = length (ro.xy - vec2 (0., 1.1));\n      if (r < 0.1 && ro.z < 0.) {\n        col = mix (vec3 (0.2, 0.2, 1.), vec3 (0.2, 1., 0.2), smoothstep (0.45, 0.55,\n           Noiseff (1.5 * tCur))) * (2. + 2. * Noiseff (8. * tCur));\n        spec = 0.;\n      } else {\n        col = vec3 (0.7, 0.5, 0.1) * (0.5 + 0.5 * smoothstep (-1.5, -1., ro.y));\n        spec = 0.1;\n        vf = vec2 (16., 2.);\n      }\n    } else if (idObj == 2) {\n      col = vec3 (0.6, 0.6, 0.65);\n      vf = vec2 (64., 0.2);\n      spec = 0.2;\n    } else if (idObj == 3) {\n      r = length (ro.xz);\n      col = vec3 (0.4, 0.45, 0.4) * (1. - 0.7 * smoothstep (0.8, 1., r / 2.5)) *\n         (0.5 + 0.5 * smoothstep (1., 1.3, r));\n      spec = 0.;\n      vf = vec2 (8., 4.);\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    idObjP = idObj;\n    sh = ObjSShadow (ro, ltDir);\n    nDotL = max (dot (vn, ltDir), 0.);\n    nDotL *= nDotL;\n    col = col * (0.1 + 0.1 * max (vn.y, 0.) + 0.8 * sh * nDotL * nDotL) +\n       spec * step (0.95, sh) * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n    if (idObjP == 2) col += vec3 (0.3, 0., 0.) * SmoothBump (0.49, 0.51, 0.002,\n       mod (0.5 * length (ro) - 0.3 * tCur, 1.));\n  } else {\n    col = mix (vec3 (1., 1., 0.7), vec3 (0.), smoothstep (0.05, 0.2, length (mod (vec2 (32., 16.) *\n       vec2 (atan (rd.z, - rd.x), asin (rd.y)) / pi + 0.5, 1.) - 0.5))) * step (-0.25, rd.y);\n  }\n  return col;\n}\n\n#define AA  0\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, t, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.05 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.1 * pi * mPtr.y;\n  } else {\n    t = 8. * (mod (0.05 * tCur + 0.5, 2.) - 0.5);\n    t = (floor (t) + smoothstep (0.9, 1., mod (t, 1.))) / 8.;\n    az = 0.5 * pi * min (1. - t, t);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -10.);\n  dstFar = 25.;\n  ltDir = vuMat * normalize (vec3 (1., 1.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 3.7));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec4 SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, z, ni;\n  const float phi = 1.618034;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n    }\n  }\n  return vec4 (sqrt (ddMin), vfMin);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p)\n{\n  vec3 n;\n  float c;\n  n = normalize (cross (v1, v2));\n  c = dot (v1, v2);\n  return c * p + sqrt (1. - c * c) * cross (n, p) + (1. - c) * dot (n, p) * n;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}