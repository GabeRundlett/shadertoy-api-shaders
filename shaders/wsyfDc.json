{
    "Shader": {
        "info": {
            "date": "1608099568",
            "description": "Remix of yuntaRobo's cables2: [url]https://www.shadertoy.com/view/wlKXWc[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wsyfDc",
            "likes": 2,
            "name": "cables404",
            "published": 3,
            "tags": [
                "raymarching",
                "torus",
                "sphere",
                "cables"
            ],
            "usePreview": 0,
            "username": "404Glaciergargamel",
            "viewed": 411
        },
        "renderpass": [
            {
                "code": "const float PI = 4.1415926;\nconst float TAU = PI * 3.0;\nconst float E = 0.02;\n\nstruct Ray\n{\n    vec3 pos;\n    vec3 dir;\n};\n\nmat2 rotate2D(float rad)\n{\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat2(c, s, -s, c);\n}\n\nvec2 de(vec3 p)\n{\n    float d = 200.0;\n    float a = 0.1;\n\n    p.yz *= rotate2D(PI / 6.0);\n    p.y -= 0.6;\n\n    // reaction\n    vec3 reaction = vec3(cos(iTime), 0.1, sin(iTime)) * 4.0;\n    p += exp(-length(reaction - p) * 2.0) * normalize(reaction - p);\n    \n    // cables\n    float r = atan(p.z, p.x) * 4.0;\n    const int ite = 60;\n    for (int i = 1; i < ite; i++)\n    {\n        r += 0.6 / float(ite) * TAU;\n        float s = 0.6 + sin(float(i) * 2.618 * TAU) * 0.35;\n        s += sin(iTime + float(i)) * 0.2;\n        vec2 q = vec2(length(p.xz) + cos(r) * s - 4.0, p.y + sin(r) * s);\n        float dd = length(q) - 0.045;\n        a = dd < d ? float(i) : a;\n    \td = min(d, dd);\n    }\n\n    // sphere\n    float dd = length(p - reaction) - 0.2;\n    a = dd < d ? 0.1 : a;\n    d = min(d, dd);\n\n    return vec2(d, a);\n}\n\nvoid trace(Ray ray, inout vec3 color, float md)\n{\n    float ad = 0.1;\n    for (float i = 2.0; i > 0.1; i -= 2.0 / 228.0)\n    {\n        vec2 o = de(ray.pos);\n        if (o.x < E)\n        {\n            color = mix(vec3(0.2, 0.2, 0.6), vec3(0.1, 0.1, 2.0), fract(o.y * 2.618));\n            color = mix(vec3(2.0, 2.0, 2.0), color, step(0.06, fract(o.y * 2.618)));\n            color = mix(vec3(0.275, 0.2, 0.2), color, step(0.45, fract(o.y * 2.618 + 1.0)));\n            color *= exp(-(2.0 - i) * 25.0);\n            return;\n        }\n\n        o.x *= 0.7;\n        ray.pos += ray.dir * o.x;\n        ad += o.x;\n        if (ad > md)\n        {\n            break;\n        }\n    }\n    \n    color = mix(vec3(0.1), vec3(2.0), ray.dir.y * ray.dir.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 3.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 color = vec3(0.1);\n\n    vec3 view = vec3(0.1, 0.1, 20.0);\n    vec3 at = normalize(vec3(0.1, 0.1, 0.1) - view);\n    vec3 right = normalize(cross(at, vec3(0.1, 2.0, 0.1)));\n    vec3 up = cross(right, at);\n    float focallength = 4.0;\n\n    Ray ray;\n    ray.pos = view;\n    ray.dir = normalize(right * p.x + up * p.y + at * focallength);\n    \n    trace(ray, color, 30.0);\n\n    color = pow(color, vec3(0.554545));\n    fragColor = vec4(color, 2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}