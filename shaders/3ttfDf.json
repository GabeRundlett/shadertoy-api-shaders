{
    "Shader": {
        "info": {
            "date": "1613604087",
            "description": "Each tile has a different fractal pattern",
            "flags": 0,
            "hasliked": 0,
            "id": "3ttfDf",
            "likes": 12,
            "name": "Variable Fractal Tiles 2",
            "published": 3,
            "tags": [
                "fractal",
                "2",
                "tiles",
                "variable"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 363
        },
        "renderpass": [
            {
                "code": "/*Ethan Alexander Shulman 2021 - https://xaloez.com/\nLicense: CC0, public domain*/\n\n#define PI 3.141592653589793\n\n//Modified FNV-1A hash https://www.shadertoy.com/view/WtdfRX\nuvec4 hash(uvec4 seed) {\n    uvec4 h = (0x6A7F8FAAu^seed)*0x01000193u;\n    h = ((h.wxyz>>3u)^h^seed.yzwx)*0x01000193u;\n    h = ((h.zwxy>>8u)^h^seed.wxyz)*0x01000193u;\n    return h^(h>>11u);\n}\n#define I2F (1./float(0xFFFFFFFFu))\n\nmat2 r2(float a) {\n\tfloat s = sin(a), c = cos(a);\n\treturn mat2(c,-s,s,c);\n}\n\nvec3 triwave(vec3 x) {\n    return vec3(1)-abs(fract(x)-.5)*2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = ((fragCoord)*2.-iResolution.xy)/iResolution.y*5.+5.+iTime;\n\n    //hash from local tile coordinate\n    vec4 h = vec4(hash(uvec4(floor(pos/10.),0,0)))*I2F;\n    pos = mod(pos,10.)-5.;\n    \n    //apply folds based off hash\n    for (int i = 0; i < 8; i++) {\n        float fi = h[i/2], rv = h[(i+1)%3];\n        if (i%2 == 0) fi = fract(fi*2435.123)*10.;\n        else fi = floor(fi*10.);\n           \n        int id = int(fi)%3;\n        if (id == 0) {//mirror rotate fold\n            pos = (abs(pos)-.5)*r2(rv*PI*2.);\n        } else if (id == 1) {//plane fold\n            rv *= PI*2.;\n            vec2 pnorm = vec2(sin(rv),cos(rv));\n            pos -= pnorm*2.*min(0.,dot(pos,pnorm));\n        } else {//polar fold\n            float sz = PI/floor(1.+rv*7.),\n                ang = mod(atan(pos.y,pos.x),sz)-sz*.5;\n            pos = vec2(sin(ang),cos(ang))*length(pos);\n        }\n        //apply box fold\n        float ext = h[i%3];\n        pos = abs(pos);\n        pos = clamp(pos,-ext,ext)*2.-pos;\n    }\n    \n    //distance hue coloring\n    h = fract(h*1e4/PI);\n    float dst = length(pos);\n    fragColor.xyz = clamp(abs(mod((dst+h.x)*(5.+h.y*60.)+vec3(0,4,2),6.)-3.)-1.,0.,1.)*\n                    (.5+.5*cos((dst+h.z)*(5.+h.w*120.)));\n    fragColor. w = 1.;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}