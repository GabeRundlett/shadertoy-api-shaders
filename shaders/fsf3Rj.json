{
    "Shader": {
        "info": {
            "date": "1616197538",
            "description": "Triangle grid using the skewed, split rectangle method - outputs border distance, centre distance, cell UVs and cell IDs.\nIs it possible to make this shorter / quicker ?",
            "flags": 0,
            "hasliked": 0,
            "id": "fsf3Rj",
            "likes": 14,
            "name": "SkewTriGrid",
            "published": 3,
            "tags": [
                "grid",
                "triangle",
                "uv",
                "distance",
                "edge",
                "skew",
                "id"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 650
        },
        "renderpass": [
            {
                "code": "// Triangle grid using the skewed, split rectangle method\n//\n// Is it possible to make this any quicker?\n\n// SkewTriGrid outputs:\n// x = dist to border\n// y = dist to centre\n// zw = uv\n// id = celltile ID\n\n// this version based on fabrices excellent hexagonal tiling tutorial (I wish I'd found this earlier!!)\n// https://www.shadertoy.com/view/4dKXR3\nvec4 SkewTriGrid(vec2 uv, out vec2 id)\n{\n    uv *= mat2(1,-1./1.73, 0,2./1.73);\n    vec3 g = vec3(uv,1.-uv.x-uv.y);\n    vec3 _id = floor(g)+0.5;\n    g = fract(g);\n    float lg = length(g);\n    if (lg>1.)\n        g = 1.-g;\n    vec3 g2 = abs(2.*fract(g)-1.);                  // distance to borders\n    vec2 triuv = (g.xy-ceil(1.-g.z)/3.) * mat2(1,.5, 0,1.73/2.);\n    float edge = max(max(g2.x,g2.y),g2.z);\n    id = _id.xy;\n    //id*= mat2(1,.5, 0,1.73/2.); // Optional, unskew IDs\n    //id.xy += sign(lg-1.)*0.1; // Optional tastefully adjust ID's\n    return vec4((1.0-edge)*0.43,length(triuv),triuv);\n}\n/*\n// my original version...\nvec4 SkewTriGrid(vec2 uv, out vec2 id)\n{\n    const mat2 m=mat2(1.0, -0.57735, 0.0, 1.15470);\n    uv*=m;\n    vec3 ftri = fract(vec3(uv,1.0-uv.x-uv.y));\n    vec3 border = abs(2.0*ftri-1.0);\n    float edge = max(max(border.x,border.y),border.z); \n    id = floor(uv)+0.5;\n    vec2 triuv = (ftri.xy-0.5) * inverse(m);\n    float itri = sign(length(ftri)-1.);\n    triuv -= vec2(0.25, 0.1443376) * itri;\n    triuv.xy *= -itri;\n    //id*= inverse(m); // Optional, unskew IDs\n    //id.xy += itri*0.1; // Optional tastefully adjust ID's\n    return vec4((1.0-edge)*0.43, length(triuv), triuv);\n}\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    float xx = ((fragCoord.x-.5*iResolution.x) / iResolution.x)+0.5;\n\n    vec2 id;\n    vec4 h = SkewTriGrid(uv*(8.0+sin(iTime)),id);\n\n    vec3 bordercol = vec3(1.0,1.0,1.0);\n    vec3 shapecol = vec3(0.45,0.35,0.15);\n    \n    // just do a simple patterned shape tint based on cell IDs\n    float patternVal = .5; // 4.1\n    shapecol *= 1.0 + pow(abs(sin(length(id)*patternVal + iTime*0.65)), 4.0);\t// pulse mult\n    \n    // Output to screen\n    vec3 finalcol = mix(vec3(0.0),shapecol,smoothstep(0.0, 0.035, h.x-0.035)); // black outline edge\n    float vv = smoothstep(0.0, 0.055, h.x);\n    finalcol = mix(bordercol,finalcol, vv*vv); // white edge\n    finalcol = mix(vec3(0.0),finalcol,smoothstep(0.0, 0.035, h.y-0.035)); // black outline centre\n    vv = smoothstep(0.0, 0.055, h.y);\n    finalcol = mix(bordercol,finalcol, vv*vv);  // white centre    \n\n    // show the distances/UVs etc.\n    if (uv.y<-0.3)\n    {\n        if (xx<0.33)\n            finalcol = vec3(h.x);// show edge distance\n        else if (xx<0.66)\n            finalcol = vec3(h.y); // show centre distance\n        else\n            finalcol = vec3(h.zw,0.0); // show cellUV\n        // add some red divider lines\n        float dd = max( step(abs(xx-0.33),0.0025),step(abs(xx-0.66),0.0025));\n        dd = max(dd,step(abs(uv.y+0.305),0.0065));\n        finalcol = dd<1.0 ? finalcol : vec3(1.0,0.3,0.3);\n            \n    }\n    \n    fragColor = vec4(finalcol ,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}