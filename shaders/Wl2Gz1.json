{
    "Shader": {
        "info": {
            "date": "1558505991",
            "description": "inspired by [url=https://www.shadertoy.com/view/wtfGWS]Plento's Orbits[/url].\nstill to explore: coloring traps based on the simpleness or self-overlapping ness of the orbit polygons. eg a pentagon vs. a five-pointed star.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl2Gz1",
            "likes": 174,
            "name": "mandelbrot orbit trap periods",
            "published": 3,
            "tags": [
                "mandelbrot",
                "orbittrap",
                "grimoire"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 2640
        },
        "renderpass": [
            {
                "code": "// orion elenzil 20190521\n// inspired by https://www.shadertoy.com/view/wtfGWS\n\nconst float PI        = 3.14159265359;\nconst float TAU       = PI * 2.0;\n\n#define AA 2.0\n\n// todo 1: rewrite as mat2(A,-A.y,A.x) * B.\n// todo 2: replace with complexSqr(A).\nvec2 complexMul(in vec2 A, in vec2 B) {\n    return vec2((A.x * B.x) - (A.y * B.y), (A.x * B.y) + (A.y * B.x));\n}\n\n// https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv2rgb(in vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n// point of interest\nstruct POI {\n    vec2    center;\n    float range;\n    float maxIter;\n};\n\n\nfloat mandelEscapeIters(in vec2 C, in float maxIter, in vec2 ocOff, out float cycleLength1, out float cycleLength2) {\n    vec2 Z = C;\n    vec2 orbitCenter1 = 0.3 * vec2(cos(iTime * 1.00), sin(iTime * 1.00));\n    vec2 orbitCenter2 = orbitCenter1 / 0.3 * 0.2;\n    orbitCenter1 += ocOff;\n    orbitCenter2 += ocOff;\n    cycleLength1 = 0.0;\n    cycleLength2 = 0.0;\n    for (float n = 0.0; n < maxIter; ++n) {\n        Z    = complexMul(Z, Z) + C;\n        if (cycleLength1 == 0.0 && abs(1.0 - length(Z - orbitCenter1)) < 0.015) {\n            cycleLength1 = n;\n        }\n        if (cycleLength2 == 0.0 && abs(0.2 - length(Z - orbitCenter2)) < 0.01) {\n            cycleLength2 = n;\n        }\n        if (dot(Z, Z) > 4.0) {\n            return n;\n        }\n    }\n    return maxIter;\n}\n\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n    RGBA.a  = 1.0;\n    float smallWay = min(iResolution.x, iResolution.y);\n    vec2 uv = (XY * 2.0 - iResolution.xy)/smallWay;\n    float t = iTime * TAU / 5.0;\n\n    vec2 ocOff = vec2(0.0);\n    if (any(greaterThan(iMouse.xy, vec2(50.0)))) {\n        ocOff = (iMouse.xy * 2.0 - iResolution.xy)/smallWay;\n    }\n\n    const POI poi1 = POI(vec2(-.7105, 0.2466), 0.04, 90.0);\n    const POI poi2 = POI(vec2(-.600, 0.0000), 1.200, 70.0);\n    const POI poi  = poi2;\n\n    float rng = poi.range;// * (1.0 + sin(t) * 0.1);\n    \n    float cycleLength1;\n    float cycleLength2;\n\n    vec3 col = vec3(0.0);\n\n    for( float m = 0.0; m < AA; ++m) {\n    for( float n = 0.0; n < AA; ++n) {\n        vec2  C   = (uv + vec2(m, n) / (AA * smallWay)) * rng + poi.center;\n        float escapeIters = mandelEscapeIters(C, poi.maxIter, ocOff, cycleLength1, cycleLength2);\n        float f   =  escapeIters / poi.maxIter;\n        if (escapeIters == poi.maxIter) {\n            f = 0.0;\n        }\n        f = pow(f, 0.6);\n        f *= 0.82;\n\n        vec3 rgb  = vec3(f * 0.2, f * 0.6, f * 1.0);\n\n        if (cycleLength1 > 0.0) {\n            const float spectrumSamples = 20.0;\n            rgb += vec3(cos(cycleLength1 / spectrumSamples * TAU) * 0.2 + 0.3);\n        }\n        if (cycleLength2 > 0.0) {\n            const float spectrumSamples = 30.0;\n            rgb += hsv2rgb(vec3(fract(cycleLength2/ spectrumSamples), 0.9, 0.8));\n        }\n\n        col += rgb;\n    }}\n\n    col /= (AA * AA);\n\n    RGBA.rgb = col;\n}\n\n// grimoire bindings\n// out vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}