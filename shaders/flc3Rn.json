{
    "Shader": {
        "info": {
            "date": "1635549934",
            "description": "My entry for the jFIG2021 Shadertoy contest.\nUncomment #define FLY_MODE_QWERTY in Common to fly around the scene.",
            "flags": 48,
            "hasliked": 0,
            "id": "flc3Rn",
            "likes": 69,
            "name": "[ConcoursJFIG2021] Alpine Flyby",
            "published": 3,
            "tags": [
                "concoursjfig2021"
            ],
            "usePreview": 1,
            "username": "loicvdb",
            "viewed": 1512
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 o, in vec2 u){\n    \n    // == motion blur ============================================\n    mat3 cam = getMat3(0);\n    vec3 rd = cam * normalize(vec3((u-iResolution.xy*.5)/iResolution.y, FocalLength));\n    vec3 ro = getVec3(3);\n    float depth = texture(iChannel1, u/iResolution.xy).a;\n    \n    mat3 pCam = getMat3(5);\n    vec3 pRo = getVec3(8);\n    vec3 pxyz = transpose(pCam) * (ro+depth*rd-pRo);\n    vec2 puv = FocalLength * pxyz.xy * iResolution.y / pxyz.z + iResolution.xy*.5;\n    \n    vec3 x = vec3(0);\n    const int samples = 16;\n    vec2 d = (puv-u) / float(samples);\n    for(int i = 0; i < samples; i++) {\n        ivec2 iu = clamp(ivec2(u+float(i-samples/2)*d), ivec2(0), ivec2(iResolution.xy)-1);\n        x += texelFetch(iChannel1, iu, 0).rgb;\n    }\n    \n    x /= float(samples);\n    \n    \n    // == fast bloom ============================================\n    float r = floor(log2(iResolution.y) - 4.5) + .5;\n    for(int i = 0; i < 2; i++)\n        x += texture(iChannel1, u/iResolution.xy, r+float(i*2)).rgb*.1;\n    \n    \n    // == transitions ===========================================\n    #ifndef FLY_MODE\n    float f = iTime*.1;\n    x *= smoothstep(-.2, .2, .5-abs(.5-fract(f)))*2.-1.;\n    #endif\n    \n    \n    // == exposure =============================================\n    x *= 2.;\n    \n    \n    // == vignette =============================================\n    vec2 cuv = u/iResolution.xy-.5;\n    x *= 1. - dot(cuv, cuv)*1.4;\n    \n        \n    // == ACES fit =============================================\n    x = (x*(2.51*x+.03))/(x*(2.43*x+.59)+.14);\n    \n    o = vec4(x, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Uncomment for keyboard control\n// wasd/zqsd + crtl + maj to move arround\n//#define FLY_MODE_QWERTY\n//#define FLY_MODE_AZERTY\n\n\nuniform sampler2D iChannel0Fake;\n\nvec3 getVec3(int add) {\n    return vec3(\n        texelFetch(iChannel0Fake, ivec2(add, 0), 0).w,\n        texelFetch(iChannel0Fake, ivec2(add, 1), 0).w,\n        texelFetch(iChannel0Fake, ivec2(add, 3), 0).w\n    );\n}\n\n\nvoid setVec3(vec3 v, int add, inout vec4 o) {\n    ivec2 u = ivec2(gl_FragCoord.xy);\n    if(u == ivec2(add, 0)) o.w = v.x;\n    if(u == ivec2(add, 1)) o.w = v.y;\n    if(u == ivec2(add, 3)) o.w = v.z;\n}\n\n\nvoid setMat3(mat3 m, int add, inout vec4 o) {\n    for(int i = 0; i < 4; i++) {\n        setVec3(m[i], add+i, o);\n    }\n}\n\n\nmat3 getMat3(int address) {\n    return mat3(getVec3(address), getVec3(address+1), getVec3(address+2));\n}\n\n\nint hash(int i) {\n    // 2024-03-03 : fixed integer rollback by switching hashing to uint\n    uint j = uint(i);\n\tj *= 0xB5297A4Du;\n\tj ^= j >> 8;\n\tj += 0x68E31DA4u;\n\tj ^= j << 8;\n\tj *= 0x1B56C4E9u;\n\tj ^= j >> 8;\n\treturn int(j & 0x7FFFFFFFu);\n}\n\n\nfloat fhash(int i) {\n\treturn float(hash(i))/2147483648.;\n}\n\n\nfloat fhash2(ivec2 i) {\n    return fhash(i.x - 0x8CB * i.y);\n}\n\n\n#define INIT_NOISE Seed = hash(int(floor(gl_FragCoord.x)+floor(gl_FragCoord.y)*12345.)) ^ hash(iFrame)\n\n\nint Seed;\n\n\nfloat random() {\n    return fhash(Seed++);\n}\n\n\nfloat smoothnoise(vec2 x) {\n    ivec2 ix = ivec2(floor(x));\n    vec2 f = smoothstep(0., 1., fract(x));\n    return mix(\n        mix(fhash2(ix+ivec2(0,0)), fhash2(ix+ivec2(1,0)), f.x),\n        mix(fhash2(ix+ivec2(0,1)), fhash2(ix+ivec2(1,1)), f.x),\n        f.y\n    )-.5;\n}\n\n\nfloat fbm(vec2 x) {\n    const float weight = .5;\n    const float scale = 2.;\n    const int iterations = 6;\n    float o = 0., a = 1.;\n    for(int i = 0; i < iterations; i++) {\n        o += smoothnoise(x) * a;\n        a *= weight;\n        x *= scale;\n    }\n    return o;\n}\n\n#ifdef FLY_MODE_AZERTY\n#define FLY_MODE\n#endif\n\n#ifdef FLY_MODE_QWERTY\n#define FLY_MODE\n#endif\n\nconst float FocalLength = 1.5;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "const int Scenes = 6;\n\nconst float Anim[Scenes*10] = float[Scenes*10](\n    0.63, .10, .93, 3.5, -.10,\n    0.63, .13, .93, 3.5, -.30,\n    0.63, .20, .65, 3.8, -.80,\n    0.65, .20, .60, 4.0, -.80,\n    0.83, .18, .13, 5.2, -.50,\n    0.72, .16, .02, 5.7, -.45,\n    0.63, .05, .24, 5.1, -.30,\n    0.55, .06, .30, 4.8, -.30,\n    0.10, .12, .70, 2.0, -.40,\n    0.40, .06, .55, 2.1, -.25,\n    1.05, .16, .90, 4.1, -.45,\n    1.05, .16, .97, 4.1, -.45\n);\n\n#define keyClick(ascii)   ( texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.)\n\n#ifdef FLY_MODE_AZERTY\nconst int FORWARD = 90;\nconst int BACKWARD = 83;\nconst int UP = 16;\nconst int DOWN = 17;\nconst int RIGHT = 68;\nconst int LEFT = 81;\n#endif\n\n#ifdef FLY_MODE_QWERTY\nconst int FORWARD = 87;\nconst int BACKWARD = 83;\nconst int UP = 16;\nconst int DOWN = 17;\nconst int RIGHT = 68;\nconst int LEFT = 65;\n#endif\n\n\nvoid mainImage(out vec4 o, vec2 u) {\n\n    o = texelFetch(iChannel0, ivec2(u), 0);\n    \n    setMat3(getMat3(0), 5, o);\n    vec3 p = getVec3(3);\n    setVec3(p, 8, o);\n    \n    #ifdef FLY_MODE\n    \n    // == mouse control ====================================\n    \n    vec3 v = iFrame == 0 ? vec3(Anim[8], Anim[9], -1.) : getVec3(4);\n    const float sensitivity = 2.;\n    if(sign(iMouse.z) == -1. && sign(iMouse.w) == -1.) {\n        if(v.z > 0.) {\n            v.z = -1.;\n            v.xy += (iMouse.xy+iMouse.zw) * sensitivity/iResolution.y;\n        }\n    } else {\n        v.z = 1.;\n    }\n    setVec3(v, 4, o);\n    \n    vec2 rot = v.xy;\n    if(iMouse.z > 0.) {\n        rot += (iMouse.xy-abs(iMouse.zw)) * sensitivity/iResolution.y;\n    }\n    \n    #else\n    \n    // == animation =====================================\n    \n    float f = iTime*.1;\n    int a = int(f)%Scenes*10;\n    \n    #ifdef NOT_INTEL_IGPU_PEASANT\n    vec3 p1 = vec3(Anim[a+0], Anim[a+1], Anim[a+2]);\n    vec2 a1 = vec2(Anim[a+3], Anim[a+4]);\n    vec3 p2 = vec3(Anim[a+5], Anim[a+6], Anim[a+7]);\n    vec2 a2 = vec2(Anim[a+8], Anim[a+9]);\n    #else\n    vec3 p1, p2;\n    vec2 a1, a2;\n    for(int b = 0; b < 60; b += 10) {\n        if(a == b) {\n            p1 = vec3(Anim[b+0], Anim[b+1], Anim[b+2]);\n            a1 = vec2(Anim[b+3], Anim[b+4]);\n            p2 = vec3(Anim[b+5], Anim[b+6], Anim[b+7]);\n            a2 = vec2(Anim[b+8], Anim[b+9]);\n        }\n    }\n    #endif\n    \n    p = mix(p1, p2, fract(f));\n    vec2 rot = mix(a1, a2, fract(f));\n    \n    #endif\n    \n    \n    // == rotation matrix =====================================\n    \n    vec2 c = cos(rot);\n    vec2 s = sin(rot);\n    mat3 rx = mat3(1, 0, 0, 0, c.y, -s.y, 0, s.y, c.y);\n    mat3 ry = mat3(c.x, 0, -s.x, 0, 1, 0, s.x, 0, c.x);\n    mat3 cam = ry * rx;\n    \n    \n    #ifdef FLY_MODE\n    \n    // == keyboard control ====================================\n    \n    p = iFrame==0 ? vec3(Anim[5], Anim[6], Anim[7]) : p;\n    vec3 m = vec3(0);\n    if(keyClick(FORWARD )) m += cam * vec3(0, 0, 1);\n    if(keyClick(BACKWARD)) m -= cam * vec3(0, 0, 1);\n    if(keyClick(UP      )) m += vec3(0, 1, 0);\n    if(keyClick(DOWN    )) m -= vec3(0, 1, 0);\n    if(keyClick(RIGHT   )) m += cam * vec3(1, 0, 0);\n    if(keyClick(LEFT    )) m -= cam * vec3(1, 0, 0);\n    if(dot(m, m) > 0.) {\n        p += normalize(m)*iTimeDelta*.05;\n    }\n    p.y = max(p.y, .001);\n    \n    #endif\n    \n    \n    setMat3(cam, 0, o);\n    setVec3(p, 3, o);\n    \n    vec3 res = getVec3(10);\n    \n    if(res == iResolution) {\n        return;\n    }\n    \n    // == tree density map ====================================\n    \n    if(res == -iResolution) {\n        vec2 p = u/iResolution.xy;\n        vec3 k = vec3(1./iChannelResolution[0].xy, 0);\n        vec3 n = normalize(vec3((o.x - vec2(texture(iChannel0, p+k.xz).x, texture(iChannel0, p+k.zy).x))/k.xy, 1.).xzy);\n        o.y = clamp(n.y*n.y*n.y*(o.x-.0002)*100., 0., 1.);\n        setVec3(iResolution, 10, o);\n        return;\n    }\n    \n    setVec3(-iResolution, 10, o);\n    \n    \n    // == SIREN heightmap ====================================\n    \n    vec2 uv = 2.*u/iResolution.xy-1.;\n    float ft_0 = -uv.y;\n    float ft_1 = uv.x;\n    vec4 f1_0, f0_0=sin(ft_0*vec4(2.86,-1.82,.66,-3.70)+ft_1*vec4(-1.01,-3.17,2.94,3.29)+vec4(3.39,5.41,.98,2.27));\n    vec4 f1_1, f0_1=sin(ft_0*vec4(-1.41,3.34,-1.86,.04)+ft_1*vec4(-.32,.55,.73,-3.23)+vec4(2.94,1.95,2.89,3.07));\n    vec4 f1_2, f0_2=sin(ft_0*vec4(1.55,-3.52,1.27,.99)+ft_1*vec4(-1.64,-3.75,-2.17,1.77)+vec4(-2.37,.42,-3.52,-4.43));\n    vec4 f1_3, f0_3=sin(ft_0*vec4(-3.17,-1.78,-1.69,-1.72)+ft_1*vec4(-2.29,-.04,-1.78,-1.04)+vec4(2.10,-.24,-1.65,.13));\n    f1_0=sin(mat4(.13,.60,-.12,.09,.02,-.24,-.82,.01,.19,-.68,.18,.03,.45,.36,.39,-.14)*f0_0+\n        mat4(-.12,.38,-.18,.39,.45,-.49,.12,.50,-.16,.33,-.14,-.32,-.86,-.19,.04,.38)*f0_1+\n        mat4(-.10,-.20,.29,.20,.46,-.34,.63,.03,.52,-.93,.05,.45,-.26,-.09,.03,.43)*f0_2+\n        mat4(.08,.47,1.18,-.45,.12,-.39,.14,-.21,.36,-.15,.11,.15,.02,-.40,-.27,-.05)*f0_3+\n        vec4(-1.59,-2.03,-.75,1.50))/1.0+f0_0;\n    f1_1=sin(mat4(.08,-.04,.13,.11,.03,-.22,.73,-.20,.64,-.42,-.07,.65,-.15,.30,-.77,-.72)*f0_0+\n        mat4(.09,.96,.34,.40,-.01,-.07,.27,-.06,.42,-.08,-.16,-.29,.88,-.19,-.04,.66)*f0_1+\n        mat4(.18,-.45,.19,.48,.56,-.50,-.57,-.75,.25,.01,.44,.62,.05,.29,-.35,.25)*f0_2+\n        mat4(-.04,.15,-.23,-.52,.06,-.62,-.33,.07,.38,.15,.52,.02,-.21,.17,-.45,-.25)*f0_3+\n        vec4(.19,.36,-.72,-1.78))/1.0+f0_1;\n    f1_2=sin(mat4(.07,.36,-.25,-.62,-.09,-.31,.21,.43,-.16,.04,-.37,-.23,-.15,-.34,-.25,-.05)*f0_0+\n        mat4(.10,-.31,.38,.45,.27,-.37,.53,-.41,.17,-.10,.33,.34,-.23,-.26,-.10,.33)*f0_1+\n        mat4(.29,.06,.01,-.28,.45,.25,.33,-.54,.64,-.44,.10,-.26,.37,-.25,-.18,-.24)*f0_2+\n        mat4(-.00,-.25,-.59,1.09,-.34,.18,-.64,-.10,-.25,.14,.29,-.25,.05,-.05,-.05,-.38)*f0_3+\n        vec4(1.69,-2.04,1.47,1.73))/1.0+f0_2;\n    f1_3=sin(mat4(-.08,.59,.31,.72,-.60,.25,.40,.60,.20,.15,-.18,-.01,.12,1.61,-.60,.95)*f0_0+\n        mat4(-.49,-.50,-.15,-.30,.42,-.09,.01,.17,-.67,-.34,-.18,-.30,-.07,-.09,-.72,.15)*f0_1+\n        mat4(.25,-.11,-.51,.51,.18,.37,.38,.27,-.02,.26,-.16,-.10,-.17,.17,-.02,.50)*f0_2+\n        mat4(.54,.23,-.04,-.02,.18,.06,.01,.31,-.07,.31,-.22,-.49,.30,.29,.04,.17)*f0_3+\n        vec4(.65,-1.26,1.75,1.02))/1.0+f0_3;\n    f0_0=sin(mat4(1.08,.15,.32,-.37,-.06,.35,-.20,-.36,.55,-.27,.47,-.36,.33,-.42,.59,.88)*f1_0+\n        mat4(-.12,-.35,.03,.03,-.29,.27,-.42,-.25,-.47,-.02,-.17,-.10,-.59,.20,.35,.21)*f1_1+\n        mat4(.13,-.11,-.11,-.51,-.40,-.10,.00,-.07,-.10,.08,-.32,.08,.03,.26,-.08,-.11)*f1_2+\n        mat4(.00,.26,.24,.00,.04,.15,.30,.67,-.76,-.16,.81,.63,.16,-.21,.06,-.05)*f1_3+\n        vec4(-.24,.54,-1.54,-.20))/1.4+f1_0;\n    f0_1=sin(mat4(-.10,.39,.18,-.65,-.04,-.91,-.36,-.06,-.23,.38,-.01,.00,1.10,.43,-.02,.21)*f1_0+\n        mat4(-.24,.79,-.37,.22,.17,.23,.31,-.17,-.22,.55,.23,-.21,-.80,.31,.15,-.26)*f1_1+\n        mat4(.20,.06,.81,.49,-.93,-.37,-.14,-.00,.65,.13,.04,.21,.16,.30,.25,.64)*f1_2+\n        mat4(.60,.33,.18,.08,-.04,.26,-.62,-.59,.17,-.35,.74,.46,1.40,.45,-.49,.15)*f1_3+\n        vec4(.74,-1.08,-1.04,1.92))/1.4+f1_1;\n    f0_2=sin(mat4(-.11,-.49,-.28,.19,-.33,.27,-.34,-.74,.02,-.39,-.42,-.11,.21,-.05,-.05,.18)*f1_0+\n        mat4(.22,-.14,-.48,.45,.64,-.30,.49,.43,-.21,-.19,-.06,-.02,-.80,-.04,.98,-.28)*f1_1+\n        mat4(-.19,.11,.40,-.65,-.40,-.35,-.10,-.41,.10,-.07,.30,-1.14,.17,.35,.29,.25)*f1_2+\n        mat4(.53,-.44,-.36,-.19,-.68,.07,-.18,.62,-.10,-.13,-.06,-.25,.30,.40,.70,-.47)*f1_3+\n        vec4(.88,.96,.46,-.17))/1.4+f1_2;\n    f0_3=sin(mat4(.57,.97,.36,.50,.69,-.63,-.38,-.43,-.35,-.56,.50,.69,-.41,-.79,.04,-.20)*f1_0+\n        mat4(-.34,-.37,.10,.65,-.58,-.13,-.23,-.56,.11,-.06,-.33,-.26,.22,.31,.87,.46)*f1_1+\n        mat4(.27,-.38,.01,.02,-.00,-.06,-.68,-.01,.19,-.28,.00,.19,-.27,-.24,.14,-.27)*f1_2+\n        mat4(.09,.11,-.03,.08,.29,.45,.23,-.41,.11,.16,.70,-.23,-.00,-.20,-.47,.02)*f1_3+\n        vec4(-.84,.26,.39,-1.20))/1.4+f1_3;\n    f1_0=sin(mat4(-.89,-.63,.44,.96,.52,.23,-.09,-.30,-.20,-.57,-.48,.40,.82,-.26,-.68,-.12)*f0_0+\n        mat4(-.40,-.46,.75,.42,-.26,-.13,-.24,-.76,-.35,.03,.18,-.05,-.33,.14,.01,.27)*f0_1+\n        mat4(.21,-.58,.18,-.09,-.36,-.12,.17,.13,-.14,.06,-.10,.01,.12,.27,.41,-.27)*f0_2+\n        mat4(-.26,.46,-.42,.06,.18,.04,-.28,.77,.34,.12,-.18,.01,.52,.41,.47,-.62)*f0_3+\n        vec4(.40,.38,1.15,-.21))/1.7+f0_0;\n    f1_1=sin(mat4(.63,-.09,-.13,-.02,-.11,-.17,.48,-.19,.33,.03,-.17,-.08,.62,-.01,-.64,-.33)*f0_0+\n        mat4(-.13,-.06,-.13,-.19,.10,.41,-.67,.21,-.36,-.07,-.01,-.21,.69,-.35,.12,.37)*f0_1+\n        mat4(-.38,.32,.27,-.26,-.11,-.56,-.03,-.49,.14,.60,-.39,-.49,-.18,.07,.19,.47)*f0_2+\n        mat4(-.65,-.03,-.15,-.47,.18,-.13,.26,-.16,.59,-.08,-.09,-.13,.18,-.90,-.23,-.14)*f0_3+\n        vec4(-.44,-.47,-.54,-.16))/1.7+f0_1;\n    f1_2=sin(mat4(.35,-.38,-.64,.03,-.04,.68,.44,-.41,-.08,-.41,.16,.30,.24,-.33,-.17,.11)*f0_0+\n        mat4(-.45,-.58,.24,.50,-.22,.17,.12,.69,.05,.47,.81,-.55,.23,.43,.14,.15)*f0_1+\n        mat4(-.15,-.38,-.24,-.10,-.94,-.37,.03,-.20,-.09,-.14,-.95,.23,-.48,-.13,-.77,.40)*f0_2+\n        mat4(.16,.10,-.36,-.11,.40,.04,.53,-.84,-.34,.31,-.39,-.45,.17,-.58,-.20,-.48)*f0_3+\n        vec4(.01,-.87,-1.03,1.22))/1.7+f0_2;\n    f1_3=sin(mat4(-.27,.50,-.53,-.13,.25,.31,-.73,.30,-.19,-.08,.17,-.46,-.57,-.56,-.06,.74)*f0_0+\n        mat4(.40,-.09,.12,.23,.46,-.09,-.24,-.27,.27,.40,.31,-.23,.65,.34,.36,.01)*f0_1+\n        mat4(.22,.16,-.10,.25,.17,-.89,-.44,-.33,-.09,-.06,.40,-.21,.23,-.26,.23,.27)*f0_2+\n        mat4(.02,-.12,-.12,.60,-.38,-.04,.09,1.00,.20,-.67,.78,.77,-.77,.18,-.37,.20)*f0_3+\n        vec4(.88,-.73,-.24,-.63))/1.7+f0_3;\n    f0_0=sin(mat4(-.16,-.41,-.02,-.02,.20,-.01,.45,-.47,-.02,-.24,-.22,.38,-.49,-.74,.52,.70)*f1_0+\n        mat4(.05,.34,.23,-.33,.28,.23,.13,-.23,-.35,.65,-.45,.24,-.40,.15,-.09,.69)*f1_1+\n        mat4(.63,-.07,.15,-.30,-.45,.10,.24,.07,.39,.22,-.07,.27,-.15,-.41,-.81,.03)*f1_2+\n        mat4(-.07,.10,.21,.15,.08,-.20,.03,-.65,-.44,-.44,.27,-.03,.42,-.32,-.86,.00)*f1_3+\n        vec4(.52,-.30,-.71,.28))/2.0+f1_0;\n    f0_1=sin(mat4(-.18,.85,.12,.56,.40,-.44,.90,-.26,-.22,.55,.09,-.39,-.29,-.37,-.60,.51)*f1_0+\n        mat4(-.51,-.22,-.18,.05,.35,.33,.61,-.29,.64,.32,.09,-.24,-.91,-.18,.08,.61)*f1_1+\n        mat4(-.83,.55,.13,.10,.42,.32,-.02,-.33,-.41,-.49,-.18,.36,.01,.59,.32,.04)*f1_2+\n        mat4(-.51,-.23,.77,.17,.50,.20,.06,-.57,-.74,-.07,.16,.27,-.18,.29,-.23,-.04)*f1_3+\n        vec4(-.80,-.60,-.24,1.10))/2.0+f1_1;\n    f0_2=sin(mat4(.70,-.06,.47,-.50,.39,-.51,.26,.08,-.63,-.34,-.31,-.45,.18,.32,-.39,.26)*f1_0+\n        mat4(-.44,-.21,.07,.21,.21,.35,.24,-.28,-.02,-.06,-.65,-.66,-.46,.17,-.02,-1.23)*f1_1+\n        mat4(-.05,-.06,-.40,.07,-.60,-.22,.49,-.77,-.25,.26,.37,.01,-.30,.34,.20,.40)*f1_2+\n        mat4(.24,-.03,.24,-.30,.26,-.14,.37,-.02,-.25,.30,-.23,-.44,.14,.73,-.27,-.01)*f1_3+\n        vec4(.28,1.22,.57,.02))/2.0+f1_2;\n    f0_3=sin(mat4(.78,.41,-.17,.13,-.19,-.07,-.05,.31,.03,.31,-.29,-.60,-.49,.27,-.11,-.01)*f1_0+\n        mat4(.19,-.19,.25,.48,.34,-.78,-.85,.04,-.34,-.06,.15,-.27,.25,-.22,.16,.07)*f1_1+\n        mat4(.21,-1.26,.52,-.42,.03,.66,-.33,.47,.27,.03,-.35,-.20,-.06,-.04,.01,-.46)*f1_2+\n        mat4(.91,.45,-.36,-.15,.14,.12,.20,.72,.96,.45,.33,.02,.28,-.12,.18,-.79)*f1_3+\n        vec4(-.86,-1.17,-.51,-.01))/2.0+f1_3;\n    f1_0=sin(mat4(-.11,-.72,.36,-.20,.10,-.07,-.27,.01,.62,-.45,.34,-.41,.14,.51,-.55,-.46)*f0_0+\n        mat4(.40,-.10,.29,-.21,.53,-.41,.06,-.01,-.02,.07,.69,-1.05,.56,.40,-.28,.10)*f0_1+\n        mat4(-.25,-.10,.21,.01,1.09,.55,-.37,-.46,-.06,-.11,-.15,.44,.57,.38,.25,.45)*f0_2+\n        mat4(.53,-.22,-.18,.20,-.91,-.79,.59,-.45,-.13,.11,.62,-.14,-.50,-.09,.59,-.13)*f0_3+\n        vec4(.17,.14,-.03,1.07))/2.2+f0_0;\n    f1_1=sin(mat4(.51,.01,.41,-.65,.11,.05,-.70,-.56,.49,-.33,.62,.19,.31,.15,-.44,.14)*f0_0+\n        mat4(.67,.27,.69,.29,.17,.72,-.42,.46,.10,.22,-.26,-.56,.27,.21,.19,-.28)*f0_1+\n        mat4(-.14,.21,.38,-.48,.70,.46,-.62,-.14,.62,-.15,-.03,.45,-.04,.81,.62,.36)*f0_2+\n        mat4(.22,-.03,.81,-.38,-.27,-.66,-.33,-.74,-.31,-.48,.62,.04,-.33,.01,-.26,-.92)*f0_3+\n        vec4(-.40,.46,1.15,.67))/2.2+f0_1;\n    f1_2=sin(mat4(-.06,.26,-.04,-.46,-.00,-.72,.07,-.08,.19,-.03,.04,.41,.11,-.20,-.32,.17)*f0_0+\n        mat4(.13,.31,.53,.17,.19,.35,.01,-1.04,-.23,.61,-.17,-.20,-.33,.83,.11,.46)*f0_1+\n        mat4(.63,.32,.19,-.05,-.84,.00,.30,.40,.03,.56,-.56,.09,.06,-.01,.14,.20)*f0_2+\n        mat4(.14,.27,.38,-.26,.10,.12,-.76,.39,.42,-.32,-.47,.47,.39,.30,.28,-.33)*f0_3+\n        vec4(.47,.23,1.14,-.52))/2.2+f0_2;\n    f1_3=sin(mat4(-.40,-.39,-.81,.22,-.09,-.16,-.25,-.47,-.08,.15,.88,-.05,.20,-1.04,.41,-.13)*f0_0+\n        mat4(.29,.39,.37,-.10,.65,-.25,.20,.06,-.06,.07,.64,-.02,-.53,-.05,.69,-.52)*f0_1+\n        mat4(-.51,.16,.04,-.37,.66,.08,.50,-.80,-.55,.10,.08,-.11,.02,-.36,.66,.45)*f0_2+\n        mat4(-.10,.02,-.29,-.08,-.51,.86,-.51,.15,.01,-.27,-.26,-.01,.21,-.19,-.16,.30)*f0_3+\n        vec4(-.02,-.37,-.08,.76))/2.2+f0_3;\n    f0_0=sin(mat4(.76,.56,.22,-.20,.02,-.23,.66,-.10,.25,-.19,-.11,.72,.59,.41,.52,.44)*f1_0+\n        mat4(.55,.07,.26,.56,-.20,.51,-.56,-.60,.22,-.16,-.18,.77,-.05,.31,.26,-.23)*f1_1+\n        mat4(.24,.03,.23,-.07,.33,-.45,.27,-.73,.18,-.71,.16,-.55,.20,.16,.44,-.04)*f1_2+\n        mat4(-.75,-.56,-.17,-.14,.10,.16,-.20,-.62,-.25,-1.05,.43,.46,.02,-.44,-.23,.55)*f1_3+\n        vec4(-.01,-.46,1.00,.64))/2.4+f1_0;\n    f0_1=sin(mat4(-1.04,-.16,-.18,-.87,-.60,-.66,.39,.03,-.10,.53,.74,-.38,.84,.23,.21,-.28)*f1_0+\n        mat4(-.29,.17,-.46,.38,-.32,.21,-.30,-.07,.42,-.18,-.32,-.22,.75,-.28,-.05,-.14)*f1_1+\n        mat4(-.47,-.28,.29,.51,.40,.47,-.46,.08,-.12,-.31,.02,.48,-.01,-.29,-.06,.36)*f1_2+\n        mat4(.03,-.37,.23,.17,-.21,.10,-.46,-.44,.16,-.16,.35,.59,.33,.00,-.20,-.52)*f1_3+\n        vec4(.37,-.41,-.38,1.09))/2.4+f1_1;\n    f0_2=sin(mat4(.10,.31,.02,-.27,.32,.02,-.29,.01,.74,-.45,.17,.06,-.03,.37,.06,-.70)*f1_0+\n        mat4(-.20,.14,-.46,-.15,.57,-.47,.30,.34,.01,.12,-.64,-.03,-.01,.04,.71,.52)*f1_1+\n        mat4(-.38,.55,-.37,.63,-.14,-.60,-.44,-.21,-.83,-.23,-.05,.19,-.57,-.21,-.07,-.60)*f1_2+\n        mat4(.27,-.41,-.10,.41,-.52,.26,-1.01,-.24,-.38,.20,-.18,.29,-.12,-.29,.11,.11)*f1_3+\n        vec4(.44,.24,1.03,.16))/2.4+f1_2;\n    f0_3=sin(mat4(.20,.38,-.14,-.38,.29,-.69,.36,-.99,.27,.01,-.35,-.20,.36,-.28,-.64,.02)*f1_0+\n        mat4(.49,.01,-.32,.06,.05,-.07,.45,-.95,.53,.67,-.83,-.76,.09,.06,-.18,-.03)*f1_1+\n        mat4(.33,.12,.65,.08,-.37,-.48,.34,-.66,-.33,-.11,1.41,.81,.57,.59,.77,.42)*f1_2+\n        mat4(1.44,-.18,-.77,-.22,.70,.82,-.61,.34,-.45,-.03,.36,.12,.38,-.04,-.40,-.28)*f1_3+\n        vec4(.83,.20,.63,.38))/2.4+f1_3;\n    f1_0=sin(mat4(-.51,.77,.37,-1.16,-.15,-.73,-.93,-.16,.06,-.20,.84,-.05,-.43,.63,-.39,-.02)*f0_0+\n        mat4(-.58,-.79,-.25,.16,.12,.36,.07,.03,-.35,-.65,-.34,-.41,-.03,-.21,-.29,-.30)*f0_1+\n        mat4(.08,.27,-1.17,.42,-.24,.78,.49,.18,.21,-.54,-.07,.69,.06,-.03,-.45,.96)*f0_2+\n        mat4(.05,-.77,-.23,-.72,-.38,.41,-.66,-.38,.55,-.95,-1.04,-.12,-.13,.65,-.64,.47)*f0_3+\n        vec4(.37,-1.07,.27,.39))/2.6+f0_0;\n    f1_1=sin(mat4(.16,-.23,-.20,-.71,-.16,-.83,-.77,-.40,-.56,.32,.43,.02,.17,.25,-.53,-.09)*f0_0+\n        mat4(.86,.29,.13,.34,-.56,.11,.06,.62,-.36,.09,-.47,-.08,.26,-.06,.09,-.33)*f0_1+\n        mat4(.31,.29,.21,.10,-.54,-.16,.80,.23,.12,.14,.77,.28,.21,.15,.61,.96)*f0_2+\n        mat4(-.19,-.62,.40,.36,-.26,.28,-.18,-.26,.57,.23,.14,.15,.30,-.24,.19,-.01)*f0_3+\n        vec4(-.71,-1.22,.60,.34))/2.6+f0_1;\n    f1_2=sin(mat4(-.71,.17,1.20,-.23,.10,.15,-.29,.54,.24,-.03,.48,-.20,.08,-.11,.14,-.24)*f0_0+\n        mat4(.26,-.01,.28,-.57,.54,-.00,-.08,-.41,.22,-.09,-.74,.44,.47,-.02,.22,.40)*f0_1+\n        mat4(-.45,.26,-.10,-.18,-.22,.02,.16,.29,-.82,.31,-.03,-.37,-.50,-.18,-.23,.42)*f0_2+\n        mat4(.03,-.46,.64,-.03,-.52,.71,-.10,.44,-.83,-.17,-.15,-.31,-.23,.12,-.40,-.39)*f0_3+\n        vec4(-.08,-.35,-.63,-.78))/2.6+f0_2;\n    f1_3=sin(mat4(-.07,-.87,-.52,.86,.03,.06,.13,.78,.25,-.04,-.02,-.17,-.38,.14,.40,.97)*f0_0+\n        mat4(.15,-.17,.55,-.34,.20,.79,-.36,.51,-.72,-.70,.22,.56,.31,.14,.03,.09)*f0_1+\n        mat4(.60,.03,.34,.19,.85,.90,-.67,.12,.36,.41,.04,-.47,-.03,-.13,.63,-.05)*f0_2+\n        mat4(.17,-.17,.28,.46,-.72,-.78,-.59,.11,-.12,-.03,.91,-.12,.65,-.76,-.24,.77)*f0_3+\n        vec4(.11,1.29,-.08,-.69))/2.6+f0_3;\n    f0_0=sin(mat4(-.22,.19,.01,-.45,-.78,.23,.19,-.25,.31,-.12,-.57,-.06,.35,.13,.75,-.67)*f1_0+\n        mat4(.69,.26,-.13,.55,-.63,.33,.14,.40,-.11,.53,-.22,-1.16,-.87,.15,-.11,-.02)*f1_1+\n        mat4(-.67,.13,-.02,1.22,-.09,.51,.06,.22,-.26,-.04,.12,.30,-.56,.06,.29,.28)*f1_2+\n        mat4(-.54,.45,.55,.69,-.00,-.45,.13,-.57,.50,.38,.87,.44,-.65,.53,.14,-.10)*f1_3+\n        vec4(.06,.57,-.20,.16))/2.8+f1_0;\n    f0_1=sin(mat4(.70,-.42,-.29,.88,.63,-.16,.93,.23,-.48,-.31,.55,.84,.42,.52,-.00,.70)*f1_0+\n        mat4(.40,-.39,.07,-.55,.26,.10,-.33,-.06,-.34,.18,.34,-.17,-.57,-.13,.63,-.56)*f1_1+\n        mat4(-.38,-.08,-.11,.08,1.11,-.37,-.39,-.40,.11,-.26,.13,.08,-.61,-.07,.08,-.58)*f1_2+\n        mat4(.44,.44,.48,.30,-.20,-.36,.50,-.10,.68,.33,-.37,.54,.43,.23,.01,.30)*f1_3+\n        vec4(.57,.60,-.29,-.62))/2.8+f1_1;\n    f0_2=sin(mat4(-.41,-.35,-.77,.46,.05,.33,-.91,1.12,-.37,-.33,.15,.36,1.07,-1.50,-.58,-.48)*f1_0+\n        mat4(-.43,-.30,.03,-.06,.08,-.14,.51,-.15,-.37,-.12,-.72,.50,.30,-.76,.52,-.57)*f1_1+\n        mat4(.32,-.45,.12,-.76,.59,-.19,.41,.06,-.56,.15,.56,-.02,.31,.12,-.18,-.37)*f1_2+\n        mat4(.07,-.50,.33,-.33,.14,.04,-.45,.04,.01,.40,-.16,-.99,-.12,-.58,.09,-.79)*f1_3+\n        vec4(.04,-.18,.46,.37))/2.8+f1_2;\n    f0_3=sin(mat4(1.33,.62,-.65,.89,-.19,-.42,.31,.51,.62,.27,-.44,-.06,.14,-.02,-.15,-.23)*f1_0+\n        mat4(-.15,.38,.19,-.24,.08,.30,-.04,.69,-.93,.13,-.13,-.64,.38,-.11,-.26,-.57)*f1_1+\n        mat4(-.85,.56,-.10,-.16,.27,.50,-.64,.66,-.16,.18,.70,-.13,.96,-.28,.41,-.12)*f1_2+\n        mat4(.31,-.42,-.57,-.46,-.25,.60,.14,-.50,-.05,-.46,.61,-.10,-.26,-.04,-.48,.32)*f1_3+\n        vec4(.76,.21,.40,.70))/2.8+f1_3;\n    f1_0=sin(mat4(.23,.33,-.55,1.40,.24,-.72,-.37,-.15,-.20,.01,.13,-.58,-.15,.13,-.47,.37)*f0_0+\n        mat4(.30,-.80,.53,.03,.79,-.25,-.39,.24,-.06,.44,-.47,.17,.30,-.00,-.28,.19)*f0_1+\n        mat4(-.01,-.08,.20,-.36,.31,.40,-.49,-.38,.12,.68,.05,-.15,.53,.33,-.40,-.75)*f0_2+\n        mat4(.43,.27,-.09,.73,-.15,.15,.06,-.68,-.61,-.98,.98,.03,.04,.97,-1.37,.00)*f0_3+\n        vec4(-.21,.83,-.61,.80))/3.0+f0_0;\n    f1_1=sin(mat4(.38,.43,-.28,.32,.70,-.75,.54,-.59,-.36,.87,.55,-.21,.06,-.27,-1.03,-.36)*f0_0+\n        mat4(.49,-.76,-.36,-.26,-.27,-.39,.44,.20,.02,.62,-.05,-.52,.22,-.13,.16,.44)*f0_1+\n        mat4(-.38,-.72,-.10,.33,-.22,.04,.10,.03,.42,.20,.10,-.52,-.24,-.19,.97,.28)*f0_2+\n        mat4(.67,-.42,-.33,.56,-.44,.26,.63,.72,.12,-.77,-.19,.21,.43,.33,-.14,.38)*f0_3+\n        vec4(.17,-.92,.07,-.02))/3.0+f0_1;\n    f1_2=sin(mat4(.12,-.08,-.38,-.85,-.63,-.11,.22,.58,-.53,-.38,.64,-.71,.15,-.61,-.21,.80)*f0_0+\n        mat4(-.25,-.60,.36,-.57,.30,-.48,.43,.12,.26,-.52,-.08,.01,.34,-.48,.54,.30)*f0_1+\n        mat4(.22,-.31,.05,-.37,-.83,.19,.78,-.55,-.12,.12,.03,.08,-.32,.26,-.24,-.44)*f0_2+\n        mat4(.48,-.56,.59,-.06,.30,.69,-.37,.24,-1.16,.09,.04,.43,-.02,-.61,.79,.28)*f0_3+\n        vec4(-.17,.14,.53,-.00))/3.0+f0_2;\n    f1_3=sin(mat4(-.54,-.62,.16,.54,.49,-.25,.22,.78,.97,-.58,-.03,.14,.14,-.23,.02,-.25)*f0_0+\n        mat4(.08,-.48,-.05,-.16,.57,.75,-.93,.12,-.27,-.70,.28,-.08,-.72,-.69,.18,-1.09)*f0_1+\n        mat4(.61,-.13,-.43,.03,-.13,.17,-1.19,.06,-.05,-.18,.08,.28,.94,-.40,.24,.03)*f0_2+\n        mat4(.06,.21,.03,-.29,-.71,.79,.15,.32,.03,.07,.65,-.32,-.14,.36,-.35,.33)*f0_3+\n        vec4(-.46,.67,.19,.78))/3.0+f0_3;\n    f0_0=sin(mat4(.27,.27,-.62,1.70,-.42,-1.11,-.43,-.72,.42,.58,-.82,-.42,-1.72,-.77,-.32,.39)*f1_0+\n        mat4(-.42,-.83,.58,-.20,.19,-.93,-.69,.90,-.56,.94,.13,-.35,.14,.39,-.01,-.45)*f1_1+\n        mat4(-.49,-.23,.49,-.09,.48,-.47,.30,-.65,-.03,-.49,-.75,-.19,-.14,-.49,.36,-1.53)*f1_2+\n        mat4(-.48,-.24,-.11,-.09,-.21,.17,.11,-1.19,-.50,-1.03,.15,.23,.50,-.43,-1.04,.32)*f1_3+\n        vec4(.07,-1.32,.36,.89))/3.2+f1_0;\n    f0_1=sin(mat4(-.14,.30,-1.12,.13,.15,.59,-.21,.60,.85,.07,-.39,.06,-.37,-.57,-.03,.02)*f1_0+\n        mat4(.29,.21,.23,-.73,-.24,-.07,-.46,.07,.65,.51,.19,.01,.18,.04,.53,-.34)*f1_1+\n        mat4(-.69,-.03,.40,.77,.58,.67,-.13,-.06,.21,.18,-.01,.74,-.29,.58,.85,-.08)*f1_2+\n        mat4(-.40,-.67,.52,-.10,-.19,.23,.21,-.07,.83,.99,-.21,.32,.08,-.46,.21,1.04)*f1_3+\n        vec4(-.47,-.10,-.19,.55))/3.2+f1_1;\n    f0_2=sin(mat4(.17,.89,-.48,-.01,-.85,.22,-.83,.05,-.72,-1.06,.21,.59,.75,-.07,-.98,-.28)*f1_0+\n        mat4(-.34,-.05,-.57,-.40,-.06,-.24,.51,-.02,.34,.97,-.05,-.36,.72,.03,-.01,.15)*f1_1+\n        mat4(-.38,1.11,.62,.14,-.39,-.69,-.19,-.19,-.03,.23,.55,-.27,-.75,.13,-.56,-.16)*f1_2+\n        mat4(-.01,-.33,.33,-.21,.60,.67,.35,-.03,-.88,-.92,.09,-.10,-.55,.58,.44,-.08)*f1_3+\n        vec4(.55,-.71,-.27,-.44))/3.2+f1_2;\n    f0_3=sin(mat4(.61,-.50,-.65,.59,-.31,-.85,-.21,-.25,.19,-.03,-.13,.96,-.22,.43,-.50,-.17)*f1_0+\n        mat4(.33,1.07,.39,-.46,.80,-.34,-.32,.33,-.11,-.36,.97,-.48,-.53,.69,.61,.01)*f1_1+\n        mat4(-.39,-.14,-.00,-.06,.00,-.35,.22,.02,.29,-.06,-.15,.17,-.56,-.20,-.39,-.74)*f1_2+\n        mat4(.04,.49,.50,.09,.22,.06,.11,-.13,.23,.43,.01,.89,.09,-.14,-.16,.53)*f1_3+\n        vec4(.76,.36,.01,-.78))/3.2+f1_3;\n    f1_0=sin(mat4(.37,1.12,-.17,.05,.41,.79,-.52,-1.27,.81,-.99,.04,-.49,-.27,.34,-.08,-.11)*f0_0+\n        mat4(.01,.32,.47,-.13,.33,.50,.42,.15,.38,.03,.15,.18,-.98,-.11,-.30,-.47)*f0_1+\n        mat4(.26,.12,-.07,.56,-1.54,.77,.01,.57,.69,.24,.04,-.17,-.53,.44,.54,.01)*f0_2+\n        mat4(-.16,-.36,.69,-.51,-.50,-.52,.22,-.39,-.45,.14,.02,-.38,.96,.25,.13,.16)*f0_3+\n        vec4(.20,.95,1.38,.52))/3.3+f0_0;\n    f1_1=sin(mat4(.94,.43,.50,.30,.55,-.86,-.45,.48,-.00,.32,.00,-.40,-.10,1.38,.07,-.46)*f0_0+\n        mat4(.50,1.28,.09,-.35,-1.10,-.51,-.35,-.14,.21,-.17,-.01,.21,.42,.28,.30,-.14)*f0_1+\n        mat4(-.55,.98,.90,-.43,.27,.03,.45,-.34,.16,.26,.73,.81,.18,-.52,.27,.12)*f0_2+\n        mat4(.37,1.25,.25,.29,-.46,-1.42,-.58,.18,.54,1.37,.49,.42,.09,.77,-.01,.10)*f0_3+\n        vec4(-.50,.21,.05,.90))/3.3+f0_1;\n    f1_2=sin(mat4(-.36,-.57,.71,-.21,-.86,-.12,.71,.27,-.13,-1.03,-.49,-1.10,-.16,.48,-.83,.66)*f0_0+\n        mat4(-.21,-.27,.86,.15,.01,-.32,.08,.41,-.72,.32,-.29,-.34,-.03,-.75,.19,-.11)*f0_1+\n        mat4(.47,.34,-.08,.79,.24,.81,.48,.90,-.35,.05,.21,-.18,.05,-.13,-.51,.79)*f0_2+\n        mat4(.39,-.06,-.67,.11,.63,-.41,-.16,-.26,-.88,-.23,-.38,.16,.18,.02,-.40,.81)*f0_3+\n        vec4(.67,.65,.33,.83))/3.3+f0_2;\n    f1_3=sin(mat4(-.07,.82,-.41,-1.00,.45,-.15,-1.14,-.95,.58,-.10,.34,-.76,.01,.18,-.52,-.12)*f0_0+\n        mat4(.66,-.28,.90,.04,.31,.45,-.13,.43,-.66,-.24,-.22,-.36,-.86,-.24,-.59,-.39)*f0_1+\n        mat4(.50,.13,.16,.61,-1.10,-.99,-.11,.06,-.14,-.32,-.19,-.12,.64,.14,-.21,-.74)*f0_2+\n        mat4(-.22,.30,.52,.62,-.95,.48,.47,.26,1.10,-.64,.08,-.70,-.23,-.41,.12,.07)*f0_3+\n        vec4(.25,-.15,.55,.18))/3.3+f0_3;\n    f0_0=sin(mat4(.06,.92,.24,-1.49,-.63,.23,-.27,-.31,-.47,-.24,.25,-.02,-.08,-.26,-.11,.03)*f1_0+\n        mat4(.79,-.09,-.29,.45,.08,.73,.04,-.08,-.49,-.25,-.41,.31,.08,.33,-.52,-1.23)*f1_1+\n        mat4(.76,.03,.43,.02,.12,.49,.42,.07,.63,-.15,-.14,-.39,-.32,.26,.33,.75)*f1_2+\n        mat4(-.48,.16,-.39,-.05,.20,.54,-.36,-.60,.13,-.14,.27,.03,.78,.59,.56,.46)*f1_3+\n        vec4(.42,.65,-.29,1.02))/3.5+f1_0;\n    f0_1=sin(mat4(.73,-.20,-.70,.10,.84,-.30,-.40,.66,.62,-.05,.35,.23,-.47,-.09,-.40,.20)*f1_0+\n        mat4(.74,.95,.70,-.25,-.80,.36,.10,.83,-.39,-.26,-.05,.66,-.16,.39,-.77,-.56)*f1_1+\n        mat4(-.56,-.80,-.38,-.21,1.21,-.26,-.74,.05,.53,-.13,.63,-.38,.50,-.22,-.15,-.81)*f1_2+\n        mat4(.23,.14,.05,.12,.41,-.59,.43,.06,-.11,.29,.52,-.44,.40,-.29,-.56,.09)*f1_3+\n        vec4(.29,-.61,-.22,.39))/3.5+f1_1;\n    f0_2=sin(mat4(.07,.19,-.24,.32,.02,-.15,-.35,-.77,.70,.03,-.07,-.13,.11,.22,1.01,.01)*f1_0+\n        mat4(-1.08,-.02,.07,-.04,.87,.77,-.14,-.21,-.33,-.00,-.09,-.30,-.71,-.02,-.70,1.30)*f1_1+\n        mat4(.59,-1.19,.55,-1.35,-.01,.85,-.24,-.83,.76,-.47,.18,-.33,-1.57,-.40,-.18,.34)*f1_2+\n        mat4(-.25,-.29,-.23,-.02,.86,-.38,-.42,.07,-.78,.25,-1.08,-.28,-.29,-.33,.11,-.94)*f1_3+\n        vec4(.04,-.17,-.58,-.47))/3.5+f1_2;\n    f0_3=sin(mat4(-.00,.99,-.43,-.28,-1.20,-.48,-1.14,-1.64,.59,.14,.88,-.47,-.85,-.05,-.52,.15)*f1_0+\n        mat4(-.10,-.16,-1.02,-.27,-.62,.80,.03,-.37,.42,-.45,-.47,.18,.24,.63,-.61,-1.22)*f1_1+\n        mat4(.50,.06,-.18,1.23,.37,-.31,-.41,.54,.07,-.14,-.18,1.22,-.03,-.05,-.68,.25)*f1_2+\n        mat4(.38,-.06,.88,-.66,.34,.31,.17,.69,.21,.75,-.24,-.72,-.58,.21,-.48,.07)*f1_3+\n        vec4(.26,.08,-.48,-.27))/3.5+f1_3;\n    f1_0=sin(mat4(.32,-.56,-.39,1.13,-.92,-1.84,.99,.00,.05,1.48,.50,-.78,-.04,.10,-.43,.30)*f0_0+\n        mat4(.02,.85,-.52,.31,-.22,-.61,.02,-.15,.37,-.39,-.49,-.03,-.31,.77,-.23,-.23)*f0_1+\n        mat4(.41,-.67,-.19,-.22,.02,-.24,.37,-.49,.60,.88,.08,-.54,-.13,.66,-1.61,-.29)*f0_2+\n        mat4(-.18,.75,.08,-.35,-.19,-1.06,.36,.22,-.77,.98,.83,-.74,.93,-.75,-.12,.67)*f0_3+\n        vec4(1.61,1.14,-.20,.41))/3.6+f0_0;\n    f1_1=sin(mat4(-1.00,1.90,-.45,-.23,1.43,1.31,-.28,.31,-.98,.04,1.14,.41,-1.19,-.39,.19,-.05)*f0_0+\n        mat4(.20,.34,-.29,.81,1.13,-.73,-.41,-.71,-.78,-.16,-.02,.25,-.00,.74,.26,-.66)*f0_1+\n        mat4(-.73,-.96,.30,.47,1.72,-.93,-.10,-.01,.17,-.58,.40,.61,.75,.31,-.36,.32)*f0_2+\n        mat4(-.17,.17,-.00,.44,.46,.43,-.50,-.21,-.64,-.13,.48,-.01,-.05,-.91,.27,.22)*f0_3+\n        vec4(.28,-.27,.09,.23))/3.6+f0_1;\n    f1_2=sin(mat4(1.15,.61,.11,.22,-.47,.52,-.04,-.12,-.60,-.56,.22,-.06,.25,-.14,-.04,-.06)*f0_0+\n        mat4(-1.15,.38,.22,-.94,-.01,.24,-.78,.21,.16,.52,-.41,.47,1.10,-.10,-.67,1.12)*f0_1+\n        mat4(-.08,-1.20,.07,.56,.61,1.14,-.60,-.75,-.16,-.10,-.33,.01,-.73,.88,-.99,-.57)*f0_2+\n        mat4(-.13,-.91,-.30,.44,.43,-.06,.59,.58,.43,-.75,-.07,-.03,.75,.22,.42,.06)*f0_3+\n        vec4(.17,.38,-.04,-.50))/3.6+f0_2;\n    f1_3=sin(mat4(.04,.44,-.52,-.19,-1.30,-.12,-.99,-1.73,-.14,-.49,1.06,-.30,.05,.16,.26,-.50)*f0_0+\n        mat4(-.33,-.59,-.48,.19,.16,.69,.21,.08,-.35,-.08,.73,-.22,-.13,.28,-.28,-.90)*f0_1+\n        mat4(-.33,-.82,.42,.88,.52,-.43,-2.31,.03,.17,-.24,-.50,.66,-.71,-.65,-1.88,-.52)*f0_2+\n        mat4(-.52,-.47,.27,.12,-.12,-.63,-.38,.12,-.16,.23,.40,.33,.33,-.03,1.03,.93)*f0_3+\n        vec4(-.08,-.73,-.58,.23))/3.6+f0_3;\n    f0_0=sin(mat4(-1.44,.51,.48,-.01,-.86,.60,-1.15,1.52,-1.25,-.96,.10,-.22,.49,1.07,-.50,-.05)*f1_0+\n        mat4(-.99,.82,-1.12,-.78,.13,.55,-.61,.47,-.51,-.50,.21,-.22,.86,.35,-.74,.06)*f1_1+\n        mat4(.28,.22,.07,-1.19,-1.54,-.37,-.27,-.23,-.86,-.69,.22,-.20,-1.48,.60,-.40,.51)*f1_2+\n        mat4(.60,.15,-.20,-.12,-.22,.04,-.73,.16,1.82,-.52,-.46,.50,.50,-.73,-.52,-1.02)*f1_3+\n        vec4(-.59,.59,.87,.11))/3.7+f1_0;\n    f0_1=sin(mat4(-.65,.25,.07,-.07,-1.18,-.50,.55,-.83,-.50,-.59,-.63,-1.13,-.56,-.37,-.63,.84)*f1_0+\n        mat4(-.29,.03,.73,-.89,-.45,-.16,.76,.34,.78,.27,-.30,-.29,.45,.60,-.70,.28)*f1_1+\n        mat4(.27,.43,-.09,1.35,.52,.01,-.32,-.50,.89,-.08,-.11,.99,1.27,.89,.43,.40)*f1_2+\n        mat4(-.33,.27,.05,-.46,-.75,.55,.33,-.04,-.93,.36,.97,-.31,-.06,.12,-1.09,.98)*f1_3+\n        vec4(.40,-.56,-.85,.74))/3.7+f1_1;\n    f0_2=sin(mat4(.36,-.73,.61,-.03,-.26,.12,.22,.50,-.48,-.59,-.08,.70,-.26,-.27,-.46,-.77)*f1_0+\n        mat4(.62,.66,.86,-.53,-.74,1.34,.09,1.02,.11,-.18,-.15,.33,-.86,.46,-.77,.35)*f1_1+\n        mat4(.94,-.35,-.53,.37,-.22,-.59,.78,.24,-.06,-.34,.17,.39,.29,.50,-.29,-.08)*f1_2+\n        mat4(-.57,.38,-.48,.10,-.42,.16,.67,.52,.32,.36,-.52,-.33,-.39,.05,.08,.36)*f1_3+\n        vec4(-.38,-.49,.35,-.15))/3.7+f1_2;\n    f0_3=sin(mat4(1.21,.10,.94,.52,.33,1.11,-2.47,-1.55,-.13,-.26,-.02,-.32,-.16,-.04,.80,-.36)*f1_0+\n        mat4(.06,-.01,.34,-.14,-.40,-.02,-2.14,-1.23,.54,-.15,.69,.53,-.04,-.52,.68,.51)*f1_1+\n        mat4(-.83,.68,1.19,-1.47,-.90,.26,-.67,.20,-.64,-.14,.15,-.89,.33,.31,.43,.49)*f1_2+\n        mat4(.69,.57,.10,.10,.03,-.68,-.44,-.54,.09,-.11,-.02,.13,-.09,-.22,.60,.72)*f1_3+\n        vec4(.46,.29,-.13,.29))/3.7+f1_3;\n    f1_0=sin(mat4(1.08,-.19,-1.36,.31,.00,.53,-.20,1.24,.08,.27,-.36,.51,.03,-.32,.00,1.04)*f0_0+\n        mat4(-.29,-.43,-.08,.08,.09,-.55,-1.06,-1.17,.05,.80,-.85,1.53,.28,.69,.44,.08)*f0_1+\n        mat4(.36,-.53,-.35,.94,-.62,-.22,-.30,-.28,.01,-.44,.40,-.28,-.30,.03,-.32,.27)*f0_2+\n        mat4(.54,.48,-.31,.27,.19,-.46,.08,-.65,.08,.33,.13,-.52,.41,-.96,-.18,.90)*f0_3+\n        vec4(-.25,.58,-1.90,-.79))/3.9+f0_0;\n    f1_1=sin(mat4(-1.04,-.87,1.01,-.16,-.70,-1.53,.23,.53,.12,.35,.53,-.44,-.01,-1.28,-.08,.18)*f0_0+\n        mat4(-.50,1.43,.61,-.28,-1.91,-.07,.38,-.78,.77,-.10,.45,.59,.07,.32,-.09,-.35)*f0_1+\n        mat4(-1.21,.91,-.72,-.06,.68,-.07,-.40,-.24,1.32,.49,.60,.32,.21,-.30,.11,-.20)*f0_2+\n        mat4(-1.63,-.20,-.53,.12,-.47,-.72,-.11,.21,1.45,.27,-.43,-.60,.95,-.28,-.03,-.25)*f0_3+\n        vec4(-.61,.12,.47,-.19))/3.9+f0_1;\n    f1_2=sin(mat4(-1.03,.88,.15,1.64,-.27,-.22,-.10,-.38,-1.17,-.41,-.40,-.49,-.80,-.06,.24,-.13)*f0_0+\n        mat4(1.01,.40,-.48,.89,.13,-.35,-.94,-.38,.60,.18,.25,.64,1.10,-1.40,.27,-.70)*f0_1+\n        mat4(.94,-.78,.20,.85,1.11,.59,-.58,-.99,-.41,-.38,-.46,.07,.59,.23,-.90,.35)*f0_2+\n        mat4(.33,.81,.07,.06,-.48,-.37,-.37,-.14,.20,.05,-.41,-.58,-.22,.01,-.20,.26)*f0_3+\n        vec4(.15,1.23,-.23,.24))/3.9+f0_2;\n    f1_3=sin(mat4(-1.23,-.12,-.69,-2.60,.05,-1.03,-.10,.86,-.25,.47,.63,.80,-.70,.07,-.79,.50)*f0_0+\n        mat4(.20,-.33,.70,-.60,-.31,-.80,.04,.43,-.21,-.29,.21,.62,-.08,-.23,-.74,.65)*f0_1+\n        mat4(-.55,.72,.79,.38,.90,.70,-.97,-.03,.19,-.21,-.36,-.13,.30,.24,-.31,-.07)*f0_2+\n        mat4(-.76,.37,-.34,-.71,.17,-.13,.03,-.80,-.67,.55,.24,.87,.35,.71,2.50,-.66)*f0_3+\n        vec4(-.60,-.34,-.10,-1.24))/3.9+f0_3;\n    f0_0=sin(mat4(.77,1.30,-1.10,1.94,.02,1.02,.20,.60,.67,.34,-.37,-.03,.83,1.69,.56,-1.15)*f1_0+\n        mat4(.29,-1.11,-.93,1.35,.33,-.50,-1.42,-1.56,.35,-.17,-.52,1.01,-.05,-.44,-.06,-.72)*f1_1+\n        mat4(-.37,-.76,-.62,.82,-.78,.21,-.26,-1.06,.35,-.72,-.63,-2.98,-.51,-.97,-.99,2.10)*f1_2+\n        mat4(-.20,-.26,.40,.98,.16,.06,.37,.08,-.59,.12,.80,.39,-.17,.49,-.02,.39)*f1_3+\n        vec4(-.09,-.11,.58,3.17))/4.0+f1_0;\n    f0_1=sin(mat4(.01,.33,.45,-.89,-1.83,-.30,.69,.48,-.95,.61,-.55,.54,.43,-.20,.32,.08)*f1_0+\n        mat4(-.96,.05,.07,-.82,-1.55,.73,.36,-.20,1.99,.06,-.16,.01,.37,.16,-.76,-.44)*f1_1+\n        mat4(-1.23,-.20,-1.51,.38,-.41,-.41,-.29,-.00,.95,-.05,-.54,.83,-.10,.28,.34,-.18)*f1_2+\n        mat4(-2.41,-.21,.33,.53,.87,-.18,.09,1.08,-1.39,.80,-.38,.30,.42,-.21,-.47,-.67)*f1_3+\n        vec4(.24,.62,.59,-.76))/4.0+f1_1;\n    f0_2=sin(mat4(.21,-.88,.15,.06,.48,-.72,-.11,-.56,-.53,-.02,-.11,-1.23,.96,-.07,-.57,.58)*f1_0+\n        mat4(-.39,-.15,-.54,-.58,-.97,1.13,-.65,1.18,.08,-.56,.58,-.40,.60,.05,.73,.15)*f1_1+\n        mat4(.07,.02,-.54,-.38,1.26,.69,.33,.17,-.92,.29,-.21,.65,.97,-.11,.99,1.18)*f1_2+\n        mat4(-.66,.39,.47,-1.03,-1.00,-.18,-1.00,-.56,1.06,.11,.98,-.69,.79,-.30,.51,-1.39)*f1_3+\n        vec4(-.99,.08,-.13,-1.61))/4.0+f1_2;\n    f0_3=sin(mat4(-.69,-.68,.81,-.98,-.55,.41,-.31,-.83,-.59,.21,-.05,-.86,-.21,-.01,-.90,-.56)*f1_0+\n        mat4(-.25,.39,1.21,.28,-.53,-.71,.24,-1.41,-.37,-.27,-2.10,.44,-.13,.57,1.03,-.70)*f1_1+\n        mat4(.35,-.10,-2.62,-.11,.84,-.49,-.88,-.35,.24,-.26,.59,.53,1.21,-1.15,-.78,1.54)*f1_2+\n        mat4(-.85,-.08,.49,-.87,-.59,.46,.88,.01,.84,.62,.21,.04,.01,.52,-1.40,-.54)*f1_3+\n        vec4(-.63,-.41,3.10,1.54))/4.0+f1_3;\n    float f_0=dot(f0_0,vec4(-.05,.05,.01,.01))+\n        dot(f0_1,vec4(.01,-.05,-.03,.04))+\n        dot(f0_2,vec4(.01,-.02,.02,-.01))+\n        dot(f0_3,vec4(.02,.02,.01,.01))+\n        0.470;\n    \n    f_0 += (.3+.7*smoothstep(.25, .3, f_0)) * (fbm(uv*100.)+.3)*.01 - .25;\n    \n    o.x = f_0 * .15;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec3 lDir = normalize(vec3(-1, .3, -1));\nconst vec3 lCol = vec3(5, 4.7, 4);\nconst vec3 fCol = vec3(.7, .8, 1.);\nconst float fExt = 30.;\nconst float fDensity = 1.5;\nconst float fStep = .7;\nconst float fAnis = .3;\nconst float tScale = 2000.;\nconst float tHeight = 4. / tScale;\nconst float vDensity = 2.5 * tScale;\nconst float vStep = .6 / tScale;\n\n\nstruct Intersection {\n    float t;\n    vec3 albedo;\n    bool volumetric;\n};\n\n\nvec2 heightDensityMap(vec2 p) {\n\n    return texture(iChannel0, p).xy;\n    \n}\n\n\nfloat terrainSdf(vec3 p) {\n\n    return p.y - heightDensityMap(p.xz).x;\n    \n}\n\n\nvec4 terrainNormal(vec2 p) {\n\n    float e = heightDensityMap(p).x;\n    vec3 k = vec3(1./iChannelResolution[0].xy, 0);\n    return vec4(normalize(vec3((e - vec2(heightDensityMap(p + k.xz).x, heightDensityMap(p + k.zy).x))/k.xy, 1.).xzy), e);\n    \n}\n\n\nvec3 sky(vec3 rd) {\n\n    return mix(vec3(1., 1.4, 2.), vec3(.7, 1.2, 2.5), smoothstep(-.2, 2., dot(rd, vec2(.1, 3.).xyx)));\n    \n}\n\n\nvec3 skyAmbient() {\n\n    return vec3(.8, 1.3, 2.3);\n    \n}\n\n\nvec4 treeVolume(vec3 p) {\n\n    p *= tScale;\n    \n    float cHash = 0., d = 1000.;\n    \n    for(int j = 0; j < 2; j++) {\n        for(int i = 0; i < 2; i++) {\n        \n            ivec2 c = ivec2(floor(p.xz - .5)) + ivec2(i, j);\n            float hash = fhash2(c);\n            \n            vec2 u = vec2(c) + vec2(fract(hash * 12345.), fract(hash * 54321.));\n            vec2 e = heightDensityMap(u / tScale);\n            vec3 t = vec3(u.x, e.x * tScale, u.y);\n            \n            float h = 2. + 1.5 * fract(hash * 23154.);\n            t.y += h / 2.;\n            t   -= p;\n            t.y /= h;\n            float m = dot(t, t);\n            \n            // using mix to avoid branching\n            float f = step(1. - fract(hash * 35142.), e.y) * step(m, d);\n            cHash = mix(cHash, hash, f);\n            d = mix(d, m, f);\n        }\n    }\n    \n    d = sqrt(d) - .6 + .7 * (texture(iChannel2, .15 * p).r - .5);\n    \n    return vec4(vec3(.08, .08, .03) + vec3(.03, .07, .03) * cHash, step(d, 0.));\n    \n}\n\n\nfloat shadow(vec3 p) {\n    \n    // == tree shadows =========================================\n\n    p += lDir * vStep * random();\n    \n    float o = 0., m = -log(random()) / (vDensity * vStep);\n    \n    for(int i = 0; i < 8 && o < m; i++) {\n        o += treeVolume(p).a;\n        p += lDir * vStep;\n    }\n    \n    if(o > m) return 0.;\n\n    // == terrain soft shadows ==================================\n    \n    const float lRad = .07;\n    float sTheta = lRad;\n    \n    float t = .0001, d = .002;\n    \n    for(int i = 0; i < 64 && d > 0. && d < .2; i++) {\n    \n        d = terrainSdf(p + t*lDir) + .002;\n        sTheta = min(d / t, sTheta);\n        \n        t += fStep * d;\n        \n    }\n    \n    return clamp(sTheta / lRad, 0., 1.);\n}\n\n\nIntersection trace(vec3 ro, vec3 rd) {\n\n    const Intersection noInt = Intersection(-1., vec3(0), false);\n    const vec3 center = vec3(.5, 0.45, .5);\n    \n    \n    // == bounding box intersection ===========================\n    \n    rd += (1. - abs(sign(rd))) * .0000001;   // avoids div/0\n    \n    vec3 cv = (center - ro - sign(rd) * .5) / rd;\n    vec3 fv = (center - ro + sign(rd) * .5) / rd;\n    \n    float cPlane = max(max(max(cv.x, cv.y), cv.z), 0.);\n    float fPlane = min(min(fv.x, fv.y), fv.z);\n    \n    if(fPlane < cPlane) return noInt;\n    \n    \n    // == terrain intersection =================================\n    \n    float t = cPlane;\n    float ld = terrainSdf(ro + t * rd);\n    \n    if(ld < 0.) return noInt;\n    \n    float td = ld < tHeight ? t : -1., ls = ld * fStep;\n    \n    for(int i = 0; i < 256; i++) {\n    \n        t += ls;\n        \n        float d = terrainSdf(ro + rd * t);\n        \n        if(d < tHeight && td < 0.) {\n            // interpolated tree height intersection\n            td = t - ls * (tHeight - d) / (ld - d);\n        }\n        \n        if(abs(d) < .0001 || t >  fPlane) break;\n        \n        ls = d * fStep;\n        ld = d;\n        \n    }\n    \n    if(t > fPlane) t = -1.;\n    \n    if(td < 0.) return noInt;\n    \n\n    // == trees intersection =================================\n    \n    td += vStep * random();\n    \n    vec4 vol = vec4(0.);\n    float oDepth = 0.;\n    float thresh = -log(random()) / vDensity;\n    float wt = -ro.y / rd.y;\n    float far = t < 0. ? fPlane : (wt < t && wt > 0.) ? min(wt, fPlane) : t;\n    \n    for(int i = 0; i < 256 && oDepth < thresh && td < far; i++) {\n    \n        vec3 p = ro + rd * td;\n        \n        vol = treeVolume(p);\n        \n        float ss = max(vStep, (terrainSdf(p) - tHeight) * fStep);\n        oDepth += vol.a * ss;\n        \n        td += ss;\n        \n    }\n    \n    if(oDepth >= thresh && td < far) return Intersection(td, vol.rgb, true);\n    \n    if(t < 0.) return noInt;\n    \n    \n    // == terrain texturing =================================\n    \n    vec3 p = ro + rd * t;\n    vec4 n = terrainNormal(p.xz);\n    vec3 tex = texture(iChannel3, p.xz * 50.).rgb;\n    \n    vec3 sCol = mix(vec3(.15, .10, .05), vec3(.30, .25, .15), tex.x);\n    vec3 gCol = mix(vec3(.10, .20, .00), vec3(.40, .30, .10), tex.x) * tex.y;\n    vec3 rCol = vec3(.50, .45, .40) * tex * tex;\n    \n    float fbm = fbm(p.xz * 200.);\n    \n    vec3 albedo = sCol;\n    albedo = mix(albedo, gCol, smoothstep(.2, .5, .5 * fbm + 1000. * n.w));\n    albedo = mix(albedo, rCol, smoothstep(.2, .3, .2 * fbm + 1.-n.y));\n    \n    return Intersection(t, albedo, false);\n    \n}\n\n\nvoid fog(vec3 ro, vec3 rd, float depth, inout vec3 col, inout float att) {\n    \n    // == bounding sphere intersection ================================\n    \n    vec3 p = ro - vec3(.5, 0., .5);\n    float b = -dot(p, rd);\n    float d = b * b - dot(p, p) + .5;\n    \n    if(d < .0) return;\n    \n    float s = sqrt(d);\n    vec2 cp = vec2(max(b - s, 0.), b + s);\n    \n    if(cp.x >= cp.y) return;\n    \n    ro += rd * cp.x;\n    depth = clamp(depth, cp.x, cp.y) - cp.x;\n    \n    // == volume integration =======================================\n    \n    float hS = fExt * (ro.y + depth * rd.y);\n    float hE = fExt * (ro.y);\n    \n    // analytical volume integration for density = fDensity*exp(-fExt*height)\n    float denom = fExt * rd.y;\n    float oDepth = (denom == 0.) ? exp(ro.y) * depth : (exp(-hE) - exp(-hS)) / denom;\n    \n    float e = exp(-fDensity * oDepth);\n    float hg = .25 * (1. - fAnis * fAnis) / pow(1. + fAnis * (fAnis - 2. * dot(rd, lDir)), 1.5);\n    col = col * e + att * (1. - e) * fCol * (skyAmbient() * .25 + lCol * hg);\n    att *= e;\n    \n}\n\n\nfloat waterDisplacement(vec2 p) {\n\n    float e = heightDensityMap(p).x;\n    \n    float swell = sin(pow(.03 - min(e * 25., 0.), .1) * 200. - p.y * 500. + iTime * 1.5) * .000005;\n    float chop = fbm(p * 1000.+iTime*.1) * .00001;\n    \n    return chop + swell;\n    \n}\n\n\n// This function is messy, but necessary to be able to skip reflections tracing on DX11 (ifs don't work, you need a return)\n\nbool reflection(inout vec3 ro, inout vec3 rd, inout Intersection t, inout float depth, inout vec3 col, inout float att) {\n\n    float wt = rd.y < 0. ? -ro.y/rd.y : -1.;\n    \n    if(!(wt > 0. && (t.t < 0. || wt < t.t))) return false;\n    \n    depth += wt;\n    \n    // == fog before reflections =================================\n    \n    fog(ro, rd, wt, col, att);\n    \n    \n    // == water normal ===========================================\n    \n    ro += rd * wt;\n    \n    vec2 k = vec2(.00001, 0);\n    float wd = waterDisplacement(ro.xz);\n    vec3 wn = normalize(vec3(wd - vec2(waterDisplacement(ro.xz + k.xy), waterDisplacement(ro.xz + k.yx)), k.x).xzy);\n    \n    \n    // == foam ===================================================\n    \n    float e = heightDensityMap(ro.xz).x;\n    \n    if(all(lessThan(abs(ro.xz - .5), vec2(.5))) && e < 0.) {\n    \n        float foam = clamp(.8 + 20000. * wd + 800. * e, 0., 1.);\n        \n        vec3 dLight = lCol * max(0., dot(lDir, wn));\n        vec3 aLight = skyAmbient();\n        \n        col += att * foam * vec3(.25) * (aLight + dLight);\n        att *= 1.-foam;\n        \n    }\n    \n    \n    // == fresnel ================================================\n    \n    const float r0 = .02;\n    \n    float nol = 1. + dot(wn, rd);\n    float fresnel = r0 + (1.-r0) * nol*nol*nol*nol*nol;\n    \n    \n    // == underwater =============================================\n    \n    const vec3 wCol = vec3(0.027,0.051,0.051);\n    const float wExt = 200.;\n    \n    vec3 uCol = vec3(0);\n    \n    if(t.t > 0.) {\n    \n        // underwater terrain\n        vec4 n = terrainNormal(ro.xz+rd.xz*(t.t-wt));\n        float fLight = r0 + (1.-r0) * lDir.y*lDir.y*lDir.y*lDir.y*lDir.y;\n        vec3  dLight = exp(wExt*n.w / lDir.y) * lCol * max(0., dot(lDir, n.xyz)) * fLight;\n        vec3  aLight = exp(wExt*n.w) * skyAmbient();\n        \n        float wScattering = exp(wExt * (wt - t.t));\n        \n        uCol = (1. - wScattering) * wCol * skyAmbient() + wScattering * t.albedo * (dLight + aLight);\n        \n    } else {\n    \n        // no underwater terrain\n        uCol =  wCol * skyAmbient();\n        \n    }\n    \n    col += att * (1. - fresnel) * uCol;\n    \n    \n    // == reflection of the ray ==================================\n    \n    att *= fresnel;\n    rd = reflect(rd, wn);\n    \n    t = trace(ro + vec3(0.0, 0.0001, 0.0), rd);\n    \n    return true;\n}\n\n\nvoid mainImage(out vec4 o, vec2 u) {\n\n    INIT_NOISE;\n    \n    vec2 aa = (vec2(random(), random()) - .5) * .15;\n    vec2 uv = (u - iResolution.xy * .5 + aa) / iResolution.y;\n    \n    vec3 rd = getMat3(0) * normalize(vec3(uv, FocalLength));\n    vec3 ro = getVec3(3);\n    vec3 pro = ro;\n    vec3 prd = rd;\n    \n    vec3 col = vec3(0);\n    float att = 1.;\n    \n    \n    // == raytracing =============================================\n    \n    float depth = 0.;\n    Intersection t = trace(ro, rd);\n    bool reflection = reflection(ro, rd, t, depth, col, att);\n    \n    \n    // == shading ================================================\n    \n    if(t.t >= 0.) {\n    \n        vec3 p = ro + t.t * rd;\n        \n        vec2 e = heightDensityMap(p.xz);\n        vec3 aLight = skyAmbient() * exp(min(p.y - e.x - tHeight, 0.) * vDensity * e.y * .15);\n        vec3 dLight = shadow(p) * lCol;\n        \n        if(t.volumetric) {\n            // shade the trees\n            col += att * t.albedo * (aLight + dLight) * .25;\n        } else {\n            // shade the terrain\n            vec4 n = terrainNormal(p.xz);\n            col += att * t.albedo * (aLight + dLight*max(dot(n.xyz, lDir), 0.));\n        }\n        \n    } else {\n    \n        col += att * sky(rd);\n        \n    }\n    \n    depth += att * (t.t < 0. ? 10. : t.t);\n    \n    \n    // == fog ====================================================\n    \n    fog(ro, rd, t.t < 0. ? 10. : t.t, col, att);\n    \n    \n    // == reprojection ===========================================\n    \n    o = vec4(col, depth > 0. ? depth : 1.);\n    \n    mat3 pCam = getMat3(5);\n    vec3 pRo = getVec3(8);\n    vec3 p = transpose(pCam) * (pro+o.a*prd-pRo);\n    vec2 pUv = FocalLength * p.xy * iResolution.y / p.z + iResolution.xy*.5;\n    \n    if(clamp(pUv, vec2(0), iResolution.xy) != pUv) return;\n    \n    vec4 po = texture(iChannel1, pUv/iResolution.xy);\n    \n    float weight = min(.05 + abs(o.a-po.a)*10., .2);\n    \n    // stronger weight on sky and reflections to avoid ghosting\n    if(reflection || t.t < 0.) weight *= 2.;\n    \n    o = mix(po, o, weight);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}