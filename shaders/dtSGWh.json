{
    "Shader": {
        "info": {
            "date": "1673207863",
            "description": "CC0: Rainbow smith cells\nContinuation of earlier experiments\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dtSGWh",
            "likes": 71,
            "name": "Rainbow smith cells",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 930
        },
        "renderpass": [
            {
                "code": "// CC0: Rainbow smith cells\n//  Continuation of earlier experiments\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define PI_2        (0.5*PI)\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float rep   = 32.0;\nconst float over  = 4.0;\nconst float nstep = 1.0/(rep*over);\nconst float astep = TAU*nstep;\nconst float pm    = 17.0;\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat modPolar(inout vec2 p, float aa) {\n  const float angle = 2.0*PI/rep;\n  float a = aa + angle/2.;\n  float r = length(p);\n  float c = floor(a/angle);\n  a = mod(a,angle) - angle/2.;\n  p = vec2(cos(a), sin(a))*r;\n  // For an odd number of repetitions, fix cell index of the cell in -x direction\n  // (cell index would be e.g. -5 and 5 in the two halves of the cell):\n  if (abs(c) >= (rep/2.0)) c = abs(c);\n  return c;\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nfloat segmentx(vec2 p, float l, float w) {\n  p = abs(p);\n  p.x -= l*0.5-w;\n  float d0 = length(p)-w;\n  float d1 = p.y-w;\n  float d = p.x > 0.0 ? d0 : d1;\n  return d;\n}\n\nvec2 df(vec2 p, float noff, float a, out float n) {\n  const float ll  = 0.5;\n  const float ss = 0.0015;\n  const float bb = ss*4.0;\n  n = modPolar(p, a)/rep+noff;\n  float m = 16.0*sin(TIME*TAU);\n  float anim = sin(TAU*TIME/10.0+pm*noff*TAU);\n  p.x -= 0.75+0.25*anim;\n  float l = ll*mix(0.5, 1.0, smoothstep(-0.9, 0.9, anim));\n  float s = ss;\n  float b = bb;\n  vec2 p0 = p;\n  vec2 p1 = p;\n  p1.x = abs(p1.x);\n  p1.x -= l*0.5-s;\n  float d0 = segmentx(p0, l, s);\n  float d1 = length(p1)-b;\n  return vec2(d0, d1);\n}\n\n// License: Unknown, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n  const vec2 sz       = vec2(1.0, sqrt(3.0));\n  const vec2 hsz      = 0.5*sz;\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = dot(p1, p1) < dot(p2, p2) ? p1 : p2;\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  n -= vec2(0.5);\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)*0.5;\n}\n\nvec3 effect0(vec2 p, float aa) {\n  const float zz = 2.75;\n  p /= zz;\n  vec2 hn = hextile(p);\n  p *= zz;\n  float n;\n  vec3 col = vec3(0.0);\n  const mat2 rr = ROT(TAU/(rep*over));\n  vec2 pp = p;\n  float a = atan(p.y, p.x);\n  float ll = length(p);\n  for (float i = 0.0; i < over; ++i) {\n    float noff = i*nstep;\n    float aoff = i*astep;\n    vec2 d = df(p, noff, a-aoff, n);\n    d /= aa;\n\n    float g0 = 2.0/max(max(d.x, 0.0), 0.001);\n    float g1 = 8.0/max((d.y*d.y), 0.000001);\n    col += hsv2rgb(vec3(0.5*ll+n-0.1*TIME, 0.85, g0));\n    col += hsv2rgb(vec3(0.5*ll+n-0.1*TIME, 0.5, g1));\n//    col = mix(col, vec3(0.54), smoothstep(1.0, -1.0, d.x));\n//    col = mix(col, vec3(1.0), smoothstep(1.0, -1.0, d.y));\n    p *= rr;\n  }\n  \n  col *= smoothstep(0.5*zz, 0.25*zz, ll);\n  const vec3 gcol0 = HSV2RGB(vec3(0.55, 0.75, 10000.0)); \n  const vec3 gcol1 = HSV2RGB(vec3(0.55, 0.95, 0.025)); \n  col += gcol0*aa*aa+gcol1/dot(p, p);\n  col /= (600.0*aa);\n  return col;\n}\n\n\nvec2 toSmith(vec2 p)  {\n  // z = (p + 1)/(-p + 1)\n  // (x,y) = ((1+x)*(1-x)-y*y,2y)/((1-x)*(1-x) + y*y)\n  float d = (1.0 - p.x)*(1.0 - p.x) + p.y*p.y;\n  float x = (1.0 + p.x)*(1.0 - p.x) - p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 fromSmith(vec2 p)  {\n  // z = (p - 1)/(p + 1)\n  // (x,y) = ((x+1)*(x-1)+y*y,2y)/((x+1)*(x+1) + y*y)\n  float d = (p.x + 1.0)*(p.x + 1.0) + p.y*p.y;\n  float x = (p.x + 1.0)*(p.x - 1.0) + p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 transform(vec2 p) {\n  vec2 off0 = sin(vec2(1.0, sqrt(0.5))*0.23*TIME);\n  vec2 off1 = sin(vec2(1.0, sqrt(0.5))*0.13*TIME);\n  vec2 sp0 = toSmith(p);\n  vec2 sp1 = toSmith(p+off0);\n  vec2 sp2 = toSmith(p-off1);\n  vec2 pp = fromSmith(sp0+sp1-sp2);\n  pp += 0.1*TIME;\n  return pp;\n}\n\nvec3 effect(vec2 p, vec2 np, vec2 pp) {\n  p = transform(p);\n  np = transform(np);\n  float aa = distance(p, np)*sqrt(2.0); \n  vec3 col = effect0(p, aa);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec2 np = p + 1.0/RESOLUTION.y;\n  vec3 col = effect(p, np, pp);\n  col = aces_approx(col);\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}