{
    "Shader": {
        "info": {
            "date": "1690292056",
            "description": "Random experiment\n\n- Drag to move the white point",
            "flags": 0,
            "hasliked": 0,
            "id": "msjfDt",
            "likes": 6,
            "name": "Moving White Point",
            "published": 3,
            "tags": [
                "2d",
                "triangle",
                "colors",
                "barycentric",
                "colorspace"
            ],
            "usePreview": 0,
            "username": "beans_please",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "vec2 screen_to_uv(vec2 coord)\n{\n    return (2.0 * coord - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nvec3 view_transform(vec3 col)\n{\n\t// OETF (Gamma)\n    return pow(col, vec3(1.0 / 2.2));\n}\n\nvec3 render(vec2 coord)\n{\n    // UV\n    vec2 uv = screen_to_uv(coord);\n    \n    // Primaries and white point\n    vec2 r = vec2(0.7, -0.5);\n    vec2 g = vec2(0.0, 0.5);\n    vec2 b = vec2(-0.7, -0.5);\n    vec2 w = vec2(0.0, -0.16667);\n    \n    // Animate the white point\n    float t = TAU * iTime * 0.5;\n    w += vec2(cos(t), sin(t)) * cos(0.2 * t) * 0.2;\n    \n    // Drag the white point\n    if (iMouse.z > 0.5)\n    {\n        w = screen_to_uv(iMouse.xy);\n    }\n    \n    // Stuff\n    vec3 col = vec3(0.0);\n    bool outside;\n    vec3 bary;\n    \n    // Check if UV is inside\n    bary = cart2barycentric(uv, r, g, b, false, outside);\n    if (!outside)\n    {\n        // Check if white point is inside\n        bary = cart2barycentric(w, r, g, b, false, outside);\n        if (outside)\n        {\n            col = vec3(1.0, 0.05, 0.03);\n        }\n        else\n        {\n            // Get interpolated color\n            bary = cart2barycentric(uv, r, w, b, false, outside);\n            if (!outside)\n            {\n                col = bary.x * vec3(1, 0, 0)\n                    + bary.y * vec3(1.0 / 3.0)\n                    + bary.z * vec3(0, 0, 1);\n            }\n            bary = cart2barycentric(uv, g, w, r, false, outside);\n            if (!outside)\n            {\n                col = bary.x * vec3(0, 1, 0)\n                    + bary.y * vec3(1.0 / 3.0)\n                    + bary.z * vec3(1, 0, 0);\n            }\n            bary = cart2barycentric(uv, b, w, g, false, outside);\n            if (!outside)\n            {\n                col = bary.x * vec3(0, 0, 1)\n                    + bary.y * vec3(1.0 / 3.0)\n                    + bary.z * vec3(0, 1, 0);\n            }\n            col = max(col, 0.0);\n            float mono = max(max(col.r, col.g), col.b);\n            if (mono > 0.0) col /= mono;\n        }\n    }\n    \n    // Draw dots on the points\n    if (inside_circle(uv, r, 0.03)) col = vec3(0.5);\n    if (inside_circle(uv, g, 0.03)) col = vec3(0.5);\n    if (inside_circle(uv, b, 0.03)) col = vec3(0.5);\n    if (inside_circle(uv, w, 0.01)) col = vec3(0.5);\n    \n    return col;\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    // Initialize PRNG\n    prng_init(vec3(frag_coord / iResolution.y, iTime));\n    \n    // Jitter sampling\n    const int jitter_samples = 32;\n    vec3 col = vec3(0.0);\n    for (int i = 0; i < jitter_samples; i++)\n    {\n        col += render(frag_coord + vec2(random(), random()) - 0.5);\n    }\n    col /= float(jitter_samples);\n    \n    // Output\n    col = view_transform(col);\n    frag_col = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926535897932384626433832\n#define TAU 6.283185307179586476925286766\n\n// Basically |a| * |b| * sin(theta)\nfloat cross2d(vec2 a, vec2 b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\nvec2 barycentric2cart(vec3 b, vec2 v0, vec2 v1, vec2 v2)\n{\n    return b.x * v0 + b.y * v1 + b.z * v2;\n}\n\n// https://www.desmos.com/calculator/8g8xjejuox\nvec3 cart2barycentric(vec2 p, vec2 v0, vec2 v1, vec2 v2)\n{\n    vec3 b = vec3(\n        cross2d(v1 - p, v2 - p),\n        cross2d(v2 - p, v0 - p),\n        cross2d(v0 - p, v1 - p)\n    ) / cross2d(v1 - v0, v2 - v0);\n    return b;\n}\n\nvec3 cart2barycentric(vec2 p, vec2 v0, vec2 v1, vec2 v2, bool clamped, out bool outside)\n{\n    vec3 b = vec3(\n        cross2d(v1 - p, v2 - p),\n        cross2d(v2 - p, v0 - p),\n        cross2d(v0 - p, v1 - p)\n    ) / cross2d(v1 - v0, v2 - v0);\n    outside = min(min(b.x, b.y), b.z) < -0.001;\n    if (clamped)\n    {\n        b = max(b, 0.0);\n        b /= (b.x + b.y + b.z);\n    }\n    return b;\n}\n\nbool inside_circle(vec2 p, vec2 center, float radius)\n{\n    return distance(p, center) < radius;\n}\n\n\n\n// -----------------------------------------------\n// Pseudo-Random Number Generator\n// Source: https://www.shadertoy.com/view/WdSSRt\n// -----------------------------------------------\n\n/* Usage Example:\n    void mainImage(out vec4 frag_col, in vec2 frag_coord)\n    {\n        // Initialize PRNG\n        prng_init(vec3(frag_coord / iResolution.y, iTime));\n    \n        // Using the function\n        float a = random();\n        vec3 b = vec3(random(), random(), random());\n        \n        ...\n    }\n*/\n\nuint prng_state[2];\n\nuint prng_rot(uint x, int k)\n{\n    return (x << k) | (x >> (32 - k));\n}\n\nfloat random()\n{\n    uint s0 = prng_state[0];\n    uint s1 = prng_state[1];\n    uint result = prng_rot(s0 * 0x9e3779bbu, 5) * 5u;\n    s1 ^= s0;\n    prng_state[0] = prng_rot(s0, 26) ^ s1 ^ (s1 << 9);\n    prng_state[1] = prng_rot(s1, 13);\n    return float(result) / float(0xffffffffu);\n}\n\nvoid prng_init(vec3 seed)\n{\n    seed.xy *= (seed.z + 10.258);\n    seed += 3.49276101561702;\n    prng_state[0] = floatBitsToUint(seed.x);\n    prng_state[1] = floatBitsToUint(seed.y);\n    random();\n}\n\n// -----------------------------------------------\n// End\n// -----------------------------------------------\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}