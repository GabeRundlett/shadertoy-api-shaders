{
    "Shader": {
        "info": {
            "date": "1542110243",
            "description": " Bumpy Fibonacci polyhedron with increasing face count (shown); use mouse to  focus on active region.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "llyBzm",
            "likes": 13,
            "name": "Growing Bumpy Polyhedron",
            "published": 3,
            "tags": [
                "fibonacci",
                "polyhedron"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 768
        },
        "renderpass": [
            {
                "code": "// \"Growing Bumpy Polyhedron\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p);\n\nvec3 ltDir;\nfloat dstFar, tCur, tFrac, nFace, nFaceN;\nconst float pi = 3.14159, phi = 1.618034;\n\nvec4 SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, z, ni;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n    }\n  }\n  return vec4 (sqrt (ddMin), vfMin);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 f4;\n  float d, dn, s;\n  f4 = SphFib (normalize (p), nFace);\n  s = sqrt (nFace) / 10.;\n  d = RotToDir (f4.yzw, vec3 (0., 0., 1.), p - f4.yzw).z - 1. +\n     0.1 * smoothstep (0.07, 0.17, f4.x * s) / s;\n  if (tFrac > 0.) {\n    f4 = SphFib (normalize (p), nFaceN);\n    dn = RotToDir (f4.yzw, vec3 (0., 0., 1.), p - f4.yzw).z - 1. +\n       0.1 * smoothstep (0.07, 0.17, f4.x * s) / s;\n    d = mix (d, dn, smoothstep (0., 1., tFrac));\n  }\n  return 0.8 * d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0002 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col = vec3 (0., 0.9, 0.) * (0.2 + 0.2 * max (dot (vn, - ltDir), 0.) +\n       0.7 * pow (max (dot (vn, ltDir), 0.), 2.)) +\n       0.3 * vec3 (1., 0., 0.) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 16.);\n  } else col = vec3 (0., 0., 0.3 * (0.7 - 0.2 * rd.y));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv, ori, ca, sa;\n  float el, az, tStep, nfMax;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tStep = 0.1;\n  nfMax = 4000.;\n  nFace = 6. + mod (floor (tCur / tStep), nfMax - 5.);\n  nFaceN = min (nFace + 1., nfMax);\n  tFrac = (fract (tCur / tStep) - 0.7) / 0.3;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.05 * pi * tCur;\n    el += 0.4 * pi * sin (0.01 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -12.);\n  rd = vuMat * normalize (vec3 (uv, 5.));\n  dstFar = 20.;\n  ltDir = vuMat * normalize (vec3 (-0.3, 0.5, -1.));\n  col = ShowScene (ro, rd);\n  uv += vec2 (-1.4, 0.9);\n  uvv = abs (uv + vec2 (0.2, -0.05)) - vec2 (0.23, 0.08);\n  if (max (uvv.x, uvv.y) < 0.) col = mix (col, vec3 (0.5, 1., 0.5),\n     ShowInt (uv, vec2 (0.4, 0.1), 4., nFace));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.12, 0.15, abs (q.x))) *\n     (1. - smoothstep (0.55, 0.65, abs (q.y)));\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d = max (d, DigSeg (q));\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv == -1) k = 8;\n  else if (iv <= 1) k = (iv == 0) ? 119 : 36;\n  else if (iv <= 3) k = (iv == 2) ? 93 : 109;\n  else if (iv <= 5) k = (iv == 4) ? 46 : 107;\n  else if (iv <= 7) k = (iv == 6) ? 122 : 37;\n  else              k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo)  DSG (q.xy - vp)  DSG (q.xy - vm)  DSG (q.yx)\n  DSG (q.xy + vm)  DSG (q.xy + vp)  DSG (q.yx + vo)\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.)) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (sgn < 0.) {\n      if (idChar == mxChar - nDig - 1.) s = ShowDig (q, -1);\n      else ++ v;\n    }\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p)\n{\n  vec3 n;\n  float c;\n  n = normalize (cross (v1, v2));\n  c = dot (v1, v2);\n  return c * p + sqrt (1. - c * c) * cross (n, p) + (1. - c) * dot (n, p) * n;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}