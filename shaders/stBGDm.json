{
    "Shader": {
        "info": {
            "date": "1624016132",
            "description": "as far as I know, this is the only polar grapher. Does not wrap angles by default. ",
            "flags": 0,
            "hasliked": 0,
            "id": "stBGDm",
            "likes": 0,
            "name": "terrible POLAR grapher!!!",
            "published": 3,
            "tags": [
                "math"
            ],
            "usePreview": 0,
            "username": "Maximxls",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\n#define xFrom -16.\n#define xTo    16.\n#define yFrom -9.\n#define yTo    9.\n\n#define tresholdMultiplier 1.\n#define axesThickness      1.\n\n#define RADIUS 3.\n\nfloat leftSide(float r, float t)\n{\n    return r;\n}\n\nfloat rightSide(float r, float t)\n{\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Size of the screen in coordinate system units\n    vec2 span = vec2(xTo - xFrom, yTo - yFrom);\n    \n    // Treshold\n    vec2 tresholds = span / iResolution.xy;\n    float treshold = min(tresholds.x, tresholds.y) * tresholdMultiplier;\n    \n    // Pixel in cartesian coordinate system\n    vec2 point = vec2(xFrom + uv.x * span.x, yFrom + uv.y * span.y);\n    \n    // If point is on axes\n    float axesTreshold = treshold / tresholdMultiplier * axesThickness;\n    bool axes = abs(point.x) < axesTreshold || abs(point.y) < axesTreshold;\n    \n    // convert into polar\n    point = vec2(sqrt(point.x * point.x + point.y * point.y), atan(point.y, point.x));\n    \n    // make angles positive\n    if (point.y < 0.) {\n        point.y += 2. * PI;\n    }\n    \n    // If point is a solution\n    bool sol = abs(leftSide(point.x, point.y) - rightSide(point.x, point.y)) < treshold;\n    \n    float col = 1.;\n    \n    if (sol || axes) {\n        col = 0.;\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}