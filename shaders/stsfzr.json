{
    "Shader": {
        "info": {
            "date": "1650487372",
            "description": "Just some ray casting with spheres. Probably not that physically accurate.",
            "flags": 32,
            "hasliked": 0,
            "id": "stsfzr",
            "likes": 7,
            "name": "Ray cast spheres",
            "published": 3,
            "tags": [
                "raycasting"
            ],
            "usePreview": 0,
            "username": "icylavah",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "#define MAX_BOUNCE_COUNT 4\n#define SAMPLE_COUNT 32\n#define SENSOR_OFFSET 0.1\n#define SENSOR_SCALE (SENSOR_OFFSET * 0.3)\n#define MAX_DISTANCE 1e12\n\n#define UP   vec3(0.0, 1.0, 0.0)\n#define ZERO vec3(0.0, 0.0, 0.0)\n#define ONE  vec3(1.0, 1.0, 1.0)\n\nfloat randomUnit(inout uint state) {\n    state = xorshift32(state);\n    return mod(float(state), 16777216.0) / 16777216.0;\n}\n\nvec3 randomvec3(inout uint state) {\n    return normalize(vec3(\n        randomUnit(state) * 2.0 - 1.0,\n        randomUnit(state) * 2.0 - 1.0,\n        randomUnit(state) * 2.0 - 1.0\n    ));\n}\n\nstruct Material {\n    vec3 reflectColor;\n    vec3 emitColor;\n    float roughness;\n    float fresnel;\n};\n\nstruct Sphere {\n    Material m;\n    vec3 p; // Position\n    float r; // Radius\n};\n\nSphere spheres[] = Sphere[](\n    Sphere(\n        Material(\n            vec3(0.2, 0.2, 0.2),\n            ZERO,\n            0.6,\n            0.5\n        ),\n        vec3(-0.2, -0.2, 0.0),\n        0.5\n    ),\n    Sphere(\n        Material(\n            vec3(0.05, 0.05, 0.05),\n            vec3(0.5, 0.1, 0.1) * 10.0,\n            0.2,\n            0.8\n        ),\n        vec3(1.5, 0.0, 1.0),\n        0.2\n    ),\n    Sphere(\n        Material(\n            vec3(0.4, 0.1, 0.1),\n            ZERO,\n            0.3,\n            0.9\n        ),\n        vec3(-1.1, -0.45, 1.5),\n        0.3\n    ),\n    \n    Sphere(\n        Material(\n            vec3(0.5, 0.5, 0.5),\n            ZERO,\n            0.8,\n            0.1\n        ),\n        vec3(1.0, -0.6, 0.5),\n        0.3\n    ),\n    \n    // Wall\n    Sphere(\n        Material(\n            vec3(0.01, 0.01, 0.01),\n            ZERO,\n            0.9,\n            0.0\n        ),\n        vec3(0.0, 0.0, -1000),\n        900.0\n    ),\n    \n    // FLOOR\n    Sphere(\n        Material(\n            vec3(0.7, 0.7, 0.7),\n            ZERO, //vec3(0.01, 0.01, 0.01),\n            0.9,\n            0.1\n        ),\n        vec3(0.0, -10001.0, 0.0),\n        10000.0\n    ),\n    \n    // SKY\n    Sphere(\n        Material(\n            ZERO, // vec3(0.5, 0.5, 0.5),\n            vec3(0.7, 0.4, 0.8) * 100000.0,\n            0.0,\n            0.0\n        ),\n        vec3(0.0, 10000000.0, 0.0),\n        9999000.0\n    )\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    uint rngState = vec4touint(texture(iChannel0, fragCoord.xy / iResolution.xy));\n    \n    vec3 cameraP = vec3(0.0, -0.5, 5.0);\n    vec3 cameraZ = normalize(-cameraP);\n    vec3 cameraX = normalize(cross(cameraZ, UP));\n    vec3 cameraY = normalize(cross(cameraX, cameraZ));\n    \n    vec3 finalColor = ZERO;\n    \n    for(int sampleI = 0; sampleI < SAMPLE_COUNT; sampleI++) {\n        vec2 rngPix = vec2(randomUnit(rngState) - 0.5, randomUnit(rngState) - 0.5);\n        vec2 uv = (fragCoord + rngPix - iResolution.xy / 2.0) / (iResolution.y / 2.0);\n        vec3 sensorP = cameraP + cameraZ * SENSOR_OFFSET + (cameraX * uv.x + cameraY * uv.y) * SENSOR_SCALE;\n        vec3 sensorN = normalize(sensorP - cameraP);\n    \n        vec3 rayP = sensorP;\n        vec3 rayN = sensorN;\n        vec3 color = ZERO;\n        vec3 colorMute = ONE;\n        float travelDistance = 0.0;\n        for(int bounceI = 0; bounceI < MAX_BOUNCE_COUNT; bounceI++) {\n            float minDistance = MAX_DISTANCE;\n            Sphere minSphere;\n            \n            for(int i = 0; i < spheres.length(); i++) {\n                Sphere s = spheres[i];\n                float a = dot(rayN, rayN);\n                float b = 2.0 * dot(rayN, rayP - s.p);\n                float c = dot(s.p, s.p) + dot(rayP, rayP) + -2.0 * dot(s.p, rayP) - s.r * s.r;\n\n                float d = b * b - 4.0 * a * c;\n                if (d <= 0.0) continue;\n\n                float t = (-b - sqrt(d)) / (2.0 * a);\n                if (t <= 0.0) continue;\n\n                if (t < minDistance) {\n                    minDistance = t;\n                    minSphere = s;\n                }\n            }\n            if (minDistance == MAX_DISTANCE) break;\n\n            Material mat = minSphere.m;\n            vec3 p = rayP + rayN * minDistance;\n            vec3 n = (p - minSphere.p) / minSphere.r;\n            \n            travelDistance += minDistance;\n            float attenuation = 1.0 / (1.0 + 0.05 * travelDistance + 0.01 * travelDistance * travelDistance);\n            \n            float cosineLaw = dot(n, -rayN);\n            if (cosineLaw < 0.0) cosineLaw = 0.0;\n            \n            color += mat.emitColor * colorMute * attenuation * cosineLaw;\n            \n            colorMute *= mat.reflectColor * cosineLaw;\n            if (colorMute.r < 1e-6 && colorMute.g < 1e-6 && colorMute.b < 1e-6) break;\n            \n            rayP = p;\n            vec3 rvec = randomvec3(rngState);\n            if (dot(n, rvec) < 0.0) rvec = -rvec;\n            rayN = normalize(mix(reflect(rayN, n), rvec, mat.roughness * mix(1.0, cosineLaw, mat.fresnel)));\n        }\n        finalColor += color;\n    }\n    \n    fragColor = vec4(pow(finalColor / float(SAMPLE_COUNT), vec3(1.0 / 2.2)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    uint state = vec4touint(texture(iChannel0, fragCoord.xy / iResolution.xy));\n    state ^= vec4touint(texture(iChannel1, fragCoord.xy / iResolution.xy));\n    state ^= xorshift32(state);\n    fragColor = vec4(\n        float(state & 0xffu) / 255.0,\n        float((state >> 8) & 0xffu) / 255.0,\n        float((state >> 16) & 0xffu) / 255.0,\n        float((state >> 24) & 0xffu) / 255.0\n    );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// https://en.wikipedia.org/wiki/Xorshift#Example_implementation\nuint xorshift32(uint state)\n{\n\tstate ^= state << 13;\n\tstate ^= state >> 17;\n\tstate ^= state << 5;\n\treturn state;\n}\n\nuint vec4touint(vec4 v) {\n    uint i = 0u;\n    i += uint(v.x * 255.0 + 0.5);\n    i += uint(v.y * 255.0 + 0.5) << 8;\n    i += uint(v.z * 255.0 + 0.5) << 16;\n    i += uint(v.w * 255.0 + 0.5) << 24;\n    return i;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}