{
    "Shader": {
        "info": {
            "date": "1690294424",
            "description": "Variation on constant collision with 3 layers, 45 degree square rotation, and a deadly palette :D\n\nFullscreen recommended. SPACE to toggle between rotated or not.",
            "flags": 48,
            "hasliked": 0,
            "id": "cdScWD",
            "likes": 6,
            "name": "Bloody Constant Collision",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "automata",
                "life",
                "conway",
                "gameoflife",
                "multipass"
            ],
            "usePreview": 0,
            "username": "misol101",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "// SPACE to toggle between rotated or not\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 val = 1.-texelFetch( iChannel0, ivec2(fragCoord), 0 ).xyz;\n    float r = 1.-val.x*1.0;\n    float g = val.y*0.95;\n    float b = val.z*1.0;\n    fragColor = vec4( r*r*r*5.3,g*g*g*1.75, b*b*1.75, 1.0 );\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = 0.5 + 0.5*cos(0.+uv.xyx+vec3(0,2,4));    \n    fragColor=(fragColor+vec4(col,1.0)*0.3)/2.1;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool ReadKey( int key )\n{\n\tbool toggle = true;\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nint cell( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    float val = texelFetch(iChannel0, p, 0 ).x;\n    return ( val > 0.) ? 1 : 0;\n}\nvec2 cellval( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).xw;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n\n    int k;\n    if (!ReadKey(Key_R)) {\n        k =   cell(px+ivec2(0,-2)) + cell(px+ivec2(-1,-1)) + cell(px+ivec2(1,-1))\n            + cell(px+ivec2(-2, 0))                        + cell(px+ivec2(2, 0))\n            + cell(px+ivec2(-1, 1)) + cell(px+ivec2(1, 1)) + cell(px+ivec2(0, 2));\n    } else {\n        k =   cell(px+ivec2(-1,-1)) + cell(px+ivec2(0,-1)) + cell(px+ivec2(1,-1))\n                + cell(px+ivec2(-1, 0))                        + cell(px+ivec2(1, 0))\n                + cell(px+ivec2(-1, 1)) + cell(px+ivec2(0, 1)) + cell(px+ivec2(1, 1));\n    }\n    \n    int e = cell(px);\n    vec2 cvv=cellval(px);\n    int ev = int(cvv.x*10.+0.5);\n    int f = 0;\n    if (e==1) {\n        f = ev - 1;\n        if (stayrules[k]==1) f = k;\n    }\n    else {\n        f = bornrules[k]==1? k : 0;\n    }\n\n    float ff = float(f)/10.;\n\n    if( iFrame==0 ||iResolution.x != cvv.y) ff = clamp(step(liveval, hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1))), 0., liveval);\n\n    float maxregen = 2. + iResolution.x/800.;  \n    for (float i=0.; i<maxregen; i++) {\n        int sz = int(1. + hash1(iTime + i) * 1.5);\n        if (abs(int(hash1(iTime+i)*iResolution.x) - int(fragCoord.x)) < sz && abs(int(hash1(iTime + i + 0.287)*iResolution.y) - int(fragCoord.y)) < sz)\n            ff = -1.;\n    }\n\n\tfragColor = vec4( ff, 0.0, 0.0, iResolution.x);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool ReadKey( int key )\n{\n\tbool toggle = true;\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nint cell( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    float val = texelFetch(iChannel0, p, 0 ).x;\n    return ( val > 0.) ? 1 : 0;\n}\nvec2 cellval( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).xw;\n}\n\nconst float hashp = 1.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n\n    int k;\n    if (!ReadKey(Key_R)) {\n        k =   cell(px+ivec2(0,-2)) + cell(px+ivec2(-1,-1)) + cell(px+ivec2(1,-1))\n            + cell(px+ivec2(-2, 0))                        + cell(px+ivec2(2, 0))\n            + cell(px+ivec2(-1, 1)) + cell(px+ivec2(1, 1)) + cell(px+ivec2(0, 2));\n    } else {\n        k =   cell(px+ivec2(-1,-1)) + cell(px+ivec2(0,-1)) + cell(px+ivec2(1,-1))\n                + cell(px+ivec2(-1, 0))                        + cell(px+ivec2(1, 0))\n                + cell(px+ivec2(-1, 1)) + cell(px+ivec2(0, 1)) + cell(px+ivec2(1, 1));\n    }\n    \n    int e = cell(px);\n    vec2 cvv=cellval(px);\n    int ev = int(cvv.x*10.+0.5);\n    int f = 0;\n    if (e==1) {\n        f = ev - 1;\n        if (stayrules[k]==1) f = k;\n    }\n    else {\n        f = bornrules[k]==1? k : 0;\n    }\n\n    float ff = float(f)/10.;\n\n    if( iFrame==0 || iResolution.x != cvv.y) ff = clamp(step(liveval, hash1(hashp+fragCoord.x*13.0+hash1(fragCoord.y*71.1))), 0., liveval);\n\n    float maxregen = 2. + iResolution.x/800.;  \n    for (float i=0.; i<maxregen; i++) {\n        int sz = int(1. + hash1(iTime + i) * 1.5);\n        if (abs(int(hash1(hashp+iTime+i)*iResolution.x) - int(fragCoord.x)) < sz && abs(int(hash1(hashp + iTime + i + 0.287)*iResolution.y) - int(fragCoord.y)) < sz)\n            ff = -1.;\n    }\n\n\tfragColor = vec4( ff, 0.0, 0.0, iResolution.x);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool ReadKey( int key )\n{\n\tbool toggle = true;\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nint cell( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    float val = texelFetch(iChannel0, p, 0 ).x;\n    return ( val > 0.) ? 1 : 0;\n}\nvec2 cellval( in ivec2 p )\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).xw;\n}\n\nconst float hashp = 2.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n\n    int k;\n    if (!ReadKey(Key_R)) {\n        k =   cell(px+ivec2(0,-2)) + cell(px+ivec2(-1,-1)) + cell(px+ivec2(1,-1))\n            + cell(px+ivec2(-2, 0))                        + cell(px+ivec2(2, 0))\n            + cell(px+ivec2(-1, 1)) + cell(px+ivec2(1, 1)) + cell(px+ivec2(0, 2));\n    } else {\n        k =   cell(px+ivec2(-1,-1)) + cell(px+ivec2(0,-1)) + cell(px+ivec2(1,-1))\n                + cell(px+ivec2(-1, 0))                        + cell(px+ivec2(1, 0))\n                + cell(px+ivec2(-1, 1)) + cell(px+ivec2(0, 1)) + cell(px+ivec2(1, 1));\n    }\n    \n    int e = cell(px);\n    vec2 cvv=cellval(px);\n    int ev = int(cvv.x*10.+0.5);\n    int f = 0;\n    if (e==1) {\n        f = ev - 1;\n        if (stayrules[k]==1) f = k;\n    }\n    else {\n        f = bornrules[k]==1? k : 0;\n    }\n\n    float ff = float(f)/10.;\n\n    if( iFrame==0 || iResolution.x != cvv.y) ff = clamp(step(liveval, hash1(hashp+fragCoord.x*13.0+hash1(fragCoord.y*71.1))), 0., liveval);\n\n    float maxregen = 2. + iResolution.x/800.;  \n    for (float i=0.; i<maxregen; i++) {\n        int sz = int(1. + hash1(iTime + i) * 1.5);\n        if (abs(int(hash1(hashp+iTime+i)*iResolution.x) - int(fragCoord.x)) < sz && abs(int(hash1(hashp+iTime + i + 0.287)*iResolution.y) - int(fragCoord.y)) < sz)\n            ff = -1.;\n    }\n\n\tfragColor = vec4( ff, 0.0, 0.0, iResolution.x);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 val = 1.-texelFetch( iChannel0, ivec2(fragCoord), 0 ).xxx;\n    vec3 val2 = 1.-texelFetch( iChannel1, ivec2(fragCoord), 0 ).xxx;\n    vec3 val3 = 1.-texelFetch( iChannel2, ivec2(fragCoord), 0 ).xxx;\n    float r = val.x*0.3+val3.x*0.4+ val2.x*0.35;\n    float g = val2.x*0.2+val.x*0.4+val3.x*0.35;\n    float b = val3.x*0.4+val.x*0.7+val2.x*0.5;\n    fragColor = vec4( r*r*1.3,g*g*1.3, b*b*1.3, 1.0 );\n    \n    vec2 screenCenter = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n    vec3 valb2 = texture(iChannel3, (fragCoord - screenCenter) * 0.993 / iResolution.xy + 0.5).xxx;\n\n    fragColor = vec4( (fragColor.xyz*0.5+valb2*0.9)/1.4, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// value for key to reset with\nconst int Key_R = 32;\n\n// imploding rectangles\nconst int stayrules[9] = int[9](0,0,1,1,0,0,0,0,1);\nconst int bornrules[9] = int[9](0,0,1,0,0,0,1,1,0);\nconst float liveval = 0.01;\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}