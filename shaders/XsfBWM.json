{
    "Shader": {
        "info": {
            "date": "1496312994",
            "description": "Underground boat ride (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "XsfBWM",
            "likes": 21,
            "name": "Rainbow Cavern",
            "published": 3,
            "tags": [
                "voronoi",
                "raymarch",
                "lighting",
                "water",
                "cave",
                "boat"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 1188
        },
        "renderpass": [
            {
                "code": "// \"Rainbow Cavern\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define USE_BMAP true\n//#define USE_BMAP false  // for weaker GPUs\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv3 (vec3 p);\nvec3 Hashv3f (float p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec4 vcId;\nvec3 ltPos[2], boatPos[2];\nfloat boatAng[2], dstFar, tCur, htWat, dstBMap;\nint idObj;\nbool uWat, hitWat;\nconst int idBoat = 1, idBLamp = 2, idFLamp = 3;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  for (int k = 0; k < 2; k ++) {\n    q = p - boatPos[k];\n    q.xz = Rot2D (q.xz, boatAng[k]);\n    d = max (PrCapsDf (q, 0.11, 0.25),\n       - PrCapsDf (q + vec3 (0., -0.02, 0.), 0.1, 0.24));\n    if (d < dMin) { dMin = d;  idObj = idBoat; }\n    q.y -= 0.1;\n    q.z -= 0.3;\n    d = PrSphDf (q, 0.01);\n    if (d < dMin) { dMin = d;  idObj = idFLamp; }\n    q.z -= -0.6;\n    d = PrSphDf (q, 0.01);\n    if (d < dMin) { dMin = d;  idObj = idBLamp; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat VPoly (vec3 p)\n{\n  vec3 ip, fp, g, w, a;\n  ip = floor (p);\n  fp = fract (p);\n  a = vec3 (2.);\n  for (float gz = -1.; gz <= 1.; gz ++) {\n    for (float gy = -1.; gy <= 1.; gy ++) {\n      for (float gx = -1.; gx <= 1.; gx ++) {\n        g = vec3 (gx, gy, gz);\n        w = g + 0.7 * Hashfv3 (ip + g) - fp;\n        a.x = dot (w, w);\n        if (a.x < a.y) {\n          vcId = vec4 (ip + g, a.y - a.x);\n          a = a.zxy;\n        } else a.z = min (a.z, a.x);\n      }\n    }\n  }\n  return a.y;\n}\n\nvec3 TrackPath (float t)\n{\n  return vec3 (4.7 * sin (t * 0.15) + 2.7 * cos (t * 0.19), 0., t);\n}\n\nfloat CaveDf (vec3 p)\n{\n  vec3 hv;\n  float s, d;\n  s = p.y - htWat;\n  p.xy -= TrackPath (p.z).xy;\n  p += 0.1 * (1. - cos (2. * pi * (p + 0.2 * (1. - cos (2. * pi * p.zxy)))));\n  hv = cos (0.6 * p - 0.5 * sin (1.4 * p.zxy + 0.4 * cos (2.7 * p.yzx)));\n  if (USE_BMAP && dstBMap < 10.) hv *= 1. + 0.01 *\n     (1. - smoothstep (0., 10., dstBMap)) *\n     smoothstep (0.05, 0.4, VPoly (10. * p)) / length (hv);\n  d = 0.9 * (length (hv) - 1.1);\n  if (! uWat) d = min (d, s);\n  return d;\n}\n\nfloat CaveRay (vec3 ro, vec3 rd)\n{\n  float d, dHit;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    dstBMap = dHit;\n    d = CaveDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 CaveNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (CaveDf (p + e.xxx), CaveDf (p + e.xyy),\n     CaveDf (p + e.yxy), CaveDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat CaveSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 16; j ++) {\n    h = CaveDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.2, 0.1 * d);\n    if (sh < 0.05) break;\n  }\n  return 0.4 + 0.6 * sh;\n}\n\nvec3 CaveCol (vec3 ro, vec3 rd, vec3 ltDir, float atten)\n{\n  vec3 col, vn, q, vno;\n  float glit;\n  VPoly (10. * ro);\n  q = ro;\n  if (! USE_BMAP) q = 0.004 * floor (250. * q);\n  vn = VaryNf (10. * q, CaveNf (q), 1.);\n  col = (vec3 (0.3, 0.1, 0.) + vec3 (0.3, 0.2, 0.1) * Hashv3f (Hashfv3 (vcId.xyz))) *\n     (1.2 - 0.4 * Hashfv3 (100. * ro)) *\n     (0.4 + 0.6 * smoothstep (0.05, 1., sqrt (vcId.w))) *\n     (0.2 + 0.8 * max (dot (vn, ltDir), 0.) +\n     2. * pow (max (dot (normalize (ltDir - rd), vn), 0.), 256.));\n  if (! hitWat) {\n    vno = CaveNf (ro);\n    glit = 20. * pow (max (0., dot (ltDir, reflect (rd, vno))), 4.) *\n       pow (1. - 0.6 * abs (dot (normalize (ltDir - rd),\n       VaryNf (100. * ro, vno, 5.))), 8.);\n    col += vec3 (1., 1., 0.5) * glit;\n  }\n  col *= atten * CaveSShadow (ro, ltDir);\n  return col;\n}\n\nvec3 ObjCol (vec3 ro, vec3 rd, vec3 vn, vec3 ltDir, float atten)\n{\n  vec4 col4;\n  if (idObj == idBoat) col4 = vec4 (0.3, 0.3, 0.6, 0.2);\n  else if (idObj == idFLamp) col4 = vec4 (0., 1., 0., -1.);\n  else if (idObj == idBLamp) col4 = vec4 (1., 0., 0., -1.);\n  if (col4.a >= 0.)\n    col4.rgb = col4.rgb * (0.2 + 0.8 * CaveSShadow (ro, ltDir)) *\n       (0.1 + 0.9 * atten * max (dot (ltDir, vn), 0.)) +\n       col4.a * atten * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n  return col4.rgb;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, colR, bgCol, ltVec, vn, roo, rdo, row, vnw;\n  float dstCave, dstObj, atten, frFac;\n  roo = ro;\n  rdo = rd;\n  bgCol = (abs (rd.y) < 0.5) ? vec3 (0., 0.05, 0.08) : vec3 (0.01);\n  uWat = false;\n  hitWat = false;\n  dstCave = CaveRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstCave < min (dstObj, dstFar) && ro.y + rd.y * dstCave < htWat + 0.001) {\n    hitWat = true;\n    ro += rd * dstCave;\n    row = ro;\n    vnw = VaryNf (1.5 * ro, vec3 (0., 1., 0.), 0.1);\n    rd = reflect (rd, vnw);\n    ro += 0.01 * rd;\n    dstCave = CaveRay (ro, rd);\n    dstObj = ObjRay (ro, rd);\n  }\n  if (min (dstCave, dstObj) < dstFar) {\n    ltVec = roo + ltPos[0] - ro;\n    atten = 1. / (0.1 + dot (ltVec, ltVec));\n    if (hitWat) atten *= 3.;\n    ltVec = normalize (ltVec);\n    ro += min (dstCave, dstObj) * rd;\n    if (dstCave < dstObj) col = mix (CaveCol (ro, rd, ltVec, atten), bgCol,\n       smoothstep (0.45, 0.99, dstCave / dstFar));\n    else col = ObjCol (ro, rd, ObjNf (ro), ltVec, atten);\n  } else col = bgCol;\n  if (hitWat) {\n    frFac = rdo.y * rdo.y;\n    frFac *= frFac;\n    if (frFac > 0.005) {\n      rd = refract (rdo, vnw, 1./1.333);\n      ro = row + 0.01 * rd;\n      uWat = true;\n      dstCave = CaveRay (ro, rd);\n      if (min (dstCave, dstObj) < dstFar) {\n        ltVec = roo + ltPos[1] - ro;\n        atten = 1. / (0.1 + dot (ltVec, ltVec));\n        ltVec = normalize (ltVec);\n        ro += rd * dstCave;\n        hitWat = false;\n        colR = mix (CaveCol (ro, rd, ltVec, atten), bgCol,\n           smoothstep (0.45, 0.99, dstCave / dstFar));\n      } else colR = bgCol;\n      col = mix (col, colR * vec3 (0.4, 1., 0.6) * exp (0.02 * ro.y), frFac);\n    }\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, fpF, fpB, vd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, t, tt, a;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  t = 1. * tCur;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az = az + 2. * pi * mPtr.x;\n    el = el + 0.95 * pi * mPtr.y;\n  } else {\n    tt = mod (floor (0.05 * tCur), 4.);\n    a = 0.45 * pi * SmoothBump (0.75, 0.95, 0.05, mod (0.05 * tCur, 1.));\n    if (tt < 2.) el = (2. * tt - 1.) * a;\n    else az = (2. * tt - 5.) * a;\n  }\n  htWat = -0.5;\n  for (int k = 0; k < 2; k ++) {\n    fpF = TrackPath (t + 3. + 3. * float (k) + 0.1);\n    fpB = TrackPath (t + 3. + 3. * float (k) - 0.1);\n    boatPos[k] = 0.5 * (fpF + fpB);\n    boatPos[k].y = htWat + 0.01;\n    vd = fpF - fpB;\n    boatAng[k] = (length (vd.xz) > 0.) ? atan (vd.x, vd.z) : 0.5 * pi;\n  }\n  fpF = TrackPath (t + 0.1);\n  fpB = TrackPath (t - 0.1);\n  ro = 0.5 * (fpF + fpB);\n  vd = fpF - fpB;\n  ori = vec2 (el, az + ((length (vd.xz) > 0.) ? atan (vd.x, vd.z) : 0.5 * pi));\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 2.));\n  ltPos[0] = 0.5 * vuMat * vec3 (0., 1., -1.);\n  ltPos[1] = 0.5 * vuMat * vec3 (0., -1., -1.);\n  dstFar = 50.;\n  fragColor = vec4 (ShowScene (ro, rd) , 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, cHashA3)) * cHashM);\n}\n\nvec3 Hashv3f (float p)\n{\n  return fract (sin (vec3 (p, p + 1., p + 2.)) *\n     vec3 (cHashM, cHashM * 0.43, cHashM * 0.37));\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) -\n     Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}