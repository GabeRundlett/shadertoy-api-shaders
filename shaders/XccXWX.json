{
    "Shader": {
        "info": {
            "date": "1714871105",
            "description": "A torus knot with some rocks thrown in",
            "flags": 48,
            "hasliked": 0,
            "id": "XccXWX",
            "likes": 21,
            "name": "Rocknot",
            "published": 3,
            "tags": [
                "torus",
                "knot",
                "trefoil"
            ],
            "usePreview": 0,
            "username": "liamegan",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "\n  #define PI 3.1415926\n  \n  /* Shading constants */\n  /* --------------------- */\n  const vec3 LP = vec3(-2.6, 1.7, -0.3);  // light position\n  const vec3 LC = vec3(.85,0.80,0.80);    // light colour\n  const vec3 HC1 = vec3(.1, .4, .4);      // hemisphere light colour 1\n  const vec3 HC2 = vec3(0.1,.1,.6)*.5;    // hemisphere light colour 2\n  const vec3 HLD = vec3(0,1,0);           // hemisphere light direction\n  const vec3 BC = vec3(0.25,0.25,0.25);   // back light colour\n  const vec3 FC = vec3(1.30,1.20,1.00);   // fresnel colour\n  const float AS = .5;                    // ambient light strength\n  const float DS = 1.;                    // diffuse light strength\n  const float BS = .3;                    // back light strength\n  const float FS = .3;                    // fresnel strength\n  /* Raymarching constants */\n  /* --------------------- */\n  const float MAX_TRACE_DISTANCE = 10.;             // max trace distance\n  const float INTERSECTION_PRECISION = 0.0001;       // precision of the intersection\n  const int NUM_OF_TRACE_STEPS = 128;               // max number of trace steps\n  const float STEP_MULTIPLIER = 1.;                 // the step mutliplier - ie, how much further to progress on each step\n  \n  /* Structures */\n  /* ---------- */\n  struct Camera {\n    vec3 ro;\n    vec3 rd;\n    vec3 forward;\n    vec3 right;\n    vec3 up;\n    float FOV;\n  };\n  struct Surface {\n    float len;\n    vec3 position;\n    vec3 colour;\n    float id;\n    float steps;\n    float AO;\n  };\n  struct Model {\n    float dist;\n    vec3 colour;\n    float id;\n  };\n  \n  /* Utilities */\n  /* ---------- */\n  vec2 toScreenspace(in vec2 p) {\n    vec2 uv = (p - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    return uv;\n  }\n  mat2 R(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n  }\n  // persistent state stuff\n  // Borrowed from TinyTexel (CCO) https://www.shadertoy.com/view/3s23Ww\n  vec3 cp() {\n    vec4 mouse = texelFetch(iChannel0, ivec2(1, 0), 0); \n  \n    vec2 ang = vec2(-0.1 * PI, -PI * 0.1);\n    ang += mouse.xy * 0.008;\n\n    //float fov = Pi * 0.6;\n    float focalLen = 0.6;// = 0.5 * tan(Pi05 - fov * 0.5)\n\n    mat3 cmat;\n    {\n        float sinPhi   = sin(ang.x);\n        float cosPhi   = cos(ang.x);\n        float sinTheta = sin(ang.y);\n        float cosTheta = cos(ang.y);    \n\n        vec3 front = vec3(cosPhi * cosTheta, \n                                   sinTheta, \n                          sinPhi * cosTheta);\n\n        vec3 right = vec3(-sinPhi, 0.0, cosPhi);\n        \n        vec3 up    = vec3(-cosPhi * sinTheta,\n                                    cosTheta,\n                          -sinPhi * sinTheta);\n        \n        cmat = mat3(right, up, front);\n    }\n    \n    return -cmat[2] * exp2(1.5 + (25.+mouse.w) * 0.02);\n  }\n  Camera getCamera(in vec2 uv, in vec3 pos, in vec3 target) {\n    vec3 f = normalize(target - pos);\n    vec3 r = normalize(vec3(f.z, 0., -f.x));\n    vec3 u = normalize(cross(f, r));\n    \n    float FOV = .8;\n    \n    return Camera(\n      pos,\n      normalize(f + FOV * uv.x * r + FOV * uv.y * u),\n      f,\n      r,\n      u,\n      FOV\n    );\n  }\n  // Hash without sine from Dave Hoskins\n  // https://www.shadertoy.com/view/4djSRW\n  float hash13(vec3 p3) {\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n  }\n  vec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n  }\n  \n  //--------------------------------\n  // Modelling\n  //--------------------------------\n  #define rot(p,c,s) vec2(c*p.x+s*p.y,c*p.y-s*p.x)\n  Model model(vec3 p, float t) {\n    \n    float a = atan(p.x, p.z), ca=cos(a*3.+t*10.);\n    vec2 n = vec2(length(p.xz) - .35 - (cos(t*5.)*.05+.05), p.y);\n    n *= R(a*1.5+t*8.);\n    n.y = abs(n.y)-.15 ;\n    \n    vec3 pm = p * mix(1., .8+cos(t*3.+a*2.)*.5, sin(t*2.)*.5+.5);\n    vec3 m = mod(pm, .1)-.05;\n    \n    vec2 q = vec2(length(p.xz)-1.5, p.y);\n    {\n      float s = sin(a), c = cos(a);\n      q = rot(q,c,s);\n    }\n    q.y = abs(q.y) - .7;\n    \n    float d = length(n)-.08+ca*.03;\n    d = length(vec2(max(0., d), max(0., length(m)-.035-ca*.01)))-.02+ca*.01;\n    \n    vec3 id = floor((pm)/.1);\n    vec3 gid = floor((pm)/.3);\n    vec3 colour = vec3(hash33(id).rrb * vec3(1,.5,.1) + vec3(0,.5,.7));\n    colour *= hash13(gid)+.3;\n    \n    return Model(d, colour, 1.);\n  }\n  Model map( vec3 p, float t ){\n    return model(p, t);\n  }\n  \n  /* Modelling utilities */\n  /* ---------- */\n  // I *think* I borrowed this from Shane, but probably orginally comes from IQ. \n  // Calculates the normal by taking a very small distance,\n  // remapping the function, and getting normal for that\n  vec3 calcNormal( in vec3 pos ){\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    \n    pos*=.35;\n    float t = iTime * .1;\n    \n    vec3 nor = vec3(\n      map(pos+eps.xyy, t).dist - map(pos-eps.xyy, t).dist,\n      map(pos+eps.yxy, t).dist - map(pos-eps.yxy, t).dist,\n      map(pos+eps.yyx, t).dist - map(pos-eps.yyx, t).dist );\n    return normalize(nor);\n  }\n  \n  //--------------------------------\n  // Raymarcher\n  //--------------------------------\n  Surface march( in Camera cam ){\n    float h = 1e4; // local distance\n    float d = 0.; // ray depth\n    float id = -1.; // surace id\n    float s = 0.; // number of steps\n    float ao = 0.; // march space AO. Simple weighted accumulator. Not really AO, but ¯\\_(ツ)_/¯\n    vec3 p; // ray position\n    vec3 c; // surface colour\n    \n    float t = iTime * .1;\n\n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ) {\n      if( abs(h) < INTERSECTION_PRECISION || d > MAX_TRACE_DISTANCE ) break;\n      p = cam.ro+cam.rd*d;\n      Model m = map( p*.35, t );\n      h = m.dist;\n      d += h * STEP_MULTIPLIER;\n      id = m.id;\n      s += 1.;\n      ao += max(h, 0.);\n      c = m.colour;\n    }\n\n    if( d >= MAX_TRACE_DISTANCE ) id = -1.0;\n\n    return Surface( d, p, c, id, s, ao );\n  }\n  \n  //--------------------------------\n  // Shading\n  //--------------------------------\n  /*\n   * Soft shadows and AO curtesy of Inigo Quilez\n   * https://iquilezles.org/articles/rmshadows\n  */\n  float softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax ) {\n    float res = 1.0;\n    float t = mint;\n    float tm = iTime * .1;\n    for( int i=0; i<16; i++ ) {\n      float h = map( (ro + rd*t)*.35, tm ).dist;\n      res = min( res, 8.0*h/t );\n      t += clamp( h, 0.02, 0.10 );\n      if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n  }\n  float AO( in vec3 pos, in vec3 nor ) {\n    float occ = 0.0;\n    float sca = 1.0;\n    float t = iTime * .1;\n    for( int i=0; i<5; i++ )\n    {\n      float hr = 0.01 + 0.12*float(i)/4.0;\n      vec3 aopos =  nor * hr + pos;\n      float dd = map( aopos*.35,t ).dist;\n      occ += -(dd-hr)*sca;\n      sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n  }\n  vec3 shade(vec3 col, vec3 pos, vec3 nor, vec3 ref, Camera cam) {\n    \n    vec3 plp = LP - pos; // point light\n    \n    float o = AO( pos, nor );                 // Ambient occlusion\n    vec3  l = normalize( plp );                    // light direction\n    \n    float d = clamp( dot( nor, l ), 0.0, 1.0 )*DS;   // diffuse component\n    float b = clamp( dot( nor, normalize(vec3(-l.x,0,-l.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0)*BS; // back light component\n    float f = pow( clamp(1.0+dot(nor,cam.rd),0.0,1.0), 2.0 )*FS; // fresnel component\n\n    vec3 c = vec3(0.0);\n    c += d*LC;                           // diffuse light integration\n    c += mix(HC1,HC2,dot(nor, HLD))*AS;        // hemisphere light integration (ambient)\n    c += b*BC*o;       // back light integration\n    c += f*FC*o;       // fresnel integration\n    \n    return col*c;\n  }\n  vec3 render(Surface surface, Camera cam, vec2 uv) {\n    vec3 colour = vec3(.04,.045,.05);\n    colour = vec3(.35, .5, .75);\n    vec3 colourB = vec3(.9, .85, .8);\n    \n    colour = mix(colourB, colour, pow(length(uv), 2.)/1.5);\n\n    if (surface.id > -1.){\n      vec3 surfaceNormal = calcNormal( surface.position );\n      vec3 ref = reflect(cam.rd, surfaceNormal);\n      colour = surfaceNormal;\n      vec3 pos = surface.position;\n      \n      float t = iTime;\n      vec3 col = mix(\n        mix(\n          vec3(.8,.3,.6), \n          vec3(.6,.3,.8), \n          dot(surfaceNormal,surfaceNormal.zxy)\n        ),\n        vec3(1), \n        smoothstep(0., .1, cos(surface.colour.r*40.))\n      );\n      col = texture(iChannel1, surface.position*15.).rrr;\n      col += surface.colour*.5-.25;\n      col *= 1.2;\n      \n      colour = shade(col, pos, surfaceNormal, ref, cam);\n    }\n\n    return colour;\n  }\n  \n  \n  void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 c = vec3(0);\n    vec3 cp = cp();\n    for(int x=0; x<2; x++) {\n      for(int y=0; y<2; y++) {\n        vec2 uv = toScreenspace(fragCoord+vec2(x,y)*.5);\n\n        Camera cam = getCamera(uv, cp, vec3(0));\n        Surface surface = march(cam);\n\n        c += render(surface, cam, uv);\n      }\n    }\n    \n    fragColor = vec4(c*.25,1);\n  }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// persistent state stuff\n// Borrowed from TinyTexel (CCO) https://www.shadertoy.com/view/3s23Ww\n\nvoid mainImage( out vec4 col, in vec2 uv0 )\n{  \n    col = vec4(0);\n    \n    vec2 uv = uv0 - 0.5;\n    \n    vec4 iMouseLast     = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec4 iMouseAccuLast = iFrame<1?vec4(10,-50,10,10):texelFetch(iChannel0, ivec2(1, 0), 0);\n    vec4 wasdAccuLast   = texelFetch(iChannel0, ivec2(2, 0), 0);\n\n    bool shift = texelFetch(iChannel1, ivec2(16, 0), 0).x != 0.0;\n    \n    float kW = texelFetch(iChannel1, ivec2(0x57, 0), 0).x;\n    float kA = texelFetch(iChannel1, ivec2(0x41, 0), 0).x;\n    float kS = texelFetch(iChannel1, ivec2(0x53, 0), 0).x;\n    float kD = texelFetch(iChannel1, ivec2(0x44, 0), 0).x;\n    \n    vec4 wasdAccu = wasdAccuLast + vec4(kW, kA, kS, kD);\n    \n    vec2 mouseDelta = iMouse.xy - iMouseLast.xy;\n    \n    bool cond0 = iMouse.z > 0.0 && iMouseLast.z > 0.0;\n    vec2 mouseDelta2 = cond0 && !shift ? mouseDelta.xy*vec2(-1,1) : vec2(0.0);\n    vec2 mouseDelta3 = cond0 &&  shift ? mouseDelta.xy+vec2(1,1) : vec2(0.0);\n    \n    vec2 iMouseAccu1 = iMouseAccuLast.xy + mouseDelta2;\n    vec2 iMouseAccu2 = iMouseAccuLast.zw + mouseDelta3;\n    \n    if(uv.x == 0.0 && uv.y == 0.0) col = iMouse;  \n    if(uv.x == 1.0 && uv.y == 0.0) col = vec4(iMouseAccu1, iMouseAccu2);\n    if(uv.x == 2.0 && uv.y == 0.0) col = wasdAccu;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}