{
    "Shader": {
        "info": {
            "date": "1658854867",
            "description": "A simple path tracer written for educational purposes.\nExercise 1: Generating camera rays for a pinhole camera.\nSolved.\nhttps://www.intel.com/content/www/us/en/developer/videos/path-tracing-workshop-part-1.html",
            "flags": 0,
            "hasliked": 0,
            "id": "7sGBDK",
            "likes": 0,
            "name": "PT workshop 1S: Primary rays",
            "published": 3,
            "tags": [
                "educational",
                "pathtracing",
                "exercises"
            ],
            "usePreview": 0,
            "username": "christoph_peters",
            "viewed": 134
        },
        "renderpass": [
            {
                "code": "// Computes the direction vector of a primary ray\n// \\param x, y Coordinates between 0 and 1 for the pixel that the ray\n//      passes through (x, y)\n// \\param camera_position Position vector for the camera (o)\n// \\param left_bottom Position vector for the left bottom corner of\n//      the image plane (c)\n// \\param right, up Direction vectors towards the right and top end\n//      of the image plane (r, u)\n// \\return A direction vector of length 1 for a ray through the\n//      specified pixel (d)\nvec3 get_primary_ray_direction(float x, float y, vec3 camera_position, vec3 left_bottom, vec3 right, vec3 up) {\n    vec3 image_plane_pos = left_bottom + x * right + y * up;\n    return normalize(image_plane_pos - camera_position);\n}\n\n\nvoid mainImage(out vec4 out_color, in vec2 pixel_coord) {\n    // Define the camera position and the view plane\n    vec3 camera_position = vec3(0.278, 0.8, 0.2744);\n    vec3 middle = camera_position - vec3(0.0, 0.8, 0.0);\n    vec3 up = vec3(0.0, 0.0, 0.56);\n    float aspect = float(iResolution.x) / float(iResolution.y);\n    vec3 right = aspect * vec3(-0.56, 0.0, 0.0);\n    vec3 left_bottom = middle - 0.5 * right - 0.5 * up;\n    // Compute the camera ray\n    vec2 tex_coord = pixel_coord / iResolution.xy;\n    vec3 ray_direction = get_primary_ray_direction(\n        tex_coord.x, tex_coord.y, camera_position, left_bottom, right, up);\n    // Display the ray direction as color (mapping [-1,1] to [0, 1])\n    out_color.rgb = ray_direction * 0.5 + vec3(0.5);\n    out_color.a = 1.0;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}