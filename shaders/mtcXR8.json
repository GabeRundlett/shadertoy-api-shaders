{
    "Shader": {
        "info": {
            "date": "1685004725",
            "description": "Pocket watch with inexact timekeeping (up to +/- 10m) - only correct twice a day, just like Lewis Carroll's stopped clock, or when mouse pressed.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtcXR8",
            "likes": 10,
            "name": "Wonky Watch",
            "published": 3,
            "tags": [
                "time",
                "clock",
                "date"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 221
        },
        "renderpass": [
            {
                "code": "// \"Wonky Watch\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// Pocket watch with inexact timekeeping (up to +/- 10m) - only correct\n// twice a day, just like Lewis Carroll's stopped clock, or when mouse pressed.\n\n#define AA  1   // optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nfloat Fbm2 (vec2 p);\n\nvec4 dateCur;\nvec3 ltDir, qHit;\nvec2 aaCs[3], wRotCs;\nfloat dstFar, tCur, tShift;\nint nFrame, idObj;\nconst int idFace = 1, idHandS = 2, idHand = 3, idAx = 4, idHub = 5,\n   idCase = 6, idWnd = 7, idClsp = 8;\nconst float pi = 3.1415927;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, a;\n  dMin = dstFar;\n  p.xz = Rot2Cs (p.xz, wRotCs);\n  p.yz = p.zy * vec2 (-1., 1.);\n  q = p;\n  r = length (q.xz);\n  a = (r > 0.) ? atan (- q.z, q.x) / (2. * pi) + 0.5 : 0.;\n  d = 0.9 * max (length (vec2 (r - 1.05, q.y)) - 0.08 - 0.003 * abs (sin (256. * pi * a)), 1.01 - r);\n  DMINQ (idCase);\n  d = PrCylDf (q.xzy, 1.05, 0.05);\n  d = max (d, - max (length (vec2 (q.xz - vec2 (0., -0.5))) - 0.252, 0.03 - q.y));\n  d = min (d, PrTorusBxDf ((q - vec3 (0.7, 0.05, 0.)).xzy, vec3 (0.06, 0.06, 0.01), 0.007));\n  DMINQ (idFace);\n  q = p;\n  q.z -= 1.16;\n  d = PrCylDf (q, 0.03, 0.06);\n  DMINQ (idClsp);\n  q.z -= 0.14;\n  d = PrSphDf (q, 0.1);\n  DMINQ (idWnd);\n  d = PrTorusDf (q.xzy, 0.015, 0.13);\n  DMINQ (idClsp);\n  q = p;\n  q.y -= 0.06;\n  d = PrCylDf (q.xzy, 0.02, 0.04);\n  DMINQ (idAx);\n  q = p;\n  q.yz -= vec2 (0.04, -0.5);\n  d = PrCylDf (q.xzy, 0.015, 0.02);\n  DMINQ (idAx);\n  q = p;\n  q.yz -= vec2 (0.045, -0.5);\n  d = PrCylDf (q.xzy, 0.03, 0.008);\n  DMINQ (idHub);\n  q.xz = Rot2Cs (q.xz, aaCs[0]);\n  q.z -= -0.1;\n  d = PrRoundBoxDf (q, vec3 (0.008, 0., 0.1), 0.005);\n  DMINQ (idHandS);\n  q = p;\n  q.y -= 0.07;\n  d = PrCylDf (q.xzy, 0.04, 0.007);\n  DMINQ (idHub);\n  q.xz = Rot2Cs (q.xz, aaCs[1]);\n  q.z -= -0.4;\n  d = PrRoundBoxDf (q, vec3 (0.015, 0., 0.4), 0.005);\n  DMINQ (idHand);\n  q = p;\n  q.y -= 0.09;\n  d = PrCylDf (q.xzy, 0.04, 0.007);\n  DMINQ (idHub);\n  q.xz = Rot2Cs (q.xz, aaCs[2]);\n  q.z -= -0.3;\n  d = PrRoundBoxDf (q, vec3 (0.01, 0., 0.3), 0.005);\n  DMINQ (idHand);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  float d;\n  p.xz = Rot2Cs (p.xz, wRotCs);\n  p.yz = p.zy * vec2 (-1., 1.);\n  q = p;\n  d = max (PrSphDf (q - vec3 (0., -7.35, 0.), 7.5), max (length (q.xz) - 1.05, - q.y));\n  return d;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 BgCol (vec3 rd)\n{\n  vec3 col, skCol;\n  vec2 u;\n  float el, f;\n  skCol = vec3 (0.1, 0.15, 0.6);\n  el = asin (rd.y);\n  rd.xz = Rot2D (rd.xz, 0.01 * tCur);\n  u = vec2 (atan (rd.z, - rd.x) + pi, tan (2. * atan (0.5 * el))) / (2. * pi);\n  f = 64.;\n  col = mix (skCol, vec3 (0.8, 0.8, 0.7), mix (Fbm2 (f * u),\n     Fbm2 (f * (u - vec2 (1., 0.))), u.x));\n  col = mix (col, skCol, smoothstep (0.95, 0.98, abs (el) / (0.5 * pi)));\n  return col;\n}\n\nfloat LabSym (vec2 p)\n{  // (from \"Booze Cruise\")\n  vec2 q;\n  float d, r;\n  r = length (p);\n  d = max (min (0.06 - abs (0.1 - abs (r - 0.8)), p.y), min (0.06 - abs (p.y), 1.1 - abs (p.x)));\n  q = Rot2D (p, 2. * pi * floor (16. * ((r > 0.) ? atan (p.y, - p.x) / (2. * pi) : 0.) + 0.5) / 16.);\n  d = max (d, min (min (0.06 - abs (q.y), 0.2 - abs (q.x + 1.1)), p.y + 0.1));\n  q.x += 1.5;\n  d = max (d, min (0.1 - length (q), p.y + 0.1));\n  return d;\n}\n\nvec3 DialCol (vec2 p)\n{\n  vec3 col, c;\n  vec2 q;\n  float a, f, s;\n  col = vec3 (1.);\n  c = vec3 (0.3);\n  q = p;\n  s = length (q);\n  a = atan (q.x, q.y) / pi;\n  if (abs (fract (6. * a + 0.5) - 0.5) < 0.03 && abs (s - 0.95) < 0.05 ||\n     abs (fract (30. * a + 0.5) - 0.5) < 0.1 && abs (s - 0.97) < 0.03 ||\n     abs (6. * a) < 0.03 && abs (s - 0.92) < 0.08) col = c;\n  col = mix (col, c, SmoothBump (0.98, 1., 0.005, s));\n  q = (p - vec2 (0., -0.5)) / 0.25;\n  s = length (q);\n  a = atan (q.x, q.y) / pi;\n  if (abs (fract (6. * a + 0.5) - 0.5) < 0.03 && abs (s - 0.93) < 0.07 ||\n     abs (6. * a) < 0.03 && abs (s - 0.85) < 0.15) col = c;\n  col = mix (col, c, SmoothBump (0.96, 1., 0.01, s));\n  if (Maxv2 (abs (p - vec2 (0.7, 0.))) < 0.065) {\n    col = vec3 (0.5);\n    if (ShowInt (p - vec2 (0.755, -0.045), 0.3 * vec2 (0.4, 0.3), 2., dateCur.z) != 0.)\n       col = vec3 (0.7, 1., 1.);\n  }\n  s = LabSym (8. * (p - vec2 (0., 0.4)));\n  col = mix (mix (col, vec3 (0., 0., 0.8), smoothstep (-0.05, -0.01, s)),\n     vec3 (1., 1., 0.2), smoothstep (0.01, 0.05, s));\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo;\n  float dstObj, dstTrObj, gRot, sh, rFac, nDotL;\n  wRotCs = CosSin (0.2 * pi * sin (0.1 * pi * tCur));\n  gRot = (dateCur.w + tShift) * 720. / (12. * 3600.);\n  aaCs[0] = CosSin (2. * pi * (floor (60. * gRot) + smoothstep (0.7, 1., fract (60. * gRot))) / 60. - pi);\n  gRot /= 60.;\n  aaCs[1] = CosSin (2. * pi * gRot - pi);\n  gRot /= 12.;\n  aaCs[2] = CosSin (2. * pi * gRot - pi);\n  roo = ro;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    rFac = 0.;\n    if (idObj == idFace) {\n      if (qHit.y > 0.) {\n        col4 = vec4 (DialCol (qHit.xz), 0.);\n      } else {\n        col4 = vec4 (0.7, 0.6, 0.1, 0.2);\n        col4.rgb *= 1. - 0.3 * smoothstep (-0.02, 0., LabSym (8. * qHit.xz));\n        rFac = 0.2;\n      }\n    } else if (idObj == idHandS) {\n      col4 = (tShift == 0.) ? vec4 (0., 1., 0., 0.2) : vec4 (1., 0., 0., 0.2);\n    } else if (idObj == idHand) {\n      col4 = (abs (qHit.x) < 0.007 && qHit.y > 0.) ? vec4 (0.3, 1., 0.3, 0.2) :\n         vec4 (0.3, 0.3, 0.3, 0.);\n    } else if (idObj == idAx) {\n      col4 = vec4 (0.6, 0.6, 0.5, 0.2);\n    } else if (idObj == idHub) {\n      col4 = vec4 (0.3, 0.3, 0.3, 0.);\n    } else if (idObj == idCase) {\n      col4 = vec4 (0.7, 0.6, 0.1, 0.2);\n      rFac = 0.2;\n    } else if (idObj == idWnd) {\n      col4 = vec4 (0.7, 0.6, 0.1, 0.2);\n      if (abs (qHit.z) < 0.08) col4 *= 0.5 +\n         0.5 * smoothstep (0.4, 0.5, fract (16. * (atan (qHit.x, qHit.y) / (2. * pi) + 0.5)));\n      rFac = 0.2;\n    } else if (idObj == idClsp) {\n      col4 = vec4 (0.7, 0.7, 0.3, 0.2);\n      rFac = 0.5;\n    }\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (idObj == idCase || idObj == idClsp || idObj == idWnd) nDotL *= nDotL;\n    sh = ObjSShadow (ro + 0.01 * vn, ltDir);\n    col = col4.rgb * (0.3 + 0.2 * max (dot (vn, ltDir * vec3 (-1., 1., -1.)), 0.) +\n       0.7 * sh * nDotL) + col4.a * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    col = mix (col, 0.8 * BgCol (reflect (rd, vn)), rFac);\n  } else {\n    col = BgCol (rd);\n  }\n  ro = roo;\n  dstTrObj = TrObjRay (ro, rd);\n  if (dstTrObj < min (dstObj, dstFar)) {\n    ro += dstTrObj * rd;\n    vn = TrObjNf (ro);\n    col = mix (col, 0.8 * BgCol (reflect (rd, vn)), 0.03 + 0.9 * pow (1. - abs (dot (vn, rd)), 4.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  el = clamp (el, -0.3 * pi, 0.3 * pi);\n  tShift = (mPtr.z > 0.) ? 0. : 600. * sin (2. * pi * dateCur.w / (24. * 3600.));\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0.2, -8.);\n  zmFac = 5.5;\n  dstFar = 100.;\n  ltDir = normalize (vec3 (0.3, 1.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri)\n{\n  return length (vec2 (length (max (abs (p.xy) - b.xy, 0.)) - b.z, p.z)) - ri;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat DigSeg (vec2 q)\n{\n  q = 1. - smoothstep (vec2 (0.), vec2 (0.04, 0.07), abs (q) - vec2 (0.13, 0.5));\n  return q.x * q.y;\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  vec2 vp, vm, vo;\n  float d;\n  int k, kk;\n  vp = vec2 (0.5, 0.5);\n  vm = vec2 (-0.5, 0.5);\n  vo = vp - vm;\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (Minv2 (q) >= 0. && Maxv2 (q) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log2 (val) / log2 (10.), 0.) + 0.0001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar == mxChar - nDig - 1. && sgn < 0.) s = ShowDig (q, -1);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}