{
    "Shader": {
        "info": {
            "date": "1590882565",
            "description": "I tried something similar here: https://www.shadertoy.com/view/WdXBzf which sorta worked but the physics seemed off. Wyatts shader: https://www.shadertoy.com/view/tsdXWB helped me understand what I was doing wrong. Thanks Wyatt!  Use the speedup if u can!",
            "flags": 32,
            "hasliked": 0,
            "id": "WsjBRG",
            "likes": 43,
            "name": "Springy Structure (Soft Body)",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "simulation",
                "particles",
                "graph",
                "physics"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 1185
        },
        "renderpass": [
            {
                "code": "// Plento\n\n// I got close with this result here: https://www.shadertoy.com/view/WdXBzf\n// but ended up cheating a little from here: https://www.shadertoy.com/view/tsdXWB\n// Thanks Wyatt!\n\n\n// Common: Physics parameters\n// BufA: particles\n// BufB: initial shape\n\n\n// Grab vertices with mouse\n// Works better with the speedup plugin or higher monitor refresh rate\n\n\n// Controls line thickness\n#define lf(x) exp(-x*1.8)\n\n// 0 --> Draw line between next and last vert\n// 1 --> Draw line between all verts\n#define DrawMode 1\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec3 col = vec3(1);\n    vec4 bA = ch(iChannel0, u);\n    \n    for(int i = 0; i < nVerts; i++){\n    \tvec4 s0 = ch(iChannel0, vec2(i, 0.));\n        #if DrawMode == 0\n        vec4 s1 = ch(iChannel0, vec2(i+1, 0.));\n        col -= lf(line(u, s0.xy, s1.xy));\n        #else\n        for(int e = 0; e < nVerts; e++){\n            vec4 s1 = ch(iChannel0, vec2(e, 0.));\n            if(i!=e) col -= lf(line(u, s0.xy, s1.xy)); \n        }\n        #endif\n    }\n    col*=smoothstep(R.x, 0., length(u-R.xy*.5));\n    f = vec4(col, 1.);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\n#define ch(chan, p) texelFetch(chan, ivec2(p), 0)\n\n// Number of vertices to connect to\nconst int nVerts = 12;\n\n// How fast the verts conform to the initial structure (Rigidness, spring factor)\nconst float tol = .004; \n\n// Radius of ball if using ball as shape in Buffer B\n#define rad R.x/5.5 \n\n// Toggle gravity\n#define Gravity\n\nconst float friction = .01;\n\n\nvec2 hash21(float p){\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat line( in vec2 p, in vec2 a, in vec2 b ){\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nconst float pi = 3.14159;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 f, in vec2 u ){\n    ivec2 iu = ivec2(u);\n    \n    // Only deal with the pixels that act as vertices\n    if(iu.x <= nVerts && iu.y == 0){\n        vec4 bA = ch(iChannel0, u); // current vert\n        vec4 bB = ch(iChannel1, u); // current verts initial location\n        \n        // Go through every vert\n        for(int n = 0; n < nVerts; n++){\n            if(n != iu.x){ // Make sure were not looking at ourself\n             \tvec4 s0 = ch(iChannel0, vec2(n, 0.)); // nth vert\n                vec4 s1 = ch(iChannel1, vec2(n, 0.)); // nth \"correct\" initial loc\n                \n                vec2 v0 = bA.xy - s0.xy; // current vert to nth vert\n                vec2 v1 = bB.xy - s1.xy; // cuurent verts initial loc to nth initial loc\n                \n                vec2 nv = normalize(v0); // just direction\n               \n                float d0 = length(v0); // dist from nth vert to current vert\n                float d1 = length(v1); // dist from nth initial loc to current initial loc\n                \n            \tfloat dif = d0-d1; // How far off is actual location to the initial\n            \t\n                if(d0 > 0.)\n                   \tbA.zw -= dif*nv*tol; // add velocity to vert to make up for the distance difference\n            }\n        }\n        \n        #ifdef Gravity\n        bA.w -= .08; // Add gravity\n        #endif\n        bA.zw -= friction*bA.zw; // Add friction\n        bA.xy += bA.zw; // Update location\n        \n        // Grab verts\n        float d = length(iMouse.xy - bA.xy);\n        if(iMouse.z > 0. && d <= 32.){\n            //bA.xy = iMouse.xy;\n            bA.xy = mix(iMouse.xy,bA.xy,exp2(-100.*iTimeDelta)); // from spalmer\n            bA.zw = vec2(0);  \n        }\n        \n        // Get initial positions\n        if(iFrame < 4){\n        \tbA.xy = ch(iChannel1, u).xy; \n            bA.zw = vec2(0);\n        }\n     \t\n        // Boundaries\n        if(bA.y < 0.){\n            bA.y += abs(bA.y);\n            bA.w *= -1.;\n            bA.zw -= .2*bA.zw;\n        }\n        else if(bA.y > R.y){\n            float dd = abs(bA.y-R.y);\n            bA.y -= dd;\n            bA.w *= -1.;\n            bA.zw -= .2*bA.zw;\n        }\n        else if(bA.x < 0.){\n            bA.x += abs(bA.x);\n            bA.z *= -1.;\n            bA.zw -= .2*bA.zw;\n        }\n        else if(bA.x > R.x){\n            float dd = abs(bA.x-R.x);\n            bA.x -= dd;\n            bA.z *= -1.;\n            bA.zw -= .2*bA.zw;\n        }\n        f = bA;\n    }\n    else return;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Choose a initial shape\n// Restart shader\n\n#define ball\n//#define random\n//#define spiral\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    ivec2 iu = ivec2(u);\n    float id = float(iu.x);\n    // Only set positions for number of verts\n    if(iu.x <= nVerts && iu.y == 0){\n        vec4 bB = ch(iChannel0, u);\n         \n        if(iFrame == 0){\n            #ifdef ball\n            float a = 2.*pi/float(nVerts);\n            bB.xy = rad*vec2(cos(a*id),sin(a*id)) + R.xy*.5;\n            #endif\n            \n            #ifdef random\n            bB.xy = hash21(iDate.w+float(iu.x)*482.43)*R*.65 + R.xy*.15;\n            #endif\n            \n            #ifdef spiral\n            float a = (2.*pi/float(nVerts)) * 3.;\n            float r = mix(10., 300., id/float(nVerts));\n            bB.xy = R.xy*.5 + r*vec2(cos(a*id),sin(a*id));\n            #endif\n            \n            bB.zw = vec2(0);\n        }\n     \t\n        f = vec4(bB.xy, 0., 0.);\n    }\n    else\n        return;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}