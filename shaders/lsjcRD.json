{
    "Shader": {
        "info": {
            "date": "1491249692",
            "description": "Here we have a simple music visualizer made using HSV2RGB functions.",
            "flags": 96,
            "hasliked": 0,
            "id": "lsjcRD",
            "likes": 12,
            "name": "Music Visualizer",
            "published": 3,
            "tags": [
                "music",
                "audio",
                "hsv"
            ],
            "usePreview": 0,
            "username": "hopskotchrainbow",
            "viewed": 988
        },
        "renderpass": [
            {
                "code": "void blend(inout vec4 fragColor, in vec4 color) {\n    vec3 rgb = mix(fragColor.rgb, color.rgb, color.a);\n    float a = max(fragColor.a, color.a);\n    fragColor = vec4(rgb, a);\n}\nvoid blend(inout vec4 fragColor, in vec2 fragCoord, in sampler2D channel) {\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    blend(fragColor, texture(channel, uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(vec3(0.0),1.0);\n    blend(fragColor, fragCoord, iChannel0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float zm(vec2 uv) {\n    float nz=1.0-uv.y-0.5-texture(iChannel0, vec2(uv.x,0.75)).r;\n    nz = (abs(nz)-0.5)/0.01;\n    return clamp(2.0-abs(nz), 0.0, 1.0);\n}\n\nconst float eps = 0.0000001;\n\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 rgb2hsv( in vec3 c)\n{\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d+eps)), d / (q.x+eps), q.x);\n}\n\nvec3 rgb2hsl( vec3 col )\n{\n    float minc = min( col.r, min(col.g, col.b) );\n    float maxc = max( col.r, max(col.g, col.b) );\n    vec3  mask = step(col.grr,col.rgb) * step(col.bbg,col.rgb);\n    vec3 h = mask * (vec3(0.0,2.0,4.0) + (col.gbr-col.brg)/(maxc-minc + eps)) / 6.0;\n    return vec3( fract( 1.0 + h.x + h.y + h.z ),              // H\n                 (maxc-minc)/(1.0-abs(minc+maxc-1.0) + eps),  // S\n                 (minc+maxc)*0.5 );                           // L\n}\n\nvec3 rgb2hcv(in vec3 RGB)\n{\n    // Based on work by Sam Hocevar and Emil Persson\n    vec4 P = mix(vec4(RGB.bg, -1.0, 2.0/3.0), vec4(RGB.gb, 0.0, -1.0/3.0), step(RGB.b, RGB.g));\n    vec4 Q = mix(vec4(P.xyw, RGB.r), vec4(RGB.r, P.yzx), step(P.x, RGB.r));\n    float C = Q.x - min(Q.w, Q.y);\n    float H = abs((Q.w - Q.y) / (6. * C + eps) + Q.z);\n    return vec3(H, C, Q.x);\n}\n\nvec3 rgb2hsl2(in vec3 RGB)\n{\n    vec3 HCV = rgb2hcv(RGB);\n    float L = HCV.z - HCV.y * 0.5;\n    float S = HCV.y / (1. - abs(L * 2. - 1.) + eps);\n    return vec3(HCV.x, S, L);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv-=0.5;\n    uv = uv*1.01+0.5;\n    float zmh = zm(fragCoord.xy/iResolution.xy);\n    vec3 color = vec3(zmh);\n    vec2 xv = dFdx(uv);\n    vec2 yv = dFdy(uv);\n    vec4 c2 = textureGrad(iChannel1, uv, xv, yv);\n    vec3 hsl = rgb2hsl(c2.rgb);\n    hsl.r = fract(hsl.r+0.1);\n    hsl.g = min(hsl.g+0.02,1.0);\n    if (uv.x < 0.0 || uv.y < 0.0 || uv.y > 1.0 || uv.x > 1.0) {\n        hsl = vec3(0.0);\n    }\n    color.rgb = mix(hsl2rgb(hsl)*0.99,color.rgb,zmh);\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 7866,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/glaze/rainbow-factory"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}