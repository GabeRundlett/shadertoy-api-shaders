{
    "Shader": {
        "info": {
            "date": "1718815107",
            "description": "Mouse can contol position. Previous 2 locations also shown.  Keys 1 and 2 change algorithms in Buffer A.\nError bars shown. Update rate is set at 20/sec if frame rate is faster.\nReminiscent of Machine Control problems.\n\n",
            "flags": 48,
            "hasliked": 0,
            "id": "lXcSz7",
            "likes": 0,
            "name": "Chase test bed",
            "published": 3,
            "tags": [
                "mouse",
                "keyboard",
                "buffer"
            ],
            "usePreview": 0,
            "username": "dray",
            "viewed": 86
        },
        "renderpass": [
            {
                "code": "// inspired by https://www.shadertoy.com/view/43G3zt\n// My first use of buffer variables, mouse & keyboard; My billionth use of defines. :-)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 i = iResolution.xy;\n    \n    #define Get(NAME,LOC) float NAME = texelFetch(iChannel0, LOC, 0).x;\n    VARS(Get)\n\n#define PT(X,Y)  ( distance(fragCoord,vec2(X,Y)) < 3. ? 1. : 0. )\n\n    float follow = PT(FOLX,FOLY);\n    vec3 fol;\n    if ( WHICH == 0. )\n        fol = vec3( follow, follow, 0. );\n    else\n        fol = vec3( follow, 0., follow );\n\n    vec3 col =\n        vec3( PT(POSX,POSY), PT(P_POSX,P_POSY)*.7, PT(P_P_POSX,P_P_POSY)*.7 ) +\n        fol;\n    \n    vec2 cent = fragCoord - i/2.;\n    float err = (FOLY-POSY);\n    if ( fragCoord.x < 4. ) \n      if ( ( err >= 0. && cent.y >= 0. && cent.y < err ) || ( err <= 0. && cent.y <= 0. && cent.y > err )  )\n        col = vec3(1.);\n    err = (FOLX-POSX);\n    if ( fragCoord.y < 4. ) \n      if ( ( err >= 0. && cent.x >= 0. && cent.x < err ) || ( err <= 0. && cent.x <= 0. && cent.x > err )  )\n        col = vec3(1.);\n\n    fragColor = vec4( col, 1.0 );\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define UPD_RATE 20. // update frame rate\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n\n    #define Get(NAME,LOC) float NAME = texelFetch(iChannel0, LOC, 0).x;\n    VARS(Get)\n    \n    float frmr = UPD_RATE; \n    \n    if ( int(iTime*frmr) != int(P_TIME*frmr) && fragCoord.y < 10. )\n    {\n    \n        P_TIME = iTime;\n   \n        P_P_POSX = P_POSX;\n        P_POSX = POSX;\n        P_P_POSY = P_POSY;\n        P_POSY = POSY;\n\n        POSX = res.x * .4 * clamp( sin(iTime*2.)*2., -1., 1. ) + res.x/2.;\n        POSY = res.y * .4 * clamp( cos(iTime*3./2.), -1., 1. ) + res.y/2.;\n\n        if ( iMouse.z > 0. )\n        {\n            POSX = iMouse.x;\n            POSY = iMouse.y;\n        }\n\n#define K(KEY,VAL) if ( texelFetch(iChannel1,ivec2(KEY,0),0).x > 0. ) WHICH = VAL;\n        K(0x31,0.)\n        K(0x32,1.)\n        K(0x33,2.)\n\n        if ( WHICH == 0. )\n        {\n            FOLX += (POSX - FOLX) * .1;\n            FOLY += (POSY - FOLY) * .1;\n        }\n        else if ( WHICH == 1. )\n        {\n            float err = POSX - FOLX;\n            float spd = 10.;\n            FOLX += clamp( err, -spd, spd );\n            err = POSY - FOLY;\n            FOLY += clamp( err, -spd, spd );\n        }\n\n    }\n    \n    ivec2 C = ivec2(fragCoord);\n    fragColor = texelFetch(iChannel0,C,0);\n    #define Put(NAME,LOC) if ( C == LOC ) { fragColor = vec4(NAME,0.,0.,0.); }\n    VARS(Put)\n      \n    if ( iFrame < 2 ) fragColor=vec4(0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Work 2x harder to do sqrt(2) the work (macrobatics):\n#define VARS(X) \\\nX( POSX,     ivec2(0,0) ) \\\nX( POSY,     ivec2(1,0) ) \\\nX( P_POSX,   ivec2(2,0) ) \\\nX( P_POSY,   ivec2(3,0) ) \\\nX( P_P_POSX, ivec2(4,0) ) \\\nX( P_P_POSY, ivec2(5,0) ) \\\nX( FOLX,     ivec2(6,0) ) \\\nX( FOLY,     ivec2(7,0) ) \\\nX( P_TIME,   ivec2(8,0) ) \\\nX( WHICH,    ivec2(9,0) ) \\\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}