{
    "Shader": {
        "info": {
            "date": "1611416738",
            "description": "This is an example of an antialiasing that use only one sample per frame",
            "flags": 32,
            "hasliked": 0,
            "id": "wtGcz3",
            "likes": 3,
            "name": "1-Sample antialiasing?",
            "published": 3,
            "tags": [
                "fast",
                "antialiasing",
                "sample"
            ],
            "usePreview": 0,
            "username": "Ric3cir121",
            "viewed": 354
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 o,vec2 u){\n    o = texelFetch(iChannel0,ivec2(u),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 rotate(float p){return mat2(cos(p),sin(p),-sin(p),cos(p));}\nvec3 rotate(vec3 c,float p){return vec3(c.xz*rotate(p),c.y).xzy;}\n\nfloat de(vec3 c){\n    return min(c.y+1.,length(c)-.2);\n}\nvec3 getmarch(vec3 pos,vec3 cam){\n    float d = 1.;\n    vec3 march = pos;\n    \n    for(int i = 0;i< 100;i++){\n        d = de(march);\n        march += d*cam;\n        if(d<0.01||length(cam)>100.)break;\n    }\n    return march;\n}\nvec3 getcolor(vec3 pos){\n    return de(pos)<1.?texture(iChannel1,pos.xz).xyz:vec3(.1,.5,.9);\n}\n#define hash11(iTime) fract(sin(iTime)*100.)\n#define _pos(iTime) vec3(sin((iTime)/2.),abs(sin(iTime))/2.,-1)\n#define _look(iTime) vec2(sin(iTime)/2.,0)\nvec3 image(out vec4 o,vec2 u){\n    vec2 uv = ((u+hash11(iTime))*2.-iResolution.xy)/iResolution.y;\n    vec2 look = _look(iTime);\n    vec3 pos = _pos(iTime);\n    vec3 cam = rotate(rotate(normalize(vec3(uv,1)).yxz,look.y).yxz,look.x);\n    vec3 march = getmarch(pos,cam);\n    \n    o.xyz = getcolor(march);\n    \n    return march;\n}\nvoid mainImage(out vec4 o,vec2 u){\n    vec3 pos = _pos(iTime-iTimeDelta);\n    vec2 look = _look(iTime-iTimeDelta);\n\n    vec4 col;\n    vec3 new = image(col,u);\n    \n    vec3 rot = rotate(rotate(normalize(new-pos),-look.y),-look.x);\n    vec2 R = iResolution.xy;\n    vec2 read = (rot.xy/normalize(rot).z*R.yy-hash11(iTime-iTimeDelta)*2.)/R/2.+.5;\n    vec4 tex = clamp(read,0.,1.)==read?texture(iChannel0,read):vec4(0,0,0,-10000);\n    o.xyz = mix(col.xyz,clamp(tex.xyz,0.,1.),1.-abs(tex.w-length(new))<.0?.0:.98);\n    o.w = length(new);\n    if(iMouse.z>0.)o.xyz = vec3(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}