{
    "Shader": {
        "info": {
            "date": "1714334101",
            "description": "cry about it\nFeel free to adjust the quality and other settiings to your liking\nMade w/ ChatGPT + manual additional tweaking\n\nP.S. This shader might be laggy/delayed, since it was only tested in my rig.",
            "flags": 2,
            "hasliked": 0,
            "id": "McdSzl",
            "likes": 3,
            "name": "shaite.jpeg",
            "published": 3,
            "tags": [
                "postprocessing",
                "glitch",
                "compression",
                "dct",
                "jpeg",
                "chatgpt"
            ],
            "usePreview": 1,
            "username": "adrilyphia",
            "viewed": 501
        },
        "renderpass": [
            {
                "code": "vec3 toYCbCr(in vec3 rgb) {\n    return vec3(0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b,\n    -0.1687 * rgb.r - 0.3313 * rgb.g + 0.5 * rgb.b,\n    0.5 * rgb.r - 0.4187 * rgb.g - 0.0813 * rgb.b);\n}\n\nvec3 toRGB(in vec3 ycbcr) {\n    return vec3(ycbcr.x + 1.402 * ycbcr.z,\n    ycbcr.x - 0.344136 * ycbcr.y - 0.714136 * ycbcr.z,\n    ycbcr.x + 1.772 * ycbcr.y);\n}\n\nfloat dct(float u, float v, float x, float y) {\n    const float PI = asin(1.) * 2.;\n    const float S1D2 = sqrt(.5);\n    float HFRQ = 1.;\n    float VFRQ = 1.;\n    return ((u == 0.) ? S1D2 : HFRQ) * ((v == 0.) ? S1D2 : VFRQ) * cos((2. * x + 1.) * u * PI / 16.) * cos((2. * y + 1.) * v * PI / 16.);\n}\n\nvoid mainImage(out vec4 O, in vec2 I) {\n    float Q = 4.;\n    int BS = 8; // multiples of 8 work better and much neater\n    int GS = BS;\n    const int COLOR_SPACE = 1;\n    \n    ivec2 blockCoord = ivec2(I) / BS;\n    vec3 block[64];\n    for (int i = 0; i < 64; ++i) {\n        int x = i % 8, y = i / 8;\n            block[i] = texture(iChannel0, (vec2(blockCoord * BS + ivec2(x*(BS/8), y*(BS/8))))/ iResolution.xy).rgb;\n    }\n\n    vec3 DCTBlock[64];\n    for (int u = 0; u < 8; ++u) {\n        for (int v = 0; v < 8; ++v) {\n            vec3 sum = vec3(0.);\n            for (int i = 0; i < 64; ++i) {\n                int x = i % 8, y = i / 8;\n                sum += block[i] * dct(float(u), float(v), float(x), float(y));\n            }\n            \n            DCTBlock[u + v * 8] = sum / 4.;\n            if (COLOR_SPACE == 1) {\n                vec3 ycbcr = toYCbCr(DCTBlock[u + v * 8]);\n                DCTBlock[u + v * 8] = toRGB(vec3(round(ycbcr.r * Q), round(ycbcr.g * Q), round(ycbcr.b * Q)));\n            } else {\n                DCTBlock[u + v * 8] = vec3(round(DCTBlock[u + v * 8].r * Q), round(DCTBlock[u + v * 8].g * Q), round(DCTBlock[u + v * 8].b * Q));\n            }\n        }\n    }\n\n    int index = int(mod(I.x, float(BS))) + int(mod(I.y, float(BS))) * BS;\n    int posX = index % BS, posY = index / BS;\n\n    vec3 r = vec3(0.);\n    for (int i = 0; i < 64; ++i) {\n        int ux = i % 8, vy = i / 8;\n        r += DCTBlock[ux + vy * 8] * dct(float(ux)*(8.0/float(GS)), float(vy)*(8.0/float(GS)), float(posX), float(posY));\n    }\n\n    O = vec4(r / (Q * 4.), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}