{
    "Shader": {
        "info": {
            "date": "1383614599",
            "description": "Boolean logic extended to continuous functions. There are 16 possible operations, AND, OR, XOR, NOR, and NAND are the best-known ones but they are just four of the 16.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xdj3Rh",
            "likes": 50,
            "name": "Binary gates (continious logic)",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "boolean",
                "gate",
                "logic",
                "booleans",
                "gates"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3233
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n\n ---------------------------------------------------------------------------------\n|Idx | Logic Op  | Continuous  | Photoshop |   CSG     | SDF                      |\n|---------------------------------------------------------------------------------|\n|0000| RESET     | 0           | Black     | Empty     | inf                      |\n|0001| A AND B   | a*b         | Multiply  | Intersect | max(a,b)                 |\n|0010| A AND !B  | a-a*b       |           | A Minus B | max(a,-b)                |\n|0011| A         | a           | A         | A         | a                        |\n|0100| !A AND B  | b-a*b       |           | B Minus A | max(-a,b)                |\n|0101| B         | b           | B         | B         | b                        |\n|0110| A XOR B   | a+b-2*a*b   | Exclusion | XOR       | max(min(a,b),min(-a,-b)) |\n|0111| A OR B    | a+b-a*b     | Screen    | Union     | min(a,b)                 |\n|1000| A NOR B   | 1-a-b+a*b   |           |           | -min(a,b)                |\n|1001| A XNOR B  | 1-b-a+2*a*b |           |           | min(max(a,b),max(-a,-b)) |\n|1010| !B        | 1-b         |           | Negate B  | -b                       |\n|1011| !A NAND B | 1-b+a*b     |           |           | min(a,-b)                |\n|1100| !A        | 1-a         |           | Negate A  | -a                       |\n|1101| A NAND !B | 1-a+a*b     |           |           | min(-a,b)                |\n|1110| A NAND B  | 1-a*b       |           |           | -max(a,b)                |\n|1111| SET       | 1           | White     | Full      | -inf                     |\n ---------------------------------------------------------------------------------\n \nFor the SDF, many representations are possible, since max(a,b) = -min(-a,-b)\n \n*/\n        \n// In electronics/logic, there are 16 possible gates that\n// you can build with one output and two inputs. Some of\n// them have proper names, such as AND, OR, XOR, NAND or\n// NOR (gates 1, 7, 6, 15 and 8 respectivelly), but others\n// don't. These shader implements the 16 of them and on top\n// of that it makes them continuous instead of digital.\n\n// Some of them have also proper names in image manipulation\n// software, such as \"screen\" (which is a gate OR),\n// \"multiply\" (which is gate AND) or \"exclusion\" (which is\n// gate XOR).\n\n// The behavior of the gates also matches that of the 16\n// posible bilinear interpolations of binary values in the\n// corners of a quad.\n\nfloat bilin( float u, float v, float a, float c, float b, float d )\n{\n    return mix( mix(a,b,u),\n\t\t\t    mix(c,d,u), v );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tfloat c = 0.0;\n\t\n\tfloat r = floor(uv.y*4.0 )*4.0 + floor(uv.x*4.0 );\n\t\n\tfloat a = fract(uv.x*4.0);\n\tfloat b = fract(uv.y*4.0);\n#if 1\n                      /* 0011 = A         */\n                      /* 0101 = B         */\n                      /* ----   --------- */\n         if( r< 0.5 ) /* 0000 = RESET     */ c = 0.0;\n\telse if( r< 1.5 ) /* 0001 = A AND B   */ c = a*b;\n\telse if( r< 2.5 ) /* 0010 = A AND !B  */ c = a - a*b;\n\telse if( r< 3.5 ) /* 0011 = A         */ c = a;\n\telse if( r< 4.5 ) /* 0100 = !A AND B  */ c = b - a*b;\n\telse if( r< 5.5 ) /* 0101 = B         */ c = b;\n\telse if( r< 6.5 ) /* 0110 = A XOR B   */ c = a + b - 2.0*a*b;\n\telse if( r< 7.5 ) /* 0111 = A OR B    */ c = a + b - a*b;\n\telse if( r< 8.5 ) /* 1000 = A NOR B   */ c = 1.0 - a - b + a*b;\n\telse if( r< 9.5 ) /* 1001 = A XNOR B  */ c = 1.0 - b - a + 2.0*a*b;\n\telse if( r<10.5 ) /* 1010 = !B        */ c = 1.0 - b;\n\telse if( r<11.5 ) /* 1011 = !A NAND B */ c = 1.0 - b + a*b;\n\telse if( r<12.5 ) /* 1100 = !A        */ c = 1.0 - a;\n\telse if( r<13.5 ) /* 1101 = A NAND !B */ c = 1.0 - a + a*b;\n\telse if( r<14.5 ) /* 1110 = A NAND B  */ c = 1.0 - a*b;\n\telse if( r<15.5 ) /* 1111 = SET       */ c = 1.0;\n#else\n                      /* 0011 = A         */\n                      /* 0101 = B         */\n                      /* ----   --------- */\n         if( r< 0.5 ) /* 0000 = RESET     */ c = bilin( a, b, 0.,0.,0.,0. );\n\telse if( r< 1.5 ) /* 0001 = A AND B   */ c = bilin( a, b, 0.,0.,0.,1. );\n\telse if( r< 2.5 ) /* 0010 = A AND !B  */ c = bilin( a, b, 0.,0.,1.,0. );\n\telse if( r< 3.5 ) /* 0011 = A         */ c = bilin( a, b, 0.,0.,1.,1. );\n\telse if( r< 4.5 ) /* 0100 = !A AND B  */ c = bilin( a, b, 0.,1.,0.,0. );\n\telse if( r< 5.5 ) /* 0101 = B         */ c = bilin( a, b, 0.,1.,0.,1. );\n\telse if( r< 6.5 ) /* 0110 = A XOR B   */ c = bilin( a, b, 0.,1.,1.,0. );\n\telse if( r< 7.5 ) /* 0111 = A OR B    */ c = bilin( a, b, 0.,1.,1.,1. );\n\telse if( r< 8.5 ) /* 1000 = A NOR B   */ c = bilin( a, b, 1.,0.,0.,0. );\n\telse if( r< 9.5 ) /* 1001 = A XNOR B  */ c = bilin( a, b, 1.,0.,0.,1. );\n\telse if( r<10.5 ) /* 1010 = !B        */ c = bilin( a, b, 1.,0.,1.,0. );\n\telse if( r<11.5 ) /* 1011 = !A NAND B */ c = bilin( a, b, 1.,0.,1.,1. );\n\telse if( r<12.5 ) /* 1100 = !A        */ c = bilin( a, b, 1.,1.,0.,0. );\n\telse if( r<13.5 ) /* 1101 = A NAND !B */ c = bilin( a, b, 1.,1.,0.,1. );\n\telse if( r<14.5 ) /* 1110 = A NAND B  */ c = bilin( a, b, 1.,1.,1.,0. );\n\telse if( r<15.5 ) /* 1111 = SET       */ c = bilin( a, b, 1.,1.,1.,1. );\n#endif\t\t\n\t\t\n\tvec3 col = vec3(c);\n\t\t\n\tcol = mix( col, vec3(0.9,0.5,0.3), smoothstep( 0.490, 0.495, abs(a-0.5) ) );\n\tcol = mix( col, vec3(0.9,0.5,0.3), smoothstep( 0.485, 0.490, abs(b-0.5) ) );\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}