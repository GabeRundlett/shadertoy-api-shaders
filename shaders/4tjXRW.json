{
    "Shader": {
        "info": {
            "date": "1441989767",
            "description": "Random radial symmetry thing",
            "flags": 0,
            "hasliked": 0,
            "id": "4tjXRW",
            "likes": 3,
            "name": "Ribbon thing",
            "published": 3,
            "tags": [
                "radial",
                "symmetry"
            ],
            "usePreview": 0,
            "username": "lycium",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "vec3 ribbonthing(vec2 p)\n{\n\tfloat radius = length(p);\n\tfloat angle  = atan(p.y, p.x);\n\n\tfloat lobe_scale = sin(angle * 4.0) * 0.5 + 1.0;\n\n\tfloat lobes = 7.0;\n\tfloat a_k  = angle * lobes;\n\tfloat k    = sin(a_k + iTime) * lobe_scale * 0.1 + 0.2;\n\tfloat dkda = cos(a_k + iTime) * lobe_scale * 0.1 * lobes;\n\n    float s0 = 1.0 + dkda * dkda;\n\tfloat s  = s0 * s0 * s0;\n    float t0 = 0.01  * s;\n    float t1 = 0.007 * s;\n\n    vec3 f  = vec3(0.6,  0.9,   0.4);\n    vec3 b0 = vec3(0.7,  0.035, 0.3) * 1.1;\n    vec3 b1 = vec3(0.65, 0.05, 0.01) * 1.8;\n    vec3 b  = b0 * (1.0 - p.y) + b1 * p.y;\n    \n    float falloff = -1024.0;\n    float d = (radius - k) / (radius + 0.25);\n    float g = exp(d * d * falloff) * 0.5 + 1.0;\n    \n    return\t (radius > k - t0 && radius < k + t0) ?\n\t\t\t((radius > k - t1 && radius < k + t1) ? f * g : vec3(0.0)) : b * g;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat aspect = iResolution.y / iResolution.x;\n\tvec2 pixel_scale = vec2(1.0 / iResolution.x, aspect / iResolution.y) * 1.35;\n\n   \tvec3 s = vec3(0.0);\n    const float samples = 21.0;\n    const float norm = 1.0 / samples;\n\tfor (float z = 0.0; z < samples; z += 1.0)\n    {\n\t\tfloat a = z * norm * 13.0 * 6.283185307179586476925286766559;\n        float r = sqrt(z * norm) * 1.125;\n        vec2 aa = vec2(cos(a), sin(a)) * r;\n\n\t\ts += ribbonthing((fragCoord - iResolution.xy * 0.5 + aa) * pixel_scale);\n    }\n    s *= norm;\n\n    float r = pow(s.r, 1.0 / 2.2);\n\tfloat g = pow(s.g, 1.0 / 2.2);\n\tfloat b = pow(s.b, 1.0 / 2.2);\n    fragColor = vec4(r, g, b, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}