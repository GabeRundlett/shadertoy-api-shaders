{
    "Shader": {
        "info": {
            "date": "1523174012",
            "description": "unstead of marching a ray i am marching circles, used to make a really trippy truchet shader.\nadded controls for movement, wasd and qe to move, tfgh and ry to turn.",
            "flags": 48,
            "hasliked": 0,
            "id": "XdKcDG",
            "likes": 5,
            "name": "circlemarching truchet",
            "published": 3,
            "tags": [
                "circlemarching"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 585
        },
        "renderpass": [
            {
                "code": "#define rot90(a) vec2(-(a.y),a.x)\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n#define dot2(p) dot(p,p)\n\n#define RAY_STEPS 1000\n#define RAY_MAX_DIST 100.0\n\n/**\n//experiments\nfloat map(vec3 p) {\n    \n    p -= floor(p);\n    p = abs(p-0.5);\n    \n    \n    \n    \n    \n    \n    \n    vec3 p2 = max(p,p.yzx);\n    return mix(length(p)-0.2,min(min(p2.x,p2.y),p2.z)-0.02,sin(iTime)*0.5+0.5);\n}\n/**/\n\n/**/\n//cubic truchets\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n//hash function by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat torus(vec3 p, vec2 r) {//creates 4 toruses\n    return length(vec2(abs(abs(length(p.xy)-r.x)-0.02),abs(p.z)-0.02))-r.y;\n}\n\nfloat map(vec3 p) {\n    p += iTime*0.1;\n    vec3 p2 = mod(p,2.0)-1.0;\n    vec3 floorpos = floor(p*0.5);\n    float len = 1e10;\n    \n    //the truchet flipping\n    vec3 flipping = floor(hash33(floorpos)+0.5)*2.0-1.0;\n    \n    //actually flipping the truchet\n    vec3 p3 = p2*flipping;\n    \n    //positions relative to truchet centers\n    mat3 truchet = mat3(\n        vec3(+p3.yz+vec2(-1.0, 1.0),p3.x),\n        vec3(+p3.zx+vec2(-1.0, 1.0),p3.y),\n        vec3(+p3.yx+vec2( 1.0,-1.0),p3.z)\n    );\n    \n    //finding distance to truchet\n    len = min(min(\n        torus(truchet[0],vec2(1.0,0.01)),\n        torus(truchet[1],vec2(1.0,0.01))),\n        torus(truchet[2],vec2(1.0,0.01)));\n    \n    return len;\n}\n/**/\n\n/**\n//grid\nfloat grid(vec3 p) {\n    p += sin(iTime*0.2);\n    p = 0.5-abs(fract(p+0.5)-0.5);\n    p = min(p,p.yzx);\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat box(vec3 p, vec3 s) {\n    \n    return length(max(abs(p)-s,0.0));\n}\n\nfloat map(vec3 p) {\n    //p = mod(p,2.0)-1.0;\n    \n    return grid(p)-0.1;\n}\n/**/\n\n/**\n//menger sponge\nfloat map(vec3 p)\n{\n    p = mod(p+iTime*0.01,6.0)-3.0;\n    float len = 0.0;\n    for (float i = 1.0; i > 0.02; i/=3.0) {\n        vec3 p2 = abs(mod(p/i,3.0)-1.5);\n        \n        p2 = max(p2,p2.yzx);\n        len = max(len,(min(min(p2.x,p2.y),p2.z)-1.0)*i);\n    }\n    vec3 p2 = abs(p);\n    \n    return max(len,max(max(p2.x,p2.y),p2.z)-1.5);\n}\n/**/\n\n//normal calculation\nvec3 findnormal(vec3 p, float len) {\n    const vec2 eps = vec2(0.001,0.0);\n    \n    return normalize(vec3(\n        len-map(p-eps.xyy),\n        len-map(p-eps.yxy),\n        len-map(p-eps.yyx)));\n}\n\nvec4 shade(vec3 ro, vec3 rd, float len) {\n    vec4 fragColor = vec4(1);\n    vec3 normal = findnormal(ro, len);\n    \n    float ambient = 0.1;\n\n    vec3 color = vec3(0.8,0.4,0.1);\n    //color = fract(ro);\n    vec3 light = normalize(vec3(cos(iTime*0.2),-1,sin(iTime*0.2)));\n    float diffusion = dot(-light,normal)*2.0;\n\n    float lighting = clamp(diffusion,ambient,1.0);\n\n    fragColor.xyz = min(color*lighting,1.0);\n    return sqrt(fragColor);\n}\n\nvec4 memory(int i) {\n    return texelFetch(iChannel0,ivec2(i,0),0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    vec2 uv =  (fragCoord.xy*2.0-iResolution.xy  ) / iResolution.y;\n    vec4 muv = (abs(iMouse) *2.0-iResolution.xyxy) / iResolution.y;\n    \n    vec3 pos = memory(3).xyz;\n    \n    mat3 rotation = mat3(\n        memory(0).xyz,\n        memory(1).xyz,\n        memory(2).xyz);\n    \n    vec3 dir = normalize(vec3(uv,1))*transpose(rotation);\n    \n    vec3 point1 = pos;\n    vec3 point2 = pos+dir*0.01;\n    point1 /= dot2(point1);\n    point2 /= dot2(point2);\n    mat3 rotmat = mat3(normalize(point1),normalize(cross(point1,point2)),vec3(0));\n    rotmat[2] = normalize(cross(rotmat[0],rotmat[1]));\n    \n    vec2 pos1 = vec2(dot(rotmat[0],point1),dot(rotmat[2],point1))*0.5;\n    vec2 pos2 = vec2(dot(rotmat[0],point2),dot(rotmat[2],point2))*0.5;\n    vec2 dir1 = rot90(normalize(pos1));\n    vec2 dir2 = rot90(normalize(pos2));\n    \n    float len2 = (dot(pos2-pos1, rot90(dir1))/dot(rot90(dir2),dir1));\n    \n    vec2 point3 = pos2+dir2*len2;\n    float rayrad = length(point3);\n    \n    vec2 ro = vec2(dot(rotmat[0],point1),dot(rotmat[2],point1));\n    \n    float flip = sign(dot(rot90((point3-ro)),pos1-pos2));\n    float dist = 0.0;\n    float len;\n    for (int i = 0; i < RAY_STEPS; i++) {\n        \n        len = map(ro.x*rotmat[0]+ro.y*rotmat[2]);\n        \n        if (len < 0.001 || dist > RAY_MAX_DIST || (i>0&&len*len > dot2(ro.x*rotmat[0]+ro.y*rotmat[2])))\n            break;\n        dist += len;\n        \n        mat2 rot = mat2(normalize(point3-ro),vec2(0));\n        \n        rot[1] = rot90(rot[0]);\n        //rot[1] *= flip;\n        \n        vec2 xy = vec2(len*len*0.5/rayrad,0);\n        xy.y = sqrt(len*len-xy.x*xy.x);\n        xy *= transpose(rot);\n        \n        ro += xy;\n    }\n    if (len > 0.01) {\n        fragColor = vec4(sin(dir*10.0*rotmat+dir*6.0+iTime)*0.15+0.15,1);\n        return;\n    }\n    pos = ro.x*rotmat[0]+ro.y*rotmat[2];\n    fragColor = shade(pos,dir,len);\n    \n    //fragColor += vec4(1,1,0,1)*dot(iuv,iuv)/100.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// makes move speed slower in the middle\n#define VARIABLE_MOVE_SPEED\n\n#define ROT_SPEED 1.0\n#define dot2(p) dot(p,p)\n\n#define KEY_Q 81\n#define KEY_W 87\n#define KEY_E 69\n#define KEY_R 82\n#define KEY_T 84\n#define KEY_Y 89\n#define KEY_U 85\n#define KEY_I 73\n#define KEY_O 79\n#define KEY_P 80\n#define KEY_A 65\n#define KEY_S 83\n#define KEY_D 68\n#define KEY_F 70\n#define KEY_G 71\n#define KEY_H 72\n#define KEY_J 74\n#define KEY_K 75\n#define KEY_L 76\n#define KEY_OO 192\n\n#define PLUS_X keys(KEY_D)\n#define PLUS_Y keys(KEY_E)\n#define PLUS_Z keys(KEY_W)\n\n#define MINUS_X keys(KEY_A)\n#define MINUS_Y keys(KEY_Q)\n#define MINUS_Z keys(KEY_S)\n\n#define ROT_PLUS_0 keys(KEY_G)\n#define ROT_PLUS_1 keys(KEY_F)\n#define ROT_PLUS_2 keys(KEY_R)\n\n#define ROT_MINUS_0 keys(KEY_T)\n#define ROT_MINUS_1 keys(KEY_H)\n#define ROT_MINUS_2 keys(KEY_Y)\n\nfloat keys(int i) {\n    return texelFetch(iChannel1,ivec2(i,0),0).x;\n}\n\nvec4 memory(int i) {\n    return texelFetch(iChannel0,ivec2(i,0),0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n    \n    #ifdef VARIABLE_MOVE_SPEED\n    float MOVE_SPEED = clamp(dot2(memory(3).xyz),0.01,10.0);\n    #else\n    float MOVE_SPEED = 0.2;\n    #endif\n    \n    if (int(fragCoord.y) == 0) {\n        int index = int(fragCoord.x);\n        if (index < 3) {\n            if (iFrame == 0) {\n                fragColor = vec4(index==0,index==1,index==2,0);\n                return;\n            }\n            \n            vec3 rot = vec3(\n                ROT_PLUS_0-ROT_MINUS_0,\n            \tROT_PLUS_1-ROT_MINUS_1,\n            \tROT_PLUS_2-ROT_MINUS_2)\n                *iTimeDelta*ROT_SPEED;\n            mat3 rotation = mat3(\n                memory(0).xyz,\n                memory(1).xyz,\n                memory(2).xyz);\n            \n            mat3 newrotation = rotation;\n            \n            newrotation[0] = (rotation[0]*cos(rot.z)+rotation[1]*sin(rot.z));\n            newrotation[1] = (rotation[1]*cos(rot.z)-rotation[0]*sin(rot.z));\n            \n            rotation = newrotation;\n            \n            newrotation[0] = (rotation[0]*cos(rot.y)+rotation[2]*sin(rot.y));\n            newrotation[2] = (rotation[2]*cos(rot.y)-rotation[0]*sin(rot.y));\n            \n            rotation = newrotation;\n            \n            newrotation[1] = (rotation[1]*cos(rot.x)+rotation[2]*sin(rot.x));\n            newrotation[2] = (rotation[2]*cos(rot.x)-rotation[1]*sin(rot.x));\n            \n            rotation = newrotation;\n            \n            fragColor.xyz = rotation[index];\n            \n            return;\n        }\n        if (index == 3) {\n            if (iFrame == 0) {\n                fragColor = vec4(0,0,-0.5,0);\n                return;\n            }\n            \n            mat3 rotation = mat3(\n                memory(0).xyz,\n                memory(1).xyz,\n                memory(2).xyz);\n            \n            vec3 move = vec3(\n                PLUS_X-MINUS_X,\n                PLUS_Y-MINUS_Y,\n                PLUS_Z-MINUS_Z)\n                *iTimeDelta*MOVE_SPEED;\n            \n            fragColor.xyz += rotation*move;\n            \n            return;\n        }\n        if (iFrame == 0) {\n            fragColor = vec4(0,1,0,1);\n            return;\n        }\n    }\n    if (iFrame == 0) {\n        fragColor = vec4(1,0,0,1);\n        return;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}