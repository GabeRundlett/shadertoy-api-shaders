{
    "Shader": {
        "info": {
            "date": "1587589711",
            "description": "A haderToy shader that renders the default Cornell Box scene using ray marching with Box and Plane SDFs.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdXfzn",
            "likes": 0,
            "name": "Re-made Cornell Box",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "giaosame",
            "viewed": 351
        },
        "renderpass": [
            {
                "code": "const vec4 FLOOR_VEC       = vec4(0.0, 1.0, 0.0, 2.5);\nconst vec4 LEFT_WALL_VEC   = vec4(1.0, 0.0, 0.0, 5.0);\nconst vec4 RIGHT_WALL_VEC  = vec4(-1.0, 0.0, 0.0, 5.0);\nconst vec4 BACK_WALL_VEC   = vec4(0.0, 0.0, -1.0, 5.0);\nconst vec4 CEILING_VEC     = vec4(0.0, -1.0, 0.0, 7.5);\nconst vec3 LONG_BOX_POS    = vec3(2.1, -0.5, -2);\nconst vec3 LONG_BOX_SCALE  = vec3(1.5, 3.0, 1.5);\nconst vec3 SHORT_BOX_POS   = vec3(-2.1, 1, -1);\nconst vec3 SHORT_BOX_SCALE = vec3(1.5, 1.5, 1.5);\n\nconst vec3 EYE_POS         = vec3(0.0, 5, -18.0);\nconst vec3 REF_POS         = vec3(0.0, 2.5, 0.0);\n\nconst int RAY_STEPS     = 256;\nconst int FLOOR_ID      = 0;\nconst int LEFT_WALL_ID  = 1;\nconst int RIGHT_WALL_ID = 2;\nconst int BACK_WALL_ID  = 3;\nconst int CEILING_ID    = 4;\nconst int LONG_BOX_ID   = 5;\nconst int SHORT_BOX_ID  = 6;\nconst float PI_OVER_180 = 3.1415926 / 180.0;\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\nfloat plane(vec3 p, vec4 n)\n{\n  // n must be normalized\n  return dot(p, n.xyz) + n.w;\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nvec3 rotateY(vec3 p, float a) \n{\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvec3 rotateX(vec3 p, float amt) \n{\n    return vec3(p.x, cos(amt) * p.y - sin(amt) * p.z, sin(p.y) + cos(p.z));\n}\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int objId, vec3 lightPos)\n{\n    // floor\n    t = plane(pos, FLOOR_VEC);  \n    objId = FLOOR_ID;  \n\n    float t2;\n    if((t2 = plane(pos, LEFT_WALL_VEC)) < t)  \n    {\n        t= t2;\n        objId = LEFT_WALL_ID;\n    } \n    if((t2 = plane(pos, RIGHT_WALL_VEC)) < t)  \n    {\n        t= t2;\n        objId = RIGHT_WALL_ID;\n    }\n    if((t2 = plane(pos, BACK_WALL_VEC)) < t)\n    {\n        t= t2;\n        objId = BACK_WALL_ID;\n    }\n    if((t2 = plane(pos, CEILING_VEC)) < t)\n    {\n        t= t2;\n        objId = CEILING_ID;\n    }\n    if((t2 = box(rotateY(pos + LONG_BOX_POS, 27.5 * PI_OVER_180), LONG_BOX_SCALE)) < t)  // long bix\n    {\n        t= t2;\n        objId = LONG_BOX_ID;\n    }\n    if((t2 = box(rotateY(pos + SHORT_BOX_POS, -27.5 * PI_OVER_180), SHORT_BOX_SCALE)) < t)\n    {\n        t= t2;\n        objId = SHORT_BOX_ID;\n    }\n}\n\nfloat sceneMap3D(vec3 pos, vec3 lightPos)\n{\n    float t = plane(pos, FLOOR_VEC);\n    t = min(t, plane(pos, LEFT_WALL_VEC));\n    t = min(t, plane(pos, RIGHT_WALL_VEC));\n    t = min(t, plane(pos, BACK_WALL_VEC));\n    t = min(t, plane(pos, CEILING_VEC));\n    t = min(t, box(rotateY(pos + LONG_BOX_POS, 27.5 * PI_OVER_180), LONG_BOX_SCALE));\n    t = min(t, box(rotateY(pos + SHORT_BOX_POS, -27.5 * PI_OVER_180), SHORT_BOX_SCALE));\n    return t;\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int objId, vec3 lightPos)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, objId, lightPos);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n\n    t = -1.0;\n    objId = -1;\n}\n\nvec3 computeMaterial(int objId, vec3 p, vec3 n, vec3 light, vec3 view)\n{\n    float lambert = dot(light, n);\n\n    switch(objId) \n    {\n    case FLOOR_ID:  // floor\n        return vec3(1.0, 1.0, 1.0) * lambert;\n        break;\n    case LEFT_WALL_ID:  // Left wall, which is a large red plane\n        return vec3(0.63, 0.065, 0.05) * lambert;\n        break;\n    case RIGHT_WALL_ID:  // Right wall, which is a large green plane\n        return vec3(0.14, 0.45, 0.091) * lambert;\n        break;\n    case BACK_WALL_ID:  // Back wall, which is a large white plane\n        return vec3(1.0, 1.0, 1.0) * lambert;\n        break;\n    case CEILING_ID:  // Ceiling, which is a large white plane\n        return vec3(1.0, 1.0, 1.0) * lambert;\n        break;\n    case LONG_BOX_ID:  // Cuboid, the long box\n        return vec3(1.0, 1.0, 1.0) * lambert;\n        break;\n    case SHORT_BOX_ID:  // Cube, the short box\n        return vec3(1.0, 1.0, 1.0) * lambert;\n        break;\n    default:\n        return vec3(0.0);\n        break;\n    }\n\n    return vec3(1.0);\n}\n\nvec3 computeNormal(vec3 pos, vec3 lightPos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize(vec3(sceneMap3D(pos + epsilon.yxx, lightPos) - sceneMap3D(pos - epsilon.yxx, lightPos),\n                          sceneMap3D(pos + epsilon.xyx, lightPos) - sceneMap3D(pos - epsilon.xyx, lightPos),\n                          sceneMap3D(pos + epsilon.xxy, lightPos) - sceneMap3D(pos - epsilon.xxy, lightPos)));\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos)\n{\n    float t;\n    int objId;\n    march(eye, dir, t, objId, lightPos);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect, lightPos);\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 surfaceColor = computeMaterial(objId, isect, nor, lightDir, normalize(eye - isect));\n    \n    return Intersection(t, surfaceColor, isect, objId);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref)\n{\n    eye = EYE_POS;\n    ref = REF_POS;\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * float(iResolution.x) / float(iResolution.y);\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lightPos = vec3(0.0, 7.3, -1.0);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n\n    vec3 dir, eye, ref;\n    raycast(uv2, dir, eye, ref);\n    Intersection intersection = sdf3D(dir, eye, lightPos);\n\n    // Output to screen\n    fragColor = vec4(intersection.color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}