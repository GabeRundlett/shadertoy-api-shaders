{
    "Shader": {
        "info": {
            "date": "1725722554",
            "description": "Effect used in \"Fifth\" by Oftenhide. Released at Xenium 2024\nhttps://www.pouet.net/prod.php?which=97700",
            "flags": 32,
            "hasliked": 0,
            "id": "l3XyRr",
            "likes": 25,
            "name": "Underwater craters",
            "published": 3,
            "tags": [
                "rmeworleycraterz"
            ],
            "usePreview": 0,
            "username": "patu",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define res  iResolution\n\n#define GA  2.399\nmat2 rot = mat2(cos(GA),sin(GA),-sin(GA),cos(GA));\n\n// \tsimplyfied version of Dave Hoskins blur\nvec3 dof(sampler2D tex,vec2 uv,float rad)\n{\n\tvec3 acc=vec3(0);\n    vec2 pixel=vec2(.002*res.y/res.x,.002),angle=vec2(0,rad);;\n    rad=1.;\n\tfor (int j=0;j<80;j++)\n    {  \n        rad += 1./rad;\n\t    angle*=rot;\n        vec4 col=texture(tex,uv+pixel*(rad-1.)*angle);\n\t\tacc+=col.xyz;\n\t}\n\treturn acc/80.;\n}\n\n//-------------------------------------------------------------------------------------------\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n\tvec2 uv = gl_FragCoord.xy / res.xy;\n    float a = abs(.5-uv.y) * 2.;\n    \n    fragColor=vec4(dof(iChannel0,uv,a),1.);\n    //fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// noise \n\nfloat hash12(vec2 p) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat noise(vec2 p){\n\treturn fract(sin(fract(sin(p.x) * (4313.13311)) + p.y) * 3131.0011);\n}\n\nfloat noiseF( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash12( i + vec2(0.0,0.0) ), \n                     hash12( i + vec2(1.0,0.0) ), u.x),\n                mix( hash12( i + vec2(0.0,1.0) ), \n                     hash12( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat noiseFF(in vec2 uv) {\n    uv *= 5.;\n    \n \tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    \n    float f  = 0.5000*noiseF( uv ); uv = m*uv;\n    f += 0.2500*noiseF( uv ); uv = m*uv;\n    f += 0.1250*noiseF( uv ); uv = m*uv;\n    f += 0.0625*noiseF( uv ); uv = m*uv;   \n    \n    return f;\n}\nfloat length2(vec2 p) { return dot(p, p); }\nfloat worley(vec2 p) {\n\tfloat d = 1e2;\n\tfor (int xo = -1; xo <= 1; ++xo)\n\t\tfor (int yo = -1; yo <= 1; ++yo) {\n\t\t\tvec2 tp = floor(p) + vec2(xo, yo);\n\t\t\td = min(d, length2(p - tp) + noise(tp) * 1.);\n\t\t}\n\treturn 15.* exp(-6.*abs(2.*d - 1.));\n}\n\nfloat fworley(vec2 p) {\n\treturn sqrt(sqrt(sqrt(\n\t\tworley(p * 32.)\n    ))) ;\n}\n\nvec3 fromRGB(int r, int g, int b) {\n \treturn vec3(float(r), float(g), float(b)) / 255.;   \n}\n    \nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor *= 0.;\n    uv.y += iTime * .1;\n    uv *= 120.;\n    \n    fragColor.r = pow(fworley(uv / 900.) * .55, .6);\n    fragColor.g = noiseFF(uv / 160.) * 9.;\n    fragColor.b = noiseFF(uv / 10.) * .5;\n    \n    \n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define getNormal\tgetNormalHex\n#define FAR\t570.\n#define INFINITY\t1e32\n#define t\tiTime\n#define T\tiTime\n#define mt\tiChannelTime[1]\n#define FOV\t70.0\n#define FOG\t.06\n#define PI\t3.14159265\n#define TAU\t(2 * PI)\n#define PHI\t(1.618033988749895)\n\nbool disableBall = false;\nvec3 fromRGB(int r, int g, int b) { return vec3(float(r), float(g), float(b)) / 255.; }\n\nvec3 light = vec3(0.0),\n     lightDir = vec3(0.);\nvec3 lightColour = normalize(vec3(1.0, 1.0, 1.));\nvec3 saturate(vec3 a) { return clamp(a, 0.0, 1.0); }\n\nvec2 saturate(vec2 a) { return clamp(a, 0.0, 1.0); }\n\nfloat saturate(float a) { return clamp(a, 0.0, 1.0); }\n\nstruct geometry {\n\tfloat dist;\n\tvec3 space;\n\tvec3 hit;\n\tvec3 sn;\n\tvec2 material;\n\tint iterations;\n\tfloat glow;\n};\n\ngeometry geoU(geometry g1, geometry g2) {\n\tif (g1.dist < g2.dist) return g1;\n\treturn g2;\n}\n\n// Maximum/minumum elements of a vector\nfloat vmax(vec2 v) { return max(v.x, v.y); }\n\nfloat vmax(vec3 v) { return max(max(v.x, v.y), v.z); }\n\nfloat vmax(vec4 v) { return max(max(v.x, v.y), max(v.z, v.w)); }\n\n// Repeat around the origin by a fixed angle.\n// Same as above, but in two dimensions (an endless box)\nfloat fBox2Cheap(vec2 p, vec2 b) { return vmax(abs(p) - b); }\n\nfloat fSphere(vec3 p, float r) { return length(p) - r; }\n\nvec3 lighterPos() { return vec3(48. + sin(iTime * .3) * 40., 18. - sin(iTime * 1.2) * 2. + cos(iTime * .58) * 2., -30. + sin(iTime) * 20.); }\n\ngeometry lighter(vec3 p) {\n\tgeometry obj2;\n\tp -= lighterPos();\n\tobj2.material = vec2(1., 0.);\n\tobj2.dist = fSphere(p, 1.);\n\treturn obj2;\n}\n\ngeometry map(vec3 p) {\n\tfloat n = 0.;\n\tvec3 pp = p;\n\tvec2 q = p.zx * 0.01;\n\tq = -abs(mod(q, 2.) - 1.);\n\tvec4 c = texture(iChannel0, q);\n\tn = c.r * 2.3 + c.g * .2 + c.b * .7;\n\tgeometry obj2, obj;\n\tp.y -= pow(n, 2.);\n\tobj.dist = fBox2Cheap(p.xy, vec2(150., 5.));\n\tobj.material = vec2(2., 0.);\n\tobj.space = p;\n\tif (!disableBall) {\n\t\tobj2 = lighter(pp);\n\t\tobj = geoU(obj, obj2);\n\t}\n\n\treturn obj;\n}\n\nfloat t_min = 10.01;\nfloat t_max = FAR;\nconst int MAX_ITERATIONS = 200;\ngeometry trace(vec3 o, vec3 d) {\n\tfloat omega = 1.3;\n\tfloat t = t_min;\n\tfloat candidate_error = INFINITY;\n\tfloat candidate_t = t_min;\n\tfloat previousRadius = 0.;\n\tfloat stepLength = 0.;\n\tfloat pixelRadius = 1. / 400.;\n\tgeometry mp = map(o);\n\tmp.glow = 0.;\n\tfloat functionSign = mp.dist < 0. ? -1. : + 1.;\n\tfor (int i = 0; i < MAX_ITERATIONS; ++i) {\n\t\tmp = map(d * t + o);\n\t\tfloat signedRadius = functionSign * mp.dist;\n\t\tfloat radius = abs(signedRadius);\n\t\tbool sorFail = omega > 1. && (radius + previousRadius) < stepLength;\n\t\tif (sorFail) {\n\t\t\tstepLength -= omega * stepLength;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse stepLength = signedRadius * omega;\n\n\t\tpreviousRadius = radius;\n\t\tfloat error = radius / t;\n\t\tif (!sorFail && error < candidate_error) {\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif (!sorFail && error < pixelRadius || t > t_max) break;\n\t\tt += stepLength * .4;\n\t\td.x += sin(t * .125) * t * 0.00005;\n\t}\n\n\tmp.dist = candidate_t;\n\tif ((t > t_max || candidate_error > pixelRadius)) mp.dist = INFINITY;\n\treturn mp;\n}\n\nfloat softShadow(vec3 ro, vec3 lp, float k) {\n\tconst int maxIterationsShad = 8;\n\tvec3 rd = (lp - ro); // Unnormalized direction ray.\n\tfloat shade = 1.;\n\tfloat dist = .5;\n\tfloat end = max(length(rd), 0.01);\n\tfloat stepDist = end / float(maxIterationsShad);\n\trd /= end;\n\tfor (int i = 0; i < maxIterationsShad; i++) {\n\t\tfloat h = map(ro + rd * dist).dist;\n\t\tshade = min(shade, k * h / dist);\n\t\tdist += min(h, stepDist * 2.);\n\t\tif (h < 0.001 || dist > end) break;\n\t}\n\n\treturn min(max(shade, 0.3), 1.0);\n}\n\n#define EPSILON\t.01\n\nvec3 getNormalHex(vec3 pos) {\n\tfloat d = map(pos).dist;\n\treturn normalize(vec3(map(pos + vec3(EPSILON, 0, 0)).dist - d, map(pos + vec3(0, EPSILON, 0)).dist - d, map(pos + vec3(0, 0, EPSILON)).dist - d));\n}\n\nfloat getAO(vec3 hitp, vec3 normal, float dist) {\n\tvec3 spos = hitp + normal * dist;\n\tfloat sdist = map(spos).dist;\n\treturn clamp(sdist / dist, 0.0, 1.0);\n}\n\nvec3 Sky(in vec3 rd, bool showSun, vec3 lightDir) {\n\tfloat sunSize = .4;\n\tfloat sunAmount = max(dot(rd, lightDir), .4);\n\tfloat v = pow(1.2 - max(rd.y, 0.0), 3.);\n\tvec3 sky = mix(fromRGB(136, 136, 154), vec3(.1, .2, .3) * 1., v);\n\tif (showSun == false) sunSize = .1;\n\tsky += lightColour * sunAmount * sunAmount * 1. + lightColour * min(pow(sunAmount, 111.0) * sunSize, 1. * sunSize);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\nvec4 getObjectColor(vec3 p, vec3 n, geometry obj) {\n\tvec4 col = vec4(.0);\n\tif (obj.material.x == 0.0) { }\n\n\t;\n\tif (obj.material.x == 1.0) { }\n\n\tif (obj.material.x == 2.0) {\n\t\tcol.rgb = vec3(1., 1., 1.);\n\t\tcol.a = .5;\n\t}\n\n\t;\n\n\t//  col = vec3(2.3, 1.6, .6) * 4.\n\t//}\n\treturn col;\n}\n\nvec4 doColor(in vec3 sp, in vec3 rd, in vec3 sn, in vec3 lp, geometry obj) {\n\tvec4 sceneCol = vec4(0.0);\n\tlp = sp + lp;\n\tvec3 ld = lp - sp; // Light direction vector.\n\tfloat lDist = max(length(ld / 2.), 0.001); // Light to surface distance.\n\tld /= lDist; // Normalizing the light vector.\n\t// Attenuating the light, based on distance.\n\t// Standard diffuse term.\n\tfloat diff = max(dot(sn, ld), 1.);\n\n\t// Standard specualr term.\n\tfloat spec = pow(max(dot(reflect(-ld, sn), -rd), .2), .1);\n\n\t// Coloring the object. You could set it to a single color, to\n\t// make things simpler, if you wanted.\n\tvec4 objCol = getObjectColor(sp, sn, obj);\n\n\t// Combining the above terms to produce the final scene color.\n\tsceneCol.rgb += (objCol.rgb * (diff + .15) * spec * .1);\n\tsceneCol.a = objCol.a;\n\n\t// Return the color. Done once every pass... of which there are\n\t// only two, in this particular instance.\n\t// fresnel\n\treturn sceneCol;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 ouv = fragCoord.xy / iResolution.xy;\n\tvec2 uv = ouv - .5;\n\tuv *= tan(radians(FOV) / 2.0) * 1.1;\n\tfloat t2 = t - 35.;\n\tlight = vec3(100., 40., -100.);\n\tlightDir = light;\n\tvec3 vuv = vec3(0., 1., 0.),\n\t     ro = vec3(-10., 25., -20.); // pos\n\tvec3 vrp = ro + vec3(30., -12., -10.),\n\t     vpn = normalize(vrp - ro),\n\t     u = normalize(cross(vuv, vpn)),\n\t     v = cross(vpn, u),\n\t     vcv = (ro + vpn),\n\t     scrCoord = (vcv + uv.x * u * iResolution.x / iResolution.y + uv.y * v),\n\t     rd = normalize(scrCoord - ro);\n\tvec3 sceneColor = vec3(0.);\n\n\t// Light position. Set in the vicinity the ray origin.\n\tvec3 lp = light;\n\tlightDir = lp;\n\n\t// FIRST PASS.\n\tgeometry tr = trace(ro, rd);\n\tfloat fog = smoothstep(FAR * FOG, 0., tr.dist / 5.);\n\ttr.hit = ro + rd * tr.dist;\n\ttr.sn = getNormal(tr.hit);\n\tfloat ao = getAO(tr.hit, tr.sn, .6);\n\tvec3 sky = Sky(rd, true, normalize(light)) * 1.;\n\tvec3 skyNoSun = Sky(rd, false, normalize(light)) * 1.;\n\tif (tr.dist < FAR) {\n\t\tvec4 col = doColor(tr.hit, rd, tr.sn, light, tr) * 1.;\n\t\tsceneColor = col.rgb;\n\t\tsceneColor *= ao;\n\t\tdisableBall = true;\n\t\tsceneColor *= softShadow(tr.hit, ro + light, 2.);\n\t\t;\n\t\tsceneColor += softShadow(tr.hit, lighterPos(), 3.) * vec3(1., .3, .2) * .1;\n\t\tsceneColor *= 1. + length(max(0., 1. * max(0., length(normalize(light.xy) * max(vec2(0.), tr.sn.xy))) * 3.));\n\t\tsceneColor = mix(sceneColor, skyNoSun, (1. - fog) * .6);\n\t\tsceneColor = mix(sceneColor, skyNoSun, saturate(tr.dist * 1.1 / FAR));\n\t\tsceneColor += min(2., pow(1. / lighter(tr.hit).dist * 5., 2.)) * vec3(1., .3, .2);\n\t}\n\telse {\n\t\tsceneColor = sky;\n\t\ttr.dist = FAR;\n\t}\n\n\tfragColor = vec4(clamp(sceneColor * (1. - length(uv) / 2.5), 0.0, 1.0), 1.0);\n\tfragColor = pow(fragColor, vec4(1.4));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}