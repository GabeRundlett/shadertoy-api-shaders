{
    "Shader": {
        "info": {
            "date": "1700351275",
            "description": "Watched acerola's video: [url]https://www.youtube.com/watch?v=9dr-tRQzij4[/url], thought it was pretty cool, made a rudimentary version here. Other methods of rendering grass to come soon...",
            "flags": 96,
            "hasliked": 0,
            "id": "DlKyzG",
            "likes": 20,
            "name": "shell grass",
            "published": 3,
            "tags": [
                "grass",
                "acerolafurrychallenge"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 546
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U ){\n\n    vec2 r = iResolution.xy;\n    vec2 cuv = (2.*U-r)/r.y;\n    vec2 uv = U/r;\n    \n    O = texture(iChannel0, uv);\n    // O = pow(O, vec4(1./2.2));\n    // Looks bad, unnecessary cuz we don't even have any shading.\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 35672,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/symphonicsamples/cornfield-chase-hans-zimmer-midi-mockup"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// #define move\n// Uncomment to enable motion\n\nint layers = 2<<5;\nconst float height = .5;\nconst float scale = 20.;\n\nconst float wiggle = 1.;\nconst float heightVariance = .3;\n\nconst vec3 healthy = vec3(0., heightVariance*.5+.2, .05);\nconst vec3 ded = vec3(.8, .75, .4);\n\n#ifdef move\nconst float ssaa = 3.;\n#else\nconst float ssaa = 1.;\n#endif\n\nconst uint k = 1103515245U;\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvec4 ray(vec3 o, vec3 dir, float z){\n    if (dir.z > 0.) return vec4(0);\n    float t = (o.z - z)/dir.z;\n    return vec4(o + dir * t, -t);\n}\n\nvec4 ray(vec3 o, vec3 dir){\n    return ray(o, dir, height);\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    vec2 cuv = (2.*U-r)/r.y;\n    \n    cuv += vec2(cos(fract(float(iTime))*123.), sin(fract(float(iTime))*457.))/r.y;\n    \n    vec2 muv = iMouse.x < 1. && iMouse.y < 1.? vec2(0, -.5) :(2.*iMouse.xy-r)/r.y * 2.;\n\n    O = texture(iChannel0, uv);\n\n    #ifdef move\n    vec3 o = vec3(0, -iTime, 1);\n    #else\n    vec3 o = vec3(0, 0, 1);\n    #endif\n    \n    vec3 camDir = vec3(sin(muv.x)*cos(muv.y), cos(muv.x)*cos(muv.y), sin(muv.y));\n    vec3 right = normalize(cross(camDir, vec3(0, 0, 1)));\n    vec3 up = cross(right, camDir);\n    \n    vec3 dir = normalize(vec3(cuv.x, 1, cuv.y));\n    dir = camDir + right * cuv.x + up * cuv.y;\n\n    vec3 pos, m, n, col = vec3(0);\n    for (float s = 0.; s < ssaa; s++){\n        for (float i = 1.; i > 0.; i -= 1./float(layers)){\n\n            m = hash(uvec3(U + s, iTime*1000.));\n            vec4 r = ray(o, dir, i * height + m.x/float(layers));\n            pos = r.xyz;\n            float t = r.w;\n\n            if (pos == vec3(0)){\n                // Sky\n                col = (vec3(exp(-dir.z), exp(-dir.z*.5), .5 * exp(dir.z)));\n                break;\n            }\n\n\n            n = hash(uvec3(mod(vec3(pos.xy + s, 1.) * scale, vec3(2<<7))));\n            // Mod can be replaced with abs at the cost of grass symmetric around the axes\n            // Abs causes mirroring, mod causes tiling\n            // better suggestions welcome.\n\n            vec2 cellCoord = fract(pos.xy * scale) * 2. - 1. // Gives us the coordinates inside the current cell\n               + n.yz*2.-1. // offsets the coordinate centre for off grid grass. Just comment this line to see the difference.\n               + (n.xz*2.-1.)*sin(i*5./wiggle + n.y * 179.) * wiggle // and then we offset based on height so make 'em wiggly\n            ; // This is put here so you can comment the above line without erroring\n\n\n            if (length(cellCoord) < mix(1., n.x, heightVariance)-i){\n                col = mix(col, vec3(mix(healthy, ded, n.x)) * i, 1./(s+1.));\n                break;\n            }\n\n        }\n    }\n    \n    if (iFrame < 20){\n        O = vec4(col, 1.);\n    } else {\n        \n        #ifdef move\n        O.a = 3.;\n        #else\n        O.a = mix(O.a + 1., 1., iMouse.z > 0.?1.:0.);\n        #endif\n        \n        O.xyz = mix(O.xyz, col, 1./O.a);\n        \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}