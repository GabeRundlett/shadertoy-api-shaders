{
    "Shader": {
        "info": {
            "date": "1725149898",
            "description": "    riffing of my last shader and listening to Tool / Sober. Very basic, but was like\n    hey this looks like an Alex Grey work... https://x.com/alexgreycosm/status/1829595089494045067",
            "flags": 0,
            "hasliked": 0,
            "id": "lfjBzy",
            "likes": 19,
            "name": "Byt3-daily-014",
            "published": 3,
            "tags": [
                "grid",
                "eyes",
                "hexagon"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 116
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    riffing of my last shader and listening to Tool / Sober. Very basic, but was like\n    hey this looks like an Alex Grey work...\n\n    Byt3-daily-014\n    08/31/2024  @byt3_m3chanic\n    \n*/\n#define R     iResolution\n#define T     iTime\n#define M     iMouse\n\n#define PI    3.141592653\n#define PI2   6.283185307\n\n// Hexagon grid system, can be simplified but\n// written out long-form for readability. \n// return vec2 uv and vec2 id\nvec4 hexgrid(vec2 uv) {\n    vec2 p1 = floor(uv/vec2(1.732,1))+.5;\n    vec2 p2 = floor((uv-vec2(1,.5))/vec2(1.732,1))+.5;\n    \n    vec2 h1 = uv-p1*vec2(1.732,1);\n    vec2 h2 = uv-(p2+.5)*vec2(1.732,1);\n    return dot(h1,h1) < dot(h2,h2) ? vec4(h1,p1) : vec4(h2,p2+.5);\n}\n\nvec3 hsv( vec3 a ) {\n    vec3 rgb = clamp(abs(mod(a.x*2.+vec3(0,4,2),6.)-3.)-1.,0.,1.);\n    return a.z * mix(vec3(1),rgb,a.y);\n}\n\nvoid cube(inout vec3 C, vec2 uv, vec2 id, float px, float rnd) {\n\n    float ln = .015, hn = ln/2.;\n    float d = max(abs(uv.x)*.866025 + abs(uv.y)/2., abs(uv.y))-.48;\n \n    rnd = fbm3(vec3(id,2.));\n\n    vec3 clr = hsv(vec3(2.25+rnd,.8,.8));\n\n    C = mix(C,clr,smoothstep(px,-px,d) );\n\n    if(rnd>.5){\n        float xnd =  fbm3(vec3(id.xy*.5,3.*T))*.5-.25;  \n        float ynd =  fbm3(vec3(id.yx*.5,4.*T))*.30-.15;\n    \n        vec2 vv = uv;\n        vv.y = abs(vv.y)+.1;\n        float e = length(vv)-.3;\n        C = mix(C,C*.1,smoothstep(.085+px,-px,e+.05) );\n        C = mix(C,vec3(1),smoothstep(px,-px,e) );\n\n\n        vec2 of = vec2(xnd,ynd);\n        float f = length(uv-of)-.08;\n        C = mix(C,vec3(0),smoothstep(px,-px,f) );\n        C = mix(C,vec3(.9,0,0),smoothstep(px,-px,abs(f)-.0175) );\n    } else {\n        vec4 H = rnd<.475 ? hexgrid(uv.yx*2.) : hexgrid(uv.yx*4.);\n        vec2 p = H.xy, id = H.zw;\n        float rn = fbm3(vec3(id,1.));\n        vec3 clr = hsv(vec3(2.22+rn,.8,rn));\n        float nd = max(abs(H.x)*.866025 + abs(H.y)/2., abs(H.y))-.46;\n        C = mix(vec3(0),clr,smoothstep(px,-px,max(nd,d)) );\n        C = mix(C,C*.3,smoothstep(.1+px,-px,max(abs(d)-.005,d)) );\n    }\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 F )\n{\n    vec3 C = vec3(0);\n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y);\n\n    uv = -vec2(log(length(uv)),atan(uv.y,uv.x))-((2.*M.xy-R.xy)/R.xy);\n    uv /= 3.627;\n    uv *= N;\n    float px = fwidth(uv.x);\n\n    vec4 H;\n    vec2 p, id;\n    float rnd;\n    float sc = 1.;\n\n    sc *= 4.;\n        \n    uv += T*vec2(.1,.05);\n    H = hexgrid(uv.yx*sc);\n    p = H.xy, id = H.zw;\n    cube(C,p,id*sc,px,rnd);\n\n    fragColor = vec4(pow(C,vec3(.4545)),1);\n}\n\n\n\n\n\n\n\n\n\n\n// end\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    riffing of my last shader and listening to Tool / Sober. Very basic, but was like\n    hey this looks like an Alex Grey work...\n    https://x.com/alexgreycosm/status/1829595089494045067\n\n    Byt3-daily-014\n    08/31/2024  @byt3_m3chanic\n    \n*/\n\nmat2 rot(float g) {\n return mat2(cos(g), sin(g),-sin(g), cos(g));\n}\n\nfloat hash21( vec2 p ) {\n    return fract(sin(dot(p,vec2(23.43,84.21)))*4832.3234);\n}\n\nconst float N = 2.;\n// @Shane - a very tightly compacted, self-contained version \n// of IQ's 3D value noise function.\n//---------------------------------------------------------------\nfloat n3D(vec3 p){\n    const vec3 s = vec3(113, 57, 27);\n    vec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n}\n//---------------------------------------------------------------\n// @iq fbm generator\nfloat fbm3( in vec3 x) {\n\n    //@mla : shifting the xy value from the range [-PI,+PI] to [0,2N]\n    x.x = mod(x.x,8.*N);\n    x.y = mod(x.y,8.*N);\n    \n    x*=.085;\n    float a = 0.1,b = .5,f = 2.;\n    vec3  d = vec3(0.);\n    for (int i = 0; i < 4; ++i) {      \n        float n = n3D(f*x);\n        a += b*n;\n        b *= 0.5;\n        f *= 1.8;\n    }\n\treturn a;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}