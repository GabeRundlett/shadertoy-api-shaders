{
    "Shader": {
        "info": {
            "date": "1670935108",
            "description": "cool pattern idk what its called",
            "flags": 0,
            "hasliked": 0,
            "id": "msjSWK",
            "likes": 21,
            "name": "Truchet Tiling (NOT!)",
            "published": 3,
            "tags": [
                "tiling"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat box(in vec2 p, in vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat tile(vec2 uv, vec2 fpos, vec2 ipos, float k, float i, float c) {\n    float h = h21(ipos);  \n    float t = .5 * iTime + 0. * i;\n    \n    fpos *= rot(floor(2. * h) * pi /2.);\n    float v = .0125 * cos(uv.x * 100. + t);\n    v += .025 * cos(5. * (2. * uv.x - uv.y) - 4. * t);\n    float o = c * (.25 - v);\n    vec2 off = vec2(o, 1.-o);\n    float s = smoothstep(-c*k, c*k,\n                         -abs(box(fpos+off,vec2(.5)))+(2.-.1*i)*c*.0675);\n    s = max(s,smoothstep(-c*k, c*k,\n                         -abs(box(fpos-off,vec2(.5)))+(2.-.1*i)*c*.0675));                         \n    return s;\n}\n\nfloat layer(vec2 uv, float i) {\n    float xt = mix(0.1,0.35,.5+.5*thc(6., uv.y + .5*i*pi/10. + .5*iTime)) * i;\n    float sc = 10. + xt;\n    float k = sc / iResolution.y;\n    vec2 ouv = uv;\n    uv += vec2(.75, .25) * (iTime + 0. * i) / sc;\n    \n    vec2 ipos = floor(sc * uv);\n    vec2 fpos = fract(sc * uv);\n       \n    float m = mod(2. * ipos.x - ipos.y, 5.);\n    \n    float id = 2.;\n    vec2 o = vec2(0);\n    \n    if (m != 3.) { fpos *= 0.5;  id = 1.; }    \n    if (m == 2.)      o = vec2(1,0); \n    else if (m == 4.) o = vec2(0,1); \n    else if (m == 1.) o = vec2(1);  \n    \n    fpos += 0.5 * o - 0.5;\n    ipos -= o;\n    \n    // should use id here but fpos.yx is an issue\n    if (m==3.) {\n        return tile(ouv, fpos.yx, ipos, k, i, 1.);\n    } else {\n        return tile(ouv, fpos, ipos, k, i, .5);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    float s = 0.;\n    for (float i = 0.; i < 10.; i++) {\n        s = max(s, (1.-i/10.)*layer(uv, i));\n    }\n\n    vec3 col = .75 + .25 * cos(2.*pi*(s +.5*vec3(0,1,2)/3.));\n    col = mix(col, vec3(.1,0,.15), s);\n    vec2 p = .4 * vec2(cos(.87 * iTime), sin(.31 * iTime));\n    float d = length(uv - p);\n    float xp  = min(1., exp(2.-4.*d));\n    float xp2 = min(1., exp(.1-4.*d));\n    col = mix(col, vec3(.15,0,0), 1.-xp);\n    col = s * mix(col, vec3(1), xp2);\n    \n    float k = 1. / iResolution.y;\n    float s2 = smoothstep(-k, k, -d + mix(4., 6., .5+.5*cos(2.*iTime)) * k);\n    \n    col = mix(col, vec3(1), s2);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}