{
    "Shader": {
        "info": {
            "date": "1532940429",
            "description": "marble like animation",
            "flags": 0,
            "hasliked": 0,
            "id": "ltdcD7",
            "likes": 3,
            "name": "marblelike",
            "published": 3,
            "tags": [
                "fbm"
            ],
            "usePreview": 0,
            "username": "rformato",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "#define NUM_OCTAVES 6\n\n// Simplex 2D noise\n//\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat noise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nconst mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n\tfor (int i = 0; i < NUM_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    float time = iTime / 100.;\n    float f = fbm(vec2(time)+uv + fbm(vec2(time)-uv));\n\n    float r = smoothstep(.0, 0.4, f);\n    float g = smoothstep(.3, 0.7, f);\n    float b = smoothstep(.6, 1., f);\n    \n    vec3 col = vec3(r, g, b);\n    float f2 = .5 - f;\n    \n\tr = smoothstep(.0, .6, f2);\n    g = smoothstep(.3, .9, f2);\n    b = smoothstep(.4, 1., f2);\n    \n    vec3 col2 = vec3(r, g, b);    \n    col = mix(col, col2, f2);\n    //col += col2;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}