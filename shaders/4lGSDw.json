{
    "Shader": {
        "info": {
            "date": "1484594019",
            "description": "Interpolating a set of 38 points with the Discrete Fourier Transform. More info here: [url]https://iquilezles.org/articles/fourier[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4lGSDw",
            "likes": 132,
            "name": "Fourier - interpolation",
            "published": 3,
            "tags": [
                "2d",
                "fourier"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 7884
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// A set of 38 points gets interpolated by computing the DFT (Discrete Fourier Transform)\n// and then its inverse, and evaluating the it at more than 38 points. This results in\n// an interpolation sort of made of cosine/sine waves. Would be nice to do a regular\n// Hermite spline interpolation as well to compare.\n//\n// More info: https://iquilezles.org/articles/fourier\n//\n// Original drawing (kind of), here:\n// https://mir-s3-cdn-cf.behance.net/project_modules/disp/831a237863325.560b2e6f92480.png\n\nfloat sdSegmentSq( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    vec2  d = pa - ba*h;\n\treturn dot(d,d);\n}\n\nfloat sdPointSq( in vec2 p, in vec2 a )\n{\n    vec2 d = p - a;\n\treturn dot(d,d);\n}\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\n\n#define ZERO min(iFrame,0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float e = 1.0/iResolution.x;\n\tvec2 p = fragCoord / iResolution.x;\n    \n    vec3 col = vec3(1.0);\n\n    #define NUM 38\n    \n    vec2 path[NUM];\n    \n    //------------------------------------------------------\n    // path\n    //------------------------------------------------------\n    {\n        path[ 0] = vec2( 0.098, 0.062 );\n        path[ 1] = vec2( 0.352, 0.073 );\n        path[ 2] = vec2( 0.422, 0.136 );\n        path[ 3] = vec2( 0.371, 0.085 );\n        path[ 4] = vec2( 0.449, 0.140 );\n        path[ 5] = vec2( 0.352, 0.187 );\n        path[ 6] = vec2( 0.379, 0.202 );\n        path[ 7] = vec2( 0.398, 0.202 );\n        path[ 8] = vec2( 0.266, 0.198 );\n        path[ 9] = vec2( 0.318, 0.345 );\n        path[10] = vec2( 0.402, 0.359 );\n        path[11] = vec2( 0.361, 0.425 );\n        path[12] = vec2( 0.371, 0.521 );\n        path[13] = vec2( 0.410, 0.491 );\n        path[14] = vec2( 0.410, 0.357 );\n        path[15] = vec2( 0.502, 0.482 );\n        path[16] = vec2( 0.529, 0.435 );\n        path[17] = vec2( 0.426, 0.343 );\n        path[18] = vec2( 0.449, 0.343 );\n        path[19] = vec2( 0.504, 0.335 );\n        path[20] = vec2( 0.664, 0.355 );\n        path[21] = vec2( 0.748, 0.208 );\n        path[22] = vec2( 0.738, 0.277 );\n        path[23] = vec2( 0.787, 0.308 );\n        path[24] = vec2( 0.748, 0.183 );\n        path[25] = vec2( 0.623, 0.081 );\n        path[26] = vec2( 0.557, 0.099 );\n        path[27] = vec2( 0.648, 0.116 );\n        path[28] = vec2( 0.598, 0.116 );\n        path[29] = vec2( 0.566, 0.195 );\n        path[30] = vec2( 0.584, 0.228 );\n        path[31] = vec2( 0.508, 0.083 );\n        path[32] = vec2( 0.457, 0.140 );\n        path[33] = vec2( 0.508, 0.130 );\n        path[34] = vec2( 0.625, 0.071 );\n        path[35] = vec2( 0.818, 0.093 );\n        path[36] = vec2( 0.951, 0.066 );\n        path[37] = vec2( 0.547, 0.081 );\n    }\n\n    //------------------------------------------------------\n    // draw path\n    //------------------------------------------------------\n    {\n        vec2 d = vec2(1000.0);\n        for( int i=0; i<(NUM-1); i++ )\n        {\n            vec2 a = path[i+0];\n            vec2 b = path[i+1];\n            d = min( d, vec2(sdSegmentSq( p,a,b ), sdPointSq(p,a) ) );\n        }\n        d.x = sqrt( d.x );\n        d.y = sqrt( min( d.y, sdPointSq(p,path[NUM-1]) ) );\n        //col = mix( col, vec3(0.8,0.8,0.8), 1.0-smoothstep(0.0,e,d.x) );\n        col = mix( col, vec3(0.9,0.2,0.0), 1.0-smoothstep(5.0*e,6.0*e,d.y) );\n    }\n\n    //------------------------------------------------------\n    // compute fourier transform of the path\n    //------------------------------------------------------\n    vec2 fcsX[20];\n    vec2 fcsY[20];\n    for( int k=ZERO; k<20; k++ )\n    {\n        vec2 fcx = vec2(0.0);\n        vec2 fcy = vec2(0.0);\n        for( int i=0; i<NUM; i++ )\n        {\n            float an = -6.283185*float(k)*float(i)/float(NUM);\n            vec2  ex = vec2( cos(an), sin(an) );\n            fcx += path[i].x*ex;\n            fcy += path[i].y*ex;\n        }\n        fcsX[k] = fcx;\n        fcsY[k] = fcy;\n    }\n\n    //------------------------------------------------------\n    // inverse transform with 6x evaluation points\n    //------------------------------------------------------\n    {\n    float ani = min( mod((12.0+iTime)/10.1,1.3), 1.0 );\n    float d = 1000.0;\n    vec2 oq, fq;\n    for( int i=ZERO; i<256; i++ )\n    {\n        float h = ani*float(i)/256.0;\n        vec2 q = vec2(0.0);\n        for( int k=0; k<20; k++ )\n        {\n            float w = (k==0||k==19)?1.0:2.0;\n            float an = -6.283185*float(k)*h;\n            vec2  ex = vec2( cos(an), sin(an) );\n            q.x += w*dot(fcsX[k],ex)/float(NUM);\n            q.y += w*dot(fcsY[k],ex)/float(NUM);\n        }\n        if( i==0 ) fq=q; else d = min( d, sdSegmentSq( p, q, oq ) );\n        oq = q;\n    }\n    d = sqrt(d);\n    col = mix( col, vec3(0.1,0.1,0.2), 1.0-smoothstep(0.0*e,2.0*e,d) );\n    col *= 0.75 + 0.25*smoothstep( 0.0, 0.13, sqrt(d) );\n    }\n\n    //------------------------------------------------------\n\n    col *= 1.0 - 0.3*length(fragCoord/iResolution.xy-0.5);\n \n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}