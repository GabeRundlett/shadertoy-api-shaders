{
    "Shader": {
        "info": {
            "date": "1543051891",
            "description": "An Apollonian Gasket. Mouse drags central circle. 'h' maps to half plane, 'd' inverts in unit disk.\n\nNew feature: press 'j' for Joukowsky!",
            "flags": 16,
            "hasliked": 0,
            "id": "MlVfzy",
            "likes": 13,
            "name": "Another Apollonian Gasket",
            "published": 3,
            "tags": [
                "inversion",
                "apollonian",
                "gasket",
                "joukowsky"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 848
        },
        "renderpass": [
            {
                "code": "/////////////////////////////////////////////////////////////////////\n//\n// Apollonian Gasket: iterated inversion in a set of tangent circles\n//\n// Originally derived from https://www.shadertoy.com/view/4dsBDn\n// by ebanflo but changed fairly substantially.\n//\n// Mouse drags central circle around.\n// 'd' inverts in unit disk\n// 'h' maps to half plane\n// 'j' applies Joukovsky transform\n//\n/////////////////////////////////////////////////////////////////////\n\n// N = 3 gives 4 mutually tangent circles.\n\nconst float N = 3.0;\nconst int max_iterations = 100;\nconst float pi = 3.14159265;\n\n// Circles are represented as vec3(x,y,r2) where\n// (x,y) is the centre and r2 is the squared radius.\n\n// Invert pos in circle c\nvec2 invert(vec2 pos, vec3 c) {\n  vec2 p = pos-c.xy;\n  float p2 = dot(p,p);\n  return p*c.z/p2 + c.xy;\n}\n  \n// Invert pos in circle if it is inside \nbool checkinverse(inout vec2 pos, vec3 c) {\n  vec2 p = pos-c.xy;\n  float p2 = dot(p,p);\n  if (p2 > c.z) return false;\n  pos = p*c.z/p2 + c.xy;\n  return true;\n}\n\n// N circles in a ring, with tangency points on unit circle,\n// plus a central circle, tangent to the others.\nvec3 gasket(vec2 pos){\n  float theta = pi/N;\n  float r = 1.0/cos(theta);\n  float s = tan(theta);\n  for(int n = 0; n < max_iterations; n++){\n    vec3 c = vec3(0,0,pow(r-s,2.0));\n    // Try inverting in central circle\n    if (!checkinverse(pos,c)) {\n      bool found = false;\n      // else try in the circles of the ring.\n      for (float i = 0.0; i < N; i++) {\n        float t = 0.2*iTime;\n        vec3 c = vec3(r*sin(2.0*i*theta+t), r*cos(2.0*i*theta+t), s*s);\n        if (checkinverse(pos,c)) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) return vec3(pos,n);\n    }\n  }\n  return vec3(pos,max_iterations);\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c ) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 getCol(vec3 n){\n  return hsv2rgb(vec3(mod(n.z/50.0,1.0),0.8,0.8));\n}\n\nvec2 cmul(vec2 z, vec2 w) {\n  return vec2(z.x*w.x - z.y*w.y,\n              z.x*w.y + z.y*w.x);\n}\n\nvec2 cinv(vec2 z) {\n  return z/dot(z,z)*vec2(1,-1);\n}\n\nvec2 csqrt(vec2 z) {\n  float r = length(z);\n  return vec2(sqrt(0.5*(r+z.x)),sign(z.y)*sqrt(0.5*(r-z.x)));\n}\n\nbool keypress(int code) {\n  //return false;\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nconst int CHAR_D = 68;\nconst int CHAR_H = 72;\nconst int CHAR_J = 74;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 z = 2.0 * fragCoord.xy / iResolution.y - vec2(iResolution.x / iResolution.y, 1.0);\n  if (keypress(CHAR_H)) {\n    z.y += 1.0;\n    z = invert(z,vec3(0,-1,2)); // Map half plane to unit disk.\n  }\n  if (keypress(CHAR_D)) {\n    z *= 20.0;\n    z = invert(z,vec3(0,0,1)); // Invert in unit disk\n  }\n  if (keypress(CHAR_J)) {\n    // Inverse Joukovsky transform\n    // Solve w^2 - 2wz + 1 = 0\n    // a = 1, b = -z, c = 1\n    // (z +- sqrt(z^2 - 1))\n    vec2 t = csqrt(cmul(z,z)-vec2(1,0));\n    if (dot(z+t,z+t) < 1.0) z += t;\n    else z -= t;\n    //z = 0.5*(z+cinv(z)); // sanity check\n  }\n  vec2 m = vec2(0.1,-0.2);\n  if (iMouse.x != 0.0) {\n    m = 2.0 * iMouse.xy / iResolution.y - vec2(iResolution.x / iResolution.y, 1.0);\n  }\n    // If mouse outside unit circle, inversion is imaginary!\n  if (true/*length(m) < 0.999*/) {\n    vec2 c = m*(1.0/dot(m,m));\n    z = invert(z,vec3(c,dot(c,c)-1.0));\n  }\n\n  vec3 data = gasket(z);\n  vec3 baseColor = getCol(data);\n  fragColor = vec4(pow(baseColor, vec3(1.2)),1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}