{
    "Shader": {
        "info": {
            "date": "1658317428",
            "description": "Computing the SDF of a limited number of copies of a base SDF object constrained to a circle.",
            "flags": 0,
            "hasliked": 0,
            "id": "fdVBDw",
            "likes": 41,
            "name": "Circle Repetition SDF",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "repetition",
                "limited"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 924
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Computing the SDF of a limited number of copies of a base\n// SDF object constrained to a circle.\n\n// Related techniques:\n//\n// Elongation  : https://www.shadertoy.com/view/Ml3fWj\n// Rounding    : https://www.shadertoy.com/view/Mt3BDj\n// Onion       : https://www.shadertoy.com/view/MlcBDj\n// Metric      : https://www.shadertoy.com/view/ltcfDj\n// Combination : https://www.shadertoy.com/view/lt3BW2\n// Repetition  : https://www.shadertoy.com/view/3syGzz\n// Extrusion2D : https://www.shadertoy.com/view/4lyfzw\n// Revolution2D: https://www.shadertoy.com/view/4lyfzw\n//\n// More information here: https://iquilezles.org/articles/distfunctions\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// the SDF we want to repeat\nfloat sdBase( in vec2 p, vec2 id, float sp, in float time )\n{\n    float d;\n    if( sin(time/2.0)>0.0 )\n    {\n        d = sdBox( p, vec2(0.1,0.1)*sp ) - 0.2*sp;\n    }\n    else\n    {\n        if( mod(id.x+id.y,2.0)>0.5 )\n          d = sdBox( p, vec2(0.2*sp) );\n        else\n          d = sdBox( p, vec2(0.2,0.02)*sp ) - 0.3*sp;\n    }\n    return d;\n}\n\n// the point of this shader\nfloat sdCircularRepetition( in vec2 p, float ra, float sp, float time )\n{\n    // make grid\n    vec2 id0 = round(p/sp);\n    \n    // snap to circle\n    if( dot(id0,id0)>ra*ra ) id0 = round(normalize(id0)*ra);\n    \n    // scan neighbors\n    float d = 1e20;\n    for( int j=-2; j<=2; j++ ) // increase this search window\n    for( int i=-2; i<=2; i++ ) // for large values of ra\n    {\n        vec2 id = id0 + vec2(i,j);\n        if( dot(id,id)<=ra*ra )\n        {\n            vec2 q = p-sp*id;\n            d = min( d, sdBase(q,id,sp,time) );\n        }\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\t\n    float time = iTime + 0.001;\n    \n    // circle radius and cell size, to be tuned for your needs\n    float ra = floor(3.0 + 8.0*(0.5-0.5*cos(time)));\n    float sp = 0.8/ra;\n\n    // sdf\n    float d = sdCircularRepetition( p, ra, sp, time );\n    \n    // colorize\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-32.0*abs(d));\n\tcol *= 0.8 + 0.2*cos( 120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.009,abs(d)) );\n   \n    if( iMouse.z>0.001 )\n    {\n    d = sdCircularRepetition( m, ra, sp, time );\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}