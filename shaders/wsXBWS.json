{
    "Shader": {
        "info": {
            "date": "1588966557",
            "description": "fiddling with different sampling methods to get cool effects",
            "flags": 0,
            "hasliked": 0,
            "id": "wsXBWS",
            "likes": 79,
            "name": "Comic Blobs",
            "published": 3,
            "tags": [
                "blobs",
                "npr",
                "comic"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 3541
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat bayer(ivec2 uv) {\n    return texelFetch(iChannel0,uv % 8,0).x;\n}\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(vec2 k) {\n  int x = FK(k.x);int y = FK(k.y);\n  return float((x*x-y)*(y*y+x)-x)/2.14e9;\n}\n\nfloat hash3(vec3 k) {\n  float h1 = hash(k.xy);\n  return hash(vec2(h1, k.z));\n}\n\nvec3 hash33(vec3 k) {\n  float h1 = hash3(k);\n  float h2 = hash3(k*h1);\n  float h3 = hash3(k*h2);\n  return vec3(h1, h2, h3);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nvec3 sphercoord(vec2 p) {\n  float l1 = acos(p.x);\n  float l2 = acos(-1.)*p.y;\n  return vec3(cos(l1), sin(l1)*sin(l2), sin(l1)*cos(l2));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(p,ax)*ax, p, cos(ro)) + sin(ro)*cross(p,ax);\n}\n\nfloat comp(vec3 p, vec3 ro, float t) {\n  vec3 ax = sphercoord(ro.xy);\n  p.z -= t;\n  p = erot(p, ax, ro.z*acos(-1.));\n  float scale = 4. + hash(ro.xz)*0.5+0.5;\n  p = (fract(p/scale)-0.5)*scale;\n  return length(p) - 0.8;\n}\n\nfloat scene(vec3 p) {\n  float rad = 3.+p.z+sin(p.y/2.+iTime)+cos(p.x/3.+iTime*0.9);\n  float dist = 10000.;\n  for (int i = 0; i < 4; i++) {\n    vec3 rot = hash33(vec3(float(i+1), cos(float(i)), sin(float(i))));\n    float d = comp(p, rot, iTime/2.*(float(i+1)));\n    dist = smin(dist, d, 1.);\n  }\n  return mix(dist, rad, mix(0.3,0.8+sin(iTime)*0.2, 0.1));\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.1);\n  return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nfloat march(vec3 p, vec3 bias, float seed) {\n    for (int i = 0; i < 10; i++) {\n        p += normalize(bias+tan(hash33(vec3(float(i),seed,2.))))*scene(p);\n    }\n    return sqrt(smoothstep(0.0,2.0,scene(p)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  \n  vec3 cam = normalize(vec3(4.,uv));\n  vec3 init = vec3(-50,0,sin(iTime*0.37)*1.4);\n  cam = erot(cam, vec3(0,1,0), -0.5);\n  init = erot(init, vec3(0,1,0), -0.5);\n\n  vec3 p = init;\n  bool hit = false;\n  bool trig = false;\n  bool outline = false;\n  for (int i = 0; i < 500 && !hit; i++) {\n    float dist = scene(p);\n    if (dist<0.08) trig = true;\n    if (trig) {\n      float odist = 0.09-dist;\n      outline = odist<dist;\n      dist = min(dist,odist);\n    }\n    hit = dist*dist < 1e-6;\n    p += dist*cam;\n  }\n  vec3 n = norm(p);\n  vec3 r = reflect(cam,n);\n  vec2 ao = vec2(0);\n  for (int i = 0; i < 8; i++) {\n    ivec2 id = (ivec2(fragCoord/16.+vec2(iTime*10.,iTime*20.)) % 2)*2-1;\n    ao += vec2(march(p+n*0.1, r, bayer(ivec2(fragCoord)+i+ivec2(i/4,0))) , 1.);\n  }\n  ao.x/=ao.y;\n\n  fragColor.xyz = hit&&!outline ? vec3(ao.x) : vec3(0.);\n  fragColor.xyz = pow(smoothstep(vec3(0),vec3(1),sqrt(fragColor.xyz)),vec3(1.7,1.6,1.5));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}