{
    "Shader": {
        "info": {
            "date": "1546708499",
            "description": "Shader showdown practice session 001: Making a shader in 25 minutes from memory.\nPractising live on TWITCH every tuesdays around 20:30 UK time.\nhttps://www.twitch.tv/evvvvil_\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3dsGzS",
            "likes": 10,
            "name": "[TWITCH] Double-mod Twisterooney",
            "published": 3,
            "tags": [
                "time",
                "demoscene",
                "shader",
                "modulo",
                "double",
                "limit",
                "live",
                "twist",
                "battle",
                "shadershowdown",
                "coding",
                "twitch",
                "showdown"
            ],
            "usePreview": 0,
            "username": "evvvvil",
            "viewed": 787
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////\n// WHAT THE FUCK IS THE SHADER SHOWDOWN?\n\n// The \"Shader Showdown\" is a demoscene live-coding shader battle competition.\n// 2 coder battle for 25 minutes making a shader from memory on stage. \n// The audience votes for the winner by making noise or by voting on their phone.\n// Winner goes through to the next round until the final where champion is crowned.\n// Live coding shader software used is BONZOMATIC made by Gargaj from Conspiracy:\n// https://github.com/Gargaj/Bonzomatic\n\n// Every tuesdays around 20:00 UK time I practise live on TWITCH.\n// This is the result of session 001.\n\n// COME SEE LIVE CODING EVERY TUESDAYS HERE: https://www.twitch.tv/evvvvil_\n\n// evvvvil / DESiRE demogroup\n// (Apologies for the lack of comments, next sessions will be commented...)\n\nvec2 sc,e=vec2(.00035,-.00035);float t,tt; vec3 newPos;\n\nfloat mx(vec3 p){return max(max(p.x,p.y),p.z);}\nfloat bo(vec3 p,vec3 r){return mx(abs(p)-r);}\n\nvec2 fb( vec3 p)\n{\n  vec2 h,t=vec2(.8*bo(p,vec3(1,.5,6)),5);\n  t.x=min(t.x,.8*bo(p-vec3(1,0,0),vec3(.2,1,1.5)));\n  t.x=min(t.x,.8*bo(p+vec3(1,0,0),vec3(.2,1,1.5)));\n  h=vec2(.8*bo(abs(p)-vec3(.25,0,1.7),vec3(.15,1,1.4)),3);\n  t=(t.x<h.x)?t:h;\n  return t;\n}\n\nmat2 r2(float r){ return mat2(cos(r),sin(r),-sin(r),cos(r));}\n\nvec2 mp( vec3 p)\n{\n  vec2 t;\n  p.z=mod(p.z+tt*10.,50.)-25.;//clones it along z\n  p.yx*=r2(sin(p.z*0.05+tt)*2.);//rotate it along z\n  newPos=p;\n  newPos.z=mod(p.z+tt*10.,25.)-12.5;\n  float att=clamp(length(p)-1.5,3.,13.);\n  for(int i=0;i<4;i++){\n    newPos=abs(newPos)-vec3(0.5+att*0.3,0.5+att*0.1,2);\n    newPos.yx*=r2(abs(cos(p.z*0.05*float(i))));\n  }\n  t=fb(newPos);\n  t.x=max(t.x,bo(p,vec3(15,15,23)));\n  return t;\n}\n\nvec2 tr( vec3 ro,vec3 rd )\n{\n  vec2 h,t=vec2(.1);\n  for(int i=0;i<128;i++){\n    h=mp(ro+rd*t.x);\n    if(h.x<.0001||t.x>60.) break;\n    t.x+=h.x;t.y=h.y;\n  }\n  if(t.x>60.) t.x=0.;\n  return t;\n}\n\nfloat noise(vec3 p){\n  \tvec3 ip=floor(p);p-=ip; \n    vec3 s=vec3(7,157,113);\n    vec4 h=vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p); \n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\nvec3 sky(vec3 rd){return clamp(vec3(.4,.4,.5)-rd.y*.3,0.,1.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  tt=mod(iTime,100.);\n  vec3 ro=vec3(0,0,-10),\n  cw=normalize(vec3(sin(tt)*10.,0,cos(tt)*3.)-ro),\n  cu=normalize(cross(cw,vec3(0,1,0))),\n  cv=normalize(cross(cu,cw)),\n  rd=normalize(mat3(cu,cv,cw)*vec3(uv,.5)),\n  co,fo,ld=normalize(vec3(-.3,0,.3));co=fo=sky(rd);\n  sc=tr(ro,rd);t=sc.x;\n\n  if(t>0.){\n    vec3 po=ro+rd*t,\n    no=normalize(e.xyy*mp(po+e.xyy).x+\n    e.yyx*mp(po+e.yyx).x+\n    e.yxy*mp(po+e.yxy).x+\n    e.xxx*mp(po+e.xxx).x),al=vec3(.5);\n    if(sc.y<5.) al=vec3(1,.5,0);\n    //LIGHTING MICRO ENGINE\n    float dif=max(0.,dot(no,ld)),\n    aor=t/50.,\n    ao=exp2(-2.*pow(max(0.,1.-mp(po+no*aor).x/aor),2.)),\n    spo= exp2(5.0+3.0*noise(newPos/vec3(.2,.4,.6))),\n    fresnel=pow(1.+dot(no,rd),4.);\n    vec3 sss=vec3(.5)*smoothstep(0.,1.,mp(po+ld*0.4).x/0.4),\n    spec=vec3(2)*pow(max(0.,dot(no,normalize(ld-rd))),spo)*spo/32.;\n    co=mix(spec+al*(0.8*ao+.2)*(dif+sss),sky(rd),fresnel);\n    co=clamp(co,0.,1.);\n    co=mix(co,fo,1.-exp(-.00002*t*t*t));\n  }\n  fragColor = vec4(pow(co,vec3(0.45)),1);\n}\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}