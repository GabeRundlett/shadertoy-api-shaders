{
    "Shader": {
        "info": {
            "date": "1573275214",
            "description": "horse world welcome",
            "flags": 64,
            "hasliked": 0,
            "id": "3sVXzz",
            "likes": 12,
            "name": "Horse World",
            "published": 3,
            "tags": [
                "horse"
            ],
            "usePreview": 0,
            "username": "wessles",
            "viewed": 452
        },
        "renderpass": [
            {
                "code": "float opUnion(float d1, float d2) {\n    return min(d1, d2);\n}\n\nfloat sdCircle(vec2 p, vec2 c, float r) {\n    return length(p-c)-r;\n}\n\nfloat sdBox( vec2 p, vec2 c, vec2 b )\n{\n    p -= c;\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdLine( vec2 p, vec2 a, vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 translate(vec2 p, vec2 t) {\n    return p-t;\n}\n\nfloat horseDist(vec2 uv){\n    float t = iTime*17.;\n    vec2 body = vec2(0., 100.);\n    vec2 behind = body + vec2(-100., 20.);\n    vec2 front = body + vec2(100., 0.);\n    \n    front += 20.*sin(t);\n    behind += 30.*cos(t)*vec2(0.2, 1.3);\n    \n    vec2 tail_start = behind+vec2(-70., 5.);\n    vec2 tail_end = tail_start + vec2(-70., 35.*cos(t*1.2));\n    vec2 tail_mid = (tail_start+tail_end)/2. + vec2(0.,1.)*50.*sin(t*1.2);\n    \n    vec2 backleg_top = behind;\n    vec2 backleg_mid = backleg_top+vec2(50.*cos(-t), -150.);\n    vec2 backleg_bottom = backleg_mid + vec2(50.*sin(t), -70.*sin(t));\n    \n    float ft = t+1.9;\n    vec2 frontleg_top = front;\n    vec2 frontleg_mid = frontleg_top+vec2(50.*cos(-ft), -150.);\n    vec2 frontleg_bottom = frontleg_mid + vec2(50.*sin(ft), -70.*sin(t));\n    \n    vec2 head = front+vec2(100., 70.);\n    vec2 nose = head+vec2(100., -50.);\n    \n    head.y += 15.*sin(t*1.3-1.5);\n    nose += 30. * sin(t*1.1);\n    \n    vec2 eye_p = head;\n    vec2 ears = head+vec2(-20., 30.);\n    vec2 ears_end = head+vec2(-70., 50.)+sin(t*1.1)*10.*vec2(0., 1.);\n    \n    eye_p += sin(t)* vec2(-5., -5.);\n    \n    float d1 = sdCircle(uv, behind, 70.);\n    float d2 = sdCircle(uv, front, 50.);\n    float d3 = sdBox(uv,body, vec2(50., 50.));\n    \n    float tail = sdBezier(uv, tail_start, tail_mid, tail_end)-5.;\n    \n    float backleg = sdBezier(uv, backleg_top, backleg_mid, backleg_bottom)-15.;\n    float frontleg = sdBezier(uv, frontleg_top, frontleg_mid, frontleg_bottom)-15.;\n    \n    float neck = sdLine(uv, front, head)-20.;\n    float nasal = sdLine(uv, head, nose)-15.;\n    float eye = sdCircle(uv, eye_p, 10.);\n    \n    float ear = sdLine(uv, ears, ears_end)-4.;\n    \n    float d = smin(d1, d2, 50.);\n    d = smin(d, d3, 100.);\n    d = smin(d, backleg, 30.);\n    d = smin(d, frontleg, 30.);\n    d = smin(d, neck, 70.);\n    d = smin(d, nasal, 100.);\n    d = max(d, -eye);\n    d = smin(d, tail, 40.);\n    d = smin(d, ear, 30.);\n    \n    return d;\n}\n\nfloat sdParabola( in vec2 pos, in float k )\n{    \n    pos.x = abs(pos.x);\n    \n    float p = (1.0-2.0*k*pos.y)/(6.0*k*k);\n    float q = -abs(pos.x)/(4.0*k*k);\n    \n    float h = q*q + p*p*p;\n    float r = sqrt(abs(h));\n\n    float x = (h>0.0) ? \n        pow(-q+r,1.0/3.0) - pow(abs(-q-r),1.0/3.0)*sign(q+r) :\n        2.0*cos(atan(r,-q)/3.0)*sqrt(-p);\n    \n    return length(pos-vec2(x,k*x*x)) * sign(pos.x-x);\n}\n\nmat2 rotate(float theta) {\n    return mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 uv )\n{   \n    \n    uv /= iResolution.y;\n    uv = uv*2.-1.;\n    uv = uv*500.;\n    \n    uv *= rotate(sin(iTime*2.)*0.5);\n    uv *= 1.+sin(iTime*9.)*0.3;\n    float d;\n    \n    d = sdCircle(uv, vec2(0., -500.), 400.);\n    d = min(d, horseDist(translate(uv, vec2(sin(iTime), 0.)*100.)));\n    // improvement for AA by FabriceNeyret2\n    //d = step(d, 10000./exp(iTime*10.));\n    d = smoothstep( 1.5*1000./iResolution.y,0., d - 10000./exp(iTime*10.));\n    \n    \n    float ct = iTime*5.;\n    vec3 col = vec3(0.5+0.5*sin(ct), .5+.5*cos(ct*1.3), .5+.5*cos(ct*1.5));\n    col *= 0.5;\n    col += d;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 20206,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/atlas4550/initial-d-running-in-the-90s"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = uv.x + uv.y - kx;\n        t = clamp( t, 0.0, 1.0 );\n        vec2 qos = d + (c + b*t)*t;\n        res = dot(qos,qos);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n        t = clamp( t, 0.0, 1.0 );\n        vec2 qos = d + (c + b*t.x)*t.x;\n        res = dot(qos,qos);\n        qos = d + (c + b*t.y)*t.y;\n        res = min(res,dot(qos,qos));\n        qos = d + (c + b*t.z)*t.z;\n        res = min(res,dot(qos,qos));\n    }\n    return sqrt( res );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}