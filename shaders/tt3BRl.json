{
    "Shader": {
        "info": {
            "date": "1613234636",
            "description": "I've been always wondering how to best visualize the basic quality of sound data provided by shadertoy. ",
            "flags": 0,
            "hasliked": 0,
            "id": "tt3BRl",
            "likes": 4,
            "name": "What's in the sound texture?",
            "published": 3,
            "tags": [
                "sound",
                "visualization",
                "audio"
            ],
            "usePreview": 0,
            "username": "morisil",
            "viewed": 472
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 soundUv = vec2(\n        uv.x,\n        uv.y < .5 ? .25 : .75\n    );\n    float sound = texture(iChannel0, soundUv).r;\n    float signalY = mod(uv.y, .5) * 2.;\n    float signal = step(signalY, sound);\n    vec3 color = TurboColormap(sound) * signal;\n    fragColor = vec4(\n        color,\n        1.0\n    );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float saturate (float x)\n{\n  return min(1.0, max(0.0, x));\n}\n\n// Copyright 2019 Google LLC.\n// SPDX-License-Identifier: Apache-2.0\n\n// Polynomial approximation in GLSL for the Turbo colormap\n// Original LUT: https://gist.github.com/mikhailov-work/ee72ba4191942acecc03fe6da94fc73f\n\n// Authors:\n//   Colormap Design: Anton Mikhailov (mikhailov@google.com)\n//   GLSL Approximation: Ruofei Du (ruofei@google.com)\n\nvec3 TurboColormap(in float x) {\n  const vec4 kRedVec4 = vec4(0.13572138, 4.61539260, -42.66032258, 132.13108234);\n  const vec4 kGreenVec4 = vec4(0.09140261, 2.19418839, 4.84296658, -14.18503333);\n  const vec4 kBlueVec4 = vec4(0.10667330, 12.64194608, -60.58204836, 110.36276771);\n  const vec2 kRedVec2 = vec2(-152.94239396, 59.28637943);\n  const vec2 kGreenVec2 = vec2(4.27729857, 2.82956604);\n  const vec2 kBlueVec2 = vec2(-89.90310912, 27.34824973);\n\n  x = saturate(x);\n  vec4 v4 = vec4( 1.0, x, x * x, x * x * x);\n  vec2 v2 = v4.zw * v4.z;\n  return vec3(\n  dot(v4, kRedVec4)   + dot(v2, kRedVec2),\n  dot(v4, kGreenVec4) + dot(v2, kGreenVec2),\n  dot(v4, kBlueVec4)  + dot(v2, kBlueVec2)\n  );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}