{
    "Shader": {
        "info": {
            "date": "1503246245",
            "description": " A texture-based font was introduced in otaviogood's \"SDF Texture Font\";\n cell marching removes the artifacts that occur with simple ray marching\n (mouse enabled).\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ltsyRr",
            "likes": 29,
            "name": "Font3d",
            "published": 3,
            "tags": [
                "texture",
                "font",
                "cells"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 1187
        },
        "renderpass": [
            {
                "code": "// \"Font3d\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txFnt iChannel0\n\nvec3 ltDir;\nvec2 qnTex;\nfloat dstFar, txDep;\nconst float pi = 3.14159;\n\nfloat FontTexDf (vec2 p)\n{\n  vec3 tx;\n  vec2 ip;\n  float d;\n  int ic;\n  ip = floor (p);\n  ic = 0x21 + int (mod (16. + ip.x + 2. * ip.y, 94.));\n  tx = texture (txFnt, mod ((vec2 (mod (float (ic), 16.),\n     15. - floor (float (ic) / 16.)) + fract (p)) * (1. / 16.), 1.)).gba - 0.5;\n  qnTex = vec2 (tx.r, - tx.g);\n  d = tx.b + 1. / 256.;\n  return d;\n}\n\nfloat ObjRayT (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 srd, dda, h;\n  float dHit, dLim, d;\n  srd = 1. - 2. * step (0., rd.xz);\n  dda = 1. / (abs (rd.xz) + 0.0001);\n  dHit = max ((abs (ro.y) - txDep - 0.02) / (abs (rd.y) + 0.001), 0.);\n  dLim = min ((abs (ro.y) + txDep) / (abs (rd.y) + 0.001), dstFar);\n  for (int j = 0; j < 160; j ++) {\n    p = ro + dHit * rd;\n    h = fract (dda * fract (srd * p.xz));\n    d = max (FontTexDf (p.xz), abs (p.y) - txDep);\n    dHit += min (d, 0.01 + min (h.x, h.y));\n    if (d < 0.0001 || dHit > dLim) break;\n  }\n  if (d >= 0.0001) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, bgCol, vn;\n  float dstTxt;\n  bgCol = vec3 (0.6 + 0.3 * rd.z);\n  dstTxt = ObjRayT (ro, rd);\n  if (dstTxt < dstFar) {\n    ro += rd * dstTxt;\n    col = vec3 (0.8, 0.8, 1.);\n    if (abs (ro.y) < 0.25 - 0.001) vn = normalize (vec3 (qnTex.x, 0.00001, qnTex.y));\n    else {\n      vn = vec3 (0., sign (ro.y), 0.);\n      col = vec3 (1., 0.3, 0.3);\n    }\n    col = col * (0.2 + 0.8 * max (dot (ltDir, vn), 0.)) +\n       0.5 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    col = mix (col, bgCol, pow (min (dstTxt / dstFar, 1.), 5.));\n  } else col = bgCol;\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, tCur;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  if (mPtr.z > 0.) {\n    az = -0.5 * pi - 3. * pi * mPtr.x;\n    el = 0.01 * pi - 1.5 * pi * mPtr.y;\n  } else {\n    az = -0.03 * pi * tCur;\n    el = 0.01 * pi;\n  }\n  rd = normalize (vec3 (uv, 4.));\n  ro = vec3 (0., 0., -20.);\n  ltDir = normalize (vec3 (1., 1., -1.));\n  rd.xz = Rot2D (rd.xz, 0.5 * pi + az);\n  rd.yz = Rot2D (rd.yz, 0.5 * pi + el);\n  ro.xz = Rot2D (ro.xz, 0.5 * pi + az);\n  ro.yz = Rot2D (ro.yz, 0.5 * pi + el);\n  ltDir.xz = Rot2D (ltDir.xz, 0.5 * pi + az);\n  ltDir.yz = Rot2D (ltDir.yz, 0.5 * pi + el);\n  ro.x += tCur;\n  txDep = 0.25;\n  dstFar = 100.;\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (clamp (col, 0., 1.), 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}