{
    "Shader": {
        "info": {
            "date": "1642480217",
            "description": "dfdfd",
            "flags": 0,
            "hasliked": 0,
            "id": "sssyRj",
            "likes": 5,
            "name": "WTFForest",
            "published": 3,
            "tags": [
                "fdfd"
            ],
            "usePreview": 0,
            "username": "antoinefortin",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "mat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s,s,c);\n    \n    \n    \n}\n\nvec2 rotate(vec2 pos, float angle)\n{\n\tfloat c = cos(angle);\n    float s = sin(angle);\n    \n    return mat2(c,s,-s,c) * pos;\n\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\n\n/* SDF */\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdSphere(vec3 pos, float r)\n{\n\treturn length(pos) - r;\n}\n\nfloat sdPlane(vec3 pos)\n{\n\n    /* DICK */\n    \n    \n\tfloat x =  pos.y + (texture(iChannel0, pos.xz * 0.009f  ).x * 2.5) ;\n    return x * .5;\n}\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nvec2 opu(vec2 d1, vec2 d2)\n{\n\treturn (d1.x < d2.x) ? d1 : d2;\n}\n\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\n\nfloat h(vec2 p)\n{\n    \n\tfloat ba = texture(iChannel1, p * 0.055 * sin(p.y)).x ;    \n    float b = (sin(p.x * 2.))  ;\n    \n    b*=  ba * sin( cos( 2.)) * abs(sin(1.) + 1.25);\n    b *= b - abs(sin(iTime));\n    return -b - 1.2;\n}\n\n\n\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\n\nfloat leaf(vec3 pos)\n{\n    float r = 1.0f;\n    vec3 q = pos;\n    r = sdOctahedron(pos + vec3(0.0f, -4.4f, 0.0f), 1.0);\n    pos = abs(pos);\n    pos.xy = rotate(pos.xy, .2);\n    float r2 = sdOctahedron(pos + vec3(0.0f, -4.4f, 0.0f), 1.0);\n    \n    \n    pos.xz = rotate(pos.xz, .5);\n    float r3 = sdOctahedron(pos + vec3(0.5f, -4.4f, -0.2f), .75);\n    \n    pos.y -= 1.85;\n    pos.yz = rotate(pos.yz, 5.);\n    float r4 = sdOctahedron(pos + vec3(-.5f, -1.4f, 1.f), .75);\n    \n    \n    \n    pos = q;\n    \n    \n    \n    return min(r, min(r2, min(r3, r4)));\n}\n\nfloat trunk(vec3 pos)\n{\n    vec3 q = pos;\n    float res = 1.0f;\n    \n    q.xz *= rot(q.y * 1.15);\n    \n    res = sdBox(q, vec3(.24,3.75, .25));\n    \n    q = pos;\n    q = abs(pos);\n    q.z += .15;\n      q.xz = rotate(q.xz, 0.015); \n    \n    q.xy *= rot(.85);\n    \n     \n    q.xz *= rot(q.y * ( .15));\n    \n    \n    \n  \n    \n    float t2 = sdBox(q + vec3(1.5, -2., 0.0), vec3(.014,1.22, .125));\n    \n    res = min(res, t2);\n    \n    return res * .5;\n}\n\n/* Pine tree */\n\nfloat pineLeaf()\n{\n    return 0.0f;\n}\n\nvec2 map(vec3 pos)\n{\n    \n    float theFloor = sdPlane(pos);\n    \n    \n    float box = sdBox(pos, vec3(1.));\n    float sphere = sdSphere(pos + vec3(0.0, -1., 0.), 1.0);\n\t\n\n    \n    vec2 res =     vec2(theFloor,       2.0 /*Object ID*/);\n     \n     \n    pos.x = mod(pos.x+ 5., 10.) -5.;\n    pos.z += sin(iTime);\n    pos.z = mod(pos.z+ 7.5f, 15.0f) -7.5f;\n    \n    float trunk = trunk(pos);\n    float leaf= leaf(pos);\n    \n    res = opu(res, vec2(trunk,     4.0 /*Object ID*/));\n    res = opu(res, vec2(leaf,     5.0 /*Object ID*/));\n    \n    \n//    res = opu(res, vec2(arms, 3.));\n    return res;\n}\n\n\nvec2 castRay(vec3 ro, vec3 rd)\n{\n\n    float t = 0.0;\n    float id = -20.;\n\tfloat farClippingPlane = 120.0;\n    \n    for(int i = 0; i < 256; i++)\n    {\n        \n    \tvec3 pos = ro + t * rd;\n        float h = map(pos).x;\n        id = map(pos).y;\n        \n        if(h < 0.001)\n        {\n        \tbreak;\n        }\n        t += h;\n        if(t > farClippingPlane) break;\n        \n    }\n    \n    if(t > farClippingPlane) t = -1.0;\n    \n    return vec2(t, id);\n}\n\nvec3 calcNormal(vec3 pos)\n{\n    vec2 e = vec2(0.01, 0.0);\n    \n\treturn normalize(vec3(\n        \t\t\t\t\tmap(pos+e.xyy).x - map(pos-e.xyy).x,\n        \t\t\t\t\tmap(pos+e.yxy).x - map(pos-e.yxy).x,\n        \t\t\t\t\tmap(pos+e.yyx).x - map(pos-e.yyx).x\n    \t\t\t\t));\n}\n\nvoid resetToZero(inout vec3 r)\n{\n\tr = vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n\tvec3 ro = vec3(0. + iTime, 7.55 ,-4.5);\n\t//vec3 rd = normalize(vec3(uv.x, uv.y - .2,1.)); \n    ro.yz *= Rot(-m.y+.4);\n    ro.xz *= Rot(m.x * 12.);\n\tvec3 rd = R(uv, ro, vec3(0,.5,iTime), .7);\n    \n    \n\tvec3 col = vec3(sin(uv.x * ro.y), cos(uv.y * ro.y), cos(uv.y + ro.x));\n\t\n\tvec3 ttt = texture(iChannel1, uv * sin(ro.y)).rgb;\n    col *= ttt;\n    \n\tfloat hitDistance = castRay(ro, rd).x;\n    float objectId = castRay(ro, rd).y;\n    \n    vec3 unfinishedSky;\n    \n\n    \n    \n    if(hitDistance > 0.)\n    {\n       \tvec3 debugColor = vec3(1.);\n        vec3 pos = ro + hitDistance * rd;\n        vec3 normalWS = calcNormal(pos);\n\n        /* Global Lighting section */\n        \n        // Sky\n        vec3 skyColor = vec3(.4, 0.75, 1.0);\n\t\tfloat skyMovement = .5;\n        vec3 skyColFactor = skyColor - abs( .5 + sin(iTime * skyMovement)) * rd.y * rd.x;\n\t\t\n        // Basic lighting\n        vec3 sunPos = normalize(vec3(6.5, 12.4, 5.52));\n        vec3 sundir = normalize(vec3(0.2, 0.4, 0.2));\n        float sundif = clamp(dot(normalWS, sunPos), 0.0, 1.0);\n        float sun_sha = smoothstep(castRay(pos + normalWS * 0.001, sundir).x,0., 1.);\n        float sky_dif = clamp(dot(normalWS,vec3(0.0,1.0,0.0)), 0.0, 1.0);;\n        \n        col = vec3(1.0, 0.7, 0.5) * sundif * sun_sha;\n        col += vec3(0.0, 0.2, 0.4) * sky_dif;\n        \n        //col = skyColFactor;\n        /*End of Global Lighting section */\n        \n        \n        bool materialSystem = true;\n        \n        if(materialSystem)\n        {\n            float blendingFactor = .5;\n            \n            if(objectId == 2.0)\n            {\n                col *= vec3(.21, .25, .15) * sundif * sun_sha;\n            }\n            \n\t\t\t// Sphere\n        \tif(objectId == 4.0) \n        \t{\n            //165,42,42\n            //rgb(110, 38, 14)\n                col = vec3(110.0f / 255.0f, 38.0f / 255.0f, 14.0f / 255.0f) *sundif;\n                col += vec3(.12 * sin(pos.x), .12, .12);\n        \t} \n            \n            if(objectId == 5.0) \n        \t{\n            //165,42,42\n            //rgb(110, 38, 14)\n            \n                for(int i = 0; i < 4; i++)\n                {\n                col += vec3(0.0f, .1 * sin(float(i)), .0f);\n                }\n                \n                //col += vec3(sin(pos).x, sin(pos).y + 1.5, .0f);\n        \t} \n            \n            \n        }\n\n        \n        col = col;\n       \n        /*\n       \tvec3 sundir = normalize(vec3(0.2, 0.4, 0.2));\n        float sundif = clamp(dot(nor, sundir), 0.0, 1.0);\n        float sun_sha = smoothstep(castRay(pos + nor * 0.001, sundir).x,0., 1.);\n        float sky_dif = clamp(dot(nor,vec3(0.0,1.0,0.0)), 0.0, 1.0);;\n        \n        col = vec3(1.0, 0.7, 0.5) * sundif * sun_sha;\n        col += vec3(0.0, 0.2, 0.4) * sky_dif;\n\t\tcastRay(ro, rd).x */    \n\t}\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}