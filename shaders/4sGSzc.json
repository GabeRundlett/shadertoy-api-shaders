{
    "Shader": {
        "info": {
            "date": "1465593017",
            "description": "use mouse to control the cam (outside of the tunnel if you want)\n\nwhat you see in the pattern ? i see a head :)",
            "flags": 0,
            "hasliked": 0,
            "id": "4sGSzc",
            "likes": 41,
            "name": "Lace Tunnel",
            "published": 3,
            "tags": [
                "tunnel",
                "lace"
            ],
            "usePreview": 1,
            "username": "aiekick",
            "viewed": 3690
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\n//#define ANALYSE_RM\n\n#ifdef ANALYSE_RM\n/////////////////////////\n// GLSL Number Printing - @P_Malin (CCO 1.0)=> https://www.shadertoy.com/view/4sBSWW\nfloat DigitBin(const in int x){\n    if(x==0) return 480599.0; if(x==1) return 139810.0; if(x==2) return 476951.0; if(x==3) return 476999.0;\tif(x==4) return 350020.0; \n    if(x==5) return 464711.0; if(x==6) return 464727.0; if(x==7) return 476228.0; if(x==8) return 481111.0; if(x==9) return 481095.0; \n    return 0.0;}\nfloat PrintValue(vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces){\n    vec2 vStringCharCoords = (fragCoord.xy - vPixelCoords) / vFontSize;\n    if ((vStringCharCoords.y < 0.0) || (vStringCharCoords.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCharCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n            if((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;} \n        else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;} \n            else {\n\t\t\t\tif(fDigitIndex < 0.0) fDigitIndex += 1.0;\n\t\t\t\tfloat fDigitValue = (abs(fValue / (pow(10.0, fDigitIndex))));\n                float kFix = 0.0001;\n                fCharBin = DigitBin(int(floor(mod(kFix+fDigitValue, 10.0))));} } }\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCharCoords.x) * 4.0) + (floor(vStringCharCoords.y * 5.0) * 4.0))), 2.0));}\nvec3 WriteValueToScreenAtPos(vec2 fragCoord, float vValue, vec2 vPixelCoord, vec3 vColour, vec2 vFontSize, float vDigits, float vDecimalPlaces, vec3 vColor){\n    float num = PrintValue(fragCoord, vPixelCoord, vFontSize, vValue, vDigits, vDecimalPlaces);\n    return mix( vColour, vColor, num);}\n\n/////////////////////////////////////////////////////////////////\n#endif\n\nvec2 mo = vec2(0);\n\nfloat pn( in vec3 x ) // iq noise\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture(iChannel0, (uv+ 0.5)/256.0, -100.0 ).yx;\n\treturn -1.0+2.4*mix( rg.x, rg.y, f.z );\n}\n\nvec2 path(float t)\n{\n\treturn vec2(cos(t*0.2), sin(t*0.2)) * 2.;\n}\n\nconst mat3 mx = mat3(1,0,0,0,7,0,0,0,7);\nconst mat3 my = mat3(7,0,0,0,1,0,0,0,7);\nconst mat3 mz = mat3(7,0,0,0,7,0,0,0,1);\n\n// base on shane tech in shader : One Tweet Cellular Pattern\nfloat func(vec3 p)\n{\n    p = fract(p/68.6) - .5;\n    return min(min(abs(p.x), abs(p.y)), abs(p.z)) + 0.1;\n}\n\nvec3 effect(vec3 p)\n{\n\tp *= mz * mx * my * sin(p.zxy); // sin(p.zxy) is based on iq tech from shader (Sculpture III)\n\treturn vec3(min(min(func(p*mx), func(p*my)), func(p*mz))/.6);\n}\n//\n\nvec4 displacement(vec3 p)\n{\n    vec3 col = 1.-effect(p*0.8);\n   \tcol = clamp(col, -.5, 1.);\n    float dist = dot(col,vec3(0.023));\n\tcol = step(col, vec3(0.82));// black line on shape\n    return vec4(dist,col);\n}\n\nvec4 map(vec3 p)\n{\n\tp.xy -= path(p.z);\n    vec4 disp = displacement(sin(p.zxy*2.)*0.8);\n\tp += sin(p.zxy*.5)*1.5;\n    float l = length(p.xy) - 4.;\n    return vec4(max(-l + 0.09, l) - disp.x, disp.yzw);\n}\n\nvec3 nor( in vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\nvec4 light(vec3 ro, vec3 rd, float d, vec3 lightpos, vec3 lc)\n{\n\tvec3 p = ro + rd * d;\n\t\n\t// original normale\n\tvec3 n = nor(p, 0.1);\n\t\n\tvec3 lightdir = lightpos - p;\n\tfloat lightlen = length(lightpos - p);\n\tlightdir /= lightlen;\n    \n\tfloat amb = 0.6;\n\tfloat diff = clamp( dot( n, lightdir ), 0.0, 1.0 );\n\t    \n\tvec3 brdf = vec3(0);\n\tbrdf += amb * vec3(0.2,0.5,0.3); // color mat\n\tbrdf += diff * 0.6;\n\t\n\tbrdf = mix(brdf, map(p).yzw, 0.5);// merge light and black line pattern\n\t\t\n\treturn vec4(brdf, lightlen);\n}\n\nvec3 stars(vec2 uv, vec3 rd, float d, vec2 s, vec2 g)\n{\n\tuv *= 800. * s.x/s.y;\n\tfloat k = fract( cos(uv.y * 0.0001 + uv.x) * 90000.);\n\tfloat var = sin(pn(d*0.6+rd*182.14))*0.5+0.5;// thank to klems for the variation in my shader subluminic\n\tvec3 col = vec3(mix(0., 1., var*pow(k, 200.)));// come from CBS Shader \"Simplicity\" : https://www.shadertoy.com/view/MslGWN\n\treturn col;\n}\n\n////////MAIN///////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 s = iResolution.xy;\n    vec2 g = fragCoord;\n    \n#ifdef ANALYSE_RM\n    vec2 uvn = (fragCoord*2.-s)/s.y*vec2(1.,5.);\n\tif (iMouse.z > 0.)\n\t\tg = iMouse.xy;\n#else\n\tif (iMouse.z > 0.)\n\t\tmo = (iMouse.xy*2. - s) / s.y*10.;\n#endif\n    \n\tfloat time = iTime*1.;\n    float cam_a = time; // angle z\n    \n    float cam_e = 3.2; // elevation\n    float cam_d = 4.; // distance to origin axis\n    \n    float maxd = 40.; // ray marching distance max\n    \n    vec2 uv = (g*2.-s)/s.y;\n    \n    vec3 col = vec3(0.);\n\n    vec3 ro = vec3(path(time)+mo,time);\n  \tvec3 cv = vec3(path(time+0.1)+mo,time+0.1);\n    \n\tvec3 cu=vec3(0,1,0);\n  \tvec3 rov = normalize(cv-ro);\n    vec3 u = normalize(cross(cu,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    vec3 curve0 = vec3(0);\n\tvec3 curve1 = vec3(0);\n    vec3 curve2 = vec3(0);\n    float outStep = 0.;\n    \n    float ao = 0.; // ao low cost :)\n    \n    float st = 0.;\n    float d = 0.;\n    for(int i=0;i<250;i++)\n    {      \n        \n#ifdef ANALYSE_RM\n        if (iMouse.z > 0. && abs(fragCoord.x - float(i)*4.) < 1.)\n\t\t{\n\t\t\tcurve0 += 0.048 * vec3(1,1,0) / length(uvn.y - st * 0.6);\n\t\t\tcurve1 += 0.048 * vec3(0.48,0,0.48) / length(uvn.y - 0.025*log(d*d/st/1e5));\n            if(d>maxd)\n            \tcurve2 += vec3(0,0,1) - smoothstep( 1., 2., uvn.x );\n            else if(st < 0.025*log(d*d/st/1e5))\n            \tcurve2 += vec3(1,0,1) - smoothstep( 1., 2., uvn.x );\n        }\n#endif\n        \n        if (st<0.025*log(d*d/st/1e5)||d>maxd) break;// special break condition for low thickness object\n        st = map(ro+rd*d).x;\n        d += st * 0.6; // the 0.6 is selected according to the 1e5 and the 0.025 of the break condition for good result\n        ao++;\n        \n#ifdef ANALYSE_RM\n    \toutStep++;\n#endif\n        \n    }\n\t\n#ifdef ANALYSE_RM\n    if (iMouse.z > 0.)\n    {\t\n        fragColor = vec4(curve0 + curve1 + curve2,1);\n    \tfragColor.rgb = WriteValueToScreenAtPos(fragCoord, outStep, vec2(20,s.y-20.), \n                                                fragColor.rgb, vec2(12.0, 15.0), 1., 0., vec3(0.9));\n    }\n\telse\n    {\n#endif\n        if (d < maxd)\n        {\n            vec4 li = light(ro, rd, d, ro, vec3(0));// point light on the cam\n            col = li.xyz/(li.w*0.2);// cheap light attenuation\n            \n           \tcol = mix(vec3(1.-ao/100.), col, 0.5);// low cost ao :)\n        \tfragColor.rgb = mix( col, vec3(0), 1.0-exp( -0.003*d*d ) );\n\t\t}\n        else\n        {\n          \tfragColor.rgb = stars(uv, rd, d, s, fragCoord);// stars bg\n        }\n        \n        \n        // vignette\n        vec2 q = fragCoord/s;\n        fragColor.rgb *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 ); // iq vignette\n        \n#ifdef ANALYSE_RM\n    }\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}