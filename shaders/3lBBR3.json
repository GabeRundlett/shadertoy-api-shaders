{
    "Shader": {
        "info": {
            "date": "1599423515",
            "description": "piramides-3",
            "flags": 0,
            "hasliked": 0,
            "id": "3lBBR3",
            "likes": 1,
            "name": "piramides-3",
            "published": 3,
            "tags": [
                "pyramids",
                "piramides3"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 255
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n    \n    \n\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB) \n{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB) \n{ return max(distA, -distB);}\n//-------------------------------------------\n\nvec2 opU(vec2 d1, vec2 d2 )\n{\n  vec2 resp;\n    if (d1.x < d2.x){ resp = d1;}\n    else{resp = d2; }\n   return resp; \n}\n\nvec3 opU3(vec3 d1, vec3 d2 )\n{\n  vec3 resp;\n    if (d1.x < d2.x){ resp = d1; }\n    else { resp = d2; }\n   return resp; \n}\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi) \n{\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n\nvec3 rotate_y(vec3 p, float phi) \n{\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\n\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\n///-----------------------------------\nfloat sdPyramid( vec3 p, float h)\n{\n  float m2 = h*h + 0.25;\n    \n  p.xz = abs(p.xz);\n  p.xz = (p.z>p.x) ? p.zx : p.xz;\n  p.xz -= 0.5;\n\n  vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n   \n  float s = max(-q.x,0.0);\n  float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n    \n  float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n  float b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n  float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n  return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));\n}\n\n\nfloat opScalePyramidv3( in vec3 p, in float s )\n{\n    //return primitive(p/s)*s;\n    vec3 s3;\n    s3.x=s;\n    s3.y=10.0;\n    s3.z=s;\n        \n    return sdPyramid(p/s3, s)*s3.x;\n}\n\nvec3 opAngRep( vec3 p, float a )\n{\n\tvec2 polar = vec2(atan(p.y, p.x), length(p.xy));\n    polar.x = mod(polar.x + a / 2.0, a) - a / 2.0;\n    \n    return vec3(polar.y * vec2(cos(polar.x),sin(polar.x)), p.z);\n}\n\n//polynomial smooth minimum\nfloat opSU( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat piramideconboxAnchoMas(vec3 p, vec3 b, float posAlto)\n{   \n    float sdPy3=opScalePyramidv3( p-vec3(0.0,0.0,0.0), 7.0 );\n    //vec3 opAngRep( vec3 p, float a )\n    \n    vec3 b1=vec3(b.x, b.y, b.z);\n    vec3 b2=vec3(b.z, b.y, b.x);\n    \n    float sdb1= sdBox(p-vec3(0.0,posAlto,0.0), b1);  //x\n    float sdb2= sdBox(p-vec3(0.0,posAlto,0.0), b2 );  //z\n    \n    float res=differenceSDF(sdPy3, sdb1); \n    res=differenceSDF(res, sdb2); \n    \n    \n    \n    posAlto=posAlto+6.0;\n    vec3 b1a=vec3(b.x, b.y+2.0, b.z);\n    vec3 b2a=vec3(b.z, b.y+2.0, b.x);\n    \n    float sdb1a= sdBox(p-vec3(0.0,posAlto,0.0), b1a);  //x\n    float sdb2a= sdBox(p-vec3(0.0,posAlto,0.0), b2a );  //z\n    \n    float resa=differenceSDF(res, sdb1a); \n    resa=differenceSDF(resa, sdb2a); \n    \n      posAlto=posAlto+7.0;\n    vec3 b1b=vec3(b.x, b.y+2.0, b.z);\n    vec3 b2b=vec3(b.z, b.y+2.0, b.x);\n    \n    float sdb1b= sdBox(p-vec3(0.0,posAlto,0.0), b1b);  //x\n    float sdb2b= sdBox(p-vec3(0.0,posAlto,0.0), b2b );  //z\n    \n     resa=differenceSDF(resa, sdb1b); \n    resa=differenceSDF(resa, sdb2b); \n    \n    \n    posAlto=posAlto+7.0;\n    vec3 b1c=vec3(b.x-0.5, b.y+2.0, b.z);\n    vec3 b2c=vec3(b.z-0.5, b.y+2.0, b.x);\n    \n    float sdb1c= sdBox(p-vec3(0.0,posAlto,0.0), b1c);  //x\n    float sdb2c= sdBox(p-vec3(0.0,posAlto,0.0), b2c );  //z\n    \n    resa=differenceSDF(resa, sdb1c); \n    resa=differenceSDF(resa, sdb2c); \n     //res=differenceSDF(res, resa); \n    \n    return resa;\n\n}\n\n\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec3 res;\n    vec3 pp,p1, p2,p3; \n    res = vec3(9999.0, -1.0,-1.0);\n    \n   \n    float planeDist1 = p.y+0.0;  //piso inf\n    float planeDist2 = 50.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared frente\n    float planeDist6 = p.z+40.0;  //pared atras\n       \n    res =opU3(res, vec3(planeDist1,32.0,MATERIAL_NO)); //inf\n       \n    \n    \n\tvec3 q=p;\n    float cx=47.0;\n    float cy=11.0;\n    float cz=20.00;\n    \n   \n    q.z = mod(q.z+0.5*cz,cz)-0.5*cz;\n    q.x = mod(q.x+0.5*cx,cx)-0.5*cx;\n   \n    p=q;\n\t\n    \n    \n    float sdPy3= piramideconboxAnchoMas(p, vec3(6.0,1.0,2.0), 2.0);\n        \n    res =opU3(res, vec3(sdPy3,50.0,MATERIAL_NO)); \n    \n    \n    d = res.x;\n    \n    //return (dist, id_color, id_material)\n    return vec3(res.x, res.y, res.z);\n}\n\n\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    \n    return diffuse + specular;\n}\n//------------------------------------------------\n\n\n\nvec3 GetNormal(vec3 p) \n{\n\tfloat d = GetDist(p).x;\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\t\n    // The extra distance might force a near-plane hit, so\n    // it's set back to zero.\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    \n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        //marchCount+= 1./dS.x*.75;\n        marchCount++;\n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\n\n\n\nfloat GetShadow(vec3 p, vec3 plig) \n{\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n   \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n//----------------------------------------------------\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nvec3 getMouse(vec3 ro)\n{    \n     vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  float tCur = iTime;\n    \n  float az = 0.;\n  float el = -0.15 * PI;\n\n    az += 2. * PI * mPtr.x;\n    el += PI * mPtr.y;\n  mat3 vuMat = StdVuMat (el, az);\n\treturn ro*vuMat;\n}\n\n//-------------------------------------------\n\n\n//-------------------------------\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n }\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{   \n     \n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    if (mObj.blnShadow==true)\n    {       \n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n     }\n    else\n    {\n    \treturn result;\n    }\n   \t\n}\n\n//------------------------------------------------\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj;\n\n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    if ( float( id_color)>=100.0  && float( id_color)<=199.0 ) \n \t{  vec3 coltex=getColorTextura(p, n, int( id_color));\n        colobj=coltex;\n\t}\n    return colobj;\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    \n    float t;\n    t=mod(iTime*10.0,360.0);\n    itime=t;\n\tmObj.blnShadow=false;\n        \n \n \tlight_pos1   = vec3(10.0, 6.0, 10.0 ); \n \tlight_color1 = vec3( 1.0 );\n\n \tlight_pos2   = vec3( -5.0, 6.0, -5.0 );\n \tlight_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    vec3 ro=vec3(10.0,8.0,-25.0+t);\n    vec3 rd=normalize(vec3(uv,1.0));\n    light_pos1+=ro;\n    light_pos2+=ro;\n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\tfloat d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n    vec3 p = (ro + rd * d ); \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n   vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n   \n   float dif1=1.0;\n   \tvec3 col2,col3;\n    \n    vec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col3=result;\n    col= col3*dif1;\n    \n  \t\n    //sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n\n  \n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\n\n\n///Gracias por la Ayuda de SHane...16-jun-2020\n// Creditos a Shane por su funcion tex3D\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    \n    // Ryan Geiss effectively multiplies the first line by 7. It took me a while to realize that \n    // it's largely redundant, due to the division process that follows. I'd never noticed on \n    // account of the fact that I'm not in the habit of questioning stuff written by Ryan Geiss. \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    //n /= length(n); \n    \n    // Texure samples. One for each plane.\n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    \n    // Multiply each texture plane by its normal dominance factor.... or however you wish\n    // to describe it. For instance, if the normal faces up or down, the \"ty\" texture sample,\n    // represnting the XZ plane, will be used, which makes sense.\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. \n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return mat3(tx*tx, ty*ty, tz*tz)*n; // Equivalent to: tx*tx*n.x + ty*ty*n.y + tz*tz*n.z;\n\n}\n\n\n\n\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n//----------------------------------------------------\nfloat hex(vec2 p, float r2)\n{\n    p.x *= 1.16;\n    p.y += mod(floor(p.x), 4.0) * 0.5;\n    p = abs((mod(p, 1.00) - 0.5));\n    return abs(max(p.x * 1.5 + p.y, p.y * 2.0) - r2);\n}\n\nvec4 hexColor(vec2 pos)\n{\n    vec2  p   = pos * 0.2;\n    float r1  = 0.25;\n    float r2  = -0.005;\n    vec4 hColor = vec4(smoothstep(.0, r1, hex(p,1.0 - r2)));\n    hColor = (1.0 - hColor) * 0.65;\n    return hColor;\n}\n//----------------------------------\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\n    \n    \n    float m;\nif (i==-2 ) { return mObj.color; }       \nif (i==0 ) { return vec3(0,0,0)/255.0; }\nif (i==1 ) { return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) { return vec3(255,0,0)/255.0; }\nif (i==3 ) { return vec3(0,255,0)/255.0; }\nif (i==4 ) { return vec3(0,0,255)/255.0; }\nif (i==5 ) { return vec3(255,255,0)/255.0; }\nif (i==6 ) { return vec3(0,255,255)/255.0; }\nif (i==7 ) { return vec3(255,0,255)/255.0; }\nif (i==8 ) { return vec3(192,192,192)/255.0; }\nif (i==9 ) { return vec3(128,128,128)/255.0; }\nif (i==10 ) { return vec3(128,0,0)/255.0; }\nif (i==11 ) { return vec3(128,128,0)/255.0; }\nif (i==12 ) { return vec3(0,128,0)/255.0; }\nif (i==13 ) { return vec3(128,0,128)/255.0; }\nif (i==14 ) { return vec3(0,128,128)/255.0; }\nif (i==15 ) { return vec3(0,0,128)/255.0; }\n    \nif (i==16 ) { return vec3(255, 204, 188)/255.0; }\nif (i==17 ) { return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) { return vec3(0.5, 0.5, 0.8); }\n\n    if(i== 19 )\n    {  return vec3(1, 0.5, 0);    } \n    if(i== 20 )\n    { return vec3(1.0, 1.0, 1.0); } \n    if(i== 21 )\n    {  return vec3(247./255., 168./255.,  184./255.);  } \n    if(i== 22 )\n    { return vec3(0, 1, 1);} \n    if(i== 23 )\n    { return vec3(85./255., 205./255., 252./255.); } \n    \n     if(i== 24 )\n    { return  vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );;  } \n    \n    \n    if(i== 25 )\n    { return vec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ); } \n    \n    if(i== 26 )\n    { return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ); } \n   \n    \n    if(i== 27 )\n    { \n        float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n        return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c; \n    } \n     \n    \n    if(i== 28 )\n    { \n    \treturn checkerBoard(mObj.p.x, mObj.p.z, 3.0);\n    } \n    \n    if(i== 29 )\n    { \n    \treturn checkerBoard(mObj.p.x, mObj.p.z, 3.0)*vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );\n    } \n    \n   \n    \n     if(i== 30 )\n    { \n    \tvec4 v4= hexColor(mObj.p.xy);\n        return vec3(v4.x,v4.y,v4.z);\n    }\n    \n    if(i== 31 )\n    { \n    \tvec4 v4= hexColor(mObj.p.zy);\n        return vec3(v4.x,v4.y,v4.z);\n    }\n    \n    if(i== 32 )\n    { \n    \tvec4 v4= hexColor(mObj.p.xz);\n        return vec3(v4.x,v4.y,v4.z);\n    }\n    \n      \n    if(i== 50 )\n    {\n     \n           \n            vec3 p = mObj.p;\n        \t//vec3 p =  mObj.normal*0.5;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*2.0)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 0.8;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n    \n   \n\n}\n\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}