{
    "Shader": {
        "info": {
            "date": "1607985019",
            "description": "Every pixel holds an angular value, which are averaged-and-normalized over time. Clockwise and anticlockwise singularities appear, and attract and annihilate one another.",
            "flags": 32,
            "hasliked": 0,
            "id": "WdVBDK",
            "likes": 6,
            "name": "Blurred Angles",
            "published": 3,
            "tags": [
                "angle",
                "multipass",
                "singularities"
            ],
            "usePreview": 0,
            "username": "jcreed",
            "viewed": 351
        },
        "renderpass": [
            {
                "code": "// void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n//\tfragColor = vec4(texture(iChannel0,fragCoord / iResolution.xy).xy, 0.0, 1.0);\n//}\n\n// Smooth HSV to RGB conversion\nvec3 hsv2rgb_smooth(in vec3 c) {\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nconst float M_PI = 3.14159265358979323846264338327950288;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 vec = texture(iChannel0,fragCoord / iResolution.xy).xy - vec2(0.5, 0.5);\n   float angle = atan(vec.y, vec.x);\n\tfloat hue = (angle / (2.0 * M_PI)) + 0.5;\n\tfragColor = vec4(hsv2rgb_smooth(vec3(hue, 1.0, 1.0)), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 get_sample(int x, int y) {\n  return texture(iChannel0, (gl_FragCoord.xy + vec2(ivec2(x, y))) / iResolution.xy);\n}\n\n// normalize a vector to the circle centered at (0.5, 0.5) with radius 0.5\nvec2 norm(vec2 v) {\n  float x = v.x - 0.5;\n  float y = v.y - 0.5;\n  float len = 2.0 * sqrt(x * x + y * y);\n  return vec2(x / len + 0.5, y / len + 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  if  (iFrame < 10){\n\t float x = texture(iChannel1, fragCoord / vec2(512, 512)).x;\n\t float y = texture(iChannel1, fragCoord / vec2(512, 512) + vec2(0.5, 0.25)).x;\n\t fragColor = vec4(x, y, 0, 1.0);\n  }\n  else {\n\t\tvec4 avg = (get_sample(0,-1) + get_sample(0,0) + get_sample(0,1) +\n\t\t\t\t\t\tget_sample(1,-1) + get_sample(1,0) + get_sample(1,1) +\n\t\t\t\t\t\tget_sample(-1,-1) + get_sample(-1,0) + get_sample(-1,1)) / 9.0;\n\t\tvec2 normed = norm(avg.rg);\n\t\tfragColor = vec4(normed, 0.0, 1.0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}