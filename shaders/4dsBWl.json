{
    "Shader": {
        "info": {
            "date": "1498810764",
            "description": "Voronoi partitioning based on random points in the cells of a hexagonal lattice. The smoothing technique from \"Smoothed Voronoi Landscape\" has been included.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dsBWl",
            "likes": 7,
            "name": "Smoothed Honeycomb Voronoi",
            "published": 3,
            "tags": [
                "voronoi",
                "hexagon",
                "smoothing",
                "partition"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 738
        },
        "renderpass": [
            {
                "code": "// \"Smoothed Honeycomb Voronoi\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\nVoronoi (or Dirichlet) partitioning based on random points in the cells of a hexagonal\n(honeycomb) lattice. The smoothing technique from \"Smoothed Voronoi Landscape\"\nhas been included.\n\nOnly need to examine 7 neighbor points, rather than 9 on the square lattice. Errors due\nto omitting second-nearest neighbors are reduced (more on this in iq's Voronoi shaders\nand website tutorials). The underlying lattice is less noticeable, which is useful for\ngraphics applications.\n\nMultiple visualization modes.\n*/\n\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\n\nvec2 gVec[7], hVec[7];\nfloat tCur;\nconst float pi = 3.14159;\n\n#define SQRT3 1.7320508\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (SQRT3/2.) - p.x + 0.5 * min (p.x - SQRT3 * p.y, 0.);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5)* tCur;\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n//  return vec4 (sd.y - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nvec3 ShowScene (vec2 p)\n{\n  vec4 vc;\n  vec3 col;\n  vec2 dp;\n  float dm, s, tCyc;\n  HexVorInit ();\n  col = vec3 (0.);\n  tCyc = mod (0.02 * tCur, 1.);\n  vc = HexVor (p);\n  col = mix (vec3 (0.5, 1., 0.5), HsvToRgb (vec3 (mod (vc.w, 1.), 0.7, 1.)),\n     SmoothBump (0.2, 0.7, 0.02, mod (tCyc, 1.)));\n  dm = length (vc.yz);\n  col *= (1. - min (0.8 * dm, 1.)) * mix (1., 0.7 + 0.3 * sin (40. * vc.x),\n     SmoothBump (0.2, 0.7, 0.02, mod (2. * tCyc, 1.)));\n  s = SmoothBump (0.2, 0.7, 0.02, mod (4. * tCyc, 1.));\n  col = mix (vec3 (1., 0.5, 0.), col,\n     min (min (s + smoothstep (0.03, 0.04, vc.x), 1.),\n     min (s + smoothstep (0.05, 0.1, dm), 1.)));\n  s = SmoothBump (0.1, 0.9, 0.01, mod (8. * tCyc, 1.));\n  dp = p - HexToPix (PixToHex (p));\n  col = mix (vec3 (0.3, 0.3, 0.7), col,\n     min (min (s + smoothstep (0.02, 0.03, HexEdgeDist (dp)), 1.),\n     min (s + smoothstep (0.04, 0.06, length (dp)), 1.)));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  vec3 col;\n  vec2 canvas, uv, p;\n  float pSize;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  tCur += 20.;\n  pSize = canvas.x / 100.;\n  p = pSize * uv;\n  fragColor = vec4 (ShowScene (p), 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2),\n     dot (p + e.xy, cHashVA2))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}