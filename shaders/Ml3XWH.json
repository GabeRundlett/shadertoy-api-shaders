{
    "Shader": {
        "info": {
            "date": "1479290484",
            "description": "Faster version of \"Kelp Forest\" by Martijn Steinrucken aka BigWings",
            "flags": 0,
            "hasliked": 0,
            "id": "Ml3XWH",
            "likes": 17,
            "name": "Fast Fish",
            "published": 3,
            "tags": [
                "raymarching",
                "fish",
                "cells"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1108
        },
        "renderpass": [
            {
                "code": "// \"Fast Fish\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Scene based on \"Kelp Forest\" by Martijn Steinrucken aka BigWings - 2016\n  (https://www.shadertoy.com/view/llcSz8)\n\n  Runs several times (4-5X) faster, mainly due to altered cell marching.\n\n  Coloring/lighting changed to avoid confusion; mouse enabled.\n*/\n\nfloat Hashfv2 (vec2 p);\nvec3 Hashv3f (float p);\nvec2 Rot2D (vec2 q, float a);\nfloat PrSphDf (vec3 p, float s);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat PrRndBoxDf (vec3 p, vec3 b, float r);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\n\nstruct {\n  vec3 vSc;\n  float dBody, dDors, dTail, dMouth, dBump;\n} fh;\n\nvec3 qHit, ltDir;\nfloat tCur, dstFar;\nconst float dEps = 0.0005;\nconst vec3 fRep = vec3 (11.5, 4.5, 2.5), kRep = vec3 (2., 40., 2.),\n   bRep = vec3 (4., 4., 4.),\n   fVr = vec3 (1., 123.231, 87.342), bVr = vec3 (1., 1234.5234, 765.);\nconst vec2 kVr = vec2 (1.1, 764.);\nconst float pi = 3.14159;\n\nfloat ScalesHt (vec2 uv)\n{\n  vec4 ds, scl, g;\n  float s;\n  uv -= floor (uv);\n  ds = vec4 (length (uv - vec2 (1., 0.5)), length (uv - vec2 (0.5, 1.)),\n     length (uv - vec2 (0.5, 0.)), length (uv - vec2 (0., 0.5)));\n  scl = uv.x + vec4 (-0.5, 0., 0., 0.5) - 2. * ds;\n  g = smoothstep (0.45, 0.5, ds);\n  s = (1. - g.x) * scl.x;\n  s = (s - scl.y) * g.y + scl.y;\n  s = (s - scl.z) * g.z + scl.z;\n  s = (s - scl.w) * g.w + scl.w;\n  return -0.01 * s;\n}\n\nfloat ScalesSh (vec2 uv, float rnd)\n{\n  vec4 ds, scl, g;\n  vec2 uvi;\n  float s;\n  uvi = floor (uv);\n  uv -= uvi;\n  ds = vec4 (length (uv - vec2 (1., 0.5)), length (uv - vec2 (0.5, 1.)),\n     length (uv - vec2 (0.5, 0.)), length (uv - vec2 (0., 0.5)));\n  scl.x = Hashfv2 (uvi + vec2 (0., rnd));\n  scl.y = scl.x;\n  scl.z = Hashfv2 (uvi + vec2 (0., rnd - 1.));\n  scl.w = Hashfv2 (uvi + vec2 (-1., rnd));\n  g = smoothstep (0.45, 0.5, ds);\n  s = (1. - g.x) * scl.x;\n  s = (s - scl.y) * g.y + scl.y;\n  s = (s - scl.z) * g.z + scl.z;\n  s = (s - scl.w) * g.w + scl.w;\n  return s;\n}\n\nfloat WSmoothMin (float a, float b, float r, float f, float amp)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  r *= 1. + cos (h * f) * amp;\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat FishDf (vec3 p, vec3 vr)\n{\n  vec3 q;\n  vec2 r;\n  float dCheek, dEye, dSnout, dGill, dAnal, dPect, dPelv, dScales, mask, a, d;\n  p.z += sin (p.x - tCur * 2. + vr.x * 100.) * (0.15 + 0.1 * vr.y);\n  p.z = abs (p.z);\n  qHit = p;\n  fh.dBump = 0.;\n  dCheek = SmoothMin (PrEllipsDf (p - vec3 (-1., 0., 0.25), vec3 (0.4, 0.4, 0.2)),\n     PrEllipsDf (p - vec3 (-1., 0., -0.25), vec3 (0.4, 0.4, 0.2)), 0.2);\n  dEye = PrEllipsDf (p - vec3 (-1., 0., 0.4), vec3 (0.25, 0.25, 0.09));\n  dSnout = PrEllipsDf (p - vec3 (-1.2, -0.2, 0.), vec3 (0.6, 0.4, 0.2));\n  q = p - vec3 (-1.2, -0.6, 0.);\n  q.xy = Rot2D (q.xy, 0.35);\n  fh.dMouth = WSmoothMin (PrEllipsDf (q - vec3 (-0.3, 0.15, 0.),\n     vec3 (0.36, 0.12, 0.18)),\n     PrEllipsDf (q, vec3 (0.6, 0.12, 0.24)), 0.03, 15., 0.1);\n  dSnout = SmoothMin (dSnout, fh.dMouth, 0.1);\n  q = p - vec3 (-1., 0., 0.);\n  fh.vSc = vec3 (8. * p.x + 16., 20. * atan (q.y, q.z) / pi + 0.5, vr.z);\n  dScales = ScalesHt (fh.vSc.xy) * smoothstep (0.33, 0.45, dEye) *\n     (1. - smoothstep (1.2, 1.8, dEye)) * smoothstep (-0.3, 0., p.x);\n  q = p - vec3 (-0.7, -0.25, 0.2);\n  q.xz = Rot2D (q.xz, -0.4);\n  dGill = PrEllipsDf (q, vec3 (0.8, 0.72, 0.12));\n  fh.dTail = PrEllipsDf (p - vec3 (4.5, 0.1, 0.), vec3 (0.5, 1., 0.1));\n  r = p.xy - vec2 (3.8, 0.1);\n  a = atan (r.x, r.y);\n  mask = SmoothBump (0.45, 2.9, 0.2, a) * smoothstep (0.04, 1., dot (r, r));\n  fh.dBump += sin (a * 70.) * 0.005 * mask;\n  fh.dTail += mask * (sin (a * 5.) * 0.03 + sin (a * 280.) * 0.001) + fh.dBump;\n  a = atan (p.x, p.y);\n  fh.dBump += SmoothBump (-0.2, 3., 0.2, p.x) * (sin (a * 100.) * 0.003 +\n     (1. - pow (sin (a * 50.) * 0.5 + 0.5, 15.)) * 0.015 + sin (a * 400.) * 0.001);\n  fh.dDors = SmoothMin (PrEllipsDf (p - vec3 (1.5, 1., 0.), vec3 (1.5, 0.5, 0.1)),\n     PrEllipsDf (p - vec3 (0.5, 1.5, 0.), vec3 (0.5, 0.5, 0.05)), 0.1) + fh.dBump;\n  dAnal = PrEllipsDf (p - vec3 (2.6, -0.7, 0.), vec3 (1., 0.35, 0.05)) +\n     sin (a * 300.) * 0.001 + sin (a * 40.) * 0.01;\n  q = p - vec3 (0.7, -0.6, 0.52);\n  r = p.xy - vec2 (0.3, -0.4);\n  a = atan (r.x, r.y);\n  q.yz = Rot2D (q.yz, -0.2);\n  q.xz = Rot2D (q.xz, -0.2);\n  dPect = PrEllipsDf (q, vec3 (0.4, 0.2, 0.04)) +\n     (sin (a * 10.) * 0.01 + sin (a * 100.) * 0.002) *\n     SmoothBump (1.5, 2.9, 0.1, a) * smoothstep (0.01, 0.36, dot (r, r));\n  q = p - vec3 (0.9, -1.1, 0.2);\n  q.xy = Rot2D (q.xy, 0.4);\n  q.yz = Rot2D (q.yz, 0.4);\n  r = p.xy - vec2 (0.5, -0.9);\n  a = atan (r.x, r.y);\n  dPelv = PrEllipsDf (q, vec3 (2., 1., 0.2) * 0.2) +\n     (sin (a * 10.) * 0.01 + sin (a * 60.) * 0.002) *\n     SmoothBump (1.5, 2.9, 0.1, a) * smoothstep (0.01, 0.16, dot (r, r));\n  fh.dBody = SmoothMin (dCheek, dSnout, 0.3);\n  fh.dBody = SmoothMin (SmoothMin (fh.dBody,\n     PrEllipsDf (p - vec3 (0.6, -0., 0.), vec3 (2., 1., 0.5)), 0.15),\n     PrEllipsDf (p - vec3 (2.4, 0.1, 0.), vec3 (1.8, 0.6, 0.24)), 0.3) + dScales;\n  fh.dBody = WSmoothMin (fh.dBody, dGill, 0.1, 15., 0.1);\n  d = SmoothMin (fh.dBody, min (min (min (min (dPect, dPelv), fh.dTail), fh.dDors),\n     dAnal), 0.05);\n  d = WSmoothMin (d, dEye, 0.01, 6., 1.);\n  return 0.9 * d;\n}\n\nfloat KelpDf (vec3 p, vec3 vr)\n{\n  p.xz = Rot2D (p.xz, p.y * pi * floor (vr.y * 10.) / 40.);\n  return 0.9 * PrRndBoxDf (p, vec3 ((0.1 + 0.5 * vr.x) *\n    (0.8 + 0.2 * sin (0.2 * pi * p.y)), 30., 0.02 + 0.01 * vr.y), 0.005);\n}\n\nfloat BubDf (vec3 p, vec3 pw, vec3 vr)\n{\n  vec3 b;\n  float s, t, r, d, a;\n  t = tCur;\n  vr -= 0.5;\n  s = pow (fract (dot (vr, vec3 (1.)) * 100.), 4.);\n  pw.y += t;\n  pw = 7. * pw + 2. * pi * vr + vec3 (t, 0., t);\n  d = sin ((t + vr.y) * 3. * pi * (1. - s)) *\n     0.3 * vr.x * (1. - s);\n  a = vr.z * t;\n  b = d * vec3 (cos (a), 0., sin (a));\n  r = 0.1 - 0.05 * s + dot (sin (pw), vec3 (1.)) * s * 0.02;\n  return 0.9 * PrSphDf (p - b, r);\n}\n\nfloat FObjDf (vec3 p)\n{\n  vec3 cId, vr;\n  float d;\n  cId = floor (p / fRep);\n  vr = Hashv3f (dot (cId, fVr));\n  d = (vr.x > 0.95) ? FishDf (p - fRep * (cId + 0.5), vr) : dstFar;\n  return d;\n}\n\nfloat FObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cId, vr, s;\n  float dHit, d;\n  dHit = 0.1;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + rd * dHit;\n    p.x += tCur;\n    cId = floor (p / fRep);\n    vr = Hashv3f (dot (cId, fVr));\n    d = (vr.x > 0.95) ? FishDf (p - fRep * (cId + 0.5), vr) : dstFar;\n    s = (fRep * (cId + step (0., rd)) - p) / rd;\n    d = min (d, abs (min (min (s.x, s.y), s.z)) + 0.01);\n    if (d < dEps || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nfloat KObjDf (vec3 p)\n{\n  vec3 cId, vr;\n  float d;\n  cId = floor (p / kRep);\n  vr = Hashv3f (dot (cId.xz, kVr));\n  d = (vr.x * smoothstep (7., 10., length (cId)) > 0.9) ?\n     KelpDf (p - kRep * (cId + 0.5), vr) : dstFar;\n  return d;\n}\n\nfloat KObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cId, vr, s;\n  float dHit, d;\n  dHit = 0.1;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + rd * dHit;\n    p.x += sin (tCur + p.y * 0.2) * 0.5;\n    cId = floor (p / kRep);\n    vr = Hashv3f (dot (cId.xz, kVr));\n    d = (vr.x * smoothstep (7., 10., length (cId)) > 0.9) ?\n       KelpDf (p - kRep * (cId + 0.5), vr) : dstFar;\n    s = (kRep * (cId + step (0., rd)) - p) / rd;\n    d = min (d, abs (min (min (s.x, s.y), s.z)) + 0.01);\n    if (d < dEps || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nfloat BObjDf (vec3 p)\n{\n  vec3 cId, vr;\n  float d;\n  cId = floor (p / bRep);\n  vr = Hashv3f (dot (cId, bVr));\n  d = (vr.x * smoothstep (2., 5., length (cId)) > 0.95) ?\n     BubDf (p - bRep * (cId + 0.5), p, vr) : dstFar;\n  return d;\n}\n\nfloat BObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cId, vr, s;\n  float dHit, d;\n  dHit = 0.1;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + rd * dHit;\n    p.y -= tCur * 4. + 40.;\n    cId = floor (p / bRep);\n    vr = Hashv3f (dot (cId, bVr));\n    d = (vr.x * smoothstep (2., 5., length (cId)) > 0.95) ?\n       BubDf (p - bRep * (cId + 0.5), p, vr) : dstFar;\n    s = (bRep * (cId + step (0., rd)) - p) / rd;\n    d = min (d, abs (min (min (s.x, s.y), s.z)) + 0.01);\n    if (d < dEps || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nfloat ObjDfN (vec3 p)\n{\n  vec3 q;\n  float dHit;\n  q = p;\n  q.x += tCur;\n  dHit = FObjDf (q);\n  q = p;\n  q.x += sin (tCur + p.y * 0.2) * 0.5;\n  dHit = min (dHit, KObjDf (q));\n  q = p;\n  q.y -= tCur * 4. + 40.;\n  dHit = min (dHit, BObjDf (q));\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDfN (p + e.xxx), ObjDfN (p + e.xyy),\n     ObjDfN (p + e.yxy), ObjDfN (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat TurbLt (vec3 p, vec3 n, float t)\n{\n  vec2 q, qq, a1, a2;\n  float c, tt;\n  q = vec2 (dot (p.yzx, n), dot (p.zxy, n));\n  q = 2. * pi * mod (q, 1.) - 256.;\n  t += 11.;\n  c = 0.;\n  qq = q;\n  for (int k = 1; k <= 7; k ++) {\n    tt = t * (1. + 1. / float (k));\n    a1 = tt - qq;\n    a2 = tt + qq;\n    qq = q + tt + vec2 (cos (a1.x) + sin (a2.y), sin (a1.y) + cos (a2.x));\n    c += 1. / length (q / vec2 (sin (qq.x), cos (qq.y)));\n  }\n  return clamp (pow (abs (1.25 - abs (0.167 + 40. * c)), 8.), 0., 1.);\n}\n\nfloat FinSh (vec3 rd)\n{\n  float u;\n  u = clamp (fh.dBody * 2. * pow (fh.dBump * 50., 2.) *\n     (1. - clamp (fh.dDors * 15., 0., 1.)) *\n     SmoothBump (-0.3, 3., 0.1, qHit.x) * 3., 0., 1.) +\n     smoothstep (3.8, 5.2, qHit.x) *\n     (1. - pow (max (1. - (fh.dBump * 100. + 0.5), 0.), 3.)) + fh.dBody * 3.;\n  return u * (rd.y * 0.5 + 0.7);\n}\n\nvec4 FishCol ()\n{\n  vec3 col, colTop, colBot, colBody, colHead, colMouth, colFin, colEye, pEye;\n  float spec, aEye, sEye;\n  pEye = qHit - vec3 (-1., 0., 0.4);\n  aEye = atan (pEye.x, pEye.y);\n  sEye = length (pEye);\n  if (sEye > 0.26) {\n    colBot = vec3 (1., 0.8, 0.6);\n    colTop = 0.8 * colBot;\n    colFin = vec3 (1., 1., 0.5);\n    colMouth = 1.5 * colBot;\n    colBody = mix (colTop, colBot, 1. - smoothstep (-0.2, 0.4, qHit.y) +\n       ScalesSh (fh.vSc.xy, fh.vSc.z));\n    colHead = mix (colTop, colBot, smoothstep (0., 0.5, sEye) *\n       smoothstep (0.5, 1.1, sEye));\n    colHead += 0.05 * (sin (aEye * 20. + sEye) *\n       sin (aEye * 3. - sEye * 4.) * (sin (sEye * 10.) + 1.));\n    colHead = mix (colMouth, colHead, smoothstep (0., 0.2, fh.dMouth));\n    col = mix (colFin, mix (colBody, colHead, smoothstep (0.8, 1., fh.dTail)),\n       clamp (1. - (fh.dBody - 0.01) * 50., 0., 1.)) *\n       (0.125 * (sin (sEye * 5.) + 1.) * (sin (fh.dDors * 10.) + 1.) + 0.5);\n    spec = 0.3;\n  } else {\n    colEye = vec3 (0.8, 0.6, 0.2);\n    col = colEye + sin (aEye * 2. * pi + 0.3) * sin (aEye * pi) * 0.1;\n    col *= smoothstep (0.13, 0.15, sEye) *\n       (1.25 - smoothstep (0.19, 0.25, sEye));\n    spec = 0.6;\n  }\n  return vec4 (col, spec);\n}\n\nfloat WatShd (vec3 rd)\n{\n  vec2 p;\n  float t, h;\n  p = 20. * rd.xz / rd.y;\n  t = tCur * 2.;\n  h = sin (p.x * 2. + t * 0.77 + sin (p.y * 0.73 - t)) +\n     sin (p.y * 0.81 - t * 0.89 + sin (p.x * 0.33 + t * 0.34)) +\n     (sin (p.x * 1.43 - t) + sin (p.y * 0.63 + t)) * 0.5;\n  h *= smoothstep (0.5, 1., rd.y) * 0.04;\n  return h;\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float u, t, gd, b;\n  u = rd.y + 1.;\n  t = tCur * 4.;\n  b = dot (vec2 (atan (rd.x, rd.z), 0.5 * pi - acos (rd.y)), vec2 (2., sin (rd.x)));\n  gd = clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.);\n  return vec3 (0.25, 0.4, 1.) * (0.24 + 0.44 * u * u) * (1. + gd * 0.05);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn;\n  float dstObj, d, spec;\n  int idObj;\n  col = vec3 (0.);\n  bgCol = BgCol (rd);\n  dstObj = dstFar;\n  d = FObjRay (ro, rd);\n  if (d < dstObj) {\n    dstObj = d;\n    idObj = 1;\n  }\n  d = KObjRay (ro, rd);\n  if (d < dstObj) {\n    dstObj = d;\n    idObj = 2;\n  }\n  d = BObjRay (ro, rd);\n  if (d < dstObj) {\n    dstObj = d;\n    idObj = 3;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col4 = FishCol ();\n      col = col4.rgb;\n      col = mix (col, bgCol * vec3 (1., 0.8, 0.7), FinSh (rd));\n      spec = col4.a;\n    } else if (idObj == 2) {\n      col = vec3 (0.2, 0.7, 0.3);\n      spec = 0.;\n    } else if (idObj == 3) {\n      col = 0.7 * mix (vec3 (1.), BgCol (reflect (rd, vn)), 0.7);\n      spec = 0.5;\n    }\n    col = col * (0.2 * bgCol +\n       0.2 * max (dot (vn, normalize (vec3 (- ltDir.x, ltDir.y, - ltDir.z))), 0.) +\n       0.2 * max (vn.y, 0.) + 0.6 * max (dot (vn, ltDir), 0.)) +\n       spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n    col *= 0.5 + 0.5 * clamp (rd.y + 1., 0., 1.5);\n    col += 0.2 * TurbLt (0.03 * ro, abs (vn), 0.5 * tCur) *\n       smoothstep (-0.3, -0.1, vn.y);\n    col = mix (col, bgCol, smoothstep (0.3 * dstFar, dstFar, dstObj));\n  } else col = bgCol + WatShd (rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.8 * pi + 0.02 * pi * tCur;\n  el = -0.22 * pi * sin (0.017 * pi * tCur);\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.6 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.2 * pi, 0.2 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 9., -10.);\n  rd = vuMat * normalize (vec3 (uv, 2.5));\n  ltDir = normalize (vec3 (0.2, 1., -0.2));\n  dstFar = 50.;\n  fragColor = vec4 (pow (ShowScene (ro, rd), vec3 (0.7)), 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec3 Hashv3f (float p)\n{\n  return fract (sin (vec3 (p, p + 1., p + 2.)) *\n     vec3 (cHashM, cHashM * 0.43, cHashM * 0.37));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat PrRndBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}