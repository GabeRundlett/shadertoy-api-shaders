{
    "Shader": {
        "info": {
            "date": "1678909269",
            "description": "Visualizing a 4D cube projected into 2D. w/ help from chatGPT",
            "flags": 0,
            "hasliked": 0,
            "id": "cdy3zt",
            "likes": 7,
            "name": "Rotating Hypercube",
            "published": 3,
            "tags": [
                "lines",
                "4d",
                "tesseract",
                "hypercube",
                "ai",
                "gpt"
            ],
            "usePreview": 0,
            "username": "josplode",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "vec2 project4Dto2D(vec4 pos, float distance, float scale3D) {\n    vec3 pos3D = pos.xyz * scale3D / (pos.w + distance);\n    return pos3D.xy / (pos3D.z + distance);\n}\n\nvoid drawLine(vec2 uv, vec2 start, vec2 end, vec3 color, inout vec3 o) {\n    vec2 p1 = start.xy;\n    vec2 p2 = end.xy;\n    float lineWidth = 0.05 / (1.0 + 10.0);\n    \n    float t = clamp((dot(uv - p1, p2 - p1) / dot(p2 - p1, p2 - p1)), 0.0, 1.0);\n    float d = length(uv - (p1 + t * (p2 - p1)));\n    \n    o += color * smoothstep(lineWidth, 0.0, d);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float time = iTime * 0.5;\n    float aspectRatio = iResolution.x / iResolution.y;\n    \n    mat4 rotationXY = mat4(\n        cos(time), -sin(time), 0, 0,\n        sin(time), cos(time), 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    );\n    \n    mat4 rotationYZ = mat4(\n        1, 0, 0, 0,\n        0, cos(time), -sin(time), 0,\n        0, sin(time), cos(time), 0,\n        0, 0, 0, 1\n    );\n    \n    mat4 rotationZW = mat4(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, cos(time), -sin(time),\n        0, 0, sin(time), cos(time)\n    );\n    \n    mat4 totalTransform = rotationXY * rotationYZ * rotationZW;\n    \n    float scale = 0.5;\n    float distance = 2.5;\n    vec3 color = vec3(0.5, 0.5, 1.0);\n    vec3 o = vec3(0.0);\n    \n    for (int i = 0; i < 16; i++) {\n        for (int j = i + 1; j < 16; j++) {\n            if ((i ^ j) == 1 || (i ^ j) == 2 || (i ^ j) == 4 || (i ^ j) == 8) {\n                vec4 v1 = vec4(float((i & 1) * 2 - 1) * scale, float((i & 2) - 1) * scale, float((i & 4) / 2 - 1) * scale, float((i & 8) / 4 - 1) * scale);\n                vec4 v2 = vec4(float((j & 1) * 2 - 1) * scale, float((j & 2) - 1) * scale, float((j & 4) / 2 - 1) * scale, float((j & 8) / 4 - 1) * scale);\n                v1 = totalTransform * v1;\n                v2 = totalTransform * v2;\n                vec2 p1 = project4Dto2D(v1, distance, 2.00);\n                vec2 p2 = project4Dto2D(v2, distance, 2.00);\n                p1.xy *= vec2(1.0, aspectRatio);\n                p2.xy *= vec2(1.0, aspectRatio);\n\n            drawLine(uv, p1, p2, color, o);\n            }\n        }\n    }\n\nfragColor = vec4(o, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}