{
    "Shader": {
        "info": {
            "date": "1573217233",
            "description": "The obligatory eyeball shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsGXRR",
            "likes": 19,
            "name": "Compulsive Eye",
            "published": 3,
            "tags": [
                "eye",
                "eyeball"
            ],
            "usePreview": 0,
            "username": "andremichelle",
            "viewed": 771
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\n// Tileable Noise > https://www.shadertoy.com/view/4dlGW2\n\nfloat Hash(in vec2 p, in float scale) {\n\treturn fract(sin(dot(mod(p, scale), vec2(27.16898, 38.90563))) * 5151.5473453);\n}\n\nfloat Noise(in vec2 p, in float scale ) {\n\tvec2 f;\n\tp *= scale;\n\tf = fract(p);\n    p = floor(p);\n    f = f*f*(3.0-2.0*f);\n    return mix(mix(Hash(p, scale),\n\t\t\tHash(p + vec2(1.0, 0.0), scale), f.x),\n\t\t\tmix(Hash(p + vec2(0.0, 1.0), scale),\n\t\t\tHash(p + vec2(1.0, 1.0), scale), f.x), f.y);\n}\n\nfloat fBm(in vec2 p) {\n\tfloat f = 0.0;\n\tfloat scale = 10.;\n    p = mod(p, scale);\n\tfloat amp   = .6;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += Noise(p, scale) * amp;\n\t\tamp *= .5;\n\t\tscale *= 2.;\n\t}\n\treturn min(f, 1.0);\n}\n\n// https://iquilezles.org/articles/distfunctions2d\n\nfloat sdPie( in vec2 p, in vec2 c, in float r ) {\n    p.x = abs(p.x);\n    float l = length(p) - r;\n    float m = length(p-c*clamp(dot(p,c),0.0,r));\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\nfloat sdArc( in vec2 p, in vec2 sca, in vec2 scb, in float ra, float rb ) {\n    p *= mat2(sca.x,sca.y,-sca.y,sca.x);\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nvec4 over( in vec4 a, in vec4 b ) {\n    return mix(a, b, 1.-a.w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y*2.;\n    float l = length(uv);\n    vec4 col = vec4(.04,.22, .34, 1.);\n    if( l < .86) {\n        vec3 main = vec3(0);\n        float a = atan(uv.y, uv.x);\n        float anim = sin(iTime*PI*.3)*.04;\n        main += vec3(.1, .7, 1.) * smoothstep(.0, .99, fBm(vec2(a/PI*09.+sin(l*29.+a*11.)*.06, l*(2.00+anim*2.))))*.9;\n        main += vec3(.0, 1., .6) * smoothstep(.5, .70, fBm(vec2(a/PI*13.+sin(l*29.+a*11.)*.10, l*(1.50+anim))))*.3;\n        main += vec3(.4, .9, .9) * smoothstep(.2, .96, fBm(vec2(a/PI*11.+sin(l*11.+a*17.)*.11, l*(1.50+anim))))*.3;\n        float ta = PI*.3;\n        float tb = PI-2.5;\n        float bulge = smoothstep(.3, .0, abs(l-.5));\n        float reflection = smoothstep(.07, .0, sdArc(uv,vec2(sin(ta),cos(ta)),vec2(sin(tb),cos(tb)), .52, .01));\n        col = over(vec4(main*.8 + bulge*.2 + reflection*.2, smoothstep(.14, 0.001, l-.69)), col); // iris\n        col = over(vec4(vec3(.8,.5,.14), smoothstep(.0, .97, fBm(vec2(a/PI*2., l+anim))*(sin(PI+min(l,PI*.25)*PI*4.)))*.7), col); // iris brown blotch\n        col = over(vec4(vec3(.0), smoothstep(.16, .02-anim, l-.21)), col); // pupil black\n        col = over(vec4(vec3(.96, .97, .99), smoothstep(.024, .0, length(uv-vec2(-.06,.13))-.04-anim*.02)*.9), col); // pupil reflection\n    \tcol = over(vec4(vec3(.96, .97, .99)*.2, smoothstep(.01, .0, length(uv-vec2(.07,-.14))-.01)), col); // pupil reflection tiny\n    }\n    col = over(vec4(vec3(.95,.9, .88), smoothstep(-.04, .01, l-.83)), col); // eye skin\n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}