{
    "Shader": {
        "info": {
            "date": "1548111515",
            "description": "Made live shading style.\nUses the nice nusan_fx transparency trick he demoed on stream a few days ago :D",
            "flags": 0,
            "hasliked": 0,
            "id": "tdSGR1",
            "likes": 11,
            "name": "Ice cubes in my glass",
            "published": 3,
            "tags": [
                "raymarching",
                "distancefield",
                "liveshading"
            ],
            "usePreview": 0,
            "username": "Alkama",
            "viewed": 731
        },
        "renderpass": [
            {
                "code": "#define t mod(iTime, 100.0)\n\nstruct Ray { vec3 o, d; };\n\nfloat rectify(float f, float b) { return b+f*b*.5; }\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat vmax(vec3 v) { return max(max(v.x,v.y),v.z); }\nfloat sphere(vec3 p, float r) {return length(p)-r;}\nfloat cube(vec3 p, vec3 s, float sm) {\n  vec3 b=abs(p)-s;\n  return length(max(b,0.0) + min(vmax(b), 0.0)) - sm;\n}\nvec3 rep(vec3 p, float n) { return mod(p-vec3(n*.5), n) - .5*n; }\nfloat scene(vec3 p) {\n  p = rep(p,3.0+sin(t*.42));\n  p.xy = abs(p.xy);\n  p.xz *= rot(t*.6+p.y);\n  p.xy *= rot(t*.3);\n  float s=sphere(p,.2);\n  float c=cube(p, vec3(.5), .5);\n  return max(-s,c);\n}\n\nRay camera(vec2 uv, vec3 o, vec3 tg, float z) {\n  Ray r;\n  r.o = o;\n  vec3 f = normalize(tg-o);\n  vec3 s = normalize(cross(vec3(0,1,0), f));\n  vec3 u = cross(f,s);\n  r.d = normalize(f*z+uv.x*s+uv.y*u);\n  return r;\n}\n\nvec3 normal(vec3 p) {\n  vec2 e=vec2(-0.001, 0.001);\n  return normalize(e.xyy*scene(p+e.xyy) + e.yxy*scene(p+e.yxy) + e.yyx*scene(p+e.yyx) + e.xxx*scene(p+e.xxx));\n}\n\nvec3 shade(vec3 p) {\n  vec3 l=normalize(vec3(sin(t*.9), 2, cos(t)));\n  vec3 n=normal(p);\n  return vec3(max(0.0,dot(l, n)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  uv /= 1.0-length(uv)*1.5;\n  //uv.x = abs(uv.x);\n  vec3 eye = vec3(1,3,-2);\n  eye.xz += 4.0*vec2(sin(t*.2),cos(t*.2));\n  vec3 target = vec3(0);\n  target.xy += 2.0*vec2(cos(t*.2),sin(t*.2));\n\n  Ray r = camera(uv, eye, target, .2+.1*sin(t*2.0));\n  vec3 col = vec3(0);\n\n  // lets try nusan's transparency trick\n  vec3 p = r.o;\n  float d=0.0;\n  float acc=.27;\n  int bbb=0;\n  float side=sign(scene(p));\n  for(int i=0; i<200; i++) {\n    float h=scene(p)*side*.92;\n    if(h<0.00001) {\n      bbb++;\n      vec3 n=normal(p)*side;\n      col += 1.*shade(p)+acc*vec3(-.1,0.1,.2+.1*cos(t));\n      side=-side;\n      acc *= .84;\n      h = 0.001;\n      r.d = refract(r.d, n, 1.0+.025*side);\n    }\n    p+=r.d*h;\n    d+=h;\n  }\n  col /= float(bbb);\n  fragColor = vec4(pow(col, vec3(1.1/2.2)), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}