{
    "Shader": {
        "info": {
            "date": "1681728954",
            "description": "Several small lights dancing around each other, forming bigger blobs when close enough.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DsKSzw",
            "likes": 0,
            "name": "Blobby Lights",
            "published": 3,
            "tags": [
                "simple",
                "metablobs",
                "blob",
                "bw"
            ],
            "usePreview": 0,
            "username": "Dem0g",
            "viewed": 97
        },
        "renderpass": [
            {
                "code": "#define LINES 10.0\n#define BLOBS 10.0\n\nfloat rand(float x) {\n    return fract(sin(dot(vec2(x,x),\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvec2 cubic_hermite(vec2 p0, vec2 p1, vec2 v0, vec2 v1, float t) {\n    float sq = t*t;\n    float cu = t*t*t;\n    \n    float h1 = 2.*cu-3.*sq+1.;\n    float h2 = -2.*cu+3.*sq;\n    float h3 = cu - 2.*sq + t;\n    float h4 = cu - sq;\n    return h1*p0+h2*p1+h3*v0+h4*v1;\n}\n\nfloat blob(vec2 uv, float seed, float intensity){\n    float t = iTime*rand(seed)*0.7;\n    vec2 pos0 = vec2(0.5,0.5)+random2(vec2(seed,floor(t)));\n    vec2 pos1 = vec2(0.5,0.5)+random2(vec2(seed,floor(t+1.)));\n    vec2 vel0 = random2(vec2(floor(t),seed));\n    vec2 vel1 = random2(vec2(floor(t+1.),seed));\n    \n    vec2 pos = cubic_hermite(pos0,pos1,vel0,vel1,fract(t));\n    return max(0.0,pow(distance(uv,pos),intensity));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .25;\n    uv *= 2.;\n    // Time varying pixel color\n    float height_field = 1.; //pow(distance(uv, vec2(0.5,0.5)),5.);\n    vec3 height_col = vec3(1.0,1.0,1.0);\n    for(float i = 0.; i<BLOBS; i+=1.){\n        vec3 r_color = vec3(rand(i),rand(i+1.),rand(i+2.));\n        height_field *= blob(uv,i,0.9);\n        height_col = mix(\n            height_col,\n            r_color,\n            1.-pow(blob(uv,i,0.9),2.)); \n    }\n    \n    height_field*= 100.5;\n         \n    float line_field = 0.0;\n    line_field = pow(height_field,-0.3);\n\n    /*for(float f = 0.0; f<LINES; f+=1.0){\n       line_field += step(height_field,f-(LINES/2.)+(1./(sqrt(BLOBS)))*(2.)) \n                   - step(height_field,f-(LINES/2.)+1./(sqrt(BLOBS)));  \n    }*/\n    \n    vec3 col = vec3(line_field);\n    \n    //col = height_col;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}