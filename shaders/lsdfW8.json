{
    "Shader": {
        "info": {
            "date": "1525537383",
            "description": "a grid for rendering  in the sky",
            "flags": 0,
            "hasliked": 0,
            "id": "lsdfW8",
            "likes": 0,
            "name": "ProcSkyGrid",
            "published": 3,
            "tags": [
                "proceduralskygrid"
            ],
            "usePreview": 0,
            "username": "jherico",
            "viewed": 85
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926;\nconst vec3 COLOR = vec3(0x00, 0xD8, 0x02) / vec3(0xFF);\n\nconst vec3 HIGHLIGHT = vec3(0xFC, 0xCD, 0x81) / vec3(255);\nconst vec3 BG = vec3(0x3D) / vec3(255);\n\nfloat aastep(float threshold, float dist) {\n    float afwidth = 0.7 * length(vec2(dFdx(dist), dFdy(dist)));\n    return smoothstep(threshold - afwidth, threshold + afwidth, dist);\n}\n\nfloat smoothsteprange(float max, float min, float transition, float value) {\n    return smoothstep(max, max - transition, value) * \n        smoothstep(min, min + transition, value);\n}\n\nfloat noise4D(vec4 p)\n{\n\treturn fract(sin(dot(p ,vec4(12.9898,78.233,126.7235, 593.2241))) * 43758.5453);\n}\n\n\nfloat worley4D(vec4 p)\n{\t\t\t\t\t \t\t\t\t\t \n\tfloat r = 3.0;\n    vec4 f = floor(p);\n    vec4 x = fract(p);\n\tfor(int i = -1; i<=1; i++)\n\t{\n\t\tfor(int j = -1; j<=1; j++)\n\t\t{\n\t\t\tfor(int k = -1; k<=1; k++)\n\t\t\t{\n                for (int l = -1; l <= 1; l++) {\n                \tvec4 q = vec4(float(i),float(j),float(k), float(l));\n    \t\t\t\tvec4 v = q + vec4(noise4D((q+f)*1.11), noise4D((q+f)*1.14), noise4D((q+f)*1.17), noise4D((q+f)*1.20)) - x;\n    \t\t\t\tfloat d = dot(v, v);\n\t\t\t\t\tr = min(r, d);\n                }\n\t\t\t}\n\t\t}\n\t}\n    return sqrt(r);\n}\t\n\nconst float CUTOFF = 0.65;\nconst float NOISE_MULT = 8.0;\nconst float NOISE_POWER = 1.0;\n\nvec3 mainColor(vec3 direction) {\n    float n = worley4D(vec4(direction * NOISE_MULT, iTime / 3.0));\n    n = 1.0 - n;\n    n = pow(n, NOISE_POWER);\n    if (n < CUTOFF) {\n        return vec3(0.0);\n    }\n\t\n    n = (n - CUTOFF) / (1.0 - CUTOFF);\n\treturn COLOR * (1.0 - n);\n}\n\n\nmat3 rot(vec3 a, float b) {\n    a = normalize(a);\n    float s = sin(b);\n    float c = cos(b);\n    float d = 1.0 - c;\n    return mat3(d * a.x * a.x + c, d * a.x * a.y - a.z * s, d * a.z * a.x + a.y * s, d * a.x * a.y + a.z * s, d * a.y * a.y + c,\n                d * a.y * a.z - a.x * s, d * a.z * a.x - a.y * s, d * a.y * a.z + a.x * s, d * a.z * a.z + c);\n}\n\nfloat e = 2.3, p = atan(1.) * 4.;\n\nvec3 getPixelDirection(in vec2 fragCoord) {\n    vec2 R = iResolution.xy, u = fragCoord / R;\n    vec4 m = iMouse / R.xyxx;\n    mat3 rmx = rot(vec3(0, 1, 0), clamp(-m.w * R.x, 0., 1.) * 3.14 / 10. + m.x * p * 2.);\n    rmx *= rot(cross(vec3(0, 1, 0), vec3(0, 0, 1) * rmx), m.y * p - p / 2.);\n    vec3 d = normalize(vec3((u * 2. - 1.) * vec2(iResolution.x / iResolution.y, 1), 1)) * rmx;\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 d = getPixelDirection(fragCoord);\n    fragColor = vec4(mainColor(d), 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}