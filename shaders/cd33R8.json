{
    "Shader": {
        "info": {
            "date": "1677430750",
            "description": ":3",
            "flags": 0,
            "hasliked": 0,
            "id": "cd33R8",
            "likes": 12,
            "name": "Cat from SDF primitives",
            "published": 3,
            "tags": [
                "sdf",
                "cat"
            ],
            "usePreview": 0,
            "username": "spacecat",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\n\nvec2 rotate2D( in vec2 uv, in float angle )\n{\n    mat2 transform = mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n    return uv * transform;\n}\n\n\n/* Primitive SDFs by iq https://iquilezles.org/articles/distfunctions2d/ */\n\nfloat sdCircle( in vec2 p, in float r, in vec2 origin )\n{\n    return length(p - origin) - r;\n}\n\nfloat sdTriangle( in vec2 p, in float size, in float rotation, in vec2 origin )\n{\n    // Transformations\n    p = rotate2D(p, rotation);\n    p -= origin;\n    p /= size;\n    \n\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n \n    \n    return -length(p)*sign(p.y) * size;\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\n\n/* Bound SDF for a cat's face from primitives */\nfloat sdCat(in vec2 uv)\n{\n    float head = sdCircle(uv, 0.36, vec2(0.0, -0.1));\n    float earLeft = sdTriangle(uv, 0.2, -0.6, vec2(-0.1, 0.29));\n    float earRight = sdTriangle(uv, 0.2, 0.6, vec2(0.1, 0.29));\n    float nose = sdTriangle(uv, 0.03, PI, vec2(0.0, 0.2));\n    float eyeLeft = max(\n            sdCircle(uv, 0.045, vec2(0.1, -0.09)),\n            -sdCircle(uv, 0.009, vec2(0.095, -0.082))\n    );\n    float eyeRight = max(\n            sdCircle(uv, 0.045, vec2(-0.1, -0.09)),\n            -sdCircle(uv, 0.009, vec2(-0.105, -0.082))\n    );\n    float mouthLeft = sdBezier(uv, vec2(0.0,-0.23), vec2(-0.05,-0.33), vec2(-0.1,-0.28));\n    float mouthRight = sdBezier(uv, vec2(0.0,-0.23), vec2(0.05,-0.33), vec2(0.1,-0.28));\n    \n    // Put it all together\n    float cat = min(head, min(earLeft, earRight));\n    cat = max(cat, -nose);\n    cat = max(max(cat, -eyeLeft), -eyeRight);\n    cat = max(max(cat, -mouthLeft), -mouthRight);\n    \n    // Whiskers\n    for (float y = -0.22; y <= -0.17; y += 0.02) {\n        float whiskerLeft = sdBezier(uv, vec2(-0.1, y), vec2(-0.25, y + 0.03),\n                vec2(-0.45, y - 0.9 * (-0.15 - y)));\n        float whiskerRight = sdBezier(uv, vec2(0.1, y), vec2(0.25, y + 0.03),\n                vec2(0.45, y - 0.9 * (-0.15 - y)));\n        \n        // The whiskers being both outside and inside the face makes this weird...\n        cat = cat > 0.0 ? min(cat, whiskerLeft) : max(cat, -whiskerLeft);\n        cat = cat > 0.0 ? min(cat, whiskerRight) : max(cat, -whiskerRight);\n    }\n    \n    return cat;\n}\n\n/* Version without details */\nfloat sdSimpleCat(vec2 uv)\n{\n    float head = sdCircle(uv, 0.36, vec2(0.0, -0.1));\n    float earLeft = sdTriangle(uv, 0.2, -0.6, vec2(-0.1, 0.29));\n    float earRight = sdTriangle(uv, 0.2, 0.6, vec2(0.1, 0.29));\n    \n    float cat = min(head, min(earLeft, earRight));\n    \n    return cat;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Center and correct for aspect ratio\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv.y -= 0.03;\n\n    float cat = sdCat(rotate2D(uv, sin(iTime) / 8.0));\n    float outline = 1.0 - smoothstep(0.002, 0.006, abs(cat));\n    float inside = step(0.0, -cat);\n\n\t// coloring\n    /*float d = cat*2.0;\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );*/\n    \n    vec3 col = vec3(0.0, 0.0, 0.1);\n    \n    vec2 bgPatternUV = fract(rotate2D(uv + iTime * 0.1, -0.4) * 10.0) - 0.5;\n    float bgPattern = smoothstep(-0.01, 0.01, sdSimpleCat(bgPatternUV));\n    vec3 bgColor = mix(vec3(uv * 0.2, 0.2), vec3(uv * 0.6 + 0.4, 1.0), bgPattern);\n    col = mix(col, bgColor, clamp(cat * 5.0, 0.0, 1.0));\n    \n    vec3 insideColor = vec3(uv * 0.8 + 0.8, 1.0);\n    col = mix(col, insideColor, inside);\n    \n    vec3 lineColor = vec3(uv * 1.8 + 0.6, 1.0);\n    col = mix(col, lineColor, outline);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}