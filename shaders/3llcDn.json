{
    "Shader": {
        "info": {
            "date": "1591829201",
            "description": "2d colourful plasma",
            "flags": 0,
            "hasliked": 0,
            "id": "3llcDn",
            "likes": 17,
            "name": "bubble gum",
            "published": 3,
            "tags": [
                "metaballs",
                "plasma",
                "bubbles"
            ],
            "usePreview": 0,
            "username": "firanolfind",
            "viewed": 703
        },
        "renderpass": [
            {
                "code": "// forked from https://www.shadertoy.com/view/4tl3Rn\n\nfloat roundLookingBlob(vec2 fragCoord, vec2 tPos, float r) {\n    vec2 pos = fragCoord.xy/iResolution.yy - vec2(0.5);\n    pos.x -= ((iResolution.x-iResolution.y)/iResolution.y)/2.0;\n    return pow(max(1.0-length(pos-tPos), 0.0) , r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat v = 0.0 \n        + roundLookingBlob(fragCoord * 0.2,vec2(sin(iTime)* 2.0, cos(iTime)*0.004), 10.0)\n    \t+ roundLookingBlob(fragCoord,vec2(sin(iTime*0.6)*0.2, cos(iTime)*0.3), 7.0)\n    \t+ roundLookingBlob(fragCoord,vec2(cos(iTime*0.8)*0.3, sin(iTime*1.1)*0.04), 5.0)\n    \t+ roundLookingBlob(fragCoord,vec2(cos(iTime*0.2)*0.2, sin(iTime*0.9)*0.05), 8.0)\n    \t+ roundLookingBlob(fragCoord,vec2(cos(iTime*1.2)*0.2, 2.0 *sin(iTime*0.9)*0.05), 8.0)\n        + roundLookingBlob(fragCoord,vec2(cos(iTime*0.3)*0.4, sin(iTime*1.1)*0.4), 5.0)\n    \t+ roundLookingBlob(fragCoord,vec2(sin(iTime*0.6)*0.9, cos(iTime)*0.3), 7.0)\n    \t+ roundLookingBlob(fragCoord,vec2(sin(iTime*0.6)*0.3, cos(iTime)*0.8), 7.0)\n        + roundLookingBlob(fragCoord,vec2(cos(iTime*0.3)*0.9, sin(iTime*0.1)*0.4), 3.0)\n        ;\n    v = clamp((v-0.5)*1000.0, 0.0, 1.0);\n    //v = 1.0;\n    //float color = cos(iTime * fragCoord.x) * 1.0;\n    //v *= color;\n    //float r = 1.0 + fragCoord.y *sin(iTime * 0.5) +  0.0001 * (2.0 * sin(iTime * 1.0)) ;\n    float r = \n        -1.0 * 1.0 *sin(iTime) \n        - 2.0* cos(1.0 * iTime) * fragCoord.x / iResolution.x * fragCoord.y / iResolution.y;\n    float g = 0.0 - 0.5 * cos(2.0 * iTime) *  fragCoord.y / iResolution.y; //1.0* sin(iTime) - r + 0.8;\n    float b = 4.0 + sin(iTime) - g + 0.8;\n\tfragColor = vec4(r * v, v * g, v * b, 0.0);\n}\n\n//* fragCoord.y * fragCoord.x",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}