{
    "Shader": {
        "info": {
            "date": "1527341606",
            "description": "Hash without sine, WebGL 2 version, using  James_Harnett's great [url=https://www.shadertoy.com/view/MdcfDj]Simplest Fastest 2D Hash[/url]. For integer stepped numbers.\n",
            "flags": 8,
            "hasliked": 0,
            "id": "XdGfRR",
            "likes": 51,
            "name": "Hash without Sine 2 (WebGL 2)",
            "published": 3,
            "tags": [
                "noise",
                "hash",
                "rnd",
                "rand",
                "webgl2",
                "hashwithoutsine"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 3948
        },
        "renderpass": [
            {
                "code": "// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins. May 2018\n\n\n// Almost a direct copy of most of \"Simplest Fastest 2D Hash\" with additional hash types.\n// https://www.shadertoy.com/view/MdcfDj\n\n// For use in WebGL 2 shaders.\n// The float versions should still be in integer steps, but they can be negetive.\n\n\n// The defines don't need to change for scaling purposes,\n// but I'll keep them in for any future needs.\n\n\n//---------------------------------------------------------------------------------------------------------------\n//===============================================================================================================\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n\tfloat up1 = (fragCoord.x + fragCoord.y*iResolution.x) + float(iFrame);\n\tvec2  up2 = vec2(fragCoord) + float(iFrame);\n\tvec3  up3 = vec3(fragCoord, float(iFrame));\n    vec4  up4 = vec4(fragCoord, float(iFrame), float(iDate.x));\n\n\tvec3 c = vec3(0);\n\n\t//c.x = hash11(-up1);\n\t//c.xy = hash23(up3);\n\tc = vec3(hash14(up4));\n\n\tfragColor = vec4(c, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins. May 2018\n\n// Sound uses the same hash but multiplied by the sample-rate to ensure integer randomness...\n\n\n\nvec2 mainSound( in int samp, float time )\n{\n    uint t = uint(time*float(iSampleRate));\n    vec2 aud = hash21(t);\n    return (aud*2.0-1.0) *smoothstep(0.0, 2.0, time)*smoothstep(180.0, 170.0, time) * .25;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins. May 2018\n\n// The normalising multipler is 1.0 / (float)0xFFFFFFFF\n\n// The labeling refers to the number of values - hash(out)(in)...\n//---------------------------------------------------------------------------------------------------------------\nfloat hash11(uint q)\n{\n\tuvec2 n = q * uvec2(1597334673U, 3812015801U);\n\tq = (n.x ^ n.y) * 1597334673U;\n\treturn float(q) * 2.328306437080797e-10;\n}\n\nfloat hash11(float p)\n{\n\tuvec2 n = uint(int(p)) * uvec2(1597334673U, 3812015801U);\n\tuint q = (n.x ^ n.y) * 1597334673U;\n\treturn float(q) * 2.328306437080797e-10;\n}\n\n//---------------------------------------------------------------------------------------------------------------\nfloat hash12(uvec2 q)\n{\n\tq *= uvec2(1597334673U, 3812015801U);\n\tuint n = (q.x ^ q.y) * 1597334673U;\n\treturn float(n)  / float(0xffffffffU);\n}\n\nfloat hash12(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * uvec2(1597334673U, 3812015801U);\n\tuint n = (q.x ^ q.y) * 1597334673U;\n\treturn float(n) * 2.328306437080797e-10;\n}\n\n//---------------------------------------------------------------------------------------------------------------\nfloat hash13(uvec3 q)\n{\n\tq *= uvec3(1597334673U, 3812015801U, 2798796415U);\n\tuint n = (q.x ^ q.y ^ q.z) * 1597334673U;\n\treturn float(n) * 2.328306437080797e-10;\n}\n\nfloat hash13(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tuint n = (q.x ^ q.y ^ q.z) * 1597334673U;\n\treturn float(n) * 2.328306437080797e-10;\n}\n\n//---------------------------------------------------------------------------------------------------------------\nfloat hash14(uvec4 q)\n{\n\tq *= uvec4(1597334673U, 3812015801U, 2798796415U, 1979697957U);\n\tuint n = (q.x ^ q.y ^ q.z ^ q.w) * 1597334673U;\n\treturn float(n) * 2.328306437080797e-10;\n}\n\nfloat hash14(vec4 p)\n{\n\tuvec4 q = uvec4(ivec4(p)) * uvec4(1597334673U, 3812015801U, 2798796415U, 1979697957U);\n\tuint n = (q.x ^ q.y ^ q.z ^ q.w) * 1597334673U;\n\treturn float(n) * 2.328306437080797e-10;\n}\n\n//---------------------------------------------------------------------------------------------------------------\nvec2 hash21(uint q)\n{\n\tuvec2 n = q * uvec2(1597334673U, 3812015801U);\n\tn = (n.x ^ n.y) * uvec2(1597334673U, 3812015801U);\n\treturn vec2(n) * 2.328306437080797e-10;\n}\n\nvec2 hash21(float p)\n{\n\tuvec2 n = uint(int(p)) * uvec2(1597334673U, 3812015801U);\n\tn = (n.x ^ n.y) * uvec2(1597334673U, 3812015801U);\n\treturn vec2(n) * 2.328306437080797e-10;\n}\n\n//---------------------------------------------------------------------------------------------------------------\nvec2 hash22(uvec2 q)\n{\n\tq *= uvec2(1597334673U, 3812015801U);\n\tq = (q.x ^ q.y) * uvec2(1597334673U, 3812015801U);\n\treturn vec2(q) * 2.328306437080797e-10;\n}\n\nvec2 hash22(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p))*uvec2(1597334673U, 3812015801U);\n\tq = (q.x ^ q.y) * uvec2(1597334673U, 3812015801U);\n\treturn vec2(q) * 2.328306437080797e-10;\n}\n\n//---------------------------------------------------------------------------------------------------------------\nvec2 hash23(uvec3 q)\n{\n\tq *= uvec3(1597334673U, 3812015801U, 2798796415U);\n\tuvec2 n = (q.x ^ q.y ^ q.z) * uvec2(1597334673U, 3812015801U);\n\treturn vec2(n) * 2.328306437080797e-10;\n}\n\nvec2 hash23(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tuvec2 n = (q.x ^ q.y ^ q.z) * uvec2(1597334673U, 3812015801U);\n\n\treturn vec2(n) * 2.328306437080797e-10;\n}\n\n//---------------------------------------------------------------------------------------------------------------\nvec3 hash31(uint q)\n{\n\tuvec3 n = q * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tn = (n.x ^ n.y ^ n.z) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(n) * 2.328306437080797e-10;\n}\nvec3 hash31(float p)\n{\n\n\tuvec3 n = uint(int(p)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tn = (n.x ^ n.y ^ n.z) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(n) * 2.328306437080797e-10;\n}\n\n//---------------------------------------------------------------------------------------------------------------\nvec3 hash32(uvec2 q)\n{\n\tuvec3 n = q.xyx * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tn = (n.x ^ n.y ^n.z) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(n) * 2.328306437080797e-10;\n}\n\nvec3 hash32(vec2 q)\n{\n\tuvec3 n = uvec3(ivec3(q.xyx)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tn = (n.x ^ n.y ^ n.z) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(n) * 2.328306437080797e-10;\n}\n\n//---------------------------------------------------------------------------------------------------------------\nvec3 hash33(uvec3 q)\n{\n\tq *= uvec3(1597334673U, 3812015801U, 2798796415U);\n\tq = (q.x ^ q.y ^ q.z)*uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(q) * 2.328306437080797e-10;\n}\n\nvec3 hash33(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tq = (q.x ^ q.y ^ q.z)*uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(q) * 2.328306437080797e-10;\n}\n\n//---------------------------------------------------------------------------------------------------------------\nvec4 hash44(uvec4 q)\n{\n\tq *= uvec4(1597334673U, 3812015801U, 2798796415U, 1979697957U);\n\tq = (q.x ^ q.y ^ q.z ^ q.w)*uvec4(1597334673U, 3812015801U, 2798796415U, 1979697957U);\n\treturn vec4(q) * 2.328306437080797e-10;\n}\n\nvec3 hash44(vec4 p)\n{\n\tuvec4 q = uvec4(ivec4(p)) * uvec4(1597334673U, 3812015801U, 2798796415U, 1979697957U);\n\tq = (q.x ^ q.y ^ q.z ^ q.w)*uvec4(1597334673U, 3812015801U, 2798796415U, 1979697957U);\n\treturn vec3(q) * 2.328306437080797e-10;\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}