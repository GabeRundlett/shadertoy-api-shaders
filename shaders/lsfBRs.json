{
    "Shader": {
        "info": {
            "date": "1497513670",
            "description": "Inspired by https://projecteuler.net/problem=508",
            "flags": 0,
            "hasliked": 0,
            "id": "lsfBRs",
            "likes": 12,
            "name": "Twindragon construction",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "twindragon"
            ],
            "usePreview": 0,
            "username": "al13n",
            "viewed": 623
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n\nfloat bits(vec2 p){\n    p = floor(p + .5);\n    float res = 0.;\n    for (int i = 0; i < 100; ++i) {\n        if(dot(p,p)<.5)\n            return res;\n        res += 1.;\n        p.x -= step(1., mod(p.x+p.y+.5, 2.));\n        p = mat2(-.5,-.5,.5,-.5)*p;\n    }\n    return -1.; // this shouldn't happen\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec4 bg_col = vec4(.3,.3,.7,1.);\n    const vec4 fg_col = vec4(.7,.7,.7,1.);\n    const vec4 mv_col = vec4(.2,.8,.2,1.);\n    const float step_t = 1.;\n    const float col_t = .2;\n    const float wait_t = .1;\n    const float num_steps = 20.;\n\n    float period = num_steps*step_t*4.;\n    float t = mod(iTime, period);\n    float mode = float(t>period/2.);\n    t = mod(t,period/2.);\n    t=min(t,period/2.-t);\n    float b = floor(t/step_t);\n    float bt = fract(t/step_t);\n    float logscale = b+(b>num_steps-1.5 ? (1.-pow(1.-bt,2.))*.5 : b<.5 ? bt*bt*.5+.5 : bt);\n    float scale = pow(2.,logscale/2.)*3.;\n\tvec2 uv = (fragCoord.xy - iResolution.xy*.5 + vec2(.12,.17)) / iResolution.y * scale;\n\n    float fg, mv;\n    \n    if (mode < .5) {\n    \tvec2 offset = vec2(cos(PI*.75*b),sin(PI*.75*b))*pow(2.,b*.5);\n    \tfg = float(bits(uv)<b+.5);\n    \tmv = float(bits(mix(uv,uv-offset,smoothstep(col_t+wait_t,1.-col_t-wait_t,bt)))<b+.5);\n    } else {\n        // This block of code is bad, but I should go to sleep now.\n        float tt=smoothstep(.1,.4,bt);\n        mat2 ip = mat2(cos(PI*.75*tt),-sin(PI*.75*tt),sin(PI*.75*tt),cos(PI*.75*tt))*pow(2.,-tt*.5);\n        vec2 uvc = mat2(.5,.5,.5,-.5)*uv;\n        uvc = floor(uvc+.5);\n        uvc = mat2(1.,1.,1.,-1.)*uvc;\n        vec2 wi = ip*uvc;\n        float tt2=1.-smoothstep(.4,.7,bt);\n        if(b>10.)\n            tt2=1.; // terrible aliasing otherwise\n        mat2 ip2 = mat2(cos(PI*.25*tt2),-sin(PI*.25*tt2),sin(PI*.25*tt2),cos(PI*.25*tt2))*pow(2.,-tt2*.5);\n        vec2 wr=(tt2==1.?ip:ip2*ip)*(uv-uvc);\n        fg = float((tt2==1. || all(lessThanEqual(abs(mat2(1.,1.,1.,-1.)*wr),vec2(.5)))) && bits(wi+wr)<b+.5);\n        float mvt = smoothstep(.7,.9,bt);\n        float xr=uv.x+mod(floor(uv.y+.5)+.5,2.)-.5;\n        xr=mod(xr,2.);\n        mv = float(xr>.5 && xr<=.5+mvt && bits(uv)<b+1.5);\n    }\n\n    fragColor =\n        mix(mix(mix(bg_col,fg_col,fg),\n                mv_col,\n                mv*.7*smoothstep(wait_t,col_t+wait_t,bt)),\n            fg_col,\n            smoothstep(1.-col_t-wait_t,1.-wait_t,bt*mv));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}