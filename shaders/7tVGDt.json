{
    "Shader": {
        "info": {
            "date": "1638550635",
            "description": "look at pointer",
            "flags": 0,
            "hasliked": 0,
            "id": "7tVGDt",
            "likes": 0,
            "name": "Eye tracker",
            "published": 3,
            "tags": [
                "eyes",
                "eye",
                "cursor",
                "eyeball",
                "follow",
                "pointer"
            ],
            "usePreview": 0,
            "username": "Elohiem",
            "viewed": 61
        },
        "renderpass": [
            {
                "code": "mat3 calcRot(vec3 n1, vec3 n2)\n{\n    vec3 axis = cross(n1,n2);\n    float cosA = dot(n1,n2);\n    float k = 1.0 / (1.0 + cosA);\n\n    mat3 rot = mat3((axis.x*axis.x*k)+cosA, (axis.x*axis.y*k)+axis.z, (axis.x*axis.z*k)-axis.y, (axis.y * axis.x * k) - axis.z, (axis.y * axis.y * k) + cosA, (axis.y * axis.z * k) + axis.x, (axis.z * axis.x * k) + axis.y, (axis.z * axis.y * k) - axis.x, (axis.z * axis.z * k) + cosA);\n    return rot;\n}\n        \nvec2 mapCircle2Square(vec2 uv)\n{\n    float u = uv.x;\n    float v = uv.y;\n    \n    float x = 0.5 * sqrt(2.0+pow(u,2.0) - pow(v,2.0) + 2.0*u*sqrt(2.0)) - 0.5 * sqrt(2.0+pow(u,2.0) - pow(v,2.0) - 2.0*u*sqrt(2.0));\n    float y = 0.5 * sqrt(2.0-pow(u,2.0) + pow(v,2.0) + 2.0*v*sqrt(2.0)) - 0.5 * sqrt(2.0-pow(u,2.0) + pow(v,2.0) - 2.0*v*sqrt(2.0));\n    return vec2(x,y);\n}\n\nmat3 matrixMakeRotation(float xr, float yr, float zr) {\n    float cosA = cos(xr);\n    float cosB = cos(yr);\n    float cosC = cos(zr);\n    float sinA = sin(xr);\n    float sinB = sin(yr);\n    float sinC = sin(zr);\n\n    mat3 matrix = mat3(cosB*cosC, sinA*sinB*cosC+cosA*sinC,-cosA*sinB*cosC+sinA*sinC,-cosB*sinC,-sinA*sinB*sinC+cosA*cosC,cosA*sinB*sinC+sinA*cosC, sinB, -sinA*cosB,cosA*cosB); \n    return matrix;\n}\n\nfloat convertRange(float sourceMin, float sourceMax, float targetMin, float targetMax, float value) {\n    float o = (targetMax-targetMin);\n    o /= (sourceMax-sourceMin);\n    o *= (value-sourceMin);\n    return o +targetMin;\n}\n\n\nvec4 createEye(vec2 uv, vec2 pos, float rad_eye, float rad_iris, float rad_pupil) {\n\n    // bounds eyeball\n\tfloat d1 = length(pos - uv) - rad_eye;\n\tfloat t1 = clamp(-d1, 0.0, 1.0);\n\n    // normal eyeball\n    float sX = (pos - uv).x;\n    float sY = (pos - uv).y;\n    float sZ = -sqrt(abs(pow(rad_eye, 2.0) - pow(sX, 2.0) - pow(sY, 2.0)));\n    vec3 N = normalize(vec3(sX,sY,sZ));\n    \n    // get normal view sphere\n    float rad_sphere = length(iResolution.xy - iResolution.xy*0.5);\n    float sX2 = (iResolution.x*0.5 - iMouse.x);\n    float sY2 = (iResolution.y*0.5 - iMouse.y);\n    if (iMouse.x == 0.0 && iMouse.y == 0.0) { // default condition\n        sX2 = 0.0;\n        sY2 = 0.0;\n    }\n    float sZ2 = -sqrt(abs(pow(rad_sphere,2.0) - pow(sX2, 2.0) - pow(sY2, 2.0)));\n    vec3 N2 = normalize(vec3(sX2, sY2, sZ2) - vec3(iResolution.x*0.5-pos.x, iResolution.y*0.5-pos.y, 0.0));\n    \n    // unrotate iris\n    vec3 dir = vec3(0.0,0.0,1.0);\n    mat3 rotMat = calcRot(dir, N2);\n    vec3 rot = normalize(N * rotMat);\n\n    // check if unrotated normal is within circle\n\tfloat d2 = length(rot.xy * rad_eye) - rad_iris;\n\tfloat t2 = clamp(-d2, 0.0, 1.0) * float(rot.z > 0.0) * t1;\n\n    // do the same for pupil\n\tfloat d3 = length(rot.xy * rad_eye) - rad_pupil;\n\tfloat t3 = clamp(-d3, 0.0, 1.0) * float(rot.z > 0.0) * t1;\n    \n    // light dir opposite of iris\n    vec3 L = -N2;\n\n    // shadow\n    float NdotL = max(dot(N, -L), 0.0);\n    \n    // layer eyeball\n    vec4 layer_eyeball = vec4(vec3(1,0.95,0.95)*NdotL, t1);\n    vec4 layer_iris = vec4(vec3(0.7, 0.7,0.95)*NdotL, t2);\n    vec4 layer_pupil = vec4(vec3(0.05,0.05,0.05)*NdotL, t3);\n\n    vec4 blend = mix(layer_eyeball, layer_iris, layer_iris.a);\n    blend = mix(blend, layer_pupil, layer_pupil.a);\n    \n\treturn blend;\n}\n\n\nfloat bounce(float time, float width)\n{\n    float res = mod(time,width*2.0);\n    \n    if (res > width)\n    {\n        res = width - res + width;\n    }\n    return res;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\n    // Background layer\n\tvec4 frag = vec4(0.1,0.1,0.1, 1.0);\n\t\n    vec2 center = vec2(bounce(iResolution.y,iResolution.x),iResolution.y * 0.5);\n    \n    vec2 center1 = vec2(iResolution.x * 0.25, iResolution.y * 0.5);\n    vec2 center2 = vec2(iResolution.x * 0.75, iResolution.y * 0.5);\n    \n\t// eyes\n\tvec4 eye1 = createEye(uv, center1, 0.25 * iResolution.y, 0.1 * iResolution.y, 0.05 * iResolution.y);\n    vec4 eye2 = createEye(uv, center2, 0.25 * iResolution.y, 0.1 * iResolution.y, 0.05 * iResolution.y);\n  \n  \t// blend\n    frag = mix(frag, eye1, eye1.a);   \n    frag = mix(frag, eye2, eye2.a);\n    \n    \n    \n    //for (float i = 0.0; i < 20.0; i++) {\n    //    for (float j = 0.0; j < 15.0; j++) {\n    //       vec2 center = vec2(iResolution.x/20.0*i + i*2.0 + 2.0, iResolution.y/15.0*j + 18.0);\n    //        vec4 eye = createEye(uv, center, 0.25 * iResolution.y*0.2, 0.1 * iResolution.y*0.2, 0.05 * iResolution.y*0.2);\n    //        frag = mix(frag, eye, eye.a);\n    //    }\n    //}\n    \n\tfragColor = frag;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}