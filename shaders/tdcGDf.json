{
    "Shader": {
        "info": {
            "date": "1569388184",
            "description": "Modified version of 'square tunnel' example from the Shadertoy Wikipedia page.\n- Has flat sides and 90 degree corners instead of the approximation used in the example\n- The texture was also given a spiraling corkscrew appearance (some distortion present)",
            "flags": 0,
            "hasliked": 0,
            "id": "tdcGDf",
            "likes": 16,
            "name": "(Actually) Square Tunnel",
            "published": 3,
            "tags": [
                "tunnel"
            ],
            "usePreview": 0,
            "username": "jsbrucker",
            "viewed": 766
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // input: pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // angle of each pixel to the center of the screen\n    float a = atan(p.y,p.x);\n    \n    // modified distance metric\n    float r = length(p)*cos(mod(a+.785, 1.57)-0.785);\n    \n    // index texture by (animated inverse) radius and angle\n    vec2 uv = vec2(1.0/r + 0.1*iTime, a + iTime/4. + .5/r);\n    \n    // pattern: stripes\n    vec2 gv = fract(5.*uv/3.14)-.5;\n    float d = abs(abs(gv.x+gv.y)-.5);\n    float f = smoothstep(.01, -.01, d-.25);\n\n    // color fetch: palette\n    vec3 col = 0.5 + 0.5*sin(f + vec3(1.0,0.0,0.0) );\n    \n    // lighting: light at end of the tunnel    \n    col = 0.1 + col/r/4.;\n    \n    // output: pixel color\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}