{
    "Shader": {
        "info": {
            "date": "1572532077",
            "description": "its a bit glitchy, but it works so im glad\nuse mouse to control camera\nmade using https://www.michaelwalczyk.com/blog/2017/5/25/ray-marching",
            "flags": 0,
            "hasliked": 0,
            "id": "tsdXRX",
            "likes": 0,
            "name": "3d stuff! (raymarching test)",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sphere"
            ],
            "usePreview": 0,
            "username": "thefox231",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "// 2d tools, utils, etc\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat2 rotate2d(float _angle) {\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n// defining shapes\nfloat distance_from_sphere(in vec3 p, in vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// actual raymarching stuff\n// the world and shapes in said world\nfloat map_the_world(in vec3 p)\n{\n    float displacement = sin(5.0 * p.x + iTime) * sin(5.0 * p.y + iTime*0.5) * sin(5.0 * p.z + iTime*2.0) * 0.25;\n    \n    float m = distance_from_sphere(p - vec3(0.0, 0.0, -3.0), vec3(0.0), 0.4) - displacement;\n    \n    for (int i = 0; i<=10; i++) {\n        mat2 rotation = rotate2d(float(i*36));\n        vec3 position = vec3(1.5, 0.0, -3.0);\n        position.xy *= rotation;\n        \n    \tm = min(m, distance_from_sphere(p - position, vec3(0.0), 0.2));\n    }\n    \n    return m;\n}\n\n// normals aka confusing shading stuff\nvec3 calculate_normal(vec3 p) {\n    float d = map_the_world(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map_the_world(p-e.xyy),\n        map_the_world(p-e.yxy),\n        map_the_world(p-e.yyx));\n    \n    return normalize(n);\n}\n\n// The Function\nvec3 ray_march(in vec3 ro, in vec3 rd)\n{\n    float total_distance_traveled = 0.0;\n    const int NUMBER_OF_STEPS = 2000;\n    const float MINIMUM_HIT_DISTANCE = 0.00001;\n    const float MAXIMUM_TRACE_DISTANCE = 10000.0;\n\n    for (int i = 0; i < NUMBER_OF_STEPS; ++i)\n    {\n        vec3 current_position = ro + total_distance_traveled * rd;\n\n        float distance_to_closest = map_the_world(current_position);\n\n        if (distance_to_closest < MINIMUM_HIT_DISTANCE) \n        {\n            vec3 normal = calculate_normal(current_position);\n            vec3 light_position = vec3(2.0, -5.0, 3.0);\n            vec3 direction_to_light = normalize(current_position - light_position);\n\n            float diffuse_intensity = max(0.0, dot(normal, direction_to_light));\n\n            return hsv2rgb(vec3(iTime/13.0, 0.5, 0.5)) * diffuse_intensity;\n        }\n\n        if (total_distance_traveled > MAXIMUM_TRACE_DISTANCE)\n        {\n            break;\n        }\n        total_distance_traveled += distance_to_closest;\n    }\n    return vec3(0.0);\n}\n\n// rendering\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n\n    vec3 camera_position;\n    \n    if (iMouse.z > 0.0) {\n    \tcamera_position = vec3(iMouse.x/iResolution.x - 0.5, iMouse.y/iResolution.y - 0.5, -5);\n    } else {\n        camera_position = vec3(1.0, 0.0, -5);\n    \tcamera_position.xy *= rotate2d(iTime);\n    }\n        \n    vec3 ro = camera_position;\n    vec3 rd = vec3(uv, 1.0);\n\n    vec3 shaded_color = ray_march(ro, rd);\n\n    fragColor = vec4(shaded_color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}