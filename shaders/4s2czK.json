{
    "Shader": {
        "info": {
            "date": "1492860435",
            "description": "Distance to an apollonian gasket. This was surprisingly difficult to write. There is still some issues, I'm not sure why.",
            "flags": 0,
            "hasliked": 0,
            "id": "4s2czK",
            "likes": 40,
            "name": "Simple Apollonian Gasket",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "Klems",
            "viewed": 1376
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nvec3 hsv2rgb( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = smoothstep(vec3(0), vec3(1), rgb);\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nmat2 rot( in float a ) {\n    vec2 v = sin(vec2(PI*0.5, 0) + a);\n    return mat2(v, -v.y, v.x);\n}\n\n// http://mathworld.wolfram.com/TrilinearCoordinates.html\n// http://mathworld.wolfram.com/TriangleCenterFunction.html\n// http://mathworld.wolfram.com/InnerSoddyCircle.html\n\n// triangle center function of an equal detour point\nfloat equalDetourPoint(float a, float b, float c, float area2) {\n    return 1.0 + area2 / (a*(b+c-a));\n}\n\n// center of a soddy's circle\nvec2 soddy( in vec2 aP, in float aR, in vec2 bP, in float bR, in vec2 cP, in float cR ) {\n    // length of each sides\n    float a = distance(bP, cP);\n    float b = distance(aP, cP);\n    float c = distance(aP, bP);\n    // twice the area\n    float area2 = abs(cross(vec3(aP-bP, 0), vec3(aP-cP, 0)).z);\n    // find the trilinear coordinates of the center of the inner soddy's circle\n    float alpha = equalDetourPoint(a, b, c, area2);\n    float beta  = equalDetourPoint(b, c, a, area2);\n    float gamma = equalDetourPoint(c, a, b, area2);\n    // then the barycentric coordinates from that, renormalized\n    return (a*alpha*aP + b*beta*bP + c*gamma*cP) / (a*alpha+b*beta+c*gamma);\n}\n\n// distance to an apollonian gasket\nvec3 map( vec2 p ) {\n    \n    // inner circle\n    vec2 aP = floor(p)+0.5;\n    float aR = length(vec2(0.5))-0.5;\n    \n    // outer circles\n    vec2 inA = p-aP;\n\tvec2 diag = vec2(inA.x+inA.y, inA.x-inA.y);\n    vec2 s = step(0.0, diag)*2.0-1.0;\n    vec2 bP = aP + vec2(1, +1)*s.x*0.5;\n    vec2 cP = aP + vec2(1, -1)*s.y*0.5;\n    float bR = 0.5;\n    float cR = 0.5;\n    \n    // picked level\n    float level = 0.0;\n    // distance accumulator, start with the 3 enclosing circles\n    float d  = distance(p, aP) - (aR-0.0001);\n    d = min(d, distance(p, bP) - (bR-0.0001));\n    d = min(d, distance(p, cP) - (cR-0.0001));\n    if ( d < 0.0 ) level = 1.0;\n    \n    #define LEVELS 10\n    for (int i = 0 ; i < LEVELS ; i++) {\n        \n        // add the fourth circle\n        vec2 sod = soddy(aP, aR, bP, bR, cP, cR);\n        float r = distance(sod, aP) - aR;\n        float distToCircle = distance(sod, p) - (r-0.0001);\n        if (distToCircle < 0.0) level = float(i+2);\n        d = min(d, distToCircle);\n        \n        // then continue unto the next level\n        \n        // select which circle is the furthest from p\n        float aD = distance(p, aP)-aR;\n        float bD = distance(p, bP)-bR;\n        float cD = distance(p, cP)-cR;\n        \n        // then update the furthest circle\n        if (aD > bD && aD > cD) {\n            aP = sod;\n            aR = r;\n        } else if (bD > cD) {\n            bP = sod;\n            bR = r;\n        } else {\n            cP = sod;\n            cR = r;\n        }\n    }\n    \n    // color with HSV\n    vec3 color = hsv2rgb( vec3(level*0.1 + iTime*0.1, min(1.0, level*0.1), 0.9) );\n    // black color outside\n    if (level == 0.0) color = vec3(0);\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    fragColor.a = 1.0;\n    fragColor.rgb = vec3(0);\n    \n    // super-sampling AA\n    #define SS 2\n    for (int i = 0 ; i < SS ; i++)\n    for (int j = 0 ; j < SS ; j++) {\n        vec2 offset = (vec2(i, j) + 0.5) / float(SS) - 0.5;\n        vec2 fragCoordSamp = fragCoord.xy + offset;\n        vec2 uv = fragCoordSamp - iResolution.xy * 0.5;\n        uv /= iResolution.y;\n\t\n        float theta = iTime*0.05;\n        vec2 center = vec2(cos(theta), sin(theta))*0.5;\n        uv *= 0.05;\n        uv *= rot(-iTime*0.1);\n        \n        fragColor.rgb += map(center+uv);\n    }\n    \n    fragColor.rgb /= float(SS*SS);\n    \n    // vignette\n    vec2 p = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    fragColor.rgb = mix(fragColor.rgb, vec3(0), dot(p, p)*0.3);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}