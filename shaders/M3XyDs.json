{
    "Shader": {
        "info": {
            "date": "1726774627",
            "description": "extracts more recent changes and ignores static stuff as black",
            "flags": 32,
            "hasliked": 0,
            "id": "M3XyDs",
            "likes": 1,
            "name": "Recent Motion Extraction",
            "published": 3,
            "tags": [
                "motion",
                "extraction"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 66
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, vec2 fragCoord) {\n    fragColor = vec4(unpack3(texture(iChannel0, fragCoord / iResolution.xy).a), 1);\n    fragColor.rgb = lrgb2srgb(oklab2lrgb(fragColor.rgb));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float A = 0.001;\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec3 curr = lrgb2oklab(srgb2lrgb(texture(iChannel0, uv).rgb));\n    vec3 sdif = unpack3(texture(iChannel1, uv).w);\n    vec3 sprv = unpack3(texture(iChannel1, uv).y);\n    vec3 prev = mix(sprv, unpack3(texture(iChannel1, uv).x), A / (A + sdif));\n    vec3 diff = abs(curr - prev);\n    float diff_pack = pack3(diff);\n\n    fragColor = vec4(pack3(curr), pack3(prev), 0, diff_pack);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float pack3(vec3 v) {\n    v = clamp(v, vec3(0), vec3(0.998));\n    return v.x + floor(v.y * 256.0) + floor(v.z * 256.0) * 256.0;\n}\n\nvec3 unpack3(float f) {\n    return vec3(fract(f), fract(floor(f) / 256.0), fract(floor(f / 256.0) / 256.0));\n}\n\nvec3 oklab2lrgb(vec3 oklab) {\n    vec3 lms = oklab * mat3(1,  0.3963377774,  0.2158037573,\n                            1, -0.1055613458, -0.0638541728,\n                            1, -0.0894841775, -1.2914855480);\n    lms *= lms * lms;\n    return lms * mat3( 4.0767416621, -3.3077115913,  0.2309699292, \n                      -1.2684380046,  2.6097574011, -0.3413193965, \n                      -0.0041960863, -0.7034186147,  1.7076147010);\n}\n\nvec3 lrgb2oklab(vec3 lrgb) {\n    vec3 lms = lrgb * mat3(0.4121656120, 0.5362752080, 0.0514575653,\n                           0.2118591070, 0.6807189584, 0.1074065790,\n                           0.0883097947, 0.2818474174, 0.6302613616);\n    return pow(lms, vec3(1.0 / 3.0)) * mat3(0.2104542553,  0.7936177850, -0.0040720468,\n                                            1.9779984951, -2.4285922050,  0.4505937099,\n                                            0.0259040371,  0.7827717662, -0.8086757660);\n}\n\nvec3 lrgb2srgb(vec3 lrgb) { \n\treturn mix(12.92 * lrgb, 1.055 * pow(lrgb, vec3(1.0 / 2.4)) - 0.055, \n\t       step(0.0031308, lrgb)); \n}\nvec3 srgb2lrgb(vec3 srgb) { \n\treturn mix(srgb / 12.92, pow((srgb + 0.055) / 1.055, vec3(2.4)), \n\t       step(0.04045, srgb)); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}