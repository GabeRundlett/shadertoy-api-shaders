{
    "Shader": {
        "info": {
            "date": "1571033113",
            "description": "Inktober, but with shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "wsKGWV",
            "likes": 2,
            "name": "shadetober #13 (ash)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "#define PI2 6.282\n\nfloat map(vec3 p) {\n    float angle = atan(p.z, p.x) / PI2;\n    vec2 lookup = vec2(p.x, p.z) + vec2(angle, -iTime);\n    float rad = \n        (1. + p.y) - cos(p.y) * p.y\n        + texture(iChannel0, (lookup * .2)).r\n        * smoothstep(0., 1., p.y * .75);\n    \n    return length(p) - rad * .7;\n}\n\nvec3 grad(vec3 p) { \n    vec2 ep = vec2(.0001, 0.);\n    return normalize(vec3(\n        map(p + ep.xyy) - map(p - ep.xyy),\n        map(p + ep.yxy) - map(p - ep.yxy),\n        map(p + ep.yyx) - map(p - ep.yyx)\n        ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(.5);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 eye = vec3(0., .4, 9.);\n    vec3 ray = normalize(vec3(uv, -1.5));\n    \n    vec2 spot = uv;\n    spot.y *= 8.;\n    spot.x *= 2.;\n    spot.y += 1.3;\n    float d = length(spot);\n    \n    float rBase = (sin(iTime) + 1.) * .03 + .7;\n    float gBase = (sin(iTime * 1.2) + 1.2) * .06 + .4;\n    vec3 col = vec3(rBase - d, gBase-d, 0.);\n\n    float t = 0.;\n    for (int i = 0; i < 100; i++) {\n        vec3 p = eye + ray * t;\n        float depth = map(p);\n        if (depth < .001) {\n            vec3 lightpos = vec3(0., -1., 0.);\n            vec3 lightcol = vec3(1.);\n            \n            vec3 norm = grad(p);\n            \n            float alignment = dot(lightpos, norm);\n            vec3 addcol = lightcol * alignment;\n            col = clamp(vec3(1. - p.y, .5 - p.y, 0.), 0., 1.) \n                + addcol * .35;\n            col *= col;\n        }\n        t += depth;\n        if (depth > 20.) {\n            break; }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}