{
    "Shader": {
        "info": {
            "date": "1718639951",
            "description": "complex numbers tetrated like z^z^z^z^z...\nsadly floating point precision ruins it...",
            "flags": 0,
            "hasliked": 0,
            "id": "43tXzH",
            "likes": 7,
            "name": "complex tetration",
            "published": 3,
            "tags": [
                "fractal",
                "iterative"
            ],
            "usePreview": 0,
            "username": "CuleGamer",
            "viewed": 116
        },
        "renderpass": [
            {
                "code": "#define ORBIT_TRAPS 1\nconst vec2 offset = vec2(1.678, -0.05425);\n\n#if ORBIT_TRAPS\nfloat dist = 1e10;\nfloat trap(vec2 pos)\n{\n    return sqrt(abs(cos(pos.x * pos.y)));\n}\n#endif\n\nvec2 cpow(vec2 base, vec2 exponent)\n{\n    float absBase = length(base);\n    float argBase = atan(base.y, base.x);\n    float lnAbs = log(absBase);\n    float theta = exponent.x * argBase + exponent.y * lnAbs;\n    return vec2(cos(theta), sin(theta)) * exp(exponent.x * lnAbs - exponent.y * argBase);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int maxI = 1000;\n    float scale = 1. / (exp((iTime*iTime / (iTime + 32.))) - 0.85);\n    vec2 c = offset + scale * (2. * fragCoord - iResolution.xy)/iResolution.y;\n    vec2 z = c;\n    float val;\n    for(int i; i < maxI; i++)\n    {\n        #if ORBIT_TRAPS\n        dist = min(dist, trap(z));\n        #endif\n        z = cpow(c, z);\n    }\n    #if ORBIT_TRAPS\n    fragColor = vec4(dist);\n    #else\n    fragColor = vec4(atan(z.y, z.x), length(z), 0., 0.);\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}