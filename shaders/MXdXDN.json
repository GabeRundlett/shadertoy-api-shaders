{
    "Shader": {
        "info": {
            "date": "1721057392",
            "description": "Intersections with y=0 show the unique prime factors of non-primes.\nEvery integer is either an intersection of a \"prime wave\" with y=0, or a new wave corresponding to that prime. ",
            "flags": 0,
            "hasliked": 0,
            "id": "MXdXDN",
            "likes": 45,
            "name": "Primes as waves",
            "published": 3,
            "tags": [
                "math",
                "primes",
                "numbertheory"
            ],
            "usePreview": 1,
            "username": "nimitz",
            "viewed": 469
        },
        "renderpass": [
            {
                "code": "// \"Primes as waves\" by nimitz 2024\n// https://www.shadertoy.com/view/MXdXDN\n\n/*\n    An alternate definition of this graph:\n        Given a range, how many waves of integer period (half-period) sine waves except period 1 \n        are required to be able to interest y=0 at every integer.\n*/\n\n#define SHOW_DIGITS\n//#define POSITIVE_ONLY\n\nint primes[100] = int[](2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\n                        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541);\n\n\n#define pi 3.14159265358979\nfloat sign2(float x){return x>=0.0?1.0:-1.0;}\n\nfloat dr(float v, float num)\n{\n    #ifdef POSITIVE_ONLY\n    return abs(sign2(num)*-sin(v*pi / num)*pow(abs(num),1.)*0.1*sign2(num));\n    #else\n    return sign2(num)*-sin(v*pi / num)*pow(abs(num),.9)*0.1*sign2(num);\n    #endif\n}\n\nfloat draw(const in vec2 p, const in float num)\n{\n    float v = dr(p.x, num)-p.y;\n    float g = 0.5 + dr(p.x + 0.1, num) - dr(p.x- 0.1, num);\n    float d = abs(v)/sqrt(g);\n    return .001/(d*d + 0.0001);\n}\n\nvec3 wheel( vec3 c )\n{\n    vec3 rgb = vec3(0);\n    c.x *= 3.14159265358979;\n    rgb.r = pow(abs(cos(c.x - 0.1)),4.)*1.5;\n    rgb.g = pow(abs(cos(c.x + 2.0944 + 0.1)),3.);\n    rgb.b = pow(abs(cos(c.x + 1.0472 + 0.35)),4.);\n    \n\treturn clamp(c.z * mix( vec3(1.0), rgb, c.y),0.,1.);\n}\n\n//for codes see: https://www.shadertoy.com/view/ldSBzd\nfloat getChar(vec2 p, int char)\n{\n\tvec2 pos = vec2(char%16, 15 - char / 16);\n\tpos += clamp(p, 0.001, 0.999);\n\treturn textureLod(iChannel0, pos/16., 0.).r;\n}\n#define chr(A) col += getChar(pp, A)*0.4,pp.x-=0.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float px = 1.5/iResolution.y;\n    vec2 p = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    vec2 bp = p;\n    float asp = iResolution.x/iResolution.y;\n    \n    p.x += iTime*0.1 - 1.5;\n    p = p*vec2(36.,12.) + vec2(30., 0);\n\n    vec3 col = vec3(0.05);\n    int num = int(iTime*2.);\n    \n    for(int i = 0; i<100; i++)\n    {\n        float fi = float(i);\n        vec3 col2 = draw(p, float(primes[i]))*step(float(primes[i]), p.x)*wheel( vec3(fi*0.0748, cos(fi*0.65)*0.07+0.9, 0.6));\n        col += col2 * smoothstep(.5,0., pow(float(i),1.01) - iTime*2.5 + .75*p.x/pow(float(i+1),.08));\n    }\n    \n    //Axes\n    col += smoothstep(0.07,.0,abs(fract(p.x + 0.5)-0.5))*0.05;\n    col += smoothstep(0.07,.0,abs(fract(p.y + 0.5)-0.5))*0.05;\n    col *= smoothstep(0.0,0.1, abs(p.x));\n    col += smoothstep(0.03,0.0, abs(p.y))*0.9;\n    \n#ifdef SHOW_DIGITS\n    vec2 pp = bp;\n    pp = (p - vec2(-0.4,-1.6))*1.;\n    chr(48); // 0\n    pp = (p - vec2(-0.5 + 5.2, -1.6))*1.;\n    chr(53);  // 5\n    pp = (p - vec2(-0.5 + 11., -1.6))*1.;\n    chr(49);chr(49);  // 11\n    pp = (p - vec2(-0.5 + 50., -1.6))*1.;\n    chr(53);chr(48);  // 11\n    pp = (p - vec2(-0.7 + 100.01, -4.))*1.;\n    chr(49);chr(48);chr(48); // 100\n    pp = (p - vec2(-0.7 + 200., -5.))*1.;\n    chr(50);chr(48);chr(48); // 200\n#endif\n\n    fragColor = vec4(pow(col,vec3(0.45)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}