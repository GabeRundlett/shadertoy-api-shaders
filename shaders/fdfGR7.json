{
    "Shader": {
        "info": {
            "date": "1615654833",
            "description": "Artifact as an animation effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "fdfGR7",
            "likes": 12,
            "name": "Artifact as an animation effect",
            "published": 3,
            "tags": [
                "effect"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 16\n#define MAX_DIST 16.\n#define SURF_DIST .005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n\nfloat noise(float x) {\n    return fract(sin(dot(vec2(x), vec2(12.9898, 78.233)))* 43758.5453);\n}\n// by Dave_Hoskins\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat octahedrons(vec3 p, float tval) {\n    vec3 prevP = p; \n    float t = iTime*tval;\n    float t2 = iTime*tval*2.0;\n    \n    float d = sdOctahedron(p*matRotateX(radians(-40.0*t))*matRotateZ(radians(20.0*t)),0.3);\n    \n    p = prevP;\n    p*=matRotateZ(radians(20.0*t2))*matRotateY(radians(30.0*t2));\n    \n    p.xy = DF(vec2(p.x,p.y),2.0);\n    p.xy = abs(p.xy);\n    p.xy -= vec2(0.6+sin(t)*0.2);\n    \n    float d2 = sdOctahedron(p*matRotateX(radians(-40.0*t)),0.15);\n    \n    d = min(d,d2);\n    \n    return d;\n}\n\nvec4 GetDist(vec3 p) {\n    vec3 prevP = p;\n    vec3 tempP = p;\n    p.x = abs(p.x);\n    \n    float lineThickness = 0.01;\n    vec3 pos0 = vec3(1.5,1.0,0.0);\n    vec3 pos1 = vec3(1.5,-0.5,0.0);\n    vec3 pos2 = vec3(1.5,-2.0,0.0);\n    float d = octahedrons(p-pos0,1.5);\n    d = min(d, max(length(p.yz-pos0.yz)-lineThickness,p.x-pos0.x));\n    \n    tempP = p;\n    p*=matRotateZ(radians(-55.0));\n    p.y+=1.65;\n    d = min(d, max(length(p.yz-pos0.yz)-lineThickness,p.x-pos0.x));\n    p = tempP;\n        \n    tempP = p;\n    p*=matRotateZ(radians(30.0));\n    p.y-=0.7;\n    p.x+=0.7;\n    d = min(d, max(length(p.yz-pos0.yz)-lineThickness,p.x-pos0.x));\n    p = tempP;\n    \n    d = min(d,octahedrons(p-pos1,1.6));\n    \n    tempP = p;\n    p*=matRotateZ(radians(25.0));\n    p.y+=0.6;\n    p.x-=0.5;\n    d = min(d, max(length(p.yz-pos1.yz)-lineThickness,p.x-pos1.x));\n    p = tempP;    \n    \n    tempP = p;\n    p*=matRotateZ(radians(-25.0));\n    p.y+=0.7;\n    p.x+=0.4;\n    d = min(d, max(length(p.yz-pos1.yz)-lineThickness,p.x-pos1.x));\n    p = tempP;  \n    \n    d = min(d, max(length(p.yz-pos1.yz)-lineThickness,p.x-pos1.x));\n    \n    tempP = p;\n    p.y+=0.5;\n    p.y=abs(p.y);\n    d = min(d, max(length(p.xz-pos1.xz)-lineThickness,p.y-pos1.y-2.0));\n    p = tempP;\n    \n    d = min(d,octahedrons(p-pos2,1.3));\n    \n    d = min(d, max(length(p.yz-pos2.yz)-lineThickness,p.x-pos2.x));\n    \n    tempP = p;\n    p*=matRotateZ(radians(-25.0));\n    p.y+=0.5;\n    p.x+=1.1;\n    d = min(d, max(length(p.yz-pos2.yz)-lineThickness,p.x-pos2.x));\n    p = tempP; \n    \n    p = prevP;\n    \n    p.y+=0.4;\n    p.y = abs(p.y);\n    p.y-=2.3;\n    float d2 = min(d,octahedrons(p,1.7));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.y+=0.5;\n    p.y = abs(p.y);\n    p.y-=2.0;\n    d2 = octahedrons(p-vec3(0.0,-1.25,0.0),2.0);\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=matRotateX(radians(30.0*iTime));\n    p.xz = DF(vec2(p.x,p.z),6.0);\n    p.xz = abs(p.xz);\n    p.xz -= vec2(2.7+sin(iTime)*0.6);\n    \n    d2 = sdOctahedron(p,0.2);\n    d = min(d,d2);\n    \n    d*= (1.-hash12(gl_FragCoord.xy+iTime)*.2); // by https://www.shadertoy.com/view/tlGfzd\n    \n    vec3 col = 0.5 + 0.5*cos(iTime+p.xyz+vec3(0,1,2));\n    vec4 res = vec4(col,d);\n        \n    vec4 model = res;\n    return model;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dO= vec4(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.w;\n        vec4 dS = GetDist(p);\n        dO.w += dS.w;\n        dO.xyz = dS.xyz;\n        if(dO.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 Bg(vec3 rd) {\n    float k = rd.y*0.5+0.5;\n    vec3 col = 0.5 + 0.5*cos(iTime+rd.xyz+vec3(0,1,2));\n    vec3 col2 = mix(vec3(.2,.3,.8),col,k);\n    return col2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 5, -6.0);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-20.0));\n    ro.xz *= Rot(iTime*1.2);\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,-0.3,0), 1.);\n\n    vec4 d = RayMarch(ro, rd);\n    \n    if(d.w<MAX_DIST) {\n        vec3 p = ro + rd * d.w;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd,n);\n        float spec = pow(max(0.0,r.y),30.);\n        float dif = dot(n,normalize(vec3(1,2,3)))*0.5+0.5;\n        col = mix(Bg(r),vec3(dif),0.5)+spec;\n    } else {\n        // background\n        col += Bg(rd);\n    }\n    \n    fragColor = vec4(col,1.0)+(noise(uv.x*uv.y*iTime*0.1))*0.1;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}