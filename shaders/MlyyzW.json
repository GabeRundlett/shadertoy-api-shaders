{
    "Shader": {
        "info": {
            "date": "1535275805",
            "description": "A simple path tracer is used to render the watch from my image based lighting shader \"Old watch (IBL)\". [url=https://www.shadertoy.com/view/lscBW4]Click here to compare[/url].\n\n! Use your mouse to change the camera viewpoint.",
            "flags": 32,
            "hasliked": 0,
            "id": "MlyyzW",
            "likes": 49,
            "name": "Old watch (RT)",
            "published": 3,
            "tags": [
                "ray",
                "tracer",
                "path",
                "pbr"
            ],
            "usePreview": 0,
            "username": "reinder",
            "viewed": 6108
        },
        "renderpass": [
            {
                "code": "// Old watch (RT). Created by Reinder Nijhoff 2018\n// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/MlyyzW\n//\n// A simple path tracer is used to render an old watch. The old watch scene is\n// (almost) the same scene as rendered using image based lighting in my shader \"Old\n// watch (IBL)\":\n// \n// https://www.shadertoy.com/view/lscBW4\n//\n// You can find the path tracer in Buffer B. I'm no expert in ray or path tracing so\n// there are probably a lot of errors in this code.\n//\n// Use your mouse to change the camera viewpoint.\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec3 col = data.rgb / data.w;\n    \n    // gamma correction\n    col = max( vec3(0), col - 0.004);\n    col = (col*(6.2*col + .5)) / (col*(6.2*col+1.7) + 0.06);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Old watch (RT). Created by Reinder Nijhoff 2018\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/MlyyzW\n//\n// I have moved all ray-march code to this tab, in order to keep the RT-code in Buffer B \n// more readable. The physically-based properties of the materials are also defined here.\n//\n// The hash functions are copy-paste from \"Quality hashes collection WebGL2\" by Nimitz:\n// https://www.shadertoy.com/view/Xt3cDn\n//\n// All (signed) distance field (SDF) code is copy-paste from the excellent framework by \n// Inigo Quilez:\n//\n// https://www.shadertoy.com/view/Xds3zN\n//\n// More info here: https://iquilezles.org/articles/distfunctions\n//\n\n#define MAT_TABLE    1.\n#define MAT_PENCIL_0 2.\n#define MAT_PENCIL_1 3.\n#define MAT_PENCIL_2 4.\n#define MAT_DIAL     5.\n#define MAT_HAND     6.\n#define MAT_METAL_0  7.\n#define MAT_METAL_1  8.\n\n#define CLOCK_ROT_X -0.26\n#define CLOCK_ROT_Y 0.2\n#define CLOCK_OFFSET_Y 0.42\n#define PENCIL_POS vec3(-0.31,-0.2, -.725)\n\nfloat TIME = 11344.;\n#define MAX_T 10.\n\n//\n// Hash functions by Nimitz:\n// https://www.shadertoy.com/view/Xt3cDn\n//\n\nuint baseHash(uvec2 p) {\n    p = 1103515245U*((p >> 1U)^(p.yx));\n    uint h32 = 1103515245U*((p.x)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n\nfloat hash1(inout float seed) {\n    uint n = baseHash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));\n    return float(n)/float(0xffffffffU);\n}\n\nvec2 hash2(inout float seed) {\n    uint n = baseHash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));\n    uvec2 rz = uvec2(n, n*48271U);\n    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash3(inout float seed) {\n    uint n = baseHash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));\n    uvec3 rz = uvec3(n, n*16807U, n*48271U);\n    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\n//\n// SDF functions (by Inigo Quilez).\n//\n\nfloat sdPlane( const vec3 p ) {\n\treturn p.y;\n}\n\nfloat sdTorus( const vec3 p, const vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdTorusYZ( const vec3 p, const vec2 t ) {\n  vec2 q = vec2(length(p.yz)-t.x,p.x);\n  return length(q)-t.y;\n}\n\nfloat sdTorusYX( const vec3 p, const vec2 t ) {\n  vec2 q = vec2(length(p.yx)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat sdCylinder( const vec3 p, const vec2 h ) {\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCylinderZY( const vec3 p, const vec2 h ) {\n  vec2 d = abs(vec2(length(p.zy),p.x)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCylinderXY( const vec3 p, const vec2 h ) {\n  vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdHexPrism( const vec3 p, const vec2 h ) {\n    vec3 q = abs(p);\n#if 0\n    return max(q.x-h.y,max((q.z*0.866025+q.y*0.5),q.y)-h.x);\n#else\n    float d1 = q.x-h.y;\n    float d2 = max((q.z*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdEllipsoid( const vec3 p, const vec3 r ) {\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat sdCapsule( const vec3 p, const vec3 a, const vec3 b, const float r ) {\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdSphere( const vec3 p, const float r ) {\n    return length(p) - r;\n}\n\nfloat sdCone( const vec3 p, const vec2 c ) {\n    float q = length(p.yz);\n    return dot(c,vec2(q,p.x));\n}\n\nfloat sdSegment2D( const vec2 p, const vec2 a, const vec2 b, const float w ) {\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - w;\n}\n\nfloat opS( const float d1, const float d2 ) {\n    return max(-d1,d2);\n}\n\nfloat opU( const float d1, const float d2 ) {\n    return min(d1,d2);\n}\n\nvec3 rotateX( in vec3 p, const float t ) {\n    float co = cos(t);\n    float si = sin(t);\n    p.yz = mat2(co,-si,si,co)*p.yz;\n    return p;\n}\n\nvec3 rotateY( in vec3 p, const float t ) {\n    float co = cos(t);\n    float si = sin(t);\n    p.xz = mat2(co,-si,si,co)*p.xz;\n    return p;\n}\n\nvec3 rotateZ( in vec3 p, const float t ) {\n    float co = cos(t);\n    float si = sin(t);\n    p.xy = mat2(co,-si,si,co)*p.xy;\n    return p;\n}\n\nvec2 rotate( in vec2 p, const float t ) {\n    float co = cos(t);\n    float si = sin(t);\n    p = mat2(co,-si,si,co) * p;\n    return p;\n}\n\n//\n// SDF of the scene.\n//\n\nfloat mapHand( const vec3 pos, const float w, const float l, const float r ) {\n    float d = sdSegment2D(pos.xz, vec2(0,-w*10.), vec2(0,l), w);\n    d = min(d, length(pos.xz) - (.03+r));\n    return max(d, abs(pos.y)-.005);\n}\n\nvec2 map( in vec3 pos, in vec3 p1, in vec3 ps, in vec3 pm, in vec3 ph, \n         const bool watchIntersect, const bool pencilIntersect ) {\n    //--- table\n    vec2 res = vec2(sdPlane(pos), MAT_TABLE);\n    \n    // chain\n    if (pos.z > 1.1) {\n        float h = smoothstep(3., -.4, pos.z)*.74 + .045;\n        float dChain0 = length(pos.xy+vec2(.3*sin(pos.z), -h))-.1;\n        if (dChain0 < 0.1) {\n            dChain0 = 10.;\n            float pth1z = floor(pos.z*5.);\n            if (pth1z > 5.) {\n            \tfloat pth21 = floor(pos.z*5.);\n\t            float pth1 = hash1(pth21);\n    \t        vec3 pt1 = vec3(pos.x + .3*sin(pos.z)- pth1 *.02 + 0.02, pos.y-h - pth1 *.03, mod(pos.z, .2) - .1);\n        \t    pt1 = rotateZ(pt1, .6 * smoothstep(2.,3., pos.z));\n            \tdChain0 = sdTorus(pt1, vec2(.071, .02)); \n            }\n            \n            float pth2z = floor(pos.z*5. + .5);\n            float pth2 = hash1(pth2z); \n            vec3 pt2 = vec3(pos.x + .3*sin(pos.z)- pth2 *.02 + 0.02, pos.y-h - pth2 *.03, mod(pos.z + .1, .2) - .1);\n            pt2 = rotateZ(pt2, 1.1 * smoothstep(2.,3., pos.z));\n            dChain0 = opU(dChain0, sdTorusYZ(pt2, vec2(.071, .02)));          \n        }\n        if (dChain0 < res.x) res = vec2(dChain0, MAT_METAL_1);\n    }\n    //--- pencil\n    if (pencilIntersect) {\n        float dPencil0 = sdHexPrism(pos + PENCIL_POS, vec2(.2, 2.));\n        dPencil0 = opS(-sdCone(pos + (PENCIL_POS + vec3(-2.05,0,0)), vec2(.95,0.3122)),dPencil0);\n        dPencil0 = opS(sdSphere(pos + (PENCIL_POS + vec3(-2.4,-2.82,-1.03)), 3.), dPencil0);\n        dPencil0 = opS(sdSphere(pos + (PENCIL_POS + vec3(-2.5,-0.82,2.86)), 3.), dPencil0);\n        if (dPencil0 < res.x) res = vec2(dPencil0, MAT_PENCIL_0);\n\n        float dPencil1 = sdCapsule(pos, -PENCIL_POS - vec3(2.2,0.,0.), -PENCIL_POS-vec3(2.55, 0., 0.), .21);\n        if (dPencil1 < res.x) res = vec2(dPencil1, MAT_PENCIL_1);\n        float ax = abs(-2.25 - pos.x - PENCIL_POS.x);\n        float r = .02*abs(2.*fract(30.*pos.x)-1.)*smoothstep(.08,.09,ax)*smoothstep(.21,.2,ax);\n\n        float dPencil2 = sdCylinderZY(pos + PENCIL_POS + vec3(2.25,-0.0125,0), vec2(.22 - r,.25));\n        if (dPencil2 < res.x) res = vec2(dPencil2, MAT_PENCIL_2);\n    }\n    \n    //--- watch\n    if (watchIntersect) {\n        float dDial = sdCylinder(p1, vec2(1.05,.13));\n        if (dDial < res.x) res = vec2(dDial, MAT_DIAL);\n\n        float dC = sdTorusYX(vec3(max(abs(p1.x)-.5*p1.y-0.19,0.),p1.y+0.12,p1.z-1.18), vec2(0.11,0.02));\n        if (dC < res.x) res = vec2(dC, MAT_METAL_1);\n        \n        float dM = sdTorus(p1 + vec3(0,-.165,0), vec2(1.005,.026));   \n        float bb = sdCylinderXY(p1+vec3(0,0,-1.3), vec2(0.15,0.04));\n        if(bb < 0.5) {\n            float a = atan(p1.y, p1.x);\n            float c = abs(fract(a*3.1415)-.5);\n            float d = min(abs(p1.z-1.3), .02);\n            bb = sdCylinderXY(p1+vec3(0,0,-1.3), vec2(0.15 - 40.*d*d - .1*c*c,0.04));\n        } \n        dM = opU(dM, bb);\n         \n        dM = opU(dM, sdCylinderZY(p1+vec3(0,0,-1.18), vec2(0.06,0.2)));\n        float rr = min(abs(p1.z-1.26), .2);\n        dM = opU(dM, sdCylinderXY(p1+vec3(0,0,-1.2), vec2(0.025 + 0.35*rr,0.1)));\n       \n        p1.y = abs(p1.y);\n        dM = opU(dM, sdTorus(p1 + vec3(0,-.1,0), vec2(1.025,.075)));\n        dM = opU(dM, sdCylinder(p1, vec2(1.1,.1)));\n        dM = opS(sdTorus(p1 + vec3(0,-.1,0), vec2(1.11,.015)), dM);\n        dM = opU(dM, sdCylinder(p1, vec2(0.01,0.175)));\n        dM = opU(dM, sdCylinder(p1+vec3(0,0,.6), vec2(0.01,0.155)));\n        if (dM < res.x) res = vec2(dM, MAT_METAL_0);\n\n        // minutes hand\n        float dMin = mapHand(pm + vec3(0,-.16,0), .02, 0.7, 0.015);\n        if (dMin < res.x) res = vec2(dMin, MAT_HAND);\n        // hours hand\n        float dHour = mapHand(ph + vec3(0,-.15,0), .02, 0.4, 0.03);\n        if (dHour < res.x) res = vec2(dHour, MAT_HAND);\n        // seconds hand\n        float dSeconds = mapHand(ps + vec3(0,-.14,0), .01, 0.17, 0.006);\n        if (dSeconds < res.x) res = vec2(dSeconds, MAT_HAND);\n    }\n    \n    return res;\n}\n\nvec2 map( in vec3 pos ) {\n    vec3 p1 = rotateX( pos + vec3(0,-CLOCK_OFFSET_Y,0), CLOCK_ROT_X );\n    p1 = rotateY( p1, CLOCK_ROT_Y );\n    \n\tfloat secs = mod( floor(TIME),        60.0 );\n\tfloat mins = mod( floor(TIME/60.0),   60.0 );\n\tfloat hors = mod( floor(TIME/3600.0), 24.0 ) + mins/60.;\n    \n    vec3 ps = rotateY( p1+vec3(0,0,.6), 6.2831*secs/60.0 );\n    vec3 pm = rotateY( p1, 6.2831*mins/60.0 );\n    vec3 ph = rotateY( p1, 6.2831*hors/12.0 );\n    \n    return map( pos, p1, ps, pm, ph, true, true );\n}\n\nfloat mapGlass( in vec3 pos ) {\n    return sdEllipsoid( pos - vec3(0,.10,0), vec3(1.,.2,1.) );\n}\n\n//\n// Ray march code.\n//\n\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in float r ) {\n\tvec3 oc = ro;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - r * r;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n    h = sqrt( h );\n\treturn vec2(-b - h, -b + h);\n}\n\nbool boxIntserct( in vec3 ro, in vec3 rd, in vec3 rad ) {\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return false;\n\n\treturn true;\n}\n\nvec3 calcNormal( in vec3 pos ) {\n    const vec2 e = vec2(1.0,-1.0)*0.0075;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd ) {\n    float tmin = 0.001;\n    float tmax = MAX_T;\n    \n    // bounding volume\n    const float top = 0.95;\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (top-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>top ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n    \n    float t = tmin;\n    float mat = -1.;\n    \n    vec3 p1 = rotateX( ro + vec3(0,-CLOCK_OFFSET_Y,0), CLOCK_ROT_X );\n    p1 = rotateY( p1, CLOCK_ROT_Y );\n    vec3 rd1 = rotateX( rd, CLOCK_ROT_X );\n    rd1 = rotateY( rd1, CLOCK_ROT_Y );\n    \n\tfloat secs = mod( floor(TIME),        60.0 );\n\tfloat mins = mod( floor(TIME/60.0),   60.0 );\n\tfloat hors = mod( floor(TIME/3600.0), 24.0 ) + mins/60.;\n    \n    vec3 ps = rotateY( p1+vec3(0,0,.6), 6.2831*secs/60.0 );\n    vec3 rds = rotateY( rd1, 6.2831*secs/60.0 );\n    \n    vec3 pm = rotateY( p1, 6.2831*mins/60.0 );\n    vec3 rdm = rotateY( rd1, 6.2831*mins/60.0 );\n    \n    vec3 ph = rotateY( p1, 6.2831*hors/12.0 );\n    vec3 rdh = rotateY( rd1, 6.2831*hors/12.0 );\n    \n    bool watchIntersect = boxIntserct(p1, rd1, vec3(1.1,.2,1.4));\n    bool pencilIntersect = boxIntserct(ro + PENCIL_POS, rd, vec3(3.,.23,.23));\n    \n    for( int i=0; i<64; i++ ) {\n\t    float precis = 0.00001;\n\t    vec2 res = map( ro+rd*t, p1+rd1*t, ps+rds*t, pm+rdm*t, ph+rdh*t, \n                       watchIntersect, pencilIntersect );\n        if( abs(res.x)<precis || t>tmax ) break; //return vec2(t, mat);\n        t += res.x;\n        mat = res.y;\n    }\n\n    if( t>tmax ) t=-1.0;\n    return vec2(t, mat);\n}\n\nvec3 calcNormalGlass( in vec3 pos ) {\n    const vec2 e = vec2(1.0,-1.0)*0.005;\n    return normalize( e.xyy*mapGlass( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*mapGlass( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*mapGlass( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*mapGlass( pos + e.xxx ) );\n}\n\nfloat castRayGlass( in vec3 ro, in vec3 rd ) {\n    vec3 p1 = rotateX( ro + vec3(0,-CLOCK_OFFSET_Y,0), CLOCK_ROT_X );\n    p1 = rotateY( p1, CLOCK_ROT_Y );\n    vec3 rd1 = rotateX( rd, CLOCK_ROT_X );\n    rd1 = rotateY( rd1, CLOCK_ROT_Y );\n\n    float t = -1.;\n    vec2 bb = sphIntersect( p1- vec3(0,.10,0), rd1, 1.);\n    if (bb.y > 0.) {\n        t = max(bb.x, 0.);\n        float tmax = bb.y;\n        for( int i=0; i<32; i++ ) {\n            float precis = 0.0001;\n            float res = mapGlass( p1+rd1*t );\n            if( abs(res)<precis || t>tmax ) break; \n            t += res;\n        }\n\n        if( t>tmax ) t=-1.0;\n    }\n    return t;\n}\n\n\n//\n// Material properties.\n//\n\nvec4 texNoise( sampler2D sam, in vec3 p, in vec3 n ) {\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nvoid getMaterialProperties(\n    in vec3 pos, in float mat,\n    inout vec3 normal, inout vec3 albedo, inout float roughness, inout float metallic,\n\tsampler2D tex1, sampler2D tex2, sampler2D tex3) {\n    \n    vec3 pinv = rotateX( pos + vec3(0,-CLOCK_OFFSET_Y,0), CLOCK_ROT_X );\n    pinv = rotateY( pinv, CLOCK_ROT_Y );\n    \n    normal = calcNormal( pos );\n    metallic = 0.;\n    \n    vec4 noise = texNoise(tex1, pinv * .5, normal);\n    float metalnoise = 1.- noise.r;\n    metalnoise*=metalnoise;\n\n    mat -= .5;\n    if (mat < MAT_TABLE) {\n        albedo = .7 * pow(texture(tex1, rotate(pos.xz * .4 + .25, -.3)).rgb, 2.2*vec3(0.45,0.5,0.5));\n        roughness = 0.9 - albedo.r * .6;\n        normal = vec3(0,1,0);\n    }\n    else if( mat < MAT_PENCIL_0 ) {\n        vec2 npos = pos.yz + PENCIL_POS.yz;\n        if (length(npos) < 0.055) {\n        \talbedo = vec3(0.02);\n        \troughness = .9;\n        } else if(sdHexPrism(pos + PENCIL_POS, vec2(.195, 3.)) < 0.) {\n        \talbedo = .8* texture(tex1, pos.xz).rgb;\n        \troughness = 0.99;\n        } else {\n        \talbedo = .5*pow(vec3(1.,.8,.15), vec3(2.2));\n        \troughness = .85 - noise.b * .4;\n        }\n        albedo *= noise.g * .75 + .7;\n    }\n    else if( mat < MAT_PENCIL_1 ) {\n       \talbedo = .4*pow(vec3(.85,.75,.55), vec3(2.2));\n       \troughness = 1.;\n    }\n    else if( mat < MAT_PENCIL_2 ) {\n        float ax = abs(-2.25 - pos.x - PENCIL_POS.x);\n        float r = 1. - abs(2.*fract(30.*pos.x)-1.)*smoothstep(.08,.09,ax)*smoothstep(.21,.2,ax);\n\n        r -= 4. * metalnoise;  \n\t    albedo = mix(.5*vec3(0.5, 0.3, 0.2),vec3(0.560, 0.570, 0.580), (.5 + .5 * r) * (.5 + .5 * r)); // Iron\n   \t\troughness = .8-.5*r;\n   \t\tmetallic = 1.; \n    }\n    else if( mat < MAT_DIAL ) {\n        float dial = texture(tex2, vec2(-.5 * pinv.x + .5, +.5 * pinv.z + .5)).r;\n        albedo = vec3(dial);\n        roughness = dial + .95;\n    }\n    else if( mat < MAT_HAND ) {\n        albedo = vec3(0.02);\n        roughness = .8;\n    }\n    else if( mat < MAT_METAL_0 ) {\n\t    albedo = vec3(1.000, 0.766, 0.336); // Gold\n   \t\troughness = .5;\n   \t\tmetallic = 1.; \n    } \n    else if( mat < MAT_METAL_1 ) {\n\t    albedo = vec3(0.972, 0.960, 0.915); // Silver\n   \t\troughness = .5 + max(.15 * length(pos.xz)-.3, 0.); // prevent aliasing\n   \t\tmetallic = 1.; \n    }\n    \n    if (metallic > .5) {   \n        roughness += metalnoise*4.;\n        albedo *= max(.2, 1.-roughness * .6);\n    }\n    \n    roughness = clamp(roughness, 0.01, 1.);\n    albedo = clamp(albedo, vec3(0.01), vec3(1.));\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta ) {\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 1.0,0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Old watch (RT). Created by Reinder Nijhoff 2018\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/MlyyzW\n//\n// In this buffer the albedo of the dial (red channel) and the roughness\n// of the glass (green channel) is pre-calculated.\n//\n\nbool resolutionChanged() {\n    return floor(texelFetch(iChannel0, ivec2(0), 0).r) != floor(iResolution.x);\n}\n\nfloat printChar(vec2 uv, uint char) {\n    float d = textureLod(iChannel1, (uv + vec2( char & 0xFU, 0xFU - (char >> 4))) / 16.,0.).a;\n\treturn smoothstep(1.,0., smoothstep(.5,.51,d));\n}\n\nfloat dialSub( in vec2 uv, float wr ) {\n    float r = length( uv );\n    float a = atan( uv.y, uv.x )+3.1415926;\n\n    float f = abs(2.0*fract(0.5+a*60.0/6.2831)-1.0);\n    float g = 1.0-smoothstep( 0.0, 0.1, abs(2.0*fract(0.5+a*12.0/6.2831)-1.0) );\n    float w = fwidth(f);\n    f = 1.0 - smoothstep( 0.2*g+0.05-w, 0.2*g+0.05+w, f );\n    float s = abs(fwidth(r));\n    f *= smoothstep( 0.9 - wr -s, 0.9 - wr, r ) - smoothstep( 0.9, 0.9+s, r );\n    float hwr = wr * .5;\n    f -= 1.-smoothstep(hwr+s,hwr,abs(r-0.9+hwr)) - smoothstep(hwr-s,hwr,abs(r-0.9+hwr));\n\n    return .1 + .8 * clamp(1.-f,0.,1.);\n}\n\nfloat dial(vec2 uv) {\n    float d = dialSub(uv, 0.05);\n\n    vec2 uvs = uv;\n    \n    uvs.y += 0.6;\n    uvs *= 1./(0.85-0.6);\n\n    d = min(d, dialSub(uvs, 0.1));\n    \n    vec2 center = vec2(0.5);\n    vec2 radius = vec2(3.65, 0.);\n    \n    for (int i=0; i<9; i++) {\n        if(i!=5) {\n\t        float a = 6.28318530718 * float(i+4)/12.;\n    \t    vec2 uvt = clamp(uv * 5. + center + rotate(radius, a), vec2(0), vec2(1));\n        \td = mix(d, 0.3, printChar(uvt, uint(49+i)));\n        }\n    }\n    for (int i=0; i<3; i++) {\n\t    float a = 6.28318530718 * float(i+13)/12.;\n    \tvec2 uvt1 = clamp(uv * 5. + center + rotate(radius, a) + vec2(.25,0.), vec2(0), vec2(1));\n        d = mix(d, 0.3, printChar(uvt1, uint(49)));\n    \tvec2 uvt = clamp(uv * 5. + center + rotate(radius, a)+ vec2(-.15,0.), vec2(0), vec2(1));\n        d = mix(d, 0.3, printChar(uvt, uint(48+i)));\n    }\n    \n    d *= .9 + .25*texture(iChannel2, uv*.5+.5).r;\n    \n    return pow(clamp(d, 0., 1.), 2.2);\n}\n\nfloat roughnessGlass(vec2 uv) {\n    uv = uv * .5 + .5;\n    return smoothstep(0.2, 0.8, texture(iChannel2, uv * .3).r) * .4 + .2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {   \n    if(resolutionChanged() && iChannelResolution[1].x > 0.  && iChannelResolution[2].x > 0.) {\n        if (fragCoord.x < 1.5 && fragCoord.y < 1.5) {\n            fragColor = vec4(floor(iResolution.xyx), mod(iDate.w, 12.*60.*60.));\n        } else {\n            vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.xy;\n\n            fragColor = vec4( dial(uv), roughnessGlass(uv), 0., 1.0 );      \n        }\n    } else {\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Old watch (RT). Created by Reinder Nijhoff 2018\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/MlyyzW\n//\n// A simple path tracer is used to render an old watch. The old watch scene is\n// (almost) the same scene as rendered using image based lighting in my shader \"Old\n// watch (IBL)\":\n// \n// https://www.shadertoy.com/view/lscBW4\n//\n// I'm no expert in ray- or path-tracing so there are probably a lot of errors in this code.\n//\n\n#define PATH_LENGTH 5\n\nvec3 getBGColor( vec3 N ) {\n    if (N.y <= 0.) {\n        return vec3(0.); \n    } else {\n\t    return (.25 + pow(textureLod(iChannel0, N, 0.).rgb, vec3(6.5)) * 8.5) * (N.y) * .3;\n    }\n}\n\nfloat FresnelSchlickRoughness(float cosTheta, float F0, float roughness) {\n    return F0 + (max((1. - roughness), F0) - F0) * pow(abs(1. - cosTheta), 5.0);\n}\n\nvec3 cosWeightedRandomHemisphereDirection( const vec3 n, inout float seed ) {\n  \tvec2 r = hash2(seed);\n    \n\tvec3  uu = normalize(cross(n, abs(n.y) > .5 ? vec3(1.,0.,0.) : vec3(0.,1.,0.)));\n\tvec3  vv = cross(uu, n);\n\t\n\tfloat ra = sqrt(r.y);\n\tfloat rx = ra*cos(6.2831*r.x); \n\tfloat ry = ra*sin(6.2831*r.x);\n\tfloat rz = sqrt( abs(1.0-r.y) );\n\tvec3  rr = vec3( rx*uu + ry*vv + rz*n );\n    \n    return normalize(rr);\n}\n\nvec3 modifyDirectionWithRoughness( const vec3 n, const float roughness, inout float seed ) {\n  \tvec2 r = hash2(seed);\n    \n\tvec3  uu = normalize(cross(n, abs(n.y) > .5 ? vec3(1.,0.,0.) : vec3(0.,1.,0.)));\n\tvec3  vv = cross(uu, n);\n\t\n    float a = roughness*roughness;\n    a *= a; a *= a; // I want to have a really shiny watch.\n\tfloat rz = sqrt(abs((1.0-r.y) / clamp(1.+(a - 1.)*r.y,.00001,1.)));\n\tfloat ra = sqrt(abs(1.-rz*rz));\n\tfloat rx = ra*cos(6.2831*r.x); \n\tfloat ry = ra*sin(6.2831*r.x);\n\tvec3  rr = vec3( rx*uu + ry*vv + rz*n );\n    \n    return normalize(rr);\n}\n\nvec2 randomInUnitDisk(inout float seed) {\n    vec2 h = hash2(seed) * vec2(1.,6.28318530718);\n    float phi = h.y;\n    float r = sqrt(h.x);\n\treturn r*vec2(sin(phi),cos(phi));\n}\n\n//\n// main \n//\n\nvec3 render( in vec3 ro, in vec3 rd, inout float seed ) {\n    vec3 col = vec3(1.); \n    vec3 firstPos = vec3(100.);\n    bool firstHit = false;\n    \n    for (int i=0; i<PATH_LENGTH; ++i) {    \n    \tvec2 res = castRay( ro, rd );\n\t\tfloat gd = castRayGlass( ro, rd );\n        \n\t\tvec3 gpos = ro + rd * gd;\n\t\tvec3 gN = calcNormalGlass(gpos);\n        \n        if (gd > 0. && (res.x < 0. || gd < res.x) && dot(gN, rd) < 0.) {\n            // Glass material. \n            // Not correct: I only handle rays that enter the glass and the glass\n            // is modelled as one solid piece, instead as a thin layer. By using a\n            // non-physically plausible refraction index of 1.25, it still looks\n            // good (I think).\n            float F = FresnelSchlickRoughness(max(0., dot(-gN, rd)), (0.08), 0.);\n            if (F < hash1(seed)) {\n                rd = refract(rd, gN, 1./1.25);\n            } else {\n                rd = reflect(rd, gN);\n            }\n            ro = gpos;\n        }\n        else if (res.x > 0.) {\n\t\t\tvec3 pos = ro + rd * res.x;\n\t\t\tvec3 N, albedo;\n            float roughness, metallic;\n\n\t\t\tgetMaterialProperties(pos, res.y, N, albedo, roughness, metallic, iChannel1, iChannel2, iChannel3);\n\n            float F = FresnelSchlickRoughness(max(0., -dot(N, rd)), 0.04, roughness);\n            \n            ro = pos;\n            if (F > hash1(seed) - metallic) { // Reflections and metals.\n                if (metallic > .5) {\n                    col *= albedo; \n                }\n\t\t\t\trd = modifyDirectionWithRoughness(reflect(rd,N), roughness, seed);            \n                if (dot(rd, N) <= 0.) {\n                    rd = cosWeightedRandomHemisphereDirection(N, seed);\n                }\n            } else { // Diffuse\n\t\t\t\tcol *= albedo;\n\t\t\t\trd = cosWeightedRandomHemisphereDirection(N, seed);\n            }\n        } else {\n            col *= getBGColor(rd);\n\t\t\tcol *= max(0.0, min(1.1, 10./dot(firstPos,firstPos)) - .15);\n\t\t\treturn col;\n        }            \n        if (!firstHit) {\n            firstHit = true;\n            firstPos = ro;\n        }\n    }  \n    return vec3(0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    bool reset = iFrame == 0;\n    ivec2 f = ivec2(fragCoord);\n    vec4 data1 = texelFetch(iChannel3, ivec2(0), 0);\n    vec4 data2 = texelFetch(iChannel2, ivec2(0), 0);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mo = abs(iMouse.xy)/iResolution.xy - .5;\n    if (iMouse.xy == vec2(0)) mo = vec2(.05,.1);\n    \n    if (floor(mo*iResolution.xy*10.) != data1.yz) {\n        reset = true;\n    }\n    if (data2.xy != iResolution.xy) {\n        reset = true;\n    }\n    \n    TIME = data2.w;\n    \n    float a = 5.05;\n    vec3 ro = vec3( .25+ 2.*cos(6.0*mo.x+a), 2. + 2. * mo.y, 2.0*sin(6.0*mo.x+a) );\n    vec3 ta = vec3( .25, .5, 0.0 );\n    mat3 ca = setCamera( ro, ta );\n\n    float fpd = data1.x;\n    if(all(equal(f, ivec2(0)))) {\n        // Calculate focus plane and store distance.\n        float nfpd = castRay(ro, normalize(vec3(0.,.2,0.)-ro)).x;\n\t\tfragColor = vec4(nfpd, floor(mo*iResolution.xy*10.), iResolution.x);\n        return;\n    }\n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord - 1.)/iResolution.y;\n    float seed = float(baseHash(floatBitsToUint(p)))/float(0xffffffffU) + iTime;\n\n    // AA\n\tp += 2.*hash2(seed)/iResolution.y;\n    vec3 rd = ca * normalize( vec3(p.xy,1.6) );  \n    \n    // DOF\n    vec3 fp = ro + rd * fpd;\n    ro = ro + ca * vec3(randomInUnitDisk(seed), 0.)*.02;\n    rd = normalize(fp - ro);\n    \n    vec3 col = render(ro, rd, seed);           \n  \n    if (reset) {\n       fragColor = vec4(col, 1.0);\n    } else {\n       fragColor = vec4(col, 1.0) + texelFetch(iChannel3, ivec2(fragCoord), 0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}