{
    "Shader": {
        "info": {
            "date": "1433584725",
            "description": "I finished this a good while ago, and figured that I ought to make it public. Thanks for visiting!\n(Just a learning experiment :) )\nI borrowed a good chunk of code from Joates and iq.",
            "flags": 0,
            "hasliked": 0,
            "id": "4d2XD3",
            "likes": 8,
            "name": "My First SDF Marcher! :)",
            "published": 3,
            "tags": [
                "raymarcherraymarcherdistancefieldfunction"
            ],
            "usePreview": 0,
            "username": "ddoodm",
            "viewed": 1456
        },
        "renderpass": [
            {
                "code": "// DDOODM's first raymarched distance field!\n// Derived from:\n// \"monkey saddle by joates (Nov-2014)\"\n//\n// Deinyon Davies & Joates, November 2014\n\n// Thank you, IQ!\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\n\n//#define IS_BOXED\nconst float size = 0.45;\n\n// iq's Smooth Minimum\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat map( in vec3 p )\n{\n    float plane = p.y + 0.5 + 0.025*(sin(p.x*10.0+sin(p.z*14.0))+cos(p.z*10.0+sin(p.x*20.0)));\n    plane = max(plane, length(p + vec3(0.0,0.5,0.0)) - 3.0);\n    \n    float d1 = length(p) - size;\n    \n    float d2 = max(p.y + p.x/2.0, p.y - p.x/2.0);\n    \n    float d3 = length(p) - size * 0.85;\n    \n    float d4 = length(p - vec3(0.0, 0.25*cos(iTime)-0.25, 0.0)) - size * 0.25*cos(iTime*1.2);\n\n    float hem = max(d1,d2);\n    \n    float bow = max(hem, -d3);\n    \n    float metabowl = smin(d4, bow, 8.0);\n    metabowl *= 0.5;\n    \n    return min(metabowl, plane);\n}\n\nvec3 calcNormal( in vec3 p ) {\n    vec2 e = vec2( 0.01, 0.0 );\n    return normalize( vec3( map( p + e.xyy ) - map( p - e.xyy ),\n                            map( p + e.yxy ) - map( p - e.yxy ),\n                            map( p + e.yyx ) - map( p - e.yyx ) ) );\n}\n\n// Thank you, mu6k!\nfloat amb_occ(vec3 p)\n{\n\tfloat acc=0.0;\n\t#define ambocce 0.1\n\n\tacc+=map(p+vec3(-ambocce,-ambocce,-ambocce));\n\tacc+=map(p+vec3(-ambocce,-ambocce,+ambocce));\n\tacc+=map(p+vec3(-ambocce,+ambocce,-ambocce));\n\tacc+=map(p+vec3(-ambocce,+ambocce,+ambocce));\n\tacc+=map(p+vec3(+ambocce,-ambocce,-ambocce));\n\tacc+=map(p+vec3(+ambocce,-ambocce,+ambocce));\n\tacc+=map(p+vec3(+ambocce,+ambocce,-ambocce));\n\tacc+=map(p+vec3(+ambocce,+ambocce,+ambocce));\n\treturn 0.5+acc;\n}\n\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = -1.0 + 2.0*(fragCoord.xy/iResolution.xy);\n\tuv.x *= iResolution.x/iResolution.y;\n\n\tfloat time = iTime*0.1;\n\n    // view origin & direction\n\tvec3 ro = vec3( size );\n\tvec3 tp = vec3( 0.0 );\n    tp.y = -0.25*size;\n\n    // camera orbit\n    float m = iMouse.x/iResolution.x * 6.0;\n    ro.x = cos(time+m)*length(ro);\n    ro.z = sin(time+m)*length(ro);\n    ro.y = iMouse.y/iResolution.y;\n\n    vec3 lit = vec3( 200.0, 75.0, 200.0 );\n    vec3 ldir = normalize(lit);\n    vec3 col = vec3( 0.0 );\n    \n    // camera view\n\tvec3 cw = normalize( tp-ro );\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw, cp) );\n\tvec3 cv = normalize( cross(cu, cw) );\n\tvec3 rd = normalize( uv.x*cu + uv.y*cv + 1.5*cw );\n\n    float tmax = 200.0;\n    float h = 1.0;\n    float t = 0.0;\n    float iterations = 0.0;\n    for( int i = 0; i < 100; i++ ) {\n        if( h < 0.0001 || t > tmax ) break;\n        h = map( ro + t*rd );\n        t += h;\n        iterations = float(i);\n    }\n\n    if ( t < tmax ) {\n        vec3 pos = ro + t*rd;\n       \tvec3 nor = calcNormal( pos );\n        vec3 viw = normalize(-pos);\n        \n        // Ambient\n       \tcol = vec3( 0.45, 0.23, 0.2 );\n\n        // Diffuse\n       \tcol += vec3( 1.3, 0.5, 0.2 ) * clamp( dot( nor, ldir ), 0.0, 1.0 );\n        if(pos.y > -0.4)\n        {\n        \tcol *= texture(iChannel0, pos.xz * 4.0).xyz;\n            \n            // Reflection\n        \t//col += 0.2 * texture(iChannel2, -cw-viw).xyz;\n            \n        \t// Specular\n        \tcol += vec3( 0.5 ) * pow( clamp( dot( -reflect(nor, rd), ldir), 0.0, 1.0 ), 255.0);\n        }\n        else\n        {\n            col *= texture(iChannel1, pos.xz).xyz;\n            \n            // Fog?\n            col *= clamp(2.5 - length(pos), 0.0, 1.0);\n        }\n        \n        // Sky light\n       \tcol += vec3( 0.0, 0.1, 0.18 ) * clamp( nor.y, 0.0, 1.0 );\n        \n        // AO\n        col *= amb_occ(ro + (t-0.1)*rd);\n    }\n    else {\n        // Hit the sky\n        col = vec3( 0.30, 0.15, 0.1 ) * 0.7;\n        col += clamp(vec3( 0.9, 0.4, 0.3 ) * dot(rd, ldir), 0.0, 1.0);\n        col += clamp(vec3( 0.0, 0.1, 0.18 ) * dot(rd, -ldir), 0.0, 1.0);\n    }\n    \n    // Contrast\n    col = smoothstep( 0.0, 1.0, col );\n    \n    // Vigneting\n    vec2 q = fragCoord.xy/iResolution.xy;\n    col *= 0.2 + 0.8*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);\n    \n    col += vec3(0.1,0.15,0.2) * iterations/150.0;\n        \n    col = ACESFilm(col);\n    \n    // Gamma\n    col = pow(col, vec3(0.8));\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}