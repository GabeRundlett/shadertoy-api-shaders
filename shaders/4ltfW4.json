{
    "Shader": {
        "info": {
            "date": "1539668257",
            "description": "Sunset ocean with sounds, why not",
            "flags": 8,
            "hasliked": 0,
            "id": "4ltfW4",
            "likes": 17,
            "name": "Metaeaux - Ocean Sunset",
            "published": 3,
            "tags": [
                "raymarchingsunset"
            ],
            "usePreview": 0,
            "username": "metaeaux",
            "viewed": 1261
        },
        "renderpass": [
            {
                "code": "float quintic(float x) {\n \treturn x*x*x*(6.*x*x-15.*x+10.);\n}\n\nfloat noise(in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    float fac = 43758.5453123;\n    vec2 m = vec2(100., 1.);\n    vec2 o = vec2(1., 0.);\n    \n    float n00 = fract(fac * sin(dot((i + o.yy), m)));\n    float n01 = fract(fac * sin(dot((i + o.xy), m)));\n    float n10 = fract(fac * sin(dot((i + o.yx), m)));\n    float n11 = fract(fac * sin(dot((i + o.xx), m)));\n    \n    float fx = quintic(f.x);\n    float px0 = mix(n00, n01, fx);\n    float px1 = mix(n10, n11, fx);\n    \n    return mix(px0, px1, quintic(f.y));\n}\n\nmat2 rotate = mat2(0.8, -0.6, 0.6, 0.8);\n\nfloat ocean(vec2 p) {\n    float f = 0.;\n    \n    float speed = 0.15;\n    vec2 v01 = vec2( 2.,  0.) * iTime*speed;\n    vec2 v02 = vec2( 2.,  4.) * iTime*speed;\n    vec2 v03 = vec2( 5.,  5.) * iTime*speed;\n    vec2 v04 = vec2( 6.,  3.) * iTime*speed;\n    vec2 v05 = vec2( 8.,  5.) * iTime*speed;\n    vec2 v06 = vec2(16., 16.) * iTime*speed;\n    \n    f += 0.50000*noise(p*1.0  + v01); p *= rotate;\n    f += 0.25000*noise(p*2.01+ v03); p *= rotate;\n    f += 0.06250*noise(p*8.09  + v04); p *= rotate;\n    f += 0.03215*noise(p*15.98 + v05); p *= rotate;\n    f += 0.01608*noise(p*32.93 + v06); p *= rotate;\n    \n   // f = f*f*sin(iTime);\n    return f;\n}\n\nfloat map(in vec3 p) {   \n    float o = ocean(p.xz * 0.1) * 1.5;\n    return p.y + 0.5 + o;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n    ));\n    \n}\n\nconst vec3 SUN_DIR = normalize(vec3(-0.2, 0.15, -0.8));\nconst vec3 SUN_COL = vec3(0.9, 0.4, 0.2);\n\nvec3 sky(in vec3 rd, vec3 sunDir, float fac) {\n    rd.y = max(0., rd.y);\n    vec3 blue = vec3(0.2, 0.6, 0.9)-rd.y*0.85;\n    vec3 sunset = mix(blue, SUN_COL*0.9, exp(-rd.y*8.));\n    \n    vec3 sun = 5.*pow(dot(sunDir, rd), 120.) * SUN_COL;\n    return sunset * fac + sun;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0., 0., 0.);\n    vec3 ta = vec3(0., 0., 1000.);\n    \n    vec3 up = vec3(0., 1., 0.);\n    vec3 ww = normalize(ta-ro);\n    vec3 uu = normalize(cross(ww, up));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    vec3 rd = normalize(vec3(p.x*uu + p.y*vv - 3.0*ww));\n    \n    float m = -1.;\n    float t = 0.;\n    float tmax = 300.;\n    for(int i = 0; i<512; i++) {\n        float h  = map(ro + rd * t);\n        if ( h<0.01 ) { m = 1.; break; };\n        if ( t>tmax ) break;\n        t += h;\n    }\n    \n    float sunsetFac = 0.6 * sin(iTime * 0.1 - 1.); // mod(sin(iTime)*0.1, 1.);\n    vec3 sunDir = normalize(SUN_DIR + vec3(0., -sunsetFac*0.5,0.));\n    vec3 skyCol = sky(rd, sunDir, 1.-sunsetFac);\n    vec3 col = vec3(0.);\n    \n    if (m > 0.) {\n\t\tvec3 pos = ro + rd * t;\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect(rd, nor);\n        vec3 refCol = sky(ref, sunDir, 1.-sunsetFac);\n        \n        float d = dot(sunDir, nor);\n        vec3 refractedRay = normalize(rd+(-cos(1.33*acos(-d))-d)*nor);\n        \n        vec3 refractedCol = sky(refractedRay, sunDir, 1.-sunsetFac);\n\n        vec3 dif = refCol*clamp(d, 0., 1.);\n        vec3 amb = vec3(0.01, 0.03, 0.08);\n        vec3 spec = refCol*pow(clamp(d+0.59, 0.,1.), 1000.0);\n        \n        col = amb + mix(dif, spec, 0.4);\n        col = mix(col, refractedCol, 0.35);\n    }\n\n    // fade out the horizon\n    col = mix(col, skyCol, min(t, tmax)/tmax);\n    \n    col = pow(col, vec3(0.4545));\n    \n    // fade out\n    //col *= smoothstep(0., 0.1, 1.-sunsetFac);\n    // fade in\n    //col *= smoothstep(0., 0.01, sunsetFac);\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float TWOPI = 6.2831;\n\nfloat bitcrush(float value, float factor){\n    return clamp(-1., 1., value * factor);\n}\n\nfloat noise(float time) {\n    float fac = 43179.124191;\n    return pow(fract(fac*sin(fac*time)), 8.0);\n}\n\nfloat C(float time) {\n    float s = sin(TWOPI*233.08*time + 0.06*noise(time));\n    s = mix(s, smoothstep(0.5, 1.0, s), 0.3*sin(time*3.14*0.25));\n    return 0.5*s + 0.25*bitcrush(s, 2.)+ 0.1*bitcrush(s, 4.);\n}\n\nfloat diff(float time) {\n    float f = 0.;\n    float t = time;\n    \n    float v0 = 0.5 * sin(t * 0.01) + 0.5;\n    float v1 = 0.5 * sin(t * 0.31) + 0.5;\n    float v2 = 0.5 * sin(t * 0.9)  + 0.5;\n    float v3 = 0.5 * sin(t * 0.22) + 0.5;\n    float v4 = 0.5 * sin(t * 2.0)  + 0.5;\n    \n    float o = sin(t) * 0.01;\n    float fac = 155.56/233.08;\n    float fac2 = 196.0/233.08;\n    f += 0.5000 * C(0.5 *t + o) * v0;\n    f += 0.2500 * C(1.0 *t + o) * v1;\n    f += 0.2500 * C(1.0 *t*fac + o) * v2;\n    f += 0.2500 * C(1.0 *t*fac2 + o) * v3;\n    f += 0.1250 * C(2.0 *t + o) * v2;\n    f += 0.0625 * C(0.5 *t*fac2 + o) * v3;\n    f += 0.0313 * C(2.0 *t + o) * v4;\n    f += 0.0156 * C(4.0 *t*fac + o) * v3;\n //   f += 0.0080 * C(4.0 *t*fac2 + o) * v2;\n    \n    f = clamp(f, -1., 1.)*0.6;\n    \n    return 0.25*f*sin(time*6.28*2.)+f*0.85;\n}\n\nvec2 waves(float time) {\n\treturn vec2(0.2*noise(time)*sin(time), 0.2*noise(time+TWOPI*0.5)*cos(time))*(sin(1.*time*TWOPI)*0.25 + 0.75);\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    time = mod(time, 32.*TWOPI);\n    vec2 sound = vec2(diff(time), diff(time+3.14))*(0.25*sin(time*0.2)+0.75);\n    vec2 waves = waves(time) * 0.05 + waves(time*0.3)*0.05;\n    return sound + waves * 0.5;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}