{
    "Shader": {
        "info": {
            "date": "1560304878",
            "description": "circle",
            "flags": 0,
            "hasliked": 0,
            "id": "tt23RK",
            "likes": 0,
            "name": "SRP Weighting",
            "published": 3,
            "tags": [
                "circle"
            ],
            "usePreview": 0,
            "username": "shadrx",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "/**\n * @author jonobr1 / http://jonobr1.com/\n */\n\n/**\n * Convert r, g, b to normalized vec3\n */\nvec3 rgb(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n/**\n * Draw a circle at vec2 `pos` with radius `rad` and\n * color `color`.\n */\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 color) {\n    float t = length(uv - pos)/150.0;\n    \n    if (t > 0.0 && t < 1.0) {\n        float v = 2.0 * t * t * t - 3.0 * t * t + 1.0;\n        return vec4(v, v, v, 1.0);\n    } else {\n        return vec4(0, 0, 0, 0.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = 0.25 * iResolution.y;\n\n    // Background layer\n\t\n\t// Circle\n\tvec3 red = rgb(225.0, 95.0, 60.0);\n\tvec4 layer2 = circle(uv, center, radius, red);\n\t\n\t// Blend the two\n\tfragColor = layer2;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}