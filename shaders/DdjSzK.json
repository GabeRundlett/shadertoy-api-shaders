{
    "Shader": {
        "info": {
            "date": "1670537230",
            "description": "I made this earlier thinking it wasn't anything special, but now I genuinely can't see how this is makes sense in 3D. Really weird!\n\nedit\n\nclick to drag the camera",
            "flags": 0,
            "hasliked": 0,
            "id": "DdjSzK",
            "likes": 15,
            "name": "Fractal Optical Illusion",
            "published": 3,
            "tags": [
                "h"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nfloat box( vec3 p, vec3 b, float e ) {\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nvec3 ori() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= rot(-m.y*3.14+1.);\n    ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\n//float mat = 1.;\nvec2 map(vec3 p) {\n    vec3 op = p;\n    p.xz *= rot(iTime);\n    float m = 0.7;\n    float o = 2.*pi/3.;\n    vec3 off = normalize(cos(vec3(-o,0,o) + iTime));\n    vec3 pl = normalize(vec3(1,2,3));\n    float d = length(p) + m;\n    for (float i = 0.; i < 6.; i++) {\n        vec3 q = p;\n        p = abs(p) - m;\n        p = erot(p, off, pi/2.);\n        d = min(d, abs(length(p) - m) + 0.01 + 0.4 * m);//, 0. * m);\n        m *= 0.25 * sqrt(2.);\n    }\n    \n    //d = min(d, abs(length(op) - 1.8) + 0.01);\n    \n    //d += 0.1;\n    //p = erot(p, (off), pi);\n    float mat = 1.; \n    float d1 = length(p.xz) - 0.1;\n    float d2 = abs(length(vec2(d1, p.y)) - 0.1) + 0.05;\n    //d2 = length(p) + 0.01;\n    d = min(d, d2);\n    return vec2(d, mat);\n}\n\nvec3 march(vec3 ro, vec3 rd) {\t\n    float d = 0.;\n    float steps = 0.;\n    float mat = 0.;\n    float retd = 0.;\n    bool hasHit = false;\n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * d;\n        vec2 m = map(p);\n        m.x *= 0.8 + 0.2 * hash(hash(p.x,p.z), p.y); // for glow\n        steps = 0.9 * (steps + exp(-10. * m.x + 2./(1.+d)));//0.01 / (0.01 + m.x * m.x);\n        if (!hasHit && abs(m.x) < SURF_DIST) {\n            hasHit = true;\n            retd = 1.;\n        }\n        else if (d > MAX_DIST) { \n            mat = m.y;\n            break;\n        }\n        d += m.x; \n    }\n    \n    return vec3(min(d, MAX_DIST), steps, retd);\n}\n\nvec3 norm(vec3 p) {\n\tfloat d = map(p).x;\n    vec2 e = vec2(.001, 0);    \n    vec3 n = d - vec3(map(p-e.xyy).x,\n                      map(p-e.yxy).x,\n                      map(p-e.yyx).x);   \n    return normalize(n);\n}\n\nvec3 dir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat AO(in vec3 p, in vec3 n) {\n\tfloat occ = 0.;\n    float sc = 1.;\n    for (float i = 0.; i < 5.; i++) {\n        float h = 0.015 + 0.015 * i;\n        float d = map(p+h*n).x;\n        occ += (h-d)*sc;\n        sc *= 0.95;\n    }\n    return clamp(1. - 3.*occ, 0., 1.);\n}\n\nfloat shadow(in vec3 ro, in vec3 rd) {\n    float res = 1.;\n    float t = SURF_DIST;\n    for (int i=0; i<24; i++)\n    {\n\t\tfloat h = map(ro + rd * t).x;\n        float s = clamp(32. * h / t, 0., 1.);\n        res = min(res, s);\n        t += clamp(h, 0.01, 0.2);\n        if(res<SURF_DIST || t>MAX_DIST ) break;\n    }\n    res = clamp(res, 0.0, 1.0);\n    return smoothstep(0., 1., res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = ori();\n    \n    vec3 rd = dir(uv, ro, vec3(0), 1.);\n    vec3 col = vec3(0);\n   \n    vec3 m = march(ro, rd);  \n    float d = m.x;\n    float mat = m.z;\n    vec3 p = ro + rd * d;\n    \n    //if (d<MAX_DIST) {        \n        vec3 n = norm(p);\n        n = normalize(n);\n        vec3 r = reflect(rd, n);        \n\n        vec3 ld = normalize(vec3(1,2,3));\n        float dif  = dot(n,  ld)*.5+.5;\n        float spec = pow(dif, 16.);\n        col = vec3(dif);   \n        \n       // col *= 1.-vec3(0, m.z, m.z);\n    //}\n\n    col = vec3(pow(0.1 * m.y, 6.));\n    col *= 200. * 15.;\n    col = clamp(col,0.,1.);\n    \n    vec3 q = ro + rd * m.z;\n    n = norm(q);\n    //dif = dot(n,  ld)*.5+.5;\n  //  if (m.z < MAX_DIST)\n  //      col = vec3(exp(-0.2*length(q)));\n   // col *= pal(p.y,vec3(0,1,2)/3.);\n    col = pow(col, vec3(1./2.2));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Thanks to (everyone I've copied code + ideas from):\n// TheArtOfCode - raymarching\n//  BlackleMori - hash, erot\n//      Sizertz - AO, shadow\n//        NuSan - materials\n//         Leon - raymarching hash trick\n//           iq - pal, smin, most things!\n\n#define tau 6.2831853071\n#define pi 3.1415926535\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define pal(a,b) .5+.5*cos(2.*pi*(a+b))\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat h21(vec2 a) { return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123); }\nfloat mlength(vec2 uv) { return max(abs(uv.x), abs(uv.y)); }\nfloat mlength(vec3 uv) { return max(max(abs(uv.x), abs(uv.y)), abs(uv.z)); }\n\n// Maybe remove this\nfloat sfloor(float a, float b) { return floor(b-.5)+.5+.5*tanh(a*(fract(b-.5)-.5))/tanh(.5*a); }\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}