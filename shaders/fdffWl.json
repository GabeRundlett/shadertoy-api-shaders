{
    "Shader": {
        "info": {
            "date": "1648217534",
            "description": "Just suppose the earth is a plane in Rectangular Coordinates. And the atmosphere is a layer endlessly \n//nestle up to the ground.\n//The effect is like this.",
            "flags": 0,
            "hasliked": 0,
            "id": "fdffWl",
            "likes": 2,
            "name": "Real sky and ground simulation",
            "published": 3,
            "tags": [
                "sunset",
                "sun",
                "light",
                "sky",
                "effect",
                "glass",
                "sunlight",
                "shader",
                "atmosphere",
                "sunrise",
                "atmospheric",
                "grassland",
                "meadow",
                "lawn",
                "meadowland"
            ],
            "usePreview": 0,
            "username": "blackholes",
            "viewed": 625
        },
        "renderpass": [
            {
                "code": "//Just suppose the earth is a plane in Rectangular Coordinates,and the atmosphere is a layer endlessly \n//nestle up to the ground.\n//The effect is like this.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float pi =3.1415926535;\n    //The latitude of the observer's position\n        // Sky with haze\t\n          float beta = pi/6.0;\n          //pupilla area\n     float s =1.25;\n\tfloat a = pi*uv.y-pi/2.0; \n    float a2=2.0*pi*uv.x;\n\n       \n            float sunmove = -0.2/2.0*iTime;\n               float suna=-asin(cos(beta)*sin(sunmove));\n               if(sin(suna)>0.0) suna=suna;\n               else suna=pi/5.0;\n                   float suna2;\n    if(sin(sunmove)<.0) suna2=acos((cos(sunmove))/(sqrt(cos(sunmove)*cos(sunmove)+sin(beta)*sin(beta)*sin(sunmove)*sin(sunmove))));\n    else suna2=-acos((cos(sunmove))/(sqrt(cos(sunmove)*cos(sunmove)+sin(beta)*sin(beta)*sin(sunmove)*sin(sunmove))));\n     float h = 0.1;\n     //Distance of observation line in atmosphere\n     float D = h*sqrt((1.0/tan(a))*(1.0/tan(a))+1.0);\n     //sunlight distance in atmosphere\n    float d = h*sqrt((1.0/tan(suna))*(1.0/tan(suna))+1.0);\n    //sphere\n    float alpha=acos(cos(a)*cos(suna)*cos(a2-suna2)+sin(a)*sin(suna));\n    //sunflarebrightness\n    float g = 0.55;\n    float g2 = 0.988;\n    float flare = 0.95*(1.0-g*g)/(1.0+g*g-2.0*g*cos(alpha));\n    float sunflare1 = (1.0-g2*g2)/(1.0+g2*g2-2.0*g2*cos(a-suna));\n    float sunflare2 = (1.0-g2*g2)/(1.0+g2*g2-2.0*g2*cos(cos(a)*(a2-suna2)));\n        //atmosphere thickness\n    //atmosphere absorption\n    float k =6.2;\n    float ab = 1.17/k;\n    float ab2 = 0.51/k;\n    float ab3 = 0.25/k;\n    float effect = (1.0-exp(-ab*D*3.5*(1.2+sin(a)/sin(suna))))/(ab)/(1.2+sin(a)/sin(suna));\n\n        vec3 blue = vec3(0.0,0.0,1.0);\n    vec3 green = vec3(0.0,1.0,0.0);\n    vec3 red = vec3(1.0,0.0,0.0);\n    vec3 sunflare = vec3(exp(-0.25*d/k),exp(-0.51*d/k),exp(-1.17*d/k));\n\n    //starsbrightness\n    float st=0.173;\n\n    vec3 m = vec3(0.25,0.51,1.17);\n    vec3 Sun;\n    if(alpha*360.0/pi <0.535)Sun = 3.0*sunflare;\n    else Sun = vec3(0,0,0);\n    if(sin(sunmove)<0.0) Sun=Sun;\n    else Sun=vec3(0,0,0);\n    if(sin(sunmove)<0.0) flare=flare;\n    else flare =0.0;\n    if(sin(sunmove)<0.0) sunflare1=sunflare1;\n    else sunflare1=0.0;\n     if(sin(sunmove)<0.0) sunflare2=sunflare2;\n    else sunflare2=0.0;\n    blue = blue*effect;\n    green = green*effect;\n    red = red*effect;\n    //light in atmosphere\n    float L=sin(suna);\n    vec3 Mie=vec3 (1,1,1)-sunflare;\n\n    vec3 skycol = L*((blue)*1.17+(green)*0.51+(red)*0.25)*0.275;\n    //skycolor+Miescattering of sun+Miescattering of skycolor+sun+sunbrightness\n    vec3 col4 = 3.0*skycol+1.68*(1.0-exp(-0.575*D))*sunflare*flare+d*sin(suna)*5.45*L*m*(1.0-exp(-1.32*D))+40.5*Sun+0.000072*sunflare*sunflare1*sunflare2;\n    //dustamount\n    float n = 0.0225;\n    //micodustamount\n    float n2 = 1.5225;\n       // Clouds\n\n                         \n    if(a<0.0) col4=1.8*sin(suna)*(vec3(0.16,0.2,0.13))*vec3(exp(-D*(5.0*n+0.25*n2)/100.0),exp(-D*(5.0*n+0.51*n2)/100.0),exp(-D*(5.0*n+1.17*n2)/100.0))+sin(suna)*vec3(1.0-exp(-D*(0.3*n+0.25*n2)/100.0),1.0-exp(-D*(0.3*n+0.51*n2)/100.0),1.0-exp(-D*(0.3*n+1.17*n2)/100.0))*1.1;\n    else col4= col4*vec3(exp(-D*(5.0*n+0.25*n2)),exp(-D*(5.0*n+0.51*n2)),exp(-D*(5.0*n+1.17*n2)))+sunflare*sin(suna)*vec3(1.0-exp(-D*(0.3*n+0.25*n2)),1.0-exp(-D*(0.3*n+0.51*n2)),1.0-exp(-D*(0.3*n+1.17*n2)))*1.1;\n \n   if(sin(sunmove)<0.0) col4 = s/5.55*4.286*col4;\n    else col4 = st*s/5.55*4.286*col4;    \n    // Output to screen\n\nfragColor = vec4(col4,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}