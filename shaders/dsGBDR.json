{
    "Shader": {
        "info": {
            "date": "1698108368",
            "description": "Hinged hexagon truchet\nInspiration: [url]https://twitter.com/KeishiroUeki/status/1715924571180990920[/url]\nSee also: [url=/view/msGBWR]textured hinged hexagon tiling[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "dsGBDR",
            "likes": 25,
            "name": "Hinged Truchet",
            "published": 3,
            "tags": [
                "hexagon",
                "tiling",
                "hex",
                "tile",
                "tessellation",
                "hinge"
            ],
            "usePreview": 0,
            "username": "fad",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415927;\n\nvoid mainImage(out vec4 O, vec2 I) {\n    vec2 R = iResolution.xy;\n    vec2 p = (2.0 * I - R) / R.y * 3.0;\n    float t = 1.0 - abs(1.0 - mod(iTime / 3.0, 2.0));\n    float a = smoothstep(0.0, 1.0, smoothstep(0.0, 1.0, t)) * PI / 3.0;\n    mat2 A = mat2(sqrt(3.0), 1.0, 0.0, 2.0);\n    vec2 b = inverse(A) * p / cos(a - PI / 6.0);\n    vec2 c = fract(b);\n    vec2 d = floor(b) + step((clamp(3.0 * c, 1.0, 2.0) - c).yx, 2.0 * c);\n    vec2 e = p - A * d * cos(a - PI / 6.0);\n    a = mod(d.x, 2.0) == 1.0 ? -a : a;\n    e = mat2(cos(a), sin(a), -sin(a), cos(a)) * e;\n    vec2 f = abs(e);\n    float g = max(f.y, sqrt(0.75) * f.x + 0.5 * f.y) - sqrt(0.75);\n    float h = fract(sin(dot(d, vec2(12.9898, 78.233))) * 43758.5453);\n    h = step(0.5, h) * PI / 3.0;\n    float i = distance(e, vec2(cos(h), sin(h)));\n    h += PI * 2.0 / 3.0;\n    i = min(i, distance(e, vec2(cos(h), sin(h))));\n    h += PI * 2.0 / 3.0;\n    i = min(i, distance(e, vec2(cos(h), sin(h))));\n    i = abs(i - 0.5);\n    float j = dot(normalize(vec2(dFdx(i), dFdy(i))), normalize(vec2(1.0, 2.0)));\n    \n    if (g < 0.0) {\n        O = vec4(0.8);\n        \n        if (g > -0.2) {\n            O = vec4(0.6);\n        }\n        \n        if (i < 0.2) {\n            O = vec4(1.5 + 0.3 * j);\n        } else {\n            O *= pow(min((i - 0.2) / 0.2, 1.0), 0.07);\n        }\n    } else {\n        O = vec4(0.3);\n    }\n    \n    O *= vec4(0.114,0.576,0.667,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}