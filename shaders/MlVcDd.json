{
    "Shader": {
        "info": {
            "date": "1538268709",
            "description": "A cube-sized hole in a cube! Mouse changes the orientation",
            "flags": 0,
            "hasliked": 0,
            "id": "MlVcDd",
            "likes": 1,
            "name": "It fits!",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "cube"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 491
        },
        "renderpass": [
            {
                "code": "#define pi6 0.666666*atan(1.0)\n#define pi2 3.0*pi6\n#define pi3 2.0*pi6\n#define pi 2.0*pi2\n#define pi4 0.25*pi\n\n#define width 1.0\n#define small 0.01\n#define far 10.0\n#define marchingIters 40\n\n#define cubeCol vec3(0, 0.9, 1)\n#define cutCubeCol vec3(0, 0, 1)\n#define light vec3(0.866)\n\n#define cubeAmp 2.2\n#define cubeFreq 1.0\n#define camRot vec2(1, 0)\n\n#define wholeCube\n\n//#define AA\n\nfloat sdCube(vec3 p){\n   vec3 d = abs(p) - width;\n   return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdInfPrism(vec3 p){\n    vec3 d = abs(p) - vec3(9e9, width, width);\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdf(vec3 p, mat3 orient){\n\n    float cube = sdCube(p);\n    p = orient*p;\n    float cutCube = max(cube, -sdInfPrism(p));\n\n    #ifdef wholeCube\n    return min(sdCube(p - vec3(cubeAmp*sin(cubeFreq*iTime), 0, 0)), cutCube);\n    #else\n    return cutCube;\n    #endif\n}\n\nvec3 calcNormal(vec3 p, mat3 orient){\n    vec2 h = vec2(0, small);\n    return normalize(vec3(sdf(p + h.yxx, orient),\n                          sdf(p + h.xyx, orient),\n                          sdf(p + h.xxy, orient))\n                          - sdf(p, orient));\n}\n\nmat3 calcOrient(vec2 m){\n\n    vec2 angles = vec2(pi3, pi6) + 0.5*pi6*m;\n    vec4 trig = sin(vec4(angles.x + vec2(0, pi2), angles.y + vec2(0, pi2)));\n\n    mat3 rot1 = mat3( trig.x, trig.y, 0,\n                     -trig.y, trig.x, 0,\n                           0,      0, 1);\n    mat3 rot2 = mat3( trig.z, 0, trig.w,\n                           0, 1, 0,\n                     -trig.w, 0, trig.z);\n\n    return rot1*rot2;\n}\n\nvec3 r(vec3 v, vec2 r){//rodolphito's rotation\n    vec4 t = sin(vec4(r, r + 1.5707963268));\n    float g = dot(v.yz, t.yw);\n    return vec3(v.x * t.z - g * t.x,\n                v.y * t.w - v.z * t.y,\n                v.x * t.x + g * t.z);\n}\n\nvec3 render(vec2 fragCoord){\n    \n    float time = 0.25*iTime;\n    vec2 xy = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec3 rd = normalize(vec3(xy, 2.5));\n    rd = r(rd, camRot*time + vec2(0, pi4));\n    vec3 ro = vec3(0, 0, -5);\n    ro = r(ro, camRot*time + vec2(0, pi4));\n    \n    mat3 orient = calcOrient(iMouse.xy==vec2(0)?vec2(0.5):iMouse.xy/iResolution.xy);\n    vec3 pos = vec3(cubeAmp*sin(cubeFreq*iTime), 0, 0);\n    \n    float t = 0.0;\n    vec3 p = ro;\n    int hit = 0;\n    \n    for(int i = 0; i < marchingIters; i++){\n\n        float d = max(sdCube(p), -sdInfPrism(orient*p));\n        if(d < small){hit = 1; break;}\n        \n        #ifdef wholeCube\n        float d2 = sdCube(orient*p - pos);\n        if(d2 < small){hit = 2; break;}\n        d = min(d, d2);\n        #endif\n        \n        p += d*rd;\n        t += d;\n        if(t > far) break;\n    }\n    if(hit > 0){\n        float shade = max(0.5, dot(light, calcNormal(p, orient)));\n        if(hit == 1) return shade*cutCubeCol;\n        else return shade*cubeCol;\n    }\n    return vec3(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef AA\n    fragColor.rgb = vec3(0);\n    for(int i = -1; i <= 1; i++){\n        for(int j = -1; j <= 1; j++){\n            fragColor.rgb += render(fragCoord + 0.5*vec2(i, j));\n        }\n    }\n    fragColor.rgb /= 9.0;\n    #else\n    fragColor.rgb = render(fragCoord);\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}