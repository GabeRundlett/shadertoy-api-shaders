{
    "Shader": {
        "info": {
            "date": "1552436650",
            "description": "I saw a similar object once in a 3D-app and thought, that might be doable as an SDF with sphere-tracing too. Also added a animated pattern to the floor so the scene does not look too dull (see https://www.youtube.com/watch?v=cQXAbndD5CQ).",
            "flags": 64,
            "hasliked": 0,
            "id": "tdsXWf",
            "likes": 20,
            "name": "Tori Inception",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "torus",
                "spheretracing",
                "pbr"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 789
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Trying to replicate a 3D-model I saw once on some gfx-fair with SDFs. Also\n// trying to play a bit with a sound-reactive floor.\n//\n// Copyright 2019 Mirco Müller\n//\n// Author(s):\n//   Mirco \"MacSlow\" Müller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst int MAX_ITER    = 64;\nconst float STEP_SIZE = .75;\nconst float EPSILON   = .001;\nconst float PI = 3.14159265359;\n\nfloat saturate (in float v)\n{\n\treturn clamp (v, .0, 1.);\n}\n\nmat2 r2d (in float degree)\n{\n\tfloat rad = radians (degree);\n\tfloat c = cos (rad);\n\tfloat s = sin (rad);\n\treturn mat2 (vec2 (c, s), vec2 (-s, c));\n}\n\nstruct Result {\n\tfloat d;\n\tint id;\n};\n\n// basic sdf toolbox\nvec3 opRepeat (in vec3 p, in vec3 size) {return mod (p, 2. * size) - size;}\nfloat sdTorus (in vec3 p, in vec2 t) { vec2 q = vec2 (length (p.xz) - t.x, p.y); return length (q) - t.y; }\nfloat udRoundBox (in vec3 p, in vec3 size, in float r) { return length (max (abs (p) - (size - r), .0)) - r; }\nfloat sdSphere (in vec3 p, float r) { return length (p) - r; }\nvec2 opRepeat2 (inout vec2 p,in vec2 s) {vec2 h=.5*s; vec2 c=floor((p+h)/s); p=mod(p+h,s)-h; return c;}\n\n// PBR toolbox\nfloat DistributionGGX (in vec3 N, in vec3 H, in float roughness)\n{\n    float a2     = roughness * roughness;\n    float NdotH  = max (dot (N, H), .0);\n    float NdotH2 = NdotH * NdotH;\n\n    float nom    = a2;\n    float denom  = (NdotH2 * (a2 - 1.) + 1.);\n    denom        = PI * denom * denom;\n\n    return nom / denom;\n}\n\nfloat GeometrySchlickGGX (in float NdotV, in float roughness)\n{\n    float nom   = NdotV;\n    float denom = NdotV * (1. - roughness) + roughness;\n\n    return nom / denom;\n}\n\nfloat GeometrySmith (in vec3 N, in vec3 V, in vec3 L, in float roughness)\n{\n    float NdotV = max (dot (N, V), .0);\n    float NdotL = max (dot (N, L), .0);\n    float ggx1 = GeometrySchlickGGX (NdotV, roughness);\n    float ggx2 = GeometrySchlickGGX (NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n\nvec3 fresnelSchlick (in float cosTheta, in vec3 F0, float roughness)\n{\n\treturn F0 + (max (F0, vec3(1. - roughness)) - F0) * pow (1. - cosTheta, 5.);\n}\n\nfloat opCombine (in float d1, in float d2, in float r)\n{\n    float h = clamp (.5 + .5 * (d2 - d1) / r, .0, 1.);\n    return mix (d2, d1, h) - r * h * (1. - h);\n}\n\nvec2 mapToScreen (in vec2 p)\n{\n    vec2 res = p;\n    res = res * 2. - 1.;\n    res.x *= iResolution.x / iResolution.y;\n    \n    return res;\n}\n\n// ray-marching stuff\nResult scene (in vec3 p)\n{\n    // trying to make the floor a bit sound-reactive\n\tfloat offset = 1.;\n    float fac = texture(iChannel0, vec2(1., .0)).r;\n\toffset += fac/(.1 + length(p.xz))*(.5 + .5*cos(p.x*p.x + p.z*p.z + 5.*iTime));\n    float ground = p.y + offset;\n\n\tp.yz *= r2d (90.);\n\n\tvec3 torusCenter1 = p;\n\ttorusCenter1 -= vec3 (.0, .0, .0);\n\tfloat torus1 = sdTorus (torusCenter1, vec2 (.8, .1));\n\n\tvec3 torusCenter2 = torusCenter1;\n\ttorusCenter2.xz *= r2d (45.*iTime);\n\ttorusCenter2 -= vec3 (.3, .0, .0);\n\ttorusCenter2.yz *= r2d (135.*iTime);\n\tfloat torus2 = sdTorus (torusCenter2, vec2 (.4, .05));\n\n\tvec3 torusCenter3 = torusCenter2;\n\ttorusCenter3.xz *= r2d (-75.*iTime);\n\ttorusCenter3 -= vec3 (-.15, .0, .0);\n\ttorusCenter3.yz *= r2d (135.*iTime);\n\tfloat torus3 = sdTorus (torusCenter3, vec2 (.2, .025));\n\n\tvec3 torusCenter4 = torusCenter3;\n\ttorusCenter4.xz *= r2d (150.*iTime);\n\ttorusCenter4 -=  vec3 (-.075, .0, .0);\n\ttorusCenter4.yz *= r2d (135.*iTime);\n\tfloat torus4 = sdTorus (torusCenter4, vec2 (.1, .025));\n\n\tvec3 sphereCenter = torusCenter4;\n\tfloat sphere = sdSphere (sphereCenter, .035 + .1*pow (fac, 2.));\n\n    float d = opCombine (torus1, torus2, 0.2);\n\td = opCombine (d, torus3, .1);\n\td = opCombine (d, torus4, .05);\n\td = opCombine (d, sphere, .05);\n\n    Result res = Result (.0, 0);\n\tres.d = min (d, ground);\n    res.id = (res.d == ground) ? 1 : 2;\n    return res;\n}\n\nResult raymarch (in vec3 ro, in vec3 rd)\n{\n    Result res = Result (.0, 0);\n\n    for (int i = 0; i < MAX_ITER; i++)\n    {\n        vec3 p = ro + res.d * rd;\n        Result tmp = scene (p);\n        if (abs (tmp.d) < EPSILON*(1. + .125*tmp.d)) return res;\n        res.d += tmp.d * STEP_SIZE;\n        res.id = tmp.id;\n    }\n\n    return res;\n}\n\nvec3 normal (in vec3 p)\n{\n    vec2 e = vec2(.0001, .0);\n    float d = scene (p).d;\n    vec3 n = vec3 (scene (p + e.xyy).d - d,\n                   scene (p + e.yxy).d - d,\n                   scene (p + e.yyx).d - d);\n    return normalize(n);\n}\n\nfloat shadow (in vec3 ro, in vec3 rd)\n{\n    float result = 1.;\n    float t = .1;\n    for (int i = 0; i < MAX_ITER; i++) {\n        float h = scene (ro + t * rd).d;\n        if (h < 0.00001) return .0;\n        result = min (result, 8. * h/t);\n        t += h;\n    }\n\n    return result;\n}\n\nfloat xor (in float a, in float b)\n{\n\treturn a*(1. - b) + b*(1. - a);\n}\n\n// floorPattern() is based on BigWIngs' tutorial https://www.youtube.com/watch?v=cQXAbndD5CQ\nvec3 floorPattern (in vec3 p)\n{\n    vec2 uv = p.xz;\n\tuv *= r2d (5.*iTime);\n\n\tvec2 grid = fract (uv) - .5;\n\tvec2 cell = uv - grid;\n    vec3 col = vec3 (.0);\n\n\tfloat c = .0;\n\tfor (float y = -1.; y <= 1.; y++) {\n\t\tfor (float x = -1.; x <= 1.; x++) {\n\t\t\tvec2 offset = vec2 (x, y);\n\n\t\t\tfloat spot = length (grid - offset);\n\t\t\tfloat distanceOverCells = length (cell + offset)*mix (.1, .4, .5 + .5*sin(iTime));\n\n\t\t\tfloat radius = mix (.1, 1.5, (.5 + .5*sin (distanceOverCells - 4.*iTime)));\n\t\t\tc = xor (c, smoothstep (radius, radius*.75, spot));\n\t\t}\n\t}\n\tvec3 a = vec3 (.0);\n\tvec3 b = vec3 (1.);\n\tcol += vec3 (mix (a, b, mod (c, 2.)));\n    return col;\n}\n\nvec3 shadePBR (in vec3 ro, in vec3 rd, in float d, in int id)\n{\n    vec3 p = ro + d * rd;\n    vec3 nor = normal (p);\n\n    // \"material\" hard-coded for the moment\n    vec3 albedo1 = floorPattern (4.*p);\n    vec3 albedo2 = vec3 (.95, .95, .25);\n    vec3 albedo = (id == 1) ? albedo1 : albedo2;\n    float metallic  = (id == 1) ? .2 : .75;\n    float roughness = (id == 1) ? .8 : .25;\n    float ao = 1.;\n\n    // lights hard-coded as well atm\n    vec3 lightColors[2];\n    lightColors[0] = vec3 (.85, .85, .9) * 20.;\n    lightColors[1] = vec3 (.9, .85, .85) * 20.;\n\n    vec3 lightPositions[2];\n    vec3 lightPositionsOffset[2];\n    lightPositionsOffset[0] = vec3 (.5, .4, .5);\n    lightPositionsOffset[1] = vec3 (-.5, .3, -.5);\n    lightPositionsOffset[0].xz *= r2d (45.*iTime);\n    lightPositionsOffset[1].xz *= r2d (-80.); \n    lightPositions[0] = p + lightPositionsOffset[0];\n    lightPositions[1] = p + lightPositionsOffset[1];\n\n\tvec3 N = normalize (nor);\n    vec3 V = normalize (ro - p);\n\n    vec3 F0 = vec3 (0.04); \n    F0 = mix (F0, albedo, metallic);\n    vec3 kD = vec3(.0);\n\t\t           \n    // reflectance equation\n    vec3 Lo = vec3 (.0);\n    for(int i = 0; i < 2; ++i) \n    {\n        // calculate per-light radiance\n        vec3 L = normalize(lightPositions[i] - p);\n        vec3 H = normalize(V + L);\n        float distance    = length(lightPositions[i] - p);\n        float attenuation = 1. / (distance * distance);\n        vec3 radiance     = lightColors[i] * attenuation;\n\t        \n        // cook-torrance brdf\n        float aDirect = .125 * pow (roughness + 1., 2.);\n        float aIBL = .5 * roughness * roughness;\n        float NDF = DistributionGGX(N, H, roughness);        \n        float G   = GeometrySmith(N, V, L, roughness);      \n        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0, roughness);\n\t        \n        vec3 kS = F;\n        kD = vec3(1.) - kS;\n        kD *= 1. - metallic;\t  \n\t        \n        vec3 nominator    = NDF * G * F;\n        float denominator = 4. * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        vec3 specular     = nominator / max(denominator, .001);  \n\n        // add to outgoing radiance Lo\n        float NdotL = max(dot(N, L), 0.0);                \n        Lo += (kD * albedo / PI + specular) * radiance * NdotL; \n\t    Lo *= shadow (p, L);\n    }\n\n    vec3 ambient = (kD * albedo) * ao;\n\n    vec3 tex = texture (iChannel1, reflect (rd, nor)).rgb;\n    if(id == 2) {\n    \tambient += tex;\n\t}\n    \n    return ambient + Lo;\n}\n\nvec3 camera (in vec2 uv, in vec3 ro, in vec3 aim, in float zoom)\n{\n    vec3 camForward = normalize (vec3 (aim - ro));\n    vec3 worldUp = vec3 (.0, 1., .0);\n    vec3 camRight = normalize (cross (camForward, worldUp));\n    vec3 camUp = normalize (cross (camRight, camForward));\n    vec3 camCenter = normalize (ro + camForward * zoom);\n\n    return normalize ((camCenter + uv.x*camRight + uv.y*camUp) - ro);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalizing and aspect-correction\n\tvec2 uvRaw = fragCoord.xy/iResolution.xy;\n\tvec2 uv = uvRaw;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // set up \"camera\", view origin (ro) and view direction (rd)\n\tvec3 offset = 5.*vec3 (1., .0, 1.);\n\tfloat angle = 130. * (iMouse.x / iResolution.x * 2. - 1.);\n\toffset.xz *= r2d (130. + angle);\n\tfloat height = 2.*(iMouse.y / iResolution.y * 2. - 1.);\n    vec3 ro = vec3 (0.0, 4.0 - height, 0.0) + offset;\n    vec3 aim = vec3 (0.0, 2.0, 0.0);\n    float zoom = 1.;\n    vec3 rd = camera (uv, ro, aim, zoom);\n\n    // do the ray-march...\n    Result res = raymarch (ro, rd);\n    float fog = 1. / (1. + res.d * res.d * .1);\n    vec3 c = shadePBR (ro, rd, res.d, res.id);\n\n    // tonemapping, \"gamma-correction\", tint, vignette\n\tc *= fog;\n\tc = c / (1. + c);\n    c = .2 * c + .8 * sqrt (c);\n    c *= vec3 (.9, .85, .8);\n    c *= .2 + .8*pow(16.*uvRaw.x*uvRaw.y*(1. - uvRaw.x)*(1. - uvRaw.y), .3);\n\n\tfragColor = vec4(c, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 18080,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/professorkliq/wire-flashing-lights"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}