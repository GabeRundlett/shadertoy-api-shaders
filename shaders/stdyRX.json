{
    "Shader": {
        "info": {
            "date": "1660331206",
            "description": "Pixilates an image and then swaps the palette. This is done with ordered dithering in order to simulate the shading techniques present in pixel art, while creating the illusion of a larger color palette. (fullscreen for best results)",
            "flags": 0,
            "hasliked": 0,
            "id": "stdyRX",
            "likes": 28,
            "name": "Pixel Art Palette Conversion",
            "published": 3,
            "tags": [
                "retro",
                "pixel",
                "color",
                "art",
                "ordereddithering",
                "paletteswap"
            ],
            "usePreview": 1,
            "username": "kemandel",
            "viewed": 899
        },
        "renderpass": [
            {
                "code": "// Inspired by https://www.youtube.com/watch?v=8wOUe32Pt-E\n\n// What power of 2 the pixel cell sizes are increased to\nconst int pixel_scale = 2;\n\n// https://lospec.com/palette-list/oil-6\n// Should be sorted in increasing order by perceived luminance for best results\n// Can work with up to 256 distinct colors\nconst vec4[] palette = vec4[] (\nvec4(39./255., 39./255., 68./255., 1.), \nvec4(73./255., 77./255., 126./255., 1.), \nvec4(139./255., 109./255., 156./255.,1.), \nvec4(198./255., 159./255., 165./255., 1.),\nvec4(242./255., 211./255., 171./255., 1.),\nvec4(251./255., 245./255., 239./255., 1.));\n\n// Amount of colors in the palette\n// Changing this is not recommended\nconst int colors = int(palette.length());\n\n// How much the dither effect spreads. By default it is set to decrease as the amount of colors increases.\n// Set to 0 to disable the dithering effect for flat color areas.\nconst float dither_spread = 1./float(colors);\n\n// Precomputed threshold map for dithering\nconst mat4x4 threshold = mat4x4(0., 8., 2., 10., \n                                12., 4., 14., 6.,\n                                3.,11.,1.,9.,\n                                15.,7.,13., 5.);\n\n// Chooses a color from the palette based on the current luminance\nvec4 applyPalette(float lum)\n{\n    lum = floor(lum * float(colors));\n    return palette[int(lum)];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // https://luka712.github.io/2018/07/01/Pixelate-it-Shadertoy-Unity/\n    float pixelSizeX = 1.0 / iResolution.x;\n    float pixelSizeY = 1.0 / iResolution.y;\n    float cellSizeX = pow(2., float(pixel_scale)) * pixelSizeX;\n    float cellSizeY = pow(2., float(pixel_scale)) * pixelSizeY;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Convert pixel coordinates to cell coordinates\n    float u = cellSizeX * floor(uv.x / cellSizeX);\n    float v = cellSizeY * floor(uv.y / cellSizeY);\n    \n    // get pixel information from the cell coordinates\n    vec4 col = texture(iChannel0, vec2(u,v));\n    \n    // https://en.wikipedia.org/wiki/Ordered_dithering\n    int x = int(u / cellSizeX) % 4;\n    int y = int(v / cellSizeY) % 4;\n    col.r = col.r + (dither_spread * ((threshold[x][y]/16.) -.5));\n    col.g = col.g + (dither_spread * ((threshold[x][y]/16.) -.5));\n    col.b = col.b + (dither_spread * ((threshold[x][y]/16.) -.5));\n    col.r = floor(col.r * float(colors-1) + .5)/float(colors-1);\n    col.g = floor(col.g * float(colors-1) + .5)/float(colors-1);\n    col.b = floor(col.b * float(colors-1) + .5)/float(colors-1);\n    \n    // Calculate luminance\n    float lum = (0.299*col.r + 0.587*col.g + 0.114*col.b);\n    \n    // Apply the new color palette\n    col = applyPalette(lum);\n\n    // Output to screen\n    fragColor = vec4(col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}