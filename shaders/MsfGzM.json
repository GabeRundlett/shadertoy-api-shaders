{
    "Shader": {
        "info": {
            "date": "1368753476",
            "description": "Inspired by Nautilus. An experiment on how far I could go in just 280 characters, the size of 2 tweets.\n\nMore info: [url]http://iquilezles.org/articles/derivative/derivative.htm[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "MsfGzM",
            "likes": 113,
            "name": "Two Tweets (244 chars)",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "distancefield",
                "tweet",
                "sizecoding",
                "size"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 46572
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n\n//---------------------\n// 255 chars\n//---------------------\n\n#define f (length(cos(o)+.05*cos(9.*o.y*o.x)-.1*cos(9.*(.3*o.x-o.y+o.z)))-1.)\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    vec3 d = .5-vec3(p,1)/iResolution.x, o = d;\n        \n    //for( p.y=0.,o.z=iTime; p.y++<2e2; o+=f*d );\n    for( p.y=2e2,o.z=iTime; p.y-->0.; o+=f*d );\n    \n    o -= d;    p.x = f;\n    o += d-.6; p.y = f;\n    \n    c = (p.yxxx+p.yyxx)*exp(.2*(iTime-o.z));\n}\n\n\n/*\n//---------------------\n// 244 chars (can't publish, infinite loop at some resolutions)\n//---------------------\n\n#define f (length(cos(o)+.05*cos(9.*o.y*o.x)-.1*cos(9.*(.3*o.x-o.y+o.z)))-1.)\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    vec3 d = .5-vec3(p,1)/iResolution.x, o = d;\n    \n    for( o.z=iTime; f>.01; o+=f*d );\n    \n    o -= d;    p.x = f;\n    o += d-.6; p.y = f;\n    \n    c = (p.yxxx+p.yyxx)*exp(.2*(iTime-o.z));\n}\n*/\n\n/*\n//---------------------\n// 261 chars (-3 by Fabryce)\n//---------------------\n\nfloat f( vec3 p )\n{ \n\tp.z += iTime;\n    return length(      cos(p)\n                  + .05*cos(9.*p.y*p.x)\n                  - .1 *cos(9.*(.3*p.x-p.y+p.z))\n                  ) - 1.; \n}\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    vec3 d = .5-vec3(p,1)/iResolution.x, o = d;\n    \n    for( c=vec4(0,1,2,0); c.w++<2e2; o+=f(o)*d );\n    \n    c = abs( f(o-d)*c + f(o-.6)*c.zyxw )*(1.-.1*o.z);\n}\n/*\n//---------------------\n// 265 chars\n//---------------------\n\nfloat f( vec3 p )\n{ \n\tp.z += iTime;\n    return length(      cos(p)\n                  + .05*cos(9.*p.y*p.x)\n                  - .1 *cos(9.*(.3*p.x-p.y+p.z))\n                  ) - 1.; \n}\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    vec3 d = .5-vec3(p,1)/iResolution.x, o = d;\n    \n    for( c=vec4(0,1,2,0); c.w<256.; c.w++ ) o += f(o)*d;\n    \n    c = abs( f(o-d)*c + f(o-.6)*c.zyxw )*(1.-.1*o.z);\n}\n*/\n\n\n/* \n//---------------------\n// 268 chars\n//---------------------\n\nfloat f( vec3 p )\n{ \n\tp.z += iTime;\n    return length(      cos(p)\n                  + .05*cos(9.*p.y*p.x)\n                  - .1 *cos(9.*(.3*p.x-p.y+p.z))\n                  ) - 1.; \n}\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    vec3 d = .5-vec3(p,1)/iResolution.x, o = d;\n    \n    for( int i=0; i<256; i++ )\n        o += f(o)*d;\n        \n    c = vec4(0,1,2,3);\n    c = abs( f(o-d)*c + f(o-.6)*c.zyxw )*(1.-.1*o.z);\n}\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}