{
    "Shader": {
        "info": {
            "date": "1581713266",
            "description": "draw ray Red-Green by dragging the mouse.\ndraw ray Pink-Cyan clamped to box",
            "flags": 0,
            "hasliked": 0,
            "id": "WldSWj",
            "likes": 7,
            "name": "clamp ray to box",
            "published": 3,
            "tags": [
                "tuto",
                "clamp",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 352
        },
        "renderpass": [
            {
                "code": "#define S(v) smoothstep( s*1.5/R.y, 0., v ) // for antialiasing\n\nfloat line(vec2 p, vec2 a,vec2 b) { // draw line. https://www.shadertoy.com/view/llySRh\n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n    return length(p - b * h);                         // dist to segment\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O-=O;\n    float s = 3.;                                    // number of grid rows\n    vec2 R = iResolution.xy, V, P0,P1,\n         U = s*u/R.y,\n        M0 = iMouse.z > 0. ? s*iMouse.zw/R.y : s* .5*R/R.y, \n         M = iMouse.z > 0. ? s*iMouse.xy/R.y : s*(.5+.4*cos(iTime+vec2(0,11))),\n        F0 = fract(M0)*2. - 1.,                      // mouse0 cell local coords\n         D = normalize(M-M0);                        // ray direction\n    \n    O.ra += S( length(M0-U) -.07 );                  // draw mouse from, to\n    O.ga += S( length(M -U) -.07 );                  // ( 2 dots + line )\n    if (M0.x>0.) O += (1.-O.a)* S( line(U,M0,M) );   // NB: lines blended behind dots\n    \n    // compute intersection M0+s.kD  with box [-1,1]Â²  (s = + or - )\n#define box(s) (  V = ( sign(D) - s F0 ) / D,  \\\n                  M0 + s min(V.x,V.y) *D/2.    )\n                 // NB: if D[i] = 0., should use V[1-i]\n    P0 = box(+);                                     // forward box intersection\n    P1 = box(-);                                     // backward box intersection\n    O.bga += S( length(P0-U) -.04 ),\n    O.bra += S( length(P1-U) -.04 ),                 // draw ( 2 dots + line )\n    O.b   += (1.-O.a)* S( line(U,P0,P1) -.015 );\n\n    V = S(abs(fract(U+.5)-.5));                      // draw grid\n    O += (1.-O.a)* .5* max(V.x,V.y);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}