{
    "Shader": {
        "info": {
            "date": "1612054838",
            "description": "I tried creating an SDF of a guy (the mesh was described as being a cartoonish\nmobster) but the neural network disagreed and I ended up with this.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlcBzr",
            "likes": 3,
            "name": "Neural Knight - Test",
            "published": 3,
            "tags": [
                "guy",
                "ai",
                "neuralnetwork",
                "siren",
                "knight",
                "meshtosdf",
                "mobster"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "/*\nTrying out blackle's mesh to SDF siren network notebook.\nMesh source: https://people.sc.fsu.edu/~jburkardt/data/obj/al.obj\nGround truth: https://people.sc.fsu.edu/~jburkardt/data/obj/al.png\n\nI tried using it to create an SDF of a guy (the mesh was described as being a cartoonish\nmobster) but the neural network disagreed and I ended up with this.\n\nIn case you are interested here's my copy of the notebook:\nhttps://colab.research.google.com/drive/1zdP-LymbnhIzhxOEdZx39C0GBr4AzbFU?authuser=1#scrollTo=O2uKIwI5chcp\n*/\n\n// Smooth abs() by ollj (https://www.shadertoy.com/view/Ws2SDK):\n#define sabs(x, k) mix(0.5 / k * x * x + k * 0.5, abs(x), step(0.0, abs(x) - k))\n\nfloat sdNeuralGuy(in vec3 p) {\n    // The SDF is undefined outside the unit sphere\n    if (length(p) > 1.1) {\n        return length(p) - 0.9;\n    }\n\n    p = vec3(p.z, -sabs(p.x, 0.02), p.y);\n    vec4 f0_0=sin(p.y*vec4(1.10,4.23,.31,-.47)+p.z*vec4(.61,-1.66,-.70,-1.52)+p.x*vec4(-3.05,.39,2.67,-3.37)+vec4(4.47,-4.20,6.87,-1.76));\n    vec4 f0_1=sin(p.y*vec4(2.13,1.71,-1.55,3.30)+p.z*vec4(-2.24,1.68,3.70,2.21)+p.x*vec4(-.65,2.93,1.02,-2.82)+vec4(-1.42,2.31,5.44,6.00));\n    vec4 f0_2=sin(p.y*vec4(-.15,-3.64,3.45,3.88)+p.z*vec4(-1.10,2.45,-1.97,1.96)+p.x*vec4(-1.78,2.13,-1.37,.82)+vec4(.59,-3.16,-5.44,6.75));\n    vec4 f0_3=sin(p.y*vec4(-.10,1.31,-2.10,-2.22)+p.z*vec4(-1.61,3.93,.20,.20)+p.x*vec4(-2.34,-2.20,3.68,.42)+vec4(2.89,5.78,-.56,.59));\n    vec4 f1_0=sin(mat4(-.59,-.39,-.05,-.37,.50,-.22,-.48,-.36,-.41,-.68,.31,.12,-.33,.36,-.61,-.76)*f0_0+\n        mat4(-.40,-.32,.35,.04,-.22,.77,-.11,-.32,-.18,-.72,-.25,-.34,.25,-.09,-.11,.56)*f0_1+\n        mat4(.14,-.34,.47,-.84,.69,-.60,.06,-.49,-.51,.27,.85,.48,.74,.01,.17,.75)*f0_2+\n        mat4(-1.56,-.69,1.26,-.58,-.57,-.43,.29,.04,-.20,-.30,.50,.25,-.40,.26,-.01,-.33)*f0_3+\n        vec4(-2.24,-1.05,.67,.83))/1.0+f0_0;\n    vec4 f1_1=sin(mat4(.37,.05,.36,-.23,.43,.69,.93,-.48,-.09,-.11,.02,.39,.75,-.09,-.31,-.27)*f0_0+\n        mat4(.29,-.50,.45,-.46,1.19,.01,.46,-.13,-.32,.15,-.17,.11,.15,-.13,-.41,-.02)*f0_1+\n        mat4(.05,.59,.62,-.08,.60,-.65,.15,-.47,.14,.84,-.29,-.39,-.39,-.59,-.60,-.06)*f0_2+\n        mat4(-.73,-.17,-.01,-.02,-.18,.53,-.06,-.75,-.03,-.29,-.73,.51,.52,.15,-.20,.87)*f0_3+\n        vec4(-1.78,2.03,-.74,-1.06))/1.0+f0_1;\n    vec4 f1_2=sin(mat4(.13,-.72,-.14,.23,-.32,.09,.71,.57,-.24,1.16,-.02,-.49,-.80,-.55,.16,-.02)*f0_0+\n        mat4(.34,-.57,-.07,-.24,-.18,-.81,-.08,.74,-.06,-.17,.46,.60,-.15,-.13,.40,-.03)*f0_1+\n        mat4(-.26,.58,1.51,-.91,.11,-1.22,.32,.47,-.31,.56,-.36,-.20,.20,.08,.63,.12)*f0_2+\n        mat4(.16,1.05,-.57,-.36,-.14,.05,.61,.29,.05,.10,-.10,-.48,-.28,-.26,.55,-.18)*f0_3+\n        vec4(-.45,.89,1.70,2.01))/1.0+f0_2;\n    vec4 f1_3=sin(mat4(.08,-.56,.20,-.09,-.31,.15,.14,-.29,.28,.03,.23,.11,-.61,-.51,-.33,.36)*f0_0+\n        mat4(.63,-.92,-.20,-.13,.16,.17,-.38,.32,.31,.27,.28,-.51,-.11,-.61,-.11,-.26)*f0_1+\n        mat4(-.46,-.07,.82,1.14,.15,-.30,.93,.39,.57,.42,-.47,.21,-.34,-.13,-.06,-.57)*f0_2+\n        mat4(.22,-.18,-.31,.64,.04,-.33,.94,-.61,.17,.04,.44,.53,.17,-.24,.45,-.15)*f0_3+\n        vec4(-.20,-.22,2.08,-.74))/1.0+f0_3;\n    vec4 f2_0=sin(mat4(.02,-.45,.49,-.11,1.20,-.02,-.52,-1.08,-.09,-.19,.95,.63,.33,-.79,-.57,-1.00)*f1_0+\n        mat4(-.16,-.04,-.85,.42,-.79,-.57,.05,-.04,-.68,-.56,.16,-.71,-.23,-.12,-.35,-.45)*f1_1+\n        mat4(.91,-1.09,.00,-1.45,.91,-.04,.01,-.73,-1.51,.24,.26,-.20,-.49,.83,-.51,.79)*f1_2+\n        mat4(.38,.38,-1.29,.00,1.00,.11,-.89,-.67,1.47,.60,-.16,.62,-.60,.09,.05,.21)*f1_3+\n        vec4(.17,-.97,-1.08,3.60))/1.4+f1_0;\n    vec4 f2_1=sin(mat4(-.42,.03,.26,.01,1.28,.52,1.16,.14,.12,-.14,-.21,-.46,.01,-.40,-1.97,-.41)*f1_0+\n        mat4(.20,-.33,-.45,-.31,.23,-.11,-.46,-.09,.49,.57,-.30,-.05,.90,-.08,-.25,-.21)*f1_1+\n        mat4(-.17,-.61,-.56,1.13,.00,.22,-.08,-.43,.25,.02,-.57,-1.04,.80,-.37,.44,1.12)*f1_2+\n        mat4(1.08,-.13,.50,1.64,.41,.15,1.11,-.10,-.14,-.21,.93,-.29,-.21,-.67,-.56,.14)*f1_3+\n        vec4(-.56,-1.73,-.20,.88))/1.4+f1_1;\n    vec4 f2_2=sin(mat4(.09,.34,.07,-.65,-.63,-.78,-1.35,.63,.70,.87,-.13,.72,-.29,-.87,-2.10,-.30)*f1_0+\n        mat4(-.24,.26,1.39,.81,-.57,-.49,-.68,.38,.00,-.68,-.77,-.90,-.42,-.16,.58,.29)*f1_1+\n        mat4(-.95,-.26,-1.00,-1.50,-.77,.21,.05,.20,.75,-.70,-.24,.35,1.34,.35,.06,1.01)*f1_2+\n        mat4(-.15,.02,.05,1.41,.01,.36,.06,.17,-.44,.12,.36,-.17,1.12,-.94,.82,.29)*f1_3+\n        vec4(1.27,-.34,1.88,2.82))/1.4+f1_2;\n    vec4 f2_3=sin(mat4(-.13,.23,.41,-.10,.78,.03,-.30,-.17,.52,.69,.23,.19,2.79,.57,.03,.19)*f1_0+\n        mat4(-1.54,-.42,-1.12,.57,.57,-.62,-.04,-.88,.22,.49,.04,-.42,-1.39,-.03,-.27,.03)*f1_1+\n        mat4(2.55,1.16,-.23,.27,.40,-.15,.01,.65,-.03,.47,.60,-.59,-1.38,.90,-.52,-.59)*f1_2+\n        mat4(-.65,-.81,-1.18,.70,-.47,.53,-.06,-.01,-.87,-.25,-.50,.27,-.25,.55,-.20,.45)*f1_3+\n        vec4(.97,1.87,-.95,3.89))/1.4+f1_3;\n    return dot(f2_0,vec4(.05,-.09,-.07,-.06))+\n        dot(f2_1,vec4(-.07,-.09,-.03,-.08))+\n        dot(f2_2,vec4(-.07,-.05,-.05,.03))+\n        dot(f2_3,vec4(.03,-.12,.08,-.06))+\n        0.222;\n}\n\nfloat mapScene(in vec3 p) {\n    float c = cos(iTime), s = sin(iTime);\n    p.xz *= mat2(c, -s, s, c);\n    return sdNeuralGuy(p);\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 3.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    vec3 p;\n    bool hit = false;\n    float t = 0.0;\n    for (int i=0; i < 100; i++) {\n        p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            hit = true;\n            break;\n        }\n\n        if (t > 10.0) {\n            break;\n        }\n\n        t += d;\n    }\n\n    if (hit) {\n        vec3 n = getNormal(p);\n        vec3 l = vec3(-0.58, 0.58, 0.58);\n        fragColor.rgb += max(0.2, dot(n, l));\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}