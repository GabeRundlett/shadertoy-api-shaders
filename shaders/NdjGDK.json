{
    "Shader": {
        "info": {
            "date": "1617978244",
            "description": "License CC0: The Decepticons\nFelt like creating a distance field for the decepticons logo\nThe distance field isn't perfect but the result came out kind of nice anyway",
            "flags": 64,
            "hasliked": 0,
            "id": "NdjGDK",
            "likes": 8,
            "name": "The Decepticons",
            "published": 3,
            "tags": [
                "2d",
                "decepticons"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 421
        },
        "renderpass": [
            {
                "code": "// License CC0: The Decepticons\n//  Felt like creating a distance field for the decepticons logo\n//  The distance field isn't perfect but the result came out kind of nice anyway\n\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define TTIME           (TAU*TIME)\n#define PSIN(x)         (0.5+0.5*sin(x))\n#define L2(x)           dot(x, x)\n\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c) {\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// https://iquilezles.org/articles/smin\nfloat pmin(float a, float b, float k) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat pabs(float a, float k) {\n  return pmax(a, -a, k);\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat isosceles(vec2 p, vec2 q) {\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat plane(vec2 p, vec3 plane) {\n  return dot(p, plane.xy) + plane.z;\n}\n\nvec2 refl(vec2 p, vec2 n) {\n  p -= n*min(0.0, dot(p, n))*2.0;\n  return p;\n}\n\nvec2 irefl(vec2 p, vec2 n) {\n  p -= n*max(0.0, dot(p, n))*2.0;\n  return p;\n}\n\nvec2 decepticon(vec2 p) {\n  p.x = abs(p.x);\n  \n  vec2 p0 = p;\n  p0 -= vec2(0.77, -0.68);\n  p0 = irefl(p0, normalize(vec2(1.0, 1.275)));\n  float d0 = plane(p0, vec3(normalize(vec2(-1., 2.375)), 0.0));\n\n  vec2 p1 = p;\n  p1 -= vec2(0.8, 0.68);\n  p1 = irefl(p1, normalize(vec2(1.4, 1.0)));\n  float d1 = plane(p1, vec3(normalize(vec2(-1., 2.9)), 0.0));\n\n\n  vec2 p2 = p;\n  p2 -= vec2(0.7, 0.085);\n  p2 *= ROT(2.11);\n  float d2 = isosceles(p2, vec2(0.125, 0.65));\n\n  vec2 p3 = p;\n  float d3 = plane(p3, vec3(normalize(vec2(-1.29, 1.0)), 0.635));\n  d3 = abs(d3)- 0.029;\n\n  vec2 p4 = p;\n  p4 -= vec2(0.225, 0.115);\n  p4 = refl(p4, normalize(vec2(1.0, 1.72)));\n  float d4 = plane(p4, vec3(normalize(vec2(-5.0, 1.0)), 0.0));\n  float d4_ = d4;\n  d4 = abs(d4)- 0.025;\n\n  vec2 p5 = p;\n  p5 -= vec2(0.0, 0.0395);\n  float d5 = plane(p5, vec3(normalize(vec2(-1.0, 2.8)), 0.0));\n  d5 = abs(d5) - 0.025;\n  d5 = max(d5, d4_);\n\n  vec2 p6 = p;\n  p6 -= vec2(0.0, 0.196);\n  float d6 = plane(p6, vec3(normalize(vec2(-1.0, 2.8)), 0.0));\n  d6 = abs(d6) - 0.025;\n  d6 = max(d6, d4_);\n\n  vec2 p7 = p;\n  p7 -= vec2(0.61, 0.0);\n  float d7 = plane(p7, vec3(normalize(vec2(-3.7, 1.0)), 0.0));\n  d5 = max(d5, -d7);\n  d6 = max(d6, -d7);\n\n  vec2 p8 = p;\n  p8 -= vec2(0.085, 0.585);\n  p8 = irefl(p8, normalize(vec2(2.075, 1.0)));\n  float d8 = -plane(p8, vec3(normalize(vec2(0.0, 1.0)), 0.0));\n\n  vec2 p9 = p;\n  p9 -= vec2(0.00, 0.155);\n  float d9 = isosceles(p9, vec2(0.085, 0.29));\n\n  float d = -d0; \n  d = max(d, d1);\n  d = min(d, -d4_);\n  d = max(d, -d2);\n  d = max(d, -d3);\n  d = max(d, -d4);\n  d = max(d, -d5);\n  d = max(d, -d6);\n  d = max(d, -d8);\n  d = max(d, -d9);\n  return vec2(d0, d);\n}\n\nfloat df(vec2 p) {\n  const float z = 0.9;\n  vec2 d0 = decepticon(p/z);\n  return -d0.y*z;\n}\n\nfloat hf(vec2 p) {\n  float d = df(p);\n  float height = 0.5*(smoothstep(-0.05, 0.01, d));\n  return pmax(height, 0.5, 0.125);\n}\n\nfloat height(vec2 p) {\n  return tanh_approx(hf(p));\n}\n\nvec3 normal(vec2 p) {\n  vec2 eps = vec2(4.0/RESOLUTION.y, 0.0);\n  \n  vec3 n;\n  \n  n.x = height(p - eps.xy) - height(p + eps.xy);\n  n.y = 2.0*eps.x;\n  n.z = height(p - eps.yx) - height(p + eps.yx);\n  \n  return normalize(n);\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(1.0/2.2)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // saturation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  const vec3 up  = vec3(0.0, 1.0, 0.0);\n  const vec3 lp1 = 1.0*vec3(1.0, 1.25, 1.0);\n  const vec3 lp2 = 1.0*vec3(-1.0, 2.5, 1.0);\n\n  float aa = 2.0/RESOLUTION.y;\n\n  float hh = PSIN(sqrt(0.5)*TTIME/60.0);\n  float l  = length(p);\n  \n  float d  = df(p);\n  float h  = height(p);\n  vec3  n  = normal(p);\n\n  vec3 ro = vec3(0.0, mix(1.0, 10.0, PSIN(TTIME/30.0)), 0.0);\n  vec3 pp = vec3(p.x, 0.0, p.y);\n\n  vec3 po = vec3(p.x, h, p.y);\n  vec3 rd = normalize(po - ro);\n\n  // Lots of random choices below from an old shader of mine\n  vec3 ld1 = normalize(lp1 - po);\n  vec3 ld2 = normalize(lp2 - po);\n\n  vec3 hsv = vec3(hh+mix(0.6, 0.9, PSIN(TIME*0.1-10.0*l+(p.x+p.y))), tanh_approx(h*h*1.0), tanh_approx(1.0*h+.1));\n  hsv.yz = clamp(hsv.yz, 0.0, 1.0);\n  vec3 baseCol1 = hsv2rgb(hsv);\n  vec3 baseCol2 = sqrt(baseCol1.zyx);\n  vec3 matCol   = 1.0-baseCol1*baseCol2;\n \n  float diff1 = max(dot(n, ld1), 0.0);\n  float diff2 = max(dot(n, ld2), 0.0);\n\n  vec3  ref   = reflect(rd, n);\n  float ref1  = max(dot(ref, ld1), 0.0);\n  float ref2  = max(dot(ref, ld2), 0.0);\n\n  baseCol1 *= mix(0.0, 4.0, 1.0/L2(lp1 - po));\n  baseCol2 *= mix(0.0, 3.0, 1.0/L2(lp2 - po));\n\n  vec3 col = vec3(0.0);\n  const float basePow = 1.25;\n  col += 1.00*matCol*baseCol1*mix(0.1, 1.0, pow(diff1, 4.0))*0.5;\n  col += 0.50*matCol*baseCol2*mix(0.1, 1.0, pow(diff2, 2.0))*0.5;\n  col = pow(col, vec3(1.25));\n  col += 4.0*baseCol1*pow(ref1, 20.0);\n  col += 2.0*baseCol2*pow(ref2, 10.0);\n\n  float gd = d;\n  const float glow_lw = 0.025;\n  gd = abs(gd)-glow_lw*2.0;\n  gd = abs(gd)-glow_lw;\n  vec3 glowCol = vec3(1.0);\n  glowCol = mix(baseCol1, glowCol, max(dot(ld1, up), 0.0));\n  glowCol = mix(baseCol2, glowCol, max(dot(ld2, up), 0.0));\n  vec3 finalGlowCol = glowCol*exp(-20.0*max(gd, 0.0));\n  finalGlowCol = mix(finalGlowCol, glowCol, smoothstep(-aa, aa, -d+glow_lw));\n  \n  float tuneOut = sqrt(q.x+(1.0-q.y))*0.85;\n  col = clamp(col, 0.0, 1.0);\n  col = mix(col, vec3(0.0), smoothstep(-aa, aa, -d));\n\n  col -= 0.5*0.125*tuneOut*finalGlowCol;\n  \n  col += vec3(0.125*0.75*((1.0-q.x)+q.y), 0.0, 0.0)*length(p);\n  p.x = abs(p.x);\n  col += smoothstep(10.0, 29.0, TIME)*vec3(mix(0.125, 0.5, PSIN(TTIME/10.0)), 0.0, 0.0)*exp(-9.0*(length(p-vec2(0.25, -0.15))));\n\n  vec3 dcol = mix(vec3(0.0), vec3(0.75), smoothstep(-aa, aa, d));\n  col = mix(dcol, col, smoothstep(5.0, 10.0, TIME));\n\n  col = postProcess(col, q);\n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n\n  vec3 col = vec3(0.0);\n  col = effect(p, q);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 26573,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/gmm/ugress-decepticons"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}