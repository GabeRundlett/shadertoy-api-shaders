{
    "Shader": {
        "info": {
            "date": "1490998804",
            "description": "area light trace",
            "flags": 0,
            "hasliked": 0,
            "id": "XdXcRl",
            "likes": 15,
            "name": "area light trace",
            "published": 3,
            "tags": [
                "light",
                "area",
                "trace"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 962
        },
        "renderpass": [
            {
                "code": "//Ethan Alexander Shulman 2017\n\n\n//returns light intensity, x = diffuse, y = specular\nvec2 areaLight(vec3 relativePos, vec3 rayDirection, vec3 size, float specularRoughness) {\n    float light = 0.,\n          lightDistance = length(max(abs(relativePos)-size,0.));\n    \n    relativePos += rayDirection*lightDistance;\n    \n    for (int i = 0; i < 3; i++) {\n        if (max(light,specularRoughness) > 1.0-1e-4) break;\n        \n        float dst = length(max(abs(relativePos)-size,0.));\n        light += 1.0/(dst+1.0);\n        \n        relativePos += rayDirection*dst;\n    }\n    \n    light = min(1., light);\n    float diffuseFalloff = 0.1/(lightDistance/dot(size,vec3(1.)));\n    return vec2(pow(light,1.0/128.0)*diffuseFalloff,\n                pow(light,mix(4.0,1.0/128.0,specularRoughness))*mix(1.0,diffuseFalloff,specularRoughness*specularRoughness));\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy*2.-iResolution.xy) / iResolution.y;\n\tvec3 rd = normalize(vec3(uv,1.)),\n        rp = vec3(0.,0.,-45.);\n    \n    \n    vec3 lightSize = vec3(sin(iTime*0.4),cos(iTime*.6),sin(iTime*0.7))*5.5+5.75;\n    \n    //reflection plane\n    float refl = (rp.y-10.)/rd.y,\n        reflLight = 0.;\n    if (refl > 0.) {\n        vec3 reflDir = reflect(rd, vec3(0,-1,0));\n        vec3 hp = rp+rd*refl;\n    \n    \tvec2 lg = areaLight(hp,reflDir,lightSize,0.5);\n        reflLight = lg.x*0.5+lg.y*0.5;\n    }\n    \n    //direct light\n    fragColor = areaLight(rp,rd,\n                          lightSize,\n                          0.).yyyy+reflLight;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}