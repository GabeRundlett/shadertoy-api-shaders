{
    "Shader": {
        "info": {
            "date": "1593203440",
            "description": "Attempt at creating fast, \"realistic\" water. Could  look a whole lot better with some tweaking. Some scaling would help solve the repetition issues that comes with not using any noise for the waves. The whole thing could be optimez a lot further.",
            "flags": 48,
            "hasliked": 0,
            "id": "ttXyWS",
            "likes": 9,
            "name": "Fast simple gerstner water",
            "published": 3,
            "tags": [
                "sea",
                "water",
                "ocean"
            ],
            "usePreview": 1,
            "username": "dagbrynildsentholander",
            "viewed": 996
        },
        "renderpass": [
            {
                "code": "float pi = 3.14159265359;\nvec3 sunDir = normalize(vec3(1.5, 0.2, 0.0));\nvec3 sunColor = vec3(1, .6, .3)*3.0;\n\n\n//vec4[] waves = vec4[] (vec4(0.0, 1.0, 0.5, 1.4));\n\nvec4[] waves = vec4[] (vec4(1.0, 0.0, 1.0, 6.4),\n                      vec4(1.0, -0.2, 0.5, 3.6),\n                      vec4(1.0, 0.2, 0.3, 1.2),\n                      vec4(-0.8, -0.1, 0.15, 0.8));\n\nvoid Rx(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(1, 0, 0),\n            \t\tvec3(0, cos(theta), -sin(theta)),\n            \t\tvec3(0, sin(theta), cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Ry(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), 0, sin(theta)),\n            \t\tvec3(0, 1, 0),\n            \t\tvec3(-sin(theta), 0, cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Rz(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), -sin(theta), 0),\n            \t\tvec3(sin(theta), cos(theta), 0),\n            \t\tvec3(0, 0, 1)\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nfloat waveFunction(float x)\n{\n    return sin(x-cos(x)/pi);\n}\n\nfloat waveDerivate(float x)\n{\n    return (cos(x - cos(x)/pi)*(pi + sin(x)))/pi;\n}\n\nvec4 oceanSurface(vec3 p)\n{\n    float base = 1.0;\n    vec3 normal = vec3(0);\n    for(int i = 0; i < waves.length(); i++)\n    {\n        vec2 waveDir = normalize(waves[i].xy);\n        float t = (p.x * waveDir.x + p.z * waveDir.y +iTime)/waves[i].w;\n        base += waveFunction(t)*waves[i].z;\n        normal += cross(vec3(1.0-waveDir.x*waveDir.x*(waves[i].z*waveFunction(t)), waveDir.x*(waves[i].z*waveDerivate(t)),-waveDir.x*waveDir.y*(waves[i].z*waveFunction(t))),\n                       vec3(-waveDir.x*waveDir.y*(waves[i].z*waveFunction(t)), waveDir.y*(waves[i].z*waveDerivate(t)),1.0-waveDir.x*waveDir.x*(waves[i].z*waveFunction(t))));\n    }\n    return vec4(base-p.y, -normalize(normal));\n}\n\nfloat ray(vec3 ro, vec3 rd, float mint, float maxt, float delta) \n{\n    float t = 0.0;\n    while(t<maxt)\n    {\n        if(oceanSurface(ro+rd*t).x > 0.0)\n        {\n                return t;\n        }\n        t += delta;\n        delta*=1.002;\n    }\n    return t;\n}\n\nvec3 drawSky(vec3 ro, vec3 rd)\n{\n    vec3 base = vec3(clamp(0.7-(rd.y*0.5), 0.0, 1.0), clamp(0.75-(rd.y*0.5), 0.0, 1.0), clamp(0.97-(rd.y*0.5), 0.0, 1.0));\n    base += pow(max(dot(rd, normalize(sunDir)), 0.0), 8.0)*sunColor*0.15;\n    base += pow(max(dot(rd, normalize(sunDir)), 0.0), 1024.0)*sunColor;\n    float clouds = 0.0;\n    vec2 uv = rd.xz/max(rd.y, 0.00001) + iTime/5.0;\n    clouds += texture(iChannel1, uv/50.0).x*0.75;\n    clouds += texture(iChannel1, uv/25.0).x*0.25;\n    clouds += texture(iChannel1, uv/12.0).x*0.15;\n    clouds += texture(iChannel1, uv/8.0).x*0.1;\n    clouds = min(clouds, 1.0);\n    base = mix(base, mix(vec3(0.5, 0.5, 0.6), sunColor, (1.0-clouds)*(dot(rd, sunDir)+1.0)/2.0),\n               pow(clouds, 4.0));\n    return base;\n}\n\nvec3 lighting(vec3 p, vec3 rd, vec3 n)\n{\n    vec3 result = vec3(0);\n    float specularStrength = 1.;\n\n    vec3 lightDir = normalize(sunDir);\n\n    // fresnel as suggested by blackle\n    \n    float fresnel = 1.0-abs(dot(rd,n))*0.98;\n    fresnel = pow(fresnel, 2.0);\n    \n    // specular\n    vec3 reflectDir = reflect(lightDir, n);\n    float spec = pow(max(dot(rd, reflectDir), 0.0), 512.);\n    vec3 specular = specularStrength * spec*sunColor*fresnel;  \n    \n    // reflection\n    vec3 reflRd = reflect(rd, n);\n    vec3 reflection = drawSky(p, reflRd)*fresnel;\n\n    // refraction //clamp(dot(sunDir, -rd), 0.0, 1.0)\n    vec3 refraction = mix(vec3(0.4, 0.5, 0.6),vec3(0.0, 0.35, 0.3)*sunColor,clamp(dot(sunDir, -n), 0.0, 1.0)*clamp(dot(sunDir, rd), 0.0, 1.0));\n    refraction = mix(refraction, vec3(0.0, 0.025, 0.05), clamp(-rd.y, 0.0, 0.8));\n    result += mix(reflection, refraction, max(dot(n, -rd), 0.0))+specular;\n\n    return result;\n}\n\nvec3 doFog(vec3 rgb, vec3 ro, vec3 rd, float dist)\n{\n    return mix(rgb, drawSky(ro, rd), pow(dist/200., 5.));\n}\n\nvec3 finalColor(vec3 ro, vec3 rd, float rayResult, vec3 n)\n{\n    vec3 col = lighting(ro+rd*rayResult, rd, n);\n    return doFog(col, ro, rd, rayResult);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord -  iResolution.xy*.5)/iResolution.y;\n\n    // Camera setup\n    vec3 camRight = vec3(1, 0, 0);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camForward = vec3(0, 0, 1);\n    \n    // Camera rotation\n    vec3 camRot = texture( iChannel0, iResolution.xy).xyz + vec3(0,1.5,0);\n    Rx(camRight, camUp, camForward, camRot.x);\n    Ry(camRight, camUp, camForward, camRot.y);\n    Rz(camRight, camUp, camForward, camRot.z);\n    \n    // Camera movement\n    vec3 ro=texture( iChannel0, vec2(0)).xyz+vec3(0, 8., -5);\n    \n    // Ray\n    vec3 rd = normalize(camForward+(camRight*1.5*uv.x)+(camUp*1.5*uv.y));\n    float rayResult = ray(ro, rd, .1, 200., 0.1);\n    vec3 p = ro+rayResult*rd;\n    vec3 n = oceanSurface(p).yzw;\n\t\n    // Output to screen\n    if(rayResult==0.0)\n        fragColor = vec4(doFog(vec3(0), ro, rd, 100.), 1.);\n    else\n    {\n    \tvec3 col = finalColor(ro, rd, rayResult, n);\n    \t//fragColor = vec4(col,1.0);\n    \tfragColor = vec4(doFog(col, ro, rd, rayResult),1.0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat pi = 3.14159265359;\nvec2 lastNormMouse = vec2(0);\n//Key input taken from \"WASD movement\" by TekF (https://www.shadertoy.com/view/ldyGzW) \nconst int Key_A = 65; const int Key_B = 66; const int Key_C = 67; const int Key_D = 68; const int Key_E = 69;\nconst int Key_F = 70; const int Key_G = 71; const int Key_H = 72; const int Key_I = 73; const int Key_J = 74;\nconst int Key_K = 75; const int Key_L = 76; const int Key_M = 77; const int Key_N = 78; const int Key_O = 79;\nconst int Key_P = 80; const int Key_Q = 81; const int Key_R = 82; const int Key_S = 83; const int Key_T = 84;\nconst int Key_U = 85; const int Key_V = 86; const int Key_W = 87; const int Key_X = 88; const int Key_Y = 89;\nconst int Key_Z = 90;\n\nfloat ReadKeyInternal( int key, bool toggle )\n{\n\treturn textureLod( iChannel3, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ), 0.0 ).x;\n}\n\nfloat ReadKey( int key )\n{\n\treturn ReadKeyInternal(key,false);\n}\n\nfloat ReadKeyToggle( int key )\n{\n\treturn ReadKeyInternal(key,true);\n}\n\n\n\nvoid Rx(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(1, 0, 0),\n            \t\tvec3(0, cos(theta), -sin(theta)),\n            \t\tvec3(0, sin(theta), cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Ry(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), 0, sin(theta)),\n            \t\tvec3(0, 1, 0),\n            \t\tvec3(-sin(theta), 0, cos(theta))\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid Rz(inout vec3 v1, inout vec3 v2, inout vec3 v3, float theta)\n{\n    mat3 rm = mat3(\n        \t\t  \tvec3(cos(theta), -sin(theta), 0),\n            \t\tvec3(sin(theta), cos(theta), 0),\n            \t\tvec3(0, 0, 1)\n             \t  );\n    v1*=rm;\n    v2*=rm;\n    v3*=rm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    // Normalized mouse coordinates (from 0 to 1)\n    vec2 normMouse = vec2(iMouse.xy/iResolution.xy-.5);\n    \n    // Camera setup\n    vec3 camRight = vec3(1, 0, 0);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camForward = vec3(0, 0, 1);\n    \n    // Camera rotation\n    //vec3 camRot = vec3(-normMouse.y*360., normMouse.x*360.+180., 0)/180.*pi;\n    vec3 camRot = texture(iChannel0, iResolution.xy).xyz;\n\n    if(iMouse.z>0.)\n    \tcamRot += vec3(-normMouse.y*iTimeDelta*180., normMouse.x*iTimeDelta*180., 0)/180.*pi;\n    Rx(camRight, camUp, camForward, camRot.x);\n    Ry(camRight, camUp, camForward, camRot.y);\n    Rz(camRight, camUp, camForward, camRot.z);\n    \n    // Camera movement\n    vec3 ro=texture( iChannel0, vec2(0.0)).xyz;\n    ro+=(ReadKey(Key_W)-ReadKey(Key_S))*camForward*iTimeDelta*3.;\n    ro+=(ReadKey(Key_D)-ReadKey(Key_A))*camRight*iTimeDelta*2.;\n    ro+=(ReadKey(Key_E)-ReadKey(Key_Q))*camUp*iTimeDelta*2.;\n    \n    if(uv.x<=.5)\n    {\n    \tfragColor = vec4(ro.xyz, 1.0);  \n    }\n    else\n    {\n    \tfragColor = vec4(camRot.xyz, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}