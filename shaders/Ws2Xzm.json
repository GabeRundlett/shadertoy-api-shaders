{
    "Shader": {
        "info": {
            "date": "1553280893",
            "description": "plays notes while circle intersects floor, look in Common for circle defines",
            "flags": 8,
            "hasliked": 0,
            "id": "Ws2Xzm",
            "likes": 4,
            "name": "audio from bouncing circles",
            "published": 3,
            "tags": [
                "2d",
                "circles",
                "sound",
                "audio",
                "bouncing"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 562
        },
        "renderpass": [
            {
                "code": "//Image - Draw circles and floor.\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    #define SCALE 4.\n    vec2 uv = AR(u)*SCALE;\n    float d = 1e7;\n    //circles\n    for (int i = 0; i < NCIRCLES; i++) d = min(d,length(CIRCLE_POSITION(i,iTime)-uv)-circles[i].radius);\n    //floor\n    d = min(d,abs(uv.y+1.1)-(.1-max(0.,abs(uv.x)-1.)));\n    //smooth drawing\n    o = vec4(1.-d*.4/SCALE*R.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Sound - Play notes while circle intersects floor, look in Common for circle defines.\n\nvec2 mainSound( in int samp,float t)\n{\n    float s = 0.;\n    for (int i = 0; i < NCIRCLES; i++) {\n        vec2 p = CIRCLE_POSITION(i,t);\n        s += sin(t*mix(circles[i].minFrequency,circles[i].maxFrequency,floor((p.x*.5+.5)*(circles[i].frequencyDivision+.99))/circles[i].frequencyDivision))*\n             clamp((-1.-p.y+circles[i].radius)*circles[i].volume/circles[i].radius,0.,1.);\n    }\n    return vec2(clamp(s,-1.,1.)*max(0.,1.-pow(max(abs(s)-.75,0.),2.)*2.));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "\n#define R iResolution\n#define AR(p) ((p*2.-R.xy)/R.y)\n\nstruct circle {\n    vec2 position,velocity;\n    float radius,minFrequency,maxFrequency,frequencyDivision,volume;\n};\n\n#define NCIRCLES 4\ncircle circles[NCIRCLES] = circle[](\ncircle(vec2(0),vec2(.4,6.),.1,2000.,4000.,10.,.7),\ncircle(vec2(0),vec2(2.,4.),.1,8000.,10000.,4.,.2),\ncircle(vec2(0),vec2(1.,3.),.2,2000.,4000.,2.,1.),\ncircle(vec2(0),vec2(2),.2,1000.,1500.,1.,3.)\n);\n\n//triangle wave function manually deals with negatives because fract/mod dont handle negatives on some platforms i believe?\nvec2 triwave(vec2 v) {\n    vec2 s = sign(v),\n        r = max(-s,0.)+s*fract(abs(v));\n    return r*2.-max(r*4.-2.,0.);\n}\n\n//stateless physics of circles bouncing with no gravity using triangle wave\n#define CIRCLE_POSITION(n,t) (triwave(circles[n].position+circles[n].velocity*t)*2.-1.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}