{
    "Shader": {
        "info": {
            "date": "1618832181",
            "description": "Bottom: noise isovalues are not equidistant.\nTop: produce isolines by adding intermediate isovalues depending on slope.",
            "flags": 16,
            "hasliked": 0,
            "id": "sdsXzB",
            "likes": 4,
            "name": "noise balanced isolines - subdiv",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "perlin"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 296
        },
        "renderpass": [
            {
                "code": "// Fork of \"test1: Noise balance\"           https://shadertoy.com/view/ssXXWN\n\n\n#define keyToggle(a) ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n#define hash(p )     ( 2.* fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123) - 1. )\n#define draw(v,d)      clamp(1. - abs( fract(v) - .5 ) / fwidth(d), 0.,1.)\n#define hue(v)       ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\n#define func( P )    ( mod(iTime,4.) > 2. ? perlin( .5*(P) ) : noise( P ) )\n//#define func( P )  ( keyToggle(32) ? perlin( .5*(P) ) : noise( P ) )\n#define grad(x,y)      dot( hash( i+vec2(x,y) ), f-vec2(x,y) )\n\nfloat noise( vec2 p )\n{\n    vec2 i = floor(p), f = fract(p), // u = f*f*(3.-2.*f);              // = smoothstep\n                                        u = f*f*f*( 10. +f*(6.*f-15.)); // better with derivatives\n    return mix( mix( grad(0,0), grad(1,0), u.x),\n                mix( grad(0,1), grad(1,1), u.x), u.y);\n}\n\nfloat perlin( vec2 U ) { // inspired from https://www.shadertoy.com/view/XdXGW8\n    float v = 0., s = .5;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    for( int i=0; i<3; i++, s/=2., U*=m )\n        v  += s * noise( U ); \n    return v;\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, eps = vec2(1e-3,0),\n         U = u / R.y,\n         P = 8.*U - vec2(0.,.5*iTime);\t\n    O-=O;\n\tfloat l, f = func(P), df;\n    if ( int(u.y) == int(R.y*.4) ) { O.r++; return; } // red separator\n    if ( U.y > .4 ) {\n     // l = exp2(floor(log2(2.*fwidth(P.x)/fwidth(f))));     // subvid amount (relative)\n        l = exp2(floor(log2(1./22./fwidth(f))));             // subvid amount (absolute)\n        O = vec4(.5+.5*sin(50.*l*f)); return; \n       df = fwidth(f);\n    // df = length( ( vec2( func(P + eps.xy), func(P + eps.yx) ) -f ) / eps.x )*fwidth(P.x);\n        l*=6.3; O += clamp(1. - .8*abs( fract(f*l) - .5 ) / df/l, 0.,1.); return; \n    } \n    else  f*=8.;\n    O += draw(f,f);                                               // draw isolines\n    O = sqrt(O);                                                  // to sRGB\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}