{
    "Shader": {
        "info": {
            "date": "1644681231",
            "description": "space filling curve (zigzag curve or z curve)",
            "flags": 0,
            "hasliked": 0,
            "id": "7tcXRj",
            "likes": 2,
            "name": "space filling curve",
            "published": 3,
            "tags": [
                "zcurve",
                "spacefillingcurve"
            ],
            "usePreview": 0,
            "username": "xnio94",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "//take 2D point (x,y) and liniearaz it as a 1D float\n//k is the precession for pixel precision it can be log2(resolution)+1\nfloat to1D(float x, float y, int k)\n{\n    float z=0.;\n    int n=2;\n    float xx=0.,yy=0.;\n    for(int i=0;i<k;i++){\n        z*=2.;  if(x-xx>=1./float(n)) {z+=1.; xx+=1./float(n);}\n        z*=2.;  if(y-yy>=1./float(n)) {z+=1.; yy+=1./float(n);}\n        n*=2;\n    }\n    z = z / pow(2.,float(2*k));\n    return z;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float z = to1D(uv.x,uv.y,10);\n    \n    float col = 0.; //sin(z*100.);//*pow(2.,iTime/10.);\n    \n    float r = .01;\n    z +=iTime/1000.;\n    col = smoothstep(r,r+.0001,fract(z*8.));\n    \n    \n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}