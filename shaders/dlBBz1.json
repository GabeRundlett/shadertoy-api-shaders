{
    "Shader": {
        "info": {
            "date": "1693756479",
            "description": "I've not done a lot of shader programming before so this may not be the most idiosyncratic or efficient way to implement this, but it works reasonably well.\nSize of the color channels of each pixel and height of the pixels can be adjusted via variables.",
            "flags": 2,
            "hasliked": 0,
            "id": "dlBBz1",
            "likes": 2,
            "name": "Adjustable pixel shader",
            "published": 3,
            "tags": [
                "2d",
                "postprocessing",
                "pixelshader"
            ],
            "usePreview": 1,
            "username": "dasbente",
            "viewed": 511
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int channelWidth = 1; // width of a single color channel in pixels\n    int channelHeight = 3; // height of color channels in pixels\n    int hGap = 1; // horizontal distance between two neighboring pixels\n    int vGap = 1; // vertical distance between two neighboring pixels\n\n    float columns = float(channelWidth * 3 + hGap);\n    float pixelHeight = float(channelHeight + vGap);\n\n    vec2 sampleRes = vec2(iResolution.x / columns, iResolution.y / pixelHeight);\n    vec2 pixel = vec2(floor(fragCoord.x / columns), floor(fragCoord.y / pixelHeight));\n    vec2 sampleUv = pixel / sampleRes;\n\n    // color of sample point\n    vec3 col = texture(iChannel0, sampleUv).xyz;\n    \n    int column = int(fragCoord.x) % (channelWidth * 3 + hGap);\n\n    // set color based on which channel this fragment corresponds to\n    if (column < channelWidth * 1) col = vec3(col.x, 0.0, 0.0);\n    else if (column < channelWidth * 2) col = vec3(0.0, col.y, 0.0);\n    else if (column < channelWidth * 3) col = vec3(0.0, 0.0, col.z);\n    else col = vec3(0.0, 0.0, 0.0);\n\n    // offset every other column of pixels\n    int height = int(pixelHeight);\n    if (int(pixel.x) % 2 == 0) {\n        if (int(fragCoord.y) % height >= height - vGap) col = vec3(0.0, 0.0, 0.0);\n    } else {\n        if (int(fragCoord.y) % height < vGap) col = vec3(0.0, 0.0, 0.0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}