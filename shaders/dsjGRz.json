{
    "Shader": {
        "info": {
            "date": "1667169345",
            "description": "Apply a simple random path rewriting automaton to a closed path. Mouse resets (eg. after a window resize).\n\nNow calculates winding number for cell with corner coordinates (i,j) in Buffer B (can't do in Buffer A as we would always be one frame behind).",
            "flags": 32,
            "hasliked": 0,
            "id": "dsjGRz",
            "likes": 7,
            "name": "Random Paths Filled",
            "published": 3,
            "tags": [
                "random",
                "paths"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "///////////////////////////////////////////////////////////////////////\n//\n// Random Paths Filled, mla, 2022\n//\n// Apply a simple random path rewriting automaton to a closed path.\n// Mouse resets (eg. after a window resize).\n//\n// Now calculates winding number for cell with corner coordinates (i,j) in\n// Buffer B (can't do in Buffer A as we would always be one frame behind).\n//\n// Path is stored in Buffer A - the x and y components of pixel \n// (i,j) indicate the presence or absence of an edge to (i+1,j), (i,j+1)\n// respectively.\n//\n// There are two types of rewrite, applied to a 2x2 grid:\n//\n// xxxx     x..x    xxxx     ...x\n// .... <-> x..x    x... <-> ...x\n// ....     x..x    x...     ...x\n// ....     xxxx    x...     xxxx\n//\n// Sadly, the algorithm doesn't guarantee that the path remains connected if\n// there is a cross pattern - the wrong side of the cross can get flipped\n// by the second rewrite:\n//\n// ..x..    ..xxx\n// ..x..    ....x\n// xxxxx -> xxx.x\n// ..x..    ..x..\n// ..x..    ..x..\n//\n// I'm not sure what can be done about this without considerably\n// complicating the algorithm.\n//\n///////////////////////////////////////////////////////////////////////\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  vec2 p = 1.02*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n  p = 0.5*(p+1.0); // Move to [0,1] square\n  ivec2 vertex = clamp(ivec2(round(float(N)*p)),ivec2(0),ivec2(N));\n  float px = fwidth(p.x), d = 1e8;\n  // The 4 segments coming off this vertex - the buffer entries\n  // indicate the presence of rightwards and downwards segments.\n  bvec4 a = bvec4(texelFetch(iChannel0,vertex-ivec2(1,0),0).x,\n                  texelFetch(iChannel0,vertex-ivec2(0,1),0).y,\n                  texelFetch(iChannel0,vertex,0).xy);\n  // I don't usually like this sort of macro, but this one is handy.\n  #define S(p,q,r) (segment((p),vec2(q)/float(N),vec2((q)+(r))/float(N)))\n  if (vertex.x > 0 && a.x) d = min(d,S(p,vertex,-ivec2(1,0)));\n  if (vertex.y > 0 && a.y) d = min(d,S(p,vertex,-ivec2(0,1)));\n  if (vertex.x < N && a.z) d = min(d,S(p,vertex, ivec2(1,0)));\n  if (vertex.y < N && a.w) d = min(d,S(p,vertex, ivec2(0,1)));\n  vec3 col = vec3(1,1,0.8);\n  vec3 tex = texture(iChannel2,fragCoord/iResolution.y).xyz;\n  if (all(greaterThanEqual(p,vec2(0))) && all(lessThanEqual(p,vec2(1)))) {\n    vertex = ivec2(floor(float(N)*p));\n    float sum = texelFetch(iChannel1,vertex,0).x;\n    if (int(sum)%2 != 0) col = vec3(0.8,0,0);\n  }\n  col *= vec3(smoothstep(0.0,px,d-0.1*length(tex)/float(N)));\n  col *= 0.5+0.5*tex;\n  col = pow(col,vec3(0.4545));\n  if (alert) col.x = 1.0;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 result, vec2 fragCoord) {\n  ivec2 vertex = ivec2(fragCoord);\n  result = texelFetch(iChannel0,vertex,0);\n  if (any(greaterThan(vertex,ivec2(N)))) {\n    result = vec4(0);\n  } else if (iFrame == 0 || iMouse.z > 0.0 || result.w != 1234.0) {\n    result = vec4(vertex.y == 0 || vertex.y == N,\n                  vertex.x == 0 || vertex.x == N,\n                  0,1234);\n  } else {\n    // Consider a 2x2 grid of vertices, with segments possible between each\n    // horizontal and vertical pair of vertices.\n    int n = irand(iFrame+1,4);\n    ivec2 offset = ivec2(n/2,n%2);\n    if (all(greaterThanEqual(vertex,offset)) && all(lessThan(vertex,N+offset))) {\n      ivec2 base = (vertex-offset)/2*2+offset;\n      bvec4 a = bvec4(texelFetch(iChannel0,base,0).xy,\n                      texelFetch(iChannel0,base+ivec2(0,1),0).x,\n                      texelFetch(iChannel0,base+ivec2(1,0),0).y);\n      if (any(a) && !all(a) && a != bvec4(1,0,1,0) && a != bvec4(0,1,0,1)) {\n        if (vertex == base) result.xy = vec2(not(a.xy));\n        if (vertex == base+ivec2(0,1)) result.x = float(!a.z);\n        if (vertex == base+ivec2(1,0)) result.y = float(!a.w);\n      }\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "int N = 88;\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing       \n  return v * mix( vec3(1.0), rgb, s);\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nint irand(int i, int range) {\n return int(ihash(uint(i))%uint(range));\n}\n\nfloat rand(int i, int j) {\n  uint h = ihash(uint(31*i+j));\n  return float(h)/pow(2.0,32.0);\n}\n\nfloat rand(int i) {\n  uint h = ihash(uint(i));\n  return float(h)/pow(2.0,32.0);\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Calculate fill for cell\nvoid mainImage(out vec4 result, vec2 fragCoord) {\n  ivec2 vertex = ivec2(fragCoord);\n  result = vec4(0);\n  if (all(lessThanEqual(vertex,ivec2(N)))) {\n    float sum = 0.0;\n    // Count the walls off to the right - requires up to N texture\n    // accesses, but doesn't hold things up too much.\n    for (int i = vertex.x+1; i <= N; i++) {\n      // vertex.y indicates presence of vertical segment\n      sum += texelFetch(iChannel0,ivec2(i,vertex.y),0).y;\n    }\n    result.x = sum;\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}