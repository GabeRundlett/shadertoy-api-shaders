{
    "Shader": {
        "info": {
            "date": "1670095691",
            "description": "Variation showing fix for irregular 45° shape boundaries. LHS (cyan) shows artefacts on 45° slope, RHS (cream) offsets x by the magic quantity 0.382, and no artefacts appear. Other magic numbers should work too, but this one is nice.",
            "flags": 16,
            "hasliked": 0,
            "id": "msjSzm",
            "likes": 3,
            "name": "Houndstooth with step()",
            "published": 3,
            "tags": [
                "procedural",
                "branchless",
                "houndstooth"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 145
        },
        "renderpass": [
            {
                "code": "//////////////////////////////////////////////////////////////////////////////\n//\n// Original code by @Offline, https://www.shadertoy.com/view/dsBSzw\n//\n// We should be able to get a 45° line on the screen by doing, eg:\n//\n// fragColor = vec4(step(x,p.x-p.y));\n//\n// but rounding errors in scaling mean that we might not get\n// a regular 1 up, 1 along pixel pattern, because sometimes\n// p.x and p.y are mathematically equal, but in fact are slightly different\n//\n// One fix is to round the difference to the nearest pixel boundary,\n// but an easier fix is to offset one coordinate so mathematical\n// equality is unlikely. Here we subtract 0.382 from the x-coordinate,\n// 0.382 = 1-0.618 and 0.618 = 1/φ, the Golden Ratio, is particularly hard\n// to approximate as a rational (of course, we are using an approximation\n// ourselves, but such is life and 0.382 seems to work well).\n//\n// 'x' uses 1-1 pixel scaling\n// <mouse> moves around image.\n//\n//////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, vec2 fragCoord ) {\n    fragCoord -= 0.5*iResolution.xy;\n    vec2 mouse = vec2(0);\n    if (iMouse.x > 0.0) mouse = iMouse.xy - 0.5*iResolution.xy;\n    fragCoord -= mouse.xy;\n    if (!key(CHAR_X)) fragCoord = floor(fragCoord/4.0); // Bigger pixels\n    // 0.382 = 1-0.618\n    if (fragCoord.x > 0.0) fragCoord.x -= 0.382; // Offset one dimension\n    vec2 uv = fract(fragCoord / iResolution.y * ceil(1.0+mod(iTime,32.0)));\n    vec2 mask = step(0.5, uv);\n    float color = step(0.5, fract(abs(uv.x - uv.y) * 2.0));\n    color = max(color, min(mask.x, mask.y)) * max(mask.x, mask.y);\n    fragColor = vec4(color);\n    if (fragCoord.x > 0.0) fragColor.b *= 0.9; else fragColor.r *= 0.9;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}