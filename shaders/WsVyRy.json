{
    "Shader": {
        "info": {
            "date": "1603139169",
            "description": "Using the Lorenz Attractor in a SDF, still need to figure out how to make it translucent...",
            "flags": 0,
            "hasliked": 0,
            "id": "WsVyRy",
            "likes": 4,
            "name": "Attractor Space",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "attractor"
            ],
            "usePreview": 0,
            "username": "workingclasshacker",
            "viewed": 354
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define SURFACE_DIST 0.001\n#define MAX_DIST 100.0\n\n\nfloat t;\n\nmat2 Rot2d(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat2(c, - s, s, c);\n}\nfloat differenceSdf(float a, float b){\n  return max(-a,b);\n}\nfloat sdLorrenz(vec3 p, float sigma, float rho, float beta, float scale){\n  float dx = sigma * (p.y-p.x);\n  float dy = p.x * (rho - p.z) - p.y;\n  float dz = p.x * p.y - beta * p.z;\n  return length(vec3(dx*scale, dy*scale, dz*scale));\n  //return length(vec3(dx, dy, dz));\n}\nfloat GetDist(vec3 p){\n  // replace with your scene\n  p = abs(p*1.5);\n  float d = sdLorrenz(p, 10., 28., 8./4.,.004);\n  float d2 = sdLorrenz(vec3(p.x-.01, p.y+.01, p.z), 10., 28., 8./4., .005);\n  //float d = sdBox(p, vec3(.5,.5,.5));\n  //float d2 = sdBox(p, vec3(.2,.2,1.5));\n  //return d2;\n  d = max(d, d2);\n  return d;//differenceSdf(d*1.4, d2*.4);\n}\n\nvec3 GetNormal(vec3 p) {\n  vec2 e = vec2(0.02, 0);\n  float d = GetDist(p);\n  vec3 n = d-vec3(GetDist(p - e.xyy), GetDist(p - e.yxy), GetDist(p - e.yyx));\n  return normalize(n);\n}\nvec3 Bg(vec3 rd){\n  float k = rd.y*.5+.5;\n  float d = sin(t)*.5+.5;\n  float s = cos(t)*.5+.5;\n  float dark = .2;\n  vec3 col = mix(vec3(d,s,0.),vec3(s,d,1.),k);\n  return col*dark;\n}\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n  vec3 f = normalize(l - p),\n  r = normalize(cross(vec3(0, 1, 0), f)),\n  u = cross(f, r),\n  c = p+f * z,\n  i = c+uv.x * r+uv.y * u,\n  d = normalize(i - p);\n  return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n  float dO = 0.0;\n  for(int i = 0; i < MAX_STEPS; i ++ ) {\n    vec3 p = ro + dO * rd;\n    float ds = GetDist(p);\n    dO += ds;\n    if (dO < SURFACE_DIST||dO > MAX_DIST) {\n      break;\n    }\n  }\n  return dO;\n}\nvec3 render(vec2 uv){\n  vec3 color = vec3(0);\n  \n  // camera\n  \n  vec3 camO = vec3(0, 0, -50.);\n  camO.yx *= Rot2d(t);\n  camO.xz *= Rot2d(t);\n  vec3 lookAt = vec3(0, 0, 0);\n  vec3 rd = GetRayDir(uv, camO, lookAt, 1.0);\n  color += Bg(rd);\n  // trace scene\n  float d = RayMarch(camO, rd);\n\n  // material\n  if (d < MAX_DIST) {\n    vec3 p = camO + rd * d;\n    vec3 n = GetNormal(p);\n    vec3 reflect = reflect(rd, n);\n    float height = p.y;\n    float dif = dot(n, normalize(vec3(1.,.5,.0)))*.5+.5;\n    float spec = pow(reflect.y*.5+.5, 10.);\n    color = n*.5+.5;\n    color *= pow(1./d,0.3);\n    color += mix(Bg(reflect),vec3(dif),.4);\n    color += vec3(spec);\n  }\n  return color;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tt = iTime/5.0;\n\tvec3 color = render(uv);\n  \tcolor = pow(color, vec3(.4545)); //correct gamma\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}