{
    "Shader": {
        "info": {
            "date": "1715468220",
            "description": "Back to playing with truchet tiles, based on what I picked up from @Shane's shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "McGSzK",
            "likes": 24,
            "name": "Hexagon Playground",
            "published": 3,
            "tags": [
                "hexagon",
                "truchet",
                "tiles"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 179
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Hexagon Playground\n    05/11/2023  @byt3_m3chanic\n    \n    Back to playing with truchet tiles, based on what I picked up from @Shane's shaders\n    Simple one pass hexagon grid and simple get sdf face for texturing.\n    \n*/\n\n#define R iResolution\n#define T iTime\n#define M iMouse\n\n#define PI          3.14159265\n#define PI2         6.28318530\n\n#define MIN_DIST    1e-4\n#define MAX_DIST    20.\n\n\n// globals\nvec4 FC = vec4(.14,.09,.06,0);\nvec3 hp,hit;\nvec2 gid, sid, shx, ghx;\nmat2 r2;\nfloat speed;\n\n// constants\nconst float s4 = .577350;\nconst float s3 = .288683;\nconst float s2 = .866025;\nconst vec2 s = vec2(1.732,1);\n    \nfloat hash21(vec2 p) { return fract(sin(dot(p,vec2(26.37,45.93)))*4374.23); }\nmat2 rot(float a){ return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nvec3 hue(float t) {  return .45 + .35*cos(PI2*t*(vec3(.12,.47,.92)+vec3(0.88,.97,.85)));}\n\n// @IQ extrude 2D sdf\nfloat opx(in float d, in float z, in float h){\n    vec2 w = vec2( d, abs(z) - h );\n  \treturn min(max(w.x, w.y), 0.) + length(max(w, 0.));\n}\n\n// @Shane tile grid and functions\n// https://www.shadertoy.com/view/4td3zj\nvec4 hexGrid(vec2 uv) {\n    vec4 hC = floor(vec4(uv, uv - vec2(1,.5))/s.xyxy) + .5;\n    vec4 h4 = vec4(uv - hC.xy*s, uv - (hC.zw + .5)*s);\n    return dot(h4.xy, h4.xy) < dot(h4.zw, h4.zw) ? vec4(h4.xy, hC.xy) : vec4(h4.zw, hC.zw + .5);\n}\n\nvec2 map(vec3 pos) {\n    vec2 res = vec2(1e5,0.);\n    pos.x += speed;\n\n    vec2 uv = pos.xz;\n    vec4 hex = hexGrid(uv/2.);\n    vec2 id = hex.zw, p = hex.xy;\n    \n    sid = id, shx = p;\n\n    float rnd = hash21(id);\n\n    if(rnd<.5) {\n        p *= r2;\n        p.y = -p.y;\n    } \n\n    vec2 p0 = p - vec2(-s3, .5),\n         p1 = p - vec2( s4,  0),\n         p2 = p - vec2(-s3,-.5);\n\n    vec3 d3 = vec3(length(p0), length(p1), length(p2));\n    vec2 pp = vec2(0);\n\n    if(d3.x>d3.y) pp = p1;\n    if(d3.y>d3.z) pp = p2;\n    if(d3.z>d3.x && d3.y>d3.x) pp = p0;\n\n    float circle = length(pp)-s3;\n    \n    rnd = fract(rnd*4334.343);\n    if(rnd<.175) {    \n        float c1 = 1e5, c2 = 1e5;\n        circle = length(p.x);\n        c2 = length(p1)-s3;\n        c1 = length(p1+vec2(1.155,0))-s3;\n        c1 = min(c2,c1);\n        circle = min(circle,c1);\n    }\n    \n    float pat = opx(abs(abs(circle)-.04)-.015,pos.y-1.75,.4+.3*sin(pos.x*.5));\n\n    if(pat<res.x) {\n        res=vec2(pat,1.);\n        hit=vec3(pp.x,pos.y,pp.y);\n    }\n\n    float tile = max(abs(hex.x)*s2 + abs(hex.y)*.5, abs(hex.y))-.16;\n    float cell = opx(abs(tile)-.01,pos.y,2.1-(rnd*.2));\n    cell = min(cell, opx(tile+.05,pos.y,2.1) );\n    if(cell<res.x&&rnd>.1) {\n        res=vec2(cell,2.);\n        hit=vec3(pp.x,pos.y,pp.y);\n    }\n    \n    float flr = pos.y-1.65;\n    if(flr<res.x) {\n        res=vec2(flr,3.);\n        hit=pos;\n    }\n    \n    return res;\n}\n\nvec3 normal(vec3 p, float t) {\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e).x+\n             h.yyx * map(p+h.yyx*e).x+\n             h.yxy * map(p+h.yxy*e).x+\n             h.xxx * map(p+h.xxx*e).x;\n    return normalize(n);\n}\n\n// @Shane based on the original by @IQ.\nfloat calcAO(in vec3 p, in vec3 n) {\n\tfloat sca = 4., occ = 0.;\n    for( int i=1; i<6; i++ ) {\n        float hr = float(i)*.125/5.;        \n        float dd = map(p + hr*n).x;\n        occ += (hr - dd)*sca;\n        sca *= .75;\n    }\n    return clamp(1.-occ,0.,1.);   \n}\n\nvec4 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, inout float d) {\n\n    vec3 C = FC.rgb;\n    float m = 0.;\n    vec3 p = ro;\n    \n    for(int i=0;i<90;i++) {\n        p = ro + rd * d;\n        vec2 ray = map(p);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST)break;\n        d += ray.x;\n        m  = ray.y;\n    } \n    \n    gid=sid, ghx=shx, hp=hit;\n    \n    float alpha = 0.;\n    if(d<MAX_DIST)\n    {\n        vec3 n = normal(p,d);\n        vec3 lpos =  vec3(2,8,-2);\n        vec3 l = normalize(lpos-p);\n\n        float diff = clamp(dot(n,l),0.,1.);\n     \n        int face;\n        vec3 cuv = hp;\n           \n        // quick find the face with normal\n        if(m==1.||m==2.) {\n            vec3 aN = abs(n);\n            ivec3 idF = ivec3(n.x<-.25? 0 : 5, n.y<-.25? 1 : 4, n.z<-.25? 2 : 3);\n            face = aN.x>.5? idF.x : aN.y>.5? idF.y : idF.z;\n\n            if(face==0||face==5) cuv = hp.yzx;\n            if(face==1||face==4) cuv = hp.xzy;\n            if(face==2||face==3) cuv = hp.xyz;\n\n        }\n        \n        float shdw = 1.;\n        for( float t=.01;t<10.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 32.*h/t);\n            t += h;\n            if( shdw<MIN_DIST || t>16. ) break;\n        }\n        \n        float ao = calcAO(p, n);\n        diff = mix(diff,diff*shdw,.65);\n        diff *= ao;\n        \n        float spec = .75 * pow(max(dot(normalize(p-ro),reflect(normalize(lpos),n)),0.),24.);\n        vec3 h = vec3(1.);\n        if(m==1.) {\n            h = texture(iChannel0,cuv.xy*3.).rgb*vec3(.835,.373,.125);\n            ref = h/3.;\n        }\n        if(m==2.) {\n            float hs = hash21(gid)/2.;\n            h = texture(iChannel1,cuv.xy+.5).rgb;\n            ref = h;\n            h *= hs;\n        }\n        if(m==3.) {\n            float px = fwidth(p.x);\n            float hs = hash21(gid);\n            hp.xz *= rot(hs*PI2);\n            \n            float tile = max(abs(ghx.x)*s2 + abs(ghx.y)/2., abs(ghx.y))-.49;\n            float cell = tile;\n            vec4 hex = hexGrid(hp.xz*8.);\n            vec2 id = hex.zw, pq = hex.xy;\n            \n            float rnd = hash21(id);\n            if(rnd<.5) {\n                pq *= r2;\n                pq.y = -pq.y;\n            } \n            \n            float circle;\n            if(fract(hs*43.234)>.75) {\n                vec2 p0 = pq - vec2(-s3,.5), p1 = pq - vec2(s4, 0), p2 = pq - vec2(-s3,-.5);\n                vec3 d3 = vec3(length(p0),length(p1),length(p2));\n                vec2 pp = vec2(0);\n\n                if(d3.x>d3.y) pp = p1;\n                if(d3.y>d3.z) pp = p2;\n                if(d3.z>d3.x && d3.y>d3.x) pp = p0;\n                circle = length(pp)-s3;\n                tile = max(tile,abs(abs(circle)-.12)-.05);\n            }\n\n            h = texture(iChannel0,hp.xz).rgb*vec3(0.827,0.647,0.392);\n            h = mix(h,h*hue(hs/2.),smoothstep(px,-px,tile));\n            h = mix(h,h*.1,smoothstep(px,-px,abs(cell)-.005));\n\n            ref = vec3(.6);\n        }\n\n        C = h * diff;\n\n        ro = p+n*.001;\n        rd = reflect(rd,n);\n        alpha = 1.;\n    } \n    \n    return vec4(C,alpha);\n}\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n\n    r2 = rot(1.047197);\n    speed = T*.4;\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n\n    vec3 ro = vec3(0,.5,7);\n    vec3 rd = normalize(vec3(uv, -1));\n    \n    // mouse //\n    float x = M.xy==vec2(0) || M.z<0. ? 0. : -(M.y/R.y*.25-.125)*PI;\n    float y = M.xy==vec2(0) || M.z<0. ? 0. : -(M.x/R.x*2.-1.)*PI;\n    mat2 rx =rot(-.78-x), ry =rot(-.78-y+T*.02);\n    \n    ro.zy*=rx, ro.xz*=ry;\n    rd.zy*=rx, rd.xz*=ry;\n\n    vec3 C = vec3(0), ref = vec3(0), fil = vec3(1);\n    \n    float d = 0.,a = 0.;\n    float numBounces = 2.;\n    \n    for(float i=0.; i<numBounces; i++) {\n        d =0.;\n        vec4 pass = render(ro, rd, ref, d);\n        C += pass.rgb*fil;\n        fil*=ref;\n        if(i==0.) a = d;\n    }\n\n    C = mix(FC.rgb,C,  exp(-.0015*a*a*a));\n    C = pow(C, vec3(.4545));\n    O = vec4(C,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}