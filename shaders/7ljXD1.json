{
    "Shader": {
        "info": {
            "date": "1627633317",
            "description": "Penrose tiling with two rhombs (details in earlier version); tile structure now in precomputed texture for speedup; mouseable.",
            "flags": 32,
            "hasliked": 0,
            "id": "7ljXD1",
            "likes": 25,
            "name": "Aperiodic Penrose Tiling 2",
            "published": 3,
            "tags": [
                "tile",
                "penrose",
                "aperiodic"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "// \"Aperiodic Penrose Tiling 2\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA   0  // (= 0/1) optional antialising\n\nfloat SmoothMax (float a, float b, float r);\nmat3 VToRMat (vec3 v, float a);\nvec2 Rot2D (vec2 q, float a);\nmat3 StdVuMat (float el, float az);\nvec3 HsvToRgb (vec3 c);\nfloat Fbm2 (vec2 p);\nvec4 LoadTx (vec2 uv);\n\nvec4 qv4;\nvec3 ltDir;\nfloat tCur, dstFar, rad[3], pFac[3];\nint idObj, mode;\nint nFrame;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (nFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 offSet;\n  float dMin, d, r, h;\n  dMin = dstFar;\n  q = p;\n  q.y -= 1.08;\n  offSet = Rot2D (vec2 (0.2, 0.), -0.05 * pi * tCur);\n  qv4 = LoadTx ((pFac[0] / rad[0]) * q.xy + 0.5 + offSet);\n  r = length (q.xy);\n  d = r - rad[0];\n  h = -0.02 * smoothstep (0.05, 0.3, abs (qv4.x)) * (1. - smoothstep (-0.05, -0.01, r - rad[0]));\n  d = SmoothMax (abs (q.z) - (h + 0.01), d, 0.01);\n  DMIN (1);\n  q = p;\n  q.y -= 0.05;\n  qv4 = LoadTx ((pFac[1] / rad[1]) * q.xz + 0.5);\n  r = length (q.xz);\n  d = r - rad[1];\n  h = -0.02 * smoothstep (0.03, 0.25, abs (qv4.x)) * (1. - smoothstep (-0.05, -0.01, r - rad[1]));\n  d = SmoothMax (abs (q.y - 0.5 * h) - 0.5 * h - 0.025, d, 0.01);\n  DMIN (2);\n  return 0.7 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.01 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.2 + 0.8 * sh;\n}\n\nvec3 BgCol (vec3 rd)\n{\n  rd.y = abs (rd.y);\n  return mix (vec3 (0.3, 0.35, 0.7), vec3 (0.8, 0.8, 0.8),\n     clamp (2. * (Fbm2 (4. * rd.xz / rd.y + 0.1 * tCur) - 0.1) * rd.y, 0., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, colR, gCol, sCol, vn, ror, rdr;\n  float dstObj, dstObjR, dstFlr, nDotL, sh, dm, att;\n  bool isRefl;\n  rad[0] = 1.;\n  rad[1] = 1.3;\n  rad[2] = 6.;\n  pFac[0] = 0.3;\n  pFac[1] = 0.35;\n  pFac[2] = 0.5;\n  gCol = vec3 (0.8, 0.6, 0.1);\n  sCol = vec3 (0.8, 0.8, 0.85);\n  dstFlr = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  dstObj = ObjRay (ro, rd);\n  dstObjR = dstFar;\n  isRefl = false;\n  if (dstFlr < min (dstObj, dstFar)) {\n    ror = ro + dstFlr * rd;\n    rdr = reflect (rd, vec3 (0., 1., 0.));\n    ror += 0.01 * rdr;\n    dstObjR = ObjRay (ror, rdr);\n    isRefl = true;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    nDotL = max (dot (vn, ltDir), 0.);\n    nDotL *= nDotL;\n    if (idObj == 1) col = gCol;\n    else if (idObj == 2) {\n      col = sCol;\n      if (length (ro.xz) < rad[1] - 0.005 && ro.y < 0.065) {\n        qv4 = LoadTx ((pFac[1] / rad[1]) * ro.xz + 0.5);\n        col = HsvToRgb (vec3 (0.1 * (abs (qv4.w) - 20.), ((qv4.w < 0.) ? 1. : 0.6), 1.));\n      }\n    }\n    sh = ObjSShadow (ro, ltDir);\n    col = col * (0.2 + 0.1 * max (- dot (vn, ltDir), 0.) + 0.8 * sh * nDotL * nDotL) +\n       0.3 * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n  } else if (rd.y < 0.) {\n    ro += dstFlr * rd;\n    vn = vec3 (0., 1., 0.);\n    if (length (ro.xz) < rad[2]) {\n      qv4 = LoadTx ((pFac[2] / rad[2]) * ro.xz + 0.5);\n      col = HsvToRgb (vec3 (0.6, ((qv4.w < 0.) ? 1. : 0.4), 1.));         \n      vn = VToRMat (vec3 (qv4.yz, 0.).xzy, 0.15 * pi * sign (qv4.x) * (1. -\n         smoothstep (0., 0.15, abs (qv4.x)))) * vn;\n      sh = ObjSShadow (ro, ltDir);\n      nDotL = max (dot (vn, ltDir), 0.);\n      col = col * (0.2 + 0.1 * max (- dot (vn, ltDir), 0.) + 0.8 * sh * nDotL) +\n         0.2 * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n      col = mix (col, vec3 (0.3), smoothstep (-0.5, 0., length (ro.xz) - rad[2]));\n    } else col = vec3 (0.3);\n    att = smoothstep (0.93, 0.97, dot (normalize (8. * ltDir - ro), ltDir));\n    col *= att;\n  } else {\n    col = vec3 (0.);\n  }\n  if (isRefl) {\n    rd = rdr;\n    if (dstObjR < dstFar) {\n      ro = ror + dstObjR * rd;\n      vn = ObjNf (ro);\n      nDotL = max (dot (vn, ltDir), 0.);\n      nDotL *= nDotL;\n      if (idObj == 1) colR = gCol;\n      else if (idObj == 2) colR = sCol;\n      colR = colR * (0.2 + 0.8 * nDotL * nDotL) +\n         0.3 * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    } else {\n      colR = BgCol (rd);\n    }\n    colR *= att;\n    col = mix (col, colR, 0.3);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  nFrame = iFrame;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.1 * pi;\n  el = -0.15 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  el = clamp (el, -0.4 * pi, -0.05 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0.5, -8.);\n  zmFac = 4.5;\n  dstFar = 50.;\n  mode = 0;\n  ltDir = normalize (vec3 (0.5, 1.2, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nmat3 VToRMat (vec3 v, float a)\n{\n  mat3 m;\n  vec3 w, b1, b2, bp, bm;\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  w = (1. - cs.x) * v * v + cs.x;\n  b1 = (1. - cs.x) * v.xzy * v.yxz;\n  b2 = - cs.y * v.zyx;\n  bp = b1 + b2;\n  bm = b1 - b2;\n  m[0][0] = w.x;  m[1][1] = w.y;  m[2][2] = w.z;\n  m[0][1] = bp.x;  m[1][0] = bm.x;\n  m[2][0] = bp.y;  m[0][2] = bm.y;\n  m[1][2] = bp.z;  m[2][1] = bm.z;\n  return m;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 LoadTx (vec2 uv)\n{\n  return texture (txBuf, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Aperiodic Penrose Tiling 2\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Maxv3 (vec3 p);\nvec4 LoadTx (vec2 uv);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nfloat tCur;\nint nFrame;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (nFrame, 0)\n\nbool InTri (vec2 p, vec2 v0, vec2 v1, vec2 v2)\n{\n  vec3 s;\n  vec2 v10, v20, p0;\n  float d;\n  v10 = v1 - v0;\n  v20 = v2 - v0;\n  d = v20.y * v10.x - v20.x * v10.y;\n  p0 = p - v0;\n  s.xy = p0.x * vec2 (v20.y, - v10.y) - p0.y * vec2 (v20.x, - v10.x);\n  return (Maxv3 (abs (vec3 (s.xy, d - s.x - s.y) - 0.5 * d)) < 0.5 * abs (d));\n}\n\nvec4 EvalTile (vec2 uv)\n{\n  vec4 qv4;\n  vec2 vp[5], csn[5], g, gg, up, vm, v[3];\n  float gam[5], gamSum, kCur[5], d, dm, di, ic, f;\n  bool fatRom, done;\n  const float kLimit = 7.;\n  for (int k = 0; k < 5; k ++) csn[k] = sin (2. * pi * float (k) / 5. + vec2 (0.5 * pi, 0.));\n  gamSum = 0.;\n  for (int k = 0; k < 4; k ++) {\n    gam[k] = 0.1 * float (k + 1);\n    gamSum += gam[k];\n  }\n  gam[4] = - gamSum;\n  done = false;\n  ic = -1.;\n  for (int k1 = VAR_ZERO; k1 <= 3; k1 ++) {\n    for (int k2 = VAR_ZERO + 1; k2 <= 4; k2 ++) {\n      if (k2 >= k1 + 1) {\n        fatRom = (k2 - k1 == 1 || k2 - k1 == 4);\n        ++ ic;\n        gg = gam[k2] * csn[k1] - gam[k1] * csn[k2];\n        di = 1. / (csn[k1].x * csn[k2].y - csn[k2].x * csn[k1].y);\n        for (float kV1 = - kLimit + float (VAR_ZERO); kV1 <= kLimit; kV1 ++) {\n          kCur[k1] = kV1;\n          for (float kV2 = - kLimit + float (VAR_ZERO); kV2 <= kLimit; kV2 ++) {\n            kCur[k2] = kV2;\n            g = (gg + kV1 * csn[k2] - kV2 * csn[k1]).yx * vec2 (1., -1.);\n            for (int k = 0; k < 5; k ++) {\n              if (k != k1 && k != k2) {\n                d = dot (csn[k], g) * di + gam[k];\n                d += step (0., d);\n                kCur[k] = floor (abs (d)) * sign (d);\n              }\n            }\n            vp[0] = vec2 (0.);\n            for (int k = 0; k < 5; k ++) vp[0] += kCur[k] * csn[k];\n            vp[2] = vp[0] + csn[k1] + csn[k2];\n            vp[1] = vp[2] - csn[k2];\n            vp[3] = vp[2] - csn[k1];\n            done = (InTri (uv, vp[0], vp[1], vp[2]) || InTri (uv, vp[0], vp[3], vp[2]));\n            if (done) break;\n          }\n          if (done) break;\n        }\n      }\n      if (done) break;\n    }\n    if (done) break;\n  }\n  if (done) {\n    dm = 99.;\n    vp[4] = vp[0];\n    for (int k = 0; k < 4; k ++) {\n      up = uv - vp[k];\n      v[0] = normalize (vp[k + 1] - vp[k]);\n      if (k == 0) v[1] = v[0];\n      else if (k == 1) v[2] = v[0];\n      f = dot (v[0], up);\n      d = dot (up, up) - f * f;\n      if (d < dm) {\n        dm = d;\n        vm = v[0];\n      }\n    }\n    qv4.x = sqrt (dm) * sign (v[1].x * v[2].y - v[2].x * v[1].y);\n    qv4.yz = vm;\n    qv4.w = (ic + 20.) * (fatRom ? -1. : 1.);\n  } else qv4 = vec4 (0., 0., 0., -1.);\n  return qv4;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec2 pxIv;\n  int nfSafe;\n  tCur = iTime;\n  nFrame = iFrame;\n  pxIv = floor (fragCoord);\n  if (max (pxIv.x, pxIv.y) >= txSize.x) discard;\n  nfSafe = 2;\n  if (nFrame == nfSafe || txSize != LoadTx (vec2 (0.)).yz)\n     stDat = EvalTile (30. * (fragCoord / txSize  - 0.5));\n  else if (nFrame > nfSafe) stDat = LoadTx (fragCoord / txSize);\n  else stDat = vec4 (0.);\n  if (pxIv == vec2 (0.)) stDat.yz = txSize;\n  Savev4 (pxIv, stDat, fragColor, fragCoord);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec4 LoadTx (vec2 uv)\n{\n  return texture (txBuf, uv);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}