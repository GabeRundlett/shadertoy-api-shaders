{
    "Shader": {
        "info": {
            "date": "1671138484",
            "description": "Learning about tiling is fun.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtfGzn",
            "likes": 3,
            "name": "dvg_Moving_Tiles",
            "published": 3,
            "tags": [
                "tiled",
                "animation",
                "learning",
                "moving",
                "tile"
            ],
            "usePreview": 0,
            "username": "david4jsus",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979323846\n\nvec2 Rotate2D( vec2 uv, float angle ) {\n\n    // Pivot point for rotation at the center\n    uv -= 0.5;\n    \n    // Apply rotation matrix\n    uv =\n        mat2(\n            cos(angle), -sin(angle),\n            sin(angle), cos(angle)\n        ) * uv;\n    \n    // Move back to origin point\n    uv += 0.5;\n    \n    // Return rotated space\n    return uv;\n}\n\nvec2 Tile1( vec2 uv, float zoom, vec2 offset ) {\n\n    // \"Zoom\" of tiling\n    uv *= zoom;\n    \n    // Tiling offset\n    uv += step(1.0, mod(uv.yx, 2.0)) * offset;\n    \n    // Return tiled space\n    return fract(uv);\n}\n\nvec2 Tile2( vec2 uv, float zoom, vec2 offset ) {\n\n    // \"Zoom\" of tiling\n    uv *= zoom;\n    \n    // Tiling offset\n    uv.x += step(1.0, mod(uv.y, 2.0)) * offset.x;\n    \n    // Return tiled space\n    return fract(uv);\n}\n\nvec3 Rectangle( vec2 uv, float x, float y, float width, float height ) {\n\n    // Results in 1.0 value for pixels inside borders\n    vec2 borders = step(vec2(x, y), uv) * 1.0 - step(vec2(x + width, y + height), uv);\n    \n    // Return vec3 with 1.0 inside borders\n    return vec3(borders.x * borders.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // Then adjust aspect ratio\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 uv2 = fragCoord/iResolution.xy;\n    uv2.x *= iResolution.x / iResolution.y;\n    \n    // Divide both spaces (tiling)\n    uv = Tile1(uv, 4.0, vec2(cos(iTime) + 0.5));\n    uv2 = Tile2(uv2, 16.0, vec2(sin(iTime) + 0.5));\n    \n    // Rotate the first space 45 degrees\n    uv = Rotate2D(uv, PI * 0.25);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4));\n    vec3 col2 = 0.5 + 0.5 * cos(iTime + uv2.xyx + vec3(0, 2, 4));\n    \n    // Draw a square on each space\n    vec3 square = Rectangle(uv, 0.2, 0.2, 0.6, 0.6);\n    col *= square;\n    vec3 square2 = Rectangle(uv2, 0.0, 0.0, 0.7, 0.7);\n    col2 *= square2;\n\n    // Output to screen\n    fragColor = vec4(col * col2, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}