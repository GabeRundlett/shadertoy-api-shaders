{
    "Shader": {
        "info": {
            "date": "1636194224",
            "description": "just found the kernel to extract curl or divergence of a vector field\nhttps://img.favpng.com/8/0/5/curl-divergence-vector-field-vector-calculus-png-favpng-nuFSf68dHk5NYPkhmQpmCfexR.jpg\nI am remixing all known kernels randomly to see what comes out",
            "flags": 32,
            "hasliked": 0,
            "id": "fltGW7",
            "likes": 28,
            "name": "point eaters",
            "published": 3,
            "tags": [
                "convolution",
                "field",
                "vectors",
                "kernel"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 519
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 u = fragCoord/iResolution.xy;\n    float a = texture(iChannel0,u).z;\n          a = pow(a,.1);\n    fragColor = cos(a*4.+vec4(1,2,3,4)+1.)*.6+.4;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//extracts divergence around each pixel\n#define A(u) texture(iChannel0,(u)/iResolution.xy)\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    float p = 0.;\n    //kernel convolution\n    {\n        float z    = 8.;//kernel convolution size\n        float blur = 2./z;\n        for(float i=-z; i<=z; ++i){\n        for(float j=-z; j<=z; ++j){\n            vec2  c  = vec2(i,j)*blur; //c = c.yx*vec2(-1,1);\n            vec4  t2 = A(u+vec2(i,j));\n            p += dot(t2.xy,c)/exp(dot(c,c));\n        }}\n    }\n    fragColor = vec4(p);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//use the amount of divergence calculated in BufferA to enhance the divergence field\n#define A(u) texture(iChannel0,(u)/iResolution.xy)\n#define B(u) texture(iChannel1,(u)/iResolution.xy)\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec4 a = A(u);//A(u)*.9  vec4(0)\n    //kernel convolution\n    {\n        float z    = 4.;//kernel convolution size\n        float blur = 2./z;\n        for(float i=-z; i<=z; ++i){\n        for(float j=-z; j<=z; ++j){\n          float p = B(u+vec2(i,j)).x;\n          vec2  c = -vec2(i,j)*blur; //c = c.yx*vec2(-1,1);\n          a.xy += c*p/exp(dot(c,c))*.003;\n        }}\n    }\n    fragColor = a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//calculate how much each pixel is going to move and how to normalize it\n#define A(u) texture(iChannel0,(u)/iResolution.xy)\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    float s  = 0.;\n    //kernel convolution\n    {\n        vec4  t  = A(u);\n        vec2  mv = t.xy;\n        float dl = sin(t.z*3.)*2.+4.; //dl = min(dl,5.);\n        float z    = 6.;//kernel convolution size\n        float blur = 1./z;\n        for(float i=-z; i<=z; ++i){\n        for(float j=-z; j<=z; ++j){\n            vec2 c = (mv+vec2(i,j))*blur*dl;\n            s += 1./exp(dot(c,c));\n        }}\n        if(s==0.){s = 1.;}\n    }\n    fragColor = vec4(s);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//read the translation and normalization calculated in Buffer C and apply it\n#define A(u) texture(iChannel0,(u)/iResolution.xy)\n#define B(u) texture(iChannel1,(u)/iResolution.xy)\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec4  a = vec4(0);\n    //kernel convolution\n    {\n        float z    = 6.;//kernel convolution size\n        float blur = 1./z;\n        for(float i = -z; i<=z;++i){\n        for(float j = -z; j<=z;++j){\n          vec4  t  = A(u+vec2(i,j));\n          float dl = sin(t.z*3.)*2.+4.; //dl = min(dl,5.);\n          vec2  mv = t.xy;\n          float s = B(u+vec2(i,j)).x;\n          vec2 c = (mv-vec2(i,j))*blur*dl;\n          a += t/s/exp(dot(c,c));\n        }}\n    }\n    if(iFrame==0)\n    {\n        vec2 v = 1.*(2.*u-iResolution.xy)/iResolution.y;\n        a = .1/exp(dot(v,v)) + vec4(0,0,1,1)*.0;\n    }\n    fragColor = a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}