{
    "Shader": {
        "info": {
            "date": "1578485663",
            "description": "Combining 3 different reaction diffusion methods.\nMethods and a lot of the code are from wyatt/flexi!",
            "flags": 96,
            "hasliked": 0,
            "id": "WtyGzm",
            "likes": 14,
            "name": "Day 20 - Reaction Diffusion",
            "published": 3,
            "tags": [
                "diffusion",
                "reactiondiffusion",
                "reaction"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 763
        },
        "renderpass": [
            {
                "code": "\n// A MAJORITY of this code is copy-pasted from wyatt and Flexi. \n// Go check them out!\n// Also, Shane has a great tutorial on reaction-diffusion.\n\n\n// I tried to combine 3 methods of reaction diffusion into one.\n// The stripes are one of those.\n// The other one is the vortex.\n// And the third one is the raindrops.\n\n\n#define pal(x,t) (0.5 + 0.5*sin(x*vec3(0.67,0.2,0.7) + t))\n\nMain\n{ \n    vec2 uv = (U-0.5*R)/R.y;\n    vec4 CA = Q * 1. - mix(0., 1., pow(length(uv)*0.9, 2.));\n    \n    Neighborhood\n    vec4 a = A(U);\n    \n    float noise = noise(U + floor(iTime/beat) + iTime );\n    vec3 no = normalize(vec3(grad,.5));\n    vec3 re = reflect(no,vec3(0.,0,1));\n    float density = A(U).z;\n    Q = sin(0.2*density+0.9*pal(density*2. + no*3. + iTime,6.4).xyzy*density);\n    \n    Q *= (1. + kick) + noise*(1. - kick);\n    Q = clamp(Q, 0., 1.);\n    \n    Q = pow(Q, vec4(0.8,1.4,1.1,0.));\n    \n    Q = mix(Q, CA*pal(iTime*10., 20.).xyzz*Q.x, CA.x);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 20781,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/invisiblerecordings/current-value-dna?in=tim-e-aka-current-value/sets/searcher"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define iTime (iTime + 54.1)\n\n#define pi acos(-1.)\n#define tau (2.*pi)\n\n#define tempo 174.\n#define hbeat ((60./tempo)/1.)\n#define qnote (hbeat/2.)\n#define beat  (hbeat*2.)\n#define qbeat  (beat/4.)\n#define measure  (hbeat*2.)\n\n#define grad 0.25*vec2(e.z-w.z,n.z-s.z)\n#define div 0.25*(n.y-s.y+e.x-w.x)\n\n#define kick exp(-mod(iTime, beat)*20.)\n#define halfkick exp(-mod(iTime, hbeat)*20.)\n\n#define T(uv) texture(iChannel0, uv)\n#define R iResolution.xy\n#define A(U) texture(iChannel0,(U)/R)\n#define B(U) texture(iChannel1,(U)/R)\n#define C(U) texture(iChannel2,(U)/R)\n\n#define Main void mainImage( out vec4 Q, in vec2 U )\n#define Neighborhood vec4 n = A(U+vec2(0,1)), e = A(U+vec2(1,0)), s = A(U-vec2(0,1)), w = A(U-vec2(1,0)), m = 0.25*(n+e+s+w); \n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define N 20.\n#define For for (float i = -(N); i<=(N); i++)\n#define S 3.\n#define Gaussian(i) 0.3989422804/S*exp(-.5*(i)*(i)/S/S)\n#define Init if (iFrame < 1) \n#define Border if (U.x<1.||U.y<1.||R.x-U.x<1.||R.y-U.y<1.)\n#define Mouse if (iMouse.z>0.&&length(U-iMouse.xy)<30.) \n\n\n#define s_n  vec2(0.0, st.y)\n#define s_ne  vec2(st.x, st.y)\n#define s_e   vec2(st.x, 0.0)\n#define s_se  vec2(st.x, -st.y)\n#define s_s   vec2(0.0, -st.y)\n#define s_sw  vec2(-st.x, -st.y)\n#define s_w   vec2(-st.x, 0.0)\n#define s_nw  vec2(-st.x, st.y)\n\n#define uv_ne  T( U + s_ne).xyz\n#define uv_nw  T( U + s_nw).xyz\n#define uv_sw  T( U - s_sw).xyz\n#define uv_se  T( U - s_se).xyz\n#define uv_e  T( U + s_e).xyz\n#define uv_n  T( U + s_n).xyz\n#define uv_s  T( U + s_s).xyz\n#define uv_w  T( U + s_w).xyz\n#define uv_c  T( U ).xyz\n\nconst float _K0 = -20.0/6.0; // center weight\nconst float _K1 = 4.0/6.0; // edge-neighbors\nconst float _K2 = 1.0/6.0; // vertex-neighbors\nconst float cs = 4.95; // curl scale\nconst float ls = 0.24; // laplacian scale\nconst float ps = -0.06; // laplacian of divergence scale\nconst float ds = -0.08; // divergence scale\nconst float pwr = 0.2; // power when deriving rotation angle from curl\nconst float amp = 1.0; // self-amplification\nconst float sq2 = 0.3; // diagonal weight\nfloat noise( vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.1);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nfloat blur(in vec2 p){\n    vec3 e = vec3(1, 0, -1);\n    vec2 px = 1./iResolution.xy;\n\tfloat res = 0.0;\n\tres += T(p + e.xx*px ).x + T(p + e.xz*px ).x + T(p + e.zx*px ).x + T(p + e.zz*px ).x;\n    res += (T(p + e.xy*px ).x + T(p + e.yx*px ).x + T(p + e.yz*px ).x + T(p + e.zy*px ).x)*2.;\n\tres += T(p + e.yy*px ).x*4.;\n    return res/16.;\n}\n\nMain\n{       \n    vec2 st = 1./iResolution.xy;\n    vec2 uv = U/iResolution.xy;\n    vec2 uvM = U/iResolution.y;\n    vec3 t = vec3(1,0,-1);\n    \n    // -- Formulae -- //\n    // Method 1\n    // 1: uv = uv - gaussian\n    // 2: Q = Sample\n    // 3: Q.z = -div   // Q.z = Q.z - S*div\n    // 4. if(gauss>0.) Q.xy = mix(gauss,grad*250., 0.1) //mix(c.xy,(b.xy)*250.+1.5*normalize(b.xy),.09);\n    // Method 2\n    // 1: Q = gaussian - div\n\t// 2: Q = sin(q)\n    // Method 3\n    // 1: y = blur\n    // 2: New.x = uv + lapl\n    // 3: new.x -= dot(newUV, vec2(1,-1.))*0.2 //diffusion\n    // -- Setup -- //\n    \n    float noise = noise(uv + floor(iTime/beat) );\n    U -= 0.5*R;\n    float aaa = 0.04*sin(.7*iTime + kick*20.*noise)*exp(-(3. + kick)*length(U)/R.y);\n    U *= (1.-.005*exp(exp(-length(U)/R.y)))*rot(aaa);\n    U += 0.5*R;\n    \n    // -- Equations -- // \n    vec2 lap =  vec2(T(U + t.xy*st).y - T(U - t.xy*st).y, T(U + t.yx*st).y - T(U - t.yx*st).y);\n    vec3 lapB  = _K0*uv_c + _K1*(uv_n + uv_e + uv_w + uv_s) + _K2*(uv_nw + uv_sw + uv_ne + uv_se);\n    float curl = uv_n.x - uv_s.x - uv_e.y + uv_w.y + sq2 * (uv_nw.x + uv_nw.y + uv_ne.x - uv_ne.y + uv_sw.y - uv_sw.x - uv_se.y - uv_se.x);\n    float sc = cs * sign(curl) * pow(abs(curl), pwr);\n    #define grad 0.25*vec2(e.z-w.z,n.z-s.z)\n    #define div 0.25*(n.y-s.y+e.x-w.x)\n    float divB  = uv_s.y - uv_n.y - uv_e.x + uv_w.x + sq2 * (uv_nw.x - uv_nw.y - uv_ne.x - uv_ne.y + uv_sw.x + uv_sw.y + uv_se.y - uv_se.x);\n    //float sd = ds * div;\n\tfloat avg = blur(uv*(1.2 + 2.) );\n    \n    // -- Logic -- //\n    \n    Neighborhood   \n\tU -= lap*st*3.;\n    vec4 a = A(U), c = C(U);\n    vec4 b = B(U + B(U*rot(iTime)).z*20.*lap.xy*sc);\n    Q = a; \n    Q = Q - div*(1. + noise*0.3) ;\n    Q -= dot(vec2(T(U).x, C(U).x), vec2(1.,-1.))*0.1;\n    Q = sin(Q*1.);\n    \n    \n    if (B(U).x > 0.03 ) {\n    \tQ -= mix(B(U),C(U)*150. - normalize(b.x)*20.1*noise, 0.2)*0.07;\n    }\n    \n    if (iMouse.z > 0.) {\n        float md = 0.16;\n        float d = smoothstep(md,md*0.5,length(uvM - iMouse.xy/iResolution.y))*1.;\n    \t//Q = mix(Q, vec4(0. + sc*B(U)*20.),d);\n        Q = mix(Q, vec4(0. - 1.),d);\n    }\n    \n    Init Q = sin(.1*U.xyyx)*cos(U.y);\n    Init Q = sin(.3*U.yxyy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Main\n{\n    Q = vec4(0);\n    For Q += Gaussian(i) * A(U+vec2(i,i)*1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Main\n{\n    Q = vec4(0);\n    For Q += Gaussian(i) * A(U+vec2(-i,i)*1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Main\n{\n    \n    #define grad 0.25*vec2(e.z-w.z,n.z-s.z)\n    Neighborhood\n    Q.xy = grad;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}