{
    "Shader": {
        "info": {
            "date": "1727502132",
            "description": "A quick and dirty shader that takes an array of points (plus radius) and converts them into 'spotlights' to desaturate a sampled texture (or really whatever you want to desaturate)",
            "flags": 32,
            "hasliked": 0,
            "id": "432yR3",
            "likes": 1,
            "name": "Customizable desaturation.",
            "published": 3,
            "tags": [
                "circles",
                "basic",
                "sdf",
                "texture",
                "rgb",
                "hsv",
                "arrays"
            ],
            "usePreview": 0,
            "username": "NotSoGreeeen",
            "viewed": 37
        },
        "renderpass": [
            {
                "code": "/*\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to http://unlicense.org/\n*/\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //basic 0-1 coords\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //image sample\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    //convert image to hsv so we can desaturate\n    col = rgb2hsv(col);\n    \n    //remove saturation so we only mess with what we need to\n    col.y -= clamp(texture(iChannel1,uv).x, 0., 1.);\n    \n    //make sure it doesn't go negative\n    col.y = clamp(col.y, 0., 1.);\n    \n    //convert it back to rgb so we can display it\n    col = hsv2rgb(col);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//circle sdf originally from Inigo Quilez's website https://iquilezles.org/articles/distfunctions2d/\nfloat sdfCircle(vec2 coords, float radius) {\n    return 1. - (length(coords) - radius);\n}\n\n//array of points, z for radius, xy for positional data.\nvec3 point[10] = vec3[10] (\n    vec3(4., 3., 2.),\n    vec3(2., 1., 3.),\n    vec3(3., 4., 2.7),\n    vec3(5., 1., 5.),\n    vec3(3., 5., 1.),\n    vec3(4.9, 2.6, .4),\n    vec3(3.14, 10., 3.9),\n    vec3(1., 0., 1.),\n    vec3(1.),\n    vec3(1.)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //-1 to 1 uv (which is also made to render perfect squares)\n    vec2 uv = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    //updating points with variable inputs\n    point[7].xy = vec2(sin(iTime) * 10.);\n    point[8].xy = vec2(cos(iTime) * 10., sin(iTime) * 10.);\n    point[9] = vec3(tan(iTime) * 7., 1./tan(iTime * 20.) * 3., 4.);\n    \n    //sizing up the canvas so we can fit \"bigger\" circles\n    uv *= 10.;\n    \n    //add every circle to the texture\n    vec3 col;\n    for (int i = 0; i < 11; i++) {\n        col += vec3(clamp(sdfCircle(uv + point[i].xy, point[i].z), 0., 1.));\n    }\n    \n    //make sure that they don't overwrite eachother with negative values\n    col = clamp(col, 0., 1.);\n    \n    //output\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}