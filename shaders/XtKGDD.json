{
    "Shader": {
        "info": {
            "date": "1474736650",
            "description": "Music visualizer made for the September Berlin Mini Game Jam (berlinminijam.de) Made in 8 hours.\n\"Ship\" is a part of the \"burning ship fractal\" https://en.wikipedia.org/wiki/Burning_Ship_fractal",
            "flags": 32,
            "hasliked": 0,
            "id": "XtKGDD",
            "likes": 5,
            "name": "VJ Thingie",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "burningship",
                "visulaization"
            ],
            "usePreview": 0,
            "username": "daseyb",
            "viewed": 1192
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy+2.0*fragCoord.xy) / iResolution.y;\n    vec2 i = p;\n    \n    vec3 col = vec3(0.0);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    col = texture(iChannel0, uv).rgb;\n    \n    col = clamp(col, 0.0, 1.0);\n        // postprocess\n    col *= 0.8;\n    float t = iTime;\n    col = pow( col, vec3(1.2 + sin(t) * 0.1,1.2+ sin(t+0.4) * sin(t + uv.y * 4.0) * 0.1, 1.0+ sin(t+0.1) * 0.3) );    \n    col /= clamp(1.0-0.3*length(i), 0.1, 1.0 );\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// (All the good code) Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// increase this if you have a very fast GPU\n#define AA 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        fragCoord.xy += iResolution.xy*vec2(0.75, 0.4);\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    if( (uv.x < 0.75) || uv.x > 0.95 || uv.y < 0.4) discard;\n   \n\n    uv = fragCoord.xy/iResolution.xy;\n    vec3 col = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord.xy+vec2(float(m),float(n))/float(AA)))/iResolution.y;\n        float w = float(AA*m+n);\n        float time = iTime + 0.5*(1.0/24.0)*w/float(AA*AA);\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n        float time = iTime;\n#endif\n        float rot = 3.141592;\n        p *= mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    \n        float zoo = -0.58; //0.7 + 0.38*cos(.07*time);\n        float coa = 0.0; //cos( 0.15*(1.0-zoo)*time );\n        float sia = 1.0; //sin( 0.15*(1.0-zoo)*time );\n        zoo = pow( zoo,8.0);\n        vec2 c = vec2(-1.845 - sin(iTime*2.0)*0.0004,cos(iTime)*0.0005) + p.xy*zoo;\n\n        float l = 0.0;\n\t    vec2 z  = vec2(0.0);\n        for( int i=0; i<256; i++ )\n        {\n            // z = z*z + c\t\t\n            z = abs(z);\n    \t\tz = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n\t\t\n    \t\tif( dot(z,z)>(256.0*256.0) ) break;\n\n    \t\tl += 1.0;\n        }\n\n    \t// ------------------------------------------------------\n        // smooth interation count\n    \t// float sco = co - log2(log(length(z))/log(256.0));\n\t\n        // equivalent optimized smooth interation count\n    \tfloat sl =  l - log2(log2(dot(z,z))) + 4.0;\n       \n        l = sl;\n\n        col += 0.5 + 0.75*cos( 3.0 + l*0.15);\n#if AA>1\n    }\n    col /= float(AA*AA);\n#endif\n    \n    col = clamp(col, 0.0, 1.0);\n\tvec2 screenPos = uv - 0.4;\n    screenPos.x *= iResolution.x/iResolution.y;\n    vec2 shipPos = vec2(0.8, 0);\n    \n    float factor = length( vec2(length(screenPos.x - shipPos.x)*8.5 \n        \t\t,abs(clamp(-shipPos.y-0.1 + screenPos.y, -1.0, 0.0))*20.0));\n    \n    factor = clamp(factor-0.3, 0.0, 1.0);\n    \n    fragColor = vec4( col, (1.0-factor) );\n}",
                "description": "",
                "inputs": [],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nconst int FFT_SAMPLES = 10;\nconst float FFT_SAMPLES_INV = 0.1;\n    \nconst vec3 LOW_COL = vec3(1.0); //vec3(188.0/255.0, 231.0/255.0, 132.0/255.0);\nconst vec3 MID_COL = vec3(1.0); //vec3(52.0/255.0, 138.0/255.0, 167.0/255.0);\nconst vec3 HIGH_COL = vec3(1.0); // vec3(81.0/255.0, 59.0/255.0, 86.0/255.0);\n\n\nfloat fftBand(float start, float end) {\n   \tfloat fft = 0.0;\n    float st = (end - start) *FFT_SAMPLES_INV;\n    float x = start;\n    for(int i = 0; i < FFT_SAMPLES; i++) {\n \t\tfft += texture( iChannel0, vec2(x,0.25) ).x;     \n        x += st;\n    }\n    \n    fft *= FFT_SAMPLES_INV;\n \treturn fft;\n}\n\nfloat fbm( vec2 p )\n{\n    return 0.5000*texture( iChannel3, p*1.00 ).x + \n           0.2500*texture( iChannel3, p*2.02 ).x + \n           0.1250*texture( iChannel3, p*4.03 ).x + \n           0.0625*texture( iChannel3, p*8.04 ).x;\n}\n\n\nvec4 background(in vec2 uv )\n{\n    vec4 fragColor;\n    // create pixel coordinates\n    uv.y += pow(abs(0.5-uv.x)*0.3 + 0.1, 2.0) * 0.3;\n\tuv.y += fbm( 0.1*vec2(uv.x*uv.y,1.0)/uv.y + iTime * 0.0025 ) * 0.01;\n\n    float waveIndex = uv.x * uv.y * 0.2;\n    // second texture row is the sound wave\n\tfloat wave = texture( iChannel0, vec2(uv.x - waveIndex,0.75) ).x;\n\t\n\t// convert frequency to colors\n\tvec3 col = vec3(0.0);\n\t\n    float waveSize = 1.0 - pow(abs(0.5-uv.x)*0.3 + 0.1, 2.0);\n    \n    //waveSize *= fbm(0.001*vec2(uv.x*uv.y,1.0)/uv.y + iTime * 0.005) * 2.2;\n    \n\n    float waveFac = abs(mod((wave*waveSize*0.2 - uv.y) * (uv.y*5.0), 0.12)*0.2) ;\n    // add wave form on top\t\n\tcol += 1.0 -  smoothstep( -0.01, 0.05*(1.0-wave+0.2), waveFac) * 2.0;\n\n    col *= smoothstep(0.5, 0.25, uv.y) * (1.0 - fbm( 0.5*vec2(uv.x*uv.y,1.0)/uv.y + iTime * 0.0025 ) * 3.0);\n    \n    \n\t// output final color\n    vec2 mirrored = uv;\n    mirrored.y = (1.0 - mirrored.y - 0.1) * 1.2 + waveFac * 2.0;\n    mirrored.x -= (0.5 - mirrored.y)*0.1;\n\tcol = col * 0.3 - texture(iChannel2,  mirrored).rgb * 0.9 * vec3(0.6, 0.7, 1.0);\n\tcol *= 0.9;\n    \n    vec3 f = vec3(1.0 - fbm( 0.1*vec2(uv.x*uv.y,1.0)/uv.y + iTime * 0.0025 ) * 2.0);\n    vec3 streaks = vec3(texture( iChannel0, vec2(abs((1.0 - uv.x)/uv.y) * 0.2,0.25) ).x * 1.9);\n \tf -= streaks * vec3(1.0, 0.8, 0.5) * 2.0 * (1.0 - uv.y);\n\tf *= 0.4;\n    \n    vec2 offset = (uv - vec2(0.8, 0.0));\n    offset.x *=  iResolution.x/iResolution.y;\n    vec3 sun = vec3(-2.0* fftBand(0.0, 0.2) - 0.5);\n    sun *= vec3(1.0, 0.8, 0.7) * 1.05;\n    \n    f =  mix(f, sun, 0.8 - smoothstep(0.0, 0.06, length(offset)-0.5) );\n    \n    col = mix( col, f, smoothstep(0.40,0.5,uv.y) );\n    fragColor = vec4(col, 1);\n    \n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy+2.0*fragCoord.xy) / iResolution.y;\n    vec2 i = p;\n    \n    vec3 col = vec3(0.0);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec2 shipOffset = vec2(0.0);\n        \n    float bandLowCont= fftBand(0.0, 0.1);\n    float bandMidCont = fftBand(0.1, 0.4);\n    float bandHighCont = fftBand(0.4, 1.0);\n    \n    float average = (bandLowCont + bandMidCont + bandHighCont) * 1.0/3.0;\n    float averageLow = average - 0.2;\n    float averageHigh = average + 0.2;\n    float bandLow = smoothstep(averageLow + 0.1, averageHigh + 0.4, bandLowCont) * 0.5 + 0.1;\n    float bandMid = smoothstep(averageLow, averageHigh + 0.4, bandMidCont) * 0.8 + 0.1;\n    float bandHigh = smoothstep(averageLow, averageHigh, bandHighCont) * 0.5 + 0.1;\n    \n    float chooser = uv.x + sin(uv.y * 10.0) * sign(uv.x-0.5) * 0.01 * bandLowCont;\n    vec3 bgCol = chooser < 0.33 ? LOW_COL : chooser < 0.66 ? MID_COL : HIGH_COL;\n    vec3 bg = -background(uv).rgb * bgCol * 0.2;\n   \t\n    float window = 0.1;\n    float bandFactor = mix(bandLow, bandMid, smoothstep(0.33-window, 0.33+window, chooser));\n    bandFactor = mix(bandFactor, bandHigh, smoothstep(0.66-window, 0.66+window, chooser));\n\n    bg += bandFactor * bgCol * 0.9 * (0.3 + average);\n    \n    vec2 offset = vec2(sin(bandHigh*9.0 + 1.5), cos(bandHigh*9.0+1.5));\n    \n    vec2 shipSamplePoint =  (uv * 0.7 - vec2(0.25, 0.15)) + vec2(sin(uv.y*80.0 + iTime * 10.0) * 0.0015, 0);\n    vec4 ship = texture(iChannel1, shipSamplePoint);\n    \n    vec3 fg = mix(bg, vec3(bandLowCont * 2.0 + 0.2, bandMidCont*1.5 + bandMid* 2.0, bandHighCont + bandLow ), 1.0 -ship.r);\n    \n    bg *= 1.5 - abs(0.5 - uv.y);\n    \n    col = mix(bg, fg * 1.5, ship.a) - fg * ship.r * ship.a * 1.2 + bg*0.75;\n    \n    \n    /*col = clamp(col, 0.0, 1.0);\n        // postprocess\n    col *= 0.8;\n    float t = iTime;\n    col = pow( col, vec3(1.2 + sin(t) * 0.1 + bandLowCont * 0.2,1.2+ sin(t+0.4) * sin(t + uv.y * 4.0) * 0.1, 1.0+ sin(t+0.1) * 0.3) );    \n    col /= clamp(1.0-0.3*length(i), 0.1, 1.0 );*/\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}