{
    "Shader": {
        "info": {
            "date": "1610376624",
            "description": "show use of GLSL reflect and refract, and Fresnel reflection coefficient ( right: Schlick's approximation . Note the trap ).\nIncident (white, mouse control), reflected (green), refracted(blue).\nYellow: reflectance (Fresnel term). Purple: transmittance.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WlVczz",
            "likes": 6,
            "name": "refraction, reflection, Fresnel",
            "published": 3,
            "tags": [
                "reflection",
                "refraction",
                "fresnel",
                "tuto"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 460
        },
        "renderpass": [
            {
                "code": "    float ior = 1.3;                        // index of refraction in material\n#define IOR(D) ( -D.y<0. ? ior : 1./ior )\n\n#define R iResolution.xy\n#define S(v) smoothstep( 1.5*pix, 0., v)\nfloat pix;\n\n                                           // see Fresnel graphs on https://www.desmos.com/calculator/td8zfxrrve\n#define FresnelSch(D,N,e)( e<1. ? fresnelSch(D,N,e) : fresnelSch(refract(D,N,e),N,e) )\n#define fresnelSch(D,N,e)  mix( pow( max(0.,1.-dot(-(D),N)), 5.), 1. , SQR((1.-(e))/(1.+(e))) )  // Schlick's approximation https://en.wikipedia.org/wiki/Schlick%27s_approximation\n//                                   or use C = sqrt(1.-max(1.,i)²sin()² ) instead of dot\n#define SQR(x)         (x)*(x)\n\nfloat FresnelA(vec2 D, vec2 N, float i) {  // Analytical effective reflectance https://en.wikipedia.org/wiki/Fresnel_equations#Power_(intensity)_reflection_and_transmission_coefficients\n    float c = dot(-D,N),\n          s = sqrt(1.-c*c),\n    v = sqrt( max(0., 1.-(i*i)*(1.-c*c) )),\n    rs = ( i*c - v ) / ( i*c + v ),\n    rp = ( i*v - c ) / ( i*v + c );\n    return ( rs*rs + rp*rp ) /2.;\n}\n#define Fresnel(D,N,e) ( -D.x < 0. ? FresnelA(D,N,e) : FresnelSch(D,N,e) )\n\nfloat line(vec2 p, vec2 a,vec2 b) {        // https://www.shadertoy.com/view/llySRh\n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n    return S(length(p - b * h));\n}\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = ( 2.*u - R ) / R.y, N = vec2(0,1), D, T,\n         M = iMouse.xy;\n    M = length(M)<10. ? cos(iTime+vec2(0,11)) :  ( 2.*M - R ) / R.y;   \n    pix = 2./R.y;\n    \n    N = vec2(0,sign(M.y));                           // --- Descartes scheme\n // O = vec4( U.y < 0. )*.5;                         // material\n    pix *= 3.;\n    O.r += line(U, vec2(0), N);                      // red: normal\n    O   += line(U, vec2(0), M);                      // white: incident ray\n    D = normalize(-M);                               // ray direction\n    O.g += line(U, vec2(0),  reflect( D,N ) );       // green: reflected ray\n    O.b += line(U, vec2(0),T=refract( D,N,IOR(D)) ); // blue: reflected ray\n    if (T==vec2(0)) O.b = O.g;                       // cyan: total internal reflection\n    \n    N = vec2(0,sign(U.y));                           //  --- Fresnel Diagram\n    D = -normalize(U);\n    float f = Fresnel(D,N,IOR(D)),                   // fresnel term\n          l = length(U);\n    pix = 1.;\n    O.rg += .5* S( abs(f-l) / fwidth(f-l) );         // reflectance in direction U\n    f = 1.-f;\n    O.rb += .5* S( abs(f-l) / fwidth(f-l) );         // transmittance in direction U\n       // * ( N = U-.5*N, .5+.5*sin(60.*atan(N.y,N.x))); // dash\n  // O[U.y>0.?1:2] =  \n    if (U.y<0.) O += ( 1.-max(O.r,max(O.g,O.b)) ) *.5;   // material\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}