{
    "Shader": {
        "info": {
            "date": "1584692530",
            "description": "I used https://raytracing.github.io/books/RayTracingInOneWeekend.html to help me learn path tracing",
            "flags": 32,
            "hasliked": 0,
            "id": "tsXyW8",
            "likes": 8,
            "name": "PathTracerDemo",
            "published": 3,
            "tags": [
                "raytracing",
                "raymarching",
                "pathtracing",
                "pathtracing",
                "pathtracer"
            ],
            "usePreview": 0,
            "username": "kstyler",
            "viewed": 659
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor /= fragColor.w;\n    fragColor *= 2.5;\n    fragColor /= fragColor+1.;\n    fragColor = pow(fragColor, vec4(.45));\n    fragColor = smoothstep(0.,1.,fragColor);\n    fragColor.rgb = mix(vec3(0,.03,.05),vec3(1,1,1),fragColor.rgb);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int matID = 0;\nmat2 rotate(float a){\n\treturn mat2(cos(a),-sin(a),sin(a),cos(a));\n}\nfloat hash21(vec2 p){\n\treturn(fract(sin(p.x*22.+p.y*421.)*999.));\n}\nvec3 randInSphere(vec2 seed){\n\tvec3 p;\n    int i = 0;\n    do {\n        p = 2.0*vec3(hash21(float(i)*seed+fract(iTime)*22.),hash21(float(i)+seed+fract(iTime)*43.),\n                     hash21(seed-float(i)+fract(iTime+float(i))*97.)) - vec3(1,1,1);\n    } while (dot(p,p) >= 1.0 && i++ < 500);\n    return p;\n}\nfloat sdfSphere(vec3 p){\n\treturn length(p)-(sin(p.y*sin(p.x*2.)*3.)*1.3)-1.;\n}\n\nfloat sdfPlane(vec3 p){\n    return p.y +1.5;\n}\nfloat map(vec3 p){\n\n    float sphere = sdfSphere(p);\n    float plane = sdfPlane(p);\n    float best = min(sphere,plane);\n    if(best == sphere){matID = 2;}\n    if(best == plane){matID=3;}\n    return best;\n}\nvec3 normal(vec3 p){\n    vec2 e= vec2(0,0.001);\n\treturn normalize(vec3(map(p+e.yxx)-map(p-e.yxx),\n                          map(p+e.xyx)-map(p-e.xyx),\n                          map(p+e.xxy)-map(p-e.xxy)));\n}\nvec3 march(vec3 ro, vec3 rd){\n    float total = 0.;\n    float dist = 0.;\n    for(int i = 0; i<300; i++){\n        dist = map(ro+rd*total);\n        total+=dist;\n        if(dist < 0.01){\n        \tbreak;\n        }\n    }\n    if(dist>0.01){\n    \tmatID = 1;\n    }\n   \n    return (ro+rd*total);\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\tvec3 ro = vec3(0,0,-6);\n    vec3 rd = normalize(vec3(uv+hash21(uv)/iResolution.y*0.5,1));\n    vec3 col = vec3(0);\n    vec3 accum = vec3(1);\n    \n    for(int i = 0; i<4;i++){\n    \n\n        col = (march(ro,rd));\n\t\t\n        if(matID == 1){\n            \n           col =  1.-vec3(0.1,0.1,0.1);\n           accum*=col;\n            \n        }\n        if(matID ==2){\n            \n           vec3 n = normal(col);\n           rd = randInSphere(uv)+n;\n           ro = col+rd*0.1;\n            \n        }\n        if(matID ==3){\n            vec3 n = normal(col);\n            rd = randInSphere(uv)+n;\n            ro = col+rd*0.1;\n        }\n        \n    }\n   \n    fragColor += vec4(1.-accum,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}