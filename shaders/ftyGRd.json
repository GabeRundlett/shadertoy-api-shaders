{
    "Shader": {
        "info": {
            "date": "1638225542",
            "description": "- Drag with the mouse to add material\n- Press spacebar to reset",
            "flags": 48,
            "hasliked": 0,
            "id": "ftyGRd",
            "likes": 2,
            "name": "Teem",
            "published": 3,
            "tags": [
                "reactiondiffusion"
            ],
            "usePreview": 0,
            "username": "kmaork",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 st = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if (isEdge(fragCoord, iResolution)) {\n        fragColor = vec4(0.2, 0.3, 0.1, 1.);\n    } else {\n        switch (getMode(fragCoord, iResolution)) {\n        case 0:\n            fragColor = vec4((1. - st.x) * 0.2, st.y, (1. - st.x) * 0.7, 1.);\n            break;\n        case 1:\n            fragColor = vec4((1. - st.x) * 0.6, st.y, 1. - st.x, 1.);\n            break;\n        case 2:\n            fragColor = vec4(1. - st.x, st.y, 0.05, 1.);\n            break;\n        case 3:\n            fragColor = vec4(st.y * 1.5, (1. - st.x) * 0.7, 0., 1.);\n            break;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int SPACEBAR_KEY = 32;\n\nbool is_key_down(in int key) {\n    return texelFetch(iChannel1, ivec2(key, 0), 0).r != 0.;\n}\n\nbool mouseDown() {\n    return iMouse.z > 0.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame < 2 || is_key_down(SPACEBAR_KEY)) {\n        float dist = length(fragCoord - iResolution.xy / 2.);\n        bool seed = dist < 50.;\n        fragColor.x = 1.;\n        fragColor.y = seed ? 1. : 0.;\n    } else {\n        nextStep(fragColor, fragCoord, iResolution, iChannel0);\n        if (mouseDown()) {\n            if (length(fragCoord - iMouse.xy) < 10.) {\n                fragColor.y = 1.;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Based on https://www.karlsims.com/rd.html\n\nconst int PARTS = 2;\n\nfloat random(in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nbool isEdge(in vec2 fragCoord, in vec3 iResolution) {\n    return mod(fragCoord.x, iResolution.x / float(PARTS)) < 1. || mod(fragCoord.y, iResolution.y / float(PARTS)) < 1.;\n}\n\nvec2 getLap(in vec2 fragCoord, sampler2D iChannel0) {\n    return 0.05 * (texelFetch(iChannel0, ivec2(fragCoord.x - 1., fragCoord.y - 1.), 0).xy +\n                   texelFetch(iChannel0, ivec2(fragCoord.x - 1., fragCoord.y + 1.), 0).xy +\n                   texelFetch(iChannel0, ivec2(fragCoord.x + 1., fragCoord.y - 1.), 0).xy +\n                   texelFetch(iChannel0, ivec2(fragCoord.x + 1., fragCoord.y + 1.), 0).xy) +\n           0.2 * (texelFetch(iChannel0, ivec2(fragCoord.x - 1., fragCoord.y), 0).xy +\n                  texelFetch(iChannel0, ivec2(fragCoord.x + 1., fragCoord.y), 0).xy +\n                  texelFetch(iChannel0, ivec2(fragCoord.x, fragCoord.y - 1.), 0).xy +\n                  texelFetch(iChannel0, ivec2(fragCoord.x, fragCoord.y + 1.), 0).xy);\n}\n\nint getMode(in vec2 fragCoord, in vec3 iResolution) {\n    return (fragCoord.x < iResolution.x / 2. ? 0 : 1) + (fragCoord.y < iResolution.y / 2. ? 0: 2);\n}\n\nvoid nextStep(out vec4 fragColor, in vec2 fragCoord, in vec3 iResolution, sampler2D iChannel0) {    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if (isEdge(fragCoord, iResolution)) {\n        fragColor.x = 0.;\n        fragColor.y = 0.;\n        return;\n    }\n    \n    int mode = getMode(fragCoord, iResolution);\n    float dt, Dx, Dy;\n    // y kill factor\n    float K;\n    // x feed factor (also adds to kill)\n    float F;\n    switch (mode) {\n    case 0:\n        dt = .3;\n        Dx = .9;\n        Dy = 0.6;\n        K = 0.09;\n        F = 0.047;\n        break;\n    case 1:\n        dt = .3;\n        Dx = .9;\n        Dy = 0.4;\n        K = 0.0649;\n        F = 0.0167;\n        break;\n    case 2: // Mitosis\n        dt = 1.;\n        Dx = 1.;\n        Dy = 0.4;\n        K = .0645;\n        F = .0385;\n        break;\n    case 3: // Coral\n        dt = 1.;\n        Dx = 1.;\n        Dy = .42;\n        K = .0626;\n        F = .057;\n        break;\n    }\n    \n    float lastX = fragColor.x;\n    float lastY = fragColor.y;\n    vec2 lap = getLap(fragCoord, iChannel0) - fragColor.xy;\n    float reaction = lastX * lastY * lastY;\n    float newX;\n    if (mode < 2) {\n        newX = lastX + dt * (Dx * lap.x - reaction + F);\n    } else {\n        newX = lastX + dt * (Dx * lap.x - reaction + F * (1. - lastX));\n    }\n    float newY = lastY + dt * (Dy * lap.y + reaction - (K + F) * lastY);\n    fragColor.x = clamp(newX, 0., 1.);\n    fragColor.y = clamp(newY, 0., 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    nextStep(fragColor, fragCoord, iResolution, iChannel0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    nextStep(fragColor, fragCoord, iResolution, iChannel0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    nextStep(fragColor, fragCoord, iResolution, iChannel0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}