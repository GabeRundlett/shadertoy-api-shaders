{
    "Shader": {
        "info": {
            "date": "1585462087",
            "description": "Actually I'm really really bored.",
            "flags": 32,
            "hasliked": 0,
            "id": "WdlcRf",
            "likes": 9,
            "name": "I'm having a ball",
            "published": 3,
            "tags": [
                "3d",
                "blur"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 446
        },
        "renderpass": [
            {
                "code": "// Plento\nvec2 R;\nfloat hash( vec2 p ){ return fract(sin(dot(p, vec2(41, 289)))*45758.5453); }\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - .5*R.xy)/R.y;\n    vec2 uv2 = u / R;\n    \n    vec3 col = texture(iChannel0, uv2).xyz;\n    vec3 sum = vec3(0);\n    \n    vec2 tuv = vec2(uv2.x-.5, uv2.y - .5);\n    vec2 dTuv = tuv*.21/float(8);\n    \n    uv2 += dTuv*(hash(uv.xy + fract(iTime)) );\n    \n    for(float i = 0.; i < 8.; i++){\n     \tvec3 temp = texture(iChannel0, uv2).xyz;  \n        sum += temp;\n        uv2 -= dTuv;\n    }\n    sum /= 8.;\n    col = mix(col, sum, length(uv*1.6));\n    \n    f = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 R;\n\n#define A iTime*.5\n#define B cos(iTime*.75)*.5\n\nvec3 hash32(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float d = 0.0, t = 0.;\n    vec3 rp=vec3(0);\n\n    for(int i = 0; i < 60; i++){\n        rp = ro + rd*t;\n        d = length(rp) - 1.9;\n        if(abs(d) <= 0.02)break;\n        if(t >= 20.){t = 20.; break;}\n        t += d * .75;\n    }\n\treturn t;\n}\n\nvec3 bg(vec3 rd){\n    vec2 id = floor(rd.xy*10.);\n    float chk = mod(id.x + id.y, 2.);\n    \n    return hash32(id+floor(iTime*2.)) * chk;\n}\n\nvec3 color(vec3 p, vec3 rd, vec3 n, float t){\n    vec3 ld = vec3(0., .6, -.75);\n    \n\tfloat dif = max(dot(ld, n), 0.0);\n    p.xy*=rot(-iTime*.5);\n    \n    p.x -= A;\n    p.y -= B;\n    \n    vec2 id = floor(p.xy*5.);\n    float chk = mod(id.x + id.y, 2.);\n    vec3 mat = vec3(0.8) * (chk+.1);\n    \n    return mix( mat * dif, bg(rd), step(20., t));\n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - .5*R.xy)/R.y;\n    \n    vec3 ro = vec3(0., .0, -5.);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    vec3 col = vec3(0);\n    \n    float t = march(ro, rd);\n    vec3 p = ro + rd*t;\n    vec3 norm = normalize(p);\n    \n    rd.x += A;\n    rd.y += B;\n    \n    col = color(p,rd, norm, t);\n     \n    f = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}