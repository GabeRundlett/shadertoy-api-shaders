{
    "Shader": {
        "info": {
            "date": "1552769350",
            "description": "Fake particles moving on a contour. Mouse x controls trail length. Mouse y controls speed.",
            "flags": 0,
            "hasliked": 0,
            "id": "tslXWl",
            "likes": 13,
            "name": "Contour Tracing",
            "published": 3,
            "tags": [
                "noise",
                "particles",
                "tracing",
                "contour",
                "movement"
            ],
            "usePreview": 0,
            "username": "mathmasterzach",
            "viewed": 593
        },
        "renderpass": [
            {
                "code": "//uncomment this line to enable grayscale\n//#define GRAYSCALE\n\nconst float PI=acos(-1.);\nconst float AA=2.;\n\nfloat maxComp(vec3 c){\n\treturn max(c.x,max(c.y,c.z));\n}\n\n//from https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//noise functions from https://www.shadertoy.com/view/Msf3WH\nvec2 hash( vec2 p ){\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p ){\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n\t\n}\n\nfloat fNoise(vec2 p){\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    float f=0.;\n    float str=.5;\n    //change the number of iterations in this loop to make the contours more or less wobbly\n    for(int i=0;i<4;i++){\n        f += str*noise(p);\n    \tstr/=2.;\n        p = m*p;\n    }\n\treturn 0.5 + 0.5*f;\n}\n\nvec2 grad(vec2 p){\n    vec2 eps=vec2(.001,0);\n\treturn normalize(vec2(fNoise(p+eps.xy)-fNoise(p-eps.xy),\n                \t\t  fNoise(p+eps.yx)-fNoise(p-eps.yx)));\n}\n//palette from here https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 colorFromBand(vec2 p){\n    float t=hash12(p);\n    return pal(t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n}\n\nvec3 render(vec2 crd,float t, float tc){\n    vec2 uv=2.*crd/iResolution.xy-1.;\n\tfloat sz=iResolution.x/5.;\n\n    float f=fNoise(uv);\n    float n = 5.*hash11(.1*floor(sz*f));\n    vec3 c=vec3(0.);\n    vec2 g=grad(uv);\n    for(float i=0.;i<4.;i+=1.){\n        float s=i*PI/4.;\n        vec2 d = vec2(cos(t+n+s),sin(t+n+s));\n        if(d.y*g.x > d.x*g.y){\n            c+=colorFromBand(vec2(f,i))*max(0.,(tc*dot(d,g)-tc+1.)*(3.*(.5-abs(fract(sz*f)-.5))));\n        }\n    }\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float tc=20.*iMouse.x/iResolution.x+1.;\n    float t=iTime*(2.*iMouse.y/iResolution.x+1.);\n    vec3 c;\n    for(float i=0.;i<AA;i++){\n    \tfor(float j=0.;j<AA;j++){\n    \t\tc+=render(fragCoord+(vec2(i,j)/AA),t,tc);\n    \t}\n    }\n    c/=AA*AA;\n    #ifdef GRAYSCALE\n    \tfragColor = vec4(vec3(maxComp(c)),1.0);\n    #else\n    \tfragColor = vec4(c,1.0);\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}