{
    "Shader": {
        "info": {
            "date": "1574185134",
            "description": "faking 3d normals",
            "flags": 0,
            "hasliked": 0,
            "id": "3sVSWm",
            "likes": 11,
            "name": "Torus 2d",
            "published": 3,
            "tags": [
                "normal"
            ],
            "usePreview": 0,
            "username": "andremichelle",
            "viewed": 525
        },
        "renderpass": [
            {
                "code": "vec3 check(vec2 uv) {\n    return vec3(.02+.02*mod(floor(4.0*uv.x)+floor(4.0*uv.y),2.0));\n}\n\nvec4 over( in vec4 a, in vec4 b ) {\n    return mix(a, b, 1.-a.w);\n}\n\nmat2 rot(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y*2.0;\n    uv *= 1.25;\n    float t = iTime;\n    float rad = .5;\n    float thickness = .1;\n\tfloat len = length(uv);\n   \tfloat delta = abs(rad-len);\n    float a = smoothstep(.01, .0, delta-thickness);\n    vec2 offset = (uv-normalize(uv)*rad)/thickness;\n    float nx = clamp(offset.x, -1., 1.);\n    float ny = clamp(offset.y, -1., 1.);\n    float q = delta/thickness;\n    float nz = clamp(sqrt(1.-q*q), 0., a);\n    vec3 n = normalize(vec3(nx, ny, nz));\n    \n\tmat2 m0 = rot( t*1.4+.4)*sin(t*.4+.2);\n\tmat2 m1 = rot(-t*1.4+.7)*sin(t*.6+.5);\n\tmat2 m2 = rot( t*1.4+.9)*cos(t*.8+.9);\n\n    // light colors\n    vec3 l0c = vec3(1., .3, .1);\n    vec3 l1c = vec3(.1, .3, 1.);\n    vec3 l2c = vec3(.1, 1., .3);\n    // light positions\n    vec3 l0v = vec3(vec2(.9, 0.)* m0, 2.);\n    vec3 l1v = vec3(vec2(.7, 0.)* m1, 2.);\n    vec3 l2v = vec3(vec2(0., 1.)* m2, 2.);\n    // light intensity\n    float li0 = pow(distance(uv, l0v.xy), -1.4);\n    float li1 = pow(distance(uv, l1v.xy), -1.4);\n    float li2 = pow(distance(uv, l2v.xy), -1.4);\n\n    vec4 c = vec4(.0);\n    \n    // background\n    vec3 check = check(uv);\n    c.rgb += check;\n    c.rgb += li0*l0c*check*.1;\n    c.rgb += li1*l1c*check*.1;\n    c.rgb += li2*l2c*check*.1;\n    \n    // point lightning on torus\n    vec3 rc = vec3(.0);\n    rc += pow(max(.0, n.z), 2.)*.1; // top ambient\n    rc += l0c*pow(max(.0, dot(n, normalize(vec3(l0v.xy-uv, l0v.z-n.z)))), 64.)*.25;\n    rc += l1c*pow(max(.0, dot(n, normalize(vec3(l1v.xy-uv, l1v.z-n.z)))), 64.)*.25;\n    rc += l2c*pow(max(.0, dot(n, normalize(vec3(l2v.xy-uv, l2v.z-n.z)))), 64.)*.25;\n    c = over(vec4(rc, a), c);\n\n    // light dots\n    c.rgb += l0c*li0*.002;\n    c.rgb += l1c*li1*.002;\n    c.rgb += l2c*li2*.002;\n   \n    // debug normals\n    // c = over(vec4(n, a), c);\n\n    fragColor = c;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}