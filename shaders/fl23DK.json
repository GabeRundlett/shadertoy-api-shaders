{
    "Shader": {
        "info": {
            "date": "1624747310",
            "description": "raymarching",
            "flags": 32,
            "hasliked": 0,
            "id": "fl23DK",
            "likes": 9,
            "name": "Streeeam",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 434
        },
        "renderpass": [
            {
                "code": "//Copyright (c) 2021 Butadiene\n//Released under the MIT license\n//https://opensource.org/licenses/mit-license.php\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n \n    vec3 col = texture(iChannel0,uv).xyz;\n    \n    \n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define time iTime \nfloat bpm = 175.;\nfloat PI = acos(-1.);\n\nmat2 rot(float r){\n  return mat2(cos(r),sin(r),-sin(r),cos(r));\n  }\n\nvec2 pmod(vec2 p,float n){\n  float np = PI*2.0/n;\n  float r = atan(p.x,p.y)-0.5*np;\n  r = mod(r,np)-0.5*np;\n  return length(p)*vec2(cos(r),sin(r));\n  }\n\nfloat box(vec3 p,vec3 s){\n  vec3 q = abs(p);\n  vec3 m = max(s-q,0.);\n  return length(max(q-s,0.))-min(min(m.x,m.y),m.z);\n  }\n \nfloat kaku(vec3 p,float s){\n  p.y = abs(p.y);\n  p.y -= 0.07*s;\n  p.yz *= rot(PI*0.25);\n  return box(p,s*vec3(0.05,0.08,0.2));\n  }\n \nfloat kakuring(vec3 p,float r,float k){\n  p.xz *= rot(k);\n  float sc = 1.0;\n  \n  p.xz = pmod(p.xz,28.);\n  p.x -= r;\n  return kaku(p,r*0.5);\n  }\n float rand(vec2 st){\n   return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43578.543123);\n   }\n float ease(float t,float k){\n   return 0.5+0.5*cos(PI*exp(-k*t));\n   }\n   vec3 noi1 = vec3(0);\n   float texint = 0.0;\n  void noi_ipt(){\n    float es = 0.0;\n    float kt =floor(time/12.+es);\n    float s1 = rand(vec2(kt,0.));\n    float s2 = rand(vec2(kt,.5));\n    float s3 = rand(vec2(kt,.7));\n    noi1 = vec3(s1,s2,s3);\n    }\n  \n vec4 circring(vec3 p,float ss){\n   vec3 sp = p;\n   vec3 ecp = vec3(0.5,0.2,0.8);\n   vec3 idlist = vec3(0.,2.,4.);\n   if(ss<1.2){\n     ecp = vec3(0.2,0.8,0.2);\n     idlist = vec3(1.,3.,5.);\n     }\n   float id =  idlist.x;\n    vec3 scol = vec3(0.7);\n     if(length(p)<1.2){\n       scol += vec3(ecp.x,ecp.y,ecp.z);\n       }else if(length(p)<2.2){\n         scol += vec3(ecp.z,ecp.x,ecp.y);\n         id = idlist.y;\n         }else{\n           scol += vec3(ecp.y,ecp.z,ecp.x);\n           id = idlist.z;\n           }\n     \n     const int iterate =2;\n     float kp = 1.;\n     \n     float scale = 1.0;\n     for(int i = 0;i<iterate;i++){\n       \n       kp *= 0.4;\n       p.y = abs(p.y)-0.1*kp;\n       float sc = 2./clamp(dot(p,p),2.,8.);\n       p *= sc;\n       scale *= sc;\n       \n       p = p-kp*vec3(0.7,2.,0.7);\n       p.zy *= rot(0.2);\n       }\n     float dectime = 2.0;\n     float ssc = clamp(0.1*mod(time,12.)-id/24.,0.,1.);\n       ssc = -ease(ssc,4.);\n       \n      float d = kakuring(p,1.,4.*ssc*PI-0.3*(6.0-id)*0.2*time)/scale;\n       vec3 col =scol;\n       return vec4(col*exp(-8.0*d)*(.15+0.5*(clamp(1.2/length(sp),0.3,1.0)-0.3)-sin(ssc*PI)),d);\n       \n   } \nvec4 dist(vec3 p){\nfloat s = 1.;\n  vec4 rsd = circring(p,1.);\n  p.xy *= rot(0.5*PI);\n  vec4 rsd2  = circring(p,2.);\n  rsd.w = min(rsd.w,rsd2.w);\n  vec3 col = vec3(1.)*(rsd.xyz+rsd2.xyz);\n  return vec4(col,rsd.w); \n  }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n noi_ipt();\n\tvec2 uv = vec2(fragCoord.x / iResolution.x,fragCoord.y / iResolution.y);\n\n  vec2 p = 2.*(uv-0.5);\n\n  p.y *= iResolution.y/iResolution.x;\n    p *= rot(2.0*PI*rand(vec2(floor(time/12.),0.4)));\n  float rsc = 1.2;\n  float kt = time*0.2;\n  vec3 ro = vec3(rsc*cos(kt),0.7,rsc*sin(kt));\n  vec3 ta = vec3(0);\n  vec3 cdir = normalize(ta-ro);\n  vec3 side = cross(cdir,vec3(0,1,0));\n  vec3 up = cross(side,cdir);\n  vec3 rd = normalize(p.x*side+p.y*up+0.25*cdir);\n  \n  float d,t = 0.1;\n  \n  vec3 ac = vec3(0.);\n  float esp = 0.0001;\n  for(int i = 0;i<86;i++){\n    vec4 rsd = dist(ro+rd*t);\n    d = rsd.w;\n    t += 0.3*d;\n    ac += rsd.xyz;\n    \n    if(d<esp)break;\n   }\n  vec3 col = ac*0.03;\n  \ncol *= 0.6;\n\n   col = pow(clamp(col,vec3(0),vec3(1)),vec3(1.4));\n vec3 bcol = texture(iChannel0,uv).xyz;\n col = mix(col,bcol,0.5);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}