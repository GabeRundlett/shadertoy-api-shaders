{
    "Shader": {
        "info": {
            "date": "1510006463",
            "description": "by greg ",
            "flags": 32,
            "hasliked": 0,
            "id": "Xt2cWy",
            "likes": 13,
            "name": "pastel storm",
            "published": 3,
            "tags": [
                "fbm",
                "feedback",
                "colour"
            ],
            "usePreview": 0,
            "username": "05gash",
            "viewed": 1208
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float pi = 3.1415;\n\n//credit to IQ for these FBM & noise functions https://iquilezles.org/articles/warp\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat noise( in vec2 x )\n{\n\treturn sin(1.5*x.x)*sin(1.5*x.y);\n}\n\nfloat fbm6( vec2 p )\n{\n    float f = 0.0;\n    f += 0.500000*(0.5+0.5*noise( p )); p = m*p*2.02;\n    f += 0.250000*(0.5+0.5*noise( p )); p = m*p*2.03;\n    f += 0.125000*(0.5+0.5*noise( p )); p = m*p*2.01;\n    f += 0.062500*(0.5+0.5*noise( p )); p = m*p*2.04;\n    f += 0.031250*(0.5+0.5*noise( p )); p = m*p*2.01;\n    f += 0.015625*(0.5+0.5*noise( p ));\n    return f/0.96875;\n}\n\nfloat pattern( in vec2 p )\n{\n    float amb = texture(iChannel1, vec2(0.2, 0.1)).x;\n    vec2 q = vec2( fbm6( p + vec2(0.0,0.0) ),\n                  fbm6( p + vec2(5.2,1.3) ) );\n\n    vec2 r = vec2( fbm6( p + 4.0*q + vec2(-1.2,9.2) ),\n                  fbm6( p + 4.0*q + vec2(8.3,2.8) ) );\n\n    return fbm6( p + 4.0*r + sin(iTime/3.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    if(iFrame<1){\n        fragColor = vec4(uv.xy, fbm6(uv), fbm6(uv.yx)); \n    }\n    else{\n        vec4 last = texture(iChannel0, uv);\n     \tfragColor.x += pattern(uv + mod(last.z, 8.)*vec2(sin(iTime/2.), cos(iTime/8.)));\n        fragColor.y += pattern(uv + mod(last.y, 7.)*vec2(sin(iTime/3.), cos(iTime/7.)));\n        fragColor.z += pattern(uv + mod(last.x, 4.)*vec2(sin(iTime/5.), cos(iTime)));\n        fragColor = mix(fragColor, last, sin(fragColor.x + fragColor.y + fragColor.z));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}