{
    "Shader": {
        "info": {
            "date": "1547651949",
            "description": "!! If the audio doesn't play, click the shader preview window right after refreshing the page !!\nMusic: https://soundcloud.com/blokatt/lineman-splice",
            "flags": 96,
            "hasliked": 0,
            "id": "WdlGWX",
            "likes": 33,
            "name": "Heater",
            "published": 3,
            "tags": [
                "retro",
                "music",
                "dither",
                "visualizer",
                "rainbow",
                "feedback",
                "milkdrop"
            ],
            "usePreview": 0,
            "username": "Blokatt",
            "viewed": 2509
        },
        "renderpass": [
            {
                "code": "/*\n\tHeater.\n\tCode and music by @blokatt.\n\t19/02/19\n*/\n\nvec4 ditherHSV(vec3 col, vec2 frag, float depth){    \n    float cols = float(depth);\n    float val = texture(iChannel1, mod(frag / 8., 1.)).r;\n    col = rgb2hsv(col);\n\treturn mix(vec4(hsv2rgb(vec3((floor((col.rgb + val * (1. / cols)) * cols) / cols))), 1.),\n               vec4(hsv2rgb(vec3((((col.rgb + val * (1. / cols)) * cols) / cols))), 1.), .5);\n}\n\nvec4 dither(vec3 col, vec2 frag, int depth){    \n    float cols = float(depth);\n    float val = texture(iChannel1, mod(frag / 8., 1.)).r;\n\treturn vec4((floor((col.rgb + val * (1. / cols)) * cols) / cols), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord/iResolution.xy - .5;    \n\tvec4 col = texture(iChannel0, uv + .5); \n    vec4 d = ditherHSV(col.rgb, fragCoord, 2. - length(uv)) * 1.;      \n    vec4 border = (vec4(1.) + vec4(4.) * smoothstep(7.84, 8.75, dot(vec2(1.), 12. * abs((uv) * rot(0.78539816339)))));\n    vec4 dt = (d * d) / border;\n    //vec4 dt = mix(dither(texture(iChannel0, uv + .5).rgb, fragCoord, 255), d * d, 1.) / border;\n    fragColor = dt * mix(dither(col.rgb, fragCoord, 255), dither(col.rgb, fragCoord, 255) * dither(col.rgb, fragCoord, 8), .75) / border;                 \n    fragColor *= 1. + col.a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float saw(float v, float d){\n    return mod(v, d) * (d - floor(mod(v, d * 2.0)) * (d * 2.0)) + floor(mod(v, d * 2.0)); \n}\n\nvec2 vec2LockIn(vec2 v){\n    return vec2(saw(v.x, 1.), saw(v.y, 1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime * 1.;\n    float lev = smoothstep(.15, .325, texture(iChannel1, vec2(.809, 0.)).r);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    vec2 uvNorm = uv;\n    uvNorm.x *= iResolution.x / iResolution.y;\n    vec2 offset = vec2(.01 * cos(t * .5), .01 * sin(t * .8)) * .1;\n    float sSin = sin(t * .15);\n    float speed = .98 + .021 * sSin - lev * .1;    \n    vec4 light = vec4(0);\n    \n    for (float i = 0.; i < 1.; i += 1. / 12.){ \n        vec2 off = 20. * vec2(.01 * cos(t * (1.5 + .25 * sSin) + i * TAU), .01 * sin(t * (1.8 + .25 * sSin) + i * TAU)) * (.5 + .25 * sSin);\n        float intensity = 1. * min(1., inversesqrt(1.5 - 30. * length(uvNorm + off)));\n        vec4 c = vec4(hsv2rgb(vec3(t * .025 + i * .5, .75, .4 + lev * .1)), 1.);\n    \tlight += c * (max(0., inversesqrt(length(uvNorm + off) * 550.) - .3))  + (inversesqrt(length(uvNorm + off) * 100.) * c * smoothstep(.99 * intensity, .995 * intensity, rand(off + uvNorm + t)));\n    }\n    \n    fragColor = vec4(.985 * (texture(iChannel0, vec2LockIn(rot(iTime * (cos(t * .003) * .0001) + length(uvNorm) * (.01 * sin(t * .2))) * uv * speed + .5 + offset)) + light).rgb, lev);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 33776,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/odditica/lineman-splice"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 dither(vec4 col, vec2 frag, int depth){    \n    float cols = float(depth);\n    float val = texture(iChannel1, mod(frag / 8., 1.)).r;\n\treturn vec4((floor((col.rgb + val * (1. / cols)) * cols) / cols), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;  \n    uv -= .5;\n    fragColor = dither(texture(iChannel0, uv + .5), fragCoord, 255);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PI = 3.141592653589793238462643;\nconst float TAU = PI * 2.;\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nmat2 rot(float a){\n\treturn mat2(cos(a), -sin(a),\n        \t\tsin(a), cos(a));\n}\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}