{
    "Shader": {
        "info": {
            "date": "1453034149",
            "description": "A demo of using shadow maps of a point light to measure volume light.",
            "flags": 32,
            "hasliked": 0,
            "id": "XsKGRz",
            "likes": 32,
            "name": "ShadMap VolLite",
            "published": 3,
            "tags": [
                "volumelight",
                "shadowmap"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 1679
        },
        "renderpass": [
            {
                "code": "//ShadMap VolLite by eiffie\n//I'm posting this because I'm always forgetting how to do the transform.\n\n//Place a camera at the point light and record the depths in ALL directions.\n//Then march thru the volume light area collecting light samples by comparing\n//the distance to the light against the Shadow Map.\n\n//For this demo everything is done in buf A\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//ShadMap VolLite by eiffie\n//I'm posting this because I'm always forgetting how to do the transform.\n//V2.0 because i DID forget it!\n\n//Place a camera at the point light and record the depths in ALL directions.\n//Then march thru the volume light area collecting light samples by comparing\n//the distance to the light against the Shadow Map.\n\n\n//Normally the ShadMap fills buf A then the VolLite piece is done in Image\n#define PI 3.14159\n#define LIGHT_FALLOFF 3.0\n\nfloat sgn(float x){return (x<0.?-1.:1.);}\n\nfloat rand(vec3 co){// implementation found at: lumina.sourceforge.net/Tutorials/Noise.html\n\treturn fract(sin(dot(co*0.123,vec3(12.9898,78.233,112.166))) * 43758.5453);\n}\n\nfloat DE(in vec3 p){\n\tvec3 ap=abs(p);\n\tfloat a=max(ap.x,max(ap.y,ap.z))-1.0;\n\tfloat b=min(max(ap.x,ap.y),max(ap.x,ap.z))-0.5;\n\treturn max(a,-b);\n}\n\nmat3 lookat(vec3 fw){\n\tfw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv=gl_FragCoord.xy/iResolution.xy;\n\tuv*=vec2(2.0,1.0);//stretch to 2x1\n\tvec3 ro,rd,posLight=vec3(0.0,sin(iTime*0.5),0.4*sin(iTime*0.2));\n\tfloat maxdepth=6.0;\n\tbool bShadMap=(uv.x<1.0);\n\tif(bShadMap){//left side\n\t\tuv-=0.5;//center left side at 0\n\t\tuv*=vec2(PI*2.0,PI);//for spherical projection\n\t\tro=posLight;\n\t\trd=vec3(cos(uv.y)*cos(uv.x),sin(uv.y),cos(uv.y)*sin(uv.x));\n\t\tmaxdepth=LIGHT_FALLOFF;\n\t}else{//right side\n\t\tuv-=vec2(1.5,0.5);//center right side at 0\n\t\tro=vec3(cos(iTime),sin(iTime*0.3),sin(iTime))*vec3(5.0,3.0,3.0);\n\t\trd=normalize(vec3(uv,1.0));\n\t\trd=lookat(-ro)*rd;\n\t}\n\t\n\tfloat t=0.0,d,eps=1.0/iResolution.y; //march to surface\n\tfor(int i=0;i<32;i++){\n\t\tt+=d=DE(ro+t*rd);\n\t\tif(d<eps*t || t>maxdepth)break;\n\t}\n\t\n\tif(bShadMap){//left side, store shadow map\n\t\tt=clamp(t/LIGHT_FALLOFF,0.0,0.99); //this isn't needed for our unclamped float buffer\n\t\tfragColor=vec4(vec3(t),1.0);\n\t\treturn;\n\t}\n\t\n\t//right side, brute march thru ray collecting vol light samples compared against shad map\n\tvec3 col=vec3(0.0);\n\tif(d<eps*t)col=vec3(0.1*t);\n\tfloat dt=maxdepth/32.0;\n\tmaxdepth=t;\n\tt=dt*rand(rd);\n\tfor(int i=0;i<32;i++){\n\t\tvec3 p=ro+t*rd;\n\t\tvec3 L=(p-posLight);//light direction for shadow lookup\n\t\td=length(L);\n\t\tif(d<LIGHT_FALLOFF){//ignore if light is too far away\n\t\t\tL/=d;//normalize\n\t\t\tfloat phi=asin(L.y);//transform back to 2d\n\t\t\tvec2 pt=vec2(asin(L.z/cos(phi)),phi);\n            if(L.x<0.0)pt.x=sgn(L.z)*PI-pt.x; //I FORGOT THIS AGAIN!!\n            pt/=vec2(PI*2.0,PI);\n\t\t\tpt+=0.5;//uncenter\n\t\t\tpt*=vec2(0.5,1.0);//left side of texture only in this demo\n\t\t\tif(d<texture(iChannel0,pt).r*LIGHT_FALLOFF){\n\t\t\t\tcol+=vec3(1.0,0.9,0.8)/(1.0+10.0*d*d);\n\t\t\t}\n\t\t}\n\t\tt+=dt;\n\t\tif(t>maxdepth)break;\n\t}\n\tclamp(col,0.0,1.0);\n\tfragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}