{
    "Shader": {
        "info": {
            "date": "1574800201",
            "description": "trying to simulate transverse/longitudinal waves in shadertoy\n\nfar from perfect and i'm sure many optimisations/modifications can be made to both make it cleaner/more efficient and more mathematically accurate\n\nsuggestions welcome",
            "flags": 0,
            "hasliked": 0,
            "id": "WdGSz3",
            "likes": 8,
            "name": "wave sim",
            "published": 3,
            "tags": [
                "2d",
                "waves",
                "simulation"
            ],
            "usePreview": 0,
            "username": "Nitato_",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "// Useful macro for time\n#define time iTime\n// Functions defining a circle, vertical line and horizontal line\nfloat circle (vec2 p, float r)\n{\n\treturn length(p) - r;\n}\nfloat vline (vec2 p) \n{\n\treturn abs(p.x);\n}\nfloat hline (vec2 p)\n{\n\treturn abs(p.y);\n}\n// Merge two objects (used for the circles)\nvec2 merge(vec2 d1, vec2 d2) {\n    return abs(d1).x<abs(d2.x) ? d1 : d2;\n}\n// Repeat function using fract\nvec4 cRep4(vec2 p, float n) \n{\n     vec2 pn = p * n;\n     return vec4(fract(pn) * 2.0 - 1.0, floor(pn)+vec2(1.0));\n}\n//\nfloat asLine(float d) {\n    return smoothstep(.1,.0,abs(d));\n}\n\nfloat asDisc(float d) {\n    return smoothstep(.2,.1,d);\n}\n// Do points of given cell\nvec2 doCell(vec2 local, vec2 cellCoord, vec2 cellOffset) \n{\n    vec2 l = local - cellOffset * 2.0; // adjusted local coords\n    vec2 id = cellCoord + cellOffset; // cell coordinates/id\n    float c = circle(l+vec2(sin(time*1.7+id.x*id.y*-.02)*id.y*.2, cos(time*1.7+id.x*id.y*-.02)*id.y*.2), .1);\n    return vec2(c, id.x*id.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv = Pixel normalised coordinates\n\tvec2 uv = (2.*fragCoord-iResolution.xy )/iResolution.y;\n    // Lines to form divisions between panels\n    float line1 = smoothstep(.01, .02, vline(uv));\n    float line2 = smoothstep(.01, .02, hline(uv));\n    \n    //Checking which area the current pixel is in and running the appropriate code for that panel\n    if (uv.x < 0. && uv.y < 0.) \n    {   \n        // Bottom left panel\n    \tuv = uv + vec2(.9, .51);\n    \t\n        // c1 is the large circle, c2 is the moving one\n    \tfloat c1 = smoothstep(.02, .001, abs(circle(uv, (.4))));\n    \tfloat c2 = smoothstep(.02, .01, circle(uv+vec2(sin(time*2.), cos(time*2.))*.4, (.05)));\n        \n        fragColor = vec4(vec3(c1+c2, .1, .1)*line1*line2, 1.0);\n    }\n    else if (uv.y > 0.)\n    {\t\n        // Top panel\n  \n        float surface = 13.;                     \n        vec4 cell = cRep4(uv, 15.);\n        vec2 dist = vec2(100.0,0);\n        // Looking at neighbouring and displaying dots leaking from other cells to prevent cutoff\n        if(cell.w<surface-2.) {\n            dist = merge(dist, doCell(cell.xy, cell.zw, vec2(-1,1)));\n            dist = merge(dist, doCell(cell.xy, cell.zw, vec2(1,1)));\n            dist = merge(dist, doCell(cell.xy, cell.zw, vec2(0,1)));\n        }\n        if(cell.w<surface-1.) {\n            dist = merge(dist, doCell(cell.xy, cell.zw, vec2(0.0)));\n            dist = merge(dist, doCell(cell.xy, cell.zw, vec2(1,0)));\n            dist = merge(dist, doCell(cell.xy, cell.zw, vec2(-1,0)));\n        }\n        if(cell.w<surface) {\n        \tdist = merge(dist, doCell(cell.xy, cell.zw, vec2(1,-1)));\n        \tdist = merge(dist, doCell(cell.xy, cell.zw, vec2(-1,-1)));\n        \tdist = merge(dist, doCell(cell.xy, cell.zw, vec2(0,-1)));\n        }\n            \n        \n        fragColor = vec4(vec3(asDisc(dist.x), .1, .1), 1.);//vec4(vec3(c3, .1, .1)*line2, 1.0);\n    }\n    else\n    { \t\n        // Bottom right panel\n     \t// Defining the plane waves, i.e. lines\n     \tfloat planewave = sin(uv.x*30.+iTime*10.)*.7+.3;\n    \n    \tfragColor = vec4(planewave*.7, .1, .1, 1.)*line1*line2;       \n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}