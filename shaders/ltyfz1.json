{
    "Shader": {
        "info": {
            "date": "1541785387",
            "description": "twisted :)",
            "flags": 0,
            "hasliked": 0,
            "id": "ltyfz1",
            "likes": 9,
            "name": "Raymarch anything (twist)",
            "published": 3,
            "tags": [
                "raymarch",
                "anything"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 668
        },
        "renderpass": [
            {
                "code": "// you can literally raymarch anything :)\nfloat Turb(vec2 p)\n{\n\tp*=0.25;\n\tp.x *= 0.7;\n\tfloat ti = iTime*0.125;\n\tp.y += ti;\n\tvec2 i = p;\n\t\n\tfloat c = -0.1;\n\tfloat inten = 0.15;\n\tfloat r = length(p+vec2(sin(ti),sin(ti*0.433))*2.);\n\t\n\tfor (float n = 0.0; n < 4.0; n+=1.0)\n\t{\n\t\tfloat t = r-ti * (1.0 - (1.9 / (n+1.)));\n\t\t      t = r-ti/(n+0.6);\n\t\ti -= p.yx + vec2(\n\t\t\tcos(t*0.1 - i.x-r) + sin(t*0.1 + i.y), \n\t\t\tsin(t*0.7 - i.y) + cos(t*0.4 + i.x)+r\n\t\t);\n\t\tc += 1.0/length(vec2(\n\t\t\t(sin(i.x+t)/inten),\n\t\t\t(cos(i.y+t)/inten)\n\t\t\t)\n\t\t);\n\t}\n\tc = smoothstep(0.0,1.0,c*0.75);\n\treturn c * 0.3;\n}\n\nmat2 rotate(float a)\n{\n\tfloat c = cos(a),\n\t\ts = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n\n\nfloat map(vec3 p)\n{\n\tp.xy *= rotate(p.z * .07 + iTime * .2);\n    \n\tp.x + sin(p.z+iTime)*0.5;\n\tp.x *= sign(p.y);\t// mirror top->bottom\n\tfloat k = Turb(p.xz);\n\treturn sin((iTime*3.0)+p.z*0.25)+8.5 -abs(p.y) - k;\n}\n\nvec3 normal(vec3 p) {\n\tvec2 e = vec2(.001, 0.);\n\tvec3 n;\n\tn.x = map(p + e.xyy) - map(p - e.xyy);\n\tn.y = map(p + e.yxy) - map(p - e.yxy);\n\tn.z = map(p + e.yyx) - map(p - e.yyx);\n\treturn normalize(n);\n}\n\nvec3 render(vec2 uv)\n{\n\tvec3 ro = vec3(sin(iTime)*0.25, cos(iTime)*0.25, iTime*0.75);\n\tvec3 rd = normalize(vec3(uv, .5));\n\tvec3 p = vec3(0.);\n\tfloat t = 0.;\n\tfor (int i = 0; i < 80; i++)\n    {\n\t\tp = ro + rd * t;\n\t\tfloat d = map(p);\n\t\tif (d < .001 || t > 100.) break;\n\t\tt += .5 * d;\n\t}\n\tvec3 l = ro;\n\tvec3 n = normal(p);\n\tvec3 lp = normalize(l - p);\n\tfloat diff = .7 * max(dot(lp, n), 0.);\n\treturn vec3(diff*0.54,diff*2.8,diff*1.85) / (1. + t * t * .01);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 col = render(uv);\n\tfragColor = vec4(col, 1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}