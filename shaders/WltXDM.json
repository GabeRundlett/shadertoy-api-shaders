{
    "Shader": {
        "info": {
            "date": "1581129867",
            "description": "Glittering orb",
            "flags": 0,
            "hasliked": 0,
            "id": "WltXDM",
            "likes": 11,
            "name": "Glittering orb",
            "published": 3,
            "tags": [
                "raymarching",
                "orb",
                "fresnel",
                "glitter"
            ],
            "usePreview": 1,
            "username": "Ref",
            "viewed": 869
        },
        "renderpass": [
            {
                "code": "#define STEPS 100\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n#define EPSILON 0.0001\n\nmat3 rotY(float angle)\n{\n    return mat3\n        (\n            cos(angle),\t\t0,\t\tsin(angle),\n            0,\t\t\t\t1.0,\t0,\n            -sin(angle),\t0,\t\tcos(angle)\n        );\n}\n\nfloat lambert(vec3 normal, vec3 lightPos)\n{\n\treturn max(dot(normal, lightPos), 0.05);\n}\n\nfloat sdSphere(vec3 pos, vec3 center, float radius)\n{\n    return length(pos - center) - radius;\n}\n\nvec3 sdSphereNormal(vec3 pos, vec3 center, float radius)\n{\n\tconst vec2 eps = vec2(0.01, 0.0);\n    return normalize\n\t(\tvec3\n     \t(\tsdSphere(pos + eps.xyy, center, radius) - sdSphere(pos - eps.xyy, center, radius),\n\t\t\tsdSphere(pos + eps.yxy, center, radius) - sdSphere(pos - eps.yxy, center, radius),\n\t\t\tsdSphere(pos + eps.yyx, center, radius) - sdSphere(pos - eps.yyx, center, radius)\n\t\t)\n\t);\n}\n\nfloat sdSphereRender(vec3 pos, vec3 center, float radius, vec3 lightPos)\n{\n\tvec3 normal = sdSphereNormal(pos, center, radius);\n\treturn lambert(normal, lightPos);\n}\n\nfloat sdSphereRaymarch(vec3 pos, vec3 dir, vec3 center, float radius, int steps, float minDist, float maxDist)\n{\n    float curDist = minDist;\n\tfor(int i = 0; i < steps; i++)\n\t{\n\t\tfloat dist = sdSphere(pos + curDist * dir, center, radius);\n\t\tif(dist < EPSILON) return curDist;\n\t\tcurDist += dist;\n\t}\n\treturn maxDist;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float res = min(iResolution.x, iResolution.y);\n    vec2 p = (fragCoord.xy - 0.5 * iResolution.xy) / res;\n    vec2 um = (iMouse.xy - 0.5 * iResolution.xy) / res;\n    \n    float a = 0.6 - 0.35 * iTime - um.x * 6.0;\n\tvec3 cam = vec3(0.0, 1.0, 5.5) * rotY(a);\n    vec3 tgt = vec3(0.0, 0.0, 0.0);\n    \n    vec3 ww = normalize(tgt - cam);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    vec3 ray = normalize(p.x * uu + p.y * vv + 1.5 * ww);\n\t\n    vec3 center = vec3(0, 0, 0);\n    float radius = 1.5;\n    vec3 light = normalize(vec3(2.0, 4.0, 3.0));\n\t\n    float d = sdSphereRaymarch(cam, ray, center, radius, STEPS, MIN_DIST, MAX_DIST);\n    vec3 sphere = cam + ray * d;\n    float f = sdSphereRender(sphere, center, radius, light);\n    vec3 n = sdSphereNormal(sphere, center, radius);\n    \n    float fresnel = pow(1.0 + dot(n, ray), 0.75);\n    float sparkles = pow(max(dot(normalize(textureLod(iChannel0, sphere * 2.0, 0.0).rgb - 0.5), ray), 0.0), 250.0);\n\t\n    vec3 sphereColor = vec3(0.0, 0.7, 1.0);\n    vec3 emissiveColor = vec3(0.3, 0.0, 1.0);\n    vec3 skyColor = vec3(0.04, 0.05, 0.15);\n    \n    vec3 col = mix(sphereColor, emissiveColor, fresnel);\n    col += sparkles * (1.0 - clamp(fresnel, 0.0, 1.0));    \n    col = mix(col * f, skyColor, step(MAX_DIST - EPSILON, d));\n    //col = mix(textureLod(iChannel0, sphere * 2.0, 0.0).rgb, skyColor, step(MAX_DIST - EPSILON, d));\n    //col = mix(n, skyColor, step(MAX_DIST - EPSILON, d));\n    \n    col = pow(col, vec3(1.0 / 2.2));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}