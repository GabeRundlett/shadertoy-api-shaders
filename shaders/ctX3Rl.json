{
    "Shader": {
        "info": {
            "date": "1672431749",
            "description": "Sierpinski triangle. It renders almost instantly rather than taking hours, because there's actually a separate chaos game running for every column of pixels in the image. You can also click to define start pos. https://en.wikipedia.org/wiki/Chaos_game",
            "flags": 32,
            "hasliked": 0,
            "id": "ctX3Rl",
            "likes": 4,
            "name": "Chaos game sierpinski",
            "published": 3,
            "tags": [
                "fractal",
                "chaos"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, in vec2 U ){\n    O = texture(iChannel0, U/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, in vec2 U )\n{\n\n    if (U.y < 1.0){//set this to 1 for peak performance\n        float ratio = iResolution.y/iResolution.x;\n        ratio/=cos(3.1415926/6.0);\n        float gap = (1.0-ratio)/2.0;\n        points[0] = vec2(gap, 0);\n        points[1] = vec2(1.0-gap, 0);\n        points[2] = vec2(0.5, 1);\n        \n\n        vec2 uv = U/iResolution.xy;\n        vec2 point = texture(iChannel0, vec2(uv.x, 0)).xy;\n\n        vec2 target;\n\n\n\n        float rand = rand(vec2(mod(iTime, 20.73)*uv.x + float(iFrame), -mod(iTime, 23.57)*mod(iTime, 17.23)+uv.x / float(iFrame)));\n        rand *= float(points.length());\n        rand = floor(rand);\n        int index = int(rand);\n\n        target = points[index];\n\n        O.xy = mix(target, point, 0.5);\n        \n        if (iFrame == 0 || iMouse.z > 0.){ \n            O.xy = points[0];\n            if (iMouse.z > 0.) O.xy = iMouse.xy/iResolution.xy;\n        }\n\n    } else { O = vec4(0); }\n    \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = U/iResolution.xy;\n\n    O = texture(iChannel1, uv);\n    if (iMouse.z > 0.) O = vec4(0);\n    vec2 point = texture(iChannel0, uv).xy;\n    int width = int(iResolution.x);\n    \n    for(int i = 0; i<width; i++)\n    {\n        point = texelFetch(iChannel0, ivec2(i, 0), 0).xy;\n        if (length(uv.xy - point.xy) < 1.0/iResolution.x)\n        {\n            O += vec4(0.2);\n        }\n\n    }\n    \n    //fragColor = vec4(max(0.0, fragColor.x - 0.01/(iTime)));\n    //fragColor -= vec4(0.002);\n    //^ uncomment this line if you want to render in full screen.  Then reset time and go to fullscreen asap (<1 second)\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\n//bias: 0.17353355999581582 ( very probably the best of its kind )\nuint lowbias32(uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\n\n// bias: 0.020888578919738908 = minimal theoretic limit\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nvec2 points[3];",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}