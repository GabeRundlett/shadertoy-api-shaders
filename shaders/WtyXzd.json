{
    "Shader": {
        "info": {
            "date": "1583340099",
            "description": "Left: log2(y)  Right: IEEEexponent(y)\ndoes optimizer knows that exp2(floor) and floor(log2) are trivial op ?\nNB: length of floatBitsToInt name + storing exponent sign as uint + offset instead of signed int prevents using that for golfing floor(log2()) :-)",
            "flags": 0,
            "hasliked": 0,
            "id": "WtyXzd",
            "likes": 4,
            "name": "exponent via floatBitsToInt",
            "published": 3,
            "tags": [
                "test",
                "float",
                "exponent",
                "mantissa",
                "floatbitstoint",
                "ieee754",
                "ieee754"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 422
        },
        "renderpass": [
            {
                "code": "// https://en.wikipedia.org/wiki/Single-precision_floating-point_format#Precision_limits_on_integer_values\n// https://en.wikipedia.org/wiki/IEEE_754\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n\n    vec2  R = iResolution.xy,                       \n          U = u / R;\n    float N = 12., \n          y = exp2(N) * U.y;\n    \n    O = int(u)==int(R)/2 ? vec4(1,0,0,1)  // red separator\n      : vec4(  U.x < .5 \n                   ? int( log2( y ))                // left\n                   : (floatBitsToInt(y) >> 23) -127 // right\n            ) /N ;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}