{
    "Shader": {
        "info": {
            "date": "1494923518",
            "description": "Rotation phase linked to frequency",
            "flags": 64,
            "hasliked": 0,
            "id": "MdlBzH",
            "likes": 4,
            "name": "Audioreactive Spider",
            "published": 3,
            "tags": [
                "fft",
                "audioreactive"
            ],
            "usePreview": 0,
            "username": "apazat",
            "viewed": 837
        },
        "renderpass": [
            {
                "code": "#pragma autoreload;\n#pragma shadertoy;\n#pragma input iChannel0 audio\n#define PI 3.14/2.\n\nfloat circle(vec2 uv, vec2 pos, float radius){\n    return smoothstep(0.0,0.006,radius-length(uv + pos));\n}\n\nfloat freqs[9];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1. + 2.*fragCoord.xy / iResolution.xy;// Remap the space to [-1;1]\n    uv.x *= iResolution.x/iResolution.y;// Aspect ratio correction (x*x square)\n    vec3 color = vec3(0.);// Default background color to black\n    \n    float f = .8;\n    float r = .05;\n    float s = .01;\n    float a = 2.;\n    freqs[0] = texture( iChannel0, vec2( f-4.*s, 0.25 ) ).x;\n    freqs[1] = texture( iChannel0, vec2( f-3.*s, 0.25 ) ).x;\n    freqs[2] = texture( iChannel0, vec2( f-2.*s, 0.25 ) ).x;\n    freqs[3] = texture( iChannel0, vec2( f-s, 0.25 ) ).x;\n    \n    freqs[4] = texture( iChannel0, vec2( f, 0.25 ) ).x;\n    \n    freqs[5] = texture( iChannel0, vec2( f+s, 0.25 ) ).x;\n    freqs[6] = texture( iChannel0, vec2( f+2.*s, 0.25 ) ).x;\n    freqs[7] = texture( iChannel0, vec2( f+3.*s, 0.25 ) ).x;\n    freqs[8] = texture( iChannel0, vec2( f+4.*s, 0.25 ) ).x;\n    \n    color += circle(uv, vec2(.2*sin(iTime+a*freqs[0]),.2*cos(iTime+a*freqs[0])), r);\n    color += circle(uv, vec2(.4*sin(iTime+a*freqs[1]),.4*cos(iTime+a*freqs[1])), r);\n    color += circle(uv, vec2(.6*sin(iTime+a*freqs[2]),.6*cos(iTime+a*freqs[2])), r);\n    color += circle(uv, vec2(.8*sin(iTime+a*freqs[3]),.8*cos(iTime+a*freqs[3])), r);\n    \n    color += circle(uv, vec2(.2*sin(iTime+a*freqs[0]+PI),.2*cos(iTime+a*freqs[0]+PI)), r);\n    color += circle(uv, vec2(.4*sin(iTime+a*freqs[1]+PI),.4*cos(iTime+a*freqs[1]+PI)), r);\n    color += circle(uv, vec2(.6*sin(iTime+a*freqs[2]+PI),.6*cos(iTime+a*freqs[2]+PI)), r);\n    color += circle(uv, vec2(.8*sin(iTime+a*freqs[3]+PI),.8*cos(iTime+a*freqs[3]+PI)), r);\n    \n    color += circle(uv, vec2(0.), freqs[4]*r);\n    \n    color += circle(uv, vec2(-.2*sin(iTime+a*freqs[4]),-.2*cos(iTime+a*freqs[4])), r);\n    color += circle(uv, vec2(-.4*sin(iTime+a*freqs[5]),-.4*cos(iTime+a*freqs[5])), r);\n    color += circle(uv, vec2(-.6*sin(iTime+a*freqs[6]),-.6*cos(iTime+a*freqs[6])), r);\n    color += circle(uv, vec2(-.8*sin(iTime+a*freqs[7]),-.8*cos(iTime+a*freqs[7])), r);\n    \n    color += circle(uv, vec2(-.2*sin(iTime+a*freqs[4]+PI),-.2*cos(iTime+a*freqs[4]+PI)), r);\n    color += circle(uv, vec2(-.4*sin(iTime+a*freqs[5]+PI),-.4*cos(iTime+a*freqs[5]+PI)), r);\n    color += circle(uv, vec2(-.6*sin(iTime+a*freqs[6]+PI),-.6*cos(iTime+a*freqs[6]+PI)), r);\n    color += circle(uv, vec2(-.8*sin(iTime+a*freqs[7]+PI),-.8*cos(iTime+a*freqs[7]+PI)), r);\n    \n    \n    \n    //   color += vec3(1./distance(uv, pos)*.08);// Compute the inverse of the distance (white if near the position, black if far)\n    //\tcolor = smoothstep(.98, 1., color)*A1;// Threshold to have clean balls\n    \n    fragColor = vec4(color,1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 8669,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/roberthood/floorplan-never-grow-old-re"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}