{
    "Shader": {
        "info": {
            "date": "1678313223",
            "description": "Using Spiral Philytaxis to compare dithering between a hacky random dither and the sampling disk produced by phylotaxis.  Phylotaxis looks like it has some of the characteristics of blue noise so, why not?  Perhaps a model of receptors in the eye?  ",
            "flags": 0,
            "hasliked": 0,
            "id": "dsG3zw",
            "likes": 7,
            "name": "Fibonacci Dithering",
            "published": 3,
            "tags": [
                "raytracing",
                "dithering",
                "phylotaxis"
            ],
            "usePreview": 0,
            "username": "delajor",
            "viewed": 264
        },
        "renderpass": [
            {
                "code": "vec3 eval(vec2 uv, vec2 cen){\n    float sdf = length(uv - cen);\n    // Time varying pixel color\n    float c0 = step(sdf, 0.25);\n    float c1 = 1.0 - step(sdf, 0.15);\n    vec3 col = vec3(1.0 - c0*c1);\n    \n    return col;\n}\n\n#define PI     3.1415926535897932384626433832795028841971\n#define TWO_PI 2.0 * PI\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\nvec2 randv2(vec2 co){ return vec2(rand(co), rand(co + vec2(7607.0, 6211.0))) - vec2(0.5); }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 pxy = 1.0 /iResolution.xy;\n    vec2 uv = fragCoord*pxy;\n    float md = 4.0;\n\n    vec2 pxm = vec2(1.0, md * iResolution.y / iResolution.x);\n\n\n    vec2 uvm = uv;\n    //uvm *= pxm;\n    uvm.x = md * mod(uvm.x, 1.0 / md);\n    uvm -= vec2(0.5, 0.5);\n    uvm *= pxm;\n    //uvm.y *=  iResolution.x / iResolution.y;\n    //uvm.y -= 0.5 * iResolution.x / iResolution.y / md;\n    const int N = 128;\n    if(uv.x < 1.0 / md){\n        //uv = (uv + vec2(0.33, 0.0)) * pyy / pxy ;\n\n        vec2 cen = vec2(0.0, 0.0);            \n        vec3 col = eval(uvm, cen);\n        fragColor = vec4(col ,1.0);\n\n    } else if(uv.x < 2.0 / md){\n        //uv = (uv + vec2(0.33, 0.0)) * pyy / pxy ;\n\n        vec2 cen = vec2(0.0, 0.0);\n        \n        vec3 col = vec3(0.0);\n        vec2 prnd = uvm;\n\n        for(int i = 0; i < N; i++){\n            vec2 rpx = randv2(prnd);\n            vec2 uvr = uvm + 100.0 * rpx * pxy/pxm;\n            prnd = float(i) * uvr;\n            \n            col += eval(uvr, cen);\n        }\n\n        col /= float(N);\n\n        // Output to screen\n        fragColor = vec4(col ,1.0);\n\n    } \n    else if(uv.x < 3.0 / md){\n\n        float c = 0.025;\n        vec2 center = vec2(0.0, 0.0);\n        vec2 _uv = uvm - center;\n        float minDiff = 1.;\n        float index = 0.;\n        \n        for(float i = 0.; i < float(N); i++) {\n            //float angle = 137.5009 * i;\n            float phi = 0.5 * (1.0 +  sqrt(5.0));\n            float angle = 2.0 * PI * i * float(N) / phi;\n            float radius = c * sqrt(i);\n            float x = radius * cos(angle);\n            float y = radius * sin(angle);\n            vec2 pos = vec2(x, y);\n            float diff = abs(distance(pos, _uv)) * 60.;\n            if(diff < minDiff) {\n                minDiff = diff;\n                index = i + 1.;\n            }\n        }\n        \n        minDiff = smoothstep(0., .5, minDiff);\n        minDiff = minDiff * minDiff;\n        //minDiff = 1. - minDiff;\n        float r = minDiff * 1.0;\n        float g = minDiff * 1.0;\n        float b = minDiff * 1.0;\n\n        fragColor = vec4(r, g, b, 1);\n    } \n    else{\n        float time = iTime + 1.;\n \n        vec2 center = vec2(0.0, 0.0);\n        vec2 _uv = uvm - center;\n        float minDiff = 1.;\n        float index = 0.;\n        vec3 col = vec3(0.0);\n        float r = 50.0 / sqrt(float(N));\n        for(float i = 0.; i < float(N); i++) {\n            float angle = 137.5009 * i + rand(uvm);\n            float radius = r*sqrt(i);\n            float x = radius * cos(angle);\n            float y = radius * sin(angle);\n            vec2 pos = vec2(x, y)* pxy/pxm;\n            col += eval(uvm + pos, center);\n        }\n        \n        col /= float(N);\n        // Output to screen\n        fragColor = vec4(col ,1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}