{
    "Shader": {
        "info": {
            "date": "1590259909",
            "description": "coded live in 2 hours at outline online 2020 during the shader freestyle. code quality and performance is no good XD",
            "flags": 0,
            "hasliked": 0,
            "id": "wdSBzG",
            "likes": 39,
            "name": "Outline 2020 Freestyle Session",
            "published": 3,
            "tags": [
                "freestyle"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 809
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax,p)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat linedist(vec3 p, vec3 a, vec3 b) {\n  float k = dot(p-a,b-a)/dot(b-a,b-a);\n  return distance(p, mix(a,b,clamp(k,0.,1.)));\n}\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n  float k = dot(p-a,b-a)/dot(b-a,b-a);\n  return distance(p, mix(a,b,clamp(k,0.,1.)));\n}\n\nfloat smin(float a, float b, float k) {\n  float h = max(0.,k-abs(b-a))/k;\n  return min(a,b)-h*h*h*k/6.;\n}\n\nfloat box(vec4 p, vec4 d) {\n  vec4 q = abs(p)-d;\n  return length(max(q,0.)) + min(0., max(max(q.x,q.y),max(q.z,q.w)));\n}\nfloat box(vec3 p, vec3 d) {\n  vec3 q = abs(p)-d;\n  return length(max(q,0.)) + min(0., max(q.x,max(q.z,q.y)));\n}\n\nvec4 wrot(vec4 p) {\n  return vec4(dot(p,vec4(1.)), p.yzw + p.zwy - p.wyz - p.xxx)/2.;\n}\n\nfloat sep;\nfloat t;\nfloat plane;\nfloat obj;\nfloat hiddenball;\nfloat clouds(vec3 p) {\n  \n  p = erot(p,normalize(vec3(2,3,1)),2.123);\n  float d1 = length(abs(asin(sin(p))*.9))-1.;\n  p = erot(p,normalize(vec3(1,2,3)),2.453);\n  float d2 = length(abs(asin(sin(p))*.9))-1.;\n  p = erot(p,normalize(vec3(3,2,1)),0.7821);\n  float d3 = length(abs(asin(sin(p))*.9))-1.;\n  return (d1+d2+d3)/3.;\n}\n\nfloat airplane(vec3 p) {\n  float pln = linedist(p, vec3(.4,0,0), vec3(-.6,0,0))-.1-cos(p.x*2.)*.1;\n  float wingskel = linedist(p.xy, vec2(0,.6), vec2(0,-.6))-.15;\n  float wing = linedist(vec2(wingskel, p.z), vec2(-.04,0), vec2(-1,0))-.04;\n  float tail = linedist(p, vec3(-.65,0,0), vec3(-.85,0,.2))-.13;\n  float ruddskel = linedist(p.xy, vec2(-.9,.3), vec2(-.9,-.3))-.1;\n  float rudd = linedist(vec2(ruddskel, p.z), vec2(-.04,.28), vec2(-1,.28))-.03;\n  return smin(min(rudd,wing), smin(tail,pln,0.2),.1);\n}\n\nfloat blimp(vec3 p) {\n  float blmp = linedist(p, vec3(.6,0,0), vec3(-.7,0,0))-.4-cos(p.x*2.)*.1;\n  float carriage = linedist(p, vec3(.3,0,-.5), vec3(-.3,0,-.5))-.15;\n  p.yz = abs(p.yz);\n  p.yz = vec2(max(p.y,p.z),min(p.y,p.z));\n  float ruddskel = linedist(p.xy, vec2(-1.,.3), vec2(-.8,-.3))-.2;\n  float rudd = linedist(vec2(ruddskel, p.z), vec2(-.04,.0), vec2(-1,.0))-.03;\n  return min(min(carriage,blmp),rudd);\n}\n\nfloat hotair(vec3 p) {\n  p.z -= .4;\n  float ht = length(p)-.7;\n  float dimpl = linedist(p, vec3(0), vec3(0,0,-.8))-.2;\n  float hollow = linedist(p, vec3(0), vec3(0,0,-1.3))-.18;\n  float carriage = box(p-vec3(0,0,-1.3), vec3(.12))-.05;\n  carriage = -min(-carriage, box(p-vec3(0,0,-1.), vec3(.12, .12, .3)));\n  p.xy = abs(p.xy);\n  float lines = linedist(p, vec3(0.1,0.1,-.5), vec3(.1,.1,-1.3))-.01;\n  return min(-smin(-smin(ht, dimpl, 0.4),hollow,.01), min(lines,carriage));\n}\n\nfloat helicopter(vec3 p) {\n  float body = linedist(p, vec3(.2,0,0), vec3(-.2,0,0))-.35;\n  body = smin(body, linedist(p, vec3(.2,0,-.2), vec3(-1.,0,-.2))-.2, .2);\n  float tail = linedist(p, vec3(-1.1,0,-.2), vec3(-1.3,0,0))-.13;\n  body = smin(body,tail,.1);\n  vec3 p2 = p;\n  p2.x -= -1.3;\n  p2 = erot(p2, vec3(0,1,0), iTime);\n  p2.y -=0.15;\n  p2.y=abs(p2.y);\n  p2.xz = abs(p2.xz);\n  p2.zx = vec2(max(p2.x,p2.z),min(p2.x,p2.z));\n  p = erot(p, vec3(0,0,1), iTime);\n  p.z -=0.44;\n  p.yx = abs(p.yx);\n  p.yx = vec2(max(p.y,p.x),min(p.y,p.x));\n  \n  float wingskel = linedist(p.xy, vec2(0,.6), vec2(0,-.6))-.1;\n  float wing = linedist(vec2(wingskel, p.z), vec2(-.04,0), vec2(-1,0))-.04;\n  float wingskel2 = linedist(p2.xz, vec2(0,.2), vec2(0,-.23))-.06;\n  float wing2 = linedist(vec2(wingskel2, p2.y), vec2(-.04,0), vec2(-1,0))-.02;\n  return min(body,min(wing,wing2));//smin(min(rudd,wing), smin(tail,pln,0.2),.1);\n  \n}\n\nfloat scene(vec3 p) {\n  float fl = p.z + 5.;\n  \n  vec3 pp = p;\n  pp.y = asin(sin(pp.y/sep))*sep;\n  float roll = pow(sin(fract(t*.03)*3.14/2.),50.) + floor(t*.03);\n  pp = erot(pp, vec3(1,0,0),roll*acos(-1.)*2.);\n  pp = erot(pp, vec3(0,1,0),sin(t)*.4);\n  pp = erot(pp, vec3(0,0,1),cos(t*.5)*.2);\n  pp.z += cos(t)*.3;\n  pp.y += -sin(t*.5)*.2;\n  float air = airplane(pp);\n  float blmp = blimp(pp);\n  float hot = hotair(pp);\n  float heli = helicopter(pp);\n  float mixval_a = smoothstep(-.25,.25,sin((iTime+1.)/2.));\n  float mixval_b = smoothstep(-.15,.15,sin((iTime+1.)/4.));\n  plane = mix(mix(hot, heli, mixval_a), mix(blmp, air, mixval_a), mixval_b);\n  //plane = \n  \n  \n  p.x += mod(t,1000.);\n  vec3 p2 = p;\n  p2 = erot(p2, vec3(0,0,1),.31233);\n  p2.xy = asin(sin(p2.xy/3.)*.97)*3.+3.;\n  p2.z += 4.;\n  p2 = erot(p2, vec3(0,0,1),t*.3);\n  p2 = erot(p2, vec3(0,1,0),t*.2);\n  p2 = erot(p2, vec3(1,0,0),t*.1);\n  obj = length(min(1.-abs(p2),0.6))-.7;\n  \n  \n  p = erot(p,normalize(vec3(2,3,1)),2.123);\n  float d1 = dot(abs(asin(sin(p))*.9),vec3(1))/sqrt(3.)-1.;\n  p = erot(p,normalize(vec3(1,2,3)),2.453);\n  float d2 = dot(abs(asin(sin(p))*.9),vec3(1))/sqrt(3.)-1.;\n  p = erot(p,normalize(vec3(3,2,1)),0.7821);\n  float d3 = dot(abs(asin(sin(p))*.9),vec3(1))/sqrt(3.)-1.;\n  \n  \n  \n  float ground = mix((d1+d2+d3)/2.5, fl,0.2);\n  vec4 reproj = vec4(ground, asin(sin(p*5.))/5.);\n  float mx = cos(iTime*.3-fl*.3)*.5+.5;\n  mx = smoothstep(0.4,.6,mx);\n  mx = smoothstep(0.,1.,mx);\n  reproj = mix(wrot(reproj), reproj,mx);\n  ground = box(reproj,vec4(.02,.27,.27,.27))-0.04;\n  hiddenball = length(reproj+vec4(.2,0,0,0))-.2;\n  ground = min(ground, hiddenball);\n  return min(min(obj,ground), plane);\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.03);\n  return normalize(scene(p)-vec3(scene(k[0]), scene(k[1]), scene(k[2])));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord - iResolution.xy*.5)/iResolution.y;\n\n  float sc = smoothstep(.5,.6,cos(iTime/10.+3.));\n  t = pow(sin(fract(iTime*.4)*3.14/2.),70.)*2. + floor(iTime*.4)*2. + iTime*.9 + 2.;\n  sep = 2.+cos(t*.4);\n  vec3 cam = normalize(vec3(1, uv));\n  vec3 init = vec3(-5.+sin(t), 0, 0) + cam;\n  cam = erot(cam,vec3(0,1,0),.7-sc*.3);\n  init = erot(init,vec3(0,1,0),.7-sc*.3);\n  float zrot = t*.3;\n  cam = erot(cam,vec3(0,0,1),zrot);\n  init = erot(init,vec3(0,0,1),zrot); \n  init.z -= sc*4.;\n  \n\n  vec3 p = init;\n  bool hit = false;\n  float dist;\n  bool triggered = false;\n  bool outline = false;\n  float glow = 0.;\n  for (int i = 0; i < 150 && !hit; i++) { \n    dist = scene(p);\n    glow += 1./(hiddenball*500.+1.);\n    if (!triggered) triggered = dist < 0.03;\n    if (triggered) {\n      float ol = 0.05-dist;\n      outline = ol < dist;\n      dist = min(ol,dist);\n    }\n    hit = dist*dist < 1e-6;\n    p+=cam*dist;\n  }\n  vec3 p2 = init;\n  for (int i = 0; i < 30; i++) {\n    float dd = abs(clouds(p2))+.1;\n    p2+=cam*dd;\n  }\n  float lcoudstr = distance(p2, init);\n  float fog = smoothstep(40.,10.,distance(p,init)+ lcoudstr*.5);\n  bool pl = plane == dist;\n  bool oj = obj == dist;\n  vec3 n = norm(p);\n  vec3 r = reflect(cam,n);\n  float ao = smoothstep(-.1,.1,scene(p+n*.1));\n  float diff = ao*length(sin(n*vec3(3,2,2))*.5+.5)/sqrt(3.);\n  diff = floor(diff*6.)/6.+.1;\n  float spec = length(sin(r*vec3(3,2,2))*.5+.5)/sqrt(3.);\n  float fres = 1.-abs(dot(cam,n))*.9;\n  vec3 matcol = mix(vec3(0.3,0.7,0.2), vec3(0.7,0.5,0.2), smoothstep(-5.5,-4.5,p.z));\n  matcol = mix(matcol, vec3(0.7,0.75,0.9), smoothstep(-4.5,-3.5,p.z));\n  if (pl) {\n    matcol = vec3(0.9,0.8,0.3);\n    float id = floor(p.y/acos(-1.)/sep + 1.5);\n    id += floor(iTime);\n    matcol = abs(erot(matcol, vec3(1,0,0), id))*.6+.4;\n    matcol = abs(erot(matcol, vec3(0,1,0), id*2.3423))*.6+.4;\n  }\n  vec3 col = matcol*diff + pow(spec,10.)*fres*1.5;\n  if (oj) {\n    \n    float spec2 = length(sin(r*vec3(3,1,1))*.5+.5)/sqrt(3.);\n    float spec3 = length(sin(-r*vec3(3,1,1))*.5+.5)/sqrt(3.);\n    col = vec3(0.8,0.3,0.2)*floor(spec2*6.)/6.+pow(spec2,10.);\n    col += (vec3(0.1,0.3,0.8)*floor(spec3*6.)/6.+pow(spec3,10.))*.7;\n    col *=ao;\n  }\n  vec3 bgcol = vec3(0.4,0.7,0.9);\n  if (!pl) {\n    col *= 0.7;\n  } else {\n    col = col*.7+.3;\n  }\n  col = erot(col,normalize(sin(p)),.02);\n  fragColor.xyz = (hit ? mix(bgcol, col,fog) : bgcol) + pow(smoothstep(40.,5.,lcoudstr),10.)*(1.-fog);\n  if (outline) fragColor.xyz = mix(bgcol, fragColor.xyz*.2, fog);\n  fragColor.xyz = smoothstep(vec3(-.2),vec3(1.2),fragColor.xyz);\n  fragColor.xyz += (glow*vec3(0.7,0.3,0.)+glow*.9)*.4;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}