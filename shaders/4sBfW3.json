{
    "Shader": {
        "info": {
            "date": "1502575553",
            "description": "Monte Carlo simulation of diffuse light propagation on a narrow canyon created by depressing voronoi columns on a sinusoidal path. Space key resets the simulation.",
            "flags": 48,
            "hasliked": 0,
            "id": "4sBfW3",
            "likes": 28,
            "name": "Voronoi Canyon [Ref Image]",
            "published": 3,
            "tags": [
                "voronoi",
                "gi",
                "pathtracing",
                "montecarlo"
            ],
            "usePreview": 0,
            "username": "glk7",
            "viewed": 1987
        },
        "renderpass": [
            {
                "code": "//IMAGE\n\n// Created by genis sole - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 c = vec3(0.0);\n    if (iFrame > 0) {\n        c = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb / float(iFrame);\n        c = 1.0 - exp(-c*0.2);\n    \tc = pow(abs(c), vec3(0.4545));\n    }        \n    \n    fragColor = vec4(c, 1.0);\n                     \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//BUF_A\n\n// Created by genis sole - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\nconst float PI = 3.141592;\n\n//From http://marc-b-reynolds.github.io/math/2016/03/29/weyl_hash.html\nuint hash(uvec2 x) {\n    x = uvec2(0x3504f333, 0xf1bbcdcb)*x; \n    return (x.x^x.y) * 741103597u;\n}\n\n//From https://iquilezles.org/articles/sfrand\nfloat uintBitsToFloat01(uint x) {\n    return uintBitsToFloat((x >> 9u) | 0x3f800000u) - 1.0;\n}\n\nfloat uintBitsToFloat11(uint x) {\n    return uintBitsToFloat((x >> 9u) | 0x40000000u) - 3.0;\n}\n\nvec2 hash2(vec2 p) {\n\tuvec2 x = floatBitsToUint(p);   \n\treturn vec2(uintBitsToFloat01(hash(x)),\n                uintBitsToFloat01(hash(x + 868867u))); \n}\n\nfloat hash(vec2 p) {\n    uvec2 x = floatBitsToUint(p);\n    return uintBitsToFloat01(hash(x));\n}\n\nvec3 uniformUnitHemisphere(uvec2 seed, vec3 n) {\n    float t = uintBitsToFloat01(hash(seed))*2.0*PI;\n    float u = uintBitsToFloat11(hash(seed + 6756984u));\n    \n    vec3 p = vec3(vec2(cos(t), sin(t)) * sqrt(1.0 - u*u), u);\n    return p * (dot(n, p) > 0.0 ? 1.0 : -1.0); // sign(dot(n, p)) could result 0.0;\n}\n\n//From http://www.amietia.com/lambertnotangent.html\nvec3 cosUnitHemisphere(uvec2 seed, vec3 n) {\n    float t = uintBitsToFloat01(hash(seed))*(2.0*PI);\n    float u = uintBitsToFloat11(hash(seed + 6756984u));\n    \n    return normalize(n + vec3(vec2(cos(t), sin(t)) * sqrt(1.0 - u*u), u));\n}\n\n\nvoid voronoi_s(in vec2 x, inout vec2 n,  inout vec2 f, \n                          inout vec2 mg, inout vec2 mr) {\n\n    n = floor(x);\n    f = fract(x);\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if (d < md) {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }   \n}\n\nvec3 voronoi_n(in vec2 rd, in vec2 n,  in vec2 f, \n               inout vec2 mg, inout vec2 mr) {\n    float md = 1e5;\n    vec2 mmg = mg;\n    vec2 mmr = mr;\n    vec2 ml = vec2(0.0, 0.0);\n    \n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {   \n        vec2 g = mmg + vec2(i, j);\n\t\tvec2 o = hash2(n + g);\n\t\tvec2 r = g + o - f;\n\n    \tvec2 l = r - mmr;\n        if (dot(rd, l) > 1e-5) {\n            float d = dot(0.5*(mmr + r), l)/dot(rd, l);\n            if (d < md) {\n                md = d;\n                mg = g;\n                mr = r;\n                ml = l;\n            }\n        }\n    }\n    \n    return vec3(md, normalize(ml));\n}\n\nfloat path(in float x) {\n\treturn sin(x*0.1)*4.0;\n}\n\nfloat path_df(in float x) {\n    return cos(x*0.1)*0.4;\n}\n\nfloat map(in vec2 p) {\n    p.x -= path(p.y);\n    float h = pow(abs(p.x) + 0.1, 4.0)*0.1;\n    return clamp(h, 0.0, 30.0) - hash(p)*0.5;\n}\n\n//Related to https://www.shadertoy.com/view/MtyGWK\nmat2x4 rayTrace(in vec3 ro, in vec3 rd) {\n    vec3 p0 = ro;\n\n    vec2 dir = normalize(rd.xz);\n    float s = rd.y / length(rd.xz);\n    \n    vec2 mg = vec2(0.0), mr = vec2(0.0), n = vec2(0.0), f = vec2(0.0);\n    voronoi_s(p0.xz, n, f, mg, mr);\n    \n    vec2 pmg = mg, pmr = mr;\n    float h = map(n + pmg);\n    \n    vec3 dn = voronoi_n(dir, n, f, mg, mr);\n    vec3 pdn = dn;\n    \n    float rh = p0.y + dn.x*s, prh = p0.y;\n\t\n    const int steps = 128;\n    for (int  i = 0; i < steps; ++i) { \n        if (h > prh || h > rh || rh > 32.0) break; \n        \n        prh = rh; \n        pmg = mg; pmr = mr;\n        pdn = dn;\n\n        h = map(n + mg);\n        dn = voronoi_n(dir, n, f, mg, mr);\n        \n        rh = p0.y + dn.x*s;\n    }\n    \n    if (!(h > prh || h > rh || rh < 32.0)) return mat2x4(0.0); \n\n    \n    vec3 p = vec3(p0.xz + dir*abs((p0.y - h)/s), h).xzy;\n    vec3 nor = vec3(0.0, 1.0, 0.0);\n    if (h > prh) {\n    \tp = vec3(p0.xz + dir*pdn.x, prh).xzy;\n    \tnor = vec3(-pdn.yz, 0.0).xzy;\n    }\n    \n    return mat2x4(vec4(nor, 1.0), vec4(p, 1.0));\n}\n\nconst vec3 m = vec3(0.2, 0.14, 0.1)*1.2;\n\nvec3 pathTrace(vec3 ro, vec3 rd, int s) {\n    const vec3 ld = normalize(vec3(1.0, 1.7, 1.0));\n    \n    const int bounces = 3;\n    const vec3 sun = vec3(130.0, 130.0, 95.0);\n    const vec3 sky = vec3(0.25, 0.6, 0.98) * 7.0;\n    \n    vec3 cm = vec3(1.0);\n    vec3 acc = vec3(0.0);\n    mat2x4 r = mat2x4(1.0);// r[0].xyz = normal; r[1].xyz = position; r[1].w = hit.\n    \n    for (int i = bounces; i > 0; --i) {\n        if (rd.y > 0.99) { r[1].w = 0.0; break; }\n        \n        r = rayTrace(ro, rd);\n        \n        if (r[1].w < 0.5) break;\n\t\t\n        ro = r[1].xyz + r[0].xyz*0.0001;\n        \n        cm *= m;\n        acc += cm * sun * dot(r[0].xyz, ld) * (1.0 - rayTrace(ro, ld)[1].w); \n        \n        rd = cosUnitHemisphere(uvec2(s*bounces + i, iFrame), r[0].xyz);\n    }\n    \n    acc += cm * sky * (step(r[1].w, 0.5));\n                       \n    return acc;\n}\n\nmat4 cameraTransform() {\n    float t = 363.0;\n         \n    vec2 m = vec2(atan(path_df(t+1.0)), 0.3) * vec2(0.4, 1.0);\n  \n    mat3 rotY = mat3(cos(m.x), 0.0, -sin(m.x), \n                     0.0, 1.0, 0.0, \n                     sin(m.x), 0.0, cos(m.x));\n    mat3 rotX = mat3(1.0, 0.0, 0.0,\n        \t\t\t 0.0, cos(m.y), -sin(m.y), \n                     0.0, sin(m.y), cos(m.y));\n    mat3 rot = rotY*rotX;\n\n    return mat4(vec4(rot[0], 0), vec4(rot[1], 0), vec4(rot[2], 0), \n                vec4(path(t), 5.0, t, 1.0));\n}\n\nvoid cameraRay(vec2 fragCoord, mat4 t, int s, out vec3 ro, out vec3 rd) {\n    uvec2 seed = uvec2(s, iFrame);\n    vec2 o = vec2(uintBitsToFloat01(hash(seed)),\n                  uintBitsToFloat01(hash(seed + 2797941u)));\n    \n    float e = 1.0/iResolution.x;\n    vec2 uv = (fragCoord - iResolution.xy*0.5) * e + (o - 0.5)*e*1.5;\n\n    rd = mat3(t)*normalize(vec3(uv, 0.4)); \n    ro = t[3].xyz;\n}\n\nbool isSpacePressed() {\n    const float KEY_SP = 32.5/256.0;\n\treturn bool(step(0.5, texture( iChannel3, vec2(KEY_SP, 0.5) ).x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    if (iFrame == 0 || isSpacePressed()) return;\n\n    vec3 ro = vec3(0.0);\n    vec3 rd = vec3(0.0);\n    mat4 t = cameraTransform();\n    \n    int s = int(fragCoord.x *iResolution.x + fragCoord.y);\n    cameraRay(fragCoord, t, s, ro, rd);\n    vec3 c = pathTrace(ro, rd, s);\n\n\tfragColor = vec4(c, 0.0) + texelFetch(iChannel0, ivec2(fragCoord), 0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}