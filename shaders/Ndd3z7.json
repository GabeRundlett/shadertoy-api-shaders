{
    "Shader": {
        "info": {
            "date": "1629498320",
            "description": "a little procedural planet made from FBM noise and a projected onto a sphere, with a bit of tricks thrown here and there.\nUse the Mouse to rotate around the planet!\nenjoy~!\n\nthe 2D version - https://www.shadertoy.com/view/fsd3R7",
            "flags": 0,
            "hasliked": 0,
            "id": "Ndd3z7",
            "likes": 10,
            "name": "3D Planet w/ weather & moon",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sun",
                "interactive",
                "space",
                "planet",
                "moon"
            ],
            "usePreview": 0,
            "username": "Pelegefen",
            "viewed": 545
        },
        "renderpass": [
            {
                "code": "\n\n\n\n\n\nfloat GetDist(vec3 p) {\n\n    vec3 n = p;\n    float d  = 0.;\n        p.xz *= Rot(iTime * .4);\n\n    vec2 uv1 = vec2((atan(p.z,p.x)/6.2832), 2.*p.y/13.);\n    \n\n    //d = sdSphere(p, 1.5);\n    float planet = sdSphere(p, 1.5);\n    \n    //---------displacement-----------\n    float disp = (heightMap(uv1*2.))*.2;\n    planet += disp * smoothstep(.2,.0,abs(uv1.y));\n    //--------------------------------\n    \n    d = planet;\n    float m = sdSphere(p +vec3(4.,0.,0.),.25);    \n    \n    n.xz *= Rot(iTime * .25);\n\n    float sun = sdSphere(-n +vec3(3.,0.,3.) * 20.,6.25);  \n    return min(d,min(m,sun));\n}\n\nint GetMat(vec3 p) {\n\n     vec3 n = p;\n    float d  = 0.;\n        p.xz *= Rot(iTime * .4);\n    float planet = sdSphere(p, 1.5);\n    \n    \n    d = planet;\n    float m = sdSphere(p +vec3(4.,0.,0.),.25);\n    \n    n.xz *= Rot(iTime * .25);\n\n    float sun = sdSphere(-n +vec3(3.,0.,3.) * 20.,6.25);  \n    \n    float dist = min(d,min(m,sun));\n    \n    \n    \n    if(dist == planet)\n    return 1;\n    else if(dist == m)\n    return 2;\n    else if(dist == sun)\n    return 3; else return 0;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\t\n    float dv =0.;\n    float dO=dv;\n    \n    float mat;\n    for(float i=0.; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n         mat =  float(GetMat(p));\n\n        dO += dS;\n        \n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    dv = dO;\n    return vec2(dv,mat);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec4 Planet(vec2 uv){\n\n     vec3 col;\nfloat blend = S(.43,.481,abs(uv.x));\n        float blend1 = S(0.1,.2,abs(uv.y));\n\tvec4 color = Terrain(uv*2.);\n    \n    //atmosphere winds\n    float f = min(\n    noise((uv * 1.5) - iTime * 0.1 ),\n    pattern((uv * 1.) + noise(uv * 2.5) + vec2(iTime,0.)* .15 ) \n    );\n    \n    \n\n    //clouds\n    f += pattern(uv + iTime * .1);\n    f = ((max(f * .2,noise(uv  *25. + vec2(iTime,0.))) * (color.g + color.b)/.3) +color.a)* 1.-blend-blend1;\n    f -= blend;\n    f -= blend1;\n    color = max (color, vec4(f)* 1.-blend-blend1);\n\n    return color;\n    \n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    m.y = m.y*.25-1.75;\n    vec3 ro = vec3(0, 1, -5);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.0,0), 1.);\n    vec3 col = vec3(0);\n    \n    vec2 d = RayMarch(ro, rd);\n\n    //bg\n    float s = S(.0,.3,abs(rd.y)+.1);\n    vec2 rot = rd.xz *Rot(iTime * .25);\n\n    vec3 stars = floor(vec3(  noise((rot) * 125.)+.1)*s) ;\n    col = stars;\n    \n    float glow = 0.;\n    \n        if(d.x<MAX_DIST)\n        {\n            vec3 p = ro + rd * d.x;\n            vec3 n = GetNormal(p);\n            vec3 r = reflect(vec3(rot,rd.z), n);\n             n.xz *= Rot(iTime * .25);\n            p.xz *= Rot(iTime * .4);\n            vec2 uv1 = vec2((atan(p.z,p.x)/6.2832), 2.*p.y/13.);\n            vec4 planet = Planet(uv1);\n\n\n            float dif = dot(n, normalize(vec3(3,0,3)))*.5+.5;\n\n\n            col *= 1.-sign((col.r+col.g+col.b)+5.);;\n            col += planet.rgb;\n            col *= pow(dif,5.);\n            int mat =  int(floor(d.y));\n\n                if(mat == 1){//planet\n\n                }else if(mat == 2){//moon\n                col = vec3(pow(dif,5.) );\n                }else if(mat == 3){//sun\n                col = vec3(.9,.8,.2 );\n\n                }\n\n\n\n        }\n        \n    col = pow(col, vec3(.4545));\t// gamma correction\n    //col = Terrain(uv).rgb;//uncomment to see 2D terrain only\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_STEPS 100.\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\n\nfloat Union( float d1, float d2 ) { return min(d1,d2); }\n\nfloat Sub( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat Intrs( float d1, float d2 ) { return max(d1,d2); }\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\nfloat sdSphere(vec3 p, float s) {\n\n\treturn length(p ) - s;\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat hash(vec2 p)  // thanks to iq\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )// thanks to iq\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat pattern( in vec2 p )// thanks to iq\n{\n    vec2 q = vec2( noise( p + vec2(0.0,0.0) ),\n                   noise( p + vec2(5.2,1.3) ) );\n\n    vec2 r = vec2( noise( p + 8.0*q + vec2(1.7,9.2) ),\n                   noise( p + 8.0*q + vec2(8.3,2.8) ) );\n\n    return noise( p + 8.0*r );\n}\n\n\n\nfloat heightMap(vec2 uv){\n\n       float f = 0.0;\n       float symZone = S(.95,1.,abs(uv.x));\n\n       \tuv *= 15.0;\n        \n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\t\tf  = 0.5000*noise( uv  ); uv = m*uv;\n\t\tf += 0.2500*noise( uv  ); uv = m*uv;\n\t\tf += 0.1250*noise( uv  ); uv = m*uv;\n\t\tf += 0.0625*noise( uv  ); uv = m*uv;\n        f -= symZone;\n        f = max(f,.1);\n\nreturn - f;\n\n}\n\nvec4 Terrain(vec2 uv){\n\n      vec2 ouv = uv;\n      float f = 0.0;\n      float blend = S(.43,.481,abs(ouv.x));\n      float symZone = S(.95,1.,abs(ouv.x));\n      uv *= 15.0;\n      \n      mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n        f  = 0.5000*noise( uv  ); uv = m*uv;\n        f += 0.2500*noise( uv  ); uv = m*uv;\n        f += 0.1250*noise( uv  ); uv = m*uv;\n        f += 0.0625*noise( uv  ); uv = m*uv;\n        f -= symZone ;\n         \n        \n        \n      vec4 landCol = vec4(\n       sin(f*.75)*.5+.5,\n       sin(f)   *.5+.5,\n       sin(f*.1)*.5+.5,\n       1.);\n       \n       landCol *= vec4(.4 + f,.7+ f,.1,1.);\n       \n       \n       vec4 colorLand = vec4(landCol / pow(f , S(.2,.21,f)));\n       \n       float c = S(.1,.4,f);\n       vec4 color = vec4(.05,c,.6,1.) + (f*.5); \n       \n       \n        color = max(color , colorLand);\n        \n        //poles\n        float poleMask = S(.4,.45,abs(ouv.y));\n        color += poleMask + poleMask;\n        \n        //edges symmetry\n        \n        color =clamp(color- c,vec4(0.1),vec4(1.) );\n        \n        color.a = f;\n       return clamp(color,vec4(0.),vec4(1.));\n       \n       }\n       \n       ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}