{
    "Shader": {
        "info": {
            "date": "1643642623",
            "description": "Old one",
            "flags": 32,
            "hasliked": 0,
            "id": "3tcBWj",
            "likes": 13,
            "name": "Loading screen paint",
            "published": 3,
            "tags": [
                "m"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 423 oops counting lol\" by jeyko. https://shadertoy.com/view/3lcBWB\n// 2021-02-15 08:33:03\n\n// Fork of \"Day 421\" by jeyko. https://shadertoy.com/view/ttcfzB\n// 2021-02-14 17:04:45\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord -= 0.5*iResolution.xy;\n    fragCoord *= 0.99;\n    fragCoord += 0.5*iResolution.xy;\n    \n    float n1d = texelFetch(iChannel1,ivec2(mod(fragCoord + vec2(float(iFrame),0.),256.)),0).x;\n    vec3 n  = texelFetch(iChannel1,ivec2(mod(fragCoord  + n1d*200. ,256.)),0).xyz;\n    \n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    fragColor.xyz =texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    \n    fragColor.xyz = pow(fragColor.xyz, vec3(1.,1.,1.2));\n    \n    //fragColor.xyz = 1. - fragColor.xyz;\n    \n    //fragColor.xyz *= 1. - dot(uv,uv)*0.8;\n    fragColor.xyz = pow(fragColor.xyz, vec3(0.4545 + n*0.));\n    \n    \n    \n    //fragColor = texture(iChannel2,fragCoord/iResolution.xy);\n    \n    fragColor.xyz += smoothstep(1.,0.,length(fragColor))*n*0.04;\n    \n    fragColor.xyz -= smoothstep(0.,1.,length(fragColor))*n*0.05;\n       \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n\nfloat noise(vec2 fragCoord){\n    int idx = iFrame/15;\n    return texture(iChannel0,(fragCoord + sin(float(idx)*20.)*10.)/256.,0.4)[idx%2];\n}\n\nfloat palIdx = 0.;\n\nconst float palA = 0.55;\nconst vec3 palB = 0.5*vec3(1.,.9,0.3);\nconst vec3 palC = vec3(1,1.5,3);\nconst float palD = 4.;\n\nvoid draw( vec2 uv, vec2 fragCoord,inout vec3 col, float d, vec2 grad, float palOffs, bool isPal, bool isXor){\n    \n    float n = cyclicNoise(vec3(uv,2)*92., false, floor(iTime*10.))*0.004;\n    float grain = noise(fragCoord);\n    float df = dFdx(uv.x)*1. + n*0.5;\n    \n    palIdx += palOffs + d*(0.2 + 1.*float(palIdx!=0.)) - smoothstep(0.04,0.0,abs(d))*0.1 + n*10. - grain*.1;\n    \n    vec3 c = pal(palA,palB,palC,palD,palIdx);\n    \n    d -= n;\n    \n    vec3 shadc = c*.9;\n    shadc.xz *= rot(0.2);\n    shadc.xy *= rot(.3);\n    \n    float dots =  smoothstep(-3.,5.,dot(grad,vec2(-1.)) - d*2.);\n    c = mix(c,shadc,\n        smoothstep(0.3 + dots,0.4 + dots,grain + d));\n    \n        //step(0.3+ smoothstep(-3.,5.,dot(grad,vec2(-1.)) - d*2.),noise(fragCoord)));\n    \n    if(isPal){\n        vec3 oldCPalled = pal(palA,palB,palC,palD,palIdx + length(col) )*(col + 0.5);\n    \n        \n        col = mix(col, oldCPalled*c, smoothstep(df,0.,d)); \n        \n    } else if(isXor){\n        //vec3 oldCPalled = pal(palA,palB,palC,palD,palIdx - length(col)*1. + palOffs)*mix(vec3(1.-length(col)),vec3(1),1.);\n        vec3 oldCPalled = max(col,0.);\n        float luma =  (oldCPalled.x+oldCPalled.y+oldCPalled.z)/3.;\n        \n        oldCPalled = 1. - oldCPalled;\n        \n        oldCPalled.xz *=rot(sin(smoothstep(0.5,0.,abs(d)*14.)*5.)*0.05);\n        oldCPalled = mix(oldCPalled,shadc,\n            smoothstep(0.3 + dots,0.5 + dots,grain + d*2.)*0.2);\n    \n        col = mix(col, oldCPalled, smoothstep(df,0.,d)); \n    \n    \n    } else {\n        \n        col = mix(col, c, smoothstep(df,0.,d)); \n    \n    }\n    \n}\n\nfloat envcnt = 0.;\n\nfloat getEnv(float t, float speed, float pa, float pb, float jumpAmt, bool cnt){\n    //return pow(sin((t - 0.5)*3.14),1.)*0.5 + 0.5;\n    t = clamp(t*speed,0.,1.);\n    \n    envcnt += float(t > 0.99 && cnt);\n    //t = smoothstep(0.,1.,t);\n    pa += 1.;\n    pb += 1.;\n    \n    float c = cos(t*3.14);\n    float a = 1.- ((pow(abs(c),pa)*sign(c))*0.5 + 0.5);\n    float b = 1.-((pow(abs(c),pb)*sign(c))*0.5 + 0.5);\n    \n    a = pow(sin(t*3.14/2.),pa);\n    b = 1.-pow(sin((-t + 1.)*3.14/2.),pb);\n    \n    b *= 1. + (\n            smoothstep(0.,1.,t) *smoothstep(0.99,0.7,t)*jumpAmt\n        );\n    return mix( a, b,t);\n}\n\n\nfloat text(vec2 p, float[1] chars, float spacing, float s) {\n\tp *= s;\n    p += vec2(1./16.,1./16.);\n    \n    p.x *= 1. - spacing;\n    vec2 id = floor(p*16.);\n    p = mod(p,1./16.);\n    p.x = p.x/(1. - spacing) + 0.1375*0.;\n    float char = chars[int(id.x)];\n    //char += 112.;\n    float t;\n    if( abs(id.y) < 1. && id.x >= 0. && id.x < 1. && mod(char, 1.) == 0. && char < 256.){\n        vec4 letter = texture(iChannel3,p + vec2(mod(char,16.),-floor(char/16.) )/16.);\n        t = letter.w - 0.5;\n        t /= s*10.1;\n    } else {\n        t = 10e5;\n    }\n    return t;\n\t\n}\n\n\n\n#define sdfTrail(sdf,tpos,tdisp,variable, width, iTime)  {                           \\\n        vec2 circGrad = tpos(iTime - tdisp) - tpos(iTime - tdisp*2.) ;                     \\\n        circGrad *= rot(0.5*pi);                                              \\\n        vec3 circB =  sdf( p + tpos(iTime)  );                                \\\n        vec3 circBold = sdf( p + tpos(iTime - tdisp) ) + width*0.5;                         \\\n        vec2 rotUv = (p + tpos(iTime-0.1))*rot(-atan(circGrad.y,circGrad.x)); \\\n        circBold -= 9.*cyclicNoiseB(vec3(rotUv.x,1. +  floor(iTime*140.)*0.04,2)*142., false, floor(iTime*10.)*20.)*smoothstep(0.4,0.1,rotUv.y ) \\\n            *smoothstep(0.,0.9,length(circGrad))*0.1                          \\\n            * smoothstep(0.4,-0.3,circBold.x);                                \\\n        variable.x = opSmoothUnion(circB.x,circBold.x,0.2);                     \\\n    }\n    \n    #define getCircB(t) vec2(0.1 + sin((t)*2.5)*0.5,0. + sin((t)*4.)*0.2)\n    \n\n\nvec3 sdgCircle( in vec2 p, in float r ) \n{\n    float d = length(p);\n    return vec3( d-r, p/d*smoothstep(1.,0.,abs(d)/r) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #define iTime mod(iTime,9.)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    float env  = getEnv(iTime*1.      ,1.5,16.,3.,0.9,true);\n    float envb = getEnv(iTime*1. - 0.4,1.,1.,1.,0.9 ,true);\n    float envc = getEnv(iTime*1. - 1.2,1.5,2.,4.,0.2 ,true);\n    float envd = getEnv(iTime*1. - 1.5,0.4,1.,1.,0.4  ,true);\n    float enve = getEnv(iTime*1. - 3.5,1.,1.,1.,0.4  ,true);\n    float envf = getEnv(iTime*1. - 4. ,2.,1.,1.,0.4  ,true);\n    float envg = getEnv(iTime*1. - 4.5,1.,1.,1.,0.4  ,true);\n    float envh = getEnv(iTime*1. - 4.8,2.,1.,1.,0.4  ,true);\n    float envi = getEnv(iTime*1. - 5. ,1.5,1.,1.,0.4 ,true);\n    float envj = getEnv(iTime*1. - 6. ,1.5,1.,1.,0.4 ,true);\n    float envk = getEnv(iTime*1. - 7.5 ,1.5,1.,1.,0.4 ,true);\n    float envl = getEnv(iTime*1. - 7.4 ,1.5,1.,1.,0.4 ,true);\n    float envm = getEnv(iTime*1. - 7.9 ,1.5,1.,1.,0.4 ,true);\n    \n    vec3 col = vec3(0);\n\n    draw( uv, fragCoord, col, length(uv) - 4. + smoothstep(0.4,0.3,texture(iChannel1,uv*0.05).x)*2., normalize(uv), 3.7,false, false);\n    \n    vec2 p = uv;\n    \n    \n    //col = mix(col,1.-col,smoothstep(0.001,0.,text(uv - vec2(0.9,-0.35), float[1](81. + envcnt), 0., 0.4) ));\n    \n    palIdx += 1.4;\n    for(float i = 0.; i < 5.; i++){\n        p *= rot(pi/5.*2.);\n        vec3 c;\n        float w = 0.05 + sin(iTime + i)*0.;\n        #define sdfA(pos) sdgCircle( pos , w )\n\n        sdfTrail(sdfA,getCircB, 0.1, c, w,iTime + i*0.2);\n\n        draw( uv, fragCoord, col, c.x, c.yz, 0.1,false, false);\n\n    \n    }\n    //\n    \n    /*\n    #define getPlane(t) vec2(0.,0. + sin((t)*4.)*1.)\n    \n    w = 0. + sin(iTime)*0.;\n    #define sdfB(pos) vec3((p + pos).x + p.y,0.,0.)\n    \n    sdfTrail(sdfB,getCircB, 0., c, w);\n\n    draw( uv, fragCoord, col, c.x, c.yz, 1.1,false, true);\n    //\n    */\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float sc = 0. + valueNoise(iTime*4.,2.)*0.2 ;\n    \n    fragColor.x =texture(iChannel0,(fragCoord + sc*vec2(0,8))/iResolution.xy).x;\n    \n    fragColor.y =texture(iChannel0,(fragCoord + sc*vec2(0,-1))/iResolution.xy).y;\n    \n    fragColor.z =texture(iChannel0,(fragCoord + sc*vec2(0,-4))/iResolution.xy).z;\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define pi acos(-1.)\n\n\n#define sint(a) (asin(sin(a))*2. - 1.)\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define pmod(p,d) mod(p - (d)*0., (d)) - 0.5*(d)\n\n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + (e)))\n\nfloat r11(float i){ return fract(sin(i*15.126)*115.6);}\n\nvec2 r12(float i){float r=r11(i );  return vec2(r,r11(i + r + 2.));}\n\n#define xor(a,b,c) min(max((a),-(b)), max((b),-(a) - c)) \n\nfloat ss( float c, float power, float bias){\n    c = clamp(c,-0.,1.);\n    //c = smoothstep(0.,1.,c);\n    \n    c = pow(c,1. + bias);\n    \n    float a = pow( abs(c), power);\n    float b = 1.-pow( abs(c - 1.), power);\n    \n    return mix(a,b,c);\n}\nfloat valueNoise(float i, float p){ return mix(r11(floor(i)),r11(floor(i) + 1.), ss(fract(i), p,0.6));}\n\nfloat valueNoiseStepped(float i, float p, float steps){ return mix(  floor(r11(floor(i))*steps)/steps, floor(r11(floor(i) + 1.)*steps)/steps, ss(fract(i), p,0.6));}\n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + (e)))\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define pi acos(-1.)\n\nmat3 getOrthogonalBasis(vec3 direction){\n    direction = normalize(direction);\n    vec3 right = normalize(cross(vec3(0,1,0),direction));\n    vec3 up = normalize(cross(direction, right));\n    return mat3(right,up,direction);\n}\nfloat cyclicNoise(vec3 p, bool turbulent, float time){\n    float noise = 0.;\n    \n    p.yz *= rot(1.5);\n    float amp = 1.;\n    float gain = 0.8 + sin(p.z*0.2)*0.2;\n    const float lacunarity = 1.6;\n    const int octaves = 5;\n    \n    const float warp =.2;    \n    float warpTrk = 1.5 ;\n    const float warpTrkGain = .2;\n    \n    vec3 seed = vec3(-4,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p += sin(p.zxy*warpTrk + vec3(0,-time*2.,0) - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy + vec3(0,time*0.3,0))))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\n\n\nfloat cyclicNoiseB(vec3 p, bool turbulent, float time){\n    float noise = 0.;\n    \n    p.yz *= rot(1.);\n    float amp = 1.;\n    float gain = 0.8 + sin(p.z*0.2)*0.2;\n    const float lacunarity = 1.6;\n    const int octaves = 2;\n    \n    const float warp =.4;    \n    float warpTrk = 1.5 ;\n    const float warpTrkGain = .2;\n    \n    vec3 seed = vec3(-4,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p += sin(p.zxy*warpTrk + vec3(0,-time*2.,0) - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy + vec3(0,time*0.3,0))))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\nvec3 sdgBox( in vec2 p, in vec2 b )\n{\n    vec2 w = abs(p)-b;\n    vec2 s = vec2(p.x<0.0?-1:1,p.y<0.0?-1:1);\n    float g = max(w.x,w.y);\n    vec2  q = max(w,0.0);\n    float l = length(q);\n    return vec3(   (g>0.0)?l  :g,\n                s*((g>0.0)?q/l:((w.x>w.y)?vec2(1,0):vec2(0,1))));\n}\n\n\nfloat sdSq(vec2 p, vec2 s){\n    p = abs(p) - s;\n    return max(p.x,p.y);\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}