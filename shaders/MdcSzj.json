{
    "Shader": {
        "info": {
            "date": "1460215832",
            "description": "Cubey!",
            "flags": 0,
            "hasliked": 0,
            "id": "MdcSzj",
            "likes": 14,
            "name": "Blockscape",
            "published": 3,
            "tags": [
                "distancefield"
            ],
            "usePreview": 0,
            "username": "finalman",
            "viewed": 921
        },
        "renderpass": [
            {
                "code": "const int MAX_STEPS = 200;\n\nvec2 getHex(vec2 pos)\n{\n    return floor(pos + 0.5);\n}\n\nfloat getHexHeight(vec2 hex)\n{\n    return (mix(texture(iChannel0, hex / 256.0, -100.0).x * 10.0, 4.5, \n                1.5 * pow(sin(hex.x * 0.133 + hex.y * 0.7 - iTime * 0.1), 2.0)) - 9.0) * 0.35;\n}\n\nfloat getPlaneDist(vec3 point, vec3 normal, vec3 smpl)\n{\n    return dot(smpl - point, normal);\n}\n\nfloat getHexDist(vec2 hex, vec3 smpl)\n{\n    float result = smpl.y - getHexHeight(hex);\n    \n    result = max(result, getPlaneDist(vec3(hex.x + 0.48, 0.0, hex.y), vec3( 1.0, 0.0,  0.0), smpl));\n    result = max(result, getPlaneDist(vec3(hex.x - 0.48, 0.0, hex.y), vec3(-1.0, 0.0,  0.0), smpl));\n    result = max(result, getPlaneDist(vec3(hex.x, 0.0, hex.y + 0.48), vec3( 0.0, 0.0,  1.0), smpl));\n    result = max(result, getPlaneDist(vec3(hex.x, 0.0, hex.y - 0.48), vec3( 0.0, 0.0, -1.0), smpl));\n    \n    return result;\n}\n\nfloat dfDist(vec3 smpl)\n{\n    smpl.xz *= mat2(sin(1.), cos(1.), -sin(1.), cos(1.));\n    \n    float result = 1000.0;\n    \n    vec2 centerHex = getHex(smpl.xz);\n    \n    for (int x = -1; x <= 1; x++)\n    {\n        for (int y = -1; y <= 1; y++)\n        {\n            vec2 hex = centerHex + vec2(x, y);\n            result = min(result, getHexDist(hex, smpl));\n            result = min(result, getHexDist(hex, smpl * vec3(1.0, -1.0, 1.0)));\n        }\n    }\n    \n    \n    return result;\n}\n\nvec3 dfNormal(vec3 smpl)\n{\n    const float E = 0.02;\n    \n    float d0 = dfDist(smpl);\n    float dX = dfDist(smpl + vec3(E, 0, 0));\n    float dY = dfDist(smpl + vec3(0, E, 0));\n    float dZ = dfDist(smpl + vec3(0, 0, E));\n    \n    return normalize(vec3(dX - d0, dY - d0, dZ - d0));\n}\n\nfloat dfOcclusion(vec3 smpl, vec3 normal)\n{\n    float N = 0.3;\n    return clamp(dfDist(smpl + normal * N) / N, 0.0, 1.0);\n}\n\nfloat trace(inout vec3 pos, vec3 dir, out vec3 normal)\n{\n    int steps = 0;\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        steps++;\n        float d = dfDist(pos);\n        pos += d * dir * 0.75;\n        \n        if (d < 0.001)\n        {\n            break;\n        }\n    }\n    \n    normal = dfNormal(pos);\n    return float(steps) / float(MAX_STEPS);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 origin = vec3(0.2, 0.0, iTime);\n    vec3 pos = origin;\n    vec3 dir = normalize(vec3((fragCoord.x - iResolution.x * 0.5) / iResolution.y,\n                              fragCoord.y / iResolution.y - 0.7,\n                              1.0));\n    vec3 normal;\n    \n    float steps = trace(pos, dir, normal);\n    float occ = dfOcclusion(pos, normal);\n    float fogAmt = 1.0 - exp(-distance(origin, pos) * 0.01);\n    vec3 fogCol = vec3(0.2, 0.14, 0.18);\n    \n    vec3 diffuse = vec3(0.4, 0.5, 0.6) * clamp(dot(normal, normalize(vec3(1.0, 1.3, -1.0))), 0.0, 1.0);\n    vec3 ambient = vec3(0.4, 0.2, 0.1);\n    vec3 color = (ambient * occ + diffuse) * 4.0 / abs(pos.y * pos.y * pos.y);\n    \n    color = mix(color, fogCol, fogAmt);\n    color = (1.0 - exp(-color));\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}