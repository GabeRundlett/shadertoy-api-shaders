{
    "Shader": {
        "info": {
            "date": "1664723867",
            "description": "test",
            "flags": 0,
            "hasliked": 0,
            "id": "7tyfRG",
            "likes": 2,
            "name": "Test Perspective/Vanishing point",
            "published": 3,
            "tags": [
                "perspective"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nfloat cross_(vec2 a, vec2 b){\n    return a.y*b.x-a.x*b.y;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n    uv -= vec2(.5);\n    uv *= 10.;\n    \n    //uv = sqrt(abs(uv));\n\n    // Time varying pixel color\n\n    vec2 center_square = vec2(3.*cos(iTime), 3.*sin(iTime));\n    \n   \n    vec2 sgn_center = sign(center_square);\n    float sgn_square = sgn_center.x*sgn_center.y;\n    \n    float radius = 1.;\n    float square = max(abs(center_square-uv).x, abs(center_square-uv).y);\n    square = 1.-step(0., square-radius);\n\n\n    vec2 vertex_up_left = sgn_center*(vec2(-radius, radius))+center_square;\n    vec2 vertex_down_left = sgn_center*(-1.*vec2(radius))+center_square;\n    vec2 vertex_down_right = sgn_center*(vec2(radius, -radius))+center_square;\n\n    float go_ul = step(.2, length(vertex_up_left-uv));\n    float go_dl = step(.2, length(vertex_down_left-uv));\n    float go_dr = step(.2, length(vertex_down_right-uv));\n   \n    vec3 col_vertex = vec3(0.,0.,1.)*(1.-go_ul);\n    col_vertex += vec3(0.,1.,.0)*(1.-go_dl);\n    col_vertex += vec3(1.,0.,.0)*(1.-go_dr);\n    \n    float down_ul = step(0., -cross_(sgn_square*uv, vertex_up_left));\n    float down_dl = step(0., -cross_(sgn_square*uv, vertex_down_left));\n    float up_dl = step(0., cross_(sgn_square*uv, vertex_down_left));\n    float up_dr = step(0., cross_(sgn_square*uv, vertex_down_right));\n    \n    float mask_side = step(0., length(vertex_down_right)-length(uv));\n    float mask_down = step(0., length(vertex_up_left)-length(uv));\n\n    vec3 side_face = vec3(.8, .8, 0.)*up_dl*down_ul*mask_down;\n    vec3 down_face = vec3(0., .8, .8)*up_dr*down_dl*mask_side;\n\n    vec3 col_center = vec3(.5)*(1.-step(.15, length(uv)));\n\n    vec3 col = vec3(square*.6)+col_vertex+col_center+down_face+side_face;\n    \n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}