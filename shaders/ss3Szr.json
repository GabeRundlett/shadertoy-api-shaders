{
    "Shader": {
        "info": {
            "date": "1632519610",
            "description": "Took a break from raymarching/3D to do some 2D tiling stuff - pretty fun motion/patterns using ID's and linear stepping functions / some cubic ease in/out via book-of-shaders.\n\nOriginal https://www.shadertoy.com/view/ssVGDd (saved for later use)",
            "flags": 0,
            "hasliked": 0,
            "id": "ss3Szr",
            "likes": 14,
            "name": "1 Hour Practice #001",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    What can you do in one hour? This is about as far as I can get\n    Was just playing with tiles / shifting sections based on id's\n    \n    @byt3_m3chanic 1 Hour Practice #001 / slide tiles\n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n\n#define PI          3.14159265359\n#define TAU         6.28318530718\n\nfloat time;\nconst float scale = 7.;\nconst vec3 d = vec3(0.957,0.439,0.043);\n\nfloat hash21(vec2 a) { return fract(sin(dot(a, vec2(27.609, 57.583)))*43758.5453); }\nfloat lsp(float begin, float end, float t) { return clamp((t - begin) / (end - begin), 0.0, 1.0); }\nfloat eoc(float t) { return (t = t - 1.0) * t * t + 1.0; }\n\nvec3 hue(float t){ return .55 + .45*cos(TAU*t*(vec3(.95,.97,.98)*d)); }\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    time = T;\n    float tmod = mod(time, 10.);\n\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    uv.x +=.075;\n    vec2 vuv = uv;\n    float px = fwidth(vuv.x*TAU);\n    uv.y += T*.1;\n    vec3 C = vec3(0);\n\n    vec2 id = floor(uv*scale);\n    vec2 dd = (id*.2);\n    float sw;\n\n    id += vec2(0,5);\n    id.x = abs(id.x);\n    float yid = floor(mod(id.x,8.));\n    //movement\n    float t3 = lsp(yid, yid+2.75, tmod);\n    t3 = eoc(t3);\n    t3 = t3*t3*t3;\n    float ga1 = (time*.1);\n    sw = (t3*.5);\n    uv.y+=sw+(floor(ga1)*.5);\n    \n    //rest id to new pos\n    id = floor(uv*scale);\n    //do truchet stuff\n    float rnd = hash21(id);\n    float chk = mod(id.y + id.x,2.) * 2. - 1.;\n    if(rnd>.5) uv.x*=-1.;\n    \n    vec2 qv = fract(uv*scale)-.5;\n\n    float circle = length(qv-vec2(.5,-.5))-.5;\n          circle = min(length(qv-vec2(-.5,.5))-.5,circle);\n    float circle3 = abs(circle)-.05;\n    \n    float c2 = smoothstep(-px,px,abs(abs(circle)-.05)-.025);\n    circle = (rnd>.5^^chk>.5) ? smoothstep(px,-px,circle) : smoothstep(-px,px,circle);\n\n    circle3 = smoothstep(.125,-px,circle3);\n    float dots = length(abs(qv)-vec2(.5,0))-.25;\n    dots = min(length(abs(qv)-vec2(0,.5))-.25,dots);\n\n    dots = abs(abs(abs(dots)-.05)-.025)-.0125;\n    dots = smoothstep(px,-px,dots);\n    \n    float hs = hash21(vuv)*.15;\n    C =  clamp(hue(52.+id.x*.05)+hs,C,vec3(1));\n    \n    C = mix(C,C*.75,dots);\n    C = mix(C,C*.75,circle3);\n    C = mix(C,C*.70,clamp(max(circle,-c2),0.,1.));\n    C = mix(C,vec3(.93),clamp(min(circle,c2),0.,1.));\n \n    // Output to screen\n    O = vec4(C,1.);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}