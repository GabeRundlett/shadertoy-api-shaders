{
    "Shader": {
        "info": {
            "date": "1433092604",
            "description": "A try to have a sin city like effect.\nActually, I tried 2 different technics, but the simplest one looks better...\nNot sure what is the real technic ( beside manual edition )\n",
            "flags": 2,
            "hasliked": 0,
            "id": "lljGDm",
            "likes": 4,
            "name": "red Only",
            "published": 3,
            "tags": [
                "red",
                "webcam",
                "sincity"
            ],
            "usePreview": 0,
            "username": "ManuManu",
            "viewed": 2388
        },
        "renderpass": [
            {
                "code": "/*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n}*/\n\n\n/* Different version, different more or less complex tries.\nFor now, the simplest one is the best :)\n\n\nNote : I made some shader to study different possibilities and threshold here :\nhttps://www.shadertoy.com/view/llfXRM\n\n*/\n\nconst float HugeDist = 100.0;\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n#define SIMPLE_VERSION\n\n#ifdef SIMPLE_VERSION\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 wantedColor=  vec3( 1.0, .0, .0 );\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n  \tvec4 color = texture(iChannel0, uv);\n \tfloat grey = dot(vec3( color), vec3(0.299, 0.587, 0.114) );\n\tfloat distToColor = distance( color.rgb, wantedColor ) ;\n\n    float threshold = 0.6;\n    \n    distToColor = distance( color.rgb, wantedColor );\n    vec4 outColor = vec4(grey);\n    if ( distToColor < threshold )\n    {\n        // to uncomment to push the red even more :\n    \t//color = color * vec4( 2.0, .0, .0, 1. );\n        outColor = color;\n    }\n    fragColor =  outColor;\n}\n\n\n\n#else\n\n\n#define RGB_VERSION\n\n#ifdef RGB_VERSION\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 wantedColor=  vec3( 1.0, .0, .0 );\n    //vec3 wantedColor=  vec3( 0.0, 1.0, .0 );\n    //vec3 wantedColor=  vec3( .0, .0, 1.0 );\n    float minDist = .0;\n    float maxDist = 1.6;\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec4 color = texture(iChannel0, uv);\n    // Funky test :\n  /*\n\tvec4 color2 = color;\n  color2.rgb = 1.0 - color.rgb;\n  color2.r = max(color.r, color2.r);\n*/\n  float grey = dot(vec3( color), vec3(0.299, 0.587, 0.114) );\n  //fragColor = color2.brga;\n   float distToColor = distance( color.rgb, wantedColor ) ;\n    \n    // only take care of color with a low red component :\n    if ( color.r <.7 ) distToColor = HugeDist;\n    \n    //vec4 red = vec4(1.0, .0, .0, 1.);//color * vec4( 2.0, .0, .0, 1. );\n    vec4 red = color;\n    // to uncomment to push the red even more :\n    //red = red * vec4( 2.0, .0, .0, 1. );\n    \n    float param = smoothstep( minDist, maxDist, distToColor);\n    //fragColor.rgb= vec3(param);\n\n    fragColor = mix( red, vec4(vec3(grey), 1.0 ), param );\n}\n\n\n#else\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float WantedHue = .0;\n    float dist = .01;\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = rgb2hsv( vec3( texture(iChannel0, uv) ) );\n    vec3 colorgrey = color;\n    colorgrey.g = .0;\n    vec3 colorFul = color;\n    //colorFul.r = WantedHue;\n    //colorFul.g *= 1.5;\n    //colorFul.b *= 1.5;\n    //colorFul.g = 1.;\n    color = mix( colorFul, colorgrey, smoothstep( .0, dist,mod( color.r - WantedHue,1. ) ) );\n    fragColor = vec4( hsv2rgb(color), 1.0);\n    //fragColor = vec4( hsv2rgb(colorFul), 1.0);\n}\n\n#endif\n\n#endif // SIMPLE_VERSION\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}