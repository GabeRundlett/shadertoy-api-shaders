{
    "Shader": {
        "info": {
            "date": "1494866583",
            "description": "Fourier synthesis of evolving blue noise, using workflow [url]https://www.shadertoy.com/view/4dGGz1[/url]\n\nchange comment to get length(signal) (default) or the signal itself",
            "flags": 32,
            "hasliked": 0,
            "id": "4slfRH",
            "likes": 28,
            "name": "bluenoise web / wormscan",
            "published": 3,
            "tags": [
                "noise",
                "fft",
                "blue",
                "fourier",
                "dft",
                "wormscan"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1623
        },
        "renderpass": [
            {
                "code": "// example application of https://www.shadertoy.com/view/4dGGz1\n\n// set you module and phase in Buf A\n\n#define SIZE (iResolution.x/2.-30.) //Size must be changed in each tab.\n\n\nvoid mainImage( out vec4 O,  vec2 U )\n{    \n    vec2 R = iResolution.xy;\n    U = fract(mod(U,SIZE)/R);\n    float t = .32*iTime, tt = mod(.2*t+1.,2.);tt=min(tt,2.-tt);\n        \n#if 0   \n    O =   ( .5 + .5* texture(iChannel2, U).x ) // display real signal\n // O =   ( .5 + .5* texture(iChannel2, U).x ) \n#else\n    O =   length( texture(iChannel2, U).xy )  // display modulus (in fact imaginary=0)\n#endif\n        * mix( vec4(1,.7,.4,0), vec4(.4,.7,1,0), tt);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// do your operation in spectral domain here\n\n#define SIZE (iResolution.x/2.-30.) //Size must be changed in each tab.\n\nfloat rand(vec2 uv) { return fract(1e5*sin(dot(uv,vec2(17.4,123.7)))); }     // point -> rnd [0,1[\n#define srnd(x) (2.*rand(x)-1.)\nfloat gauss(float x) { return exp(-.5*x*x); }\n#define ang(a)  vec2(cos(a), sin(a))                         // used to set the complex exp(i.a)\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } // complex a*exp(i.b)\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    O *=0.;\n /* if ( U==vec2(.5)) {\n        if (iFrame==0) O.zw = vec2(0,0);\n        else           O.zw = texture(iChannel1, U/R).zw;  \n        return;\n    }\n*/   \n    U -= .5;  // freq 0 must exist\n    \n    U = 2.*U-SIZE;\n    vec2 X = U/SIZE, T,\n         M = 2.*iMouse.xy/R-1.;\n    float I=1.,a,f, t = .32*iTime, tt,\n        l = length(X), F, s = sign(-X.x); // s to help making a symmetric spectrum (phases included !)\n    \n    \n    // --- your custom Fourier-space function here ------------\n    \n#if 0 // 0:  scale shape at zoom    1: scale fourier at zoom\n    X *= SIZE/256.;  l *= SIZE/256., I *= SIZE/256.; \n#endif    \n    \n                                     // --- modulus profile here\n    //f=.25;  a=4.;\n    //f=.5;  a=2.;                        // 1/2 thinnest blue noise\n    //f=.95; a=1.;                        // thinnest blue noise\n    //tt = mod(.2*t,2.);tt=min(tt,2.-tt); f = mix(.5,.95,tt); a = mix(2.,1.,tt); // explore\n    tt = mod(.2*t+1.,2.);tt=min(tt,2.-tt); f = mix(.25,.95,tt); a = mix(4.,1.,tt); // explore\n    F = gauss(abs(l-f)/(.01*a*a))*4./a;   // ring spectrum\n // F = step(f,l);                        // anti-disk spectrum\n // F = step(l,f);                        // disk spectrum\n\n                                          // --- phases here ( 0 for direct Fourier transform)\n  //T = ang(6.2832*rand(X*s)*s);\n    a = fract(t);    // phase shift with time (morph)\n    T = ang(6.2832*mix(srnd(X*s+floor(t)),\n                       srnd(X*s+ceil (t)),\n                       a)  *s / sqrt(a*a+(1.-a)*(1.-a))); // preserve variance along time\n    \n    \n    O = vec4(T*F,0,0)*sqrt(I); //  *SIZE;  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// invFourier transform \n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define SIZE (iResolution.x/2.-30.) //Size must be changed in each tab.\n\n//#define tex(ch,x,y) texture(ch, vec2(x,y)/iResolution.xy )\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x)*vec2(cos(b), sin(b)); } // complex a*exp(i.b)\n#define W(uv)   mod(uv+SIZE/2.,SIZE)                    // wrap [-1/2,1/2] to [0,1]\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O*=0.;     \n    if(U.x > SIZE || U.y > SIZE) return;\n\n    for(float n = 0.; n < 1000.; n++)  {\n        if (n>=SIZE) break;\n        float m = W(n);       // W to warp 0,0 to mid-window.\n        vec2 xn = tex(iChannel0, m+.5, U.y).xy,\n             yn = tex(iChannel1, U.x, m+.5).zw,\n             a =  6.2831853 *  W(U-.5) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n    \n    O.zw /= SIZE;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}