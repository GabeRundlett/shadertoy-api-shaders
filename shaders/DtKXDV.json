{
    "Shader": {
        "info": {
            "date": "1686451586",
            "description": "behold...",
            "flags": 0,
            "hasliked": 0,
            "id": "DtKXDV",
            "likes": 5,
            "name": "COOL_S",
            "published": 3,
            "tags": [
                "cools"
            ],
            "usePreview": 0,
            "username": "LydianLights",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "vec3 mainPass(in vec2 fragCoord)\n{\n    vec2 uv0 = 2.0 * (fragCoord / iResolution.xy) - 1.0;\n    uv0.x *= iResolution.x / iResolution.y;\n    \n    float d0 = length(uv0);\n    vec3 color = vec3(0.0);\n    \n    const float iters = 5.0;\n    for (float i = 1.0; i <= iters; i++)\n    {\n        vec2 m = vec2(1.0, 2.5);\n        \n        vec2 uv = uv0;\n        uv = i * uv + m / 2.0;\n        \n        float iSign = mod(i, 2.0) == 0.0 ? 1.0 : -1.0;\n        uv.x += 0.2 * i * iTime * iSign;\n        \n        vec2 cell = floor(uv / m);\n        \n        float xSign = mod(cell.x, 2.0) == 0.0 ? -1.0 : 1.0;\n        uv.y += iSign * xSign * iTime + 0.5 * i * i;\n        \n        uv = mod(uv, m) - m / 2.0;\n        \n        float q = 0.01 + 0.003 * (iters + 1.0 - i);\n        float p = 0.9 + 0.3 * i;\n        \n        float d = sdf_COOL_S_SUNGLASSES_EMOJI(uv);\n        d *= 3.0 * exp(1.4 * -d0);\n        d = abs(d);\n        d = q / d;\n        d = pow(d, p);\n\n        vec3 c = d * palette(0.1 * i + 0.1 * iTime + 0.05 * uv0.x + 0.5);\n        \n        color += c;\n    }\n    \n    vec2 uv = uv0;\n    uv.x += 0.01 * sin(50.0 * uv.y + 10.0 * iTime);\n    float d = sdf_COOL_S_SUNGLASSES_EMOJI(uv);\n    d = abs(d);\n    d = smoothstep(0.02, 0.15, d);\n    color *= vec3(d);\n    \n    return color;\n}\n\nvec3 gamma(in vec3 color)\n{\n    return pow(max(color, 0.0), vec3(1.0 / 2.2));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = mainPass(fragCoord);\n    color = gamma(color);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://iquilezles.org/articles/palettes/\nvec3 palette(in float t)\n{\n    vec3 a = vec3(0.8, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.33, 0.66);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// Thanks iq for optimizing my sdf :3\n// https://www.shadertoy.com/view/clVXWc\nfloat sdf_COOL_S_SUNGLASSES_EMOJI(vec2 p)\n{\n    // symmetry \n    p = (p.y>p.x) ? -p : p;   // can be p.y>0.0 too\n    vec2 q = vec2(abs(p.x),p.y);\n\n    // line segments\n    float d; vec2 v;\n    { v=q+vec2( .0,1.); v  -=clamp(.5*(v.x+v.y),.0,.4);                  d=dot(v,v);  }\n    { v=q-vec2( .2,.0); v  -=clamp(.5*(v.x+v.y),.0,.2);            d=min(d,dot(v,v)); }\n    { v=p-vec2(-.4,.2); v  -=clamp(.5*(v.x-v.y),.0,.4)*vec2(1,-1); d=min(d,dot(v,v)); }\n    { v=q-vec2( .0,.2); v  -=clamp(.5*(v.x-v.y),.0,.4)*vec2(1,-1); d=min(d,dot(v,v)); }\n    { v=q+vec2( .0,.6); v.y-=clamp(v.y,.0,.4);                     d=min(d,dot(v,v)); }\n    { v=q-vec2( .4,.2); v.y-=clamp(v.y,.0,.4);                     d=min(d,dot(v,v)); } \n    { v=q+vec2(-.4,.6); v.y-=clamp(v.y,.0,.4);                     d=min(d,dot(v,v)); }\n    \n    // interior vs exterior\n    float s = max(q.x-0.4+max(-q.y-0.6,0.0),q.x-0.2-abs(q.y));\n\n    return sqrt(d) * sign(s);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}