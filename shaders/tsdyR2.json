{
    "Shader": {
        "info": {
            "date": "1601322748",
            "description": "comments can be found mostly on map() function",
            "flags": 0,
            "hasliked": 0,
            "id": "tsdyR2",
            "likes": 31,
            "name": "Thing_15",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "body"
            ],
            "usePreview": 0,
            "username": "balkhan",
            "viewed": 500
        },
        "renderpass": [
            {
                "code": "\n/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec3 h;\nfloat ie;\n\n// rotation function\nvoid rot(inout vec2 p, float a) {p = vec2(cos(a)*p.x+sin(a)*p.y, -sin(a)*p.x+cos(a)*p.y);}\n\n// capsule distance\n// https://iquilezles.org/articles/distfunctions\nfloat sdc( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\n// skeleton parts\nvec3 _head   = vec3(.0, 1.75, -1.),\n     _torso  = vec3(.0,1.0,-1.5),\n     _laharm = vec3(+.850,1.0,-1.5),\n     _raharm = vec3(-.850,1.0,-1.5),\n     _lharm  = vec3(+1.08750,.375,-2.),\n     _rharm  = vec3(-1.08750,.375,-2.),\n     _lfharm = vec3(+1.0,+.10, -1.1),\n     _rfharm = vec3(-1.0,+.10,-1.1),\n     _pelvis = vec3(+0.0,-.0,-2.5),\n     _laleg  = vec3(+0.25,-0.15,-2.5),\n     _raleg  = vec3(-0.25,-0.15,-2.5),\n     _lleg   = vec3(+.250,-1.0,-2.5),\n     _rleg   = vec3(-.250,-1.0,-2.5),\n     _lfoot  = vec3(+.250,-2.0,-2.5),\n     _rfoot  = vec3(-.250,-2.0,-2.5);\n\n// displace parts and then draw capsules beetween them\nfloat\tbody(vec3 p)\n{\n\tfloat r = 1e5;\n    \n    r = length(p-_head)-.5;\n    r = min(r,\n              sdc(p, _head, _torso, .25)\n              );\n    vec3 a_laharm = _laharm+1.0*vec3(.0,.0, .25*cos(iTime*4.+1.57)*+.0);\n    vec3 a_lharm = _lharm+vec3(.0,.0+-.25+.25*cos(iTime*4.),.0+.25+.25*sin(iTime*4.) );\n    vec3 a_lfharm = _lfharm+vec3(.0,.0+.0+.125*cos(iTime*4.+1.57), +.25+.25*sin(iTime*4.)+.0)*1.0;\n    \n    vec3 a_raharm = _raharm+1.0*vec3(.0,.0, .25*cos(iTime*4.+1.57+1.57)*+.0);\n    vec3 a_rharm = _rharm+vec3(.0,.0+-.25+.25*cos(iTime*4.+1.57),.0+.25+.25*sin(iTime*4.+1.57) );\n    vec3 a_rlharm = _rfharm+vec3(.0,.0+.0+.125*cos(iTime*4.+1.57+1.57), +.25+.25*sin(iTime*4.+1.57)+.0)*1.0;\n\n    r = min(r,\n              sdc(p, _torso, a_laharm, .25)\n              );\n    r = min(r,\n              sdc(p, _torso, a_raharm, .25)\n              );\n    r = min(r,\n              sdc(p, a_lharm, a_laharm, .25)\n              );\n    r = min(r,\n              sdc(p, a_rharm, a_raharm, .25)\n              );\n    r = min(r,\n              sdc(p, a_lharm, a_lfharm, .25)\n              );\n    r = min(r,\n              sdc(p, a_rharm, a_rlharm, .25)\n              );\n    r = min(r,\n              sdc(p, _torso, _pelvis, .25)\n              );\n    vec3 a_rleg = _rleg+vec3(.0,.0, .75*cos(iTime*5.)+.5);\n    vec3 a_lleg = _lleg+vec3(.0,.0, .75*sin(iTime*5.)+.5);\n    vec3 a_lfoot = _lfoot+vec3(.0,.0, 1.*sin(iTime*5.+.0)-.5);\n    vec3 a_rfoot = _rfoot+vec3(.0,.0, 1.*cos(iTime*5.+.0)-.5);\n    r = min(r,\n              sdc(p, _raleg, a_rleg, .25)\n              );\n    r = min(r,\n              sdc(p, a_rleg, a_rfoot, .25)\n              );\n    r = min(r,\n              sdc(p, _laleg, a_lleg, .25)\n              );\n    r = min(r,\n              sdc(p, a_lleg, a_lfoot, .25)\n              );\n    \n    \n    return r;\n}\n\n\nfloat map(vec3 p)\n{\n\tfloat r, rr, rrr, bod; // r is return value, other floats are intermediary distances\n\n    vec3 pp = p; // old p\n    p.zyx = (fract(p.zyx*.025)-.5)*20.; // repeat space\n    vec3 idp = floor(((pp.zyx*.025)-.0)*1.)*200.; // get id of each cell\n\n    // use ids to rotate differently in each cell space\n    rot(p.yx,  ie*sin(idp.z+iTime*-.5)*.3333);\n    p += vec3(-3., 4., -2.0)*.3333; // add some vector, don't forget to not displace over cell boundary\n    rot(p.zx,  ie*sin(idp.y+iTime*.25)*1.25 +1.57);\n    p += -vec3(3., 2., -2.0)*.3333;\n    rot(p.yz,  ie*sin(idp.x-iTime*2./3.)*1.333 +1.57*2.);\n    p += vec3(3., 2., -2.0)*.3333;\n    pp.y=p.y; // store repeated space y value in ppp.y var\n    float idb = step(pp.y, .0); // if y > 0 then 1 else 0, I use this to color bottom/top sphere differently\n    p.y = abs(p.y)-2.1; // create symmetry on y axis of the repeated space\n    rr = length(vec3(p.x, pp.y, p.z))-5.5; // create a ball\n    \n    rr = max(rr\n             ,\n            pp.y+1.5 // cut the ball and keep the top part\n            );\n\n    rr = max(rr\n             ,\n            -(max(abs(p.x), max(abs(pp.y+2.2), abs(p.z+1.) ) )-2.25) // dig a cube into the ball\n            );\n    \n    rr = abs(rr)+.0751; // make the ball transparent\n    \n    bod = body(p); // create bodies\n    r = bod;\n    r = min(r, rr);\n\n\t// Create the bottom sphere part\n    rrr = max( -(pp.y) + sin(length(p.xz+vec2(.0,2.1))*5.+iTime*10.)*.25 // cut with waves centered on foot\n              ,\n              length(vec3(p.x, pp.y, p.z) )-5.3 // ball distance\n             );\n    rrr = abs(rrr)+.10751; // make it transparent\n    r = min(r, rrr);\n    \n    float ball = length(vec3(p.x, abs(pp.y)-2., p.z+.25))-.25; // this is the ball between hands\n    ball = abs(ball)+.01251; // make it transparent\n    r = min(r, ball);\n    \n    // here is coloring\n    // ids of repeated space are also used for coloring\n    \n    // wavy sphere color\n    h += (vec3(.09, .475, .607) )/max(.05, rrr*rrr*3. );\n    // cubicle sphere color\n    h += (1.-vec3(.3+-.205*(mod(idp.x-1.5, 3.)+0.0), .425+-.06125*(mod(idp.y-1.5, 3.)+0.0), .3+idb*.25+-.125*(mod(idp.z-1.5, 3.)+0.0)))/max(.05, rr*rr*3. + .61*.0);\n    // body color\n    h += (1.-vec3(.32681-idb*.25, .25+-.5*idb, .3))/max(.05, bod*bod*400. + .01);\n    // little hand spheres color\n    h += (vec3(.25, .25+.2*idb, .25))/max(.01, ball*ball*.051+.01);\n    return r;\n}\n\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n    ie = clamp(log(iTime*.125+1.),.0,1.); // start at 0 and progress to 1, used to animate rotations\n\n    h = vec3(.0); // final color\n    vec2 R = iResolution.xy, uv = (f-R*.5)/R.y;\n\n    // classic ray stuff\n    vec3 ro = vec3( 20.*(1.0+sin(iTime*.5)), 20.*(1.+cos(iTime*.5)), -10.+iTime*30.0 );\n    vec3 rd = normalize(vec3(uv, 1.));\n    vec3 p;\n    vec2 d = vec2(1e2, .0);\n\n    for (float i = .0; i< 100.; i++)\n    {\n        p = ro + rd * d.y;\n        d.x = map(p);\n        d.y += d.x;\n\t    if ( d.x < .0001 )\n\t        break;\n    }\n    o.xyz = h*.0025;\n    o.w = 1.0;\n    o /= length(uv)+1.9; // Strong vignette counteract overall very bright scene\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}