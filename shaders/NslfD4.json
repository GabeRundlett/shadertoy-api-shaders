{
    "Shader": {
        "info": {
            "date": "1646171484",
            "description": "The mandelbrot set with color (hue) cycling",
            "flags": 0,
            "hasliked": 0,
            "id": "NslfD4",
            "likes": 1,
            "name": "Mandelbrot Rainbow Cycling",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "jdowner",
            "viewed": 189
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n\nvec3 hsv2rgb(in vec3 hsv) {\n  float h = hsv.x;\n  float s = hsv.y;\n  float v = hsv.z;\n  vec3 k = vec3(1.0, 2.0/3.0, 1.0/3.0);\n  vec3 p = clamp(abs(6.0*fract(h - k) - 3.0) - 1.0, 0.0, 1.0);\n  return v * mix(k.xxx, p, s);\n}\n\nvec4 rainbowify(float value) {\n    const float hueSpeed = -75.0;\n    float hue = mod(value + iTime*hueSpeed, 360.0) / 360.0;\n    vec3 hsv = vec3(hue, 1.0, 1.0);\n    return vec4(hsv2rgb(hsv), 1.0);\n}\n\nint mandelbrot(in vec2 uv) {\n    vec2 st = vec2(0.0, 0.0);\n    const int maxIterations = 1000;\n    for (int i = 0; i < maxIterations - 1; i++) {\n        if (st.x*st.x + st.y*st.y > 4.0) {\n            return i;\n        }\n        st = vec2(st.x*st.x - st.y*st.y, 2.0*st.x*st.y) + uv;\n    }\n    return -1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 wh = iResolution.xy;\n    vec2 c = wh*0.5;\n\n    // const float zoomMax = 5.0;\n    \n    const float zoom = -0.4;\n    const vec2 offset = vec2(-1.0, 0.0);\n    \n    // const float zoom = 1.0;\n    // const vec2 offset = vec2(-1.0, 0.3);\n    \n    // const float zoom = 5.0;\n    // const vec2 offset = vec2(-0.725+0.0001, 0.29+0.00001);\n    \n    float scale = pow(10.0, zoom);\n    float ratio = min(wh.x, wh.y);\n    vec2 uv = (fragCoord - c)/(ratio*scale) + offset;\n    \n    int iterations = mandelbrot(uv);\n    if (iterations < 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    const float hueOffset = 120.0;\n    const float deltaHue = -8.0;\n    float hue = float(iterations)*deltaHue + hueOffset;\n    fragColor = rainbowify(hue);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}