{
    "Shader": {
        "info": {
            "date": "1441704157",
            "description": "fire",
            "flags": 0,
            "hasliked": 0,
            "id": "Mt2SRh",
            "likes": 2,
            "name": "Radial fire",
            "published": 3,
            "tags": [
                "2d",
                "fire"
            ],
            "usePreview": 0,
            "username": "leftium",
            "viewed": 454
        },
        "renderpass": [
            {
                "code": "// based on Burning planet by nuclear (https://www.shadertoy.com/view/Mds3Wr)\n\nprecision mediump float;\nvec3 calc_pal(float x);\n\nfloat snoise(in vec3 v);\nfloat snoise(in vec4 v);\n\nfloat fbm(in vec3 v, int octaves);\nfloat fbm_wrap(in vec3, int octaves);\nfloat fbm_wrap_abs(in vec3, int octaves);\n\n\nfloat fbm_abs(in vec3 v, int octaves);\n\nfloat fbm_abs(in vec4 v, int octaves);\n\nfloat checkered(in vec3 v) {\n       \n    float x = v.x;\n    float y = v.y;\n    \n    return (x>0.0) && (y>0.0) && mod(floor(x), 2.0) == mod(floor(y), 2.0) ? 0.0 : 1.0;\n}\n\n\n#define M_PI\t3.14159\n#define M_2PI\t(2.0*M_PI)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = iTime * 1.0;\n\tvec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 p = (uv * 2.0 - 1.0) * aspect;\n    \n    float n = 0.0;\n    \n    int octaves = 16;\n    \n    vec2 v = uv * M_2PI * 3.0;\n    // v = mod(v, M_2PI);\n    \n    \n    \n    if (false && uv.x < 0.5) {\n        if (uv.y > 0.5) {\n          n = fbm_abs(vec3(mod(v, M_2PI), time), octaves);\n        } else {\n          n = fbm_wrap_abs(vec3(mod(v, (M_2PI)), time), octaves);\n          // n = checkered(vec3(v, time));\n        }\n\n        fragColor.xyz = vec3(0, n, (v.x < M_2PI) && (v.y < M_2PI || v.y > 2.0*M_2PI) ? 1:0);\n    } else {      \n        float t = atan(p.x, p.y);\n        float r = length(p) * 1.0;\n\n\n        vec2 dom = vec2(t, r-time);\n        float turb = 0.0;\n\n        if (false && uv.y > 0.5) {\n          turb = r + 0.67 + fbm_abs(vec3(dom, time), octaves) * .25;\n        } else {\n          turb = r + 0.67 + fbm_wrap_abs(vec3(dom, time), octaves) * .25;\n        }\n\n        vec3 color = vec3(0.0*r, 0.0*(t+M_PI)/M_2PI, turb);\n        color = calc_pal(turb * .95);\n\n\n        fragColor.xyz = color;\n        fragColor.w = 1.0;\n    }\n}\n\nvec3 calc_pal(float x)\n{\n    // return vec3(x,x,x);\n    \n\tvec3 col = mix(vec3(1.0, 0.9, 0.2), vec3(0.8, 0.2, 0.1), smoothstep(1.2, 1.6, x));\n\tcol = mix(col, vec3(0.0, 0.0, 0.0), smoothstep(1.5, 1.8, x));\n\treturn col;\n}\n\n\nfloat snoise_wrap(in vec3 v) {\n    float th = v.x;\n    float r = v.y;\n    \n    float s = th / (M_2PI);\n    float t = r / (M_2PI);\n    \n    /*\n    float nx = cos(s*2.0*M_PI)*sin(t*2.0*M_PI);\n    float ny = sin(s*2.0*M_PI)*sin(t*2.0*M_PI);\n    float nz = cos(t*2.0*M_PI);\n\n    return snoise(vec3(nx,ny,nz));\n    /**/\n    \n    /**/\n    float d = M_PI;\n    \n    float x1 = -d;\n    float y1 = -d;\n    float x2 =  d;\n    float y2 =  d;\n    float dx = x2-x1;\n    float dy = y2-y1;    \n    \n    float nx = x1+cos(s*M_2PI)*dx/M_2PI;\n    float ny = y1+cos(t*M_2PI)*dy/M_2PI;\n    float nz = x1+sin(s*M_2PI)*dx/M_2PI;\n    float nw = y1+sin(t*M_2PI)*dy/M_2PI;\n\n    return snoise(vec4(nx,ny,nz,nw));\n    /**/\n    \n    \n}\n\nfloat fbm_wrap(in vec3 v, int octaves) {\n\tfloat res = 0.0;\n\tfloat scale = 1.0;\n\tfor(int i=0; i<8; i++) {\n\t\tif(i >= octaves) break;\n\t\tres += snoise_wrap(v) * scale;\n\t\tv *= vec3(2.0, 2.0, 2.0);\n\t\tscale *= 0.5;\n\t}\n\treturn res;\n}\n\nfloat fbm_wrap_abs(in vec3 v, int octaves) {\n\tfloat res = 0.0;\n\tfloat scale = 1.0;\n\tfor(int i=0; i<64; i++) {\n\t\tif(i >= octaves) break;\n\t\tres += abs(snoise_wrap(v)) * scale;\n\t\tv *= vec3(2.0, 2.0, 2.0);\n\t\tscale *= 0.5;\n\t}\n\treturn res;\n}\n\n\nfloat fbm(in vec3 v, int octaves)\n{\n\tfloat res = 0.0;\n\tfloat scale = 1.0;\n\tfor(int i=0; i<8; i++) {\n\t\tif(i >= octaves) break;\n\t\tres += snoise(v) * scale;\n\t\tv *= vec3(2.0, 2.0, 2.0);\n\t\tscale *= 0.5;\n\t}\n\treturn res;\n}\n\nfloat fbm_abs(in vec3 v, int octaves)\n{\n\tfloat res = 0.0;\n\tfloat scale = 1.0;\n\tfor(int i=0; i<8; i++) {\n\t\tif(i >= octaves) break;\n\t\tres += abs(snoise(v)) * scale;\n\t\tv *= vec3(2.0, 2.0, 2.0);\n\t\tscale *= 0.5;\n\t}\n\treturn res;\n}\n\nfloat fbm_abs(in vec4 v, int octaves)\n{\n\tfloat res = 0.0;\n\tfloat scale = 1.0;\n\tfor(int i=0; i<8; i++) {\n\t\tif(i >= octaves) break;\n\t\tres += abs(snoise(v)) * scale;\n\t\tv *= vec4(2.0, 2.0, 2.0, 2.0);\n\t\tscale *= 0.5;\n\t}\n\treturn res;\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n// noise functions.\n// Author : Ian McEwan, Ashima Arts.\n// Maintainer : ijm\n// Lastmod : 20110822 (ijm)\n// License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n// Distributed under the MIT License. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(in vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(in vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(in vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(in vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(in vec3 v)\n{\n  const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy) );\n  vec3 x0 = v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  // x0 = x0 - 0.0 + 0.0 * C.xxx;\n  // x1 = x0 - i1 + 1.0 * C.xxx;\n  // x2 = x0 - i2 + 2.0 * C.xxx;\n  // x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3 ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n  }\n\t\t\t\t\t\t\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289(i); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}