{
    "Shader": {
        "info": {
            "date": "1596365198",
            "description": "many rings",
            "flags": 0,
            "hasliked": 0,
            "id": "3lsfz7",
            "likes": 2,
            "name": "many circles",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define resolution iResolution\n  float pi = 3.1415926535;\n  mat2 rot(float r){\n      return mat2(cos(r),sin(r),-sin(r),cos(r));\n  }\n  \n  float cube(vec3 p,vec3 s){\n      vec3 q = abs(p);\n      vec3 m = max(s-q,0.0);\n      return length(max(q-s,0.))-min(min(m.x,m.y),m.z);\n  }\n\n  float ring(vec3 p,float r,vec2 s){\n      vec2 q = abs(vec2(length(p.xz)-r,p.y));\n      vec2 m = max(s-q,0.);\n      return length(max(q-s,0.))-min(m.x,m.y);\n  }\n  float rings(vec3 p){\n      float cd = length(p.xz)-6.;\n      vec2 skr = vec2(length(p.xz),atan(p.x,p.z));\n      for(int i =0;i<4;i++){\n          float fi =float(i);\n          float es = skr.x-9.2/pow(2.,fi);\n          skr.x = abs(es);\n          skr.y += (fi+2.)*0.1*sign(es)*(time);\n      }\n      p.xz = skr.x*vec2(cos(skr.y),sin(skr.y));\n      float d2 = ring(p,0.2,vec2(0.2,0.3));\n      p -= vec3(0.3,0,0);\n      p.xz *= rot(pi/4.);\n      d2 = max(d2,-cube(p,vec3(0.3,0.5,0.3)));\n      d2 = max(d2,-cd);\n      return d2;\n  }\nfloat dist(vec3 p){\n\n  return rings(p);\n}\nvec3 gn (vec3 p){\n  vec2 e = vec2(0.0001,0.0);\n  return normalize(vec3(\n    dist(p+e.xyy)-dist(p-e.xyy),\n    dist(p+e.yxy)-dist(p-e.yxy),\n    dist(p+e.yyx)-dist(p-e.yyx)\n    ));\n}\nvec3 lighting(vec3 p,vec3 rd){\n  vec3 n = gn(p);\n  vec3 ld = normalize(vec3(0.2,0.1,1.0));\n  float ndl = max(dot(n,ld),0.0);\n  vec3 R = normalize(-ld+2.0*n*ndl);\n  float spec = pow(max(dot(-rd,R),0.0)*sign(ndl),10.0);\n  vec3 col = vec3(0.8*ndl+spec)+0.1;\n  return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 p = (fragCoord.xy * 2. - resolution.xy) / min(resolution.x, resolution.y);\n    float kt =time*0.+1.;\n    float ra =25.0;\n    vec3 ro =vec3(ra*cos(kt),10,ra*sin(kt));\n    vec3 ta =vec3(0.,0,0.);\n    vec3 cdir =normalize(ta-ro);\n    vec3 up =vec3(0.,1.,0.);\n    vec3 side= cross(cdir,up);\n    up = cross(side,cdir);\n    float fov =3.0;\n    vec3 rd =normalize(side*p.x+up*p.y+fov*cdir);\n    float d;\n    float t =1.001;\n    float hit =0.001;\n    for(int i=0;i<99;i++){\n      d = dist(ro+rd*t);\n      t+=d;\n      if(hit>d||t>1000.)break;\n    }\n    vec3 col =vec3(0.);\n    if(hit>d){\n      col = lighting(ro+rd*t,rd);\n    }\n    fragColor = vec4(col,1.);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}