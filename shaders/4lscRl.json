{
    "Shader": {
        "info": {
            "date": "1506009990",
            "description": "play with mouse and observe how specular is trapped in high curvature areas.\nuncomment bump or edit light dir if you wish.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lscRl",
            "likes": 2,
            "name": "specular on ellipsoid",
            "published": 3,
            "tags": [
                "raytracing",
                "sphere",
                "shading",
                "curvature",
                "perception"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 611
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvoid mainImage( out vec4 O, vec2 U ) {\t\n    O-=O;\n\tvec2 r = iResolution.xy, \n         M = iMouse.xy;\n    if (length(M)<5.) M = (.5+.5*.3*vec2(sin(iTime),cos(1.7*iTime)) )*r; // autodemo\n#define frame(U)  (U+U - r) /r.y\n         U = frame(U)*.7;\n         M = frame(M)*3.;\n    \n\tvec3 R  = vec3(1,.4,.1),              // 3 lengths of the ellipsoid\n         L  = vec3(0,0,1),                // light dir\n       //L  = vec3(0,1,0),                \n         ro = vec3(0,0,5),                // camera com\n         rd = normalize(vec3(U,-4));      // ray dir\n    mat2 Ra = rot(M.x),\n         Rb = rot(M.y); \n    ro.xz *= Ra; ro.yz *= Rb;             // goto ellipsoid frame ( rotations )\n    rd.xz *= Ra; rd.yz *= Rb;\n    \n   vec3  eo = ro/R, ed = rd/R;            // goto sphere frame ( scaling by 1/R )\n    float A = dot(ed,ed),                 // solve ray - sphere intersection :\n          B = dot(ed,eo),                 // P = O+l.D & |P|²=1  =>  A.l² + 2B.l + C = 0\n          C = dot(eo,eo)-1.,\n          D = B*B-A*C;\n    if (D>=0.) {\n        L = normalize(L);\n        vec3 P = ro + rd*(-B-sqrt(D))/A,  // hit point ( in ellipsoid frame )\n             N = normalize(P / (R*R) ),   // normal at hit point\n             H = normalize(L-rd);         // half-vector\n      //float s = 100.; N = normalize(N + 3.*sin(s*P)/s); // bump\n                      \n        O = vec4(1,smoothstep(1.,0.,abs(P)/.01)),   // color\n        O =  (.2 + .8* clamp(dot(N,L),0.,1.) ) *O   // ambiant & diffuse\n            + 5.*pow( clamp(dot(N,H),0.,1.), 100.); // specular\n    }\n}\n    \n    ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}