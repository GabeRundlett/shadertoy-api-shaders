{
    "Shader": {
        "info": {
            "date": "1572189049",
            "description": "Japanese gate over a dark chess texture",
            "flags": 0,
            "hasliked": 0,
            "id": "wstXDM",
            "likes": 4,
            "name": "Shadertober 26 Dark",
            "published": 3,
            "tags": [
                "raymarching",
                "inktober"
            ],
            "usePreview": 0,
            "username": "GreenChicken",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "// SHADERTOBER 26 Dark\n// Poulet Vert 27-10-2019\n// thanks iq, leon, flopine\n\n#define VOLUME 0.001\n#define PI 3.14159\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nvec3 opRep(vec3 p, vec3 c)\n{\n     return mod(p+0.5*c,c)-0.5*c;\n}\n\nvec2 opU2( vec2 d1, vec2 d2 )\n{\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\n// Scene setup\nvec2 map(vec3 pos)\n{\n    vec2 scene = vec2(0.0, 0.0);\n    \n    scene.x = pos.y;\n    \n    float doorP = iTime * 3.;\n    \n    vec3 dp = pos + vec3(0.0, -3.0, doorP);\n    dp = opRep(dp, vec3(0.0, 0.0, 5.0));\n    float door = sdBox(dp, vec3(2., .2, .3));\n    \n    dp = pos + vec3(1.5 - pos.y*.1, -1.5, doorP);\n    dp = opRep(dp, vec3(0.0, 0.0, 5.0));\n    door = min(door,sdBox(dp, vec3(.2, 2.0, .2)));\n    \n    dp = pos + vec3(-1.5 + pos.y*.1, -1.5, doorP);\n    dp = opRep(dp, vec3(0.0, 0.0, 5.0));\n    door = min(door,sdBox(dp, vec3(.2, 2.0, .2)));\n    \n    // Materials\n    scene = opU2(scene, vec2(door, 1.0));\n    \n    return scene;\n}\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    \n    for(int i=0 ; i<128 ; i++)\n    {\n        vec2 ray = map(ro + rd * t);\n        \n        if(ray.x < (0.0001*t))\n        {\n            return vec2(t, ray.y);\n        }\n        \n        t += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\nfloat GetShadow (vec3 pos, vec3 at, float k) {\n    vec3 dir = normalize(at - pos);\n    float maxt = length(at - pos);\n    float f = 01.;\n    float t = VOLUME*50.;\n    for (float i = 0.; i <= 10.0; i += .1) {\n        float dist = map(pos + dir * t).x;\n        if (dist < VOLUME) return 0.;\n        f = min(f, k * dist / t);\n        t += dist;\n        if (t >= maxt) break;\n    }\n    return f;\n}\n\n\nvec3 GetNormal (vec3 p)\n{\n    float c = map(p).x;\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(map(p+e.xyy).x, map(p+e.yxy).x, map(p+e.yyx).x) - c);\n}\n\nfloat GetLight(vec3 N, vec3 lightPos)\n{\n    return max(dot(N, normalize(lightPos)), 0.0);\n}\n\n\n\nfloat GroundTexture(vec2 uv)\n{   \n    return sign(sin(uv.x))*sign(sin(uv.y));\n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{\n    vec2 t = CastRay(ro, rd);\n    vec3 pos = vec3(ro + rd * t.x);\n    \n    vec3 col = vec3(0.0);\n    vec3 polyCol = palette(iTime*.5, vec3(.5), vec3(.5), vec3(1.0), vec3(0.0, 0.33, 0.67));\n    \n    if(t.x == -1.0)\n    {\n        col = vec3(0.0);\n    }\n    else\n    {    \n        vec3 N = GetNormal(pos);\n        \n        vec3 mainL = vec3(2.0, 5.0, 0.0);\n        float mainlight = GetLight(N, mainL);\n        \n        vec2 ledFreq = vec2(.15, .17);\n        vec2 ledUV =  vec2(-pos.x+5.08, -pos.y-.5);\n        \n        float shade = GetShadow(pos, mainL, 4.0);\n        \n        \n        if(t.y == 0.0) // ground\n        {\n            col = clamp(vec3(1.0-length(pos*.1))*.3, 0.0, 1.0);\n            vec2 groundUV = pos.xz * 10.;\n            groundUV.y += iTime*30.;\n            col *= GroundTexture(groundUV);\n            col *= shade;\n            \n        }\n        else if(t.y == 1.0) // door\n        {\n            col = polyCol;\n            col *= clamp(vec3(1.0-length(pos*.1))*.3, 0.0, 1.0);\n            col *= shade;\n            \n        }\n    }\n    \n    return col;\n}\n\nvec3 GetViewDir(vec2 uv, vec3 cp, vec3 ct)\n{\n    vec3 forward = normalize(ct - cp);\n    vec3 right = normalize(cross(vec3(sin(iTime)*.3, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    return normalize(uv.x * right + uv.y * up + 2.0 * forward);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 screenUV = fragCoord.xy / iResolution.xy;    \n    \n    vec3 cp = vec3(sin(iTime)*.5, 1.0, 0.0);\n    vec3 ct = vec3(0.0, 1.0, 5.0);\n    \n    vec3 vd = GetViewDir(uv, cp, ct);\n    \n    vec3 col = Render(cp, vd, screenUV);\n    \n    col = sqrt(clamp(col, 0.0, 1.0));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}