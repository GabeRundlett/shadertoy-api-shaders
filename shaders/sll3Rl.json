{
    "Shader": {
        "info": {
            "date": "1622658051",
            "description": "Classic julia set with a slightly modified distance formula.",
            "flags": 0,
            "hasliked": 0,
            "id": "sll3Rl",
            "likes": 2,
            "name": "- Modified Julia Set -",
            "published": 3,
            "tags": [
                "julia",
                "mandelbrot",
                "set"
            ],
            "usePreview": 0,
            "username": "Mihaha",
            "viewed": 284
        },
        "renderpass": [
            {
                "code": "/*\n\n> by MihasGames, 02.06.2021 <\n(https://mihas-games.itch.io/)\n\n*/\n\nconst int MAX_ITERATIONS = 200;\n\nint julia(vec2 zz, vec2 c) \n{\n  vec2 z = zz;\n  float a = z.x;\n  float b = z.y;\n  int n = 0;\n  while (n < MAX_ITERATIONS) {\n    float aa = a*a;\n    float bb = b*b;\n    float twoab = 2.0 * a * b;\n\n    a = aa - bb + c.x;\n    b = twoab + c.y;\n\n    if (a*a*a*b + b*b*b*a > 3.0) break;\n    n++;\n  }\n  return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n  int juliaValue = julia((fragCoord.xy/iResolution.xy*4.0 - vec2(2, 2)) * vec2(iResolution.x / iResolution.y, 1), \n                          vec2(cos(iTime), sin(iTime/1.2)));\n  \n  float color = float(juliaValue) / float(MAX_ITERATIONS) * 7.0 + 0.1;\n  fragColor = vec4(color*0.2, color-0.3, color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}