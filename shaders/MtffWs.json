{
    "Shader": {
        "info": {
            "date": "1513895798",
            "description": "Integrating a square signal produces a triangular signal. Integrating the triangular signal produces a quadratic ladder. I worked out the analytical and branchless description of that ladder function. See the [b]funcs()[/b] function, variable [b]p[/b].",
            "flags": 0,
            "hasliked": 0,
            "id": "MtffWs",
            "likes": 26,
            "name": "Integrating a square wave",
            "published": 3,
            "tags": [
                "2d",
                "square",
                "integral"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1816
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Integral of a square pulse signal is a triangle signal\n// Integral of a triangle signal is a quadratic ladder function\n//\n// blue   : sqr = square\n// red    : tri = integral(sqr)\n// yellow : pri = integral(tri) = integral(integral(sqr))\n//\n// Developed to illsutrate this article: https://iquilezles.org/articles/morecheckerfiltering\n\n\n\n// Returns the square, triangular and quadratic-ladder signals\n//\n// Branchless is always nicer\n//\nvec3 funcs( in float x )\n{\n    x *= 0.5;\n    \n    float h = fract(x)-0.5;\n    \n    float s = -sign(h);\n    float t = 1.0 - 2.0*abs(h);          // also 1.0 + 2.0*h*s\n    float p = x + h*t;\n    \n    return vec3( s, t, p );\n}\n\n\nfloat sdSegment( vec2 p )\n{\n    p = abs(p);\n    return length( vec2(p.x, min(1.0-p.y,0.0)) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    const float sca = 4.0;\n    \n    vec2  p = sca*(2.0*fragCoord-iResolution.xy) / iResolution.y;\n    float px = sca*2.0/iResolution.y;\n    \n    vec3 f = funcs( p.x );\n    \n    // background\n    vec3 col = vec3(0.3 + 0.04*mod(floor(p.x)+floor(p.y),2.0));\n    col *= smoothstep( 0.5*px, 1.5*px, abs(p.x) );\n    col *= smoothstep( 0.5*px, 1.5*px, abs(p.y) );\n    \n    // graphs\n    col = mix( col, vec3(1.0,0.7,0.0), 1.0 - smoothstep( 0.5*px, 1.5*px, min(abs(p.y-f.x), length(vec2(fract(p.x+0.5)-0.5,min(1.0-abs(p.y),0.0)))) ) );\n    col = mix( col, vec3(1.0,0.2,0.0), 1.0 - smoothstep( 1.0*px, 2.5*px, abs(p.y-f.y) ) );\n    col = mix( col, vec3(0.0,0.7,1.0), 1.0 - smoothstep( 0.5*px, 2.0*px, abs(p.y-f.z) ) );\n    \n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}