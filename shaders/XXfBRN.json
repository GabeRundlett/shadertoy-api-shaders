{
    "Shader": {
        "info": {
            "date": "1728063615",
            "description": "originals https://www.shadertoy.com/view/X3XBRH https://www.shadertoy.com/view/mlfBRn",
            "flags": 0,
            "hasliked": 0,
            "id": "XXfBRN",
            "likes": 1,
            "name": "caleidoscope combination",
            "published": 3,
            "tags": [
                "fractal",
                "color"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 30
        },
        "renderpass": [
            {
                "code": "vec3 palette(float t){\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    \n    return a + b*cos(6.28318*(c*t+d));\n}\n\nfloat random (float x) {\n\tfloat f = 43758.5453123;\n\treturn fract(sin(x) * f);\n}\n\nfloat random (vec2 x) {\n\tvec2 r = vec2(12.9898, 78.233);\n\treturn random(dot(x, r));\n}\n\n//\n// Basic noise functions.\n//\n\nfloat noise(float x) {\n\tfloat i = floor(x);\n\tfloat fr = fract(x);\n\treturn mix(random(i), random(i + 1.0), fr);\n}\n\nfloat noise(vec2 x){\n\tvec2 i = floor(x);\n\tvec2 fr = fract(x);\n\tfr = fr*fr*(3.0-2.0*fr);\n\tfloat res = mix(\n\t\tmix(random(i), random(i+vec2(1.0,0.0)), fr.x),\n\t\tmix(random(i + vec2(0.0,1.0)), random(i + vec2(1.0,1.0)), fr.x),\n\t\tfr.y);\n\treturn res*res;\n}\n#define Q(p) p *= 2.*r(round(atan(p.x, p.y) * 4.) / 4.)\n#define r(a) mat2(cos(a + asin(vec4(0,1,-1,0))))\n//\tSimplex 3D Noise by Ian McEwan, Ashima Arts\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat noise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n//\n// FBM functions.\n//\n\nfloat fbm (float x, int octaves, float amplitude, float frequency, float lacunarity, float gain) {\n\tfloat value = 0.0;\n\tfor (int i = 0; i < octaves; ++i) {\n\t\tvalue += amplitude * noise(x * frequency);\n\t\tfrequency *= lacunarity;\n\t\tamplitude *= gain;\n\t}\n\treturn value;\n}\n\nfloat fbm (vec2 x, int octaves, float amplitude, float frequency, float lacunarity, float gain) {\n\tfloat value = 0.0;\n\t// Rotate to reduce axial bias\n\tmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < octaves; ++i) {\n\t\tvalue += amplitude * noise(x * frequency);\n\t\tx *= rot;\n\t\tfrequency *= lacunarity;\n\t\tamplitude *= gain;\n\t}\n\treturn value;\n}\n\nfloat fbm(vec3 x, int octaves, float amplitude, float frequency, vec3 shift, float lacunarity, float gain) {\n\tfloat value = 0.0;\n    for (int i = 0; i < octaves; ++i) {\n        float sn = noise(x * frequency);\n        value += amplitude * sn;\n        x += shift;\n        frequency *= lacunarity;\n\t\tamplitude *= gain;\n\t}\n\treturn value;\n}\n\nvec2 rotate(vec2 r, float theta) {\n    return vec2(cos(theta) * r.x - sin(theta) * r.y, sin(theta) * r.x + cos(theta * r.y));\n}\n\n//\n// FBM functions with default values.\n//\n\nfloat fbm(float x, int octaves) {\n\treturn fbm(x, octaves, 0.5, 1.0, 2.0, 0.5);\n}\n\nfloat fbm(vec2 x, int octaves) {\n\treturn fbm(x, octaves, 0.5, 1.0, 2.0, 0.5);\n}\n\nfloat fbm(vec3 uv, int octaves) {\n    return fbm(uv, octaves, 0.5, 1.0, vec3(8), 2.0, 0.5);\n}\n\n\nmat2 rotationMatrix(float angle)\n{\n    float sine = sin(angle), cosine = cos(angle);\n    return mat2( cosine, -sine, \n                 sine,    cosine );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Initialization\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) /iResolution.y;\n   \n    Q(uv);\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n      vec2 fromCenter = (fragCoord - iResolution.xy*0.5)/iResolution.x;\n    float l = length(fromCenter);\n    \n    l *= 1.6;\n    \n    fromCenter *= rotationMatrix((0.0005/l)*iTime);\n\n    \n    //vec2 uv = fragCoord/iResolution.xy;\n    //uv.y *= iResolution.y / iResolution.x;\n    //uv.y += iResolution.x / iResolution.y * 0.5;\n    \n    //vec2 fromCenter = uv - vec2(0.5, 0.5);\n\n    // Time varying pixel color\n    \n    float a = (fbm((l + fbm(fromCenter, 9))*22.0 + iTime*0.4 + fbm(l*10.0 + iTime*0.7, 9)*3.0, 9));\n    float b = (fbm((l + fbm(fromCenter, 7))*20.0 + iTime*0.4 + fbm(l*10.0 + iTime*0.75, 9)*3.0, 9));\n    float c = (fbm((l + fbm(fromCenter, 6))*20.0 + iTime*0.3999 + fbm(l*10.0 + iTime*0.699, 9)*3.0, 9));\n    vec3 col2 = vec3(a, b, c);\n    \n    col2 *= 0.25 + pow(l, 0.75)*1.6;\n    //Color calculation ? \n   for(float j =0.0; j<.055; j+= 0.01){\n       for(float i =0.0; i< 2.; i++) {\n            uv = fract(uv *1.5) - 0.5;\n uv+=fract(iTime*0.1);\n            float d = length(uv) * exp(-length(uv0));\n\n            vec3 col = palette(length(uv0) + i*.4 + iTime);\n\n            d = sin(d*8.+ (iTime*.1))/1.+j;\n            d = abs(d);\n\n            d=0.01/d;\n\n            finalColor += col*d*col2*10.;\n       }\n   }\n    \n    fragColor = vec4(finalColor, 1.0) ;\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}