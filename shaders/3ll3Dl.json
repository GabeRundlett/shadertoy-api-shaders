{
    "Shader": {
        "info": {
            "date": "1558080043",
            "description": "Noise texture tests. Also discovering that smoothstep = quick cubic interpolation.",
            "flags": 0,
            "hasliked": 0,
            "id": "3ll3Dl",
            "likes": 5,
            "name": "[Wan] Sand dunes",
            "published": 3,
            "tags": [
                "raymarching",
                "noise"
            ],
            "usePreview": 0,
            "username": "wan",
            "viewed": 516
        },
        "renderpass": [
            {
                "code": "#define SCALE 0.5\n#define STEPS 100.\n\nfloat rand(vec2 p) {\n\treturn fract(sin(dot(p, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noiseTex(vec2 p) {\n\tvec2 n = floor(p*SCALE);\n\tvec2 f = fract(p*SCALE);\n    f = vec2(smoothstep(0.,1.,f.x),smoothstep(0.,1.,f.y));\n\tfloat c1 = rand(n), c2 = rand(n+vec2(1.,0.)), c3 = rand(n+vec2(0.,1.)), c4 = rand(n+vec2(1.,1.));\n    return mix(mix(c1,c2,f.x), mix(c3,c4,f.x), f.y);\n}\n\nfloat sdf(vec3 p, vec3 eye) {\n    if (length(p - eye) > 30.) return 1000.;\n\treturn p.y - noiseTex(p.xz) + noiseTex(p.xz*10.*vec2(2.5,1.))/100. - noiseTex(p.xz*150.)/350.;\n}\n\nvec3 normal(vec3 p, vec3 eye) {\n\tvec2 e = vec2(0.001, 0.);\n\treturn normalize(vec3(\n\t\tsdf(p+e.xyy, eye)-sdf(p-e.xyy, eye),\n\t\tsdf(p+e.yxy, eye)-sdf(p-e.yxy, eye),\n\t\tsdf(p+e.yyx, eye)-sdf(p-e.yyx, eye)\n\t\t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = ( 2.*fragCoord.xy - iResolution.xy ) /iResolution.y;\n\n\tvec2 eyexz = vec2(0.,iTime);\n\tvec3 eye = vec3(eyexz.x,3. - sdf(vec3(eyexz.x,2.,eyexz.y), eyexz.xxy), eyexz.y);\n\tvec3 raydir = normalize(vec3(uv.x,uv.y-.5,1.));\n\tvec3 p = eye;\n\tfloat hit = 0.;\n\t\t\t\t\n\tfor (float i = 0.; i < STEPS; i++) {\n\t\tfloat d = sdf(p, eye);\n\t\tif (d < 0.001) {\n\t\t\thit = i;\n\t\t\tbreak;\n\t\t}\n\t\tp += d * raydir;\n\t}\n\t\n\tvec3 lightdir = normalize(vec3(-.5,-1.,-1.));\n\tvec3 color = vec3(0.);\n    vec3 dark = vec3(.3,.2,.1);\n\tif (hit > 0.) {\n\t\tcolor = mix(\n            dark,\n            vec3(.9,.7,.4),\n            clamp(dot(normal(p, eye), -lightdir) - hit/STEPS, 0.,1.));\n        color = mix(\n            color,\n            vec3(1.,0.9,0.5),\n            p.y-.3\n            );\n      \tcolor = mix(\n            color,\n            dark,\n            clamp(length(p-eye)/20., 0., 1.));\n    } else if (length(p-eye) > 100.) {\n     \tcolor = mix(vec3(.9,.99,.90),vec3(.5,.6,.99),uv.y);\n    } else {\n        color = dark;\n    }\n    \n    //color = vec3(noiseTex(uv*10.));\n\t\n\tfragColor = vec4( color, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}