{
    "Shader": {
        "info": {
            "date": "1672271708",
            "description": "One possible solution for a continuous arm reaching between two points and with a fixed length.\nClick and drag the mouse to move the gripper.",
            "flags": 0,
            "hasliked": 0,
            "id": "mllGzs",
            "likes": 16,
            "name": "Continuous Arm IK - Solution 1",
            "published": 3,
            "tags": [
                "ik",
                "arc",
                "continuous",
                "arm"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926536\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    p -= a, b -= a;\n    return length(p - b * clamp(dot(p, b) / dot(b, b), 0.0, 1.0));\n}\n\n// https://www.shadertoy.com/view/wl23RK\nfloat sdArc(in vec2 p, in vec2 sc, in float r) {\n    p.x = abs(p.x);\n    return sc.y * p.x > sc.x * p.y ? length(p - sc * r) : abs(length(p) - r);\n}\n\nvec2 arclength(in float h, in float r, out float halfH, out float halfArc, out float R) {\n    halfH = h / 2.0;\n    R = sqrt(r * r + halfH * halfH);\n\n    float si = r / R;\n    halfArc = asin(si);\n    if (h < 0.0) halfArc = PI - halfArc;\n\n    float arclen = 2.0 * R * halfArc;\n    float q = si / sqrt(1.0 - si * si);\n    float slope = (h < 0.0 ? halfArc + q : halfArc - q) * halfH / R;\n\n    return vec2(arclen, slope);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    if (ivec2(iMouse.xy) == ivec2(0)) {\n        float ang = 0.5 + 0.5 * sin(iTime);\n        mouse = vec2(3.0 * cos(ang), sin(ang));\n    }\n\n    float mouseDist = length(mouse);\n    vec2 cosi = mouse / mouseDist;\n    mat2 rot = mat2(cosi.x, cosi.y, -cosi.y, cosi.x);\n\n    // Check if the target is within reach\n    float L = 3.5;\n    if (mouseDist < L) {\n        // Solve for parameter h to set arclength equal to L\n        float r = mouseDist / 2.0;\n        float h = L;\n        float halfH, halfArc, R;\n        for (int i=0; i < 6; i++) {\n            vec2 A = arclength(h, r, halfH, halfArc, R);\n            h -= (A.x - L) / A.y;\n        }\n\n        // Draw the arm\n        //vec2 prev = vec2(0.0);\n        //for (float t=0.02; t < 1.02; t += 0.02) {\n        //    float theta = mix(halfArc, -halfArc, t);\n        //    vec2 cur = rot * (R * vec2(-sin(theta), cos(theta)) + vec2(r, -halfH));\n        //    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, sdLine(uv, prev, cur)));\n        //    prev = cur;\n        //}\n\n        float gripper = length(uv - mouse) - 0.2;\n\n        float arm = sdArc(uv * rot - vec2(r, -halfH), vec2(sin(halfArc), cos(halfArc)), R) - 0.05;\n        arm = max(arm, -gripper);\n        color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, arm));\n\n        gripper = max(gripper, 0.1 - sdLine(uv, mouse, mouse + rot * vec2(cos(halfArc), -sin(halfArc))));\n        color = mix(color, vec3(1.0), smoothstep(unit, 0.0, gripper));\n    }\n\n    // Otherwise, choose the closest approximation to the target\n    else {\n        vec2 nearest = cosi * L;\n        float gripper = length(uv - nearest) - 0.2;\n\n        float arm = sdLine(uv, vec2(0.0), nearest) - 0.05;\n        arm = max(arm, -gripper);\n        color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, arm));\n\n        gripper = max(gripper, 0.1 - sdLine(uv, nearest, nearest + cosi));\n        color = mix(color, vec3(1.0), smoothstep(unit, 0.0, gripper));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}