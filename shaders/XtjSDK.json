{
    "Shader": {
        "info": {
            "date": "1446586286",
            "description": "Another sine/cosine deformation of a sphere.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtjSDK",
            "likes": 219,
            "name": "Sculpture III",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "noise",
                "trigonometry"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 14156
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2015 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2  // Set AA to 1 if your machine is too slow\n#endif\n\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat hash1( in vec2 f ) \n{ \n    return fract(sin(f.x+131.1*f.y)*43758.5453123); \n}\n\n\nconst float PI = 3.1415926535897932384626433832795;\nconst float PHI = 1.6180339887498948482045868343656;\n\nvec3 forwardSF( float i, float n) \n{\n    float phi = 2.0*PI*fract(i/PHI);\n    float zi = 1.0 - (2.0*i+1.0)/n;\n    float sinTheta = sqrt( 1.0 - zi*zi);\n    return vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, zi);\n}\n\nvec4 grow = vec4(1.0);\n\nvec3 mapP( vec3 p )\n{\n    p.xyz += 1.000*sin(  2.0*p.yzx )*grow.x;\n    p.xyz += 0.500*sin(  4.0*p.yzx )*grow.y;\n    p.xyz += 0.250*sin(  8.0*p.yzx )*grow.z;\n    p.xyz += 0.050*sin( 16.0*p.yzx )*grow.w;\n    return p;\n}\n\nfloat map( vec3 q )\n{\n    vec3 p = mapP( q );\n    float d = length( p ) - 1.5;\n\treturn d * 0.05;\n}\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 7.0;\n\n\tfloat precis = 0.001;\n    float h = 1.0;\n    float t = 1.0;\n    for( int i=0; i<1256; i++ )\n    {\n        if( (h<precis) || (t>maxd) ) break;\n\t    h = map( ro+rd*t );\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n\treturn t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.005,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor, in vec2 pix )\n{\n\tfloat ao = 0.0;\n    for( int i=0; i<64; i++ )\n    {\n        vec3 ap = forwardSF( float(i), 64.0 );\n\t\tap *= sign( dot(ap,nor) ) * hash1(float(i));\n        ao += clamp( map( pos + nor*0.05 + ap*1.0 )*32.0, 0.0, 1.0 );\n    }\n\tao /= 64.0;\n\t\n    return clamp( ao*ao, 0.0, 1.0 );\n}\n\nfloat calcAO2( in vec3 pos, in vec3 nor, in vec2 pix )\n{\n\tfloat ao = 0.0;\n    for( int i=0; i<32; i++ )\n    {\n        vec3 ap = forwardSF( float(i), 32.0 );\n\t\tap *= sign( dot(ap,nor) ) * hash1(float(i));\n        ao += clamp( map( pos + nor*0.05 + ap*0.2 )*100.0, 0.0, 1.0 );\n    }\n\tao /= 32.0;\n\t\n    return clamp( ao, 0.0, 1.0 );\n}\n\nvec4 texCube( sampler2D sam, in vec3 p, in vec3 n, in float k )\n{\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n    vec3 w = pow( abs(n), vec3(k) );\n\treturn (x*w.x + y*w.y + z*w.z) / (w.x+w.y+w.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t#define ZERO (min(iFrame,0))\n    \n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n\t\tvec2 q = (fragCoord+o)/iResolution.xy;\n#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\t\tvec2 q = fragCoord/iResolution.xy;\n#endif\n\n    \n        grow = smoothstep( 0.0, 1.0, (iTime-vec4(0.0,1.0,2.0,3.0))/3.0 );\n\n\n        //-----------------------------------------------------\n        // camera\n        //-----------------------------------------------------\n\n        float an = 1.1 + 0.05*(iTime-10.0);\n\n        vec3 ro = vec3(4.5*sin(an),1.0,4.5*cos(an));\n        vec3 ta = vec3(0.0,0.2,0.0);\n        // camera matrix\n        vec3 ww = normalize( ta - ro );\n        vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n        vec3 vv = normalize( cross(uu,ww));\n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n\n        //-----------------------------------------------------\n        // render\n        //-----------------------------------------------------\n\n        vec3 col = vec3(0.07)*clamp(1.0-length(q-0.5),0.0,1.0);\n\n        // raymarch\n        float t = intersect(ro,rd);\n\n        if( t>0.0 )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            vec3 ref = reflect( rd, nor );\n            vec3 sor = nor;\n\n            vec3 q = mapP( pos );\n            float occ = calcAO( pos, nor, fragCoord ); occ = occ*occ;\n\n            // materials\n            col = vec3(0.04);\n            float ar = clamp(1.0-0.7*length(q-pos),0.0,1.0);\n            col = mix( col, vec3(2.1,2.0,1.2), ar);\n            col  *= 0.3;          \n            col *= mix(vec3(1.0,0.4,0.3), vec3(0.8,1.0,1.3), occ);\n            float occ2 = calcAO2( pos, nor, fragCoord );\n\n\n            col *= 1.0*mix( vec3(2.0,0.4,0.2), vec3(1.0), occ2*occ2*occ2 );\n            float ks = texCube( iChannel0, pos*1.5, nor, 4.0 ).x;\n            ks = 0.5 + 1.0*ks;\n            ks *= (1.0-ar);\n\n            // lighting\n            float sky = 0.5 + 0.5*nor.y;\n            float fre = clamp( 1.0 + dot(nor,rd), 0.0, 1.0 );\n            float spe = pow(max( dot(-rd,nor),0.0),8.0);\n            // lights\n            vec3 lin  = vec3(0.0);\n                 lin += 3.0*vec3(0.7,0.80,1.00)*sky*occ;\n                 lin += 1.0*fre*vec3(1.2,0.70,0.60)*(0.1+0.9*occ);\n            col += 0.3*ks*4.0*vec3(0.7,0.8,1.00)*smoothstep(0.0,0.2,ref.y)*(0.05+0.95*pow(fre,5.0))*(0.5+0.5*nor.y)*occ;\n            col += 4.0*ks*1.5*spe*occ*col.x;\n            col += 2.0*ks*1.0*pow(spe,8.0)*occ*col.x;\n            col = col * lin;\n\n            // dust\n            col = mix( col, 0.2*fre*fre*fre+0.6*vec3(0.6,0.55,0.5)*sky*(0.8+0.4*texCube( iChannel0, pos*8.0, nor, 4.0 ).xyz), 0.6*smoothstep(0.3,0.7,nor.y)*sqrt(occ) );\n\n            col *= 2.6*exp(-0.2*t);\n        }\n\n        col = pow(col,vec3(0.4545));\n        \n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    tot = pow( tot, vec3(1.0,1.0,1.4) ) + vec3(0.0,0.02,0.14);\n    \n    tot += (1.0/255.0)*hash1( fragCoord );\n    \n    fragColor = vec4( tot, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}