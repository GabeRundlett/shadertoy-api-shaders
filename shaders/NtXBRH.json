{
    "Shader": {
        "info": {
            "date": "1650497986",
            "description": "Simply flips a random walk. Looks really cool I think.",
            "flags": 0,
            "hasliked": 0,
            "id": "NtXBRH",
            "likes": 36,
            "name": "Simple Shape Generator",
            "published": 3,
            "tags": [
                "procedural",
                "hexagon",
                "generative"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n\nfloat seg(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Change me for different patterns!\n    float f = 2./3.; \n    //f = 0.5;\n    //f = 0.5 + 0.5 * cos(0.01 * iTime);\n      \n    // Angle + point\n    float a = 0.;\n    vec2 p = vec2(0);\n       \n    float d = 100.;\n    for (float i = 0.; i < 50.; i++) {\n        // Random number gives us a unique shape\n        float h = h21(vec2(i - floor(iTime), 103. + i));\n        \n        // Angle moves: LEFT | left | forwards | right | RIGHT\n        // f changes by how much\n        a += pi * (f * floor(5. * h) - 1.);\n        \n        // New point\n        vec2 q = p + 0.05 * ths(5., pi * iTime) * vec2(cos(a), sin(a));\n        \n        // Segment from old to new point (check normal and flipped x coords)\n        // Uncomment second line to see non-mirrored version\n        d = min(d, seg(uv, p, q));\n        d = min(d, seg(vec2(-uv.x, uv.y), p, q));\n        \n        p = q;\n    }\n    \n    float k = 0.5 / iResolution.y;\n    float s = smoothstep(-k, k, -d + 0.009);\n    \n    vec3 col = vec3(s);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}