{
    "Shader": {
        "info": {
            "date": "1688405096",
            "description": "Reproduce the visual effects present in 'Milk inside a bag of milk inside a bag of milk'\n\nThis also works as a general color and resolution reduction shader",
            "flags": 0,
            "hasliked": 0,
            "id": "cslfRn",
            "likes": 1,
            "name": "Milk inside a bag of shader",
            "published": 3,
            "tags": [
                "retro",
                "pixel",
                "videogame"
            ],
            "usePreview": 0,
            "username": "KodiCraft",
            "viewed": 179
        },
        "renderpass": [
            {
                "code": "// ========================== Configuration  ==========================\n\n// Comment to disable shader reduction\n#define ENABLE\n\n// Target resolution\n// I'm unsure if this is respected as intended, it sets how pixelated the image is.\n// Smaller means more pixelated. The image will be stretched to fill the viewport.\n#define RES vec2(320., 200.)\n\n// Score function\n// The closer the color, the smaller the score\n// The smallest score will be our chosen one\n// It's worth playing around with, maybe you'll find a better function!\nfloat score( in vec4 in1, in vec4 in2 ) {\n    return distance(in1, in2);\n}\n\n// Color options\n// These are the only colors we're allowed to use\n// Feel free to play with different colors if you'd like!\nconst vec4[] COLORS = vec4[] (\n      vec4(0., 0., 0., 1.), // Black\n      vec4(124. / 256., 18. / 256., 140. / 256., 1.), // Pink\n      vec4(92. / 256., 1. / 256., 32. / 256., 1.) // Red\n);\n\n// ========================== Main Shader Code ==========================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Recalculate fragCoord according to our pizel size\n    vec2 pSize = iResolution.xy / RES; // Size of a vPixel\n    vec2 pos = floor(fragCoord / pSize); // Position in our vPixel grid\n    \n    fragCoord = (pos * pSize) + (pSize / 2.); // Find appropriate full-scale pixel for our vPixel\n    \n    // Take the color from iChannel0 (input image)\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    \n    #ifdef ENABLE\n    // Find the closest color in terms of the color space\n    int best_color = 0; // Color index\n    float best_score = 999999999999999.; // Distance\n    \n    for (int i = 0; i < COLORS.length(); i++) {\n        float score = score(fragColor, COLORS[i]);\n        if (score < best_score) {\n            best_color = i;\n            best_score = score;\n        }\n    }\n    \n    fragColor = COLORS[best_color];\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}