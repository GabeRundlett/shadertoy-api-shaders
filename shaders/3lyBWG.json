{
    "Shader": {
        "info": {
            "date": "1614932226",
            "description": "A shader that can change color in specific color channel.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lyBWG",
            "likes": 1,
            "name": "color hue adjust",
            "published": 3,
            "tags": [
                "hsl",
                "colorpalette"
            ],
            "usePreview": 0,
            "username": "between",
            "viewed": 412
        },
        "renderpass": [
            {
                "code": "#define redHue 0.000000\n#define orangeHue 0.082816\n#define yellowHue 0.166667\n#define greenHue 0.333333\n#define aquaHue 0.500000\n#define blueHue 0.666667\n#define purpleHue 0.749482\n#define pinkHue 0.833333\n\nvec3 rgb2hsv(vec3 color) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(color.bg, K.wz), vec4(color.gb, K.xy), step(color.b, color.g));\n    vec4 q = mix(vec4(p.xyw, color.r), vec4(color.r, p.yzx), step(p.x, color.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 color) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(color.xxx + K.xyz) * 6.0 - K.www);\n    return color.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), color.y);\n}\n\nvec3 smoothTreatment(vec3 hsv, float hueEdge0, float hueEdge1, vec3 HSVEdge0, vec3 HSVEdge1) {\n    float smoothedHue = smoothstep(hueEdge0, hueEdge1, hsv.x);\n    float scaledLum = HSVEdge0.z + ((HSVEdge1.z - HSVEdge0.z) * smoothedHue);\n    float hue = hsv.x + (HSVEdge0.x + ((HSVEdge1.x - HSVEdge0.x) * smoothedHue));\n    float sat = hsv.y * (HSVEdge0.y + ((HSVEdge1.y - HSVEdge0.y) * smoothedHue));\n    if (sat < 0.01) {\n        return vec3(hue, sat, hsv.z);\n    }\n    float lum = hsv.z;\n\n    lum = (abs(HSVEdge0.z) + abs(HSVEdge1.z)) > 0.0\n              ? (hsv.z * scaledLum * smoothstep(0.0, 1.0, abs(sat / hsv.y - 0.5) * 2.0))\n              : lum;\n    float changedMaxLuminance = max(abs(HSVEdge0.z - 1.0), abs(HSVEdge1.z - 1.0));\n    lum = mix(hsv.z, lum, changedMaxLuminance);\n    return vec3(hue, sat, lum);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    \n    // Change the color HSV to get the hsv changed result\n    // The luminance change cannot be good to the true scenes\n    // If you want to change another color, just use uniform to set outside of the shader\n    float time = sin(iTime)*0.5;\n    vec3 redHSV = vec3(0.0, 1.0, 1.0);\n    vec3 orangeHSV = vec3(time, 1.0, 1.0);\n    vec3 yellowHSV = vec3(0.0, 1.0, 1.0);\n    vec3 greenHSV = vec3(0.0, time, 1.0);\n    vec3 aquaHSV = vec3(0.0, 1.0, 1.0);\n    vec3 blueHSV = vec3(0.0, 1.0, 1.0);\n    vec3 purpleHSV = vec3(0.0, 1.0, 1.0);\n    vec3 pinkHSV = vec3(0.0, 1.0, 1.0);\n    \n    vec3 hsv = rgb2hsv(color.rgb);\n    if (hsv.x < orangeHue) {\n        hsv = smoothTreatment(hsv, 0.0, orangeHue, redHSV, orangeHSV);\n    } else if (hsv.x < yellowHue) {\n        hsv = smoothTreatment(hsv, orangeHue, yellowHue, orangeHSV, yellowHSV);\n    } else if (hsv.x < greenHue) {\n        hsv = smoothTreatment(hsv, yellowHue, greenHue, yellowHSV, greenHSV);\n    } else if (hsv.x < aquaHue) {\n        hsv = smoothTreatment(hsv, greenHue, aquaHue, greenHSV, aquaHSV);\n    } else if (hsv.x < blueHue) {\n        hsv = smoothTreatment(hsv, aquaHue, blueHue, aquaHSV, blueHSV);\n    } else if (hsv.x < purpleHue) {\n        hsv = smoothTreatment(hsv, blueHue, purpleHue, blueHSV, purpleHSV);\n    } else if (hsv.x < pinkHue) {\n        hsv = smoothTreatment(hsv, purpleHue, pinkHue, purpleHSV, pinkHSV);\n    } else {\n        hsv = smoothTreatment(hsv, pinkHue, 1.0, pinkHSV, redHSV);\n    }\n    fragColor = hsv.y > 0.0 ? vec4(hsv2rgb(hsv), color.a) : vec4(vec3(hsv.z), color.a);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}