{
    "Shader": {
        "info": {
            "date": "1550280989",
            "description": "Just made this to see what it looks like to raymarch along a circle.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdB3Wt",
            "likes": 19,
            "name": "inverted line raymarching",
            "published": 3,
            "tags": [
                "2d",
                "raymarching",
                "line",
                "circle",
                "inverted"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 606
        },
        "renderpass": [
            {
                "code": "#define inv(a) (a / dot(a,a))\n#define rot90(a) vec2(-(a).y,a.x)\n#define pi acos(-1.0)\n\nfloat map(vec2 p) {\n    p = abs(fract(p+0.5)-0.5);\n    float len = length(p)-0.2;\n    return len;\n}\n\nfloat pizza( vec2 p, vec2 c, float rad1, float rad2)\n{\n    p.x = abs(p.x);\n    \n    vec2 c2 = vec2(c.y,-c.x);\n    \n    float l = dot(c,p.xy);\n    float q = p.x-c.x*l;\n    float l2 = dot(c2,p.xy)*sign(c.y);\n    float q2 = p.x-c2.x*l2;\n    \n    if (q < 0.0) {\n        l = length(p.xy)*sign(p.y*c.y);\n    }\n    l = -l;\n    \n    if (l < 0.0) {\n        l2 = length(p.xy);\n    }\n    \n    vec2 a = vec2(abs(l2-(rad1+rad2)*0.5)-(rad2-rad1)*0.5,l);\n    \n    return length(max(a,0.0))+min(0.0,max(a.x,a.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    float scale = 2.0;\n    vec2 uv  = scale*(fragCoord*2.0-iResolution.xy  )/iResolution.y;\n    vec4 muv = scale*(abs(iMouse)   *2.0-iResolution.xyxy)/iResolution.y;\n    \n    bool inv = mod(iTime,10.0) > 5.0;\n    \n    vec2 nor = normalize(muv.xy-muv.zw);\n    \n    //if (inv) {\n    muv.xy = inv(muv.xy);\n    muv.zw = inv(muv.zw);\n    //}\n    \n    vec2 pos = muv.zw;\n    \n    if (iMouse.x <= 0.0) {\n        pos = vec2(0.5,0.7);\n        if (inv) pos = inv(pos);\n        nor = vec2(sin(iTime),cos(iTime));\n    }\n    \n    vec2 per = vec2(nor.y,-nor.x);\n    \n    vec2 b = normalize(pos);\n    vec2 nor3 = nor-b*dot(b,nor)*2.0;\n    vec2 per3 = vec2(nor3.y,-nor3.x);\n    \n    vec2 nor2 = pos*0.5;\n    vec2 pos3 = nor2;\n    float len2 = length(nor2);\n    nor2 /= len2;\n    vec2 per2 = vec2(nor2.y,-nor2.x);\n    len2 /= -dot(per3,nor2);\n    vec2 pos4 = pos+per3*len2;\n    \n    if (inv) uv = inv(uv);\n    float flip = sign(dot(per2,nor));\n    \n    mat2 cmat = mat2(nor2,per2);\n    \n    \n    float len = 1000.0;\n    //len = min(len, abs(length(uv-pos)-0.02));\n    //len = min(len, abs(length(uv)-0.02));\n    //len = min(len, abs(length(uv-pos4)-0.02));\n    //len = min(len, max(abs(length(uv-pos4)-abs(len2)),-p.y*flip));\n    \n    vec2 p = (uv-pos4)*cmat;\n    vec2 aah = per*cmat;\n    len = min(len, pizza(p,-aah.yx,abs(len2),abs(len2)));\n    \n    //len = min(len, abs(dot(nor2, uv-pos3)));\n    //len = min(len, abs(dot(nor, uv-pos)));\n\t//len = min(len, max(abs(dot(per, uv-pos)),-dot(nor, uv-pos)));\n    \n    len = min(len, abs(map(uv)));\n    \n    vec2 ro = pos;\n    float dist = 0.0;\n    \n    float size = 10.0/iResolution.y;\n        if (inv) size *= dot(uv,uv);\n    \n    for (int i = 0; i < 100; i++) {\n        \n        \n        float len3 = max(abs(map(ro)),0.01);\n        \n        len = min(len, abs(length(uv-ro)-len3));\n        \n        \n        //len = min(len, abs(length(uv-ro)-size));\n        \n        dist += len3;\n        \n        mat2 rot = mat2(normalize(pos4-ro),vec2(0));\n        \n        rot[1] = rot90(rot[0]);\n        rot[1] *= flip;\n        \n        vec2 xy = vec2(len3*len3*0.5/abs(len2),0);\n        xy.y = sqrt(len3*len3-xy.x*xy.x);\n        xy *= transpose(rot);\n        \n        ro += xy;\n        \n        if (dot(ro,per2)*flip < 0.0) break;\n        \n    }\n    \n    //len = abs(len-0.03);\n    \n    //len = min(len,min(p.x,p.y));\n    \n    if (inv) len /= dot(uv,uv);\n    \n    // Output to screen\n    fragColor = vec4(len*iResolution.y*0.4/scale);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}