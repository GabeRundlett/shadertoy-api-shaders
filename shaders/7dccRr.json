{
    "Shader": {
        "info": {
            "date": "1652975001",
            "description": "Sine-Gordon equation. It starts out with a 1D standing soliton (a domain wall). Click to excite a wave.",
            "flags": 32,
            "hasliked": 0,
            "id": "7dccRr",
            "likes": 1,
            "name": "Solitons",
            "published": 3,
            "tags": [
                "pde"
            ],
            "usePreview": 0,
            "username": "TreborHuang",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float pos = texture(iPosition, uv).x;\n    float vel = texture(iVelocity, uv).x;\n\n    // Amplitude mode\n    fragColor = vec4(sin(pos), cos(pos - PI) - 0.7, -sin(pos), 1);\n    \n    // Energy mode\n    // ??\n    \n    // Momentum mode\n    // ??\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* -------- The Sine-Gordon Equation -------- *\\\n\n More introductory stuff here...\n \n Using Verlet intergration.\n Buffer A : Position history\n Buffer B : Laplacian of Buffer A (Control boundary here)\n Buffer C : Acceleration\n Buffer D : Velocity\n\n\\* ------------------------------------------ */\n\n// Spacetime scale:\nconst float dx = 0.05;\nconst float dt = 0.002;\n// Light speed is set to 1, or on screen, dx/dt / frameRate\n\n// Plank's constant is also set to 1.\n// So mass is equivalent to frequency (maybe off by a factor of 2Ï€).\nconst float mass = .7;\n\n// The damping coefficient controls how fast things die out.\n// const float damp = 0.;\n\n// The equation of motion:\nconst float K = mass * mass;\nfloat acceleration(float field, float laplacian){\n    return laplacian - K * sin(field);\n}\n\n// Returns the energy and momentum density\nfloat energy(float field, float velocity, vec2 gradient){\n    return .5 * (velocity * velocity + dot(gradient, gradient)) + mass * (1. - cos(field));\n}\nvec2 momentum(float velocity, vec2 gradient){\n    return velocity * gradient;\n}\n\n// Defines a click-excited pulse\nfloat pulse(float r){\n    return 4. * atan(\n        .6 / (.8 * cosh(.8 * r)) // One dimensional breather, will disperse.\n    );\n}\n\n// Defines the initial speed of the wall\nconst float speed = 0.3;  // Not very tolerant of high speed :(\nconst float gamma = 1./sqrt(1. - speed * speed);\n// position = 4. * atan(exp(mass * gamma * (d.x - v * t)))\n// velocity = - 4. / (1 + exp(2 * mass * gamma * (d.x - v * t)))\n//    * exp(mass * gamma * (d.x - v*t)) * mass * gamma * v\n\nfloat initpos(vec2 d){\n    return 4. * atan(exp(mass * gamma * d.x));\n}\n\nfloat initvel(vec2 d){\n    return\n        4. * mass * gamma * speed /\n            (exp(mass * gamma * d.x) + exp(-mass * gamma * d.x));\n}\n\n\n// Convenient numbers\n#define PI 3.1415926535897\n#define iPosition iChannel0\n#define iLaplacian iChannel1\n#define iAcceleration iChannel2\n#define iVelocity iChannel3\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Calculates position\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor.xyzw = texture(iPosition, uv).xxyz;\n    float lastVel = texture(iVelocity, uv).x;\n    float lastAcc = texture(iAcceleration, uv).x;\n    \n    fragColor.x += dt *\n        (lastVel + .5 * dt * lastAcc);\n    if (iFrame == 0) {\n        fragColor.x = initpos((fragCoord - .5 * iResolution.xy) * dx);\n    }\n    if (iMouse.z > 0.) {\n        fragColor.x += pulse(length(iMouse.zw - fragCoord) * dx);\n    }\n}\n\n// TODO implement some Lorentz transform\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec2\n    U = vec2(+1,0),\n    R = vec2(0,+1);\n\nfloat fix(float x){\n    return mod(x + PI, 2.*PI) - PI;\n}\n\n// Control boundary condition here\nfloat get(vec2 vec)\n{\n    return //(vec.x <= 0. || vec.x >= iResolution.x || vec.y <= 0. || vec.y >= iResolution.y ) ?\n        //4. * atan(exp(mass * (vec.x - .5*iResolution.x) * dx)) :\n        texture(iPosition, vec / iResolution.xy).x;\n}\n\n// Takes laplacian of the positions\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor.yzw = texture(iLaplacian, uv).xyz;\n    float pos = texture(iPosition, uv).x;\n    fragColor.x =\n        ( .25 * fix(get(fragCoord+U+R) - pos) / dx\n        + .25 * fix(get(fragCoord+U-R) - pos) / dx\n        + .25 * fix(get(fragCoord-U+R) - pos) / dx\n        + .25 * fix(get(fragCoord-U-R) - pos) / dx\n        + .50 * fix(get(fragCoord+U  ) - pos) / dx\n        + .50 * fix(get(fragCoord-U  ) - pos) / dx\n        + .50 * fix(get(fragCoord  +R) - pos) / dx\n        + .50 * fix(get(fragCoord  -R) - pos) / dx ) / dx;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Calculates acceleration\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor.yzw = texture(iAcceleration, uv).xyz;\n    fragColor.x = acceleration(\n        texture(iPosition, uv).x,\n        texture(iLaplacian, uv).x\n    );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Velocity\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iVelocity, uv).xxyz;\n    vec2 ac = texture(iAcceleration, uv).xy;\n    fragColor.x += (ac.x + ac.y)*.5;\n    \n    if (iFrame == 0) {\n        fragColor.x = initvel((fragCoord - .5 * iResolution.xy) * dx);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}