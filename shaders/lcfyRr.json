{
    "Shader": {
        "info": {
            "date": "1720696965",
            "description": "a pentagramm shader",
            "flags": 0,
            "hasliked": 0,
            "id": "lcfyRr",
            "likes": 2,
            "name": "Gothic Pentagramm",
            "published": 3,
            "tags": [
                "dark",
                "gothic",
                "pentagramm"
            ],
            "usePreview": 0,
            "username": "natas",
            "viewed": 86
        },
        "renderpass": [
            {
                "code": "// Shadertoy-Shader-Code\n\n// Hilfsfunktion zum Zeichnen einer Linie\nfloat line(vec2 p, vec2 a, vec2 b, float width) {\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - width;\n}\n\n// Hilfsfunktion zum Zeichnen des Pentagramms\nfloat pentagram(vec2 p, float size) {\n    float PI = 3.14159265359;\n    float angle = PI / 5.0;\n    float d = 1.0;\n    for (int i = 0; i < 5; i++) {\n        vec2 a = size * vec2(cos(angle * (2.0 * float(i) - 1.0)), sin(angle * (2.0 * float(i) - 1.0)));\n        vec2 b = size * vec2(cos(angle * (2.0 * float((i + 2) % 5) - 1.0)), sin(angle * (2.0 * float((i + 2) % 5) - 1.0)));\n        d = min(d, line(p, a, b, 0.02));\n    }\n    return d;\n}\n\n// Funktion zur Erstellung bunter Partikel\nvec3 particle(vec2 uv, vec2 pos, vec3 color, float timeOffset) {\n    float dist = length(uv - pos);\n    float alpha = smoothstep(0.05, 0.03, dist);\n    float pulse = 0.5 + 0.5 * sin((iTime + timeOffset) * 10.0);\n    return color * pulse * alpha;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Bildschirmkoordinaten\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Zeitvariable für Animationen\n    float t = iTime;\n\n    // Position und Größe des Pentagramms animieren\n    vec2 pos = vec2(sin(t * 0.5), cos(t * 0.5)) * 0.5;\n    float size = 0.5 + 0.1 * sin(t * 2.0);  // Vergrößerte Größe des Pentagramms\n\n    // Pentagramm auf dem Bildschirm zeichnen\n    float d = pentagram(uv - pos, size);\n\n    // Farben und Effekte\n    vec3 color = vec3(0.0);\n    if (d < 0.03) {  // Erhöhte Schwelle, um das Pentagramm deutlicher zu machen\n        color = mix(color, vec3(1.0, 1.0, 1.0), 1.0 - d / 0.03);  // Weißes Pentagramm\n    }\n\n    // Zufällige bunte Effekte hinzufügen\n    float noise = fract(sin(dot(uv * 100.0, vec2(12.9898, 78.233))) * 43758.5453);\n    if (noise > 0.99) {\n        color += vec3(0.5 + 0.5 * sin(t * 10.0), 0.5 + 0.5 * cos(t * 10.0), 0.5 + 0.5 * sin(t * 5.0));\n    }\n\n    // Hintergrundfarbe\n    vec3 bgColor = vec3(2.00, 2.00, 1.25);\n\n    // Partikel-Effekte hinzufügen\n    for (int i = 0; i < 5; i++) {\n        vec2 partPos = vec2(mod(iTime + float(i) * 0.4, 2.0) - 1.0, sin(iTime + float(i) * 1.0));\n        vec3 partColor = vec3(sin(float(i) * 2.0 + t), cos(float(i) * 1.5 + t), sin(float(i) * 3.0 + t));\n        color += particle(uv, partPos, partColor, float(i) * 0.5);\n    }\n\n    // Finale Farbgebung\n    fragColor = vec4(mix(bgColor, color, smoothstep(0.02, 0.03, d)), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}