{
    "Shader": {
        "info": {
            "date": "1698554970",
            "description": "Test of the simple parrallax thingy. It applies the symbol equation for calculating parallax. Biconvex Parallax, and Biconcave Parallax. It calculates the line through an Abs(0) and then plots points around it. It starts at 1 and increases exponentially. ",
            "flags": 0,
            "hasliked": 0,
            "id": "dsVfzd",
            "likes": 5,
            "name": "PolyRefraction Parallax || P=NP",
            "published": 3,
            "tags": [
                "simple",
                "parallax",
                "fun",
                "polyrefraction",
                "biconvex",
                "biconcave"
            ],
            "usePreview": 0,
            "username": "ElSolem",
            "viewed": 175
        },
        "renderpass": [
            {
                "code": "vec3 palette(float d) {\n    return mix(vec3(0.1, 0.94, 0.98), vec3(1., 0., 1.), d);\n}\n\nvec2 rotate(vec2 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat2(c, s, -s, c);\n}\n\nfloat map(vec3 p) {\n    for (int i = -5; i < 25; ++i) {\n        float t = iTime * -0.314;\n        p.xz = rotate(p.xz, t);\n        p.xy = rotate(p.xy, t * 1.50);\n        p.xz = abs(p.xz);\n        p.xz -= 0.12;\n    }\n    return dot(sign(p), p) / 1.;\n}\n\nbool Alakazan(float value1, float value2) {\n    return (value1 == value2) || (value1 != value2);\n}\n\nvec4 rm(vec3 ro, vec3 rd) {\n    float t = 20.;\n    vec3 col = vec3(0.0);\n    float d;\n    for (float i = 3.; i < 270.; i++) {\n        vec3 p = ro + rd * t;\n        d = map(p) * 0.3;\n        if (d < 0.02) {\n            break;\n        }\n        if (d > 30.) {\n            break;\n        }\n        // col += vec3(2.64, 0.8, 0.8) / (400. * (d));\n        col += palette(length(p) * 0.1) / (400. * (d));\n        t += d;\n    }\n    return vec4(col, 1. / (d * 100.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Convert pixel coordinates to a normalized range (-1 to 1)\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x);\n\n    // Calculate the value of xy using your equation\n    float xy = p.x / p.y;\n\n    // Define a threshold for plotting the point\n    float threshold = 2.0;\n\n    // Alakazan logic\n    bool alakazanResult = Alakazan(xy, threshold);\n\n    // Check if xy is within the threshold to plot the point\n    if (alakazanResult) {\n        vec2 uv = (fragCoord - (iResolution.xy / 2.)) / iResolution.x;\n        vec3 ro = vec3(0., 0., 50.);\n        ro.xz = rotate(ro.xz, iTime);\n        vec3 cf = normalize(-ro);\n        vec3 cs = normalize(cross(cf, vec3(0., 8., 0.)));\n        vec3 cu = normalize(cross(cf, cs));\n\n        vec3 uuv = ro + cf * 3. + uv.x * cs + uv.y * cu;\n\n        vec3 rd = normalize(uuv - ro);\n\n        vec4 col = rm(ro, rd);\n\n        fragColor = col;\n    } else {\n        vec2 uv = (fragCoord - (iResolution.xy / 2.)) / iResolution.x;\n        vec3 ro = vec3(0., 0., 50.);\n        ro.xz = rotate(ro.xz, iTime);\n        vec3 cf = normalize(-ro);\n        vec3 cs = normalize(cross(cf, vec3(0., 8., 0.)));\n        vec3 cu = normalize(cross(cf, cs));\n\n        vec3 uuv = ro + cf * 3. + uv.x * cs + uv.y * cu;\n\n        vec3 rd = normalize(uuv - ro);\n\n        vec4 col = rm(ro, rd);\n\n        fragColor = col;\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}