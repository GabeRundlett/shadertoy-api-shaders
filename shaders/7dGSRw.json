{
    "Shader": {
        "info": {
            "date": "1634405998",
            "description": "Newton fractal but the zeros are bouncy balls",
            "flags": 0,
            "hasliked": 0,
            "id": "7dGSRw",
            "likes": 4,
            "name": "Newton fractal bouncy balls",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "praggmars",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "#define SHOW_BALLS 0\n#define PIXEL_ZERO 1\n#define BALL_COLOR vec4(1.0f, 0.5f, 0.0f, 1.0f)\n\n#define MAX_ITERATIONS   128\n#define COLOR_SCALE      64.0f\n#define NEWTON_STEP      vec2(1.0f, 0.0f)\n#define TOLERANCE        1e-5f\n#define ZOOM             1.0f\n#define CENTER           vec2(0.0f, 0.0f)\n#define SIZE_SCALING     0.0005f\n\nstruct Ball\n{\n    vec2 p;\n    vec2 v;\n    float r;\n};\n#define BALL_COUNT 5\n\nconst Ball balls[BALL_COUNT] = Ball[BALL_COUNT](\n    Ball(vec2(100.80927f, 71.011841), vec2(91.7454071f, 202.384338f), 23.8096046f),\n    Ball(vec2(782.947998f, 214.937714f), vec2(65.9425812f, -236.301651f), 29.2450104f),\n    Ball(vec2(303.452515f, 244.819077f), vec2(113.372017f, -16.9429722f), 36.4064445f),\n    Ball(vec2(142.07959f, 618.159912f), vec2(33.1328812f, -246.717346f), 49.0308456f),\n    Ball(vec2(1159.59851f, 604.708252f), vec2(93.8061142f, -80.5465546f), 48.7150116f)\n);\n\nvec2 GetBallPosition(in Ball ball)\n{\n    float scale = length(iResolution.xy) * SIZE_SCALING;\n    vec2 rect = iResolution.xy - (2.0f * ball.r * scale);\n    float t = iTime;\n    \n    return abs(mod(ball.p + ball.v * t * scale, 2.0f * rect) - rect) + ball.r * scale;\n}\n\nvec2 ComplexMul(vec2 z1, vec2 z2)\n{\n\treturn vec2(z1.x * z2.x - z1.y * z2.y, z1.x * z2.y + z1.y * z2.x);\n}\nvec2 ComplexDiv(vec2 z1, vec2 z2)\n{\n\treturn vec2(z1.x * z2.x + z1.y * z2.y, z1.y * z2.x - z1.x * z2.y) / (z2.x * z2.x + z2.y * z2.y);\n}\n\nfloat ToRatio(float iterations, float dist)\n{\n    return iterations / COLOR_SCALE;\n}\n\nvec4 ToColor(float ratio, int zero)\n{\n\tfloat R = abs(ratio * 6.0f - 3.0f) - 1.0f;\n\tfloat G = 2.0f - abs(ratio * 6.0f - 2.0f);\n\tfloat B = 2.0f - abs(ratio * 6.0f - 4.0f);\n    \n    /*const float PI = 3.141592654f;\n    float phase = 1.85f;\n    R = sin(phase + ratio * 2.0f * PI) * 0.5f + 0.5f;\n    B = sin(phase + ratio * 2.0f * PI + PI * 2.0f / 3.0f) * 0.5f + 0.5f;\n    G = sin(phase + ratio * 2.0f * PI + PI * 4.0f / 3.0f) * 0.5f + 0.5f;*/\n    \n\treturn vec4(clamp(vec3(R, G, B), 0.0f, 1.0f)*(1.0f - R * 0.49f), 1.0f);\n}\n\nvec2 Transform(vec2 screen)\n{\n\treturn (screen * 2.0f - iResolution.xy) / (iResolution.y * ZOOM) + CENTER;\n}\n\nvec4 FunctionColor(vec2 coord)\n{\n#if PIXEL_ZERO\n    vec2 zeros[BALL_COUNT + 1];\n    vec2 z = coord;\n    zeros[BALL_COUNT] = z;\n    int ballCount = BALL_COUNT + 1;\n#else\n    vec2 zeros[BALL_COUNT];\n    int ballCount = BALL_COUNT;\n#endif\n    for (int i = 0; i < BALL_COUNT; i++)\n    {\n        zeros[i] = Transform(GetBallPosition(balls[i]));\n#if PIXEL_ZERO\n        z += zeros[i];\n    }\n    z /= float(BALL_COUNT + 1);\n#else\n    }\n\tvec2 z = coord;\n#endif\n    \n\tfor (int i = 0; i < MAX_ITERATIONS; i++)\n\t{\n        vec2 funcValue = z - zeros[0];\n        for (int j = 1; j < ballCount; j++)\n            funcValue = ComplexMul(funcValue, z - zeros[j]);\n\n        vec2 derivValue = vec2(0.0f, 0.0f);\n        for (int j = 0; j < ballCount; j++)\n        {\n            vec2 tmp = vec2(1.0f, 0.0f);\n            for (int k = 0; k < ballCount; k++)\n                if (j != k)\n                    tmp = ComplexMul(tmp, z - zeros[k]);\n            derivValue += tmp;\n        }\n        \n\t\tz -= ComplexMul(NEWTON_STEP, ComplexDiv(funcValue, derivValue));\n\n        for (int j = 0; j < ballCount; j++)\n        {\n            float dist = length(z - zeros[j]);\n            if (dist < TOLERANCE)\n                return ToColor(ToRatio(float(i), dist), j);\n        }\n\t}\n\treturn vec4(0.0f, 0.0f, 0.0f, 1.0f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = FunctionColor(Transform(fragCoord));\n    \n#if SHOW_BALLS\n    float scale = length(iResolution.xy) * SIZE_SCALING;\n    for (int i = 0; i < BALL_COUNT; i++)\n    {\n        float d = length(GetBallPosition(balls[i]) - fragCoord);\n        if (d < balls[i].r * scale && d > balls[i].r * 0.7f * scale)\n        {\n            fragColor = BALL_COLOR;\n            break;\n        }\n    }\n#endif\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}