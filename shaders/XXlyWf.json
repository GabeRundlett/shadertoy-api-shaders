{
    "Shader": {
        "info": {
            "date": "1726737061",
            "description": "dots from fractal 62",
            "flags": 0,
            "hasliked": 0,
            "id": "XXlyWf",
            "likes": 2,
            "name": "dots and move",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 56
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,13,51))*.5+.5)\n\n// buffer A is Kaleidoscope \n#define MOUSECONTROLS_ZOOM                   1  \n#define MOUSECONTROLS_ROTATE                 1\n// buffer D is distortion buffer\n#define MOUSECONTROLS_DISTORTION_FREQUENCY   1\n#define MOUSECONTROLS_DISTORTION_SPEED       1\n// buffer B is edge detection\n#define MOUSE_X_CONTROLS_HOW_BLACK_EDGES_ARE    1\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\nvec2 mouseRotZoom(vec2 uv) {\n    // allow mouse zoom and rotate    \n    vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0,0.1) : iMouse.xy/iResolution.xy;\n#if MOUSECONTROLS_ROTATE\n    uv.xy *= r2d(-(mouse.x)*3.14*2.);\n#endif\n#if MOUSECONTROLS_ZOOM\n    uv *= (1./(10.0*mouse.y));\n#endif\n    return uv;\n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec3 n1,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(0,0.1,3.),H(g*.1),.8)*10./e/8e3\n    )\n    {\n        n1=g*d;\n       \n\n        n1.x+=10.;\n                n1.z+=iTime*10.;\n                 n1.y+=iTime*10.;\n        n1.xy+=mod(C,2.);\n     \n\n\n        a=10.;\n        n1=mod(n1-a,a*2.)-a;\n        s=3.;\n;\n        for(float i=0.;i++<8.;){\n            n1=.03-abs(n1);\n               n1.z+=i;\n\n            n1.z<n1.y?n1=n1.yzz:n1;\n               n1.x<n1.z?n1=n1.xyz:n1;\n            s*=e=1.5+cos(iTime*0.01)*0.01;\n            n1=abs(n1)*e-\n                vec3(\n                    5.*3.,\n                    120,\n                    11.*5.\n                 );\n         }\n         g+=e=length(n1.yxxz)/s;\n         g+=e=length(n1.zyxy)/s;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}