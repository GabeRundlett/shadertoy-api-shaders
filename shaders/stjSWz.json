{
    "Shader": {
        "info": {
            "date": "1627476268",
            "description": "interactive gyroidal gyroid sphere (play with me)        great shader originally made by Kamoshika\n\nmouse.x  sphere size,    mouse.y  change thickness",
            "flags": 0,
            "hasliked": 0,
            "id": "stjSWz",
            "likes": 34,
            "name": "Gyroidal Gyroid Sphere",
            "published": 3,
            "tags": [
                "raymarching",
                "sphere",
                "gyroid"
            ],
            "usePreview": 0,
            "username": "tholzer",
            "viewed": 819
        },
        "renderpass": [
            {
                "code": "// Fork of \"Gyroid Sphere\" by Kamoshika. https://shadertoy.com/view/sljXz1\n// 2021-07-28 12:18:10\n\n// https://twitter.com/kamoshika_vrc/status/1418594024475136002\n\n#define D(p) abs(dot(sin(p), cos(p.yzx)))\n\nvec2 mp = vec2(0);\n\nmat3 rotate3D(float angle, vec3 axis){\n    vec3 a = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float r = 1.0 - c;\n    return mat3(\n        a.x * a.x * r + c,\n        a.y * a.x * r + a.z * s,\n        a.z * a.x * r - a.y * s,\n        a.x * a.y * r - a.z * s,\n        a.y * a.y * r + c,\n        a.z * a.y * r + a.x * s,\n        a.x * a.z * r + a.y * s,\n        a.y * a.z * r - a.x * s,\n        a.z * a.z * r + c\n    );\n}\n\nvec3 hsv(float h, float s, float v) {\n    vec4 a = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(h) + a.xyz) * 6.0 - vec3(a.w));\n    return v * mix(vec3(a.x), clamp(p - vec3(a.x), 0.0, 1.0), s);\n}\n\nfloat map(vec3 p) {\n    float d = length(p) - 1.8 + mp.x;\n    p *= 10.;\n    d = max(d, (D(p) - .08) / 10.);\n    p *= 10.;\n    d = max(d, (D(p) - .4 - 1.1*mp.y) / 100.);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) /min(iResolution.x, iResolution.y);\n         mp = (iMouse.xy / iResolution.xy);\n    vec3 col = vec3(0);\n    \n    mat3 cRot = rotate3D(iTime*0.1, vec3(1, 1, 1));\n    vec3 cPos = vec3(0, 0, 2) * cRot;\n    vec3 cDir = normalize(-cPos);\n    vec3 cSide = normalize(cross(cDir, vec3(0, 1, 0) * cRot));\n    vec3 cUp = normalize(cross(cSide, cDir));\n    vec3 ray = normalize(uv.x*cSide + uv.y*cUp + cDir*2.);\n    \n    vec3 rPos = cPos;\n    float d = 0.;\n    float c = 0.;\n    for(int i=0; i<99; i++) {\n        d = map(rPos);\n        if(d < 1e-4) {\n            break;\n        }\n        rPos += ray * d * .6;\n        c++;\n    }\n    col += hsv(.3 - length(rPos), .7, 20./c);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}