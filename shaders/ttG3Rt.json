{
    "Shader": {
        "info": {
            "date": "1580557682",
            "description": "generate the sierpinski triangle",
            "flags": 0,
            "hasliked": 0,
            "id": "ttG3Rt",
            "likes": 2,
            "name": "sierpinski triangle generator",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "DolfinShark",
            "viewed": 443
        },
        "renderpass": [
            {
                "code": "const float pi = 3.1415926536;\nconst float tau = 6.2831853071;\nconst float sqrt3 = 1.7320508076;\n\n\nfloat distToTriangle(in vec2 p) {\n    p.x = abs(p.x) - 1.;\n    p.y = p.y + 1. / sqrt3;\n    \n    if(p.x + sqrt3* p.y > 0.)\n        p = vec2(p.x - sqrt3 * p.y, -sqrt3 * p.x - p.y) * .5;\n    \n    p.x -= clamp(p.x, -2., 0.);\n    \n    return -length(p) * sign(p.y);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    float angle = tau / 3.;\n    angle = tau / (3. + sin(iTime * 0.1));\n    \n    uv *= 3.;\n    for(int i = 0; i < 8; i++) {\n        uv *= 2.;\n        uv.x = abs(uv.x);\n        \n        vec2 n = vec2(cos(angle), sin(angle));\n        uv -= 2. * n * min(0., dot(uv, n));\n        \n        uv.y -= 2. * tan(pi / 6.);\n    }\n    \n    float d = distToTriangle(uv);\n    d = smoothstep(1. / iResolution.y, 0., d);\n\n    fragColor = vec4(d, d, d, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}