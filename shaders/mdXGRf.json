{
    "Shader": {
        "info": {
            "date": "1666539821",
            "description": "Endless directed path on a generalized hexagonal Truchet tiling",
            "flags": 0,
            "hasliked": 0,
            "id": "mdXGRf",
            "likes": 23,
            "name": "Generalized Truchet Path",
            "published": 3,
            "tags": [
                "hexagon",
                "truchet",
                "tile",
                "path"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "// \"Generalized Truchet Path\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n/*\n Mixture of two different tile patterns; tile outlines are included\n for reference. Tiles are randomly selected and rotated, except along the\n chosen path.\n*/\n\n#define AA  1   // optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p);\nfloat Minv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv2 (vec2 p);\n\nvec3 ltDir;\nvec2 cId, cMid;\nfloat dstFar, tCur, gSize, tLen, vel, cDir, cType;\nint idObj;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat Ddot (vec2 p)\n{\n  return dot (p, p);\n}\n\nvec3 TruchDist (vec2 p)\n{\n  vec2 pc, pc1, pc2, dp;\n  float d, d1, d2, rc, ac;\n  bool ct;\n  ct = (cType == 2. || cType == 4.);\n  if (ct) {\n    pc1 = - vec2 (0., cDir);\n    pc2 = vec2 (sqrt3/2. * sign (p.x), 0.5 * cDir);\n    d1 = Ddot (p - pc1);\n    d2 = Ddot (p - pc2);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = 0.5;\n    d = abs (sqrt (d) - rc);\n  } else {\n    if (cDir != 0.) p = 0.5 * vec2 (p.x - cDir * sqrt3 * p.y, cDir * sqrt3 * p.x + p.y);\n    pc1 = vec2 (sqrt3/2. * sign (p.x), 0.);\n    pc2 = vec2 (sqrt3 * sign (p.x), 0.);\n    d1 = sqrt (Ddot (p - pc1));\n    d2 = abs (sqrt (Ddot (p - pc2)) - 1.5);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = (d == d1) ? 0.: 1.5;\n  }\n  dp = p - pc;\n  ac = 0.5 - atan (dp.y, - dp.x) / (2. * pi);\n  if (ct && cId.x - cId.y < 0.) ac *= -1.;\n  return vec3 (d, rc, ac);\n}\n\nbool OnTrk (vec2 w)\n{\n  vec2 wp, wm;\n  float cxy;\n  bool cyo, offTrk;\n  cxy = cId.x - cId.y;\n  cyo = (mod (cId.y, 2.) == 1.);\n  wm = Rot2Cs (w, sin (- pi / 3. + vec2 (0.5 * pi, 0.))) - vec2 (0., 0.3);\n  wp = Rot2Cs (w, sin (pi / 3. + vec2 (0.5 * pi, 0.)));\n  offTrk = (cxy == -2. && wm.y > 0. || ! cyo && (abs (cxy) == 2. || cxy == -3. && w.y > -0.3 ||\n     cxy == -1. && wm.y > 0. || cxy == 1. && wm.y < 0.) ||\n     cyo && (cxy == -3. || cxy == 0. && wp.x > 0. || cxy == 1. && wm.x < 0. ||\n     cxy == 2. && wm.y < 0.));\n  return ! offTrk;\n}\n\nvoid SetPath ()\n{\n  vec4 cPath[13];\n  float tEnd[14], ts, tl;\n  ts = 1.;\n  tl = 1.5;\n  cPath[ 0] = vec4 (0., 0., -1./6., tl);\n  cPath[ 1] = vec4 (1., 0., 1./3., - ts);\n  cPath[ 2] = vec4 (0., 1., 5./6., tl);\n  cPath[ 3] = vec4 (-1., 1., -1./3., ts);\n  cPath[ 4] = vec4 (-1., 2., 1., ts);\n  cPath[ 5] = vec4 (0., 1., - 1./6., tl);\n  cPath[ 6] = vec4 (1., 1., 1./6., tl);\n  cPath[ 7] = vec4 (1., 2., 1., ts);\n  cPath[ 8] = vec4 (2., 1., -1./6., tl);\n  cPath[ 9] = vec4 (3., 1., 1./3., - ts);\n  cPath[10] = vec4 (2., 2., 5./6., tl);\n  cPath[11] = vec4 (1., 2., -1./3., ts);\n  cPath[12] = vec4 (1., 3., 1., ts);\n  tEnd[0] = 0.;\n  for (int k = 0; k <= 12; k ++) tEnd[k + 1] = tEnd[k] + abs (cPath[k].w);\n  tLen = tEnd[13];\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d, w;\n  dMin = dstFar;\n  w = gSize * TruchDist ((p.xz - cMid) / gSize).x;\n  d = length (max (abs (vec2 (w, p.y - 0.2)) - vec2 (1.5, 0.2), 0.));\n  d = min (d, length (max (abs (vec2 (abs (w - 1.5), p.y - 0.4)) - vec2 (0.1, 0.4), 0.))) - 0.05;\n  DMIN (1);\n  d = p.y;\n  DMIN (2);\n  return dMin;\n}\n\nvoid SetConf ()\n{\n  float h, cxy;\n  cMid = HexToPix (cId * gSize);\n  h = Hashfv2 (cId);\n  if (Hashfv2 (17.11 * cId) > 0.4) {\n    cDir = floor (3. * h) - 1.;\n    cType = 3.;\n  } else {\n    cDir = 2. * floor (2. * h) - 1.;\n    cType = 4.;\n  }\n  cxy = cId.x - cId.y;\n  if (cxy == 0.) cType = 1.;\n  else if (abs (cxy) == 1.) cType = mod (cId.x, 2.) + 1.;\n  else if (abs (cxy) == 2. || cxy == -3.) cType = 2.;\n  if (cType <= 2.) cDir = 2. * mod (cId.x, 2.) - 1.;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, cIdP;\n  float dHit, d, s, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.001;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = gSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / gSize;\n  pM = HexToPix (PixToHex (ro.xz / gSize));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = Minv3 (hv);\n  cIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    p = ro + dHit * rd;\n    cId = PixToHex (p.xz / gSize);\n    if (cId != cIdP) {\n      cIdP = cId;\n      SetConf ();\n    }\n    d = ObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn, cm3;\n  vec2 w;\n  float dstObj, dt, a, t, rc, ac;\n  bgCol = vec3 (0.1, 0.2, 0.7);\n  col = bgCol;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    w = (ro.xz - cMid) / gSize;\n    if (idObj == 1) {\n      if (ro.y > 0.7) col4 = vec4 (0.6, 0.3, 0.3, 0.2);\n      else {\n        col4 = vec4 (0.2, 0.9, 0.2, 0.2);\n        cm3 = TruchDist (w);\n        dt = gSize * cm3.x;\n        if (dt < 0.6) {\n          col4 = vec4 (1., 1., 0.7, 0.2);\n          rc = cm3.y;\n          ac = cm3.z;\n          a = 6. * rc * ac;\n          if (rc != 0.) {\n            if (cType <= 2. && OnTrk (w)) a -= vel * tCur;\n            col4 = mix (col4, vec4 (0.8, 0.8, 1., 0.2), smoothstep (-0.02, 0.02,\n               abs (fract (12. * a + 0.5) - 0.5) - 0.25));\n            if (cType <= 2. && OnTrk (w)) {\n              t = fract (3. * a + 0.25) - 0.5;\n              if (dt < 0.1 && abs (fract (3. * a + 0.5) - 0.5) > 0.25 ||\n                 dt < abs (t) - 0.2 && abs (t - 0.3) > 0.2) col4 = vec4 (1., 0., 0., 0.2);\n            }\n          }\n        }\n      }\n    } else if (idObj == 2) {\n      col4 = vec4 (0., 0.5, 0., 0.2) * (0.8 + 0.2 * smoothstep (0., 0.1,\n         gSize * HexEdgeDist (w) - 0.05));\n    }\n    col = col4.rgb * (0.2 + 0.2 * max (- dot (vn, ltDir), 0.) +\n       0.8 * max (dot (vn, ltDir), 0.)) +\n       col4.a * pow (max (dot (reflect (ltDir, vn), rd), 0.), 32.);\n    col = mix (col, bgCol, smoothstep (0.8, 1., dstObj / dstFar));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv, vd;\n  float el, az, zmFac, sr, cGap, t, tp;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  gSize = 8.;\n  SetPath ();\n  vel = 0.8;\n  ro = vec3 (0., 30., (-1.5 * sqrt3 + (6. / tLen) * vel * tCur) * gSize);\n  ro.xz = Rot2D (ro.xz, - pi / 3.);\n  ro.xz += 0.01;\n  ro.x -= 1.5 * gSize;\n  az = pi / 3.;\n  el = -0.17 * pi;\n  zmFac = 5.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.4 * pi, -0.07 * pi);\n  vuMat = StdVuMat (el, az);\n  dstFar = 40. * gSize;\n  ltDir = vuMat * normalize (vec3 (1., 1.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}