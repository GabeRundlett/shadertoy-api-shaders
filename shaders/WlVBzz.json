{
    "Shader": {
        "info": {
            "date": "1613777792",
            "description": "The Emperor - Merge - Bundle\nremixed from Patricio Gonzalez Vivo's PixelSpirit oracle deck - https://patriciogonzalezvivo.github.io/PixelSpiritDeck/",
            "flags": 0,
            "hasliked": 0,
            "id": "WlVBzz",
            "likes": 17,
            "name": "PixelSpirit First Draw",
            "published": 3,
            "tags": [
                "pixel",
                "spirit",
                "pixelspirit"
            ],
            "usePreview": 0,
            "username": "netgrind",
            "viewed": 512
        },
        "renderpass": [
            {
                "code": "// The Emperor - Merge - Bundle\n// Remixed from Patricio Gonzalez Vivo's PixelSpirit oracle deck - https://patriciogonzalezvivo.github.io/PixelSpiritDeck/\n\n// I read this draw as a sign to solidify and consolidate code into proper bundles, increasing stability and security of mind, so this magician knows their tools are organized and at the ready for what battles lay ahead\n\nfloat smoothing = .01;\n\n// 04\nfloat stroke(float x, float s, float w){\n    float d = smoothstep(s, s+smoothing, x+w*.5) - smoothstep(s, s+smoothing, x-w*.5);\n    return clamp(d, 0., 1.);\n}\n\n// 08\nfloat circleSDF(vec2 st) {\n    return length(st-.5)*2.;\n}\n\n// 09\nfloat fill(float x, float s){\n    return 1.-smoothstep(s, s+smoothing, x);\n}\n\n// 10\nfloat rectSDF( vec2 st, vec2 s){\n    st = st*2.-1.;\n    return max(abs(st.x/s.x), abs(st.y/s.y));\n}\n\n// 12\nfloat flip(float v, float pct){\n    return mix(v, 1.-v, pct);\n}\n\n// 27\nfloat hexSDF(vec2 st){\n    st = abs(st*2.-1.);\n    return max(abs(st.y), st.x * 0.866025 + st.y*0.5);\n}\n\nfloat draw0(vec2 uv, float a, float d, float time){\n    float col = 0.;\n    float sTime = time*6.28;\n    \n    // The Emperor\n    vec2 st = vec2(sin(a), cos(a))*(d*(1.1+sin(sTime+a)*.1))+.5;\n    float sdf = rectSDF(st, vec2(1.));\n    col += stroke(sdf, .6, .125);\n    col += fill(sdf, min(mod(time, 2.),1.)*.5375);    \n    col += fill(sdf, min(mod(time, 2.)-1.,1.)*.5375);    \n    col += fill(sdf, .1);\n\n    // Merge\n    st = uv;\n    vec2 offset = vec2(sin(sTime), cos(sTime))*(pow(cos(sTime)*.5+.5, 1.5)*.2);\n    float left = circleSDF(st+offset);\n    float right = circleSDF(st-offset);\n    col += flip(stroke(left, .5, .05), fill(right, .52));\n    \n    // Bundle\n    st = uv.yx;\n    col += stroke(hexSDF(st), .5+cos(sTime)*.2, .1);\n    //st = vec2(sin(a-sTime), cos(a-sTime))*d+.5;\n    float amp = sin(sTime);\n    amp = pow(abs(amp), .6)*sign(amp);\n    amp*=1.5;\n    col += fill(hexSDF(st-vec2(-.06, -.1)*amp), .15);\n    col += fill(hexSDF(st-vec2(-.06, .1)*amp), .15);\n    col += fill(hexSDF(st-vec2(.11, 0.)*amp), .15);\n    \n    col = abs(mod(col+1., 2.)-1.);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*.5)/min(iResolution.x, iResolution.y);\n    uv*=1.25;\n    uv+=.5;\n    float a = atan(uv.y-.5, uv.x -.5);\n    float d = length(uv-.5);\n    float time = iTime*.25;\n    float sTime = time*6.28;\n    vec4 col = vec4(0., 0., 0., 1.);\n    \n    for(float i = -10.; i< 10.; i++){\n        float t = i*(sin(uv.x*10.+sTime+uv.y*2.+cos(uv.y*5.+sTime)*2.+sin(uv.x*3.-sTime))*.5+.5)*.01;\n        col += vec4(draw0(uv, a, d, time-.01+t),\n                    draw0(uv, a, d, time+t),\n                    draw0(uv, a, d, time+.01+t),\n                    1.);\n    }\n    col/=20.;\n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}