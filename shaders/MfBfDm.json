{
    "Shader": {
        "info": {
            "date": "1725018818",
            "description": "last but not least - my final one for today upd",
            "flags": 0,
            "hasliked": 0,
            "id": "MfBfDm",
            "likes": 3,
            "name": "NeonTenti",
            "published": 3,
            "tags": [
                "neondancingmusicsoundbeat"
            ],
            "usePreview": 0,
            "username": "nilberlin",
            "viewed": 84
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n    float time = iTime * 0.5;\n\n    // Audio-Analyse (optional, kann auskommentiert werden, wenn kein Audio-Input verfügbar ist)\n    // float bassFreq = texture(iChannel0, vec2(0.1, 0.1)).r;\n    // float midFreq = texture(iChannel0, vec2(0.5, 0.1)).r;\n    // float highFreq = texture(iChannel0, vec2(0.9, 0.1)).r;\n    float totalVolume = 0.5; // Konstanter Wert, wenn kein Audio verwendet wird\n\n    // Oktopus-Körper\n    vec2 bodyPos = vec2(0.0, 0.1);\n    float bodyShape = length(uv - bodyPos) - 0.2;\n    \n    vec3 col = vec3(0.0);\n    \n    // Tentakel\n    const int NUM_TENTACLES = 8;\n    for(int i = 0; i < NUM_TENTACLES; i++)\n    {\n        float angle = float(i) * 6.28 / float(NUM_TENTACLES);\n        vec2 basePos = bodyPos + vec2(cos(angle), sin(angle)) * 0.2;\n        \n        float tentacleLength = 0.6 + sin(time * 2.0 + float(i)) * 0.1;\n        \n        for(float t = 0.0; t < 1.0; t += 0.01)\n        {\n            float wave = sin(t * 10.0 + time * 5.0 + float(i)) * 0.05;\n            wave += sin(t * 5.0 - time * 3.0) * 0.03;\n            wave += sin(t * 15.0 + totalVolume * 10.0) * 0.02;\n            \n            vec2 tentaclePos = basePos + vec2(cos(angle), sin(angle)) * (t * tentacleLength);\n            tentaclePos += vec2(-sin(angle), cos(angle)) * wave;\n            \n            float tentacleShape = length(uv - tentaclePos) - 0.02 * (1.0 - t);\n            \n            vec3 tentacleColor = 0.5 + 0.5 * cos(time + t * 5.0 + vec3(0,2,4));\n            tentacleColor = mix(tentacleColor, vec3(1.0, 0.3, 0.7), t);\n            \n            col += tentacleColor * smoothstep(0.01, 0.0, tentacleShape) * 0.2;\n        }\n    }\n    \n    // Oktopus-Körper Farbgebung\n    vec3 bodyColor = vec3(0.2, 0.5, 0.8) + 0.2 * sin(time + uv.xyx + vec3(0,2,4));\n    col += bodyColor * smoothstep(0.01, 0.0, bodyShape) * 0.5;\n    \n    // Glüheffekte und Blasen\n    col += vec3(0.8, 0.2, 0.5) * 0.01 / (1.0 + 30.0 * length(uv - vec2(sin(time)*0.5, cos(time*0.7)*0.3)));\n    col += vec3(0.2, 0.8, 0.5) * 0.01 / (1.0 + 30.0 * length(uv - vec2(cos(time*1.3)*0.4, sin(time*0.8)*0.4)));\n    \n    // Blasen\n    for(int i = 0; i < 10; i++) {\n        vec2 bubblePos = vec2(\n            sin(float(i) * 1.7 + time * (0.5 + float(i) * 0.1)),\n            mod(cos(float(i) * 2.3) - time * (0.2 + float(i) * 0.05), 2.0) - 1.0\n        );\n        float bubbleSize = 0.02 + 0.01 * sin(float(i) + time);\n        float bubble = length(uv - bubblePos) - bubbleSize;\n        col += vec3(0.7, 0.8, 1.0) * 0.001 / (1.0 + 50.0 * abs(bubble));\n    }\n    \n    // Hintergrundeffekt\n    col += vec3(0.1, 0.05, 0.2) * (1.0 - length(uv));\n    \n    // Finale Farbausgabe mit Verstärkung durch Audio\n    col *= 1.0 + totalVolume * 0.5;\n    \n    // Gamma-Korrektur und Farbsättigung\n    col = pow(col, vec3(0.4545));\n    col = mix(col, vec3(dot(col, vec3(0.299, 0.587, 0.114))), -0.4);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}