{
    "Shader": {
        "info": {
            "date": "1509144777",
            "description": "Rotational symmetry with regular mod() domain repetition. Since the repeated objects extend past half the repeating space, one extra neighbor needs to be checked for distance too. This can be done without loops.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtSczV",
            "likes": 50,
            "name": "Rotational/Angular Repetition",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "domainrepetition",
                "repetition",
                "symmetry",
                "angular",
                "rotational"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2458
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Rotational Symmetry a.k.a Angular Repetition without loops.\n//\n// When the repeated object extend past half the repeating space,\n// one extra neighbor need to be checked for distance too.\n\n\n//#define SIMULATE_BUG\n\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdf( in vec2 p )\n{\n    p = mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime))*(p-vec2(2.0,0.0));\n    return sdBox(p,vec2(0.7,0.25));\n}\n\nfloat map_correct( in vec2 p )\n{\n    // domain repetition\n    const int   n = 8;\n    const float b = 6.283185/float(n);\n    float a = atan(p.y,p.x);\n    float i = floor(a/b);\n\n    float c1 = b*(i+0.0); vec2 p1 = mat2(cos(c1),-sin(c1),sin(c1), cos(c1))*p;\n    float c2 = b*(i+1.0); vec2 p2 = mat2(cos(c2),-sin(c2),sin(c2), cos(c2))*p;\n\n    // evaluate two SDF instances\n    return min( sdf(p1), sdf(p2) );\n}\n\nfloat map_wrong( vec2 p )\n{\n    // naive domain repetition\n    const int   n = 8;\n    const float b = 6.283185/float(n);\n    float a = atan(p.y,p.x);\n    float i = round(a/b);\n\n    float c = b*i; p = mat2(cos(c),-sin(c),sin(c),cos(c))*p;\n    \n    // evaluate a single SDF\n    return sdf(p); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    p *= 3.0;\n    m *= 3.0;\n\n    #ifdef SIMULATE_BUG\n    float d = map_wrong( p );\n    #else\n    float d = map_correct( p );\n    #endif\n    \n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-10.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(50.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n        #ifdef SIMULATE_BUG\n        d = map_wrong( m );\n        #else\n        d = map_correct( m );\n        #endif\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.01, abs(length(p-m)-abs(d))-0.005));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.01, length(p-m)-0.03));\n    }\n\tfragColor = vec4( col, 1.0 );;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}