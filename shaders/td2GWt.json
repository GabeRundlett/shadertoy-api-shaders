{
    "Shader": {
        "info": {
            "date": "1594584868",
            "description": "Rock texture shader used for world procedural generation\nhttps://github.com/BynaryCobweb/world/",
            "flags": 0,
            "hasliked": 0,
            "id": "td2GWt",
            "likes": 5,
            "name": "Rock texture",
            "published": 3,
            "tags": [
                "texture",
                "rock"
            ],
            "usePreview": 0,
            "username": "BynaryCobweb",
            "viewed": 493
        },
        "renderpass": [
            {
                "code": "// between 0 and 1\nfloat rand(vec2 v) {\n    return fract(sin(dot(v + vec2(-8.5123, 23.2156), vec2(12.9898, 59.233))) * 4758.5453123);\n}\n\nvec2 rand2(vec2 v) {\n    return vec2(\n        rand(v * vec2(4562.223, 1232.465) + vec2(1122.0, 8325.0)), \n        rand(v * vec2(2312.843, 8621.456) + vec2(5133.2, 2462.7)));\n}\n\nfloat rand3(vec3 v) {\n    return fract(sin(dot(v + vec3(-8.5123, 23.2156, 0.0), vec3(12.9898, 6.233, 0.84261))) * 47583.5453123);\n}\n\n\nfloat noise(in vec2 uv) {\n    vec2 f = fract(uv);\n    vec2 i = floor(uv);\n    \n    float a = rand(i);\n    float b = rand(i + vec2(0.0, 1.0));\n    float c = rand(i + vec2(1.0, 0.0));\n    float d = rand(i + vec2(1.0, 1.0));\n    \n    vec2 u = -2. * f * f * f + 3. * f * f;\n    return mix(mix(a, b, u.y), mix(c, d, u.y), u.x);\n}\n\n\nfloat noise3lin(in vec3 uvx) {\n    vec3 f = fract(uvx);\n    vec3 i = floor(uvx);\n    \n    float a1 = rand3(i);\n    float b1 = rand3(i + vec3(0.0, 1.0, 0.0));\n    float c1 = rand3(i + vec3(1.0, 0.0, 0.0));\n    float d1 = rand3(i + vec3(1.0, 1.0, 0.0));\n    float a2 = rand3(i + vec3(0.0, 0.0, 1.0));\n    float b2 = rand3(i + vec3(0.0, 1.0, 1.0));\n    float c2 = rand3(i + vec3(1.0, 0.0, 1.0));\n    float d2 = rand3(i + vec3(1.0, 1.0, 1.0));\n    \n    vec3 u = -2. * f * f * f + 3. * f * f;\n    \n    float a = mix(a1, a2, f.z);\n    float b = mix(b1, b2, f.z);\n    float c = mix(c1, c2, f.z);\n    float d = mix(d1, d2, f.z);\n    \n    return mix(mix(a, b, u.y), mix(c, d, u.y), u.x);\n}\n\nfloat fbm(in vec2 uv) {\n    float sum = 0.0;\n    float amp = 0.0;\n    float persistence = 0.7;\n    vec2 st = uv;\n    \n    for (int i = 0; i < 3; ++i) {\n        amp = amp / persistence + noise(st);\n        sum = sum / persistence + 1.;\n        st *= 2.;\n    }\n    return amp / sum;\n}\nfloat fbm2(in vec2 uv) {\n    float sum = 0.0;\n    float amp = 0.0;\n    float persistence = 0.8;\n    vec2 st = uv;\n    \n    for (int i = 0; i < 6; ++i) {\n        amp = amp / persistence + noise(st);\n        sum = sum / persistence + 1.;\n        st *= 2.;\n    }\n    return amp / sum;\n}\n\nfloat fbm3(in vec3 uvx) {\n    float sum = 0.0;\n    float amp = 0.0;\n    float persistence = 0.7;\n    vec3 stz = uvx;\n    \n    for (int i = 0; i < 8; ++i) {\n        amp = amp / persistence + noise3lin(stz);\n        sum = sum / persistence + 1.;\n        stz *= 2.;\n    }\n    return amp / sum;\n}\n\nfloat afbm(in vec2 uv) {\n    float sum = 0.0;\n    float amp = 0.0;\n    float persistence = 1.;\n    vec2 st = uv;\n    \n    for (int i = 0; i < 5; ++i) {\n        amp = amp / persistence + abs(-1. + 2. * noise(st));\n        sum = sum / persistence + 1.;\n        st *= 2.;\n    }\n    return amp / sum;\n}\n\nconst int N = 8;\n\nfloat voronoi(in vec2 uv) {\n    // split in squares\n    const float space = 0.4;\n    vec2 rf = vec2(1.0, 0.5);\n    vec2 rs = vec2(0.5, 1.6);\n      \n    // take n sample in each square\n    vec2 uvi = vec2(floor(uv / space - 0.5));\n    vec2 p1 = uvi * space;\n    vec2 p2 = (uvi + vec2(0, 1)) * space;\n    vec2 p3 = (uvi + vec2(1, 0)) * space;\n    vec2 p4 = (uvi + vec2(1, 1)) * space;\n    float m = 10000.0;\n    \n    for (int i = 0; i < N; i++) {\n        p1 = (uvi + rand2(p1 * rf + rs)) * space;\n        m = min(m, distance(p1, uv));\n        p2 = (uvi + vec2(0, 1) + rand2(p2 * rf + rs)) * space;\n        m = min(m, distance(p2, uv));\n        p3 = (uvi + vec2(1, 0) + rand2(p3 * rf + rs)) * space;\n        m = min(m, distance(p3, uv));\n        p4 = (uvi + vec2(1, 1) + rand2(p4 * rf + rs)) * space;\n        m = min(m, distance(p4, uv));\n    }\n    \n    return 1. - pow(m, 0.5) / space * sqrt(float(N)) * 0.2;\n}\n\nvoid noiseCracks(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    float value = fbm2(uv + vec2(0.5, 0.5));\n    vec3 col = vec3(value);\n    float cracks = abs( -1. + 2. * fbm(uv * 6.));\n    cracks = clamp(pow(cracks, 2.3) * 10., 0., 1.);\n    cracks = 0.5 + sin(value * 20. * 3.14) * 0.5;\n    /*if (cracks <= 0.5) {\n        cracks = mix(1., 0.5, clamp((cracks - 0.45) * 20., 0., 1.));\n    }\n    else {\n        cracks = smoothstep(0.25, 1., clamp((cracks - 0.5) * 20., 0., 1.));\n    }*/\n    col = mix(col, vec3(0.4), cracks);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 a = vec2(voronoi(uv + vec2(4.2, 2.6)), voronoi(uv + vec2(8.2, 5.6)));\n    vec2 b = vec2(fbm2(uv), fbm2(uv + vec2(5.)));\n\t\n    // vec3 col = vec3(a, 1.0);\n    // vec3 col = vec3(voronoi(a * cos(iTime)));\n    // vec3 col = vec3(fbm2(a * cos(iTime)));\n    // vec3 col = vec3(voronoi(uv + fbm2(b) * cos(iTime)));\n    float t = sin(iTime - 0.4) * 0.2 + 0.4;\n    vec3 col = vec3(voronoi(uv + (b - 0.5) * t));\n    // vec3 col = vec3(voronoi(uv + a * cos(iTime)));\n    // vec3 col = vec3(voronoi(uv));\n    col *= fbm2(uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}