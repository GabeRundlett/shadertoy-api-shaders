{
    "Shader": {
        "info": {
            "date": "1686881680",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "mdsyDM",
            "likes": 19,
            "name": "Random Quadtree Pattern",
            "published": 3,
            "tags": [
                "random",
                "tiles",
                "quadtree"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float p) {\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat Hash21(in vec2 p) {\n    vec3 p3 = fract(p.xyx * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Hash31(in vec3 p3) {\n    p3 = fract(p3 * 0.1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 quadtree(in vec2 uv, in float seed, in float blockiness, in int maxDepth, out vec2 cellPos, out float cellSize) {\n    cellPos = vec2(0.0);\n    cellSize = 1.0;\n    for (int i = 0; i < maxDepth; i++) {\n        uv *= 2.0;\n        cellSize *= 0.5;\n        vec2 cellId = floor(uv);\n        cellPos += cellId * cellSize;\n        uv -= cellId;\n        if (Hash31(vec3(cellPos * 1000.0, seed)) < blockiness) break;\n    }\n\n    return uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y + 0.1 * iTime;\n    float unit = 1.25 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec2 cellPos;\n    float cellSize;\n    vec2 quv = quadtree(uv, 0.0005 * iTime, 0.5, 10, cellPos, cellSize);\n\n    //color += Hash21((cellPos + 0.5 * cellSize) * 1000.0);\n\n    /**/\n    float rot = Hash21(cellPos + 0.5 * cellSize) + iTime * (2.0 * Hash21(cellPos + cellSize) - 1.0);\n    float co = cos(rot), si = sin(rot);\n    quv = (quv - 0.5) * mat2(co, si, -si, co);\n    color += smoothstep(unit / cellSize, 0.0, abs(max(abs(quv.x), abs(quv.y)) - 0.25) - 0.01);\n    /**/\n\n    /**\n    unit /= cellSize;\n    vec2 center = cellPos + 0.5 * cellSize;\n    quv -= 0.5;\n    color += smoothstep(unit, 0.0, 0.45 - max(abs(quv.x), abs(quv.y)));\n    float rand = Hash21(center * 1000.0);\n    if (rand < 0.5) quv = quv.yx;\n    if (fract(rand * 2.0) < 0.5) quv.y = -quv.y;\n    float time = iTime * 0.25 + Hash31(vec3(center * 1000.0, 10.0));\n    float pos = mix(Hash31(vec3(center, floor(time))), Hash31(vec3(center, ceil(time))), smoothstep(0.0, 1.0, fract(time))) - 0.5;\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, abs(quv.y - pos) - 0.04));\n    /**/\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}