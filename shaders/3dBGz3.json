{
    "Shader": {
        "info": {
            "date": "1549447709",
            "description": "Experimenting with a dither based on per pixel partial derivative. The goal is to alter the information (in this example, the color) along the local gradient rather than in an arbitrary direction.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3dBGz3",
            "likes": 6,
            "name": "Partial derivative based dither",
            "published": 3,
            "tags": [
                "noise",
                "dithering",
                "partialderivative"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 356
        },
        "renderpass": [
            {
                "code": "/*\n\nThis shader tests using the partial derivatives to add\nnoise to gradients in order to reduce banding.\n\nThe goal is to alter the information (in this example,\nthe color) along the local gradient rather than in an\narbitrary direction.\n\n\n2019-02-06:\nThis is a first draft, and the result is not good yet.\nI'll try to iterate on it and see if I can get\nsomething satisfaying.\n\n--\nZavie\n\n*/\n\n\nfloat gamma = 2.2;\n\n// ---8<----------------------------------------------------------------------\n\nvec3 PartialDerivativeDither(vec3 x, vec2 vScreenPos, float colorDepth)\n{\n\tfloat rand = fract(sin(dot(vScreenPos, vec2(12.9898,78.233))) * 43758.5453);\n    \n    vec3 dx = fwidth(x);\n    // This 255 is coming from nowhere:\n    // I simply haven't worked out the math yet.\n    return dx * rand * 255./ colorDepth;\n}\n\n// ---8<----------------------------------------------------------------------\n\n// The functions that follow are only used to generate\n// the color gradients for demonstrating dithering effect.\n\nfloat h00(float x) { return 2.*x*x*x - 3.*x*x + 1.; }\nfloat h10(float x) { return x*x*x - 2.*x*x + x; }\nfloat h01(float x) { return 3.*x*x - 2.*x*x*x; }\nfloat h11(float x) { return x*x*x - x*x; }\nfloat Hermite(float p0, float p1, float m0, float m1, float x)\n{\n\treturn p0*h00(x) + m0*h10(x) + p1*h01(x) + m1*h11(x);\n}\n\n// Source:\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 generateColor(vec2 uv)\n{\n\tfloat a = sin(iTime * 0.5)*0.5 + 0.5;\n\tfloat b = sin(iTime * 0.75)*0.5 + 0.5;\n\tfloat c = sin(iTime * 1.0)*0.5 + 0.5;\n\tfloat d = sin(iTime * 1.25)*0.5 + 0.5;\n\t\n\tfloat y0 = mix(a, b, uv.x);\n\tfloat y1 = mix(c, d, uv.x);\n\tfloat x0 = mix(a, c, uv.y);\n\tfloat x1 = mix(b, d, uv.y);\n    \n    float h = fract(mix(0., 0.1, Hermite(0., 1., 4.*x0, 4.*x1, uv.x)) + iTime * 0.05);\n    float s = Hermite(0., 1., 5.*y0, 5.*y1, 1. - uv.y);\n    float v = Hermite(0., 1., 5.*y0, 5.*y1, uv.y);\n\n\treturn hsv2rgb(vec3(h, s, v));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat colorDepth = mix(2.0, 255.0, pow(clamp(mix(-0.2, 1.2, abs(2.0 * fract(iTime / 11.0) - 1.0)), 0., 1.), 2.0));\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 color = pow(generateColor(uv), vec3(1. / gamma));\n    vec3 ditheredColor = color + PartialDerivativeDither(color, fragCoord.xy, colorDepth);\n\n    float separator = 1. - smoothstep(0.497, 0.499, uv.x) * smoothstep(0.503, 0.501, uv.x);\n    vec3 finalColor = mix(color, ditheredColor, smoothstep(0.499, 0.501, uv.x)) * separator;\n    \n\tfragColor = vec4(floor(finalColor * colorDepth) / colorDepth, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}