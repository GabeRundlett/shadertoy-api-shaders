{
    "Shader": {
        "info": {
            "date": "1587608445",
            "description": "Implement the penumbra shadows approximation of soft shadows, refer to the code from https://www.shadertoy.com/view/wsjGDG.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dsBRr",
            "likes": 1,
            "name": "Penumbra Shadows by giaosame",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "giaosame",
            "viewed": 321
        },
        "renderpass": [
            {
                "code": "const vec4 FLOOR_VEC       = vec4(0.0, 1.0, 0.0, 3.0);\nconst vec3 LONG_BOX_POS    = vec3(2.1, -0.5, -2);\nconst vec3 LONG_BOX_SCALE  = vec3(1.5, 3.0, 1.5);\nconst vec3 SPHERE_POS      = vec3(2.2, -1.0, 1.7);\nconst vec3 TORUS_POS       = vec3(0.5, 2.0, 1);\nconst vec2 TORUS_RADIUS    = vec2(1.0, 0.45);\n\nconst vec3 EYE_POS         = vec3(0.0, 2.5, -14.5);\nconst vec3 REF_POS         = vec3(0.0, 2.5, 0.0);\n\nconst int RAY_STEPS     = 256;\nconst int FLOOR_ID      = 0;\nconst int LONG_BOX_ID   = 1;\nconst int SPHERE_ID     = 2;\nconst int TORUS_ID      = 3;\nconst float PI_OVER_180 = 3.1415926 / 180.0;\n\n// The higher the value, the smaller the penumbra\nconst float SHADOW_HARDNESS = 7.0;\n\n// 0 for penumbra shadows, 1 for hard shadows\n#define HARD_SHADOW 0\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\nfloat plane(vec3 p, vec4 n)\n{\n  // n must be normalized\n  return dot(p, n.xyz) + n.w;\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nvec3 rotateY(vec3 p, float a) \n{\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvec3 rotateX(vec3 p, float amt) \n{\n    return vec3(p.x, cos(amt) * p.y - sin(amt) * p.z, sin(p.y) + cos(p.z));\n}\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int objId)\n{\n    // floor\n    t = plane(pos, FLOOR_VEC);  \n    objId = FLOOR_ID;  \n\n    float t2;\n    if((t2 = box(rotateY(pos + LONG_BOX_POS, 27.5 * PI_OVER_180), LONG_BOX_SCALE)) < t)  // long bix\n    {\n        t= t2;\n        objId = LONG_BOX_ID;\n    }\n    if((t2 = sphere(pos, 2.0, SPHERE_POS)) < t)\n    {\n        t= t2;\n        objId = SPHERE_ID;\n    }\n    if((t2 = torus(pos + TORUS_POS, TORUS_RADIUS)) < t)\n    {\n        t= t2;\n        objId = TORUS_ID;\n    }\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = plane(pos, FLOOR_VEC);\n    t = min(t, box(rotateY(pos + LONG_BOX_POS, 27.5 * PI_OVER_180), LONG_BOX_SCALE));\n    t = min(t, sphere(pos, 2.0, SPHERE_POS));\n    t = min(t, torus(pos + TORUS_POS, TORUS_RADIUS));\n    return t;\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int objId)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, objId);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n\n    t = -1.0;\n    objId = -1;\n}\n\nvec3 computeMaterial(int objId, vec3 p, vec3 n)\n{\n    switch(objId) \n    {\n    case FLOOR_ID:  // floor\n    {\n        return vec3(1.0, 1.0, 1.0);\n        break;\n    }\n    case LONG_BOX_ID:  // Cuboid, the long box\n    {\n        return vec3(1.0, 0.4, 0.0);\n        break;\n    }\n    case SPHERE_ID:  // Sphere\n    {\n        return vec3(0.0, 1.0, 1.0);\n        break;\n    }   \n    case TORUS_ID:  // Torus\n    {\n        return vec3(0.9, 0.2, 0.9);\n        break;\n    }\n    default:\n        return vec3(0.0);\n        break;\n    }\n\n    return vec3(1.0);\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize(vec3(sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                          sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                          sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nfloat hardShadow(vec3 dir, vec3 origin, float min_t)\n{\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        float m = sceneMap3D(origin + t * dir);\n        if(m < 0.0001) \n        {\n            return 0.0;\n        }\n        t += m;\n    }\n    \n    return 1.0;\n}\n\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) \n{\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) \n    {\n        float m = sceneMap3D(origin + t * dir);\n        if(m < 0.0001) \n        {\n            return 0.0;\n        }\n        \n        res = min(res, k * m / t);\n        t += m;\n    }\n    \n    return res;\n}\n\nfloat shadow(vec3 dir, vec3 origin, float min_t) \n{\n    #if HARD_SHADOW\n    return hardShadow(dir, origin, min_t);\n    #else\n    return softShadow(dir, origin, min_t, SHADOW_HARDNESS);\n    #endif\n}\n\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    \n    vec3 material = computeMaterial(hitObj, isect, nor);\n    \n    vec3 warmDir = rotateY(normalize(vec3(1.0, 1.0, 1.0)), sin(iTime * 0.5));\n    vec3 coolDir = rotateY(normalize(vec3(-1.0, 0.0, -1.0)), sin(iTime * 0.5));\n\n    float warmDot = max(0.0, dot(nor, warmDir));\n    float coolDot = max(0.0, dot(nor, coolDir));\n\n    vec3 overallColor = warmDot * vec3(1.0, 0.88, 0.7) * shadow(warmDir, isect, 0.1);\n    overallColor += coolDot * vec3(0.05, 0.2, 0.5);\n    overallColor *= material;\n    overallColor = clamp(overallColor + vec3(0.05, 0.1, 0.15), 0.0, 1.0);\n    \n    vec3 sdfColor = overallColor;\n    \n    return Intersection(t, sdfColor, isect, hitObj);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref)\n{\n    eye = EYE_POS;\n    ref = REF_POS;\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * float(iResolution.x) / float(iResolution.y);\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n\n    vec3 dir, eye, ref;\n    raycast(uv2, dir, eye, ref);\n    Intersection intersection = sdf3D(dir, eye);\n\n    // Output to screen    \n    fragColor = vec4(intersection.color * step(0.0, intersection.t), 1.0);\n    float fogT = smoothstep(30.0, 50.0, distance(intersection.p, eye));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), fogT);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}