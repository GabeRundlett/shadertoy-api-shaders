{
    "Shader": {
        "info": {
            "date": "1542177918",
            "description": "Reexploring my old shader : https://www.shadertoy.com/view/lsfyzl\nI now understand more what I'm doing :)\nExercise in commenting code",
            "flags": 0,
            "hasliked": 0,
            "id": "XldfW2",
            "likes": 10,
            "name": "cubic_lattice",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "balkhan",
            "viewed": 608
        },
        "renderpass": [
            {
                "code": "/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nfloat \tt; // time\nfloat\ta; // angle used both for camera path and distance estimator\nfloat\tid_t; // id used for coloring\nvec3 id, h;\nfloat hit;\n\n#define I_MAX\t\t200\n#define E\t\t\t0.000001\n#define FAR\t\t\t30.\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec2\trot(vec2 p, vec2 ang);\nvoid\trotate(inout vec2 v, float angle);\nvec3\tcalcNormal( in vec3 pos, float e, vec3 dir);\nfloat\tmylength(vec3 p, vec3 id);\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    h*= .0;\n    t  = iTime*.125;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0, .0, .0);\n    \n    vec2\tinter = (march(pos, dir));\n\n    col.xyz = step(id_t, 0.)*inter.x*.01*vec3(.2, .2, .37);\n    //col.xyz += (id_t == 1.?1.:.0)*vec3(abs(sin(id.x*1.-inter.y*2.01+1.04)), abs(sin(id.y*1.-inter.y*2.01+2.09)), abs(sin(id.z*1.-inter.y*2.01+3.14)));\n    //col.xyz += (id_t == 2.?1.:.0)*(vec3(.95-inter.y*.0521))*vec3(.25053, .5027, .2501);;\n    //col.xyz += (id_t == 2.?1.:.0)*h;\n    col.xyz += h;\n    col *= min(1.,7./inter.y); // Thanks ocb\n    c_out =  vec4(col,1.0);\n}\n\nfloat\tde_0(vec3 p)\n{\n\tfloat\tmind = 1e5;\n\n    rotate(p.yz, iTime*.1);\n    p.z -= .5*iTime;\n    rotate(p.xy, iTime*.50);\n\tvec3\tpr = p;\n\n    // take the fractional part of the ray (p), \n    // and offset it to get a range from [0.,1.] to [-.5, .5]\n    // this is a space partitioning trick I saw on \"Data Transfer\" by srtuss : https://www.shadertoy.com/view/MdXGDr\n    id = floor(pr.xyz);\n\tpr.xyz = fract(pr.xyz);\n\tpr -= .5;\n\n    id = sin(id*1.+length(id))+1.;\n    float lid = length(id);// This id is used to give each cube a different size\n    mind = mylength(pr.yxz, vec3(length(id))*.1*1.0)-.010; // this is the cube grid\n    mind = abs(mind)-.00001; // let's give the cubes some consistance\n    mind = abs(mind)+.00001; // make them transparent\n    // This is the coloring of the cubes, use these kind of things with sliders parameters to ease the pain :D\n    h += vec3(.2, .2, .72)/max(.001, mind*mind*100000000000.0001 + 0.0);\n\tid_t = mind; // id of the object touched by the ray\n    mind = max(mind, max(mind, -(length(pr.xyz)-1.*length(id)*.12) ) ); // this is the hole in the cubes\n    id_t = (id_t != mind)? 1. : 0. ;\n    \n    // magic numbers : 2.09 == 2*(3.14/3), 4.18 == 4*(3.14/3)\n    // this rotate space before making spheres out of this distorded space\n    pr.y *= 1.*sin(t*6.66     +(p.z+p.y-p.x)*1.0 );\n    pr.x *= 1.*sin(t*6.66+2.09+(p.z+p.y-p.x)*1.0 );\n    pr.z *= 1.*sin(t*6.66+4.18+(p.z+p.y-p.x)*1.0 );\n    float balls = length(pr)-.051;\n    mind = min(mind, balls);\n    id_t = mind == balls ? 2. : id_t;\n\n    h += vec3(.852, .2, .2)/max(.001, balls*5000.1 + 50.0); // light my balls\n    \n\treturn (mind)*.5; // return distance * fudgefactor\n}\n\nfloat\tscene(vec3 p)\n{  \n    float\tmind = 1e5;\n\n\tmind = de_0(p);\n\t\n    return (mind);\n}\n\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n\n    hit = .0;\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E || dist.y > FAR)\n        {\n            if (dist.x < E)\n                hit = 1.;\n            break;\n        }\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nfloat mylength(vec3 p, vec3 id)\n{\n    return max(abs(p.x)-id.x, max(abs(p.y)-id.y, abs(p.z)-id.z));\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n    return normalize(vec3(\n           march(pos+eps.xyy, dir).y - march(pos-eps.xyy, dir).y,\n           march(pos+eps.yxy, dir).y - march(pos-eps.yxy, dir).y,\n           march(pos+eps.yyx, dir).y - march(pos-eps.yyx, dir).y ));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}