{
    "Shader": {
        "info": {
            "date": "1590098847",
            "description": "No saber, no reír T-T",
            "flags": 0,
            "hasliked": 0,
            "id": "ws2BWD",
            "likes": 3,
            "name": "Fractal pocho",
            "published": 3,
            "tags": [
                "3d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "makaronsito",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "//constantes para el march tracing\nconst float MIN_DIST = 0.01;\nconst float MAX_DIST = 1000.;\nconst int MAX_MARCH = 500;\n//altura a la que se encuentra un plano que hace de suelo\nconst float groundHeight = 0.;\n//definimos una esfera con una posición y radio, debe caber en nuestra celda unidad\nconst vec3 bola = vec3(0, 1, .7);\nconst float radio = 0.5;\n//distancia entre bolas duplicadas eternamente, la arista de la celda unidad\nconst float cellS = 5.;\n\n//devuelve el resto de la división con el signo de x\nvec3 rep(vec3 pos, float spa){\n\treturn mod(pos+spa/2.,spa)-spa/2.;\n}\n\n//se encarga de hallar el punto más cercano perteneciente a cualquier objeto que se encuentre en escena\n//en este momento solo hay un plano y una esfera, la menor de las distancias es la devuelta por la función\n//también devuelte una tonalidad de rojo para distinguir un objeto de otro\nvec2 getDistance(vec3 pos){\n\tfloat diff = 0.;\n\tfloat col = 0.;\n\tfloat diffG = abs(pos.y-groundHeight);\n\t\n\tfloat diffC = length(rep(pos,cellS)-bola) - radio;\n\t\n\tif (diffC > diffG){\n        col = 1.;\n\t\tdiff = diffG;\n\t}\n\telse{\n\t\tdiff = diffC;\n\t}\n\t\t\n\treturn vec2(abs(diffC), col);\n}\n\n//calcula la distancia y con ella determina lo vivo que es el color, si se pasa de la \"rayo\" devuelve color blanco\n//si da contra algo devuelve un color que está objetivamente mal y no proporciona información así que mola\nvec3 rayMarch(vec3 dir, vec3 pos){\n\tfloat dist = 0.;\n\tfor (int i = 0; i < MAX_MARCH; i++){\n\t\tvec2 res = getDistance(pos);\n\t\tfloat surfDist = res.x;\n\t\tpos += dir * surfDist;\n\t\tdist += surfDist;\n\t\t\n\t\t//if it's\t BUT \tit's not\n\t\tif (surfDist < MIN_DIST){\n\t\t\tfloat coef = dist/MAX_DIST;\n\t\t\treturn vec3(res.y, coef, coef);\n\t\t}\n        else{\n            if (i == MAX_MARCH-1 || dist > MAX_DIST)\n\t\t\treturn vec3(1);\n        }\n\t}\n}\n\nvoid mainImage ( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 relUV = vec2(uv.x-0.5,uv.y-0.5);\t// \"centramos\" las coordenadas UV en el centro de la textura en vez de la esquina\n    vec3 rotPixel = normalize(vec3(relUV.x*iResolution.x/iResolution.y, relUV.y, 1));\t// vector dirección para cada rayo\n    vec3 camPos = vec3(cos(iTime)*4.,sin(iTime)*4.,(iTime)*20.2);//owo y paz\t// posición cámara, mov armónico simple en relación al tiempo no tiene pérdida\n\tfragColor = vec4(rayMarch(rotPixel,camPos),1.0);\t// ahí va el colorsito\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}