{
    "Shader": {
        "info": {
            "date": "1574379347",
            "description": "A simple mandelbrut factal, made with raymarching!\nthe color is fog based!",
            "flags": 0,
            "hasliked": 0,
            "id": "3syXRV",
            "likes": 10,
            "name": "A moving mandelbrot fractal",
            "published": 3,
            "tags": [
                "mandelbrut"
            ],
            "usePreview": 0,
            "username": "Cewein",
            "viewed": 1017
        },
        "renderpass": [
            {
                "code": "#define MARCHING_STEP 128\n\n/////\n// SDF Operation function\n/////\n\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return q;\n}\n\n/////\n// Scene and primitive SDF function\n/////\n\nfloat sphereSDF(vec3 samplePoint) {\n    return length(samplePoint) - 1.0;\n}\n\n\n\nfloat sdPlane( vec3 p )\n{\n    return p.y;\n}\n\n#define Scale 2.\n#define iteration 15\n#define Power (7.+ sin(iTime/3.) * 5.)\n#define Bailout 5.\n\nfloat DE(vec3 pos) {\n    vec3 z = pos;\n    float dr = 1.0;\n    float r = 0.0;\n    for (int i = 0; i < iteration ; i++) {\n        r = length(z);\n        if (r>Bailout) break;\n        \n        // convert to polar coordinates\n        float theta = acos(z.z/r);\n        float phi = atan(z.y,z.x);\n        dr =  pow( r, Power-1.0)*Power*dr + 1.0;\n        \n        // scale and rotate the point\n        float zr = pow( r,Power);\n        theta = theta*Power;\n        phi = phi*Power;\n        \n        // convert back to cartesian coordinates\n        z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n        z+=pos;\n    }\n    return (0.5*log(r)*r/dr);\n}\n\nfloat sceneSDF(vec3 samplePoint) {\n\n  \n    float res = DE(samplePoint);\n    //res += sdPlane(-0.5, vec4(0.,1.,0.,1.));\n    return res;\n   \n}\n\n\n/////\n// Ray function\n/////\n\nvec3 getCameraRayDir(vec2 uv, vec3 camPos, vec3 camTarget, float fov)\n{\n    // Calculate camera's \"orthonormal basis\", i.e. its transform matrix components\n    vec3 camForward = normalize(camTarget - camPos);\n    vec3 camRight = normalize(cross(vec3(0.0, 1.0, 0.0), camForward));\n    vec3 camUp = normalize(cross(camForward, camRight));\n     \n    float fPersp = 0.5 / tan(radians(fov)/ 2.0);\n    vec3 vDir = normalize(uv.x * camRight + uv.y * camUp + camForward * fPersp);\n \n    return vDir;\n}\n\nvec3 rayDir(float fov, vec2 size, vec2 fragCoord)\n{\n    vec2 xy = fragCoord - size/2.0;\n    float z = size.y * 0.5 / tan(radians(fov)/ 2.0);\n    return normalize(vec3(xy,-z));\n}\n\nvec2 normalizeScreenCoords(vec2 screenCoord)\n{\n    vec2 result = 2.0 * (screenCoord/iResolution.xy - 0.5);\n    result.x *= iResolution.x/iResolution.y;\n    return result;\n}\n\n/////\n// Marching function\n/////\n\nfloat march(vec3 pos, vec3 direction, float start, float end, inout int i)\n{\n    float depth = start;\n    for(i = 0; i < MARCHING_STEP; i++)\n    {\n        float dist =  sceneSDF(pos + direction * depth);\n        if(dist < 0.0001f)\n        {\n            //return depth;\n            break;\n        }\n        depth += dist;\n        if(depth >= end)\n            return end;\n    }\n    return depth;\n}\n\n\n/////\n// Main function\n/////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 at = vec3(0, 0, 0);\n    vec2 uv = normalizeScreenCoords(fragCoord);\n    vec3 pos = vec3(cos(iTime/10.) * 1.75 ,sin(iTime/15.),sin(iTime/10.) * 1.75);\n    \n    int i = 0;\n    \n    vec3 dir = getCameraRayDir(uv, pos, at, 50.f);\n    \n    float dist = march(pos, dir, 0.f,200.f, i);\n    vec3 col = vec3(dist);\n    \n    if((dist - 200.f) > 0.001f)\n    {\n        col = vec3(0.0529, 0.0808, 0.0922);\n    }\n    else\n    {\n        col = vec3(dist*0.4); \n        col = vec3(0.75 + sin(iTime/10.), 0.515, 0.053 + cos(iTime/10.)) * float(i)/float(MARCHING_STEP);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}