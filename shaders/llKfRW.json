{
    "Shader": {
        "info": {
            "date": "1542044170",
            "description": "Fluid Prism based on the work of wyatt",
            "flags": 32,
            "hasliked": 0,
            "id": "llKfRW",
            "likes": 5,
            "name": "Fluid Prism",
            "published": 3,
            "tags": [
                "fluid",
                "prism"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 704
        },
        "renderpass": [
            {
                "code": "#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \t\n\tfragColor = 0.5+0.5*sin(tex(fragCoord).w * vec4(7.7,6.0,3.9,1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://github.com/aiekick/NoodlesPlate/blob/master/fluid.glsl\n//NoodlesPlate widgets\n//uniform(hidden) \tint\t\t\t(frame) \t\t\t\t\t\tuFrame;\n//uniform(hidden) \tfloat\t\t(deltatime) \t\t\t\t\tuDeltaTime;\n//uniform(hidden) \tsampler2D\t(buffer:0) \t\t\t\t\t\tbuffer;\n//uniform(hidden) \tsampler2D\t(buffer:1) \t\t\t\t\t\tbuffer1;\n//uniform(hidden) \tvec2\t\t(buffer:0) \t\t\t\t\t\tsize;\n//uniform(color) \tvec3\t\t(0:10:7.7,6.0,7.5) \t\t\t\tcolor;\n//uniform(physic) \tfloat\t\t(0.0:1.0:0.1) \t\t\t\t\tforce;\n//uniform(prism) \tfloat\t\t(0.00001:0.1:0.01) \t\t\t\tconstraint;\n//uniform(prism) \tfloat\t\t(-1.0:1.0:0.0) \t\t\t\t\teffect;\n//uniform(prism) \tfloat\t\t(0.99:1.0:1.0) \t\t\t\t\tviscosity;\n//uniform(emit) \tfloat\t\t(1.0:20.0:5.0) \t\t\t\t\temitSize;\n//uniform(emit) \tint\t\t\t(0:50:1) \t\t\t\t\t\tcount;\n//uniform(emit) \tfloat\t\t(0.0:0.5:0.3) \t\t\t\t\tradius;\n//uniform(emit) \tfloat\t\t(checkbox:true) \t\t\t\temit;\n//uniform(shape) \tint\t\t\t(combobox:circle,triangle,quad) shapeType;\n\n#define count 4\n#define radius 0.43\n#define emitSize 1.0\n#define force 1.0\n#define constraint 0.01\n#define effect 1.0\n\n#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n\n// v => coord x,y / s => dir\n#define emit(v,s) if (length(g-(v)) < emitSize) fragColor.xy = fragColor.xy * (1.0 - force) + force * (s), fragColor.w = 1.0\n\n// v => coord x,y / d => diam\n#define wallCircle(v,d) if (length(g-(v)) < (d)) fragColor.w = fragColor.z / (length(fragColor.xy)+0.0001), fragColor.xy *= 0.\n\nfloat shape(vec2 p, vec2 d)\n{\n\tfloat r = min(d.x, d.y);\n\t//float disk = length(p) - r;\n\tfloat tri = max(abs(p.x)-p.y,p.y) - r;\n\t//float quad = max(abs(p.x), abs(p.y)) - r;\n\t//if (shapeType == 0) return disk;\n\t//if (shapeType == 1) return tri;\n\t//\treturn quad;\n    return tri;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // x,y => pos\n\t// z => pressure\n\t// w => ink\n\t\n    vec2 s = iResolution.xy;\n\tvec2 g = fragCoord;\n\t\n\tvec4 a = tex(g+vec2(1,0));\n\tvec4 b = tex(g+vec2(0,1));\n\tvec4 c = tex(g+vec2(-1,0));\n\tvec4 d = tex(g+vec2(0,-1));\n\t\n\tfragColor = tex(g-tex(g).xy); // last state\n\t\n\tvec2 gp = vec2(a.z-c.z,b.z-d.z); // pressure gradient\n    \n\tfragColor.xyz = vec3(\n\t\tfragColor.x + gp.x,\n\t\tfragColor.y + gp.y,\n\t\t0.25 * (a.z + b.z + c.z + d.z) - 0.05 * (c.x - a.x + d.y - b.y));\n\t\n\tif (iFrame < 1) fragColor = vec4(0);\n\tif (g.x < 1. || g.y < 1. || g.x > s.x - 1. || g.y > s.y - 1.) fragColor.xy *= 0.;\n\t\n    //if (iFrame < 2000)\n    {\n\t\tfor (int i=0;i<count;i++)\n\t\t{\n\t\t\tfloat a = 6.28318 * float(i)/float(count);\n\t\t\tvec2 dir = vec2(cos(a),sin(a));\n\t\t\tvec2 p = s * 0.5 - dir * radius * min(s.x,s.y);\n\t\t\temit(p, dir);\n\t\t}\n\t}\n\t\n\t// wall\n\tvec2 p = g - s * 0.5;\n\tvec2 dim = vec2(s.x * 0.2);\n\tif (shape(g-s*0.5, dim) < 0.01) \n\t{\n\t\tfragColor.w = fragColor.z / (shape(fragColor.xy, vec2(constraint)));\n\t\tfragColor.xy *= effect;// / (shape(fragColor.xy, vec2(constraint)));\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}