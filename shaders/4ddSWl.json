{
    "Shader": {
        "info": {
            "date": "1462437358",
            "description": "A ride down a sewer pipe, following a floating light.",
            "flags": 32,
            "hasliked": 0,
            "id": "4ddSWl",
            "likes": 4,
            "name": "Sewer Pipe",
            "published": 3,
            "tags": [
                "water",
                "light",
                "shading",
                "repetition",
                "endless",
                "raymarcher",
                "height",
                "tube",
                "fresnel",
                "sewer"
            ],
            "usePreview": 1,
            "username": "jackdavenport",
            "viewed": 945
        },
        "renderpass": [
            {
                "code": "#define BLOOM_THRESHOLD .7\n#define BLOOM_INTENSITY 2.5\n#define LENS_DIRT\n#define DIRT_INTENSITY 2.5\n//#define BLOOM_ONLY\n\n#define BLUR_ITERATIONS 3\n#define BLUR_SIZE .025\n#define BLUR_SUBDIVISIONS 32\n\nvec3 getHDR(vec3 tex) {\n \n    return max((tex - BLOOM_THRESHOLD) * BLOOM_INTENSITY, 0.);\n    \n}\n\nvec3 gaussian(sampler2D sampler, vec2 uv) {\n \n    vec3 sum = vec3(0.);\n    \n    for(int i = 1; i <= BLUR_ITERATIONS; i++) {\n     \n        float angle = 360. / float(BLUR_SUBDIVISIONS);\n        \n        for(int j = 0; j < BLUR_SUBDIVISIONS; j++) {\n         \n            float dist = BLUR_SIZE * (float(i+1) / float(BLUR_ITERATIONS));\n            float s    = sin(angle * float(j));\n            float c\t   = cos(angle * float(j));\n            \n#ifndef LENS_DIRT\n            sum += getHDR(texture(sampler, uv + vec2(c,s)*dist).xyz);\n#else\n            vec3 dirt = texture(iChannel1, uv).rgb * DIRT_INTENSITY;\n    \t\tsum += getHDR(texture(sampler, uv+vec2(c,s)*dist).xyz) * dirt;   \n#endif\n            \n        }\n        \n    }\n    \n    sum /= float(BLUR_ITERATIONS * BLUR_SUBDIVISIONS);\n    return clamp(sum * BLOOM_INTENSITY, 0., 1.);\n    \n}\n\nvec3 blend(vec3 a, vec3 b) {\n \n    return 1. - (1. - a)*(1. - b);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 tx = texture(iChannel0, uv);\n    \n    fragColor.xyz = gaussian(iChannel0, uv);\n    fragColor.a   = tx.a;\n#ifndef BLOOM_ONLY    \n    fragColor.xyz = blend(tx.xyz, fragColor.xyz);\n#endif\n    fragColor.xyz = clamp(fragColor.xyz, 0., 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_ITERATIONS 256\n#define MIN_DISTANCE  .001\n#define MAX_DISTANCE  256.\n\n//#define VOLUME_ENABLED\n#define VOLUME_SAMPLES 16\n#define VOLUME_STEPS 16\n#define VOLUME_INTENSITY .5\n\n#define EPSILON .001\n\n#define WATER_HEIGHT .01\n\n#define RGB(r,g,b) vec3(r,g,b) / 255.;\n#define FOG_COLOR vec3(.15,.15,.15)\n\n\t  vec3  lightPos = vec3(0.);\nconst vec3  lightCol = RGB(355,100,100)\nconst float lightDst = 2.;\n    \nstruct Ray { vec3 ori; vec3 dir;};\nstruct Hit { vec3 p; int id; \t};\nstruct Dst { float dst; int id; };\n    \nvec2 rot2D(vec2 p, float angle) {\n\n    angle = radians(angle);\n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return p * mat2(c,s,-s,c);\n    \n}\n\n// Source: http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nfloat rand(vec2 co) {\n    \n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n\n}\n    \nDst dstBox(vec3 p, vec3 pos, vec3 box, int id) {\n\n    float dst = length(max(abs(pos-p)-box, 0.));\n    return Dst(dst, id);\n    \n}\n\n//Source: https://iquilezles.org/articles/distfunctions\nDst dstCappedCylinder( vec3 p, vec3 pos, vec2 h ) {\n    \n    vec3 q = pos - p;\n    q.yz = rot2D(q.yz, 90.);\n    \n  \tvec2 d = abs(vec2(length(q.xz),q.y)) - h;\n  \tfloat dst = min(max(d.x,d.y),0.0) + length(max(d,0.0));\n\n\treturn Dst(dst, 1);\n    \n}\n\nfloat getWaterHeight(vec3 p) {\n \n    vec2 uv = mod(p.xz / 45. + .5, 1.);\n    float t = iTime / 45.;\n    \n    float h = 0.;\n    h += texture(iChannel1, uv + vec2(t,-t)).r;\n    h += texture(iChannel1, uv - vec2(t,-t)).r;\n    h += texture(iChannel1, uv + vec2(-t,t)).r;\n    h += texture(iChannel1, uv - vec2(-t,t)).r;\n    h += texture(iChannel1, uv + vec2(t,-t) * .5).r;\n    h += texture(iChannel2, uv + vec2(-t,t)).r * .25;\n    h += texture(iChannel2, uv - vec2(-t,t)).r * .25;\n    h += texture(iChannel2, uv + vec2(t,-t)).r * .25;\n    h /= 6.;\n    //h /= 5.;\n    \n    return clamp(h, 0., 1.);\n    \n}\n\nDst dstSubtract(Dst a, Dst b) {\n \n    float dst = max(-b.dst, a.dst);\n    return Dst(dst, a.id);\n    \n}\n\nDst dstUnion(Dst a, Dst b) {\n \n    if(b.dst < a.dst) return b;\n    return a;\n    \n}\n\nDst dstScene(vec3 p) {\n \n    Dst dst = dstBox(p, vec3(0., 3., 5.), vec3(1.), 1);\n    \n    float rp = 7.;\n    p.z = mod(p.z * .5, rp) - .5*rp;\n    \n    Dst pp = dstBox(p, vec3(0.), vec3(3.,3.,5.), 0);\n    pp = dstSubtract(pp, dstCappedCylinder(p, vec3(0.), vec2(2.75,7.)));\n    pp = dstSubtract(pp, dstBox(p, vec3(0.,3.,5.),vec3(1.),0));\n    pp = dstUnion(pp, dstBox(p, vec3(0.,.5,1.), vec3(3.,.25,.25),2));\n    pp = dstUnion(pp, dstBox(p, vec3(-2.,0.,-1.), vec3(.075,.75,.075),3));\n    dst = dstUnion(dst, pp);\n    \n    return dst;\n    \n}\n\nHit raymarch(Ray ray, int maxIter, float maxDist) {\n \n    vec3 p = ray.ori;\n    int id = -1;\n    \n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n     \n        if(i >= maxIter) {\n         \n            break;\n            \n        }\n        \n        Dst scn = dstScene(p);\n        p += ray.dir * scn.dst * .75;\n        \n        if(distance(p,ray.ori) >= maxDist) {\n         \n            id = -1;\n            break;\n            \n        }\n        if(scn.dst < MIN_DISTANCE) {\n         \n            id = scn.id;\n            break;\n            \n        }\n        \n    }\n    \n    return Hit(p,id);\n    \n}\n\nfloat raymarchWater(Ray ray, float maxT) {\n \n    float t = 0.;\n    for(int i = 0; i < 256; i++) {\n        \n        vec3 p  = ray.ori + ray.dir * t;\n        float h = p.y + 1. - getWaterHeight(p);\n        if(h < (t*EPSILON) || t > maxT) break;\n        t += h * .5;\n        \n    }\n   \treturn t;\n    \n}\n\nvec3 calcNormal(vec3 p) {\n \n    vec2 eps = vec2(EPSILON, 0.);\n    vec3   n = vec3(dstScene(p + eps.xyy).dst - dstScene(p - eps.xyy).dst,\n                    dstScene(p + eps.yxy).dst - dstScene(p - eps.yxy).dst,\n                    dstScene(p + eps.yyx).dst - dstScene(p - eps.yyx).dst);\n    return normalize(n);\n    \n}\n\nvec3 calcWaterNormal(vec3 p, float t) {\n\n    float eps = EPSILON * t;\n    float   h = getWaterHeight(p);\n    vec3    n = vec3(\n    getWaterHeight(p + vec3(eps,0.,0.)) - h,\n    eps,\n    getWaterHeight(p + vec3(0.,0.,eps)) - h\n    );\n    return normalize(n);\n    \n}\n\nfloat getFog(Ray ray, vec3 p) {\n \n    return clamp(distance(ray.ori,p) / 45., 0., 1.);\n    \n}\n\n// Thanks iq!\n// Source: https://www.shadertoy.com/view/Xds3zN\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = dstScene( ro + rd*t ).dst * 1.5;\n        res = min( res, 32.0*h/t );\n        t += clamp( h, 0.02, .10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcVolumetric(Ray ray, float maxDist) {\n \n    #ifdef VOLUME_ENABLED\n    vec3 sum = vec3(0.);\n    float stepSize = maxDist / float(VOLUME_SAMPLES);\n    \n    for(int i = 0; i < VOLUME_SAMPLES; i++) {\n        \n     \tvec3 p = ray.ori + ray.dir * (stepSize * float(i));\n        p += ray.dir * rand(gl_FragCoord.xy) * stepSize * .5;\n        \n      \tvec3  lv = lightPos - p;\n        float ld = length(lv);\n\t\t\t  lv = normalize(lv);\n        \n        if(raymarch(Ray(p,lv), VOLUME_STEPS, ld).id == -1) {\n         \n            float atten = 1. - smoothstep(ld, 0., lightDst);\n            sum += lightCol * atten;\n            \n        }\n        \n    }\n    \n    sum /= float(VOLUME_SAMPLES);\n    sum *= VOLUME_INTENSITY;\n    \n    return sum;\n    #else\n    return vec3(0.);\n    #endif\n    \n}\n\nvec3 calcLighting(Ray ray, vec3 p, vec3 d, vec3 n, float sh) {\n \t\n    //p.z    = mod(p.z, 5.);\n    \n    vec3 lv = lightPos - p;\n    //vec3 lv = vec3(45.,30.,45.);\n    vec3 ld = normalize(lv);\n    \n    float atten = 1. - smoothstep(length(lv), 0., lightDst);\n    float diff  = max(dot(ld,n), 0.) * atten;\n    float s     = pow(max(dot(ld,normalize(reflect(ray.dir,n))),0.),sh) * atten * diff;\n    \n    if(sh == 0.) {\n     \n        s = 0.;\n        \n    }\n    \n    float shadow = softshadow(p + ld * .001, ld, 0., 32.);\n    \n    diff *= shadow;\n    s    *= shadow;\n    return (d * lightCol * diff) +  (lightCol * s);\n    \n}\n\nvec3 shadePipe(Ray ray, Hit scn) {\n \n    vec3 n  = calcNormal(scn.p);\n    vec2 uv = mod((scn.p.yz / 10.) - .5, 1.);\n    \n   \tvec3 c = texture(iChannel0, uv).xyz;\n    c      = calcLighting(ray, scn.p, c, n, 60.);\n    return c;\n    \n}\n\nvec3 shadeBox(Ray ray, Hit scn) {\n \n    vec3 n = calcNormal(scn.p);\n    vec3 d = texture(iChannel2, mod(scn.p.xy / 2.5, 1.)).rrr;\n    d = calcLighting(ray, scn.p, d, n, 90.);\n    \n    return d;\n    \n}\n\nvec3 shadeMeter(Ray ray, Hit scn) {\n \n    vec3 n  = calcNormal(scn.p);\n    vec3 d  = vec3(1.);\n    float y = mod(scn.p.y, .25);\n    \n    if(y > .15 && y < .25) {\n     \n        d = vec3(0.);\n        \n    }\n    \n    return calcLighting(ray, scn.p, d, n, 45.);\n    \n}\n\nvec3 shadeWater(Ray ray, float t) {\n \n    if(t >= MAX_DISTANCE) {\n     \n        return vec3(0.);\n        \n    }\n    \n    vec3 p  = ray.ori + ray.dir * t;\n    vec3 n  = calcWaterNormal(p,t);\n    vec3 rl = reflect(ray.dir, n);\n        \n    vec3 dc = RGB(6,87,41);\n    dc = calcLighting(ray, p, dc, n, 45.);\n        \n    vec3 rc = vec3(0.);\n    Ray rr = Ray(p + .01 * rl, rl);\n    Hit rh = raymarch(rr, 64, 64.);\n    if(rh.id == 0) {\n         \n       rc = shadePipe(rr,rh);\n            \n    } else if(rh.id == 1 || rh.id == 2) {\n         \n       rc = shadeBox(rr,rh);\n            \n    } else if(rh.id == 3) {\n     \n       rc = shadeMeter(rr,rh);\n        \n    }\n    rc = mix(rc, FOG_COLOR, getFog(rr,rh.p)); \n    \n    float fresnel = mix(.1, .95, 1. - max(pow(-dot(ray.dir,n), .15), 0.));\n    vec3 final = mix(dc,rc,fresnel);\n    \n    return mix(final, FOG_COLOR, getFog(ray, p));\n    \n}\n\nvec3 shade(Ray ray) {\n \n    Hit scn  = raymarch(ray, MAX_ITERATIONS, MAX_DISTANCE);\n    vec3 col = FOG_COLOR;\n    \n    float waterT  = raymarchWater(ray, MAX_DISTANCE);\n    vec3 waterCol = shadeWater(ray, waterT);\n    \n    if(waterT < distance(ray.ori,scn.p)) {        \n        \n        col = waterCol;\n        \n    } else {\n\n        if(scn.id == 0) {\n     \n        \tcol = shadePipe(ray, scn);\n        \n    \t} else if(scn.id == 1 || scn.id == 2) {\n     \n        \tcol = shadeBox(ray, scn);\n        \n        } else if(scn.id == 3) {\n         \n            col = shadeMeter(ray, scn);\n            \n        }\n        \n    }\n    \n    col = mix(col, FOG_COLOR, getFog(ray, scn.p));\n    col += calcVolumetric(ray, min(distance(ray.ori,scn.p),12.));\n    \n    vec3  lv = lightPos - ray.ori;\n    float lf = max(pow(-dot(normalize(lv),ray.dir), 35.), 0.);\n    col += lightCol * lf * .5 * softshadow(ray.ori,ray.dir,0.,64.);\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ori = vec3(0.,sin(iTime),-15. + iTime);\n    vec3 dir = vec3(uv, 1.);\n    ori.y = mix(-.15 + getWaterHeight(ori)*.25,.15,ori.y);\n    \n    Ray ray  = Ray(ori,normalize(dir));\n    lightPos = ray.ori + vec3(sin(iTime),1.,3.);\n\tfragColor = vec4(shade(ray), 1.);\n    \n    //fragColor.xyz = vec3(getWaterHeight(uv.xyy * 16.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}