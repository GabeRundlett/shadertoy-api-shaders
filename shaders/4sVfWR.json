{
    "Shader": {
        "info": {
            "date": "1528320506",
            "description": "got inspired by trirop's awesome shader(s) https://www.shadertoy.com/view/MsScWD\nI didnt use Runge-Kutta integration because im just not that fancy\nI think i nailed the colors (happy accident), but not the lighting or the stars",
            "flags": 0,
            "hasliked": 0,
            "id": "4sVfWR",
            "likes": 69,
            "name": "Andromeda's Jewel",
            "published": 3,
            "tags": [
                "fluid",
                "planet",
                "gas"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 2481
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159265359\n//this noise stuff is from iq thanks\nfloat hash (vec2 v) {\n    v = floor(v);\n    return fract(67.3249*sin(17.1234*length(v-vec2(34.14,123.))));\n}\nfloat noise (vec2 v) {\n    vec4 n = vec4(floor(v),ceil(v));\n    vec4 h = vec4(hash(n.xy),hash(n.zy),hash(n.xw),hash(n.zw));\n    return mix(mix(h.x,h.y,v.x-n.x),mix(h.z,h.w,v.x-n.x),v.y-n.y);\n}\nmat2 r (float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(s,-c,c,s);\n}\nfloat no (vec2 v) {\n    float c = 0.;\n    for (int i = 1; i < 10; i++) {\n        v = 2.*r(0.2944*pi)*v;\n        c += 0.2*noise(v)/(1.+length(sin(0.5*v)));\n    }\n    return c;\n}\n// flow stuff is from trirop https://www.shadertoy.com/view/MsScWD very cool\nvec2 ff (vec2 v) {\n    \tfloat n = 1.+0.5*noise(v);\n\t\treturn \n\t        sign(v.y-0.5)*50.*vec2(n*sin(1.4*v.y),0.)/(v.y+3.5)+\n\t        .1*vec2(sin(-12.*v.y*n),cos(13.*v.x))+\n\t        1.8*vec2(cos(-6.*v.y),sin(4.*v.x))+\n\t        1.2*vec2(sin(-1.4*v.y),cos(1.5*v.x))+\n\t        2.0*vec2(sin(-.5*v.y),cos(.6*v.x))+\n\t        0.8*vec2(sin(-.2*v.y),cos(.2*v.x*n))\n\t     ;}\nbool star = false;\nvec2 mouse;\nvoid sphere (inout vec3 p, inout vec3 d) {\n\tfloat r = .7, dp = dot(d,p), pp = dot(p,p), det = dp*dp+r*r-pp;\n    if (det < 0.) star = true;\n    float x = -dp+sqrt(det);\n    p = (p+d*x);\n    d = reflect(normalize(p),d);\n}\n\nvec3 surface (vec2 uv) {\n\tvec3 col = 0.*vec3(7.-abs(uv.y))*no (uv);\n    for (int i = 0; i < 45; i++) {\n\t\tuv += 0.01*(2.+1.5*sin(.1*iTime))*ff(uv);\n    }\n    float j = no(0.1*uv*pi);\n    vec3 c = sin(j*vec3(1,2,3));\n    col += abs(mix(c*c*c,vec3(j),abs(1.-uv.y/7.5)));\n    return col;\n}\nvec3 stars (vec2 v) {\n\treturn vec3(pow(1.35*no(0.1*iTime+5.*mouse+3.*v/dot(v,v)),7.));\n}\nvoid mainImage( out vec4 fragColor, in vec2 U )\n{\n    vec2 uv = (2.*U-iResolution.xy)/iResolution.y;\n   \tfloat q = 1.2+0.1*min(17.,iTime);\n    vec3 p = vec3(0,0,-q);\n    vec3 d = normalize(vec3(uv,4.));\n    mouse = iMouse.xy/iResolution.xy;\n    p.yz = r(-mouse.y+0.7*pi)*p.yz;\n    d.yz = r(-mouse.y+0.7*pi)*d.yz;\n    p.zx = r(mouse.x+0.25*pi)*p.zx;\n    d.zx = r(mouse.x+0.25*pi)*d.zx;\n    vec3 col;\n    sphere(p,d);\n    if (star) {\n        col = stars(uv);\n    } else {\n    \tcol = 0.8*surface(8.*vec2(atan(d.z,d.x)+0.01*iTime*min(iTime,17.),acos(d.y)));\n        float sh = dot(d,normalize(vec3(1,0,-1)));\n        col *= sh+0.4;\n    }\n    float l = length(uv-vec2(0.2,0))*q;\n    col = col+.09*vec3(0.5,0.7,1.)*(uv.x+0.5)*exp(-0.01*l*l*l*l)*q;\n    fragColor = vec4(col,1);  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}