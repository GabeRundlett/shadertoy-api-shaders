{
    "Shader": {
        "info": {
            "date": "1556352442",
            "description": "TV channel 2x2 logo",
            "flags": 32,
            "hasliked": 0,
            "id": "WtsGW4",
            "likes": 9,
            "name": "Logo 2x2 tv-channel",
            "published": 3,
            "tags": [
                "noise",
                "logo",
                "rounded"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 514
        },
        "renderpass": [
            {
                "code": "#define rand1(p) fract(sin(p* 78.233)* 43758.5453) \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 ouv = fragCoord/iResolution.xy;\n    \n    float ofstM = .002 * sin(ouv.y*5. + iTime) * rand1(iTime + floor(ouv.y*100.));\n    vec3 col = texture(iChannel0, ouv + ofstM).rgb;\n    \n    float ofstR = .01 * sin(iTime*5.) * rand1(iTime + floor(ouv.y*10.));\n    \n    col.r = texture(iChannel0, ouv-vec2(ofstR, 0.)).r;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Noise code from https://www.shadertoy.com/view/WlsGz4\n\n// Noise pixel size\n#define SIZE 5.0\n// Lower - more flowing\n#define FLUENCY 2.85\n\nfloat rand(vec2 co) { \n    return fract(sin(dot(co.xy , vec2(12.9898, 78.233))) * 43758.5453);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{            \n    vec2 id = ceil(fragCoord/SIZE);    \n    vec2 rid = vec2(rand(id), rand(id+iResolution.y));            \n        \n    float ridFactor = rid.x + rid.y;\n    float f = ridFactor + iTime * FLUENCY *  (ridFactor);\n    float fid = floor(f);\n    f = abs(fract(f) - mod(fid, 2.));\n    //fragColor = vec4(0.1/f);\n    fragColor = clamp(vec4(0.1/f), 0.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.1415926\n#define PI_2 1.5707963\n#define PI_4 0.78539815\n\n\nfloat roundedRect(vec2 p, float size ){\n\tfloat mask = \n        smoothstep(size, size-.1, abs(p.x)) * \n        smoothstep(size, size-.1, abs(p.y));\n    \n    return smoothstep(.45, .5, mask);    \n}\n\nfloat roundedCross(vec2 p, float size ){    \n    vec2 rp = p;\n    float result = 0.;\n    \n    for(float i= -1.; i<=1.; i+=2.){\n        vec2 rp = p;\n        rp *= mat2(cos( sin(PI_2 * i*sin(iTime)) + vec4(0,33,11,0)));\n    \n        float mask = \n            smoothstep(size*2., size*2.0-.05, abs(rp.x))  * \n            smoothstep(size, size-.05, abs(rp.y));       \n\n        result += smoothstep(.40, .5, mask);    \n    }\n    \n    return result;    \n}\n\nfloat evilEye(vec2 p, float dir){\n    float result = 0.;\n    float l = length(p);\n    result += smoothstep(.05, .045, l);\n    \n    result -= smoothstep(0.01, 0.02, p.x*dir+p.y*2.);\n    \n    return clamp(result, 0., 1.);    \n}\n\nfloat mouth(vec2 p, float size){\n\tfloat l = length(p);    \n    float mask = smoothstep(.1*size,.1*size - .005, l);\n    p.y -=0.05*size;\n    p.x *= .6;\n    l = length(p);    \n    mask -= smoothstep(.09, .085, l);\n        \n    return clamp(mask, 0., 1.);\n}\n\nfloat smile(vec2 p){\n    float result = 0.;\n    \n    //Mouth\n    vec2 mP = p;\n    mP.y += .03;\n    float mask = mouth(mP,1.15) - mouth(mP,1.0);\n    \n    result += clamp(mask, 0., 1.);\n        \n    //Teeth\n    vec2 zP = p;\n    zP.y += .1 + sin(zP.x*300.)*(.02 - abs(zP.x*.11)) - abs(zP.x*.3);          \n    result += smoothstep(0.01, 0.001, abs(zP.y)) * step(abs(zP.x), .09);\n        \n    return result;    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 ouv = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y; \n    \n    uv *= (sin(iTime *0.33)*.5+.5)*.2 + 0.8;\n    \n    float mask = 0.;   \n    \n    for(float i= -1.; i<=1.; i+=2.){\n        vec2 ruv = uv + vec2(.30,0.) * i;\n        \n        ruv.y +=sin(iTime)*.02*i;\n        ruv *= mat2(cos( (sin(iTime+i*1.5))*.1 + vec4(0,33,11,0)));\n        \n        mask += roundedRect(ruv, .25);   \n        mask -= roundedRect(ruv*1.25, .25);\n        \n        for(float i= -1.; i<=1.; i+=2.){\n            vec2 euv = ruv;\n            euv.x += .08*i;\n            euv.y -= .05;\n            mask += evilEye(euv, i);\n        }\n        \n        mask += smile(ruv);        \n    }\n    \n    mask += roundedCross(uv, .05);\n             \n    vec3 back = texture(iChannel0, ouv).rgb + .8;    \n    vec3 col = mix(back, vec3(0.), mask);    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}