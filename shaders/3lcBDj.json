{
    "Shader": {
        "info": {
            "date": "1613416408",
            "description": "I just bought a webcam so I made a simple halftone filter! Mouse controls brightness.",
            "flags": 2,
            "hasliked": 0,
            "id": "3lcBDj",
            "likes": 5,
            "name": "Halftone Webcam",
            "published": 3,
            "tags": [
                "halftone",
                "webcam"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 774
        },
        "renderpass": [
            {
                "code": "// comment these out for different effects\n#define monochrome 1\n//#define nearestDot 1\n\nconst float numberOfDots = 72.; // horizontally across screen\n\nvec3 PixelGrid ( vec2 p )\n{\n    float dotSize = iResolution.x/numberOfDots;\n    vec2 tileSize = vec2(.5,sqrt(3./4.)) * dotSize;\n    p /= tileSize;\n    p = fract(p/2.)*2.-1.;\n    vec2 s = sign(p);\n    p = abs(p);\n    p *= tileSize;\n\n    // this is not the best way to do this, but I am lazy (could just mirror it)\n    if ( length(p) > length(p-tileSize) )\n        p = p-tileSize;\n    \n    float value = dot(p,p)*4./dot(tileSize,tileSize); // based on area\n    \n    return vec3( p*s, clamp(1.-value,0.,1.) );\n}\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    vec3 grid = PixelGrid(fragCoord);\n\n    #ifdef nearestDot\n        fragCoord.xy -= grid.xy;\n    #endif\n\n    fragColour = texture(iChannel0,fragCoord.xy/iResolution.xy);\n    \n    fragColour.rgb = pow( fragColour.rgb, vec3(2.2) ); // gamma->linear\n\n    #ifdef monochrome\n        fragColour.rgb = vec3( dot( fragColour.rgb, vec3(.2,.7,.1) ) );\n    #endif\n    \n    float brightness = .4;\n    if ( iMouse.y > 0. ) brightness = iMouse.y/iResolution.y;\n\n    fragColour.rgb = (fragColour.rgb-.0)*(1.+20.*brightness);\n\n    // aliased version\n//    float spots = step( .0, monochrome - grid.z );\n    \n    // anti-aliased version\n    vec3 f = fragColour.rgb-grid.z;\n    vec3 spots = smoothstep( -f, 1.-f, f/max(fwidth(f),.01) );\n\n    fragColour.rgb = spots;\n\n    //if ( fragCoord.x < iMouse.x ) fragColour.rgb = vec3(monochrome);  // test the gamma and dot area maths is correct\n\n    fragColour.rgb = pow( fragColour.rgb, vec3(1./2.2) ); // linear->gamma\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}