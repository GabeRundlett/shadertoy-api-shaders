{
    "Shader": {
        "info": {
            "date": "1679380882",
            "description": "CC0: The Captain Coder logo\nNothing advanced, result after 10 min of tinkering\nhttps://www.youtube.com/channel/UC06YNfpGTT93KxJBDF3wStg\nhttps://www.twitch.tv/thecaptaincoder",
            "flags": 0,
            "hasliked": 0,
            "id": "ds3SzH",
            "likes": 1,
            "name": "The Captain Coder logo",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 137
        },
        "renderpass": [
            {
                "code": "// CC0: The Captain Coder logo\n//  Nothing advanced, result after 10 min of tinkering\n//  https://www.youtube.com/channel/UC06YNfpGTT93KxJBDF3wStg\n//  https://www.twitch.tv/thecaptaincoder\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define SCA(a)      vec2(sin(a), cos(a))\n\n\n\n// License: Unknown, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n  const vec2 sz       = vec2(1.0, sqrt(3.0));\n  const vec2 hsz      = 0.5*sz;\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = dot(p1, p1) < dot(p2, p2) ? p1 : p2;\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  n -= vec2(0.5);\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)*0.5;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat hexagon(vec2 p, float r) {\n  const vec3 k = 0.5*vec3(-sqrt(3.0), 1.0, sqrt(4.0/3.0));\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat arc(vec2 p, vec2 sc, float ra, float rb) {\n  p.x = abs(p.x);\n  return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : \n                                abs(length(p)-ra)) - rb;\n}\n\nfloat dcc(vec2 p) {\n  const vec2 sca  = SCA(13.0/16.0*PI);\n  const float rad = 0.9;\n  const float off = 0.5;\n  const float lw  = 0.2;\n  \n  vec2 p0 = p;\n  p0.y -= off;\n  p0 = -p0.yx;\n  float d0 = arc(p0, sca, rad, lw);\n\n  vec2 p1 = p;\n  p1.y += off;\n  p1 = -p1.yx;\n  float d1 = arc(p1, sca, rad, lw);\n\n  float d = d0;\n  d = min(d, d1);\n  return d;\n}\n\nfloat df(vec2 p, out float gd) {\n  float oz = mix(0.6, 3.0, smoothstep(-0.5, 0.5, cos(TAU*TIME/10.0)));\n  const float a = 10.0;\n  p /= oz;\n  p += a*sin(vec2(sqrt(0.5), 1.0)*TAU*(TIME+100.0)/(11.0*a));\n  hextile(p);\n  const float iz = 0.25;\n  p /= iz;\n  float hd = -(hexagon(p.yx, 0.5/iz));\n  float d = dcc(p);\n  d = min(d, hd);\n  gd = d;\n  d *= iz;\n  d *= oz;\n  return d;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float aa = 2.0/RESOLUTION.y;\n  float gd;\n  float d = df(p, gd);\n  const vec3 bcol = vec3(1.0, 0.0, 0.25);\n  vec3 col = 0.0*bcol;\n  col += 0.025*bcol/max((gd), 0.025);\n  col = mix(col, bcol, smoothstep(aa, -aa, d));\n  col = clamp(col, 0.0, 1.0);\n  col *= smoothstep(1.5, 0.5, length(pp));\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}