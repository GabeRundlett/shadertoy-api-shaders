{
    "Shader": {
        "info": {
            "date": "1611156735",
            "description": "Color cycling adaption of the beautiful shader https://www.shadertoy.com/view/XtVczV by Carandiru with added sound",
            "flags": 8,
            "hasliked": 0,
            "id": "wlVyWw",
            "likes": 2,
            "name": "Slightly eery beams ðŸ”Š",
            "published": 3,
            "tags": [
                "raymarching",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "blurryroots",
            "viewed": 10012
        },
        "renderpass": [
            {
                "code": "// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n// Adaption of https://www.shadertoy.com/view/XtVczV with cycling coloration.\n\nconst bool UsePostprocessing = true;\n\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n\n    float time = GetScaledTime(iTime);    \n    \n    vec2 uv = fragCoord/iResolution.xy;    \n    vec3 color = vec3(psin(iTime*0.324), pcos(iTime*0.1), ptan(iTime*0.01));\n    \t\n   \tfloat FOV = 1.25;    \n    vec2 remappedUV = uv *2.-1.; // Remap the space to -1. to 1.\n    remappedUV.x *= iResolution.x/iResolution.y;\n   \tvec3 ray = normalize(vec3(remappedUV, FOV));\n    \n    vec3 origin = vec3(psin(0.3*iTime+1337.0), pcos(0.2*iTime), -3.75);\n    float t = trace(origin, ray);\n    float expFog = Pi*psin(time) / (t*t* InvGold);\n    vec3 fc = vec3(expFog);\n    \n    if ( t < -0.98f ) {\n        color = 0.25-(0.5/t+color);\n        vec3 maincolor = pcos(-(fc+color)*Gold);\n        color = 1.618*mix(pcos(color) * maincolor, color * maincolor, pcos(time));\n        color += pcos(color) * maincolor;\n    }\n    else if (t < 0.) {\n        vec3 maincolor = pcos(-(fc+color)*Gold);\n        color = 1.618*mix(pcos(color) * maincolor, color * maincolor, pcos(time));\n    }\n    else {\n        color = vec3(InvGold, Silver, DimGold);\n    }\n    \n    // increase trippiness\n    const float minVisibilty = InvGold;\n    color = max(minVisibilty, ptan(psin(Silver*time)*PiHalf))-color;\n    \n    if (UsePostprocessing) {\n        color *= GetVignetteMask(uv, 23., 0.4);\n    }\n    \n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nconst float Pi = 355.0 / 113.0; // Thx Zu Chongzhi.\nconst float PiHalf = Pi / 2.0;\nconst float TwoPi = 2. * Pi;\nconst float Gold = (1.+sqrt(5.))/2.;\nconst float InvGold = 1./Gold;\nconst float DimGold  = InvGold*InvGold;\nconst float Silver = DimGold*DimGold;\nconst vec3 LUMA = vec3((1.-0.618)*0.6, 0.618, (1.-0.618)*0.4);\n\nfloat GetScaledTime(float rawTime) {\n    return rawTime*Pi;\n}\n\n// https://www.shadertoy.com/view/lsKSWR\nfloat GetVignetteMask(vec2 uv, float intensity, float extend) {\n    uv = uv * (1.0 - uv);\n    float mask = uv.x*uv.y * intensity;\n    return pow(mask, extend);\n}\n\nfloat getLuminance(vec3 rgb) {\n  return rgb.r * LUMA.r + rgb.g * LUMA.g + rgb.b * LUMA.b;\n}\n\n// Trig functions positive normalized.\n// Checkout https://www.desmos.com/calculator/tkqvncozq4 for a visualization of the approach.\n\nfloat psin(float x) {\n    return .5 * sin(x - PiHalf) + .5;\n}\nvec3 psin(vec3 x) {\n    return vec3(psin(x.r), psin(x.g), psin(x.b));\n}\n\nfloat pcos(float x) {\n    return .5 * sin(x) + .5;\n}\nvec3 pcos(vec3 x) {\n    return vec3(pcos(x.r), pcos(x.g), pcos(x.b));\n}\n\nfloat ptan(float x) {\n    return .87 * tan(x - Pi/2.3) + .5;\n}\nvec3 ptan(vec3 x) {\n    return vec3(ptan(x.r), ptan(x.g), ptan(x.b));\n}\n\n\n// Library from the original shader by https://www.shadertoy.com/user/Carandiru\nvoid pMod1(inout float p, float size) {\n    float halfsize = size*0.5;\n    p = mod(p + halfsize, size) - halfsize;\n}\n\nvoid pMod3(inout vec3 p, vec3 size) {\n    \n    p = mod(p - size*0.5, size) - size*0.5;\n}\n\nfloat sphere(vec3 p, float radius){\n    return length(p)-radius;\n\n}\n\n\nfloat map(vec3 p)\n{\n    vec3 q = p;\n    vec3 qa = p;\n    pMod3(q, vec3(0.8, 1., 0.23));\n    pMod3(qa, vec3(0.8, 1., 0.18));\n    pMod1(p.x, 1.);\n    \n    float s1 = sphere(p, 0.75); \n    float s2 = sphere(q, 0.5);              \n    float s3 = sphere(qa, 0.555);\n    \n    float df1 = min(min(s1, s2),s3); // Union\n\n    return df1;\n}\n\n\nfloat trace(vec3 origin, vec3 r) \n{\n  float t = 0.0;\n    for (int i = 0; i < 64; ++i) {\n        vec3 p = origin + r * t;\n        float d = map(p);\n        t += d*0.22;\n        }\n    return t;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nconst int l = 2;\nfloat s[l];\nfloat w[l];\n\nvec2 mainSound( int samp, float time )\n{\n    s[0] =\n        1.0 * sin(TwoPi*133.70*time)\n      + DimGold * cos(TwoPi*42.09*time - Pi)\n      ;\n    s[1] = sin(TwoPi*12.21*time - PiHalf) + sin(TwoPi*23.32*time) + cos(TwoPi*202.02*time + Pi);\n    \n    float t = GetScaledTime(time);\n    float decay = exp(Pi/5.-psin(t));\n\n    w[0] = decay;\n    w[1] = DimGold;\n    \n    float ts = 0.;\n    for (int i = 0; i < l; ++i) {\n        ts += w[i]*s[i];\n    }\n    ts /= float(l);\n\n    return vec2(ts);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}