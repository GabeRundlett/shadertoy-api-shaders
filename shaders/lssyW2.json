{
    "Shader": {
        "info": {
            "date": "1490024560",
            "description": "an experiment in voxel raycasting with varying voxel size. mouse goes through many possible variations. the define in line 5 makes you dizzy. 2d version\nby tsone [url]https://www.shadertoy.com/view/Xl2XRG[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "lssyW2",
            "likes": 10,
            "name": "voxel 3x3x3 fractal",
            "published": 3,
            "tags": [
                "voxel",
                "mengersponge"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 1097
        },
        "renderpass": [
            {
                "code": "#define rot(spin) mat2(cos(spin),-sin(spin),sin(spin),cos(spin))\n\nfloat time;\n\n//#define dizzy\n#define steps 500\n#define detail 4\n\n\n// ray box intersection by iq https://www.shadertoy.com/view/ld23DV\nvec4 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec4(-1.0);\n\n\tvec3 nor = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    // convert to ray space\n\n\treturn vec4( tN, nor );\n}\n\n/*\nwhat to fix:\n\"sign(dir)*0.001\" is wrong\n*/\n\nfloat map(vec3 p) {\n    p = mod(p,3.0);\n    int num = int(p.x)+int(p.y)*3+int(p.z)*9;\n    if(iMouse.x < 20.5) return float((int(time*5.0)*45354647)&1<<num)-0.5; //129928175\n    if(iMouse.x < 40.5) return float((129928175)&1<<num)-0.5; //129928175\n    return float(int((iMouse.x*123678.0+iMouse.y*321876.0))&1<<num)-0.5;\n    //return dot(p-1.0,p-1.0)-max(abs(p.x)+p.y,-p.y)*max(abs(p.y)+p.z,-p.z)*max(abs(p.z)+p.x,-p.x); // the pifometer change\n    //return -p.x-p.y-p.z+2.5;\n    //return -(dot(p-1.0,p-1.0)-1.0);\n}\n\n\n#define rotmat(spin) mat2(sin(spin),cos(spin),-cos(spin),sin(spin))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    time = iTime*0.2;\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    #ifdef dizzy\n    uv *= rot(0.5*(length(uv))*sin(time)+time*0.2);\n    #endif\n    \n    vec3 cam = vec3(cos(time)*3.0+1.5,1.5,1.5+sin(time)*3.0);\n    //cam.y = clamp(0.5+abs(fract(cam.z/6.0)-0.5)*6.0,1.5,2.5);\n    vec3 pos = cam;\n    vec3 dir = normalize(vec3(uv,-1.0));\n    \n    dir.xz *= rotmat(time);\n    \n    vec4 box = iBox(pos-1.5, dir, vec3(1.5));\n    if (abs(box.x) > 0.01) {\n    \tpos += dir*max(box.x,0.0)-box.yzw*0.00001;\n        \n        vec3 invdir = 1.0/abs(dir);\n        vec3 signdir = sign(dir);\n        vec3 floorpos = floor(pos);\n        vec3 mask = abs(box.yzw);\n\n        float dist = box.x;\n        vec3 localpos = pos;\n        vec3 localfloor = floorpos;\n        float stepsize = 1.0;\n        float count = 0.0;\n\t\tbool hit = true;\n        for (int i = 0; i < steps; i++) {\n            if (count > float(detail)||dist > 8.0) break;\n            bool len = map(localfloor)<0.0;\n\n            if((max(max(localfloor.x,localfloor.y),localfloor.z) > 2.5||min(min(localfloor.x,localfloor.y),localfloor.z) < -0.5)) {\n                if (count < 0.5) {\n                    hit = false;\n                    break;\n                } else {\n                    stepsize *= 3.0;\n                    count--;\n                    floorpos -= localfloor*stepsize/3.0-mask*signdir*stepsize;\n                    pos+= signdir*0.00001*mask;\n                    localpos = mod(pos/stepsize-signdir*mask,3.0)+signdir*mask;\n\n                    localfloor = floor(localpos);\n                }\n            } else\n            if (!len && count <= float(detail)) {\n\n                stepsize /= 3.0;\n                count++;\n                localpos = localpos*3.0-localfloor*3.0;\n                vec3 pos2d = floor(localpos)*(1.0-mask)+mask*(-sign(dir)+1.0);\n                localfloor = pos2d;\n                floorpos += localfloor*stepsize;\n            } else {\n\n\n                vec3 dists = abs((signdir*0.5+0.5)-(localpos-localfloor))*invdir;\n\n                float m = min(min(dists.x,dists.y),dists.z);\n\n                mask = step(dists,vec3(m));\n\n                dist += m*stepsize;\n                pos += m*dir*stepsize;\n                localpos += m*dir;\n                localfloor += mask*signdir;\n                floorpos += mask*signdir*stepsize;\n            }\n        }\n        if (dist < 7.9&&hit) {\n            fragColor = vec4(abs(.5+.5*mask), 1);\n        }\n    }\n    /*if (all(lessThan(fragCoord,vec2(50.0,50.0)))) {\n        \n        fragColor = vec4(1.0-num(fragCoord-vec2(37.5,22.5),20.0,int(1.0/iTimeDelta)));\n    }*/\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}