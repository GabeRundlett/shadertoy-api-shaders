{
    "Shader": {
        "info": {
            "date": "1462145859",
            "description": "This shader visualises the way a raymarcher works. The left side of the screen shows the depth (distance from the camera to FAR_PLANE), and the iterations (how many times the for loop in raymarch() runs to calculate that pixel).",
            "flags": 0,
            "hasliked": 0,
            "id": "XdtSWl",
            "likes": 1,
            "name": "Raymarcher Visualization",
            "published": 3,
            "tags": [
                "raymarch",
                "distance",
                "depth",
                "steps",
                "debug",
                "visual",
                "view"
            ],
            "usePreview": 0,
            "username": "jackdavenport",
            "viewed": 762
        },
        "renderpass": [
            {
                "code": "#define MAX_ITERATIONS 128\n#define MIN_DISTANCE .001\n#define FAR_PLANE    64.\n\nstruct Ray { vec3 ori; vec3 dir;  };\nstruct Hit { float dst; int iter; };\n\nfloat dstSphere(vec3 p, vec3 pos, float r) {\n \n    return length(pos - p) - r;\n    \n}\n\nfloat dstFloor(vec3 p, float y) {\n \n    return p.y - y;\n    \n}\n\n//Smooth Minimum by iq\n//Source: https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat dstScene(vec3 p) {\n    \n    float dst = dstFloor(p, -1.);\n    float sphDst = dstSphere(p, vec3(0.), 1.);\n    sphDst = smin(sphDst, dstSphere(p, vec3(1.5 * sin(iTime),.5,-.5), .5), .1);\n    sphDst = smin(sphDst, dstSphere(p, vec3(-1.5* sin(iTime),.25,-.5), .5), .1);\n    \n    dst = min(dst, sphDst);\n    return dst;\n    \n}\n\nHit raymarch(Ray ray) {\n \n    float d  = 0.;\n    int iter = 0;\n    \n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n     \n        d += dstScene(ray.ori + ray.dir * d) * .75;\n        \n        if(d <= MIN_DISTANCE || d > FAR_PLANE) {\n         \n            iter = i;\n            break;\n            \n        }\n        \n    }\n    \n    return Hit(d,iter);\n    \n}\n\nvec3 shade(Ray ray, vec2 fragCoord) {\n \n    Hit scn = raymarch(ray);\n    float x = iMouse.x / iResolution.x;\n    if(iMouse.x == 0.) x = .5;\n    \n    vec3 col = vec3(0.);\n    \n    if((fragCoord.x / iResolution.x) <= x) {\n        \n        col = vec3(scn.dst) / FAR_PLANE;\n        \n    } else {\n\n        col = vec3(scn.iter) / float(MAX_ITERATIONS);\n        \n    }\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ori = vec3(0.,0.,-3.);\n    vec3 dir = vec3(uv, 1.);\n    \n\tfragColor = vec4(shade(Ray(ori,dir),fragCoord),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}