{
    "Shader": {
        "info": {
            "date": "1623567923",
            "description": "I tried adding a smooth minimum to the voronoi distance and got a neat result to play around with.\nThis is reminding me very much of Shane's shaders...",
            "flags": 0,
            "hasliked": 0,
            "id": "stBGzm",
            "likes": 26,
            "name": "Smooth Voronoi Experiment",
            "published": 3,
            "tags": [
                "voronoi",
                "experiment",
                "smooth"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 619
        },
        "renderpass": [
            {
                "code": "// Alternative by iq suggested by Shane\n// Its associative and commutative\n// Associative: sminExp(a, sminExp(b, c, k), k) = sminExp(sminExp(a, b, k), c, k)\n// Commutative: sminExp(a, b, k) = sminExp(b, a, k)\nfloat sminExp(in float a, in float b, in float k) {\n    float res = exp(-k * a) + exp(-k * b);\n    return -log(res) / k;\n}\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\n// Random cycling points\nvec2 getPoint(in vec2 cell) {\n    float freq = Hash11(dot(cell, vec2(393.84, 673.48))) * 3.0 + 1.0;\n    float phase = Hash11(dot(cell, vec2(348.46, 183.37)));\n    float amp = Hash11(dot(cell, vec2(275.35, 741.69)));\n\n    float t = iTime * freq + phase;\n    return cell + 0.5 + 0.5 * vec2(cos(t), sin(t)) * amp;\n}\n\nfloat smoothVoronoi(in vec2 p, in float k) {\n    // Get closest point\n    vec2 cell = floor(p), closest = getPoint(cell);\n    float minDist = length(p - closest);\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            if (i == 0 && j == 0) continue;\n            vec2 curCell = cell + vec2(i, j), curPoint = getPoint(curCell);\n            float dist = length(p - curPoint);\n            if (dist < minDist) {\n                closest = curPoint;\n                minDist = dist;\n            }\n        }\n    }\n\n    // Get closest border (should be doing 5x5 search but it doesn't affect this look)\n    cell = floor(closest);\n    vec2 p1 = getPoint(cell + 1.0);\n    float dist = dot(p - 0.5 * (closest + p1), normalize(closest - p1));\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            if ((i == 0 && j == 0) || (i == 1 && j == 1)) continue;\n            vec2 curPoint = getPoint(cell + vec2(i, j));\n            dist = sminExp(dist, dot(p - 0.5 * (closest + curPoint), normalize(closest - curPoint)), k);\n        }\n    }\n\n    return dist;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 3.0 + 0.5 * iTime;\n    float unit = 6.0 / iResolution.y;\n\n    float k = 13.0; // How much the tiles are packed\n    float voro = smoothVoronoi(uv, k);\n\n    float dx = (smoothVoronoi(uv + vec2(0.001, 0.0), k) - voro) / 0.001;\n    float dy = (smoothVoronoi(uv + vec2(0.0, 0.001), k) - voro) / 0.001;\n    vec3 grad = normalize(vec3(dx, dy, 1.0));\n\n    fragColor = vec4(0.0);\n\n    fragColor.gb += 0.5 + 0.5 * grad.xy;\n    fragColor.r += grad.z;\n\n    fragColor.rgb -= smoothstep(unit, 0.0, voro);\n    fragColor.rgb += pow(grad.z, 10.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}