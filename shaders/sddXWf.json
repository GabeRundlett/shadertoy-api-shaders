{
    "Shader": {
        "info": {
            "date": "1634117286",
            "description": "Free entry. Have fun!",
            "flags": 0,
            "hasliked": 0,
            "id": "sddXWf",
            "likes": 7,
            "name": "Perlin Coaster Ride",
            "published": 3,
            "tags": [
                "procedural",
                "perlin",
                "headacheinducing"
            ],
            "usePreview": 0,
            "username": "42yeah",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "#define FAR 200.0\n#define EPSILON 1e-3\n#define ID(func, nid) dist = func(pos); if (dist < closest) { closest = dist; id = nid; }\n\nvec2 rand2d(vec2 uv) {\n    return fract(sin(vec2(dot(uv, vec2(12.34, 45.67)),\n        dot(uv, vec2(78.9, 3.14)))) * 12345.67) * 2.0 - 1.0;\n}\n\nfloat perlin(vec2 uv) {\n    vec2 u = floor(uv);\n    vec2 f = fract(uv);\n    vec2 s = smoothstep(0.0, 1.0, f);\n    \n    vec2 a = rand2d(u);\n    vec2 b = rand2d(u + vec2(1.0, 0.0));\n    vec2 c = rand2d(u + vec2(0.0, 1.0));\n    vec2 d = rand2d(u + vec2(1.0, 1.0));\n    \n    return mix(mix(dot(a, f), dot(b, f - vec2(1.0, 0.0)), s.x),\n        mix(dot(c, f - vec2(0.0, 1.0)), dot(d, f - vec2(1.0, 1.0)), s.x), s.y);\n}\n\nfloat sol(vec3 pos) {\n    vec2 uv = pos.xz;\n    return pos.y - perlin(uv);\n}\n\nfloat ball(vec3 pos) {\n    return length(pos) - 0.5;\n}\n\nvec2 map(vec3 pos) {\n    float closest = 1000.0;\n    float id = -1.0;\n    float dist = 0.0;\n\n    ID(sol, 0.5);\n\n    return vec2(closest, id);\n}\n\nvec3 objectColor(vec3 pos, float id) {\n    if (id > 0.0 && id < 1.0) {\n        vec2 u = mod(floor(pos.xz), 2.0);\n        vec3 color = max(vec3(abs(u.x - u.y)), 0.8);\n        \n        return color;\n    }\n    if (id > 1.0 && id < 2.0) {\n        return vec3(0.5, 1.0, 0.0);\n    }\n    return vec3(1.0, 0.0, 0.0);\n}\n\nvec2 trace(vec3 ro, vec3 rd) {\n    float depth = 0.0;\n    float id = -1.0;\n    for (int i = 0; i < 800; i++) {\n        vec2 info = map(ro + depth * rd);\n        if (info.x < EPSILON) {\n            id = info.y;\n            break;\n        }\n        depth += info.x;\n        if (depth > FAR) {\n            break;\n        }\n    }\n    return vec2(depth, id);\n}\n\nvec3 getNormal(vec3 pos) {\n    float mapped = map(pos).x;\n    \n    return normalize(vec3(\n        mapped - map(pos - vec3(EPSILON, 0.0, 0.0)).x,\n        mapped - map(pos - vec3(0.0, EPSILON, 0.0)).x,\n        mapped - map(pos - vec3(0.0, 0.0, EPSILON)).x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    \n    vec3 ro = vec3(0.0, perlin(vec2(0.0, iTime)) + 0.2, iTime);\n    vec3 center = ro + vec3(0.0, perlin(vec2(0.0, ro.z + 1.0)), 1.0);\n    vec3 worldUp = getNormal(vec3(ro.x, ro.y - 0.2, ro.z));\n//    vec3 center = vec3(0.0, 0.1, 0.0);\n    vec3 front = normalize(center - ro);\n    vec3 right = normalize(cross(front, worldUp));\n    vec3 up = normalize(cross(right, front));\n    mat4 lookAt = mat4(\n        vec4(right, 0.0),\n        vec4(up, 0.0),\n        vec4(front, 0.0),\n        vec4(0.0, 0.0, 0.0, 1.0));\n    vec3 rd = vec3(lookAt * normalize(vec4(uv, 1.0, 1.0)));\n    \n    vec2 info = trace(ro, rd);\n    \n    vec3 sky = mix(vec3(0.78, 0.9, 1.0), vec3(1.0), 1.0 - uv.y);\n    \n    if (info.y > 0.0) {\n        vec3 pos = ro + info.x * rd;\n        vec3 color = objectColor(pos, info.y);\n        \n        // Lighting calculations\n        vec3 norm = getNormal(pos);\n        \n        // World lights\n        vec3 ambient = 0.1 * vec3(1.0);\n        vec3 skyColor = clamp(dot(norm, vec3(0.0, 1.0, 0.0)), 0.0, 1.0) * vec3(1.0);\n        // Light 1\n         \n        fragColor = vec4(\n            (ambient + skyColor) * color, \n            1.0);\n        \n        // Falloff begins at depth > 5 and goes all the way to 10.0\n        float falloff = min(max(info.x - 5.0, 0.0) / 5.0, 1.0);\n        fragColor = mix(fragColor, vec4(sky, 1.0), falloff);\n    } else {\n        fragColor = vec4(sky, 1.0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}