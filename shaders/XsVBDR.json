{
    "Shader": {
        "info": {
            "date": "1528331165",
            "description": "MouseX = move divider\nMouseY = blur radius\n\nAdding blue noise to \"Blur with only one pixel read\" (https://www.shadertoy.com/view/XtGGzz)\nBlue noise on left (using a texture), white noise on right (not using a texture)",
            "flags": 0,
            "hasliked": 0,
            "id": "XsVBDR",
            "likes": 50,
            "name": "Blue Noise One Sample Blur",
            "published": 3,
            "tags": [
                "blur",
                "bluenoise",
                "stochastic"
            ],
            "usePreview": 1,
            "username": "demofox",
            "viewed": 6080
        },
        "renderpass": [
            {
                "code": "#define ANIMATE_RADIUS 0\n#define MOUSE_CONTROLS_RADIUS 1\n#define ANIMATE_NOISE 1\n#define SAMPLE_COUNT 1 // 1,2,3 or 4\n#define GAUSSIAN_BLUR 0 // https://twitter.com/paniq/status/1004769506642800642\n#define GAUSSIAN_BLUR_K 2.0 // lower values tighten the radius\n\nfloat baseRadius = 15.0;\n\n//----------------------------------------------------------------------------------------\n// X,Y are \"uv\" coordinates and Z is the frame number (integer)\n// from \"Hash without Sine\"\n// https://www.shadertoy.com/view/4djSRW\n//  1 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n    #if ANIMATE_NOISE\n    p3.z += float(iFrame%256)*4.0;\n    #endif\n\tp3 = fract(p3 * vec3(443.897, 441.423, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvoid blueNoise(vec2 p, out vec4 blue1, out vec4 blue2)\n{\n    blue1 = texture(iChannel1, p / vec2(1024.0));\n    blue2 = texture(iChannel1, (p+vec2(137.0, 189.0)) / vec2(1024.0));\n    \n    #if ANIMATE_NOISE\n    const float c_goldenRatioConjugate = 0.61803398875;\n    blue1 = fract(blue1 + float(iFrame%256) * c_goldenRatioConjugate);\n    blue2 = fract(blue2 + float(iFrame%256) * c_goldenRatioConjugate);\n    #endif        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    #if ANIMATE_RADIUS\n    float blurRadius = baseRadius * (0.53 + 0.47*sin(iTime*1.23));\n    #else\n    float blurRadius = baseRadius;\n    #endif\n    \n\t#if MOUSE_CONTROLS_RADIUS\n    if (iMouse.z > 0.0)\n        blurRadius *= 4.0*iMouse.y/iResolution.y;\n    #endif\n    \n    float divider = 0.5;\n\tvec2 uv = fragCoord / iResolution.xy;\n    \n    if (iMouse.z > 0.0)\n        divider = iMouse.x/iResolution.x;\n    \n    \n    vec4 blueNoise1;\n    vec4 blueNoise2;\n    blueNoise(fragCoord, blueNoise1, blueNoise2);\n    \n    vec2 whiteNoiseUV = uv;\n    \n    vec3 result = vec3(0.0f, 0.0f, 0.0f);\n    \n    for (int i = 0; i < SAMPLE_COUNT; ++i)\n    {\n        vec2 whiteNoiseRand = hash23(vec3(whiteNoiseUV.xy, float(i)));\n        whiteNoiseUV = whiteNoiseRand;\n        \n        vec2 blueNoiseRand;\n        if (i == 0)\n            blueNoiseRand = blueNoise1.xy;\n        else if(i == 1)\n            blueNoiseRand = blueNoise1.zw;\n        else if(i == 2)\n            blueNoiseRand = blueNoise2.xy;\n        else if(i == 3)\n            blueNoiseRand = blueNoise2.zw;            \n    \n\t\tvec2 r= (uv.x > divider) ? whiteNoiseRand : blueNoiseRand;\n            \n    \tr.x*=6.28305308;\n        \n        #if GAUSSIAN_BLUR\n        // box-muller transform to get gaussian distributed sample points in the circle\n        vec2 cr = vec2(sin(r.x),cos(r.x))*sqrt(-GAUSSIAN_BLUR_K * log(r.y));\n        #else\n        // uniform sample the circle\n    \tvec2 cr = vec2(sin(r.x),cos(r.x))*sqrt(r.y);\n        #endif\n        \n        vec3 color = texture(iChannel0,\n            uv+cr*(blurRadius/iResolution.xy)\n        ).rgb;\n\n        if (abs(uv.x - divider) < 0.001)\n            color = vec3(0.0, 1.0, 0.0);    \n        \n        // average the samples as we get em\n        // https://blog.demofox.org/2016/08/23/incremental-averaging/\n        result = mix(result, color, 1.0 / float(i+1));\n    }\n    \n\tfragColor = vec4(result, 1.0f);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}