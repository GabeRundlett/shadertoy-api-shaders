{
    "Shader": {
        "info": {
            "date": "1571660384",
            "description": "Left side : color gradient  black / random color (let's say unpredictable). Right side : complementary color. Separation moves periodically, with zero speed on the boundary. Color combined with a new texture every second.",
            "flags": 0,
            "hasliked": 0,
            "id": "WscXR7",
            "likes": 1,
            "name": "clapet coloré aléatoire",
            "published": 3,
            "tags": [
                "color",
                "random",
                "impredictable",
                "periodical"
            ],
            "usePreview": 0,
            "username": "adrenoide",
            "viewed": 364
        },
        "renderpass": [
            {
                "code": "const float pi = 4. * atan(1.);\n\n// Calcul itératif d'une puissance (exposant entier naturel)\nfloat puiss (float x, int n) {\n    float res = 1.;\n    for (int k=0; k<n; k++) {\n    \tres *= x;\n    }\n    return res;\n}\n\n// une fonction 1-périodique qui monte de 0 à 1 puis redescend \n// symétriquement, avec dérivée nulle en 0 et en 1.\nfloat phi(float t) {\n    float tmp = abs(sin(pi*t));\n    \n    return puiss (tmp, 4);\n}\n\n\n// Renvoie un vec3 imprévisible dans [0,1[^3\n// qu'on peut interpréter comme une couleur aléatoire\nvec3 aleaC(float t) {\n    // trois couples de coeffts assez quelconques\n    float ar = 1.0817, br = 1.1461;\n    float ag = 0.96541651, bg = -0.98719871;\n    float ab = 1.0015413, bb = 1.42312;\n    // on démarre l'itération avec un triplet\n    // dont chaque composante est un même entier.\n    // l'intérêt : lorsqu'on évalue aleaC(iTime),\n    // le résultat ne change pas tout le temps,\n    // mais chaque seconde\n    vec3 u = vec3 (floor(t));\n    for (int k=0; k < 100; k++) {\n        u.x = ar * u.x + br;\n        u.y = ag * u.y + bg;\n        u.z = ab * u.z + bb;\n    }\n    return fract(u);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord / iResolution.x;\n    vec4 col = vec4 (mix (vec3(0.), aleaC(iTime), sqrt(p.x)), 1.);\n    if (p.x < phi(iTime)) {\n        col = 1. - col;\n    }\n    switch (int(floor(iTime)) % 4) {\n        case 0:\n        \tfragColor = col * texture(iChannel0, p + vec2(iTime / 2.,0.));\n        break;\n        case 1:\n        \tfragColor = col * texture(iChannel1, p + vec2(iTime / 2.,0.));\n        break;\n        case 2:\n        \tfragColor = col * texture(iChannel2, p + vec2(iTime / 2.,0.));\n        break;\n        case 3:\n        \tfragColor = col * texture(iChannel3, p + vec2(iTime / 2.,0.));\n        break;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}