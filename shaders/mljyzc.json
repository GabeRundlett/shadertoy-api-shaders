{
    "Shader": {
        "info": {
            "date": "1692125591",
            "description": "Experimenting with how to create FXAA using an 3x3 edge detection convolution and what I think works? no idea if this is correct",
            "flags": 32,
            "hasliked": 0,
            "id": "mljyzc",
            "likes": 1,
            "name": "FXAAÕè",
            "published": 3,
            "tags": [
                "experiment",
                "antialiasing"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, in vec2 U )\n{\n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n\n    mat3x3 h = mat3x3(\n        .75, 0, -.75,\n         1 , 0,  -1,\n        .75, 0, -.75\n    )*.5;\n\n    vec2 normal = vec2(0);\n\n    float div = 0.;\n    for (int x = 0; x < 3; x++){\n        for (int y = 0; y < 3; y++){\n            normal.x += texture(iChannel0, (U-.5 + vec2(x, y))/r).a * h[y][x];\n        }\n    }\n\n    div = 0.;\n    for (int x = 0; x < 3; x++){\n        for (int y = 0; y < 3; y++){\n            normal.y += texture(iChannel0, (U-.5 + vec2(x, y))/r).a * h[x][y];\n        }\n    }\n\n\n    vec2 tangent = normal * mat2(0, 1, -1, 0);\n\n\n    \n    O = vec4(0);\n    div = 0.;\n    float samples = 3.;\n    float size = 1.;\n    for (float x = -size; x <= size;){\n        float c = -x*x + 1.;\n        x += size/samples;\n        div += c;\n        O += c * texture(iChannel0, (U + tangent*x)/r);\n    }\n\n    O /= div;\n\n    //O*=0.; O.xy = normal;\n\n\n    if (fract(iTime*.2) < .3){\n        O = (O-texture(iChannel0, U/r))*3.;\n    } else if (fract(iTime*.2) < .5) {\n        O = texture(iChannel0, U/r);\n    }\n    \n    O = pow(O, vec4(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = U/iResolution.y * (sin(iTime*.1) * .5 + .6);\n\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float a = length(mod(uv*10., vec2(2))-1.)>.8?0.:1.;\n    col *= a;\n    \n    O = vec4(col,a);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}