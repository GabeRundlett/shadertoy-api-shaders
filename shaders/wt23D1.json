{
    "Shader": {
        "info": {
            "date": "1559883795",
            "description": "Randomized breadth first search with random walk of light propagation.",
            "flags": 32,
            "hasliked": 0,
            "id": "wt23D1",
            "likes": 4,
            "name": "BFS Light Propagation",
            "published": 3,
            "tags": [
                "algorithms",
                "bfs"
            ],
            "usePreview": 0,
            "username": "emh",
            "viewed": 631
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float m = length(iResolution.xy);\n    vec4 t = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    vec4 t2 = texture(iChannel1, fragCoord.xy / iResolution.xy);\n    vec4 c = vec4(0.0);\n    \n    c.rgb = hsv2rgb(vec3(t.w, 1.0, 1.0));\n    c *= 2.5 * abs(t.z);\n    \n    //fragColor = t2;\n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int dim = 1;\nconst float spawnSpeed = 5.0;\nconst float lifeTime = 500.0;\nconst float expandSpeed = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 init = vec4(0.0);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 v = texture(iChannel0, uv);\n    \n    float time = float(iFrame);\n    \n    int iv = int(floor(iTime * spawnSpeed));\n    float x = rand(vec2(13.765845, 29.3467547) + 1.13 * vec2(iv, iv));\n    float y = rand(vec2(17.457645, 137.4565) + 2.97 * vec2(iv, iv));\n    vec2 xy = abs(vec2(x, y));\n    ivec2 ixy = ivec2(floor(xy * iResolution.xy));\n    \n    float myAge = time - v.x;\n    \n    if (ivec2(fragCoord) == ixy) {\n        v.x = time;\n        v.y = 0.0;\n        v.z = 1.0;\n        v.w = rand(uv);\n        myAge = 0.0;\n    } else {\n        int dim2 = 2 * dim + 1;\n        int maxi = dim2 * dim2;\n        int starti = int(floor(rand(uv + vec2(1.13 * iTime, 2.27 * iTime)) * float(maxi)));\n        \n        for (int i = starti; i <= starti + maxi; i++) {\n            int dx = (i % maxi) % dim2 - dim;\n            int dy = (i % maxi) / dim2 - dim;\n            vec2 uv = (fragCoord + vec2(dx, dy)) / iResolution.xy;\n            vec4 t = texture(iChannel0, uv);\n            \n            float fdx = float(dx);\n            float fdy = float(dy);\n            float dd = length(vec2(fdx, fdy));\n            float d = t.y + dd;\n            float age = time - t.x;\n            \n            vec4 v2 = v;\n            float h = 10.0 * (snoise(vec3(uv * 10.0, iTime)) + 0.25);\n            d += dd * h;\n            \n            float distPerTime = d / (1.0 + age);\n            \n            v2.y = d;\n            float ddiff = v2.y - t.y;\n            float decay = pow(0.99, ddiff);\n            v2.z = t.z * decay;\n            v2.z = max(0.0, v2.z);\n            if (rand(uv + iTime) > 0.9999) {\n                v2.z = 1.0;\n            }\n            \n            bool expandCond = distPerTime <= expandSpeed * 2.0 * float(dim);\n            \n            if (t.x >= 1.0 &&\n                v.x != t.x &&\n                t.z >= 0.0 &&\n                (v.z <= 0.0 || myAge >= 1.0 ) &&\n                expandCond) {\n                v.x = t.x;\n                v.y = v2.y;\n                v.z = v2.z;\n                v.w = t.w;\n            } else if (v.x == t.x && v.y > t.y) {\n                v.z = v2.z;\n            } else if (t.x >= 1.0 && v.x != t.x && expandCond) {\n                v.z = v2.z;\n            }\n            \n        }\n        \n        if (myAge >= lifeTime) {\n            v.z *= pow(0.99995, myAge - lifeTime);\n            if (v.z <= 0.01) {\n                v = vec4(0.0);\n            }\n        }\n    }\n    \n    fragColor = v;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  // Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\n\n\n\n\nfloat rand(vec2 co){\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\n//http://gamedev.stackexchange.com/questions/59797/glsl-shader-change-hue-saturation-brightness\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 init = vec4(0.0);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 v = texture(iChannel0, uv);\n    vec4 w = texture(iChannel1, uv);\n    \n    float time = float(iFrame);\n    \n    vec4 c = vec4(0.0);\n    //c.rgb = hsv2rgb(vec3(v.w, 1.0, 1.0));\n    //c *= abs(v.z);\n    \n    float hsv1 = v.w;\n    float hsv2 = w.w;\n    float hsv3 = mix(hsv1, hsv2, 0.995);\n    \n    if (hsv2 <= 0.0) {\n        hsv3 = hsv1;\n    }\n    \n    //v.z = v.z + w.z;\n    //c.rgb = mix(c.rgb, w.rgb, 0.9);\n    c.rgb = hsv2rgb(vec3(hsv3, 1.0, 1.0));\n    c *= abs(v.z);\n   \tc.w = hsv3;\n    \n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}