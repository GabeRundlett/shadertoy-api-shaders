{
    "Shader": {
        "info": {
            "date": "1479682235",
            "description": "Testing out frame differencing here. To make it work well you likely need to quickly hit pause and play again on the video in Buf A. The will set the video frames apart in time so that the optical flow can be found. ",
            "flags": 32,
            "hasliked": 0,
            "id": "XtdXWN",
            "likes": 12,
            "name": "optical flow displacement",
            "published": 3,
            "tags": [
                "opticalflowframedifferencingdisplacement"
            ],
            "usePreview": 0,
            "username": "aferriss",
            "viewed": 2790
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel1, uv  );\n    \n    //flow visualization\n    //fragColor = texture(iChannel0, uv  );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//treat this as the last frame by quickly hitting puase and play on iChannel0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//calc flow here and add in some trails from previous frames\nconst vec2 scale = vec2(1.0,1.0);\nconst float force = 0.6;\nconst float fade = 0.99;\nconst float threshold = 0.05;\nconst float step = 5.0;\n\nfloat sumRgb(vec3 rgb){\n    return (rgb.r + rgb.g + rgb.b)/3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    \n    vec2 xOffset = vec2(1.0 / iResolution.x,0.)*step;\n\tvec2 yOffset = vec2(0.,1.0 / iResolution.y)*step;\n    \n\tvec4 diff = texture(iChannel0, uv) - texture(iChannel1, uv);\n    \n    vec4 xGradient = texture(iChannel0, uv + xOffset) - texture(iChannel0, uv - xOffset);\n    vec4 yGradient = texture(iChannel0, uv + yOffset) - texture(iChannel0, uv - yOffset);\n\tvec4 mag = sqrt((xGradient * xGradient) + (yGradient * yGradient));\n    vec4 vx = diff * (xGradient / mag);\n    vec4 vy = diff * (yGradient / mag);\n    \n    float xAvg = sumRgb(vx.rgb)*force;\n    float yAvg = sumRgb(vy.rgb)*force;\n    vec2 flow = vec2(xAvg, yAvg);\n    \n    //get rid of flow below a certain length\n    float strength = length(flow);\n    if(strength * threshold > 0.0){\n        if(strength < threshold){\n        \tflow = vec2(0.0);\n        } else {\n        \tstrength = (strength - threshold) / (1.0 - threshold);\n            flow = normalize(flow) * vec2(strength);\n        }\n    }\n    \n    vec4 last = texture(iChannel2, uv);\n    last *= fade;\n    \n    fragColor = vec4(flow, 0.0,1.0) + last;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 amt = 1.0 / iResolution.xy;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 flow = texture(iChannel0,uv).rg;\n    vec2 offset = vec2(flow.x, flow.y)*amt;\n    vec2 coord = offset+uv;\n    \n    if(iFrame < 10 || iMouse.z > 0.0 || length(flow.rg)<0.1){\n       fragColor = texture(iChannel2, uv);\n    } else{\n       fragColor = texture(iChannel1, coord  );\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}