{
    "Shader": {
        "info": {
            "date": "1716117574",
            "description": "Explicit solutions for 1D multiple scatering.\nYou can move sliders to change parameters.\nPlots:\nRed   - downward intensity.\nGreen - upward intensity.\nShaded - diffuse part.",
            "flags": 32,
            "hasliked": 0,
            "id": "l3t3z8",
            "likes": 4,
            "name": "1D multiple scattering",
            "published": 3,
            "tags": [
                "scattering"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Explicit solutions for 1D multiple scatering (\"two-stream equations\n// of radiative transfer\"). Taken almost entirely from:\n//     Craig F. Bohren; Multiple scattering of light and some of its observable consequences. Am. J. Phys. 1 June 1987; 55 (6): 524â€“533. https://doi.org/10.1119/1.15109\n//     https://web.gps.caltech.edu/~vijay/GRC/Papers/bohren-87.pdf\n// The paper is short and does a nice job of building intuition with\n// minimal mathematical machinery. It doesn't present the solution for\n// the general case (perhaps as to not detract from clarity, since\n// it focuses on a few illustrative special cases), so here it is.\n// No attempt is made to make the code numerically non-problematic.\n\n// You can move sliders to change parameters.\n// Plots:\n//     Red    - downward intensity.\n//     Green  - upward intensity.\n//     Shaded - diffuse part.\n\n// The model is as follows:\n//\n//   |       ^\n//   |       |   vacuum\n//   | X   Y |  \n//   V       |\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ t=0\n// ``|```````^````````````````````````````````````````\n// ``|```````|```medium:`single-scattering`albedo`=`w`\n// ``|```````|```````````anisotropy`parameter`````=`g`\n// ``V```````|````````````````````````````````````````\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ t=T\n//   |       ^\n//   |       |   vacuum\n//   |       |\n//   V       |\n// __________________________________________________ reflector (albedo=a) \n// //////////////////////////////////////////////////\n//\n// We parametrize the position inside the slab by the optical depth,\n// not geometric depth, and calculate X(t) and Y(t) - downward and upward\n// intensities, respectively. The equations are (eq. (8), (9) from paper):\n//     X'=-X+w*(1+g)/2*X+w*(1-g)/2*Y\n//     Y'=+Y-w*(1+g)/2*Y-w*(1-g)/2*X\n// Here, w is single-scattering albedo, and g is the anisotropy`parameter.\n// Since in 1D there are only 2 directions, the phase function is\n// entirely characterized by g.\n// The boundary conditions are:\n//     X(0)=1\n//     Y(T)=a*X(T)\n// Of additional interest are unscattered and scattered (diffuse)\n// portions the light. The unscattered part is given by\n//     Xu'=-Xu\n//     Yu'=+Yu\n// with the same boundary conditions, which yields\n//     Xu=exp(-t)\n//     Yu=a*exp(t-2*T)\n// The diffuse part is\n//     Xd=X-Xu\n//     Yd=Y-Yu\n\n//==============================================================================\n\n// Version with t=0 is at reflector, and incoming (downward)\n// intensity at reflector X(0)=1.\nvec2 f(float w,float g,float a,float t)\n{\n    // We use cosh/sinh formulation, but this might\n    // be as well written with a plain exp.\n    float K=sqrt((1.0-w)*(1.0-w*g));\n    float C=cosh(K*t),S=sinh(K*t);\n    return vec2(\n          C+(w*(a+g-a*g+1.0)-2.0)/(2.0*K)*S,\n        a*C-(a*(w*g+w-2.0)-w*g+w)/(2.0*K)*S);\n}\n\n// Version with t=0 is the top of the slab, and\n// incoming (downward) intensity at top X(0)=1.\nvec2 F(float w,float g,float a,float T,float t)\n{\n    return f(w,g,a,t-T)/f(w,g,a,-T).x;\n}\n\n// As noted in paper (eq. (27), etc.) the above converges,\n// for T->inf, to\n//     X=  exp(-K*t)\n//     Y=R*exp(-K*t)\n// where\n//     K=sqrt((1.0-w)*(1.0-w*g))\n//     R=(sqrt(1-w*g)-sqrt(1-w))/(sqrt(1-w*g)+sqrt(1-w))\n// Specifically, R is the albedo of the slab: R=Y(0)/X(0).\n// Notably this does not depend on either T or a.\n\n// Unscattered and diffuse components, as discussed above.\nvec2 Fu(float w,float g,float a,float T,float t)\n{\n    return vec2(exp(-t),a*exp(t-2.0*T));\n}\n\nvec2 Fd(float w,float g,float a,float T,float t)\n{\n    return F(w,g,a,T,t)-Fu(w,g,a,T,t);\n}\n\n//==============================================================================\n\nvec3 plot(vec3 bg,vec3 fg,float x,bool border)\n{\n    float a=smoothstep(2.5*fwidth(x),0.0,abs(x));\n    if(border) fg*=a;\n    return mix(bg,fg,a);\n}\n\nfloat letter(int k,vec2 p)\n{\n    k^=240;\n    if(clamp(p,0.0,1.0)!=p) return 0.0;\n    return smoothstep(0.1,1.0,texture(iChannel1,(vec2(k&15,k>>4)+p)/16.0).x);\n}\n\nvec3 letter(int k,vec2 p,vec3 bg,vec3 fg,bool border)\n{\n    float a=letter(k,p);\n    if(border) fg*=a;\n    return mix(bg,fg,a);\n}\n\nvec3 print_int(int n,int d,vec2 p,vec2 k,vec3 bg,vec3 fg,bool border)\n{\n    int b=1;\n    for(int i=0;i<d;++i)\n    {\n        bg=letter(48+n/b%10,p-k*vec2(d-i-1,0),bg,fg,border);\n        b*=10;\n    }\n    return bg;\n}\n\n//==============================================================================\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec3 col=vec3(0.5);\n    vec4 C=texture(iChannel0,vec2(0.5)/iResolution.xy);\n    float h=1.0/14.0,D=4.0*h,W=1.0-D;\n    col=mix(col,vec3(0.375),step(W,uv.x));\n    float w=C.x*(2.0-C.x);\n    float g=2.0*C.y-1.0;\n    float a=C.z;\n    float T=99.999*C.w*exp(C.w-1.0);\n    if(uv.x<W)\n    {\n        float t=(1.0-uv.y)*T;\n        vec2 xy=F(w,g,a,T,t);\n        vec2 d=Fd(w,g,a,T,t);\n        float x=uv.x/W;\n        col=mix(col,vec3(0.7,0.2,0.2),0.25*smoothstep(1.5*fwidth(x-d.x),0.0,x-d.x));\n        col=mix(col,vec3(0.2,0.7,0.2),0.25*smoothstep(1.5*fwidth(x-d.y),0.0,x-d.y));\n        col=plot(col,vec3(0.7,0.2,0.2),x-xy.x,true);\n        col=plot(col,vec3(0.2,0.7,0.2),x-xy.y,true);\n    }\n    else\n    {\n        vec2 s=vec2(0.75,1)*h,k=vec2(0.5,1);\n        vec2 p=(uv-vec2(W,0))/s;\n        vec3 fg=vec3(0.5,0.8,0.5);\n        vec3 c=vec3(0.8);\n        float L=2.5*k.x,H=D/s.x;\n        if(p.x>L&&mod(p.y,2.0)>1.0&&p.y<8.0)\n        {\n            col-=0.125;\n            col+=vec3(0.1,0.25,0.1)*step((p.x-L)/(H-L),C[3-int(p.y/2.0)]);\n        }\n        col=letter(119,p-k*vec2(0,7),col,fg,true);\n        col=letter(61 ,p-k*vec2(1,7),col,fg,true);\n        col=print_int(min(int(round(1e5*w)),99999),6,p-k*vec2(3,7),k,col,c,true);\n        col=letter(46 ,p-k*vec2(3.5,7),col,c,true);\n        col=letter(103,p-k*vec2(0,5),col,fg,true);\n        col=letter(61 ,p-k*vec2(1,5),col,fg,true);\n        col=letter(g<0.0?45:43,p-k*vec2(2,5),col,c,true);\n        col=print_int(min(int(round(1e5*abs(g))),99999),6,p-k*vec2(3,5),k,col,c,true);\n        col=letter(46 ,p-k*vec2(3.5,5),col,c,true);\n        col=letter(97 ,p-k*vec2(0,3),col,fg,true);\n        col=print_int(min(int(round(1e5*a)),99999),6,p-k*vec2(3,3),k,col,c,true);\n        col=letter(46 ,p-k*vec2(3.5,3),col,c,true);\n        col=letter(61 ,p-k*vec2(1,3),col,fg,true);\n        col=letter(84 ,p-k*vec2(0,1),col,fg,true);\n        col=letter(61 ,p-k*vec2(1,1),col,fg,true);\n        col=print_int(min(int(round(1e5*T)),9999999),7,p-k*vec2(2,1),k,col,c,true);\n        col=letter(46 ,p-k*vec2(3.5,1),col,c,true);\n    }\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=abs(iMouse.xy)/iResolution.xy;\n    if(iFrame==0) fragColor=vec4(0.8,0.875,0.5,0.3741);\n    else fragColor=texture(iChannel0,fragCoord/iResolution.xy);\n    // Copy-pasted.\n    float h=1.0/14.0,D=4.0*h,W=1.0-D;\n    if(uv.x>W)\n    {\n        vec2 s=vec2(0.75,1)*h,k=vec2(0.5,1);\n        vec2 p=(uv-vec2(W,0))/s;\n        float L=2.5*k.x,H=D/s.x;\n        if(p.x>L&&mod(p.y,2.0)>1.0&&p.y<8.0)\n        {\n            fragColor[3-int(p.y/2.0)]=(p.x-L)/(H-L);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}