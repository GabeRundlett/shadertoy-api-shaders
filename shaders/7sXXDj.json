{
    "Shader": {
        "info": {
            "date": "1619229217",
            "description": "Basically a remake of @iq's shader (https://www.shadertoy.com/view/MsSBRh) for the fun of reinventing the wheel and learning how he made his so compact (trig identities!). To be a bit more original, I also made it so the bounds can be adjusted.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sXXDj",
            "likes": 6,
            "name": "Inverse Smoothstep with Bounds",
            "published": 3,
            "tags": [
                "function",
                "smoothstep",
                "cubic",
                "inverse",
                "bounds"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "#define bmin sin(iTime)\n#define bmax cos(iTime)\n\n#define func(x) fSmoothstep(x, sin(iTime), cos(iTime))\n#define inv(x) iSmoothstep(x, sin(iTime), cos(iTime))\n\n// Drawing utilities\n#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n#define drawf(f, t, c) draw(abs(uv.y - f(uv.x)) / sqrt(1.0 + pow((f(uv.x + 0.001) - f(uv.x - 0.001)) / 0.002, 2.0)) - t, c)\n\n// Smoothstep\nfloat fSmoothstep(in float x, in float edge0, in float edge1) {\n    //x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0); // clamp() is noninvertable\n    //return 3.0 * x * x - 2.0 * x * x * x;\n    return smoothstep(edge0, edge1, x);\n}\n\n// Inverse smoothstep\nfloat iSmoothstep(in float x, in float edge0, in float edge1) {\n    x = sin(asin(2.0 * x - 1.0) / 3.0) + 0.5;\n    return (edge1 - edge0) * x + edge0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Grid\n    draw(abs(mod(uv.x + 0.2, 0.4) - 0.2) + 0.25 * unit, vec3(0.75));\n    draw(abs(mod(uv.y + 0.2, 0.4) - 0.2) + 0.25 * unit, vec3(0.75));\n    draw(abs(uv.x), vec3(0.0));\n    draw(abs(uv.y), vec3(0.0));\n\n    // Shift\n    uv += 0.5;\n\n    // Graph\n    drawf(func, 0.01, vec3(0.8, 0.0, 0.0));\n    drawf(inv, 0.01, vec3(0.0, 0.0, 0.8));\n\n    // The inverse is also the function reflected diagonally (x and y swapped)\n    // Here showing the axis of symmetry\n    float iSqrt2 = 0.70710678118; // sqrt(0.5)\n    draw(abs(dot(uv, vec2(iSqrt2, -iSqrt2))), vec3(0.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}