{
    "Shader": {
        "info": {
            "date": "1495808454",
            "description": "distance field displacement by honeycomb foam tessellation\n\nIs a  more structured branch of \nhttps://www.shadertoy.com/view/ltXGWS\nwhich did not use a lot of its contained potential\nand i prefer h=max(h,-(h+cells(o)))\nover           h=max(h,+(h+cells(o)))",
            "flags": 0,
            "hasliked": 0,
            "id": "XsXBWH",
            "likes": 7,
            "name": "honeycomb insideout",
            "published": 3,
            "tags": [
                "3d",
                "tiled",
                "tilings",
                "honeycomb",
                "tiling",
                "tesselation",
                "foam",
                "tiles",
                "filling"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 1201
        },
        "renderpass": [
            {
                "code": "//parent: https://www.shadertoy.com/view/ltXGWS\n\n//ended up warping the df() distanceField \n//..within the rm() Raymarch function.\n\n//radius (and thickness)\n//...of (a mix of a sphere and a cylinder) that bounds the volume.\n#define radius 3.\n//that volume then gets \"filled with\" \n//...honeycomb-tesselation holes (or spheres).\n\n//displace the distance Field by DISPLACE*honeycomb\n//(and not just textures it), intended range [-1..1]\n//remove for better performance\n#define DISPLACE 1.\n//With small DISPLACE, a lot of camera positions \n//...are inside the signed distance field (negative distance)\n\n//uncomment to toggle between boolean [difference] or [intersect]\n//#define intersection\n//above gets pretty much obsoleted by [HoleScaling]\n\n//size of holes (or spheres)=distance_to_surface*HoleScaling\n#define HoleScaling 1.2\n//range [-0.5 .. -2.0] OR range [0.5 .. 2.0]\n//HoleScaling outside that rande is too bad for lipschitz continuity.\n\n//larger reciprocalCellScale make holes smaller\n#define reciprocalCellScale 2.\n//honeycomb scaling == 1/reciprocalCellScale\n\n\n//for performance:\n\n//maximum raymarch steps.\n#define rmItteratons 255\n\n//its almost strange how a larger epsilon looks better.\n//...with a honeycomb displacement\n#define eps 1e-3\n\n//scale raymarch steps by ReciprocalLipschitz\n#define ReciprocalLipschitz .3\n//lipschitsConstant=abs(firstDerivative(x));\n//global (or local) lipschitsConstant is not defined for point x,\n//...but is the max() of ANY x,range [a..b] or range [-inf...+inf].\n//Multiplying raymarchStepDistances by\n//...the reciprocal of an ESTIMATION of a global lipschitsConstant\n//...is the lazy way to avoid overestimation of raymarch step distances.\n\n//the smart solution would be \"automatic differenciation\" \n//...returning you the exact lipschitzConstant for every step.\n\n\n\n//return 3d honeycomb, distance to closest \"white tile\" of checkerboard tiling\nfloat cells(vec3 p){p=fract(p/2.)*2.;p=min(p,2.-p );    \n return min(length(p),length(p-1.));}\n\n//return distance field. actually, rm() modifies this A LOT\nfloat df(vec3 p){float a=1.5-length(p.xy);\n float b=(length(p.xz)-abs(p.y)+.4);\n float r=min(a,b*.2);return r;}\n\n//raymarch, return position were ray hits surface\nvec3 rm(vec3 o,vec3 d,out float h){float m=(cos(iTime*.61*.1)*.5+.5);\n for(int i=0;i<rmItteratons;i++){h=length(o)-radius;float a=df(o);\n  h=mix(a,max(h,a),m);//first displacement\n  #ifdef DISPLACE\n   float displace=h;\n   #ifdef intersection\n    displace=max(h,+(h+(cells(o*reciprocalCellScale)-.7)*HoleScaling)*ReciprocalLipschitz);//lipschitsConstant==5.0?                \n    //above does intersection: [h AND     h+cells()] max(a,+b)\n   #else\n    //below does difference:   [h AND NOT h+cells()] max(a.-b)\n    displace=max(h,-(h+(cells(o*reciprocalCellScale)-.7)*HoleScaling)*ReciprocalLipschitz);//lipschitsConstant==5.0?                \n   #endif\n   h=mix(h,displace,DISPLACE);//sedond displacement\n  #endif\n  o+=d*h;if(h<eps)return o;}return o;}\n\n//return RayPos for [U]FragmentPos,and set [d]RayDirection\nvec3 cam(vec2 U,out vec3 d){\n vec2 h=iResolution.xy/2.;\n d=normalize(vec3(U.xy-h,h.y*2.));\n vec2 r=vec2(0);//2 rotations around 2 axes\n if(iMouse.z >.0)r+=vec2(-2,3)*(iMouse.yx/h.yx-1.);//mouse cam\n else r.y=iTime*.3;//auto cam\n vec2 c=cos(r),s=sin(r);\n d.yz=vec2(-1,1)*d.zy*s.x+d.yz*c.x;//2d rotation\n d.xz=vec2(1,-1)*d.zx*s.y+d.xz*c.y;//2d rotation\n return vec3(-c.x*s.y,s.x,-c.x*c.y)*8.;\n}\n\nvoid mainImage( out vec4 O, in vec2 U ){O=vec4(0);\n vec3 d,p=cam(U,d);//camera [o]origin [d]direction [U]fragCoord                                          \n float h=0.;p=rm(p,d,h);//raymarch [h]distanceToSurface\n #ifndef intersection\n  if(h<eps){//conditional only makes sense for intersection\n #endif\n  vec3 a=step(.5,fract(p*reciprocalCellScale/2.0-.25));\n  vec3 b=vec3(cells(p*reciprocalCellScale)/1.3);\n O.rgb=mix(a,b,sin(iTime)*.2+.8);}\n #ifndef intersection\n  }\n #endif\n\n// Ben Quantock 2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}