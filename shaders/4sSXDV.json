{
    "Shader": {
        "info": {
            "date": "1415867064",
            "description": "Analytic occlusion of triangles, with proper clipping. With clipping, polygons can fall (completely or partially) below the visibility horizon of the receiving point, while still computing analytically correct occlusion. Move mouse to compare.",
            "flags": 0,
            "hasliked": 0,
            "id": "4sSXDV",
            "likes": 56,
            "name": "Box - occlusion clipping",
            "published": 3,
            "tags": [
                "3d",
                "occlusion",
                "analytic"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 6846
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Analytical ambient occlusion of triangles. Left side of screen, stochastically \n// sampled occlusion. Right side of the screen, analytical solution (no rays casted).\n\n// This shader computes proper clipping. With clipping, polygons can fall (completely \n// or partially) below the visibility horizon of the receiving point, while still \n// computing analytically correct occlusion.\n\n// More info here: https://iquilezles.org/articles/boxocclusion\n\n\n// Other analytical occlusion or approximations:\n// \n// Box:                        https://www.shadertoy.com/view/4djXDy\n// Box with horizon clipping:  https://www.shadertoy.com/view/4sSXDV\n// Triangle:                   https://www.shadertoy.com/view/XdjSDy\n// Sphere:                     https://www.shadertoy.com/view/4djSDy\n// Ellipsoid (approximation):  https://www.shadertoy.com/view/MlsSzn\n\n\n// Other Box functions (https://iquilezles.org/articles/boxfunctions)\n//\n// Intersection:     https://www.shadertoy.com/view/ld23DV\n// Occlusion:        https://www.shadertoy.com/view/4sSXDV\n// Occlusion:        https://www.shadertoy.com/view/4djXDy\n// Density:          https://www.shadertoy.com/view/Ml3GR8\n// Fake soft shadow: https://www.shadertoy.com/view/WslGz4\n// Gradient:         https://www.shadertoy.com/view/wlcXD2\n\n\n//=====================================================\n\nfloat sacos( float x ) { return acos( min(max(x,-1.0),1.0) ); }\n\nvec3 clip( in vec3 a, in vec3 b, in vec4 p )\n{\n    return a - (b-a)*(p.w + dot(p.xyz,a))/dot(p.xyz,(b-a));\n//    return ( a*dot(p.xyz,b) - b*dot(p.xyz,a)  - (b-a)*p.w ) / dot(p.xyz,(b-a));\n}\n\n//-----------------------------------------------------------------------------------------\n\n// fully visible front facing Triangle occlusion\nfloat ftriOcclusion( in vec3 pos, in vec3 nor, in vec3 v0, in vec3 v1, in vec3 v2 )\n{\n    vec3 a = normalize( v0 - pos );\n    vec3 b = normalize( v1 - pos );\n    vec3 c = normalize( v2 - pos );\n\n    return (dot( nor, normalize( cross(a,b)) ) * sacos( dot(a,b) ) +\n            dot( nor, normalize( cross(b,c)) ) * sacos( dot(b,c) ) +\n            dot( nor, normalize( cross(c,a)) ) * sacos( dot(c,a) ) ) / 6.2831;\n}\n\n\n// fully visible front acing Quad occlusion\nfloat fquadOcclusion( in vec3 pos, in vec3 nor, in vec3 v0, in vec3 v1, in vec3 v2, in vec3 v3 )\n{\n    vec3 a = normalize( v0 - pos );\n    vec3 b = normalize( v1 - pos );\n    vec3 c = normalize( v2 - pos );\n    vec3 d = normalize( v3 - pos );\n    \n    return (dot( nor, normalize( cross(a,b)) ) * sacos( dot(a,b) ) +\n            dot( nor, normalize( cross(b,c)) ) * sacos( dot(b,c) ) +\n            dot( nor, normalize( cross(c,d)) ) * sacos( dot(c,d) ) +\n            dot( nor, normalize( cross(d,a)) ) * sacos( dot(d,a) ) ) / 6.2831;\n}\n\n// partially or fully visible, front or back facing Triangle occlusion\nfloat triOcclusion( in vec3 pos, in vec3 nor, in vec3 v0, in vec3 v1, in vec3 v2, in vec4 plane )\n{\n    if( dot( v0-pos, cross(v1-v0,v2-v0) ) < 0.0 ) return 0.0;  // back facing\n    \n    float s0 = dot( vec4(v0,1.0), plane );\n    float s1 = dot( vec4(v1,1.0), plane );\n    float s2 = dot( vec4(v2,1.0), plane );\n    \n    float sn = sign(s0) + sign(s1) + sign(s2);\n\n    vec3 c0 = clip( v0, v1, plane );\n    vec3 c1 = clip( v1, v2, plane );\n    vec3 c2 = clip( v2, v0, plane );\n    \n    // 3 (all) vertices above horizon\n    if( sn>2.0 )  \n    {\n        return ftriOcclusion(  pos, nor, v0, v1, v2 );\n    }\n    // 2 vertices above horizon\n    else if( sn>0.0 ) \n    {\n        vec3 pa, pb, pc, pd;\n              if( s0<0.0 )  { pa = c0; pb = v1; pc = v2; pd = c2; }\n        else  if( s1<0.0 )  { pa = c1; pb = v2; pc = v0; pd = c0; }\n        else/*if( s2<0.0 )*/{ pa = c2; pb = v0; pc = v1; pd = c1; }\n        return fquadOcclusion( pos, nor, pa, pb, pc, pd );\n    }\n    // 1 vertex aboce horizon\n    else if( sn>-2.0 ) \n    {\n        vec3 pa, pb, pc;\n              if( s0>0.0 )   { pa = c2; pb = v0; pc = c0; }\n        else  if( s1>0.0 )   { pa = c0; pb = v1; pc = c1; }\n        else/*if( s2>0.0 )*/ { pa = c1; pb = v2; pc = c2; }\n        return ftriOcclusion(  pos, nor, pa, pb, pc );\n    }\n    // zero (no) vertices above horizon\n    \n    return 0.0;\n}\n\n\n//-----------------------------------------------------------------------------------------\n\n\n// Box occlusion (if fully visible)\nfloat boxOcclusion( in vec3 pos, in vec3 nor, in mat4 txx, in mat4 txi, in vec3 rad ) \n{\n\tvec3 p = (txx*vec4(pos,1.0)).xyz;\n\tvec3 n = (txx*vec4(nor,0.0)).xyz;\n    vec4 w = vec4( n, -dot(n,p) ); // clipping plane\n    \n    // 8 verts\n    vec3 v0 = vec3(-1.0,-1.0,-1.0)*rad;\n    vec3 v1 = vec3( 1.0,-1.0,-1.0)*rad;\n    vec3 v2 = vec3(-1.0, 1.0,-1.0)*rad;\n    vec3 v3 = vec3( 1.0, 1.0,-1.0)*rad;\n    vec3 v4 = vec3(-1.0,-1.0, 1.0)*rad;\n    vec3 v5 = vec3( 1.0,-1.0, 1.0)*rad;\n    vec3 v6 = vec3(-1.0, 1.0, 1.0)*rad;\n    vec3 v7 = vec3( 1.0, 1.0, 1.0)*rad;\n    \n\n    // 6 faces    \n    float occ = 0.0;\n    occ += triOcclusion( p, n, v0, v2, v3, w );\n    occ += triOcclusion( p, n, v0, v3, v1, w );\n\n    occ += triOcclusion( p, n, v4, v5, v7, w );\n    occ += triOcclusion( p, n, v4, v7, v6, w );\n    \n    occ += triOcclusion( p, n, v5, v1, v3, w );\n    occ += triOcclusion( p, n, v5, v3, v7, w );\n    \n    occ += triOcclusion( p, n, v0, v4, v6, w );\n    occ += triOcclusion( p, n, v0, v6, v2, w );\n    \n    occ += triOcclusion( p, n, v6, v7, v3, w );\n    occ += triOcclusion( p, n, v6, v3, v2, w );\n    \n    occ += triOcclusion( p, n, v0, v1, v5, w );\n    occ += triOcclusion( p, n, v0, v5, v4, w );\n\n    return occ;\n}\n\n//-----------------------------------------------------------------------------------------\n\n// https://iquilezles.org/articles/boxfunctions\nvec4 boxIntersect( in vec3 ro, in vec3 rd, in mat4 txx, in mat4 txi, in vec3 rad ) \n{\n    // convert from ray to box space\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec4(-1.0);\n\n\tvec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    // convert to ray space\n\t\n\tnor = (txi * vec4(nor,0.0)).xyz;\n\n\treturn vec4( tN, nor );\n}\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n\nfloat iPlane( in vec3 ro, in vec3 rd )\n{\n    return (-1.0 - ro.y)/rd.y;\n}\n\n//-----------------------------------------------------------------------------------------\n\n// --------------------------------------\n// oldschool rand() from Visual Studio\n// --------------------------------------\nint   seed = 1;\nint   rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat frand(void) { return float(rand())/32767.0; }\nvoid  srand( ivec2 p, int frame )\n{\n    int n = frame;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589; // by Hugo Elias\n    n += p.y;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    n += p.x;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    seed = n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// init randoms\n    srand( ivec2(fragCoord), iFrame );\n\n    // coordinates\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    float s = (2.0*iMouse.x-iResolution.x) / iResolution.y;\n    if( iMouse.z<0.001 ) s=0.0;\n\n\tvec3 ro = vec3(0.0, 0.0, 4.0 );\n\tvec3 rd = normalize( vec3(p,-2.0) );\n\t\n    // box animation\n\tmat4 rot = rotationAxisAngle( normalize(vec3(1.0,0.9,0.5)), 0.5*iTime );\n\tmat4 tra = translate( 0.0, 0.0, 0.0 );\n\tmat4 txi = tra * rot; \n\tmat4 txx = inverse( txi );\n\tvec3 box = vec3(0.2,0.7,2.0) ;\n\n    vec4 rrr = textureLod( iChannel0, (fragCoord.xy)/iChannelResolution[0].xy, 0.0  ).xzyw;\n\n    vec3 col = vec3(0.0);\n\n    float tmin = 1e10;\n    \n    float t1 = iPlane( ro, rd );\n    if( t1>0.0 )\n    {\n        tmin = t1;\n        vec3 pos = ro + tmin*rd;\n        vec3 nor = vec3(0.0,1.0,0.0);\n        float occ = 0.0;\n        \n        if( p.x > s )\n        {\n            occ = boxOcclusion( pos, nor, txx, txi, box );\n        }\n        else\n        {\n   \t\t    vec3  ru = normalize( cross( nor, vec3(0.0,1.0,1.0) ) );\n\t\t    vec3  rv = normalize( cross( ru, nor ) );\n\n            occ = 0.0;\n            const int numRays = 256;\n            for( int i=0; i<numRays; i++ )\n            {\n                vec2  aa = vec2(frand(),frand());\n                float ra = sqrt(aa.y);\n                float rx = ra*cos(6.2831*aa.x); \n                float ry = ra*sin(6.2831*aa.x);\n                float rz = sqrt( 1.0-aa.y );\n                vec3  dir = vec3( rx*ru + ry*rv + rz*nor );\n                vec4 res = boxIntersect( pos, dir, txx, txi, box );\n                occ += step(0.0,res.x);\n            }\n            occ /= float(numRays);\n        }\n\n        col = vec3(1.2);\n        col *= 1.0 - occ;\n    }\n\n    vec4 res = boxIntersect( ro, rd, txx, txi, box );\n    float t2 = res.x;\n    if( t2>0.0 && t2<tmin )\n    {\n        tmin = t2;\n        float t = t2;\n        vec3 pos = ro + t*rd;\n        vec3 nor = res.yzw;\n\t\tcol = vec3(1.4);//vec3(1.0,0.85,0.6);\n        col *= 0.6 + 0.4*nor.y;\n\t}\n\n\tcol *= exp( -0.05*tmin );\n\n    float e = 2.0/iResolution.y;\n    col *= smoothstep( 0.0, 2.0*e, abs(p.x-s) );\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}