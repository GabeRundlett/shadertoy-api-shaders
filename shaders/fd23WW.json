{
    "Shader": {
        "info": {
            "date": "1617414171",
            "description": "Curved tube intersector.",
            "flags": 0,
            "hasliked": 0,
            "id": "fd23WW",
            "likes": 8,
            "name": "Curved Tube Ray Intersect",
            "published": 3,
            "tags": [
                "raytracing",
                "ray",
                "raycasting",
                "tube",
                "quadratic",
                "intersect",
                "curved"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 152
        },
        "renderpass": [
            {
                "code": "// Intersection (note: the clipping is done in mainImage, not here)\n// Funny thing is, when the bending is flipped, the tube becomes an ellipse\nvec3 iCurvedTube(in vec3 ro, in vec3 rd, in float bend, in float radius) {\n    float a = dot(rd, rd) - bend * rd.y * rd.y;\n    float b = 2.0 * (dot(ro, rd) - bend * ro.y * rd.y);\n    float c = dot(ro, ro) - bend * ro.y * ro.y - radius * radius;\n\n    float discr = b * b - 4.0 * a * c;\n    if (discr > 0.0) {\n        float root = sqrt(discr);\n        float denom = 2.0 * a;\n\n        float t1 = +(root - b) / denom;\n        float t2 = -(root + b) / denom;\n\n        return vec3(t1, t2, 2.0); // vecN(hit 1, hit 2, hit 3, ... , number of hits)\n    }\n\n    return vec3(0.0);\n}\n\n// Normal\nvec3 nCurvedTube(in vec3 p, in float bend, in float radius) {\n    return normalize(vec3(p.x, (1.0 - bend) * p.y, p.z));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = ivec2(iMouse) == ivec2(0) ? vec2(0.0) : (iMouse.xy - center) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 10.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Environment map\n    fragColor = texture(iChannel0, rd);\n\n    float bend = 2.0 + cos(iTime);\n    float radius = 2.0 + sin(iTime);\n\n    // Find the closest hit in front of the camera with |y| < 3\n    vec3 hit = iCurvedTube(ro, rd, bend, radius);\n    float t = 1000000000.0;\n    vec3 hitPos;\n    for (int n=0; n < int(hit[2]); n++) {\n        vec3 hitCandid = ro + rd * hit[n];\n        if (hit[n] > 0.0 && hit[n] < t && abs(hitCandid.y) < 3.0) {\n            t = hit[n];\n            hitPos = hitCandid;\n        }\n    }\n\n    // Render the shape if hitting\n    if (t < 1000000000.0) {\n        vec3 n = nCurvedTube(hitPos, bend, radius);\n        float diff = abs(dot(n, -rd));\n        float checkers = mod(floor(atan(hitPos.z, hitPos.x) * 3.14) + floor(hitPos.y), 2.0);\n        fragColor = mix(vec4(0.5 + 0.5 * checkers, 0.0, 0.0, 1.0), texture(iChannel0, reflect(-rd, n)), 0.25);\n        fragColor.rgb += 0.5 * step(0.0, dot(n, rd));\n        fragColor.rgb *= diff;\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.75));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}