{
    "Shader": {
        "info": {
            "date": "1723658714",
            "description": "originals https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/4fXfW8 https://www.shadertoy.com/view/DtGyWh *without breaking your phone*",
            "flags": 0,
            "hasliked": 0,
            "id": "lcXBW8",
            "likes": 2,
            "name": "falling star in your phone",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 253
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nfloat PI=3.141592653589;\n\nfloat fancyScene(vec2 uv, vec2 center, float squareSize, float edge) {\n  float distX = abs(uv.x - center.x);\n    float distY = abs(uv.y - center.y);\n    float xVal = smoothstep(squareSize-edge, squareSize, distX);\n    \n    float yVal = smoothstep(squareSize-edge, squareSize, distY);\n    \n    float isInsideSquare = xVal+ yVal - xVal*yVal;\n    return isInsideSquare;\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nfloat s[10] = float[10](0.1,0.15,0.23,0.3,0.37,0.41,0.47,0.5,0.55,0.6);\nfloat l[10]= float[10](1.0,2.0,2.0,3.0,2.55,1.3,1.3,2.0,0.4,2.33);\nfloat sm = 0.5;\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    \n     vec2 uvOrig = C/iResolution.xy;\n       vec2 uv3= 2.0*(C-.5*iResolution.xy)/iResolution.xy;\n vec2 uv = C / iResolution.xy;\n   vec2 uv2 = C / iResolution.xy-0.5;\n  \n    vec3 col=vec3(0);\n \n    vec3 barCol=vec3(0.000,0.384,1.000);\n    float t = iTime;\n    \n    float squareSize = 0.98; \n    float edge = 0.3;\n    vec2 center = vec2(0,0);\n   \n   \n   // Polar coords cause we want to move borders outside like in a circle\n   float d = length(uv); // dist  \n    float alpha = atan(uv3.y, uv3.x); //-pi to pi, //angle\n    vec2 pc = vec2(d, alpha); // polar coords holding (dist, angle)\n    \n    //fancy calc or irregular shape\n    float sinVal = sin(pc.y*3.+t*3.)*cos(pc.x*18.+t*3.)*0.025 ;\n    \n    vec2 changedUv = uv3; \n    changedUv+=sinVal;\n     float sq = fancyScene(changedUv, center, squareSize, edge);\n     \n     vec3 tex =texture(iChannel0,uv3).xyz * (abs(sin(iTime*0.3)) +0.5);\n     vec3 sqCol= sq*barCol* (1.+pow(sq,15.));\n     col=mix(tex, sqCol,sq);\n     //col=sqCol;\n     col+=vec3(1.) * pow(sq,15.); // fade to white at the end\n     \n    \n  \n    vec3 orbit = vec3(0.0,0.0,0.0);\n    float w = iResolution.x;\n    float h = iResolution.y;\n    for(int i=0; i < 400; i++) {\n        float fi = float(i);\n        float a = (1.0 - pow(cos(atan(uv.yyy - 0.5, uv.xxx - 0.5) / 2.0 + l[i%10] + pow(fi*0.1,3.0) + (iTime*0.1 * (1.0 + l[i%10] * 0.001))).x, 2.0)) < 0.01 ? 1.0:0.0;\n        float o1 = clamp((s[i%10] - (fi * 0.001))/ length(vec2(uv.x - 0.5, (uv.y - 0.5) * (h / w))),0.0,1.0) * a;\n        float o2 = clamp((s[i%10] - (fi * 0.001) - 0.003) / length(vec2(uv.x - 0.5f, (uv.y - 0.5f) * (h / w))),0.0,1.0) * a;\n        orbit = orbit + (o2 - o1);\n    } \n    float edge2 = 0.35;\n    vec3 c = vec3(0.035,0.223,0.4) * clamp(\n    smoothstep(length(vec2(uv.x - 0.5f, (uv.y - 0.5f) * (h / w))) - sm, length(vec2(uv.x - 0.5f, (uv.y - 0.5f) * (h / w))) + sm, edge2),0.0,1.0);\n    c = clamp(c - orbit,0.0,1.0);\n    vec3 p,q,r=iResolution,\n    d2=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d2;\n        p.z=(iTime*2.);\n        a=10.;\n        p=mod(p-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n          \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 )*c+col;\n         }\n       //  g+=e=length(p.yz)/s;\n         g+=e=length(p.yx)/s;\n    }\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n   O*= vec4(happy_star(uv2, anim) * vec3(0.35,0.2,0.55), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}