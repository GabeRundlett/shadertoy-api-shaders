{
    "Shader": {
        "info": {
            "date": "1452319990",
            "description": "How to do a 2x2 box blur with a single texture sample.",
            "flags": 32,
            "hasliked": 0,
            "id": "MsdGD2",
            "likes": 157,
            "name": "One Sample Blur",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "fast",
                "trick"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 33305
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Trick: take one single texture sample at the corner of a given texel, right where it \n// meets three of its neighbors, so that the bilinear filtering hardware averages those\n// four texels for you. This basically lets you downsample or box-blur the texture\n// without fetching and averaging the four texels by hand.\n//\n// This shader shows the technique by blurring an image repeatedly with only ONE texture\n// sample.\n//\n// A more advanced use of this for gaussian blurs here: https://www.shadertoy.com/view/Xd33Rf\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = texelFetch( iChannel0, ivec2(fragCoord), 0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Trick: take one single texture sample at the corner of a given texel, right where it \n// meets three of its neighbors, so that the bilinear filtering hardware averages those\n// four texels for you. This basically lets you downsample or box-blur the texture\n// without fetching and averaging the four texels by hand.\n//\n// This shader shows the technique by blurring an image repeatedly with only ONE texture\n// sample.\n//\n// A more advanced use of this for gaussian blurs here: https://www.shadertoy.com/view/Xd33Rf\n\n\n\nvec4 createTexture( in vec2 p );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // blur    \n    vec2 s = vec2(float(iFrame&1))-0.5;             // generate -0.5 or +0.5 alternativelly\n  //vec2 s = vec2(iFrame&1,(iFrame>>1)&1)-0.5;      // touch four corners alternativelly\n    fragColor = textureLod( iChannel0, (fragCoord+s) / iResolution.xy, 0.0 );\n\n    // initial image\n    if( iFrame==0 ) fragColor = createTexture(fragCoord/iChannelResolution[0].xy);\n}\n\n\n\n// ---------------------------------------------------------------------------------------------\n\nvec4 createTexture( in vec2 p )\n{\n    vec2 cc = vec2( -0.1, 0.68 );\n\n\tvec4 dmin = vec4(1000.0);\n    float w = 0.0;\n    vec2 z = 1.1*(-1.0 + 2.0*p)*vec2(iChannelResolution[0].x/iChannelResolution[0].y,1.0);\n    for( int i=0; i<80; i++ )\n    {\n        z = cc + vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y );\n\n\t\tdmin=min(dmin, vec4(length( z-0.5), \n\t\t\t\t\t\t\tabs(-0.5+z.x + 0.2*sin(5.0*z.y)), \n\t\t\t\t\t\t\tdot(z,z),\n\t\t\t\t\t\t    length( fract(z/8.0)-0.5) ) );\n        if( dot(z,z)>4.0 ) w=1.0;\n    }\n   \n    vec3 col = vec3(0.6,0.6,0.6);\n    col * 0.4+0.6*w;\n    col *= mix( vec3(1.0,0.45,0.1), vec3(1.0), w );\n    col *= 0.65 + dmin.w;\n    col = mix( col, 1.5*vec3(0.7,0.7,0.7),1.0-clamp(dmin.y*15.0,0.0,1.0) );\n    col = mix( col, vec3(1.1,1.1,1.0),1.0-clamp(dmin.x*2.0,0.0,1.0) );\n\tcol *= 0.5 + 0.5*clamp(dmin.z*50.0,0.0,1.0);\n\n\n    return vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}