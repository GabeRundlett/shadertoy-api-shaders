{
    "Shader": {
        "info": {
            "date": "1719909425",
            "description": "Testing AI-generated code",
            "flags": 0,
            "hasliked": 0,
            "id": "l3KXWh",
            "likes": 2,
            "name": "AI generated mandelbulb",
            "published": 3,
            "tags": [
                "mandelbulb",
                "ai"
            ],
            "usePreview": 0,
            "username": "jt722",
            "viewed": 105
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.001\n#define POWER 8.0\n\n// Global variables for interaction\nfloat gAudioIntensity = 0.0;\nvec2 gMousePos = vec2(0.0);\nfloat gInteractionStrength = 0.0;\n\nmat3 rotateY(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3(\n        c, 0, -s,\n        0, 1, 0,\n        s, 0, c\n    );\n}\n\nfloat mandelbulbDE(vec3 pos) {\n    vec3 z = pos;\n    float dr = 1.0;\n    float r = 0.0;\n    \n    // Modify the power based on audio intensity\n    float modifiedPower = POWER + gAudioIntensity * 2.0;\n    \n    for (int i = 0; i < 15; i++) {\n        r = length(z);\n        if (r > 2.0) break;\n        \n        float theta = acos(z.z / r);\n        float phi = atan(z.y, z.x);\n        float zr = pow(r, modifiedPower);\n        \n        dr = pow(r, modifiedPower - 1.0) * modifiedPower * dr + 1.0;\n        \n        theta *= modifiedPower;\n        phi *= modifiedPower;\n        \n        z = zr * vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));\n        z += pos;\n    }\n    return 0.5 * log(r) * r / dr;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = mandelbulbDE(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = mandelbulbDE(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        mandelbulbDE(p-e.xyy),\n        mandelbulbDE(p-e.yxy),\n        mandelbulbDE(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    // Audio reactivity\n    gAudioIntensity = texture(iChannel0, vec2(0.1, 0.1)).x;\n    \n    // Mouse/touch interaction\n    gMousePos = iMouse.xy / iResolution.xy;\n    gInteractionStrength = iMouse.z > 0.0 ? 1.0 : 0.0;\n    \n    // Camera setup with interaction\n    float camDist = 2.0 + gInteractionStrength * (gMousePos.y - 0.5) * 2.0;\n    float camAngle = iTime * 0.5 + gInteractionStrength * (gMousePos.x - 0.5) * 10.0;\n    vec3 ro = vec3(camDist * sin(camAngle), (gMousePos.y - 0.5) * 2.0, camDist * cos(camAngle));\n    vec3 lookAt = vec3(0, 0, 0);\n    vec3 f = normalize(lookAt-ro);\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    vec3 c = ro + f;\n    vec3 i = c + uv.x*r + uv.y*u;\n    vec3 rd = normalize(i-ro);\n    \n    // Apply rotation based on audio\n    rd = rotateY(iTime * 0.2 + gAudioIntensity * 2.0) * rd;\n    \n    float d = rayMarch(ro, rd);\n    \n    if(d < MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = getNormal(p);\n        vec3 light = normalize(vec3(1,1,1));\n        \n        float dif = dot(n, light)*.5+.5;\n        col = vec3(dif);\n        \n        // Add color based on audio intensity\n        col *= 1.0 + vec3(0.5, 0.2, 0.7) * gAudioIntensity;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}