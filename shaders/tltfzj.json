{
    "Shader": {
        "info": {
            "date": "1613098309",
            "description": "otra camino-v1",
            "flags": 0,
            "hasliked": 0,
            "id": "tltfzj",
            "likes": 2,
            "name": "otra camino-v1",
            "published": 3,
            "tags": [
                "otracaminov1"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nvec3 Puerta1(vec3 p)\n{\n    vec3  res;\n     res = vec3(9999.0, -1.0,-1.0);\n     float sbSup= sdBox( p-vec3(0.0,5.0,0.0), vec3(6.0,1.0,1.0) );\n     float sbInf= sdBox( p-vec3(0.0,-1.0,0.0), vec3(6.0,0.25,3.5) );\n     \n     \n     float sbIzq= sdBox( p-vec3(-5.0,0.0,0.0), vec3(1.0,5.0,1.0) );\n     float sbDer= sdBox( p-vec3(5.0,0.0 ,0.0) , vec3(1.0,5.0,1.0) );\n     res =opU3(res, vec3(sbSup,1.0,MATERIAL_NO)); \n     res =opU3(res, vec3(sbIzq,1.0,MATERIAL_NO)); \n     res =opU3(res, vec3(sbDer,1.0,MATERIAL_NO)); \n     res =opU3(res, vec3(sbInf,1.0,MATERIAL_NO)); \n     \n     return res;\n}\n\nvec3 Puerta2(vec3 p)\n{\n    vec3  res;\n     res = vec3(9999.0, -1.0,-1.0);\n     float sbSup= sdBox( p-vec3(0.0,5.0,0.0), vec3(6.0,1.0,1.0) );\n     float sbInf= sdBox( p-vec3(0.0,-1.0,0.0), vec3(6.0,0.25,4.0) );\n     \n     float sbIzq= sdCylinderXZ( p-vec3(-5.0,0.0,0.0), vec2(1.0,5.0) );\n     float sbDer= sdCylinderXZ( p-vec3(5.0,0.0 ,0.0), vec2(1.0,5.0) );\n     \n     res =opU3(res, vec3(sbSup,11.0,MATERIAL_NO)); \n     res =opU3(res, vec3(sbIzq,11.0,MATERIAL_NO)); \n     res =opU3(res, vec3(sbDer,11.0,MATERIAL_NO)); \n     res =opU3(res, vec3(sbInf,11.0,MATERIAL_NO)); \n     \n     return res;\n}\n\n\n\nvec3 opScalePuerta1( in vec3 p, in float s )\n{  vec3 d1=Puerta1(p/s); d1.x*=s; return d1; }\n\nvec3 opScalePuerta2( in vec3 p, in float s )\n{   vec3 d1=Puerta2(p/s); d1.x*=s; return d1; }\n\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp=p;\n    res = vec3(9999.0, -1.0,-1.0);\n   \n    p= rotate_y(p-vec3(0.0,0.0,0.0), radians(45.0)); \n   \tfloat planeDist1 = p.y+0.0;  //piso inf\n    //res =opU3(res, vec3(planeDist1,13.0,MATERIAL_NO)); //inf\n    //res =opU3(res, vec3(planeDist1,-1.0,5.0)); //inf\n    res =opU3(res, vec3(planeDist1,13.0,-1.0)); //inf\n     p.y=p.y-5.0;\n   \n    vec3 p1=p;\n    vec3 p2=p-vec3(50.0,0.0,0.0);\n\n    p1.x=mod(p1.x, 120.0)-50.0;\n    p2.x=mod(p1.x, 120.0)-60.0;\n    \n    vec3 pa1= opScalePuerta1(  p1, 1.5 );\n    vec3 pa2= opScalePuerta1(  p1, 2.0 );\n    vec3 pa3= opScalePuerta1(  p1, 3.0 );\n    vec3 pa4= opScalePuerta1(  p1, 4.0 );\n    vec3 pa5= opScalePuerta1(  p1, 5.0 );\n    res =opU3(res, pa1); \n    res =opU3(res, pa2); \n    res =opU3(res, pa3); \n    res =opU3(res, pa4); \n    res =opU3(res, pa5); \n    vec3 pb1= opScalePuerta2(  p2, 1.5 );\n    vec3 pb2= opScalePuerta2(  p2, 2.0 );\n    vec3 pb3= opScalePuerta2(  p2, 3.0 );\n    vec3 pb4= opScalePuerta2(  p2, 4.0 );\n    vec3 pb5= opScalePuerta2(  p2, 5.0 );\n    res =opU3(res, pb1); \n    res =opU3(res, pb2); \n    res =opU3(res, pb3); \n    res =opU3(res, pb4); \n    res =opU3(res, pb5); \n    \n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro) \n{\n    vec3 l = lp - p;\n    float dist = max(length(l), 0.01);\n    float atten = min(1./(1. + dist*0.5), 0.2);\n    l /= dist;\n    \n    vec3 n = normal;\n   \tvec3 r = reflect(-l, n);\n    \n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    float spe = pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n    \n    vec3 lin = vec3(0.2);\n    lin += 1.0*dif*vec3(1, .97, .85);\n    lin += 2.5*spe*vec3(1, .97, .85)*dif;\n    lin += 2.5*fre*vec3(1);\n    lin += 0.5*dom*vec3(1);\n   \n    return lin*atten;\n}\n\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3( GetDist(p-e.xyy).x, GetDist(p-e.yxy).x,  GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        marchCount++;\n         \n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    float intensity=1.0;\n     vec3 result;\n\t \n     result = lightingv3( nor, p, plight_pos,  rd,ro)*colobj*5.0;\n     \n    if (mObj.blnShadow==true)\n    { \tfloat fhadow=GetShadow(p,plight_pos);  \treturn result*fhadow;     }\n    else\n      return result; \n}\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n     return colobj;\n}\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*5.0,1000.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n        \n \tlight_pos1= vec3(10.0, 20.0, 10.0 );  light_color1 = vec3( 1.0 );\n \t//light_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n    vec3 ro = rotate_y( vec3(t,0.0,-30.0), radians(-45.))+  vec3(0.0,7.0,0.0);      \n    vec3 rd=normalize(vec3(uv,1.0));\n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd; mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p; mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    //result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    //result/=1.25;\n    col= result*dif1;\n    \n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(MAX_DIST) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(1.,1.,1.), //1\nvec3(1.,0.,0.),  //2\nvec3(0.,1.,0.),   //3\nvec3(0.,0.,1.),   //4\nvec3(1.,1.,0.),  //5\nvec3(0.,1.,1.),  //6 \nvec3(1.,0.,1),   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(1., 3., 2.0) //31\n\n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}