{
    "Shader": {
        "info": {
            "date": "1568912469",
            "description": "Perlin Noise Test 001",
            "flags": 0,
            "hasliked": 0,
            "id": "tstGz2",
            "likes": 1,
            "name": "Perlin Noise Test 0920",
            "published": 3,
            "tags": [
                "perlin"
            ],
            "usePreview": 0,
            "username": "Lyla",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "int[] m_hash = int[](\n    151,160,137, 91, 90, 15,131, 13,201, 95, 96, 53,194,233,  7,225,\n    140, 36,103, 30, 69,142,  8, 99, 37,240, 21, 10, 23,190,  6,148,\n    247,120,234, 75,  0, 26,197, 62, 94,252,219,203,117, 35, 11, 32,\n    57,177, 33, 88,237,149, 56, 87,174, 20,125,136,171,168, 68,175,\n    74,165, 71,134,139, 48, 27,166, 77,146,158,231, 83,111,229,122,\n    60,211,133,230,220,105, 92, 41, 55, 46,245, 40,244,102,143, 54,\n    65, 25, 63,161,  1,216, 80, 73,209, 76,132,187,208, 89, 18,169,\n    200,196,135,130,116,188,159, 86,164,100,109,198,173,186,  3, 64,\n    52,217,226,250,124,123,  5,202, 38,147,118,126,255, 82, 85,212,\n    207,206, 59,227, 47, 16, 58, 17,182,189, 28, 42,223,183,170,213,\n    119,248,152,  2, 44,154,163, 70,221,153,101,155,167, 43,172,  9,\n    129, 22, 39,253, 19, 98,108,110, 79,113,224,232,178,185,112,104,\n    218,246, 97,228,251, 34,242,193,238,210,144, 12,191,179,162,241,\n    81, 51,145,235,249, 14,239,107, 49,192,214, 31,181,199,106,157,\n    184, 84,204,176,115,121, 50, 45,127,  4,150,254,138,236,205, 93,\n    222,114, 67, 29, 24, 72,243,141,128,195, 78, 66,215, 61,156,180,\n \n    151,160,137, 91, 90, 15,131, 13,201, 95, 96, 53,194,233,  7,225,\n    140, 36,103, 30, 69,142,  8, 99, 37,240, 21, 10, 23,190,  6,148,\n    247,120,234, 75,  0, 26,197, 62, 94,252,219,203,117, 35, 11, 32,\n    57,177, 33, 88,237,149, 56, 87,174, 20,125,136,171,168, 68,175,\n    74,165, 71,134,139, 48, 27,166, 77,146,158,231, 83,111,229,122,\n    60,211,133,230,220,105, 92, 41, 55, 46,245, 40,244,102,143, 54,\n    65, 25, 63,161,  1,216, 80, 73,209, 76,132,187,208, 89, 18,169,\n    200,196,135,130,116,188,159, 86,164,100,109,198,173,186,  3, 64,\n    52,217,226,250,124,123,  5,202, 38,147,118,126,255, 82, 85,212,\n    207,206, 59,227, 47, 16, 58, 17,182,189, 28, 42,223,183,170,213,\n    119,248,152,  2, 44,154,163, 70,221,153,101,155,167, 43,172,  9,\n    129, 22, 39,253, 19, 98,108,110, 79,113,224,232,178,185,112,104,\n    218,246, 97,228,251, 34,242,193,238,210,144, 12,191,179,162,241,\n    81, 51,145,235,249, 14,239,107, 49,192,214, 31,181,199,106,157,\n    184, 84,204,176,115,121, 50, 45,127,  4,150,254,138,236,205, 93,\n    222,114, 67, 29, 24, 72,243,141,128,195, 78, 66,215, 61,156,180\n);\n\n\nvec2[] m_gradients2D= vec2[]\n(\n    vec2( 1.0, 0.0),\n    vec2(-1.0, 0.0),\n    vec2( 0.0, 1.0),\n    vec2( 0.0,-1.0),\n    normalize(vec2( 1.0, 1.0)),\n    normalize(vec2(-1.0, 1.0)),\n    normalize(vec2( 1.0,-1.0)),\n    normalize(vec2(-1.0,-1.0))\n);\n\nfloat Dot(vec2 g, float x, float y)\n{\n    return g.x * x + g.y * y;\n}\n\nfloat Fade(float t)\n{\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\n#define SPEED 0.05\n#define NOISE_GRID 8.0\n\n#define HASH_SIZE 255\n#define GRADIENTS_SIZE 7\n\nvec2 hash22(vec2 p)\n{\n    p = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)));\n    \n    return normalize(-1.0 + 2.0 * fract(sin(p)*43758.5453123));\n    //return -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n}\n\nfloat GetNoise(vec2 pos)\n{\n    /*\n    int x0 = int(pos.x) & HASH_SIZE;\n    int y0 = int(pos.y) & HASH_SIZE;\n    \n    int x1 = x0+1;\n    int y1 = y0+1;\n    \n    float xi = pos.x - float(x0);\n    float yi = pos.y - float(y0);\n    float xj = xi-1.0;\n    float yj = yi-1.0;\n    \n    vec2 g00 = m_gradients2D[m_hash[x0 + m_hash[y0]] & GRADIENTS_SIZE ];\n    vec2 g10 = m_gradients2D[m_hash[x1 + m_hash[y0]] & GRADIENTS_SIZE ];\n    vec2 g01 = m_gradients2D[m_hash[x0 + m_hash[y1]] & GRADIENTS_SIZE ];\n    vec2 g11 = m_gradients2D[m_hash[x1 + m_hash[y1]] & GRADIENTS_SIZE ];\n    \n    float v00 = Dot(g00, xi, yi);\n    float v10 = Dot(g10, xj, yi);\n\tfloat v01 = Dot(g01, xi, yj);\n    float v11 = Dot(g11, xj, yj);\n    \n    float xDLearp = mix(v00, v10, Fade(xi));\n    float xULearp = mix(v10, v11, Fade(xi));\n    \n    return mix(xDLearp, xULearp, Fade(yi));\n*/\n    vec2 pi = floor(pos);\n    vec2 pf = pos - pi;\n    \n    \n    //vec2 w =  pf * pf * (3.0 - 2.0 * pf);\n    vec2 w =  pf * pf * pf * (pf * (pf * 6.0 - 15.0) + 10.0);\n    \n    return mix(mix(dot(hash22(pi + vec2(0.0, 0.0)), pf - vec2(0.0, 0.0)), \n                   dot(hash22(pi + vec2(1.0, 0.0)), pf - vec2(1.0, 0.0)), w.x), \n               mix(dot(hash22(pi + vec2(0.0, 1.0)), pf - vec2(0.0, 1.0)), \n                   dot(hash22(pi + vec2(1.0, 1.0)), pf - vec2(1.0, 1.0)), w.x),\n               w.y);\n}\n\nvec4 GetColor(float f)\n{\n    return vec4((f + abs(f*sin(iTime)))/2.0,16.0*cos(iTime)/255.0, 24.0/255.0, 1.0);\n    //return vec4(sin(iTime * f), 8.0/255.0, 56.0/255.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    vec2 uv = p * vec2(iResolution.x/iResolution.y, 1.0);\n    float noise = GetNoise(uv * NOISE_GRID);\n    \n    float f = noise * 0.5 + 0.5;\n    fragColor = GetColor(f);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}