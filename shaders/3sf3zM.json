{
    "Shader": {
        "info": {
            "date": "1545341741",
            "description": "Little 2D winter scene for the holidays!",
            "flags": 0,
            "hasliked": 0,
            "id": "3sf3zM",
            "likes": 5,
            "name": "Winter Land",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "simple",
                "christmas",
                "moon",
                "field",
                "snow",
                "winter",
                "snowman",
                "holdiays"
            ],
            "usePreview": 1,
            "username": "BeardThings",
            "viewed": 2245
        },
        "renderpass": [
            {
                "code": "float rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand(float c)\n{\n    return rand(vec2(c)) + 0.2;\n}\n\nconst vec4 scb = vec4(0.2, 0.2, 0.4, 1.0);\nconst vec4 sch = vec4(0.2, 0.3, 0.5, 1.0) * 1.7;\n\nfloat clouds;\n\nvec4 snow(vec2 uv)\n{\n    const float columnWidth = 20.0;\n    const float maxSnowflakeRadius = (1.0 / (columnWidth * 2.0)) * 0.3;\n    \n    float column = floor(uv.x * columnWidth);\n    float speed = rand(column);\n    float height = rand(column) + iTime * 0.1 * speed;\n    height = 1.0 - (mod(height, 1.0 + maxSnowflakeRadius * 2.0) - maxSnowflakeRadius);\n    \n    vec2 pos = vec2((column + 0.5+ sin(height+iTime*rand(column)) * rand(column) * 0.2) / columnWidth, height);\n    \n    float snowflakeSize = maxSnowflakeRadius * rand(column);\n    \n    return vec4(max(snowflakeSize - distance(uv, pos), 0.0) / snowflakeSize);\n}\n\nvec4 field(vec2 uv)\n{\n    vec2 ouv = uv;\n    \n    const vec4 bb = vec4(0.2, 0.6, 1.0, 1.0);\n    const vec4 hb = vec4(0.8, 0.9, 1.0, 1.0);\n    \n    uv.x *= 0.15;\n    float g = distance(uv, vec2(0.8, -0.55));\n    float sg = 1.0 - smoothstep(0.9, 1.0, g);\n    float hg = 1.0 - smoothstep(0.997, 1.0, g);\n    \n    vec4 gc = mix(hb, bb, sg);\n    \n    vec4 bb2 = mix(vec4(0.2, 0.6, 1.0, 1.0), sch, 0.4);\n    vec4 hb2 = mix(vec4(0.8, 0.9, 1.0, 1.0), sch, 0.4);\n    \n    uv.x *= 3.0;\n    float g2 = distance(uv, vec2(0.7, -0.65));\n    float sg2 = 1.0 - smoothstep(0.95, 1.0, g2);\n    float hg2 = 1.0 - smoothstep(0.998, 1.0, g2);\n    \n    vec4 gc2 = mix(hb2 * 0.9, bb2, sg2);\n    \n    vec4 bb3 = mix(vec4(0.2, 0.6, 1.0, 1.0), sch, 0.2);\n    vec4 hb3 = mix(vec4(0.8, 0.9, 1.0, 1.0), sch, 0.2);\n    \n    uv.x *= 0.5;\n    float g3 = distance(uv, vec2(-0.30, -0.65));\n    float sg3 = 1.0 - smoothstep(0.92, 1.0, g3);\n    float hg3 = 1.0 - smoothstep(0.997, 1.0, g3);\n    \n    vec4 gc3 = mix(hb3 * 0.95, bb3, sg3);\n    \n    vec4 f = mix(gc3, gc, hg);\n    f = mix(gc2, f, max(hg3, hg));\n    \n    const float sf = 3.0;\n    float s = mix(min(pow(rand(floor(ouv * 1000.0) + floor(iTime / sf)), 1000.0), 1.0), \n                  min(pow(rand(floor(ouv * 1000.0) + floor(iTime / sf + 1.0)), 1000.0), 1.0), fract(iTime / sf)) ;\n    return vec4(f.rgb + s, max(max(hg, hg3), hg2));\n}\n\nvec4 decorations(vec2 uv)\n{\n    uv -= vec2(0.0, -0.05);\n    \n    float l = 1.0 - smoothstep(0.97, 0.99, length((uv - vec2(1.3, 0.25)) * 8.0)); \n    float m = 1.0 - smoothstep(0.97, 0.99, length((uv - vec2(1.3, 0.38)) * 10.0));\n    float s = 1.0 - smoothstep(0.97, 0.99, length((uv - vec2(1.3, 0.495)) * 12.0));\n\n    float angle = 3.14 * 0.53;\n    float cut = smoothstep(0.005, 0.00, dot(uv, vec2(cos(angle), sin(angle))) + -0.06);\n    float sm = min(max(max(l, m), s), 1.0 - cut);\n    \n    const vec3 sc = vec3(0.4, 0.6, 1.0) * 1.3;\n    vec4 smc = vec4(sc, sm);\n    \n    float b = 1.0 - smoothstep(0.95, 0.99, length((uv - vec2(1.3, 0.35)) * 100.0));\n    b = max(b, 1.0 - smoothstep(0.95, 0.99, length((uv - vec2(1.3, 0.385)) * 100.0)));\n    b = max(b, 1.0 - smoothstep(0.95, 0.99, length((uv - vec2(1.3, 0.42)) * 100.0)));\n    b = max(b, 1.0 - smoothstep(0.95, 0.99, length((uv - vec2(1.275, 0.515)) * 100.0)));\n    b = max(b, 1.0 - smoothstep(0.95, 0.99, length((uv - vec2(1.325, 0.515)) * 100.0)));\n    vec4 bc = vec4(0.2,0.2,0.2,1.0);\n    \n    uv -= vec2(1.23, -0.008);\n    float x = uv.x * 0.125 * step(uv.x, 0.1);\n    float n = (1.0 - smoothstep(x, x+0.0025, abs(uv.y - 0.5))) * step(uv.x, 0.075) * step(0.01, uv.x);\n    \n    vec4 o = vec4(1.0, 0.4, 0.0, n);\n    \n\treturn mix(mix(smc, bc, b), o, n);\n}\n\nvec4 moon(vec2 uv)\n{\n    float m = 1.0 - smoothstep(0.98, 0.99, length(uv - vec2(0.9, 1.0)) * 1.85);\n    \n    return vec4(mix(vec4(1.0,1.0,0.75,m)*1.2, scb, 0.1 + clouds * 0.9).rgb, m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    clouds = textureLod(iChannel0, (uv + vec2(iTime * 0.075, 0.0)) * vec2(0.1,0.4), 4.0).r;\n    \n\n    float bm = pow(distance(uv * vec2(0.2, 1.0), vec2(0.5, 0.2))+0.1, 1.0);\n\tvec4 b = mix(scb, mix(mix(sch, scb, clouds), sch, uv.y * 2.0), 1.0 - min(bm, 1.0));\n\n    // Output to screen\n    vec4 s = snow(uv);\n    vec4 f = field(uv);\n    vec4 h = decorations(uv);\n    vec4 m = moon(uv);\n    fragColor = mix(mix(mix(b, m, m.a), f, f.a), h, h.a) + s;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}