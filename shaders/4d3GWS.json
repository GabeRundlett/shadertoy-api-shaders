{
    "Shader": {
        "info": {
            "date": "1451910472",
            "description": "An implementation of Gray Scott Model of Reaction Diffusion using multipass shaders . When your display is resized you can use the space bar in order for the image to be resized too.",
            "flags": 48,
            "hasliked": 0,
            "id": "4d3GWS",
            "likes": 28,
            "name": "Gray Scott Reaction Diffusion",
            "published": 3,
            "tags": [
                "2d",
                "multipass"
            ],
            "usePreview": 0,
            "username": "Eybor",
            "viewed": 2393
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n        \n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(texture(iChannel0, vec2(0.)).w == 0. || texture(iChannel2,  vec2(0.126953125, .25)).x > 0.)\n   \t{\n        if(fragCoord.x > iResolution.x/4. && fragCoord.x < 3.*iResolution.x/4. &&\n           fragCoord.y > iResolution.y/4. && fragCoord.y < 3.*iResolution.y/4.)\n        {\n            fragColor.xyz = vec3(.5);\n        }\n        else\n        { \n            fragColor.xyz = vec3(1.);\n        }\n        fragColor.w = 1.; \n    }\n\telse\n    {\n        vec3 laplacian =    texture(iChannel0, (fragCoord-vec2(0., 1.))/iResolution.xy).rgb +\n                            texture(iChannel0, (fragCoord-vec2(1., 0.))/iResolution.xy).rgb -\n                         4.*texture(iChannel0, fragCoord/iResolution.xy).rgb +\n            \t\t\t \ttexture(iChannel0, (fragCoord+vec2(1., 0.))/iResolution.xy).rgb +\n            \t\t\t \ttexture(iChannel0, (fragCoord+vec2(0., 1.))/iResolution.xy).rgb;\n                \n        vec3 vu = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n        vec3 vv = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n               \n        fragColor = vec4(vu + params.z*laplacian+params.x*(1.-vu)-vu*vv*vv, 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(texture(iChannel1, vec2(0.)).w == 0. || texture(iChannel2,  vec2(0.126953125, .25)).x > 0.)\n   \t{\n        if(fragCoord.x > iResolution.x/4. && fragCoord.x < 3.*iResolution.x/4. &&\n           fragCoord.y > iResolution.y/4. && fragCoord.y < 3.*iResolution.y/4.)\n        {\n            fragColor.xyz = vec3(.25);\n        }\n        else\n        {\n            fragColor.xyz = vec3(0.);\n        }\n        fragColor.w = 1.;\n    }\n    else\n    {\n        vec3 laplacian =    texture(iChannel1, (fragCoord-vec2(0., 1.))/iResolution.xy).rgb +\n                         \ttexture(iChannel1, (fragCoord-vec2(1., 0.))/iResolution.xy).rgb -\n                         4.*texture(iChannel1, fragCoord/iResolution.xy).rgb +\n            \t\t\t \ttexture(iChannel1, (fragCoord+vec2(1., 0.))/iResolution.xy).rgb +\n            \t\t\t \ttexture(iChannel1, (fragCoord+vec2(0., 1.))/iResolution.xy).rgb;\n\n        vec3 vu = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n        vec3 vv = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n        \n        fragColor = vec4(vv + params.w*laplacian-(params.x+params.y)*vv+vu*vv*vv, 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 params = vec4(.04,.06,.2,.1);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}