{
    "Shader": {
        "info": {
            "date": "1686227713",
            "description": "A pie chart with fake 3D and contour highlighting.",
            "flags": 0,
            "hasliked": 0,
            "id": "mlVSRV",
            "likes": 13,
            "name": "Pie Chart with fake 3D",
            "published": 3,
            "tags": [
                "chart",
                "pie",
                "camembert"
            ],
            "usePreview": 0,
            "username": "LLB",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "// Sorted values between 0 and 1, with 1 at the end.\nfloat values[] = float[](0.35, 0.6, 0.8, 0.9, 0.95, 1.);\n\nconst float TAU = 6.28318;\nconst float RADIUS = 0.3;\nconst float DEPTH = 0.05;\nfloat ROTATION = 0.;\n\nint sliceId(float value) {\n  for (int i = 0; i < values.length(); i++) {\n    if (values[i] > value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nvec3 palette(float t) {   // https://iquilezles.org/articles/palettes/\n  return vec3(0.7) + vec3(0.3) * cos(TAU * (vec3(1.) * t + vec3(0., 0.1, 0.3)));\n}\n\nvec3 idToColor(int id) {\n  return palette(float(id) / float(values.length()));\n}\n\nint uv2id(vec2 uv) {\n  float angle = atan(uv.y, uv.x) / TAU + 0.5;\n  angle = mod(angle + ROTATION, 1.);\n  return sliceId(angle);\n}\n\nvec3 uv2col(vec2 uv) {\n  return idToColor(uv2id(uv));\n}\n\nvec3 depth(vec2 uv) {\n  float x = uv.x;\n  float y = - sqrt(RADIUS*RADIUS - x*x);\n  \n  vec3 col = vec3(0.1); // background color\n\n  if (uv.y < 0. && uv.x >= -RADIUS && uv.x < RADIUS) {\n    col = mix(col, uv2col(vec2(x, y) * 0.5) * 0.5, 1. - smoothstep(DEPTH, DEPTH + 0.005, y - uv.y));\n  }\n  return col;\n}\n\n// Shading based on the distance between the point and the nearest border.\nfloat shading(vec2 uv) {\n  int id = uv2id(uv);\n  \n  int prevId = id - 1 < 0 ? values.length() : id - 1;\n  float prevAngle = (values[prevId] - 0.5 - ROTATION) * TAU;\n  vec2 prev = vec2(cos(prevAngle), sin(prevAngle)) * length(uv);\n\n  float nextAngle = (values[id] - 0.5 - ROTATION) * TAU;\n  vec2 next = vec2(cos(nextAngle), sin(nextAngle)) * length(uv);\n  \n  float minEdge = min(distance(prev, uv), distance(next, uv));\n  float dist = min(minEdge, abs(RADIUS - length(uv)) * .4);\n  \n  return\n      mix(0.7, 1., pow(smoothstep(0.0, 0.1, dist), 0.15))\n    * mix(1.3, 0.8, smoothstep(0., 0.4, length(uv)))\n    * mix(0.5, 1., smoothstep(0., 0.008, pow(dist, 0.8)))\n    ;\n}\n\nvec3 pie(vec2 uv) {\n  float dist = length(uv);\n  vec3 col = uv2col(uv);\n  col *= shading(uv);\n  \n  return mix(col, depth(uv), smoothstep(RADIUS, RADIUS + 0.001, dist));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.y *= 0.8;\n    \n    // Animation\n    ROTATION = iTime * 0.05;\n    values[1] = 0.6 + sin(iTime) * 0.1;\n\n    fragColor = vec4(pie(uv), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}