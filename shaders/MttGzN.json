{
    "Shader": {
        "info": {
            "date": "1468253603",
            "description": "Sphere traced cube field. Wanted to try moving the camera around.",
            "flags": 0,
            "hasliked": 0,
            "id": "MttGzN",
            "likes": 2,
            "name": "Test Cube Field",
            "published": 3,
            "tags": [
                "spheretracing"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 787
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 1000\n#define MAX_DIST 100.0\n#define EPSILON 0.001\n\nvec3 camPos = vec3(2.0 * sin(iTime), 4.0 * cos(iTime), iTime * 2.0);\nvec3 lightPos = camPos + vec3(0.0, 0.0, 1.0);\n\nfloat map(vec3 p){\n    vec3 q = mod(p, 8.0) - 4.0;\n    return length(max(abs(q)-1.5,0.0));;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n \tfloat t = 0.0;\n    float d = 0.0;\n    for(int iter = 0; iter < MAX_ITER; iter++){\n        d = map(ro + rd * t);\n        if(d < EPSILON){\n            break;\n        }\n        if(t > MAX_DIST){\n        \tt = 0.0;\n            break;\n    \t}\n        t += d;\n    }\n    return t;\n}\n\nmat3 rotY(float d){\n    float c = cos(d);\n    float s = sin(d);\n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c);\n}\nvec3 normal(vec3 p){\n    return vec3(map(vec3(p.x + EPSILON, p.yz)) - map(vec3(p.x - EPSILON, p.yz)),\n                map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n                map(vec3(p.xy, p.z + EPSILON)) - map(vec3(p.xy, p.z - EPSILON)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 ro = camPos;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    rd *= rotY(iTime / 2.0);\n    float d = trace(ro, rd);\n    vec3 col;\n    if(d == 0.0){\n        col = vec3(0.0);\n    }else{\n        vec3 x = ro + (rd * d);\n    \tvec3 l = normalize(lightPos - x);\n        vec3 n = normalize(normal(x));\n    \tfloat nl = dot(n, l);\n    \n    \tvec3 amb = 0.25 * vec3(1.0);\n    \t\n        vec3 diff = 0.8 * vec3(0.0, 1.0, 1.0) * max(nl, 0.0);\n        \n        col = amb + diff;\n        \n        col *= vec3(1.0 / exp(d * 0.08));\n    }\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}