{
    "Shader": {
        "info": {
            "date": "1577655258",
            "description": "watch, while listening to some 2000s neurofunk.\nmodDist looks cool at 0.4\n\nMDTMJVM = Middecembertomidjanuaryvember\nA month of coding stuff.\nCoding some of the days at http://twitch.tv/wwrighter",
            "flags": 32,
            "hasliked": 0,
            "id": "tltGW2",
            "likes": 11,
            "name": "[twitch] Day 11 of MDTMJVM",
            "published": 3,
            "tags": [
                "gyroid",
                "web"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 562
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // thx Shane for showing how to radial blur!\n    #define t(coords) texture(iChannel0, coords).xyz\n    vec2 uv = (fragCoord)/iResolution.xy;\n    vec2 uvNorm = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n \n    float strength = 0.9;\n    \n    #define taps 20\n    float r = r11(float(iFrame));\n    //vec2 origin = vec2(sin(iTime*0.1)*0.5,0.5);\n    vec3 lookAt = LOOKAT;\n    vec2 origin = vec2( 0.5 + LOOKAT.x*0.2,0.5);\n    vec3 col = t(uv);\n    vec2 dir = normalize(uv - origin);\n    vec2 uvs = uv;\n    float stepSize = (0.01)*clamp(pow(length(uv - origin)*1.4, 2.),0., 0.4);\n    \n    for (int i = 0; i < taps; i++) {\n    \tcol += t(uvs)*strength;\n    \tuvs -= dir * stepSize;\n        strength *= 0.91+ r*0.001 ;\n    }\n    col *= 0.1;\n    \n    col = pow(col, 1. + vec3(length(uvNorm)*1.4  + sin(iTime)*0.3));\n    //col /= float(taps);\n    \n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define LOOKAT vec3(0. + sin(iTime)*0.2,0,1)\nfloat r11(float i){return fract(sin(i*1125.125124));}\nvec3 ACESFilm( vec3 x )\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return max(vec3(.0), min(vec3(1.0), (x*(a*x+b))/(x*(c*x+d)+e) ) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define rot(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n#define pi acos(-1.)\n\n#define dmin(a, b) (a.x < b.x) ? a : b // takes 2 vec2, does a minimum of them \n#define dmax(a, b) (a.x > b.x) ? a : b\n#define pmod(p, x) (mod(p,x) - x*0.5)\n\n#define modDist 0.6\n\nfloat camZ;\n\nvec2 pRotated;\nfloat id ;\n    \n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv) {\n  vec3 dir = normalize(lookAt - ro);\n  vec3 right = normalize(cross(vec3(0,1,0), dir));\n  vec3 up = normalize(cross(dir, right));\n  \n  return normalize(dir*1. + right*uv.x*1. + up*uv.y*1.);\n}\n\n//   thx to the shadermaster for these cool functions\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n    \nfloat smax( float d1, float d2, float k ) {\nfloat h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\nreturn mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\n\n\n\nfloat sdGyr(vec3 p) {\n  float d = 1e7;\n  \n    \n  float r = r11(id);\n  p.xy *= rot(0.5 + p.z*5.2 + p.z*6.7*r);\n  p.zy *= rot(0.1-0.1 *r);\n  p.xy *= rot(sin(p.x*3.*(1.-r)));\n  p.xy *= rot(sin(p.z*5.*(1.-r)));\n  p.xy *= rot(sin(p.y*5.*(1.-r) + iTime*0.1));\n  \n    \n  p.xy *= rot(sin(r*pi*2.+ iTime));\n  p.xy *= rot(sin(p.y*1. + iTime*0.1));\n  //p.xy *= rot(0.4 + p.z*4.7);\n    \n  p.z -= modDist;\n  float dWall = abs(p.z*1.) - 0.38;\n    \n  pRotated = p.xy;\n  p *= 1.;\n  float scale = 50.;\n  float dGyrA = (dot(sin(p*scale), cos(p.yzx*scale)) + 4.3 ) / scale;\n  float dGyrB = (dot(sin(p*scale), cos(p.yzx*scale)) + 4.3 ) / scale;\n  \n\n  d = opSmoothIntersection(dGyrA,dWall,0.01);\n  \n  \n  return d;\n}\n\nvec3 cameraPath(float z) {\n\treturn vec3(0. + sin(z*0.7)*0.25,0.,0.);\n}\n\nfloat sdWeb(vec3 p) {\n  float d = 1e7;\n  \n  d = min(d, sdGyr(p));\n\n  return d;\n}\nvec2 map(vec3 p) {\n  vec2 d = vec2(10e3);\n  \n  vec3 z = p;\n  id = floor(p.z);\n  p.z = pmod(p.z, modDist);\n  float scale = 13.;\n  d = dmin(d, vec2((sdWeb(p)), 1.));\n    \n  float dTunn = length(z.xy - cameraPath(z.z).xy) + 0.3;\n  d.x = opSmoothIntersection(d.x, -dTunn, 0.5 - abs(camZ - z.z)*0.2  );\n  return (abs(d) - 0.05)*0.1 + 0.0001;\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 t = vec2(0.001, 0.);\n  return normalize(map(p).x - vec3(\n    map(p - t.xyy).x,\n    map(p - t.yxy).x,\n    map(p - t.yyx).x\n  ));\n}\n\n\n\nvec3 glow = vec3(0);\n\n#define spectraB(x,t) (0.4 + 0.1*sin(vec3(0.9,1.5,2.6)*t + x )) \n#define spectra(x,t) (0.5 + 0.5*sin(vec3(0.6,1.5,1.6)*sin(x) + t + 1. )) \n#define rotSpeed 1.\nvec4 render(vec2 uv) {\n  vec3 col = vec3 (0);\n\n    \n  vec3 ro = vec3(0.,0,iTime) + cameraPath(iTime);\n  camZ = ro.z;\n  vec3 lookAt = ro + LOOKAT;\n    \n    uv *= rot(sin(iTime)*0.2);\n  vec3 rd = getRd(ro, lookAt, uv);\n  \n  vec3 p = ro; float t = 0.;\n  \n  for (int i = 0; i < 190; i++) {\n    vec2 d = map(p);\n    glow += spectra(d.x - 8. + p.z - sin(iTime), 18. + iTime*0.5)*0.1;\n    if(d.x < 0.001) {\n        \n      vec3 tex = texture(iChannel0, pRotated*4.).xyz;\n      vec3 n = getNormal(p);\n      vec3 lDir = normalize(vec3(0.,0.,1.));\n      float diff = max(dot(lDir, n), 0.);\n      float fres = pow(max(dot(-rd, n), 0.), 5.);\n      //col +=diff*0.1 + fres*0.1;\n        \n      tex = pow(tex, vec3(3.));\n      \n      //col += length(tex.xyz)*0.1*diff + fres*0.1*diff*diff*diff;\n      \n      col += pow(fres, 2.)*length(tex) * 0.05;\n        \n      break;\n      }\n    if(t > 100.) {\n  \n      break;\n    }\n      \n    t += d.x;\n    p = ro + rd*t;\n  }\n  col += glow*0.01;\n  col += length(glow)*glow*0.02*vec3(0.5,0.6,0.9);\n  col *= 0.4;\n  col = pow(col, vec3(0.45));\n  \n  return vec4(col, 0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //TRIPPY = (iTime < 10.) ? false : true;\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec4 col = render(uv);\n\n    fragColor = vec4(col);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}