{
    "Shader": {
        "info": {
            "date": "1629801700",
            "description": "Shader simulating a pentile RGB sub-pixel grid. Antialiased through procedural filtering",
            "flags": 0,
            "hasliked": 0,
            "id": "fd33DN",
            "likes": 4,
            "name": "Pentile LCD display",
            "published": 3,
            "tags": [
                "grid",
                "checker",
                "display"
            ],
            "usePreview": 0,
            "username": "OskarSwierad",
            "viewed": 475
        },
        "renderpass": [
            {
                "code": "// Author: Oskar Swierad, 2021\n// Copyright and related rights waived via CC0\n\nconst float TILING = 81.0; // Spatial frequency of the pattern\nconst vec3 SUBPIXEL_WEIGHTS = vec3(0.8, 0.5, 1.0);\nconst vec3 LUM_WEIGHTS_LINEAR = vec3(0.213, 0.515, 0.272); // Must sum to 1.0\nconst float COLOR_INTENSITY = 0.8; // Range [0,1]\nconst float INTENSITY = 0.5; // Range [0,1]\n\nfloat filteredSquares( in vec2 p, in vec2 dpdx, in vec2 dpdy, float N )\n{\n    // https://iquilezles.org/articles/filterableprocedurals\n    vec2 w = max(abs(dpdx), abs(dpdy));\n    vec2 a = p + 0.5*w;                        \n    vec2 b = p - 0.5*w;           \n    vec2 i = (floor(a)+min(fract(a)*N,1.0)-\n              floor(b)-min(fract(b)*N,1.0))/(N*w);\n    return i.x*i.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.y / iResolution.x;\n    vec2 uv = fragCoord/iResolution.xy * vec2(1.0, aspectRatio);\n    \n    vec2 uvTiledR1 = (uv) * TILING + vec2(0.25);\n    vec2 uvTiledR2 = (uv) * TILING + vec2(0.75, 0.75);\n    \n    vec2 uvTiledG = uv * 2.0 * TILING;\n    \n    vec2 uvTiledB1 = (uv) * TILING + vec2(0.25, 0.75);\n    vec2 uvTiledB2 = (uv) * TILING + vec2(-0.25, 0.25);\n\n    float maskR = filteredSquares(uvTiledR1, dFdx(uvTiledR1), dFdy(uvTiledR1), 6.0) +\n                  filteredSquares(uvTiledR2, dFdx(uvTiledR2), dFdy(uvTiledR2), 6.0);\n    float maskG = filteredSquares(uvTiledG,  dFdx(uvTiledG),  dFdy(uvTiledG),  3.0);\n    float maskB = filteredSquares(uvTiledB1, dFdx(uvTiledB1), dFdy(uvTiledB1), 6.0) + \n                  filteredSquares(uvTiledB2, dFdx(uvTiledB2), dFdy(uvTiledB2), 6.0);\n    \n    vec3 subpixels = vec3(maskR, maskG, maskB);\n    subpixels *= SUBPIXEL_WEIGHTS;\n    \n    vec3 lcd = mix(\n        vec3(dot(subpixels, LUM_WEIGHTS_LINEAR)), // Grayscale\n        subpixels * SUBPIXEL_WEIGHTS,\n        COLOR_INTENSITY\n    );\n    lcd *= 8.0; // Compensate for lost luminance\n    \n    vec2 vidAspectRatio = vec2(1.0, 640.0/480.0);\n    vec2 videoUV = uv;\n    videoUV = round(videoUV * TILING * 2.0) / (TILING * 2.0);\n    videoUV *= vidAspectRatio;\n    //videoUV += vec2(0.5) / TILING;\n    vec3 video = texture(iChannel0, videoUV).rgb;\n    video = pow(video, vec3(2.2)); // De-gamma\n    \n    vec3 outColor = mix(\n        video * 0.2,\n        video * lcd,\n        INTENSITY\n    );\n    \n    outColor = pow(outColor, vec3(1.0 / 2.2)); // Gamma\n    fragColor = vec4(outColor,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}