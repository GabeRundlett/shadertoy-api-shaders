{
    "Shader": {
        "info": {
            "date": "1539259482",
            "description": "Ray marcher with a very simple floor",
            "flags": 0,
            "hasliked": 0,
            "id": "ltdBWr",
            "likes": 1,
            "name": "Ray marching a floor",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "MZein",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nfloat ground(in vec3 samplePoint) {\n    return samplePoint.y;\n}\n\nfloat scene(vec3 samplePoint) {\n    return ground(samplePoint);\n}\n\nfloat shortestDistanceToSurface(inout vec3 samplePos, vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        samplePos = eye + depth * marchingDirection;\n        float dist = scene(samplePos);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 spec(in vec3 samplePos, in vec3 eye, in vec3 lightPos) {\n    vec3 N = vec3(0.0, 1.0, 0.0);\n    vec3 L = normalize(lightPos - samplePos);\n    vec3 V = normalize(eye - samplePos);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        return vec3(0.4, 0.4, 0.4) * (vec3(1.0, 0.0, 0.0) * dotLN);\n    }\n    return vec3(0.4, 0.4, 0.4) * (vec3(1.0, 0.0, 0.0) * dotLN + 1.0 * pow(dotRV, 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0.0, 0.5, 5.0);\n    vec3 samplePos = vec3(0.0, 0.0, 0.0);\n    float dist = shortestDistanceToSurface(samplePos, eye, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n\t\treturn;\n    }\n    \n    vec3 lightPos = vec3(0.0, 1.0 + sin(iTime) * 0.5, 0.0);\n    \n    vec4 specular = vec4(spec(samplePos, eye, lightPos).xyz, 1.0);\n    \n    \n    fragColor = vec4(1.0, 0.0, 0.0, 1.0) * specular;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}