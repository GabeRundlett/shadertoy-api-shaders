{
    "Shader": {
        "info": {
            "date": "1472785038",
            "description": "FXAA example",
            "flags": 32,
            "hasliked": 0,
            "id": "XlVGRz",
            "likes": 3,
            "name": "FXAA example",
            "published": 3,
            "tags": [
                "fxaa",
                "multipass"
            ],
            "usePreview": 0,
            "username": "fernandomv3",
            "viewed": 1194
        },
        "renderpass": [
            {
                "code": "const float FXAA_SPAN_MAX = 8.0;\nconst float FXAA_REDUCE_MUL = 1.0/8.0;\nconst float FXAA_REDUCE_MIN = 1.0/128.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 offset = 1.0/iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 nw = texture(iChannel0, uv + vec2(-1.0, -1.0) * offset).rgb;\n    vec3 ne = texture(iChannel0, uv + vec2( 1.0, -1.0) * offset).rgb;\n    vec3 sw = texture(iChannel0, uv + vec2(-1.0,  1.0) * offset).rgb;\n    vec3 se = texture(iChannel0, uv + vec2( 1.0,  1.0) * offset).rgb;\n    vec3 m  = texture(iChannel0, uv).rgb;\n\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(nw, luma);\n    float lumaNE = dot(ne, luma);\n    float lumaSW = dot(sw, luma);\n    float lumaSE = dot(se, luma);\n    float lumaM  = dot(m,  luma);\n\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    vec2 dir = vec2(\n        -((lumaNW + lumaNE) - (lumaSW + lumaSE)),\n        ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\n\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX), dir * rcpDirMin)) * offset;\n\n    vec3 rgbA = 0.5 * (texture(iChannel0, uv + dir * (1.0 / 3.0 - 0.5)).xyz + texture(iChannel0, uv + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (texture(iChannel0, uv + dir * -0.5).xyz + texture(iChannel0, uv + dir * 0.5).xyz);\n    float lumaB = dot(rgbB, luma);\n    if (lumaB < lumaMin || lumaB > lumaMax) {\n        fragColor = vec4(rgbA, 1.0);\n    } else {\n        fragColor = vec4(rgbB, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float smin( float a, float b ){\n    float k = 0.1;\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdPlane(vec3 p){\n\treturn p.y;\n}\n\nfloat sdTorus( vec3 p, vec2 t ){\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdSphere(vec3 p, float r){\n\treturn length(p) -r;\n}\n\nfloat opU(float d1, float d2){\n\treturn min(d1,d2);  \n}\n\nfloat opSU(float d1,float d2){\n\treturn smin(d1,d2);\n}\n\nfloat map(vec3 p){\n    vec3 c = vec3(4.0,4.0,4.0);\n    vec3 q = mod(p,c) - 0.5*c;\n    float res = sdSphere(q - vec3(0.0,0.0,0.0),1.0);\n    res = opSU(res,sdTorus(q + vec3(1.0,0.0,0.0),vec2(1.0,0.25)));\n    //res = opU(res,sdPlane(p-vec3(0.0,-1.0,0.0)));\n    return res;\n}\n\nvec3 calcNormal(vec3 p){\n\tvec3 eps = vec3( 0.0001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(p+eps.xyy) - map(p-eps.xyy),\n\t    map(p+eps.yxy) - map(p-eps.yxy),\n\t    map(p+eps.yyx) - map(p-eps.yyx));\n\treturn normalize(nor);\n}\n\nvec2 trace(vec3 p, vec3 dir){\n\tfloat rMax=50.0,s = 0.0;\n    float precis = 0.0001;\n    float m = 1.0;\n    for (int i=0; i<128; i++){\n        float res = map(p + s*dir);\n        if(res < precis || res > rMax ) break;\n        s += res;\n    }\n    if(s > rMax) m = -1.0;\n    return vec2(s,m);\n}\n\nvec4 render(vec3 p, vec3 dir){\n    vec3 light = normalize(vec3(3.0,0.0,1.0));\n    vec3 color = vec3(0.0,0.0,0.0);\n    vec3 diffu = vec3(1.0,1.0,1.0);\n    vec3 amb = vec3(0.2,0.2,0.2);\n    vec2 res = trace(p,dir);\n    if(res.y > -1.0){\n\t\tvec2 res = trace(p,dir);\n    \tvec3 pos = p + dir * res.x;\n    \tvec3 normal = calcNormal(pos);\n        color += diffu * clamp(dot(normal,light),0.0,1.0);\n        color += min(amb * diffu,1.0);\n    }else{\n    \tcolor = vec3(0.5,0.5,0.7);\n    }\n    \n    return vec4(color,0.0);\n}\n\nmat3 setCamera(in vec3 camPos,in vec3 camTarget){\n\tvec3 camW = normalize(camTarget - camPos);\n    vec3 up = vec3(0.0,1.0,0.0);\n    vec3 camU = normalize(cross(camW,up));\n    vec3 camV = normalize(cross(camU,camW));\n    return mat3(camU,camV,camW);\n}\n\nmat3 rotZ(float rz){\n return mat3(\n     vec3(cos(rz),-sin(rz),0.0),\n     vec3(sin(rz),cos(rz),0.0),\n     vec3(0.0,0.0,1.0)\n );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 camPos = vec3(1.0,0.0,2.0*iTime);\n    vec3 camTarget = vec3(0.0,0.0,2.0*iTime+1.0);\n    mat3 cam = setCamera(camPos,camTarget);\n    \n    vec3 rayDir =cam * rotZ(-iTime*0.5) * normalize(vec3(uv.xy,1.0));\n    fragColor = render(camPos,rayDir);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}