{
    "Shader": {
        "info": {
            "date": "1499556707",
            "description": "a voxel traverser\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Mdjfzh",
            "likes": 11,
            "name": "voronoi voxel traversal",
            "published": 3,
            "tags": [
                "voronoi",
                "voxels"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 1577
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\nfloat planetrace(vec3 p, vec3 d,vec3 plane) {\n    float len = -min(dot(p,plane),0.0)/dot(d,plane);\n    return len;\n}\n\nfloat dot2(vec3 p) {\n    return dot(p,p);\n}\n\n//hash without sin by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nvec3 hash34(vec4 p4)\n{\n\tp4 = fract(p4  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return (fract((p4.xxyz+p4.zzyw)*p4.zywx).xyz-0.5)*0.7+0.5;\n}\n\nvec3 noise(vec3 p3)\n{\n    float floortime = floor(iTime);\n    return mix(hash34(vec4(p3,floortime)),hash34(vec4(p3,floortime+1.0)),iTime-floortime);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 pos = vec3(0.0,2.0,-12.0);\n    vec3 dir = normalize(vec3(uv,0.5));\n    \n    float len = 10000.0;\n    vec3 cell;\n    vec3 cell2;\n    vec3 center = floor(pos);\n    vec3 center2;\n    \n    \n    //finding closest voronoi cell\n    for(float x = -1.0; x <= 1.0; x++) {\n    \tfor(float y = -1.0; y <= 1.0; y++) {\n    \t\tfor(float z = -1.0; z <= 1.0; z++) {\n                vec3 orig = vec3(x,y,z)+center;\n                orig += noise(orig)-0.5;\n                if (len > dot2(pos-orig)) {\n                    cell = orig;\n                    center2 = vec3(x,y,z)+center;\n                    len = dot2(pos-orig);\n                }\n            }\n    \t}\n    }\n    cell2 = cell;\n    \n    \n    center = floor(pos-0.5);\n    //raytracing\n    vec3 normal;\n    float dist = 0.0;\n    for ( int i = 0; i < 50; i++) {\n        \n        \n        len = 10000.0;\n        center = center2;\n        if (dot2(center) < 100.0 || center.y < -3.0 || dist > 20.0) break;\n        vec3 cell3;\n        for(float x = -1.0; x <= 1.0; x++) {\n            for(float y = -1.0; y <= 1.0; y++) {\n                for(float z = -1.0; z <= 1.0; z++) {\n                    vec3 orig = vec3(x,y,z)+center;\n                    orig += noise(orig)-0.5;\n                    if (max(dot2(orig-cell),dot2(orig-cell2))>0.0001)\n                    {\n                        vec3 mid = (orig+cell)*0.5;\n                        vec3 plane = vec3((orig-cell));\n                        float num = planetrace(pos-vec3(mid),dir,plane);\n\n                        if (num < len && num > 0.0) {\n                            len = num;\n                            cell3 = orig;\n                            center2 = vec3(x,y,z)+center;\n                            normal = -plane;\n                        }\n                    }\n                }\n            }\n        }\n        cell2 = cell;\n        cell = cell3;\n        dist += len;\n        pos += dir*len;\n    }\n    normal = normalize(normal);\n    //shading\n    if (dot2(center) < 100.0 || center.y < -3.0) {\n        vec3 sun = normalize(vec3(1.0,1.0,-1.0));\n        vec3 objnorm = normal;\n        vec3 reflectnorm = reflect(dir,objnorm);\n        vec3 color = normal*0.5+0.5;\n        fragColor = vec4(color*max(0.2,0.8*dot(objnorm,sun)),1.0);\n        fragColor = max(fragColor,(dot(reflectnorm,sun)-0.9)*12.0);\n    }\n}\n\n\n/*\n#define time iTime\n\nfloat planetrace(vec3 p, vec3 d,vec3 plane) {\n    float len = (-dot(p,plane))/dot(d,plane);\n    len = max(len,0.0)-(sign(len)-1.0)*1000.0;\n    return len*step(dot(p,plane),0.0)*step(dot(p,plane),0.0)-0.01;\n}\n\nfloat dot2(vec3 p) {\n    return dot(p,p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 pos = vec3(0.0,2.0,-12.0);\n    vec3 dir = normalize(vec3(uv,0.5));\n    \n    float len = 10000.0;\n    vec3 cell;\n    vec3 cell2;\n    vec3 center = floor(pos);\n    vec3 center2;\n    \n    \n    //finding closest voronoi cell\n    for(float x = -1.0; x <= 1.0; x++) {\n    \tfor(float y = -1.0; y <= 1.0; y++) {\n    \t\tfor(float z = -1.0; z <= 1.0; z++) {\n                vec3 orig = vec3(x,y,z)+center;\n                orig += 0.25*sin(orig.yzx+orig.zxy+iTime)*vec3(sin(time),cos(time),1.0);\n                if (len > dot2(pos-orig)) {\n                    cell = orig;\n                    center2 = vec3(x,y,z)+center;\n                    len = dot2(pos-orig);\n                }\n            }\n    \t}\n    }\n    cell2 = cell;\n    \n    \n    center = floor(pos-0.5);\n    //raytracing\n    vec3 normal;\n    float dist = 0.0;\n    for ( int i = 0; i < 50; i++) {\n        \n        \n        len = 10000.0;\n        center = center2;\n        if (dot2(center) < 100.0 || center.y < -3.0 || dist > 20.0) break;\n        vec3 cell3;\n        for(float x = -1.0; x <= 2.0; x++) {\n            for(float y = -1.0; y <= 2.0; y++) {\n                for(float z = -1.0; z <= 2.0; z++) {\n                    vec3 orig = vec3(x,y,z)+center;\n                    orig += 0.25*sin(orig.yzx+orig.zxy+iTime)*vec3(sin(time),cos(time),1.0);\n                    if (dot2(orig-cell)>0.0001&&dot2(orig-cell2)>0.0001)\n                    {\n                        vec3 mid = (orig+cell)*0.5;\n                        vec3 plane = vec3(normalize(orig-cell));\n                        float num = planetrace(pos-vec3(mid),dir,plane);\n\n                        if (num < len && num > 0.0) {\n                            len = num;\n                            cell3 = orig;\n                            center2 = vec3(x,y,z)+center;\n                            normal = -plane;\n                        }\n                    }\n                }\n            }\n        }\n        cell2 = cell;\n        cell = cell3;\n        dist += len;\n        pos += dir*len;\n    }\n    \n    //shading\n    if (dot2(center) < 100.0 || center.y < -3.0) {\n        vec3 sun = normalize(vec3(1.0,1.0,-1.0));\n        vec3 objnorm = normal;\n        vec3 reflectnorm = reflect(dir,objnorm);\n        vec3 color = vec3(0.7,0.3,0.6);\n        fragColor = vec4(color*max(0.2,0.8*dot(objnorm,sun)),1.0);\n        fragColor = max(fragColor,(dot(reflectnorm,sun)-0.9)*12.0);\n    }\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}