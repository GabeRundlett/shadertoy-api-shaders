{
    "Shader": {
        "info": {
            "date": "1594787652",
            "description": "An infinite grid of multicolored spheres.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtSyRK",
            "likes": 3,
            "name": "Raymarcher - Test 2: Repetition",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "SpinningCube",
            "viewed": 449
        },
        "renderpass": [
            {
                "code": "\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Filmic tonemapping curve by milesWaugh\n\nconst int maxSteps = 256;\nconst float epsilon = 0.01;\nconst float focalLength = 1.;\nconst float renderDist = 8000.;\n\nvec3 camera;\nfloat SDE;\nvec3 ray;\n\nvec3 surfCol;\nvec3 surfNormal;\nfloat surfSpecular;\nfloat surfShininess;\nbool updateMat;\n\nfloat diffuse = 0.;\nfloat specular;\nvec3 ambient = .9*vec3(.5, .6, .7);\n\nvec3 rayDirection( float focal, vec2 xy ) {\n    return (normalize(vec3(xy, focal)));\n}\n\n// SDF's\n\nfloat Sphere( vec3 ray, vec3 pos, float radius ) {\n    return distance(mod(ray, 150.), pos ) - radius;\n}\n\nfloat Ground( vec3 ray, float y ) {\n    return ray.y - y;\n}\n\nvoid addSDF( float SDF, vec3 col, float specular, float shininess ) {\n    if ( SDF < SDE ) {\n        SDE = SDF;\n        if (updateMat) {\n        \tsurfCol = col;\n        \tsurfSpecular = specular;\n        \tsurfShininess = shininess;\n        }\n    }\n}\n\nfloat scene( vec3 ray, float renderDist ) {\n    \n    SDE = renderDist;\n    \n    vec3 sinVector = vec3(1., 0.81, 1.23);\n    \n    vec3 colx = vec3(0.25*sin((ray/10.)*sinVector)+0.5);\n    \n    addSDF( Sphere( ray, vec3(100, 100, 100), 15.), colx, 1.5, 512. );\n    \n    return SDE;\n}\n\nvec3 calcNormal( vec3 p )\n{\n    const float h = 10. * epsilon; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy * scene( p + k.xyy*h, renderDist ) + \n                      k.yyx * scene( p + k.yyx*h, renderDist ) + \n                      k.yxy * scene( p + k.yxy*h, renderDist ) + \n                      k.xxx * scene( p + k.xxx*h, renderDist ));\n    \n}\n\nvec4 shootRay( vec3 rayDir, vec3 start, float renderDist, bool updateMaterial ) {\n    updateMat = updateMaterial;\n    ray = start;\n    float rayLength = 0.;\n    for ( int i = 0; i <= maxSteps; i++ ) {\n        \n        scene( ray, renderDist );\n        \n        rayLength += SDE;\n        ray = rayDir * rayLength + start;\n        \n        if ( rayLength > renderDist ) {\n            return vec4(0., ray);\n        }\n        if ( SDE < epsilon ) {\n            return vec4(1., ray);\n        }\n    }\n    return vec4(1., ray);\n}\n\nvoid phongLighting(vec3 ray, vec3 rayDir, vec3 lightDir, vec3 surfNormal, float intensity, float lightDist) {\n    if (true)/*( shootRay(lightDir, ray + (surfNormal * 1.), lightDist, false).x == 0. )*/ {\n        \n        diffuse += max(intensity * dot(surfNormal, lightDir), 0.);\n\t\t\n        vec3 halfway = normalize(lightDir - rayDir);\n    \tspecular += max(intensity * surfSpecular * pow(dot(surfNormal, halfway), surfShininess), 0.);\n\n    }\n}\n\nvoid pointLight( vec3 ray, vec3 rayDir, vec3 position, float intensity, vec3 surfNormal ) {\n    vec3 lightDir = normalize(position - ray);\n    phongLighting( ray, rayDir, lightDir, surfNormal, intensity, distance(position, ray) );\n}\n\nvoid sceneLights(vec3 ray, vec3 rayDir, vec3 surfNormal) {\n    phongLighting( ray, rayDir, normalize(vec3(-1,1,-2)), surfNormal, 1., 0. );\n}\n\nvec3 filmicTransform(vec3 color) {\n    //return color;\n    return vec3(1. - (1./(5. * pow(color.x, 2.) + 1.)),\n                1. - (1./(5. * pow(color.y, 2.) + 1.)),\n                1. - (1./(5. * pow(color.z, 2.) + 1.)));\n}\n\nvec3 lighting(vec3 ray, vec3 rayDir, vec3 surfNormal) {\n    diffuse = 0.;\n    specular = 0.;\n    \n    sceneLights(ray, rayDir, surfNormal);\n    \n    float fog = clamp(length(ray - camera)/(renderDist), 0., 1.);\n    //fog = fog*fog;\n    //fog = fog*fog;\n    vec3 finalCol = (diffuse * surfCol) + (ambient * surfCol) + specular;\n    finalCol = mix(finalCol, ambient, fog);\n    \n    return filmicTransform(finalCol);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    camera = vec3(60.*iTime, 30.*iTime, 200.*iTime);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy/2.)/iResolution.x;\n    \n    vec3 rayDir = rayDirection( focalLength, uv );\n    \n    vec4 rayData = shootRay( rayDir, camera, renderDist, true );\n    \n    vec3 col;\n    \n    if (rayData.x == 1.) {\n        vec3 surfNormal = calcNormal( rayData.yzw );\n    \tcol = lighting( rayData.yzw, rayDir, surfNormal );\n    }\n    else {\n        col = filmicTransform(ambient);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}