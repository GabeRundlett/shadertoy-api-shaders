{
    "Shader": {
        "info": {
            "date": "1620084486",
            "description": "Simplifying/compacting my tanglecube intersector. Now only a single root is evaluated and inside/outside cases seem to work. Btw, I've noticed the constant coefficient always turns out to be the implicit equation applied to the ray origin...",
            "flags": 0,
            "hasliked": 0,
            "id": "NsSSD1",
            "likes": 3,
            "name": "Tanglecube Ray Intersection II",
            "published": 3,
            "tags": [
                "intersection",
                "wip",
                "simplified",
                "tanglecube"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "// Intersection\nfloat cbrt(in float x) { return sign(x) * pow(abs(x), 1.0 / 3.0); }\nfloat iTangleCube(in vec3 ro, in vec3 rd, in float size, in float iso) {\n    ro /= size, rd /= size;\n    vec3 oo = ro * ro, od = ro * rd, dd = rd * rd;\n\n    float a =       dot(dd, dd);\n    float b = 4.0 * dot(od, dd);\n    float c = 6.0 * dot(oo, dd) - 1.25 * dot(rd, rd);\n    float d = 4.0 * dot(oo, od) - 2.50 * dot(ro, rd);\n    float e =       dot(oo, oo) - 1.25 * dot(ro, ro) + 0.6875 - 0.0625 * iso;\n\n    vec4 roots;\n    b /= a; c /= a; d /= a; e /= a; // Divide by leading coefficient to make it 1\n\n    // Depress the quartic to x^4 + px^2 + qx + r by substituting x-b/4a\n    // This can be found by substituting x+u and the solving for the value\n    // of u that makes the t^3 term go away\n    float bb = b * b;\n    float p = c - 0.375 * bb;\n    float q = d - 0.5 * b * c + 0.125 * bb * b;\n    float r = e - 0.25 * b * d + 0.0625 * bb * c - 0.01171875 * bb * bb;\n\n    // Solve for a root to (t^2)^3 + 2p(t^2)^2 + (p^2 - 4r)(t^2) - q^2 which resolves the\n    // system of equations relating the product of two quadratics to the depressed quartic\n    float ra =  2.0 * p;\n    float rb =  p * p - 4.0 * r;\n    float rc = -q * q;\n\n    // Depress using the method above\n    float ru = ra / 3.0;\n    float rp = rb - ra * ru;\n    float rq = rc - (rb - 2.0 * ra * ra / 9.0) * ru;\n\n    float lambda;\n    float rh = 0.25 * rq * rq + rp * rp * rp / 27.0;\n    if (rh > 0.0) { // Use Cardano's formula in the case of one real root\n        rh = sqrt(rh);\n        float ro = -0.5 * rq;\n        lambda = cbrt(ro - rh) + cbrt(ro + rh) - ru;\n    }\n\n    else { // Use complex arithmetic in the case of three real roots\n        float rm = sqrt(-rp / 3.0);\n        lambda = -2.0 * rm * sin(asin(1.5 * rq / (rp * rm)) / 3.0) - ru;\n    }\n\n    // Newton iteration to fix numerical problems (using Horners method)\n    // Suggested by @NinjaKoala\n    for(int i=0; i < 2; i++) {\n        float a_2 = ra + lambda;\n        float a_1 = rb + lambda * a_2;\n        float b_2 = a_2 + lambda;\n\n        float f = rc + lambda * a_1; // Evaluation of λ^3 + ra * λ^2 + rb * λ + rc\n        float f1 = a_1 + lambda * b_2; // Derivative\n\n        lambda -= f / f1; // Newton iteration step\n    }\n\n    if (lambda < 0.0) return -1.0;\n    float sqrtLambda = sqrt(lambda);\n\n    float pLambda = 2.0 * (p + lambda), qLambda = 2.0 * q / sqrtLambda;\n\n    float bar = lambda - pLambda + qLambda;\n    if (bar > 0.0) return -(sqrtLambda + sign(e) * sqrt(bar)) * 0.5 - 0.25 * b;\n\n    float foo = lambda - pLambda - qLambda;\n    if (foo > 0.0) return +(sqrtLambda - sign(e) * sqrt(foo)) * 0.5 - 0.25 * b;\n}\n\n// Normal\nvec3 nTangleCube(in vec3 p, in float size, in float iso) {\n    p /= size;\n    return normalize(1.6 * p * p * p - p);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = ivec2(iMouse) == ivec2(0) ? vec2(0.0) : (iMouse.xy - center) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);//1.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Environment map\n    fragColor = texture(iChannel0, rd);\n\n    float size = 1.25 + 0.25 * cos(iTime);\n    float iso = sin(iTime) * 5.0;\n\n    // Render\n    float t = iTangleCube(ro, rd, size, iso);\n    if (t > 0.0) {\n        vec3 hitPos = ro + rd * t;\n        vec3 n = nTangleCube(hitPos, size, iso);\n        float diff = abs(dot(n, -rd));\n        float checkers = mod(dot(floor(hitPos / size * 3.0), vec3(1.0)), 2.0);\n        fragColor = mix(vec4(0.5 + 0.5 * checkers, 0.0, 0.0, 1.0), texture(iChannel0, reflect(-rd, n)), 0.25);\n        fragColor.rgb *= diff;\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.75));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}