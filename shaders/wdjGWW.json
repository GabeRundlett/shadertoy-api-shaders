{
    "Shader": {
        "info": {
            "date": "1548915995",
            "description": "A zoomed in ray-marched mandelbulb.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdjGWW",
            "likes": 6,
            "name": "Mandelbulb Zooming Animation",
            "published": 3,
            "tags": [
                "fractal",
                "raymarch",
                "mandelbulb",
                "zoominganim"
            ],
            "usePreview": 0,
            "username": "levkruglyak",
            "viewed": 904
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159;\n\n#define iterations 19\nfloat bailout = 40.;\nfloat power = 8.;\n\nvec2 mandelbulb(vec3 pos, float rot) { \n   \tvec3 z = pos;\n    float dr = 1.0;\n    float r = 0.0;\n    int orbit = 0;\n    for (int i = 0; i < iterations; i++) {\n     \tr = length(z);\n        orbit = i;\n        if (r > bailout) { break;}\n        float theta = acos(z.z/r)+rot;\n        float phi = atan(z.y,z.x);\n        dr = pow(r,power-1.0)*power*dr + 1.0;\n        \n        float zr = pow(r,power);\n        theta = theta*power;\n        phi = phi*power;\n        \n        z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n        z+= pos;\n    }\n    return vec2(0.5*log(r)*r/dr, orbit);\n}\n\nvec3 rotateside(vec3 z, float theta) {\n    vec3 p = z;\n    float c = cos(theta);\n    float s = sin(theta);\n    p.xz = vec2(c*p.x + s*p.z, c*p.z-s*p.x);\n    return p;\n}\n\nvec3 rotatex(vec3 z, float theta) {\n    vec3 p = z;\n    float c = cos(theta);\n    float s = sin(theta);\n    p.yz = vec2(c*p.y + s*p.z, c*p.z-s*p.y);\n    return p;\n}\n\nfloat sensitivity = 100.;\nfloat rot1 =0.;\nfloat rot2 = 0.;\nvec2 GetDist(vec3 p) {\n    vec3 z = rotateside(rotatex(p,rot1),rot2);\n    \n\treturn mandelbulb(z,0.);\n}\n\n#define maxSteps 120\nfloat maxDist = 100.;\nfloat surfDist = 0.0001;\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n    surfDist = GetDist(ro).x/1000.;\n    float col = 0.;\n   \tfloat dO=0.;\n    int ot = maxSteps-1;\n    for(int i=0; i<maxSteps; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec2 dist = GetDist(p);\n        float dS = dist.x;\n        dO += dS;\n        if(dS<surfDist) {ot = i; col = dist.y; break;}\n        if (dO>maxDist) { return vec2(0); }\n    }\n    \n    return vec2(ot,col);\n}\n\nvec3 hue(\n    vec3 inp,  // color to transform\n    float H\n)\n{\n  float U = cos(H*3.1415/180.);\n  float W = sin(H*3.1415/180.);\n\n  vec3 ret;\n  ret.x = (.299+.701*U+.168*W)*inp.x\n    + (.587-.587*U+.330*W)*inp.y\n    + (.114-.114*U-.497*W)*inp.z;\n  ret.y = (.299-.299*U-.328*W)*inp.x\n    + (.587+.413*U+.035*W)*inp.y\n    + (.114-.114*U+.292*W)*inp.z;\n  ret.z = (.299-.3*U+1.25*W)*inp.x\n    + (.587-.588*U-1.05*W)*inp.y\n    + (.114+.886*U-.203*W)*inp.z;\n  return ret;\n}\n\nvec3 format(float ot, float color) {\n    if (ot ==0.){\n     \treturn vec3(0);   \n    }\n    float bright = (1.-1.5*pow(ot/float(maxSteps),1.1));\n \treturn bright*hue(vec3(0,1,0), 1.+clamp(color,3.,20.)*80.);   \n}\n\nfloat zoomFunc(float x, float speed) {\n    return -0.9*pow(2.7181,-speed*x)-1.054975;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 rot = vec3(0,0,0);\n    vec3 cam = vec3(2);\n    cam = vec3(0,0,zoomFunc(iTime,0.09));\n    \n    rot1 = 0.900;\n    rot2 = 0.250;\n    \n        if (iTime <= 140.) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1)+rot);\n    vec2 mar = RayMarch(cam, rd);\n    float ot = mar.x;\n    \n    vec3 col = format(ot, mar.y);\n\n    fragColor = vec4(col,1.0);\n        } else {\n         fragColor = vec4(1.0);   \n        }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}