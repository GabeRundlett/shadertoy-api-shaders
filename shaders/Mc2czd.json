{
    "Shader": {
        "info": {
            "date": "1722878105",
            "description": "//4.4\n//Formas\n//Circulo avanzado - smoothstep\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Mc2czd",
            "likes": 0,
            "name": "Formas 4.4",
            "published": 3,
            "tags": [
                "mix",
                "tutorial",
                "sin",
                "color",
                "cos",
                "shaders",
                "shaders",
                "livecoding",
                "functions",
                "taller",
                "tutoriales",
                "osciladores"
            ],
            "usePreview": 0,
            "username": "jpupper",
            "viewed": 49
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define time iTime\n#define resolution iResolution\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy / resolution.xy; // De esta manera obtenemos las coordenadas cartesianas\n    \n    //ESTO ES PARA ARREGLAR EL ASPECT RADIO. \n    //Es decir para que no importa la resolución que tenga, el circulo siempre sea un circulo perfecto.\n    float fix = resolution.x/resolution.y; //Creo la variable que me permite arreglar esto.\n    uv.x*=fix;\n    \n    \n    //EN EL P también lo tengo que multiplicar por el fix.\n    vec2 p = vec2(0.5*fix,0.5) - uv; //Genero un punto en el espacio(en este caso en el medio.\n    float r = length(p);  //Obtengo el radio\n    float a = atan(p.x,p.y);//obtengo el angulo. \n    \n    \n    \n    //LA FUNCIÓN SMOOTHSTEP FUNCIONA COMO SI FUERA UN UMBRAL CON LA OPCION DE GRAFICAR VALORES INTERMEDIOS.\n    //Esto nos permite hacer un circulo con un borde con degrade.\n    \n    //TODOS LOS VALORES DEBAJO DE 0.88 LOS TRANSFORMA EN 0. \n    //TODOS LOS VALORES ARRIBA DE 0.9 LOS TRANSFORMA EN 1.\n    //TODOS LOS VALORES INTERMEDIOS ENTRE 0.88 y 0.9 LES HACE UNA INTERPOLACION ENTRE 0.0 y 1.0.\n    \n    //LO MISMO SI LO HAGO CON uv.x , uv.y , a , o cualquier valor que yo le pase. \n    float e = smoothstep(0.88,0.9,1.-r); \n         \n    fragColor = vec4(vec3(e),1.0); \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}