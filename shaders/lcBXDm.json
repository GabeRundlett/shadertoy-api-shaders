{
    "Shader": {
        "info": {
            "date": "1706405725",
            "description": "asd",
            "flags": 32,
            "hasliked": 0,
            "id": "lcBXDm",
            "likes": 0,
            "name": "Bloom glsl",
            "published": 3,
            "tags": [
                "asd"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0,uv).rgb;\n    \n    col = bloom(iChannel0, fragCoord, iResolution.xy, 2., 1., 1)+col;\n    //col /= 2.;\n\n    //col = blur(iChannel0, ivec2(fragCoord), 25, 1);\n\n    fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    uv *= 15.;\n    \n    vec3 col = vec3(0);\n    if (length(uv)<=7.5) col = 3.*vec3(sin(uv.x*3.1415)+cos(2.*uv.x)+sin(3.14159*uv.y)+cos(2.*uv.y),0.3,0.6)/4.;\n    \n    fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 colorCorrection(vec3 col) {\n    float level = max(col.r,max(col.g,col.b));\n    if (level > 1.) {\n        col = col/level;\n        col.r = pow(col.r,1./level);\n        col.g = pow(col.g,1./level);\n        col.b = pow(col.b,1./level);\n    }\n    return vec4(col,level);\n}\n\nvec3 bloom(sampler2D channel, vec2 pixel, vec2 iResolution, float intensity, float threshold, int steps) {\n    vec3 col = vec3(0);\n    vec4 coldat = colorCorrection(texelFetch(channel,ivec2(pixel),0).rgb);\n    \n    float i=1.;\n    steps = max(steps,1);\n    int radius = 100;\n    float screenrad = 0.1;\n    float aspect = iResolution.x/iResolution.y;\n    for (int x=-radius; x<=radius; x+=steps) {\n    for (int y=-radius; y<=radius; y+=steps) {\n        if (length(vec2(x,y))<=float(radius)) {\n        vec2 coord = vec2(x,y);\n        vec4 newcol = colorCorrection(texelFetch(channel,ivec2(pixel+coord),0).rgb);\n        if (newcol.w >= threshold) {\n            col += newcol.rgb*newcol.w*intensity/length(coord/float(radius));\n        }\n        i++;\n        }\n    }\n    }\n    \n    return col/i;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}