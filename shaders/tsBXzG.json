{
    "Shader": {
        "info": {
            "date": "1554181062",
            "description": "Inspired largely by forking the work of vhsaesthetic at https://www.shadertoy.com/view/MtjyWV thanks for sharing!",
            "flags": 0,
            "hasliked": 0,
            "id": "tsBXzG",
            "likes": 8,
            "name": "VHS Prism Zooming In",
            "published": 3,
            "tags": [
                "prism"
            ],
            "usePreview": 0,
            "username": "tomachi",
            "viewed": 468
        },
        "renderpass": [
            {
                "code": "/* visit the home of Tomachi at funk.nz and tomachi.tv! */\n\n\n// This work is licensed under a Creative Commons Attribution 4.0 International License.\n// https://creativecommons.org/licenses/by/4.0/\n\n// Inspiration: https://www.shadertoy.com/view/MtjyWV\n// Inspiration: http://kingsanda.tumblr.com/image/167236041347\n\n\n/* Borrowed functions */\n\n// The MIT License\n// Copyright © 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// From: https://www.shadertoy.com/view/XsXSz4\n\n\n// This work is licensed under a Creative Commons Attribution 4.0 International License.\n// https://creativecommons.org/licenses/by/4.0/\n\n\n// Inspiration: http://kingsanda.tumblr.com/image/167236041347\n\n\n/* Borrowed functions */\n\n// The MIT License\n// Copyright © 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// From: https://www.shadertoy.com/view/XsXSz4\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n/* END OF borrowed functions */\n\n\n// Used because I want smooth transitions for the peaks but still some discontinuity at the transitions\n// So I mix between smoothstep and a flat ramp. Setting mix to 0.0 will give you pure smoothstep, 1.0 pure ramp.\nfloat notsosmoothstep(float edge0, float edge1, float x)\n{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0); \n    return mix(x*x*(3. - 2.*x), x, 0.2);\n}\n\n#define horiz(s, e, p) if(s.x < p.x && p.x <= e.x) return mix(s.y, e.y, notsosmoothstep(0., 1., (p.x - s.x) / (e.x - s.x)));\nfloat horizonHeight(vec2 pos)\n{\n    horiz( vec2(-1, 0.1), vec2(-0.8, 0.3), pos );\n    horiz( vec2(-0.8, 0.3), vec2(-0.6, 0.4), pos );\n    horiz( vec2(-0.6, 0.4), vec2(-0.3, 0.2), pos );\n    horiz( vec2(-0.3, 0.2), vec2(-0.1, 0.25), pos );\n    horiz( vec2(-0.1, 0.25), vec2(-0., 0.2), pos );\n    horiz( vec2(-0., 0.2), vec2(.1, 0.3), pos );\n    horiz( vec2(.1, 0.3), vec2(.24, 0.32), pos );\n    horiz( vec2(.24, 0.32), vec2(.3, 0.3), pos );\n    horiz( vec2(.3, 0.3), vec2(.34, 0.32), pos );\n    horiz( vec2(.34, 0.32), vec2(.36, 0.31), pos );\n    horiz( vec2(.36, 0.31), vec2(.4, 0.27), pos );\n    horiz( vec2(.4, 0.27), vec2(.47, 0.23), pos );\n    horiz( vec2(.47, 0.23), vec2(.6, 0.15), pos );\n    horiz( vec2(.6, 0.15), vec2(.8, 0.3), pos );\n    horiz( vec2(.8, 0.3), vec2(1., 0.2), pos );\n}\n\nvec3 sunColor(vec2 p)\n{\n    #define suncenter vec2(0, 0.1)\n    #define sunradius 0.6\n    #define sunfalloff 0.23\n    #define suncolor vec3(0.8, 0.05, 0.05)\n    \n    #define skyradius 0.8\n    #define skyfalloff 0.3\n    #define skycolor vec3(0.05,0.,0.1)\n    #define noise(x) (1. - texture(iChannel0, p*2.).r * 1. * (1.-sqrt(x)*0.92))\n    \n    float sunbrightness = smoothstep(sunradius+sunfalloff, sunradius-sunfalloff, length(p-suncenter));\n    float skymask = smoothstep(skyradius+skyfalloff, skyradius-skyfalloff, length(p*vec2(0.5, 1.)-suncenter));\n    \n    return mix(skycolor*skymask*noise(skymask*0.5), suncolor, sunbrightness * noise(sunbrightness));\n}\n\nvec3 bgColor(vec2 p)\n{\n    #define bgcolor vec3(0., 0.25, 0.7)\n    #define noise2(x) (1. - texture(iChannel0, p*2.).r * 1. * (1.-sqrt(x)*0.72))\n    \n    p.y += p.x*p.x*0.1;\n    \n    float dist = sdTriangle(vec2(-1.5, 0.05), vec2(2.5, -0.7), vec2(-1.5, -1.), p);\n    \n    float mask = clamp(smoothstep(-0.2, 0.2, -dist) - smoothstep(-1., 1.5, p.x)*0.6, 0., 1.)*0.8;\n    mask *= noise2(mask);\n    \n    return vec3(mask*bgcolor);\n}\n\nvec3 prism(vec2 p)\n{    \n    #define flrotation vec3(0.5*iTime, 0.25* iTime, 0.125 * iTime)\n    #define f1color vec3(0.5, 0.5, 0.24)\n    #define f1color2 vec3(0.57, 0.27, 0.2)\n    \n \tfloat f1 = sdTriangle(vec2(-0.195, -0.205), vec2(0.175, -0.24), vec2(-0.095, -0.38), p);\n    vec3 f1col = smoothstep(0.01, -0.0, f1)*f1color*(p.x+0.26+p.y*0.5)*10.;\n    f1col += smoothstep(0.01, -0.0, f1)*(f1color2);\n    \n    #define f2color vec3(0.4, 0.6, 0.7)\n    float f2 = sdTriangle(vec2(-.2, -0.21), vec2(-0.1, -0.39), vec2(-0.2, -0.6), p);\n    f2 = min(f2, sdTriangle(vec2(-.1, -0.77), vec2(-0.1, -0.39), vec2(-0.2, -0.6), p));\n    vec3 f2col = clamp(smoothstep(0.01, -0.0, f2)* f2color * (.6-length(p-vec2(-0.15, -0.4)))*0.4, 0., 1.) * 2.6;\n    \n    #define f3color vec3(-0.5, -0.5, -0.5)\n    float f3 = sdTriangle(vec2(0.18, -0.24), vec2(.18, -0.63), vec2(-0.095, -0.39), p);\n    f3 = min(f3, sdTriangle(vec2(-.095, -0.77), vec2(.18, -0.63), vec2(-0.095, -0.39), p));\n    vec3 f3col = clamp(smoothstep(0.01, -0.0, f3) * (.4-length(p-vec2(0.04, -0.5))), 0., 1.)*f3color;\n    // f3col = f3col * flrotation;\n\n    return (f2col+f1col+f3col)*noise(length(f2col+f1col+f3col));\n}\n\nvec3 beam(vec2 p)\n{\n    #define whitebeamcolor vec3(0.5, 0.5, 1.)\n    #define flrotation vec3(0.5*iTime, 0.25* iTime, 0.125 * iTime)\n    #define redthengreenthenbluefadein vec3(mod(iTime*3.0,1.0), mod(iTime*2.0, 1.0), mod(iTime, 1.0))\n    float wb = sdTriangle(vec2(-.14, -0.47), vec2(-.16, -0.45), vec2(-25., -10.), p);\n    vec3 wbcol = whitebeamcolor * smoothstep(0.015, -0.015, wb)*2.;\n    wbcol = wbcol * redthengreenthenbluefadein;\n    float rb = sdTriangle(vec2(.04, -0.47), vec2(30., -51.), vec2(25., -5.), p);\n    #define leg1 (vec2(25., -5.) - vec2(.04, -0.47))\n    #define ang1 atan(leg1.y, leg1.x)\n    #define leg2 (vec2(30., -51.) - vec2(.04, -0.47))\n    #define ang2 atan(leg2.y, leg2.x)\n    #define rbleg(x) (x - vec2(.04, -0.47))\n    #define rbangle(xv) ((atan(rbleg(xv).y, rbleg(xv).x) - ang1) / (ang2 - ang1))\n    float rainbowangle = -rbangle(p)-0.1;\n    vec3 rainbow = hsv2rgb_smooth(vec3(rainbowangle, 0.7 - length(rbleg(p))*0.2, 0.6 - length(rbleg(p))*0.2)) *  smoothstep(0.015, -0.015, rb);\n    rainbow = rainbow * redthengreenthenbluefadein;\n    return (wbcol + rainbow)*noise(length(wbcol+rainbow));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // #define newtime2 float ((35 - (iTime + 35)) * 0.1);\n    // #define uniform vec4 iMouse;\n\t// uniform vec4 iMouse;\n// iMouse\n    // #define zoom vec2(0.2*newtime/(10.0 + iMouse.x), 0.2*newtime/(10.0 + iMouse.x))\n    #define zoom vec2(0.2*newtime, 0.2*newtime)\n    //vec2 zoom vec2(0.2*newtime*iMouse.x, 0.2*newtime*iMouse.y);\n    \n    float newtime = ( 30.0 - iTime) * 0.5;\n    //float newtime = float ((35.0 - (iTime + 35.0)) * 0.1);\n\n\tvec2 uv = (fragCoord.xy * 2. / iResolution.xy) - vec2(1);\n\tuv = uv * zoom;\n    \n    #define sunmaskfeather 0.013\n    float sunmask = smoothstep(-sunmaskfeather, sunmaskfeather, uv.y - horizonHeight(uv));\n    \n\tfragColor = vec4(sunmask*sunColor(uv * vec2(iResolution.x/iResolution.y / 1.4, 1)), 1);\n    \n    fragColor.rgb += bgColor(uv);\n    fragColor.rgb += prism(uv*vec2(iResolution.x/iResolution.y, 1));\n    fragColor.rgb += beam(uv*vec2(iResolution.x/iResolution.y, 1));\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}