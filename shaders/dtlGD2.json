{
    "Shader": {
        "info": {
            "date": "1681039773",
            "description": "A simple Cornell box path tracing example with NEE/MIS\nUses only box primitives for everything (for u danil)\n\nClick and drag to move camera",
            "flags": 32,
            "hasliked": 0,
            "id": "dtlGD2",
            "likes": 14,
            "name": "Cornell Box MIS",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "box",
                "mis",
                "cornell",
                "nee"
            ],
            "usePreview": 0,
            "username": "gelami",
            "viewed": 454
        },
        "renderpass": [
            {
                "code": "// Fork of \"Gelami Raymarching Template\" by gelami. https://shadertoy.com/view/mslGRs\n// 2022-12-31 10:10:47\n\n// Cornell Box MIS by gelami\n// https://www.shadertoy.com/view/dtlGD2\n\n/*\n * A simple Cornell box path tracing example with NEE/MIS\n * Uses only box primitives for everything (for u danil)\n * The walls are a single box with the front plane removed\n * \n * Click and drag to move camera\n * Defines in Common\n * \n * Thanks to koiava and cschied for their MIS/NEE examples\n * \n * Direct Light using MIS - koiava\n * https://www.shadertoy.com/view/4sSXWt\n *\n * Path tracing cornellbox with MIS\n * https://www.shadertoy.com/view/4lfcDr\n *\n * Spectral version:\n * Spectral Cornell Box MIS + HWSS - gelami\n * https://www.shadertoy.com/view/clf3DX\n */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n    \n    if (int(fragCoord.x) == 0 && int(fragCoord.y) == 0)\n        color = texelFetch(iChannel0, ivec2(1, 0), 0).rgb;\n    \n    color *= exp2(EXPOSURE);\n    \n    color = max(color, vec3(0));\n    color = color / (1. + luminance(color));\n    \n    #ifdef COMPARE_MIS\n    if (int(fragCoord.x) == int(iResolution.x * 0.5))\n        color = vec3(1, 0.05, 0);\n    #endif\n    \n    fragColor = vec4(linearTosRGB(color), 1);\n    fragColor += hash13(vec3(fragCoord, iTime)) / 256.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define NEE\n#define MIS\n//#define COMPARE_MIS\n\n#define SKYBOX\n#define SKYBOX_STRENGTH 0.2\n\n#define BOUNCES 6\n#define EXPOSURE 0.0\n\n#define MAX_DIST 100.\n#define EPSILON 1e-4\n\n#define PI (acos(-1.))\n#define TAU (PI*2.)\n\nstruct Ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Material\n{\n    vec3 color;\n    vec3 emissive;\n    float roughness;\n    float transmission;\n    float ior;\n};\n\nstruct HitInfo\n{\n    float t;\n    vec3 normal;\n    bool inside;\n};\n\n// Ray-Box Intersection\n// https://iquilezles.org/articles/intersectors/\n\nbool boxIntersect( Ray ray, vec3 boxSize, inout HitInfo hit ) \n{\n    vec3 m = 1.0 / ray.direction;\n    vec3 n = m * ray.origin;\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    \n    if( tN > tF || tF < 0.0) return false;\n    \n    bool inside = false;\n    vec3 normal;\n    if (tN < 0.0)\n    {\n        tN = tF;\n        t1 = t2;\n        normal = -sign(ray.direction)*step(t2.xyz,t2.yzx)*step(t2.xyz,t2.zxy);\n        inside = true;\n    } else {\n        normal = -sign(ray.direction)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n    }\n    \n    if (tN < hit.t)\n    {\n        hit.t = tN;\n        hit.normal = normal;\n        hit.inside = inside;\n        return true;\n    }\n    return false;\n}\n\nbool boxIntersectInsideZ( Ray ray, vec3 boxSize, inout HitInfo hit ) \n{\n    vec3 m = 1.0 / ray.direction;\n    vec3 n = m * ray.origin;\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    \n    if( tN > tF || tF < 0.0) return false;\n    \n    bool inside = false;\n    vec3 normal = -sign(ray.direction)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n    if (tN < 0.0 || normal.z > 0.0)\n    {\n        normal = -sign(ray.direction)*step(t2.xyz,t2.yzx)*step(t2.xyz,t2.zxy);;\n        if (normal.z < 0.0) return false;\n        tN = tF;\n        inside = true;\n    }\n    \n    if (tN < hit.t)\n    {\n        hit.t = tN;\n        hit.normal = normal;\n        hit.inside = inside;\n        return true;\n    }\n    return false;\n}\n\nmat3 getCameraMatrix(vec3 ro, vec3 lo)\n{\n    vec3 cw = normalize(lo - ro);\n    vec3 cu = normalize(cross(cw, vec3(0, 1, 0)));\n    vec3 cv = cross(cu, cw);\n\n    return mat3(cu, cv, cw);\n}\n\n\nfloat saturate(float x) { return clamp(x, 0., 1.); }\nvec2 saturate(vec2 x) { return clamp(x, vec2(0), vec2(1)); }\nvec3 saturate(vec3 x) { return clamp(x, vec3(0), vec3(1)); }\n\nfloat sqr(float x) { return x*x; }\nvec2 sqr(vec2 x) { return x*x; }\nvec3 sqr(vec3 x) { return x*x; }\n\nfloat luminance(vec3 c) { return dot(c, vec3(0.2126, 0.7152, 0.0722)); }\n\nmat2 rot2D(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\n// https://iquilezles.org/articles/palettes/\nvec3 palette(float t)\n{\n    return .5 + .5 * cos(TAU * (vec3(1, 1, 1) * t + vec3(0, .33, .67)));\n}\n\n// Hash without Sine\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n#define coprimes vec2(2,3)\nvec2 halton (vec2 s)\n{\n    vec4 a = vec4(1,1,0,0);\n    while (s.x > 0. && s.y > 0.)\n    {\n        a.xy = a.xy/coprimes;\n        a.zw += a.xy*mod(vec2(s),coprimes);\n        s = floor(s/coprimes);\n    }\n    return a.zw;\n}\n\n// RNG\nuint state;\nvoid initState(vec2 coord, int frame)\n{\n    state = uint(coord.x) * 1321u + uint(coord.y) * 4123u + uint(frame) * 4123u*4123u;\n}\n\n// From Chris Wellons Hash Prospector\n// https://nullprogram.com/blog/2018/07/31/\n// https://www.shadertoy.com/view/WttXWX\nuint hashi(inout uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat hash(inout uint x)\n{\n    return float( hashi(x) ) / float( 0xffffffffU );\n}\n\nvec2 hash2(inout uint x)\n{\n    return vec2(hash(x), hash(x));\n}\n\nvec3 hash3(inout uint x)\n{\n    return vec3(hash(x), hash(x), hash(x));\n}\n\nvec4 hash4(inout uint x)\n{\n    return vec4(hash(x), hash(x), hash(x), hash(x));\n}\n\nvec4 hash42(uvec2 p)\n{\n    uint x = p.x*2131u + p.y*2131u*2131u;\n    return vec4(hash(x), hash(x), hash(x), hash(x));\n}\n\nvec4 hash43(uvec3 p)\n{\n    uint x = p.x*461u + p.y*2131u + p.z*2131u*2131u;\n    return vec4(hash(x), hash(x), hash(x), hash(x));\n}\n\nvec3 randomUnitVector()\n{\n    vec2 rand = hash2(state);\n    rand.y = rand.y*2.-1.;\n    rand.x *= PI*2.;\n    \n    float r = sqrt(1. - rand.y*rand.y);\n    vec2 xy = vec2(cos(rand.x), sin(rand.x)) * r;\n    \n    return vec3(xy, rand.y);\n}\n\nvec3 randomCosineHemisphere(vec3 n)\n{\n    return normalize(randomUnitVector() + n);\n}\n\nvec3 sRGBToLinear(vec3 col)\n{\n    return mix(pow((col + 0.055) / 1.055, vec3(2.4)), col / 12.92, lessThan(col, vec3(0.04045)));\n}\n\nvec3 linearTosRGB(vec3 col)\n{\n    return mix(1.055 * pow(col, vec3(1.0 / 2.4)) - 0.055, col * 12.92, lessThan(col, vec3(0.0031308)));\n}\n\n// ACES tone mapping curve fit to go from HDR to LDR\n//https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp((x*(a*x + b)) / (x*(c*x + d) + e), 0.0f, 1.0f);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define LIGHT_POS vec3(0.278, 0.5489, 0.2795)\n#define LIGHT_SIZE vec2(0.13, 0.105)\n\nvec3 sampleLight()\n{\n    vec2 r = (hash2(state) - 0.5) * 2.0;\n    return LIGHT_POS + vec3(LIGHT_SIZE.x * r.x, 0.0001, LIGHT_SIZE.y * r.y) * 0.5;\n}\n\nvec3 getSkybox(vec3 direction)\n{\n    vec3 env = sRGBToLinear(texture(iChannel1, direction).rgb);\n    return SKYBOX_STRENGTH * env;\n}\n\nvoid sceneIntersect(Ray ray, out HitInfo hit, out Material mat)\n{\n    hit = HitInfo(MAX_DIST, vec3(0), false);\n    mat = Material(vec3(0), vec3(0), 1.0, 0.0, 1.0);\n    \n    // Walls\n    Ray oldRay = ray;\n    ray.origin -= vec3(0.556, 0.549, 0.559) / 2.0;\n    if (boxIntersectInsideZ(ray, vec3(0.556, 0.549, 0.559) / 2.0, hit))\n    {\n        vec3 pos = ray.origin + ray.direction * hit.t;\n        \n        vec3 color = vec3(1);\n        vec3 emissive = vec3(0);\n        float sgn = float(hit.inside) * 2.0 - 1.0;\n        if (hit.normal.x * sgn > 0.0)\n            color = vec3(0.8, 0.12, 0.12);\n        else if (hit.normal.x * sgn < 0.0)\n            color = vec3(0.24, 0.65, 0.2);\n        \n        if (!hit.inside && hit.normal.z < 0.0)\n        {\n            vec4 tex = texture(iChannel3, (pos.xy / vec2(0.556, 0.549) + 0.5) / vec2(6, 1));\n            emissive = sRGBToLinear(tex.rgb) * tex.a;\n            color = vec3(1.0 - tex.a);\n        }\n        mat = Material(color, emissive, 1.0, 0.0, 1.0);\n    }\n    ray = oldRay;\n    \n    // Short box\n    ray.origin -= vec3(0.556 - 0.186, 0.0825, 0.559 - 0.169);\n    mat2 rotMat1 = rot2D(radians(17.0));\n    mat2 rotMat2 = rot2D(radians(-17.0));\n    ray.origin.xz *= rotMat1;\n    ray.direction.xz *= rotMat1;\n    if (boxIntersect(ray, vec3(0.167, 0.165, 0.167) / 2.0, hit))\n    {\n        hit.normal.xz *= rotMat2;\n        mat = Material(vec3(1), vec3(0), 1.0, 0.0, 1.0);\n    }\n    ray = oldRay;\n    \n    // Tall box\n    ray.origin -= vec3(0.556 - 0.351, 0.165, 0.559 - 0.351);\n    ray.origin.xz *= rotMat2;\n    ray.direction.xz *= rotMat2;\n    if (boxIntersect(ray, vec3(0.166, 0.33, 0.168) / 2.0, hit))\n    {\n        hit.normal.xz *= rotMat1;\n        mat = Material(vec3(1), vec3(0), 1.0, 0.0, 1.0);\n    }\n    ray = oldRay;\n    \n    // Light\n    ray.origin -= LIGHT_POS;\n    if (boxIntersect(ray, vec3(LIGHT_SIZE.x, 0.0001, LIGHT_SIZE.y) / 2.0, hit))\n    {\n        mat = Material(vec3(0), vec3(12), 1.0, 0.0, 1.0);\n    }\n    ray = oldRay;\n}\n\n#define MIS_HEURISTIC 0\nfloat misWeight(float pdfA, float pdfB)\n{\n    #if MIS_HEURISTIC == 0\n    // Balance heuristic\n    return pdfA / (pdfA + pdfB);\n    #else\n    // Power heuristic\n    return pdfA*pdfA / (pdfA*pdfA + pdfB*pdfB);\n    #endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    initState(fragCoord, iFrame);\n    \n    vec2 o = halton(vec2(13, 23) * float(iFrame+1));\n    vec2 ndc = (2. * (fragCoord + o - 0.5) - iResolution.xy) / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 ro = vec3(0.278, 0.273, -0.8);\n    vec3 lo = ro + vec3(0, 0, 1);\n    \n    vec4 m = texelFetch(iChannel0, ivec2(0, 0), 0);\n    if (iFrame < 2)\n        m = vec4(0.5, 0.5, 0, 0);\n    \n    if (int(fragCoord.x) == 0 && int(fragCoord.y) == 0)\n    {\n        if (iFrame < 2)\n        {\n            fragColor = vec4(0.5, 0.5, 0, 0);\n        } else\n        {\n            vec2 mn = iMouse.xy / iResolution.xy;\n            fragColor = vec4(m);\n            if (iMouse.z > 0.0)\n            {\n                if (fragColor.zw != vec2(0))\n                    fragColor.xy += (mn - m.zw);\n                fragColor.zw = mn;\n            } else\n            {\n                fragColor.zw = vec2(0);\n            }\n        }\n        return;\n    }\n    \n    float ax = -m.x * TAU;\n    float ay = m.y * PI - PI * 0.5;\n    \n    ro -= lo;\n    ro.yz *= rot2D(ay);\n    ro.xz *= rot2D(ax);\n    ro += lo;\n    \n    mat3 cmat = getCameraMatrix(ro, lo);\n    \n    vec3 rd = normalize(cmat * vec3(ndc, 2.35));\n    \n    vec3 color = vec3(0);\n    vec3 throughput = vec3(1);\n    \n    Ray ray = Ray(ro, rd);\n    \n    HitInfo hit;\n    Material mat;\n    sceneIntersect(ray, hit, mat);\n    \n    color += mat.emissive;\n    \n    for (int i = 0; i < BOUNCES; i++)\n    {\n        if (hit.t >= MAX_DIST)\n        {\n            #ifdef SKYBOX\n            color += SKYBOX_STRENGTH * throughput * getSkybox(ray.direction);\n            #endif\n            break;\n        }\n        \n        Ray rayNext;\n        rayNext.origin = ray.origin + ray.direction * hit.t + hit.normal * EPSILON;\n        rayNext.direction = randomCosineHemisphere(hit.normal);\n        \n        HitInfo hitNext;\n        Material matNext;\n        sceneIntersect(rayNext, hitNext, matNext);\n        \n        vec3 Le = matNext.emissive;\n        \n        float G0 = max(dot(rayNext.direction, hit.normal), 0.0) *\n                   max(dot(-rayNext.direction, vec3(0, -sign(rayNext.direction.y), 0)), 0.0) / (hitNext.t * hitNext.t);\n        \n        vec3 brdf = mat.color / PI;\n        float brdfPdf = 1.0 / PI;\n        float lightPdf = 1.0 / ((LIGHT_SIZE.x * LIGHT_SIZE.y) * G0);\n        \n        #ifdef NEE\n        #ifdef MIS\n        #ifdef COMPARE_MIS\n        float diffuseW = uv.x > 0.5 ? misWeight(brdfPdf, lightPdf) : 0.5;\n        #else\n        float diffuseW = misWeight(brdfPdf, lightPdf);\n        #endif\n        #else\n        float diffuseW = 1.0;\n        #endif\n        #else\n        float diffuseW = 1.0;\n        #endif\n        \n        color += throughput * brdf * diffuseW * Le / brdfPdf;\n        \n        vec3 lightPos = sampleLight();\n        vec3 lightDir = lightPos - rayNext.origin;\n        float lightDist = length(lightDir);\n        lightDir /= lightDist;\n        \n        \n        float G = max(dot(lightDir, hit.normal), 0.0) *\n                  max(dot(-lightDir, vec3(0, -sign(lightDir.y), 0)), 0.0) / (lightDist * lightDist);\n        \n        #ifdef NEE\n        if (G > 0.0)\n        {\n            Ray rayLight;\n            rayLight.origin = rayNext.origin + lightDir * EPSILON;\n            rayLight.direction = lightDir;\n            HitInfo hitLight;\n            Material matLight;\n            sceneIntersect(rayLight, hitLight, matLight);\n\n            float vis = float(dot(matLight.emissive, vec3(1)) > 0.0);\n\n            vec3 brdf = mat.color / PI;\n            float brdfPdf = 1.0 / PI;\n            float lightPdf = 1.0 / ((LIGHT_SIZE.x * LIGHT_SIZE.y) * G);\n\n            #ifdef MIS\n            #ifdef COMPARE_MIS\n            float lightW = uv.x > 0.5 ? misWeight(lightPdf, brdfPdf) : 0.5;\n            #else\n            float lightW = misWeight(lightPdf, brdfPdf);\n            #endif\n            #else\n            float lightW = 1.0;\n            #endif\n\n            vec3 lightLe = matLight.emissive;\n            color += throughput * brdf * lightLe * lightW * vis / lightPdf;\n        }\n        #endif\n        \n        throughput *= brdf / brdfPdf;\n        \n        ray = rayNext;\n        hit = hitNext;\n        mat = matNext;\n    }\n    \n    vec4 prevColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    float blend = iFrame == 0 || m.zw != vec2(0) ? 1.0 : 1.0 / (1.0 + (1.0 / prevColor.a));\n    \n    fragColor = vec4(mix(prevColor.rgb, color, blend), blend);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}