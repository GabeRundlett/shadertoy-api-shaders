{
    "Shader": {
        "info": {
            "date": "1552077776",
            "description": "tilemap generator",
            "flags": 0,
            "hasliked": 0,
            "id": "wdlXDS",
            "likes": 3,
            "name": "Tier Map 1",
            "published": 3,
            "tags": [
                "procedural",
                "2d"
            ],
            "usePreview": 0,
            "username": "parameterized",
            "viewed": 539
        },
        "renderpass": [
            {
                "code": "\nconst float M_PI = 3.1415926535897932384626433832795;\n\nfloat rand(vec2 n)\n{\n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\n//(n1x, n1y, n2x, n2y) n=closest points\nvec4 voronoi(vec2 pos, float jitter)\n{\n\tvec2 posi = floor(pos);\n\tvec2 pos2 = vec2(0, 0);\n\tfloat dist = 0.0;\n\tvec2 n1 = vec2(0, 0);\n\tvec2 n2 = vec2(0, 0);\n\tfloat n1d = 9.0;\n\tfloat n2d = 9.0;\n\tfor (int i=-2; i < 2; i++) {\n\t\tfor (int j=-2; j < 2; j++) {\n\t\t\tpos2 = posi+vec2(i,j)+vec2(0.5)+(vec2(rand(posi+vec2(i,j)), rand(posi+vec2(i,j)+0.5))*2.0-1.0)*jitter*0.5;\n\t\t\tdist = dot(pos-pos2, pos-pos2);\n\t\t\tif (dist < n2d) {\n\t\t\t\tif (dist < n1d) {\n\t\t\t\t\tn2d = n1d;\n\t\t\t\t\tn1d = dist;\n\t\t\t\t\tn2 = n1;\n\t\t\t\t\tn1 = pos2;\n\t\t\t\t} else {\n\t\t\t\t\tn2d = dist;\n\t\t\t\t\tn2 = pos2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn vec4(n1, n2);\n}\n\nvec4 voronoi(vec2 pos)\n{\n\treturn voronoi(pos, 1.0);\n}\n\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v)\n{\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n        -0.577350269189626, 0.024390243902439);\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 289.0);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n        dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n\n// 1: water, 2: sand, 3: grass, 4: rock, 5: path, 6: floor, 7: wall, 8: platform\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord - iResolution.xy*0.5;\n    float scale = sin(iTime*0.5)*0.5 + 0.75;\n    uv += (iMouse.xy - iResolution.xy*0.5)/scale*(1.25 - scale);\n    uv.y = -uv.y;\n    uv *= scale;\n    vec2 p = floor(uv);\n\n    // grass/sand/water\n    int tileChoices[3] = int[](3, 2, 1);\n    float r1 = snoise(p/32.0)*0.5 + 0.5;\n    int choice = 0;\n    for (int i=0; i < 3; i++) {\n        if (r1 < float(i+1)/3.0) {\n            choice = tileChoices[i];\n            break;\n        }\n    }\n\t// rock\n    float r2 = snoise(1000.0 + p/64.0)*0.5 + 0.5;\n    if (r1 < 0.2 && r2 < 0.5) {\n        choice = 4;\n    }\n\n    // buildings\n    float freq = 64.0;\n    vec2 vp = p/freq;\n    vec4 vpts = voronoi(vp, 0.5);\n    vec2 vd = vec2(floor(abs(vp.x - vpts.x)*freq), floor(abs(vp.y - vpts.y)*freq));\n    // inside\n\t// floor\n    if (vd.x <= 4.0 && vd.y <= 6.0) {\n        choice = 6;\n    }\n\t// path\n    if (distance(vp, vpts.xy)*freq < 2.0) {\n        choice = 5;\n    }\n    // walls\n    if ((vd.x == 4.0 && vd.y <= 6.0 || vd.y == 6.0 && vd.x <= 4.0)\n    && vd.x > 1.0  && vd.y > 1.0) {\n        choice = 7;\n    }\n\n    // paths\n    float d = length(p);\n    float angle = atan(p.y, p.x);\n    angle += snoise(2000.0 + p/64.0)/d*4.0;\n    if (distance(mod(angle/(2.0*M_PI)*8.0, 1.0), 0.5) < 0.3/(d/8.0)) {\n        choice = 5;\n    }\n\n    // platform\n    if (length(p) < 8.0) {\n        choice = 8;\n    }\n    \n    vec3 tileColors[10] = vec3[](\n        vec3(0.0, 0.0, 0.0),\n    \tvec3(41.0, 137.0, 214.0),\n    \tvec3(251.0, 228.0, 125.0),\n    \tvec3(98.0, 195.0, 116.0),\n    \tvec3(98.0, 98.0, 98.0),\n    \tvec3(205.0, 140.0, 79.0),\n    \tvec3(183.0, 163.0, 43.0),\n    \tvec3(104.0, 88.0, 0.0),\n    \tvec3(73.0, 73.0, 73.0),\n    \tvec3(73.0, 73.0, 73.0)\n\t);\n\n    fragColor = vec4(tileColors[choice]/255.0, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}