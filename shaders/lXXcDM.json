{
    "Shader": {
        "info": {
            "date": "1726237795",
            "description": "boombox",
            "flags": 0,
            "hasliked": 0,
            "id": "lXXcDM",
            "likes": 17,
            "name": "Graphic Design Experiment 17",
            "published": 3,
            "tags": [
                "boombox",
                "graphicdesign",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 64\n#define MAX_DIST 64.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define SUV(p) vec2(atan(p.x,p.z),acos(p.y))\n#define ZERO (min(iFrame,0))\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xy)-t.x,p.z);\n    return length(q)-t.y;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCone( vec3 p, vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xy), -p.z );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\n\nfloat knob(vec3 p, float speed){\n    p.xy*=Rot(radians(30.*sin(iTime*speed)));\n    float d = max(abs(p.z)-0.01,length(p.xy)-0.015);\n    float d2 = sdBox(p-vec3(0.,0.,-0.02),vec3(0.004,0.1,0.014));\n    d = max(-d2,d);\n    return d;\n}\n\nfloat circleSlider(vec3 p, float speed){\n    p.yz*=Rot(radians(30.*sin(iTime*speed)));\n    float d = max(abs(p.x)-0.01,length(p.yz)-0.02);\n    float d2 = sdBox(p-vec3(0.,0.,-0.017),vec3(0.01,0.008,0.01));\n    d = min(d,d2);\n    return d;\n}\n\nfloat rectSlider(vec3 p, float speed){\n    p.y+=sin(iTime*speed)*0.025;\n    float d = sdBox(p,vec3(0.008,0.015,0.02));\n    return d;\n}\n\nfloat upperFarSideItem(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(0.05,0.04,0.04));\n    float a = radians(-30.);\n    p.y = abs(p.y);\n    float c = dot(p-vec3(0.,0.07,0.),vec3(0.0,sin(a),cos(a)));\n    d = max(-c,d);\n    p = prevP;\n    d = max(-sdBox(p-vec3(0.,0.0,-0.03),vec3(0.04,0.03,0.05)),d);\n    float d2 = sdBox(p-vec3(0.,0.0,-0.035),vec3(0.05,0.004,0.003));\n    d = min(d,d2);\n    return d;\n}\n\nfloat centerBottomItem(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(0.09,0.025,0.025));\n    float a = radians(-30.);\n    float c = dot(p-vec3(0.,0.04,0.),vec3(0.0,sin(a),cos(a)));\n    d = max(-c,d);\n    \n    p.x = abs(p.x)-0.01;\n    p.y+=-0.013;\n    p.z+=0.02;\n    p.yz*=Rot(radians(-30.));\n    float d2 = sdBox(p,vec3(0.008,0.015,0.005));\n    d = min(d,d2);\n    p.x = abs(p.x)-0.02;\n    d2 = sdBox(p,vec3(0.008,0.015,0.005));\n    d = min(d,d2);\n    p.x = abs(p.x)-0.02;\n    d2 = sdBox(p,vec3(0.008,0.015,0.005));\n    d = min(d,d2);\n    return d;\n}\n\nfloat speaker(vec3 p){\n    vec3 prevP = p;\n    float d = sdTorus(p,vec2(0.105,0.005));\n    float d2 = sdCone(p-vec3(0.,0.0,-0.1),vec2(0.15),0.13);\n    d2 = max((abs(p.z)-0.015),d2);\n    d2 = max(-(length(p.yx)-0.075),d2);\n    d = min(d,d2);\n    d2 = length(p-vec3(0.,0.0,0.05))-0.028;\n    d = min(d,d2);\n    \n    p.y = abs(p.y)-0.022;\n    p.y+=-0.01;\n    p.z+=0.015;\n    d2 = sdBox(p,vec3(0.1,0.01,0.01));\n    float a = radians(-50.);\n    p.x = abs(p.x)-0.09;\n    float c = dot((p-vec3(0.,0.02,0.)),vec3(sin(a),cos(a),0.0));\n    d2 = max(-c,d2);\n    p = prevP;\n    p.y = abs(p.y)-0.022;\n    p.z+=0.015;\n    d2 = max(-d2,sdBox(p,vec3(0.09,0.012,0.005)));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.z+=0.015;\n    p.x = abs(p.x)-0.08;\n    d2 = sdBox(p,vec3(0.01,0.007,0.01));\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat boomBox(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(0.35,0.22,0.08));\n    float a = radians(-30.);\n    float c = dot(p-vec3(0.,0.3,0.),vec3(0.0,sin(a),cos(a)));\n    d = max(-c,d);\n    p.x = abs(p.x)-0.35;\n    float d2 = sdBox(p-vec3(0.,-0.02,0.),vec3(0.005,0.16,0.06));\n    d = max(-d2,d);\n    p = prevP;\n    p+=vec3(0.3,-0.19,0.06);\n    d2 = max(abs(p.z)-0.02,length(p.xy)-0.01);\n    d = min(d,d2);\n    p = prevP;\n    p+=vec3(-0.29,-0.175,0.07);\n    d2 = max(abs(p.z)-0.02,length(p.xy)-0.025);\n    d = min(d,d2);\n    \n    // antenna\n    p = prevP;\n    p.x = abs(p.x)-0.05;\n    p.y-=0.25;\n    p.xy*=Rot(radians(45.));\n    d2 = max(abs(p.y)-0.2,length(p.xz)-0.005);\n    d = min(d,d2);\n    p = prevP;\n    p.y-=0.21;\n    d2 = sdBox(p,vec3(0.06,0.02,0.01));\n    d = min(d,d2);\n    \n    // handle\n    p = prevP;\n    p+=vec3(0.0,-0.25,-0.03);\n    d2 = sdBox(p,vec3(0.32,0.05,0.012));\n    d2 = max(-sdBox(p-vec3(0.,-0.005,0.),vec3(0.305,0.025,0.05)),d2);\n    d = min(d,d2);\n    \n    // right circle slider\n    p = prevP;\n    p.x -= 0.19;\n    p.y+=-0.08;\n    p.x = abs(p.x)-0.02;\n    p += vec3(0.0,0.0,0.08);\n    d = max(-sdBox(p,vec3(0.017,0.027,0.02)),d);\n    p -= vec3(0.0,0.0,0.01);\n    d2 = circleSlider(p,1.5);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.y+=-0.08;\n    p.x = abs(p.x)-0.1;\n    p += vec3(0.0,0.0,0.08);\n    d = max(-sdBox(p,vec3(0.017,0.027,0.02)),d);\n    p -= vec3(0.0,0.0,0.01);\n    d2 = circleSlider(p,-1.2);\n    d = min(d,d2);    \n    \n    // center slider\n    p = prevP;\n    p.y+=-0.1;\n    p.x = abs(p.x)-0.015;\n    p += vec3(0.0,0.0,0.08);\n    d = max(-sdBox(p,vec3(0.012,0.045,0.02)),d);\n    p -= vec3(0.0,0.0,0.01);\n    d2 = rectSlider(p,-1.2);\n    d = min(d,d2); \n    \n    p = prevP;\n    p.y+=-0.1;\n    p.x = abs(p.x)-0.045;\n    p += vec3(0.0,0.0,0.08);\n    d = max(-sdBox(p,vec3(0.012,0.045,0.02)),d);\n    p -= vec3(0.0,0.0,0.01);\n    d2 = rectSlider(p,1.7);\n    d = min(d,d2); \n    \n    // knobs\n    p = prevP;\n    p.x += 0.18;\n    p.y+=-0.07;\n    p.z+=0.08;\n    d2 = knob(p,1.7);\n    d = min(d,d2); \n    \n    p.x = abs(p.x)-0.04;\n    d2 = knob(p,-1.2);\n    d = min(d,d2); \n    \n    // upper far side parts\n    p = prevP;\n    p.y+=-0.095;\n    p.z+=0.08;\n    p.x = abs(p.x)-0.29;\n    d2 = upperFarSideItem(p);\n    d = min(d,d2); \n    \n    // bottom center\n    p = prevP;\n    p.z+=0.08;\n    p.y-=0.01;\n    d2 = sdBox(p,vec3(0.09,0.03,0.01));\n    d2 = max(-sdBox(p,vec3(0.04,0.01,0.02)),d2);\n    d = min(d,d2); \n    p.y+=0.05;\n    d2 = sdBox(p,vec3(0.09,0.01,0.01));\n    d = min(d,d2); \n    p.y+=0.06;\n    d2 = sdBox(p,vec3(0.09,0.04,0.01));\n    d2 = max(-sdBox(p,vec3(0.04,0.02,0.02)),d2);\n    d = min(d,d2);\n    p.y+=0.075;\n    d2 = centerBottomItem(p);\n    d = min(d,d2);\n    \n    // speakers\n    p = prevP;\n    p.y+=0.08;\n    p.z+=0.08;\n    p.x = abs(p.x)-0.22;\n    d2 = sdBox(p,vec3(0.12,0.12,0.01));\n    d = min(d,d2); \n    p.z+=0.01;\n    d2 = speaker(p);\n    p.z+=0.035;\n    d = max(-(length(p)-0.08),d);\n    d = min(d,d2); \n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    float d = boomBox(p);\n    \n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<3; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.8)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\n// the reflection code reference from the following: https://www.shadertoy.com/view/tsXSRs\nvec3 reflectionBg(vec2 uv){\n    const float pi = 3.14159;\n    return mix(vec3(0.05), vec3(2.), smoothstep(pi*0.35, pi*0.98, uv.y));\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){    \n    float IOR =\t1.309; //IOR:index of reflection\n    vec3 rdir = refract(-rd,n,1.0/IOR); \n    col = reflectionBg(SUV(rdir));\n    col = diffuseMaterial(n,rd,p,sqrt(col));\n    return col;\n}\n\nfloat dots(vec2 p, float size, float dirX, float dirY){\n    p.x-=iTime*0.02*dirX;\n    p.y-=iTime*0.02*dirY;\n    return length(mod(p,0.03)-0.015)-size;\n}\n\nfloat bgItem(vec2 p){\n    p*=Rot(radians(-25.));\n    p*=0.7;\n    p.x-=0.13;\n    vec2 prevP = p;\n    p.y*=1.5;\n    p-=vec2(0.12,-0.02);\n    p*=Rot(radians(100.));\n    float d = Tri(p,vec2(0.2));\n    p = prevP;\n    p-=vec2(-0.1,0.03);\n    p*=Rot(radians(115.));\n    float d2 = B(p,vec2(0.05,0.12));\n    d = min(d,d2);\n    p = prevP;\n    p-=vec2(-0.4,0.04);\n    p*=Rot(radians(-100.));\n    p.x*=4.;\n    p.y*=0.9;\n    d2 = Tri(p,vec2(0.2));\n\n    d = min(d,d2);\n    p = prevP;\n    return max(d,dots(p,0.007,3.,0.));\n}\n\nfloat stripes(vec2 p, float dir){\n    vec2 prevP = p;\n    \n    p*=Rot(radians(30.));\n    p.x+=iTime*0.05*dir;\n    p.x = mod(p.x,0.02)-0.01;\n    \n    float d = B(p,vec2(0.003,10.));\n    return d;\n}\n\nvec3 triBg(vec2 p, vec3 col){\n    vec2 prevP = p;\n    float d = max(Tri(p,vec2(0.3)),dots(p,0.001,0.,1.));\n    return mix(col,vec3(0.7),S(d,0.0));\n}\n\nvec3 circleBg(vec2 p, vec3 col){\n    vec2 prevP = p;\n    float d = max(abs(length(p)-0.15)-0.02,dots(p,0.001,0.,1.));\n    return mix(col,vec3(0.7),S(d,0.0));\n}\n\nvec3 stripeBg(vec2 p, vec3 col){\n    vec2 prevP = p;\n    float d = stripes(p,1.);\n    d = max(B(p,vec2(0.55,0.25)),d);\n    return mix(col,vec3(0.13),S(d,0.0));\n}\n\nvec3 drawBg(vec2 p, vec3 col) {\n    vec2 prevP = p;\n    p*=Rot(radians(iTime*-10.0));\n    // https://en.wikipedia.org/wiki/Log-polar_coordinates\n    float r = log(sqrt(p.x*p.x+p.y*p.y)); // or log(length(p))\n    float theta = atan(p.y/p.x);\n    p.x = r;\n    p.y = theta;\n    \n    p.x-=iTime*0.3;\n    p*=2.0;\n    p = fract(p)-0.5;\n    p*=0.75;\n    \n    float d = bgItem(p);\n    p = prevP;\n    col = triBg(p-vec2(-0.5,-0.1),col);\n    col = triBg((vec2(p.x,p.y*-1.)-vec2(0.5,-0.1)),col);\n    col = circleBg(p-vec2(-0.54,0.25),col);\n    col = circleBg(vec2(p.x,p.y*-1.)-vec2(0.54,0.25),col);\n    col = stripeBg(p,col);\n    col += mix(col,vec3(0.7),S(d,0.0));\n    \n    d = length(p)-0.01;\n    col = mix(col,vec3(0.7),S(d,0.0));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    \n    vec3 ro = vec3(0, 0, -1.);\n    ro.yz *= Rot(radians(-5.0));\n    ro.xz *= Rot(radians(sin(iTime*0.6)*30.0));\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    } else {\n        col = drawBg(uv,col);\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}