{
    "Shader": {
        "info": {
            "date": "1530592670",
            "description": "Torus and hexagons",
            "flags": 0,
            "hasliked": 0,
            "id": "4dKfDV",
            "likes": 33,
            "name": "FootTorus",
            "published": 3,
            "tags": [
                "3d",
                "torus",
                "hexagon"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1532
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define AA 5   // make this 1 is your machine is too slow\n\n\n//------------------------------------------------------------------\n\nconst vec2 torus = vec2(0.5,0.2);\n\nfloat map( in vec3 p )\n{\n    return length( vec2(length(p.xz)-torus.x,p.y) )-torus.y;\n}\n\n// gradient/derivative of map (common factors removed)\nvec3 dmap( in vec3 p )\n{\n    return p*(1.0 - vec3(1,0,1)*torus.x/length(p.xz));\n  //return p*(dot(p,p)-torus.y*torus.y-torus.x*torus.x*vec3(1.0,-1.0,1.0));\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    // plane\n    float tmax = (-torus.y-ro.y)/rd.y;\n   \n    // torus\n    float t = 1.0;\n    float m = 2.0;\n    for( int i=0; i<100; i++ )\n    {\n\t    float precis = 0.0004*t;\n\t    float res = map( ro+rd*t );\n        if( res<precis || t>tmax ) break;\n        t += res;\n    }\n\n    if( t>tmax ) { t=tmax; m=1.0; }\n    return vec2( t, m );\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n\tfloat res = 1.0;\n    float t = 0.02;\n    for( int i=0; i<12; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res,12.0*h/t );\n        t += clamp( h, 0.05, 0.10 );\n        if( res<0.005 || t>1.0 ) break;\n    }\n    return smoothstep( 0.0, 1.0, res );\n}\n\nvec3 hexagon_pattern( vec2 p ) \n{\n\tvec2 q = vec2( p.x*2.0*0.5773503, p.y + p.x*0.5773503 );\n\t\n\tvec2 pi = floor(q);\n\tvec2 pf = fract(q);\n\n\tfloat v = mod(pi.x + pi.y, 3.0);\n\n\tfloat ca = step(1.0,v);\n\tfloat cb = step(2.0,v);\n\tvec2  ma = step(pf.xy,pf.yx);\n\t\n\treturn vec3( pi + ca - cb*ma, dot( ma, 1.0-pf.yx + ca*(pf.x+pf.y-1.0) + cb*(pf.yx-2.0*pf.xy) ) );\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3  col = vec3(0.0);\n    vec2  res = castRay(ro,rd);\n    vec3  pos = ro + rd*res.x;\n    vec3  nor = vec3(0.0,1.0,0.0);\n    float occ = 1.0;\n\n    // plane\n    if( res.y<1.5 )\n    {\n        // fake occlusion\n        occ = smoothstep(0.0,0.42, abs(length(pos.xz)-torus.x) );\n        // texture\n        #if 0\n        vec3  h = hexagon_pattern(pos.xz*4.);\n        float f = mod(h.x+2.0*h.y,3.0)/2.0 ;\n        #else\n        float f = float( (int(floor(2.0*pos.x))+int(floor(2.0*pos.z)))&1);\n        #endif\n        col = vec3(0.3 + f*0.1);\n    }\n    // torus\n    else\n    {\n        // analytic torus normal\n        nor = normalize( dmap(pos) );\n        // fake occlusion\n        occ = 0.5 + 0.5*nor.y;\n        // texture\n        vec2 uv = vec2(atan(pos.z,pos.x),atan(length(pos.xz)-torus.x,pos.y) )*\n                  vec2(12.0*sqrt(3.0), 8.0)/3.14159;\n        uv.y += iTime;\n        vec3 h = hexagon_pattern( uv );\n        col = vec3( mod(h.x+2.0*h.y,3.0)/2.0 );\n        //col = mix(col,vec3(0.0), 1.0-smoothstep(0.02,0.05,h.z)); // aliased\n        col = mix(col,vec3(0.0),clamp(1.3*(1.0-smoothstep(0.02*res.x,0.04*res.x,h.z))/res.x,0.0,1.0)); // somehow filtered\n    }\n    // lighting        \n    vec3  lig = normalize( vec3(0.4, 0.5, -0.6) );\n    vec3  hal = normalize( lig-rd );\n    float amb = clamp( 0.65+0.35*nor.y, 0.0, 1.0 );\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 );\n\n    dif *= calcSoftshadow( pos, lig );\n\n    float spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),32.0) *\n                dif *\n                (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n    vec3 lin = vec3(0.0);\n    lin += 1.63*dif*vec3(1.15,0.90,0.55);\n    lin += 0.50*amb*vec3(0.30,0.60,1.50)*occ;\n    lin += 0.30*bac*vec3(0.40,0.30,0.25)*occ;\n    col = col*lin;\n    col += 6.00*spe*vec3(1.15,0.90,0.55);\n\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\n    // camera\t\n    float t = 6.283185*iTime/120.0;\n    vec3 ro = vec3( 1.3*cos(t), 1.1, 1.3*sin(t) );\n    vec3 ta = vec3( 0.0, -0.2, 0.0 );\n    // camera-to-world transformation\n    vec3 cw = normalize(ta-ro);\n    vec3 cu = normalize(vec3(-cw.z,0.0,cw.x));\n    vec3 cv =          (cross(cu,cw) );\n    \n    vec4 tot = vec4(0.0);\n\t#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = (vec2(float(m),float(n)) / float(AA-1) - 0.5)*1.7; // 1.7 pixels wide\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n\t\t#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\t\t#endif\n\n        // ray direction\n        vec3 rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma (before reconstruction/filtering)\n        col = pow( col, vec3(0.4545) );\n\n \t\t#if AA>1\n        // triangular reconstruction filter, kernel 2.0 pixels wide\n        float w = clamp(1.0 - length(o)/1.0,0.0,1.0);\n        tot.xyz += w*col;\n        tot.w += w;\n        #else\n        tot.xyz = col;\n        #endif\n\t#if AA>1\n    }\n    tot /= tot.w;\n\t#endif\n\n    // grading\n    tot.xyz = pow(tot.xyz,vec3(0.8,0.9,1.0) );\n    \n    // vignetting\n    vec2 q = fragCoord/iResolution.xy;\n    tot.xyz *= 0.3 + 0.7*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.25);\n    \n    fragColor = vec4( tot.xyz, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}