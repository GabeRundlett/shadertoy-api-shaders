{
    "Shader": {
        "info": {
            "date": "1662918681",
            "description": "inverse kinematics using the law of cosines.\nRef: \"Foundation ActionScript 3.0 Animation\"",
            "flags": 0,
            "hasliked": 0,
            "id": "sttfz4",
            "likes": 10,
            "name": "BLF Inverse Kinematics 2D",
            "published": 3,
            "tags": [
                "ik"
            ],
            "usePreview": 0,
            "username": "iY0Yi",
            "viewed": 382
        },
        "renderpass": [
            {
                "code": "#define PI acos(-1.)\n#define R(p, a) p=p*mat2(cos(a),sin(a),-sin(a),cos(a))\nvec2 rot(vec2 p, float r){ R(p, r); return p; }\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdCircle(vec2 p, float r){\n    return length(p)-r;\n}\n\n// Ref: \"Foundation ActionScript 3.0 Animation\" P.367\nvec2 ik(vec2 A, vec2 C, float a, float b){\n    vec2 oC = C-A;\n    float aD = atan(oC.y, oC.x);\n    float c = min(a+b, (C.x-A.x)/cos(aD));\n    if(c<=abs(a-b))return normalize(C)*a;\n    float aB = acos((b*b - a*a - c*c) / (-2.*a*c));\n    float aDB = -(aD+aB)+PI*.5;\n    return vec2(sin(aDB),cos(aDB))*a;\n}\n\nvoid mainImage( out vec4 O, in vec2 R )\n{\n    vec2 uv = ( R - .5 * iResolution.xy ) / iResolution.y;\n    \n    const float l1 = .5;\n    const float l2 = .3;\n    vec2 st = vec2(0);//vec2(sin(iTime*3.),cos(iTime*3.))*.01;\n    vec2 ed = vec2(sin(iTime),cos(iTime))*(.4+(sin(iTime*5.)+1.)*.2);\n    if(iMouse.z>0.)ed = -vec2((iMouse.x/iResolution.x-.5)*iResolution.x/iResolution.y, iMouse.y/iResolution.y-.5);\n\n    vec2 md = ik(st, ed, l1, l2);\n    \n    float s = sdCircle(uv+st, .025);\n    float m = sdCircle(uv+st+md, .025);\n    float e = sdCircle(uv+st+ed, .025);\n    float seg1 = sdSegment(uv, -st, -st-md);\n    float seg2 = sdSegment(uv, -st-md, -st-ed);\n    \n    float cirStMd = abs(sdCircle(uv+st, l1))-.001;\n    float cirMdEd = abs(sdCircle(uv+st+md, l2))-.001;\n    \n    float aas = 2.5/iResolution.y;\n    float d = smoothstep(.0,aas,min(s,min(m,e)));\n    d = smoothstep(.0,aas,min(d,min(seg1,seg2)));\n    d = min(d, smoothstep(.0,aas,cirStMd));\n    d = min(d, smoothstep(.0,aas,cirMdEd));\n    vec3 col = mix(vec3(0.875,0.835,0.749), vec3(0.102,0.082,0.039), d);    \n    O = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}