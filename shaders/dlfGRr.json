{
    "Shader": {
        "info": {
            "date": "1671171712",
            "description": "Based on this numberphile video [url=https://www.youtube.com/watch?v=FGC5TdIiT9U]The Slightly Spooky Recam√°n Sequence[/url].",
            "flags": 40,
            "hasliked": 0,
            "id": "dlfGRr",
            "likes": 15,
            "name": "Recaman Sequence",
            "published": 3,
            "tags": [
                "sound",
                "sequence",
                "visual",
                "recaman"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 uv, in vec2 pos, in vec2 size, in int char) {\n    uv = (uv - pos) / size + 0.5;\n    vec2 charUv = uv / 16.0;\n    vec2 dfdx = dFdx(charUv);\n    vec2 dfdy = dFdy(charUv);\n    if (all(lessThan(abs(uv - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel1, charUv + fract(vec2(char, 15 - char / 16) / 16.0), dfdx, dfdy).r;\n        color = mix(color, charColor, val);\n    }\n}\n\nvoid drawInt(inout vec3 color, in vec3 fontColor, in vec2 uv, in vec2 pos, in vec2 digitSize, in int num, in int precis) {\n    float digitWidth = 0.5 * digitSize.x;\n    if (num < 0) drawChar(color, fontColor, uv, pos, digitSize, 45);\n    pos.x += digitWidth * float(precis);\n    num = abs(num);\n    for (int i=0; i < precis; i++) {\n        int digit = num % 10;\n        drawChar(color, fontColor, uv, pos, digitSize, 48 + digit);\n        num = (num - digit) / 10;\n        pos.x -= digitWidth;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    //drawInt(fragColor.rgb, vec3(1.0), uv, vec2(0.5), vec2(0.1), int(texelFetch(iChannel0, ivec2(min(99, iFrame), 0), 0).x), 3);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0);\n    if (iFrame > 0) {\n        ivec2 addr = ivec2(fragCoord);\n        fragColor = texelFetch(iChannel0, addr, 0);\n        if (iFrame % DELAY == 0) {\n            int n = iFrame / DELAY;\n            if (n < 75) {\n                if (addr.x == n) {\n                    int prev = int(texelFetch(iChannel0, ivec2(n - 1, 0), 0).x);\n                    int cur = prev - n;\n                    if (cur > 0) {\n                        for (int i=0; i < n; i++) {\n                            int histVal = int(texelFetch(iChannel0, ivec2(i, 0), 0).x);\n                            if (cur == histVal) {\n                                cur = prev + n;\n                                break;\n                            }\n                        }\n                    }\n\n                    else {\n                        cur = prev + n;\n                    }\n\n                    fragColor = vec4(cur);\n                }\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float sdHalfCircle(in vec2 p, in float r) {\n    p.x = abs(p.x);\n    return p.y > 0.0 ? length(p - vec2(r, 0.0)) : abs(length(p) - r);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(1.0);\n    if (iFrame > 0) {\n        vec2 uv = fragCoord / iResolution.xy;\n        fragColor = texture(iChannel1, uv);\n        if (iFrame % DELAY == 0) {\n            int n = iFrame / DELAY;\n            if (n < 75) {\n                uv.y -= 0.5;\n                uv.x *= iResolution.x / iResolution.y;\n                float unit = 1.5 / iResolution.y;\n\n                float prev = 0.015 * texelFetch(iChannel0, ivec2(n - 1, 0), 0).x;\n                float cur = 0.015 * texelFetch(iChannel0, ivec2(n, 0), 0).x;\n\n                uv.y *= float(2 * (n % 2) - 1);\n                float newArc = sdHalfCircle(vec2(uv.x - (prev + cur) / 2.0, uv.y), abs(cur - prev) / 2.0);\n                fragColor.rgb = min(fragColor.rgb, smoothstep(0.0, unit, newArc));\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define DELAY 10",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "int[] sequence = int[](0, 1, 3, 6, 2, 7, 13, 20, 12, 21, 11, 22, 10, 23, 9, 24, 8, 25, 43, 62, 42, 63, 41, 18, 42, 17, 43, 16, 44, 15, 45, 14, 46, 79, 113, 78, 114, 77, 39, 78, 38, 79, 37, 80, 36, 81, 35, 82, 34, 83, 33, 84, 32, 85, 31, 86, 30, 87, 29, 88, 28, 89, 27, 90, 26, 91, 157, 224, 156, 225, 155, 226, 154, 227, 153);\nvec2 mainSound(int samp, float time) {\n    float noteLength = 0.167;//float(DELAY) * iTimeDelta;\n    float curVal = float(sequence[int(time / noteLength) % 75]);\n    time = mod(time, noteLength);\n\n    float note = sin(6.2831 * 10.0 * curVal * time);\n    note *= exp(-20.0 * noteLength * time);\n\n    float noteCenter = noteLength / 2.0;\n    note *= smoothstep(0.05, 0.0, abs(time - noteCenter) - noteCenter + 0.05);\n\n    return vec2(note);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}