{
    "Shader": {
        "info": {
            "date": "1671700638",
            "description": "Second GLSL refraction",
            "flags": 0,
            "hasliked": 0,
            "id": "mtl3zM",
            "likes": 5,
            "name": "rfrctn_2",
            "published": 3,
            "tags": [
                "glsl"
            ],
            "usePreview": 0,
            "username": "janaTox",
            "viewed": 109
        },
        "renderpass": [
            {
                "code": "// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDist(vec3 p) {\n\n\n    float d = sdBox(p, vec3(1));\n    \n    float c = cos(PI/5.), s = sqrt(.75-c*c);\n    vec3 n = vec3 (-.5,-c,s);\n    \n    p = abs(p);\n    p-= 2.* min(0., dot(p, n))*n;\n    \n    p.xy = abs(p.xy);\n    p-= 2.* min(0., dot(p, n))*n;\n    \n    p.xy = abs(p.xy);\n    p-= 2.* min(0., dot(p, n))*n;\n    \n    d = p.z-1.;\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float side) {\n\tfloat dO=1.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p)*side;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.01, 0); //AAAAAQUI\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 3.5); //AAAAAQUI\n    \n    vec3 col = texture(iChannel0, rd).rgb;\n    //vec3 col = vec3(0.);\n   \n    float d = RayMarch(ro, rd, 1.); // otside of object\n\n    float IOR = 1.45; // Index Of Refraction (water = 1.33)\n    \n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d; // 3D hit position\n        vec3 n = GetNormal(p); // normal of surface = orientation\n        vec3 r = reflect(rd, n);\n        \n        vec3 refOutside = texture(iChannel0, r).rgb;\n        \n        vec3 rdIn = refract(rd, n, 1./IOR); // ray directin when entering\n\n        vec3 pEnter = p - n*SURF_DIST*3.;\n        float dIn = RayMarch(pEnter, rdIn, -1.); // inside the object\n        \n        vec3 pExit = pEnter + rdIn * dIn; // 3D exit position\n        vec3 nExit = GetNormal(pExit); \n        \n        vec3 reflTex = vec3(0.);\n        \n        vec3 rdOut = vec3(0.);\n        \n        float abb = .01;\n        \n        rdOut = refract(rdIn, nExit, IOR-abb); // ray directin on exit\n        if (dot(rdOut, rdOut) == 0.) rdOut = reflect(rdIn, nExit);\n        reflTex.r = texture (iChannel0, rdOut).r;\n        \n        rdOut = refract(rdIn, nExit, IOR); // ray directin on exit\n        if (dot(rdOut, rdOut) == 0.) rdOut = reflect(rdIn, nExit);\n        reflTex.g = texture (iChannel0, rdOut).g;\n        \n        rdOut = refract(rdIn, nExit, IOR+abb); // ray directin on exit\n        if (dot(rdOut, rdOut) == 0.) rdOut = reflect(rdIn, nExit);\n        reflTex.b = texture (iChannel0, rdOut).b;\n        \n        float dens = .2;\n        float optDist = exp(-dIn*dens);\n        \n        col = reflTex*optDist*vec3(.8);\n        float fresnel = pow(1.+dot (rd, n), 5.);\n        \n        col = mix(reflTex, refOutside, fresnel);\n        \n        //col = vec3(reflTex);\n        //col = n*.5+.5; \n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}