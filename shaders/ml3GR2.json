{
    "Shader": {
        "info": {
            "date": "1682709076",
            "description": "Testing something out",
            "flags": 0,
            "hasliked": 0,
            "id": "ml3GR2",
            "likes": 6,
            "name": "depth of field study 3 + refract",
            "published": 3,
            "tags": [
                "chromaticaberration",
                "study",
                "depthoffield",
                "focus"
            ],
            "usePreview": 0,
            "username": "morisil",
            "viewed": 240
        },
        "renderpass": [
            {
                "code": "// Copyright Kazimierz Pogoda, 2023 - https://xemantic.com/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n// copyright statement borrowed from Inigo Quilez\n\nconst float SHAPE_SIZE = .5;\nconst float CHROMATIC_ABBERATION = .02;\nconst float ITERATIONS = 20.;\nconst float INITIAL_LUMA = .5;\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat sphere(in vec2 st, in float size) {\n    float dist = length(st) / size;\n    float value = sqrt(4. - dist * dist * 4.);\n    value = clamp(value, 0., 100.);\n    return value;// *\n     //* smoothstep(SIZE + EDGE_BLUR, SIZE - EDGE_BLUR, dist);\n}\n\nfloat getRefraction(in vec2 st, in float modScale, in float radius) {\n    vec2 modSt = mod(st, 1. / modScale) * modScale * 2. - 1.;\n    return sphere(modSt, radius);\n}\n\nfloat getColorComponent(in vec2 st, in float modScale, in float blur) {\n    vec2 modSt = mod(st, 1. / modScale) * modScale * 2. - 1.;\n    float dist = length(modSt);\n    float angle = atan(modSt.x, modSt.y);\n    float shapeMap = smoothstep(SHAPE_SIZE + blur, SHAPE_SIZE - blur, dist);\n    return shapeMap;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st =\n        (2.* fragCoord - iResolution.xy)\n        / min(iResolution.x, iResolution.y);\n    st *= rotate2d(sin(iTime * .14) * .3);\n    st *= (sin(iTime * .15) + 2.) * .3;\n\n    float modScale = 1.;\n\n    vec3 color = vec3(0);\n    float luma = INITIAL_LUMA;\n    float blur = .5 + sin(iTime * .5) * .3;\n    for (float i = 0.; i < ITERATIONS; i++) {\n        vec2 center = st + vec2(sin(iTime * .12), cos(iTime * .13));\n        //center += pow(length(center), 1.);\n        vec3 shapeColor = vec3(\n            getColorComponent(center - st * CHROMATIC_ABBERATION, modScale, blur),\n            getColorComponent(center, modScale, blur),\n            getColorComponent(center + st * CHROMATIC_ABBERATION, modScale, blur)        \n        ) * luma;\n        st *= 1.1 + getRefraction(center, modScale, .5 + sin(i * 16.3 + iTime * .834) * .4) * 1.5 * sin(iTime * .13);\n        st *= rotate2d(sin(iTime  * .05) * .3);\n        color += shapeColor;\n        color = clamp(color, 0., 1.);\n        if (color == vec3(1)) break;\n        luma *= .8;\n        blur *= .63;\n    }\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}