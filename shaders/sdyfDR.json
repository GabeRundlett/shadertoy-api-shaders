{
    "Shader": {
        "info": {
            "date": "1658054535",
            "description": "Intersection of a ray and a paraboloid (revolution on the left, and paraboloid on the right).",
            "flags": 0,
            "hasliked": 0,
            "id": "sdyfDR",
            "likes": 43,
            "name": "Paraboloid - intersection",
            "published": 3,
            "tags": [
                "2d",
                "raytracing",
                "raycasting",
                "intersection",
                "paraboloid"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1336
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Ray intersection for paraboloids, which are defined as \n//\n//  f(x,y,z) = ± a²x² + by ± c²z² = 0\n//\n// a,b,c are the parameters of the shape. See lines 74 and 75.\n// Note making non-symmetric paraboloids is as easy as making\n// a and c not equal.\n//\n// This shader is a complement to this other shader\n// https://www.shadertoy.com/view/fddBD2\n// which handles all other quadrics execpt paraboloids.\n//\n// List of ray-surface intersectors at \n//     https://www.shadertoy.com/playlist/l3dXRf\n// and\n//     https://iquilezles.org/articles/intersectors\n\nbool clipped( in vec3 pos, vec2 clipY, float clipXZ );\n\nfloat iParaboloid(           // intersection distance. -1 if no intersection\n    in vec3  ro, in vec3 rd, // ray origin and direction\n    in vec3  abc,            // the quadric (see above)\n    in vec2  clipY,          // vertical clipping heights\n    in float clipXZ,         // horizontal clipping\n    out vec3 oNor,           // normal at intersection\n    out bool oInside )       // inside/outside identifier\n{\n    vec2 ac2 = abc.xz*abs(abc.xz);    // squared WITH sign\n    \n    float k2 = dot(rd.xz,rd.xz*ac2);\n    float k1 = dot(rd.xz,ro.xz*ac2) + rd.y*abc.y*0.5;\n    float k0 = dot(ro.xz,ro.xz*ac2) + ro.y*abc.y;\n             \n    float h = k1*k1 - k2*k0;\n    if( h<0.0 ) return -1.0;\n    h = sqrt(h) * sign(k2);\n\n    // entry point\n    float t = (-k1-h)/k2;\n    vec3 pos = ro + t*rd;\n    if( t>0.0 && clipped(pos,clipY,clipXZ) ) \n    {\n        oInside = k2<0.0;\n        oNor = normalize( vec3(2.0*pos.x*ac2.x,abc.y,2.0*pos.z*ac2.y));\n        return t;\n    }\n\n    // exit point\n    t = (-k1+h)/k2;\n    pos = ro + t*rd;\n    if( t>0.0 && clipped(pos,clipY,clipXZ) )\n    {\n        oInside = k2>0.0;\n        oNor = normalize( vec3(2.0*pos.x*ac2.x,abc.y,2.0*pos.z*ac2.y));\n        return t;\n    }\n\n    return -1.0;\n}\n\nbool clipped( in vec3 pos, vec2 y, float xz )\n{\n    return pos.y>y.x && pos.y<y.y && abs(pos.x)<xz && abs(pos.z)<xz;\n}\n\n//--------------------------------------------------------\n\n// shapes\nconst vec3 kShape[2] = vec3[2]( \n  vec3(1.0, 1.0, 1.0),    // paraboloid of revolution\n  vec3(1.0, 2.0,-1.0) );  // hyperbolic paraboloid\n    \n\n// https://iquilezles.org/articles/filterableprocedurals/\nfloat gridTextureGradBox( in vec2 p, in vec2 ddx, in vec2 ddy )\n{\n\t// filter kernel\n    vec2 w = max(abs(ddx), abs(ddy)) + 0.01;\n\n\t// analytic (box) filtering\n    vec2 a = p + 0.5*w;                        \n    vec2 b = p - 0.5*w;           \n    const float N = 18.0; // grid thickness\n    vec2 i = (floor(a)+min(fract(a)*N,1.0)-\n              floor(b)-min(fract(b)*N,1.0))/(N*w);\n    //pattern\n    return (1.0-i.x)*(1.0-i.y);\n}\n\nvec2 getUV( in vec3 pos, int id )\n{\n    \n    if( id==1 ) return 8.0*pos.xz*(1.0+abs(pos.xz)*0.18);\n\n    // naive uv mapping for paraboloid\n    //return vec2(12.0,11.0)*vec2(atan(pos.x,pos.z),pos.y);\n    \n    // arc-length based, hardcoded for the y=x² parabola\n    float a2 = -pos.y;\n    float a = sqrt(a2);\n    float b = sqrt(1.0+4.0*a2);\n    float l = 0.5*a*b + 0.25*log(2.0*a+b); // arch length\n    float v = sqrt(l);\n    return 12.0*vec2(atan(pos.x,pos.z), 7.0*v/3.14159);\n}\n\nvec3 getRay( in vec2 p, in vec3 uu, in vec3 vv, in vec3 ww )\n{\n    return normalize( p.x*uu + p.y*vv + 3.0*ww );\n}\n\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n    float an1 = 0.4 + 0.9*smoothstep(0.7,0.9,-cos(iTime*6.283185/12.0));\n\tfloat an2 = 6.283185*iTime/12.0;\n\tvec3 ro = 12.0*vec3( cos(an1)*sin(an2), sin(an1), cos(an1)*cos(an2) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrixc\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    // global normalize coordinates\n    vec2 gp = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // viewport\n    int id = int(2.0*fragCoord.x/iResolution.x);\n    vec2 res = vec2( iResolution.x/2.0, iResolution.y/1.0);\n    vec2 q = vec2( mod(fragCoord.x,res.x), mod(fragCoord.y,res.y) );\n\n    // clip\n    ro.y += (id==0)?-2.2:0.0;\n    vec2  clipY = (id==0) ? vec2(-4.2,0.0) : vec2(-2.0,2.0);\n    float clipZ = (id==0) ? 4.0 : 2.0;\n    \n    // render\n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(q+o)-res)/res.y;\n        #else    \n        vec2 p = (2.0*q-res)/res.y;\n        #endif\n\n\t    // create view ray\n\t    vec3 rd = getRay( p, uu, vv, ww );\n\n        // background\n\t    vec3 col = vec3(0.08);\n        col *= 1.0-0.3*length(gp);\n        \n        // raytrace\n        bool isInside = false;\n        vec3 nor = vec3(0.0);\n        float t = iParaboloid( ro, rd, kShape[id], clipY, clipZ, nor, isInside );\n        if( t>0.0 )\n        {\n            vec3 pos = ro + t*rd;\n\n            // material\n            vec2 uv = getUV( pos, id );\n\n            // checkerboard pattern\n            {\n                col = vec3(0.6);\n                col += 0.4*smoothstep(-0.01,0.01,cos(uv.x*0.5)*cos(uv.y*0.5)); \n                if( isInside ) col = vec3(1.5,0.6,0.0);\n            }\n            // grid lines\n            {\n                #if 0\n                // no filtering\n                col *= smoothstep(-1.0,-0.98,cos(uv.x))*smoothstep(-1.0,-0.98,cos(uv.y));\n                #endif\n                #if 0\n                // hardware filtering\n                uv = 0.5 + uv/6.283185;\n                col *= gridTextureGradBox( uv, dFdx(uv), dFdy(uv) );\n                #endif\n                #if 1\n                // software filtering\n                // https://iquilezles.org/articles/filteringrm\n                vec2 px = vec2(p.x+2.0/res.y,p.y);\n                vec2 py = vec2(p.x,p.y+2.0/res.y);\n                vec3 rdx = getRay( px, uu, vv, ww );\n                vec3 rdy = getRay( py, uu, vv, ww );\n                vec3 posx = ro + t*rdx*dot(rd,nor)/dot(rdx,nor);\n                vec3 posy = ro + t*rdy*dot(rd,nor)/dot(rdy,nor);\n                vec2 uvx = getUV(posx, id);\n                vec2 uvy = getUV(posy, id);\n                uv  = 0.5 + uv /6.283185;\n                uvx = 0.5 + uvx/6.283185;\n                uvy = 0.5 + uvy/6.283185;\n                col *= gridTextureGradBox( uv, uvx-uv, uvy-uv );\n                #endif\n            }\n\n            // lighting\n            vec3 lig = normalize(vec3(0.7,0.6,0.3));\n            vec3 hal = normalize(-rd+lig);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            float amb = clamp( 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0)), 0.0, 1.0 );\n            col *= vec3(0.2,0.3,0.4)*amb*2.0 + 0.7*vec3(1.0,0.9,0.7)*dif;\n            col += 0.3*pow(clamp(dot(hal,nor),0.0,1.0),32.0)*dif;\n       }\n \t\n        // gamma\n        col = sqrt( col );\n\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n     \n    // dither to remove banding in the background\n    tot += fract(sin(fragCoord.x*vec3(13,1,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n    \n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}