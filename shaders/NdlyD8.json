{
    "Shader": {
        "info": {
            "date": "1642022927",
            "description": "This shader is part of MACHINEPAINTING. This series sets the machine both as aesthetical tool and material in an artistic way. work in progress!\n\ninfo here: https://tristanschulze.de/?p=4226",
            "flags": 0,
            "hasliked": 0,
            "id": "NdlyD8",
            "likes": 13,
            "name": "[ the floating blob ]",
            "published": 3,
            "tags": [
                "circle",
                "blob",
                "liquid",
                "viscocity"
            ],
            "usePreview": 0,
            "username": "SimonOakey",
            "viewed": 563
        },
        "renderpass": [
            {
                "code": "// ------------------------------------------------------------\n// ---- ðŸ˜ƒ licenced under love, peace and happiness ðŸ˜ƒ ------\n// ------------------------------------------------------------\n// ------------- MACHINEPAINTING -----------------\n// ------------------------------------------------------------\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 resolution;\nfloat time;\n\nconst vec3 col1 = vec3(0.);\nconst vec3 col2 = vec3(1.0);\n\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\n\nfloat sdCircle(vec2 pos, float radius) {\nreturn length(pos) - radius;\n}\n\nvec2 translate(vec2 pos, vec2 offset) {\nreturn pos - offset;\n}\n\nfloat random(float v){\nreturn fract(sin(v*1223.42454));\n}\n\nfloat opUnion(float a, float b){\nreturn min(a,b);\n}\nfloat opSmoothUnion(float d1, float d2, float k) {\nreturn -log2(exp2(-k * d1) + exp2(-k * d2)) / k;\n}\n\n\nfloat random2 (vec2 st) {\nreturn fract(sin(dot(st.xy,vec2(1.9898,178.233)))*4378.5453123);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n   time = iTime;\n   \n   const int N = 9;\nfloat _time = time*.3;\nvec2 positions[N];\nfloat _spread = sin(_time*2.3)*.5+.5;\nfloat _speed = sin(_time*5.)*.5+.5;\nfloat _blobby = sin(_time*1.3)*.5+.5;\nfloat _viscocity = sin(_time*1.3)*.5+.5;\nfloat _blobradius = sin(_time*1.3)*.5+.5;\n\n\nvec2 pos = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\npos *= 4.0; // zoom\nfloat d = 1e7;\n\n\nfor (float i = 1.0; i < float(N); i++) {\n\n\nfor(int j = 0; j < 2; j++){\npositions[int(i)].x += (.5+_spread) * random2(vec2(i, j)) * sin(10.1 * _time * random2(vec2(j, i)));\npositions[int(i)].y += (.5+_spread) * random2(vec2(i * i, j)) * cos(10.1 * _time * random2(vec2(i, j * j)));\n}\n\n\nfloat radius = mix(0.14*(_blobradius*.3+.5), .14*(_blobradius*.3+.5), .4+_blobby*random(i))*.01;\nfloat cd = sdCircle(translate(pos, positions[int(i)]), radius + .1+random(i)*.61);\nd = opSmoothUnion(d, cd, 2.+ _viscocity*18.) ;\n}\n\nfloat val = (d);\n\n// val = fract(sin(val*12.));\n\nval = smoothstep(.5,.52,val)+.2;\n\nval += d*.3;\n\nval = min(1.0,val);\nval -=.2;\n\n// dithering\nval -= random2(vec2(pos.x,pos.y+time*.01))*.02;\n\n\nvec3 col = vec3(val);\n\n\nfragColor = vec4(col, 1.0);\n   \n   \n   \n   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}