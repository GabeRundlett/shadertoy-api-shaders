{
    "Shader": {
        "info": {
            "date": "1557491487",
            "description": "\"No, we still haven't found the ship wrecks. But we found something.\"",
            "flags": 0,
            "hasliked": 0,
            "id": "Wls3DS",
            "likes": 7,
            "name": "[Wan] Underwater spheres",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection",
                "perlinnoise"
            ],
            "usePreview": 0,
            "username": "wan",
            "viewed": 560
        },
        "renderpass": [
            {
                "code": "#define EPS 0.001\n\nfloat rand(vec2 p) {\n\treturn fract(sin(p.x*12.9898+p.y*78.233)*43758.543);\n}\n\nfloat noise(vec2 p) {\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n\t\n\tvec2 o = vec2(0.,1.);\n\tfloat a = rand(i+o.xx);\n\tfloat b = rand(i+o.yx);\n\tfloat c = rand(i+o.xy);\n\tfloat d = rand(i+o.yy);\n\t\n\treturn mix(mix(a,b,f.x), mix(c,d,f.x), f.y);\n}\n\nfloat fractNoise(vec2 p) {\n\tfloat r = noise(p);\n\tfor (float i = 1.; i < 7.; i++) {\n\t\tr += noise(p*pow(2., i)) / pow(i, 2.5);\n\t}\n\treturn r;\n}\n\nfloat artifacts(vec3 p) {\n\tp = vec3(mod(p.x, 4.)-2.,p.y-1.5,mod(p.z, 2.6)-1.3);\n\tp.y /= 2.;\n\tp.x /= 2.;\n\treturn length(p) - .5;\n}\n\nfloat terrain(vec3 p) {\n\treturn p.y - fractNoise(p.xz/1.8)*1.2;\n}\n\nfloat map(vec3 p) {\n\treturn min(\n\t\tterrain(p),\n\t\tartifacts(p));\n}\n\nvec3 normal(vec3 p) {\n\tvec2 e = vec2(EPS, 0.);\n\treturn normalize(vec3(\n\t\tmap(p+e.xyy)-map(p-e.xyy),\n\t\tmap(p+e.yxy)-map(p-e.yxy),\n\t\tmap(p+e.yyx)-map(p-e.yyx)\n\t\t));\n}\n\nvec3 lightdir = normalize(vec3(.5,-5.,-2.));\nvec3 terrainColor(vec3 p, float hit) {\n\treturn mix(\n\t\tvec3(.0,.2,.0),\n\t\tvec3(.3,.8,.6),\n\t\tdot(normal(p), -lightdir) - hit/100.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = ( 2. * fragCoord.xy - iResolution.xy ) / iResolution.y * 5.;\n\tuv += (sin(uv.x*10.+iTime/4.)+cos(uv.y*5.+iTime/4.))/50.;\n\t\n\tvec3 eye = vec3(0.,3.,iTime);\n\tvec3 p = eye;\n\tvec3 phit = eye;\n\tvec3 raydir = normalize(vec3(uv.x, uv.y-2.5, 4.));\n\tfloat hit = -1.;\n\tfloat reflectionHit = -1.;\n\t\n\tfor (float i = 0.; i < 100.; i++) {\n\t\tfloat d = (hit > -1.) ? terrain(p) : map(p);\n\t\tif (d < EPS) {\n\t\t\tif (hit == -1.) {\n\t\t\t\thit = i;\n\t\t\t\tphit = p;\n\t\t\t\tvec3 n = normal(p);\n\t\t\t\traydir = raydir - 2.*dot(raydir,n)*n;\n\t\t\t\tif (terrain(p) < EPS) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treflectionHit = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tp += d * raydir * .7;\n\t}\n\t\n\t\n\tvec3 color;\n\tif (hit > 0.) {\n\t\tif (artifacts(phit) < EPS) {\n\t\t\tcolor = mix(\n\t\t\t\tvec3(.7,.2,.1),\n\t\t\t\tvec3(.9,.8,.6),\n\t\t\t\tdot(normal(phit), -lightdir) - hit/100.);\n\t\t\tcolor += clamp(terrainColor(p, hit)/2., 0.1, .5) * length(terrainColor(p, hit))/3. * 5.;\n\t\t} else {\n\t\t\tcolor = terrainColor(p, hit);\n\t\t}\n\t}\n\tcolor -= smoothstep(0.7,1.,p.y)/5.;\n\tcolor -= pow(length(p.z-eye.z), 0.2)/10.;\n\tcolor /= clamp(length(p.z-eye.z)/1.5, .5, 1.5);\n\tcolor = clamp(color, vec3(0.), vec3(1.));\n\tcolor += vec3(.02,.02,.15);\n\tcolor += vec3(.2,.4,.8)*clamp(uv.y/8.-.5,0.,.3);\n\tcolor = vec3(pow(color.x, .9), pow(color.y, .9), pow(color.z, .9));\n\t\n\n\tfragColor = vec4(color, 1.0 );\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}