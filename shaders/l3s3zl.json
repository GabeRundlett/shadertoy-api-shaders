{
    "Shader": {
        "info": {
            "date": "1707854329",
            "description": "Playing with an optical illusion from this youtube video: https://www.youtube.com/watch?v=EDQeArrqRZ4\nGives the Illusion of seeing a solid line, when in fact your brain is discerning the pixel changes across the noise.\nToggle the background in Common.",
            "flags": 32,
            "hasliked": 0,
            "id": "l3s3zl",
            "likes": 2,
            "name": "Line noise - XOR Illusion",
            "published": 3,
            "tags": [
                "noise",
                "line",
                "illusion",
                "xor",
                "hash"
            ],
            "usePreview": 0,
            "username": "berelium",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "// Settings are in common.\n// Line pixel size can be adjusted\n// Background filling can be toggled, along with time of fill\n// aliasing level (AA) can be adjusted\n\n// Go fullscreen and press [Alt + DownArrow] to restart.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Thanks to @Dave_Hoskins : https://www.shadertoy.com/view/4djSRW\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n// Thanks to @gPlatl : https://www.shadertoy.com/view/MlcGDB\nfloat line(vec2 P, vec2 A, vec2 B, float r)\n{\n\tvec2 g = B - A;\n    float d = abs(dot(normalize(vec2(g.y, -g.x)), P - A));\n\treturn smoothstep(r, 0.5*r, d);\n}\nfloat segment(vec2 P, vec2 A, vec2 B, float r) \n{\n    vec2 g = B - A;\n    vec2 h = P - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn smoothstep(r, 0.5*r, d);\n}\nfloat aaLine(vec2 P, vec2 A, vec2 B, float r, int alias) {\n    float al = 0.0;\n    \n    float _AA = float(alias);\n    float s = 1.0 / _AA;\n    vec2 o = vec2(0.0, 0.0);\n    for(int i = 0; i < AA; i++) {\n        for(int j = 0; j < AA; j++) {\n            o.x = (float(i) + 0.5) / _AA;\n            o.y = (float(j) + 0.5) / _AA;\n\n            vec2 aaP = P + (1.0 / iResolution.xy) * o;\n            al += line(aaP, A, B, r);\n        }\n    }\n    al /= _AA * _AA;\n    \n    return al;\n}\nfloat aaSegment(vec2 P, vec2 A, vec2 B, float r, int alias) {\n    float al = 0.0;\n    \n    float _AA = float(alias);\n    float s = 1.0 / _AA;\n    vec2 o = vec2(0.0, 0.0);\n    for(int i = 0; i < AA; i++) {\n        for(int j = 0; j < AA; j++) {\n            o.x = (float(i) + 0.5) / _AA;\n            o.y = (float(j) + 0.5) / _AA;\n\n            vec2 aaP = P + (1.0 / iResolution.xy) * o;\n            al += segment(aaP, A, B, r);\n        }\n    }\n    al /= _AA * _AA;\n    \n    return al;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec2 mo = (2. * iMouse.xy - iResolution.xy) / iResolution.y;\n    \n    vec4 prv = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec3 color = vec3(0);\n    float l = 0.0;\n    \n#ifdef USE_BACKGROUND\n    // Fill the background\n    if(iTime < FILL_TIME) {\n        vec4 locs = hash41(iTime * 3.14);\n        \n        l = aaLine(uv, locs.xy, locs.zw, PIX_SIZE, AA);\n        color = l * vec3(1);\n        \n        // If lines cross, make a black spot\n        prv.rgb -= color;\n        prv.rgb = abs(prv.rgb);\n        fragColor = prv;\n        return;\n        \n    }\n#endif\n    \n    // Otherwise, animate a segment moving around the screen\n    float t = iTime * ROT_SPEED; // Modify this float to get different resulting patterns\n    vec2 a = vec2(cos(t), sin(t));\n    vec2 b = vec2(cos(iTime), sin(iTime));\n    \n    l = aaSegment(uv, a, b, PIX_SIZE*2., AA);\n    color = l * vec3(1);\n    \n    // If lines cross, make a black spot\n    prv.rgb -= color;\n    prv.rgb = abs(prv.rgb);\n    fragColor = prv;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define AA 8\n#define PIX_SIZE 5. / iResolution.x\n//#define USE_BACKGROUND\n#define FILL_TIME 15.\n\n#define ROT_SPEED 1.75\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}