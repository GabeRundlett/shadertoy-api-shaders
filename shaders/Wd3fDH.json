{
    "Shader": {
        "info": {
            "date": "1604928349",
            "description": "The \"Caspian Sea Monster\" - an unsuccessful ocean skimmer",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd3fDH",
            "likes": 24,
            "name": "Ekranoplan",
            "published": 3,
            "tags": [
                "ocean",
                "aircraft",
                "flight",
                "wake"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 523
        },
        "renderpass": [
            {
                "code": "// \"Ekranoplan\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // (= 0/1) optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nmat3 DirVuMat (vec3 vd);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nvec2 Noisev2v4 (vec4 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit, flyPos, flyVel;\nfloat tCur, dstFar, flyRol, tDor, wkFac;\nint idObj;\nconst int idFus = 1, idCkp = 2, idEng = 3, idHul = 4, idWngT = 5, idWngM = 6, idTail = 7,\n   idFlt = 8, idESup = 9, idTCap = 10, idCov = 11, idMis = 12, idSil = 13;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, s, de, dc;\n  dMin = dstFar;\n  p -= flyPos;\n  p.xy = Rot2D (p.xy, flyRol);\n  q = p;\n  r = 1.;\n  if (q.z < -0.5) {\n    s = q.z + 0.5;\n    s *= s;\n    r *= 1. - 0.025 * s;\n    q.y -= 0.015 * s;\n  } else if (q.z > 2.5) {\n    s = q.z - 2.5;\n    s *= s;\n    r *= 1. - 0.04 * s;\n    q.y -= -0.02 * s;\n  }\n  d = PrCapsDf (q, r, 6.);\n  q = p;\n  dc = (tDor < 0.4) ? dstFar : PrBoxDf (q - vec3 (0., 0.8, -0.5), vec3 (0.35, 0.5, 1.));\n  d = max (d, - dc);\n  DMINQ (idFus);\n  q = p;\n  q.yz -= vec2 (0.6, -0.5);\n  d = PrRoundBoxDf (q, vec3 (0.35, 0.2, 1.2), 0.3);\n  d = max (d, - dc);\n  DMINQ (idCov);\n  s = smoothstep (0.2, 0.3, abs (tDor - 0.7));\n  q = p;\n  q.yz -= vec2 (0.6, -0.4);\n  d = PrCylDf (q.xzy, 0.08, 0.3 + 0.6 * (1. - s));\n  DMINQ (idSil);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.15, 1.4 - 0.5 * s, -0.5);\n  q.yz = Rot2D (q.yz, 0.1 * pi * (1. - s));\n  d = max (PrCapsDf (q, 0.12, 0.8), -0.8 - q.z);\n  DMINQ (idMis);\n  q = p;\n  q.yz -= vec2 (0.5, 3.2);\n  d = PrCapsDf (q, 0.5, 1.);\n  DMINQ (idCkp);\n  q = p;\n  q.x = abs (abs (abs (q.x) - 2.1) - 0.5);\n  q -= vec3 (0.25, 0.22, 4.);\n  r = 0.22 * (1. - 0.2 * q.z * q.z);\n  de = PrCapsDf (q, r, 0.7);\n  d = SmoothMax (abs (de) - 0.02, abs (q.z) - 0.8, 0.02);\n  d = min (d, PrCapsDf (q + vec3 (0., 0., -0.05), 0.125, 0.65));\n  DMINQ (idEng);\n  q = p;\n  q.yz -= vec2 (0.22, 4.);\n  r = 0.1 * (1. - 3. * q.z * q.z);\n  d = max (PrRoundBoxDf (q, vec3 (2.9, r, 0.5), 0.1), - de);\n  DMINQ (idESup);\n  q = p;\n  q.yz -= vec2 (-0.4, 0.5 + 0.1 * abs (q.x));\n  r = 0.05 * (1. - 0.3 * q.z * q.z);\n  d = PrRoundBoxDf (q, vec3 (5., r, 1.7 - 0.1 * abs (q.x)), 0.02);\n  DMINQ (idWngM);\n  q.x = abs (q.x) - 5.;\n  s = q.z * q.z;\n  q.y -= -0.15 + 0.03 * s;\n  d = PrCapsDf (q, 0.3 - 0.05 * s, 1.5);\n  DMINQ (idFlt);\n  q = p;\n  q.yz -= vec2 (1.5, -5.);\n  q.z -= -0.1 * q.y;\n  r = 0.1 * (1. - 1.4 * q.z * q.z - 0.3 * q.y);\n  d = PrRoundBoxDf (q, vec3 (r, 1., 0.8 - 0.1 * q.y), 0.02);\n  DMINQ (idTail);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.5, 1.7, -4.6);\n  r = 0.22 * (1. - 0.2 * q.z * q.z);\n  de = PrCapsDf (q, r, 0.7);\n  d = SmoothMax (abs (de) - 0.02, abs (q.z) - 0.8, 0.02);\n  d = min (d, PrCapsDf (q + vec3 (0., 0., -0.05), 0.125, 0.65));\n  DMINQ (idEng);  \n  q = p;\n  q.yz -= vec2 (1.7, -4.8);\n  d = max (PrRoundBoxDf (q, vec3 (0.3, 0.02, 0.5), 0.02), - de);\n  DMINQ (idESup);  \n  q = p;\n  q.yz -= vec2 (2.5, -5.1) + vec2 (0.1, -0.2) * abs (q.x);\n  r = 0.05;\n  s = q.z - 0.1;\n  r *= 1. - 1.5 * s * s - 0.1 * abs (q.x);\n  d = PrRoundBoxDf (q, vec3 (4., r, 0.7 - 0.05 * abs (q.x)), 0.02);\n  DMINQ (idWngT);\n  q = p;\n  q.yz -= vec2 (2.5, -4.9);\n  s = q.z - 0.4;\n  r = 0.2 * (1. - 0.4 * s * s);\n  d = PrCapsDf (q, r, 1.);\n  DMINQ (idTCap);\n  q = p;\n  q.z -= 2.5;\n  r = 0.7;\n  if (q.z > 0.) {\n    s = q.z * q.z;\n    r *= 1. - 0.1 * s;\n  } else {\n    s = 0.;\n    r *= 1. - 0.01 * q.z * q.z;\n  }\n  q.y -= -1. + 0.025 * s;\n  r *= 1. + 0.2 * q.y;\n  d = PrRoundBoxDf (q, vec3 (r, 0.5 - 0.05 * s, 5. + 0.2 * q.y), 0.05);\n  q.x = abs (q.x);\n  q.xy -= vec2 (0.6, -0.5);\n  d = SmoothMax (d, 0.5 - length (q.xy), 0.05);\n  DMINQ (idHul);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.5, -0.3, 6.);\n  d = PrCapsDf (q, 0.03, 0.5);\n  DMINQ (idSil);\n  return 0.7 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat WaveHt (vec2 p, float d)\n{\n  mat2 qRot;\n  vec4 t4, v4;\n  vec2 q, t, tw, cs;\n  float wFreq, wAmp, h;\n  qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  wFreq = 0.6;\n  wAmp = 0.1;\n  tw = 0.5 * tCur * vec2 (1., -1.);\n  q = p;\n  q += flyVel.xz * tCur;\n  h = 0.;\n  for (int j = VAR_ZERO; j < 5; j ++) {\n    q *= qRot;\n    t4 = abs (sin (wFreq * (q.xyxy + tw.xxyy) + 2. * Noisev2v4 (t4).xxyy - 1.));\n    v4 = (1. - t4) * (t4 + sqrt (1. - t4 * t4));\n    t = 1. - sqrt (v4.xz * v4.yw);\n    t *= t;\n    h += wAmp * dot (t, t);\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  h += 0.3 * wkFac * (1. - smoothstep (0.3, 1.5, length (vec2 (abs (p.x) - 1.3, 0.1 * p.y + 1.1))));\n  return h * (1. - smoothstep (0.5, 1., d / dstFar));\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p.xz, s);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.5, h) + 0.01 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > WaveHt (p.xz, s)) sLo = s;\n      else sHi = s;\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e;\n  e = vec2 (max (0.1, 1e-4 * d * d), 0.);\n  return normalize (vec3 (WaveHt (p.xz, d) - vec2 (WaveHt (p.xz + e.xy, d),\n     WaveHt (p.xz + e.yx, d)), e.x)).xzy;\n}\n\nvec4 FlyerCol ()\n{\n  vec4 col4, col4S;\n  vec2 w;\n  float s;\n  w = vec2 (0.);\n  if (idObj == idCov || idObj == idWngT || idObj == idWngM || idObj == idESup) w = qHit.xz;\n  else if (idObj == idFus || idObj == idCkp || idObj == idEng || idObj == idTCap || idObj == idFlt)\n     w = vec2 (4. * atan (qHit.y, - qHit.x) / (2. * pi), qHit.z);\n  else if (idObj == idTail) w = qHit.yz;\n  col4 = vec4 (0.9, 0.93, 0.9, 0.2);\n  if (w.x != 0.) col4 *= 0.9 + 0.1 * smoothstep (0., 0.05, abs (Fbm2 (11. + 2. * w) - 0.4) - 0.05);\n  col4S = vec4 (0., 0., 1., 0.2);\n  if (idObj == idFus) {\n    if (length (vec2 (0.9 * (qHit.y - 0.45), abs (abs (qHit.z + 0.6) - 2.4) - 0.25)) < 0.12) {\n      col4 = vec4 (0., 0., 0., -2.);\n    } else {\n      col4 = mix (col4S, col4, smoothstep (0., 0.03, abs (qHit.y + 0.1) - 0.02));\n      col4 *= 0.7 + 0.3 * smoothstep (0., 0.025, abs (PrRoundBox2Df (vec2 (qHit.y - 0.35,\n         abs (qHit.z - 0.1) - 2.4), vec2 (0.25, 0.1), 0.05)));\n      col4 *= 0.3 + 0.7 * step (0.2, PrBox2Df (qHit.xz - vec2 (0., -0.5), vec2 (0.35, 1.2)));\n    }\n  } else if (idObj == idCkp) {\n    if (qHit.z > 0.73 && qHit.y < 0.43 && min (min (abs (abs (qHit.y - 0.34) - 0.08),\n       abs (abs (qHit.z - 0.9) - 0.15)), abs (abs (qHit.x) - 0.16)) > 0.014) col4 = vec4 (0., 0., 0., -2.);\n  } else if (idObj == idCov) {\n    col4 *= 0.7 + 0.3 * smoothstep (0.01, 0.03, abs (PrBox2Df (vec2 (abs (qHit.x) - 0.175, qHit.z),\n       vec2 (0.175, 1.))));\n  } else if (idObj == idEng) {\n    col4 = mix (vec4 (1., 0., 0., 0.2), col4, smoothstep (0., 0.02, abs (qHit.z - 0.8) - 0.05));\n    if (abs (qHit.z) < 0.78 && length (qHit.xy) < 0.17) {\n      if (qHit.z < 0.) col4 = vec4 (1., 1., 0., 0.2);\n      if (abs (qHit.z - 0.05) < 0.78) col4 *= 0.7 + 0.3 * sin (8. * atan (qHit.y, - qHit.x) +\n         2. * pi * mod (16. * tCur, 1.));\n    }\n  } else if (idObj == idWngT) {\n    col4 = mix (col4S, col4, smoothstep (0., 0.03, abs (abs (abs (qHit.x) - 3.7) - 0.1) - 0.02));\n    col4 *= 0.7 + 0.3 * smoothstep (0.01, 0.03, abs (PrBox2Df (vec2 (abs (abs (qHit.x) - 2.2) - 0.6,\n       qHit.z + 0.6), vec2 (0.55, 0.3))));\n  } else if (idObj == idWngM) {\n    col4 = mix (col4S, col4, smoothstep (0., 0.03, abs (abs (abs (qHit.x) - 4.5) - 0.1) - 0.02));\n    if (qHit.y > 0.) col4 *= 0.7 + 0.3 * smoothstep (0.01, 0.03, abs (PrBox2Df (vec2 (abs (qHit.x) - 3.,\n       qHit.z + 0.09 * abs (qHit.x) + 0.2), vec2 (1., 0.2))));\n  } else if (idObj == idTail) {\n    col4 = mix (col4S, col4, smoothstep (0., 0.03, abs (qHit.y - 0.6) - 0.02));\n    col4 *= 0.7 + 0.3 * smoothstep (0.01, 0.03, abs (PrBox2Df (vec2 (qHit.y + 0.1, qHit.z + 0.75),\n       vec2 (0.5, 0.3))));\n  } else if (idObj == idTCap) {\n    if (qHit.z > 0.9) col4 = col4S;\n  } else if (idObj == idHul) {\n    col4 = mix (vec4 (0., 0.5, 0., 0.2) * (0.8 + 0.2 * Noisefv2 (16. * qHit.yz)),\n       col4 * (0.93 + 0.07 * sin (128. * sin (qHit.y))), smoothstep (0., 0.01, qHit.y - 0.5));\n  } else if (idObj == idFlt) {\n    col4 = mix (vec4 (0., 0.5, 0., 0.2) * (0.8 + 0.2 * Noisefv2 (16. * qHit.yz)),\n       col4, smoothstep (0., 0.01, qHit.y + 0.05));\n  } else if (idObj == idMis) {\n    col4 = vec4 (0.9, 0.5, 0.2, 0.2) * (0.5 + 0.5 * smoothstep (0.01, 0.03,\n       abs (abs (abs (qHit.z) - 0.6) - 0.03)));\n  }\n  return col4;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += min (2. * h, 0.3);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  rd.y = abs (rd.y);\n  return mix (vec3 (0.2, 0.4, 1.) + 0.2 * pow (1. - max (rd.y, 0.), 5.),\n     vec3 (0.85), clamp (3. * (1.5 * Fbm2 (0.02 * (rd.xz * (100. - ro.y) / rd.y + ro.xz +\n     0.5 * tCur)) - 0.1) * rd.y + 0.1, 0., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, vnw, row, rdw, watCol;\n  float dstObj, dstWat, f, sh, hw;\n  bool waterRefl;\n  flyVel = vec3 (0., 0., 5.);\n  flyRol = 0.005 * pi * sin (0.1 * pi * tCur);\n  wkFac = 1. - smoothstep (0.5, 1.1, flyPos.y - 1.1);\n  tDor = mod (0.1 * tCur, 1.);\n  dstObj = ObjRay (ro, rd);\n  dstWat = WaveRay (ro, rd);\n  waterRefl = (dstWat < min (dstFar, dstObj));\n  if (waterRefl) {\n    ro += dstWat * rd;\n    vnw = WaveNf (ro, dstWat);\n    row = ro;\n    rdw = rd;\n    rd = reflect (rd, vnw);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < min (dstWat, dstFar)) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = FlyerCol ();\n    if (col4.a >= 0.) {\n      sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n      col = col4.rgb * (0.2 + 0.2 * max (vn.y, 0.) + 0.7 * sh * max (dot (vn, sunDir), 0.)) +\n         col4.a * step (0.95, sh) * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    } else col = mix (vec3 (0.2, 0.3, 0.2), SkyCol (ro, reflect (rd, vn)), 0.5);\n  } else {\n    col = SkyCol (ro, rd);\n  }\n  if (waterRefl) {\n    f = (1. - smoothstep (0.1, 1.5, length (vec2 (0.3 * row.x, 0.06 * row.z + 1.)))) * wkFac;\n    vnw = VaryNf (row + flyVel * tCur, vnw, 1. + 5. * f);\n    watCol = mix (vec3 (0.1, 0.35, 0.4), vec3 (0.1, 0.35, 0.25),\n       smoothstep (0.4, 0.6, Fbm2 (0.25 * (row.xz + flyVel.xz * tCur)))) *\n       (0.3 + 0.7 * (max (vnw.y, 0.) + 0.1 * pow (max (0., dot (sunDir, reflect (rdw, vnw))), 32.)));\n    col = mix (watCol, 0.8 * col, 0.2 + 0.8 * pow (1. - abs (dot (rdw, vnw)), 4.));\n    col = mix (col, vec3 (1.) * (0.7 + 0.3 * Fbm2 (64. * (row.xz + flyVel.xz * tCur))), f);\n    col = mix (col, SkyCol (row, rdw), smoothstep (0.6, 0.95, dstWat / dstFar));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.15 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.4 * pi * mPtr.y;\n  } else {\n    az += 0.025 * pi * tCur;\n    el -= 0.05 * pi * sin (0.04 * pi * tCur);\n  }\n  el = clamp (el, 0.07 * pi, 0.3 * pi);\n  flyPos = vec3 (0., 1.9 - 0.8 * cos (0.05 * pi * tCur), 0.);\n  ro = 22. * sin (el + vec2 (0.5 * pi, 0.)).xyx * vec3 (sin (az + vec2 (0.5 * pi, 0.)), 1.).xzy;\n  vuMat = DirVuMat (normalize (flyPos - ro));\n  zmFac = 4.;\n  dstFar = 200.;\n  sunDir = normalize (vec3 (0., 1., -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.4 * pi * sin (0.02 * pi * tCur));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nmat3 DirVuMat (vec3 vd)\n{\n  float s;\n  s = sqrt (max (1. - vd.y * vd.y, 1e-6));\n  return mat3 (vec3 (vd.z, 0., - vd.x) / s, vec3 (- vd.y * vd.x, 1. - vd.y * vd.y,\n     - vd.y * vd.z) / s, vd);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + vec4 (0., 1., 57., 58.)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nvec2 Noisev2v4 (vec4 p)\n{\n  vec4 ip, fp, t1, t2;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t1 = Hashv4f (dot (ip.xy, vec2 (1., 57.)));\n  t2 = Hashv4f (dot (ip.zw, vec2 (1., 57.)));\n  return vec2 (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n               mix (mix (t2.x, t2.y, fp.z), mix (t2.z, t2.w, fp.z), fp.w));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}