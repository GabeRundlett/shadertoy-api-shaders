{
    "Shader": {
        "info": {
            "date": "1619448847",
            "description": "I have no idea how this works",
            "flags": 0,
            "hasliked": 0,
            "id": "7dXSWl",
            "likes": 2,
            "name": "La drogue",
            "published": 3,
            "tags": [
                "idk"
            ],
            "usePreview": 0,
            "username": "rubix",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "// rubix 2021-04-27\n// based on Flopine's https://www.shadertoy.com/view/wlXBD4\n\n#define PI acos(-1.)\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nvec3 pal(float t, vec3 c) {return vec3(0.5)+vec3(0.5)*cos(2.*PI*(c*t+vec3(0.,0.34,0.66)));}\n\nvoid moda(inout vec2 p, float rep)\n{\n    float per = (2.*PI)/rep;\n    float a = mod(atan(p.y,p.x),per)-per*0.5;\n    p = vec2(cos(a),sin(a)) * length(p);\n}\n\nfloat sc(vec3 p, float d)\n{\n    p = abs(p);\n    p = max(p, p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}\n\nfloat qsdfg(vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    moda(p.yz,3.);\n    \n    if (sin(iTime*0.15)>0.)\n        moda(p.yz,3.);\n    \n    float per = 10.;\n    float size = 3.;\n    p -= per * clamp(round(p/per),-size,size);\n\n    float it = (iTime-5.5)*0.3;\n    float t = mix(1.67, 2.68,\n        0.5+(3.*sin(it-PI)+sin(3.*it))/8.\n    );\n    \n    return max(-0.05, t - sc(p, 2.9));\n}\n\nvec3 getnorm(vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(qsdfg(p) - vec3(\n        qsdfg(p-eps.xyy),\n        qsdfg(p-eps.yxy),\n        qsdfg(p-eps.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 ro = vec3(uv*15.,-50.),\n        rd = vec3(0.,0.,1.),\n        p = ro,\n        li = normalize(vec3(1.,2.,-1.)),\n        col = vec3(0.,0.,0.1);\n\n    bool hit = false; float d = 0.;\n    for (float i=0.; i<64.; i++)\n    {\n        d = qsdfg(p);\n        if (d<0.1)\n            break;\n        d = max(abs(d)-0.1,0.5);    ///////////\n        p += d*rd;\n    }\n    vec3 n = getnorm(p);        \n    float light = max(dot(n,li), 0.);\n    col = mix(vec3(0.,0.0,0.0),pal(length(p),vec3(.05)),light);\n    fragColor = vec4(sqrt(abs(col)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}