{
    "Shader": {
        "info": {
            "date": "1701026179",
            "description": "New comic shader. (work in progress)",
            "flags": 2,
            "hasliked": 0,
            "id": "ctdBRN",
            "likes": 0,
            "name": "New Comic",
            "published": 3,
            "tags": [
                "webcam",
                "comic"
            ],
            "usePreview": 1,
            "username": "DrieStone",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "// Parameters\nfloat edgeThreshold = 0.4; // Adjust for edge sensitivity\nfloat brightness = 0.2;    // Adjust for brightness\nfloat contrast = 2.5;\n\n// Helper function to convert RGB to HSV\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// Helper function to convert HSV to RGB\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Function to increase saturation\nvec3 boostSaturation(vec3 color, float amount)\n{\n    vec3 hsv = rgb2hsv(color);\n    hsv.y *= amount; // Increase saturation\n    return hsv2rgb(hsv);\n}\n\n// Modified Gaussian Blur Function for low saturation areas\nvec3 selectiveGaussianBlur(vec2 uv, vec3 color, float saturationThreshold, float blurAmount)\n{\n    vec3 blurredColor = vec3(0.0);\n    vec2 blurSize = vec2(blurAmount) / iResolution.xy; // Adjust blur size as needed\n\n    for (int x = -1; x <= 1; x++)\n    {\n        for (int y = -1; y <= 1; y++)\n        {\n            vec2 offset = vec2(float(x), float(y)) * blurSize;\n            vec3 neighborColor = texture(iChannel0, uv + offset).rgb;\n\n            // Check if the color is of low saturation\n            if (rgb2hsv(neighborColor).y < saturationThreshold)\n            {\n                blurredColor += neighborColor;\n            }\n            else\n            {\n                blurredColor += color; // Keep original color if saturation is high\n            }\n        }\n    }\n\n    return blurredColor / 9.0; // Average of 3x3 kernel\n}\n\n// Function to adjust brightness\nvec3 adjustBrightness(vec3 color)\n{\n    return color + brightness;\n}\n\n// Function to adjust contrast\nvec3 adjustContrast(vec3 color)\n{\n    return (color - 0.5) * contrast + 0.5;\n}\n\n// Edge Detection Function with Adjusted Scale Factor\nfloat edgeDetection(vec2 uv)\n{\n    vec3 edgeColor = vec3(0.0);\n    vec2 texelSize = 1.0 / iResolution.xy;\n\n    // Adjust this scale factor to control edge detection sensitivity\n    float scaleFactor = 1.5; // This value may need tweaking\n\n    for (int x = -1; x <= 1; x++)\n    {\n        for (int y = -1; y <= 1; y++)\n        {\n            vec2 offset = scaleFactor * vec2(x, y) * texelSize;\n            vec3 neighborColor = texture(iChannel0, uv + offset).rgb;\n            edgeColor += abs(neighborColor - texture(iChannel0, uv).rgb);\n        }\n    }\n\n    float edgeStrength = length(edgeColor);\n    return edgeStrength > edgeThreshold ? 1.0 : 0.0;\n}\n\n\n// Color Quantization Function\nvec3 quantizeColor(vec3 color)\n{\n    int numColors = 3; // Adjust for color quantization level\n    vec3 quantized = floor(color * float(numColors)) / float(numColors);\n    return quantized;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 webcamColor = texture(iChannel0, uv);\n\n    // Boost saturation\n    vec3 adjustedColor = adjustBrightness(webcamColor.rgb);\n    adjustedColor = adjustContrast(adjustedColor);\n    adjustedColor = boostSaturation(adjustedColor, 1.1); // Adjust the factor as needed\n\n    // Selective blur on low saturation areas\n    float saturationThreshold = 0.2; // Adjust as needed\n    float blurAmount = 4.0; // Adjust blur amount\n    vec3 colorAfterBlur = selectiveGaussianBlur(uv, adjustedColor, saturationThreshold, blurAmount);\n\n    // Apply edge detection on the color after blur\n    float edgeStrength = edgeDetection(uv);\n\n    // Color quantization on color after blur and vibrancy adjustments\n    vec3 quantizedColor = quantizeColor(colorAfterBlur);\n\n    // Mix based on edge presence\n    vec3 finalColor = mix(quantizedColor, vec3(0.0), 0.5 * edgeStrength);\n\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}