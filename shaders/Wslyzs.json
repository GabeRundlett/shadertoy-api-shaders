{
    "Shader": {
        "info": {
            "date": "1587174500",
            "description": "17 dither patterns to represent exit times in a Mandelbrot loop.\n[url=https://www.shadertoy.com/playlist/s3BcD1]FRACTAL PLAYLIST[/url]\n[url=https://www.shadertoy.com/playlist/fX2cWm]PIXEL PLAYLIST[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "Wslyzs",
            "likes": 8,
            "name": "ditherbrot",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "mandelbrot",
                "pixel",
                "dither",
                "bit",
                "lofi",
                "ordered"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 242
        },
        "renderpass": [
            {
                "code": "/// by Dom Mandy in 2020\n\n\n/*\nmandelbrot generating function\n*/\nvec2 quad(vec2 z, vec2 c) {\n    vec2 zNew;\n    zNew.x = z.x * z.x - z.y * z.y;\n    zNew.y = 2. * z.x * z.y;\n    \n    zNew += c;\n    \n    return zNew;\n}\n\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    // low res\n    const float derez = .5;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 r = derez * iResolution.xy;\n    fragCoord = .5 + floor(derez * fragCoord);\n    // composition\n    const float scale = 4.125;\n    // mouse controls as requested by FabriceNeyret2\n    vec2 zoom = step(iMouse.zw, vec2(0.01)) + step(0.01, iMouse.xy) * mix(1., .001, smoothstep(0., .25 * length(iResolution.xy), length(iMouse.zw - iMouse.xy)));\n    uv -= vec2(.5);\n    uv *= zoom;\n    // scale appropriatly\n    uv *= scale;\n    uv.x *= r.x / r.y;\n    // \n    uv += step(0.01, iMouse.xy) * scale * vec2(r.x / r.y, 1.) * mix(iMouse.zw / iResolution.xy - vec2(.5), vec2(0.), clamp(zoom, 0., 1.));\n    // mandelbrot\n    vec2 z = vec2(0.);\n    vec2 c = uv;\n    bool isValid = false;\n    float exit = 0.;\n    float count= 17.;\n    count += round(mix(40., 0., zoom.x));\n    for(int i = 0; float(i) < count; i++)\n    {\n        isValid = isValid || dot(z, z) > 4.;\n        exit = float(isValid) * exit + float(!isValid) * float(i);\n        z = quad(z, c);\n    }\n    exit /= float(count-1.);\n    // 4x4 bayer matrix yielding 17 tones to match the 17 potential exit times\n    float threshold = (texture(iChannel0, mod(fragCoord, 4.) / 8.).r * 63. - 3.) / (4. * 15.);\n\tvec3 color = vec3(float(threshold > exit));\n\n    fragColor = vec4(color, 1.);\n}\n\n\n/*\nFURTHER READING\n\nfractals\n\nhttps://en.wikipedia.org/wiki/Mandelbrot_set\nhttps://en.wikipedia.org/wiki/Complex_number#Multiplication_and_square\n\nrendering\n\nhttps://en.wikipedia.org/wiki/Ordered_dithering\n*/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}