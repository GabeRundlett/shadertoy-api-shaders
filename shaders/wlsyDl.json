{
    "Shader": {
        "info": {
            "date": "1593477352",
            "description": "A generative recreation of the work Untitled from Permutations, 1968, Victor Vasarely.\nMotion was inspired by the work of Jadarikin.\nMore infos on the top of the shader",
            "flags": 0,
            "hasliked": 0,
            "id": "wlsyDl",
            "likes": 2,
            "name": "Generative Vasarely, Permutation",
            "published": 3,
            "tags": [
                "vasarely"
            ],
            "usePreview": 0,
            "username": "ciphered",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "//\n// A generative recreation and rework of the original piece Untitled from Permutations, 1968, Vasarely\n// From its series Permutations\n// ref: \n// https://storage.gra.cloud.ovh.net/v1/AUTH_10e1a9235c63431c95e5b84a247830db/prod/artwork/477670_1_m.jpg\n//\n// This is also inspired by the great work of Jadarikin \n// https://twitter.com/jagarikin\n//\n// In some his work, Jadarikin creates the illusion of a motion by shifting a gradient \n// over time. The brain gets tricked in thinking there is a motion due to how the colors move.\n// This piece is a tribute to both Vasarely and Jadarikin, arranged in my own way. I decided not\n// to keep the circles, trademark of his \"alphabet plastique\", because I couldn't make it work \n// correctly with the illusion of a motion on the checkboard\n//\n// My instagram for some related work:\n// https://instagram.com/ciphrd\n//\n\n#define DIVS 19.0\n#define PI 3.141592653\n#define CIRCLES 0.0\n#define rot(a)   mat2( cos(a), -sin(a), sin(a), cos(a) )\n\n\n\n// @author sam hocevar\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)  / iResolution.y;\n\n    float c = 0.;\n    \n    // timer [0; 1]\n    float t = iTime / 60.;\n    if (t > .5) {\n        uv*= rot((t-.5) * 10.);\n    }\n    t = min(1., t);\n    \n    \n    // the grid\n    vec2 dv = uv * DIVS + .5; // we add .5 for odd centering\n    vec2 gd = fract(dv) - .5;\n    vec2 id = floor(dv);\n    \n    // checkboard\n    float dm = mod(id.x + id.y, 2.);\n    \n    // hue\n    float hue = mix(1.0, 0.7, dm);\n    \n    // manhattan distance\n    float mand = sin(((abs(id.x) + abs(id.y)) / DIVS * 2. - iTime*(0.1+t*.4)) * 1.5) * .5;\n    \n    \n    vec3 color = hsv2rgb(vec3(hue, .8, mix(mand, 1. - mand, dm)));\n    \n    \n    // the border, source of all motion\n    float bd = smoothstep(0.35, 0.5, abs(gd.x));\n    bd = max(bd, smoothstep(0.35, 0.5, abs(gd.y)));\n    float a = atan(gd.y, gd.x)*2. + cos(iTime * .5) * (t*10.+3.) + (mod(id.x, 2.)*4.-2.) * cos(iTime);\n    a = mod(a, 4.*PI);\n    color = mix(color, color*pow((cos(a)*.5+.5), 2.), bd);\n    \n    \n    // adding circles\n    float cir = smoothstep(0.3, 0.20, length(gd));\n    color-= cir * CIRCLES;\n\n    \n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}