{
    "Shader": {
        "info": {
            "date": "1556625716",
            "description": "A fast partyprod born out of shader showdown scene.\nTook 4th place at PC 4k intro compo at Revision 2019\n\nmusic, direction by keen\n\npouet: https://www.pouet.net/prod.php?which=81016\n\nShader is mostly as is, except for a few weird Windows/ANGLE fixes.",
            "flags": 64,
            "hasliked": 0,
            "id": "Wts3W7",
            "likes": 36,
            "name": "past racer by jetlag",
            "published": 3,
            "tags": [
                "pathtracing",
                "4kintro",
                "revision2019"
            ],
            "usePreview": 1,
            "username": "w23",
            "viewed": 1101
        },
        "renderpass": [
            {
                "code": "precision highp float;\nfloat t;\n\nfloat sym(vec2 p, float fs) {\n    vec2 s = vec2(mod(fs,16.), 16.-floor(fs/16.));\n    vec2 tsz = vec2(iChannelResolution[0]), rsz = 1. / tsz;\n    p = (p + vec2(16.,0.) + s*64.)*rsz;\n    return smoothstep(.5, .49, texture(iChannel0, p).a);\n}\n\nbool text_balls = false;\nfloat text(vec2 p) {\n\tif (text_balls) {\n\t\tvec2 cid = floor(p), cc=(p-cid)*2.-1.;\n\t\treturn step(length(cc), .7);\n    } else {\n        p *= .1;\n        p += vec2(.1, .1);\n        p *= vec2(iChannelResolution[0]);\n        vec2 gsz = vec2(16.,64.);\n        vec2 ci = floor(p/gsz), cp = mod(p, gsz);\n#define SYM(a) if (ci.x == 0.) { return sym(cp*vec2(2.,1.), a); } ci.x -= 1.;\n        if (ci.y == 1.) {\n        \tSYM(122.); SYM(117.); SYM(132.); SYM(124.); SYM(113.); SYM(119.);\n        } else if (ci.y == 0.) {\n            SYM(128.); SYM(113.); SYM(131.); SYM(132.); ci.x -= 1.;\n            SYM(130.); SYM(113.); SYM(115.); SYM(117.); SYM(130.);\n        }\n        return 0.;\n    }\n}\n\nconst float PI=3.1415923;\nconst vec3 E=vec3(0.,.01,1.);\n\nfloat hash1(float f){return fract(sin(f)*46347.423874);}\nfloat hash2(vec2 v){return hash1(dot(v,vec2(79.53248,31.4328)));}\n\nfloat noise2(vec2 v) {\n\tvec2 V=floor(v);v-=V;\n\tv*=v*(3.-2.*v);\n\treturn mix(\n\t\tmix(hash2(V+E.xx), hash2(V+E.zx), v.x),\n\t\tmix(hash2(V+E.xz), hash2(V+E.zz), v.x), v.y);\n}\n\nmat3 RX(float a){float c=cos(a),s=sin(a);return mat3(1.,0.,0.,0.,-s,c,0.,c,s);}\nmat3 RY(float a){float c=cos(a),s=sin(a);return mat3(c,0.,s,0.,1.,0.,-s,0.,c);}\nmat3 RZ(float a){float c=cos(a),s=sin(a);return mat3(c,s,0.,-s,c,0.,0.,0.,1.);}\n\nvec3 O, D, P, N;\nvec2 UV;\nint M;\nfloat l;\n\nvoid aapl(float offset, vec3 axis, int mi) {\n\tfloat x = dot(O,axis), rx = dot(D,axis), s = sign(rx);\n\tfloat lp = (s * offset - x) / rx;\n\tif (lp < l) {\n\t\tl = lp;\n\t\tP = O + D * l;\n\t\tN = - s * axis;\n\t\tM = mi;\n\t\tUV = axis.x*P.yz + axis.y*P.xz + axis.z*P.xy;\n\t}\n}\n\nfloat ss(float f){return max(0.,min(1.,f));}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    t = mod(iTime, 120.) * 12.0;\n    vec2 R = iResolution.xy;\n\tvec2 uv=(fragCoord.xy/R)*2.-1.;uv.x*=R.x/R.y;\n    \n    //fragColor=vec4(hash2(uv));return;\n\n\tvec3 c=vec3(0.);\n\tfloat seed = t;\n\n\tfloat tpat = t/32.;\n\n\t////////////// TWEAK THESE\n\tfloat ls = .2, // lens size\n\t\t\t\tlf = 4. + 3.,// * sin(t*.1), // focus distance\n\t\t\t\tlS = 1.; // fov-ish\n\tvec3 sz = vec3(1.5,2.,6.);\n\tfloat or = 4.;\n\tmat3 mv = mat3(1,0,0,0,1,0,0,0,1);\n\t//mv = RY(2.*sin(t*.01))*RY(3.*sin(t*.039));\n\t//mv = RY(2.+sin(t*.05));\n\tfloat text_offset = -2. + 6. * hash1(floor(t/8.));\n\tfloat pscl = 4.;\n\tbool text_plane = false;\n\tbool pix1 = false, pix2 = false;\n\tbool pixmv = false;\n\tbool proj2 = false;\n\tbool proj1 = false;\n\tvec3 bgcolor = .5 * vec3(.3,.5,.8);\n\tfloat zmove = 0.;\n\tvec2 pixmvs = vec2(0.);\n\tfloat pixmvl = 1.;\n\tbool rpix = true;\n\tvec3 rpixc = vec3(0.);\n\tvec3 pixmvc = vec3(1.);\n\tvec3 pix2c = vec3(1.);\n\tvec3 pc = vec3(0.,0.,-6.);\n\n\tsz=vec3(8.);\n\tbgcolor = vec3(0.);\n\tls = 1.;\n\tlf = 4.;\n\trpix = true;\n\trpixc = vec3(tpat/6.);\n\tmv = RY(tpat)*RX(tpat*.3);\n\n\tif (tpat > 6.) {\n\t\tpixmv = true;\n\t\tpixmvs=vec2(1., 0.);\n\t}\n\n\tif (tpat > 9.) {\n\t\tfloat tt=ss(tpat-9.);\n\t\tsz = mix(sz, vec3(1.5,2.,6.), tt);\n\t\tor = mix(or,1.,tt);\n\t\tls = mix(ls,.1,tt);\n\t}\n\n\tif (tpat > 13.6) {\n\t\tfloat tt = smoothstep(13.6, 14., tpat);\n\t\tlS = mix(10., 1., tt);\n\t\tls = mix(4., .1, tt);\n\t\tlf = mix(.1, 7., tt);\n\t\tmv = RZ(1.-tt);\n\t\tzmove = 4.;\n\t}\n\n\tif (tpat > 14.) {\n\t\tmv = RZ(.1*sin(tpat-14.));\n\t}\n\n\tif (tpat > 17.) {\n\t\ttext_plane = true;\n\t\ttext_offset = -6. + 2.*floor(tpat-17.);\n\t}\n\n\tif (tpat > 19.) {\n\t\trpix = false;\n\t}\n\n\tif (tpat > 20.) {\n\t\tpixmv = false;\n\t}\n\n\tif (tpat > 21.8) {\n\t\tfloat tt=smoothstep(21.8, 22., tpat);\n\t\tsz = mix(sz, vec3(4.,1.,-1.), tt);\n\t\tpixmv = true;\n\t}\n\n\tif (tpat > 22.) {\n\t\tmv = RZ(tpat-22.);\n\t\ttext_plane = false;\n\t\tbgcolor = .01 * vec3(.3,.5,.8);\n\t\tzmove = 47.;\n\t}\n\n\tif (tpat > 23.) {\n\t\tfloat tt = ss(tpat-23.);\n\t\tpixmvl = mix(pixmvl, 5., tt);\n\t\tpixmvs = mix(pixmvs, vec2(1., 10.), tt);\n\t\tpixmvc = .5 * vec3(.2, .5, .9);\n\t\tlf = 10.;\n\t\tls = .1;\n\t}\n\n\tif (tpat > 24.) {\n\t\ttext_plane = true;\n\t\ttext_balls = true;\n\t\ttext_offset = -8. + 2.*mod(floor(tpat-23.), 4.);\n\t}\n\n\tif (tpat > 26.) {\n\t\trpix = true;\n\t\trpixc = vec3(1.);\n\t\ttext_plane = false;\n\t\tfloat tt = ss(tpat-26.);\n\t\tsz = mix(sz, vec3(2.,2.,-1.), tt);\n\t\tor = mix(or, 2., tt);\n\t\tmv *= RY(tt*(tpat-26.));\n\t}\n\n\tif (tpat > 28.) {\n\t\tproj1 = true;\n\t\tlf = 4.;\n\t\tpc = vec3(vec2(cos(tpat*.3), sin(tpat*.7)) * 1.5, 10.*sin(tpat*.9));\n\t}\n\n\tif (tpat > 30.) {\n\t\tls = .12, // lens size\n\t\t\t\tlf = 4. + 3.,// * sin(t*.1), // focus distance\n\t\t\t\tlS = 7.; // fov-ish\n\t\tpixmv = false;\n\t}\n\n\tif (tpat > 34.) {\n\t\tproj1 = false;\n\t\tproj2 = true;\n\t\tlS = .1;\n\t\tbgcolor = .5 * vec3(.3,.5,.8);\n\t}\n\n\tif (tpat > 38.) {\n\t\t//bgcolor = vec3(1.,.0,.0);\n\t\tmv = RX(-3.);\n\t}\n\n\t// PATHTRACER STARTS\n\tlS *= lf;\n#define NS 32.\n\tfor (float s=0.;s<NS;++s) {\n\t\tfloat a = hash1(seed+=uv.x)*2.*PI, r = s/NS;\n\t\tO = vec3(vec2(cos(a),sin(a))*r*ls, or);\n\t\tvec3 at = vec3(uv*lS, O.z-lf);\n\t\tD = normalize(at - O) * mv; O *= mv;\n\t\tvec3 kc = vec3(1.);\n\t\tfor (int i = 0; i < 4; ++i) {\n\t\t\tl = 1e6;\n\t\t\taapl(sz.x, vec3(1.,0.,0.), 1);\n\t\t\taapl(sz.y, vec3(0.,1.,0.), 2);\n\t\t\tif (sz.z>0.) aapl(sz.z, vec3(0.,0.,1.), 3);\n\n\t\t\tif (text_plane) {\n\t\t\t\tfloat dist = text_offset - O.z;\n\t\t\t\tfloat lt = dist / D.z;\n\t\t\t\tvec3 tp = O+D*lt;\n\t\t\t\tif (lt > 0. && lt < l) {\n\t\t\t\t\tif (text(tp.xy) > 0.) {\n\t\t\t\t\t\tl = lt;\n\t\t\t\t\t\tP = tp;\n\t\t\t\t\t\tN = vec3(0., 0., sign(dist));\n\t\t\t\t\t\tM = 4;\n\t\t\t\t\t\tUV = P.xy;\n\t\t\t\t\t} /* alpha glass fx */ //else { kc *= vec3(.5, .5, .7); }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvec3 me = vec3(0.), ma = vec3(.7);\n\t\t\tfloat mr = .5;\n\n\t\t\tif (M == 4) {\n\t\t\t\tma = vec3(.9);\n\t\t\t\tme = 4. * vec3(step(1.3,mod(t*.5+dot(3.*normalize(vec2(1.,1.)), UV), 2.)));\n\t\t\t\tmr = .9;\n\t\t\t} else {\n                // Windows/ANGLE fix\n\t\t\t\t//UV.y -= tpat*zmove;\n\t\t\t\t//UV *= pscl;\n                vec2 fix_uv_wtf = (UV - vec2(0., tpat*zmove)) * pscl;\n\t\t\t\t\n                vec2 cid = floor(fix_uv_wtf);\n\t\t\t\tvec2 cpc = fract(fix_uv_wtf)*2. - 1.;\n\n                if (rpix) {\n\t\t\t\t\tme += rpixc * step(.9,hash2(cid));\n\t\t\t\t}\n\n\t\t\t\tif (pix1) {\n\t\t\t\t\tfloat e2step = 2.;\n\t\t\t\t\tfloat e2a = t * .2;\n\t\t\t\t\tvec2 e2dir=vec2(cos(e2a),sin(e2a));\n\t\t\t\t\tfloat d = dot(UV, e2dir);\n\t\t\t\t\tme += vec3(2,0,0.5) * step(abs(d),e2step);\n\t\t\t\t}\n\n\t\t\t\tif (pix2) {\n\t\t\t\t\tme += max(me, pix2c*mod(floor(-.2*t+(dot(cid/12.,vec2(3.)))), 2.));\n\t\t\t\t}\n\n\t\t\t\tif (pixmv) {\n\t\t\t\t\tfloat pos = floor(t * pixmvs.x + pixmvs.y * hash1(cid.x));\n\t\t\t\t\tfloat len = 16.;\n\t\t\t\t\tfloat p = mod(cid.y + pos, len);\n\t\t\t\t\tme += pixmvc * step(len-pixmvl,p);\n\t\t\t\t}\n\n\t\t\t\t{\n\t\t\t\t\tvec3 ruv = normalize(floor(P*pscl) - pc);\n\t\t\t\t\truv *= RY(t*.1);\n\n\t\t\t\t\tvec3 dir = normalize(vec3(1.));\n\n\t\t\t\t\tme += bgcolor;\n\n\t\t\t\t\tif (proj1) {\n\t\t\t\t\t\t me += 2.*vec3(.9,.7,.2) * step(1.5, mod(t *.1+ 6.*dot(ruv, dir), 2.));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (proj2) {\n\t\t\t\t\t\tme += 7. * vec3(.9,.7,.2) * pow(max(0.,dot(dir,ruv)), 100.);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tme *= vec3(\n\t\t\t\t\tstep(length(cpc),.8),\n\t\t\t\t\tstep(length(cpc+vec2(.1,0.)),.8),\n\t\t\t\t\tstep(length(cpc+vec2(.0,.1)),.8)\n\t\t\t\t);\n\t\t\t\tmr = .001 + hash2(cid)*.3;\n\t\t\t\tma *= step(abs(cpc.x),.9)*step(abs(cpc.y),.9);\n\t\t\t}\n\n\t\t\t//kc *= 1. - l/40.;\n\t\t\tc += kc * me;\n\t\t\tkc *= ma;\n\n\t\t\tif (all(lessThan(kc,vec3(.001)))) break;\n\n\t\t\tO = P;\n\t\t\tD = normalize(mix(\n\t\t\t\treflect(D, N),\n\t\t\t\tvec3(hash1(seed+=P.z),hash1(seed+=D.x),hash1(seed+=P.y))*2.-1., mr));\n\t\t\tD *= sign(dot(D, N));\n\t\t}\n\t}\n\n\tc /= NS;\n\n\tfragColor=vec4(sqrt(c), 0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 18545,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/keensky/past-racer"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}