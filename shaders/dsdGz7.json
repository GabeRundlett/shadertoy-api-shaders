{
    "Shader": {
        "info": {
            "date": "1677107321",
            "description": "Saw Wave - Audio/Visual\n\nOther things I've done:\nhttps://www.shadertoy.com/view/sdSyWG\nhttps://www.shadertoy.com/view/NdSyDy",
            "flags": 8,
            "hasliked": 0,
            "id": "dsdGz7",
            "likes": 1,
            "name": "Saw Wave - Sound",
            "published": 3,
            "tags": [
                "sawwave"
            ],
            "usePreview": 0,
            "username": "gfy_9001",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    FREQUENCY = 1. / iTime;\n    \n    float s0     = SawMod(FREQUENCY, 1.0, iTime);    \n    vec3  modCol = s0 * vec3(0,2,4);    \n    vec2  uv     = fragCoord / (iResolution.xy * 0.1);\n    vec3  col    = cos(s0+uv.xyx + modCol) * iTime;\n    \n    fragColor = vec4(col * 0.1,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Toggle me between [0, 1]\n#define USE_LFO 0\n\nfloat Amp(float a)\n{\n    return a * 0.1;\n}\n\nfloat SinWave(float hz, float a, float t)\n{\n    return Amp(a) * sin(T_PI * hz * t);\n}\n\nfloat SawWave(float p, float a, float t)\n{\n    float period_t = t/p;\n    return Amp(a) * (2.0 * (period_t - floor(0.5 + period_t)));\n}\n\nfloat AmpEnvelope(float m, float t, float b)\n{\n    return m * t + b;\n}\n\n// question: anyone know why audio cuts out after a while? (around 170 seconds)\n// answer here in the comments -  https://www.shadertoy.com/view/3ssyWB\n\nvec2 mainSound(in int samp, float time)\n{\n    // modulates the pitch\n#if USE_LFO\n    // lfo = low frequency oscillator\n    float lfo_freq = 1./ 1.;\n    // sin wave, used to modulate (range 0 <-> 1)\n    float sm = SinMod(time, lfo_freq, 0., 0.);\n    time *= sm;\n#endif\n\n    FREQUENCY = 1. / time;             // Period/Interval (1/HZ)\n                                       // Time is our frequency, seconds == hertz in this context\n\n    // amplitude envelope\n    float m = 1.;                      // higher, the longer it takes to reach peak\n    float b = -10.;                    // how quiet we start, lower is quieter\n    float e = AmpEnvelope(m, time, b); // linear rise\n    float a = min(1. + (e / -b), 1.0); // convert into 0 -> 1 and keep clamped at 1\n    \n    // rising pitch\n    float saw = SawWave(FREQUENCY, 0.5 * a, time);\n    \n    // detune modulation\n    float detune_freq = 1. / .2;\n    float detune_mod = SinMod(time, detune_freq, 0., 0.);\n    float detune_plus_minus_hz = 0.07;\n    float detune_amount = detune_mod * detune_plus_minus_hz;\n     \n    // chord\n    float c2_sin = SinWave(C2,                        0.10 * a, time);\n    float c2_saw = SawWave(1. / C2,                   0.18 * a, time);\n    float c4_saw = SawWave(1. / C3,                   0.20 * a, time);\n    float g4_saw = SawWave(1. / (G4 + detune_amount), 0.18 * a, time);\n    float f4_saw = SawWave(1. / (F4 + detune_amount), 0.18 * a, time);        \n    \n    // sum the waves!!!\n    return vec2(saw + c2_sin + c2_saw + c4_saw + g4_saw + f4_saw);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//#define PI 3.1415926536\n#define T_PI 6.28318530718\n\n// hz\n#define C2 65.406\n#define C3 130.812\n#define C4 261.625\n#define G4 391.995\n#define F4 349.2282\t\n\nfloat FREQUENCY = 4.;\n\nfloat SinMod(float x, float b, float c, float d)\n{\n    float p = T_PI / b;\n    return sin(p * (x + c)) + d;\n}\n\nfloat SawMod(float p, float a, float t)\n{\n    float period_t = t/p;\n    return 2.0 * (period_t - floor(0.5 + period_t));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}