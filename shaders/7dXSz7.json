{
    "Shader": {
        "info": {
            "date": "1618403220",
            "description": "Egg with analytic gradient\nEgg shape is from sylvain69780 shader here https://www.shadertoy.com/view/wsBBR3, but 3D and modified to be branchless so there are less length() calls\n\nEgg is similar to a BiCapsule, but rounded along the height axis\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7dXSz7",
            "likes": 1,
            "name": "Egg - gradient 3D",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "gradient",
                "normal",
                "analytic",
                "egg"
            ],
            "usePreview": 0,
            "username": "Dain",
            "viewed": 296
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//Rendering code from IQs torus gradient shader https://www.shadertoy.com/view/wtcfzM\n\n// sdgEgg returns the egg SDF and its gradient, by \n// computing it analytically. \n\n// Other SDF analytic gradients\n// Egg: https://www.shadertoy.com/view/7dXSz7\n// Oval: https://www.shadertoy.com/view/NdsSRM\n// Disk: https://www.shadertoy.com/view/NdlSR7\n// Box : https://www.shadertoy.com/view/NslSz7\n\n\n// Other SDF analytic gradients(By IQ):\n//\n// Torus:   https://www.shadertoy.com/view/wtcfzM\n// Capsule: https://www.shadertoy.com/view/WttfR7\n\n//Set to 1 to show the finite difference gradient for comparison\n#define SHOW_NUMERIC_GRADIENT 0\n\n//A Z up egg, similiar to a bicapsule but rounded along the axis instead of flat\n// .x = f(p)\n// .y = ∂f(p)/∂x\n// .z = ∂f(p)/∂y\n// .w = ∂f(p)/∂z\n// .yzw = ∇f(p) with ‖∇f(p)‖ = 1\nvec4 sdgEggZ(vec3 pIn, float  a, float b, float h) {\n    //These first 4 lines can be precalculated once\n    float r = a - b; //a must be greater than b!\n\tfloat l = (h * h - r * r) / (r+r);\n\tfloat sub2 = (a + l);\n\tfloat sub1 = sub2 - length(vec2(h, l));\n\n    vec2 p = vec2(length(pIn.xy), pIn.z );\n    \n\tbool subZero = p.y < 0.0;\n\tbool isTop =((p.y-h)*l) > p.x * h;\n    \n\tfloat y = (!subZero && isTop)? h: 0.0;\n\tfloat x = (isTop || subZero) ? 0.0: l;\n\n\tvec2 p2 = vec2( p.x + x, p.y - y );\n     \n    float sub = isTop ? sub1 : sub2;\n    sub = subZero ? a : sub;\n      \n\n\tfloat d = length(p2)- sub;\n    \n\tvec3 grad = vec3(pIn.xy, pIn.z-y)*vec3(p2.x, p2.x, p.x );\n  \n\treturn vec4(d, normalize(grad));\n}\n\n//This shader assumes Y is up, so wrapping it to call the Z up egg\nvec4 sdgEggY(vec3 p, float  a, float b, float h) {\n    p.xyz = p.xzy;\n    vec4 r= sdgEggZ(p, a,b,h);\n    r.yzw = r.ywz;\n    return r;\n}\n\n#define AA 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*(iTime-10.0);\n\tvec3 ro = 1.2*vec3( 1.0*cos(an), 1.0, 1.0*sin(an));\n    vec3 ta = vec3( 0.0, .5, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n   \n    // animate torus\n    float ra = 0.5 + 0.2*cos(iTime);\n    float rb = min(0.1+0.1*(sin(iTime)), ra*.9);\n    float height = abs(cos(iTime*.5))*.5 +0.6;\n    \n    // render    \n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 5.0;\n        float t = 0.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = sdgEggY(pos,ra,rb, height).x;\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = sdgEggY(pos,ra,rb, height).yzw;\n\n            // compute normal numerically, for comparison\n            // https://iquilezles.org/articles/normalsSDF\n            #if SHOW_NUMERIC_GRADIENT\n            const vec2 e = vec2(1,-1);\n            const float eps = 0.0002;\n            nor = normalize( e.xyy*sdgEggY( pos + e.xyy*eps, ra, rb,height ).x + \n                             e.yyx*sdgEggY( pos + e.yyx*eps, ra, rb,height ).x + \n                             e.yxy*sdgEggY( pos + e.yxy*eps, ra, rb,height ).x + \n                             e.xxx*sdgEggY( pos + e.xxx*eps, ra, rb,height ).x );\n\n            #endif\n\n            float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.85,0.75,0.65)*dif;\n            col *= (0.5+0.5*nor)*(0.5+0.5*nor);\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}