{
    "Shader": {
        "info": {
            "date": "1639391814",
            "description": "Beautiful pixel northern lights in the polar coordinate system",
            "flags": 0,
            "hasliked": 0,
            "id": "slcXRj",
            "likes": 8,
            "name": "Pixel Aurora Borealis",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "pixel",
                "spiral",
                "stars",
                "polar"
            ],
            "usePreview": 0,
            "username": "_Chae4ek_",
            "viewed": 467
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define PI2 6.28318530718\n\nfloat rand(in float x) {\n  return fract(sin(x) * 1e4);\n}\n\nfloat rand(in vec2 st) {\n  vec2 r = fract(sin(st) * 2.7644437);\n  return fract(r.y * 276.44437 + r.x);\n}\n\nvec3 rand(in vec3 s) {\n  float t = 4096.0 * sin(dot(s, vec3(17.0, 31.0, 11.0)));\n  return vec3(fract(512.0 * t), fract(64.0 * t), fract(8.0 * t)) - 0.5;\n}\n\n// simplex perlin noise\nfloat snoise(in vec3 p) {\n  vec3 s = floor(p + dot(p, vec3(0.33333333333)));\n  vec3 x = p - s + dot(s, vec3(0.16666666667));\n\n  vec3 e = step(0.0, x - x.yzx);\n  vec3 i1 = e * (1.0 - e.zxy);\n  vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n  vec3 x1 = x - i1 + 0.16666666667;\n  vec3 x2 = x - i2 + 0.33333333333;\n  vec3 x3 = x - 0.5;\n\n  vec4 w = vec4(dot(x, x), dot(x1, x1), dot(x2, x2), dot(x3, x3));\n  w = max(0.6 - w, 0.0);\n  w = pow(w, vec4(4.0));\n  w *= vec4(dot(rand(s), x), dot(rand(s + i1), x1), dot(rand(s + i2), x2), dot(rand(s + 1.0), x3));\n\n  return dot(w, vec4(30.0, 50.0, 30.0, 40.0));\n}\n\nvec2 rot(in vec2 st, in float angle) {\n  float c = cos(angle), s = sin(angle);\n  return mat2(c, -s, s, c) * st;\n}\n\nfloat alfa0(in float r_, in float r, in float theta) {\n  // tan(alfa) = y'/x' = (r'*sin(theta) + r*cos(theta)) / (r'*cos(theta) - r*sin(theta))\n  float s = sin(theta), c = cos(theta);\n  return atan(r_ * s + r * c, r_ * c - r * s);\n}\n\nfloat borealis_green1(in vec2 st, in float step2) {\n  const float a = 100.0;\n  float r = length(st);\n  float theta = atan(st.y, st.x);\n\n  float f_ = a / r;                                 // the equation with respect to theta\n  float n_ = trunc((f_ - theta) / PI2) * PI2 + PI;  // periodic N\n  float r_ = -a / ((theta + n_) * (theta + n_));    // r' = -a / theta^2\n  float alfa = alfa0(r_, r, theta);\n  r += 4.0 * cos(rot(st, alfa).x - iTime) + rand(r) * 2.0;\n  // recalc:\n  float f = a / r;                                // the equation with respect to theta\n  float n = trunc((f - theta) / PI2) * PI2 + PI;  // periodic N\n  float func = a / (theta + n);                   // the equation with respect to r\n\n  return smoothstep(0.0, step2, abs(r - func));\n}\n\nfloat borealis_green2(in vec2 st, in float step2) {\n  st.x = -st.x;\n  const float a = 1.55;\n  float r = length(st);\n  float theta = atan(st.y, st.x);\n\n  float f_ = log(r) / log(a);                       // the equation with respect to theta\n  float n_ = trunc((f_ - theta) / PI2) * PI2 + PI;  // periodic N\n  float r_ = pow(a, theta + n_) * log(a);           // r' = pow(a, theta) * log(a)\n  float alfa = alfa0(r_, r, theta);\n  r += 4.0 * cos(rot(st, alfa).x + iTime) + rand(r) * 2.0;\n  // recalc:\n  float f = log(r) / log(a);                      // the equation with respect to theta\n  float n = trunc((f - theta) / PI2) * PI2 + PI;  // periodic N\n  float func = pow(a, theta + n);                 // the equation with respect to r\n\n  return smoothstep(0.0, step2, abs(r - func));\n}\n\nfloat borealis_blue(in vec2 st, in float step2) {\n  const float a = 100.0;\n  float r = length(st);\n  float theta = atan(st.y, st.x);\n\n  float f_ = a / r;                                 // the equation with respect to theta\n  float n_ = trunc((f_ - theta) / PI2) * PI2 + PI;  // periodic N\n  float r_ = -a / ((theta + n_) * (theta + n_));    // r' = -a / theta^2\n  float alfa = alfa0(r_, r, theta);\n  r += 4.0 * cos(rot(st, alfa).y + iTime) + rand(r) * 2.0;  // it's weird, but pretty good\n  // recalc:\n  float f = a / r;                                // the equation with respect to theta\n  float n = trunc((f - theta) / PI2) * PI2 + PI;  // periodic N\n  float func = a / (theta + n);                   // the equation with respect to r\n\n  return smoothstep(0.0, step2, abs(r - func));\n}\n\nfloat particles(in vec2 st, in float step1) {\n  float r = rand(floor(st));\n  return smoothstep(step1, 1.0, r) * max(0.0, sin(r * 34433.0 + 2.0 * iTime));\n}\n\nvec3 color;\nconst vec3 GREEN = vec3(0.0, 1.0, 0.1647);\nconst vec3 GREEN2 = vec3(0.0039, 0.2275, 0.1216);\nconst vec3 GREEN3 = vec3(0.0275, 0.2118, 0.098);\nconst vec3 BLUE = vec3(0.0039, 0.0196, 0.0667);\nconst vec3 BLUE2 = vec3(0.0, 0.1451, 0.3608);\nconst vec3 BLUE3 = vec3(0.4039, 0.5294, 0.7137);\nconst vec3 BLUE4 = vec3(0.0863, 0.1451, 0.2);\n\nfloat christmas_tree(in vec2 st) {\n  const float a = 0.4;\n  float x = st.x - 9.0, y = st.y + 31.0;\n  float f = 0.27 * cos(3.2 * y * a + abs(x * a)) * (y * a - 15.0) - 2.4 * abs(x * a) -\n            0.46 * (y * a + abs(y * a)) + 5.0 * (y * a - abs(y * a - 2.0));\n\n  if (abs(f) < 6.0) color += GREEN3 * particles(st, 0.3);  // extra particles around\n  return step(f, -4.0);\n}\n\n#define scale 100.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 st = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n  st *= scale;\n\n  // alignment\n  vec2 st2 = vec2(st.x - 15.0, st.y - 2.0 * rand(floor(st.x)));\n  st2 = floor(st2);\n  st2.y = st2.y * 1.2 - 35.0;\n  st2.x -= 17.0;\n  st2 = rot(st2, 4.5);\n\n  // background\n  color = BLUE * max(st.y * -0.09, 1.0);\n\n  // green 1\n  color += GREEN2 * (1.0 - borealis_green1(st2, 1.0));\n  color += GREEN * (1.0 - borealis_green1(st2, 6.0));\n  color += BLUE * (1.0 - borealis_green1(st2, 14.0));\n\n  // green 2\n  vec2 st4 = rot(st2, -PI);\n  st4.x += -10.0;\n  st4.y += 5.0;\n  color += GREEN2 * (1.0 - borealis_green2(st4, 2.0));\n  color += GREEN * (1.0 - borealis_green2(st4, 7.5));\n  color += BLUE * (1.0 - borealis_green2(st4, 16.0));\n\n  // blue\n  st2 = rot(st2, -0.6);\n  st2 *= 0.5;\n  color += BLUE * (1.0 - borealis_blue(st2, 1.0));\n  color += BLUE * (1.0 - borealis_blue(st2, 3.0));\n  color += BLUE * (1.0 - borealis_blue(st2, 6.0));\n\n  // particles and snow\n  vec2 st3 = st;\n  st3.y += 0.1 * iTime * (3.0 + 15.0 * rand(floor(st3.x)));\n  st2.y += 0.1 * iTime * (3.0 + 15.0 * rand(floor(st2.x)));\n  color += BLUE2 * particles(st2, 0.995);\n  color += BLUE3 * particles(st3, 0.992);\n\n  st = floor(st);\n  color *= christmas_tree(st);\n\n  // cliffs\n  float x2 = st.x * 0.09 + 1.0;\n  if (x2 < 0.0 || x2 > 3.4) {\n    float threshold = snoise(vec3(x2, x2, 10.0)) * 30.0 - 15.0;\n    if (st.y < threshold + 2.0 * rand(st)) color = BLUE4 * particles(st, 0.0);\n    if (st.y < threshold - 1.0) color = vec3(0.0);\n  }\n  float x1 = st.x * 0.01;\n  if (st.y < snoise(vec3(x1, x1, 10.0)) * 26.0 - 20.0) color = vec3(0.0);\n\n  fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}