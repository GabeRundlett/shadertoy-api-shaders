{
    "Shader": {
        "info": {
            "date": "1490715587",
            "description": "A simple color picker. Please feel free to improve it, share it and use it in your code.",
            "flags": 32,
            "hasliked": 0,
            "id": "ls2yRz",
            "likes": 11,
            "name": "Simple Color Picker",
            "published": 3,
            "tags": [
                "2d",
                "widgets",
                "tools",
                "colorpicking"
            ],
            "usePreview": 0,
            "username": "thelaui",
            "viewed": 1232
        },
        "renderpass": [
            {
                "code": "// dimensions of the color picker (in range (0,1])\n#define CP_WIDTH  0.5\n#define CP_HEIGHT 0.5\n\n// position of the color picker (in range [0,1]) \n// relative to the bottom left corner\n#define CP_POS_X 0.0\n#define CP_POS_Y 0.0\n\n// relative widths of the color picker widgets (in range (0,1])\n#define SV_WIDGET_WIDTH 0.94\n#define H_WIDGET_WIDTH  0.05\n\n// dimensions of the circular sat/val marker\n#define SAT_VAL_MARKER_OUTER_RADIUS 0.03\n#define SAT_VAL_MARKER_INNER_RADIUS 0.025\n\n// thickness of the hue marker\n#define VAL_MARKER_THICKNESS 0.005\n\n\nconst int num_color_stops = 6;\n\n\n// interpolation helpers\n\nvec3 get_color_stop(int i) {\n    vec3 result = vec3(0);\n    \n    if (i == 0) \t result = vec3(1.0, 0.0, 0.0);\n    else if (i == 1) result = vec3(1.0, 0.0, 1.0);\n    else if (i == 2) result = vec3(0.0, 0.0, 1.0);\n    else if (i == 3) result = vec3(0.0, 1.0, 1.0);\n    else if (i == 4) result = vec3(0.0, 1.0, 0.0);\n    else if (i == 5) result = vec3(1.0, 1.0, 0.0);\n    \n    return result;\n\n}\n\nvec2 get_sat_val_from_position(in vec2 pos) {\n\t\n    vec2 result = vec2(0.0);\n    \n   \tvec2 tl = vec2(0.0, 0.0);\n    vec2 bl = vec2(0.0, 0.0);\n    vec2 br = vec2(0.0, 1.0);\n    vec2 tr = vec2(1.0, 0.0);\n\n    vec2 interp_b = mix(bl, br, pos.x);\n    vec2 interp_t = mix(tl, tr, pos.x);\n\n    result = mix(interp_b, interp_t, pos.y);\n    \n    return result;\n}\n\nvec3 get_hue_from_position(in float pos) {\n\t\n    vec3 result = vec3(0.0);\n    \n    const float frac = 1.0 / float(num_color_stops);\n\n    for (int i = 0; i < num_color_stops; ++i) {\n\n    \tif (pos <= frac * float(i + 1)) {\n\n        \tint n = i + 1;\n        \tif (n == num_color_stops) {\n            \tn = 0;\n        \t};\n\n        \tresult = mix(get_color_stop(i), get_color_stop(n), (pos - frac * float(i)) * 1.0 / frac);\n        \tbreak;\n      \t}\n    }\n    \n    return result;\n}\n\nvec3 apply_sat_val_to_color(in vec2 sat_val, in vec3 color) {\n\tvec3 val = mix(vec3(0.0), vec3(1.0), sat_val.y);\n    return mix(val, color, sat_val.x);\n}\n\n\n\n// drawing functions\n\nvec3 draw_sat_val(in vec2 uv, in vec3 selected_hue, in vec3 selection_position) {\n    \n  \tvec3 final = vec3(0.0);\n       \n\tvec2 rel_uv = vec2((uv.x - CP_POS_X) / CP_WIDTH, (uv.y - CP_POS_Y) / CP_HEIGHT);  \n\n  \tif (rel_uv.x >= 0.0 && rel_uv.x <= 1.0 && \n        rel_uv.y >= 0.0 && rel_uv.y <= 1.0 && \n        rel_uv.x <= SV_WIDGET_WIDTH) {\n\n    \tvec2 sat_val = get_sat_val_from_position(vec2(rel_uv.x / SV_WIDGET_WIDTH, rel_uv.y));\n      \n    \tfinal = apply_sat_val_to_color(sat_val, selected_hue);\n\n    \t// draw selection marker\n        float aspect_ratio = iResolution.y / iResolution.x;\n        //aspect_ratio = 1.0;\n        \n    \tfloat dist = length(\n            vec2(rel_uv.x, rel_uv.y * aspect_ratio) - \n            vec2(selection_position.x, selection_position.y * aspect_ratio)\n        );\n\n    \tif (dist <= SAT_VAL_MARKER_OUTER_RADIUS &&\n        \tdist >= SAT_VAL_MARKER_INNER_RADIUS) {\n\n      \t\tfloat smoothing = (dist - SAT_VAL_MARKER_INNER_RADIUS) /\n        \t\t              (SAT_VAL_MARKER_OUTER_RADIUS - SAT_VAL_MARKER_INNER_RADIUS);\n\n      \t\tsmoothing = 1.0 - abs((smoothing * 2.0 - 1.0) * 0.5);\n\n      \t\tfinal = mix(final, vec3(1.0) - final, smoothing);\n    \t}\n  \t}\n\n  \treturn final;\n\n}\n\nvec3 draw_hue(in vec2 uv, in vec3 selection_position) {\n    \n  \tvec3 final = vec3(0.0);\n    \n    vec2 rel_uv = vec2((uv.x - CP_POS_X) / CP_WIDTH, (uv.y - CP_POS_Y) / CP_HEIGHT);  \n\n  \tif (rel_uv.x >= 0.0 && rel_uv.x <= 1.0 && \n        rel_uv.y >= 0.0 && rel_uv.y <= 1.0 && \n        1.0 - rel_uv.x <= H_WIDGET_WIDTH) {\n\n\t\tfinal = get_hue_from_position(rel_uv.y);\n\n    \t// draw selection marker\n    \tfloat dist = abs(rel_uv.y - selection_position.z);\n\n    \tif (dist <= VAL_MARKER_THICKNESS) {\n      \t\tfinal = vec3(1.0) - final;\n    \t}\n  \t}\n\n  \treturn final;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy; \n        \n    vec3 final_color = vec3(0.0); \n    \n    // draw color picker\n    \n    // selected_position.xy : relative xy coords of selection in sat/val widget\n    // selected_position.z  : relative y coord of selection in hue widget\n    vec3 selection_position = texture(iChannel0, vec2(0.0)).xyz;\n    vec3 selected_hue = get_hue_from_position(selection_position.z);\n    \n    vec2 sat_val = get_sat_val_from_position(\n        vec2(selection_position.x / SV_WIDGET_WIDTH, selection_position.y)\n    );\n      \n    vec3 selected_color = apply_sat_val_to_color(sat_val, selected_hue);\n    \n    final_color += draw_sat_val(uv, selected_hue, selection_position);  \n    final_color += draw_hue(uv, selection_position);\n    \n \n    // draw colorized windows\n    vec3 tl = texture(iChannel1, (uv - vec2(0.0, 0.5)) * 2.0).rgb;\n    vec3 tr = texture(iChannel2, (uv - vec2(0.5, 0.5)) * 2.0).rgb;\n    vec3 br = texture(iChannel3, (uv - vec2(0.5, 0.0)) * 2.0).rgb;\n    \n    // replace green by selected color\n    float dist_to_green = length(vec3(0.0, 1.0, 0.0) - tl);\n    tl = mix(selected_color, tl, dist_to_green);\n    \n    dist_to_green = length(vec3(0.0, 1.0, 0.0) - tr);\n    tr = mix(selected_color, tr, dist_to_green);\n    \n    // colorize with selected color\n    br *= selected_color;\n    \n    if (uv.x <= 0.5 && uv.y >= 0.5) final_color = tl;\n    else if (uv.x > 0.5 && uv.y >= 0.5) final_color = tr;\n    else if (uv.x > 0.5 && uv.y < 0.5) final_color = br;\n    \n    fragColor = vec4(final_color, 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 3,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// dimensions of the color picker (in range (0,1])\n#define CP_WIDTH  0.5\n#define CP_HEIGHT 0.5\n\n// position of the color picker (in range [0,1]) \n// relative to the bottom left corner\n#define CP_POS_X 0.0\n#define CP_POS_Y 0.0\n\n// relative widths of the color picker widgets (in range (0,1])\n#define SV_WIDGET_WIDTH 0.94\n#define H_WIDGET_WIDTH  0.05\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 result = texture(iChannel0, vec2(0.0)).xyz;\n    vec2 rel_mouse_pos = iMouse.xy / iResolution.xy;\n    \n    rel_mouse_pos = vec2((rel_mouse_pos.x - CP_POS_X) / CP_WIDTH, (rel_mouse_pos.y - CP_POS_Y) / CP_HEIGHT);\n    \n    \n    if (iMouse.z > 0.0) {\n        if (rel_mouse_pos.x <= SV_WIDGET_WIDTH) {\n    \t\tresult = vec3(rel_mouse_pos.xy, result.z);\n        } else if (1.0 - rel_mouse_pos.x <= H_WIDGET_WIDTH) {\n            result = vec3(result.xy, rel_mouse_pos.y);\n        }\n    }\n            \n    fragColor = vec4(result, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}