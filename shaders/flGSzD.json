{
    "Shader": {
        "info": {
            "date": "1640235384",
            "description": "You can't make me describe my shader!",
            "flags": 0,
            "hasliked": 0,
            "id": "flGSzD",
            "likes": 2,
            "name": "eindacor_perlincmyk",
            "published": 3,
            "tags": [
                "perlin"
            ],
            "usePreview": 0,
            "username": "Eindacor_DS",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define AA .001\n\n#define CYAN vec3(0., 1., 1.)\n#define MAGENTA vec3(1., 0., 1.)\n#define YELLOW vec3(1., 1., 0.)\n#define BLACK vec3(0.)\n\n\n// from https://www.shadertoy.com/view/4djSRW\nfloat hash(vec2 p)\n{\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 getRandomVector(float seed) {\n    vec2 outVec;\n    if (seed < .25) {\n        outVec = vec2(1., 1.);\n    } else if (seed < .5) {\n        outVec = vec2(-1., 1.);\n    } else if (seed < .75) {\n        outVec = vec2(1., -1.);\n    } else {\n        outVec = vec2(-1., -1.);\n    }\n    \n    return outVec;\n}\n\nfloat biLerp(float f0, float f1, float f2, float f3, float lerpX, float lerpY) {\n    float upper = mix(f1, f2, lerpX);\n    float lower = mix(f0, f3, lerpX);\n    \n    return mix(lower, upper, lerpY);\n}\n\nmat2x2 createRotationMatrix(float rotation) {\n    return mat2x2(\n        cos(rotation), -sin(rotation),\n        sin(rotation), cos(rotation)\n    );\n}\n\nfloat getModifiedDot(vec2 uv, vec2 p, float gridDimension, float pHash) {   \n    float rotation = sin(iTime * .05 + pHash) * 2. * PI;\n    if (pHash < .5) {\n        rotation *= -1.;\n    }\n    mat2x2 rotationMatrix = createRotationMatrix(rotation);\n\n    return dot((uv - p) / gridDimension, getRandomVector(pHash) * rotationMatrix);\n}\n\nfloat getHoldTransitionValue(float lower, float upper, float holdTime, float transitionTime, float time) {\n    float period = 2. * holdTime + 2. * transitionTime;\n    float halfPeriod = period / 2.;\n    float relativeTime = fract(time / halfPeriod);\n    float halfHoldTime = holdTime / 2.;\n    \n    float val = smoothstep(halfHoldTime, halfHoldTime + transitionTime, relativeTime * halfPeriod);\n    \n    if (int(time / halfPeriod) % 2 == 0) {\n        val = 1. - val;\n    }\n\n    return mix(lower, upper, val);\n}\n\nfloat getPerlinValue(vec2 uv, float gridDimension) {\n    float xCoord = floor(uv.x / gridDimension) * gridDimension;\n    float yCoord = floor(uv.y / gridDimension) * gridDimension;\n    \n    float xIndex = floor(uv.x / gridDimension);\n    float yIndex = floor(uv.y / gridDimension);\n    \n    float p0Hash = hash(vec2(xIndex, yIndex));\n    float p1Hash = hash(vec2(xIndex, yIndex + 1.));\n    float p2Hash = hash(vec2(xIndex + 1., yIndex + 1.));\n    float p3Hash = hash(vec2(xIndex + 1., yIndex));\n    \n    vec2 p0 = vec2(xCoord, yCoord);\n    vec2 p1 = vec2(xCoord, yCoord + gridDimension);\n    vec2 p2 = vec2(xCoord + gridDimension, yCoord + gridDimension);\n    vec2 p3 = vec2(xCoord + gridDimension, yCoord);\n    \n    float rotation = sin(iTime * .15) * 2. * PI;\n    rotation = getHoldTransitionValue(0., 1., 5., 5., iTime);\n    mat2x2 rotationMatrix = createRotationMatrix(rotation);\n    \n    float dot0 = getModifiedDot((uv - p0) * rotationMatrix + p0, p0, gridDimension, p0Hash);\n    float dot1 = getModifiedDot((uv - p1) * rotationMatrix + p1, p1, gridDimension, p1Hash);\n    float dot2 = getModifiedDot((uv - p2) * rotationMatrix + p2, p2, gridDimension, p2Hash);\n    float dot3 = getModifiedDot((uv - p3) * rotationMatrix + p3, p3, gridDimension, p3Hash);\n    \n    float xInterp = smoothstep(p0.x, p2.x, uv.x);\n    float yInterp = smoothstep(p0.y, p2.y, uv.y);\n    \n    float val = biLerp(dot0, dot1, dot2, dot3, xInterp, yInterp);\n\n    float xLerp = mod(uv.x / 2., gridDimension);\n    float revealMargin = gridDimension * .95;\n    \n    \n    return val;\n    return mix(-5., 5., (val + 1.) / 2.);\n}\n\nfloat getPerlinIterationValue(vec2 uv, float gridDimension, int iterations) {\n    float val = getPerlinValue(uv, .1);\n    \n    for (int i=0; i<iterations; ++i) {\n        val += getPerlinValue(uv / pow(2., float(i + 1)), gridDimension);\n    }\n \n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio;\n    uv += vec2(iTime * .1);\n    \n    float gridSize = .1;\n    float uvMultiplier = 4.;\n    int iterations = 10;\n    float timeMultiplier = .08;\n    \n    float cyanVal = getPerlinIterationValue((uv) * uvMultiplier, gridSize, iterations);\n    vec3 cyan = mix(vec3(1.), CYAN, cyanVal);\n    \n    float yellowVal = getPerlinIterationValue((uv + vec2(12.3 * gridSize)) * uvMultiplier, gridSize, iterations);\n    vec3 yellow = mix(vec3(1.), YELLOW, yellowVal);\n    \n    float magentaVal = getPerlinIterationValue((uv + vec2(25.5 * gridSize)) * uvMultiplier, gridSize, iterations);\n    vec3 magenta = mix(vec3(1.), MAGENTA, magentaVal);\n    \n    float blackVal = getPerlinIterationValue((uv + vec2(31.8 * gridSize)) * uvMultiplier, gridSize, iterations * 2);\n    vec3 black = mix(vec3(1.), BLACK, blackVal);\n    \n    vec3 mixColor = cyan * yellow * magenta;\n    mixColor.r = clamp(mixColor.r, 0., 1.);\n    mixColor.g = clamp(mixColor.g, 0., 1.);\n    mixColor.b = clamp(mixColor.b, 0., 1.);\n    \n    vec3 inverseMix = vec3(1.) - mixColor;\n    vec3 modColor = vec3(1., .25, .25);\n\n    if (fragCoord.x/iResolution.x < .5) {\n        fragColor = vec4(vec3(1.) - mix(inverseMix, mixColor, blackVal) * modColor, 1.0);\n    } else {\n        fragColor = vec4(mix(inverseMix, mixColor, blackVal) * modColor, 1.0);\n    }\n    \n    float diagonalVal = smoothstep(fragCoord.x / aspectRatio, fragCoord.x / aspectRatio, fragCoord.y);\n    fragColor = mix(vec4(mix(inverseMix, mixColor, blackVal) * modColor, 1.0), vec4(vec3(1.) - mix(inverseMix, mixColor, blackVal) * modColor, 1.0),diagonalVal);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}