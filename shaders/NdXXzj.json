{
    "Shader": {
        "info": {
            "date": "1618840430",
            "description": "Wireframe IFS",
            "flags": 0,
            "hasliked": 0,
            "id": "NdXXzj",
            "likes": 8,
            "name": "Wireframe IFS",
            "published": 3,
            "tags": [
                "ifs"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .005\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\nvec4 combine(vec4 val1, vec4 val2 ){\n    if ( val1.w < val2.w ) {\n        return val1;\n    }\n    return val2;\n}\n\nfloat hash(vec2 p) {\n    vec2 randP = fract(sin(p*123.456)*567.89);\n    randP += dot(randP,randP*34.56);\n    float rand = fract(randP.x*randP.y);\n    return rand;\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n  p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat sdFrameCross( in vec3 p , float inf, float size, float e)\n{\n    float da = sdBoxFrame(p.xyz,vec3(inf,size,size),e);\n    float db = sdBoxFrame(p.yzx,vec3(size,inf,size),e);\n    float dc = sdBoxFrame(p.zxy,vec3(size,size,inf),e);\n    float d = min(da,min(db,dc));\n    mat3 rot = matRotateZ(iTime)*matRotateX(-iTime);\n    p*=rot;\n    d = min(d,sdBoxFrame(p,vec3(size*0.5),e));\n    return d;\n}\n\nvec4 GetDist(vec3 p) {\n    float t = iTime*1.2;\n    vec3 p2 = p;\n    mat3 rot = matRotateY(radians(25.0)+t)*matRotateX(radians(-30.0)+t);\n    mat3 rot2 = matRotateX(radians(-25.0)+t)*matRotateY(radians(30.0)+t);\n\n    float dist = 0.15+sin(t)*0.1;\n    \n    p = abs(p);\n    p-=dist;\n    p*=rot;\n    \n    float d = sdFrameCross(p,0.1,0.3,0.002);\n    \n    p = p2;\n    for(float i = 1.; i<=2.; i++){\n        p = abs(p);\n        p -= (dist*0.75)*i;\n        p *= rot2;\n        d = min(d,sdFrameCross(p+vec3(0.0,sin(t*i)*0.5,0.0), 0.1,0.3,0.002));\n    }\n    \n    // floor\n    p = p2;\n    p.y+=3.0;\n    float mask = length(p)-25.0;\n    p.z-=t*2.2;\n    p.xz = mod(p.xz,1.0)-0.5;\n    float d2 = sdBoxFrame(p,vec3(0.5,0.01,0.5),0.0025);\n    d2 = max(mask,d2);\n    \n    p = p2;\n    vec2 uv=p.xz;\n    float scale = 1.0+mod(iTime*10.0,40.0);\n    float shine = abs(length(uv)-scale)-1.0;\n    vec3 col = mix(vec3(0.1,0.5,0.9),vec3(0.7,0.8,1.0),1.0-smoothstep(0.0,0.5,shine));\n    vec4 res = combine(vec4(vec3(1.0),d),vec4(col,d2));\n    \n    return res;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dO= vec4(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.w;\n        vec4 dS = GetDist(p);\n        dO.w += dS.w;\n        dO.xyz = dS.xyz;\n        if(dO.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nvec2 GetLight(vec3 p) {\n    vec3 lightPos = vec3(2,5,3);\n    \n    lightPos.yz *= Rot(radians(-60.0));\n    lightPos.xz *= Rot(iTime*.3+1.0);\n    \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l).w;\n    \n    float lambert = max(.0, dot( n, l))*0.6;\n    \n    return vec2((lambert+dif),max(0.9, 1.0)) ;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 Bg(vec3 rd, vec2 p) {\n    p = rd.xy;\n    p*=10.0;\n    vec2 uv = fract(p)-0.5;\n    vec2 id = floor(p);\n\n    float n = hash(p);\n    float rand = hash(id);\n    \n    vec3 col = vec3(.2,.1,.5);\n    \n    float k = rd.y*2.0+0.75;\n    col = mix(col,vec3(.1),k);\n    \n    vec2 pos = vec2(0.0);\n    if(rand<0.5){\n        pos.x += 0.3;\n    }\n    if(rand>0.7){\n        pos.y += 0.3;\n    }\n    \n    vec2 starPos = uv+pos;\n    starPos.x*=1.0-rand;\n    starPos.y*=2.0;\n    float d = length(starPos)-0.01;\n    if(rd.y>0.0){\n        col = mix(col,vec3(0.5),S(d,0.0));\n    }\n    \n    return col*n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 3, -3);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-45.0+sin(iTime*.5)*10.0));\n    ro.xz *= Rot(iTime*.35+1.0);\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0.0), 2.);\n\n    vec4 d = RayMarch(ro, rd);\n    \n    if(d.w<MAX_DIST) {\n        vec3 p = ro + rd * d.w;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd,n);\n        float spec = pow(max(0.0,r.y),30.);\n        float dif = dot(n,normalize(vec3(1,2,3)))*0.5+0.5;\n        col = mix(Bg(r,uv),vec3(dif),0.5)+spec;\n        if(d.rgb != vec3(1.0)){\n            col*=d.rgb;\n        }\n    } else {\n        // background\n        col += Bg(rd,uv);\n    }\n    \n    float brightness = 1.25;\n    fragColor = vec4(col*brightness,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}