{
    "Shader": {
        "info": {
            "date": "1668931536",
            "description": "skateboard with fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "mslSW4",
            "likes": 31,
            "name": "skateboard with fractal",
            "published": 3,
            "tags": [
                "fractal",
                "skateboard",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 2652
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define ZERO (min(iFrame,0))\n#define EDGE_WIDTH 0.01\n#define MATERIAL0 0\n#define MATERIAL1 1\n\nfloat edge;\n\nfloat random (vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCylinderX( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.yz),p.x)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCylinderZ( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\n// tweaked as the center aligned horizontal capsule. \nfloat sdHorizontalCapsule( vec3 p, float w, float r )\n{\n      p.x-= clamp( p.x, -w*0.5, w*0.5 );\n      return length( p ) - r;\n}\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\nfloat getTime(float t, float duration){\n    return clamp(t,0.0,duration)/duration;\n}\n\nfloat board(vec3 p){\n    vec3 prevP = p;\n    float thick = 0.01;\n    float r = 0.37;\n    float h = 0.75;\n    \n    float d = sdBox(p,vec3(r,h,thick));\n    p.y=abs(p.y)-h;\n    p.yz*= Rot(radians(-10.));\n    float d2 = sdCappedCylinderZ(p,r,thick);\n    d2 = max(-p.y,d2);\n    d = min(d,d2);\n    return d;\n}\n\nfloat trackWithWheel(vec3 p){\n    vec3 prevP = p;\n\n    float d = sdHorizontalCapsule(p,0.63,0.035);\n    p.y+=0.03;\n    float d2 = sdCappedCylinderZ(p,0.15,0.03);\n    d2 = max(p.y,d2);\n    d = opSmoothUnion(d,d2,0.05);\n    p.y+=0.08;\n    d2 = sdCappedCylinderZ(p,0.05,0.1);\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.z-=0.12;\n    p.y+=0.075;\n    d2 = sdBox(p,vec3(0.12,0.15,0.015));\n    d = min(d,d2);\n    p.z+=0.025;\n    d2 = sdBox(p,vec3(0.05,0.15,0.05));\n    \n    float a = radians(-45.);\n    p.y=abs(p.y)-0.13;\n    d2 = max(dot(p.yz,vec2(cos(a),sin(a))),d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.z-=0.02;\n    p.y+=0.1;\n    d2 = sdCappedCylinderZ(p,0.04,0.05);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x = abs(p.x)-0.3;\n    d2 = sdCappedCylinderX(p,0.08,0.04)-0.03;\n    d2 = max(-sdCappedCylinderX(p,0.04,0.2),d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.z-=0.12;\n    p.y+=0.07;\n    p.x = abs(p.x)-0.085;\n    p.y = abs(p.y)-0.11;\n    d2 = sdCappedCylinderZ(p,0.01,0.04);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat arrowFractal(vec2 p, int dir, float num){\n        float d = 10.;\n        \n        float dist = 0.07;\n        if(dir == 0){\n            p.y = abs(p.y)-0.5;\n            p*=Rot(radians(90.0));\n        } else {\n            p.x = abs(p.x)-1.5;\n            dist = 0.06;\n        }\n\n        for(float i = 0.; i<num; i++){\n            p*=Rot(radians(i*30.0+iTime*sin(i)*20.));\n            p*=0.9-i*0.1;\n            p = abs(p)-dist;\n            p-=0.025+i*0.01;\n\n            d = Tri(p,vec2(0.1),radians(45.));\n            p.y+=0.05;\n            float d2 = Tri(p,vec2(0.1),radians(45.));\n            d = max(-d2,d);\n\n            float d3 = B(p-vec2(0.,-0.03),vec2(0.017,0.06));\n            d = abs(min(d,d3))-0.005;\n            \n            if(dir == 1){\n                d = abs(d)-0.0005;\n            }\n        }\n        return d;\n}\n\nvec3 skateboardAnim(vec3 p){\n\n    float rotX = 0.;\n    float rotY = 0.;\n\n    float frame = mod(iTime,15.0);\n    float time = frame;\n\n    if(frame>=2.5 && frame<5.){\n        time = getTime(time-2.5,0.6);\n\n        rotX = cubicInOut(time)*90.0;\n    } else if(frame>=5. && frame<7.5){\n        time = getTime(time-5.0,0.6);\n\n        rotX = 90.+cubicInOut(time)*90.0;\n    } else if(frame>=7.5 && frame<10.){\n        time = getTime(time-7.5,0.6);\n\n        rotX = 180.+cubicInOut(time)*180.0;\n    } else if(frame>=10. && frame<12.5){\n        time = getTime(time-10.,0.6);\n\n        rotY = cubicInOut(time)*180.0;\n    } else if(frame>=12.5 && frame<15.){\n        time = getTime(time-12.5,0.6);\n\n        rotY = 180.+cubicInOut(time)*180.0;\n    }\n\n    p.xz*=Rot(radians(rotX));\n    p.yz*=Rot(radians(rotY));\n    return p;\n}\n\nvec2 skateboard(vec3 p) {\n     vec3 prevP = p;\n     \n     p = skateboardAnim(p);\n     \n     float d = board(p-vec3(0.0,0.0,0.07));\n     float mask = board(prevP-vec3(0.0,0.0,0.07));\n     \n     p.y=abs(p.y)-0.7;\n     float d2 = trackWithWheel(p-vec3(0.0,0.0,-0.07));\n     \n     p = prevP;\n     float d3 = arrowFractal(p.xy,1,5.);\n     d3 = max(abs(p.z)-0.001,d3);\n     d3 = max(-(mask-0.13),d3);\n     \n     vec2 res = combine( combine(vec2(d,MATERIAL0),vec2(d2,MATERIAL1)),vec2(d3,MATERIAL1));\n     \n     return res;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    vec2 res = skateboard(p);\n    \n    return res;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    float lastDistEval = 10.; \n    float dist;\n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dist = dS.x;\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(stepnum == MAX_STEPS){\n            if (lastDistEval < EDGE_WIDTH && dist > lastDistEval) {\n                edge = 1.0;\n            }\n            if (dist < lastDistEval) lastDistEval = dist;\n        }      \n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    col = diffuseMaterial(n,rd,p,vec3(1.3));\n    if(mat == MATERIAL0){\n        p = skateboardAnim(p);\n        float d = arrowFractal(p.xy,0,3.);\n        col = mix(col,vec3(0.),S(d,0.0));\n    }\n    return col;\n}\n\nvec3 bg(vec2 p, vec3 col){\n    vec2 prevP = p;\n    p*=6.;\n    p.y-=iTime*0.5;\n    vec2 id = floor(p);\n    vec2 grid = fract(p)-0.5;\n    vec2 prevGrid = grid;\n    \n    float n = random(id);\n    float speed = random(id*6.)*0.5;\n    float display = 0.;\n    if(n>=0.1 && n<0.2){\n        grid*=Rot(radians(90.));\n    } else if(n>=0.2 && n<0.3){\n        grid*=Rot(radians(180.));\n    } else if(n>=0.3 && n<0.4){\n        grid*=Rot(radians(270.));\n    } else if(n>=0.4){\n        display =-1.;\n        if(n>=0.8){\n            grid*=Rot(radians(45.));\n        }\n        float d2 = abs(abs(B(grid,vec2(0.15)))-0.05)-0.01;\n        col = mix(col,vec3(0.03),S(d2,0.0));\n    }\n    \n    if(n<0.4){\n        float d2 = abs(B(grid,vec2(0.45)))-0.01;\n        \n        float mask = B(grid,vec2(0.2,0.8));\n        d2 = max(-mask,d2);\n        mask = B(grid,vec2(0.8,0.2));\n        d2 = max(-mask,d2);\n        \n        col = mix(col,vec3(0.03),S(d2,0.0));\n    }\n    \n    grid.y-=iTime*(0.5+speed);\n    grid.y-=0.45;\n    grid.y=mod(grid.y,0.74)-0.37;\n    \n    grid.y-=0.18;\n\n    float d = Tri(grid,vec2(0.36),radians(45.));\n    grid.y+=0.18;\n    float d2 = Tri(grid,vec2(0.36),radians(45.));\n    d = max(-d2,d);\n\n    float d3 = B(grid-vec2(0.,-0.16),vec2(0.07,0.2));\n    d = abs(min(d,d3))-0.015;\n    \n    d = max(B(prevGrid,vec2(0.45)),d);\n    col = mix(col,vec3(0.1),S(d,display));\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -2.5);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        \n        float rotX = 0.;\n        float rotY = 0.;\n        \n        float frame = mod(iTime,20.);\n        float time = frame;\n\n        if(frame>=5.0 && frame<10.){\n            time = getTime(time-5.0,1.);\n            \n            rotX = -cubicInOut(time)*20.0;\n        } else if(frame>=10. && frame<15.){\n            time = getTime(time-10.0,1.5);\n            \n            rotX = -20.+cubicInOut(time)*40.0;\n        } else if(frame>=15.){\n            time = getTime(time-15.0,1.);\n            \n            rotX = 20.-cubicInOut(time)*20.0;\n        }\n        \n        ro.xz *= Rot(radians(rotX));\n        ro.yz *= Rot(radians(rotY));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n        col = mix(col,vec3(0.0),edge);\n    } else {\n        col = bg(uv,col);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}