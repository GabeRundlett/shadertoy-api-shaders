{
    "Shader": {
        "info": {
            "date": "1634329068",
            "description": "simple implementation of newtons fractal\nFun fact: this works without evaluating the polynomial and its derivative.\nInstead it relies on the logarithmic derivative of the polynomial.\nThe newton iteration step can thus be calculated directly from the roots",
            "flags": 0,
            "hasliked": 0,
            "id": "NdVSR1",
            "likes": 1,
            "name": "newton's fractal",
            "published": 3,
            "tags": [
                "fractal",
                "newton",
                "rootfinding",
                "polynom"
            ],
            "usePreview": 0,
            "username": "thacks42",
            "viewed": 369
        },
        "renderpass": [
            {
                "code": "#define no_roots 4\n#define anti_alias 1\n#define no_iterations 15\n\nvec2 complex_reciprocal(vec2 z){ //computes 1/z\n    float div = z.x * z.x + z.y * z.y;\n    float div_r = 1.0f / div;\n    vec2 result = vec2(z.x * div_r, -z.y * div_r);\n    return result;\n}\n\n/*\n * Newton-rhapsody based root finding:\n * x_n+1 = x_n - f(x)/f'(x)\n * \n * interestingly the reciprocal of f(x)/f'(x) is the logarithmic derivative:\n * d/dx ln( f(x) ) = f'(x) / f(x)\n * \n * If we think of the polynomial in terms of its roots we have:\n * \n * P(x) = (x - x1) * (x - x2) * ... * (x - xn)\n * thus d/dx ln( P(x) ) = d/dx ln[ (x - x1) * (x - x2) * ... * (x - xn) ]\n * = d/dx [log(x - x1) + log(x - x2) + ... + log(x - xn)]\n * = 1/(x - x1) + 1/(x - x2) + ... + 1/(x - xn)\n * \n * which means that the reciprocal of this sum is equal to f(x)/f'(x)\n * So we can compute the newton iteration step directly from the zeros of our polynomial.\n * \n */\nvec2 newton_iteration(vec2 z, const vec2 roots[no_roots]){\n    vec2 sum = vec2(0.0f);\n    for(int i = 0; i < no_roots; i++){\n        vec2 delta = vec2(z.x - roots[i].x, z.y - roots[i].y); //calculate x - x0\n        float div = delta.x * delta.x + delta.y * delta.y;     //calculate the divisior for calculating the complex reciprocal\n        if(div < 0.0001f){                                     //if the divisor is close to zero, we've already found a root.\n            return z;\n        }\n        float div_r = 1.0f/div;\n        vec2 complex_reciprocal_delta = vec2(delta.x * div_r, -delta.y * div_r); //calculate the complex reciprocal\n        sum += complex_reciprocal_delta;                      //add the complex reciprocal to our sum\n    }\n    vec2 result = complex_reciprocal(sum);                    //calculate the complex reciprocal of the sum\n    return z - result;                                        //do the newton \"step\"\n}\n\nint find_closest_root(vec2 z, const vec2 roots[no_roots]){\n    int index = 0;\n    float dist = 10000.0f;\n    for(int i = 0; i < no_roots; i++){\n        float dx = (z.x - roots[i].x);\n        float dy = (z.y - roots[i].y);\n        float d = dx * dx + dy * dy;\n        if(d < dist){\n            dist = d;\n            index = i;\n        }\n    }\n    return index;\n}\n\nvec2 calculate_coord(vec2 c){\n    vec2 normalized_coord = c/iResolution.xy;\n    float t = iTime;\n    normalized_coord -= vec2(0.5f) + vec2(sin(t*0.1f)*0.3f, cos(t*0.1f)*0.3f);\n    normalized_coord *= 3.0 - cos(t*0.2)*2.0f;\n    return normalized_coord;\n}\n\nvec3 sample_no_AA(vec2 c, vec2 roots[no_roots], vec3 colors[no_roots]){\n    vec2 z1 = calculate_coord(c);\n    for(int i = 0; i < no_iterations; i++){\n        z1 = newton_iteration(z1, roots);\n    }\n    int index1 = find_closest_root(z1, roots);\n    \n    vec3 col = colors[index1];\n    return col;\n}\n\nvec3 sample_AA(vec2 c, vec2 roots[no_roots], vec3 colors[no_roots]){\n    vec2 z1 = calculate_coord(c + vec2( 0.114f, -0.377f));\n    vec2 z2 = calculate_coord(c + vec2( 0.351f,-0.105f));\n    vec2 z3 = calculate_coord(c + vec2(-0.123f,0.342f));\n    vec2 z4 = calculate_coord(c + vec2(-0.360f, -0.140f));\n    for(int i = 0; i < no_iterations; i++){\n        z1 = newton_iteration(z1, roots);\n        z2 = newton_iteration(z2, roots);\n        z3 = newton_iteration(z3, roots);\n        z4 = newton_iteration(z4, roots);\n    }\n    int index1 = find_closest_root(z1, roots);\n    int index2 = find_closest_root(z2, roots);\n    int index3 = find_closest_root(z3, roots);\n    int index4 = find_closest_root(z4, roots);\n    \n    vec3 col = colors[index1] + colors[index2] + colors[index3] + colors[index4];\n    col /= 4.0f;\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float t = iTime;\n    vec2 roots[no_roots] = vec2[no_roots](\n                                 vec2(1.1f  + 0.326f * cos(t*0.162f), -1.4f + 0.25f * sin(t*0.072f)),\n                                 vec2(1.2f  + 0.217f * sin(t*0.417f),  1.9f + 0.43f * cos(t*0.109f)),\n                                 vec2(-1.3f + 0.421f * cos(t*0.481f),  1.3f + 0.51f * sin(t*0.542f)),\n                                 vec2(-1.7f + 0.517f * sin(t*0.378f), -1.5f + 0.67f * cos(t*0.379f)));\n    \n    const vec3 colors[no_roots] = vec3[no_roots](\n                                  vec3(0.098f, 0.521f, 0.56f),\n                                  vec3(0.290f, 0.043f, 0.345f),\n                                  vec3(0.122f, 0.627f, 0.812f),\n                                  vec3(0.345f, 0.722f, 0.369f));\n    \n    \n    vec3 col;\n    if(anti_alias == 1){\n        col = sample_AA(fragCoord, roots, colors);\n    }\n    else{\n        col = sample_no_AA(fragCoord, roots, colors);\n    }\n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}