{
    "Shader": {
        "info": {
            "date": "1639342626",
            "description": "Practicing modelling with differential equations.",
            "flags": 32,
            "hasliked": 0,
            "id": "fltSzB",
            "likes": 15,
            "name": "Coupled Springs",
            "published": 3,
            "tags": [
                "physics",
                "springs",
                "coupled"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "// SDFs\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\n// https://www.shadertoy.com/view/tlcBW2\nfloat udTriangleWave(in vec2 p, in float freq, in float amp) {\n    float pw = 1.0 / abs(freq), qw = 0.25 * pw;\n    p.x = abs(mod(p.x * sign(freq) + qw, pw) - 0.5 * pw) - qw;\n\n    vec2 sc = vec2(2.0 * amp, pw);\n    float l = length(sc);\n    sc /= l;\n\n    p *= mat2(sc, -sc.y, sc.x);\n    return length(vec2(p.x, max(0.0, abs(p.y) - 0.25 * l)));\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 12.0;\n    vec3 color = 1.0 - texture(iChannel1, fragCoord / iResolution.xy).rgb;\n    float unit = 24.0 / iResolution.y;\n\n    // Load mass data\n    vec4 mass1 = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec4 mass2 = texelFetch(iChannel0, ivec2(1, 0), 0);\n\n    // Draw fixtures\n    drawSDF(sdDisk(uv, vec2(fa, 0.0), 0.25), vec3(0.0));\n    drawSDF(sdDisk(uv, vec2(fb, 0.0), 0.25), vec3(0.0));\n\n    // Draw the springs\n    if (min(fa, mass1.x) < uv.x && uv.x < max(fa, mass1.x)) {\n        drawSDF(udTriangleWave(uv - vec2(fa, 0.0), 8.0 / (mass1.x - fa), 1.5), vec3(0.0));\n    }\n\n    if (min(mass1.x, mass2.x) < uv.x && uv.x < max(mass1.x, mass2.x)) {\n        drawSDF(udTriangleWave(uv - vec2(mass1.x, 0.0), 8.0 / (mass2.x - mass1.x), 1.5), vec3(0.0));\n    }\n\n    if (min(mass2.x, fb) < uv.x && uv.x < max(mass2.x, fb)) {\n        drawSDF(udTriangleWave(uv - vec2(mass2.x, 0.0), 8.0 / (fb - mass2.x), 1.5), vec3(0.0));\n    }\n\n    // Draw the masses\n    drawSDF(sdBox(uv - vec2(mass1.x, 0.0), vec2(sqrt(m1))), vec3(1.0, 0.0, 0.0));\n    drawSDF(sdBox(uv - vec2(mass2.x, 0.0), vec2(sqrt(m2))), vec3(0.0, 0.0, 1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    ivec2 iFragCoord = ivec2(fragCoord);\n    if (iFrame == 0) {\n        if (iFragCoord == ivec2(0, 0)) fragColor = vec4(-3.0, 0.0, 0.0, 0.0);\n        if (iFragCoord == ivec2(1, 0)) fragColor = vec4(4.0, 0.0, 0.0, 0.0);\n    }\n\n    if (iFrame > 0) {\n        vec4 mass1 = texelFetch(iChannel0, ivec2(0, 0), 0);\n        vec4 mass2 = texelFetch(iChannel0, ivec2(1, 0), 0);\n\n        mass1.y -= ((mass1.x - (fa + l1)) * k1 + (mass1.x - (mass2.x - l2)) * k2 + u1 * mass1.y) / m1 * dt;\n        mass1.x += mass1.y * dt;\n\n        mass2.y -= ((mass2.x - (mass1.x + l2)) * k2 + (mass2.x - (fb - l3)) * k3 + u2 * mass2.y) / m2 * dt;\n        mass2.x += mass2.y * dt;\n\n        if (iFragCoord == ivec2(0, 0)) fragColor = mass1;\n        if (iFragCoord == ivec2(1, 0)) fragColor = mass2;\n    }\n\n    if (iFrame == 0 || iMouse.z > 0.0) {\n        if (iFragCoord == ivec2(0, 0)) fragColor = vec4(-3.0, 0.0, 0.0, 0.0);\n        if (iFragCoord == ivec2(1, 0)) fragColor = vec4(4.0, 0.0, 0.0, 0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fixtures\n#define fa -7.5\n#define fb 7.5\n\n// Spring lengths\n#define l1 5.0\n#define l2 5.0\n#define l3 5.0\n\n// Spring constants\n#define k1 1.0\n#define k2 3.0\n#define k3 1.0\n\n// Friction\n#define u1 0.1\n#define u2 0.1\n\n// Masses\n#define m1 1.0\n#define m2 3.0\n\n// Time step hack\n#define dt 0.05\n#define iTime (float(iFrame) * dt)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n#define drawSDF(dist) color = max(color,  smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 12.0;\n    float pix = 1.0 / iResolution.y;\n    float unit = 24.0 * pix;\n\n    vec2 st = fragCoord / iResolution.xy;\n    st.y += pix;\n    vec3 color = texture(iChannel1, st).rgb;\n\n    // Load mass data\n    vec4 mass1 = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec4 mass2 = texelFetch(iChannel0, ivec2(1, 0), 0);\n\n    // Draw the current motion segments\n    drawSDF(sdLine(uv, vec2(mass1.x - mass1.y * dt, -pix), vec2(mass1.x, 0.0)));\n    drawSDF(sdLine(uv, vec2(mass2.x - mass2.y * dt, -pix), vec2(mass2.x, 0.0)));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}