{
    "Shader": {
        "info": {
            "date": "1570851417",
            "description": "In this shader I show how to un-tile a texture in 2 taps (similar to iq's https://www.shadertoy.com/view/Xtl3zf), but without explicitly calculating mips.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdVGWG",
            "likes": 20,
            "name": "Fix mip texture tiling 2 taps",
            "published": 3,
            "tags": [
                "tiling",
                "texturing",
                "bombing"
            ],
            "usePreview": 0,
            "username": "Suslik",
            "viewed": 2206
        },
        "renderpass": [
            {
                "code": "const float layersCount = 5.0;\nconst float pi = 3.141592f;\n\n\nstruct InterpNodes2\n{\n    vec2 seeds;\n    vec2 weights;\n};\nInterpNodes2 GetNoiseInterpNodes(float smoothNoise)\n{\n    vec2 globalPhases = vec2(smoothNoise * 0.5) + vec2(0.5, 0.0);\n    vec2 phases = fract(globalPhases);\n    vec2 seeds = floor(globalPhases) * 2.0 + vec2(0.0, 1.0);\n    vec2 weights = min(phases, vec2(1.0f) - phases) * 2.0;\n    return InterpNodes2(seeds, weights);\n}\n\n\nvec3 hash33( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p)*43758.5453123);\n}\n\nvec4 GetTextureSample(vec2 pos, float freq, float seed)\n{\n    vec3 hash = hash33(vec3(seed, 0.0, 0.0));\n    float ang = hash.x * 2.0 * pi;\n    mat2 rotation = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    \n    vec2 uv = rotation * pos * freq + hash.yz;\n    return texture(iChannel0, uv);\n}\n\n//Qizhi Yu, Fabrice Neyret, Eric Bruneton, and Nicolas Holzschuch. 2011. \n//Lagrangian Texture Advection: Preserving Both Spectrum and Velocity Field.\n//IEEE Transactions on Visualization and Computer Graphics 17, 11 (2011), 1612â€“1623\nvec4 PreserveVariance(vec4 linearColor, vec4 meanColor, float moment2)\n{\n    return (linearColor - meanColor) / sqrt(moment2) + meanColor;\n}\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 normCoord = fragCoord / iResolution.xy;\n    ivec2 quadIndex2 = ivec2(normCoord * 2.0);\n    int quadIndex = quadIndex2.x + quadIndex2.y * 2;\n    \n    vec2 quadCoord = mod(fragCoord, iResolution.xy * 0.5) / (iResolution.x * 0.5);\n    \n    float texFreq = 10.0;\n    float tileFreq = 20.0;\n    \n    vec2 centralDist = abs(fragCoord.xy - iResolution.xy * 0.5);\n    if(centralDist.x < 2.0 || centralDist.y < 2.0)\n    {\n        fragColor = vec4(1.0);\n        return;\n    }\n    \n    float smoothNoise = texture(iChannel1, quadCoord * 0.05f).r;\n\n    fragColor = vec4(0.0);\n    if(quadIndex == 0)\n    {\n        fragColor = GetTextureSample(quadCoord, texFreq, 0.0);\n    }\n    if(quadIndex == 1) //basic version\n    {\n        InterpNodes2 interpNodes = GetNoiseInterpNodes(smoothNoise * layersCount);\n        float moment2 = 0.0;\n        for(int i = 0; i < 2; i++)\n        {\n            float weight = interpNodes.weights[i];\n            moment2 += weight * weight;\n            fragColor += GetTextureSample(quadCoord, texFreq, interpNodes.seeds[i]) * weight;\n        }\n        \n        //uncomment for variance preservation\n        //fragColor = PreserveVariance(fragColor, textureLod(iChannel0, vec2(0.0), 10.0), moment2);\n    }\n    float dstSeed = floor(fract(iTime * 0.1f) * (layersCount + 1.0));\n    if(quadIndex == 3) //breakdown showing individual seeds\n    {\n        InterpNodes2 interpNodes = GetNoiseInterpNodes(smoothNoise * layersCount);\n        for(int i = 0; i < 2; i++)\n        {\n            float weight = interpNodes.weights[i];\n            float seedOpacity = clamp(1.0f - abs(dstSeed - interpNodes.seeds[i]), 0.0, 1.0);\n            fragColor += GetTextureSample(quadCoord, texFreq, interpNodes.seeds[i]) * weight * seedOpacity;\n        }\n    }\n    if(quadIndex == 2) //breakdown showing seeds together\n    {\n        InterpNodes2 interpNodes = GetNoiseInterpNodes(smoothNoise * layersCount);\n        for(int i = 0; i < 2; i++)\n        {\n            float weight = interpNodes.weights[i];\n\t\t\tvec4 seedColor = vec4(hsv2rgb(vec3(interpNodes.seeds[i] / (layersCount + 1.0), 1.0, 0.8)), 1.0);\n            float seedOpacity = clamp(1.0f + (dstSeed - interpNodes.seeds[i]), 0.0, 1.0);\n            vec4 sampleColor = mix(GetTextureSample(quadCoord, texFreq, interpNodes.seeds[i]), seedColor, 0.5);\n            //vec4 sampleColor = GetTextureSample(quadCoord, texFreq, interpNodes.seeds[i]) * seedColor;\n            fragColor += sampleColor * weight * seedOpacity;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}