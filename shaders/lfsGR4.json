{
    "Shader": {
        "info": {
            "date": "1702897459",
            "description": "Not as pretty as I wanted to, maybe because of the realistic feeling, but still a bit creept at least",
            "flags": 0,
            "hasliked": 0,
            "id": "lfsGR4",
            "likes": 6,
            "name": "Creepy roots",
            "published": 3,
            "tags": [
                "sdf",
                "roots"
            ],
            "usePreview": 1,
            "username": "rcargou",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "#define AA 1   // make this 2 or 3 for antialiasing\n#define ROT mat3(cos(.7), 0., sin(.7), 0., 1., 0., -sin(.7), 0., cos(.7))\n#define ROT2 ROT*mat3(1., 0., 0., 0., cos(7.), sin(.7), 0., -sin(.7), cos(.7))\n#define ROT3 ROT2*mat3(cos(.7), sin(.7), 0., -sin(.7), cos(.7), 0., 0., 0., 1.)\n\nvec3 getcol2(float i) {\n//return vec3(0.573,0.135,0.663)/2.;\n\nreturn vec3(.5, .75, .4) * 1.;\nreturn 1.*pal( i, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n}\nvec3 getcol(float i) {\n//return vec3(0.573,0.135,0.663)/2.;\n\nreturn vec3(.2, .75, .8) * 1.;\nreturn 1.*pal( i, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n}\nfloat gyronoise(vec3 p){\n    return abs(dot(cos(p), sin(p.zxy)));\n}\n\nfloat ls() {\n//return .6;\nfloat a = .5 + cos(iTime) * .5;\nreturn a; \n}\nfloat ls2() {\nreturn 1.;\n    return 1.-ls();\n}\n\nfloat mat = 0.;\nfloat fbm(vec3 p){\n\n    float A = 1.;\n    float n = 0.;\n    float k = .6;\n    float f = 1.;\n    \n    // Nimitz gyroid noise: https://www.shadertoy.com/view/3l23Rh\n    for (int i=0; i<5; i++){\n        p += .1*sin(p.xzy*.75*f+iTime/4.);\n        n += gyronoise(p)*A-k; \n        A *= .7;\n        p *= 1.95*ROT3;\n        k -= .15;\n        f *= 3.;\n    }\n    return n*1.2;\n}\n//------------------------------------------------------------------\n\n#define ZERO (min(iFrame,0))\n\n//------------------------------------------------------------------\nfloat oui = 0.;\nfloat oui2 = 0.;\nfloat mapLight2(in vec3 p, out float mat, bool ll) {\n    vec3 pc = p;\n    pc.z+=iTime * 10.;\n    pc.z = mod(pc.z, 8.) - 4.;\n    //pc.xy *= rotate2d(.5 + iTime);\n    pc.y -=2.;\n    pc.x = abs(pc.x);\n     pc.x -=4.;\n     \n/*\n    pc = abs(pc);\n    pc.y+=1.;\n    pc = abs(pc);\n    pc.x+=1.;\n    pc.xy *= rotate2d(1.);\n    */\n   // pc = abs(pc);\n    \n    //pc.y*=2.;\n    //pc.x-=2.;\n    // pc.z /=4.5;\n    float sd = length(pc.xy) - .1;\n    float ss2 = length(pc) - .1;// * (ls2());\n    mat = 4.;\n    if (sd < ss2) {\n        mat = 3.;\n    }\n    if (ll)\n        return ss2;\n    return min( ss2, ss2);\n}\n\nfloat mapPillars(in vec3 p, out float mat, out float ll) {\n\n    vec3 pc = p;\n    float h = -.1;\n    float r = 5.;\n    float tt = hash(floor(p.x/5.) * 5.);\n  \n    p.x=mod(p.x, 5.) - 2.5;\n//    p.y+=cos(iTime);\n    float id = hash(floor(p.z/r) * r);\n    id += tt * 3.14;\n    ll = .5+sin(iTime + id * 3.14) * .5;\n //     p.xy *=rotate2d(iTime + id * 3.14);\n  \n    //p.z+=iTime * 2.;\n//    p.y = mod(p.x, 5.)-2.5;\n    oui = id;\n    p.z = mod(p.z, r) - r/2.;\n\n    //p.y += 2.5;\n   // p.y = mod(p.y, 5.) - 2.5;\n  //  p.x = abs(p.x);\n    \n//    p.x -= 2. + sin(id);\n  \n    p.y+=.94;\n\n    float sd = sdCylinder(p + vec3(.0, 1.2+ h, .0), vec2(.01, 1.1));\n    //p.y+=texture(iChannel0, p.xz / 20.).x / 6.;\n    float ss =length(p + vec3(.0, h, .0)) - .6  * ll;\n    mat = 4.;\n    if (sd < ss) {\n    //    mat = 5.;\n    }\n\n    pc.z = mod(pc.z, 8.) - 4.;\n    pc = abs(pc);\n    pc.xy *= rotate2d(.5);\n    pc = abs(pc);\n    pc.x+=1.;\n    pc.xy *= rotate2d(.5);\n   // pc = abs(pc);\n    \n    //pc.y*=2.;\n    pc.y -=4.;\n    //pc.x-=2.;\n    // pc.z /=4.5;\n    float ss2 = length(pc) - .5 * (ll);\n    return min(ss, ss);\n}\n\n\n\nfloat mapRings(in vec3 p) {\n     float r = 4.;\n     p/=2.;\n     float id = hash(floor(p.z / r) * r) * 2.;\n     vec3 p3 = p;\n     p3.x = abs(-p3.x);\n     p3.x += cos(p3.z / 2.) * 1.;\n     p3.x -= 2.;\n     p3.z = mod(p3.z, 20.)-10.;\n     p3.z /=4.5;\n     p.x += id / 2.;\n      p.y+= cos(p.z  * 11. + id * 23.) / 12.;\n    p.z+=iTime / 5.;\n     p.z = mod(p.z, r) - r/2.;\n     p.xz *=rotate2d(id / 15.);\n     vec3 p2 = p;\n     p2.x+=.5;\n     p2.x = mod(p2.x, 5.) - 2.5;\n     p2.y += 2.7;\n     p2.xz *= rotate2d(.4);\n  \n    float t1 = sdTorus(p.xzy, vec2(id/2.+1.5, .25+id / 20.));\n     float t2 = sdTorus(p2.xzy + vec3(.0, .0,.0), vec2(2.9 + id /4., .1));\n     float t3 = sdTorus(p3.yxz, vec2(2., .3));\n     float a = atan(p.y, p.x);\n     float off = 0.;\n     //off += sin(id-iTime*2.)*sin(a*20. + iTime * 5. * (1.+id)) / 20.;\n      off +=texture(iChannel0, .1*vec2(a, length(p.xy) )).r / 10.;\n     t1 += off;\n     t2 += off / 2.;// + b / 2.;\n    // p.y -= 1.;\n     p.y += 1.5;\n//     p.x-=.01;\n     float c =length(p) - .5;// sdCone(.5*p * vec3(-1., -1, 1.), vec3(.1, .1, .5));\n     //return min(t1, c);\n      return sminP(sminP(t1,t2),t3);\n}\nvec3 rmLight(vec3 ro, vec3 rd, float d, float m) {\n    float mat = 0.;\n    float t = 0.;\n    vec3 col = vec3(.0);\n    if (m > 3.)\n    return vec3(0.);\n    float ll;\n    for (int i = 0; i < 42; ++i) {\n        vec3 p = ro + rd * t;\n        float s = mapPillars(p, mat, ll);\n        float s2 = mapLight2(p, mat, true);\n        float a = 1.-step(1., s);\n        float l = length(ro - p);\n        if (t < d) {\n            col += ll * vec3(6./(s*s*s*s+.1) * .002)*getcol(oui);\n            col += ls2() * vec3(6./(s2*s2*s2*s2+.1) * .002)*getcol2(oui2);\n        }\n        t += .5;\n    }\n    return col;\n}\nfloat mapStructure(in vec3 p) {\n\n    float r= 1.;\n    float s = 1./2.;\n    p.y += 1.;\n    vec2 mp = mod(p.xz, r) - r/2.;\n    vec2 m_id = floor(p.xz / r) * r;\n    float h = hash22(m_id).x * .0;\n    \n    vec3 mp3 = vec3(mp.x, p.y, mp.y);\n    vec2 corners[4] = vec2[]( vec2(-.5, -.5), vec2(.5,-.5), vec2(-.5,.5), vec2(.5,.5) );\n    \n    for (int i = 0; i < 4; ++i) {\n    \n    }\n    h += texture(iChannel0, p.xz / 100.).r * 4.;\n    h += texture(iChannel0, p.xz / 20.).r / 2.;\n    float b1 = sdRoundBox(mp3, vec3(s, h/ 10. + .1, s), 0.);\n    float b2 = sdRoundBox(mp3 + vec3(0., h/10. + .1, 0.), vec3(s/1.5, 2.53, s/1.5), 0.);\n    return p.y - h / 10. - .1;\n    return min(b1, p.y -.2);\n}\n\nvec2 map( in vec3 pos )\n{\n    pos.y += .5;\n\n   // pos.xz = abs(pos.xz);\n    vec2 res = vec2( 1e10, 0.0 );\n    float d = 1e10;\n    float mat;\n   pos.y += sin(pos.z/2.) * .2;\n    if ((res.x = mapStructure(pos)) < .0f)\n        res.y = 1.0f;\n    /*if ( (d = mapRings(pos) ) < res.x) {\n        res.x = d;\n        res.y = 2.;\n    }*/\n    d = mapRings(pos);\n    res.x = sminP(res.x, d);\n    if ( ( d = pos.y + .75 ) < res.x)\n    {\n     //   res.x = d;\n        res.y = 3.;\n    }\n    float ll;\n    if ( (d = mapPillars(pos, mat, ll)) < res.x ) {\n        res.x = d;;\n        res.y =mat;\n    }\n    if ( (d = mapLight2(pos, mat, false)) < res.x ) {\n        res.x = d;;\n        res.y =mat;\n    }\n    return res;\n}\n\nconst float maxHei = 0.8;\n\n\n\nvec2 castRay( in vec3 ro, in vec3 rd , bool ref)\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 1.0;\n    float tmax = ref ? 5. : 40.0;\n    int num_step = ref ? 20 : 170;\n    // raymarch primitives   \n    {\n    \n        float t = tmin;\n        for( int i=0; i<num_step && t<tmax; i++ )\n        {\n            vec2 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0001*t) )\n            { \n                res = vec2(t,h.y); \n                 break;\n            }\n            t += h.x * 1.;\n        }\n    }\n    \n    return res;\n}\n\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    float tp = (maxHei-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=ZERO; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n \n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nfloat fog(vec3 ro, vec3 rd) {\n     return 0.;\n    float ret = 0.;\n    for (int i = 0; i < 4; ++i) {\n        ret += fbm(ro * 1.) *.01 * pow(1.-ro.y, 2.);//* smoothstep(-.5, .5, -rd.y);\n        ro += rd * 2.1;\n    }\n    return ret;\n}\n\nvec3 background(vec2 uv) {\n    float a = smoothstep(.0, 2.12, sin( length(uv) * 53. + 15.*iTime));\n    a = .0;\n    //return vec3(a);\n    return .4*(vec3(.02, .01, .01) + vec3(.5,.6,.3) * (a/2.+.5) * (.1*vec3(fbm(vec3(uv.x * 3.,uv.y * 3., .1*iTime)) )\n        + .05 * vec3(fbm(vec3(uv.x * 13. + iTime / 10.,uv.y * 13., .1*iTime)) ) ));\n}\nvec3 getLight(vec3 p) {\n    float u;\n    float ll;\n    float d1 = mapPillars(p, u, ll);\n    float d2 = mapLight2(p, u, true);\n    vec3 c1 = getcol2(oui2);\n   \n    vec3 c2 = getcol(oui);\n   \n    \n    return c2 * .2/(.1+d1*d1)  * ll + c1 * .2/(.1+d2*d2) * ls2();\n}\n\nvec3 render( in vec3 ro, in vec3 rd, vec2 bg )\n{ \n    vec3 col = vec3(.0f);\n    vec2 res = castRay(ro,rd, false);\n    float t = res.x;\n\tfloat m = res.y;\n    vec3 p = ro + rd * t;\n    vec3 nor = calcNormal(p);\n    vec3 ref = reflect(rd, nor);\n    vec3 albedo = 1.5*vec3(.04 + cos(p.z * 0. + iTime * 0.) / 20., \n    .3212 +  3.*sin(p.z * 10. + iTime*1.) / 20., 1.0);\n    float ao = 1.0;//calcAO(p, nor);\n    albedo =  10.*vec3(0.171,0.686,0.686) * (.0+tex3D(iChannel2, p / 10., nor).xyz);\n    float tt = res.x > 0. ? 0. : 110.;\n    float u;\n    vec3 cLight = getLight(p);\n    \n    vec3 c = rmLight(ro, rd, res.x + tt, res.y);\n    if (res.x > .0f) {\n    \n            \n        if (res.y == 3.) {\n             //res = castRay(p, ref, true);\n             p = p + ref * res.y;\n             //nor = calcNormal(p);\n             return (cLight+1.5*vec3(.1, .3,.1) * 1.*background(p.xz / 2.) +.1*albedo* (1. *vec3(res.x) / 10. + .5 ));\n        }\n    \tcol = .5*vec3(.001, .05, .002) + 2.*cLight*albedo * vec3(.9f, .5f, .5f) * max(.1f, -dot(normalize((p) - normalize(vec3(100.0f, 1000.0f, 100.0f))), \n                             nor) );\n        if (res.y == 4.) {\n            col = 10.*getcol(oui);\n        }\n    } else {\n        col = background(bg);\n    }\n    \n    col += vec3(fog(ro, rd));\n    col += c;\n    col = mix(col, background(bg), min(1., res.x  / 50.));\n   \treturn vec3(col);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = vec2(0);//iMouse.xy/iResolution.xy;\n\tfloat time = .0f; //iTime;\n\n    // camera\t\n    vec3 ro = vec3(-0.0f, 0.0f, -4.0f + 2. * iTime);//vec3( 4.6*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 4.6*sin(0.1*time + 6.0*mo.x) );\n    vec3 ta = vec3( 11., 0., 0. );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n        // ray direction\n        vec3 rd = normalize( vec3(p.xy,2.) );\n\n        // render\t\n        vec3 col = render( ro, rd, p );\n\n\t\t// gamma\n        col = pow( col * 2., vec3(.954545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 sphericalToCartesian(vec3 p) {\n    return vec3(p.x * sin(p.y) * cos(p.z),\n                p.x * sin(p.y) * sin(p.z),\n                p.x * cos(p.y));\n}\nvec3 tex3D(sampler2D t, in vec3 p, in vec3 n ){\n    \n    n = max(abs(n), 0.001);\n    n /= dot(n, vec3(1));\n\tvec3 tx = texture(t, p.yz).xyz;\n    vec3 ty = texture(t, p.zx).xyz;\n    vec3 tz = texture(t, p.xy).xyz;\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. :)\n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return (tx*tx*n.x + ty*ty*n.y + tz*tz*n.z);\n    \n}\n\nvec3 cartestianToSpherical(vec3 p) {\n    float d = length(p);\n    return vec3 ( d, acos(p.z / d), sign(p.y) * acos(p.x / length(p.xy)) );\n}\n\nvec2 hash22( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(175.1,311.7)),\n             dot(p,vec2(260.5,752.3)));\n    return fract(sin(p+455.)*18.5453);\n}\n// Smooth minimum function. Hardcoded with the smoothing value \"0.25.\"\nfloat sminP(in float a, in float b ){\n    \n    float h = clamp(2.*(b - a) + 0.5, 0.0, 1.0);\n    return (b - 0.25*h)*(1. - h) + a*h;\n    \n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n    \n}\n\nfloat sdRoundBox( in vec3 p, in vec3 b, in float r ) \n{\n    vec3 q = abs(p) - b;\n    return min(max(q.x,max(q.y,q.z)),0.0) + length(max(q,0.0)) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy - vec2(clamp(p.x, -k.z*h.x, k.z*h.x), h.x))*sign(p.y - h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat dot2(in vec3 v ) {return dot(v,v);}\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n    \n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    float x2 = dot2( pa*l2 - ba*y );\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;\n    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;\n                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\nfloat sdEquilateralTriangle(  in vec2 p )\n{\n    const float k = 1.73205;//sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\n    p.x += 2.0 - 2.0*clamp( (p.x+2.0)/2.0, 0.0, 1.0 );\n    return -length(p)*sign(p.y);\n}\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d1 = q.z-h.y;\n    h.x *= 0.866025;\n    float d2 = sdEquilateralTriangle(p.xy/h.x)*h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n// vertical\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// arbitrary orientation\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    return sign(d)*sqrt(abs(d))/baba;\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n#if 0\n// bound, not exact\nfloat sdOctahedron(vec3 p, float s ) \n{\n    p = abs(p);\n    return (p.x + p.y + p.z - s)*0.57735027;\n}\n#else\n// exacy distance\nfloat sdOctahedron(vec3 p, float s)\n{\n    p = abs(p);\n    \n    float m = p.x + p.y + p.z - s;\n    \n\tvec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    \n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n#endif\n\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length2(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length8(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n    return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}