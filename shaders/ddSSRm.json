{
    "Shader": {
        "info": {
            "date": "1670058193",
            "description": "Violent pursuit",
            "flags": 32,
            "hasliked": 0,
            "id": "ddSSRm",
            "likes": 3,
            "name": "Tracing ray",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "Lincac",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    fragColor = vec4(color, 1.0f);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926535\n\n#define MAT_LAMBERTIAN 0\n#define MAT_METALLIC 1\n#define MAT_DIELECTRIC 2\n\nvec3 GammaCorrection(vec3 c){\n\treturn pow(c, vec3(1.0 / 2.2));\n}\n\nfloat pow5(float u){\n    float m2 = u * u;\n    return m2 * m2 * u;\n}\n\nvec3 lerp(vec3 x1,vec3 x2,float t){\n    return x1 + abs(x2 - x1) * t;\n}\n\nmat3 GetTransformMatrix(vec3 normal)\n{\n    // Choose a helper vector for the cross product\n    vec3 helper = vec3(1, 0, 0);\n    if (abs(normal.x) > 0.99f)\n        helper = vec3(0, 0, 1);\n\n    // Generate vectors\n    vec3 tangent = normalize(cross(normal, helper));\n    vec3 binormal = normalize(cross(normal, tangent));\n    return mat3(tangent, binormal, normal);\n}\n\nvec3 DiffuseBRDF(vec3 albedo)\n{\n    return albedo / PI;\n}\n\n//SampleHemisphere alpha = 1\nfloat CosinSamplingPDF(float NdotL)\n{\n    return NdotL / PI;\n}\n\nvec3 FresnelSchlick(float cosTheta, vec3 F0) // 近似反射程度\n{\n    return F0 + (1.0 - F0) * pow5(1.0 - cosTheta);\n}\n\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n{\n    float a = roughness * roughness;\n    float a2 = a * a;\n    float NdotH = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH * NdotH;\n\n    float nom = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n\n    return nom / denom;\n}\n\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    float r = (roughness + 1.0);\n    float k = (r * r) / 8.0;\n\n    float nom = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\n    return nom / denom;\n}\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = abs(dot(N, V));\n    float NdotL = abs(dot(N, L));\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n\nfloat Calculatefresnel(const vec3 I, const vec3 N, const float ior) // 计算折射率和反射率\n{\n    float kr;\n    float cosi = clamp(-1., 1., dot(I, N));\n    float etai = 1., etat = ior;\n    if (cosi > 0.)\n    {\n        //std::swap(etai, etat);\n        float temp = etai;\n        etai = etat;\n        etat = temp;\n    }\n    // Compute sini using Snell's law\n    float sint = etai / etat * sqrt(max(0.f, 1. - cosi * cosi));\n    // Total internal reflection\n    if (sint >= 1.)\n    {\n        kr = 1.;\n    }\n    else\n    {\n        float cost = sqrt(max(0.f, 1. - sint * sint));\n        cosi = abs(cosi);\n        float Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost));\n        float Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost));\n        kr = (Rs * Rs + Rp * Rp) / 2.;\n    }\n    return kr;\n}\n\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, vec3 V, float roughness)\n{\n    float a = roughness * roughness;\n\n    float phi = 2.0 * PI * Xi.x;\n    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n\n    // from spherical coordinates to cartesian coordinates\n    vec3 H;\n    H.x = cos(phi) * sinTheta;\n    H.y = sin(phi) * sinTheta;\n    H.z = cosTheta;\n\n    // from tangent-space vector to world-space sample vector\n    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n    vec3 tangent = normalize(cross(up, N));\n    vec3 bitangent = cross(N, tangent);\n\n    vec3 halfVec = tangent * H.x + bitangent * H.y + N * H.z;\n    halfVec = normalize(halfVec);\n    \n    return halfVec;\n\n}\n\nfloat ImportanceSampleGGX_PDF(float NDF, float NdotH, float VdotH)\n{\n    return NDF * NdotH / (4.0 * VdotH);\n}\n\nvec3 RefractionBTDF(float D, float G, vec3 F, vec3 V, vec3 L, vec3 N, vec3 H, float etaIn, float etaOut)\n{ //Not reciprocal! be careful about direction!\n    \n    float NdotL = abs(dot(N, L));\n    float NdotV = abs(dot(N, V));\n            \n    float VdotH = abs(dot(V, H));\n    float LdotH = abs(dot(L, H));\n            \n    \n    float term1 = VdotH * LdotH / (NdotV * NdotL);\n    vec3 term2 = etaOut * etaOut * (1. - F) * G * D;\n            //term1 = 1;\n            //term2 = 1;\n    float term3 = (etaIn * VdotH + etaOut * LdotH) * (etaIn * VdotH + etaOut * LdotH) + 0.001f;\n            //term3 = 1;\n    vec3 refractionBrdf = term1 * term2 / term3;\n    \n    return refractionBrdf;\n} \n\nvec3 SpecularBRDF(float D, float G, vec3 F, vec3 V, vec3 L, vec3 N)\n{        \n    float NdotL = abs(dot(N, L));\n    float NdotV = abs(dot(N, V));\n            \n    //specualr\n    //Microfacet specular = D * G * F / (4 * NoL * NoV)\n    vec3 nominator = D * G * F;\n    float denominator = 4.0 * NdotV * NdotL + 0.001;\n    vec3 specularBrdf = nominator / denominator;\n    \n    return specularBrdf;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define INF 114514.0\n\nconst float c_pi = 3.14159265359f;\nconst float c_twopi = 2.0f * c_pi;\n\nuint GetUintCore(inout uint u, inout uint v){\n\tv = uint(36969) * (v & uint(65535)) + (v >> 16);\n\tu = uint(18000) * (u & uint(65535)) + (u >> 16);\n\treturn (v << 16) + u;\n}\nfloat GetUniformCore(inout uint u, inout uint v){\n\tuint z = GetUintCore(u, v);\n\t\n\treturn float(z) / float(uint(4294967295));\n}\nfloat GetUniform(){\n    uint m_u = uint(521288629);\n    uint m_v = uint(362436069);\n\treturn GetUniformCore(m_u, m_v);\n}\nfloat rand(){\n\treturn GetUniform();\n}\n\nvec3 SampleHemisphere(vec3 normal, float alpha)\n{\n    // Sample the hemisphere, where alpha determines the kind of the sampling\n    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));\n    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);\n    float phi = 2.0 * PI * rand();\n    vec3 tangentSpaceDir = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n\n    // Transform direction to be centered around whatever noraml we need\n    return tangentSpaceDir * GetTransformMatrix(normal);\n}\n\nvec3 hdrColor(vec3 rd){\n    return texture(iChannel1,rd).rgb;\n}\n\nstruct Ray{\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Material {\n    vec3 albedo;\n    float metallic;\n    float roughness;\n    float specular;\n    float specTrans;\n    float IOR;\n    vec3 transColor;\n    vec3 emission;\n};\n\nstruct Sphere{\n    float radius;\n    vec3 position;\n    \n    Material material;\n}sphere;\n\nstruct Hit{\n    bool is_hit;\n\n    float t;\n    vec3 position;\n    vec3 normal;\n    bool front;\n    \n    Material material;\n};\n\nbool HitSphere(Ray ray,inout Hit hit){\n    vec3 oc = ray.origin - sphere.position;\n\t\n\tfloat a = dot(ray.direction, ray.direction);\n\tfloat b = 2.0 * dot(oc, ray.direction);\n\tfloat c = dot(oc, oc) - sphere.radius * sphere.radius;\n\n\tfloat delta = b * b - 4. * a * c;\n\n    if(delta > 0.){\n        float temp = (-b - sqrt(delta)) / (2.0 * a);  \n        if(temp > 0. && temp < hit.t){\n            hit.is_hit = true;\n            \n            hit.t = temp;\n            hit.position = ray.origin + temp * ray.direction;\n            hit.normal = normalize((hit.position - sphere.position) / sphere.radius);\n            hit.front = dot(hit.normal,ray.direction) > 0. ? false : true;\n            \n            hit.material = sphere.material;\n            \n            return true;\n        }\n        temp = (-b + sqrt(delta)) / (2.0 * a);  \n        if(temp > 0. && temp < hit.t){\n            hit.is_hit = true;\n            \n            hit.t = temp;\n            hit.position = ray.origin + temp * ray.direction;\n            hit.normal = normalize((hit.position - sphere.position) / sphere.radius);\n            hit.front = dot(hit.normal,ray.direction) > 0. ? false : true;\n            \n            hit.material = sphere.material;\n            \n            return true;\n        }\n    }\n    return false;\n}\n\nvec3 raymarch(Ray ray,in Hit hit){\n    vec3 result = vec3(0);\n    vec3 throughput = vec3(1);\n    \n    for(int i=0;i<4;i++){\n        float roulette = rand();\n        float blender = rand();//used to blend BSDF and BRDF\n        if(blender < 1.0 - hit.material.specTrans){ // just BRDF          \n        }\n        else{ // BSDF\n            vec3 N = hit.front ? hit.normal : -hit.normal;\n            vec3 bias = N * 0.001;\n            \n            float etai = 1.0;\n            float etat = hit.material.IOR;\n            \n            vec3 V = normalize(-ray.direction);\n            vec3 H = ImportanceSampleGGX(vec2(rand(),rand()),N,V,hit.material.roughness);\n            \n            vec3 F0 = vec3(0.08);\n            F0 = F0 * hit.material.specular;\n            vec3 F = FresnelSchlick(max(dot(H, V), 0.0), F0);\n            \n            float kr = Calculatefresnel(ray.direction, hit.normal, etat);\n            float specularRoatio = kr;\n            float refractionRatio = 1.0 - kr;     \n            \n            vec3 L;\n            if (roulette <= specularRoatio)\n            {\n                ray.origin = hit.position + bias;\n                L = reflect(ray.direction, H);\n                ray.direction = L;\n            }\n            else\n            {\n                float eta = hit.front ? etai / etat : etat / etai;\n                L = normalize(refract(ray.direction, H, eta));\n                ray.origin = hit.position - bias;\n                ray.direction = L;\n                if (!hit.front)\n                {\n                    vec3 temp = L;\n                    L = V;\n                    V = temp;\n                    N = -N;\n                    H = -H;\n                }\n            }\n            float NdotL = abs(dot(N, L));\n            float NdotV = abs(dot(N, V));\n            \n            float NdotH = abs(dot(N, H));\n            float VdotH = abs(dot(V, H));\n            float LdotH = abs(dot(L, H));  \n            \n            float NDF = DistributionGGX(N, H, hit.material.roughness);\n            float G = GeometrySmith(N, V, L, hit.material.roughness);\n            \n             //specualr\n            vec3 specularBrdf = SpecularBRDF(NDF, G, F, V, L, N);\n            float speccualrPdf = ImportanceSampleGGX_PDF(NDF, NdotH, VdotH);\n            \n            //refraction\n            float etaOut = etat;\n            float etaIn = etai;\n            vec3 refractionBtdf = RefractionBTDF(NDF, G, F, V, L, N, H, etaIn, etaOut);\n            float refractionPdf = ImportanceSampleGGX_PDF(NDF, NdotH, VdotH);\n            \n            //BSDF = BRDF + BTDF\n            vec3 totalBrdf = (specularBrdf + refractionBtdf * hit.material.transColor) * NdotL;\n            float totalPdf = specularRoatio * speccualrPdf + refractionRatio * refractionPdf;\n            if(totalPdf < 0.0) break;\n            \n            throughput *= totalBrdf / totalPdf;\n            \n            vec3 Le = hit.material.emission;\n            result += Le * throughput;\n            \n            hit.is_hit = false;\n            hit.t = INF;\n            HitSphere(ray,hit);\n            if(!hit.is_hit){\n                return hdrColor(ray.direction) * result;\n            }\n        }\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    Material material;\n    material.emission = vec3(0);          \n    material.albedo = vec3(1, 0.73, 0.25);\n    material.metallic = 0.0;\n    material.specular = 0.0;\n    material.specTrans = 1.0;\n    material.roughness = 0.0;\n    material.IOR = 1.5;\n    material.transColor = material.albedo;\n    \n    sphere.radius = 1.;\n    sphere.position = vec3(0);\n    sphere.material = material;\n    \n    vec2 uv = ((fragCoord + vec2(rand(),rand())) - .5 * iResolution.xy) / iResolution.y;\n    Ray ray;\n    ray.origin = vec3(0,0,5);\n    ray.direction = normalize(vec3(uv,ray.origin.z - 1.) - ray.origin);\n    \n    Hit hit;\n    hit.is_hit = false;\n    hit.t = INF;\n    HitSphere(ray,hit);\n    if(hit.is_hit){\n        vec3 col = raymarch(ray,hit);\n        col = GammaCorrection(col);\n\n        // average the frames together\n        vec3 lastFrameColor = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n        col = mix(lastFrameColor, col, 1.0f / float(iFrame+1));\n\n        // Output to screen\n        fragColor = vec4(col,1.0);\n    }else{\n        fragColor = vec4(hdrColor(ray.direction),1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}