{
    "Shader": {
        "info": {
            "date": "1719526998",
            "description": "A simple \"click to toggle color\" shader.\n\nclick on the screen to make things happen.",
            "flags": 32,
            "hasliked": 0,
            "id": "lXdXDB",
            "likes": 1,
            "name": "NotSoGreeeen - Color toggle",
            "published": 3,
            "tags": [
                "color",
                "interesting",
                "toggle"
            ],
            "usePreview": 0,
            "username": "NotSoGreeeen",
            "viewed": 52
        },
        "renderpass": [
            {
                "code": "/*\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to http://unlicense.org/\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Don't go below 1\n#define brushSize 1.\n#define mouseClicked (iMouse.z > 0. && iMouse.w > 0.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n\n    //Von Neumann uv\n    vec2[5] uv;\n    uv[0] = (fragCoord + vec2(0., 1.)) /  iResolution.xy;\n    uv[1] = (fragCoord + vec2(-1., 0.)) / iResolution.xy;\n    uv[2] = fragCoord          /          iResolution.xy;\n    uv[3] = (fragCoord + vec2(1., 0.)) /  iResolution.xy;\n    uv[4] = (fragCoord + vec2(0., -1.)) / iResolution.xy;\n    \n    //Von neumann textures\n    vec4[5] tex;\n    tex[0] = texture(iChannel0, uv[0]);\n    tex[1] = texture(iChannel0, uv[1]);\n    tex[2] = texture(iChannel0, uv[2]);\n    tex[3] = texture(iChannel0, uv[3]);\n    tex[4] = texture(iChannel0, uv[4]);\n    \n    //neighborhood values:\n    //[-][0][-]\n    //[1][2][3]\n    //[-][4][-]\n    \n    //states:\n    //on - 1.\n    //buffers(9)\n    //off - 0.\n    \n    //Get data from the neighborhood\n    int on = 0;\n    int trans = 0;\n    int off = 0;\n    for (int i = 0; i < 5; i++) {\n        if (i == 2) {\n            continue;\n        } \n        else if (tex[i].xyz == vec3(1.)) {\n            on++;\n        }\n        else if (tex[i].xyz == vec3(.9)) {\n            trans++;\n        }\n        else if (tex[i].xyz == vec3(0.)) {\n            off++;\n        }\n    }\n    \n    //off to on\n    if (tex[2].xyz == vec3(0.)) {\n        if (on >= 1 && trans < 21) {\n            tex[2].xyz = vec3(1.);\n        }\n    }\n    //on to buffer1\n    else if (tex[2].xyz == vec3(1.)) {\n        if (trans >= 1) {\n            tex[2].xyz = vec3(.9);\n        }\n    }\n    //buffer1 to buffer2\n    else if (tex[2].xyz == vec3(.9)) {\n        tex[2].xyz = vec3(.8);\n    }\n    //buffer2 to buffer3\n    else if (tex[2].xyz == vec3(.8)) {\n        tex[2].xyz = vec3(.7);\n    }\n    //buffer3 to buffer4\n    else if (tex[2].xyz == vec3(.7)) {\n        tex[2].xyz = vec3(.6);\n    }\n    //buffer4 to buffer5\n    else if (tex[2].xyz == vec3(.6)) {\n        tex[2].xyz = vec3(.5);\n    }\n    //buffer5 to buffer6\n    else if (tex[2].xyz == vec3(.5)) {\n        tex[2].xyz = vec3(.4);\n    }\n    //buffer6 to buffer7\n    else if (tex[2].xyz == vec3(.4)) {\n        tex[2].xyz = vec3(.3);\n    }\n    //buffer7 to buffer8\n    else if (tex[2].xyz == vec3(.3)) {\n        tex[2].xyz = vec3(.2);\n    }\n    //buffer8 to buffer9\n    else if (tex[2].xyz == vec3(.2)) {\n        tex[2].xyz = vec3(.1);\n    }\n    //buffer9 to off\n    else if (tex[2].xyz == vec3(.1)) {\n        tex[2].xyz = vec3(0.);\n    }\n    \n    //Make pixels\n    if(distance(iMouse.xy, fragCoord) < brushSize && mouseClicked) {\n        if (tex[2].xyz == vec3(0.)) {\n             tex[2].xyz = vec3(1.);\n        }\n        else if (tex[2].xyz == vec3(1.)) {\n            tex[2].xyz = vec3(.9);\n        } \n    }\n    \n    //Output\n    fragColor = vec4(tex[2]);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}