{
    "Shader": {
        "info": {
            "date": "1695229646",
            "description": "Approximations for luminous efficiency function for scotopic (i.e. produced by rod cells, under low-light conditions) vision.",
            "flags": 0,
            "hasliked": 0,
            "id": "dsccRj",
            "likes": 4,
            "name": "Scotopic approx.",
            "published": 3,
            "tags": [
                "spectrum",
                "wavelength",
                "cie",
                "scotopic"
            ],
            "usePreview": 1,
            "username": "FordPerfect",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Couple of functions related to scotopic vision\n// (see https://en.wikipedia.org/wiki/Scotopic_vision).\n// Unlike color matching functions for photopic vision\n// (e.g. https://www.shadertoy.com/view/msXyDH),\n// there doesn't seem to be many readily available\n// on Shadertoy, as of this writing.\n\n// The provided functions are:\n//   wavelength2scotopic - for when you have spectral data.\n//   xyz2scotopic - for when you don't, and have to make do with XYZ/RGB.\n\n// WARNING: the actual displayed image is highly fake, due to liberties\n// taken. The functions themselves should be decent enough, though.\n\n//==============================================================================\n// RGB<->XYZ conversions, from https://en.wikipedia.org/wiki/SRGB\n// Operate on linear RGB.\n\nvec3 xyz2rgb(vec3 xyz)\n{\n    return mat3( // WARNING: column-major.\n        +3.2404542, -0.9692660, +0.0556434,\n        -1.5371385, +1.8760108, -0.2040259,\n        -0.4985314, +0.0415560, +1.0572252)*xyz;\n}\n\nvec3 rgb2xyz(vec3 rgb)\n{\n    return mat3( // WARNING: column-major.\n        0.4124, 0.2126, 0.0193,\n        0.3576, 0.7152, 0.1192,\n        0.1805, 0.0722, 0.9505)*rgb;\n}\n\n//==============================================================================\n// sRGB<->linear conversions, from https://en.wikipedia.org/wiki/SRGB\n// NOTE: in floating point (1.055-1.0)!=0.055, but whatever.\n\nvec3 linear2srgb(vec3 rgb)\n{\n    return mix(12.92*rgb,1.055*pow(rgb,vec3(1.0/2.4))-0.055,step(0.0031308,rgb));\n}\n\nvec3 srgb2linear(vec3 rgb)\n{\n    return mix(rgb/12.92,pow((rgb+0.055)/1.055,vec3(2.4)),step(0.04045,rgb));\n}\n\n//==============================================================================\n// Approximation of scotopic luminous efficiency function,\n// CIE (1951) Scotopic V'(lambda) (see http://www.cvrl.org/lumindex.htm)\n// Input is in nanometers.\n// Max. abs. error: ~0.043.\n\nfloat wavelength2scotopic(float lambda)\n{\n    float t=lambda-507.0;\n    //t*=mix(0.01692040668,0.01919261909,step(0.0,t)); // <-- old version, error ~0.061.\n    t*=mix(0.01650,0.01919,step(0.0,t));\n    return exp(-t*t);\n}\n\n//==============================================================================\n// Scotopic luminous flux approximation from XYZ,\n// see http://integral.physics.muni.cz/rawtran/.\n\nfloat xyz2scotopic(vec3 xyz) {return max(0.0,dot(xyz,vec3(-0.80498,1.18214,0.36169)));}\n\n//==============================================================================\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec3 rgb=texture(iChannel0,uv).rgb;\n    \n    rgb=srgb2linear(rgb); // Do we need this?\n    vec3 xyz=rgb2xyz(rgb);\n    float v=xyz2scotopic(xyz);\n    float a=0.25*iTime;\n    // Mesopic weighting factor. In reality it depends\n    // on luminance (possibly both global and local) of the scene.\n    float t=smoothstep(0.0,1.0,0.5+dot(2.0*uv-1.0,vec2(cos(a),sin(a))));\n    // NOTE: the \"night color\" below, assigned to\n    // the scotopic component is chosen pretty arbitrarily.\n    // Charitably put, it tries to approximate\n    // the Purkinje effect (https://en.wikipedia.org/wiki/Purkinje_effect),\n    // but really, it is just a random fake, chosen to look okay-ish.\n    // Better designed models of Purkinje effect do exist, though.\n    // This also doesn't deal with the *rest* of the\n    // tone-mapping, at all.\n    vec3 night=vec3(0.375,0.75,1.0);\n    rgb=mix(v*night,rgb,t);\n    rgb=linear2srgb(rgb); // Shadertoy seems to treat output as sRGB.\n    if(false) // Render plot.\n    {\n        float lambda=mix(350.0,750.0,uv.x);\n        float d=wavelength2scotopic(lambda)-2.0*uv.y;\n        rgb+=exp(-1e5*d*d);\n    }\n    fragColor=vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}