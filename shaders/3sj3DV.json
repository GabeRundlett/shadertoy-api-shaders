{
    "Shader": {
        "info": {
            "date": "1550035029",
            "description": "2D Matrix Rotation Triangles - Art of Shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "3sj3DV",
            "likes": 14,
            "name": "2D Matrix Rotation Triangles",
            "published": 3,
            "tags": [
                "triangles",
                "shapes",
                "rotation",
                "polygons",
                "2dmatrixrotationtriangles",
                "artofshaders",
                "artofshaders",
                "artofshaders"
            ],
            "usePreview": 0,
            "username": "synergyseeker1",
            "viewed": 1183
        },
        "renderpass": [
            {
                "code": "const float TWO_PI = 6.28;\nconst float PI = 3.14;\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),sin(_angle),cos(_angle));\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,0.0,_scale.y);\n}\n\n\nvec4 drawShape(vec2 uv, vec2 position, int sides,float size, vec3 color) {\n\tuv -= vec2(position.x,position.y);\n    // Angle from current pixel\n  \tfloat a = atan(uv.x,uv.y)+PI;\n    // radius from current pixel\n \tfloat r = 2.0*PI/float(sides);\n  \t// modulate the distance\n  \tfloat d = cos(floor(.5+a/r)*r-a)*length(uv);\n\t//define the edges, and make smooth\n  \tvec4 shape = vec4(smoothstep(size+.01,size,d));\n  \t//color the shape\n    shape.rgb*=color;\n\treturn shape;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normailze and adjsut for ratio\n    vec2 res = iResolution.xy,\n    uv = (fragCoord*2.0-res ) / res.y;\n    \n    // rotate the space\n    //uv = rotate2d(radians(180.0) ) * uv;\n    uv = rotate2d(iTime) * uv;\n    \n    //background color\n   \tvec4 background = vec4(0.0);\n  \t\n    // draw shapes\n    float pathRadius = 1.0;\n    float numberToPlot = 30.0;\n    vec4 shapes = vec4(0.0);\n    \n    for(float i=0.0;i<TWO_PI;i+=TWO_PI/numberToPlot){\n    \tuv = rotate2d(iTime*.1) * uv+ i*.1;\n        uv = scale( vec2(sin(iTime - cos(i*iTime*.2))*.1 + 1.)) * uv;\n    \tvec3 color = vec3(.3,.5*sin(i),.9);\n  \t\tint sides = 3;\n        float size = .05;\n    \tvec2 position = vec2(cos(i+iTime*.5),sin(i+iTime));\n        position*=pathRadius * sin(iTime);\n    \tvec4 shape = drawShape(uv,position,sides,size,color);    \n    \t\n    \tshapes += shape;\n    }  \n    \n    fragColor = mix(background, shapes, shapes.a);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}