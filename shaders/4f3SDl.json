{
    "Shader": {
        "info": {
            "date": "1714577622",
            "description": "Sun and plane",
            "flags": 0,
            "hasliked": 0,
            "id": "4f3SDl",
            "likes": 1,
            "name": "MySun",
            "published": 3,
            "tags": [
                "sun",
                "synthwave"
            ],
            "usePreview": 0,
            "username": "TheKraai",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318\n\nfloat zero = 0.;\nfloat nan() { return zero / zero; }\n\nfloat disk(vec2 uv, vec2 p, float r) {\n  if (distance(uv, p) < r) {\n    return 1.;\n  } else {\n    return 0.;\n  }\n}\n\nfloat horizon(vec2 uv, float h, float r) {\n  if (abs(uv.y - h) < r) {\n    return 1.;\n  } else {\n    return 0.;\n  }\n}\n\nfloat upper(vec2 uv, float h) {\n  if (uv.y > h) {\n    return 1.;\n  } else {\n    return 0.;\n  }\n}\n\nfloat grid(vec2 uv, float x, float y, float r) {\n  if (mod(uv.x, x) < r || mod(uv.y, y) < r) {\n    return 1.;\n  } else {\n    return 0.;\n  }\n}\n\nvec2 planar(vec2 uv, float h) {\n  if (uv.y > 0.) return vec2(nan());\n  return vec2(uv.x, tan(uv.y * TAU * .5 + TAU / 4.));\n}\n\nvec2 toplane(vec2 uv) {\n  return vec2(uv.x, atan(uv.y) - TAU * .25);\n}\n\nfloat halfline(vec2 uv, vec2 p, float a, float r) {\n  vec2 rel = uv - p;\n  if (abs(atan(rel.y, rel.x) - a) < r / distance(uv, p)) {\n    return 1.;\n  } else {\n    return 0.;\n  }\n}\n\nfloat smoothstepped(float x, int k) {\n  for (int i = 0; i < k; i++) {\n    x = smoothstep(0., 1., x);\n  }\n  return x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1 on shortest dimension)\n    vec2 uv = (fragCoord - iResolution.xy / 2.)/min(iResolution.x, iResolution.y);\n\n\n\n\n    // SUN\n\n    float sunmask = upper(uv, 0.);\n    for (int i = 0; i < 20; i++) sunmask += horizon(uv, -pow((float(i) + mod(iTime * 1., 1.))/20., 2.), 0.003);\n    sunmask = clamp(sunmask, 0., 1.);\n\n    vec3 suncolor = vec3(226, 135, 67) / 256.;\n    \n    vec4 sun = disk(uv, vec2(0., -iTime * 0.0), 0.3) * sunmask * vec4(suncolor, 1.);\n    \n    if (uv.y < 0.) {\n      sun *= 1. - 4. * uv.y;\n    }\n    \n    \n    \n    \n    // PLANE\n    \n    vec2 puv = planar(uv, 1.);\n    float floor = 0.;\n    for (int i = 0; i < 800; i++) {\n      float h = float(i) * .5;\n      float ph = toplane(vec2(0., h)).y;\n      //float intensity = 10. / float(i + 1);\n      floor = max(floor, horizon(uv, ph, .001));// * intensity);\n    }\n    \n    int nlines = 40;\n    for (int i = -nlines; i < nlines; i++) {\n      float a = atan((float(i) + .5) / 3.) - TAU / 4.;\n      //float a = -x * TAU / 2.;\n      floor += halfline(uv, vec2(0.), a, 0.001);\n    }\n\n    floor = min(1., floor);\n    floor *= abs(uv.y * 4.);\n    //floor *= vec4(1., 0., 1., 1.);\n\n    // DRAW\n\n    fragColor = sun + floor * vec4(1., 0., 1., 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}