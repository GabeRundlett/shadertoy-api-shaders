{
    "Shader": {
        "info": {
            "date": "1714734090",
            "description": "Just an Audi Logo... you can change the view with the mouse...",
            "flags": 0,
            "hasliked": 0,
            "id": "lfKSRR",
            "likes": 0,
            "name": "Audi Rings ",
            "published": 3,
            "tags": [
                "logo",
                "car",
                "audi",
                "automotive"
            ],
            "usePreview": 0,
            "username": "Kjuiss83",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "//Copyright Christian Hametner aka Kjuiss\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n\n    // Time variable\n    float time = iTime;\n    \n    // Read audio data\n    vec2 audio = texture(iChannel0, vec2(time * 0.4, 0.0)).xy;\n    float audioLevel = (audio.x + audio.y) * 1.5;\n    float audioResponse = pow(audioLevel, 2.0) * 5.0;\n\n    // Animation parameters\n    float baseSpeed = 2.0; // Common speed factor\n    float innerAmplitude = 0.9; // Amplitude for inner tori\n    float outerAmplitude = 2.7; // Amplitude for outer tori\n\n    // Calculate position offsets based on time\n    float innerOffset = innerAmplitude * sin(time * baseSpeed);\n    float outerOffset = outerAmplitude * sin(time * baseSpeed);\n\n    // Camera setup\n    float zoom = 7.0 + 5.3 * audioResponse;\n    vec3 camPos = vec3(\n        zoom * sin(iMouse.y / iResolution.y * 3.14) * sin(iMouse.x / iResolution.x * 3.14 * 2.0),\n        zoom * cos(iMouse.y / iResolution.y * 3.14),\n        zoom * sin(iMouse.y / iResolution.y * 3.14) * cos(iMouse.x / iResolution.x * 3.14 * 2.0)\n    );\n    vec3 camTarget = vec3(0.0, 0.0, 0.0);\n    vec3 camDir = normalize(camTarget - camPos);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 camRight = normalize(cross(up, camDir));\n    vec3 camUp = cross(camDir, camRight);\n    vec3 rayDir = normalize(camDir + uv.x * camRight + uv.y * camUp);\n\n    // Light setup\n    vec3 lightDir = normalize(vec3(-10.0, 15.0, -1.0)); // Directional light\n    vec3 ambientColor = vec3(0.1, 0.1, 0.1);\n    vec3 lightColor = vec3(1.0, 1.0, 1.0);\n\n    // Torus properties\n    float majorRadius = 1.0  + 0.3 * audio.y;\n    float minorRadius = 0.05 + 0.3 * audio.x;\n    vec3 torusColor = vec3(1.0, 0.0, 0.0);\n\n    // Dynamic torus positioning\n    vec3 offsets[4];\n    offsets[0] = vec3(0.0 + outerOffset, 0.0 + 0.4 * audioResponse, 0.0 + 0.3 * audioResponse);\n    offsets[1] = vec3(0.0 + innerOffset, 0.0 + 0.3 * audioResponse, 0.0 + 0.4 * audioResponse);\n    offsets[2] = vec3(0.0 - innerOffset, 0.0 + 0.5 * audioResponse, 0.0 + -0.2 * audioResponse);\n    offsets[3] = vec3(0.0 - outerOffset, 0.0 + 0.2 * audioResponse, 0.0 + -0.5 * audioResponse);\n\n    vec3 color = vec3(0.0);\n    bool hit = false;\n    vec3 nHit;\n    vec3 pHit;\n    float minDist = 0.01; // Minimum hit distance, reducing step count dynamically\n    int maxSteps = 50; // Use integer for loop count\n\n    for (int j = 0; j < 4; j++) {\n        vec3 torusCenter = offsets[j];\n        float t = 0.0;\n        for (int i = 0; i < maxSteps; i++) {\n            vec3 pos = camPos + t * rayDir;\n            vec3 q = pos - torusCenter;\n            float x = length(vec2(q.x, q.z)) - majorRadius;\n            float y = q.y;\n            float dist = length(vec2(x, y)) - minorRadius;\n            if (dist < minDist) {\n                hit = true;\n                pHit = pos;\n                nHit = normalize(vec3(x, q.z, y));\n                break;\n            }\n            t += dist; // Dynamic step based on current distance\n        }\n    }\n\n    if (hit) {\n        // Ambient lighting\n        color += ambientColor * torusColor;\n\n        // Diffuse and specular lighting\n        float diff = max(dot(nHit, lightDir), 0.0);\n        color += diff * lightColor * torusColor;\n        vec3 viewDir = normalize(camPos - pHit);\n        vec3 reflectDir = reflect(-lightDir, nHit);\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 52.0);\n        color += spec * lightColor;\n\n        // Soft shadows\n        float shadow = 13.0;\n        for (int k = 0; k < 4; k++) {\n            vec3 torusCenter = offsets[k];\n            vec3 shadowPos = pHit + nHit * 0.01;  // Small offset along normal\n            vec3 toCenter = shadowPos - torusCenter;\n            float sx = length(vec2(toCenter.x, toCenter.z)) - majorRadius;\n            float sy = toCenter.y;\n            float shadowDist = length(vec2(sx, sy)) - minorRadius;\n\n            // Adjust shadow intensity based on distance from light\n            float lightDistance = length(lightDir * 10.0); // 10.0 is the assumed distance to light\n            float attenuation = clamp(1.0 - shadowDist / lightDistance, 0.0, 1.0);\n            shadow *= attenuation;\n\n            if (shadowDist < 0.1) {\n                shadow *= 0.5;\n                break;\n            }\n        }\n        color *= shadow;\n\n        // Boost brightness for upper half\n        if (pHit.y > 0.0) {\n            color *= 1.5;\n        }\n    }\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}