{
    "Shader": {
        "info": {
            "date": "1534940788",
            "description": "A simple scene with diffuse path tracing (importance-sampled) with temporal motion blur and denoising.",
            "flags": 32,
            "hasliked": 0,
            "id": "ltyczz",
            "likes": 11,
            "name": "Path Tracing Tests",
            "published": 3,
            "tags": [
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "wsmind",
            "viewed": 840
        },
        "renderpass": [
            {
                "code": "float computeLuminance(vec3 color)\n{\n    return dot(color, vec3(0.3, 0.6, 0.1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 offset = 1.0 / iChannelResolution[0].xy;\n    \n    vec3 centerSample = texture(iChannel0, uv).rgb;\n    float centerLuminance = computeLuminance(centerSample);\n    \n    vec3 radiance = centerSample;\n    float totalWeight = 1.0;\n    \n    /*for (float y = -1.0; y <= 1.0; y += 1.0)\n    {\n\t    for (float x = -1.0; x <= 1.0; x += 1.0)\n        {\n\t\t    vec3 s = texture(iChannel0, uv + offset * vec2(x, y)).rgb;\n            float w = 1.0 / (abs(computeLuminance(s) - centerLuminance) + 0.01);\n            \n            radiance += s * w;\n            totalWeight += w;\n        }\n    }*/\n    radiance /= totalWeight;\n    \n    vec3 color = radiance;\n    color /= color + 1.0;\n    color = pow(color, vec3(1.0 / 2.2));\n    \n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 lightPosition;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n    //return texture(iChannel0, co * vec2(12.9898,78.233)).r;\n}\n\nvec2 rotate(vec2 v, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, s, -s, c) * v;\n}\n\nmat3 rotateY(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3(\n        c, 0.0, -s,\n        0.0, 1.0, 0.0,\n        s, 0.0, c\n    );\n}\n\nmat3 rotateZ(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3(\n        c, -s, 0.0,\n        s, c, 0.0,\n        0.0, 0.0, 1.0\n    );\n}\n\nfloat vmax(vec3 v)\n{\n    return max(max(v.x, v.y), v.z);\n}\n\nfloat box(vec3 pos, vec3 size)\n{\n    vec3 diff = abs(pos) - size;\n    return length(max(diff, 0.0)) + vmax(min(diff, 0.0));\n}\n\nfloat slices(vec3 pos)\n{\n    float period = 2.0;\n    pos.y = mod(pos.y + period * 0.5, period) - period * 0.5;\n\treturn box(pos, vec3(3.4, 0.5, 3.4));\n}\n\nfloat map(vec3 pos)\n{\n    return max(-box(pos, vec3(3.0)), -slices(pos));\n}\n\nbool traceRay(inout vec3 pos, vec3 dir)\n{\n    for (int i = 0; i < 64; i++)\n    {\n        float d = map(pos);\n        if (d < 0.001)\n            return true;\n        pos += dir * d;\n    }\n    return false;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec2 eps = vec2(0.01, 0.0);\n    return normalize(vec3(\n        map(pos + eps.xyy) - map(pos - eps.xyy),\n        map(pos + eps.yxy) - map(pos - eps.yxy),\n        map(pos + eps.yyx) - map(pos - eps.yyx)\n    ));\n}\n\nvec3 computeAlbedo(vec3 pos)\n{\n    vec3 tiles = vec3(0.2); //pow(texture(iChannel0, pos.xz * 0.5).rgb, vec3(2.2));\n    \n    vec3 c = vec3(0.8);\n    c = mix(tiles, c, step(-2.99, pos.y));\n    c = mix(c, tiles, step(2.99, pos.y));\n    \n    return c;\n}\n\nvec3 computeEmissive(vec3 pos)\n{\n    vec3 c;\n    c = mix(vec3(0.0), vec3(6.0, 3.0, 2.0), step(3.39, pos.x));\n    c = mix(vec3(3.0, 6.0, 4.0), c, step(-3.39, pos.x));\n    \n    vec3 stripe = vec3(0.0, 0.0, 6.0) * 4.0;\n    float stripePos = mod(iTime * 0.4, 8.0) - 4.0;\n    float stripeSize = 0.5;\n    c = mix(c, stripe, step(stripePos - stripeSize, pos.y) * step(pos.y, stripePos + stripeSize) * step(-2.99, pos.y) * step(pos.y, 2.99) * step(3.39, vmax(abs(pos))));\n    \n    return c;\n}\n\nvec3 cosineSampleHemisphere(vec2 rng)\n{\n    float radius = sqrt(rng.x);\n    float angle = 2.0 * 3.1415926535 * rng.y;\n    \n    return vec3(radius * cos(angle), radius * sin(angle), sqrt(1.0 - rng.x));\n}\n\nconst vec3 lightColor = vec3(5.0);\n\nvec3 sampleLight(vec3 pos, vec3 normal)\n{\n    vec3 lightDirUnnormalized = lightPosition - pos;\n    float lightDistance = length(lightDirUnnormalized) + 0.01;\n    vec3 lightDir = lightDirUnnormalized / lightDistance;\n    \n    vec3 lightAttenuation = lightColor / (lightDistance * lightDistance);\n    float cosineFactor = max(dot(normal, lightDir), 0.0);\n    \n    return lightAttenuation * cosineFactor;\n}\n\nvec3 samplePath(vec2 rng, vec3 pos, vec3 dir, out vec3 hitPoint)\n{\n    vec3 radiance = vec3(0.0);\n    vec3 pathContribution = vec3(1.0);\n    hitPoint = vec3(0.0);\n    for (int i = 0; i < 6; i++)\n    {\n\t    if (!traceRay(pos, dir))\n            break;\n        \n        if (i == 0)\n            hitPoint = pos;\n        \n        vec3 albedo = computeAlbedo(pos);\n        vec3 emissive = computeEmissive(pos);\n        \n        vec3 normal = computeNormal(pos);\n        vec3 incommingLight = sampleLight(pos, normal);\n        \n        radiance += pathContribution * (emissive + incommingLight * albedo / 3.141592);\n        \n        pathContribution *= albedo;\n        \n        // setup new ray\n        float randOffset = float(i) * 0.01;\n        ////vec3 dirSample = normalize(normal + vec3(rand(rng + randOffset), rand(rng + randOffset + 4.0), rand(rng + randOffset + 7.0)) * 2.0 - 1.0);\n        vec3 dirSample = cosineSampleHemisphere(vec2(rand(rng + randOffset), rand(rng + randOffset + 4.0)));\n        \n        // build a temporary TBN to transform the ray to world space\n        vec3 tangent = cross(vec3(0.707, 0.707, 0.0), normal);\n        vec3 bitangent = cross(normal, tangent);\n        tangent = cross(bitangent, normal);\n        \n        dir = normalize(mat3(tangent, bitangent, normal) * dirSample);\n        //dir = reflect(dir, normal);\n        pos += dir * 0.02;\n        \n        //pathContribution *= max(dot(dir, normal), 0.0);\n        \n        //radiance = fract(pos * 1.0);\n        //radiance = vec3(step(0.0, dot(dir, normal)));\n        //radiance = dir;\n        //radiance = normal;\n    }\n    \n    return radiance;\n}\n\nmat3 computeCameraTransform(float time)\n{\n    //time = 0.0;\n    return rotateY(time * 0.4) * rotateZ(sin(time * 0.27));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    \n    lightPosition = vec3(cos(iTime), sin(iTime * 0.3), cos(iTime * 0.7)) * 2.8;\n    \n    vec3 pos = vec3(0.0);\n    vec3 dir = normalize(vec3(uv, 0.4));\n    \n    mat3 cameraTransform = computeCameraTransform(iTime);\n    \n    float jitter = rand(uv); // motion blur sample\n    //mat3 previousCameraTransform = rotateY((iTime - iTimeDelta) * 0.2) * rotateZ((iTime - iTimeDelta) * 0.17);\n    mat3 previousCameraTransform = computeCameraTransform(iTime - iTimeDelta * jitter);\n    \n    dir = cameraTransform * dir;\n    \n    //dir.xy = rotate(dir.xy, iTime * 0.17);\n    //dir.xz = rotate(dir.xz, iTime * 0.2);\n\n    vec3 radiance = vec3(0.0);\n    vec3 hitPoint = vec3(0.0);\n    vec3 previousRadiance = vec3(0.0);\n    float taaWeight = 0.0;\n    const int spp = 4;\n    for (int i = 0; i < spp; i++)\n    {\n\t    vec2 rng = uv + float(i) * 0.497 + iTime * 0.0001;\n\t    radiance += samplePath(rng, pos, dir, hitPoint);\n        \n        if (i == 0)\n        {\n            vec3 previousHitPoint = transpose(previousCameraTransform) * hitPoint;\n            vec2 previousUv = previousHitPoint.xy * 0.4 / previousHitPoint.z;\n            previousUv.x *= iResolution.y / iResolution.x;\n            previousUv = previousUv + 0.5;\n\n            taaWeight = 0.8 * step(0.0, previousUv.x) * step(-1.0, -previousUv.x) * step(0.0, previousUv.y) * step(-1.0, -previousUv.y);\n            previousRadiance = mix(radiance, texture(iChannel1, previousUv).rgb, taaWeight);\n\n            //radiance = vec3(taaWeight);\n        }\n    }\n    radiance /= float(spp);\n    \n    radiance = mix(radiance, previousRadiance, taaWeight);\n    \n    //color = vec3(rand(uv), rand(uv + 4.0), 0.0);\n    \n    // reproject last frame for temporal denoising\n    /*vec3 previousDir = transpose(previousCameraTransform) * dir;\n    previousDir.xy *= 0.4 / previousDir.z;\n    \n    vec2 previousUv = fragCoord / iResolution.xy;//clamp(previousDir.xy * iResolution.y / iResolution.xy + 0.5, 0.0, 1.0);\n    previousUv += (vec2(rand(uv), rand(uv + 4.0)) - 0.5) / iResolution.xy; // subpixel TAA\n    float taaWeight = 0.5 * step(0.0, previousUv.x) * step(-1.0, -previousUv.x) * step(0.0, previousUv.y) * step(-1.0, -previousUv.y);\n    radiance = mix(radiance, texture(iChannel1, previousUv).rgb, taaWeight);*/\n    \n    //radiance = vec3(uv - previousDir.xy, 0.0);\n    \n    fragColor = vec4(radiance, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}