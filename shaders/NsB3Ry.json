{
    "Shader": {
        "info": {
            "date": "1621013824",
            "description": "Some shader practice",
            "flags": 0,
            "hasliked": 0,
            "id": "NsB3Ry",
            "likes": 3,
            "name": "04042021",
            "published": 3,
            "tags": [
                "blobs"
            ],
            "usePreview": 0,
            "username": "Pixdigit",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "mat2 rot(float deg) {\n    float s = sin(deg);\n    float c = cos(deg);\n    return mat2(c, -s, s, c);\n}\n\nvec3 pal(vec3 off) {\n    return 0.5 + 0.5*cos(off+vec3(0,2,4));\n}\n\nfloat nsin(float deg) {\n    return sin(deg) * 0.5 + 0.5;\n}\n\nfloat rand(vec2 seed) {\n    return fract(sin(dot(seed,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    const float scale = 20.;\n    vec2 uv = fragCoord/iResolution.x * scale;\n    vec2 offset = vec2(iTime * 0.1);\n    vec2 guv = fract(uv + offset) * 2. - 1.;\n    vec2 gid = floor(uv + offset) * 2.;\n\n\n    vec3 col = vec3(1.);\n    \n    float dScale = 0.3;\n    float dSpeed = 2.;\n    float diag = 1.- max(nsin((gid.x-gid.y - iTime*dSpeed) * dScale), nsin((gid.x+gid.y + iTime*dSpeed) * dScale));\n    col *= smoothstep(1., .8, length(guv) + smoothstep(0., .5, diag));\n    if (rand(gid) < rand(gid.yx)) {\n        col *= pal(vec3(rand(gid)*100.));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}