{
    "Shader": {
        "info": {
            "date": "1716986348",
            "description": "Adapted from https://en.wikipedia.org/wiki/Ikeda_map\nInspired by https://rreusser.github.io/ikeda/\n\nTop left:        u = 0.8\nBottom left:   u = 0.9\nTop right:      u = 1.0\nBottom right: u = 1.1",
            "flags": 32,
            "hasliked": 0,
            "id": "MXt3DB",
            "likes": 4,
            "name": "Multi Ikeda map plot",
            "published": 3,
            "tags": [
                "plot",
                "chaos",
                "ikeda"
            ],
            "usePreview": 0,
            "username": "Razakhel",
            "viewed": 109
        },
        "renderpass": [
            {
                "code": "// See buffers A & B for the actual computation, and buffer C for the plotting\n\n// Graph of the values, with y and u varying over time (apologies for the huge link!):\n// https://graphtoy.com/?f1(x,t)=x*cos(t)&v1=false&f2(x,t)=sin(t)*0.3+0.8&v2=true&f3(x,t)=0.4-6/(1+x%C2%B2+f1(x,t)%C2%B2)&v3=true&f4(x,t)=1+f2(x,t)*(x*cos(f3(x,t))-f1(x,t)*sin(f3(x,t)))&v4=true&f5(x,t)=f2(x,t)*(x*sin(f3(x,t))+f1(x,t)*cos(f3(x,t)))&v5=true&f6(x,t)=&v6=false&grid=1&coords=0.08060485663244621,-1.9666220199928726,6.73647628284181\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv   = fragCoord / iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).rrr, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 origUv = fragCoord / iResolution.xy;\n\n    if (iFrame == 0) {\n        fragColor = vec4(hash42(origUv));\n        return;\n    }\n\n    vec4 prevVal = texture(iChannel0, origUv);\n    fragColor    = vec4(computeIkedaValue(prevVal.xy, 0.8), computeIkedaValue(prevVal.zw, 0.9));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 origUv = fragCoord / iResolution.xy;\n\n    if (iFrame == 0) {\n        fragColor = vec4(hash42(origUv));\n        return;\n    }\n\n    vec4 prevVal = texture(iChannel0, origUv);\n    fragColor    = vec4(computeIkedaValue(prevVal.xy, 1.0), computeIkedaValue(prevVal.zw, 1.1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// https://www.shadertoy.com/view/4djSRW\nvec4 hash42(vec2 p) {\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec2 computeIkedaValue(vec2 coords, float u) {\n    float t    = 0.4 - 6.0 / (1.0 + dot(coords, coords));\n    float cosT = cos(t);\n    float sinT = sin(t);\n    \n    float x1 = 1.0 + u * (coords.x * cosT - coords.y * sinT);\n    float y1 = u * (coords.x * sinT + coords.y * cosT);\n    \n    return vec2(x1, y1);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 halfRes   = iResolution.xy * 0.5;\n    \n    // Drawing the scene-splitting lines\n    if (abs(fragCoord.x - halfRes.x) < 1.0 || abs(fragCoord.y - halfRes.y) < 1.0) {\n        fragColor = vec4(1.0);\n        return;\n    }\n    \n    // Ignoring the first few outliers (random starting points not having been fully attracted yet)\n    if (iFrame <= 2) {\n        fragColor = vec4(vec3(0.0), 1.0);\n        return;\n    }\n    \n    vec2 origUv    = fragCoord / iResolution.xy;\n    vec2 uniformUv = fragCoord / iResolution.y;\n    \n    vec2 remappedUv = vec2(0.0);\n    float pointSize = 0.0;\n    vec2 ikedaValue = vec2(0.0);\n    \n    if (origUv.x < 0.5) {\n        if (origUv.y > 0.5) {\n            remappedUv = uniformUv * 5.0 - vec2(1.5, 4.0);\n            pointSize    = 0.0075;\n            ikedaValue = texture(iChannel0, origUv).xy;\n        } else {\n            remappedUv = uniformUv * 7.0 - vec2(2.3, 2.4);\n            pointSize    = 0.015;\n            ikedaValue = texture(iChannel0, origUv).zw;\n        }\n    } else {\n        if (origUv.y > 0.5) {\n            remappedUv = uniformUv * 35.0 - vec2(46.0, 23.0);\n            pointSize    = 0.1;\n            ikedaValue = texture(iChannel1, origUv).xy;\n        } else {\n            remappedUv = uniformUv * 750.0 - vec2(1000.0, 200.0);\n            pointSize    = 2.5;\n            ikedaValue = texture(iChannel1, origUv).zw;\n        }\n    }\n\n    float color = 0.0;\n\n    if (abs(ikedaValue.x - remappedUv.x) < pointSize && abs(ikedaValue.y - remappedUv.y) < pointSize)\n        color = 1.0;\n    else\n        color = texelFetch(iChannel2, ivec2(fragCoord), 0).r;\n\n    fragColor = vec4(vec3(color), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}