{
    "Shader": {
        "info": {
            "date": "1655629953",
            "description": "License CC0: The benefit of random reciprocals\nResult from some random coding and adding a random reciprocal turned out \"weird\" so I kept it\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7syyDV",
            "likes": 7,
            "name": "The benefit of random reciprocal",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 242
        },
        "renderpass": [
            {
                "code": "// License CC0: The benefit of random reciprocals\n//  Result from some random coding and adding a random reciprocal turned out \"weird\" so I kept it\n\n#define RESOLUTION  iResolution\n#define TIME        iTime\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\nvec3 alphaBlend(vec3 bg, vec4 fg) {\n  return mix(bg, fg.xyz, fg.w);\n}\n\nvec4 rasterbar(vec2 p, float bf, float aa) {\n  p = p.yx;\n  \n  const float hw = 0.2;\n  float d = abs(p.y) - hw;\n  float x = p.y/hw;\n  \n  float df = sqrt(max(1.0-x*x, 0.0));\n  vec3 col = hsv2rgb(vec3(bf, df, 1.0-0.5*df));\n  col = mix(vec3(1.0), col, mix(0.0, 1.0, exp(-1.5*(1.0-bf))));\n  \n  float t = smoothstep(aa, -aa, d);\n  return vec4(col, t);\n}\n\nfloat offset(float tm) {\n  return 1.5*sin(tm)*mix(0.25, 1.0, 0.5+0.5*sin(sqrt(0.5)*tm*0.2));\n}\n\nfloat doffset(float tm) {\n  const float eps = 0.01; \n  return (offset(tm+eps)-offset(tm-eps))/(2.0*eps);\n}\n\nvec3 effect(vec2 p) {\n  float aa = 2.0/RESOLUTION.y;\n  vec3 col = vec3(1.0);\n  \n  const int bars = 14;\n\n  for (int i = 0; i < bars; ++i) {\n    vec2 pp = p;\n    float ii = float(i);\n    float bf = ii/float(bars);\n    float itime = TIME + 0.2*ii;\n    float off = offset(itime); \n    float doff = doffset(itime);\n    \n    float oz = mix(0.5, 1.0, bf);\n    pp /= oz;\n    pp.x += off; \n    pp *= ROT(0.2*doff);\n    \n    // Bunch of random code\n    const float flip = 0.125;\n    float ai = smoothstep(-flip, flip, sin(0.25*itime));\n    float iz = pow(max((length(pp-vec2(0.0, 0.6*sin(bf+0.3*itime)))-0.3), 0.), -mix(1.0, 4.0, ai));\n    float mm = mix(5.0, 20.0, length(pp));\n    iz *= 0.05+0.5+0.5*cos(mm*pp.x);\n    iz = mix(iz, 1.0/iz, 1.0-ai);\n    pp /= iz;\n\n    vec4 rcol = rasterbar(pp, bf,aa*iz*oz);\n    col = alphaBlend(col, rcol);\n  }\n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p);\n  col = mix(col, vec3(1.0), smoothstep(2.0, 0.0, TIME));\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}