{
    "Shader": {
        "info": {
            "date": "1720179848",
            "description": "ez grade school math",
            "flags": 8,
            "hasliked": 0,
            "id": "MXySRV",
            "likes": 5,
            "name": "diamboy's kick drum",
            "published": 3,
            "tags": [
                "audio"
            ],
            "usePreview": 0,
            "username": "Diamboy",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float y = fragCoord.y / iResolution.y * 2.0 - 1.0;\n    float a[2];\n    for (int i = 0; i < 2; i++)\n    {\n        float time = (fragCoord.x + float(i)) / iResolution.x;\n        a[i] = drum(time);\n    }\n    float w = step(min(a[0], a[1]), y) * step(y, max(a[0], a[1]) + 2.0 / iResolution.y);\n    float t = fract(iTime) * iResolution.x;\n    float l = smoothstep(t-0.6, t-0.4, fragCoord.x) * smoothstep(t+0.6, t+0.4, fragCoord.x);\n    vec3 c = vec3(w) + (vec3(l,0,0) - vec3(w)) * l;\n    fragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( int samp, float time )\n{\n    // play kick every second\n    return vec2(drum(fract(time)));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "const float decay = -36.0;\nconst float floor_freq = 55.0;\nconst float ceil_freq = 220.0;\nconst float boundary = (log(floor_freq) - log(ceil_freq)) / decay;\nconst float env_boundary = 0.5;\nconst float saturation = 0.2; // the lower the value, the more saturated. 0.5 is no saturation, 0.0 is max saturation without clipping\n\nfloat drum(float time)\n{\n    // $$\\text{ceil_freq, floor_freq, time}\\ge0$$$$\\text{decay}\\lt0$$$$\\text{phase}=\\int_0^\\text{time}max(\\text{ceil_freq}\\cdot e^{\\text{decay}\\cdot t},\\text{floor_freq})dt$$$$=\\begin{cases}\\int_0^{time}\\text{ceil_freq}\\cdot e^{\\text{decay}\\cdot t}dt&\\text{time}\\lt\\frac{\\ln(\\text{floor_freq})-\\ln(\\text{ceil_freq})}{\\text{decay}}\\\\\\int_0^{\\frac{\\ln(\\text{floor_freq})-\\ln(\\text{ceil_freq})}{\\text{decay}}}\\text{ceil_freq}\\cdot e^{\\text{decay}\\cdot t}dt+\\int_{\\frac{\\ln(\\text{floor_freq})-\\ln(\\text{ceil_freq})}{\\text{decay}}}^{time}\\text{floor_freq}dt&\\text{time}\\ge\\frac{\\ln(\\text{floor_freq})-\\ln(\\text{ceil_freq})}{\\text{decay}}\\end{cases}$$$$=\\begin{cases}\\text{ceil_freq}\\cdot\\frac{e^{\\text{decay}\\cdot \\text{time}}-1}{\\text{decay}}&\\text{time}\\lt\\frac{\\ln(\\text{floor_freq})-\\ln(\\text{ceil_freq})}{\\text{decay}}\\\\\\frac{\\text{floor_freq}-\\text{ceil_freq}}{\\text{decay}}+\\text{floor_freq}\\cdot(\\text{time}-\\frac{\\ln(\\text{floor_freq})-\\ln(\\text{ceil_freq})}{\\text{decay}})&\\text{time}\\ge\\frac{\\ln(\\text{floor_freq})-\\ln(\\text{ceil_freq})}{\\text{decay}}\\end{cases}$$\n    float phase1 = ceil_freq / decay * (exp(decay * time) - 1.0);\n    float phase2 = (floor_freq - ceil_freq) / decay + floor_freq * (time - boundary);\n    float phase = step(time, boundary) * phase1 + step(boundary, time) * phase2;\n    float body = sin(6.2831853 * phase);\n    // $$f(x)=c_1x+c_2x^3$$$$\\text{find }c_1,c_2\\text{ such that for a value }n\\text{, these conditions are satisfied:}$$$$\\begin{cases}f(1)=1\\\\f'(1)=n\\end{cases}$$$$\\iff\\begin{cases}c_1+c_2=1\\\\c_1+3c_2=n\\end{cases}$$$$\\iff\\begin{cases}c_1=\\frac{3}{2}-\\frac{n}{2}\\\\c_2=\\frac{n}{2}-\\frac{1}{2}\\end{cases}$$\n    // saturation = n/2\n    body = (1.5 - saturation) * body + (saturation - 0.5) * body*body*body;\n    float e = max(1.0 - exp(8.0 * (time - env_boundary)), 0.0);\n    return e * body;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}