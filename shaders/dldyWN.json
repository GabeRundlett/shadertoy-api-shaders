{
    "Shader": {
        "info": {
            "date": "1699242280",
            "description": "Allow for different radius along the x or y axis! This is particularly useful in 3D, for shapes like phones.\n\nNote: I'm a completely SDF noob. I'm open to simplifications or improvements :D\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dldyWN",
            "likes": 0,
            "name": "Box w/ diff. radius on x or y",
            "published": 3,
            "tags": [
                "box",
                "radius"
            ],
            "usePreview": 0,
            "username": "lf94",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// I'm starting with 2D but should scale up to 3D no problem\n// This demonstrates having different radius ratios\n// I need this for my SDF CAD stuff\n\n\n// Most mininal example. You see it stretches the circle.\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(vec2(p.x / 2., p.y))-r;\n}\n\n// Derived from the SDF box video from IQ.  The max(r.y/r.x, 1.) is my stuff\nfloat sdBox1(in vec2 p, in vec2 r) {\n  return sqrt(pow(max((p.x-r.x)*max(r.y/r.x, 1.), 0.0),2.) + pow(max((p.y-r.y)*max(r.x/r.y, 1.),0.0),2.));\n}\n\n// This is the final form\nfloat sdBox( in vec2 p, in vec2 b, in vec2 r )\n{\n    vec2 s = max(vec2(r.y/r.x, r.x/r.y), 1.);\n    vec2 b2 = b*vec2(r.y/r.x, r.x/r.y);\n    vec2 d = abs(p)-b2;\n    vec2 d2 = vec2((d.x-r.x)*s.x, (d.y-r.y)*s.y);\n    \n    return (length(max(d2,0.0)) + min(max(d2.x,d2.y),0.0)) - max(r.y/r.x, r.x/r.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n\tfloat d = sdBox(p * 10., vec2(1.0, 1.0), vec2(4.00, 1.00)) / 10.;\n    \n\t// coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d = sdBox(p * 10., vec2(1.0, 1.0), vec2(4.00, 1.00)) / 10.;\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}