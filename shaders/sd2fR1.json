{
    "Shader": {
        "info": {
            "date": "1645747718",
            "description": "kind of draws what isn't there, weird technique",
            "flags": 0,
            "hasliked": 0,
            "id": "sd2fR1",
            "likes": 1,
            "name": "weird stars",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 243
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 50\n#define MAX_DIST 20.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n//https://www.shadertoy.com/view/Wl3fD2\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat GetDist(vec3 p) {\n    float t = 0.015 * length(p) + 0.2 * iTime;\n    float o = 2. * pi / 3.;\n   // float sc = 4.;\n    vec3 ax = vec3(cos(t - o), cos(t), cos(t + o));\n   \n    /*\n    p = abs(p) - 3.;\n    p = abs(p) - 1.5;\n    p = abs(p) - 0.75;\n    */\n    p = erot(p, ax, 0.1 * p.y + 0.25 * iTime + 0.* pi);\n    //p *= 0.1;\n    float x = length(p);\n     p = fract(0.8 * p) - 0.5;\n    //p = 0.5 + 0.5 * cos(0.1 * p) - 0.;\n\n    \n    vec3 center = floor(p) + 0.5;\n    vec3 neighbour = center + face(p - center);\n    \n   // vec3 pos = p - center;\n    //vec3 npos = p - neighbour;\n   \n    \n   // float worst = length(npos) - 0.79;\n    float m0 = 0.1;//mix(0.01, 0.1, 0.5 + 0.5 * thc(4., 0.25 * x - 0.5 *  iTime));\n    float worst = length(cross(neighbour, p)) - m0; // -0.1\n   // float me = length(cross(ax, p).yz) - 0.01;\n    float m = mix(0., 6. * exp(-0.5 * x), 0.5 + 0.5 * thc(100., 10. * length(p) + 10. * x - 5. * iTime));\n    float d = exp(-m * length(p)) * worst;//min(me, worst);\n    //d = 0.18 * worst / dot(p, p);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    float t = 0.125 * iTime;\n    float o = 2. * pi / 3.;\n    float sc = 4.;\n    vec3 ax = vec3(cos(t - o), cos(t), cos(t + o));\n\n    vec3 ro = 3. * ax;//vec3(0, 3, -3);\n    //ro.yz *= Rot(-m.y*3.14+1.);\n   // ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 0.8);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.05;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n       /* vec3 r = reflect(rd, n);\n\n        vec3 pIn = p - 4. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit); // *-1.; ?\n        //*/\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(step(0., dif));\n\n       // float fresnel2 = pow(1.+dot(rd, n), 1.); \n        //col += fresnel2;\n        col *= exp(-0.2 * length(p));\n        col = clamp(col, 0., 1.);\n        col = smoothstep(0., 1., col);\n        \n      \n        vec3 e = vec3(1);\n        col *= pal(col.x * 0.4 + 0.55 + 0.1 * length(p), e, e, e, 0.5 * vec3(0,1,2)/3.);\n    }\n    \n    //col = pow(col, vec3(.4545));\t// gamma correction\n    col  -= 0.15;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}