{
    "Shader": {
        "info": {
            "date": "1461828035",
            "description": "The convergent region of the Mandelbrot set (M1, in yellow) and the period-2 region (M2, in blue) have analytical description and don't need iteration to be identified. More info: [url]http://iquilezles.org/articles/mset_1bulb/mset1bulb.htm[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4sdXWX",
            "likes": 5,
            "name": "Mandelbrot - M1 and M2",
            "published": 3,
            "tags": [
                "2d",
                "mandelbrot",
                "analytical"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1614
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2016 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// The convergent region of the Mandelbrot set (M1, in yellow) and the \n// period-2 region (M2, in blue) have analytical description and don't\n// need of iteration to be identified. Naturally, the Mset cannot overlap\n// the exterior of a disk of radious 2 (in green).\n\n// More info: https://iquilezles.org/articles/mset1bulb\n// and        https://iquilezles.org/articles/mset2bulb\n\nvec3 render( in vec2 fragCoord )\n{\n    \t\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec2 c = uv*1.2 - vec2(0.65,0.0);\n    \n    float c2 = dot(c, c);\n    float s1 = 256.0*c2*c2 - 96.0*c2 + 32.0*c.x - 3.0;\n    float s2 = 16.0*(c2+2.0*c.x+1.0) - 1.0; // float s2 = 4.0*length(c+vec2(1,0)) - 1.0;\n\n    // early skip computation inside M1\n    if( s1 < 0.0 ) return vec3(1.0,0.6,0.1);\n    // early skip computation inside M2\n    if( s2 < 0.0 ) return vec3(0.2,0.6,1.0);\n    // early skip computation outside |c|>2\n    if( c2 > 4.0 ) return vec3(0.2,1.0,0.6);\n    \n    vec2 z = vec2(0.0, 0.0);\n\n    float n = 0.0;\n    for( int i = 0; i<256; i++ )\n    {\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n\n        if( dot(z,z) > 4.0 )\n        {\n        \tn = float(i);\n            break;\n        }\n    }\n    \n    float f = n / 64.0;\n    return vec3( f, f, f );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col0 = render( fragCoord+vec2(0.0,0.0) );\n    vec3 col1 = render( fragCoord+vec2(0.5,0.0) );\n    vec3 col2 = render( fragCoord+vec2(0.0,0.5) );\n    vec3 col3 = render( fragCoord+vec2(0.5,0.5) );\n    vec3 col = 0.25*(col0 + col1 + col2 + col3);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}