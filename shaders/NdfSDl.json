{
    "Shader": {
        "info": {
            "date": "1619404811",
            "description": "Quadratic bezier curve utilities.",
            "flags": 0,
            "hasliked": 0,
            "id": "NdfSDl",
            "likes": 17,
            "name": "More Bezier Curve",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "curve",
                "more",
                "utilities"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 726
        },
        "renderpass": [
            {
                "code": "// Evaluates the parametric equation of a quadratic bezier\n// ---> a(1-t)^2 + 2b(1-t)t + ct^2\nvec2 posBezier(in vec2 a, in vec2 b, in vec2 c, in float t) {\n    float tInv = 1.0 - t;\n    return a * tInv * tInv + b * 2.0 * t * tInv + c * t * t;\n}\n\n// Computes the derivative of a bezier curve for a given parameter value\nvec2 derivBezier(in vec2 v1, in vec2 v2, in vec2 v3, in float t) {\n     return 2.0 * (v1 * (t - 1.0) + (1.0 - 2.0 * t) * v2 + v3 * t);\n}\n\n// Computes a basis matrix for a point on a 2D bezier curve\n// Up is facing out from the curve, like you're riding along it\nmat2 basisBezier(in vec2 v1, in vec2 v2, in vec2 v3, in float t) {\n    vec2 right = normalize(v1 * (t - 1.0) + (1.0 - 2.0 * t) * v2 + v3 * t);\n    return mat2(right, -right.y, right.x);\n}\n\n// Computes the bezier curve's arclength from tmin to tmax\n// From this stack exchange: https://math.stackexchange.com/questions/12186/arc-length-of-b%C3%A9zier-curves\nfloat arclenBezier(in vec2 v1, in vec2 v2, in vec2 v3, in float tmin, in float tmax) {\n    vec2 ba = v2 - v1, cb = v3 - v2;\n    vec2 cbba = cb - ba;\n\n    float a = dot(cbba, cbba);\n    float b = dot(ba, cbba);\n    float c = dot(ba, ba);\n\n    vec4 pre = vec4(a * c - b * b, b / a, 2.0 * b, 0.0);\n    pre.w = sqrt(pre.x);\n\n    float atMin = a * tmin, atMax = a * tmax;\n    float q1 = (tmax + pre.y) * sqrt(c + pre.z * tmax + atMax * tmax) - (tmin + pre.y) * sqrt(c + pre.z * tmin + atMin * tmin);\n    float q2 = pre.x / pow(a, 1.5) * (asinh((atMax + b) / pre.w) - asinh((atMin + b) / pre.w));\n\n    return q1 + q2;\n}\n\n// vec4(vertex, rotation, height)\nvec4 bezierToParabola(in vec2 a, in vec2 b, in vec2 c) {\n    vec2 v = a - 2.0 * b + c, ab = a - b; float d = v.y / v.x;\n    float tVert = (d * ab.y + ab.x) / (v.x + d * v.y);\n\n    float tVertInv = 1.0 - tVert;\n    vec2 vert = a * tVertInv * tVertInv + b * 2.0 * tVertInv * tVert + c * tVert * tVert;\n\n    vec2 right = normalize(a * (tVert - 1.0) + (1.0 - 2.0 * tVert) * b + c * tVert);\n    mat2 basis = mat2(right, -right.y, right.x);\n\n    vec2 aRel = a - vert;\n    float aY = dot(aRel, basis[0]);\n    return vec4(vert, atan(basis[0].y, basis[0].x), dot(aRel, basis[1]) / (aY * aY));\n}\n\n// vec2(shortest distance, parameter of closest point)\n// clampRes flags whether the results should be held in the range [tmin, tmax]\nfloat dot2(in vec2 v) { return dot(v, v); }\nvec2 mapBezier(in vec2 p, in vec2 v1, in vec2 v2, in vec2 v3, in float tmin, in float tmax, in bool clampRes) {\n    vec2 c1 = p - v1;\n    vec2 c2 = 2.0 * v2 - v3 - v1;\n    vec2 c3 = v1 - v2;\n\n    // Cubic coefficients ---> t3*t^3 + t2*t^2 + t1*t + t0*t^0\n    float t3 = dot(c2, c2);\n    float t2 = dot(c3, c2) * 3.0;\n    float t1 = dot(c1, c2) + 2.0 * dot(c3, c3);\n    float t0 = dot(c1, c3);\n\n    // Reduce by dividing by leading coefficient\n    // This simplifies out a lot of things\n    t2 /= t3, t1 /= t3, t0 /= t3;\n\n    // Depressed cubic coefficients (p and q) and precomputation\n    float t22 = t2 * t2;\n    vec2 pq = vec2(t1 - t22 / 3.0, t22 * t2 / 13.5 - t2 * t1 / 3.0 + t0);\n    float ppp = pq.x * pq.x * pq.x, qq = pq.y * pq.y;\n\n    float p2 = abs(pq.x);\n    float r1 = 1.5 / pq.x * pq.y;\n\n    // Solutions and details gathered from here: https://en.wikipedia.org/wiki/Cubic_equation\n    if (qq * 0.25 + ppp / 27.0 > 0.0) { // One real root, use hyperbolic trig\n        float r2 = r1 * sqrt(3.0 / p2), root;\n        if (pq.x < 0.0) root = sign(pq.y) * cosh(acosh(r2 * -sign(pq.y)) / 3.0);\n        else root = sinh(asinh(r2) / 3.0);\n        root = -2.0 * sqrt(p2 / 3.0) * root - t2 / 3.0;\n        if (clampRes) root = clamp(root, tmin, tmax);\n        return vec2(length(p - posBezier(v1, v2, v3, root)), root);\n    }\n\n    else { // Three real roots (only need to use two), use \"normal\" trig\n        float ac = acos(r1 * sqrt(-3.0 / pq.x)) / 3.0; // 4pi/3 goes here --v\n        vec2 roots = 2.0 * sqrt(-pq.x / 3.0) * cos(vec2(ac, ac - 4.18879020479)) - t2 / 3.0;\n        if (clampRes) roots = clamp(roots, tmin, tmax);\n        float d1 = dot2(p - posBezier(v1, v2, v3, roots.x));\n        float d2 = dot2(p - posBezier(v1, v2, v3, roots.y));\n        return d1 < d2 ? vec2(sqrt(d1), roots.x) : vec2(sqrt(d2), roots.t);\n    }\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n// https://www.shadertoy.com/view/ws3GD7\nfloat sdParabola(in vec2 pos, in float k) {\n    pos.x = abs(pos.x);\n\n    float ik = 1.0 / k;\n    float p = ik * (pos.y - 0.5 * ik) / 3.0;\n    float q = 0.25 * ik * ik * pos.x;\n\n    float h = q * q - p * p * p;\n    float r = sqrt(abs(h));\n\n    float x = h > 0.0 ?\n          // 1 root\n          pow(q + r, 1.0 / 3.0) - pow(abs(q - r), 1.0 / 3.0) * sign(r - q) :\n          // 3 roots\n          2.0 * cos(atan(r, q) / 3.0) * sqrt(p);\n\n    return length(pos - vec2(x, k * x * x)); // * sign(pos.x - x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    // Control points\n    vec2 a = vec2(-0.5, 0.0);\n    vec2 b = iMouse.z > 0.0 ? mouse : vec2(0.0, 0.4);\n    vec2 c = vec2(0.3, -0.4);\n\n    // Parameter bounds\n    float tmin = 0.5 + 0.5 * sin(iTime - 0.8);\n    float tmax = 0.5 + 0.5 * sin(iTime + 0.8);\n\n    // Ends the of the segment\n    vec2 e1 = posBezier(a, b, c, tmin);\n    vec2 e2 = posBezier(a, b, c, tmax);\n\n    // Point moving along the bezier and the basis matrix at that point\n    float t = mix(tmin, tmax, 0.5 + 0.5 * sin(iTime * 2.0));\n    vec2 p = posBezier(a, b, c, t);\n    mat2 basis = basisBezier(a, b, c, t);\n\n    // Order smallest to biggest\n    if (tmax < tmin) {\n        float tmp = tmax;\n        tmax = tmin;\n        tmin = tmp;\n    }\n\n    // Distance\n    float d = mapBezier(uv, a, b, c, tmin, tmax, true).x;\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\n    // Fade to and from a texture mapped to the curve's arclength\n    vec2 bez = mapBezier(uv, a, b, c, tmin, tmax, false);\n    vec2 bUv = vec2(arclenBezier(a, b, c, 0.0, bez.y), bez.x);\n    color = mix(color, texture(iChannel0, bUv).rgb, 0.5 - 0.5 * cos(1.5 * iTime));\n\n    // Lines between control points\n    color = mix(color, vec3(0.0, 0.0, 1.0), smoothstep(unit, 0.0, sdLine(uv, a, b) - 0.002));\n    color = mix(color, vec3(0.0, 0.0, 1.0), smoothstep(unit, 0.0, sdLine(uv, b, c) - 0.002));\n\n    // Parabola conversion\n    vec4 parabola = bezierToParabola(a, b, c);\n    vec2 cs = vec2(cos(parabola.z), sin(parabola.z));\n    float parabDist = sdParabola((uv - parabola.xy) * mat2(cs, -cs.y, cs.x), parabola.w);\n    color = mix(color, vec3(0.0, 1.0, 1.0), smoothstep(unit, 0.0, abs(parabDist) - 0.001) * mod(floor(bUv.x * 20.0), 2.0));\n    color = mix(color, vec3(0.0), smoothstep(unit, 0.0, length(uv - parabola.xy) - 0.015)); // Vertex\n\n    // Bezier curve\n\tcolor = mix(color, vec3(1.0), smoothstep(unit, 0.0, abs(d) - 0.002));\n\n    // End points\n    color = mix(color, vec3(1.0, 0.5, 0.0), smoothstep(unit, 0.0, length(uv - e1) - 0.015));\n    color = mix(color, vec3(1.0, 0.5, 0.0), smoothstep(unit, 0.0, length(uv - e2) - 0.015));\n\n    // Basis system axes at the moving point\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, sdLine(uv, p, p + 0.15 * basis[0]) - 0.002));\n    color = mix(color, vec3(0.0, 1.0, 0.0), smoothstep(unit, 0.0, sdLine(uv, p, p + 0.15 * basis[1]) - 0.002));\n\n    // Point moving along the bezier\n    color = mix(color, vec3(0.5, 0.0, 1.0), smoothstep(unit, 0.0, length(uv - p) - 0.015));\n\n    // Control points\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - a) - 0.015));\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, length(uv - b) - 0.015));\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - c) - 0.015));\n\n    // Output arclength\n    float arclen = arclenBezier(a, b, c, tmin, tmax);\n    color = digitIn(color, vec3(1.0), uv - vec2(-0.8,  -0.4), 100.0, arclen);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Handy debugging font by @valalalalala\n// Thanks!\n\n        /////////////////////////////////////////////////////////////////\n       //                                                            ////\n      //  \"little debugging font\"                                   // //\n     //                                                            //  //\n    //  This utility uses a small bitmapped font (3x5) to render  //   //\n   //  floats, primarily intended for debugging. The code can    //    //\n  //  be copy/pasta'd into the Common tab as needed.            //     //\n //                                                            //     //\n////////////////////////////////////////////////////////////////     //\n//                                                            //    //\n// Creative Commons Attribution-NonCommercial-ShareAlike      //   //                                       //  //\n// 3.0 Unported License                                       //  //\n//                                                            // //\n// by Val \"valalalalala\" GvM 💃 2021                          ////\n//                                                            ///\n////////////////////////////////////////////////////////////////\n\nconst int CHARACTERS[14] = int[14](31599, 9362, 31183, 31207, 23524, 29671, 29679, 30994, 31727, 31719, 1488, 448, 2, 3640);\n\nfloat digitIsOn(in int digit, in vec2 id) {   \n    if (id.x < 0.0 || id.y < 0.0 || id.x > 2.0 || id.y > 4.0 ) return 0.0;\n    return floor(mod(float(CHARACTERS[int(digit)]) / pow(2.0, id.x + id.y * 3.0), 2.0));\n}\n\nfloat digitSign(in float v, in vec2 id) {\n    return digitIsOn(10 - int((sign(v) - 1.0) * 0.5), id);\n}\n\nint digitCount(in float v) {\n    return int(floor(log(max(v, 1.0) ) / log(10.0)));\n}\n\nfloat digitFirst(in vec2 uv, in float scale, in float v, in int decimalPlaces) {\n    vec2 id = floor(uv * scale);\n\n    if (0.0 < digitSign(v, id)) return 1.0;\n    v = abs(v);\n\n    int digits = digitCount(v);\n    float power = pow(10.0, float(digits));\n    \n    float offset = floor(0.1 * scale);\n    id.x -= offset;\n\n    float n;\n    for (int i = 0; i < 33; i++, id.x -= offset, v -= power * n, power /= 10.0) {\n        n = floor(v / power);\n        if (0.0 < digitIsOn(int(n), id)) return 1.0;   \n        if (i == digits) {\n            id.x -= offset;\n            if (0.0 < digitIsOn(int(12), id)) return 1.0;\n        }\n\n        if (i >= digits + decimalPlaces) return 0.0;\n    }\n\n    return 0.0;\n}\n\nfloat digitFirst(in vec2 uv, in float scale, in float v) {\n    return digitFirst(uv, scale, v, 3);\n}\n\nvec3 digitIn(in vec3 color, in vec3 toMix, in vec2 uv, in float scale, in float v) {\n    float f = digitFirst(uv, scale, v);\n    return mix(color, toMix, f);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}