{
    "Shader": {
        "info": {
            "date": "1550071374",
            "description": "making code for :\nDescription:  Shape of rectangle (a,b,c,d) is rotate (-45 deg) towards point P(3,3) and then scaling 1/3",
            "flags": 0,
            "hasliked": 0,
            "id": "WsBGW3",
            "likes": 3,
            "name": "CGK-6",
            "published": 3,
            "tags": [
                "grid",
                "rectangle",
                "moving",
                "rotation",
                "translation",
                "object",
                "45degree"
            ],
            "usePreview": 0,
            "username": "dennyraymond",
            "viewed": 512
        },
        "renderpass": [
            {
                "code": "//#ifdef GL_ES\n//precision mediump float;\n//#endif\n\n#define PI 3.14159265\n#define TWO_PI 6.283185\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nfloat random(in float x){ \n    return fract(sin(x)*43758.5453); \n}\nfloat random(in vec2 uv){ \n    return fract(sin(dot(uv.xy ,vec2(12.9898,78.233))) * 43758.5453); \n}\n\nfloat grid(vec2 st, float res){\n    vec2 grid = fract(st*res);\n    return 1.-(step(res,grid.x) * step(res,grid.y));\n}\n\nfloat box(in vec2 st, in vec2 size){\n    size = vec2(0.5) - size*0.5;\n    vec2 uv = smoothstep(size,\n                        size+vec2(0.001),\n                        st);\n    uv *= smoothstep(size,\n                    size+vec2(0.001),\n                    vec2(1.0)-st);\n    return uv.x*uv.y;\n}\n\nfloat crossTest(in vec2 st, vec2 size){\n    return  clamp(box(st, vec2(size.x*0.5,size.y*0.125)) +\n            box(st, vec2(size.y*0.125,size.x*0.5)),0.,1.);\n}\n\n\n//SCALE FUNCTION\nmat2 scale(vec2 scale) {\n    return mat2(scale.x,0.,0.,scale.y);\n}\n\n\n//TRANSLATION FUNCTION\nvec2 translation(vec2 t) {\n    mat3 m = mat3(\n        1.,0.,0.,\n        0.,1.,0.,\n        t.x,t.y,0.);\n    return vec2(t.x,t.y);\n}\n\n//ROTATE FUNCTION\nmat2 rotateObj(float angle){\n    return mat2(cos(angle), sin(angle), -sin(angle),  cos(angle));\n}\n\n\n//POLYGON FUNCTION\nfloat polygon(vec2 uv, vec2 pos, float size, float blur, int sides){\n    uv = uv-pos;\n    //Angle and radius of polygon\n    float angle = atan(uv.x,uv.y)+PI;\n    float rad = TWO_PI/float(sides);\n    float dist = cos(floor(0.5+angle/rad)*rad-angle)*length(uv);\n    float poly = smoothstep(size, size-blur, dist);\n    \n    return poly;\n}\n\nvec4 moveShape(vec4 try,vec2 uv){\n\n    //vec2 translate = vec2(cos(iTime),sin(iTime));\n    //uv += translate*0.35;\n    //uv = translate*0.35;\n    //vec2 translate = vec2(0.02, 0.01);\n    \n    // locate the box to coordinate (3.3)\n    uv -= translation(vec2(.47));\n    uv -= translation(vec2(-.2));\n    \n    // tranlasation to coor (0.0)\n    uv -= translation (vec2(-.065));\n    \n    //scale it 1/3\n    uv = scale (vec2(2.))*uv;\n    uv -= translation (vec2(-.4));\n\t//uv += translation(vec2(.2));\n    \n    //rotate -45 degree\n    uv += rotateObj(sin(-45.0))*uv;\n    \n    //put it back to coordinate (3.3)\n    uv -= translation (vec2(.4));\n    uv -= translation (vec2(-.2));\n    //float x = uv.x;\n    //float y = uv.y;\n    \n    float rectangle = polygon(uv , vec2(0.25,0.0), 0.03, 0.001, 4);\n    \n    vec3 giveColor = vec3(1.0,1.0,0.0) * rectangle;\n    try = vec4(giveColor,1.0);\n    \n    return try;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv -= 0.5; // move center\n    uv.x *= iResolution.x/iResolution.y;\n    float x = uv.x;\n    vec3 col = vec3(0); // first BG color\n    vec2 uv2 = fragCoord.xy/iResolution.xy;\n\n\t// Grid\n    vec2 grid_uv = uv*300.;\n    col += vec3(0.5,0.,0.)*grid(grid_uv,0.01);\n    col += vec3(0.2,0.,0.)*grid(grid_uv,0.02);\n    col += vec3(0.2)*grid(grid_uv,0.1);\n\n    // Crosses\n    vec2 crosses_uv = uv + .5;\n    crosses_uv *= 3.;\n    vec2 crosses_st_f = fract(crosses_uv);\n    col *= 1.-crossTest(crosses_st_f,vec2(.3,.3));\n    col += vec3(.9)*crossTest(crosses_st_f,vec2(.2,.2));\n\n    // Digits\n    vec2 blocks_uv = floor(uv*6.);\n    float t = u_time*.8+random(blocks_uv);\n    float time_i = floor(t);\n    float time_f = fract(t);\n    col.rgb += step(0.9,random(blocks_uv+time_i))*(1.0-time_f);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    fragColor += moveShape(fragColor,uv);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}