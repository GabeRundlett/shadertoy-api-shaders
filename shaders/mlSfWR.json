{
    "Shader": {
        "info": {
            "date": "1693923749",
            "description": "Wind walkers with chain drive; mouse selects view, rotates and zooms",
            "flags": 0,
            "hasliked": 0,
            "id": "mlSfWR",
            "likes": 35,
            "name": "Wind Walker Mechanics",
            "published": 3,
            "tags": [
                "chain",
                "strandbeest",
                "linkage"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 397
        },
        "renderpass": [
            {
                "code": "// \"Wind Walker Mechanics\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n/*\n  One or more wind walkers (from \"Wind Walker\" and \"Wind Walker Herd\")\n  with added chain drive.\n  Leg from the Strandbeest, with partly reversed direction:\n  see https://en.wikipedia.org/wiki/Jansen's_linkage\n*/\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrCaps2Df (vec2 p, float r, float h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\n\nvec3 sunDir, qHit, lBase;\nvec2 cId;\nfloat tCur, dstFar, bGrid, grLim, wlkSpd, wlkScl, vAxHt, chnEl;\nint nFrame, idObj;\nconst int idBas = 1, idLnkT = 2, idLnk = 3, idAx = 4, idWhl = 5, idVane = 6, idStruc = 7,\n   idGrnd = 8, idSprk = 11, idPin = 12, idPlt = 13;\nconst float s_a = 38.0, s_b = 41.5, s_c = 39.3, s_d = 40.1, s_e = 55.8, s_f = 39.4,\n   s_g = 36.7, s_h = 65.7, s_i = 49.0, s_j = 50.0, s_k = 61.9, s_l = 7.8, s_m = 15.0;\nconst float pi = 3.1415927;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nstruct Leg {\n  vec2 v[8], cs[10], cswAng;\n  float wAng;\n};\nstruct Walker {\n  Leg leg[2];\n  vec2 csVane;\n  float szFac;\n};\nWalker wlk;\n\n#define ACOSR(x, y, z) acos (((x) * (x) + (y) * (y) - (z) * (z)) / (2. * (x) * (y)))\n#define ATANV(v) atan ((v).y, (v).x)\n\nvoid ObjState ()\n{ //  (Leg from the Strandbeest: see https://en.wikipedia.org/wiki/Jansen's_linkage)\n  float a[10], aa, g, s, t;\n  wlk.szFac = wlkScl / (1. + 0.3 * Maxv2 (abs (cId)));\n  t = tCur * wlkScl / wlk.szFac;\n  wlk.leg[0].wAng = - wlkSpd * t;\n  wlk.leg[1].wAng = wlk.leg[0].wAng + pi;\n  for (int k = 0; k < 2; k ++) {\n    wlk.leg[k].v[0] = vec2 (0., 0.);\n    wlk.leg[k].v[1] = wlk.leg[k].v[0] + vec2 (s_a, s_l);\n    wlk.leg[k].v[2] = wlk.leg[k].v[1] + Rot2D (vec2 (s_m, 0.), wlk.leg[k].wAng);\n    aa = ATANV (wlk.leg[k].v[2] - wlk.leg[k].v[0]);\n    s = length (wlk.leg[k].v[2] - wlk.leg[k].v[0]);\n    a[0] = aa + ACOSR (s, s_b, s_j);\n    wlk.leg[k].v[3] = wlk.leg[k].v[0] + Rot2D (vec2 (s_b, 0.), a[0]);\n    a[1] = aa - ACOSR (s, s_c, s_k);\n    wlk.leg[k].v[4] = wlk.leg[k].v[0] + Rot2D (vec2 (s_c, 0.), a[1]);\n    a[2] = ACOSR (s_b, s_d, s_e) + a[0];\n    wlk.leg[k].v[5] = wlk.leg[k].v[0] + Rot2D (vec2 (s_d, 0.), a[2]);\n    s = length (wlk.leg[k].v[5] - wlk.leg[k].v[4]);\n    g = ACOSR (s, s_c, s_d) + ACOSR (s, s_g, s_f) + pi + a[1];\n    wlk.leg[k].v[6] = wlk.leg[k].v[4] + Rot2D (vec2 (s_g, 0.), g);\n    wlk.leg[k].v[7] = wlk.leg[k].v[4] + Rot2D (vec2 (s_i, 0.), g + ACOSR (s_g, s_i, s_h));\n    a[3] = ACOSR (s_d, s_e, s_b) + a[2] - pi;\n    a[4] = ATANV (wlk.leg[k].v[4] - wlk.leg[k].v[6]);\n    a[5] = ATANV (wlk.leg[k].v[5] - wlk.leg[k].v[6]);\n    a[6] = ATANV (wlk.leg[k].v[7] - wlk.leg[k].v[6]);\n    a[7] = ATANV (wlk.leg[k].v[7] - wlk.leg[k].v[4]);\n    a[8] = ATANV (wlk.leg[k].v[3] - wlk.leg[k].v[2]);\n    a[9] = ATANV (wlk.leg[k].v[4] - wlk.leg[k].v[2]);\n    for (int m = 0; m < 10; m ++) wlk.leg[k].cs[m] = CosSin (- a[m]);\n    wlk.leg[k].cswAng = CosSin (- wlk.leg[k].wAng);\n  }\n  wlk.csVane = CosSin (4. * t);\n  chnEl = atan (vAxHt - s_l, - lBase.x);\n}\n\nvoid LinkDf (vec3 p, vec2 v, vec2 cs, float l, int id, inout float dMin)\n{\n  vec3 q;\n  float d;\n  q = p;\n  q.xy = Rot2Cs (q.xy - v, cs);\n  d = max (PrCaps2Df (q.yx - vec2 (0., 0.5 * l), 2., 0.5 * l), abs (q.z) - 0.5);\n  DMINQ (id);\n}\n\nfloat ChainDf (vec3 p, float aRot, float wgFac, float dMin)\n{\n  vec3 q, sp;\n  float d, wlRad, cRad, cLen, nTh, nSp, wlThk, lnkLen, lnkWid, lnkThk, wlGap, bx, by, ds, a, r;\n  wlRad = 1.;\n  cRad = 0.04;\n  nTh = 32.;\n  nSp = 6.;\n  wlThk = 0.05;\n  lnkLen = 2. * pi * wlRad / nTh;\n  lnkWid = 1.4 * cRad;\n  lnkThk = 0.15 * wlThk;\n  wlGap = wgFac * lnkLen;\n  cLen = 1.9 * wlThk;\n  sp.xz = sign (p.xz);\n  bx = wlGap - abs (p.x);\n  q = p;\n  q.x = abs (q.x) - wlGap;\n  q.xz = Rot2D (q.xz, aRot * sp.x);\n  r = length (q.xz);\n  a = (r > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.;\n  d = min (max (abs (r - 0.96 * wlRad) - 0.09 * wlRad, abs (q.y) - wlThk),\n     max (r - 0.25 * wlRad, abs (q.y) - 1.5 * wlThk));\n  d = min (d, max (PrBox2Df (vec2 (dot (q.xz, sin (2. * pi * floor (nSp * a + 0.5) / nSp +\n     vec2 (0., 0.5 * pi))), q.y), vec2 (0.05, wlThk)), r - wlRad));\n  q.xz = Rot2D (q.xz, 2. * pi * floor (nTh * a + 0.5) / nTh);\n  d = SmoothMax (d, - PrCaps2Df (vec2 (q.z, q.x + wlRad + 0.1), 0.045, 0.08), 0.01);\n  DMINQ (idSprk);\n  q.x += wlRad;\n  d = max (PrCylDf (q.xzy, cRad, cLen), bx);\n  DMINQ (idPin);\n  q = p;\n  q.xz -= vec2 (aRot * wlRad, wlRad) * sp.z;\n  q.x = mod (q.x + 0.5 * lnkLen, lnkLen) - 0.5 * lnkLen;\n  d = max (PrCylDf (q.xzy, cRad, cLen), - bx);\n  DMINQ (idPin);\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    by = (1.3 + 0.3 * float (k)) * wlThk;\n    ds = 0.5 + float (k);\n    q = p;\n    q.xz -= vec2 (aRot * wlRad + ds * lnkLen, wlRad) * sp.z;\n    q.x = mod (q.x + lnkLen, 2. * lnkLen) - lnkLen;\n    d = max (SmoothMax (PrCaps2Df (q.zx, lnkWid, 0.5 * lnkLen), abs (abs (q.y) - by) - lnkThk, 0.002), - bx);\n    DMINQ (idPlt);\n    q = p;\n    q.x = abs (q.x) - wlGap;\n    q.xz = Rot2D (q.xz, (aRot + ds * 2. * pi / nTh) * sp.x);\n    q.xz = Rot2D (q.xz, 2. * pi * floor (0.5 * nTh * atan (q.z, - q.x) / (2. * pi) + 0.5) / (0.5 * nTh));\n    q.x += wlRad;\n    d = max (SmoothMax (PrCaps2Df (q.xz, lnkWid, 0.5 * lnkLen), abs (abs (q.y) - by) - lnkThk, 0.002), bx);\n    DMINQ (idPlt);\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{ // (Based on \"Wind Walker\")\n  vec3 q, ps;\n  float dMin, d, sx, chnSzFac;\n  int kx, kz;\n  p.xz -= bGrid * (cId + 0.5);\n  dMin = dstFar / wlk.szFac;\n  p /= wlk.szFac;\n  p.y -= lBase.y;\n  p.xz = Rot2Cs (p.xz, CosSin (0.25 * pi));\n  p.xz = vec2 (p.z, - p.x);\n  for (int k = VAR_ZERO; k < 4; k ++) {\n    kx = k / 2;\n    kz = k - 2 * kx;\n    sx = sign (float (kx) - 0.5);\n    ps = p;\n    ps.z *= (sign (float (kz) - 0.5)) * sx;\n    ps.xz += vec2 (lBase.x * sx, lBase.z);\n    q = ps;\n    q.z -= 4.;\n    q.xy = Rot2Cs (q.xy - wlk.leg[kz].v[1], wlk.leg[kz].cswAng);\n    d = PrCylAnDf (q, s_m, 2., 1.);\n    q.xy = (abs (q.x) > abs (q.y)) ? q.xy : q.yx;\n    d = min (d, max (PrBox2Df (q.xy, vec2 (s_m, 1.8)), abs (q.z) - 0.8));\n    DMINQ (idWhl);\n    for (int j = VAR_ZERO + 2; j <= 7; j ++) {\n      q = ps - vec3 (wlk.leg[kz].v[j], 0.2);\n      d = PrCylDf (q, ((j < 7) ? 1.5 : 2.5), ((j == 2) ? 5. : 3.));\n      DMINQ (idAx);\n    }\n    LinkDf (ps, wlk.leg[kz].v[0], wlk.leg[kz].cs[0], s_b, idLnkT, dMin);\n    LinkDf (ps, wlk.leg[kz].v[0], wlk.leg[kz].cs[2], s_d, idLnkT, dMin);\n    LinkDf (ps, wlk.leg[kz].v[5], wlk.leg[kz].cs[3], s_e, idLnkT, dMin);\n    LinkDf (ps, wlk.leg[kz].v[6], wlk.leg[kz].cs[4], s_g, idLnkT, dMin);\n    LinkDf (ps, wlk.leg[kz].v[6], wlk.leg[kz].cs[6], s_h, idLnkT, dMin);\n    LinkDf (ps, wlk.leg[kz].v[4], wlk.leg[kz].cs[7], s_i, idLnkT, dMin);\n    ps.z -= 1.4;\n    LinkDf (ps, wlk.leg[kz].v[0], wlk.leg[kz].cs[1], s_c, idLnk, dMin);\n    LinkDf (ps, wlk.leg[kz].v[6], wlk.leg[kz].cs[5], s_f, idLnk, dMin);\n    LinkDf (ps, wlk.leg[kz].v[2], wlk.leg[kz].cs[8], s_j, idLnk, dMin);\n    ps.z += 2.8;\n    LinkDf (ps, wlk.leg[kz].v[2], wlk.leg[kz].cs[9], s_k, idLnk, dMin);\n  }\n  q = p;\n  q.x -= 20.;\n  d = max (PrCaps2Df (vec2 (q.y, q.x - 5.), 2.5, lBase.x + 40.), abs (q.z) - lBase.z + 7.);\n  d = max (d, - PrBox2Df (vec2 (abs (q.x + 20. - s_a) - lBase.x, q.z), vec2 (17., 11.)));\n  d = max (d, 3. - length (vec2 (q.y + 5., abs (q.z) - 8.)));\n  DMINQ (idBas);\n  q = p;\n  q.x = abs (q.x) - lBase.x;\n  d = PrCylDf (q, 1.5, lBase.z + 2.);\n  DMINQ (idAx);\n  q = p;\n  q.xy -= vec2 (s_a, s_l);\n  q.x = abs (q.x) - lBase.x;\n  d = PrCylDf (q, 1.5, lBase.z - 2.);\n  DMINQ (idAx);\n  q = p;\n  q.xy -= vec2 (s_a, s_l - 1.5);\n  d = max (PrCaps2Df (q.xy, 4.5, 2.), abs (q.z) - lBase.z + 7.);\n  DMINQ (idStruc);\n  q.x = abs (q.x) - lBase.x;\n  d = max (PrCaps2Df (q.xy, 4.5, 2.), abs (abs (q.z) - 0.55 * lBase.z) - 0.25 * lBase.z);\n  DMINQ (idStruc);\n  q = p;\n  q.z = abs (abs (q.z) - 27.5);\n  q -= vec3 (s_a, 32., 24.);\n  d = max (PrCaps2Df (q.xy, 4., 28.), abs (q.z) - 1.5);\n  DMINQ (idStruc);\n  q = p;\n  q.xy -= vec2 (s_a, vAxHt);\n  d = PrCylDf (q, 2.5, lBase.z - 5.);\n  DMINQ (idAx);\n  q.xy = Rot2Cs (q.xy, wlk.csVane);\n  d = max (abs (length (q.xy - vec2 (18., 10.)) - 20.) - 0.2, q.y);\n  q.xy = Rot2Cs (q.xy, CosSin (2. * pi / 3.));\n  d = min (d, max (abs (length (q.xy - vec2 (18., 10.)) - 20.) - 0.2, q.y));\n  q.xy = Rot2Cs (q.xy, CosSin (2. * pi / 3.));\n  d = min (d, max (abs (length (q.xy - vec2 (18., 10.)) - 20.) - 0.2, q.y));\n  q.z = abs (q.z) - 27.5;\n  d = max (d, abs (q.z) - 21.);\n  DMINQ (idVane);\n  chnSzFac = 12.76;\n  q = p;\n  q.z = abs (q.z);\n  q -= vec3 (s_a, s_l, 8.);\n  dMin = chnSzFac * ChainDf (vec3 (q.xy, - q.z).xzy / chnSzFac, - wlk.leg[0].wAng,\n     24., dMin / chnSzFac);\n  q = p;\n  q.xy -= vec2 (s_a - 0.5 * lBase.x, 0.5 * (vAxHt + s_l));\n  dMin = chnSzFac * ChainDf (vec3 (Rot2D (q.xy, chnEl), - q.z).xzy / chnSzFac,\n     - wlk.leg[0].wAng - chnEl, 16., dMin / chnSzFac);\n  return wlk.szFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 rdi, p;\n  bool cNu;\n  float dHit, d, s, sb, eps;\n  if (rd.x == 0.) rd.x = 1e-4;\n  if (rd.z == 0.) rd.z = 1e-4;\n  rdi.xz = 1. / rd.xz;\n  eps = 1e-4;\n  cNu = true;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    if (cNu) {\n      cId = floor (p.xz / bGrid);\n      sb = Minv2 ((bGrid * (cId + step (0., rd.xz)) - ro.xz) * rdi.xz);\n      ObjState ();\n      cNu = false;\n    }\n    d = (Maxv2 (abs (cId)) <= grLim) ? ObjDf (p) : dstFar;\n    s = max (dHit, sb);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      cNu = true;\n    }\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps || p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  cIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    cId = floor (p.xz / bGrid);\n    if (cId != cIdP) {\n      ObjState ();\n      cIdP = cId;\n    }\n    if (Maxv2 (abs (cId)) <= grLim) {\n      h = ObjDf (p);\n      sh = min (sh, smoothstep (0., 0.05 * d, h));\n    } else h = 0.3 * bGrid;\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.7 + 0.3 * sh;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.41, 0.55);\n  } else if (rd.y < 0.) {\n    col = vec3 (0.3, 0.41, 0.55);\n  } else {\n    q = 0.02 * (ro.xz + 0.5 * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.4, 0.5, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return 0.8 * col;\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4;\n  if (idObj == idBas) {\n    col4 = vec4 (0.7, 0.8, 0.7, 0.05) * (0.9 +\n       0.1 * smoothstep (0.1, 0.13, fract (8. * abs (qHit.z) / 50. + 0.5)));\n  } else if (idObj == idStruc) {\n    col4 = vec4 (0.8, 0.9, 0.8, 0.05);\n  } else if (idObj == idLnkT) {\n    col4 = vec4 (0.85, 0.85, 0.9, 0.1) * (0.8 + 0.2 * smoothstep (0.18, 0.22, abs (qHit.y)));\n  } else if (idObj == idLnk) {\n    col4 = vec4 (0.95, 0.95, 1., 0.1) * (0.8 + 0.2 * smoothstep (0.18, 0.22,\n       abs (abs (qHit.y) - 0.8)));\n  } else if (idObj == idAx) {\n    col4 = vec4 (0.8, 0.7, 0.2, 0.1);\n  } else if (idObj == idWhl) {\n    col4 = vec4 (0.8, 0.6, 0.1, 0.1);\n  } else if (idObj == idVane) {\n    col4 = mix (vec4 (1., 1., 1., 0.), vec4 (HsvToRgb (vec3 (fract (0.4 + 0.7 * Hashfv2 (cId *\n       vec2 (1.5, 2.5) + 1.1)), 0.6, 1.)), 0.), smoothstep (0.25, 0.3, abs (abs (qHit.z) - 12.)));\n  } else if (idObj == idSprk) {\n    col4 = vec4 (0.8, 0.6, 0.1, 0.1);\n  } else if (idObj == idPin) {\n    col4 = vec4 (0.65, 0.7, 0.8, 0.1);\n  } else if (idObj == idPlt) {\n    col4 = vec4 (0.8, 0.8, 0.9, 0.1);\n  }\n  return col4;\n}\n\nfloat RippleHt (vec2 p)\n{\n  vec2 q;\n  float s1, s2;\n  q = Rot2D (p, -0.02 * pi);\n  s1 = abs (sin (4. * pi * abs (q.y + 1.5 * Fbm2 (0.7 * q))));\n  s1 = (1. - s1) * (s1 + sqrt (1. - s1 * s1));\n  q = Rot2D (p, 0.01 * pi);\n  s2 = abs (sin (3.1 * pi * abs (q.y + 1.9 * Fbm2 (0.5 * q))));\n  s2 = (1. - s2) * (s2 + sqrt (1. - s2 * s2));\n  return mix (s1, s2, 0.1 + 0.8 * smoothstep (0.3, 0.7, Fbm2 (2. * p)));\n}\n\nvec4 RippleNorm (vec2 p, vec3 vn, float f)\n{\n  vec2 e;\n  float h;\n  h = RippleHt (p);\n  e = vec2 (0.002, 0.);\n  vn.xy = Rot2D (vn.xy, f * (RippleHt (p + e) - h));\n  vn.zy = Rot2D (vn.zy, f * (RippleHt (p + e.yx) - h));\n  return vec4 (vn, h);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, vn4;\n  vec3 col, vn, q;\n  float dstObj, dstGrnd, sh, t;\n  bool isBg;\n  wlkScl = 0.07;\n  lBase = vec3 (60., 86., 60.);\n  vAxHt = 60.;\n  wlkSpd = 1.5;\n  dstGrnd = dstFar;\n  isBg = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = ObjCol ();\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    q = ro;\n    q.xz += wlkSpd * tCur;\n    t = 1. - smoothstep (0.5, 0.7, dstGrnd / dstFar);\n    vn4 = RippleNorm (0.25 * q.xz, vec3 (0., 1., 0.), 4. * t);\n    vn = vn4.xyz;\n    col4 = vec4 (0.8, 0.7, 0.4, 0.) * (1. - 0.15 * t * Fbm2 (32. * q.xz)) *\n       mix (1., 0.97 + 0.03 * smoothstep (0.1, 0.3, vn4.w), 2. * t);\n  } else {\n    col = SkyBgCol (ro, rd);\n    isBg = true;\n  }\n  if (! isBg) {\n    sh = (min (dstObj, dstGrnd) < dstFar) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n    col = col4.rgb * (0.2 + 0.2 * max (dot (vn, normalize (sunDir * vec3 (-1., 0., -1.))), 0.) +\n       0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       step (0.95, sh) * col4.a * pow (max (dot (sunDir, reflect (rd, vn)), 0.), 32.);\n    if (dstObj >= dstFar) col = mix (col, 0.8 * vec3 (0.3, 0.41, 0.55), pow (1. + rd.y, 16.));\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define N_WIN  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col, vd;\n  vec2 canvas, uv, uvv, mMid[N_WIN], ut[N_WIN], mSize, msw;\n  float el, az, azm, zmFac, asp, sr;\n  int vuId, regId;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur += 50.;\n  asp = canvas.x / canvas.y;\n  mSize = (1./5.) * vec2 (asp, 1.);\n  mMid[0] = (1. - mSize.y) * vec2 (asp, 1.);\n  for (int k = 0; k < N_WIN; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    for (int k = 0; k < N_WIN; k ++) {\n      msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n      if (Maxv2 (abs (msw)) < mSize.y) {\n        regId = k + 1;\n        msw /= 2. * mSize.y;\n        break;\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  for (int k = 0; k < N_WIN; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuId = k + 1;\n      break;\n    }\n  }\n  if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  az = 0.;\n  azm = 0.;\n  el = (vuId == 0) ? -0.11 * pi : -0.09 * pi;\n  if (mPtr.z > 0. && vuId == regId) {\n    azm = 2.5 * pi * msw.x;\n    az += azm;\n    el += 0.5 * pi * msw.y;\n  } else {\n    az = mod (az + 0.01 * pi * tCur + pi, 2. * pi) - pi;\n    el += 0.05 * pi * sin (0.015 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.03 * pi);\n  vuMat = StdVuMat (el, az);\n  if (length (uv * vec2 (1. / asp, 1.)) < 1.5 * SmoothBump (0.25, 0.75, 0.01,\n     fract (tCur / 60.))) vuId = 1 - vuId;\n  zmFac = 4.;\n  if (vuId == 0)zmFac = 2.5 * (zmFac + 4. * abs (azm));\n  bGrid = 20.;\n  grLim = (vuId == 0) ? 0. : 1.;\n  ro = vec3 (0., 0., -100.);\n  ro.y = (vuId == 0) ? 6. : 3.;\n  ro = vuMat * ro;\n  ro.xz += 0.5 * bGrid;\n  dstFar = 300.;\n  sunDir = vuMat * normalize (vec3 (0.5, 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  for (int k = 0; k < N_WIN; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 3.) col = vec3 (0.7, 0.3, 0.3);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (vec2 (p.x, sign (p.y) * (max (0., abs (p.y) - h)))) - r;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1.,\n     0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (mod (dot (p, vec2 (37., 39.)), 2. * pi)) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (mod (p + vec2 (0., 1.), 2. * pi)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (mod (dot (p, cHashVA2) + vec2 (0., cHashVA2.x), 2. * pi)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}