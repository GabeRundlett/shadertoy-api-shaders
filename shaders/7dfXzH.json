{
    "Shader": {
        "info": {
            "date": "1618259626",
            "description": "p",
            "flags": 0,
            "hasliked": 0,
            "id": "7dfXzH",
            "likes": 1,
            "name": "pentagram p",
            "published": 3,
            "tags": [
                "p"
            ],
            "usePreview": 0,
            "username": "pikmin2010",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "float sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n\tvec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(p.x*q.y-p.y*q.x),k*(p.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\nvec2 rotate(vec2 uv, float rotation, vec2 mid)\n{\nuv = (uv - mid )  * mat2( cos(rotation), -sin(rotation),sin(rotation), cos(rotation)) + mid;\nreturn uv;   \n}\n\nfloat sdPentagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n}\n\nfloat sdf(vec2 uv){\nfloat pent = sdPentagon(rotate(uv,iTime,vec2(0.))*-1.,0.09);\nvec2 trioff =uv + vec2(0.,0.26);\nfloat tri = 5.0;\nfor(float x= 0.0;x<5.;x++){\n\nvec2 t = rotate(trioff,5.*x,vec2(0.0,0.26));\ntri = min(sdTriangleIsosceles(t,vec2(0.0735,0.172)),tri);\n\n}\n\n\nfloat d =min(tri,pent);\n\nreturn d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n vec2 uv = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n \n \n    uv = rotate(uv,iTime*-0.75,vec2(0.));\n     vec3 col = vec3(0.0);\n      float d = sdf(uv);\n      //from FabriceNeyret2's comment\n      fragColor = vec4( smoothstep( 1.5/iResolution.y, 0.,abs(d)) , 0,0,1); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}