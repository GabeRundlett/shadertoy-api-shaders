{
    "Shader": {
        "info": {
            "date": "1614004381",
            "description": "sand simulation inspired by Noita\n- Click+drag to add sand\n- Space & click+drag to remove sand",
            "flags": 48,
            "hasliked": 0,
            "id": "3tKfzR",
            "likes": 11,
            "name": "SandSim",
            "published": 3,
            "tags": [
                "sand"
            ],
            "usePreview": 0,
            "username": "0x1D",
            "viewed": 431
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.4, 0.3, 0.01, 1.0) * texture( iChannel0, fragCoord.xy / iResolution.xy );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Keyboard constants definition\nconst int KEY_SPACE = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\nconst int KEY_D     = 68;\nconst int KEY_E     = 69;\nconst int KEY_F     = 70;\nconst int KEY_G     = 71;\nconst int KEY_H     = 72;\nconst int KEY_I     = 73;\nconst int KEY_J     = 74;\nconst int KEY_K     = 75;\nconst int KEY_L     = 76;\nconst int KEY_M     = 77;\nconst int KEY_N     = 78;\nconst int KEY_O     = 79;\nconst int KEY_P     = 80;\nconst int KEY_Q     = 81;\nconst int KEY_R     = 82;\nconst int KEY_S     = 83;\nconst int KEY_T     = 84;\nconst int KEY_U     = 85;\nconst int KEY_V     = 86;\nconst int KEY_W     = 87;\nconst int KEY_X     = 88;\nconst int KEY_Y     = 89;\nconst int KEY_Z     = 90;\nconst int KEY_COMMA = 188;\nconst int KEY_PER   = 190;\n\nvoid computeMovement(in vec2 fragCoord, out float remaining, out float under, out float left, out float right)\n{\n    // Under\n    float under_capacity = 0.0;\n    {\n        ivec2 uv_under = ivec2(fragCoord.xy) + ivec2(0, -1);\n        ivec2 clamped_uv_under = clamp(uv_under, ivec2(0.0), ivec2(iResolution.xy) - 1);\n        if(uv_under.x == clamped_uv_under.x && uv_under.y == clamped_uv_under.y)\n        {\n            float under = texelFetch(iChannel0, uv_under, 0).x;\n            under_capacity = 1.0 - under;\n        }\n    }\n    // sides\n    float left_capacity = 0.0;\n    float right_capacity = 0.0;    \n    // Left\n    {\n        ivec2 uv_under_left = ivec2(fragCoord.xy) + ivec2(-1, -1);\n        ivec2 clamped_uv_under_left = clamp(uv_under_left, ivec2(0.0), ivec2(iResolution.xy) - 1);\n        if(uv_under_left.x == clamped_uv_under_left.x && uv_under_left.y == clamped_uv_under_left.y)\n        {\n            float under_left = texelFetch(iChannel0, uv_under_left, 0).x;\n            left_capacity = 1.0 - under_left;\n        }\n    }\n    // Right\n    {\n        ivec2 uv_under_right = ivec2(fragCoord.xy) + ivec2(1, -1);\n        ivec2 clamped_uv_under_right = clamp(uv_under_right, ivec2(0.0), ivec2(iResolution.xy) - 1);\n        if(uv_under_right.x == clamped_uv_under_right.x && uv_under_right.y == clamped_uv_under_right.y)\n        {\n            float under_right = texelFetch(iChannel0, uv_under_right, 0).x;\n            right_capacity = 1.0 - under_right;\n        }\n    }\n    remaining = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n    // give under\n    under = min(remaining, under_capacity);\n    remaining -= under;\n    // give sides\n    float split = remaining / 2.0;\n    float min_capacity = min(left_capacity, right_capacity);   \n    float split_that_fits  = min(min_capacity, split);\n    left = split_that_fits;\n    right = split_that_fits;\n    left_capacity -= split_that_fits;\n    right_capacity -= split_that_fits;\n    left += min(remaining, left_capacity);\n    right += min(remaining, right_capacity);\n    remaining -= left;\n    remaining -= right;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    float fall_direction = 1.0;\n    if(texelFetch(iChannel1, ivec2(37, 0), 0).x > 0.0)\n        fall_direction = -1.0;\n\n    float remaining;\n    float under;\n    float left;\n    float right;\n    computeMovement(\n        fragCoord.xy,\n        remaining,\n        under,\n        left,\n        right);\n\n    // Recieving\n    {\n        float dontcare;\n        float under;\n        float left;\n        float right;\n        computeMovement(\n            fragCoord.xy + vec2(0, 1),\n            dontcare,\n            under,\n            left,\n            right);\n        remaining += under;\n    }\n    {\n        float dontcare;\n        float under;\n        float left;\n        float right;\n        computeMovement(\n            fragCoord.xy + vec2(-1, 1),\n            dontcare,\n            under,\n            left,\n            right);\n        remaining += left;\n    }\n    {\n        float dontcare;\n        float under;\n        float left;\n        float right;\n        computeMovement(\n            fragCoord.xy + vec2(1, 1),\n            dontcare,\n            under,\n            left,\n            right);\n        remaining += right;\n    }\n\n    if(iMouse.z > 0.0)\n    {\n        float created = 50.0 * iTimeDelta * clamp(1.0 - distance(iMouse.xy, fragCoord.xy) / 50.0, 0.0, 1.0);\n        if(texelFetch(iChannel1, ivec2(KEY_SPACE, 0), 0).x > 0.0)\n            remaining -= created;\n        else\n            remaining += min(1.0 - remaining, created);\n    }\n    \n    remaining = max(remaining, 0.0);\n    remaining = min(remaining, 1.0);\n    fragColor = vec4(remaining);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}