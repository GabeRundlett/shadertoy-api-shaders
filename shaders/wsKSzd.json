{
    "Shader": {
        "info": {
            "date": "1574796158",
            "description": "Just a physics engine.\nI actually did this a long time ago and though it was public. I just realized it wasnt.\nUse mouse to move stuff. Space to reset.\nModify environment variables on Common.",
            "flags": 48,
            "hasliked": 0,
            "id": "wsKSzd",
            "likes": 1,
            "name": "Simple Physics engine.",
            "published": 3,
            "tags": [
                "bounce",
                "physicsengine",
                "phisics"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "#define line_smoothness (0.01*450./iResolution.y)\nfloat line(vec2 uv, vec2 p, vec2 p2, float width){\n\tvec2 n=uv-p;\n\tvec2 w=p2-p;\n\tfloat r=clamp(dot(n,w)/dot(w,w),0.,1.);\n\tr=length(n-w*r);\n    return clamp(\n        smoothstep(\n    \t\twidth+line_smoothness,\n            width,\n            r\n        ),\n        0.,\n        1.\n    );\n}\n\nfloat f(float x,float y,float x1,float y1){\n\tx-=x1;\n    return -exp(-10.*x*x)*min(y1-flo.z,0.)+y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    \n    float pix=1./iResolution.y;\n    \n    vec2 p1=texelFetch(iChannel0,ivec2(0,0),0).xy;\n    vec2 p2=texelFetch(iChannel0,ivec2(1,0),0).xy;\n    vec2 p3=texelFetch(iChannel0,ivec2(2,0),0).xy;\n    \n    fragColor=vec4(0);\n    \n    fragColor+=line(uv,p1,p2,5.*pix);\n    fragColor+=line(uv,p1,p3,5.*pix);\n    fragColor+=line(uv,p3,p2,5.*pix);\n    \n    vec2 c1=p1-uv;\n    vec2 c2=p2-uv;\n    vec2 c3=p3-uv;\n    \n    fragColor.rgb+=vec3(0,0,1)*0.001*m1/dot(c1,c1);\n    fragColor.rgb+=vec3(1,0,0)*0.001*m2/dot(c2,c2);\n    fragColor.rgb+=vec3(0,1,0)*0.001*m3/dot(c3,c3);\n    \n    float w=smoothstep(0.,4.*pix,flo.z-dot(uv,flo.xy));\n   \t\n    float x=dot(uv,flo.yx*vec2(1,-1));\n    float y=dot(uv,flo.xy)-flo.z;\n    \n    float x1=dot(p1,flo.yx*vec2(1,-1));\n    float y1=dot(p1,flo.xy);\n\n    float x2=dot(p2,flo.yx*vec2(1,-1));\n    float y2=dot(p2,flo.xy);\n    \n    float x3=dot(p3,flo.yx*vec2(1,-1));\n    float y3=dot(p3,flo.xy);\n    \n    float f1=f(x,y,x1,y1);\n    float f2=f(x,y,x2,y2);\n    float f3=f(x,y,x3,y3);\n    \n    \n    w-=smoothstep(0.,4.*pix,f1);\n    w-=smoothstep(0.,4.*pix,f2);\n    w-=smoothstep(0.,4.*pix,f3);\n\n    \n    fragColor.rgb+=clamp(w,0.,1.)*vec3(.1);\n    \n    fragColor+=texelFetch(iChannel1,ivec2(fragCoord),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 elas(vec2 k,float d){\n\t//return normalize(k)*(dot(k,k)-d*d);\n    return normalize(k)*(length(k)-d);\n}\n\nbool keyPress(int ascii) { return (texture(iChannel1,vec2((.5+float(ascii))/256.,0.25)).x > 0.); }\n\nvec2 force(vec4 k,float mass){\n    vec2 f=vec2(0);\n    f+=g*mass;\n    \n    if(dot(k.xy,flo.xy)<=flo.z){\n        vec2 normal=dot(g,flo.xy)*flo.xy*mass;\n        vec2 anf=k.zw*mass/dt;\n        \n        vec2 fricm=dot(anf+g*mass,flo.yx*vec2(1,-1))*flo.yx*vec2(1,-1);\n        \n        f+=-normal;\n        \n        f+=clamp(-dot(anf,flo.xy),0.,max_floor_force)*flo.xy;\n        \n        f+=-(dot(k.xy,flo.xy)-flo.z)*flo.xy*mass*2000.;\n        if(friction==0.)return f;\n        \n        if(length(fricm)==0.)return f;\n    \tf+=-normalize(fricm)*min(length(fricm),length(normal)*friction);\n    }\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    if(fragCoord.x==0.5&&fragCoord.y==0.5){\n        vec2 m = (iMouse.xy*2.-iResolution.xy)/iResolution.y;\n        \n        vec4 s1=texelFetch(iChannel0,ivec2(0,0),0);\n        vec4 s2=texelFetch(iChannel0,ivec2(1,0),0);\n        vec4 s3=texelFetch(iChannel0,ivec2(2,0),0);\n        \n        vec2 w=vec2(0);\n        w+=elas(s2.xy-s1.xy,dist)*elastic_force*m2;\n        w+=elas(s3.xy-s1.xy,dist)*elastic_force*m3;\n        #if MOUSE_MODE==1\n        if(iMouse.z>0.)w+=elas(m-s1.xy,0.)*elastic_force*m1;\n        #endif\n        \n        vec2 elastic=w/m1*dt;\n        \n        s1.zw+=elastic;\n        s1.zw+=force(s1,m1)/m1*dt;\n        \n    \ts1.xy+=s1.zw*dt;\n        s1.zw-=elastic*damp_elastic;\n        \n        #if MOUSE_MODE==0\n        if(iMouse.z>0.)s1=vec4(m,0,0);\n        #endif\n        \n        if(iFrame==0||keyPress(32))s1=s10;\n        fragColor=s1;\n    }\n    if(fragCoord.x==1.5&&fragCoord.y==0.5){\n        vec4 s2=texelFetch(iChannel0,ivec2(1,0),0);\n        vec4 s1=texelFetch(iChannel0,ivec2(0,0),0);\n        vec4 s3=texelFetch(iChannel0,ivec2(2,0),0);\n        \n        vec2 w=vec2(0);\n        w+=elas(s1.xy-s2.xy,dist)*elastic_force*m1;\n        w+=elas(s3.xy-s2.xy,dist)*elastic_force*m3;\n        \n        vec2 elastic=w/m2*dt;\n        \n        s2.zw+=elastic;\n        s2.zw+=force(s2,m2)/m2*dt;\n        \n        s2.xy+=s2.zw*dt;\n        s2.zw-=elastic*damp_elastic;\n        \n        if(iFrame==0||keyPress(32))s2=s20;\n        fragColor=s2;\n    }\n    if(fragCoord.x==2.5&&fragCoord.y==0.5){\n        vec4 s3=texelFetch(iChannel0,ivec2(2,0),0);\n        vec4 s2=texelFetch(iChannel0,ivec2(1,0),0);\n        vec4 s1=texelFetch(iChannel0,ivec2(0,0),0);\n\n        vec2 w=vec2(0);\n        w+=elas(s1.xy-s3.xy,dist)*elastic_force*m1;\n        w+=elas(s2.xy-s3.xy,dist)*elastic_force*m2;\n        \n        vec2 elastic=w/m3*dt;\n        \n        s3.zw+=elastic;\n        s3.zw+=force(s3,m3)/m3*dt;\n        \n        s3.xy+=s3.zw*dt;\n        s3.zw-=elastic*damp_elastic;\n        \n        if(iFrame==0||keyPress(32))s3=s30;\n        fragColor=s3;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define tf texelFetch\nconst float pi=4.*atan(1.);\n\n\n#define MOUSE_MODE 1\n\nconst float m1=\t1.;//masses of points\nconst float m2=\t1.;\nconst float m3=\t1.;\n\nconst vec2 g=normalize(vec2(0,-1))*9.8;//gravity\n\nconst float dt=\t1./60.;\n\nconst vec3 flo=vec3(normalize(vec2(0,1)),-0.7);//floor direction: dot(floor,uv) be distance\n\nconst float friction=0.36;\nconst float max_floor_force=100.; //hability to stop fast\n\nconst float dist=0.5;//size of elastics\n\nconst float damp_elastic=0.3;//dampening (so it doesnt go boom)\nconst float elastic_force=2400.;//force\n\nvec4 s10=vec4(0,0,0,0)*dist;//shape of body \nvec4 s20=vec4(0,1,0,0)*dist;\nvec4 s30=vec4(sqrt(0.75),.5,0,0)*dist;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}