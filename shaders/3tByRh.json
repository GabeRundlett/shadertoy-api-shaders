{
    "Shader": {
        "info": {
            "date": "1593645483",
            "description": "This work was sort of a test to see if I could reproduce one of the many amazing illusions from Jagarikin.\nMore of his work: https://twitter.com/jagarikin\nColor linear interpolation by Fabrice Neyret",
            "flags": 0,
            "hasliked": 0,
            "id": "3tByRh",
            "likes": 5,
            "name": "Jagarikin illusion",
            "published": 3,
            "tags": [
                "illusion",
                "perception",
                "opart",
                "jagarikin"
            ],
            "usePreview": 0,
            "username": "ciphered",
            "viewed": 612
        },
        "renderpass": [
            {
                "code": "//\n// Very highly inspired by the work of Jagarikin \n// https://twitter.com/jagarikin\n//\n// I basically took his concept to understand how it could be implemented, before going into\n// further exploration. Please go check his work if you liked this one !\n//\n// From my understanding, the illusion of a motion comes from the shift in hue being applied\n// width a small offset on the borders. The brain was trained in extracting motion using the\n// colors, because usually in real life objects do not tend to change color, therefore a \n// change in color at a particular point is often due to a motion at the point. When an object\n// moves, a color on its surface is supposed to follow the motion of the object in the world \n// referential.\n//\n// I took the rainbow color interpolation from Fabrice Neyret \n// https://www.shadertoy.com/view/MtG3Wh\n// The color transitions are just so smooth and work so well in this context. Thanks to him !\n//\n\n#define PI 3.14159265359\n#define DELAY 0.17\n#define SIZE 0.15\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n\n\n\n// @author Fabrice Neyret \n// https://www.shadertoy.com/view/MtG3Wh\n// His color interpolation just works so well with this illusion !\nvec3 rainbow (float h) {\n\tvec4 O = mod(vec4(1,2,3,0)-3.*h, 3.); O = min(O,2.-O);     // linear rainbow\n  \tO = .5+.5*cos(6.283185*(h +vec4(0,1,-1,0)/3.));       // 1/j/jÂ² rainbow \n    //O = pow(max(O,0.),vec4(1./2.2));\t\t// gamma correction\n    return O.rgb;\n}\n\n// some sort of lerp r g b r\n// looks bad\nvec3 hsv2rgb(float h)\n{\n    h = mod(h, 1.);\n    vec3 c1 = vec3(1,0,0);\n    vec3 c2 = vec3(0,1,0);\n    vec3 c3 = vec3(0,0,1);\n    return h < .33 ? mix(c1, c2, h/.33) : \n    \th < .66 ? mix(c2, c3, (h-.33)/.33)\n        : mix(c3, c1, (h-.66)/.33);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // time\n    float t = iTime * .9;\n    \n    vec2 uv = (fragCoord - .5*iResolution.xy)  / iResolution.y;\n    uv*= iResolution.y * .01;\n    vec2 id = floor(uv);\n    uv = fract(uv) - .5;\n    uv*= rot(clamp(cos(t*.3), -.2, .2)/.2*PI*.25+ id.x*id.y);\n    // square\n    vec2 s = smoothstep(SIZE, SIZE-0.01, abs(uv));\n    float sq =  s.x * s.y;\n    \n    float hueShift = (id.x*id.y)*.04 * pow(min(1., iTime/60.), 3.5);\n    \n    // left border\n    s = smoothstep(SIZE, SIZE-0.01, abs(uv + vec2(.03, 0)));\n    float lf = min(s.x * s.y, 1.-sq);\n    float lfH = t + DELAY + hueShift;\n    vec3 lfC = rainbow(lfH);\n    \n    // right border\n    s = smoothstep(SIZE, SIZE-0.01, abs(uv - vec2(.03, 0)));\n    float rt = min(s.x * s.y, 1.-sq);\n    float rtH = t - DELAY + hueShift;\n    vec3 rtC = rainbow(rtH);\n    \n    float ch = t + hueShift;\n    vec3 c = rainbow(ch);\n    \n\n    vec3 col = vec3(.5);\n    \n    col = mix(col, c, sq);\n    col = mix(col, lfC, lf);\n    col = mix(col, rtC, rt);\n\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}