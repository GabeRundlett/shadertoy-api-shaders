{
    "Shader": {
        "info": {
            "date": "1574892634",
            "description": "Noisy triangle",
            "flags": 0,
            "hasliked": 0,
            "id": "3dKSRy",
            "likes": 4,
            "name": "triangle_noise",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "ianwall",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "float rounding = 0.0;\nfloat sharpness = 0.02;\nfloat INNER = (1./3.);\n\nfloat rand(float x)\n{\n\treturn fract(sin(x)*100000.0);    \n}\n\nfloat noise1D(float x)\n{\n    float i = floor(x);  // integer\n\tfloat f = fract(x);  // fraction\n\tfloat u = f*f*f*(f*(f*6.-15.)+10.); // custom cubic curve\n\treturn mix(rand(i), rand(i + 1.0), u); // using it in the interpolation\n}\n\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat sdEquilateralTriangle( vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdLFtri(vec2 p, float angle) {\n    vec2 c = vec2(sin(angle+0.25*3.1415), cos(angle+0.25*3.1415));\n    // clamp to box\n    vec2 outer = clamp(sqrt(2.)*c,-1., 1.);\n    vec2 sign_a, sign_b;\n    \n    if(abs(outer.x) > 1./3. && abs(outer.y) > 1./3.)\n    {\n        sign_a = vec2(-1.0, 1.0)*sign(outer.yx);\n        sign_b = -1.0*sign_a;\n    }\n    else if(abs(outer.x) > 0.5)\n    {\n        sign_a = sign(outer.xx);\n        sign_b = vec2(sign(outer.x), -sign(outer.x));\n    }\n    else\n    {\n        sign_a = vec2(-sign(outer.y), sign(outer.y));\n        sign_b = sign(outer.yy);\n    }\n    \n    return 1.0;//sdTriangle(p, sign_a*vec2(INNER), sign_b*vec2(INNER), outer);\n}\n\nfloat sdLF_inner( vec2 p )\n{\n    vec2[] v = vec2[](vec2(1.0,1.0), \n                      vec2( INNER, -INNER), \n                      vec2(-INNER, -INNER),\n                      vec2(-INNER,  INNER));\n\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=4-1; i<4; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, p.y<v[j].y, e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s*=-1.0;  \n    }\n    \n    return s*sqrt(d);\n}\n\nfloat sdLF(vec2 p)\n{\n    return min( -sdBox(p, vec2(1.0, 1.0)), sdLF_inner(p) );\n}\n\n\nfloat sdCircle( vec2 p, float r )\n{\n\treturn length(p) - r;\n}\n\nvec3 test(float d) {\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.005,abs(d)) );\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//*(0.5+0.5*sin(0.25*3.1415*iTime));    \n    //rounding = 0.2*(sin(0.5*3.1415*iTime)+1.0);\n    //sharpness = 0.1*(sin(7.0*iTime)+1.0);\n    // normalized pixel coordinates\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    uv *= 1.5;\n    uv.y += 0.2;\n#define PI 3.1415926\n    // distance\n\n    float LF =  0.0;//0.5+0.5*cos(iTime);\n    float CIRC = 1.0;//0.5+0.5*sin(iTime);\n\tfloat SUM = LF+CIRC;\n    \n    float lenB, lenG, lenR;\n    lenR = lenG = lenB = (LF*sdLF(uv)+CIRC*-sdEquilateralTriangle(uv))/SUM;\n\tfloat t = (1.0/5.0)*iTime*(2.0*3.1415936);\n    float WIGGLE = 2.5;\n    float COLOR_OFFSET = 1.25;\n    float N = WIGGLE*(1.0+sin(t));\n    lenR += N*(noise(uv+t));\n    lenG += N*(noise(uv+COLOR_OFFSET+t));\n    lenB += N*(noise(uv-COLOR_OFFSET+t));\n    \n\tfloat R = smoothstep(fwidth(lenR),0.0,(lenR));\n\tfloat G = smoothstep(fwidth(lenR),0.0,(lenG));\n\tfloat B = smoothstep(fwidth(lenR),0.0,(lenB));\n\tfragColor = vec4(pow(vec3(R,G,B),vec3(1.0/2.2)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}