{
    "Shader": {
        "info": {
            "date": "1692645291",
            "description": "clouds",
            "flags": 0,
            "hasliked": 0,
            "id": "DtXfz4",
            "likes": 1,
            "name": "Simple Clouds - Jan",
            "published": 3,
            "tags": [
                "clouds"
            ],
            "usePreview": 0,
            "username": "Jan300100",
            "viewed": 185
        },
        "renderpass": [
            {
                "code": "vec3 hash( uvec3 x )\n{  \n    //https://www.shadertoy.com/view/4lXyWN\n    \n    //multiply large prime value first.\n    uint k = 1103515245U;\n    x*= k;\n    //mix x, y, z values.\n    //Without shift operator, x, y and z value become same value.\n    x = ((x>>2u)^(x.yzx>>1u)^x.zxy)*k;\n \n    return (vec3(x)*(1.0/float(0xffffffffU)));\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\nvec3 noise(vec3 p)\n{\n    uvec3 fl = uvec3(floor(p));\n    vec3 fr = fract(p);\n    fr = smoothstep(0.0,1.0,fr);\n    vec3 tr = hash(fl + uvec3(0,0,0));\n    vec3 tl = hash(fl + uvec3(1,0,0));\n    vec3 br = hash(fl + uvec3(0,1,0));\n    vec3 bl = hash(fl + uvec3(1,1,0));\n    vec3 tr2 = hash(fl + uvec3(0,0,1));\n    vec3 tl2 = hash(fl + uvec3(1,0,1));\n    vec3 br2 = hash(fl + uvec3(0,1,1));\n    vec3 bl2 = hash(fl + uvec3(1,1,1));\n        \n    \n    vec3 res = mix(mix(mix(tr, tl, fr.x), mix(br, bl, fr.x), fr.y)\n            ,mix(mix(tr2,tl2,fr.x), mix(br2,bl2, fr.x), fr.y),fr.z);\n    \n    vec3 result = (1.0 + res)*0.5; //map to [0,1]\n\n    return res;\n}\n\nvec3 fbm(vec3 p)\n{\n    vec3 r;\n    float amp;\n    r  = 0.500 * noise(p); p = p*2.01;\n    r += 0.250 * noise(p); p = p*2.05;\n    r += 0.125 * noise(p); p = p*2.01;\n    r += 0.0625 * noise(p); p = p*2.01;\n    r += 0.03125 * noise(p); p = p*2.01;\n    r += 0.015625 * noise(p); p = p*2.01;\n    return r;\n}\n\nfloat getNoise(vec2 fragCoord)\n{\n    float t = iTime * 1.0f;\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv += vec2(5000,1000) + vec2(t, t/2.0f) * 0.02f;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 variationCoords = vec3((uv + vec2(1000)) * 10.0f, t * 0.1f);\n    vec3 noise = fbm(vec3(uv * 5.0,t * 0.1 + fbm(variationCoords).xxx)).xxx;\n    return noise.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // color\n    \n    float noise = getNoise(fragCoord);\n    vec3 sky = vec3(59, 156, 212) / 255.0f;\n    vec3 sun = vec3(255, 228, 212) / 255.0f;\n    \n    float cloudRemover = 0.5f;\n    float elevatedNoise = clamp((noise * 2.0f) - cloudRemover,0.0,1.0);\n    \n    vec3 col = sky * (vec3(1) - elevatedNoise) + elevatedNoise * sun;\n\n    // Output to screen\n    fragColor = vec4(col,0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}