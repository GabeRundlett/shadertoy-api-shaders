{
    "Shader": {
        "info": {
            "date": "1710055214",
            "description": "An approximation for Planck integral.\nPlots (not in the same scale):\nGreen - dimensionless Planck function.\nRed - its integral on (0;x).\nBlue - its integral on (x;∞).",
            "flags": 0,
            "hasliked": 0,
            "id": "4XXXWf",
            "likes": 2,
            "name": "Planck integral approx.",
            "published": 3,
            "tags": [
                "blackbody",
                "planck"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// An approximation for Planck integral in float32.\n\n// Blackbody radiation can be expressed in terms of\n// dimensionless Planck function\n//     f(x)=x^3/(exp(x)-1)\n// specifically\n//     Lν(T,ν)=(2*k^3/(c*h)^2)*T^3 * f((h/k)*(ν/T))\n//     Lλ(T,λ)=(2*k^3/(c*h^2))*(T^3/λ^2) * f((h*c/k)/(λ*T))\n// where L is spectral radiance (https://en.wikipedia.org/wiki/Spectral_radiance).\n// In SI units the expressions are:\n//     Lν(T,ν)=1.3339095411668480...e-19*T^3*f(4.7992430733662212...e-11*(ν/T))\n//     Lλ(T,λ)=3.9989602009606155...e-11*(T^3/λ^2)*f(1.4387768775039338...e-2*(λ*T))\n// The function has maximum at dimensionless Wien's displacement\n// constant (https://en.wikipedia.org/wiki/Wien%27s_displacement_law):\n//     f(2.821439384...)=1.421435472...\n// The integrals of this function on (a;b), here denoted F(a,b),\n// can be expressed in terms of polylogarithms (see\n// https://en.wikipedia.org/wiki/Polylogarithm), e.g.\n//     F(x,∞)=6*Li4(exp(-x))+6*x*Li3(exp(-x))+3*x^2*Li2(exp(-x))+x^3*Li1(exp(-x))\n// NOTE: Li1(z)=-ln(1-z)\n// The specific values:\n//     F(0,∞)=pi^4/15=6.493939402266829149...\n//     F(0,argmax(f))=2.298811881...\n//     F(argmax(f),∞)=4.195127520...\n// The limits are\n//     F(0,x) -> x^3/3, for x -> 0.\n//     F(x,∞) -> x^3*exp(-x), for x-> ∞.\n// This integral can be used to express radiance on an interval:\n//     L(T,ν=[νl;νh])=L(T,λ=[λl=c/νl;λh=c/νh])=(2*k^4/(c^2*h^3))*T^4 * (F((h/(k*T))*νh)-F((h/(k*T))*νl))\n// In SI units the expressions are:\n//     L(T,ν=[νl;νh])=2.7794165054266253...e-9*T^4 * (F(4.79924307336622124...e-11*νh/T)-F(4.79924307336622124...e-11*νl/T))\n//     L(T,λ=[λl;λh])=2.7794165054266253...e-9*T^4 * (F(1.4387768775039338...e-2/(λl*T))-F(1.4387768775039338...e-2/(λh*T)))\n// Since polylogarithms might not be readily available, there is\n// interest in an approximation. This shader provides such approximations,\n// in float32, targeting accuracy ~5e-6.\n//\n// References:\n//     https://physics.nist.gov/cuu/Constants/Table/allascii.txt\n//     https://github.com/Expander/polylogarithm\n//     Shilkov, A. V. (2013). Approximation of Planck distribution. Mathematical Models and Computer Simulations, 5(2), 175–179. doi:10.1134/s2070048213020075\n//     https://www.researchgate.net/publication/249333449_Integration_of_Planck's_equation_by_the_Laguerre-Gauss_quadrature_method\n//     Lampret, V., Peternelj, J., & Krainer, A. (2002). Luminous flux and luminous efficacy of black-body radiation: an analytical approximation. Solar Energy, 73(5), 319–326. doi:10.1016/s0038-092x(02)00119-6\n\n// Dimensionless Planck function.\nfloat f(float x)\n{\n    if(x<1e-4) return x*x*(1.0-0.5*x); // Threshold for float32.\n    return x*x*x/(exp(x)-1.0);         // Consider expm1(), if available.\n}\n\n// Approximation of F(0,x) on 0<=x<3.\n// Erel ~2e-7.\nfloat Fl(float x)\n{\n    return (x*x*x)/(3.0+\n        +x*(1.125\n        +x*(+0.27187685471429923\n        +x*(+0.045693804205886764\n        +x*(+0.0053482741857730351\n        +x*(+0.00036685096957912695\n        +x*(+1.4474446263319606e-5\n        +x*(-4.3436290804519715e-6))))))));\n}\n\n// Approximation of F(x,inf) on 3<=x<inf.\n// Erel ~2e-6.\nfloat Fh(float x)\n{\n    if(x>256.0) return 0.0;\n    float t=1.0/x;\n    float z=1.0\n        +t*(+2.9994867209819827\n        +t*(+6.0810132088479918\n        +t*(+1.3799001988605457\n        +t*(+129.34026248712874\n        +t*(-1993.8553750728743\n        +t*(+17727.862492064283\n        +t*(-92968.402214583955\n        +t*(+297833.75964991300\n        +t*(-577001.02853966993\n        +t*(+623365.24235570675\n        +t*(-288939.62487891765)))))))))));\n    return x*x*x*exp(-x)*z;\n}\n\n// Approximation of F(a,b) on 0<=a,b<inf.\nfloat F(float a,float b)\n{\n    const float T=3.0;                   // Threshold.\n    const float S=6.4939394022668291491; // pi^4/15.\n    if(abs(a-b)<min(max(a,b),1.0)/32.0)\n    {\n        // The primary method is not suitable for thin\n        // intervals, but in this case, one step of\n        // the Simpson rule provides enough accuracy.\n        return (f(a)+4.0*f(0.5*(a+b))+f(b))*(b-a)/6.0;\n    }\n    if(max(a,b)<=T) return Fl(b)-Fl(a);\n    if(min(a,b)>=T) return Fh(a)-Fh(b);\n    if(a<=T) return S-Fl(a)-Fh(b);\n    if(b<=T) return Fh(a)+Fl(b)-S;\n    return 0.0;\n}\n\nvec3 plot(vec3 b,vec3 c,float t)\n{\n    float a=smoothstep(2.0*fwidth(t),0.0,abs(t));\n    return mix(b,a*c,a);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    float L=0.0,H=20.0;\n    float x=mix(L,H,fragCoord.x/iResolution.x);\n    float y=fragCoord.y/iResolution.y;\n    float X=mix(L,H,0.5+0.5*sin(iTime));\n    float d=0.0;\n    vec3 col=vec3(0.25); \n    d=y-0.5*f(x);\n    col=mix(col,(x<X?vec3(0.8,0.2,0.2):vec3(0.2,0.2,0.8)),0.5*smoothstep(fwidth(d),0.0,d));\n    col=plot(col,vec3(0.2,0.8,0.2),d);\n    col=plot(col,vec3(0.5,0.5,0.5),x-X);\n    d=y-0.125*F(0.0,x);\n    col=plot(col,vec3(0.8,0.2,0.2),d);\n    d=y-0.125*F(x,100.0);\n    col=plot(col,vec3(0.2,0.2,0.8),d);\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}