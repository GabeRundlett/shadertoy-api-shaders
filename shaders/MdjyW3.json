{
    "Shader": {
        "info": {
            "date": "1495308331",
            "description": "exploring mapping and audio",
            "flags": 96,
            "hasliked": 0,
            "id": "MdjyW3",
            "likes": 6,
            "name": "audio test Ring",
            "published": 3,
            "tags": [
                "audio"
            ],
            "usePreview": 0,
            "username": "NNenov",
            "viewed": 694
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 c = texture( iChannel0, uv );\n\tfragColor = c;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define mid (iResolution.xy / 2.0)\n#define PI (3.1415926)\n\nfloat rand( vec2 n, float t )\n{\n\treturn fract(sin(t+dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat avgFrq(float from, float to) // via https://www.shadertoy.com/view/MdByWK\n{\n    float st = (to - from) / 3.0;\n    float s = texture(iChannel0, vec2(from, 0.25)).x +\n                  texture(iChannel0, vec2(from + st, 0.25)).x +\n                  texture(iChannel0, vec2(from + st * 2.0, 0.25)).x +\n                  texture(iChannel0, vec2(from + st * 3.0, 0.25)).x;\n    return s * 0.25;\n}\n\nvec2 rotate(vec2 v, float rot) \n{\n \tmat2 ma = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    v *= ma;\n\n    return v;\n}\n\nvec3 changeSaturation(vec3 color, float saturation)\n{\n\tfloat luma = dot(vec3(0.213, 0.715, 0.072) * color, vec3(1.));\n\treturn mix(vec3(luma), color, saturation);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \tvec2 uv = (fragCoord.xy) / (iResolution.xy);\n    vec2 p = uv;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv.x += 0.1;//botch\n    uv.y += 0.5;\n    uv *= 0.5;\n    float bass = avgFrq(0.0,0.008); // rough average amplitude @ freq range (min, max)\n    float hi = avgFrq(0.7,1.);\n    \n    bool BTrig = ( bass > 0.92); //bass trigger threshold\n    bool TTrig = ( hi > 0.45); //treble trigger threshold\n    \n    // first texture row, 0. to 0.5 is frequency data\n    float fft  = texture( iChannel0, vec2(fract(uv.x),0.25) ).x; \n    \n    float t = iTime;\n    \n    uv -= 0.5;\n    \n    if (BTrig){\n        \n        uv *= rotate(uv, sin(fft*hi));\n        uv *= 2.5;\n        \n    }  \n        \n    uv = rotate(uv, t);    \n    \n    float r = length(uv);\n    float a = atan(uv.y, uv.x);\n\n    r *= 3.;  //scale\n    a = 0.5 - sin(a*PI) * 0.05 * bass;\n    \n    vec2 polar = vec2( r , a );\n    \n\t//vec2 asp = vec2(0.5, 0.5);\n    \n    if(TTrig){ \n        \n        polar *= uv;\n        polar.y *= 0.5;\n        polar += 0.5;\n        \n    }\n\n    float rOff = 0.2;// t*0.1;\n\n\tfft  = texture( iChannel0, vec2(fract(polar.y+rOff),0.25) ).x; \n\t\n    // second texture row 0.5 to 1. is the sound wave\n\tfloat wave = texture( iChannel0, vec2(polar.y,0.75) ).x;\n\n    vec3 col;\n\n    col = vec3(1.0 -  smoothstep( 0.0, fft*0.1, abs(wave - polar.x) / fft ) );\n\t\n    \n    p -= 0.5;\n    \n\tp *= 0.93+fft*0.1;\n    \n    p = rotate(p, iTime*0.000001);\n    \n    \n    p += 0.5;\n    \n    \n\tvec4 chan0 = texture( iChannel1, p );\n    \n    \n    chan0 *= bass*1.1;\n\t\n    //col = vec3(rand(cuv, t))*(abs(sin(t)*0.001));\n\n    col += chan0.rgb;\n    if (BTrig){\n    col = fract(col);\n    }\n\tfragColor = vec4(col.r, col.g, col.b, 1.);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 9001,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/skam/ferm"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}