{
    "Shader": {
        "info": {
            "date": "1622169291",
            "description": "simple  rostro  con  bezier",
            "flags": 0,
            "hasliked": 0,
            "id": "flX3W7",
            "likes": 2,
            "name": "Fork Bezier Signed Distance",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "distance"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "//modificado por:  jorge2017a1\n//referencia:\n// Signed Distance to a Quadratic Bezier Curve\n// - Adam Simmons (@adamjsimmons) 2015\n//https://www.shadertoy.com/view/ltXSDB\n// Bezier - Signed Distance\n//Created by ajs15822 in 2015-08-12\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n\n// Test if point p crosses line (a, b), returns sign of result\nfloat testCross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat signBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{ \n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0, \n        step(testCross(A, B, p) * testCross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * testCross(A, C, B);\n}\n\n// Solve cubic equation for roots\nvec3 solveCubic(float a, float b, float c)\n{\n    float p = b - a*a / 3.0, p3 = p*p*p;\n    float q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n    float d = q*q + 4.0*p3 / 27.0;\n    float offset = -a / 3.0;\n    if(d >= 0.0) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27.0 / p3) * q / 2.0) / 3.0;\n    float m = cos(v), n = sin(v)*1.732050808;\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.0) + offset;\n}\n\n// Find the signed distance from a point to a bezier curve\nfloat sdBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{    \n    B = mix(B + vec2(1e-4), B, abs(sign(B * 2.0 - A - C)));\n    vec2 a = B - A, b = A - B * 2.0 + C, c = a * 2.0, d = A - p;\n    vec3 k = vec3(3.*dot(a,b),2.*dot(a,a)+dot(d,b),dot(d,a)) / dot(b,b);      \n    vec3 t = clamp(solveCubic(k.x, k.y, k.z), 0.0, 1.0);\n    vec2 pos = A + (c + b*t.x)*t.x;\n    float dis = length(pos - p);\n    pos = A + (c + b*t.y)*t.y;\n    dis = min(dis, length(pos - p));\n    pos = A + (c + b*t.z)*t.z;\n    dis = min(dis, length(pos - p));\n    return dis * signBezier(A, B, C, p);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 uv=p;\n    p-=vec2(-1.0,-0.5);\n    p.x=p.x*0.5;\n   \n// Get the signed distance to bezier curve\n//puntos control 3  puntos\nvec2 pc1p1=vec2(.386,.451);\nvec2 pc1p2=vec2(.469,.338);\nvec2 pc1p3=vec2(.505,.338);\n\nvec2 pc2p1=vec2(.308,.755);\nvec2 pc2p2=vec2(.363,.552);\nvec2 pc2p3=vec2(.385,.451);\n\nvec2 pc3p1=vec2(.307,.753);\nvec2 pc3p2=vec2(.326,.920);\nvec2 pc3p3=vec2(.413,.931);\n\nvec2 pc4p1=vec2(.413,.931);\nvec2 pc4p2=vec2(.494,.953);\nvec2 pc4p3=vec2(.595,.942);\n\nvec2 pc5p1=vec2(.595,.940);\nvec2 pc5p2=vec2(.671,.915);\nvec2 pc5p3=vec2(.679,.750);\n\nvec2 pc6p1=vec2(.678,.747);\nvec2 pc6p2=vec2(.648,.588);\nvec2 pc6p3=vec2(.615,.462);\n\nvec2 pc7p1=vec2(.614,.464);\nvec2 pc7p2=vec2(.558,.352);\nvec2 pc7p3=vec2(.505,.330);\n\nvec2 pc8p1=vec2(.377,.703);\nvec2 pc8p2=vec2(.389,.654);\nvec2 pc8p3=vec2(.397,.621);\n\nvec2 pc9p1=vec2(.379,.706);\nvec2 pc9p2=vec2(.425,.670);\nvec2 pc9p3=vec2(.469,.624);\n\nvec2 pc10p1=vec2(.469,.624);\nvec2 pc10p2=vec2(.463,.610);\nvec2 pc10p3=vec2(.460,.599);\n\nvec2 pc11p1=vec2(.456,.599);\nvec2 pc11p2=vec2(.431,.613);\nvec2 pc11p3=vec2(.397,.621);\n\nvec2 pc12p1=vec2(.537,.624);\nvec2 pc12p2=vec2(.592,.687);\nvec2 pc12p3=vec2(.620,.706);\n\nvec2 pc13p1=vec2(.621,.706);\nvec2 pc13p2=vec2(.614,.665);\nvec2 pc13p3=vec2(.603,.629);\n\nvec2 pc14p1=vec2(.603,.629);\nvec2 pc14p2=vec2(.569,.615);\nvec2 pc14p3=vec2(.547,.602);\n\nvec2 pc15p1=vec2(.483,.462);\nvec2 pc15p2=vec2(.505,.475);\nvec2 pc15p3=vec2(.523,.462);\n\nvec2 pc16p1=vec2(.536,.624);\nvec2 pc16p2=vec2(.539,.613);\nvec2 pc16p3=vec2(.545,.604);\n    \n\nvec2 pc17p1=vec2(.612,.464);\nvec2 pc17p2=vec2(.634,.253);\nvec2 pc17p3=vec2(.650,.019);\n\nvec2 pc18p1=vec2(.382,.456);\nvec2 pc18p2=vec2(.349,.184);\nvec2 pc18p3=vec2(.354,.014);\n\nvec2 pc19p1=vec2(.491,.503);\nvec2 pc19p2=vec2(.530,.473);\nvec2 pc19p3=vec2(.508,.560);\n\nvec2 pc20p1=vec2(.266,.723);\nvec2 pc20p2=vec2(.285,.819);\nvec2 pc20p3=vec2(.305,.761);\n\nvec2 pc21p1=vec2(.266,.723);\nvec2 pc21p2=vec2(.263,.591);\nvec2 pc21p3=vec2(.318,.558);\n\nvec2 pc22p1=vec2(.318,.558);\nvec2 pc22p2=vec2(.358,.530);\nvec2 pc22p3=vec2(.357,.560);\n\nvec2 pc23p1=vec2(.668,.728);\nvec2 pc23p2=vec2(.727,.827);\nvec2 pc23p3=vec2(.727,.745);\n\nvec2 pc24p1=vec2(.729,.745);\nvec2 pc24p2=vec2(.740,.626);\nvec2 pc24p3=vec2(.665,.549);\n\nvec2 pc25p1=vec2(.643,.566);\nvec2 pc25p2=vec2(.640,.415);\nvec2 pc25p3=vec2(.664,.552);\n\n\nfloat d1= sdBezier(pc1p1,pc1p2,pc1p3,p);\nfloat d2= sdBezier(pc2p1,pc2p2,pc2p3,p);\nfloat d3= sdBezier(pc3p1,pc3p2,pc3p3,p);\n\nfloat d4= sdBezier(pc4p1,pc4p2,pc4p3,p);\nfloat d5= sdBezier(pc5p1,pc5p2,pc5p3,p);\nfloat d6= sdBezier(pc6p1,pc6p2,pc6p3,p);\nfloat d7= sdBezier(pc7p1,pc7p2,pc7p3,p);\nfloat d8= sdBezier(pc8p1,pc8p2,pc8p3,p);\nfloat d9= sdBezier(pc9p1,pc9p2,pc9p3,p);\nfloat d10= sdBezier(pc10p1,pc10p2,pc10p3,p);\nfloat d11= sdBezier(pc11p1,pc11p2,pc11p3,p);\nfloat d12= sdBezier(pc12p1,pc12p2,pc12p3,p);\nfloat d13= sdBezier(pc13p1,pc13p2,pc13p3,p);\nfloat d14= sdBezier(pc14p1,pc14p2,pc14p3,p);\nfloat d15= sdBezier(pc15p1,pc15p2,pc15p3,p);\nfloat d16= sdBezier(pc16p1,pc16p2,pc16p3,p);\n\nfloat d17a= sdCircle(uv-vec2(-0.15,0.15), 0.02 );\nfloat d18a=sdCircle(uv-vec2(0.15,0.15), 0.02 );\n\nfloat d17= sdBezier(pc17p1,pc17p2,pc17p3,p);\nfloat d18= sdBezier(pc18p1,pc18p2,pc18p3,p);\nfloat d19= sdBezier(pc19p1,pc19p2,pc19p3,p);\nfloat d20= sdBezier(pc20p1,pc20p2,pc20p3,p);\nfloat d21= sdBezier(pc21p1,pc21p2,pc21p3,p);\nfloat d22= sdBezier(pc22p1,pc22p2,pc22p3,p);\nfloat d23= sdBezier(pc23p1,pc23p2,pc23p3,p);\nfloat d24= sdBezier(pc24p1,pc24p2,pc24p3,p);\nfloat d25= sdBezier(pc25p1,pc25p2,pc25p3,p);\n \n    fragColor = vec4(0.1,0.4,0.7,1.0);\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d1)) );\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d2)) );\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d3)) );\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d4)) );\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d5)) );\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d6)) );\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d7)) );\n    fragColor = mix(fragColor, vec4(0.0), 1.0-smoothstep(0.0,0.01,abs(d8)) );\n    fragColor = mix(fragColor, vec4(0.0), 1.0-smoothstep(0.0,0.01,abs(d9)) );\n    fragColor = mix(fragColor, vec4(0.0), 1.0-smoothstep(0.0,0.01,abs(d10)) );\n    fragColor = mix(fragColor, vec4(0.0), 1.0-smoothstep(0.0,0.01,abs(d11)) );\n    fragColor = mix(fragColor, vec4(0.0), 1.0-smoothstep(0.0,0.01,abs(d12)) );\n    fragColor = mix(fragColor, vec4(0.0), 1.0-smoothstep(0.0,0.01,abs(d13)) );\n    fragColor = mix(fragColor, vec4(0.0), 1.0-smoothstep(0.0,0.01,abs(d14)));\n    fragColor = mix(fragColor, vec4(0.0), 1.0-smoothstep(0.0,0.01,abs(d15)));\n    fragColor = mix(fragColor, vec4(0.0), 1.0-smoothstep(0.0,0.01,abs(d16)));\n    \n    \n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d17)));\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d18)));\n    fragColor = mix(fragColor, vec4(0.0), 1.0-smoothstep(0.0,0.01,abs(d19)));\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d20)));\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d21)));\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d22)));\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d23)));\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d24)));\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.01,abs(d25)));\n    \n    \n    \n    //ojos\n    fragColor = mix(fragColor, vec4(0.5,0.0,0.15,1.0), 1.0-smoothstep(0.0,0.01,d17a )  );\n    fragColor = mix(fragColor, vec4(0.5,0.0,0.15,1.0), 1.0-smoothstep(0.0,0.01,d18a )  );\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}