{
    "Shader": {
        "info": {
            "date": "1708104411",
            "description": "I created a triangle tiling from scratch. The cats and rainbows are just for decoration and to showcase all the parameters. üåàüê±",
            "flags": 0,
            "hasliked": 0,
            "id": "lXsGWj",
            "likes": 12,
            "name": "Triangle Tiling Grid",
            "published": 3,
            "tags": [
                "grid",
                "triangle",
                "edge",
                "geometry",
                "pattern",
                "tiling",
                "tri"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright ¬© 2024 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nI looked up triangle tiling algorithms, but the code I found was incorrect or \nillegible. So I created my own from scratch. It seems correct. Not sure how it \ncompares to other implementations in terms of performance.\n\nThe rainbow cats may be optional.\n*/\n\n// Define a struct to hold the grid coordinates, ID coordinates, and edge distance\nstruct Tiling {\n    vec2 grid;\n    vec2 id;\n    float eDist;\n};\n\n// This generates am equilateral triangle tiling grid\n#define ROOT3           1.7320508076\n#define HALF_ROOT3      0.8660254038\n#define ONE_OVER_ROOT3  0.5773502692\n#define TWO_OVER_ROOT3  1.1547005384\n#define HALF_OVER_ROOT3 0.2886751346\n#define TWO_ROOT3       3.4641016152\nTiling triangleTiling(vec2 uv) {\n    // Offset every other row for alternating rows\n    float offset = mod(floor(uv.y * TWO_OVER_ROOT3 - 1.0), 2.0);\n    uv.x += offset * 0.5;\n    \n    // Define the size of the triangle within a rectangle\n    vec2 size = vec2(1.0, HALF_ROOT3);\n    \n    // Calculate coordinates from the center of two potential triangles\n    vec2 sideA = mod(uv, size) - vec2(0.5, ONE_OVER_ROOT3);\n    vec2 sideB = mod(uv + vec2(0.5, 0.0), size) - vec2(0.5, HALF_OVER_ROOT3);\n\n    vec2 grid;\n    float chess;\n    // Choose the cell with the shorter distance to the triangle center\n    if (dot(sideA, sideA) < dot(sideB, sideB)) {\n        grid = sideA;\n        chess = 1.0;\n    } else {\n        grid = sideB;\n        chess = -1.0;\n    }\n\n    // Generate unique IDs for each triangle cell\n    // Multiply so the rounded IDs remain unique, plus tiny offset to avoid float errors\n    vec2 id = (uv - grid) * vec2(2., TWO_OVER_ROOT3) - vec2(offset,0) + 0.0001; \n\n    // Calculate the edge distance with a range of 0-1\n    vec2 flipUV = vec2(grid.x, grid.y * chess); // Flip y so it's on the longer side\n    float diagonalA = flipUV.x * HALF_ROOT3 + flipUV.y * 0.5; // Rotate by 60 degrees\n    float diagonalB = flipUV.y - diagonalA; // Rotate by -60 degrees\n    float edgeDistance = 1.0 - max(flipUV.y, -min(diagonalA, diagonalB)) * TWO_ROOT3;\n    \n    // Weights for barycentric interpolation\n    vec3 weights = vec3(HALF_OVER_ROOT3 - flipUV.y,\n                        diagonalA + HALF_OVER_ROOT3, \n                        diagonalB + HALF_OVER_ROOT3) * TWO_OVER_ROOT3;\n    \n    return Tiling(grid, id, edgeDistance);\n}\n\n// main function calling triangle rainbow cats\n#define TWO_PI 6.28318530718\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Square UVs with (0,0) in the center\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    // Scale and offset coordinates \n    float aniSpeed = iTime * 0.1;\n    vec2 triUV = (uv + vec2(sin(aniSpeed), cos(aniSpeed))) * 2.5;\n    \n    // Sample triangle tiling\n    Tiling tri = triangleTiling(triUV);\n\n    // Sample noise from cell ID\n    float noise = hash12(tri.id + 109.);\n\n    // Make animated angle\n    float angle = noise * TWO_PI + iTime * noise * 1.;\n\n    // Rotate the cell coordinates\n    vec2 rotation = vec2(sin(angle), cos(angle));\n    vec2 grid = rotateUV(tri.grid, rotation);\n\n    // Sample and animate nyan cat\n    float scale = mix(1.3, 3., noise);\n    vec2 offset = vec2(0.5, 0.5 - noise * 0.5);\n    grid = grid * scale + offset;\n    vec4 cat = nyanCat(iChannel0, grid, iTime * mix(2.,12.,noise));\n\n    // Create a rainbow background\n    vec3 color = 0.5 + 0.5 * cos(grid.xyx + vec3(0, 2, 4) + angle);\n\n    // Sample texture for wobbling lines\n    float orbitSpeed = iTime * 0.5;\n    vec2 orbit = vec2(sin(orbitSpeed), cos(orbitSpeed));\n    float textureNoise = texture(iChannel1, (uv + orbit) * 0.1).x;\n\n    // Calculate anti-aliasing effect\n    vec2 uvFwidth = fwidth(triUV) * 3.;\n    float aa = max(uvFwidth.x, uvFwidth.y);\n\n    // Add a dividing line between triangles\n    float linethickness = mix(0.01, 0.1, textureNoise);    \n    #ifdef AA\n        // With anti-aliasing\n        color -= smoothstep(linethickness + aa, linethickness - aa, tri.eDist);\n    #else\n        // Without AA\n        color -= step(tri.eDist, linethickness);\n    #endif\n    \n    // Add Ring around the Center\n    float centerDist = abs(length(tri.grid)*4. - noise);\n    #ifdef AA\n        // With anti-aliasing\n            color += smoothstep(linethickness + aa, linethickness - aa, centerDist);\n    #else\n        // Without AA\n        color += step(centerDist, linethickness);\n    #endif\n\n    // Overlay the cat\n    color = mix(color, cat.xyz, cat.w);   \n\n    // Output to screen\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Disable AA effect\n#define AA\n\n// GENERIC FUNCTIONS ___________________________________________________________\n\n// My customized hash which is faster than a texture lookup\n// inspired by David Hoskins https://www.shadertoy.com/view/XdGfRR\n#define FPRIME 1317666547U\n#define VPRIME uvec2(3480082861U, 2420690917U)\n#define SMALLESTFLOAT (1.0 / float(0xffffffffU))\nfloat hash12(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * VPRIME;\n\tuint n = (q.x & q.y) * FPRIME;\n\treturn float(n) * SMALLESTFLOAT;\n}\n\n// Rotate UV in vector direction\nvec2 rotateUV(vec2 uv, vec2 direction) {\n    // Calculate the rotation matrix\n    mat2 rotationMatrix = mat2( direction.y, direction.x,\n                                -direction.x, direction.y );\n\n    // Rotate the UV coordinates\n    return rotationMatrix * uv;\n}\n\n// applies Anti Aliasing to texture samples meant for pixel art\nvec4 aaTextureSample(sampler2D tex, vec2 uv) {\n    // Get the size of the texture in pixels\n    vec2 texsize = vec2(textureSize(tex, 0));\n        \n    // Scale the UV coordinates by the texture size and shift by 0.5\n    vec2 scaledUV = uv * texsize - 0.5;\n    \n    // Calculate the rate of change of `uv` to apply anti-aliasing\n\tvec2 fw = fwidth(scaledUV); // multiply with factor for the blur strength\n    \n    // Apply smooth stair like pattern to the UV coordinates\n    // for the math see: https://www.desmos.com/calculator/0p2hp7look\n    vec2 uvAA = (floor(scaledUV) + smoothstep(0.5 - fw, 0.5 + fw, fract(scaledUV)) + 0.5) / texsize;\n    \n    // Sample the texture at the anti-aliased UV coordinates\n\treturn textureLod(tex, uvAA, 0.);\n}\n\n// Flipbook animation nyan cat from IQ: https://www.shadertoy.com/view/lsX3Rr\nvec4 nyanCat(sampler2D tex, vec2 uv, float time) {\n    // prevent repetition\n    vec2 catUV = clamp( uv, 0.0, 1.0 );\n    \n    // offset for flipbook animation\n\tfloat offset = floor( mod( time, 6.0 ) );\n\n    // scale cat to full uv size\n\tfloat scale = 40.0/256.0;\n    \n    // apply flipbook offset\n\tcatUV.x = catUV.x * scale + offset * scale;\n    \n    #ifdef AA\n        // Sample Cat texture with anti-aliasing\n        return aaTextureSample(tex, catUV);\n    #else \n        // Sample Cat texture without anti-aliasing using texelFetch\n        ivec2 texSize = textureSize(tex, 0); // Get the texture size for level 0\n        ivec2 texelCoords = ivec2(catUV * vec2(texSize)); // Convert UVs to texel coordinates\n        return texelFetch(tex, texelCoords, 0); // Fetch the texel\n    #endif\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}