{
    "Shader": {
        "info": {
            "date": "1612193541",
            "description": "Making an eye using fbm",
            "flags": 0,
            "hasliked": 0,
            "id": "3lcBzH",
            "likes": 5,
            "name": "abyss in your eye ",
            "published": 3,
            "tags": [
                "noise",
                "mix",
                "fbm",
                "eye",
                "color",
                "random",
                "galaxy",
                "smoothstep",
                "frequency",
                "amplitude",
                "similarity",
                "octaves"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "// followed the tutorial here https://youtu.be/emjuqqyq_qc\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n// for fbm, increase f, decrease amplitude \n/****\nfloat fbm(vec2 p){\n    float f=0.;\n    f+= 0.5000*noise(p); p*=2.02;\n    f+=0.2500*noise(p); p*=2.03;\n    f+=0.1250*noise(p); p*2.01;\n    f+=0.0625*noise(p); p*=2.04;\n    f/= 0.9375;\n    return f; \n\n}\n***/\n\n// code from https://thebookofshaders.com/13/\n#define OCTAVES 4\n\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x*=iResolution.x/iResolution.y;\n    vec2 p = -1.+2.*uv;\n    \n    p.x-=0.75;\n    float f = fbm(2.*p);\n    \n    float r = sqrt(dot(p,p));\n    float a = atan(p.y,p.x);\n    vec3 col = vec3(1.);\n    \n    float ss = 0.5+0.5*sin(iTime);\n    float anim = 1.+0.5*ss*clamp(1.-r,0.,1.);;\n    r*=anim;\n    \n    if(r<0.8){\n    \n    col = vec3(0.,0.,0.8);\n    \n    float f=fbm(p);\n    col = mix(col, vec3(0.2,0.5,0.4),f);\n   \n    \n    a+=0.08*fbm(32.*p);\n    \n    f=fbm(vec2(5.*r,20.*a));\n    col= mix(col, vec3(1.),f);\n    \n    f= smoothstep (0.2,.8,fbm(vec2(4.*r,a*18.)));\n    col *=0.5-f;\n    \n    f=1. - smoothstep(0.2,clamp(r,0.,0.5),r);\n    col*=1.-0.5*f;\n    \n    f=1.-smoothstep(0.2,0.5,r);\n    col += mix(col, vec3(sin(iTime),0.6,0.2),f);\n\n    \n    f=1.-smoothstep(0.2,0.25,r);\n    col*=1.-f;\n     \n    //adding reflections to the eye  \n    f = 1.-smoothstep(0.,0.5,length(p- vec2(0.3,0.3)*rotate2d(3.14*iTime*0.3) ));\n    col +=vec3(sin(iTime),0.9,0.5)*f*0.6;\n    \n    f=smoothstep(0.6,0.8,r);\n    col = mix(col, vec3(0.9),r);\n     \n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}