{
    "Shader": {
        "info": {
            "date": "1589026659",
            "description": "Should make bright colours on fire. ",
            "flags": 34,
            "hasliked": 0,
            "id": "tssBWB",
            "likes": 3,
            "name": "Flaming Webcam 1",
            "published": 3,
            "tags": [
                "webcam"
            ],
            "usePreview": 0,
            "username": "tomachi",
            "viewed": 666
        },
        "renderpass": [
            {
                "code": "#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n#define melting(g) texture(iChannel1, (g)/iResolution.xy)\n#define camchan(g) texture(iChannel2, (g)/iResolution.xy)\n#define brightness 1.0001\n#define yellow vec4(0.9,0.8,0.5,0.)\n#define blackwhite vec4(1.,1.,1.,0.)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \t\n    vec2 xy = fragCoord;\n    vec4 webcam = camchan(xy);\n    vec4 melt = vec4(\n        abs(melting(xy).x)*0.025,\n        abs(melting(xy).y)*0.025,\n        abs(melting(xy).z)*0.025,\n        0.\n        );\n    vec4 presh = tex(xy);\n    float r, g, b, pressure;\n  \tfloat rh, gh, bh;\n    float texbright = (melt.r + melt.g + melt.g) * 0.333;\n    float lumens = (webcam.r + webcam.g + webcam.g) * 0.333;\n    pressure = presh.w;\n  // fragColor = herbivore + (webcam * vec4(r, g, b, 1.)) + vec4(r*brightness, g*brightness, b*brightness, 1.); //  * vec4(1.0);\n\t//fragColor = webcam  + sin(tex(fragCoord).w * blackwhite);\n    if ( pressure > 6.9725 ) { \n       // fragColor = melt + (webcam*vec4(0.63))  + sin(tex(fragCoord).w * yellow);\n            // fragColor = vec4(0.);\n        \tfragColor = webcam  ;//+ sin(tex(fragCoord).w * blackwhite);\n\n\n    } else {\n        //fragColor = vec4(0.);\n        fragColor = melt + (webcam*vec4(0.925)) + (sin(tex(fragCoord).w * yellow));  \n    }\n        //fragColor = melt + (webcam*vec4(1.))  + sin(tex(fragCoord).w * yellow);\n\n    // fragColor = melt +(webcam*vec4(1.5)) + sin(tex(fragCoord).w * blackwhite);  \n\n          // fragColor = melt;// + (webcam*vec4(0.5))  + sin(tex(fragCoord).w * blackwhite);\n\n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define lightpressure 0.03\n#define brightness 3.99\n#define count 20\n#define radius 0.943\n#define emitSize 0.950\n#define force 0.99\n#define constraint 0.91\n#define effect 0.99\n#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n#define camchan(g) texture(iChannel2, (g)/iResolution.xy)\n#define wallCircle(v,d) if (length(g-(v)) < (d)) fragColor.w = fragColor.z / (length(fragColor.xy)+0.0001), fragColor.xy *= 0.\n#define emit(v,s) if (length(g-(v)) < emitSize) fragColor.xy = fragColor.xy * (1.0 - force) + force * (s), fragColor.w = 1.0\n\n// v => coord x,y / s => dir\n// v => coord x,y / d => diam\n// https://github.com/aiekick/NoodlesPlate/blob/master/fluid.glsl\n//NoodlesPlate widgets\n//uniform(hidden) \tint\t\t\t(frame) \t\t\t\t\t\tuFrame;\n//uniform(hidden) \tfloat\t\t(deltatime) \t\t\t\t\tuDeltaTime;\n//uniform(hidden) \tsampler2D\t(buffer:0) \t\t\t\t\t\tbuffer;\n//uniform(hidden) \tsampler2D\t(buffer:1) \t\t\t\t\t\tbuffer1;\n//uniform(hidden) \tvec2\t\t(buffer:0) \t\t\t\t\t\tsize;\n//uniform(color) \tvec3\t\t(0:10:7.7,6.0,7.5) \t\t\t\tcolor;\n//uniform(physic) \tfloat\t\t(0.0:1.0:0.1) \t\t\t\t\tforce;\n//uniform(prism) \tfloat\t\t(0.00001:0.1:0.01) \t\t\t\tconstraint;\n//uniform(prism) \tfloat\t\t(-1.0:1.0:0.0) \t\t\t\t\teffect;\n//uniform(prism) \tfloat\t\t(0.99:1.0:1.0) \t\t\t\t\tviscosity;\n//uniform(emit) \tfloat\t\t(1.0:20.0:5.0) \t\t\t\t\temitSize;\n//uniform(emit) \tint\t\t\t(0:50:1) \t\t\t\t\t\tcount;\n//uniform(emit) \tfloat\t\t(0.0:0.5:0.3) \t\t\t\t\tradius;\n//uniform(emit) \tfloat\t\t(checkbox:true) \t\t\t\temit;\n//uniform(shape) \tint\t\t\t(combobox:circle,triangle,quad) shapeType;\n\nfloat shape(vec2 p, vec2 d)\n{\n\tfloat r = min(d.x, d.y);\n\tfloat tri = max(abs(p.x)-p.y,p.y) - r;\n\treturn tri;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// x,y => pos\n\t// z => pressure\n\t// w => ink\n\t\n\tvec2 xy = fragCoord.xy;\n\tvec4 webcam = camchan(xy);\n\t\n\tvec2 s = iResolution.xy;\n\tvec2 g = fragCoord;\n\t\n\tvec4 a = tex(g+vec2(1,0));// + webcam.r;\n\tvec4 b = tex(g+vec2(0,1));// + webcam.g;\n\tvec4 c = tex(g+vec2(-1,0));// + webcam.b;\n\tvec4 d = tex(g+vec2(0,-1));// + (webcam.r * -0.0125);\n\tfloat lumens = (webcam.r + webcam.g + webcam.b)*0.333;\n\tfloat presh = abs(tex(xy).z);\n\tfloat ink = abs(tex(xy).w);\n\t\n\t// fragColor = tex(g-tex(g).xy); // last state\n    vec4 tomachi = vec4(1.0001,1.0002,1.0003,0.0);\n\tfragColor = tex(g-tex(g).xy)* tomachi; // last state\n\t\n\tvec2 gp = vec2(a.z-c.z,b.z-d.z); // pressure gradient\n\t\n\t//fragColor.xyz = vec3(\n\t//\tfragColor.x + gp.x,\n\t//\tfragColor.y + gp.y,\n\t//\t0.25 * (a.z + b.z + c.z + d.z) - 0.25 * (c.x - a.x + d.y - b.y));\n\t\n\t\n\tvec4 left = camchan(xy+vec2(1,0)) + tex(xy+vec2(1,0));\n\tvec4 right = camchan(xy+vec2(0,1)) + tex(xy+vec2(0,1));\n\tvec4 up = camchan(xy+vec2(-1,0)) + tex(xy+vec2(-1,0));\n\tvec4 down = camchan(xy+vec2(0,-1))+ tex(xy+vec2(1,0));\n\t//vec2 presh = vec2(left.z-right.z,up.z-down.z); // pressure gradient\n\tfloat magic = 0.25;\n\tif (lumens > 2.5 || webcam.r > 0.7 || webcam.g > 0.57) {\n\t\t//emit(xy, vec2( 0.8995+(webcam.r*-0.76), 0.4+(webcam.g*-0.95) + (webcam.b*-0.5)));\n\t\t//emit(vec2(1.+lumens*-0.5,1.+lumens*-0.5), vec2(1.+lumens*-0.5,1.+lumens*-0.5));\n\t\tmagic = 0.252;\n\t}  \n\tfloat pressure = magic * (a.z + b.z + c.z + d.z) - 0.05 * (c.x - a.x + d.y - b.y);\n\t\n\tif (lumens < 0.67 ) {\n\t\t\n        if (pressure < 0.0005) {\n       \t    //pressure *= 0.5;    \n       \t\tfragColor.z *= 0.9;\n\t\t\tfragColor.w *= 0.9;\n\t\t\t//fragColor.xy *= 1.001;\n\t\t\t//fragColor.xy *= vec2(1.0001);\n        } else {\n         \tpressure *= 1.000069;   \n        }\n    }  \n    if (lumens > 0.00595) {\n\t\t//emit(xy, vec2(-0.500, 2.0 + (lumens*-4.) ));\n\t\tpressure += (lumens*lightpressure);\n    } else {\n        //pressure *= (lumens*1.92);\n\t\tink = lumens *-1.;\n    }\n\n\t\n\t\n\t//emit(xy, 0.005);\n\tif (abs(d.b) > 0.995 && abs(a.r) > 0.995) // governs over pressure condition\n\t{\n\t\tvec2 p = vec2( webcam.r, webcam.g);\n\t\tvec2 dir = vec2( webcam.g, webcam.b);\n\t\temit(xy, dir);\n\t\tpressure *= 0.95;\t\t\n\t} \n\tif (g.x < 1. || g.y < 1. || g.x > s.x - 1. || g.y > s.y - 1.) fragColor.xy *= 0.;\n\t\n\tif ( pressure > 4.99310589015 || lumens > 0.8) {\n\t\t//pressure *= 0.995;\n\t\tfragColor.w = abs(fragColor.z) -0.05;\n\t\t//fragColor.xy = vec2(0.,0.);\n\t} \n\t// x,y => pos\n\t// z => pressure\n\t// w => ink\n\tfragColor.xyz = vec3(\n\t\tfragColor.x + gp.x + (webcam.r * 0.000099),\n\t\tfragColor.y + gp.y + (webcam.b * 0.000099),// + webcam.r,\n\t\tpressure\n\t);// + webcam.r;\n\t\n  \t//if (fragCoord.x > 0.9) fragColor = vec4(0.);\n\t//if (fragCoord.x < 0.2) fragColor = vec4(0.);\n\t//if (fragCoord.y < 0.8) fragColor = vec4(0.);\n\t//if (fragCoord.y < 0.2) fragColor = vec4(0.);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = vec2(fragCoord.x + 1., fragCoord.y + 2.);\n//    fragColor = tex(fragCoord + vec2(0.01,1.5));\n    float luma = abs(tex(xy).z); // pressure \n    float red = tex(xy).x;//    tex(xy).w; // ink \n    float green = tex(xy).y;\n    fragColor = vec4(red, green, luma, luma);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}