{
    "Shader": {
        "info": {
            "date": "1524515860",
            "description": "A different take on my entry Visualizer #2 (https://www.shadertoy.com/view/ldGyWt). The y axis serves as a history of the FFT",
            "flags": 100,
            "hasliked": 0,
            "id": "4ddBzM",
            "likes": 6,
            "name": "Visualizer #2.2",
            "published": 3,
            "tags": [
                "sound",
                "soundcloud"
            ],
            "usePreview": 0,
            "username": "cwrawls",
            "viewed": 1067
        },
        "renderpass": [
            {
                "code": "#define TWOPI 6.28318530718\n\n//comment one or the other to change which source to look at (or use both to see the sum)\n#define SOUNDCLOUD\n//#define MIC\n\n\n//hsl to rgb conversion, assuming that s & l = 1.0\nvec3 getColor(float amt) {\n\tfloat colDeg = amt * TWOPI;\n    float x = 1.0 - abs(mod(colDeg/radians(60.0), 2.0) -1.0);\n    if(colDeg < radians(60.00)){return vec3(1.0,\tx, \t\t0.0);}\n    if(colDeg < radians(120.0)){return vec3(x,\t\t1.0, \t0.0);}\n    if(colDeg < radians(180.0)){return vec3(0.0, \t1.0, \tx);}\n    if(colDeg < radians(240.0)){return vec3(0.0, \tx, \t\t1.0);}\n    if(colDeg < radians(300.0)){return vec3(x, \t\t0.0, \t1.0);}\n    return vec3(1.0, 0.0, x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0.);\n    \n    #ifdef SOUNDCLOUD\n    col += getColor(texture(iChannel0, uv).x);\n    #endif\n\t#ifdef MIC\n    col += getColor(texture(iChannel1, uv).x);\n    #endif\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//how quickly to travel towards the current amp if it is greater than old\n#define SLIDE_UP 1.0\n//how quickly to travel towards the current amp if it is less than old\n#define SLIDE_DOWN 40.0\n\n//modify to set the depth of history to be kept\n#define BANDCOUNT 100.0\n\nvec3 slideAmp(vec2 uv) {\n    //get the past frame's value\n   \tfloat ampOld = texture(iChannel1, uv).x;\n    \n    //get the new value\n    float ampCurr = texture(iChannel0, vec2(uv.x, 0.25)).x;\n    \n    //control whether up or down is used\n    float amount = ampCurr > ampOld ? 1.0 : 0.0;\n\t\n\t// calculate slide down\n\tfloat down_amt = max(1.0, abs(SLIDE_DOWN));\n\tfloat sdown = 1.0 / down_amt;\n\tvec3 down = vec3(ampOld + ((ampCurr - ampOld) * sdown));\n\n\t// calculate slide up\n\tfloat up_amt = max(1.0, abs(SLIDE_UP));\n\tfloat sup = 1.0 / up_amt;\n\tvec3 up = vec3(ampOld + ((ampCurr - ampOld) * sup));\n    \n    return mix(down, up, vec3(amount));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //get normalized coords\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float band = floor(uv.y * BANDCOUNT);\n    \n    vec2 uv2 = vec2(uv.x, band / BANDCOUNT);\n    \n    vec3 col = vec3(0.0);\n    \n    if(band == 0.0) {\n\t\tcol += slideAmp(uv2);\n    } else {\n\t\tvec2 uv3 = vec2(uv.x, (band - 1.0) / BANDCOUNT);\n        col += texture(iChannel1, uv3).xyz;\n    }\n    \n    vec3 col2 = vec3((fragCoord.y - 1.0) / iResolution.y);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 19446,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/deejaytrademark/through-the-storm-alesso-x-tritonal-x-bastille-x-mako"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//how quickly to travel towards the current amp if it is greater than old\n#define SLIDE_UP 1.0\n//how quickly to travel towards the current amp if it is less than old\n#define SLIDE_DOWN 40.0\n\n//modify to change the depth of history to be kept\n#define BANDCOUNT 100.0\n\nvec3 slideAmp(vec2 uv) {\n    //get the past frame's value\n   \tfloat ampOld = texture(iChannel1, uv).x;\n    \n    //get the new value\n    float ampCurr = texture(iChannel0, vec2(uv.x, 0.25)).x;\n    \n    //control whether up or down is used\n    float amount = ampCurr > ampOld ? 1.0 : 0.0;\n\t\n\t// calculate slide down\n\tfloat down_amt = max(1.0, abs(SLIDE_DOWN));\n\tfloat sdown = 1.0 / down_amt;\n\tvec3 down = vec3(ampOld + ((ampCurr - ampOld) * sdown));\n\n\t// calculate slide up\n\tfloat up_amt = max(1.0, abs(SLIDE_UP));\n\tfloat sup = 1.0 / up_amt;\n\tvec3 up = vec3(ampOld + ((ampCurr - ampOld) * sup));\n    \n    return mix(down, up, vec3(amount));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //get normalized coords\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float band = floor(uv.y * BANDCOUNT);\n    \n    vec2 uv2 = vec2(uv.x, band / BANDCOUNT);\n    \n    vec3 col = vec3(0.0);\n    \n    if(band == 0.0) {\n\t\tcol += slideAmp(uv2);\n    } else {\n\t\tvec2 uv3 = vec2(uv.x, (band - 1.0) / BANDCOUNT);\n        col += texture(iChannel1, uv3).xyz;\n    }\n    \n    vec3 col2 = vec3((fragCoord.y - 1.0) / iResolution.y);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}