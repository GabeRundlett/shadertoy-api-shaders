{
    "Shader": {
        "info": {
            "date": "1466092387",
            "description": "For procedural patterns and sound there is a classical trap: a space (or time) varying parameter can gives ugly fast changes (top) instead of what you expect. Indeed, you need to integrate the \"phase\" to get the right thing  (bottom). \n( mouse.x = time )",
            "flags": 0,
            "hasliked": 0,
            "id": "ldKSRt",
            "likes": 12,
            "name": "tuto: continuous varying pattern",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "sound",
                "pattern",
                "interpolation",
                "trap",
                "tuto",
                "smartblend"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1036
        },
        "renderpass": [
            {
                "code": "// For procedural patterns and sound there is a classical trap: \n// a space (or time) varying parameter can gives ugly fast changes (top)\n// instead of what you expect. \n// Indeed, you need to integrate the \"phase\" to get the right thing  (bottom). \n// see also https://www.desmos.com/calculator/7dbitjcfrf\n//      and https://www.shadertoy.com/view/ldGXWc\n\n#define f(x) ( 6.  + 4.*sin(x/5.)    )   // space varying frequency. is also phase derivative\n#define F(x) ( 6.*x -4.*cos(x/5.)*5. )   // its integration (i.e. absolute phase).\n                                         // noise (or sin for sound) is then just a post LUT.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tvec2 R = iResolution.xy;\n    U = (U+U-R)/R.y; \n    float M = length(iMouse.xy/R)<.01 ? 8.*iTime \n                                      : iMouse.x;\n    O -= O; if (abs(U.y)<.01) return;\n    float x = 20.*U.x + M;\n    \n                            // draw pattern\n\tO = sin( U.y>0. ? f(x)*x     // wrong intuition: varying frequency * x\n                    : F(x)       // good solution: real phase = int (Dphase). Dphase = freq\n           ) +O-O;\n/*\n    O = .2/abs(             // draw function\n        sin( U.y>0. ? f(x)*x     // wrong intuition: varying frequency * x\n                    : F(x)       // good solution: real phase = int (Dphase). Dphase = freq\n           ) - (2.*fract(U.y)-1.)/.6) +O-O;\n*/\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}