{
    "Shader": {
        "info": {
            "date": "1689162820",
            "description": "genenate voronoi pattern",
            "flags": 0,
            "hasliked": 0,
            "id": "dsXfWj",
            "likes": 0,
            "name": "VoronoiGenerator4489",
            "published": 3,
            "tags": [
                "voronoinoise"
            ],
            "usePreview": 0,
            "username": "shaderNoob4489",
            "viewed": 81
        },
        "renderpass": [
            {
                "code": "vec2 N22(vec2 p)\n{\n    vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    \n    // Remap pixel coordinates (from -1 to 1)\n    //uv = uv * 2. - 1.;\n    \n    vec2 uv = (2. * fragCoord - iResolution.xy) /  iResolution.y;\n    \n    float m = 0.;\n    float t = iTime * .2;\n    float minDist = 100.;\n    float cellIndex = 0.;\n    \n    vec3 col = vec3(0);\n    \n    if (false)\n    {\n        for (float i = 0.; i < 50.; i++)\n        {\n            vec2 n = N22(vec2(i));\n            vec2 p = sin(n * t);\n        \n            float d = length(uv - p);\n            m += smoothstep(.02, .01, d);\n        \n            if (d < minDist)\n            {\n                minDist = d;\n                cellIndex = i;\n            }    \n        }\n    }\n    else\n    {\n         uv *= 3.;\n         vec2 gv = fract(uv) - .5; // -.5 to make gv`s origon in gird center;\n         vec2 id = floor(uv);\n         vec2 cid = vec2(0.);\n         \n         for (float y = -1.; y <= 1.; y++)\n         {\n             for (float x = -1.; x <= 1.; x++)\n             {\n                 vec2 offs = vec2(x, y);\n                 vec2 n = N22(offs + id);\n                 vec2 p = offs + sin(n * t) * .5;\n                 float d = length(gv - p);\n                 \n                 if (d < minDist)\n                 {\n                     minDist = d;\n                     cid = id + offs;\n                 }\n             }\n         }\n         col = vec3(minDist);\n         //col.rg = cid * .1;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}