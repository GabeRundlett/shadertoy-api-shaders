{
    "Shader": {
        "info": {
            "date": "1700245445",
            "description": "Trying to make some texture",
            "flags": 0,
            "hasliked": 0,
            "id": "ctVcDD",
            "likes": 0,
            "name": "Perlin Noise testing",
            "published": 3,
            "tags": [
                "perlinnoise"
            ],
            "usePreview": 0,
            "username": "Elyades",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "float PI = 3.14159265358979323846;\nfloat TWOPI = 6.28318530718;\nfloat PIONTWO = 1.57079632679;\n\nvec3 palette2( float t ) {\n    //by Inigo Quilez\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.3,0.3,0.8);\n\n    return vec3(a + b*cos(6.28318530718*(c*(t) + d)));\n}\n\nfloat rand1(vec2 uv)\n{\n    float l = cos(uv.x + uv.y) - sin(uv.y - uv.x);\n    return ( cos(l + sin(20000000000.0*sin(TWOPI*l)) + 200.0*cos(TWOPI*l) + iTime) ); \n}\n\nfloat rand2(vec2 uv)\n{\n    return ( (cos(TWOPI*(uv.x + uv.x*uv.y + uv.y + 5.0*iTime)/9.0)) + sin(TWOPI*(uv.y+ 0.5*uv.x*uv.y*cos(uv.x + uv.x)/(4.0*sqrt(2.0)))) ) ;\n}\n\nfloat rand3(vec2 uv)\n{\n    float rand = length(uv);\n    return( rand );\n}\n\nvec2 getRandomVector (vec2 uv)\n{\n    float r1 = rand3(uv);\n    vec2 v = vec2(r1,sqrt(2.0-r1*r1));\n    return (v);\n    //return( cos(2.0*floor(200.0*uv)) + sin(2.0*floor(200.0*uv)) );\n}\n\nfloat perlinNoise(vec2 uv)\n{\n    uv = mod(uv,1.0);\n    vec2 roundDown = floor(uv);\n    vec2 roundUp = roundDown + 1.0;\n    vec2 d = uv - roundDown;\n    vec2 vecBL = getRandomVector(roundDown);\n    vec2 vecBR = getRandomVector(roundDown + vec2(1.0,0.0));\n    vec2 vecTL = getRandomVector(roundDown + vec2(0.0,1.0));\n    vec2 vecTR = getRandomVector(roundDown + 1.0);\n    \n    float prod1 = dot(d, vecBL);\n    float prod2 = dot(uv - vec2(roundUp.x,roundDown.y) ,vecBR);\n    float lerp1 = mix(prod1, prod2, d.x);\n    float prod3 = dot(uv - vec2(roundDown.x,roundUp.y) ,vecTL);\n    float prod4 = dot(uv - roundUp,vecTR);\n    float lerp2 = mix(prod3, prod4,d.x);\n    \n    float final = mix(lerp1, lerp2, d.y);\n    return(final);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy; uv -= vec2(0.5); uv *= 3.0;\n    \n    float final = perlinNoise(uv);\n    \n    vec3 col = vec3(final);\n\n    fragColor = vec4(col,1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}