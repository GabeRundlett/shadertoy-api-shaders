{
    "Shader": {
        "info": {
            "date": "1663641399",
            "description": "2d weird things",
            "flags": 0,
            "hasliked": 0,
            "id": "7lcfD2",
            "likes": 12,
            "name": "2d weird things",
            "published": 3,
            "tags": [
                "2dweirdthings"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n//2d weird things---- 19-sep-2022\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\n// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\nvec3 EscaleraX1(vec2 p,vec3 colIn,  vec3 colOut)\n{\n float t=0.0;\n    float x=p.x; \n    float fx2=3.0*sin(x)/x;\n float fx3= 2.0*noise(vec2(3.*x+t,1.0))+fx2;\n   float y1=p.y+fx3;\n    float y2=p.y+5.0;\n    float yg2= differenceSDF(y1,y2);\n    vec3 col= DrawFigBorde(colIn, colOut, yg2); //verde noise    \n    return col;\n}\n\nvec3 EscaleraX(vec2 p,vec3 colIn,  vec3 colOut)\n{   float t=mod(p.x,3.0);\n    float x=p.x;\n    float fx1=sin(x);\n    float fx5=floor(x);\n    float fx6=sin(fx5 -0.5 )+2.0*(fx5/8.0);\n    fx6+=cos(fx5*1.5 +x)+2.0*(fx5/8.0);\n    \n    float y1=p.y+fx6;\n    float y2=p.y+5.0;\n    \n    float yg0= differenceSDF(y1,y2);\n    float fxy1=yg0;\n    \n    vec3 col;\n    col= DrawFigBorde(colIn, colOut, fxy1); \n    \n    return col;\n}\n\nvec3 EscaleraY(vec2 p , vec3 colIn, vec3 colOut)\n{   float t=0.0;\n    float y=p.y;\n    float fx1=4. + 4.*smoothstep(0.0,0.7,sin(y+t));\n    float fx5=(t + floor(y-t))/2.0 - 5.0;\n    float fx6=sin(fx5 -0.5 )+2.0*(fx5/8.0);\n    \n    float y1=p.x+fx6;\n    float y2=p.x+2.0;\n    float yg0= differenceSDF(y1,y2);\n    float fxy1=yg0;\n    vec3 col= DrawFigBorde(colIn, colOut, fxy1); \n    \n    return col;\n}\n\n\nvec3 EscaleraY2(vec2 p,vec3 colIn, vec3 colOut)\n{   float t=0.0;\n    float y=p.y;\n    float fx1=4. + 4.*smoothstep(0.0,0.7,sin(y+t+cos(y*0.5)));\n    float fx5=(t + floor(y-t))/2.0 - 5.0;\n    float fx6=sin(fx5 -0.5 )+2.0*(fx5/8.0);\n    float y1=p.x+fx6;\n    float y2=p.x+2.0;\n    \n    float yg0= differenceSDF(y1,y2);\n    float fxy1=yg0;\n    vec3 col;\n    col= DrawFigBorde(colIn, colOut, fxy1); \n    return col;\n}\n\n\nvec3 EscaleraY3(vec2 p,vec3 colIn, vec3 colOut)\n{   float t=0.0;\n    float y=p.y;\n    float fx1=step(0.5,sin(y*5.0));\n    float fx5=(t + floor(y-t))/2.0 - 5.0;\n    fx5*=fx1;\n    float fx6=sin(fx5 -0.5 )+2.0*(fx5/8.0);\n    \n    float y1=p.x+fx6;\n    float y2=p.x+2.0;\n    \n    float yg0= differenceSDF(y1,y2);\n    float fxy1=yg0;\n    \n    vec3 col;\n    col= DrawFigBorde(colIn, colOut, fxy1); \n    \n    return col;\n}\n\nvec3 EscaleraY4(vec2 p,vec3 colIn, vec3 colOut)\n{   float t=0.0;\n    float y=p.y;\n    float fx1=4. + 4.*smoothstep(0.0,0.7,sin(y+t+cos(y*0.5)));\n    float fx5=(t + floor(y-t))/2.0 - 5.0;\n    fx5+=fx1;\n    float fx6=sin(fx5 -0.5 )+0.5*sin(2.0*fx5+2.0);\n    \n    float y1=p.x+fx6;\n    float y2=p.x+2.0;\n    \n    float yg0= differenceSDF(y1,y2);\n    float fxy1=yg0;\n    \n    vec3 col;\n    col= DrawFigBorde(colIn, colOut, fxy1); \n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float t=iTime*5.0;\n    float esc=8.0+3.0*sin(t+cos(t)+0.5*cos(2.0*t));\n    \n    uv*=esc;\n    vec2 uv0=uv;\n    uv.y-=3.;\n    uv.x+=-10.0+mod(t,4.0);\n     vec3 col=vec3(0.2,0.1,1.8);\n    col= EscaleraX(uv, vec3(0.1),col);\n    uv=uv0;\n    uv.y-=3.;\n    uv.x+=t;\n    col=EscaleraX1(uv,vec3(0.2,0.2,0.3),  col);\n    \n    uv.x= opRep1D(uv.x+iTime, 12.0 );\n    \n    uv.x=abs(uv.x)-0.5;\n    col= EscaleraY(uv*3.5, vec3(0.5,0.5,0.8), col);\n    \n    uv=uv0;\n    uv.x= opRep1D(uv.x+t, 20.0 );\n    uv-=vec2(-4.0,0.0);\n    uv.x=abs(uv.x)-1.5;\n    col= EscaleraY2(uv, vec3(0.5,0.5,0.1), col);\n    \n    uv=uv0;\n    uv.x= opRep1D(uv.x+t*2., 30.0 );\n    uv-=vec2(10.0,-2.0);\n    uv.x=abs(uv.x)-1.5;\n    col= EscaleraY3(uv, vec3(0.8,0.5,0.1), col);\n    \n    uv=uv0;\n    uv.x= opRep1D(uv.x+t*2., 35.0 );\n    uv-=vec2(14.0,-1.0);\n    \n    uv.x=abs(uv.x)-1.5;\n    col= EscaleraY4(uv, vec3(1.,0.1,0.1), col);\n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}