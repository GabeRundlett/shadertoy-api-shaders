{
    "Shader": {
        "info": {
            "date": "1554806869",
            "description": "Can't do this with real paint. Rectangles are attached to (virtual) colliding disks (see eg \"Molecular Diffusion\").",
            "flags": 32,
            "hasliked": 0,
            "id": "WdBXDG",
            "likes": 11,
            "name": "Mondrian in Motion",
            "published": 3,
            "tags": [
                "dynamics",
                "art"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 654
        },
        "renderpass": [
            {
                "code": "// \"Mondrian in Motion\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nvec3 HsvToRgb (vec3 c);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nvec2 Hashv2f (float p);\nvec4 Loadv4 (int idVar);\n\n#define MAX_DISK 256\n\nvec3 ltDir, qnBlk;\nvec2 qBlk;\nfloat dstFar, tCur;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec4 sLen;\n  vec3 dv;\n  float eWid;\n  eWid = 0.016;\n  sLen = vec4 (vec3 (1. + 0.8 * eWid), 0.);\n  p = abs (p);\n  dv = vec3 (PrBoxDf (p - sLen.wyz, eWid + sLen.xww), PrBoxDf (p - sLen.xwz, eWid + sLen.wyw),\n     PrBoxDf (p - sLen.xyw, eWid + sLen.wwz));\n  return Minv3 (dv);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = 1. / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, qnBlk), dot (u.yzx, qnBlk));\n  }\n  return dMin;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 stDat;\n  vec3 col, vn;\n  vec2 rcSize, uf, p, r, t, dr, c;\n  float dstObj, dstBlk, bFac, bLen, d, hb, nDotL;\n  int nDisk;\n  bool bCross;\n  dstObj = ObjRay (ro, rd);\n  dstBlk = BlkHit (ro, rd);\n  if (min (dstBlk, dstObj) < dstFar) {\n    if (dstBlk < dstObj) {\n      col = vec3 (0.95);\n      stDat = Loadv4 (MAX_DISK);\n      nDisk = int (stDat.x);\n      bFac = stDat.y;\n      bLen = bFac * floor (sqrt (float (nDisk) + 0.01));\n      uf = 0.5 * bLen * qBlk;\n      hb = 23.1 * dot (0.5 * (1. + qnBlk), vec3 (1., 2., 4.));\n      for (int n = 0; n < MAX_DISK; n ++) {\n        if (n == nDisk) break;\n        p = Loadv4 (n).xy;\n        rcSize = 0.3 + 1.7 * Hashv2f (hb + float (n + 1));\n        r = uf - p;\n        d = max (abs (r.x) - rcSize.x, abs (r.y) - rcSize.y);\n        t = abs (r) - bLen + rcSize;\n        dr = bLen * sign (p);\n        bCross = true;\n        if (min (t.x, t.y) > 0.) r += dr;\n        else if (t.x > 0.) r.x += dr.x;\n        else if (t.y > 0.) r.y += dr.y;\n        else bCross = false;\n        if (bCross) d = min (d, max (abs (r.x) - rcSize.x, abs (r.y) - rcSize.y));\n        c = Hashv2f (hb + 37.3 * float (n + 1));\n        col = mix (HsvToRgb (vec3 (floor (16. * c.x) / 16., min (0.5 + c.y, 1.), 1.)) *\n           (1. - 0.8 * smoothstep (-0.1, 0., d)), col, smoothstep (-0.01, 0., d)); \n      }\n      vn = qnBlk;\n    } else {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      col = vec3 (0.6, 0.6, 0.5);\n    }\n    nDotL = max (dot (vn, ltDir), 0.);\n    col = col * (0.2 + 0.7 * nDotL * nDotL) + 0.2 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n  } else col = vec3 (0.95, 1., 0.95) * (0.1 + 0.05 * rd.y);\n\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az -= 0.05 *  pi * tCur;\n    el -= 0.037 *  pi * tCur;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -6.);\n  dstFar = 20.;\n  ltDir = vuMat * normalize (vec3 (0.1, 0.2, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 3.3));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Mondrian in Motion\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define MAX_DISK 256\n\nconst int nDisk = 100;\nconst float pi = 3.14159;\nfloat bFac;\n\nvec4 Step (int mId)\n{\n  vec4 p;\n  vec2 dr, f;\n  float fOvlap, rSep, bLen, dt;\n  bLen = bFac * floor (sqrt (float (nDisk) + 0.01));\n  f = vec2 (0.);\n  p = Loadv4 (mId);\n  fOvlap = 1000.;\n  for (int n = 0; n < nDisk; n ++) {\n    dr = p.xy - Loadv4 (n).xy;\n    if (abs (dr.x) > 0.5 * bLen) dr.x -= bLen * sign (dr.x);\n    if (abs (dr.y) > 0.5 * bLen) dr.y -= bLen * sign (dr.y);\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) f += fOvlap * (1. / rSep - 1.) * dr;\n  }\n  dt = 0.005;\n  p.zw += dt * f;\n  p.xy += dt * p.zw;\n  p.xy -= bLen * sign (p.xy) * step (vec2 (0.5 * bLen), abs (p.xy));\n  return p;\n}\n\nvec4 Init (int mId)\n{\n  vec4 p;\n  float x, y;\n  int nDiskEdge;\n  nDiskEdge = int (sqrt (float (nDisk) + 0.01));\n  y = float (mId / nDiskEdge);\n  x = float (mId) - float (nDiskEdge) * y;\n  p.xy = bFac * ((vec2 (x + 0.25 * (2. * mod (y, 2.) - 1.), y) - 0.5 * float (nDiskEdge - 1)));\n  p.zw = 3. * sin (2. * pi * Hashff (float (mId)) + vec2 (0.5 * pi, 0.));\n  return p;\n}\n\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p;\n  vec2 iFrag;\n  int mId;\n  bool init;\n  iFrag = floor (fragCoord);\n  mId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || ! (mId < nDisk || mId == MAX_DISK)) discard;\n  init = (iFrame <= 5);\n  if (init) {\n    bFac = 1.5;\n    stDat = vec4 (float (nDisk), bFac, 0., 0.);\n  } else {\n    stDat = Loadv4 (MAX_DISK);\n    ++ stDat.z;\n    bFac = stDat.y;\n  }\n  if (mId < nDisk) {\n    if (init) p = Init (mId);\n    else p = Step (mId);\n  }\n  Savev4 (mId, ((mId < nDisk) ? p : stDat), fragColor, fragCoord);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}