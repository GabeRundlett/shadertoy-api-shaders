{
    "Shader": {
        "info": {
            "date": "1684532449",
            "description": "An auto-VJ with a worm-like shifting shape\n\n- Use with audio in iChannel0 of Buffer A -",
            "flags": 96,
            "hasliked": 0,
            "id": "dlGGWG",
            "likes": 3,
            "name": "Void Worm",
            "published": 3,
            "tags": [
                "2d",
                "music",
                "buffer"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "// VoidWorm 0.2.230519 by QuantumSuper\n// auto-vj with pseudo-3d frequency visualization\n// \n// - use with audio in iChannel0 of Buffer A -\n\nvoid mainImage( out vec4 fragColor, in vec2 fC){\n    // Read storage\n    vec4 ffts = getDat( iChannel0, vec2(0));\n\n    // Draw\n    vec3 col = (fC.x<1. && fC.y<1.)? vec3(0) : getDat( iChannel0, fC).rgb; //read buffer but not storage\n    col *= abs( cos( .06*iTime + PI/vec3(.5,2.,4.) + ffts.xyz)); //color shift \n    fragColor = vec4( col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// COMMON (0.0) of VoidWorm by QuantumSuper\n// \n// \n// - use with audio in iChannel0 of Buffer A -\n\n#define PI 3.14159265359\n#define getDat(buf,addr) texelFetch( buf, ivec2(addr), 0)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// BUFFER A (0.24) of VoidWorm by QuantumSuper\n// draw a morphing shape with polar sound texure dilation & shift it through buffer\n// \n// - use with audio in iChannel0 of Buffer A -\n\n\n#define aTime 128./60.*iTime\n#define speed max(iResolution.x,iResolution.y)/1200.\n#define isVDJ false\n\nfloat makeVDJ(float amp){ //workaround for VirtualDJ, attempts to correct for ?limiter?\n\treturn clamp(amp + .3*amp*pow(amp,5.),.0,1.);\n}\n\nvec3 makeFfts(){ //sound compression of speech range\n    vec3 ffts = vec3(0);\n\n\t// Sound (assume sound texture with 44.1kHz in 512 texels, cf. https://www.shadertoy.com/view/Xds3Rr)\n    for (int n=6;n<8;n++) ffts.x  += getDat( iChannel0, vec2(n,0)).x; //speech I, 517-689Hz\n    for (int n=8;n<14;n+=2) ffts.y  += getDat( iChannel0, vec2(n,0)).x; //speech II, 689-1206Hz\n    for (int n=14;n<24;n+=4) ffts.z  += getDat( iChannel0, vec2(n,0)).x; //speech III, 1206-2067Hz\n\tffts /= vec3(2,3,3); //normalize\n\tif (isVDJ) for (int n=0;n++<3;) ffts[n] = makeVDJ(ffts[n]);\n    return ffts;\n}\n\nmat2 rotM(float r){float c = cos(r), s = sin(r); return mat2(c,s,-s,c);} //2D rotation matrix\n\nfloat sdCircle(vec2 p){\n    return length(p)-1.;\n}\n\nfloat sdEquilateralTriangle(vec2 p){ //source: https://iquilezles.org/articles/distfunctions2d/\n    const float k = sqrt(3.);\n    p.x = abs(p.x) - 1.;\n    p.y = p.y + 1./k;\n    if (p.x+k*p.y > 0.) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.;\n    p.x -= clamp( p.x, -2., 0.);\n    return -length(p)*sign(p.y);\n}\n\nfloat sdMix(vec2 p){\n    return mix( sdCircle(p), sdEquilateralTriangle(p), sin(aTime/4.)/2.+.5);\n}\n\nfloat getShape(vec2 p, float r){ //get visual representation of sdFunctions\n    r = abs(sdMix(p/(r+.001)));\n    return smoothstep(fwidth(r),.0,r);\n}\n\nvoid mainImage( out vec4 col, in vec2 fC){\n    \n    // View definition\n    vec2 isMaxRes = vec2( iResolution.x>=iResolution.y, iResolution.x<iResolution.y); // \"bool\" vector indicating if direction is max resolution\n    vec2 uv = (2.*fC-iResolution.xy) / dot(iResolution.xy,isMaxRes); //long edge -1 to 1, square aspect ratio\n    vec2 shift = vec2( sign(speed)*.4+.02*sin(aTime), .2*sin(aTime/8.)*sin(iTime));\n    uv += mat2(shift,shift.yx) * isMaxRes; //movement\n    uv *= rotM(aTime/16.); //rotate\n    \n    // View manipulation\n    float rho = atan(-abs(uv.x),uv.y)/PI+1.; //polar angle, flipped & mirrored\n    rho = (pow(10.,rho)-1.)/9.; //exponential frequency scale of pow10 to increase visibility of lower frequencies\n    float amp = texelFetch( iChannel0, ivec2( 512.*rho, 0), 0).x; //get sound texture\n    if (isVDJ) amp = makeVDJ(amp);\n    uv /= max(.001, .6+.4*pow(amp,6.)); //warp polar view by sound texture\n    \n    // Draw Shape\n    col = vec4(.2*getShape(uv,.4));\n    if (dot(fC,isMaxRes)>speed+1.)\n        col += .997*getDat( iChannel1, fC-max(1.,abs(speed))*sign(speed)*isMaxRes); //move shape\n    \n    // Storage\n    if (fC.x<1. && fC.y<1.) col.xyz = makeFfts(); //?fC.x+fC.y<1. does not work?\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 33340,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/former/voidsong"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}