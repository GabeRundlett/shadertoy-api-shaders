{
    "Shader": {
        "info": {
            "date": "1652293390",
            "description": "Just a quick test. Fork from Alan Zucconi's https://www.shadertoy.com/view/ls2Bz1",
            "flags": 64,
            "hasliked": 0,
            "id": "stSfWw",
            "likes": 1,
            "name": "Balmer RGB",
            "published": 3,
            "tags": [
                "rgb",
                "physics",
                "spectral",
                "atomic"
            ],
            "usePreview": 0,
            "username": "josemorval",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "\nfloat saturate (float x)\n{\n    return min(1.0, max(0.0,x));\n}\nvec3 saturate (vec3 x)\n{\n    return min(vec3(1.,1.,1.), max(vec3(0.,0.,0.),x));\n}\n\n// --- Spectral Zucconi --------------------------------------------\n// By Alan Zucconi\n// Based on GPU Gems: https://developer.nvidia.com/sites/all/modules/custom/gpugems/books/GPUGems/gpugems_ch08.html\n// But with values optimised to match as close as possible the visible spectrum\n// Fits this: https://commons.wikimedia.org/wiki/File:Linear_visible_spectrum.svg\n// With weighter MSE (RGB weights: 0.3, 0.59, 0.11)\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n\tvec3 y = vec3(1.,1.,1.) - x * x;\n\ty = saturate(y-yoffset);\n\treturn y;\n}\nvec3 spectral_zucconi (float w)\n{\n    // w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\n\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\n\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\n\n\treturn bump3y (\tcs * (x - xs), ys);\n}\n\n// --- Spectral Zucconi 6 --------------------------------------------\n\n// Based on GPU Gems\n// Optimised by Alan Zucconi\nvec3 spectral_zucconi6 (float w)\n{\n\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n\tconst vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n\tconst vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n\n\tconst vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n\tconst vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n\tconst vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n\n\treturn\n\t\tbump3y(c1 * (x - x1), y1) +\n\t\tbump3y(c2 * (x - x2), y2) ;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float wl = uv.x*300.+400.;\n    \n    float s = texture(iChannel0,vec2(uv.x,0.)).r;\n    \n    //Uncomment when sound is not working\n    //s=1.;\n    \n    //Evaluate color at some wavelengths\n    vec3 col;\n    vec3 base = spectral_zucconi6(wl);\n    col = vec3(0.);\n    col += 3.*smoothstep(0.2,0.,abs(wl-410.0))*base;\n    col += 3.*smoothstep(0.2,0.,abs(wl-434.0))*base;\n    col += 3.*smoothstep(0.2,0.,abs(wl-486.0))*base;\n    col += 3.*smoothstep(0.2,0.,abs(wl-656.0))*base;\n    col += 0.1*smoothstep(10.5+10.*s,0.,abs(wl-410.0))*base*fract(13.11*iTime);\n    col += 0.1*smoothstep(10.5+10.*s,0.,abs(wl-434.0))*base*fract(14.11*iTime+0.1);\n    col += 0.1*smoothstep(10.5+10.*s,0.,abs(wl-486.0))*base*fract(12.11*iTime+0.2);\n    col += 0.1*smoothstep(10.5+10.*s,0.,abs(wl-656.0))*base*fract(15.11*iTime+0.3);\n    col *= 0.1+2.*smoothstep(0.,1.,s);\n    col += 0.15*base;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 28930,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/lasers/yellow"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}