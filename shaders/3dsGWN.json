{
    "Shader": {
        "info": {
            "date": "1546297460",
            "description": "Made live shading style :D\n(and a happy new year 2019 to you all!)",
            "flags": 0,
            "hasliked": 0,
            "id": "3dsGWN",
            "likes": 3,
            "name": "Alien Cathedral",
            "published": 3,
            "tags": [
                "raymarching",
                "distancefield",
                "liveshading"
            ],
            "usePreview": 0,
            "username": "Alkama",
            "viewed": 534
        },
        "renderpass": [
            {
                "code": "#define t iTime*.5\n#define sat(s) clamp(s, 0., 1.)\n#define spow(v, p) sat(pow(v, p))\n\nconst int MAX_ITER = 100;\nconst float MAX_DIST = 40.;\n\nfloat vmax(vec3 v) { return max(max(v.x, v.y), v.z); }\nfloat vmin(vec3 v) { return min(min(v.x, v.y), v.z); }\n\nfloat sphere(vec3 p, float s) { return length(p) - s; }\nfloat box(vec3 p, vec3 s) { return vmax(abs(p)-s); }\n\nvec2 repeat(vec2 p, float n) { return mod(p, n) - .5*n; }\nvec3 scale(vec3 p, vec3 n) { return (p/n) * n; }\n\nstruct ray {\n  vec3 o, d;\n};\nstruct material {\n  vec3 d, s;\n  float sh;\n};\n\nfloat dist(vec3 p) {\n  vec3 sp = p;\n\n  sp.xz = repeat(p.xz, 1.5);\n  sp.y *= .25 + .05*sin(4.*cos(t)+p.z);\n\n  vec3 sp2 = sp;\n  sp2 *= 1. + .1*sin(3.*t+fract(10.*p.y+20.*p.z));\n\n  float b = box(sp, vec3(.8, 1.9,.8));\n  float ss = sphere(sp, .996+.025*sin(p.x+p.y+t*3.));\n  float ss2 = sphere(sp, .1);\n  float s = min(max(-ss, b), ss2);\n\n  float pl = p.y + 2.;\n  return min(s, pl);\n}\n\nvec2 march(ray r) {\n  float d = 0.;\n  for(int i = 0; i<MAX_ITER; i++) {\n    float h = dist(r.o+r.d*d);\n    if(h<0.0001*d || d>MAX_DIST) return vec2(d, i);\n    d+=h;\n  }\n  return vec2(d, MAX_ITER);\n}\n\nvec3 normal(vec3 p) {\n  vec2 e=vec2(0,0.01);\n  return normalize(dist(p) - vec3(dist(p-e.yxx), dist(p-e.xyx), dist(p-e.xxy)));\n}\n\nvec3 shade(vec3 p, vec3 eye, material m, vec3 light) {\n  vec3 l = normalize(light-p);\n  vec3 n = normal(p);\n  vec3 v = normalize(eye-p);\n  vec3 rf = normalize(reflect(-l, n));\n  float dotln = dot(n, l);\n  float dotrv = dot(rf, v);\n  vec3 phong;\n  if (dotln <= 0.0) { phong = vec3(0); }\n  else if (dotrv <= 0.0) { phong = m.d * dotln; }\n  else phong = m.d * dotln + m.s * pow(dotrv, m.sh);\n \n  ray r;\n  r.o = p;\n  r.d = normalize(light-p);\n  vec2 lm = march(r);\n  if(length(light-p) > lm.x) phong *= .7;\n\n  return phong;\n}\n\nray camera(vec2 uv, vec3 eye, vec3 target, float zoom) {\n  ray r;\n  r.o = eye;\n  vec3 f = normalize(target - eye);\n  vec3 s = normalize(cross(vec3(0,1,0), f));\n  vec3 u = cross(f,s);\n  r.d = normalize(f*zoom + uv.x*s + uv.y*u);\n  return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy/iResolution.xy;\n  vec2 vguv = uv * (1.0 - uv);\n  float vg = pow(20.*vguv.x*vguv.y, .5);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1.);\n  \n  vec3 eye = vec3(0,0,0);\n  eye.xz += 4.*vec2(sin(cos(t*.02)*8.), cos(sin(t*.03)*12.));\n  vec3 target = vec3(0,-2,0);\n\n  ray r = camera(uv, eye, target, .2+.0125*sin(sin(t*.9)*3.));\n  vec2 m = march(r);\n  if(m.x>MAX_DIST) {\n    fragColor = vec4(0);\n    return;\n  }\n  \n  vec3 p = r.o+r.d*m.x;\n  \n  float halo = spow(3.*m.y/float(MAX_ITER), 3.);\n  float att =  spow(1. - m.x/(MAX_DIST), 10.);\n  vec3 light = vec3(0,1,0);\n  light.xz += 2.*vec2(sin(t*.5), cos(t));\n\n  material ma;\n  ma.d = vec3(.3,.3,1);\n  ma.s = vec3(1);\n  ma.sh = 10.;\n  material mb;\n  mb.d = vec3(.1,.4,.3);\n  mb.s = vec3(1);\n  mb.sh = 10.;\n  vec3 la = shade(p, eye, ma, light);\n  vec3 lb = shade(p, eye, mb, -light);\n  vec3 color = att * (la+lb);\n  color *= .1+.9*halo;\n\n  color *= vec3(vg);\n  fragColor = vec4(pow(color, vec3(1./2.2)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}