{
    "Shader": {
        "info": {
            "date": "1523491684",
            "description": "A fast and fun experiment with particles :) TV-style with hand camera or so. Slow as death.",
            "flags": 32,
            "hasliked": 0,
            "id": "MsyyW3",
            "likes": 15,
            "name": "Confinement field",
            "published": 3,
            "tags": [
                "2d",
                "tv",
                "particles"
            ],
            "usePreview": 0,
            "username": "merry",
            "viewed": 1054
        },
        "renderpass": [
            {
                "code": "#define CRT_FACTOR 1.1\n\n// Taken from: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// Taken from: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv  = fragCoord / iResolution.xy;\n    vec4 col = vec4(0);\n    float v  = 1.;\n    \n    // Fakes a CRT surface.\n    uv  = uv * 2. - 1.;\n    v   = length(uv);\n    uv  = normalize(uv) * pow(v, CRT_FACTOR);\n    uv  = uv * .5 + .5;\n\n    col = texture(iChannel0, uv);\n    col = mix(vec4(hsv2rgb(rgb2hsv(col.xyz) * vec3(.95,.95,.75)), 1), col, mix(1., hash(ivec2(sin(iTime*.1)*iResolution.x, cos(iTime*.11)*iResolution.y)),.5)); // Some HSV correction.\n\n    // Scanlines & vignetting.\n\tcol*= vec4(mix(1.2, 1. - mod(uv.y * iResolution.y * .5, 2.), .01));\n    col*= max (.9, 1. - pow(v, 5.));\n    col = mix(col, texture(iChannel1, vec2(0, cos(-iTime*.1+uv.y*.2))).xxxx, .05 * sin(fragCoord.y/iResolution.y));\n       \n    fragColor = mix(vec4(0), col, clamp(float(iTime)/5., 0., 1.));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int   kNumObjectsH = 256;\nconst int   kNumObjectsV = 10 ;\nconst float kPi = 3.14159265359;\nfloat hash(in ivec2 c)\n{\n    int x = 0x3504f333 * c.x * c.x + c.y;\n    int y = 0xf1bbcdcb * c.y * c.y + c.x;\n    \n    return float(x * y) * (2.0 / 8589934592.0) + 0.5;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    ivec2 ii  = ivec2(fragCoord.xy);\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    \n\tif (0 == (iFrame))\n    {//\tGenerates the point field.\n\t\tif ((kNumObjectsV > ii.y) && (ii.x < kNumObjectsH))\n            fragColor = vec4(sin(float(ii.x + ii.y*ii.x)/float(kNumObjectsH*kNumObjectsV) * kPi*2.), \n\t\t\t\t\t\t\t cos(float(ii.x + ii.y*ii.x)/float(kNumObjectsH*kNumObjectsV) * kPi*2.), \n                             sin(float(ii.x * 2) / float(kNumObjectsH)) , \n                             cos(float(ii.y    ) / float(kNumObjectsV)));\n    }\n    else\n    {// Updates point  field data.\n\t\tif ((kNumObjectsV > ii.y) && (ii.x < (kNumObjectsH)))\n        {\n            fragColor.zw = normalize(mix(fragColor.zw, vec2(sin(float(ii.x) / float(kNumObjectsH)*4. * kPi * 1.2 + iTime),\n\t\t\t    cos(float(ii.y * 12) / float(kNumObjectsH) * kPi * 2.2 + iTime * 1./2.2)), .1));\n\n            float lMinSize = .1 - texture(iChannel1, vec2(.1, 0)).x * .1;\n            float lMaxSize = 1.- lMinSize;\n            \n\t\t\tfragColor.xy += fragColor.zw * (.003 + texture(iChannel1,fragCoord.xy/iResolution.xy).x*.001) \n                * (1. + float(ii.x)/float(kNumObjectsH)*.5);\n                \n            if (fragColor.x < lMinSize || fragColor.x > lMaxSize) fragColor.w*=-1.; fragColor.x = mix(fragColor.x, clamp(fragColor.x, lMinSize, lMaxSize), .2);\n            if (fragColor.y < lMinSize || fragColor.y > lMaxSize) fragColor.z*=-1.; fragColor.y = mix(fragColor.y, clamp(fragColor.y, lMinSize, lMaxSize), .2);\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv.x += sin(iTime * 1./1.2)*.055;\n    uv.y += cos(iTime * 1./1.4)*.053; // Simulates some sort of camera moving.\n\n    float b = 2. + pow(abs(sin(iTime * .1 * uv.y * .5)), 2.) ;\n    float c = clamp(abs(sin(iTime) + .5), .5, 1.);\n\tfloat h = 1./iResolution.y;    \n    \n    vec4 objColor = vec4(0);\n    for (int i = 0; i < kNumObjectsH; ++i)\n    {\n        for (int j = 0; j < 10; ++j)\n        {\n            vec2 pos = texture(iChannel0, vec2(float(i) / iResolution.x, h * float(j))).xy;\n\t\t\tfloat  a = max(0., 1.- distance(pos, uv));\n\n\t        vec4 tmpColor = vec4(0);\n        \ttmpColor+= pow(a, 600.*b);        \n\t\t\ttmpColor+= pow(a,  20.*b) * .05 * abs(sin(iTime + iTime * float(i) * 2.));        \n\t\t\ttmpColor*= mix(vec4(0,0,0,1),\n        \t    vec4(\n    \t            .3 + abs(sin(iTime*.1112))*.7,\n\t                .3 + abs(cos(iTime*.1131))*.7,\n            \t    .3 + abs(sin(iTime*.5411))*.7,\n        \t        1.\n\t\t\t\t), c);\n\t        objColor+= tmpColor;\n        }\n    }\n    fragColor+= clamp(objColor * vec4(2., 1.9, 1.5, 1.), vec4(0), vec4(1)) + mix(vec4(.3,.3,.3,1.), vec4(.0,.05,.12,1.)*.5, uv.y); \n\tfragColor = mix(fragColor, texture(iChannel1, fragCoord.xy/iResolution.xy), .5);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}