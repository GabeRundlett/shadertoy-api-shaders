{
    "Shader": {
        "info": {
            "date": "1590521248",
            "description": "Distance to an egg shape (a base circle of radius ra, a tip circle of radius rb, and two circles connecting both). It is not general enough since the height could be a parameter as well by just changing the connection points between circles.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wdjfz3",
            "likes": 18,
            "name": "Simple Egg - distance 2D",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "distance",
                "egg"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2264
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A simple generaliztion of sylvain69780's shader \"Moss's EGG\":\n// https://www.shadertoy.com/view/wsBBR3\n//\n// This is also a special case of the Vesica primitive, in particular\n// this egg is just half a vesica with a circle attached at its end\n// https://www.shadertoy.com/view/XtVfRW\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and https://iquilezles.org/articles/distfunctions2d\n\n\nfloat sdEgg( in vec2 p, in float he, in float ra, in float rb )\n{\n    float ce = 0.5*(he*he-(ra-rb)*(ra-rb))/(ra-rb);\n\n    p.x = abs(p.x);\n\n    if( p.y<0.0 )             return length(p)-ra;\n    if( p.y*ce-p.x*he>he*ce ) return length(vec2(p.x,p.y-he))-rb;\n                              return length(vec2(p.x+ce,p.y))-(ce+ra);\n}\n\nfloat sdLineV( in vec2 p, in float b ) { p.y -= clamp( p.y, 0.0, b ); return length( p ); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float px = 2.0/iResolution.y;\n    \n    p.y += 0.35;\n    m.y += 0.35;\n\n    // animation\n    vec2 cen = vec2(0.0,0.0);\n    float he = 0.7 + 0.3*cos(iTime*1.0+0.0);\n    float ra = 0.5;\n    float rb = 0.2;\n    float al = smoothstep( -0.5, 0.5,sin(iTime+0.1) );\n        \n    // distance\n    float d = sdEgg(p-cen, he, ra, rb);\n    \n    // coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-7.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(90.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,1.5*px,abs(d)-0.005) );\n\n    // draw primitive parameters\n    d = abs( sdLineV(p-cen,he));\n    d = min( d, abs(length(p)-ra) );\n    d = min( d, abs(length(p-vec2(0.0,he))-rb) );\n    d -= 0.003;\n\tcol = mix( col, vec3(0.0,1.0,1.0), al*(1.0-smoothstep(0.0,1.5*px,d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d = sdEgg(m-cen, he, ra, rb);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}