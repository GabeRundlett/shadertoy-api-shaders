{
    "Shader": {
        "info": {
            "date": "1686168682",
            "description": "color picker experiment\nclick or drag to select your color and complementary colors will be selected automatically",
            "flags": 32,
            "hasliked": 0,
            "id": "DlGXzy",
            "likes": 4,
            "name": "BC: Color Picker",
            "published": 3,
            "tags": [
                "colorpicker"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    vec4 bufferSample = texture(iChannel1, uv);\n    col = mix(col, bufferSample.rgb, bufferSample.a);\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define px 3./iResolution.y\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 col = getColor(uv);\n    col *= circle(uv, 0.95, px);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn mix(vec3(1.0),mix( vec3(1.0), rgb, c.y), c.z);\n}\n\nfloat circle(vec2 p, float r, float px)\n{\n    return smoothstep(px,0., length(p)-r);\n}\n\nvec3 getColor(vec2 p)\n{\n    p.y*=-1.0;\n    float r = 3.14/2.;\n    p *= mat2(cos(r),sin(r),-sin(r), cos(r));\n    vec3 col = vec3(0);\n    \n    vec2 polar = vec2(atan(p.y, p.x), length(p));\n    \n    float pi = 3.1415927;\n    \n    float percent = (polar.x + pi) / (2.0 * pi);\n    \n    vec3 tc = vec3(percent, 1., polar.y);\n    \n    col = hsv2rgb_smooth(tc);\n    \n    return col;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define px 3./iResolution.y\n\nvec4 makeSample(vec2 samplePosition, vec2 displayPosition, float s)\n{\n    vec3 col = getColor(samplePosition).rgb;\n    return vec4(col, circle(displayPosition, s, px));\n}\n\nvec4 getColors(vec2 uv)\n{\n    vec2 mouse = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    vec2 mid = uv - vec2(0.9*(iResolution.x/iResolution.y),0.);\n    float a = 0.0;\n    vec3 col = vec3(0);\n    float offset = 0.75;\n    \n    vec2 p = vec2(mouse.y, -mouse.x);\n    \n    float samples = 3.0;\n    \n    for(float i = -samples; i <= samples; i++)\n    {\n        float size = i == 0.0 ? 0.1 : 0.05;\n        vec2 pos = mouse + offset * p * i;\n        vec4 result = makeSample(pos, mid + vec2(0, 0.225) * i, size);\n        col = mix(col, result.rgb, result.a);\n        a = max(a, result.a);\n    }\n    \n    return vec4(col, a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);   \n    vec4 complementaryColors = getColors(uv);\n    fragColor = vec4(complementaryColors.rgb,complementaryColors.a);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}