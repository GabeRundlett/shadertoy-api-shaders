{
    "Shader": {
        "info": {
            "date": "1534942218",
            "description": "Cloud density noise function",
            "flags": 0,
            "hasliked": 0,
            "id": "XljBzt",
            "likes": 4,
            "name": "Perlin-Worley noise",
            "published": 3,
            "tags": [
                "noise",
                "clouds",
                "perlin",
                "worley"
            ],
            "usePreview": 0,
            "username": "wsmind",
            "viewed": 775
        },
        "renderpass": [
            {
                "code": "vec2 rand2(vec2 uv)\n{\n    uv += 0.5;\n    uv /= 256.0; // texel size\n\treturn vec2(texture(iChannel0, uv).r, texture(iChannel0, uv + 17.0 / 256.0).r);\n}\n\n\n#define WORLEY_ORDER 2\n\nfloat worley(vec2 uv)\n{\n    vec2 centerCell = floor(uv);\n    float distances[WORLEY_ORDER];\n    \n    for (int i = 0; i < WORLEY_ORDER; i++)\n        distances[i] = 1000.0;\n    \n    for (float y = -1.0; y <= 1.0; y += 1.0)\n    {\n        for (float x = -1.0; x <= 1.0; x += 1.0)\n        {\n            vec2 cell = centerCell + vec2(x, y);\n            vec2 point = cell + rand2(cell);\n            \n            float dist = distance(point, uv);\n            distances[WORLEY_ORDER - 1] = min(dist, distances[WORLEY_ORDER - 1]);\n            \n            // re-sort distances\n\t\t    for (int i = WORLEY_ORDER - 1; i > 0; i--)\n            {\n                if (distances[i] < distances[i - 1])\n                {\n                    float tmp = distances[i - 1];\n                    distances[i - 1] = distances[i];\n                    distances[i] = tmp;\n                }\n            }\n        }\n    }\n    \n    return clamp(0.7 - distances[WORLEY_ORDER - 2], 0.0, 1.0);\n}\n\nfloat worleyfbm(vec2 uv)\n{\n    float value = 0.0;\n    float factor = 1.0;\n    for (int i = 0; i < 3; i++)\n    {\n        uv += iTime * 0.04;\n        value += worley(uv * factor) / factor;\n        factor *= 2.0;\n    }\n    return value;\n}\n\nfloat smix(float a, float b, float t)\n{\n    return mix(a, b, smoothstep(0.0, 1.0, t));\n}\n\nfloat computeCorner(vec2 corner, vec2 uv)\n{\n    vec2 gradient = normalize(rand2(corner) * 2.0 - 1.0);\n    return dot(gradient, uv - corner);\n}\n\nfloat perlin(vec2 uv)\n{\n\tfloat c00 = computeCorner(floor(uv) + vec2(0.0, 0.0), uv);\n\tfloat c01 = computeCorner(floor(uv) + vec2(0.0, 1.0), uv);\n\tfloat c11 = computeCorner(floor(uv) + vec2(1.0, 1.0), uv);\n\tfloat c10 = computeCorner(floor(uv) + vec2(1.0, 0.0), uv);\n    \n    vec2 diff = uv - floor(uv);\n    \n    return smix(smix(c00, c10, diff.x), smix(c01, c11, diff.x), diff.y);\n}\n\nfloat perlinfbm(vec2 uv)\n{\n    float value = 0.0;\n    float factor = 1.0;\n    for (int i = 0; i < 3; i++)\n    {\n        value += perlin(uv * factor) / factor;\n        factor *= 2.0;\n    }\n    return value;\n}\n\nfloat perlinworley(vec2 uv)\n{\n    return perlinfbm(uv) + clamp(worleyfbm(uv * 4.0) * 0.6, 0.0, 1.0) - 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy * 5.0 / iResolution.y;\n\tfragColor = vec4(vec3(perlinworley(uv) * 0.5 + 0.5), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}