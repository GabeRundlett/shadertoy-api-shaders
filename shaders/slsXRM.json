{
    "Shader": {
        "info": {
            "date": "1625388988",
            "description": "Analytical solution to the best linear fit of a set of points. I'm planning to extend this to continuous curves (bezier curves in particular).",
            "flags": 0,
            "hasliked": 0,
            "id": "slsXRM",
            "likes": 9,
            "name": "Linear Best Fit",
            "published": 3,
            "tags": [
                "2d",
                "linear",
                "regression",
                "fitting"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "// Desmos graph: https://www.desmos.com/calculator/rpdsgju4tl\n\n// Utilities\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\n// Number of points\n#define N 50\n\n// Minimizing Σ(p[n].y - (a*p[n].x + b))² wrt a and b\nvec2 bestFitLinear(in vec2[N] p) {\n    vec4 w = vec4(0.0);\n    for (int n=0; n < N; n++) w += vec4(p[n], p[n] * p[n].xx);\n    float b = (w.y * w.z - w.x * w.w) / (float(N) * w.z - w.x * w.x);\n    return vec2((w.w - w.x * b) / w.z, b);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nvec2 getOffset(in float id) {\n    float freq = Hash11(id * 393.84 + 673.48) * 10.0 - 5.0;\n    float phase = Hash11(id * 348.46 + 183.37);\n    float amp = Hash11(id * 275.35 + 741.69);\n    float ang = iTime * freq + phase;\n    return vec2(cos(ang), sin(ang)) * amp;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Boilerplate\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec4 mouse = (abs(iMouse) - center.xyxy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Default before user interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec4(-2.0, cos(iTime), 2.0, sin(iTime));\n\n    // Grid\n    drawSDF(abs(mod(uv.x + 0.25, 0.5) - 0.25), vec3(0.0, 0.0, 1.0));\n    drawSDF(abs(mod(uv.y + 0.25, 0.5) - 0.25), vec3(0.0, 0.0, 1.0));\n    drawSDF(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    drawSDF(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    // Line drawn by the mouse\n    vec2 p1 = mouse.zw, p2 = mouse.xy;\n    float a = (p2.y - p1.y) / (p2.x - p1.x);\n    float b = p1.y - a * p1.x;\n\n    // Generate random points distributed on a line\n    vec2[N] points;\n    for (int n=0; n < N; n++) {\n        float x = float(n) / float(N) * 4.0 - 2.0;\n        points[n] = vec2(x, a * x + b) + getOffset(float(n));\n        drawSDF(length(uv - points[n]) - 0.05, vec3(0.0));\n    }\n\n    // Draw the mouse line\n    //drawSDF(abs(uv.y - (a * uv.x + b)) / sqrt(1.0 + a * a), vec3(0.0, 1.0, 0.0));\n\n    // Draw best linear fit\n    vec2 fit = bestFitLinear(points);\n    drawSDF(abs(uv.y - (fit.x * uv.x + fit.y)) / sqrt(1.0 + fit.x * fit.x), vec3(1.0, 0.0, 0.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}