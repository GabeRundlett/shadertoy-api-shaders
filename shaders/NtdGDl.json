{
    "Shader": {
        "info": {
            "date": "1636953483",
            "description": "What?!\n---> [url=https://www.youtube.com/watch?v=kbKtFN71Lfs]https://www.youtube.com/watch?v=kbKtFN71Lfs[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "NtdGDl",
            "likes": 8,
            "name": "Chaos Game - Sierpinski Gasket",
            "published": 3,
            "tags": [
                "random",
                "chaos",
                "sierpinski"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define A vec2(-0.5, -0.25)\n#define B vec2(0.4, 0.1)\n#define C vec2(-0.3, 0.45)\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nvec2 Hash12(in float x) {\n    vec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    float seed = 7.39 * float(iFrame) + 13.84;\n    if (iFrame == 0) fragColor.xy = Hash12(seed);\n    if (iFrame > 0 && ivec2(fragCoord) == ivec2(0, 0)) {\n        fragColor = texelFetch(iChannel0, ivec2(0, 0), 0);\n        int randInt = int(100.0 * Hash11(seed)) % 3;\n        if (randInt == 0) fragColor.xy = (fragColor.xy + A) / 2.0;\n        if (randInt == 1) fragColor.xy = (fragColor.xy + B) / 2.0;\n        if (randInt == 2) fragColor.xy = (fragColor.xy + C) / 2.0;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel1, uv);\n\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    if (iFrame > 0) {\n        vec2 pos = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n        float dist = length(uv - pos) - 0.001;\n        fragColor = max(fragColor, smoothstep(unit, 0.0, dist));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}