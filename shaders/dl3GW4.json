{
    "Shader": {
        "info": {
            "date": "1682420574",
            "description": "XOX GAMES, WINNER X",
            "flags": 0,
            "hasliked": 0,
            "id": "dl3GW4",
            "likes": 0,
            "name": "XOX ",
            "published": 3,
            "tags": [
                "circle",
                "x",
                "xox"
            ],
            "usePreview": 0,
            "username": "cisemsu",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "float dot2( in vec2 v ) { return dot(v,v); }\nfloat cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C ){    \n\n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n    float sgn = 0.0;\n\n    float p  = ky - kx*kx;\n    float q  = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float p3 = p*p*p;\n    float q2 = q*q;\n    float h  = q2 + 4.0*p3;\n\n    if( h>=0.0 ) \n    {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n\n  \n        if( abs(p)<0.001 )\n        {\n            float k = p3/q;              // linear approx\n          //float k = (1.0-p3/q2)*p3/q;  // quadratic approx \n            x = vec2(k,-k-q);  \n        }\n     \n\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        vec2  q = d+(c+b*t)*t;\n        res = dot2(q);\n    \tsgn = cro(c+2.0*b*t,q);\n    }\n    else \n    {   // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q/(p*z*2.0))/3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0 );\n        vec2  qx=d+(c+b*t.x)*t.x; float dx=dot2(qx), sx = cro(c+2.0*b*t.x,qx);\n        vec2  qy=d+(c+b*t.y)*t.y; float dy=dot2(qy), sy = cro(c+2.0*b*t.y,qy);\n        if( dx<dy ) { res=dx; sgn=sx; } else {res=dy; sgn=sy; }\n    }\n    \n    return sqrt( res )*sign(sgn);\n}\nvoid circle(out vec4 fragColor, in vec2 fragCoord,vec2 uv, vec2 center, float radius, vec3 color){\n\n float d_ = length (center - uv);\n     if (d_ <= radius){\n        fragColor = vec4 (color,1.0);\n    }\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    fragColor = vec4 (0.0,0.0,0.0,1.0); //background color\n        \n    // for O \n    \n    vec2 uv = fragCoord.xy;\n    vec2 center = vec2(133.35,225.);\n    vec2 center2 = vec2(134.,224.5);\n    vec2 center3 = vec2(133.35,72.);\n    vec2 center4 = vec2(134.,71.5);\n    vec2 center5 = vec2(408,72.);\n    vec2 center6 = vec2(407.5,71.5);\n    vec2 center7 = vec2(665,224.);\n    vec2 center8 = vec2(664.5,223.5);\n    vec2 center9 = vec2(665,374.);\n    vec2 center10 = vec2(664.5,373.5);\n    float radius = 0.13 * iResolution.y;\n    float radius2 = 0.115 * iResolution.y;\n    vec3 black = vec3(0.0,0.0,0.0);\n    vec3 white=vec3(1.0,1.0,1.0);\n   \n   \n    circle(fragColor, fragCoord, uv, center,radius,white);\n    circle(fragColor, fragCoord, uv, center2,radius2,black);\n    circle(fragColor, fragCoord, uv, center3,radius,white);\n    circle(fragColor, fragCoord, uv, center4,radius2,black);\n    circle(fragColor, fragCoord, uv, center5,radius,white);\n    circle(fragColor, fragCoord, uv, center6,radius2,black);\n    circle(fragColor, fragCoord, uv, center7,radius,white);\n    circle(fragColor, fragCoord, uv, center8,radius2,black);\n    circle(fragColor, fragCoord, uv, center9,radius,white);\n    circle(fragColor, fragCoord, uv, center10,radius2,black);\n\n    \n    //for background line\n    \n    // first line y\n    vec2 fLine_y1 = vec2(266.7, 0);\n    vec2 fLine_y2 = vec2(266.7, 50);\n    vec2 fLine_y3 = vec2(266.7, 450);\n    \n    float firstLine_y = sdBezier(fragCoord, fLine_y1, fLine_y2, fLine_y3);\n    if (abs(firstLine_y)<=2.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n        \n    // second line y\n    vec2 sLine_y1 = vec2(533.4, 0);\n    vec2 sLine_y2 = vec2(533.4, 50);\n    vec2 sLine_y3 = vec2(533.4, 450);\n    \n    float secondLine_y = sdBezier(fragCoord, sLine_y1, sLine_y2, sLine_y3);\n    if (abs(secondLine_y)<=2.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n        \n    //first line x\n    vec2 fLine_x1 = vec2(0, 150);\n    vec2 fLine_x2 = vec2(400, 150);\n    vec2 fLine_x3 = vec2(900, 150);\n    \n    float firstLine_x = sdBezier(fragCoord, fLine_x1, fLine_x2, fLine_x3);\n    if (abs(firstLine_x)<=2.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n        \n    //second line x\n    vec2 sLine_x1= vec2(0, 300);\n    vec2 sLine_x2 = vec2(400, 300);\n    vec2 sLine_x3 = vec2(900, 300);\n    \n    float secondLine_x = sdBezier(fragCoord, sLine_x1, sLine_x2, sLine_x3);\n    if (abs(secondLine_x)<=2.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n\n    //for X_1\n    \n    vec2 x1_1 = vec2(81,420);\n    vec2 x1_2 = vec2(125, 380);\n    vec2 x1_3 = vec2(200, 320);\n    \n    vec2 x1_4 = vec2(200,420);\n    vec2 x1_5 = vec2(145, 380);\n    vec2 x1_6 = vec2(81, 320);\n    \n    float x_1a = sdBezier(fragCoord, x1_1, x1_2, x1_3);\n    if (abs(x_1a)<=4.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n    float x_1b = sdBezier(fragCoord, x1_4, x1_5, x1_6);\n    if (abs(x_1b)<=4.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n    \n    //for X_2\n    \n    vec2 x2_1 = vec2(347.7,420);\n    vec2 x2_2 = vec2(401, 380);\n    vec2 x2_3 = vec2(466.7, 320);\n    \n    vec2 x2_4 = vec2(466.7,420);\n    vec2 x2_5 = vec2(415, 380);\n    vec2 x2_6 = vec2(347.7, 320);\n    \n    float x_2a = sdBezier(fragCoord, x2_1, x2_2, x2_3);\n    if (abs(x_2a)<=4.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n    float x_2b = sdBezier(fragCoord, x2_4, x2_5, x2_6);\n    if (abs(x_2b)<=4.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n    \n    //for X_3\n    \n    vec2 x3_1 = vec2(347.7,270);\n    vec2 x3_2 = vec2(400,230);\n    vec2 x3_3 = vec2(466.7,170);\n    \n    vec2 x3_4 = vec2(466.7,270);\n    vec2 x3_5 = vec2(415,230);\n    vec2 x3_6 = vec2(347.7,170);\n    \n    float x_3a = sdBezier(fragCoord, x3_1, x3_2, x3_3);\n    if (abs(x_3a)<=4.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n    float x_3b = sdBezier(fragCoord, x3_4, x3_5, x3_6);\n    if (abs(x_3b)<=4.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n        \n   \n    //for X_4\n    \n    vec2 x4_1 = vec2(614.4,120);\n    vec2 x4_2 = vec2(638,100);\n    vec2 x4_3 = vec2(733.4,20);\n    \n    vec2 x4_4 = vec2(733.4,120);\n    vec2 x4_5 = vec2(710,100);\n    vec2 x4_6 = vec2(614.4,20);\n    \n    float x_4a = sdBezier(fragCoord, x4_1, x4_2, x4_3);\n    if (abs(x_4a)<=4.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n    float x_4b = sdBezier(fragCoord, x4_4, x4_5, x4_6);\n    if (abs(x_4b)<=4.0)\n        fragColor = vec4 (1.0,1.0,1.0,1.0);\n    \n  \n    //red line for winner\n    vec2 p27 = vec2(0, 449);\n    vec2 p28 = vec2(400, 225);\n    vec2 p29 = vec2(800, 0);\n     \n    float redLine = sdBezier(fragCoord, p27, p28, p29);\n    if (abs(redLine)<=7.0)\n        fragColor = vec4 (1.0,0.0,0.0,1.0);\n    \n     \n  \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}