{
    "Shader": {
        "info": {
            "date": "1526681289",
            "description": "VR HMD display panel dead/stuck pixel fixer, the mode change at each minute ... and do NOT look at it, while it is running! Tested with Firefox. It doesn't work with Edge due to missing working GLES 300 mode here at Shadertoy inside Edge  ",
            "flags": 1,
            "hasliked": 0,
            "id": "Xs3fDj",
            "likes": 1,
            "name": "VR HMD dead/stuck pixel fixer",
            "published": 3,
            "tags": [
                "vr",
                "deadpixel",
                "stuckpixel"
            ],
            "usePreview": 0,
            "username": "BeRo",
            "viewed": 964
        },
        "renderpass": [
            {
                "code": "//#version 300 es\nvec4 hash44(uvec4 p){\n  \n  uvec4 v = p; \n    \n#if 1\n  // Pre-inter-mixing of all components with all components with a single ChaCha20 cipher round primitive iteration\n  v.x += v.y; v.w ^= v.x; v.w = (v.w << 16u) | (v.w >> 16u);\n  v.z += v.w; v.y ^= v.z; v.y = (v.y << 12u) | (v.y >> 20u); \n  v.x += v.y; v.w ^= v.x; v.w = (v.w << 8u) | (v.w >> 24u);\n  v.z += v.w; v.y ^= v.z; v.y = (v.y << 7u) | (v.y >> 25u); \n#endif\n    \n#if 1\n  // Full avalanche integer (re-)hashing with as far as possible equal bit distribution probability\n  // => http://burtleburtle.net/bob/hash/integer.html  \n  v -= (v << 6u);\n  v ^= (v >> 17u);\n  v -= (v << 9u);\n  v ^= (v << 4u);\n  v -= (v << 3u);\n  v ^= (v << 10u);\n  v ^= (v >> 15u);\n#endif\n    \n#if 1\n  // Post-inter-mixing of all components with all components with a single ChaCha20 cipher round primitive iteration\n  v.x += v.y; v.w ^= v.x; v.w = (v.w << 16u) | (v.w >> 16u);\n  v.z += v.w; v.y ^= v.z; v.y = (v.y << 12u) | (v.y >> 20u); \n  v.x += v.y; v.w ^= v.x; v.w = (v.w << 8u) | (v.w >> 24u);\n  v.z += v.w; v.y ^= v.z; v.y = (v.y << 7u) | (v.y >> 25u); \n#endif\n    \n  return vec4(intBitsToFloat(ivec4(uvec4(((v >> 9u) & uvec4(0x007fffffu)) | uvec4(0x3f800000u))))) - vec4(1.0);\n    \n}      \n\nvec4 doPixel(in vec2 fragCoord){    \n    vec4 c = vec4(0.0);\n    const int HzRate = 30;\n    int f = int(float(iTime * float(HzRate))); \n    vec4 u = hash44(uvec4(uint(f), uint(fragCoord.x), uint(fragCoord.y), 0));\n    int p = (int(iTime) / 60) & 3;    \n    int i = (p == 0) ?\n              ((int(u.x * 8.0) ^ int(u.y * 8.0) ^ int(u.z * 8.0) ^ int(u.w * 8.0)) & 7) :\n              (p == 1) ?\n                ((int(f) % 3) + 2) :\n                (p == 2) ?\n                  (int(f) & 7) :\n                  (int(f) & 1);\n    if(i == 0){        \n      c = vec4(1.0);\n    }else if(i == 1){\n      c = vec4(0.0);\n    }else if(i == 2){\n      c = vec4(1.0, 0.0, 0.0, 1.0);\n    }else if(i == 3){\n      c = vec4(0.0, 1.0, 0.0, 1.0);\n    }else if(i == 4){\n      c = vec4(0.0, 0.0, 1.0, 1.0);\n    }else if(i == 5){\n      c = vec4(1.0, 0.0, 1.0, 1.0);\n    }else if(i == 6){\n      c = vec4(1.0, 1.0, 0.0, 1.0);\n    }else if(i == 7){\n      c = vec4(0.0, 1.0, 1.0, 1.0);\n    }\n    return c; \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = doPixel(fragCoord);\n}\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir){\n    fragColor = doPixel(fragCoord);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}