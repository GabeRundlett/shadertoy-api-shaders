{
    "Shader": {
        "info": {
            "date": "1605441810",
            "description": "- simple pick: click on a disk and pan.\n- + press&keep D: pick a whole disk region\n- + press&keep F: frame a region when pick a disk to move the selection",
            "flags": 48,
            "hasliked": 0,
            "id": "WsdfRS",
            "likes": 13,
            "name": "pick & pan objects: 3 methods",
            "published": 3,
            "tags": [
                "mouse",
                "picking",
                "tuto",
                "gui",
                "selection",
                "panning"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1039
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{  \n    O-=O;\n    \n    for (int i = 1; i < N; i++ )                                                // --- draw disks\n        O +=  clamp( ( 10. - length( U - R.y*T(vec2(i,0)).xy ) ) *.5 , 0., 1. ) // mask\n            * hue( float(i)/50. );                                              // color\n    \n    if ( mouseClicked ) {                                                       // --- mousegrab UI\n        vec2 M = iMouse.xy, S = abs(iMouse.zw);\n        float METHOD = T(0).y;\n        if (METHOD==2.) O += max(0., 1.- .5* abs(length( U - M) - 100. ));      // neighborhood\n        vec2 D = min( abs(U-M), abs(U-S) );\n        if (METHOD==3. && T(0).x==1. &&\n            ( D.x<1. && in(U.y,M.y,S.y) || D.y<1. && in(U.x,M.x,S.x) ) ) O++;   // frame\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int N = 150;       // number of disks\n\n#define R             iResolution.xy\n#define T(U)          texelFetch( iChannel0, ivec2(U), 0 )\n\n// --- most  utils from https://www.shadertoy.com/view/llySRh\n                                                        \n#define mouseUp      ( iMouse.z < 0. )                  // mouse up even:   mouse button released (well, not just that frame). cf https://www.shadertoy.com/view/3dcBRS\n#define mouseDown    ( iMouse.z > 0. && iMouse.w > 0. ) // mouse down even: mouse button just clicked\n#define mouseClicked ( iMouse.w < 0. )                  // mouse clicked:   mouse button currently clicked\n\n#define hue(v)       ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) ) \n#define keyClick(a)  ( texelFetch(iChannel3,ivec2(a,0),0).x > 0.)\n#define hash(p)        fract( sin( (p) * vec2(12.9898, 78.233) ) * 43758.5453 )\n\n#define in(x,a,b)    ( x > min(a,b) && x < max(a,b) )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    if ( U.y > .5 )  discard;\n    if ( iFrame < 1 )  { O.xy = hash( U.x+iTime )*R/R.y; return; }       // init disks\n    O = T(U);                                                            // restore previous state\n    \n    vec2 M = iMouse.xy / R.y;\n \n    int METHOD = keyClick(64+6) ? 3 :  keyClick(64+4) ? 2 : 1;           // D: 2 (disk) F: 3 (framed)\n    if ( U.x == .5 && mouseDown ) O-=O;                                  // reset state if F released too early\n    if ( U.x == .5 ) O.y = float(METHOD);                                // for UI ( see Image tab )\n    \nif (METHOD==1) {        // --- method 1: pick one object ------------------------------ \n\n    if ( U.x == .5 )                                                     // mouse target in (0,0).w\n        if ( mouseDown ) {\n            for( int i=1; i<N; i++ ) \n                if (length( M-T(vec2(i,0)).xy ) < 10./R.y ) O.w = float(i)+.5; // pick disk \n        }\n        else if ( mouseUp ) O.w = 0.;                                    // deselect\n    if ( U.x == T(0).w ) O.xy = M;\n\n} else if (METHOD==2) { // --- method 2: pick a neighborhood -------------------------- \n\n    if ( U.x == .5 ) { O.zw = M; return; }                               // prev mouse pos in (0,0).zw        \n    if ( mouseDown &&  length(M-O.xy) < 100./R.y ) O.w = 1.;             // disk picked in region\n    if ( mouseUp ) O.w = 0.;                                             // release all disks   \n // if ( O.w == 1. ) O.xy = M;                                           // if picked, follow mouse\n    if ( mouseClicked && O.w == 1. ) O.xy += M - T(0).zw;                // if picked, follow mouse\n\n} else if (METHOD==3) { // --- method 3: pick a framed region -------------------------\n\n    if ( U.x == .5 ) {                                                   // mouse state in (0,0)\n        if ( mouseDown ) {\n            O.x = 0.; int d = 0;\n            for( int i=1; i<N; i++ )                                     // do we clicked on a disk ?\n                if (length( M-T(vec2(i,0)).xy ) < 10./R.y ) d = i;       // pick disk \n            if ( d == 0 ) O.x = 1.;                                      // no disk clicked: start a framing\n                else      O.x = 2.;                                      // a disk is clicked: panning mode\n        }\n       // if ( mouseUp ) O.x = O.x==1. ? 3. : 0.;\n        O.zw = M;                                                        // prev mouse pos in (0,0).zw\n        return;\n    }\n    vec2 S = abs(iMouse.zw) / R.y;                                       // framing start\n    if ( mouseUp && T(0).x == 2. ) O.w = 0.;                             // up while panning: deselect all\n    if ( mouseUp && T(0).x == 1.                                         // framing end: select framed disks\n         && in(O.x, S.x,M.x) &&  in(O.y, S.y,M.y) ) O.w = 1.; \n    if ( mouseClicked  && T(0).x == 2. && O.w == 1. ) O.xy += M - T(0).zw; // if picked, follow mouse \n}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}