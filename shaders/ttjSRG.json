{
    "Shader": {
        "info": {
            "date": "1566305855",
            "description": "https://www.shadertoy.com/view/3t2Xzy but more so",
            "flags": 0,
            "hasliked": 0,
            "id": "ttjSRG",
            "likes": 2,
            "name": "Belt Trick Warps a Cube",
            "published": 3,
            "tags": [
                "raymarched"
            ],
            "usePreview": 0,
            "username": "_polymath",
            "viewed": 369
        },
        "renderpass": [
            {
                "code": "#define MAXITERS 1000\n#define LENFACTOR .2\n#define NDELTA 0.001\n\n// #define GRIDCOLS\n// #define LIGHTING\n#define NORMALS\n\n#define NDELTAX vec3(NDELTA, 0., 0.)\n#define NDELTAY vec3(0., NDELTA, 0.)\n#define NDELTAZ vec3(0., 0., NDELTA)\n\nfloat box(vec3 p, vec3 centre, vec3 dims) {\n    vec3 d = abs(p - centre) - dims;\n    return max(d.x, max(d.y, d.z));\n}\n\n// from http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    // axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, // 0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, // 0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);          // 0.0,\n               // 0.0,                                0.0,                                0.0,                                1.0);\n}\n\nconst float pi = 3.1415926536;\n\nmat2 rot(float t) {\n\tfloat s = sin(t), c = cos(t);\n    return mat2(c, s, -s, c);\n}\n\nfloat scene(vec3 p) {\n    \n    // rotate space!!!\n    vec3 axis = vec3(\n    \tcos(iTime * 0.3),\n    \t0.,\n    \tsin(iTime * 0.3));\n    float angle = pi * pow(smoothstep(100., 2., dot(p, p)), 5.);\n    p *= rotationMatrix(axis, angle);\n    \n    return //min(box(p, vec3(0.), vec3(0.7, 0.1, 1000.)),\n           //min(box(p, vec3(0.), vec3(0.1, 10., 0.7)),\n           //min(box(p, vec3(0.), vec3(1000., 0.7, 0.1)),\n               box(p, vec3(0.), vec3(\n                   4. + 3. * cos(iTime * 0.4)\n               ));\n           //)));\n}\n    \nvec3 sceneNormal(vec3 p) {\n    return normalize(vec3(\n        scene(p + NDELTAX) - scene(p - NDELTAX),\n        scene(p + NDELTAY) - scene(p - NDELTAY),\n        scene(p + NDELTAZ) - scene(p - NDELTAZ)\n\t));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec3 ray = normalize(vec3(uv, 1.));\n    ray.yz *= rot(-0.1);\n    ray.xz *= rot(-0.7853981634);\n    vec3 cam = vec3(20., 2., -20.);\n    \n    vec3 pos = cam;\n    for (int i = 0; i < MAXITERS; ++i) {\n        float dist = scene(pos);\n        pos += ray * dist * LENFACTOR;\n    }\n\n    #ifdef GRIDCOLS\n    \tfragColor = vec4(fract(pos), 1.);\n    #endif\n    \n    #ifdef NORMALS\n    \tfragColor = vec4(sceneNormal(pos) * 0.5 + 0.5, 1.);\n    #endif\n    \n    #ifdef LIGHTING\n    \tvec3 light = vec3(cos(iTime) * 15., 2., sin(iTime) * 5. + 10.);\n    \tvec3 toLight = light - pos;\n    \tfloat brightness = 5.;\n    \t// I've not checked but I'm guessing inverse-square-law here:\n    \tbrightness /= pow(length(toLight), 0.5);\n    \tfragColor = vec4(vec3(dot(sceneNormal(pos), normalize(toLight))) * brightness, 1.);\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}