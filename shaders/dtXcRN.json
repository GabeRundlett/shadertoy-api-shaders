{
    "Shader": {
        "info": {
            "date": "1690454328",
            "description": "CC0: Repeated tiling experiment\nSaw some twitter art. Tried it and failed to replicate it.\nStill turned out quite nice to my eyes at least.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dtXcRN",
            "likes": 31,
            "name": "Thursday tiling experiment",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 1,
            "username": "mrange",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "// CC0: Thursday tiling experiment\n//  Saw some twitter art. Tried it and failed to replicate it.\n//  Still turned out quite nice to my eyes at least.\n\n// Define for a more \"boxy\" variant\n// #define VARIANT\n\n// Define for a parallax effect suggested by Dave Hoskins in the comments\n//#define DH_VARIANT\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\nfloat height(vec2 p) {\n  vec2 n = mod(floor(p), 2.0);\n  p = fract(p);\n  p = mix(p, 1.0-p, n);\n  vec4 tcol = texture(iChannel0, p);\n  float h = 1.25*(sqrt(abs(tcol.x))); \n  return h;\n}\n\nfloat circle(vec2 p, float r) {\n#if defined(VARIANT)\n  p *= p;\n  return pow(dot(p, p), 0.25) - r;\n#else\n  return length(p) - r;\n#endif\n}\n\nfloat cell0(vec2 p) {\n  float d0 = circle(p-0.5, 0.5);\n  float d1 = circle(p+0.5, 0.5);\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d);\n  return d;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nvec3 layer(vec3 col, vec3 bcol, vec2 p, vec2 o, float z, float co, float aa) {\n  p /= z;\n#if defined(VARIANT)\n  p += 0.5;\n#endif\n  vec2 np = round(p);\n  vec2 cp = p - np;\n  vec2 rcp = vec2(cp.y, -cp.x);\n  vec2 hp = np*z*(0.25*0.25);\n  hp += o;\n  float h = height(hp);\n  float h0 = hash(np);\n  if (h0 > 0.5) {\n    cp = rcp;\n  }\n  float fo = dot(cp, cp);\n  float d = cell0(cp)-0.01;\n  d *= z;\n  if (h > co) {  \n    col = mix(col, bcol-0.5*fo, smoothstep(aa, -aa, d));\n  }\n  \n  return col;\n}\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nvec3 effect(vec2 p, vec2 pp) {\n  float aa = 2.0/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  const float maxco = 1.0;\n  const float minco = 0.0;\n  const float maxi  = 9.0;\n  const float amp   = 8.0;\n  const mat2 rot    = ROT(0.2); \n  vec2 op = p;\n  vec2 o = amp*cos(vec2(1.0, 0.5)*TAU*(TIME+20.0)/(amp*30.0));\n  p += o;\n  p *= rot;\n  for (float i = 0.0; i <= maxi; ++i) {\n#if defined(DH_VARIANT)    \n    p+= i*.002*iTime;\n#endif    \n    vec3 bcol = 0.5*(1.0+cos(vec3(0.0, 1.0, 2.0)+0.5*i-0.5*TIME+length(p)));\n    float z = pow(0.5, i)*4.0;\n    float co = mix(minco, maxco, i/(maxi));\n\n    col = layer(col, bcol, p, vec2(0.0), z, co, aa);\n  }\n  col *= smoothstep(1.5, 0.5, length(pp));\n  col = max(col, 0.0);\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}