{
    "Shader": {
        "info": {
            "date": "1725451339",
            "description": "originals fracal 62 by gaz https://www.shadertoy.com/view/MdXSzS",
            "flags": 0,
            "hasliked": 0,
            "id": "lfBfWy",
            "likes": 3,
            "name": "tunnel in galaxy",
            "published": 3,
            "tags": [
                "fractal",
                "tunnel"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 90
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n#define time iTime\n#define resolution iResolution.xy\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n    vec2 C =fragCoord;\n    vec4 O =fragColor;\n\tO=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<120.;\n        O.xyz+=mix(vec3(1),H(g*0.1),.8)*2./e/8e3\n    )\n    {\n        p=g*d;\n       p.z+=iTime;\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=2.;\n        p.xy*=mat2(cos(iTime*0.1),sin(iTime*0.1),-sin(iTime*0.1), cos(iTime*0.1));\n        for(int i=0;i++<10;){\n            p=.5-abs(p);\n            p.z<p.x?p=p.xyz:p;\n             p.z<p.y?p=p.yxz:p;\n              p.x<p.y?p=p.xxz:p;\n            s*=e=1.7+sin(iTime*.001)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.*3.,\n                    120,\n                    8.*5.\n                 );\n         }\n         g+=e=length(p.xzy)/s;\n    }\n\nvec2 uPos = ( gl_FragCoord.xy / resolution.y );//normalize wrt y axis\n\tuPos -= vec2((resolution.x/resolution.y)/2.0, 0.5);//shift origin to center\n\tuPos*=2.1;\n\tfloat multiplier = 0.0005; // Grosseur\n\tconst float step = 0.006; //segmentation\n\tconst float loop = 100.0; //Longueur\n\tconst float timeSCale = 0.05; // Vitesse\n\t\n\tvec3 blueGodColor = vec3(0.0);\n\tfor(float i=1.0;i<loop;i++){\t\t\n\t\tfloat t = time*timeSCale-step*i*i;\n\t\tvec2 point = vec2(0.75*sin(t), 0.5*sin(t));\n\t\tpoint += vec2(0.75*cos(t*4.0), 0.5*sin(t*3.0));\n\t\tpoint /= 11. * sin(i);\n        float componentColor= multiplier/((uPos.x-point.x)*(uPos.x-point.x) + (uPos.y-point.y)*(uPos.y-point.y))/i;\n\t\tblueGodColor += vec3(componentColor/3.0, componentColor/3.0, componentColor);\n\t}\n\t\n\t\n\tvec3 color = vec3(0,0,0);\n\tcolor += pow(blueGodColor,vec3(0.1,0.3,1.8)*2.1);\n   \n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 100; i++)\n\t{\n\t\tvec3 p =  vec3(uv, 0.0);\n\t\t\n\t\tp += vec3(.22, .3, s - 0.5 - sin(iTime * .13) * 1.1)*O.xzx;\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .02));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .03));\n\t\tv3 += length(p.xy*5.) * .0013;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.7, .0, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.1, 1.2, len);\n\t\n\tvec3 col = vec3( v3 * (0.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) ;\n\n\tfragColor=vec4(min(pow(abs(col)+color*vec3(0.,0.5,1.), vec3(1.2)), 1.0), 1.0);\n    fragColor+=O;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}