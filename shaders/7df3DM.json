{
    "Shader": {
        "info": {
            "date": "1616038390",
            "description": "More fun with springs! This time its something like a rubber band ball. Tug it with the mouse.\nSet SPRINGINESS to 0.01 and JOINTS to 15 for an ultra squishy experience :D",
            "flags": 32,
            "hasliked": 0,
            "id": "7df3DM",
            "likes": 24,
            "name": "Rubber Band Ball",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "physics",
                "spring",
                "softbody",
                "rubberbandball"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "float sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    float unit = 2.0 / iResolution.y;\n\n    for (int i=0; i < JOINTS; i++) {\n        vec2 joint1 = getJoint(i).pos;\n        for (int j=0; j < JOINTS; j++) {\n            if (j == i) continue;\n            vec2 joint2 = getJoint(j).pos;\n            float dist = sdLine(uv, joint1, joint2);\n            fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 0.8, 0.0), smoothstep(unit, 0.0, dist));\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct Joint {\n    vec2 pos;\n    vec2 vel;\n    float mass;\n};\n\n#define getJoint(id)                                 \\\n    Joint(texelFetch(iChannel0, ivec2(id, 0), 0).xy, \\\n          texelFetch(iChannel0, ivec2(id, 1), 0).xy, \\\n          MASS)                                      \\\n\n#define JOINTS 10\n#define MASS 10.0\n\n#define GRAVITY 0.001\n#define SPRINGINESS 0.1\n#define DAMPING 0.99",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 getPos(in float id) {\n    return sin(id / float(JOINTS) * 6.28 + vec2(1.57, 0.0)) * 0.25;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 corner = vec2(iResolution.x / iResolution.y * 0.5, 0.5);\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0);\n    if (iFragCoord.x < JOINTS && iFragCoord.y < 2) {\n        if (iFrame == 0) {\n            if (iFragCoord.y == 0) fragColor.xy = getPos(fragCoord.x);\n            if (iFragCoord.y == 1) fragColor.xy = normalize(getPos(fragCoord.x)).yx * vec2(-0.01, 0.01) + vec2(0.02, 0.01);\n        }\n\n        if (iFrame > 0) {\n            Joint joint1 = getJoint(iFragCoord.x);\n            vec2 startPos1 = getPos(fragCoord.x);\n\n            vec2 totalForce = vec2(0.0, -GRAVITY);\n            for (int i=0; i < JOINTS; i++) {\n                if (i == iFragCoord.x) continue;\n                Joint joint2 = getJoint(i);\n                vec2 startPos2 = getPos(float(i) + 0.5);\n\n                float restLength = distance(startPos1, startPos2);\n                vec2 force = normalize(joint2.pos - joint1.pos);\n                float extension = restLength - distance(joint2.pos, joint1.pos);\n                force *= -SPRINGINESS * extension;\n\n                totalForce += force;\n            }\n\n            joint1.vel += totalForce / joint1.mass;\n\n            joint1.pos += joint1.vel;\n            joint1.pos = clamp(joint1.pos, -corner, corner);\n\n            joint1.vel *= DAMPING * sign(corner - abs(joint1.pos));\n\n            // UX improvement by @elenzil\n            if (iMouse.z > 0.0 && iFragCoord.x == JOINTS - 1) {\n                vec2 targPos = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n                vec2 targVel = (targPos - joint1.pos) * 0.1;\n                joint1.vel = targVel;\n            }\n\n            if (iFragCoord.y == 0) fragColor.xy = joint1.pos;\n            if (iFragCoord.y == 1) fragColor.xy = joint1.vel;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}