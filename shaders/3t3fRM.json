{
    "Shader": {
        "info": {
            "date": "1612386367",
            "description": "Shader Saturday 1",
            "flags": 0,
            "hasliked": 0,
            "id": "3t3fRM",
            "likes": 2,
            "name": "Shader Saturday 1: Raymarching#1",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "psicomante",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "#define MAT_FLOOR 0.0\n\n#define PI 3.14159265359\n#define EPSILON 1e-6\n#define INFTY 1e6\n#define TIME_M 0.5\n\nmat3 rotX(float t) {\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, sin(t), cos(t),\n        0.0, - cos(t), sin(t)\n    );\n}\nmat3 rotY(float t) {\n    return mat3(\n        sin(t), 0.0, cos(t),\n        0.0, 1.0, 0.0,\n        - cos(t), 0.0, sin(t)\n    );\n}\nmat3 scalar(float t) {\n    return mat3(\n        t, 0.0, 0.0,\n        0.0, t, 0.0,\n        0.0, 0.0, t\n    );\n}\n\nfloat sdPlane(vec3 p)\n{\n\treturn p.y;\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p) - s;\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nfloat sphereCloud(vec3 p) {\n    p = abs(p);\n    return length(mod(3.0 * p, 1.0) - 0.5) - 0.4 * (1.0 - max(max(p.x, p.y), p.z));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec3 opRepLim( in vec3 p, in float c, in vec3 l)\n{\n    return p-c*clamp(round(p/c),-l,l);\n}\n\n// positive sin\nfloat ps(float v) {\n    return sin(v)*0.5 + 0.5;\n}\n\nfloat s1sdf(vec3 p, float t) {\n    t = t*2.;\n    float tor = sdTorus(p, vec2(0.1, 0.1));\n    float b = sdBox(p, vec3(0.2, 0.5, 0.5));\n    float u1 = opSmoothUnion(tor,b, 0.4);\n    float u2 = opSmoothSubtraction(sdSphere(p, 0.2), u1, 0.5*ps(t));\n    return u2;    \n}\n\nfloat surfaceSDF(vec3 p, float t) {\n    vec3 q = opRepLim(p, 2., vec3(1., 1., 1.));\n    return s1sdf(p, t);\n}\n\nvec3 getNormal(vec3 p, float t) {\n    float d = EPSILON;\n    return normalize(vec3(\n            surfaceSDF(p + vec3(d, 0.0, 0.0), t) - surfaceSDF(p, t),\n            surfaceSDF(p + vec3(0.0, d, 0.0), t) - surfaceSDF(p, t),\n            surfaceSDF(p + vec3(0.0, 0.0, d), t) - surfaceSDF(p, t)\n    ));\n}\n\nfloat getAngle(vec3 p, vec3 q) {\n    return acos(dot(normalize(p), normalize(q)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // fragment position, thx toeme\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // light pos\n    vec3 l = vec3(0.0, 2.0, 1.0);   \n    \n    // time multiplier\n    float t = iTime * TIME_M;\n\n    // camera\n    vec3 camOr = vec3(0.0, 0.0, 2.0);\n    vec3 camDir = vec3(0.0, 0.0, -1.);\n    vec3 camUp = vec3(0.0, 1.0, 0.0);\n    float targetDepth = 2.0;\n    mat3 g = rotX(PI/4.) * rotY(t);\n    vec3 rCamOr = g * camOr;\n    vec3 rCamDir = g * camDir;\n    vec3 rCamUp = g * camUp;\n    vec3 rCamRight = cross(rCamDir, rCamUp);\n    \n    vec3 lightDir = l*g;\n\n    \n    // ray\n    vec3 rayDir = normalize(rCamRight * uv.x + rCamUp * uv.y + rCamDir * targetDepth);\n    float ang = getAngle(rayDir, -normalize(rCamOr));\n    vec3 rayOr = rCamOr + (1.0 / cos(ang)) * rayDir;    \n    \n    float d = 0.;\n    float dist = 0.;\n    vec3 p = rayOr;\n    \n\t// marching loop\n    for(int i = 0; i < 150; i ++ ) {\n        d = surfaceSDF(p, t);\n        dist += d;\n        p = rayOr + dist*rayDir;\n        \n        if (d < 0.01) {\n            break;\n        }       \n    }\n    \n    \n    vec3 normal = getNormal(p, t);\n    float lamb = clamp(dot(normalize(lightDir - p), normal), 0.01, 1.0);\n    float fresnel = 1. - clamp(dot(normalize(rayOr - p), normal), 0.01, 1.0);\n    \n    // hit check\n    if (d < 0.01) {\n        fragColor = vec4(lamb * fresnel * vec3(248., 255., 174.)/255., 1.0);\n        fragColor.rgb = pow(fragColor.rgb, vec3(0.25));\n    } else {\n        vec3 g1 = vec3(252./255., 92./255., 125./255.);\n        vec3 g2 = vec3(106./255., 130./255., 251./255.);\n        vec3 g3 = vec3(150., 201., 61.)/255.;\n        vec3 g4 = vec3(0., 176./255., 155./255.);\n        fragColor = vec4(mix(g4, g3, uv.y*0.5 + 0.5), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}