{
    "Shader": {
        "info": {
            "date": "1671043576",
            "description": "Learnt voronoi tracking from https://shadertoyunofficial.wordpress.com/ and https://www.shadertoy.com/view/3ty3Dy\nImplemented simple boids with it. Mouse down -> add swirl force.",
            "flags": 32,
            "hasliked": 0,
            "id": "ms2SW3",
            "likes": 18,
            "name": "[Gegell] Boids",
            "published": 3,
            "tags": [
                "boids",
                "voronoitracking"
            ],
            "usePreview": 0,
            "username": "Gegell",
            "viewed": 691
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec4 closest_indices = floatBitsToUint(texelFetch(iChannel1, ivec2(fragCoord), 0));\n   \n    float overlapping = 0.;\n    for (int i = 3; i >= 0; i--) {\n        uint id =  closest_indices[i];\n        if (id == -1u)\n            break;\n            \n        Entity e = decodeEntity(iChannel0, id);\n        float new_dist = distanceWrapping(e.position, fragCoord, iResolution.xy);\n        overlapping += smoothstep(1., 0., new_dist - BOID_RADIUS);\n    }\n    \n    // Closest id color\n    vec4 closest_color = entityColor(closest_indices.x);\n    fragColor = closest_color;\n    \n    // UV position of closest particle in data buffer (iChannel0)\n    fragColor = vec4(vec2(toMultiID(closest_indices.x, textureSize(iChannel0, 0))) / iResolution.xy, 0., 1.);\n    \n    // All ids mapped to a 0-1 color\n    fragColor = vec4(closest_indices) / float(PARTICLE_COUNT);\n    \n    // Raw data\n    Entity e = decodeEntity(iChannel0, ivec2(fragCoord));\n    fragColor = vec4(e.position / iResolution.xy, 0., 0.);\n    \n    // Overlapping count view\n    fragColor = vec4(overlapping / 4.);\n    \n    // Colored particles\n    fragColor = mix(vec4(0), closest_color, smoothstep(0., 1., overlapping));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const uint PARTICLE_COUNT = 10000u;\nconst float TIMESTEP_MULT = 2.0;\nconst float MAX_VELOCITY = 150.0;\n\nconst float BOID_RADIUS = 1.0;\nconst float BOID_MASS = 0.02;\n\nconst float COHESION_STRENGTH = 0.6;\nconst float COHESION_MAX_DIST = 100.;\n\nconst float ALIGNMENT_STRENGTH = 0.05;\nconst float ALIGNMENT_MAX_VEL = 50.;\n\nconst float SEPARATION_STRENGTH_COLLISION = 10.0;\nconst float SEPARATION_STRENGTH_SIMILARITY = 1.0;\nconst float SEPARATION_DISTANCE_SIMILAR = 4.;\nconst float SEPARATION_DISTANCE_DISSIMILAR = 12.;\n\nconst float DESIRE_STRENGTH = 0.002;\nconst vec2  DESIRE_MIN_MAX_VEL = vec2(20., 50.);\n\nconst float MOUSE_BRUSH_RADIUS = 200.;\nconst float MOUSE_BRUSH_STRENGTH = 1.;\nconst vec2  MOUSE_BRUSH_DIV_CURL_WEIGHTS = vec2(-0.2, 1);\n\n\n#define FLOAT_INF uintBitsToFloat(0x7f800000u)\n\n// Randomization and hashes\nuint murmur3( in uint u )\n{\n  u ^= ( u >> 16 ); u *= 0x85EBCA6Bu;\n  u ^= ( u >> 13 ); u *= 0xC2B2AE35u;\n  u ^= ( u >> 16 );\n\n  return u;\n}\n\n// RNG from https://de.wikipedia.org/wiki/Xorshift\nuint rngSeed = 314159265u;\n\nuint xorshift(in uint value) {\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\n\nuint nextUint(inout uint state) {\n    state = xorshift(state);\n    return state;\n}\nuint nextUint() {return nextUint(rngSeed);}\n\nfloat nextFloat(inout uint state) {return float(nextUint(state)) / float(uint(-1));}\nfloat nextFloat() {return nextFloat(rngSeed);}\n\nvec3 nextVec3(inout uint state) {return vec3(nextFloat(state), nextFloat(state), nextFloat(state));}\nvec3 nextVec3() {return nextVec3(rngSeed);}\n\n// Color functions\t\nvec3 hue(float h)\t{\n    h = fract(h);\n    float r = abs(h * 6. - 3.) - 1.;\n    float g = 2. - abs(h * 6. - 2.);\n    float b = 2. - abs(h * 6. - 4.);\n    return clamp(vec3(r, g, b), 0., 1.);\n}\n\nvec4 HSVtoRGB(vec3 hsv) {\n    return vec4(((hue(hsv.x) - 1.) * hsv.y + 1.) * hsv.z, 1.);\n}\n\n// 1D / 2D index handling\nuint wrapFlatID(uint flatID) {\n    return flatID % PARTICLE_COUNT;\n}\n\nvec2 wrapMultiID(vec2 id, vec2 resolution) {\n    return fract(id / resolution) * resolution;\n}\n\nuint toFlatID(vec2 id, vec2 resolution) {\n    return uint(id.x + id.y * resolution.x);\n}\n\nivec2 toMultiID(uint flatID, ivec2 resolution) {\n    return ivec2(flatID, flatID / uint(resolution.x)) % resolution;\n}\n\n// Entity datastructure definition\nstruct Entity {\n    vec2 position;\n    vec2 velocity;\n};\n\nEntity decodeEntity(sampler2D sampler, ivec2 id) {\n    vec4 raw = texelFetch(sampler, id, 0);\n    Entity e;\n    e.position = raw.rg;\n    e.velocity = raw.ba;\n    return e;\n}\n\nEntity decodeEntity(sampler2D sampler, uint flatID) {\n    return decodeEntity(sampler, toMultiID(flatID, textureSize(sampler, 0)));\n}\n\nvec4 encodeEntity(Entity e) {\n    return vec4(e.position, e.velocity);\n}\n\nconst Entity INVALID_ENTITY = Entity(vec2(-FLOAT_INF), vec2(0));\n\n// Procedural entity fields\nvec2 entityInterpolants(uint flatID) {\n    uint state = murmur3(murmur3(flatID));\n    return vec2(nextFloat(state), nextFloat(state));\n}\n\nvec2 desireMotion(vec2 t) {\n    float angle = t.x * 3.1415629 * 2.;\n    return vec2(sin(angle), cos(angle)) * mix(DESIRE_MIN_MAX_VEL.x, DESIRE_MIN_MAX_VEL.y, t.y);\n}\n\nvec2 desireMotion(uint flatID) {\n    return desireMotion(entityInterpolants(flatID));\n}\n\nvec4 entityColor(vec2 t) {\n    return HSVtoRGB(vec3(t.x, t.y*.6+.4, t.y*.4+.8));\n}\n\nvec4 entityColor(uint flatID) {\n    return entityColor(entityInterpolants(flatID));\n}\n\n// Buffer specific functions\nuvec4 fetchClosest(vec2 position, sampler2D voro_buffer) {\n    return floatBitsToUint(texelFetch(voro_buffer, ivec2(wrapMultiID(position, vec2(textureSize(voro_buffer, 0)))), 0));\n}\n\n// Wrapping distance\nvec2 diffWrapping(vec2 a, vec2 b, vec2 bounds) {\n    vec2 d = a-b;\n    return d - round(d/bounds) * bounds;\n}\n\nfloat distanceWrapping(vec2 a, vec2 b, vec2 bounds) {\n    return length(diffWrapping(a,b,bounds));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Data pass\n// Every pixel corresponds to a single entity somewhere in space\n\n#define clampLength(v, l) ((v)/max(length(v)/l, 1.))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uint flatID = toFlatID(floor(fragCoord), vec2(textureSize(iChannel0, 0)));\n    fragColor = encodeEntity(INVALID_ENTITY);\n    if (flatID >= PARTICLE_COUNT)\n        return;\n    \n    Entity current;\n    if (iFrame <= 3) {\n        // Init a random particle entity\n        uint state = murmur3(flatID);\n        current.position = vec2(nextFloat(state), nextFloat(state)) * iResolution.xy;\n        current.velocity = (vec2(nextFloat(state), nextFloat(state)) * 2. - 1.) * .5;\n    } else {\n        // Fetch the current entity\n        current = decodeEntity(iChannel0, flatID);\n    }\n    vec2 interpolants = entityInterpolants(flatID);\n    vec2 desire = desireMotion(interpolants);\n    \n    //\n    // Boid computations\n    //\n    vec2 force = vec2(0);\n    uvec4 closest = fetchClosest(current.position, iChannel1);\n    \n    float counted = 0.;\n    vec2 average_offset   = vec2(0.);\n    vec2 average_velocity = vec2(0.);\n    \n    for (int i = 0; i < 4; i++) {\n        if (closest[i] == flatID || closest[i] == -1u)\n            continue;\n        Entity other = decodeEntity(iChannel0, closest[i]);\n        vec2 otherInterpolants = entityInterpolants(closest[i]);\n        \n        // Separation\n        vec2 diff = diffWrapping(other.position, current.position, iResolution.xy);\n        float dissimiliarity = interpolants.x - otherInterpolants.x;\n        dissimiliarity = abs(dissimiliarity - round(dissimiliarity)) * 2.;\n        \n        float sep_dist = 2. * BOID_RADIUS;\n        float strength = max(1. - length(diff) / sep_dist, 0.) * SEPARATION_STRENGTH_COLLISION;\n        sep_dist += mix(SEPARATION_DISTANCE_SIMILAR, SEPARATION_DISTANCE_DISSIMILAR, dissimiliarity);\n        strength += max(1. - length(diff) / sep_dist, 0.) * SEPARATION_STRENGTH_SIMILARITY; \n        force += -diff * strength;\n        \n        // Averaging\n        counted ++;\n        average_offset += diffWrapping(other.position, current.position, iResolution.xy);\n        average_velocity += other.velocity;\n    }\n    average_offset /= counted;\n    average_velocity /= counted;\n    \n    // Cohesion\n    force += clampLength(average_offset, COHESION_MAX_DIST) * COHESION_STRENGTH;\n    \n    // Alignment\n    force += clampLength(average_velocity - current.velocity, ALIGNMENT_MAX_VEL) * ALIGNMENT_STRENGTH;\n    \n    // Desired velocity\n    force += clampLength(desire - current.velocity, DESIRE_MIN_MAX_VEL.y) * DESIRE_STRENGTH;\n    \n    // Mouse interactivity\n    if (sign(iMouse.z) > 0.) {\n        vec2 diff = diffWrapping(iMouse.xy, current.position, iResolution.xy) / MOUSE_BRUSH_RADIUS;\n        float strength = 1. - length(diff);\n        if (strength > 0.) {\n            vec2 brush_force = mat2(-diff.x, -diff.y, diff.y, -diff.x) * MOUSE_BRUSH_DIV_CURL_WEIGHTS * MOUSE_BRUSH_STRENGTH;\n            force = mix(force, brush_force, smoothstep(0., 1., strength));\n        }\n    }\n    \n    //\n    // Actually update the position\n    //\n    float dt = iTimeDelta * TIMESTEP_MULT;\n    vec2 acceleration = force / BOID_MASS;\n    \n    current.velocity += acceleration * dt;\n    current.velocity = clampLength(current.velocity, MAX_VELOCITY);\n    current.position += current.velocity * dt;\n    current.position = fract(current.position / iResolution.xy) * iResolution.xy;\n    \n    // Write back to the same location\n    fragColor = encodeEntity(current);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Voronoi pass\n// Every pixel contains the ID of the 4 closest entities in Buffer A\n\n\n// Merge the distances & current best found entity indices with a neighbouring indice vector\nvoid listInsert( inout vec4 distances, inout uvec4 id_list, in uint id_to_insert, in vec2 cell_center ) {\n    if (id_to_insert == uint(-1) || any(equal(id_list, uvec4(id_to_insert)))) {\n        return;\n    } \n\n    Entity e = decodeEntity(iChannel0, id_to_insert);\n    float dist = distanceWrapping(cell_center, e.position, iResolution.xy);\n    \n    if (dist < distances[0]) {\n        distances = vec4(dist, distances.xyz);             id_list = uvec4(id_to_insert, id_list.xyz);\n    } else if (dist < distances[1]) {\n        distances = vec4(distances.x, dist, distances.yz); id_list = uvec4(id_list.x, id_to_insert, id_list.yz);\n    } else if (dist < distances[2]) {\n        distances = vec4(distances.xy, dist, distances.z); id_list = uvec4(id_list.xy, id_to_insert, id_list.z);\n    } else if (dist < distances[3]) {\n        distances = vec4(distances.xyz, dist);             id_list = uvec4(id_list.xyz, id_to_insert);\n    }\n}\n\nvoid mergeVoroCell( inout vec4 distances, inout uvec4 id_list, in vec2 sample_point, in vec2 cell_center ) {\n    uvec4 ids = fetchClosest(sample_point, iChannel1);\n    for (int i = 0; i < 4; i++) {\n        listInsert(distances, id_list, ids[i], cell_center);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Get current\n    uvec4 closest_indices = uvec4(-1);\n    vec4 best_distances = vec4(FLOAT_INF);\n    \n    // Merge with the closest from all 4 neighbors\n    mergeVoroCell(best_distances, closest_indices, fragCoord, fragCoord);\n    mergeVoroCell(best_distances, closest_indices, fragCoord + vec2( 0, -1), fragCoord);\n    mergeVoroCell(best_distances, closest_indices, fragCoord + vec2( 0,  1), fragCoord);\n    mergeVoroCell(best_distances, closest_indices, fragCoord + vec2(-1,  0), fragCoord);\n    mergeVoroCell(best_distances, closest_indices, fragCoord + vec2( 1,  0), fragCoord);\n    \n    rngSeed = murmur3(floatBitsToUint(fragCoord.x)) ^ murmur3(floatBitsToUint(fragCoord.y)) ^ murmur3(floatBitsToUint(iTime));\n#if 0\n    // Merge with random nearby neighbor in larger neighborhood\n    for (int i = 0; i < 16; i++) {\n        vec2 neighborTap = vec2(nextFloat(), nextFloat()) * 8. - 4.;\n        neighborTap *= float(i + 1);\n        mergeVoroCell(best_distances, closest_indices, fragCoord + neighborTap, fragCoord);\n    }\n#endif\n    \n#if 1\n    // Merge with a random particle (via simulation id) to compensate for particle loss\n    uint id = wrapFlatID(nextUint());\n    for (int i = 0; i < 1; i++) {\n        listInsert(best_distances, closest_indices, id++, fragCoord);\n    }\n#endif\n\n    // Write back\n    fragColor = uintBitsToFloat(closest_indices);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}