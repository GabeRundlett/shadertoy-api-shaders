{
    "Shader": {
        "info": {
            "date": "1676262754",
            "description": "boom bam",
            "flags": 0,
            "hasliked": 0,
            "id": "mlBXzG",
            "likes": 0,
            "name": "mandlebbrot_KAL",
            "published": 3,
            "tags": [
                "zen"
            ],
            "usePreview": 0,
            "username": "gschian0",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "uniform float time;\n\nmat4 rotateZ(float angle)\n{\nreturn mat4(vec4(cos(angle), sin(angle), 0, 0), vec4(-sin(angle), cos(angle), 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));\n}\n\nmat4 rotateY(float angle)\n{\nreturn mat4(vec4(cos(angle), 0, -sin(angle), 0), vec4(0, 1, 0, 0), vec4(sin(angle), 0, cos(angle), 0), vec4(0, 0, 0, 1));\n}\n\nmat4 rotateX(float angle)\n{\nreturn mat4(vec4(1, 0, 0, 0), vec4(0, cos(angle), sin(angle), 0), vec4(0, -sin(angle), cos(angle), 0), vec4(0, 0, 0, 1));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\nvec4 K = vec4(1.0, 1.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nfloat noise(vec2 n)\n{\n  return fract(sin(dot(n, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 uv = vec3(fragCoord.xy / vec2(iResolution.xy) * 2.0 - 1.0, 0.0);\n    uv *= 2.;\n    uv = abs(uv);\n    vec4 c = 2. *vec4(uv, 0.0);\n    vec3 color = vec3(0.1, 0.5, 0.1);\n    \n    // Antialiasing\n    float sampleCount = 32.0; // number of samples per pixel\n    float totalWeight = 0.0;\n    vec3 avgColor = vec3(0.0);\n    \n    for (int sampleIndex = 0; float(sampleIndex) < sampleCount; sampleIndex++) {\n        \n        float offsetX = (noise(vec2(iTime, fragCoord.y)) * 2.0 - 1.0) / sampleCount;\n        float offsetY = (noise(vec2(iTime, fragCoord.x)) * 2.0 - 1.0) / sampleCount;\n        \n        vec3 subPixelCoord = vec3(uv.xy + vec2(offsetX, offsetY), 0.0);\n        c = vec4(subPixelCoord, 0.0);\n        \n        color = vec3(0.1, 0.2, 0.1);\n        \n        for (int i = 0; i < 5; i++) {\n            c = rotateZ(iTime + float(float(i)+iTime) * 0.1) * rotateY(iTime + float(i) * 0.2) * rotateX(iTime + float(i) * 0.3) * c;\n            int iterations = 0;\n            int maxIterations = 200;\n            vec4 z = vec4(0.0);\n            for(int j = 0; j < maxIterations; j++)\n            {\n                float x = z.x;\n                float y = z.y;\n                float z_real = x * x - y * y + c.x;\n                float z_imag = 2.0 * x * y + c.y;\n                z = vec4(z_real, z_imag, 0.0, 0.0);\n                if(length(z) > 2.0)\n                {\n                    iterations = j;\n                    break;\n                }\n            }\n            color += hsv2rgb(vec3(float(iterations) / float(maxIterations), 1.0-float(iterations) / float(maxIterations), float(iterations) / float(maxIterations)));\n        }\n        \n        float weight = 1.0 / sampleCount;\n        avgColor += color * weight;\n        totalWeight += weight;\n    }\n    \n    avgColor /= totalWeight;\n    fragColor = vec4(avgColor, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}