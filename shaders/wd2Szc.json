{
    "Shader": {
        "info": {
            "date": "1554623735",
            "description": "Energy...",
            "flags": 0,
            "hasliked": 0,
            "id": "wd2Szc",
            "likes": 14,
            "name": "Plasma Coil",
            "published": 3,
            "tags": [
                "plasma",
                "transparent",
                "glow",
                "coil"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 520
        },
        "renderpass": [
            {
                "code": "// \"Plasma Coil\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat PrTorus4Df (vec3 p, float ri, float rc);\nfloat PrTorusAnDf (vec3 p, float ri, float rc, float w);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDir;\nfloat tCur, dstFar, rTor, htFlr, nSeg, tzFac, crExt, aRot;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, cvOrd, a;\n  dMin = dstFar;\n  p.y -= htFlr;\n  d = PrTorusDf (p.xzy, 1.5, rTor);\n  DMIN (1);\n  q = p;\n  q.xy = Rot2D (q.xy, 0.5 * pi);\n  q.yz = vec2 (atan (q.y, q.z) * rTor, length (q.yz) - rTor);\n  cvOrd = 7.;\n  a = atan (q.z, q.x) / (2. * pi);\n  q.xz = Rot2D (vec2 (length (q.xz) - 2., mod (q.y + 2. * a + 1., 2.) - 1.),\n     2. * pi * (cvOrd - 1.) * a);\n  d = 0.4 * (length (Rot2D (q.xz, - (floor ((0.5 * pi - atan (q.x, q.z)) + pi / cvOrd))) -\n     vec2 (0.6, 0.)) - 0.2);\n  DMIN (2);\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * ((floor (4. * atan (q.z, - q.x) / (2. * pi)) + 0.5) / 4.));\n  q.x = abs (q.x) - rTor;\n  d = PrTorus4Df (q, 1., 5. + crExt);\n  DMIN (3);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  p.y -= htFlr;\n  p.xz = Rot2D (p.xz, 2. * pi * aRot / nSeg);\n  p.xz = Rot2D (p.xz, 2. * pi * ((floor (nSeg * atan (p.z, - p.x) / (2. * pi)) + 0.5) / nSeg));\n  p.x = abs (p.x) - rTor;\n  p.z *= tzFac;\n  return PrTorusDf (p, 2., 2.);\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    p = ro + dHit * rd;\n    d = TrObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (- TrObjDf (p + e.xxx), TrObjDf (p + e.xyy), TrObjDf (p + e.yxy), TrObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, glCol, bgCol, vn, roo, p;\n  float dstObj, dstTrObj, nDotL, r, s, tCyc, t, tm;\n  rTor = 80. / (2. * pi);\n  nSeg = 12.;\n  tCyc = 50.;\n  t = 2. * pi * tCur / tCyc;\n  tm = mod (tCur / tCyc, 1.);\n  aRot = 0.01 * tCyc * t + 30. * (sin (t) - t);\n  tzFac = 0.8 + 0.2 * cos (t);\n  crExt = 0.05 * sin (512. * tCur) * SmoothBump (0.2, 0.8, 0.1, tm);\n  htFlr = 5.8;\n  roo = ro;\n  dstTrObj = TrObjRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  bgCol = mix (vec3 (0.1, 0.1, 0.2), vec3 (0.5, 0.3, 0.2), (0.5 +\n     0.5 * SmoothBump (0.3, 0.7, 0.15, mod (64. * rd.y - 16. * atan (rd.z, - rd.x) / (2. * pi) +\n     0.5 * aRot, 1.))) * SmoothBump (0.25, 0.75, 0.15, tm));\n  glCol = mix (vec3 (0.9, 0.9, 0.3) * (0.97 + 0.03 * sin (64. * tCur)), vec3 (1., 1., 0.9),\n     SmoothBump (0.3, 0.7, 0.1, tm));\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    nDotL = max (dot (vn, ltDir), 0.);\n    s = mod (nSeg * atan (ro.z, - ro.x) / (2. * pi) - aRot, 1.);\n    if (idObj == 1) {\n      col = mix (vec3 (0.7, 0.7, 0.), vec3 (1.), 0.5 + 0.5 * sin (t)) *\n         (0.4 + 0.6 * SmoothBump (0.35, 0.65, 0.05, s * tzFac));\n    } else if (idObj == 2) {\n      col = mix (vec3 (0.7, 0.6, 0.6), mix (vec3 (1., 0., 0.), vec3 (1.), 0.5 + 0.5 * cos (t)),\n         SmoothBump (0.25, 0.75, 0.1, s));\n    } else if (idObj == 3) {\n      col = vec3 (0.7, 0.7, 0.8);\n    }\n    col = col * (0.2 + 0.8 * nDotL * nDotL) +\n       0.1 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    if (idObj > 1) col.r += ((idObj == 2) ? 0.5 : 0.2) * max (- dot (rd, vn), 0.) *\n       SmoothBump (0.3, 0.7, 0.1, tm);\n  } else if (rd.y < 0.) {\n    dstObj = - ro.y / rd.y;\n    ro += dstObj * rd;\n    r = length (ro.xz);\n    if (r < 2. * rTor) {\n      col = vec3 (0.2, 0.22, 0.2) * (0.8 + 0.2 * SmoothBump (0.03, 0.97, 0.01, mod (0.5 * r, 1.)));\n      p = ro;\n      p.xz = Rot2D (p.xz, 2. * pi * ((floor (4. * atan (p.z, - p.x) / (2. * pi)) + 0.5) / 4.));\n      p.x = abs (p.x) - rTor;\n      s =  smoothstep (1., 1.3, length (p.xz * vec2 (0.4, 1.) + crExt));\n      col *= 0.8 + 0.2 * s;\n      p = ro;\n      p.xz = Rot2D (p.xz, 2. * pi * aRot / nSeg);\n      p.xz = Rot2D (p.xz, 2. * pi * ((floor (nSeg * atan (p.z, - p.x) / (2. * pi)) + 0.5) / nSeg));\n      col += glCol * 0.2 * s * SmoothBump (-0.2, 0.2, 0.1,\n         length (vec2 (r / rTor - 1., 0.8 * p.z * tzFac / (2. * pi * rTor / nSeg))));\n    } else col = bgCol;\n  } else {\n    col = bgCol;\n  }\n  dstObj = min (dstObj, dstFar);\n  if (dstTrObj < dstObj) col += glCol * smoothstep (0.05, 0.5, dstObj - dstTrObj) *\n     (0.05 + 0.4 * clamp (- dot (TrObjNf (roo + dstTrObj * rd), rd), 0., 1.));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.01;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 1.5 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.5 * pi, 0.01 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 5., -80.);\n  ro.y = max (ro.y, 0.01);\n  zmFac = 8. - 3. * abs (el);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrTorus4Df (vec3 p, float ri, float rc)\n{\n  vec2 q;\n  q = vec2 (length (p.xy) - rc, p.z);\n  q *= q;\n  return sqrt (sqrt (dot (q * q, vec2 (1.)))) - ri;\n}\n\nfloat PrTorusAnDf (vec3 p, float ri, float rc, float w)\n{\n  return abs (length (vec2 (length (p.xy) - rc, p.z)) - ri) - w;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}