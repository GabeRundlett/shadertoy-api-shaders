{
    "Shader": {
        "info": {
            "date": "1625535993",
            "description": "(click it !)\n\nan attempt to make a colored lighting that feels right.\ni had trouble finding documentation on this subject !\n\nthe \"standard\" solution is to multiply the object color with the light color,\nwhich works fine with white light or white objects.",
            "flags": 0,
            "hasliked": 0,
            "id": "NlXSWH",
            "likes": 6,
            "name": "colored light on colored objects",
            "published": 3,
            "tags": [
                "color"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 275
        },
        "renderpass": [
            {
                "code": "// this project is a mess !!!!!!\n\nconst vec3  camPos   = vec3(0.0,16.5,55.0);\n\nconst vec3  lightPos = vec3(0.,30.0,30.0);\nconst float lightIntensity = 10.;\nconst float lightRange = 0.05;\n\nconst float ambient = 0.0;\nconst float fogDepth = 0.01;\n\nconst bool standardSolution = false;\n\n//https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nconst float gridSize = 3.;\nconst float ballSize = 1.2;\nfloat getVal( in vec3 p) {\n    p.xy = (fract(p.xy/gridSize)-.5)*gridSize;\n    return length(p)-ballSize;\n}\n\nint maxIt = 16;\nfloat raymarch(vec3 ro, vec3 rd) {\n    float t = 0.;\n    for (int i = 0; i<maxIt; i++) {\n        float v = getVal(ro + rd*t);\n        t += v;\n        if (abs(v)<0.01) { return abs(t); }\n    }\n    return -1.;\n}\n\n//normals for raymarching\nvec2 eps = vec2(0.0001,0.);\nvec3 findNormals(in vec3 pos) {\n    float v0 = getVal(pos);\n    float v1 = getVal(pos+eps.xyy);\n    float v2 = getVal(pos+eps.yxy);\n    float v3 = getVal(pos+eps.yyx);\n    return normalize(vec3(v1,v2,v3)-v0);\n}\n\n//distance on a wheel\nfloat dist2(in float a, in float b) {\n    float d = abs(a - b)*2.;\n    return d < 1. ? d : 2. - d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    vec2 mouse = vec2(iMouse.x/iResolution.x,1.-iMouse.y/iResolution.y);      \n      \n    //ray origin + direction\n\tvec3 ro = camPos;\n\tvec3 rd = normalize( vec3(p,-4.)-vec3(0.,0.5,0.) );\n    \n    //we find the objects distance and color:\n    \n    float tmin = 1e10;\n    \n    vec3 hit, normals, objColHSV;\n\n    //floor\n    float t1 = -ro.y/rd.y;\n    if( t1>0.0 ) {\n        tmin = t1;\n        hit = ro + tmin*rd;\n        objColHSV = vec3(0.0,0.0,0.5 + 0.5*floor(fract(hit.x*0.5)+0.8)*floor(fract(hit.z*0.5)+0.8)); //vec3(3.0/t1);\n        normals = vec3(0.0,1.0,0.0);\n    }\n    \t\n    //spheres\n    float t3 = raymarch(ro,rd);\n    if( t3>0. && t3<tmin ) {\n        vec3 hit2 = ro + rd*t3;    \n        if (abs(hit2.x)<18. && abs(hit2.y)<18.) {\n            tmin = t3;\n            hit = hit2; \n\n            vec2 hs = (floor(hit.xy/gridSize)-6.)/vec2(12.,-6.);\n            objColHSV = vec3( fract(hs.x), clamp(hs.y,0.,1.),1.) ;\n            normals = findNormals(hit);\n        }    \n    }\n    vec3 objColRGB = pow(hsv2rgb(objColHSV),vec3(2.2)) ;\n\n\n    // shading :\n    \n    //actual light color\n    vec3 lightColHSV = vec3(mouse,1.0);\n    vec3 lightColRGB  = pow(hsv2rgb(lightColHSV),vec3(2.2));\n    //light color with maximum saturation\n    vec3 lightColRGB2 = pow(hsv2rgb(vec3(mouse.x,1.0,1.0)),vec3(2.2));\n    \n    vec3 lightVec = lightPos - hit;\n    vec3 lightDir = normalize(lightVec);\n    float lightPow = lightIntensity/(1.+length(lightVec)*lightRange);\n    \n\n    //we compute some reflection parameters\n        \n    //is our point in the shadow ?\n    float shadowT   = raymarch(hit+normals*0.1,lightDir);\n    vec3  shadowHit = hit + lightDir*shadowT;\n    float shadow = float(shadowT<0. || abs(shadowHit.x)>18. || abs(shadowHit.y)>18.);\n    \n    float diffuse = max(dot(lightDir,normals),0.0);\n    diffuse = mix(min(diffuse, shadow),1.,ambient);\n\n    vec3 reflectDir = reflect(-lightDir,-normals);\n    float specular = pow (max (dot (-rd, reflectDir), 0.0), 3.0)*0.125;\n  \n    float fog = pow(exp(-tmin*fogDepth),2.2);\n    \n    //and finally the lighting :\n    \n    vec3 col;\n\n    if (standardSolution) {\n        col = (objColRGB*diffuse + specular)*lightColRGB*lightPow*fog;\n    } else {\n    \n        //the reflectivity variable determines how much the \"pure\" light color frequency is reflected.\n        //the idea is that, for a blue light, a blue or white object will be reflective,\n        //but an orange or black one will absorbs most of the light, and appear darker.\n\n        float ref = dist2(objColHSV.x, lightColHSV.x);\n        \n        //ref = exp(-ref*objColHSV.y*3. );        \n        ref = pow(2.5/(2.5+ref*objColHSV.y),8.);\n        \n        ref *= pow(objColHSV.z,2.2);\n        \n        //mixing the white light with the colored light\n        col = diffuse * mix(objColRGB, lightColRGB2*ref, pow(lightColHSV.y,0.25));\n                \n        //specular light is simple\n        col += specular*lightColRGB;\n        \n        col *= lightPow*fog;\n\n    }    \n\n    //gamma correction\n    col = pow(col,vec3(1./2.2));\n    \n    if (fragCoord.x<80. && fragCoord.y<80.) { col = lightColRGB; }\n    \n    fragColor = vec4( col, 1.0 );\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}