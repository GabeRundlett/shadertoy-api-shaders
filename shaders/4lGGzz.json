{
    "Shader": {
        "info": {
            "date": "1472654902",
            "description": "pallete",
            "flags": 0,
            "hasliked": 0,
            "id": "4lGGzz",
            "likes": 0,
            "name": "Pallete",
            "published": 3,
            "tags": [
                "pallete"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 471
        },
        "renderpass": [
            {
                "code": "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nvec3 x( vec3 ray )\n{\n    vec3 p = floor(ray);\n    vec3 f = fract(ray);\n    vec3 h = min(smoothstep(ray, p, f),p-f);\n    for(int i = 0; i < 2; i++)\n    {\n        vec3 a = p.y - h.y * cos(f);\n        vec3 b = p.x - h.x * cos(f);\n        vec3 c = smoothstep(normalize(ray), a+p-max(f, h), a+p-min(f, h));\n        h += c * max(p, f) * 0.5;\n    }\n    return sqrt(h);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 l = vec2(iResolution.x/uv.y*uv.x/iResolution.y);\n    vec3 plasma = vec3(max(clamp(l, -uv, uv),smoothstep(iResolution.xy, sin(l), exp(uv))) -\n                       min(l, uv), uv.x/l.x/uv.y/l.y);\n    \n\tfragColor = vec4(plasma*x(plasma+vec3(uv, l.x/l.y)),1.0) + sin(uv.y/2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}