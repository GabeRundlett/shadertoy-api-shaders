{
    "Shader": {
        "info": {
            "date": "1636646130",
            "description": "Light cone (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "flt3WB",
            "likes": 16,
            "name": "Trapped Light",
            "published": 3,
            "tags": [
                "illumination",
                "lightcone"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "// \"Trapped Light\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0  // (= 0/1) optional antialising\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRound4Box2Df (vec2 p, vec2 b, float r);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrConCylDf (vec3 p, vec2 cs, float r, float h);\nfloat PrAnConCylDf (vec3 p, vec2 cs, float r, float w, float h);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec4 Hashv4v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit, rmSize, ltPos, ltPosF;\nvec2 coneCs;\nfloat tCur, dstFar, szFac, sLoop, dLoop, aLoop, hBase, lEnd, tubRot;\nfloat coneHt[2], coneRd[2];\nint idObj;\nconst int idRm = 1, idBar = 2, idLit = 3, idLitF = 4, idTube = 5, idEx = 6, idEnd = 7, idCon = 8;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvoid SetObjConf ()\n{\n  float t;\n  t = tCur / 30. + 0.5;\n  tubRot = mod (15. * t, 2. * pi);\n  t = mod (t, 1.);\n  sLoop = (1. / 1.4) / (0.01 + 0.99 * SmoothBump (0.25, 0.75, 0.15, t));\n  aLoop = 0.25 * pi / sLoop;\n  dLoop = 6. * sLoop;\n  lEnd = 1.;\n  hBase = - (6. * (0.5 * pi) + 4. * lEnd) * (1. - SmoothBump (0.1, 0.9, 0.08, t));\n  coneCs = sin (-0.17 * pi + 0.07 * pi * sin (1.5 * pi * tCur) + vec2 (0.5 * pi, 0.));\n  coneHt[0] = 0.8 * coneCs.x;\n  coneRd[0] = 0.3 - 0.8 * coneCs.y;\n  coneHt[1] = 50. * 0.8 * coneCs.x;\n  coneRd[1] = 0.95 * 0.3 - 0.8 * coneCs.y;\n  szFac = 0.5;\n  ltPos = vec3 (0., 2. * lEnd + 0.75 + coneHt[0], 0.);\n  ltPos.xy = Rot2D (Rot2D (ltPos.xy - vec2 (dLoop, 0.), - aLoop), - (aLoop - 0.5 * pi)) +\n     vec2 (0., dLoop);\n  ltPos.xy = ltPos.yx * vec2 (1., -1.);\n  ltPos.y += 2. * lEnd + hBase + 0.3;\n  ltPos.xz = Rot2D (ltPos.xz, - tubRot);\n  ltPos *= szFac;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, rCyl, rc, s, dc, dy, db;\n  dMin = dstFar;\n  q = p;\n  q.y -= rmSize.y - 0.4;\n  db = PrBoxDf (q, rmSize);\n  d = abs (db) - 0.4;\n  q.xz = mix (q.zx, q.xz, step (abs (q.z), abs (q.x)));\n  d = max (max (d, - PrBox2Df (q.zy, vec2 (2.5, 5.))), min (2.5 - length (abs (q.xz) - 15.), q.y));\n  DMINQ (idRm);\n  d = min (length (vec2 (abs (q.x) - rmSize.x + 0.15, q.z)),\n     length (vec2 (abs (q.x) - rmSize.x + 0.15, abs (q.y) - 1.8))) - 0.2;\n  q = vec3 (abs (q.xz) - 15., q.y - rmSize.y + 0.15).xzy;\n  d = max (min (d, min (length (q.xy), length (q.zy)) - 0.15), db);\n  DMINQ (idBar);\n  q = p - ltPosF;\n  q.y -= 1.;\n  d = PrCapsDf (q.xzy, 1., 0.5);\n  DMINQ (idLitF);\n  dMin /= szFac;\n  p /= szFac;  // (from \"Metallic Tubeworms\")\n  rCyl = 0.6;\n  rc = 0.6;\n  q = p;\n  dy = - q.y;\n  q.y -= 0.3;\n  d = max (PrRoundCylDf (q.xzy, rCyl + 0.4, 0.1, 0.3), dy);\n  DMINQ (idEx);\n  q = p;\n  q.y -= 2. * lEnd + hBase + 0.3;\n  s = mod (3. * q.y + 0.5, 1.);\n  d = max (max (PrRound4Box2Df (q.xz, vec2 (rCyl * (1. - 0.03 * SmoothBump (0.2, 0.8, 0.15, s))) -\n     rc, rc), abs (q.y + lEnd) - lEnd - 0.01), dy);\n  DMINQ (idEnd);\n  q.xz = Rot2D (q.xz, tubRot);\n  q.xy = Rot2D (q.yx * vec2 (-1., 1.) - vec2 (0., dLoop), aLoop - 0.5 * pi);\n  s = mod (3. * dLoop * atan (q.y, - q.x) + 0.5, 1.);\n  qq = q;\n  dc = dot (vec2 (q.x, abs (q.y)), sin (aLoop + vec2 (0., 0.5 * pi)));\n  q.xz = Rot2D (vec2 (length (q.xy) - dLoop, q.z), tubRot);\n  d = max (max (PrRound4Box2Df (q.xz, vec2 (rCyl * (1. - 0.03 * SmoothBump (0.2, 0.8, 0.15, s)) -\n     rc), rc), dc), dy);\n  DMINQ (idTube);\n  q = qq;\n  q.xy = Rot2D (q.xy, aLoop) + vec2 (dLoop, 0.);\n  q.xz = Rot2D (q.xz, - tubRot);\n  s = mod (3. * q.y + 0.5, 1.);\n  d = max (max (PrRound4Box2Df (q.xz, vec2 (rCyl * (1. - 0.03 * SmoothBump (0.2, 0.8, 0.15, s))) -\n     rc, rc), abs (q.y - lEnd) - lEnd - 0.01), dy);\n  DMINQ (idEnd);\n  q.y -= 2. * lEnd + 0.1;\n  d = PrRoundCylDf (q.xzy, rCyl + 0.1, 0.05, 0.05);\n  DMINQ (idEx);\n  q.y -= 0.2;\n  d = PrCapsDf (q.xzy, 0.35, 0.25);\n  DMINQ (idEx);\n  q.y -= 0.4 + coneHt[0];\n  d = PrAnConCylDf (q.xzy, coneCs, coneRd[0], 0.05, coneHt[0]);\n  d = max (d, min (0.05 - min (abs (q.x), abs (q.z)), 0.5 * coneHt[0] -\n     abs (q.y - 0.1 * coneHt[0])));\n  DMINQ (idCon);\n  d = PrCapsDf (q.xzy, 0.4, 0.2);\n  DMINQ (idLit);\n  dMin *= szFac;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.005, -0.005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar / szFac;\n  p /= szFac;\n  q = p;\n  q.y -= 2. * lEnd + hBase + 0.3;\n  q.xz = Rot2D (q.xz, tubRot);\n  q.xy = Rot2D (Rot2D (q.yx * vec2 (-1., 1.) - vec2 (0., dLoop), aLoop - 0.5 * pi), aLoop) +\n     vec2 (dLoop, 0.);\n  q.y -= 2. * lEnd + 0.75 + coneHt[0];\n  d = max (PrConCylDf (q.xzy, coneCs, coneRd[1], coneHt[1]), coneHt[0] - q.y);\n  DMINQ (idCon);\n  dMin *= szFac;\n  return dMin;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.005, -0.005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  int idObjT;\n  sh = 1.;\n  d = 0.01;\n  idObjT = idObj;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dMax) break;\n  }\n  idObj = idObjT;\n  return 0.7 + 0.3 * sh;\n}\n\nvec3 ShStagGrid (vec2 p)\n{\n  vec2 sp, ss;\n  if (2. * floor (0.5 * floor (p.y)) != floor (p.y)) p.x += 0.5;\n  sp = smoothstep (0.03, 0.07, abs (fract (p + 0.5) - 0.5));\n  p = fract (p) - 0.5;\n  ss = 0.3 * smoothstep (0.4, 0.5, abs (p.xy)) * sign (p.xy);\n  if (abs (p.x) < abs (p.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, sp.x * sp.y, ss.y);\n}\n\nvec4 ShStagGrid3d (vec3 p, vec3 vn)\n{\n  vec3 rg;\n  if (abs (vn.x) > 0.99) {\n    rg = ShStagGrid (p.zy);\n    rg.xz *= sign (vn.x);\n    if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n    else vn.xz = Rot2D (vn.xz, rg.x);\n  } else if (abs (vn.y) > 0.99) {\n    rg = ShStagGrid (p.zx);\n    rg.xz *= sign (vn.y);\n    if (rg.x == 0.) vn.yx = Rot2D (vn.yx, rg.z);\n    else vn.yz = Rot2D (vn.yz, rg.x);\n  } else if (abs (vn.z) > 0.99) {\n    rg = ShStagGrid (p.xy);\n    rg.xz *= sign (vn.z);\n    if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n    else vn.zx = Rot2D (vn.zx, rg.x);\n  }\n  return vec4 (vn, rg.y);\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.04 * Fbm1 (32. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.4, 0.5);\n  } else {\n    q = 0.01 * (ro.xz + 2. * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.3, 0.4, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, rg4;\n  vec3 col, vn, roo, rdo, ltDir, ltAx;\n  float dstGrnd, dstObj, dstTrObj, nDotL, sh, ltDst, att;\n  SetObjConf ();\n  ltPosF = vec3 (0., 2. * rmSize.y - 1.8, 0.);\n  roo = ro;\n  rdo = rd;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = vec4 (1., 1., 0.9, 0.2);\n    if (idObj == idTube || idObj == idEnd) {\n      col4 = col4 * (0.93 + 0.07 * smoothstep (-0.1, 0., cos (32. * atan (qHit.z, - qHit.x))));\n    } else if (idObj == idEx) {\n      col4 *= 0.95;\n    } else if (idObj == idCon) {\n      col4 = (PrConCylDf (qHit.xzy, coneCs, coneRd[0], coneHt[0]) < 0.) ?\n         vec4 (0.8 + 0.2 * sin (32. * pi * tCur), 0., 0., -1.) : col4 *\n         (0.9 + 0.1 * smoothstep (-0.7, -0.6, cos (64. * qHit.y)));\n    } else if (idObj == idBar) {\n      col4 = vec4 (0.9, 0.5, 0.2, 0.1);\n    } else if (idObj == idRm) {\n      col4 = (abs (vn.y) < 0.99) ? vec4 (1., 1., 0.9, 0.2) : ((vn.y > 0.) ?\n         vec4 (1., 0.8, 0.8, 0.2) : vec4 (0.8, 1., 0.8, 0.2) * (0.8 + 0.2 * smoothstep (0., 1.,\n         length (ro.xz) - 1.)));\n      rg4 = ShStagGrid3d (ro, vn);\n      vn = rg4.xyz;\n      vn = VaryNf (4. * ro, vn, 0.2);\n      col4.rgb *= 0.9 + 0.1 * rg4.w;\n    } else if (idObj == idLit) {\n      col4 = vec4 (1., 1., 0.9, -1.);\n    } else if (idObj == idLitF) {\n      col4 = vec4 (1., 1., 0.9, -1.);\n    }\n    if (col4.a >= 0.) {\n      ltDir = ltPosF - ro;\n      ltDst = length (ltDir);\n      ltDir = normalize (ltDir);\n      att = 1. / (1. + 0.002 * ltDst * ltDst);\n      sh = ObjSShadow (ro + 0.01 * vn, ltDir, ltDst - 2.);\n      nDotL = max (dot (vn, ltDir), 0.);\n      col = att * (col4.rgb * (0.2 + 0.8 * sh * nDotL * nDotL) +\n         step (0.95, sh) * col4.a * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.));\n      if (idObj <= idBar) {\n        ltDir = ltPos - ro;\n        ltDst = length (ltDir);\n        ltDir = normalize (ltDir);\n        ltAx = vec3 (0., -1., 0.);\n        ltAx.xy = Rot2D (ltAx.xy, -2. * aLoop);\n        ltAx.xz = Rot2D (ltAx.xz, - tubRot);\n        att = smoothstep (-0.1, 0.2, dot (ltAx, ltDir) - coneCs.x) *\n           step (- dot (vn, ltDir), 0.) / (1. + 0.002 * ltDst * ltDst);\n        col = mix (col, att * (col4.rgb * max (dot (vn, ltDir), 0.) +\n           col4.a * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.)), 0.5);\n      }\n    } else col = col4.rgb * (0.6 - 0.4 * dot (vn, rd));\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    col = 0.5 * mix (vec3 (0.8, 1., 0.5), vec3 (0.7, 0.9, 0.5), 0.2 +\n       0.8 * smoothstep (0.3, 0.7, Fbm2 (4. * ro.xz)));\n    vn = VaryNf (16. * ro, vec3 (0., 1., 0.), 1. - smoothstep (0.5, 0.8, dstGrnd / dstFar));\n    col *= 0.2 + 0.8 * max (dot (vn, sunDir), 0.);\n    col = mix (col, vec3 (0.3, 0.4, 0.5), pow (1. + rd.y, 16.));\n  } else {\n    col = SkyBgCol (ro, rd);\n  }\n  ro = roo;\n  rd = rdo;\n  dstTrObj = TrObjRay (ro, rd);\n  if (dstTrObj < min (dstObj, dstFar)) {\n    ro += dstTrObj * rd;\n    vn = TrObjNf (ro);\n    ltDst = length (ro - ltPos);\n    att = 1. / (1. + 0.2 * ltDst * ltDst);\n    col = mix (col, vec3 (1., 1., 0.8), 0.3 * max (- dot (vn, rd), 0.) *\n       att * (1. - smoothstep (-0.3, -0.1, dstTrObj - dstObj)));\n  }\n  ltAx = vec3 (0., -1., 0.);\n  ltAx.xy = Rot2D (ltAx.xy, -2. * aLoop);\n  ltAx.xz = Rot2D (ltAx.xz, - tubRot);\n  col = mix (col, vec3 (1., 1., 0.9), 0.15 * smoothstep (-0.1, 0.2,\n     dot (ltAx, normalize (ltPos - roo)) - coneCs.x));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv;\n  float el, az, zmFac, asp, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  el = 0.;\n  az = 0.27 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  el = clamp (el, -0.44 * pi, 0.45 * pi);\n  vuMat = StdVuMat (el, az);\n  rmSize = vec3 (20.4, 9.4, 20.4);\n  ro = vec3 (-17., 9., -17.);\n  sunDir = normalize (vec3 (1., 1., -1.));\n  zmFac = 2.1;\n  dstFar = 100.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 ((2. * tan (0.5 * atan (uvv.x / asp))) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRound4Box2Df (vec2 p, vec2 b, float r)\n{\n  p = max (abs (p) - b, 0.);\n  return sqrt (length (p * p)) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrConCylDf (vec3 p, vec2 cs, float r, float h)\n{\n  return max (dot (vec2 (length (p.xy) - r, p.z), cs), abs (p.z) - h);\n}\n\nfloat PrAnConCylDf (vec3 p, vec2 cs, float r, float w, float h)\n{\n  return max (abs (dot (vec2 (length (p.xy) - r, p.z), cs)) - w, abs (p.z) - h);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39);\n  return fract (sin (dot (p, cHashVA2) + vec4 (0., cHashVA2.xy, cHashVA2.x + cHashVA2.y)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}